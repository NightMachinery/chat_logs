[00:02:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[00:02:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:02:54] *** Quits: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Connection closed)
[00:03:21] *** Joins: mbomba (~mbomba@bras-base-toroon2719w-grc-37-142-114-121-181.dsl.bell.ca)
[00:03:58] *** Joins: vysn (~vysn@user/vysn)
[00:04:38] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[00:05:04] *** Quits: mbomba (~mbomba@bras-base-toroon2719w-grc-37-142-114-121-181.dsl.bell.ca) (Client Quit)
[00:13:42] *** Joins: arjun (~arjun@user/arjun)
[00:14:41] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[00:17:18] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:a9ef:8cb1:3f34:9694) (Read error: Connection reset by peer)
[00:17:21] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[00:18:14] *** Quits: FroskyArr (~froskyarr@120.239.9.162) (Quit: Leaving)
[00:18:55] *** Joins: nunggu (~q@user/nunggu)
[00:19:56] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[00:23:12] *** Joins: coot (~coot@213.134.190.95)
[00:24:11] *** Quits: haskellb1 (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Read error: Connection reset by peer)
[00:24:43] <maerwald> why does '-Wno-endif-labels' not work?
[00:25:58] <geekosaur> ?
[00:26:12] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[00:26:17] <maerwald> maybe that's the preprocessor
[00:26:48] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 250 seconds)
[00:27:00] *** Joins: notzmv (~zmv@user/notzmv)
[00:27:05] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Client Quit)
[00:30:40] <geekosaur> you'd probably have to use an option to pass it to cpp. maybe -WP,-Wno-endif-labels but I can't find the list of those options right off the top of my head
[00:31:22] <geekosaur> worry it's -optP -Wno-endif-labels
[00:31:27] <geekosaur> wrong program…
[00:32:02] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[00:32:49] <geekosaur> may require an explicit -cpp, not just -XCPP
[00:33:00] <geekosaur> *sorry
[00:33:59] <maerwald> yeah, I gave up on that 
[00:34:02] <maerwald> :D
[00:35:58] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 260 seconds)
[00:37:49] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:37:54] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[00:39:04] *** Quits: _ht (~quassel@2a02:a468:b619:1:fb02:7b89:e577:dc30) (Remote host closed the connection)
[00:41:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[00:44:12] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:44:43] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Remote host closed the connection)
[00:46:26] *** Quits: Topsi (~Tobias@dyndsl-091-249-083-234.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[00:46:37] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[00:48:13] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[00:54:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[00:56:35] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[00:58:09] *** Joins: coot (~coot@213.134.190.95)
[00:58:28] *** Quits: pottsy (~pottsy@129.227.183.244) (Ping timeout: 250 seconds)
[01:00:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:03:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:04:56] *** Quits: jao (~jao@static-68-235-44-73.cust.tzulo.com) (Ping timeout: 250 seconds)
[01:06:36] *** Joins: alx741 (~alx741@157.100.197.240)
[01:07:09] *** Joins: jao (~jao@static-68-235-44-10.cust.tzulo.com)
[01:09:30] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:10:45] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[01:11:15] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[01:12:47] *** Quits: fendor_ (~fendor@77.119.199.145.wireless.dyn.drei.com) (Remote host closed the connection)
[01:12:53] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[01:13:10] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Remote host closed the connection)
[01:14:01] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[01:14:58] *** Joins: alx741 (~alx741@157.100.197.240)
[01:16:32] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[01:17:12] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[01:17:18] *** Quits: alx741 (~alx741@157.100.197.240) (Client Quit)
[01:18:04] <tomsmeding> maerwald: dealing with some esoteric code?
[01:18:28] <maerwald> no, just wanted to tell myself where the ifdef ends
[01:18:43] <maerwald> #endif // Foo
[01:18:50] <maerwald> it starts throwing warnings
[01:18:52] <tomsmeding> gcc manpage says that they "should be in comments"
[01:18:54] <tomsmeding> really?
[01:19:13] <tomsmeding> the manpage claims that it warns if it's _not_ in a comment, and that it should be in a comment
[01:19:19] <geekosaur> you do realize // is not a C comment? (unless you declare a recent enough C standard I think)
[01:19:20] <tomsmeding> or is this not gcc
[01:19:51] <geekosaur> it's a C++ comment. /* ... */ is a C comment
[01:20:46] *** Quits: arjun (~arjun@user/arjun) (Remote host closed the connection)
[01:20:55] <tomsmeding> geekosaur: gcc accepts it starting with -std=c99; -std=c90 rejects it
[01:22:25] <geekosaur> right but I think we run cpp in -traditional so it doesn't mess things up
[01:22:37] <geekosaur> which means no -std
[01:23:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:23:04] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:23:04] *** Joins: wroathe (~wroathe@user/wroathe)
[01:23:12] <geekosaur> (being unable to do this with clang is why you have to be careful with CPP on Macs)
[01:25:39] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:26:36] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[01:31:25] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:33:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:35:18] *** Quits: briandaed (~root@185.234.208.208.r.toneticgroup.pl) (Remote host closed the connection)
[01:35:28] *** Joins: Erutuon (~Erutuon@user/erutuon)
[01:35:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:36:02] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 2.8)
[01:39:00] <ProfSimm> What's the difference between an imperative program and the IO monad / do notation
[01:39:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:39:44] *** Joins: Guest76 (~Guest76@a109-50-190-38.cpe.netcabo.pt)
[01:41:00] <Guest76> is someone willing to discuss some curry/uncurry laws?
[01:41:28] <monochrom> I may be able to discuss some curry and uncurry laws.
[01:41:38] <monochrom> Depends on what you really mean.
[01:41:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:42:39] <polyphem> ProfSimm: main :: IO () is a pure value wheras void main is actuall code
[01:43:01] <Guest76> first, i was looking for some information about applying curry function to a 3 variable scenario, like: function a b c
[01:43:53] <Guest76> but i ended up applying it 2 times so it becomes, curry(curry( function((a,b),c) ))
[01:44:28] <monochrom> Sure, the standard library "curry" function handles 2 only.
[01:45:07] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[01:45:07] <monochrom> Haskell type system is not flexible at all about "n-ary for arbitrary n".
[01:45:39] *** Joins: alp (~alp@user/alp)
[01:45:44] <Guest76> the goal of this exercise was to make some pointwise function into point free
[01:45:45] <ProfSimm> polyphem: it's a pure value but I mean it's technically the source code to an imperative program. 
[01:46:13] <maerwald> what is an imperative program?
[01:46:39] <Guest76> if i have uncurry(function1 . function2 . function3) . swap = curry(curry( function((a,b),c) ))
[01:46:44] <monochrom> I recommend working on one specific concrete exercise rather than premature idle wondering about gross generality.
[01:47:30] <Guest76> could i apply something  to cut  some curry/uncurry
[01:48:02] <Guest76> could i pm you?
[01:48:07] <monochrom> No.
[01:48:24] <maerwald> :'(
[01:48:40] <monochrom> I don't understand "uncurry(function1 . function2 . function3) . swap = curry(curry( function((a,b),c) ))".
[01:49:01] <Guest76> i see, i see
[01:49:07] <monochrom> I understand the RHS. I think I understand the LHS. I don't understand why you get to assume they are equal.
[01:49:32] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Ping timeout: 240 seconds)
[01:49:35] <monochrom> I am not even convinced they have compatible types.
[01:49:50] <Guest76> hum... i see what you are saying
[01:50:00] *** Quits: deadmarshal (~deadmarsh@95.38.119.169) (Ping timeout: 256 seconds)
[01:50:06] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[01:50:34] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[01:51:37] <monochrom> If you want to bridge the gap between "f (a,b,c)" and "g a b c", the simplest way is to define your own 3-ary version of curry3 and uncurry3, rather than trying to shoehorn into curry and uncurry.
[01:52:10] <Guest76> that was my inicial idea
[01:52:25] <polyphem> ProfSimm: if you understand that an imperative programming style results from an abstraction away from hardware , haskells IO monad is still based on lamda calculus i.e term rewriting , even if do notation "emulates" the feeling of imerativity
[01:52:26] <Guest76> but for the sake of this academic exercise i don't think is the point
[01:52:51] <monochrom> Where can I see "this exercise"?
[01:53:44] <ProfSimm> polyphem: well it not only emulates the feeling of it, but the operation of it, doesn't it
[01:54:23] <Gurkenglas> :k (->) -- should be *^op -> * -> * :(
[01:54:24] <lambdabot> * -> * -> *
[01:54:47] <polyphem> ProfSimm: that's why some say haskell is the "best" imperative language :)
[01:55:54] *** Joins: coot (~coot@213.134.190.95)
[01:56:42] *** Quits: chomwitt (~chomwitt@2a02:587:dc16:6e00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[01:56:43] <polyphem> ProfSimm: Monads in haskell give you sequencing of actions , i.e a timeline on wich you can chain your actions, whereas pure code has no timly order of execution
[01:57:32] <monochrom> I agree with maerwald about "which kind of imperative do you have in mind?"
[01:57:53] *** Quits: coot (~coot@213.134.190.95) (Client Quit)
[01:58:06] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Remote host closed the connection)
[01:58:10] <monochrom> Because sometimes it just means mutable state, some other times it just means I/O, and some other times it means both, and some other times something else entirely.
[01:58:54] *** Joins: coot (~coot@213.134.190.95)
[01:59:01] <ProfSimm> monochrom: well it means "time" first, as you noted. Order of cause and effect, and change. Hence mutability. This then allows side-effects as... a side-effect.
[01:59:01] <Guest76> monochrom it's a rather lengthy page written in portuguese, but its basically a function written in point-wise notation that i have to "translate" in to point-free
[01:59:07] <Guest76> ty for the help anyways
[01:59:16] <tomsmeding> @pl \x y z -> f z x y
[01:59:16] <lambdabot> flip . flip f
[01:59:53] <polyphem> i guess ProfSimm means imperative in sense of tickyticky execution , telleing the computer what steps to take , step by step , right ProfSimm ?
[01:59:56] <monochrom> I won't play along with talking in the generality void.
[02:00:25] <monochrom> And I won't play along with the querent providing zero information and expecting me to give an infinitely informative lecture.
[02:01:00] <geekosaur> I do not see what pointfree has to do with currying
[02:01:08] <geekosaur> in this instance
[02:01:46] <tomsmeding> @pl \a b c d e -> f (a, (b, (c, (d, e))))
[02:01:47] <lambdabot> ((((f .) .) .) .) . (. ((. ((. (,)) . (.) . (,))) . (.) . (.) . (,))) . (.) . (.) . (.) . (,)
[02:02:08] <monochrom> I know someone here who used to do that. But that's when they were unemployed.
[02:02:32] *** Quits: vglfr (~vglfr@46.96.142.183) (Ping timeout: 240 seconds)
[02:03:25] <Guest76> just a student here, probably don't know what i should be asking, sorry y'all
[02:03:51] <monochrom> You could actually post an actual exercise.
[02:04:41] <monochrom> "I have f x y = x, how to rewrite it in pointfree form" is not hard to type in.
[02:05:41] <maerwald> polyphem: well, *execution* is all imperative, even in Haskell
[02:06:32] <Guest76> it goes like this:
[02:06:33] <Guest76> data X u i = XLeaf u | Node i (X u i) (X u i) deriving Show
[02:06:33] <Guest76> x2html :: X (Unit String String) (Mode Double) -> (Double, Double) -> String
[02:06:34] <Guest76> x2html (XLeaf (Image i)) (w,h)= img w h i
[02:06:34] <Guest76> x2html (XLeaf (Text txt)) _ = txt
[02:06:35] <Guest76> x2html (Node (Vt i) x1 x2) (w,h) = htab w h (
[02:06:35] <Guest76>                                      tr( td w (h*i)     (x2html x1 (w, h*i))) ++
[02:06:36] <Guest76>                                      tr( td w (h*(1-i)) (x2html x2 (w, h*(1-i))))
[02:06:36] <Guest76>                                    )
[02:06:37] <Guest76> x2html (Node (Hl i) x1 x2) (w,h) = htab w h (
[02:06:37] <Guest76>                                      tr( td (w*i) h     (x2html x1 (w*i, h)) ++
[02:06:38] <Guest76>                                          td (w*(1-i)) h (x2html x2 (w*(1-i), h)))
[02:06:38] <Guest76>                                    )
[02:06:39] <Guest76> x2html (Node (Vb i) x1 x2) m = x2html (Node (Vt (1 - i)) x1 x2) m
[02:06:39] <Guest76> x2html (Node (Hr i) x1 x2) m = x2html (Node (Hl (1 - i)) x1 x2) m
[02:06:47] <tomsmeding> pff
[02:07:13] <tomsmeding> also
[02:07:14] <tomsmeding> @where paste
[02:07:14] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[02:07:23] <EvanR> the sense of time is still there in non-IO computations, when there is unavoidable data dependency on some other thing of the thing you actually want
[02:07:40] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[02:07:41] <EvanR> one thing must be computed before the other
[02:07:57] <EvanR> which is why Tardis can only go so far
[02:07:57] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[02:08:49] <EvanR> laziness is good because when the data dependency isn't there, you aren't limited to an artificial ordering
[02:08:52] <monochrom> That one is very difficult to convert to pointfree.
[02:09:32] <tomsmeding> impossible without a helper function that gets the field from an XLeaf, in fact
[02:09:52] <EvanR> similarly, in IO code, you aren't always limited to an artificial ordering either, see that applicative interface for doing web requests in parallel and operating on the result when / if the components are ready
[02:09:58] <polyphem> EvanR: yes implicit data dependencies order the evaluation also in pure code, but monad the data dependency is made explicit with >>=
[02:09:58] <monochrom> I have trouble believing that any reasonable teacher actually wants it.
[02:10:17] <Guest76> we have one of the best in the field, i belive
[02:10:42] <EvanR> I guess here we are again forgetting that IO's monadness is tangential esp when considering IO Applicative xD
[02:11:49] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[02:12:13] <monochrom> Well, the alternative hypothesis is that the student completely misunderstands the homework question.
[02:12:15] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[02:12:37] <monochrom> Actually extremely high probability given the selection bias.
[02:12:46] <maerwald> I feel like I'm in a monad tutorial again
[02:12:51] <maerwald> please NO
[02:12:54] <ephemient> a perspective: https://conal.net/blog/posts/the-c-language-is-purely-functional - CPP produces C that can be executed sequentially. Haskell produces IO () that can be executed sequentially.
[02:13:13] <EvanR> I love that post
[02:13:36] <Guest76> monochrom very  high probability indeed, i can assure you ahah
[02:15:59] <polyphem> ephemient: is the conal.net post down ?
[02:16:16] <EvanR> conal.net is down : (
[02:16:18] <Guest76> i could link the hashlab page, but like i said it is in Portuguese
[02:16:36] *** Quits: michalz (~michalz@185.246.204.61) (Remote host closed the connection)
[02:16:46] <Guest76> monochrom ty for your time, sorry to waste it
[02:16:48] <ephemient> hmm. www.conal.net is up, but my browser "helpfully" copied conal.net without www
[02:17:17] <ephemient> also http works I guess?
[02:17:38] <monochrom> Also s/https/http/
[02:17:41] <polyphem> http://conal.net/blog/posts/the-c-language-is-purely-functional
[02:17:58] <EvanR> ah
[02:18:12] <monochrom> I know some people or software that "helpfully" replace http by https as if I needed it.
[02:19:00] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Remote host closed the connection)
[02:20:32] <ProfSimm> polyphem: we're talking about time and change and causality and effect, but actually imperial code doens't strictly run sequentially. 
[02:20:35] <codolio> Note that from the summary, you can tell that the headline is completely false.
[02:20:48] <maerwald> imperial code?
[02:20:50] <ProfSimm> polyphem: so actually representing it as a monad which can only apply it sequentially is detrimental
[02:20:52] *** codolio is now known as dolio
[02:21:09] <ProfSimm> maerwald: also imperative *
[02:21:14] <ProfSimm> :P
[02:21:24] <monochrom> I won't mind "imperial". "emperor" used to begin as "imperator". :)
[02:21:27] <EvanR> but Applicative potentially supports parallel
[02:21:34] <ProfSimm> nais
[02:21:50] <EvanR> a plus 1 over monads in that sense
[02:22:25] <maerwald> that's just an old facebook hack that probably is not even a good idea
[02:22:50] <EvanR> applicative is one way to express a parallel composition in e.g. a hardware circuit
[02:23:05] <EvanR> compiling to categories
[02:23:14] <monochrom> Haskell is a republic programming language >:)
[02:23:59] <Benzi-Junior> hey, I'm having a little problem with xmobar under debian, 
[02:24:51] <Benzi-Junior> when I try to build with a xmobar.hs config it doesnt find the module xmobar
[02:27:35] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[02:28:17] <EvanR> I too would like to come up with a joke pertaining to "imperial code" but just can't
[02:29:19] <monochrom> Try to make a Star Wars joke/reference :)
[02:30:19] <monochrom> Why do Darth Vader's stormtroopers always miss? Because they're following buggy imperial code. :)
[02:31:26] <monochrom> Why does Palpatine say that the dark side is more powerful? Because he thinks assmebly language is more powerful than Haskell. :)
[02:32:02] <EvanR> if programming languages were star wars characters
[02:33:07] <monochrom> Yoda would be Agda. :)
[02:33:19] <EvanR> not forth ?
[02:33:47] <dsal> Mike Tyson uses the forth.
[02:33:53] <pfurla-matrix> Javascript are the prequel movies
[02:33:53] <monochrom> haha
[02:33:54] <geekosaur> Benzi-Junior, try in #xmonad
[02:33:54] <EvanR> also later yoda was upgraded to actually be able to do stuff
[02:34:20] <polyphem> javascript would be c3po
[02:34:27] <pfurla-matrix> who runs Agda code anyways?
[02:34:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[02:34:57] <pfurla-matrix> Javascript would be c3po in pieces
[02:35:05] <pfurla-matrix> Typescript would be c3po reassembled by Chewie
[02:35:08] <dsal> r2d2 speaks bf
[02:35:21] <EvanR> oh god i was kidding
[02:35:38] <monochrom> "what have I done?" :)
[02:36:22] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 260 seconds)
[02:37:54] <byorgey> "The C ADT is implemented simply as String (or char *, for you type theorists, using a notation from Kleene)"  lol
[02:38:19] <Guest76> monochrom ,about my question earlier, tomsmeding was right, i was missing an out function for the XLeaf type that i need in order to continue with the exercise
[02:38:32] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[02:38:40] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[02:38:40] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[02:38:54] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[02:38:59] <monochrom> Oh haha the "char *" comment is golden.
[02:39:02] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[02:39:10] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[02:39:18] *** Joins: little_mac_ (~little_ma@2601:410:4300:3ce0:4184:bb26:81f2:501e)
[02:39:25] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:4184:bb26:81f2:501e) (Remote host closed the connection)
[02:39:27] <EvanR> sadly I can't go to the old C channel and assert that that is what char* means as if I was serious
[02:39:53] <EvanR> they would lose their shit
[02:40:11] <monochrom> But you can go to C++ channels and Java channels to tell them that C gets it right >:)
[02:40:50] <EvanR> next up, char[] is modal logic
[02:41:02] <monochrom> ooohhhh fancy!
[02:42:12] <EvanR> (yoda is forth because he puts all his verbs at the end, not because of some lame "may the forth" crap)
[02:42:21] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:42:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:42:23] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:42:23] *** Joins: wroathe (~wroathe@user/wroathe)
[02:43:37] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[02:43:55] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[02:46:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:47:50] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 252 seconds)
[02:52:46] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Remote host closed the connection)
[02:55:48] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[02:58:00] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 256 seconds)
[02:58:43] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[02:59:34] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[02:59:47] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[03:14:40] <jackdk> what do modal logics correspond to in type systems? if propositional logic corresponds to STLC, what does K correspond to?
[03:15:07] <ski> it has been associated with staged computation
[03:15:43] <monochrom> There is a model operator that enjoys a "[] ([] X) -> [] X" laws. It may be a monad.
[03:16:05] <dolio> That one is a comonad.
[03:16:19] <ski> Löb's theorem
[03:16:42] <lyxia> Does anyone know a proof of "phantom = fmap f" ?  for phantom :: (Functor f, Contravariant f) => f a -> f b (cf. Data.Functor.Contravariant for the claim)
[03:16:45] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Remote host closed the connection)
[03:16:57] <ski> oh sorry, that'd be `[] ([] X -> X) -> [] X'
[03:17:16] <lyxia> ideally with a free theorem...
[03:17:26] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[03:17:49] <dolio> The Löb one is neither, I think.
[03:18:45] <monochrom> Wait, so f is both a covariant functor and a contravariant functor?
[03:19:18] <monochrom> What is "f" in "fmap f"?
[03:19:38] <monochrom> Ironically, I was just writing about "var not in scope" in a tutorial on type inference >:)
[03:20:41] <monochrom> Oh, true for all f.
[03:21:16] <lyxia> oh yeah, sorry for the name reuse
[03:31:59] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[03:32:09] <jackdk> monochrom: in the docs for Data.Functor.Contravariant, it says `fmap f = phantom`, which is what I think is being referenced
[03:32:25] *** Quits: Guest76 (~Guest76@a109-50-190-38.cpe.netcabo.pt) (Quit: Client closed)
[03:32:37] *** Quits: davros (~davros@host86-184-82-149.range86-184.btcentralplus.com) (Ping timeout: 240 seconds)
[03:32:42] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[03:33:20] <jackdk> is it true that "if an ADT F a has a Functor instance, every a is in positive position" (and similar for Contravariant/negative position)?
[03:33:39] <jackdk> and is it true that type variables are either in positive xor negative position?
[03:34:01] <ski> what about `Endo a' ? `IORef a' ?
[03:34:30] <ski> (or `Const c a')
[03:34:48] <jackdk> Endo does not have a functor instance, Const c a has no `a`, so every a is in positive position
[03:34:50] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[03:35:10] <jackdk> Then if F has both Functor and Contravariant instances, every a must be in both positive and negative position, and the only way that can be true is if it has no `a`s?
[03:35:27] <ski> oh, second question was a continuation of first one
[03:36:01] <jackdk> I'm trying to spitball my way to an answer to lyxia 's question because I don't know how to actually solve it
[03:36:13] <ski> well, clearly `Const c a' does have an `a'
[03:36:40] <jackdk> % :info Const
[03:36:41] <yahb> jackdk: type role Const representational phantom; type Const :: forall {k}. * -> k -> *; newtype Const a b = Const {getConst :: a}; -- Defined in `Data.Functor.Const'; instance Monoid m => Applicative (Const m) -- Defined in `Data.Functor.Const'; instance forall a k (b :: k). Eq a => Eq (Const a b) -- Defined in `Data.Functor.Const'; instance Functor (Const m) -- Defined in `Data.Functor.Const'; instance fora
[03:37:02] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Ping timeout: 260 seconds)
[03:37:06] <ski> (the implementation of it doesn't have an `a', though)
[03:37:32] <jackdk> `Const c a` has a `c`, but not an `a`. I am using "has" to mean "is present in at least one data constructor"
[03:37:56] <ski> oh, i thought you were talking about type variable occurances in the type expression
[03:38:57] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Ping timeout: 250 seconds)
[03:39:22] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[03:39:31] <jackdk> no, I'm trying to work out how to crystallise the intution that "the constraints imposed by a Functor and a Contravariant instance imply that `F a` must be phantom in `a`
[03:39:31] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[03:39:43] <ski> but if you want to, you could go `newtype MyConst c a = MkMyConst (Const c a)', and then there's an `a' present in at least one data constructor
[03:40:29] <awpr> @free forall a b. f a -> f b
[03:40:29] <lambdabot> Try `free <ident>` or `free <ident> :: <type>`
[03:40:41] <ski> @freep fpp :: forall a b. f a -> f b
[03:40:41] <lambdabot> Extra stuff at end of line
[03:40:54] <ski> @freep foo :: F a -> F b
[03:40:54] <lambdabot> $map_F g . foo = foo . $map_F f
[03:42:07] <ski> jackdk : as for your first question, i think that's right
[03:43:08] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Excess Flood)
[03:43:43] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[03:44:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[03:45:12] <lyxia> well my issue is actually that in dependent type theory you get that (a -> Type) is both a Functor and a Contravariant, or at least strongly looks like it.
[03:46:03] <ski> hm .. can you elaborate ?
[03:46:24] <ski> (and is this related to the covariant and the contravariant powerset functors ?)
[03:46:34] *** Joins: davros (~davros@host86-184-82-232.range86-184.btcentralplus.com)
[03:46:34] *** Quits: td_ (~td@muedsl-82-207-238-147.citykom.de) (Ping timeout: 250 seconds)
[03:47:12] <lyxia> yes that is the powerset functor
[03:47:26] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[03:47:55] <lyxia> so you can map any function (f :: a -> b) forward and backward as the image/reverse image mapping
[03:48:27] *** Joins: td_ (~td@94.134.91.240)
[03:49:18] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:51:03] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[03:51:17] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Ping timeout: 240 seconds)
[03:51:19] *** Quits: AkechiShiro (~licht@user/akechishiro) (Ping timeout: 250 seconds)
[03:51:33] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:53:18] *** Joins: AkechiShiro (~licht@user/akechishiro)
[03:53:37] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5) (Ping timeout: 240 seconds)
[03:54:21] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[03:56:33] *** Joins: jackson99 (~bc8147f2@83.167.180.121)
[04:00:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[04:02:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:02:40] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Remote host closed the connection)
[04:04:52] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:05:00] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[04:07:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[04:14:56] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:20:34] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[04:22:00] *** Quits: litharge (litharge@libera/bot/litharge) (Remote host closed the connection)
[04:22:25] *** Quits: polyphem (~rod@2a02:810d:840:8754:2622:b61:ec32:bf43) (Quit: WeeChat 3.4)
[04:23:56] *** Joins: litharge (litharge@libera/bot/litharge)
[04:24:00] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[04:25:50] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:27:26] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:35:32] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[04:36:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Remote host closed the connection)
[04:38:05] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[04:38:30] *** Quits: akurilin_ (uid322841@id-322841.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:38:40] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:41:43] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[04:41:46] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:47:52] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:49:28] *** Quits: jushur (~human@user/jushur) (Quit:  ¯\_(ツ)_/¯)
[04:51:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[04:52:02] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[04:52:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:52:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:52:42] *** Joins: wroathe (~wroathe@user/wroathe)
[04:52:48] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[04:53:36] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:54:25] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[05:01:13] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[05:01:35] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[05:07:11] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[05:12:18] *** Quits: dsrt^ (~dsrt@50.231.5.242) (Ping timeout: 256 seconds)
[05:23:41] *** Quits: jao (~jao@static-68-235-44-10.cust.tzulo.com) (Remote host closed the connection)
[05:26:15] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:32:53] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[05:35:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[05:38:43] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 256 seconds)
[05:38:53] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[05:48:57] *** Quits: xff0x (~xff0x@2001:1a81:523c:5300:707e:bf72:dc84:30f7) (Ping timeout: 250 seconds)
[05:50:17] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[05:51:03] *** Joins: xff0x (~xff0x@2001:1a81:5277:3c00:f024:75d4:2bb:2631)
[05:51:54] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[05:53:00] *** Joins: zaquest (~notzaques@5.130.79.72)
[05:57:28] *** Joins: xsperry (~xs@user/xsperry)
[06:01:49] *** Joins: alp (~alp@user/alp)
[06:07:56] *** Quits: matijja (~matijja@193.77.181.201) (Quit: ZNC 1.8.1 - https://znc.in)
[06:08:11] *** Joins: matijja (~matijja@193.77.181.201)
[06:08:39] *** Quits: dfordvm (~dfordivam@tk2-219-19469.vs.sakura.ne.jp) (Ping timeout: 268 seconds)
[06:09:08] *** Joins: dfordvm (~dfordivam@tk2-219-19469.vs.sakura.ne.jp)
[06:14:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:22:43] *** Joins: califax- (~califax@user/califx)
[06:25:54] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[06:25:54] *** califax- is now known as califax
[06:30:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:30:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:30:31] *** Joins: wroathe (~wroathe@user/wroathe)
[06:40:30] *** Joins: andreabedini (~andreabed@8s8kj6nj5000h5zkmpxr.ip6.superloop.com)
[06:42:09] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:2d90:ff3:b02f:c2ef)
[06:42:58] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:42:58] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:42:58] *** finn_elija is now known as FinnElija
[06:45:39] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:50:54] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 256 seconds)
[06:52:43] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[06:53:01] *** Joins: cynomys (~cynomys@user/cynomys)
[06:58:18] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:58:39] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[07:04:42] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[07:07:33] *** Joins: lionhairdino (~jacoo@121.131.39.82)
[07:10:14] *** Quits: td_ (~td@94.134.91.240) (Ping timeout: 250 seconds)
[07:11:53] *** Joins: td_ (~td@94.134.91.157)
[07:14:25] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:42] *** Quits: davros (~davros@host86-184-82-232.range86-184.btcentralplus.com) (Ping timeout: 256 seconds)
[07:15:39] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:17:18] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[07:23:40] *** Quits: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk) (Remote host closed the connection)
[07:24:12] *** Joins: burnsidesLlama (~burnsides@client-8-88.eduroam.oxuni.org.uk)
[07:24:18] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: Lost terminal)
[07:26:40] *** Joins: davros (~davros@host86-184-190-187.range86-184.btcentralplus.com)
[07:27:34] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 260 seconds)
[07:28:26] *** Quits: burnsidesLlama (~burnsides@client-8-88.eduroam.oxuni.org.uk) (Ping timeout: 250 seconds)
[07:46:26] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 256 seconds)
[07:50:28] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:53:27] *** Joins: Erutuon (~Erutuon@user/erutuon)
[07:54:52] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[08:10:28] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 250 seconds)
[08:14:28] *** Quits: little_mac_ (~little_ma@2601:410:4300:3ce0:4184:bb26:81f2:501e) (Remote host closed the connection)
[08:15:20] *** Joins: deadmarshal (~deadmarsh@95.38.114.1)
[08:21:03] *** Joins: on^ (~on@50.231.5.242)
[08:23:45] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[08:24:57] *** Joins: mbuf (~Shakthi@122.173.235.64)
[08:25:22] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[08:31:57] *** Quits: davros (~davros@host86-184-190-187.range86-184.btcentralplus.com) (Ping timeout: 240 seconds)
[08:33:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:35:30] *** Joins: vysn (~vysn@user/vysn)
[08:39:42] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[08:42:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:42:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:42:26] *** Joins: wroathe (~wroathe@user/wroathe)
[08:44:07] *** Joins: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com)
[08:46:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:49:52] *** Joins: zyklotomic (~ethan@r4-128-61-88-167.res.gatech.edu)
[08:50:11] <zyklotomic> is there a way to detect when a data type has been modified to fit more subtypes?
[08:50:29] <zyklotomic> which would be nice if you have ever used a case-of statement w/ a wildcard
[08:50:59] <dsal> What is a subtype?
[08:51:12] <zyklotomic> i'm not sure if im phrasing it correctly sorry
[08:51:23] <zyklotomic> say you have data MyData = A | B
[08:51:28] <dsal> Ah, yeah.
[08:51:34] <dsal> Well, the answer is in your second statement.  :)
[08:51:38] <zyklotomic> and you do case x of; A -> smth; _ -> smth
[08:51:40] <dsal> You're basically turning off the detection.
[08:51:45] <dsal> So don't do that.  :)
[08:54:11] <zyklotomic> the alternative would be very verbose sometimes though
[08:54:15] <zyklotomic> i guess accept that then :)
[08:54:50] <zyklotomic> i had the dumb idea, what if you could serialize the data constructor
[08:55:00] *** Quits: td_ (~td@94.134.91.157) (Ping timeout: 256 seconds)
[08:55:00] <zyklotomic> and assign a hash to each wildcard?
[08:55:44] <EvanR> how does the compiler know that you do or don't care about the rest of the cases
[08:56:00] <EvanR> I mean, _ and _ hash to the same thing
[08:56:05] <zyklotomic> what do you mean
[08:56:19] <zyklotomic> i meant hash the data constructor itself
[08:56:29] <zyklotomic> so when the constructor gets changed, the hash changes
[08:56:42] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[08:56:42] *** Joins: td_ (~td@94.134.91.203)
[08:56:44] <EvanR> are you changing the constructors or adding a new one
[08:56:52] *** Quits: jackson99 (~bc8147f2@83.167.180.121) (Quit: CGI:IRC (Session timeout))
[08:57:08] <zyklotomic> by change, i meant as in data MyType = A | B -> data MyType = A | B | C
[08:57:11] <EvanR> because you'll get an error if you change constructors that you previous used
[08:57:27] <zyklotomic> yeah, apologies, i meant adding new ones
[08:57:45] <zyklotomic> i understand now that constructor refers to "A", "B", "C" themselves now
[08:58:06] <EvanR> when you put _ you signal that you don't care what constructor it is, it has no other information attached
[08:58:37] <zyklotomic> yeah, but under the understanding of what the current available constructors are
[08:58:37] <EvanR> and the reason you did this may or may not change when you add a new constructor
[08:58:40] <zyklotomic> which could change
[08:59:25] <EvanR> kind of sounds like you want a paper clip to appear and ask you to consider anywhere you ever used a _ if you add to MyType. Which would be good I guess
[08:59:43] <zyklotomic> yeah, i'm wondering if i'm worrying too much about a problem that isn't that big of a deal
[08:59:44] <EvanR> I mean, you put _ because you didn't care about the other cases. 
[08:59:57] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[08:59:58] <EvanR> who knows if it's a bug now
[09:00:06] <zyklotomic> yeah, but you are only sure at the time of writing
[09:00:13] <EvanR> if even xD
[09:00:33] <EvanR> checking all cases of the data type is usually right
[09:01:08] <zyklotomic> so maybe the easy/(un?)satisfying solution is to never use _
[09:01:59] <dsal> Well, yeah.  It's the exact answer, though.  _ tells the compiler you don't care anymore.  Not using _ tells the compiler to stop compiling your code if a new thing is added.
[09:02:10] <EvanR> also easy, satisfying, make data types which you're pretty sure are finished
[09:02:24] <EvanR> like, no one is changing Maybe, or data Queue a = Queue [a] [a], etc
[09:02:27] <EvanR> too simple to change
[09:02:37] <dibblego> non-overlapping patterns are easier to read
[09:03:05] <dibblego> https://en.wikipedia.org/wiki/Expression_problem
[09:05:53] <zyklotomic> i see, i'll read up
[09:07:35] <zyklotomic> dibblego: sry, i'm not seeing how non-overlapping patterns will help for this
[09:07:45] <dibblego> they are separate things
[09:07:56] <dibblego> try to achieve non-overlapping patterns, it's better code
[09:07:56] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[09:08:14] <dibblego> the next thing you are describing is the expression problem, classy optics solve it reasonably well
[09:08:26] <zyklotomic> oh, and any code that uses _ can't be non-overlapping
[09:08:43] <dibblego> not always, but often
[09:08:57] <zyklotomic> i see why now
[09:09:03] <dibblego> non-overlapping patterns can be identified by re-ordering the cases and the program will not change
[09:13:02] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[09:13:22] *** Joins: prasad (~user@c-73-170-49-136.hsd1.ca.comcast.net)
[09:13:22] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:14:20] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.4)
[09:14:58] *** Joins: rusrushal13 (~rusrushal@2401:4900:447e:b662:c06d:f354:ecf:b32e)
[09:16:10] <zyklotomic> https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html?highlight=overlapping#ghc-flag--Woverlapping-patterns
[09:16:25] <zyklotomic> dibblego: so it seems like the GHC definition of overlapping-patterns is less strict right
[09:16:44] <zyklotomic> it only cares that there aren't unreachable cases
[09:17:01] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:17:12] <zyklotomic> so having a _ at the very bottom of a case-of expresion won't be considered "overlapping" to ghc
[09:17:45] <dibblego> yes
[09:18:25] <zyklotomic> thanks for the insight, really appreciate it
[09:19:06] *** Joins: curtis (~curtis@76.208.249.124)
[09:19:12] *** Quits: deadmarshal (~deadmarsh@95.38.114.1) (Ping timeout: 268 seconds)
[09:19:21] <zyklotomic> still a bit tempted to try to implement my original idea just for fun though :)
[09:20:17] <EvanR> oh, were you talking about data type migration
[09:20:31] <EvanR> instead of modifying, make a new type with an incremented version number
[09:20:44] *** Joins: fef (~thedawn@user/thedawn)
[09:21:10] *** Quits: curtis (~curtis@76.208.249.124) (Quit: leaving)
[09:21:50] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:22:36] *** Joins: curtis (~curtis@76.208.249.124)
[09:22:46] *** Quits: lionhairdino (~jacoo@121.131.39.82) (Ping timeout: 256 seconds)
[09:25:01] <dibblego> class AsA a where _A :: Prism' a (); instance AsA MyType where...; instance AsA MyTypeVersion2 where...
[09:26:31] *** Quits: rusrushal13 (~rusrushal@2401:4900:447e:b662:c06d:f354:ecf:b32e) (Ping timeout: 256 seconds)
[09:26:32] *** Quits: curtis (~curtis@76.208.249.124) (Client Quit)
[09:26:50] *** Joins: statusbot1 (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com)
[09:27:45] *** Joins: mncheckm (~mncheck@193.224.205.254)
[09:28:01] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[09:28:02] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[09:28:05] *** allbery_b is now known as geekosaur
[09:28:30] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[09:28:39] *** Joins: MironZ7 (~MironZ@nat-infra.ehlab.uk)
[09:28:47] *** Joins: EsoAlgo3 (~EsoAlgo@152.70.142.52)
[09:28:48] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[09:29:25] *** Joins: ajb_ (~ajb@cupid.whatbox.ca)
[09:30:08] *** Joins: np (~nerdypepp@user/nerdypepper)
[09:30:12] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 250 seconds)
[09:30:34] *** Joins: dobblego (~dibblego@122-199-1-30.ip4.superloop.com)
[09:30:34] *** Quits: dobblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[09:30:34] *** Joins: dobblego (~dibblego@haskell/developer/dibblego)
[09:30:37] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[09:30:52] *** Joins: hyiltiz_ (~quassel@31.220.5.250)
[09:30:55] *** Quits: son0p (~ff@2800:484:1d81:b700::5) (Ping timeout: 268 seconds)
[09:31:09] *** Joins: hgolden_ (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[09:31:33] *** Joins: uroboros (~ouroboros@user/ouroboros)
[09:31:43] *** Joins: ezzieygu1wuf (~Unknown@user/ezzieyguywuf)
[09:31:45] *** Joins: gawen_ (~gawen@user/gawen)
[09:31:50] *** Joins: gentauro_ (~gentauro@185.107.12.141)
[09:31:51] *** Joins: dextaa__ (~dextaa@217.61.225.120)
[09:31:56] *** Joins: fryguybo1 (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[09:31:56] *** Joins: absence_ (torgeihe@hildring.pvv.ntnu.no)
[09:32:07] *** Joins: zyklotom1 (~ethan@r4-128-61-88-167.res.gatech.edu)
[09:32:08] *** Joins: Clint_ (~Clint@user/clint)
[09:32:11] *** Joins: Cheery_ (~cheery@7-239-179-185.static.tentacle.fi)
[09:32:14] *** Joins: marquis_1ndras (~marquis_a@124.170.163.166)
[09:32:14] *** Joins: xdej (~xdej@quatramaran.salle-s.org)
[09:32:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Remote host closed the connection)
[09:32:38] *** Joins: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[09:32:39] *** Joins: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[09:32:48] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[09:33:30] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[09:35:00] *** Joins: Rabbit (~rabbit@206.81.18.26)
[09:35:27] *** Joins: cyphase_eviltwin (~cyphase@user/cyphase)
[09:37:00] *** Parts: jakalx (~jakalx@base.jakalx.net) (Disconnected: Replaced by new connection)
[09:37:01] *** Joins: jakalx (~jakalx@base.jakalx.net)
[09:37:08] *** Quits: prasad (~user@c-73-170-49-136.hsd1.ca.comcast.net) (*.net *.split)
[09:37:08] *** Quits: zyklotomic (~ethan@r4-128-61-88-167.res.gatech.edu) (*.net *.split)
[09:37:08] *** Quits: on^ (~on@50.231.5.242) (*.net *.split)
[09:37:08] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (*.net *.split)
[09:37:08] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (*.net *.split)
[09:37:09] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (*.net *.split)
[09:37:09] *** Quits: dextaa_ (~dextaa@217.61.225.120) (*.net *.split)
[09:37:09] *** Quits: juhp (~juhp@128.106.188.82) (*.net *.split)
[09:37:09] *** Quits: Akiva (~Akiva@user/Akiva) (*.net *.split)
[09:37:09] *** Quits: WhateverRabbit (~rabbit@206.81.18.26) (*.net *.split)
[09:37:09] *** Quits: kmein_ (~weechat@user/kmein) (*.net *.split)
[09:37:09] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (*.net *.split)
[09:37:09] *** Quits: mncheck (~mncheck@193.224.205.254) (*.net *.split)
[09:37:09] *** Quits: Megant (megant@user/megant) (*.net *.split)
[09:37:09] *** Quits: cyphase (~cyphase@user/cyphase) (*.net *.split)
[09:37:09] *** Quits: marquis_andras (~marquis_a@124.170.163.166) (*.net *.split)
[09:37:09] *** Quits: abrar (~abrar@static-108-2-152-54.phlapa.fios.verizon.net) (*.net *.split)
[09:37:09] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[09:37:09] *** Quits: Clint (~Clint@user/clint) (*.net *.split)
[09:37:09] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[09:37:09] *** Quits: gentauro (~gentauro@user/gentauro) (*.net *.split)
[09:37:09] *** Quits: ishutin (~ishutin@87-97-82-177.pool.digikabel.hu) (*.net *.split)
[09:37:09] *** Quits: c_wraith (~c_wraith@adjoint.us) (*.net *.split)
[09:37:09] *** Quits: statusfailed (~statusfai@statusfailed.com) (*.net *.split)
[09:37:09] *** Quits: canta (~canta@user/canta) (*.net *.split)
[09:37:09] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[09:37:09] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (*.net *.split)
[09:37:09] *** Quits: Goodbye_Vincent (~Goodbye_V@freakshells.net) (*.net *.split)
[09:37:09] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[09:37:09] *** Quits: mmalter (~mmalter@88.126.10.237) (*.net *.split)
[09:37:09] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (*.net *.split)
[09:37:09] *** Quits: Cheery (~cheery@7-239-179-185.static.tentacle.fi) (*.net *.split)
[09:37:09] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (*.net *.split)
[09:37:09] *** Quits: juri_ (~juri@178.63.35.222) (*.net *.split)
[09:37:09] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (*.net *.split)
[09:37:09] *** Quits: xstill- (xstill@fimu/xstill) (*.net *.split)
[09:37:09] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (*.net *.split)
[09:37:09] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (*.net *.split)
[09:37:09] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[09:37:09] *** Quits: fluxit (~fluxit@techsmix.net) (*.net *.split)
[09:37:09] *** Quits: andjjj23_ (~irc@107.170.228.47) (*.net *.split)
[09:37:09] *** Quits: forell (~forell@user/forell) (*.net *.split)
[09:37:09] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[09:37:09] *** Quits: hyiltiz (~quassel@31.220.5.250) (*.net *.split)
[09:37:09] *** Quits: statusbot (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com) (*.net *.split)
[09:37:09] *** Quits: neverwas (jpneverwas@swissbox.unperson.link) (*.net *.split)
[09:37:09] *** Quits: n3t (n3t@user/n3t) (*.net *.split)
[09:37:09] *** Quits: ski (~ski@remote11.chalmers.se) (*.net *.split)
[09:37:09] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[09:37:09] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (*.net *.split)
[09:37:09] *** Quits: kojo5551 (~kojo5551@fep.grid.pub.ro) (*.net *.split)
[09:37:09] *** Quits: MironZ (~MironZ@nat-infra.ehlab.uk) (*.net *.split)
[09:37:09] *** Quits: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg) (*.net *.split)
[09:37:09] *** Quits: nerdypepper (~nerdypepp@user/nerdypepper) (*.net *.split)
[09:37:09] *** Quits: drdo (~drdo@roach0.drdo.eu) (*.net *.split)
[09:37:09] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (*.net *.split)
[09:37:09] *** Quits: ouroboros (~ouroboros@user/ouroboros) (*.net *.split)
[09:37:09] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[09:37:09] *** Quits: ajb (~ajb@cupid.whatbox.ca) (*.net *.split)
[09:37:10] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (*.net *.split)
[09:37:10] *** Quits: carter (sid14827@helmsley.irccloud.com) (*.net *.split)
[09:37:10] *** Quits: xdej_ (~xdej@quatramaran.salle-s.org) (*.net *.split)
[09:37:10] *** Quits: TMA (~tma@twin.jikos.cz) (*.net *.split)
[09:37:10] *** Quits: hubvu_ (sid495858@tinside.irccloud.com) (*.net *.split)
[09:37:10] *** Quits: jtmar (~james@jtmar.me) (*.net *.split)
[09:37:10] *** Quits: gawen (~gawen@user/gawen) (*.net *.split)
[09:37:10] *** Quits: absence (torgeihe@hildring.pvv.ntnu.no) (*.net *.split)
[09:37:10] *** Quits: kawpuh (~kawpuh@66.42.81.80) (*.net *.split)
[09:37:10] *** Quits: byorgey (~byorgey@155.138.238.211) (*.net *.split)
[09:37:10] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[09:37:11] *** MironZ7 is now known as MironZ
[09:37:11] *** uroboros is now known as ouroboros
[09:37:11] *** dobblego is now known as dibblego
[09:37:35] *** Joins: Megant (megant@user/megant)
[09:38:15] *** Joins: on^ (~on@50.231.5.242)
[09:38:16] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[09:38:37] *** EsoAlgo3 is now known as EsoAlgo
[09:40:50] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[09:41:17] *** Joins: xkuru (~xkuru@user/xkuru)
[09:42:48] *** Rabbit is now known as 068AAJYTL
[09:42:50] *** Joins: xstill- (xstill@lounge.fi.muni.cz)
[09:42:50] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[09:42:50] *** Joins: amk (~amk@109.255.169.126)
[09:42:50] *** Joins: kojo5551 (~kojo5551@fep.grid.pub.ro)
[09:42:50] *** Joins: abrar (~abrar@static-108-2-152-54.phlapa.fios.verizon.net)
[09:42:50] *** Joins: ski (~ski@remote11.chalmers.se)
[09:42:50] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[09:42:50] *** Joins: forell_ (~forell@host-178-216-90-220.sta.tvknaszapraca.pl)
[09:42:50] *** Joins: prasad (~user@c-73-170-49-136.hsd1.ca.comcast.net)
[09:42:50] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[09:42:50] *** Joins: kmein_ (~weechat@user/kmein)
[09:42:50] *** Joins: ishutin (~ishutin@87-97-82-177.pool.digikabel.hu)
[09:42:50] *** Joins: c_wraith (~c_wraith@adjoint.us)
[09:42:50] *** Joins: statusfailed (~statusfai@statusfailed.com)
[09:42:50] *** Joins: canta (~canta@user/canta)
[09:42:50] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[09:42:50] *** Joins: mmalter (~mmalter@88.126.10.237)
[09:42:50] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[09:42:50] *** Joins: juri_ (~juri@178.63.35.222)
[09:42:50] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[09:42:50] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[09:42:50] *** Joins: meejah (~meejah@rutas.meejah.ca)
[09:42:50] *** Joins: fluxit (~fluxit@techsmix.net)
[09:42:50] *** Joins: andjjj23_ (~irc@107.170.228.47)
[09:42:50] *** Joins: neverwas (jpneverwas@swissbox.unperson.link)
[09:42:50] *** Joins: n3t (n3t@user/n3t)
[09:42:50] *** Joins: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg)
[09:42:50] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:42:50] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[09:42:50] *** Joins: carter (sid14827@helmsley.irccloud.com)
[09:42:50] *** Joins: TMA (~tma@twin.jikos.cz)
[09:42:50] *** Joins: hubvu_ (sid495858@tinside.irccloud.com)
[09:42:50] *** Joins: jtmar (~james@jtmar.me)
[09:42:50] *** Joins: kawpuh (~kawpuh@66.42.81.80)
[09:42:50] *** Joins: byorgey (~byorgey@155.138.238.211)
[09:42:52] *** Joins: Akiva (~Akiva@user/Akiva)
[09:42:52] *** Quits: d34df00d (~d34df00d@2600:1700:8c60:3a10::48) (Excess Flood)
[09:43:58] *** xstill- is now known as Guest9250
[09:45:08] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[09:45:52] *** Quits: bollu (~bollu@159.65.151.13) (Quit: Ping timeout (120 seconds))
[09:45:52] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[09:46:11] *** Joins: bollu (~bollu@159.65.151.13)
[09:47:48] *** Joins: seer (~delicacie@2601:6c4:4080:3f80:3dfd:43d3:c415:2e6f)
[09:47:50] *** seer is now known as Inst
[09:47:52] <Inst> hai guys
[09:48:14] <Inst> I've been recently thinking, what's the relationship between a function and an algorithm?
[09:49:09] <dibblego> is this fair dinkum?
[09:49:25] *** Joins: vglfr (~vglfr@88.155.15.250)
[09:50:22] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Ping timeout: 260 seconds)
[09:50:33] <Inst> ???
[09:51:20] <Axman6> algorithms can be made from functions? 
[09:52:13] <Inst> algorithms can be made from functions, but algorithms can also be the implementation of functions
[09:52:14] <Axman6> algorithms are often defined as being a sequence of steps, but that would generally mean that lots of algorithm implementations in Haskell aren't algorithms because the order of steps may not be well defined
[09:52:44] <Axman6> yes - because really, everything is functions; just ask Church
[09:53:32] <Axman6> > (\t f -> t) "Everything is a function" "Not everything is a function"
[09:53:33] <lambdabot>  "Everything is a function"
[09:53:41] <Inst> in which case, why not just consider algorithms the specific implementation of a function?
[09:53:57] <c_wraith> at that point, you're starting to get into the weeds
[09:53:57] <Inst> and if the order of steps may not be well defined, shouldn't there be an order of steps, even if it's hidden from casual examination?
[09:54:11] <c_wraith> what value does a statement like that have?
[09:54:30] *** Joins: koolazer (~koo@user/koolazer)
[09:55:10] <random-jellyfish> wouldn't reading about Turing machines shed more light on the topic?
[09:55:46] <Inst> algorithms iirc come from mathematics, not computer science
[09:55:46] <c_wraith> depending on your exact defintions of "function" and "algorithm", all functions implement algorithms and all algorithms can be functions.  The thing is, "depending on exact definitions" is doing a lot of heavy lifting.
[09:55:54] <dibblego> no read #haskell instead
[09:55:58] <Axman6> (\f t -> t) -- got my canonical true definion above backwards!
[09:56:02] <c_wraith> computer science is the branch of mathematics concerned with efficiency
[09:56:17] <c_wraith> anything coming from computer science is math
[09:57:03] <Inst> https://plato.stanford.edu/entries/turing-machine/
[09:57:15] <int-e> coming from math, functions need not be computable
[09:58:34] <random-jellyfish> "Computability is the ability to solve a problem in an effective manner. It is a key topic of the field of computability theory within mathematical logic and the theory of computation within computer science. The computability of a problem is closely linked to the existence of an algorithm to solve the problem.
[09:58:34] <random-jellyfish> The most widely studied models of computability are the Turing-computable and μ-recursive functions, and the lambda calculus, all of which have computationally equivalent power. Other forms of computability are studied as well: computability notions weaker than Turing machines are studied in automata theory, while computability notions stronger
[09:58:35] <random-jellyfish> than Turing machines are studied in the field of hypercomputation." , https://en.wikipedia.org/wiki/Computability#:~:text=Computability%20is%20the%20ability%20to,algorithm%20to%20solve%20the%20problem.
[09:58:39] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:58:47] <c_wraith> There isn't really anything deep to explore.  It comes down to exact definitions in use.  And you get to choose those definitions when you start the conversation.
[09:58:49] *** Joins: rusrushal13 (~rusrushal@2401:4900:447e:b662:c06d:f354:ecf:b32e)
[09:59:21] <Inst> c_wraith: my topic of interest is whether FP allows you to reason about algorithms more easily
[10:00:01] <random-jellyfish> I'd say it allows you to do it differently
[10:00:13] <random-jellyfish> whether it's easy or not depends on you
[10:00:28] <Inst> i no longer feel the sense that FP is easier than imperative
[10:00:30] <c_wraith> I don't think anyone thinks Hoare triples are easier than referential transparency
[10:00:52] <c_wraith> the thing is, people don't actually use Hoare triples, because they just go "eh, good enough"
[10:00:57] <int-e> The lack of mutation in pure functional languages simplifies reasoning.
[10:00:58] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[10:01:25] <int-e> But it also limits how you implement things... it's not a free meal.
[10:02:28] <random-jellyfish> recursion gives you a "feeling" of mutability
[10:02:50] <Inst> strictly, just accumulators
[10:02:50] <random-jellyfish> with the arguments changing at each call
[10:02:56] <c_wraith> recursion gives you rebinding locals.  That's very different from the kind of mutability you need for like a Union-Find tree
[10:03:48] <monochrom> If you allow yourself pointer-heavy mutable data structures, reasoning about algorithms operating on them is still an open question (therefore harder than even PhD level), for starters look up "separation logic".
[10:03:55] <c_wraith> (specifically, the path compression portion of the Find algorithm)
[10:04:15] *** Joins: _ht (~quassel@82-168-34-160.fixed.kpn.net)
[10:04:24] <monochrom> However, union-find absolutely relies on allowing a pointer-heavy mutable data structure.
[10:04:36] <monochrom> Yeah that :)
[10:05:08] <Inst> so FP algorithms are a subset of all CS algorithms?
[10:05:17] <monochrom> Honest! I swear I was just too slow typing! I already thought of union-find without reading. :)
[10:05:31] <c_wraith> Union-Find is a really good example, though
[10:05:35] <int-e> the term "algorithm" is not rigorously defined
[10:05:35] <Axman6> Inst: purity certainly lets you reason about algorithms more easily, but not all algorithms can be implemented efficiently with pure functions (we have some cool tricks to allow us to write algorithms which use mutation and guarantee they are pure, but that doesn't mean all mutable algorithms can be implemented efficiently with purity)
[10:05:53] <int-e> it's too imprecise to answer "so FP algorithms are a subset of all CS algorithms?"
[10:06:00] <c_wraith> Union-Find is easy to understand and absolutely needs mutable pointers
[10:06:21] <int-e> You /can/ simulate mutation with persistent associative maps and recursion.
[10:06:24] <dolio> Union-find is easy to understand?
[10:06:45] <c_wraith> Yes.  It's not easy to *prove*, but it's easy to understand
[10:06:54] <int-e> And implement union-find on top of that. But you incur a logarithmic slowdown (and a significant constant factor). Is it the same algorithm? You can argue either way.
[10:07:09] <monochrom> Oh BTW even just proving its amortized time bounds is extremely messy. Especially in contrast to how the algorithms are like 5-liners and "simple" loops.
[10:07:21] <dolio> I think it's really easy to not implement optimally.
[10:07:29] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[10:08:05] <dolio> Even if you know the sort of trick to do.
[10:08:14] <int-e> don't mess up the ranks; don't forget path compression
[10:08:16] <c_wraith> there isn't really a trick, is there?
[10:08:26] <c_wraith> It's just union by rank, find with path compression
[10:08:37] <monochrom> I no longer teach a data structure course, but every year when I taught it, the time bound proof was the most dreaded part of the whole course.
[10:08:47] <c_wraith> yeah.  that time bound proof is ridiculous
[10:09:03] <int-e> Hmm I don't think I've ever worked through it.
[10:09:22] <int-e> I just marvelled at the inverse Ackermann function...
[10:09:35] <c_wraith> when it involves a function you've never heard of in any other context, you know it's going to be hairy
[10:09:48] <int-e> Oh I've heard of it of course :)
[10:09:59] <int-e> (Well, the Ackermann function)
[10:10:03] <c_wraith> You've heard of *inverse* Ackermann?
[10:10:09] <monochrom> So, one day, I signed up for receiving a teacher's copy of CLRS, therefore also receiving one of the author's own lecture slides. I was very excited, how does the expert teach this proof to class?
[10:10:33] <int-e> "then a miracle occurs"
[10:10:38] <monochrom> I opened his slides. He totally doesn't teach the proof in lecture at all. >:E
[10:11:17] <c_wraith> My professor for the relevant course skipped the inverse ackermann function.  He just proved amortized O(n log n) with union by rank, and ignored path compression.
[10:11:32] <int-e> it may be more interesting that there are claims in the literature that this scheme is amortized constant time :)
[10:11:34] <monochrom> Actually that's a relief. I guess it means I don't have to teach the proof either. >:)
[10:11:58] <monochrom> Really, in my case it's a 2nd year course, I don't think the students actually benefit from seeing the proof...
[10:12:02] <c_wraith> I thought you said you didn't need to even teach the course anymore. :P
[10:12:33] <monochrom> But I'm a bit bivalent because it's a prominent example of a non-trivial potential argument.
[10:12:41] <opqdonut> ah union-find is the famous one with the inverse ackermann
[10:13:19] <c_wraith> union-find also has the nice property that it is well-suited for a simple algorithm to teach, so it's easy to justify.
[10:13:31] <c_wraith> ... even if that algorithm is almost always inferior to Dijkstra's
[10:14:37] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 240 seconds)
[10:14:38] <Inst> Axman6: does it matter if you can implement such efficiently? As in, if it's logically equivalent to an efficient implementation, doesn't the FP version resolve to a useful stepping stone to understanding of the impure version?
[10:14:39] <opqdonut> I remember an advanced data structures course that used about half of its run to do the amortized analysis of fibonacci heaps
[10:14:39] <int-e> https://www.ecommons.cornell.edu/handle/1813/10810 (okay, it's just a technical report, so not peer reviewed)
[10:15:17] <int-e> Mostly this explains Tarjan's title, "On the efficiency of a good but not linear set union algorithm"
[10:15:27] <monochrom> But yeah here is how badly "algorithm" is undefined. We don't even agree on a definition of sameness of two algorithms.
[10:16:24] <Axman6> Inst: the run time of an algorithm is usually considered a fundamental property of it, and often making a pure implemntation will add a log n factor to the runtime, unless you can use true mutation
[10:17:33] <opqdonut> arguably if the algorithm uses mutation and you make a pure implementation it's not the same algorithm
[10:17:36] <Inst> and i assume the log n isn't predictable in such a way that it can simply be removed trivially from its impure cousin?
[10:17:56] <Inst> erm, from the pure cousin to represent its impure cousin?
[10:18:07] *** Joins: fef (~thedawn@user/thedawn)
[10:18:14] <opqdonut> many famous algorithms rely inherently on mutation, e.g. quicksort
[10:18:36] <opqdonut> some famous algorithms are effectively functional already, e.g. mergesort, or many binary tree algorithms
[10:19:05] <Inst> i'm just curious, i know people who have been "filtered by trees"
[10:19:39] <Inst> is working with data structures intrinsically easier, i.e, is being based in FP and translating from an FP idiom to one with mutation practical?
[10:21:11] <c_wraith> I don't think that question is answerable
[10:21:41] <monochrom> I don't think the question has meaning.
[10:21:58] <Inst> not even wrong :)
[10:22:01] <monochrom> I don't think most of the recent questions have meaning.
[10:22:02] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[10:22:10] <Inst> *my recent questions
[10:22:17] <int-e> translating from an FP idiom to one with mutation is practical, ghc does it all the time
[10:22:55] <Inst> i'm curious in pedagogy, i guess, when admitted i don't understand the subject myself
[10:23:04] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Remote host closed the connection)
[10:23:26] <Inst> the idea is more around that of teaching FP first, then moving onto imperative as a way to compensate for FP's limitations
[10:25:28] <random-jellyfish> are there computer architectures better suited for Haskell than von Neumann architectures?
[10:25:54] <random-jellyfish> I know I could probably look this up and get 1000 results, but I like quick answers from experts :)
[10:26:06] <c_wraith> hard to say.
[10:26:15] <c_wraith> The reduceron existed.
[10:26:16] *** Joins: polyphem (~rod@2a02:810d:840:8754:2c8b:1f9:dc9a:b89b)
[10:27:18] <monochrom> https://mail.haskell.org/pipermail/haskell-cafe/2007-May/025503.html >:)
[10:29:07] <random-jellyfish> I see recuceron is open source and can be installed on FPGAs, nice
[10:30:16] <int-e> the pressure for dedicated hardware kind of evaporated when CPUs began executing dozens of instructions per memory access
[10:30:53] <Inst> int-e: still sort of curious, why aren't there FP coprocessors?
[10:31:12] <Hash> What would it do differently?
[10:31:38] *** Joins: deadmarshal (~deadmarsh@95.38.114.1)
[10:31:45] <int-e> And how would it be more efficient in computations that are largely memory bound?
[10:31:48] <c_wraith> in a practical sense - because it's a *lot* of work to run faster than code compiled via G-Machine on commodity hardware
[10:32:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[10:33:29] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Remote host closed the connection)
[10:33:44] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[10:34:27] <int-e> Also... there's a strong tendency to write performance critical code in a different language that utilizes standard CPUs better (by reducing random memory accesses and giving more control over cache locality)
[10:35:27] <int-e> And that's the fight you'd have to win: FP code on your specialized hardware vs. tuned other-language code on standard CPUs, or GPUs where applicable (or more specialized number crunchers like Google's TPUs)
[10:36:09] <Inst> int-e: i guess i'm more talking business, suppose an FP optimized architecture that's built into a card, as opposed to being a CPU, exists, with the aim of speeding up FP computing
[10:36:28] <Inst> would that see a market? Since, FP community is often fanatical, might see uptake simply because it's there, and hopefully affordable
[10:37:26] <c_wraith> I can't imagine the research budget it would take to make it comparable to current hardware
[10:38:20] <random-jellyfish> lisp machines had the same fate
[10:38:29] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:39:30] *** Joins: ElderEphemera (~ElderEphe@d192-24-122-179.try.wideopenwest.com)
[10:39:40] *** Quits: ElderEphemera (~ElderEphe@d192-24-122-179.try.wideopenwest.com) (Client Quit)
[10:39:42] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[10:41:28] <int-e> Even https://en.wikipedia.org/wiki/Jazelle seems to have died quietly... and that targeted a mainstream virtual machine.
[10:42:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:42:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:42:44] *** Joins: wroathe (~wroathe@user/wroathe)
[10:43:37] *** Quits: vglfr (~vglfr@88.155.15.250) (Ping timeout: 250 seconds)
[10:43:51] <random-jellyfish> if hardware design and verification were cheaper there would be a plethora of architectures running on FPGAs, only the protocols they'd use to talk to each other would be standardized
[10:45:06] *** Joins: MQ17J (~MQ17J@d192-24-122-179.try.wideopenwest.com)
[10:47:31] <c_wraith> instead we have Apple adding instructions to their M1 chip specifically to accelerate javascript on their hardware
[10:47:33] *** Quits: rusrushal13 (~rusrushal@2401:4900:447e:b662:c06d:f354:ecf:b32e) (Ping timeout: 256 seconds)
[10:47:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:49:00] <int-e> (Which may be a more fruitful avenue... think of individual instructions that CPUs could reasonably implement and that would make FP programs run faster. Maybe something that inspects pointer tags early and uses them for branch prediction, who knows.)
[10:49:49] <random-jellyfish> I wonder if the advent of https://en.wikipedia.org/wiki/High-level_synthesis will eventually make hardware and software design indistinguishable
[10:49:59] <int-e> Javascript is a juicier target for this if you're building a mobile device. Sadly.
[10:50:06] *** Joins: vglfr (~vglfr@46.96.133.112)
[10:52:18] *** Quits: vglfr (~vglfr@46.96.133.112) (Read error: Connection reset by peer)
[10:53:00] *** Joins: vglfr (~vglfr@46.96.133.112)
[10:53:39] *** Quits: asivitz (uid178348@id-178348.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[10:55:01] *** Quits: vglfr (~vglfr@46.96.133.112) (Read error: Connection reset by peer)
[10:55:38] *** Joins: vglfr (~vglfr@46.96.133.112)
[10:56:55] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:57:25] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:57:44] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[10:59:40] <Maxdamantus> FPGAs are always going to be suboptimal.
[11:00:20] *** Joins: xkuru (~xkuru@user/xkuru)
[11:00:28] *** Quits: MQ17J (~MQ17J@d192-24-122-179.try.wideopenwest.com) (Quit: Client closed)
[11:00:33] <Maxdamantus> If you find patterns that work well on FPGAs, they should probably just be incorporated into more general processors.
[11:01:23] <Maxdamantus> (ones that are produced at 4 nm resolution or whatever it is)
[11:01:33] *** Joins: zeenk (~zeenk@2a02:2f04:a208:c500:649e:b5e2:d15c:7960)
[11:01:37] *** Joins: akegalj (~akegalj@141-136-245-236.dsl.iskon.hr)
[11:02:15] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[11:02:40] <davean> uh huh
[11:02:43] <davean> Sure
[11:03:38] <Maxdamantus> 10 nm*
[11:05:14] <davean> Its not about the nm, what you said doesn't even make conceptual sense vs. traditional processors. 
[11:05:33] <davean> and the processors that it does make sense for, you'd probably not think of as a processor, and basicly are FPGAs done differently
[11:05:58] <random-jellyfish> 5G base stations are using FPGAs a lot, easier for maintenance
[11:06:17] <random-jellyfish> no need to replace boards, just reconfigure them
[11:06:24] <davean> Also can do things that you just can't do on anything like a CPU
[11:06:42] <davean> FPGAs are wide, inherently.
[11:07:01] <davean> They move data differently than CPUs
[11:07:28] <davean> They litterly do a different job
[11:07:33] *** Quits: vglfr (~vglfr@46.96.133.112) (Read error: Connection reset by peer)
[11:07:55] <Maxdamantus> They do the same job as an ASIC, just one that's reprogrammable.
[11:08:09] <Maxdamantus> The ASIC solution is going to be better at doing that particular job.
[11:08:10] <davean> And an ASIC is nothing like a CPU
[11:08:31] *** Joins: vglfr (~vglfr@46.96.133.112)
[11:08:33] <Maxdamantus> Well, a CPU can be thought of as being made of lots of ASICs.
[11:08:38] <davean> This is just dumb, I'm out
[11:08:56] <int-e> so many type mismatches
[11:09:10] <random-jellyfish> lol
[11:10:01] <random-jellyfish> data Hardware a = Asic a | Fpga a
[11:10:22] <davean> I mean FPGAs are an ASIC
[11:11:31] *** Joins: vpan (~0@212.117.1.172)
[11:11:54] <Maxdamantus> If I wanted to create my own car company. I would probably build the cars out of wood.
[11:11:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:12:16] <Maxdamantus> If I wanted to create my own 5G base station manufacturing company. I would probably build the base stations out of FPGAs.
[11:12:55] <monochrom> Ugh why is everyone dreaming.
[11:13:07] <monochrom> pipe dreaming, to be specific.
[11:13:07] <Maxdamantus> If Apple wanted to make 5G base stations, they would use ASICs because they would probably be targetting a sufficiently high number of units.
[11:13:09] <davean> monochrom: I don't know, the troll is not the worst?
[11:13:35] *** Joins: lionhairdino (~jacoo@121.131.39.82)
[11:13:49] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[11:14:08] <random-jellyfish> apologies
[11:14:14] <int-e> the "FP" in "FPGA" is a feature
[11:14:32] <polyphem> is google down ?
[11:14:39] <monochrom> "I'm thinking how to teach computer science"  "I'm going to start a car company that makes 5G base stations" ...
[11:15:14] <random-jellyfish> human brains return so much better search results than google
[11:15:17] <int-e> building radio towers by stacking FPGAs <-- or at least that's how I visualized it
[11:15:20] <random-jellyfish> apologies again
[11:15:31] <monochrom> Correction: "I'm thinking how to teach computer science. I haven't learned computer science."
[11:15:44] <davean> monochrom: I don't know, we've had worse trolls
[11:16:25] <random-jellyfish> I worked at Ericsson a few years ago, their base stations included FPGAs, they weren't made entirely of FPGAs
[11:16:26] <int-e> well, the best trolls are at least somewhat knowledgable
[11:17:43] <random-jellyfish> FPGAs are good accelerating certain algorithms for which there no hw acceleration available yet
[11:17:50] <random-jellyfish> are good for*
[11:18:49] <monochrom> Google is not down.
[11:18:50] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (Ping timeout: 268 seconds)
[11:19:24] <polyphem> monochrom:now it works ....
[11:19:54] <davean> random-jellyfish: They're good for implimenting wide programs without a lot of conditionals
[11:20:06] <davean> random-jellyfish: like if you want a next-frame ethernet server
[11:21:29] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:24:28] <random-jellyfish> was google down for real?
[11:26:12] <polyphem> google didnt work here whereas duckduckgo did 
[11:26:26] <polyphem> maybe some routing stuff , dunno
[11:27:00] <Maxdamantus> random-jellyfish: exactly. That's why it's suboptimal.
[11:27:09] <Maxdamantus> random-jellyfish: once there's hw acceleration, you don't need the FPGA.
[11:27:21] <davean> Maxdamantus: All 11ms of that time!
[11:27:52] *** kmein_ is now known as kmein
[11:29:27] <random-jellyfish> sometimes it's better to have the hw accelleration now than later
[11:29:47] <random-jellyfish> and hw bug fixes in asics are impossible
[11:30:42] <polyphem> didnt amd wanted to include fpgas in their processors ?
[11:30:54] <polyphem> for codecs 
[11:31:06] <random-jellyfish> some macbook pros already have ice40 fpgas on them
[11:31:25] <davean> yes, everyone does becasue its the smart move
[11:32:10] <Maxdamantus> polyphem: dunno, but that sounds like a suboptimal solution. If someone's CPU doesn't support a particular codec, they should probably have just got the video in a codec that is supported.
[11:32:38] <Maxdamantus> Brand new codecs aren't going to be *that* much better than ones that are supported in the current generation of CPUs.
[11:32:53] <polyphem> Maxdamantus: i think its meant for encoding,rather decoding
[11:32:57] <random-jellyfish> os developers will soon be writing drivers in Verilog or Clash lol
[11:32:59] <Maxdamantus> It will probably only help if you're using a 10-year old CPU.
[11:33:13] *** Parts: zyklotom1 (~ethan@r4-128-61-88-167.res.gatech.edu) (WeeChat 2.7.1)
[11:33:16] *** Quits: prasad (~user@c-73-170-49-136.hsd1.ca.comcast.net) (Remote host closed the connection)
[11:34:57] <Maxdamantus> polyphem: I think the same principle should apply.
[11:35:49] <Maxdamantus> polyphem: an FPGA implementation of HEVC or H.264 or whatever is unlikely to be more efficient than one hardcoded at 10 nm.
[11:35:52] *** Quits: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 250 seconds)
[11:36:01] <Hecate> #StabilityWin mtl 2.3 will not break compat by removing some re-exports
[11:36:31] <Hecate> (that was either this or provide some tooling to allow the migration to occur in large codebases smoothly)
[11:36:32] <Maxdamantus> Maybe if you're developing a new codec, but for that you should probably just be using a discrete FPGA for prototyping.
[11:36:44] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:4096:379:219d:4d69)
[11:37:55] *** Joins: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[11:38:19] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[11:38:20] <int-e> Maxdamantus: Do you know what the term "trade-off" means?
[11:39:04] <Maxdamantus> int-e: yes. It's when you build cars out of wood because you don't have the ability to make them out of metal.
[11:39:18] <Maxdamantus> int-e: or when you build 5G base stations out of FPGAs.
[11:40:12] <Maxdamantus> 5G is a fairly new technology, so I can understand why they might still be using FPGAs there.
[11:41:59] <int-e> You will always have some FPGAs in there because they offer you programmable, wide, real time data processing, allowing you to add features in the field that would otherwise require you to replace several thousands worth of hardware.
[11:42:32] *** Joins: froduck (~froduck@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[11:43:18] <froduck> hey, i have a pretty decent representation of pointers
[11:43:25] *** Quits: akegalj (~akegalj@141-136-245-236.dsl.iskon.hr) (Ping timeout: 250 seconds)
[11:44:44] <[exa]> better than "integer byte addresses" ?
[11:44:57] <froduck> type Edit a x = (Read a x,Write a x), data Pointer where Pointer a s x :: (Read a x,Edit s x) => x -> Pointer a s x
[11:45:04] <froduck> [exa] yes
[11:46:30] <Maxdamantus> int-e: right, with a trade-off of efficiency (need more hardware to achieve the same throughput, using more energy, costing more money due to specialisation)
[11:47:00] <Maxdamantus> int-e: if your use case is really special then maybe an FPGA is the only practical option.
[11:47:39] <Maxdamantus> int-e: just like how making a wooden go-kart might be the only way I can make my own car.
[11:48:24] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[11:48:30] <[exa]> froduck: how does that work? (looks like no pointer arithmetic there right?)
[11:48:34] <froduck> class Read a x where get :: x -> a, class Write s x where set :: s -> x -> x, edit :: Edit a x => (a -> a) -> x -> x;edit f x = let a = get x in set (f a) x
[11:48:44] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[11:48:55] <[exa]> in particular, isn't that State ?
[11:48:55] <froduck> [exa] set changes the pointer
[11:48:56] *** systemfault is now known as Elsa
[11:49:19] *** Elsa is now known as systemfault
[11:49:26] <froduck> [exa] its something that has a state (editable thing) s, and can be read to get an `a'
[11:49:34] <froduck> so a state with a reader
[11:49:39] *** Quits: andreabedini (~andreabed@8s8kj6nj5000h5zkmpxr.ip6.superloop.com) (Quit: WeeChat 3.3)
[11:49:50] <froduck> it acts as an abstracted (wrapped) pair that way
[11:49:59] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[11:50:05] <[exa]> :t (get, put, modify)
[11:50:06] <lambdabot> (MonadState s1 m1, MonadState s2 m2, MonadState s3 m3) => (m1 s1, s2 -> m2 (), (s3 -> s3) -> m3 ())
[11:50:20] *** Quits: dextaa__ (~dextaa@217.61.225.120) (Quit: leaving)
[11:50:34] <froduck> (wrapped in the sense that the abstracted wrapper, because it can also be a state, can extend over the pair, so its more like specifying a sectioning of the data "it at least has these two values, one you can read, the other you can edit)
[11:51:24] <froduck> [exa] i dont see how get isnt taking an argument there
[11:51:34] <froduck> it cant specify then the target of the class
[11:51:37] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:51:44] *** Joins: Major_Biscuit (~MajorBisc@c-001-005-022.client.tudelft.eduvpn.nl)
[11:51:55] <froduck> you cant "get something from x" in specifying the "pointer x"
[11:52:19] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[11:52:20] <froduck> i think given the classes i wrote it works ok
[11:52:25] <[exa]> what's the semantics of `a` there?
[11:52:43] <froduck> a is the thing being pointed to
[11:52:53] <froduck> s is the "wider environment"
[11:53:12] <froduck> modification of which "repositions" the pointer, so the `a' returned by get can change
[11:53:12] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[11:53:17] <[exa]> and `x` ?
[11:53:36] <dminuoso> Gah, I'm in an incredibly tough spot. I have this large product type, and I want case-insensitivity on one particular field for Eq and Ord.
[11:53:36] *** Joins: flipchan (~filip@188-169-255-31.dsl.utg.ge)
[11:53:47] <dminuoso> And ideally I want this without using a newtype wrapper for that field
[11:53:50] <froduck> the thing that can be read to return the thing being pointed to `a' and edited by a function over s
[11:54:25] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[11:54:29] <[exa]> dminuoso: is that still a proper Eq ?
[11:54:31] <dminuoso> So Im left with a) either biting the bullet and forcing the inconvenience of a newtype wrapper for this field for users, b) using TH/Generics to implement the custom Eq/Ord instance, or c) handrolling it - which is particularly nasty for Ord.
[11:54:35] <dminuoso> [exa]: Sure, why not?
[11:54:43] <froduck> [exa] x is the pointer.
[11:55:14] <froduck> its a repositionable lens over a, by its modifiability as being editable as a state s
[11:55:47] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[11:55:52] <dminuoso> [exa]: An equivalence relation must merely be reflexive, symmetric and transitive - all of which are preserved in a case-insensitive scenario
[11:55:55] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Remote host closed the connection)
[11:55:58] <dminuoso> And the order would still be a total order
[11:56:03] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[11:56:06] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Remote host closed the connection)
[11:56:15] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[11:56:16] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Remote host closed the connection)
[11:56:18] <[exa]> ah okay, I'm more harsh to my Eqs obviously :D
[11:56:22] <froduck> i have a good example too, where you just use the pair of (a,s) which obviously can have `a' read from it and can have the `s' edited
[11:56:24] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[11:56:26] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Remote host closed the connection)
[11:56:31] <dminuoso> [exa]: Plus, if I imbue this notion - you cant tell the difference anyway!
[11:56:38] <[exa]> some kind of `compareOn` with a bit of lensing wouldn't help?
[11:56:42] <dminuoso> (Think about Leibnizian equality)
[11:56:42] <monochrom> dminuoso: I think monoidness of Ordering helps with Ord for tuples. Here: ...
[11:56:43] <polyphem> dminuoso: add a virtual field with lenses and do caseconvertion
[11:57:03] <froduck> basically, to see that as a pointer, its a kind of graph with a monadic tail that pairs the state, with a wrapped ()
[11:57:27] <monochrom> cmpTuple (x,y) (a,b) = compare x a <> compare y b
[11:57:39] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[11:57:40] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[11:57:49] <monochrom> Let me try demoing with yahb.
[11:57:50] <dminuoso> monochrom: Oh mmm, that's an interesting idea.
[11:57:57] <dminuoso> Yeah I think I get the idea.
[11:58:06] <monochrom> OK :)
[11:58:13] *** Cheery_ is now known as Cheery
[11:58:44] <froduck> eg. you could specify that the modifiable state was actually a list zipper, then you could use it as a pointer over lists, or similarly for trees or graphs
[11:58:45] <[exa]> froduck: the purity on that one seems scary. I'd probably need to see an example of real use (like, use it to make some pointerish data structure or so)
[11:58:55] *** Joins: prasad (~user@c-73-170-49-136.hsd1.ca.comcast.net)
[11:59:25] <froduck> the idea is to abstract over that, to state, to also capture the ability to just unfold the tail
[11:59:46] <froduck> then state s is the state used in unfolding, its clear how when that is a zipper, or another pointer like thing... etc
[12:00:17] <dminuoso> monochrom: So broadly I could have `instance Ord MyType where compare (Foo a1 b1 c1) (Foo a2 b2 c3) = compare (W a1) (W a2) <> compare b1 b2 <> compare c1 c2`
[12:00:19] <dminuoso> Right?
[12:00:28] <monochrom> Yeah
[12:00:37] <dminuoso> Brilliant, this will work nicely. :)
[12:00:41] <ski> @type comparing fst <> comparing snd
[12:00:42] <lambdabot> (Ord a, Ord b) => (a, b) -> (a, b) -> Ordering
[12:00:42] <froduck> basically its taking the arguments to unfold, and putting them into a sectionaing via class constraints to restrict the writability of a
[12:01:37] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Ping timeout: 240 seconds)
[12:01:38] <monochrom> > [ c1 <> c2 | c1 <- [LT, EQ, GT], c2 <- [LT, EQ, GT] ]
[12:01:39] <lambdabot>  [LT,LT,LT,LT,EQ,GT,GT,GT,GT]
[12:02:07] *** Joins: Guest2 (~Guest2@c-73-170-49-136.hsd1.ca.comcast.net)
[12:02:19] <ski>   instance Ord MyType where compare = comparing (W . getA) <> comparing getB <> comparing getC  -- dminuoso ?
[12:02:21] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[12:02:35] *** Guest2 is now known as presci
[12:02:43] <dminuoso> ski: Mmm, that's a neat little improvement as well. :)
[12:02:56] <dminuoso> Guess that would make it easier to avoid "mixing up fields"
[12:02:58] <monochrom> I hate getters, so I say it's not as good. :)
[12:03:03] <presci> Hi I have a question about parseDigits:: R.ReadP String
[12:03:03] <presci> parseDigits = R.many1 (R.satisfy C.isDigit)
[12:03:08] <dminuoso> monochrom: I have them either way.
[12:03:22] <froduck> the pointer basically serves as a trivial unfold, as it can be updated using id to give an unfolding stream of the same `a', according to no pointer navigation. but when you scan over it, this can redirect the navigation, and the `a' recieved should change
[12:03:45] <monochrom> But yeah the main point is if you know what <> does to Ordering you're saved. :)
[12:04:07] <dminuoso> Indeed. :)
[12:04:22] <froduck> you want to seperate this id :: x -> x style unfold, to give seperate roles to the internals of x, as the "thing being pointed to `a'", and the "thing you can change to change where its pointing to `s'"
[12:04:55] <ski> @where monoids
[12:04:55] <lambdabot> comment on "Monoids? In my programming language?" by Cale in 2008 (or 2009 ?) at <http://www.reddit.com/r/programming/comments/7cf4r/monoids_in_my_programming_language/c06adnx> about a use of `
[12:04:55] <lambdabot> instance Monoid a => Monoid (rho -> a)'
[12:05:08] <froduck> i guess you need to restrict the writability of `a' to ensure its changing nature results from the editability of `s' forcing it to capture the notion of position
[12:05:29] <presci> Hi I have a question    parseDigits:: R.ReadP String
[12:05:30] <presci> parseDigits = R.many1 (R.satisfy C.isDigit)
[12:05:30] <presci> >>R.readP_to_S parseDigits "123"
[12:05:31] <presci> >> gives me [("1","23"),("12","3"),("123","")]
[12:05:31] <presci> >> should I use filter to get the last one or is there a better way to do it
[12:05:57] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[12:06:03] *** Joins: jespada (~jespada@87.74.36.188)
[12:06:08] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[12:06:24] <[exa]> presci: please use pastebin for multiline stuff. other than that you might need to tell it that the string terminates by parsing out `eof`
[12:06:37] *** Joins: coot (~coot@213.134.190.95)
[12:06:49] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:06:54] *** Joins: raym (~raym@user/raym)
[12:06:55] <[exa]> presci: this one https://hackage.haskell.org/package/base-4.16.0.0/docs/Text-ParserCombinators-ReadP.html#v:eof
[12:07:06] *** Quits: coot (~coot@213.134.190.95) (Remote host closed the connection)
[12:07:15] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[12:07:34] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[12:08:29] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:09:24] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 268 seconds)
[12:10:00] <froduck> i think really you want the pointer to be editable in `a'. but i think this has to happen as a class hierarchy extension, adding in the writability of `a' after having the pointer being with `a' being write restricted to notionally place the editability of the structure into the `s' field
[12:10:06] *** Quits: flipchan (~filip@188-169-255-31.dsl.utg.ge) (Ping timeout: 250 seconds)
[12:10:31] *** Quits: presci (~Guest2@c-73-170-49-136.hsd1.ca.comcast.net) (Quit: Client closed)
[12:10:34] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[12:11:35] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Ping timeout: 250 seconds)
[12:11:50] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Remote host closed the connection)
[12:12:25] *** Joins: fendor (~fendor@77.119.199.145.wireless.dyn.drei.com)
[12:13:13] <xerox> presci: munch isDigit
[12:13:19] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[12:13:29] <xerox> munch1 I guess
[12:17:18] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:18:42] *** Quits: froduck (~froduck@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Connection closed)
[12:19:51] *** Joins: chele (~chele@user/chele)
[12:21:08] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:22:13] *** Joins: CHUD (~CHUD@edu7979.kent.ac.uk)
[12:22:15] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[12:22:31] <dminuoso> ski, monochrom: Thanks a bunch, this looks very acceptable to me :) https://gist.github.com/dminuoso/af46f4b5cea5c2b132cda1bcc0b82723
[12:23:20] <dminuoso> I'm quite happy that I could apply the same trick to Eq as well
[12:23:29] <monochrom> That is epic.
[12:24:05] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[12:24:30] <[exa]> wow cool
[12:24:37] *** gentauro_ is now known as gentauro
[12:24:52] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:25:41] *** Quits: gentauro (~gentauro@185.107.12.141) (Changing host)
[12:25:41] *** Joins: gentauro (~gentauro@user/gentauro)
[12:26:51] *** Joins: michalz (~michalz@185.246.204.57)
[12:29:12] <dminuoso> And to finish the golf course, I can make a slight improvement with `gettingAll :: (a -> b -> All) -> a -> b -> Bool; gettingAll = coerce`
[12:29:36] <dminuoso> Which is a bit handy since there's actually a second product type where I need to do the same
[12:29:45] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[12:30:09] *** Quits: IgnatInsarov[m] (~kindaroma@2001:470:69fc:105::f5d9) (Quit: You have been kicked for being idle)
[12:34:02] *** Joins: winterhound (~dust@2409:4071:4d8b:f7bb:2ea3:17f:ed3b:b921)
[12:34:30] <winterhound> Hello
[12:34:37] *** Joins: d0ku (~d0ku@178.43.19.180.ipv4.supernova.orange.pl)
[12:35:30] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[12:36:17] <winterhound> I'm trying to compile gi-cairo. I get get this error 'Did not find a GI repository'. Any suggestion would be very helpful.
[12:37:58] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[12:38:33] <[exa]> winterhound: what system is that? (btw could you pastebin a bit larger context of the error message?)
[12:38:46] *** Joins: ubert1 (~Thunderbi@p200300ecdf099479a7980b6460b31c47.dip0.t-ipconnect.de)
[12:40:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:41:06] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[12:41:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:aa5f:93ea:3b88:5ff5) (Ping timeout: 240 seconds)
[12:41:45] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[12:43:50] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e75a:d7d8:5f2b:42f0)
[12:44:57] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 250 seconds)
[12:45:43] <winterhound> exa : http://ix.io/3NKK , Trying to add package to Guix. 
[12:46:58] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[12:47:01] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[12:47:09] *** Joins: alp (~alp@user/alp)
[12:47:31] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:47:55] *** Joins: cfricke (~cfricke@user/cfricke)
[12:48:10] * ski usually calls it `equating'
[12:49:16] *** Joins: max22- (~maxime@2a01cb0883359800be8bbc3fb1201a3c.ipv6.abo.wanadoo.fr)
[12:49:43] *** Quits: on^ (~on@50.231.5.242) (Ping timeout: 250 seconds)
[12:50:29] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[12:52:54] <[exa]> winterhound: looks like the internal ./configure fails; you can try reproducing it manually in commandline with the arguments as passed there and see
[12:53:26] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 250 seconds)
[12:53:42] <[exa]> interesting that it's searching for cairo when actually building cairo (/me not a GI expert tho)
[12:59:59] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[13:01:08] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[13:06:07] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[13:07:57] *** Parts: winterhound (~dust@2409:4071:4d8b:f7bb:2ea3:17f:ed3b:b921) (Konversation terminated!)
[13:08:10] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e75a:d7d8:5f2b:42f0) (Ping timeout: 250 seconds)
[13:08:37] *** Joins: dust_ (~dust@2409:4071:4d8b:f7bb:2ea3:17f:ed3b:b921)
[13:08:42] *** Joins: MoC (~moc@user/moc)
[13:08:53] *** Joins: flipchan (~filip@188-169-255-31.dsl.utg.ge)
[13:09:10] *** Joins: akegalj (~akegalj@141-136-245-236.dsl.iskon.hr)
[13:10:08] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:8e08:7908:8918:48c0)
[13:12:20] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:14:36] *** Quits: dust_ (~dust@2409:4071:4d8b:f7bb:2ea3:17f:ed3b:b921) (Quit: Konversation terminated!)
[13:16:18] *** Quits: CHUD (~CHUD@edu7979.kent.ac.uk) (Remote host closed the connection)
[13:16:35] *** Joins: CHUD (~CHUD@edu7979.kent.ac.uk)
[13:16:48] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[13:16:54] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:9102:5c27:2e48:97c2)
[13:19:57] *** Joins: rusrushal13 (~rusrushal@2401:4900:5d14:182c:14c5:2762:c20c:8596)
[13:21:07] *** Quits: CHUD (~CHUD@edu7979.kent.ac.uk) (Ping timeout: 256 seconds)
[13:22:00] *** Joins: CHUD (~CHUD@edu7979.kent.ac.uk)
[13:24:32] *** Quits: rusrushal13 (~rusrushal@2401:4900:5d14:182c:14c5:2762:c20c:8596) (Client Quit)
[13:27:29] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:2d90:ff3:b02f:c2ef) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:28:36] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:30:28] *** Quits: zeenk (~zeenk@2a02:2f04:a208:c500:649e:b5e2:d15c:7960) (Quit: Konversation terminated!)
[13:32:03] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:f9c4:ec41:3bfb:d5c6)
[13:32:26] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 252 seconds)
[13:32:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:33:01] *** Quits: CHUD (~CHUD@edu7979.kent.ac.uk) (Ping timeout: 256 seconds)
[13:33:52] *** Joins: rusrushal13 (~rusrushal@2401:4900:5d14:182c:14c5:2762:c20c:8596)
[13:39:54] *** Joins: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl)
[13:44:40] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Quit: CiaoSen)
[13:50:18] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:56:41] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[13:58:57] *** Quits: akegalj (~akegalj@141-136-245-236.dsl.iskon.hr) (Ping timeout: 240 seconds)
[13:59:34] <tomsmeding> looks like it's looking for a cairo-1.0.gir file; my system (arch, completely different distro) has lots of .gir files in /usr/share/gir-1.0, but all start with a capital letter
[14:07:06] <[exa]> the problem likely stems from the system of how guix organizes these
[14:07:33] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[14:07:48] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[14:07:56] <[exa]> I guess there should be extra path entry into the build directory or something
[14:08:10] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[14:08:15] *** Joins: bendo (~bendo@ip5f5bebbb.dynamic.kabel-deutschland.de)
[14:11:17] *** Quits: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:17:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:17:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:17:26] *** Joins: wroathe (~wroathe@user/wroathe)
[14:19:40] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:19:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[14:20:57] *** Lord_of_Life_ is now known as Lord_of_Life
[14:21:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:23:02] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 252 seconds)
[14:30:49] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[14:31:28] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:35:21] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[14:35:37] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[14:35:55] *** Quits: rusrushal13 (~rusrushal@2401:4900:5d14:182c:14c5:2762:c20c:8596) (Ping timeout: 256 seconds)
[14:36:14] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[14:36:42] *** Quits: vglfr (~vglfr@46.96.133.112) (Ping timeout: 256 seconds)
[14:36:55] *** Joins: froduck (~froduck@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[14:37:20] <froduck> hi, i have a question about monadic state
[14:37:47] <froduck> based on a suggestion earlier about a representation of a pointer i suggested
[14:38:11] <froduck> basically, by imbedding the value in the monad, so that it doesnt need to be provided as an argument
[14:38:47] <froduck> giving a class over the monad of kind *->* instead of the object of kind * that can be retrived from and updated
[14:39:22] <froduck> then within the monad you use like, get :: m a as in x <- get
[14:39:27] <froduck> so you work "within the monad"
[14:39:45] <froduck> but then i get confused because it was supposed to be a pointer, and now we are "working within it"
[14:39:51] <froduck> so examine the monad laws
[14:39:57] <froduck> what are they for a pointer?
[14:40:20] <froduck> so if you have 2 nested monads with the get/edit stored value, then you basically just have 2 pointers
[14:40:52] <froduck> they should compose together like values in a tuple, except with some comutation consideration
[14:41:40] <froduck> basically wondering about a definition for pointer in terms of monadic state as given earlier by [exa]
[14:43:01] *** Quits: dut (~dut@user/dut) (Quit: Leaving)
[14:44:45] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[14:45:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:45:45] <froduck> :t (get, put, modify)
[14:45:46] <lambdabot> (MonadState s1 m1, MonadState s2 m2, MonadState s3 m3) => (m1 s1, s2 -> m2 (), (s3 -> s3) -> m3 ())
[14:46:52] <froduck> giving; type Pointer a p m = (MonadState a m,MonadState p m)
[14:47:01] <froduck> er, p m a
[14:47:29] <froduck> to have Pointer p m :: * -> *
[14:47:55] <froduck> actually that seems eronious, since p isnt `p a' here, but i suppose it could/should be (?)
[14:49:00] <froduck> i would argue that it shouldnt be, because the state in an unfold is not a container of a certainly
[14:49:17] <froduck> maybe if you had pointer as;
[14:49:18] <froduck> type Pointer (p :: * -> *) (m :: * -> *) = (MonadState a m,MonadState (p a) m)
[14:49:51] <froduck> then the version with p a ~ q which then captures the unfold case could be given a different name
[14:50:13] <froduck> i think basically thats a good idea because a "pointer" should be like a zipper and be shape preserving and navigable
[14:50:26] <froduck> ie you stream values as you navigate around the thing, which does not change the thing
[14:50:46] <froduck> and the version thats just an unfolding of values is something different
[14:52:00] <froduck> (the point is both fit into the monadic tail idea from before, which seems like it captures both graphs, including streams and lists, and dag's/trees, aswell as unfolds which do not have the traversable laws of shape preservation and equality under identity traversal)
[14:53:16] <froduck> (something strange happens when you say you dont actually need the tail but just the ability to generate it from an unfold)
[14:54:00] <froduck> unfolds are different from pointers i guess, because of the traverse laws, and so a pointer is a specialisation over a *something*
[14:54:32] <froduck> what do you call the thing that can produce value streams based on and updated carried state?
[14:54:44] <froduck> since this abstraction captures pointers
[14:55:00] *** Joins: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320)
[14:55:22] <froduck> i guess you call it a state machine, right?
[14:55:33] <froduck> so im suggesting "pointers as a form of state machine", i think
[15:00:53] *** Quits: haskl[error] (~haskl@user/haskl) (Read error: Connection reset by peer)
[15:02:13] *** Quits: ubert1 (~Thunderbi@p200300ecdf099479a7980b6460b31c47.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:03:11] *** Joins: haskl (~haskl@user/haskl)
[15:05:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:07:06] *** Joins: vglfr (~vglfr@46.96.133.112)
[15:08:05] *** Quits: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[15:08:05] *** Joins: some02 (~cat@user/sudden)
[15:08:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Read error: Connection reset by peer)
[15:08:10] *** some02 is now known as sudden
[15:09:21] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:09:38] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:12:26] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:9102:5c27:2e48:97c2) (Read error: Connection reset by peer)
[15:14:07] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[15:14:48] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[15:16:29] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[15:17:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:20:19] *** Joins: coot (~coot@213.134.190.95)
[15:22:19] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 3.3)
[15:25:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[15:25:34] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[15:26:34] *** Quits: _ht (~quassel@82-168-34-160.fixed.kpn.net) (Ping timeout: 256 seconds)
[15:27:02] *** Quits: froduck (~froduck@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Connection closed)
[15:27:03] *** Joins: _ht (~quassel@2a02:a468:b619:1:f6f7:cddd:a7b5:6247)
[15:29:37] *** Joins: __monty__ (~toonn@user/toonn)
[15:30:42] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[15:36:17] *** Quits: fendor (~fendor@77.119.199.145.wireless.dyn.drei.com) (Quit: Leaving)
[15:36:20] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[15:37:21] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[15:40:10] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[15:42:49] *** Joins: xkuru (~xkuru@user/xkuru)
[15:47:37] *** Joins: notzmv (~zmv@user/notzmv)
[15:48:44] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[15:49:49] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[15:50:03] *** Joins: x_kuru (~xkuru@user/xkuru)
[15:50:44] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:52:13] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[15:54:57] *** Quits: _ht (~quassel@2a02:a468:b619:1:f6f7:cddd:a7b5:6247) (Ping timeout: 240 seconds)
[15:58:38] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:e4b0:adf8:305f:a850)
[16:00:51] *** Joins: jumper149 (~jumper149@base.felixspringer.xyz)
[16:05:39] *** Joins: cfricke (~cfricke@user/cfricke)
[16:08:29] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:10:43] *** Quits: fryguybo1 (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (Quit: leaving)
[16:11:09] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[16:15:39] *** Joins: Topsi (~Tobias@dyndsl-095-033-019-122.ewe-ip-backbone.de)
[16:17:13] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:24:20] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:f12b:1b26:c11c:e722) (Quit: Leaving)
[16:24:37] *** Joins: ph88 (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de)
[16:24:43] *** Joins: sondr3 (~sondr3@2001:700:200:f112::2a03)
[16:24:53] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[16:27:04] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[16:29:28] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:31:15] *** Joins: zeenk (~zeenk@2a02:2f04:a208:c500:649e:b5e2:d15c:7960)
[16:32:27] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[16:35:02] *** Quits: max22- (~maxime@2a01cb0883359800be8bbc3fb1201a3c.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[16:35:32] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[16:40:47] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:41:08] <sondr3> I'm probably missing something, but how can I make my megaparsec parser skip initial whitespace/comments? It fails saying it expected one of the parsers, but I thought they would skip whitespace or comments themselves and therefore that I wouldn't have to manually skip them
[16:41:56] <sondr3> My approach now is just to do `void $ lexeme ""` so that it skips them
[16:41:56] <dminuoso> sondr3: You'd normally use M.lexeme
[16:42:20] <dminuoso> sondr3: Ah no, the idea is to wrap every lexeme you want to parse with your custom `lexeme`
[16:42:22] <dminuoso> say:
[16:42:30] <dminuoso> `myLexeme = M.lexeme someConsumer`
[16:42:50] <dminuoso> And then `foo = myLexeme (chunk "foo"); bar = myLexeme (chunk "bar")`
[16:44:32] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 240 seconds)
[16:45:12] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[16:45:37] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[16:45:41] <sondr3> dminuoso:  my `lexeme` function is a `lexeme = L.lexeme sc` where `sc` is `L.space space1 (comment) (blockCommend)`
[16:45:49] <dminuoso> Yes looks good
[16:45:53] <dminuoso> Now ensure you always use `lexeme`
[16:45:57] <romesrf> o/
[16:45:59] <dminuoso> for every actual lexeme you want to parse
[16:48:10] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[16:48:36] <sondr3> It's probably because I do `pragma <- optional . try $ parsePragma` in the parse function that it skips the whitespace since it'll fail on just whitespace :facepalm:
[16:49:40] <sondr3> Y
[16:49:58] <sondr3> whoops, yep, that was it, changing it to `pragma <- space *> ...` fixed it
[16:50:15] <sondr3> thanks for being my rubber duck dminuoso
[16:52:00] *** Joins: drewr (~drew@user/drewr)
[16:57:08] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[17:02:15] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:06:57] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 240 seconds)
[17:08:24] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:08:41] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:13:12] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[17:14:36] *** Joins: razetime (~quassel@49.207.209.26)
[17:15:19] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[17:23:47] *** Joins: rusrushal13 (~rusrushal@2401:4900:5d14:182c:14c5:2762:c20c:8596)
[17:24:09] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[17:27:11] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[17:28:14] *** Joins: max22- (~maxime@2a01cb0883359800ab210b9c3f7ba21b.ipv6.abo.wanadoo.fr)
[17:28:45] *** Quits: sondr3 (~sondr3@2001:700:200:f112::2a03) (Ping timeout: 256 seconds)
[17:35:50] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:37:54] *** Joins: califax- (~califax@user/califx)
[17:38:39] *** Quits: razetime (~quassel@49.207.209.26) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:39:18] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[17:39:18] *** califax- is now known as califax
[17:41:53] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[17:42:06] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[17:45:49] *** Quits: zeenk (~zeenk@2a02:2f04:a208:c500:649e:b5e2:d15c:7960) (Quit: Konversation terminated!)
[17:47:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[17:49:43] *** Joins: Topsi1 (~Tobias@dyndsl-095-033-019-122.ewe-ip-backbone.de)
[17:51:02] *** Quits: max22- (~maxime@2a01cb0883359800ab210b9c3f7ba21b.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[17:52:02] *** Joins: vysn (~vysn@user/vysn)
[17:53:17] *** Quits: Topsi (~Tobias@dyndsl-095-033-019-122.ewe-ip-backbone.de) (Ping timeout: 240 seconds)
[17:55:31] *** Quits: nunggu (~q@user/nunggu) (Remote host closed the connection)
[17:56:07] *** Joins: nunggu (~q@user/nunggu)
[17:57:49] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:59:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:59:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:59:56] *** Joins: wroathe (~wroathe@user/wroathe)
[18:01:32] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[18:02:07] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f444:a000:4917:bc56:f54d:812b)
[18:02:54] *** Joins: Topsi (~Tobias@dyndsl-095-033-019-122.ewe-ip-backbone.de)
[18:04:14] *** Joins: burnsidesLlama (~burnsides@dhcp168-033.wadham.ox.ac.uk)
[18:05:26] *** Quits: Topsi1 (~Tobias@dyndsl-095-033-019-122.ewe-ip-backbone.de) (Ping timeout: 250 seconds)
[18:05:52] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:e4b0:adf8:305f:a850) (Ping timeout: 250 seconds)
[18:08:28] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[18:13:50] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[18:16:41] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[18:19:05] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[18:19:15] *** Quits: xsperry (~xs@user/xsperry) ()
[18:21:02] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Ping timeout: 250 seconds)
[18:26:03] *** Joins: kevorna (~kevorna@81-228-153-98-no289.tbcn.telia.com)
[18:26:13] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[18:28:16] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:30:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[18:32:55] <kevorna> I want to get into Haskell and would love to use GHC 9.2.1 (latest version, newest features, and “significantly faster” Apple M1 compilation speeds). I learned that I need a “package set” but couldn’t find 9.2.1 on https://www.stackage.org/. Should I give up on using 9.2.1? 9.0.2 has a nightly stockage package set, is that a good bet? Or
[18:32:56] <kevorna> should I go all the way back to 8.10.7 to be on stackage LTS? Or skip stack completely and use 9.2.1 with something else (ghcup and hackage? idk)
[18:33:26] *** Clint_ is now known as Clint
[18:34:09] <Clint> kevorna: probably depends on the libraries you want to use
[18:36:03] <kevorna> I'd want to use yesod to get into web development, and that seems to bring a lot of libs
[18:37:47] <geekosaur> I should point out that while 9.2.1 has native M1 support, after release it was found to generate bad code and you should wait for 9.2.2
[18:38:11] <geekosaur> so for now you probably want 9.0.2 or 8.10.7
[18:38:22] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:4096:379:219d:4d69) (Quit: WeeChat 2.8)
[18:39:33] <geekosaur> and if you want to use yesod, stack is probably what you should use since they're kinda designed to go together
[18:40:03] <kevorna> OK, thank you!
[18:40:24] <kevorna> Do you think 9.0.2 is reasonable to use even though it's not LTS on stackage?
[18:40:50] <geekosaur> at this point most libraries have 9.x support so using a nightly should be reasonable, yes
[18:42:18] <lionhairdino> I hope hi profiling, but it is supported by only 9.2.. is right?
[18:42:23] <kevorna> Great, that's enough to get me going. Thank you! I've found it quite difficult to get into Haskell compared to other languages, so I greatly appreciate the help!
[18:42:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:42:53] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[18:43:22] *** Joins: coot (~coot@213.134.190.95)
[18:43:39] <geekosaur> lionhairdino, yes, it's new in 9.2.1
[18:48:06] *** Quits: rusrushal13 (~rusrushal@2401:4900:5d14:182c:14c5:2762:c20c:8596) (Quit: Client closed)
[18:48:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:50:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:51:11] <lionhairdino> thx for replying. I am waiting for 9.2 resolver...
[18:51:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:51:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:51:16] *** Joins: wroathe (~wroathe@user/wroathe)
[18:51:33] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:52:44] *** Joins: xsperry (~xs@user/xsperry)
[18:54:16] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:54:36] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:56:22] *** Joins: jstolarek (~jstolarek@staticline-31-183-164-222.toya.net.pl)
[18:56:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:57:09] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[18:58:30] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 256 seconds)
[18:58:56] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[18:59:39] *** Quits: ph88 (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de) (Quit: Leaving)
[18:59:42] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:59:49] <polyphem> lionhairdino: how is it going with your mem leak chase ?
[18:59:52] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:01:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:03:23] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[19:05:24] *** Quits: tremon_ (~tremon@217-120-53-183.cable.dynamic.v4.ziggo.nl) (Quit: getting boxed in)
[19:05:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[19:09:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:09:44] *** Quits: zmt00 (~zmt00@user/zmt00) (Remote host closed the connection)
[19:10:47] *** Quits: mbuf (~Shakthi@122.173.235.64) (Quit: Leaving)
[19:13:26] *** Quits: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320) (Remote host closed the connection)
[19:13:28] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[19:17:02] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[19:17:24] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5)
[19:17:33] *** Joins: cheater (~Username@user/cheater)
[19:18:25] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[19:18:39] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[19:20:24] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[19:22:38] *** Joins: litharn[m] (~litharnma@2001:470:69fc:105::1:8336)
[19:24:05] *** Joins: olebra (olebra@cassarossa.samfundet.no)
[19:24:05] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[19:25:56] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[19:26:25] *** Joins: CHUD (~CHUD@edu7B10.kent.ac.uk)
[19:30:41] *** Quits: grabb0id[m] (~alangmatr@2001:470:69fc:105::b489) (Quit: You have been kicked for being idle)
[19:32:28] <hololeap> just curious if anyone here has seen this before: https://github.com/gentoo-haskell/gentoo-haskell/issues/1225#issuecomment-1024352057
[19:32:58] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:33:35] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:34:29] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[19:35:41] *** Quits: kevorna (~kevorna@81-228-153-98-no289.tbcn.telia.com) (Ping timeout: 256 seconds)
[19:36:44] *** Quits: CHUD (~CHUD@edu7B10.kent.ac.uk) (Remote host closed the connection)
[19:36:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:37:00] *** Joins: CHUD (~CHUD@edu7B10.kent.ac.uk)
[19:38:45] *** Joins: MoC (~moc@user/moc)
[19:41:34] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[19:42:33] *** Joins: max22- (~maxime@2a01cb08833598009858f30aea0eec11.ipv6.abo.wanadoo.fr)
[19:44:24] *** Quits: d0ku (~d0ku@178.43.19.180.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[19:48:15] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:51:37] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[19:52:58] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[19:54:49] *** ezzieygu1wuf is now known as ezzieyguywuf
[19:56:20] *** Quits: deadmarshal (~deadmarsh@95.38.114.1) (Ping timeout: 252 seconds)
[19:58:18] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[19:58:43] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[20:01:18] *** Joins: Akiva (~Akiva@user/Akiva)
[20:05:38] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[20:05:56] *** Quits: ski (~ski@remote11.chalmers.se) (Ping timeout: 256 seconds)
[20:06:46] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:07:12] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 250 seconds)
[20:08:37] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[20:10:22] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:10:31] *** Quits: phma (phma@2001:5b0:211c:37e8:e22d:196:60ef:f166) (Read error: Connection reset by peer)
[20:12:00] *** Joins: phma (phma@2001:5b0:212a:9da8:6f5b:6926:b319:62a2)
[20:13:44] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[20:14:51] *** Joins: vicfred (~vicfred@user/vicfred)
[20:16:27] *** Joins: vicfred_ (~vicfred@user/vicfred)
[20:18:49] *** Joins: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340)
[20:18:57] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 240 seconds)
[20:19:55] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:20:57] *** Joins: deadmarshal (~deadmarsh@95.38.114.1)
[20:23:14] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[20:25:49] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 240 seconds)
[20:27:00] *** Joins: jespada (~jespada@87.74.36.188)
[20:30:32] *** Joins: lep (~lep@94.31.89.203)
[20:31:41] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[20:33:27] *** Quits: CHUD (~CHUD@edu7B10.kent.ac.uk) (Remote host closed the connection)
[20:33:44] *** Joins: CHUD (~CHUD@edu7B10.kent.ac.uk)
[20:34:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:34:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:34:12] *** Joins: wroathe (~wroathe@user/wroathe)
[20:35:49] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:36:25] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[20:38:24] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[20:38:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[20:38:49] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[20:42:17] <lep> my google-fu is failing me: how can i set cpp-options for cabal programatically?
[20:45:22] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:48:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[20:48:36] <geekosaur> what do you mean by programmatically?
[20:48:47] *** Quits: m1dnight (~christoph@christophe.dev) (Ping timeout: 256 seconds)
[20:48:59] <lep> like from the command line
[20:49:20] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[20:49:23] <lep> i have different patch targets
[20:49:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:49:40] <lep> so i do -DPATCH_LVL=123
[20:49:50] *** Quits: burnsidesLlama (~burnsides@dhcp168-033.wadham.ox.ac.uk) (Remote host closed the connection)
[20:50:22] *** Joins: burnsidesLlama (~burnsides@dhcp168-033.wadham.ox.ac.uk)
[20:50:35] <geekosaur> in general it looks like any option you can set in a file can also be done from the command line, but cpp-options needs to be in a section and I don't think there's a way to specify a section from the command line
[20:50:51] <geekosaur> but you can try: --cpp-options=-DPATCH_LVL=123
[20:51:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:51:24] <geekosaur> may require you to run cabal configure explicitly
[20:51:52] *** Joins: madjestic (~madjestic@77-63-68-224.mobile.kpn.net)
[20:52:08] <lep> cabal configure --cppoptions=... says unrecognized configure option
[20:53:20] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:53:27] <lep> (also im not very good with cabal)
[20:53:34] <geekosaur> did you actually leave the hyphen out there?
[20:53:47] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[20:53:52] <lep> no, i just didnt c'n'p
[20:54:04] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:178:3bce:7e3c:a914)
[20:54:48] <geekosaur> ok, looks like it goes to cabal build instead of cabal configure. (I'm surprised.)
[20:54:52] *** Quits: burnsidesLlama (~burnsides@dhcp168-033.wadham.ox.ac.uk) (Ping timeout: 250 seconds)
[20:55:30] <lep> i also tried build but same error
[20:55:44] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[20:55:45] *** Parts: olebra (olebra@cassarossa.samfundet.no) (WeeChat 3.0)
[20:58:55] <geekosaur> hm, --cpp-options is listed here as valid for build
[21:00:42] *** Joins: coot (~coot@213.134.190.95)
[21:00:43] <geekosaur> I should note that I'm running cabal 3.6. what version do you have?
[21:01:46] <lep> 3.4
[21:01:48] *** Quits: lionhairdino (~jacoo@121.131.39.82) (Ping timeout: 250 seconds)
[21:02:49] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[21:03:07] *** hgolden_ is now known as hgolden
[21:04:45] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[21:06:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[21:07:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Remote host closed the connection)
[21:07:32] *** Joins: econo (uid147250@user/econo)
[21:08:26] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[21:09:34] *** Joins: jinsun (~quassel@user/jinsun)
[21:09:36] *** Quits: xff0x (~xff0x@2001:1a81:5277:3c00:f024:75d4:2bb:2631) (Ping timeout: 250 seconds)
[21:09:46] *** Joins: xff0x (~xff0x@2001:1a81:529a:8d00:e291:e2f6:2259:ce5c)
[21:10:24] *** Joins: burnsidesLlama (~burnsides@dhcp168-033.wadham.ox.ac.uk)
[21:10:42] <geekosaur> checked the 3.4 manual, it shuld be supported
[21:11:03] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:178:3bce:7e3c:a914) (Remote host closed the connection)
[21:11:11] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Ping timeout: 245 seconds)
[21:11:22] *** Quits: jinsun (~quassel@user/jinsun) (Client Quit)
[21:11:35] *** Joins: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com)
[21:11:43] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[21:12:55] <lep> dunno, guess im inept then
[21:14:16] <geekosaur> hm, where are you specifying it in the command line? some options are global and come before the subcommand, some subcommand-specific and come after
[21:14:38] <lep> i think i tried all permutations
[21:15:37] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:16:08] *** Joins: jinsun (~quassel@user/jinsun)
[21:17:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[21:17:28] <geekosaur> hm, just tried it and 3.6 doesn't take it either despite it being documented. :(
[21:17:48] <janus> must drama as to whether mtl should remove re-exports or not: https://github.com/haskell/mtl/pull/103#issuecomment-1024456019
[21:17:52] <geekosaur> sclv, around?
[21:17:58] <sclv> yeah, sup
[21:18:10] <lep> :D
[21:18:20] <lep> at least im not as inept as i thought
[21:18:28] <sclv> i mean i assume if you found a bug its a bug, idk what to tell you 
[21:20:07] <sclv> as a general rule, not all options listed in the help for v2-build actually do anything, because it was implemented sharing Too Much with v1-build's options
[21:22:53] <lep> ok, but it doesnt make much of a difference. im *very* clueless about cabal in general
[21:24:29] <sclv> lep: is this the issue? https://github.com/haskell/cabal/issues/7635
[21:24:47] <geekosaur> an alternative way to do this is to put it in the cabal file guarded by a flag, and use -fflag to enable it
[21:25:01] <sclv> i.e. are the cpp opts for use in haskell code or c code
[21:25:19] <geekosaur> although if you need to use different versions I guess that doesn't work
[21:25:27] <sclv> and is it your package or someone else's
[21:25:37] *** Quits: CHUD (~CHUD@edu7B10.kent.ac.uk) (Ping timeout: 256 seconds)
[21:26:16] <lep> it's in my own code
[21:26:32] <sclv> and is the cpp used in haskell code or c code
[21:26:35] <lep> haskell
[21:26:40] <segfaultfizzbuzz> https://twitter.com/conal/status/1454577565373394946?cxt=HHwWhMCrpdml2a8oAAAA  "perfect binary leaf trees with their usual logarithm/index type" what is a "logarithm/index type" ?
[21:26:52] *** Joins: m1dnight (~christoph@christophe.dev)
[21:27:15] <sclv> lep: ok then I'd recommend you refactor your code -- flags set in cabal are turned into cpp variables iirc
[21:27:50] <lep> yes, in this specific case it will probably work that way as there is only two cases depening on the patch lvl
[21:27:52] <sclv> so instead of setting a single cpp variable with multiple potential values, the "usual" way is to have a test on individual cpp things being set
[21:28:05] <sclv> and then you compile with -fSOMEFLAG
[21:28:28] <lep> yeah, i just assumed it would be "easy" to set some compile time integer
[21:29:08] <sclv> its not so much, because the semantics of where you set it and how much it gets set for get confusing fast
[21:29:49] <sclv> so the pattern is to shield end users from knowing cpp is involved and instead giving them access thru the flags mechanism, which is more integrated with the solver, etc
[21:30:01] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:30:09] <EvanR> compile time integer, use type-level integer math perhaps?
[21:30:21] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:30:23] <EvanR> type checking = compile time integer checking
[21:30:25] <prasad> Hi I need help with parsing a string here is the paste https://paste.debian.net/1228751/  input is "123,234 -> 234,345"  the output [((123,234,234,3),"45"),((123,234,234,34),"5"),((123,234,234,345),"")] what I want is only the last value. Should I use filter to get the last value
[21:30:25] <prasad>  
[21:30:42] <dminuoso> segfaultfizzbuzz: https://github.com/conal/talk-2021-can-tensor-programming-be-liberated
[21:30:46] <dminuoso> segfaultfizzbuzz: https://www.youtube.com/watch?v=oaIMMclGuog
[21:30:53] <dminuoso> Give that talk a view, at the end he explains it
[21:31:03] <dminuoso> (Heh, "giving a talk a view")
[21:31:17] <EvanR> give a picture a listen
[21:31:29] <EvanR> synesthesia syle
[21:31:33] <geekosaur> prasad, I'd strongly recommend you use megaparsec instead of ReadP. the multiple-parses behavior of ReadP is both slow and annoying to work with
[21:32:10] <prasad> Is megaparsec part of haskell standard library
[21:32:14] <dminuoso> No
[21:32:36] <geekosaur> very little is part of the "standard library", just what's needed to build the compiler itself
[21:32:46] <dminuoso> We dont really have a standard library, we have the `base` package and several boot libraries that come with ghc itself, that we could consider part of a "standard consortium" we ship.
[21:32:50] <geekosaur> also I think while megaparsec isn't, its predecessor parsec is
[21:33:05] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[21:33:10] <geekosaur> which is good enough for this although missing some performance improvements
[21:33:25] <dminuoso> But megaparsec is a commonly package
[21:33:26] *** Quits: Major_Biscuit (~MajorBisc@c-001-005-022.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:33:35] <dminuoso> Certainly quite popular, alongside attoparsec
[21:34:17] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:f9c4:ec41:3bfb:d5c6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:35:24] *** Joins: briandaed (~root@185.234.208.208.r.toneticgroup.pl)
[21:37:23] * EvanR checks to see how far an attoparsec even is
[21:37:32] *** Joins: alp (~alp@user/alp)
[21:37:46] *** Quits: madjestic (~madjestic@77-63-68-224.mobile.kpn.net) (Read error: Connection reset by peer)
[21:38:06] <EvanR> 30.8 cm
[21:39:20] <dminuoso> Mmm?
[21:39:22] <dminuoso> That seems wrong
[21:39:31] <dminuoso> I come up with 149.598 nanometers
[21:39:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:39:48] <dminuoso> atto SI prefix is a factor of 10−18
[21:40:08] <EvanR> that was totally google's answer
[21:41:01] <geekosaur> * 3.0856776
[21:41:10] <geekosaur> from attoparsecs to cm
[21:41:12] <dminuoso> 1 parsec = 3.085 7 * 1e16 m
[21:41:22] <geekosaur> per units
[21:41:30] <[exa]> wiki says 3.086 centimeters
[21:41:36] <dminuoso> Mmm
[21:41:46] <dminuoso> Oh I fail at doing math
[21:41:53] <dminuoso> I mixed up parsec and AU
[21:42:08] <geekosaur> quite the difference there
[21:42:16] <dminuoso> An attoAU is 149.598 nanometers
[21:42:35] <dminuoso> Useful to know that an attoparsec are three centimeters.
[21:42:54] <dminuoso> Shall try and build this into my daily jargon now.
[21:43:10] <geekosaur> so if a new package "threecm" appears we know what it is :)
[21:45:14] <EvanR> I missed a zero trying to read decimals
[21:45:46] *** Joins: neceve (~quassel@2.26.93.228)
[21:46:22] *** Joins: Erutuon (~Erutuon@user/erutuon)
[21:47:39] *** Quits: vglfr (~vglfr@46.96.133.112) (Remote host closed the connection)
[21:48:15] <monochrom> I thought parsec was an angle.
[21:48:22] *** Joins: vglfr (~vglfr@46.96.133.112)
[21:48:30] <geekosaur> technically yes
[21:48:41] <geekosaur> parallax second
[21:48:49] *** Quits: vglfr (~vglfr@46.96.133.112) (Remote host closed the connection)
[21:48:49] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[21:49:37] <monochrom> Nice.
[21:50:14] <EvanR> han solo is vindicated
[21:50:38] <dminuoso> Well, parsec is as much an "angle" as speed is light. One can be defined in terms of the other, but it's not the same as equivalence, no?
[21:51:01] *** Joins: vglfr (~vglfr@46.96.133.112)
[21:52:04] <geekosaur> hm. actually only the parallax part is an angle
[21:52:09] *** Quits: xff0x (~xff0x@2001:1a81:529a:8d00:e291:e2f6:2259:ce5c) (Ping timeout: 268 seconds)
[21:52:30] <EvanR> parallax was such a cool effect on old computer games
[21:53:11] <geekosaur> "the distance at which 1 au subtends an angle of one arcsecond"
[21:53:23] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[21:53:57] *** Joins: xff0x (~xff0x@2001:1a81:529b:5400:ae89:612e:5a81:4cf8)
[21:55:34] <EvanR> a picture would probably obviate needing to know what subtending is
[21:55:36] <monochrom> OK sorry, parsec is a distance defined by an angle and the parallax effect (so linking back to 1 AU)
[21:55:51] <monochrom> Heh, wikipedia has that picture
[21:56:10] <monochrom> Yeah I stopped reading the text and just stared at the picture.  https://en.wikipedia.org/wiki/Parsec
[21:57:05] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[21:57:13] <monochrom> But I came from old style British education in Hong Kong so I saw subtending in high school.
[21:57:33] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[21:58:04] <monochrom> (part of all the fun stuff from geometry)
[21:59:14] <monochrom> Does anyone want to raise "wait, I thought second was a time interval"? >:)
[21:59:34] * geekosaur just blames the Babylonians
[22:00:24] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[22:00:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[22:00:55] <EvanR> oh that's where I was going with han solo
[22:01:07] <EvanR> I didn't even realize we weren't talking about time at that point
[22:02:30] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:02:33] <EvanR> in the end it's all volts, on the cables connecting my monitor, on the neuron synapses, etc
[22:03:15] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[22:03:35] *** Joins: vysn (~vysn@user/vysn)
[22:03:45] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[22:04:04] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:05:18] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[22:06:36] *** Joins: cheater (~Username@user/cheater)
[22:07:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[22:10:02] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Ping timeout: 268 seconds)
[22:10:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:10:45] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[22:10:58] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[22:11:04] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:11:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Ping timeout: 240 seconds)
[22:14:07] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[22:14:34] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[22:17:30] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:20:14] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 250 seconds)
[22:23:11] *** Joins: nahcetan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[22:23:32] *** Quits: jstolarek (~jstolarek@staticline-31-183-164-222.toya.net.pl) (Ping timeout: 240 seconds)
[22:24:07] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:24:13] *** Joins: skewerr (spoonm@inaba.spoonm.org)
[22:24:18] *** Joins: joona93 (~joona@91-158-9-115.elisa-laajakaista.fi)
[22:24:51] *** Quits: joona93 (~joona@91-158-9-115.elisa-laajakaista.fi) (Client Quit)
[22:25:04] *** Joins: Katarushisu7 (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[22:25:14] *** Joins: dixie (~dixie@real.wilbury.sk)
[22:25:14] *** Quits: spoonm (spoonm@inaba.spoonm.org) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: dixie_ (~dixie@real.wilbury.sk) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: [exa] (exa@user/exa/x-3587197) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: gabiruh (~gabiruh@vps19177.publiccloud.com.br) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: df (~ben@justworks.xyz) (Ping timeout: 256 seconds)
[22:25:15] *** Joins: [exa]_ (exa@srv3.blesmrt.net)
[22:25:21] *** Joins: df_ (~ben@justworks.xyz)
[22:25:34] *** Joins: gabiruh (~gabiruh@vps19177.publiccloud.com.br)
[22:25:37] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[22:25:41] *** Quits: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: alphabeta (~kilolympu@31.205.200.235) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: cls (~cls@chalk.lubutu.com) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: APic (apic@apic.name) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: Ekho (~Ekho@user/ekho) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: eagleflo (~aku@163.172.137.34) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: exarkun (~exarkun@user/exarkun) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: maerwald (~maerwald@user/maerwald) (Ping timeout: 256 seconds)
[22:25:41] *** Katarushisu7 is now known as Katarushisu
[22:25:52] *** Joins: APic (apic@apic.name)
[22:25:54] *** Joins: cls (~cls@chalk.lubutu.com)
[22:25:57] *** Joins: eagleflo (~aku@163.172.137.34)
[22:25:58] *** Joins: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org)
[22:26:03] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[22:26:04] *** Joins: maerwald (~maerwald@mail.hasufell.de)
[22:26:08] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[22:26:26] *** Quits: maerwald (~maerwald@mail.hasufell.de) (Changing host)
[22:26:26] *** Joins: maerwald (~maerwald@user/maerwald)
[22:26:34] *** Joins: exarkun (~exarkun@user/exarkun)
[22:26:56] *** Joins: Jonno_FTW (~come@api.carswap.me)
[22:26:56] *** Quits: Jonno_FTW (~come@api.carswap.me) (Changing host)
[22:26:56] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[22:26:57] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[22:27:21] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[22:27:28] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[22:27:30] *** df_ is now known as df
[22:29:28] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[22:30:22] *** Quits: [exa]_ (exa@srv3.blesmrt.net) (Changing host)
[22:30:22] *** Joins: [exa]_ (exa@user/exa/x-3587197)
[22:30:29] *** [exa]_ is now known as [exa]
[22:30:37] *** Joins: mcglk (~mcglk@131.191.49.120)
[22:30:47] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Ping timeout: 256 seconds)
[22:30:54] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[22:31:10] *** Quits: mcglk_ (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[22:31:21] *** Quits: stvc (~stvc@192.241.166.39) (Ping timeout: 256 seconds)
[22:31:55] *** Quits: AWizzArd (~code@user/awizzard) (Ping timeout: 256 seconds)
[22:32:02] *** Joins: AWizzArd (~code@gehrels.uberspace.de)
[22:32:56] *** Joins: stvc (~stvc@192.241.166.39)
[22:33:05] *** Parts: lep (~lep@94.31.89.203) ()
[22:33:13] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[22:35:49] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[22:37:04] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[22:39:18] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[22:39:38] *** Joins: Ekho (~Ekho@user/ekho)
[22:39:57] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[22:41:29] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[22:42:57] *** Quits: deadmarshal (~deadmarsh@95.38.114.1) (Ping timeout: 240 seconds)
[22:43:32] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[22:43:59] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[22:44:32] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 240 seconds)
[22:45:15] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[22:46:34] <sm> f $ x & g = f (g x), am I right ?
[22:47:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:47:08] <EvanR> gross
[22:47:29] <geekosaur> I believe so
[22:47:40] <geekosaur> > f $ x & g :: Expr
[22:47:42] <lambdabot>  error:
[22:47:42] <lambdabot>      • Ambiguous type variable ‘t0’ arising from a use of ‘f’
[22:47:42] <lambdabot>        prevents the constraint ‘(Show t0)’ from being solved.
[22:47:54] <geekosaur> > f $ x & g
[22:47:56] <lambdabot>  error:
[22:47:56] <lambdabot>      • Could not deduce (Show t0) arising from a use of ‘f’
[22:47:56] <lambdabot>        from the context: FromExpr t
[22:48:11] <EvanR> % :i (&)
[22:48:11] <yahb> EvanR: (&) :: a -> (a -> b) -> b -- Defined in `Data.Function'; infixl 1 &
[22:48:28] <geekosaur> hm, no
[22:49:09] <monochrom> Did you know: you can :i & $ on the same line :)
[22:52:27] <EvanR> % :i (&) ($)
[22:52:27] <yahb> EvanR: (&) :: a -> (a -> b) -> b -- Defined in `Data.Function'; infixl 1 &; ($) :: (a -> b) -> a -> b -- Defined in `GHC.Base'; infixr 0 $
[22:53:14] <EvanR> what happens when an unmovable infixr collides with an unresistable infixl
[22:53:24] <monochrom> Here is a nice way to test:
[22:53:33] <monochrom> > Just $ () & Left
[22:53:34] <lambdabot>  Just (Left ())
[22:54:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[22:54:22] <monochrom> EvanR, the compiler flags "syntax error I can't break the tie"
[22:54:51] <monochrom> The compiler makes you an offer you can't resist :)
[22:55:20] <EvanR> I can hear lisp people chuckling at the situation
[22:55:49] <EvanR> silly infix operator fools
[22:56:20] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:56:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:03:52] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[23:05:28] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[23:11:06] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 3.3)
[23:11:11] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:15:00] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[23:15:12] *** Joins: FirstTimeInHere (~FirstTime@200.7.90.158)
[23:15:19] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:16:00] *** Quits: jumper149 (~jumper149@base.felixspringer.xyz) (Quit: WeeChat 3.3)
[23:16:39] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[23:18:07] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[23:18:12] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[23:18:17] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[23:19:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:19:31] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[23:19:42] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:7040:d478:b206:6b72)
[23:19:54] <ephemient> https://sourceforge.net/p/readable/wiki/Examples/ infix in lisp :) although it doesn't implement operator precedence
[23:20:56] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[23:21:06] <prasad> :q
[23:21:11] *** Joins: cheater1__ (~Username@user/cheater)
[23:21:37] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[23:21:44] *** Joins: pavonia (~user@user/siracusa)
[23:21:46] *** cheater1__ is now known as cheater
[23:22:10] *** Joins: dsrt^ (~dsrt@75-147-197-198-Atlanta.hfc.comcastbusiness.net)
[23:23:36] <monochrom> I used to have a "pythonic lisp" joke posted on lpaste.net.  But lpaste.net is gone.
[23:23:55] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:24:20] *** Joins: tommd (~tommd@67-42-147-226.ptld.qwest.net)
[23:25:05] <monochrom> If you understand "pythonic java" in https://twitter.com/HisCursedness/status/788690145822306304 , you can imagine what my joke looked like. :)
[23:25:41] *** Quits: prasad (~user@c-73-170-49-136.hsd1.ca.comcast.net) (Quit: ERC (IRC client for Emacs 27.1))
[23:26:25] <monochrom> You probably have to click on the picture to see the full picture, especially what's on the right edge.
[23:26:47] <monochrom> I gave an exam question on "input an AST, output this format" >:)
[23:27:51] *** Quits: mmalter (~mmalter@88.126.10.237) (Quit: Lost terminal)
[23:28:27] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[23:29:47] <EvanR> what haha
[23:31:39] <EvanR> I sort of regret not having an entire chunk of brain warp by java
[23:31:56] <EvanR> so many people to commiserate with
[23:32:59] <EvanR> now I want to see pythonic lisp, sort of
[23:33:11] <EvanR> or better, haskell warped into anything other than BASIC
[23:36:25] <monochrom> For pythonic lisp, the trick is to also put ( at the far right edge.
[23:38:04] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[23:38:18] *** Joins: juhp (~juhp@128.106.188.82)
[23:41:01] <janus> @hoogle (Monad m, Foldable t, Alternative f) => t (m (f a)) -> m (f a)
[23:41:02] <lambdabot> No results found
[23:41:21] <janus> i am looking for an effectful asum, does anybody know of a package?
[23:43:41] <EvanR> :t sequence
[23:43:42] <lambdabot> (Traversable t, Monad m) => t (m a) -> m (t a)
[23:43:42] <byorgey> janus: asum already has that type, doesn't it?
[23:43:43] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[23:44:02] <byorgey> janus: I mean if you replace the 'a' in the type of asum with 'f a'
[23:44:28] <byorgey> oh, never mind, Alternative f.
[23:46:10] <c_wraith> janus: do you really need Monad there, or is Applicative sufficient?
[23:46:53] <janus> well i have a monad, a monad provides more stuff than an applicative. if you have a solution with applicative, i'd like to see it, since it would also work in a monadic context
[23:47:39] <c_wraith> the constraint says what is *required* for the function. Does that function do anything that requires a monad constraint?
[23:48:18] <monochrom> Ugh please don't argue over this.
[23:48:18] <awpr> :t fmap Data.Monoid.getAlt . Data.Monoid.getAp . foldMap (Data.Monoid.Ap . fmap Data.Monoid.Alt)
[23:48:19] <lambdabot> forall k (f1 :: * -> *) (t :: * -> *) (f2 :: k -> *) (a :: k). (Foldable t, Applicative f1, Monoid (Alt f2 a)) => t (f1 (f2 a)) -> f1 (f2 a)
[23:48:52] <awpr> ...that's not what my GHCi says
[23:49:14] <monochrom> If I say "I'm looking for Int->Int for increasing an Int by 1" no one is going to chastise me on "you need to generalize to Num a => a -> a or else I won't answer".
[23:49:33] <c_wraith> monochrom: it wasn't about that - it was about "I don't know what that function does if there's a Monad constraint"
[23:49:55] <c_wraith> like, I was looking at the same wrappers awpr is using
[23:50:20] <c_wraith> And I wasn't sure if they actually would do the job, because I didn't know if Applicative was sufficient for the job
[23:50:55] <awpr> not sure why lambdabot doesn't know about the Monoid instance for Alt, but it should implement the intended "effectful asum", and it should say `Alternative f2` in place of that Monoid constraint
[23:51:18] <monochrom> Hrm, would yahb do better?
[23:51:32] <monochrom> % :type fmap Data.Monoid.getAlt . Data.Monoid.getAp . foldMap (Data.Monoid.Ap . fmap Data.Monoid.Alt)
[23:51:32] <yahb> monochrom: forall {k} {f1 :: * -> *} {t :: * -> *} {f2 :: k -> *} {a :: k}. (Foldable t, Applicative f1, Monoid (Alt f2 a)) => t (f1 (f2 a)) -> f1 (f2 a)
[23:51:52] <monochrom> yahb is 9.0.* IIRC
[23:52:04] <monochrom> % !ghc --version
[23:52:04] <yahb> monochrom: ; <interactive>:31:1: error:; Bang pattern in expression context: !ghc; Did you mean to add a space after the '!'?
[23:52:11] <monochrom> % :!ghc --version
[23:52:12] <yahb> monochrom: The Glorious Glasgow Haskell Compilation System, version 9.0.1
[23:52:26] <janus> if you defined it as 'pure empty' it wouldn't require Monad, but i was thinking it would also run on e.g. infinite lists as the t. with applicative, i thought you're supposed to know up-front how many steps 'computation' it would be? so then how could it work on infinite lists? not trying to argue btw :) just trying to understand
[23:52:31] <c_wraith> the docs say the monoid instance has been there since base 4.8, which matches up with then Alt was added
[23:52:42] <c_wraith> *when
[23:52:55] <janus> thanks for the solution awpr, i am looking at it
[23:53:51] <janus> oh but i guess since each element doesn't depend on the previous, it shouldn't need to be Monad
[23:54:01] <janus> is that the intuition you had c_wraith?
[23:54:06] <c_wraith> yes
[23:54:07] <awpr> "up front" means "without depending on prior applicative results", not "in finite time" -- it knows up-front that there's an  infinite sequence of effects to run
[23:55:13] <janus> but in haskell, when given an infinite list, you can never actually verify that? that check would never terminate
[23:55:49] <awpr> there is no check that happens temporally before execution can start.  it's just that by nature Applicative computations' shapes don't depend on their intermediate values
[23:55:58] <c_wraith> awpr: you know, this reminds me of something...  There was a... reddit discussion?  I think?  a few months(?) back about how instance constraints shouldn't be automatically applied, because there isn't always a principle type in the present of FlexibleConstraints, or something?
[23:56:02] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (Ping timeout: 240 seconds)
[23:56:24] <awpr> that shape can be infinite, as long as it's infinite independently of intermediate values
[23:57:24] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[23:57:33] *** Quits: briandaed (~root@185.234.208.208.r.toneticgroup.pl) (Quit: Lost terminal)
[23:57:36] <janus> i'll have to ponder this :P
[23:57:48] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[23:58:04] <awpr> hmm, switching to ghci 9.0.1 it still reduces that, so it's probably not due to a change in instance resolution.  maybe there's something weird about the import rules specifically in lambdabot and yahb that makes it not able to see the instance?
[23:58:11] <c_wraith> or...  huh.  ghci on 9.2 will show a Monoid constraint unless Alternative is imported.  Then it will show Alternative
[23:58:49] <hololeap> % :t fmap getAlt . getAp . foldMap (Ap . fmap Alt) :: (Foldable t, Applicative m, Alternative f) => t (m (f a)) -> m (f a) -- I know awpr already beat me to it :)
[23:58:49] <yahb> hololeap: (Foldable t, Alternative f, Applicative m) => t (m (f a)) -> m (f a)
[23:59:13] <awpr> what?  why did it give a different type that time?
[23:59:31] <c_wraith> because hololeap told it what type to give
[23:59:35] <awpr> oh
[23:59:42] <c_wraith> so it only checked instead of inferring
[23:59:47] <EvanR> isInfinite :: [a] -> Bool, is similar to limited principle of omniscience
