[00:00:25] <FromDiscord> <ShalokShalom> In reply to @Isofruit "I mean, depends on": Sounds like you just have to disable a certain rule and voila.
[00:00:33] <FromDiscord> <ShalokShalom> Or just use inline js
[00:00:40] <FromDiscord> <tandy> https://github.com/alaviss/union↵(@gerwy)
[00:00:41] <FromDiscord> <ShalokShalom> Whatever
[00:00:59] <om3ga> enthus1ast: it worked, thanks for helping me
[00:01:12] <FromDiscord> <enthus1ast> sure np
[00:01:16] <FromDiscord> <gerwy> In reply to @tandy "https://github.com/alaviss/union (<@347345994217816": i really have enough for today thanks, but i will think about it later
[00:01:25] <FromDiscord> <ShalokShalom> @tandy#0000 they are anonymous?
[00:01:33] <FromDiscord> <ShalokShalom> I think he wants named ones
[00:02:05] <FromDiscord> <ShalokShalom> And he is not missing the unions, he is missing something to read and convert it
[00:02:35] <FromDiscord> <ShalokShalom> (edit) "he" => "he/she"
[00:02:45] <FromDiscord> <ShalokShalom> Or do I not get something
[00:03:50] <FromDiscord> <gerwy> In reply to @ShalokShalom "I think he/she wants": i mean, everything will be better than what im currently trying to do... https://media.discordapp.net/attachments/371759389889003532/960623248540848148/unknown.png
[00:04:06] <FromDiscord> <gerwy> yeah...
[00:09:35] <FromDiscord> <ShalokShalom> I like to mention that the type declarations are by far the most messy thing about this
[00:10:01] <FromDiscord> <ShalokShalom> That does look like C
[00:10:07] <FromDiscord> <ShalokShalom> Or some other generic language
[00:10:25] <FromDiscord> <ShalokShalom> Congratulations, you got Nim out of Nim 🥳
[00:11:03] <FromDiscord> <pmunch> Gerwy, an easier way to do that would be to first get the values converted to float, then do the math afterwards.
[00:17:03] <FromDiscord> <pmunch> sent a long message, see http://ix.io/3Ujr
[00:18:05] <FromDiscord> <pmunch> Hmm, apparently Matrix doesn't have code highlighting
[00:18:10] <FromDiscord> <pmunch> But you get the point
[00:33:27] <FromDiscord> <gerwy> In reply to @pmunch "Something like this\: \`\`\`nim": well i wouldn't say its easier, since i still need this ugly case but i guess its gonna look better if i make this conversion
[00:33:34] <FromDiscord> <gerwy> god this language gonna be so slow haha
[00:47:34] <FromDiscord> <ShalokShalom> https://github.com/jart/cosmopolitan#readme=
[00:48:18] <FromDiscord> <ShalokShalom> https://github.com/jart/cosmopolitan#readme↵↵Why not incorporating this into the language?
[00:50:24] <FromDiscord> <ShalokShalom> It could help making the language available on all platforms, just with one binary.
[00:50:55] <FromDiscord> <Rika> Doesn’t work for GUI applications
[00:51:03] <FromDiscord> <Rika> Also I can’t sleep lol good luck to me today I guess
[00:51:46] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[00:52:32] <FromDiscord> <Rika> M8 I’m not staying up for another 30 hours
[00:52:40] <FromDiscord> <gerwy> yes go to sleep
[00:52:43] <FromDiscord> <gerwy> drink tea and sleep
[00:52:54] <FromDiscord> <Rika> No, it’s kinda a bit too late now
[00:53:08] <FromDiscord> <Rika> I could prolly nap for two or three hours if I can even fall asleep
[00:54:15] <FromDiscord> <enthus1ast> whats up @Rika ?
[00:54:38] <FromDiscord> <Rika> It’s been an hour or so and I couldn’t fall asleep that’s all
[00:54:57] <FromDiscord> <Rika> Prolly gonna stay up again unless I could nap
[00:56:14] <FromDiscord> <enthus1ast> put you digital devices away \:)
[00:56:58] <FromDiscord> <Rika> That’s not my issue, I have for the whole hour
[00:58:42] <FromDiscord> <ShalokShalom> Light blocks the release of the sleep hormone.
[01:18:16] <FromDiscord> <morgan> ok so im just a little unsure what to do. i have two tables in an object that have ref objects as the value. do i need to do anything more than declare the object and its inputs? i had read something with `new()` but i can't find anything that fully addresses this
[01:19:06] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[01:19:30] <FromDiscord> <morgan> sent a code paste, see https://play.nim-lang.org/#ix=3UjE
[01:19:57] <FromDiscord> <morgan> (edit) "https://play.nim-lang.org/#ix=3UjE" => "https://paste.rs/qLi"
[01:20:07] <FromDiscord> <morgan> that isn't the code exactly
[01:20:24] <FromDiscord> <morgan> it's spread over two files and a bunch of unnecessary stuff
[01:20:26] <FromDiscord> <creikey> sent a code paste, see https://paste.rs/iSl
[01:20:30] <FromDiscord> <creikey> (edit) "https://play.nim-lang.org/#ix=3UjF" => "https://play.nim-lang.org/#ix=3UjG"
[01:23:08] <FromDiscord> <demotomohiro> You can write `flagShort['a'] = FlagVariantRef(...)`
[01:24:35] <FromDiscord> <morgan> so there's actually 4 tables, two pairs based on whether its shared with subcommands or not, and then short and long separately
[01:24:59] <FromDiscord> <demotomohiro> @creikey https://nim-lang.org/docs/with.html
[01:25:01] <FromDiscord> <morgan>  https://media.discordapp.net/attachments/371759389889003532/960643677028511804/unknown.png
[01:25:12] *** Quits: lain (~lain@172.16.254.xxx) (Quit: kthxbai)
[01:25:44] *** Joins: lain (~lain@172.16.254.xxx)
[01:25:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[01:31:23] <FromDiscord> <demotomohiro> You can create object/ref object types like `Foo(fieldName: value)` : https://nim-lang.org/docs/manual.html#types-object-construction
[01:32:43] <FromDiscord> <demotomohiro> Then you can put it on `table`.
[01:34:17] <FromDiscord> <demotomohiro> @morgan Your code looks fine.
[01:41:00] <FromDiscord> <creikey> In reply to @demotomohiro "<@180866243819995136> https://nim-lang.org/docs/wit": is there this but it only uses the argument of `with` if it works in the function?
[01:41:09] <FromDiscord> <creikey> so you can have like a `with d:` and other non-d-using functions in the scope
[01:48:39] <FromDiscord> <morgan> In reply to @demotomohiro "<@277133333773811712> Your code looks": cool thanks
[01:48:48] <FromDiscord> <demotomohiro> How people see if it is a function called with d or not under `with d:`?
[01:56:08] <FromDiscord> <demotomohiro> If you want to mix procedures that take an argment of `with` and procedures that doesn't take under `with`, I think you need to implement it yourself.
[02:06:06] <FromDiscord> <ShalokShalom> I dont really understand, what the ref keyword is supposed to mean
[02:06:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:06:24] <FromDiscord> <ShalokShalom> I assume, it means reference?
[02:06:57] <FromDiscord> <ShalokShalom> And then, the docu says something about "Built-in generic traced pointer type." which does not really say anything about it to me.
[02:10:37] <FromDiscord> <demotomohiro> `ref T` means  it is a reference to T allocated on heap and actually it is a pointer managed by Nim's memory management.
[02:11:00] <FromDiscord> <ShalokShalom> And shouldnt it be called "generically traced"?
[02:11:25] <FromDiscord> <ShalokShalom> So I need it for manual memory management?
[02:12:07] *** Joins: vicfred (~vicfred@user/vicfred)
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:13:19] <FromDiscord> <demotomohiro> I think it is called generic because it can be used to reference any types.
[02:14:27] <FromDiscord> <demotomohiro> I think traced means Nim's GC manages `ref` types.
[02:14:41] <FromDiscord> <ShalokShalom> pfft
[02:14:51] <FromDiscord> <ShalokShalom> Is it important for a newbie?
[02:14:57] <FromDiscord> <morgan> yeah so ref works with the GC, ptr is ignored by it and you have to do more if you want to have it help you out
[02:15:13] <FromDiscord> <morgan> that's my understanding as a newb
[02:15:28] <FromDiscord> <morgan> well, maybe moving past newb
[02:15:39] <FromDiscord> <morgan> but recent newb at least
[02:16:38] <FromDiscord> <ShalokShalom> Isnt the point of GC that I dont need to care about?
[02:16:40] <FromDiscord> <demotomohiro> If you want to do manual memory management, you can use `ptr T`. It is just a pointer that Nim's GC do nothing to it.
[02:16:46] <FromDiscord> <ShalokShalom> Aha.
[02:19:51] <FromDiscord> <demotomohiro> I think the point of GC is heap is freed automatically when it is no longer used.
[02:19:57] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:29:53] <FromDiscord> <ShalokShalom> The point of gc is so you dont have to free and allocate memory yourself↵↵Basically, think about memory
[02:36:48] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (Ping timeout: 252 seconds)
[02:37:03] *** Quits: om3ga (~oz@46.49.41.80) (Remote host closed the connection)
[02:37:13] *** Joins: ozzz (~oz@46.49.41.80)
[02:50:01] <FromDiscord> <Elegantbeef> I mean you can also use GC'd memory like memory allocations
[02:52:21] <FromDiscord> <Elegantbeef> `GCRef` and `GCUnref` let you make references stay alive longer and then deallocate them later when you get them back from pointer
[02:58:37] <NimEventer> New thread by ElegantBeef: This Month with Nim - March and Feburary, see https://forum.nim-lang.org/t/9073
[03:10:36] <FromDiscord> <creikey> In reply to @demotomohiro "How people see if": called with d if it makes sense to call with d
[03:11:00] <FromDiscord> <creikey> as in you can do with d: and make draw calls which use the d context and also do other math
[03:11:53] <FromDiscord> <Elegantbeef> Creikey did you see my long list of suggestions or just the ones i pinged you with?
[03:18:03] <FromDiscord> <ShalokShalom> sent a long message, see http://ix.io/3Ukz
[03:18:32] <FromDiscord> <ShalokShalom> So proc 1 with a parameter T1 would obviously mix with proc 2 with a T1 para
[03:18:46] <FromDiscord> <ShalokShalom> Or how is this?
[03:19:01] <FromDiscord> <demotomohiro> Nim's procedure overload picks the procedure based on a number and types of argument, but it seems you are asking to pick arguments based on defined procedures. @creikey
[03:19:04] <FromDiscord> <Elegantbeef> What do you mean?
[03:19:48] <FromDiscord> <Elegantbeef> If you want the generics to bind to the same type you have to explicitly do it, not use auto
[03:20:20] <FromDiscord> <Elegantbeef> Auto as it says emits a generic parameter for each parameter, whereas explicit generics do not
[03:20:27] <FromDiscord> <huantian> If you’re asking if having multiple procs with the same generic name effect each other, they do not
[03:20:43] <FromDiscord> <huantian> Each generic name is scoped to the individual proc
[03:20:53] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3UkD
[03:21:36] <FromDiscord> <Elegantbeef> Nim has many mechanisms for resolving ambiguity anyway
[03:21:42] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[03:22:08] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[03:22:34] <FromDiscord> <demotomohiro> @creikey Maybe creating a template that takes `d` and a code block, and define draw templates work without taking `d` that can be used only in the code block.
[03:22:54] <FromDiscord> <Elegantbeef> What are we trying to solve?
[03:23:04] *** Joins: jkl (~jkl@user/jkl)
[03:24:12] <FromDiscord> <Elegantbeef> Is it just the "pass `d` as the first parameter to a bunch of calls"?
[03:25:21] <FromDiscord> <ShalokShalom> In reply to @huantian "If you’re asking if": So they would clash, if I am trying to combine different instances of T1?
[03:25:39] <FromDiscord> <Elegantbeef> What do you mean?
[03:26:20] <FromDiscord> <ShalokShalom> @Elegantbeef#0000 As I read the linked documentation, is your example not correct
[03:26:28] <FromDiscord> <ShalokShalom> Or am I reading it wrong
[03:26:30] <FromDiscord> <Elegantbeef> My  example is correct
[03:26:46] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/960674318138900520/image.png
[03:26:51] <FromDiscord> <Elegantbeef> My example doesnt disagree with that
[03:27:00] <FromDiscord> <ShalokShalom>  https://media.discordapp.net/attachments/371759389889003532/960674375919607888/Screenshot_2022-04-05-00-56-53-97.jpg
[03:27:09] <FromDiscord> <Elegantbeef> Yes my example agrees with that
[03:27:25] <FromDiscord> <Elegantbeef> `# a does not change B's type`
[03:28:08] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3UkF
[03:28:43] <FromDiscord> <Elegantbeef> I do not get what the confusion is from shalok, can you elaborate what you're asking about?
[03:29:28] <FromDiscord> <Elegantbeef> auto generates a generic parameter per parameter, so if you want them to be the same type you need to be explicit
[03:30:00] <FromDiscord> <demotomohiro> If you have a proc `foo(a: auto) = echo a` and call it like `foo(1)` and foo("abc"), Nim creates `foo(a: int) = echo a` and `foo(a: string) = echo a`. It is not a problem as Nim have overloading.
[03:31:05] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3UkH
[03:31:27] <FromDiscord> <Elegantbeef> Nim chooses the most specialised procedure on dispathc
[03:31:30] <FromDiscord> <Elegantbeef> dispatch even
[03:32:54] <FromDiscord> <demotomohiro> If you call `foo(1)` and `foo(2)`, Nim creates `proc foo(a: int) = echo a` only when `foo(1)` is used and `foo(2)` just calls it.
[03:33:21] <FromDiscord> <Elegantbeef> I dont even know what we're talking about
[03:33:55] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "`# a does not": It doesnt say anything about that
[03:34:03] <FromDiscord> <ShalokShalom> Where do you read this?
[03:34:18] <FromDiscord> <Elegantbeef> It says that
[03:34:30] <FromDiscord> <Elegantbeef> `proc name[T1,T2](a: T1, b: T2)`
[03:34:32] <FromDiscord> <Elegantbeef> It says it right htere
[03:34:45] <FromDiscord> <Elegantbeef> Each parameter gets it's own generic parameter which means `a` does not change `b`'s type
[03:35:08] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "auto generates a generic": This comes probably down to me not understanding generic types in general
[03:35:25] <FromDiscord> <Elegantbeef> generics in nim are just templates basically that are emitted on first call
[03:35:43] <FromDiscord> <Elegantbeef> So when you get a generic it's specialiized for the given types and instantiated
[03:35:58] <FromDiscord> <Elegantbeef> It's called monomorphism i believe
[03:36:41] <FromDiscord> <demotomohiro> Nim generics is similar to C++'s template.
[03:36:44] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3UkM
[03:36:59] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3UkN
[03:36:59] <FromDiscord> <Elegantbeef> Eh dont bring in other languages
[03:37:06] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "Each parameter gets it's": But how is this different with auto then?
[03:37:14] <FromDiscord> <ShalokShalom> It says clearly it is the same
[03:37:29] <FromDiscord> <Elegantbeef> the comparison was with `proc name[T](a, b: T)`
[03:37:42] <FromDiscord> <Elegantbeef> Notice how `a` and `b` are assigned `T` as their type?
[03:37:58] <FromDiscord> <Elegantbeef> That means if `a is int` b also  has to be
[03:38:29] <FromDiscord> <ShalokShalom> You said the two examples are different
[03:38:43] <FromDiscord> <Elegantbeef> So anyway when you do `MyObject[float]()` what happens is nim types that  type definition and replaces `T` with `float`
[03:38:48] <FromDiscord> <Elegantbeef> Did you fucking read my message?
[03:38:57] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/960677384649076838/image.png
[03:39:01] <FromDiscord> <demotomohiro> !eval proc foo(a, b: auto) = echo typeof(a), typeof(b); foo(1, "2")
[03:39:04] <NimBot> <no output>
[03:39:13] <FromDiscord> <Elegantbeef> Look at the code in that image i just linked
[03:39:15] <FromDiscord> <ShalokShalom> My head hurts
[03:39:38] <FromDiscord> <Elegantbeef> Generics are simply "Replace all instances of `T ` with my instantiated argument"
[03:40:09] <FromDiscord> <Elegantbeef> They arent that complicated really, it's just "we're using X symbol for placeholder of what we're getting passed, when we get that we replace that with our symbol"
[03:40:12] <FromDiscord> <ShalokShalom> I just recognized right now, that you sneaked in a T
[03:40:24] <FromDiscord> <ShalokShalom> I assumed, you would have just copied the example
[03:40:33] <FromDiscord> <Elegantbeef> The example isnt what i wanted to explain
[03:40:49] <FromDiscord> <Elegantbeef> The example explains each parameter gets it's own generic parameter
[03:40:58] <FromDiscord> <Elegantbeef> I was explaining how to bind multiple parameters to the same type
[03:40:58] <FromDiscord> <ShalokShalom> I still dont understand, why you have brought this up
[03:41:47] <FromDiscord> <Elegantbeef> I brought it up cause your question made no sense and i thought explaining how generic parameters worked would help
[03:41:58] <FromDiscord> <Elegantbeef> But apparently that was a fools errand
[03:42:12] <FromDiscord> <Elegantbeef> What even is your question
[03:42:44] <FromDiscord> <ShalokShalom> If I am using auto all over the place, would that provide some kind of type safety?
[03:42:53] <FromDiscord> <Elegantbeef> Well yes Nim is statically typed
[03:43:05] <FromDiscord> <Elegantbeef> It's very annoying to use
[03:43:11] <FromDiscord> <Elegantbeef> But yes you still have static type safety
[03:43:31] <FromDiscord> <ShalokShalom> Well, that doesnt change anything about the fact, that a statically typed program with just string types and nothing else provides zero type safety
[03:43:44] <FromDiscord> <Elegantbeef> What?
[03:44:05] <FromDiscord> <ShalokShalom> If all the types are the same, it wont prevent type mismatch
[03:44:15] <FromDiscord> <Elegantbeef> But they arent all the same
[03:44:18] <FromDiscord> <ShalokShalom> Does auto all over the place prevent type mismatch
[03:44:24] <FromDiscord> <Elegantbeef> No
[03:44:32] <FromDiscord> <ShalokShalom> Well, if they are on auto, they are all T1, T2
[03:44:35] <FromDiscord> <Elegantbeef> `auto` isnt type erasure
[03:44:50] <FromDiscord> <Elegantbeef> T1, and T2  are inferred or explicitly got from procedure instantiation
[03:45:01] <FromDiscord> <ShalokShalom> So the type generated by T1, etc do produce unique types
[03:45:34] <FromDiscord> <ShalokShalom> It would be so much cooler, if it would be inferred from the body
[03:45:44] <FromDiscord> <Elegantbeef> Well they're placeholder names of the actual type
[03:45:45] <FromDiscord> <Elegantbeef> `myObjFloat.doThing` erros
[03:45:46] <FromDiscord> <Elegantbeef> cause `field` is of type `float` and you're attempting to assign `int`
[03:45:46] <FromDiscord> <ShalokShalom> I hope that comes, as considered in the docs
[03:45:52] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3UkO
[03:45:57] <FromDiscord> <Elegantbeef> Concepts exist
[03:46:08] <FromDiscord> <huantian> or just↵write out the types you want the arguments to be
[03:46:16] <FromDiscord> <Elegantbeef> Inferred would be nice, but concepts are nice
[03:46:28] <FromDiscord> <Elegantbeef> So until we get inferred be cool and use conceepts
[03:46:29] <FromDiscord> <ShalokShalom> 🤯
[03:47:07] <FromDiscord> <Elegantbeef> There we go
[03:47:09] <FromDiscord> <Elegantbeef> Much nicer
[03:47:12] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/K9X
[03:47:25] <FromDiscord> <Elegantbeef> Dont eve need `int(300)` now
[03:47:29] <FromDiscord> <Elegantbeef> We statically know it's an int
[03:48:30] <FromDiscord> <ShalokShalom> Instead of (int) could I also use my custom type?
[03:48:37] <FromDiscord> <Elegantbeef> Of course
[03:48:38] <FromDiscord> <ShalokShalom> default is a keyword here?
[03:49:00] <FromDiscord> <Elegantbeef> We'll say it's a keyword
[03:49:04] <FromDiscord> <Elegantbeef> It's not really, but we'll say it
[03:49:20] <FromDiscord> <Elegantbeef> It's a procedure which returns the 0'd value of a type
[03:49:59] <FromDiscord> <Elegantbeef> You might say "well this is more typing than auto" but personally having a concrete explanation of what a type needs to implements is much nicer than auto
[03:50:31] <FromDiscord> <Elegantbeef> you can also do like `d.someProc("", 3d, 3d)`
[03:51:17] <FromDiscord> <ShalokShalom> One is more horrible than the other
[03:51:36] <FromDiscord> <Elegantbeef> Yea `auto` fucking sucks
[04:00:33] <FromDiscord> <jmgomez> hey guys, super noob question. Im testing out the import of a cpp header file. I have my header file alongside the nim one and Im compiling it with cpp. What else I suppose to do in order to get it compiling?
[04:00:58] <FromDiscord> <Elegantbeef> Afaik that should be it
[04:02:09] <FromDiscord> <Elegantbeef> Actually you might need to tell nim to compile the C file or link a shared library
[04:02:21] <FromDiscord> <Elegantbeef> C++ file\
[04:02:31] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-importcpp-pragma if you havent looked already
[04:02:44] <FromDiscord> <ShalokShalom> sent a long message, see http://ix.io/3UkU
[04:02:50] <FromDiscord> <Elegantbeef> types are lovely
[04:03:01] <FromDiscord> <ShalokShalom> Types are lovely
[04:03:14] <FromDiscord> <Elegantbeef> Explicit types give a clear and concise requirement of API
[04:03:22] <FromDiscord> <Elegantbeef> `auto` is noise and doesnt help
[04:03:32] <FromDiscord> <Elegantbeef> No i dont want to run a docgen on all my code
[04:03:44] <FromDiscord> <ShalokShalom> Nothing in the way Nim presents types is not noise.
[04:04:09] <FromDiscord> <Elegantbeef> I mean let's look at concepts
[04:04:18] <FromDiscord> <Elegantbeef> It gives an explicit requirement of types to match
[04:04:37] <FromDiscord> <Elegantbeef> You cannot get that automatically without modifying source code or tools
[04:04:44] <FromDiscord> <jmgomez> That's the error Im getting https://media.discordapp.net/attachments/371759389889003532/960683870477504582/message.txt
[04:04:46] <FromDiscord> <Elegantbeef> And those two things are tedious to worry about
[04:05:14] <FromDiscord> <huantian> I don't think i've ever thought about using auto for param typing ever
[04:05:29] <FromDiscord> <Elegantbeef> Me either
[04:05:35] <FromDiscord> <Elegantbeef> Maybe as a work around to a compiler bug
[04:06:00] <FromDiscord> <Elegantbeef> So is this a `hpp` and `cpp` file?
[04:06:11] <FromDiscord> <Elegantbeef> If so you might need `{.compiler: "myfile.cpp".}`
[04:06:16] <FromDiscord> <jmgomez> sent a code paste, see https://play.nim-lang.org/#ix=3UkV
[04:06:26] <FromDiscord> <Elegantbeef> Ah thanks let me give this a whirl
[04:06:43] <FromDiscord> <jmgomez> I tried with compiler but it didnt seem to pick it
[04:06:57] <FromDiscord> <huantian> Like \~70% of the time you can just specify the type directly with the name↵and the rest you just use generics and concepts
[04:08:25] <FromDiscord> <huantian> I think it would be a bit overkill to say that all types in nim are horrible though
[04:08:25] <FromDiscord> <Elegantbeef> Hmm it works here i think
[04:08:28] <FromDiscord> <ShalokShalom> @huantian#0000 That was not what was the discussion about
[04:08:52] <FromDiscord> <Elegantbeef> atleast with `test.cpp` as the file name
[04:09:14] <FromDiscord> <Elegantbeef> Ah works with `.h` aswell
[04:09:19] <FromDiscord> <Elegantbeef> These are next to eachother right?
[04:09:22] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "You cannot get that": Yeah, and its still a horrible choice compared to full type inference.
[04:09:29] <FromDiscord> <Elegantbeef> It's really not
[04:09:33] <FromDiscord> <ShalokShalom> Like no solution at all.
[04:10:23] <FromDiscord> <huantian> sent a code paste, see https://play.nim-lang.org/#ix=3UkW
[04:10:48] <FromDiscord> <huantian> you have to specify that a and b are the types you want
[04:11:06] <FromDiscord> <jmgomez> aghh I might have something going on because I changed the name of the files and now the linker is complaining about a duplicated name :/
[04:13:05] <FromDiscord> <huantian> what is this in response too?↵(@ShalokShalom)
[04:14:26] <FromDiscord> <Elegantbeef> it'ss even worse haun, you cannot use static values for optimizations either
[04:14:30] <FromDiscord> <Elegantbeef> Or protection
[04:14:37] <FromDiscord> <Elegantbeef> Want to only allow a `0..10`in your procedure
[04:14:45] <FromDiscord> <Elegantbeef> Well now you need to do `assert myVal in 0..10`
[04:14:50] <FromDiscord> <Elegantbeef> Fuck yea i love tedium!
[04:15:41] <FromDiscord> <jmgomez> I got it working, I seems like the compile directive was adding the file again and also it seems like the imported class needs to have a different name in nim (which kinda makes sense). Thanks!
[04:15:42] <FromDiscord> <ShalokShalom> In reply to @huantian "you have to specify": A and b are parameter names, not types
[04:15:44] <FromDiscord> <Elegantbeef> Yea jmgomez it works here so cannot say much
[04:15:54] <FromDiscord> <abdu> sent a long message, see http://ix.io/3UkY
[04:16:01] <FromDiscord> <ShalokShalom> And there are languages with full type inference
[04:16:19] <FromDiscord> <abdu> (edit) "https://paste.rs/H1N" => "https://paste.rs/Oby"
[04:16:21] <FromDiscord> <Elegantbeef> Do they have sub range types?
[04:16:45] <FromDiscord> <Elegantbeef> abdu `import std/strutils; echo o.join()`
[04:16:50] <FromDiscord> <abdu> (edit) "http://ix.io/3Ul0" => "http://ix.io/3UkZ"
[04:16:54] <FromDiscord> <huantian> If a language did have full type inference I woudl probably not use that↵typing parameters and return types are great for making self documenting code
[04:16:58] <FromDiscord> <abdu> (edit) "http://ix.io/3UkZ" => "http://ix.io/3Ul1"
[04:17:30] <FromDiscord> <Elegantbeef> Const generic dispatch and subrange types cant really be done in "typeless" code
[04:17:47] <FromDiscord> <Elegantbeef> you cannot really infer something is supposed to be in a range unless there is a range check 😛
[04:18:23] <FromDiscord> <Elegantbeef> `proc doThing(s: static string)` i guess can be inferred due to \`when s == "hello"\~
[04:19:33] <FromDiscord> <huantian> I think I just don’t see why specifying that a proc takes a string and returns an int is bad
[04:19:54] <FromDiscord> <konsumlamm> Haskell actually encourages type annotations for top level definitions, despite having full type inference
[04:19:55] <FromDiscord> <Elegantbeef> Well i see that it harms code reuse but not all functions can be reused
[04:20:23] <FromDiscord> <ShalokShalom> @huantian#0000 http://www.fssnip.net/86m
[04:20:46] <FromDiscord> <ShalokShalom> In reply to @konsumlamm "Haskell actually encourages type": Haskell recommends type declarations everywhere
[04:20:57] <FromDiscord> <ShalokShalom> FSharp does it, as you say
[04:21:07] <FromDiscord> <Elegantbeef> In the case procedures can be reused use concepts
[04:21:08] <FromDiscord> <Elegantbeef> If the procedure cannot be reused use types, since it gives an explicit requirement to use it
[04:21:33] <FromDiscord> <konsumlamm> In reply to @ShalokShalom "Haskell recommends type declarations": not really, just for top level definitions
[04:21:53] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "Do they have sub": I really dont care.
[04:22:13] <FromDiscord> <Elegantbeef> Ah nice
[04:22:14] <FromDiscord> <ShalokShalom> In reply to @konsumlamm "not really, just for": Thats not how 99% of all Haskell code I see.
[04:22:23] <FromDiscord> <ShalokShalom> Top level definitions make sense
[04:22:41] <FromDiscord> <ShalokShalom> I know one web framework, that encourages ditching them all together
[04:23:27] <FromDiscord> <Elegantbeef> Does F# have static parameters?
[04:23:30] <FromDiscord> <ShalokShalom> IHP - Integrated Haskell Platform
[04:31:53] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:35:09] <FromDiscord> <creikey> sent a code paste, see https://play.nim-lang.org/#ix=3Ul8
[04:35:21] <FromDiscord> <Elegantbeef> Yea it's like only for calls duuuuude
[04:35:48] <FromDiscord> <Elegantbeef> Sorry couldnt help myself
[04:36:03] <FromDiscord> <creikey> In reply to @Elegantbeef "Creikey did you see": just the pings here I'll try to filter for your username
[04:36:34] <FromDiscord> <creikey> In reply to @Elegantbeef "Is it just the": some of the calls in a chunk of code, like it's doing some logic and draw calls
[04:36:55] <FromDiscord> <Elegantbeef> And what's wrong with `std/with` or the `with` on nimble?
[04:37:03] <FromDiscord> <creikey> I want the convenient feeling of a global drawing context but while passing the `d` drawing context parmeter around
[04:37:26] <FromDiscord> <creikey> In reply to @Elegantbeef "And what's wrong with": let me make the playground example
[04:37:35] <FromDiscord> <creikey> hold on I was supposed to join a class 7 minutes ago
[04:38:17] *** Quits: meowray (~MaskRay@li683-166.members.linode.com) (Remote host closed the connection)
[04:38:27] *** Joins: \u (MaskRay@2600:3c01::f03c:91ff:fea1:e018)
[04:38:50] *** Quits: NimEventer (~NimBot@78.47.140.224) (Read error: Connection reset by peer)
[04:39:14] *** Joins: NimEventer (~NimBot@78.47.140.224)
[04:42:39] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Ekho (~Ekho@user/ekho) (Ping timeout: 256 seconds)
[04:44:49] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[04:47:20] <NimEventer> New Nimble package! parsepage - Automatically extracts the data of sites, see https://gitlab.com/lurlo/parsepage
[04:50:06] *** Joins: Ekho (~Ekho@user/ekho)
[05:10:10] <FromDiscord> <abdu> In reply to @Elegantbeef "Do they have sub": ok↵How to have `echo` not output nl (newline) so next echo is in par line
[05:10:32] <FromDiscord> <Elegantbeef> `stdout.write`
[05:11:02] <FromDiscord> <abdu> In reply to @Elegantbeef "`stdout.write`": how is its syntax?
[05:11:08] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 260 seconds)
[05:11:49] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/io.html#write%2CFile%2Cstring
[05:34:31] <FromDiscord> <creikey> In reply to @Elegantbeef "And what's wrong with": https://play.nim-lang.org/#ix=3Uli
[05:34:33] <FromDiscord> <creikey> how do I make this work
[05:35:03] <FromDiscord> <Elegantbeef> Ah have you considered `byaddr`?
[05:35:08] <FromDiscord> <Elegantbeef> Ah nvm
[05:35:18] <FromDiscord> <Elegantbeef> You really cant handle this
[05:35:39] <FromDiscord> <Elegantbeef> Actually.... hmmm
[05:35:57] <FromDiscord> <Elegantbeef> We can actually do this give me a moment
[05:44:30] <FromDiscord> <Elegantbeef> @creikey\: here you go https://play.nim-lang.org/#ix=3Ull
[05:46:06] <FromDiscord> <creikey> In reply to @Elegantbeef "<@180866243819995136>\: here you go": interesting
[05:46:08] <FromDiscord> <creikey> thanks
[05:47:01] *** Joins: neurocyte861449 (~neurocyte@user/neurocyte)
[05:47:11] <FromDiscord> <Elegantbeef> ah it shouldnt be `proc` it should be typed like so https://play.nim-lang.org/#ix=3Ulm
[05:47:25] <FromDiscord> <Elegantbeef> This properly adds the parameter in the first position if there is an overload that takes it
[05:47:41] <FromDiscord> <Elegantbeef> You could make it more intelligent and look if any are missing and insert it there, but that's hell on earth to reason imo
[05:48:41] <FromDiscord> <creikey> In reply to @Elegantbeef "You could make it": yeah this is not really necessary either
[05:48:46] <FromDiscord> <creikey> this is really useful though
[05:49:06] <FromDiscord> <creikey> makes a lot of code nicer
[05:49:26] <FromDiscord> <creikey> In reply to @Elegantbeef "ah it shouldnt be": can I like paypal you $20 for this
[05:49:26] *** Quits: neurocyte86144 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[05:49:26] *** neurocyte861449 is now known as neurocyte86144
[05:49:50] <FromDiscord> <Elegantbeef> Lol
[05:51:16] <FromDiscord> <creikey> is there an easy way to make it so you can do like `with d, p:` and it checks for both on the first arg
[05:51:54] <FromDiscord> <creikey> it seems like it's just make arg a seq and add a for loop over it on line 36
[05:51:57] <FromDiscord> <Elegantbeef> It's a bit harder due to the `applyIfNeeds` logic
[05:53:21] <FromDiscord> <creikey> In reply to @Elegantbeef "It's a bit harder": you can call applyIfNeeds on each object passed to with though right
[05:53:36] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/UL6
[05:53:52] <FromDiscord> <Elegantbeef> needscall would be the `applyIfNeeds` `let need =` logic inside a macro
[05:54:22] <FromDiscord> <Elegantbeef> Generating the above i think would be the easiest
[05:54:40] <FromDiscord> <Elegantbeef> This reminds me that I need to support when inside micros
[05:56:15] *** Joins: xet7 (~xet7@user/xet7)
[06:04:49] *** Joins: yoyojambo (~yoyojambo@2806:108e:18:3670:2995:82d1:ef5a:4cc)
[06:09:08] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:09:10] <SamuelMarks> hi
[06:09:19] <FromDiscord> <Elegantbeef> Hello
[06:29:48] <FromDiscord> <Elegantbeef> @creikey\: this uses my abstractions but this is how you'd probably want to do it https://github.com/beef331/micros/blob/master/tests/tapply.nim#L6-L37
[06:33:39] <SamuelMarks> Hmm actually it shouldn't be too difficult for me to write my own flat CST ("T") for C. I think I'll do that. Probably won't take longer than 24 hours… here we go!
[06:34:32] <FromDiscord> <Elegantbeef> CST?
[06:36:17] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[06:38:40] *** Joins: rockcavera (~rc@192.12.115.204)
[06:38:40] *** Quits: rockcavera (~rc@192.12.115.204) (Changing host)
[06:38:40] *** Joins: rockcavera (~rc@user/rockcavera)
[06:38:48] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[06:39:33] *** Joins: rockcavera (~rc@192.12.115.204)
[06:39:33] *** Quits: rockcavera (~rc@192.12.115.204) (Changing host)
[06:39:33] *** Joins: rockcavera (~rc@user/rockcavera)
[06:39:38] *** Joins: Goodbye_Vincent1 (cyvahl@freakshells.net)
[06:39:53] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[06:40:21] *** Joins: rockcavera (~rc@192.12.115.204)
[06:40:21] *** Quits: rockcavera (~rc@192.12.115.204) (Changing host)
[06:40:21] *** Joins: rockcavera (~rc@user/rockcavera)
[06:40:47] *** Joins: def-- (~def-@static.238.114.9.176.clients.your-server.de)
[06:41:05] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (Ping timeout: 256 seconds)
[06:41:05] *** Goodbye_Vincent1 is now known as Goodbye_Vincent
[06:42:13] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (Ping timeout: 256 seconds)
[06:42:13] *** def-- is now known as def-
[06:45:00] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:46:54] <FromDiscord> <demotomohiro> @creikey Another implementation: https://play.nim-lang.org/#ix=3Uls
[06:47:08] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[06:47:21] <FromDiscord> <demotomohiro> With multiple objects support
[06:50:08] <FromDiscord> <Elegantbeef> Hmm i probably should use compiles more, i just dislike the premise of asking if something compiles
[06:53:23] <FromDiscord> <Rika> Beef knows his code won’t compile anyway
[06:53:30] <FromDiscord> <Elegantbeef> True
[06:55:19] <FromDiscord> <huantian> In reply to @Elegantbeef "CST?": I think it’s concrete syntax tree
[06:55:52] <FromDiscord> <huantian> From that one time I looked at that one python package
[06:57:08] <FromDiscord> <Rika> What’s the difference with an AST?
[06:57:15] <FromDiscord> <huantian> Because I think most python for matters use CST for formatting
[06:57:20] <FromDiscord> <spoon> ayo, used standard library and got using a single nimscript interpreter to work by ~~plagiarizing~~ a nimconf
[06:57:26] <FromDiscord> <huantian> Uh I think it includes more information if I remember correctly
[06:57:52] <FromDiscord> <spoon> now am i able to restrict certain language features for security reasons in nimscript?
[06:58:15] <FromDiscord> <Rika> In reply to @spoon "now am i able": In what context/method are you calling the code?
[06:58:17] <FromDiscord> <spoon> the embedding talk by pmunch btw
[06:58:19] <FromDiscord> <Elegantbeef> Most unsafe things dont exist but there is the vmopsdanger flag iirc
[06:58:44] <FromDiscord> <Elegantbeef> Well when you want to interop steal my vmconversion code to save braincells
[06:59:29] <FromDiscord> <spoon> In reply to @Rika "In what context/method are": right now i just have an object that contains a string with nimscript code, and i am just feeding it to an interpreter whenever it needs to run
[06:59:35] <FromDiscord> <huantian> I can’t remember exactly sure what the difference is tbh, at least in python I think it includes more information on the exact syntax used to make the code!
[06:59:42] <FromDiscord> <huantian> (edit) "code!" => "code?"
[06:59:56] *** Quits: Gustavo6046 (gustavo604@user/gustavo6046) (Read error: Connection reset by peer)
[07:00:10] <FromDiscord> <Elegantbeef> All the unsafe operations are by default disabled iirc
[07:00:12] <FromDiscord> <spoon> In reply to @Elegantbeef "Most unsafe things dont": is there any documentation on it?
[07:00:21] <FromDiscord> <spoon> see one from 2020 where it's experimental
[07:00:31] <FromDiscord> <Elegantbeef> Nope read the code is all i can say
[07:00:38] <FromDiscord> <Elegantbeef> If you have questions i might be able to help
[07:00:48] <FromDiscord> <Rika> In reply to @huantian "I can’t remember exactly": Okay, wonder what the dude meant about the CST then
[07:01:14] <FromDiscord> <spoon> i mean i guess since it's a string i can try processing away all of the imports i don't like, but people will find a way around that most likely
[07:01:17] <FromDiscord> <Elegantbeef> Also how is this any better than Nimscripter's API?
[07:01:32] <FromDiscord> <Elegantbeef> You just dont ship unsafe modules
[07:01:41] <FromDiscord> <Elegantbeef> Like it's that simple
[07:01:47] <FromDiscord> <Elegantbeef> Cannot access code you dont have
[07:01:57] <FromDiscord> <Elegantbeef> And then again most modules cant be used
[07:02:01] <FromDiscord> <huantian> In reply to @huantian "I can’t remember exactly": don't quote me but it might be like untyped vs typed in nim? ↵but like for python CST contains thigns like whitespace, comments, parentahthes, which I'd assume get lost in ast
[07:02:04] <FromDiscord> <Elegantbeef> You cannot open a socket with nimscript
[07:02:11] <FromDiscord> <Elegantbeef> You cannot write to a file with nimscript
[07:02:20] <FromDiscord> <Rika> Nim AST never has comments
[07:02:27] <FromDiscord> <Rika> except for doc ones
[07:02:41] <FromDiscord> <Rika> That makes sense though
[07:02:48] <FromDiscord> <Elegantbeef> Yea that stuff is lost in AST
[07:03:00] <FromDiscord> <Elegantbeef> It's one reason we have expanded macro calls in error messages
[07:03:31] <FromDiscord> <Rika> Maybe I should make a toy parser for this kinda shit
[07:04:09] <FromDiscord> <huantian> Yeah like if you wanted to make a formatter, you wouldn't want to lose info like comments
[07:05:07] <FromDiscord> <Rika> I was planning on creating a formatter and maybe a linter in the future
[07:05:13] <FromDiscord> <huantian> hm yeah it might be useful to have something like this in nim if one wanted to make a ~~actually good~~ formatter
[07:05:39] <FromDiscord> <Rika> If I were to make a serious one I’d just use the compiler API
[07:05:44] <FromDiscord> <Rika> “Oh wait.”
[07:06:02] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:06:59] <FromDiscord> <huantian> hm what would be a good nim formatter name
[07:07:11] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Max SendQ exceeded)
[07:07:12] <FromDiscord> <Rika> Are you gonna make one as welll
[07:07:22] <FromDiscord> <huantian> probably not lol↵I just like thinking of names
[07:07:32] <FromDiscord> <huantian> even though I can never think of good ones
[07:07:40] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:08:02] <FromDiscord> <spoon> probably would end up being "formatty"
[07:08:37] <FromDiscord> <Rika> I wouldn’t
[07:08:46] <FromDiscord> <Rika> I’m not a fan, and tree has that for himself
[07:08:48] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[07:09:06] <FromDiscord> <spoon> yea, saw some repos that borrowed from his nimtemplate that had the same name scheme
[07:09:07] *** Joins: Gustavo6046 (gustavo604@user/gustavo6046)
[07:09:08] <FromDiscord> <Rika> If he beats me to the punch so be it
[07:09:25] <FromDiscord> <huantian> how about "shape carpet"
[07:09:55] <FromDiscord> <spoon> alignymnt
[07:10:03] <FromDiscord> <spoon> (edit) "alignymnt" => "alignimnt"
[07:10:08] <FromDiscord> <spoon> aligniment
[07:10:14] <FromDiscord> <Rika> No
[07:10:18] <FromDiscord> <spoon> eh, i tried
[07:10:23] <FromDiscord> <Rika> No names with “Nim” shoehorned for me lol
[07:10:31] <FromDiscord> <aph> `nim-formatter`, straightforward but lame
[07:10:46] <FromDiscord> <Rika> Why are y’all thinking of names assuming I’ll be making this in time xd
[07:10:52] <FromDiscord> <spoon> every nim project has to have the nim shoehorned into the name though
[07:10:55] <FromDiscord> <spoon> that's an unspoken rule
[07:10:57] <FromDiscord> <huantian> what about "while stuff"
[07:11:03] <FromDiscord> <Rika> I’ll probably give it a Japanese name knowing me
[07:11:25] <FromDiscord> <Rika> In reply to @huantian "what about "while stuff"": Two words makes it annoying to deal with when I make a file name though lol
[07:11:44] <SamuelMarks> Elegantbeef - CST as in Concrete Syntax Tree. Though mine tend to be super flat. As in 1D
[07:12:03] <FromDiscord> <Elegantbeef> Also spoon what was the issue with Nimscripter?
[07:12:31] <SamuelMarks> Rika an AST won't be able to recreate the source exactly as it found it, as it omits comments and whitespace
[07:12:51] <FromDiscord> <spoon> just couldn't find a way to get it to work without either creating or destroying an interpreter each time it needed to run, given that there are a bunch of objects that would need to handle scripts
[07:12:59] <FromDiscord> <spoon> or finding some big workaround using tables
[07:13:12] <FromDiscord> <spoon> might be a method, just haven't found it
[07:13:40] <FromDiscord> <Elegantbeef> Ah i see, not much I can really happily change then
[07:14:03] <FromDiscord> <huantian> the things one has to do for hot reloading
[07:14:16] <FromDiscord> <Rika> What’s the CST for? I don’t remember you mentioning anything
[07:14:59] <SamuelMarks> Rika - So I can parse in C code, modify it [sanely], then emit it back. Also so I can create C code from nothing (just these API constructs), modify it, and emit it fresh.
[07:16:04] <FromDiscord> <Elegantbeef> Well spoon if you can figure out a way to extend nimscripter for this i'd accept a PR, the logic you're talking about is in the single file
[07:16:21] <FromDiscord> <Elegantbeef> That's if you want to of course
[07:16:27] <FromDiscord> <Rika> C parsing, may God bless you
[07:16:39] <FromDiscord> <spoon> aight, really just needs one method like "evaluateSream" or something
[07:17:06] <FromDiscord> <spoon> eh, maybe there's a bit more to it
[07:17:16] <FromDiscord> <huantian> In reply to @Rika "C parsing, may God": is it that bad?
[07:17:17] <SamuelMarks> =D
[07:17:29] <SamuelMarks> huantian - it's kinda ambiguous
[07:18:09] <FromDiscord> <Rika> In reply to @huantian "is it that bad?": Haha depends on the era of time you’re dealing with
[07:18:17] <FromDiscord> <Rika> And the compilers you’re dealing with
[07:18:39] <FromDiscord> <Rika> You usually leave it to a compiler to do the parsing but you can’t really in this case
[07:19:02] <SamuelMarks> Yeah, also LLVM doesn't actually support writing an AST from scratch in its API
[07:19:21] <SamuelMarks> It wants some actual code to parse first, then it can sort-of modify things but not cleanly like Python can
[07:19:46] <FromDiscord> <Rika> Man really you’re in for hell
[07:20:01] <FromDiscord> <Rika> Well, I guess you can ignore a whole number of things but still
[07:20:09] <SamuelMarks> I still think for my purposes it's something I can achieve within the next 24 hours
[07:20:18] <FromDiscord> <Elegantbeef> Hey for parsing they can atleast use something like libclang
[07:20:34] <FromDiscord> <Rika> Didn’t we just say he couldn’t
[07:20:41] <SamuelMarks> Ignore everything that I don't care about and get something that solves my immediate problem, open-source everything, and if others find it useful they'll fill in the bit I don't use to make it fully compliant
[07:20:51] <FromDiscord> <Rika> Sounds like a good plan
[07:21:03] <FromDiscord> <Elegantbeef> I said for parsing rika
[07:21:41] <SamuelMarks> Elegantbeef - Nah libclang ppl said they'll have this API maybe at the end of the year, they told me this morning: https://discourse.llvm.org/t/create-and-emit-ast-for-struct-clang-recorddecl/61383/2
[07:22:13] <FromDiscord> <Rika> Yeah I don’t see your point beef
[07:25:14] <FromDiscord> <Elegantbeef> We'll just go with my pointful as a circle
[07:25:25] <FromDiscord> <Elegantbeef> with my point is as pointful\
[07:27:02] <FromDiscord> <Rika> A circle has infinite points
[07:27:29] <FromDiscord> <Rika> Wait you mean sharp tips
[07:28:04] <FromDiscord> <spoon> pointy?
[07:28:54] <FromDiscord> <Rika> Oh my god wait this is hilarious
[07:29:02] <FromDiscord> <Rika> What if I name my formatter “aster”
[07:30:34] <FromDiscord> <huantian> Yes
[07:46:53] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[07:49:52] *** Joins: yiggityswaps (~yoyojambo@2806:108e:18:3670:2995:82d1:ef5a:4cc)
[07:53:23] *** Quits: yoyojambo (~yoyojambo@2806:108e:18:3670:2995:82d1:ef5a:4cc) (Ping timeout: 268 seconds)
[08:02:37] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[08:11:10] <FromDiscord> <aph> sent a code paste, see https://play.nim-lang.org/#ix=3UlB
[08:11:18] <FromDiscord> <aph> should i install nightlies and dump there?
[08:11:54] <FromDiscord> <aph> sent a code paste, see https://play.nim-lang.org/#ix=3UlC
[08:12:36] <FromDiscord> <Elegantbeef> i've never installed koch to my path so dont know why
[08:12:52] <FromDiscord> <Elegantbeef> `./koch temp c myFile` is what i generally do, where `./` is a cloned `Nim`
[08:13:10] <FromDiscord> <Elegantbeef> If you show the code i can probably guess the issue 😛
[08:13:18] <FromDiscord> <aph> In reply to @Elegantbeef "If you show the": lol true
[08:13:27] <FromDiscord> <aph> In reply to @Elegantbeef "`./koch temp c myFile`": time to switch to powershell if it resolves anything
[08:14:16] <FromDiscord> <Elegantbeef> It wont you're calling it, it looks locally for the path iirc
[08:14:57] <FromDiscord> <aph> `./koch` not found
[08:14:59] <FromDiscord> <aph> :P
[08:15:46] <FromDiscord> <aph> dumps https://media.discordapp.net/attachments/371759389889003532/960747048548851772/reader.nim
[08:17:09] <FromDiscord> <aph> oh nvm, it doesn't seem to be the code's issue
[08:17:15] <FromDiscord> <aph> my nim compiler just didn't work lol
[08:24:04] <FromDiscord> <aph> reinstalled nim! resolved!
[08:24:17] <FromDiscord> <demotomohiro> build_at.bat/build_all.sh builds nim from c source before calling koch.
[08:28:03] <FromDiscord> <aph> hmm
[08:30:09] <FromDiscord> <Elegantbeef> Make your code smarter just take in a `Stream`
[08:30:37] <FromDiscord> <aph> okie :>
[08:30:43] <FromDiscord> <Elegantbeef> then you can have a `initPMXFile` that takes a string 😛
[08:31:01] <FromDiscord> <Elegantbeef> Of  course disregard me given you didnt ask for suggestions
[08:32:07] <FromDiscord> <Elegantbeef> your `readVec` will not work
[08:32:21] <FromDiscord> <aph> oh i thought it'll work like a list comp
[08:32:54] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3UlD
[08:32:58] <FromDiscord> <Elegantbeef> `array[amount, float]` \
[08:33:13] <FromDiscord> <Elegantbeef> And of course you can make a `proc readVec(s: FileStream, size: int): seq[float]`
[08:33:14] <FromDiscord> <aph> ohh
[08:33:33] <FromDiscord> <Elegantbeef> Finally you dont need to return result
[08:33:38] <FromDiscord> <Elegantbeef> result is already implicitly returned
[08:34:28] <FromDiscord> <Elegantbeef> Why are you `include`ing `pmxTypes`?
[08:34:55] <FromDiscord> <aph> In reply to @Elegantbeef "Why are you `include`ing": not sure, `import` didn't get the types
[08:35:01] <FromDiscord> <aph> i think the issue is in that file instead
[08:35:18] <FromDiscord> <aph> whoops
[08:35:20] <FromDiscord> <aph> kinda spammy
[08:35:20] <FromDiscord> <aph> sent a code paste, see https://play.nim-lang.org/#ix=3UlE
[08:35:43] <FromDiscord> <aph> i'm trying to make my code NEP1ish, later 😛
[08:36:12] <FromDiscord> <aph> or maybe again it's not the code
[08:37:05] <FromDiscord> <Elegantbeef> Cause you didnt export types
[08:37:21] <FromDiscord> <Elegantbeef> You can only access fields/types with `` on them
[08:37:53] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/HKv
[08:38:03] <FromDiscord> <aph> ohh
[08:38:06] <FromDiscord> <aph> ty!
[08:38:06] <FromDiscord> <Elegantbeef> `array` is a generic
[08:38:14] <FromDiscord> <Elegantbeef> you cannot do `myField: array`
[08:38:20] <FromDiscord> <Elegantbeef> In that case it means "all arrays"
[08:38:24] <FromDiscord> <Elegantbeef> you need a size and type
[08:38:36] <FromDiscord> <Elegantbeef> If it's arbitrary size you do `seq[MyType]`
[08:38:50] <FromDiscord> <aph> time to go for seq
[08:38:52] <FromDiscord> <aph> :)
[08:39:05] <FromDiscord> <Elegantbeef> Also you can declare these all in a single typedef 😛
[08:39:38] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/mwI
[08:40:03] <FromDiscord> <aph> woww
[08:40:06] <FromDiscord> <Elegantbeef> Also worth noting instead of `array[3, float]` i'd use `type Vec3 = array[3, float]`
[08:40:25] <FromDiscord> <Elegantbeef> Less tedious typing
[08:40:39] <FromDiscord> <aph> i didn't know i could do that
[08:40:40] <FromDiscord> <aph> wow
[08:41:30] <FromDiscord> <Elegantbeef> The latter thing is a type alias
[08:41:43] <FromDiscord> <Elegantbeef> Also `float` is 64 bit btwe
[08:41:49] <FromDiscord> <Elegantbeef> If you want 32bit it's float32
[08:41:59] <FromDiscord> <aph> ohh
[08:42:12] <FromDiscord> <aph> you got me ohhing this morning
[08:42:53] <FromDiscord> <Elegantbeef> And for an ooh
[08:44:17] <FromDiscord> <Elegantbeef> `result.position = s.readVec(3)` can be written `s.read(result.position)` assuming it's a value type
[08:44:59] <FromDiscord> <Elegantbeef> and also assuming they're the same size, in this case the data is 12 bytes and you have an `array[3, float32]`
[08:45:29] <FromDiscord> <aph> i have a `Vec3`
[08:45:30] <FromDiscord> <aph> :)
[08:45:50] <FromDiscord> <Elegantbeef> I mean `Vec3` is just an alias so it's the same thing
[08:46:00] <FromDiscord> <Elegantbeef> If the dest is 12bytes and the source is 12 bytes it'll work
[08:47:51] <FromDiscord> <aph> wow `.read` is cool
[08:48:53] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3UlH
[08:50:24] *** Quits: rockcavera (~rc@user/rockcavera) (Read error: Connection reset by peer)
[08:50:49] *** Joins: rockcavera (~rc@192.12.115.204)
[08:50:49] *** Quits: rockcavera (~rc@192.12.115.204) (Changing host)
[08:50:49] *** Joins: rockcavera (~rc@user/rockcavera)
[08:51:14] <FromDiscord> <aph> nim is k00l ngl
[08:51:26] *** Quits: Gustavo6046 (gustavo604@user/gustavo6046) (Quit: Goodbye! Leave messages at my XMPP @ gustavo6046@anonym.im or my Discord Gustavo6046#9009 or possibly my Mastodon gustavo6046@fosstodon.org – I don't check my email often since it's full of crap, but in any case, rehermann6046@gmail.com)
[08:51:30] <FromDiscord> <Elegantbeef> Write less not more is my view, and you can do it a lot with Nim
[09:00:15] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:10:39] <FromDiscord> <aph> In reply to @Elegantbeef "You can even use": vscode angry at me https://media.discordapp.net/attachments/371759389889003532/960760856675749948/unknown.png
[09:10:40] <FromDiscord> <aph> 😢
[09:10:58] <FromDiscord> <Elegantbeef> Compiler errors are more helpful
[09:11:47] <FromDiscord> <aph> it has no issues compiling though lol
[09:11:57] <FromDiscord> <Elegantbeef> Ah
[09:12:36] <FromDiscord> <Elegantbeef> What does the extension say?
[09:13:04] <FromDiscord> <aph> spams: `undeclared field: '...'`
[09:13:18] <FromDiscord> <Elegantbeef> Odd
[09:14:30] <FromDiscord> <aph> oh nvm
[09:14:38] <FromDiscord> <aph> i was compiling the wrong files
[09:14:42] <FromDiscord> <aph> heh
[09:14:45] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:14:51] <FromDiscord> <aph> i forgot to add that little star after attributes
[09:22:30] <FromDiscord> <spoon> ye, i use coderunner and end up wasting time compiling code that does nothing
[09:22:31] *** Joins: yoyojambo (~yoyojambo@2806:108e:18:3670:2995:82d1:ef5a:4cc)
[09:23:06] <FromDiscord> <spoon> pretty sure theres a way to configure coderunner in workspaces and get it to use nimble
[09:24:17] *** Quits: yiggityswaps (~yoyojambo@2806:108e:18:3670:2995:82d1:ef5a:4cc) (Ping timeout: 248 seconds)
[09:26:12] <FromDiscord> <huantian> coderunner? Why not just vscode launch profiles
[09:29:52] <FromDiscord> <spoon> because i dont know how to use computers
[09:30:10] <FromDiscord> <Elegantbeef> Does anyone really?
[09:31:04] <FromDiscord> <Rika> Especially you beef
[09:31:30] <FromDiscord> <Elegantbeef> Always encouraging me to be a better person, see isnt rika a nice person
[09:32:20] <FromDiscord> <Rika> I’m betting a tonne of newbies absolutely hate me now lol
[09:33:02] <FromDiscord> <Elegantbeef> if they dont get banter, uhh how will they last here
[09:34:30] <FromDiscord> <Rika> Hard to tell what’s banter and what’s argument when you’ve just joined
[09:56:49] *** Quits: yoyojambo (~yoyojambo@2806:108e:18:3670:2995:82d1:ef5a:4cc) (Ping timeout: 248 seconds)
[10:54:16] *** Joins: fowl2 (~fowlmouth@user/fowl)
[10:55:53] *** Quits: fowl (~fowlmouth@user/fowl) (Ping timeout: 246 seconds)
[10:55:53] *** fowl2 is now known as fowl
[11:28:24] *** Joins: PMunch (~PMunch@user/pmunch)
[11:31:40] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[11:36:01] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 248 seconds)
[11:41:21] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[11:46:19] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[11:56:14] *** Joins: koltrast_ (~koltrast@h77-53-57-114.cust.a3fiber.se)
[11:56:26] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (Ping timeout: 246 seconds)
[12:02:32] <FromDiscord> <aph> sent a code paste, see https://paste.rs/SvC
[12:02:37] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[12:11:49] *** Quits: koltrast_ (~koltrast@h77-53-57-114.cust.a3fiber.se) (Ping timeout: 240 seconds)
[12:20:26] <FromDiscord> <demotomohiro> @aph https://nim-lang.org/docs/iterators.html#fieldPairs.i%2CS%2CT
[12:20:39] <FromDiscord> <aph> In reply to @demotomohiro "<@611418694245154847> https://nim-lang.org/docs/ite": thanks!
[12:21:13] <FromDiscord> <aph> i need to spend some time in the docs from now on!
[12:21:41] <FromDiscord> <Elegantbeef> There's a lot there so take a weekend 😛
[12:22:00] <FromDiscord> <aph> heh might take me a month
[12:22:08] <FromDiscord> <aph> i still haven't finished the tutorials in the web
[12:22:53] <FromDiscord> <demotomohiro> Or use this inside macro: https://nim-lang.org/docs/macros.html#getTypeImpl%2CNimNode
[12:23:36] <FromDiscord> <aph> thanks 2x!
[12:24:45] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[12:36:19] <PMunch> @Phil, sorry I didn't respond yesterday. That sounds similar to what I want to do, but I want to do it statically with types instead of passing procedures around
[12:36:33] <FromDiscord> <jmgomez> can nim derive a class defined in cpp?
[12:37:20] <PMunch> Essentially if you take a type User in your route then you need to define a proc that takes a request and returns a User object somewhere.
[12:37:33] <PMunch> @jmgomez, I think so
[12:38:45] <FromDiscord> <Elegantbeef> What are you guys talking about pmunch?
[12:38:56] <PMunch> @Elegantbeef, who?
[12:39:10] <FromDiscord> <Elegantbeef> About what you'd do
[12:39:16] <PMunch> Phil and I?
[12:39:21] <FromDiscord> <Elegantbeef> Yes
[12:39:29] <PMunch> Ah, web frameworks
[12:39:52] <PMunch> He wants something Django-esque, and I want something with type-safe routes
[12:40:34] <FromDiscord> <Phil> In reply to @PMunch "<@180601887916163073>, sorry I didn't": Currently at work, but once I'm off I'd love to chat a bit around your idea, because I can only imagine that through passing procs around
[12:40:49] <FromDiscord> <Phil> Tomorrow some time? Today my day is super packed
[12:40:59] <PMunch> I'm also at work :P
[12:41:15] <FromDiscord> <Elegantbeef> Typesafe routes that means less than you'd imagine to me
[12:41:21] <FromDiscord> <Phil> Yeh, but I can't do deep thinking an pseudo-pay-attention to meetings at the same time
[12:41:24] <PMunch> But I'm available most of the day (at least now that my ankle is f-ed)
[12:41:39] <FromDiscord> <Phil> And payment processes
[12:41:41] <FromDiscord> <Phil> Fuck payment processes
[12:41:44] <FromDiscord> <Phil> They're the worst
[12:41:47] <PMunch> I'm lucky enough to not have a lot of meetings :P
[12:41:58] <PMunch> What do you work with?
[12:41:58] <FromDiscord> <Phil> If payment processes were a programming language they'd make brainfuck look easy
[12:42:08] <PMunch> Haha :P
[12:42:45] <PMunch> Not even sure what you mean by payment processes, but the little experience I have with finance-related stuff I wholehearthedly agree that it all seems like a massive clusterfuck
[12:42:54] <FromDiscord> <Phil> Subscription based service, but it's only kinda subscription based.↵You buy a yearly membership but it's sold to you like a monthly one with minimum contract duration of a year that can auto-renew after the year
[12:43:28] <FromDiscord> <Phil> And when you're in the auto-renewal state the conditions to which you can quit the contract are fundamentally different than during the initial yearly membership in so many ways it's ridiculous
[12:44:03] <PMunch> Sounds like a lot of fun to implement /s
[12:44:34] <FromDiscord> <Phil> We don't even fully understand what we need to implement because we're the people designing the process in the first place as well while in meetings with finance people
[12:44:56] <PMunch> I got so annoyed the other day, I wanted to cancel a service, and according to the website the only way to cancel it was to call them. But their phones where swamped so I couldn't get through..
[12:46:24] <FromDiscord> <Phil> Though to be more nim specific
[12:46:44] <FromDiscord> <Phil> I think what Pmunch meant with type safe routes was, yknow, in a webapplication every URL is associated with a proc
[12:46:45] <FromDiscord> <jmgomez> In reply to @PMunch "<@726017160115126333>, I think so": do you know how? the compiler it's telling me that it must inherit from RootOfObj not sure if Im doing something wrong though
[12:46:56] <FromDiscord> <jmgomez> sent a code paste, see https://play.nim-lang.org/#ix=
[12:47:15] <FromDiscord> <Elegantbeef> mark your `TestCppNim` with `{.inheritable, pure.}`
[12:48:36] <FromDiscord> <Phil> And if you have a parameter in your url the proc that handles requests to that URL should receive the parameters and only these parameters
[12:48:52] <FromDiscord> <Phil> And if it wants to have additional parameters that aren't in the URL then the compiler should scream
[12:48:56] <FromDiscord> <Elegantbeef> Ah so a parser/validator with procedures
[12:49:09] <FromDiscord> <Phil> Sort of, I want sth like that in prologue at least
[12:49:17] <FromDiscord> <Elegantbeef> Well the compiler wouldnt scream it just wouldnt work
[12:49:48] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3Umd
[12:50:24] <FromDiscord> <Phil> The main problem this has is that at compile time, I do not know that the handler proc created by `createReadByIdHandler` will only use the ID_PATTERN param
[12:51:04] <FromDiscord> <Phil> Like, it should be possible, I know the proc that will be used with that URL at compile time and I know the URL itself at compile time
[12:51:27] <FromDiscord> <Phil> But currently the created handler could be expecting a parameter "walumba" and it'd only explode at runtime
[12:51:43] <FromDiscord> <Phil> (edit) "But currently the created handler could be expecting a ... parameter" 03added "string/int/bool"
[12:52:32] <PMunch> I just don't like having to implement route-parsing logic in my route handler
[12:52:48] <FromDiscord> <Elegantbeef> Ah yea i'd be partial to `proc creatureRoute(a: int) {.route:"/creature/$i",.}`
[12:52:54] <PMunch> I also want to support headers and bodies though of course
[12:53:05] <PMunch> That's the idea @Elegantbeef :)
[12:53:09] <FromDiscord> <Phil> My main hope is that by understanding Pmunch's approach I could comprehend a possible solution
[12:53:28] <FromDiscord> <Elegantbeef> Well my nettyrpc does something similar just for network packets instead of routes
[12:53:39] <FromDiscord> <Elegantbeef> It's the same idea, i really should make that more pluggable to other areas
[12:54:31] <PMunch> But I'd do `proc creatureRoute(a: CreatureId) {.route:"/creature/$i".}` and then have a `proc to(req: Request, typedesc[CreatureId]): CreatureId` proc that is responsible for getting the CreatureId out of the route
[12:55:00] <FromDiscord> <Elegantbeef> Eh fuck that
[12:55:11] <FromDiscord> <Elegantbeef> `proc creatureRoute(a: CreatureId) {.route:"/creature/$a"}`
[12:55:57] <PMunch> Or I could just do `proc creatureRoute(a: Creature) {.route:"/creature/$i".}` and my `to` proc would grab the ID, look it up in the Creature table, and pass me the object. With all the not-found logic and such in the to proc and my route just dealing with proper requests
[12:56:19] <FromDiscord> <Elegantbeef> Ah i see i thought it was about parsing
[12:56:25] <FromDiscord> <Phil> How do you assure at compile time that it explodes if you do `proc creatureRoute(a: Creature, b: string) {.route:"/creature/$i".}` ?
[12:56:40] <FromDiscord> <Elegantbeef> you dont use b so it errors?
[12:56:45] <PMunch> Not really, it's about moving the logic of understanding requests out into separate procedures
[12:57:13] <FromDiscord> <Phil> Wait, no, I'm an idiot
[12:57:27] <FromDiscord> <Phil> I mixed two very separate issues because my mind is scrambled with too many complicated problems atm
[12:57:40] <PMunch> @Phil, well it wouldn't, as long as there is a `to(req: Request, b: typedesc[string]): string` procedure
[12:57:47] <FromDiscord> <Phil> One is having extensible handlers, this is completely separate from what I do above
[12:58:00] <FromDiscord> <Phil> That's what Pmunch and I were talking about regarding Django like stuff
[12:58:30] <FromDiscord> <Elegantbeef> I should just go to my hidey hole 😛
[12:58:52] <FromDiscord> <Elegantbeef> So pmunch you got 10000 stars on your project due to TMWN right? 😛
[12:58:54] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3Ume
[12:59:19] <FromDiscord> <Phil> Ignore all my crap about wanting compile time guarantees for url having the correct params for the handler
[12:59:32] <FromDiscord> <Phil> That's entirely separate from the conversation
[13:00:19] <PMunch> My idea is that the router would match the route to whatever comes in, then it will try to run all the `to` procs in try/catch blocks which returns nice errors (and potentially goes on to other routes), then if everything is able to be extracted from the current HTTP request then it will call the route body.
[13:00:21] <FromDiscord> <Phil> Somehow my brain jumped from "Pmunch has a thing with typesafe" to be a solution for the compile-time-guarantee problem rather than the Django-Like-extensible-Handler-Proc problem
[13:00:41] <FromDiscord> <xflywind> You can try adding a macro wrapping `addRoute`.
[13:00:50] <PMunch> Your route also just returns a single type, and it would be able to format this return type in different ways, similar to how autotemplates works
[13:00:53] <FromDiscord> <xflywind> sent a code paste, see https://play.nim-lang.org/#ix=3Umg
[13:01:39] <PMunch> @xflywind, yes that was my idea. Basically don't write my own web-framework, just a new router that can output either Prologue or Jester routes
[13:02:08] <FromDiscord> <Phil> Shit, macros, my weakpoint that I'm procrastinating on solving
[13:02:20] <FromDiscord> <Elegantbeef> Hey micros is progressing
[13:02:43] <PMunch> @Phil don't worry about it, macros are basically dark magic, not a lot of people master them :P
[13:03:30] <PMunch> @Elegantbeef, oh wow, just checked futhark and it has indeed gotten a nice boost in stars
[13:03:34] <FromDiscord> <Elegantbeef> Micros makes life a bit easier, just have to continue abstracting code
[13:04:05] <PMunch> https://star-history.com/#PMunch/futhark&Date
[13:04:13] <FromDiscord> <jmgomez> When importing types you can specify a raw pointer or the actual type, at least in clang in windows if you specify the raw pointer you cant inherit. Is there a way in nim to get a pointer of a type that's compatible with cpp raw pointers?
[13:04:18] <FromDiscord> <Phil> I'm at a point where I think a solid 40-50% of my code is generics
[13:04:32] <FromDiscord> <Phil> I'm getting to that "continue to abstract"
[13:04:48] <FromDiscord> <Elegantbeef> I've never dealt with C++ much but you can try `byref`
[13:05:00] <FromDiscord> <Elegantbeef> Good generic code is reusable code 🙂
[13:06:00] <PMunch> @Elegantbeef, so apparently the Gnome gitlab is back up
[13:06:12] <FromDiscord> <Elegantbeef> https://github.com/beef331/micros/blob/master/tests/test1.nim#L38-L50 cmon phil you can clearly read this
[13:06:21] <FromDiscord> <Elegantbeef> Yea pmunch i found a bundler so i got dynamic building working
[13:06:24] <PMunch> I remember I was trying to install something to try to build something for you, but I don't remember what it was I was trying to build :P
[13:06:31] <PMunch> Ah right
[13:06:50] <FromDiscord> <Elegantbeef> 50MB package for 30 loc
[13:07:11] <FromDiscord> <Elegantbeef> GTK dynamic is a fucking joke for windows 😛
[13:07:44] <PMunch> Haha, yeah I remember doing something like that
[13:08:02] <FromDiscord> <Elegantbeef> No clue how small static is
[13:08:08] <FromDiscord> <Elegantbeef> Probably much much smaller
[13:08:49] <PMunch> A short Python script, couple hundred lines, and I needed to bundle it for Windows. Had to bundle in a standalone Python thing, and standalone Gtk stuff. Hundreds of files and plenty of megabytes to run some super simple logic.
[13:09:10] <FromDiscord> <Phil> Okay, g2g, need full attention on payment processes
[13:09:25] <PMunch> Well I guess with static you'd only be shipping parts of Gtk and not the whole thing
[13:09:33] <FromDiscord> <Elegantbeef> Yea
[13:09:39] <FromDiscord> <Elegantbeef> Compiler strips a ton of code
[13:09:48] <FromDiscord> <Elegantbeef> You only ship what you use type deal
[13:10:13] <FromDiscord> <Elegantbeef> Only issue is have 0 intent on testing since debian doesnt ship the libraries
[13:10:25] <FromDiscord> <Elegantbeef> Prebuild dynamic and static would be nice, but dont exist
[13:10:30] <FromDiscord> <Elegantbeef> Not even on third party repos
[13:10:42] <FromDiscord> <Elegantbeef> Debian using programmers are like "What's mingw-gtk"
[13:15:56] <FromDiscord> <jmgomez> In reply to @Elegantbeef "I've never dealt with": you prefix the type with ref? or using something else? If the former, how it differs from ptr? Also how can you dereference it?
[13:16:22] <FromDiscord> <Elegantbeef> `type MyType {.byref, pure  inheritable ,... }`
[13:16:27] <FromDiscord> <jmgomez> ohh
[13:16:32] <FromDiscord> <jmgomez> thanks!
[13:16:39] <FromDiscord> <Elegantbeef> `byref` pases it by reference to procedures
[13:16:46] <FromDiscord> <Elegantbeef> It might not be what you want i guess
[13:16:58] <FromDiscord> <Elegantbeef> Like i said have never touched C++ interop so no clue what's required
[13:17:14] <FromDiscord> <jmgomez> Not sure, Im just evaluating options. Im glad that's an option because otherwise too many copies
[13:17:34] <FromDiscord> <Elegantbeef> Eh Nim passes by ref when it should for performance anyway
[13:18:27] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/La2
[13:18:36] <FromDiscord> <jmgomez> I mean when doing interop with cpp
[13:18:44] <FromDiscord> <Elegantbeef> Or i guess `MyCppType = ptr MyCppType`
[13:18:53] <FromDiscord> <Elegantbeef> `MyCppType = ptr object`
[13:19:18] <FromDiscord> <Elegantbeef> I'm mostly speaking out my arse, so dont hold me accountable if any of this doesnt work
[13:19:36] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (Ping timeout: 268 seconds)
[13:19:40] <FromDiscord> <jmgomez> Okay, I appreciate it. Do you know how to travel from Object to Ptr and back?
[13:19:55] <FromDiscord> <Elegantbeef> `[]` to dereference and `addr` to get the address
[13:22:52] <FromDiscord> <jmgomez> addr got working but where the [] supposed to be? doesnt seem to work as prefix
[13:23:00] <FromDiscord> <Elegantbeef> postfix
[13:23:24] <FromDiscord> <jmgomez> ohh a bit odd but that works!
[13:23:39] <FromDiscord> <Elegantbeef> Eh it's consistent imo
[13:23:56] <FromDiscord> <Elegantbeef> array indexing is pointer dereferencing, sequence dereferencing is you guessed it a form of pointer dereferencing 😛
[13:24:13] <FromDiscord> <jmgomez> that's true
[13:24:21] <FromDiscord> <Elegantbeef> It's better than `` i think
[13:24:36] <FromDiscord> <Elegantbeef> though nim is nothing if not extensible so could always have a `deref(a)`
[13:24:54] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[13:25:03] <FromDiscord> <jmgomez> maybe it is, but I and assume most people are used to it
[13:25:15] <FromDiscord> <jmgomez> yeah, that's the second major selling point of nim
[13:25:31] <FromDiscord> <Elegantbeef> Hey if you came from pascal you'd expect `^`
[13:27:16] <FromDiscord> <jmgomez> unrelated question, when doing FFI in other langs (i.e. rust) you have to call the deallocator in the lang that did the allocation. I assume in nim, as long as you use it in the same lang as target, it isnt the case?
[13:27:54] <FromDiscord> <Elegantbeef> Uhh no clue like i said I havent interoped with C++
[13:27:59] <FromDiscord> <Elegantbeef> I imagine you dont
[13:28:19] <FromDiscord> <Elegantbeef> C you very much dont have automatic memory management and JS is well GC'd
[13:28:39] <FromDiscord> <jmgomez> 👍
[13:28:47] <FromDiscord> <ShalokShalom (ShalokShalom)> > unrelated question, when doing FFI in other langs (i.e. rust) you have to call the deallocator in the lang that did the allocation. I assume in nim, as long as you use it in the same lang as target, it isnt the case?↵If you are looking for a language to interop with Rust, I recommend you to look for Gluon.
[13:28:57] <FromDiscord> <Elegantbeef> That's not what they asked
[13:29:15] <FromDiscord> <Elegantbeef> Nim does have destructors if that isnt the case you can map to the proper ones if need be
[13:29:36] <FromDiscord> <ShalokShalom (ShalokShalom)> You can call Rust functions natively https://github.com/gluon-lang/gluon#gluon=
[13:29:41] <FromDiscord> <jmgomez> Thank but nope, Im looking at lang to interop with Cpp. Rust does not does a good job there
[13:29:48] <FromDiscord> <jmgomez> (it does with c though)
[13:29:58] <FromDiscord> <Elegantbeef> D and Nim are like the only ones that do C++ interop
[13:30:08] <FromDiscord> <ShalokShalom (ShalokShalom)> Ah, I see.
[13:30:18] <FromDiscord> <ShalokShalom (ShalokShalom)> Lua? 😛
[13:30:44] <FromDiscord> <Elegantbeef> We'll say sure but that's not a system language so you're getting a D
[13:30:47] <FromDiscord> <ShalokShalom (ShalokShalom)> Yeah, I think Nim is great for that use case.
[13:31:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:32:26] <FromDiscord> <jmgomez> I think so! Just evaluating it so far. One concern though is on the headers files that I will need to include in the cpp side, didnt reach that point yet. But for consuming cpp is crazy good so far
[13:33:00] <PMunch> At some point I hope to add C++ support to Futhark
[13:33:13] <FromDiscord> <Elegantbeef> What a brave soul
[13:33:40] <NimEventer> New thread by JPLRouge: Impure libraries ???, see https://forum.nim-lang.org/t/9074
[13:34:21] <FromDiscord> <lily & violet> Hi. I'm having trouble passing flags to `nim` from `nimble`, is there a way to do it without having to call manually `nim`?
[13:34:32] <FromDiscord> <Elegantbeef> make a config.nims
[13:34:33] <FromDiscord> <jmgomez> In reply to @PMunch "At some point I": didnt know about Futhark, seems really good
[13:35:21] <FromDiscord> <lily & violet> In reply to @Elegantbeef "make a config.nims": How am I supposed to use it for my case?
[13:35:29] <FromDiscord> <Elegantbeef> What do you mean?
[13:35:37] *** Joins: ltriant_ (~ltriant@27-32-158-208.tpgi.com.au)
[13:35:47] <FromDiscord> <lily & violet> Where do I put the file, and what do I put in it? :o
[13:35:53] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/6vG
[13:36:01] <FromDiscord> <Elegantbeef> Put it next to your `.nimble`
[13:36:08] <FromDiscord> <lily & violet> Okay
[13:36:28] <FromDiscord> <Elegantbeef> long form command line arguments will work int
[13:36:52] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 268 seconds)
[13:37:37] <FromDiscord> <lily & violet> Running `nimble run` doesn't change the `nim` invocation tho
[13:37:50] <FromDiscord> <lily & violet> even with `config.nims` right beside the .nimble file
[13:37:53] <PMunch> @jmgomez, it's fantastic, I've wrapped multiple libraries with it and for most of them it just works
[13:38:25] <FromDiscord> <Elegantbeef> it should run with the arguments iin the nims file
[13:39:01] <FromDiscord> <Elegantbeef> What does your config look like
[13:39:20] <FromDiscord> <lily & violet> sent a code paste, see https://play.nim-lang.org/#ix=3Umy
[13:40:27] <FromDiscord> <Solitude> place config.nims in the same directory as your main nim file.
[13:40:55] <FromDiscord> <Elegantbeef> I guess with a weird structure it can be at the root?
[13:41:02] <FromDiscord> <lily & violet> those two flags still doesn't show up
[13:41:16] <FromDiscord> <Elegantbeef> can't\
[13:41:37] <FromDiscord> <lily & violet> My folder structure is the default one after calling nimble init tho
[13:42:15] <FromDiscord> <Elegantbeef> Odd
[13:43:15] <FromDiscord> <Elegantbeef> Full output of `nimble run --verbose`?
[13:44:10] <FromDiscord> <lily & violet> :NLRfacepalmpicard:
[13:44:14] <FromDiscord> <lily & violet> It works
[13:44:24] <FromDiscord> <lily & violet> The flags are just not added to the command line apparently
[13:44:43] <FromDiscord> <lily & violet> Thanks for the help
[13:45:36] <FromDiscord> <Elegantbeef> No problem
[13:50:32] <FromDiscord> <jmgomez> can nim generate a cpp library (not c, but cpp, so no extern)
[13:50:39] <FromDiscord> <jmgomez> (edit) "extern)" => "extern)?"
[13:51:00] <FromDiscord> <Elegantbeef> I dont think so
[13:52:04] <FromDiscord> <jmgomez> so you can only embed it into a cpp either by the C library path or by adding the generated cpp (files which arent supposed to be used)?
[13:52:29] <FromDiscord> <Elegantbeef> I believe so, i could be wrong
[13:52:49] <FromDiscord> <Elegantbeef> You could do something like genny and emit C++ headers i think
[13:54:24] <FromDiscord> <jmgomez> ok, will check it out
[13:55:19] <FromDiscord> <Elegantbeef> There's also the forum which will probably get more concrete answers
[13:56:10] <FromDiscord> <Elegantbeef> I mention it as i'm going to sleep now 😛
[13:56:41] <FromDiscord> <jmgomez> hahah thanks!
[14:04:10] <FromDiscord> <lily & violet> I'm using VSCode with the Nim extension (v0.6.6, by Konstantin Zaitsev). Is it normal if i'm not getting any autocompletion from 3rd party packages?
[14:04:43] <FromDiscord> <lily & violet> It apparently uses NimSuggest
[14:09:45] <FromDiscord> <Solitude> anything wrong happening with nimsuggest is normal, but you could also try another extension by saem
[14:11:00] <FromDiscord> <lily & violet> Yes okay, thanks
[14:11:45] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 248 seconds)
[14:51:19] <FromDiscord> <TryAngle> hello,↵is there a function to read memory of a process?
[14:57:58] <FromDiscord> <Zoom> This gets Cringe of the Day award↵(@ShalokShalom)
[14:59:04] <PMunch> @TryAngle, probably have to call some C procedure to do that
[15:00:37] <FromDiscord> <TryAngle> In reply to @PMunch "<@147447489316913152>, probably have to": 🥲
[15:00:54] <FromDiscord> <TryAngle> alright, I also looked through winim and coulnd't find memoryapi or this specific function there
[15:02:10] <FromDiscord> <Zoom> @TryAngle\: https://github.com/khchen/winim/blob/b7b32603f4ef672bc34405bc6200e8aab2c366b1/winim/inc/winbase.nim#L1871
[15:02:33] <FromDiscord> <TryAngle> In reply to @Zoom "<@147447489316913152>\: https://github.com/khchen/w": 🥺 ↵omg thank u
[15:02:43] <FromDiscord> <TryAngle> how did u find it?
[15:02:53] <FromDiscord> <TryAngle> github search functionality never works for me
[15:03:02] <FromDiscord> <TryAngle> (edit) "github search functionality never works for me ... " 03added "😐"
[15:04:29] <FromDiscord> <Zoom> I used human-assisted search.
[15:14:27] <FromDiscord> <aph> ~~meanwhile discord:~~ https://media.discordapp.net/attachments/371759389889003532/960852411390525490/unknown.png
[15:14:32] <FromDiscord> <aph> lol
[15:15:10] <FromDiscord> <Rika> Here we go again
[15:24:04] <PMunch> @Rika, haha I think they just found it funny that someone with the bot tag said they used human-assisted search
[15:24:19] <PMunch> But yeah, I wish we could add some kind of disclaimer for Discord users :P
[15:27:00] <FromDiscord> <Zoom> That was insulting. I'm not on Discord.↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[15:27:32] <PMunch> @Zoom, no I meant @aph, who appears to be on Discord
[15:27:51] <PMunch> A lot of Discord users come in here and complains that they only get answers from bots :P
[15:28:37] <PMunch> Hmm, I'm trying to wrap a nice wrapper for Coap
[15:28:46] <FromDiscord> <Zoom> Ah, sorry.  My jokes rarely fly due to me being not-quite-sharp...
[15:29:23] <PMunch> The coap library requires you to call `coap_startup()` and then later you do `var ctx = coap_new_context()`
[15:29:41] <FromDiscord> <Zoom> So, what syntax would you guys use to take a set of key-value pairs as a program argument? Please, don't say "use a config file".
[15:30:17] <PMunch> Now `coap_startup()` has a simply check to see if it has already been started, so I'm considering to just throw it into my `newContext` procedure as it would likely only be called once anyways
[15:30:20] <PMunch> Thoughts?
[15:30:42] <PMunch> The problem is that you also have coap_cleanup..
[15:31:02] <PMunch> And calling that from the context destructor might mess things up..
[15:32:48] <FromDiscord> <Rika> In reply to @Zoom "So, what syntax would": “Use a config file”
[15:33:04] <FromDiscord> <Rika> I mean what else would you want
[15:33:20] <FromDiscord> <Rika> If you want to take in command line arguments you can go to the simplicity of key=value
[15:33:29] <FromDiscord> <Rika> Or environment variables
[15:33:38] <FromDiscord> <Rika> If you’re extra caveman
[15:35:09] <PMunch> Oh huh, the coap_new_context actually calls the coap_startup thing itself..
[15:40:17] <FromDiscord> <TryAngle> I'm having huge issues with c libraries 😭↵I'm on windows↵I use nimgui, a dear Imgui wrapper library that uses c imgui
[15:40:30] <FromDiscord> <TryAngle> (edit) "nimgui," => "nimgl/imgui,"
[15:40:48] <FromDiscord> <TryAngle> i'm getting the error: `could not load: cimgui.dll`
[15:42:18] <FromDiscord> <TryAngle> here is the definition of cimgui in that project https://github.com/nimgl/imgui/tree/master/src/imgui/private
[15:42:41] <FromDiscord> <TryAngle> but how would I make this work 🥺 I have 0 clue
[15:47:25] <FromDiscord> <Rika> Get the dll and put it by the binary
[15:48:28] <PMunch> @TryAngle, switch to an OS with proper library handling
[15:48:41] <PMunch> Or just put the DLL in the same folder as the binary
[15:49:07] <PMunch> Although I highly recommend the first option, slightly painful to begin with, but so worth it
[15:52:37] <FromDiscord> <Rika> Doubt it’s in his control
[16:04:37] <FromDiscord> <TryAngle> In reply to @PMunch "<@147447489316913152>, switch to an": I want, I'm already expereinced with linux↵but I play video games that are not available on linux 😦↵so I waint until I have a second gpu so I can passthrough
[16:05:50] <FromDiscord> <Solitude> In reply to @PMunch "<@147447489316913152>, switch to an": you are lucky araq is not in this chat
[16:07:06] <PMunch> @TryAngle, you should give it a try with Proton, it's surprisingly good. I was able to play Elden Ring the same week it came out
[16:07:22] <PMunch> @Solitude, haha I'd be banned for hate speech
[16:13:26] <FromDiscord> <TryAngle> In reply to @PMunch "<@147447489316913152>, you should give": league of legends 😦
[16:14:07] <PMunch> Haven't tried it
[16:14:35] <FromDiscord> <Solitude> man, league works perfectly fine on linux
[16:15:45] <FromDiscord> <TryAngle> In reply to @Solitude "man, league works perfectly": 😳
[16:15:47] <FromDiscord> <TryAngle> how ?
[16:15:48] <FromDiscord> <TryAngle> lol
[16:16:08] <FromDiscord> <TryAngle> Wine?
[16:31:06] <FromDiscord> <Zoom> I am and proudly so.↵I'll go with `--arg=a:1,b:foo,c:42`↵(@Rika)
[16:33:38] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (Ping timeout: 260 seconds)
[16:36:26] *** Joins: zeus-supreme (~tt@82-132-214-112.dab.02.net)
[16:38:14] <FromDiscord> <jmgomez> hey guys, In mac it seems to work fine but in windows there is no intellisense? Any idea of what can be going on? https://media.discordapp.net/attachments/371759389889003532/960873496542593024/unknown.png
[16:39:21] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3Un2
[16:39:37] <FromDiscord> <Zoom> Please, if you think screenshots are necessary, at least crop them to the relevant bit. Thanks a lot.
[16:39:59] <FromDiscord> <jmgomez> Sure
[16:40:14] <FromDiscord> <Zoom> Len returns the bytes, basically, not the UTF runes↵(@hmmm)
[16:40:21] <FromDiscord> <hmmm> oh
[16:40:30] <FromDiscord> <hmmm> hmmm
[16:41:00] <FromDiscord> <hmmm> so the à bytes are doubly the fat of the q bytes?
[16:41:13] <FromDiscord> <enthus1ast> you can try to use https://nim-lang.org/docs/unicode.html#runeLen%2Cstring
[16:41:38] <FromDiscord> <hmmm> that's what I wanted! ty enthy
[16:41:42] <FromDiscord> <hmmm> and zoom
[16:44:26] <FromDiscord> <konsumlamm> note that `runeLen` is slower than `len`, as it has to iterate over the whole string
[16:45:13] <FromDiscord> <hmmm> noted
[16:48:16] <FromDiscord> <Zoom> !eval echo "qqqà".toSeq()↵(@hmmm)
[16:48:19] <NimBot> Compile failed: /usercode/in.nim(1, 13) Error: attempting to call undeclared routine: 'toSeq'
[16:49:48] <FromDiscord> <enthus1ast> @['q', 'q', 'q', '\\xC3', '\\xA0']
[16:50:53] <FromDiscord> <Zoom> Yeah, though prelude is imported by default
[16:56:05] <PMunch> @hmmm, UTF-8 is pretty neat. One byte can typically only hold 256 characters, but the unicode standard has 1,112,064 code points, so how does that work? Essentialy if the first bit of the character is 1 then it needs to read more bytes. You know how many bytes to read by the amount of 1's before the first 0. For two bytes the number starts with 110, for three it starts with 1110 and for four it starts with 11110. Then the following bytes all start with 10. The 
[16:56:05] <PMunch> rest of the bits are the data used for the character.
[16:56:48] <FromDiscord> <Zoom> @hmmm\: read this https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/
[16:57:12] <FromDiscord> <Zoom> and Rust had a nice chapter on UTF strings. Just skip the part about slicing and all
[16:57:17] <PMunch> This of course means that in order to read the length of a UTF-8 string you need to iterate over the entire string character by character and decide how many characters to not count.
[16:58:04] <FromDiscord> <hmmm> or use runelen that does that for you right? 🤔
[16:58:17] <PMunch> Yes, that is what runeLen does
[16:58:59] <FromDiscord> <Zoom> https://doc.rust-lang.org/book/ch08-02-strings.html#internal-representation - Rust's string is basically a seq of Runes, not a seq of Chars, like Nim's string.
[16:59:35] <FromDiscord> <hmmm> so it's fatter but it's len and runelen are the same thing?
[17:00:31] <FromDiscord> <enthus1ast> the (byte) len is already stored in a nim string and can therefore just returned, the runelen must be computed for the call
[17:01:02] <FromDiscord> <hmmm> oh that's cool I didn't know a string had len built in
[17:01:02] <FromDiscord> <Zoom> It's not fatter, it just more abstract and doesn't support treating itself like a plain sequence every time.↵(@hmmm)
[17:01:23] <FromDiscord> <Rika> There’s no reason you can’t make a string that’s Unicode by default and stores the rune length internally, no one has done it is all
[17:01:23] <FromDiscord> <enthus1ast> len and \\0
[17:01:33] <FromDiscord> <enthus1ast> like if pascal and c had a baby
[17:01:37] <FromDiscord> <Zoom> That's because Nim's string is currently just a seq, and seq has a length as a field↵(@hmmm)
[17:01:43] <PMunch> Of course it gets a bit more complicated than that if you need to know things like how many glyphs will be displayed, because unicode also has what's called a zero-width joiner. This is how it supports emojis with multiple people and interactions. Skin colour for emoji is another thing that counts as another code-point but doesn't take up a glyph of its own.
[17:02:21] <FromDiscord> <Zoom> Programming sucks - even strings are hard. /s
[17:02:53] <FromDiscord> <enthus1ast> languages are hard
[17:02:59] <FromDiscord> <enthus1ast> human interaction
[17:03:53] <FromDiscord> <Rika> Abolish all languages
[17:04:03] <FromDiscord> <Rika> Go back to never interacting with each other
[17:05:05] <FromDiscord> <lpha3ch0> sent a code paste, see https://play.nim-lang.org/#ix=3Un7
[17:05:34] <FromDiscord> <lpha3ch0> I'm guessing that malicious actors are using wAuto for malware.
[17:06:36] <FromDiscord> <Rika> Wouldn’t be surprised
[17:08:02] <PMunch> @lpha3ch0, please report these as false positives to the antivirus vendor. That's the only way this will eventually get better
[17:08:54] <PMunch> Malicious actors are using Nim for malware, and honestly I don't even blame them, it's a very good fit for malware. But it means that most antivirus vendors have started to aggressively fingerprint almost everything written in Nim as a virus..
[17:12:43] <FromDiscord> <Phil> Out of curiosity. I've heard of "null-terminated strings". What are the actually used alternatives to those?
[17:13:02] <FromDiscord> <Phil> non-terminated strings?
[17:14:55] <PMunch> @Phil, well length delimited characters are the most common alternative
[17:15:28] <FromDiscord> <Solitude> In reply to @lpha3ch0 "It's getting harder and": delete windose
[17:15:37] <FromDiscord> <Recruit_main707> In reply to @PMunch "Malicious actors are using": Any low-as-c level language is just as good for malware isn't it?↵The reason they go for niche languages is they are relatively unused
[17:15:49] <PMunch> The DNS protocol for example stores play.nim-lang.org as `<4>play<8>nim-lang<3>org`
[17:16:32] <FromDiscord> <Phil> Hmmm interesting, so null-terminated strings save you a byte on storing a length
[17:16:52] <FromDiscord> <Rika> not really
[17:16:52] <FromDiscord> <Phil> And I guess are more flexible because you can just move the null-terminator back
[17:16:58] <FromDiscord> <Rika> since theres the null terminator byte 🙂
[17:17:08] <FromDiscord> <Phil> Ah, fair,hmm
[17:17:24] <PMunch> @Phil, and Nim of course stores the length of a string as well as null terminating. The .len operator in Nim just returns the length of the string (and can contain more null characters), but the null termination is kept in place to make .cstring essentially just be a dereference operation (otherwise the string would need to be copied over to a 1 byte larger memory region with an extra null byte).
[17:17:42] <FromDiscord> <Solitude> In reply to @Isofruit "And I guess are": thats just as flexible as decrementing length field
[17:18:25] <PMunch> Null terminated strings made a lot of sense back when memory was super scarce and storing a 16 or 32 bit length for each string was seen as too much waste
[17:19:04] <FromDiscord> <Phil> I assume C has both types of strings?
[17:19:07] <PMunch> It also makes a lot of sense with how arrays in C work
[17:19:10] <FromDiscord> <Rika> they make sense if your strings were under 256 character length lol otherwise just use a byte for the length man...
[17:19:15] <PMunch> Nope, C doesn't really have a string type
[17:19:17] <FromDiscord> <Rika> In reply to @Isofruit "I assume C has": yes
[17:19:19] <FromDiscord> <Rika> technically
[17:19:23] <FromDiscord> <Rika> in common use yes
[17:19:40] <PMunch> It uses a pointer to a character as a string, and then the convention is to read until it finds a null byte.
[17:20:16] <PMunch> But since this can be very insecure it is common to have a length field as part of the signature of any function which uses a string argument
[17:20:37] <PMunch> But it doesn't have one common length-delimited string type
[17:24:21] <FromDiscord> <federico3> "it" being C? I know
[17:24:50] <FromDiscord> <lpha3ch0> In reply to @Solitude "delete windose": I tried to delete Windows, but my laptop hardware is very new and I couldn't get everything working on Linux even after spending days tweaking everything. The last straw before switching back to Windows was my wireless connection would randomly stop working while still showing connected. I would have to disable and reenable wifi to resume working.
[17:30:10] <FromDiscord> <Zoom> There was a time when you could just swap that wifi card for one with working drivers. I suppose now it's all soldered in.
[17:30:42] <PMunch> That's the scariest thing about buying a laptop nowadays
[17:30:58] <PMunch> Trying to find one that works well with Linux without being able to test it out first
[17:31:18] <FromDiscord> <Rika> lenovo has laptops that ship with linux lol
[17:31:31] <FromDiscord> <enthus1ast> the one i sent is a linux notebook manufacturer
[17:31:41] <FromDiscord> <enthus1ast> tuxedocomputers.com
[17:32:47] <PMunch> @Rika, which is why my laptop is a Thinkbook
[17:32:57] <PMunch> @enthus1ast, I assumed as much when I saw that name :P
[17:33:05] <FromDiscord> <lpha3ch0> Thinkbooks and System76 are usually a good bet for Linux compatibility.
[17:33:20] <FromDiscord> <Rika> ive a thinkpad but i dont have linux on it... yet
[17:33:21] <FromDiscord> <lpha3ch0> But in my case I had to take what I was issued for the work laptop.
[17:33:39] <FromDiscord> <lpha3ch0> ... even if I was allowed to reimage with whatever I wanted.
[17:33:53] <PMunch> Of course I also use Dvorak, so the Thinkpad track-nub is a bit of a nuisance..
[17:34:08] <PMunch> @lpha3ch0, you ask for permission?
[17:35:30] <FromDiscord> <Zoom> Well, if it's free for you and the only issue is wifi, I'd just used a dongle.↵(@lpha3ch0)
[17:36:11] <FromDiscord> <lpha3ch0> In reply to @PMunch "<@275045322705862656>, you ask for": No
[17:37:10] <FromDiscord> <enthus1ast> I would love to have a Lenovo T60 with modern hardware
[17:37:37] <FromDiscord> <enthus1ast> best overall machines i've used so far
[17:38:42] <FromDiscord> <enthus1ast> but lenovo lost my trust with their strange "press down as hard as you can" touchpads
[17:39:20] <FromDiscord> <Phil> In reply to @lpha3ch0 "I tried to delete": Ohhh what's your wireless card? Intel? Or ... was the other one Realtek or sth?
[17:41:00] <PMunch> @enthus1ast, press down as hard as you can touchpads?
[17:41:47] <FromDiscord> <enthus1ast> they thought it would be a good idea to have a touchpad, that instead of "touching" you had to press like a big button
[17:42:19] <PMunch> Oh right, I actually kind of like that (on my T480s), gives a nice feedback
[17:42:24] <FromDiscord> <Phil> Work provided me a Thinkbook that came out... a year ago? 1.5? Something like that, ubuntu is doing surprisingly well on that one.↵Thus I'd be curious what hardware you have just so I can be aware which HW tends to have issues
[17:42:50] <FromDiscord> <TryAngle> In reply to @Rika "Get the dll and": hmmm to get the .dll I think I have to "make" the project
[17:43:02] <PMunch> The T480s works perfectly
[17:43:55] <FromDiscord> <enthus1ast> the drivers back then where so bad, they sometimes moved the mouse to the upper right corner and pressed the mouse button 3 times. (for example when you put your palm on it). Lost a bunch of work because of this bug.↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[17:44:51] <FromDiscord> <Vindaar> tapping on touchpads to click is the absolute worst imo
[17:44:59] <FromDiscord> <Vindaar> physical click all day
[17:45:12] <FromDiscord> <enthus1ast> gave me 3 Month "holidays"↵(@Vindaar)
[17:45:19] <FromDiscord> <enthus1ast> because of RSI syndrom
[17:46:43] <PMunch> TBH I mostly use the track-nub anyways
[17:46:49] <PMunch> Or just keyboard shortcuts
[17:50:20] <NimEventer> New thread by ErikWDev: Changing order of templates causes compilation error. Why in this case?, see https://forum.nim-lang.org/t/9075
[17:52:53] <FromDiscord> <Vindaar> In reply to @enthus1ast "gave me 3 Month": sorry to hear that, but that sounds like wrong tool for the job
[17:54:50] *** Joins: rockcavera (~rc@192.12.115.204)
[17:54:50] *** Quits: rockcavera (~rc@192.12.115.204) (Changing host)
[17:54:50] *** Joins: rockcavera (~rc@user/rockcavera)
[17:55:34] <FromDiscord> <enthus1ast> sure it was, but back then i had no other choice, lenovo was kfc standart
[17:55:36] <FromDiscord> <enthus1ast> had never heard about RSI before it hit me though \:)
[18:09:11] <FromDiscord> <TryAngle> anybody here knows how to compile libraries via make to .dll so nim can use them? 🥺
[18:09:20] <FromDiscord> <TryAngle> I'm too stupid to understand c ecosystem
[18:11:30] <PMunch> It all depends on what the Makefile contains
[18:12:22] <PMunch> The make program is just a way to run tasks laid out in a Makefile. And Makefiles themselves are essentially just a bunch of recipes to create files
[18:12:55] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[18:13:54] <FromDiscord> <TryAngle> https://github.com/nimgl/cimgui#compilation
[18:14:06] <FromDiscord> <TryAngle> I used GnuWin32 to compile it via make
[18:14:18] <FromDiscord> <TryAngle> (edit) "GnuWin32" => "GnuWin32's make" | 04removed "via make"
[18:14:35] <FromDiscord> <TryAngle> but I get this error: `could not load: cimgui.dll`
[18:14:55] <FromDiscord> <TryAngle>  https://media.discordapp.net/attachments/371759389889003532/960897827670724628/unknown.png
[18:18:42] <FromDiscord> <Rika> how do you run the exe
[18:18:51] <FromDiscord> <TryAngle> In reply to @Rika "how do you run": nimble run
[18:19:18] <FromDiscord> <Rika> can you try running the exe directly
[18:19:35] <FromDiscord> <TryAngle> same error
[18:19:54] <FromDiscord> <Anuke> I get the following error when attempting to compile the vscode-nim extension:↵> `elrpc.nim(6, 18) Error: cannot open file: nimsuggest/sexp`↵How do I install nimsuggest sources correctly? It's not a standard nimble package. Nim was installed through choosenim on my machine.
[18:20:15] <FromDiscord> <enthus1ast> has the dll the same bitwitdh?
[18:20:30] <FromDiscord> <enthus1ast> 32/64
[18:20:32] <FromDiscord> <enthus1ast> ?
[18:20:42] <FromDiscord> <TryAngle> In reply to @enthus1ast "has the dll the": how do I know that?
[18:20:55] <FromDiscord> <enthus1ast> i mean, you compiled both \:)
[18:22:14] <FromDiscord> <TryAngle> I literally have 0 clue 😭
[18:22:29] <FromDiscord> <TryAngle> I did ↵`make -IMGUI_STATIC` in cimgui directory and took the generated dll
[18:22:45] <PMunch> That's definitely not correct
[18:22:46] <FromDiscord> <TryAngle> on my nim project I do `nimble run`
[18:23:02] <PMunch> STATIC probably means it's meant for static linking
[18:23:14] <PMunch> The fact that that even produced a dll is a bit surprising
[18:23:36] <PMunch> @Anuke, nimble install compiler perhaps?
[18:23:53] <FromDiscord> <TryAngle> In reply to @PMunch "STATIC probably means it's": I thought that's what I have to do o_O
[18:24:03] <FromDiscord> <Rika> its not
[18:24:08] <FromDiscord> <Rika> dlls are for dynamic linking
[18:24:09] <FromDiscord> <Anuke> In reply to @PMunch "<@123539225919488000>, nimble install compiler": That worked, thanks.
[18:25:32] <FromDiscord> <TryAngle> In reply to @Rika "dlls are for dynamic": ok I just did only `make` took the dll and same error 😭
[18:26:32] <FromDiscord> <enthus1ast> 1. check if the dll hase same bittness like your nim app\:↵↵`file the.dll`↵`file the.exe`
[18:26:33] <FromDiscord> <Rika> did you make on mingw
[18:27:03] <FromDiscord> <TryAngle> In reply to @Rika "did you make on": http://gnuwin32.sourceforge.net/packages/make.htm↵I used this
[18:27:08] <FromDiscord> <enthus1ast> 2. check where your application searches the dll\:↵↵`strace the.exe`and look for open and or the dll name
[18:27:24] <FromDiscord> <Rika> can you use mingw instead
[18:28:55] <FromDiscord> <TryAngle> In reply to @enthus1ast "1. check if the": how do I do that o_O https://media.discordapp.net/attachments/371759389889003532/960901353436221500/unknown.png
[18:29:04] <FromDiscord> <TryAngle> In reply to @Rika "can you use mingw": I will look up that
[18:29:57] <FromDiscord> <enthus1ast> yes that looks good↵(@TryAngle)
[18:30:00] <FromDiscord> <TryAngle> In reply to @Rika "can you use mingw": what mingw do u use? do u even use windows for that?
[18:30:05] <FromDiscord> <enthus1ast> now try the strace
[18:30:09] <FromDiscord> <Rika> what do you mean "what mingw"
[18:30:27] <PMunch> Is there a particular reason why you're trying to use it as a DLL? I thought imgui was the kind of library you just compiled into your program
[18:30:28] <FromDiscord> <Rika> try what en is telling you first
[18:30:40] <FromDiscord> <Rika> cimgui is not
[18:30:44] <FromDiscord> <Rika> well
[18:30:45] <FromDiscord> <Rika> it can
[18:30:48] <FromDiscord> <TryAngle> In reply to @PMunch "Is there a particular": I want to use nimgl
[18:30:52] <FromDiscord> <Rika> i guess he didnt use it here tho
[18:31:30] <FromDiscord> <TryAngle> In reply to @TryAngle "I want to use": https://github.com/nimgl/nimgl/blob/master/examples/timgui.nim↵I try to run this example
[18:32:19] <FromDiscord> <TryAngle> In reply to @Rika "what do you mean": msys2, cygwin, mingw-w64 builds, llvm-mingw
[18:33:37] <FromDiscord> <TryAngle> In reply to @Rika "i guess he didnt": waht do you mean 🤔
[18:34:47] *** Joins: arkurious (~arkurious@user/arkurious)
[18:40:50] <FromDiscord> <enthus1ast> can you also post the output of`strace the.exe`↵?↵Then we know if the application at least pick up the dll
[18:42:58] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:43:46] <FromDiscord> <enthus1ast> should then look like this\:`--- Process 22032 loaded C:\Users\david\projects\nimSubmission\src\tmpls.dll at 0000000064c40000 `
[18:44:05] <FromDiscord> <TryAngle> In reply to @enthus1ast "can you also post": hmmm I tried strace on linux but it doesn't work 🤔
[18:44:54] <FromDiscord> <TryAngle>  https://media.discordapp.net/attachments/371759389889003532/960905374179942460/unknown.png
[18:45:34] <FromDiscord> <enthus1ast> is this msys?
[18:45:46] <FromDiscord> <TryAngle> In reply to @enthus1ast "is this msys?": i'm doing that command from wsl
[18:47:33] <FromDiscord> <enthus1ast> git for windows also ships with strace
[18:47:47] <FromDiscord> <enthus1ast> in a bash it must be\:↵↵strace ./your.exe
[18:48:02] <FromDiscord> <TryAngle> I don't have strace on windows
[18:48:21] <FromDiscord> <TryAngle> In reply to @enthus1ast "in a bash it": that woks though on wsl
[18:48:37] <FromDiscord> <enthus1ast> its harder to see though
[18:48:47] <FromDiscord> <enthus1ast> but you should see an open call to the dll
[18:49:36] <FromDiscord> <enthus1ast> or several tries, then you know where the exe is searching for the dll
[18:49:54] <FromDiscord> <TryAngle> sent a code paste, see https://paste.rs/aTi
[18:50:10] <FromDiscord> <enthus1ast> before this somewhere
[18:51:58] <FromDiscord> <TryAngle> In reply to @enthus1ast "before this somewhere": there is no other `cimgu`, `cimgui`, `dll`
[18:56:43] <FromDiscord> <enthus1ast> yes it seems the wsl strace does not work
[19:00:22] *** Quits: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[19:01:28] <FromDiscord> <TryAngle> anyways, thanks for trying to help me enthusiast rika and pmunch,↵but I seem to lack intelligence to work with anything c / c++ related↵I quit.
[19:02:15] <FromDiscord> <enthus1ast> or, get the strace from git 4 win (all the tools in this git distro, are worth it any way), the find out more \:)
[19:02:20] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[19:02:24] <FromDiscord> <enthus1ast> then
[19:08:23] <FromDiscord> <enthus1ast> i've tried wtrace from here\: https://github.com/lowleveldesign/wtrace/releases/tag/3.2-fix_chocolatey
[19:08:40] <FromDiscord> <enthus1ast> it outputs this for my test\:↵16\:37\:03.6621 server (31016.39280) FileIO/Create 'C\:\\Users\\david\\projects\\nimSubmission\\src\\tmpls.dll' disposition\: OPEN\_EXISTING, options\: 0x200000 -\> SUCCESS
[19:12:40] <FromDiscord> <tandy> https://github.com/tandy-1000/api-binding-template
[19:12:46] <FromDiscord> <tandy> if anyone needs to make API bindings in Nim...
[19:21:23] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[19:44:23] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 246 seconds)
[19:49:17] <Amun-Ra> tandy: I was expecting Tandy 1000 emulator somewhere in those repos ;>
[19:57:54] <FromDiscord> <tandy> lol
[19:58:06] <Amun-Ra> so dissapointed ;>
[19:58:19] <Amun-Ra> hmm, disappointed* ;>
[20:11:10] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[20:12:59] <FromDiscord> <jmgomez> hey guys, can you call a nims file from a nimble task?
[20:13:08] <FromDiscord> <jmgomez> (edit) "nims" => ".nims"
[20:13:33] *** Joins: PMunch (~PMunch@user/pmunch)
[20:13:47] <FromDiscord> <exelotl> you can by invoking `nim e`, for example: `selfExec "e myfile.nims"`
[20:14:28] <FromDiscord> <exelotl> it's a bit slow though since it has to start up another `nim` process (I think)
[20:15:03] <FromDiscord> <exelotl> or at least, the overhead of initialising the vm is high
[20:15:37] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:15:55] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[20:15:56] <FromDiscord> <exelotl> oh, as a _nimble_ task I'm not 100% certain but I think what I mentioned should still work
[20:16:36] <FromDiscord> <exelotl> alternatively, you could maybe `include` the file to run it in-place
[20:17:10] <FromDiscord> <jmgomez> okay, thanks!
[20:22:34] <PMunch> @exelotl, yes initialising the VM is a bit slow, but the execution is relatively quick. So if you want to run multiple things I'd recommend using something like nimscripter
[20:23:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b1a6:339e:65ca:f206)
[20:26:02] <FromDiscord> <exelotl> for my project I use the `include` approach so I can just run `nim build` and it executes a bunch of scripts without needing to spin up the VM for each one
[20:26:13] <FromDiscord> <exelotl> uhh here's where I posted about it: https://forum.nim-lang.org/t/8826#57556
[20:26:35] <FromDiscord> <Rika> https://fglt.nl/guides/visual-novels-on-gnu-linux.html
[20:26:38] <FromDiscord> <Rika> fuuuuuuck
[20:26:43] <FromDiscord> <Rika> wrong send 🙂
[20:34:42] *** Joins: zeus-supreme1 (~tt@82-132-214-161.dab.02.net)
[20:37:55] *** Quits: zeus-supreme (~tt@82-132-214-112.dab.02.net) (Read error: Connection reset by peer)
[20:45:27] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[20:45:56] <FromDiscord> <jmgomez> does --outdir:DIR supposed to work with app:lib?
[20:49:01] <NimEventer> New thread by Archnim: Managing binary data, see https://forum.nim-lang.org/t/9076
[20:49:13] <FromDiscord> <jmgomez> it does, I had the order misplaced
[20:50:09] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 248 seconds)
[20:59:04] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[21:03:27] *** Joins: xet7 (~xet7@user/xet7)
[21:05:03] <NimEventer> New thread by Archnim: My history on Nim forum, see https://forum.nim-lang.org/t/9077
[21:12:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b1a6:339e:65ca:f206) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:17:36] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:26:20] *** ozzz is now known as om3ga
[21:28:08] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[21:28:26] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:53:51] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:55:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[21:55:52] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:07:41] <PMunch> Hmm, is there a way to manually alloc and dealloc a table?
[22:15:53] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[22:22:51] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[22:29:23] <FromDiscord> <demotomohiro> `initTable` proc has `initialSize` parameter to specifiy initial internal heap size.
[22:32:37] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b1a6:339e:65ca:f206)
[22:33:35] <FromDiscord> <demotomohiro> And there is `clear` proc for table.
[22:34:56] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[22:35:50] *** Joins: Gustavo6046 (gustavo604@user/gustavo6046)
[22:41:20] <NimEventer> New thread by Jocker: Threading SIGSEGV in HttpClient with SSL, see https://forum.nim-lang.org/t/9078
[22:45:13] *** Joins: vicfred (~vicfred@user/vicfred)
[22:58:41] <Amun-Ra> is there an equivalent of python's raise StopIteration? as in: https://play.nim-lang.org/#ix=3Up6
[22:59:48] <FromDiscord> <Rika> you usually store `next` in a var and query `next.finished` to see if it has finished
[23:00:13] <Amun-Ra> oh
[23:00:23] <FromDiscord> <Rika> or you could just use `for i in next(): ` too i believe
[23:00:43] <FromDiscord> <Rika> yup
[23:00:56] <Amun-Ra> I need to call it once or twice during one loop pass
[23:01:20] <FromDiscord> <Rika> wait here then
[23:01:25] <FromDiscord> <Rika> im gonna test something
[23:01:44] <Amun-Ra> I could make a state machine but that way is easier
[23:01:55] <FromDiscord> <Rika> no no, i just checked you dont need to store next in a var
[23:02:01] <FromDiscord> <Rika> `next.finished`
[23:02:15] <Amun-Ra> nice, thanks
[23:02:34] <FromDiscord> <Rika> i JUST noticed next is a var which is why it worked
[23:02:40] <FromDiscord> <Rika> i thought it was an iterator decl
[23:02:41] <FromDiscord> <Rika> so xd
[23:02:41] <FromDiscord> <Rika> yeah
[23:03:54] <Amun-Ra> :>
[23:06:03] <Amun-Ra> it still returns one 0 before setting finished
[23:06:28] <FromDiscord> <Rika> break at the start haha
[23:06:32] <FromDiscord> <Rika> not the end of the loop
[23:07:03] <FromDiscord> <jmgomez> sent a code paste, see https://play.nim-lang.org/#ix=3Upa
[23:07:25] <Amun-Ra> Rika: https://play.nim-lang.org/#ix=3Up6
[23:07:46] <FromDiscord> <Rika> you sent the same link haha
[23:08:04] <Amun-Ra> hmm
[23:08:29] <Amun-Ra> Rika: https://play.nim-lang.org/#ix=t%20wr
[23:08:45] <FromDiscord> <Rika> uhhhhhhh
[23:08:47] <FromDiscord> <Rika> link broke
[23:08:53] <FromDiscord> <Rika> might need to regenerate the link
[23:09:01] <FromDiscord> <demotomohiro> In reply to @jmgomez "Hey guys, any idea": Can you run that command with `--listcmd` that shows how Nim call gcc and linker.
[23:09:57] <Amun-Ra> Rika: https://play.nim-lang.org/#ix=3Upc (tested ;)
[23:10:40] <FromDiscord> <Rika> hmm i remember there being docs on this
[23:10:45] <FromDiscord> <jmgomez> sent a code paste, see https://play.nim-lang.org/#ix=3Upd
[23:11:12] <FromDiscord> <Rika> https://nim-lang.org/docs/manual.html#iterators-and-the-for-statement-firstminusclass-iterators
[23:11:14] <FromDiscord> <Rika> here amun-ra
[23:11:23] <FromDiscord> <Rika> read down "Note that system.finished is error prone to use...:
[23:11:24] <FromDiscord> <Rika> (edit) "use...:" => "use..."
[23:11:25] <FromDiscord> <demotomohiro> In reply to @jmgomez "Hey guys, any idea": Nim call `ar` command to build static but do you have `ar` in binutils? Can you run `where ar`?
[23:12:02] <FromDiscord> <jmgomez> first time I heard about ar TBH
[23:12:26] <Amun-Ra> Rika: right, I think I'll go with an exception to reduce the number of checks
[23:12:33] <FromDiscord> <Rika> its for static libs usually with file ext `.a` which is an old archive format
[23:12:38] <FromDiscord> <Rika> ar is for extracting it
[23:12:47] <Amun-Ra> and creating it too
[23:13:01] <FromDiscord> <Rika> okay, whichever you think is best
[23:13:04] <FromDiscord> <Rika> i dont like the system either
[23:13:47] <FromDiscord> <jmgomez> got it, so I need to have it installed. Odd that vcc doesnt have it there already
[23:14:31] <FromDiscord> <jmgomez> using clang did work
[23:14:33] <FromDiscord> <demotomohiro> binutils contains binary tools like `ld`, `as`, `ar`, etc. some of them are used by gcc.
[23:14:53] <FromDiscord> <jmgomez> but I imagine I cant mix something compiled with clang and vcc right?
[23:15:18] <FromDiscord> <jmgomez> In reply to @demotomohiro "binutils contains binary tools": that's on the nim installation folder?
[23:15:33] <FromDiscord> <demotomohiro> In reply to @jmgomez "got it, so I": binutils is usually installed when you install gcc.
[23:15:35] <Amun-Ra> vcc as in msvc?
[23:15:53] <FromDiscord> <jmgomez> yes
[23:16:02] <FromDiscord> <demotomohiro> In reply to @jmgomez "that's on the nim": No, binutils are not included in Nim.
[23:16:03] <FromDiscord> <jmgomez> I think by default they use it on windows
[23:16:09] <Amun-Ra> I don't thinks it will work
[23:16:12] <Amun-Ra> think*
[23:16:23] <FromDiscord> <jmgomez> aggh
[23:16:46] <FromDiscord> <demotomohiro> Nim dont use vcc in default even if it is installed. You need to set --cc:vcc option to use vcc backend.
[23:16:47] <FromDiscord> <jmgomez> thing is that a dynamic library does not seem to link in ue
[23:16:50] <Amun-Ra> msvc uses .lib for static libs
[23:17:01] <Amun-Ra> .a comes from posix world
[23:17:39] <Amun-Ra> I'd be surprised if mixing clang and msvc objects worked
[23:17:51] <FromDiscord> <jmgomez> sent a code paste, see https://play.nim-lang.org/#ix=3Upg
[23:18:07] <FromDiscord> <jmgomez> I think I can get rid of that one
[23:18:08] <FromDiscord> <jmgomez> thanks
[23:19:28] <FromDiscord> <demotomohiro> `vccexe.exe` is a tool shipped with Nim that try to find `cl` in visual studio and call it.
[23:20:26] <FromDiscord> <jmgomez> what do you mean with cl?
[23:20:52] <Amun-Ra> cl.exe, ms compiler executable
[23:20:57] <FromDiscord> <demotomohiro> `cl.exe` is a c/c++ compiler in visual studio.
[23:21:05] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 248 seconds)
[23:21:06] <FromDiscord> <jmgomez> 👍
