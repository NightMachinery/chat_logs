[00:06:10] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[00:11:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:13:11] *** Joins: nckx (~nckx@tobias.gr)
[00:13:47] *** Joins: cjb (~cjb@user/cjb)
[00:17:46] *** Joins: esb (~esb@2804:14c:1ad:8b70::1000)
[00:22:36] *** Quits: attila_lendvai (~alendvai@catv-176-63-3-39.catv.broadband.hu) (Remote host closed the connection)
[00:25:14] *** esb is now known as parjanya
[00:25:37] *** Quits: cage (~cage@dynamic-adsl-84-220-230-36.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:25:47] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f)
[00:27:32] *** Parts: parjanya (~esb@2804:14c:1ad:8b70::1000) (Using Circe, the loveliest of all IRC clients)
[00:31:34] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f) (Ping timeout: 265 seconds)
[00:44:55] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[00:48:00] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 265 seconds)
[00:48:18] *** Joins: dre (~dre@2001:8003:c932:c301:7e35:e886:e998:1b1c)
[00:54:13] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c935:9328:4c7f:5838)
[00:55:09] <pjb> engblom: I already explained to you that you that plists used only EQL to compare the keys!
[00:56:29] <pjb> engblom: (let* ((plist '("a" (:A 1 :B 2) "b" (:A 3 :B 4))) (keys (loop for (k) on plist by 'cddr collect k)))   (loop for k in keys collect (getf plist k))) #| --> ((:a 1 :b 2) (:a 3 :b 4)) |#
[00:56:43] <pjb> engblom: but (eql "a" "a") #| --> nil |#
[00:56:54] <pjb> engblom: (let ((k "a")) (eql k k)) #| --> t |#
[00:58:25] <pjb> engblom: err, sorry, not eql, but EQ.
[00:58:34] <pjb> (eql "a" "a") #| --> nil |#  (let ((k "a")) (eql k k)) #| --> t |#
[00:58:38] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c935:9328:4c7f:5838) (Ping timeout: 265 seconds)
[00:58:59] <pjb> (eq "a" "a") #| --> nil |#  (let ((k "a")) (eq k k)) #| --> t |#
[00:59:11] <pjb> but note that (let ((k 42)) (eq k k)) may return nil or t depending on the implementatioin!
[01:00:04] <pjb> so while you can find the actual string used as keys, and find them with get or getf (they use EQ to compare the keys), if the keys are numbers, you can't even be sure to be able to retrieve them!
[01:01:06] <pjb> engblom: if you want to be able to specify the test function, then use a-lists! assoc and rassoc take a :test argument!
[01:01:20] <pjb> engblom: or a hash-table, with :test 'equal or 'equalp.
[01:08:39] *** Joins: akoana (~ah@user/akoana)
[01:10:59] *** Joins: dra (~dra@2a04:4540:640f:ce00:d8ab:d926:222e:d25f)
[01:12:35] *** Quits: Doraemon (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de) (Quit: Leaving)
[01:12:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:12:55] *** Joins: NeoCron (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de)
[01:20:52] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[01:21:52] <engblom> pjb: I think hash table will be the best solution as then I only once need to specify the test function and the code will be easier to read.
[01:23:09] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 250 seconds)
[01:23:49] <pjb> engblom: but equal or equalp are very coarse. Good for strings, but for other keys (eg. vectors or arrays), you may want a more specific test.
[01:28:17] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[01:29:14] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[01:35:22] <engblom> pjb: As alexandria:plist-has-table does not recurse into the lists deeper in, it is not a problem. All the first level keys will be strings.
[01:35:46] <engblom> plist-hash-table I meant to write
[01:36:50] *** Quits: dra (~dra@2a04:4540:640f:ce00:d8ab:d926:222e:d25f) (Remote host closed the connection)
[01:40:22] *** Quits: scymtym_ (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 265 seconds)
[01:40:38] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:4068:d5e5:2b3f:f933)
[01:44:01] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[01:45:46] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 245 seconds)
[01:55:33] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Quit: Leaving)
[01:57:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:12:00] *** Quits: Inline (~Inline@aftr-37-201-240-2.unity-media.net) (Remote host closed the connection)
[02:17:13] *** Quits: NeoCron (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de) (Quit: Leaving)
[02:21:56] *** Joins: taiju (~taiju@240b:253:ec40:2400:2d48:f53f:bd4f:c325)
[02:23:02] *** Quits: gaqwas (~john@dynamic-077-007-070-034.77.7.pool.telefonica.de) (Ping timeout: 256 seconds)
[02:25:08] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:26:50] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:31:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:38:12] *** Quits: kdlv (~kdlv@user/kdlv) (Ping timeout: 265 seconds)
[02:39:15] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Remote host closed the connection)
[02:47:02] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[02:54:12] *** Quits: cosimone (~user@93-44-184-115.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:54:38] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 265 seconds)
[02:57:07] *** Joins: scymtym_ (~user@ip-94-114-248-79.unity-media.net)
[02:57:33] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 256 seconds)
[03:00:57] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 256 seconds)
[03:00:58] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[03:06:23] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[03:12:28] *** Joins: gaqwas (~john@dynamic-077-007-070-034.77.7.pool.telefonica.de)
[03:16:15] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:4068:d5e5:2b3f:f933) (Remote host closed the connection)
[03:24:22] *** Quits: VincentV` (~user@212.241.29.202) (Remote host closed the connection)
[03:31:23] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:33:46] *** Quits: pve (~pve@37-33-108-186.bb.dnainternet.fi) (Quit: leaving)
[03:36:11] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 245 seconds)
[03:47:16] *** Joins: kdlv (~kdlv@user/kdlv)
[03:48:46] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[03:49:18] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[03:49:45] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[03:50:38] *** Quits: kdlv (~kdlv@user/kdlv) (Client Quit)
[03:50:56] *** Joins: kdlv (~kdlv@user/kdlv)
[04:04:19] *** Joins: pillton (~user@193-116-196-145.tpgi.com.au)
[04:05:16] *** Joins: igemnace (~ian@user/igemnace)
[04:06:07] *** Quits: gaqwas (~john@dynamic-077-007-070-034.77.7.pool.telefonica.de) (Ping timeout: 256 seconds)
[04:23:50] <pdietz> IMO i's a good idea to look in alexandria or other such utility libraries (I like serapeum) for these sorts of things.
[04:30:39] *** Joins: Oladon (~olad@98.43.81.226)
[04:33:41] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[05:16:08] *** Quits: taiju (~taiju@240b:253:ec40:2400:2d48:f53f:bd4f:c325) (Ping timeout: 260 seconds)
[05:38:50] *** Joins: taiju (~taiju@240b:253:ec40:2400:2d48:f53f:bd4f:c325)
[05:51:43] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[05:55:24] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[06:00:04] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 268 seconds)
[06:00:21] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[06:04:56] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[06:06:44] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[06:06:56] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[06:14:55] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[06:20:21] *** Joins: djuber (~user@65.79.128.64)
[06:23:21] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[06:27:34] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:28:26] *** Quits: djuber (~user@65.79.128.64) (Ping timeout: 268 seconds)
[06:49:32] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 265 seconds)
[06:51:02] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Ping timeout: 256 seconds)
[06:52:46] *** Quits: prxq (~quassel@x4dbe733d.dyn.telefonica.de) (Ping timeout: 256 seconds)
[06:52:52] *** Joins: prxq_ (~quassel@x4dbe8eed.dyn.telefonica.de)
[07:28:30] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[07:30:28] <beach> Good morning everyone!
[07:33:02] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 240 seconds)
[07:34:26] *** Joins: pdietz (~pdietz@cpe-74-69-163-146.stny.res.rr.com)
[07:39:12] *** Quits: pdietz (~pdietz@cpe-74-69-163-146.stny.res.rr.com) (Ping timeout: 256 seconds)
[07:47:52] *** Quits: waleee (~waleee@h-82-196-111-63.na.cust.bahnhof.se) (Quit: WeeChat 3.3)
[07:52:02] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[08:12:26] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[08:13:38] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 265 seconds)
[08:17:58] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[08:19:26] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:19:46] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 260 seconds)
[08:22:30] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 265 seconds)
[08:23:52] *** Joins: hubvu (sid495858@user/hubvu)
[08:26:28] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[08:30:12] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[08:32:06] *** Joins: semz (~none@user/semz)
[08:55:39] <beach> phantomics: What would be the point of breaking backward compatibility for the very minor convenience to a very small number of users of Common Lisp?
[08:59:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:02:17] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[09:18:20] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[09:20:50] *** Quits: etiago (~etiago@user/etiago) (Read error: Connection reset by peer)
[09:22:58] *** Joins: etiago (~etiago@user/etiago)
[09:32:02] *** Quits: resttime (~rest@2604:a880:400:d0::1b48:d001) (*.net *.split)
[09:32:02] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[09:32:02] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[09:32:02] *** Quits: even4void (even4void@came.here.for-some.fun) (*.net *.split)
[09:32:02] *** Quits: |3b| (bbb@user/3b/x-2324788) (*.net *.split)
[09:32:02] *** Quits: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com) (*.net *.split)
[09:32:03] *** Quits: jgkamat (~jay@user/jay) (*.net *.split)
[09:32:03] *** Quits: copec (~copec@schrodbox.unaen.org) (*.net *.split)
[09:32:03] *** Quits: bldr_ (~bull@185.117.72.168) (*.net *.split)
[09:32:03] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[09:32:03] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (*.net *.split)
[09:32:09] *** Joins: bldr (~bull@185.117.72.168)
[09:32:09] *** Joins: MetaYan_ (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[09:32:12] *** Quits: dre (~dre@2001:8003:c932:c301:7e35:e886:e998:1b1c) (Quit: Leaving)
[09:32:22] *** Joins: |3b| (bbb@user/3b/x-2324788)
[09:32:22] *** Joins: Demosthenex (~Demosthen@dhcp-077-248-042-162.chello.nl)
[09:32:34] *** Joins: lieven (~mal@ns2.wyrd.be)
[09:32:35] *** Quits: Demosthenex (~Demosthen@dhcp-077-248-042-162.chello.nl) (Changing host)
[09:32:35] *** Joins: Demosthenex (~Demosthen@user/demosthenex)
[09:32:52] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[09:33:34] *** Joins: copec (~copec@schrodbox.unaen.org)
[09:34:03] *** Joins: even4void (even4void@came.here.for-some.fun)
[09:34:08] *** Joins: resttime (~rest@2604:a880:400:d0::1b48:d001)
[09:34:18] *** Joins: jgkamat (~jay@user/jay)
[09:36:24] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[09:36:24] *** Quits: les (znc@user/les) (*.net *.split)
[09:36:24] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (*.net *.split)
[09:36:24] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (*.net *.split)
[09:36:24] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (*.net *.split)
[09:36:41] *** Joins: les (znc@user/les)
[09:36:43] *** Joins: remexre (~remexre@user/remexre)
[09:37:14] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[09:37:19] *** Joins: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com)
[09:37:28] *** Quits: taiju (~taiju@240b:253:ec40:2400:2d48:f53f:bd4f:c325) (Ping timeout: 260 seconds)
[09:38:24] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[09:39:19] *** Quits: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) (Ping timeout: 256 seconds)
[09:39:19] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[09:39:28] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[09:39:36] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[09:39:48] *** Joins: taiju (~taiju@240b:253:ec40:2400:2d48:f53f:bd4f:c325)
[09:41:38] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[09:43:17] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 256 seconds)
[09:50:49] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[10:00:57] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:09:12] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Remote host closed the connection)
[10:09:28] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[10:09:52] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[10:12:32] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:19:53] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[10:33:46] *** Joins: spiaggia (~user@2a01:cb19:150:3400:7104:5438:907c:6e0a)
[10:43:28] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[10:44:35] *** Joins: Cymew (~ante@host-78-77-192-101.mobileonline.telia.com)
[10:45:11] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 252 seconds)
[10:45:37] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[11:02:21] *** Joins: semz (~none@user/semz)
[11:05:43] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:4c4:6d8e:185d:41cd)
[11:08:04] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 264 seconds)
[11:08:19] *** Joins: amb007 (~a_bakic@230.247.204.77.rev.sfr.net)
[11:09:44] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[11:14:31] *** Joins: notzmv (~zmv@user/notzmv)
[11:21:50] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:22:01] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:4c4:6d8e:185d:41cd) (Ping timeout: 250 seconds)
[11:31:23] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[11:33:52] *** Quits: spiaggia (~user@2a01:cb19:150:3400:7104:5438:907c:6e0a) (Quit: ERC (IRC client for Emacs 26.3))
[11:33:52] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 264 seconds)
[11:35:28] <hayley> I think I found the one good use for SIMPLE-BASE-STRING: one can scan at about 11 Gcharacters/second with BASE-CHAR, as opposed to "only" 4.7 Gcharacters/second with CHARACTER, because one can stuff more characters in a vector register.
[11:36:18] *** Joins: gaqwas (~john@dynamic-095-115-055-169.95.115.pool.telefonica.de)
[11:37:28] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 264 seconds)
[11:37:31] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:39:16] *** Quits: taiju (~taiju@240b:253:ec40:2400:2d48:f53f:bd4f:c325) (Ping timeout: 264 seconds)
[11:42:16] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 264 seconds)
[11:43:40] *** Quits: paul0 (~paul0@user/paul0) (Read error: Connection reset by peer)
[11:44:35] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:44:48] *** Joins: paul0 (~paul0@user/paul0)
[11:47:01] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:47:22] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:4c4:6d8e:185d:41cd)
[11:52:50] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[11:54:38] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[11:55:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:55:44] *** Quits: amb007 (~a_bakic@230.247.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:55:51] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:58:09] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:59:00] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:59:36] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[12:00:25] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[12:02:06] <jackdaniel> fir really really long strings also the memory consumption drops
[12:02:10] <jackdaniel> for
[12:02:27] <jackdaniel> i.e 4gb instead of 16gb
[12:08:37] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:17:53] <hayley> Now that you mention it, I guess my Xorg.0.log nearly fits in L1 cache then (just 2KB short or so). Though I don't think I'm memory bound still.
[12:18:12] <hayley> Yeah, not even close.
[12:18:30] *** Joins: random-nick (~random-ni@87.116.180.220)
[12:24:14] *** Joins: VincentVega (~user@212.241.28.73)
[12:33:33] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[12:36:07] *** Quits: gaqwas (~john@dynamic-095-115-055-169.95.115.pool.telefonica.de) (Ping timeout: 256 seconds)
[12:46:54] *** Joins: pve (~pve@176-93-100-143.bb.dnainternet.fi)
[12:50:35] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 252 seconds)
[13:00:14] *** Joins: taiju (~taiju@240b:253:ec40:2400:2d48:f53f:bd4f:c325)
[13:07:44] *** Joins: random-nick (~random-ni@87.116.165.83)
[13:07:59] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 265 seconds)
[13:17:17] *** Joins: s-liao (~s-liao@101.86.99.70)
[13:20:04] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 264 seconds)
[13:23:09] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[13:23:37] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:27:57] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[13:32:36] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:32:38] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[13:33:54] *** Lord_of_Life_ is now known as Lord_of_Life
[13:36:46] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[13:41:21] *** Joins: s-liao (~s-liao@101.86.99.70)
[13:44:30] <contrapunctus> Guest74: try Smartparens as an alternative to Paredit.
[13:45:29] <contrapunctus> Guest74: Lispy is another alternative.
[13:50:59] <rain3> - I had tried Paredit, Lispy, and 2 other similar packages ...   too complicated, (and lispy too restrictive) - I hate them;there's also smartparens or smth like that, some people like to build atomic bombs to kill a fly; what always strikes me that usually those are exactly the people that don't know about the built-in "emacs" way of doing it
[13:52:26] <rain3> page 107 in the book Mastering Emacs, subchapter "Moving by S-Expressions"
[14:00:53] <jackdaniel> Guest74: how clim model is broken? and do you have some specification draft that addresses these isses in your grand project?
[14:01:37] <jackdaniel> (I hope that brokeness is not as severe as using keywords)
[14:05:12] <beach> jackdaniel: I think we are supposed to read the IRC logs and make suggestions, rather than read a document with one or more proposals comparing pros and cons of each alternative.
[14:05:30] <beach> I am not planning to do that though.
[14:06:41] <hayley> To do the classic joke for the day (which I forgot the original form of): I have never used Paredit and never needed it.
[14:06:46] <contrapunctus> rain3: most of the time I get by with Boon - combined commands for movement over words and s-expressions, which combine with composable commands to provide killing/copying of s-expressions. But Paredit/SP splice operations are very useful. I also like Lispy's commands to move an s-expression forward and back, and the Lispy eval command is useful because it evaluates the s-expression before or aft
[14:06:46] <contrapunctus> er point, instead of only after point.
[14:07:38] <jackdaniel> beach: Im still waiting for some interesting idea to steal though. sadly until now only superficial complaints were presented
[14:07:51] <rain3> contrapunctus: ok
[14:08:01] <jackdaniel> still, I'm full of hope ;)
[14:11:21] <beach> jackdaniel: I don't think the main point was to complain about CLIM or anything else, but to come up with a good design.  But then there was disappointment expressed about the lack of feedback, and I was trying to explain why no feedback can be expected unless there is a serious documented analysis of the problem and alternative solutions.
[14:13:56] <jackdaniel> beach: I'm fully aware of that
[14:14:12] <beach> Ah, OK.
[14:14:58] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[14:22:16] <VincentVega> rain3: what is it that makes lispy restrictive?
[14:23:40] <rain3> VincentVega: I forgot the details, I think it was the fact that it doesn't allow me to type a single paren and things like that , which weren't even easily configurable
[14:24:25] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[14:27:38] <VincentVega> rain3: Oh, I hear you. I did find that infuriating myself at first, with the " especially, but I did manage to turn that off (I think through a custom binding). Although I think it just takes getting used to.
[14:28:26] *** Quits: pillton (~user@193-116-196-145.tpgi.com.au) (Remote host closed the connection)
[14:29:21] *** Joins: Colt (~Colt@user/colt)
[14:29:47] <rain3> I gave Lispy a chance two times already; I will never give it a chance again
[14:31:47] <VincentVega> rain3: No persuasion on my part, the only reason I am using it is because of lispyville which makes lispy usable with evil.
[14:31:52] <VincentVega> I was just curious.
[14:32:51] <rain3> I was also curious about lispyville , but never gathered enough courage to install it , or I tried and I failed
[14:32:52] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:34:06] <rain3> I was using evil mode with lispy  and bindings such as this: (evil-define-key 'insert evil-lispy-mode-map  "}" #'lispy-brackets
[14:34:55] <rain3> "Most people use a package called paredit. I find it too complicated, I just just the following: (info "(emacs) Parentheses") Basically C-M-{n,p;f,b;u,d}"
[14:35:22] <VincentVega> rain3: I see. I got custom bindings going for the whole deal myself, a strange mix of lispy and paredit and lispiville's own commands. I do find it satisfactory enough by now, though.
[14:37:00] <VincentVega> rain3: I do those through a leader key for sexps, chords are far too cumbersome to my taste.
[14:37:31] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:4c4:6d8e:185d:41cd) (Read error: Connection reset by peer)
[14:38:08] <rain3> VincentVega: how about connecting an external usb keyboard and assigning actions to single keys
[14:38:42] <VincentVega> rain3: you mean a pedal
[14:39:56] <VincentVega> rain3: well, that doesn't sound like something I would go for, if I were to keep a hold of my sanity
[14:40:02] <rain3> an ordinary keyboard which you can program; it's easier and better than to use 'macro keyboards' because their programming interface is limited
[14:40:14] <rain3> "Personally, I think of attempts to keep parens balanced automatically as unlispy - something that might be helpful for, say, C programming, but more harmful than helpful for Lisp. I tend to think that all of the slurping, burping, gurgling, snorting, and barfing, which devotees consider handy, are just contrivances to try to make a virtue out of necessity. From the moment that you've automatically, prematurely introduced a
[14:40:14] <rain3> closing paren, you naturally find a need to try to find a way to work around it. If you don't box yourself in, in the first place, then there's no such need. Not that I'm trying to convince anyone. But since you asked, I don't need to "handle parentheses". There's no real problem to solve, IMO. Or if the question about "handling" parens is more general, then my answer is that Emacs lets me know whether parens are balanced. I
[14:40:14] <rain3> don't need or want them balanced "ahead of time". I use show-paren-mode, blink-matching-paren, and blink-matching-open. And I sometimes double-click a paren to go to its match (and select the whole sexp)."
[14:40:37] <VincentVega> rain3: Ah, I see. Yeah, programmable keyboards are cool.
[14:40:57] <rain3> and program them with lisp
[14:42:16] *** Quits: Cymew (~ante@host-78-77-192-101.mobileonline.telia.com) (Ping timeout: 264 seconds)
[14:42:24] <rain3> "FWIW, in the 80s there was a certain amount of interest in "structural editing" in languages like Lisp. (And later, that really took off in non-developer or not-much-developer contexts such as XML editing.) At the time, I realized that that approach was unnecessarily restraining/restrictive - like always being in prison, just to avoid the possibility, even temporarily, of creating something syntactically invalid. When
[14:42:24] <rain3> enthusiasts of Lisp structural editing who weren't familiar with Emacs were shown Emacs they sometimes realized they were on the wrong track. The point isn't to prevent you from ever creating something invalid. The point is to let you easily do anything - general text editing, and at the same time (1) let you check validity on demand, on the fly and (2) provide automatic feedback about validity (e.g. font-lock), without
[14:42:24] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:42:24] <rain3> imposing continual validity. (Plain) Emacs gives you just that: unlimited, general text editing, but also feedback about validity and language-specific structure and syntax."
[14:42:33] *** Joins: amb007 (~a_bakic@214.247.204.77.rev.sfr.net)
[14:42:34] *** Quits: amb007 (~a_bakic@214.247.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[14:42:52] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:47:35] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 256 seconds)
[14:48:00] *** Joins: amb007 (~a_bakic@214.247.204.77.rev.sfr.net)
[14:48:03] *** Joins: lisp123win (~user@80.227.170.170)
[14:48:51] <lisp123win> rain3: Yeah, many people don't know that the standard SEXP manipulation of Emacs are already quite good. Once you get used to paredit's extra features, its hard to go back. But to me, the best combination is evil mode + paredit, heaven on earth
[14:50:55] <VincentVega> rain3: I take it this is not a first time you are having this argument : D I am not going to argue extensively, because that would require an article on its own, which I will hopefully write at some point. But let it be known that I don't find myself having to "work around" a closing parens. Just a matter of habit and I say that as someone who hated paredit when I first tried it. As that one emacs rocks episode quoted, "if you think
[14:50:55] <VincentVega> that paredit is not for you, then you need to become the kind of person that paredit is for."
[14:53:07] <rain3> it is the first time I am discussing about this topic; just sharing some quotes here , and also reading with interest what you are sharing
[14:53:38] <VincentVega> rain3: "who weren't familiar with Emacs were shown Emacs they sometimes realized they were on the wrong track" I would like to read up on this.
[14:55:04] <VincentVega> rain3: Is that a specific article you are quoting from?
[14:56:32] *** Quits: amb007 (~a_bakic@214.247.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[14:56:38] <lisp123win> A lot of lisp programmers didn't use paredit in the old days I'm assuming (Emacs has always been one of the significant platforms of choice), so its not necessary. For example, I think Guy Steele programs on Emacs, so I don't think he used paredit
[14:57:13] *** Joins: amb007 (~a_bakic@214.247.204.77.rev.sfr.net)
[14:57:13] *** Quits: amb007 (~a_bakic@214.247.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[14:57:47] <rain3> VincentVega: https://i.reddit.com/r/emacs/comments/l7khmk/what_key_binding_scheme_do_you_use_to_handle/
[14:57:55] <VincentVega> lisp123win: Well, given that paredit was released in 2005, I guess not.
[14:58:21] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:58:27] <VincentVega> rain3: Thanks, I will read up on it.
[15:00:42] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:00:52] *** Joins: amb007 (~a_bakic@214.247.204.77.rev.sfr.net)
[15:00:52] *** Quits: amb007 (~a_bakic@214.247.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:01:06] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:03:30] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[15:05:55] <contrapunctus> VincentVega, rain3: if you don't have a keyboard which places Ctrl under your thumb, I highly recommend using this program called kmonad to configure Space to act as Ctrl when held. This is my configuration for it - https://tildegit.org/contrapunctus/dotfiles/src/branch/production/kmonad.kbd
[15:08:49] <rain3> https://github.com/r0adrunner/Space2Ctrl
[15:09:41] <contrapunctus> huh
[15:10:33] <rain3> I had heard some people say they prefer capslock to act as ctrl , never heard about space -> ctrl , thanks for the tip . What are the benefits of it?
[15:11:10] <VincentVega> contrapunctus: Thanks, but I dig modal editing, I barely ever need ctrl, and I use space for a leader key. I did remap ralt to escape though.
[15:11:31] <lisp123win> VincentVega: Apparently paredit brought some functionality from some of the older lisp systems (might be Interlisp but don't quote me on that), but naturally that part wasn't in Emacs otherwise we wouldn't have Paredit until 2005
[15:13:05] <rain3> https://www.emacswiki.org/emacs/MovingTheCtrlKey
[15:13:30] <VincentVega> lisp123win: Gotcha.
[15:13:53] <rain3> someone told me this: "despite what poeple say emacs is also modal, but it achieves modal editing with another mindset"
[15:14:12] <lisp123win> rain3: Yes, I think Emacs is known as a modal editor as well
[15:15:13] <contrapunctus> rain3: before Space-as-Ctrl, I used setxkbmap+xcape to have Caps Lock as both Esc and Ctrl. It's better-placed - less disruptive to the home row position - than Ctrl on most keyboards, but Space-as-Ctrl takes it to the next level. No more straining the pinky, better utilization of the thumbs, and opens up many more Ctrl bindings. (And it makes Ctrl bindings the most comfortable ones, only behind
[15:15:13] <contrapunctus> single-key bindings.)
[15:19:32] <pdietz> Structure editing as done on Interlisp wouldn't really work with Common Lisp, since one can arbitrarily redefine the character-level syntax of Common Lisp with the readtable.   Interlisp didn't have that; indeed, comments in Interlisp were parts of the s-exprs of the code (using the * symbol as a special operator; TIMES was used for
[15:19:32] <pdietz> multiplication.)
[15:20:41] <hayley> Could you write a * at the end and pretend you have Pascal? e.g. (PLUS (* woo quadratic equation *) (TIMES A X X) (TIMES B X) C)
[15:20:55] <pdietz> That said, readtable shenanigans can confuse emacs as well (but one can customize emacs to take such things into account.)
[15:42:26] <contrapunctus> I wish Common Lisp tools used Common Lisp contructs themselves to work with Common Lisp code, so you could e.g. change the readtable and your tooling would automatically be aware of it and go on working as usual...but beach is working on something like that, right? 🤔
[15:43:01] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:a82d:72b:97d0:ca91)
[15:44:20] <hayley> "We got incremental parsing to work, and now you want me to solve the halting problem at typing speed?" - roughly paraphrasing beach
[15:46:21] <contrapunctus> lolwhat
[15:49:01] <hayley> I remember a statement like that from the relevant ELS presentation.
[15:49:56] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[15:53:59] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[16:02:22] *** antoszka is now known as antoszka-r
[16:07:29] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 252 seconds)
[16:09:04] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[16:10:32] *** Joins: s-liao (~s-liao@101.86.99.70)
[16:21:48] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[16:22:23] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[16:24:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:27:50] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 252 seconds)
[16:31:56] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[16:42:27] <MichaelRaskin> contrapunctus: well, even with macros there are already catches…
[16:45:03] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[16:48:17] *** Quits: VincentVega (~user@212.241.28.73) (Ping timeout: 256 seconds)
[16:48:31] <contrapunctus> MichaelRaskin: do tell, what catches might there be?
[16:52:15] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 256 seconds)
[16:52:47] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[16:55:16] <MichaelRaskin> I have a page or so in my paper… basically interactions of macros and lexical environments and macrolet are already a mess, and then there is a question to what defun expands…
[17:02:26] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[17:07:14] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[17:07:26] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[17:12:18] <pdietz> This shows up in, for example, the ITERATE macro.  Some parts of that require code walking, and they don't work if there are macrolets in the body.   It also interacts poorly with what Waters' COVER package does to code.  I had to expose an extension feature to ITERATE so COVER could tell it how to deal with certain cover-specific
[17:12:19] <pdietz> implementation macros.
[17:12:58] <MichaelRaskin> Yep, agnostic-lizard test suite more or less breaks all the previous code walkers in _unforced_ places
[17:13:24] <MichaelRaskin> There are things that are actually hard to handle, and there are a few places people just forget about
[17:16:29] <MichaelRaskin> (except implementation-specific code walkers, of course; those just get completely broken by updates from time to time)
[17:19:14] *** Joins: rito_ (~rito_gh@45.112.243.47)
[17:27:07] *** Joins: VincentVega (~user@212.241.28.73)
[17:28:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:29:09] *** Joins: Bike (~Glossina@71.69.170.70)
[17:29:09] *** ChanServ sets mode: +o Bike
[17:30:10] *** Parts: VincentVega (~user@212.241.28.73) ()
[17:30:23] *** Joins: VincentVega (~user@212.241.28.73)
[17:34:23] *** Quits: yewscion (~yewscion@72-21-196-67.amazon.com) (Ping timeout: 252 seconds)
[17:37:28] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 264 seconds)
[17:40:14] <Guest74> contrapunctus: thanks, thought I wasn't looking for any to try, I'm quite happy with paredit.  I was asking if the behaviour with pipes is the same in the other ones to see if the fault was paredits.  Then tried to report the issue and ran into a dead wall trying to find a place to raise issues.  it does make dealing with symbols that have to be
[17:40:15] <Guest74> escaped troublesome, but I guess I'll just reduce my usage.
[17:41:17] <Guest74> jackdaniel: do you have why you always seem so snarky and unkind?
[17:41:31] <Guest74> s/have/have a reason/
[17:41:57] <Guest74> it's very off putting.
[17:42:51] <beach> Guest74: I advise against upping the ante.
[17:43:20] <Guest74> other people have noticed. I wonder if he has.
[17:43:38] <beach> Guest74: I strongly advise against upping the ante.
[17:44:11] <Guest74> fine, perhaps you can talk with him?
[17:50:08] *** Joins: hobo_ (~hobo@69.218.33.204)
[17:50:55] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Remote host closed the connection)
[17:51:59] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[17:51:59] <lisp123> Has anyone considered before extending the CLHS documentation look up to user packages? e.g. C-c C-d h on a symbol takes you to the definition page of that symbol
[17:52:03] <lisp123> Would be a good idea
[17:52:30] <lisp123> (it assumes people write documentation, but if there's a habit of doing it, then hopefully more will do it)
[17:52:52] *** Joins: aartaka (~aartaka@5.1.53.225)
[17:52:55] <beach> I was just going to say that.  It assumes people write documentation.
[17:53:44] <lisp123> True :(
[17:53:50] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Ping timeout (120 seconds))
[17:53:59] <ns12> Hi, is 15.17R X3J13/94-101R (12 August 1994) the latest draft of the Common Lisp standard?
[17:55:10] <jackdaniel> Guest74: I'm usually very kind, I'm just trying to tune to my interlocutor
[17:55:41] <ns12> Another question: now that ftp://ftp.parc.xerox.com/pub/CL is no longer accessible, is there a reputable mirror of its contents available over HTTP(S)?
[17:55:42] <beach> ns12: We usually consider the Common Lisp HyperSpec as being the standard.
[17:56:07] <ns12> beach: Yes, I know that. I am looking for the latest draft, not the standard itself.
[17:57:22] <lisp123> ns12: Looks like it
[17:57:31] <lisp123> https://mr.gy/ansi-common-lisp/Introduction.html#Introduction
[17:57:37] <beach> ns12: This site https://github.com/s-expressionists/dpans claims to have the latest draft.
[17:57:53] <lisp123> Is a good online copy (if you need an offline copy, let me know, I copied it to a repo earlier)
[17:57:55] <beach> ns12: You might want to check that with scymtym.
[17:58:45] *** Joins: yewscion (~yewscion@52.94.133.128)
[17:59:09] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[18:00:25] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:02:07] <ns12> Franz provides Version 15.17R of the draft in HTML and PDF formats: https://franz.com/support/documentation/ (see "ANSI Specification").
[18:02:47] <beach> ns12: What are you planning to do with it?  I am asking because there are some existing projects that use it.
[18:04:16] <ns12> beach: I'm planning to use a PDF copy for reference. I dislike the HyperSpec.
[18:04:24] <lisp123> ns12: Please let me know if you get an answer to this - access to a copy of ftp://ftp.parc.xerox.com/pub/CL
[18:04:41] <beach> ns12: I see.
[18:13:51] <ns12> The Franz documentation page links to https://web.archive.org/web/20190630183107/http://cvberry.com/tech_writings/notes/common_lisp_standard_draft.html which in turn links to this interesting repository https://gitlab.com/vancan1ty/clstandard_build
[18:16:11] <ns12> lisp123: It seems that there are many copies of ftp://ftp.parc.xerox.com/pub/CL if one searches using Google, but I don't know how reputable those copies are.
[18:17:23] <lisp123> ns12: Thanks
[18:21:42] <contrapunctus> lisp123: SLIME has a command to look up documentation called `slime-documentation` (not to be confused with `slime-documentation-lookup` , which is for the CLHS)...doesn't that work for this?
[18:22:14] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 252 seconds)
[18:22:14] <AndrewYu> Hello guys- I found an article of interest at least to me (http://metamodular.com/Common-Lisp/lispos.html). I wonder if there are any implementations of such, as in, an operating system with a lisp-like interface. It seems that shcl(1) is a nice shell where you can, eg, define shell "builtins" with (define-shell-builtin double (x) (* 2 x)) and stuff, seems cool. I also wonder if command-line
[18:22:16] <AndrewYu> shells (or other means to access a system) with a (almost) completely Lisp-like syntax is feasible (that is, usable to the end user). It seems that needing to 'quote stuff and write all those parens for (procedures) seem cumbersome as a user interface, heh :\
[18:22:36] <ns12> lisp123: Most of these Common Lisp draft projects seem to use copies of the drafts hosted by CMU: https://www.cs.cmu.edu/afs/cs/Web/Groups/AI/lang/lisp/doc/standard/ansi/dpans/ which apparently comes from ftp://parcftp.xerox.com/pub/cl/dpANS1/dpans/
[18:22:53] <beach> AndrewYu: There is Mezzano and Movitz already, but not the full specification you indicated.
[18:23:44] <beach> AndrewYu: And those are nothing like an interface to a Unix-like OS.
[18:24:04] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11ca:25f:a82d:72b:97d0:ca91)
[18:25:00] <lisp123> contrapunctus: Thanks. That works, but its only doc strings and lambda lists. Perhaps then doc strings should be expanded in greater detail and used in conjunction with this
[18:25:12] <AndrewYu> Yeah. I'm trying not to appeal to tradition here, because legacies aren't always good... I've heard of mezzano, will check movitz
[18:25:20] <lisp123> (a clhs entry has a lot more detail vs. a doc string for example)
[18:25:33] <AndrewYu> The idea of a single address space seems like a good way to solve the mess of IPC in UNIX-like systems
[18:25:43] <lisp123> ns12: I see. I have a copy of the final standard, so haven't really looked into the draft
[18:25:55] <random-nick> I'm not sure what an lisp-like OS interface would entail
[18:26:07] <beach> AndrewYu: Indeed.
[18:26:49] <beach> random-nick: Depends on the OS I guess.
[18:27:28] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:a82d:72b:97d0:ca91) (Ping timeout: 265 seconds)
[18:28:01] <lisp123> contrapunctus: Thanks though. What I might do going forward is expand the doc strings of any libraries I use, to then better utilize slime-documentation
[18:29:35] <contrapunctus> lisp123: do take a look at https://diataxis.fr/
[18:30:45] <lisp123> contrapunctus: Thank you! I saw that from the perspective of "Divio", which is one of the users, I did not know the original source was different
[18:31:37] <contrapunctus> lisp123: heh, that's where I found it, too.
[18:32:11] <lisp123> Great :)
[18:37:06] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[18:41:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[18:43:07] *** Joins: aeth (~aeth@user/aeth)
[18:44:16] *** Joins: yewscion (~yewscion@52.94.133.128)
[18:52:26] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Ping timeout: 256 seconds)
[19:00:09] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[19:01:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[19:07:17] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[19:07:41] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[19:13:54] *** Joins: cage (~cage@dynamic-adsl-94-34-55-203.clienti.tiscali.it)
[19:14:36] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:16:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:16:50] *** Quits: ori (~atdt@user/ori) (Quit: Bye!)
[19:18:11] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:20:32] *** hobo_ is now known as hobo
[19:20:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:22:26] *** Joins: ori (~atdt@user/ori)
[19:22:29] <White_Flame> AndrewYu: it hasn't been explicitly mentioned here, but there used to be commercial Lisp machines in the 70s-80s, whose fundamental high level language was Lisp, too
[19:22:48] <White_Flame> and just CPU microcode underneath
[19:22:53] <AndrewYu> Yeah I knew :D
[19:22:56] <White_Flame> ok :)
[19:23:06] <White_Flame> seemed a bit of an omission to not mention :)
[19:23:59] <AndrewYu> true
[19:24:59] <White_Flame> but of course beach's site does address their (now) glaring omission of inter-application security against mucking up the system too horribly, with the notion of first-class environments
[19:26:22] <beach> It wasn't a problem at the time, I imagine.
[19:27:10] <White_Flame> well, there's 2 issues:  untrusted & potentially malicious code, and robustness against errors
[19:27:28] <White_Flame> I'm sure the latter caused its share of consternation
[19:27:37] <beach> Sure.
[19:30:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:33:19] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:36:34] <Guest74> when using COLLECT something INTO in loop, should the supplied variable be accessible?  It says it's bound as if by WITH, but I can't seem to setf it to '() like I can with WITH.
[19:39:44] <Bike> "can't"? what error do you see?
[19:39:59] <Bike> or problem, i guess
[19:40:44] <Guest74> I see the var i'm collecting into having the previous contents.  uh, maybe a paste will help.
[19:41:12] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5de9:5b12:9c88:d4ab)
[19:41:15] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11ca:25f:a82d:72b:97d0:ca91) (Read error: Connection reset by peer)
[19:42:01] <Guest74> https://pastebin.com/8U1Macj5 trying to collect separate strings.
[19:42:03] <Bike> oh, i see. i'm not sure it's guaranteed to be modifiable directly, and making it so might make the collection less efficient
[19:43:03] <Guest74> the standard saying it's bound as if by WITH leads me to believe it should, unless I'm reading the spec incorrectly.
[19:43:36] <Bike> it just says it's bound, not that it's modifiable
[19:44:25] <Guest74> should vars bound with WITH not be modifiable? cause they are in sbcl.
[19:45:48] <Bike> you can modify them. saying "into" vars are initialized as by with probably just means that they have the same kind of defaulting behavior
[19:46:36] <Guest74> i'm just trying to get rid of more nreverse nonsense. I'd really like to be able to use collect with WITH vars.
[19:48:11] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5de9:5b12:9c88:d4ab) (Ping timeout: 265 seconds)
[19:49:25] <Bike> to elaborate on the efficiency thing- the usual implementation just keeps track of the last cons in the accumulated list, so collect is just (setf lastcons (setf (cdr lastcons) (list new-element))). as such lastcons is where the action is and the "into" var doesn't affect the operations. to make it affect the operations, the list would have to be linearly scanned each time something is added instead of
[19:49:31] <Bike> adding being constant time.
[19:50:47] <Guest74> oh i'm aware of the efficiency thing, which is why I'd like to use collect.  I'm wondering if it's what the spec says, but I guess it depends on what bound as if with WITH means.
[19:51:59] <Bike> i'm saying that if you could set the variable, you couldn't do the more efficient thing.
[19:52:25] <Bike> you'd have to do the push/nreverse or the linear scan.
[19:53:04] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[19:54:43] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:05:56] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5de9:5b12:9c88:d4ab)
[20:07:28] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11ca:25f:158d:cd67:2613:cc7b)
[20:08:12] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:09:16] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 264 seconds)
[20:09:33] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:11:23] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5de9:5b12:9c88:d4ab) (Ping timeout: 265 seconds)
[20:14:45] <White_Flame> Guest74: there's also no guarantee as to what the value is shaped like in the midst of accumulation, so if an implementation uses some struct instance or an extendable vector or something non-list-like, setting it to '() could blow things up
[20:15:39] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[20:15:56] <White_Flame> or even just some other arrangement of cons cells, as the (cons nil nil) head cell might need to exist to always have a CDR to push into
[20:17:28] <White_Flame> or, it might not even used the named variable at all until the final list is set into it
[20:17:48] <Guest74> I'm less concerned with what implementations do than what the spec says.
[20:18:02] <White_Flame> sure, these are all allowable possibilities, to my knowledge
[20:18:44] <White_Flame> the only guarantees that INTO provides are at the end of the LOOP
[20:19:12] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:19:25] <White_Flame> (and of course the var argument being bound, as you mentioned)
[20:21:21] *** Joins: makomo (~makomo@user/makomo)
[20:21:52] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 264 seconds)
[20:23:05] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:25:01] <beach> Guest74: Where does it say that the INTO variable is bound as with WITH?
[20:25:40] <Guest74> 6.1.3
[20:25:56] <Guest74> The var argument is bound as if by the construct with.
[20:27:17] <beach> Thanks.
[20:27:39] <Guest74> np
[20:28:02] <Guest74> i forget what the minion command to display clhs is.
[20:28:48] <contrapunctus> clhs 6.1.3
[20:28:49] <specbot> Value Accumulation Clauses: http://www.lispworks.com/reference/HyperSpec/Body/06_ac.htm
[20:29:02] <Guest74> lol, that simple
[20:29:13] <Guest74> and i guess it's not minion
[20:29:45] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[20:29:56] <beach> Guest74: For what it's worth, you can set the var in SICL LOOP.  You are probably using a Common Lisp implementation that uses MIT LOOP, which is full of problems.
[20:30:20] <Guest74> oh, that's something to look forward to.
[20:31:13] <beach> (loop for i in '(1 2 3 4 5 6) collect i into result when (= i 4) (setf result '()) (finally (return result))) => (5 6)
[20:31:23] <Guest74> too bad there wasn't a concatenating clause as well.
[20:31:41] <beach> What do you mean?
[20:32:04] <Guest74> something that could concatenate strings.
[20:32:55] <Guest74> or any type that concatenate can return
[20:33:08] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 260 seconds)
[20:35:56] <Bike> beach: is it implemented efficiently, and how?
[20:36:37] <contrapunctus> Guest74: isn't there `append` or something?
[20:37:45] <Guest74> only does lists
[20:38:02] <Guest74> and append and nconc always seem to blow up on me.
[20:38:11] <beach> Bike: I couldn't think of any other way than the most straightforward one.  Bind a variable, and modify it as more things are added.
[20:38:26] <jackdaniel> and nreverse at the end?
[20:38:27] <Bike> i mean like with the keeping track of the last cons like i mentioned.
[20:38:39] <beach> Oh, that one I recently optimized.
[20:38:58] <beach> I keep a tail of things that might need to be scanned.
[20:39:18] <contrapunctus> Guest74: yeah...a curious omission 🤐️
[20:39:52] <beach> Bike: ... so that APPEND won't copy the last thing added.
[20:41:37] <VincentVega> Guest74: Not to start a war here, but you could consider using iterate and either write your own clause or build on accumulate.
[20:41:55] <Bike> so how do you do it if you just keep track of the variable holding the head of the list?
[20:41:58] <semz> I believe Iterate has a general reduce by clause
[20:42:25] <Bike> VincentVega: i actually checked iterate and i think the "into" variables work the same way? the manual describes being able to "inspect" them but doesn't mention being able to modify
[20:42:26] <semz> but repeatedly concatenating strings is not the greatest idea because it creates lots and lots of intermediate garbage
[20:42:31] <Guest74> VincentVega: no thanks.
[20:42:51] <beach> Bike: There is a special case.  When the suffix pointer is NIL, it means the entire list needs to be copied when added to.
[20:43:18] <Bike> so there is a suffix pointer?
[20:43:25] <beach> Yeah.
[20:43:56] <VincentVega> Bike: They do, but as I said you can define your own clause which behaves like you want it to.
[20:44:05] <Bike> but setf on the "into" variable still works? doesn't that leave the suffix pointer in a weird state?
[20:44:11] <Bike> VincentVega: sure
[20:44:30] <beach> Bike: Ah, yes, very likely.
[20:44:40] *** Joins: Oladon (~olad@98.43.81.226)
[20:45:11] <Guest74> wouldn't you just reset the pointer?
[20:45:39] <jackdaniel> VincentVega: utilities in cmucl have a macro `collect` that allows defining your own expander
[20:45:43] <Guest74> I dunno makes sense to me, reset pointer when variable is reset.
[20:45:43] <beach> I would have to intercept the assignment.
[20:45:49] <jackdaniel> it is quite nice because it is not hard-tied to the iteration
[20:46:12] <Guest74> I guess that brings up problems as to what it is set to if it isn't nil
[20:46:54] <beach> Yes, I don't think my current scheme allows arbitrary assignments.
[20:47:05] <beach> I would have to give that some more thought.
[20:47:31] <VincentVega> jackdaniel: that's cool, but that wouldn't be portable right?
[20:47:44] <jackdaniel> VincentVega: it is, why not?
[20:47:51] <beach> Since we are on the topic, MIT LOOP also copies the last list appended, which is wrong.
[20:47:56] <Shinmera> etimmons: did you ever get around to that depot extension for tgz (iirc?)
[20:48:06] <Bike> the utilities are in the CMU source code, but they don't really rely on cmu internals.
[20:48:11] *** Joins: Catie (~user@user/catie)
[20:48:17] <VincentVega> jackdaniel: Bike: gotcha
[20:48:46] <jackdaniel> I've copied this small utility to ecl and mcclim, it is very handy thing to have
[20:50:19] <Guest74> ah, that brings up a question I was wondering yesterday.  Do we have gzip streams somewhere? tar?  I thought I heard about something like that.
[20:51:34] <Bike> https://github.com/pmai/Deflate/ is an implementation of gzip/zlib/deflate decompression
[20:51:50] <Shinmera> https://github.com/3b/3bz is a very efficient deflate implementation.
[20:51:53] <Bike> and there's a cl-tar, apparently
[20:51:53] <etimmons> Shinmera: Not yet. I've been pretty hosed with other tasks. But that reminds me that I should get cl-tar added to QL now that I've tested it a bit more.
[20:52:04] <Shinmera> Fair enough!
[20:52:36] <etimmons> I've it's something you're interested in, I can probably nudge up its priority a bit
[20:52:41] <etimmons> s/I've/If/
[20:52:53] <Shinmera> I'm interested in anything that uses my projects :)
[20:53:07] <Shinmera> But I don't have a need for it, so no pressure from my side at all
[20:53:16] <etimmons> :)
[20:55:18] <Shinmera> I've been thinking about some depot and file format related things (particularly SF3), but haven't found the motivation to work on i t yet.
[20:55:18] <etimmons> I've got an in progress project I'm using to build releases (both source and binary). It currently shells out to tar (for non-Windows releases) and uses zippy for Windows targeted things.
[20:55:40] <etimmons> When I get around to using cl-tar instead is likely when I'll do the depot integration
[20:55:40] <Shinmera> Any reason to not just use zip for Unix, too?
[20:55:44] <jackdaniel> there is also ql-minitar! :-)
[20:55:46] <Guest74> thanks guys, seems both are slow on streams.  I guess since this use case is only consolefonts a non stream based should be ok.
[20:56:20] <etimmons> Not really, I just like tar
[20:56:23] <Shinmera> Guest74: stream interfaces are bound to be slow if you write to them byte by byte, I'm afraid.
[20:57:44] <Guest74> Shinmera: what's the link to your file format stuff? Thinking I should probably make my image stuff compatible if it's not too much hassle.
[20:57:57] <Shinmera> https://shirakumo.github.io/sf3
[20:59:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[21:00:28] <Guest74> ah, no 1 bit channels for simple masks?
[21:00:57] <Shinmera> It would break the ub8 requirement.
[21:02:15] <Guest74> and seems the vector format doesn't allow cubic beziers? or i'm reading incorrectly?
[21:03:38] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:03:58] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[21:04:52] *** Joins: unyu (~pyon@user/pyon)
[21:05:17] <Shinmera> Curve is a cubic bezier, since there's two control points between each point, no?
[21:08:06] <Guest74> ah, i thought i read only 1.
[21:10:08] <Guest74> read too fast, makes sense now.  Though i guess that means no quadratics?  Anyways, it does say it's a simple format so I guess I'll look elsewhere. Not sure I want to settle on svg.
[21:11:37] <Shinmera> you can define a quadratic bezier with a cubic one. just set both control points to the same.
[21:12:21] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 256 seconds)
[21:12:50] *** Joins: amb007 (~a_bakic@249.196.204.77.rev.sfr.net)
[21:17:38] <Guest74> Do you have any example vector or image files?  Wouldn't hurt to write reader/writers to practice my binary formats stuff.
[21:18:05] <Shinmera> No, the format isn't fully done yet, so I haven't gone ahead with anything.
[21:18:15] <Shinmera> I'm still waiting for feedback on it to make sure it's all sane.
[21:19:10] <ecraven> no magic header values to check the file format at all?
[21:19:29] <Shinmera> https://shirakumo.github.io/sf3#Formats
[21:19:50] <Shinmera> https://shirakumo.github.io/sf3#formats
[21:19:55] <Shinmera> screw you, capitalisation!
[21:20:13] <Guest74> np.  the image stuff looks good, similar to what I do.  But for image layers I have positions as well, since I allow different sized surfaces in an image stack.  though I'm not sure how often that is used by others.
[21:20:34] <ecraven> Shinmera: ah, thanks, didn't see that
[21:20:43] <ecraven> very nice!
[21:21:19] <ecraven> that's actually a really useful identifier format ;)
[21:21:38] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[21:22:59] <Shinmera> Guest74: in this case they're not layers, they're 3D images, or arrays of 2D images.
[21:23:18] <Shinmera> the primary use-case intended here is directly streaming data to the GPU.
[21:23:34] <Shinmera> where 3D images or 2D image arrays are sometimes used
[21:24:19] <Guest74> got it.  My primary use case is art program storage.
[21:25:04] <Shinmera> yeah you're gonna want a different format for that. Personally I'd store a metadata file along with a payload for each layer in some kinda archive
[21:26:32] <Guest74> yeah, i store meta separately.  an archive seems like a good idea. I've kept thinking of combining them, but like to have the meta separate.
[21:27:07] <etimmons> "0D0A0A A CRLFLF sequence to catch bad line conversion utilities."
[21:27:08] <etimmons> love it
[21:27:21] <White_Flame> sf3 reminds me in spirit of IFF
[21:27:54] <Shinmera> I mean, at that point width/height/layer offset would also be metadata, so just exclude that from the binary data payload of each layer.
[21:28:42] <Guest74> hm, that makes sense.
[21:28:46] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[21:29:10] <White_Flame> Shinmera: btw, I think the last line of the Audio description block is a copy/paste error from Image
[21:29:26] <Guest74> though I might prefer to have the width height so that it can still be read without the meta.
[21:29:41] <Shinmera> I'm pretty sure Krita's files for instance are zip archives containing a metadata payload, some other crap, and pngs for each of the layers, where a layer is often smaller than the total image.
[21:30:20] *** Quits: amb007 (~a_bakic@249.196.204.77.rev.sfr.net) (Ping timeout: 252 seconds)
[21:30:32] <Guest74> I'll look into that. I just remember glancing at gimp's and thinking no.
[21:30:42] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[21:31:00] *** Joins: amb007 (~a_bakic@214.147.204.77.rev.sfr.net)
[21:31:55] <Shinmera> White_Flame: so it is
[21:37:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:40:07] *** Quits: amb007 (~a_bakic@214.147.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[21:41:05] *** Joins: amb007 (~a_bakic@97.145.204.77.rev.sfr.net)
[21:46:23] *** Parts: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[21:59:58] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:11:31] <frgo> Hi all - anybody of you guys have been able to load cl-sdl2 on sbcl running on M1 Mac?
[22:11:32] *** Quits: amb007 (~a_bakic@97.145.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:13:01] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:16:19] <frgo> Ok - doesn't seem to be case ;-)
[22:17:39] <semz> It's not such a fast channel, give it time
[22:18:01] <frgo> semz: :) Yep.
[22:18:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:20:31] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:22:50] <jackdaniel> cl:read doesn't have a timeout for a reason - it is to make fun of the #commonlisp participants
[22:23:36] *** Joins: x88x88x_ (~cheeg@gateway/vpn/pia/x88x88x)
[22:25:18] <pjb>  jackdaniel: well, nothing prevents an implementation to signal a timeout condition.
[22:25:34] <pjb> If that was justified.
[22:26:01] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 256 seconds)
[22:34:27] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:38:17] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:39:27] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[22:41:34] *** Quits: x88x88x_ (~cheeg@gateway/vpn/pia/x88x88x) (Quit: Using Circe, the loveliest of all IRC clients)
[22:42:55] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[22:43:27] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:43:41] * edgar-rft signals a timeout condition by pulling the power plug
[22:44:15] *** Joins: nature (~nature@45.32.235.173)
[22:45:43] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Read error: Connection reset by peer)
[22:46:32] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11ca:25f:158d:cd67:2613:cc7b) (Ping timeout: 265 seconds)
[22:46:55] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[22:47:39] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:51:41] <Alfr> edgar-rft, interactive development the hard way?
[22:54:21] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[22:58:50] <edgar-rft> I'm developing backwards into stoneage direction
[23:01:00] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[23:07:03] <yitzi> I'll be waiting for you. I write all my code with stone tablets and chisel.
[23:07:58] *** Joins: xsperry (~xs@user/xsperry)
[23:09:22] <VincentVega> one of those hardware types huh? it will probably last forever too
[23:10:07] <yitzi> Debugging is difficult, though.
[23:10:28] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 264 seconds)
[23:11:55] <VincentVega> Well, at least that hasn't changed.
[23:11:58] <Guest74> lol, I actually have some specs written with charcoal.
[23:13:57] <Guest74> I was actually going to start bitching about freedesktop specs, but I guess my smudged charcoal ones are worse.
[23:31:08] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[23:31:26] *** Joins: sander (~sander@user/sander)
[23:32:56] *** Quits: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Ping timeout: 265 seconds)
[23:32:57] *** Quits: sterni (~lukas@user/sterni) (Ping timeout: 265 seconds)
[23:33:25] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Ping timeout: 265 seconds)
[23:33:54] *** Quits: resttime (~rest@2604:a880:400:d0::1b48:d001) (Ping timeout: 265 seconds)
[23:33:54] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Ping timeout: 265 seconds)
[23:33:54] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 265 seconds)
[23:34:00] *** Joins: sterni (~lukas@user/sterni)
[23:34:10] *** Quits: vegai (vegai@kapsi.fi) (Quit: Lost terminal)
[23:34:27] *** Joins: resttime (~rest@2604:a880:400:d0::1b48:d001)
[23:35:19] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:35:43] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[23:38:11] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:40:14] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:40:43] *** Joins: cosimone (~user@93-47-231-139.ip115.fastwebnet.it)
[23:44:05] *** Joins: aeth_ (~aeth@user/aeth)
[23:44:06] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[23:44:08] *** aeth_ is now known as aeth
[23:45:00] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[23:45:52] *** Quits: cage (~cage@dynamic-adsl-94-34-55-203.clienti.tiscali.it) (Ping timeout: 264 seconds)
[23:47:28] *** Joins: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db)
[23:47:36] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[23:47:54] *** Quits: sm2n (~sm2n@user/sm2n) (Quit: Leaving)
[23:50:11] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[23:50:39] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[23:52:12] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[23:52:20] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[23:54:04] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[23:55:34] *** Joins: Oladon (~olad@98.43.81.226)
[23:57:27] *** Quits: rito_ (~rito_gh@45.112.243.47) (Quit: Leaving)
