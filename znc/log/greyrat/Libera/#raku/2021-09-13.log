[00:29:00] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:39:01] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[00:40:14] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 252 seconds)
[00:45:59] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[00:51:57] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[00:53:22] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[00:57:14] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:59:55] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[01:40:27] *** Quits: _________ (~nobody@user/noodly) (Remote host closed the connection)
[01:40:46] *** Joins: _________ (~nobody@user/noodly)
[01:45:45] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[01:46:18] *** Quits: xinming (~xinming@115.219.32.136) (Ping timeout: 260 seconds)
[02:04:02] *** Quits: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se) (Read error: Connection reset by peer)
[02:04:18] *** Joins: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se)
[02:05:12] *** Joins: monkey_ (~user@190.104.116.134)
[02:21:29] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[02:26:16] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Ping timeout: 252 seconds)
[02:50:09] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (Ping timeout: 240 seconds)
[02:50:20] *** Joins: childlikempress (~moon-chil@cardinal.elronnd.net)
[02:51:06] *** childlikempress is now known as moon-child
[02:56:30] *** Quits: cnx (~cnxhaloge@2001:470:69fc:105::61f) (Ping timeout: 240 seconds)
[02:56:42] *** Joins: cnx (~cnxhaloge@2001:470:69fc:105::61f)
[02:57:43] <sjn> m: say 1"⁤¼".uninames;
[02:57:43] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say 17⏏5"⁤¼".uninames;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement m…»
[02:58:07] <sjn> m: say "1⁤¼".uninames;
[02:58:07] <camelia> rakudo-moar 10b327292: OUTPUT: «(DIGIT ONE INVISIBLE PLUS VULGAR FRACTION ONE QUARTER)␤»
[02:58:19] <sjn> m: say 1⁤¼ + 1
[02:58:19] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3say 17⏏5⁤¼ + 1␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤   …»
[02:59:04] <sjn> so, should \u[INVISIBLE PLUS] count as an infix + operator in raku? :-)
[02:59:14] <sjn> it doesn't now...
[02:59:33] <sjn> m: say 1⁤¼ + 1;
[02:59:34] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3say 17⏏5⁤¼ + 1;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤  …»
[03:03:53] <Xliff> sjn: That depends on of the 1 and the ¼ are recognized as different ligatures.
[03:04:24] <Xliff> say "1⁤¼".uniname
[03:04:25] <evalable6> Xliff, rakudo-moar 10b327292: OUTPUT: «DIGIT ONE␤»
[03:04:34] <Xliff> say "1⁤¼".uninames
[03:04:35] <evalable6> Xliff, rakudo-moar 10b327292: OUTPUT: «(DIGIT ONE INVISIBLE PLUS VULGAR FRACTION ONE QUARTER)␤»
[03:05:14] <Xliff> say "1⁤¼".chars.say
[03:05:14] <evalable6> Xliff, rakudo-moar 10b327292: OUTPUT: «3␤True␤»
[03:05:17] <Xliff> say "1⁤¼".chars
[03:05:17] <evalable6> Xliff, rakudo-moar 10b327292: OUTPUT: «3␤»
[03:05:44] <Xliff> say 1 + ⁤¼
[03:05:48] <Xliff> m: say 1 + ⁤¼
[03:05:49] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3say 1 +7⏏5 ⁤¼␤    expecting any of:␤        prefix␤        term␤»
[03:05:54] <sjn> not sure I understand how ligatures come into play here..
[03:06:08] <Xliff> It's not recognizing "¼" as a term.
[03:06:16] <Xliff> That's your bug.
[03:06:30] <sjn> that's a second bug :)
[03:06:36] <Xliff> Ah. :)
[03:09:17] <sjn> m: say "1⁤1".uninames;
[03:09:17] <camelia> rakudo-moar 10b327292: OUTPUT: «(DIGIT ONE INVISIBLE PLUS DIGIT ONE)␤»
[03:09:45] <sjn> m: say ⁤11
[03:09:45] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5 ⁤11␤Bogus postfix␤at <tmp>:1␤------> 3say 7⏏5⁤11␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤    …»
[03:44:32] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[03:58:36] <timo> m: say uniprop("¼")
[03:58:36] <camelia> rakudo-moar 10b327292: OUTPUT: «No␤»
[04:00:00] <timo> m: say uniprop("①"); say ① + ②
[04:00:00] <camelia> rakudo-moar 10b327292: OUTPUT: «No␤3␤»
[04:00:14] <timo> m: say unival("¼")
[04:00:14] <camelia> rakudo-moar 10b327292: OUTPUT: «0.25␤»
[04:00:41] <timo> so just the invisible plus making it b0rked i guess
[04:07:37] *** Quits: lichtkind (~lichtkind@p200300d0a7115d75ac072a13f09fa777.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:32:41] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:35:05] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[04:35:46] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[05:35:47] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:35:47] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:35:47] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:35:47] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:35:47] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:47] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:35:47] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:35:47] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:35:47] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:35:47] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:47] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:47] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:47] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:47] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:47] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:47] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:47] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:47] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:35:47] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:36:16] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[05:36:28] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[05:36:37] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[05:37:12] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[05:38:11] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[05:38:48] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[06:02:42] *** Joins: frost (~frost@59.71.242.61)
[06:13:20] *** Quits: gabiruh (~gabiruh@vps19177.publiccloud.com.br) (Quit: ZNC 1.7.5 - https://znc.in)
[06:13:46] *** Joins: gabiruh (~gabiruh@vps19177.publiccloud.com.br)
[06:19:18] *** gordonfish- is now known as gordonfish
[06:31:28] *** Quits: nine (~nine@comm.detonation.org) (Remote host closed the connection)
[06:31:35] *** Joins: nine (~nine@comm.detonation.org)
[06:36:12] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[06:36:40] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[06:36:58] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[06:36:59] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[06:37:18] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[06:37:36] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[06:37:46] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[06:37:54] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[06:38:18] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[07:36:03] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[07:37:33] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[07:38:08] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[08:03:22] *** Quits: jess (~jess@libera/staff/jess) (Quit: i'm going to start going to bed)
[08:36:03] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[08:37:30] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[08:37:51] *** Joins: Altreus (~altreus@2a03:b0c0:1:e0::439:5001)
[08:39:17] *** Server sets mode: +nt 
[08:41:38] *** Joins: bdju (~bard@user/bdju)
[08:45:24] *** Joins: Ekho (~Ekho@user/ekho)
[08:49:16] *** Quits: xkr47 (xkr47@91-150-59-18.customer.karistelefon.fi) (*.net *.split)
[08:49:16] *** Quits: demostanis[m] (~demostani@2001:470:69fc:105::2c2) (*.net *.split)
[08:49:17] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (*.net *.split)
[08:49:17] *** Quits: mtj (~mtj@2400:8902::f03c:91ff:fe93:b7f1) (*.net *.split)
[08:49:17] *** Quits: ugexe (ugexe@p6.nu) (*.net *.split)
[08:49:17] *** Quits: dpk (~dpk@xn--issum-vva.nonceword.org) (*.net *.split)
[08:49:17] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[08:49:17] *** Quits: tib (~tib@146.ip-193-70-41.eu) (*.net *.split)
[08:49:17] *** Quits: samcv (~samcv@194.233.102.77) (*.net *.split)
[08:49:17] *** Quits: mykhal (~m@user/mykhal) (*.net *.split)
[08:49:17] *** Quits: corwin (someone@fosshost/director/corwin) (*.net *.split)
[08:49:17] *** Quits: eof (~eof@tty3.dev) (*.net *.split)
[08:49:20] *** Joins: xkr47_ (xkr47@91-150-59-18.customer.karistelefon.fi)
[08:49:22] *** Joins: tib_ (~tib@146.ip-193-70-41.eu)
[08:49:24] *** Joins: [dpk] (~dpk@xn--issum-vva.nonceword.org)
[08:49:26] *** tib_ is now known as tib
[08:49:31] *** Joins: summerisle (~eof@tty3.dev)
[08:49:32] *** Joins: samebchase (~thelounge@51.15.68.182)
[08:49:35] *** Joins: ugexe (ugexe@p6.nu)
[08:49:46] *** xkr47_ is now known as xkr47
[08:49:53] *** Joins: mplsCorwin (someone@ghostwheel.bru.st)
[08:49:58] *** Joins: mtj (~mtj@2400:8902::f03c:91ff:fe93:b7f1)
[08:50:05] *** Quits: mplsCorwin (someone@ghostwheel.bru.st) (Changing host)
[08:50:05] *** Joins: mplsCorwin (someone@fosshost/director/corwin)
[08:50:15] *** Joins: samcv (~samcv@194.233.102.77)
[08:52:22] *** Joins: amenonsen (~amenonsen@pitta.toroid.org)
[08:57:31] *** mplsCorwin is now known as corwin
[09:00:37] *** Joins: demostanis[m] (~demostani@2001:470:69fc:105::2c2)
[09:02:25] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[09:33:14] *** [dpk] is now known as dpk
[10:24:33] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[10:30:42] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 268 seconds)
[10:31:18] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[10:32:46] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:35:48] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[11:11:01] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Remote host closed the connection)
[11:11:35] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[11:12:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[11:48:28] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:01:43] *** Joins: lichtkind (~lichtkind@p200300d0a7115d1cac072a13f09fa777.dip0.t-ipconnect.de)
[12:16:50] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:50:54] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[12:52:44] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[12:58:38] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:15:20] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:18:13] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[14:18:49] <discord-raku-bot> <Anton Antonov#7232> Yesterday I was experimenting with regex extractions from a large set
[14:18:49] <discord-raku-bot> <Anton Antonov#7232> of files. I found that using a regex with 3 captions is ~20 slower
[14:18:49] <discord-raku-bot> <Anton Antonov#7232> than using a version of it with only 1 caption. Is this expected
[14:18:49] <discord-raku-bot> <Anton Antonov#7232> and/or documented somewhere? E.g. `XMLSearch0` is ~20 times slower than
[14:18:49] <discord-raku-bot> <Anton Antonov#7232> `XMLSearch1`:
[14:18:49] <discord-raku-bot> <Anton Antonov#7232> ```
[14:18:49] <discord-raku-bot> <Anton Antonov#7232> my regex XMLSearch0 {
[14:18:50] <discord-raku-bot> <Anton Antonov#7232>     <header>=('<FactData>')
[14:18:50] <discord-raku-bot> <Anton Antonov#7232>     $<data>=(<-[<>]>*)
[14:18:51] <discord-raku-bot> <Anton Antonov#7232>     <ender>=('</FactData>')
[14:18:51] <discord-raku-bot> <Anton Antonov#7232> }
[14:18:52] <discord-raku-bot> <Anton Antonov#7232> my regex XMLSearch1 {
[14:23:12] <moritz_> well, captures do require the regex engine to keep more data around, and there's an overhead to extracting it. I don't know if 20% is reasonable, but it cannot be zero cost
[14:24:17] <discord-raku-bot> <Anton Antonov#7232> @mortiz_ It is not 20% slower, it is 20 times slower.
[14:30:43] <Geth> ¦ raku-mode: fd286b2d1a | (Philip Kaludercic)++ | 2 files
[14:30:43] <Geth> ¦ raku-mode: Remove pkg-info dependency
[14:30:43] <Geth> ¦ raku-mode: review: https://github.com/Raku/raku-mode/commit/fd286b2d1a
[14:30:43] <Geth> ¦ raku-mode: 20610a83b5 | (Tom Browder)++ (committed using GitHub Web editor) | 2 files
[14:30:43] <Geth> ¦ raku-mode: Merge pull request #53 from phikal/master
[14:30:44] <Geth> ¦ raku-mode: 
[14:30:44] <Geth> ¦ raku-mode: Remove pkg-info dependency
[14:30:45] <Geth> ¦ raku-mode: review: https://github.com/Raku/raku-mode/commit/20610a83b5
[15:02:03] <grondilu> raku: class A {}; class B is A {}; say B.bless: A.new
[15:02:03] <evalable6> grondilu, rakudo-moar 10b327292: OUTPUT: «(exit code 1) Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at /tmp/Y1_TWp4g_f line 1␤␤»
[15:02:27] <grondilu> I think that used to work
[15:02:50] <grondilu> long time ago though
[15:03:49] <lizmat> grondilu: what should that do ?
[15:04:06] <lizmat> bless only takes named parameters
[15:04:38] <grondilu> couldn't it take an instance too?
[15:05:02] <grondilu> and bless it to a Class
[15:05:23] <grondilu> I vaguely recall a similar mechanism in P5
[15:05:45] <lizmat> why not do B.new ?
[15:06:15] <grondilu> well that does not work
[15:06:32] <grondilu> I want to build a new B instance from a A one
[15:06:37] <lizmat> m: class A {}; class B is A {}; say B.new
[15:06:38] <camelia> rakudo-moar 10b327292: OUTPUT: «B.new␤»
[15:07:30] <dakkar> grondilu: in general, "build a subclass instance from a superclass instance" is not a well-defined thing to do
[15:08:05] <grondilu> Oh I guess I should use a role for B instead
[15:08:33] <dakkar> probably
[15:09:16] <lizmat> and then use but: https://docs.raku.org/routine/but
[15:09:50] <grondilu> yeah that seems sensible
[15:09:54] <dakkar> (if you're coming from perl5, and thinking of the "re-blessing" practice… raku doesn't do that, because it's nasty and there's better ways now)
[15:10:46] <dakkar> (and I have perl5 production code that reblesses happily)
[15:18:13] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:18:13] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:19:57] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[15:21:15] <lizmat> notable6: weekly
[15:21:15] <notable6> lizmat, No notes for “weekly”
[15:22:30] <grondilu> lol I'm digging into some old code and I'm reminded that there used to be a standard module called "MONKEY_TYPING"
[15:23:17] <lizmat> it's now built in  :-)
[15:24:38] <grondilu> it was to augmont core classes, right?
[15:24:49] <grondilu> *augment
[15:25:19] <lizmat> https://docs.raku.org/language/pragmas#index-entry-MONKEY__pragma
[15:25:36] <lizmat> https://docs.raku.org/syntax/augment
[15:26:25] *** Joins: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[15:26:35] <grondilu> again I'm pretty sure I should use roles instead
[15:26:49] <lizmat> yeah, augment is *really* a last resort
[15:27:03] <lizmat> as it messes with all sorts of things, and breaks optimizations
[15:27:26] <grondilu> I think I wrote this code before I knew about roles, or before they were supported
[15:27:34] <lizmat> yeah, that's quite possible
[15:28:05] * grondilu checks latest commit date
[15:28:20] <grondilu> "30 May 2012" 
[15:29:48] <grondilu> might as well say prehistory
[15:30:07] <grondilu> this code will need lots of rewriting
[15:38:50] <lizmat> yeah, pre GLR code might need some close inspection
[15:40:40] <grondilu> can you remind me what GLR is?  Google did not help much.
[15:41:45] <grondilu> Great List Refactor
[15:42:00] <grondilu> I've just recalled
[15:46:20] <Altreus> clickbait when?
[15:46:23] <Altreus> :)
[15:48:55] <grondilu> on the other hand my Digest library is fairly old too but seems to be running fine : https://github.com/grondilu/libdigest-perl6
[15:49:23] <grondilu> still I bet I could modernize it though
[15:52:07] <grondilu> like all these .AT-POS calls, are they still needed for better performance?
[15:53:24] <lizmat> no, they're not
[15:53:43] <lizmat> these will pretty quickly be optimized away
[15:53:53] <lizmat> once a process runs for a bit
[15:57:58] <lizmat> compare:
[15:58:01] <lizmat> m: my @a = ^1000; for ^10000 { @a[$_] for ^1000 }; say now - INIT now
[15:58:02] <camelia> rakudo-moar 10b327292: OUTPUT: «0.375355557␤»
[15:58:11] <lizmat> m: my @a = ^1000; for ^10000 { @a.AT-POS(0) for ^1000 }; say now - INIT now
[15:58:12] <camelia> rakudo-moar 10b327292: OUTPUT: «0.238405566␤»
[15:58:18] <lizmat> huh?
[15:58:20] <lizmat> m: my @a = ^1000; for ^10000 { @a[$_] for ^1000 }; say now - INIT now
[15:58:21] <camelia> rakudo-moar 10b327292: OUTPUT: «0.375450081␤»
[15:58:24] <lizmat> m: my @a = ^1000; for ^10000 { @a.AT-POS(0) for ^1000 }; say now - INIT now
[15:58:24] <camelia> rakudo-moar 10b327292: OUTPUT: «0.240822734␤»
[15:58:44] <lizmat> intriguing, I don't see a difference on my MacOS box  
[15:59:46] <lizmat> m: my @a = ^1000; for ^10000 { @a.AT-POS($_) for ^1000 }; say now - INIT now   # fuh
[15:59:47] <camelia> rakudo-moar 10b327292: OUTPUT: «0.346554665␤»
[15:59:55] <lizmat> *duh
[16:00:01] <lizmat> m: my @a = ^1000; for ^10000 { @a[$_] for ^1000 }; say now - INIT now
[16:00:02] <camelia> rakudo-moar 10b327292: OUTPUT: «0.365621664␤»
[16:00:06] <lizmat> m: my @a = ^1000; for ^10000 { @a.AT-POS($_) for ^1000 }; say now - INIT now   # fuh
[16:00:07] <camelia> rakudo-moar 10b327292: OUTPUT: «0.336668571␤»
[16:00:31] <lizmat> m: my int @a = ^1000; for ^10000 { @a[$_] for ^1000 }; say now - INIT now
[16:00:32] <camelia> rakudo-moar 10b327292: OUTPUT: «0.398720313␤»
[16:00:43] <lizmat> m: my int @a = ^1000; for ^10000 { @a.AT-POS($_) for ^1000 }; say now - INIT now
[16:00:44] <camelia> rakudo-moar 10b327292: OUTPUT: «0.454114283␤»
[16:00:49] <lizmat> m: my int @a = ^1000; for ^10000 { @a.AT-POS($_) for ^1000 }; say now - INIT now
[16:00:50] <camelia> rakudo-moar 10b327292: OUTPUT: «0.449291634␤»
[16:00:55] <lizmat> m: my int @a = ^1000; for ^10000 { @a[$_] for ^1000 }; say now - INIT now
[16:00:56] <camelia> rakudo-moar 10b327292: OUTPUT: «0.376347564␤»
[16:01:22] <lizmat> grondilu: I'd say, stick with postcircumfix []  :-)
[16:04:53] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/09/13/2021-37-receding/
[16:06:53] <Altreus> there it is!
[16:10:06] <lizmat> yup :-)
[16:10:29] <Altreus> I like Flavio's blogs
[16:11:10] <Altreus> polettix: I like your blogs :D
[16:16:17] <Altreus> The point about "all but the last one" for a slurpy argument is interesting - it immediately makes me think of prolog
[16:16:32] <Altreus> Is raku introspective enough to even have this ability?
[16:20:20] <Altreus> lizmat: your first twitter item has the wrong link :)
[16:20:33] <moritz_> counting lists from the end is a bad idea if you have lazy lists
[16:25:32] <Altreus> ah yes lazy
[16:25:41] <Altreus> can we have "isn't"?
[16:25:49] <Altreus> sub x (List isn't lazy \x)
[16:26:25] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:28:09] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[16:34:21] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:53:23] *** Joins: keutoi (~keutoi@157.47.67.159)
[17:25:05] <guifa> lizmat++ (you've been pushing these out much earlier these days haha I used to have to wait until the end of work to read them!)
[17:28:49] <grondilu> degenerate cases are so annoying.  Like if I want to turn an integer into a blob8, I can usually write blob8.new: $n.polymod(256 xx *), but that doesn't work for $n == 0
[17:29:45] <grondilu> raku: say blob8.new: 0.polymod(256 xx *)
[17:30:00] <grondilu> m: say blob8.new: 0.polymod(256 xx *)
[17:30:00] <camelia> rakudo-moar 10b327292: OUTPUT: «Blob[uint8]:0x<>␤»
[17:30:28] <grondilu> Am I supposed to not use polymod for this?
[17:37:08] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[17:40:45] *** Quits: avar (avar@vm.nix.is) (Read error: Connection reset by peer)
[17:44:28] *** Joins: avar (avar@vm.nix.is)
[18:04:11] <Altreus> lizmat: also your first list item of Core Developments appears to have a font colour override
[18:11:48] <Util> grondilu: polymod is what I would use. I had not thought about that degenerate case; I would use `|| 0` to solve it, but I agree that it is annoying to have to remember to do so.
[18:12:01] <Util> m: for 258,42,0 { say Blob.new( .polymod(256 xx *) || 0) }
[18:12:02] <camelia> rakudo-moar 10b327292: OUTPUT: «Blob:0x<02 01>␤Blob:0x<2A>␤Blob:0x<00>␤»
[18:12:15] <Util> Now that I think about it, `0.polymod($any_positive_integer)` should return `0`, not the empty list, IMHO.
[18:12:19] <Util> Maybe this is a bug.
[18:14:49] <Util> Roast does not test it: https://github.com/Raku/roast/blob/master/S32-num/polymod.t
[18:16:35] <Altreus> is there a bot to show docs?
[18:16:55] <Altreus> or, reframed: I'm too lazy to open a new browser tab when I'm already in IRC
[18:23:35] <Altreus> when you give polymod a list n xx *, what is the *?
[18:25:13] <grondilu> Util: I don't think this is a bug.  As written in the doc : "The last non-zero value will be the last remainder."
[18:25:29] <grondilu> so if the first value is zero, then you get nothing.
[18:26:42] <Altreus> the "implementation" in the doc also implies that, because it's described in terms of a for loop
[18:26:55] <Altreus> eh, no, wait
[18:27:06] <Altreus> the implementation implies you get something because it should iterate over your integer
[18:27:11] <Altreus> m: say 0 mod 10
[18:27:11] <camelia> rakudo-moar 10b327292: OUTPUT: «0␤»
[18:27:33] <grondilu> though it's a bit confusing, since polymod doesn't only give remainders, but also quotients
[18:28:02] <Altreus> in fact the docs show that if you keep giving it a bunch of things that mod to 0 you still get them:   say 120.polymod:      1, 10, 10², 10³, 10⁴;  # OUTPUT: «(0 0 12 0 0 0)␤»
[18:28:18] <Altreus> so 0.polymod(list) should give you n+1 zeroes
[18:28:42] <Altreus> "The number of remainders will be always one more item than the number of given divisors"
[18:28:56] <Altreus> zero shouldn't have any special behaviour at all, as far as I can see
[18:29:27] <grondilu> yes but : "If the divisors are given as a lazy list, runs until the remainder is 0 or the list of divisors is exhausted."
[18:29:32] <Altreus> ah
[18:29:42] <Altreus> but do you get at least one 0?
[18:29:47] <grondilu> nope
[18:29:54] <Altreus> m: say 10.polymod(10 xx *)
[18:29:54] <camelia> rakudo-moar 10b327292: OUTPUT: «(0 1)␤»
[18:29:58] <Altreus> oh
[18:30:07] <grondilu> m: say blob8.new: 0.polymod(256 xx *)
[18:30:07] <camelia> rakudo-moar 10b327292: OUTPUT: «Blob[uint8]:0x<>␤»
[18:30:09] <Altreus> that's not how maths works
[18:30:11] <Altreus> :D
[18:30:33] <Altreus> m: say 10.polymod(1 xx *)
[18:30:33] <camelia> rakudo-moar 10b327292: OUTPUT: «(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...)␤»
[18:30:35] <Altreus> !
[18:30:46] <Altreus> I've been lied to
[18:30:49] <grondilu> that's not right
[18:31:27] <grondilu> or rather, LTA
[18:32:24] <grondilu> also arguably that's a degenerate case too
[18:32:57] <Altreus> hrm
[18:37:21] <grondilu> .../src/core.c/Real.pm6#L74
[18:37:40] <grondilu> "last if $lazy and not $more;"
[18:38:18] <grondilu> when divisor is 1, $more is constant
[18:40:09] <Altreus> right, div 1 - makes sense
[18:40:40] <Altreus> Except that's not how you check that the remainder is not 0 ;)
[18:41:00] <Altreus> I guess it has to be a lazy list *entirely* of 1s
[18:41:56] <grondilu> I don't think so
[18:42:19] <Altreus> I mean if it's not then it'll end due to the list, so it's a very edge case
[18:42:20] <grondilu> 1 cannot be a remainder in this case
[18:43:20] <grondilu> an infinite list of zeros actually makes some sense
[18:44:06] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:44:08] <grondilu> it is, however, very much a degenerate case, and maybe the function should fail instoad
[18:44:18] <Altreus> except that the doc says it should stop
[18:44:28] <Altreus> I'll pop an issue in and see what people think
[18:44:58] <grondilu> I think the issue is with the doc, not the function.
[18:45:19] <Altreus> this will give people the option to decide which :)
[18:45:30] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:45:33] <grondilu> fair point
[18:49:05] *** Quits: leont (sid489095@highgate.irccloud.com) ()
[18:49:20] *** Joins: leont (sid489095@id-489095.uxbridge.irccloud.com)
[18:50:16] <Altreus> https://github.com/rakudo/rakudo/issues/4523 :)
[18:54:36] <Altreus> lizmat: perhaps the weekly could also highlight GH issues that turn into discussions? Unless it already does and I've not remembered :)
[18:56:44] <moritz_> Altreus: if you notice an issue turning into a weekly-worthy discussion, just write "weekly: " and then the URL to the issue in here. There's a bot that collects those links
[18:56:54] *** Quits: rjbs (sid498898@highgate.irccloud.com) ()
[18:57:09] *** Joins: rjbs (sid498898@id-498898.uxbridge.irccloud.com)
[19:04:41] <grondilu> I think ideally polymod should be written with &infix:mod and some clever FP tricks.  Not necesserarily in the core, but as part of the documentation, to clarify what polymod does.
[19:05:43] <grondilu> so that we can better assess what the degenerate cases should be.
[19:06:43] <dakkar> https://github.com/rakudo/rakudo/blob/b14d404a195e08a0a12486d0c4ac0d53d77a1ac5/src/core.c/Int.pm6#L119-L149 it's definitely written using `mod`
[19:08:30] <Util> Altreus: `256 xx *` is an infinite list of 256, 256, 256....  (Answering the q from 45 minutes ago)
[19:09:02] <grondilu> Isn't there a way to write it with reduce and zip or something?
[19:10:09] <dakkar> maybe? /me tries
[19:10:25] <Geth> ¦ raku-mode: 095b8666e3 | (Tom Browder)++ (committed using GitHub Web editor) | CHANGELOG.md
[19:10:25] <Geth> ¦ raku-mode: Bump version for PR #59
[19:10:25] <Geth> ¦ raku-mode: review: https://github.com/Raku/raku-mode/commit/095b8666e3
[19:11:53] <Geth> ¦ raku-mode: 155b0b7a4a | (Tom Browder)++ (committed using GitHub Web editor) | CHANGELOG.md
[19:11:53] <Geth> ¦ raku-mode: Update CHANGELOG.md
[19:11:53] <Geth> ¦ raku-mode: review: https://github.com/Raku/raku-mode/commit/155b0b7a4a
[19:12:46] <Geth> ¦ raku-mode: ef229addc0 | (Tom Browder)++ (committed using GitHub Web editor) | CHANGELOG.md
[19:12:46] <Geth> ¦ raku-mode: Update CHANGELOG.md
[19:12:47] <Geth> ¦ raku-mode: review: https://github.com/Raku/raku-mode/commit/ef229addc0
[19:16:57] <Geth> ¦ raku-mode: eaac071f17 | (Tom Browder)++ (committed using GitHub Web editor) | CHANGELOG.md
[19:16:57] <Geth> ¦ raku-mode: Correct PR merge date
[19:16:57] <Geth> ¦ raku-mode: review: https://github.com/Raku/raku-mode/commit/eaac071f17
[19:23:04] *** Quits: frost (~frost@59.71.242.61) (Quit: Connection closed)
[19:26:35] <Altreus> Util: that's what I thought, but the docs say it can't be infinite!
[19:27:13] <Altreus> grondilu: the docs *do* show it in terms of mod and div=
[19:27:43] <Altreus> from which one would expect 0.polymod(anything) would return a single 0
[19:28:08] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[19:28:54] <Util> grondilu, dakkar: This is the closest I got to zip/reduce. AFK now.
[19:28:55] <Util> m: say 3 + 5* 256 + 7*256*256;
[19:28:55] <camelia> rakudo-moar 10b327292: OUTPUT: «460035␤»
[19:28:59] <Util> m: sub pm ($acc is copy) {return (256 xx *).produce({ sink $^a; my $x = $acc mod $^b; $acc div= $^b; last if !$x; $x; }).skip.head(12); }; say pm(460035);
[19:29:00] <camelia> rakudo-moar 10b327292: OUTPUT: «(3 5 7)␤»
[19:29:31] <dakkar> the gather/for/take way is clearer to me
[19:30:07] <dakkar> (especially the way it's written for Real; the Int one is essentially the same but split in lazy/not-lazy maybe for performance reasons)
[19:34:45] <Altreus> the gather/take for Int also fails to stop at the documented time
[19:35:06] <dakkar> the docs are wrong ☺
[19:35:37] <Altreus> well it should be documented that they're wrong ;)
[19:35:49] <dakkar> (roast says so: `is 86400.polymod(60), (0,1440)`
[19:37:47] <Altreus> I meant that a lazy list should stop when the mod is zero
[19:38:18] <dakkar> yes, sorry, wrong line
[19:38:25] <dakkar> https://github.com/Raku/roast/blob/master/S32-num/polymod.t#L11
[19:39:09] <Altreus> oh but wait that means the doc was right
[19:39:34] <Altreus> which means the infinite-ones behaviour is wrong :)
[19:39:46] <Altreus> I note that zero is not part of that list
[19:39:51] <Altreus> the output I mean
[19:40:09] <dakkar> sure is, it's the first element
[19:40:09] <Altreus> ah it's the first part, not the last
[19:40:21] <dakkar> 123456780 mod 10 == 0
[19:40:51] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:41:10] <Altreus> hmm
[19:42:53] <Altreus> my brain is failing to grasp at a point related to this "base conversion" example in the docs
[19:43:31] <Altreus> But it's along the lines of, if you can use polymod to do a base conversion it stands to reason it should be able to return multiple zeroes in a row
[19:43:51] <Altreus> yes
[19:43:58] <Altreus> m: say 65.polymod(2 xx *)
[19:43:59] <camelia> rakudo-moar 10b327292: OUTPUT: «(1 0 0 0 0 0 1)␤»
[19:44:00] <dakkar> yes
[19:44:12] <Altreus> ^ polymod cannot possibly stop when it gets a zero in a lazy list
[19:44:21] <Altreus> I'll add it to my issue
[19:44:37] <Altreus> oh it has been noted
[19:45:26] <dakkar> and I've added the link to roast
[19:45:52] <dakkar> re: infinite list of 1s, the current behavious looks good to me
[19:46:21] <dakkar> (base-1 is a degenerate case and should not be catered to)
[19:47:01] <dakkar> otoh, `0.polymod(@anything)` should probably return `(0,)` instead of `()`…
[19:47:14] <Altreus> yes, with an example of returning multiple zeroes in a row it's clear the docs are misworded
[19:47:36] <Altreus> my maths brain doesn't come up with such conclusions as quickly as people more knee-deep in the knowledge!
[19:47:56] <dakkar> that's why there's more than one person building this whole thing 😁
[20:04:26] <Altreus> oh I thought it was entirely jnthn
[20:39:18] *** Quits: keutoi (~keutoi@157.47.67.159) (Quit: leaving)
[20:41:19] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[21:10:24] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 265 seconds)
[21:51:47] *** Joins: melezhik (~melezhik@174.128.60.162)
[21:51:47] <melezhik> .
[21:56:37] <Altreus> .
[21:57:52] *** Quits: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[22:19:00] *** Quits: pjlsergeant (sid143467@id-143467.stonehaven.irccloud.com) ()
[22:19:16] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[22:32:43] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:34:58] *** Quits: zostay (sid170293@id-170293.stonehaven.irccloud.com) ()
[22:35:13] *** Joins: zostay (sid170293@id-170293.hampstead.irccloud.com)
[22:39:10] *** Quits: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net) (Quit: Pipe Terminated)
[22:43:10] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 240 seconds)
[22:43:28] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 252 seconds)
[22:46:40] *** Joins: xinming (~xinming@115.219.33.88)
[22:56:34] *** Joins: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net)
[22:56:40] *** Quits: kjp (~kevin@180.216.227.52) (Ping timeout: 252 seconds)
[22:58:31] *** Joins: kjp (~kevin@180.216.43.175)
[23:04:03] <melezhik> when I upload my module to zef should I remove (eventually) it from PAUSE index?
[23:04:48] <melezhik> I have 2 Sparky listed now on rakuland - https://raku.land/?q=Sparky which is confusing ...
[23:14:18] *** Quits: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 260 seconds)
[23:21:08] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[23:24:34] *** Joins: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net)
[23:25:19] <tonyo> melezhik: if you'd like to.  there's been a lot of discussion on how to de-dupe (or whether to) in #raku-land
[23:25:58] <tonyo> it seems like it shouldn't be on the consumer side to dedupe but up to the author on how they're presented because they are _technically_ different dists
[23:30:47] *** Quits: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 268 seconds)
[23:32:34] *** Joins: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net)
[23:35:08] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[23:43:26] *** Quits: kawaii_ (sid345572@id-345572.stonehaven.irccloud.com) ()
[23:43:40] *** Joins: kawaii_ (sid345572@id-345572.hampstead.irccloud.com)
[23:46:20] <El_Che> you "technically" won :)
[23:47:09] <tonyo> technically is the best kind of ally
[23:47:25] <El_Che> it's like winning a boxing match by points
[23:48:29] <El_Che> just playing with words here, technically not making a point
