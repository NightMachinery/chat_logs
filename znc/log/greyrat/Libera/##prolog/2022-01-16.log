[00:06:15] <lf94> yeah yeah
[00:06:23] <lf94> I think I noticed my used of ; and , is wrong
[00:06:31] <lf94> I thought ; was conjuction but it's disjunction
[00:06:55] <lf94> Also there is a statement which is straight up wrong; did you notice which? ;)
[00:07:14] <lf94> I'm also now looking at calculating game theory graphs with prolog
[00:07:26] <lf94> because I believe they are more useful in these types of arguments
[00:07:47] <lf94> prolog as a "language of argument" is actually a huge usecase I see _no one_ talk about!
[00:07:56] <lf94> even just for regular people
[00:08:27] <lf94> yauhsien:
[00:08:56] <lf94> (Sorry for pinging if it's annoying. I just noticed this channel is ultra silent and don't want to lose you X)
[00:34:07] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:42:40] *** Joins: skapata (~Skapata@191.177.185.183)
[00:42:40] *** Quits: skapata (~Skapata@191.177.185.183) (Changing host)
[00:42:40] *** Joins: skapata (~Skapata@user/skapata)
[00:51:49] *** Joins: rgrinberg (~textual@2806:101e:7:4889:70e9:6f65:e573:10f5)
[01:49:27] <aindilis> lf94: that's super interesting - game theory graphs, argumentation, etc.  do you have code anywhere?
[01:49:39] <aindilis> I see a github (and a Kolmogorov.sh - awesome)...
[01:50:20] <aindilis> cool, Emacs too
[01:52:51] <aindilis> hasCapability([ePR,aSPIC,aSPICPlus,arguenet,argumentative,carneades,caSAPI,aSPARTIX,argdown],argumentation).
[01:54:14] <aindilis> it's been hard to find a good game theory graph system
[01:56:14] <aindilis> https://gametheorysociety.org/game-theoretic-software/
[01:56:25] <aindilis> http://gambit.sourceforge.net/
[01:56:59] <aindilis> https://en.wikipedia.org/wiki/General_game_playing
[01:57:06] <aindilis> https://ludii.games/
[01:58:37] <aindilis> https://www.researchgate.net/publication/221539739_Towards_a_Framework_for_Management_of_Strategic_Interaction
[01:58:52] <aindilis> http://jason.sourceforge.net/
[02:02:08] <aindilis> would be neat to use argdown's LSP syntax with Emacs
[02:03:29] <aindilis> bbiab
[02:10:53] *** Parts: freem (~quassel@166.ip-51-178-51.eu) (Parting joining some party.)
[02:22:51] <lf94> aindilis: I found this person who's already done it
[02:23:03] <lf94> Very cool actually. Looks like they quit programming and became a doctor!
[02:23:21] <lf94> aindilis: yeah, my github is pretty interesting :)
[02:23:27] <aindilis> :)
[02:23:30] <lf94> > emacs
[02:23:35] <lf94> what did I do involving emacs? XD
[02:23:42] <aindilis> spacemacs something
[02:23:57] <lf94> https://github.com/tyleryasaka/game-theory-modeling
[02:23:59] <aindilis> https://github.com/lf94/dotspacemacs
[02:24:02] <aindilis> ty!  oh
[02:24:19] <lf94> Ah yeah, that's when I used emacs for a bit
[02:24:23] <lf94> I use kakoune now
[02:24:28] <aindilis> cool, googling
[02:24:33] <lf94> All other times, used vim
[02:25:16] <lf94> Gotta go but check back more often! XD
[02:25:19] <aindilis> kk o/
[02:25:32] <lf94> No one has pointed out yet where in my prolog proof it's wrong
[02:25:37] <lf94> I'll just say it
[02:25:51] <lf94> unvaccinated(symptoms(X)) :- symptoms(bad, X).
[02:25:59] <aindilis> hehe
[02:26:00] <lf94> This is not necessarily going to have a bad outcome.
[02:26:20] <lf94> unvaccinated person may have no symptoms
[02:26:41] <lf94> aindilis: are you heavily into prolog or just a hobbyist user too?
[02:26:59] <aindilis> well, I spend a heavy amount of time on it, but have not reached a great skill level
[02:27:06] <aindilis> http://freelifeplanner.org
[02:27:23] <aindilis> today I integrated Jason + SWI-PL
[02:27:34] <aindilis> couldn't figure out how to do it properly, so I poll
[02:28:03] <aindilis> but I'm hoping Jason (which uses Logic Programming for its representation) will finally bestow the "agency" I need from Prolog
[02:28:21] <aindilis> but yeah, let's chat more later!
[02:28:24] <aindilis> when you're back
[02:28:47] <aindilis> I'd love to do more stuff with argumentation and game theory
[02:29:09] <aindilis> http://jason.sf.net
[02:29:43] <aindilis> you should definitely see Logicmoo at some point
[02:30:07] <aindilis> https://logicmoo.org/xwiki/bin/view/Main/Developer/
[02:31:53] <aindilis> bbiab ttys! o/
[03:16:46] <lf94> I tried to access their stuff but always 404 or something
[03:16:58] <lf94> that link is to first one of theirs that work
[03:18:07] <lf94> what is agency? 
[03:18:22] <aindilis> srry the logicmoo.org link is the first one that works?
[03:19:02] <aindilis> autonomous decision making?
[03:19:12] <aindilis> *agency =
[03:19:52] <aindilis> BDI multi-agent-oriented programming adds multiple loci of control
[03:21:26] <aindilis> it's not "true" agency, but it mimics it to a greater extent than not using it afaict.  it allows goal setting and achievement in dynamic and uncertain environments
[03:22:18] <aindilis> like PDDL planners are deliberative, but except for grandrew's metaplanner they mostly don't allow adding goals dynamically
[03:23:45] <aindilis> so calling PDDL from Jason makes some amount of sense.  That's actually what Peleus does
[03:24:33] <aindilis> oh, here's something that might interest you:
[03:27:10] <aindilis> https://smart-pucrs.github.io/projects/
[03:27:37] <aindilis> specifically the: Argumentation-Based Framework
[03:27:44] <aindilis> (but other stuff too)
[03:27:59] <lf94> what is an agi
[03:28:15] <aindilis> AGI := Artificial General Intelligence
[03:28:49] <aindilis> the idea is most AI today is "narrow" or weak AI that can only solve one class of problems, but AGIs are supposed to be general and solve pretty much everything
[03:29:30] <aindilis> the term originated as far as I can tell in 2006, I became so focused on "AI" that I cannot call it AGI
[03:29:35] <aindilis> *prior to 2006
[03:30:11] <aindilis> I think the Math/CS approach to AI is the way to go personally
[03:30:49] <aindilis> stuff like this: https://complexityzoo.net/Complexity_Zoo
[03:35:12] <aindilis> (from my limited understanding, there hasn't been any well-defined problem that has been shown to human-solvable but not computer-solvable).
[03:35:51] <aindilis> https://www.maa.org/press/maa-reviews/g-dels-disjunction <- this book looks good
[03:36:13] <aindilis> (on that subject I mean)
[03:40:09] <aindilis> *shown to be
[04:22:57] *** Quits: rgrinberg (~textual@2806:101e:7:4889:70e9:6f65:e573:10f5) (Ping timeout: 240 seconds)
[04:23:41] *** Joins: cmsmcq (~cmsmcq@65.19.36.46)
[04:40:32] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[04:45:02] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Ping timeout: 250 seconds)
[04:48:17] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[04:52:32] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Ping timeout: 240 seconds)
[04:53:03] *** Quits: sakasama (~sakasama@user/sakasama) (Remote host closed the connection)
[05:08:51] <yauhsien> lf94: (thanks for pinging. i was just leaving a word then went to sleep in my time zone.)
[05:27:25] *** Joins: sakasama (~sakasama@user/sakasama)
[05:29:17] <yauhsien> prolog channel is cute as silent. and web discussion areas about prolog are always annoyed by students claiming to acquire solutions for their homework by paying money, wtf.
[05:39:33] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[05:46:14] <yauhsien> lf94: in your code you even tried using `=` to build some relationships between two facts or between two properties.
[05:48:49] <yauhsien> lf94: but `=` is for unification, and those statements you wrote won't be unified.
[05:54:11] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:00:44] <lf94> yauhsien they will it's like executing in the repl
[06:08:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[06:32:02] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[06:41:18] *** Quits: sakasama (~sakasama@user/sakasama) (Remote host closed the connection)
[06:46:40] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[06:48:26] <lf94> :- initialization forall(prove(X), writeln(X)). is apparently the "standard way" to invoke the repl-like behavior in a file
[07:15:21] *** Joins: sakasama (~sakasama@user/sakasama)
[07:19:30] <yauhsien> lf94: actually, no. https://github.com/YauHsien/vaccine-game/blob/main/assets/ss%202022-01-16%20am%2011.44.11.png
[07:20:51] <lf94> The thing I read told me to load the file via prolog <file> and then "make."
[07:21:20] <lf94> Anyway, I'm having a really hard time defining "good" and "bad" and unifying them
[07:21:46] <lf94> good. bad :- not(good). seems to be close, but when I go to unify, it's always "false."
[07:22:21] <lf94> Then I tried: good(true). bad(true) = not(good(true)). bad(false) = good(true).
[07:22:23] <lf94> But same thing
[07:27:55] <aindilis> so asserting "good." into the KB, then saying bad :- not(good).  if you try calling the goal "bad." it will look to see if "good." is absent from the KB, but you asserted "good." so bad will be false.
[07:28:37] <lf94> Actually I got it, it's much simpler than I was thinking
[07:28:42] <aindilis> cool, how?
[07:28:52] <lf94> good. bad. good \= bad.
[07:29:00] <lf94> I'm not thinking enough in terms of unification
[07:29:12] <lf94> good will not unify to bad
[07:29:21] <aindilis> where are you unifying?  in prove/1?
[07:29:22] <lf94> proving good is not bad, bad is not good
[07:29:29] <lf94> Yeah
[07:29:41] <lf94> I have to update the script in a bit
[07:29:44] <aindilis> I see
[07:29:57] <aindilis> so prove(X) evaluates to true iff X is true?
[07:30:45] *** Joins: yauhsien_ (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[07:30:45] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:31:37] <aindilis> so prove/1 is a little confusing, it will never unify the way it is written
[07:32:04] <lf94> Looks like I messed up
[07:32:06] <lf94> Yeah
[07:32:15] <aindilis> for instance, every clause separated by ; will not unify simply because the predicate is different, i.e. virus and person don't unify for instance.
[07:32:27] <aindilis> what I think you need is to write an interpreter
[07:33:20] <aindilis> so like prove(X) :- holds(virus(amount,increase,X),Situation) ; ..
[07:33:58] <aindilis> generally you can say holds(Statement,Situation), and that is supposed to be true only if the Statement satisfies the Situation.
[07:34:15] <aindilis> this is a complex problem, is this for a class?
[07:35:10] <aindilis> so you could say holds(iff(virus(amount,increase,X),person(antibodies(absent,X))),Z).
[07:35:26] <aindilis> or something like that
[07:36:03] <aindilis> or maybe holds(implies(person(antibodies(absent,X)),virus(amount,increase,X)),Z)
[07:36:45] <aindilis> if this is a personal project and not a class project, I have an idea how to implement this
[07:37:07] <aindilis> then you have to write the interpreter which does the following:
[07:38:15] <aindilis> holds(or(not(A),B),Z) :- holds(implies(A,B),Z).
[07:38:53] <aindilis> holds(or(A,B),Z) :- holds(A,Z) ; holds(B,Z).
[07:39:00] <aindilis> holds(and(A,B),Z) :- holds(A,Z), holds(B,Z).
[07:39:25] <aindilis> holds(not(A),Z) :- not(holds(A,Z)).
[07:39:42] <aindilis> does this make sense?  that first one with the implies might be wrong
[07:39:56] <aindilis> but pretty sure the other 3 are okay
[07:41:14] <aindilis> Z can be a list of fluents for instance Z = [virus(amount,increase,0),person(antibodies,0),_].  or something
[07:41:47] <aindilis> then you write holds(A,Z) :- member(A,Z).  or something like that?  ianae
[07:43:22] <aindilis> Have a look at Golog of FLUX (prolog programs).
[07:43:29] <aindilis> *Golog or Flux even
[07:44:11] <lf94> yeah it's just a personal exercise
[07:44:16] <aindilis> cool!
[07:44:51] <lf94> Yeah it makes sense. I'm a little disappointed in it's a lot of boilerplate it seems
[07:45:03] <lf94> Unification really feels strict
[07:45:06] <aindilis> well you have to write a theorem prover
[07:45:16] <lf94> Am I better off continuing to use Coq?
[07:45:22] <aindilis> not necessarily
[07:45:25] <aindilis> there is PTTP
[07:45:30] <aindilis> and this one: (one sec)
[07:45:41] <lf94> Prolog drew me to it because I thought it was a bit more wieldy 
[07:46:15] <lf94> I was actually learning Coq last year - did the first several advent of code problems with it
[07:46:44] <aindilis> sorry I cannot find the one, but there is a powerful new FOLE ATP system written in Prolog
[07:46:48] <aindilis> that's awesome!
[07:47:34] <lf94> Now I'm thinking if I continue on here...lol
[07:47:47] <aindilis> I'm looking up the ATP system
[07:48:18] <lf94> I thought if the system could find an X which both sides can use, or if both sides "reduce" to the same "thing", it's true
[07:48:55] <lf94> i.e. good :- true. good = true. But this is false...
[07:49:43] <aindilis> yeah unification is interesting, I don't have a full understanding of it to explain, but it's kinda about checking whether syntactic equality is possible.
[07:49:56] <aindilis> so like p(A,y) = p(x,B) will unify
[07:50:02] <aindilis> (I think)
[07:50:17] <lf94> Yeah yeah.
[07:50:33] <lf94> It will, because A = x. and B = y. and thus when replaced they "equal"
[07:50:49] <aindilis> found it
[07:50:50] <aindilis> http://cs.christophwernhard.com/pie/
[07:51:17] <aindilis> I think VampireKIF might work for you
[07:51:19] <lf94> So how do you compare with anything else?...
[07:52:01] <aindilis> can you elaborate?  what do you mean compare?
[07:52:29] <lf94> Like how would you compare good and bad?
[07:52:31] <lf94> X)
[07:52:49] <aindilis> so, just to be clear, you are trying to prove that vaccination helps with hospitalization outcomes, using logic?
[07:52:56] <lf94> Thank you for sharing that, this is very interesting
[07:53:00] <lf94> yeah
[07:53:09] <lf94> Obviously the problem itself is not that simple
[07:53:17] <lf94> But it's just an exercise
[07:53:31] <aindilis> oh, so you're not doing this to win hearts and minds?  just to learn the tech?
[07:54:05] <aindilis> I think a proof of that would be a good thing to show people who are on the fence
[07:54:10] <lf94> yeah
[07:54:15] <lf94> XD
[07:54:17] <aindilis> :)
[07:54:22] <aindilis> oops door knock one sec
[07:54:24] <lf94> ok
[07:54:38] <aindilis> bac
[07:54:40] <aindilis> *back
[07:54:40] <lf94> I mean, I would like to win their hearts and minds, push them over the fence
[07:54:45] <aindilis> yeah, me too
[07:54:50] <lf94> But using this logic alone is not enough
[07:54:57] <lf94> That's why I have the game theory graph underneath
[07:55:03] <lf94> I want to combine game theory with prolog
[07:55:08] <aindilis> cool!
[07:55:16] <aindilis> what time do you have btw?
[07:55:31] <lf94> 11:25pm, so maybe 3 hours lol
[07:55:50] <lf94> (I'm a night owl)
[07:55:54] <aindilis> it's 11:25 pm here and I have to get going to bed soon, but I'd like to see about helping out on your project a different day.  I'm busy Sunday, but should be free Monday if you don't mind waiting.
[07:56:04] <lf94> all good
[07:56:11] <lf94> I have some cad software I want to work on anyway
[07:56:24] <aindilis> cool, alright ping me if I don't get back to you.  I'm putting this in my Org-agenda though
[07:56:34] <lf94> Roger o7
[07:56:52] <lf94> Have a nice evening :)
[07:56:53] <aindilis> I have been trying to "prove" things to people too.  I think it could be part of a larger persuasive system.
[07:56:55] <aindilis> ty you too!
[07:57:01] <lf94> >  I think it could be part of a larger persuasive system. 
[07:57:03] <lf94> Exaaaactly this.
[07:57:05] <aindilis> :)
[07:57:11] <lf94> Reviewable, executable proof.
[07:57:15] <aindilis> I will send notes on it in a bit.  Awesome!
[07:57:19] <aindilis> kk gnite!
[08:00:54] <lf94> Going to read through power of prolog
[08:04:52] <lf94> good :- true. bad :- not(good) \= good. :- good \= bad.
[08:04:59] <lf94> Got it :)
[08:15:37] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:17:34] *** Quits: yauhsien_ (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:18:07] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[08:30:48] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Read error: Connection reset by peer)
[08:32:13] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[08:51:46] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[09:12:03] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Ping timeout: 276 seconds)
[09:13:42] <lf94> I've stumbled on a way to write this so everything evaluates lazily or eagerly
[09:14:49] *** Quits: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22) (Quit: ERC (IRC client for Emacs 27.1))
[11:59:56] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:08:19] <yauhsien> lf94: actually i know your code won't work by reading your code, yet it's not i do not understand what you'd told that type `prolog case-for-mandatory-vaccine.txt"`. just by the same way you told, using `swipl code.txt` in my case, it never work.
[12:08:50] <lf94> the whole thing was bad anyway :)
[12:12:08] <yauhsien> btw, just in prolog when i write some `good` then it's `good` and other then it is `not(good)`. closed world assumption, you know.
[12:19:23] <lf94> if you re-try the code now yauhsien you should have better results
[12:19:50] <lf94> I did a game theory graph also
[12:20:01] <lf94> using prolog for the values
[12:24:52] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Remote host closed the connection)
[12:26:34] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[12:27:14] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Client Quit)
[12:47:18] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:48:58] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[12:52:02] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[12:53:32] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[13:07:49] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[13:08:25] *** Joins: dvyd (~dvyd@2a0d:6fc2:47b0:1800:251f:e417:4eb6:f68b)
[13:13:47] <dvyd> How can I get something like https://pastebin.com/zzieYctm to find that witness(john) is true because he saw attack(greg,sarah) and commit_crime(greg) is true due to attack(greg,sarah)? I'd like to define a number of actions like attack(X,Y) that make commit_crime(X) true, so I can just work with the commit_crime predicate. I think this is
[13:13:47] <dvyd> basically a question about how unification works, especially with nested predicates.
[14:40:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[14:52:46] *** Joins: kwon-young_ (~kwon-youn@2001:861:3dc0:4400:d529:8d16:4de5:a4a0)
[14:59:38] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:00:37] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[15:00:40] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[15:01:50] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:02:37] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[15:02:56] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[15:03:29] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[15:08:17] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[15:26:41] *** Joins: kwon-young (~kwon-youn@lcs07-lyo-176-188-228-64.sfr.lns.abo.bbox.fr)
[15:26:48] *** Quits: kwon-young_ (~kwon-youn@2001:861:3dc0:4400:d529:8d16:4de5:a4a0) (Ping timeout: 250 seconds)
[16:17:13] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[16:19:49] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:5d0c:5cd6:41ba:a0fc)
[16:19:49] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:5d0c:5cd6:41ba:a0fc) (Changing host)
[16:19:49] *** Joins: skapata (~Skapata@user/skapata)
[16:22:07] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:13:22] *** Quits: dvyd (~dvyd@2a0d:6fc2:47b0:1800:251f:e417:4eb6:f68b) (Quit: Client closed)
[17:32:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:26:02] *** Quits: kwon-young (~kwon-youn@lcs07-lyo-176-188-228-64.sfr.lns.abo.bbox.fr) (Ping timeout: 240 seconds)
[18:44:34] <stis> Tjaba prologeurs
[18:52:40] *** Joins: Everything (~Everythin@37.115.210.35)
[19:42:43] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[20:29:08] <krl_> stis: Tjena ^^
[20:29:14] *** krl_ is now known as krl
[20:56:51] <stis> Gat a new version of units.pl out, now this will work 
[20:56:54] <stis> 1:m === X, 2:m === Y, Z:m === (X**2+Y**2)**(1/2).
[20:57:17] <stis> works now with clpq
[21:01:29] <stis> previously ecponents was constrained to integers
[21:08:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[21:10:30] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[21:15:27] *** Joins: yauhsien (~Yau-Hsien@61-231-24-192.dynamic-ip.hinet.net)
[21:31:31] *** Quits: bkhl (~bkhl@user/bkhl) (Quit: ZNC - https://znc.in)
[21:51:14] *** Joins: bkhl (~bkhl@user/bkhl)
[21:54:12] *** Quits: bkhl (~bkhl@user/bkhl) (Client Quit)
[21:55:22] *** Joins: bkhl (~bkhl@user/bkhl)
[21:57:37] *** Quits: bkhl (~bkhl@user/bkhl) (Client Quit)
[21:58:12] *** Joins: bkhl (~bkhl@user/bkhl)
[22:07:40] *** Joins: Guest50 (~Guest50@85.148.77.184)
[22:08:47] *** Quits: Guest50 (~Guest50@85.148.77.184) (Client Quit)
[22:12:17] *** Joins: econo (uid147250@user/econo)
[22:14:24] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[22:33:32] <lf94> Too bad dyvd left, would've helped
[22:45:06] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:47:55] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[22:54:57] *** Joins: rgrinberg (~textual@2806:101e:7:2b:a509:6fda:5123:c5ae)
[23:32:16] *** Joins: kwon-young (~kwon-youn@lcs07-lyo-176-188-228-64.sfr.lns.abo.bbox.fr)
[23:56:37] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:58:29] *** Joins: skapata (~Skapata@user/skapata)
[23:59:36] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
