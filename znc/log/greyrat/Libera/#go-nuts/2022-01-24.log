[00:04:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[00:05:00] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[00:05:20] *** Quits: stealth[] (~stealth]@2001:9e8:36ea:6c00:fd84:9d19:d888:fc20) (Quit: Leaving)
[00:07:16] *** Joins: rvalue (~rvalue@user/rvalue)
[00:20:24] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[00:22:08] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[00:26:07] *** Quits: soxhlet (~soxhlet@81.171.29.137) (Quit: <---)
[00:26:30] *** Joins: soxhlet (~soxhlet@81.171.29.137)
[00:26:55] *** Joins: shka (~herr@109.231.0.226)
[00:29:46] *** Quits: soxhlet (~soxhlet@81.171.29.137) (Client Quit)
[00:32:11] *** Quits: Jad (~Nashmi@user/jad) (Quit: Benefits I derive from free­dom are largely the result of the uses of freedom by others, and mostly of those uses of freedom that I could never avail myself of.)
[00:33:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:40:05] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:41:09] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[00:47:10] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[00:47:27] *** Joins: mickey8 (~user@user/mickey)
[00:52:26] *** Quits: _rubik (~rubik@user/rubik/x-6853868) (Ping timeout: 245 seconds)
[01:00:15] *** Joins: _rubik (~rubik@user/rubik/x-6853868)
[01:01:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[01:03:32] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:25:3430:6d5f:c01) (Ping timeout: 240 seconds)
[01:04:01] *** Joins: cmbrnt (~cmbrnt@static.106.104.76.144.clients.your-server.de)
[01:10:08] <dostoyevsky2> I have N replica servers which I contact all via waitgroup+for+http... when the answer repeats the first time, I want to cancel all the pending http calls...  but I don't think a WaitGroup does support cancel
[01:11:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:11:38] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:11:46] <b0nn> if those calls are inflight - what do you want the cancel to do?
[01:11:51] *** Joins: mickey8 (~user@user/mickey)
[01:12:01] <ikke> contexts are for canceling. After the routines received the cancel request, they should update the wg so that it finishes
[01:12:06] <b0nn> I mean, send another call saying "ah, akshually, I don't want that now"
[01:12:40] <dostoyevsky2> b0nn: just close the socket... happens all the time with http I guess
[01:12:47] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:15:00] <b0nn> Yeah - think you need the launching routine to watch for a signal from something, like context, or a sync.Condition, and then react accordingly
[01:15:54] <b0nn> I mean,I don't /know/ of a "send a signal and everything understands that that means to drop what they're doing, you have to explicitly watch and drop yourself
[01:17:39] *** Joins: goldfish (~goldfish@user/goldfish)
[01:19:58] *** Joins: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net)
[01:20:29] *** Joins: vladoski (~foo@2001:b07:add:d406:dde:92e2:c03f:ad49)
[01:20:59] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:22:54] <dostoyevsky2> b0nn: kind of hard if they are inside a http.Client->Do() ...
[01:24:21] <dostoyevsky2> or one go routine which listens to the context containing another doing the http.Client stuff
[01:24:24] <b0nn> Yeah - I mean, I'm no expert in that direction, there might be a way to highjack that call such thatwhen a signal is received it will call some sort of close
[01:24:44] <b0nn> hijack
[01:26:07] <b0nn> I've got to figure out - I've been a big fan of fakes for increasing test coverage *but* this puts a variable into the package namespace, which breaks concurrency - so am trying to work out how to do that without adding a mutex
[01:26:28] <b0nn> I think I might have to pool calls inside the fake function stub :\
[01:29:54] <dostoyevsky2> https://go.dev/play/p/puNSF4oWOd- <- I try to get something working but I can't connect to any webserver it seems: panic: Get "http://www.google.com/": dial tcp: lookup www.google.com on 169.254.169.254:53: dial udp 169.254.169.254:53: connect: no route to host
[01:31:48] <foobaz> 169.254 is a link-local address, and it's trying to use that as a DNS server, which fails
[01:32:16] <foobaz> you need to fix your DNS configuration
[01:33:03] <dostoyevsky2> foobaz: I am running it inside go.dev's server
[01:33:14] *** Joins: walterwhip (~www@user/walterwhip)
[01:33:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[01:33:24] <dostoyevsky2> but I guess in the playground I can't use internet?
[01:33:26] <foobaz> maybe it prevents network connections for security purposes?
[01:33:36] <dostoyevsky2> yeah, makes sense...
[01:33:51] <dostoyevsky2> but then you also can't import many packages...
[01:34:19] <foobaz> it's a playground not a development environment
[01:34:34] <foobaz> your needs are beyond its scope
[01:36:13] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[01:38:10] *** Joins: et_ (~et@user/et)
[01:38:31] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[01:38:37] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[01:38:38] *** et_ is now known as et
[01:41:52] <dostoyevsky2> yeah, the playground seems to be running in a docker container with --net=none, doesn't have a network bridge... I guess that makes it a lot easier to maintain :-)
[01:42:39] <fizzie> It says so right there in the "About the Playground" section at the bottom.
[01:42:45] <fizzie> "The only communication a playground program has to the outside world is by writing to standard output and standard error."
[01:43:34] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[01:44:16] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:46:16] <b0nn> hmm I think there's more as it can (still) import external libs : eg. https://go.dev/play/p/koCNTYuouGw
[01:47:03] <fizzie> Arguably that's not the _program_ communicating with the outside world, but the build of the program.
[01:47:22] <dostoyevsky2> Also, uname -a tells me: `Linux 6b3943fc3d81 4.4.0 #1 SMP Sun Jan 10 15:06:54 PST 2016 x86_64 GNU/Linux' ... A Linux kernel from 2016??
[01:47:33] <b0nn> hmm, yes - the quote you pulled says that the *only* communication the playground makes...
[01:47:44] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[01:47:54] <b0nn> whereas, demonstrably, tit communicates with the outside world inother ways
[01:48:19] <b0nn> lol @typos - more tea
[01:49:17] *** Quits: vladoski (~foo@2001:b07:add:d406:dde:92e2:c03f:ad49) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:52:42] *** Joins: vladoski (~foo@2001:b07:add:d406:dde:92e2:c03f:ad49)
[01:54:00] <dostoyevsky2> yeah, go doesn't seem to be inside these container: https://go.dev/play/p/2uOxfopjIrr ... so there could be internet while compiling
[01:56:31] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:56:57] *** Quits: vladoski (~foo@2001:b07:add:d406:dde:92e2:c03f:ad49) (Ping timeout: 240 seconds)
[02:00:05] <albertito> dostoyevsky2: IIRC it doesn't run in a container, but it's a fake environment inside a nacl vm. Or at least it was at some point in the past, not sure if it has changed
[02:01:01] <dostoyevsky2> albertito: https://github.com/golang/playground/blob/master/sandbox/sandbox.go#L448
[02:01:21] <dostoyevsky2> Was just looking at it... they run a docker command, featuring --network=none and others
[02:02:51] <dostoyevsky2> which is kind of bold... because running user-supplied code inside a docker container doesn't do that much security-wise... e.g. AWS took over Firecracker, which is a lightweight VM for lambda... but I guess one also can use internet there... but it's ofc still a lot slower than just cgroup+chroot
[02:07:50] <albertito> dostoyevsky2: it uses a *gvisor* sandbox inside docker
[02:08:02] <albertito> (and thanks for the pointer, my knowledge was clearly outdated :)
[02:08:12] <dostoyevsky2> albertito: oh, interesting
[02:13:42] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:13:57] <dostoyevsky2> > LinuxVersion = "#1 SMP Sun Jan 10 15:06:54 PST 2016"
[02:14:06] <dostoyevsky2> So that's the gvisor...
[02:14:42] <dostoyevsky2> https://github.com/google/gvisor/blob/master/pkg/sentry/syscalls/linux/linux64.go#L36
[02:15:05] *** Joins: walterwhip (~www@user/walterwhip)
[02:17:03] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (Quit: Bridge terminating on SIGTERM)
[02:18:50] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[02:21:33] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[02:28:33] *** Joins: vladoski (~foo@2001:b07:add:d406:dde:92e2:c03f:ad49)
[02:28:46] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[02:29:42] *** Quits: vladoski (~foo@2001:b07:add:d406:dde:92e2:c03f:ad49) (Client Quit)
[02:40:31] <A_Dragon> dostoyevsky2: are you attacking goplay?
[02:40:34] <A_Dragon> network libraries are stubbed
[02:40:43] <A_Dragon> and IIRC it is in a container as well
[02:42:37] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:43:24] <dostoyevsky2> A_Dragon: not really, just was wondering why I couldn't write some demo code for making cancelable http calls in parallel in the playground.  I will try it again, but this time also supply the server inside the example
[02:43:37] <A_Dragon> yeah that'd be best
[02:43:46] <A_Dragon> it does HAVE networking but most of it is mocked or locked away
[02:43:59] <A_Dragon> it used to run on nacl
[02:45:02] <dostoyevsky2> but gvisor... is secure.... because they relay each linux syscall.. and apply some constraints... some syscalls are not supported... but I don't see how this helps with exploits in those syscalls that they just pass on...
[02:46:14] *** Joins: vladoski (~foo@2001:b07:add:d406:dde:92e2:c03f:ad49)
[02:47:26] *** Quits: vladoski (~foo@2001:b07:add:d406:dde:92e2:c03f:ad49) (Client Quit)
[02:54:34] *** Quits: bluedust_ (~bluedust@103.161.144.28) (Remote host closed the connection)
[03:04:20] *** Joins: vladoski (~foo@2001:b07:add:d406:dde:92e2:c03f:ad49)
[03:05:12] *** Quits: vladoski (~foo@2001:b07:add:d406:dde:92e2:c03f:ad49) (Client Quit)
[03:12:21] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[03:17:06] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[03:19:02] *** Joins: crashrep (~crashrep@user/crashrep)
[03:25:46] *** Quits: crashrep (~crashrep@user/crashrep) (Max SendQ exceeded)
[03:26:07] *** Joins: crashrep (~crashrep@user/crashrep)
[03:38:58] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (K-Lined)
[03:49:29] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:54:45] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:58:37] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:00:31] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 256 seconds)
[04:01:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:02:31] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[04:02:53] *** Joins: xiongxin (~Thunderbi@2409:8954:38c4:44c4:53d0:6eda:c8cd:506c)
[04:04:13] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[04:05:03] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (K-Lined)
[04:09:00] *** Joins: dgjhdgj2 (~sdfgsdfg@user/sdfgsdfg)
[04:09:35] *** Quits: moog (~moog@107.77.244.61) (Ping timeout: 256 seconds)
[04:11:05] *** Quits: dgjhdgj2 (~sdfgsdfg@user/sdfgsdfg) (K-Lined)
[04:12:07] *** Joins: moog (~moog@107.126.53.97)
[04:16:22] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[04:16:57] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[04:17:49] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Client Quit)
[04:20:53] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:23:53] *** Joins: walterwhip (~www@user/walterwhip)
[04:33:04] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[04:34:17] *** Quits: souvik_ (~souvik@103.82.81.39) (Ping timeout: 240 seconds)
[04:34:27] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:34:59] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:36:52] *** Joins: jespada (~jespada@87.74.36.188)
[04:38:17] *** Quits: xiongxin (~Thunderbi@2409:8954:38c4:44c4:53d0:6eda:c8cd:506c) (Ping timeout: 240 seconds)
[04:39:07] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[04:39:22] *** Joins: mickey8 (~user@user/mickey)
[04:40:45] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:45] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[04:47:30] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:49:23] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:51:37] *** Quits: leonarth (~leonarth@user/leonarth) (Ping timeout: 240 seconds)
[04:51:39] *** Joins: leonarth_ (~leonarth@user/leonarth)
[04:51:56] *** leonarth_ is now known as leonarth
[04:53:00] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 250 seconds)
[04:54:34] *** Joins: jerrywilliamsjr (~jude@174-083-043-211.res.spectrum.com)
[04:54:49] *** Joins: xiongxin (~Thunderbi@120.197.198.189)
[04:59:52] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:00:25] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[05:04:55] *** Joins: xiongxin1 (~Thunderbi@120.197.198.177)
[05:05:28] *** Joins: drewnix (~textual@c-73-118-230-129.hsd1.wa.comcast.net)
[05:06:15] *** Quits: xiongxin (~Thunderbi@120.197.198.189) (Ping timeout: 256 seconds)
[05:06:15] *** xiongxin1 is now known as xiongxin
[05:07:32] *** Parts: jerrywilliamsjr (~jude@174-083-043-211.res.spectrum.com) ()
[05:08:36] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 250 seconds)
[05:09:34] *** Quits: xiongxin (~Thunderbi@120.197.198.177) (Client Quit)
[05:09:51] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[05:09:56] *** Joins: leonarth_ (~leonarth@user/leonarth)
[05:10:23] *** Joins: novns (~novns@user/novns)
[05:12:17] *** Quits: leonarth (~leonarth@user/leonarth) (Ping timeout: 240 seconds)
[05:14:42] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:19:37] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[05:23:42] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[05:28:46] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[05:30:49] *** Joins: rvalue (~rvalue@user/rvalue)
[05:33:05] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[05:35:45] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[05:35:52] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[05:36:25] *** Joins: jerrywilliamsjr9 (~jerrywill@174-083-043-211.res.spectrum.com)
[05:39:25] *** Quits: leonarth_ (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[05:39:29] *** Joins: Hawker (~Hawker@user/hawker)
[05:44:01] <Hawker> what's this channel for? just messing around?
[05:44:12] <Hawker> or for the computer language go?
[05:46:36] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[05:47:16] <R2robot> for the Go language
[05:47:18] <R2robot> it's in the topic
[05:47:48] *** Joins: Atque (~Atque@user/atque)
[05:48:25] <Hawker> that's what I thought...
[05:48:27] <Hawker> ho hum
[05:48:33] <Hawker> see you later guys!
[05:48:36] *** Parts: Hawker (~Hawker@user/hawker) (Leaving)
[05:51:47] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:51:57] *** Joins: walterwhip (~www@user/walterwhip)
[05:53:41] *** Quits: drewnix (~textual@c-73-118-230-129.hsd1.wa.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:56:12] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[05:57:08] *** Quits: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net) (Quit: Leaving.)
[06:03:55] *** Quits: c10l (~c10l@user/c10l) (Quit: See ya! o/)
[06:06:27] *** Joins: c10l (~c10l@user/c10l)
[06:08:25] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:78aa:2398:7569:6444)
[06:09:01] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:09:34] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:78aa:2398:7569:6444) (Client Quit)
[06:11:52] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:15:40] *** Quits: jerrywilliamsjr9 (~jerrywill@174-083-043-211.res.spectrum.com) (Quit: Client closed)
[06:15:59] *** Joins: Authenticity (~integrity@194.5.49.34)
[06:16:38] *** Quits: ilpanda (ilpanda@user/ilpanda) (K-Lined)
[06:18:16] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[06:18:54] *** Joins: ilpanda (ilpanda@2607:5300:60:21b::1)
[06:19:45] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:26:31] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[06:26:54] *** Joins: califax- (~califax@user/califx)
[06:30:48] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[06:30:48] *** califax- is now known as califax
[06:31:02] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[06:31:28] *** Joins: zaz\ (~zaz@poneybl.eu)
[06:34:01] *** Joins: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net)
[06:34:46] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:39:18] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[06:39:41] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Client Quit)
[06:44:23] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[06:47:06] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:51:28] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:78aa:2398:7569:6444)
[06:51:46] *** Joins: souvik (~souvik@103.82.81.39)
[06:53:14] <yagamilito> Hello
[06:53:15] <yagamilito> Have no knowledge on go
[06:53:15] <yagamilito> i found this piece of code online
[06:53:16] <yagamilito> https://go.dev/play/p/T8473KTEdFK
[06:53:16] <yagamilito> i want to read messages from sqs queue
[06:53:17] <yagamilito> i guess message.Body in the code has my data from sqs queue
[06:53:17] <yagamilito> how can i use it in rest of my code ?
[06:53:18] <yagamilito> i tried using message.Body but code dint recognize what it is
[06:54:34] <b0nn> https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html
[06:55:07] *** Joins: monchi (~joints@143.198.92.132)
[06:55:14] <b0nn> you can fmt.Println("%#v\n", message)
[06:55:57] <b0nn> or access each field independently (eg. fmt.Println(message.Attributes)
[06:56:11] *** Quits: souvik (~souvik@103.82.81.39) (Ping timeout: 256 seconds)
[06:58:27] *** Quits: Authenticity (~integrity@194.5.49.34) (Changing host)
[06:58:27] *** Joins: Authenticity (~integrity@user/sdfgsdfg)
[06:58:48] <yagamilito> fmt.Printf(message.Body) works fine it is showing the messages which are present in sqs
[06:58:48] <yagamilito> but i want to use that messages in diffrent function in
[06:58:49] <yagamilito> example
[06:58:49] <yagamilito> i have a place where i need to pass this (message.Body)  value
[06:58:50] <yagamilito> https://go.dev/play/p/wDUx_jPSETm
[07:00:12] <yagamilito> this is my code
[07:00:13] <yagamilito> https://go.dev/play/p/EmS6BSp8weQ
[07:00:13] <yagamilito> i have user arn number in sqs which i want to read and use it
[07:01:54] *** Joins: monchi_ (~joints@143.198.92.132)
[07:01:54] <b0nn> that code never retrieves the message from the SGQ
[07:02:18] <b0nn> I'm guessing you have an event driven call to the lambda?
[07:02:23] <yagamilito> yes
[07:02:36] <yagamilito> sqs triggers lambda
[07:02:49] <b0nn> and the event has the message data in it, or do you need to rab the message?
[07:02:57] <b0nn> grab*
[07:03:16] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[07:03:26] <yagamilito> yes sqs event comes with message and my lambda function need to grab that message
[07:04:21] <yagamilito> somthing sends message to sqs .---> when sqs gets message lambda gets triggered ---> when lambda starts running i  want to read message from sqs
[07:05:01] *** Quits: Authenticity (~integrity@user/sdfgsdfg) (Quit: You attract the wrong things if you have no sense of who you are)
[07:05:49] <b0nn> your handler needs to receive the event
[07:06:45] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[07:06:47] *** monchi_ is now known as monchi
[07:07:02] <b0nn> eg (for an s3 event)https://go.dev/play/p/YcEPstmlxAT
[07:08:05] <b0nn> In that code I was writing example code that downloads from one s3 and uploads to another, instead of using the copy function that does it for you automagically
[07:09:01] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[07:12:01] *** Quits: JPT (~jpt@classified.name) (Quit: Hoppla!)
[07:12:08] <yagamilito> b0nn is this right ?
[07:12:08] <yagamilito> https://go.dev/play/p/pBzDQoVzbSt
[07:12:28] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[07:12:33] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[07:12:48] <b0nn> HandleRequest needs the stuff
[07:13:21] <b0nn> https://go.dev/play/p/3UZgIN8d8Zm
[07:13:48] <b0nn> your handler that calls the handler is superfluous
[07:14:49] <b0nn> there are 3 (I think) signatures a handler can have
[07:14:57] <b0nn> my bad, there's 7 https://docs.aws.amazon.com/lambda/latest/dg/golang-handler.html
[07:15:30] <b0nn> You want this one: func (context.Context, TIn) error
[07:17:48] <b0nn> What happens is,  the main calls lambda.Start - and that passes the event to your handler
[07:18:18] *** Joins: JPT (~jpt@classified.name)
[07:18:39] <yagamilito> build is failing it is expecting some values
[07:18:40] <yagamilito> https://go.dev/play/p/ic3VKUNl9PJ
[07:18:48] <yagamilito> i am not sure how to pass them
[07:19:41] <b0nn> ok, what is hand.go line 16
[07:19:54] <b0nn> and line 56 is easy - you don't return
[07:20:35] <b0nn> because you said you'd return an error, if there's no error to return then `return nil`
[07:21:38] <yagamilito> https://go.dev/play/p/9oBP7-XT0WG
[07:21:38] <yagamilito> i have updateConfigmap() in line 16
[07:22:04] *** Quits: moog (~moog@107.126.53.97) (Remote host closed the connection)
[07:23:45] <b0nn> https://go.dev/play/p/0Rl51e1Fhu7
[07:26:55] *** Joins: jackneillll (~jackneill@20014C4E1818D5008BE3BE1928B6DAEE.dsl.pool.telekom.hu)
[07:29:37] *** Quits: jackneilll (~jackneill@5401B87B.dsl.pool.telekom.hu) (Ping timeout: 256 seconds)
[07:29:47] <yagamilito> OMG this worked like charm i cant thank you enough
[07:29:47] <yagamilito> this was really really helpful
[07:30:02] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:31:11] <yagamilito> @b0nn
[07:31:46] <b0nn> np
[07:31:49] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[07:32:07] *** Joins: mickey8 (~user@user/mickey)
[07:32:09] <b0nn> It's one of those, once you know how to do it it's easy kind of thing
[07:39:39] *** Quits: n1000 (~n1000@user/n1000) (Quit: bbl)
[07:42:07] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[07:47:59] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:48:55] *** Joins: n1000 (~n1000@user/n1000)
[07:54:09] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Quit: WeeChat 3.0)
[07:56:02] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Ping timeout: 240 seconds)
[07:56:55] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[08:01:49] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: You attract the wrong things if you have no sense of who you are)
[08:04:04] *** Joins: doric (~doric@24.210.188.186)
[08:06:23] *** Quits: bpalmer (~user@user/bpalmer) (Remote host closed the connection)
[08:10:02] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[08:20:55] <yagamilito> Hello
[08:20:56] <yagamilito> is there a way we can get aws account id using golang ?
[08:22:55] <b0nn> https://github.com/aws/aws-sdk-go-v2/issues/214
[08:30:30] <yagamilito> I am trying to use variable in string
[08:30:31] <yagamilito> https://go.dev/play/p/LwcslSPG75J
[08:30:31] <yagamilito> but i get error
[08:30:32] <yagamilito> invalid operation: operator + not defined for ":user/" (untyped string constant)
[08:30:32] <yagamilito> what am i missing here
[08:32:05] <b0nn> I'd use https://pkg.go.dev/fmt#Sprintf there
[08:32:08] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[08:35:04] <rewt> yagamilito, do you have an extra/misplaced / there after ec2metadata.New()?
[08:36:49] <yagamilito> my bad i had / now it works fine
[08:42:25] *** Quits: opcode (~nathan@user/opcode) (Ping timeout: 250 seconds)
[08:47:12] *** Quits: pagalingling (~pagalingl@2a09:5e40:1030:e30:76:6f0c:1e52:f065) (Quit: WeeChat 3.4)
[09:10:29] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[09:14:29] *** Quits: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net) (Quit: Leaving.)
[09:19:42] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:78aa:2398:7569:6444) (Quit: Client closed)
[09:26:51] *** Joins: ninjin (e5f30034cf@user/ninjin)
[09:37:42] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[09:51:47] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[09:55:14] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:03:02] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[10:03:15] *** Joins: califax (~califax@user/califx)
[10:05:38] *** Joins: bluedust (~bluedust@103.161.144.28)
[10:09:00] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[10:09:55] *** Joins: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[10:10:13] *** Joins: pagalingling (~pagalingl@2a09:5e40:1030:e30:76:6f0c:1e52:f065)
[10:12:17] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 240 seconds)
[10:14:11] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:19:59] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[10:37:27] *** Joins: opcode (~opcode@user/opcode)
[10:47:58] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:50:55] *** Joins: yankeepape (~Android@80.83.235.7)
[10:51:28] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[10:52:27] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:53:37] <vt> let's say I have an array [16]byte with data in it. I want to append a copy of this array at the begining of an empty slice freshly created with p:= make([]byte, 0, 58). I cannot do p = append(p, array...) because [16]byte is not []byte. How should I proceeed ?
[10:53:40] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[10:54:21] <bookworm> slice the array ar[:]
[10:54:30] <bookworm> that gives you, well, a slice
[10:54:31] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[10:55:29] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[10:55:33] <bookworm> you could just copy though, rather than doing it with append. It would be faster
[10:55:43] <bookworm> (I guess)
[10:55:50] <vt>  a short-lived slice (because I use it only to append to another one) but it works, thank you
[10:56:19] <bookworm> why don't you just copy?
[10:57:06] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[10:57:52] *** Quits: lilgopher (~textual@2601:241:8000:38f0:91a4:b6ab:aace:8b1) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:57:53] <vt> Yes, I will use copy(p, array[:]) after make
[10:58:45] <vt> the ideal would be to directly initialise the slice with the data, but then it means I cannot set the capacity right away, and I _know_ this slice will grow at least twice.
[10:58:46] <bookworm> copy can work with arrays, no need to slice the source
[10:59:39] <vt> « invalid argument: copy expects slice arguments; found p (variable of type []byte) and array (variable of type [16]byte) »
[10:59:47] <bookworm> my bad then
[10:59:51] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 256 seconds)
[10:59:52] <bookworm> sorry
[11:00:12] *** Joins: bkircher (~bkircher@2001:a61:2506:9301:1554:865c:9ed3:683d)
[11:01:06] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:01:41] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:01:45] <vt> copy seems to work with strings (which seems to be a slice without a capacity) and slices as a source.
[11:02:04] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[11:08:54] *** Quits: n1000 (~n1000@user/n1000) (Quit: bbl)
[11:10:26] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (Quit: rebooter)
[11:10:32] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[11:11:10] *** Joins: n1000 (~n1000@user/n1000)
[11:14:16] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[11:15:35] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[11:26:06] *** Joins: xsteadfastx (~marv@94.31.106.190)
[11:27:32] *** Joins: shka (~herr@109.231.0.226)
[11:30:00] *** Quits: bkircher (~bkircher@2001:a61:2506:9301:1554:865c:9ed3:683d) (Remote host closed the connection)
[11:30:14] *** Joins: bkircher (~bkircher@2001:a61:2506:9301:af0b:a40a:8043:cfe7)
[11:30:14] *** Quits: bkircher (~bkircher@2001:a61:2506:9301:af0b:a40a:8043:cfe7) (Remote host closed the connection)
[11:33:51] *** Joins: absc (~absc@81.31.144.28)
[11:35:20] *** Joins: absc_ (~absc@81.31.144.178)
[11:36:34] *** Joins: bkircher (~bkircher@2001:a61:2506:9301:af0b:a40a:8043:cfe7)
[11:38:17] *** Quits: absc (~absc@81.31.144.28) (Ping timeout: 240 seconds)
[11:42:41] *** Joins: aLeSD (~aLeSD@139.47.114.114)
[11:46:55] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Ping timeout: 268 seconds)
[11:47:16] *** Quits: yankeepape (~Android@80.83.235.7) (Quit: -a- IRC for Android 2.1.44)
[11:48:56] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[11:53:55] *** Joins: vladoski (~foo@2001:b07:add:d406:dde:92e2:c03f:ad49)
[11:55:04] *** Joins: walterwhip (~www@user/walterwhip)
[11:56:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:57:04] *** Quits: aLeSD (~aLeSD@139.47.114.114) (Remote host closed the connection)
[11:58:48] *** Joins: Xjs (~jannis@user/xjs)
[11:59:04] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: You attract the wrong things if you have no sense of who you are)
[12:01:51] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[12:02:42] *** Joins: yaraju (~yaraju@user/yaraju)
[12:08:31] *** Joins: rendar (~rendar@user/rendar)
[12:08:35] *** Quits: vladoski (~foo@2001:b07:add:d406:dde:92e2:c03f:ad49) (Quit: Textual IRC Client: www.textualapp.com)
[12:10:11] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[12:13:01] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[12:23:17] *** absc_ is now known as absc
[12:23:48] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[12:24:04] *** Joins: mickey8 (~user@user/mickey)
[12:26:13] *** Quits: bluedust (~bluedust@103.161.144.28) (Remote host closed the connection)
[12:30:50] *** Joins: fef (~thedawn@user/thedawn)
[12:31:19] *** Joins: neurocyte0917090 (~neurocyte@45.93.108.138)
[12:31:19] *** Quits: neurocyte0917090 (~neurocyte@45.93.108.138) (Changing host)
[12:31:19] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[12:36:23] *** Joins: gpeskens (~gpeskens@2001:985:7aa4:1:b683:f0cd:f1fa:f62d)
[12:37:02] *** Joins: leonarth (~leonarth@user/leonarth)
[12:40:04] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[12:47:37] *** Quits: leonthemisfit (~Leon@user/leonthemisfit) (Ping timeout: 240 seconds)
[12:48:35] *** Joins: allana (~user@2001:4641:6aed:0:4ad:2c51:49e9:2b4a)
[12:58:05] *** Quits: henry40408 (~henry4040@175.181.155.165) (Quit: Ping timeout (120 seconds))
[13:02:17] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 240 seconds)
[13:03:47] *** Joins: henry40408 (~henry4040@175.181.155.165)
[13:07:32] *** Quits: eyJhb (~eyJhb@user/eyjhb) (Ping timeout: 240 seconds)
[13:08:42] *** Joins: bluedust (~bluedust@103.161.144.28)
[13:15:03] *** Joins: et_ (~et@user/et)
[13:15:37] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[13:15:37] *** et_ is now known as et
[13:16:20] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:16:32] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[13:17:58] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[13:21:16] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 268 seconds)
[13:25:50] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[13:32:07] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[13:39:13] *** Quits: bluedust (~bluedust@103.161.144.28) (Remote host closed the connection)
[13:39:34] *** Joins: cewood (~cewood@ip5b417897.dynamic.kabel-deutschland.de)
[13:52:17] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Ping timeout: 240 seconds)
[13:53:39] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[14:09:02] *** Quits: allana (~user@2001:4641:6aed:0:4ad:2c51:49e9:2b4a) (Ping timeout: 240 seconds)
[14:10:26] *** Joins: fling (~fling@user/fling)
[14:16:31] *** Joins: eyJhb (~eyJhb@user/eyjhb)
[14:24:16] *** Joins: philmacfly (~philmacfl@galaxie.weltraumhochofen.space)
[14:26:44] *** Quits: cewood (~cewood@ip5b417897.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[14:27:10] *** Joins: cewood (~cewood@ip5b417897.dynamic.kabel-deutschland.de)
[14:27:32] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 240 seconds)
[14:28:58] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[14:31:33] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: You attract the wrong things if you have no sense of who you are)
[14:32:43] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[14:44:49] *** Quits: eyJhb (~eyJhb@user/eyjhb) (Ping timeout: 256 seconds)
[14:52:19] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[14:57:57] *** Quits: beholders_eye (~weechat@2804:1b3:70c3:e89a:bd77:94e6:79fa:3073) (Ping timeout: 240 seconds)
[15:02:13] *** Joins: rogersm (~rogersm@90.166.180.250)
[15:04:51] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[15:04:55] *** Joins: bluedust (~bluedust@103.165.167.71)
[15:09:34] *** Joins: walterwhip (~www@user/walterwhip)
[15:11:01] *** Quits: bluedust (~bluedust@103.165.167.71) (Remote host closed the connection)
[15:11:02] *** Quits: shtirlic (~shtirlic@95-55-121-107.dynamic.avangarddsl.ru) (Ping timeout: 268 seconds)
[15:11:39] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Ping timeout: 268 seconds)
[15:12:04] *** Joins: shtirlic (~shtirlic@95-55-121-107.dynamic.avangarddsl.ru)
[15:16:33] *** Joins: eyJhb (~eyJhb@user/eyjhb)
[15:19:21] *** Joins: beholders_eye (~weechat@2804:1b3:70c3:fcf9:7779:33f5:462c:7dec)
[15:21:17] *** Quits: cewood (~cewood@ip5b417897.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[15:28:39] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[15:34:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[15:34:19] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:35:18] *** Joins: walterwhip (~www@user/walterwhip)
[15:40:30] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[15:44:29] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[15:44:44] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 250 seconds)
[15:45:53] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[15:55:02] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Ping timeout: 240 seconds)
[15:55:49] *** Quits: rendar (~rendar@user/rendar) (Remote host closed the connection)
[15:55:57] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[15:57:17] *** Joins: yoonkn (~user@175.197.208.79)
[15:58:33] *** Joins: yar_ (~yaraju@user/yaraju)
[16:00:37] *** Quits: yaraju (~yaraju@user/yaraju) (Ping timeout: 240 seconds)
[16:00:55] *** Joins: rendar (~rendar@user/rendar)
[16:04:19] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[16:04:38] *** Joins: fef (~thedawn@user/thedawn)
[16:08:20] *** Quits: ilpanda (ilpanda@2607:5300:60:21b::1) (Changing host)
[16:08:20] *** Joins: ilpanda (ilpanda@user/ilpanda)
[16:19:05] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[16:28:44] *** Atque is now known as hammond
[16:28:55] *** hammond is now known as Atque
[16:39:13] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Ping timeout: 268 seconds)
[16:40:56] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Read error: Connection reset by peer)
[16:43:14] *** Quits: dsrt^ (~dsrt@207.182.73.202) (Remote host closed the connection)
[16:44:03] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[16:51:30] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[16:51:58] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[16:52:59] *** Joins: fjb (~fjb@2804:378:90ac:400:36d3:7e6a:cea5:aba4)
[16:55:20] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[16:58:19] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:05:10] *** Joins: vladoski (~foo@2001:b07:add:d406:7cff:4090:5e01:49a0)
[17:09:10] *** Parts: vladoski (~foo@2001:b07:add:d406:7cff:4090:5e01:49a0) ()
[17:13:36] *** Joins: drewnix (~textual@c-73-118-230-129.hsd1.wa.comcast.net)
[17:16:17] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[17:18:14] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[17:19:09] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[17:24:15] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[17:25:29] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (Quit: baakeydow)
[17:26:26] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[17:26:29] *** Joins: leonarth (~leonarth@user/leonarth)
[17:32:25] *** Joins: CoolerX (~CoolerX@user/coolerx)
[17:32:42] *** Quits: CoolerX (~CoolerX@user/coolerx) (Client Quit)
[17:35:48] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[17:41:28] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:e5df:5139:b50:d780)
[17:42:55] *** Joins: allana (~user@2001:4641:6aed:0:4ad:2c51:49e9:2b4a)
[17:43:46] <allana> Hi! Any emacs users here? I'm trying to get set-up with lsp and gopls. Is gopls ready for day-to-day use?
[17:48:22] *** Joins: whaley (~whaley@2603-6080-a301-33d1-8cca-2f16-7418-e2aa.res6.spectrum.com)
[17:50:15] <siXy> Yes.
[17:51:01] *** Joins: pepee (~pepee@user/pepee)
[17:55:04] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Ping timeout: 268 seconds)
[17:57:30] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[18:00:18] *** Joins: arkurious (~arkurious@user/arkurious)
[18:01:23] *** Quits: allana (~user@2001:4641:6aed:0:4ad:2c51:49e9:2b4a) (Remote host closed the connection)
[18:05:42] *** Joins: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net)
[18:06:28] *** Joins: moog (~moog@107.126.53.225)
[18:10:00] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[18:10:20] *** Quits: xsteadfastx (~marv@94.31.106.190) (Ping timeout: 250 seconds)
[18:10:57] *** Quits: ryu` (~ryusaku@user/ryu/x-3206151) (Ping timeout: 240 seconds)
[18:11:55] *** Joins: ryu` (~ryusaku@user/ryu/x-3206151)
[18:20:17] *** Joins: clarjon_1 (~clarjon1@user/clarjon1)
[18:20:35] *** Quits: whaley (~whaley@2603-6080-a301-33d1-8cca-2f16-7418-e2aa.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[18:20:38] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[18:21:27] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[18:22:24] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[18:24:03] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Ping timeout: 268 seconds)
[18:24:48] *** Joins: fsoc (~shynerd@bison.alphaw0lf.xyz)
[18:28:49] *** Quits: drewnix (~textual@c-73-118-230-129.hsd1.wa.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:36:00] *** Quits: dr0n (~nabromov@176.26.119.61) (Quit: WeeChat 3.3)
[18:36:30] <fsoc> I wanted to daemonize my golang http application; currently i'm detaching it like this: `go run main.go 1>/dev/null 2>&1 &` but i'm not happy with this one. Is there a guide that someone can link me to?
[18:37:33] *** Joins: drewnix (~textual@c-73-118-230-129.hsd1.wa.comcast.net)
[18:40:41] <bookworm> build, use the normal linux facilities... systemd say
[18:41:07] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[18:41:15] <bookworm> go run is for quick and dirty prototypes and not for running actual applications
[18:41:29] <wnd> for instant satisfaction, mayhaps look into nohup
[18:41:56] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:e5df:5139:b50:d780) (Ping timeout: 268 seconds)
[18:42:12] <fsoc> wnd: i know nohup, i've also ran `go run` in a tmux shell. but neither makes me happy.
[18:42:38] <fsoc> i wanted something like php-fpm + nginx combination. (as i'll be using go lang behind an nginx reverse proxy)
[18:43:37] *** Joins: llorllale (~llorllale@198.98.119.85)
[18:44:41] <fsoc> bookworm: so i think writing a systemd system file is something i wanted?
[18:45:12] <bookworm> what you want is to build a binary as a first step
[18:45:28] <fsoc> yeah, i'll do that.
[18:45:40] *** Quits: infl00p4 (~infl00p@139.162.131.62) (Quit: The Lounge - https://thelounge.chat)
[18:45:44] <bookworm> then you can use whatever you want to start it... cron, systemd, nohup, the js thingy, whatever
[18:47:52] *** Joins: infl00p4 (~infl00p@139.162.131.62)
[18:48:21] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[18:48:26] *** Joins: bluedust (~bluedust@103.161.144.28)
[18:54:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:58:52] *** Joins: tedwing (~anon@lfbn-idf3-1-1168-92.w92-170.abo.wanadoo.fr)
[18:59:01] *** Quits: henry40408 (~henry4040@175.181.155.165) (Quit: The Lounge - https://thelounge.chat)
[19:00:26] *** Joins: henry40408 (~henry4040@175.181.155.165)
[19:01:27] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[19:06:19] <A_Dragon> fsoc: define daemonize.
[19:06:25] <A_Dragon> do you want it to fork to the background?
[19:06:54] <A_Dragon> oh I see, yeah just build a binary
[19:10:51] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[19:11:50] <deniska> systemd ♥
[19:13:52] *** Joins: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[19:16:17] <A_Dragon> if you want to be VERY fancy
[19:16:20] <A_Dragon> do systemd socket stuff
[19:20:49] *** Joins: lilgopher (~textual@2601:241:8000:38f0:1569:a56b:763:b19e)
[19:22:32] <bookworm> useless unless the service is very seldom accessed
[19:23:38] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[19:23:44] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Remote host closed the connection)
[19:23:51] <bookworm> loose the ability to quickly sanity check the system as well (healthchecks are broken essentially, unit status isn't visible)
[19:24:26] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:24:26] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 250 seconds)
[19:28:25] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[19:28:45] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Quit: WeeChat 3.3)
[19:29:57] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[19:32:29] <shiroyasha> I usually avoid implementing daemonizing stuff. If it's going to run as a service, I use my OS' service manager; if I want to "run it myself" the dirty way, I run it inside tmux and detach myself from that session.
[19:33:40] <shiroyasha> The program itself shouldn't have to worry about whether it's running in foreground or background.
[19:37:53] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[19:42:29] *** Quits: drewnix (~textual@c-73-118-230-129.hsd1.wa.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:46:26] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[19:49:00] *** Joins: bluedust_ (~bluedust@185.248.85.10)
[19:50:00] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[19:51:21] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:51:35] *** Joins: yoonkn (~user@175.197.208.79)
[19:52:36] *** Quits: bluedust (~bluedust@103.161.144.28) (Ping timeout: 250 seconds)
[19:54:28] *** Joins: khanred (~khanred@user/khanred)
[19:54:59] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:55:25] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[19:57:28] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[19:57:47] *** Joins: bluedust (~bluedust@103.161.144.28)
[19:59:39] *** Parts: khanred (~khanred@user/khanred) (Leaving)
[20:01:02] *** Quits: bluedust_ (~bluedust@185.248.85.10) (Ping timeout: 240 seconds)
[20:03:05] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[20:04:37] *** Quits: yar_ (~yaraju@user/yaraju) (Quit: Leaving)
[20:04:53] *** Joins: yar_ (~yaraju@user/yaraju)
[20:05:12] *** Quits: yar_ (~yaraju@user/yaraju) (Remote host closed the connection)
[20:05:53] *** Joins: yaraju (~yaraju@user/yaraju)
[20:06:18] *** Quits: yaraju (~yaraju@user/yaraju) (Remote host closed the connection)
[20:10:03] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:13:36] *** Joins: souvik (~souvik@103.82.81.39)
[20:14:30] <pjs> I personally like using supervisord for these tasks, fall back to OS service manager as already referenced.
[20:17:57] *** Quits: souvik (~souvik@103.82.81.39) (Ping timeout: 240 seconds)
[20:18:50] <albertito> fsoc: yes, on most linux systems, writing a systemd file is the more practical way to get what you want
[20:19:43] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[20:22:02] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[20:23:41] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 268 seconds)
[20:23:58] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Remote host closed the connection)
[20:26:29] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[20:28:27] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:29:57] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Quit: WeeChat 3.4)
[20:32:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[20:34:05] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[20:38:02] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[20:40:34] *** Joins: crashrep (~crashrep@user/crashrep)
[20:40:37] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 240 seconds)
[20:44:02] *** Quits: zwr (~zwr@2804:d45:b966:fb00:53d8:218c:4a2e:e687) (Ping timeout: 268 seconds)
[20:44:25] *** Joins: zwr (~zwr@2804:d45:b966:fb00:5d44:edfe:270d:6900)
[20:45:02] *** Quits: lilgopher (~textual@2601:241:8000:38f0:1569:a56b:763:b19e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:51:05] *** Quits: absc (~absc@81.31.144.178) (Quit: Leaving)
[20:57:09] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[20:57:11] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Read error: Connection reset by peer)
[20:59:17] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[21:00:40] <fsoc> It'd be nice if golang natively supports http sessions (instead of us grabbing gorilla/sessions)
[21:03:18] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[21:08:42] *** Quits: tedwing (~anon@lfbn-idf3-1-1168-92.w92-170.abo.wanadoo.fr) (Quit: leaving)
[21:09:03] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[21:18:25] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:30:40] *** Quits: henry40408 (~henry4040@175.181.155.165) (Read error: Connection reset by peer)
[21:31:15] *** Joins: henry40408 (~henry4040@175.181.155.165)
[21:32:47] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:c022:ab17:ec7:a01c)
[21:32:59] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:6978:fe33:30af:ede6)
[21:33:03] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[21:33:28] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:33:31] <Thedarkb-Desktop> Does anyone here know why the default HTTP server doesn't time out connections?
[21:33:38] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[21:34:37] <Thedarkb-Desktop> I think the "writing a web app in Go" tutorial should be more clear about the default HTTP server being able to be DDOS'd by people walking out of range of WiFi access points.
[21:40:43] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[21:43:17] *** Joins: lxdr (~lxdr@user/lxdr)
[21:44:19] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:c022:ab17:ec7:a01c) (Quit: Client closed)
[21:47:22] <bookworm> you'll also want to limit the request body etc with a limit reader etc, it doesn't give you a fully hardened configuration out of the box
[21:49:33] *** Quits: bluedust (~bluedust@103.161.144.28) (Read error: Connection reset by peer)
[21:50:40] <Thedarkb-Desktop> I think there's a difference between "fully hardened configuration" and "will run out of file handles without panicking and closing the program"
[21:51:30] <Thedarkb-Desktop> The default config is practically doomed to fail in a practical application and the only indication I got of that being the case was when I got burned by it.
[21:52:39] <bookworm> it works perfectly fine in a "practical application" considering that most such practical deployments run a reverse proxy anyhow
[21:52:51] <lxdr> Hi, quick question: isn't net.Dial trying to lookup "127.0.0.01" (see https://go.dev/play/p/flTuVoZb5I9) a bug? It should be written "127.0.0.1" (and don't resolve in this case) but I don't think https://pkg.go.dev/net#Dial is mentioning ipv4 should use a minimized form?
[21:53:01] <bookworm> but yes, simply exposing it directly to the net is probably a bad choice
[21:53:14] <Thedarkb-Desktop> I just wish the tutorials were more explicit about that.
[21:55:59] <Thedarkb-Desktop> It's also a bit of a stretch to assume that every practical deployment will use a reverse proxy.
[21:57:31] <bookworm> that's generally how things work in practice 🤷‍♂️
[21:57:46] <Thedarkb-Desktop> Well it wasn't at my company.
[21:58:04] <bookworm> the defaults are bad, agreed. Then again whatever defaults they would come up with would be bad for someone
[21:58:19] <bookworm> you need to adapt everything to ypur specific problem
[21:58:37] <Thedarkb-Desktop> There's a difference between "bad for someone" and "can be slow loris'd with ease out of the box2
[21:58:43] <Thedarkb-Desktop> s/2/"
[21:59:21] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[22:00:35] <fizzie> lxdr: Judging from https://cs.opensource.google/go/go/+/d3e3d03666bbd8784007bbb78a75864aac786967 it's a deliberate decision. Some context in https://github.com/golang/go/issues/30999 and https://github.com/golang/go/issues/43389
[22:01:19] <fizzie> As issue 30999 mentions, I don't think there's really any sort of standard to follow.
[22:03:55] <lxdr> fizzie: oh, thank you, I was about to add a comment to https://github.com/golang/go/issues/36822, which is similar (1.1 -> 1.0.0.1); but they shouldn't they be handled the same way?
[22:06:27] <bookworm> in my opinion having a strict parser is a good thing. The other stuff os basically historical baggage due to some C implementation detail in the libc implementation
[22:07:22] <bookworm> and in my book having the principle of least surprise trumps being able to save a keystroke
[22:07:44] <bookworm> if the ip looks strange, chances are you're doing something bad
[22:07:48] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[22:08:00] <lxdr> yes, it's fine for me, but too bad it's not documented outside the changelog :(
[22:08:31] <lxdr> bookworm: or something "funny", like 127.0.80.06:8006
[22:13:50] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[22:18:16] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[22:20:07] *** Joins: shankar (~shankar@172-105-56-145.ip.linodeusercontent.com)
[22:20:13] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:22:08] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[22:22:40] <dostoyevsky2> https://go.dev/play/p/Sf7g4CDV_Xl <- this is my first try of `100 http requests in parallel, cancel remaining after first 10 succcessful answers' ... it doesn't print anything though... but it seems to run some seconds...
[22:27:59] <bookworm> dostoyevsky2: at the very least you have a race condition on responses... multiple goroutines read/write to the same variable without a lock
[22:28:04] <siXy> You don't wait for anything. See https://gobyexample.com/waitgroups for an example of how you could solve this.
[22:28:11] <siXy> That also.
[22:28:15] *** Joins: carlavilla (~carlavill@2a0c:5a84:320d:6900:221:6bff:fe3b:cee4)
[22:28:16] <dostoyevsky2> oh yeah..
[22:29:19] <bookworm> cancels too
[22:29:22] <pjs> any thoughts on using <codeforge>/user/module vs <yourdomain>/module ? Asking because I've seen a couple of times ppl want to move forges and their module has them stuck. When using a domain you control you simply modify the meta tag and it's updated to the new forge, right?
[22:29:36] <bookworm> yes
[22:29:48] <A_Dragon> yep
[22:29:57] <A_Dragon> I actually have a SUPER lazy nginx oneliner for this
[22:30:10] <pjs> A_Dragon: oh? I'd be interested in this :)
[22:30:22] <bookworm> the usual "reply with go meta even though the target may not exists approach" ?
[22:30:27] <dostoyevsky2> https://go.dev/play/p/hAGSGS1VN19
[22:30:33] <dostoyevsky2> now with waitgroup
[22:31:21] <A_Dragon> pjs: location ~ /go/([a-zA-Z0-9_-]+)(/[a-zA-Z0-9_.-]+)*$ { if ($args = "go-get=1") { add_header Content-Type text/html; return 200 '<meta name="go-import" content="$host/go/$1 git https://github.com/A-UNDERSCORE-D/$1.git" />'; } return 404; }
[22:31:36] *** Joins: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:c575:4066:faea:7830)
[22:31:44] <dostoyevsky2> On line 49 I am doing `*cf = nil` which points to an entry in the global array cancels [100]context.CancelFunc ... I presume I need some kind of lock?
[22:31:59] <bookworm> yes
[22:31:59] <A_Dragon> bookworm: yeah
[22:32:00] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:32:08] <pjs> A_Dragon: hah, thanks
[22:32:19] <A_Dragon> the super lazy "okay feel free to try" becasue worst case it just gets a 404 or similar to the face anyway
[22:32:27] *** Joins: lilgopher (~textual@2601:241:8000:38f0:356b:459f:513a:7969)
[22:32:36] <bookworm> with caddy it's a bit more than a oneliner, but works the same way
[22:32:40] <dostoyevsky2> bookworm: ah yeah, just saw your earlier message ;-)
[22:33:20] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[22:34:45] <bookworm> dostoyevsky2: cancelRemaining is broken too, that can run multiple times from multiple goroutine s
[22:35:06] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:6978:fe33:30af:ede6) (Ping timeout: 250 seconds)
[22:35:21] <bookworm> basically whenever you have a shared var and multiple goroutines you need to synchronize, however you do it
[22:35:35] <bookworm> chan, mutex, atomics... up to you
[22:39:49] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:44:22] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[22:51:17] <dostoyevsky2> https://go.dev/play/p/2EyTKwYVvn_P <- so now with mutex for protecting the cancels and atomics for incrementing responses... it still prints ~ `cancelRemaining after 99 responses, cancel count: 0' like 80 times, though
[22:53:44] <siXy> well yeah because you asked it to. You have 100 r() routines, of which ~80 are going to get cancelled and print that message.
[22:54:19] <dostoyevsky2> If they were to get cancelled I would expect a fmt.Println("Canceled2")
[22:54:33] *** Quits: carlavilla (~carlavill@2a0c:5a84:320d:6900:221:6bff:fe3b:cee4) (Read error: Connection reset by peer)
[22:54:34] <dostoyevsky2> and cancel count > 0
[22:54:57] *** Quits: franitor_ (~frank@2001:19f0:7001:fdf:5400:3ff:fe76:dbbf) (Ping timeout: 240 seconds)
[22:54:59] <dostoyevsky2> this should provide enough variety in the root() handler: time.Sleep(time.Duration(50+rand.Intn(400)) * time.Millisecond)
[22:57:03] *** Joins: franitor_ (~frank@user/franitor)
[22:59:41] <dostoyevsky2> https://go.dev/play/p/UbU7eHLsTpw <- interesting.  I've increased to `50+rand.Intn(4000))' and also added a triggered var, so the cancelRemaining is only being run once... and I get: cancelRemaining after 11 responses, cancel count: 2 ...
[23:00:57] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[23:02:50] *** Quits: lilgopher (~textual@2601:241:8000:38f0:356b:459f:513a:7969) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:04:06] <dostoyevsky2> https://go.dev/play/p/bt2ozjaaY66 <- so now up to 40000ms variance... and a print for each time a response is received... it cancels some requests after the first 10 but one can see the others still arriving, like the cancels weren't properly initialized?
[23:07:56] <dostoyevsky2> > fatal error: all goroutines are asleep - deadlock!
[23:10:18] <dostoyevsky2> that error message appears sometimes for a run too...
[23:11:29] *** brooks7366997 is now known as brooks
[23:15:05] *** Quits: fjb (~fjb@2804:378:90ac:400:36d3:7e6a:cea5:aba4) (Quit: fjb)
[23:18:32] *** Quits: bkircher (~bkircher@2001:a61:2506:9301:af0b:a40a:8043:cfe7) (Ping timeout: 240 seconds)
[23:18:45] <dostoyevsky2> I suspect that in 106 `r(i, &cancels[i])' i is not the value of i when the go func was created...
[23:20:26] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Read error: Connection reset by peer)
[23:21:41] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[23:22:46] <dostoyevsky2> https://go.dev/play/p/aJdP-29iJS6 <- cancelRemaining after 11 responses, cancel count: 88
[23:23:36] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[23:26:07] *** Parts: shankar (~shankar@172-105-56-145.ip.linodeusercontent.com) ()
[23:26:25] *** Joins: shankar (~shankar@172-105-56-145.ip.linodeusercontent.com)
[23:28:10] *** Joins: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it)
[23:32:54] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[23:32:54] *** Joins: lilgopher (~textual@c-24-12-183-227.hsd1.il.comcast.net)
[23:33:22] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Quit: Leaving)
[23:42:10] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:47:40] *** Joins: marcus (~marcus@mojo/viking/marcus)
[23:49:48] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[23:57:11] *** Joins: cptn_ (~cptn@198.98.48.173)
[23:57:40] *** Quits: cptn_ (~cptn@198.98.48.173) (Client Quit)
[23:58:00] *** Joins: cptn_ (~cptn@198.98.48.173)
