[00:00:17] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Remote host closed the connection)
[00:00:47] *** Joins: niska (~niska@static.38.6.217.95.clients.your-server.de)
[00:01:20] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:03:54] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[00:05:06] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[00:05:34] *** Joins: KombuchaKip (~kip@192.252.230.5)
[00:05:49] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:05:56] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[00:08:31] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[00:12:13] *** Quits: cart_man (~rynot@host-78-144-125-216.as13285.net) (Quit: Konversation terminated!)
[00:14:12] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[00:17:59] *** Cyp_ is now known as Cyp
[00:18:14] *** Cyp is now known as Cyp_
[00:18:33] *** Cyp_ is now known as Cyp
[00:20:30] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[00:21:18] *** Joins: jellyknight (~gelignite@55d4e4de.access.ecotel.net)
[00:21:59] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:22:17] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:25:22] <Alipha> mike18: I'm surprised you're not doing a recursive solution to deserialization
[00:28:05] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[00:29:43] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:29:44] *** spiced_marmot is now known as zvijezda
[00:31:58] <LordKalma> deserialing a tree is asking for recursion
[00:32:27] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[00:32:58] *** Joins: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d)
[00:33:13] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[00:33:15] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[00:34:05] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:57] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (Remote host closed the connection)
[00:36:09] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[00:37:02] <PJBoy> more like asking for a smart non recursive solution to challenge the mind
[00:38:02] <PJBoy> what if tree depth * sizeof(locals) > stack space
[00:38:15] <PJBoy> you'd feel pretty silly
[00:44:28] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[00:47:15] <Alipha> PJBoy: I mean, I'd write a non-recursive algorithm myself because of potentially overflowing the stack and because I'd hope a non-recursive solution would be faster, but recursion is generally easier for tree algorithms
[00:47:17] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:47:40] <PJBoy> yeah I agree with that exact statement
[00:48:27] <fiesh> idk about that, a tree is a special case of a (directed) graph, and that data structure doesn't ask for recursion at all
[00:49:15] <PJBoy> can't tell if trolling
[00:49:20] <fiesh> no
[00:49:27] <Alipha> PJBoy: though since you have to maintain your own stack structure, I'm curious if dynamically allocating (and reallocating, if std::vector) would be slower than using the process stack
[00:49:47] <PJBoy> obviously if you try to generalise a principle then at some point it stops applying
[00:50:33] <PJBoy> you use vector for array storage in C++, but C++ is just a special case of programming languages, and those don't all ask for vector for array storage
[00:50:53] <fiesh> yeah but it happens often enough that people go for a tree instead of what they actually wanted but didn't realize, a dag
[00:50:54] <PJBoy> like yeah the fact that it's a special case makes it special
[00:51:58] *** Quits: danielrparks_ (~quassel@2600:1700:3f7b:20f:c308:eb80:d97c:aae) (Quit: No Ping reply in 180 seconds.)
[00:52:05] <PJBoy> it's a reasonable consideration to bear in mind, that you might want to think about DAGs more generally
[00:53:14] <PJBoy> but the fact that children nodes never connect makes recursion more natural
[00:53:17] *** Joins: danielrparks (~quassel@2600:1700:3f7b:20f:633a:15c4:4784:e28a)
[00:53:44] <Alipha> mike18: you always return nullptr because your stack is empty because the ) pops the root node. Also, ) doesn't add the parent to the grandparent's children. And your code doesn't handle )) correctly (which that may be fixed if you fix the parent to grandparent linking)
[00:53:58] <PJBoy> you can actually think like "to do this operation X, I'm do this verbatim operation on my children"
[00:54:31] <mike18> Alipha: yeah i know - but idk how to fix it without making the code ugly....
[00:54:55] <mike18> Alipha: should i store the parent node somehow?
[00:55:34] <mike18> Alipha: you say recursive is much simpler?
[00:55:55] <Alipha> mike18: it's common for a node to have a `Node* parent`, but I'm not sure if that actually helps any of your problems
[00:56:33] <mike18> Alipha: i mean i push the parent on the stack before go to the children
[00:56:34] <CarloWood> I bet I can write something that fits in geordi.
[00:59:11] *** Quits: The_Jag (~The_Jag@host-79-33-196-10.retail.telecomitalia.it) (Quit: The_Jag)
[00:59:18] <Alipha> mike18: maybe not "much simpler", but it's generally a more natural way to think about trees. Of course, if you don't have the recursive mindset, then it might not be, heh. I don't think there's much you need to add/change to your iterative code to get it working
[00:59:50] <mike18> Alipha: not much to change - bc its a simple bug?
[01:00:07] *** Quits: paul424 (~tom@ip-31-0-125-200.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[01:00:38] <Alipha> Two bugs, I think
[01:03:33] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 256 seconds)
[01:03:36] *** Joins: jokoon (~eio@2a01:e0a:542:e160:a036:c333:5055:e361)
[01:03:44] <jokoon> Obj obj; unique_ptr<Obj> ptr(&obj);
[01:03:50] <jokoon> is that supposed to work?
[01:04:13] *** Quits: jellyknight (~gelignite@55d4e4de.access.ecotel.net) (Quit: Stay safe!)
[01:04:22] <kalven> not a good idea
[01:04:42] <xkoncek> almost definitely not
[01:04:45] <mike18> Alipha: when i go to ')' and ',' right?
[01:05:33] <jokoon> how do I fix my code? I guess it cannot be fixed? :D
[01:05:49] <kalven> ctrl+a del
[01:07:08] <jokoon> so I can't create such a pointer from an object then?
[01:08:09] <kalven> the whole point of unique_ptr is to manage objects that have been created with new
[01:08:19] <jokoon> ok
[01:08:20] <kalven> (or make_unique)
[01:08:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[01:08:47] <jokoon> so I can't use it with an object that was not create with new
[01:10:03] <xkoncek> #uninclude <...>
[01:10:18] <kalven> maybe take a step back and describe why?
[01:11:46] <jokoon> you said it was a bad idea
[01:12:02] <xkoncek> what are you using your objects for?
[01:12:34] <kalven> jokoon: I mean, what made you ask about it? Do you have code where you want to do this?
[01:12:43] <jokoon> can you be more precise?
[01:13:07] <xkoncek> explain what you want to achieve
[01:13:45] <jokoon> I have Obj obj; declared in a namespace
[01:14:03] <xkoncek> "why": objects created on stack are automatically destroyed at the end of scope
[01:14:13] <jokoon> I want to declare a pointer elsewhere that points to it, hence unique_ptr<Obj> ptr(&obj);
[01:14:28] <xkoncek> why aren't you using a plain pointer?
[01:14:44] <xkoncek> unique_ptr *own* its resource
[01:14:47] <jokoon> unique_ptr<Obj> ptr; is declared in another namespace
[01:14:49] <xkoncek> owns
[01:14:53] <jokoon> oh ok
[01:14:57] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:15:15] <xkoncek> Obj is like a global variable?
[01:15:26] <jokoon> yes, on the stack
[01:15:50] <xkoncek> well... not stack, but persistent storage in the object file
[01:15:51] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[01:16:00] <jokoon> yes
[01:16:00] <ville> jokoon:  if the object is automatic then it doesn't need you to take care of destructing it
[01:16:04] <xkoncek> anyway, you want to use either pointer or a reference
[01:16:29] <jokoon> I just want a pointer to it, since I may have several obj in the future
[01:16:39] <xkoncek> global variables are constructed at program load time and destryoed when the program ends
[01:17:04] <xkoncek> if you ever need to destroy global objects in the middle of a program, you may want to use std::optional
[01:17:13] <jokoon> I just want something maybe cleaner than a raw pointer
[01:17:25] <xkoncek> raw pointers are just fine
[01:17:38] <jokoon> mmh
[01:17:45] <xkoncek> don't get fooled by false prophets of "modern C++"
[01:17:59] <jokoon> ok thanks
[01:18:08] <xkoncek> references may be too, but those need to be properly initialized
[01:18:27] <xkoncek> and... that is sometimes harder to achieve
[01:18:38] <jokoon> yeah I wanted to use a reference, but I can't use it in persistent storage I guess
[01:18:54] *** Quits: popocka[m] (~popockama@2001:470:69fc:105::1:546e) (Read error: Connection reset by peer)
[01:18:54] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Write error: Connection reset by peer)
[01:18:57] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Write error: Connection reset by peer)
[01:18:57] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Write error: Connection reset by peer)
[01:18:59] *** Quits: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d) (Read error: Connection reset by peer)
[01:18:59] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Read error: Connection reset by peer)
[01:19:00] <jokoon> references, do you have some special STL template in mind?
[01:19:11] <xkoncek> you definitely can declare a reference in a header file and initialize it in a separate .cpp file
[01:19:42] <jokoon> hum
[01:19:57] <xkoncek> {int i = 0; int& ri = i; ri = 5; cout << i;}
[01:19:57] <geordi> 5
[01:20:07] <xkoncek> i meant lvalue references
[01:20:15] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[01:20:23] <jokoon> yeah sure
[01:20:35] *** Joins: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d)
[01:20:46] <CarloWood> mike18: first attempt... https://wandbox.org/permlink/X5T5Eef0zu80zKtd
[01:20:47] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[01:20:52] <jokoon> but for what I want to do, it doesn't work, since reference cannot refer to a different instance
[01:20:59] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[01:20:59] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[01:21:13] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[01:21:15] <xkoncek> yeah, references cannot be reassigned to point elsewhere
[01:21:16] <mike18> CarloWood: you changed the format?
[01:21:27] *** Joins: wielding (~wielding@user/wielding)
[01:21:34] <xkoncek> but pointers are ok
[01:21:41] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[01:21:42] <xkoncek> the is no clearer solution
[01:21:45] <xkoncek> there
[01:21:45] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[01:21:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:48c8:920f:83dd:ae34) (Ping timeout: 252 seconds)
[01:21:53] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[01:21:56] <jokoon> it's weird because I started a new job and a colleague made me doubt about references
[01:21:58] <CarloWood> mike18: I wrote it from scratch; that way at least I know what is what :P.
[01:22:03] <mike18> oh ok
[01:22:05] *** Joins: popocka[m] (~popockama@2001:470:69fc:105::1:546e)
[01:22:11] <jokoon> glad you're clearing my doubts
[01:22:18] *** Joins: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1)
[01:24:33] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:25:43] <CarloWood> mike18: so this works based on the assumption that a node is either 1) just digits (no children), or 2) digits followed by '(' followed by one or more Node's (the children) separated by comma's, followed by ')'.
[01:26:50] <CarloWood> Aka NODE = "12".  Or Node = "42(NODE[, NODE[, NODE ...]])", where NODE is just recursive more of the same.
[01:27:54] <CarloWood> Actually - I think this code assumes that the last child node is immediately followed by a ')'.
[01:28:19] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[01:28:30] <sh00p> if anybody is curious, after hours, i managed to get my thing working
[01:28:31] <sh00p> https://wandbox.org/permlink/ROrXMz1kEIXq76uL
[01:28:43] <sh00p> redirect construction of array members to a lambda function
[01:28:45] <sh00p> and then fold over that
[01:29:04] <sh00p> jesus christ, i'll never stop being mind blown by this language
[01:30:12] <xkoncek> i am really looking forward to "deducing this" proposal
[01:30:21] <xkoncek> or rather, its implementation
[01:31:52] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:48c8:920f:83dd:ae34)
[01:33:33] <Alipha> xkoncek:?
[01:34:01] <xkoncek> according to cppreference, it is listen in C++23
[01:34:14] <xkoncek> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0847r7.html
[01:36:57] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Ping timeout: 250 seconds)
[01:37:22] *** Joins: seninha (~seninha@user/seninha)
[01:39:21] <mike18> CarloWood: Alipha https://ideone.com/F5WBAS the recursive version works now - but still struggle with the iterative version....
[01:40:24] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:32] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:32] *** ChanServ sets mode: +v npaperbot
[01:44:27] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (Quit: Client limit exceeded: 20000)
[01:44:44] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: Client limit exceeded: 20000)
[01:44:45] *** Quits: jokoon (~eio@2a01:e0a:542:e160:a036:c333:5055:e361) (Quit: Leaving)
[01:45:06] *** Quits: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d) (Quit: Client limit exceeded: 20000)
[01:45:27] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Quit: Client limit exceeded: 20000)
[01:45:50] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Quit: Client limit exceeded: 20000)
[01:46:14] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Quit: Client limit exceeded: 20000)
[01:46:27] *** Quits: wielding (~wielding@user/wielding) (Quit: Client limit exceeded: 20000)
[01:46:44] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Quit: Client limit exceeded: 20000)
[01:46:54] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Client limit exceeded: 20000)
[01:47:16] *** Quits: popocka[m] (~popockama@2001:470:69fc:105::1:546e) (Quit: Client limit exceeded: 20000)
[01:47:50] *** Quits: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1) (Quit: Client limit exceeded: 20000)
[01:58:37] *** Quits: danielrparks (~quassel@2600:1700:3f7b:20f:633a:15c4:4784:e28a) (Ping timeout: 240 seconds)
[02:01:55] <mike18> CarloWood: did you see my code?
[02:02:43] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[02:03:13] <sh00p> I saw it but didnt understand it, can you split the two implementations in different pastes and explain what is working and what is not
[02:04:16] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[02:04:44] *** halberd is now known as causative
[02:06:27] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:06:38] <Alipha> sh00p: your make_array_impl seems much more complicated than need be. It should be simply `return {T(q, Is)...};`
[02:08:53] <sh00p> Hmm nope
[02:09:04] <sh00p> how do you mean?
[02:10:26] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[02:12:49] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 256 seconds)
[02:13:38] <sh00p> just swapping the return statement out leads to different behavior, the idea I had with my snippet was to compile-time construct an std::array with different ctor calls for the composing objects
[02:13:49] <sh00p> and I made that silly example to boil it down
[02:14:48] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[02:20:13] <Alipha> Oh, never mind
[02:20:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:20:57] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[02:22:56] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[02:24:13] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[02:25:42] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[02:36:31] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:37:35] <mike18> CarloWood: fixed the recursive version - but its soo much more difficult
[02:37:41] <mike18> and more code too
[02:38:24] *** Joins: EdFletcher (~PKD@user/edfletcher)
[02:39:22] <xkoncek> i love writing tons of c++ code which is translated into nothing
[02:39:23] <mike18> CarloWood: https://ideone.com/azPEO9
[02:39:33] <mike18> Alipha: https://ideone.com/azPEO9
[02:40:29] <mike18> the iterative code is ugly?
[02:47:25] *** Joins: scoobydoo_ (~scooby@user/scoobydoo)
[02:49:57] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[02:50:02] *** scoobydoo_ is now known as scoobydoo
[02:56:15] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:03:05] *** Quits: dextercd1 (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[03:03:30] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:20:37] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Remote host closed the connection)
[03:22:59] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Quit: Quit)
[03:23:51] <KombuchaKip> The equivalent of a `continue` within a std::for_each iteration would be `return`?
[03:26:35] <mike18> return returns for the function
[03:27:09] <mike18> continue just skips to the next iteration
[03:27:49] <kalven> KombuchaKip: yes
[03:28:15] * KombuchaKip nods
[03:41:29] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[03:48:24] <Alipha> And throwing an exception would be the only way to end the for_each early
[03:51:23] * KombuchaKip nods
[03:53:43] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:59:09] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[04:02:23] <LordKalma> !fact
[04:02:25] <nolyc> LordKalma: The class template allocator_traits supplies a uniform interface to all allocator types.
[04:11:45] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[04:14:41] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 250 seconds)
[04:15:23] <LordKalma> https://www.reddit.com/r/cpp/comments/rufcu0/llvm_enjoyed_record_growth_in_2021_many_exciting/
[04:15:28] <LordKalma> Very interesting. With interesting insights in the comments
[04:19:33] *** Joins: KombuchaKip (~kip@192.252.230.5)
[04:22:24] <KombuchaKip> What is the fastest way to construct a set of integers from a vector of sorted integers? I see there are a bunch of options discussed here, except for the main one I was considering which was using std::set's constructor from beginning and end iterators. https://www.geeksforgeeks.org/how-to-convert-a-vector-to-set-in-c/
[04:23:24] <KombuchaKip> Nevermind, I see it does have it as solution 2.
[04:23:50] <kalven> if you have the vector, what do you need the set for?
[04:24:55] <KombuchaKip> kalven: Something else needs to check if a value is within it. They're both logarithmic access time, but set has a faster built-in find() because its contents are always guaranteed to be sorted. Searching the vector can be done too, but it's possible it might not be sorted.
[04:24:59] <Alipha> KombuchaKip: if the vector is sorted, it may be faster to use the std::set::insert overload with the hint parameter, and just keep passing the returned iterator into the next insert as the hint
[04:25:26] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:25:43] <Alipha> KombuchaKip: eh, is the vector sorted or not?
[04:25:56] <KombuchaKip> Alipha: It probably is, but it's possible it might not be.
[04:26:28] <Alipha> Also, why have the vector in the first place and not just use a set?
[04:26:36] *** Plazma_ is now known as Plazma
[04:26:44] <KombuchaKip> Alipha: Because other code provides it as a vector and not a set.
[04:26:59] *** Quits: Plazma (~Plazma@darkness.ninefives.net) (Changing host)
[04:26:59] *** Joins: Plazma (~Plazma@user/plazma)
[04:28:06] <Alipha> Hm, actually, I'm not sure if the hint should be the returned iterator or the end iterator.
[04:28:43] <kalven> and if performance is important, you probably shouldn't use std::set to begin with
[04:29:24] <KombuchaKip> kalven: But it is logarithmic access time, no? Perhaps unordered_set instead?
[04:29:41] <Alipha> Actually, it would be the end iterator, it seems
[04:30:03] <Alipha> KombuchaKip: use a sorted vector for best performance, assuming you're not often modifying it
[04:30:31] <kalven> KombuchaKip: sure, it is.. but there are other things to consider than just the complexity
[04:31:39] <KombuchaKip> Alright, sorted vector it is then.
[04:32:02] <Alipha> std::unordered_set may be faster than either, depending upon the size and other factors. And there's plenty of 3rd party hash sets which are faster than std::unordered_set
[04:43:21] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8852:8e46:d9d4:3d0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:48:54] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[04:48:55] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[04:48:59] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d531:3351:da41:8d2b)
[04:51:55] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[04:54:45] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[04:59:01] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[05:03:25] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community @ https://indiedevs.net/)
[05:13:27] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[05:14:36] *** Quits: rayw_ (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 268 seconds)
[05:17:44] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[05:27:04] *** Joins: pulse (~pulse@user/pulse)
[05:29:43] <mike18> unoredered_map<int,int> ht; ht[1]++; ... could there be an issue if i just use [] on a empty map?
[05:30:12] <mike18> unordered_map<int,int> ht;
[05:34:57] <kalven> no, it'll work fine
[05:40:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:35] *** ChanServ sets mode: +v npaperbot
[05:40:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86)
[05:43:57] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[05:45:35] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:55:06] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 260 seconds)
[05:58:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[06:11:53] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[06:16:58] <mike18> kalven: and speed?
[06:17:02] <mike18> same as insert?
[06:18:35] <kalven> you'll have to benchmark and find out, but does it really matter?
[06:25:49] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:39:07] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[06:41:57] <Alipha> mike18: what are you comparing ht[1]++ to exactly? Because that's more than a simple insert
[06:43:08] <Alipha> And if two pieces of code have exactly the same behavior, then the compiler will likely to optimize them to the same instructions
[07:02:44] <mike18> Alipha: what you mean its more?
[07:02:58] <mike18> insert a key and increment the value...
[07:05:44] <kalven> the typical alternative (written by people who aren't familiar with maps) is to check if the entry is there, if so increment it, otherwise insert a new element
[07:12:39] *** Joins: adeliktas9 (~adeliktas@i59F5F8A0.versanet.de)
[07:14:43] *** Quits: adeliktas (~adeliktas@i59f52f41.versanet.de) (Ping timeout: 256 seconds)
[07:14:43] *** adeliktas9 is now known as adeliktas
[07:20:54] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86) (Quit: Quit)
[07:31:57] *** Quits: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi) (Ping timeout: 240 seconds)
[07:37:22] *** Joins: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi)
[07:48:11] *** Joins: letto2 (~letto@188.25.113.229)
[07:48:43] *** Quits: letto (~letto@188.26.158.104) (Ping timeout: 256 seconds)
[07:56:26] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86)
[08:00:29] *** Quits: jsbach (~jsbach@2a01:c22:a9bf:ef00:c64a:e5ec:ce59:30d2) (Ping timeout: 268 seconds)
[08:03:51] *** Quits: DSpider (~DSpider@82.79.237.67) (Quit: Leaving)
[08:10:27] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86) (Quit: Quit)
[08:10:42] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[08:13:16] *** Joins: jsbach (~jsbach@2a01:c23:6441:8000:130c:b91a:7d90:17f4)
[08:14:28] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d531:3351:da41:8d2b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:15:24] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[08:19:24] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:31:32] *** Joins: frost (~frost@user/frost)
[08:36:37] *** Quits: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Ping timeout: 250 seconds)
[08:38:47] <p-i-_> I'm trying to link my macOS build against OpenSSL.
[08:38:57] <p-i-_> `brew install openssl` gives me this information:
[08:39:16] <p-i-_>     For compilers to find openssl@3 you may need to set:
[08:39:27] <p-i-_>         export LDFLAGS="-L/usr/local/opt/openssl@3/lib"
[08:39:37] <p-i-_>         export CPPFLAGS="-I/usr/local/opt/openssl@3/include"
[08:39:47] <p-i-_> How can I incorporate this into my CMakeLists.txt?
[08:48:35] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Remote host closed the connection)
[09:17:44] <leduyquang753> Those are linker and compiler flags, CMake has corresponding options.
[09:18:14] <leduyquang753> Digging deeper those just add an include folder and a library folder for which CMake also has dedicated options.
[09:19:25] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[09:27:36] *** Joins: CoderCharmander (~CoderChar@254C16C5.nat.pool.telekom.hu)
[09:27:39] *** Quits: CoderCharmander (~CoderChar@254C16C5.nat.pool.telekom.hu) (Remote host closed the connection)
[09:34:26] *** Joins: CoderCharmander (~CoderChar@254C5E64.nat.pool.telekom.hu)
[09:34:52] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (Quit: ZNC 1.7.3 - https://znc.in)
[09:35:07] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[09:38:37] *** Quits: CoderCharmander (~CoderChar@254C5E64.nat.pool.telekom.hu) (Ping timeout: 240 seconds)
[09:38:58] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:39:19] *** Joins: CoderCharmander (~CoderChar@2A001110020322CF0000004F2F62E401.mobile.pool.telekom.hu)
[09:40:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:33] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:33] *** ChanServ sets mode: +v npaperbot
[09:56:11] *** Quits: CoderCharmander (~CoderChar@2A001110020322CF0000004F2F62E401.mobile.pool.telekom.hu) (Ping timeout: 245 seconds)
[09:56:55] *** Joins: CoderCharmander (~CoderChar@2A0011100227F7D7000000153FA9D301.mobile.pool.telekom.hu)
[09:57:14] *** Joins: etolier_ (~somewhere@202-144-174-137.ip4.superloop.com)
[09:57:16] *** Quits: CoderCharmander (~CoderChar@2A0011100227F7D7000000153FA9D301.mobile.pool.telekom.hu) (Client Quit)
[09:59:03] *** Quits: etolier (~somewhere@116-255-9-224.ip4.superloop.com) (Ping timeout: 256 seconds)
[10:02:21] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[10:10:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[10:25:07] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[10:28:07] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:31:30] <ville> does cl have equivalent of gcc's statement expressions extension?
[10:41:16] *** Joins: andreasbuhr (~quassel@p5dcf911a.dip0.t-ipconnect.de)
[10:41:41] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:42:07] *** Quits: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi) (Ping timeout: 256 seconds)
[10:45:28] *** Quits: andreasbuhr (~quassel@p5dcf911a.dip0.t-ipconnect.de) (Client Quit)
[10:46:21] *** Joins: andreasbuhr (~quassel@p5dcf911a.dip0.t-ipconnect.de)
[10:54:01] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:03:42] *** Quits: jsbach (~jsbach@2a01:c23:6441:8000:130c:b91a:7d90:17f4) (Remote host closed the connection)
[11:05:39] *** Joins: jsbach (~jsbach@2a01:c23:6441:8000:d454:d36d:3779:f890)
[11:06:58] <ville> somewhat surprising that linux kernel project is able to improve build times by such large margins: https://lwn.net/ml/linux-kernel/YdIfz+LMewetSaEB@gmail.com/
[11:07:17] <johnny> indeed
[11:15:26] *** Joins: supernova (~quassel@2405:9800:ba11:6207:71e3:d186:a975:82a)
[11:18:38] <TinoDidriksen> An ancient codebase where nobody thought to look into dependencies before? I can believe that.
[11:21:57] *** Joins: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi)
[11:22:16] <johnny> can somebody explain "but not progress updates" both what it means, and how common it was
[11:23:35] <TinoDidriksen> That's specifically against one troll who wanted to rules-lawyer that posting about his personal projects' progress updates wasn't off topic.
[11:23:54] <TinoDidriksen> I can remove that part now, since he's banned.
[11:24:00] *** ChanServ sets mode: +o TinoDidriksen
[11:25:06] *** TinoDidriksen changes topic to 'C++ algorithms, libraries, practices, projects, tools. || pastes: https://wandbox.org/ || stats/logs: https://i.pjj.cc/lb || channels: #c++ #c++-basic #c++-social #geordi'
[11:25:11] *** TinoDidriksen sets mode: -o TinoDidriksen
[11:25:16] <kalven> He set up shop in a different channel :D
[11:26:32] <johnny> what a dolt
[11:26:57] *** Quits: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi) (Ping timeout: 240 seconds)
[11:27:21] <very_sneaky> well, now that it's no longer a rule... ;)
[11:28:51] <TinoDidriksen> As long as it's not spammy, I don't mind people asking for feedback on projects. But what he was doing was spam.
[11:30:15] <johnny> on that note.. i wonder what happened to that (what i assume was a kid) tellin me i wasn't a "real man"
[11:30:31] <TinoDidriksen> "...a specific order of headers guaranteed a particular code generation outcome - and if that header order was disturbed, the kernel would silently break and fail to boot" - that's a really damn important discovery.
[11:31:08] <johnny> that one must have been fun
[11:32:50] <ville> we're all living that dream... odr
[11:33:42] <ville> i would guess c++'s even more susceptible due to overloading
[11:33:43] <johnny> i don't follow kernel dev that closely, but i definitely was used to hearin some names occasionally, and i heard of ingo in some time. I wonder how much actual time was spent on this
[11:33:57] <johnny> and i hadn't heard of ingo in some time*
[11:34:16] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[11:43:19] <ville> TinoDidriksen: given it's c it's surprising. doesn't have templates to spam out instantiations and then further gimping overload resolution performance
[11:43:41] *** Joins: undeclared (nullx@user/undeclared)
[11:44:00] <ville> i would have also guessed 10-20% improvement a likely range
[11:46:11] <TinoDidriksen> Well, the kernel uses macros to effectively simulate templates.
[11:48:54] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86)
[11:54:43] *** Joins: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi)
[11:57:03] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:6ebd:9831:1706:e3de:b0b8) (Remote host closed the connection)
[12:00:17] *** Quits: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi) (Ping timeout: 240 seconds)
[12:01:35] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:02:36] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[12:02:43] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[12:03:06] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:04:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[12:08:58] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5322)))
[12:08:59] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[12:10:56] <supernova> is += binary operator?
[12:11:06] <supernova> or unary as ++?
[12:11:19] <TinoDidriksen> Binary
[12:17:12] <supernova> ty
[12:28:35] *** Joins: robod34 (Username@79.113.195.239)
[12:30:26] *** Joins: rayw_ (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[12:50:35] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[13:05:02] *** Quits: letto2 (~letto@188.25.113.229) (Quit: Konversation terminated!)
[13:05:37] *** Joins: letto (~letto@188.25.113.229)
[13:07:13] <ville> the post-increment operator ++ overload looks deceptively like a binary operator
[13:08:20] <fiesh> honestly, it's a hack
[13:10:54] <LordKalma> I wonder how our friend's universal compiler + GUI framework + chess AI + whatever else he hallucinated that day is going
[13:12:38] <kalven> he's been working on audio stuff lately
[13:14:11] <LordKalma> what was the name of the framework? I forget
[13:15:44] *** Joins: plastico (~plastico@neomutt/plastico)
[13:18:40] <fiesh> neogfx, it's the neo shit
[13:20:43] *** Joins: The_Jag (~The_Jag@host-79-52-45-220.retail.telecomitalia.it)
[13:22:18] *** Joins: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi)
[13:22:18] *** wyre_ is now known as wyre
[13:24:42] <LordKalma> that
[13:26:23] *** Quits: andreasbuhr (~quassel@p5dcf911a.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:26:47] <very_sneaky> i feel like i've missed out by not knowing who you're talking about
[13:27:19] <LordKalma> you're not missing out, don't worry
[13:27:39] <very_sneaky> there is a website for it though, if you wanted to keep up to date: https://neogfx.org/
[13:27:45] <LordKalma> no no no no
[13:27:48] <LordKalma> don't look for it
[13:27:55] <fiesh> lol
[13:28:19] <very_sneaky> it has 427 stars. wat
[13:28:38] <LordKalma> very_sneaky, the TLDR is that that dude is basically clinically insane, and despite neoGFX looking like half of a GUI framework... the dude can't be trusted
[13:28:41] <LordKalma> he's all over the place
[13:29:17] *** Quits: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi) (Ping timeout: 256 seconds)
[13:29:21] <very_sneaky> lol ok
[13:29:25] <LordKalma> he came here constantly showing the latest button and meme he made with his GUI framework, and then talking about universal compilers that would parse *any* language
[13:29:31] <LordKalma> and stuff like that
[13:29:57] <very_sneaky> sounds like a visionary to me
[13:30:00] <very_sneaky> a _dreamer_
[13:30:50] <kalven> he can code for sure, and neogfx actually looks quite good.. he's just got an insatiable need for attention and a pretty toxic personality
[13:30:57] <LordKalma> yap
[13:31:26] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:31:37] <fiesh> and delusions of grandeur
[13:32:06] <LordKalma> kalven makes a good point. Like, what he has achieved so far is pretty impressive. The insanity, toxicity, and attention span of a goldfish out of the water make all he does kinda moot
[13:32:52] <LordKalma> PJBoy, https://www.reddit.com/r/cpp/comments/rufcu0/llvm_enjoyed_record_growth_in_2021_many_exciting/
[13:33:24] <very_sneaky> i read that like 10 mins ago
[13:33:46] <fiesh> if he focused on a narrower use case, he'd probably create a great library... but wanting to replace Qt as a whole and then some is something else...
[13:33:48] <very_sneaky> first comment: "Except, you know, C++ support, which currently lags behind gcc and msvc". brutal
[13:34:13] <LordKalma> very_sneaky, with an accompanying commentary from a contributor
[13:34:49] <very_sneaky> LordKalma: yeah i saw. I sympathise with their position - i can't imagine people who understand compiler concepts enough to provide review are falling off trees
[13:35:07] <very_sneaky> s/review/meaningful review
[13:35:37] <PJBoy> they switched to github recently though
[13:35:47] <PJBoy> so hopefully their reviews and contributions will pick up in pace
[13:35:55] <LordKalma> well, that's like... If I am the first to write a feature for a certain compiler, by definition, I'm the only one who understands it
[13:36:00] <LordKalma> so it's kinda chicken and egg
[13:36:03] <very_sneaky> fiesh: without knowing them, i guess that depends on how long they can burn away at this - large scopes can be achievable if you give them enough resources :shrug:
[13:36:09] <PJBoy> llvm aren't the first to write anything
[13:36:29] <LordKalma> PJBoy, it's a hypothetical.
[13:36:42] <LordKalma> pretend all GCC devs hate llvm's license so much they refuse to review code for it
[13:36:45] <very_sneaky> LordKalma: kinda, having an understanding of how it fits in with the larger architecture/where responsibilities begin and end etc is valuable knowledge to have going into a review
[13:36:50] <PJBoy> gcc provide something to compare too though
[13:36:50] <LordKalma> "OMG COMPANIES WILL LEACH ON IT" :p
[13:37:00] <LordKalma> yes, at least you can look at it
[13:37:02] <PJBoy> so you can test shit out rather than rely on interpreting the standard
[13:37:03] <fiesh> very_sneaky: yeah if Qt was a dead project, you'd theoretically have a chance of surpassing them as a single person.  but that's a false premise
[13:37:37] <LordKalma> that said, LLVM's team is probably small...
[13:37:46] <LordKalma> they rely a lot of companies upstreaming, like Intel
[13:37:54] <LordKalma> so I can see how the process is slow
[13:37:55] <very_sneaky> the way they make it sound is that the team is basically all volunteers
[13:38:03] <LordKalma> probably is
[13:38:21] <very_sneaky> volunteers/companies subsidizing employee time to volunteer
[13:38:26] <LordKalma> yap
[13:38:32] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:39:00] <LordKalma> apart from the Linux Foundation there aren't many high profile open source projects with full time teams I'd say
[13:39:22] <LordKalma> Intel subsidizes a lot of projects with own devs time actually
[13:39:28] <very_sneaky> open source? i'm sure there are
[13:39:37] <very_sneaky> python software foundation would be one
[13:39:41] <fiesh> gcc's got full time devs
[13:39:44] *** Joins: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi)
[13:39:52] <LordKalma> Thiago, a *major* Qt::Core guru is a full time Qt dev but a full time Intel employee
[13:39:53] <very_sneaky> quantstack
[13:40:07] <LordKalma> what's quantstack?
[13:40:14] <very_sneaky> they develop xtensor et al
[13:40:18] <LordKalma> ah ok ok
[13:40:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:29] <LordKalma> yeah, those have companies interesting in keeping projects alive
[13:40:36] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:36] *** ChanServ sets mode: +v npaperbot
[13:40:38] <very_sneaky> yeah, they're open source though
[13:40:57] <LordKalma> yeah, I wasn't thinking wide enough for sure
[13:41:48] <very_sneaky> i wonder how jfrog acquiring conan will affect its future - i think in the short term it was probably a good thing
[13:42:12] <LordKalma> conan was always jfrog's
[13:42:18] <LordKalma> what are you talking about?
[13:42:19] <very_sneaky> i wonder how long it will take them to realise that general c++ community tooling support is beyond their core devops business and they cut funding back
[13:42:21] <LordKalma> (afaik at least)
[13:43:00] <very_sneaky> i thought it started out completely opensource and they were bought out by/acquired/primarily maintained by jfrog
[13:43:10] <very_sneaky> not sure about the specific language that's appropriate there
[13:44:21] <very_sneaky> actually can't find any references for this now - i thought it was in a talk that diego gave
[13:45:03] <PJBoy> their FAQ says "JFrog Inc. maintains Conan with a dedicated full-time development team . This team includes the Conan founders, and several additional developers"
[13:45:06] <very_sneaky> ah, yes: https://jfrog.com/blog/conan-joins-jfrog/
[13:45:28] <LordKalma> cool! TIL
[13:46:23] <LordKalma> very_sneaky, they don't care for the c++ "community" CCI is the "thank you" for working for them for free (making recipes, improving conan itself)
[13:46:27] <LordKalma> they are a devops business
[13:46:36] <LordKalma> as long as there are companies to pay for the devops platform, all good
[13:47:35] <very_sneaky> LordKalma: to clarify, you mean that jfrog provide CCI as a thankyou to C++ community members who engage with the conan project itself?
[13:48:14] <LordKalma> CCI is pretty much a win/win situation. When you write a package you're writing packages for their costumers :p
[13:48:38] <LordKalma> otherwise of course the economics of the platforms wouldn't make sense
[13:49:06] <very_sneaky> yeah, i guess so. I'm not overly pessimistic, but i did notice that they must have made some value judgement about having bintray open and available to everyone and shut it down
[13:49:51] <LordKalma> bintray was just a redundant platform. bincrafters moved to a conan artifactory and all is good in the world
[13:49:51] <very_sneaky> been replaced with opensource artifactory specifically for conan repo's, so we do have a direct replacement
[13:50:12] <very_sneaky> there's still a big gap there though - no more central distribution mechanism
[13:50:32] <very_sneaky> i know other ecosystems made use of bintray too, i.e. brew
[13:50:44] <LordKalma> even boost was on bintray of all things haha
[13:51:08] <LordKalma> that said, it's nice to see some things popping up, like official Qt conan repos
[13:51:16] <very_sneaky> anyway, it's entirely possible that it's all hunky dory and there's no change jfrog will drop conan, but i guess that really depends on the economic interests of jfrog
[13:51:17] <LordKalma> although, in good Qt fashion, they make you login :p
[13:51:19] <very_sneaky> yep
[13:51:41] <very_sneaky> s/change/chance/
[13:52:17] <very_sneaky> one of the upsides i guess is that if they do, the conan community has gotten pretty large now - it might be on the verge of self sustaining
[13:52:33] <LordKalma> well, Qt was an independent company, then a nokia company, then an independent company all over again
[13:52:35] <very_sneaky> though, i'm not sure how much open source development makes it back in - looks like the majority of it is still jfrog staff
[13:52:36] <LordKalma> depends on €€€€
[13:53:32] <very_sneaky> reading that press release also made it sound like jfrog was more _supporting_ conan development by providing FTE, rather than acquiring it or something
[13:54:22] <very_sneaky> ah, maybe i spoke too soon: https://www.crunchbase.com/acquisition/jfrog-ltd-acquires-conan-io--b0d54bac
[13:54:35] <very_sneaky> don't know what that website is or if they're reputable, but they use the word acquire
[13:54:40] <ville> LordKalma: blender
[13:54:52] <LordKalma> nice one
[13:55:01] <ville> LordKalma: krita has couple full time people i believe
[13:55:23] <LordKalma> well, now that I started thinking about it, SWIG is founded by the SFC
[13:55:36] <LordKalma> not sure if they have full time staff on SWIG, but they do fund its development
[13:56:38] <LordKalma> the KDE group which has like 3 or 4 institutions behind it probably also has full time devs
[13:56:42] <LordKalma> (and non devs)
[13:57:07] <ville> very_sneaky: you seem to be conflating terms. a company can develop open source. did you mean independent non-paid developers
[13:57:22] <very_sneaky> gnome, mesa, X, wayland
[13:57:47] <LordKalma> like the KDE Free Qt Foundation, which is basically the legal entity on the Qt agreement, KDE e.V., etc.
[13:57:49] <very_sneaky> ville: am I? my point was that companies can develop open source, not just independent developers
[13:58:30] <ville> then i don't understand what: "how much open source development makes it back in" and then contrasting it against it being all jfrog staff
[13:59:05] <very_sneaky> ah, sorry - yes in that statement i meant general c++ community development outside of the core jfrog team/founders
[13:59:38] <very_sneaky> i can see how it was ambiguous
[14:00:02] <ville> ok
[14:03:55] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:04:25] *** Joins: flynn (~mcbloch@user/flynn)
[14:05:07] *** Joins: paul424 (~tom@ip-31-0-124-77.multi.internet.cyfrowypolsat.pl)
[14:06:07] *** Joins: xkuru (~xkuru@user/xkuru)
[14:07:49] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[14:14:44] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[14:16:54] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Client Quit)
[14:22:33] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:67d9)
[14:32:37] *** Quits: cursey_ (~cursey@user/cursey) (Quit: bye)
[14:40:43] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[14:41:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:45:33] *** Joins: cursey (~cursey@user/cursey)
[14:47:40] *** Quits: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi) (Quit: flush)
[14:47:55] *** Joins: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi)
[14:51:00] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[14:52:04] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:56:52] *** Joins: p-i- (~Ohmu@2403:6200:8978:6ebd:d904:b477:8a7f:db46)
[15:00:27] *** Quits: p-i- (~Ohmu@2403:6200:8978:6ebd:d904:b477:8a7f:db46) (Remote host closed the connection)
[15:01:50] *** Joins: p-i- (~Ohmu@2403:6200:8978:6ebd:d904:b477:8a7f:db46)
[15:14:01] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86) (Quit: Quit)
[15:21:17] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86)
[15:21:41] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:23:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:23:28] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[15:23:38] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[15:25:10] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:36:30] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:45:18] *** Quits: paul424 (~tom@ip-31-0-124-77.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[15:45:57] *** Joins: seninha (~seninha@user/seninha)
[15:51:20] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[15:54:13] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:56:32] *** Quits: etolier_ (~somewhere@202-144-174-137.ip4.superloop.com) (Quit: No Ping reply in 180 seconds.)
[15:57:55] *** Joins: etolier (~somewhere@202-144-174-137.ip4.superloop.com)
[15:58:13] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[15:59:52] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[16:23:52] *** Joins: ravan (~ravan@user/ravan)
[16:27:49] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[16:27:55] *** Joins: Simplar (~Simplar@188.163.93.76)
[16:30:39] *** Quits: p-i- (~Ohmu@2403:6200:8978:6ebd:d904:b477:8a7f:db46) (Remote host closed the connection)
[16:37:23] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[16:38:36] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:45:49] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[16:53:06] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[16:53:15] *** veverak1 is now known as veverak
[16:54:42] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86) (Quit: Quit)
[16:54:44] *** Oxyd- is now known as Oxyd
[16:58:14] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[16:58:38] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[16:59:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:00:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b440:1fdb:a9a9:c6fa)
[17:00:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b440:1fdb:a9a9:c6fa) (Changing host)
[17:00:25] *** Joins: skapata (~Skapata@user/skapata)
[17:08:30] *** Quits: Simplar (~Simplar@188.163.93.76) (Remote host closed the connection)
[17:08:49] *** Joins: Simplar (~Simplar@188.163.93.76)
[17:10:13] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[17:10:40] <supernova> Can someone explain the difference between compliation time and execution time?
[17:12:09] <PJBoy> same as the difference between compiling and executing
[17:14:11] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:10da:965a:3a7c:5a1)
[17:18:59] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[17:21:39] *** Joins: pulse (~pulse@user/pulse)
[17:21:45] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[17:23:52] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[17:33:17] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[17:40:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:34] *** ChanServ sets mode: +v npaperbot
[17:42:01] *** Quits: NyB (~archon@81.6.39.62) (Ping timeout: 256 seconds)
[17:43:15] *** Joins: NyB (~archon@2a02:169:1d9::1:0:0)
[17:44:16] *** Joins: cart_man (~rynot@host-78-144-125-216.as13285.net)
[17:44:35] *** Quits: cart_man (~rynot@host-78-144-125-216.as13285.net) (Client Quit)
[17:45:50] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[17:53:43] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[17:58:33] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[18:06:17] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[18:15:07] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[18:18:09] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:19:52] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:5bd9:a354:aeec:d2d2)
[18:19:52] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:5bd9:a354:aeec:d2d2) (Changing host)
[18:19:52] *** Joins: RoKenn (~RoKenn@user/rokenn)
[18:27:37] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[18:31:45] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:35:15] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[18:39:24] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:45:45] *** Joins: p-i- (~Ohmu@2403:6200:8978:6ebd:d904:b477:8a7f:db46)
[18:53:46] <LordKalma> hahah in the Qt mailing list a KDAB employee telling Lars (the CTO) "you should read your company blog"
[18:53:48] <LordKalma> love it hahah
[19:00:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[19:03:54] *** Joins: rajkosto (~rajkosto@109-93-186-147.dynamic.isp.telekom.rs)
[19:05:52] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[19:13:32] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[19:13:35] <supernova> Can you please explain Constructor lines for the code in wand
[19:14:02] <LordKalma> supernova, are you new to c++?
[19:14:14] <supernova> no
[19:14:42] <supernova> https://wandbox.org/permlink/4jvL0wDKkeH3mMzz
[19:15:10] <supernova> why?
[19:16:47] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[19:18:15] *** Joins: magla (~gelignite@55d4d852.access.ecotel.net)
[19:18:20] *** Quits: rajkosto (~rajkosto@109-93-186-147.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[19:19:08] *** Joins: danielrparks (~quassel@2600:1700:3f7b:20f:9cc:dd59:e257:1efa)
[19:25:58] <mort> how are you supposed to depend on boost? From what I can tell there's no .pc file for it?
[19:26:15] <LordKalma> what's a .pc file?
[19:26:21] <mort> a file for pkg-config
[19:29:45] *** Joins: jehelset (~jeh@ti0300a400-0078.bb.online.no)
[19:30:04] *** Joins: Simplar (~Simplar@188.163.93.76)
[19:30:53] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[19:33:42] <p-i-> I've been shafted by a contract dev. Most grateful if someone has a little bandwidth to help me get traction/started in untangling this.
[19:34:17] <p-i-> Task was to create a websocket client that connects to a crypto exchange (kucoin) and subscribes to a stream, dumping packets as they arrive.
[19:34:43] <p-i-> He's delivered a solution that works on linux, but he's blackboxed a critical component: https://bpa.st/JSQA
[19:34:56] <p-i-> He's only supplied a compiled binary for the impl of that .h
[19:35:13] <p-i-> citing it contains "his own IP" code
[19:35:45] <p-i-> I don't know if this is reasonable, as I can't see how it can be more than a few lines of code.
[19:36:16] <p-i-> It certainly _feels_ unreasonable, as the task was to provide a working CODE solution.
[19:36:35] <LordKalma> that sounds like a litigation issue
[19:36:41] <p-i-> But nothing I can do now, save try to implement myself (or else start from scratch)
[19:37:30] <p-i-> How can I understand this `callback = make_shared<KucoinWSSCallback>(bind(lws_write, connection, _1, _2, LWS_WRITE_TEXT));` line?
[19:37:33] <p-i-> What's going on here?
[19:38:28] <p-i-> lws_write is a stock function from libwebsockets
[19:40:55] <p-i-> re: litigation, I don't have time for arguing the case, and he knows it. I have to hit a target for Saturday so Ima have to eat that one and improvise.
[19:46:49] <ville> p-i-: partial application. it's fixing some of the function arguments, leaving 2 "open" so it can be later on called with just 2 arguments
[19:47:51] <ville> p-i-: chances are lws_write is a member function of whatever the type of connection is
[19:48:31] <p-i-> so, to check I understand, instead of calling `lws_write(connection, foo, bar, LWS_WRITE_TEXT)` I can simply call `callback(foo, bar)` and it "forwards" to that func?
[19:48:59] <ville> well if it was a member function it would look more like: x.f(...)
[19:50:05] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[19:50:10] <ville> now why would you make an std::shared_ptr to such a thing... that's a different question
[19:51:13] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:53:12] *** Joins: aniketgm (~Aniket@49.36.107.163)
[19:56:57] <p-i-> https://bpa.st/DZ5A <-- I've made a more complete paste, which I think contains all pertinent code chunks
[19:57:45] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[19:58:57] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[19:59:13] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d4af:9903:9bb0:359c)
[19:59:20] *** Joins: pulse (~pulse@user/pulse)
[20:06:53] <mort> p-i-: what was in the contract? What did the contractor agree to deliver?
[20:07:20] *** Joins: davidlowryduda (~davidlowr@2601:197:600:1210:31ff:a804:81e3:5196)
[20:08:06] *** davidlowryduda is now known as dld
[20:08:47] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[20:11:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d4af:9903:9bb0:359c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:12:33] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[20:16:31] <p-i-> mort: C++ code solution. Not half-baked non-working mashup of C++ and his own private binary. But that's spilt milk now.
[20:16:59] <p-i-> I feel like a chump for failing to screen properly.
[20:17:45] <p-i-> I need to start testing these people out before pushing the button.
[20:18:06] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[20:28:09] <mort> well, if the contract was clear that the deliverable was code and not a binary then I'm not sure what you could've done really, they clearly could code so vetting their coding ability wouldn't help
[20:29:30] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:31:22] *** Joins: seninha (~seninha@user/seninha)
[20:32:09] <BurumaSerafuku> super wut
[20:33:26] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:35:26] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[20:40:04] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[20:52:42] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:56:18] <p-i-> It's more the lack of professinoalism that has killed me on this one... throwing half-baked code over the wall, sitting on a bug for 2 days (I had to take control and file an issue on libwebsockets which shook it loose in a couple of hours)
[20:56:55] <p-i-> I thought I was good at talent-spotting, but now thinking I just got lucky a bunch of times in a row.
[20:57:49] <p-i-> Also the arrogance... I clearly specified tasks and the dev decided he knew better.
[21:00:32] <mort> it seems a bit weird though to rely on a random contractor for something as time sensitive as this apparently is
[21:00:38] <p-i-> Sourcing a quality software engineer is a rare privilege. I've been fortunate to work with a few.
[21:01:18] <p-i-> What else to do? Try to thrash it out myself, maybe.
[21:01:42] *** Joins: adeliktas4 (~adeliktas@i59F52F7D.versanet.de)
[21:02:17] *** Quits: adeliktas (~adeliktas@i59F5F8A0.versanet.de) (Ping timeout: 240 seconds)
[21:02:17] *** adeliktas4 is now known as adeliktas
[21:02:42] <mort> where is the time pressure coming from anyways? Can't you run it with the black box library on linux for the time being and then go after him for the contract violation without the time pressure?
[21:03:31] <p-i-> yeah I'll have to settle for that. I really wanted to build for macOS so I can dev with tooling/IDE + fast devcycle-time.
[21:03:55] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:04:57] <p-i-> I'm writing code to trade on signals that come out every other saturday. So I have to work to that constraint. In a way it's good as it's teaching me to plan/schedule sprints. But it's stressful.
[21:06:42] <ville> p-i-: from early on i've tried to stick to development environment that's portable to platform or three
[21:07:25] <ville> meaning not going whole hog on some platform specific ides
[21:08:14] <mort> if your dev machine is a mac you ideally want something you can develop locally on that mac though, not something you have to compile for linux and then run in a linux environment
[21:08:27] *** Parts: aniketgm (~Aniket@49.36.107.163) ()
[21:08:36] <p-i-> I don't have any IDE tooling right now. I code-edit in VSCode and run from the CLI on macOS. I've got an AWS EC2 Ubuntu box that I can `git pull` into.
[21:08:38] <ville> wasn't until ~10 years ago i dropped the requirement for console-only possibility
[21:08:57] <ville> p-i-: well dunno what's he problem with doing that in linux then?
[21:11:21] <LordKalma> the MIT license is so short and the Apache 2 sooooooooooo ling
[21:11:24] <LordKalma> *long
[21:11:41] *** Joins: cart_man (~rynot@host-78-144-125-216.as13285.net)
[21:12:51] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[21:18:30] <PJBoy> I love those legal works that start with definitions of simple words in terms of several more complex words
[21:18:50] <CarloWood> I don't.
[21:23:18] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[21:28:44] <LordKalma> Apache 2.0 is so hard to use
[21:29:01] <LordKalma> you have the LICENSE file, the NOTICE file, and you're supposed to add a header to all files?!
[21:29:11] <LordKalma> how do you license files that don't support comments? (like JSON?)
[21:29:15] <LordKalma> how do you license binary files?!
[21:29:45] <p-i-> Thank god I'm too insignificant to have to deal with that fucking bullshit
[21:30:16] <LordKalma> any time you seriously consider putting something out there it's a bummer
[21:30:39] <LordKalma> I'm making a website with a couple friends. I'm giving up and licensing the code (it's open source) under MIT
[21:30:49] <ville> apache, gpl, mit and such are licenses for code, but as with any legal advice irc is the best place to get it from complete unknown idiots
[21:30:50] <LordKalma> I'll license the *contents* of the website under a Creative Commons
[21:30:59] <LordKalma> (haven't picked up which one)
[21:31:26] <PJBoy> you don't need all that stuff
[21:31:29] <LordKalma> ville, it was more to spike discussion, I don't expect valid legal advice here
[21:31:30] <p-i-> As if writing C++ isn't hard enough, now you have to waste time creating a legal language compiled by faulty judge/jury CPUs operating on {various legal enforcement entity} OSes.
[21:31:34] <PJBoy> license file is enough
[21:31:44] <ville> LordKalma: so you aren't expect to put those licenses on data
[21:32:29] <p-i-> I think that's why macOS ditched BASH ... GPL incompatibility issues
[21:32:32] <LordKalma> ville: Apache 2.0 says clearly: ""Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files."
[21:32:45] <LordKalma> configuration files :)
[21:32:49] <ville> LordKalma: alright, they're nuts then
[21:32:58] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[21:33:02] <LordKalma> but yeah, I re-read the instructions and it says: "To apply the Apache License to specific files in your work, attach the following boilerplate declaration"
[21:33:07] <LordKalma> The keyword being "specific"
[21:33:10] <LordKalma> so you're right PJBoy
[21:33:59] <PJBoy> https://www.apache.org/foundation/license-faq.html#Apply-My-Software was my citation
[21:34:21] <LordKalma> "A shorter variant you may wish to use is:"
[21:34:25] <PJBoy> "Include a copy of the Apache License and maybe do other stuff if you feel like it"
[21:34:27] <LordKalma> thank god they support SPDX
[21:34:50] <PJBoy> yeah but even that's unnecessary
[21:35:03] <LordKalma> PJBoy, the problem is that the license file itself says: "APPENDIX: How to apply the Apache License to your work." "To apply the Apache License to your work, attach the following boilerplate notice  [...]"
[21:35:09] <LordKalma> so they aren't consistent with their advice
[21:35:11] <PJBoy> no one likes reading copyright comments
[21:35:13] <LordKalma> no "specific files here"
[21:35:16] <PJBoy> except Stallman
[21:35:25] <LordKalma> no "specific files" here *
[21:35:28] <LordKalma> so whatever
[21:35:49] <PJBoy> where's this appendix?
[21:36:03] <PJBoy> nowhere here https://www.apache.org/licenses/LICENSE-2.0
[21:36:04] *** Joins: Tokamak (~Tokamak@172.58.191.63)
[21:36:13] <LordKalma> The github template has it... weird
[21:36:24] <LordKalma> fuck the github template then
[21:36:43] <PJBoy> oh the "how to apply the apache license to your work" must be the appendix
[21:36:58] <LordKalma> yes
[21:37:07] <LordKalma> but github's doesn't have "specific files"
[21:37:15] <LordKalma> I'll file a bug report on their license template repo
[21:37:26] <LordKalma> https://github.com/ruilvo/radioamadorismo-website/commit/a92aea7fea661668a49ab57dead177e0ccb768c7#diff-c693279643b8cd5d248172d9c22cb7cf4ed163a3c98c8a3f69c2717edd3eacb7
[21:37:28] <PJBoy> well appendices are non-normative anyway
[21:37:28] <LordKalma> this is their file
[21:37:38] <LordKalma> still, caused this confusion
[21:37:47] <PJBoy> ah
[21:37:52] <PJBoy> it is genuinely different
[21:38:05] <PJBoy> that's some buggy shit
[21:38:06] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[21:38:50] <PJBoy> some other words are different too
[21:39:14] <PJBoy> I love how the text at the bottom randomly decides to start screaming at you
[21:39:55] <PJBoy> "software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, OR SO HELP ME GOD, I WILL DESTROY YOU"
[21:40:27] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:36] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:36] *** ChanServ sets mode: +v npaperbot
[21:43:03] <LordKalma> https://github.com/licenses/license-templates/issues/12
[21:43:05] <LordKalma> :D
[21:48:33] <PJBoy> other issues dating back to 2013 :/
[21:49:33] <cbreak> I like to use the BSD license. It's short enough for me to pretend to understand it...
[21:49:43] <LordKalma> MIT is pretty thin as well
[21:50:22] <PJBoy> ISC is the shortest
[21:50:31] <LordKalma> Apache 2.0's particular extra protection is the trademark
[21:50:39] <LordKalma> that you see often slaped over an MIT license
[21:50:52] <PJBoy> but I've been meaning to relicense under BSD zero
[21:50:58] <LordKalma> PJBoy, "All rights reserved" ;) can't beat that :p
[21:51:05] <LordKalma> in shortness haha
[21:51:11] <PJBoy> that doesn't seem legally binding
[21:51:21] <PJBoy> how do you define "All", "rights" and "reserved"?
[21:51:25] <PJBoy> <_<
[21:51:44] <LordKalma> it's the legal default anyway. YOu write something, you have copyright over it
[21:51:52] <LordKalma> unless you provide a contract to give it away
[21:52:01] <PJBoy> github throws a spanner in those works
[21:52:11] <PJBoy> as your code is automatically forkable, which makes a copy
[21:52:44] <LordKalma> it's your responsibility to know if you can click the button
[21:53:22] <PJBoy> nah I believe github has legal magic
[21:53:23] <LordKalma> I bet that buried in GHs license agreement is "you won't sue us if you get sued over something you did on the platform"
[21:54:12] <PJBoy> https://opensource.stackexchange.com/questions/1154/how-does-githubs-forking-right-cope-with-an-all-rights-reserved-project
[21:55:10] <LordKalma> the fact GHs ToS doesn't legally define fork is the first clue something's not quite right
[21:55:15] <LordKalma> but yeah, the argument is good
[21:55:20] <PJBoy> tldr forking seems to be possible, but we'll never know for sure as mere mortals
[21:56:29] <LordKalma> the problem with forking is that me, as a copyright holder, can decide to *delete* the code
[21:56:41] <LordKalma> and that would imply a DMCA claim if someone forked it
[21:58:47] *** Quits: p-i- (~Ohmu@2403:6200:8978:6ebd:d904:b477:8a7f:db46) (Remote host closed the connection)
[21:59:15] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[21:59:23] <LordKalma> but yeah, the comments on that thread also pointed out how bad it is that GH doesn't legally define "fork"
[22:02:23] <PJBoy> eh isn't it obvious?
[22:02:42] <LordKalma> hahah good luck getting that to stick in legal stuff
[22:02:49] <PJBoy> it would have to define "fork" in some other words that could claim to have be defined
[22:02:58] <LordKalma> probably defensible, sure
[22:03:00] <PJBoy> *have to be defined
[22:03:15] <PJBoy> at some point you just have to accept that a word has the obvious meaning
[22:03:42] <LordKalma> look at the definitions on Apache 2.0
[22:03:51] <PJBoy> yeah they're insane
[22:03:56] *** Joins: p-i- (~Ohmu@180.183.72.66)
[22:04:22] <PJBoy> it defines "Object" in terms of "mechanical transformation or translation"
[22:04:46] <LordKalma> yes, that's because they want to use "Object" to mean "transformed source"
[22:04:52] <LordKalma> while "object" in the dictionary means "thing"
[22:04:57] <PJBoy> "mechanical transformation" is apparently self explanatory
[22:05:10] <PJBoy> let me just call my mechanic and ask him about transformers
[22:05:14] <LordKalma> yes because those words can be taken in their "dictionary" form
[22:05:16] <PJBoy> that'll clear the apache license up
[22:05:21] <LordKalma> while "Object" is being defined
[22:05:31] <LordKalma> I can totally see the distinction
[22:05:32] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[22:05:36] <PJBoy> I don't accept it
[22:05:53] <PJBoy> no way is mechanical transformation of source code defined in any dictionary
[22:06:04] <LordKalma> "Object" is a definition. they could call it "Qhasdhu#1113e"
[22:06:10] <LordKalma> it's just a "token" word
[22:06:13] <LordKalma> thus why it's defined
[22:06:24] <PJBoy> why stop there?
[22:06:32] <TinoDidriksen> Forks are still wholly owned by the original author. Just because Github allows forking doesn't change the legal state of the fork.
[22:06:35] <PJBoy> all words are arbitrary tokens, they could choose to define every word used
[22:06:57] <PJBoy> it's a license that defines "License"
[22:07:01] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 240 seconds)
[22:07:12] <LordKalma> all words are arbitrary tokens, but "Object" in the context of the Apache 2.0 license is a *new* token
[22:07:18] <LordKalma> so is "License"
[22:07:30] <PJBoy> I would have no reason to read this license if I didn't know what a license was
[22:07:37] <LordKalma> "license" is *a* license. "License" is defined as THIS license
[22:07:47] <PJBoy> eh
[22:07:47] <LordKalma> so that the word "License" can be used throughout the document
[22:08:19] <PJBoy> as if using the word "license" without the uppercase L needed clarifying
[22:08:40] <PJBoy> I mean what's a "term" when it says terms and conditions
[22:08:53] <PJBoy> it doesn't say it refers to one of the terms defined in sections 1 though 9
[22:09:09] <PJBoy> why does license need defining but not term
[22:09:13] <LordKalma> oh come'on you're better than the slippery slope argument
[22:09:22] <LordKalma> it's lawyer speak, let them have their fun haha
[22:09:28] <PJBoy> >:(
[22:09:56] <PJBoy> it's a slippery slope argument yeah
[22:10:06] <PJBoy> but still
[22:10:17] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:10da:965a:3a7c:5a1) (Ping timeout: 240 seconds)
[22:10:18] <PJBoy> where *do* you draw the line between English and lawyerish?
[22:10:30] <LordKalma> that is a fair question
[22:15:22] <yolo> https://github.com/doctest/doctest/issues/554  doctest looking for maintainers, original author is leaving, sigh
[22:15:29] <LordKalma> shit
[22:15:45] <LordKalma> doctest was my favorite from what I tried
[22:16:02] <yolo> same here, catch2 is very heavy and slow comparatively
[22:16:17] <yolo> not sure about cmake's ctest for c++ though
[22:16:17] <PJBoy> :<
[22:16:29] <LordKalma> ctest isn't a testing framework
[22:16:32] <LordKalma> it's a "test-runner"
[22:16:39] <PJBoy> full respect for looking for a maintainer though
[22:16:43] <PJBoy> rather than letting it go stale
[22:16:47] <LordKalma> yeah for sure
[22:17:20] <LordKalma> https://github.com/nlohmann/json/issues/3232
[22:17:23] <LordKalma> people are douches
[22:17:33] <LordKalma> hahaha
[22:18:12] <yolo> once a while there are some excellent open source project lost their developers, while quite some large big companies use them, I wish they could sponsor the developers for the long run, everybody wins
[22:18:14] <great_taste> if I have `struct A { int i {-1}; };` and do `auto a = A{}; a.i = 2;`, then `a = {};` will reset i to -1?
[22:18:15] <PJBoy> ahaha
[22:18:30] <PJBoy> try it and see
[22:18:35] <great_taste> :)
[22:19:12] <PJBoy> I would have maybe given you the answer if you wrote `A a;` or `A a{};` instead of that abomination :p
[22:19:20] <yolo> fast forward to 2022, still can't type well in irc
[22:19:53] <PJBoy> nlohmann's not wrong to make the switch though I guess
[22:20:00] <LordKalma> probably not
[22:20:19] <LordKalma> and doctest was made to be very drop-in to catch
[22:20:22] <LordKalma> so going back is easy as well
[22:20:42] <LordKalma> in fact once I was looking for some stuff in doctest's cmake API and ended up in the Catch2 discord by accident
[22:20:46] <LordKalma> and started asking questions
[22:21:10] <LordKalma> all because doctest links to catch2's docs on the cmake API
[22:21:43] <LordKalma> embarrassing moment
[22:22:37] *** Joins: rnsanchez (~rnsanchez@179.233.249.52)
[22:24:27] <whupdup> Hey, does anyone know how to get clang to just build for x64? I've tried passing -DLLVM_TARGETS_TO_BUILD=x64 as well as x86
[22:25:00] <yolo> google sometimes prefers python doctest to c++ doctest though
[22:25:20] <LordKalma> google's AI is making google so shit
[22:25:46] <LordKalma> still better than DDG is very specific stuff. Once at work we compared google side-by-side with DDG with very specific technical crap
[22:26:46] <LordKalma> whupdup, maybe a llvm-specific channel would have people more experienced on building llvm from source?
[22:27:08] <whupdup> those exist?
[22:27:20] <yolo> DOCTEST_CONFIG_DISABLE is the best feature I liked in doctest, catch2 copies that idea back via CATCH_CONFIG_DISABLE but it's broken per my test two months' ago
[22:27:20] <LordKalma> seems the official channel is #llvm on irc.oftc.net, not here on Libera
[22:27:26] <LordKalma> (cc whupdup )
[22:27:35] <whupdup> oh let me look there then, thanks
[22:30:35] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 256 seconds)
[22:30:52] <yolo> clang++ is still way behind g++-11/12 on new features, g++ rules these days, just ignore llvm for c++
[22:31:16] <LordKalma> if you don't need the new features, LLVM has a lot of good stuff :)
[22:32:03] <yolo> that's true, lots of checkers etc are based on llvm, so the best is for llvm to catch up fast, somehow it lost steam on g++17/20/23 front
[22:32:19] <LordKalma> you're welcome to help :)
[22:32:35] <yolo> not talent enough, sigh
[22:35:37] <whupdup> Yeah the main thing I care about for llvm is 1) it has some neat support tooling afaik 2) it seems to generate nice assembly and 3) it seems like the best option for windows
[22:36:25] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:37:19] <ville> it's starting to be annoying again, what with c++ editor's lsp's using clangd
[22:37:27] <whupdup> by tooling I mean stuff like clang-tidy and various neat seeming sanitizers
[22:39:46] <yolo> yeah tooling is the key from llvm, on windows i think its own compiler is better, though i don't do windows at all
[22:42:51] <LordKalma> msvc's pretty good
[22:43:48] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[22:45:17] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Read error: Connection reset by peer)
[22:45:34] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[22:45:52] <PJBoy> msvc is good if you ignore all its flaws
[22:45:56] <PJBoy> which I like to do
[22:46:23] *** Quits: supernova (~quassel@2405:9800:ba11:6207:71e3:d186:a975:82a) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:47:05] <whupdup> my other issue is that building gcc is an asspain, and just from screwing around on godbolt I can tell there's a huge benefit in staying on the cutting edge with your compiler in terms of assembly generated
[22:47:11] <LordKalma> int add(int a, int b) return a+b; // msvc generates 1252 lines of assembly
[22:47:12] <whupdup> because holy crap are the trunk versions smart
[22:47:58] <LordKalma> the things we miss for the sake of not breaking the ABI :p
[22:48:15] <PJBoy> if only getting the latest version of tools was something linux devs cared about
[22:49:18] * PJBoy pretends he didn't have to install python3.5 recently
[22:51:05] *** Joins: rajkosto (~rajkosto@178-221-253-235.dynamic.isp.telekom.rs)
[22:58:19] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[22:59:54] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[23:03:07] *** Joins: wuldor2 (~daddy@84.71.242.153)
[23:03:18] <wuldor2> https://bpa.st/SO5Q
[23:03:35] <wuldor2> on line 31, calling glGenerateMipmap gives me a segfault, why is this?
[23:08:45] <PJBoy> I weep for those macros
[23:09:44] <PJBoy> wuldor2, have you seen https://stackoverflow.com/questions/68734672/glgeneratemipmapgl-texture-2d-exception-trhown
[23:09:48] *** Joins: autark (~autark@ti0048a400-0869.bb.online.no)
[23:14:01] <wuldor2> PJBoy: I don't know if that answers my question, or I am too much of a noob to know how it solves my problem.
[23:14:39] <PJBoy> thinking the issue might be somehow incorrect arguments to glTexImage2D
[23:15:01] <PJBoy> alternatively maybe glTexImage needs calling before glGenerateMipmap
[23:15:32] <wuldor2> I've tried the last one to no avail, if I remove glGenerateMipmap it works fine.
[23:15:55] <PJBoy> :/
[23:21:50] *** Joins: john99 (~john99@199.246.103.34.bc.googleusercontent.com)
[23:29:31] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:30:28] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Quit: RabidToaster)
[23:30:52] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[23:46:28] <yolo> how to do parallel build with cmake? cmake -j? or is there a flag inside CMakeLists.txt? google was unclear
[23:46:40] <yolo> hate to read cmake manual each time I need tweak it
[23:46:41] <LordKalma> depends on the generator
[23:46:48] <LordKalma> are you using make as the generator?
[23:46:52] <yolo> yes
[23:47:00] <LordKalma> build with make -j then
[23:47:07] <yolo> ok, thanks
[23:47:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Quit: Leaving)
[23:52:45] *** Quits: jehelset (~jeh@ti0300a400-0078.bb.online.no) (Ping timeout: 256 seconds)
