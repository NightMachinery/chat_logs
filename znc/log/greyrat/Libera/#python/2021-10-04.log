[00:00:28] <ledtc> okey, so what are you doing with the data after ?
[00:01:13] <adhawkins> Compare it against the size of a file at a given URL. I'm trying to avoid downloading it more than once.
[00:01:43] <sbrown2> adhawkins: if it makes any difference to you, EAFP is often considered Pythonic (see https://docs.python.org/3/glossary.html#term-eafp)
[00:01:45] <adhawkins> If I download it, I will download the size in the 'size' element. Then when I process it on the next run, I can check that the source file hasn't changed based on its size (crude I know, but probably good enough for what I want to achieve)
[00:02:33] <adhawkins> That's great sbrown2. I know just enough python to be dangerous, so always looking for the most Pythonic way of doing things to improve my knowledge.
[00:03:17] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:03:47] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:04:00] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[00:04:03] <ledtc> hmmm
[00:04:09] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[00:04:41] *** Joins: srhm (~srhm@user/srhm)
[00:06:03] <ledtc> adhawkins how to creat the dictionary ?
[00:06:08] <ledtc> how do you*
[00:06:18] <sveinse> altendky: this beauty only works with ancient wx 2.8 which is only available for py2.7, so I also will have to deal with that in addition to the purely py2->3 changes. Not decidided what route: Learn and port to newer wx, use tkinter or port to pyqt. tkinter is the most portable, but also the hardest to style for cross platform.
[00:06:50] <adhawkins> ledtc: It's created potentially in multiple stages, with the deeper values only being added when they're available.
[00:07:57] <adhawkins> It's a podcast downloader, to handle multiple podcasts. So the top level is an array of podcasts, with each one having a 'url' and 'directory' key. That then adds an 'episodeinfo' key when I process the first episode. Each episode adds a 'guid' key based on the guid of the episode. Then once I know how large the episode file is, I add in the 'size'
[00:07:57] <adhawkins> key.
[00:08:27] <adhawkins> Hope that makes sense!
[00:09:01] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:90f2:d7b2:4b0b:e3c)
[00:09:04] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[00:09:06] <ledtc> adhawkins well cant you just use default value when setting up the levels
[00:09:34] <ledtc> then they will always have an value and if its zero you havent downloaded anything
[00:09:57] *** Quits: Payam (~Payam@138.106.57.132) (Quit: Client closed)
[00:09:59] <ledtc> self.config['episodeinfo']['guid']['size'] =0
[00:11:05] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[00:11:40] <sveinse> You can use defaults: tree.get('episodeinfo',{}).get('guid',{}).get('size')  or just ['size'] on the latter if you want an error if it doesn't exist
[00:12:06] <altendky> sveinse: and the least capable, in my impression from helping people.  pyside is up and coming with their pypy support...
[00:13:10] <sveinse> altendky: yeah, when I said pyqt I really meant pyside6. That side of the family if you will.
[00:14:46] <adhawkins> They're all options, thanks ledtc and sveinse. I think the simplest is just to catch KeyError when I try to access it
[00:15:08] *** Quits: jellyknight (~gelignite@55d48808.access.ecotel.net) (Quit: Stay safe!)
[00:15:12] <sveinse> altendky: I've made full end-user apps with tkinter, and I've actually sworn to never do that again :D
[00:15:34] <ledtc> if 'size' in dict:   Also work
[00:15:50] <altendky> sveinse: i will provide you full support in your not-using of tk :]
[00:16:04] <sveinse> altendky: good, perfect. I count on it.
[00:16:56] <adhawkins> ledtc: Yes, but I need to check 'size', 'guid', and 'episodeinfo' which was starting to get messy.
[00:17:16] <ledtc> if a && b && c:  :D
[00:17:26] <sbrown2> adhawkins: if there's a chance that an intermediate key is defined but the value is not a dict, you should probably use `except (KeyError, TypeError):`
[00:17:52] <sveinse> altendky: you've done some qt apps in py right? Do you do widgets and layout programmatically or do you use the UI editor qt provides?
[00:18:17] *** Joins: beterraba (~beterraba@109.171.244.80)
[00:19:27] <adhawkins> ledtc; Yes, but it was getting very long! The intermediate keys should only ever be dicts, so that shouldn't be an issue.
[00:19:31] <altendky> sveinse: i did a lot of work so that from the get-go users could lay out my custom widgets in designer.  of course they never did, but that's why there's pyqt5-tools (with the pyqt designer plugin).  (and i think pyside either has or was working on a similar plugin)
[00:19:46] <altendky> sveinse: so yeah, for non-dynamic stuff i use the designer generally.
[00:19:49] <aphysically> I wonder if match/case on enums (sort of a stereotypical use in a lot of languages) will break mypy
[00:20:31] <altendky> sveinse: never did get an actual app in qtrio though...
[00:20:33] <aphysically> because I assume it's doing equality checking on the enums, and mypy doesn't support that for type narrowing
[00:20:58] <aphysically> (only identity checking, which is the PEP(8?) for singletons anyway)
[00:21:55] <aphysically> see https://github.com/python/mypy/issues/10915 -> if match case is doing equality checking it might be a bad idea to use enums with match/case if you plan to use mypy?
[00:22:11] <aphysically> I guess I can do some fun testing when 3.10 drops (tonight?)
[00:22:20] *** Quits: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[00:22:58] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[00:23:49] <sveinse> altendky: yeah about trio and async. Due to the way the qt eventloop is built and its focus around threads, I'm getting the half impression that using async in a qt-centric app isn't really going along the middle of the road.
[00:24:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[00:24:29] *** Quits: beterraba (~beterraba@109.171.244.80) (Ping timeout: 245 seconds)
[00:24:58] <altendky> sveinse: focus around threads?  i honestly think all the integrations fit reasonably well aside from nobody letting you await signals and such.  (which i've got code for for asyncio, twisted, and trio)
[00:26:30] *** Joins: rapier (~marcos@170.233.159.1)
[00:27:02] <sveinse> altendky: yeah, there a examples of setting up qt thread pool, which is is very qt-typical thing to do. Threads in py are more exotic, right
[00:27:14] <nwe> in my if __name__ == "__main__": I have  parser = argparse.ArgumentParser(description='simple script to add secrets into vault') with my  parser.add_arguments(--foo'
[00:27:47] <altendky> sveinse: exotic?  no.  they have all the same basic data integrity hazards everywhere.
[00:27:53] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:28:21] <sveinse> altendky: with an async framework one dont really need threads unless busy on something
[00:28:23] *** Joins: demirok (~bell@user/demirok)
[00:28:28] <altendky> sveinse: but mostly just default to not-threads in all places.  and the general use of threads in c++/qt would be more cpu time and linear coding without blocking everything else.  async in python addresses the latter.
[00:28:29] <nwe> in my if __name__ == "__main__": I have  parser = argparse.ArgumentParser(description='simple script to add secrets into vault') with my  parser.add_arguments('--foo',type=str ) and variable_foo = args.foo, in my  def main(): how can I use if args.command == foo: print(fobar)
[00:28:32] *** Quits: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se) (Quit: Client closed)
[00:28:58] <rapier> guys, you're a specialized programmer, why does vacuum cleaner take a long time to clean a small room? would it supposed to be faster once it is a robo?
[00:29:06] <rapier> i'm sorry for off-topic
[00:29:17] <rapier> but it is nonsense
[00:29:29] <nwe> it looks like it doesnt get the value from args.command.. or have I totaly missunderstand it.. ( im relatively new to python
[00:29:54] <sveinse> altendky: what I meant by exotic is that it's seldom one has justified need for threads in py with async. And of course all thread sync awareness is needed in qt too, but qt manages a few of them through their signals and slots.
[00:29:55] <altendky> nwe: i don't like `if __name__` to begin with, but if you do that the only thing in it should roughly be `main()` or `sys.exit(main(args=sys.argv))` or something like that.
[00:30:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: In exile.)
[00:30:18] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[00:30:55] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[00:31:08] <nwe> altendky: I will paste the code I trying to write :)
[00:31:10] *** Joins: Pickchea (~private@user/pickchea)
[00:31:24] *** Joins: djhankb (~djhankb@208.113.164.68)
[00:32:17] <nwe> so it easier to follow  what I trying to achive  :D
[00:33:03] <nwe> altendky: so what should I use instead if __name__ just use def main(): ? and put all my argparser in  there?
[00:33:05] <sveinse> altendky: I talked to one of our qt devs and his opinion were more inline of "yeah??... of course you need a new thread. why shouldn't you?" and he'd never approached an async framework like we have in py.
[00:33:50] <nwe> altendky:  https://dpaste.org/tBBC
[00:34:23] <altendky> sveinse: yeah, except you don't.  qt is async in c++ as well.  just not as friendly within a single thread as `async`/`await` in python.  it's not uncommon that people seem surprised that you can do stuff in qt without threads.  i don't really understand why other than a pervasive lack of understanding that at it's core it is async, not threaded.
[00:34:41] <sveinse> altendky: so to conclude my argument, I get the feeling that that thinking is somewhat sitting in the walls in qt and partly pyside6. But it's getting better, and as you say, there are a number of async frameworks that integrate with pyside/qt
[00:34:53] <altendky> nwe: for `if __name__`, lets start with the question of why are you using it?
[00:36:44] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[00:36:44] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[00:37:28] <energizer> i like __name__ because it allows more interactivity such as through `ipython -im`
[00:37:36] *** Joins: brabrax (~brabrax@user/brabrax)
[00:37:44] *** Quits: brabrax (~brabrax@user/brabrax) (Remote host closed the connection)
[00:38:10] <energizer> also scripts are convenient
[00:38:33] *** Joins: brabrax (~brabrax@user/brabrax)
[00:38:34] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[00:38:40] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[00:38:40] *** Joins: califax (~califax@user/califx)
[00:39:21] *** Quits: rememberYou (~someone@user/rememberyou) (Remote host closed the connection)
[00:40:11] *** Joins: pycurious (~Adium@user/pycurious)
[00:41:09] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[00:41:31] *** Joins: nomic (~nomic@185.192.69.207)
[00:43:20] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[00:43:54] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:45:15] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[00:46:06] *** Joins: aalmazan (uid180785@id-180785.uxbridge.irccloud.com)
[00:46:51] * altendky gets ready for a tussle
[00:46:56] <aphysically> I'm still scared of async
[00:47:19] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[00:47:20] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:47:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:48:14] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[00:48:16] * energizer waits for altendky to get ready, since such preparations aren't necessary when interactivity is available
[00:48:32] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[00:49:04] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 245 seconds)
[00:49:09] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[00:49:35] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[00:49:44] <sveinse> I think getting to grasp async is perhaps the hardest programming logic I've had to learn (and I still learn). I find async very elegant to linearize, well, async (in the broader sense) code.
[00:49:50] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[00:50:00] *** Lord_of_Life_ is now known as Lord_of_Life
[00:51:12] *** Quits: Akuli (~Akuli@82-203-166-27.bb.dnainternet.fi) (Remote host closed the connection)
[00:52:38] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[00:53:22] <aphysically> it's just that async seems to infect everything that does I/O, where it needs its own async version and if you accidentally call something not async you bring down the whole concurrency ship
[00:53:25] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[00:54:01] <energizer> aphysically: that's correct
[00:54:30] <energizer> it's maybe the biggest downside of async-await
[00:54:32] <aphysically> which is what it is, I guess, but it seems a justifiable reason to be scared of entering the ecosystem
[00:54:35] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[00:54:52] <aphysically> the (async) ecosystem
[00:54:59] <energizer> on that issue https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/
[00:55:01] <yolo_> learning poetry here, what's the difference between `poetry env use python3.10` vs `poetry shell`? at its basic usage page it says `poetry shell` should be used for virtual env? meanwhile `poetry env use some-version-of-python` seems also like for the same virtual env thing?
[00:55:04] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[00:55:19] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[00:56:14] <yolo_> so i'm still confused about how to work with various python versions under poetry, between 'shell' and 'env use'
[00:57:06] <energizer> yolo_: `poetry env use` doesn't enter a shell
[00:57:45] <energizer> `poetry shell` does
[00:58:18] <sveinse> I was about to embark on a project to communicate with a USB-device from py and would expect that should be straight forward in async, but it turns out that Windows USB file handles are not easily pollable which is a prerequisite for a running async eventloop. So I'm back at traditional threaded and blocking IO.
[00:58:22] <yolo_> so the right order is: `poetry env use 3.10 && poetry shell` before I start to write and run code?
[00:59:25] <energizer> sure. tho you can always use `poetry run` instead of making a shell
[01:00:14] *** Joins: d00gy (~d00gy@user/d00gy)
[01:01:19] <yolo_> energizer: thanks! that fixes it. it was not clear to me. In the meantime, `poetry add -D black` is broken for 3.10-rc2, but with `python3.10 -m venv` I can `pip install black` fine, so there are some 'bugs' for poetry
[01:01:37] *** Parts: adhawkins (~adhawkins@user/adhawkins) (The Lounge - https://thelounge.chat)
[01:01:37] <energizer> sveinse: is it not worthwhile to use trio.to_thread/.from_thread
[01:01:38] <energizer> ?
[01:02:15] <energizer> yolo_: what is broken about it?
[01:03:19] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[01:05:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:05:22] <sveinse> energizer: maybe it is. I have to look into it. I haven't had that much experience with trio yet thou
[01:06:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[01:06:53] <yolo_> energizer: poetry new x; cd x; pyproject.toml has python set to 3.8; poetry env use `which python3.10`; poetry add -D black : ModuleNotFoundError: No module named 'cleo'
[01:06:54] <sveinse> For a new project what async framework to pick is not always easy. Do you have any preference?
[01:07:42] <energizer> sveinse: i havent made a choice like that in a while so things may be different now but i thought trio was better than the others
[01:07:49] *** Joins: fikran (~fikran@user/fikran)
[01:08:07] <yolo_> poetry new x; cd x; pyproject.toml has python set to 3.8; poetry env use `which python3.10`; poetry shell; poetry add -D black : ModuleNotFoundError: No module named 'cleo'
[01:08:11] <energizer> yolo_: that sounds like your installation of poetry is broken
[01:08:26] <energizer> wait
[01:08:30] <yolo_> poetry looks like npm
[01:09:09] <energizer> poetry has a dependency called cleo, it's supposed to be installed automatically with poetry
[01:09:11] <yolo_> for python 3.9, above steps work fine, so poetry seems OK
[01:09:34] <yolo_> pip+venv works well for both 3.8/3.9/3.10
[01:10:12] <yolo_> one more mystery for me is that, when 'poetry new x', the pyproject.toml had 3.8 for python, do I need manually change it to 3.9, 3.10 when I do 'env use 3.9 and 3.10'?
[01:10:35] <yolo_> it's attractively, but ... pip+venv seems painless
[01:12:48] *** Parts: transhumanist (~hiken@2601:196:8800:35f0:2c9b:f76e:5983:7b1c) ()
[01:14:51] *** Joins: cjb (~cjb@user/cjb)
[01:16:28] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[01:17:04] <yolo_> source venv-python-3.10/bin/activate; pip install poetry; poetry new x; cd x; poetry shell; poetry add -D black : at /usr/lib/python3.10/json/decoder.py:355 in raw_decode -- raise JSONDecodeError("Expecting value", s, err.value) from None
[01:19:56] <energizer> yolo_: if it still fails after reinstalling the newest version of poetry you could check the issues page and see if you can help narrow down the problem
[01:20:00] *** Quits: somazero (~somazero@2600:8805:b00:28::16f2) (Quit: WeeChat 3.0)
[01:20:58] <yolo_> energizer: yes i'm now pretty sure it's a poetry bug and will search-then-file an issue in 5 minutes. thanks for the help.
[01:24:52] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[01:24:52] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:f850:5d42:ec83:a36d) (Ping timeout: 252 seconds)
[01:25:05] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:25:33] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:25:51] *** Joins: jmft2 (~jmft2@213.31.248.255)
[01:26:25] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 252 seconds)
[01:27:18] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:31:42] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[01:31:56] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:32:07] *** Quits: runelind_ (~runelind@user/runelind) (Ping timeout: 240 seconds)
[01:34:47] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[01:35:04] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[01:35:44] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 245 seconds)
[01:37:02] *** Joins: bukata (~lev@user/bukata)
[01:37:11] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[01:40:54] *** Quits: prs (~Priyanshu@2409:4063:6d0c:b492::7208:8108) (Remote host closed the connection)
[01:42:25] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:45:02] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[01:45:44] <altendky> aphysically: the alternative is that nothing is async and you can't cancel any IO activities and every interaction has thread safety issues.  *shrug*  and it's not all that hard to take the easy route and wrap up a sync library running in a thread with an async interface.  so, not-async isn't magically devoid of major issues.
[01:46:06] *** Joins: mwd5650 (~mwd5650@fwbb-192-149-255-3.inxnet.net)
[01:49:24] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[01:49:30] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[01:50:46] *** Joins: arinov (~arinov@213.194.126.155)
[01:51:55] *** Joins: Oddity (Oddity@user/oddity)
[01:53:53] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:55:52] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[01:57:36] *** Quits: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2) (Remote host closed the connection)
[01:57:50] *** Joins: kostkon_ (~kostkon@2a02:587:a104:3da6:4d6c:40e6:f58:8e46)
[01:57:51] *** Joins: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2)
[01:58:22] *** Quits: kostkon (~kostkon@2a02:587:a104:3da6:4d6c:40e6:f58:8e46) (Remote host closed the connection)
[01:58:49] *** Quits: upsala (~zcb@185.213.155.160) (Ping timeout: 252 seconds)
[01:59:22] *** Quits: Henryx (~ebianchi@2a01:4f8:1c0c:76ad::1) (Quit: No Ping reply in 180 seconds.)
[02:00:46] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[02:01:28] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (Ping timeout: 268 seconds)
[02:01:28] *** Quits: zeus (~user@user/kamyl) (Ping timeout: 268 seconds)
[02:01:48] *** Joins: zeus (~user@user/kamyl)
[02:02:05] *** Joins: elena (~elena_re@31.173.85.129)
[02:02:11] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[02:02:28] *** elena is now known as elena_re
[02:02:38] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:02:47] *** Joins: inomoz (~inomoz@176.59.100.163)
[02:02:50] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[02:03:27] *** Quits: elena_re (~elena_re@31.173.85.129) (Client Quit)
[02:05:50] *** Quits: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9) (Quit: Leaving)
[02:06:35] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:90f2:d7b2:4b0b:e3c) (Quit: Konversation terminated!)
[02:07:59] *** Joins: CodePoint (~BitShift@96.47.237.21)
[02:07:59] *** Joins: nicode (~nic@45.72.213.174)
[02:11:48] *** Joins: runelind (~runelind@user/runelind)
[02:12:24] *** Joins: Bakunin (~Lindis@user/lindis)
[02:18:39] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 245 seconds)
[02:22:57] *** Joins: algae (~algernon@170.10.247.100)
[02:23:29] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:23:43] <pycurious> How does one block in an asyncio function that has to wait for a redis queue to be populated for a pop()?
[02:26:27] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[02:28:34] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[02:30:29] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[02:30:36] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[02:30:43] *** Quits: portalrat_ (~portalrat@user/portalrat) (Remote host closed the connection)
[02:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[02:31:10] *** Joins: portalrat_ (~portalrat@user/portalrat)
[02:32:08] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Client Quit)
[02:32:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 245 seconds)
[02:34:36] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Quit: Konversation terminated!)
[02:35:43] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:38:29] *** Joins: semeion (~semeion@user/semeion)
[02:39:23] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 265 seconds)
[02:40:00] *** Joins: korg815 (~korg815@user/korg815)
[02:40:13] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:41:18] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Read error: Connection reset by peer)
[02:41:23] *** Quits: portalrat_ (~portalrat@user/portalrat) (Remote host closed the connection)
[02:41:48] *** Joins: portalrat_ (~portalrat@user/portalrat)
[02:42:37] *** Joins: XV8 (~XV8@2601:5cb:c001:50:78:e67a:19d1:b3c9)
[02:43:39] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[02:46:43] *** Quits: eem (~eem@user/eem) (Quit: WeeChat 3.3)
[02:50:10] *** Quits: manti7 (~manti7@185.107.94.249) (Quit: WeeChat 3.1)
[02:50:41] *** Quits: extropiator (~extropiat@user/extropiator) (Ping timeout: 256 seconds)
[02:51:16] *** Quits: Narrat (~omnius@p200300df5f0e906306ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:51:39] *** Joins: bjb (~bjb@sourcerer.ca)
[02:52:49] <meejah> pycurious: if you're trying to use a threaded-style API the only real option is to deferToThread or whatever asyncio calls it
[02:53:26] <meejah> (or, use an asycnio-friendly redis library)
[02:53:49] *** Quits: trench_ (trench@user/trench) (Ping timeout: 252 seconds)
[02:53:59] *** Joins: trench (trench@user/trench)
[02:54:10] *** Quits: mertsas (~martin@ti0185q160-2775.bb.online.no) (Ping timeout: 260 seconds)
[02:54:20] *** Joins: fuxaches (~terry@S01060cb6d29d89df.ed.shawcable.net)
[02:54:55] *** Joins: walrus_man (~Thunderbi@host-92-22.alaures.auburn.al.us.clients.pavlovmedia.net)
[02:55:30] *** Joins: mertsas (~martin@ti0185q160-2775.bb.online.no)
[02:56:32] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:57:55] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[02:58:19] *** Joins: Jigsy (~Jigsy@user/jigsy)
[03:00:16] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[03:00:18] *** Joins: starz (starz@ns378512.ip-37-59-36.eu)
[03:02:41] *** Quits: aalmazan (uid180785@id-180785.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[03:05:55] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 252 seconds)
[03:08:25] <mingdao> What is incorrect in this line?   print "%*s" % (self.columnWidths[idx], row[idx])
[03:10:09] <mefistofeles> mingdao: if you really want to use the old format style, then that would be %s %s
[03:10:42] <mefistofeles> mingdao: but you should use the new format style (with .format method) and also you shouldn't be using python2, I guess
[03:11:09] *** Quits: demirok (~bell@user/demirok) (Ping timeout: 245 seconds)
[03:12:08] <mingdao> mefistofeles: It's a very old program of a friend  http://koltsoff.com/pub/meminfo/releases/meminfo-1.0.2.tar.gz
[03:12:22] <mingdao> And tbh, I really want to learn Python and don't know where to start.
[03:12:39] <mefistofeles> mingdao: the official tutorial is a good start point
[03:12:46] <mingdao> I'm a kinesthetic learner.
[03:12:46] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[03:12:59] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:13:04] <mingdao> I'm not going to just read; I need to read and do; and, I don't care for videos.
[03:13:06] <Bakunin> thats a myth
[03:13:10] <mingdao> The on in the /topic ?
[03:13:17] <mingdao> Bakunin: What's a myth?
[03:13:31] <mefistofeles> mingdao: yes, the one in the topic
[03:13:38] <mingdao> mefistofeles: Is this any good?  18:43:17 < mingdao> Bakunin: What's a myth?
[03:13:49] <mingdao> sorry
[03:13:57] <mingdao> mefistofeles: Is this any good?  https://learnxinyminutes.com/docs/python/
[03:14:04] <mefistofeles> mingdao: I don't know that one
[03:14:08] <mingdao> k
[03:14:21] <mefistofeles> mingdao: I also like automating the boring stuff with python, that one is pretty hands-on, fwiw
[03:14:35] <KirkMcDonald> mingdao: The main issue is that it's Python 2.
[03:14:38] <Bakunin> learning modalities are mythical, mingdao
[03:14:41] <mingdao> mefistofeles: Okay, I just need to break down and do it.
[03:14:46] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[03:14:50] <mingdao> Bakunin: I'm not here to argue.
[03:15:14] <mefistofeles> mingdao: that learnxinyminutes seems like a good quick reference, not much of a learning resource, imho
[03:15:14] <KirkMcDonald> mingdao: So that code won't work in Python 3.
[03:15:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:15:25] <mingdao> KirkMcDonald: Would porting meminfo.py to Python 3 be a good place to start, along with the tutorial in the topic?
[03:16:19] <mingdao> mefistofeles: I read it a bit, and some was understandable, some confusing because I have no foundation in Python.  I will use The Python Tutorial from /topic.
[03:16:31] <KirkMcDonald> mingdao: I am not familiar with meminfo.py, but porting code from Python 2 to Python 3 is the sort of thing which requires knowledge of both versions, and one of those versions is old and dead.
[03:16:47] <KirkMcDonald> mingdao: So it doesn't strike me as an ideal sort of beginner project.
[03:16:54] <pycurious> when one uses uvloop with asyncio, does one still use asyncio def f() format for running async functions?
[03:17:09] *** Joins: fikran (~fikran@user/fikran)
[03:17:53] *** Joins: OPK (~OPK@user/opk)
[03:18:39] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[03:18:59] <mingdao> KirkMcDonald: Thanks.
[03:19:49] <KirkMcDonald> mingdao: I find it's most useful to have some sort of project, though. Here's a good list of ideas: https://nedbatchelder.com/text/kindling.html
[03:20:25] <mingdao> KirkMcDonald: Thanks
[03:20:29] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 264 seconds)
[03:20:40] *** Quits: algae (~algernon@170.10.247.100) (Quit: WeeChat 3.3)
[03:27:20] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:30:10] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[03:30:36] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:30:43] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 252 seconds)
[03:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[03:33:58] *** Quits: Schnouki (~schnouki@user/schnouki) (Ping timeout: 268 seconds)
[03:35:06] *** Joins: hrob (~hrob@2a01:6f01:b602:d402:b3ec:51f4:438c:e281)
[03:35:12] <hrob> o/
[03:35:38] *** Joins: Fiji (~Fiji@user/fiji)
[03:35:46] *** Quits: walrus_man (~Thunderbi@host-92-22.alaures.auburn.al.us.clients.pavlovmedia.net) (Quit: walrus_man)
[03:36:09] <hrob> ehm, Ive been away for a while -- is it right that freenode is basically gone for foss projs like python?
[03:36:18] <hrob> I couldn't even login there with my old pass
[03:36:26] <hrob> sorry if off topic
[03:41:12] <bjs> hrob: yes it’s gone, all the old freenode accounts have now been deleted/destroyed and all the old staff and people and projects came here
[03:41:24] <bjs> (well some projects went elsewhere but yeah)
[03:41:43] *** Quits: bukata (~lev@user/bukata) (Ping timeout: 252 seconds)
[03:43:06] <hrob> @bjs thanks -- ok Im in the right place again :)
[03:45:19] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 245 seconds)
[03:47:13] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[03:47:19] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[03:47:49] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[03:48:44] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[03:53:16] *** Quits: Macuser (~Macuser@216.30.159.201) (Ping timeout: 252 seconds)
[03:55:11] *** Quits: jmft2 (~jmft2@213.31.248.255) (Quit: This computer has gone to sleep)
[03:55:34] <hrob> Im trying to read up on a syntax I havent come across yet --  def foo(bar, /, baz):
[03:55:43] <hrob> what is the role of / --- is it python3?
[03:55:57] <grym> hrob: forces positional arguments after it
[03:56:36] <grym> ie you may not foo(1, baz=)
[03:58:01] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-f5a6-aeaa-f048-ebe3.res6.spectrum.com) (Read error: Connection reset by peer)
[03:58:26] <hrob> @grym ok thanks - very special purpose I guess :S
[03:58:46] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[03:58:48] <hrob> I cant think of a situation where I would do that -- I would just use kwargs
[03:59:44] <nedbat> hrob: the slash forces positional arguments *before* the slash:  https://docs.python.org/3/tutorial/controlflow.html#special-parameters
[03:59:58] *** Joins: CodePoint_ (~BitShift@193.27.12.149)
[04:01:39] <grym> sorry, confusingly wrong example from me :)
[04:02:24] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 245 seconds)
[04:02:53] <hrob> ah, ok its kinda more explicit   as with the type hints -- probably helps things like swagger
[04:03:01] <grym> i like * better
[04:03:04] <grym> which forces kwargs
[04:03:10] *** Quits: CodePoint (~BitShift@96.47.237.21) (Ping timeout: 252 seconds)
[04:03:50] <grym> i've been writing a bunch of image processing stuff and all my signatures are of the form `def resize(theimage, *, option1, option2, option3)`
[04:04:06] *** Joins: CodePoint__ (~BitShift@89.38.227.229)
[04:05:15] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[04:05:23] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Client Quit)
[04:05:31] <hrob> thanks @grym & @nedbat    I'll consider this approach now that Im aware of it -- also I like how IDE's pick up on these hints
[04:05:54] <hrob> this case not a hint... but will give definite idea of the interface
[04:05:57] <grym> that's the other reason i like them, yes
[04:06:19] <grym> the big reason is that `resize(x, 1.5, 2, 12)` makes me want to scream
[04:06:38] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[04:06:59] *** Quits: CodePoint_ (~BitShift@193.27.12.149) (Ping timeout: 245 seconds)
[04:09:38] <nomic> aa.a
[04:10:05] *** Quits: CodePoint__ (~BitShift@89.38.227.229) (Quit: Never gonna give you up, never gonna let you down...)
[04:10:15] <nomic> "/" = line continuation
[04:10:21] *** Joins: CodePoint (~BitShift@89.38.227.229)
[04:10:44] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 245 seconds)
[04:10:52] <nomic> no thats \
[04:11:05] *** Quits: Forty-Bot (~kvirc@pool-108-45-127-224.washdc.fios.verizon.net) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[04:11:59] *** Quits: flokuehn (~flokuehn@mue-88-130-54-248.dsl.tropolys.de) (Ping timeout: 245 seconds)
[04:14:10] *** Joins: flokuehn (~flokuehn@i5e86b393.versanet.de)
[04:14:10] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:7887:ae3a:5fcf:c24c)
[04:14:51] <stewie925> hello guys, I have an issue with list.append and list.extend commands - https://bpa.st/M7IQ
[04:15:55] <Peng> stewie925: That code didn't copy the list.
[04:15:59] <nedbat> stewie925: your comment on line 5 is wrong. sums is now [[1,2]]
[04:16:03] <grym> stewie925: `sums = sum2 = []` is subtly wrong
[04:16:14] <stewie925> oh
[04:16:27] <grym> (but you also never hit the bug it causes)
[04:17:00] *** Joins: chenqisu12 (~xirndc@183.217.201.186)
[04:17:05] <stewie925> let me try something
[04:17:14] *** Quits: mossman93 (~quassel@user/mossman93) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:17:44] <grym> you're appending _the same list_ twice, though :)
[04:17:52] <byte4byte> i new around here but has anyone else been receiving threatening pms from the user jim?
[04:17:56] *** Joins: mossman93 (~quassel@user/mossman93)
[04:17:59] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[04:17:59] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[04:18:12] <grym> stewie925: bit.ly/pynames1 may help you
[04:18:14] <nedbat> jim: do you know anything about this?
[04:18:38] <stewie925> grym: thank you let me check that
[04:18:51] <stewie925> grym, yes, I intentionally appended it twice
[04:19:08] <grym> stewie925: i think you're not quite getting what i mean by "the same"
[04:19:13] <grym> it's the same _object_
[04:19:29] *** Joins: extropiator (~extropiat@user/extropiator)
[04:20:39] <grym> stewie925: if you `x = []; x.append([1,2]); x.append([1,2]); x[-1].extend([3,4])`  x will look like what you think it should
[04:21:12] <hrob> what does
[04:21:16] <grym> because you're appending two lists that happen to be equal to each other, in that case
[04:21:33] <stewie925> (listening to grym)
[04:23:24] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:23:38] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:26:09] *** Quits: CodePoint (~BitShift@89.38.227.229) (Ping timeout: 245 seconds)
[04:27:58] *** Joins: hacksword (~dan@107.182.228.102)
[04:27:59] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[04:28:35] <hrob> Im looking at some class definition with class variables (if they are variables)  defined as   foo: Foo    instead of   foo = Foo()
[04:28:59] <grym> that's an annotation
[04:29:09] <grym> telling you what type it is, but not assigning anything
[04:29:11] <hrob> like a type hint?
[04:29:13] <hrob> ah
[04:29:16] <cluelessperson> hrob, technically all classes when defined are variables.
[04:29:41] <cluelessperson> class Thing:       Thing is a variable assigned this class definition
[04:29:45] <cluelessperson> thing = Thing()
[04:29:46] <grym> hrob: any decorators over the class definition?
[04:29:59] <grym> like @dataclasses.dataclass or @attrs.s
[04:30:01] <hrob> @cluelessperson, ah ok all is object indeed
[04:30:05] <grym> (or does it inherit from BaseModel )
[04:30:19] <cluelessperson> hrob, even the built ins are objects.
[04:30:27] *** Joins: walrus_man (~Thunderbi@host-92-22.alaures.auburn.al.us.clients.pavlovmedia.net)
[04:30:27] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:30:31] <cluelessperson> and some of them you can remove if you wanted to strip python down
[04:31:36] <cluelessperson> hrob,   python is designed so that when you call.   Thing(,   it's triggering the    .__init__(self  and creating a new instance, self.
[04:32:22] <hrob> @grym  its more like    class Foo(abc.ABC)  \   bar: Bar \ baz: Baz
[04:32:30] <hrob> Bar and Baz some other classes
[04:32:40] *** Quits: XV8 (~XV8@2601:5cb:c001:50:78:e67a:19d1:b3c9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:32:43] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[04:33:27] <grym> hrob: ok.  so those probably are class attributes, then
[04:33:27] <nedbat> hrob: what's the question?
[04:33:49] *** Joins: y1n-v1 (~y1n@178.165.196.128.wireless.dyn.drei.com)
[04:34:00] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:34:30] *** Joins: XV8 (~XV8@2601:5cb:c001:50:78:e67a:19d1:b3c9)
[04:34:34] <hrob> @nedbat   I was wondering what this means   https://pastebin.com/s8PyhExG
[04:34:35] <infobob> https://bpaste.net/YOYQ (repasted for hrob)
[04:35:10] <hrob> @nedbat   Foo is a regular class
[04:36:04] <nedbat> hrob: it's a type hint for a class attribuet
[04:37:09] *** Joins: blobberdene (~blobberde@user/blobberdene)
[04:37:18] <hrob> @nedbat   ooph... im still getting used to type hints here -- but good to know it doesnt break anything... just confuses my IDE and swagger
[04:38:29] <jim> nedbat, sorry, about what?
[04:39:20] <nedbat> jim: about 20 minutes ago:  <byte4byte> i new around here but has anyone else been receiving threatening pms from the user jim?
[04:39:25] <jim> nedbat, oh, byte4byte has been a problem user on #linux for years and years
[04:40:53] *** Quits: blobberdene (~blobberde@user/blobberdene) (Quit: Quit)
[04:42:01] <nedbat> i see
[04:42:03] <stewie925> I still have issue with extend and append - https://bpa.st/ASJA
[04:42:42] <grym> stewie925: yes; did you read bit.ly/pynames1 and/or try the snippet i pasted earlier?
[04:42:43] <nedbat> stewie925: after line 5, you have to references to the same [1, 2] list
[04:43:01] <nedbat> stewie925: lines 4 and 5 don't copy the [1,2], they just reference it
[04:43:42] <stewie925> nedbat: thank you - so how do I append two [1,2] to summ array correctly?
[04:44:08] <nedbat> stewie925: you could make a copy of it, but it's hard to say because this is just a toy example
[04:44:22] <nedbat> stewie925: if we knew the real need, we might have a better answer
[04:44:33] <stewie925> ahh ok yes, I have a real need hehe
[04:44:45] <stewie925> I am practicing on algorithms when I hit this issue
[04:45:17] <stewie925> trying to do a "four sum" exercise with python - https://leetcode.com/problems/4sum/
[04:45:34] <stewie925> I got the logic down pat, but the extend and appends are screwing it up :(
[04:46:14] <hrob> @nedbat   byte4byte is on now my mental black-list -- nobody messes with the nedbat and his followers :)
[04:46:30] <nedbat> stewie925: in this case you can use:  summ.append(list(sum2))
[04:48:16] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 252 seconds)
[04:48:33] <stewie925> nedbat: oh...
[04:48:59] <stewie925> here is my four_sum logic:  https://bpa.st/7TAQ - showing the results and expected result
[04:49:14] *** Joins: califax- (~califax@user/califx)
[04:49:15] <stewie925> will try nedbat's suggestion
[04:50:21] *** Quits: dab21_ (~dab21@pistis.amyanddavid.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:50:35] *** Joins: dab21 (dab21@pistis.amyanddavid.net)
[04:51:26] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[04:51:49] *** Joins: brabrax_ (~brabrax@user/brabrax)
[04:52:25] <stewie925> nedbat: thank you , it worked!!!
[04:52:42] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[04:52:43] *** califax- is now known as califax
[04:52:44] <stewie925> that missing list() makes a world of difference
[04:53:03] <stewie925> summ.append(sum2) vs summ.append(list(sum2))
[04:53:10] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 260 seconds)
[04:53:10] *** brabrax_ is now known as brabrax
[04:55:33] <pycurious> How do I run this command in asyncio so that its not blocking -> redis_client.blpop(queue_name)
[04:58:46] *** Quits: extropiator (~extropiat@user/extropiator) (Ping timeout: 256 seconds)
[04:59:47] *** Joins: vlm (~vlm@user/vlm)
[05:03:07] *** Quits: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2) (Ping timeout: 252 seconds)
[05:05:18] *** Joins: nbao (~nbao@187.20.181.193)
[05:07:52] *** Joins: aknot (~aknot@2603:900a:1503:17bb:18b1:e284:a0a1:a14e)
[05:08:04] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[05:10:15] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:10:48] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[05:12:09] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:12:24] *** Quits: walrus_man (~Thunderbi@host-92-22.alaures.auburn.al.us.clients.pavlovmedia.net) (Quit: walrus_man)
[05:12:41] <hacksword> hmm, on the topic of leetcode, do people tend to use python for data structure/algorithm interviews? Does the high-level nature of python, with convenient features or shortcuts make it a less desireable for demonstrating knowledge?
[05:13:20] *** Joins: jinsun (~quassel@user/jinsun)
[05:14:25] <hacksword> Or do folks just try to use the most barebones implementations to avoid using shortcuts?
[05:14:45] *** Joins: walrus_man (~Thunderbi@host-92-22.alaures.auburn.al.us.clients.pavlovmedia.net)
[05:17:30] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[05:17:47] <KirkMcDonald> The approach I always preferred is asking the candidate which language they are most comfortable with, and then picking an interview question that is appropriate for the language.
[05:19:17] <KirkMcDonald> Python's convenience means you can hammer out more code in the space of an interview's limited time, but often the important thing is demonstrating knowledge of how all the utilized bits of the chosen language function.
[05:20:08] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[05:21:04] <KirkMcDonald> Ideally, the goal of an interview is to start a conversation that allows the candidate to demonstrate how knowledgeable they are.
[05:21:29] <KirkMcDonald> Not to literally just produce a solution to a programming exercise.
[05:22:10] <hacksword> Thats a good approach. I imagine if the company is more concerned with lower-level knowledge, the job likely requires very specific languages.
[05:22:53] <KirkMcDonald> Or at least the interviewer will attempt to calibrate the topic of the interview to the requirements of the position.
[05:23:38] <Bakunin> KirkMcDonald I can't find it, but there was a british tv interviewer who appeared fluent in no fewer than 6 languages, incl chinese
[05:23:45] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[05:23:47] <Bakunin> during the last Olympics
[05:24:12] <Bakunin> there was a viral video of him just rattling off each lang with diff athletes
[05:24:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[05:25:15] <KirkMcDonald> I mean that's not the first place I'd think of for recruitment, but shows what I know.
[05:25:46] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[05:25:52] <Bakunin> nope, I was wrong
[05:25:57] <Bakunin> no Chinese.  Luxembourgish, German, Spanish, Portuguese, French, and English
[05:26:04] <Bakunin> https://www.reddit.com/r/nextfuckinglevel/comments/orvxl8/reports_in_luxembourgish_german_spanish/
[05:26:12] <stewie925> you know, I prefer the interviewer zoom interview than leetcode
[05:26:29] *** Joins: fikran (~fikran@user/fikran)
[05:26:58] <KirkMcDonald> Or getting in the same physical room. But perhaps that's an attitude of the Before Times.
[05:27:07] <stewie925> yeah, either way
[05:27:26] <Bakunin> it goes real --> zoom --> homework
[05:27:29] <stewie925> Ive had interviews where the interview use something like CorderPad
[05:27:33] <Bakunin> from best experience to worst
[05:27:39] <stewie925> CoderPad
[05:28:03] <stewie925> with leetcode, how does the interviewer evaluate an unfinished code?
[05:31:02] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[05:31:15] *** Parts: fuxaches (~terry@S01060cb6d29d89df.ed.shawcable.net) ()
[05:31:22] <hacksword> very subjectively I imagine :)
[05:31:29] *** Joins: zaz\ (~zaz@poneybl.eu)
[05:31:54] <stewie925> honestly, Id love to see a sample of an unfinished leetcode and an interviewer explaining how he'd evaluate it
[05:33:02] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[05:34:23] <hacksword> I feel that FAANG type companies, for the most part, expect a complete solution with minimal hinting or its a fail.
[05:34:40] *** Quits: lemonsni- (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:35:35] <hacksword> I'm not a SWE, so that expectation could be the norm at most companies.
[05:37:08] *** Quits: walrus_man (~Thunderbi@host-92-22.alaures.auburn.al.us.clients.pavlovmedia.net) (Quit: walrus_man)
[05:37:46] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[05:37:49] *** Joins: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2)
[05:42:42] *** Joins: etbcf (~etbcf@2001:8a0:7b3a:dd01:2304:1fdd:d447:fe06)
[05:44:40] *** Parts: etbcf (~etbcf@2001:8a0:7b3a:dd01:2304:1fdd:d447:fe06) ()
[05:45:08] *** Joins: walrus_man (~Thunderbi@host-92-22.alaures.auburn.al.us.clients.pavlovmedia.net)
[05:45:12] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[05:49:10] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[05:51:30] *** Joins: mistery (~mistery@96.59.174.9)
[05:52:14] *** Joins: arthem (~rehmat@user/arthem)
[05:53:14] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 245 seconds)
[05:54:15] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[05:54:44] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 246 seconds)
[05:56:36] *** Quits: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2) (Quit: Leaving)
[05:56:50] *** Joins: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2)
[05:57:15] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[05:57:31] *** Joins: pycurious (~Adium@user/pycurious)
[06:01:13] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[06:03:07] <hrob> @hacksword   @KirkMcDonald   this topic stings a little bit, off topic too, but why not ask the candidate to show some code they have written -- code comments, unit tests, documentation etc?
[06:03:52] <Fiji> if you don't have code you write in your free time (which is an unfair expectation imo), then you can't really show anything, because most companies keep the source code private... for good reason
[06:04:06] <hrob> code takes time to write, quality, purpose and design, is usually most important
[06:04:07] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 252 seconds)
[06:04:50] <hrob> @Fiji indeed that is a limitation
[06:07:25] *** Quits: ska (~ska@user/ska) (Ping timeout: 252 seconds)
[06:09:26] *** Quits: lastshell (~lastshell@user/lastshell) (Ping timeout: 246 seconds)
[06:11:16] *** Joins: lastshell (~lastshell@user/lastshell)
[06:12:58] *** Quits: mwd5650 (~mwd5650@fwbb-192-149-255-3.inxnet.net) (Ping timeout: 252 seconds)
[06:13:01] *** Joins: seoul_man (~meh@user/seoul-man/x-5066766)
[06:15:49] *** Joins: alex11 (~alex11@user/alex11)
[06:16:03] <aphysically> ok I'm now quite sure enums shouldn't be used with structural pattern matching in mypy :D
[06:16:10] <aphysically> it can't do type narrowing because the check is equality
[06:16:13] *** Joins: brookesy66 (~will@202.168.59.59)
[06:19:36] <aphysically> I guess you could interpret pep8 as suggesting you shouldn't use structural pattern matching for enums
[06:19:55] *** Joins: ska (~ska@user/ska)
[06:20:24] *** Joins: introom (introom@2600:3c01::f03c:92ff:fea3:2cf)
[06:21:51] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[06:22:58] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[06:23:37] *** Joins: extropiator (~extropiat@user/extropiator)
[06:23:54] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[06:24:03] <tusko> Is there a preferred pastebin?
[06:24:17] <aphysically> bpa.st is in the topic, at least
[06:24:49] *** Quits: XV8 (~XV8@2601:5cb:c001:50:78:e67a:19d1:b3c9) (Remote host closed the connection)
[06:26:09] *** portalrat_ is now known as portalrat
[06:27:13] *** Quits: walrus_man (~Thunderbi@host-92-22.alaures.auburn.al.us.clients.pavlovmedia.net) (Ping timeout: 252 seconds)
[06:28:52] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:28:55] *** Quits: stoneware (~stoneware@user/stoneware) (Quit: The Lounge - https://thelounge.chat)
[06:31:01] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:33:42] *** Joins: XV8 (~XV8@2601:5cb:c001:50:78:e67a:19d1:b3c9)
[06:33:49] *** Quits: arthem (~rehmat@user/arthem) (Ping timeout: 252 seconds)
[06:35:03] *** Quits: hrob (~hrob@2a01:6f01:b602:d402:b3ec:51f4:438c:e281) (Quit: Client closed)
[06:35:07] *** Henry_The_Longsh is now known as HenryTheLongshot
[06:37:35] *** Quits: slee (~slee@user/slee) (Quit: Leaving)
[06:39:36] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[06:39:59] *** Quits: Daemoen (~Daemoen@daemoen.ct-unlimited.com) (Ping timeout: 268 seconds)
[06:40:04] *** Parts: langAt (uid520190@user/langat) ()
[06:40:08] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[06:42:14] *** Joins: okanua (~okanua@186.69.82.47)
[06:43:06] *** Joins: Daemoen (~Daemoen@daemoen.ct-unlimited.com)
[06:43:11] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[06:44:29] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 245 seconds)
[06:45:58] *** Quits: aknot (~aknot@2603:900a:1503:17bb:18b1:e284:a0a1:a14e) (Ping timeout: 252 seconds)
[06:46:30] *** Joins: arthem (~rehmat@user/arthem)
[06:48:59] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[06:49:46] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[06:50:08] *** Quits: softwarewolf (~software@user/softwarewolf) (Quit: Quit)
[06:51:13] *** Quits: chenqisu12 (~xirndc@183.217.201.186) (Remote host closed the connection)
[06:51:18] *** Quits: chowmein__ (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[06:51:20] *** Quits: rapier (~marcos@170.233.159.1) (Read error: Connection reset by peer)
[06:51:28] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 252 seconds)
[06:51:28] *** jmiehe1 is now known as jmiehe
[06:52:25] <tusko> I'm using this https://bpa.st/C4TQ to try to find an input that will produce a given hash, but it kind of just runs forever.
[06:54:11] *** Joins: bfortified (~bfortifie@172.83.243.94)
[06:55:58] *** very_sneaky_ is now known as very_sneaky
[06:56:09] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 245 seconds)
[06:56:28] *** Joins: drew` (~drew@user/drew)
[06:56:44] *** Quits: drew (~drew@user/drew) (Read error: Connection reset by peer)
[06:56:55] *** Quits: arthem (~rehmat@user/arthem) (Ping timeout: 252 seconds)
[06:57:01] *** drew` is now known as drew
[06:57:58] *** Joins: semeion (~semeion@user/semeion)
[07:01:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[07:03:51] <hacksword> tusko: not sure if I'm reading correctly, but it looks like you an indentation issue here
[07:04:10] *** Joins: hendursaga (~weechat@user/hendursaga)
[07:04:20] <tusko> in what way?
[07:05:13] <energizer> indentation is fine
[07:05:23] <hacksword> sorry, browser width wrapped strangely
[07:05:45] <energizer> tusko: how long do you expect it to take?
[07:05:52] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (Quit: because)
[07:05:53] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[07:08:37] <energizer> hint: how long does it take your script to do 1000 hashes? how many possible hashes are there?
[07:09:01] <KirkMcDonald> At least two or three.
[07:10:57] *** Joins: dude-x (~textual@pool-108-50-217-42.nwrknj.fios.verizon.net)
[07:10:58] *** Joins: Hypothesis (Hypothesis@gateway/vpn/protonvpn/hypothesis)
[07:11:15] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[07:11:42] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:12:22] <tusko> oh, i don't even know. I need a specific 64-bits to occur in a 128-bit output
[07:12:25] <tusko> could take forever
[07:13:04] *** Quits: extropiator (~extropiat@user/extropiator) (Ping timeout: 256 seconds)
[07:13:25] <aphysically> if you're using md5 the hash is 128 bits, so a naive preimage attack via brute force will indeed succeed ~never
[07:13:28] <aphysically> (or take ~forever)
[07:13:28] <tusko> there's 2^128 hashes that are possible
[07:13:29] <energizer> tusko: i am curious what is the use case for this?
[07:13:41] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[07:13:55] <tusko> its for a class. I need to come up with a string that produces a hash that contains that string
[07:14:18] <tusko> or rather md5(input) = a string which contains the pattern
[07:14:36] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:7887:ae3a:5fcf:c24c) (Quit: Client closed)
[07:14:41] <aphysically> is the input known to be of high entropy?
[07:15:56] *** Quits: twobitsprite (~twobitspr@138.199.2.138) (Ping timeout: 246 seconds)
[07:15:59] <tusko> the input can be anything, I'm in need of an output that contains '276F7220313D3123'
[07:16:46] <tusko> well, the point being that I can use `input` to produce a has that contains that pattern
[07:16:57] <tusko> but I have to identify `input`
[07:17:05] <aphysically> as far as I know the preimage resistance of md5 is not broken
[07:17:35] <aphysically> so if input is of sufficient entropy what you're asking for is not possible
[07:17:55] <aphysically> if input is not of sufficient entropy you can use a dictionary attack
[07:19:18] <aphysically> this paper claims to do it in 2^123.4 (as opposed to 2^128) https://link.springer.com/chapter/10.1007/978-3-642-01001-9_8
[07:19:45] <tusko> I don't know what you mean by of sufficient entropy. I think you're asking if it is random? The answer to that is, yeah, input could be anything, but I need md5(input) to have that byte pattern
[07:20:05] <aphysically> if the input is not structured (sufficiently random) what you're asking for is not possible
[07:20:11] <aphysically> (with current knowledge)
[07:20:15] *** Quits: Bakunin (~Lindis@user/lindis) (Ping timeout: 276 seconds)
[07:20:29] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:c172:793:a1e6:efdc)
[07:20:29] <energizer> aphysically: they dont need the full md5 to match
[07:20:33] <energizer> just half of it
[07:20:53] <aphysically> oh?
[07:21:03] <energizer> <tusko> oh, i don't even know. I need a specific 64-bits to occur in a 128-bit output
[07:21:09] *** Quits: ska (~ska@user/ska) (Ping timeout: 245 seconds)
[07:21:24] <energizer> part of the assignment presumably
[07:21:37] <aphysically> well 64 bits is brute forceable I guess
[07:21:47] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[07:22:34] <aphysically> but not brute forceable enough to be reasonable for an assignment
[07:22:34] *** Joins: cheater (~Username@user/cheater)
[07:22:41] <aphysically> give me one second let me think about partial preimages
[07:22:49] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[07:22:57] *** Joins: twobitsprite (~twobitspr@107.13.51.62)
[07:23:54] <tusko> ok
[07:24:11] *** Joins: Bakunin (~Lindis@user/lindis)
[07:25:25] <tusko> yeah, exactly. So I could have md5(input) = {{32-bits random}...{64-bit byte string}...{32-bits random}} for example.
[07:25:29] <aphysically> yes I don't think md5 is any more broken for partial preimages than a full preimage
[07:25:41] <aphysically> but 64 bits seems a bit high for an assignment
[07:25:49] <aphysically> one second let me peruse the standard softwares to see if any support partial preimages
[07:25:58] <aphysically> they would give you an idea how long it would actdually take on your hardware
[07:26:06] *** Joins: saroy (~Sandipan@45.249.73.248)
[07:26:06] <tusko> ok cool
[07:28:12] <tusko> apparently my pattern may be too long
[07:28:22] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[07:28:47] <aphysically> forget about brute forcing 64 bits in python it's never going to happen
[07:29:12] <tusko> I figured as much
[07:29:21] *** Quits: Bakunin (~Lindis@user/lindis) (Ping timeout: 276 seconds)
[07:29:28] <tusko> There must be some smaller pattern that I can use
[07:29:30] *** Joins: WIT (~Lindis@user/lindis)
[07:29:38] <tusko> 8 characters is too many
[07:29:52] <aphysically> hashcat supports a "half md5" mode which is your exact requirement
[07:30:37] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[07:30:51] <aphysically> you'll want to try that and a GPU, but I'm not sure how fast modern GPUs are. It might not be possible on consumer hardware, but stuff is faster than when I was a kid so who knows
[07:31:08] *** Joins: djhankb (~djhankb@208.113.164.68)
[07:32:17] <energizer> on a single core in a fast language i checked 1M hashes in .5 second
[07:33:34] <cluelessperson> aphysically, tusko not just python, no language can do that.
[07:33:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:33:50] <cluelessperson> !calc 256^8
[07:33:53] <aphysically> 64 bits have been brute forced before
[07:34:02] <energizer> multicore would be a bit less than n times faster, and hashcat should be much much faster
[07:34:07] <aphysically> also preimage attacks are slightly faster than naive brute force (I don't remember the speedup)
[07:34:19] <aphysically> presumably hashcat implements the speedup
[07:34:24] <cluelessperson> aphysically, I highly doubt it.
[07:34:29] <cluelessperson> 256^8 = 18446744073709551616
[07:34:30] <aphysically> you highly doubt what?
[07:34:44] <aphysically> 70 something bits have been brute forced before even
[07:35:01] *** Quits: vd (~vd1785@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[07:35:03] <cluelessperson> doubt it
[07:35:04] <aphysically> I think that's where the record is, somewhere in the 70s iirc
[07:35:47] <energizer> is that on a laptop in 5 minutes or a supercomputer over a period of months?
[07:35:49] *** Joins: fikran (~fikran@user/fikran)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:02] <aphysically> no it was a distributed computing project over a period of years
[07:36:28] <aphysically> I think it's still running if you want to join
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:35] <aphysically> let me look up name
[07:36:56] *** Joins: Wulf (~Wulf@user/wulf)
[07:38:34] <aphysically> ah they're still in progress on the 72 bit, but I suspect the RSA challenge current record is somewhere in that range? https://www.distributed.net/RC5/en
[07:38:40] <aphysically> the 64 bit was done in 2002
[07:40:55] *** Quits: drew (~drew@user/drew) (Ping timeout: 252 seconds)
[07:41:21] <aphysically> 64 bits in general is crackable by anyone willing to shell out some tens of thousands for computing time a decade ago, but as I said I really don't know where that leaves us today with modern GPUs
[07:41:41] <aphysically> it's still my opinion it would be unreasonable for an assignment to expect anyone to do it
[07:42:10] <aphysically> and again, preimage attacks are faste rthan brute force I just can't remember the speedup off the top of my head
[07:42:17] <aphysically> it's not good I think it's only a constant factor
[07:44:19] *** Joins: drew (~drew@user/drew)
[07:45:50] <tusko> actually I may only need to match one byte
[07:45:56] <tusko> maybe two
[07:45:59] <aphysically> that's trivial
[07:46:16] <tusko> but I think it needs to be the first two bytes, maybe
[07:46:22] <aphysically> wouldn't matter
[07:46:30] *** Quits: nbao (~nbao@187.20.181.193) (Quit: leaving)
[07:49:06] <aphysically> tusko: okay I looked up GPU md5 performance, you'd be looking at months with a modern GPU
[07:49:25] <aphysically> I wonder if places sell FPGAs that can do it in days
[07:49:26] <aphysically> probably
[07:49:58] <aphysically> (for 64 bits), for your first two bytes just do it naively in whatever language you want
[07:51:06] <aphysically> probably you would just buy GPU time in the cloud to do it within a day
[07:51:42] <aphysically> quick maths show it would be on the order of a few thousand dollars with google's cloud GPUs
[07:51:42] *** Joins: emf (~emf@2620:10d:c090:400::5:6163)
[07:52:14] <aphysically> so we're actually not *that* much improved from the deep crack days
[07:52:23] <aphysically> a few orders of magnitude i guess :P
[07:52:30] <aphysically> (in cost I mean)
[07:54:02] *** Joins: xiongxin (~quassel@119.123.103.95)
[07:57:25] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[07:58:30] *** Joins: Wulf (~Wulf@user/wulf)
[08:07:04] *** Quits: d00gy (~d00gy@user/d00gy) (Quit: WeeChat 2.3)
[08:07:32] *** Joins: BSaboia (~bsaboia@138.0.74.212)
[08:08:34] <tusko> It gets two bytes very fast
[08:08:40] <tusko> but three ...
[08:08:59] *** Joins: arthem (~rehmat@user/arthem)
[08:10:20] <tusko> speak of the devil
[08:10:48] <deltab> each bit will double the time needed, I expect
[08:13:40] <aphysically> re: 64 bits being insecure since decades ago, I wonder how hard it will be to convince people to abandon 128 bit security if quantum computing ever becomes a thing
[08:13:42] *** Quits: okanua (~okanua@186.69.82.47) (Quit: Leaving)
[08:14:06] <aphysically> I'd say stuff would move away from it naturally, but SHA-1 was around for a long time after it was considered insecure
[08:14:33] <aphysically> I'd guess we'd be in a similar situation
[08:16:33] <Wulf> aphysically: you mean because of Grover's Algorithm? I've got serious doubts that it will be a threat in my lifetime.
[08:17:31] <aphysically> yeah, in principle it means 128 bit security isn't secure in any physical sense
[08:17:58] <aphysically> i.e. it takes ~2^64 tries to brute force it
[08:18:12] <aphysically> (w/ grover's algorithm)
[08:18:14] *** Joins: gggp (~textual@60.10.23.162)
[08:19:01] *** Joins: prs (~Priyanshu@2409:4063:6d0c:b492::7208:8108)
[08:19:07] <aphysically> Wulf: that's sorta what I mean, right? even if there's quantum computing it seems doubtful it would be in a good enough place to reach 2^64 computation capability anytime soon, but that's how people felt about SHA-1 for a long time, which makes me think 128 bit security will be around for the long haul
[08:19:15] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[08:19:22] *** Quits: drew (~drew@user/drew) (Remote host closed the connection)
[08:20:41] <Wulf> aphysically: You don't need 2**160 or 2**80 operations to find a collision in SHA-1. So that's a bad comparison.
[08:21:23] <aphysically> Wulf: isn't that SHA-1 collision attack ~2^64?
[08:21:28] <aphysically> it's like the same complexity
[08:21:58] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[08:22:37] <aphysically> they're both ~2^64 operations, just one of them has to be on a quantum computer
[08:23:32] <Wulf> ah, I would have thought you needed much fewer ops.
[08:23:48] <Wulf> (it's 2**57)
[08:24:13] <aphysically> better than I thought I remembered still
[08:24:31] <Wulf> Can the SHA-1-Attack be run in parallel? Can Grover be?
[08:25:42] <aphysically> I don't know the detail of the SHA-1 attack except that Google executed it
[08:25:47] <Wulf> Try counting to 2**64 single-threaded. Would take a lifetime on a modern CPU.
[08:25:50] <aphysically> but grover's algorithm can be infinitely parallelized like a brute forfce
[08:26:03] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[08:26:13] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[08:26:35] *** kostkon_ is now known as kostkon
[08:26:53] <aphysically> I don't think the speedup is simple though
[08:27:26] <aphysically> it's no tlike it halves like with classical search it's some other dumb factor I would have to get a pen to figure out
[08:28:44] *** Joins: stranac (~stranac@195.29.239.126)
[08:29:15] <aphysically> cause think, you split N in two, but each of those splits run in sqrt(n), so the sqrt(n/2)+sqrt(n/2)!=sqrt(n)
[08:29:38] <aphysically> so yeah you can infinitely parallelize it because the algorithm can be split, the speedup is just a bit less than normal
[08:30:20] <aphysically> each of those splits run in sqrt(N/2), I mean
[08:30:41] *** Joins: brylie (~Thunderbi@81-197-199-179.elisa-laajakaista.fi)
[08:31:09] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[08:32:17] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[08:33:38] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:c172:793:a1e6:efdc) (Read error: Connection reset by peer)
[08:40:41] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[08:40:42] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[08:41:39] *** Joins: pradhvan (~pradhvan@dgplug/pradhvan)
[08:42:01] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[08:43:17] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[08:43:29] *** Quits: bfortified (~bfortifie@172.83.243.94) (Changing host)
[08:43:29] *** Joins: bfortified (~bfortifie@user/bfortified)
[08:43:58] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[08:44:46] *** Quits: y1n-v1 (~y1n@178.165.196.128.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[08:46:53] *** Quits: cjb (~cjb@user/cjb) (Read error: Connection reset by peer)
[08:50:00] <tusko> You need ~2^160 bits to be secure
[08:50:00] *** Joins: Samian (~Sami@user/samian)
[08:50:10] <tusko> then the girls let u
[08:53:51] *** Joins: jetchisel (jetchisel@user/jetchisel)
[08:55:46] *** Quits: Zer000 (~phil@64.137.132.26) (Ping timeout: 252 seconds)
[08:56:02] *** Joins: solaris2006 (~cris@85.186.3.18)
[08:56:16] *** Joins: teru (~teru@fpd89969de.kytj002.ap.nuro.jp)
[08:57:50] *** Joins: demirok (~bell@user/demirok)
[08:59:53] *** Joins: pycurious (~Adium@user/pycurious)
[09:01:19] *** Joins: dvx (~dvx@185.63.97.64)
[09:01:47] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[09:03:34] *** Joins: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net)
[09:04:31] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[09:04:47] *** Quits: LuKaRo_ (~LuKaRo@p4fc32be7.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[09:05:46] *** Quits: solaris2006 (~cris@85.186.3.18) (Quit: leaving)
[09:08:44] *** Joins: LuKaRo (~LuKaRo@p4fc33c32.dip0.t-ipconnect.de)
[09:11:14] *** Quits: sbrown2 (~sbrown@66.44.16.44) (Quit: Leaving…)
[09:11:40] *** Quits: arthem (~rehmat@user/arthem) (Ping timeout: 252 seconds)
[09:13:53] *** Quits: BSaboia (~bsaboia@138.0.74.212) (Quit: This computer has gone to sleep)
[09:15:31] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:18:56] *** Quits: prs (~Priyanshu@2409:4063:6d0c:b492::7208:8108) (Remote host closed the connection)
[09:20:15] *** Quits: brylie (~Thunderbi@81-197-199-179.elisa-laajakaista.fi) (Quit: brylie)
[09:20:49] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:8402:fbcb:cf37:fd68) (Quit: Textual IRC Client: www.textualapp.com)
[09:21:09] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:23:13] *** Quits: Keira (~k@lulzsec.co.uk) (Ping timeout: 252 seconds)
[09:24:03] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[09:24:32] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:197d:2a2d:de89:5ea4)
[09:26:58] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[09:29:56] *** Joins: ExeciN (~ExeciN@user/nicexe)
[09:30:25] *** Joins: mrwick (~mrwick@user/mrwick)
[09:31:05] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[09:31:34] *** Joins: djhankb (~djhankb@208.113.164.68)
[09:31:56] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[09:32:38] *** Quits: Duckle (~Duckle@user/duckle) (Excess Flood)
[09:32:59] *** Joins: Duckle (~Duckle@user/duckle)
[09:33:01] <grawity> is it a bad habit to use `mydict |= {"foo": bar}` instead of `mydict["foo"] = bar`? e.g. https://paste.rs/37b
[09:33:14] *** Quits: xiongxin (~quassel@119.123.103.95) (Ping timeout: 245 seconds)
[09:34:22] *** Quits: jazzy (~jaziz@2600:380:8571:702f:1cbc:304:51f8:c200) (Ping timeout: 252 seconds)
[09:35:15] *** Joins: brylie (~Thunderbi@81-197-199-179.elisa-laajakaista.fi)
[09:35:58] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[09:36:35] <KirkMcDonald> grawity: `d[k] = v` is simpler.
[09:37:38] *** Quits: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) (Client Quit)
[09:38:14] *** Quits: teru (~teru@fpd89969de.kytj002.ap.nuro.jp) (Quit: Client closed)
[09:38:23] <OMGOMG_> and has the advantage of not throwing an error
[09:39:03] *** Joins: pycurious (~Adium@user/pycurious)
[09:39:03] <grawity> KirkMcDonald: yeah but I like the syntax symmetry
[09:39:05] <grawity> OMGOMG_: ?
[09:39:36] <grawity> KirkMcDonald: (especially when some of those "if foo:" additions consist of a whole bunch of items)
[09:39:53] <KirkMcDonald> A whole bunch of items is different from one item.
[09:40:26] <grawity> yeah, there's the basic initialization, then some "if" with 1-2 items, then some "if" with 4-5 items, and I like them all looking the same, hence |=
[09:40:37] <grawity> but it feels like I'm missing some hidden gotcha that'll bite me later
[09:40:43] <KirkMcDonald> Nah.
[09:41:02] <OMGOMG_> ok i guess in 3.9 that does not throw a typeerror
[09:41:04] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[09:41:19] <KirkMcDonald> Yes, | and |= on dicts was added in 3.9.
[09:43:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[09:43:34] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[09:44:54] *** Quits: LiftLeft (~LiftLeft@154.21.28.63) (Ping timeout: 245 seconds)
[09:45:09] *** Joins: fikran (~fikran@user/fikran)
[09:45:24] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[09:46:00] *** Joins: sunyour (~sunyour@129.226.182.99)
[09:46:26] *** Quits: brylie (~Thunderbi@81-197-199-179.elisa-laajakaista.fi) (Quit: brylie)
[09:46:40] *** Quits: seednode1 (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:47:18] *** Joins: seednode1 (~seednode@user/seednode)
[09:47:28] *** Quits: dab21 (dab21@pistis.amyanddavid.net) (Ping timeout: 252 seconds)
[09:47:38] *** Quits: infobob (~infobob@python/bot/infobob) (Ping timeout: 260 seconds)
[09:49:30] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 260 seconds)
[09:49:30] *** Quits: CrtxReavr (crtxreavr@shodan.trioptimum.com) (Ping timeout: 260 seconds)
[09:51:33] <aphysically> grawity: the latter is atomic
[09:53:26] *** Joins: Keira (~k@lulzsec.co.uk)
[09:53:37] *** Joins: mexen (uid495612@user/mexen)
[09:54:23] *** Joins: kosh (~kosh@user/kosh)
[09:54:51] *** Joins: xiongxin (~quassel@119.123.103.95)
[09:55:33] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[09:56:15] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[09:57:00] *** Joins: manti7 (~manti7@185.107.94.249)
[09:57:13] *** Joins: chenqisu12 (~xirndc@183.217.201.186)
[09:57:43] *** Joins: rendar (~rendar@user/rendar)
[09:57:56] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[09:58:58] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[10:00:15] *** Joins: pycurious (~Adium@user/pycurious)
[10:02:42] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[10:03:10] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[10:03:52] *** Joins: palasso (~palasso@user/palasso)
[10:04:29] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[10:06:01] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[10:07:48] <tusko> How do you create a virtualenv with PyPy as the interpreter?
[10:08:06] <tusko> `python -m virtualenv -p /usr/bin/PyPy3 ...` doesn't seem to do it anymore
[10:09:42] *** Joins: kosh (~kosh@user/kosh)
[10:10:15] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-b04805-44.dhcp.inet.fi)
[10:11:02] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[10:11:26] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[10:11:47] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[10:12:12] *** Quits: NeoCore (~neocore@89.40.183.217) (Quit: Leaving)
[10:12:18] <OMGOMG_> what makes you think that
[10:13:23] <tusko> I guess it is now pypy3 -m venv <dir>`
[10:13:24] *** Joins: infobob (~infobob@python/bot/infobob)
[10:13:43] *** ChanServ sets mode: +o infobob
[10:13:52] *** Quits: common (~common@user/common) (Remote host closed the connection)
[10:14:21] <tsujp> I have a regex I match but I want to use re.match and negate that regex, how can I?
[10:14:33] *** infobob sets mode: -b *!*eniac@gateway/tor-sasl/eniac
[10:14:34] <tsujp> if re.match(): works for matching but what about not matching?
[10:14:38] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[10:14:54] <tsujp> is it: `if not re.match():` ?
[10:15:53] <aphysically> tsujp: if re.match is none
[10:16:37] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[10:16:41] <aphysically> (it returns None when it doesn't match)
[10:16:43] *** Quits: Hypothesis (Hypothesis@gateway/vpn/protonvpn/hypothesis) (Remote host closed the connection)
[10:17:11] <tsujp> I tried `not` and that worked too, how is that?
[10:17:20] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:afc:8374:b9c6:51fc)
[10:18:43] *** infobob sets mode: -o infobob
[10:18:57] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[10:20:09] *** Quits: WIT (~Lindis@user/lindis) (Remote host closed the connection)
[10:21:24] *** Quits: sandb0y (~pirate@user/sandb0y) (Quit: WeeChat 3.3)
[10:21:29] *** Quits: tr4ck3ur (~tr4ck3ur@user/tr4ck3ur) (Quit: Leaving)
[10:23:54] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[10:24:18] <jinsun> because bool(None) is False
[10:24:36] <tsujp> not bool(None) is then True right?
[10:24:46] <jinsun> yes
[10:24:49] <tsujp> like `not bool(None)`
[10:24:51] <tsujp> thank you
[10:25:38] <jinsun> but you don't have to write the bool(), python does that implicitly when you use if statements
[10:26:01] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[10:26:19] <jinsun> so if not None: is treated like if not bool(None): which is if True
[10:27:47] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[10:28:50] <jinsun> tsujp: but bool() of a lot of things is False, if you only care about None then `obj is None` is better check than `if not obj`
[10:30:52] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[10:36:39] *** Joins: pycurious (~Adium@user/pycurious)
[10:36:47] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[10:37:18] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[10:37:36] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[10:37:37] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[10:38:23] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[10:38:37] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 252 seconds)
[10:40:46] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[10:41:22] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[10:41:44] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[10:43:36] *** Joins: vladoski (~vladoski@2001:b07:add:d406:bac7:93ee:29e3:e0d7)
[10:44:00] *** Joins: cyphase (~cyphase@user/cyphase)
[10:44:27] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[10:47:50] *** Quits: rannnn8888 (~rannnn888@bzq-109-65-168-133.red.bezeqint.net) (Ping timeout: 256 seconds)
[10:48:31] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 252 seconds)
[10:50:16] <aphysically> I'm going through some code bases of other people and I'm not sure all of these Anys are correct, I think a lot of them should be object but I'm not entirely sure on when it's bad practice in particular to use Any for things that can be any object
[10:50:34] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[10:51:02] *** Joins: jayvee (~quassel@idlerpg/player/jayvee)
[10:53:51] <tusko> is there a way to search for multiple patterns with one re.search(pat, string)?
[10:56:16] *** Joins: chele (~chele@user/chele)
[10:56:46] *** Joins: astronaut (~annada@103.160.128.31)
[10:57:25] <astronaut> hi, anyone knows the reason why pip is successful in pulling a module and yet I cannot import it?
[10:57:52] <OMGOMG_> be specific
[10:58:19] <OMGOMG_> what pip command did you run, how are you trying to import it
[10:58:22] *** Joins: khrbt (~znc@user/khrbt)
[10:58:50] *** Quits: raph_ael (~raphael@user/raph-ael/x-7806685) (Quit: WeeChat 3.1)
[10:58:58] *** Joins: raph_ael (~raphael@user/raph-ael/x-7806685)
[11:00:55] <aphysically> tusko: you can or in one regex
[11:02:07] <energizer> aphysically: i think that's a common mistake
[11:02:15] <energizer> astronaut: it's the wrong pip
[11:02:26] <aphysically> making the regex wrong?
[11:02:34] <energizer> aphysically: Any/object
[11:02:39] <aphysically> oh, yeah
[11:02:46] <tusko> aphysically, I'm trying to combine something like https://pastebin.com/hsy4aCLy
[11:02:47] <infobob> https://bpaste.net/VQRA (repasted for tusko)
[11:03:14] *** Quits: vladoski (~vladoski@2001:b07:add:d406:bac7:93ee:29e3:e0d7) (Ping timeout: 260 seconds)
[11:03:18] <aphysically> energizer: I feel like opening up a pull request changing a bunch of Anys might be noise though
[11:04:00] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Remote host closed the connection)
[11:04:29] *** Quits: astronaut (~annada@103.160.128.31) (Ping timeout: 245 seconds)
[11:04:49] <aphysically> I've found some other typing mistakes in at least this one repo though so maybe I should just do it all at once
[11:04:52] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[11:04:57] *** Joins: prs (~Priyanshu@2409:4063:6d0c:b492::7208:8108)
[11:05:20] *** Joins: beterraba (~beterraba@109.171.244.80)
[11:05:34] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (Quit: Gone)
[11:05:51] *** Joins: quasineutral2 (~quaisneut@user/quasineutral)
[11:05:52] *** Joins: roguelazer (~jbrown@sietchtabr.roguelazer.net)
[11:06:40] *** Quits: neolem[m] (~neolem@2001:470:69fc:105::c675) (Killed (NickServ (GHOST command used by neolem!~neolem@gueuti.fr)))
[11:06:46] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Ping timeout: 252 seconds)
[11:06:47] *** quasineutral2 is now known as quasineutral
[11:06:58] *** Joins: neolem[m] (~neolem@2001:470:69fc:105::c675)
[11:08:20] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:09:24] <jayvee> Hi, I'm looking for a highly recommended guide to learning how the heck to use async, in particular aiohttp. My use case is to write a fairly simple HTTP server that incorporates a library that uses aiohttp and asyncio, and figured aiohttp would be a good fit.
[11:09:24] <jayvee> I'm a reasonably experienced programmer, familiar with Go, and have 10-year-outdated Python 2.x experience, but I've skimmed all the links from obvious search results and nothing seems suitable for my ADHD attention span (or lack thereof), including the official documentation.
[11:09:24] <jayvee> I'm certain that if I keep banging my head against a wall I'll eventually understand it but this is a hobby project and due to household responsibilities I can only afford a day or two; I've spent a day so far making zero progress and I'm very frustrated. I learn best by doing, and by reading explanations that use as few words as possible.
[11:09:58] *** Joins: pycurious (~Adium@user/pycurious)
[11:10:40] <energizer> jayvee: are you set on aiohttp?
[11:10:54] <jayvee> not necessarily
[11:11:01] <energizer> and asyncio?
[11:11:19] <jayvee> The library I was using (pysma) requires that I pass in an aiohttp.ClientSession; that's the only hard requirement
[11:12:26] <jayvee> In the past I've written against http.server and implemented a BaseHTTPRequestHandler which I could understand perfectly well, however I was getting all kinds of problems trying to call functions defined as "async def"
[11:14:07] *** Joins: rememberYou (~someone@user/rememberyou)
[11:14:17] *** Quits: death916 (~death916@user/death916) (Ping timeout: 246 seconds)
[11:14:29] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[11:14:41] *** Joins: quasineutral7 (~quaisneut@user/quasineutral)
[11:15:28] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Ping timeout: 252 seconds)
[11:15:28] *** quasineutral7 is now known as quasineutral
[11:16:02] <energizer> jayvee: hmm. normally i suggest Trio (https://trio.rtfd.io/) over asyncio because i think it's better designed and easier to use properly than `asyncio`. there are various compatibility shims like https://anyio.readthedocs.io/ and https://github.com/python-trio/trio-asyncio . But i'd have to check with the trio experts (https://gitter.im/python-trio/general) on what's available for pysma and aiohttp.ClientSession compatibility.
[11:16:33] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:17:58] <jayvee> reading the Trio tutorial now, seems pretty easy reading; thanks!
[11:18:20] <energizer> jayvee: is https://github.com/kellerza/pysma the pysma you're talking about? i dont see any connection to async in there
[11:18:30] <jayvee> yeah I'm definitely at the "this all seems too hard, why hasn't everybody just given up on async by now" stage of learning
[11:18:35] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:19:04] <jayvee> energizer: yeah that's the one I'm using. perhaps I misunderstood something; I was looking at the example.py in the root directory and it has a lot of confusing async'ness to it.
[11:19:20] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[11:20:26] <energizer> oh i'd missed it in __init__.py
[11:21:12] <jayvee> Yeah it's confusing when people put stuff in __init__.py. I had assumed that file was usually blank, based on prior experience, and it's a bit confusing when it's actually populated every now and then.
[11:21:40] *** Joins: brelod (~me@90.244.150.142)
[11:21:46] <jayvee> I wonder if there's a canonical philosophy on how to use __init__.py
[11:23:04] *** Joins: cyphase (~cyphase@user/cyphase)
[11:25:04] <jayvee> The only reason I'm using Python is because the pysma library is the only one I've found that reliably talks to my SMA inverter (in the example.py, anyway). Many other Go-based examples (which I'd rather use) seem to fail to parse it or have other problems indicative of them being designed for different firmware or hardware versions
[11:26:40] <jayvee> I don't know whether examining similarities/differences between async and goroutines is helping or hindering my understanding
[11:26:47] <energizer> jayvee: https://github.com/kellerza/pysma/blob/master/pysma/__init__.py doesnt actually look *that* dependent on aiohttp. regardless, i think the trio docs are the best intro to async i've seen so it's probably as good a starting point as any
[11:27:16] <energizer> (except if you end up needing to abandon trio in order to support aiohttp, that might be annoying)
[11:29:52] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 252 seconds)
[11:30:24] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[11:30:57] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[11:31:28] *** Joins: djhankb (~djhankb@208.113.164.68)
[11:31:28] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[11:32:22] *** Joins: alzgh (~alzgh@user/alzgh)
[11:32:39] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[11:33:14] *** Joins: Proxysna (~Proxysna@62.119.254.142)
[11:33:41] *** Joins: segfault (~annada@103.160.128.31)
[11:34:10] *** segfault is now known as astronaut
[11:34:23] *** Quits: rememberYou (~someone@user/rememberyou) (Remote host closed the connection)
[11:35:51] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[11:36:00] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:37:56] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[11:38:06] *** Joins: Vonter (~Vonter@user/vonter)
[11:38:46] *** Joins: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr)
[11:38:57] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:40] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[11:40:44] <thnee1> It seems the way to implement a class based decorator is to implement __call__, so does that mean one class cannot be used as a decorator and used for normal object instatiation at the same time?
[11:42:06] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[11:42:27] <thnee1> I would like to make a class called Lock which can be used like lock = Lock(); lock.acquire(); but also used as a contextmanager and as a decorator for functions, all from one class, is that possible?
[11:42:49] *** Quits: xiongxin (~quassel@119.123.103.95) (Ping timeout: 245 seconds)
[11:42:52] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.37)
[11:43:21] <thnee1> Or would it be appropriate to somehow detect in the __call__ if it is being used as a decorator? Not sure if that is possible..
[11:45:18] *** Joins: shangxiao (~davids@124.187.230.212)
[11:45:36] <energizer> thnee1: lock.acquire and context manager are fine. what do you want it to decorate?
[11:45:54] <thnee1> I want to decorate functions
[11:46:02] <energizer> what will it do?
[11:46:13] <energizer> when you decorate a function with it
[11:46:28] <thnee1> Acquire and release the lock
[11:46:41] <energizer> you have a single process-global lock?
[11:47:15] <thnee1> How the lock is stored is a different issue, I am just asking how to do a decorator while maintaining the ability to also use it as a normal object
[11:48:07] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[11:48:20] <gitesh> Manipulate means what?
[11:48:25] *** Joins: shad (~shad@user/shad)
[11:48:31] <gitesh> Is it broad term?
[11:48:41] <energizer> gitesh: yes
[11:50:07] <gitesh> energizer: can you tell me meaning
[11:50:08] <energizer> thnee1: you could probably do that. maybe it's overly cute
[11:50:22] *** Joins: jcbsv (~jcbsv@185.247.236.137)
[11:50:41] <energizer> gitesh: "manipulate" doesn't have a special meaning in programming afaik. just what it says in a dictionary
[11:51:10] *** Quits: jcbsv (~jcbsv@185.247.236.137) (Client Quit)
[11:51:13] <gitesh> Skillfull manner
[11:51:21] <energizer> thnee1: oh i see you're confused
[11:51:22] <gitesh> It is what in dictionary
[11:52:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[11:52:20] <energizer> thnee1: in `lock = Lock(); lock()`,  `Lock.__call__` gets invoked at `lock()`, not at `Lock()`
[11:52:46] <energizer> gitesh: https://www.merriam-webster.com/dictionary/manipulate
[11:53:13] <energizer> gitesh: ##English is a better channel for this
[11:53:38] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[11:53:52] <gitesh> Thanks
[11:54:14] *** Quits: gitly (~gitly@85.255.232.78) (Ping timeout: 250 seconds)
[11:54:29] *** Joins: fikran (~fikran@user/fikran)
[11:55:21] *** Joins: death916 (~death@user/death916)
[11:55:33] *** Quits: oldguy2 (~oldguy@user/oldguy) (Quit: WeeChat 2.3)
[11:55:38] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[11:55:44] <thnee1> energizer: Oh right, thanks!
[11:55:44] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[11:55:44] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 245 seconds)
[11:55:58] <energizer> np np
[11:56:25] *** Joins: gitly (~gitly@148.252.128.127)
[11:58:03] *** Joins: pycurious (~Adium@user/pycurious)
[11:59:43] *** Quits: Samian (~Sami@user/samian) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:00:01] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[12:00:14] *** Quits: prs (~Priyanshu@2409:4063:6d0c:b492::7208:8108) (Remote host closed the connection)
[12:01:57] *** Joins: Tireos (~Tireos@91.223.118.131)
[12:02:37] *** Joins: Meteorhead (~Meteorhea@165.225.205.11)
[12:02:43] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[12:03:02] *** Joins: Warped (~Warped@user/warped)
[12:03:16] *** Quits: Tireos (~Tireos@91.223.118.131) (Client Quit)
[12:03:36] *** Joins: Tireos (~Tireos@91.223.118.131)
[12:03:55] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[12:04:58] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.37) (Ping timeout: 252 seconds)
[12:05:17] *** Joins: pycurious (~Adium@user/pycurious)
[12:05:19] *** Quits: astronaut (~annada@103.160.128.31) (Ping timeout: 245 seconds)
[12:05:32] *** Joins: jmft2 (~jmft2@213.31.248.255)
[12:07:06] *** Joins: plastico (~plastico@neomutt/plastico)
[12:08:13] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[12:08:19] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:08:56] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:09:29] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[12:10:00] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Read error: Connection reset by peer)
[12:12:37] *** Quits: demirok (~bell@user/demirok) (Ping timeout: 252 seconds)
[12:13:42] <aphysically> today's the day, 3.10 \o/
[12:14:37] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[12:14:47] <Tireos> 3.10 release ?
[12:14:48] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:16:28] <jinsun_> yes, https://www.youtube.com/watch?v=AHT2l3hcIJg
[12:18:06] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[12:19:46] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[12:21:07] *** Joins: xiongxin (~quassel@113.116.33.66)
[12:22:37] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Read error: Connection reset by peer)
[12:22:44] *** Joins: borb (~borb@gateway/tor-sasl/borb)
[12:23:09] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[12:23:29] <borb> anyone have a clue if i can torify pipx? a simple test would be to run some python app with it which can curl a web address. so like `torify pipx curl ifconfig.me`
[12:23:44] <borb> anyone know of a python module that can act like this
[12:24:59] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[12:25:04] *** Joins: pluri (~pluri@user/pluri)
[12:25:13] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:25:27] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[12:25:48] <pluri> does anyone have experience running a flask app behind gunicorn and supervisor? I've followed miguel's tutorial and I've got it working, however I'm not getting the stdout of the flask app logged by supervisor. I'm not sure what to change to make that possible
[12:27:38] <jayvee> Yeah I'm afraid I didn't really understand Trio. It still seems to assume a lot, although precisely what, I'm unsure of.
[12:27:50] <mgedmin> no experience with that particular stack, but one thing you may want to try is setting PYTHONUNBUFFERED=1 in the environment
[12:28:29] <jayvee> I think that I need to give up on async, and just implement this synchronously because performance does not matter in this hobby project. I just want to be able to call an async function, but pretend it is not async. But it seems to be like a virus that infects the rest of my program.
[12:29:07] <jayvee> I feel like I'm missing something obvious that everybody else is grasping
[12:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[12:30:35] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[12:31:01] <energizer> jayvee: "it seems to be like a virus that infects the rest of my program." that is correct
[12:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[12:31:26] <energizer> jayvee: that's the big downside of async-await
[12:31:38] <foobaz212> anyone know why `select count(1) from table` and select count(10000) from table` give the same result?
[12:31:41] *** Joins: thiras (~thiras@user/thiras)
[12:32:02] <Yhg1s> foobaz212: you mean '1'? because that's what count() does when you give it one value?
[12:32:13] <energizer> jayvee: https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/
[12:32:21] <pluri> mgedmin nope no effect, but thanks for the suggestion
[12:32:34] <energizer> jayvee: that's a critique of async-await as a programming model
[12:32:56] <foobaz212> ah ok...I don't get why it's needed supply the count() function with an argument
[12:33:35] <energizer> foobaz212: maybe someone in an sql channel can answer that :)
[12:33:55] <rendar> if i have this `def waitTasks(self, *tids:list[int])` is ok to pass a tuple[int] ?
[12:34:11] <energizer> rendar: no
[12:34:39] <rendar> then i should have `def waitTasks(self, *tids:t.Union[tuple[int], list[int]])` ?
[12:34:48] <energizer> rendar: Sequence[int]
[12:34:53] <rendar> ok
[12:35:04] <rendar> that includes also set[int], i guess
[12:35:35] <rendar> right?
[12:35:40] <energizer> no
[12:35:45] <rendar> wtf? why?
[12:35:48] *** Joins: pycurious (~Adium@user/pycurious)
[12:35:52] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[12:36:00] <energizer> cant do set[3]
[12:36:03] <mgedmin> a sequence is ordered, a set is not
[12:36:21] <rendar> mgedmin, i don't mind about ordering
[12:36:33] <energizer> rendar: Iterable[int]
[12:36:34] <rendar> mgedmin, and a list[int] can be also unoreded
[12:36:39] <rendar> energizer, ok thanks
[12:37:17] <jayvee> energizer: oh man. that article resonates with what I'm experiencing SO MUCH
[12:37:19] *** Joins: drogas (~drogas@jump2.jet.uk)
[12:37:46] <Yhg1s> foobaz212: you give it the rows to count. It's an aggregating function.
[12:37:50] *** Quits: emf (~emf@2620:10d:c090:400::5:6163) (Quit: emf)
[12:37:54] <energizer> jayvee: yeah you're not alone
[12:38:35] <jayvee> I like how at the end they mention go's way of doing it. Because I understand goroutines perfectly well; grasped the concept in about 60 seconds. But I'm still thoroughly confused with async.
[12:38:49] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[12:39:19] <jayvee> I just want to use this library synchronously and not worry about async stuff :-(
[12:39:37] *** Quits: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053) (Ping timeout: 252 seconds)
[12:40:04] <energizer> i think there are things for that but i dont know much about them
[12:40:07] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[12:42:05] <energizer> jayvee: anyway the trio way is: make a nursery. for each job you want done concurrently, nursery.start_soon(func)
[12:42:17] <jayvee> I don't actually want to do concurrency
[12:42:32] <jayvee> I just want to resolve the syntax errors that occur when I try to call a function that somebody declared as async
[12:42:45] <jayvee> aiohttp is also really bizarre. Like, the StreamResponse is almost completely undocumented. I mean, sure, there's https://docs.aiohttp.org/en/stable/web_reference.html#aiohttp.web.StreamResponse. But there are no examples. And I've been trying for over an hour to figure it out; I feel so dumb.
[12:42:49] <mgedmin> rendar: if you don't care about the particular data type, Collection[int] or Iterable[int] might be suitable
[12:43:05] <rendar> thanks
[12:43:12] <jinsun> rendar: lists cannot be unordered, you might have thought sorted which is a different  thing
[12:43:16] <rendar> when i should use collection instead of iterable?
[12:43:32] <hexnewbie> The way to integrate Twisted with asyncio is only through the use of the asyncioreactor, there's no opposite way that uses a Twisted reactor to provide an asyncio loop? Reason I'm asking, I have a twisted app, no asyncio functionality, but I wanted (for debugging process creation issues) to try and rewrite a function of mine that wraps reactor.spawnProcess() to use asyncio.subprocess
[12:43:33] <mgedmin> iterable is read-once
[12:43:38] *** Joins: gusto (~Augustus@109.255.100.54)
[12:43:41] <rendar> jinsun, l=[3,1,2,9,4]
[12:44:06] <jinsun> rendar: so that is still ordered, just not sorted
[12:44:17] <hexnewbie> Just to compare behaviour (and only because I've grown distateful of spawnProcess, even have one attempted rewrite here), but without changing anything major to the code, or even the reactor itself
[12:44:21] <Yhg1s> hexnewbie: asyncioreactor *is* a Twisted reactor.
[12:44:24] <rendar> jinsun, ok, because we have l[0], l[1] and so on
[12:44:27] <rendar> which makes the order
[12:44:36] <mgedmin> in practical terms, a sequence x is something where you can get each item using integer indexes x[0], x[1], ...
[12:44:40] <mgedmin> this doesn't work for sets
[12:44:51] <energizer> jayvee: someone here should be able to help with that but it's not me
[12:45:07] <rendar> mgedmin, exactly
[12:45:21] <rendar> now i'm undecided between collection and iterable
[12:45:22] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-b04805-44.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:45:25] * mgedmin had to dig out https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes to remember all the subtleties of wtf is a container vs collection vs sequence
[12:45:35] <hexnewbie> Yhg1s: Well, yeah, that was not intended to be my question. I was asking if the only way is to use a reactor that uses the asyncio loop, and there is *no* asyncio loop that uses the installed Twisted reactor instead (i.e. the integration going the opposite way)?
[12:45:40] <jayvee> energizer: fair enough
[12:45:52] <mgedmin> rendar: I tend to default to iterable
[12:45:58] <jinsun> rendar: yes, so there is a defined order of items that is specified by the language that you can rely on, 3 will always come before 1 in [3,1]
[12:45:59] *** Joins: szymon (~ugh@staticline-31-183-189-254.toya.net.pl)
[12:46:09] <hexnewbie> That's impossible to search for, as well, all results lead to the asyncioreactor 😉
[12:46:10] <rendar> yes
[12:46:12] <mgedmin> if I need to loop through it more than once, I usually make a copy with list(param) inside the function itself
[12:46:45] <mgedmin> but basically it all depends on how you use the thing
[12:47:45] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:48:21] <jinsun> rendar: the table here should help you decide https://docs.python.org/3/library/collections.abc.html
[12:48:46] <Yhg1s> hexnewbie: I'm not sure that distinction really makes sense.
[12:48:53] <rendar> jinsun, thanks
[12:48:54] <Yhg1s> hexnewbie: but let's say "no" then.
[12:49:23] <Yhg1s> hexnewbie: but you may want to consider talking about your actual problem over in #twisted.
[12:49:28] *** Joins: odinsbane (~mbs@pat-pool-138.crick.ac.uk)
[12:49:42] <energizer> jayvee: the easiest thing to do is just post your attempt at using asyncio and show the error message
[12:49:51] <hexnewbie> Yhg1s: I see. Thanks. 😉
[12:50:43] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[12:50:56] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[12:52:50] *** Joins: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053)
[12:54:46] *** Quits: m4r35n357 (~m4r35n357@host-92-20-120-36.as13285.net) (Ping timeout: 260 seconds)
[12:55:10] *** Joins: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net)
[12:56:28] *** niluje1 is now known as niluje
[12:57:28] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[12:57:54] <rakoon> Do I abuse the functools.cache for returning the same object from a function to avoid using a global variable?
[12:58:04] *** Quits: dalan6236 (~dalan@110-175-157-10.tpgi.com.au) (Quit: dalan6236)
[12:58:32] <jayvee> energizer: at this stage my biggest hurdle is at the conceptual level, not individual syntax errors. I'm struggling with reasoning about program flow, how I should structure the program, what the async keyword is actually doing at various points in time
[12:58:44] *** Joins: dalan6236 (~dalan@110-175-157-10.tpgi.com.au)
[12:59:11] <jayvee> I'm not writing random lines of code and getting stuck there; I'm trying to reason about how the program will work. I could choose to write it any given way at this point in time, so syntax errors aren't really relevant at the moment
[12:59:28] <energizer> jayvee: ok. what is the program going to do?
[13:00:05] <hexnewbie> Oh, I also see that the implementation of subprocesses spawning is *in* the asyncio loop (duh, should be unsurprising after having using Twisted), so if I wanted to switch the implementation for some odd reason, doing what I asked would not be of any help.
[13:00:27] *** Joins: arinov (~arinov@213.194.126.155)
[13:00:37] <jayvee> It's going to be a HTTP server, serve a URL, requests to that URL will in turn make outbound requests (via the pysma library), it'll possibly do some transformations on that data, but unmodified for now is fine, and return that to the user
[13:00:59] <jayvee> so essentially what I'd consider to be the "hello world" of a http server, if not for that async keyword
[13:01:13] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:01:16] <jayvee> which is why I feel so dumb. I'm getting stuck on a hello world.
[13:02:27] <Yhg1s> jayvee: conceptually, asynchronous code is event-driven. You tell asyncio what you want to respond to and how (via callbacks and coroutines), and then you run the event loop. The event loop responds to events by calling the callbacks and resuming the coroutines.
[13:02:48] <energizer> (for context, jayvee is a Go programmer)
[13:03:20] <Yhg1s> jayvee: a coroutine is a function that will eventually return a result (after a specific event happened, for example). You need to wait for the result to come in. You do that with 'await'. 'await' suspends your function (which has to also be a coroutine) until the result is ready.
[13:04:06] <Yhg1s> jayvee: in order to get the result of asynchronous code from synchronous code, you need to run the event loop and wait for it to finish.
[13:04:10] <Yhg1s> (which may not always be possible.)
[13:04:15] <jayvee> I imagine that async functions work similarly to the way yield works in generators, although I find generators similarly confusing
[13:04:37] <Yhg1s> they do work somewhat similarly, yes. (Coroutines were originally implemented in terms of generators.)
[13:05:09] <jayvee> In some of my brief REPL tests, with running some async functions, what's interesting is they still execute serially. So I'm wondering if async is just syntactic sugar and nothing is actually threading.
[13:05:33] <energizer> the philosphy of trio is treat `await any_async_function()` as a single piece of syntax
[13:05:45] <Yhg1s> They do not execute serially. They are not POSIX threads, but they are co-operative threads.
[13:06:00] <Yhg1s> They have explicit suspension points (the 'await' calls, as well as 'async for' and 'async with' and such)
[13:06:03] <energizer> ie dont call async functions without awaiting them immediately
[13:06:24] <energizer> https://trio.readthedocs.io/en/stable/tutorial.html#an-echo-server
[13:06:45] <jayvee> If you always need to use await to call an async function, doesn't that defeat the purpose of using an async function? Since you are explicitly waiting and blocking there.
[13:07:22] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[13:07:32] <jayvee> I understand that async is supposed to provide concurrency but with everything appearing to use await, I'm not seeing where concurrency can actually occur in any of the example code I've seen or written
[13:07:35] *** Joins: cloud (~cloud@user/ansible)
[13:07:36] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[13:07:54] <Yhg1s> jayvee: what happens concurrently is the _waiting_.
[13:08:01] <energizer> when you await, control goes out to the scheduler and it can hop back into the function when it's ready
[13:08:04] <Yhg1s> jayvee: no actual _execution_ happens concurrently.
[13:08:36] <deniska> jayvee: and when you need to execute multiple things at once, instead of awaiting each you pass them to something like asyncio.gather
[13:08:38] <Yhg1s> (actual concurrent execution has a whole set of different problems, unless you provide complete isolation like Go tries to do. Python can't provide that isolation, so Go's model will never work in Python.)
[13:08:49] *** Joins: pycurious (~Adium@user/pycurious)
[13:08:57] <energizer> does asyncio still not have nurseries?
[13:09:36] <Yhg1s> it probably will never have them, to be honest.
[13:09:58] *** Joins: alphasierra (~alphasier@2405:201:e:4d:d982:f9d4:5bdf:6d4c)
[13:11:49] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:12:53] <energizer> Yhg1s: well thanks for the candor
[13:13:10] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[13:13:41] <MacGyver> There's multiple third party libs providing them though.
[13:13:43] *** Joins: j0k2r (~j0k2r@37.157.230.74)
[13:14:54] *** Quits: pradhvan (~pradhvan@dgplug/pradhvan) (Ping timeout: 245 seconds)
[13:15:05] <Yhg1s> energizer: standard library modules can't really evolve, certainly not in a direction that's such a big philosophical departure from the original design.
[13:15:10] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[13:15:38] <deniska> to properly implement nurseries, all coroutines should be required to belong to one, and for asyncio the ship has sailed pretty much before the keywords `async` and `await` were even introduced :)
[13:15:53] <jayvee> I think I'm still missing the bit where you utilise an async function without immediately awaiting it, which would otherwise defeat the purpose of using async in the first place.
[13:15:54] <jayvee> I imagine the value of async is doing something like (forgive my bash) "do_task & do_other_task & do_another_task & wait; echo done". But by using await everywhere, it will just be serially executed.
[13:16:13] <energizer> Yhg1s: the asyncio team was working on it last time i was sorta following this maybe 18 months ago, but i know what you mean
[13:16:13] <Yhg1s> jayvee: I'm not sure why you think it would defeat the purpose?
[13:16:18] <deniska> jayvee: yeah, that's what asyncio.gather, asyncio.as_completed and similar are for
[13:16:34] <deniska> jayvee: or even just asyncio.create_task
[13:17:05] <Yhg1s> jayvee: if you do 'await one(); await two()', they are executed in order, yes. If you don't want that, don't await on them right away.
[13:17:21] <energizer> no no no
[13:17:35] <energizer> if you don't want that, don't call them yourself
[13:17:37] <energizer> https://anyio.readthedocs.io/en/stable/tasks.html#creating-and-managing-tasks
[13:18:05] <jayvee> I saw that I could do "x = an_async_func()" and later on do "await x". However, I noticed that execution of the function didn't start until I actually awaited it, which again seemed to defeat the purpose.
[13:18:42] <Yhg1s> jayvee: there are also other ways to schedule execution.
[13:19:55] <jayvee> I did try to use asyncio.gather() in some testing, and I noticed that it always executed serially, deterministically, which surprised me. I'm guessing that's because it doesn't use any threading
[13:20:29] <jayvee> So it sounds like "await" is a bit like yield in that it might return control to another thing
[13:20:33] <energizer> that's right
[13:20:37] <Yhg1s> jayvee: if you use asyncio.gather correctly, it wouldn't be deterministic, no. But without seeing the actual code, it's hard to say.
[13:20:50] <Yhg1s> jayvee: well, 'await' returns control to the event loop.
[13:21:06] <Yhg1s> which in turn can execute anything it thinks should be executed.
[13:22:02] <hexnewbie> jayvee: As deniska suggested, you can already do “x, y, z = await asyncio.gather(f(), g(), h())”, however the main reasons I've used async functions with await (or their predecessors) is to simplify the things that do need to run *sequentially* in respect to each other, while they are themselves running alongside other things.
[13:22:26] *** Quits: brookesy66 (~will@202.168.59.59) (Quit: WeeChat 3.3)
[13:23:46] <hexnewbie> jayvee: Say, I need to ‘await’ the result of a HTTPS request, then parse it, then ‘await’ it being sent it to a server. That needs to be sequential, but ‘await’ allows other (including other requests using the same function) to be executed simultaneously with this one.
[13:24:27] <energizer> jayvee: if you use the taskgroup/nursery style (as opposed to asyncio.gather), the concurrent stuff happens in the whitespace before control exists the `async with`
[13:25:10] <energizer> anyio.create_task_group is compatible with asyncio
[13:25:44] <jayvee> Speaking of "async with", I had trouble finding documentation on that syntax. Perhaps that's because "async" and "with" are documented separately, however I could not form a mental concept of what "async with" actually does.
[13:26:28] <Yhg1s> jayvee: it's like 'with', except the context manager uses coroutines, so it can be suspended.
[13:26:49] <Yhg1s> jayvee: https://www.python.org/dev/peps/pep-0492/#asynchronous-context-managers-and-async-with
[13:27:27] <energizer> the reason it's specially useful is that it can hold program control inside itself until its tasks are done
[13:28:24] <energizer> note btw that these tasks don't return a value
[13:29:06] <energizer> (there's nowhere for the value to go)
[13:30:18] *** Joins: RougeR (~rougex250@user/rouger)
[13:30:35] *** Joins: Samian (~Sami@user/samian)
[13:31:49] *** Quits: gggp (~textual@60.10.23.162) (Ping timeout: 252 seconds)
[13:31:52] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 252 seconds)
[13:32:37] *** Quits: cursey (~cursey@136-26-145-118.cab.webpass.net) (Quit: ZNC 1.8.2 - https://znc.in)
[13:33:17] *** Joins: gggp (~textual@60.10.194.45)
[13:34:20] *** Joins: zamba (~marius@5.226.162.54)
[13:35:04] *** Joins: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it)
[13:36:37] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[13:37:11] <zitter> Hi, I have to connect my Python script @ Linux to a remote MSSQL DB. I'm following this guide: https://adamtheautomator.com/connect-to-sql-server-from-linux but I have this error:"pyodbc.Error: ('01000', "[01000] [unixODBC][Driver Manager]Can't open lib 'FreeTDS' : file not found (0) (SQLDriverConnect)")"
[13:37:18] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[13:37:55] *** Quits: gggp (~textual@60.10.194.45) (Ping timeout: 252 seconds)
[13:38:02] <zitter> I think I have to do something with unixodbc, right? Is it the right way? unixodb package is installed btw, but I cannot see any /etc/unixodbc file
[13:38:25] *** Joins: p-i- (~root@155.138.135.122)
[13:38:38] *** Joins: gggp (~textual@60.10.23.162)
[13:39:31] <energizer> (i should say s/hold program control inside itself/prevent control from proceeding below it/ -- stuff can still happen in other tasks)
[13:39:46] <p-i-> When making a fetch with `requests` it is possible to specify the box-IP over which to execute the fetch? (My box has 3 IPs). This is not an easy doc-find.
[13:40:04] *** Quits: jmft2 (~jmft2@213.31.248.255) (Quit: This computer has gone to sleep)
[13:42:03] <energizer> p-i-: have you seen https://stackoverflow.com/a/61581069/15396299
[13:42:16] *** Joins: pycurious (~Adium@user/pycurious)
[13:42:29] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:5816:471c:dab0:e3c6)
[13:44:58] <jayvee> Is this async stuff implemented purely in Python itself (i.e. all the necessary code within the "asyncio" module), or did it require CPython modifications to make it work?
[13:45:05] <p-i-> Thanks energizer, `source_address=(addr, 0)` may be what I'm hunting for
[13:45:16] *** Joins: meain1 (~meain@2001:470:69fc:105::2db)
[13:45:55] <energizer> jayvee: async/await were originally added to cpython to support asyncio
[13:46:40] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[13:46:43] <hexnewbie> jayvee: It is syntax sugar for something that *can* be pure Python, but the syntax itself requires modifications (same PEP that you were linked to)
[13:46:45] <energizer> jayvee: a similar thing was possible back in the day with Twisted, but without the syntax
[13:48:20] <energizer> jayvee: if you're curious, the philosophy of trio (as opposed to asyncio, twisted, go, ...) https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/
[13:48:25] <pr100> @jayvee: to use the event loop and asyncio you don't need to worry about cpython stuff, just import the asyncio module and use it as it's documented. Don't worry about how it's implemented under the hood
[13:48:25] <fluter> hi, https://docs.python.org/3.8/library/shutil.html#shutil.copy2 what is the star * for?
[13:48:34] *** Joins: Kaya (~KC@static.89.202.216.95.clients.your-server.de)
[13:48:38] <fluter> does it mean there are other arguments undocumented?
[13:49:07] <energizer> fluter: it means follow_symlinks= must be passed by name, not just as the third argument
[13:49:25] <energizer> er
[13:49:28] <energizer> other way around innit
[13:49:34] <jayvee> pr100: I find for me to understand something, I generally have to understand how it works under the hood, because I usually find the abstractions don't make much sense
[13:49:37] <jayvee> as in this case
[13:49:47] <fluter> energizer: okk
[13:49:49] <fluter> i see
[13:49:51] <energizer> fluter: it means src and dest are positional not  by name
[13:49:58] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[13:50:04] <jayvee> for example, I did not understand git at all, until I understood its underlying filesystem structure, and all of a sudden I can actually use git
[13:50:18] <fluter> energizer: so the star separate positional and named arguments?
[13:50:19] <mgedmin> fluter: * separates regular arguments from keyword-only arguments
[13:50:27] <fluter> mgedmin: ah ok
[13:50:29] <fluter> thanks guys
[13:50:43] <mgedmin> regular arguments can be passed either positionally or using arg=value syntax; keyword-only arguments must use arg=value
[13:51:00] <energizer> jayvee: i think anybody who's learned async/await has gone through the same thing
[13:51:02] <fluter> so i need to chopy symlinks, but it failes when dst already exists
[13:51:06] <fluter> anyone idea?
[13:51:12] <fluter> but for normal files, there is not an error
[13:51:28] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:51:30] <pr100> jayvee: well - up to you, but I don't think you need to understand know which bits are pure python and which bits are cpython in order to get the concepts around the event loop and concurency
[13:51:32] <fluter> how can i copy symlinks and overwrite if dst exist
[13:52:39] *** Cyp_ is now known as Cyp
[13:54:44] <pr100> at a suitable level of abstraction it's essentially the same as promises in javascript and goroutines in golang. Obviously there are differences in the detail of how concurrent things are scheduled, and differing syntax... but they're all basically the same idea
[13:56:37] <energizer> pr100: you too might be interested in https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/
[13:56:42] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:3cd6:5eb7:c776:e1a5)
[13:57:23] <jayvee> the main difference seems to be, with a goroutine I don't need to specify the "go" keyword for everything the goroutine does, only when launching the goroutine itself; which works well with my mental model
[13:57:51] <jayvee> I've never used promised in javascript, but I have used callbacks and they make reasonable sense
[13:57:56] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[13:58:10] <jayvee> I think promises are just syntactic sugar around callbacks, anyway
[13:59:23] <graingert[m]> jayvee: https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/
[13:59:56] <energizer> hah :)
[14:00:25] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[14:00:36] <jayvee> "Then they realize that it prevents them from using patterns they've gotten used to in other frameworks, and they get really annoyed."
[14:00:39] <jayvee> it me  ;-)
[14:01:13] <jayvee> Yeah I feel like my brain isn't "clicking" with this new pathway because a rut has already been carved by prior experiences
[14:01:14] *** Joins: spuz (~spuz@213.129.88.97)
[14:01:25] <jayvee> maybe if I were a complete newbie programmer I might actually have an easier time
[14:01:57] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Ping timeout: 276 seconds)
[14:02:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[14:02:09] <jayvee> that post rings a bell; might have been linked from Hacker News at some point
[14:02:39] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[14:03:02] *** Joins: legola (~legola@188.120.97.2)
[14:03:18] *** Joins: VaniaPy (~VaniaPy@adsl-52.176.58.193.tellas.gr)
[14:03:49] *** Joins: fikran (~fikran@user/fikran)
[14:03:52] *** Joins: dambuster (~dambuster@185.193.170.225)
[14:05:09] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[14:05:22] <energizer> https://anyio.readthedocs.io/en/stable/tasks.html# is a reasonable starting point
[14:05:24] *** Joins: upsala (~zcb@185.213.155.160)
[14:05:36] * energizer out
[14:06:02] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[14:06:15] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[14:09:07] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[14:09:53] <VaniaPy> hello, i have  a json and i'm iterating over it's key,values (json.items()), how can i get the values of the keys ?
[14:09:59] <pr100> In each case there's an event loop (possible more than one - but let's ignore that) managing number of objects representing a concurrent computation (let's call them tasks) that the event loop will allow to run at certain times, and suspend at others. Then the a task can say things like  "hey event loop - start this new task" or "hey event loop -
[14:09:59] <pr100> suspend me until the result of that task is available".
[14:10:43] <VaniaPy> that's the format of the json https://bpa.st/MGVQ
[14:12:24] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[14:13:45] *** Joins: stevea (~stevea@user/stevea)
[14:15:35] *** Joins: Tuju (~tuju@214-204-50-195.sta.estpak.ee)
[14:15:57] <Tuju> do you consider bytes() stuff as a 'string' in python3 ?
[14:16:07] <Tuju> or is it just bytes?
[14:16:55] <Tuju> https://www.psycopg.org/docs/cursor.html#cursor.mogrify "The returned string is always a bytes string."
[14:17:22] <Tuju> it wouldn't itch me if it had said 'sequence of bytes'
[14:17:58] <mgedmin> a "bytes string" is bytes in python3 and str in python2; a unicode string is str in python3 and unicode in python2
[14:18:23] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[14:18:24] <Tuju> so i understood as well.
[14:18:34] <mgedmin> maybe it makes less sense when you discard python 2 and think only about the bytes type in python 3
[14:19:46] *** Quits: reset (~reset@user/reset) (Quit: reset)
[14:20:11] *** Joins: cursey (~cursey@136-26-145-118.cab.webpass.net)
[14:20:50] <Tuju> somehow in python3 the old py2 str 'ascii' is declared as bytes, special case. which is understandable. But it's wired that so many stuff that used to take text as input now either requires bytes or output bytes event they used to have 'text API'
[14:21:12] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[14:21:37] <Tuju> like that psycopg, SQL is text. but not for psycopg2, it's sequence of bytes.
[14:22:11] <Tuju> i think someone there failed to follow the spirit. Or I misunderstood something.
[14:22:15] <mgedmin> at some point, when talking to the actual PostgreSQL server over a network socket, it _needs_ to be a sequence of bytes
[14:22:36] <Tuju> sure, but for programmer it could have been just 'text'
[14:22:41] <mgedmin> but otherwise I think it's all due to backwards compatibility
[14:22:52] <hexnewbie> jayvee: If you think it will help want to know the underlying implementation, await is simply a directive to interrupt the execution of the function, allowing the control flow to proceed elsewhere. And then e.g. asyncio (or whoever is scheduling the execution) to resume your function as if it were a callback to the result being awaited.
[14:23:02] <Tuju> it doesn't make sense that it takes input as 'text' but doesn't output 'text'
[14:23:04] <mgedmin> or perhaps subtleties with character encodings
[14:23:29] <Tuju> mgedmin: it would have made sense to make it configurable
[14:23:44] <Tuju> as there are a lot of similar settings already before py3
[14:24:22] <hexnewbie> jayvee: Unfortunately, I don't think it's much helpful, since I've found visualising either await trees (or the similar ones using Twisted's defer.inlineCallback  and ‘yield’) pretty much impossible.
[14:25:37] <Tuju> mgedmin: in py2 we mainly used bytes in socket context, as network was thought to be no man's land, as other end could have been different operating system. in py3 that no man's land spread into python code area as well which sucks imo.
[14:25:53] <hexnewbie> (asyncio is slightly easier to wrap your head around)
[14:26:31] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[14:26:49] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 252 seconds)
[14:27:09] <Tuju> and the real question is, is this current situation going to remain as is, or will those apis keep changing so we can eventually get rid of this conversion crap in every section of python code.
[14:28:54] <mgedmin> is .mogrify() a postgresql thing, or a Python DB API thing?
[14:29:02] <mgedmin> s/postgresql/psycopg/
[14:29:11] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:29:51] <Tuju> i think it's an independent project apart from python
[14:29:52] <hexnewbie> mgedmin: I have not seen it in other DB-API implementation (I do use it for logging quite often). Instead of using the spec, I usually look at sqlite3 as if it were a reference implementation since it is stdlib: https://docs.python.org/3/library/sqlite3.html
[14:30:15] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[14:30:28] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[14:30:30] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[14:30:31] <Tuju> mgedmin: it's psycopg2 module that has .mogrify()
[14:30:37] <hexnewbie> But it does link the PEP, and PEP 249 does not define a mogrify method
[14:30:38] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[14:31:08] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:31:09] *** Quits: shad (~shad@user/shad) (Ping timeout: 245 seconds)
[14:31:33] <Tuju> ha, looks like they're working on version 3 https://www.psycopg.org/psycopg3/
[14:33:15] *** Joins: y1n-v1 (~y1n@178.165.194.214.wireless.dyn.drei.com)
[14:34:11] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[14:34:29] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 246 seconds)
[14:34:53] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Quit: No Ping reply in 180 seconds.)
[14:35:00] <hexnewbie> I think mogrify() by definition cannot be part of the API, since its presence implies the queries don't use real parameters, and are instead ‘mogrified’ before sending. Any implementation that used server-side support for parameters would be unable to give you a string *guaranteed* to be identical to the respective parametrized query.
[14:35:38] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[14:35:43] <Tuju> did they ditch the whole .mogrify() from psycopg3? i can't find a word of it from documentation.
[14:36:18] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[14:36:22] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[14:36:58] <Tuju> https://www.psycopg.org/psycopg3/docs/api/cursors.html#psycopg.Cursor._query   looks something functional equivalent
[14:37:19] *** Quits: chenqisu12 (~xirndc@183.217.201.186) (Ping timeout: 252 seconds)
[14:37:51] <Tuju> looks like the bytes is in version 3 here and there as in version 2
[14:37:52] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:afc:8374:b9c6:51fc) (Ping timeout: 252 seconds)
[14:38:04] *** Joins: adinf (~ariel@2001:19f0:5:5337:5400:3ff:fe6c:38e9)
[14:38:47] <Tuju> https://www.psycopg.org/psycopg3/docs/api/cursors.html#psycopg.Cursor.execute     execute() can eat both str and bytes.
[14:39:21] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[14:41:30] *** Quits: d3sync (~d3sync@62.1.158.148) (Read error: Connection reset by peer)
[14:41:46] *** Quits: dld (~davidlowr@2601:197:600:1210:b589:86d2:35c3:a95e) (Ping timeout: 245 seconds)
[14:41:58] *** Joins: d3sync (~d3sync@62.1.158.148)
[14:43:05] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[14:43:07] <alzgh> hello, is the list comprehension lazily evaluated `for i, j in [(i, j) for i in range(I) for j in range(J)]`?
[14:43:39] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Ping timeout: 245 seconds)
[14:43:43] <shangxiao> alzgh: I would guess not?
[14:43:59] <shangxiao> alzgh: why do you ask?
[14:44:37] <alzgh> it makes quite a difference when dealing with big numbers
[14:44:47] <bjs> alzgh: a list comprehension produces the entire list the moment it is evaluated
[14:44:59] <alzgh> would wrapping it in parens `()` instead make it a generator?
[14:45:04] <bjs> alzgh: yes
[14:45:10] <alzgh> then it's lazy, right?
[14:45:18] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[14:45:36] <bjs> alzgh: well,  yes.  Note that a generator isn't simply a "lazy list",  they are different structures
[14:45:49] <bjs> but a generator is often used where laziness is wanted
[14:45:50] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (Ping timeout: 250 seconds)
[14:46:52] *** Joins: iflema (~ian@user/iflema)
[14:47:35] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:3cd6:5eb7:c776:e1a5) (Quit: Client closed)
[14:48:16] *** Quits: gggp (~textual@60.10.23.162) (Ping timeout: 252 seconds)
[14:48:47] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:49:31] <alzgh> bjs: my understanding is that a generator is a function that keeps track of a state (its current position) and has the means (function) to produce its next value (successor) based on that state. Its result, if fully realized and kept in memory would equal its list comprehension sibling (if such a sibling is possible because in at least some languages generators can be infinite).
[14:49:56] <bjs> alzgh: yes, and that means it's just not like a list.  e.g. with a list you can go x[0] and then x[10] and then ask for x[0] again etc
[14:50:10] *** Joins: gggp (~textual@111.63.14.119)
[14:50:15] <bjs> so they're not just a "drop-in replacement" for a list, you do have to be careful that your code will do the right thing with the generator instead of the list
[14:50:17] <MacGyver> alzgh: List comprehensions can also be infinite.
[14:50:28] <bjs> MacGyver: well then the list comprehension will never finish evaluating?
[14:50:56] <alzgh> yeah, an infinite list comprehension is a bug by definition
[14:51:10] <alzgh> at least, that's what I understand from them
[14:51:13] <jinsun> generator comprehension can be infinite, list comprehension will give out of memory error probably
[14:51:14] <MacGyver> Why would it be? Lazily evaluating a list comprehension is perfectly feasible.
[14:51:24] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[14:51:31] <MacGyver> It's not what Python does, but you did say "in some languages..."
[14:51:49] <alzgh> now, are list comprehensions lazy or are they upfront?
[14:51:59] <jinsun> in python they are upfront
[14:52:03] <bjs> alzgh: like I said, they are not lazy.  The moment you evaluate the list comprehension you get the whole list
[14:52:07] <bjs> alzgh: Python's lists are not lazy.
[14:52:16] <shangxiao> mac just said "It's not waht Python does..." :)
[14:52:27] <RougeR> capitalized module names in a new python project?
[14:52:31] <Samian> [x for x in range(10)]. This is easy, But I can't do [x,x for x in range()]. I'm trying to use list comprehension for appending multiple items to the list per iteration in the comprehension.
[14:53:06] <bjs> Samian: `[y for x in range(10) for y in [x, x]]`
[14:53:25] <alzgh> OK, got it. Thank you, guys.
[14:53:25] <Samian> interesting
[14:53:31] <MacGyver> Python is a language where generators can be infinite but list comprehensions cannot; but the fact that a generator in a language can be infinite does not preclude that a list comprehension in that same language cannot be used in the same way.
[14:53:39] <bjs> some people find the order confusing, so something like  `itertools.chain.from_iterable([[x,x] for x in range(10)])` might be easier to follow
[14:54:00] <bjs> Samian: the order of the `for`s I mean
[14:54:22] <bjs> RougeR: no,  modules_and_packages_like_this, ClassesLikeThis,  functions_methods_and_variables_like_this with CONSTANTS_LIKE_THIS
[14:54:22] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[14:54:26] <bjs> RougeR: is the standard form
[14:54:33] <Samian> bjs  your first solution sure wasn't easy to follow. But that's what's cool about it. It's like the checkmate that only the grandmasters see
[14:54:35] <bjs> RougeR: well lots of packagesarelikethis too
[14:54:41] <MacGyver> Python does have a generator expression which does that.
[14:55:48] <MacGyver> (x for x in y)
[14:56:39] <RougeR> bjs, i know ;). just wanted to make sure there isnt ever an edgecase. my manager has created a template repo with upper cased module names
[14:56:57] <RougeR> i've been told to get on with my work and not bring it up
[14:56:59] <bjs> RougeR: https://www.python.org/dev/peps/pep-0008/ has the usual style guide
[14:57:06] <RougeR> aye i linked him the style guide
[14:57:21] <RougeR> "Can you get on and do as you've been asked"
[14:57:38] <RougeR> "is there a reason we are not sticking to pep-8 regarding module naming being lower cased?" (me)
[14:57:45] <jinsun> MacGyver: that doesn't work, y will be evaluated before
[14:58:15] <bjs> RougeR: idk, send an email that clearly states this is not the common style,  that you recommend using the PEP 8 style as per other projects but that you are being overruled by him and will do as he says :)
[14:58:38] <RougeR> bjs, yeah pretty much all i can do
[14:58:48] <hexnewbie> RougeR: Company style guidelines subclass and supersede community style guidelines
[14:58:50] <RougeR> its the fact that is going to be the template for all new repo's which bugs me
[14:59:00] <bjs> RougeR: sometimes managers make silly decisions and it's good to have documented evidence of it if they decide to "reinterpret history"
[14:59:10] <RougeR> hexnewbie, company style guides have been in place long before this manager started
[14:59:23] <MacGyver> jinsun: Looks like it works to me.
[14:59:27] <RougeR> not formally but no one has ever used capitalized modules
[14:59:32] <bjs> RougeR: point out that if any of these repos get made public,  there will be the question of naming convention again and that time it'll be a much more painful process
[14:59:35] <MacGyver> y = itertools.count() <-- infinite generator y
[14:59:43] <MacGyver> z = (x for x in y)
[14:59:55] <MacGyver> Terminates and allows next(z)
[14:59:56] <bjs> MacGyver: count is not a generator
[14:59:58] <hexnewbie> RougeR: Albeit, when I think about it again, if I see something capitalized, and it is *not* a constant, I'd be very confused.
[14:59:58] <bjs> if I was being pedantic
[14:59:59] <jinsun> MacGyver: well there is no list compreension there
[15:00:10] <grawity> how's that different from `z = itertools.count()`
[15:00:12] <MacGyver> jinsun: No, that's a generator expression. That's what I said.
[15:00:15] <RougeR> bjs, yeah i'll bring it up again tommorow. i'll just get on and be a good worker drone programmer
[15:00:18] <grawity> which also allows next(z)
[15:00:18] <RougeR> for now
[15:00:34] <MacGyver> grawity: It's not, the point is it's not upfront evaluating the infinite sequence that comes from count()
[15:00:45] <MacGyver> grawity: I could do more complex stuff.
[15:01:08] <RougeR> from Models.example import person feels so wrong
[15:01:09] <Repiphany> The point was that you run out of memory if you try to do a list comprehension there, e.g. [x for x in itertools.count()]
[15:01:11] <shangxiao> RougeR: or just quit xD  I'm not sure I'd want to work for a person this controlling
[15:01:17] <jinsun> MacGyver: yes but I thought you were saying (x for x in y) will allow you to lazily evaluate any list comprehension y
[15:01:23] <RougeR> shangxiao, thought has crossed my mind
[15:01:25] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:3cd6:5eb7:c776:e1a5)
[15:01:26] <MacGyver> Ah, no, that's not what I meant.
[15:01:28] *** Quits: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it) (Ping timeout: 252 seconds)
[15:01:37] <MacGyver> The generator expression syntax would replace the list comprehension itself.
[15:01:46] <RougeR> ironically they made a point about pep-8 being the holy truth of god the other day
[15:01:49] <RougeR> so VoV
[15:01:50] <Repiphany> Yes, that was what the original answer already said
[15:02:13] <bjs> RougeR: I mean, it's just a style guide...
[15:02:18] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[15:02:31] <bjs> it's nice to have consistency but it's certainly not a hill I'd want to die on :P
[15:02:31] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:02:40] <bjs> (either way)
[15:04:07] <iflema> :D
[15:04:16] *** Quits: y1n-v1 (~y1n@178.165.194.214.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[15:04:34] <Zweimer> Hey. I would like to use the python logging class in multiple classes without having the pass the reference to each one of them, so that I have a single file in the end. How could I do that?
[15:04:48] *** Quits: death916 (~death@user/death916) (Quit: WeeChat 3.2.1)
[15:05:08] <Awoobis> Zweimer: logging.getlogger
[15:05:19] <Awoobis> s/getl/getL
[15:07:12] <Zweimer> Awoobis, thanks! That's what I am looking for.
[15:07:38] <Awoobis> Zweimer: you may also want to check out subloggers, and how you can directly configure what the names you provide to getLogger
[15:07:44] <Awoobis> do*
[15:08:03] <Awoobis> also! 3.10.0 today!
[15:08:34] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:08:48] *** Quits: EGH (~EGH@185.25.195.104) (Remote host closed the connection)
[15:09:37] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[15:10:09] *** Joins: EGH (~EGH@185.25.195.104)
[15:11:14] <RougeR> bjs, no...but after retreat down many hills. eventually you feel the need to stand your ground.
[15:12:59] <RougeR> another hill....only using requirements.txt with docker instead of using one of: poetry, pipenv, pip-tools
[15:13:01] *** Quits: legola (~legola@188.120.97.2) (Ping timeout: 252 seconds)
[15:14:17] <Zweimer> Awoobis, one additional question if you don't mind: getLogger(__name__) would always put everything into the same file, even if I restarted my program or some weeks have passed? This would mean I'd end up with a pretty big file after a while or do mechanism exist in the logging package to prevent this to happen`?
[15:14:33] <Awoobis> define name?
[15:14:49] <Awoobis> can you show me what you did, what you got, and what you expected?
[15:15:07] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[15:16:26] *** Joins: teut (~teut@182.69.68.230)
[15:16:33] *** Parts: teut (~teut@182.69.68.230) ()
[15:17:48] <bjs> Zweimer: logging has a concept of a handler, and it's the handler that decides what files and where and when to actually write to
[15:17:49] *** Joins: y1n-v1 (~y1n@178.115.43.239.wireless.dyn.drei.com)
[15:18:01] <Zweimer> Well, right now I am just reading the manuel and tutorials. I would like to have one log-file per day (a new log-file should be created the next day). It could be something like this for today: "log_2021_10_04" for example.
[15:18:10] <bjs> Zweimer: you can have a handler that sends log messages to a different file for different days, or different files for different .py files etc
[15:19:17] <Zweimer> Well, one file per day would be enough. Can there be a marker in the debug-line to show what py-file was responsible for the output?
[15:19:30] <mgedmin> https://docs.python.org/3/library/logging.handlers.html#logging.handlers.TimedRotatingFileHandler could be helpful
[15:19:36] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[15:19:53] <mgedmin> you can log the filename in the log, yes
[15:20:06] <mgedmin> use a formatter with a custom format string that includes %(filename)s somewhere
[15:20:09] <Awoobis> https://docs.python.org/3/howto/logging-cookbook.html also look though this if you want some things to help building stuff
[15:20:18] <mgedmin> you can also log line numbers and function/method names, iirc
[15:20:52] <Zweimer> Perfect! Thank you guys! I have a lot to read now :-O
[15:21:24] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[15:21:51] *** Joins: dulanic (~dulanic@47.187.144.163)
[15:22:39] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-b04805-44.dhcp.inet.fi)
[15:23:07] <Awoobis> you can be very silly and add your own entire things to fetch the name / method if you want
[15:23:20] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:23:20] *** Joins: nomn (nomn@user/nomn)
[15:24:27] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 240 seconds)
[15:27:45] *** Quits: borb (~borb@gateway/tor-sasl/borb) (Ping timeout: 276 seconds)
[15:28:34] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[15:29:05] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[15:29:08] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[15:29:18] *** Joins: dulanic (~dulanic@47.187.144.163)
[15:29:33] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[15:30:07] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[15:30:36] *** Quits: Tireos (~Tireos@91.223.118.131) (Read error: Connection reset by peer)
[15:30:40] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[15:30:53] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[15:31:12] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:23] *** Joins: shad (~shad@user/shad)
[15:31:24] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[15:32:30] *** Quits: derek_v_ (~derek_v@cpe-70-95-160-136.san.res.rr.com) (Ping timeout: 260 seconds)
[15:33:14] *** Quits: gggp (~textual@111.63.14.119) (Ping timeout: 245 seconds)
[15:34:39] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-b04805-44.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:34:56] <p-i-> Is `Thread(target=fetch, daemon=True).start()` safe? Or will I run into issues when the Thread instance goes out of scope while the thread is still running
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:07] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[15:36:26] <bjs> p-i-: it's safe yes
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:02] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[15:37:06] *** Joins: gggp (~textual@111.63.14.119)
[15:37:49] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[15:37:49] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[15:39:48] <rakoon> Since asyncio.queue is not thread-safe, can i use a queue.Queue?
[15:41:20] *** Quits: zepolen_ (~zepolen@2a02:587:8608:c7cb:a02f:4643:857a:bfa0) (Ping timeout: 246 seconds)
[15:41:53] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[15:42:46] *** Joins: me_ (~me@90.244.150.142)
[15:42:49] <bjs> rakoon: well yes, queue.Queue is thread-safe but presumably if you were looking at asyncio.Queue because you have an asyncio program?
[15:43:06] <bjs> using a queue.Queue in an async function will probably go very wrong :)
[15:43:32] <rakoon> bjs: yes that loop needs to add to a queue tasks for sync code to process while it continues with making requests
[15:43:40] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: The Lounge - https://thelounge.chat)
[15:44:00] <rakoon> bjs: or really? :/
[15:44:05] <rakoon> oh*
[15:44:18] <bjs> rakoon: well threads != async,  and the primitives don't mix
[15:44:26] <bjs> rakoon: why do you want a thread-safe queue?
[15:44:44] *** Joins: kenoba (~kenoba@user/kenoba)
[15:44:51] <bjs> rakoon: ("why are you using threads if you're also using asyncio?")
[15:45:08] <rakoon> bjs: well i want while the loop is making requests to be able to send data from sync code to process
[15:45:30] <Awoobis> thread pool executor, if you need synced code
[15:45:31] <bjs> rakoon: i'm confused,  why are there threads involved here at all?
[15:45:38] <Awoobis> but also ^
[15:45:41] *** Quits: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[15:45:55] *** Joins: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl)
[15:46:10] <rakoon> bjs: i want asyncio to do only the requests/IO, and sync code for regular processing
[15:46:41] <bjs> rakoon: but why not make the "sync code" just be an asyncio task that loops over the queue and does the processing
[15:46:55] <bjs> threads don't seem to help here
[15:47:39] <rakoon> bjs: well in the end or at later stage i might do the whole code to be async but first i want to do it the way i desribed above
[15:47:44] <pr100> why kinds of things constitute your "regular processing"?
[15:47:54] <rakoon> bjs: if i do what u say then i will block when i save in the db
[15:48:05] <bjs> rakoon: oh the db part is not async?
[15:48:27] <rakoon> pr100: data transformatios and db
[15:48:31] <pr100> you want a async capable database client
[15:48:36] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:48:43] <rakoon> bjs: not yet even though i know sqlalchemy supports it
[15:49:34] <pr100> if your data transformations are long running then you might want to punt them off to a thread or process pool executor
[15:49:50] <rakoon> i want to isolate asyncio as much as possible in the first iteration, i am afraid of doing everything in an async function i also worry about being able to test as easy as possible
[15:51:16] <rakoon> the processing tasks will be handled by some sort of celery tools
[15:51:35] <Awoobis> testing async functions is pretty easy
[15:52:14] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[15:52:52] <rakoon> Awoobis: if u want to run the tests in parallel do u need multiple loops?
[15:53:20] *** Joins: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it)
[15:53:23] *** Joins: daoudr__ (~daoudr@91.90.122.16)
[15:53:24] <Awoobis> depends on the test framework, I'd assume
[15:53:36] <Awoobis> but parallel tests never run truly concurrenetly anyway so I wouldnt worry
[15:54:43] *** Joins: dez (uid92154@user/dez)
[15:54:57] <rakoon> bjs: how can it go wrong if use queue.Queue in an asyncio function?
[15:55:05] <bjs> rakoon: it's blocking
[15:55:17] <Awoobis> so, you block the entire event loop
[15:55:35] <rakoon> i can use the nowait? :S
[15:55:56] *** Quits: grawity (grawity@star.nullroute.eu.org) (Quit: grawity)
[15:55:58] *** Quits: daoudr_ (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92) (Ping timeout: 252 seconds)
[15:56:42] *** Joins: rannnn8888 (~rannnn888@bzq-109-65-168-133.red.bezeqint.net)
[15:56:53] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[15:57:33] <RougeR> ughh there are other issues with the template repo bjs
[15:57:39] *** Joins: Kharon (uid511277@user/cypris)
[15:57:44] <RougeR> i feel i cant even say anything without getting chewed out
[15:57:49] <bjs> rakoon: sure,  that could work
[15:58:10] *** Quits: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053) (Ping timeout: 252 seconds)
[15:58:17] <RougeR> https://flask.palletsprojects.com/en/2.0.x/tutorial/layout/
[15:58:25] <RougeR> the flask/ directory does not exist
[15:58:25] *** Joins: daoudr_ (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92)
[15:58:28] <rakoon> bjs: thanks i will try and see how it goes
[15:58:39] <RougeR> flaskr*
[15:58:57] *** Quits: spuz (~spuz@213.129.88.97) (Quit: Client closed)
[15:59:15] <rakoon> Awoobis: you said thread pool executor, im not expert with pools. If i run loop.run_in_executor(func_that_process) each time, is it enough?
[15:59:33] <rakoon> oh i typed it wrong
[15:59:33] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[15:59:34] <Awoobis> it will launch your synced code in a different thread
[15:59:46] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:59:47] *** randall_ is now known as randall
[15:59:49] *** Quits: daoudr__ (~daoudr@91.90.122.16) (Read error: Connection reset by peer)
[16:00:00] <Awoobis> and I thiiink provide a future for when the thread exits
[16:00:01] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[16:00:31] <rakoon> actually loop.run_in_executor(lambda: queue.put_nowait(..)) :D
[16:00:47] <Awoobis> if you use nowait it wont matter
[16:01:02] <rakoon> Awoobis: ah right, ill try to test it
[16:01:34] <fluter> how can i let setup.py include symlinks when copy files?
[16:01:44] *** Joins: zepolen_ (~zepolen@2a02:587:8608:c7cb:6edd:ba46:b653:2410)
[16:02:24] *** Quits: gggp (~textual@111.63.14.119) (Ping timeout: 245 seconds)
[16:02:33] <rakoon> well now im rethinking, i can do put_nowait from the async code, i just need to make sure i dont mess up the size of the queue or i might have other problems im not aware?
[16:03:05] *** Quits: shangxiao (~davids@124.187.230.212) (Quit: WeeChat 3.3)
[16:03:36] *** Joins: legola (~legola@46.235.101.220)
[16:03:53] <Awoobis> if you put_nowait and its full it throws an exception
[16:04:06] <rakoon> Awoobis: alright cool thanks
[16:04:37] *** Quits: n000g (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[16:05:09] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[16:05:24] *** Joins: han-solo (~hanish@user/han-solo)
[16:05:39] *** Joins: gggp (~textual@111.63.14.119)
[16:05:46] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[16:07:27] *** Quits: elkclone (~elkclone@user/elkclone) (Quit: Leaving)
[16:08:47] *** Joins: grawity (~grawity@star.nullroute.lt)
[16:09:09] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:be2b:cbec:1e0e:3d86)
[16:09:45] *** Joins: nrg (~NRG@user/nrg)
[16:10:49] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:197d:2a2d:de89:5ea4) (Ping timeout: 252 seconds)
[16:11:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[16:11:45] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:6d88:60e0:799a:f016)
[16:12:29] *** Joins: ponyofdeath (~vladi@cpe-24-94-16-66.san.res.rr.com)
[16:13:09] *** Joins: fikran (~fikran@user/fikran)
[16:13:31] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[16:15:53] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[16:18:05] *** Quits: gggp (~textual@111.63.14.119) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:18:35] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[16:19:17] *** Joins: vsantana (~vsantana@fttx-177136149171.usr.predialnet.com.br)
[16:19:42] *** Quits: nrg (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[16:21:59] *** Joins: goldfish (~goldfish@user/goldfish)
[16:22:09] *** Joins: CodePoint (~BitShift@94.198.42.117)
[16:23:30] *** Joins: dld (~davidlowr@2620:6e:6000:2900:f114:5b21:6fb7:1fc1)
[16:24:14] <p-i-> Suppose I have a list of pairs [(a,A), (b,B), ...]. How to get the x with the smallest X?
[16:24:50] *** Joins: nrg (~NRG@user/nrg)
[16:24:58] <Repiphany> min(pairs, key = lambda x : x[1])
[16:25:00] <grawity> min(thelist, key=lambda i: i[1])
[16:25:18] *** Joins: palash (~palash@2401:4900:382b:c6eb:148a:8720:e8eb:6405)
[16:25:18] <grawity> great minds python alike
[16:25:20] <Repiphany> [0] too I guess
[16:26:02] <p-i-> thanks!
[16:26:04] *** Joins: semeion (~semeion@user/semeion)
[16:26:08] <palash> Returing to #python from hibernation
[16:26:15] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:26:56] <palash> I am developing a protocol for microblogging with python and twisted
[16:27:24] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 245 seconds)
[16:28:02] <palash> nothing complex,only a simple experiment
[16:28:50] <palash> i'm thinking like 'plog://'
[16:29:19] <nedbat> palash: what would the client do, and what would the server do?
[16:29:27] *** Quits: vsantana (~vsantana@fttx-177136149171.usr.predialnet.com.br) (Quit: Leaving)
[16:31:09] <palash> server will be serving posts; and the client can be used for subscribing to someone's microblog running on this platform, as well as using to write posts to be served over this protocol
[16:31:24] *** whaley_ is now known as whaleyh
[16:31:28] *** whaleyh is now known as whaley
[16:31:30] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[16:31:51] *** Joins: spithash (~spithash@user/spithash)
[16:32:44] <palash> nedbat: forgot to mention, the server should be running on a host which supports maybe python cgi or plain old python hosting
[16:33:10] <nedbat> palash: why python cgi?
[16:33:39] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[16:33:41] *** Joins: rsx (~dummy@ppp-188-174-133-177.dynamic.mnet-online.de)
[16:34:29] *** Joins: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr)
[16:34:32] <palash> cgi is a just experiment. probably not going into the "stable" code
[16:35:16] <nedbat> palash: it's daring to do new protocols, when http is so pervasive
[16:36:32] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[16:36:41] <hodapp> no FastCGI?
[16:38:05] <palash> nedbat: ofcourse, and it will also be out of my comfort zone. so it's gonna be a enjoying ride
[16:38:42] <grawity> tbh finger:// was the original microblog protocol
[16:39:30] <palash> hodapp: Learning more about FastCGI. let's see, where the flow takes me
[16:40:33] *** Joins: gabriel23 (~gabriel23@dync-34-216.ac.upc.es)
[16:40:49] <palash> grawity: `finger://` is the inspiration
[16:40:58] <hodapp> I liked the abstraction that CGI allowed, with it being very agnostic to both webserver and web app; too bad it scales miserably
[16:41:09] <gabriel23> Hi, what is the support for PEP 656 ? has it been implemented / merged?
[16:41:10] <hodapp> though I guess FastCGI avoids that
[16:41:20] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[16:42:04] *** Quits: rannnn8888 (~rannnn888@bzq-109-65-168-133.red.bezeqint.net) (Quit: Client closed)
[16:42:54] <grawity> tbh I'd like something like gunicorn that speaks fastcgi
[16:43:34] <palash> hodapp: I havent found a hosting service to test with python cgi, just playing on my local machine. Don't have that much money to buy a hosting service with python support
[16:43:42] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:44:10] <hodapp> I thought shared web hosting - like was common in the '90s and '00s - was a tad rare now, much moreso with CGI support
[16:44:27] <grawity> oh no, it's just called "serverless" now
[16:44:44] <hodapp> that's a bit different
[16:45:12] <grawity> palash: have you looked at heroku
[16:45:38] <hodapp> yeah, heroku has a free tier that might suffice
[16:45:45] <gabriel23> I'm using google cloud run, which is similar. also has a free tier
[16:46:27] <palash> grawity: heroku, gonna try next
[16:47:22] <palash> gabriel23: I closed my google cloud account long ago, not gonna give them any more data
[16:47:56] <gabriel23> isn't heroku collecting and selling data?
[16:48:02] <hodapp> probably
[16:48:15] <gabriel23> AWS2 probably too
[16:48:18] <hodapp> and google cloud
[16:48:18] <gabriel23> AWS probably too
[16:48:43] *** cloud is now known as ro
[16:49:21] <palash> It's a read headache nowadays
[16:49:22] <grawity> lol I signed in to my old heroku account, got asked to accept their new ToS, and lol what's up with italy https://i.imgur.com/YJlB6bf.png
[16:50:16] <palash> grawity: someone sued them maybe ;)
[16:52:26] *** Joins: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[16:52:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:53:03] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[16:53:16] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[16:53:41] *** Joins: walrus_man (~Thunderbi@131.204.254.86)
[16:54:20] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:3cd6:5eb7:c776:e1a5) (Quit: Client closed)
[16:55:14] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[16:55:22] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 252 seconds)
[16:56:43] <gabriel23> Does anybody knows how to use wheels on linux alpine?
[16:58:44] *** Joins: Dotz0cat_ (~Dotz0cat@h235.187.39.162.dynamic.ip.windstream.net)
[16:59:29] *** Quits: Dotz0cat (~Dotz0cat@h71.246.19.98.static.ip.windstream.net) (Ping timeout: 245 seconds)
[16:59:33] *** Dotz0cat_ is now known as Dotz0cat
[17:00:01] *** Joins: Payam (~Payam@138.106.57.131)
[17:00:08] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[17:01:36] *** Joins: Tireos (~Tireos@91.223.118.131)
[17:02:26] *** Quits: walrus_man (~Thunderbi@131.204.254.86) (Quit: walrus_man)
[17:02:40] *** Joins: walrus_man (~Thunderbi@131.204.254.86)
[17:02:49] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 245 seconds)
[17:03:30] *** Joins: darksun (~darksun@user/darksun)
[17:06:51] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[17:06:51] *** Joins: CrtxReavr (crtxreavr@shodan.trioptimum.com)
[17:07:01] *** Joins: ska (~ska@user/ska)
[17:07:23] *** Quits: walrus_man (~Thunderbi@131.204.254.86) (Client Quit)
[17:07:57] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[17:11:33] *** Seto_Kaiba is now known as Hunterkll
[17:13:00] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[17:13:11] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:14:31] *** Quits: palash (~palash@2401:4900:382b:c6eb:148a:8720:e8eb:6405) (Quit: WeeChat 3.3)
[17:18:37] *** Joins: pro_z (~pro_z@37.214.40.135)
[17:18:53] *** Joins: jmft2 (~JMFT@82.3.54.26)
[17:20:34] *** Parts: cmagina (sid286142@user/cmagina) ()
[17:21:19] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[17:22:00] *** Quits: andrewSC_ (~andrewSC@archlinux/trusteduser/andrewSC) (Quit: WeeChat 3.2.1)
[17:22:16] *** Joins: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC)
[17:23:32] *** Joins: fdan (~fdan@103.215.168.1)
[17:23:45] *** Quits: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it) (Quit: Leaving)
[17:23:51] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[17:24:01] *** Quits: mmercer (daemoen@2605:d100:0:2d:5054:ff:fef0:3953) (Ping timeout: 265 seconds)
[17:24:07] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[17:25:01] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[17:25:54] *** Joins: zebrag (~chris@user/zebrag)
[17:26:00] *** Joins: relight (~ycgua@240e:404:7910:ce69:1dee:57b3:c5ae:4214)
[17:30:09] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[17:30:29] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[17:30:56] *** Joins: hendursa1 (~weechat@user/hendursaga)
[17:30:58] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:32:01] *** Joins: thiras (~thiras@user/thiras)
[17:33:02] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[17:33:22] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:6d88:60e0:799a:f016) (Ping timeout: 260 seconds)
[17:33:23] *** Joins: grooverman (~grooverma@177.102.119.40)
[17:33:56] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:9f10:64cd:ab5c:5b68)
[17:34:38] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:34:48] <Samian> This seems to be a lot of code for simply make folder if not exist, relative to a sourcecode file: https://bpa.st/NCJQ
[17:34:53] <Samian> Is there a better way?
[17:35:15] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e058-2cd1-f59d-84bf.res6.spectrum.com)
[17:35:25] <Awoobis> yes, use pathlib
[17:36:36] <Awoobis> this_file = pathlib.Path(__file__).absolute(); (this_file / 'multi_gpu..._per_gpu').mkdir(exist_ok=True)
[17:36:50] <Awoobis> or mkdirs, and so on
[17:36:53] <Awoobis> but pathlib is your friend
[17:37:20] <jmft2> Are there any communities, maybe even conferences, for LGBTQ+ Pythonistas? Especially transgender and nonbinary.
[17:37:32] *** Joins: treefrob (~treefrob@p2e54235e.dip0.t-ipconnect.de)
[17:37:57] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[17:37:58] <grym> jmft2: all of them? CoC's pretty clear on that point
[17:38:16] <jmft2> grym: Yes, that's true
[17:38:28] <Samian> sweeet thanks Awoobis !
[17:38:50] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[17:38:53] <Awoobis> jmft2: lgbt+ people are all around you, if you just look
[17:42:41] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[17:42:55] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[17:43:14] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 245 seconds)
[17:43:32] <Awoobis> point being Ive found here to be quite good with that
[17:43:42] <Awoobis> as has libera been in general (though Im biased)
[17:46:06] *** Quits: treefrob (~treefrob@p2e54235e.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:46:15] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[17:46:18] *** Quits: nicode (~nic@45.72.213.174) (Remote host closed the connection)
[17:46:19] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[17:47:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[17:47:25] *** Joins: todda7 (~torstein@18.red-83-46-218.dynamicip.rima-tde.net)
[17:47:37] *** Quits: VaniaPy (~VaniaPy@adsl-52.176.58.193.tellas.gr) (Quit: Connection closed)
[17:47:54] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[17:48:17] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[17:48:49] *** dcaro_away is now known as dcaro
[17:49:17] *** Joins: treefrob (~treefrob@p2e54235e.dip0.t-ipconnect.de)
[17:49:41] *** Quits: todda7 (~torstein@18.red-83-46-218.dynamicip.rima-tde.net) (Client Quit)
[17:50:32] <nedbat> jmft2: last year, the chair of the PSF Directors was trans
[17:51:44] *** Quits: kr0nk (~kr0nk@user/kr0nk) (Quit: leaving)
[17:51:52] <jmft2> nedbat: Yeah, that was very good. I'm looking really more for networking opportunities though.
[17:56:53] *** Joins: ngp (~ngp@199.180.249.183)
[17:58:13] *** Joins: ttys000 (~ttys000@user/ttys000)
[18:01:03] *** Quits: tkazi (~tkazi@user/tkazi) (Quit: Disconnected)
[18:01:17] *** Quits: saroy (~Sandipan@45.249.73.248) (Quit: Leaving)
[18:02:28] *** Joins: VaniaPy (~VaniaPy@adsl-52.176.58.193.tellas.gr)
[18:02:31] *** Parts: VaniaPy (~VaniaPy@adsl-52.176.58.193.tellas.gr) ()
[18:02:39] *** Joins: tkazi (~tkazi@user/tkazi)
[18:04:40] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[18:05:02] *** Quits: xiongxin (~quassel@113.116.33.66) (Quit: No Ping reply in 180 seconds.)
[18:05:19] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[18:05:33] *** Quits: emerent (~quassel@p54a3e5dc.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:06:17] *** Joins: xiongxin (~quassel@119.123.103.95)
[18:06:48] *** Joins: emerent (~quassel@p200300cd57485529ba27ebfffed28a59.dip0.t-ipconnect.de)
[18:09:37] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:10:14] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:11:19] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[18:11:43] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:12:27] *** Joins: kr0nk (~kr0nk@user/kr0nk)
[18:15:47] *** Quits: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[18:16:33] *** Quits: brelod (~me@90.244.150.142) (Quit: Lost terminal)
[18:17:15] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (Ping timeout: 260 seconds)
[18:17:50] *** Quits: gabriel23 (~gabriel23@dync-34-216.ac.upc.es) (Quit: Client closed)
[18:18:35] <jmft2> What's the safest way to get a unittest.TestCase to run in a particular directory? I had been putting os.chdir's in setUp and tearDown, but I'm now using self.addCleanup(lambda: os.chdir(oldcwd)) in setUp instead. But is there a neater way?
[18:18:55] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[18:18:56] <jmft2> Override TestCase.run ?
[18:20:30] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[18:20:30] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[18:21:13] <SnoopJ> jmft2, messing about in TestCase's plumbing sounds kinda like the opposite of "neat" to me. Maybe a context manager wrapped around os.chdir() would work?
[18:21:47] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Quit: Leaving)
[18:22:29] *** Joins: fikran (~fikran@user/fikran)
[18:22:32] *** Quits: alphasierra (~alphasier@2405:201:e:4d:d982:f9d4:5bdf:6d4c) (Read error: Connection reset by peer)
[18:23:03] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed)
[18:23:20] <jmft2> The important thing is that the directory must change back even if the test encounters an exception - which is why not to use tearDown.
[18:23:31] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[18:23:59] *** Joins: helmet33 (~usetarmac@allpc.gmit.ie)
[18:24:17] <jmft2> https://stackoverflow.com/questions/169070/how-do-i-write-a-decorator-that-restores-the-cwd
[18:24:27] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[18:25:06] <SnoopJ> with contextlib, you'd spell that something like: `@contextmanager def in_dir(pth): oldpth = os.getcwd(); os.chdir(pth); try: yield; finally: os.chdir(oldpth)`
[18:28:00] <jmft2> Beautiful solution :-) I'd still want to override run to do: `def run(...): with in_dir(pth): super().run(...)`
[18:28:03] *** Quits: Tireos (~Tireos@91.223.118.131) (Read error: Connection reset by peer)
[18:28:11] * SnoopJ can't stop you
[18:28:39] *** Quits: beterraba (~beterraba@109.171.244.80) (Ping timeout: 245 seconds)
[18:29:05] *** Joins: beterraba (~beterraba@191.101.252.145)
[18:29:40] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[18:29:43] *** Joins: LiftLeft (~LiftLeft@172.98.80.18)
[18:29:50] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[18:30:13] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[18:30:28] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[18:30:59] <ska> For a python project, can i put all my pytest metadata in pyproject.toml ? Do I still need a pytest.ini file?
[18:31:12] *** Quits: CodePoint (~BitShift@94.198.42.117) (Quit: Never gonna give you up, never gonna let you down...)
[18:31:13] <SnoopJ> ska, you can specify it all in pyproject.toml, yep
[18:32:05] <SnoopJ> `tool.pytest.ini_options` is where you can put more or less the same things you'd put in pytest.ini as a stop-gap
[18:32:22] <SnoopJ> (but I think it's intended there will be a better way to do it in the future)
[18:32:32] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[18:33:11] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[18:34:00] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[18:35:33] *** Quits: Payam (~Payam@138.106.57.131) (Quit: Client closed)
[18:35:33] <ska> For some reason, (which I can't remember) , I had problems with pyproject.toml and had to use pytest.ini. But pyproject.toml seems to work fine for 3.7.3 python.
[18:35:50] *** Joins: bn_work (uid268505@id-268505.uxbridge.irccloud.com)
[18:36:35] <SnoopJ> https://docs.pytest.org/en/latest/reference/customize.html#pyproject-toml
[18:36:56] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[18:37:22] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[18:37:26] *** Quits: Kharon (uid511277@user/cypris) (Quit: Connection closed for inactivity)
[18:37:37] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 252 seconds)
[18:37:50] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[18:38:39] *** Quits: tkazi (~tkazi@user/tkazi) (Ping timeout: 245 seconds)
[18:39:18] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[18:39:19] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[18:41:31] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[18:43:31] *** Quits: szymon (~ugh@staticline-31-183-189-254.toya.net.pl) (Quit: szymon)
[18:46:01] *** capn_ is now known as capn
[18:47:15] *** Joins: tkazi (~tkazi@user/tkazi)
[18:47:54] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: brb)
[18:48:30] *** Quits: Pandadub (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14) (Quit: Leaving)
[18:48:45] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[18:48:50] *** Joins: feliks (~feliks@user/feliks)
[18:48:59] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[18:50:53] *** Joins: node1 (~node1@user/node1)
[18:51:04] *** Quits: tkazi (~tkazi@user/tkazi) (Client Quit)
[18:51:06] <feliks> hi! why is `repr(1e-4)` not `1e-4` but `0.0001`? `repr(1e-5)` output `1e-5`. can i show `1e-4` as such without forcing it through format string?
[18:51:33] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:52:38] *** Joins: tkazi (~tkazi@user/tkazi)
[18:52:54] <feliks> `f"{1e-4:e}"` returns `1.000000e-04` but i dont need those zeros
[18:53:28] *** Quits: ro (~cloud@user/ansible) (Ping timeout: 256 seconds)
[18:54:23] <SnoopJ> feliks, does this do what you want? f"{1e-4:.0e}"
[18:54:36] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[18:54:53] <bjs> feliks: see https://docs.python.org/3/library/string.html#formatstrings for the standard formatting rules  (which I think repr() tries to follow).  See under "g" the default rules for formatting floats,  i.e. '6 sig. fig. otherwise scientific notation is used for values smaller than 1e-6 in absolute value and values where the place value of the least significant digit is larger than 1, and fixed-point notation is used otherwise.'
[18:55:17] *** Quits: schumaml (~schumaml@dslb-092-074-000-199.092.074.pools.vodafone-ip.de) (Quit: WeeChat 3.3)
[18:55:33] <feliks> SnoopJ: no sry for being unspecific. `f"{1.3e-4:.0e}"` should output `1.3e-04` not `1e-04`
[18:55:51] <bjs> feliks: how many decimal places do you want
[18:55:51] <SnoopJ> feliks, then you should read the link bjs shared to get a sense of what behaviors are available out of the box
[18:56:09] <feliks> kk thanks to both of you. ill read :)
[18:56:20] *** Quits: relight (~ycgua@240e:404:7910:ce69:1dee:57b3:c5ae:4214) (Changing host)
[18:56:20] *** Joins: relight (~ycgua@user/relight)
[18:59:20] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:59:38] *** Quits: relight (~ycgua@user/relight) (Quit: Konversation terminated!)
[19:00:14] *** Joins: relight (~relight@user/relight)
[19:01:04] *** Quits: relight (~relight@user/relight) (Client Quit)
[19:03:44] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[19:03:45] *** Quits: Meteorhead (~Meteorhea@165.225.205.11) (Quit: Client closed)
[19:04:17] *** Joins: ano (~ano@user/ano)
[19:04:18] <feliks> > insignificant trailing zeros are removed from the significand, and the decimal point is also removed if there are no remaining digits following it
[19:04:22] <feliks> this lead me to:
[19:04:24] <feliks> lambda f: re.sub(r'([1-9])0+(e)', r'\1\2', f'{f:.6e}')
[19:04:55] <feliks> also:
[19:04:58] <feliks> > With no precision given, uses a precision of 6 significant digits for float
[19:05:12] <feliks> thanks for the pointer :)
[19:07:16] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[19:07:37] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:07:43] *** Joins: srhm (~srhm@user/srhm)
[19:07:52] *** Joins: chamgry (~chamgry@user/chamgry)
[19:09:40] <SnoopJ> I wonder where 6 comes from, C++ uses the same default value when outputting a float to a stream
[19:11:54] *** Quits: Samian (~Sami@user/samian) (Read error: Connection reset by peer)
[19:12:24] *** Quits: helmet33 (~usetarmac@allpc.gmit.ie) (Ping timeout: 245 seconds)
[19:12:35] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[19:13:28] <jamwil> Is today release day for 3.10.0 final?
[19:14:53] *** Joins: extropiator (~extropiat@user/extropiator)
[19:15:17] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:15:24] <bjs> jamwil: yes
[19:15:46] * jamwil pops champagne
[19:16:32] <jamwil> Congrats to the core team
[19:16:43] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[19:16:46] *** Joins: codebam (~codebam@user/codebam)
[19:16:59] <codebam> can someone help me with pyenv? I'm trying to install 3.7.2
[19:17:02] <codebam> https://pb.sbehan.ca/GezZ.txt
[19:17:16] *** Quits: Tuju (~tuju@214-204-50-195.sta.estpak.ee) (Remote host closed the connection)
[19:17:23] <bjs> jamwil: afaik they've not hit the switch -yet- :P
[19:17:30] <bjs> but probably in the next few hours
[19:17:36] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[19:17:38] <SnoopJ> codebam, can you share the complete contents of /tmp/python-build.20211004114324.60340.log ?
[19:17:46] <codebam> SnoopJ: sure just a second
[19:18:09] <SnoopJ> codebam, it's also generally useful to know about the --verbose flag for `pyenv install`, which shows the build process in your term
[19:18:18] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:18:21] <codebam> https://pb.sbehan.ca/GAZS.txt
[19:18:26] <codebam> I'll run it again with --verbose
[19:19:01] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Ping timeout: 252 seconds)
[19:21:22] <SnoopJ> curious error
[19:21:35] <SnoopJ> `ln -s python3.7.1 python3.1` looks downright bizarre, why the heck are 3.7.1 and 3.1 even relevant here?
[19:22:06] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[19:22:13] * SnoopJ checks own pyenv, finds multiple `python3.1` man pages
[19:22:15] <codebam> yeah I don't understand what it's trying to do there
[19:22:43] *** Joins: odoood__ (odoood@gateway/vpn/protonvpn/odoood)
[19:23:34] <SnoopJ> codebam, the stuff just before failure is installing the man pages, but it looks like an error's been swallowed up. The thing right before the error looks like running ensurepip (to ensure that pip is present), but the error code isn't familiar to me
[19:23:56] <SnoopJ> the man-page stuff is probably benign, just caught my eye
[19:24:04] *** Quits: beterraba (~beterraba@191.101.252.145) (Ping timeout: 245 seconds)
[19:24:27] *** Joins: Narrat (~omnius@p200300df5f0b351c06ea56fffe2e7cdc.dip0.t-ipconnect.de)
[19:24:38] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:24:55] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 245 seconds)
[19:25:22] *** Joins: e3d3 (~user@2a02-a450-1c17-1-ca60-ff-fe49-35cf.fixed6.kpn.net)
[19:25:28] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 252 seconds)
[19:27:22] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[19:27:26] *** Joins: minip (~minip@user/minip)
[19:27:36] *** Joins: beterraba (~beterraba@86.107.21.205)
[19:28:15] <SnoopJ> oh, yes it's benign, the .1 is because it's section 1 of the manual
[19:29:11] *** Joins: ozoned (~odoood@2601:c8:c003:a550::2)
[19:29:25] *** Quits: xiongxin (~quassel@119.123.103.95) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:29:59] <codebam> oh hmm
[19:30:00] <SnoopJ> codebam, my only guess here is some kind of permissions error, or maybe the disk became full. If re-running with --verbose produces a more informative error, let us know
[19:30:10] <codebam> it was the same error with --verbose
[19:30:20] <codebam> I'll try in a new container maybe
[19:30:32] <codebam> it's inside a fedora toolbox
[19:30:58] <SnoopJ> codebam, can you share /var/home/codebam/.pyenv/versions/3.7.2/lib/python3.7/config-3.7m-x86_64-linux-gnu/Makefile ? Maybe we just need to look at line 1130 there
[19:31:04] <gloomy> Hey, getting a good old SettingWithCopyWarning and I'm not entirely sure why: https://gist.github.com/ldorigo/498cba359e8da527a1a4251d28fe9631
[19:31:05] *** Joins: mat001 (~mat001@213.143.69.121)
[19:31:53] <gloomy> (sorry, there was a small typo, refresh the page)
[19:31:54] *** Quits: odoood__ (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 260 seconds)
[19:32:12] <e3d3> I'm a Tkinter beginner and want to know what a clean way is to make a counter widget, to increment & decrement integers
[19:32:18] <SnoopJ> hmm, it's probably the ensurepip stuff in the output, looking at my local Makefile for a different rev of 3.7.
[19:32:29] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Quit: WeeChat 2.3)
[19:32:34] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[19:32:40] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:32:48] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:33:03] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[19:33:07] <gloomy> When I do df[df["somecol"] == "someval"]], I'm using a boolean array for indexing - does that mean that the resulting dfs_filtered are views on the original dfs ? Hence the warning?
[19:33:35] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Client Quit)
[19:33:55] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[19:34:05] *** Quits: ska (~ska@user/ska) (Quit: Leaving)
[19:34:24] *** Joins: ska (~ska@user/ska)
[19:34:42] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Client Quit)
[19:34:56] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[19:35:13] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[19:35:15] *** Joins: jazzy (~jaziz@2600:380:8571:702f:1cbc:304:51f8:c200)
[19:35:45] <SnoopJ> gloomy, I would expect a copy, but it would help to see the complete code you're running. I'm only familiar with the error issued when you try to assign to this kind of expression.
[19:35:50] *** Joins: magla (~gelignite@55d4575c.access.ecotel.net)
[19:36:08] <byte4byte> jim can you teach me python?
[19:36:35] <SnoopJ> it's analogous to numpy's "advanced indexing," although pandas creates lots of edge cases for behaviors like this
[19:37:00] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 245 seconds)
[19:37:24] <SnoopJ> codebam, out of curiosity, what version of gcc is this? Looking at this issue: https://github.com/pyenv/pyenv/issues/1889
[19:38:03] <gloomy> SnoopJ: https://gist.github.com/ldorigo/498cba359e8da527a1a4251d28fe9631 added the original code, don't think there's much of a difference with the simplified code I put before
[19:38:17] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:38:22] *** Quits: dhellmann_ (~dhellmann@097-081-099-073.res.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[19:39:01] <gloomy> Sorry, that's the latest test I did using .loc instead of [] indexing - but the result is the same
[19:39:04] <SnoopJ> gloomy, dfs_filtered is a list of copies
[19:39:20] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Ping timeout: 246 seconds)
[19:39:26] <gloomy> yup
[19:39:32] *** Joins: grooverman_ (~grooverma@177.95.12.14)
[19:39:36] <SnoopJ> not sure about dfs_wojciech_and_luca_no_outliers (I'm not really sure to which part of this code your unspecified warning refers)
[19:39:39] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[19:40:18] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[19:40:18] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (Ping timeout: 260 seconds)
[19:40:27] <gloomy> So they are new dfs, right?
[19:41:59] <gloomy> As in I do expect them to be copies of the original df - and from then on I am only using those copies. So I can ignore the warning?
[19:42:13] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:42:26] *** Joins: Cache_Money (~Cache_Mon@c-67-160-112-6.hsd1.wa.comcast.net)
[19:42:40] *** Quits: grooverman (~grooverma@177.102.119.40) (Ping timeout: 252 seconds)
[19:43:02] *** Quits: southey (~foxtrot@user/foxtrot) (Quit: Goodbye)
[19:45:14] <SnoopJ> I can't tell you much about the warning unless I see it, but I would expect copies here
[19:45:44] <SnoopJ> If you _want_ a copy, it's usually best to call copy() explicitly and avoid any ambiguity
[19:45:44] *** Joins: catdog2 (~quassel@2001:470:50f7:cdcd::cd1)
[19:45:58] *** dcaro is now known as dcaro_away
[19:46:08] *** Joins: southey (~foxtrot@user/foxtrot)
[19:46:17] *** Quits: catdog (~quassel@2001:470:50f7:cdcd::cd1) (Ping timeout: 264 seconds)
[19:46:25] <SnoopJ> well, in my opinion anyway :)
[19:47:09] *** Joins: Fieldy (~no@user/fieldy)
[19:47:18] *** southey is now known as foxtrot
[19:49:17] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[19:49:45] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[19:50:32] *** Quits: p-i- (~root@155.138.135.122) (Quit: Lost terminal)
[19:51:13] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[19:51:22] *** Quits: P1ro (~quassel@user/p1ro) (Ping timeout: 252 seconds)
[19:51:58] *** Quits: ozoned (~odoood@2601:c8:c003:a550::2) (Ping timeout: 260 seconds)
[19:52:25] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[19:52:31] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[19:52:41] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[19:53:01] *** Quits: rolandog[m] (~rolandogm@2001:470:69fc:105::972f) (Ping timeout: 268 seconds)
[19:53:51] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[19:54:17] <madprops> trying to find how to send a method to a dbus media player
[19:54:22] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[19:54:37] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 252 seconds)
[19:55:17] *** Quits: meain1 (~meain@2001:470:69fc:105::2db) (Ping timeout: 264 seconds)
[19:55:31] *** Joins: ubert (~Thunderbi@178.115.39.222.wireless.dyn.drei.com)
[19:56:16] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[19:56:20] *** Joins: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[19:56:38] *** Joins: meain1 (~meain@2001:470:69fc:105::2db)
[19:56:57] *** Joins: ckdCreations (~ckdCreati@147.55.133.134)
[19:57:15] <madprops> nvm i got it
[19:57:49] *** Joins: han-solo (~hanish@user/han-solo)
[19:58:22] *** Joins: swensson (~swensson@host-90-235-17-94.mobileonline.telia.com)
[19:58:28] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[19:59:34] *** Quits: luva (~luva@5.180.62.230) (Ping timeout: 252 seconds)
[20:00:10] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:be2b:cbec:1e0e:3d86) (Ping timeout: 252 seconds)
[20:00:39] *** Quits: foxtrot (~foxtrot@user/foxtrot) (Quit: Goodbye)
[20:00:41] *** Quits: cotsuka (~cotsuka@user/cotsuka) (Ping timeout: 264 seconds)
[20:00:49] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[20:01:02] *** Quits: jinsun_ (~jinsun@user/jinsun) (Ping timeout: 268 seconds)
[20:01:07] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[20:01:28] *** Quits: extropiator (~extropiat@user/extropiator) (Ping timeout: 256 seconds)
[20:01:53] *** Quits: amosbird (~amosbird@13.75.119.182) (Ping timeout: 264 seconds)
[20:02:00] *** Joins: southey (~foxtrot@user/foxtrot)
[20:02:11] *** Quits: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net) (Quit: WeeChat 2.3)
[20:03:17] *** Joins: luva (~luva@5.180.62.229)
[20:03:29] *** Quits: binarymutt[m] (~binarymut@user/binarymutt) (Ping timeout: 246 seconds)
[20:03:48] *** Joins: cotsuka (~cotsuka@user/cotsuka)
[20:03:59] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:04:15] *** Joins: jinsun_ (~jinsun@user/jinsun)
[20:04:17] *** Quits: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de) (Remote host closed the connection)
[20:05:00] *** southey is now known as foxtrot
[20:05:29] *** Quits: ptival (~ptival@2001:470:69fc:105::41fc) (Ping timeout: 264 seconds)
[20:05:41] *** Joins: markcerv (~markcerv3@52-119-125-204.PUBLIC.monkeybrains.net)
[20:07:33] *** Joins: binarymutt[m] (~binarymut@user/binarymutt)
[20:07:57] *** Joins: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr)
[20:10:01] *** Parts: e3d3 (~user@2a02-a450-1c17-1-ca60-ff-fe49-35cf.fixed6.kpn.net) (Killed buffer)
[20:11:00] *** Joins: ptival (~ptival@2001:470:69fc:105::41fc)
[20:11:51] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[20:12:11] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[20:12:20] <codebam> SnoopJ: it's gcc (GCC) 11.2.1 20210728 (Red Hat 11.2.1-1)
[20:13:09] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:13:48] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[20:14:20] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Ping timeout: 246 seconds)
[20:14:29] <SnoopJ> codebam, it may be the alignment problem described in that issue, then. If you have an older copy of gcc handy, I'd try building with that (you can specify CC=/path/to/gcc in the pyenv invocation)
[20:15:25] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[20:16:42] <SnoopJ> I think the underlying issue (https://bugs.python.org/issue27987) is fixed from 3.7.4 onward
[20:16:54] *** launchd is now known as hexley
[20:17:10] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[20:17:13] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 252 seconds)
[20:17:45] <SnoopJ> PR in question: https://github.com/python/cpython/pull/13581 (3.7.4 final was 2019-07-08, 3.7.3 final was 2019-03-25)
[20:18:12] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[20:18:12] *** Quits: Aminda- (~mikaela-@Feneas/Mikaela-) (Ping timeout: 250 seconds)
[20:19:32] *** Quits: Maciej (~maciej@2001:470:69fc:105::ed7d) (Ping timeout: 268 seconds)
[20:19:34] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:a8e2:2519:cf79:1732)
[20:19:53] *** Quits: Mikaela- (~mikaela-@Feneas/Mikaela-) (Ping timeout: 264 seconds)
[20:21:19] *** Joins: Mr_Bungle (~MrBungle@2604:3d08:1788:dc00:69b8:66f9:7628:dced)
[20:21:38] *** Quits: MacGyver (~macgyver@user/macgyver) (Remote host closed the connection)
[20:22:23] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 246 seconds)
[20:22:24] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[20:22:44] *** Joins: SuperLag (~akulbe@user/superlag)
[20:23:20] *** Joins: MacGyver (~macgyver@user/macgyver)
[20:24:16] <codebam> SnoopJ: oh okay. I would use 3.7.4 but AWS Elastic Beanstalk CLI specifically wants 3.7.2
[20:24:28] <codebam> I'll try building with an older version of GCC
[20:24:42] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:a8e2:2519:cf79:1732) (Ping timeout: 250 seconds)
[20:25:45] <SnoopJ> codebam, it looks like users were reporting that the patch there fixed the issue (and pyenv makes applying patches fairly straightforward with --patch), but yea, using an older gcc is probably the safer option here.
[20:26:13] *** Joins: Aminda- (~mikaela-@Feneas/Mikaela-)
[20:26:22] <SnoopJ> weird that AWS tooling is that picky
[20:26:26] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (Ping timeout: 250 seconds)
[20:27:57] <jinsun> 3.10 release stream in 2 minutes now https://www.youtube.com/watch?v=AHT2l3hcIJg
[20:28:08] *** Joins: korg815 (~korg815@user/korg815)
[20:28:15] <SnoopJ> should be fun, the 3.9 stream was a blast :)
[20:28:35] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[20:28:44] *** Joins: Mikaela- (~mikaela-@Feneas/Mikaela-)
[20:28:49] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[20:28:59] <jinsun> will be first ttime watching the release stream for me
[20:29:12] *** Joins: jgrout (~jgrout@pool-71-174-224-95.bstnma.fios.verizon.net)
[20:29:29] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[20:31:49] *** Joins: fikran (~fikran@user/fikran)
[20:32:03] *** Joins: emf (~emf@2601:602:9400:84d:83e:973e:4aa8:d9e5)
[20:32:30] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[20:33:24] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[20:33:48] <aphysically> I didn't know release streams were a thing
[20:34:05] <aphysically> to be fair I didn't know a lot of things about python were a thing until the last few months
[20:34:20] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[20:34:27] <aphysically> I learned a new trick yesterday night (yield from)
[20:34:45] *** Joins: dunc (sid16@id-16.uxbridge.irccloud.com)
[20:35:43] <SnoopJ> 3.9 was the first one I've heard of, I think Pablo did it mostly of his own initiative. But it was very interesting to see the release process (and an exciting crash from GitHub's backend)
[20:36:43] <dunc> Is there a "nice" way to use Docker with python that keeps build times short?
[20:36:54] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:36:54] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[20:37:37] <dunc> The traditional way is to `pip install -r some-requirements.txt`, but on a large enough project that's a massive build and can take ten minutes
[20:37:42] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:1cb4:e88e:dbbb:6ab8)
[20:37:55] <dunc> The thing is that pretty much always you're adding or removing some tiny subset of packages
[20:38:06] <aphysically> I didn't realize there was any sort of organized pseudo(?)official python discord
[20:38:11] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[20:38:18] <SnoopJ> dunc, you might want to consider a multi-stage build that allows you to cache the fixed-but-expensive part of the build. I do this with a work project that uses torch.
[20:38:30] <aphysically> my personal experience has been discord communities tend to be a bit of a uhhh they are what they are I guess
[20:38:48] *** Joins: e3d3 (~user@2a02-a450-1c17-1-ca60-ff-fe49-35cf.fixed6.kpn.net)
[20:38:57] *** Joins: philipp64|work (~philipp64@174.27.28.163)
[20:39:03] <dunc> SnoopJ: I'm not sure how I could pull out the most expensive part without splitting the requirements into requirements-expensive.txt and requirements-other.txt
[20:39:09] <dunc> Feels like... a universal problem?
[20:39:11] <SnoopJ> dunc, you can't, really.
[20:39:13] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 252 seconds)
[20:39:20] <han-solo> dunc: https://pythonspeed.com/articles/docker-cache-pip-downloads/ # maybe ?
[20:39:46] <SnoopJ> han-solo, I got the impression the slow part was the actual building of the packages, not the downloading
[20:39:57] <han-solo> fair
[20:40:08] *** Quits: dodo (~dodo@user/dodo) (Quit: dodo)
[20:40:17] <dunc> Still, might help a bit
[20:40:26] <dunc> I am half tempted to use nix
[20:40:40] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed) (Quit: Leaving)
[20:40:43] *** Joins: node1 (~node1@user/node1)
[20:40:44] *** Quits: luva (~luva@5.180.62.229) (Ping timeout: 250 seconds)
[20:41:08] <SnoopJ> You could have a separate image that you COPY from and re-install against your requirements.txt, maybe, but then the problem becomes invalidating that image.
[20:41:14] <aphysically> I'm always a bit suspicious of docker usage; it seems a lot of places use(abuse?) it as a security layer when I'm not sure that's appropriate
[20:41:16] *** Joins: dodo (~dodo@user/dodo)
[20:41:33] *** Joins: luva (~luva@5.180.62.229)
[20:41:39] <aphysically> I mean I guess there's seccomp and maybe I'm just wrong, but there's probably other benefits of containerizing anyway
[20:41:56] <SnoopJ> aphysically, "don't do X" is generally a good way to start a fight when someone is asking a question about how to X
[20:42:17] <dunc> IMHO Docker is a hack for making linux scripting languages look like what Java has
[20:42:26] <aphysically> oh it wasn't a response to them
[20:42:37] <aphysically> if you're in an ecosystem where you're using docker you're probably not even in control of that
[20:42:51] <SnoopJ> indeed
[20:42:58] <dunc> 🤷‍♂️
[20:43:04] <TingPing> aphysically: linux namespaces are literally a security feature. Now is the Linux kernel actually good at isolation... it mostly works
[20:43:15] <dunc> I guess that the other way would be to use Packer with ansible or whatever.
[20:43:20] <SnoopJ> at any rate, we usually take questions at face value, although clarifying questions rarely hurt
[20:43:29] <dunc> I assume that's cached externally
[20:43:36] <aphysically> TingPing: yeah, and seccomp enforces it so it's not a bad thing I guess
[20:43:41] <SnoopJ> dunc, sure, you could make a package for whatever package manager your target distribution uses that contains your base environment, for instance.
[20:44:17] <dunc> Really feels like programming in 2021 is kinda broken
[20:44:26] <SnoopJ> bit of a fuss compared to maintaining a separate image that you COPY from, but it's hard to tell what your constraints are here
[20:44:27] <dunc> Where's my jetpack, etc.
[20:45:05] <aphysically> when I was in grad school I was exploring docker as part of a workflow for reproducible experiment analysis
[20:45:05] <dunc> SnoopJ: Constraints are pretty open really. Work project but it's not a massive team so change can happen.
[20:45:17] <aphysically> which is all the rage these days
[20:45:33] <jinsun_> finally started now
[20:45:41] <dunc> aphysically: I did a bioinformatics masters about 10 years ago when Docker was first coming about, and I was like "oh god Docker is perfect for this"
[20:45:54] <dunc> Still slightly unconvinced for webapps, hhe
[20:46:14] *** Joins: extropiator (~extropiat@user/extropiator)
[20:46:21] *** Joins: raxor2k (~raxor2k@78.158.232.147)
[20:46:24] <aphysically> dunc: yeah I think that's about where I am
[20:46:42] <SnoopJ> dunc, I would probably make a venv and install into it from a separate image that only gets updated when the base reqs do
[20:47:41] <SnoopJ> well, assuming having two requirements files is off-limits. That's what I'd really do, if possible
[20:48:08] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[20:48:23] <dunc> SnoopJ: I'll have a mull over. Mostly I am just surprised that it's not Solved Already
[20:48:49] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[20:49:36] <SnoopJ> dunc, it is, but the solutions do not appear to be palatable.
[20:49:40] *** Quits: emerent (~quassel@p200300cd57485529ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[20:49:47] <raxor2k> bjs: are you here
[20:49:54] *** Joins: transhumanist (~hiken@2601:196:8800:35f0:fc76:7281:9ad5:1b15)
[20:49:58] *** Joins: emerent (~quassel@p200300cd57485542ba27ebfffed28a59.dip0.t-ipconnect.de)
[20:50:24] <transhumanist> hi! sorry to be a pest! Help is appreciated, can anyone tell me whats wrong with this short segment of code? https://pastebin.ubuntu.com/p/NbXWhY8v47/
[20:50:52] <transhumanist> oopls let me repaste
[20:51:17] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:1cb4:e88e:dbbb:6ab8) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:51:30] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[20:51:33] *** Joins: Ivii (~Ivyy@2001:a61:13f1:cb01:e349:8e32:6c5c:425)
[20:51:35] <transhumanist> bpaste link seems to be donw
[20:51:45] <SnoopJ> transhumanist, line 8 is '}' but should probably be ')'
[20:51:49] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 252 seconds)
[20:51:54] <transhumanist> ah thanks
[20:52:11] *** Quits: magla (~gelignite@55d4575c.access.ecotel.net) (Quit: Stay safe!)
[20:52:24] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[20:52:58] *** Joins: BSaboia (~bsaboia@177.37.198.74)
[20:53:27] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[20:53:42] <transhumanist> it doesnt like the 'title':'Temperature... or 'title='Temperature...
[20:53:58] <transhumanist> examples show both
[20:54:33] <raxor2k> can someone explain me line 24? why is not that deleted? https://bpa.st/XELQ
[20:55:18] *** Joins: Akuli (~Akuli@82-203-160-142.bb.dnainternet.fi)
[20:55:22] <han-solo> don't mutate things you are iterating over...
[20:55:37] <raxor2k> han-solo: talking to me ?
[20:55:48] <han-solo> yes, sorry for not tagging
[20:56:09] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[20:56:17] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[20:56:22] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:56:32] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[20:56:42] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:4ad5:d907:4626:ad15)
[20:56:45] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[20:57:19] *** Joins: Samian (~Sami@user/samian)
[20:57:37] *** Quits: Mr_Bungle (~MrBungle@2604:3d08:1788:dc00:69b8:66f9:7628:dced) (Quit: Leaving)
[20:59:28] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[20:59:42] *** carbolymer_ is now known as carbolymer
[21:00:19] *** Quits: pro_z (~pro_z@37.214.40.135) (Ping timeout: 245 seconds)
[21:01:48] *** Joins: vsantana (~vsantana@177.136.149.171)
[21:02:06] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[21:02:06] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[21:02:15] *** anorthall_ is now known as anorthall
[21:04:14] <transhumanist> nm figured out that error
[21:05:37] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 252 seconds)
[21:05:51] *** Joins: twobitsprite (~twobitspr@45.134.140.18)
[21:07:24] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:4ad5:d907:4626:ad15) (Quit: No Ping reply in 180 seconds.)
[21:08:30] *** Joins: EgonX_ (~EgonX@2601:2c6:47f:9c18:d0f6:5d12:b374:4314)
[21:08:32] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:6cc8:65b2:f368:9acf) (Read error: Connection reset by peer)
[21:08:32] *** Joins: emf_ (~emf@2601:602:9400:84d:83e:973e:4aa8:d9e5)
[21:08:40] *** Quits: emf (~emf@2601:602:9400:84d:83e:973e:4aa8:d9e5) (Read error: Connection reset by peer)
[21:09:02] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:695e:6703:9467:da)
[21:09:03] <bjs> raxor2k: yes, do not mutate things while you iterate over them.
[21:09:30] <SnoopJ> transhumanist, `'name': value` is only valid inside of a dictionary literal
[21:09:30] <bjs> raxor2k: loop over a copy, or create a list of things to remove and do it afterwards,  or use some other data structure
[21:10:18] <KirkMcDonald> SnoopJ: `lambda value='name': value`
[21:10:38] *** Quits: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[21:11:41] *** Joins: Macuser (~Macuser@216.30.159.201)
[21:12:16] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[21:12:41] *** Quits: bim9262[m] (~bim9262@user/bim9262) (Ping timeout: 264 seconds)
[21:12:44] *** Joins: srhm (~srhm@user/srhm)
[21:12:58] *** Joins: bim9262[m] (~bim9262@user/bim9262)
[21:13:15] *** Parts: e3d3 (~user@2a02-a450-1c17-1-ca60-ff-fe49-35cf.fixed6.kpn.net) (Killed buffer)
[21:13:44] <bjs> raxor2k: https://bpa.st/PWOA  sometimes things just don't work.  sometimes you get errors.  always you should avoid doing it.
[21:14:25] *** Joins: sbrown (~sbrown@66.44.16.44)
[21:16:22] <SnoopJ> KirkMcDonald, touché
[21:18:10] *** Quits: jdmark2 (~jdmark@097-102-095-007.res.spectrum.com) (Quit: Leaving)
[21:18:18] *** Joins: mei (~mei@user/mei)
[21:18:40] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[21:18:50] *** Quits: legola (~legola@46.235.101.220) (Remote host closed the connection)
[21:19:42] *** Quits: canton7 (~canton7@about/csharp/canton7) (Quit: ZNC - http://znc.in)
[21:20:29] *** Joins: white_magic (~white_mag@99-46-80-123.lightspeed.irvnca.sbcglobal.net)
[21:20:39] *** Joins: greedom (~greedom@2001:16b8:2efa:2700:2511:27ba:df17:b019)
[21:20:47] <raxor2k> han-solo: no worries
[21:21:10] <raxor2k> bjs: ok thanks i try
[21:21:24] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[21:21:27] *** Joins: canton7 (canton7@about/csharp/canton7)
[21:21:51] *** Joins: Auron (~Auron956@user/auron)
[21:22:15] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[21:23:19] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:23:26] *** Quits: zepolen_ (~zepolen@2a02:587:8608:c7cb:6edd:ba46:b653:2410) (Ping timeout: 260 seconds)
[21:23:59] <raxor2k> bjs: if i have "for i in sensor_data.copy():"  instead of "for i in sensor_data:"  it works in this case. but not if i have large number of data
[21:24:02] <raxor2k> ..
[21:24:08] *** Joins: diverdud1 (~user@176-21-102-230-cable.dk.customer.tdc.net)
[21:24:24] <raxor2k> nvm
[21:24:26] <raxor2k> it does work!
[21:24:45] <diverdud1> hello. how do i replace any occurance of 2 or more connected whitespace with just 1 ','?
[21:25:18] <KirkMcDonald> diverdud1: re.sub() is probably simplest.
[21:25:42] <han-solo> raxor2k: https://docs.python.org/3/faq/programming.html#how-do-you-remove-multiple-items-from-a-list
[21:25:53] <diverdud1> KirkMcDonald: ok..how would such a regular expression look?
[21:26:20] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:26:36] <KirkMcDonald> diverdud1: r"\s{2,}"
[21:27:59] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[21:29:37] <white_magic> anyone here have tips on how to handle running python with sudo? A script I have works just find if I run it without sudo, but when running with sudo, it fails to import some dependencies. I realize that this is an issue related to resolving dependencies, so I installed the the missing one with 'sudo pip install pushover'. However, while 'import
[21:29:38] <white_magic> pushover' works in the script, 'from pushover import a,b,c' does not. Anyone have insights into this?
[21:29:38] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[21:30:22] <evidlo> I hate poetry so much
[21:31:24] *** Quits: stevea (~stevea@user/stevea) (Quit: Either I or my computer has gone to sleep. ZZZzzz…)
[21:31:48] *** Joins: georgios (~georgios@user/georgios)
[21:31:50] <evidlo> so many projects set up their devtools to work with poetry at the expense of not working with setuptools anymore
[21:31:52] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Ping timeout: 250 seconds)
[21:32:02] *** Quits: greedom (~greedom@2001:16b8:2efa:2700:2511:27ba:df17:b019) (Ping timeout: 246 seconds)
[21:32:18] <meejah> white_magic: don't ever do "sudo pip" you'll break you OS. You should use a virtualenv
[21:33:08] <SnoopJ> white_magic, `sudo pip` is generally going to make a mess and should be avoided. A virtualenv may indeed resolve your headaches.
[21:33:14] <white_magic> meejah: i like to live dangerously.. and lazily.. thankfully this env i did this on on a VPS i'm ok with discarding :D.. so umm.... that having said... 1) any way to fix my current predicament?
[21:33:33] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:5443:de21:905:f1eb)
[21:33:34] <white_magic> 2) Should I use poetry or virtualenv in the future?
[21:33:37] <SnoopJ> It sounds like you might be importing an empty namespace package with the first import.
[21:34:12] <SnoopJ> white_magic, as far as this problem is concerned, those are the same approach. Poetry will manage a virtualenv for you.
[21:34:14] <white_magic> SnoopJ: can you elaborate on that? I installed the 'pushover' pip package with sudo and was able to import it.. i thought if I can import something then it was properly installed
[21:34:16] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[21:34:44] <white_magic> By the way.. I use Conda for more important stuff :D. So it's not like I don't manage this at all.
[21:34:52] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:35:20] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 250 seconds)
[21:35:32] <SnoopJ> white_magic, if there's a .py or folder (with __init__.py) with the name 'pushover' in your sys.path ahead of wherever it should have been installed, it will import that instead.
[21:35:33] *** Joins: greedom (~greedom@i5E86B3BB.versanet.de)
[21:35:45] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:dd4c:a9e2:f994:2bc8)
[21:35:45] *** Quits: greedom (~greedom@i5E86B3BB.versanet.de) (Remote host closed the connection)
[21:36:05] <SnoopJ> You can check by doing `import pushover; print(pushover.__file__)` to see where it's actually imported that name from
[21:36:33] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[21:37:02] <raxor2k> han-solo: whats the motive behind the link ?
[21:37:12] *** Joins: henistein (~henistein@2001:8a0:fc8f:9501:83fc:76dc:ed8d:e0b3)
[21:38:38] <white_magic> SnoopJ: you know your dependencies, sir. I compared the output on sudo vs non-sudo and the sudo one outputs '/usr/local/lib/python3.8/dist-packages/pushover/__init__.py'
[21:38:49] <white_magic> whereas the non-sudo one has ..'pushover.py'
[21:39:17] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Remote host closed the connection)
[21:39:31] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[21:40:02] *** Joins: mwd5650 (~mwd5650@fwbb-192-149-255-3.inxnet.net)
[21:41:27] <SnoopJ> white_magic, if you have a local file named this, I would recommend changing its name, it's generally playing with fire to have name collisions of this sort.
[21:41:42] <white_magic> SnoopJ: I don't have a local file named that
[21:42:44] <han-solo> raxor2k: oh, the faq had a very close use case for what you had
[21:43:04] *** Joins: paul424 (~tom@ip-37-248-157-147.multi.internet.cyfrowypolsat.pl)
[21:43:23] <han-solo> so thought i'd share. rather than mutating, it's a common pattern to filter out the things you need, i think...
[21:43:32] <evidlo> and why on earth does pyproject.toml not support '-e' in pip, or console scripts?
[21:45:00] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[21:45:10] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[21:45:33] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:47:07] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.37)
[21:47:41] <paul424> Finnally I have found a book which suits my needs https://link.springer.com/book/10.1007/978-3-319-14240-1 good for teaching youngsters , I need only a cheap alternative to bring it to P(B)oland ...I see one on abebooks ... but the only cheap alternative is to bring it to Germany ...maybe my cousing there could help ... What do you think folks ?  It wouldn't be fair to use those materials on regular basis until I own the
[21:47:42] <paul424> book ... doesn't it ?
[21:48:33] *** Joins: Pickchea (~private@user/pickchea)
[21:48:59] <paul424> shipping to Poland -- 75 $ to Germany 10 $ :(
[21:49:00] *** Joins: greedom (~greedom@2001:16b8:2e0d:f300:b237:3cfd:ef44:5cfa)
[21:49:02] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[21:49:18] <raxor2k> han-solo: so i can use that instead of this ".copy"? whats the difference?
[21:49:27] <raxor2k> performance issues ?
[21:49:38] <white_magic> paul424: maybe you could buy the book and ship it to Germany.. but never ship it to yourself in Poland. Just use a downloaded version in Poland. Now you get to feel good that you bought the book :)
[21:49:44] <SnoopJ> paul424, it's hard to answer your questions, since we don't know your needs
[21:50:01] <SnoopJ> but "Think Python" is a good free book (linked in the /topic)
[21:50:14] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.37) (Client Quit)
[21:50:29] <paul424> yeah but the programming task is what I am looking for ... hmm
[21:50:36] * paul424 looks at Think Python
[21:50:56] * SnoopJ doesn't know what that means
[21:51:05] <han-solo> automate the boring stuff is good too
[21:52:40] <paul424> han-solo, have that book legally ... but that's for later course ... first the guys needs to learn variables , if else , loops etc....
[21:52:52] <paul424> han-solo, in paper :)
[21:53:26] <aphysically> I liked this Q&A (re: release stream)
[21:53:29] <paul424> s/task/excercises
[21:53:36] *** Joins: sharksauce (sharksauce@user/sharksauce)
[21:53:41] <aphysically> I wonder if mypy understands the class matching for type narrowing
[21:53:54] <han-solo> raxor2k: you can, it is easier and maybe less to read ?
[21:54:01] <han-solo> paul424: i see :)
[21:54:19] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[21:54:20] *** Joins: pycode (~pycode@93-40-5-81.ip36.fastwebnet.it)
[21:54:36] *** Joins: markb_one (~markb1@2600:1700:eb40:7ecf:b1fd:9ed5:396:a587)
[21:54:45] <bjs> han-solo: raxor2k: also note that "remove from list" and "replace with new list" are duals of each other, if one is really inefficient the other might be more efficient.  Also note that removing from a list can be relatively expensive.
[21:54:55] <raxor2k> han-solo: i mean, i just add ".copy()" after the list of dicts, i dont see the problem here
[21:54:56] *** Quits: ElPresidente (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net) (Read error: Connection reset by peer)
[21:55:06] *** Joins: jokoon (~eio@2a01:e0a:542:e160:d905:d942:5bf4:6c77)
[21:55:12] <bjs> e.g. if you are removing almost all the elements,  then producing a brand new structure is going to be more efficient than trying to remove from the old
[21:55:12] *** Joins: dulanic (~dulanic@47.187.144.163)
[21:55:16] <aphysically> it might look cleaner in code to do a bunch of isinstance checks with structural pattern matching than with a bunch of isinstance
[21:55:29] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:5443:de21:905:f1eb) (Ping timeout: 246 seconds)
[21:55:32] <jokoon> any simple way to turn a list of list into a single list?
[21:55:34] <han-solo> bjs: right
[21:55:40] <raxor2k> bjs: but the thing is, i need to temporary store it, and then remove afterwards, and then create new data again
[21:55:55] <bjs> jokoon: [x for sublist in list_of_lists for x in sublist]
[21:55:55] *** Quits: markb_one (~markb1@2600:1700:eb40:7ecf:b1fd:9ed5:396:a587) (Client Quit)
[21:55:58] <jokoon> itertools.chain
[21:56:08] <aphysically> but I'm not sure if that would be discouraged if I'm not actually capturing
[21:56:10] <han-solo> chain.from_iterable maybe
[21:56:12] <bjs> jokoon: or, itertools.chain.from_iterable if the above isn't so readable
[21:56:24] *** Joins: dman777 (~dman777@76-253-74-225.lightspeed.austtx.sbcglobal.net)
[21:56:33] <bjs> aphysically: presumably "eventually" mypy will understand it,  it's kind of the perfect feature for mypy-like tools
[21:56:40] *** Joins: Nact (~l@2a02:a03f:c0b0:f600:7ad2:b341:815d:a32e)
[21:56:40] <SnoopJ> note: both that comprehension and chain assume that there is only one layer of nesting. If you need more, look at the flatten() function in more-itertools
[21:56:45] <bjs> raxor2k: what do you mean?
[21:56:57] *** Quits: rsx (~dummy@ppp-188-174-133-177.dynamic.mnet-online.de) (Quit: rsx)
[21:56:58] <SnoopJ> oops, nevermind, flatten() also does only one level of nesting. collapse() is for multiple
[21:56:58] <dman777> https://dpaste.org/OCYe#L35 Is this function doing anything? I don't see it returning a value being used and it is not modifying the file .env. So to me, it looks like it is not doing anything
[21:56:59] <raxor2k> bjs: nothing, nvm
[21:57:39] <aphysically> bjs: yeah and in retrospect when I'm doing type narrowing in classes there's often also something I can capture too, but I need to read so I can understand how class capturing works
[21:58:05] <bjs> dman777: which function?
[21:58:11] *** Quits: extropiator (~extropiat@user/extropiator) (Ping timeout: 256 seconds)
[21:58:43] *** Joins: Karsteski (~Karsteski@209.202.222.36)
[21:58:50] <bjs> dman777: load_env_vars and unload_env_vars seem to read this .env file, and then modify the os.environ variable
[21:58:58] <bjs> (os.environ is a dictionary)
[22:00:13] *** Joins: ElPresidente (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net)
[22:00:15] *** Quits: greedom (~greedom@2001:16b8:2e0d:f300:b237:3cfd:ef44:5cfa) (Remote host closed the connection)
[22:00:28] <nedbat> dman777: more importantly, os.environ is not a dict, it's a mapping-like object that mirrors its changes into the environment of the process
[22:00:38] <bjs> aphysically: something like `case int(x): ...` is supposed to be exactly like writing `case x if isinstance(x, int): ...`
[22:00:39] *** Joins: ExeciN (~ExeciN@user/nicexe)
[22:01:03] <SnoopJ> aphysically, PEP 636 is quite good, I would recommend it highly if you haven't read it already
[22:01:18] <aphysically> yeah I'm reading right now
[22:01:29] <han-solo> are the caps part of the release ? or because of halloween month :D
[22:01:37] *** Quits: henistein (~henistein@2001:8a0:fc8f:9501:83fc:76dc:ed8d:e0b3) (Quit: Client closed)
[22:01:39] *** Joins: magla (~gelignite@55d4575c.access.ecotel.net)
[22:01:40] <han-solo> s/release/release process/
[22:01:44] *** Joins: greedom (~greedom@2001:16b8:2e0d:f300:b237:3cfd:ef44:5cfa)
[22:02:20] <SnoopJ> I think it's just celebratory :)
[22:02:25] <han-solo> ah :)
[22:04:43] *** Quits: raxor2k (~raxor2k@78.158.232.147) ()
[22:04:59] *** Quits: pycode (~pycode@93-40-5-81.ip36.fastwebnet.it) (Ping timeout: 268 seconds)
[22:04:59] *** Quits: j0k2r (~j0k2r@37.157.230.74) (Ping timeout: 256 seconds)
[22:05:41] <dman777> bjs: yes, unload_env_vars.
[22:05:51] <dman777> bjs: nedbat: thanks, makes sense
[22:08:27] <aphysically> oh okay I read the specification and that cleared up my confusions bjs
[22:08:51] *** Quits: greedom (~greedom@2001:16b8:2e0d:f300:b237:3cfd:ef44:5cfa) (Remote host closed the connection)
[22:12:00] *** Joins: vicfred (~vicfred@user/vicfred)
[22:14:30] *** Joins: fabulaztika (~oghoaglag@128.65.233.146)
[22:14:35] <aphysically> bjs: like I think perhaps the structural pattern matching might be nicer than than the isinstances here https://bpa.st/EGQQ
[22:15:44] <aphysically> perhaps even for the notimplemented part (like right now it needlessly recalls the constructor)
[22:15:59] <bjs> aphysically: probably; `case FFVersion(_version=v): ...; case str(arg): ...; case int(arg): ...; case _: ...`
[22:16:08] <bjs> aphysically: also note the int(arg) if it's an instance of int, seems a bit weird
[22:16:37] <aphysically> int() case int() is valid
[22:16:46] <aphysically> sorry "case int() is valid"
[22:16:47] *** Quits: white_magic (~white_mag@99-46-80-123.lightspeed.irvnca.sbcglobal.net) (Quit: Client closed)
[22:16:59] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[22:17:08] <bjs> aphysically: I don't think so
[22:17:37] <aphysically> it's explicit in the PEP as an example (one sec I"ll give link), but it also works for other classes
[22:17:54] <aphysically> the way it works for class matching is it's allowed to succeed if there's no subpattern, so classname() works in general
[22:18:09] <bjs> aphysically: make sure you're reading the correct PEP
[22:18:18] <bjs> and not the old that was superceded
[22:18:19] <aphysically> oh
[22:18:23] <aphysically> yes I was reading the wrong one
[22:18:25] <aphysically> :(
[22:18:41] <aphysically> good catch!
[22:19:05] * aphysically forgets everything from the last ten minutes and starts reading again
[22:19:54] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 245 seconds)
[22:20:42] <bjs> aphysically: I think `case int()` might still be valid, I forget if the builtins were special-cased to require one argument
[22:20:44] *** Quits: beterraba (~beterraba@86.107.21.205) (Ping timeout: 245 seconds)
[22:20:53] <aphysically> I'll tell you soon
[22:20:57] <aphysically> (after I finish reading the correct pep)
[22:21:02] <bjs> aphysically: https://www.python.org/dev/peps/pep-0634/#class-patterns   "If no arguments are present, the pattern succeeds if the isinstance() check succeeds. Otherwise:"
[22:21:22] <bjs> hmm I guess it will work
[22:21:26] <aphysically> so int() is fine still yeah
[22:21:56] *** Joins: SuperLag (~akulbe@user/superlag)
[22:22:42] *** Joins: beterraba (~beterraba@86.107.21.205)
[22:23:37] *** Quits: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[22:23:53] <aphysically> yes okay the class pattern matching is similar enough to the wrong PEP I was reading
[22:24:50] <aphysically> I'm guessing dataclasses still autogenerate the __match_args__
[22:25:04] <aphysically> "Namedtuples and dataclasses will have auto-generated __match_args__"
[22:25:35] <aphysically> "In addition, a systematic effort will be put into going through existing standard library classes and adding __match_args__ where it looks beneficial." cool cool
[22:26:41] *** Joins: junktext (~junktext@109.201.152.163)
[22:27:19] <aphysically> and your own (not) dataclasses should implement that as a @property I guess (assuming you want to use positional matching), but I guess you can make properties to do more interesting things!
[22:27:26] *** Quits: paul424 (~tom@ip-37-248-157-147.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[22:28:01] <bjs> aphysically: it doesn't need to be a property,  usually it'd just be a list of attribute names
[22:28:04] <bjs> probably
[22:28:14] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 245 seconds)
[22:28:44] <aphysically> yeah, I see I was thinking you returned the value and not the attribute names but I just realized it's the *names* being returned
[22:28:56] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[22:29:08] *** Joins: SuperLag (~akulbe@user/superlag)
[22:29:20] <bjs> I wish it was called `__match_attrs__` or something instead :P
[22:29:56] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 250 seconds)
[22:29:56] *** Quits: neolem[m] (~neolem@2001:470:69fc:105::c675) (Ping timeout: 250 seconds)
[22:30:07] *** Joins: djapo (~archangel@user/djapo)
[22:30:11] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:30:13] *** Joins: neolem[m] (~neolem@2001:470:69fc:105::c675)
[22:30:23] *** Joins: odoood (odoood@gateway/vpn/protonvpn/odoood)
[22:31:22] *** Joins: khrbt (~znc@user/khrbt)
[22:32:26] *** Quits: fabulaztika (~oghoaglag@128.65.233.146) (Quit: Leaving)
[22:34:41] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.37)
[22:34:42] <byte4byte> jim is python hard to learn?
[22:34:47] *** Joins: m1n10n (~r41d1n@cpe-76-184-204-251.tx.res.rr.com)
[22:35:17] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.37) (Client Quit)
[22:35:34] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[22:35:36] <aphysically> bjs: yeah, so check out https://bpa.st/V3OQ I also captured the _version attribute
[22:35:53] <aphysically> if the _verison attribute didn't exist it would go to the valueerror which is kinda cool
[22:36:00] *** Quits: Mikaela- (~mikaela-@Feneas/Mikaela-) (Ping timeout: 250 seconds)
[22:36:02] <aphysically> but it's not strictly necessary to capture it like that
[22:36:09] <aphysically> I left the non-match version in too
[22:36:51] *** Joins: Mikaela- (~mikaela-@Feneas/Mikaela-)
[22:37:05] *** Joins: maveonair (~maveonair@77-58-52-124.dclient.hispeed.ch)
[22:37:10] <aphysically> it will look nicer when the syntax highlighter supports the new keywords (the syntax highlighter is probably going to hate understanding the difference between the new keyword and a match variable)
[22:37:16] <mefistofeles> byte4byte: you didn't ask me, but I think python is fairly easy to learn
[22:37:49] <aphysically> they said in the presentation that apparently using match as a variable is totally fine, but we'll have to see if my vim will be that smart
[22:37:53] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[22:38:12] *** Joins: fabulaztika (~oghoaglag@128.65.233.146)
[22:39:12] <bjs> aphysically: these so-called "soft" keywords are fairly new
[22:39:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[22:39:35] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[22:39:38] <bjs> I think async/await used to be "soft" (e.g. you could have an `async` or `await` variable) but tools were not very happy
[22:39:38] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Remote host closed the connection)
[22:39:54] <aphysically> yeah I didn't spend a lot of time thinking about what they meant by that in the live stream
[22:40:26] <aphysically> I'm not totally against changing my "match" variable in my regex code in principle, but I also don't have a large codebase to change :P
[22:40:56] <aphysically> I could also add _version to the __match_attrs__ but not really needed
[22:41:08] *** Joins: fikran (~fikran@user/fikran)
[22:41:14] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:f5f6:654c:dc92:c571)
[22:41:32] *** Joins: timdiels (~user@78-22-205-207.access.telenet.be)
[22:41:51] <bjs> aphysically: why is it _version rather than just version anyway
[22:42:02] *** Quits: odoood (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 246 seconds)
[22:42:11] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[22:42:24] <aphysically> I was intending for only internal-to-class operations to access it
[22:42:55] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[22:43:06] <bjs> okay :)
[22:43:06] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[22:43:50] <Seirdy> Wulf, aphysically: we don't yet know if grover's algo is even feasible on quantum computers; we still don't have a clear understanding of what quantum computers are/aren't capable of.
[22:43:53] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (Ping timeout: 264 seconds)
[22:44:04] <timdiels> Hi, style question: I'm leaning towards option A, or is B preferred? https://bpa.st/IAWA
[22:44:05] *** Joins: howdoi (uid224@id-224.lymington.irccloud.com)
[22:44:07] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[22:44:15] <timdiels> The difference is assigning to an intermediate var first
[22:44:55] <bjs> timdiels: I like B,  B also has the advantage of making it easier to wrap the `ctx = ...` assignment in its own `try` or whatever
[22:44:57] <nedbat> timdiels: for B, you can name it transcript
[22:45:03] *** Quits: Haxxa (~Haxxa@122-199-44-5.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:09] <nedbat> timdiels: then line 45 can be just:  with transcript:
[22:45:15] <bjs> e.g. with open() and FileNotFound errors and the like, rather than putting the entire `with` inside the try.
[22:45:28] <aphysically> it could be a poor usage of it, I barely know what I'm doing (re _versiom)
[22:45:43] <bjs> aphysically: it sounded fine
[22:45:57] <nedbat> timdiels: what happens when exiting the context manager?
[22:46:20] *** Quits: maveonair (~maveonair@77-58-52-124.dclient.hispeed.ch) (Quit: maveonair)
[22:47:12] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:49:01] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 252 seconds)
[22:49:07] *** Joins: maveonair (~maveonair@77-58-52-124.dclient.hispeed.ch)
[22:49:24] <timdiels> nedbat: it saves the transcript (not very useful in this case) and does some post-creation logic such as creating a record of when the transcript was created
[22:49:47] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[22:50:12] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[22:50:28] <aphysically> bjs: but yeah, I *think* I like the match/case version better, it looks less busy to my eyes/I understand what's happening at a glance better
[22:50:33] <timdiels> nedbat: hmm did not know `with ctx as transcript` was the same as `transcript=ctx; with transcript`
[22:50:43] <nedbat> timdiels: that's an unusual use of a context manager. Usually they are for actions that absolutely must happen no matter what.
[22:50:52] *** Quits: BSaboia (~bsaboia@177.37.198.74) (Quit: This computer has gone to sleep)
[22:51:20] <bjs> timdiels: nedbat: you should be careful because `with a as b` is not the same as `b = a; with b`
[22:51:24] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Remote host closed the connection)
[22:51:26] <bjs> it often is, but doesn't have to be.
[22:51:27] <aphysically> I'm still reading the proper PEP, not sure I understand where the "as" keyword is useful
[22:51:38] <nedbat> bjs: tell us why it's not the same.
[22:51:42] <SnoopJ> Seirdy, making a quantum computer with a nontrivial number of bits would be a good first step. Last I'd heard, D-Wave didn't meet the standard.
[22:51:50] *** Joins: quasineutral (~quaisneut@user/quasineutral)
[22:52:02] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:52:03] <aphysically> like I could have done case int() as integer: or something, maybe if the cases are complicated then renaming the variables is better self-documenting
[22:52:10] <bjs> nedbat: because __enter__ can return something other than the context manager itself
[22:52:17] *** Joins: BSaboia (~bsaboia@177.37.198.74)
[22:52:21] <bjs> nedbat: I was trying to think of an example that does it but was struggling to think of one :s
[22:52:28] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[22:52:30] <grym> Seirdy: SnoopJ aaronson had a good talk recently: https://www.youtube.com/watch?v=QnLmGfNKCLU
[22:52:38] *** Joins: llh (~llh@user/llh)
[22:52:45] <nedbat> bjs: i see, that's true.  it's funny that it almost never happens
[22:53:16] <bjs> nedbat: I think redirect_stdout does it
[22:53:39] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 245 seconds)
[22:55:18] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[22:56:35] *** Joins: dub_a (~dub_a@2601:1c2:4e00:3b3::cb2)
[22:56:50] *** Parts: maveonair (~maveonair@77-58-52-124.dclient.hispeed.ch) (Good Bye)
[22:57:06] *** Quits: jokoon (~eio@2a01:e0a:542:e160:d905:d942:5bf4:6c77) (Quit: Leaving)
[22:57:13] <timdiels> nedbat: it keeps pre/post transcript creation logic DRY. Creating the extra record is one such step that must always happen (unless an exception was raised). Saving the transcript afterwards isn't necessary if it's already been saved but it prevents bugs where someone forgets to save it and hopefully the framework doesn't actually save anything to DB if it hasn't changed; in that case I think I'd get rid
[22:57:19] <timdiels> of the implicit save
[22:57:20] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d)
[22:57:44] *** Joins: chance (~chance@user/chance)
[22:57:47] <nedbat> timdiels: "unless an exception was raised": your context manager does different things if there was or was not an exception?
[22:57:49] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (Ping timeout: 252 seconds)
[22:57:57] <timdiels> nedbat: On the pre-creation side it creates the transcript row and a related Structure row.
[22:58:13] <timdiels> nedbat: Nono, it just doesn't handle exceptions
[22:58:25] <jinsun> bjs: importlib.resources.path also does that (as I found recently)
[22:58:36] *** Joins: roguelazer (~jbrown@sietchtabr.roguelazer.net)
[22:58:37] *** Joins: quasineutral2 (~quaisneut@user/quasineutral)
[22:58:37] *** Quits: chance (~chance@user/chance) (Client Quit)
[22:59:14] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Read error: Connection reset by peer)
[22:59:14] *** quasineutral2 is now known as quasineutral
[22:59:24] *** Quits: mwd5650 (~mwd5650@fwbb-192-149-255-3.inxnet.net) (Quit: Leaving)
[23:03:36] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d) (Remote host closed the connection)
[23:05:04] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[23:06:04] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 252 seconds)
[23:06:14] <timdiels> nedbat: anyway the gist of it is, it creates the transcript and related models, within the with context you get a chance to modify the transcript further and then it finalises the created transcript. The alternative would be passing a callback or inheriting from a class and overriding a single method; wouldn't be as elegant
[23:06:44] <aphysically> "Although str, bytes, and bytearray are usually considered sequences, they are not included in the above list and do not match sequence patterns."
[23:07:02] <aphysically> that would have been annoying
[23:07:18] *** Quits: daoudr_ (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92) (Quit: Leaving)
[23:07:23] *** Joins: fofoni (~fofoni@user/fofoni)
[23:07:30] <aphysically> it's already a bit annoying with iterable, but it's not the worst
[23:07:57] *** Joins: lalilulelo (~lalilulel@2804:14d:7680:8ed4:a957:abdc:92cd:38cb)
[23:08:01] <jinsun> yes str being Iterable[str] is annoying
[23:08:11] <grym> aphysically: flattening a list of lists of strings and also  of strings is always slightly onernous
[23:08:20] <SnoopJ> I can understand str/bytes there, at least. Would have to think about bytearray.
[23:08:29] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[23:08:47] <CrtxReavr> When I ever I see a list of lists, I assume someone used LIST.append() when they really meant to use LIST.extend()
[23:09:07] <Seirdy> grym: thanks, downloaded
[23:09:10] <aphysically> yeah grym :\
[23:09:18] *** Joins: fofoni (~fofoni@user/fofoni)
[23:09:20] <SnoopJ> There are valid reasons to nest lists
[23:09:25] *** Quits: irrgit (~irrgit@192.241.175.183) (Remote host closed the connection)
[23:09:38] *** Quits: fofoni (~fofoni@user/fofoni) (Client Quit)
[23:09:50] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 260 seconds)
[23:10:10] <sbrown> Oof, this is reminding me ... I have code with `nonstringiter` checks in a project and I need to add `bytes` to that check.
[23:10:11] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[23:10:19] <grym> aphysically: https://bpa.st/UJRA  is the most generic i've come up with
[23:10:52] <grym> fsvo "i"; iirc altendky helped
[23:10:55] <Seirdy> if you're nesting, try to see if you can make things lazy with raw generators instead
[23:10:59] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d)
[23:11:17] <grym> Seirdy: that snippet does, yes
[23:11:26] <SnoopJ> I think they are talking about making it non-recursive
[23:11:44] <SnoopJ> or may* be
[23:11:46] <Seirdy> or just use pypy. haha jit go brr...something something W^X violation
[23:11:47] *** Quits: Nact (~l@2a02:a03f:c0b0:f600:7ad2:b341:815d:a32e) (Ping timeout: 246 seconds)
[23:11:51] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[23:11:55] <grym> or not much at all :)
[23:12:25] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[23:12:39] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[23:12:54] <Seirdy> anyone caught writing a nontrivial amount of recursion in Python will receive an unexpected visit from the Spanish Inquisition
[23:13:22] <SnoopJ> the default stack limit is pretty deep, but you can never be sure how many calls there are above you when writing piece of code like that
[23:13:39] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[23:13:40] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[23:13:41] *** Joins: arinov (~arinov@31.142.12.211)
[23:13:52] <Seirdy> python's just not optimized for recursion
[23:14:11] <SnoopJ> if you're talking about TCO, no, it doesn't do it
[23:14:28] <aphysically> I wrote a disgustingly recursive renderer for a specific type of directed graph
[23:14:37] *** Joins: stevea (~stevea@user/stevea)
[23:14:56] <aphysically> the type itself was recursive :D
[23:15:04] <grym> no, bad
[23:15:07] <grym> shoo
[23:15:07] <grym> :)
[23:15:11] <Seirdy> just use the standard recursion -> while-loop transformation and add a comment that describes the recursive algorithm it's supposed to represent if this were a different language.
[23:15:16] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[23:15:32] <aphysically> there are other representations of those structures that don't need recursive typing, but it's one way to do it and the first one I wrote :P
[23:15:58] *** Quits: dld (~davidlowr@2620:6e:6000:2900:f114:5b21:6fb7:1fc1) (Ping timeout: 252 seconds)
[23:16:36] <aphysically> grym: it's not even possible in mypy yet :D https://github.com/python/mypy/issues/731
[23:16:44] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[23:16:50] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 260 seconds)
[23:16:56] <aphysically> https://bpa.st/4XQQ
[23:16:57] *** Joins: Macuser (~Macuser@216.30.159.201)
[23:16:58] <Seirdy> tail-call optimized recursive dependent types when
[23:17:01] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:17:22] <grym> Seirdy: in agda, probably 3 years ago
[23:17:23] <SnoopJ> probably never
[23:17:44] <Seirdy> p sure it was in Haskell decades ago
[23:17:49] <SnoopJ> you're not wrong
[23:17:51] *** Joins: srhm (~srhm@user/srhm)
[23:18:01] <Seirdy> k one sec imma reconnect
[23:18:06] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[23:18:12] <bjs> pretty sure Haskell/GHC doesn't even have a call stack to do TCO with :P
[23:18:14] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[23:18:19] <jinsun> oh, pyenv has 3.10 already https://github.com/pyenv/pyenv/pull/2093
[23:18:36] <aphysically> I'll just install it when my dist lands it (probably today)
[23:18:49] <justsomeguy> Seirdy: There's a weird language called ATS that supports TCO, has dependent types, and is faster than C.
[23:19:05] <bjs> jinsun: well pyenv has had the earlier beta releases too,  and it makes just "pull from tag on github" really easy
[23:19:17] <bjs> I do like pyenv, i pretty much always use it to install various python versions
[23:19:20] <SnoopJ> yea, part of what makes pyenv so great is how easy it is to add new versions :)
[23:19:37] *** Joins: Seirdy0 (~Seirdy@sourcehut/user/seirdy)
[23:19:46] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d) (Remote host closed the connection)
[23:19:50] <jinsun> yes I was using rc2 from pyenv
[23:20:00] <aphysically> I haven't used pyenv yet maybe I'll look into it
[23:20:01] <jinsun> just didn't check earlier how quickly it got those
[23:20:30] <SnoopJ> aphysically, it's nice if you want to install arbitrary versions and switch between them somewhat regularly
[23:20:38] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[23:20:43] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[23:21:21] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:21:30] *** Joins: reset (~reset@user/reset)
[23:21:38] <aphysically> variable length sequences don't support an ellipses syntax in structural pattern matching it seems
[23:21:50] <aphysically> so it's [a, b, *args] not [a, b, ...]
[23:22:17] <SnoopJ> aphysically, right, because you can't assume the latter isn't something you'd see in real data
[23:22:24] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 245 seconds)
[23:22:34] <aphysically> hmmm
[23:23:10] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d)
[23:23:14] <aphysically> oh I see what you mean
[23:23:14] *** Joins: extropiator (~extropiat@user/extropiator)
[23:23:42] <aphysically> yeah okay
[23:23:50] *** Joins: srhm (~srhm@user/srhm)
[23:25:09] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[23:25:24] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (Ping timeout: 250 seconds)
[23:26:04] *** Joins: opa (~adamitsch@212.235.180.92)
[23:28:08] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d) (Remote host closed the connection)
[23:29:08] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[23:29:09] *** Quits: magla (~gelignite@55d4575c.access.ecotel.net) (Quit: Stay safe!)
[23:29:31] <aphysically> oooo PEP 635 clears up a lot of my "why" questions
[23:29:45] <aphysically> as patterns in particular: https://www.python.org/dev/peps/pep-0635/#as-patterns
[23:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[23:30:41] *** Quits: stevea (~stevea@user/stevea) (Quit: Either I or my computer has gone to sleep. ZZZzzz…)
[23:30:49] *** Quits: y1n-v1 (~y1n@178.115.43.239.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[23:30:49] *** Quits: transhumanist (~hiken@2601:196:8800:35f0:fc76:7281:9ad5:1b15) (Ping timeout: 252 seconds)
[23:30:49] *** Quits: seednode1 (~seednode@user/seednode) (Ping timeout: 252 seconds)
[23:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[23:31:36] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[23:33:58] <Seirdy0> aphysically: if you're on linux/bsd, your distro packages probably offer multiple versions of python
[23:33:59] <aphysically> although I'm not sure the parentheses before the as are needed there
[23:34:04] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d)
[23:34:06] <Seirdy0> so there's no need for pyenv
[23:34:09] *** Seirdy0 is now known as Seirdy
[23:34:21] <aphysically> yeah it's quite easy to have multiple versions installed here (gentoo)
[23:34:33] <ChrisWarrick> many distros don’t give you choice
[23:34:36] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[23:34:43] <ChrisWarrick> many distros (looking at you debian) give you terrible packages
[23:34:45] <SnoopJ> and the ones that do are unlikely to hold a candle to what pyenv offers
[23:35:33] <SnoopJ> especially if you want [obscure configuration]
[23:35:44] <aphysically> the parentheses there might just be for clarity, I'll have to test it later
[23:35:56] *** Quits: inomoz (~inomoz@176.59.100.163) (Quit: WeeChat 3.2.1)
[23:36:02] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:36:40] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[23:37:33] <SnoopJ> or beta/rc releases, heh.
[23:37:34] <Seirdy> ChrisWarrick: most of the big ones do. i know alpine doesn't
[23:37:48] <Seirdy> SnoopJ: yeah fedora even offers betas
[23:37:49] <ChrisWarrick> Seirdy: many distros (looking at you debian) give you terrible packages
[23:38:19] <SnoopJ> Seirdy, if you don't have a use for pyenv, that's fine. But to say it has no use case is just not correct.
[23:38:23] <grym> alpine and python don't serve my interests at all, but that's becuase of where i am in the venn diagram
[23:38:26] <Seirdy> ChrisWarrick: yeah i just use backports for that
[23:38:36] <ChrisWarrick> Seirdy: backports?
[23:38:58] <Seirdy> Debian stable lets you use a backports repo for select up-to-date packages
[23:39:12] <Seirdy> when i have to run stable i backport the kernel, for instance
[23:39:23] <SnoopJ> as long as what you want is one of [restricted set for your release]
[23:39:30] <grym> Seirdy: that doesn't really address e.g., why `python3-pip` and `python3-venv` exist
[23:39:34] <ChrisWarrick> Seirdy: debian’s packages aren’t crappy because they’re old
[23:40:04] <Seirdy> grym: i wasn't talking about pip/venv, i was taking about pyenv and multiple python versions
[23:40:14] <grym> Seirdy: you were talking about debian's packaging
[23:40:26] <NoImNotNineVolt> debian's packages are crappy because they have heavyhanded maintainers that favor a foolish consistency.
[23:40:43] <Seirdy> grym: i was only talking about that in the context of installing a python interpreter/stdlib
[23:40:57] <grym> this has been rehashed enough though, so i'll wait for the conversation to shift :)
[23:41:26] <SnoopJ> as far as Debian is concerned, you should avoid installing multiple versions even if the package manager seems like it might let you; they share dist-packages
[23:41:41] <Seirdy> i just use venvs
[23:41:58] <Seirdy> wait
[23:41:59] <SnoopJ> that does not resolve the problem I just described
[23:42:01] <NoImNotNineVolt> i recently used pyenv for the first time and i gotta say it's pretty awesome.
[23:42:05] <Seirdy> ah you're talking about the stdlib
[23:42:22] <Seirdy> yeah debian has that issue; i'd use pyenv on debian
[23:42:29] <Seirdy> but on something like fedora there's no need
[23:42:34] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[23:42:38] <SnoopJ> You do keep saying that.
[23:42:45] <NoImNotNineVolt> but it's just so easy
[23:42:55] <NoImNotNineVolt> whether or not there's a strict "need" is irrelevant in my review.
[23:42:58] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[23:43:01] <Seirdy> just dnf install python3.9, dnf install python3.10, same for python3.8, etc.
[23:43:06] <NoImNotNineVolt> pyenv makes things really easy, without being obtuse and annoying.
[23:43:06] *** Quits: timdiels (~user@78-22-205-207.access.telenet.be) (Quit: Thanks)
[23:43:20] <Seirdy> so you don't have to learn a new tool
[23:43:27] <NoImNotNineVolt> Seirdy: and then i gotta explicitly run the right one? forget that.
[23:43:29] <Seirdy> it's the same as any other project
[23:43:39] <SnoopJ> What's there to learn? It's some bash on top of what you'd do if you built it yourself, and some shims to help select versions.
[23:43:45] <NoImNotNineVolt> Seirdy: i think you're dramatically overstating things with "learn a new tool".
[23:43:50] <Seirdy> NoImNotNineVolt: i mean you should be running all of them automatically in your tests, right?
[23:43:57] *** Joins: zepolen_ (~zepolen@2a02:587:8608:c7cb:e583:aa7f:f9c7:8eb0)
[23:43:58] <NoImNotNineVolt> i'm hostile towards adopting new tooling myself, and i resisted pyenv for the longest time.
[23:44:02] <NoImNotNineVolt> then i tried it and now i feel stupid.
[23:44:26] <NoImNotNineVolt> Seirdy: explicitly? no, i don't hardcode absolute python paths in my tests.
[23:44:27] <NoImNotNineVolt> i don't get it.
[23:44:31] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed)
[23:44:33] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[23:45:06] <bob_x2> how come loops now have else statement ?
[23:45:11] <Seirdy> i typically run my tests against multiple py versions and dep versions automatically
[23:45:11] <bob_x2> what ? )
[23:45:14] <Seirdy> bob_x2: they always did
[23:45:22] <bob_x2> Seirdy: im new to pyton
[23:45:32] <bob_x2> *python
[23:45:38] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[23:46:10] <Seirdy> bob_x2: official docs: https://docs.python.org/3/tutorial/controlflow.html
[23:46:14] <aphysically> re:stream discussion right now -> yeah preserving git blame is a barrier to cosmetic restructuring of a codebase
[23:46:26] <SnoopJ> bob_x2, because it's sometimes useful to know when the loop finishes without passing through a `break`
[23:46:26] <NoImNotNineVolt> Seirdy: so you just use .tox/appropriate_version/bin/python to run in prod?
[23:46:31] <bob_x2> im reading it Seirdy right now. and met this property of the language
[23:47:07] <SnoopJ> bob_x2, i.e. you might want to execute some code *only* when you iterate over the entire iterable
[23:47:26] <bob_x2> yes at the end of processing the list
[23:47:40] <SnoopJ> it's not a very good name
[23:47:55] <bob_x2> list vs iterable ?
[23:48:28] <SnoopJ> bob_x2, an iterable is any object that can be iterated. A list is a specific type of iterable, but there are others (like tuples, dicts, strings, etc.)
[23:49:30] <Seirdy> NoImNotNineVolt: i used to just create a venv with a given py version for tox and run them in parallel, but now i use the same setup in any lang (go, python, shell {dash, bash, zsh, ksh}) for testing with multiple interpreters/compilers: i just have files with envvars i source to change my PATHS and whatnot. the latter approach is less simple but it gives me the same workflow for any project
[23:49:54] *** Quits: opa (~adamitsch@212.235.180.92) (Ping timeout: 245 seconds)
[23:49:55] <bob_x2> SnoopJ: yes remember that from the page of stdtypes . a specific function should be implemented in order to become object iterable
[23:49:57] * SnoopJ uses direnv to automate that
[23:50:09] <Seirdy> the only thing i use a different setup for is C toolchains where i use chroots
[23:51:14] <Seirdy> then i can test with musl/glibc and x86_64/x86/aarch64/armv7/etc
[23:51:21] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[23:51:35] <Seirdy> i used to use a vm but now i just use a rbpi
[23:51:40] <Seirdy> for testing ARM
[23:51:41] * SnoopJ glances at the /topic
[23:51:44] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[23:52:37] <Seirdy> TLDR: i use envvars to customize paths when testing multiple python interpreters because that approach works for everything else short of cross-compiling with c toolchains.
[23:52:39] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:695e:6703:9467:da) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:53:08] <Seirdy> also works for testing with pypy, if appropriate ;)
[23:54:28] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d) (Remote host closed the connection)
[23:54:44] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[23:55:35] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[23:55:51] *** Joins: iomari891 (~iomari891@105.112.138.38)
[23:56:33] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d)
[23:57:55] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[23:58:28] *** Quits: iomari891 (~iomari891@105.112.138.38) (Client Quit)
[23:59:28] * SnoopJ prefers to point directly to the relevant interpreter
[23:59:41] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (Ping timeout: 268 seconds)
