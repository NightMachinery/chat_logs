[00:00:49] *** Joins: mud (~mud@user/kadoban)
[00:02:23] *** Joins: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net)
[00:03:25] *** Quits: shtirlic (~shtirlic@pppoe.178-66-71-116.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[00:04:46] *** Quits: mud (~mud@user/kadoban) (Remote host closed the connection)
[00:06:59] *** Quits: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net) (Ping timeout: 256 seconds)
[00:07:08] *** Joins: independent56 (~independe@95.144.246.96)
[00:07:44] *** Joins: ryu_ (~ryusaku@c6A334BC1.dhcp.as2116.net)
[00:07:44] *** Quits: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net) (Ping timeout: 250 seconds)
[00:08:33] *** Joins: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net)
[00:08:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[00:11:08] *** Joins: fikran (~fikran@user/fikran)
[00:11:20] *** Joins: jjonah (~jjonah@p200300d5d731f200dea632fffeb3342f.dip0.t-ipconnect.de)
[00:11:57] *** Quits: ryu_ (~ryusaku@c6A334BC1.dhcp.as2116.net) (Ping timeout: 240 seconds)
[00:12:24] <twaapo> foobaz: yeah i know for elements
[00:14:43] <fizzie> "The map's key type must either be a string, an integer type, or implement encoding.TextMarshaler." (From "encoding/json".)
[00:15:47] <fizzie> (Strings are used as-is, types implementing encoding.TextMarshaler are -- unsurprisingly -- marshaled, and integer keys are converted to strings.)
[00:17:33] *** Joins: tebruno99 (~tebruno99@user/tebruno99)
[00:19:35] *** Joins: bluedust (~bluedust@117.207.236.117)
[00:23:20] *** Quits: bluedust_ (~bluedust@37.120.198.153) (Ping timeout: 250 seconds)
[00:27:49] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[00:27:51] *** Joins: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net)
[00:30:25] *** Joins: bluedust_ (~bluedust@194.37.96.121)
[00:30:38] *** Joins: souvik (~souvik@103.59.72.92)
[00:30:39] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[00:31:26] *** Quits: bluedust (~bluedust@117.207.236.117) (Read error: Connection reset by peer)
[00:32:00] *** Joins: bluedust (~bluedust@117.207.236.117)
[00:32:43] *** Joins: mickey88 (~user@user/mickey)
[00:33:42] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f88f-2373-82c9-cc32.res6.spectrum.com)
[00:35:43] *** Quits: souvik (~souvik@103.59.72.92) (Ping timeout: 256 seconds)
[00:35:45] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[00:35:45] *** mickey88 is now known as mickey8
[00:35:54] *** Quits: bluedust_ (~bluedust@194.37.96.121) (Ping timeout: 250 seconds)
[00:36:17] *** Quits: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net) (Ping timeout: 256 seconds)
[00:37:30] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[00:40:40] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[00:41:37] *** Quits: effprime (~effprime@user/effprime) (Ping timeout: 240 seconds)
[00:41:58] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 250 seconds)
[00:42:18] *** Joins: effprime (~effprime@user/effprime)
[00:46:46] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[00:47:55] *** Joins: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net)
[00:48:22] *** Joins: shtirlic (~shtirlic@pppoe.178-66-71-116.dynamic.avangarddsl.ru)
[00:48:40] *** Joins: noarb (~noarb@user/noarb)
[00:52:47] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[00:53:11] *** Joins: shka (~herr@109.231.0.226)
[01:02:05] <twaapo> i replaced MarshalJSON on my keytype with MarshalText and it is working
[01:02:14] <twaapo> funny its even same signature
[01:08:40] <rewt> https://pkg.go.dev/encoding/json: "If no MarshalJSON method is present but the value implements encoding.TextMarshaler instead, Marshal calls its MarshalText method and encodes the result as a JSON string."
[01:09:47] <fizzie> Doesn't apply to map keys. Because of course it wouldn't make sense.
[01:13:05] *** Joins: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it)
[01:18:48] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[01:20:39] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:27:40] *** Quits: bluedust (~bluedust@117.207.236.117) (Remote host closed the connection)
[01:34:22] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:37:05] *** Quits: dansan_ (~daniel@75.81.148.51) (Ping timeout: 256 seconds)
[01:38:20] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f88f-2373-82c9-cc32.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:45:07] *** Joins: dansan (~daniel@75.81.148.51)
[01:51:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[01:56:50] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[01:59:35] *** Quits: bsund (~bsund@user/bsund) (Ping timeout: 256 seconds)
[02:01:37] *** Quits: neverwas (jpneverwas@swissbox.unperson.link) (Ping timeout: 240 seconds)
[02:04:37] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 240 seconds)
[02:09:58] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:14:27] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[02:14:44] *** Quits: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it) (Quit: Leaving)
[02:18:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[02:18:35] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[02:20:29] *** Joins: fikran (~fikran@user/fikran)
[02:25:54] *** Joins: clydez (~clydez@178-116-34-81.access.telenet.be)
[02:26:00] <clydez> exit
[02:26:10] *** Parts: clydez (~clydez@178-116-34-81.access.telenet.be) ()
[02:31:36] *** Joins: souvik (~souvik@103.59.72.92)
[02:31:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:33:12] *** Quits: monoxane (~monoxane@user/monoxane) (Quit: Ping timeout (120 seconds))
[02:33:39] *** Joins: monoxane (~monoxane@user/monoxane)
[02:34:53] *** Joins: jla (~jordi@64.225.79.195)
[02:36:35] *** Quits: souvik (~souvik@103.59.72.92) (Ping timeout: 256 seconds)
[02:38:28] *** Joins: shtirlic_ (~shtirlic@pppoe.178-66-71-116.dynamic.avangarddsl.ru)
[02:41:59] *** Quits: shtirlic (~shtirlic@pppoe.178-66-71-116.dynamic.avangarddsl.ru) (Ping timeout: 252 seconds)
[02:44:47] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Remote host closed the connection)
[02:47:09] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:47:53] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:47:55] *** Quits: vj--_ (~vj@bras-base-toroon3514w-grc-63-174-89-63-91.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:55:13] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[02:55:16] *** Quits: independent56 (~independe@95.144.246.96) (Quit: Leaving)
[03:02:22] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[03:03:18] *** Joins: independent56 (~independe@95.144.246.96)
[03:09:49] *** Quits: jjonah (~jjonah@p200300d5d731f200dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:11:04] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:15:45] *** Joins: neverwas (jpneverwas@swissbox.unperson.link)
[03:26:38] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 250 seconds)
[03:28:26] *** Joins: bluedust (~bluedust@117.207.236.117)
[03:29:38] *** Joins: leonarth_ (~leonarth@user/leonarth)
[03:31:33] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[03:32:16] *** Quits: leonarth (~leonarth@user/leonarth) (Ping timeout: 250 seconds)
[03:33:34] *** Joins: jespada (~jespada@87.74.36.188)
[03:33:39] *** Quits: bluedust (~bluedust@117.207.236.117) (Ping timeout: 256 seconds)
[03:34:37] *** Joins: neurocyte091709 (~neurocyte@IP-212232084012.dynamic.medianet-world.de)
[03:34:37] *** Quits: neurocyte091709 (~neurocyte@IP-212232084012.dynamic.medianet-world.de) (Changing host)
[03:34:37] *** Joins: neurocyte091709 (~neurocyte@user/neurocyte)
[03:34:53] *** Joins: mrh (~mrh@c-67-161-88-249.hsd1.wa.comcast.net)
[03:35:49] *** Joins: leonarth (~leonarth@user/leonarth)
[03:36:36] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[03:37:11] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:37:37] *** Quits: leonarth_ (~leonarth@user/leonarth) (Ping timeout: 256 seconds)
[03:45:24] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[03:49:56] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 245 seconds)
[03:51:36] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:55:16] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[03:57:25] *** Joins: EdFletcher (~PKD@user/edfletcher)
[04:02:53] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[04:03:07] *** Quits: independent56 (~independe@95.144.246.96) (Ping timeout: 256 seconds)
[04:03:23] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[04:13:29] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 256 seconds)
[04:15:44] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[04:16:29] *** Quits: connor_goodwolf_ (~connor@user/connor-goodwolf/x-2615606) (Quit: ZNC - https://znc.in)
[04:17:27] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[04:20:55] *** Joins: mud (~mud@user/kadoban)
[04:21:27] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[04:22:24] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[04:27:44] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[04:29:50] *** Joins: fikran (~fikran@user/fikran)
[04:31:46] *** Joins: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net)
[04:32:06] <dandaman> going through the tour right now… slices are weird. Can anyone help me rationalize this behavior? https://gist.github.com/dsauerbrun/c8501da24e3943077f0e89d9496310d8
[04:32:32] *** Joins: souvik (~souvik@103.59.72.92)
[04:32:36] <dandaman> so like, if you try to slice a slice beyond it's capacity but the underlying array has the capacity you just create a new slice?
[04:33:04] <dandaman> create a new slice FROM the underlying array that is
[04:33:11] <dandaman> but if that slice has the capacity(lines 1-3) you just slice the slice?
[04:34:00] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[04:34:13] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[04:36:46] <b0nn> dandaman: capacity refers to how much spece between the start of the slice (on the backing array) and the rest of the space allocated for that backing array
[04:37:17] *** Quits: souvik (~souvik@103.59.72.92) (Ping timeout: 256 seconds)
[04:37:43] <b0nn> so, if a backing array is allocate to 10 items, and the slice you have starts at position 1 (or backing array[0]!) then your slice has a capacity of 10
[04:39:30] <dandaman> i understand the idea of capacity, the behavior i've encountered in my gist seems confusing though
[04:39:32] <b0nn> but, if your slice starts at position 10 (backing array[9]( then your slice has zero capacity
[04:39:35] <b0nn> yy
[04:39:54] <dandaman> i feel like line 9 should throw an error or line 3 should be [2 3 5 7]
[04:41:29] <b0nn> line 8 is a zero length array, but the capacity hasn't changed
[04:41:40] <b0nn> er, zero length slice
[04:42:04] <b0nn> line 3 is referring to the new slice created at line 2
[04:42:28] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 250 seconds)
[04:42:39] <b0nn> line 9 is referring to the slice created at line 8 WITH data from the backing array populated in line 7
[04:43:04] <dandaman> b0nn: why is line 3 slicing from line 2, whereas line 9 is slicing from line 7
[04:43:06] <b0nn> line 2 you move the start of the slice to the second element of the backing array
[04:43:46] <b0nn> in 8 you say "my slice has zeron lenth but still starts at backing array[0]
[04:43:53] <fizzie> dandaman: Line 9 is not slicing "from line 7", it's just that you're allowed to reslice up to the capacity, not up to the length.
[04:44:24] <b0nn> line 9 says "use the starting point of the slice in line 8, then use the data still in the backing array
[04:45:09] <dandaman> hmm ok, i think i'm kind of starting to understand
[04:45:22] <fizzie> After line 8, `s` will have a length of 0 but still a capacity of 6. So line 9's `s = s[:4]` will just reset the length to 4.
[04:45:25] <b0nn> A slice is merely a view on what's in the backing array
[04:45:45] <dandaman> is there an article or doc that goes into depth here that'll help me get a deeper understanding?
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:33] <dandaman> i can just google obviously but would like to get a rec from you guys since i'm new to go and don't wanna end up reading garbage that misleads me
[04:46:35] <fizzie> There's an ancient blog post. :) https://go.dev/blog/slices-intro -- it probably doesn't have that much content over the tour, but it has the usual boxes-and-arrows plots.
[04:47:08] <b0nn> There's a nice "wut" video https://www.youtube.com/watch?v=U_qVSHYgVSE
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:41] <b0nn> 13 minutes is where he starts on the slice stuff in earnest
[04:48:53] <gjvc> https://www.washingtonpost.com/national-security/china-harvests-masses-of-data-on-western-targets-documents-show/2021/12/31/3981ce9c
[04:48:58] <gjvc> oops
[04:49:02] <gjvc> wrong channel, sorry
[04:49:13] *** Joins: itsalexjones_ (~itsalexjo@82.4.99.241)
[04:52:35] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Ping timeout: 256 seconds)
[04:54:29] *** Joins: Guest93 (~Guest93@2a02:6ea0:c112::2)
[04:59:32] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Read error: Connection reset by peer)
[04:59:32] *** Quits: hhes (sid420846@id-420846.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[05:00:20] *** Joins: syg_ (sid521913@id-521913.lymington.irccloud.com)
[05:00:21] *** Joins: jzelinskie_ (sid17772@user/jzelinskie)
[05:00:23] *** Joins: xoebus_ (sid61319@id-61319.uxbridge.irccloud.com)
[05:00:24] *** Joins: hhes (sid420846@id-420846.ilkley.irccloud.com)
[05:00:24] *** Joins: dreamcat4_ (uid157427@id-157427.hampstead.irccloud.com)
[05:00:25] *** Joins: decartes_ (sid240036@id-240036.helmsley.irccloud.com)
[05:00:32] *** Joins: psb___ (sid500598@id-500598.ilkley.irccloud.com)
[05:00:32] *** Joins: isnessness (~ugjka@ugjka.net)
[05:00:59] *** Joins: mncheckm (~mncheck@193.224.205.254)
[05:01:01] *** Joins: Thedarkb2-Work (~Thedarkb@62.232.253.82)
[05:01:46] *** Joins: caverton5 (~caverton@ercro.tech)
[05:01:48] *** Joins: znpy5 (~znpy@user/znpy)
[05:01:53] *** Joins: misuto5 (~misuto@h-155-4-73-21.A192.priv.bahnhof.se)
[05:02:12] *** Joins: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75)
[05:02:22] *** Joins: nemesis_ (~nem@user/nemesis91)
[05:02:29] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[05:02:43] *** Joins: Latrina_ (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net)
[05:02:43] *** Joins: Rhvs (Rhys@help.lux.melted.me)
[05:02:44] *** Joins: chder_ (~chder@user/chder)
[05:02:45] *** Joins: riverdc (~river@li1196-30.members.linode.com)
[05:02:54] *** Joins: jsanford_ (~jsanford@lax.froop.com)
[05:03:24] *** Joins: franitor_ (~frank@user/franitor)
[05:03:28] *** Joins: glats_ (~glats@45.77.73.141)
[05:03:32] *** Joins: OnkelUlla (~uol@ptx.hi.pengutronix.de)
[05:03:33] *** Joins: k0ta_ (3da8335bb9@2604:bf00:561:2000::10a)
[05:03:34] *** Joins: pyzozord- (pyzozord@user/pyzozord)
[05:03:35] *** Joins: dale_ (dale@user/dale)
[05:04:06] *** Joins: Arsen_ (arsen@managarm/dev/Arsen)
[05:04:24] *** Joins: longsleep (~quassel@2a02:c207:3001:216:1000::1)
[05:04:44] *** Joins: skeels_ (21030cf582@2604:bf00:561:2000::237)
[05:05:03] *** Joins: karl_ (~Karlssel@2001:41d0:8:9a4b::1)
[05:05:05] *** Joins: welt_ (~welt@willow.spiderden.net)
[05:05:08] *** Quits: halden (~halden@lden.im) (Read error: Connection reset by peer)
[05:05:14] *** Joins: kodah- (~kodah@user/kodah)
[05:05:19] *** Joins: topor1 (~kulak@user/kulak)
[05:05:24] *** Joins: halden (~halden@lden.im)
[05:05:30] *** Joins: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[05:07:40] *** Quits: lilgopher (~textual@2601:241:8000:38f0:6136:22f1:e13c:95aa) (Quit: Textual IRC Client: www.textualapp.com)
[05:08:37] *** Joins: n1000_ (~n1000@user/n1000)
[05:08:38] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:08:44] *** Joins: j416_ (~j416@user/j416)
[05:08:50] *** Joins: dshoreman (~ds@user/ds)
[05:08:50] *** Joins: daved_ (~daved@162.67.197.35.bc.googleusercontent.com)
[05:09:04] *** Quits: teocle (~t@hex.plasm.in) (Ping timeout: 240 seconds)
[05:09:04] *** Quits: syg (sid521913@id-521913.lymington.irccloud.com) (Ping timeout: 240 seconds)
[05:09:04] *** Quits: decartes (sid240036@id-240036.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** syg_ is now known as syg
[05:09:05] *** Quits: psb__ (sid500598@id-500598.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: xoebus (sid61319@id-61319.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: jzelinskie (sid17772@user/jzelinskie) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: chder (~chder@user/chder) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: reenix- (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: k0ta (3da8335bb9@2604:bf00:561:2000::10a) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: dale (dale@user/dale) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: nemesis91 (~nem@user/nemesis91) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: jsanford (~jsanford@user/jsanford) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: OnkelUll1 (~uol@ptx.hi.pengutronix.de) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: epony (~epony@user/epony) (Ping timeout: 240 seconds)
[05:09:05] *** jzelinskie_ is now known as jzelinskie
[05:09:05] *** Quits: glats (~glats@45.77.73.141) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: franitor (~frank@user/franitor) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: pyzozord (pyzozord@user/pyzozord) (Ping timeout: 240 seconds)
[05:09:05] *** decartes_ is now known as decartes
[05:09:06] *** Quits: kulak1 (~kulak@user/kulak) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: tpr1 (~tpr@user/tpr) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: kodah` (~kodah@user/kodah) (Ping timeout: 240 seconds)
[05:09:06] *** dreamcat4_ is now known as dreamcat4
[05:09:06] *** Quits: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: yodajelly (~p@2001:470:69fc:105::1:e8) (Ping timeout: 240 seconds)
[05:09:06] *** k0ta_ is now known as k0ta
[05:09:06] *** dale_ is now known as dale
[05:09:06] *** Quits: ds (~ds@user/ds) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: welt (~welt@willow.spiderden.net) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: 068AAC0VA (Rhys@help.lux.melted.me) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: znpy (~znpy@user/znpy) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: n1000 (~n1000@user/n1000) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: daved (~daved@162.67.197.35.bc.googleusercontent.com) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: Arsen (arsen@managarm/dev/Arsen) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: longsleep_ (~quassel@2a02:c207:3001:216:1000::1) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: riverdc_ (river@2600:3c01::f03c:92ff:fed1:4643) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: Latrina (~Latrina@user/latrina) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: ugjka (~ugjka@ugjka.net) (Ping timeout: 240 seconds)
[05:09:07] *** isnessness is now known as ugjka
[05:09:07] *** Quits: Thedarkb1-Work (~Thedarkb@62.232.253.82) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: mncheck (~mncheck@193.224.205.254) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: karl (~Karlssel@2001:41d0:8:9a4b::1) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: skeels (21030cf582@2604:bf00:561:2000::237) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: misuto (~misuto@h-155-4-73-21.A192.priv.bahnhof.se) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: sudden (~cat@user/sudden) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: caverton (~caverton@ercro.tech) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: j416 (~j416@user/j416) (Ping timeout: 240 seconds)
[05:09:07] *** znpy5 is now known as znpy
[05:09:07] *** xoebus_ is now known as xoebus
[05:09:07] *** j416_ is now known as j416
[05:09:07] *** caverton5 is now known as caverton
[05:09:07] *** misuto5 is now known as misuto
[05:09:08] *** skeels_ is now known as skeels
[05:09:08] *** Rhvs is now known as Rhys
[05:10:01] *** Joins: epony (~epony@user/epony)
[05:11:41] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Ping timeout: 256 seconds)
[05:11:42] *** Joins: krux02 (~krux02@p4fe57b40.dip0.t-ipconnect.de)
[05:12:15] *** Quits: Sam (b8f15a4bbd@golang/sam) (Ping timeout: 256 seconds)
[05:12:26] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[05:13:14] *** Quits: krux02_ (~krux02@p50822dd2.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:14:01] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[05:14:36] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[05:15:49] *** Joins: tpr1 (~tpr@user/tpr)
[05:16:26] *** Joins: SuperLag (~akulbe@user/superlag)
[05:18:42] *** dshoreman is now known as ds
[05:19:11] *** Joins: yodajelly (~p@2001:470:69fc:105::1:e8)
[05:19:34] *** Joins: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb)
[05:19:54] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[05:26:02] *** Joins: leonarth__ (~leonarth@user/leonarth)
[05:27:09] *** Quits: leonarth (~leonarth@user/leonarth) (Ping timeout: 256 seconds)
[05:29:21] *** Quits: leonarth__ (~leonarth@user/leonarth) (Client Quit)
[05:30:15] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[05:33:55] *** Joins: arinov (~arinov@213.194.126.155)
[05:34:33] *** Joins: lilgopher (~textual@2601:241:8000:38f0:5d45:e308:af09:d1d6)
[05:35:49] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[05:36:01] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[05:39:20] *** Joins: califax- (~califax@user/califx)
[05:43:00] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:43:01] *** califax- is now known as califax
[05:44:04] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[05:44:18] *** Joins: califax (~califax@user/califx)
[05:45:25] *** Quits: Guest93 (~Guest93@2a02:6ea0:c112::2) (Quit: Client closed)
[05:47:32] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 240 seconds)
[05:48:34] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:52:40] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Ping timeout: 250 seconds)
[05:55:43] *** Joins: neurocyte0917099 (~neurocyte@IP-185189140032.dynamic.medianet-world.de)
[05:55:44] *** Quits: neurocyte0917099 (~neurocyte@IP-185189140032.dynamic.medianet-world.de) (Changing host)
[05:55:44] *** Joins: neurocyte0917099 (~neurocyte@user/neurocyte)
[05:57:37] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[05:57:37] *** neurocyte0917099 is now known as neurocyte091709
[05:59:56] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:03:42] <dandaman> holy shit, the way append works is absolutely bananas… https://gist.github.com/dsauerbrun/ccdd0919c35caf217e24786e8158198d
[06:03:48] <dandaman> this is insanely unintuitive
[06:06:57] <fizzie> It may be unintuitive, but it's not a particularly complicated rule. `append(s, t...)` will modify the original backing array if and only if cap(s) >= len(s) + len(t); otherwise it will allocate a new one and leave it untouched.
[06:08:55] <dandaman> yeah, i understand it because i have a good understanding of how memory works, but what % of software devs understand why that's the case? seems like a good set up for a junior dev to cause chaos
[06:09:41] <fizzie> Typical patterns for using append tend to be not particularly troublesome. For example, probably the most common one is building a new slice, which you tend to do with `var s []T; for { ...; s = append(s, x) }`, and the behavior of append makes that do the one reasonable thing.
[06:10:09] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[06:10:29] <fizzie> Anyway, I've gotten sufficiently used to it I'm probably too biased.
[06:11:32] <fizzie> It does mean you have to be careful about what slices point at, but that's kind of unavoidable in any system that lets you do "views" of shared data.
[06:17:24] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[06:19:50] <dandaman> fizzie: yeah you're probably right about getting used to it… there are definitely quirks in JS that i look at as "whatever, it's not a difficult thing to remember" that other people probably deem as absolutely unintuitive
[06:19:58] *** Quits: itsalexjones_ (~itsalexjo@82.4.99.241) (Ping timeout: 250 seconds)
[06:20:10] <dandaman> lexical scoping vs function scoping stands out as an example
[06:20:42] <fizzie> I learned (from Twitter) recently that [1,2,3] + [4,5,6] in JS is the string "1,2,34,5,6".
[06:21:48] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[06:23:53] <dandaman> lol, that's news to me and probably gets filed under "Why on earth would you ever do that or expect it to work the way you think it does"
[06:24:15] <dandaman> but yeah… it should throw some sort of error at the very least
[06:24:57] <dandaman> JS is probably the hardest one to master given all it's stupid quirks… amazing that it's the most popular for new devs lol
[06:31:58] *** Joins: souvik (~souvik@103.59.72.92)
[06:32:21] *** Joins: zunino (~zunino@189.27.223.108.dynamic.adsl.gvt.net.br)
[06:34:56] *** Joins: norbinaa (~be3uykpy@2a00:a040:19a:b060:b441:7875:2785:6006)
[06:36:32] *** Quits: souvik (~souvik@103.59.72.92) (Ping timeout: 240 seconds)
[06:36:39] *** Joins: rolo (~rolo@2a02:8108:8d80:7aa4:b905:8a27:e316:18ec)
[06:37:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[06:37:51] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:b441:7875:2785:6006) (Ping timeout: 245 seconds)
[06:39:11] *** Joins: fikran (~fikran@user/fikran)
[06:40:49] *** Quits: rolo (~rolo@2a02:8108:8d80:7aa4:b905:8a27:e316:18ec) (Client Quit)
[06:42:31] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[06:45:28] *** Quits: AndrewYu (andrew@user/andrewyu) (Changing host)
[06:45:28] *** Joins: AndrewYu (andrew@andrewyu.org)
[07:00:07] <seebs> the way append works might be a bit unintuitive, but it's relatively simple, it's documented, and unless you're already doing something weird, you can't *tell*.
[07:02:53] *** Quits: mud (~mud@user/kadoban) (Remote host closed the connection)
[07:04:37] <foobaz> the weird behavior of append() is classic worse-is-better design
[07:04:49] <foobaz> appropriate for a language so heavily inspired by C and UNIX
[07:09:00] <dandaman> worse-is-better?
[07:11:51] *** Joins: amigan (dramoray@dtvax.dynatron.me)
[07:12:59] *** Quits: zunino (~zunino@189.27.223.108.dynamic.adsl.gvt.net.br) (Quit: WeeChat 3.0.1)
[07:14:32] *** Joins: anandn (~anandn@2601:600:a27f:d92d:557:2ccd:32e:85fe)
[07:20:13] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[07:24:37] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 240 seconds)
[07:24:51] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[07:25:54] *** Joins: mud (~mud@user/kadoban)
[07:30:07] <foobaz> dandaman: https://www.dreamsongs.com/RiseOfWorseIsBetter.html
[07:30:45] *** Joins: bluedust (~bluedust@117.207.236.117)
[07:33:17] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[07:35:22] *** Quits: bluedust (~bluedust@117.207.236.117) (Ping timeout: 250 seconds)
[07:50:07] *** Joins: fling (~fling@user/fling)
[07:55:58] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:12:34] *** Quits: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net) (Quit: Leaving.)
[08:13:56] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 250 seconds)
[08:14:40] *** Joins: darkapex (~darkapex@user/darkapex)
[08:18:17] *** Joins: bluedust (~bluedust@117.207.236.117)
[08:18:48] *** Joins: bluedust_ (~bluedust@185.248.85.41)
[08:19:11] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:22:32] *** Quits: bluedust (~bluedust@117.207.236.117) (Ping timeout: 240 seconds)
[08:30:29] *** Joins: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net)
[08:30:45] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[08:34:34] *** Joins: darkapex_ (~darkapex@user/darkapex)
[08:35:17] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[08:38:22] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[08:38:57] *** Quits: adip (~adip@aedr186.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[08:45:07] *** Joins: jonconley (libera@173.215.81.77)
[08:46:24] *** Quits: jonconley (libera@173.215.81.77) (Remote host closed the connection)
[08:46:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[08:48:06] *** Quits: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net) (Read error: Connection reset by peer)
[08:48:32] *** Joins: fikran (~fikran@user/fikran)
[08:49:14] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[08:49:50] *** Joins: mickey87 (~user@user/mickey)
[08:50:51] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[08:50:52] *** mickey87 is now known as mickey8
[08:51:15] *** Joins: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net)
[08:56:04] *** Quits: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net) (Quit: Leaving.)
[09:06:27] *** coc0nut_ is now known as coc0nut
[09:08:23] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[09:08:38] *** Joins: krux02_ (~krux02@p4fe57ecb.dip0.t-ipconnect.de)
[09:09:51] *** Quits: krux02 (~krux02@p4fe57b40.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[09:12:52] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 250 seconds)
[09:15:58] *** Joins: fef (~thedawn@user/thedawn)
[09:22:47] *** Joins: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net)
[09:22:47] *** Quits: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net) (Changing host)
[09:22:47] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[09:24:23] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[09:39:04] *** Joins: adip (~adip@aedr186.neoplus.adsl.tpnet.pl)
[09:58:22] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[10:05:19] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:07:57] *** Quits: lilgopher (~textual@2601:241:8000:38f0:5d45:e308:af09:d1d6) (Remote host closed the connection)
[10:09:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[10:16:59] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[10:23:02] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 240 seconds)
[10:39:58] *** Joins: crashrep (~crashrep@user/crashrep)
[10:46:28] *** Quits: sailorTheCat (~sailorCat@mail2.gajsin.name) (Quit: ZNC 1.8.2 - https://znc.in)
[10:46:43] *** Joins: sailorCat (~sailorCat@mail2.gajsin.name)
[10:47:31] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:51:40] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Quit: leaving)
[10:51:48] *** Joins: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net)
[10:51:49] *** Quits: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net) (Changing host)
[10:51:49] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[10:53:14] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[10:54:47] *** Joins: krux02 (~krux02@p508222d9.dip0.t-ipconnect.de)
[10:55:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[10:56:11] *** Joins: Denver (~Denver@174-16-236-178.hlrn.qwest.net)
[10:56:32] *** Quits: krux02_ (~krux02@p4fe57ecb.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[10:57:09] *** Joins: moonwiki (~moonwiki@152.97.181.247)
[10:57:53] *** Joins: fikran (~fikran@user/fikran)
[10:59:25] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[11:08:57] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[11:10:01] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[11:12:43] *** Joins: rendar (~rendar@user/rendar)
[11:13:31] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-204.dsl.bell.ca)
[11:17:18] *** Joins: independent56 (~independe@95.144.246.96)
[11:20:09] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:29:32] *** Joins: mrig (~mrig@user/mrig)
[11:31:49] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (Ping timeout: 240 seconds)
[11:36:43] *** Quits: epony (~epony@user/epony) (Quit: QUIT)
[11:38:26] *** Joins: epony (epony@user/epony)
[11:38:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[11:53:19] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[11:53:28] *** Quits: crashrep (~crashrep@user/crashrep) (Remote host closed the connection)
[11:53:53] *** Joins: crashrep (~crashrep@user/crashrep)
[11:54:49] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[11:56:58] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[11:58:05] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[11:59:21] *** Joins: Techcable (~Techcable@168.235.93.147)
[11:59:42] *** Joins: dntreou (~yakiza@105-209-130-246.access.mtnbusiness.co.za)
[12:04:30] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[12:05:25] *** Arsen_ is now known as Arsen
[12:17:13] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[12:17:55] *** Joins: leonarth (~leonarth@user/leonarth)
[12:20:15] *** Quits: independent56 (~independe@95.144.246.96) (Ping timeout: 256 seconds)
[12:20:54] *** Joins: shka (~herr@109.231.0.226)
[12:25:08] *** Joins: independent56 (~independe@95.144.246.96)
[12:27:08] *** Quits: Denver (~Denver@174-16-236-178.hlrn.qwest.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:30:51] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[12:38:09] *** Joins: synthea (~u@pool-72-82-129-201.cmdnnj.fios.verizon.net)
[12:45:02] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-204.dsl.bell.ca) (Ping timeout: 240 seconds)
[12:45:26] *** pyzozord- is now known as pyzozord
[12:46:02] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[12:48:12] *** Joins: arinov (~arinov@213.194.126.155)
[12:57:11] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-218.dsl.bell.ca)
[13:05:19] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Remote host closed the connection)
[13:05:34] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-218.dsl.bell.ca) (Ping timeout: 250 seconds)
[13:05:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[13:07:13] *** Joins: fikran (~fikran@user/fikran)
[13:07:27] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-130.dsl.bell.ca)
[13:10:12] *** Joins: jla (~jordi@64.225.79.195)
[13:26:48] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-130.dsl.bell.ca) (Ping timeout: 250 seconds)
[13:37:29] *** Joins: Vukan (~drazen@77-46-235-187.dynamic.isp.telekom.rs)
[13:43:15] *** Quits: Vukan (~drazen@77-46-235-187.dynamic.isp.telekom.rs) (Quit: WeeChat 3.3)
[13:44:10] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:46:02] *** Quits: anandn (~anandn@2601:600:a27f:d92d:557:2ccd:32e:85fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:48:36] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[13:54:13] *** Quits: Freman (~Freman@185.83.217.144) (Ping timeout: 240 seconds)
[13:54:32] *** Quits: synthea (~u@pool-72-82-129-201.cmdnnj.fios.verizon.net) (Ping timeout: 250 seconds)
[13:59:45] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[14:00:54] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:8153:e826:3459:f646) (Read error: Connection reset by peer)
[14:01:41] *** Quits: moto (~moto@user/moto) (Ping timeout: 256 seconds)
[14:09:03] *** Quits: dntreou (~yakiza@105-209-130-246.access.mtnbusiness.co.za) (Remote host closed the connection)
[14:13:08] *** Joins: moto (~moto@user/moto)
[14:23:55] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[14:24:00] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Quit: Leaving)
[14:26:47] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[14:31:26] *** Quits: fogobogo (~fogobogo@user/fogobogo) (Quit: Tada!)
[14:32:42] *** Joins: shtirlic (~shtirlic@pppoe.178-66-71-116.dynamic.avangarddsl.ru)
[14:36:39] *** Quits: shtirlic_ (~shtirlic@pppoe.178-66-71-116.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[14:47:37] *** Joins: souvik (~souvik@103.59.72.92)
[14:54:08] *** Joins: krux02_ (~krux02@p4fe57f7a.dip0.t-ipconnect.de)
[14:56:05] *** Quits: krux02 (~krux02@p508222d9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:00:54] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[15:01:11] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[15:01:49] *** Joins: darkapex (~darkapex@user/darkapex)
[15:05:03] <pinky_> is there a way to use a bufio.Reader with a read deadline?
[15:05:34] <pinky_> i want to use a scanner to read lines from a tcp connection but also i need to write to the same socket if data is available to write
[15:06:02] <pinky_> so to be non-blocking for each read call i need to set a deadline, right? but bufio controls the read calls
[15:07:23] <pinky_> oh i just found https://gist.github.com/hongster/04660a20f2498fb7b680
[15:07:40] *** Quits: bluedust_ (~bluedust@185.248.85.41) (Remote host closed the connection)
[15:07:57] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 240 seconds)
[15:12:27] *** Joins: toastloop (~toastloop@user/toastloop)
[15:12:28] *** Quits: toastloop (~toastloop@user/toastloop) (Excess Flood)
[15:13:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:14:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[15:16:34] *** Joins: fikran (~fikran@user/fikran)
[15:16:52] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Ping timeout: 250 seconds)
[15:17:37] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[15:19:40] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[15:20:25] *** Joins: neurocyte091709 (~neurocyte@IP-185189140032.dynamic.medianet-world.de)
[15:20:26] *** Quits: neurocyte091709 (~neurocyte@IP-185189140032.dynamic.medianet-world.de) (Changing host)
[15:20:26] *** Joins: neurocyte091709 (~neurocyte@user/neurocyte)
[15:24:01] <albertito> pinky_: that example is reasonable, IMO. You set the deadline on the connection, and use a bufio.Reader with the connection as a source. The Reader doesn't know about the deadline but it doesn't matter
[15:24:32] <albertito> pinky_: it also doesn't interfere with the write path, you can read and write to tcp connections independently
[15:24:42] <pinky_> ah ok thanks .. now i'm wondering if i need a scanner
[15:24:53] <albertito> pinky_: I don't know what you mean by "to be non-blocking for each read call i need to set a deadline" though
[15:24:59] <pinky_> will a scanner transparently "cooperate" with deadline? i don't think i could use a scanner..
[15:25:12] <pinky_> i thought the default was 0 which will wait forever?
[15:25:19] <pinky_> so if i'm not getting data i don't want to block
[15:25:27] <pinky_> because i need to check if i should write data
[15:25:50] <albertito> pinky_: let's split the two things. First, setting a deadline doesn't make your read non-blocking
[15:26:19] <pinky_> because it still blocks for the duration of the deadline?
[15:26:22] <albertito> pinky_: it makes it block for at most the deadline
[15:26:27] <pinky_> that makes sense
[15:26:42] <pinky_> actually i wonder if i could use a goroutine to read and one to write ?
[15:26:47] <pinky_> on the same connection
[15:27:08] <albertito> pinky_: yes, as far as the APIs go, you can, no problems with that at all
[15:27:17] <pinky_> basically i'm writing a thing that abstracts a tcp connection to a bidirectional chan []byte
[15:27:26] <pinky_> and then i'll write one for serial
[15:27:41] <pinky_> so if i put data into the channel i need to write it and if theres data in the channel i need to read it
[15:27:49] <albertito> pinky_: but depending on the protocol it might or might not be feasible/practical to do it that way, it depends on what you're doing. But that's a logic decision for you to make, Go supports it
[15:27:53] <pinky_> but the data is always like "ABC\r"
[15:27:55] <pinky_> 3 characters
[15:28:24] <pinky_> or sometimes its two actually
[15:28:36] <pinky_> should always end with \r
[15:28:52] <albertito> pinky_: does your application care about line boundaries? or you want to just pass things to your chan []byte transparently without caring about what's inside?
[15:28:52] *** Joins: bluedust (~bluedust@185.248.85.41)
[15:29:10] <pinky_> well i'd rather only pass full "messages" to the channel
[15:29:31] <pinky_> meaning those 2 or 3 bytes in each []byte
[15:30:15] <pinky_> as in i wouldn't want whats reading the channel to have to do any kind of buffering on a partial message or something
[15:30:59] <pinky_> brb
[15:31:50] <albertito> pinky_: that is okay, you can do that in the read goroutine just fine with the scanner or bufio.Reader.ReadString('\r')
[15:35:07] *** Quits: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[15:36:56] *** Quits: avemestr (~avemestr@2a01:4f8:121:228f::2) (Ping timeout: 252 seconds)
[15:38:58] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[15:41:00] *** Joins: neurocyte091709 (~neurocyte@IP-185189140032.dynamic.medianet-world.de)
[15:41:00] *** Quits: neurocyte091709 (~neurocyte@IP-185189140032.dynamic.medianet-world.de) (Changing host)
[15:41:00] *** Joins: neurocyte091709 (~neurocyte@user/neurocyte)
[15:41:07] *** Joins: avemestr (~avemestr@2a01:4f8:121:228f::2)
[15:42:45] *** Joins: independent_ (~independe@95.144.246.96)
[15:43:25] *** Joins: walterwhip (~www@user/walterwhip)
[15:45:23] *** Quits: independent56 (~independe@95.144.246.96) (Ping timeout: 256 seconds)
[15:48:23] *** Joins: anandn (~anandn@2601:600:a27f:d92d:5c1d:96aa:95f6:7252)
[15:52:57] *** Joins: bluedust_ (~bluedust@59.98.50.19)
[15:53:32] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[15:55:32] *** Joins: arinov (~arinov@213.194.126.155)
[15:56:02] *** Quits: bluedust (~bluedust@185.248.85.41) (Ping timeout: 240 seconds)
[16:00:55] *** Joins: haliucinas (~haliucina@5.20.153.21)
[16:17:17] *** Quits: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) (Ping timeout: 240 seconds)
[16:22:42] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:39:28] *** Quits: bkircher (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689) (Quit: Leaving)
[16:41:10] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[16:43:59] *** Joins: bkircher (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689)
[16:44:17] *** Joins: raiaq (0a41c94ab1@2604:bf00:561:2000::3b)
[16:50:30] *** Joins: k0emt (~k0emt@2601:801:4100:302:4715:4c80:5081:81eb)
[16:52:58] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[16:53:32] *** Joins: ugjka (~ugjka@ugjka.net)
[16:55:27] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:59:59] *** Quits: carlavilla (~carlavill@2a0c:5a84:3105:5e00:221:6bff:fe3b:cee4) (Remote host closed the connection)
[17:02:48] *** Joins: carlavilla (~carlavill@188.26.219.17)
[17:03:09] <pinky_> $ nc -v <addr> 3002 | LC_ALL=C tr '\r' '\n'
[17:03:21] <pinky_> ^ this is printing lines of 3 characters each
[17:03:38] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net)
[17:03:51] <pinky_> but using bufio.Reader.ReadBytes('\r') i'm getting all sorts of garbled chunks
[17:04:16] <pinky_> and i don't think it is my read deadline since i set it to 1 second and it doesn't help
[17:06:10] <pinky_> some of the chunks i get are formatted correctly (3 characters), but most aren't, lots of "noise" i don't see when just running nc | tr
[17:07:59] <pinky_> not sure if it'd matter but the other end of the socket is a ser2net instance
[17:09:25] <pinky_> https://pastebin.com/trKkLMjF
[17:10:18] *** Quits: dfch (~dfch@user/dfch) (Quit: bye)
[17:11:05] <pinky_> https://pastebin.com/54csqJ2L <- only the "--F" is valid, and the "PE" almost indicates that its getting data sent to it ("PE" would be an error response) .. but it shouldn't really be
[17:12:11] <pinky_> oh crap, it just occurred to me, i am inadvertantly sending, because that also is reading from the same channel :(
[17:12:22] <pinky_> removing the writeData case and it looks perfect
[17:12:52] *** Joins: dfch (~dfch@user/dfch)
[17:13:39] <pinky_> even still i'm not sure why the data i get back from ReadBytes('\r') would have looked so garbled
[17:16:00] <fizzie> Unrelated, but with that code as it is, I don't see what the read deadline is useful for. If the read fails with a timeout, you just `continue` the loop, set a new deadline, and read again.
[17:16:32] <pinky_> oh yeah continuing doesn't help me
[17:16:48] <pinky_> the point is supposed to be to give a chance for the select to see if something has to be written
[17:16:58] <pinky_> i guess i should go to a rx and tx channel instead of a bidirectional channel
[17:17:46] <pinky_> and maybe i just delete the continue
[17:17:54] <pinky_> and leave that if statement empty
[17:18:32] <fizzie> Yeah, channels aren't bidirectional in a "full-duplex" way. Also possibly just separate read and write goroutines.
[17:18:54] <pinky_> guessing with one bidirectional channel i can't tell the difference between data i wrote into it that should be read from something else, and data i write in from somewhere else that i need to write to the tcp socket
[17:19:06] <pinky_> which maybe should have been obvious :)
[17:19:10] *** Quits: anandn (~anandn@2601:600:a27f:d92d:5c1d:96aa:95f6:7252) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:23:41] <fizzie> With two goroutines, the send one can be just a `for data := range tic.tx { /* write data */ }` and will terminate when the tx channel is closed; and the read one can be just a `for { data, err := reader.ReadBytes('\n'); /* ... */ tic.rx <- data }` and will terminate when the connection is closed.
[17:23:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[17:24:35] <pinky_> nice
[17:24:43] <fizzie> (It does get a little more complicated if you need to be able to stop the Run() loop while keeping the connection open for later use though.)
[17:25:12] <pinky_> i don't, i was actually going to move the connection into Run() and log/reconnect on disconnect/connect failure/errors
[17:25:27] <pinky_> obviously going to get rid of all the panic(), put logging in, etc :)
[17:25:55] *** Joins: fikran (~fikran@user/fikran)
[17:26:09] <pinky_> any reason to really want two goroutines over just the non-blocking select doing both?
[17:26:49] <pinky_> well sorry the select doesn't do both
[17:27:32] *** Quits: independent_ (~independe@95.144.246.96) (Ping timeout: 240 seconds)
[17:30:36] *** Joins: menace (~someone@ppp-93-104-175-249.dynamic.mnet-online.de)
[17:30:36] *** Quits: menace (~someone@ppp-93-104-175-249.dynamic.mnet-online.de) (Changing host)
[17:30:36] *** Joins: menace (~someone@user/menace)
[17:30:44] *** menace is now known as Deknos
[17:33:15] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[17:33:29] *** Parts: Deknos (~someone@user/menace) ()
[17:35:02] *** Joins: marahin (~marahin@3lab/marahin)
[17:35:30] <tomeaton17> I have a 4D slice and accessing it creates a really long line. How can I break this line into multiple lines?
[17:39:16] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:39:40] <j416> tomeaton17: use intermediate variables?
[17:40:43] <tomeaton17> j416 Is there nothing in the syntax that allows me to break the line? It seems a waste to create more variables
[17:41:08] <tomeaton17> I suppose it would get compiled out but more a question about line breaks
[17:44:38] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[17:47:36] *** Quits: k0emt (~k0emt@2601:801:4100:302:4715:4c80:5081:81eb) (Quit: Leaving)
[17:49:20] *** Joins: neurocyte091709 (~neurocyte@IP-185189140032.dynamic.medianet-world.de)
[17:49:21] *** Quits: neurocyte091709 (~neurocyte@IP-185189140032.dynamic.medianet-world.de) (Changing host)
[17:49:21] *** Joins: neurocyte091709 (~neurocyte@user/neurocyte)
[17:57:12] *** Joins: teocle (~t@hex.plasm.in)
[17:59:46] <fizzie> Semicolons are not inserted if a line ends in `[`, so you _can_ do this: https://0x0.st/o-x0.txt
[18:00:07] <fizzie> But gofmt doesn't like it and will remove the line breaks, so you might have trouble actually doing it.
[18:00:36] <fizzie> At least in any environment that enforces gofmt, which isn't all that uncommon.
[18:01:16] *** Quits: bluedust_ (~bluedust@59.98.50.19) (Remote host closed the connection)
[18:01:51] *** Joins: bluedust (~bluedust@59.98.50.19)
[18:01:52] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[18:02:11] *** Joins: mickey8 (~user@user/mickey)
[18:03:50] <tomeaton17> fizzie thanks, gofmt is enforced but this is a useful note. I think I will just have to use temporary variables. They will get compiled away
[18:06:02] *** Quits: bluedust (~bluedust@59.98.50.19) (Ping timeout: 240 seconds)
[18:06:10] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[18:06:17] <fizzie> Heh, I guess with suitable ingenuity... here's a version that even gofmt allows to stay on multiple lines: https://go.dev/play/p/sLBE9CY3z7_F
[18:06:26] <fizzie> But that just looks too bizarre.
[18:07:35] <fizzie> In fact, that extra set of parens wasn't even necessary, a "simple" https://go.dev/play/p/8oVuWJ-WyC8 works as well. But still.
[18:08:13] <ikke> That's just plain ugly :P
[18:11:38] *** Joins: arkurious (~arkurious@user/arkurious)
[18:14:42] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:5143:664b:aeb1:9527)
[18:14:56] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:16:22] <fizzie> I think it's extraordinarily ugly, not just plain ugly. ;)
[18:16:37] <ikke> heh
[18:18:46] *** Joins: leonarth (~leonarth@user/leonarth)
[18:20:41] *** Joins: cobber (~protorom@i59F67A18.versanet.de)
[18:20:50] *** Joins: bluedust (~bluedust@59.98.50.19)
[18:21:47] <siXy> Might be marginally less ugly to add an alias and use a get method: https://go.dev/play/p/mYbby0f91pO
[18:22:54] *** Quits: leonarth (~leonarth@user/leonarth) (Client Quit)
[18:25:17] *** Quits: lazyreader (~lazyreade@user/lazyreader) (Quit: The Lounge - https://thelounge.chat)
[18:26:30] *** Joins: lazyreader (~lazyreade@user/lazyreader)
[18:31:26] *** Quits: jannis (~jannis@user/xjs) (Quit: Good night.)
[18:33:08] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[18:34:05] *** Parts: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) ()
[18:35:48] *** Joins: bluedust_ (~bluedust@103.161.144.94)
[18:36:54] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (Quit: Bridge terminating on SIGTERM)
[18:38:32] *** Quits: bluedust (~bluedust@59.98.50.19) (Ping timeout: 240 seconds)
[18:38:49] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[18:39:28] <since_> type s4d [1][1][1][1]int
[18:39:40] <since_> return s[a][b][c][d]
[18:41:51] *** Joins: fef (~thedawn@user/thedawn)
[18:52:45] <pinky_> bytes.Buffer can be a fixed size and basically a sliding window right?
[18:54:07] <pinky_> i'm reading data and want it to go into a slice or array which is always a specific length and as new data goes in, it's shifted so that the last element is always the most recent piece of data
[18:54:16] *** Joins: independent_ (~independe@95.144.246.96)
[18:54:30] <pinky_> and then i'm matching on the first two and last element to see if it's a properly formatted message i'm looking for
[18:54:43] <pinky_> so wondering if bytes.Buffer is good for this
[18:55:00] <pinky_> or maybe i should just do it myself
[18:55:07] *** Joins: pr0to_ (~proto@user/pr0to/x-2987830)
[18:55:51] <pinky_> it seems like it, i can use HasPrefix to check that the first two elements match the start words, for instasnce
[18:56:00] <pinky_> it's a buffer so it should be able to be of fixed size?
[18:56:17] <pinky_> no reason to write the rolling window myself if thats what bytes.Buffer is for..
[18:59:03] *** Quits: pr0to_ (~proto@user/pr0to/x-2987830) (Quit: Leaving)
[19:00:20] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:02:30] *** Joins: mrig (~mrig@user/mrig)
[19:06:20] *** Joins: leonarth (~leonarth@user/leonarth)
[19:06:52] <fizzie> The usual low-level implementation of a ring buffer is a fixed-size slice/array, and two integers (either head + tail offsets, or head + size), so that when you're removing data from the front, you won't have to actually do any copying. I don't think the standard library has one of those, though. And it _does_ mean the data is non-contiguous, which can be awkward.
[19:14:00] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:8592:709e:6303:d30a)
[19:15:02] *** Quits: norbinaa (~be3uykpy@2a00:a040:19a:b060:b441:7875:2785:6006) (Ping timeout: 240 seconds)
[19:15:30] *** Quits: orthoplex64 (~crm@70.120.0.94) (Remote host closed the connection)
[19:15:55] *** Joins: orthoplex64 (~crm@70.120.0.94)
[19:19:30] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[19:21:40] *** Quits: bluedust_ (~bluedust@103.161.144.94) (Remote host closed the connection)
[19:24:45] *** Quits: eyJhb (~eyJhb@user/eyjhb) (Quit: Clever message)
[19:25:27] *** Joins: eyJhb (~eyJhb@user/eyjhb)
[19:30:06] *** Quits: gio[m] (~giolekvam@2001:470:69fc:105::1:16a) (Quit: You have been kicked for being idle)
[19:33:24] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:34:25] *** d42- is now known as d42
[19:35:16] *** Joins: fikran (~fikran@user/fikran)
[19:41:39] *** Joins: bluedust (~bluedust@103.161.144.94)
[19:50:04] *** Joins: Guest81 (~Guest81@2600:6c5e:157f:df79:b90b:75aa:306d:d423)
[19:51:55] <pinky_> fizzie: thanks! maybe i'll use https://pkg.go.dev/github.com/armon/circbuf
[19:52:42] <pinky_> https://github.com/armon/circbuf/blob/5111143e8da2/circbuf.go#L34
[19:53:14] <pinky_> uses copy()
[19:57:12] *** Quits: cobber (~protorom@i59F67A18.versanet.de) (Quit: cobber)
[20:00:00] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[20:00:24] *** Joins: novns (~novns@user/novns)
[20:03:31] *** Quits: novns (~novns@user/novns) (Client Quit)
[20:03:53] *** Joins: novns (~novns@user/novns)
[20:05:27] *** Joins: cobber (~protorom@i59F67A18.versanet.de)
[20:05:35] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:8592:709e:6303:d30a) (Quit: Leaving)
[20:06:33] *** Joins: be3uykpy (~ubuntu@141.144.233.89)
[20:11:05] <fizzie> Well, yes, you do have to copy the _new_ bytes (and potentially also when reading out, if you need the result as a contiguous []byte), but I meant you don't have to move data within the slice. Because depending on the usage patterns, that's what'd be really costly.
[20:11:52] *** Joins: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:8592:709e:6303:d30a)
[20:12:26] <fizzie> Slightly surprised that doesn't have a Read() or a Pop() method that'd extract the first N bytes though.
[20:13:00] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[20:13:01] <pinky_> yeah that would be nice
[20:13:23] *** Joins: novns (~novns@user/novns)
[20:16:17] *** Quits: Herby (~quassel@merkur.graeber-clan.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[20:16:40] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Ping timeout: 256 seconds)
[20:17:17] *** Joins: Herby (~quassel@merkur.graeber-clan.de)
[20:20:12] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:8592:709e:6303:d30a) (Quit: Leaving)
[20:24:48] *** Joins: mud (~mud@user/kadoban)
[20:26:46] *** Quits: bluedust (~bluedust@103.161.144.94) (Remote host closed the connection)
[20:27:21] *** Joins: bluedust (~bluedust@103.161.144.94)
[20:28:17] *** Joins: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:8592:709e:6303:d30a)
[20:31:05] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:8592:709e:6303:d30a) (Client Quit)
[20:31:28] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 250 seconds)
[20:32:20] *** Joins: lilgopher (~textual@c-24-12-183-227.hsd1.il.comcast.net)
[20:36:48] *** Quits: be3uykpy (~ubuntu@141.144.233.89) (Quit: WeeChat 2.8)
[20:37:39] *** Joins: be3uykpy (~ubuntu@141.144.233.89)
[20:41:43] *** Joins: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it)
[20:50:41] *** Quits: Guest81 (~Guest81@2600:6c5e:157f:df79:b90b:75aa:306d:d423) (Quit: Client closed)
[20:54:57] *** Joins: bluedust (~bluedust@103.161.144.94)
[20:56:21] *** Joins: normen (~normen@p200300d717392b00418d22bd0e5925d9.dip0.t-ipconnect.de)
[20:57:02] *** Quits: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it) (Ping timeout: 250 seconds)
[20:57:27] *** Joins: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it)
[21:04:55] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[21:04:55] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[21:04:55] *** Joins: tane (~tane@user/tane)
[21:05:42] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:06:10] *** Joins: fef (~thedawn@user/thedawn)
[21:08:13] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 240 seconds)
[21:10:02] *** Quits: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it) (Ping timeout: 250 seconds)
[21:13:33] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[21:16:16] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[21:17:11] <normen> Hi, is it normal that for pointers to interfaces I have to cast the pointer to be able to access the Methods or is that because I am using 1.18beta1?
[21:17:50] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 250 seconds)
[21:17:58] <zsnes> generally no reason to have a pointer to an interface
[21:18:23] <normen> Like "var my *Stuff" works like "my.Method" but for "var my *InterfaceStuff" I have to go "(*my).Method"
[21:18:23] <zsnes> also there are no casts in go, there are type assertions if thats what you mean?
[21:19:00] <normen> I wrote down what I meant, no CS student so my terminology might be wrong, hope you get what I mean
[21:19:48] <zsnes> if you have a pointer to an interface, you would have to dereference it to call a method on it, yes.
[21:19:57] <zsnes> a interface is already a pointer, so you really have a pointer to a pointer
[21:19:59] <zsnes> thats why
[21:20:00] <normen> Okay so no syntax sugar there, thanks
[21:20:12] <normen> I thought I was missing something fundamental.
[21:20:19] <zsnes> you shouldn't need a pointer to an interface
[21:20:41] <normen> No I need a pointer to the struct that implements the interface :)
[21:21:08] <zsnes> which would satisfy the interface, so why do you need a pointer to the interface itself?
[21:21:17] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[21:21:38] <normen> Again, I don't. I have a pointer to a variable which has the type of the interface.
[21:21:50] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:21:54] <normen> "var my *Interface"
[21:22:06] *** Joins: mickey8 (~user@user/mickey)
[21:22:07] <normen> So I can call my.Method()
[21:22:18] <zsnes> you just need `var my Interface`
[21:22:42] <zsnes> var my Interface = *Stuff; my.Method()
[21:22:43] <zsnes> works fine
[21:22:59] <normen> aaah. Okay so I did miss something there..
[21:23:06] <zsnes> that's fake syntax, showing *Stuff can be a pointer, not dereferencing Stuff
[21:23:08] <zsnes> to be clear
[21:23:29] <zsnes> var thing *Stuff; var my Interface = thing;
[21:23:34] <zsnes> then my.Method()
[21:23:36] <zsnes> is what i meant
[21:23:50] <normen> Okay so I can't even assign a real struct to that variable?
[21:23:54] <normen> Its always a pointer?
[21:23:59] <zsnes> you can do either one
[21:24:13] <zsnes> you can assign anything ot an interface, that satisfies that interface
[21:24:32] <zsnes> a pointer to a struct or struct both satisfy that
[21:24:34] <zsnes> generally
[21:24:47] <normen> Alright, thanks.
[21:30:18] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:24d0:9fd1:beb9:fa09)
[21:30:40] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[21:30:45] *** Joins: Denver (~Denver@174-16-236-178.hlrn.qwest.net)
[21:31:10] *** Joins: henry40408 (~henry4040@175.181.155.165)
[21:32:36] <fizzie> Well, a lot of the time it's only the pointer to a struct that satisfies the interface.
[21:33:11] <fizzie> Depends on whether the methods that make it implement the interface are declared with pointer receivers or not.
[21:33:30] <fizzie> But a lot of time they are, because they need to modify the struct.
[21:35:02] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:24d0:9fd1:beb9:fa09) (Ping timeout: 240 seconds)
[21:35:29] *** Joins: Atque (~Atque@user/atque)
[21:36:33] *** Quits: normen (~normen@p200300d717392b00418d22bd0e5925d9.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[21:37:24] *** Joins: normen (~normen@p200300d717392b00418d22bd0e5925d9.dip0.t-ipconnect.de)
[21:42:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:44:37] *** Joins: fikran (~fikran@user/fikran)
[21:46:48] *** Joins: et_ (~et@user/et)
[21:47:01] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[21:47:17] *** et_ is now known as et
[21:48:59] *** Quits: kochchef (~quassel@80.146.255.46) (Quit: brb)
[21:51:30] *** Joins: kochchef (~quassel@80.146.255.46)
[21:54:26] *** Joins: synthea (~u@pool-72-82-129-201.cmdnnj.fios.verizon.net)
[21:54:51] <normen> Oh thats another question.. Whats the syntax for the interface when I want a pointer to its struct? I only seem to be able to make ones with a no-pointer to their struct..
[21:56:22] <normen> type MyInterface interface { MyMethod() bool }  -> This won't work with func (m *MyStruct), it says it doesn't implement the interface.
[21:57:50] <fizzie> Because it doesn't. With `func (m *MyStruct) MyMethod() bool { ... }`, only the type `*MyStruct` has the method.
[21:58:09] <fizzie> But why is that a problem, exactly?
[21:58:18] <normen> Ah, okay.
[21:58:36] <normen> Well because I want only one instance of the struct?
[21:59:48] *** Quits: bluedust (~bluedust@103.161.144.94) (Remote host closed the connection)
[22:00:53] <fizzie> I'm not really following. Is that an answer to why you want to declare the method with a pointer, or why it's a problem that it's the pointer type that implements the interface? Because it doesn't seem to answer the latter.
[22:02:06] *** Parts: Latrina_ (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net) ()
[22:02:41] <fizzie> It's pretty much the standard model that you have some struct type, add a few methods with a pointer receiver, and have the pointer-to-struct type implement some useful interface. For an example from the standard library, the pointer type `*os.File` is the one that implements `io.Reader` (and a bunch of other interfaces).
[22:02:55] *** Joins: Latrina (~Latrina@user/latrina)
[22:04:00] <normen> The former.
[22:05:42] <normen> The question is still about the syntax for an interface. What do you mean by "pointer-to-struct type"?
[22:07:09] *** Quits: popey (~popey@ubuntu/member/popey) (Ping timeout: 256 seconds)
[22:07:20] <fizzie> I don't really know how to put it any differently. But here's an example: https://go.dev/play/p/lBd8NkEMdyf
[22:08:37] <normen> ah okay. Yeah so I just get that message because I didn't supply a pointer.
[22:08:40] *** Joins: bluedust (~bluedust@103.161.144.94)
[22:08:55] *** Quits: independent_ (~independe@95.144.246.96) (Remote host closed the connection)
[22:09:02] *** Joins: independent56 (~independe@95.144.246.96)
[22:09:13] <fizzie> Yes, you'd get the same kind of an error from omitting the & on line 19 of that.
[22:09:24] <normen> probably because of my double-pointer to interface from before
[22:10:41] *** Quits: synthea (~u@pool-72-82-129-201.cmdnnj.fios.verizon.net) (Quit: Leaving)
[22:21:01] *** Joins: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi)
[22:22:26] <normen> Yupyup, was all a bis messed up with the pointers. My questions arose from my own inept code - thanks for clearing that up :D
[22:27:54] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[22:30:38] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:37:56] *** Quits: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi) (Remote host closed the connection)
[22:38:59] *** Quits: bluedust (~bluedust@103.161.144.94) (Remote host closed the connection)
[22:42:23] *** Joins: bluedust (~bluedust@103.161.144.94)
[22:54:09] *** Joins: bluedust_ (~bluedust@81.92.205.25)
[22:55:33] *** Quits: bluedust (~bluedust@103.161.144.94) (Remote host closed the connection)
[22:56:04] *** Joins: bluedust (~bluedust@103.161.144.94)
[22:59:32] *** Quits: bluedust_ (~bluedust@81.92.205.25) (Ping timeout: 240 seconds)
[22:59:35] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[23:00:40] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-105.dsl.bell.ca)
[23:05:26] *** Quits: Denver (~Denver@174-16-236-178.hlrn.qwest.net) (Quit: Textual IRC Client: www.textualapp.com)
[23:07:27] *** Joins: bluedust_ (~bluedust@81.92.206.10)
[23:10:02] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 240 seconds)
[23:13:50] *** Joins: bluedust (~bluedust@103.161.144.94)
[23:16:00] *** Joins: bluedus__ (~bluedust@185.248.85.41)
[23:16:45] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[23:16:51] *** Quits: bluedust_ (~bluedust@81.92.206.10) (Ping timeout: 256 seconds)
[23:17:18] *** Joins: mickey8 (~user@user/mickey)
[23:18:06] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[23:18:27] *** Joins: teasea (~teasea@user/teasea)
[23:19:10] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 250 seconds)
[23:19:33] *** Quits: teasea (~teasea@user/teasea) (Client Quit)
[23:20:33] *** Joins: teasea (~teasea@user/teasea)
[23:21:46] *** Joins: bluedust (~bluedust@103.161.144.94)
[23:25:40] *** Quits: bluedus__ (~bluedust@185.248.85.41) (Ping timeout: 250 seconds)
[23:26:06] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 250 seconds)
[23:34:12] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[23:39:47] *** Joins: bluedust (~bluedust@103.161.144.94)
[23:42:28] *** Quits: bluedust (~bluedust@103.161.144.94) (Remote host closed the connection)
[23:42:47] *** Joins: bluedust (~bluedust@103.161.144.94)
[23:44:00] *** Joins: hanzo (uid532183@user/hanzo)
[23:48:34] *** Quits: bluedust (~bluedust@103.161.144.94) (Read error: Connection reset by peer)
[23:51:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[23:53:58] *** Joins: fikran (~fikran@user/fikran)
[23:56:24] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[23:58:17] *** Joins: teasea (~teasea@user/teasea)
[23:58:54] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
