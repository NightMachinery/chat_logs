[00:01:00] <japhb> That's ... not something I ever implemented
[00:01:39] <japhb> Is '>' the same as 'shift-.' for you?
[00:05:05] <discord-raku-bot> <Nemokosch#9980> The Polish layout is the same in this regard
[00:05:05] <discord-raku-bot> <Nemokosch#9980> I wonder what gets passed to poor raku repl in these cases
[00:05:05] <discord-raku-bot> <Nemokosch#9980> what can that alt+. be when it arrives
[00:05:06] <discord-raku-bot> <Nemokosch#9980> in xterm, it's some glitchy character and it just shows up
[00:05:06] <discord-raku-bot> <Nemokosch#9980> nothing special
[00:05:17] <discord-raku-bot> <Nemokosch#9980> apparently xterm is good for something, after all
[00:05:23] <japhb> *snrk*
[00:05:49] <japhb> FWIW, I'm using Gnome Terminal as well
[00:08:07] <japhb> Nemokosch: ISTR I implemented a raw terminal keycode program for Terminal::Print ...
[00:08:13] <japhb> Yeah, here it is: https://github.com/ab5tract/Terminal-Print/blob/master/examples/decoded-input.p6
[00:09:08] <japhb> (Technically that's the version that tries to figure out what key can be decoded from an escape sequence; there's a raw-input.p6 as well, but then you have to be able to grok the raw sequences.)
[00:14:05] <japhb> Since it appears that this other problem may take some time to figure out, I've released 0.0.11 with just the Delete fix.  It will take a few minutes to appear in the indexes.
[00:14:56] <japhb> OK, zef sees it now
[00:15:10] *** Quits: Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net) (Quit: Leaving)
[00:26:23] <discord-raku-bot> <Nemokosch#9980> first time I used zef upgrade... it was about time I suppose
[00:26:44] <discord-raku-bot> <Nemokosch#9980> oh yeah, nice, it works now 🙂
[00:31:48] *** Joins: Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net)
[00:36:41] <japhb> When I told a friend of mine that I'd forgotten to add Delete to the default keymap, they went "And you never noticed?  Way to humblebrag!" and realized they thought I was claiming to have never needed to correct my inputs.  NOT!
[00:50:05] <drakonis> does raku have anything along the lines of data manipulation libraries yet?
[00:56:34] *** Quits: Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net) (Quit: Leaving)
[00:57:56] <japhb> drakonis: Manipulating what particular kind of data?  That's a pretty broad range of possibilities, and we have rather uneven coverage.
[00:58:55] <drakonis> ah, matrices and vectors i'd say
[00:59:46] <drakonis> not unlike the kinds of libraries you'd find in the usual languages for this sort of task
[00:59:58] <drakonis> dataframes and such
[01:14:11] <japhb> Have you searched on raku.land?  https://raku.land/?q=linear and https://raku.land/?q=vector and https://raku.land/?q=matrix and https://raku.land/?q=matrices all gave results (overlapping of course)
[01:14:19] <japhb> Though of course those may not be what you're looking for.
[01:14:30] <japhb> e.g. if you're actually looking for a port of pytorch or so.
[01:18:41] <drakonis> ah, i haven't yet.
[01:33:33] <drakonis> also i meant numeric processing libraries
[01:33:45] <drakonis> if they're not available, they can always be written.
[01:42:58] <El_Che> japhb: take a small base image and add this https://github.com/nxadm/rakudo-pkg#os-repositories: voila, small image. Usable in docker was one of the first usecases of rakudo-pkg :)
[01:43:48] <El_Che> japhb: I don't believe in prebuilt images with too much in it, so I prefer to add what I exactly meed
[01:45:32] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[01:50:14] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[01:58:09] <japhb> El_Che: Sure, I understand.  I had just gotten feedback from someone frustrated that Docker images that were simultaneously *current* and *official* weren't obvious from any of the download spots they looked (including rakudo.org and Docker Hub), which gave an impression of poor Docker support.  I figured the most likely case is that people *were* making Docker images, but we weren't advertising that well.
[01:59:18] <japhb> rakudo-star appears official but out of date, and others appeared either unofficial or out of date or both.
[02:00:10] <El_Che> japhb: there is certainly a usecase for rakudo-star, but docker isn't one. It's pretty much the antithesis of the docker mindset (minimalistic)
[02:01:01] <japhb> El_Che: Oh, no disagreement.  I just meant that that's the only one on Docker Hub that shows with the official marker.
[02:01:37] <El_Che> japhb: it would be pretty trivial to create rakudo-pkg images as the base images of each OS/Distro is used to build the package in the same place. I just don't know if there is a public for it
[02:01:58] <El_Che> I have toyed with the idea certainly
[02:02:18] <japhb> It sounds like you've got at least one "public" request for it.  :-)
[02:02:33] <El_Che> hehe
[02:03:15] <El_Che> docker hub though is a dead end
[02:03:26] <El_Che> with the limits they added
[02:03:34] <japhb> And I personally have wanted base images of "alpine + rakudo + zef" and "ubuntu + rakudo + zef" in order to simplify some of my stuff -- and make it easier to toss a script to my friends who don't necessarily have rakudo on all their machines.
[02:03:49] <japhb> Sorry, haven't been keeping up with that news.  What limits?
[02:04:19] <El_Che> yeah, I am pretty please with the alpine repos that make that possible. I was only able to create rakudo-pkg repos when I moved to cloudsmith
[02:04:34] <El_Che> https://docs.docker.com/docker-hub/download-rate-limit/
[02:04:47] <El_Che> For anonymous users, the rate limit is set to 100 pulls per 6 hours per IP address.
[02:04:54] <El_Che> For authenticated users, it is 200 pulls per 6 hour period. There are no limits for users with a paid Docker subscription.
[02:05:15] <El_Che> add it to a CI system and you'll be fast out of luck
[02:06:03] <El_Che> github has now docker  repos and maybe cloudsmith. The problem is that not all the users know how to get images not on docker hub
[02:06:38] <japhb> There was some verbiage in there about open source projects having an exemption.  I'd sorta assumed we'd need to do that like we do with e.g. GitHub.
[02:06:46] <japhb> nod
[02:11:36] <El_Che> (before I do that, I need to find the time to finish the arm64 images :/ )
[02:11:51] <El_Che> pkgs I mean
[02:12:27] <japhb> For which OS?
[02:13:57] <El_Che> the same as rakudo-pkg supports
[02:14:24] <El_Che> except centos 7 that does not have a arm64 upstream image (they started supporting it at 8)
[02:15:05] <El_Che> so a 15-20 distribution+release matrix depending on what's supported at the moment
[02:42:04] <japhb> Ah
[02:50:14] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[02:50:46] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[03:30:00] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:30:24] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[03:34:58] *** Quits: MasterDuke (~MasterDuk@176.250.226.156) (Ping timeout: 250 seconds)
[03:42:31] *** Quits: japhb (~geoff@mugs/japhb) (Ping timeout: 256 seconds)
[03:43:20] *** Joins: japhb (~geoff@mugs/japhb)
[04:43:20] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:43:20] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[04:43:20] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[04:43:20] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[04:43:20] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[04:43:20] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[04:43:20] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[04:43:20] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[04:43:20] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[04:43:20] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[04:43:20] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[04:43:20] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[04:43:20] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[04:43:20] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[04:43:20] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:43:20] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[04:43:20] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[04:43:21] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[04:43:41] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[04:43:53] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[04:44:01] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[04:44:13] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[04:44:26] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[04:44:53] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[04:45:29] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[04:45:29] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:45:30] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[04:45:39] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[04:46:21] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[04:58:11] *** Joins: razetime (~quassel@117.254.34.103)
[05:44:07] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[05:45:38] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[05:46:23] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[05:46:27] *** Quits: SqrtNegInf (~SqrtNegIn@97-113-14-24.tukw.qwest.net) (Quit: Leaving...)
[06:12:25] *** Quits: razetime (~quassel@117.254.34.103) (Read error: Connection reset by peer)
[06:32:45] *** Quits: nine (~nine@comm.detonation.org) (Remote host closed the connection)
[06:32:45] *** Quits: m_athias (~m-fteeyd@comm.detonation.org) (Remote host closed the connection)
[06:32:51] *** Joins: nine (~nine@comm.detonation.org)
[06:33:23] *** Joins: m_athias (~m-fteeyd@comm.detonation.org)
[06:34:29] *** Joins: razetime (~quassel@117.254.34.103)
[06:44:04] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[06:44:30] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[06:45:30] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[07:19:48] *** Quits: razetime (~quassel@117.254.34.103) (Ping timeout: 240 seconds)
[07:21:08] *** Quits: ocomport (~ocomport@182.54.167.94) (Quit: Connection closed)
[07:31:44] *** Quits: amenonsen (~amenonsen@pitta.toroid.org) (Remote host closed the connection)
[07:39:48] *** Joins: amenonsen (~amenonsen@pitta.toroid.org)
[07:44:00] *** Quits: xinming (~xinming@115.221.15.143) (Quit: WeeChat 3.4)
[07:45:48] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[07:51:30] *** Joins: razetime (~quassel@117.254.34.103)
[08:17:45] *** Joins: xinming (~xinming@115.221.15.143)
[08:46:35] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[08:46:58] *** Joins: tejr (~tejr@user/tejr)
[09:22:06] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[09:22:32] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[09:27:02] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[09:29:36] *** Joins: tejr (~tejr@user/tejr)
[09:30:00] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:37:14] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 250 seconds)
[09:37:42] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[09:38:35] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[09:38:48] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[09:39:00] *** Joins: tejr (~tejr@user/tejr)
[09:40:07] *** Quits: tejr (~tejr@user/tejr) (Client Quit)
[10:09:14] *** Quits: perlmaros (~perlmaros@master.k-1.com) (*.net *.split)
[10:14:34] *** Joins: perlmaros (~perlmaros@master.k-1.com)
[10:56:38] *** Quits: Summer (~summer@user/summer) (Quit: bye bye!)
[10:56:56] *** Joins: Summer (~summer@user/summer)
[11:02:50] *** Joins: tejr (~tejr@user/tejr)
[11:25:06] *** Joins: frost (~frost@user/frost)
[11:32:36] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[11:47:58] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[11:52:13] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[11:54:11] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[11:56:53] *** Quits: razetime (~quassel@117.254.34.103) (Ping timeout: 256 seconds)
[12:04:03] *** Joins: MasterDuke (~MasterDuk@90.212.72.228)
[12:06:13] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[12:07:30] *** Joins: razetime (~quassel@117.254.34.103)
[12:16:36] *** Quits: razetime (~quassel@117.254.34.103) (Ping timeout: 245 seconds)
[12:17:11] *** Joins: razetime (~quassel@117.254.34.103)
[12:59:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:29:08] *** Quits: sena_kun (~koto@94.142.239.45) (Remote host closed the connection)
[13:30:59] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[13:31:07] *** Joins: sena_kun (~koto@94.142.239.45)
[13:35:24] *** Quits: MasterDuke (~MasterDuk@90.212.72.228) (Ping timeout: 240 seconds)
[13:43:53] <tbrowder> hi, all
[13:45:45] <lizmat> tbrowder  o/
[13:46:14] <discord-raku-bot> <Nemokosch#9980> 👋
[13:48:04] <tbrowder> i need to dynamically use a class' attributes. i know it can be done (moritz demoed it) but i cannot remember the syntax. say i have a class Foo with attribute a is rw, i would like to do something like my $attr = "a".  my $o = Foo.new; $o.{$attr} = 5;
[13:48:13] <tbrowder> lizmat: hi
[13:49:00] <lizmat> $o.attr = 5
[13:49:36] <lizmat> m: class Foo { has $.a is rw }; my $f = Foo.new; $f.a = 42; dd $f
[13:49:36] <camelia> rakudo-moar 8d284d8c1: OUTPUT: «Foo $f = Foo.new(a => 42)␤»
[13:53:10] <tbrowder> yes, that's known, but how can i have an external scalar define the attribute name and use it with the class object?
[13:54:55] <tbrowder> in perl one could separate the object's arrow with whitespace and use a var for the attribute name
[13:55:42] <moritz> https://docs.raku.org/routine/get_value
[13:55:50] <moritz> also set_value
[13:56:00] <lizmat> m: class A { has $.foo = 42 }; my $a = A.new; my $b = "foo"; $a."$b"()
[13:56:00] <camelia> rakudo-moar 8d284d8c1: ( no output )
[13:56:04] <lizmat> m: class A { has $.foo = 42 }; my $a = A.new; my $b = "foo"; say $a."$b"()
[13:56:05] <camelia> rakudo-moar 8d284d8c1: OUTPUT: «42␤»
[13:56:14] <tbrowder> i'm not explaining this very well
[13:56:45] *** Joins: frost (~frost@user/frost)
[13:57:04] <tbrowder> ah, my george that's it! thnx!
[13:57:14] <tbrowder> *by
[13:57:22] <discord-raku-bot> <Nemokosch#9980> my george? xD
[13:57:47] *** Joins: Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net)
[13:57:48] <lizmat> it's a euphemism for "by Jove" I believe  :-)
[13:57:53] <Xliff> \o
[13:57:54] <tbrowder> "by george" a mild epithet
[13:57:54] <Xliff> https://gist.github.com/Xliff/74ffdc15f4c20943185f9449240c5e78
[13:58:16] <tbrowder> yes, same as by jove
[13:58:39] <discord-raku-bot> <Nemokosch#9980> I think you explained it well - that is, if you really meant this $a."$b"()
[13:59:13] *** Joins: MasterDuke (~MasterDuk@94.2.240.25)
[13:59:29] <discord-raku-bot> <Nemokosch#9980> this is too advanced language use for me o.O
[14:00:01] <tbrowder> yes. that may be in docs but i can't find it. it is probably in one of our raku/perl books
[14:06:11] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[14:09:01] <Xliff> Could someone take a look at that gist and see if I am missing something obvious which would account for the referenced error message?
[14:09:09] <Xliff> TIA
[14:12:56] <lizmat> Xliff: please provide a full stacktrace with the gist
[14:13:12] <Xliff> --ll-exception?
[14:13:16] <lizmat> yup
[14:13:39] <Xliff> One sec
[14:14:15] <Xliff> Done
[14:15:24] <lizmat> and t/10-raw-hashtable.t ?
[14:16:08] <Xliff> That's the listing in the gist.
[14:16:50] <Xliff> Added a header to make that clear.
[14:17:48] <lizmat> where is g_hash_table_insert defined ?
[14:18:20] <Xliff> In the listing to t/10-raw-hashtable.t
[14:18:36] <Xliff> It's the... 2nd sub definition
[14:18:49] <lizmat> ack
[14:18:53] <Xliff> :)
[14:19:20] <Xliff> I made this as self-contained as possible!
[14:20:01] <Xliff> My golfs tend to be an entire course. 
[14:20:30] <lizmat> why are you using := on the guint and gboolean definition ?
[14:20:46] <lizmat> could you make that "=" ?
[14:20:46] <Xliff> No particular reason. That's very old code. 
[14:20:49] <Xliff> Yes, I can.
[14:20:54] <Xliff> Do you think that would make a difference
[14:20:55] <Xliff> ?
[14:21:34] <lizmat> the "uint32" makes it suspect to me, as that has recently had changes
[14:21:38] <lizmat> internally
[14:21:41] <Xliff> Nah. No diff.
[14:24:40] <Xliff> Oh, hey! My uints are actually unsigned, now!
[14:25:13] <Xliff> nine++\
[14:25:19] <lizmat> { * }  perhaps {*} ?
[14:25:33] <Xliff> That has caught me before, but never on NC stubs. Attempting.
[14:26:06] <Xliff> Nope.
[14:26:47] <lizmat> then I'm out of ideas  :-(
[14:26:54] <Xliff> I am legit confused, because I don't know where in that code a Whatever could be injected.
[14:27:03] <Xliff> I thought like you did and couldn't fix it.
[14:27:16] <Xliff> It's weird because much of my other code works and they all use "{ * }"
[14:27:29] <Xliff> So why these particular routines?!
[14:27:46] <Xliff> lizmat: So... bug it?
[14:28:12] <lizmat> guess so... it looks like a golf people could work with
[14:28:16] <tbrowder> ref dynamic attr help: i think that's the last piece needed to port a very ugly Perl module to a much more  attractive Raku module. thanks again, lizmat (and moritz)!
[14:28:36] <Xliff> OK
[14:29:27] <tbrowder> this time i did as todd does and saved it in a README keeper
[14:34:44] <Xliff> #4820
[14:34:57] <lizmat> yeah, just saw it coming in :-)
[14:36:22] <Xliff> lizmat: Thanks for taking a look.
[14:36:27] <Xliff> Now off to $dayJob.
[15:01:02] *** Quits: razetime (~quassel@117.254.34.103) (Ping timeout: 240 seconds)
[15:04:26] *** Joins: razetime (~quassel@117.254.34.103)
[15:07:22] *** Joins: perlbot_ (~perlbot@perlbot/bot/simcop2387/perlbot)
[15:07:24] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Read error: Connection reset by peer)
[15:08:33] *** perlbot_ is now known as perlbot
[15:21:05] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[15:30:00] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:32:08] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:38:37] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[15:41:44] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[16:18:54] <Xliff> Has anyone used raku to successfully send commands to mysql?
[16:22:07] <lizmat> DBish supports MySQL, doesn't it ?
[16:41:18] <Xliff> Yes, but for reasons... I need to go through the client.
[16:42:09] <Xliff> I've tried using run(:in), but it doesn't seem to work.
[17:09:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[17:54:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:55:59] *** Quits: mjgardner (sid182628@id-182628.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[17:57:26] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[17:57:36] *** Joins: mjgardner (sid182628@id-182628.ilkley.irccloud.com)
[18:03:51] *** Quits: razetime (~quassel@117.254.34.103) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:04:06] *** Joins: razetime (~quassel@117.254.34.103)
[18:05:26] *** Quits: razetime (~quassel@117.254.34.103) (Client Quit)
[18:05:41] *** Joins: razetime (~quassel@117.254.34.103)
[18:25:36] <moritz> how does it not work?
[18:35:17] <MasterDuke> moritz: have you seen https://github.com/rakudo/rakudo/pull/4807 ?
[18:40:01] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:40:30] <Voldenet> Xliff: mysql (well, mariadb in this case) works for me http://ix.io/3SKU
[18:41:36] *** Quits: Util (~bruce@047-013-182-182.res.spectrum.com) (Ping timeout: 252 seconds)
[18:41:57] <Voldenet> I needed libmysqlclient, because DB::MySQL installs just fine even without it
[18:43:38] <Xliff> Voldenet++
[18:44:12] <Xliff> Ah, but that is not through the client. 
[18:44:20] <Xliff> No matter. I think I've worked around most of it.
[18:44:26] <Xliff> Thanks for looking, though.
[18:44:47] <Voldenet> Oh right, I missed the /through the client/ part
[18:44:54] <Xliff> :)
[18:46:25] <moritz> MasterDuke: I have, but I'm allergic to these low-level builtins, so not commenting on the PR
[18:46:40] <moritz> the part in the actions is cool though
[18:47:16] <MasterDuke> ha. well, fwiw, the one commit where i really had a question is just https://github.com/rakudo/rakudo/pull/4807/commits/72f2f40055f4307b209de08435c997fa2b5e4531
[18:54:50] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[18:55:14] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[18:55:28] <Voldenet> Xliff: http://ix.io/3SKY actually it wasn't that complicated fortunately
[18:58:04] <Voldenet> i'm sure it'd be even better with –defaults-file instead of stdin password
[18:58:57] <Voldenet> (i just wrote this for the sake of finishing what I started)
[19:05:13] <Voldenet> btw, I'm quite surprised that this way of providing password works, I wouldn't have expected that
[19:06:39] *** Joins: Sgeo (~Sgeo@user/sgeo)
[20:04:27] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:04:46] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[20:14:00] <Xliff> Voldenet: Huh! And here I was using run()!
[20:16:17] *** Quits: bdju (~bard@user/bdju) (Ping timeout: 240 seconds)
[20:18:51] *** Joins: bdju (~bard@user/bdju)
[20:29:37] *** Quits: razetime (~quassel@117.254.34.103) (Ping timeout: 240 seconds)
[20:45:32] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Ping timeout: 272 seconds)
[20:53:16] <Xliff> So.
[20:53:51] <Xliff> It turns out that if you have a NativeCall stub ala: sub malloc (uint64 $size) returns pointer is native  { * }
[20:54:05] <Xliff> You CANNOT use &malloc as a function pointer. 
[20:54:14] <Xliff> Not directly. It must be surrounded by an anonymous sub.
[20:54:34] <Xliff> Otherwise Rakudo will used the subs defined block, and ignore the NativeCall traits.
[20:54:47] <Xliff> This is the root cause of #4820
[21:32:59] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[21:38:06] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:40:21] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[21:40:50] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[21:47:57] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[22:02:26] *** Joins: donpdonp- (~donp@64.62.134.149)
[22:04:07] *** Quits: donpdonp|z_ (~donp@64.62.134.149) (Ping timeout: 256 seconds)
[22:25:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:55:35] *** Joins: p6steve (~stephenro@81.141.53.40)
[23:55:06] *** Quits: dg (~dgl@dg.wtf) (Remote host closed the connection)
