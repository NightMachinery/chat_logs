[00:01:52] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[00:03:44] *** Joins: on^ (~on@12.203.127.82)
[00:03:48] *** Joins: dr0n (~mnxaw@94.11.23.235)
[00:04:01] *** Quits: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: sizeof_void34)
[00:07:39] *** Joins: plasticmae (~plasticma@cpe-172-249-151-214.socal.res.rr.com)
[00:10:35] *** tg_ is now known as tg
[00:15:29] *** Quits: independent56 (~independe@163.172.58.132) (Read error: Connection reset by peer)
[00:16:53] *** Quits: pedr0 (~pedr0@finc-23-b2-v4wan-163318-cust230.vm7.cable.virginm.net) (Ping timeout: 265 seconds)
[00:18:28] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:18:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:18:28] *** Joins: wroathe (~wroathe@user/wroathe)
[00:22:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 246 seconds)
[00:22:56] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:23:05] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk)
[00:33:28] *** Joins: independent56 (~independe@163.172.58.132)
[00:33:30] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (Quit: Reconnecting)
[00:33:43] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[00:40:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[00:41:54] *** Joins: jpw (~jpw@user/jpw)
[00:43:30] *** Joins: fikran (~fikran@user/fikran)
[00:47:19] *** Quits: dza (~dza@user/dza) (Quit: Leaving.)
[00:49:56] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[00:57:41] *** Quits: bkircher (~bkircher@2001:a61:2444:eb01:b074:a8a9:4db6:bbaa) (Ping timeout: 264 seconds)
[00:57:49] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[01:02:54] *** Joins: artifishul (~nate@162.218.217.134)
[01:05:13] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-100d.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[01:08:15] *** Quits: int3l (~int3l@78-83-124-208.spectrumnet.bg) (Quit: Most people truly understand what it means to "follow your dreams", when it's too late)
[01:08:43] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.248)
[01:12:41] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 264 seconds)
[01:12:55] *** Joins: independent_ (~independe@163.172.58.132)
[01:12:55] *** Quits: aws (~aws@mx1.aosync.me) (Quit: WeeChat 3.0)
[01:15:26] *** Parts: pots59 (~pots@20.51.220.66) ()
[01:16:17] *** Quits: independent56 (~independe@163.172.58.132) (Ping timeout: 264 seconds)
[01:18:36] *** Joins: pots (~pots@20.51.220.66)
[01:25:17] *** Quits: independent_ (~independe@163.172.58.132) (Ping timeout: 246 seconds)
[01:29:20] *** Joins: goldfish (~goldfish@user/goldfish)
[01:31:41] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (Ping timeout: 252 seconds)
[01:31:56] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[01:38:35] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 246 seconds)
[01:40:08] *** Joins: k0ta (~k0ta@151.210.174.174)
[01:41:41] *** Joins: arcatech (~arcatech@user/arcatech)
[01:42:34] *** Joins: src_ (~src@user/src)
[01:43:10] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 260 seconds)
[01:43:26] *** Quits: on^ (~on@12.203.127.82) (Remote host closed the connection)
[01:43:50] *** Quits: adl_ (~adl@117.32.216.102) (Ping timeout: 246 seconds)
[01:43:52] *** Joins: adlternative (~adl@117.32.216.71)
[01:44:14] *** Joins: src__ (~src@user/src)
[01:45:35] *** Quits: src (~src@user/src) (Ping timeout: 246 seconds)
[01:47:29] *** Quits: src_ (~src@user/src) (Ping timeout: 264 seconds)
[01:55:10] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[01:58:23] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[02:04:08] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 246 seconds)
[02:08:44] *** Quits: daveed (~ride@user/daveed) (Quit: daveed)
[02:09:05] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.248) (Ping timeout: 264 seconds)
[02:11:59] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 268 seconds)
[02:15:17] *** Quits: sugardaddy44 (~hero-pc@static-72-73-22-17.clppva.fios.verizon.net) (Quit: Leaving)
[02:15:54] *** Joins: nctcf^ (~nctcf@12.203.127.82)
[02:20:20] *** Joins: dza (~dza@user/dza)
[02:20:44] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:20:58] *** Quits: normen (~normen@p200300d7173dc9007c1001738e22eaea.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[02:25:17] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Quit: Leaving)
[02:25:28] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:26:50] *** Quits: hikhvar796073809 (~thelounge@x4db632ad.dyn.telefonica.de) (Quit: The Lounge - https://thelounge.chat)
[02:32:45] *** Joins: blinux2 (~blinux@pool-108-48-11-122.washdc.fios.verizon.net)
[02:34:53] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:35:17] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 246 seconds)
[02:38:36] *** Joins: ninjin- (~ninjin@user/ninjin)
[02:40:20] *** Quits: ninjin (~ninjin@user/ninjin) (Remote host closed the connection)
[02:45:44] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[02:46:29] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[02:48:27] *** Quits: j416 (~j416@user/j416) (Ping timeout: 250 seconds)
[02:48:37] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:48:37] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:48:37] *** Joins: wroathe (~wroathe@user/wroathe)
[02:49:04] *** Joins: j416 (~j416@user/j416)
[02:51:08] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[02:51:38] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[02:52:53] *** Joins: fikran (~fikran@user/fikran)
[02:53:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 246 seconds)
[02:59:29] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 264 seconds)
[03:02:26] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[03:03:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:03:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:03:56] *** Joins: wroathe (~wroathe@user/wroathe)
[03:05:30] *** Joins: noarb (~noarb@user/noarb)
[03:08:30] *** Quits: src__ (~src@user/src) (Ping timeout: 264 seconds)
[03:09:51] <b0nn> https://github.com/golang/go/commit/6e81f78c0f1653ea140e6c8d008700ddad1fa0a5
[03:10:04] <b0nn> Katie's just been tweeting this
[03:11:15] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:14:30] *** blinux is now known as testuser123
[03:14:43] *** testuser123 is now known as blinux
[03:17:36] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:19:08] <Tv_> that's huge for usability *and* features of fuzzing
[03:19:38] <Tv_> like, i want that more than i want generis
[03:19:41] <Tv_> +c
[03:19:54] <Tv_> i learly have rumbs in my keyboard again
[03:20:07] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 265 seconds)
[03:29:53] *** Joins: PlasticCogLiquid (~PlasticCo@71-213-161-241.mnfd.qwest.net)
[03:34:14] *** Parts: PlasticCogLiquid (~PlasticCo@71-213-161-241.mnfd.qwest.net) ()
[03:42:36] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[03:44:07] *** Quits: Guest36 (~textual@103.104.171.53) (Read error: Connection reset by peer)
[03:51:58] *** Quits: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net) (Ping timeout: 265 seconds)
[03:53:25] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 265 seconds)
[03:53:55] <Tv_> the hardest part of writing this program has to be consistently spelling "activitity" correctly. actitity...
[03:54:38] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[03:54:53] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[03:55:23] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[03:56:25] *** Joins: rbn (~rbn@sferic.eu)
[03:58:19] *** Joins: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net)
[03:59:19] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 246 seconds)
[04:01:43] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 252 seconds)
[04:01:52] *** Parts: artifishul (~nate@162.218.217.134) ()
[04:01:58] *** Quits: blinux2 (~blinux@pool-108-48-11-122.washdc.fios.verizon.net) (Quit: Leaving)
[04:06:55] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1001)
[04:07:52] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[04:08:12] *** Quits: toretto (~ryan@user/toretto) (Killed (NickServ (GHOST command used by toretto_)))
[04:08:24] *** Quits: dr0n (~mnxaw@94.11.23.235) (Ping timeout: 265 seconds)
[04:08:28] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:08:29] *** Joins: toretto (~ryan@user/toretto)
[04:15:02] *** Joins: LiftLeft (~LiftLeft@172.98.92.20)
[04:17:29] *** Quits: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[04:20:48] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:32:06] *** Quits: darkapex (~darkapex@user/darkapex) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[04:33:19] *** Joins: darkapex (~darkapex@user/darkapex)
[04:38:33] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:42:27] *** Joins: hexfive (~eric@50.35.83.177)
[04:43:20] *** Quits: jespada (~jespada@2803:9800:9842:7a62:edd5:5e74:3ec2:1b19) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:44:04] *** ninjin- is now known as ninjin
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:50:58] *** Joins: christophergray (~christoph@190.148.52.49)
[04:52:50] *** Quits: hexfive (~eric@50.35.83.177) (Quit: WeeChat 3.0.1)
[04:52:52] *** Quits: christophergray (~christoph@190.148.52.49) (Client Quit)
[04:56:20] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 246 seconds)
[05:00:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[05:02:16] *** Joins: fikran (~fikran@user/fikran)
[05:07:18] *** Joins: maroloccio (~marolocci@89-172-7-22.adsl.net.t-com.hr)
[05:13:35] *** Joins: khanred (~khanred@user/khanred)
[05:19:53] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 264 seconds)
[05:20:30] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[05:25:35] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[05:31:39] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[05:55:59] *** Joins: roasbeef (~roasbeef@104.131.26.124)
[05:56:33] <roasbeef> anyone have a link handy that explains the columns (at the very top, but also for each entry) in the obtained pprof web alloc rendering?
[05:56:33] *** Joins: neurocyte0133 (~neurocyte@212.232.95.106)
[05:56:33] *** Quits: neurocyte0133 (~neurocyte@212.232.95.106) (Changing host)
[05:56:33] *** Joins: neurocyte0133 (~neurocyte@user/neurocyte)
[05:58:35] <roasbeef> found the old post I was thinking of, on the intel blog now, was somewhere else before iirc (or maybe not): https://software.intel.com/content/www/us/en/develop/blogs/debugging-performance-issues-in-go-programs.html
[05:58:54] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[05:58:54] *** neurocyte0133 is now known as neurocyte013
[06:06:44] *** Joins: califax- (~califax@user/califx)
[06:10:15] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[06:10:16] *** califax- is now known as califax
[06:15:38] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[06:25:22] *** Quits: omegatron (~some@p54849842.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[06:30:03] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1001) (Quit: ZNC 1.8.2 - https://znc.in)
[06:42:06] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 264 seconds)
[06:43:48] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[06:44:32] *** Quits: khanred (~khanred@user/khanred) (Quit: Leaving)
[06:47:16] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[06:47:17] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[06:50:19] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[06:50:39] *** Joins: Jigsy (~Jigsy@user/jigsy)
[07:01:55] *** Joins: fdan (~fdan@103.215.168.1)
[07:06:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[07:09:27] *** Joins: xiongxin (~quassel@119.123.103.94)
[07:10:29] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:12:27] *** Joins: fikran (~fikran@user/fikran)
[07:23:10] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:23:10] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:23:10] *** Joins: wroathe (~wroathe@user/wroathe)
[07:24:27] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[07:25:28] *** Joins: INeedAHandle (~INeedAHan@110.9.129.177)
[07:27:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[07:28:17] *** Quits: INeedAHandle (~INeedAHan@110.9.129.177) (Client Quit)
[07:44:39] *** Joins: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:84f8:4d25:dc2b:9929)
[07:47:12] *** Joins: clarjon_1 (~clarjon1@user/clarjon1)
[07:47:29] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:47:30] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:47:30] *** Joins: wroathe (~wroathe@user/wroathe)
[07:47:40] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:3d44:b4b4:9588:c922)
[07:48:41] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:543:c36:111d:461d) (Ping timeout: 264 seconds)
[07:50:17] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Ping timeout: 246 seconds)
[07:50:29] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:3d44:b4b4:9588:c922) (Ping timeout: 264 seconds)
[07:54:34] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[07:55:05] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[08:01:26] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[08:11:39] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:12:00] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[08:19:17] *** Quits: LiftLeft (~LiftLeft@172.98.92.20) (Ping timeout: 264 seconds)
[08:20:04] *** Joins: jpw (~jpw@user/jpw)
[08:25:48] *** Joins: sagax (~sagax_nb@user/sagax)
[08:26:23] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[08:43:51] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[08:46:13] *** Joins: cskr (~cskr@49.207.218.133)
[08:49:53] *** Quits: maroloccio (~marolocci@89-172-7-22.adsl.net.t-com.hr) (Ping timeout: 264 seconds)
[08:51:50] *** Joins: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr)
[09:05:35] *** Joins: LiftLeft (~LiftLeft@172.98.80.40)
[09:06:05] *** Quits: xiongxin (~quassel@119.123.103.94) (Ping timeout: 264 seconds)
[09:10:48] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[09:11:01] *** Joins: khrbt (~znc@user/khrbt)
[09:17:19] *** Joins: lompik (~lompik@user/lompik)
[09:17:26] *** Quits: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[09:19:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[09:21:00] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 268 seconds)
[09:21:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[09:21:48] *** Joins: kodah (~kodah@user/kodah)
[09:21:50] *** Joins: fikran (~fikran@user/fikran)
[09:22:28] *** Joins: artifishul (~nate@162.218.217.134)
[09:22:37] *** Joins: xiongxin (~quassel@119.123.103.94)
[09:23:59] *** Joins: c10l6 (~c10l@user/c10l)
[09:25:53] *** Quits: LiftLeft (~LiftLeft@172.98.80.40) (Ping timeout: 246 seconds)
[09:26:03] *** Parts: artifishul (~nate@162.218.217.134) ()
[09:26:11] *** Joins: artifishul (~nate@162.218.217.134)
[09:26:50] *** Parts: artifishul (~nate@162.218.217.134) ()
[09:26:55] *** Joins: artifishul (~nate@162.218.217.134)
[09:27:45] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 260 seconds)
[09:27:52] *** c10l6 is now known as c10l
[09:28:15] *** Quits: zwr (~zwr@2804:d45:b966:fb00:f689:d439:2171:256f) (Remote host closed the connection)
[09:30:09] <artifishul> Is NewFlagSet() appropriate for a subcommand that takes no args? Or should I just use something simpler?
[09:30:22] *** Quits: iskarian (~iskarian@ip24-253-39-6.lv.lv.cox.net) (Read error: Connection reset by peer)
[09:37:43] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:37:43] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:37:43] *** Joins: wroathe (~wroathe@user/wroathe)
[09:38:50] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[09:39:01] *** Joins: c10l6 (~c10l@user/c10l)
[09:39:14] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:39:44] *** Quits: c10l6 (~c10l@user/c10l) (Client Quit)
[09:40:41] *** Joins: c10l6 (~c10l@user/c10l)
[09:42:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[09:42:41] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 264 seconds)
[09:54:35] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[09:55:12] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[09:56:03] *** Quits: clarjon_1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[09:58:20] *** Joins: shka (~herr@109.231.62.239)
[10:01:40] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 268 seconds)
[10:02:51] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[10:03:35] *** Quits: tjcravey (~textual@172.126.77.130) (Quit: Textual IRC Client: www.textualapp.com)
[10:15:12] *** Joins: gggp (~textual@60.10.194.42)
[10:18:36] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[10:18:57] *** Quits: c10l6 (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[10:21:29] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 246 seconds)
[10:21:41] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 264 seconds)
[10:36:41] *** Quits: xiongxin (~quassel@119.123.103.94) (Ping timeout: 264 seconds)
[10:36:57] *** Joins: xiongxin (~quassel@113.116.32.188)
[10:38:22] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[10:40:25] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[10:54:07] *** Quits: lompik (~lompik@user/lompik) (Quit: WeeChat 3.2.1)
[10:54:53] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[10:57:53] *** Quits: xiongxin (~quassel@113.116.32.188) (Ping timeout: 246 seconds)
[10:58:51] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:59:57] *** Joins: bkircher (~bkircher@2001:a61:2444:eb01:b074:a8a9:4db6:bbaa)
[11:00:24] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[11:01:24] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Ping timeout: 246 seconds)
[11:06:36] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:11:52] *** Joins: darkapex_ (~darkapex@user/darkapex)
[11:12:15] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[11:14:35] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[11:15:02] *** Joins: darkapex (~darkapex@user/darkapex)
[11:16:55] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 264 seconds)
[11:19:24] *** Joins: hikhvar796073809 (~thelounge@x4db9198c.dyn.telefonica.de)
[11:19:56] *** Quits: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[11:20:56] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:23:12] *** Joins: xiongxin (~quassel@119.123.103.94)
[11:23:40] *** Joins: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it)
[11:24:59] *** Joins: mrig (~mrig@user/mrig)
[11:28:49] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[11:29:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[11:29:58] *** Joins: pedr0 (~pedr0@finc-23-b2-v4wan-163318-cust230.vm7.cable.virginm.net)
[11:31:14] *** Joins: fikran (~fikran@user/fikran)
[11:32:56] *** Quits: nctcf^ (~nctcf@12.203.127.82) (Remote host closed the connection)
[11:44:58] *** Quits: najatac (~najatac@d14-69-231-247.try.wideopenwest.com) (Remote host closed the connection)
[11:45:20] *** Joins: najatac (~najatac@d14-69-231-247.try.wideopenwest.com)
[11:52:49] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[11:57:56] *** Joins: gggp (~textual@60.10.194.42)
[11:59:25] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[11:59:47] *** Joins: teasea (~teasea@user/teasea)
[12:01:17] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[12:08:56] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Quit: Leaving)
[12:11:39] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Ping timeout: 276 seconds)
[12:12:22] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-a1fc-240b-f865-f529.ip6.gigabit.dk)
[12:13:17] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[12:13:30] *** Joins: mnx|aw (~mnxaw@94.11.23.235)
[12:33:37] *** Quits: cskr (~cskr@49.207.218.133) (Quit: Leaving)
[12:38:19] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (Ping timeout: 252 seconds)
[12:38:53] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[12:41:08] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[12:41:51] *** Joins: fdan (~fdan@192.146.154.3)
[12:43:14] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:43:32] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[12:44:43] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:51:53] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[12:57:13] *** Quits: gggp (~textual@60.10.194.42) (Read error: Connection reset by peer)
[12:57:33] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[13:01:54] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 264 seconds)
[13:04:38] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[13:06:07] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 264 seconds)
[13:06:58] *** Joins: mrig (~mrig@user/mrig)
[13:08:20] *** Joins: zwr (~zwr@2804:d45:b966:fb00:352e:f87c:52f3:8f6a)
[13:16:54] *** Joins: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[13:18:46] *** Joins: bomb (~bomb@user/bomb)
[13:20:51] *** Quits: xiongxin (~quassel@119.123.103.94) (Ping timeout: 265 seconds)
[13:20:54] *** Joins: xiongxin_ (~quassel@113.116.32.178)
[13:30:26] *** Joins: iluxa (~iliaf@user/iluxa)
[13:30:39] *** Quits: xiongxin_ (~quassel@113.116.32.178) (Ping timeout: 260 seconds)
[13:31:08] *** Quits: iliaf (~iliaf@user/iluxa) (Ping timeout: 260 seconds)
[13:37:42] *** Quits: crised (~crised@200.112.228.40) (Quit: Leaving.)
[13:38:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[13:40:41] *** Joins: fikran (~fikran@user/fikran)
[13:44:27] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[13:44:49] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[13:58:23] *** Joins: Guest61 (~Guest61@ip205-195.ksvvnet.fi)
[13:58:41] *** Quits: Guest61 (~Guest61@ip205-195.ksvvnet.fi) (Client Quit)
[13:59:04] *** Joins: create-your-acco (~create-yo@ip205-195.ksvvnet.fi)
[14:00:14] *** Quits: create-your-acco (~create-yo@ip205-195.ksvvnet.fi) (Client Quit)
[14:00:25] *** Quits: carlavilla (~carlavill@2a0c:5a84:3206:a800:221:6bff:fe3b:cee4) (Quit: awwww)
[14:00:47] *** Joins: carlavilla (~carlavill@2a0c:5a84:3206:a800:221:6bff:fe3b:cee4)
[14:06:48] *** Joins: Atque (~Atque@user/atque)
[14:11:16] *** Joins: fdan94 (~fdan@192.146.154.3)
[14:12:05] *** Quits: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it) (Ping timeout: 265 seconds)
[14:12:25] *** Joins: absc1 (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it)
[14:14:11] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 256 seconds)
[14:20:11] *** Quits: k0ta (~k0ta@151.210.174.174) (Ping timeout: 246 seconds)
[14:20:25] *** Parts: artifishul (~nate@162.218.217.134) ()
[14:21:16] *** Quits: absc1 (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it) (Ping timeout: 265 seconds)
[14:22:30] *** Joins: absc (~absc@access03.colt-engine.it)
[14:24:41] *** Joins: kayprish (~kayprish@46.240.130.158)
[14:27:07] *** Joins: absc1 (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it)
[14:28:46] *** Quits: absc (~absc@access03.colt-engine.it) (Read error: Connection reset by peer)
[14:30:20] *** Joins: on^ (~on@12.203.127.82)
[14:30:56] *** Quits: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr) (Quit: WeeChat 3.0)
[14:32:10] *** Joins: eduardas (~eduardas@93.93.57.5)
[14:33:05] *** Quits: absc1 (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it) (Ping timeout: 264 seconds)
[14:34:19] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:37:08] *** Quits: kayprish (~kayprish@46.240.130.158) (Remote host closed the connection)
[14:40:20] *** Joins: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it)
[14:41:13] *** Quits: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it) (Remote host closed the connection)
[14:48:20] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:c420:6d94:fde4:9ca)
[14:50:42] <bomb> is GoLand a good IDE?
[14:55:03] *** Joins: xiongxin (~quassel@119.123.102.205)
[14:57:41] *** Quits: mnx|aw (~mnxaw@94.11.23.235) (Ping timeout: 264 seconds)
[14:59:21] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[15:01:25] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[15:10:49] *** Quits: fdan94 (~fdan@192.146.154.3) (Quit: Client closed)
[15:12:18] <nitrix> What do you look for in an IDE?
[15:15:33] <bomb> just project management. I don't need auto-completion
[15:16:23] <nitrix> Project management is large, mind being more specific.
[15:17:49] <bomb> you know, something that handles dependencies, builds, texting, etc. visually
[15:18:19] <nitrix> It has a large enough userbase that the chances someone else had similar needs to yours before are pretty significant. I would assume there's a solution to most things, either as a built-in feature, a configuration option in the settings or a community extension.
[15:20:14] *** Quits: carlavilla (~carlavill@2a0c:5a84:3206:a800:221:6bff:fe3b:cee4) (Remote host closed the connection)
[15:20:15] <bomb> gotcha
[15:20:17] <nitrix> Dependencies... I'm not sure. It automatically manages imports, suggest `god mod` operations when modules are missing, generates and lets you customize your build configurations (environment variables, working directory, etc).
[15:20:39] <nitrix> I don't know, that's a pretty basic requirement for an IDE, they kinda all do that.
[15:20:55] <nitrix> I guess GoLand is "good".
[15:20:57] <bomb> are those things tedious to manage manually, without an IDE?
[15:21:21] <bomb> I was raised by a strict Java parents
[15:21:53] <nitrix> Not at all. Usually people compliment IDEs on finding references (GoLand can tell you which types implement a given interface, you can click to get to it, etc).
[15:22:26] <nitrix> Or autocompletion, or real-time type checking, typos, code smells, suggestions, ...
[15:23:09] <bomb> yeah my codebases are tiny, I might need them
[15:23:25] <nitrix> Or workflow integration like Version Control Systems (e.g. git), pull requests (GitHub/GitLab), JIRA, whatever.
[15:23:43] <bomb> second question, can you recommend a Go book that covers all these bits?
[15:24:02] *** Joins: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it)
[15:24:19] <nitrix> What? Those aren't related to the language.
[15:24:23] <bomb> I'm eyeing this one at the moment: https://www.amazon.com/Learning-Go-Idiomatic-Real-World-Programming/dp/1492077216
[15:25:05] <bomb> I was referring to the Go-specific project parts that's handled by the IDE
[15:26:06] <nitrix> I feel like the IDE's documentation would be better suited for that?
[15:27:03] <nitrix> How it decides to make Go development easier doesn't have much to do with Go in itself. You'd learn those two things independently.
[15:27:04] <bomb> you convinced me that I don't need an IDE
[15:29:18] <nitrix> You don't need one, it's useful to have one though.
[15:32:28] *** Joins: carlavilla (~carlavill@2a0c:5a84:3206:a800:221:6bff:fe3b:cee4)
[15:36:30] *** Joins: jespada (~jespada@2803:9800:9842:7a62:edd5:5e74:3ec2:1b19)
[15:38:37] *** Joins: gggp (~textual@60.10.194.42)
[15:39:39] *** Quits: bomb (~bomb@user/bomb) (Ping timeout: 276 seconds)
[15:42:28] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[15:47:41] *** Joins: Everything (~Everythin@37.115.210.35)
[15:48:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[15:48:36] *** Quits: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it) (Remote host closed the connection)
[15:50:35] *** Joins: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it)
[15:50:48] *** Joins: fikran (~fikran@user/fikran)
[15:54:37] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[15:54:53] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[16:01:03] *** Joins: rockyh2 (~rockyh@user/rockyh)
[16:02:10] *** Quits: rockyh (~rockyh@user/rockyh) (Ping timeout: 240 seconds)
[16:04:23] *** Quits: rockyh2 (~rockyh@user/rockyh) (Client Quit)
[16:04:42] *** Joins: rockyh (~rockyh@user/rockyh)
[16:17:37] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 252 seconds)
[16:18:19] *** Joins: andlabs (~andlabs@70.107.171.168)
[16:22:12] *** Joins: gggp (~textual@60.10.194.42)
[16:24:05] *** Quits: bkircher (~bkircher@2001:a61:2444:eb01:b074:a8a9:4db6:bbaa) (Ping timeout: 246 seconds)
[16:31:04] *** Joins: DM430784215 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[16:33:10] *** Quits: DM43078421 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[16:33:10] *** DM430784215 is now known as DM43078421
[16:38:34] *** Joins: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f)
[16:41:50] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[16:49:16] <nathan> I programmed for a full decade with Notepad alone
[16:49:17] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 264 seconds)
[16:50:30] *** Quits: Thedarkb-Work (~Thedarkb@62.232.253.82) (Quit: Leaving)
[16:52:08] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:05:28] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 252 seconds)
[17:06:31] *** Joins: Torro (Torro@gateway/vpn/protonvpn/torro)
[17:07:33] <FUZxxl> Hello!
[17:07:43] <FUZxxl> Are there build tags for GOARM, GOAMD64, ... values?
[17:09:20] <siXy> FUZxxl: https://pkg.go.dev/cmd/go#hdr-Build_constraints
[17:11:42] <FUZxxl> siXy: so... that's a no?
[17:12:01] <FUZxxl> I mean I am aware of the documentation
[17:12:11] <FUZxxl> if it had something on this subject I wouldn't be asking the question
[17:12:44] *** Quits: rockyh (~rockyh@user/rockyh) (Ping timeout: 246 seconds)
[17:12:49] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:13:13] <siXy> that page tells you how to include a file only when building on arm, or on x86_64, or whatever.
[17:13:36] <siXy> if that doesn't answer your question, I guess you need to rephrase your question more clearly
[17:14:08] *** Joins: rockyh (~rockyh@user/rockyh)
[17:14:47] <FUZxxl> siXy: do you know what GOARM does?
[17:15:04] <FUZxxl> it's an environment variable that selects which variant of the ARM instruction set is used
[17:15:14] <FUZxxl> i.e. armv5, armv6, or armv7
[17:15:25] <FUZxxl> all of these have GOARCH=arm, but support different instructions
[17:15:55] <FUZxxl> so for example if I have an optimised assembly code path that only works with armv6 or newer,
[17:16:05] <FUZxxl> I need a build tag to only include it there
[17:17:23] <FUZxxl> siXy: does this clarify the question?
[17:18:25] <siXy> yeah, you can't do that (currently). I'd use a makefile for now, and add a +1 to https://github.com/golang/go/issues/7211 with your usecase.
[17:19:21] <FUZxxl> I had found this issue before
[17:19:29] <FUZxxl> but thought that it was outdated
[17:19:37] <FUZxxl> I mean the main discussion is from 2014
[17:19:53] <FUZxxl> and changes like this should probably undergo the proposal process these days
[17:21:14] <siXy> I'm not entirely sure what the correct workflow would be - that's a good question. I guess you could start a new proposal with a reference to the older issue, though I suspect one will be deduped into the other.
[17:21:28] <siXy> Either way, you can make it work with a makefile for now
[17:21:30] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:22:17] *** Quits: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[17:22:52] <FUZxxl> siXy: Makefile means it won't work for libraries (which my case is)
[17:23:35] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[17:27:34] <siXy> mm, that's fair. You could probably hack it together with generate, but a) that's pretty ugly and b) still requires users to remember to do the generate step in their build process
[17:28:02] <FUZxxl> again that doesn't work with modules
[17:28:07] <FUZxxl> i.e. libraries
[17:28:21] <FUZxxl> Go modules need to have all generated code included
[17:28:36] <FUZxxl> the go build process won't run generators on dependencies for a good reason
[17:32:39] <siXy> you can run go generate for a module, that part works. The messy bit is that you need to tell users to do so in your docs.
[17:33:38] <FUZxxl> siXy: again then the library cannot be used as is as a go module
[17:33:48] <FUZxxl> so it'll be useless
[17:34:15] <FUZxxl> (also, go generate will have to be rerun for every GOARM value so it's even messier)
[17:34:33] <Tv_> FUZxxl: for e.g. crypto library, the correct answer might be build in all variants, detect at runtime
[17:34:56] <FUZxxl> Tv_: that's what I do right now, but that means I have an unremovable dynamic dispatch overhead
[17:35:33] <Tv_> FUZxxl: you can eliminate that pretty well with sync.Once or an api style where New is more rare (details depend on details)
[17:35:58] <Tv_> though arm probably takes a heavier hit than x86 on such
[17:36:06] <Tv_> on x86, correctly-predicted branches are near free
[17:36:09] <FUZxxl> Tv_: I compute the right function to use on startup, that part works fine
[17:36:22] <FUZxxl> indirect function calls are expensive
[17:36:33] <FUZxxl> they can be predicted, but performance suffers regardless
[17:37:24] <FUZxxl> (actually I wanted to use a sync.Once-style design pattern for the initialisation, but I kept running into cyclic dependency issues with initialisers)
[17:37:28] <Tv_> FUZxxl: hmm that makes me wonder about the difference between a var foo func(...) vs an explicit ifs and calls
[17:37:55] <FUZxxl> Tv_: there are more than two possible functions, so it would be a cascade of if-statements otherwise
[17:38:06] <Tv_> a switch, but sure
[17:38:37] <FUZxxl> which is compiled into either an indirect jump or a cascade of conditional jumps
[17:38:50] <FUZxxl> and if it's an indirect jump, it is preceded by a conditional jump for the range check
[17:39:31] <Tv_> yeah
[17:40:04] <FUZxxl> so the thing is, with conditional compilation I can get rid of all this junk
[17:40:08] <FUZxxl> and it would work just fine.
[17:41:37] <Tv_> looks like stdlib mostly just splits _arm.go vs _arm64.go, doesn't separate asm optimizations for GOARM
[17:42:05] <FUZxxl> arm and arm64 are separate architectures
[17:42:16] <FUZxxl> with entirely different instruction sets, so sharing code is not possible
[17:42:29] <FUZxxl> existing asm code mostly does runtime dispatch
[17:42:36] <FUZxxl> which comes at a nasty performance penalty
[17:42:43] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[17:43:32] *** Joins: LTCD (~LTCD@2a02:c7f:dd1c:b600:871:25f0:69e7:9553)
[17:45:18] <Tv_> FUZxxl: https://github.com/golang/go/issues/22106
[17:46:21] <LTCD> Hey. Sorry guys, I am trying to use github.com/google/gofuzz but so far everything has broken at every step. I am trying to do things locally, so I did go mod init github.com/google/gofuzz which created a go.mod file in the same directory on my desktop. However, whenever I do go run fuzzy.go I get this error: fuzzy.go:5:8: package gofuzz is not in
[17:46:21] <LTCD> GOROOT (/usr/local/go/src/gofuzz).
[17:46:48] <LTCD> (I love GO Lang but the package system reminds me on 1990s Linux package management.)
[17:47:35] <Tv_> LTCD: the import path is not "gofuzz"
[17:48:14] <Tv_> also gofuzz has some kludges that are gonna hurt, fuzzing will be integrated in the usual testing in go1.18
[17:49:01] <FUZxxl> LTCD: GOROOT should be set to where your Go installation is, not to where the package is
[17:49:13] <FUZxxl> and do not put third party code into the Go installation
[17:49:34] <FUZxxl> the directory structure for third-party packages (pre gomod) is under GOPATH
[17:49:40] <FUZxxl> which must be distinct from GOROOT
[17:49:54] *** Quits: carlavilla (~carlavill@2a0c:5a84:3206:a800:221:6bff:fe3b:cee4) (Remote host closed the connection)
[17:50:20] <FUZxxl> post go.mod, you should be able to just type "go get github.com/google/gofuzz" inside your own project and it should automatically register gofuzz as a dependency
[17:50:23] *** Joins: LiftLeft (~LiftLeft@172.98.92.58)
[17:51:19] <LTCD> FUZxxl I never even set a GOROOT before, and I have no idea where the package is (I assume because I was in a desktop folder when I did go init github.com/google/gofuzz the module is within the aforementioned desktop folder?).
[17:51:55] *** Joins: carlavilla (~carlavill@2a0c:5a84:3206:a800:221:6bff:fe3b:cee4)
[17:52:08] <FUZxxl> LTCD: there is no command "go init"
[17:52:18] <FUZxxl> not setting GOROOT is correct
[17:52:50] <FUZxxl> change your working directory into the project folder for your own code
[17:52:56] <FUZxxl> then type "go get github.com/google/gofuzz"
[17:53:07] <FUZxxl> this should register gofuzz as a dependency in go.mod and go.sum
[17:53:18] <FUZxxl> the code for gofuzz is stored int he module cache
[17:53:22] <FUZxxl> you do not need to care about it
[17:53:24] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:53:57] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[17:54:12] <FUZxxl> you can then just import gofuzz using an import directive
[17:54:17] <FUZxxl> just like any other package
[17:54:23] <FUZxxl> import "github.com/google/gofuzz"
[17:54:38] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[17:54:51] <LTCD> Okay so I have opened the folder on my desktop called notification. Inside of it, where my go source code is in the terminal I have typed go get github.com/google/gofuzz. So I write at top of my code import "github.com/google/gofuzz" like that?
[17:55:02] <FUZxxl> yeah
[17:55:02] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[17:55:30] <FUZxxl> is there already a go.mod file in your project?
[17:55:39] <FUZxxl> if not, you might need to do a "go mod init" first to make one
[17:55:52] <LTCD> I'll get back to you later, cheers. I think my problem earlier was I wrote after the package.
[17:56:42] <FUZxxl> ok
[17:57:48] *** Quits: rockyh (~rockyh@user/rockyh) (Ping timeout: 265 seconds)
[17:58:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[17:59:12] <LTCD> Ignore my 2nd last comment above/
[17:59:25] *** Joins: rockyh (~rockyh@user/rockyh)
[18:00:11] *** Joins: fikran (~fikran@user/fikran)
[18:01:08] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[18:10:26] *** Joins: edrocks (~Ed@user/edrocks)
[18:14:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:14:16] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:14:16] *** Joins: wroathe (~wroathe@user/wroathe)
[18:26:47] *** Quits: freswa (~freswa@static.3.158.69.159.clients.your-server.de) (Quit: Bye!)
[18:27:30] *** Joins: freswa (~freswa@2a01:4f8:1c0c:804b::2)
[18:28:19] *** Joins: chripell (~chripell@host-79-20-15-48.retail.telecomitalia.it)
[18:39:17] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[18:40:20] *** Quits: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de) (Quit: Ping timeout (120 seconds))
[18:40:41] *** Joins: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de)
[18:41:03] *** Joins: marcel7 (~marcel@user/marcel)
[18:41:05] *** Joins: pinpox0 (~pinpox@v2202101107577140883.nicesrv.de)
[18:41:10] *** Quits: Jmainguy (~Jmainguy@phy01.standouthost.com) (Ping timeout: 252 seconds)
[18:41:10] *** Quits: pupskuchen (~pupskuche@user/pupskuchen) (Ping timeout: 252 seconds)
[18:41:13] *** Joins: muesli7 (~muesli@fribbledom.com)
[18:41:43] *** Quits: binkers (~binkers@user/binkers) (Ping timeout: 252 seconds)
[18:41:49] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[18:42:01] *** Joins: Jmainguy (~Jmainguy@phy01.standouthost.com)
[18:42:08] *** Joins: pupskuchen (~pupskuche@user/pupskuchen)
[18:42:16] *** Quits: tristero (~nobody@user/tristero) (Ping timeout: 252 seconds)
[18:42:16] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (Ping timeout: 252 seconds)
[18:42:49] *** Quits: Kyros (~kyros@user/kyros) (Ping timeout: 252 seconds)
[18:42:49] *** Quits: muesli (~muesli@fribbledom.com) (Ping timeout: 252 seconds)
[18:42:49] *** Quits: sweater (~sweater@206.81.18.26) (Ping timeout: 252 seconds)
[18:42:50] *** muesli7 is now known as muesli
[18:43:10] *** Joins: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de)
[18:43:22] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Ping timeout: 252 seconds)
[18:43:22] *** Quits: flam (flam@clairlair.xyz) (Ping timeout: 252 seconds)
[18:43:22] *** Quits: marcel (~marcel@user/marcel) (Ping timeout: 252 seconds)
[18:43:22] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (Ping timeout: 252 seconds)
[18:43:22] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (Ping timeout: 252 seconds)
[18:43:22] *** marcel7 is now known as marcel
[18:43:22] *** pinpox0 is now known as pinpox
[18:43:37] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[18:44:38] *** Joins: sweater (~sweater@206.81.18.26)
[18:44:58] *** Joins: Kyros (~kyros@user/kyros)
[18:46:08] <LTCD> Sorry guys, I am still having trouble. So I have a folder called notification with my notification.go file within. I have done go get github.com/google/gofuzz within that notification folder. I can see a go.mod and a go.sum file within folder.
[18:46:10] *** Joins: binkers (~binkers@user/binkers)
[18:46:18] <LTCD> My code with command and error: https://pastebin.com/Xrk4MZFa
[18:47:30] *** Quits: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[18:49:20] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:c420:6d94:fde4:9ca) (Ping timeout: 246 seconds)
[18:49:53] *** Joins: flam (flam@clairlair.xyz)
[18:52:25] *** Quits: andlabs (~andlabs@70.107.171.168) (Ping timeout: 265 seconds)
[18:54:44] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[18:55:41] *** Joins: tristero (~nobody@user/tristero)
[18:56:36] *** Joins: andlabs (~andlabs@70.107.171.168)
[18:57:21] *** Joins: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr)
[18:59:39] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Read error: Connection reset by peer)
[18:59:47] *** Quits: nekron (~nekron@noordsee.de) (Quit: ZNC 1.8.2 - https://znc.in)
[18:59:54] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[19:00:01] *** Joins: nekron (~nekron@noordsee.de)
[19:00:25] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 252 seconds)
[19:00:33] *** Quits: andlabs (~andlabs@70.107.171.168) (Client Quit)
[19:01:04] <FUZxxl> LTCD: what do you expect "go run" to do?
[19:01:22] <LTCD> Execute the file.
[19:01:30] <FUZxxl> the file is not a main program
[19:01:35] <FUZxxl> it doesn't even have a main function
[19:01:39] <FUZxxl> how can it be executed?
[19:01:45] <LTCD> Okay, so how do I do it thne?
[19:01:57] <LTCD> then
[19:02:03] <FUZxxl> name your package main
[19:02:08] <FUZxxl> and put your code into the main function
[19:02:13] <FUZxxl> then you should be able to fuzz your code
[19:02:26] <LTCD> But the package is called notification
[19:02:27] <FUZxxl> as in, should be able to go run the code to fuzz it
[19:02:39] <FUZxxl> make a separate main package
[19:02:50] <FUZxxl> or hook up the fuzzing code to the test infrastructure
[19:03:00] <FUZxxl> this isn't really a gofuzz related problem
[19:03:05] <FUZxxl> but rather about how Go works
[19:03:10] <LTCD> So I need to make a new file called main.go, then use that main to call fuzzy.go, which then calls the notification.go stuff... woha
[19:03:48] *** Joins: andlabs (~andlabs@70.107.171.168)
[19:04:50] <LTCD> But how can I rename Fuzz to main, because then main would require command line arguments.
[19:04:52] <FUZxxl> that's one way
[19:05:04] <FUZxxl> have you ever written a Go program before?
[19:05:27] <LTCD> No, because then I would need to specify arguments look at the bytes array stuff - that would handled by something else before, surely?
[19:05:41] <FUZxxl> the main function does not take arguments
[19:05:53] <FUZxxl> it might be a good idea to do a basic Go tutorial before diving into fuzz testing
[19:07:44] *** Quits: eduardas (~eduardas@93.93.57.5) (Quit: Konversation terminated!)
[19:08:09] <LTCD> Same error https://pastebin.com/MwpzUMu4
[19:08:23] <LTCD> Also does not look like it should work, seeing as now it's missing the byte stuff.
[19:08:24] <FUZxxl> the package must be called main, not Main
[19:08:36] <FUZxxl> and the function must be called main, not Main
[19:08:51] <FUZxxl> again I do not understand what you are trying to achieve
[19:09:15] <LTCD> Okay, problem solved, but next problem is following this tutorial I have severely altered the Fuzz function: https://github.com/google/gofuzz
[19:09:23] *** Joins: samlamamma (~samlamamm@proxy01.se.axis.com)
[19:09:23] <FUZxxl> same with your original code, how did you imagine it to be executed?  Where did you imagine the byte array to come from?
[19:09:38] <LTCD> I thought the *insert God knows what* sorted it for me?
[19:10:07] <LTCD> I watched a YouTube tutorial the other day, they had no main function and were able to use what I had to start fuzzing.
[19:10:08] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:3d44:b4b4:9588:c922)
[19:10:39] <LTCD> It's like obviously it needs a main package and function, main is a word used across lots of programming languages. However, the tutorial on that page and a YouTube tutorial just c/ped and it worked fine./
[19:11:00] <FUZxxl> Perhaps follow the example_test.go file first
[19:11:10] <FUZxxl> it shows you how to hook up fuzzing to the testing infrastructure
[19:11:30] <FUZxxl> or try doing exactly what the Youtube tutorial did
[19:11:45] <FUZxxl> the code you copied into your main function is actually not a full fuzzer example
[19:11:56] <FUZxxl> but rather an example for how the conversion logic works
[19:12:10] <FUZxxl> example_test.go has examples for setting up fuzzers
[19:12:33] <LTCD> Fair enough.
[19:13:38] <FUZxxl> Each function starting with Example... is like a main function
[19:13:45] <FUZxxl> you should be able to use these to get started
[19:13:48] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:3d44:b4b4:9588:c922) (Ping timeout: 268 seconds)
[19:14:33] <LTCD> Thank you, I never knew that.
[19:14:36] *** Joins: igneous (~igneous@user/igneous)
[19:15:17] <FUZxxl> consider reading up on the testing infrastructure
[19:15:21] <FUZxxl> it's extremely useful
[19:15:32] <FUZxxl> start with the documentation of the testing package
[19:15:37] <FUZxxl> read it from beginning to end
[19:15:41] *** Quits: adlternative (~adl@117.32.216.71) (Ping timeout: 264 seconds)
[19:19:16] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:56ec:93f7:805d:a273:a1c5) (Quit: Leaving)
[19:20:14] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:56ec:93f7:805d:a273:a1c5)
[19:22:10] <Tv_> go-fuzz builds the code-being-fuzzed into an executable, you don't write an explicit func main for that
[19:22:29] <Tv_> https://github.com/tv42/zbase32/blob/master/fuzz.go <-- just that, and then what go-fuzz tells you to do
[19:23:06] <Tv_> i have no idea why this is so hard?
[19:23:45] <Tv_> you call go-fuzz-build and go-fuzz, with the appropriate arguments
[19:26:31] *** Quits: __alex_ (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Quit: I quit)
[19:26:34] <LTCD> So I put fuzz.go into the same folder. Then go-fuzz-build and go-fuzz
[19:27:27] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[19:27:54] <Tv_> well actually no, now you're talking about google/gofuzz
[19:28:02] <Tv_> which is just a library
[19:28:09] <Tv_> i'm talking about fuzzing the whole concept
[19:28:16] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[19:28:43] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[19:28:49] <Tv_> for which the best released tool is https://github.com/dvyukov/go-fuzz
[19:29:02] <Tv_> just generating random data != proper fuzzing
[19:29:05] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[19:30:29] <Tv_> that google/gofuzz library is a naive helper on top of https://github.com/dvyukov/go-fuzz
[19:30:40] <LTCD> I want to use Google Fuzz directly.
[19:30:41] <Tv_> one that largely destroys the ability of fuzzing to work well
[19:30:52] <Tv_> lol, "Google Fuzz"
[19:30:59] *** Joins: thing (~thing@user/thing)
[19:31:21] <Tv_> the only thing https://github.com/google/ means is "written by someone employed by Google"
[19:31:30] <Tv_> (because they have a horrible employment contract)
[19:31:53] <samlamamma> Tv_: It's good to see that Googler code really is variable, no need to put them on a peddle stool :-)
[19:32:29] <Tv_> https://github.com/google/gofuzz is a *bad idea* that *should not be used for fuzzing*
[19:32:48] <Tv_> it destroys the guidedness of fuzzing, making it practically never find interesting behavior
[19:33:05] *** Quits: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[19:33:26] <Tv_> but hey, since it was written by a googler it must be perfect... :-/
[19:33:31] *** Joins: lidenbrock (~lidenbroc@2804:14c:32:8120:84ff:5362:4b52:33e4)
[19:33:36] <Tv_> also, applying tools without understanding!
[19:33:43] <FUZxxl> Tv_: oh hey that makes sense
[19:33:45] <FUZxxl> cool
[19:34:11] <Tv_> FUZxxl: google/gofuzz squeezes the input []byte through a PRNG. good luck making guided mutations of input data like that.
[19:34:19] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[19:34:21] <Tv_> the go1.18 stuff is, i believe, doing it right
[19:34:32] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[19:34:37] <Tv_> and dvyukov/go-fuzz just hands you a []byte and lets you DTRT yourself
[19:34:41] <FUZxxl> Tv_: yeah, guided fuzzing is important
[19:35:01] <FUZxxl> my old boss used AFL to fuzz his shell and was always amazed at the syntactical oddities the fuzzer came up with
[19:35:38] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[19:35:58] <siXy> it's easy to hold afl incorrectly
[19:36:17] <Tv_> FUZxxl: at ex-job, i lead a small team into making a grammar-based randomized S3 request generator, because AWS docs are near worthless
[19:36:44] <Tv_> FUZxxl: we ended up with 3 overlapping sets: behavior AWS docs claim, behavior S3 implements, behavior our code did
[19:37:15] *** Joins: x28girl (~x28girl@user/x28girl)
[19:37:42] <Tv_> grammars are very neat for protocol request generation, to explore the behavior
[19:38:04] <Tv_> (as opposed to fuzzing for security; though you can always populate the fuzzer corpus from the grammar thing)
[19:39:17] <FUZxxl> Tv_: former boss didn't teach AFL a grammer
[19:39:31] <FUZxxl> it came up with that on its own (and promptly crashed the parser, which was the desired result)
[19:39:33] <Tv_> yeah just the corpus + guided makes it discover a bunch
[19:39:56] <Tv_> we just, you know, had to pay per request for the attempts against a cloud service, and had no guidance
[19:40:32] <Tv_> it was more explore docs-vs-reality and interchangeability of competing products
[19:41:58] <FUZxxl> hm yes that makes sense
[19:42:12] <FUZxxl> "attempt against a cloud service" sounds like some sort of crime
[19:42:40] <Tv_> let's say they mostly were valid HTTP requests ;)
[19:42:46] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 252 seconds)
[19:43:07] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:43:13] <Tv_> injecting things HTTP doesn't allow into headers leads to some interesting behaviors
[19:43:53] <Tv_> also things like can you reflect back a mime content-type with a newline in it
[19:44:21] *** Joins: mnx|aw (~mnxaw@94.11.23.235)
[19:44:22] <Tv_> and if not, what error is produced
[19:45:17] *** Quits: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr) (Quit: WeeChat 3.0)
[19:46:43] <saml> for v1,v2 problem, do you also replicate writes to v2 back to v1 cause older clients still use v1 for read?  bidrectional v1<->v2 replication sounds hard to implement (easy to get infinite loop)
[19:47:39] *** Joins: pinky (pinky@minime.fef.net)
[19:47:45] *** Quits: samlamamma (~samlamamm@proxy01.se.axis.com) (Quit: Client closed)
[19:51:07] <pinky> anyone using bazel? but to more generalize my question, is there a right way to set up a go project where it'll just exist locally and http request by go get won't be made?
[19:51:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[19:53:55] <Tv_> saml: generally you update code to avoid that, even if you keep the old REST API; your problems really are self-inflicted
[19:54:05] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 246 seconds)
[19:54:09] <Tv_> pinky: with bazel, go get is never run
[19:54:19] *** Joins: mrig_ (~mrig@user/mrig)
[19:54:24] <pinky> it was being run by gazelle
[19:54:29] <siXy> pinky: If you're using bazel you don't want to go get things - you clone them into a bazel dir and add BUILD files for them
[19:54:34] *** mrig_ is now known as mrig
[19:54:40] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[19:55:04] <pinky> gazelle: finding module path for import domain.com/repo/lib/go/certrenew: go get: unrecognized import path "domain.com/repo/lib/go/certrenew": reading https://domain.com/repo/lib/go/certrenew?go-get=1: 404 Not Found
[19:55:09] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[19:55:45] <pinky> trying to move this project into a monorepo type structure where i'll use bazel
[19:56:00] <pinky> i'm a bazel noob, and go modules have always kinda confused me anyway
[19:56:31] <siXy> pinky: https://brendanjryan.com/2018/05/12/building-go-applications-with-bazel.html might help
[19:57:12] <Tv_> pinky: maybe you didn't set gazelle:prefix (right)?
[19:57:32] <Tv_> https://github.com/bazelbuild/bazel-gazelle/blob/master/Design.rst#resolving-dependencies "Otherwise, the import path is considered external and ..."
[19:57:37] <pinky> I have: # gazelle:prefix domain.com
[19:58:01] <pinky> the top of my go.mod is: "module domain.com/repo" so maybe thats the issue
[19:59:30] *** Joins: jorb (~jorb@pool-71-163-48-80.washdc.fios.verizon.net)
[19:59:32] <pinky> oh crap, that worked
[19:59:37] <pinky> thanks for the help :)
[19:59:45] * Tv_ wonders how long it'll be until someone rewrites bazel in rust
[19:59:52] <pinky> hehe
[20:00:17] *** Quits: Torro (Torro@gateway/vpn/protonvpn/torro) (Quit: leaving)
[20:00:19] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[20:03:59] *** Joins: ztx (~ztx@user/ztx)
[20:05:23] <LTCD> Hey. I deleted everything and started again. I am following this tutorial https://go.dev/blog/fuzz-beta I cannot get gotip to install using the recommended command or go install golang.org/dl/gotip@latestgo install golang.org/dl/gotip@latest
[20:05:27] <LTCD> Sorry for double paste.
[20:05:54] <FUZxxl> LTCD: please post the output of "go version"
[20:06:07] <LTCD> go version go1.17.1 linux/amd64
[20:06:28] <FUZxxl> what happens when you do " go install golang.org/dl/gotip@latestgo"
[20:07:47] <LTCD> go install: golang.org/dl/gotip@latestgo: golang.org/dl/gotip@latestgo: invalid version: unknown revision l
[20:07:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[20:07:57] *** Quits: mooff (~mooff@awful.cooking) (Quit: Quit)
[20:08:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:08:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:08:04] *** Joins: wroathe (~wroathe@user/wroathe)
[20:08:06] <FUZxxl> sorry it must be @latest, not @latestgo
[20:08:08] <LTCD> go install: golang.org/dl/gotip@latestgo: golang.org/dl/gotip@latestgo: invalid version: unknown revision latestgo  **
[20:08:20] <FUZxxl> so
[20:08:25] <FUZxxl> go install golang.org/dl/gotip@latest
[20:08:32] <LTCD> Okay, I used latest, no errors.
[20:08:37] <FUZxxl> cool
[20:08:45] <LTCD> I did that before, when I do gotip it's unknown command.
[20:08:50] <FUZxxl> now there should be a binary named gotip in $GOPATH/bin
[20:08:56] <LTCD> gotip: command not found
[20:09:08] <FUZxxl> again, the binary is in $GOPATH/bin
[20:09:10] <LTCD> I do not have $GOPATH set.
[20:09:13] *** Joins: mooff (~mooff@awful.cooking)
[20:09:16] <FUZxxl> if that isn't in your $PATH the shell won't find it
[20:09:22] <FUZxxl> check go env for the value of $GOPATH
[20:09:34] *** Joins: fikran (~fikran@user/fikran)
[20:10:06] <LTCD> GOPATH="/home/lou/go"
[20:10:18] <FUZxxl> then it should be in /home/lou/go/bin
[20:10:22] <FUZxxl> check if it is there
[20:10:29] <FUZxxl> and then execute the binary
[20:10:50] <LTCD> How can I set $GOPATH though, and other envs?
[20:11:01] <LTCD> Just to stop these problems reoccurring again.
[20:11:41] <LTCD> I assume editing $HOME/.bashrc or something.
[20:11:41] *** Joins: iamzero (~iamzero@2a02:2f0f:9109:8d00:719e:a0a5:6129:cf10)
[20:12:03] *** Quits: x28girl (~x28girl@user/x28girl) (Remote host closed the connection)
[20:12:20] <LTCD> I executed gotip but error gotip: not downloaded. Run 'gotip download' to install to /home/lou/sdk/gotip
[20:12:31] <LTCD> gotip download error is command not found.
[20:12:47] *** Joins: x28girl (~x28girl@user/x28girl)
[20:13:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[20:13:33] <LTCD> FUZxxl *
[20:13:33] *** Quits: x28girl (~x28girl@user/x28girl) (Remote host closed the connection)
[20:13:43] <FUZxxl> man of course you need to run gotip download in a way that your shell knows which binary to run
[20:13:52] <FUZxxl> so again unless it is already in your PATH, you have to type
[20:13:58] <FUZxxl> /home/lou/sdk/gotip download
[20:14:01] <FUZxxl> just like with any other binary
[20:14:25] <FUZxxl> we have already established that gotip is not in your PATH
[20:14:46] <FUZxxl> so I wonder why you expect anything to happen when you refer to it without an explicit path
[20:15:22] <FUZxxl> you should set GOPATH in your .profile
[20:15:27] <FUZxxl> and add $GOPATH/bin to your PATH
[20:15:34] <FUZxxl> then log out and in again
[20:15:40] <FUZxxl> to get updated environment variables
[20:15:51] <FUZxxl> it might be a good idea to do some basic UNIX tutorials
[20:15:57] <FUZxxl> since this is really all not go specific
[20:16:08] <FUZxxl> especially the part about how $PATH and shell commands work
[20:16:13] <FUZxxl> it's basic UNIX stuff
[20:18:38] <pinky> damn it, i deleted my deps.bzl, now i seem to be in trouble
[20:20:26] <LTCD> FUZxxl dot/gotip download worked. So I do FUZxxl export PATH=$PATH:$GOPATH/bin correct?
[20:20:38] *** Joins: bomb (~bomb@user/bomb)
[20:21:18] <FUZxxl> yes that should do the trick
[20:21:28] <FUZxxl> put that into .profile
[20:21:41] <FUZxxl> you also need to set GOPATH before doing that also in .profile
[20:21:47] *** Quits: xiongxin (~quassel@119.123.102.205) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:21:54] <bomb> nitrix: thank you for your answers. I got disconnected earlier when I accidentally put myself in a Faraday cage :)
[20:24:58] <pinky> argh: ERROR: /home/pinky/.cache/bazel/_bazel_pinky/2b3eb085269c0cc965a686e46248e453/external/io_k8s_api/core/v1/BUILD.bazel:18:17: no such package '@io_k8s_api//k8s.io/apimachinery/pkg/runtime': BUILD file not found in directory 'k8s.io/apimachinery/pkg/runtime' of external repository @io_k8s_api. Add a BUILD file to a directory to mark it as a package. and referenced by '@io_k8s_api//core/v1:v1_go_proto'
[20:25:40] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 252 seconds)
[20:26:14] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[20:26:15] *** Quits: bomb (~bomb@user/bomb) (Remote host closed the connection)
[20:27:28] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[20:28:16] <LTCD> FUZxxl Into .profile I wrote export GOPATH=$GOPATH:/home/lou/go
[20:28:17] <LTCD>  and export PATH=$PATH:$GOPATH/bin
[20:30:15] *** Joins: artifishul (~nate@162.218.217.134)
[20:32:23] <FUZxxl> LTCD: that is wrong
[20:32:33] <FUZxxl> GOPATH must be one directory, not a list of directories
[20:32:38] <FUZxxl> so set GOPATH=/home/lou/go
[20:32:43] *** Quits: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it) (Quit: Leaving.)
[20:32:51] <LTCD> Do I need to write export?
[20:33:29] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:34:13] <LTCD> FUZxxl So open .profile and at bottom just write GOPATH=/home/lou/go   and after write PATH=$PATH:$GOPATH/bin
[20:34:19] *** Joins: alicebudda (~alicebudd@cold.passenger.volia.net)
[20:34:57] <ikke> You need to export it
[20:35:14] <LTCD> FUZxxl So open .profile and at bottom just write export GOPATH=/home/lou/go   and after write export PATH=$PATH:$GOPATH/bin
[20:35:18] *** Joins: int3l (~int3l@78-83-124-208.spectrumnet.bg)
[20:37:28] <FUZxxl> correct
[20:37:30] <FUZxxl> that should work
[20:38:23] <LTCD> Do I need quotes " " ?
[20:39:59] *** Joins: bomb (~bomb@user/bomb)
[20:42:53] <FUZxxl> no
[20:42:58] <FUZxxl> unless there are spaces in the paths
[20:43:02] <FUZxxl> which there aren't
[20:44:21] <ikke> should not matter for assignment
[20:44:32] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[20:44:37] <ikke> oh, maybe it does
[20:49:05] <bloony> is the second printed line here the address of ms or the address of the pointer receiver mys? https://play.golang.org/p/2oUxYyk-s3W
[20:49:47] <LTCD> BRB gotta reboot.
[20:49:59] <FUZxxl> what
[20:50:01] <FUZxxl> no need to reboot
[20:50:04] <FUZxxl> just log out and back in
[20:50:34] <LTCD> Oh
[20:50:36] <mjorgensen> bloony: pointer
[20:51:13] <mjorgensen> can verify by doing something like `fmt.Println("pointer", &mys). Outputs "pointer 0x..."
[20:51:49] <mjorgensen> Hold up I might be way off
[20:51:55] <fizzie> If you want the address of ms without the default formatting getting in the way, `fmt.Println("%p\n", mys)`.
[20:52:00] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[20:52:11] <bloony> Also why isn't the first output here printing the address of ms? How can I get the address of ms? https://play.golang.org/p/qPoZkny8a8Q
[20:52:18] <fizzie> bloony: See above.
[20:52:51] <fizzie> Println uses the default formatting (equivalent to "%v"), and the default formatting of a pointer to struct is to print "&{...}" with the struct contents.
[20:53:04] <fizzie> "%p" will print any pointers as pointers.
[20:53:17] <bloony> aha
[20:53:55] <bloony> thanks
[20:54:57] *** Quits: bomb (~bomb@user/bomb) (Remote host closed the connection)
[20:55:20] *** Joins: bomb (~bomb@user/bomb)
[20:55:45] <LTCD> What does this mean? A fuzz target must be in a *_test.go file as a function in the form FuzzXxx. This function must be passed a *testing.F argument, much like a *testing.T argument is passed to a TestXxx function.
[20:55:45] <fizzie> (`fmt.Println(unsafe.Pointer(mys))` would also work, but that's an extra import.)
[20:55:45] <LTCD> https://go.dev/blog/fuzz-beta
[20:56:24] <fizzie> There's an example right below.
[20:56:27] <bloony> fizzie: ah right.. printf will do.. its for debugging
[20:57:32] <fizzie> `func FuzzParseQuery(f *testing.F) { ... }` in the example is a fuzz target by that definition, because it's in a *_test.go file (well, that part's implied), it has the form "FuzzXxx" for its name, and it takes a single `*testing.F` argument.
[20:59:03] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[20:59:32] <LTCD> fizzie So I create a file called whatever_test.go  surely it needs a more specific name?
[20:59:43] <LTCD> Specific as in related to whatever it is I want to test?
[21:00:24] <fizzie> A `whatever_test.go` is a test file in the package of the directory it's in. It doesn't need a more specific name.
[21:00:52] <fizzie> Although usually people *do* name it after a corresponding `whatever.go` file that contains the function(s) and types it tests, as long as it's a specific test.
[21:01:06] <LTCD> fizzie If I want to perform a fuzzing test against a file called notification.go in a package called notification would I need to call the file notification_test.go ?
[21:01:37] <FUZxxl> no
[21:01:42] <FUZxxl> any name that ends in _test.go suffices
[21:01:56] <FUZxxl> files with names ending in _test.go are only compiled when testing
[21:02:08] <FUZxxl> and only these files are searched for test, benchmark, and fuzz functions.
[21:05:59] <LTCD> Fair enough. Anyway, inside of first_test.go I need to import the module I want to perform a fuzzing test against?
[21:09:38] <FUZxxl> no
[21:09:57] <FUZxxl> the test files are part of the same package (not module) as all other files in the directory
[21:10:15] <LTCD> What do I do next then? I am inside a directory with notifications.go I want to fuzz.
[21:10:17] <FUZxxl> so there's nothing to import, but you need to put the test files with the rest of the package you want to test
[21:10:23] <FUZxxl> follow the instructions
[21:10:30] <FUZxxl> and before that,
[21:10:37] <FUZxxl> read the documentation of the testing package
[21:10:40] <FUZxxl> read it completely
[21:10:50] <FUZxxl> and perhaps write a few unit tests to get used to the ideas
[21:10:55] <FUZxxl> fuzz testing is very similar
[21:11:14] <FUZxxl> I get from your questions that you have not read any documentation at all.  You should do that first.
[21:11:55] <FUZxxl> I mean the blog post you linked has some good examples
[21:12:13] <FUZxxl> and even says how to access the documentation
[21:12:18] <FUZxxl> which you should read
[21:18:41] <LTCD> FUZxxl Well, the single test file I created called first_test.go is within the same folder as notification.go. Where is the documentation for the testing package? So I should learn the basics of unit testing in GO because fuzzing works in a similar way?
[21:18:41] *** Quits: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[21:19:22] <FUZxxl> LTCD: https://golang.org/pkg/testing
[21:19:31] <FUZxxl> or type "go doc testing"
[21:19:49] <FUZxxl> if you type gotip doc testing (as the blog post recommends) you'll get the current tip's testing package
[21:19:54] <FUZxxl> which has fuzz testing built in
[21:20:05] <FUZxxl> and yes, that is exactly what I recommend
[21:21:00] *** Quits: on^ (~on@12.203.127.82) (Remote host closed the connection)
[21:23:35] <Tv_> FUZxxl: it's specifically a :-separated list --> <FUZxxl> GOPATH must be one directory, not a list of directories
[21:24:55] <FUZxxl> Tv_: oh that's new to me
[21:26:35] <jorb> is there a way to import modules without specifying versions? i basically just want to follow the "manually git clone the repo" part of the instructions for this https://pkg.go.dev/golang.org/x/sys
[21:27:06] <ikke> jorb: @latest?
[21:27:34] <ikke> Do you use modules?
[21:27:36] <LTCD> FUZxxl In the tutorial example they clearly use import though for the thing they are fuzzing against. https://go.dev/blog/fuzz-beta
[21:27:38] <jorb> what i'm trying to work around is using `go get` and that seems to build a little database with versions that `go build` verifies?
[21:28:02] <ikke> jorb: you mean go.sum?
[21:28:10] <jorb> ikke: yes, but i cannot "pull" them down using the go client at all in my env
[21:28:27] <FUZxxl> LTCD: that is because in there example, they are fuzzing a standard library package and you cannot add your own test files to these
[21:28:41] <FUZxxl> I mean you can of course also do it this way for your own code,
[21:29:02] <FUZxxl> but there are significant disadvantages (you can only access exported (i.e. uppercase) functions from another package)
[21:29:22] <FUZxxl> test files are meant to lvie with the package they test precisely to avoid this issue
[21:29:33] <LTCD> Understood.
[21:30:11] <jorb> ikke: i'm not sure about go.sum, maybe? i will read the rest of the docs i guess, but this seems overwhelmingly complicated -_-
[21:30:39] <jorb> perhaps this bit on the https://pkg.go.dev/golang.org/x/sys page is outdataed lol "just git clone"
[21:31:01] <ikke> jorb: that was mostly suited to the time before go modules
[21:31:41] <jorb> figures
[21:36:45] *** Quits: dza (~dza@user/dza) (Read error: Connection reset by peer)
[21:38:18] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:4419:52f4:ae41:c3ef) (Quit: Client closed)
[21:38:40] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[21:38:59] *** Joins: jpw_ (~jpw@user/jpw)
[21:39:11] *** Joins: dza (~dza@user/dza)
[21:41:08] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 252 seconds)
[21:51:28] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:696d:855f:fef9:6632)
[21:54:36] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[21:55:19] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[21:55:29] <jay_wild> I'm implementing some http backoff code: for HTTP servers do I need to read/close the body?  I was under the impression that's only required for client-side to reuse HTTP connections, but I can't find much about server-side
[21:56:47] <Tv_> jorb: @branchname
[21:57:10] <Tv_> jay_wild: you are correct
[21:57:41] <Tv_> jay_wild: in fact, you're likely to do it worse than net/http, which makes a decision to reuse or not based on expected remaining length etc ;)
[21:58:17] <Tv_> jorb: outdated? "The easiest way to install is to run go get -u golang.org/x/sys"
[21:58:54] <Tv_> mmm https://pkg.go.dev/golang.org/x/sys@v0.0.0-20210917161153-d61c044b1678/execabs is something i always forget exists
[22:01:14] <jorb> Tv_: i cannot use the `go get` functionality in my environment at all, trying to download a module for use otherwise, it is very tricky with the current go cli tools ...
[22:01:47] <jorb> thats ok, it is "documented" but there are no easy 1.2.3. tutorials for this purpose it seems (i'm lazy)
[22:02:13] <Tv_> jorb: i would recommend you figure out how to use modules. it's how everything is built, these days. all you need is a sneakernet of json and zip files.
[22:02:31] <jorb> https://golang.org/ref/mod#authenticating
[22:02:35] <Tv_> jorb: more likely, you'll want to petition your corporation to run an internal goproxy that allows whitelisted modules, or such
[22:02:44] <jorb> it is a vastly complicated verification system that i don't see a way to easily "fake"
[22:02:55] <Tv_> no need to fake anything
[22:03:01] <jorb> right, that is the proposed proper way, i need to fake it for now
[22:03:09] *** Quits: LTCD (~LTCD@2a02:c7f:dd1c:b600:871:25f0:69e7:9553) (Quit: Client closed)
[22:03:17] <bomb> fake it til' make it
[22:03:33] <Tv_> jorb: i'd say either you don't use modules, or you do, "faking" them is gonna be very painful
[22:03:57] <Tv_> jorb: but, to hobble along, you can put replace directives in go.mod to replace all your imports with local paths
[22:04:11] <Tv_> jorb: that'll only break as soon as you get the versions wrong ;)
[22:04:24] <Tv_> really, use modules.
[22:04:47] <Tv_> s/imports/dependencies/, to be precise
[22:05:38] <Tv_> jorb: no need to fake because you can download that the "correct" zip files etc from the internets
[22:06:21] <Tv_> jorb: out of curiosity, what (do you think) prevents you from using go get, at this time?
[22:08:08] *** Quits: lidenbrock (~lidenbroc@2804:14c:32:8120:84ff:5362:4b52:33e4) (Quit: Client closed)
[22:10:11] <jorb> i cannot access any internet sites in my environment, sneakernet it is
[22:10:33] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:11:48] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[22:12:10] <Tv_> jorb: easiest sneakernet is doing the go get on a machine that can, and sneakernetting ~/go/pkg/mod contents
[22:12:38] <ikke> jorb: you could vendor them somewhere you do have access and then copy that over
[22:12:51] <Tv_> aka "module cache", and to specifically control what's downloaded you can point it to a scratch di, i think that was GOMODCACHE
[22:16:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:18:56] *** Joins: fikran (~fikran@user/fikran)
[22:22:22] *** Joins: dsrt^ (~dsrt@12.203.127.82)
[22:24:54] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:26:12] <jorb> thank you for the tips, should help :)
[22:27:33] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[22:31:35] <bomb> I'm surprised by the amount of Java refugees in Go land
[22:32:10] *** Joins: LTCD (~LTCD@2a02:c7f:dd1c:b600:d8ff:b4ab:413e:d5fb)
[22:32:48] <LTCD> Hey, I was here a while ago following what FUZxxl told me, but now the go command cannot be found. I assume it's related to me changing environmental variables.
[22:33:33] <bomb> yes. which distro are you on?
[22:33:43] <LTCD> Ubuntu using WSL
[22:34:18] <bomb> aye, maybe you should set it every time it boots
[22:34:42] <bomb> I don't have a first-hand experience with WSL, sorry
[22:34:45] <LTCD> Nah, I checked the paths and even reset the manually and go is no longer recognised.
[22:34:57] <ikke> LTCD: what is in your PATH?
[22:34:58] <LTCD> sudo apt install golang-go <--- I want to do this, but am worried that it might break something.
[22:35:03] <ikke> "echo $PATH"
[22:36:09] <LTCD> ikke /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/mnt/c/Program
[22:36:10] <LTCD> Files/WindowsApps/CanonicalGroupLimited.Ubuntu20.04onWindows_2004.2021.825.0_x64__79rhkp1fndgsc:/mnt/c/WINDOWS/system32:/mnt/c/WINDOWS:/mnt/c/WINDOWS/System32/Wbem:/mnt/c/WINDOWS/System32/WindowsPowerShell/v1.0/:/mnt/c/WINDOWS/System32/OpenSSH/:/mnt/c/ProgramData/chocolatey/bin:/mnt/c/Program Files (x86)/GNU/GnuPG/pub:/mnt/c/Program
[22:36:10] <LTCD> Files/dotnet/:/mnt/c/Program Files (x86)/dotnet/:/mnt/c/Program Files/Go/bin:/mnt/c/Program Files/Docker/Docker/resources/bin:/mnt/c/ProgramData/DockerDesktop/version-bin:/mnt/c/Users/LouisXX/AppData/Local/Microsoft/WindowsApps:/mnt/c/Program Files/OpenSSL-Win64/bin:/mnt/c/Users/LouisXX/AppData/Local/Programs/Microsoft VS
[22:36:11] <LTCD> Code/bin:/mnt/c/Users/LouisXX/go/bin:/snap/bin:/home/lou/go/bin:/home/lou/go/bin:/home/lou/go/bin
[22:36:32] <andlabs> um
[22:36:41] *** Quits: transacid (~transacid@transacid.de) (Ping timeout: 252 seconds)
[22:36:41] <andlabs> wat
[22:36:57] <andlabs> I'm fairly certain a third of that is redundant
[22:37:09] <ikke> WSL adds a lot to PATH
[22:37:46] <ikke> LTCD: dpkg-query -L golang-go | grep bin
[22:37:51] <Louis> hm
[22:38:01] <ikke> hah, got highlighted?
[22:38:09] <Louis> yes
[22:38:30] <ikke> Feel honored you are listed in LTCD's PATH :P
[22:39:22] <andlabs> also wait, half of that PATH is windows binaries
[22:39:29] <andlabs> does WSL let you run windows binaries in the subsystem?
[22:39:32] <Louis> yes
[22:39:34] <LTCD> dpkg-query: package 'golang-go' is not installed
[22:39:43] <andlabs> huh
[22:39:45] <ikke> LTCD: how did you install go before?
[22:40:32] <LTCD> I think I found the problem, basically go was installed into /usr/local/go/
[22:40:44] <Louis> I've not had any issues running .exe files so far on WSL, it's probably not as efficient as running directly in powershell or similar but it's good for testing binaries
[22:41:13] <LTCD> But gotip is in /home/lou/go
[22:41:22] <LTCD> This was tutorial I followed before https://golang.org/doc/install
[22:42:12] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[22:43:38] *** Joins: transacid (~transacid@transacid.de)
[22:43:53] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 264 seconds)
[22:48:44] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[22:49:11] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[22:49:35] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[22:49:44] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[22:50:12] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[22:50:18] <LTCD> So what should I do next?
[22:50:39] *** Joins: darkapex (~darkapex@user/darkapex)
[22:50:47] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[22:50:59] <ikke> if you want to use that version, you need to make sure /usr/local/go or the path where the go binary lives to PATH
[22:56:24] <LTCD> I just used apt install gccgo
[22:56:46] <LTCD> gccgo-go*
[22:58:02] <ikke> I don't think you want that version: https://stackoverflow.com/questions/25811445/what-are-the-primary-differences-between-gc-and-gccgo
[22:59:24] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[22:59:26] <ikke> I think you want golang-go
[22:59:36] <ikke> which is the standard go toolchain
[22:59:56] *** Quits: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[23:01:11] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[23:01:11] *** Joins: ztx (~ztx@user/ztx)
[23:04:42] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[23:07:19] *** Joins: neurocyte013 (~neurocyte@212.232.95.106)
[23:07:19] *** Quits: neurocyte013 (~neurocyte@212.232.95.106) (Changing host)
[23:07:19] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[23:11:48] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Client Quit)
[23:13:09] *** Joins: neurocyte013 (~neurocyte@212.232.95.106)
[23:13:09] *** Quits: neurocyte013 (~neurocyte@212.232.95.106) (Changing host)
[23:13:09] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[23:19:56] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-chan)
[23:21:37] *** Joins: mickey (~user@user/mickey)
[23:22:42] <mickey> Is there a "nice" way to set the DNS server for a specific interface (windows, latest go)? I dived in with net.Interfaces() to show the available interfaces to the user and I have the uuid of the selected one (or the mac, or whatever is needed)
[23:23:34] <LambdaComplex> that sounds like a weird question and maybe not in a "weird good" way....and also kinda like an XY question? maybe?
[23:24:48] <mickey> im not sure what an XY question is
[23:24:49] <LambdaComplex> i don't think the network interface is ever used to determine what DNS server gets used? i think it'd just be find what system resolvers are specified -> consult routing table to determine egress interface for DNS traffic ???
[23:25:20] <LambdaComplex> mickey: "i'm trying to do X. i don't know how to do X, but I think i can accomplish it by doing Y. I don't know how to do Y either. I'm gonna go ask for help with Y"
[23:25:25] <LambdaComplex> (when you should really be asking for help with X)
[23:25:39] <mickey> oh, no, im literally trying to change the dns server for a specific interface
[23:25:56] <LambdaComplex> but _why_ are you trying to do that? :)
[23:26:06] <LambdaComplex> what problem are you facing which you have decided can be solved by doing that?
[23:26:25] <mickey> because im making an OOBE installer that deploys dnscrypt-proxy and i need to set the dns server for the wifi interface to 127.0.0.1
[23:27:49] <LambdaComplex> is it your Go program that needs to use that DNS server running on 127.0.0.1?
[23:27:53] <eric_hill> that's an os setting, not a Go api call.  And you may not even have rights to make those changes on the machine.
[23:27:56] <mickey> no
[23:28:17] <LambdaComplex> well, darn. i was about to say you could just use a DNS library and handle all the DNS stuff in your Go program rather than relying on the OS resolver
[23:28:24] <LambdaComplex> but....yeah, what eric_hill said, basically
[23:28:36] <mickey> i can probably change the appropriate registry key using the uuid that the user selects
[23:28:47] <mickey> i do have the rights to make those changes.
[23:28:57] <LambdaComplex> i've also been told than you _can_ override the OS resolver by changing the address stored in some struct......if you're doing this in C. never confirmed for myself, and no idea if Go exposes that ability anyways. quite possibly not
[23:29:09] <LambdaComplex> (that's changing an _ip_ address, to be clear. not a memory address)
[23:29:15] <mickey> about being os setting, well, yeah that's obvious, but i was basically asking if there's a go-ish way to change that setting :p
[23:30:21] <mickey> i can technically modify HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\{uuid}\NameServer="127.0.0.1", but I'm wondering if there's a "better" way to do that.
[23:30:44] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 246 seconds)
[23:30:51] <eric_hill> IF you're on Windows and IF you have admin rights, you can run (exec) "netsh interface ipv4 set dns name="Wi-Fi" static 127.0.0.1"
[23:31:44] *** Joins: X-Scale` (~ARM@83.223.240.141)
[23:32:12] *** Joins: goldfish (~goldfish@user/goldfish)
[23:33:13] *** X-Scale` is now known as X-Scale
[23:34:47] <mickey> i'll try working with that,
[23:42:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:42:15] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:42:15] *** Joins: wroathe (~wroathe@user/wroathe)
[23:45:59] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:696d:855f:fef9:6632) (Quit: Client closed)
[23:50:10] <bomb> Go need this: https://gitlab.com/klamonte/jexer
[23:50:59] *** Quits: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: sizeof_void34)
[23:51:25] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:696d:855f:fef9:6632)
[23:52:42] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:696d:855f:fef9:6632) (Client Quit)
[23:54:10] <lungaro> i'm not too familiar w/ jexer, but there is termui
[23:54:20] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:696d:855f:fef9:6632)
[23:54:35] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[23:54:50] *** Quits: LTCD (~LTCD@2a02:c7f:dd1c:b600:d8ff:b4ab:413e:d5fb) (Quit: Client closed)
[23:54:58] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[23:56:17] <bomb> hmm, termui looks decent
[23:57:57] <lungaro> jexer looks way more hardcore w/ those menus.
[23:59:00] <bomb> yeah, it can also be emulated with a GUI window
[23:59:11] <bomb> this game was made using jexer: https://store.steampowered.com/app/576030/MHRD/
[23:00:32] <bomb> the game sold at least 10,000 copies
[23:01:08] *** Joins: klil (~klil@213.246.29.240)
[23:02:02] *** Quits: klil (~klil@213.246.29.240) (Client Quit)
[23:10:20] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[23:16:55] *** Quits: iamzero (~iamzero@2a02:2f0f:9109:8d00:719e:a0a5:6129:cf10) (Read error: Connection reset by peer)
[23:22:06] *** Quits: alicebudda (~alicebudd@cold.passenger.volia.net) (Quit: Client closed)
[23:22:17] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[23:26:29] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[23:28:19] *** Joins: fikran (~fikran@user/fikran)
[23:30:02] *** Quits: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net) (Quit: WeeChat 3.2)
[23:30:05] *** Joins: alicebudda (~alicebudd@cold.passenger.volia.net)
[23:30:10] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:84f8:4d25:dc2b:9929) (Quit: Leaving)
[23:35:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[23:35:55] *** Quits: mnx|aw (~mnxaw@94.11.23.235) (Ping timeout: 252 seconds)
[23:36:18] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Quit: Leaving)
[23:39:48] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[23:43:17] *** Quits: pedr0 (~pedr0@finc-23-b2-v4wan-163318-cust230.vm7.cable.virginm.net) (Ping timeout: 264 seconds)
[23:45:14] *** Quits: kinduff (~kinduff@user/kinduff) (Quit: The Lounge - https://thelounge.chat)
[23:51:12] *** Joins: kinduff (~kinduff@user/kinduff)
[23:51:41] *** Joins: LTCD (~LTCD@2a02:c7f:dd1c:b600:d8ff:b4ab:413e:d5fb)
[23:51:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:51:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:51:59] *** Joins: wroathe (~wroathe@user/wroathe)
[23:52:20] <LTCD> Hey. I am reading this, but I do not know where to begin. I have a *_test.go file with unit tests in, but now I want to do some fuzzing https://go.googlesource.com/proposal/+/master/design/draft-fuzzing.md
[23:53:13] <FUZxxl> LTCD: have you tried reading the documentation given in the blog post?
[23:53:44] <LTCD> Link me?
[23:54:08] <FUZxxl> https://go.dev/blog/fuzz-beta
[23:54:14] <FUZxxl> "You can read more about the fuzzing APIs with go doc"
[23:54:16] <FUZxxl> and then three commands
[23:54:20] <FUZxxl> *four commands
[23:54:22] <FUZxxl> try them!
[23:55:19] <LTCD> Sorry, I did not even realise it was like man for Linux.
[23:55:34] <FUZxxl> see that's why I tell you to read carefully
[23:55:56] <FUZxxl> the docs were right under your nose the whole time!
[23:56:45] *** Joins: shtirlic (~shtirlic@178.70.139.14)
[23:56:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[23:57:18] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[23:58:25] <lungaro> go docs often are =P
[23:59:04] <LTCD> So this is to test functions already included with GO, not my own custom made functions: func TestXxx(*testing.T)
