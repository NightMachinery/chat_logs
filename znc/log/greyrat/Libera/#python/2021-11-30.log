[00:00:05] <smrtz> Oh I'm starting to see that now.
[00:00:16] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:2446:13de:20ec:764f)
[00:00:21] *** Joins: tazle (tazle@kapsi.fi)
[00:00:25] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[00:00:54] <SnoopJ> it's the same as `func = c.count_exceptions()(func)`, which makes the two calls a little more obvious to spot :)
[00:01:13] *** Joins: nanonyme (nanonyme@kapsi.fi)
[00:02:04] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[00:02:16] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[00:02:18] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[00:03:24] *** Quits: MaximB (~MaximB@87.68.165.78) (Quit: Client closed)
[00:03:35] <braxas> if a generator throws an exception, and then the generator is used again, then it seems to just work like an emtpy generator, is there some way to make it fail on subsequent use also: https://ideone.com/cNWNXN ?
[00:04:03] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[00:04:04] <braxas> like I would like the second try to convert the generator to list to fail also
[00:05:04] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 264 seconds)
[00:08:06] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[00:08:35] *** Quits: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[00:08:41] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[00:08:46] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:08:49] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[00:09:01] *** Joins: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net)
[00:09:51] *** Joins: csm3105 (~csm3105@47.62.122.10)
[00:10:18] <SnoopJ> smrtz, have a look at this and see if it makes sense to you: https://bpa.st/DLIA
[00:11:05] *** Joins: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il)
[00:11:06] <SnoopJ> smrtz, basically there's another 'layer' of function because the decorator itself needs to distinguish between class and not-class
[00:11:12] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Read error: Connection reset by peer)
[00:11:22] <smrtz> Yeah, that's pretty close to what I was thinking!
[00:11:42] <SnoopJ> they're substantially less magical than they look at first :)
[00:12:16] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 264 seconds)
[00:12:23] *** Parts: jsmock (~joern@xdsl-78-34-162-163.nc.de) (WeeChat 3.2)
[00:12:29] <SnoopJ> oops, I missed an obj->class rename at line 8 there
[00:12:44] *** Quits: blackleitus (uid270824@id-270824.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[00:12:46] *** Joins: Shang (~sfields@2605:a601:adea:7a00:6fbe:a45d:8358:4197)
[00:13:50] *** Quits: qlixed (~qlixed@181.44.129.13) (Remote host closed the connection)
[00:15:02] *** Quits: sfields_ (~sfields@2605:a601:adea:7a00:c93f:d271:743d:e1bd) (Ping timeout: 240 seconds)
[00:15:11] *** Joins: nomic (~nomic@185.217.117.132)
[00:15:20] *** Quits: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net) (Ping timeout: 252 seconds)
[00:17:00] *** Joins: qlixed (~qlixed@181.44.129.13)
[00:17:29] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:17:51] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[00:18:47] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 256 seconds)
[00:20:27] *** Joins: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net)
[00:20:29] *** Quits: bandit_za (~bandit@164.160.119.212) (Ping timeout: 256 seconds)
[00:20:51] *** Joins: Pickchea (~private@user/pickchea)
[00:21:04] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:edef:5ef4:644d:7d12) (Ping timeout: 256 seconds)
[00:21:16] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Ping timeout: 264 seconds)
[00:22:29] *** Quits: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il) (Remote host closed the connection)
[00:22:53] *** Joins: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il)
[00:23:17] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[00:23:35] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[00:23:35] *** Quits: dld (~dld@2620:6e:6000:2900:4c8f:59ca:20e7:8c51) (Ping timeout: 252 seconds)
[00:24:33] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[00:25:34] *** Joins: RasnCain (~rasncain@68.12.15.83)
[00:25:39] *** Joins: KombuchaKip (~kip@192.252.230.5)
[00:27:45] *** Joins: prompt32 (~kapad@user/kapad)
[00:27:48] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:edef:5ef4:644d:7d12)
[00:28:25] *** Quits: delvian (~delvian@41.13.224.10) (Read error: Connection reset by peer)
[00:28:52] *** Joins: delvian (~delvian@41.13.224.10)
[00:29:28] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[00:30:07] *** Quits: orbatos_ (~orbatos@user/orbatos) (Ping timeout: 256 seconds)
[00:30:30] *** Quits: parv (~quass@user/parv) (Quit: parv)
[00:30:48] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:32:17] *** Joins: Klinda (~superleag@user/klinda)
[00:32:23] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[00:32:38] *** Quits: prompt32 (~kapad@user/kapad) (Client Quit)
[00:33:05] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[00:33:50] *** Joins: ArtfulDodger (~ArtfulDod@2a02-8440-630d-53c5-78ba-13a3-5b05-4fb6.rev.sfr.net)
[00:36:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:38:04] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Ping timeout: 264 seconds)
[00:38:40] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[00:38:44] <Pi-sistance> er, can I set an input positional argument to be a float in the actual input place? like def foo(x=float,y=50,z): do stuff ?
[00:38:56] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[00:39:09] <Pi-sistance> I just tried and did type(foo(2)) and it said it was an int :/
[00:40:35] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[00:42:08] <Swayze> whts your obsessions with the type?>
[00:42:12] *** Joins: kevr (~kevr@user/kevr)
[00:42:18] <Swayze> if you pass a float it'll be float if you pass in an int, it'll be int etc
[00:43:01] <Swayze> try type(foo(2.0))
[00:43:30] <Pi-sistance> ok, I thought that saying x=float in the input space would make it a float though, so that doesnt work
[00:43:36] *** Joins: Csm319_ (~csm3105@47.62.122.10)
[00:43:50] <Swayze> it'll be a float if you passed a float
[00:44:05] <Pi-sistance> not sure why i thought I could do that, oh well. i can set it later in the function
[00:44:13] <Pi-sistance> ok I thought it would turn 2 into 2.0
[00:45:03] <SnoopJ> Pi-sistance, there isn't any builtin way to coerce the type using the signature. If you want to do that, you need to implement it yourself, or use a library that does that kind of thing for you (like attrs or dataclasses)
[00:45:26] <SnoopJ> although those are more for classes than for functions
[00:45:52] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[00:45:54] <smrtz> SnoopJ To make that second example share the same counter across the whole class would I just instantiate the ExceptionCounter object within the ClassCapableCounter class instead of the _count_in_class def?
[00:46:07] <Swayze> if you have a=b+c where b is a int and c is a float then a is a float
[00:46:19] <Swayze> else if b and c are int, then a would be an int
[00:46:22] *** Joins: YourNick (~Guest20@catv-89-134-238-65.catv.broadband.hu)
[00:46:36] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:46:55] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[00:46:56] <Pi-sistance> okay thanks, not sure why I thought I could do that. Oh i recall doing an array operation on an input variable before, which effectively made the input only work for arrays
[00:47:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[00:47:06] <SnoopJ> smrtz, I would probably do `deco = ExceptionCounter(...)` outside the loop in _count_in_class() and then `setattr(obj, name, deco(func))` inside of it, to get a single instance per decorated class (but still a new counter instance per decorated class)
[00:47:14] *** Quits: csm3105 (~csm3105@47.62.122.10) (Ping timeout: 252 seconds)
[00:47:57] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:48:06] <Pi-sistance> ah it was set later in the function, I see.
[00:48:06] <Swayze> Pi-sistance: again you would check if its a type of list to determine if its an array or not
[00:48:54] *** Joins: fikran (~fikran@user/fikran)
[00:50:40] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 264 seconds)
[00:51:25] *** Joins: Roey (~Roey@user/Roey)
[00:51:28] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[00:51:43] *** Quits: stoneware (~stoneware@user/stoneware) (Ping timeout: 250 seconds)
[00:52:15] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[00:52:56] *** Joins: hackers (~remote@user/hackers)
[00:53:49] *** Quits: Shang (~sfields@2605:a601:adea:7a00:6fbe:a45d:8358:4197) (Remote host closed the connection)
[00:53:57] *** Quits: YourNick (~Guest20@catv-89-134-238-65.catv.broadband.hu) (Quit: Client closed)
[00:54:30] *** Joins: luigibu (~luigi@80.30.201.209)
[00:54:40] *** Quits: neachdainn (~nate@50.224.226.50) (Read error: Connection reset by peer)
[00:55:04] *** Joins: jimmyZiomal (~jimmy@staticline-31-182-163-6.toya.net.pl)
[00:55:29] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[00:55:54] *** Joins: stoneware (~stoneware@user/stoneware)
[00:55:58] <octav1a> So I spent a bunch of time tracking down a thing. It seems like in sqlite parameterization, if I use an int instead of a string (for an int column) it doesn't work. Any intuition why this is?
[00:56:40] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[00:56:55] *** Quits: teut (~teut@182.68.254.204) (Quit: Client closed)
[00:57:12] *** Quits: onichomp (~onichomp@2806:264:4404:80d9:ac88:f7cc:32c7:23b5) (Ping timeout: 268 seconds)
[00:57:31] *** Joins: bbbbbb (~peppbel@c-73-221-241-101.hsd1.wa.comcast.net)
[00:58:15] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[00:58:28] *** Quits: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net) (Ping timeout: 264 seconds)
[00:59:15] *** Joins: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net)
[01:00:35] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:05:04] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::b73c) (Ping timeout: 264 seconds)
[01:05:45] *** Quits: upsala (~zcb@185.213.155.252) (Quit: WeeChat 3.3)
[01:08:04] *** Quits: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net) (Ping timeout: 264 seconds)
[01:10:13] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[01:10:13] *** Quits: bbbbbb (~peppbel@c-73-221-241-101.hsd1.wa.comcast.net) (*.net *.split)
[01:10:13] *** Quits: Roey (~Roey@user/Roey) (*.net *.split)
[01:10:13] *** Quits: ArtfulDodger (~ArtfulDod@2a02-8440-630d-53c5-78ba-13a3-5b05-4fb6.rev.sfr.net) (*.net *.split)
[01:10:14] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (*.net *.split)
[01:10:14] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (*.net *.split)
[01:10:14] *** Quits: nomic (~nomic@185.217.117.132) (*.net *.split)
[01:10:14] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (*.net *.split)
[01:10:14] *** Quits: mindlesstux[m] (~mindlesst@user/mindlesstux) (*.net *.split)
[01:10:14] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[01:10:14] *** Quits: cosimone (~user@93-47-231-139.ip115.fastwebnet.it) (*.net *.split)
[01:10:14] *** Quits: Betal (~Betal@user/betal) (*.net *.split)
[01:10:14] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (*.net *.split)
[01:10:14] *** Quits: vodkra (~vodkra@user/vodkra) (*.net *.split)
[01:10:14] *** Quits: CrtxReavr (crtxreavr@shodan.trioptimum.com) (*.net *.split)
[01:10:14] *** Quits: holgersson (~quassel@user/holgersson) (*.net *.split)
[01:10:14] *** Quits: LostInWeb (~quassel@narvi.bifroest.eu) (*.net *.split)
[01:10:14] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (*.net *.split)
[01:10:14] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (*.net *.split)
[01:10:14] *** Quits: xrogaan (~xrogaan@user/xrogaan) (*.net *.split)
[01:10:14] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (*.net *.split)
[01:10:14] *** Quits: l4yer (~l4yer@2a07-a880-3101-1051-a922-bb49-135a-4393.pool6.ovpn.com) (*.net *.split)
[01:10:14] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (*.net *.split)
[01:10:14] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (*.net *.split)
[01:10:14] *** Quits: FluffyMask (~masque@user/fluffymask) (*.net *.split)
[01:10:14] *** Quits: theelous3 (~theelous3@109.255.56.189) (*.net *.split)
[01:10:14] *** Quits: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu) (*.net *.split)
[01:10:14] *** Quits: emptynine (tkk@cybertron.redlight.li) (*.net *.split)
[01:10:14] *** Quits: jamiejackson (~jamiejack@207.172.87.34) (*.net *.split)
[01:10:14] *** Quits: zebrag (~chris@user/zebrag) (*.net *.split)
[01:10:14] *** Quits: darksun (~darksun@user/darksun) (*.net *.split)
[01:10:14] *** Quits: Pixi_ (~Pixi@user/pixi) (*.net *.split)
[01:10:14] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (*.net *.split)
[01:10:14] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (*.net *.split)
[01:10:14] *** Quits: grooverman (~grooverma@177.95.12.14) (*.net *.split)
[01:10:14] *** Quits: beencubed (~beencubed@209.131.238.248) (*.net *.split)
[01:10:14] *** Quits: Naan (~Naan@user/naan) (*.net *.split)
[01:10:14] *** Quits: ckdCreations (~ckdCreati@147.55.130.38) (*.net *.split)
[01:10:14] *** Quits: noord (~noord@user/noord) (*.net *.split)
[01:10:14] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (*.net *.split)
[01:10:14] *** Quits: p-i-_ (~Ohmu@223.206.149.59) (*.net *.split)
[01:10:14] *** Quits: gusto (~Augustus@109.255.100.54) (*.net *.split)
[01:10:14] *** Quits: cdown (~cdown@163.114.131.1) (*.net *.split)
[01:10:14] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[01:10:14] *** Quits: traptrip (trip@brigaid.xs4all.nl) (*.net *.split)
[01:10:14] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (*.net *.split)
[01:10:14] *** Quits: Colt (~Colt@user/colt) (*.net *.split)
[01:10:14] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:6d74:7509:74f5:7d14) (*.net *.split)
[01:10:14] *** Quits: pipapipapipo (~peppbel@c-73-221-241-101.hsd1.wa.comcast.net) (*.net *.split)
[01:10:14] *** Quits: akaWolf (~akaWolf@akawolf.org) (*.net *.split)
[01:10:14] *** Quits: plastico (~plastico@neomutt/plastico) (*.net *.split)
[01:10:14] *** Quits: enkrypt (~enkrypt@user/enkrypt) (*.net *.split)
[01:10:14] *** Quits: martums (~martums@user/martums) (*.net *.split)
[01:10:14] *** Quits: Tas-sos (~Tas-sos@ppp005054041212.access.hol.gr) (*.net *.split)
[01:10:14] *** Quits: seednode (~seednode@user/seednode) (*.net *.split)
[01:10:14] *** Quits: Andrynet (~Andrynet@190.152.206.33) (*.net *.split)
[01:10:14] *** Quits: Csm319_ (~csm3105@47.62.122.10) (*.net *.split)
[01:10:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (*.net *.split)
[01:10:15] *** Quits: KombuchaKip (~kip@192.252.230.5) (*.net *.split)
[01:10:15] *** Quits: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il) (*.net *.split)
[01:10:15] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[01:10:15] *** Quits: bomb-on (~bomb-on@194.144.47.113) (*.net *.split)
[01:10:15] *** Quits: nanonyme (nanonyme@kapsi.fi) (*.net *.split)
[01:10:15] *** Quits: tazle (tazle@kapsi.fi) (*.net *.split)
[01:10:15] *** Quits: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul) (*.net *.split)
[01:10:15] *** Quits: justache (~justache@user/justache) (*.net *.split)
[01:10:15] *** Quits: sgn (~sgn@user/sgn) (*.net *.split)
[01:10:15] *** Quits: nyah (~nyah@94.6.71.219) (*.net *.split)
[01:10:15] *** Quits: dreamon (~dreamon@pd95039d2.dip0.t-ipconnect.de) (*.net *.split)
[01:10:15] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (*.net *.split)
[01:10:15] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (*.net *.split)
[01:10:15] *** Quits: SuperLag (~akulbe@user/superlag) (*.net *.split)
[01:10:15] *** Quits: trashbird (~trashbird@user/trashbird) (*.net *.split)
[01:10:15] *** Quits: mallkrampus (~mallkramp@172.93.207.236) (*.net *.split)
[01:10:15] *** Quits: Jefren1 (~Jefren@208.104.190.60) (*.net *.split)
[01:10:15] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (*.net *.split)
[01:10:15] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (*.net *.split)
[01:10:15] *** Quits: superboot (~agentgasm@user/superboot) (*.net *.split)
[01:10:15] *** Quits: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net) (*.net *.split)
[01:10:15] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (*.net *.split)
[01:10:15] *** Quits: orbisvicis (~orbisvici@user/orbisvicis) (*.net *.split)
[01:10:15] *** Quits: wovixo (~wovixo@128.104.205.49) (*.net *.split)
[01:10:15] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[01:10:15] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (*.net *.split)
[01:10:15] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (*.net *.split)
[01:10:15] *** Quits: lyr (~lyr@user/lyr) (*.net *.split)
[01:10:15] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[01:10:15] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[01:10:15] *** Quits: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182) (*.net *.split)
[01:10:15] *** Quits: psyxopompos (~psyxopomp@user/psyxopompos) (*.net *.split)
[01:10:15] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[01:10:15] *** Quits: hudo (~hhudo_@mail.allm-elektro.de) (*.net *.split)
[01:10:15] *** Quits: rvgate (~rvgate@user/rvgate) (*.net *.split)
[01:10:15] *** Quits: iomari891 (~iomari891@105.112.138.38) (*.net *.split)
[01:10:15] *** Quits: sabet (~sabet@user/sabet) (*.net *.split)
[01:10:15] *** Quits: regulate (~regulate@koduro.com) (*.net *.split)
[01:10:15] *** Quits: monchi (~joints@143.198.92.132) (*.net *.split)
[01:10:15] *** Quits: cdleonard (~cdleonard@ec2-52-70-55-94.compute-1.amazonaws.com) (*.net *.split)
[01:10:15] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (*.net *.split)
[01:10:15] *** Quits: dman777 (~dman777@76-253-74-225.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[01:10:15] *** Quits: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de) (*.net *.split)
[01:10:15] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[01:10:15] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (*.net *.split)
[01:10:15] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[01:10:15] *** Quits: wereii (~wereii@37.205.14.89) (*.net *.split)
[01:10:15] *** Quits: enrh (~enrh@user/enrh) (*.net *.split)
[01:10:15] *** Quits: phantomcircuit (~phantomci@192.241.205.97) (*.net *.split)
[01:10:15] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[01:10:15] *** Quits: Raichvent (~Raichvent@193.123.33.210) (*.net *.split)
[01:10:15] *** Quits: kcrk (~kcrk@user/kcrk) (*.net *.split)
[01:10:15] *** Quits: aileran (~ubuntu@ec2-18-219-39-125.us-east-2.compute.amazonaws.com) (*.net *.split)
[01:10:15] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[01:10:15] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (*.net *.split)
[01:10:15] *** Quits: gcbirzan (~gcbirzan@user/gcbirzan) (*.net *.split)
[01:10:15] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[01:10:16] *** Quits: sreve (~quassel@p549d7168.dip0.t-ipconnect.de) (*.net *.split)
[01:10:16] *** Quits: brabrax (~brabrax@user/brabrax) (*.net *.split)
[01:10:16] *** Quits: lethu (~lethu@user/lethu) (*.net *.split)
[01:10:16] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (*.net *.split)
[01:10:16] *** Quits: jab416171 (~jab416171@c-174-52-177-39.hsd1.ut.comcast.net) (*.net *.split)
[01:10:16] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (*.net *.split)
[01:10:16] *** Quits: victori (~victori@cpe-76-174-179-126.socal.res.rr.com) (*.net *.split)
[01:10:16] *** Quits: pyfisch (~pyfisch@user/pyfisch) (*.net *.split)
[01:10:16] *** Quits: Throgkt (~Throgkt@user/throgkt) (*.net *.split)
[01:10:16] *** Quits: p3lim (~p3lim@ti0006q161-2971.bb.online.no) (*.net *.split)
[01:10:16] *** Quits: Jigsy (~Jigsy@user/jigsy) (*.net *.split)
[01:10:16] *** Quits: Pi-sistance (~kvirc@cpc94050-newt37-2-0-cust176.19-3.cable.virginm.net) (*.net *.split)
[01:10:16] *** Quits: elwoodpd (~elwoodpd@host-92-8-65-11.as13285.net) (*.net *.split)
[01:10:16] *** Quits: EgonX (~EgonX@c-73-115-70-244.hsd1.tx.comcast.net) (*.net *.split)
[01:10:16] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[01:10:16] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[01:10:16] *** Quits: Gerula (~Gerula@user/gerula) (*.net *.split)
[01:10:16] *** Quits: luva (~luva@45.141.152.44) (*.net *.split)
[01:10:16] *** Quits: EGH (~EGH@185.25.195.104) (*.net *.split)
[01:10:16] *** Quits: BillyZane (~BillyZane@193.160.245.245) (*.net *.split)
[01:10:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (*.net *.split)
[01:10:16] *** Quits: Allegretto (~allegrett@84-236-126-151.pool.digikabel.hu) (*.net *.split)
[01:10:16] *** Quits: waxfire (~waxfire@65.119.2.240) (*.net *.split)
[01:10:16] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[01:10:16] *** Quits: explodes (~explodes@user/explodes) (*.net *.split)
[01:10:16] *** Quits: tanner (~tanner@tilde.town) (*.net *.split)
[01:10:16] *** Quits: kindablue (znc@irc.tpurist.com) (*.net *.split)
[01:10:16] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (*.net *.split)
[01:10:16] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[01:10:16] *** Quits: zware (~zach@python/psf/zware) (*.net *.split)
[01:10:16] *** Quits: drincruz (drincruz@2607:5300:203:3f52::19) (*.net *.split)
[01:10:16] *** Quits: graphitemaster (~graphitem@user/graphitemaster) (*.net *.split)
[01:10:16] *** Quits: mgubyt (u@mgub.yt) (*.net *.split)
[01:10:16] *** Quits: agireud (~agireud@2605:a601:ab06:c700:211:32ff:fe32:e15f) (*.net *.split)
[01:10:16] *** Quits: kehn (quassel@2600:3c03::f03c:92ff:fe9a:ad08) (*.net *.split)
[01:10:16] *** Quits: djhankb (~djhankb@208.113.164.68) (*.net *.split)
[01:10:16] *** Quits: peac (sid344662@id-344662.hampstead.irccloud.com) (*.net *.split)
[01:10:16] *** Quits: luke-jr (~luke-jr@user/luke-jr) (*.net *.split)
[01:10:17] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (*.net *.split)
[01:10:17] *** Quits: iflema (~ian@user/iflema) (*.net *.split)
[01:10:17] *** Quits: llh (~llh@user/llh) (*.net *.split)
[01:10:17] *** Quits: cebtenzzre (~cebtenzzr@2603-7081-3406-8f26-00c4-ed3c-3f47-2b1e.res6.spectrum.com) (*.net *.split)
[01:10:17] *** Quits: yitz (~yitz@exercism/yitz) (*.net *.split)
[01:10:17] *** Quits: selikolg (~selikolg@178.62.2.76) (*.net *.split)
[01:10:17] *** Quits: Hackerpcs (~user@user/hackerpcs) (*.net *.split)
[01:10:17] *** Quits: mintograde (~mintograd@47.201.5.61) (*.net *.split)
[01:10:17] *** Quits: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) (*.net *.split)
[01:10:17] *** Quits: gossie (~gossie@94-215-32-45.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[01:10:17] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[01:10:17] *** Quits: mogad0n (~mogad0n@user/mogad0n) (*.net *.split)
[01:10:17] *** Quits: Maikel (~Maikel@130.61.63.136) (*.net *.split)
[01:10:17] *** Quits: Omega037 (~Omega037@047-233-057-109.res.spectrum.com) (*.net *.split)
[01:10:17] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[01:10:17] *** Quits: Bardon (~Bardon@user/Bardon) (*.net *.split)
[01:10:17] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (*.net *.split)
[01:10:17] *** Quits: neoweb (sid343200@id-343200.lymington.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: pwillard (sid136981@id-136981.hampstead.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: grimvar (~grimvar@i5C75F680.versanet.de) (*.net *.split)
[01:10:17] *** Quits: aphysically (~aphysical@user/aphysically) (*.net *.split)
[01:10:17] *** Quits: snalty (~Shhh@user/snalty) (*.net *.split)
[01:10:17] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[01:10:17] *** Quits: pr3d4t0r (~zhenya01@user/pr3d4t0r) (*.net *.split)
[01:10:17] *** Quits: Timvde (~tim@towely.vdeynde.com) (*.net *.split)
[01:10:17] *** Quits: bparker (~nobody@user/bparker) (*.net *.split)
[01:10:17] *** Quits: DXR (~lyrical@77.49.234.159.dsl.dyn.forthnet.gr) (*.net *.split)
[01:10:17] *** Quits: zepolen (~zepolen@2a02:587:293f:b5fe:a9ae:7515:90f4:3484) (*.net *.split)
[01:10:17] *** Quits: BravoSlo (BravoSlo@gateway/vpn/airvpn/bravoslo) (*.net *.split)
[01:10:17] *** Quits: Cyp_ (~cyp@213.237.85.9) (*.net *.split)
[01:10:17] *** Quits: lambda (~weechat@cyka.blyat.vodka) (*.net *.split)
[01:10:17] *** Quits: canton7 (canton7@about/csharp/canton7) (*.net *.split)
[01:10:17] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (*.net *.split)
[01:10:17] *** Quits: Helenah (~s98259@user/helenah) (*.net *.split)
[01:10:17] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[01:10:17] *** Quits: Ulti (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com) (*.net *.split)
[01:10:17] *** Quits: Ranhir (~Ranhir@157.97.53.139) (*.net *.split)
[01:10:17] *** Quits: mdk (~mdk@python/psf/mdk) (*.net *.split)
[01:10:17] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[01:10:17] *** Quits: Darkfoe (sid402081@id-402081.helmsley.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: Forkk_ (~forkk@li926-228.members.linode.com) (*.net *.split)
[01:10:17] *** Quits: xiaguan (~parsley@2604:180:f1::173) (*.net *.split)
[01:10:17] *** Quits: michele (~eraser@user/michele) (*.net *.split)
[01:10:17] *** Quits: mastardet (~mastardet@user/mastardet) (*.net *.split)
[01:10:17] *** Quits: Phase (~phase@user/phase) (*.net *.split)
[01:10:17] *** Quits: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5) (*.net *.split)
[01:10:17] *** Quits: InPhase (~InPhase@openscad/inphase) (*.net *.split)
[01:10:17] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[01:10:17] *** Quits: zmotaj (~zmotaj@user/zmotaj) (*.net *.split)
[01:10:17] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[01:10:17] *** Quits: erica (~erica@user/erica) (*.net *.split)
[01:10:17] *** Quits: st3fan (sid43079@id-43079.lymington.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: braxas (sid508886@id-508886.lymington.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: frodl (sid527064@user/frodl) (*.net *.split)
[01:10:17] *** Quits: sus (zero@user/zeromomentum) (*.net *.split)
[01:10:17] *** Quits: Venhal (sid515085@id-515085.uxbridge.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: ballingt (sid190590@id-190590.helmsley.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: treefrob (~treefrob@p57a9652c.dip0.t-ipconnect.de) (*.net *.split)
[01:10:17] *** Quits: catern (~sbaugh@cpe-98-7-229-235.nyc.res.rr.com) (*.net *.split)
[01:10:17] *** Quits: BigShip (~BigShip@user/bigship) (*.net *.split)
[01:10:17] *** Quits: xcm_ (~xcm@user/xcm) (*.net *.split)
[01:10:17] *** Quits: Pilate (~pilate@pilate.io) (*.net *.split)
[01:10:17] *** Quits: botfather (~botfather@shell1.dds.nl) (*.net *.split)
[01:10:17] *** Quits: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com) (*.net *.split)
[01:10:17] *** Quits: duoi (~duoi@user/duoi) (*.net *.split)
[01:10:17] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[01:10:17] *** Quits: moonmoon (awoo@libera/staff/moonmoon) (*.net *.split)
[01:10:17] *** Quits: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com) (*.net *.split)
[01:10:17] *** Quits: daex (~daex@user/daex) (*.net *.split)
[01:10:18] *** Quits: AhmedAmerican (sid470527@ilkley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: Gamah (~quassel@gamah.net) (*.net *.split)
[01:10:18] *** Quits: coldmountain (sid484352@helmsley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: lidless (lidless@tinside.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: thib (~thib@wikimedia/Thibaut120094) (*.net *.split)
[01:10:18] *** Quits: Celelibi (celelibi@user/celelibi) (*.net *.split)
[01:10:18] *** Quits: Repiphany (~Repiphany@user/repiphany) (*.net *.split)
[01:10:18] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[01:10:18] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (*.net *.split)
[01:10:18] *** Quits: operational (~operation@imgonnaf.art) (*.net *.split)
[01:10:18] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (*.net *.split)
[01:10:18] *** Quits: nepeat (~nepeat@79.110.170.59) (*.net *.split)
[01:10:18] *** Quits: fakenullie (~nullie@london.nullie.name) (*.net *.split)
[01:10:18] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[01:10:18] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (*.net *.split)
[01:10:18] *** Quits: kantlivelong (~kantlivel@octoprint/kantlivelong) (*.net *.split)
[01:10:18] *** Quits: Widdershins (widders@ps.mad.cash) (*.net *.split)
[01:10:18] *** Quits: awygle (~quassel@2604:a880:2:d0::5380:3001) (*.net *.split)
[01:10:18] *** Quits: Shapeshifter (~Shapeshif@parakeet.ifi.uzh.ch) (*.net *.split)
[01:10:18] *** Quits: andi_ (~andi@user/andi/x-3467420) (*.net *.split)
[01:10:18] *** Quits: pystardust (~pystardus@45.32.119.11) (*.net *.split)
[01:10:18] *** Quits: the4oo4 (~the4oo4@shenzhou.whatbox.ca) (*.net *.split)
[01:10:18] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (*.net *.split)
[01:10:18] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (*.net *.split)
[01:10:18] *** Quits: novasharper (~novasharp@2001:470:69fc:105::b4a) (*.net *.split)
[01:10:18] *** Quits: m42e (~m42e@pb42.de) (*.net *.split)
[01:10:18] *** Quits: sasha (~sasha@wikimedia/-sasha-) (*.net *.split)
[01:10:18] *** Quits: opashley (~opashley@70.138.105.34.bc.googleusercontent.com) (*.net *.split)
[01:10:18] *** Quits: joris2 (~joris@195.123.218.123) (*.net *.split)
[01:10:18] *** Quits: phillhoc1ing (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com) (*.net *.split)
[01:10:18] *** Quits: d1b_ (~db@user/d1b) (*.net *.split)
[01:10:18] *** Quits: dawg_ (dirtydawg@triton.blinkenshell.org) (*.net *.split)
[01:10:18] *** Quits: vlt (~dm@157.230.21.14) (*.net *.split)
[01:10:18] *** Quits: krisd (krisd@s0.mydevil.net) (*.net *.split)
[01:10:18] *** Quits: klotzhauer_ (~klotzhaue@gibtesnochklopapier.de) (*.net *.split)
[01:10:18] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[01:10:18] *** Quits: syllin (~syllin@user/syllin) (*.net *.split)
[01:10:18] *** Quits: jramsay (~lack@user/lack) (*.net *.split)
[01:10:18] *** Quits: LuKaRo_ (~LuKaRo@p5dedaa53.dip0.t-ipconnect.de) (*.net *.split)
[01:10:18] *** Quits: N3X15 (~nexis@mail.nexisonline.net) (*.net *.split)
[01:10:18] *** Quits: aluria (~aluria@canonical/aluria) (*.net *.split)
[01:10:18] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[01:10:18] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[01:10:18] *** Quits: xavierdarkness (~xavierdar@user/xavierdarkness) (*.net *.split)
[01:10:18] *** Quits: decimuscorvinus_ (~jimmy@136.37.105.112) (*.net *.split)
[01:10:18] *** Quits: ksynwa_ (~ksynwa@5.45.111.57) (*.net *.split)
[01:10:18] *** Quits: casastortaAway (~casastort@dc4.krivokuca.net) (*.net *.split)
[01:10:18] *** Quits: Bluefoxicy (~Bluefoxic@c-73-132-244-30.hsd1.md.comcast.net) (*.net *.split)
[01:10:18] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[01:10:18] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (*.net *.split)
[01:10:18] *** Quits: dhch (~dhch@185.213.154.168) (*.net *.split)
[01:10:18] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[01:10:18] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (*.net *.split)
[01:10:18] *** Quits: Geronimo (~Geronimo@user/geronimo) (*.net *.split)
[01:10:18] *** Quits: sideeffex5613 (~sideeffex@user/sideeffex) (*.net *.split)
[01:10:18] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (*.net *.split)
[01:10:18] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (*.net *.split)
[01:10:18] *** Quits: relight (~relight@user/relight) (*.net *.split)
[01:10:18] *** Quits: kostkon (~kostkon@2a02:587:a116:e46c:7814:108:8592:7c58) (*.net *.split)
[01:10:18] *** Quits: km (znc@user/km) (*.net *.split)
[01:10:18] *** Quits: Jak_o_Shadows (~quassel@user/jak-o-shadows/x-5091859) (*.net *.split)
[01:10:19] *** Quits: dcaro_away (~dcaro@user/dcaro) (*.net *.split)
[01:10:19] *** Quits: sveinse (~sveinse@2a01:799:55e:1000:c23f:d5ff:fe69:c6fb) (*.net *.split)
[01:10:19] *** Quits: mgocobachi (~m@ancrae.com) (*.net *.split)
[01:10:19] *** Quits: the_rat (~ratto@emily.sorcio.org) (*.net *.split)
[01:10:19] *** Quits: themill (~stuart@debian/stuart) (*.net *.split)
[01:10:19] *** Quits: dynos01 (~dynos01@li820-149.members.linode.com) (*.net *.split)
[01:10:19] *** Quits: A_Dragon (A_D@libera/staff/dragon) (*.net *.split)
[01:10:19] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (*.net *.split)
[01:10:19] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[01:10:19] *** Quits: richrd (~wavi@thelounge/maintainer/wavi) (*.net *.split)
[01:10:19] *** Quits: harleypig (thelounge@harleypig.com) (*.net *.split)
[01:10:19] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (*.net *.split)
[01:10:19] *** Quits: simone (~nya@user/sx) (*.net *.split)
[01:10:19] *** Quits: _moep_ (~moep@user/moep/x-3358975) (*.net *.split)
[01:10:19] *** Quits: extnct (~extnct@2604:180:2:a54:1::9ce7) (*.net *.split)
[01:10:19] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[01:10:19] *** Quits: arash (arash@thinks.life.is-a.beauty) (*.net *.split)
[01:10:19] *** Quits: ialokin (znc@user/ialokin) (*.net *.split)
[01:10:19] *** Quits: DX099 (~dx099@2001:470:69fc:105::21ce) (*.net *.split)
[01:10:19] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (*.net *.split)
[01:10:19] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (*.net *.split)
[01:10:19] *** Quits: notepad7 (~notepad@129.159.46.243) (*.net *.split)
[01:10:19] *** Quits: Balzy (~Balzy@host-87-5-136-46.retail.telecomitalia.it) (*.net *.split)
[01:10:19] *** Quits: dulanic (~dulanic@47.187.144.163) (*.net *.split)
[01:10:19] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca) (*.net *.split)
[01:10:19] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[01:10:19] *** Quits: Melon_Bread (~Rain@li958-238.members.linode.com) (*.net *.split)
[01:10:19] *** Quits: b_jonas (~x@catv-176-63-4-16.catv.broadband.hu) (*.net *.split)
[01:10:19] *** Quits: SnoopJ (~snoopj@user/snoopj) (*.net *.split)
[01:10:19] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (*.net *.split)
[01:10:19] *** Quits: hendry (~hendry@210.23.22.8) (*.net *.split)
[01:10:19] *** Quits: chemsmith (~chemsmith@user/chemsmith) (*.net *.split)
[01:10:19] *** Quits: sharksauce (sharksauce@user/sharksauce) (*.net *.split)
[01:10:19] *** Quits: dharrigan (~dharrigan@user/dharrigan) (*.net *.split)
[01:10:19] *** Quits: roniez (~roniez@2a02:c206:2057:5765::1) (*.net *.split)
[01:10:19] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[01:10:19] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (*.net *.split)
[01:10:19] *** Quits: fling (~fling@user/fling) (*.net *.split)
[01:10:19] *** Quits: HenryG (~quassel@2607:5300:201:3000::f63) (*.net *.split)
[01:10:19] *** Quits: AnimalFarmPig (~quassel@user/animalfarmpig) (*.net *.split)
[01:10:19] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (*.net *.split)
[01:10:19] *** Quits: zacts (~zacts@user/zacts) (*.net *.split)
[01:10:19] *** Quits: osxtra (~root@136.49.108.80) (*.net *.split)
[01:10:19] *** Quits: khile (cacambo@triton.blinkenshell.org) (*.net *.split)
[01:10:19] *** Quits: jemark (jemark@user/jemark) (*.net *.split)
[01:10:19] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[01:10:19] *** Quits: libussa (~libussa@libussa.net) (*.net *.split)
[01:10:19] *** Quits: voidcat (~voidcat@user/voidcat) (*.net *.split)
[01:10:19] *** Quits: Dev0n (~Dev0n@user/dev0n) (*.net *.split)
[01:10:19] *** Quits: vimal (~vimal@ip-213-127-89-120.ip.prioritytelecom.net) (*.net *.split)
[01:10:19] *** Quits: ghostbuster (~admin@user/ghostbuster) (*.net *.split)
[01:10:19] *** Quits: capn (~capn@user/capn) (*.net *.split)
[01:10:19] *** Quits: sirn (~sirn@user/sirn) (*.net *.split)
[01:10:19] *** Quits: quesker (~idnet@mail.89vx.net) (*.net *.split)
[01:10:19] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[01:10:19] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[01:10:19] *** Quits: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com) (*.net *.split)
[01:10:19] *** Quits: Buliarous (~gypsydang@185.207.166.57) (*.net *.split)
[01:10:19] *** Quits: Alexer- (~alexer@85.17.122.98) (*.net *.split)
[01:10:19] *** Quits: manti7 (~manti7@176.10.104.94) (*.net *.split)
[01:10:19] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[01:10:20] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (*.net *.split)
[01:10:20] *** Quits: vlm (~vlm@user/vlm) (*.net *.split)
[01:10:20] *** Quits: qpdb (~qpdb@user/qpdb) (*.net *.split)
[01:10:20] *** Quits: doc (~doc@user/doc) (*.net *.split)
[01:10:20] *** Quits: predmijat (~predmijat@mail.strogopro.com) (*.net *.split)
[01:10:20] *** Quits: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com) (*.net *.split)
[01:10:20] *** Quits: Leonarbro (~Leonet@user/leonarbro) (*.net *.split)
[01:10:20] *** Quits: adium (adium@user/adium) (*.net *.split)
[01:10:20] *** Quits: manuels (~manuel@80.211.205.88) (*.net *.split)
[01:10:20] *** Quits: tk (~tk@ircpuzzles/staff/tk) (*.net *.split)
[01:10:20] *** Quits: nickodd (~nickodd@user/nickodd) (*.net *.split)
[01:10:20] *** Quits: millido (~millido@84.210.150.128) (*.net *.split)
[01:10:20] *** Quits: Duckle (~Duckle@user/duckle) (*.net *.split)
[01:10:20] *** Quits: mags (~mags@097-090-237-145.res.spectrum.com) (*.net *.split)
[01:10:20] *** Quits: Trieste (T@user/pilgrim) (*.net *.split)
[01:10:20] *** Quits: moto (~moto@user/moto) (*.net *.split)
[01:10:20] *** Quits: Sadale (~Sadale@user/sadale) (*.net *.split)
[01:10:20] *** Quits: nfc_ (nfc@tilde.institute) (*.net *.split)
[01:10:20] *** Quits: mxp (~mxp@185.16.205.131) (*.net *.split)
[01:10:20] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (*.net *.split)
[01:10:20] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (*.net *.split)
[01:10:20] *** Quits: sadara (~sadara@user/sadara) (*.net *.split)
[01:10:20] *** Quits: w1kl4s (~w1kl4s@user/w1kl4s) (*.net *.split)
[01:10:20] *** Quits: moldorcoder7_ (~moldorcod@37.120.143.28) (*.net *.split)
[01:10:20] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (*.net *.split)
[01:10:20] *** Quits: AM (~techman@82-203-163-159.bb.dnainternet.fi) (*.net *.split)
[01:10:20] *** Quits: sunyibo (~dorsch@2a04:52c0:101:443::) (*.net *.split)
[01:10:20] *** Quits: Quietus (~quietus@2a04:52c0:101:181::) (*.net *.split)
[01:10:20] *** Quits: dskull (~dskull@user/dskull) (*.net *.split)
[01:10:20] *** Quits: randall (~randall@user/randall) (*.net *.split)
[01:10:20] *** Quits: trashcatt (~trashcatt@znc.trashcat.xyz) (*.net *.split)
[01:10:20] *** Quits: gegenschein (~james@ec2-52-91-126-104.compute-1.amazonaws.com) (*.net *.split)
[01:10:20] *** Quits: rigid (~rigid@user/rigid) (*.net *.split)
[01:10:20] *** Quits: amaenli (~amaenli@user/amaenli) (*.net *.split)
[01:10:20] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[01:10:20] *** Quits: neil (~kneel@rockylinux/infra/neil) (*.net *.split)
[01:10:20] *** Quits: kgz (~kragniz@nyaa.kragniz.eu) (*.net *.split)
[01:10:20] *** Quits: odinsbane (~mbs@pat-pool-138.crick.ac.uk) (*.net *.split)
[01:10:20] *** Quits: Avaris (~Avaris@avar.is) (*.net *.split)
[01:10:20] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (*.net *.split)
[01:10:20] *** Quits: argoneus (~argoneus@argoneus.com) (*.net *.split)
[01:10:20] *** Quits: Wooble (~Wooble@107.170.27.240) (*.net *.split)
[01:10:20] *** Quits: anorthall_ (~anorthall@user/anorthall) (*.net *.split)
[01:10:20] *** Quits: mspe (~user@tilde.team/user/mspe) (*.net *.split)
[01:10:20] *** Quits: ouemt (~quassel@user/ouemt) (*.net *.split)
[01:10:20] *** Quits: Liexei (~Liexei@user/liexei) (*.net *.split)
[01:10:20] *** Quits: crackerjack (~crackerja@pear.bnc4free.com) (*.net *.split)
[01:10:20] *** Quits: MJ94 (mj94@user/mj94) (*.net *.split)
[01:10:20] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (*.net *.split)
[01:10:20] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (*.net *.split)
[01:10:20] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (*.net *.split)
[01:10:20] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (*.net *.split)
[01:10:20] *** Quits: black_13 (~jjosb@209.221.58.189) (*.net *.split)
[01:10:20] *** Quits: Telvana (~capo@user/telvana) (*.net *.split)
[01:10:20] *** Quits: tf (~tf@user/tf) (*.net *.split)
[01:10:20] *** Quits: toine42 (~antoine@2001:41d0:e:41f::1) (*.net *.split)
[01:10:20] *** Quits: zaquest (~notzaques@5.130.79.72) (*.net *.split)
[01:10:20] *** Quits: catdog (~quassel@2001:470:50f7:cdcd::cd1) (*.net *.split)
[01:10:20] *** Quits: Milos (~Milos@user/milos) (*.net *.split)
[01:10:20] *** Quits: cyphase (~cyphase@user/cyphase) (*.net *.split)
[01:10:20] *** Quits: jdmark (~jdmark@097-102-095-007.res.spectrum.com) (*.net *.split)
[01:10:20] *** Quits: _xor (~xor@72.49.199.147) (*.net *.split)
[01:10:20] *** Quits: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de) (*.net *.split)
[01:10:20] *** Quits: DerpGusta (~quassel@user/derpgusta) (*.net *.split)
[01:10:20] *** Quits: Lightsword (~Lightswor@user/lightsword) (*.net *.split)
[01:10:20] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (*.net *.split)
[01:10:20] *** Quits: altendky (sid135382@id-135382.hampstead.irccloud.com) (*.net *.split)
[01:10:21] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (*.net *.split)
[01:10:21] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[01:10:21] *** Quits: julia (~quassel@user/julia) (*.net *.split)
[01:10:21] *** Quits: portalrat (~portalrat@user/portalrat) (*.net *.split)
[01:10:21] *** Quits: or4n (~or4n@gerbera.qkka.org) (*.net *.split)
[01:10:21] *** Quits: ST47 (~ST47@wikimedia/st47) (*.net *.split)
[01:10:21] *** Quits: towel (~towel@user/towel) (*.net *.split)
[01:10:21] *** Quits: megaTherion (~therion@unix.io) (*.net *.split)
[01:10:21] *** Quits: _janus (~janus@blotter.ld-linux.so) (*.net *.split)
[01:10:21] *** Quits: leosilva (~leosilva@canonical/leosilva) (*.net *.split)
[01:10:21] *** Quits: byzandula (~byzandula@beerbq.net) (*.net *.split)
[01:10:21] *** Quits: lorenzosu (~lorenzosu@user/lorenzosu) (*.net *.split)
[01:10:21] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (*.net *.split)
[01:10:21] *** Quits: cebor (~cebor@user/cebor) (*.net *.split)
[01:10:21] *** Quits: Dantali0n (~Dantali0n@251-228-138-45.connected.by.freedominter.net) (*.net *.split)
[01:10:21] *** Quits: jpaa (~jpaa@87.118.126.66) (*.net *.split)
[01:10:21] *** Quits: emerent (~quassel@p200300cd571578eaba27ebfffed28a59.dip0.t-ipconnect.de) (*.net *.split)
[01:10:21] *** Quits: user3456 (user3456@user/user3456) (*.net *.split)
[01:10:21] *** Quits: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053) (*.net *.split)
[01:10:21] *** Quits: znpy (~znpy@user/znpy) (*.net *.split)
[01:10:21] *** Quits: gloomy (~gloomy@2001:470:69fc:105::ce00) (*.net *.split)
[01:10:21] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[01:10:21] *** Quits: {4144} (~{4144}@46.56.66.236) (*.net *.split)
[01:10:21] *** Quits: PocketKiller (PacKetIV@user/packetiv) (*.net *.split)
[01:10:21] *** Quits: faceface (~faceface@user/faceface) (*.net *.split)
[01:10:21] *** Quits: tdsmith (~tdsmith@tds.xyz) (*.net *.split)
[01:10:21] *** Quits: Chex (~Chex@user/chex) (*.net *.split)
[01:10:21] *** Quits: infidel (~ecrump@67-0-208-202.albq.qwest.net) (*.net *.split)
[01:10:21] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[01:10:21] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (*.net *.split)
[01:10:21] *** Quits: alxndr (~alexander@ybti.net) (*.net *.split)
[01:10:21] *** Quits: Ninpo (~Ninpo@user/ninpo) (*.net *.split)
[01:10:21] *** Quits: tkazi (~tkazi@user/tkazi) (*.net *.split)
[01:10:21] *** Quits: phlixi (~phlixi@aftr-82-135-86-19.dynamic.mnet-online.de) (*.net *.split)
[01:10:21] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[01:10:21] *** Quits: grandfso (~quassel@199.232.237.35.bc.googleusercontent.com) (*.net *.split)
[01:10:21] *** Quits: death916 (~death916@user/death916) (*.net *.split)
[01:10:21] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[01:10:21] *** Quits: dthpulse (~quassel@podciarou.sk) (*.net *.split)
[01:10:21] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[01:10:21] *** Quits: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au) (*.net *.split)
[01:10:21] *** Quits: cole (~cole@user/cole) (*.net *.split)
[01:10:21] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (*.net *.split)
[01:10:21] *** Quits: Soni (~quassel@autistic.space) (*.net *.split)
[01:10:21] *** Quits: binary01 (~binary01@174.141.153.217) (*.net *.split)
[01:10:21] *** Quits: scarce (~scarce@sourcehut/user/scarce) (*.net *.split)
[01:10:21] *** Quits: rvalue (~rvalue@user/rvalue) (*.net *.split)
[01:10:21] *** Quits: Kanjizai (~kanjizai@cpe-107-185-193-171.socal.res.rr.com) (*.net *.split)
[01:10:21] *** Quits: Warped (~Warped@user/warped) (*.net *.split)
[01:10:21] *** Quits: han-` (~han`@user/han-/x-0887595) (*.net *.split)
[01:10:21] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (*.net *.split)
[01:10:21] *** Quits: ionface (~ionface@user/ionface) (*.net *.split)
[01:10:21] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (*.net *.split)
[01:10:21] *** Quits: mokytis__ (~root@user/mokytis/x-7723836) (*.net *.split)
[01:10:22] *** Quits: aeadio (~aead@user/aead) (*.net *.split)
[01:10:22] *** Quits: JerryXia1 (~JerryXiao@user/jerryxiao) (*.net *.split)
[01:10:22] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (*.net *.split)
[01:10:22] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[01:10:22] *** Quits: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net) (*.net *.split)
[01:10:22] *** Quits: RoyK (~roy@user/royk) (*.net *.split)
[01:10:22] *** Quits: digilink (~digilink@user/digilink) (*.net *.split)
[01:10:22] *** Quits: Yorick- (znc@vps.freegamehosting.eu) (*.net *.split)
[01:10:22] *** Quits: yourfate (~yourfate@cabal.yourfate.org) (*.net *.split)
[01:10:22] *** Quits: korros (korros@2600:3c03::f03c:92ff:febf:689a) (*.net *.split)
[01:10:22] *** Quits: chatcat (chatcat@gateway/vpn/airvpn/chatcat) (*.net *.split)
[01:10:22] *** Quits: olasd (~olasd@softwareheritage/olasd) (*.net *.split)
[01:10:22] *** Quits: schemanic[m] (~schemanic@2001:470:69fc:105::1:2450) (*.net *.split)
[01:10:22] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (*.net *.split)
[01:10:22] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (*.net *.split)
[01:10:22] *** Quits: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com) (*.net *.split)
[01:10:22] *** Quits: graybeard (~graybeard@user/graybeard) (*.net *.split)
[01:10:22] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (*.net *.split)
[01:10:22] *** Quits: xakan (~xakan@pnmx.zdx.fr) (*.net *.split)
[01:10:22] *** Quits: pacbard (~pacbard@user/pacbard) (*.net *.split)
[01:10:22] *** Quits: con3 (~con3@143.198.53.32) (*.net *.split)
[01:10:22] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[01:10:22] *** Quits: edr (~edr@user/edr) (*.net *.split)
[01:10:22] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[01:10:22] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[01:10:22] *** Quits: tudor_ (~tudor@tomka.hu) (*.net *.split)
[01:10:22] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[01:10:22] *** Quits: noent (~quassel@squint.a-oben.org) (*.net *.split)
[01:10:22] *** Quits: Adrixan_ (~Adrixan@218.72.75.34.bc.googleusercontent.com) (*.net *.split)
[01:10:22] *** Quits: MightyMu_ (~MightyMu@104.131.138.31) (*.net *.split)
[01:10:22] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[01:10:22] *** Quits: grateful (grateful@user/grateful) (*.net *.split)
[01:10:22] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[01:10:22] *** Quits: ttkpy (501@46-97-229-216.sr2.pon.net) (*.net *.split)
[01:10:22] *** Quits: DaPinkOne (~Dap@user/dap) (*.net *.split)
[01:10:22] *** Quits: LogicAside (~LogicAsid@user/logicaside) (*.net *.split)
[01:10:22] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (*.net *.split)
[01:10:22] *** Quits: ripdog (~quassel@user/ripdog) (*.net *.split)
[01:10:22] *** Quits: rgp (~rgp@user/rgp) (*.net *.split)
[01:10:22] *** Quits: purplex_ (~purplex@user/purplex) (*.net *.split)
[01:10:22] *** Quits: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com) (*.net *.split)
[01:10:22] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[01:10:22] *** Quits: kline (~freedom0@libera/staff/kline) (*.net *.split)
[01:10:22] *** Quits: chymera (~chymera@ns1000526.ip-51-81-46.us) (*.net *.split)
[01:10:22] *** Quits: ammar2 (admin@i.diddled.with.the.opers.so.they.klined.me) (*.net *.split)
[01:10:22] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[01:10:22] *** Quits: nyany (~nyany@dronebl/admin/cat) (*.net *.split)
[01:10:22] *** Quits: bertiger (~bertiger@user/bertiger) (*.net *.split)
[01:10:22] *** Quits: Cybergeek (~Cybergeek@2a03:b0c0:3:e0::1ab:5001) (*.net *.split)
[01:10:22] *** Quits: gurki (~gurki@user/gurki) (*.net *.split)
[01:10:22] *** Quits: Henryx (~ebianchi@2a01:4f8:1c0c:76ad::1) (*.net *.split)
[01:10:22] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[01:10:23] *** Quits: auri (~quassel@fsf/member/auri) (*.net *.split)
[01:10:23] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[01:10:23] *** Quits: gaken (~gaken@user/galen) (*.net *.split)
[01:10:23] *** Quits: ngp (~ngp@199.180.249.183) (*.net *.split)
[01:10:23] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (*.net *.split)
[01:10:23] *** Quits: Fossil (~Fossil@95.85.23.165) (*.net *.split)
[01:10:23] *** Quits: alexyov (~alexyov@79.124.0.2) (*.net *.split)
[01:10:23] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[01:10:23] *** Quits: jessicant (~jessica@static.172.234.251.148.clients.your-server.de) (*.net *.split)
[01:10:23] *** Quits: Dotz0cat (~Dotz0cat@h14.95.187.173.dynamic.ip.windstream.net) (*.net *.split)
[01:10:23] *** Quits: mumixam (~m@user/mumixam) (*.net *.split)
[01:10:23] *** Quits: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6) (*.net *.split)
[01:10:23] *** Quits: greenbigfrog (~greenbigf@95.90.216.82) (*.net *.split)
[01:10:23] *** Quits: Moyst_ (~moyst@user/moyst) (*.net *.split)
[01:10:23] *** Quits: mrhands (~mrhands@user/mrhands) (*.net *.split)
[01:10:23] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (*.net *.split)
[01:10:23] *** Quits: jtanner (sid194399@id-194399.helmsley.irccloud.com) (*.net *.split)
[01:10:23] *** Quits: ormiret (sid314108@id-314108.lymington.irccloud.com) (*.net *.split)
[01:10:23] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (*.net *.split)
[01:10:23] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (*.net *.split)
[01:10:23] *** Quits: ede (~ede@user/ede) (*.net *.split)
[01:10:23] *** Quits: JanC (~janc@user/janc) (*.net *.split)
[01:10:23] *** Quits: bsdbandit (~bwell@users.757.org) (*.net *.split)
[01:10:23] *** Quits: kolcon (~kolcon@v.kolouch.org) (*.net *.split)
[01:10:23] *** Quits: nme (~nme@gateway/vpn/pia/nme) (*.net *.split)
[01:10:23] *** Quits: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h) (*.net *.split)
[01:10:23] *** Quits: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net) (*.net *.split)
[01:10:23] *** Quits: fury (uid193779@id-193779.helmsley.irccloud.com) (*.net *.split)
[01:10:23] *** Quits: peterandre (peterandre@2605:6400:c847:1524::4251) (*.net *.split)
[01:10:23] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (*.net *.split)
[01:10:23] *** Quits: Mathisen (mathisen@about/windows/staff/mathisen) (*.net *.split)
[01:10:23] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[01:10:23] *** Quits: fuz (~fuz@user/fuz) (*.net *.split)
[01:10:23] *** Quits: mrtnt_ (~Martin@2001:ad0:1:1:da9e:f3ff:fe4a:8dd0) (*.net *.split)
[01:10:23] *** Quits: sco1 (~sco1@charon.whatbox.ca) (*.net *.split)
[01:10:23] *** Quits: wallbroken (wallbroken@user/wallbroken) (*.net *.split)
[01:10:23] *** Quits: hexa- (~hexa-@juno.lossy.network) (*.net *.split)
[01:10:23] *** Quits: redgloboli (~redglobol@user/redgloboli) (*.net *.split)
[01:10:23] *** Quits: The-Compiler (~compiler@the-compiler.org) (*.net *.split)
[01:10:23] *** Quits: mwilson (~mwilson@li159-72.members.linode.com) (*.net *.split)
[01:10:23] *** Quits: allegary (~allegary@apache/committer/gjm) (*.net *.split)
[01:10:23] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[01:10:23] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (*.net *.split)
[01:10:23] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (*.net *.split)
[01:10:24] *** Quits: berton[m] (~berton@2001:470:69fc:105::ce36) (*.net *.split)
[01:10:24] *** Quits: canardo (~canardo@2001:470:69fc:105::e110) (*.net *.split)
[01:10:24] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[01:10:24] *** Quits: ringo__ (~ringo@157.230.117.128) (*.net *.split)
[01:10:24] *** Quits: marienz__ (~marienz@libera/staff/marienz) (*.net *.split)
[01:10:24] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[01:10:24] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (*.net *.split)
[01:10:24] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (*.net *.split)
[01:10:24] *** Quits: Peng_ (~mnordhoff@ultimate1.mnrd.us) (*.net *.split)
[01:10:24] *** Quits: OlaNys (onm@irccore.ofelbar.se) (*.net *.split)
[01:10:24] *** Quits: Luke (~ldm@hacksoc/member) (*.net *.split)
[01:10:24] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[01:10:24] *** Quits: gbear605 (~gbear605@user/gbear605) (*.net *.split)
[01:10:24] *** Quits: njhanley (~njhanley@static.15.210.217.95.clients.your-server.de) (*.net *.split)
[01:10:24] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[01:10:24] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[01:10:24] *** Quits: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com) (*.net *.split)
[01:10:24] *** Quits: acnebs- (~acnebs@198.199.68.107) (*.net *.split)
[01:10:24] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[01:10:24] *** Quits: jocke-l (jocke-l@a.x0.is) (*.net *.split)
[01:10:24] *** Quits: bss (bss@rie.incorporeal.org) (*.net *.split)
[01:10:24] *** Quits: abyss (~robbins@user/robbins) (*.net *.split)
[01:10:24] *** Quits: mmercer (daemoen@2605:d100:0:2d:5054:ff:fef0:3953) (*.net *.split)
[01:10:24] *** Quits: cslr (~cslr@85-76-34-233-nat.elisa-mobile.fi) (*.net *.split)
[01:10:24] *** Quits: MrC (Ben@mrbenc.net) (*.net *.split)
[01:10:24] *** Quits: spaceone (~spaceone@wc1.wechall.net) (*.net *.split)
[01:10:24] *** Quits: u4t (~chat@78.ip-139-99-236.net) (*.net *.split)
[01:10:24] *** Quits: dnns01_ (~quassel@2a02:c207:3003:651::1) (*.net *.split)
[01:10:24] *** Quits: seabre (~seabre@user/seabre) (*.net *.split)
[01:10:24] *** Quits: Mikro (leo@libera.ninja) (*.net *.split)
[01:10:24] *** Quits: cotsuka (~cotsuka@user/cotsuka) (*.net *.split)
[01:10:24] *** Quits: stack[m] (~queue-@user/queue/x-7267619) (*.net *.split)
[01:10:24] *** Quits: dragonmaster (dragonmast@user/dragonmaster) (*.net *.split)
[01:10:24] *** Quits: grawity (grawity@star.nullroute.lt) (*.net *.split)
[01:10:24] *** Quits: cyberjunkie (~cyberjunk@wireguard/tunneler/cyberjunkie) (*.net *.split)
[01:10:24] *** Quits: Viewday11 (~Viewday@user/viewday) (*.net *.split)
[01:10:24] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[01:10:24] *** Quits: fannagoganna (uid110488@id-110488.tinside.irccloud.com) (*.net *.split)
[01:10:24] *** Quits: demsh (ws14dshtt8@hermod.demsh.org) (*.net *.split)
[01:10:25] *** Quits: skreech (skreech@user/skreech) (*.net *.split)
[01:10:25] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: agronholm (sid403424@id-403424.helmsley.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: mobius (sid478273@id-478273.uxbridge.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: MercilessDeth (~brad@136.49.59.177) (*.net *.split)
[01:10:25] *** Quits: lastshell (~lastshell@user/lastshell) (*.net *.split)
[01:10:25] *** Quits: aoei\Chickatrice (aoei@nethackscoreboard/aoei) (*.net *.split)
[01:10:25] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (*.net *.split)
[01:10:25] *** Quits: nigelb (~nigel@zeus.nigelb.me) (*.net *.split)
[01:10:25] *** Quits: jbe (~jbe@lysator/root/jbe) (*.net *.split)
[01:10:25] *** Quits: kushal (~hopless@dgplug/kushal) (*.net *.split)
[01:10:25] *** Quits: encukou (quassel@nat-pool-brq-t.redhat.com) (*.net *.split)
[01:10:25] *** Quits: nomn (nomn@user/nomn) (*.net *.split)
[01:10:25] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (*.net *.split)
[01:10:25] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[01:10:25] *** Quits: bryce (~bryce@ool-457dd6ac.dyn.optonline.net) (*.net *.split)
[01:10:25] *** Quits: ttys000 (~ttys000@user/ttys000) (*.net *.split)
[01:10:25] *** Quits: skipper (~whatsupbo@user/scobydoo) (*.net *.split)
[01:10:25] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (*.net *.split)
[01:10:25] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (*.net *.split)
[01:10:25] *** Quits: Arw (~Arwalk@lfbn-dij-1-1462-22.w109-221.abo.wanadoo.fr) (*.net *.split)
[01:10:25] *** Quits: koo5_ (~quassel@51.140.155.227) (*.net *.split)
[01:10:25] *** Quits: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (*.net *.split)
[01:10:25] *** Quits: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net) (*.net *.split)
[01:10:25] *** Quits: Daemoen (~Daemoen@daemoen.ct-unlimited.com) (*.net *.split)
[01:10:25] *** Quits: niluje (~niluje@2a05:d012:f91:1700:6975:ef0b:def6:3bdd) (*.net *.split)
[01:10:25] *** Quits: leonardo (~leonardo@user/leonardo) (*.net *.split)
[01:10:25] *** Quits: TML (~tml@user/tml) (*.net *.split)
[01:10:25] *** Quits: Leliana (is@the.one.and.only.revthefox.co.uk) (*.net *.split)
[01:10:25] *** Quits: deutor (~quassel@82.177.4.226) (*.net *.split)
[01:10:25] *** Quits: Vipulk (~vipulk@user/vipulk) (*.net *.split)
[01:10:25] *** Quits: ghormoon (~ghormoon@ghorland.net) (*.net *.split)
[01:10:25] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[01:10:25] *** Quits: guntbert (~yesitsme@user/guntbert) (*.net *.split)
[01:10:25] *** Quits: michaelis (~michaelis@193.183.209.17) (*.net *.split)
[01:10:25] *** Quits: Jimmy2027 (~hendrik@2001:1620:2018:38:dde3:1b0f:dc57:eb0f) (*.net *.split)
[01:10:26] *** Quits: apollo13 (apollo13@django/moderator/apollo13) (*.net *.split)
[01:10:26] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[01:10:26] *** Quits: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de) (*.net *.split)
[01:10:26] *** Quits: octav1a (~quassel@173.195.145.98) (*.net *.split)
[01:10:26] *** Quits: summonner (~summonner@188.26.74.156) (*.net *.split)
[01:10:26] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[01:10:26] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[01:10:26] *** Quits: Wegge (~wegge@user/wegge) (*.net *.split)
[01:10:26] *** Quits: exarkun (~exarkun@user/exarkun) (*.net *.split)
[01:10:26] *** Quits: Bato (~plauder@2001:bc8:182c:b39::1) (*.net *.split)
[01:10:26] *** Quits: Quack (~Quack@185.21.216.169) (*.net *.split)
[01:10:26] *** Quits: oprypin (~irc@pryp.in) (*.net *.split)
[01:10:26] *** Quits: ComputerTech (~ComputerT@user/computertech) (*.net *.split)
[01:10:26] *** Quits: jochum (~quassel@user/jochum) (*.net *.split)
[01:10:26] *** Quits: avu (~jan@user/avu) (*.net *.split)
[01:10:26] *** Quits: sudomann (~sudomann@2601:543:100:4fc8:8838:fd4e:364:585d) (*.net *.split)
[01:10:26] *** Quits: montpol (montpol@fine.mouses.xyz) (*.net *.split)
[01:10:26] *** Quits: Togra (~Togra@user/togra) (*.net *.split)
[01:10:26] *** Quits: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net) (*.net *.split)
[01:10:26] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (*.net *.split)
[01:10:26] *** Quits: renrelkha (~renrelkha@user/renrelkha) (*.net *.split)
[01:10:26] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (*.net *.split)
[01:10:26] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (*.net *.split)
[01:10:26] *** Quits: OPK (~OPK@user/opk) (*.net *.split)
[01:10:26] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (*.net *.split)
[01:10:26] *** Quits: mtg (~mtg@209.250.241.226) (*.net *.split)
[01:10:26] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[01:10:26] *** Quits: saschi_ (~saschi@user/saschi) (*.net *.split)
[01:10:26] *** Quits: cache (~cache@user/cacheyourdreams) (*.net *.split)
[01:10:26] *** Quits: dgw (dgw@sopel/admin/dgw) (*.net *.split)
[01:10:26] *** Quits: bluss (~bluss@user/bluss) (*.net *.split)
[01:10:26] *** Quits: mdw_ (~root@159.65.86.163) (*.net *.split)
[01:10:26] *** Quits: SeeM (~SeeM@153.ip-54-38-53.eu) (*.net *.split)
[01:10:27] *** Quits: remedan (~remedan@balak.me) (*.net *.split)
[01:10:27] *** Quits: flyback (~flyback@2601:540:8201:1e60::9a75) (*.net *.split)
[01:10:27] *** Quits: alex11 (~alex11@user/alex11) (*.net *.split)
[01:10:27] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (*.net *.split)
[01:10:27] *** Quits: Yhg1s (sid387777@python/psf/thomas) (*.net *.split)
[01:10:27] *** Quits: yac (~user@user/yac) (*.net *.split)
[01:10:27] *** Quits: CodeGeek (~codegeek@about/java/CodeGeek) (*.net *.split)
[01:10:27] *** Quits: MacGyver (~macgyver@user/macgyver) (*.net *.split)
[01:10:27] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[01:10:27] *** Quits: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831) (*.net *.split)
[01:10:27] *** Quits: meain (~meain@2001:470:69fc:105::2db) (*.net *.split)
[01:10:27] *** Quits: neolem (~neolem@2001:470:69fc:105::c675) (*.net *.split)
[01:10:27] *** Quits: kikijiki[m] (~kikijiki@user/kikijiki) (*.net *.split)
[01:10:27] *** Quits: pschmitt[m] (~pschmitt@2001:470:69fc:105::1:24cb) (*.net *.split)
[01:10:27] *** Quits: ruediger (~ruediger@user/ruediger) (*.net *.split)
[01:10:27] *** Quits: njt (~njt@zaph.org) (*.net *.split)
[01:10:27] *** Quits: aivkiv (~aivkiv@2a01:4f8:201:6250::2) (*.net *.split)
[01:10:27] *** Quits: push-f (~martin@push-f.com) (*.net *.split)
[01:10:27] *** Quits: MelMalik (ellenor@vice-chairwoman.of.freenode.management) (*.net *.split)
[01:10:27] *** Quits: shrysr (~shrysr@user/shrysr) (*.net *.split)
[01:10:27] *** Quits: VSpike (~johncc@2001:bc8:47ac:1a22::1) (*.net *.split)
[01:10:27] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[01:10:27] *** Quits: zeus (~user@user/kamyl) (*.net *.split)
[01:10:27] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[01:10:27] *** Quits: majors (~majors@user/majors) (*.net *.split)
[01:10:27] *** Quits: n-st (~n-st@user/n-st) (*.net *.split)
[01:10:27] *** Quits: effprime (~effprime@user/effprime) (*.net *.split)
[01:10:27] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[01:10:27] *** Quits: kiska (james@user/kiska) (*.net *.split)
[01:10:27] *** Quits: vinay (~Vinay@user/vinay-keshava) (*.net *.split)
[01:10:27] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[01:10:27] *** Quits: quasineutral (~quaisneut@user/quasineutral) (*.net *.split)
[01:10:28] *** Quits: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153) (*.net *.split)
[01:10:28] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (*.net *.split)
[01:10:28] *** Quits: Pici (bnrubin@2600:3c03::f03c:91ff:fe60:2576) (*.net *.split)
[01:10:28] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (*.net *.split)
[01:10:28] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[01:10:28] *** Quits: gerard (~gerard@user/gerard) (*.net *.split)
[01:10:28] *** Quits: B33F_1337 (~b33f1337@host.b33f1337.com) (*.net *.split)
[01:10:28] *** Quits: klys_ (~mdasoh@show.op8.us) (*.net *.split)
[01:10:28] *** Quits: goatish_ (~geclark@19.60.188.35.bc.googleusercontent.com) (*.net *.split)
[01:10:28] *** Quits: queue- (~nerd@user/queue/x-7267619) (*.net *.split)
[01:10:28] *** Quits: yolk (~yolk@2600:1f16:f4a:2100:77f5:a0ec:35f:147b) (*.net *.split)
[01:10:28] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[01:10:28] *** Quits: Haise0 (~haise01@user/haise01) (*.net *.split)
[01:10:28] *** Quits: dfch (~dfch@user/dfch) (*.net *.split)
[01:10:28] *** Quits: ChrisWarrick (kwpolska@user/kwpolska) (*.net *.split)
[01:10:28] *** Quits: MikachuPi (~Mikachu@2001:bc8:47a8:559::1) (*.net *.split)
[01:10:28] *** Quits: hodapp (~mawson@user/hodapp) (*.net *.split)
[01:10:28] *** Quits: achilleas (ach@user/achilleas) (*.net *.split)
[01:10:28] *** Quits: mpmc (~mpmc@user/mpmc) (*.net *.split)
[01:10:28] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[01:10:28] *** Quits: LucaTM (~LucaTM@user/lucatm) (*.net *.split)
[01:10:28] *** Quits: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be) (*.net *.split)
[01:10:28] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[01:10:28] *** Quits: jposer (sid132110@id-132110.uxbridge.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: r0bby (r0bby@user/r0bby) (*.net *.split)
[01:10:28] *** Quits: fstd (~fstd@xdsl-87-79-98-69.nc.de) (*.net *.split)
[01:10:28] *** Quits: grandrew (~grandrew@2601:642:c301:c600:f22f:74ff:feac:90a3) (*.net *.split)
[01:10:28] *** Quits: Abrax (~Abrax@user/abrax) (*.net *.split)
[01:10:28] *** Quits: twainwek (~user@144.211.196.35.bc.googleusercontent.com) (*.net *.split)
[01:10:28] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[01:10:28] *** Quits: {HD} (~{HD}@86.106.121.213) (*.net *.split)
[01:10:28] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[01:10:28] *** Quits: bkhl (~bkhl@user/bkhl) (*.net *.split)
[01:10:28] *** Quits: Keira (~k@lulzsec.co.uk) (*.net *.split)
[01:10:28] *** Quits: grym (~grym@user/grym) (*.net *.split)
[01:10:28] *** Quits: llua (~llua@zsh/developer/llua) (*.net *.split)
[01:10:28] *** Quits: a1paca_ (~a1paca@user/a1paca) (*.net *.split)
[01:10:28] *** Quits: moose (~moose@user/moose) (*.net *.split)
[01:10:28] *** Quits: hwrd (sid64402@id-64402.lymington.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: Lvl4Sword (sid483043@user/lvl4sword) (*.net *.split)
[01:10:28] *** Quits: omegatron (~some@p54bd5e02.dip0.t-ipconnect.de) (*.net *.split)
[01:10:28] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (*.net *.split)
[01:10:29] *** Quits: urth (~urth@geertswei.nl) (*.net *.split)
[01:10:29] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (*.net *.split)
[01:10:29] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[01:10:29] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (*.net *.split)
[01:10:29] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (*.net *.split)
[01:10:29] *** Quits: newdimension (~newdimnes@user/newdimension) (*.net *.split)
[01:10:29] *** Quits: beanzilla (beanzilla@user/beanzilla) (*.net *.split)
[01:10:29] *** Quits: Koffa (jkohvakk@user/koffa) (*.net *.split)
[01:10:29] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[01:10:29] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[01:10:29] *** Quits: deltab (~deltab@user/deltab) (*.net *.split)
[01:10:29] *** Quits: xaltsc (~xaltsc@user/xaltsc) (*.net *.split)
[01:10:29] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[01:10:29] *** Quits: daimbag (~bagdarrel@2607:5300:60:21b::1) (*.net *.split)
[01:10:29] *** Quits: daddy (ryan@hashbang/bdfl) (*.net *.split)
[01:10:29] *** Quits: b3z (~b3z@user/b3z) (*.net *.split)
[01:10:29] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[01:10:29] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (*.net *.split)
[01:10:29] *** Quits: EyeOfJupiter (~EyeOfJ@user/eyeofjupiter) (*.net *.split)
[01:10:29] *** Quits: tris (emptystrin@irc1.lessbroken.org) (*.net *.split)
[01:10:29] *** Quits: oisota (~oisota@user/oisota) (*.net *.split)
[01:10:29] *** Quits: Antibody (~Antibody@107.170.145.30) (*.net *.split)
[01:10:29] *** Quits: urb4nm (~urb4nm@165.227.158.65) (*.net *.split)
[01:10:29] *** Quits: arza (arza@arza.us) (*.net *.split)
[01:10:29] *** Quits: percY- (~percY@138.68.239.19) (*.net *.split)
[01:10:29] *** Quits: ebb (ebb@user/ebb) (*.net *.split)
[01:10:29] *** Quits: ario (~ario@159.65.220.102) (*.net *.split)
[01:10:29] *** Quits: adamchainz (~adamj@51.15.34.126) (*.net *.split)
[01:10:30] *** Quits: delarge (~chamigo@ctm.linuxers.cl) (*.net *.split)
[01:10:30] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:edef:5ef4:644d:7d12) (*.net *.split)
[01:10:30] *** Quits: smrtz (~smrtz@user/smrtz) (*.net *.split)
[01:10:30] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (*.net *.split)
[01:10:30] *** Quits: kevr (~kevr@user/kevr) (*.net *.split)
[01:10:30] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (*.net *.split)
[01:10:30] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (*.net *.split)
[01:10:30] *** Quits: mickey8 (~user@user/mickey) (*.net *.split)
[01:10:30] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (*.net *.split)
[01:10:30] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (*.net *.split)
[01:10:30] *** Quits: de-facto (~de-facto@user/de-facto) (*.net *.split)
[01:10:30] *** Quits: spithash (~spithash@user/spithash) (*.net *.split)
[01:10:30] *** Quits: rany (~rany@user/rany) (*.net *.split)
[01:10:30] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (*.net *.split)
[01:10:30] *** Quits: bindu (~bindu@user/bindu) (*.net *.split)
[01:10:30] *** Quits: ano (~ano@user/ano) (*.net *.split)
[01:10:30] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (*.net *.split)
[01:10:30] *** Quits: orangeboxcutter (~orange@user/orangeboxcutter) (*.net *.split)
[01:10:30] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (*.net *.split)
[01:10:30] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (*.net *.split)
[01:10:30] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (*.net *.split)
[01:10:30] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (*.net *.split)
[01:10:30] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (*.net *.split)
[01:10:30] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (*.net *.split)
[01:10:30] *** Quits: vaio (~gary@user/ghost) (*.net *.split)
[01:10:30] *** Quits: metaace_ (~metaace@user/metaace) (*.net *.split)
[01:10:30] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (*.net *.split)
[01:10:30] *** Quits: CombatVet (~c4@user/combatvet) (*.net *.split)
[01:11:25] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[01:12:52] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 264 seconds)
[01:14:04] *** Quits: Portugol9 (~Portugol9@user/portugol9) (Ping timeout: 264 seconds)
[01:14:21] *** Joins: fdgfe (~fdgfe@178.49.152.151)
[01:14:21] *** Joins: smrtz (~smrtz@user/smrtz)
[01:14:21] *** Joins: Colt (~Colt@user/colt)
[01:14:21] *** Joins: ham5urg (~ham5urg@p200300d167435800aad994dfc5b5092c.dip0.t-ipconnect.de)
[01:14:21] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[01:14:21] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[01:14:21] *** Joins: bbbbbb (~peppbel@c-73-221-241-101.hsd1.wa.comcast.net)
[01:14:21] *** Joins: Roey (~Roey@user/Roey)
[01:14:21] *** Joins: kevr (~kevr@user/kevr)
[01:14:21] *** Joins: ArtfulDodger (~ArtfulDod@2a02-8440-630d-53c5-78ba-13a3-5b05-4fb6.rev.sfr.net)
[01:14:21] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:edef:5ef4:644d:7d12)
[01:14:21] *** Joins: KombuchaKip (~kip@192.252.230.5)
[01:14:21] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[01:14:21] *** Joins: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il)
[01:14:21] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[01:14:21] *** Joins: nomic (~nomic@185.217.117.132)
[01:14:21] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[01:14:21] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[01:14:21] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[01:14:21] *** Joins: nanonyme (nanonyme@kapsi.fi)
[01:14:21] *** Joins: tazle (tazle@kapsi.fi)
[01:14:21] *** Joins: mindlesstux[m] (~mindlesst@user/mindlesstux)
[01:14:21] *** Joins: cotsuka (~cotsuka@user/cotsuka)
[01:14:21] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[01:14:21] *** Joins: jinsun_ (~jinsun@user/jinsun)
[01:14:21] *** Joins: CrtxReavr (crtxreavr@shodan.trioptimum.com)
[01:14:21] *** Joins: cosimone (~user@93-47-231-139.ip115.fastwebnet.it)
[01:14:21] *** Joins: Betal (~Betal@user/betal)
[01:14:21] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[01:14:21] *** Joins: vodkra (~vodkra@user/vodkra)
[01:14:21] *** Joins: LostInWeb (~quassel@narvi.bifroest.eu)
[01:14:21] *** Joins: holgersson (~quassel@user/holgersson)
[01:14:21] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
[01:14:21] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:14:21] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[01:14:21] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[01:14:21] *** Joins: l4yer (~l4yer@2a07-a880-3101-1051-a922-bb49-135a-4393.pool6.ovpn.com)
[01:14:21] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[01:14:21] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[01:14:21] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[01:14:21] *** Joins: FluffyMask (~masque@user/fluffymask)
[01:14:21] *** Joins: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul)
[01:14:21] *** Joins: dreamon (~dreamon@pd95039d2.dip0.t-ipconnect.de)
[01:14:21] *** Joins: justache (~justache@user/justache)
[01:14:21] *** Joins: sgn (~sgn@user/sgn)
[01:14:21] *** Joins: nyah (~nyah@94.6.71.219)
[01:14:21] *** Joins: theelous3 (~theelous3@109.255.56.189)
[01:14:21] *** Joins: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu)
[01:14:21] *** Joins: emptynine (tkk@cybertron.redlight.li)
[01:14:21] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[01:14:21] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[01:14:21] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[01:14:21] *** Joins: jamiejackson (~jamiejack@207.172.87.34)
[01:14:21] *** Joins: zebrag (~chris@user/zebrag)
[01:14:21] *** Joins: darksun (~darksun@user/darksun)
[01:14:21] *** Joins: Pixi_ (~Pixi@user/pixi)
[01:14:21] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[01:14:21] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[01:14:21] *** Joins: SuperLag (~akulbe@user/superlag)
[01:14:21] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[01:14:21] *** Joins: grooverman (~grooverma@177.95.12.14)
[01:14:21] *** Joins: trashbird (~trashbird@user/trashbird)
[01:14:21] *** Joins: beencubed (~beencubed@209.131.238.248)
[01:14:21] *** Joins: Naan (~Naan@user/naan)
[01:14:21] *** Joins: mallkrampus (~mallkramp@172.93.207.236)
[01:14:21] *** Joins: Jefren1 (~Jefren@208.104.190.60)
[01:14:21] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[01:14:21] *** Joins: ckdCreations (~ckdCreati@147.55.130.38)
[01:14:21] *** Joins: wovixo (~wovixo@128.104.205.49)
[01:14:21] *** Joins: noord (~noord@user/noord)
[01:14:21] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[01:14:21] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[01:14:21] *** Joins: superboot (~agentgasm@user/superboot)
[01:14:21] *** Joins: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net)
[01:14:21] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[01:14:21] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[01:14:21] *** Joins: orbisvicis (~orbisvici@user/orbisvicis)
[01:14:21] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[01:14:21] *** Joins: kehn (quassel@2600:3c03::f03c:92ff:fe9a:ad08)
[01:14:21] *** Joins: drincruz (drincruz@2607:5300:203:3f52::19)
[01:14:21] *** Joins: vimal (~vimal@ip-213-127-89-120.ip.prioritytelecom.net)
[01:14:21] *** Joins: p-i-_ (~Ohmu@223.206.149.59)
[01:14:21] *** Joins: gusto (~Augustus@109.255.100.54)
[01:14:21] *** Joins: cdown (~cdown@163.114.131.1)
[01:14:21] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[01:14:21] *** Joins: mickey8 (~user@user/mickey)
[01:14:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:14:21] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[01:14:21] *** Joins: supakeen (~user@python/site-packages/supakeen)
[01:14:21] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[01:14:21] *** Joins: lyr (~lyr@user/lyr)
[01:14:21] *** Joins: traptrip (trip@brigaid.xs4all.nl)
[01:14:21] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[01:14:21] *** Joins: cursey (~cursey@user/cursey)
[01:14:21] *** Joins: cheater (~Username@user/cheater)
[01:14:21] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:14:21] *** Joins: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182)
[01:14:21] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:6d74:7509:74f5:7d14)
[01:14:21] *** Joins: psyxopompos (~psyxopomp@user/psyxopompos)
[01:14:21] *** Joins: akaWolf (~akaWolf@akawolf.org)
[01:14:21] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:14:21] *** Joins: plastico (~plastico@neomutt/plastico)
[01:14:21] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:14:21] *** Joins: de-facto (~de-facto@user/de-facto)
[01:14:21] *** Joins: michaelis (~michaelis@193.183.209.17)
[01:14:21] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[01:14:21] *** Joins: LucaTM (~LucaTM@user/lucatm)
[01:14:21] *** Joins: hudo (~hhudo_@mail.allm-elektro.de)
[01:14:22] *** Joins: martums (~martums@user/martums)
[01:14:22] *** Joins: rvgate (~rvgate@user/rvgate)
[01:14:22] *** Joins: spithash (~spithash@user/spithash)
[01:14:22] *** Joins: rany (~rany@user/rany)
[01:14:22] *** Joins: seednode (~seednode@user/seednode)
[01:14:22] *** Joins: iomari891 (~iomari891@105.112.138.38)
[01:14:22] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[01:14:22] *** Joins: stack[m] (~queue-@user/queue/x-7267619)
[01:14:22] *** Joins: mjsir911 (~bnc@user/mjsir911)
[01:14:22] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[01:14:22] *** Joins: jessicant (~jessica@static.172.234.251.148.clients.your-server.de)
[01:14:22] *** Joins: sabet (~sabet@user/sabet)
[01:14:22] *** Joins: auri (~quassel@fsf/member/auri)
[01:14:22] *** Joins: novasharper (~novasharp@2001:470:69fc:105::b4a)
[01:14:22] *** Joins: wereii (~wereii@37.205.14.89)
[01:14:22] *** Joins: chronon (~chronon@user/chronon)
[01:14:22] *** Joins: regulate (~regulate@koduro.com)
[01:14:22] *** Joins: gaken (~gaken@user/galen)
[01:14:22] *** Joins: ngp (~ngp@199.180.249.183)
[01:14:22] *** Joins: Liexei (~Liexei@user/liexei)
[01:14:22] *** Joins: pizza (~pizzaiolo@user/pizzaiolo)
[01:14:22] *** Joins: monchi (~joints@143.198.92.132)
[01:14:22] *** Joins: cdleonard (~cdleonard@ec2-52-70-55-94.compute-1.amazonaws.com)
[01:14:22] *** Joins: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl)
[01:14:22] *** Joins: grawity (grawity@star.nullroute.lt)
[01:14:22] *** Joins: cyberjunkie (~cyberjunk@wireguard/tunneler/cyberjunkie)
[01:14:22] *** Joins: Fossil (~Fossil@95.85.23.165)
[01:14:22] *** Joins: alexyov (~alexyov@79.124.0.2)
[01:14:22] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[01:14:22] *** Joins: dman777 (~dman777@76-253-74-225.lightspeed.austtx.sbcglobal.net)
[01:14:22] *** Joins: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de)
[01:14:22] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[01:14:22] *** Joins: Dotz0cat (~Dotz0cat@h14.95.187.173.dynamic.ip.windstream.net)
[01:14:22] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[01:14:22] *** Joins: explodes (~explodes@user/explodes)
[01:14:22] *** Joins: ghostbuster (~admin@user/ghostbuster)
[01:14:22] *** Joins: tanner (~tanner@tilde.town)
[01:14:22] *** Joins: capn (~capn@user/capn)
[01:14:22] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[01:14:22] *** Joins: crackerjack (~crackerja@pear.bnc4free.com)
[01:14:22] *** Joins: kindablue (znc@irc.tpurist.com)
[01:14:22] *** Joins: sirn (~sirn@user/sirn)
[01:14:22] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[01:14:22] *** Joins: quesker (~idnet@mail.89vx.net)
[01:14:22] *** Joins: enrh (~enrh@user/enrh)
[01:14:22] *** Joins: deepy (deepy@user/deepy)
[01:14:22] *** Joins: MJ94 (mj94@user/mj94)
[01:14:22] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[01:14:22] *** Joins: phantomcircuit (~phantomci@192.241.205.97)
[01:14:22] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[01:14:22] *** Joins: Raichvent (~Raichvent@193.123.33.210)
[01:14:22] *** Joins: kcrk (~kcrk@user/kcrk)
[01:14:22] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[01:14:22] *** Joins: zware (~zach@python/psf/zware)
[01:14:22] *** Joins: aileran (~ubuntu@ec2-18-219-39-125.us-east-2.compute.amazonaws.com)
[01:14:22] *** Joins: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com)
[01:14:22] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[01:14:22] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[01:14:22] *** Joins: gcbirzan (~gcbirzan@user/gcbirzan)
[01:14:22] *** Joins: graphitemaster (~graphitem@user/graphitemaster)
[01:14:22] *** Joins: mgubyt (u@mgub.yt)
[01:14:22] *** Joins: Alexer- (~alexer@85.17.122.98)
[01:14:22] *** Joins: meejah (~meejah@rutas.meejah.ca)
[01:14:22] *** Joins: agireud (~agireud@2605:a601:ab06:c700:211:32ff:fe32:e15f)
[01:14:22] *** Joins: Buliarous (~gypsydang@185.207.166.57)
[01:14:22] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[01:14:22] *** Joins: manti7 (~manti7@176.10.104.94)
[01:14:22] *** Joins: sudomann (~sudomann@2601:543:100:4fc8:8838:fd4e:364:585d)
[01:14:22] *** Joins: djhankb (~djhankb@208.113.164.68)
[01:14:22] *** Joins: shawwwn (uid6132@id-6132.helmsley.irccloud.com)
[01:14:22] *** Joins: peac (sid344662@id-344662.hampstead.irccloud.com)
[01:14:22] *** Joins: sreve (~quassel@p549d7168.dip0.t-ipconnect.de)
[01:14:22] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[01:14:22] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[01:14:22] *** Joins: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[01:14:22] *** Joins: vlm (~vlm@user/vlm)
[01:14:22] *** Joins: brabrax (~brabrax@user/brabrax)
[01:14:22] *** Joins: qpdb (~qpdb@user/qpdb)
[01:14:22] *** Joins: lethu (~lethu@user/lethu)
[01:14:22] *** Joins: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com)
[01:14:22] *** Joins: doc (~doc@user/doc)
[01:14:22] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[01:14:22] *** Joins: black_13 (~jjosb@209.221.58.189)
[01:14:22] *** Joins: adium (adium@user/adium)
[01:14:22] *** Joins: manuels (~manuel@80.211.205.88)
[01:14:22] *** Joins: bindu (~bindu@user/bindu)
[01:14:22] *** Joins: Soni (~quassel@autistic.space)
[01:14:22] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[01:14:22] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[01:14:22] *** Joins: nickodd (~nickodd@user/nickodd)
[01:14:22] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[01:14:22] *** Joins: millido (~millido@84.210.150.128)
[01:14:22] *** Joins: ano (~ano@user/ano)
[01:14:22] *** Joins: mumixam (~m@user/mumixam)
[01:14:22] *** Joins: cyphase (~cyphase@user/cyphase)
[01:14:22] *** Joins: jab416171 (~jab416171@c-174-52-177-39.hsd1.ut.comcast.net)
[01:14:22] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[01:14:22] *** Joins: Duckle (~Duckle@user/duckle)
[01:14:22] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[01:14:22] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[01:14:22] *** Joins: Throgkt (~Throgkt@user/throgkt)
[01:14:22] *** Joins: p3lim (~p3lim@ti0006q161-2971.bb.online.no)
[01:14:22] *** Joins: megaTherion (~therion@unix.io)
[01:14:22] *** Joins: mags (~mags@097-090-237-145.res.spectrum.com)
[01:14:22] *** Joins: agronholm (sid403424@id-403424.helmsley.irccloud.com)
[01:14:22] *** Joins: Jigsy (~Jigsy@user/jigsy)
[01:14:22] *** Joins: Pi-sistance (~kvirc@cpc94050-newt37-2-0-cust176.19-3.cable.virginm.net)
[01:14:22] *** Joins: Telvana (~capo@user/telvana)
[01:14:22] *** Joins: elwoodpd (~elwoodpd@host-92-8-65-11.as13285.net)
[01:14:22] *** Joins: Trieste (T@user/pilgrim)
[01:14:22] *** Joins: tf (~tf@user/tf)
[01:14:22] *** Joins: moto (~moto@user/moto)
[01:14:22] *** Joins: EgonX (~EgonX@c-73-115-70-244.hsd1.tx.comcast.net)
[01:14:22] *** Joins: Sadale (~Sadale@user/sadale)
[01:14:22] *** Joins: Viewday11 (~Viewday@user/viewday)
[01:14:22] *** Joins: mcglk (~mcglk@131.191.49.120)
[01:14:22] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[01:14:22] *** Joins: Gerula (~Gerula@user/gerula)
[01:14:22] *** Joins: luva (~luva@45.141.152.44)
[01:14:22] *** Joins: binary01 (~binary01@174.141.153.217)
[01:14:22] *** Joins: nfc_ (nfc@tilde.institute)
[01:14:22] *** Joins: mxp (~mxp@185.16.205.131)
[01:14:22] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[01:14:22] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[01:14:22] *** Joins: scarce (~scarce@sourcehut/user/scarce)
[01:14:22] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:14:22] *** Joins: toine42 (~antoine@2001:41d0:e:41f::1)
[01:14:22] *** Joins: EGH (~EGH@185.25.195.104)
[01:14:22] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[01:14:22] *** Joins: iflema (~ian@user/iflema)
[01:14:22] *** Joins: zaquest (~notzaques@5.130.79.72)
[01:14:22] *** Joins: catdog (~quassel@2001:470:50f7:cdcd::cd1)
[01:14:22] *** Joins: montpol (montpol@fine.mouses.xyz)
[01:14:22] *** Joins: BillyZane (~BillyZane@193.160.245.245)
[01:14:22] *** Joins: sadara (~sadara@user/sadara)
[01:14:22] *** Joins: Togra (~Togra@user/togra)
[01:14:22] *** Joins: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net)
[01:14:22] *** Joins: llh (~llh@user/llh)
[01:14:22] *** Joins: cebtenzzre (~cebtenzzr@2603-7081-3406-8f26-00c4-ed3c-3f47-2b1e.res6.spectrum.com)
[01:14:22] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:14:22] *** Joins: rvalue (~rvalue@user/rvalue)
[01:14:22] *** Joins: yitz (~yitz@exercism/yitz)
[01:14:22] *** Joins: fannagoganna (uid110488@id-110488.tinside.irccloud.com)
[01:14:22] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[01:14:22] *** Joins: Kanjizai (~kanjizai@cpe-107-185-193-171.socal.res.rr.com)
[01:14:22] *** Joins: Allegretto (~allegrett@84-236-126-151.pool.digikabel.hu)
[01:14:22] *** Joins: waxfire (~waxfire@65.119.2.240)
[01:14:22] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[01:14:22] *** Joins: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6)
[01:14:22] *** Joins: selikolg (~selikolg@178.62.2.76)
[01:14:22] *** Joins: Warped (~Warped@user/warped)
[01:14:22] *** Joins: demsh (ws14dshtt8@hermod.demsh.org)
[01:14:22] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[01:14:22] *** Joins: Hackerpcs (~user@user/hackerpcs)
[01:14:22] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[01:14:22] *** Joins: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be)
[01:14:22] *** Joins: greenbigfrog (~greenbigf@95.90.216.82)
[01:14:22] *** Joins: Milos (~Milos@user/milos)
[01:14:22] *** Joins: AndrewYu (~andrew@user/andrewyu)
[01:14:22] *** Joins: jdmark (~jdmark@097-102-095-007.res.spectrum.com)
[01:14:22] *** Joins: Moyst_ (~moyst@user/moyst)
[01:14:22] *** Joins: mintograde (~mintograd@47.201.5.61)
[01:14:22] *** Joins: orangeboxcutter (~orange@user/orangeboxcutter)
[01:14:22] *** Joins: _xor (~xor@72.49.199.147)
[01:14:22] *** Joins: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d)
[01:14:22] *** Joins: mrhands (~mrhands@user/mrhands)
[01:14:22] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[01:14:22] *** Joins: gossie (~gossie@94-215-32-45.cable.dynamic.v4.ziggo.nl)
[01:14:22] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:14:22] *** Joins: skreech (skreech@user/skreech)
[01:14:22] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[01:14:22] *** Joins: fluter (~fluter@user/fluter)
[01:14:22] *** Joins: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de)
[01:14:22] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[01:14:22] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[01:14:22] *** Joins: Maikel (~Maikel@130.61.63.136)
[01:14:22] *** Joins: DerpGusta (~quassel@user/derpgusta)
[01:14:22] *** Joins: han-` (~han`@user/han-/x-0887595)
[01:14:22] *** Joins: Lightsword (~Lightswor@user/lightsword)
[01:14:22] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[01:14:22] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[01:14:22] *** Joins: Omega037 (~Omega037@047-233-057-109.res.spectrum.com)
[01:14:22] *** Joins: Praise (~Fat@user/praise)
[01:14:22] *** Joins: Bardon (~Bardon@user/Bardon)
[01:14:22] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[01:14:22] *** Joins: OPK (~OPK@user/opk)
[01:14:22] *** Joins: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[01:14:22] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[01:14:22] *** Joins: jposer (sid132110@id-132110.uxbridge.irccloud.com)
[01:14:22] *** Joins: jtanner (sid194399@id-194399.helmsley.irccloud.com)
[01:14:22] *** Joins: r0bby (r0bby@user/r0bby)
[01:14:22] *** Joins: altendky (sid135382@id-135382.hampstead.irccloud.com)
[01:14:22] *** Joins: ormiret (sid314108@id-314108.lymington.irccloud.com)
[01:14:22] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[01:14:22] *** Joins: neoweb (sid343200@id-343200.lymington.irccloud.com)
[01:14:22] *** Joins: mobius (sid478273@id-478273.uxbridge.irccloud.com)
[01:14:22] *** Joins: pwillard (sid136981@id-136981.hampstead.irccloud.com)
[01:14:22] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[01:14:22] *** Joins: grimvar (~grimvar@i5C75F680.versanet.de)
[01:14:22] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[01:14:22] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[01:14:22] *** Joins: thekingofbandit (thekingofb@user/thekingofbandit)
[01:14:22] *** Joins: MercilessDeth (~brad@136.49.59.177)
[01:14:22] *** Joins: ionface (~ionface@user/ionface)
[01:14:22] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[01:14:22] *** Joins: ede (~ede@user/ede)
[01:14:22] *** Joins: mtg (~mtg@209.250.241.226)
[01:14:22] *** Joins: fstd (~fstd@xdsl-87-79-98-69.nc.de)
[01:14:22] *** Joins: grandrew (~grandrew@2601:642:c301:c600:f22f:74ff:feac:90a3)
[01:14:22] *** Joins: julia (~quassel@user/julia)
[01:14:22] *** Joins: ballingt (sid190590@id-190590.helmsley.irccloud.com)
[01:14:22] *** Joins: Abrax (~Abrax@user/abrax)
[01:14:22] *** Joins: twainwek (~user@144.211.196.35.bc.googleusercontent.com)
[01:14:22] *** Joins: lastshell (~lastshell@user/lastshell)
[01:14:22] *** Joins: snalty (~Shhh@user/snalty)
[01:14:22] *** Joins: pr3d4t0r (~zhenya01@user/pr3d4t0r)
[01:14:22] *** Joins: dawg_ (dirtydawg@triton.blinkenshell.org)
[01:14:22] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[01:14:22] *** Joins: JanC (~janc@user/janc)
[01:14:22] *** Joins: bsdbandit (~bwell@users.757.org)
[01:14:22] *** Joins: {HD} (~{HD}@86.106.121.213)
[01:14:22] *** Joins: kolcon (~kolcon@v.kolouch.org)
[01:14:22] *** Joins: nme (~nme@gateway/vpn/pia/nme)
[01:14:22] *** Joins: aoei\Chickatrice (aoei@nethackscoreboard/aoei)
[01:14:22] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[01:14:22] *** Joins: greenbagels (~gb@user/greenbagels)
[01:14:22] *** Joins: Timvde (~tim@towely.vdeynde.com)
[01:14:22] *** Joins: DXR (~lyrical@77.49.234.159.dsl.dyn.forthnet.gr)
[01:14:22] *** Joins: bparker (~nobody@user/bparker)
[01:14:22] *** Joins: nigelb (~nigel@zeus.nigelb.me)
[01:14:22] *** Joins: jbe (~jbe@lysator/root/jbe)
[01:14:22] *** Joins: kushal (~hopless@dgplug/kushal)
[01:14:22] *** Joins: erry (~erry@errietta.me)
[01:14:22] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[01:14:22] *** Joins: mokytis__ (~root@user/mokytis/x-7723836)
[01:14:22] *** Joins: aeadio (~aead@user/aead)
[01:14:22] *** Joins: saschi_ (~saschi@user/saschi)
[01:14:22] *** Joins: cache (~cache@user/cacheyourdreams)
[01:14:22] *** Joins: m42e (~m42e@pb42.de)
[01:14:22] *** Joins: dgw (dgw@sopel/admin/dgw)
[01:14:22] *** Joins: sasha (~sasha@wikimedia/-sasha-)
[01:14:22] *** Joins: opashley (~opashley@70.138.105.34.bc.googleusercontent.com)
[01:14:22] *** Joins: mdw_ (~root@159.65.86.163)
[01:14:22] *** Joins: bluss (~bluss@user/bluss)
[01:14:22] *** Joins: joris2 (~joris@195.123.218.123)
[01:14:22] *** Joins: JerryXia1 (~JerryXiao@user/jerryxiao)
[01:14:22] *** Joins: SeeM (~SeeM@153.ip-54-38-53.eu)
[01:14:22] *** Joins: phillhoc1ing (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com)
[01:14:22] *** Joins: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h)
[01:14:22] *** Joins: d1b_ (~db@user/d1b)
[01:14:22] *** Joins: vlt (~dm@157.230.21.14)
[01:14:22] *** Joins: krisd (krisd@s0.mydevil.net)
[01:14:22] *** Joins: klotzhauer_ (~klotzhaue@gibtesnochklopapier.de)
[01:14:22] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[01:14:22] *** Joins: syllin (~syllin@user/syllin)
[01:14:22] *** Joins: jramsay (~lack@user/lack)
[01:14:22] *** Joins: LuKaRo_ (~LuKaRo@p5dedaa53.dip0.t-ipconnect.de)
[01:14:22] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[01:14:22] *** Joins: N3X15 (~nexis@mail.nexisonline.net)
[01:14:22] *** Joins: aluria (~aluria@canonical/aluria)
[01:14:22] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[01:14:22] *** Joins: jkl1337 (~jkl@user/jkl)
[01:14:22] *** Joins: xavierdarkness (~xavierdar@user/xavierdarkness)
[01:14:22] *** Joins: bkhl (~bkhl@user/bkhl)
[01:14:22] *** Joins: decimuscorvinus_ (~jimmy@136.37.105.112)
[01:14:22] *** Joins: ksynwa_ (~ksynwa@5.45.111.57)
[01:14:22] *** Joins: casastortaAway (~casastort@dc4.krivokuca.net)
[01:14:22] *** Joins: Bluefoxicy (~Bluefoxic@c-73-132-244-30.hsd1.md.comcast.net)
[01:14:22] *** Joins: tonitch (~tonitch@user/tonitch)
[01:14:22] *** Joins: comrumino (~comrumino@li87-103.members.linode.com)
[01:14:22] *** Joins: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[01:14:22] *** Joins: dhch (~dhch@185.213.154.168)
[01:14:22] *** Joins: Cienisty (Cienisty@user/cienisty)
[01:14:22] *** Joins: Geronimo (~Geronimo@user/geronimo)
[01:14:22] *** Joins: sideeffex5613 (~sideeffex@user/sideeffex)
[01:14:22] *** Joins: Deaygo (~Deaygo@let.deaygo.in)
[01:14:22] *** Joins: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[01:14:22] *** Joins: zepolen (~zepolen@2a02:587:293f:b5fe:a9ae:7515:90f4:3484)
[01:14:22] *** Joins: encukou (quassel@nat-pool-brq-t.redhat.com)
[01:14:22] *** Joins: relight (~relight@user/relight)
[01:14:22] *** Joins: BravoSlo (BravoSlo@gateway/vpn/airvpn/bravoslo)
[01:14:22] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[01:14:22] *** Joins: st3fan (sid43079@id-43079.lymington.irccloud.com)
[01:14:22] *** Joins: nomn (nomn@user/nomn)
[01:14:22] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[01:14:22] *** Joins: kostkon (~kostkon@2a02:587:a116:e46c:7814:108:8592:7c58)
[01:14:22] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[01:14:22] *** Joins: Cyp_ (~cyp@213.237.85.9)
[01:14:22] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[01:14:22] *** Joins: lambda (~weechat@cyka.blyat.vodka)
[01:14:22] *** Joins: remedan (~remedan@balak.me)
[01:14:22] *** Joins: canton7 (canton7@about/csharp/canton7)
[01:14:22] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[01:14:22] *** Joins: km (znc@user/km)
[01:14:22] *** Joins: Helenah (~s98259@user/helenah)
[01:14:22] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[01:14:22] *** Joins: sveinse (~sveinse@2a01:799:55e:1000:c23f:d5ff:fe69:c6fb)
[01:14:22] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[01:14:22] *** Joins: gdd (~gdd@129.199.146.230)
[01:14:22] *** Joins: bryce (~bryce@ool-457dd6ac.dyn.optonline.net)
[01:14:22] *** Joins: ttys000 (~ttys000@user/ttys000)
[01:14:22] *** Joins: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net)
[01:14:22] *** Joins: skipper (~whatsupbo@user/scobydoo)
[01:14:22] *** Joins: Jak_o_Shadows (~quassel@user/jak-o-shadows/x-5091859)
[01:14:22] *** Joins: flyback (~flyback@2601:540:8201:1e60::9a75)
[01:14:22] *** Joins: abraham (~abraham@143.244.185.86)
[01:14:22] *** Joins: dcaro_away (~dcaro@user/dcaro)
[01:14:22] *** Joins: Ulti (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com)
[01:14:22] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[01:14:22] *** Joins: Pilate (~pilate@pilate.io)
[01:14:22] *** Joins: portalrat (~portalrat@user/portalrat)
[01:14:22] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[01:14:22] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[01:14:22] *** Joins: Arw (~Arwalk@lfbn-dij-1-1462-22.w109-221.abo.wanadoo.fr)
[01:14:22] *** Joins: mdk (~mdk@python/psf/mdk)
[01:14:22] *** Joins: jiffe (~jiffe@mail.nsab.us)
[01:14:22] *** Joins: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net)
[01:14:22] *** Joins: fury (uid193779@id-193779.helmsley.irccloud.com)
[01:14:22] *** Joins: Darkfoe (sid402081@id-402081.helmsley.irccloud.com)
[01:14:22] *** Joins: Forkk_ (~forkk@li926-228.members.linode.com)
[01:14:22] *** Joins: Keira (~k@lulzsec.co.uk)
[01:14:22] *** Joins: grym (~grym@user/grym)
[01:14:22] *** Joins: llua (~llua@zsh/developer/llua)
[01:14:22] *** Joins: a1paca_ (~a1paca@user/a1paca)
[01:14:22] *** Joins: moose (~moose@user/moose)
[01:14:22] *** Joins: xiaguan (~parsley@2604:180:f1::173)
[01:14:22] *** Joins: RoyK (~roy@user/royk)
[01:14:22] *** Joins: koo5_ (~quassel@51.140.155.227)
[01:14:22] *** Joins: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[01:14:22] *** Joins: alex11 (~alex11@user/alex11)
[01:14:22] *** Joins: digilink (~digilink@user/digilink)
[01:14:22] *** Joins: michele (~eraser@user/michele)
[01:14:22] *** Joins: vaio (~gary@user/ghost)
[01:14:22] *** Joins: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net)
[01:14:22] *** Joins: mastardet (~mastardet@user/mastardet)
[01:14:22] *** Joins: Phase (~phase@user/phase)
[01:14:22] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[01:14:22] *** Joins: InPhase (~InPhase@openscad/inphase)
[01:14:22] *** Joins: Ara (~Ara@user/ara)
[01:14:22] *** Joins: mgocobachi (~m@ancrae.com)
[01:14:22] *** Joins: fuz (~fuz@user/fuz)
[01:14:22] *** Joins: zmotaj (~zmotaj@user/zmotaj)
[01:14:22] *** Joins: Yorick- (znc@vps.freegamehosting.eu)
[01:14:22] *** Joins: njhanley (~njhanley@static.15.210.217.95.clients.your-server.de)
[01:14:22] *** Joins: Trashlord (~trash@user/trashlord)
[01:14:22] *** Joins: w1kl4s (~w1kl4s@user/w1kl4s)
[01:14:22] *** Joins: amaenli (~amaenli@user/amaenli)
[01:14:22] *** Joins: erica (~erica@user/erica)
[01:14:22] *** Joins: Widdershins (widders@ps.mad.cash)
[01:14:22] *** Joins: hwrd (sid64402@id-64402.lymington.irccloud.com)
[01:14:22] *** Joins: Lvl4Sword (sid483043@user/lvl4sword)
[01:14:22] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[01:14:22] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[01:14:22] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[01:14:22] *** Joins: braxas (sid508886@id-508886.lymington.irccloud.com)
[01:14:22] *** Joins: Yhg1s (sid387777@python/psf/thomas)
[01:14:22] *** Joins: frodl (sid527064@user/frodl)
[01:14:22] *** Joins: sus (zero@user/zeromomentum)
[01:14:22] *** Joins: Venhal (sid515085@id-515085.uxbridge.irccloud.com)
[01:14:22] *** Joins: extnct (~extnct@2604:180:2:a54:1::9ce7)
[01:14:22] *** Joins: catern (~sbaugh@cpe-98-7-229-235.nyc.res.rr.com)
[01:14:22] *** Joins: treefrob (~treefrob@p57a9652c.dip0.t-ipconnect.de)
[01:14:22] *** Joins: BigShip (~BigShip@user/bigship)
[01:14:22] *** Joins: xcm_ (~xcm@user/xcm)
[01:14:22] *** Joins: botfather (~botfather@shell1.dds.nl)
[01:14:22] *** Joins: khile (cacambo@triton.blinkenshell.org)
[01:14:22] *** Joins: metaace_ (~metaace@user/metaace)
[01:14:22] *** Joins: duoi (~duoi@user/duoi)
[01:14:22] *** Joins: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com)
[01:14:22] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[01:14:22] *** Joins: moonmoon (awoo@libera/staff/moonmoon)
[01:14:22] *** Joins: daex (~daex@user/daex)
[01:14:22] *** Joins: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com)
[01:14:22] *** Joins: yac (~user@user/yac)
[01:14:22] *** Joins: CodeGeek (~codegeek@about/java/CodeGeek)
[01:14:22] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[01:14:22] *** Joins: omegatron (~some@p54bd5e02.dip0.t-ipconnect.de)
[01:14:22] *** Joins: MacGyver (~macgyver@user/macgyver)
[01:14:22] *** Joins: sagax (~sagax_nb@user/sagax)
[01:14:22] *** Joins: yourfate (~yourfate@cabal.yourfate.org)
[01:14:22] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[01:14:22] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[01:14:22] *** Joins: AhmedAmerican (sid470527@ilkley.irccloud.com)
[01:14:22] *** Joins: Gamah (~quassel@gamah.net)
[01:14:22] *** Joins: coldmountain (sid484352@helmsley.irccloud.com)
[01:14:22] *** Joins: lidless (lidless@tinside.irccloud.com)
[01:14:22] *** Joins: andi_ (~andi@user/andi/x-3467420)
[01:14:22] *** Joins: peterandre (peterandre@2605:6400:c847:1524::4251)
[01:14:22] *** Joins: _moep_ (~moep@user/moep/x-3358975)
[01:14:22] *** Joins: pystardust (~pystardus@45.32.119.11)
[01:14:22] *** Joins: or4n (~or4n@gerbera.qkka.org)
[01:14:22] *** Joins: ST47 (~ST47@wikimedia/st47)
[01:14:22] *** Joins: thib (~thib@wikimedia/Thibaut120094)
[01:14:22] *** Joins: Celelibi (celelibi@user/celelibi)
[01:14:22] *** Joins: Repiphany (~Repiphany@user/repiphany)
[01:14:22] *** Joins: towel (~towel@user/towel)
[01:14:22] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[01:14:22] *** Joins: DCTWD (~dc@uz.utmappro.com)
[01:14:22] *** Joins: kantlivelong (~kantlivel@octoprint/kantlivelong)
[01:14:22] *** Joins: _janus (~janus@blotter.ld-linux.so)
[01:14:22] *** Joins: leosilva (~leosilva@canonical/leosilva)
[01:14:22] *** Joins: operational (~operation@imgonnaf.art)
[01:14:22] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[01:14:22] *** Joins: byzandula (~byzandula@beerbq.net)
[01:14:22] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[01:14:22] *** Joins: nepeat (~nepeat@79.110.170.59)
[01:14:22] *** Joins: fakenullie (~nullie@london.nullie.name)
[01:14:22] *** Joins: the_rat (~ratto@emily.sorcio.org)
[01:14:22] *** Joins: themill (~stuart@debian/stuart)
[01:14:22] *** Joins: hexology (~hexology@user/hexology)
[01:14:22] *** Joins: dynos01 (~dynos01@li820-149.members.linode.com)
[01:14:22] *** Joins: roguelazer (~jbrown@sietchtabr.roguelazer.net)
[01:14:22] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[01:14:22] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[01:14:22] *** Joins: richrd (~wavi@thelounge/maintainer/wavi)
[01:14:22] *** Joins: vancz (~vancz@user/vancz)
[01:14:22] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[01:14:22] *** Joins: harleypig (thelounge@harleypig.com)
[01:14:22] *** Joins: simone (~nya@user/sx)
[01:14:22] *** Joins: awygle (~quassel@2604:a880:2:d0::5380:3001)
[01:14:22] *** Joins: Shapeshifter (~Shapeshif@parakeet.ifi.uzh.ch)
[01:14:22] *** Joins: the4oo4 (~the4oo4@shenzhou.whatbox.ca)
[01:14:22] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[01:14:22] *** Joins: Mathisen (mathisen@about/windows/staff/mathisen)
[01:14:22] *** Joins: Daemoen (~Daemoen@daemoen.ct-unlimited.com)
[01:14:22] *** Joins: niluje (~niluje@2a05:d012:f91:1700:6975:ef0b:def6:3bdd)
[01:14:22] *** Joins: mrtnt_ (~Martin@2001:ad0:1:1:da9e:f3ff:fe4a:8dd0)
[01:14:22] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[01:14:22] *** Joins: korros (korros@2600:3c03::f03c:92ff:febf:689a)
[01:14:22] *** Joins: leonardo (~leonardo@user/leonardo)
[01:14:22] *** Joins: TML (~tml@user/tml)
[01:14:22] *** Joins: Leliana (is@the.one.and.only.revthefox.co.uk)
[01:14:22] *** Joins: sco1 (~sco1@charon.whatbox.ca)
[01:14:22] *** Joins: chatcat (chatcat@gateway/vpn/airvpn/chatcat)
[01:14:22] *** Joins: lorenzosu (~lorenzosu@user/lorenzosu)
[01:14:22] *** Joins: arash (arash@thinks.life.is-a.beauty)
[01:14:22] *** Joins: wallbroken (wallbroken@user/wallbroken)
[01:14:22] *** Joins: hexa- (~hexa-@juno.lossy.network)
[01:14:22] *** Joins: olasd (~olasd@softwareheritage/olasd)
[01:14:22] *** Joins: redgloboli (~redglobol@user/redgloboli)
[01:14:22] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[01:14:22] *** Joins: The-Compiler (~compiler@the-compiler.org)
[01:14:22] *** Joins: cebor (~cebor@user/cebor)
[01:14:22] *** Joins: ialokin (znc@user/ialokin)
[01:14:22] *** Joins: Dantali0n (~Dantali0n@251-228-138-45.connected.by.freedominter.net)
[01:14:22] *** Joins: jpaa (~jpaa@87.118.126.66)
[01:14:22] *** Joins: emerent (~quassel@p200300cd571578eaba27ebfffed28a59.dip0.t-ipconnect.de)
[01:14:22] *** Joins: osxtra (~root@136.49.108.80)
[01:14:22] *** Joins: urth (~urth@geertswei.nl)
[01:14:22] *** Joins: noent (~quassel@squint.a-oben.org)
[01:14:22] *** Joins: user3456 (user3456@user/user3456)
[01:14:22] *** Joins: mwilson (~mwilson@li159-72.members.linode.com)
[01:14:22] *** Joins: deutor (~quassel@82.177.4.226)
[01:14:22] *** Joins: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831)
[01:14:22] *** Joins: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053)
[01:14:22] *** Joins: infidel (~ecrump@67-0-208-202.albq.qwest.net)
[01:14:22] *** Joins: znpy (~znpy@user/znpy)
[01:14:22] *** Joins: schemanic[m] (~schemanic@2001:470:69fc:105::1:2450)
[01:14:22] *** Joins: gloomy (~gloomy@2001:470:69fc:105::ce00)
[01:14:22] *** Joins: DX099 (~dx099@2001:470:69fc:105::21ce)
[01:14:22] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[01:14:22] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[01:14:22] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[01:14:22] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[01:14:22] *** Joins: Vipulk (~vipulk@user/vipulk)
[01:14:22] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[01:14:22] *** Joins: allegary (~allegary@apache/committer/gjm)
[01:14:22] *** Joins: neolem (~neolem@2001:470:69fc:105::c675)
[01:14:22] *** Joins: psydroid (~psydroid@user/psydroid)
[01:14:22] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[01:14:22] *** Joins: kikijiki[m] (~kikijiki@user/kikijiki)
[01:14:22] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[01:14:22] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[01:14:22] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[01:14:22] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[01:14:22] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[01:14:22] *** Joins: berton[m] (~berton@2001:470:69fc:105::ce36)
[01:14:22] *** Joins: pschmitt[m] (~pschmitt@2001:470:69fc:105::1:24cb)
[01:14:22] *** Joins: canardo (~canardo@2001:470:69fc:105::e110)
[01:14:22] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[01:14:22] *** Joins: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com)
[01:14:22] *** Joins: ruediger (~ruediger@user/ruediger)
[01:14:22] *** Joins: graybeard (~graybeard@user/graybeard)
[01:14:22] *** Joins: njt (~njt@zaph.org)
[01:14:22] *** Joins: notepad7 (~notepad@129.159.46.243)
[01:14:22] *** Joins: Balzy (~Balzy@host-87-5-136-46.retail.telecomitalia.it)
[01:14:22] *** Joins: dulanic (~dulanic@47.187.144.163)
[01:14:22] *** Joins: moldorcoder7_ (~moldorcod@37.120.143.28)
[01:14:22] *** Joins: b_jonas (~x@catv-176-63-4-16.catv.broadband.hu)
[01:14:22] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca)
[01:14:22] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[01:14:22] *** Joins: wolfshappen (~waff@irc.furworks.de)
[01:14:22] *** Joins: AM (~techman@82-203-163-159.bb.dnainternet.fi)
[01:14:22] *** Joins: sunyibo (~dorsch@2a04:52c0:101:443::)
[01:14:22] *** Joins: Quietus (~quietus@2a04:52c0:101:181::)
[01:14:22] *** Joins: Melon_Bread (~Rain@li958-238.members.linode.com)
[01:14:22] *** Joins: dskull (~dskull@user/dskull)
[01:14:22] *** Joins: randall (~randall@user/randall)
[01:14:22] *** Joins: SnoopJ (~snoopj@user/snoopj)
[01:14:22] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[01:14:22] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[01:14:22] *** Joins: trashcatt (~trashcatt@znc.trashcat.xyz)
[01:14:22] *** Joins: gegenschein (~james@ec2-52-91-126-104.compute-1.amazonaws.com)
[01:14:22] *** Joins: rigid (~rigid@user/rigid)
[01:14:22] *** Joins: hendry (~hendry@210.23.22.8)
[01:14:22] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[01:14:22] *** Joins: sharksauce (sharksauce@user/sharksauce)
[01:14:22] *** Joins: dharrigan (~dharrigan@user/dharrigan)
[01:14:22] *** Joins: roniez (~roniez@2a02:c206:2057:5765::1)
[01:14:22] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[01:14:22] *** Joins: neil (~kneel@rockylinux/infra/neil)
[01:14:22] *** Joins: kgz (~kragniz@nyaa.kragniz.eu)
[01:14:22] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[01:14:22] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[01:14:22] *** Joins: odinsbane (~mbs@pat-pool-138.crick.ac.uk)
[01:14:22] *** Joins: fling (~fling@user/fling)
[01:14:22] *** Joins: HenryG (~quassel@2607:5300:201:3000::f63)
[01:14:22] *** Joins: AnimalFarmPig (~quassel@user/animalfarmpig)
[01:14:22] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[01:14:22] *** Joins: Avaris (~Avaris@avar.is)
[01:14:22] *** Joins: zacts (~zacts@user/zacts)
[01:14:22] *** Joins: CombatVet (~c4@user/combatvet)
[01:14:22] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[01:14:22] *** Joins: jemark (jemark@user/jemark)
[01:14:22] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[01:14:22] *** Joins: libussa (~libussa@libussa.net)
[01:14:22] *** Joins: argoneus (~argoneus@argoneus.com)
[01:14:22] *** Joins: voidcat (~voidcat@user/voidcat)
[01:14:22] *** Joins: Dev0n (~Dev0n@user/dev0n)
[01:14:22] *** Joins: Wooble (~Wooble@107.170.27.240)
[01:14:22] *** Joins: anorthall_ (~anorthall@user/anorthall)
[01:14:22] *** Joins: mspe (~user@tilde.team/user/mspe)
[01:14:22] *** Joins: ouemt (~quassel@user/ouemt)
[01:14:22] *** Joins: adamchainz (~adamj@51.15.34.126)
[01:14:22] *** Joins: ario (~ario@159.65.220.102)
[01:14:22] *** Joins: ebb (ebb@user/ebb)
[01:14:22] *** Joins: percY- (~percY@138.68.239.19)
[01:14:22] *** Joins: arza (arza@arza.us)
[01:14:22] *** Joins: urb4nm (~urb4nm@165.227.158.65)
[01:14:22] *** Joins: Antibody (~Antibody@107.170.145.30)
[01:14:22] *** Joins: oisota (~oisota@user/oisota)
[01:14:22] *** Joins: tris (emptystrin@irc1.lessbroken.org)
[01:14:22] *** Joins: EyeOfJupiter (~EyeOfJ@user/eyeofjupiter)
[01:14:22] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[01:14:22] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[01:14:22] *** Joins: SoF (~skius@user/skius)
[01:14:22] *** Joins: mpmc (~mpmc@user/mpmc)
[01:14:22] *** Joins: achilleas (ach@user/achilleas)
[01:14:22] *** Joins: hodapp (~mawson@user/hodapp)
[01:14:22] *** Joins: MikachuPi (~Mikachu@2001:bc8:47a8:559::1)
[01:14:22] *** Joins: ChrisWarrick (kwpolska@user/kwpolska)
[01:14:22] *** Joins: dfch (~dfch@user/dfch)
[01:14:22] *** Joins: Haise0 (~haise01@user/haise01)
[01:14:22] *** Joins: Karyon (~Karyon@user/karyon)
[01:14:22] *** Joins: yolk (~yolk@2600:1f16:f4a:2100:77f5:a0ec:35f:147b)
[01:14:22] *** Joins: goatish_ (~geclark@19.60.188.35.bc.googleusercontent.com)
[01:14:22] *** Joins: klys_ (~mdasoh@show.op8.us)
[01:14:22] *** Joins: gerard (~gerard@user/gerard)
[01:14:22] *** Joins: daddy (ryan@hashbang/bdfl)
[01:14:22] *** Joins: b3z (~b3z@user/b3z)
[01:14:22] *** Joins: B33F_1337 (~b33f1337@host.b33f1337.com)
[01:14:22] *** Joins: shan (shan@cyblog/maintainer/shan)
[01:14:22] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[01:14:22] *** Joins: Pici (bnrubin@2600:3c03::f03c:91ff:fe60:2576)
[01:14:22] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[01:14:22] *** Joins: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153)
[01:14:22] *** Joins: daimbag (~bagdarrel@2607:5300:60:21b::1)
[01:14:22] *** Joins: delarge (~chamigo@ctm.linuxers.cl)
[01:14:22] *** Joins: quasineutral (~quaisneut@user/quasineutral)
[01:14:22] *** Joins: vinay (~Vinay@user/vinay-keshava)
[01:14:22] *** Joins: kiska (james@user/kiska)
[01:14:22] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[01:14:22] *** Joins: effprime (~effprime@user/effprime)
[01:14:22] *** Joins: n-st (~n-st@user/n-st)
[01:14:22] *** Joins: majors (~majors@user/majors)
[01:14:22] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[01:14:22] *** Joins: Artea (~Lufia@artea.com.pt)
[01:14:22] *** Joins: dstein64 (~dstein64@dannyadam.com)
[01:14:22] *** Joins: avu (~jan@user/avu)
[01:14:22] *** Joins: jochum (~quassel@user/jochum)
[01:14:22] *** Joins: ComputerTech (~ComputerT@user/computertech)
[01:14:22] *** Joins: oprypin (~irc@pryp.in)
[01:14:22] *** Joins: zeus (~user@user/kamyl)
[01:14:22] *** Joins: Riviera (Riviera@user/riviera)
[01:14:22] *** Joins: Bato (~plauder@2001:bc8:182c:b39::1)
[01:14:22] *** Joins: exarkun (~exarkun@user/exarkun)
[01:14:22] *** Joins: shrysr (~shrysr@user/shrysr)
[01:14:22] *** Joins: Wegge (~wegge@user/wegge)
[01:14:22] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[01:14:22] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[01:14:22] *** Joins: MelMalik (ellenor@vice-chairwoman.of.freenode.management)
[01:14:22] *** Joins: seabre (~seabre@user/seabre)
[01:14:22] *** Joins: Mikro (leo@libera.ninja)
[01:14:22] *** Joins: dnns01_ (~quassel@2a02:c207:3003:651::1)
[01:14:22] *** Joins: u4t (~chat@78.ip-139-99-236.net)
[01:14:22] *** Joins: summonner (~summonner@188.26.74.156)
[01:14:22] *** Joins: spaceone (~spaceone@wc1.wechall.net)
[01:14:22] *** Joins: MrC (Ben@mrbenc.net)
[01:14:22] *** Joins: Quack (~Quack@185.21.216.169)
[01:14:22] *** Joins: cslr (~cslr@85-76-34-233-nat.elisa-mobile.fi)
[01:14:22] *** Joins: mmercer (daemoen@2605:d100:0:2d:5054:ff:fef0:3953)
[01:14:22] *** Joins: abyss (~robbins@user/robbins)
[01:14:22] *** Joins: octav1a (~quassel@173.195.145.98)
[01:14:22] *** Joins: litharge (litharge@libera/bot/litharge)
[01:14:22] *** Joins: bss (bss@rie.incorporeal.org)
[01:14:22] *** Joins: jocke-l (jocke-l@a.x0.is)
[01:14:22] *** Joins: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de)
[01:14:22] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[01:14:22] *** Joins: acnebs- (~acnebs@198.199.68.107)
[01:14:22] *** Joins: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com)
[01:14:22] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[01:14:22] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[01:14:22] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[01:14:22] *** Joins: gbear605 (~gbear605@user/gbear605)
[01:14:22] *** Joins: Jimmy2027 (~hendrik@2001:1620:2018:38:dde3:1b0f:dc57:eb0f)
[01:14:22] *** Joins: enyc (~enyc@user/enyc)
[01:14:22] *** Joins: guntbert (~yesitsme@user/guntbert)
[01:14:22] *** Joins: Luke (~ldm@hacksoc/member)
[01:14:22] *** Joins: orkim (~orkim@user/orkim)
[01:14:22] *** Joins: push-f (~martin@push-f.com)
[01:14:22] *** Joins: gurki (~gurki@user/gurki)
[01:14:22] *** Joins: Cybergeek (~Cybergeek@2a03:b0c0:3:e0::1ab:5001)
[01:14:22] *** Joins: bertiger (~bertiger@user/bertiger)
[01:14:22] *** Joins: nyany (~nyany@dronebl/admin/cat)
[01:14:22] *** Joins: ammar2 (admin@i.diddled.with.the.opers.so.they.klined.me)
[01:14:22] *** Joins: ghormoon (~ghormoon@ghorland.net)
[01:14:22] *** Joins: chymera (~chymera@ns1000526.ip-51-81-46.us)
[01:14:22] *** Joins: kline (~freedom0@libera/staff/kline)
[01:14:22] *** Joins: strudl (~strudl@user/strudl)
[01:14:22] *** Joins: cole (~cole@user/cole)
[01:14:22] *** Joins: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au)
[01:14:22] *** Joins: taeaad (~taeaad@user/taeaad)
[01:14:22] *** Joins: Henryx (~ebianchi@2a01:4f8:1c0c:76ad::1)
[01:14:22] *** Joins: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com)
[01:14:22] *** Joins: purplex_ (~purplex@user/purplex)
[01:14:22] *** Joins: rgp (~rgp@user/rgp)
[01:14:22] *** Joins: Stx (stx@libera/staff/stx)
[01:14:22] *** Joins: ripdog (~quassel@user/ripdog)
[01:14:22] *** Joins: OverCoder (~OverCoder@user/overcoder)
[01:14:22] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[01:14:22] *** strontium.libera.chat sets mode: +o litharge
[01:14:22] *** Joins: grandfso (~quassel@199.232.237.35.bc.googleusercontent.com)
[01:14:22] *** Joins: n1000 (~n1000@user/n1000)
[01:14:22] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[01:14:22] *** Joins: DaPinkOne (~Dap@user/dap)
[01:14:22] *** Joins: phlixi (~phlixi@aftr-82-135-86-19.dynamic.mnet-online.de)
[01:14:22] *** Joins: tkazi (~tkazi@user/tkazi)
[01:14:22] *** Joins: VSpike (~johncc@2001:bc8:47ac:1a22::1)
[01:14:22] *** Joins: ttkpy (501@46-97-229-216.sr2.pon.net)
[01:14:22] *** Joins: dzz007 (~dzz007@user/dzz007)
[01:14:22] *** Joins: polyrob (~rob@user/polyrob)
[01:14:22] *** Joins: MightyMu_ (~MightyMu@104.131.138.31)
[01:14:22] *** Joins: Adrixan_ (~Adrixan@218.72.75.34.bc.googleusercontent.com)
[01:14:22] *** Joins: jfb4 (~jfb4@178.62.2.68)
[01:14:22] *** Joins: tudor_ (~tudor@tomka.hu)
[01:14:22] *** Joins: reda_ (~reda@user/reda)
[01:14:22] *** Joins: ldlework (~hexeme@user/hexeme)
[01:14:22] *** Joins: edr (~edr@user/edr)
[01:14:22] *** Joins: alxndr (~alexander@ybti.net)
[01:14:22] *** Joins: dthpulse (~quassel@podciarou.sk)
[01:14:22] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[01:14:22] *** Joins: Ninpo (~Ninpo@user/ninpo)
[01:14:22] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[01:14:22] *** Joins: con3 (~con3@143.198.53.32)
[01:14:22] *** Joins: tdsmith (~tdsmith@tds.xyz)
[01:14:22] *** Joins: faceface (~faceface@user/faceface)
[01:14:22] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[01:14:22] *** Joins: Chex (~Chex@user/chex)
[01:14:22] *** Joins: queue- (~nerd@user/queue/x-7267619)
[01:14:22] *** Joins: pacbard (~pacbard@user/pacbard)
[01:14:22] *** Joins: xakan (~xakan@pnmx.zdx.fr)
[01:14:22] *** Joins: OlaNys (onm@irccore.ofelbar.se)
[01:14:22] *** Joins: {4144} (~{4144}@46.56.66.236)
[01:14:22] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[01:14:22] *** Joins: deltab (~deltab@user/deltab)
[01:14:22] *** Joins: aivkiv (~aivkiv@2a01:4f8:201:6250::2)
[01:14:22] *** Joins: wyre (~wyre@user/wyre)
[01:14:22] *** Joins: death916 (~death916@user/death916)
[01:14:22] *** Joins: Peng_ (~mnordhoff@ultimate1.mnrd.us)
[01:14:22] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[01:14:22] *** Joins: grateful (grateful@user/grateful)
[01:14:22] *** Joins: shodan45 (~quassel@107.161.22.155)
[01:14:22] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[01:14:22] *** Joins: deniska (~denis@user/deniska)
[01:14:22] *** Joins: Koffa (jkohvakk@user/koffa)
[01:14:22] *** Joins: Exa (exa@irc.moe)
[01:14:22] *** Joins: beanzilla (beanzilla@user/beanzilla)
[01:14:22] *** Joins: newdimension (~newdimnes@user/newdimension)
[01:14:22] *** Joins: ringo__ (~ringo@157.230.117.128)
[01:14:22] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[01:14:22] *** Joins: marienz__ (~marienz@libera/staff/marienz)
[01:14:29] *** Quits: y2o (~y2o@nat-wifivisitas-1x.campus.utfsm.cl) (Max SendQ exceeded)
[01:14:29] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Max SendQ exceeded)
[01:14:29] *** Quits: Spydar007 (~spydar007@user/spydar007) (Max SendQ exceeded)
[01:14:29] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Max SendQ exceeded)
[01:14:32] *** Quits: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6) (Quit: gg)
[01:14:33] *** Quits: glider (~glider@user/glider) (Max SendQ exceeded)
[01:14:48] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[01:15:05] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 268 seconds)
[01:15:10] <CrtxReavr> So you're using range() iterator in a for loop, and you're going to be dividing each iteration by 10. . . is there an elegant way to do that?
[01:15:14] *** Joins: Spydar007 (~spydar007@user/spydar007)
[01:15:19] *** Joins: glider (~glider@user/glider)
[01:15:26] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[01:15:52] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[01:16:04] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Ping timeout: 256 seconds)
[01:16:17] *** Joins: Colt (~Colt@user/colt)
[01:16:19] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[01:16:32] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[01:16:56] *** Quits: sunarch (uid526836@user/sunarch) (Ping timeout: 268 seconds)
[01:17:15] *** Quits: jimmyZiomal (~jimmy@staticline-31-182-163-6.toya.net.pl) (Quit: leaving)
[01:17:18] *** Joins: sunarch (uid526836@user/sunarch)
[01:17:42] *** Joins: fofoni (~fofoni@user/fofoni)
[01:17:57] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[01:18:41] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 245 seconds)
[01:18:42] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[01:18:52] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[01:19:00] *** Joins: qlixed (~qlixed@181.44.129.13)
[01:19:08] *** Joins: y2o (~y2o@nat-wifivisitas-1x.campus.utfsm.cl)
[01:19:36] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[01:19:55] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[01:20:12] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[01:21:00] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[01:21:33] *** Joins: walrus_man (~Thunderbi@131.204.254.86)
[01:21:47] <SnoopJ> fdgfe, if you are working with bytes, use bytes(), if you are working with sequences of Unicode codepoints, use str(). You might want to have a look through https://nedbatchelder.com/text/unipain.html as well, and possibly look at the `modernize` tool: https://python-modernize.readthedocs.io/en/latest/
[01:22:22] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[01:22:41] <fdgfe> for example, is a filename a str or bytes? a dos filename? an identifier? it's not that easy
[01:24:00] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:24:01] *** Joins: bn_work (uid268505@id-268505.uxbridge.irccloud.com)
[01:24:17] *** Joins: mickey8 (~user@user/mickey)
[01:24:17] <CrtxReavr> for i in (x / 10 for x in range(2, 211)):  <== not sure that's any less ugly
[01:24:20] *** Quits: y2o (~y2o@nat-wifivisitas-1x.campus.utfsm.cl) (Ping timeout: 268 seconds)
[01:24:42] <SnoopJ> fdgfe, it depends on where you're sending the data. open() is capable of accepting either. Identifiers are internally strings, but they are bytes in a given source file of course.
[01:25:23] <smrtz> SnoopJ I know I'm asking for a lot of hand holding here and I'm sorry, but if you've got a bit more time would you mind taking a look at what I've got so far please? I've had to make some tweaks to your example, namely using the counter.count_exceptions def instead of ExceptionCounter.  I haven't been able to test it yet but I'd like to see if I'm
[01:25:24] <smrtz> fundamentally wrong with some of the tweaks I've made so far:
[01:25:24] <smrtz> https://bpa.st/TWTA
[01:26:09] *** Joins: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6)
[01:26:40] *** Quits: sazawal (~sazawal@122.161.84.237) (Ping timeout: 264 seconds)
[01:27:26] *** Joins: Enitin (~Enitin@82.102.22.84)
[01:27:38] *** Quits: walrus_man (~Thunderbi@131.204.254.86) (Quit: walrus_man)
[01:27:45] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[01:27:46] <SnoopJ> smrtz, L121 isn't how you construct a subclass, it should probably read: `sessionCounter = meta_metrics.ClassCapableExceptionCounter('session_exceptions', 'Total number of SSH related exceptions')` but other than that it nothing jumps out at me
[01:27:49] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[01:28:07] <SnoopJ> (the __init__ will be exactly the same as the one for Counter because you didn't define a new one)
[01:28:17] *** Quits: guenhael (~Thunderbi@2a01cb008c3d5800086035b9fb310f47.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[01:28:29] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 252 seconds)
[01:28:31] *** Joins: palasso (~palasso@user/palasso)
[01:28:35] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:28:41] *** Joins: aphysically (~aphysical@user/aphysically)
[01:28:47] <smrtz> I actually had that originally but changed it to keep PEP line lengths, hah.
[01:29:01] *** Joins: luigibu (~luigi@80.30.201.209)
[01:30:17] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Remote host closed the connection)
[01:30:47] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[01:31:47] <smrtz> Oh, no I see what you changed now. That makes sense, thanks!
[01:32:00] <smrtz> I'll let you know how my testing goes! Hopefully I should be able to figure it out from here.
[01:32:04] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Read error: Connection reset by peer)
[01:32:26] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[01:32:31] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[01:33:16] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[01:33:24] *** Joins: Portugol9 (~Portugol9@user/portugol9)
[01:33:58] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[01:36:17] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:36:29] *** Joins: guenhael (~Thunderbi@2a01cb008c3d5800086035b9fb310f47.ipv6.abo.wanadoo.fr)
[01:36:44] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 252 seconds)
[01:40:21] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:6d74:7509:74f5:7d14) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:40:44] <ArtfulDodger> SnoopJ, I have created a basic tox.ini and all my tests pass while I haven't pip-installed my lib in the venv yet. If I just run "pytest" all tsts fail because of import errors. How does tox look for the right library to import?
[01:40:47] *** Joins: dre (~dre@2001:8003:c932:c301:ca62:53a2:f102:5ef0)
[01:41:33] <SnoopJ> ArtfulDodger, normally, tox creates an environment and installs into it before invoking [whatever you're doing]
[01:41:48] *** Joins: y1n (~y1n@178.165.161.31.wireless.dyn.drei.com)
[01:41:55] <SnoopJ> if you just run `pytest`, odds are you didn't install the package first in whatever environment `pytest` runs in
[01:42:46] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:43:26] <ArtfulDodger> SnoopJ, Ah yes I get it! It is normal that pytest cannot import my lib because I haven't pip-installed it yet in this env
[01:44:21] *** Quits: Sario (uid356235@fosshost/cdo/Sario) (Quit: Good night)
[01:44:24] <SnoopJ> yep, it doesn't do anything special re: what's importable
[01:45:04] *** Joins: RasnCa___ (~rasncain@ip174-73-119-77.br.br.cox.net)
[01:45:49] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:45:58] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Quit: That's a thinker...)
[01:45:58] *** Quits: DaPinkOne (~Dap@user/dap) (Quit: Quit.)
[01:47:13] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[01:47:40] *** Quits: RasnCain (~rasncain@68.12.15.83) (Ping timeout: 264 seconds)
[01:47:49] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[01:48:36] *** Joins: DaPinkOne (~Dap@user/dap)
[01:49:40] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[01:49:54] *** Quits: akahs (~Shaka@user/shaka) (Quit: .)
[01:49:57] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[01:50:30] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[01:51:09] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 256 seconds)
[01:51:37] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[01:51:51] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[01:52:09] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[01:53:04] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 264 seconds)
[01:53:30] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[01:54:43] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[01:55:02] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[01:55:08] *** Joins: arinov (~arinov@213.194.126.155)
[01:55:29] *** Joins: luigibu (~luigi@80.30.201.209)
[01:56:17] *** Joins: Sario (uid356235@fosshost/cdo/Sario)
[01:57:56] *** Quits: sharksauce (sharksauce@user/sharksauce) (Quit: WeeChat 2.8)
[02:00:39] *** Quits: RasnCa___ (~rasncain@ip174-73-119-77.br.br.cox.net) (Read error: Connection reset by peer)
[02:00:43] *** Quits: Sario (uid356235@fosshost/cdo/Sario) (Client Quit)
[02:01:29] *** Joins: sharksauce (sharksauce@user/sharksauce)
[02:01:40] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[02:03:10] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[02:03:13] *** Quits: ckdCreations (~ckdCreati@147.55.130.38) (Read error: Connection reset by peer)
[02:03:24] <SpeakerToMeat> Hi all
[02:03:26] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:03:29] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[02:03:59] *** Joins: R035N3R (~phobos@user/r035n3r)
[02:04:06] *** Quits: R035N3R (~phobos@user/r035n3r) (Client Quit)
[02:04:14] *** Quits: gr1m (~gr1m@45.83.220.219) (Ping timeout: 256 seconds)
[02:04:32] <SpeakerToMeat> question, if I have package prodman, and inside I have module getproduct with function getproduct. Is there any non-stupid-person way I can do "from prodman import getproduct" and then "getproduct(id)" instead of "getproduct.getproduct(id)" ?
[02:04:57] *** Joins: gr1m (~gr1m@45.83.220.218)
[02:05:57] <SnoopJ> SpeakerToMeat, why not `from prodman.getproduct import getproduct; getproduct(id)` ?
[02:06:35] <SpeakerToMeat> Yeah I can do that too... it's just.... a stupid hookup of mine
[02:06:37] <SnoopJ> as you asked, you'd have to `from .getproduct import getproduct` in the prodman module
[02:06:39] <SpeakerToMeat> but, meanwhile I'll do it so
[02:07:02] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[02:07:19] *** Quits: smrtz (~smrtz@user/smrtz) (Quit: Client closed)
[02:07:20] *** PJBoy is now known as Guest3059
[02:07:20] *** Quits: Guest3059 (~PJBoy@user/pjboy) (Killed (tantalum.libera.chat (Nickname regained by services)))
[02:07:29] *** Joins: PJBoy (~PJBoy@user/pjboy)
[02:07:48] <SpeakerToMeat> SnoopJ, in that style, if you're makign something that will be used both as a cli, and library, is it stupid to structure it: Prodman/__main__.py Prodman/prodman/__init__.py and modules alongside init?
[02:08:17] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[02:08:34] *** Joins: qlixed (~qlixed@181.44.129.13)
[02:08:35] <SpeakerToMeat> Then again, if I do that, when I use it as a package lib, I'll have to "from Prodman.prodman.getproduct import getproduct" no?
[02:08:45] <SnoopJ> SpeakerToMeat, I don't see any reason it would be "stupid" no
[02:09:00] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[02:09:44] <SnoopJ> but whatever package structure you choose, you'll have to use that. I would think you'd have __init__.py and __main__.py side by side in this case so you don't have the extra layer of indirection...
[02:09:45] <SpeakerToMeat> The problem I had with having __init__.py and modules alongside __main__.py in ./Prodman was the modules import global vars from __init__.py and "import . as Prodman" was failing for me.
[02:10:32] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[02:10:37] <SpeakerToMeat> I could only make it work if I shoved init and modules into subdir prodman, and did "import prodman", that way I can access stuff in the modules like "prodman.url" for example
[02:10:48] <SpeakerToMeat> defined in __init__.py
[02:11:07] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:12:17] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[02:12:18] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:d885:8fcc:5b6d:d01e) (Quit: Konversation terminated!)
[02:12:28] *** Quits: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Client Quit)
[02:12:52] <SnoopJ> `import . as any_name` is invalid syntax, relative imports use from-import syntax
[02:13:00] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[02:13:35] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[02:13:49] <SnoopJ> https://docs.python.org/3/reference/import.html#package-relative-imports
[02:14:12] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[02:14:35] *** Joins: jazzy (~jaziz@user/jaziz)
[02:15:21] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Ping timeout: 245 seconds)
[02:15:24] *** Joins: qlixed (~qlixed@181.44.129.13)
[02:15:24] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:914a:9dba:6dc1:3d38)
[02:16:16] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:16:18] <duoi> SnoopJ do you recommend any specific resources to improve python-fu? i'm at medium-advanced but working in nothing but web dev has more or less meant ive stagnated for literally years at this point
[02:16:19] *** Joins: jazzy2 (~jaziz@user/jaziz)
[02:16:28] *** Quits: hackers (~remote@user/hackers) (Ping timeout: 264 seconds)
[02:16:28] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[02:17:18] *** Joins: Pandadub (~Barones@189.50.80.77)
[02:17:38] <SnoopJ> duoi, anything in particular you're wanting to skill-up in?
[02:18:04] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[02:18:21] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[02:19:28] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[02:20:12] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[02:20:27] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Ping timeout: 268 seconds)
[02:20:59] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: https://kn100.me :))
[02:22:34] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[02:23:56] <duoi> SnoopJ the less common parts of the stdlib that id be exposed to. things like multiprocessing, async, multimedia, maybe even a deep dive into functional parts (itertools) and how to use it effectively
[02:26:37] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 268 seconds)
[02:26:41] <SnoopJ> duoi, there was a good (long!) concurrency tutorial covering multiprocessing/async + threading at PyCon 2020: https://www.youtube.com/watch?v=18B1pznaU1o
[02:26:57] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[02:27:17] *** Quits: cosimone (~user@93-47-231-139.ip115.fastwebnet.it) (Remote host closed the connection)
[02:27:27] <SnoopJ> probably comparable stuff for the other topics, I'd poke around on pyvideo.org, if you're amenable to the recorded-talk format
[02:28:03] <aphysically> jinsun_: noooooooo https://github.com/willmcgugan/rich/releases/tag/v10.15.1
[02:28:14] <duoi> i didnt even know pyvideo was a thing. awesome. thanks for both links <3
[02:29:12] <SnoopJ> duoi, oh, and there's this for iteration-in-general, and with that in hand you have pretty much what you need to understand how itertools is *built*: https://nedbatchelder.com/text/iter.html
[02:30:02] *** Quits: km (znc@user/km) (Remote host closed the connection)
[02:30:43] <duoi> SnoopJ perfect. thank you. nedbat is a national treasure.
[02:30:49] *** Quits: elwoodpd (~elwoodpd@host-92-8-65-11.as13285.net) (Ping timeout: 256 seconds)
[02:31:08] <SnoopJ> agreed :)
[02:31:25] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[02:31:25] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:31:30] *** Joins: km (znc@user/km)
[02:31:31] <Swayze> SnoopJ is a #python treasure :)
[02:31:35] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:31:39] *** Joins: mickey8 (~user@user/mickey)
[02:31:45] <Swayze> not sure what else you do mate but ye :p
[02:31:52] <Swayze> im digging it
[02:32:24] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:35:02] *** Quits: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[02:35:10] *** Joins: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[02:35:24] *** Joins: akk (~akk@75.161.146.115)
[02:35:56] *** Joins: cyphase (~cyphase@user/cyphase)
[02:36:13] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Quit: If dreams are like movies, then memories are films about ghosts.)
[02:37:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[02:38:21] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[02:39:23] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[02:39:34] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[02:39:51] *** Quits: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[02:40:04] *** Quits: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il) (Remote host closed the connection)
[02:40:07] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:40:09] *** Joins: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[02:40:23] *** Joins: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il)
[02:41:21] *** Joins: elwoodpd (~elwoodpd@host-92-8-65-11.as13285.net)
[02:41:48] <SnoopJ> Swayze, I believe the technical term for me is "Extremely Online"
[02:42:16] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Ping timeout: 264 seconds)
[02:42:20] *** Quits: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[02:42:30] *** Joins: luigibu (~luigi@80.30.201.209)
[02:42:39] *** Joins: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[02:45:41] *** Quits: flyback (~flyback@2601:540:8201:1e60::9a75) (Quit: Leaving)
[02:45:47] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Remote host closed the connection)
[02:46:00] *** Joins: grooverman_ (~grooverma@177.95.12.14)
[02:47:11] <elwoodpd> If I have a list and I want to make an async generator that will wait for updates even if it reaches the current end of the list
[02:47:20] <elwoodpd> Is there a way to do that?
[02:47:41] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 252 seconds)
[02:49:08] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[02:49:08] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[02:50:18] *** Joins: flyback (~flyback@2601:540:8201:1e60::9a75)
[02:50:55] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:713a:c3a0:ebd0:8790) (Read error: Connection reset by peer)
[02:51:21] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:52:33] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Client Quit)
[02:53:08] *** Joins: dld (~dld@107.126.252.194)
[02:54:16] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 264 seconds)
[02:55:38] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[02:56:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[02:56:55] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[02:57:06] *** Joins: jbox (~jbox@user/jbox)
[02:58:15] *** Joins: fikran (~fikran@user/fikran)
[02:58:16] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[02:58:36] *** Joins: onichomp (~onichomp@2806:264:4404:80d9:d074:c875:9b0d:4203)
[02:58:42] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:00:38] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[03:00:39] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[03:00:43] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[03:00:50] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[03:01:09] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[03:01:18] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:01:26] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 252 seconds)
[03:01:26] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[03:01:50] <hrob> o/  Im working with base64 strings... I notice in python3  b64encode  returns a bytes object
[03:02:19] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:02:30] <hrob> I.e.   this  gives a bytes object   base64.b64encode(bin)   --  I need to pass this on to a JSON in utf8 I guess In most cases
[03:02:50] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[03:03:05] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[03:03:36] <hrob> is the right thing to do,  base64.b64encode(bin).decode()   or .decode('utf-8') ?
[03:03:54] <hrob> or even  str( base64.b64encode(bin) )
[03:04:12] *** Quits: fofoni (~fofoni@user/fofoni) (Quit: Leaving)
[03:04:13] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[03:04:29] *** Joins: kevr (~kevr@user/kevr)
[03:04:35] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:04:51] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 268 seconds)
[03:05:22] *** Joins: fofoni (~fofoni@user/fofoni)
[03:05:38] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[03:07:09] *** Quits: ArtfulDodger (~ArtfulDod@2a02-8440-630d-53c5-78ba-13a3-5b05-4fb6.rev.sfr.net) (Quit: Leaving)
[03:07:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:08:04] *** Quits: dld (~dld@107.126.252.194) (Ping timeout: 264 seconds)
[03:08:33] *** Joins: dld (~dld@107.126.253.134)
[03:10:40] <KirkMcDonald> hrob: Certainly not str(). It'll just be an ASCII string, so any of .decode(), .decode('utf-8'), .decode('ascii')... those'll all do it.
[03:11:57] <hrob> KirkMcDonald  if I understand correctly  base64  is compat with ascii  also as result utf-8,   ... so the decode either utf8 or ascii both work?
[03:12:06] <hrob> sorry Im newb
[03:12:35] <KirkMcDonald> Yes. UTF-8 is a superset of ASCII.
[03:13:10] <KirkMcDonald> So if it's encoded as ASCII, it'll work with either. (Or with any other ASCII superset; there are a bunch.)
[03:14:05] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 252 seconds)
[03:14:10] <hrob> wonderfull
[03:14:55] <hrob> they should have called it binaryASCII  me thinks... :)
[03:16:09] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[03:16:21] <KirkMcDonald> I'm not really sure what you're referring to.
[03:18:20] *** Quits: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[03:18:39] *** Joins: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[03:19:33] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[03:19:58] *** Quits: DaPinkOne (~Dap@user/dap) (Quit: Quit.)
[03:19:58] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Quit: That's a thinker...)
[03:20:54] *** Joins: poiqwepoiqwe (uid525840@id-525840.hampstead.irccloud.com)
[03:21:05] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[03:21:21] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[03:21:38] *** Joins: DaPinkOne (~Dap@user/dap)
[03:22:25] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[03:22:28] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[03:22:28] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:23:37] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[03:23:56] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[03:24:06] *** Joins: nicolas17 (~nicolas@KDE/nalvarez)
[03:24:09] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[03:24:16] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:25:14] *** Joins: jazzy (~jaziz@user/jaziz)
[03:26:39] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:27:26] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 245 seconds)
[03:28:12] *** Quits: jpic (~jpic@82.142.20.182) (Remote host closed the connection)
[03:28:55] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[03:30:18] *** Joins: supay (~suay@2605:bb00:7000:1:f816:3eff:fe18:ab69)
[03:30:24] <supay> i have two strings. one small (S) and the other much larger (L). i want to find the longest substring of S that occurs more than once in L.. what algorithm am i looking for?
[03:31:24] *** Quits: nomic (~nomic@185.217.117.132) (Quit: Leaving)
[03:32:04] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 264 seconds)
[03:33:06] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:2446:13de:20ec:764f) (Quit: smeeagle)
[03:34:15] <hrob> supay,  substring?  delimited by what?
[03:35:04] *** Quits: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:35:20] <supay> hrob, not sure i understand your question..
[03:35:54] <supay> when i say substring, i mean the longest sequence of words. sorry if i misused the term..
[03:36:07] <nicolas17> yeah I assumed characters
[03:36:18] <nicolas17> that seems like it would take a lot of searching
[03:36:47] <supay> aren't words just a sequence of characters? in which case, it kinda means the same thing?
[03:37:08] <nicolas17> depends if you care about getting words cut in half :P
[03:37:20] <supay> oh shit, yes, sorry. i do! :D
[03:37:34] <supay> that makes so much sense, lol. i'm dumb
[03:37:47] <supay> is there an algo that does this? or do i need to extend an existing algo?
[03:37:50] <hrob> supay,  if you are talking about words... with spaces.. then try  longest_word_in_S = max(S.split(), key=len)
[03:38:15] *** Quits: dreamon (~dreamon@pd95039d2.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[03:38:15] <KirkMcDonald> That'll give the longest word, yes, but that's not the question.
[03:38:20] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:38:26] <nicolas17> "longest subsequence of words in S that occurs more than once in L" seems like a really weird thing and I doubt there is an existing named algorithm for something like that
[03:38:32] <hrob> KirkMcDonald  not fully ... but along the way
[03:38:44] <supay> KirkMcDonald, i guess what he's suggesting is i then do a search for the resultant longest word
[03:39:23] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[03:39:26] <KirkMcDonald> But is the question about the longest word, or the longest sequence of words? Is longest mesured as the number of words, or the length of the actual substring containing that sequence of words?
[03:39:29] <supay> hrob, but it could even be two or more words..
[03:39:36] <nicolas17> given S = "give the longest word" it seems like you would need to search for the whole S in L and see if that occurs more than once, and if it doesn't, try again with "give the longest" and "the longest word"?
[03:39:38] *** Joins: nomic (~nomic@185.217.117.132)
[03:39:39] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:39:41] *** Quits: nomic (~nomic@185.217.117.132) (Remote host closed the connection)
[03:39:45] <supay> KirkMcDonald, you're absolutely right. the longest sequence of words!
[03:39:52] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:88ef:62f9:7f7e:fde3) (Ping timeout: 264 seconds)
[03:40:06] <supay> longest may be measured as the number of words
[03:40:21] *** Joins: ckdCreations (~ckdCreati@147.55.133.135)
[03:41:27] <hrob> you can try   L.split("longest_word_in_S)    but not sure that is the answer you are looking for
[03:41:29] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:41:32] <hrob> something like that
[03:41:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[03:41:40] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:edef:5ef4:644d:7d12) (Ping timeout: 256 seconds)
[03:41:59] <supay> nope.. i don't think so
[03:42:11] *** Joins: nomic (~nomic@185.217.117.132)
[03:42:25] <nicolas17> you should give some examples of input and output...
[03:42:47] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[03:42:53] <supay> let me try to frame an example..
[03:43:04] <supay> S = "what is a quick brown"
[03:43:13] <supay> L = "a quick brown fox jumps over the lazy dog, and while doing so, the quick brown fox dies or whatever"
[03:43:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-bc7b-beb0-653c-822c.res6.spectrum.com)
[03:43:23] <hrob> or  s.count(longest_w_in_S) :D
[03:43:30] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[03:43:32] <supay> so essentially, it should give me "quick brown" and say that it exists in two places..
[03:43:33] <KirkMcDonald> And the result would be "quick brown"?
[03:43:43] <supay> KirkMcDonald, Yes sir!
[03:43:48] <nicolas17> why does this smell like homework
[03:43:58] <supay> i promise it isn't. pinky swear
[03:44:12] <hrob> python is too magical for good homework... should be C
[03:44:20] <supay> i'm looking for an optimized way to do it. i need to process hundreds of thousands of such matches.
[03:45:35] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[03:45:36] *** Quits: lastshell (~lastshell@user/lastshell) (Quit: WeeChat 3.0)
[03:45:46] <Repiphany> Can S have repeated words
[03:45:49] <KirkMcDonald> I have a vague idea that you could process the long string into some sort of state machine or trie or... something. Something that'd tell you which words are followed by which other words. Hmm.
[03:45:50] <supay> since i'm looking for a series of words, i can try to break them into sequential combinations, and search across L. so i'll have ['what', 'is', what is', 'what is a', what is a quick'...] and then see if which has the most occurance in L
[03:46:19] <nicolas17> hrob: I was once doing the trivial Python exercises on a code-challenge website (to get familiarized with the website itself) and it gave me "write a function that returns the largest number in a list", and had "def max(numbers):" pre-filled in the code editor... I stared at it for a few seconds, deleted everything, clicked Run with the editor empty, and it passed all tests because max is built-in >.>
[03:46:38] <supay> Lol
[03:46:42] <hrob> supay  ahh...  ok so its lookin for "phrases"
[03:46:55] *** Joins: Smigwell (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net)
[03:47:41] <supay> it may possibly even be a single word btw
[03:47:56] <supay> ideally phrases, but no guarantee. min is 1 full word. no less ofc
[03:47:58] <KirkMcDonald> Could be a tie, too.
[03:48:01] <hrob> the difficult thing is probably identifying what is a "long phrase" in S  to begin with
[03:48:17] <supay> KirkMcDonald, hahaha, right! i'll use all if there is a tie
[03:48:49] <supay> hrob, yeah, so i guess i need to try all variations. luckily there is a sequence (position), so i hope the list isn't too big
[03:49:31] <hrob> you may need something like correlation.... correlate  S and L
[03:49:35] *** Joins: Atque (~Atque@user/atque)
[03:49:48] *** Quits: p-i-_ (~Ohmu@223.206.149.59) (Remote host closed the connection)
[03:50:40] <hrob> maybe something in numpy or scipy  can do that if convert to array of chars
[03:50:41] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[03:50:49] <Repiphany> You could convert L to a list of indices of where each word appears in S (if at all) and look for runs of increasing indices
[03:51:09] <Repiphany> But that's more annoying if words in S aren't unique
[03:51:19] <supay> ooo, this sounds interesting.
[03:51:36] <supay> for my use-case, it is highly likely that all words in S are unique.
[03:51:56] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:914a:9dba:6dc1:3d38) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:52:04] <supay> so i'll then look for subsequent indices that have the same rank/value?
[03:52:38] <nicolas17> Repiphany: even with duplicates I think that still makes things easier
[03:53:18] <KirkMcDonald> It lets you strip out all the bits of L that don't occur in S, at least.
[03:53:18] *** Joins: p-i- (~Ohmu@223.206.149.59)
[03:53:42] <supay> very interesting. i wonder how your minds work to come up with something like that. that just amazes me.
[03:53:48] <supay> i wish i was that good at programming.
[03:54:16] *** Quits: dld (~dld@107.126.253.134) (Ping timeout: 264 seconds)
[03:55:36] <bparker> I wish I could come up with good ideas to program
[03:55:41] <hrob> supay  whatever you do, it may be more efficient than you think... so try something and worry later ... but this sounds like matrix work so my experience dont want to use python loops if you can get away with it -- numpy could be useful.
[03:55:42] *** Joins: noord (~noord@user/noord)
[03:56:41] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[03:56:43] <supay> i'm a degenerate loop-er :(
[03:56:59] *** Quits: ham5urg (~ham5urg@p200300d167435800aad994dfc5b5092c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:57:12] <hrob> numpy is loops, just abstracted nicely from the C side :)
[03:57:31] <phantomotap> bparker: make a better mousetrap
[03:57:32] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[03:57:36] <supay> oo, i'll give it a shot. the python part is a small piece in the larger puzzle. for the rest of my project, i use js
[03:57:45] <supay> (pls don't kick/ban me :) )
[03:58:05] *** Quits: p-i- (~Ohmu@223.206.149.59) (Ping timeout: 256 seconds)
[03:58:07] *** Parts: Smigwell (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net) ()
[03:59:22] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:59:49] <nedbat> bparker: what have you liked building in the past?
[03:59:50] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:00:05] *** Joins: grayn (Thunderbir@gateway/vpn/protonvpn/grayn)
[04:01:00] <bparker> nedbat: I prefer building things for other people, to their specifications
[04:01:23] *** Joins: Wulf (~Wulf@user/wulf)
[04:01:28] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 264 seconds)
[04:01:46] *** Joins: Bakunin (~Lindis@user/lindis)
[04:01:57] <hrob> supay  if S isnt too long  it would probably be efficient just do L.count("sub_phrases_of_S")  over all phrases in S  im thinking
[04:02:05] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[04:03:26] <hrob> worth trying and worrying later
[04:04:34] <supay> yep, i'm currently testing the approach shared by Repiphany, will test this as well :) thank you everybody
[04:04:48] <nedbat> bparker: ok, but there must have been projects you've enjoyed more than others?
[04:04:49] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[04:06:35] <Swayze> bparker there are so many amazing libraries for python, i often wonder if theres any use case for actual hardcore programming anymore :p
[04:06:41] <bparker> nothing really in particular, it's almost always a learning experience in some way
[04:06:50] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[04:07:07] <Swayze> i mean i 'wrote' an entire dictation app in the python with UI in about an hour (using libraries of cors)
[04:07:13] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[04:07:18] *** Quits: supay (~suay@2605:bb00:7000:1:f816:3eff:fe18:ab69) (Quit: supay)
[04:07:34] <Swayze> and that jsut mainly because ive never used simplegui before
[04:08:27] <nedbat> bparker: write a Mad Libs server
[04:08:54] <bparker> Swayze: one of the desktop apps that I was commissioned to do in the past was medical dictation
[04:09:02] *** Parts: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com) ()
[04:09:23] <bparker> that one was interesting because it involved wearing all kinds of different hats and many different technologies
[04:09:53] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 264 seconds)
[04:09:56] <bparker> from key logging to VOIP to recording and encoding audio plus all the server backend stuff, and more
[04:10:47] <phantomotap> bparker: out of curiosity, did you use voice recognition? and if so, what components?
[04:10:56] <bparker> nope
[04:11:03] *** Quits: Gerula (~Gerula@user/gerula) (Read error: Connection reset by peer)
[04:11:27] *** Joins: Gerula (~Gerula@user/gerula)
[04:11:40] *** Quits: delvian (~delvian@41.13.224.10) (Ping timeout: 264 seconds)
[04:11:42] <bparker> we also had to support various hardware devices that required either custom drivers or external SDK support like insanely expensive Olympus recorders (that used proprietary codecs), as well as things like foot pedals and such for audio controls in the app
[04:11:45] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:11:52] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[04:11:57] *** Joins: delvian (~delvian@41.13.224.10)
[04:12:30] *** Quits: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com) (Quit: csmiga)
[04:12:49] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 256 seconds)
[04:13:57] <phantomotap> that does sound education... painful but educational.
[04:14:27] *** Joins: csmiga (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net)
[04:14:30] <bparker> yea and thankfully just about every project I work on is something completely different like that so I'm always learning new stuff
[04:17:27] *** Quits: csmiga (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net) (Client Quit)
[04:17:52] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[04:20:35] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:21:05] <phantomotap> bparker: you ever thought about writing a new gui toolkit?
[04:21:32] <bparker> yes but it's so much work
[04:21:45] <phantomotap> indeed.
[04:21:46] <bparker> and people will never stop arguing about it
[04:21:52] <phantomotap> indeed. ^_^
[04:22:40] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Quit: This computer has gone to sleep)
[04:22:51] <bparker> like I get paid to use Qt and I really enjoy working with it but any time I see someone crapping on it all I can do is facepalm
[04:23:08] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:23:18] <nedbat> aren't ruby strings mutable? How do they deal with hash keys? Do they just depend on the programmer not mutating strings that have been used as keys?
[04:23:32] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Quit: Client closed)
[04:23:52] <phantomotap> i don't much like qt anymore, but python bindings make it much more palatable in my opinion
[04:23:54] *** Joins: dohtem (uid524096@user/dohtem)
[04:24:31] <bparker> and most of the time the people that are crapping on it simply hate everything in general
[04:24:38] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[04:24:40] <bparker> and/or have unrealistic expectations
[04:24:44] <bparker> or are trying to use the wrong tool
[04:24:45] <bparker> IMO
[04:25:04] *** Quits: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com) (Quit: csmiga)
[04:25:17] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[04:25:19] <phantomotap> i don't know about that third thing, but yeah, people do have unrealistic expectations for how much gui code should be reasonable
[04:25:34] *** Joins: csmiga (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net)
[04:25:52] <bparker> or in the case of Qt a lot of people simply have very out of date information on it
[04:26:48] <phantomotap> not sure what you mean!?
[04:27:06] <bparker> my favorite (read: most hated) complaint is "it doesn't look the same (but still somehow native at the same time) on every platform"
[04:27:15] <phantomotap> ah.
[04:27:20] *** Quits: csmiga (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net) (Client Quit)
[04:27:34] <phantomotap> yeah. that's kind stupid.
[04:27:40] <phantomotap> kinda*
[04:27:56] <bparker> phantomotap: a common one is they either don't realize it's offered as LGPL, or don't understand its terms
[04:28:05] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[04:28:25] <bparker> which, Qt changing their website multiple times trying to really hide all the open source stuff, doesn't help
[04:29:00] <bparker> another is they think your only distribution option is all the full size shared libraries
[04:29:07] <bparker> and then complain about its size
[04:29:28] *** Joins: csmiga (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net)
[04:29:43] <bparker> at least in my experience, if I'm using Qt, size is never a concern, so I wouldn't even be complaining about that
[04:29:45] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[04:29:56] *** Quits: grimvar (~grimvar@i5C75F680.versanet.de) (Ping timeout: 245 seconds)
[04:29:56] <phantomotap> yeah. i've heard that one. i'm an old c++ hat. "$ is bloat" and i are old friends.
[04:29:58] *** Quits: csmiga (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net) (Client Quit)
[04:30:10] <bparker> but if it were, since many years ago it can now be customized to remove any unused stuff, or you can static compile to get a similar effect (and many don't understand that LGPL still allows this)
[04:31:04] *** Joins: Barones (~Barones@2804:7f3:8987:f411:9733:6a6d:657c:356c)
[04:31:21] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[04:31:50] *** Joins: grimvar (~grimvar@i5C75F5C0.versanet.de)
[04:31:55] *** Joins: diamondbond (~diamondbo@175.157.188.250)
[04:32:02] *** Joins: frost (~frost@user/frost)
[04:32:05] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[04:32:21] <dre> I love working with Qt
[04:32:24] *** Quits: diamondbond (~diamondbo@175.157.188.250) (Read error: Connection reset by peer)
[04:33:09] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[04:33:10] <phantomotap> people misunderstand open source licenses in general in my experience. i've had so many arguments over lgpl and agpl.
[04:33:34] <bparker> yep
[04:33:38] <phantomotap> dre: why do you love working with qt? just curious.
[04:34:56] *** Joins: BlessJah (~BlessJah@user/blessjah)
[04:35:06] *** Joins: pgib (~textual@173.38.117.87)
[04:35:13] <phantomotap> lgpl + c++ template libraries and misunderstanding how that works are a pet peeve of mine
[04:36:11] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (Ping timeout: 250 seconds)
[04:36:44] <bparker> and even if they understand lgpl I often hear "but then I have to give away my changes", yet they never actually modify Qt anyway
[04:37:06] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:37:11] <phantomotap> yep.
[04:37:27] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[04:37:40] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Quit: Client closed)
[04:40:29] *** Joins: grayn1 (~Thunderbi@130.95.254.164)
[04:41:09] *** Quits: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) (Ping timeout: 256 seconds)
[04:41:09] *** grayn1 is now known as grayn
[04:42:19] <phantomotap> bparker: in any of your various projects, in not python if any, how did you handle unicode?
[04:42:56] *** Quits: jamiejackson (~jamiejack@207.172.87.34) (Quit: Connection closed)
[04:42:59] <bparker> handle in what way? storage? display? or what
[04:43:25] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:43:32] *** Quits: user3456 (user3456@user/user3456) (Ping timeout: 240 seconds)
[04:43:54] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[04:45:43] <phantomotap> display, collation, and transformation (like normalization) are my biggest worries.
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:07] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:46:59] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Quit: This computer has gone to sleep)
[04:47:05] <bparker> in most cases I just assume the client understands utf8 and use that everywhere internally, except special cases like old Windows versions where you have to convert to other codepages, or use utf16 for internal API functions
[04:47:23] <bparker> client/user/desktop/terminal/whathaveyou
[04:47:55] <phantomotap> yeah. that's more or less what i've been doing, but i'd like to publish what i'm working on and that seems so lackluster
[04:48:04] <bparker> never really had to deal with sorting or actual parsing of special codepoints
[04:48:31] <bparker> I think the worst I've done is right-to-left text and CJK support
[04:48:44] <bparker> nothing too crazy
[04:49:04] *** Quits: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il) (Remote host closed the connection)
[04:49:04] *** Quits: flokuehn (~flokuehn@87.123.247.91) (Ping timeout: 268 seconds)
[04:49:24] *** Joins: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il)
[04:50:25] <phantomotap> i see. the most complicated i've dealt with is some japanese
[04:50:29] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:50:40] *** Joins: flokuehn (~flokuehn@87.123.247.94)
[04:50:52] *** Joins: rjwiii (~mr-rich@idlerpg/player/mr-rich)
[04:50:53] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[04:51:10] <bparker> I also study it so I quite enjoy that as well
[04:51:34] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[04:51:43] <bparker> going on about 15 years now
[04:51:52] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[04:52:13] <phantomotap> that's cool. i'm trying but like holy cow my accent makes it hard to pronounce anything.
[04:52:36] <bparker> just be glad you're not learning Chinese, where the pitch accent *really* matters :)
[04:52:37] *** Quits: guenhael (~Thunderbi@2a01cb008c3d5800086035b9fb310f47.ipv6.abo.wanadoo.fr) (Quit: guenhael)
[04:52:54] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[04:52:55] <bparker> you can get away with mostly ignoring that in Japanese, especially as a foreigner
[04:52:58] <bparker> IMO
[04:53:47] <phantomotap> yeah. maybe i'm just lucky, but the people i've tried to converse with have all been super helpful.
[04:54:41] <bparker> I don't really have anyone to chat with anymore unfortunately, now that I stopped using discord
[04:54:52] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[04:54:55] <bparker> the huge time difference also makes it quite difficult
[04:55:08] <phantomotap> yeah.
[04:55:15] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[04:55:30] <bparker> and when you chat with other foreigners you can never really know if what *they* are saying is correct either
[04:56:09] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:56:40] <phantomotap> yep. and jargon. even if they are using it correctly it may be super inappropriate for other venues.
[04:56:46] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:56:52] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Client Quit)
[04:57:24] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[04:58:07] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[04:58:11] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:59:03] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[04:59:51] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 256 seconds)
[05:00:54] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a239:503:f14f:a0bc:9f5a:4130) (Quit: Textual IRC Client: www.textualapp.com)
[05:00:55] *** Quits: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[05:00:57] *** Joins: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:854e:d334:a63f:e8ed)
[05:01:15] *** Quits: frost (~frost@user/frost) (Quit: Ping timeout (120 seconds))
[05:01:15] *** Joins: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[05:01:33] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[05:01:39] <QuaternionsRock> I'm trying to understand the behavior of `in` within the context of two NumPy arrays. if `x` and `y` are ndarrays, what exactly is `x in y` returning?
[05:02:09] <QuaternionsRock> it seems to be roughly equivalent to `np.any(np.isin(x, y))` but I can't say for sure
[05:02:23] *** Joins: lastshell (~lastshell@user/lastshell)
[05:02:27] *** Joins: grayn1 (Thunderbir@gateway/vpn/protonvpn/grayn)
[05:03:10] <QuaternionsRock> I thought that `a in b` was essentially `any(a == elt for elt in b)` behind the scenes but that doesn't seem to
[05:03:13] <QuaternionsRock> be the case
[05:03:29] *** Quits: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[05:03:44] *** Joins: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[05:03:49] *** Quits: grayn (~Thunderbi@130.95.254.164) (Ping timeout: 256 seconds)
[05:03:49] *** grayn1 is now known as grayn
[05:04:26] <SnoopJ> QuaternionsRock, `a in b` is the same as `a.__contains__(b)`
[05:04:29] *** Joins: user3456 (~user3456@user/user3456)
[05:04:35] *** Joins: Atque (~Atque@user/atque)
[05:04:52] <QuaternionsRock> Not `b.__contains__(a)`?
[05:05:09] <SnoopJ> err, sorry, yes, that
[05:05:13] *** Joins: frost (~frost@user/frost)
[05:05:24] <bparker> are you doing 'for x in y' or 'if x in y'
[05:05:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[05:05:32] <SnoopJ> https://docs.python.org/3/reference/datamodel.html#object.__contains__
[05:05:45] <QuaternionsRock> Ah
[05:06:29] <QuaternionsRock> So how does numpy define `ndarray.__contains__` then?
[05:06:38] <QuaternionsRock> The docs don't help with that lol https://numpy.org/doc/stable/reference/generated/numpy.ndarray.__contains__.html?highlight=__contains__#numpy.ndarray.__contains__
[05:06:48] *** Quits: theelous3 (~theelous3@109.255.56.189) (Read error: Connection reset by peer)
[05:07:34] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[05:07:36] *** Joins: fikran (~fikran@user/fikran)
[05:08:30] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[05:08:32] <SnoopJ> I believe it's this: https://github.com/numpy/numpy/blob/main/numpy/core/src/multiarray/sequence.c#L29-L52
[05:09:14] <SnoopJ> which looks like a broadcast of == and then np.any()
[05:09:50] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[05:11:24] *** Joins: user3456_ (user3456@user/user3456)
[05:11:25] *** Joins: arandomcomrade (~arandomco@user/arandomcomrade)
[05:11:26] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:12:16] *** Quits: user3456 (~user3456@user/user3456) (Ping timeout: 264 seconds)
[05:12:24] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[05:12:30] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (Ping timeout: 268 seconds)
[05:12:43] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[05:12:57] *** Joins: lionslicer (~lionslice@2804:d41:a7a6:1300:c53d:f6cc:4fb0:a4ca)
[05:13:45] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[05:13:53] <hrob> in python 2.7 it was recommended to derive from object... am I right that in python3 this is implicit?
[05:13:58] <SnoopJ> so I think the English transliteration of `b in a` is "does the entire array b appear in the array a?"
[05:14:00] <nicolas17> yes
[05:14:05] <nicolas17> to hrob :D
[05:14:11] <SnoopJ> hrob, yep, you don't need to ask for it explicitly
[05:14:24] <hrob> great! thanks!
[05:14:25] *** user3456_ is now known as user3456
[05:14:27] <hrob> shorter code
[05:14:43] *** Joins: lethu (~lethu@user/lethu)
[05:14:44] <nicolas17> afaik in python 2, "class Foo:" makes an old-style object and "class Foo(object):" makes a new-style object, in Python 3 old-style is gone
[05:14:53] <QuaternionsRock> SnoopJ that is so bizarre
[05:15:27] <SnoopJ> QuaternionsRock, I am inclined to agree, I would think it would be an error for any non-scalar
[05:15:45] <SnoopJ> and it looks like it will become one in cases where the broadcast fails
[05:16:03] <QuaternionsRock> The implicit `np.any` is the strange part to me
[05:16:31] <SnoopJ> making the result an array would violate the data model
[05:16:52] <QuaternionsRock> I feel like it should either raise an error or use `all`
[05:17:18] <QuaternionsRock> In most cases it seems like you'd want to use it to match a subarray within an array
[05:17:27] *** hexology is now known as hexology_
[05:17:29] <QuaternionsRock> by essentially iterating over the first axis
[05:17:51] *** hexology_ is now known as hexology__
[05:17:54] <SnoopJ> why the first one?
[05:18:08] <lionslicer> Can someone help? I'm trying to get input on temperatures in Celsius, turn it into Fahrenheit, get the averages and then count the number of temperatures in fahrenheit that exceed the average. The problem is, my average is messed up, but it can't figure out why.
[05:18:08] *** hexology__ is now known as hexology`
[05:18:12] *** hexology` is now known as hexology_`
[05:18:17] <lionslicer> https://bpa.st/MANA
[05:18:31] <QuaternionsRock> SnoopJ same reason as `for x in an_ndarray` iterates over the first axis I suppose
[05:18:46] <Repiphany> lionslicer: Average of temperatures doesn't make sense
[05:18:53] <Repiphany> Unless you're using an absolute scale like kelvin
[05:18:57] *** hexology_` is now known as hexology
[05:19:03] <QuaternionsRock> numpy won't let you do `bool(an_ndarray)` because that would require an implicit `any` or `all` but it will for `in`? That just seems so weird
[05:19:24] <SnoopJ> QuaternionsRock, leaving aside that iterating an ndarray is a notorious antipattern, the reason doesn't apply: __contains__ isn't necessarily tied to iteration
[05:19:25] <nicolas17> wat
[05:19:32] <nicolas17> why would average of temperatures not make sense?
[05:20:14] <SnoopJ> although I guess if you were to force it to be in terms of iteration, you'd have the same semantics
[05:20:58] <hexology> think of it this way: _one_ possible way to check containment is to iterate
[05:20:59] <Repiphany> I'm probably mixing something up, ignore me
[05:21:08] <hexology> but you don't _have_ to iterate in order to check containment
[05:21:18] <QuaternionsRock> If an object doesn't have a `__contains__`, python uses `__iter__` for `in`.
[05:21:31] <SnoopJ> QuaternionsRock, and ndarray *does* have it, so that doesn't apply here
[05:21:34] <hexology> +1
[05:21:37] <QuaternionsRock> I feel like __contains__ is mostly there to allow for the obvious optimizations
[05:21:49] <lionslicer> Repiphany: Celsius = [1, 2, 3, 4, 5] = Farenheit = [u, x, y, z, w]. (u+x+y+z+w)/5 = average. If u,x, y, z, or w > average, then add one to the counter
[05:21:50] <hexology> (it probably does iterate in this case, but in highly-optimized c code)
[05:22:02] <QuaternionsRock> If __contains__ were removed from an object that is iterable, `in` should provide the same results
[05:22:03] <Yhg1s> QuaternionsRock: __contains__ is there to allow for 'in' to work, but for hysterical raisins, 'in' falls back to iteration if it isn't there.
[05:22:12] <SnoopJ> It may iterate implicitly because of the == comparison
[05:22:16] <hexology> yes QuaternionsRock, but `__iter__` + `in` would be orders of magnitude slower
[05:22:16] <Yhg1s> (__contains__ was added long after 'in')
[05:22:24] <lionslicer> but it doesnt work
[05:22:29] <SnoopJ> although calling the broadcast comparison iteration is...misleading
[05:22:56] <SnoopJ> anyway, the interpretation you asked for is "is this exactly array a member of that one?"
[05:23:00] <SnoopJ> is this array exactly*
[05:23:01] <nicolas17> lionslicer: what does it do wrong?
[05:23:24] <QuaternionsRock> SnoopJ but that isn't really what it does
[05:23:36] <lionslicer> nicolas17: if I get 2 temperatures above average, for example, it prints 5 instead of 2
[05:23:38] <SnoopJ> QuaternionsRock, yes it is
[05:23:45] <nicolas17> ah I see
[05:24:08] <Repiphany> You're not computing the final average and then comparing each value to it
[05:24:09] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[05:24:09] <nicolas17> you're comparing against mediaf when you're still calculating it so it doesn't have the final result yet
[05:24:22] <QuaternionsRock> `np.array([-1, 1, 10]) in np.arange(9).reshape(3, 3)` returns True but `a` isn't "exactly" in `b` by any stretch of the imagination
[05:24:35] <lionslicer> my count variable is set to count if list[i] > average then ad i, but it doenst work
[05:24:51] <lionslicer> add 1 to the counter*
[05:25:21] <QuaternionsRock> Because `np.any(np.any(a == b, axis=1))` returns True
[05:25:25] <nicolas17> for example if your farenheit temperatures are [1,2,3,4,5], the first time it goes through the loop "mediaf += far[i]/5" adds 1/5 to mediaf
[05:25:36] <SnoopJ> QuaternionsRock, hmm, fair point. Okay, so my interpretation is wrong, but it's still a broadcast with == and any()
[05:25:47] <nicolas17> then it checks if "far[0] > mediaf" which is "1 > 1/5" which is true
[05:26:05] <nicolas17> but 1/5 is not the average, because you didn't add the other temperatures yet
[05:26:13] <smichel17[m]> Hi. I'm new-ish to python. -ish meaning I've made several attempts to contribute to projects in python, but I always get hung up on tooling. In particular, I'm looking for a way to install dependencies in some way where they'll be ~isolated from the rest of my system (e.g. in a virtualenv), but avoid doing all of my development there (i.e. no . venv/bin/activate, because this often screws up other python stuff in my shell, notably
[05:26:13] <smichel17[m]> powerline).
[05:26:14] <smichel17[m]> Can someone point me in the right direction to understand which tools would facilitate this best, and maybe a list of the commands I'll need to know? I'm happy to read documentation myself, but there's just so much out there (not all up-to-date!) that it's hard to figure out where to start.
[05:26:26] <lionslicer> nicolas17: ooh, gotcha
[05:26:29] *** Quits: orbisvicis (~orbisvici@user/orbisvicis) (Ping timeout: 256 seconds)
[05:26:43] <lionslicer> should I write another for loop?
[05:26:44] <nicolas17> you probably need two loops
[05:26:53] <lionslicer> ok, gotcha. lemme try it
[05:27:11] <QuaternionsRock> So just to be clear, `ndarray.__contains__` does the same as iterating over the first axis
[05:27:24] <SnoopJ> it does == and any()
[05:27:26] <nicolas17> once all the temperatures are added into the average, and you're not changing mediaf anymore, you loop again to see how many are higher
[05:27:58] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:27:59] <SnoopJ> QuaternionsRock, it is definitely not the same as any "just iteration" because of the example you gave: you need to do a broadcast first
[05:28:06] <QuaternionsRock> Yes, but it must do two calls to `any`
[05:28:20] <SnoopJ> where is the second one in the implementation I linked?
[05:28:36] <QuaternionsRock> the first call to `any` is over `axis=1` which is the same effect as iterating with the built-in `all`
[05:29:00] <QuaternionsRock> I haven't worked much with the C API so I don't know how to read it very well, but let me see
[05:29:01] <lionslicer> nicolas17: thanks, it worked
[05:29:07] <nicolas17> :)
[05:29:27] *** Quits: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[05:29:43] *** Joins: orbisvicis (~orbisvici@user/orbisvicis)
[05:29:46] *** Joins: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[05:29:50] <SnoopJ> QuaternionsRock, well, it also says in the comment right under the signature that it's equivalent to `(self == el).any()`
[05:30:05] <SnoopJ> but line 37-38 is the `==`, line 43 is the `any`
[05:30:29] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:37] <QuaternionsRock> But that also isn't true because `np.array([-1, 2, 1]) in np.arange(9).reshape(3,3) == False`
[05:31:12] <QuaternionsRock> Oh I'm stupid aren't I
[05:31:21] <QuaternionsRock> Yep, nvm
[05:31:26] <SnoopJ> like I said, it's a broadcast operation :)
[05:31:47] <SnoopJ> I don't know exactly how I'd turn that into an English sentence that doesn't use numpy jargon, though
[05:32:07] *** Quits: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[05:32:15] <QuaternionsRock> I was thinking to heavily within the context of `a_1d_array in a_2d_array`
[05:32:17] *** Joins: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[05:32:27] <SnoopJ> and I would certainly much rather pay the price for doing it in two steps than rely on the trivia of `in`
[05:32:41] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[05:32:54] <SnoopJ> `(a == b).any()  # cool, I know this does ==, then any();  a in b  # uhhh, I hope someone left me notes`
[05:33:11] <QuaternionsRock> I guess I just don't know why it would use `any`
[05:33:20] <QuaternionsRock> `all` makes a ton of sense for that particular operation
[05:33:36] <SnoopJ> it's a little like your notion of iteration, except that it happens over any axes that the broadcast requires
[05:33:46] <QuaternionsRock> right
[05:34:04] *** Joins: jaggz (~jaggz@user/jaggz)
[05:34:14] <jaggz> how do you get Python.h in a miniconda install?
[05:34:21] <SnoopJ> and I guess then it's just "is any() bool in the result True" which...yea, don't know how to interpret that in the context of the original arrays
[05:34:31] <jaggz> this opencv gets to 100% then gives an error finding Python.h
[05:34:37] <SnoopJ> "do these overlap in a way that respects broadcasting?" or something
[05:34:38] <jaggz> (opencv build)
[05:35:35] <QuaternionsRock> It also seems super dangerous when the NumPy devs play it safe when it comes to __bool__
[05:36:04] <SnoopJ> playing it safe is dangerous?
[05:36:22] <QuaternionsRock> sorry, let me rephrse
[05:36:54] <QuaternionsRock> it seems super dangerous to use `any` here while they opted not to use it with `__bool__` and raise an error instead
[05:37:23] <QuaternionsRock> It should honestly probably fail if `a` isn't a scalar
[05:37:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:38:07] <QuaternionsRock> but even an implicit `all` makes more sense than an implicit `any`
[05:38:07] <SnoopJ> it's definitely high on trivia factor, I would rather it just complains at me
[05:38:28] <SnoopJ> I can understand the `scalar in array` case but the other one...ehhh...
[05:38:53] <SnoopJ> I can't understand why `all` would enter the picture unless you mean it should identify the axes that *weren't* expanded in the broadcast and operate over those
[05:40:04] *** Joins: Fiji (~Fiji@user/fiji)
[05:40:11] <SnoopJ> if it were over all axes, that's doing the same work np.array_equiv() does, which seems very different than __contains__
[05:40:26] <SnoopJ> but kinda so does what it *does* do, so yea, I would just prefer a "don't do that"
[05:40:59] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[05:41:00] <QuaternionsRock> at least `all` would mean that `a` actually *is* in `b`, lexically speaking lol
[05:42:08] <SnoopJ> it would mean they're the same array, up to the broadcast
[05:42:14] <SnoopJ> i.e. array_equiv
[05:42:25] <SnoopJ> neither of them seems very much like what I think of when I think "contains"
[05:42:38] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:42:41] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[05:43:16] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[05:43:39] *** Quits: qpdb (~qpdb@user/qpdb) (Ping timeout: 265 seconds)
[05:46:02] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[05:46:39] <SnoopJ> looks like it grew any() shortly after it was separated from scipy: https://github.com/numpy/numpy/blame/1add63fa4c2e4b1af420d79aadee9525b074c688/scipy/base/src/arrayobject.c#L2652-L2658
[05:47:37] <SnoopJ> err, more meaningful link, changes from 2005: https://github.com/numpy/numpy/commit/da2ba36993bbd33d7571e5d8eaa199ecf83fbc60#diff-34d968aadba693ba9c3eb8c62081b7f7736a92b4216fa4ba9e1409b21e7d181bR2657-R2664
[05:47:56] <QuaternionsRock> Also, is iterating through an ndarray really always an antipattern?
[05:48:05] <SnoopJ> yes
[05:48:29] <QuaternionsRock> Like, if i needed to find the first index of an element in a really long array, isn't it kind of absurd to use `nonzero` for that?
[05:48:33] <SnoopJ> it's not always "wrong" but most of the library is machinery to iterate for you, in vectorized ways
[05:49:48] <QuaternionsRock> So is there a better way to perform the action I just described?
[05:50:56] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[05:51:02] <SnoopJ> better than nonzero? I would probably do `np.argwhere(haystack == needle)[0]`, possibly with a .flat in there if I don't want shape-aware indices
[05:51:54] *** Joins: smeeagle (~smeeagle@host31-48-139-30.range31-48.btcentralplus.com)
[05:52:02] <SnoopJ> if the haystack were extremely large I might consider iterating, but I'd probably want to do it with nditer instead of naive iteration so that I could still get the benefits of vectorization over each chunk
[05:52:42] <QuaternionsRock> ughhh nditer sucks
[05:52:46] <SnoopJ> or if I wanted to just huck it into numba
[05:52:52] <QuaternionsRock> I had a feeling that'd be the right answer
[05:53:08] <SnoopJ> "right" or "wrong" is too reductive
[05:53:20] <SnoopJ> but if you're using naive iteration with ndarray, you basically have a really slow version of list()
[05:53:24] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[05:53:31] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[05:53:55] *** Joins: sgn (~sgn@user/sgn)
[05:54:12] <SnoopJ> sometimes "really slow" isn't slow enough to care, but this was the #1 thing I've seen creating slowdown in the numpy I saw people writing in grad school
[05:54:38] *** Joins: JordiGH (~jordi@user/jordigh)
[05:56:37] *** Joins: qpdb (~qpdb@user/qpdb)
[05:56:47] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[05:57:07] <SnoopJ> and usually not because of elaborate constrained problems that couldn't be vectorized, but because the author just wasn't aware of how much vectorization numpy was capable of
[05:57:24] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:57:39] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 256 seconds)
[05:57:50] *** brabrax_ is now known as brabrax
[05:58:06] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Quit: Client closed)
[05:59:20] <JordiGH> I need some ideas on how to solve a Celery problem in Django. I need to associate to every Celery task the Django user that initiated that task. I'd like to rewrite as little as possible. I'm thinking, maybe some kind of decorator for all Celery tasks? I think Celery tasks are turned into unevaluated promises by the @app.task decorator.
[06:00:11] <JordiGH> (First person who says, "why do you need to associate a user?" gets a hateful glare and will make me regret giving too much context to be nitpicked on.)
[06:00:11] *** Quits: thanatos_jj (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[06:00:56] <hexology> is this for logging or something?
[06:01:02] <JordiGH> This solution seems kind of close to what I want: https://stackoverflow.com/questions/46792488/passing-user-object-in-celery-using-django
[06:01:14] <hexology> it's been a long time since i actually used celery + django, but when i did, i generally didn't ever actually interact with the "celery" part
[06:01:14] <JordiGH> hexology: It's for passing in a user to every Celery task.
[06:01:17] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 252 seconds)
[06:01:39] *** Quits: victori (~victori@cpe-76-174-179-126.socal.res.rr.com) (Read error: Connection reset by peer)
[06:01:55] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[06:03:24] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:04:15] *** Joins: MinimotoMusashi (~MinimotoM@4.sub-174-246-172.myvzw.com)
[06:04:27] *** Quits: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) (Ping timeout: 256 seconds)
[06:04:55] <MinimotoMusashi> Hilo. Is it considered a bad idea to put imports below if __name__ == "__main__"?
[06:04:58] *** Joins: akmod (~akmod@c-73-228-115-212.hsd1.ut.comcast.net)
[06:06:02] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[06:06:54] <Pi-sistance> Im bored, the coding got too easy, never thought id say that
[06:07:49] <grym> MinimotoMusashi: it's usually not recommended, but it's not illegal
[06:07:51] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[06:08:26] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:09:13] <MinimotoMusashi> grym: I'll see if I can implement it differently, if not I'll keep them there, thank you!
[06:09:30] *** Joins: stdout (~stdout@50.115.255.72)
[06:10:41] <SnoopJ> QuaternionsRock, here's a very simple example of how slow naive (early-exiting!) iteration is compared with its vectorized counterpart on a two-core system: https://bpa.st/VSAA
[06:12:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[06:12:43] *** Joins: starz (starz@2001:41d0:8:4bd3::1)
[06:12:50] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[06:16:11] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[06:16:57] *** Joins: zlg (~zlg@user/zlg)
[06:19:36] *** Joins: parv (~quass@user/parv)
[06:20:22] *** launchd is now known as BuddyTheElf
[06:24:00] <JordiGH> Uhm, okay, so let's try this: how do I chain decorators into a single decorator?
[06:24:07] <JordiGH> I get confused by the nesting of functions.
[06:24:17] *** Quits: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul) (Ping timeout: 256 seconds)
[06:24:31] <JordiGH> First decorator adds the current user to the kwargs.
[06:24:56] <JordiGH> Second decorator is Celery @task decorator
[06:25:19] <JordiGH> Third decorator takes the current user from kwargs and sticks it into thread-local variables.
[06:25:51] <JordiGH> I guess I can write them as separate decorators like the example here: https://stackoverflow.com/a/46793923
[06:25:58] <JordiGH> But how would you write them as a single one?
[06:26:30] *** Quits: solrize (~solrize@user/solrize) (Ping timeout: 268 seconds)
[06:27:04] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[06:27:35] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:29:08] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[06:29:28] *** Joins: sgn (~sgn@user/sgn)
[06:30:44] *** Joins: RiFo (~RiFo@user/rifo)
[06:33:07] <nedbat> JordiGH: https://gist.github.com/nedbat/42e171625d3b249c4fe46565a9cbe621
[06:33:23] *** morrigan1 is now known as morrigan
[06:34:08] <JordiGH> Okily dokily, I think I know what to do.
[06:34:10] <JordiGH> Thanks ned.
[06:37:10] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[06:37:28] *** Quits: lastshell (~lastshell@user/lastshell) (Ping timeout: 264 seconds)
[06:38:18] <parv> nedbat, That was a clear, succinct way to explain. Thanks
[06:38:33] *** Quits: stdout (~stdout@50.115.255.72) (Remote host closed the connection)
[06:39:44] *** Joins: millido (~millido@84.210.150.128)
[06:41:57] *** Quits: smeeagle (~smeeagle@host31-48-139-30.range31-48.btcentralplus.com) (Quit: smeeagle)
[06:42:29] *** Joins: stdout (~stdout@50.115.255.72)
[06:43:07] <nicolas17> I was making a paste almost exactly like that and started doubting if I actually had the decorator order correct and started searching docs...
[06:47:31] *** Quits: superboot (~agentgasm@user/superboot) (Ping timeout: 256 seconds)
[06:48:54] *** Joins: superboot (~agentgasm@user/superboot)
[06:49:03] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[06:51:38] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[06:56:45] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[06:57:38] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:58:28] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 264 seconds)
[07:00:35] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[07:01:01] *** Quits: lionslicer (~lionslice@2804:d41:a7a6:1300:c53d:f6cc:4fb0:a4ca) (Remote host closed the connection)
[07:02:40] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[07:03:37] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[07:04:28] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 264 seconds)
[07:05:12] *** Joins: cyphase (~cyphase@user/cyphase)
[07:06:52] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[07:07:27] *** Joins: fluffyballoon (~user@131.93.208.196)
[07:07:27] *** Quits: fluffyballoon (~user@131.93.208.196) (Read error: Connection reset by peer)
[07:08:40] *** Quits: Barones (~Barones@2804:7f3:8987:f411:9733:6a6d:657c:356c) (Ping timeout: 264 seconds)
[07:10:08] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[07:10:26] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[07:10:40] *** Joins: sgn (~sgn@user/sgn)
[07:11:31] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 250 seconds)
[07:11:32] *** Quits: jbox (~jbox@user/jbox) (Read error: Connection reset by peer)
[07:12:08] *** Joins: ionface (~ionface@user/ionface)
[07:13:22] *** Quits: stdout (~stdout@50.115.255.72) (Ping timeout: 268 seconds)
[07:14:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:15:11] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:16:09] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Quit: Ping timeout (120 seconds))
[07:16:37] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[07:16:57] *** Joins: fikran (~fikran@user/fikran)
[07:17:07] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[07:18:18] *** Joins: maxtim (~maxtim__@c-71-228-128-153.hsd1.ga.comcast.net)
[07:19:49] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[07:20:01] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:4ce9:4994:46d4:5d53) (Read error: Connection reset by peer)
[07:20:43] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[07:20:45] *** Joins: stdout (~stdout@50.115.255.72)
[07:21:10] <maxtim> I have an html file with a table in it. I can use pandas to open it and create a DataFrame. I'd like to lastly use [xlsxwriter or something else] to merge certain cells, widen columns, etc. I'm having a hard time parsing the docs, though.
[07:21:16] *** Quits: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il) (Ping timeout: 264 seconds)
[07:21:23] *** Joins: nomic2 (~nomic@185.198.243.158)
[07:21:29] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[07:21:31] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[07:21:48] <hexology> maxtim: pandas itself doesn't really support excel-like cell merging
[07:22:03] <maxtim> okay, that answers that question
[07:22:12] <hexology> you might want to use openpyxl or xlsxwriter directly, which what pandas uses internally to interact with xslx files
[07:22:23] <hexology> those should give you more control
[07:22:26] <maxtim> ah
[07:22:55] <hexology> although in some situations like that in the past, i've just dumped the data to a csv and reformatted stuff by hand. so there was about 5 minutes of manual work at the end of a mostly-automated process
[07:23:07] <hexology> obviously that's no good if you need full automation, like an "export to excel" button
[07:24:13] <maxtim> well, I've already automated what normally takes 6 hours down to an ugly spreadsheet.
[07:24:16] *** Quits: nomic (~nomic@185.217.117.132) (Ping timeout: 264 seconds)
[07:24:46] <hays> advice: contain horribleness
[07:25:23] <maxtim> I'm hoping to slap some spit and polish on it and just print this dumb doc monthly
[07:25:24] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[07:25:35] <Pi-sistance> can I select the element in a tuple output from a function?
[07:25:49] <Pi-sistance> one of the elements of the tuple I mean
[07:25:54] <KirkMcDonald> Pi-sistance: You can index the tuple.
[07:26:04] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 264 seconds)
[07:26:04] <hexology> maxtim: yeah at that point i wouldn't spend too long trying to get it perfect. just dump a csv and copy/paste data into a pretty template
[07:26:07] <KirkMcDonald> It's just a sequence, like a list.
[07:26:12] <hexology> or use a formula to pull it in from the csv
[07:26:56] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 268 seconds)
[07:27:45] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:27:53] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:edef:5ef4:644d:7d12)
[07:28:28] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:edef:5ef4:644d:7d12) (Client Quit)
[07:28:42] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:edef:5ef4:644d:7d12)
[07:29:55] *** Joins: kdc (~kdc@196.211.197.159)
[07:29:56] *** nomic2 is now known as nomic
[07:32:09] *** Joins: mh3f_ (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[07:32:41] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[07:32:50] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:53] *** Joins: Vonter (~Vonter@user/vonter)
[07:37:28] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 264 seconds)
[07:41:21] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[07:42:30] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[07:42:43] *** Quits: pankid_ (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:43:46] *** Joins: pankid (~quassel@pankid.club)
[07:44:22] *** Quits: maxtim (~maxtim__@c-71-228-128-153.hsd1.ga.comcast.net) (Quit: Leaving)
[07:45:52] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 264 seconds)
[07:47:29] *** Quits: julia (~quassel@user/julia) (Quit: No Ping reply in 180 seconds.)
[07:48:47] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[07:51:22] *** Joins: bandit_za (~bandit@164.160.119.212)
[07:53:29] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 252 seconds)
[07:54:57] *** Quits: sreve (~quassel@p549d7168.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:55:04] *** Joins: sreve_ (~quassel@p4ff44be4.dip0.t-ipconnect.de)
[07:55:47] *** Quits: l4yer (~l4yer@2a07-a880-3101-1051-a922-bb49-135a-4393.pool6.ovpn.com) (Remote host closed the connection)
[07:58:50] *** Joins: l4yer (~l4yer@2a07-a880-3101-1052-a135-751a-e6a7-8249.pool6.ovpn.com)
[07:59:09] *** Joins: dld (~dld@73.61.8.208)
[07:59:16] *** Quits: MinimotoMusashi (~MinimotoM@4.sub-174-246-172.myvzw.com) (Quit: leaving)
[08:02:30] *** Quits: aphysically (~aphysical@user/aphysically) (Quit: aphysically)
[08:02:52] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[08:04:00] *** Joins: aphysically (~aphysical@user/aphysically)
[08:04:35] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[08:05:56] *** Parts: nicolas17 (~nicolas@KDE/nalvarez) (Konversation terminated!)
[08:06:52] *** Quits: dld (~dld@73.61.8.208) (Ping timeout: 264 seconds)
[08:07:28] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 264 seconds)
[08:08:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:08:30] *** Joins: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51)
[08:08:38] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[08:08:49] <orbisvicis> if I have a numpy linspace array - for example x,y coordinates evenly spaced in x - are there helper methods to quickly calculate the index from an x value?
[08:09:07] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[08:09:53] <aphysically> shouldn't it just be multiplication?
[08:10:05] <aphysically> (by a constant integer)
[08:10:20] <aphysically> possibly with a shift
[08:10:32] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[08:10:36] <SnoopJ> division if it's computing the index from the value, but yea
[08:10:40] <Repiphany> Bisect if you're lazy and just want to bruteforce search
[08:10:53] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[08:11:33] <Repiphany> But it's effectively just linear interpolation from the endpoints and number of points
[08:11:43] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[08:11:47] *** Joins: sgn_ (~sgn@user/sgn)
[08:13:17] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[08:13:59] <InPhase> Don't forget to subtract 1 from the point count.  It's interpoint spaces that matter.
[08:15:14] <orbisvicis> ^ it might be simple, but also error-prone, which is why I ask
[08:15:44] *** Quits: stdout (~stdout@50.115.255.72) (Quit: Leaving)
[08:15:45] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-bc7b-beb0-653c-822c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[08:15:50] *** Joins: ionface_ (~ionface@user/ionface)
[08:15:52] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 264 seconds)
[08:16:46] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:17:41] *** Quits: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51) (Ping timeout: 252 seconds)
[08:18:47] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[08:20:27] *** Quits: ionface_ (~ionface@user/ionface) (Ping timeout: 256 seconds)
[08:20:30] *** Joins: ionface (~ionface@user/ionface)
[08:22:10] *** Quits: fdgfe (~fdgfe@178.49.152.151) (Ping timeout: 256 seconds)
[08:22:47] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:24:48] *** Quits: esv (~esv@216.237.228.11) (Remote host closed the connection)
[08:25:17] *** Joins: xah37 (~xah37@user/xah37)
[08:25:44] <queue-> is there a really good python lib to spot out nudity in images
[08:26:11] <queue-> i want to mitigate children posting child porn on my image server which seems to have grown quite popular
[08:26:16] <queue-> i had to shut it down temporarily.
[08:26:45] <queue-> im trying to do this without moderating
[08:26:47] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[08:27:14] <queue-> thousands of visits a day, i cant risk it.
[08:28:04] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[08:29:59] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[08:30:36] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[08:31:11] *** Joins: djhankb (~djhankb@208.113.164.68)
[08:31:28] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 264 seconds)
[08:33:17] <BrenBarn> gonna be tough to do that without moderating I think
[08:33:19] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:33:54] <hexology> are there any paid services for that kind of thing
[08:34:10] <hexology> i imagine that faang & friends are very good at it. hopefully it's not too expensive for a small project/business
[08:34:26] <hexology> or maybe they're not good at it, but they just hire a lot of moderators to keep up the thin illusion
[08:35:02] <orbisvicis> does the server need anonymous unauthenticated access?
[08:35:48] *** Quits: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:854e:d334:a63f:e8ed) (Quit: Client closed)
[08:36:44] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[08:38:12] *** Joins: HiddenHyde (~HiddenHyd@user/hidden-hyde/x-6930285)
[08:38:19] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[08:40:04] <parv> queue-, Ask Apple, they might be able to help
[08:40:07] *** Parts: xah37 (~xah37@user/xah37) (Leaving)
[08:40:16] <queue-> lol
[08:40:17] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 256 seconds)
[08:40:21] <queue-> i dont use Apple anything
[08:40:48] <queue-> ahh faang
[08:42:12] <parv> FAANG? Old one. Should have been MAANA by now..
[08:42:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[08:46:31] *** Quits: bandit_za (~bandit@164.160.119.212) (Ping timeout: 256 seconds)
[08:48:19] *** Quits: d00gy (~d00gy@user/d00gy) (Quit: WeeChat 2.3)
[08:49:07] *** sgn_ is now known as sgn
[08:50:40] *** Quits: arandomcomrade (~arandomco@user/arandomcomrade) (Quit: Leaving)
[08:52:05] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:53:04] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[08:53:36] *** Joins: han-solo (~hanish@user/han-solo)
[08:53:47] *** Quits: HiddenHyde (~HiddenHyd@user/hidden-hyde/x-6930285) (Changing host)
[08:53:47] *** Joins: HiddenHyde (~HiddenHyd@user/hiddenhyde)
[08:56:40] *** Quits: y1n (~y1n@178.165.161.31.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[08:56:44] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[08:56:58] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 268 seconds)
[08:57:09] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[08:57:16] *** Quits: mh3f_ (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 264 seconds)
[08:58:33] *** Joins: lotsofpi1 (~lotsofpiz@2601:1c0:8781:2bf0::7bca)
[09:01:34] *** Quits: HiddenHyde (~HiddenHyd@user/hiddenhyde) (Quit: Leaving)
[09:03:53] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[09:03:58] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[09:05:19] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[09:06:50] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:08:14] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[09:08:27] *** Joins: grayn (~Thunderbi@130.95.254.164)
[09:08:28] *** Quits: lotsofpi1 (~lotsofpiz@2601:1c0:8781:2bf0::7bca) (Remote host closed the connection)
[09:08:51] *** Joins: p-i- (~Ohmu@223.206.149.59)
[09:09:52] *** Joins: HiddenHyde (~Hidden_Hy@user/hiddenhyde)
[09:10:19] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[09:12:01] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 256 seconds)
[09:14:17] *** Quits: Bakunin (~Lindis@user/lindis) (Remote host closed the connection)
[09:16:04] *** Quits: grooverman_ (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[09:16:21] *** Joins: grooverman (~grooverma@177.95.12.14)
[09:16:41] *** Joins: buzzard (~quassel@82.102.22.237)
[09:16:55] *** Joins: teut (~teut@182.68.254.204)
[09:18:47] *** Quits: Cyp_ (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[09:19:06] *** Joins: Cyp_ (~cyp@213.237.85.9)
[09:21:36] <buzzard> i'm setting a (novice) friend up w/ python (windows) tomorrow so he can try out advent of code.  is 3.10.0 foolproof enough for him to use that or should i set him up with 3.9 to avoid any headaches?
[09:23:26] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:23:40] *** Quits: nomic (~nomic@185.198.243.158) (Quit: Leaving)
[09:24:25] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[09:24:29] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[09:25:23] <teut> there are lot of new features in v10
[09:25:25] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:25:42] <teut> the switch statement for instance
[09:26:18] *** Joins: fikran (~fikran@user/fikran)
[09:26:26] *** Joins: daoudr (~daoudr@2a02:1205:c690:ca10:843a:6e21:9631:a11f)
[09:27:24] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[09:27:34] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Remote host closed the connection)
[09:27:54] <han-solo> the `match`, right ?
[09:27:54] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[09:27:58] *** Joins: bninja (~bloodninj@user/bloodninja)
[09:28:10] <han-solo> i'm not sure if there's a `switch` yet
[09:28:28] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 264 seconds)
[09:29:12] <han-solo> buzzard: i think, 3.10 should be fine
[09:29:17] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (Quit: WeeChat 3.3)
[09:29:38] *** Quits: hwrd (sid64402@id-64402.lymington.irccloud.com) ()
[09:29:40] *** Joins: manti7 (~manti7@176.10.104.94)
[09:30:09] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[09:31:04] *** Quits: alxndr (~alexander@ybti.net) (Remote host closed the connection)
[09:31:19] *** Joins: stranac (~stranac@195.29.239.126)
[09:31:20] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[09:31:27] <buzzard> teut, han-solo: thanks.  i only ask because i had to upgrade pip in the venv in order to install numpy (i chose a random lib as a test).  i don't even expect my buddy to need anything outside of the standard libs; just being conservative since he's not going to gain anything by using 3.10 over 3.9, but i can't see the harm in using the latest if it is squared away
[09:31:28] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Ping timeout: 264 seconds)
[09:31:41] *** Joins: grooverman_ (~grooverma@177.95.12.14)
[09:32:17] <buzzard> upgrading pip is no big deal, but he's nearly 100% noob -- i think he took one course that involved coding for his major, and that was in friggin java
[09:32:47] <teut> https://docs.python.org/3/whatsnew/3.10.html#syntax-and-operations
[09:32:55] *** Joins: alxndr (~alexander@ybti.net)
[09:34:01] <teut> if it was java 8 then good otherwise he will eat your brains
[09:34:03] <han-solo> buzzard: i make a habit of `python3 -m venv .venv && .venv/bin/pip install -U pip wheel`
[09:34:07] <teut> they*
[09:34:32] <han-solo> buzzard: in windows, you might have to `.venv/Scripts/python -m pip install ...`
[09:34:42] <buzzard> teut: that's a pretty powerful/cool switch.  neat
[09:35:04] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 264 seconds)
[09:35:11] <teut> han-solo is a js man now ;(
[09:35:53] <buzzard> han-solo: nah, i'm going to add the base install to his path.  i just tested out python's default install/venv handling for the first time in years so that i can help him out.  i usually don't use windows and i usually do use conda.
[09:35:55] <han-solo> i'm trying to learn ':)
[09:36:15] <han-solo> buzzard: Sure
[09:36:15] <teut> oh sorry, yes I meant match han-solo
[09:38:03] <buzzard> vscode handles environment activation seamlessly if one is using pyenv, so i'm sure my buddy will be all set by simply choosing the right env by clicking on the statusbar
[09:38:06] *** Joins: SteveR (~SteveR@192.146.154.3)
[09:38:25] *** Joins: hwrd (aa272caead@2604:bf00:561:2000::137)
[09:38:35] <buzzard> meeting him for coffee/lunch/beer tomorrow so he can get set up before his kids get home from school :P
[09:39:09] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[09:39:10] <buzzard> he's primarily interested in learning a bit about this stuff so he can help his kids out if/when they ask/need
[09:39:24] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[09:39:29] <han-solo> cool 👍
[09:39:30] *** Quits: grayn (~Thunderbi@130.95.254.164) (Read error: Connection reset by peer)
[09:39:47] *** Joins: grayn (~Thunderbi@130.95.254.164)
[09:39:47] <buzzard> anywho i'll just put 3.10 on his system and provide support if he needs it, thank you all very much
[09:41:27] *** Quits: faceface (~faceface@user/faceface) (Quit: Lost terminal)
[09:42:56] <SteveR> is there any alternatives for using Futures object which is there in java to Python?
[09:43:29] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 252 seconds)
[09:43:45] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[09:44:14] *** Joins: grayn1 (Thunderbir@gateway/vpn/protonvpn/grayn)
[09:44:19] *** Quits: grayn (~Thunderbi@130.95.254.164) (Ping timeout: 256 seconds)
[09:44:19] *** grayn1 is now known as grayn
[09:44:28] <han-solo> SteveR: https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.submit # seems similar ?
[09:44:30] <teut> coroutines has futures
[09:44:54] <SteveR> han-solo what is the use of future object in java.. or coroutines in Python
[09:45:00] <SteveR> could you tell me an usecase please
[09:45:03] <SteveR> teut
[09:46:09] <han-solo> SteveR: i was assuming you'd know what Future is in java, but from a quick glance it seems like the awaitable in python
[09:46:10] *** Quits: delvian (~delvian@41.13.224.10) (Read error: Connection reset by peer)
[09:46:28] <han-solo> or a Promise in js, if you are familiar with that
[09:46:30] <SteveR> sorry i am a beginner
[09:46:32] *** Quits: jdmark (~jdmark@097-102-095-007.res.spectrum.com) (Ping timeout: 240 seconds)
[09:46:38] <teut> you can wait for a function to finish through the await
[09:46:42] *** Joins: delvian (~delvian@41.13.224.10)
[09:46:54] <SteveR> thats similair to an async right?
[09:47:02] <teut> yes
[09:47:08] <SteveR> what is the difference
[09:47:26] *** Joins: xkuru (~xkuru@user/xkuru)
[09:47:27] <SteveR> does it enhance the performance or reduce the latency or anything during a http transaction
[09:47:49] <teut> it avoids blocking the code
[09:47:51] <han-solo> it lets one do multiple things without blocking...
[09:48:13] <teut> so you run a function little, then run another function a little in a cycle
[09:48:36] <teut> you do this through the use of "yield"
[09:48:43] <teut> lazy evaluation
[09:48:47] <SteveR> that's what async also does i believe right..
[09:49:09] <teut> ya, this is the iterator patter indeed
[09:49:15] <teut> pattern
[09:49:49] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[09:50:16] <teut> future module has  callbacks too
[09:50:27] <teut> async , I dont think so
[09:51:37] <SteveR> i see
[09:51:46] <han-solo> SteveR: https://realpython.com/async-io-python/#where-does-async-io-fit-in # should be a good read
[09:52:10] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[09:52:28] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 264 seconds)
[09:53:32] <teut> you may use a    while condition:  await something     for callback , but you can use concurrent futures module to schedule a callback function which runs every 5 minnutes
[09:53:44] *** Joins: sgn (~sgn@user/sgn)
[09:53:51] <teut> you may use a    while condition:  await something     for callback     in async *
[09:54:56] <SteveR> teut does it help in request collapsing?
[09:55:06] <teut> https://www.youtube.com/watch?v=MCs5OvhV9S4  you can watch david beazely
[09:55:27] *** Quits: HiddenHyde (~Hidden_Hy@user/hiddenhyde) (Quit: Leaving)
[09:55:32] <SteveR> say when one person makes a request to the database,and other person needs the same request.  eg:  select * from emp where id='1'. now a db query already got fired. you would want to avoid firing the same query. instead of firing another query can we return the future object? do you think this will help?
[09:55:44] <teut> I am sitting on various channels here , and looked at models of this in js, python and I still feel confusion
[09:56:17] *** Joins: comlord (~Thunderbi@121.227.116.10)
[09:56:23] *** Joins: HiddenHyde (~Hidden_Hy@user/hiddenhyde)
[09:56:54] <SteveR> teut what about my db usecase? does future object used commonly for such usecase?
[09:57:05] *** Quits: HiddenHyde (~Hidden_Hy@user/hiddenhyde) (Client Quit)
[09:57:08] <teut> ya I m trying to understand it , hold on
[09:57:38] <SteveR> ok
[09:57:58] *** Joins: HiddenHyde (~Hidden_Hy@user/hiddenhyde)
[09:58:00] *** Joins: comlord1 (~Thunderbi@121.227.116.10)
[09:58:39] <teut> probably you can cache it
[09:58:48] <teut> the db query
[09:59:57] <SteveR> using a future object?
[10:00:09] *** Joins: PJBoy (~PJBoy@user/pjboy)
[10:00:22] <teut> why a future, using a gateway , I would say
[10:00:24] *** Joins: dvx (~dvx@5.181.92.64)
[10:00:51] <SteveR> what is the use of future object here?
[10:00:52] *** Quits: comlord (~Thunderbi@121.227.116.10) (Ping timeout: 264 seconds)
[10:00:52] *** comlord1 is now known as comlord
[10:01:05] <SteveR> im trying to connect the dots
[10:01:29] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[10:01:57] <teut> if your have a list of queries then futures are useful
[10:02:17] <teut> so you got 10 queries and the db executes 1 and yields
[10:02:40] <teut> then you get the data , instead of waiting for all 10 commands to execute
[10:03:16] <teut> this is what the await thing works for, may be useful in case of independent queries
[10:04:55] <teut> oh wait , I understood you now, so you want to return a future to the second user that the query is already being performed
[10:05:18] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[10:05:24] <teut> no it doesnt work like that
[10:06:16] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[10:06:55] *** Quits: HiddenHyde (~Hidden_Hy@user/hiddenhyde) (Quit: Leaving)
[10:08:28] *** Joins: HiddenHyde (~Hidden_Hy@user/hiddenhyde)
[10:09:00] <han-solo> SteveR: https://bpa.st/PCXQ # see the 3 (bad) examples and if it makes sense
[10:09:01] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:10:21] <SteveR> han-solo https://youtu.be/mRpmf5pNHqY?t=946
[10:10:28] <SteveR> could you see from timestamp 15:45
[10:10:52] <SteveR> the author here talks about the db example i have mentioned
[10:13:04] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 260 seconds)
[10:13:28] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[10:14:04] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[10:14:06] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:15:24] <teut> why dont you try asking the sql guys
[10:15:30] <teut> #sql
[10:15:32] <SteveR> sure
[10:16:21] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[10:16:28] <teut> #mysql
[10:16:46] *** Joins: ano (~ano@user/ano)
[10:16:51] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-ddb3-cd8f-aeab-5219.res6.spectrum.com) (Quit: jarthur)
[10:17:08] <teut> from what I understand once a query comes you should return a future to the user
[10:17:09] <han-solo> SteveR: i don't get the "making multiple people wait on a future" thing they are explaing, maybe because i don't have much experience with async things
[10:17:12] *** Joins: OPK (~OPK@user/opk)
[10:17:27] <SteveR> hmm..
[10:17:39] <teut> a future is what a function which will show its output later
[10:17:59] <teut> so you extract the value out of future in a while loop
[10:17:59] <han-solo> SteveR: but the point is concurrency
[10:18:17] <teut> while(future.status == "pending")  check future
[10:18:23] <teut> else  getvalue
[10:19:01] <teut> so you look into the cache and if query is present then just throw back the future to all users
[10:19:05] <han-solo> teut: why do one need to pool it ? can't they just `await awaitable` # ?
[10:19:09] <han-solo> poll*
[10:21:03] <teut> async func(query): await postrgres_runner(query)    ;
[10:21:04] <teut>  d = {"SELECT * FROM MYTABLE:  func}
[10:21:17] <teut> I mean something like this
[10:22:21] <teut> you mean*  han-solo
[10:22:32] <teut> in this case its not a future
[10:22:34] *** Joins: Tas-sos (~Tas-sos@ppp005054041212.access.hol.gr)
[10:22:44] <teut> so you query the db again and again
[10:23:22] <teut> if you had used a future on  success the function would had been replaced by the  value
[10:24:18] <teut> so you  would have    {d:#some long string"}    once future is resolved
[10:24:22] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:24:31] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[10:24:47] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[10:24:57] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Ping timeout: 265 seconds)
[10:25:09] <Helenah> querying DBs again and again is a bad idea unless you have to.
[10:25:24] <SteveR> thanks teut
[10:25:27] *** Joins: supay (adas@adas.shelltalk.net)
[10:25:53] <teut> I dont think I told it well, like I said I still feel cnonfusion
[10:25:58] <teut> confusion*
[10:26:52] *** Joins: atlas (~jbox@user/jbox)
[10:27:16] <SteveR> im continuing the discussion on #sql
[10:27:26] <Helenah> Plus... when you query DBs again and again you could be causing API abuse.
[10:27:45] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:27:52] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 264 seconds)
[10:28:55] <Helenah> "Just saying"
[10:29:03] <SteveR> sure..
[10:29:13] <Helenah> :)
[10:29:20] <SteveR> what is the equivalent of future object in Python
[10:30:00] *** atlas is now known as jbox
[10:30:38] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[10:32:12] <teut> not sql  but mysql
[10:32:23] <teut> sql got only 4 people SteveR
[10:33:52] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[10:33:52] *** Quits: orbisvicis (~orbisvici@user/orbisvicis) (Ping timeout: 264 seconds)
[10:35:13] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[10:35:15] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:edef:5ef4:644d:7d12) (Quit: stewie925)
[10:35:44] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[10:35:44] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Read error: Connection reset by peer)
[10:35:48] *** Joins: chele (~chele@user/chele)
[10:36:27] <SteveR> sure asked in mysql as well
[10:36:34] *** Joins: mrwick (~mrwick@user/mrwick)
[10:38:34] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[10:38:45] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Quit: Leaving)
[10:39:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:39:52] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 264 seconds)
[10:39:53] *** Quits: OPK (~OPK@user/opk) (Remote host closed the connection)
[10:40:50] <jinsun_> <SteveR> "what is the equivalent of future..." <- not sure what you mean by "future object", but python has https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future and https://docs.python.org/3/library/asyncio-future.html#asyncio.Future
[10:41:09] <jinsun_> which one you need depends on what you are doing
[10:41:36] *** Joins: Lazenca (~lazenca@user/lazenca)
[10:41:53] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[10:42:07] *** Joins: aniketgm (~Aniket@49.36.107.115)
[10:42:55] <willow> teut: that david beazely video is awesome thanks for posting the link
[10:46:04] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:46:28] <teut> david beazely has so much stuff on this
[10:48:07] <teut> https://www.youtube.com/watch?v=VUT386_GKI8&t=771s  this one is a good one too, but for people fond of  interpreters
[10:48:16] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 264 seconds)
[10:48:56] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Remote host closed the connection)
[10:49:15] *** Joins: luigibu (~luigi@80.30.201.209)
[10:49:34] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[10:50:14] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[10:51:52] *** Quits: comlord (~Thunderbi@121.227.116.10) (Ping timeout: 264 seconds)
[10:52:48] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[10:54:12] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:914a:9dba:6dc1:3d38)
[10:54:23] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:56:16] *** Joins: kib (~kib@user/kib)
[10:56:49] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[10:57:25] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:58:18] *** Joins: seednode (~seednode@user/seednode)
[10:58:34] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[10:59:04] *** Joins: jdmark (~jdmark@172.58.175.121)
[11:01:35] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 252 seconds)
[11:01:36] *** Joins: comlord (~Thunderbi@121.227.116.10)
[11:04:08] *** Joins: upsala (~zcb@185.213.155.252)
[11:04:20] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:a0d4:385b:b8e7:7194)
[11:05:34] *** Joins: Cyp (~cyp@213.237.85.9)
[11:05:47] *** Quits: Cyp_ (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[11:07:25] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Remote host closed the connection)
[11:07:30] *** Joins: guenhael1 (Thunderbir@gateway/vpn/protonvpn/guenhael)
[11:08:11] *** Quits: comlord (~Thunderbi@121.227.116.10) (Ping timeout: 256 seconds)
[11:08:15] *** Joins: rendar (~rendar@user/rendar)
[11:08:57] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[11:08:58] *** Joins: mh3f_ (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[11:09:10] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[11:09:49] *** guenhael1 is now known as guenhael
[11:09:59] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:10:13] *** Quits: aniketgm (~Aniket@49.36.107.115) (Quit: leaving)
[11:11:20] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[11:12:34] *** Quits: teut (~teut@182.68.254.204) (Quit: Client closed)
[11:13:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[11:14:36] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[11:15:03] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[11:16:07] *** Quits: pankid (~quassel@pankid.club) (Ping timeout: 256 seconds)
[11:16:26] *** Joins: pankid (~quassel@pankid.club)
[11:18:02] <koopman> Hi all, I’m trying to write a dict to csv but the results come back with (‘ item ‘) (‘ item2 ‘) how do you remove the (‘ ‘) from the dict writing rows for csv? Ignore the indentation but here’s the code https://dpaste.org/5hDT
[11:18:40] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:18:42] *** Joins: palasso (~palasso@user/palasso)
[11:18:48] <supay> koopman, ignore the indentation? :O
[11:19:02] <supay> tell that to the interpreter
[11:19:26] *** Joins: savolla (~savolla@84.44.28.28)
[11:19:30] <koopman> My paste removed the indentation lol
[11:19:48] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[11:21:02] <supakeen> It's a bit hard to read, maybe you can use another pastebin that doesn't remove the indentation for you.
[11:21:11] <supakeen> (I'm not familiar that dpaste.org does that though)
[11:22:08] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:22:19] <supakeen> But can you at least add a `print(repr(temp))` between line 17 and 18 and show us the output?
[11:22:20] <han-solo> i just tried, it doesn't remove indentation
[11:22:55] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Client Quit)
[11:23:01] <supay> why would an editor do that :D
[11:23:33] <koopman> @supay: https://www.jdoodle.com/iembed/v0/kop
[11:23:40] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[11:23:56] <supay> much better
[11:24:03] *** Quits: Jefren1 (~Jefren@208.104.190.60) (Ping timeout: 256 seconds)
[11:24:52] *** Joins: bandit_za (~bandit@102-65-138-35.dsl.web.africa)
[11:25:09] <supay> but still very malformatted. is this your actual code?
[11:25:41] *** Quits: sunarch (uid526836@user/sunarch) (Quit: Connection closed for inactivity)
[11:25:47] <supakeen> Can you do the repr stuff, there's nothing in the code perse that would add brackets and quotes.
[11:25:51] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[11:26:06] <koopman> https://www.jdoodle.com/iembed/v0/kor
[11:26:22] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:26:30] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:26:32] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[11:26:53] <supay> koopman, what's up with line number 5
[11:27:11] <supakeen> They have typographic quotes all over the place (see here in IRC as well), and missing quotes on top of that.
[11:27:24] <supakeen> So this is not the actual code as ran, but the repr would help more.
[11:27:44] <supay> yep!
[11:27:46] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:27:58] *** Parts: kib (~kib@user/kib) ()
[11:28:05] <koopman> @supay: here you go https://www.jdoodle.com/iembed/v0/kot
[11:28:37] <supay> are you even clicking on 'execute' every time you post new code?
[11:28:51] <supay> it'll tell you what's wrong.. just listen to it
[11:29:12] <koopman> Sorry copying and pasting to email it to myself removed some formatting
[11:29:35] <koopman> It won’t execute without the json file but I’m hopi g it may be enough to see
[11:30:25] <parv> koopman, csv module has some QUOTE_* constantst that you could try : https://docs.python.org/3/library/csv.html?highlight=csv
[11:30:27] <supay> from an email? :D
[11:30:56] *** Quits: daoudr (~daoudr@2a02:1205:c690:ca10:843a:6e21:9631:a11f) (Quit: Leaving)
[11:32:09] <koopman> Thanks @parv  and @supay yep office365, try it copy and paste code into it removes all kind of stuff. Copied it to email to send home as device at another location, I’m redoing it now on the laptop
[11:32:31] <supay> quick re question. i'm trying to make my search pattern dynamic from a generated string. #1 here works, but #2 doesn't.. what am i doing wrong? https://0paste.com/340914
[11:32:39] *** Joins: grooverman (~grooverma@177.95.12.14)
[11:33:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[11:34:15] *** Quits: buzzard (~quassel@82.102.22.237) (Ping timeout: 256 seconds)
[11:34:28] *** Quits: grooverman_ (~grooverma@177.95.12.14) (Ping timeout: 264 seconds)
[11:35:39] *** Joins: fikran (~fikran@user/fikran)
[11:37:18] *** Joins: daoudr (~daoudr@2a02:1205:c690:ca10:843a:6e21:9631:a11f)
[11:37:20] *** Quits: bbbbbb (~peppbel@c-73-221-241-101.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[11:37:44] <parv> What are you trying to match, literal "|"?
[11:40:51] *** JerryXia1 is now known as JerryXiao
[11:40:54] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[11:40:57] *** Joins: kosh (~kosh@user/kosh)
[11:41:46] <supay> parv, the strings separated by | in regex_string
[11:43:45] *** Joins: arinov (~arinov@213.194.126.155)
[11:43:46] <jinsun_> so why are you escaping it?
[11:44:44] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[11:44:53] <jinsun_> when you escape it will try to match the entire thing, your input will have to literally have all the cases including the pipe in between
[11:45:00] *** Joins: Cyp (~cyp@213.237.85.9)
[11:45:48] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:48:25] *** Joins: greedom (~greedom@p200300de67074a00ee57acfb88edbb8a.dip0.t-ipconnect.de)
[11:48:59] *** Quits: onichomp (~onichomp@2806:264:4404:80d9:d074:c875:9b0d:4203) (Read error: Connection reset by peer)
[11:49:38] *** Joins: onichomp (~onichomp@2806:264:4404:80d9:d074:c875:9b0d:4203)
[11:50:03] <supay> ahh!
[11:50:50] *** Quits: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) (Read error: Connection reset by peer)
[11:50:52] <supay> jinsun_ , no regex = re.compile(r'(\b(' + regex_string + ')\b(\s*(' + regex_string + ')\b)*)', re.I) isn't working as expected either
[11:51:52] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[11:52:04] <parv> supay, for one you missed "r" in ')\b(\s*(' & ')\b)*)'
[11:52:16] <parv> ... as in r')\b)*)'
[11:52:19] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:52:22] *** Quits: greedom (~greedom@p200300de67074a00ee57acfb88edbb8a.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:52:28] *** Quits: gitly (~gitly@185.69.145.201) (Ping timeout: 264 seconds)
[11:52:30] <supay> ohh, right!
[11:52:35] *** Joins: frost (~frost@user/frost)
[11:52:47] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[11:53:00] <supay> yep, works as expected! thanks a ton parv and jinsun_ :)
[11:53:14] *** Quits: jbox (~jbox@user/jbox) (Read error: Connection reset by peer)
[11:53:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:54:13] *** Joins: gitly (~gitly@185.69.145.201)
[11:54:31] <parv> supay, You could escape only the user input if you want to: input =  '|'.join([ re.escape( x ) for x in input_list ] )
[11:54:57] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[11:55:04] <supay> ah nice, this is clean! will give it a spin
[11:55:06] <supay> thank you
[11:57:05] <koopman> Isn’t there online regex creators @supay
[11:58:46] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[11:59:45] *** Quits: gitly (~gitly@185.69.145.201) (Ping timeout: 256 seconds)
[12:00:09] *** Quits: newpy (~newpy@2601:280:4381:1390:8d8d:7e2a:beea:18db) (Quit: Leaving)
[12:00:20] *** Quits: SteveR (~SteveR@192.146.154.3) (Ping timeout: 256 seconds)
[12:01:05] <supay> koopman, yeah, probably in my email client. i'll give it a go next time, thanks
[12:01:17] *** Joins: dave2F (~zncAdmin@86.100.240.130)
[12:01:19] *** Joins: vladoski (~vladoski@2001:8a0:7ae1:4400:2110:298f:2e6:cc12)
[12:01:32] <parv> I have fuzzy memory seeing one. Nonetheless I found in my bookmarks: https://github.com/noprompt/frak ; https://github.com/noprompt/frak ; https://github.com/devongovett/regexgen
[12:01:36] *** Joins: gitly (~gitly@85.255.233.18)
[12:02:00] <koopman> @supay: client online :P
[12:02:23] <supay> parv, ooo, these are nice. very interesting.
[12:03:43] *** Quits: savolla (~savolla@84.44.28.28) (Quit: Client closed)
[12:03:46] *** Joins: kek_ (~kek_@2a02:168:200f:1f10:dcde:2774:1301:baad)
[12:03:47] <kek_> hi
[12:03:56] *** Joins: weedmic (~weedmic@188.120.139.53)
[12:04:16] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[12:04:18] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[12:05:06] <parv> Sorry for the duplicate, meant to be https://github.com/pemistahl/grex instead
[12:08:04] *** dcaro_away is now known as dcaro
[12:08:49] *** Quits: gitly (~gitly@85.255.233.18) (Ping timeout: 256 seconds)
[12:08:56] *** Joins: gitly2 (~gitly@185.69.145.201)
[12:09:16] <kek_> how can I create an empty h5py data set without first reading the file?
[12:10:58] <parv> supay, Note that I have only collected the links; did not use, nor had verified their worth
[12:11:36] *** Quits: kolcon (~kolcon@v.kolouch.org) (Quit: WeeChat 3.3)
[12:12:13] *** Quits: dave2F (~zncAdmin@86.100.240.130) (Ping timeout: 256 seconds)
[12:13:56] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[12:16:53] <jinsun_> kek_: https://docs.h5py.org/en/stable/quick.html#appendix-creating-a-file ?
[12:17:26] *** Quits: dre (~dre@2001:8003:c932:c301:ca62:53a2:f102:5ef0) (Quit: Leaving)
[12:17:34] *** Quits: onichomp (~onichomp@2806:264:4404:80d9:d074:c875:9b0d:4203) (Read error: Connection reset by peer)
[12:20:01] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[12:20:13] *** Joins: jay-m126 (~jay-m@154.72.167.128)
[12:20:17] *** Joins: jay-m126_ (~jay-m@154.72.167.128)
[12:20:58] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[12:21:10] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:21:16] *** Joins: RasnCain (~rasncain@gw1.cox.com)
[12:22:58] <kek_> jinsun_, doesn't help me but nevermind, I solved it in a different way which seems fine too
[12:23:02] <kek_> thanks
[12:25:58] *** Joins: zaquest (~notzaques@5.130.79.72)
[12:27:24] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[12:30:02] *** Quits: km (znc@user/km) (Remote host closed the connection)
[12:30:08] *** Quits: gitly2 (~gitly@185.69.145.201) (Ping timeout: 252 seconds)
[12:30:51] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:30:55] *** Joins: ham5urg (~ham5urg@p200300d167435800d9ca1ce4e9d31feb.dip0.t-ipconnect.de)
[12:31:31] *** Joins: km (znc@user/km)
[12:31:47] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 252 seconds)
[12:32:26] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[12:34:07] *** Joins: aniketgm (~Aniket@49.36.107.115)
[12:34:29] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:35:05] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 252 seconds)
[12:36:08] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[12:36:23] *** Quits: weedmic (~weedmic@188.120.139.53) (Quit: Konversation terminated!)
[12:37:47] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[12:37:57] *** Joins: mactron (~mactron@APN-123-251-59-gprs.simobil.net)
[12:37:58] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[12:40:02] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:41:41] *** Quits: Tas-sos (~Tas-sos@ppp005054041212.access.hol.gr) (Ping timeout: 252 seconds)
[12:42:10] *** Joins: shad (~shad@user/shad)
[12:42:28] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[12:43:42] *** Joins: amanjhalmat12 (~amanjhalm@212.237.123.164)
[12:44:55] *** Joins: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk)
[12:45:24] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[12:46:11] *** Quits: mactron (~mactron@APN-123-251-59-gprs.simobil.net) (Quit: Leaving)
[12:48:31] *** Joins: Tas-sos (~Tas-sos@46.198.212.72)
[12:49:23] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[12:50:34] *** Joins: mactron (~mactron@APN-123-251-59-gprs.simobil.net)
[12:53:04] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 264 seconds)
[12:54:16] *** Joins: mactron_ (~mactron@APN-123-251-59-gprs.simobil.net)
[12:54:30] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[12:54:31] *** Joins: luigibu (~luigi@80.30.201.209)
[12:54:41] <mrwick> is there somewhere documentation on how tuples compare?
[12:54:44] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[12:55:00] <mrwick> have been looking in python docs under standard types and language reference
[12:55:10] *** Quits: mactron_ (~mactron@APN-123-251-59-gprs.simobil.net) (Client Quit)
[12:55:10] *** Quits: mactron (~mactron@APN-123-251-59-gprs.simobil.net) (Quit: Leaving)
[12:55:35] <mrwick> would prefer official python docs, I thought I read about tuple comparison there somewhere
[12:55:47] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[12:55:56] *** Joins: Vonter (~Vonter@user/vonter)
[12:55:57] *** Joins: mactron (~mactron@apn-123-251-59-gprs.simobil.net)
[12:57:34] <jinsun_> it is mentioned here https://docs.python.org/3/library/stdtypes.html#common-sequence-operations
[12:57:41] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[12:57:46] *** Quits: luigibu (~luigi@80.30.201.209) (Client Quit)
[12:57:52] <jinsun_> "tuples and lists are compared lexicographically by comparing corresponding elements"
[12:58:11] *** Quits: HiddenHyde (~Hidden_Hy@user/hiddenhyde) (Quit: Leaving)
[12:59:04] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 264 seconds)
[12:59:36] *** bkhl is now known as bkhl_
[13:00:34] <jinsun_> explains only == though, then refers to https://docs.python.org/3/reference/expressions.html#comparisons for details of other operators
[13:01:09] <mrwick> yes, I should have kept reading there, stopped at the table
[13:02:05] *** Quits: mactron (~mactron@apn-123-251-59-gprs.simobil.net) (Quit: Leaving)
[13:02:10] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[13:03:14] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:914a:9dba:6dc1:3d38) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:03:45] *** Joins: mactron (~mactron@apn-123-251-59-gprs.simobil.net)
[13:04:54] *** Joins: shangxiao (~davids@1.159.32.229)
[13:05:03] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:914a:9dba:6dc1:3d38)
[13:05:09] *** Quits: mactron (~mactron@apn-123-251-59-gprs.simobil.net) (Client Quit)
[13:06:43] *** Joins: plastico (~plastico@neomutt/plastico)
[13:06:59] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 252 seconds)
[13:07:02] *** Joins: mactron (~mactron@APN-123-251-59-gprs.simobil.net)
[13:07:08] *** Quits: mactron (~mactron@APN-123-251-59-gprs.simobil.net) (Client Quit)
[13:08:02] *** Quits: bkhl_ (~bkhl@user/bkhl) (Quit: ZNC - https://znc.in)
[13:08:07] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:914a:9dba:6dc1:3d38) (Client Quit)
[13:08:33] *** Joins: mactron (~mactron@APN-123-251-59-gprs.simobil.net)
[13:10:15] *** Joins: jazzy (~jaziz@user/jaziz)
[13:12:18] *** Quits: amanjhalmat12 (~amanjhalm@212.237.123.164) (Ping timeout: 256 seconds)
[13:12:28] *** Quits: mactron (~mactron@APN-123-251-59-gprs.simobil.net) (Client Quit)
[13:13:52] *** Joins: mactron (~mactron@APN-123-251-59-gprs.simobil.net)
[13:14:01] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Ping timeout: 250 seconds)
[13:15:47] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:16:37] *** Joins: arinov (~arinov@178.240.181.140)
[13:18:53] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[13:20:05] *** Quits: mactron (~mactron@APN-123-251-59-gprs.simobil.net) (Quit: Leaving)
[13:20:20] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[13:20:54] *** Joins: mactron (~mactron@APN-123-251-59-gprs.simobil.net)
[13:21:05] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[13:23:20] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[13:23:21] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:23:36] *** Joins: bindu (~bindu@user/bindu)
[13:23:44] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[13:24:59] *** Joins: ubert (~Thunderbi@p200300ecdf0ba2aae6b318fffe838f33.dip0.t-ipconnect.de)
[13:25:41] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[13:26:22] *** Joins: dave2F (~dave@78-56-248-37.static.zebra.lt)
[13:28:17] *** Joins: e2m4n (~ezman@user/e2m4n)
[13:28:45] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[13:29:54] <kek_> I have a hdf file. I use pytorch to do some ML stuff. I have a dataset class ( https://bpa.st/R5IQ ). The class isn't the best python but I'm just playing around and keep it simple. Anyway, I then create a pytorch dataset: InputDS = InputDataset(input_file) and a dataloader InputDL = torch.utils.data.DataLoader(InputDS, batch_size = 100, shuffle = False). Now if I do next(iter(InputDL)) it gets me a batch of 100 items. all of those 100
[13:29:55] <kek_> items are either 0.0 or -0.0 but if I print the item which is fetcehd in __getitem__ everything is correct. I can't figure out why it is transformed to 0. any ideas?
[13:32:14] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:33:08] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:33:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:34:25] *** Joins: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d)
[13:34:28] *** Lord_of_Life_ is now known as Lord_of_Life
[13:35:13] <randall> kek_: And you don't want them to be either 0.0 or -0.0? It's not clear from the description what the problem is.
[13:35:31] <kek_> randall, ah I got it
[13:35:37] <kek_> it's a "print" issue.
[13:35:43] <kek_> precision – Number of digits of precision for floating point output (default = 4).
[13:36:09] *** Joins: ihristov (~ihristov@217.145.94.71)
[13:36:12] <kek_> nevermind, its fine, thanks though. No idea why I didn't think of that earlier.
[13:36:16] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[13:36:59] *** Joins: sharperguy (~sharpergu@88.130.223.19)
[13:37:08] *** Joins: Sadale_ (~Sadale@user/sadale)
[13:37:19] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 265 seconds)
[13:37:23] <sharperguy> For testing functions using the python command line interface, how can I run a function which is stated as async?
[13:38:34] <shangxiao> Can anyone recommend a python-based url shortening service for self-hosting?
[13:39:49] <kek_> nevermind, its fine, thanks though. No idea why I didn't think of that earlier.
[13:39:57] <kek_> ups sry
[13:40:46] *** Quits: mactron (~mactron@APN-123-251-59-gprs.simobil.net) (Remote host closed the connection)
[13:40:49] *** Joins: falkor (~falkor@90.242.155.158)
[13:41:40] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[13:42:20] *** Joins: mactron (~mactron@APN-123-251-59-gprs.simobil.net)
[13:42:58] *** Quits: mactron (~mactron@APN-123-251-59-gprs.simobil.net) (Client Quit)
[13:43:27] *** Quits: Throgkt (~Throgkt@user/throgkt) (Ping timeout: 256 seconds)
[13:43:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[13:43:34] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[13:43:42] *** Joins: mactron (~mactron@APN-123-251-59-gprs.simobil.net)
[13:44:40] *** Joins: netrunner (~netrunner@user/netrunner)
[13:45:00] *** Joins: fikran (~fikran@user/fikran)
[13:45:20] *** Quits: netrunner (~netrunner@user/netrunner) (Client Quit)
[13:45:49] *** Joins: netrunner (~netrunner@user/netrunner)
[13:45:56] *** Joins: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[13:46:21] *** Quits: mactron (~mactron@APN-123-251-59-gprs.simobil.net) (Client Quit)
[13:47:07] *** Joins: mactron (~mactron@APN-123-251-59-gprs.simobil.net)
[13:47:10] *** Quits: falkor (~falkor@90.242.155.158) (Quit: Leaving)
[13:47:26] *** Joins: Throgkt (~Throgkt@user/throgkt)
[13:47:59] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[13:48:03] *** Joins: guenhael1 (~Thunderbi@193.52.208.30)
[13:48:51] *** Joins: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de)
[13:49:19] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[13:49:41] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[13:50:21] *** guenhael1 is now known as guenhael
[13:51:55] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:53:01] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[13:53:05] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:53:35] *** Quits: dalan (~dalan@14-202-182-202.tpgi.com.au) (Ping timeout: 268 seconds)
[13:54:09] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Quit: This computer has gone to sleep)
[13:54:20] *** Joins: awmv (~awmv@213.55.225.67)
[13:59:19] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:59:28] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[13:59:53] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[14:00:09] *** Joins: falkor_ (~falkor@90.242.155.158)
[14:00:27] *** Quits: falkor_ (~falkor@90.242.155.158) (Client Quit)
[14:00:45] *** Joins: falkor (~falkor@90.242.155.158)
[14:01:08] *** Joins: VaniaPy (~VaniaPy@79.103.148.219.dsl.dyn.forthnet.gr)
[14:01:53] *** Quits: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net) (Ping timeout: 250 seconds)
[14:02:17] *** Quits: awmv (~awmv@213.55.225.67) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:02:39] <VaniaPy> Hello, how can i pass the results of a SARIMAX model to  json? i'm trying json.loads(SARIMAXmodel) but i'm getting TypeError: the JSON object must be str, bytes or bytearray, not SARIMAXResultsWrapper
[14:03:08] *** Joins: jazzy2 (~jaziz@user/jaziz)
[14:04:55] *** Quits: meti (~meti@user/meti) (Quit: ZNC - http://znc.in)
[14:05:31] *** Joins: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net)
[14:05:40] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[14:06:00] *** Quits: guenhael (~Thunderbi@193.52.208.30) (Quit: guenhael)
[14:06:18] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[14:06:23] *** Quits: delvian (~delvian@41.13.224.10) (Ping timeout: 252 seconds)
[14:06:35] *** Joins: cheater (~Username@user/cheater)
[14:07:00] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:09:09] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:11:19] *** Quits: mactron (~mactron@APN-123-251-59-gprs.simobil.net) (Quit: Leaving)
[14:11:30] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:12:09] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[14:12:18] *** Joins: mactron (~mactron@APN-123-251-59-gprs.simobil.net)
[14:12:23] <mc47> Hello everyone
[14:12:34] <The-Compiler> hey mc47
[14:12:50] <mactron> Hi there..
[14:12:57] <mc47> I have a real headscratcher on my hands: are their cases where super(Class, self) *isn't* equivalent to super() ?
[14:13:22] <The-Compiler> mc47: I guess if you pass a different Class than the enclosing one
[14:13:23] *** Joins: y1n (~y1n@178.115.34.133.wireless.dyn.drei.com)
[14:13:32] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[14:13:35] <mc47> Huh, doesn't seem to be the case
[14:13:52] <mc47> Concretely: it's about this PR https://github.com/encode/django-rest-framework/pull/8226
[14:15:07] <mc47> The weird thing is happening because the call is *inside* the class "Class", and it's calling super(Class, self)
[14:15:28] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[14:15:39] <mc47> which is.. weird, since removing it results in a TypeError
[14:16:26] <mc47> I just want to understand: what does super(Class, self) actually mean in python 3? Since it's not really equivalent to super()
[14:17:37] <aniketgm> mc47: In case of a multiple inheritance, the super(Class ...) will behave differently i guess. haven't tried tho.
[14:19:02] *** Quits: ihristov (~ihristov@217.145.94.71) (Ping timeout: 252 seconds)
[14:19:11] <mc47> aniketgm: I thought about that too, isn't the case :/
[14:19:13] <arash> how can I use wait command in python? its sleep in php
[14:20:07] <The-Compiler> arash: time.sleep
[14:20:07] *** Joins: Viewday116 (~Viewday@user/viewday)
[14:20:45] <shailangsa> does anybody know whether higher RAM frequency in contrast to lower timings result in better build times?
[14:20:53] *** Joins: awmv (~awmv@213.55.225.67)
[14:21:04] <The-Compiler> shailangsa: wrong channel?
[14:21:07] <The-Compiler> mc47: https://stackoverflow.com/a/31895448/2085149
[14:21:27] <randall> shailangsa: I'd guess that that makes so little difference that it'll be impossible to measure. But yeah, wrong channel.
[14:21:57] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:22:02] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 260 seconds)
[14:22:03] *** Viewday116 is now known as Viewday11
[14:22:38] <mc47> Thank you for the reference The-Compiler, I'll read through it
[14:23:15] <The-Compiler> mc47: I learned something new too :)
[14:24:06] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[14:25:47] *** Quits: awmv (~awmv@213.55.225.67) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:27:15] *** Joins: Klinda (~superleag@user/klinda)
[14:27:33] *** Joins: jazzy (~jaziz@user/jaziz)
[14:29:00] *** Joins: whaley (~whaley@2603-6080-a301-33d1-4c2f-0051-868d-a86d.res6.spectrum.com)
[14:29:40] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[14:30:06] <aniketgm> mc47: so essentially something like this. https://pastebin.com/QhS7CQgn
[14:31:15] <aniketgm> The-Compiler: that's a good one.
[14:31:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:32:32] <mc47> aniketgm: huh... thanks
[14:32:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:33:02] *** Quits: aniketgm (~Aniket@49.36.107.115) (Read error: Connection reset by peer)
[14:33:42] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[14:34:02] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[14:34:28] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[14:35:50] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:36:45] *** Joins: aniketgm (~Aniket@49.36.107.115)
[14:37:15] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[14:37:55] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:38:18] *** Joins: nomic (~nomic@185.198.243.158)
[14:38:49] *** Quits: p-i- (~Ohmu@223.206.149.59) (Read error: Connection reset by peer)
[14:39:05] <mc47> aniketgm, The-Compiler: it's the comprehension that's causing the problem, exactly ike in the stackoverflow issue... TIL
[14:39:19] *** Quits: falkor (~falkor@90.242.155.158) (Quit: Leaving)
[14:39:36] *** Joins: falkor (~falkor@90.242.155.158)
[14:39:50] *** Quits: falkor (~falkor@90.242.155.158) (Remote host closed the connection)
[14:40:21] *** Joins: falkor (~falkor@90.242.155.158)
[14:40:27] *** Joins: p-i- (~Ohmu@223.206.69.149)
[14:41:11] *** Joins: luigibu (~luigi@80.30.201.209)
[14:41:15] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[14:41:59] <arash> Can I export a table tag content to a excel or mysql via selenium?
[14:42:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:43:07] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[14:43:35] *** Joins: ccallahan (~ccallahan@redhat/ccallahan)
[14:43:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:44:59] *** Quits: mactron (~mactron@APN-123-251-59-gprs.simobil.net) (Read error: Connection reset by peer)
[14:46:25] *** Joins: czuk_cza (~mist@188.147.66.229.nat.umts.dynamic.t-mobile.pl)
[14:47:39] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:49:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[14:49:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:52:29] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[14:54:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:55:06] *** Joins: lionslicer (~lionslice@2804:d41:a7a6:1300:b113:7fa:47ec:a677)
[14:55:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:57:21] *** Quits: whaley (~whaley@2603-6080-a301-33d1-4c2f-0051-868d-a86d.res6.spectrum.com) (Quit: WeeChat 3.3)
[14:57:59] *** Joins: whaley (~whaley@2603-6080-a301-33d1-4c2f-0051-868d-a86d.res6.spectrum.com)
[15:00:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:01:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:01:46] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[15:02:10] *** Quits: nomic (~nomic@185.198.243.158) (Quit: Leaving)
[15:03:44] *** Joins: Vonter (~Vonter@user/vonter)
[15:05:03] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[15:06:07] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[15:06:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:07:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:07:28] *** Quits: emf (~emf@2620:10d:c090:400::5:9a5b) (Ping timeout: 264 seconds)
[15:08:36] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[15:09:30] *** Joins: emf (~emf@2620:10d:c090:400::5:d28b)
[15:10:28] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[15:11:26] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:12:09] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[15:12:51] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[15:12:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:13:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:13:24] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[15:13:38] *** Joins: ihristov (~ihristov@85.187.46.226)
[15:14:05] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Remote host closed the connection)
[15:14:33] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:7d90:e8ce:e7ae:433b)
[15:14:36] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[15:14:41] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 256 seconds)
[15:14:59] *** Quits: vladoski (~vladoski@2001:8a0:7ae1:4400:2110:298f:2e6:cc12) (Ping timeout: 268 seconds)
[15:16:57] *** Quits: grimvar (~grimvar@i5C75F5C0.versanet.de) (Ping timeout: 256 seconds)
[15:17:20] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 252 seconds)
[15:17:31] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[15:17:43] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[15:19:13] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[15:19:15] *** Joins: luigibu (~luigi@80.30.201.209)
[15:19:34] *** Sadale_ is now known as Sadale
[15:19:42] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[15:20:46] *** Quits: Pi-sistance (~kvirc@cpc94050-newt37-2-0-cust176.19-3.cable.virginm.net) (Quit: happy math or coding)
[15:20:51] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[15:21:34] *** Joins: vladoski (~vladoski@2001:8a0:7ae1:4400:4419:9d9a:be4c:93ac)
[15:22:17] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[15:23:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:23:28] *** Joins: Naan (~Naan@user/naan)
[15:23:31] *** dcaro is now known as dcaro_lunch
[15:23:34] <aniketgm> mc47: oh ok. that settles it then. cool.
[15:23:45] *** Joins: grimvar (~grimvar@i5C75F5C0.versanet.de)
[15:24:34] *** Joins: legola (~legola@46.235.101.65)
[15:24:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:24:50] *** Joins: Sario (uid356235@fosshost/cdo/Sario)
[15:25:03] <aniketgm> arash: you are just one google search away for an answer to that question.
[15:25:24] *** Quits: VaniaPy (~VaniaPy@79.103.148.219.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[15:26:21] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[15:26:35] <arash> aniketgm, :D thank you
[15:26:40] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[15:27:43] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 256 seconds)
[15:28:13] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[15:28:14] *** Joins: ionface (~ionface@user/ionface)
[15:28:45] *** Joins: dalan (~dalan@124.168.196.74)
[15:33:07] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[15:33:48] *** Quits: vimal (~vimal@ip-213-127-89-120.ip.prioritytelecom.net) (Ping timeout: 265 seconds)
[15:34:28] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 264 seconds)
[15:34:46] *** Joins: Atque (~Atque@user/atque)
[15:35:19] *** Quits: ckdCreations (~ckdCreati@147.55.133.135) (Read error: Connection reset by peer)
[15:35:31] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[15:35:40] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (Quit: Quit)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:26] *** Joins: Enitin (~Enitin@82.102.22.84)
[15:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:42] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[15:36:44] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[15:36:53] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:37:01] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[15:37:14] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[15:37:17] *** Joins: ckdCreations (~ckdCreati@147.55.133.132)
[15:38:19] *** Joins: guenhael1 (Thunderbir@gateway/vpn/protonvpn/guenhael)
[15:38:26] *** Quits: botfather (~botfather@shell1.dds.nl) (Remote host closed the connection)
[15:39:19] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (Client Quit)
[15:39:28] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[15:39:52] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 264 seconds)
[15:40:39] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:41:32] *** Quits: ccallahan (~ccallahan@redhat/ccallahan) (Ping timeout: 252 seconds)
[15:42:27] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[15:42:27] *** guenhael1 is now known as guenhael
[15:43:29] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[15:45:11] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[15:45:52] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[15:47:23] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[15:49:17] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Quit: This computer has gone to sleep)
[15:49:37] *** Joins: vulpes_vulpes (~vulpes_vu@62-64-204-115.dynamic.dial.as9105.com)
[15:50:08] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[15:51:05] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[15:52:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[15:53:13] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 256 seconds)
[15:54:21] *** Joins: fikran (~fikran@user/fikran)
[15:55:16] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[15:55:50] *** Quits: daoudr (~daoudr@2a02:1205:c690:ca10:843a:6e21:9631:a11f) (Ping timeout: 252 seconds)
[15:59:20] *** Quits: CrypticS_ (~CrypticS_@user/crypticsquared) (Read error: Connection reset by peer)
[16:02:34] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[16:04:54] *** Joins: cm315 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[16:05:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 268 seconds)
[16:09:02] *** Quits: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 252 seconds)
[16:09:29] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[16:09:57] <arash> for running selenium with chrome driver is it necessary to install chrome in the OS? or it just work with chromedriver?
[16:10:36] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:13:01] *** Joins: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch)
[16:15:05] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[16:15:06] *** Joins: darksun (~darksun@user/darksun)
[16:15:16] *** Quits: aniketgm (~Aniket@49.36.107.115) (Read error: Connection reset by peer)
[16:16:47] *** Joins: aniketgm (~Aniket@49.36.107.115)
[16:16:50] *** Joins: akspecs (00cc8321af@user/akspecs)
[16:17:48] *** Joins: SteveR (~SteveR@192.146.154.3)
[16:17:53] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[16:18:20] <SteveR> i am reading a file, is it possible to use seek to just print every 4th line
[16:20:02] *** Quits: arinov (~arinov@178.240.181.140) (Ping timeout: 252 seconds)
[16:20:40] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 264 seconds)
[16:22:19] <jinsun_> SteveR: you don't need seek, just loop over the file to get one line at a time and print every 4th iteration
[16:23:12] *** dcaro_lunch is now known as dcaro
[16:23:20] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[16:23:23] *** Joins: vlm (~vlm@user/vlm)
[16:23:47] <bjs> SteveR: you can't seek to a particular line unless you know where the lines all start/end.  Why do you want to use seek?
[16:23:56] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[16:24:33] *** Joins: luigibu (~luigi@80.30.201.209)
[16:25:02] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:26:04] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[16:26:34] <aniketgm> SteveR: yes, it is possible. But there is a better way -- what jinsun_ said. why not just use readline instead ?
[16:27:44] *** Joins: VaniaPy (~VaniaPy@79.103.148.219.dsl.dyn.forthnet.gr)
[16:27:52] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 264 seconds)
[16:28:00] <SteveR> i used something like this https://dpaste.org/Vgu8
[16:28:32] <bjs> SteveR: okay, is there something about this you are unhappy with?
[16:29:43] <bjs> SteveR: you can simplify (and possibly "improve" this) by just saying `for id, line in enumerate(f): if id % 4 == 0: ...`  since you can loop over the lines of a file by looping over the file object directly
[16:30:08] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:30:10] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[16:30:41] *** Joins: guenhael1 (~Thunderbi@2a01cb008c3d5800dc401f8ffd76ffcd.ipv6.abo.wanadoo.fr)
[16:30:44] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:31:11] *** Quits: RasnCain (~rasncain@gw1.cox.com) (Ping timeout: 256 seconds)
[16:31:16] *** Quits: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch) (Quit: Leaving)
[16:31:42] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[16:32:04] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 264 seconds)
[16:32:05] *** guenhael1 is now known as guenhael
[16:32:11] *** Joins: shad (~shad@user/shad)
[16:32:22] *** Joins: amanjhalmat12 (~amanjhalm@212.237.123.164)
[16:33:08] <SteveR> sure
[16:33:39] <bjs> SteveR: I can't tell if that's a "sure, that does exactly what I was needing" or a "sure I already know about that but it doesn't really do what I want"
[16:34:01] <aniketgm> I dont wish to sound rude. i apologize in advance. but that is a bad way to write. use 'with open' that takes care of closing the opened file references.
[16:34:09] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[16:34:18] <aniketgm> something like this: https://pastebin.com/JwA1jLbr
[16:34:21] *** Quits: akspecs (00cc8321af@user/akspecs) (Remote host closed the connection)
[16:34:24] <SteveR> i agree. i should have done a close()
[16:34:27] *** Joins: akspecs (00cc8321af@user/akspecs)
[16:35:59] *** Quits: bandit_za (~bandit@102-65-138-35.dsl.web.africa) (Ping timeout: 252 seconds)
[16:36:22] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:2446:13de:20ec:764f)
[16:36:25] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Client Quit)
[16:36:59] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[16:37:05] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (Quit: Lost terminal)
[16:37:24] *** Joins: RasnCain (~rasncain@gw1.cox.com)
[16:39:16] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[16:39:51] *** Joins: RasnCa___ (~rasncain@ip174-73-119-77.br.br.cox.net)
[16:40:30] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[16:41:36] *** Joins: botfather (~botfather@shell1.dds.nl)
[16:41:44] *** Quits: psyxopompos (~psyxopomp@user/psyxopompos) (Quit: WeeChat 3.0)
[16:42:38] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[16:42:52] *** Quits: RasnCain (~rasncain@gw1.cox.com) (Ping timeout: 264 seconds)
[16:47:21] *** Quits: hudo (~hhudo_@mail.allm-elektro.de) (Quit: Leaving)
[16:47:35] <jinsun_> better not to manually close the file, use the with statement, because in the general case you will have do it in try: finally:  which is just longer and uglier
[16:49:11] *** Quits: stranac (~stranac@195.29.239.126) (Ping timeout: 252 seconds)
[16:49:17] *** Joins: laptopjazz (~quassel@2603-6010-9105-4982-5095-5c2f-1b78-5b50.res6.spectrum.com)
[16:52:53] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:53:04] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[16:54:37] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:56:25] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:2446:13de:20ec:764f) (Quit: smeeagle)
[16:56:33] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[16:56:58] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[16:57:15] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[16:57:57] *** Quits: RasnCa___ (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[16:58:27] *** Quits: grooverman (~grooverma@177.95.12.14) (Remote host closed the connection)
[16:59:15] *** Joins: RasnCain_ (~rasncain@gw1.cox.com)
[16:59:35] <aniketgm> speaking of try: finally: I never really understood why else: was really required ? why not just write it in finally, when the statements don't give any exception ?
[16:59:43] <aniketgm> jinsun_: ^
[17:03:38] <Yhg1s> aniketgm: because 'finally' is executed even when an exception *is* raised. 'else' is only executed when no exception is raised.
[17:04:26] *** Joins: grooverman (~grooverma@177.95.12.14)
[17:04:34] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[17:06:58] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[17:08:23] <parv> Ah the else to exception & finally.🙄
[17:10:18] *** Quits: laptopjazz (~quassel@2603-6010-9105-4982-5095-5c2f-1b78-5b50.res6.spectrum.com) (Quit: laptopjazz)
[17:10:55] *** Quits: guenhael (~Thunderbi@2a01cb008c3d5800dc401f8ffd76ffcd.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[17:11:40] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 264 seconds)
[17:12:49] *** Joins: csmiga (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net)
[17:13:06] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:13:08] <Omega037> morning yall
[17:13:15] <NyaaTheCat> mornin'
[17:13:42] *** Joins: arinov (~arinov@213.194.126.155)
[17:13:54] *** Joins: betuxy (~betuxy@p579ad9b7.dip0.t-ipconnect.de)
[17:14:16] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:14:23] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:14:43] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:2446:13de:20ec:764f)
[17:15:33] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:7d90:e8ce:e7ae:433b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:16:16] *** Joins: ianliu (~ianliu@177.188.85.182)
[17:17:22] <aniketgm> mornin.. whats the time there ?
[17:18:08] <ianliu> I'm using poetry to install dask-cloudprovider as well as boto3, but I'm getting a big SolverError. Has anyone seen this problem? How do you solved it?
[17:18:22] *** Joins: bjourne (~bjourne@2001:6b0:1:1140:42bf:ff4:f8fa:50e5)
[17:18:31] *** Joins: orbisvicis (~orbisvici@user/orbisvicis)
[17:19:02] <aniketgm> Yhg1s: yes I know the else functionality. I'm asking when there is not exception. why not just write it in finally. meaning the else: code seems just redundant.
[17:19:05] *** Joins: cosimone (~user@93-47-231-3.ip115.fastwebnet.it)
[17:19:36] <ianliu> Here is the error: curl -F 'f:1=<-' ix.io
[17:19:39] <ianliu> ops
[17:19:58] <ianliu> http://ix.io/3Gzz
[17:20:08] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:7d90:e8ce:e7ae:433b)
[17:20:15] <NeilRG> are there any numpy gurus here?  I proposed something and wasn't sure how to implement it convincingly?  https://github.com/numpy/numpy/issues/20459
[17:20:49] <aniketgm> I never came across any case where there is not exception and I would really need to add it to else. The whole else design seems an overhead.
[17:21:20] *** Joins: dez (uid92154@user/dez)
[17:21:52] <aniketgm> NeilRG: there is a numpy channel btw.
[17:22:16] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[17:22:21] <NeilRG> aniketgm, did not know that!
[17:22:34] <NeilRG> wait, there are only 5 people there lol
[17:22:53] <NeilRG> but thanks :)
[17:23:08] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:24:25] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:24:58] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[17:25:36] <jinsun_> aniketgm: the else is usually not needed, but it behaves differently from putting things in the finally block, which can be useful sometimes
[17:26:01] <jinsun_> I have used it at least once, don't have the example right now
[17:26:13] *** Quits: ianliu (~ianliu@177.188.85.182) (Quit: WeeChat 3.3)
[17:26:21] <jinsun_> and that is more than I have used the else of the for and while loops
[17:27:16] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[17:28:26] *** Joins: luigibu (~luigi@80.30.201.209)
[17:29:42] <bjs> aniketgm: the `finally` stuff happens even *if* they was an exception
[17:29:53] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 252 seconds)
[17:29:56] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:30:32] <bjs> aniketgm: e.g. imagine opening a file, it might throw an exception (e.g. FileNotFoundError);  `try: f = open(...)` then you cannot use `f` in the `finally`
[17:32:06] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[17:33:31] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[17:33:56] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[17:35:08] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[17:35:33] *** Joins: luigibu (~luigi@80.30.201.209)
[17:36:32] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:36:45] <lionslicer> how do I sum individual lines in a matrix? If I want to store the sum of each separate line a list, that is
[17:37:03] *** Joins: e2m4n (~ezman@user/e2m4n)
[17:37:18] <bjs> aniketgm: for example a flow like https://bpa.st/IXPA might want both else and finally
[17:37:43] <bjs> well you probably want `with f: return f.read()` my bad
[17:39:00] <bjs> lionslicer: what is "a matrix"? Is it another list? or a numpy array, or?
[17:39:48] <lionslicer> I havent used numpy, but its a list of lines stacked on top of each other
[17:39:51] <lionslicer> I do it manually
[17:39:55] <bjs> lionslicer: what is a "line" ?
[17:40:01] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[17:40:02] <bjs> a string? or another list?
[17:40:10] <bjs> and by "stack" what do you mean?
[17:40:14] <lionslicer> [x, y, z]
[17:40:21] <lionslicer> [t, u, v]
[17:40:23] <lionslicer> like this
[17:40:32] <bjs> lionslicer: what
[17:40:37] <NyaaTheCat> you mean numpy's arrays?
[17:40:38] <bjs> oh do you mean you have a file that looks like that?
[17:41:11] <bjs> lionslicer: actually can you just share an example of what you *actually* have as I think I'm just confused from that example
[17:41:13] <aniketgm> bjs: you see once you know there is not file exception. you'd probably just read it. either you could club it together. i mean f.read and chdir(/return/to/previous/path/)
[17:41:34] <bjs> aniketgm: where would you put that?
[17:42:27] <zamba> i'm looking at a set of bits and i want to extract the different "fields" from it.. what is the easiest way of doing that?
[17:42:32] <zamba> like creating a map of some sort
[17:42:42] <bjs> zamba: what is "it" ?
[17:43:07] <zamba> it's a 4 byte word.. so for instance bit 0-4 has a meaning.. bit 8-9 a different.. bit 11 another, and so on
[17:43:30] <bjs> zamba: is it just an int?  You can use the bitwise operators to extract fields
[17:43:36] <zamba> so instead of doing individual assigments and calculations with bit shifting/masking.. is there a easier way of creating a format map or something?
[17:43:43] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[17:44:08] <bjs> zamba: well you can write a little function that does the shift/mask and then call it multiple times, I'm not sure what would be "easier"
[17:44:58] <aniketgm> bjs: I mean simply do a f.read and chdir in finally return. what does else really have over here. is my question ?
[17:45:08] <bjs> aniketgm: you can't put it in finally
[17:45:17] <bjs> aniketgm: because if the file was not found there is no f to read!
[17:46:11] *** Joins: ccallahan (~ccallahan@redhat/ccallahan)
[17:46:54] *** Joins: legola (~legola@46.235.101.65)
[17:47:10] *** Joins: ccallahan|Backup (~ccallahan@redhat/ccallahan)
[17:47:12] <bjs> zamba: and if you have a list of fields `field_slices = [("name", 0, 5), ...]` you can go `fields = {name: (v >> lsb) & ((2 ** width)-1) for (name, lsb, width) in field_slices}`  so you only write the actual bitwise stuff once in the code
[17:47:13] <aniketgm> right! I got your point.
[17:47:59] *** Joins: bloody (~bloody@user/bloody)
[17:48:46] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:49:01] *** Quits: y1n (~y1n@178.115.34.133.wireless.dyn.drei.com) (Remote host closed the connection)
[17:50:28] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[17:50:33] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[17:50:40] *** Quits: ccallahan (~ccallahan@redhat/ccallahan) (Ping timeout: 264 seconds)
[17:51:09] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[17:51:14] *** Joins: csmiga1 (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net)
[17:51:19] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[17:52:11] *** Joins: luigibu (~luigi@80.30.201.209)
[17:52:58] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[17:53:17] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[17:53:21] *** Quits: csmiga (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[17:53:21] *** csmiga1 is now known as csmiga
[17:54:17] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[17:54:30] <ham5urg> In a model (of a mvc approach) I handle the user_entered_variables via publish/subscribe (pubsub). Some variables are not directly entered by the user but are calculated_depending_on_user_variables. Should I use pubsub to call the functions for calculated_depending_on_user_variables. It's a model-interna calculation so I'm unsure if I should use pubsub here. What do you think?
[18:00:10] *** Quits: SteveR (~SteveR@192.146.154.3) (Ping timeout: 256 seconds)
[18:00:51] *** Joins: nyah (~nyah@94.6.71.219)
[18:02:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[18:03:42] *** Joins: fikran (~fikran@user/fikran)
[18:04:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:04:38] *** Joins: falkor_ (~falkor@90.242.155.158)
[18:05:46] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-55e4-dd93-e3ad-3730.res6.spectrum.com)
[18:08:32] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:08:52] *** Quits: falkor_ (~falkor@90.242.155.158) (Client Quit)
[18:10:40] *** Parts: mc47 (~mc47@xmonad/TheMC47) (Leaving)
[18:14:16] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[18:15:43] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[18:18:45] <bancroft> I want to mirror pypi because it's too slow for my cluster, I was looking at https://pypi.org/project/python-pypi-mirror/ but my paranoia is far too big for http. Has anyone had to do this before? What did you use? Did you just put an nginx container?
[18:19:37] <bancroft> (put an nginx for TLS)
[18:20:12] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Quit: Client closed)
[18:20:28] <wyre> is there some generic module to control pwm interfaces in /sys/class/pwm/?
[18:20:50] <omegatron> i just downloaded the whole damn thing with wget .. (but i'm not in a too fascist country)
[18:20:53] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[18:21:05] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:21:16] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[18:21:18] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[18:22:17] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:22:52] <BinarySavior> hi
[18:22:57] <NyaaTheCat> hey
[18:23:03] <BinarySavior> [count_gt_20_mfo(x.drop_duplicates(subset="Sending System", keep="first")["MFO"]) for x in screens]
[18:23:13] <BinarySavior> sorry, work blocks all pasting sites
[18:23:19] <BinarySavior> :D
[18:23:29] <BinarySavior> screens is a list of dataframes
[18:23:58] <BinarySavior> for some reason, the drop_duplicates() is inconsequential in this statement
[18:24:16] <BinarySavior> even though there are several duplicates in x['Sending System']
[18:25:36] <BinarySavior> count_gt_20_mfo() is giving the same number whether I include drop_duplicates() or not
[18:26:22] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[18:26:23] *** Quits: shangxiao (~davids@1.159.32.229) (Quit: WeeChat 3.3)
[18:26:32] <causaui1> sounds like .drop_duplicates isn't doing what you expect
[18:26:55] <Helenah> I'm using AsyncSSH, is there any way to detect particular keystrokes for example Tab key?
[18:27:06] <causaui1> BinarySavior: I'm not aware of such a method to a built-in class so you might have to share the code for whatever object type x is. (use a pastebin like the one in the channel topic)
[18:28:08] <BinarySavior> causaui1 x is an iterator variable for screens.  Screens is a list of dataframes, so x is pandas.DataFrame()
[18:28:39] <BinarySavior> my work blocks pastebins :(
[18:28:56] <bancroft> BinarySavior: including bpaste.net?
[18:29:20] <BinarySavior> yes, i've tried bpaste.net, bpa.st, paste.ubuntu.com, and others
[18:29:34] <BinarySavior> they are worried about us leaking IP
[18:29:42] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[18:31:13] <jinsun_> have you tried just doing drop_duplicates on one of the dataframes instead of looking at the result of count_gt_20_mfo
[18:32:03] <jinsun_> more likely count_gt_20_mfo is wrong, than drop_duplicates not working for your dataframe
[18:32:22] *** Joins: Fiji (~Fiji@user/fiji)
[18:32:37] *** cammy is now known as foxbox
[18:32:40] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 264 seconds)
[18:32:59] *** Quits: Fiji (~Fiji@user/fiji) (Client Quit)
[18:33:33] <Helenah> BinarySavior: Worried about you leaking IP?
[18:34:03] <Helenah> Any website you go to is most likely to place your IP in the access log. If they don't like then why are they not protecting them IPs they want to protect by sticking them behind a VPN?
[18:34:09] *** Joins: sfields (~sfields@2605:a601:adea:7a00:4b8a:a822:48cd:474f)
[18:34:13] <Helenah> People can't help you if you don't share your code when asked.
[18:34:20] <BinarySavior> jinsun_ thank you for suggestion, I accidentally forgot to add drop_duplicates() on one line of code
[18:34:25] <jinsun_> IP == Intellectual Property probably
[18:34:27] <jinsun_> not IP address
[18:34:31] <Helenah> Oh
[18:34:43] *** Quits: jay-m126_ (~jay-m@154.72.167.128) (Ping timeout: 256 seconds)
[18:34:43] *** Quits: jay-m126 (~jay-m@154.72.167.128) (Ping timeout: 256 seconds)
[18:34:43] <BinarySavior> yes, intellectual property
[18:34:56] <Helenah> But this is a Python support channel, why come here if you can't even share code?
[18:34:57] *** Quits: encukou (quassel@nat-pool-brq-t.redhat.com) (Quit: Mějte se tu krásně!)
[18:35:03] <Helenah> I'm confused
[18:35:27] <BinarySavior> Helenah, I was able to share a single line of code, which I thought would be enough if I could explain the context in words
[18:35:35] <Helenah> hmm
[18:35:47] <Helenah> I've been asked to share an entire program before now, BinarySavior
[18:35:48] <BinarySavior> I was troubleshooting for a while, sorry for the frustrations I may have caused anyone
[18:35:51] <Helenah> Just warning yoy.
[18:35:53] <Helenah> *you
[18:36:02] <Helenah> I'm not frustrated.
[18:36:23] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:36:41] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:37:52] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[18:38:07] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[18:39:16] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[18:39:32] <Helenah> I'm using AsyncSSH, is there any way to detect particular keystrokes for example Tab key?
[18:40:48] *** Joins: nomic (~nomic@185.198.243.158)
[18:40:55] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[18:41:50] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[18:42:02] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[18:42:47] *** Joins: stdout (~stdout@216.163.21.11)
[18:43:50] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[18:44:59] *** Quits: tbcr (~tbcr@user/tbcr) (Killed (NickServ (GHOST command used by tbcr_2!~brclark@user/tbcr)))
[18:45:03] *** Quits: RiFo (~RiFo@user/rifo) (Quit: ... and thanks for all the fish.)
[18:45:16] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 264 seconds)
[18:45:25] *** Joins: tbcr1 (~tbcr@user/tbcr)
[18:45:53] <azidhaka> Hi everyone, could please someone help with something i am fighting all day: http://p.ip.fi/4to_ (deleting keys from windows registry)
[18:46:04] *** Joins: akk (~akk@75.161.146.115)
[18:46:16] <azidhaka> One key always remains
[18:46:23] *** Quits: jemark (jemark@user/jemark) (Ping timeout: 250 seconds)
[18:46:44] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Killed (strontium.libera.chat (Nickname regained by services)))
[18:46:44] *** mh3f_ is now known as mh3f
[18:46:47] <Helenah> bjs: Is that you on stack overflow? lol
[18:46:49] *** Quits: dawg_ (dirtydawg@triton.blinkenshell.org) (Ping timeout: 250 seconds)
[18:46:49] *** Quits: khile (cacambo@triton.blinkenshell.org) (Ping timeout: 250 seconds)
[18:47:01] <bjs> Helenah: I don't use SO, so probably not
[18:47:06] <Helenah> Oh
[18:47:07] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:47:32] *** Joins: Guest2088 (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[18:47:55] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[18:48:05] *** Quits: Guest2088 (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Remote host closed the connection)
[18:48:29] *** Joins: drogas (~drogas@jump2.jet.uk)
[18:48:31] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[18:49:11] *** Quits: MercilessDeth (~brad@136.49.59.177) (Remote host closed the connection)
[18:49:44] *** Joins: MercilessDeth (~brad@136.49.59.177)
[18:49:50] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Quit: mihaiadrian)
[18:51:07] *** Quits: jdmark (~jdmark@172.58.175.121) (Read error: Connection reset by peer)
[18:51:25] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[18:52:28] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[18:52:35] *** Quits: lionslicer (~lionslice@2804:d41:a7a6:1300:b113:7fa:47ec:a677) (Remote host closed the connection)
[18:53:04] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 264 seconds)
[18:53:17] *** Joins: jemark (jemark@user/jemark)
[18:53:45] *** Quits: MercilessDeth (~brad@136.49.59.177) (Remote host closed the connection)
[18:53:51] *** Quits: amanjhalmat12 (~amanjhalm@212.237.123.164) (Quit: Client closed)
[18:53:51] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[18:54:17] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[18:54:22] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[18:54:28] <jinsun_> azidhaka: delete the first item always
[18:54:40] *** Joins: MercilessDeth (~brad@136.49.59.177)
[18:54:43] <jinsun_> instead of increasing i in the loop
[18:55:40] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[18:55:53] <CrtxReavr> azidhaka, you like to play with fire, don't you?
[18:55:57] *** Joins: stonkey (~stonkey@user/stonkey)
[18:56:10] <azidhaka> CrtxReavr: not really :)
[18:56:17] <jinsun_> you are doing something similar to deleting items from a list while iterating over it, which will do weird things always
[18:56:31] *** Joins: jdmark (~jdmark@097-102-095-007.res.spectrum.com)
[18:56:34] *** Joins: guenhael1 (~Thunderbi@193.52.208.97)
[18:56:40] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Ping timeout: 264 seconds)
[18:56:40] *** guenhael1 is now known as guenhael
[18:56:46] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[18:58:07] <azidhaka> jinsun_: it wasn't like that before, line 11 and 12 were reversed, OpenKey() was after get_keys() and the result was the same
[18:58:49] <azidhaka> jinsun_: moved it like that in the hope that the generator will somehow fix it
[18:59:08] *** Quits: bjourne (~bjourne@2001:6b0:1:1140:42bf:ff4:f8fa:50e5) (Quit: Konversation terminated!)
[18:59:53] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:00:05] *** Quits: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk) (Ping timeout: 252 seconds)
[19:00:06] *** Joins: dawg (dirtydawg@triton.blinkenshell.org)
[19:00:24] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[19:00:39] <jinsun_> azidhaka: I'm not saying swap things around, just change your line 6
[19:00:40] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[19:00:47] <jinsun_> get_keys(path, i+1) to get_keys(path)
[19:01:26] <jinsun_> or just remove the i, because i should be 0 always
[19:01:31] *** Joins: Robin_Jadoul (afe6b98926@2604:bf00:561:2000::18e)
[19:02:21] *** Joins: seoul_man (~meh@user/seoul-man/x-5066766)
[19:02:26] *** Joins: xkuru (~xkuru@user/xkuru)
[19:03:11] <azidhaka> jinsun_: recurses forever: maximum recursion depth exceeded while calling a Python object
[19:04:04] <jinsun_> ah I thought your try catch will handle that
[19:05:53] <jinsun_> or maybe you have more than 1000 things there, so it was not really done
[19:06:30] *** Joins: Elzington (~Elzington@static-68-235-44-44.cust.tzulo.com)
[19:06:50] <azidhaka> jinsun_: there are 3-4 items and the print returns them correctly
[19:06:51] <jinsun_> you can get rid of the get_keys function and directly use EnumValue in your loop I guess
[19:07:23] <jinsun_> now that you don't have to increase i everytime
[19:08:15] <jinsun_> make a while True loop and name, value, type = winreg.EnumValue(winreg.OpenKey(winreg.HKEY_CURRENT_USER, path), 0) in that
[19:10:54] *** Joins: legola (~legola@46.235.101.65)
[19:11:23] <jinsun_> you can also do something safer than deleting while looping, make a loop to just get the names in a list
[19:11:29] <azidhaka> jinsun_: that would loop forever, i have to increment the second arg in EnumValue()
[19:11:39] <jinsun_> then delete them in a second loop
[19:12:34] <jinsun_> azidhaka: okay so try doing the way I just told, increase i but don't delete, just append the names in a list, then loop over the list and delete later
[19:14:17] <azidhaka> jinsun_: like that? http://p.ip.fi/lAKh
[19:15:02] *** Quits: bninja (~bloodninj@user/bloodninja) (Quit: So long King Bowser!)
[19:15:33] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:16:02] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 252 seconds)
[19:16:16] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:16:24] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:16:28] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 264 seconds)
[19:17:48] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[19:18:21] *** Quits: mallkrampus (~mallkramp@172.93.207.236) (Ping timeout: 256 seconds)
[19:18:32] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Quit: Leaving)
[19:19:22] <azidhaka> jinsun_: probably the key index for EnumValue() changes with each DeleteValue(), like 1,2,3 ; 1 deleted, index changes to 1,2
[19:19:28] <jinsun_> azidhaka: something like this https://bpa.st/TXGQ
[19:19:54] <jinsun_> azidhaka: yes that is what happens from the output in the original paste
[19:20:27] *** Joins: nosoul (nosoul@gateway/vpn/protonvpn/nosoul)
[19:20:35] *** Joins: rsx (~dummy@ppp-188-174-155-184.dynamic.mnet-online.de)
[19:20:59] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[19:21:58] <azidhaka> jinsun_: yep, that works!
[19:22:19] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[19:23:00] <jinsun_> great
[19:23:13] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[19:23:39] <azidhaka> jinsun_: thank you very much
[19:24:09] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[19:25:40] *** Joins: Hazza (~Haxxa@125-63-20-105.ip4.superloop.com)
[19:25:45] *** Joins: jay-m126 (~jay-m@154.72.150.169)
[19:25:50] *** Joins: jay-m126_ (~jay-m@154.72.150.169)
[19:26:04] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Ping timeout: 264 seconds)
[19:26:41] *** Joins: delvian (~delvian@41.13.194.126)
[19:27:43] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[19:28:04] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[19:28:16] *** Quits: parv (~quass@user/parv) (Quit: parv)
[19:28:55] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Remote host closed the connection)
[19:29:40] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[19:30:53] *** Quits: czuk_cza (~mist@188.147.66.229.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 252 seconds)
[19:31:43] *** Joins: mallkrampus (~mallkramp@172.93.207.235)
[19:32:04] *** Quits: superboot (~agentgasm@user/superboot) (Ping timeout: 264 seconds)
[19:32:32] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:33:43] *** Joins: dkdjsm (~dkdjsm@178.49.152.151)
[19:33:46] *** Joins: superboot (~agentgasm@user/superboot)
[19:34:13] *** Quits: upsala (~zcb@185.213.155.252) (Quit: WeeChat 3.3)
[19:34:20] <dkdjsm> if I have a representation of a json object, is there a way to filter out all empty values from it?
[19:34:44] <dkdjsm> i.e. zeroes, empty strings/lists/dicts etc.
[19:35:22] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[19:35:31] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Client Quit)
[19:36:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:38:17] *** Quits: kek_ (~kek_@2a02:168:200f:1f10:dcde:2774:1301:baad) (Quit: Leaving)
[19:40:13] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:41:23] *** Joins: mh3f_ (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[19:41:24] *** Joins: uhu (~uhu@static.101.168.216.95.clients.your-server.de)
[19:41:44] <Helenah> Hi
[19:42:05] <Helenah> Is there an easy way to listen for keystroks in Asyncio/AsyncSSH?
[19:42:33] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[19:42:41] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[19:42:46] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 256 seconds)
[19:44:01] *** Joins: encukou (quassel@nat-pool-brq-t.redhat.com)
[19:44:04] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 264 seconds)
[19:44:07] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[19:45:23] <aniketgm> dkdjsm: https://stackoverflow.com/questions/45482047/checking-if-json-key-is-empty/45482109
[19:46:06] *** Parts: aniketgm (~Aniket@49.36.107.115) ()
[19:47:56] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 252 seconds)
[19:47:56] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[19:48:05] *** Quits: encukou (quassel@nat-pool-brq-t.redhat.com) (Client Quit)
[19:48:24] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:49:38] *** Joins: causasui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[19:50:04] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[19:52:41] <sudomann> If i add a directory to PYTHONPATH which contains 2 files: foo.py, bar.py, I should be able to import both of them in an interpreter using import foo, import bar, correct?
[19:52:42] *** Joins: dohtem (uid524096@user/dohtem)
[19:52:55] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[19:53:14] *** Joins: tobybl (~tobybl@213.31.134.21)
[19:53:44] *** Joins: aniketgm (~Aniket@49.36.107.115)
[19:53:45] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[19:53:59] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 252 seconds)
[19:54:13] <Wooble> sudomann: sure. (don't use PYTHONPATH, it's awful)
[19:54:34] <sudomann> And if I didnt want to import them individually, if I'm understanding correctly, I should put an __init__.py in the directory so I could do `import directory_name`
[19:55:00] <Helenah> I'm wanting to develop some auto-completion using the tab key on my Asyncio/AsyncSSH prompt
[19:55:26] <sudomann> Wooble, how so? the two modules I wanna import are generated files using grpc-tools. It doesnt make a lot of sense for me to "package" it
[19:55:30] <Wooble> sudomann: the package itself (the directory containing __init__.py) would need to be inside a directory on the import path.
[19:55:37] <aniketgm> sudomann: import directory doesn't add the modules i believe. you may need somethimg like from 'directory_name import blahblah
[19:56:13] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:56:14] *** mh3f_ is now known as mh3f
[19:56:26] <sudomann> Wooble, I see, thanks
[19:56:48] <Helenah> I also want to catch ^C
[19:57:14] *** Joins: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51)
[19:59:16] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:6d3e:7e5e:e0b5:771e)
[20:00:10] *** Joins: ub (~Thunderbi@p200300ecdf0ba2aaa54fdd1e9768c0b5.dip0.t-ipconnect.de)
[20:00:11] *** Joins: Klinda (~superleag@user/klinda)
[20:00:36] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:00:39] *** Joins: tvm (~tom@ip-89-103-96-164.net.upcbroadband.cz)
[20:02:38] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:03:13] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[20:03:41] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 256 seconds)
[20:03:48] *** Quits: vladoski (~vladoski@2001:8a0:7ae1:4400:4419:9d9a:be4c:93ac) (Remote host closed the connection)
[20:04:07] *** Joins: vladoski (~vladoski@2001:8a0:7ae1:4400:99a3:e7f2:d7ff:8274)
[20:04:33] *** Quits: CodeGeek (~codegeek@about/java/CodeGeek) (Quit: Connection reset by beer)
[20:05:19] *** Quits: rsx (~dummy@ppp-188-174-155-184.dynamic.mnet-online.de) (Quit: rsx)
[20:05:38] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[20:06:20] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Client Quit)
[20:06:26] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[20:06:37] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[20:06:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:07:44] <bookworm> Helenah: C-c tends to get interpreted by the shell and your app will receive that as an interrupt signal on Linux like OSes
[20:08:12] <bookworm> ot won't generate a key code at all
[20:08:26] <Helenah> bookworm: That seems to be closing my connection to the AsyncSSH server yet on an OpenSSH server that's not what happens.
[20:08:56] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:09:49] <bookworm> not sure what asyncssh is but if they don't catch sigterm the program terminates, that's the default handler
[20:10:13] *** Joins: roteiro (~roteiro@i6DFA381C.versanet.de)
[20:10:33] <Helenah> bookworm: I think it's asyncio what handles the key stuff.
[20:10:47] *** Joins: encukou (quassel@nat-pool-brq-t.redhat.com)
[20:10:53] <dkdjsm> is it possible to make a list from a list, where each dict member is replaced with the result of a function?
[20:10:57] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-2958-7b1f-8e17-11c9.res6.spectrum.com)
[20:11:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[20:11:15] <bookworm> sure
[20:11:24] <bookworm> a simple list comprehension
[20:11:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:11:48] *** Joins: dude-x_ (~textual@72.76.74.165)
[20:11:52] <bookworm> [stuff(a) for a in x]
[20:12:02] *** Joins: LabMonkey (~LabMonkey@206.255.106.67)
[20:12:11] <dkdjsm> each _dict_ member
[20:12:19] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:12:27] <bookworm> there's no such thing as a dict member
[20:12:30] *** Joins: none (~stdout@216.163.21.11)
[20:12:41] <bookworm> there are keys in a dictionary and dict objects
[20:12:42] *** Joins: kaichiuc1u (~kaichiuch@user/kaichiuchu)
[20:12:46] <dkdjsm> i.e. [1,2,[],[],f({}),f({}),3]
[20:12:50] *** Quits: baltazar (~baltazar@94-21-222-223.pool.digikabel.hu) (Ping timeout: 268 seconds)
[20:12:51] *** Joins: mbrndtgn3 (~mbrndtgn@undecidable.de)
[20:12:57] *** Joins: mchlumsky2 (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[20:13:03] *** Joins: fikran (~fikran@user/fikran)
[20:13:11] *** Joins: Armen8 (~Armen@armen138.com)
[20:13:11] *** Joins: nac1 (~nac@user/nac)
[20:13:13] *** Joins: dv^_^5 (~dv@eclipse.oxfordfun.com)
[20:13:20] *** Joins: shutnoshut2 (~shutnoshu@ec2-52-29-68-122.eu-central-1.compute.amazonaws.com)
[20:13:21] *** Joins: radu2424072 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[20:13:22] *** Quits: seanBE_ (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[20:13:22] *** Quits: laksith (~laksith@laksith.dev) (Ping timeout: 256 seconds)
[20:13:22] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (Ping timeout: 256 seconds)
[20:13:22] *** Quits: bloodElk (~bloodElk@user/bloodelk) (Ping timeout: 256 seconds)
[20:13:29] <grym> dkdjsm: [stuff(x) for x in mylist]; def stuff(thing): if isinstance(thing, dict): return otherthing(thing): else: return thing
[20:13:53] *** Joins: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com)
[20:13:54] *** Joins: dwt__ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[20:13:55] *** Joins: noarb- (~noarb@user/noarb)
[20:13:56] *** Joins: earthbreaker (~earthbrea@li778-229.members.linode.com)
[20:13:56] *** Quits: jootoi (~jootoi@130.61.158.197) (Ping timeout: 256 seconds)
[20:13:56] *** Quits: malwar3hun73r (~malwar3hu@134.122.29.124) (Ping timeout: 256 seconds)
[20:13:56] *** Quits: oz4ga (~tim@hator.sunsite.lv) (Ping timeout: 256 seconds)
[20:13:56] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Ping timeout: 256 seconds)
[20:13:56] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (Ping timeout: 256 seconds)
[20:13:59] *** Joins: poorboy (~poorboy@159.89.189.144)
[20:14:01] *** Joins: woky_ (~woky@li1651-31.members.linode.com)
[20:14:02] *** Joins: bloodElk (~bloodElk@user/bloodelk)
[20:14:02] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[20:14:02] *** Joins: phryk_ (~totallyno@user/phryk)
[20:14:03] *** Joins: ihaveamac_ (~ihaveamac@ihaveahax.net)
[20:14:03] *** Joins: duracrisis (~kkh@user/duracrisis)
[20:14:04] *** Joins: voirnox_ (~voirnox@xor.moe)
[20:14:04] *** Joins: jootoi_ (~jootoi@130.61.158.197)
[20:14:09] *** Joins: drew` (~drew@user/drew)
[20:14:09] *** Joins: cluelessperson_ (~cluelessp@user/cluelessperson)
[20:14:13] <bookworm> why do you have an inhomogeneous list in the first place?
[20:14:13] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Quit: This computer has gone to sleep)
[20:14:24] *** Joins: malwar3hun73r (~malwar3hu@134.122.29.124)
[20:14:30] *** Joins: kai4 (~kai@x50d24799.cust.hiper.dk)
[20:14:30] *** Quits: voirnox (~voirnox@xor.moe) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: jug (~jug@user/jug) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: jamwil_ (~jamwil@user/jamwil) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: dangrenier83_ (~pi@user/dangrenier83) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: starship (~kkh@user/duracrisis) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: Stench (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: kaichiuchu (~kaichiuch@user/kaichiuchu) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: Wu (~wu@152.red-88-21-0.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: woky (~woky@li1651-31.members.linode.com) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: phy1729 (~phy1729@zsh/wizard/phy1729) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: simplicity (~yti@user/simplicity) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: sud (~sud@user/sud) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: phryk (~totallyno@user/phryk) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: Tashtari (~tashtari@user/tashtari) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: erhandsome (~erhandsom@user/erhandsome) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: Tomassi-1 (~Tomassi-1@ec2-16-170-233-250.eu-north-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: haps (~haps@hyena.haps.ca) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: Dan39 (~dan@user/dan39) (Ping timeout: 256 seconds)
[20:14:31] *** Quits: kr0nk (~kr0nk@user/kr0nk) (Ping timeout: 256 seconds)
[20:14:31] *** mchlumsky2 is now known as mchlumsky
[20:14:31] <bookworm> that's usually a bad thing unless a few are None or equivalent
[20:14:34] *** Joins: dtman34_ (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[20:14:36] *** Joins: vsantana (~Thunderbi@fttx-177136148231.usr.predialnet.com.br)
[20:14:37] <dkdjsm> good
[20:14:58] <dkdjsm> because json
[20:15:01] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: stdout (~stdout@216.163.21.11) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: habnabit_ (~habnabit@python/site-packages/habnabit) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: Mechanismus (~LabMonkey@206.255.106.67) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: ulif_ (~nick@user/ulif) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: foo (~foo@user/foo/x-8763512) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: Armen (~Armen@armen138.com) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: poorboy_ (~poorboy@159.89.189.144) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: Batzy (~quassel@user/batzy) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: Teacup (~teacup@user/teacup) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: nac (~nac@user/nac) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: zoid (~zoid@user/zoid) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: nisstyre (~wes@user/nisstyre) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: Tritium (~tritium@toxin.sdamon.com) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: rapha (~jrs@user/rapha) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: yolo (~xxiao@159.89.184.51) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: dude-x (~textual@72.76.74.165) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: asix (~Anders@user/asix) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: drew (~drew@user/drew) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: waveform (~quassel@waveform.plus.com) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: earthbre- (~earthbrea@li778-229.members.linode.com) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: kenwoodfox (~quassel@user/kenwoodfox) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: shutnoshut (~shutnoshu@ec2-52-29-68-122.eu-central-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: dlam (~dlam@dlam.me) (Ping timeout: 256 seconds)
[20:15:05] *** Armen8 is now known as Armen
[20:15:05] *** nac1 is now known as nac
[20:15:05] *** mbrndtgn3 is now known as mbrndtgn
[20:15:05] *** radu2424072 is now known as radu242407
[20:15:13] *** Joins: Teacup_ (~teacup@user/teacup)
[20:15:16] <bookworm> ah
[20:15:18] *** Joins: waveform (~quassel@waveform.plus.com)
[20:15:19] *** Joins: vit (~vit@chello085216193138.chello.sk)
[20:15:23] *** Joins: kenwoodfox (~quassel@user/kenwoodfox)
[20:15:35] *** Quits: encukou (quassel@nat-pool-brq-t.redhat.com) (Ping timeout: 256 seconds)
[20:15:38] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[20:15:40] *** Joins: Batzy (~quassel@user/batzy)
[20:15:43] *** vit is now known as Guest3140
[20:15:49] *** Joins: zoid (~zoid@user/zoid)
[20:15:53] *** Joins: erhandsome (~erhandsom@user/erhandsome)
[20:15:58] *** Joins: simplicity (~yti@user/simplicity)
[20:16:07] *** Joins: haps (~haps@hyena.haps.ca)
[20:16:20] *** Joins: Wu (~wu@152.red-88-21-0.staticip.rima-tde.net)
[20:16:24] *** Joins: jamwil (~jamwil@user/jamwil)
[20:16:29] *** Joins: yolo (~xxiao@159.89.184.51)
[20:16:31] *** Joins: dangrenier83_ (~pi@user/dangrenier83)
[20:16:32] *** Joins: laksith (~laksith@laksith.dev)
[20:16:37] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[20:16:37] *** Joins: foo (~foo@user/foo/x-8763512)
[20:16:38] *** Joins: Tomassi-1 (~Tomassi-1@ec2-16-170-233-250.eu-north-1.compute.amazonaws.com)
[20:16:40] <CrtxReavr> dkdjsm, I recently had to deal with a bunch of different JSON payloads of wildly different format, and I had to find and modify specific string fields.
[20:16:55] <CrtxReavr> You want to see the code I came up with to deal with that?
[20:16:58] *** Joins: ulif (~nick@user/ulif)
[20:16:59] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:17:01] <Helenah> Okies finally found something, why didn't this come up in my searches BEFORE?!
[20:17:02] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[20:17:04] *** Joins: shutnoshut (~shutnoshu@ec2-52-29-68-122.eu-central-1.compute.amazonaws.com)
[20:17:04] <Helenah> geez...
[20:17:29] *** Joins: kai43 (~kai@x50d24799.cust.hiper.dk)
[20:17:46] *** Joins: poorboy_ (~poorboy@159.89.189.144)
[20:17:49] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[20:17:51] *** Joins: IceMicha- (~IceMichae@h2878436.stratoserver.net)
[20:17:51] *** Joins: voirnox (~voirnox@xor.moe)
[20:17:55] *** Joins: drew (~drew@user/drew)
[20:18:12] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (Read error: Connection reset by peer)
[20:18:25] *** Quits: dwt__ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Ping timeout: 256 seconds)
[20:18:25] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[20:18:31] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[20:18:34] *** Quits: grooverman (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[20:18:40] *** Joins: Tritium (~tritium@toxin.sdamon.com)
[20:18:59] *** Quits: dtman34_ (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[20:18:59] *** Quits: kai4 (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 256 seconds)
[20:18:59] *** Quits: drew` (~drew@user/drew) (Ping timeout: 256 seconds)
[20:18:59] *** Quits: voirnox_ (~voirnox@xor.moe) (Ping timeout: 256 seconds)
[20:18:59] *** Quits: poorboy (~poorboy@159.89.189.144) (Ping timeout: 256 seconds)
[20:18:59] *** Quits: shutnoshut2 (~shutnoshu@ec2-52-29-68-122.eu-central-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[20:18:59] *** Quits: dv^_^5 (~dv@eclipse.oxfordfun.com) (Ping timeout: 256 seconds)
[20:18:59] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 256 seconds)
[20:19:19] <dkdjsm> sure
[20:19:33] *** Quits: Portugol9 (~Portugol9@user/portugol9) (Ping timeout: 256 seconds)
[20:19:42] *** Joins: grooverman (~grooverma@177.95.12.14)
[20:19:45] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:20:09] *** Joins: habnabit_ (~habnabit@python/site-packages/habnabit)
[20:20:12] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[20:20:41] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[20:20:44] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[20:20:44] *** Quits: niko (~niko@libera/staff/niko) (Ping timeout: 606 seconds)
[20:20:50] *** Joins: sud (~sud@user/sud)
[20:22:02] <deniska> CrtxReavr: was recursive `yield from` involved?
[20:22:05] *** Quits: vladoski (~vladoski@2001:8a0:7ae1:4400:99a3:e7f2:d7ff:8274) (Ping timeout: 268 seconds)
[20:22:20] <deniska> Or (the opposite side of the spectrum) re module?
[20:22:24] <noord> dkdjsm: write a recursive function that takes jsonobject. iterate over key and values like, for k,v in jsonobject.items() then check the type of object list, str, whatever you want, collect the altered on result another dict
[20:23:26] <CrtxReavr> deniska, recursive, yes. . . yield from, no.
[20:23:29] <CrtxReavr> sec
[20:23:50] *** Joins: Portugol9 (~Portugol9@user/portugol9)
[20:24:38] *** Joins: baltazar (~baltazar@185-29-82-78.pool.digikabel.hu)
[20:24:39] *** Quits: betuxy (~betuxy@p579ad9b7.dip0.t-ipconnect.de) (Quit: Connection closed)
[20:24:54] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[20:25:02] <CrtxReavr> dkdjsm, https://bpa.st/KYOQ
[20:25:25] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[20:25:33] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:25:46] <CrtxReavr> KirkMcDonald actually came-up with most of that function.
[20:26:05] <dkdjsm> i imagined something like that
[20:26:16] <Lando-SpacePimp> KirkMcDonald had a farm. EIEIO!
[20:26:29] *** Quits: Balzy (~Balzy@host-87-5-136-46.retail.telecomitalia.it) (Ping timeout: 250 seconds)
[20:26:41] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:26:41] <deniska> CrtxReavr: I've written functions similar to this one… quite a few times
[20:26:42] <Wooble> I bet he's never heard that before.
[20:26:47] <CrtxReavr> But I think it's a good example of how to deal with un-predictable JSON.
[20:27:14] *** Joins: kr0nk (~kr0nk@user/kr0nk)
[20:27:48] *** Joins: phy1729 (~phy1729@zsh/wizard/phy1729)
[20:27:52] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[20:28:09] *** Joins: Dan39 (~dan@user/dan39)
[20:28:12] *** Joins: Tashtari (~tashtari@user/tashtari)
[20:28:18] *** Joins: nisstyre (~wes@user/nisstyre)
[20:28:21] *** Joins: niko (~niko@libera/staff/niko)
[20:28:21] <CrtxReavr> IT's fun to add a print statement to the function to see how many times it gets called.
[20:28:25] *** Joins: dlam (~dlam@dlam.me)
[20:28:32] <coc0nut> if text.count(char) > 1: <- how can I force lowercase ? so its caseinsensitive?
[20:28:34] *** Joins: jug (~jug@user/jug)
[20:28:35] *** Joins: asix (~Anders@user/asix)
[20:28:43] <coc0nut> if text.count(char).lower() ?
[20:28:44] *** Joins: djapo (~archangel@user/djapo)
[20:28:44] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:28:57] <CrtxReavr> .casefold() is more. .. non-English friendly.
[20:29:37] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[20:29:53] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[20:30:00] <Wooble> coc0nut: text.lower().count(char.lower())  (or casefold)
[20:30:12] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[20:30:40] *** Joins: qlixed (~qlixed@181.44.129.13)
[20:30:43] *** Quits: kdc (~kdc@196.211.197.159) (Remote host closed the connection)
[20:31:00] <coc0nut> so casefold is more correct i assume? text.casefold().count(char.casefold()) would be correct syntax? :p
[20:31:01] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[20:31:21] *** Joins: Balzy (~Balzy@host-87-5-133-30.retail.telecomitalia.it)
[20:31:37] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:31:40] <CrtxReavr> I think casefold() & lower() behavior is identical for English. . . so I think casefold() is the more-correct answer, yes.
[20:31:48] <Lando-SpacePimp> nah
[20:31:54] <Lando-SpacePimp> it doesn't matter
[20:32:09] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:32:29] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[20:32:29] <Wooble> it might slightly matter if you're dealing with turkish or german.
[20:32:37] *** Joins: cdown_ (~cdown@188.214.11.14)
[20:33:03] <coc0nut> hehe doing a task in codewars.com :p
[20:33:36] *** Quits: delvian (~delvian@41.13.194.126) (Read error: Connection reset by peer)
[20:33:58] *** dcaro is now known as dcaro_away
[20:33:58] <coc0nut> the task is to return how many duplicates of a letter (caseinsensitive) or number
[20:34:06] *** Joins: scadman (~scadman@cpc145252-maid8-2-0-cust473.20-1.cable.virginm.net)
[20:34:06] *** Joins: delvian (~delvian@41.13.194.126)
[20:34:07] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[20:34:13] <Wooble> I mean if you've got "ß" and don't want it to count 2 "s" there then umm... good luck? :)
[20:34:20] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[20:34:28] <coc0nut> lol
[20:34:56] <coc0nut> im actually proud to make it 50% work already tho
[20:35:13] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:35:14] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 252 seconds)
[20:35:17] <coc0nut> Passed: 3Failed: 2Exit Code: 1
[20:35:18] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[20:35:25] *** cdown_ is now known as cdown
[20:35:56] <Wooble> tbh they probably use all ascii anyway to avoid extra aggravation to people using languages that handle unicode less nicely.
[20:35:58] * dkdjsm wonders why a machine translation of stackoveflow site is higher in the google results than the python documentation
[20:35:59] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[20:36:49] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[20:37:22] <Wooble> dkdjsm: because stack exchange can afford to hire SEO people and python.org is run by volunteers? :)
[20:37:41] <CrtxReavr> Wooble, seen many Germans hand write ß in a lower case format though.
[20:38:01] <CrtxReavr> For all the stupid stuff they add to unicode, why not a lower-case esset?
[20:38:04] <SnoopJ> CrtxReavr, casefold applies to English orthography too
[20:38:53] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Quit: guenhael)
[20:38:57] <grym> CrtxReavr: traditionally, sharfes s is _only_ lowercase
[20:39:07] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[20:39:24] *** Joins: kdc (~kdc@196.211.197.159)
[20:39:27] <CrtxReavr> Unfamiliar with what you mean.
[20:39:34] <SnoopJ> yes, indeed
[20:39:39] <Wooble> CrtxReavr: "SS" is the uppercase.
[20:40:08] <grym> ß has had a capital form since ~2016
[20:40:40] <grym> "Traditionally, ⟨ß⟩ did not have a capital form, although some type designers introduced de facto capitalized variants. In 2017, the Council for German Orthography officially adopted a capital, ⟨ẞ⟩, into German orthography, ending a long orthographic debate."   https://en.wikipedia.org/wiki/%C3%9F
[20:40:46] <coc0nut> anyone mind to see whats missing here ? https://bpa.st/LFVQ
[20:41:00] <CrtxReavr> https://bpa.st/NNIQ
[20:41:21] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[20:41:36] <SnoopJ> coc0nut, there is a discussion of casefold in the official docs here: https://docs.python.org/3/howto/unicode.html#comparing-strings and if you are interested in all the fiddly details, the relevant part of the Unicode standard is 3.13 https://www.unicode.org/versions/Unicode14.0.0/ch03.pdf
[20:41:40] *** Quits: jay-m126_ (~jay-m@154.72.150.169) (Ping timeout: 264 seconds)
[20:41:40] *** Quits: jay-m126 (~jay-m@154.72.150.169) (Ping timeout: 264 seconds)
[20:41:59] <arkanoid> Trying to setup vscode for python for the first time. Is asking me to select a linter. Should I go pylint, flake8, mypy or other? Any suggestion?
[20:42:00] <SnoopJ> but the very short version is: prefer casefold() to upper/lower if you want to compare strings
[20:42:12] <Wooble> coc0nut: it's incrementing duplicates for each occurance of any letter that appears more than once.
[20:42:13] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 256 seconds)
[20:42:23] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 252 seconds)
[20:42:32] <CrtxReavr> Okay, I've studied German formally and never herd the term "scharfes S."
[20:42:33] <SnoopJ> arkanoid, they don't all do the same things. Best suggestion I have: have a look at what they do and if the features of any appeal to you, try those
[20:42:38] <CrtxReavr> heard
[20:42:52] *** Joins: encukou (quassel@nat-pool-brq-t.redhat.com)
[20:42:56] <SnoopJ> CrtxReavr, there are a great many things about Unicode you haven't heard of. It is a shame that you feel qualified to judge the standard "stupid" on that basis, but oh well.
[20:42:58] <arkanoid> ok, thaks
[20:43:12] *** Joins: jay-m126 (~jay-m@129.0.76.215)
[20:43:15] <Wooble> CrtxReavr: try .upper()
[20:43:19] *** Joins: jay-m126_ (~jay-m@129.0.76.215)
[20:43:29] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Ping timeout: 252 seconds)
[20:44:10] * CrtxReavr nods.
[20:44:21] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[20:45:14] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[20:45:53] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[20:46:03] <SnoopJ> text: it's complicated
[20:46:22] <grym> thank goodness
[20:46:23] *** Quits: VaniaPy (~VaniaPy@79.103.148.219.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[20:46:40] <coc0nut> snoopj: nice, casefold() seem to decode german atleast... i dont know german. im trying to learn python :p too much to grasp. im just wondering about my paste above. to count duplicates. and running the test, it passes 3 and fails 2 of the tests
[20:47:04] <coc0nut> https://bpa.st/LFVQ
[20:47:34] <SnoopJ> coc0nut, there's a lot to grasp, yea. That's basically the Consortium's job, to spend hundreds of hours thinking about it and write up the standards.
[20:47:51] <coc0nut> its alphabet, upper and lower (should be caseinsensitive) and numbers aswell...
[20:48:08] <Wooble> also The unicode consortium is fine with you uppercasing ß to "\u1e9e" but their algorithm is unlikely to do it in the near future
[20:48:10] <coc0nut> true
[20:48:33] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[20:48:36] <SnoopJ> coc0nut, have you already addressed Wooble's point about potential double-counting?
[20:48:53] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:49:00] <Wooble> SnoopJ: reading the problem, it doesn't matter since they just need to count letters that appear more than once.
[20:49:03] *** Joins: roe (~mroe@dyn209177.cc.lehigh.edu)
[20:49:24] <coc0nut> well, something about codewars.com use of unicode? i think theres only english alphabet + numbers 0-9
[20:49:28] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 264 seconds)
[20:49:35] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[20:49:44] <Helenah> I'm soo confused... :/
[20:49:50] <SnoopJ> Wooble, I'm thinking of e.g. "sß" being folded to "sss" before the dupe-count but I'm only seeing about 1/3rd of the problem
[20:49:51] <Wooble> ßßss returning 1 instead of 2 *could* be an issue but umm, I don't think that's likely to be one of your failing tests :)
[20:49:57] <Helenah> This is really difficult.
[20:50:01] <roe> how do I use type hinting properly, when I want to be able to accept two different types for the same parameter?
[20:50:08] <Helenah> I thought I found something but I didn't...
[20:50:09] <SnoopJ> roe, that's what typing.Union is for
[20:50:37] <coc0nut> i dont think the test is running german symbols/letters in the test
[20:50:37] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[20:50:40] <SnoopJ> roe, `Union[A, B]` (or `A | B` in more modern versions) means "A or B"
[20:50:40] <bjs> grym: I'm sure I've seen some images of old street signs with uppercase  ß's in them before, it's just not kosher in modern German
[20:50:44] <Helenah> Turns out what I found would tell me how to handle SIGTERM when sent to the server event loop
[20:51:01] <SnoopJ> coc0nut, we don't have any option but to blindly guess, here, we aren't seeing all the information you're seeing.
[20:51:17] <roe> SnoopJ: so like def foo( bar: str|int) -> dict|list ?
[20:51:22] <dkdjsm> it is funny that description is written in indian english
[20:51:23] <Helenah> bjs: Interesting
[20:51:24] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Remote host closed the connection)
[20:51:29] <Helenah> And I'm not German but interesting
[20:51:30] <bjs> roe: yes, that would be a function that accepts either a str or an int, and could return either a dict or list
[20:51:35] <SnoopJ> roe, yep
[20:51:39] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[20:51:46] <roe> perfect.  Thanks
[20:51:47] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[20:51:47] <grym> bjs: cdunklau might know; i wonder where he's got to ...
[20:52:06] <coc0nut> https://bpa.st/EHMQ
[20:52:10] <bjs> grym: I'm not sure I've seen them after the great freenode implosion
[20:52:11] <coc0nut> might explain abit more this paste
[20:52:15] <Helenah> SSH client sends ^C, I want the server to handle it in a particular way. Can't even catch it.
[20:52:19] <grym> bjs: me either
[20:52:23] <SnoopJ> huh, I hadn't thought about it before, but the new syntax works perfectly well for user-defined types. That's neat :)
[20:52:24] <Helenah> AsyncSSH
[20:52:59] <SnoopJ> bjs, grym last seen with nickserv is 23 weeks ago, guess he's elsewhere
[20:52:59] <grym> bjs: 3 months later, "huh, why is my znc d/c'd..."
[20:53:26] <grym> "wait how did my nickserv password chan... what the"
[20:53:36] <Wooble> still on freenode? :)
[20:53:38] <SnoopJ> that's June, so maybe he (or a friend?) grabbed the nick during the row
[20:55:46] *** Joins: upsala (~zcb@185.213.155.252)
[20:55:52] <Helenah> I think I found something
[20:55:53] <Helenah> DAMN
[20:57:24] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[20:57:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:57:35] *** Quits: ccallahan|Backup (~ccallahan@redhat/ccallahan) (Remote host closed the connection)
[20:58:24] <bjs> coc0nut: what's the question about the code? I kinda missed it
[20:58:26] <bjs> or is it all sorted
[20:58:56] <coc0nut> the code i wrote there, when i run it in the test. it passes 3 of 5 strings it seems.
[20:59:11] <bjs> coc0nut: well,  consider the string "aa"
[20:59:14] <bjs> what should your function return?
[20:59:16] <coc0nut> when i casefold() the text, it passes 2 of 5 strings
[20:59:28] *** Parts: aniketgm (~Aniket@49.36.107.115) ()
[20:59:51] <coc0nut> the function should return a total count of duplicated alphabetic letters or numbers
[20:59:53] <SnoopJ> coc0nut, it's hard for us to help without knowing the failing inputs/outputs
[21:00:04] <bjs> coc0nut: okay yes but I think you missed the emphasis sorry
[21:00:13] <coc0nut> yeah, i wish i knew the inputs myself
[21:00:14] <bjs> coc0nut: I have read your code. I think it does not work correctly on the input "aa"
[21:00:26] *** Joins: aniketgm (~Aniket@49.36.107.115)
[21:00:54] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[21:01:03] <SnoopJ> oh, is it failing in the reserved test cases?
[21:02:19] <bjs> coc0nut: What do you think about the input "aa"?  I think it should return 1, but your code looks like it'll return 2.  Which is the correct answer?
[21:02:35] <bjs> (and this isn't anything to do with case or casefold)
[21:03:03] <coc0nut> doesnt it just add +1 to the integer of duplicates if its more than 1 of a case ?
[21:03:41] <bjs> coc0nut: i think you're getting ahead, can we agree on what the answer *should* be for "aa" ?
[21:03:42] <coc0nut> but im afraid it doesnt see a and A as the same
[21:03:57] <bjs> coc0nut: can we look at my example? With just "aa"
[21:04:08] <coc0nut> "aa" should be +1 to the int of duplicates :p
[21:04:12] <coc0nut> yeah
[21:04:22] <bjs> coc0nut: okay but you're avoiding saying the actual number
[21:04:23] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[21:04:30] <bjs> I think the answer is 1?  What do you think it is?
[21:04:56] *** Joins: onichomp (~onichomp@2806:264:4404:8266:d177:e7f1:3914:58e4)
[21:04:58] <coc0nut> duplicates = 0 - if the string input is "aa", duplicates = 1
[21:05:22] <bjs> coc0nut: but your function returns 2
[21:05:30] <coc0nut> what is doing that?
[21:05:35] <bjs> coc0nut: your function
[21:05:38] <bjs> "duplicate_count"
[21:06:24] *** Quits: tobybl (~tobybl@213.31.134.21) (Remote host closed the connection)
[21:06:45] <bjs> coc0nut: your duplicate_count function loops over "for char in text", but there are two 'a' characters
[21:06:50] <bjs> so it gets counted twice
[21:06:56] <coc0nut> ah, maybe i see
[21:07:08] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[21:07:13] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Quit: Leaving)
[21:07:17] <coc0nut> so if theres two a`s, both are counted with eachother?
[21:08:05] *** Parts: aniketgm (~Aniket@49.36.107.115) ()
[21:08:51] <coc0nut> hmm, so i go for another quest then...
[21:09:06] <coc0nut> how to not iterate two times on duplicates :p
[21:09:10] *** Joins: aniketgm (~Aniket@49.36.107.115)
[21:09:19] <coc0nut> or several times *
[21:09:51] *** Quits: stonkey (~stonkey@user/stonkey) (Read error: Connection reset by peer)
[21:12:06] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:12:19] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[21:12:41] <aphysically> hurrah python 3.10 stabilized in gentoo \o/
[21:13:01] <aphysically> but it will probably be a little bit before people are rid of 3.9
[21:13:16] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[21:13:39] <dkdjsm> ...more incompatible code in the wild
[21:14:24] *** Joins: CodeGeek (~codegeek@about/java/CodeGeek)
[21:14:49] <SnoopJ> aphysically, well, it won't be EOL until 2025, so yes, probably a while before it's gone entirely :)
[21:14:55] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[21:16:14] <coc0nut> bjs, yeah tested in vscode :P it does something strange..
[21:16:31] <bjs> coc0nut: it's always a good idea to test your function against the example inputs yourself
[21:16:43] <bjs> and to try make your own tests up
[21:16:47] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Ping timeout: 256 seconds)
[21:17:39] <elwoodpd> if I have a function that runs every min and also a sse endpoint on starlette
[21:17:58] <elwoodpd> is there some way I can push to that endpoint
[21:17:59] <coc0nut> hello = 2, helLo = 0
[21:18:11] <elwoodpd> without holding everything in memory
[21:18:24] <coc0nut> bjs, yeah been running the test in codewars.com. you can test code before submitting there
[21:18:35] <coc0nut> pasted in vs code and seeing some behaviour :P
[21:18:39] <elwoodpd> (Server-Sent Event)
[21:18:44] <bjs> coc0nut: I had guessed, that's why I wanted to emphasise the fact you can do it *yourself*
[21:18:45] <bjs> :)
[21:20:13] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[21:20:55] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[21:20:57] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[21:21:37] <coc0nut> I dont get it tho. Im telling it to add 1 to duplicates if there are more than one cases... hehe
[21:22:26] <coc0nut> also thinking to make it all lowercases to make it caseinsensitive.
[21:24:15] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[21:24:42] *** Joins: akahs (~Shaka@user/shaka)
[21:25:01] *** Joins: Klinda (~superleag@user/klinda)
[21:26:13] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[21:26:23] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-b06c-115f-7310-1d97.fixed6.kpn.net) (Remote host closed the connection)
[21:26:56] *** Joins: ravan (~ravan@user/ravan)
[21:27:39] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-64f2-cec8-9dae-6ea9.fixed6.kpn.net)
[21:29:28] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[21:30:40] *** Joins: tobybl (~tobybl@213.31.134.21)
[21:30:50] <bjs> coc0nut: well just step through your program for the input "aa"
[21:31:10] <SnoopJ> helpful for stepping through: https://pythontutor.com/visualize.html
[21:31:11] <coc0nut> added a new indent of if
[21:31:13] *** Joins: iomari891 (~iomari891@105.112.138.38)
[21:31:20] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[21:31:21] <coc0nut> if char not in used_char: :p
[21:31:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:31:36] <bjs> look at how many times Python runs each line and why, how many times does it go around the loop
[21:31:40] *** Quits: ihristov (~ihristov@85.187.46.226) (Quit: Connection closed)
[21:31:46] <coc0nut> okok thx!
[21:31:48] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[21:33:28] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[21:33:40] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:b8b7:2c62:cadc:e295)
[21:34:34] *** Joins: Guest14 (~Guest14@pool-96-253-74-73.rcmdva.fios.verizon.net)
[21:34:35] <coc0nut> this is also wrong, but i started thinking this way :p https://bpa.st/UR5Q
[21:35:00] *** Quits: tobybl (~tobybl@213.31.134.21) (Remote host closed the connection)
[21:35:20] *** Joins: Vornotron (~Vornicus@2603-8000-5d07-7ef0-f8f1-3b3e-ffc0-275b.res6.spectrum.com)
[21:35:40] <NeilRG> why can't I kill a threading.Thread?
[21:35:43] <NeilRG> or how do I do it?
[21:36:12] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[21:36:12] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:37:25] <lpapp> hi, running an application on an external exfat hard-drive causes issues.
[21:37:34] <lpapp> the host is a mac computer with mac fs
[21:38:10] <lpapp> self._buffer_decode(data, self.errors, final)
[21:38:12] <lpapp> UnicodeDecodeError: 'utf-8' codec can't decode byte 0xb0 in position 37: invalid start byte
[21:38:20] <lpapp> this is in codecs.py
[21:38:40] <lpapp> is it possible to fix this and run the app that uses python from an external exFAT drive?
[21:38:40] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-55e4-dd93-e3ad-3730.res6.spectrum.com) (Ping timeout: 264 seconds)
[21:39:02] <lpapp> exFat is probably utf-16le, but python seems to try to decode stuff as utf-8, not sure if it is a good analysis, but at least info.
[21:40:05] <lpapp> also, it seems to be only an issue with the python 3 version of the app. Was not with python 2.
[21:40:13] *** Joins: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[21:40:35] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[21:40:35] *** Quits: jay-m126 (~jay-m@129.0.76.215) (Ping timeout: 256 seconds)
[21:40:41] *** Quits: jay-m126_ (~jay-m@129.0.76.215) (Ping timeout: 252 seconds)
[21:40:45] <bjs> NeilRG: there is no way to kill a threading.Thread.  So you'll have to either find some other solution (e.g. asking the thread to quit) or not using threads. Being able to cancel threads of execution like that is one of the nice things about modern "async" frameworks
[21:41:14] <NeilRG> bjs, oh, should I be using async instead to implement threading?
[21:41:18] <SnoopJ> lpapp, can we see the complete error report at https://bpa.st ? It looks like you're loading data from a file that isn't UTF-8 encoded and it may not really be due to the FS/drive
[21:41:25] <bjs> coc0nut: you append to used_chars before you check if the char is in used_chars
[21:41:31] <bjs> coc0nut: but of course it's in used_chars, since you just added it!
[21:41:41] <bjs> NeilRG: what do you mean "to implement threading"
[21:41:56] <bjs> NeilRG: what are you trying to do?
[21:42:03] <lpapp> SnoopJ: yes, exfat is utf-16
[21:42:18] *** Joins: jay-m126 (~jay-m@129.0.76.215)
[21:42:32] *** Joins: jay-m126_ (~jay-m@129.0.76.215)
[21:42:37] <NeilRG> bjs, I have a very slow (multiple minute) "thread" that runs an algorithm, and PySide UI.  I want the UI not to lock up while the algorithm is run
[21:43:04] <Wooble> lpapp: it certainly doesn't convert all of your data to utf-16
[21:43:14] <coc0nut> bjs, my goal was to add the duplicated char to used_char list, and if char not in used_char then duplicates += 1... anyhow ill solve this, taking a break
[21:43:15] <SnoopJ> lpapp, can we see the complete error report?
[21:43:19] <bjs> NeilRG: what kind of algorithm?
[21:43:23] <bjs> coc0nut: that sounds like a good idea
[21:43:25] <lpapp> SnoopJ: I will try to get it.
[21:43:26] <bjs> coc0nut: you just have the order wrong
[21:43:38] *** Quits: zware (~zach@python/psf/zware) (Quit: Quitting)
[21:43:40] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[21:43:47] <NeilRG> bjs, it's a Jax machine learning program
[21:43:48] <arkanoid> I'm reading a file row by row splitting each row by cols, at the end I have a List[List[str]] row-wise, and I want to turn it into a pandas DataFrame (that's column wise). What's the correct way to approach this problem?
[21:43:50] <bjs> coc0nut: if you add it to the list, then ask if it's in the list, then it'll be in the list because you just added it!  If you do it the other way around... check if it's in the list, and if not *then* add it
[21:43:51] <SnoopJ> Wooble, I think they might mean the paths, which could be related?
[21:44:11] <lpapp> SnoopJ: https://bpa.st/OGFA
[21:44:16] <NeilRG> bjs, it will be in C code for many tens of seconds
[21:44:26] <coc0nut> hehe :p thx!
[21:45:07] <bjs> NeilRG: it's unlikely you're going to be able to "stop" that C code very easily
[21:45:17] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[21:45:28] <NeilRG> bjs, but I can do so with the ctrl-C on the command line
[21:45:31] <lpapp> Wooble: how do you mean?
[21:45:33] *** Joins: zware (~zach@python/psf/zware)
[21:45:40] <NeilRG> bjs, what about something like the first solution here? https://www.geeksforgeeks.org/python-different-ways-to-kill-a-thread/
[21:45:48] <bjs> NeilRG: you might find https://docs.python.org/3/library/signal.html#signal.pthread_kill useful? I'm not sure
[21:45:52] *** Quits: stoneware (~stoneware@user/stoneware) (Ping timeout: 264 seconds)
[21:46:32] <bjs> NeilRG: that code scares me, it may or may not work in some or all circumstances I cannot comment
[21:46:44] *** Joins: stoneware (~stoneware@user/stoneware)
[21:46:49] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Ping timeout: 256 seconds)
[21:47:07] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[21:47:40] <NeilRG> bjs, okay thanks
[21:47:41] *** Joins: teut (~teut@182.68.254.204)
[21:47:49] <NeilRG> bjs but async is not what I want then?
[21:48:29] <lpapp> SnoopJ: not really an fs expert, but I wonder whether it can be mounted as utf-8 to see if that makes it work
[21:48:31] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[21:48:42] <lpapp> probably the customer would not know how to do that though, and ideally, it should work on any fs
[21:48:58] <lpapp> any mainstream, albeit not sure how mainstream exfat is, certainly ntfs is, and it is also utf-16
[21:49:01] <Wooble> lpapp: there's no particular reason for an exfat fs to store the .pth file it's trying to read there in a specific encoding.
[21:49:03] <SnoopJ> lpapp, like I said, I don't think the problem is the FS. Line 163 is after open() has happened, the error is coming from iterationg of the file.
[21:49:12] <SnoopJ> iteration*
[21:49:54] *** Joins: PointThink (~PointThin@acap126.neoplus.adsl.tpnet.pl)
[21:50:11] *** Quits: PointThink (~PointThin@acap126.neoplus.adsl.tpnet.pl) (Read error: Connection reset by peer)
[21:50:12] <SnoopJ> The error makes it look like the data *in* the file is not UTF-8
[21:50:29] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[21:52:04] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:52:04] <bjs> NeilRG: probably not
[21:52:11] <SnoopJ> lpapp, this is an interpreter that is being vendored to the user inside an application?
[21:52:44] <bjs> NeilRG: it might still be convenient to use async to schedule the thread (and collect any errors that might happen) as these GUI things tend to have event loops hanging around already for that kind of thing, but you'll probably still want the thread to run the C function
[21:53:28] <NeilRG> bjs, okay thanks.  Yes, I think I heard taht PyQt has its own event loop that could theoretically have been written with async (but isn't)
[21:53:48] <Sheilong> When I try to install a package using pip  I get 'Directory 'packaging_tutorial/' is not installable. File 'setup.py' not found. However there is a setup.cfg in that directory.
[21:54:03] *** Joins: tobybl (~tobybl@213.31.134.21)
[21:54:05] <grym> Sheilong: old pip?
[21:54:19] *** Quits: tobybl (~tobybl@213.31.134.21) (Remote host closed the connection)
[21:54:39] <Sheilong> grym: What you mean by old pip?
[21:54:48] <SnoopJ> Sheilong, what pip version is this?
[21:54:51] <grym> Sheilong: what's that/pip/you/just/called --version
[21:55:16] <Sheilong> pip 9.0.1
[21:55:25] <grym> uhhh yeah that's old
[21:55:54] <grym> Sheilong: make a venv do not update pip outside of one, and then thatvenv/bin/python -m pip install --upgrade pip and then try venv/bin/python -m pip install that/directory/you/just/failed/on again
[21:55:55] <Sheilong> I don't know if build is required for that but I also got an error running 'python3 -m build'.
[21:56:12] <grym> pip 9 might not even have build
[21:56:23] *** Quits: CodeGeek (~codegeek@about/java/CodeGeek) (Quit: Connection reset by beer)
[21:56:46] *** Parts: aniketgm (~Aniket@49.36.107.115) ()
[21:56:55] <SnoopJ> Sheilong, is this pip one provided by your OS? Ubuntu 18.04 or older (or a Debian), maybe?
[21:57:03] <grym> ( telling a system interpreter's pip to update itself is playing with fire)
[21:57:28] <Wooble> also if you're reading a packaging_tutorial that doesn't already have you using a venv probably throw it away ;)
[21:57:38] <Sheilong> SnoopJ: I think so. I don't remember about upgrading it. And Yes, I use Ubuntu 18.04.
[21:57:53] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:58:18] <Sheilong> I need to create a new venv after upgrading pip?
[21:58:27] <grym> no, you need to upgrade the venv's pip
[21:58:28] <SnoopJ> other way around: make a venv, then upgrade pip inside the venv
[21:58:33] <grym> (and _not_ your base pip)
[21:58:40] <grym> (leave base pip alone)
[21:58:42] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[21:59:07] *** Joins: thiras (~thiras@user/thiras)
[21:59:11] <SnoopJ> Ubuntu vendors a more modern pip starting in 20.04, 18.04 unfortunately has this older one from 2016
[22:00:02] <Sheilong> The version I told you was the one from a venv. Running  pip --version again from the main python shows that the version is  20.1.1
[22:00:33] <grym> ok, well, then feel free to update that venv's pip
[22:00:38] <grym> that's safe
[22:00:39] <lpapp> SnoopJ: yes, we grab and install python there
[22:00:58] <lpapp> SnoopJ: because the app can be controlled via python without the user having to install that separately.
[22:01:13] <lpapp> but it is vanilla python without hacks
[22:01:16] <SnoopJ> lpapp, do you install it on the user's machine, or before distribution?
[22:01:42] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Ping timeout: 276 seconds)
[22:01:50] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[22:02:06] <Wooble> lpapp: does your build process create a .pth file somewhere manually?
[22:02:09] <Sheilong> I did the upgrade. However build and installing the package still give some trouble.
[22:02:09] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[22:02:12] <SnoopJ> I'm guessing your culprit here is the .pth file itself and it should be encoded in UTF-8 instead of [whatever it is] but worth checking
[22:03:11] <lpapp> Wooble: no idea
[22:04:06] <lpapp> SnoopJ: before deployment
[22:04:15] <lpapp> SnoopJ: it is part of Contents/MacOS after the dmg installation
[22:04:16] <Sheilong> https://bpa.st/GS3A
[22:04:28] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 264 seconds)
[22:04:43] <lpapp> Wooble: find . -name \*.pth\* yields no results
[22:05:23] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[22:05:26] <SnoopJ> lpapp, it's *possible* there is something about that process that is setting up a locale expectation that isn't panning out on the user machine, but I'm still guessing the file is the problem. I would reach into site.py and stick a breakpoint before line 163 to see what file it loaded
[22:05:33] <LuxuryMode> What is the recommended way to use/manage virtual envs?
[22:05:47] <LuxuryMode> venv?
[22:05:48] <lpapp> SnoopJ: it is on the customer's machine
[22:05:53] <lpapp> I cannot ask them such tech-savy things
[22:05:58] <SnoopJ> lpapp, you can't reproduce the failure locally at all?
[22:06:09] <lpapp> I do not have an exfat external drive, no :)
[22:06:34] <lpapp> External Mac OS Extended (Journaled) works for her
[22:06:39] <arkanoid> I'm trying to add a row to a pandas dataframe via df[my_int] = my_list_of_lists. It works, but I'm trying to go strict pylance mode and I'm try to get over this typing error: Argument of type "int" cannot be assigned to parameter "idx" of type "MaskType | StrLike | Tuple[MaskType | Scalar | Index[Unknown] | Sequence[Scalar], MaskType | Scalar | Sequence[Scalar]]" in function "__setitem__"
[22:06:46] *** Quits: ckdCreations (~ckdCreati@147.55.133.132) (Read error: Connection reset by peer)
[22:06:56] *** Joins: tijuco (~tijuco@user/tijuco)
[22:07:01] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[22:07:06] <arkanoid> s/df[my_int]/df.loc[my_int]/
[22:08:17] <lpapp> SnoopJ: she is running the app from the external hard drive, including the python files, so exfat
[22:08:20] <lpapp> but the host os is mac
[22:08:20] <Wooble> Sheilong: you misspelled "setuptools"
[22:08:28] <Sheilong> I figured out I guess. My setuptools was version (39.0.1). I upgraded it to 59.4.0-p, however the problem remains
[22:08:28] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Quit: Client closed)
[22:08:38] <Wooble> Sheilong: (as "setupools")
[22:09:13] <Sheilong> Wooble: Thanks.
[22:09:35] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[22:10:30] <Sheilong> Running build is necessary to install a local package?
[22:10:58] <SnoopJ> lpapp, my only guess is that maybe the interpreter is taking its cue about how to decode the file from some of these OS/FS details, but it seems quite strange to me that it would work from one FS and not from another, especially since it's happening *after* open() has been called.
[22:11:21] *** Joins: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul)
[22:11:33] *** Quits: ub (~Thunderbi@p200300ecdf0ba2aaa54fdd1e9768c0b5.dip0.t-ipconnect.de) (Quit: ub)
[22:11:56] *** Joins: ub (~Thunderbi@p200300ecdf0ba2aaa54fdd1e9768c0b5.dip0.t-ipconnect.de)
[22:13:36] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:13:41] *** Quits: nosoul (nosoul@gateway/vpn/protonvpn/nosoul) (Ping timeout: 245 seconds)
[22:14:15] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[22:14:33] *** Joins: zebrag (~chris@user/zebrag)
[22:14:34] <SnoopJ> Not sure what else I'd try here, maybe messing around with some of the locale options. It's hard to say without knowing what file it is and where that came from
[22:15:08] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[22:15:50] *** Quits: tijuco (~tijuco@user/tijuco) (Quit: Leaving)
[22:17:49] *** Quits: jay-m126_ (~jay-m@129.0.76.215) (Read error: Connection reset by peer)
[22:17:59] *** Joins: CodeGeek (~codegeek@about/java/CodeGeek)
[22:18:01] *** Quits: jay-m126 (~jay-m@129.0.76.215) (Read error: Connection reset by peer)
[22:18:28] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[22:20:19] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[22:20:28] <jinsun_> arkanoid: probably an issue with the type stubs bundled with pylance, you can report here https://github.com/microsoft/python-type-stubs
[22:20:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[22:20:56] *** Joins: zeden (~zeden@user/zeden)
[22:21:17] <jinsun_> arkanoid: probably they should have allowed int also here https://github.com/microsoft/python-type-stubs/blob/1515c4aee7de00c90cc0d17d0486f35fc06b9b82/pandas/core/frame.pyi#L76
[22:21:21] *** Joins: jay-m126_ (~jay-m@129.0.76.210)
[22:21:28] *** Joins: jay-m126 (~jay-m@129.0.76.210)
[22:21:43] <jinsun_> or any Scalar I guess
[22:21:47] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[22:22:13] <grym> Sheilong: i usually just thevenv/bin/python -m pip install
[22:22:24] *** Joins: fikran (~fikran@user/fikran)
[22:23:05] *** Quits: delvian (~delvian@41.13.194.126) (Ping timeout: 256 seconds)
[22:23:52] *** Quits: Jong (~Jong@2620:10d:c090:400::5:6ce8) (Read error: Connection reset by peer)
[22:24:12] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[22:24:32] *** Joins: zebrag (~chris@user/zebrag)
[22:24:42] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:24:58] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[22:25:17] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[22:26:00] *** Joins: daoudr (~daoudr@2a02:1205:c690:ca10:843a:6e21:9631:a11f)
[22:26:01] <arkanoid> jinsun_: thanks
[22:26:56] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[22:27:30] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Quit: beli6147)
[22:28:15] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[22:29:28] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-bc7b-beb0-653c-822c.res6.spectrum.com)
[22:30:58] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[22:31:36] *** Joins: singularity00 (~singulari@85.187.64.126.client.entry.bg)
[22:31:50] *** Joins: ikus060 (~ikus060@96.127.228.230)
[22:32:04] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[22:32:04] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[22:32:04] *** finn_elija is now known as FinnElija
[22:33:54] *** Quits: jay-m126 (~jay-m@129.0.76.210) (Ping timeout: 256 seconds)
[22:33:54] *** Quits: jay-m126_ (~jay-m@129.0.76.210) (Ping timeout: 256 seconds)
[22:36:23] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[22:37:36] *** Joins: RozhyarMM (~RozhyarMM@2a0d:4f00:12:2dae:4062:2393:b038:fb14)
[22:37:41] *** Joins: minip (~minip@user/minip)
[22:37:51] <LuxuryMode> Running into all kinds of problems getting my environment set up with the M1 chip. https://bpa.st/ESLQ Any ideas on how to go about installing and using pyenv when using M1? What I'm seeing suggested is prepending commands with `arch -arm64`...no idea if this is correct though.
[22:38:06] *** Quits: zeden (~zeden@user/zeden) (Remote host closed the connection)
[22:38:14] <Helenah> https://termbin.com/kxbh
[22:38:28] <Helenah> Error at the bottom.
[22:38:36] *** Quits: Vornotron (~Vornicus@2603-8000-5d07-7ef0-f8f1-3b3e-ffc0-275b.res6.spectrum.com) (Read error: Connection reset by peer)
[22:38:39] <Helenah> But I don't see where it isn't defined. LOL
[22:39:12] <Helenah> And also someone said I was over handling exceptions, I'm still kinda grasping AsyncIO and AsyncSSH and not sure how to sort that out.
[22:39:26] <Wooble> Helenah: it's self.clientID but you try to reference as just clientID at one point.
[22:39:41] *** Joins: zeden (~zeden@user/zeden)
[22:39:42] <Helenah> Wooble: Where? I searched the code, I see no clientID
[22:39:55] <Helenah> I literally searched TWICE lol
[22:39:55] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[22:39:56] <Wooble> Helenah: 3rd line of run()
[22:40:01] <Helenah> o.o
[22:40:03] <BrenBarn> it's in your `async def run`
[22:40:05] * Helenah rechecks
[22:40:32] <Helenah> Oh!
[22:40:36] <Helenah> Damn you stupid eyes!
[22:40:50] <Helenah> oh and the computer is always right lol, it has better vision than me :D
[22:40:57] <Helenah> Thankies :3
[22:41:23] <Helenah> Oh I'm like a programmer version of Gordon Ramsey haha :D
[22:41:26] <Wooble> no problem, we've all been there :)
[22:41:29] <Helenah> CURS YOU! :D
[22:41:32] <Helenah> sort thingie
[22:41:36] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[22:41:45] <Helenah> Wooble: :)
[22:42:00] *** Joins: a0z1 (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net)
[22:42:33] <Helenah> Okay so now I still get an error but this time the error is 8
[22:42:35] <Helenah> er... 0
[22:42:44] <Helenah> Whatever that... means lol
[22:42:49] * Helenah checks for prints
[22:42:50] *** Joins: phox (~phox@c-98-247-195-44.hsd1.wa.comcast.net)
[22:42:54] <Helenah> or returns lol
[22:43:03] <phox> Hey, wondering if there is explicit order of evaluation around k:v in a dict comp, i.e. {kexpr:vexpr for ...}, such that I could use PEP-572 := from one to the other?
[22:43:36] <Helenah> One print it prints 0 but that's the error apparently
[22:43:38] <Helenah> lol
[22:44:04] <Helenah> It prints an exception variable, same line where Connection Error is printed
[22:44:26] <phox> e.g. {(v:=f(i))['k']:v for i in foo.items()} kind of thing (or the inverse depending on evaluation ordering)
[22:44:55] <phox> (or is PEP-572 lazy-resolved such that it matters less?)
[22:45:07] *** Quits: Hazza (~Haxxa@125-63-20-105.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:46:17] <Wooble> phox: the key will be evaluated before the value.
[22:46:39] <Helenah> Sometimes I wish I was a self-coding computer LOL :D
[22:46:46] <Helenah> Write code without a care!
[22:46:47] <Helenah> lol
[22:47:04] <phox> Wooble: ltr?  ok cool thanks!!  (so, as I wrote it)
[22:47:33] *** Joins: Haxxa (~Haxxa@125-63-20-105.ip4.superloop.com)
[22:47:45] <Helenah> So... what does 0 even mean? lol
[22:47:49] <Helenah> I need damn lines!
[22:48:04] <Wooble> Helenah: "no error" but you got "0" instead of 0, maybe?
[22:48:24] <Helenah> Oh
[22:48:33] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:2446:13de:20ec:764f) (Quit: smeeagle)
[22:48:50] <Helenah> It is a problem though like the last you helped me fix, I connect once works, connect twice throws that
[22:48:52] <Helenah> at me
[22:49:06] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Remote host closed the connection)
[22:50:16] <Wooble> Helenah: well, just a guess, but something inside `if error: print(error)` printing a 0 seems suspicious.
[22:51:04] <Helenah> I noticed I don't get line numbers either that's when someone told me I was over handling exceptions but I don't know how, where or even how to fix it. lol
[22:51:13] *** Quits: kdc (~kdc@196.211.197.159) (Remote host closed the connection)
[22:51:16] *** Quits: onichomp (~onichomp@2806:264:4404:8266:d177:e7f1:3914:58e4) (Read error: Connection reset by peer)
[22:51:53] *** Joins: onichomp (~onichomp@2806:264:4404:8266:d177:e7f1:3914:58e4)
[22:52:02] *** Joins: zommKa (~ccctttmat@2001:470:69fc:105::b947)
[22:52:33] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:52:49] <zommKa> Can you tell all python scripts to kill themselves if they run how of ram before a computer crash?
[22:53:10] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:53:11] <grym> oom killer will do that for you already, no?
[22:53:23] <Wooble> zommKa: or you'll just get a MemoryError
[22:53:26] *** Joins: neachdainn (~nate@50.224.226.50)
[22:53:50] <neachdainn> Is there a guide anywhere that explains what needs to be done for a C extension to be supported in an IDE/LSP?
[22:54:07] <phox> oomkiller and memoryerror are orthogonal, oomkiller is due to overcommit
[22:54:15] *** Quits: osxtra (~root@136.49.108.80) (Ping timeout: 250 seconds)
[22:54:40] <zommKa> grym: I was using pymesh's docker (https://pymesh.readthedocs.io/en/latest/installation.html) and it didn't ... maybe it was caused by docker?
[22:54:47] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:54:54] <Wooble> in any event you're unlikely to crash the entire machine by running out of memory in any case :/
[22:54:57] <phox> zommKa: is overcommit turned on?
[22:55:07] <phox> Wooble: well, depends what the oomkiller picks :D
[22:55:11] <Helenah> For some reason I no longer get 0 and I only like took a break like 5 mins.
[22:55:12] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:55:18] <phox> just breaks it in creative ways, usually
[22:55:27] <zommKa> I crashed it 3 times in a row after increasing the swap file each time
[22:55:32] <Helenah> Oh now I get it
[22:55:57] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[22:55:57] *** Joins: R035N3R (~phobos@user/r035n3r)
[22:56:10] *** Quits: R035N3R (~phobos@user/r035n3r) (Client Quit)
[22:56:25] <Wooble> Helenah: just stick "raise" at the end of the problem except: block and you'll get a traceback, although whether that helps if the problem is sporadic... who knows?
[22:56:42] <SnoopJ> neachdainn, it may depend on the particular integration, I would think the documentation for [whatever] would at least describe how it discovers what is necessary for completion/etc.
[22:56:48] <zommKa> phox: not sure... trying to find out
[22:56:56] <Wooble> Helenah: (or logging.exception() to keep handling the error but get useful output while continuing.)
[22:57:39] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[22:57:48] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[22:57:50] <neachdainn> SnoopJ: Thanks! I'll try to find the documentation for my specific LSP then.
[22:58:18] <SnoopJ> neachdainn, at a complete guess, I would think it's probably "declare the things the integration will know about somewhere," which miiight be something you could do with type stubs.
[22:59:07] <neachdainn> I'm hoping it doesn't come to stubs. What I'm trying to do is see if I can get LSP to work with the actual C extension so we can get rid of the stubs. Hahah
[22:59:45] *** Joins: esv (~esv@74.124.178.154)
[23:00:29] <SnoopJ> You might be able to rig up some machinery in the extension that registers methods/etc. with a thingy that builds the necessary reply to a "what can you do" query, but this is not something I'm familiar with
[23:00:55] <Helenah> Thankies :3
[23:02:03] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:02:16] <SnoopJ> neachdainn, what bothers you about the stubs? Just a pain to maintain them?
[23:02:32] <neachdainn> Yeah. I suppose the worst case would be rigging up something that produces the stub files. It would probably require a second binary but having the same do both would be good.
[23:02:44] <phox> zommKa: /proc/sys/vm/overcommit_memory  (getting pretty far outside of #python tho)
[23:03:13] <SnoopJ> neachdainn, yea, codegen was my other thought
[23:03:14] <neachdainn> SnoopJ: I'm hoping to be in a situation where I don't have to make sure the stubs are in sync. That is, I want the process of editing the extension to also edit the information provided to the LSP
[23:03:19] <Helenah> Awesome, this helps! :D
[23:03:22] <Helenah> Thankies Wooble
[23:03:23] <Helenah> :D
[23:03:34] <phox> Is there a slick way, somewhat like filter (or whatever) where I can filter a list and end up with the result AND the input minus the result (so split the iterable instead of just filter)?
[23:03:37] <zommKa> phox: value 0
[23:03:42] <phox> zommKa: so off
[23:03:48] <phox> so you won't oomkill anythin
[23:03:49] <phox> g
[23:03:54] <zommKa> I should turn this ON?
[23:03:56] <phox> so you'll run out of memory and other things will have allocations fail
[23:04:01] <phox> IMO no but that's your decision
[23:04:13] <zommKa> ok, thanks for the info!
[23:04:16] <phox> gl
[23:05:41] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[23:05:50] <Wooble> phox: sorted with a key function that bins into good/bad?
[23:05:53] <SnoopJ> phox, itertools.groupby() can do that, although it gives you contiguous ranges which you'd have to join into the two results you mention. I'd probably just write a function.
[23:06:26] *** Joins: meti (~meti@user/meti)
[23:06:27] *** Quits: zlg (~zlg@user/zlg) (Quit: WeeChat 2.8)
[23:06:33] <SnoopJ> Wooble, is there a way to do that without the second scan?
[23:06:46] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 256 seconds)
[23:06:50] <phox> Wooble: not sure I follow, sorted?  basically like partition() at https://docs.python.org/dev/library/itertools.html#itertools-recipes
[23:07:33] *** Joins: sniperwolf (~sniperwol@91.230.98.1)
[23:07:52] <phox> SnoopJ: yeah I might, wanted to do something simple with an existing thing but if it doesn't exist.. :)
[23:08:41] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:09:18] <SnoopJ> phox, I think what Wooble means is `intermediate = sorted(inpt, key=lambda val: 1 if predicate(val) else -1)` and then split that list where the test result changes
[23:09:36] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[23:09:54] <Wooble> or I misread the question and didn't see the result was 2 separate lists.
[23:10:17] *** Joins: dez (uid92154@user/dez)
[23:10:45] <jinsun_> if you count more-itertools as existing thing then https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.partition
[23:11:04] <jinsun_> all itertools recipes are there
[23:11:15] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Ping timeout: 256 seconds)
[23:11:33] <SnoopJ> yea, partition() is basically the function I'm thinking of, except that it uses all those idiosyncratic primitives and I'd just be lazy and write something naive/legible :)
[23:11:48] *** Quits: vulpes_vulpes (~vulpes_vu@62-64-204-115.dynamic.dial.as9105.com) (Remote host closed the connection)
[23:11:59] <Wooble> just importing it from more_itertools is pretty legible :)
[23:12:21] * SnoopJ nods
[23:12:25] <Wooble> (although it vaguely bothers me for something called "partition" to have a 2-tuple instead of a 3-tuple :) )
[23:12:26] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[23:12:32] <Wooble> s/have/give
[23:12:44] <SnoopJ> [sad number theory noises]
[23:12:51] *** Joins: ckdCreations (~ckdCreati@147.55.130.33)
[23:13:42] <Wooble> I mean I guess to be foolishly consistent with str.partition the 2nd item would be the predicate function which would be weird. :)
[23:14:59] *** Quits: bambams (~bambams@user/bambams) (Remote host closed the connection)
[23:15:08] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[23:16:07] <phox> Wooble: or values that give the same result both ways with the callback, but.. that's expensive
[23:16:10] <phox> :)
[23:16:38] <phox> (and doesn't work for the sorted() version at least, as-written)
[23:17:09] <SnoopJ> phox, "same result both ways?"
[23:17:15] *** Joins: bambams (~bambams@user/bambams)
[23:17:56] <phox> as in if you were working with a comparator instead of a key value, for 3-possible-result comparisons those that would yield 0
[23:18:09] <phox> or for something like <=, where a <= b and b <= a
[23:18:13] <SnoopJ> sorted() has the upshot of supporting an arbitrary number of discrete output categories but is I think O(n²ln(n)) ?
[23:18:29] <SnoopJ> O(n ln(n)) for the sort and then another factor of n for the scan that splits it up
[23:18:36] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (Quit: upekkha)
[23:18:47] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[23:19:11] *** Quits: a0z1 (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net) (Quit: Leaving)
[23:19:14] *** Quits: Andrynet1 (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[23:19:37] <phox> I do like the tee | filter[false] approaches, but yeah I feel like this is something (for the more general n-result case) should become part of the language... one day
[23:20:05] <SnoopJ> `def splititup(it, predicate): res = defaultdict(list); for val in it: res[predicate(val)].append(val);; return res` is the first thing I'd think of for an arbitrary predicate with discrete categories
[23:20:36] <SnoopJ> assuming the category markers are hashable anyway :)
[23:20:55] <phox> yeah more or less.  although in most cases the caller is probably looking to unpack it, and we still (somehow) don't do that by key (that I know of)
[23:21:06] <phox> I mean youcan unpack .values() but that's not strictly ordered so
[23:21:10] *** Joins: Andrynet1 (~Andrynet@190.152.206.33)
[23:21:13] <phox> hmmmm.
[23:21:33] <phox> all of this makes me miss the heck out of R, lol
[23:21:42] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:21:44] <SnoopJ> phox, I'm not entirely sure I know what you mean. With the defaultdict solution there you'd look at items() to get (key, things_matching_that_key_in_original_order)
[23:22:12] <phox> SnoopJ: oh fo rsure, you just can't unpack the result on one line e.g.  in, out = partition(foo, pred)
[23:23:12] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[23:23:12] <phox> R doesn't do the unpack assignment thing but would be like mask = pred(foo_list) ; in = foo_list[mask] ; out = foo_list[!mask]
[23:23:12] <SnoopJ> phox, `keys, values = zip(*res.items())`
[23:24:00] <jinsun_> phox: values is ordered nowadays if you forget about 3.6
[23:24:04] <SnoopJ> phox, have you messed around with pandas at all? Its DataFrame is pretty much stolen from R's model, albeit not...super well.
[23:24:23] <phox> jinsun_: right but you don't know what order you first encountered the filter category keys in in the data
[23:24:26] <phox> :P
[23:24:27] <SnoopJ> Still no 'real' NA :(
[23:24:50] <SnoopJ> at least not a complete-solution variety. I think there's an experimental thingy that is limited to some dtypes
[23:24:57] <phox> SnoopJ: I have, but it's a dependency I avoid packing around professionally for non-IDE stuff, and it's slow and fat :P
[23:25:11] <jinsun_> does R have "real" NA, not the float thing?
[23:25:22] <SnoopJ> jinsun_, yea, it's distinct from NaN
[23:25:24] <phox> R has a real NA value for any type yeah
[23:25:50] <phox> I mean if someone would port Julia to be 0-based I might stop using R + Py... :P
[23:25:51] <SnoopJ> I think it's *implemented* using the weird texture on IEEE 754 NaN that is left unmentioned in polite company, though?
[23:26:29] <SnoopJ> phox, I'd be surprised if someone hasn't already written an Array subclass that does that :P
[23:26:31] <phox> I think the FFI passes through something more explicit than that but it might be internally...
[23:26:47] <phox> SnoopJ: for Julia?
[23:26:50] <SnoopJ> yea
[23:27:07] <phox> I mean, it HAS the ability to do some things 0-based, but that doesn't mean they translate across the whole language correctly
[23:27:11] * SnoopJ nods
[23:27:19] <phox> which is more the goal, nobody needs 1-based anything (mostly)
[23:27:20] *** Joins: cheater (~Username@user/cheater)
[23:27:32] <SnoopJ> I can live with 1-based indexing, I can't live with an immature linalg ecosysetm
[23:27:43] <SnoopJ> and Julia's gaps are weirdly persistent
[23:27:59] <SnoopJ> (but this is veering into #python-offtopic)
[23:28:07] <phox> yep lol
[23:28:09] <fannagoganna> also, how will Julia properly connect with the whole ecosystem of everything-else-Python?
[23:28:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:28:27] <phox> anyways, sad panda over here would love some actual R-style vector indexing/slicing games in Py
[23:28:40] <phox> replace 3 nested comprehensions with foo[a[x]][y] HA
[23:28:44] <SnoopJ> phox, of what sort?
[23:28:47] <phox> ^
[23:28:51] <SnoopJ> for builtin types?
[23:28:56] <fannagoganna> unfortunately, Julia did not come first (like R came before Python), and Julia's use case isn't overwhelming -- R >> Python still in statistics, for instance.
[23:28:56] <phox> probably.
[23:29:09] <phox> not 100% sure it can just be done like that, but something close at least
[23:29:10] <SnoopJ> fannagoganna, I imagine it will probably interface the same way any other FFI is done
[23:29:44] <phox> fannagoganna: Julia supports Py libs
[23:29:47] <SnoopJ> phox, probably never for the builtins, but in numpy-land the indexing story is pretty dang good
[23:30:10] <phox> SnoopJ: yeah I mean I would settle for using special types in a more-lightweight NumPy thing
[23:30:20] <phox> but NumPy is R stuff on top of Python stuff which results in very bloaty and slow
[23:30:23] <SnoopJ> phox, do you know about structured arrays in numpy?
[23:30:36] <phox> I might have, been a while since I numpy'd
[23:30:56] <SnoopJ> heterogeneous dtypes let you kinda kludge together something that behaves like a dataframe without all of pandas
[23:31:11] <phox> ah
[23:31:17] <phox> right because column major etc etc
[23:31:28] <phox> mostly it's the 1D vector stuff I miss the hell out of from R
[23:31:47] <phox> obviously some small % of the time, N-dim would be useful, but the everyday killer is the base case
[23:31:50] <SnoopJ> well, it supports arbitrary ravel order, but it knows how to have different types in different slots
[23:32:05] <phox> mm
[23:32:12] *** Joins: Inline (~Inline@aftr-37-201-240-100.unity-media.net)
[23:32:22] <SnoopJ> I've been wondering for a while if Python will ever have anything that is akin to the tidyverse. I think I'm settling on "no"
[23:32:37] <phox> idk that either :o
[23:33:07] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[23:33:17] <SnoopJ> abusing the %>% operator for fun and profit
[23:33:26] *** Joins: Betal (~Betal@user/betal)
[23:36:38] <stewie925> hey guys, is there a way to pip install a package to a project folder instead of the default /usr/lib/site-packages?
[23:37:06] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[23:37:12] <Swayze> use a venv @ stewie925
[23:37:35] <SnoopJ> stewie925, are you looking for a way to install a package that you can keep editing for development?
[23:37:46] <jinsun_> yes and you shouldn't be installing with pip into  /usr/lib
[23:40:49] <stewie925> hi SnoopJ, I am experimenting with this so I can export a python project to AWS Lambda
[23:41:34] <stewie925> hmm @ Swayze, venv sounds like a good workaround....
[23:41:36] <SnoopJ> stewie925, then I would recommend using a venv, if you can
[23:41:50] <SnoopJ> I'm not really familiar with the variety of tricks people do to use Lambda like not-Lambda, though.
[23:42:21] <stewie925> SnoopJ, yes will do that, and thanks!   And thanks to Swayze as well
[23:42:35] <SnoopJ> shiv might be a good choice on Lambda, though? You get a single file with your dependencies/etc. which is unpacked at runtime, but that may not be too expensive in this context.
[23:42:49] <SnoopJ> a venv would still be best, but it's a suggestion if that one doesn't pan out
[23:43:28] <coc0nut> hehe took a while, but i nailed the task :p
[23:43:43] <stewie925> Snoopj I'll try to copy/move the pymsql folder to my project folder, and then export that folder to AWS Lambda, that might work :)
[23:43:47] <coc0nut> just needed some minutes sleep
[23:44:16] <stewie925> just created a free tier account that would last 12 months :)
[23:44:34] *** Joins: ccallahan (~ccallahan@redhat/ccallahan)
[23:46:14] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:46:54] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[23:47:25] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:1401:22a5:674e:d69b)
[23:47:33] *** Quits: roteiro (~roteiro@i6DFA381C.versanet.de) (Quit: Client closed)
[23:49:33] *** Joins: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net)
[23:49:39] *** Quits: roe (~mroe@dyn209177.cc.lehigh.edu) ()
[23:49:47] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Ping timeout: 256 seconds)
[23:50:07] <phox> SnoopJ: yeah I think I'm just going to run with the defaultdict approach, inline:  res = defaultdict(list) ; [res[pred(x)].append(x) for x in foo]
[23:50:48] <SnoopJ> phox, why not give it a nice name?
[23:51:03] <phox> just trying to keep it short for IRC :P
[23:51:31] <phox> I might actually use a list [[],[]] so I can index with the bool value and then reliably unpack it later too
[23:51:32] <SnoopJ> no I mean like `res = category_split(foo, pred)` or somesuch
[23:51:35] <phox> or tuple
[23:52:01] <phox> maybe?
[23:52:18] * phox will think about it, trying not to pollute this messy app anymore either :)
[23:52:49] <SnoopJ> in my experience, trying to cram things inline results in a lot of write-only code
[23:52:53] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:53:17] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:53:54] <SnoopJ> which is not to say I don't do it, but when I'm at the point of using list comprehensions like that, I usually stop and ask myself if I'm golfing :)
[23:55:38] *** Joins: jay-m126 (~jay-m@129.0.76.210)
[23:55:48] *** Joins: jay-m126_ (~jay-m@129.0.76.210)
[23:57:40] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:58:44] *** Joins: Auron (~Auron956@user/auron)
[23:58:53] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[23:59:26] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[23:59:42] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Read error: Connection reset by peer)
