[00:04:36] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[00:05:33] *** Quits: jmft2 (~JMFT@82.3.54.26) (Ping timeout: 252 seconds)
[00:05:47] *** Quits: Cyp (~cyp@192038129116.mbb.telenor.dk) (Excess Flood)
[00:06:18] *** Joins: Cyp (~cyp@192038129116.mbb.telenor.dk)
[00:13:50] *** Joins: LiftLeft (~LiftLeft@191.96.227.138)
[00:15:57] *** Quits: cisme_ (~cisme_@user/cisme/x-1186982) (Ping timeout: 258 seconds)
[00:19:16] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[00:20:09] *** Joins: Aayush (~Alvin@user/aayush)
[00:27:27] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 258 seconds)
[00:28:45] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:29:03] *** Joins: gehn (~gehn@user/gehn)
[00:32:45] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[00:33:35] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 258 seconds)
[00:35:42] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: Leaving)
[00:36:14] *** Joins: chonkbit (~chonkbit@192.145.117.165)
[00:37:38] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[00:37:42] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[00:38:11] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[00:42:24] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 258 seconds)
[00:42:41] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Ping timeout: 250 seconds)
[00:45:50] *** Quits: zakame (~zakame@user/zakame) (Quit: WeeChat 2.9)
[00:49:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:49:22] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[00:52:53] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[00:54:32] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 272 seconds)
[00:58:01] *** Joins: Noustropos (~Noustropo@2a00:f41:2804:1680:a6df:7271:194f:9c38)
[00:59:39] *** Quits: IceMichael (~IceMichae@dynamic-046-114-157-153.46.114.pool.telefonica.de) (Ping timeout: 258 seconds)
[01:01:06] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[01:02:21] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.2)
[01:02:39] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 276 seconds)
[01:02:54] *** Gustavo6046_ is now known as Gustavo6046
[01:02:55] <Donitz> n> let n = 0; switch (7) { case n=5: console.log('a'); break; case n++: break; case n++: console.log('b'); break; };
[01:02:56] <jellobot> (okay) undefined
[01:03:11] <Donitz> hmm
[01:03:13] <Donitz> that didn't work
[01:03:15] <Donitz> why
[01:03:23] <GreenJello> ++n
[01:03:29] <Donitz> it should still work
[01:03:31] <Donitz> umm
[01:03:31] <Donitz> wait
[01:03:32] <Donitz> yeah
[01:03:39] <Donitz> it's 5 ++, then 6 ++
[01:03:39] *** Quits: KevinX (~KevinX@185.245.86.84) (Read error: Connection reset by peer)
[01:03:52] *** Joins: KevinX (~KevinX@185.245.86.84)
[01:03:54] <Donitz> n> let n = 0; switch (6) { case n=5: console.log('a'); break; case n++: break; case n++: console.log('b'); break; };
[01:03:55] <jellobot> (okay) b
[01:04:07] <sheetjs> nice, its like switch(true) taken to the next level
[01:04:16] <Donitz> I'm actually using this
[01:04:20] <Donitz> to lay out a map
[01:04:27] <Donitz> the map needs a few infinite loops inside it
[01:04:30] <Donitz> but then structured sections
[01:05:11] *** Joins: IceMichael (~IceMichae@dynamic-046-114-157-153.46.114.pool.telefonica.de)
[01:05:17] <Donitz> originally I just did case 0: case 1:
[01:05:18] <sheetjs> i dont doubt it's being used or that it's actually useful
[01:05:27] <Donitz> but it's a huge PITA if you need to add new things at the start
[01:05:47] <sheetjs> it's the closest we'll get to the glory of duff
[01:05:57] <sheetjs> https://en.wikipedia.org/wiki/Duff%27s_device in case you aren't familiar
[01:06:10] *** Joins: Northwoods (~Northwood@103.223.9.125)
[01:06:19] <Donitz> oh wow
[01:06:24] <Donitz> so it's quite similiar to my intention
[01:06:29] <Donitz> making something cinematic :D
[01:06:35] <GreenJello> an alternative would be an array of functions
[01:06:48] <Donitz> yes, but it's a bit... eh
[01:06:53] <sheetjs> the only recommendation i'd make is putting it in parens
[01:07:10] <sheetjs> actually don't
[01:07:32] <Donitz> https://hastebin.com/ihereyuyox.coffeescript
[01:07:48] <Donitz> wait
[01:07:55] <Donitz> no, no that's what I meant
[01:08:04] <Donitz> I was confused by my own nextSegmentIndex variable
[01:08:57] <sheetjs> if that's the snippet, it is honestly a bad use of the side effect
[01:09:24] <Donitz> it's not done yet
[01:09:30] <Donitz> I will have sections that will go on forever
[01:09:33] <Donitz> so basically it becomes like
[01:09:57] <Donitz> case n<10000; case n=10000: case n++:
[01:09:59] <Donitz> and so on
[01:10:05] <Donitz> whups
[01:10:06] <Donitz> I mean
[01:10:10] <Donitz> damn, let me think
[01:10:11] <sheetjs> then you'd want switch(true)
[01:10:22] <Donitz> I am comparing the segment index to n
[01:10:42] <Donitz> case... umm
[01:10:42] <Donitz> hmm
[01:10:48] <sheetjs> https://github.com/SheetJS/sheetjs/blob/master/xlsx.flow.js#L3195
[01:11:26] *** Quits: chonkbit (~chonkbit@192.145.117.165) (Quit: Konversation terminated!)
[01:11:31] <Donitz> case nextSegmentIndex<10000; case n=10000: case n++:
[01:11:35] <Donitz> there
[01:11:37] <Donitz> that should do it
[01:11:45] <sheetjs> but again, you'd be doing a switch(true)
[01:11:54] <Donitz> not in this case, n=10000 returns 10000
[01:11:59] <Donitz> which is compared against next segment index
[01:12:05] <Donitz> it's just a wait to not have to add nextSegmentIndex to each case
[01:12:08] <Donitz> way*
[01:12:21] <sheetjs> you could just write n = nextSegmentIndex
[01:12:35] <Donitz> let me think
[01:12:42] <Donitz> I'm not sure how that would work
[01:12:48] <Donitz> what is it comparing against then
[01:13:07] <sheetjs> switch(true) { case some_condition: break; case another_condition: }
[01:13:23] <sheetjs> in your eaxmple, it would be something like
[01:13:44] <sheetjs> switch(true) { case n == 0: ... case n == 1: ... case n == 2: ... }
[01:14:14] <sheetjs> https://github.com/SheetJS/sheetjs/blob/master/bin/xlsx.njs#L244 i think this is a better example because it uses both the switch(true) and the fallback
[01:14:17] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[01:14:18] <sheetjs> *fallthrough
[01:14:44] <Donitz> https://hastebin.com/gumofuputu.kotlin
[01:14:47] <Donitz> I updated the example
[01:15:07] <Donitz> according to that, the section in the middle can continue for 10000 segments
[01:15:08] <GreenJello> and this time hastebin guessed a different wrong language
[01:15:11] <Donitz> and then it goes on from 10000
[01:15:17] <Donitz> haha
[01:15:42] <Donitz> umm
[01:15:42] <Donitz> wait
[01:15:49] <Donitz> that's not quite right
[01:15:55] <sheetjs> switch(true) still lets you do inequalities
[01:16:05] <sheetjs> like the utf8 example
[01:16:21] <GreenJello> n++ is still wrong here
[01:16:27] <GreenJello> you want ++n
[01:16:43] <sheetjs> forget the switch
[01:16:47] <Donitz> https://hastebin.com/tijiyiqibe.kotlin
[01:16:48] <Donitz> now it works
[01:16:51] <sheetjs> how would you write it as a series of if statements
[01:16:52] <Donitz> but it looks quite ugly
[01:17:00] <Donitz> I don't think it matters too much GreenJello, it's just offset by 1
[01:17:17] <GreenJello> Donitz, you have two branches for 10000
[01:17:33] <Donitz> hmm
[01:17:59] <Donitz> one of them checks if nextSegmentIndex is under 10000 and then returns nextSegmentIndex, ie matching the switch
[01:18:00] <sheetjs> line 30 will never get run
[01:18:03] <Donitz> the other is exatly 10000
[01:18:23] <sheetjs> case n=10000 will match nextSegmentIndex == 10000
[01:18:24] <Donitz> it wil run if nextSegmentIndex is 10001
[01:18:27] <Donitz> oh
[01:18:28] <Donitz> wait
[01:18:29] <Donitz> yeah
[01:18:38] <Donitz> sure, ++n then
[01:19:19] <sheetjs> honestly, you're first better off writing the if code
[01:19:20] <Donitz> https://hastebin.com/irenovefew.kotlin
[01:19:21] <Donitz> updated
[01:19:23] <sheetjs> get that right
[01:19:41] <ljharb> if's are always better than switch :-)
[01:19:47] <Donitz> eh, same thing
[01:19:58] <sheetjs> there was some old rule of thumb
[01:20:01] <Donitz> just... the scope is a bit strange
[01:20:04] <Donitz> since a switch has a shared scope
[01:20:12] <sheetjs> <5 better off with if/else
[01:20:23] <sheetjs> < 1024 or something better off with switch
[01:20:31] <sheetjs> and then after that use an object or array
[01:20:54] <Donitz> a bunch of if else doesn't just look as pretty
[01:20:55] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:51c5:1e5d:5111:f0dd) (Quit: Textual IRC Client: www.textualapp.com)
[01:20:59] <Donitz> when you get like 200 conditions
[01:21:28] <Donitz> I don't want to figure out a data format for this, it's too much custom scripting
[01:21:34] <ljharb> definitely not the same thing
[01:21:39] <ljharb> switch has all sorts of problems.
[01:21:50] <ljharb> Donitz: also you can put { } around each `case` in a switch, so the scope isn't shared.
[01:21:58] <Donitz> ah, didn't know that
[01:23:25] <Donitz> technically, a fallthrough wouldn't even hurt
[01:23:32] <Donitz> but it would affect performance like I even care
[01:23:40] *** Joins: chowmein__ (~chowmeine@user/chowmeined)
[01:23:40] *** Joins: lilmonkey` (~lilmonkey@user/lilmonkey)
[01:23:52] *** Joins: name_ (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[01:24:01] <Donitz> wait, did fallthroughs in switches check conditions
[01:24:04] <Donitz> I have forgotten
[01:24:13] <Donitz> no, they do not
[01:24:14] <Donitz> derp
[01:24:31] <GreenJello> here's a fun version of it: https://gist.github.com/brigand/fabc277f62cb07baf950d52a15e8ec9f
[01:25:26] <Donitz> ah yeah, that's a clever system
[01:25:40] <Donitz> using an iterator-type-thingy
[01:26:48] *** Quits: lilmonkey (~lilmonkey@user/lilmonkey) (Ping timeout: 258 seconds)
[01:26:48] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Ping timeout: 258 seconds)
[01:28:20] <Donitz> will safe some sanity
[01:28:25] <Donitz> save
[01:29:00] <Donitz> though I would also add reset(goal)
[01:29:03] <Donitz> instead of using the construtor
[01:29:08] <Donitz> reuse is good
[01:29:15] <Donitz> construtor*
[01:29:20] <Donitz> CONSTRUCTOR*
[01:29:54] <sheetjs> GreenJello: thats pretty slick
[01:31:43] <Donitz> hmm
[01:32:01] <Donitz> why switch (n)
[01:33:24] <sheetjs> it should be switch(true)
[01:33:52] <Donitz> ah
[01:34:00] <Donitz> also, the first case should use n.is()
[01:34:22] <GreenJello> switch (n) was intentional
[01:34:23] <Donitz> no wait
[01:34:27] <Donitz> he started it at -1
[01:34:48] <sheetjs> `is` returns a boolean
[01:34:56] <sheetjs> therefore `next` returns a boolean
[01:35:03] <GreenJello> oh, that's a mistake
[01:35:09] <GreenJello> but a boolean also works
[01:35:25] <Donitz> I was confused for a second
[01:35:28] <GreenJello> intended for is() to return this.#counter === this.#goal ? this : null;
[01:35:29] <Donitz> can you get objects to return false?
[01:35:36] <GreenJello> but that's probably bad
[01:36:02] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[01:36:05] <l__q> i love npm XD today im instaled a my fiancé npm packet XD
[01:36:23] <ljharb> i don't know what that sentence means
[01:36:31] <l__q> but a old packge with react classes
[01:36:43] <Donitz> Why return this GreenJello?
[01:36:44] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[01:36:53] <Donitz> I mean, this would also be true
[01:36:56] <Donitz> since objects are true
[01:36:59] <Donitz> oh
[01:37:00] <l__q> a will rewrite to react hooks
[01:37:03] <Donitz> because you compare it to this
[01:37:10] <Donitz> yeah I see, but why not use booleans
[01:37:22] <sheetjs> l__q: so npm's love for you in requited?
[01:37:29] <l__q> but it cool, i found my famile package on npm XD
[01:37:49] <l__q> ?
[01:37:56] <GreenJello> Donitz, yeah, a boolean is much simpler
[01:38:06] <GreenJello> updated
[01:38:08] <Donitz> unless you have multiple switchers
[01:38:11] <Donitz> but that would get quite confusing
[01:38:24] <l__q> sheetjs: my fiancé send a package to npm, and im today find it and use
[01:38:28] <sheetjs> when you publish a package on the public registry, npm sends an email that ends with "npm loves you."
[01:38:30] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[01:38:42] <sheetjs> the question is whether npm's love for you is requited
[01:39:42] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[01:39:44] <l__q> i have to my own package on npm
[01:40:07] <l__q> https://www.npmjs.com/package/simhok
[01:40:22] <sheetjs> on a side note, still not sure why sheetjs is trending again
[01:41:05] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[01:41:19] <l__q> but i found /js-core this is better as my package
[01:41:38] <l__q> but my simhok has already 3 contributers :3
[01:42:11] <l__q> its cool
[01:42:36] <l__q> im use my packate in my packate too :D
[01:42:50] <l__q> in my projecct*
[01:43:00] <ljharb> i think we talked about this before, but small packages are better than megapackages
[01:43:30] <l__q> why lodash is so popular?
[01:43:52] <ljharb> l__q: lodash is super old and predates npm
[01:43:54] <l__q> i hate lodash personaly
[01:44:00] <ljharb> l__q: and, lodash isn't a good thing to use anymore
[01:44:07] <l__q> no
[01:44:19] <ljharb> megapackages were "good" when there wasn't npm and bundlers. that time is long gone.
[01:44:22] <ljharb> l__q: no what
[01:44:23] <l__q> i never use lodash
[01:44:36] <ljharb> right but the reason it's bad is "it's a bunch of utilities in one package"
[01:44:40] <ljharb> not because any individual piece of it is bad
[01:44:42] <l__q> i hate lodash
[01:44:53] <ljharb> do you have a rational reason for that?
[01:44:59] <l__q> this is why im create my own lib
[01:45:03] <ljharb> i guess the other reason lodash is bad is because 95% of it now exists in the language
[01:45:12] <ljharb> l__q: right but if you make your own lib that's a big bag of functions, then it's just as bad as lodash
[01:45:23] <ljharb> l__q: to be better it has to be small single-purpose packages
[01:45:40] <l__q> my lib is 80& smaller as lodash
[01:45:59] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973) (Quit: Leaving)
[01:46:00] <l__q> and this same functions
[01:46:10] <ljharb> right but size isn't why lodash is bad
[01:46:14] <ljharb> code size, i mean
[01:46:18] <l__q> yes
[01:46:24] <ljharb> conceptual size is the problem, and yours is conceptually the same - a big bag of functions. that's why it's bad.
[01:46:40] <l__q> my depecises use lodash too
[01:47:26] <l__q> but why? lodash is only a "easy" lib to js
[01:47:32] <l__q> not any more
[01:47:37] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[01:47:42] <l__q> why is so popupular?
[01:48:17] <l__q> on npm is lodash on first placce, then on 3 place react...
[01:48:22] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 272 seconds)
[01:48:36] <l__q> why react isint on first place?!
[01:48:49] <Svitkona> that doesn't seem like a fruitful question to ask
[01:49:08] <l__q> i dont understnad more js
[01:49:23] <l__q> im too old
[01:49:51] <GreenJello> I still use lodash because I can't be bothered to find and evaluate individual packages when I need a simple transform that exists in lodash
[01:50:04] <l__q> what
[01:50:20] <l__q> i never by use loadash
[01:50:32] <l__q> becouse is to popular
[01:50:38] <ljharb> l__q: it's popular because it's old
[01:50:47] <ljharb> l__q: and "because it's popular" is a really stupid reason to stop using something or dislike it
[01:51:07] <sheetjs> "it's old" is insufficient for popularity
[01:51:14] <ljharb> fair
[01:51:25] <l__q> im same as my fianc, if omething is popular we dont use ité
[01:51:29] <ljharb> that's dumb
[01:51:31] <GreenJello> it also has answers to a lot of questions, with pretty consistent APIs and docs
[01:51:36] <ljharb> yeah true
[01:51:52] <l__q> my fiancé use algualjs, and my only reactjs
[01:52:04] <ljharb> lodash has lots of things in its favor. again, the only problems with it are 1) an archaic pattern of "a big bag of functions", and 2) 95% of it is in the language and doesn't need a library
[01:52:20] <ljharb> l__q: what is algulal?
[01:52:29] <ljharb> GreenJello: presumably you could just as easily use the lodash.foo packages tho, rather than the big one?
[01:52:33] <sheetjs> probably angular
[01:52:35] <l__q> I hate google, but my fiancé use angular from google, and I hate facebook, but im use reactr
[01:52:43] <ljharb> using `lodash` means that you're vulnerable to CVEs from code you aren't even using
[01:52:44] <GreenJello> no, that creates massive bundles
[01:52:56] *** Quits: Noustropos (~Noustropo@2a00:f41:2804:1680:a6df:7271:194f:9c38) (Ping timeout: 258 seconds)
[01:52:58] <GreenJello> I have webpack config that forces deps that import specific lodash packages to use the main lodash package
[01:53:08] <GreenJello> and it saves hundreds of kbs
[01:53:16] <l__q> ljharb: https://angularjs.org
[01:53:35] <ljharb> l__q: ah, you didn't say "angular". i know what angular is (and it's gross)
[01:53:38] <ljharb> GreenJello: hm, fair point
[01:53:56] <GreenJello> you can import individual functions from the main lodash package without introducing duplication
[01:54:13] <l__q> iim dont understandt angular, im only use react,
[01:54:26] <l__q> its more easy for my with hooks
[01:54:36] <GreenJello> the individual lodash packages, last I looked into it, will both duplicate relative to the main lodash package, and relative to each other (they vendor the other lodash functions they depend on instead of npm deps)
[01:54:50] <l__q> i can for you write a simple website in secound in react :)
[01:55:03] <ljharb> GreenJello: still seems like it'd be better to use the individuals in your code, and then use lodash itself in your bundler config
[01:55:04] <GreenJello> so like lodash.sortBy is 1/5 the size of all of lodash, or something silly like that
[01:55:07] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[01:55:10] <ljharb> right
[01:55:18] <l__q> i hate loadash
[01:55:19] <ljharb> that's because of underuse of shared common dependencies, unfortunately
[01:55:28] *** Quits: daniel-k (~daniel-k@192.241.135.211) (Quit: bye)
[01:55:31] <ljharb> lodash's individual packages just repeat a bunch of common stuff
[01:55:31] <l__q> yes
[01:55:34] <l__q> exacly
[01:55:37] *** Joins: Guddu (~Guddu@67.73.237.27)
[01:56:01] *** Joins: daniel-k (~daniel-k@192.241.135.211)
[01:56:07] <Guddu> When I receive a message back from the json call it is looking like this. Not sure why
[01:56:07] <Guddu> {&#x27;status&#x27;: 0, &#x27;message&#x27;: &#x27;Carton creado exitosamente&#x27;}
[01:56:14] <Guddu> Some kind of escaping that is happening?
[01:56:34] <ljharb> Guddu: seems like it's being incorrectly html encoded on the server
[01:56:36] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 272 seconds)
[01:56:37] <Guddu> If i show this message in a html popup it shows fine. But if i use a button to copy the message it copies as I pasted earlier.
[01:56:57] *** Gustavo6046_ is now known as Gustavo6046
[01:57:01] <l__q> Guddu: it is a mosqiuto?
[01:57:02] <Guddu> ljharb, This is in a jsonfield in postgres
[01:58:14] <ljharb> Guddu: then whatever put it in there wrongly html-encoded it
[01:58:31] *** Quits: daniel-k (~daniel-k@192.241.135.211) (Client Quit)
[01:58:33] <GreenJello> or whatever you're doing before you see this value is html escaping it
[01:58:38] <ljharb> ^ that's what i suspect
[01:59:12] *** Joins: daniel-k (~daniel-k@192.241.135.211)
[02:01:29] <Guddu> GreenJello, ljharb If i do a json.dumps on the server before returning it, it kind of works fine :-)
[02:02:11] * GreenJello just googled dumps and was surprised
[02:02:28] <ljharb> Guddu: then it's probably something between the database, and the HTML getting sent to the browser
[02:02:45] <Guddu> GreenJello, LOL
[02:03:40] <GreenJello> Guddu, so you're trying to inject this into an html template for JS to use on the client side?
[02:03:51] <Guddu> GreenJello, Yes.
[02:04:08] <GreenJello> then put it in a data-attribute on <body> or whatever
[02:04:20] <GreenJello> and then the html escaping will be perfectly fine
[02:05:59] <GreenJello> when you read the data attribute with JS it'll be unescaped, and you can pass it to JSON.parse
[02:06:52] *** Quits: Ares1 (~Ares3@37.228.196.119) (Quit: Leaving)
[02:06:56] *** Joins: MylesBorins (~MylesBori@217.50.237.35.bc.googleusercontent.com)
[02:07:05] *** Joins: Ares000 (~Ares3@37.228.196.119)
[02:07:07] <Guddu> GreenJello, I am putting it in a attribute itself. Here is the snippet.https://dpaste.com/4DNXF7MBR
[02:07:59] <Guddu> GreenJello, And this is how I am copying it. That's when the problem showed up if i don't send it as a string from server side.
[02:07:59] <Guddu> https://dpaste.com/AGBRBKF73
[02:10:56] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[02:11:12] *** Quits: steltenpower (~steltenpo@a83-162-199-132.adsl.xs4all.nl) (Quit: Client closed)
[02:12:44] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:13:33] <ljharb> Guddu: you don't want to put JSON in an attribute
[02:13:41] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 250 seconds)
[02:13:54] <ljharb> !server data @ Guddu
[02:13:54] <jellobot> Guddu, There's 3 options to properly get data from the server to the client: 1) fetch request from JS. 2) HTML data-* attributes, read them in JS. 3) <script type="application/json"></script>, read and parse it from JS, however this option requires special escaping of </script> in the json body. Never generate/template JS on the fly. See also !fetch
[02:14:39] <Guddu> ljharb, I don't want to show it. Only when the user click on a button it is shown (or copied). So I am keeping in some attribute. When I show it it shows fine. WHen i copy it, it copies with those characters.
[02:14:55] <ljharb> Guddu: then put it in a `<pre>` that's hidden, not an attribute
[02:15:36] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:3d66:98fa:2b38:7415) (Quit: WeeChat 3.2)
[02:19:18] *** Joins: cahoots (~cahoots@163.182.128.74)
[02:20:26] <Guddu> ljharb, Checking.
[02:24:10] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 256 seconds)
[02:26:43] *** LSD is now known as acidsys
[02:30:02] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:27] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:31:52] <Guddu> ljharb, Thanks for the guidance. That worked :-)
[02:33:55] *** Quits: N4buc0 (~N4buc0@2001:1284:f016:1112:c1b7:d115:ba5a:a45f) (Remote host closed the connection)
[02:39:59] *** Joins: cahoots (~cahoots@163.182.128.74)
[02:40:58] *** Joins: ferdna (~ferdna@user/ferdna)
[02:42:17] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[02:44:10] *** Joins: jmft2 (~JMFT@81.149.115.87.dyn.plus.net)
[02:44:13] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[02:45:22] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 272 seconds)
[02:48:54] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 258 seconds)
[02:48:56] *** Joins: tex (~super@user/dix)
[02:50:17] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[02:50:41] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[02:52:18] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Client Quit)
[02:52:28] <cloudbender> Can I create webassembly code from javascript
[02:53:54] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[02:54:22] <GreenJello> sure
[03:00:00] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[03:02:42] *** Quits: chowmein__ (~chowmeine@user/chowmeined) (Ping timeout: 240 seconds)
[03:02:42] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Ping timeout: 256 seconds)
[03:03:30] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[03:03:31] *** Quits: cbleslie (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[03:03:50] *** Joins: cbleslie (~cbleslie@47.148.37.14)
[03:04:34] *** Quits: cbleslie (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[03:04:58] *** Joins: cbleslie (~cbleslie@47.148.37.14)
[03:09:36] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[03:11:42] *** Quits: g00fy (~g00fy@user/g00fy) (Quit: The Lounge - https://thelounge.chat)
[03:13:26] *** Joins: g00fy (~g00fy@user/g00fy)
[03:14:25] *** Quits: gry (~quassel@botters/gry) (Quit: No Ping reply in 180 seconds.)
[03:15:01] *** Joins: gry (~quassel@botters/gry)
[03:23:19] *** Quits: lockdown (~lockdown@ec2-3-236-147-4.compute-1.amazonaws.com) (Quit: leaving)
[03:23:20] *** Joins: federico_it (~textual@151.95.116.125)
[03:23:59] *** Joins: cahoots (~cahoots@163.182.128.74)
[03:26:57] <neshpion> plebassembly
[03:28:46] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 258 seconds)
[03:29:22] *** Joins: cahoots (~cahoots@163.182.128.74)
[03:33:15] <cloudbender> was that a jab ?
[03:33:34] *** Joins: jazzy (~jaziz@2600:380:8600:750f:70fc:eff9:dc76:a5fc)
[03:34:08] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 258 seconds)
[03:36:10] <ljharb> GreenJello: wait, you can?
[03:36:18] <ljharb> wasm is compiler output
[03:36:58] <GreenJello> I meant you could implement a compiler in JS
[03:37:13] <GreenJello> unsure now if that was the question or not
[03:39:31] *** Joins: cahoots (~cahoots@163.182.128.74)
[03:41:48] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 258 seconds)
[03:43:00] <ljharb> oh
[03:44:22] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 268 seconds)
[03:45:00] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[03:45:07] *** Quits: federico_it (~textual@151.95.116.125) (Quit: Textual IRC Client: www.textualapp.com)
[03:45:08] *** Joins: netameta_ (~netameta@2a00:a040:193:50fe:2c90:4e4a:6b9f:b8b0)
[03:45:41] *** Quits: g00fy (~g00fy@user/g00fy) (Remote host closed the connection)
[03:46:07] *** Joins: g00fy (~g00fy@user/g00fy)
[03:47:33] *** Joins: fabio__ (~fabio@151.24.107.187)
[03:47:34] *** Quits: g00fy (~g00fy@user/g00fy) (Remote host closed the connection)
[03:48:02] *** Quits: FabioP (~fabio@151.31.77.84) (Ping timeout: 256 seconds)
[03:48:19] *** Quits: WishBoy (~WishBoy@user/wishboy) (Ping timeout: 258 seconds)
[03:48:42] *** Quits: netameta (~netameta@2a00:a040:193:50fe:5c62:ea62:1c3a:bb90) (Ping timeout: 272 seconds)
[03:49:38] *** Joins: cahoots (~cahoots@163.182.128.74)
[03:49:51] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 258 seconds)
[03:55:02] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 272 seconds)
[03:58:59] *** Quits: greta (uid510567@id-510567.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:59:28] *** Quits: fiend (friend@c-73-43-171-169.hsd1.ga.comcast.net) (Ping timeout: 272 seconds)
[04:00:09] *** Joins: WishBoy (~WishBoy@189-68-130-35.dsl.telesp.net.br)
[04:00:10] *** Quits: WishBoy (~WishBoy@189-68-130-35.dsl.telesp.net.br) (Changing host)
[04:00:10] *** Joins: WishBoy (~WishBoy@user/wishboy)
[04:02:27] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[04:09:20] *** Joins: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net)
[04:10:01] *** Joins: fiend (friend@c-73-43-171-169.hsd1.ga.comcast.net)
[04:12:46] *** Quits: tex (~super@user/dix) (Ping timeout: 272 seconds)
[04:13:27] *** Quits: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net) (Ping timeout: 245 seconds)
[04:15:32] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:bd64:119e:13b8:1ba4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:20:49] *** Joins: onosendi (~onosendi@user/onosendi)
[04:22:16] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 272 seconds)
[04:26:27] <onosendi> ljharb: I switched over to nvim's builtin LSP, and it depends on typescript, typescript-language-server, and vscode-langservers-extracted (for JS/CSS/HTML). In this case would you install globally, or per project?
[04:27:08] *** Joins: chowmein__ (~chowmeine@user/chowmeined)
[04:28:18] *** Joins: BUSY (~BUSY@user/busy)
[04:30:24] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[04:30:36] *** Quits: howdoi (uid224@id-224.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[04:39:05] *** Joins: jmft2_ (~JMFT@81.149.115.87.dyn.plus.net)
[04:41:13] *** Quits: jmft2 (~JMFT@81.149.115.87.dyn.plus.net) (Ping timeout: 258 seconds)
[04:42:49] <ljharb> onosendi: the language servers themselves, globally. but it should always use the project's local typescript
[04:42:57] <ljharb> (even if the global one is installed)
[04:43:26] <onosendi> ljharb: I don't use typescript, the language server depends on it. Okay to install globally?
[04:43:51] <ljharb> onosendi: why do you need the TS language server at all then
[04:44:05] <ljharb> onosendi: but yeah i guess in that case it makes sense to have it globally
[04:44:27] <ashnur> https://github.com/GalMunGral/js-to-wasm like this?
[04:44:32] <onosendi> ljharb: the typescript-language-server is an umbrella for both js and ts.
[04:45:35] <onosendi> ljharb: much apprecated, thanks for the info.
[04:45:47] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[04:47:58] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[04:50:18] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 240 seconds)
[04:53:24] *** Joins: Vooloo (~Vooloo@195-252-44-117-no2400.tbcn.telia.com)
[04:54:54] *** Joins: zebrag (~chris@user/zebrag)
[04:58:50] *** Joins: Naan (~naan@user/naan)
[05:03:07] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[05:04:27] *** Quits: Lyn (~Lyn@user/law) (Ping timeout: 276 seconds)
[05:04:34] *** Quits: chowmein__ (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[05:07:34] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Remote host closed the connection)
[05:13:27] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[05:22:31] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[05:23:54] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[05:25:55] *** Quits: jess (~jess@libera/staff/jess) ()
[05:26:03] *** Quits: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation) (Remote host closed the connection)
[05:26:22] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[05:26:27] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[05:29:28] *** Quits: xsperry (~as@user/xsperry) (Remote host closed the connection)
[05:29:56] *** Joins: xsperry (~as@user/xsperry)
[05:32:31] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[05:33:07] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.2)
[05:34:10] *** Quits: jmft2_ (~JMFT@81.149.115.87.dyn.plus.net) (Ping timeout: 240 seconds)
[05:34:14] *** Joins: greta (uid510567@id-510567.tinside.irccloud.com)
[05:39:46] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 240 seconds)
[05:40:41] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[05:40:53] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[05:46:34] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[05:50:27] *** Joins: cahoots (~cahoots@163.182.128.74)
[05:51:54] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 276 seconds)
[05:52:42] *** Quits: hmw[at] (~hmw@4in6.metalab.wien.funkfeuer.at) (Ping timeout: 256 seconds)
[05:55:12] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 258 seconds)
[06:08:06] *** Joins: gambl0re (~gambl0re@24.140.237.124)
[06:09:14] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: Leaving)
[06:14:27] *** Joins: busybusybusy (~BUSY@user/busy)
[06:15:18] *** Quits: BUSY (~BUSY@user/busy) (Killed (NickServ (GHOST command used by busybusybusy)))
[06:15:20] *** Joins: chowmein__ (~chowmeine@user/chowmeined)
[06:15:24] *** busybusybusy is now known as BUSY
[06:16:54] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[06:21:20] *** Joins: gggp (~gggp@60.10.23.170)
[06:22:25] *** Quits: kmh (~kmh@p200300df5f07d8002475c02177381b69.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[06:30:38] *** Joins: netameta__ (~netameta@2a00:a040:193:50fe:8165:2f0a:b7ed:3185)
[06:32:24] *** Joins: netameta (~netameta@2a00:a040:193:50fe:8165:2f0a:b7ed:3185)
[06:34:18] *** Quits: netameta_ (~netameta@2a00:a040:193:50fe:2c90:4e4a:6b9f:b8b0) (Ping timeout: 258 seconds)
[06:34:24] *** Joins: hmw[at] (~hmw@80-108-56-158.cable.dynamic.surfer.at)
[06:35:04] *** Quits: netameta__ (~netameta@2a00:a040:193:50fe:8165:2f0a:b7ed:3185) (Ping timeout: 258 seconds)
[06:42:41] *** Joins: kmh (~kmh@p200300df5f34a300a53c887b84ee4a87.dip0.t-ipconnect.de)
[06:43:43] *** Quits: netameta (~netameta@2a00:a040:193:50fe:8165:2f0a:b7ed:3185) (Read error: Connection reset by peer)
[06:43:53] *** Joins: codebam (~codebam@user/codebam)
[06:44:05] *** Joins: netameta (~netameta@2a00:a040:193:50fe:8165:2f0a:b7ed:3185)
[06:47:22] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[06:47:56] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[06:50:31] *** Quits: chowmein__ (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[06:52:22] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 272 seconds)
[06:56:31] <codebam> do functions like map run on multiple cores or what's the benefit aside from being more readable and easier to understand?
[06:56:44] <codebam> where does the performance benefit come from I guess is what I'm asking
[06:57:22] <GreenJello> they don't, and there isn't a performance benefit for synchronous code
[06:57:36] <GreenJello> it's just about code quality
[06:57:55] <codebam> oh okay cool
[06:57:58] *** Joins: Rockwood (~Rocky@user/rocky)
[07:04:39] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[07:05:54] *** Joins: wintersky (uid453465@id-453465.brockwell.irccloud.com)
[07:23:20] <cis> codebam: there's actually a performance cost - running map is more expensive than a for loop
[07:23:37] <cis> usually the cost doesn't matter much
[07:24:29] <ljharb> cis: no it's not
[07:24:34] <ljharb> cis: in v8 it is 100% precisely identical
[07:24:42] <ljharb> cis: and most other engines have optimized it almost as much
[07:24:45] *** Quits: Guddu (~Guddu@67.73.237.27) (Read error: Connection reset by peer)
[07:24:50] <ljharb> cis: also, performance is the least important thing. clarity matters much more.
[07:27:51] *** Quits: greta (uid510567@id-510567.tinside.irccloud.com) ()
[07:32:36] <cis> ljharb: show me a performance test
[07:32:57] *** Quits: IceMichael (~IceMichae@dynamic-046-114-157-153.46.114.pool.telefonica.de) (Ping timeout: 258 seconds)
[07:33:41] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[07:35:19] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:8511:501a:28e5:ffd0)
[07:35:21] <ljharb> cis: v8’s own blog has a bunch from when they did it like 3 years ago. It JITs to the same assembly.
[07:38:09] <cis> yes, but I want to see a performance test
[07:38:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:41:33] *** Joins: IceMichael (~IceMichae@dynamic-046-114-155-038.46.114.pool.telefonica.de)
[07:47:20] *** Joins: anton (anton@tloks.com)
[07:48:09] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[07:51:18] *** Joins: cahoots (~cahoots@163.182.128.74)
[07:52:07] *** Quits: IceMichael (~IceMichae@dynamic-046-114-155-038.46.114.pool.telefonica.de) (Ping timeout: 258 seconds)
[07:52:37] *** Quits: anton (anton@tloks.com) (Remote host closed the connection)
[07:52:53] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 258 seconds)
[07:52:59] *** Joins: IceMichael (~IceMichae@dynamic-046-114-155-038.46.114.pool.telefonica.de)
[07:53:29] *** Joins: anton (anton@tloks.com)
[07:57:21] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 276 seconds)
[07:57:32] *** Quits: arthurpbs_ (~arthurpbs@168.121.98.198) (Ping timeout: 272 seconds)
[07:57:46] *** Joins: arthurpbs (~arthurpbs@168.121.98.198)
[07:58:33] <cis> the most performant method changes, depending on the number of elements to iterate over, and the type of data
[07:59:10] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[08:00:23] <codebam> is a map the right way to reformat an object in the format I want it in? I used a map to turn [{'slug': 'name'}] into [{'slug': ['name']}] for each object in that array
[08:00:34] <codebam> or is there a more concise way of doing that
[08:01:12] <wroathe> codebam: map is a good way to do that
[08:01:17] <cis> there's no right way, but that is a good one
[08:01:30] <codebam> okay, cool thanks
[08:02:12] *** Joins: cahoots (~cahoots@163.182.128.74)
[08:06:13] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[08:06:42] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 240 seconds)
[08:08:10] *** Joins: chowmein__ (~chowmeine@user/chowmeined)
[08:11:17] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Ping timeout: 258 seconds)
[08:11:24] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:11:43] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[08:20:08] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[08:30:51] *** Joins: gggp_ (~gggp@123.116.95.154)
[08:31:55] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[08:34:18] *** Quits: gggp (~gggp@60.10.23.170) (Ping timeout: 252 seconds)
[08:34:38] *** Quits: ckdCreations (~ckdCreati@147.55.133.134) (Read error: Connection reset by peer)
[08:34:54] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[08:35:53] *** Joins: gggp__ (~gggp@60.10.194.46)
[08:36:53] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Quit: rewrit3)
[08:38:02] *** Quits: Ares000 (~Ares3@37.228.196.119) (Read error: No route to host)
[08:39:24] *** Quits: gggp_ (~gggp@123.116.95.154) (Ping timeout: 272 seconds)
[08:41:23] *** Joins: gggp_ (~gggp@60.10.194.46)
[08:44:17] *** Quits: gggp__ (~gggp@60.10.194.46) (Ping timeout: 245 seconds)
[08:48:28] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 258 seconds)
[08:48:57] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[08:51:52] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[08:52:17] <cloudbender> So, typescript
[08:52:51] <cloudbender> I use it to write code, but what do I use as the interpreter ?
[08:53:33] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 252 seconds)
[08:53:38] <cloudbender> COnsidering it is a 'superset' of es6, does it have it's own interpreter ?
[08:53:49] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[08:55:03] <cloudbender> I've wathced a view vids, and none of them describe the workflow.
[08:55:28] <cis> cloudbender: it gets compiled to javascript
[08:55:51] <cloudbender> so, it has a compiler ?
[08:55:55] <cis> cloudbender: there are tools like ts-node that do this seamlessly for node.js for use in dev environments
[08:55:58] <cis> yes
[08:56:20] <cis> for browsers, you use some build tool like webpack which does the compilation as a step
[08:57:13] <cloudbender> The language extensions are refactored into standard es6 during compilation
[08:57:37] <cloudbender> And I can also use it to generate browser code.
[08:58:03] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[08:59:45] <theskillwithin> view or vue?
[09:00:06] <cloudbender> Can I write in TS and have it compiled to wasm ?
[09:00:50] *** Quits: chowmein__ (~chowmeine@user/chowmeined) (Ping timeout: 256 seconds)
[09:00:55] <cis> cloudbender: I bet someone has a project out there that will do that
[09:01:40] <theskillwithin> if there was a well known way it would probably be shown here https://webassembly.org/getting-started/developers-guide/
[09:02:01] <theskillwithin> hmmm whats this AssemblyScript (a TypeScript-like syntax)
[09:02:15] <theskillwithin> https://www.assemblyscript.org/introduction.html
[09:02:26] <theskillwithin> cloudbender
[09:02:44] <cloudbender> I see that thanks
[09:03:58] <GreenJello> it doesn't make sense to compile JS/TS to WASM
[09:04:16] <cloudbender> ok
[09:04:24] *** Joins: codebam (~codebam@user/codebam)
[09:05:36] <cloudbender> My understanding was that the wasm bytecode was much more performant in the browser, but yeah, that's why I'm scratching my head a bit.
[09:06:20] <theskillwithin> well ya, thats why people use it for some stuff
[09:06:42] <cloudbender> I.E. why have the DOM and a wasm api to contend with, using javascript.
[09:06:44] <GreenJello> there are languages that can be compiled to efficient WASM, but JS is not one of them
[09:06:51] <cloudbender> ok
[09:07:18] <GreenJello> it's languages like C++ and Rust that fit WASM well, being at a much lower level and not requiring an interpreter or VM
[09:07:23] <theskillwithin> i don't think you really do DOM selection in wasm,  its more for like calculations,  but i have no idea ive never used it so i should stop talking lol
[09:08:02] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 245 seconds)
[09:08:34] <cloudbender> hey all opinions are welcome.
[09:08:47] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[09:08:50] <cloudbender> it's ok to riff
[09:09:00] <theskillwithin> ya, i just like to be clear when i am, so people don't get confused
[09:09:05] <GreenJello> and you need to actually write performant code in them to see a benefit, and you need to not send too much structured data between JS and WASM
[09:09:28] <GreenJello> it's not free performance, it's performance at a moderate to high cost
[09:09:33] <cloudbender> I see.
[09:11:09] *** Quits: cbleslie (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[09:11:15] *** Joins: cbleslie4 (~cbleslie@47.148.37.14)
[09:19:53] *** Joins: gggp__ (~gggp@60.10.23.170)
[09:23:07] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 250 seconds)
[09:24:22] *** Joins: gggp_ (~gggp@60.10.194.46)
[09:27:28] *** Quits: gggp__ (~gggp@60.10.23.170) (Ping timeout: 256 seconds)
[09:32:52] *** Joins: gggp__ (~gggp@60.10.194.46)
[09:36:00] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[09:39:36] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[09:41:06] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[09:49:43] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[09:53:43] <theskillwithin> ugh marketing dept keeps typing url params incorrectly every once and awhile
[09:53:52] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[09:54:18] <theskillwithin> i should just write a tool for them to show them how they set the params and validate
[09:54:24] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 258 seconds)
[09:58:02] <theskillwithin> is there a way to just display the results view in jsfiddle to someone
[10:00:32] *** Joins: CoolerY (~CoolerX@user/coolerx)
[10:00:50] *** Quits: CoolerY (~CoolerX@user/coolerx) (Client Quit)
[10:03:01] *** Joins: cahoots (~cahoots@163.182.128.74)
[10:03:39] *** Joins: CoolerX (~CoolerX@user/coolerx)
[10:04:54] *** Quits: CoolerX (~CoolerX@user/coolerx) (Client Quit)
[10:07:30] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 240 seconds)
[10:13:18] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 252 seconds)
[10:16:43] <ljharb> cloudbender: wasm won't be more performant for everything.
[10:17:11] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 268 seconds)
[10:18:12] *** Quits: name_ (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 272 seconds)
[10:18:18] *** Joins: codebam (~codebam@user/codebam)
[10:20:15] *** Quits: foureyes (foureyes@brought.to.you.by.bnc4free.com) (Ping timeout: 255 seconds)
[10:25:26] *** Quits: xse_ (~xse@user/xse) (Quit: mwah)
[10:29:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:29:42] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[10:29:48] *** Quits: LiftLeft (~LiftLeft@191.96.227.138) (Ping timeout: 252 seconds)
[10:29:51] <theskillwithin> is there a way to only show result window in a jsfiddle? https://jsfiddle.net/theskillwithin/u3nwjbym/
[10:30:50] *** Joins: gggp_ (~gggp@123.113.176.18)
[10:32:12] *** Joins: cisme_ (~cisme_@2600:1700:d980:1a40:f0b6:8e83:8ba9:acdd)
[10:33:09] *** Joins: codebam (~codebam@user/codebam)
[10:34:16] *** Quits: gggp__ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[10:34:40] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 272 seconds)
[10:42:51] *** Joins: gggp__ (~gggp@60.10.194.46)
[10:46:42] *** Quits: gggp_ (~gggp@123.113.176.18) (Ping timeout: 272 seconds)
[10:47:41] *** Quits: gambl0re (~gambl0re@24.140.237.124) (Ping timeout: 258 seconds)
[10:50:28] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[10:55:18] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 256 seconds)
[10:55:47] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:57:01] *** Joins: gggp_ (~gggp@60.10.194.46)
[10:58:38] *** Joins: foureyes (foureyes@brought.to.you.by.bnc4free.com)
[10:59:34] *** Quits: gggp__ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[11:00:21] *** Joins: gggp__ (~gggp@60.10.194.46)
[11:03:47] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[11:04:57] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 258 seconds)
[11:07:12] *** Quits: eqw (~eqw@31.134.178.99) (Ping timeout: 252 seconds)
[11:09:03] *** Joins: mattil (~mattilinn@87-92-57-75.bb.dnainternet.fi)
[11:12:15] *** Quits: gry (~quassel@botters/gry) (Quit: No Ping reply in 180 seconds.)
[11:12:52] *** Joins: gry (~quassel@botters/gry)
[11:13:04] *** Joins: tex (~super@user/dix)
[11:16:48] *** Joins: gggp_ (~gggp@60.10.194.46)
[11:19:30] *** Quits: gggp__ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[11:20:48] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[11:23:23] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[11:28:06] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 252 seconds)
[11:28:15] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[11:33:11] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:33:50] *** Quits: shailangsa (~shailangs@host86-186-142-59.range86-186.btcentralplus.com) (Ping timeout: 256 seconds)
[11:37:37] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 245 seconds)
[11:46:44] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[11:47:22] *** Quits: cbleslie4 (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[11:47:28] *** Joins: cbleslie (~cbleslie@47.148.37.14)
[11:52:05] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 258 seconds)
[11:57:59] *** Quits: cbleslie (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[11:58:04] *** Joins: cbleslie8 (~cbleslie@47.148.37.14)
[12:02:44] *** Joins: l__q (~modinfo@user/modinfo)
[12:03:50] *** Joins: cahoots (~cahoots@163.182.128.74)
[12:05:04] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[12:06:39] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 258 seconds)
[12:07:06] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Quit: Ping timeout (120 seconds))
[12:07:11] *** Quits: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation) (Ping timeout: 244 seconds)
[12:07:13] *** Joins: JohnComputation2 (~JohnCompu@gateway/tor-sasl/johncomputation)
[12:09:02] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 272 seconds)
[12:09:32] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[12:18:19] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[12:21:06] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[12:23:31] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 258 seconds)
[12:33:26] *** Quits: lind{at}yahoo (uid486956@tinside.irccloud.com) (Quit: Connection closed for inactivity)
[12:34:26] *** Joins: happymeal` (~happymeal@75-28-166-198.lightspeed.tukrga.sbcglobal.net)
[12:34:49] *** Quits: bin4ry (~bin4ry@128.199.135.148) (Quit: Ping timeout (120 seconds))
[12:35:07] *** Quits: luiserebii (~luiserebi@li1568-23.members.linode.com) (Ping timeout: 245 seconds)
[12:35:15] *** Joins: bin4ry (~bin4ry@128.199.135.148)
[12:35:26] *** Joins: friend (friend@c-73-43-171-169.hsd1.ga.comcast.net)
[12:35:52] *** Joins: shailangsa (~shailangs@host86-186-142-59.range86-186.btcentralplus.com)
[12:36:08] *** Quits: calcmandan (~quassel@user/calcmandan) (Remote host closed the connection)
[12:36:25] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:44] *** Quits: b-rex (~b@v.dropswitch.net) (Ping timeout: 252 seconds)
[12:36:47] *** Joins: a1paca_ (~a1paca@user/a1paca)
[12:36:47] *** Joins: b-rex_ (~b@v.dropswitch.net)
[12:36:47] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Ping timeout: 245 seconds)
[12:36:48] *** Quits: happymeal (~happymeal@user/happymeal) (Ping timeout: 245 seconds)
[12:37:11] *** b-rex_ is now known as b-rex
[12:37:18] *** Quits: fiend (friend@c-73-43-171-169.hsd1.ga.comcast.net) (Ping timeout: 256 seconds)
[12:37:19] *** Joins: calcmandan (~quassel@user/calcmandan)
[12:37:37] *** Quits: evulish (~evulish@cpe-72-231-26-248.nyc.res.rr.com) (Ping timeout: 245 seconds)
[12:37:50] *** Quits: jaawerth (~jaawerth@104.131.115.202) (Ping timeout: 252 seconds)
[12:37:52] *** Quits: ario (~ario@159.65.220.102) (Ping timeout: 256 seconds)
[12:37:52] *** Quits: a1paca (~a1paca@user/a1paca) (Ping timeout: 256 seconds)
[12:37:53] *** Joins: luiserebii (~luiserebi@li1568-23.members.linode.com)
[12:38:04] *** Joins: ario (~ario@159.65.220.102)
[12:38:07] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Ping timeout: 250 seconds)
[12:38:07] *** Quits: TheFireSwamp (~root@159.65.182.108) (Ping timeout: 250 seconds)
[12:38:32] *** Joins: evulish (~evulish@cpe-72-231-26-248.nyc.res.rr.com)
[12:38:35] *** Joins: jaawerth (~jaawerth@104.131.115.202)
[12:38:37] *** Joins: TheFireSwamp (~root@159.65.182.108)
[12:38:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:05] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[12:39:17] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[12:42:07] *** Joins: Lyn (~Lyn@user/law)
[12:42:18] *** Quits: pavonia (~user@user/siracusa) (Ping timeout: 258 seconds)
[12:44:58] *** Joins: Axy (~Axy@user/axy)
[12:51:00] *** Quits: fabio__ (~fabio@151.24.107.187) (Read error: Connection reset by peer)
[12:56:10] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[12:57:18] *** Quits: Axy (~Axy@user/axy) (Read error: Connection reset by peer)
[12:59:36] *** Joins: Axy (~Axy@user/axy)
[13:00:15] *** Joins: federico_it (~textual@151.95.116.125)
[13:01:06] *** Quits: KevinX (~KevinX@185.245.86.84) (Ping timeout: 240 seconds)
[13:01:23] *** Joins: elf_fortrezz (~elf_fortr@adsl-72-50-6-19.prtc.net)
[13:04:22] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[13:07:03] *** Joins: N4buc0 (~N4buc0@2001:1284:f016:1112:ab84:136:c1b1:b7e6)
[13:08:24] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973)
[13:10:24] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973) (Client Quit)
[13:12:34] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:2851:91a4:af4c:7957)
[13:15:21] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:20:06] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[13:24:54] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 256 seconds)
[13:25:10] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[13:35:38] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[13:41:20] *** Quits: netameta (~netameta@2a00:a040:193:50fe:8165:2f0a:b7ed:3185) (Ping timeout: 256 seconds)
[13:42:37] *** Quits: Northwoods (~Northwood@103.223.9.125) (Ping timeout: 245 seconds)
[13:42:59] *** Joins: cahoots (~cahoots@163.182.128.74)
[13:45:32] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[13:45:54] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973)
[13:46:23] *** Quits: JohnComputation2 (~JohnCompu@gateway/tor-sasl/johncomputation) (Ping timeout: 244 seconds)
[13:47:51] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 258 seconds)
[13:53:49] <Donitz> does anyone know what events are valid user gestures for resuming and creation of audiocontext?
[13:56:48] *** Joins: godsgaming (~godsgamin@bb121-6-152-56.singnet.com.sg)
[13:56:58] <Donitz> another question
[13:57:08] <Donitz> does audiocontext suspend, or close by itself?
[13:57:22] <Donitz> without calling suspend() or close()
[13:59:31] <Donitz> "In iOS Safari, when a user leaves the page (e.g. switches tabs, minimizes the browser, or turns off the screen) the audio context's state changes to "interrupted" and needs to be resumed."
[13:59:38] <Donitz> Wow, took like 30 seconds to find an exception
[13:59:43] <Donitz> couldn't even use the pre-existing states
[14:00:04] <Donitz> so now I need to check if either suspended or interrupted
[14:00:18] <Donitz> because god damn, those two things are just so dissimiliar
[14:02:32] *** Parts: godsgaming (~godsgamin@bb121-6-152-56.singnet.com.sg) ()
[14:07:15] <Donitz> how do you return a dummy promise which just resolves?
[14:12:56] <Donitz> n> Promise.resolve().then(console.log(1));
[14:12:57] <jellobot> (okay) 1
[14:13:16] *** Quits: elf_fortrezz (~elf_fortr@adsl-72-50-6-19.prtc.net) (Quit: Client closed)
[14:16:33] *** Joins: elf_fortrezz (~elf_fortr@adsl-72-50-4-51.prtc.net)
[14:16:54] *** Quits: elf_fortrezz (~elf_fortr@adsl-72-50-4-51.prtc.net) (Client Quit)
[14:17:18] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-51.prtc.net)
[14:19:15] *** Joins: entuland (~entuland@user/entuland)
[14:20:55] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[14:25:35] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 250 seconds)
[14:32:59] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973) (Quit: Leaving)
[14:35:20] <Deide> n> Promise.resolve(1).then(console.log);
[14:35:20] <jellobot> (okay) 1
[14:40:21] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[14:44:10] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[14:44:48] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[14:48:25] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-51.prtc.net) (Ping timeout: 246 seconds)
[14:50:08] *** Quits: cbleslie8 (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[14:50:13] *** Joins: cbleslie (~cbleslie@47.148.37.14)
[14:50:48] *** Quits: Ducki (~ducki@user/ducki) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:58:46] *** Quits: stiv3n (~stiv3n@c-73-92-94-201.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[14:59:44] *** Joins: LiftLeft (~LiftLeft@191.96.150.118)
[15:00:02] *** Quits: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation) (Remote host closed the connection)
[15:00:23] *** Joins: stiv3n (~stiv3n@c-73-92-94-201.hsd1.ca.comcast.net)
[15:00:26] *** Joins: Ducki (~ducki@user/ducki)
[15:01:20] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[15:16:45] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[15:20:30] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 256 seconds)
[15:21:23] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 258 seconds)
[15:21:36] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[15:34:08] *** Quits: IceMichael (~IceMichae@dynamic-046-114-155-038.46.114.pool.telefonica.de) (Quit: Leaving)
[15:37:56] *** Joins: mearp (~mearp@194.110.115.12)
[15:41:18] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[15:42:18] *** Joins: jess (~jess@libera/staff/jess)
[15:42:36] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 256 seconds)
[15:43:48] *** Joins: cahoots (~cahoots@163.182.128.74)
[15:47:44] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[15:48:15] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[15:48:50] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 256 seconds)
[15:49:42] *** Quits: tex (~super@user/dix) (Read error: Connection reset by peer)
[15:49:49] <paulcarroty> https://github.com/nadimkobeissi/appleprivacyletter
[15:52:35] *** Quits: jonifen (~jonifen@user/jonifen) (Quit: Leaving)
[15:53:21] *** Joins: coc0nut_ (~coc0nut@user/coc0nut)
[15:53:34] *** Joins: jonifen (~jonifen@user/jonifen)
[15:54:21] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 258 seconds)
[15:54:58] *** Quits: beencubed (~beencubed@209.131.238.248) (Ping timeout: 240 seconds)
[15:57:14] *** Quits: jonifen (~jonifen@user/jonifen) (Client Quit)
[15:57:15] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[15:58:50] *** Joins: jonifen (~jonifen@user/jonifen)
[16:00:57] *** Quits: coc0nut_ (~coc0nut@user/coc0nut) (Ping timeout: 245 seconds)
[16:07:30] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[16:11:13] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[16:16:23] *** Joins: Heraes (~Heraes@119.12.203.77.rev.sfr.net)
[16:16:24] *** Quits: Heraes (~Heraes@119.12.203.77.rev.sfr.net) (Changing host)
[16:16:24] *** Joins: Heraes (~Heraes@user/romarain)
[16:16:51] *** Quits: Heraes (~Heraes@user/romarain) (Read error: Connection reset by peer)
[16:18:34] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[16:32:42] *** Joins: Liblx (~Alex@2a02:810c:280:59c:9922:e4c:6008:be3d)
[16:33:18] *** Quits: federico_it (~textual@151.95.116.125) (Quit: Textual IRC Client: www.textualapp.com)
[16:41:54] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 276 seconds)
[16:42:11] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[16:42:38] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:8511:501a:28e5:ffd0) (Ping timeout: 272 seconds)
[16:43:24] *** Joins: thiras (~thiras@user/thiras)
[16:49:53] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:51:23] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973)
[16:54:48] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[16:55:42] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[16:56:02] <DPA> Signed
[16:56:44] <DPA> A bit disappointed that I can't do it with GPG though...
[16:59:11] *** Joins: Naan (~naan@user/naan)
[17:07:08] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a46a:3bfd:18f2:ec22)
[17:11:37] <hassoon> ?
[17:12:23] *** Joins: pulse (~pulse@user/pulse)
[17:16:49] <DPA> "Signing" it by opening a github issue, which then makes the page update. But that's not a real cryptographic signature.
[17:17:28] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 272 seconds)
[17:18:36] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[17:18:40] *** Quits: wintersky (uid453465@id-453465.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[17:23:25] <DPA> Oh no, why am I on the list twice?
[17:28:55] *** Joins: l__q (~modinfo@user/modinfo)
[17:33:45] *** Joins: pycode (~pycode@2001:b07:5d28:551:b8d0:260e:8a58:7f9c)
[17:34:07] *** Joins: eqw (~eqw@31.134.178.99)
[17:37:40] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[17:39:23] *** Quits: pycode (~pycode@2001:b07:5d28:551:b8d0:260e:8a58:7f9c) (Ping timeout: 258 seconds)
[17:44:05] <DPA> Well, let's hope they fix that... https://github.com/nadimkobeissi/appleprivacyletter/issues/4043
[17:44:37] *** Joins: cahoots (~cahoots@163.182.128.74)
[17:49:21] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 258 seconds)
[17:55:58] <DPA> (How hard can it possibly be to automatically add an entry to a json list, c'mon!)
[17:57:22] <hassoon> DPA: are you talking about debian ?
[17:59:15] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 276 seconds)
[18:01:17] *** Joins: name_ (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[18:01:28] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[18:02:10] <l__q> How to send global schedule message with cron to all connected clients on socket.io? I put io.emit on top io.on("connection")  but this sends multiple messages, but it shold only once
[18:03:09] <l__q> One solution is to emit to socket.ids
[18:03:18] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973) (Quit: Leaving)
[18:03:31] <l__q> but can I simple io.emit?
[18:03:51] <DPA> hassoon: No about that open letter on github which was posted earlier here.
[18:04:44] *** Joins: Northwoods (~Northwood@103.223.9.125)
[18:13:01] <Lyn> is it a good idea to make env.js (or config.js) with normal variables, then load env vars into those, and import that file to a program? so that I would be aware of all the utilized env vars without them being scattered all around
[18:13:59] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Quit: Leaving)
[18:22:03] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:22:29] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:35:27] *** Joins: zebrag (~chris@user/zebrag)
[18:39:27] *** Joins: wintersky (uid453465@id-453465.brockwell.irccloud.com)
[18:40:05] *** Joins: cahoots (~cahoots@163.182.128.74)
[18:40:20] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 258 seconds)
[18:41:30] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[18:44:10] *** Quits: jazzy (~jaziz@2600:380:8600:750f:70fc:eff9:dc76:a5fc) (Ping timeout: 258 seconds)
[18:44:52] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 272 seconds)
[18:50:44] *** Quits: rogorido (~rogorido@mail.georeligion.org) (Quit: ZNC 1.8.2+deb1 - https://znc.in)
[18:51:38] *** Joins: rogorido (~rogorido@mail.georeligion.org)
[18:52:16] *** Joins: endlesseditions (~endlessed@205.220.252.162)
[18:54:37] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[18:54:43] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Remote host closed the connection)
[18:55:30] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[18:56:49] *** Quits: rogorido (~rogorido@mail.georeligion.org) (Quit: ZNC 1.8.2+deb1 - https://znc.in)
[18:57:44] *** Joins: rogorido (~rogorido@mail.georeligion.org)
[18:59:10] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[18:59:32] *** Joins: Guest35 (~Guest@188.232.148.158)
[18:59:54] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 240 seconds)
[19:03:38] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[19:11:31] *** Joins: kill (~killown@user/killown)
[19:12:25] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[19:15:48] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[19:16:08] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[19:17:10] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 272 seconds)
[19:18:23] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[19:20:29] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973)
[19:24:02] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 258 seconds)
[19:24:18] *** Quits: Talon_ (Talon@172.77.99.199) ()
[19:30:27] *** Quits: endlesseditions (~endlessed@205.220.252.162) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:32:22] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 272 seconds)
[19:33:43] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973) (Quit: Leaving)
[19:37:04] <Donitz> loopStart ignored if loopEnd not specified in Source node with loop
[19:37:10] <Donitz> that's is definitely a bug
[19:37:14] <Donitz> that is*
[19:40:19] <Svitkona> umm
[19:41:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:49:23] *** Joins: elastic_dog (~elastic_d@ary207.neoplus.adsl.tpnet.pl)
[19:50:49] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[19:52:08] *** kill is now known as php
[19:52:21] <entuland> what does this "should not be used as methods" really mean and entail? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions - I assume it's still okay to do "this.somefunc = param => expression;" inside the body of functions I'm going to instantiate, is there any problem I'm not seeing there? Maybe it refers only to using them _outside_ of the main body of the function (say, attaching functions to the
[19:52:21] <entuland> prototype) ?
[19:54:15] *** Joins: gambl0re (~gambl0re@24.140.237.124)
[19:55:32] <LiftLeft> Is it possible with gulp to add css files to the css build file with @import?
[19:55:46] <entuland> referencing "this" isn't a problem cause it's in scope if I'm defining them inside the main body of the instantiable function, I wonder if it's just something tied to adding methods when using the class syntax
[19:55:47] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973)
[19:56:14] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[19:56:17] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[19:56:21] *** php is now known as own
[19:56:31] *** own is now known as killown
[19:57:23] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 258 seconds)
[20:01:00] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 256 seconds)
[20:02:03] <l__q> I have a tiny problem with this small script, it should show a currentMessage if no logs on ArrowDown, input like weechat: https://codesandbox.io/s/cranky-gagarin-7pmgo?file=/src/App.js
[20:04:41] <l__q> Or can I do that better way as now?
[20:08:23] *** Joins: Ares000 (~Ares3@37.228.196.119)
[20:08:27] *** Joins: endlesseditions (~endlessed@205.220.252.162)
[20:18:45] *** Quits: mearp (~mearp@194.110.115.12) (Quit: leaving)
[20:20:00] *** Quits: endlesseditions (~endlessed@205.220.252.162) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:20:42] <l__q> And if I try to press ArroDown then: "A component is changing a controlled input to be uncontrolled."
[20:20:56] <l__q> How to fix it?
[20:22:41] *** Joins: enoq (~enoq@194-208-179-35.lampert.tv)
[20:28:14] <wroathe> entuland: Did you ever get an answer?
[20:28:33] <entuland> nope, no one chipped in
[20:28:47] <wroathe> entuland: What they're talking about is that `this` won't be the object that was instantiated in the class, and so there's no point in using an arrow function as a method
[20:29:02] <wroathe> entuland: In fact, it would just be confusing for anyone who encounters it
[20:29:25] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[20:29:56] <wroathe> entuland: So if you do class Foo { ... foo: () => { ... } } and then const f = new Foo(); and f.foo(); the arrow function won't have `this` bound to `f`
[20:30:05] <wroathe> entuland: Which is ass backwards, if you're trying to do OOP
[20:30:48] <entuland> I see, so it only really applies to when you're using the class syntax
[20:31:10] <wroathe> entuland: Well, or the old school prototype-based OOP approach
[20:32:02] <wroathe> entuland: Fortunately all of this confusion can be avoided just by avoiding OOP :D
[20:32:32] <entuland> yep, point is that I only instantiate functions and only define members inside of the function body, so I guess I should be fine
[20:34:17] <entuland> n> function Instantiable(text) { this.someprop = text; this.method = () => this.someprop }; const inst = new Instantiable("bar"); inst.method()
[20:34:17] <jellobot> (okay) 'bar'
[20:34:33] <entuland> that's the kind of thing I'm doing (without using this) - I guess it's okay
[20:35:10] <entuland> I normally either reference variables directly if they're in scope, or use "const self = this" at the beginning of the function body and use "self." down the line to avoid this altogether
[20:35:24] *** Joins: codebam (~codebam@user/codebam)
[20:38:48] <l__q> How to fix "A component is changing a controlled input to be uncontrolled."? https://codesandbox.io/s/cranky-gagarin-7pmgo?file=/src/App.js
[20:39:48] <wroathe> entuland: It's ok, because Instantiable has the `this` binding you want as a result of being called with the `new` operator
[20:40:44] *** Quits: killown (~killown@user/killown) (Ping timeout: 252 seconds)
[20:40:45] <entuland> good
[20:40:55] *** Joins: cahoots (~cahoots@163.182.128.74)
[20:40:57] *** Joins: dankle (~dankle@2603-7080-1800-2600-fc74-6880-af34-1a98.res6.spectrum.com)
[20:41:15] <wroathe> entuland: I suppose one could point out that the flaw with this is that each new instance of Instantiable is getting it's own fresh copy of this.method
[20:41:31] <wroathe> entuland: Which might be a problem if you've got millions or billions of instances
[20:42:18] *** Quits: dankle (~dankle@2603-7080-1800-2600-fc74-6880-af34-1a98.res6.spectrum.com) (Remote host closed the connection)
[20:42:22] <wroathe> entuland: The rationale behind inheritance here is that each instance has a pointer to it's prototype, and method resolution can then walk to prototype chain to find a shared function object between instances
[20:42:40] <wroathe> Whereas this gives you brand new function objects for each instance
[20:42:54] <wroathe> But, again, all of this can be avoided by just not writing OOP code :P
[20:43:10] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[20:43:18] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Killed (NickServ (GHOST command used by Sven_vB_)))
[20:43:20] *** Joins: Sven_vB_ (~sven@user/sven-vb/x-2094958)
[20:45:41] *** Quits: Isthmusi (~Isthmus@user/isveni) (Quit: leaving)
[20:45:41] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 258 seconds)
[20:46:21] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (Quit: quit)
[20:46:25] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:46:48] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[20:46:55] *** Joins: kapil (~kapil@o-k.website)
[20:48:00] *** Joins: Isthmusi (~Isthmus@user/isveni)
[20:48:22] <entuland> you mean avoiding to instantiate functions as well?
[20:48:26] *** Joins: vysn (~vysn@user/vysn)
[20:48:42] <entuland> or that doesn't count as messed up JS OOP ? :P
[20:49:12] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[20:49:17] <wroathe> entuland: Yes. Pull the data properties out of Instantiable and manage them as a separate "struct-like" object, and then pull the function properties out of Instantiable and make them take that data object as one of their parameters
[20:49:24] <wroathe> entuland: And export those functions from a module
[20:50:45] *** Quits: acid (~acid@user/acid) (Ping timeout: 252 seconds)
[20:51:05] <wroathe> This is similiar in feel to a plain old class, but opens you up to functional patterns like composition and currying, and is conceptually easier to manage in the long run
[20:52:00] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[20:52:47] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:53:06] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[20:54:33] <entuland> uhm... not sure I'm ready to do that jump, I kinda like not having to pass state around in certain cases and most of those instances are very small wrappers to make widgets so that I can "hide" the details of messing with the various dom elements internally
[20:55:20] <wroathe> entuland: You can avoid passing state around with either closures or composition in a functional approach
[20:55:37] *** Joins: acid (~acid@user/acid)
[20:55:47] <wroathe> entuland: Sorry, closure or currying* (which I often use with composition, so that's why I mixed them up)
[20:56:11] <entuland> may be that, I'm not really into that paradigm, I'll see if I can learn more about it
[20:57:00] <entuland> any pointer on where I could read about such approaches?
[20:57:05] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[20:57:22] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973) (Quit: Leaving)
[20:57:37] <wroathe> const foo = (data, x, y) => {}; const bar = (x, y) => foo(myData, x, y); bar(3, 4); bar(5, 6);
[20:58:29] <wroathe> Umm, well, I haven't reviewed the Javascript literature on it for a while, but I'm sure someone has a good source. I'd recommend working through a book on something like Haskell.
[20:58:49] <wroathe> But I'm sure someone has written a JS book for JSers that want to pretend to be Haskellers
[20:59:32] <wroathe> const foo = curry((data, x, y) => {}); const bar = foo(myData); bar(3, 4); bar(5, 6);
[20:59:53] <entuland> thank you
[20:59:56] <wroathe> The former is the closure approach to avoiding passing state around, and the latter is the currying approach
[21:00:59] <wroathe> entuland: Here's an example of how currying can be used with composition to avoid passing state around: https://github.com/JustinChristensen/react-sample-app/blob/master/src/components/EmployeeFields.jsx#L31-L57
[21:01:38] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 256 seconds)
[21:02:00] <wroathe> entuland: Each of those functions takes their arguments, and then the state object they're operating on (props). If you provide just the arguments, then return a function that takes just props (they're manually "curried"), and then you can chain them together with composition like this
[21:02:38] <wroathe> entuland: So props gets passed to useT, which returns props, which gets passed to useUid, which returns props, which gets passed to the function that usePropsSelector returns, which returns props, and so on...
[21:02:56] <wroathe> entuland: https://github.com/JustinChristensen/react-sample-app/blob/master/src/hooks/usePropsSelector.js#L28
[21:03:38] <entuland> I see, guess just takes getting used to the approach
[21:04:24] *** Joins: federico_it (~textual@151.95.116.125)
[21:05:17] <wroathe> entuland: It's worth understanding, anyway. Even if you decide it isn't for you. Too many OOPers have never considered alternatives.
[21:05:37] *** Joins: fweht (uid404746@id-404746.tooting.irccloud.com)
[21:06:33] *** Joins: cahoots (~cahoots@163.182.128.74)
[21:07:25] <entuland> oh I'm doing my best to only use instantiation where I find it useful and necessary (necessary as in right now I wouldn't be able to use the above approaches) - most of my functions are relatively "pure" (only depend on the input, don't alter the input, and return an output)
[21:08:26] <entuland> I'll dive better into those alternatives
[21:08:51] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[21:09:00] <wroathe> entuland: I like https://www.amazon.com/Programming-Haskell-Graham-Hutton-dp-1316626229/dp/1316626229/ref=dp_ob_title_bk
[21:09:21] <wroathe> entuland: Not that you need to become an expert haskell programmer, but I find that there's lots of carry over from learning the basics to all the other languages
[21:09:36] <entuland> noice, thanks for the pointer
[21:09:39] <wroathe> entuland: Or you could try to find a "JS for functional programmers" kind of book out there
[21:09:49] <wroathe> Someone else might have a recommendation in here for that
[21:10:02] <entuland> we'll see, I'm pretty much always around :P
[21:10:59] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 252 seconds)
[21:11:29] <paulcarroty> https://www.youtube.com/watch?v=hy_w_W4nug0
[21:11:30] <skillbot> YouTube Title: Secret GitHub tip
[21:11:33] *** Quits: Iolo (~iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[21:11:46] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 258 seconds)
[21:11:47] <theskillwithin> wroathe i find it a little funny you are pushing haskell lol
[21:12:10] <wroathe> theskillwithin: I'm pushing the concepts, and recommending that a programmer learn more than one language is just good general advice
[21:12:11] *** Quits: Guest35 (~Guest@188.232.148.158) (Quit: Connection closed)
[21:12:22] <wroathe> theskillwithin: No one is saying he or anyone else needs to abandon ship from their primary language
[21:12:47] <wroathe> theskillwithin: It'd be like recommending that someone learn a bit of Java or C# to understand "standard" object oriented programming
[21:13:54] <cantelope> https://code.whitehotrobot.com/d/2w9a
[21:15:43] <theskillwithin> wroathe lol thats doubling down now haha.  if your advice to learn something is to learn an entire different language first, thats highly impractical, no one wants to hear that thats learning lol
[21:15:47] *** Joins: Iolo (~iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi)
[21:16:47] <wroathe> theskillwithin: Is Javascript the only programming language you know?
[21:21:29] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[21:21:56] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[21:22:26] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[21:22:33] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[21:23:10] *** Quits: acid (~acid@user/acid) (Ping timeout: 256 seconds)
[21:23:56] <wroathe> entuland: Well, anyway, if you're not in the mood to work through a book on a new langauge you've got the terminology: "currying" and "composition.
[21:24:13] <wroathe> entuland: So you should be able to find results on google if you want more reading
[21:24:20] <celphi> \o wroathe
[21:24:25] <wroathe> celphi: sup
[21:24:45] <celphi> nothing much- just looking for that next thing to work on
[21:26:45] <wroathe> celphi: How many languages do you know, now?
[21:27:02] <entuland> indeed
[21:27:03] <celphi> well - im not like a master of any
[21:27:14] <wroathe> celphi: Sure, but which ones have you worked with in the recent past
[21:27:29] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-122.prtc.net)
[21:27:56] <wroathe> celphi: (turing complete languages, anyway, not like JSON or HTML)
[21:28:50] *** Joins: acid (~acid@user/acid)
[21:28:59] <celphi> but i know: python, C, C++, perl, javascript, php, node, mysql
[21:29:14] <wroathe> Nice.
[21:29:23] <wroathe> celphi: Just making a point for theskillwithin :P
[21:29:29] <celphi> oh haha
[21:29:47] <celphi> it helps to know more bc it makes you think differently when writing programs
[21:29:55] <wroathe> celphi: Exactly
[21:30:01] <celphi> learning C helped the most by far
[21:30:32] <celphi> bc js is so forgiving being dynamically typed
[21:30:44] <wroathe> celphi: I had recommended that entuland pick up a book on Haskell if he wants the nitty gritty for functional programming concepts, and theskillwithin took issue with my recommending another language to learn concepts
[21:31:02] *** Joins: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com)
[21:31:14] <celphi> oh haskell i tried for a little bit but lost interest., but it helps a ton with functional programming
[21:31:24] <wroathe> celphi: As it happens, learning the basics of a new language is a great way to pick up concepts
[21:31:45] <wroathe> And the carry over between languages is immense
[21:31:50] <celphi> indeed
[21:31:53] *** Quits: Isthmusi (~Isthmus@user/isveni) (Quit: leaving)
[21:31:53] <celphi> esp C
[21:31:56] <entuland> I was actually messing with racket a long time ago and even started using it to play with a toy language implemented with it - that was probably too much of a task back then ahhhaha
[21:32:26] *** Joins: Isthmusi (~Isthmus@user/isveni)
[21:32:42] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (Quit: quit)
[21:33:04] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[21:33:05] <celphi> you want to learn a hard language then look at Erlang. That crap is so foreign to me
[21:33:15] <entuland> no thanks ahahah
[21:33:20] <wroathe> I have yet to try, but I've heard good things
[21:33:28] <celphi> i say hard because it doesnt mimic anything ive ever seen b4
[21:33:46] <wroathe> One site I love is the learn x in y site: https://learnxinyminutes.com/docs/erlang/
[21:33:51] <entuland> I'll be happy to continue with JS the most I can, hopefully getting better at the functional paradigm
[21:34:03] <wroathe> If you're familiar with concepts and you just need a rosetta stone to look up syntax this site is great
[21:34:33] <wroathe> entuland: Yeah, I'm sure there are good books on the topic for JS out there. I just haven't read any, and so I don't feel comfortable recommending some to you
[21:34:41] <entuland> that's okay
[21:35:04] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 256 seconds)
[21:35:35] <celphi> time to get some food!
[21:36:12] <entuland> for the project I'm working on right now I'll have to stick with somewhat more "traditional" approaches - I was also almost about not to use arrow functions at all to try and keep the system easier for less experienced programmers that will have to deal with them
[21:36:37] <entuland> heck, I'm just starting to get a decent grip myself on them (main issue being the reading part)
[21:37:02] <wroathe> entuland: I would recommending avoiding them then and just following the traditional OOP formula
[21:37:13] <wroathe> foo() { } // and method declaration syntax
[21:37:36] <entuland> oh sure I still use plenty of "function" when declaring them
[21:37:48] <wroathe> entuland: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#prototype_methods
[21:37:52] <entuland> I'm using the arrow functions only in very small oneliners
[21:38:21] <wroathe> entuland: An FP hardliner has very little reason to use anything BUT arrow functions in a JS program
[21:38:24] <entuland> nah, not going to touch the class word at all
[21:38:27] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 245 seconds)
[21:38:42] <entuland> yep, that's why I'm using arrow functions there
[21:39:04] <wroathe> entuland: Well, then you're getting the worst of all worlds :P If you need OOP to make less experience programmers feel more comfortable, then you might as well go all in
[21:39:39] <entuland> may be
[21:40:14] <entuland> the kind of instantiable functions I'm going to create are small enough not to make any difference anyways
[21:41:18] *** Joins: onosendi (~onosendi@user/onosendi)
[21:42:12] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 276 seconds)
[21:43:01] *** Quits: cbleslie (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[21:43:06] *** Joins: cbleslie2 (~cbleslie@47.148.37.14)
[21:43:06] *** Quits: cbleslie2 (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[21:43:15] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Remote host closed the connection)
[21:43:41] *** Joins: cbleslie (~cbleslie@47.148.37.14)
[21:52:02] *** Joins: ferdna (~ferdna@user/ferdna)
[21:52:33] *** Quits: Slartiba2t (~user@c-80ded854.217486-0-69706f6e6c79.bbcust.telenor.se) (Remote host closed the connection)
[21:53:19] *** Joins: pulse (~pulse@user/pulse)
[21:54:00] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[21:54:49] <theskillwithin> apple spying on your photos now
[21:56:16] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[21:58:55] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.2)
[21:58:57] *** Quits: friend (friend@c-73-43-171-169.hsd1.ga.comcast.net) (Ping timeout: 268 seconds)
[21:59:18] *** Joins: onosendi (~onosendi@user/onosendi)
[22:06:54] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[22:07:33] *** Quits: federico_it (~textual@151.95.116.125) (Quit: Textual IRC Client: www.textualapp.com)
[22:10:03] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[22:11:03] *** Joins: fef (~thedawn@user/thedawn)
[22:11:55] <ljharb> for child porn
[22:12:33] *** Joins: Rockwood (~Rocky@user/rocky)
[22:14:20] <theskillwithin> next it will be for drugs
[22:14:54] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 252 seconds)
[22:15:24] *** Joins: byanka (~byanka@91.244.10.3)
[22:22:06] <sheetjs> revenge porn sites used to have a funny circular logic problem
[22:22:48] <sheetjs> the thought was, you can request to remove content taken/distributed without your consent
[22:23:12] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973)
[22:23:23] <sheetjs> but in order to "verify" you had to submit photos of yourself (ostensibly taken/distributed with your consent)
[22:26:00] <sheetjs> do not call list worked the same way: you gave a phone number, the list of numbers not to call was shared around, some unscrupulous people only called the numbers on the list
[22:26:04] <theskillwithin> at that point, its prob better to just go to the fbi
[22:26:58] <sheetjs> the problem with all of these projects at the end of the day is the people involved
[22:27:17] <sheetjs> "dumb fucks" zuckerburg doesn't care about the issues at hand
[22:28:42] <theskillwithin> https://www.reddit.com/r/JoeRogan/comments/ot1pz7/this_certainly_didnt_age_well/
[22:29:12] <theskillwithin> sheetjs zuck called people on the do not call list?
[22:29:42] *** Quits: Jck_true (~jcktrue@188.228.89.240) (Quit: The Lounge - https://thelounge.chat)
[22:29:53] <sheetjs> not him personally, of course
[22:30:02] <sheetjs> but at some level, the organization is driven from the top
[22:30:21] <sheetjs> the people at the top set the moral and ethical expectations
[22:30:46] <sheetjs> and when you talk about your users as "dumb fucks" and private information as yours, is it really a surprise that the rest of the organization is like minded?
[22:30:57] *** Joins: cahoots (~cahoots@163.182.128.74)
[22:31:24] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 252 seconds)
[22:32:06] <theskillwithin> and apparently now, they are controlled by the government, or at least told what to do by the government
[22:34:59] <sheetjs> who knows, but the overall problem with apple is credibility
[22:35:06] <sheetjs> and with facebook and most of tech
[22:35:31] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[22:35:35] <sheetjs> i trust facebook to do what is most profitable for them, likewise with apple
[22:35:42] *** Quits: cahoots (~cahoots@163.182.128.74) (Ping timeout: 258 seconds)
[22:36:04] <sheetjs> if there is a CP problem, it's probably because those companies are profiting from its existence / have to spend money to solve the problem
[22:36:24] <onosendi> Anything to beat the last quarterly.
[22:37:37] <sheetjs> this is not some sort of "capitalism is bad" screed but trying to do the right thing in 2021 is really really hard
[22:38:16] <sheetjs> it's hard, for example, to maintain an open source presence.  it's super tempting to abandon it, relicense all of the software as proprietary, and start charging people for stuff that was only possible because of the community
[22:38:28] <sheetjs> this wasn't true 5 years ago, we as a community just normalized that process
[22:38:46] *** Joins: Guest1 (~Guest@188.232.148.158)
[22:39:09] <sheetjs> we said it's ok for mozilla to put ads in the browser or partner with ad companies because they needed money
[22:39:29] *** Joins: Jck_true (~jcktrue@188.228.89.240)
[22:41:32] <theskillwithin> developers need an income too
[22:42:29] <sheetjs> again this isn't an argument about all software being free, but rather that people normalized the idea of profits at all costs
[22:42:48] <sheetjs> even if it betrayed the very values that we claim to uphold
[22:43:41] *** Joins: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net)
[22:44:16] *** Joins: fiend (friend@c-73-43-171-169.hsd1.ga.comcast.net)
[22:44:32] <b-rex> the world doesn't operate on oil money
[22:44:46] <sheetjs> now its data money
[22:44:53] <b-rex> it's data now. what do these companies do once they have immense amounts of data?
[22:45:07] <sheetjs> sell it back to you
[22:45:17] <theskillwithin> and for some reason they also give it all to the government
[22:45:20] <b-rex> i think we'll soon reach a point where the monetization of data is washed out.
[22:45:26] <sheetjs> a huge number of startups are essentially in the business of helping you organize data and charge you for access
[22:45:44] <sheetjs> adobe's continued profits comes from holding people's data hostage
[22:45:53] <sheetjs> trapped in proprietary data formats like PSD
[22:46:08] <sheetjs> microsoft switched over to the rental model as well
[22:46:56] <sheetjs> now .COM renewal costs are going up
[22:47:12] <b-rex> once they've reached peak monetization of your data, they will (and some already do) manipulate the user's reality to control behavior in such manner that humans beings are nothing more than nodes in a compute cluster, running code that turns profit for the platforms running society.
[22:47:18] <theskillwithin> you know how theres the super rich we know,  and then theres people even richer that isn't on the list of whos rich and we don't know. those are the oil people probably
[22:48:21] *** Quits: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net) (Ping timeout: 258 seconds)
[22:48:52] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 245 seconds)
[22:49:16] <sheetjs> on a more positive note, javascript used to be more empowering, then it succumbed to magpies and the race to add nonsense
[22:49:41] <theskillwithin> ...
[22:49:50] <sheetjs> (ECMASports)
[22:50:28] <theskillwithin> i don't call that a positive note lol
[22:50:30] <sheetjs> ECMASports originally was a commentary on how the language designers and developers used to focus more on stability and now do yearly releases with syntactic sugar
[22:50:33] <sheetjs> ih
[22:50:34] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[22:50:51] <sheetjs> well dwelling on data monetization is darker than thinking about javascript
[22:51:12] <theskillwithin> haha true, just funny i guess
[22:52:15] <sheetjs> again, no one objects to the general concept of making money
[22:52:25] <sheetjs> extracting rent? that's a different discussion
[22:54:11] <b-rex> the rent-seeking business model will eventually fall out of fad, because it's not sustainable in the long term.
[22:54:55] <theskillwithin> arent there huge companies like blackrock buying up all the houses now or something
[22:55:01] <sheetjs> yeah literally
[22:55:14] <theskillwithin> and putting out propoganda to young people that they shouldn't own a house
[22:55:24] <sheetjs> small homeowners and rentiers are facing pressure because of the eviction moratorium
[22:55:30] <sheetjs> tech is part of the problem
[22:55:35] <sheetjs> peddling SaaS
[22:55:41] <sheetjs> dell had a TV ad
[22:55:49] <sheetjs> "we'll stop at nothing to deliver our technology as a service"
[22:56:28] <b-rex> i hope they lift the moratoriums and blackrock succeeds in turning us into rent serfs, actually. it will be the most in your face wake-up call for ordinary people to start seeing the business practice in all other sectors of the economy.
[22:56:35] <theskillwithin> prob in about 10 years, we won't be allowed to talk about things like this
[22:56:42] <sheetjs> its too late
[22:56:43] <b-rex> once we see the cancer it is, we'll move past it
[22:56:57] <sheetjs> 2008 the government picked winners and losers
[22:57:20] <sheetjs> and arguably we're still feeling those effects
[22:58:18] <b-rex> a good thing about the rent-seeking model is it keeps TVs at a low price :)
[22:58:51] <theskillwithin> i don't even own a tv
[22:58:53] <sheetjs> TVs deliver ads
[22:59:12] <theskillwithin> or well i do, but its old and semi broken, and haven't bothered to replace it cuz I never use it
[22:59:16] <b-rex> TVs don't just deliver ads, you can no longer find a "dumb" TV.
[22:59:32] <sheetjs> old CRTs
[23:00:01] <theskillwithin> if your lucky they come with a camera so the government can watch you f***
[23:00:03] *** Quits: iomari892 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[23:00:32] <b-rex> can only get smart TVs now
[23:00:40] <theskillwithin> i welcome our IOT overlords
[23:00:46] <wintersky> that's called progress
[23:01:04] <wintersky> be ready for more of such stuff in the future
[23:01:17] <sheetjs> javascript is part of the problem
[23:01:26] <sheetjs> supporting react is implicitly supporting facebook
[23:01:36] <sheetjs> using the airbnb style guide and referring to it as such is support for airbnb
[23:02:10] <b-rex> if you wanna support tyranny and oppression, why not use vuejs? that's what i do.
[23:02:16] <theskillwithin> i was shocked there were fauci emails to zuck telling him what to do
[23:02:40] <sheetjs> evan you is a chinese-american iirc
[23:02:47] <sheetjs> like, born in the US
[23:02:51] <Slade> wait whats fauci telling zuck to do about javascript?
[23:02:55] <b-rex> sheetjs: he is
[23:03:11] <theskillwithin> Slade haha no not about javascript
[23:03:14] <theskillwithin> lol
[23:03:34] <b-rex> two factors led to vuejs exploding in popularity: laravel and china
[23:03:40] <sheetjs> didn't you know the patent protection clauses also protect you from covid? /s
[23:03:55] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Read error: Connection reset by peer)
[23:04:06] <Slade> vuejs also has much lower learning curve and is more approachable than react or angular.. was also incredibly fast
[23:04:12] <theskillwithin> on youtube they take down north korea defectors speaking out, but allow china propoganda.  its messed up
[23:04:25] <theskillwithin> its all about the $$$$
[23:04:31] <Slade> and the tooling was mature much sooner on windows for vuejs than react
[23:04:55] <sheetjs> vuejs is definitely a feel-good story compared to react
[23:04:58] *** Joins: codemin (~codemin@69.167.13.192)
[23:05:13] <theskillwithin> hey! i like react
[23:05:13] <b-rex> Slade: it also has extremely well written documentation with authentic translation to chinese. this led to it being widely popular in china
[23:05:21] <Slade> b-rex, indeed
[23:05:39] <theskillwithin> sheetjs i thought you liked open source, react is open source
[23:05:53] <Slade> i'm slowly moving to react from vuejs just because its more featureful.. but vuejs is legit
[23:05:56] <sheetjs> there's a lot of cool stuff in the chinese JS community that doesn't make their way here because of the language barrier
[23:06:02] <sheetjs> like weex and that ecosystem
[23:06:15] <sheetjs> theskillwithin: the BSD+PATENTS license was notably not open source
[23:06:52] <sheetjs> also a facebook employee may have tried to strip sheetjs attributions in react, which doesn't really seem very open source friendly
[23:08:20] <theskillwithin> https://github.com/facebook/react/blob/main/LICENSE
[23:09:08] <sheetjs> in 2014 they moved from apache to BSD+patents https://github.com/facebook/react/commit/dcf415c2b91ce52fd5d4dd02b70875ba9d33290f#diff-c693279643b8cd5d248172d9c22cb7cf4ed163a3c98c8a3f69c2717edd3eacb7
[23:09:29] <sheetjs> after enormous community pressure they moved to MIT https://github.com/facebook/react/commit/b765fb25ebc6e53bb8de2496d2828d9d01c2774b#diff-c693279643b8cd5d248172d9c22cb7cf4ed163a3c98c8a3f69c2717edd3eacb7
[23:09:37] <theskillwithin> sheetjs i think you showed me that,  there was like a comment in the code giving u credit?  thats gone now?
[23:10:01] <sheetjs> it's gone *now* because they moved to a completely different approach
[23:10:02] <theskillwithin> sheetjs ya i remember that, everyone was outraged
[23:10:25] <sheetjs> at the time it was being merged, some employee suggested stripping the sheetjs comment
[23:11:02] <sheetjs> i guess it makes us "dumb fucks" for making anything open source in the first place :(
[23:11:14] *** Quits: codemin (~codemin@69.167.13.192) (Remote host closed the connection)
[23:12:00] <theskillwithin> i think at the end of the day, the javascript community is great
[23:12:47] <sheetjs> there are many good and passionate developers, and a bunch of unscrupulous developers in the mix
[23:13:47] <sheetjs> and overall its great that the community is able to attract brilliant people
[23:14:11] <theskillwithin> and like there aren't really trade secrets, we all share with each other
[23:15:17] <sheetjs> licensing is the cudgel
[23:15:38] *** Joins: codemin (~codemin@69.167.13.192)
[23:15:42] <sheetjs> there are plenty of AGPL "open source" javascript libraries but we tend not to talk about them
[23:17:33] <theskillwithin> apparently they want to require every car comes with a breathalyzer lock in the future
[23:17:56] *** Joins: isthmus_ (~isthmus_@122.175.192.102)
[23:17:58] *** Joins: mexen (uid495612@user/mexen)
[23:18:43] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-122.prtc.net) (Ping timeout: 246 seconds)
[23:19:18] <sheetjs> but even "open source" isn't immune to shenanigans
[23:19:26] <theskillwithin> is there a way to show only the result window in a jsfiddle?
[23:19:29] <theskillwithin> https://jsfiddle.net/theskillwithin/u3nwjbym/
[23:19:35] <sheetjs> "In older versions of Video.js (6 and earlier), in the vjs.zencdn.net CDN-hosted versions we include a stripped down Google Analytics pixel that tracks a random sampling (currently 1%) of players loaded from the CDN."
[23:19:40] <theskillwithin> i mean like, to other people
[23:19:56] <sheetjs> click "embed"
[23:21:00] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[23:22:58] <isthmus_> i've to animate the translation of a div to the position of another div next to it on a particular keypress. currently, i'm (1) calculating the translation distance by subtracting the offsets of the two elements and then, (2) setting the `transform: translate(${distance})` style of the div inside the eventListener. is this idiomatic JS? i'm new. excuse me if off-topic.
[23:23:07] <theskillwithin> i mean like with a link, but that does get me closer
[23:23:17] <sheetjs> did you look at it?
[23:23:29] <sheetjs> it generates a link for you
[23:23:51] <theskillwithin> it generates a script to embed
[23:24:06] <sheetjs> so click embed
[23:24:13] <sheetjs> then turn off javascript / html / css
[23:24:30] <theskillwithin> ya thats what i did
[23:24:36] <theskillwithin> <script async src="//jsfiddle.net/theskillwithin/u3nwjbym/embed/result/"></script>
[23:25:08] <sheetjs> click "prefer iframe?"
[23:25:14] <theskillwithin> ya tried that
[23:25:15] <isthmus_> i mean to ask if this is a standard way to do simple animations now which work on all browsers?
[23:25:28] <theskillwithin> i think codepen can do it, where u can have a link direct to the result view
[23:25:30] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[23:26:16] <sheetjs> <iframe width="100%" height="300" src="//jsfiddle.net/theskillwithin/u3nwjbym/embedded/result/" allowfullscreen="allowfullscreen" allowpaymentrequest frameborder="0"></iframe> does that work?
[23:26:28] *** Joins: pavonia (~user@user/siracusa)
[23:26:34] <theskillwithin> isthmus_ ya thats probably kosher
[23:27:36] <theskillwithin> sheetjs i mean like a direct link to view it,  like if you visit jsfiddle.net/theskillwithin/u3nwjbym/embedded/result/  it still shows the etnire fiddle and not just the result portion
[23:28:10] <isthmus_> theskillwithin: thanks. i also tried to do Element.animate() but what i'm doing right now suits me currently as it's easier to do. i won't animations do any animations which change the layout anyway. just a few translations and color changes.
[23:28:17] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[23:28:20] <sheetjs> weird, it's doing a redirect
[23:28:37] <isthmus_> s/animations do/do/
[23:28:41] <theskillwithin> sheetjs well i guess this works https://codepen.io/theskillwithin/full/VwbVjdR
[23:29:24] <sheetjs> lame
[23:29:28] <theskillwithin> sheetjs really im just being lazy and don't want to deploy this simple tool for marketing dept
[23:30:38] <theskillwithin> (they keep fucking up url params, so making a visual tool so they can see they fucked up)
[23:31:26] *** Joins: AJTJ (~AJTJ@d207-189-236-135.yt.northwestel.net)
[23:31:31] <theskillwithin> not that i blame them, there not devs, but trying to help
[23:31:40] <AJTJ> what is a scalar array?
[23:32:49] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 258 seconds)
[23:33:03] *** Quits: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation) (Remote host closed the connection)
[23:33:21] *** Quits: codemin (~codemin@69.167.13.192) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:33:25] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[23:33:32] <theskillwithin> isthmus_ if you make like a codepen or jsfiddle reduced example, it will help others to scrutinize your code better.  but ya i think your fine
[23:33:48] *** Joins: codemin (~codemin@69.167.13.192)
[23:33:51] <sheetjs> array of scalars
[23:33:58] <sheetjs> what context AJTJ
[23:34:09] *** Quits: codemin (~codemin@69.167.13.192) (Client Quit)
[23:35:07] <isthmus_> theskillwithin: sure. i don't have a bug in my code. i was just asking to find out if what i'm doing is right. thanks for replying.
[23:35:07] *** Quits: AJTJ (~AJTJ@d207-189-236-135.yt.northwestel.net) (Read error: Connection reset by peer)
[23:35:08] *** Joins: Guest68 (~Guest68@d207-189-236-135.yt.northwestel.net)
[23:36:56] *** Quits: hmw[at] (~hmw@80-108-56-158.cable.dynamic.surfer.at) (Quit: Leaving.)
[23:37:10] *** Joins: hmw[at] (~hmw@80-108-56-158.cable.dynamic.surfer.at)
[23:37:28] <theskillwithin> sheetjs lol for a sec i was like, wtf is that a data type i haven't heard of
[23:42:44] <sheetjs> its confusing because different communities use it to mean different things
[23:43:08] <sheetjs> scalar is a single numeric value, as opposed to a vector (array)
[23:43:27] <sheetjs> but PHP and Perl use scalar to mean something different
[23:43:37] *** Quits: cbleslie (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[23:44:11] <sheetjs> PHP scalars are simple data (number, string, boolean).  associative arrays are not scalars
[23:44:18] *** Joins: cbleslie (~cbleslie@47.148.37.14)
[23:45:30] *** Quits: isthmus_ (~isthmus_@122.175.192.102) (Quit: leaving)
[23:55:32] *** Quits: TheSilentLink (~TheSilent@user/thesilentlink) (Ping timeout: 245 seconds)
