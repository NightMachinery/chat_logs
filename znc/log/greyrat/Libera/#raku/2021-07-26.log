[00:16:01] <vrurg> olve: There is no many solutions in this case, unfortunately. The closes one would be a `where` block matching against run-time resolution with ::('A::Type').
[00:16:26] *** Joins: olve__ (~olve@231-10-207-82.pool.ukrtel.net)
[00:17:48] <vrurg> A subset with `where` would also do and would look better than a bare `where` alongside with a declaration.
[00:20:13] *** Joins: Olve_ (~Srain@231-10-207-82.pool.ukrtel.net)
[00:23:25] <MasterDuke> olve: `require HTTP::UserAgent; my subset HUA where ::("HTTP::UserAgent"); my HUA $useragent = HTTP::UserAgent.new;` works. but assigning something other than an HTTP::UserAgent will throw a runtime error and you still can't use `.= new`
[00:33:47] <olve> vrurg, MasterDuke: üëçÔ∏è
[00:43:14] *** Joins: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry)
[00:43:39] <StayHungry> lizmat: still afk, sir?
[00:43:40] <tellable6> 2021-07-25T17:14:41Z #raku <tbrowder> StayHungry try raku module DateTime::Parse
[00:43:41] <tellable6> hey StayHungry, you have a message: https://gist.github.com/7d43fb47d5e27bd676fc79f3f38773bc
[00:46:17] <StayHungry> tbrowder recommended to ask you if Raku had a way to parse 23-07-1821 as dd-mm-yyyy and then convert to yyyy-mm-dd
[00:46:35] <StayHungry> without installing remote modules (as Per5 does)
[00:50:48] <lizmat> I don't listen to "sir"   :-)
[00:51:14] <lizmat> some of the people on this channel, are actually of the female persuasion :-)
[00:51:22] * gfldex goes to check what kind of music "sir" play
[00:51:34] <lizmat> didn't backlog yet, am in the middle of some other stuff atm
[00:52:30] <StayHungry> lizmat: err‚Ä¶ you're she? o_O
[00:52:41] <lizmat> :-)
[00:54:37] <StayHungry> lizmat: ahem‚Ä¶ perhaps date parsing is not your field either?
[00:55:22] <lizmat> not really, no....  but I did work a lot on the Date / DateTime modules to make them faster  :-)
[00:55:33] <lizmat> s/modules/classes
[00:56:00] <StayHungry> i wonder whom to ask then *confused*
[01:01:12] <lizmat> StayHungry: perhaps you could repeat the question, so I don't need to backlog now ?
[01:02:32] <StayHungry> tbrowder recommended to ask you if Raku had a way to parse 23-07-1821 as dd-mm-yyyy and then convert to yyyy-mm-dd without installing remote modules (as Per5 requires to get one called DateTime::Format::Strptime from CPAN)
[01:03:21] <StayHungry> for example, PHP and PowerShell do it as follows
[01:03:32] <StayHungry> echo datetime::createfromformat('d-m-Y', '23-07-1821')->format('Y-m-d');
[01:03:42] <StayHungry> [datetime]::parseexact('23-07-1821', 'dd-MM-yyyy', $null).tostring('yyyy-MM-dd')
[01:04:50] <StayHungry> in R: '23-07-1821' |> as.Date('%d-%m-%Y') |> format('%Y-%m-%d') |> cat()
[01:04:54] <lizmat> m: dd "1821-07-23".Date   # so you want to work that for "23-07-1821"
[01:04:54] <camelia> rakudo-moar 74d7ff771: OUTPUT: ¬´Date.new(1821,7,23)‚ê§¬ª
[01:06:02] <StayHungry> task is 23-07-1821 -> 1821-07-23
[01:06:14] <StayHungry> so far Raku allows to
[01:06:16] <StayHungry> say '23-07-1812'.split('-').reverse.join('-')
[01:06:16] <evalable6> StayHungry, rakudo-moar 74d7ff771: OUTPUT: ¬´1812-07-23‚ê§¬ª
[01:06:23] <StayHungry> say S/(\d+)\-(\d+)\-(\d+)/$2-$1-$0/ given '23-07-1812'
[01:06:24] <evalable6> StayHungry, rakudo-moar 74d7ff771: OUTPUT: ¬´1812-07-23‚ê§¬ª
[01:07:09] <StayHungry> and i wonder if Raku is capable of the 3rd way, i.e. parse string with custom input date format and convert it to custom output date format
[01:07:28] <lizmat> it isn't in core, from what I know
[01:07:40] <StayHungry> that's what i wanted to know, thank you
[01:07:58] <lizmat> sorry that I didn't get that earlier... :-)
[01:08:17] <StayHungry> (-:
[01:08:38] <lizmat> I find the idea of a .Date('%d-%m-%Y")  intriguiing
[01:08:52] <Util> StayHungry: DateTime::Format::strptime would work, but it is marked as NYI (Not yet implemented).
[01:09:34] <Util> DateTime::Parse does the kind of thing that you want, but I think it has to already know about your intended format, and it does not. (Error: "Unable to parse 23-07-1812").
[01:09:45] <StayHungry> Util: DateTime::Format::Strptime is a remote module, thus not applicable in my case which i mentioned earlier. only native ways.
[01:11:20] <Util> StayHungry: I missed that restriction. lizmat: I concur, not currently in core.
[01:11:36] <StayHungry> Util: you could see which popular scripting languages are capable of that in my table https://dpaste.org/STqW/slim
[01:11:50] <lizmat> StayHungry: would you consider NativeCall core or not?
[01:11:53] <Util> split+reverse+join is concise, and might be best for your table-of-comparisons.
[01:12:22] <lizmat> if so, maybe calling libc's strptime() function could be a solution?
[01:12:29] <StayHungry> lizmat: you're the boss, you tell me. if nothing extra is required to be downloaded, then i'm curious :)
[01:12:57] <lizmat> it's part of the standard distribution, but you need to do a "use NativeCall" to activate
[01:13:02] <lizmat> m: use NativeCall
[01:13:02] <camelia> rakudo-moar 74d7ff771: ( no output )
[01:13:05] <Util> In production code, I would use a more specific regex like S/(\d\d)\-(\d\d)\-(\d\d\d\d)/ to warn of bad input.
[01:13:49] <StayHungry> lizmat: i'm ready to active NativeCall, but what then? :)
[01:14:08] <lizmat> well...then you need to get into C programming  :-)
[01:14:18] <lizmat> so maybe not a good suggestion after all
[01:14:41] <lizmat> are your DD-MM-YYYY dates always well-formed?
[01:15:00] <StayHungry> C... i see... a little bdsm for the night :D yes, Liz, they are
[01:17:02] <lizmat> m: sub d($d) { Date.new: .substr(6),.substr(3,2),.substr(0,2) given $d }; dd d "23-07-1821"
[01:17:03] <camelia> rakudo-moar 74d7ff771: OUTPUT: ¬´Date.new(1821,7,23)‚ê§¬ª
[01:17:18] <lizmat> would that help you?
[01:17:38] <StayHungry> hacky one :))
[01:17:48] <lizmat> will perform pretty well
[01:18:34] <vrurg> a bit more reliable is to rely on '-' been the separator. then `DateTime.new: split('-')[2,1,0]`
[01:18:49] <StayHungry> but it's not really a date parsing with chosen format ,) it's a variation of say '23-07-1812'.split('-').reverse.join('-')
[01:19:13] <vrurg> With split it won't rely on 0-prefixed days and months.
[01:19:46] <Util> lizmat: StayHungry is working on (please corect me if I am wrong!) the Raku entry for this table:
[01:19:49] <Util> https://dpaste.org/QSC0/slim
[01:20:45] <StayHungry> yeah, learning by comparing :)
[01:21:28] <lizmat> ah, so you're only interested in creating a *string* of the right format, not an actual Date object?
[01:21:37] * Util just saw that the link was already posted, half a screen back. oops.
[01:22:08] * lizmat is trying to follow several parallel discussions  :-)
[01:22:19] <StayHungry> Util: you posted an old one, fresh one is  https://dpaste.org/STqW/slim
[01:23:19] <StayHungry> lizmat: yes, parse '23-07-1821' as 'dd-mm-yyyy' then convert to 'yyyy-mm-dd' 
[01:24:20] <StayHungry> well, i guess we did our best, Raku is young and the most promising features are yet to come :)
[01:24:24] <lizmat> then it is not really about the validity of the date anyway
[01:25:00] <lizmat> none of the solutions appear to check validity
[01:25:33] <lizmat> and the python solutions appear to load external modules?
[01:25:58] <lizmat> anyways, I think I've given it my best shot, hope it helped, StayHungry 
[01:26:01] <lizmat> afk again&
[01:26:40] <StayHungry> thank you for your kind attention, lizmat
[01:27:00] <StayHungry> python solution loads a module included with default installation
[01:28:43] <StayHungry> other than that, i like how syntax of Raku evolved over Perl 5
[01:29:06] <StayHungry> print join '-', reverse split /-/, '23-07-1821' is still a bit hard to grasp
[01:29:25] <StayHungry> whereas say '23-07-1812'.split('-').reverse.join('-') is far closer to how i think and speak :D
[01:31:11] <StayHungry> alas, execution speed is the issue. perl5 takes ~30ms on my end, raku ~250ms
[01:31:12] <Util> StayHungry: Glad you like it! Since you are interested in cross-lang comparison, do you know about rosettacode.org ?
[01:31:35] <StayHungry> yes, sir :) it was one of inspiration points
[01:32:09] <Util> Great! (and yes, performance is an ongoing struggle)
[01:32:21] <StayHungry> what makes Raku slower?
[01:32:51] <gfldex> About 20 years of work.
[01:32:58] <StayHungry> it takes the same 250ms as PowerShell 5 which is linked to sluggish .NET, but Raku...
[01:33:40] <StayHungry> gfldex: but Perl5 ~30ms
[01:34:45] <Util> chromatic observed (at some point) that Raku beats Perl in speed... *if* you load into Perl all the things that Raku has built-in, like Rats, no-limit-Integers, real object support, etc.
[01:34:46] <gfldex> If you stuff a Perl script with enough modules to get the same features as Raku, you wont get 30ms.
[01:35:33] <StayHungry> so Raku at this point is more powerful then Perl5 out of the box already?
[01:35:37] <gfldex> Rakudo is not fast yet. There is plenty of work to do.
[01:37:11] <Util> StayHungry: The design of Raku varies from a little more powerful to vastly more powerful, depending on which piece you examine, and what modules you are willing to load in Perl.
[01:37:18] <StayHungry> Util: yes, i like how split/reverse/join array part has evolved, but still getting used to how regex changed
[01:37:33] <StayHungry> s/(\d+)-(\d+)-(\d+)/$3-$2-$1/ vs S/(\d+)\-(\d+)\-(\d+)/$2-$1-$0/
[01:37:47] <moon-child> well, depends on how you qualify 'features'.  THere's an extent to which you pay for the features you don't use
[01:38:00] <moon-child> (and an extent to which you can avoid them, using e.g. native-sized ints)
[01:38:19] * Util wants *all* the features.  (but I do take your point)
[01:38:22] <StayHungry> i come from humanities, so $0 for me is like wat? 0 is nothing since its invention as you know :) and escaping - is also new
[01:39:06] <moon-child> 0 was controversial for many millenia.  People were executed for claiming its existence.  It was an _excellent_ innovation, however
[01:39:39] <Util> In programming, almost everyting starts from zero. Perl made an exception because many programmers where were coming to Perl from elsewhere expected $0 to be the name of the current program.
[01:39:39] <moon-child> maybe not 'many', but
[01:41:10] <Util> So, forever more, in Perl I had the headache of "It is in $z[0] when I assign `@z = /(the) reg ex/, but in $1 otherwise", and off-by-one errors are more likely.
[01:41:29] <StayHungry> Util: but check the table, only Raku sticks to $0 for 1st element of group, even oldschool awk does not :)
[01:42:40] <Util> Yes, `awk` was one of the `elsewheres`!
[01:43:14] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:43:14] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:44:49] <Util> moon-child: Yes, I am a better story-teller than I am a historian. Thanks!
[01:44:54] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[01:45:25] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[01:46:19] <moon-child> history _is_ story-telling, like everything else
[01:46:58] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[01:48:51] <StayHungry> say $_.split('-').reverse.join('-') given '23-07-1812'
[01:48:51] <evalable6> StayHungry, rakudo-moar 74d7ff771: OUTPUT: ¬´1812-07-23‚ê§¬ª
[01:48:58] <StayHungry> wow :)
[01:49:09] <Util> moon-child: :^)
[01:50:01] <Util> StayHungry: You can also drop the $_ , because it is implied by a bare dot before the method name.
[01:50:36] <StayHungry> o_O
[01:51:21] <Util> If you are golfing it down, `.split('-')[2,1,0]` beats `.split('-').reverse`
[01:52:13] <StayHungry> let's see...
[01:52:29] <StayHungry> actually something like that i used somewhere...
[01:52:47] <StayHungry> yes, in PowerShell '23-07-1821'.split('-')[2..0] -join '-'
[01:53:25] <Util> In Raku, you would need three dots to make 2...0 work.
[01:53:56] * StayHungry diligently makes notes
[01:54:06] <Util> Two dots is a simple range, and the start cannot be higher than the end, or you get nothing (empty list).
[01:55:08] <Util> Three dots is the `sequence` operator, and it has enormous superpowers. Being able to go "downwards" is the least of its tricks.
[01:55:41] <StayHungry> say '23-07-1812'.split('-')[2...0].join('-')
[01:55:42] <evalable6> StayHungry, rakudo-moar 74d7ff771: OUTPUT: ¬´1812-07-23‚ê§¬ª
[01:55:55] <StayHungry> \(^__^)/
[01:56:15] <Util> :)
[01:56:48] <StayHungry> is there some internal command in Raku to measure execution time?
[01:57:00] <MasterDuke> m: say now - INIT now
[01:57:00] <camelia> rakudo-moar 74d7ff771: OUTPUT: ¬´0.000329592‚ê§¬ª
[01:57:08] <moon-child> I think people more usually use ENTER
[01:57:28] <moon-child> easier to bench multiple things at once that way, just put them in different scopes
[01:57:43] <MasterDuke> that's not a good idea though
[01:57:57] <moon-child> m: { sleep .5; say now - ENTER now }; { sleep .2; say now - ENTER now }
[01:57:58] <camelia> rakudo-moar 74d7ff771: OUTPUT: ¬´0.500623292‚ê§0.200160723‚ê§¬ª
[01:58:18] <MasterDuke> spesh/jit frequently will optimize for the first things it sees, which can cause later things to run slower than they would otherwise
[02:02:35] <StayHungry> sorry, i must be missing something here: raku -e "say now '23-07-1812'.split('-')[2...0].join('-') now" -> error
[02:03:37] <moon-child> you have an exterraneous 'now'
[02:04:29] <StayHungry> so it should be '23-07-1812'.split('-')[2...0].join('-'); say now; ?
[02:05:35] <StayHungry> it outputs Instant:1627248953.6200648 which i am confused to 'decipher'
[02:06:57] <Util> It might be clearer like this:
[02:07:01] <Util> m: my $t = now; say '23-07-1812'.split('-')[2...0].join('-'); say now - $t;
[02:07:01] <camelia> rakudo-moar 74d7ff771: OUTPUT: ¬´1812-07-23‚ê§0.003592873‚ê§¬ª
[02:08:06] <StayHungry> now i see human-readable 0.0120007 :) thank you
[02:09:02] <StayHungry> guess, i'm a bit spoiled by PowerShell in that matter, they simply wrap code with Measure-Command { ... }
[02:09:12] <Util> `now` is this moment in time. `ENTER now` and `INIT now` are tricks to get moments in time during the block-entrance or Raku-initialization, and deliver those remembered moments during the execution of the surrounding expression.
[02:11:21] <Util> Most such one-off measurements are very unreliable on modern systems, since so much else is going on all the time on desktops and laptops.
[02:11:56] <Util> For good thoughts on good methodology, see https://www.perl.com/article/40/2013/9/29/How-to-benchmark-Perl-code-for-speed/
[02:12:45] <Util> Raku has: https://modules.raku.org/search/?q=benchmark
[02:12:51] <StayHungry> "...to get moments in time..." and I recall another line "I've watched see Beams glitter in the dark near the Tannhauser Gate‚Ä¶ all those moments, will be lost in time like tears in rain‚Ä¶" (fom Blade Runner)
[02:13:06] <Util> :)
[02:13:48] <Util> afk, to finish https://theweeklychallenge.org/blog/perl-weekly-challenge-122/#TASK2
[02:15:45] * StayHungry is checking links
[02:18:56] <Util> StayHungry: Only 1h13m until this week ends. The next one will start tomorrow, though. Oh, even if you don't play, have a look; lots of other languages are getting used now, so rich rich field for comparison!
[02:23:32] <StayHungry> i wonder why a butterfly is the mascot, not a raccoooooon :)
[02:26:37] <StayHungry> and that butterfly is so psychedelic, almost nsfw 
[02:27:10] <tbrowder> howdy, raku ppl
[02:29:19] <tbrowder> question: when i pass a named param to a sub in which the param is not defined, why don't i get a warning or exception?
[02:31:01] <tbrowder> m: sub foo(:$debug) {say "foo"}; foo(:bar(1));
[02:31:02] <camelia> rakudo-moar 74d7ff771: OUTPUT: ¬´Unexpected named argument 'bar' passed‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[02:31:20] <StayHungry> from Wiki: "One of the goals behind the lively and colorful design of the logo was to discourage misogyny in the community and for it to be an opportunity for those of "masculine persuasion" to show their sensitive side."
[02:32:20] <tbrowder> hm, i must be doing something weird
[02:34:03] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[02:34:39] <tbrowder> m: multi sub foo($a, :$debug) {say "foo"}; foo(:
[02:34:40] <camelia> rakudo-moar 74d7ff771: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Preceding context expects a term, but found infix : instead.‚ê§at <tmp>:1‚ê§------> 3 sub foo($a, :$debug) {say "foo"}; foo(:7‚èè5<EOL>‚ê§    expecting any of:‚ê§        colon pair‚ê§¬ª
[02:35:53] <tbrowder> m: multi foo($a, :$debug) {say "foo"}; foo(7, :bar);
[02:35:54] <camelia> rakudo-moar 74d7ff771: OUTPUT: ¬´Cannot resolve caller foo(Int:D, :bar); none of these signatures match:‚ê§    ($a, :$debug)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[02:40:58] <StayHungry> Util: thank you for a warm welcome and further details
[02:41:08] <Util> StayHungry: yw!
[02:41:41] * StayHungry said 'that' given 'warm welcome' :D
[02:42:20] <mykhal> i like that secret naive-word-wrapper, except that it makes 2 spaces after period
[02:42:47] <Util> tbrowder: We covered that exact annoyance (named param should warn you) in the Study Group yesterday.
[02:47:29] <Util> tbrowder: I can't recreate my rant^Wexplaination here. See https://design.raku.org/S12.html#Interface_Consistency .
[02:48:44] <Util> m: say pi.cos(:why_will_you_not_tell_me_this_is_bad); 
[02:48:44] <camelia> rakudo-moar 74d7ff771: OUTPUT: ¬´-1‚ê§¬ª
[02:49:58] <gfldex> Don't we got a slang for that?
[02:50:58] * Util perks his ears up at gfldex's words
[02:52:05] <gfldex> https://github.com/nxadm/StrictNamedArguments
[03:01:11] <Util> gfldex: Thanks! That will help with our own classes, but it is really the built-ins that casue my problems, like trying to say .max(:by{+.size}) , when `:by` is only used in the *sub* form.
[03:08:20] *** Quits: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry) (Quit: -)
[03:13:51] <Util> tbrowder: oh, to be clear, sub calls will catch bad named params. It is only the method form of call that has this "Interface_Consistency" issue with ignoring bad named params.
[03:19:56] <mykhal> Util: ok, so i have done rosettacode nocheat mode Bacon cipher without inverted object hash did with strings. More interesting is, that i'm doing in-place list modification on discontinous projected sublist implemented with list of 1-char lists. maybe it can be done more elegantly.  https://rosettacode.org/wiki/Bacon_cipher#Bacon_cipher_solution
[03:20:00] <tbrowder> ok, thnx, bruce, i swear i saw it in a sub, but i‚Äôm probably forgetting it now ‚Äòcause i was coding hot and heavily. i do know at least one was in a method.
[04:07:48] <Util> mykhal: I will need more time to grok the more interesting part, so right now (travelling by car) I can only smile and enjoy the conceptual density of your expression of the broader solution. 
[04:07:53] <Util> Looks great!
[04:08:21] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:08:21] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:09:12] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[04:09:29] <Util> I did play with hoisting the innermost `if` condition, and saw something odd.
[04:10:29] <Util> When I create a pre-evaluated hash just after %bacon, as in `my %bacon_bool = %bacon.sort.map({ .key => .value.comb¬ª.Int¬ª.Bool });`
[04:10:45] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[04:12:25] <Util> , I started refactoring the inner loop to a single statement (which you might not care for), and noticed that all three uses of [0] could be removed, without changing the output.
[04:12:55] <Util> Could it be that your list of 1-char lists
[04:13:18] <Util> would be simpler as just one-level of list-of-single-chars?
[04:15:40] <Util> To be clearer, I didn't need to say any of that, except the last three lines. :^(
[04:16:42] <Util> Does look great though. Did not mean to retract that part!
[04:32:58] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:55:34] *** Joins: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[04:55:35] *** Quits: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[05:17:15] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[05:43:38] *** Joins: melezhik (~melezhik@c-98-198-98-197.hsd1.tx.comcast.net)
[05:43:42] <melezhik> weekly: https://www.reddit.com/r/rakulang/comments/oroc26/validating_k8s_deployments_using_sparrow/
[05:43:42] <notable6> melezhik, Noted! (weekly)
[05:57:25] *** Joins: canw (~canw@221.192.3.237)
[05:57:33] *** Quits: canw (~canw@221.192.3.237) (Client Quit)
[06:06:42] *** Quits: melezhik (~melezhik@c-98-198-98-197.hsd1.tx.comcast.net) (Quit: Connection closed)
[06:08:22] *** Joins: melezhik (~melezhik@c-98-198-98-197.hsd1.tx.comcast.net)
[06:08:25] <melezhik> weekly: https://dev.to/melezhik/validating-k8s-deployments-using-sparrow-5f3f
[06:08:25] <notable6> melezhik, Noted! (weekly)
[06:09:22] <melezhik> .tell lizmat I also shared a reddit post for comments, but looks it was marked as spam by reddit again )-: https://www.reddit.com/r/rakulang/comments/oroc26/validating_k8s_deployments_using_sparrow/
[06:09:23] <tellable6> melezhik, I'll pass your message to lizmat
[06:10:38] *** Quits: melezhik (~melezhik@c-98-198-98-197.hsd1.tx.comcast.net) (Client Quit)
[06:36:10] *** Joins: frost (~frost@59.71.241.179)
[06:46:09] *** summerisle is now known as eof
[06:47:44] <eof> i've just moved across the country and it's taken a good bit of attention away from my improved emacs mode project. i think i was working on q langs.
[07:32:59] *** Joins: ddeimeke (~ddeimeke@ubuntu/member/ddeimeke)
[08:32:59] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:32:59] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:32:59] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:32:59] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:32:59] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:32:59] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:32:59] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:32:59] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:32:59] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:32:59] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:32:59] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:32:59] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:32:59] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:32:59] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:32:59] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:32:59] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:00] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:33:17] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[08:33:37] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[08:33:56] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[08:34:03] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[08:34:08] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[08:34:13] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[08:34:30] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[08:34:51] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[08:35:13] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[08:35:28] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[08:35:48] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[08:35:57] *** Quits: codesections (~user@2600:1700:1650:1faf:3cf8:628e:7dfa:c012) (Ping timeout: 245 seconds)
[08:36:10] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[08:38:18] *** Joins: codesections (~user@45-16-201-121.lightspeed.iplsin.sbcglobal.net)
[08:51:40] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[09:09:58] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[09:40:25] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (*.net *.split)
[09:40:25] *** Quits: dg (~dgl@dg.wtf) (*.net *.split)
[09:40:25] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[09:40:25] *** Quits: bdju (~bard@user/bdju) (*.net *.split)
[09:40:25] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[09:40:26] *** Quits: broquaint (~dbrook@static.140.30.69.159.clients.your-server.de) (*.net *.split)
[09:40:26] *** Quits: Voldenet (~Voldenet@user/voldenet) (*.net *.split)
[09:40:26] *** Quits: polettix_ (~polettixx@linode.polettix.it) (*.net *.split)
[09:40:26] *** Quits: ecocode (~ecocode@ks39550.kimsufi.com) (*.net *.split)
[09:40:26] *** Quits: Od1n (~khatar@aurora-borealis.phear.org) (*.net *.split)
[09:40:26] *** Quits: Henry151 (~bishop@user/henry151) (*.net *.split)
[09:40:28] *** Joins: ecocode_ (~ecocode@ks39550.kimsufi.com)
[09:40:28] *** Joins: broquain1 (~dbrook@static.140.30.69.159.clients.your-server.de)
[09:40:30] *** Joins: dgl (~dgl@dg.wtf)
[09:40:34] *** Joins: polettix (~polettixx@linode.polettix.it)
[09:40:41] *** Joins: Od1n (~khatar@aurora-borealis.phear.org)
[09:41:05] *** Joins: Voldenet (~Voldenet@user/voldenet)
[09:41:06] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[09:41:06] *** Joins: bdju (~bard@user/bdju)
[09:41:19] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[09:41:25] *** Joins: Henry151 (~bishop@user/henry151)
[09:43:37] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (*.net *.split)
[09:43:37] *** Quits: vodkra (~vodkra@user/vodkra) (*.net *.split)
[09:43:37] *** Quits: camelia (~p6eval@camelia.detonation.org) (*.net *.split)
[09:43:37] *** Quits: nine (~nine@comm.detonation.org) (*.net *.split)
[09:43:43] *** Joins: nine (~nine@comm.detonation.org)
[09:43:45] *** Joins: vodkra (~vodkra@user/vodkra)
[09:49:15] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[09:53:17] *** Joins: Ekho (~Ekho@user/ekho)
[09:55:30] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[10:26:34] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[10:35:12] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:42:11] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[10:42:20] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[11:05:47] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[11:11:07] *** Joins: tejr (~tejr@user/tejr)
[11:23:32] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:34:46] *** Joins: ufobat (~martin@dynamic-095-117-055-226.95.117.pool.telefonica.de)
[11:40:48] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[11:51:15] *** dgl is now known as dg
[12:02:49] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[12:07:20] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 268 seconds)
[12:07:50] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[12:24:22] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:24:32] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[12:24:36] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[12:24:39] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[12:26:11] <lizmat> .
[12:26:12] <tellable6> 2021-07-26T01:39:23Z #raku <melezhik> lizmat I also shared a reddit post for comments, but looks it was marked as spam by reddit again )-: https://www.reddit.com/r/rakulang/comments/oroc26/validating_k8s_deployments_using_sparrow/
[12:26:28] <lizmat> .tell melezhik approved
[12:26:28] <tellable6> lizmat, I'll pass your message to melezhik
[12:27:25] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:27:26] *** Joins: patrickb (~patrickb@85-22-61-234.ip.dokom21.de)
[12:32:45] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 258 seconds)
[12:54:39] <patrickb> lizmat: I just noticed that the sidebar in the rakulang reddit topic is outdated in several places. I think you have permissions to change the sidebar. Could you: - Change the download section to just link to rakudo.org (rakudo.org hosts a quite all encompassing overview of the different download options. Duplicating it in different places will always miss options and become out of date). - Maybe switch modules.raku.org over to raku.land. - Cha
[12:55:00] <patrickb> - Change freenode to libera. - Change colabti to liz.nl (or irclogs.raku.org should that already be available.)
[12:56:02] <lizmat> looking at it now.... the mod tools are a bit...  confusing  :-)
[13:21:31] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[13:24:11] <lizmat> patrickb: I think I covered all  now on the new as well as the old reddit
[13:24:40] <patrickb> lizmat: Thank you! That was really guick.
[13:24:49] <patrickb> There are two reddits?
[13:24:53] <lizmat> felt like it took hours though  :-)
[13:26:44] <patrickb> The downloads bit still only lists Star and rakudo-pkg. Did you miss that or was it intentional?
[13:28:20] <lizmat> I guess I misunderstood what you meant?   
[13:28:49] <lizmat> sidebar or menu?
[13:29:15] <lizmat> old / new reddit ?   :-)
[13:31:24] <patrickb> Uhm.. I have only looked at the thingy on the right. I didn't know there were two reddits (link?). Oh! There is a menu! Never noticed that!
[13:33:47] <patrickb> To be more explicit I looked at the box labeled "Links" on the right of the feed at this page: https://www.reddit.com/r/rakulang/ The second subhading labeled "Installation" is what I referred to.
[13:34:43] <japhb> Decided to pull my data structure serialization codec tests out into a repo of its own.  https://github.com/japhb/serializer-perf if anyone is curious what the lay of the land at this moment.
[13:35:01] <moon-child> couple of other things I noticed: there is a link to ideone.com, which does not seem to support raku (perhaps it used to, then changed?); the cheat sheet link labeled 'pdf' does not link to a pdf, but to a github page containing only svgs; the cheat sheet link labeled 'ascii' might be better called 'text'; the link labeled 'mailing lists' and the link labeled 'community' point to the same page
[13:35:11] <lizmat> patrickb: so what link is incorrect now?
[13:36:41] <patrickb> I'd remove the Rakudo *, Docker and rakudo-pkg links altogether and instead link to https://rakudo.org/downloads
[13:42:21] <lizmat> patrickb: done
[13:42:47] <patrickb> lizmat: Looking good. Thank you!
[13:44:52] <lizmat> moon-child: removed ideone
[13:45:17] <lizmat> the really annoying thing is that everything must be done twice :-(
[14:18:37] *** Joins: nahita (~nahita@37.155.96.117)
[14:48:54] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[15:04:32] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[15:14:34] *** Quits: nahita (~nahita@37.155.96.117) (Ping timeout: 240 seconds)
[15:26:30] *** Joins: nahita (~nahita@37.155.96.117)
[16:18:47] <Doc_Holliwood> (Int) routine is-prime
[16:18:50] <Doc_Holliwood> Returns True if this Int is known to be a prime, or is likely to be a prime based on a probabilistic Miller-Rabin test.
[16:19:06] <Doc_Holliwood> What exactly does "known" mean?
[16:19:36] <Doc_Holliwood> Does Raku keep a list of primes somewhere? And if it does, why can't I access it?
[16:21:20] <lizmat> Doc_Holliwood: I think that is hidden somewhere in the library that's used for primes, somewhere in MoarVM land
[16:22:21] <Doc_Holliwood> Might be worth it to expose that, yes?
[16:22:33] <Doc_Holliwood> $*PRIMES =)
[16:22:40] <lizmat> but why?
[16:23:11] <lizmat> could well be a bitmap
[16:23:33] <Doc_Holliwood> Because primes are used for a lot of things
[16:25:07] <lizmat> so you'd want to randomly select a prime?
[16:25:15] <lizmat> or get the next prime?
[16:25:57] <tbrowder> japhb: do you plan to add TOML or HJSON?
[16:33:06] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:34:49] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[16:40:22] <MasterDuke> Doc_Holliwood: it's so fast to calculate whether or not something is prime that it isn't worth the memory to keep a list around
[16:41:47] <tbrowder> if anyone is interested in my Draw2D::Furniture module, i'm almost ready for a major new release and could use a tester
[16:55:53] *** Joins: canw (~canw@110.254.128.167)
[16:56:46] *** Quits: canw (~canw@110.254.128.167) (Client Quit)
[17:14:07] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[17:38:57] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[17:40:07] *** Quits: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Ping timeout: 250 seconds)
[17:40:19] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[17:57:12] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/07/26/2021-30-third-sat-in-summer/
[18:12:46] *** Quits: ufobat (~martin@dynamic-095-117-055-226.95.117.pool.telefonica.de) (Ping timeout: 258 seconds)
[18:16:28] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[18:37:46] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:35:11] *** Quits: patrickb (~patrickb@85-22-61-234.ip.dokom21.de) (Remote host closed the connection)
[19:54:45] *** Joins: patrickb (~quassel@55d49d18.access.ecotel.net)
[19:57:23] *** Joins: ufobat (~martin@dynamic-095-117-055-226.95.117.pool.telefonica.de)
[20:06:44] *** Quits: ufobat (~martin@dynamic-095-117-055-226.95.117.pool.telefonica.de) (Ping timeout: 256 seconds)
[20:52:57] *** Quits: nahita (~nahita@37.155.96.117) (Ping timeout: 250 seconds)
[21:05:42] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 252 seconds)
[21:35:40] <Util> m: say 42;
[21:35:40] <evalable6> Util, rakudo-moar 74d7ff771: OUTPUT: ¬´42‚ê§¬ª
[21:36:39] <Util> m: my @n = 41, 42, 43, 44, 45; my $c; my $min = @n.min({ $c++; 1  }); say $c;
[21:36:39] <evalable6> Util, rakudo-moar 74d7ff771: OUTPUT: ¬´8‚ê§¬ª
[21:39:49] <Util> No! Bad evalable6! Don't let it be true! Rakudo could not possibly use a O(NlogN) algo for min, when O(N) is so easy!
[21:52:05] <[Coke]> Util: should be easy enough to check the algo used.
[21:52:55] *** Joins: MoC (~moc@user/moc)
[21:52:56] <ugexe> probably loops over the elements once, but runs the block multiple times
[21:54:36] <Util> https://github.com/rakudo/rakudo/blob/74d7ff771afb17eaec200e7804710af820ca6cf2/src/core.c/Any-iterable-methods.pm6#L1586
[21:56:35] <Util> Whew, it is 2N instead of NlogN. Still needs fixing via caching of the &by value of the current $min, but not nearly as bad as I thought.
[21:57:29] <Util> m: my @n = 1..1000; my $c; my $min = @n.min({ $c++; 1  }); say $c;
[21:57:30] <evalable6> Util, rakudo-moar 74d7ff771: OUTPUT: ¬´1998‚ê§¬ª
[21:57:38] <[Coke]> caching should probably be done via 'is cached'
[21:57:55] <ugexe> caching an intermeditary list, not the result of the method
[21:58:03] <ugexe> schwartzian transform essentially
[22:00:16] <Util> Coke: 'is cached' is overkill for this. Just keep an extra loop variable, replaced when $min changes.
[22:02:15] *** Joins: nahita (~nahita@46.104.138.74)
[22:02:51] <Util> ugexe: we don't even need an intermediate list, just a variable declared outside the loop, that is conditionally updaed inside the loop.
[22:05:08] <ugexe> m: my $c; my &foo := { $c++; $^a }; my @n = 45,41,42,43,44; my $min = @n.sort(&foo).head; say $c; say $min
[22:05:09] <evalable6> ugexe, rakudo-moar 74d7ff771: OUTPUT: ¬´5‚ê§41‚ê§¬ª
[22:05:27] <ugexe> sort with single arity will swartizian transform already
[22:08:43] <Util> ugexe: Yes, Raku has fantastic sorting, but min and max should not need to sort. They are done with just a linear scan, a single pass is sufficient.
[22:09:54] <ugexe> that example is also a linear scan with a single pass, no?
[22:09:57] <Util> ugexe: Oops, I think I mistook your point.
[22:11:36] <ugexe> although for a min/max it wouldnt be ideal memory wise i suppose
[22:14:05] <Util> ugexe: right; when sorting, if you don't want to ever re-evaluate the comparitor for a value, you must cache or use S.T. or some such trick.
[22:14:22] <Util> In a min or max, the cache only needs to be one value.
[22:14:33] <Util> (in size)
[22:15:01] *** Joins: ufobat (~martin@dynamic-095-117-055-226.95.117.pool.telefonica.de)
[22:15:53] <japhb> tbrowder: Someone had said that TOML wasn't very good for serializing data structures, but if that was just "not as good as other things, but still technically works", I'm fine with adding it.  HJSON I'm unfamiliar with.  Do we already have a module for that?
[22:18:00] <tbrowder> japhb: yes, there is a raku module, it‚Äôs loose json, allows comment, etc. converts to json easily.
[22:20:53] <japhb> tbrowder: OK, sure, I can add those.
[22:22:18] <japhb> Oh wow, there's 5 different TOML modules on raku.land!
[22:32:44] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:35:17] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:45:12] *** Quits: ufobat (~martin@dynamic-095-117-055-226.95.117.pool.telefonica.de) (Ping timeout: 265 seconds)
[22:47:13] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[22:50:52] <leont> TOML makes sense as a format written by humans, not as a format written by computers
[22:53:47] <leont> It's at a sweet spot between INI and YAML 
[22:59:42] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[23:04:19] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[23:13:03] *** Joins: camelia (~p6eval@camelia.detonation.org)
[23:36:44] <El_Che> leont: if by sweet you mean sour, yes :P
[23:37:23] <leont> Touch√©
[23:38:29] <tonyo> mine is toml 1.0.0 compliant, which can be a headache if you're trying to serialize an array of mixed types
[23:38:50] <tonyo> ['a', 1.0, false] is not a valid toml 1.0.0 array
[23:39:36] <tonyo> it's also the fastest if the toml is actually parsed
[23:51:46] *** Woodi_ is now known as Woodi
