[00:53:24] <CarloWood> { f([](int n){ cout << "In lambda"; }; } template<typename T> void f(T const& arg) { cout << "ok"; }
[00:53:25] <geordi> error: Unexpected `}` after `lambda"; }; `. Expected ')' or balanced code.
[00:53:45] <CarloWood> { f([](int n){ cout << "In lambda"; }); } template<typename T> void f(T const& arg) { cout << "ok"; }
[00:53:46] <geordi> ok
[00:53:51] <CarloWood> { f([](int n){ cout << "In lambda"; }); } template<typename T> void f(T const& arg) { cout << arg; }
[00:53:52] <geordi> true
[00:54:14] <CarloWood> { f([](int n){ cout << "In lambda"; }); } template<typename T> void f(T const& arg) { cout << TYPE(arg); }
[00:54:14] <geordi> lvalue const main(int, char**)::<lambda(int)>
[00:54:39] <CarloWood> { int n = 42; f([&](int n){ cout << "In lambda" << n; }); } template<typename T> void f(T const& arg) { cout << TYPE(arg); }
[00:54:40] <geordi> warning: declaration of 'n' shadows a previous local
[00:55:01] <CarloWood> { int m = 42; f([&](int n){ cout << "In lambda" << m; }); } template<typename T> void f(T const& arg) { cout << TYPE(arg); }
[00:55:01] <geordi> lvalue const main(int, char**)::<lambda(int)>
[00:55:15] <CarloWood> { int m = 42; f([&](int n){ cout << "In lambda" << m; }); } template<typename T> void f(T const& arg) { cout << arg; }
[00:55:15] <geordi> error: no match for 'operator<<' in 'cout << arg' (operand types are 'ostream' {aka 'ostream'} and 'const main(int, char**)::<lambda(int)>')
[01:47:44] <CarloWood> { B b; b.f(); } struct A { virtual ~A() =default; void f(); }; struct B : public A { ~B() override; };  void A::f() { if (0) cout << "Not derived from"; else cout << "derived from"; }
[01:47:45] <geordi> error: undefined reference to 'vtable for B'
[01:47:58] <CarloWood> { B b; b.f(); } struct A { virtual ~A() =default; void f(); }; struct B : public A { ~B() override {};  void A::f() { if (0) cout << "Not derived from"; else cout << "derived from"; }
[01:47:58] <geordi> error: Unexpected end of request. Expected '}' or balanced code.
[01:48:07] <CarloWood> { B b; b.f(); } struct A { virtual ~A() =default; void f(); }; struct B : public A { ~B() override {} void A::f() { if (0) cout << "Not derived from"; else cout << "derived from"; }
[01:48:08] <geordi> Same error.
[01:48:54] <CarloWood> { B b; b.f(); } struct A { virtual ~A() = default; void f(); }; struct B : public A { ~B() override {} }; void A::f() { if (0) cout << "Not derived from"; else cout << "derived from"; }
[01:48:55] <geordi> derived from
[01:52:10] <CarloWood> { B b; b.f(); } struct A { virtual ~A() = default; void f(); virtual void m() {} }; struct B : public A { ~B() override {} void m() override {} }; void A::f() { if (0) cout << "Not derived from"; else cout << "derived from"; }
[01:52:10] <geordi> derived from
[01:52:35] <CarloWood> { B b; b.f(); } struct A { virtual ~A() = default; void f(); virtual void m() {} }; struct B : public A { ~B() override {} void m() override {} }; void A::f() { if (&m != &A::m) cout << "Not derived from"; else cout << "derived from"; }
[01:52:35] <geordi> error: ISO C++ forbids taking the address of an unqualified or parenthesized non-static member function to form a pointer to member function.  Say '&A::m'
[01:52:57] <CarloWood> I did asshole :/
[01:53:22] <CarloWood> Grrmbl.. how to know if m() is override, from A?
[01:53:54] <CarloWood> { B b; b.f(); } struct A { virtual ~A() = default; void f(); virtual void m() {} }; struct B : public A { ~B() override {} void m() override {} }; void A::f() { if (&this->m != &A::m) cout << "Not derived from"; else cout << "derived from"; }
[01:53:54] <geordi> Same error.
[01:54:02] <CarloWood> { B b; b.f(); } struct A { virtual ~A() = default; void f(); virtual void m() {} }; struct B : public A { ~B() override {} void m() override {} }; void A::f() { if (&(this->m) != &A::m) cout << "Not derived from"; else cout << "derived from"; }
[01:54:03] <geordi> Still same error.
[01:54:58] <CarloWood> { B b; b.f(); } struct A { virtual ~A() = default; void f(); virtual void m() { cout << "A::m"; } }; struct B : public A { ~B() override {} void m() override { cout << "B::m"; } }; void A::f() { m(); }
[01:54:59] <geordi> B::m
[02:19:57] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[02:22:09] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[09:31:44] *** Joins: hnOsmium0001_gue (~hnosm@2600:380:445c:5b60:3637:1e5b:781a:ce5e)
[09:31:59] <hnOsmium0001_gue> {} struct Foo { constexpr int test = 0; }; // does not work
[09:31:59] <geordi> error: non-static data member 'test' declared 'constexpr'
[09:57:24] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[12:25:01] *** Quits: hnOsmium0001_gue (~hnosm@2600:380:445c:5b60:3637:1e5b:781a:ce5e) (Quit: Konversation terminated!)
[15:55:08] *** Cyp_ is now known as Cyp
[18:00:48] <CarloWood> { tracked::B b; }
[18:00:48] <geordi> B0* B0~
[18:02:52] <CarloWood> { A a; if (a) cout << '!'; } bool volatile False; struct A { tracked::B b; operator bool() const { return !False; } };
[18:02:53] <geordi> B0* ! B0~
[18:03:05] <CarloWood> { if (A()) cout << '!'; } bool volatile False; struct A { tracked::B b; operator bool() const { return !False; } };
[18:03:06] <geordi> B0* B0~ !
[19:25:33] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:48:56] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 272 seconds)
[23:50:32] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
