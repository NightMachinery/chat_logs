[00:00:39] *** Joins: inak (~justme@228-134-237-24.gci.net)
[00:01:28] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[00:01:48] *** Quits: idakan (~justme@209-112-220-139-radius.dynamic.acsalaska.net) (Ping timeout: 240 seconds)
[00:04:06] *** Quits: eroux (~eroux@102-65-72-61.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:21:02] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Quit: Leaving)
[00:21:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[00:37:51] *** Joins: Pickchea (~private@user/pickchea)
[00:43:16] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[00:50:53] *** Quits: inak (~justme@228-134-237-24.gci.net) (Quit: Leaving)
[00:51:11] *** Joins: inak (~justme@228-134-237-24.gci.net)
[00:53:27] *** Joins: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636)
[00:58:58] *** Joins: eroux (~eroux@102-65-72-61.ftth.web.africa)
[01:13:12] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:22:08] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:22:20] *** Joins: Pickchea (~private@user/pickchea)
[01:31:10] *** Quits: Minvera (~Minvera@user/Minvera) (Remote host closed the connection)
[01:45:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[01:48:40] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:48:50] *** Joins: Pickchea (~private@user/pickchea)
[01:50:42] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[01:51:34] *** Joins: xa0s (~xa0s@mab.sdf.org)
[01:58:10] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:07:08] *** Joins: Pickchea (~private@user/pickchea)
[02:25:52] *** Joins: jlrnick (~josephler@2a01cb040a159400997cd14fa0ae8ad9.ipv6.abo.wanadoo.fr)
[02:29:54] *** Joins: vysn (~vysn@user/vysn)
[02:46:19] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 256 seconds)
[02:48:20] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[02:58:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[03:09:31] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[03:27:16] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[03:28:41] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[03:40:21] *** Quits: ngz (~ngz@user/ngz) (Ping timeout: 250 seconds)
[03:43:01] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[03:51:17] *** Quits: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636) (Ping timeout: 240 seconds)
[03:56:15] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[04:02:48] *** Quits: jtgd (~jtgd@user/jtgd) (Quit: WeeChat 3.4.1)
[04:02:59] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:07:06] *** Quits: inak (~justme@228-134-237-24.gci.net) (Quit: Leaving)
[04:08:59] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[04:11:41] *** Joins: jtgd (~jtgd@user/jtgd)
[04:15:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[04:19:46] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:37:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[04:55:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[05:08:10] *** Joins: ur5us (~ur5us@2406:e002:6888:2f01:d8fb:5ff2:7baf:1c2c)
[05:18:03] *** Quits: jlrnick (~josephler@2a01cb040a159400997cd14fa0ae8ad9.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[05:30:57] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[05:31:19] *** Joins: zacque (~zacque@1.32.90.32)
[05:31:30] *** Quits: anotheryou (uid257186@user/anotheryou) (Quit: Connection closed for inactivity)
[05:34:17] *** Joins: epony (epony@user/epony)
[05:42:43] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[05:56:49] *** Joins: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com)
[06:12:39] *** Joins: J4D (~J4D@ip68-229-240-82.ok.ok.cox.net)
[06:33:49] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[07:04:12] *** Quits: J4D (~J4D@ip68-229-240-82.ok.ok.cox.net) (Remote host closed the connection)
[07:22:25] *** Joins: pwolf (~pwolf@user/pwolf)
[07:39:10] <smlckz> chrisb: hmm?
[07:41:33] *** Quits: s-abhina` (~user@148.59.228.80) (Remote host closed the connection)
[08:12:54] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[08:15:40] *** Quits: kickingvegas (~cchoi@c-73-170-198-193.hsd1.ca.comcast.net) (Quit: leaving)
[08:17:24] *** Joins: kickingvegas (~cchoi@c-73-170-198-193.hsd1.ca.comcast.net)
[08:34:16] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:55:07] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[09:07:23] *** Quits: ur5us (~ur5us@2406:e002:6888:2f01:d8fb:5ff2:7baf:1c2c) (Ping timeout: 252 seconds)
[09:26:13] *** Joins: mbuf (~Shakthi@223.178.127.254)
[09:39:54] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:41:17] *** Joins: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f)
[10:08:45] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[10:10:05] *** Quits: benin (~benin@183.82.207.30) (Quit: The Lounge - https://thelounge.chat)
[10:13:14] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[10:13:46] *** Joins: benin (~benin@183.82.207.30)
[10:38:41] *** Joins: vysn (~vysn@user/vysn)
[11:00:35] *** Joins: ManiacOfMadness` (~ManiacOfM@2a02:587:3210:9700:1dcc:9644:989c:7582)
[11:03:44] *** Joins: Pickchea (~private@user/pickchea)
[11:06:38] *** Joins: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636)
[11:15:55] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[11:20:58] *** Quits: madix (~madix@april/staff/madix) (Read error: Connection reset by peer)
[11:22:59] *** Joins: madix (~madix@april/staff/madix)
[11:23:32] *** Quits: madix (~madix@april/staff/madix) (Read error: Connection reset by peer)
[11:24:04] *** Joins: madix (~madix@april/staff/madix)
[11:28:07] *** Quits: madix (~madix@april/staff/madix) (Read error: Connection reset by peer)
[11:31:51] *** Joins: madix (~madix@april/staff/madix)
[11:43:27] *** Joins: _thelion_ (~user@178.165.186.114.wireless.dyn.drei.com)
[11:47:33] *** Quits: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[11:49:20] *** Quits: kickingvegas (~cchoi@c-73-170-198-193.hsd1.ca.comcast.net) (Quit: leaving)
[11:52:19] *** Quits: _thelion_ (~user@178.165.186.114.wireless.dyn.drei.com) (Remote host closed the connection)
[11:57:04] *** Quits: egli (~user@nehebkau01.sbs.ch) (Remote host closed the connection)
[11:57:44] *** Joins: egli (~user@nehebkau01.sbs.ch)
[12:02:04] *** Joins: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[12:02:47] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:14:07] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[12:17:51] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[12:22:23] *** Quits: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:12:10] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Read error: Connection reset by peer)
[13:12:18] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[13:20:36] *** Quits: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636) (Ping timeout: 240 seconds)
[13:22:28] *** Joins: anotheryou (uid257186@user/anotheryou)
[13:47:48] *** Quits: skapate (~Skapata@user/skapata) (Read error: Connection reset by peer)
[14:02:59] *** Quits: egli (~user@nehebkau01.sbs.ch) (Remote host closed the connection)
[14:09:21] *** Quits: bhavin192 (~bhavin192@fedora/bhavin192) (Quit: ZNC 1.8.2 - https://znc.in)
[14:10:21] *** Joins: bhavin192 (~bhavin192@fedora/bhavin192)
[14:11:39] *** Quits: garjola (~garjola@user/garjola) (Ping timeout: 256 seconds)
[14:11:39] *** Joins: garjola_ (~garjola@171.117.141.77.rev.sfr.net)
[14:29:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:49:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:05:11] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:17:56] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:22:30] *** Quits: garjola_ (~garjola@171.117.141.77.rev.sfr.net) (Ping timeout: 252 seconds)
[15:24:06] *** Joins: garjola (~garjola@user/garjola)
[15:33:24] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:53:17] *** Quits: garjola (~garjola@user/garjola) (Ping timeout: 252 seconds)
[15:53:43] *** Joins: garjola (~garjola@user/garjola)
[16:00:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:03:21] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.4.1)
[16:27:38] *** Joins: Pickchea (~private@user/pickchea)
[16:43:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[16:45:50] *** Joins: vysn (~vysn@user/vysn)
[17:09:29] *** Joins: garjola_ (~garjola@171.117.141.77.rev.sfr.net)
[17:09:58] *** Quits: garjola (~garjola@user/garjola) (Ping timeout: 272 seconds)
[17:22:54] *** Joins: garjola (~garjola@user/garjola)
[17:23:48] *** Quits: garjola_ (~garjola@171.117.141.77.rev.sfr.net) (Ping timeout: 240 seconds)
[17:32:01] *** Quits: cliluw (~cliluw@47.147.77.43) (Ping timeout: 256 seconds)
[17:44:03] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[17:45:59] *** Joins: vysn (~vysn@user/vysn)
[17:49:43] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[18:15:21] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Ping timeout: 245 seconds)
[18:16:46] *** Joins: inak (~justme@228-134-237-24.gci.net)
[18:17:24] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[18:52:29] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 256 seconds)
[18:54:17] *** Joins: vysn (~vysn@user/vysn)
[18:55:06] *** Quits: benin (~benin@183.82.207.30) (Quit: Ping timeout (120 seconds))
[19:00:08] *** Joins: benin (~benin@183.82.207.30)
[19:04:45] *** Quits: anotheryou (uid257186@user/anotheryou) (Quit: Connection closed for inactivity)
[19:05:44] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[19:10:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[19:13:52] *** Joins: J4D (~J4D@ip68-229-240-82.ok.ok.cox.net)
[19:17:51] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[19:17:58] *** Quits: J4D (~J4D@ip68-229-240-82.ok.ok.cox.net) (Client Quit)
[19:26:24] *** Quits: benin (~benin@183.82.207.30) (Quit: Ping timeout (120 seconds))
[19:31:18] *** Joins: benin (~benin@183.82.207.30)
[19:37:52] *** Joins: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04)
[19:38:27] *** Quits: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04) (Client Quit)
[19:44:03] *** Quits: benin (~benin@183.82.207.30) (Quit: Ping timeout (120 seconds))
[19:44:22] *** Joins: benin (~benin@183.82.207.30)
[20:04:44] <smlckz> is there a option to export org-mode to troff (e.g. ms, mm)?
[20:04:58] <Demosthenex> i thought there was, but maybe it was an addon?
[20:11:55] *** Joins: Pickchea (~private@user/pickchea)
[20:14:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:25:17] *** Joins: egli (~user@nehebkau01.sbs.ch)
[20:28:41] <gnomon> smlckz, there is an ox-groff exporter: https://orgmode.org/worg/exporters/ox-groff.html
[20:30:46] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 245 seconds)
[20:57:54] *** Joins: kickingvegas (~cchoi@c-73-170-198-193.hsd1.ca.comcast.net)
[20:59:05] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[21:09:36] *** Joins: acdw (~case@user/acdw)
[21:10:13] <acdw> Hi there!  Do yall have any idea if I can truncate lines /only/ inside property drawers in org? I have some properties that are quite long and wrap visually, which is distracting.
[21:12:36] *** Joins: Minvera (~Minvera@user/Minvera)
[21:15:02] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[21:15:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:18:30] *** Joins: benin0 (~benin@183.82.207.30)
[21:20:03] *** Quits: benin (~benin@183.82.207.30) (Ping timeout: 256 seconds)
[21:20:03] *** benin0 is now known as benin
[21:28:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:29:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:30:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[21:30:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:33:25] *** Joins: seschwar (~seschwar@user/seschwar)
[21:39:17] *** Quits: mbuf (~Shakthi@223.178.127.254) (Quit: Leaving)
[21:46:00] <Demosthenex> ooo, i just found to use which-function-mode to show a "path" or "breadcrumb" to where i'm at in my org file.
[22:04:31] *** Joins: Pickchea (~private@user/pickchea)
[22:17:30] *** Joins: garjola_ (~garjola@171.117.141.77.rev.sfr.net)
[22:19:02] *** Quits: garjola (~garjola@user/garjola) (Ping timeout: 272 seconds)
[22:21:19] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:1110:204a:e437:3022)
[22:21:19] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:1110:204a:e437:3022) (Changing host)
[22:21:19] *** Joins: skapata (~Skapata@user/skapata)
[22:23:19] <acdw> oh yeah it's good stuff
[22:35:39] *** Joins: garjola (~garjola@user/garjola)
[22:35:59] *** Quits: garjola_ (~garjola@171.117.141.77.rev.sfr.net) (Ping timeout: 256 seconds)
[22:39:28] *** Joins: garjola_ (~garjola@171.117.141.77.rev.sfr.net)
[22:39:50] *** Joins: zebrag (~chris@user/zebrag)
[22:40:41] *** Quits: garjola (~garjola@user/garjola) (Ping timeout: 250 seconds)
[22:41:38] *** Joins: tyson2 (~user@bras-base-toroon0949w-grc-02-142-114-235-113.dsl.bell.ca)
[22:52:46] *** Joins: TheSuperGeek (~TheSuperG@alille-456-1-2-13.w90-18.abo.wanadoo.fr)
[22:55:49] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[22:56:32] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[22:57:23] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[22:58:52] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[23:01:29] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[23:02:03] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[23:08:44] <Codaraxis__> Is there a built-in way or good package to set up a function call/s-expression evaluation to execute when a task is closed?
[23:09:06] *** Joins: sandb0y (~pirate@user/sandb0y)
[23:10:09] <Demosthenex> Codaraxis__: i'm sure there's a hook somewhere.
[23:11:36] <acdw> i asked this a few days ago but forgot to stick around: Is there a way to get DEADLINE, SCHEDULED, and CLOSED in a drawer? PROPERTIES or LOGBOOK perhaps?
[23:12:57] <Demosthenex> i'm not sure they go inside the drawer, maybe they should. those keywords pre-date the drawer implementation
[23:13:06] <Demosthenex> and drawers were seen as a place for user data, no org data
[23:13:06] <Codaraxis__> Demosthenex, So, probably roll my own?
[23:13:07] <Codaraxis__> I'd write my own function that runs on org-after-todo-state-change-hook , check if the state-change is to a state classified as "closed", and based on that, checks for a specific property I'd decide on and executes the s-expression therein?
[23:13:24] <Demosthenex> Codaraxis__: sounds right
[23:13:40] <Demosthenex> but i'd suggest you make a function of your own to encapsulate all the s-exp code, and then add that to the hook
[23:14:14] <Codaraxis__> I'm surprised this isn't a more common/typical desire
[23:15:46] <Codaraxis__> And the hook seems to be generic for any todo state change. Wouldn't it be better to make the functoin that checks for what to execute generic? Check if property X exists; then, grab its contents and execute?
[23:16:11] <Demosthenex> Codaraxis__: that's emacs. the hook IS the common customization method
[23:16:35] <Codaraxis__> Granted, that'd also be a major arbitrary execution exploit that I'd be introducing
[23:16:36] <Demosthenex> your hook should evaluate if the criteria are correct to execute
[23:17:07] <Demosthenex> plenty of things are a hook, and the first line is (when (mode is org) (X is true) (etc) then do.... )
[23:17:12] <Demosthenex> otherwise do no operation
[23:17:15] <Codaraxis__> Hm. That just seems so much more limited. Every time I create a new task with a new consequence, I'd have go into the hook and somehow register that
[23:17:27] <Demosthenex> no. make another hook
[23:17:34] <Demosthenex> both will run, only one should have valid criteria
[23:17:50] <Codaraxis__> Wouldn't you end up with an insane number of hooks attached at that point?
[23:18:13] <Demosthenex> if you end up with many hooks, at that point i'd suggest to aggregate them into one hook with conditional dispatch
[23:18:18] <Codaraxis__> Not only that, but wouldn't you end up with very little visibility of the desired behaviour in the Org mode source file, too?
[23:18:18] <Demosthenex> its about qty
[23:18:37] <Demosthenex> now THAT is a concern. how do i know what hooks will execute against my org code
[23:18:42] <Demosthenex> the answer is you dont
[23:18:53] <Demosthenex> the hooks are configured once at initialization time
[23:19:03] <Demosthenex> you're writing custom code on top of org
[23:19:08] <Demosthenex> it's just org has the hooks to let you
[23:19:11] <Demosthenex> for good or bad
[23:19:17] <Demosthenex> this is very common in emacas
[23:19:24] <acdw> Codaraxis__ re: code exploit: You're righting the hook, so like, it's your code
[23:19:34] <Codaraxis__> Other than introducing an arbitrary execution vulnerability, what is the downside to having the hook just search for a VALUE (e.g. EXECUTE_ON_CLOSE), grab its contents, and executing it?
[23:20:00] <Demosthenex> none? ideally it's only looking at one task at a time
[23:20:06] <Demosthenex> and you're introducing a vuln, not org ;]
[23:20:19] <Demosthenex> org's source blocks have execution guards for instance for this very reason
[23:20:21] <Codaraxis__> Yeah. I'd be 100% responsible for that vulnerability,
[23:21:44] <Codaraxis__> I'd like want to code my own whitelist at that point. Probably have a function that I'd personally invoke to add the SEXP, which also writes to a whitelist. If what's being executed isn't in the white list, don't execute it.
[23:22:47] <Demosthenex> or, instead of executing arbitrary stuff, call a fixed function
[23:22:55] <acdw> yeah, what do you want to do?
[23:23:10] <acdw> and are you donwloading random org files from the internet and then like, executing them?
[23:23:11] <Codaraxis__> The main reason I like this solution over creating hooks elsewhere is that it allows me to see, within my Org mode source file, exactly what was to be executed. It would also simplify the mechanism. Instead of writing and registering the hook separately, I have the hook code in the dotfile and the task-specific code in the tasks themselves
[23:23:41] <Demosthenex> * User Table \n ** EMPLOYED Bob \n ; C-c t bob goes EMPLOYED to TERMINATED, execute "sudo rmuser Bob"
[23:24:04] <Codaraxis__> acdw, What I'm doing differs with the task. Sometimes, I want an email to be automatically sent when a task is marked as done. Other times, I want to send a signal to a separate application. Etc.
[23:24:20] <Demosthenex> determining context will be a pita there.
[23:24:31] <acdw> yeah you could totally do that, you don't ahve to worry about aribtrary code executation unless you're downloading shit
[23:24:52] <Codaraxis__> I guess I could just have a .el file that lives alongside the Org mode file. Swap to it; add to it; rerun it to regenerate the hooks in memory.
[23:25:26] <Demosthenex> Codaraxis__: you know about file local variables?
[23:25:29] <Codaraxis__> acdw, I could conceivably want to download someone else's Org content. Or collaborate with someone on editing an Org mode file, leading to megers
[23:25:55] *** Joins: aleck1 (~aleck@user/aleck)
[23:26:24] <Codaraxis__> Demosthenex, Yes-ish. I know they exist and I use a couple. I also know some have security prompts.
[23:26:48] <acdw> i mean i'd say cross that bridge when you come to it
[23:27:43] <Codaraxis__> acdw, seems like a dangerous way to treat security, hehe
[23:28:12] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 240 seconds)
[23:29:44] <Demosthenex> its your documents though
[23:30:04] <Codaraxis__> They're my documents but that doesn't guarantee I wrote everything in them
[23:30:37] <Demosthenex> backups. version control.
[23:30:46] <Demosthenex> prayer beads, candles, and pentagrams.
[23:30:56] <Codaraxis__> I do like candles and pentagrams.
[23:32:41] <Demosthenex> you're asking me, can a document authoring mode with a simple markup language solve issues that have plagued computer security since forever.
[23:34:15] *** Quits: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Ping timeout: 240 seconds)
[23:47:07] *** Joins: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[23:49:36] <Codaraxis__> Nah. I was more asking if there was a property that was automatically executed on task close, or a package that added that functionality, ideally by someone who has considered it.
[23:49:38] <Codaraxis__> I also know that rolling my own solution means I'm the one who has to consider it, hence the perpetual hope that someon eelse has put in the elbow grease
[23:51:29] <Demosthenex> welcome to emacs.
[23:52:00] <Demosthenex> it's likely that there are internal org hooks running when a task changes state (ie: logbook, etc)
[23:52:06] <Demosthenex> but they don't expose that
[23:52:11] <Demosthenex> you add code to teh hook, you support it
[23:52:22] <aidalgol> I'm wanting to use org-mode to keep topic-specific journals (as opposed to a general, personal journal).  Anyone here have any workflows for this?
[23:52:39] <aidalgol> Not task breakdowns, but like log entries.
[23:54:17] <Demosthenex> aidalgol: write. organize later. ;]
[23:54:35] <Demosthenex> i manage every project i do in org, i have developed habits over time on how to structure
[23:54:40] <aidalgol> Demosthenex: That's pretty much I do now. :P
[23:54:46] <Demosthenex> always start with an outline, and break down tasks into the tree
[23:54:49] <Demosthenex> then, write.
[23:55:17] <aidalgol> That's what I do for when I'm writing a breakdown, but I pretty much just want timestamped log entries for this.
[23:55:51] <aidalgol> But the log entries are org sections with paragraphs or bullet lists, instead of single lines like program logs.
[23:56:01] <konubinix> Codaraxis__: I only read your last messages "I was more asking if there was a property that was automatically executed on task close". To me, it sounds a lot like the purpose of edba
[23:56:05] <konubinix> edna
[23:56:39] <konubinix> https://elpa.gnu.org/packages/org-edna.html
[23:56:43] <Demosthenex> aidalgol: so you won't ever get much in single lines, but remember orgg is awesome.
[23:57:12] <aidalgol> I've used org extensively at university, so I am familiar with much of what can be done with org.
[23:57:16] <Demosthenex> aidalgol: i recommend you write paragraphs, and you timestamp your work. i do this compulsively. i had a single button to insert an inactive timestamp, and every time i swap tasks i hit that to insert one, and start typing.
[23:57:17] <aidalgol> But this is a new use for me.
[23:57:26] <Demosthenex> then you explore your timestamps with agenda
[23:58:10] <Demosthenex> org now has C-u C-u !  which instantly inserts an inactive timestamp for now
[23:58:19] <Demosthenex> you can always wrap that 
[23:58:32] <Demosthenex> er
[23:58:37] <Demosthenex> C-u C-u C-c !
[23:58:41] <aidalgol> Can you insert timestamps anywhere and org will sensibly pick them up, or do they have to go in headings?
[23:58:44] <Demosthenex> mine is f9
[23:58:50] <Demosthenex> ANYWHERE
