[00:00:14] <theseb> nice thanks
[00:01:24] *** Quits: MCx (~MCx@user/mcx) (Quit: Client closed)
[00:01:43] <KirkMcDonald> Namely because each domain on the host will have its own cert.
[00:01:56] <KirkMcDonald> So it needs to send the domain in the clear to know which cert to use.
[00:01:59] *** Joins: Samian (~s@user/samian)
[00:02:29] *** Quits: Samian (~s@user/samian) (K-Lined)
[00:03:25] *** Joins: y1n-v1 (~y1n@77.119.195.23.wireless.dyn.drei.com)
[00:03:27] *** Quits: schumaml (~schumaml@dslb-092-074-000-199.092.074.pools.vodafone-ip.de) (Quit: WeeChat 3.3)
[00:03:30] <KirkMcDonald> Looks like there's a draft RFC to address this.
[00:03:42] *** Joins: schumaml (~schumaml@dslb-092-074-000-199.092.074.pools.vodafone-ip.de)
[00:04:47] *** Joins: wedof (~wedof@2a02:810c:80:1eb0:aaa1:59ff:fe1e:4d38)
[00:06:53] <sartan> an alternative to SAN?
[00:07:04] <sartan> SubjectAlternativeName
[00:07:08] <sartan> I'm curious what that rfc is
[00:08:01] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[00:08:04] <KirkMcDonald> https://datatracker.ietf.org/doc/draft-ietf-tls-esni/?include_text=1
[00:08:31] <The-Compiler> also see https://blog.cloudflare.com/encrypted-client-hello/
[00:09:13] <sartan> the cloudflare article is great, thanks for that
[00:10:03] <sartan> requires dns over https?
[00:11:44] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[00:12:23] *** Joins: whatsupdoc (~whatsupdo@148.64.20.99)
[00:12:32] <The-Compiler> well, not much point in having an encrypted SNI if you leak the same information via unencrypted DNS
[00:13:31] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[00:13:39] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[00:14:04] *** Quits: trace987 (~trace@dynamic-002-247-250-222.2.247.pool.telefonica.de) (Ping timeout: 252 seconds)
[00:14:52] <sartan> i wonder how or if this can be handled in transparent non-ssl-decrypting load balancers.
[00:15:08] <sartan> or reverse proxies, forward proxies, etc
[00:15:19] <sartan> they would need to control dns as well as https, very scary
[00:15:29] <sartan> speaking from an enterprise management perspective
[00:15:47] *** Joins: fikran (~fikran@user/fikran)
[00:15:52] <sartan> OK, maybe too off-topic, thanks for the links. =)
[00:16:12] *** Joins: Auron (~Auron956@user/auron)
[00:16:49] *** Quits: kcrk (~kcrk@user/kcrk) (Ping timeout: 252 seconds)
[00:17:04] <sartan> SNI works to peg the request off to the relevant server if you're not decrypting it. without SNI, it seems that data will need to be decrypted and re-encrypted again. works nice for end to end security, but makes it harder for infrastructure-focused folks who have to support such things
[00:18:13] *** Joins: trace987 (~trace@dynamic-002-247-250-222.2.247.pool.telefonica.de)
[00:18:25] *** Quits: Leliana (is@2a02:2658:1133:0:dead:babe:0:1) (Quit: brb, sex)
[00:18:41] *** Quits: howdoi (uid224@id-224.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[00:19:04] *** Quits: Auron956 (~Auron956@user/auron) (Ping timeout: 245 seconds)
[00:19:33] *** Joins: Leliana (is@2a02:2658:1133:0:dead:babe:0:1)
[00:20:51] *** Joins: ska (~ska@user/ska)
[00:20:58] *** Joins: kcrk (~kcrk@user/kcrk)
[00:21:08] <ska> Anyone able to get pytest + moto + s3fs to play together?
[00:23:11] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[00:23:16] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:23:57] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[00:24:34] *** Quits: jay-m126 (~jay-m@154.72.160.228) (Ping timeout: 265 seconds)
[00:24:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:25:09] *** Joins: doforlove33 (~doforlove@user/doforlove33)
[00:25:49] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[00:25:59] *** Joins: jay-m126 (~jay-m@154.72.160.228)
[00:27:11] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[00:28:51] *** Quits: kcrk (~kcrk@user/kcrk) (Ping timeout: 245 seconds)
[00:28:55] *** Quits: Jefren (~Jefren@70.35.67.12) (Ping timeout: 265 seconds)
[00:29:10] *** Quits: Leliana (is@2a02:2658:1133:0:dead:babe:0:1) (Quit: brb, sex)
[00:29:28] *** Joins: Leliana (is@2a02:2658:1133:0:dead:babe:0:1)
[00:30:56] *** Joins: Jefren (~Jefren@70.35.67.29)
[00:33:12] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:34:07] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[00:35:09] *** Joins: xensie (~xensie@88-115-238-181.elisa-laajakaista.fi)
[00:35:16] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[00:36:20] *** Quits: petaflot (~root@lutolf.vserver.nimag.net) (Ping timeout: 260 seconds)
[00:36:35] *** Joins: petaflot (~root@lutolf.vserver.nimag.net)
[00:37:11] *** Quits: Jefren (~Jefren@70.35.67.29) (Ping timeout: 245 seconds)
[00:39:17] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[00:39:21] *** Joins: Jefren (~Jefren@70.35.66.70)
[00:39:29] *** Joins: Lob3rFsociety (~Hubert@90.255.55.115)
[00:39:49] *** Quits: vd898 (~vd898@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[00:40:28] *** Joins: vd898 (~vd898@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[00:40:37] *** Quits: wedof (~wedof@2a02:810c:80:1eb0:aaa1:59ff:fe1e:4d38) (Remote host closed the connection)
[00:41:00] *** Quits: jjhoo (~jahakala@user/jjhoo) (Ping timeout: 260 seconds)
[00:43:55] <sveinse> I notice that futurize from the future package converts "for k, v in b.items():" into "for k, v in list(b.items()):". To me the list() is not needed here, or is this a something that is needed under py2.7?
[00:44:34] <yitz> It's an auto-add by py2-to-3 tooling most likely
[00:44:48] <sveinse> yitz: yes it is, wondering why thou
[00:44:52] *** Quits: mei (~mei@user/mei) (Ping timeout: 265 seconds)
[00:44:53] <yitz> py2 dict.items() is a list. py3 dict.items() is an iterator. Wrapping it in list() gives the same behavior
[00:45:07] <yitz> It lets you blindly "migrate" code
[00:45:28] *** Joins: kcrk (~kcrk@user/kcrk)
[00:45:46] <sveinse> But in this context being iterators for the for loop, either list or iterator would work, so the conversion to list isn't really needed, right?
[00:45:53] <yitz> Correct
[00:45:56] <KirkMcDonald> I would guess it converts `for k, v in d.iteritems():` to `for k, v in d.items():`, too.
[00:45:57] <phy1729> should only be necessary if you're modifying the dictionary in the loop
[00:46:10] <yitz> Tooling is simpler when you can ignore context
[00:46:43] <sveinse> phy1729: ah, so its a safeguard in case the dict is edited during the for loop
[00:46:48] *** Quits: Jefren (~Jefren@70.35.66.70) (Ping timeout: 265 seconds)
[00:46:50] <KirkMcDonald> Yeah, the assumption is probably that if it's using `d.items()`, then it wants that list, which is a copy of the dict, which would permit mutating the dict.
[00:47:13] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[00:47:30] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[00:47:54] *** doforlove33 is now known as Wladimir
[00:47:56] <sveinse> because in py2 items() is a static list, while in py3, the iterator is fetching next objects on the fly
[00:48:32] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:48:45] *** Joins: Jefren (~Jefren@206.253.157.218)
[00:49:06] *** Quits: Akuli (~Akuli@82-203-164-198.bb.dnainternet.fi) (Quit: Leaving)
[00:49:16] *** Quits: jay-m126 (~jay-m@154.72.160.228) (Ping timeout: 245 seconds)
[00:49:27] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:49:27] *** Quits: inomoz (~inomoz@176.59.100.163) (Read error: Connection reset by peer)
[00:49:40] <KirkMcDonald> There is also the detail that Python 3's `d.items()` returns a view object, not an iterator, but this may be getting into the weeds.
[00:49:54] *** Joins: BlessJah (~BlessJah@user/blessjah)
[00:49:54] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[00:50:40] <sveinse> but you can iterate over it, so its iterable, which is the important thing here
[00:50:44] <sveinse> thanks
[00:50:47] <phy1729> I thought a view object was a subclass of iterator?
[00:51:04] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[00:51:24] <KirkMcDonald> Nope.
[00:51:26] *** Joins: jay-m126 (~jay-m@129.0.205.221)
[00:51:42] <KirkMcDonald> iter(d.items()) is a distinct object from d.items().
[00:51:53] <yitz> type({}.items()).mro()
[00:52:04] <yitz> [<class 'dict_items'>, <class 'object'>]
[00:52:09] <aphysically> the new soft keywords have me interested in the nuances of syntax highlighting in editors all of the sudden
[00:52:10] <KirkMcDonald> (Also there's no thing called `iterator` to be a subclass of.)
[00:52:12] *** Lord_of_Life_ is now known as Lord_of_Life
[00:52:31] <phy1729> There's typing.Iterator
[00:52:45] <aphysically> as far as I can tell there's no good solution for this in vim; the neovim folks are pulling in tree-sitter and bram has said he'd consider it in the future
[00:52:46] <sveinse> being iterable is a thing
[00:53:14] <KirkMcDonald> In any case, d.items() has no __next__ method.
[00:53:49] <aphysically> the solution in IDLE is probably adaptable to vim though https://github.com/python/cpython/pull/25851
[00:53:50] <phy1729> The model in my head of how for works is now broken. How does that work?
[00:54:10] <KirkMcDonald> phy1729: Same way iterating over anything works. It calls iter() on it and gets an iterator.
[00:54:19] <phy1729> ah ok
[00:54:37] <KirkMcDonald> phy1729: It's just that d.items() is not, itself, an iterator.
[00:54:44] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[00:54:52] <KirkMcDonald> Unlike Python 2's d.iteritems()
[00:54:53] *** Joins: inomoz (~inomoz@176.59.124.136)
[00:54:54] <aphysically> view objects have some things in common with sets (but aren't sets)
[00:55:33] <aphysically> they support & operator I think?
[00:55:48] <KirkMcDonald> They support all the set operators, yeah.
[00:55:49] *** Quits: grooverman (~grooverma@177.189.91.225) (Read error: Connection reset by peer)
[00:55:54] <KirkMcDonald> But only if the values are hashable.
[00:56:11] <b_jonas> indeed, and you can even get multiple iterators with independent cursors from the same dict value view object, by calling iter twice
[00:56:14] <b_jonas> I just tested
[00:56:48] <sveinse> Proof of that .items() is not an iterator is that you can consume it multiple times
[00:57:03] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8cd8:414d:2b05:7912) (Ping timeout: 256 seconds)
[00:57:07] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[00:57:07] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[00:57:32] <KirkMcDonald> Really it's just `x = d.items(); x is not iter(x)`
[00:57:35] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:58:36] *** Quits: Wladimir (~doforlove@user/doforlove33) (Quit: Leaving)
[00:58:53] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 265 seconds)
[01:00:06] *** Quits: Jefren (~Jefren@206.253.157.218) (Ping timeout: 245 seconds)
[01:00:28] <sveinse> That iterators can only be consumed once has given me a few headaches when I by accident have already consumed and simply get zero iterations the next time its used
[01:00:50] <sveinse> but no error
[01:01:20] <sartan> you get used to it
[01:01:27] <sartan> memory efficiency <3
[01:01:31] <sveinse> jep :D
[01:02:09] *** Joins: Fiji (~Fiji@user/fiji)
[01:02:25] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[01:02:38] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[01:02:39] <sveinse> I wouldn't be surprise if they have debated if iterating a second time should raise an exception or not
[01:03:15] *** Joins: jafarlihi (~hjafarli@h162081.upc-h.chello.nl)
[01:03:38] *** Joins: Jefren (~Jefren@70.35.66.208)
[01:05:16] *** Quits: trace987 (~trace@dynamic-002-247-250-222.2.247.pool.telefonica.de) (Remote host closed the connection)
[01:05:20] *** Quits: Guest3 (~textual@user/hcbt) (Quit: Textual IRC Client: www.textualapp.com)
[01:06:20] *** Quits: Lob3rFsociety (~Hubert@90.255.55.115) (Killed (silver.libera.chat (Nickname regained by services)))
[01:06:35] <sartan> No that wouldn't make sense
[01:08:11] *** Quits: jay-m126 (~jay-m@129.0.205.221) (Quit: Lost terminal)
[01:08:24] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[01:11:27] *** Quits: Jefren (~Jefren@70.35.66.208) (Ping timeout: 265 seconds)
[01:11:44] *** Joins: Nspace (~Nspace@user/nspace)
[01:12:23] <sveinse> oh? When "for a in b" calls iter(b), that function could raise an exception if b has been consumed. A consumed iterator is a one way street, so once its consumed it has no value and can only be discarded, right?
[01:12:55] <KirkMcDonald> It would make more sense to do this in the iterator's __next__
[01:13:02] *** Joins: Jefren (~Jefren@70.35.66.226)
[01:13:03] *** Quits: Nspace (~Nspace@user/nspace) (Client Quit)
[01:13:14] *** Joins: nomic (~nomic@185.192.69.208)
[01:13:16] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[01:13:25] <sartan> i wouldn't expect iterating on an generator yielding no results to raise StopIteration
[01:13:34] <sartan> unless you explicitly iter() it
[01:13:42] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[01:13:43] <sartan> er next(iter(foo))
[01:13:45] <KirkMcDonald> The proposed rule would be to raise StopIteration the *first* time it's called with no remaining elements, and then to raise some other thing after.
[01:14:00] <sveinse> yes
[01:14:42] <sartan> for foo in data_set_that_can_be_empty vs for foo in data_set_that_must_be_empty are different use cases, and the language shouldn't decide that one should raise an exception on behalf of the other
[01:15:05] <sartan> this is where you use variables like found=True, breaks in loops with else statements, etc. just wrap defensiveness on the code
[01:15:10] <sveinse> either would and should work for first time invocation
[01:15:31] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 245 seconds)
[01:15:39] *** Quits: mat001 (~mat001@213.143.69.121) (Remote host closed the connection)
[01:15:45] <KirkMcDonald> I reckon this change would play havoc with a number of itertools use-cases.
[01:15:46] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[01:15:48] <sartan> not at all. for empty_foo in data_dict.get('some_key', []) - i really wouldn't want a StopIteration thrown at me here, it's valid for that list to be empty, and valid for it to be non-empty.
[01:16:18] <sartan> If python forced me into stopIteration with an empty iterator how do i detect it's non-empty without explicitly looking into it beforehand? that seems like such an antipattern
[01:16:46] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 265 seconds)
[01:17:40] <sveinse> I don't see that this example would change anything -- unless there is something here I'm not seeing
[01:18:03] *** Quits: xensie (~xensie@88-115-238-181.elisa-laajakaista.fi) (Quit: Textual IRC Client: www.textualapp.com)
[01:18:10] <yitz> Iterators are things you can iterate over. You can't "look ahead" or "know the length". You can just get the next one
[01:18:23] <yitz> You can build a list from an iterator then test list size
[01:18:26] <sveinse> That example doesn't consume the list twice
[01:18:41] <sartan> you don't know that
[01:18:54] <sartan> the iterator could be some streaming service online somewhere, you have no idea how long it is
[01:19:03] <KirkMcDonald> This pattern, for instance, relies on it: itertools.zip_longest(*[iter(foo)]*n)
[01:19:10] <sartan> len(something_you_dont_know_until_you_try) isn't possible
[01:19:32] <sveinse> sorry, but an iterator can only be consumed once in python
[01:19:38] <yitz> len(pandemic)  pls
[01:19:47] <sartan> yitz: :P
[01:19:59] <sveinse> :D
[01:20:00] <grym> yitz: 572
[01:20:03] <grym> .. so far
[01:20:12] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:20:46] *** Joins: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com)
[01:20:56] <sveinse> if an iterator can be consumed multiple times, I will rest my case, as I've clearly misunderstood it :D
[01:21:26] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[01:21:49] <KirkMcDonald> sveinse: They can't.
[01:22:18] *** Quits: Barones (~Barones@2804:48dc:8500:0:5635:5e6d:7349:856) (Quit: Leaving)
[01:22:32] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[01:22:51] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[01:23:04] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[01:23:27] *** Quits: manti7 (~manti7@185.107.94.249) (Quit: WeeChat 3.1)
[01:23:30] <sveinse> KirkMcDonald: good thanks. So in _principle_ and hypothetically, py could have chosen to raise an Exception other than StopIteration if one tried to iterate it a second time. <-- Since this is not the case in py, this is academic, so I'll stop with that.
[01:24:39] <sartan> sveinse: here, https://bpa.st/5GCQ
[01:24:58] <sartan> for x in raise_on_empty(data.items()) will raise StopIteration for you with this method
[01:25:22] *** Quits: Narrat (~omnius@p200300df5f0b35a606ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:25:49] *** Joins: Betal (~Betal@user/betal)
[01:27:29] <sveinse> sartan: jep
[01:27:33] *** Joins: Macuser (~Macuser@216.30.159.201)
[01:27:36] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 245 seconds)
[01:27:40] *** Quits: XV8 (~XV8@2601:5cb:c001:50:fcdc:b6a2:4b2f:94e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:31:25] <sveinse> sartan: or wait, no. It will raise the StopIteration if the input iterator is unconsumed, but empty, which is not what I was arguing for.
[01:32:43] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:32:54] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[01:35:31] *** Quits: Jefren (~Jefren@70.35.66.226) (Ping timeout: 245 seconds)
[01:37:39] *** Quits: mage (~julien@orval.bbpf.belspo.be) (Read error: Connection reset by peer)
[01:37:40] *** Quits: phylaz (~phylaz@92.221.176.219) (Quit: Ping timeout (120 seconds))
[01:37:44] *** Joins: Jefren (~Jefren@70.35.67.81)
[01:38:08] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[01:38:10] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[01:38:58] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:1c3a:3794:22dd:13f6) (Quit: Leaving)
[01:39:56] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[01:40:05] *** Joins: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[01:41:39] *** Quits: emf (~emf@2620:10d:c090:400::5:9760) (Quit: emf)
[01:42:42] *** Joins: emf (~emf@2620:10d:c090:400::5:9760)
[01:43:21] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[01:43:26] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[01:43:31] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[01:43:52] *** Joins: alzgh (~alzgh@user/alzgh)
[01:44:16] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[01:44:17] *** Joins: DanTheAutomator (~dantheaut@user/dantheautomator)
[01:45:23] *** Quits: flyback (~flyback@2601:540:8201:1e60:880c:ecc2:34d8:d3) (Quit: Leaving)
[01:47:01] *** Joins: flyback (~flyback@2601:540:8201:1e60:9491:71fd:86c8:3b3c)
[01:47:04] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:47:12] *** Parts: MrMobius (~MrMobius@208.58.206.154) (Leaving)
[01:48:25] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:49:17] *** Quits: Jefren (~Jefren@70.35.67.81) (Ping timeout: 265 seconds)
[01:50:22] *** Quits: whatsupdoc (~whatsupdo@148.64.20.99) (Quit: Client closed)
[01:51:15] *** Joins: Jefren (~Jefren@70.35.67.244)
[01:51:42] *** Joins: bsturmfels_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[01:52:13] *** Parts: bsturmfels_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) ()
[01:55:29] *** Joins: oriba (~oriba@dynamic-077-013-228-148.77.13.pool.telefonica.de)
[01:55:31] *** Quits: Jefren (~Jefren@70.35.67.244) (Ping timeout: 245 seconds)
[01:56:14] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[01:57:11] *** Quits: emf (~emf@2620:10d:c090:400::5:9760) (Ping timeout: 245 seconds)
[01:57:47] *** Joins: sturm (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[02:02:12] <sartan> sveinse: you want some property of a generator that can tell you 'has been consumed' or not?
[02:02:57] *** Joins: Jefren (~Jefren@70.35.67.45)
[02:03:14] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 245 seconds)
[02:03:16] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[02:03:29] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[02:03:46] *** Quits: driib (~driib@185.195.233.167) (Quit: The Lounge - https://thelounge.chat)
[02:04:21] *** Joins: driib (~driib@185.195.233.167)
[02:04:49] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[02:05:25] <sveinse> futurize adds object to `class C(object)` to any class that doesn't have it and import object from builtins. However I get a failure in a package because it relies on issubclass(C.__class__, object) which is False. How can I migrate that?
[02:06:21] *** Quits: junktext (~junktext@109.201.152.178) (Ping timeout: 245 seconds)
[02:07:46] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:08:27] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:08:58] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[02:09:00] <sveinse> sartan: not directly, but it in the topic. E.g. if I do: g = some_generator(); for a in g: pass; for a in g: pass. The later a is a clear error, but it'll just pass without complaints.
[02:09:04] *** Quits: Jefren (~Jefren@70.35.67.45) (Ping timeout: 245 seconds)
[02:09:07] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: restarting)
[02:09:29] *** Joins: qlixed (~qlixed@181.44.129.13)
[02:09:42] <sveinse> But no worries, I don't need to ride the argument. The above code is permitted as of today, so it is what it is.
[02:09:59] *** Quits: qlixed (~qlixed@181.44.129.13) (Client Quit)
[02:10:45] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[02:11:21] *** Joins: Jefren (~Jefren@208.104.190.59)
[02:12:39] <sveinse> When a file overrides the default object by doing "from builtins import object", is there any way to get the original object?
[02:12:59] <grym> __builtins__.theobject, usually
[02:15:43] <sveinse> Here on py2.7 __builtins__ is a dict apparently, so __builtins__['object']
[02:16:45] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[02:17:11] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:38f4:11f8:c24:b16f) (Ping timeout: 245 seconds)
[02:18:26] *** Quits: palasso (~palasso@user/palasso) (Read error: Connection reset by peer)
[02:19:28] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[02:20:13] *** Quits: Jefren (~Jefren@208.104.190.59) (Ping timeout: 265 seconds)
[02:20:29] *** Quits: erica (~erica@user/erica) (Quit: The Lounge - https://thelounge.chat)
[02:21:04] *** Joins: erica (~erica@user/erica)
[02:21:51] <ska> damn s3fs is impossible to test....
[02:22:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[02:23:06] <grym> sveinse: probably. i haven't thought about py2 in a long time
[02:24:06] <sveinse> I wish I could too. Mission: Get this pesky thing over to py3 asap, thus futurize
[02:25:07] *** Joins: fikran (~fikran@user/fikran)
[02:27:17] *** Joins: Jefren (~Jefren@70.35.66.225)
[02:30:17] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (Quit: Leaving)
[02:31:28] *** Joins: emf (~emf@2620:10d:c090:400::5:9760)
[02:32:25] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[02:32:43] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Client Quit)
[02:33:09] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[02:34:25] *** Joins: iflema (~ian@user/iflema)
[02:35:39] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Client Quit)
[02:36:19] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[02:36:30] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:8cd8:414d:2b05:7912)
[02:37:22] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[02:37:38] <stewie925> hello guys, Im trying to run this and I am getting an error in line 10 (provided in the comment). - https://bpa.st/U2KQ
[02:38:50] <sartan>  why not just return list(seen) ?
[02:39:00] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[02:39:04] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 245 seconds)
[02:39:14] <stewie925> cause seen has more than one element
[02:39:19] <stewie925> let me try...
[02:39:43] <sartan> so what map() is doing is calling list(x) on each element of seen, and seen is a list of ints
[02:39:51] <sartan> list(1) is an int object, and not iterable
[02:40:08] <sartan> Waht are you expecting the output of this function to look like?
[02:40:20] <sartan> I'm guessing you're trying to convert the set() to a list() in a strange way
[02:40:21] <sveinse> Where has types.StringType gone in py3?
[02:40:42] <sartan> listifying a set will return a list containing the items in the set
[02:40:43] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[02:40:46] <stewie925> sartan - let me fix it and see what hapens
[02:40:49] <sartan> it's fine there is more than one element
[02:41:52] <jinsun> sveinse: str?
[02:42:58] <sveinse> Yeah, I see this old py2 code is doing isinstance(s, (types.StringType, types.UnicodeType)) a lot
[02:43:06] <sveinse> Think I have to refactor each of them
[02:43:43] <nedbat> sveinse: btw, that builtins stuff, i would get rid of all of that
[02:44:14] *** Quits: magla (~gelignite@55d4ca83.access.ecotel.net) (Quit: Stay safe!)
[02:44:41] *** Quits: jafarlihi (~hjafarli@h162081.upc-h.chello.nl) (Quit: WeeChat 3.3)
[02:44:49] <sartan> sveinse: https://stackoverflow.com/questions/8598473/python-3-x-test-if-generator-has-elements-remaining I was thinking of a class wrappera round an iterator, and found this stack overflow post that has a neat approach here by caching a buffer
[02:45:09] <sartan> Just to continue on earlier conversation. it's not possible in any stdlib right now, you'd have to ride your own stuff on top of something.
[02:46:33] <sveinse> nedbat: thans. You won't believe how "intrusive" this library is (gnosis). It even makes efforts to make class instances without calling __init__ and things like that
[02:46:40] <sveinse> thanks*
[02:47:03] <nedbat> sveinse: this is the library you are trying to port to py3?
[02:47:14] *** Joins: ckdCreations (~ckdCreati@147.55.133.142)
[02:47:24] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-28db-81e5-493b-2536.res6.spectrum.com) (Read error: Connection reset by peer)
[02:47:35] <Gustavo6046> is there such a thing as a class where all subclasses have a monolithic class member that is a dict that contains every instance of said class by some string key?
[02:47:50] <sveinse> nedbat: no, but the program I am convert relies on it for an XML serializer, so I need it along for now. Once over, I'll ditch XML and use something else
[02:48:11] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8cd8:414d:2b05:7912) (Quit: Client closed)
[02:48:23] <nedbat> Gustavo6046: i don't quite know what you want, but you could make a class like that
[02:48:24] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:8cd8:414d:2b05:7912)
[02:48:39] <Gustavo6046> er
[02:48:41] <Gustavo6046> come to think of it
[02:48:51] <sveinse> nedbat: so plan is to get decent-ish dual py2/py3 support in code so that I can run the old py2 validation tests and then burn the bridge to py2
[02:48:55] <Gustavo6046> nedbat: i wanted to do a registry of item types and entity types with their own callbacks and stuff
[02:49:04] <Gustavo6046> but come to think of it i'll just make my own state machine and bytecode type thing lol
[02:49:08] <Gustavo6046> maybe Sexprs
[02:49:10] *** Quits: emerent (~quassel@p200300cd574855ffba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[02:49:11] <Gustavo6046> s-exprs*
[02:49:20] *** Joins: emerent (~quassel@p200300cd5748555fba27ebfffed28a59.dip0.t-ipconnect.de)
[02:49:37] <Gustavo6046> >Sexprs
[02:49:42] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 265 seconds)
[02:50:16] <sveinse> sartan: thanks
[02:50:31] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[02:52:54] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:53:12] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:53:58] <sveinse> Another example: would using eval and exec be an acceptable way to read an XML into memory to make python objects? :D
[02:53:59] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[02:54:54] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 245 seconds)
[02:55:57] *** Joins: SuperLag (~akulbe@user/superlag)
[02:56:29] <MacGyver> No.
[02:56:39] <MacGyver> I didn't need to read beyond "exec"
[02:56:43] <MacGyver> The answer is no.
[02:56:51] *** Joins: Wulf (~Wulf@user/wulf)
[02:57:00] <sveinse> exactly :D
[02:57:20] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:57:51] <sveinse> When I was inexperienced with py, I tended to overload functions by making different behavior from type checking. I see that I'm not alone to have had that fault
[02:57:52] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[02:58:09] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Client Quit)
[03:05:06] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 245 seconds)
[03:05:19] <hexology> in attrs, is there a way to exclude a field from being turned into a parameter in __init__, but still have it be initialized with its default value as an instance attribute?
[03:05:33] *** Joins: elkclone (~elkclone@user/elkclone)
[03:07:06] *** Joins: cloud (~cloud@user/ansible)
[03:07:12] <meejah> hexology: i've used __attrs_post_init___ to add things like that .. but perhaps there's a better way
[03:07:15] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:07:48] <hexology> yeah. it might be a missing feature. i'm aware of the `these=` argument, but that requires me to "whitelist" all the attributes that i want to include. i want the opposite behavior, where i can say `@attr.define(init_exclude=['foo', 'bar'])`
[03:08:21] *** Parts: cloud (~cloud@user/ansible) ()
[03:08:48] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:09:04] <sveinse> hexology: yes field = attr.ib(init=False, default='value')
[03:09:05] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[03:09:29] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[03:09:41] <hexology> sveinse: hm... but that means i have to write my own __init__ with annotations, etc. right?
[03:09:53] <hexology> oh, sorry
[03:09:59] <hexology> that's on attr.ib() not attr.s()
[03:10:32] *** Joins: bloody (~bloody@user/bloody)
[03:11:58] <greatgatsby__> hexology, does attrib(init=False, default="foo")  do what you want?
[03:12:11] <hexology> i think so, sveinse just suggested it above.
[03:12:24] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[03:12:30] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[03:13:02] <hexology> i was hoping to avoid using `= attr.ib()` but it seems necessary in this case
[03:13:53] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Quit: WeeChat 2.3)
[03:14:31] <sveinse> hexology: I've ended up making my own function that calls attr.ib(), e.g. `mode: str = noinit(default='run')`
[03:14:45] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[03:14:55] <hexology> hmm... i was under the impression that mypy has attr.s/ib somewhat hard-coded
[03:15:04] <hexology> hence the transition to auto_attribs=True
[03:16:38] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[03:18:23] *** Joins: Gudddu (~Guddu@190.84.88.92)
[03:20:35] <sveinse> I encounter a lot of `if type(s) == ListType`. The best migration here is `isinstance(s, list)` right? And not `type(s) is list` ?
[03:20:37] *** Joins: aknot (~aknot@2603:900a:1503:17bb:db70:8285:6419:f370)
[03:20:57] <meejah> sveinse: yes
[03:21:21] *** Quits: Guddu (~Guddu@190.84.88.92) (Ping timeout: 245 seconds)
[03:21:38] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[03:21:39] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:25:32] *** Joins: tm007 (uid287041@id-287041.uxbridge.irccloud.com)
[03:26:18] *** Quits: emf (~emf@2620:10d:c090:400::5:9760) (Ping timeout: 260 seconds)
[03:26:39] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:27:45] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:29:17] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:29:18] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[03:31:04] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:31:13] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[03:32:44] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:35:23] *** Joins: bobbob (~bobbob@64.64.123.24)
[03:35:25] *** Joins: chenqisu12 (~xirndc@183.217.201.186)
[03:35:31] *** Joins: snalty_ (~Shhh@user/snalty)
[03:36:34] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[03:37:17] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[03:37:25] *** Quits: snalty (~Shhh@user/snalty) (Ping timeout: 265 seconds)
[03:39:21] *** Quits: y1n-v1 (~y1n@77.119.195.23.wireless.dyn.drei.com) (Ping timeout: 265 seconds)
[03:41:12] *** Joins: P1RATEZ (piratez@user/p1ratez)
[03:41:46] *** Quits: bobbob (~bobbob@64.64.123.24) (Ping timeout: 265 seconds)
[03:42:21] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:47:36] *** Quits: Ivii (~Ivyy@2001:a61:13f1:cb01:b8da:f768:b34d:a040) (Remote host closed the connection)
[03:49:29] *** Quits: DanTheAutomator (~dantheaut@user/dantheautomator) (Ping timeout: 245 seconds)
[03:50:31] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 245 seconds)
[03:51:55] *** Joins: DanTheAutomator (~dantheaut@user/dantheautomator)
[03:54:27] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[03:57:17] <pycurious> what is the best way to install python3.9 in production on ubuntu/debian boxes?
[03:58:41] <grym> pycurious: pyenv's rock solid
[03:58:49] <meejah> pycurious: if you have strong ideas .. yeah, pyenv
[03:58:55] <grym> alternatively, deadsnakes
[03:59:06] <grym> if you feel like apt needs to touch your python for some reason
[03:59:32] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:59:48] <meejah> (was going to say, "strong ideas on exact version")
[04:00:02] <pycurious> grym: I was looking for using apt
[04:00:15] <grym> deadsnakes will work for ubuntu
[04:00:25] <grym> debian, you're probably SOL
[04:00:48] *** Joins: nova (novasenco@user/nova)
[04:01:09] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:01:30] *** Joins: alzgh (~alzgh@user/alzgh)
[04:01:43] <nova> re.search("[^\s\w()|&]", text)  is legal regex for that engine? :O crazy...
[04:01:54] <pycurious> grym: Disclaimer: there's no guarantee of timely updates in case of security problems or other issues. Is it really kept up2date?
[04:01:57] *** Joins: Barones (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14)
[04:02:48] <grym> pycurious: deadsnakes is actively maintained
[04:02:58] <nova> it's not srv4/gnu or perl/gnu or posix regex. what .. flavor is python's builtin `re`?
[04:03:41] <nova> also forgot r for raw string: r"..."
[04:04:13] <grym> pycurious: but if you want to be johnny-on-the-spot about point releases, pyenv is going to win
[04:05:23] <pycurious> grym: http://us.archive.ubuntu.com/ubuntu focal-updates/universe amd64 Packages — isnt 3.9 already in ubuntu 20.04?
[04:05:30] <pycurious> so just use it from there?
[04:06:22] <grym> ¯\_(ツ)_/¯
[04:06:25] <grym> could be!
[04:06:51] <grym> i'm still on 18.04, and i use pyenv
[04:07:19] <grym> so i don't really care or know very much about which LTS has which versions and prefer to avoid using them anyway
[04:08:17] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[04:08:34] <meejah> pycurious: you have two choices: care about exact python version, or take what debian/ubuntu gives you
[04:09:04] *** Quits: flokuehn (~flokuehn@i5E86B3EF.versanet.de) (Ping timeout: 245 seconds)
[04:09:06] <meejah> if you choose "care" then you own all the pieces, otherwise you let debian/ubuntu care about security updates (because you enabled automatic-updates, right?)
[04:09:34] <meejah> this is just "curious yellow" for a new millenium
[04:11:13] *** Joins: flokuehn (~flokuehn@i5E86B3EB.versanet.de)
[04:11:19] *** Joins: travaldo (~travaldo@159.203.88.148)
[04:11:59] *** Quits: Jefren (~Jefren@70.35.66.225) (Ping timeout: 245 seconds)
[04:11:59] *** Quits: ttys000 (~ttys000@user/ttys000) (Ping timeout: 245 seconds)
[04:12:47] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[04:12:47] *** Quits: DanTheAutomator (~dantheaut@user/dantheautomator) (Quit: Bye everybody!)
[04:13:57] *** Quits: oriba (~oriba@dynamic-077-013-228-148.77.13.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:14:20] *** Joins: Jefren (~Jefren@206.253.157.201)
[04:15:33] <byte4byte> why does python exist when c and c++ do jim?
[04:16:23] <grym> byte4byte: shoo
[04:16:41] <meejah> byte4byte: "buffer overruns"
[04:16:51] *** Quits: MrC (Ben@mrbenc.net) (Read error: Connection reset by peer)
[04:16:56] <byte4byte> i see. laziness
[04:17:21] <jinsun> nedbat: can you just ban byte4byte?
[04:17:28] <phy1729> meejah: in general it's best to just ignore trolls and lte them starve for attention
[04:17:44] <nedbat> byte4byte: i'm giving you one more warning.
[04:18:13] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8cd8:414d:2b05:7912) (Ping timeout: 256 seconds)
[04:19:52] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:8cd8:414d:2b05:7912)
[04:20:15] <stewie925> test
[04:22:27] <grym> stewie925: ehhh, B-
[04:22:52] <stewie925> sorry guys, this chat says I left while I was here all the time...
[04:23:26] *** Quits: Jefren (~Jefren@206.253.157.201) (Ping timeout: 245 seconds)
[04:23:41] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[04:25:29] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[04:25:47] *** Joins: Jefren (~Jefren@70.35.67.47)
[04:27:16] *** Quits: Gudddu (~Guddu@190.84.88.92) (Read error: Connection reset by peer)
[04:27:23] <hexology> pycurious: i'd also suggest docker or equivalent Container Technology
[04:28:27] *** Joins: Gudddu (~Guddu@190.84.88.92)
[04:28:55] <aphysically> I should figure out the best way to get 3.10 on my debian webserver to host my server-side side projects to get an environment to play around with new features
[04:28:57] <aphysically> probably pyenv
[04:29:03] *** Joins: MrC (Ben@mrbenc.net)
[04:29:12] <grym> aphysically: almost assuredly so, yes
[04:29:25] <grym> and, if you screw it up, just delete it all
[04:29:30] <aphysically> :D
[04:29:34] <grym> nice and tidy.
[04:29:47] <aphysically> I guess I could move my open source stuff to 3.10 too since it's still only me using it, but there's no real large impetus before black lands match/case maybe
[04:30:22] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:32:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[04:33:57] <meejah> aphysically: yes, pyenv
[04:34:27] *** Joins: fikran (~fikran@user/fikran)
[04:35:08] *** Joins: vlm (~vlm@user/vlm)
[04:35:28] <hexology> pyenv or conda
[04:36:05] <hexology> using cattrs, is there some way to specify a converter for a particular attribute/field by _name_, not by type?
[04:38:59] <hexology> seems like no. kind of a weird missing piece in this library, given the huge amount of options
[04:39:22] *** Joins: XV8 (~XV8@2601:5cb:c001:50:c0e0:2ca5:895:347c)
[04:42:01] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:42:40] *** Quits: Jefren (~Jefren@70.35.67.47) (Ping timeout: 265 seconds)
[04:43:13] *** AndrewYu is now known as Andrew
[04:44:21] *** Joins: Jefren (~Jefren@70.35.67.109)
[04:48:19] *** Joins: brabrax_ (~brabrax@user/brabrax)
[04:48:51] *** Quits: jazz-o-lantern (~jaziz@2600:380:443b:e243:84dd:ba75:4525:58b4) (Ping timeout: 245 seconds)
[04:49:53] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 264 seconds)
[04:49:53] *** brabrax_ is now known as brabrax
[04:50:37] *** Joins: redrum88 (~redrum88@user/redrum88)
[04:51:00] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[04:52:18] *** Joins: orbisvicis (~orbisvici@user/orbisvicis)
[04:52:31] <orbisvicis> is there an example of a project that uses setup.cfg for a single module in the root directory?
[04:55:31] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[04:56:35] <nedbat> aphysically: pyenv can even install 3.11.0a1 for you if you want :)
[04:59:06] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[04:59:20] <hexology> orbisvicis: i don't have one handy, but in setup.py you would write setup(..., py_modules=[;)
[04:59:26] <hexology> py_modules=['my_module']
[04:59:55] <hexology> usually all the keys are the same in setup.cfg, so try `py_modules`
[05:00:10] <orbisvicis> hexology, just found:
[05:00:10] <orbisvicis> https://setuptools.pypa.io/en/latest/userguide/declarative_config.html
[05:00:20] <orbisvicis> (its the same)
[05:00:58] <hexology> good to know
[05:02:30] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:03:49] <madduck> In [8]: datetime.datetime.strptime('Thu', '%a').strftime('%a')
[05:03:50] <madduck> Out[8]: 'Mon'
[05:03:51] <madduck> :(
[05:04:47] <grym> "it must be thursday", arthur said.  "i never could get the hang of thursdays"
[05:05:38] *** Joins: thurs8067 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[05:06:21] *** Quits: Jefren (~Jefren@70.35.67.109) (Ping timeout: 265 seconds)
[05:06:28] <Repiphany> Which Thursday do you want the datetime of
[05:06:38] *** Quits: P1RATEZ (piratez@user/p1ratez) (Quit: kdrama time ;)
[05:06:43] <Repiphany> I guess you have 13.8 billion years to choose a Thursday from
[05:06:59] *** Quits: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Read error: Connection reset by peer)
[05:06:59] *** thurs8067 is now known as thurs806
[05:07:37] <madduck> In [9]: datetime.datetime.strptime('3', '%d').strftime('%d')
[05:07:37] <madduck> Out[9]: '03'
[05:07:59] *** Joins: Jefren (~Jefren@206.253.157.223)
[05:08:08] <madduck> In [14]: datetime.datetime.strptime('Feb', '%b').strftime('%b')
[05:08:09] <madduck> Out[14]: 'Feb'
[05:08:39] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8cd8:414d:2b05:7912) (Ping timeout: 256 seconds)
[05:09:08] <madduck> To be honest, I think it's a mistake that datetime.datetime.strptime('19:00', '%H:%M') returns "1900-01-01 19:00". It should leave the date component undefined.
[05:09:19] <grym> i have no idea why strptime of "thu" gives you january 1 1900
[05:09:37] *** JacobFrost is now known as LeafyFrost
[05:09:38] <madduck> because unless you specify day/month/year, that is the default
[05:09:56] <madduck> In [15]: datetime.datetime.strptime('Feb', '%b').strftime('%F')
[05:09:56] <madduck> Out[15]: '1900-02-01'
[05:10:12] <madduck> that is just nonsense
[05:10:21] <grym> time libraries are full of it, yes
[05:10:23] <grym> :/
[05:10:37] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:10:58] *** Joins: luva4 (~luva@5.180.62.229)
[05:11:36] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[05:12:10] *** Quits: luva (~luva@5.180.62.229) (Ping timeout: 252 seconds)
[05:12:10] *** luva4 is now known as luva
[05:12:30] <leduyquang753> >>> datetime.datetime.strptime('5 | 7/10/2021', '%w | %d/%m/%Y')
[05:12:30] <leduyquang753> datetime.datetime(2021, 10, 7, 0, 0)
[05:12:37] <leduyquang753> Nice this parses the day of week fine.
[05:13:08] <madduck> and subsequently ignores it.
[05:13:13] <jinsun> well datetime.strptime is supposed to give you some datetime object, so it cannot leave year month day undefined
[05:13:53] <madduck> I disagree. "Thu 19:30" is also a datetime
[05:13:57] <leduyquang753> madduck Which is good since our day of week format is different.
[05:14:07] <madduck> leduyquang753: hence locales
[05:14:10] <leduyquang753> 2 Monday to 8 Sunday.
[05:14:19] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[05:14:30] <leduyquang753> There is no locale which has that.
[05:14:45] <phantomotap> that's seems really strange.
[05:14:52] <grym> phantomotap: time's wild!
[05:14:57] <leduyquang753> You need to learn my language to know why.
[05:15:02] <phantomotap> oh.
[05:15:03] <phantomotap> okay.
[05:15:46] <jinsun> use dateutil.parser for magic versions of strptime
[05:16:04] <Moult> a stylistic question, in python, i find defining abstract base classes to be incredibly verbose. for example, to define a single abstact class method, i'd have to do @classmethod, @abstractmethod, def foo(cls):, pass, then typically a new line. that's 5 lines just to define a single method. in other languages, this signature in an interface class could be a single line. am i missing something
[05:16:06] <Moult> obvious or is this just the python way?
[05:16:22] <jinsun> In [1]: dateutil.parser.parse("Thu 19:30")
[05:16:22] <jinsun> Out[1]: datetime.datetime(2021, 10, 7, 19, 30)
[05:16:26] <grym> Moult: i don't really use abcs at all
[05:16:51] <grym> Moult: and that may be a very python way answer, though it feels weird at first depending on home language
[05:17:20] <Moult> grym: yeah, i don't use abcs very often, but in this particular scenario i would like to confirm that a class meets an interface contract
[05:17:26] *** Quits: Kharon (uid511277@user/cypris) (Quit: Connection closed for inactivity)
[05:17:30] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[05:17:36] <grym> Moult: typing.Protocol is a totally other way to skin this cat
[05:17:39] <grym> that you might like more
[05:17:43] <jim> the abstract base class methods could all (or just some) have pass
[05:17:57] <madduck> jinsun: ♥
[05:18:00] <grym> (especially if you use static analysis regularly, but you can do it at runtime too)
[05:18:50] <Moult> jim: indeed, they all have pass, but even with that, it is still 5 lines of code as mentioned.
[05:19:02] *** Joins: xiongxin (~quassel@113.116.33.66)
[05:19:06] <Moult> grym: cheers, looking it up now in the docs
[05:19:06] <grym> i kept finding that abcs didn't go far _enough_
[05:20:36] <grym> Moult: https://www.python.org/dev/peps/pep-0544/ https://mypy.readthedocs.io/en/stable/protocols.html ; the docs just punt to the PEP anyway the last i looked
[05:21:59] <jim> it's a way to specify what you want to have happen
[05:22:08] <jim> be right back
[05:22:21] *** Quits: jim (~jim@about/linux/staff/jim) (Quit: Leaving)
[05:25:43] *** Quits: Rain42 (~Rain@li958-238.members.linode.com) (Read error: Connection reset by peer)
[05:25:50] <madduck> Can I convince pytest-3 --pdb to launch ipdb?
[05:25:56] *** Joins: Rain428 (~Rain@li958-238.members.linode.com)
[05:26:21] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 268 seconds)
[05:27:03] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[05:29:32] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[05:30:19] *** Quits: Jefren (~Jefren@206.253.157.223) (Ping timeout: 245 seconds)
[05:32:11] *** Quits: aknot (~aknot@2603:900a:1503:17bb:db70:8285:6419:f370) (Ping timeout: 245 seconds)
[05:32:28] *** Joins: fr_sleepy (~fr_sleepy@209.94.138.128)
[05:32:40] *** Joins: Jefren (~Jefren@70.35.66.175)
[05:33:35] <jinsun> madduck: maybe `--pdbcls=IPython.terminal.debugger:TerminalPdb` (this is the example given in pytest --help)
[05:33:42] *** Joins: Oddity (Oddity@user/oddity)
[05:34:28] <madduck> damn, I missed that. It might also have been that I am staring at a screen too long
[05:34:32] <madduck> thank you!
[05:38:15] *** Quits: Jefren (~Jefren@70.35.66.175) (Ping timeout: 265 seconds)
[05:39:21] *** Quits: XV8 (~XV8@2601:5cb:c001:50:c0e0:2ca5:895:347c) (Quit: Textual IRC Client: www.textualapp.com)
[05:40:02] *** Joins: Jefren (~Jefren@70.35.67.207)
[05:40:20] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Remote host closed the connection)
[05:41:36] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[05:45:29] <aphysically> the proposed +/- syntax for co/contravariant typevars seems nice
[05:49:59] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[05:52:30] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[05:52:45] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[05:52:47] *** Joins: jjhoo (~jahakala@user/jjhoo)
[05:54:16] *** MightyMu_ is now known as MightyMu
[05:54:48] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-3d8e-e9e6-0356-d7f3.res6.spectrum.com)
[05:55:00] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[05:59:06] <aphysically> actually depending on how black fails I can probably mess with 3.10 pattern matching on my server code now
[05:59:13] <aphysically> maybe a fmt: off is enough
[05:59:40] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[06:00:09] *** Joins: comet23 (~comet23@user/comet23)
[06:00:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[06:00:59] <comet23> hi
[06:01:36] <comet23> why would i not put line 8 as an argument in line 7? https://bpa.st/5J4Q
[06:01:53] <comet23> s/argument/parameter
[06:02:16] <comet23> wait nvm it's an argument lol
[06:02:41] *** jess is now known as catoshi_nyakamot
[06:02:54] *** catoshi_nyakamot is now known as CatoshiNyakamoto
[06:03:52] *** Quits: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[06:05:55] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[06:06:43] *** Joins: jim (~jim@about/linux/staff/jim)
[06:09:12] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:8d71:300d:fa5b:9d34)
[06:11:34] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 245 seconds)
[06:13:06] *** Joins: dfoolz (~dfoolz@static.114.137.9.176.clients.your-server.de)
[06:15:56] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[06:16:56] *** Joins: jazzy (~jaziz@172.58.28.108)
[06:16:59] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[06:17:27] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:8cd8:414d:2b05:7912)
[06:18:21] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[06:18:36] *** Joins: jetchisel (jetchisel@user/jetchisel)
[06:19:45] *** Joins: jibsaramnim (~quassel@119.192.78.245)
[06:20:50] *** Quits: zerotypi1 (~zerotypic@66.96.192.176) (Ping timeout: 268 seconds)
[06:21:16] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[06:21:24] *** Quits: Barones (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14) (Ping timeout: 265 seconds)
[06:26:47] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 268 seconds)
[06:28:18] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:29:33] *** Joins: srhm (~srhm@user/srhm)
[06:30:27] *** Quits: BUSY (~BUSY@user/busy) (Read error: Connection reset by peer)
[06:30:29] *** Quits: gitly (~gitly@85.255.236.114) (Ping timeout: 268 seconds)
[06:32:06] *** Joins: gitly (~gitly@148.252.129.5)
[06:32:24] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[06:33:52] <cloudbender> The Super Init needs to happen prior to local state on the derived class.
[06:34:25] <madduck> is there a generic function out there already I can use to massage strings into valid attribute names?
[06:35:46] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[06:37:21] *** Joins: MCx (~MCx@user/mcx)
[06:38:04] *** Quits: sturm (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Quit: sturm)
[06:39:45] <jinsun> nothing specific for that, but sounds like a job for re.sub
[06:40:19] <dre> I'm so mad, is there an online version of pprint?
[06:40:40] <aphysically> after I satisfy pyright I should go through my project and fix up typing everywhere. I don't think there's any real errors anywhere, but there's a couple spots where I'm not sure about object/Any or I don't understand the 'why' of it and could use some guidance
[06:40:43] <dre> I have a big spitout of data [[ClassX(a,b,c)....]] etc. I want to just pretty print it
[06:41:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[06:41:39] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:42:41] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[06:43:06] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[06:43:35] <jinsun> aphysically: Any is just for convenience, it can always be replaced with object + cast, and if you always end up casting to the same type then perhaps the annotation should have been that type
[06:43:47] *** Joins: fikran (~fikran@user/fikran)
[06:45:31] <aphysically> jinsun: I have one Any that I think can't really be replaced
[06:45:36] <aphysically> one sec
[06:46:25] <aphysically> yeah so I have a container that contains Futures that I use for waiting on, but futures are generics of their return argument
[06:46:41] <aphysically> I can't specify the generic as a typevar because they're not all the same return signature potentially
[06:46:58] <aphysically> I'm pretty sure that situation is a genuine 'Any' is the correct tool
[06:47:09] <jinsun> so why can it not be object?
[06:47:22] <aphysically> src/pyffstream/cli.py:480: error: Argument 2 to "status_wait" has incompatible type "List[Future[None]]"; expected "Iterable[Future[object]]"
[06:47:37] <aphysically> it detects the return as None and raises an error
[06:48:01] *** Lando-SpacePimp is now known as Mumm-Ra
[06:49:06] <aphysically> i'll link you the function one second
[06:49:15] <aphysically> https://github.com/GBeauregard/pyffstream/blob/b5e9bbed2b03fa34c2c404394001da3e8ee26e68/src/pyffstream/cli.py#L251
[06:49:23] <jinsun> hmm None is object, so mypy just special casing it maybe
[06:51:09] <aphysically> so in that file I have two other 'Any'
[06:51:10] *** Quits: bloody (~bloody@user/bloody) (Quit: WeeChat 2.8)
[06:51:28] <aphysically> one is a function signature that can't be captured with ParamSpec but there are proposals that would let me type it
[06:51:47] <aphysically> I'm pretty sure the way I coded that is probably poor practice in one way or another so I'll probably change it
[06:52:20] <aphysically> the other any is: def hl_path(path: os.PathLike[Any]) -> str:
[06:52:27] <aphysically> which is because i don't understand what pathlike is a generic of :D
[06:52:58] *** Parts: jibsaramnim (~quassel@119.192.78.245) (https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:53:00] *** Joins: sandbox (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[06:53:53] <aphysically> let's see, next file I only have Any in a typeddict that has a few hundred members and I wasn't going to list them all
[06:54:02] <aphysically> (to-do)
[06:54:20] *** Quits: MCx (~MCx@user/mcx) (Quit: Client closed)
[06:54:26] <aphysically> and last file I'm still using Any for the futures thing and that's it
[06:58:11] <aphysically> jinsun: jinsun src/pyffstream/cli.py:480: error: Argument 2 to "status_wait" has incompatible type "List[Future[None]]"; expected "Iterable[Future[Optional[object]]]"
[06:58:15] <aphysically> well now I'm real confused :D
[06:58:52] <jinsun> yeah I was also trying that out, and get the same thing
[06:58:57] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[06:59:06] <jinsun> pyright error is slightly more informative
[06:59:20] <aphysically> what error is that?
[06:59:22] <jinsun> something about covariant and invariant that I didn't understand yet
[06:59:32] <aphysically> I think I'm confused because I'm thinking about this like a collection but it's not, it's a generic class
[07:00:04] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[07:00:06] *** Joins: Fiji_ (~Fiji@user/fiji)
[07:00:29] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[07:00:45] <jinsun> basically Future[T] is invariant
[07:01:11] *** MrC is now known as MrSpooky
[07:01:12] <jinsun> so it will not accept anything other than the exact type it was annotated with
[07:01:35] *** Quits: Fiji_ (~Fiji@user/fiji) (Client Quit)
[07:02:04] <pycurious> I've a class that is instantiated 100 times in my codebase. I'm looking to make sure that it is a singleton - and does not instantiate again ever. Any ideas on how i can do this? I was looking at singleton decorators - but can't find a good one that I should use. Perhaps there is a better solution?
[07:02:11] *** Parts: JimmyRustles (Haddock@cpc119394-smal16-2-0-cust17.19-1.cable.virginm.net) ()
[07:03:39] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 245 seconds)
[07:03:50] <jinsun> aphysically: so if the type checker allowed Future[None] inside a function that accepted Future[object | None] then insde the function it will let you do future.set_result(object) which will break the annotation of the object outside the function
[07:04:30] *** Joins: yggdrasil (~yggdrasil@67-0-17-104.albq.qwest.net)
[07:04:32] <yggdrasil> d
[07:04:54] <jinsun> because the result can only be None for Future[None]
[07:05:12] <yggdrasil> yo , can somone tell me what this is ? diaginfo.extend([shape, shape2, w,h,widthr])
[07:05:20] <yggdrasil> list ? dictionary ?
[07:05:34] <sandbox> that is a list
[07:05:34] <yggdrasil> wait thats not ... right
[07:05:54] <yggdrasil> these : shape = [(40,40), (w , h )]
[07:05:55] <yggdrasil>     shape2 = [(80,80), (w - 200  , h - 200)]
[07:06:06] <sandbox> a list of tuples
[07:06:17] <yggdrasil> hmm ive never seen such a thing.
[07:06:24] <sandbox> a tuple is like a list sort of, but you can't resize it
[07:06:35] <aphysically> jinsun: yeah yeah, so the way this is annotated is actually as just a regular generic
[07:06:42] <yggdrasil> can i do math to it ?
[07:06:48] <yggdrasil> itereatively ?
[07:06:51] <aphysically> because to allow something else they would have had to specifically made the typevar covariant or something
[07:06:57] <aphysically> (I believe it's co)
[07:07:00] *** sandbox is now known as Spawns_Carpeting
[07:07:06] <aphysically> without set_result they could have made it covariant maybe?
[07:07:16] <aphysically> jinsun: https://github.com/python/typeshed/blob/55cf343ba903d8c2032a67af6f49c43017ea11d5/stdlib/concurrent/futures/_base.pyi#L45
[07:07:23] <Spawns_Carpeting> you can do mostly everything you'd do to a list to it yggdrasil
[07:07:35] <meejah> yggdrasil: yes, those are just two numbers in sequence
[07:07:45] <yggdrasil> hmm..
[07:07:54] <aphysically> I guess set_result and add_done_callback are the only reason it's a generic at all
[07:08:02] <yggdrasil> let me think here.
[07:08:12] <jinsun> aphysically: yeah and because of those it has to be invariant too
[07:08:45] <aphysically> right, so I think Any is *genuinely* the correct solution here when I'm explicitly not using functions
[07:08:51] <aphysically> (those) functions
[07:09:55] <yggdrasil> so for x in range (0,9) > shapex = [shape2[[1]+x,[2]+x,(w,h)] ?
[07:10:26] <yggdrasil> so for x in range (0,9) > shapex = [shape2[[1]+x,[1]+x,(w,h)] ?
[07:10:32] <yggdrasil> maybe better.
[07:10:45] <yggdrasil> or do those parens need to be in there.
[07:10:47] <jinsun> aphysically: well object + cast is still possible, annotate as object and cast to object when calling it, but more cumbersome than Any
[07:11:19] <aphysically> it won't make a difference in type checking I think with the way I use it
[07:11:21] <yggdrasil> you know what ill jsut load it up into the interpreter and play with it. thats the way.
[07:12:27] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[07:13:16] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Reconnecting)
[07:13:38] <aphysically> but okay I feel better about that Any now
[07:13:41] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[07:13:54] <jinsun> aphysically: but cast will be just as bad as Any, the "correct" way (that doesn't disable the type checker)) would be to make your own protocol with the methods that you actually use instead of accepting Future
[07:13:54] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[07:14:33] <aphysically> when I first typed it I hadn't done generic classes so it makes more sense now
[07:15:30] <aphysically> jinsun: yeah I was thinking about protocols but I wasn't sure how much I liked it as a solution
[07:15:35] *** Joins: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[07:15:38] <jinsun> or actually why not Future[T]?
[07:15:49] <jinsun> instead of Future[Any]
[07:16:04] <aphysically> I think that gets bound to a specific T and then becomes wrong if there are multiple T
[07:16:18] <aphysically> at least I'm pretty sure that's what will happen
[07:16:27] <aphysically> I'm 20% confident that's what will happen :D
[07:16:28] <jinsun> it gets bound to whatever you pass to the function
[07:17:11] *** Quits: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Ping timeout: 245 seconds)
[07:17:11] *** thurs8060 is now known as thurs806
[07:17:31] <aphysically> right right, I guess a typevar can contain a union type
[07:17:51] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[07:17:57] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 265 seconds)
[07:18:10] <aphysically> yeah T is fine
[07:18:38] <aphysically> that's surely the correct solution
[07:18:53] <jinsun> pyright doesn't like it it seems
[07:19:02] <aphysically> what does pyright complain?
[07:19:23] <jinsun> TypeVar "T" appears only once in generic function signature
[07:19:25] <aphysically> I have mine setup to throw the 400 errors I haven't fixed so it's not very convenient to test on my end :D
[07:19:52] <aphysically> ah, that's reasonable for most cases of using TypeVar - is what I'm trying to do reasonable?
[07:21:08] <aphysically> if it's not in the PEP for TypeVar I could argue my case to the pyright people, but I'm not convinced yet myself
[07:22:14] <jinsun> it makes sense I think, the TypeVar becomes Any really if it is used only once
[07:22:44] <aphysically> the error makes sense, or my use?
[07:22:52] <jinsun> the error
[07:23:20] <aphysically> on one hand the function is invariant for a reason, on the other hand I need a way to tell it I know what I'm doing (that's Any?)
[07:23:27] <jinsun> your use also makes sense but TypeVar is not the right solution for that now I think
[07:23:44] <aphysically> it does feel like an abuse of what TypeVar is intended for
[07:24:04] *** Quits: LiftLeft (~LiftLeft@191.96.185.170) (Ping timeout: 245 seconds)
[07:25:02] <aphysically> (an aside: set_result is such a weird method ?? I must lookup the motivating cases for this..)
[07:26:47] <jinsun> the right solution (other than Any) would be some covariant version of Future that doesn't have set_result I gues (so back to protocol if it doesn't exist)
[07:27:15] *** CatoshiNyakamoto is now known as jess
[07:28:01] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[07:29:42] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[07:30:24] <aphysically> jinsun: typeshed uses Any https://github.com/python/typeshed/blob/55cf343ba903d8c2032a67af6f49c43017ea11d5/stdlib/concurrent/futures/process.pyi#L67
[07:30:25] *** LeafyFrost is now known as JacobFrost
[07:30:41] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8cd8:414d:2b05:7912) (Quit: Client closed)
[07:30:44] <aphysically> if it's good enough for typeshed I guess it's good enough for me?
[07:31:33] <jinsun> hmm well typeshed used to be a lot worse before
[07:31:41] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[07:31:58] *** Joins: zerotypic (~zerotypic@66.96.192.176)
[07:32:10] <jinsun> and if you look outside the stdlib, the annotations for third party stuff is still bad
[07:33:19] *** Quits: comet23 (~comet23@user/comet23) (Quit: Client closed)
[07:33:26] <jinsun> but still here Any is much more convenient than the alternative of defining the protocol, so good enough I guess
[07:33:30] <aphysically> they can't even use a typevar like me I think, because unlike mine that's a function that gets called, a generic class *does* have the problem I mentioned of getting bound
[07:33:53] <jinsun> just remember to not use set_result inside your function
[07:34:04] <aphysically> actually it may not be a problem I'd have to look at whatever that typeshed was for more closely
[07:34:23] <aphysically> jinsun: okay, I'm headed to take a break for now, cheers
[07:34:34] <aphysically> actually let's check that issue filed
[07:35:07] <aphysically> looks like nothing yet, but the fstring/dataclasses author added himself as cc
[07:35:28] <aphysically> probably because it's about dataclasses
[07:35:50] <aphysically> anyway, talk to you later
[07:36:01] <aphysically> thanks :)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:28] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Quit: Connection closed)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:01] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[07:44:10] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:47:24] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 245 seconds)
[07:48:16] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 265 seconds)
[07:52:32] *** Joins: BUSY (~BUSY@user/busy)
[07:54:05] *** Joins: p-i- (~root@155.138.135.122)
[07:55:17] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:55:42] <p-i-> Is it possible to add a reverseget method to a dict instance, to fetch the key for a given value?
[07:55:59] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:56:06] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[07:56:50] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[07:57:36] <BrenBarn> you can't do that in general because multiple keys might map the same value
[07:57:37] <BrenBarn> if you're going to need to do that a lot you probably want to keep two dicts to map both ways
[07:58:35] <p-i-> I don't need a generic solution
[07:58:58] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[07:59:55] <BrenBarn> well, you asked for a reverseget method, which sounds like a generic solution
[08:00:12] <jinsun> you cannot add methods to dict instances, you can make your own subclass of dict or just make a separate function that accepts dicts
[08:00:19] *** Quits: Jefren (~Jefren@70.35.67.207) (Ping timeout: 245 seconds)
[08:00:28] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:00:38] <p-i-> I tried D.rget = mylambda and setattr(D, 'rget', mylambda) but "'dict' object has no attribute 'rget'"
[08:00:55] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[08:01:28] <p-i-> ok I guess better to have a convenience rget free function that does it
[08:01:36] <phy1729> I'd probably make a class that internally had two dicts one for each direction and inherits Mapping
[08:02:40] *** Joins: Jefren (~Jefren@70.35.66.172)
[08:03:03] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Ping timeout: 276 seconds)
[08:03:28] <p-i-> `rget = lambda D, val: next((k for k,v in D.items() if v==val), None)` will do for now
[08:04:29] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 245 seconds)
[08:04:52] <jinsun> if D is small then this is fine
[08:04:57] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[08:05:32] <jinsun> but if it has too many elements this will be much slower on average than keeping 2 dicts
[08:07:05] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[08:07:06] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Remote host closed the connection)
[08:07:23] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[08:07:43] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[08:13:24] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[08:18:53] *** Quits: Gudddu (~Guddu@190.84.88.92) (Read error: Connection reset by peer)
[08:19:28] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:24:30] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[08:24:55] *** Joins: dvx (~dvx@185.63.97.64)
[08:28:25] *** Quits: DXR (~lyrical@46.246.214.198.dsl.dyn.forthnet.gr) (Ping timeout: 250 seconds)
[08:28:35] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[08:30:23] *** Joins: stranac (~stranac@195.29.239.126)
[08:30:27] *** Quits: beterraba (~beterraba@86.107.21.205) (Ping timeout: 265 seconds)
[08:30:28] *** Quits: p-i- (~root@155.138.135.122) (Quit: Lost terminal)
[08:31:22] *** Quits: chenqisu12 (~xirndc@183.217.201.186) (Remote host closed the connection)
[08:32:12] *** Joins: beterraba (~beterraba@86.107.21.205)
[08:33:00] *** Joins: moose (~moose@user/moose)
[08:33:05] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[08:37:58] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Quit: RabidToaster)
[08:39:29] *** Quits: travaldo (~travaldo@159.203.88.148) (Quit: travaldo)
[08:40:57] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[08:41:10] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Read error: Connection reset by peer)
[08:41:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:41:28] *** Joins: jdmark2 (~jdmark@097-102-095-007.res.spectrum.com)
[08:41:30] *** Joins: orbisvicis_ (~orbisvici@user/orbisvicis)
[08:41:30] *** Joins: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[08:41:31] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[08:41:35] *** Joins: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com)
[08:43:25] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Gone.)
[08:44:32] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 246 seconds)
[08:44:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[08:44:57] *** Quits: orbisvicis (~orbisvici@user/orbisvicis) (Ping timeout: 265 seconds)
[08:44:57] *** Quits: jdmark (~jdmark@097-102-095-007.res.spectrum.com) (Ping timeout: 265 seconds)
[08:45:43] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[08:45:59] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:48:01] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[08:49:04] *** Joins: jazzy2 (~jaziz@172.58.28.108)
[08:49:41] *** Joins: orbisvicis (~orbisvici@user/orbisvicis)
[08:50:06] *** Quits: orbisvicis_ (~orbisvici@user/orbisvicis) (Ping timeout: 245 seconds)
[08:50:56] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[08:51:40] <aphysically> I don't understand py.typed
[08:51:57] <aphysically> if I have inline type comments in my library am I supposed to put an empty py.typed file in my package?
[08:52:33] *** Quits: jazzy (~jaziz@172.58.28.108) (Ping timeout: 265 seconds)
[08:52:36] *** Quits: zerotypic (~zerotypic@66.96.192.176) (Ping timeout: 245 seconds)
[08:52:49] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[08:53:02] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[08:53:08] *** Joins: fikran (~fikran@user/fikran)
[08:54:00] *** Joins: ihristov (~ihristov@85.187.46.226)
[08:55:21] <aphysically> apparently yes
[08:56:57] *** jazzy2 is now known as jazzy
[08:57:02] *** jazzy is now known as jazz-o-lantern
[09:00:41] <aphysically> put it in the src/modulename directory
[09:04:48] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:06:34] *** Quits: Lewky (~Lewky@146.70.50.162) (Ping timeout: 265 seconds)
[09:08:20] *** Quits: Abrax (~Abrax@user/abrax) (Remote host closed the connection)
[09:08:31] *** Quits: orbisvicis (~orbisvici@user/orbisvicis) (Quit: Leaving)
[09:08:39] *** Joins: Abrax (~Abrax@user/abrax)
[09:11:06] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[09:13:49] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:4e8a:6c47:97fe:7092)
[09:16:02] *** Joins: etbcf (~etbcf@2001:8a0:7b3a:dd01:2304:1fdd:d447:fe06)
[09:19:01] *** Joins: mei (~mei@user/mei)
[09:23:38] *** Joins: semeion (~semeion@user/semeion)
[09:23:46] <aphysically> this is pretty weird :D https://github.com/GBeauregard/pyffstream/commit/a7627e16728d6439eb5e7aafa17876a84ad27619
[09:24:21] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[09:26:35] *** Quits: InPhase (~InPhase@openscad/inphase) (Ping timeout: 260 seconds)
[09:26:35] *** Quits: tris (emptystrin@irc1.lessbroken.org) (Ping timeout: 260 seconds)
[09:26:47] *** Quits: emerent (~quassel@p200300cd5748555fba27ebfffed28a59.dip0.t-ipconnect.de) (Remote host closed the connection)
[09:26:52] *** Quits: fr_sleepy (~fr_sleepy@209.94.138.128) (Ping timeout: 265 seconds)
[09:27:29] *** Quits: ihristov (~ihristov@85.187.46.226) (Ping timeout: 265 seconds)
[09:27:51] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[09:28:00] *** Joins: emerent (~quassel@p200300cd5748555fba27ebfffed28a59.dip0.t-ipconnect.de)
[09:29:52] *** Joins: fr_sleepy (~fr_sleepy@209.94.138.128)
[09:29:54] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 245 seconds)
[09:30:57] *** Parts: etbcf (~etbcf@2001:8a0:7b3a:dd01:2304:1fdd:d447:fe06) (WeeChat 3.2.1)
[09:31:44] *** Joins: InPhase (~InPhase@openscad/inphase)
[09:31:50] *** Joins: tris (emptystrin@irc1.lessbroken.org)
[09:32:59] *** Joins: mexen (uid495612@user/mexen)
[09:33:04] *** Joins: upsala (~zcb@185.213.155.160)
[09:33:38] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[09:34:08] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[09:35:23] *** Joins: ice9 (~ice9@user/ice9)
[09:35:56] *** Quits: Mumm-Ra (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 245 seconds)
[09:36:14] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:40:39] *** Joins: Tas-sos (~Tas-sos@ppp141237138042.access.hol.gr)
[09:40:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[09:41:07] *** Joins: ExeciN (~ExeciN@user/nicexe)
[09:41:20] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[09:42:56] *** Joins: semeion (~semeion@user/semeion)
[09:44:56] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[09:46:35] *** Quits: seednode1 (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:46:43] *** Quits: mistery (~mistery@96.59.174.9) (Remote host closed the connection)
[09:47:12] *** Joins: seednode1 (~seednode@user/seednode)
[09:51:31] *** Quits: xiongxin (~quassel@113.116.33.66) (Ping timeout: 265 seconds)
[09:53:01] *** Joins: xiongxin (~quassel@113.116.33.66)
[09:54:11] *** Joins: mrwick (~mrwick@user/mrwick)
[09:57:14] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[09:59:12] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[09:59:35] *** Joins: rendar (~rendar@user/rendar)
[10:00:33] *** Quits: sbrown (~sbrown@66.44.16.44) (Quit: Leaving…)
[10:02:12] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[10:02:38] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[10:06:06] *** Joins: NeoCore__ (~neocore@195.200.221.21)
[10:06:25] *** Joins: palasso (~palasso@user/palasso)
[10:06:47] *** Joins: y1n-v1 (~y1n@178.165.201.46.wireless.dyn.drei.com)
[10:08:30] *** Quits: llh (~llh@user/llh) (Read error: Connection reset by peer)
[10:08:59] *** Joins: llh (~llh@user/llh)
[10:10:01] *** Quits: NeoCore_ (~neocore@2a01:cb10:34f:4c00:28f3:460b:4654:7553) (Ping timeout: 265 seconds)
[10:12:30] *** Joins: swensson (~swensson@213.88.131.10)
[10:13:16] *** Quits: Powerhouse6666 (~Powerhous@security.orcacomputers.com) (Ping timeout: 265 seconds)
[10:21:58] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[10:22:26] *** Joins: manti7 (~manti7@176.10.104.94)
[10:22:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[10:22:49] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[10:23:14] *** Joins: kosh (~kosh@user/kosh)
[10:25:29] *** Joins: nips (~nips@abv84.internetdsl.tpnet.pl)
[10:26:09] *** Quits: jazz-o-lantern (~jaziz@172.58.28.108) (Ping timeout: 245 seconds)
[10:26:34] *** Quits: swensson (~swensson@213.88.131.10) (Ping timeout: 256 seconds)
[10:27:58] *** Joins: gusto (~Augustus@109.255.100.54)
[10:30:46] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[10:31:47] *** Joins: chele (~chele@user/chele)
[10:32:34] *** Joins: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net)
[10:33:48] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[10:36:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[10:37:31] *** Joins: Atque (~Atque@user/atque)
[10:38:17] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[10:38:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[10:43:10] *** Quits: guardian (~guardian@planet-d.net) (Remote host closed the connection)
[10:44:39] *** Joins: guardian (~guardian@planet-d.net)
[10:45:59] *** Joins: etbcf (~etbcf@2001:8a0:7b3a:dd01:2304:1fdd:d447:fe06)
[10:48:41] *** Quits: barg (~barg@cpc147258-finc20-2-0-cust20.4-2.cable.virginm.net) (Ping timeout: 264 seconds)
[10:51:32] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[10:52:01] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[10:52:04] *** Quits: etbcf (~etbcf@2001:8a0:7b3a:dd01:2304:1fdd:d447:fe06) (Ping timeout: 252 seconds)
[10:52:12] *** Quits: lyr (~lyr@user/lyr) (Quit: Ping timeout (120 seconds))
[10:52:29] *** Joins: lyr (~lyr@user/lyr)
[10:52:49] *** Quits: apteryx (~maxim@dsl-10-146-244.b2b2c.ca) (Ping timeout: 245 seconds)
[10:53:23] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 265 seconds)
[10:56:46] *** Joins: swensson (~swensson@213.88.131.10)
[10:57:47] *** Joins: noyb (~noyb@user/noyb)
[10:59:04] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[10:59:14] *** Quits: noyb (~noyb@user/noyb) (Quit: leaving)
[10:59:27] *** Joins: noyb (~noyb@user/noyb)
[11:00:38] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[11:02:28] *** Joins: fikran (~fikran@user/fikran)
[11:03:19] *** dcaro_away is now known as dcaro
[11:03:54] *** Joins: VaniaPy (~VaniaPy@ppp046176232235.access.hol.gr)
[11:06:27] *** Joins: jamer05 (~u0_a369@user/jamer05)
[11:06:29] *** Joins: apteryx (~maxim@dsl-152-183.b2b2c.ca)
[11:07:08] *** Joins: semeion (~semeion@user/semeion)
[11:09:30] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[11:12:06] *** Joins: brelod (~me@90.244.150.142)
[11:12:45] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[11:13:25] *** Quits: menace (~someone@user/menace) (Quit: menace)
[11:17:33] *** Quits: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Ping timeout: 265 seconds)
[11:18:12] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:18:31] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-28db-81e5-493b-2536.res6.spectrum.com)
[11:21:44] *** Joins: rsrx (~rsrx@103.225.150.81)
[11:21:56] *** Joins: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[11:22:59] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[11:26:53] *** Quits: niemal (~niemal@user/niemal) (Read error: Connection reset by peer)
[11:26:57] *** Joins: Pixi_ (~Pixi@user/pixi)
[11:26:59] *** Joins: jdmark3 (~jdmark@097-102-095-007.res.spectrum.com)
[11:27:01] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[11:27:06] *** Joins: twofingersneat_ (~twofinger@174-080-036-228.res.spectrum.com)
[11:27:18] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[11:28:15] *** Joins: moose (~moose@user/moose)
[11:28:37] *** Quits: moose (~moose@user/moose) (Remote host closed the connection)
[11:28:56] *** Joins: moose (~moose@user/moose)
[11:29:54] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Ping timeout: 245 seconds)
[11:29:54] *** Quits: jdmark2 (~jdmark@097-102-095-007.res.spectrum.com) (Ping timeout: 245 seconds)
[11:29:54] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 245 seconds)
[11:29:54] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 245 seconds)
[11:29:54] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 245 seconds)
[11:30:19] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 245 seconds)
[11:30:19] *** Quits: helmet33 (~usetarmac@allpc.gmit.ie) (Ping timeout: 245 seconds)
[11:30:24] <AhmedAmerican> am using GMAIL SMTP to send an email which include a url, for some reason that email marked as spam, it's really a simple email. https://bpa.st/5T7Q what could be the reason ?
[11:31:00] *** Joins: Axy (~Axy@user/axy)
[11:35:35] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:50] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[11:36:15] *** Joins: vladoski (~vladoski@2001:b07:add:d406:7f75:4725:8f2:f400)
[11:36:48] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:d210:5680:3fa:ae3d)
[11:38:49] *** Quits: CrypticS_ (~CrypticS_@user/crypticsquared) (Read error: Connection reset by peer)
[11:38:51] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:41:44] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[11:42:05] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[11:47:45] *** Joins: stevea (~stevea@user/stevea)
[11:48:43] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:d210:5680:3fa:ae3d) (Ping timeout: 252 seconds)
[11:52:23] *** Joins: philectro (~quassel@host-85-201-198-48.dynamic.voo.be)
[11:53:04] *** Joins: Meteorhead (~Meteorhea@165.225.205.20)
[11:53:40] *** Joins: arseru (uid515527@user/arseru)
[11:54:40] <arseru> Morning everyone :) let's say I have `from A import B` and I want to deprecate/remove `B`. Is there a way to raise a custom error when a user tries to import `B` and it can't be found?
[11:54:55] *** Joins: theprophet (~theprophe@85.114.228.184)
[11:56:20] *** Joins: niemal (~niemal@user/niemal)
[11:56:29] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[11:57:42] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[11:59:50] <energizer> arseru: what is B - a module or class or what
[11:59:59] <arseru> energizer: a class
[12:00:17] <energizer> arseru: and A is a file or a package?
[12:00:25] *** Joins: plastico (~plastico@neomutt/plastico)
[12:00:29] <arseru> energizer: package
[12:00:54] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:00:57] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[12:01:00] <energizer> where is B defined?
[12:01:11] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:01:57] <VaniaPy> Hello, i have created a custom function in order to conver epoch time to datetime. The output is in this format "Thu Feb 29 02:00:00 2024".
[12:02:07] <VaniaPy> Is there a way to get only the month?
[12:02:24] <VaniaPy> here's my function as well https://bpa.st/JMHQ
[12:02:36] *** Quits: jpic (~jpic@82.142.13.78) (Ping timeout: 245 seconds)
[12:02:53] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[12:03:34] <Repiphany> `json_time != int` isn't checking the type of json_time
[12:03:43] <arseru> energizer: what do you mean? I have a module `A` which contains a class `B`, and instead of a ModuleNotFoundError I would like to know if I can customize that error to indicate to the user what to do
[12:03:56] <energizer> you said it was a package
[12:04:17] <energizer> you said A was a package and B was a class. how is it raising modulenotfounderror?
[12:04:22] *** Joins: jpic (~jpic@bernadette.objectif-libre.com)
[12:04:29] <arseru> energizer: yes, my bad. The actual code is from C.A import B, where C is the package, A the module and B the class
[12:04:51] <arseru> energizer: I don't know it it raises ModuleNotFoundError, I just assumed that
[12:04:58] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:05:25] <arseru> maybe it raises ImportError instead
[12:05:31] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 245 seconds)
[12:07:25] <VaniaPy> Repiphany yeah,it doesn't actually palys any role there,it can be removed
[12:07:42] *** Joins: ganchan (~thomas_w@user/ganchan)
[12:07:52] *** Quits: ganchan (~thomas_w@user/ganchan) (Remote host closed the connection)
[12:08:05] <energizer> arseru: echo 'raise ImportError("c.a.b is deprecated. use foobar instead. See changelog at https://example.com.")' >  c/a/b.py
[12:08:11] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:08:17] *** Joins: sarab (~sarab@103.210.200.98)
[12:08:43] <Repiphany> `import datetime; datetime.datetime.fromtimestamp(json_time).month`
[12:08:56] *** Quits: sarab (~sarab@103.210.200.98) (Remote host closed the connection)
[12:09:31] *** Joins: pluri (~pluri@user/pluri)
[12:09:42] <arseru> energizer: thanks! I'll keep the class and raise that error directly, that makes sense :)
[12:10:31] <energizer> arseru: actually what i said is slightly wrong, but there are a few ways to do this kind of thing
[12:10:52] <hexnewbie> Another interesting change when porting from Python 2 to Python 3: posixpath.commonprefix() no longer works on sets. Moral of the story: do not rely on undocumented behaviour.
[12:11:22] *** Quits: et (~et@user/et) (Remote host closed the connection)
[12:11:29] <energizer> arseru: tbh i would look at whatever trio does
[12:12:20] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[12:13:44] *** Joins: et (~et@user/et)
[12:14:23] <pluri> I am running a flask app on ubuntu, behind gunicorn (the production web server) and the unix tool supervisor (for keeping the app alive & logging). by default, it seems that supervisor isn't logging any of the output that the flask app is printing. I've then added a logger to the flask app, by registering a RotatingFileHandler from the logger package as a logger handler in the flaks app. Despite setting the logging level to DEBUG (lowest setting), the only
[12:14:23] <pluri>  information being printed to the file are manual instructions that I add in the flask app, such as `app.logger.info("message")`. The normal output of the flask app still doesn't show up anywhere in the logs. does anyone have any suggestions? will I have to manually add instructions such as `app.logger.info` throughout the app in order to record something, e.g even for any errors Raised?
[12:14:38] <arseru> energizer: yes, I'm not sure if I want to keep a fake class to raise the error, maybe I'll just let the users figure out by looking at the changelog :P
[12:14:54] *** Joins: helmet33 (~usetarmac@allpc.gmit.ie)
[12:15:27] <arseru> pluri: how are you activating logging?
[12:15:39] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[12:16:19] <pluri> arseru do you mean in the flask app? I am registering the handler with `app.logger.addHandler(RotatingFileHandler)`, then setting the logging level with `app.logger.setLevel(DEBUG)`
[12:16:29] <pluri> but nothing apart from this
[12:16:39] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.68)
[12:18:25] *** Joins: mat001 (~mat001@213.143.69.121)
[12:18:43] *** Quits: Proxysna_ (~Proxysna@62.119.254.142) (Remote host closed the connection)
[12:20:08] <arseru> pluri: have you tried to use `basicConfig` ? https://docs.python.org/3/library/logging.html#logging.basicConfig
[12:20:49] *** Joins: shad (~shad@user/shad)
[12:21:24] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[12:21:26] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Quit: Leaving)
[12:21:39] *** Parts: Inge (~inge@51.15.60.125) ()
[12:22:49] *** Quits: mat001 (~mat001@213.143.69.121) (Ping timeout: 245 seconds)
[12:23:22] *** Quits: NeoCore__ (~neocore@195.200.221.21) (Quit: Leaving)
[12:23:47] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 240 seconds)
[12:24:05] *** Joins: brettgilio7 (~brettgili@x-node.gq)
[12:24:07] *** Quits: byzandula (~byzandula@beerbq.net) (Ping timeout: 240 seconds)
[12:24:25] *** Joins: byzandula (~byzandula@beerbq.net)
[12:24:27] *** Quits: brettgilio (~brettgili@x-node.gq) (Ping timeout: 240 seconds)
[12:24:28] *** brettgilio7 is now known as brettgilio
[12:24:52] *** Quits: Tas-sos (~Tas-sos@ppp141237138042.access.hol.gr) (Read error: Connection reset by peer)
[12:24:54] *** Quits: irrgit (~irrgit@192.241.175.183) (Ping timeout: 245 seconds)
[12:25:19] *** Quits: drogas (~drogas@jump2.jet.uk) (Ping timeout: 245 seconds)
[12:25:21] *** Quits: VaniaPy (~VaniaPy@ppp046176232235.access.hol.gr) (Ping timeout: 265 seconds)
[12:25:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:26:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:27:03] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:27:07] *** Joins: res0 (~zzz@user/res0)
[12:27:24] *** Quits: philectro (~quassel@host-85-201-198-48.dynamic.voo.be) (Ping timeout: 245 seconds)
[12:27:51] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (copper.libera.chat (Nickname regained by services)))
[12:27:57] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:28:02] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[12:28:39] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[12:28:55] *** Joins: shad (~shad@user/shad)
[12:28:59] *** Joins: irrgit (~irrgit@192.241.175.183)
[12:29:26] *** Joins: VaniaPy (~VaniaPy@ppp046176232235.access.hol.gr)
[12:29:52] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[12:31:08] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:d210:5680:3fa:ae3d)
[12:31:39] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[12:31:56] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[12:32:09] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[12:34:03] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:34:15] *** Joins: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net)
[12:35:23] <pluri> arseru wow thanks, it's working with that one. now i need to figure out why it doesn't using the original way
[12:35:56] *** Quits: Axy (~Axy@user/axy) (Read error: Connection reset by peer)
[12:36:58] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[12:37:24] *** Joins: upsala (~zcb@185.213.155.160)
[12:37:41] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[12:37:50] *** Joins: jiffe (~jiffe@mail.nsab.us)
[12:38:14] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[12:39:52] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:d210:5680:3fa:ae3d) (Ping timeout: 252 seconds)
[12:40:06] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[12:41:23] *** Joins: mat001 (~mat001@213.143.69.121)
[12:41:44] <arseru> pluri: basicConfig "activates" the logging system, what you did before only configures it
[12:43:10] *** Quits: vladoski (~vladoski@2001:b07:add:d406:7f75:4725:8f2:f400) (Ping timeout: 252 seconds)
[12:43:35] *** Joins: mike18 (~geri@216.200.232.252)
[12:44:00] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[12:44:02] <mike18> hi is there a tool which detects wrong datatype in last line? https://ideone.com/WUKmPQ
[12:44:19] *** Quits: yourfate (~yourfate@cabal.yourfate.org) (Read error: Connection reset by peer)
[12:44:38] *** Joins: yourfate (~yourfate@cabal.yourfate.org)
[12:45:05] *** Quits: avu (~jan@user/avu) (Ping timeout: 264 seconds)
[12:45:08] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[12:45:19] *** Quits: faceface (~faceface@user/faceface) (Ping timeout: 245 seconds)
[12:45:27] *** Joins: faceface (~faceface@user/faceface)
[12:45:58] <nedbat> mike18: you can add type annotations, and use mypy to find that problem.
[12:46:00] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Read error: Connection reset by peer)
[12:46:02] *** Joins: avu (~jan@user/avu)
[12:46:12] <mike18> add type annotations - how?
[12:46:59] <nedbat> mike18: https://realpython.com/python-type-checking/
[12:47:16] <mike18> oh to specify return type?
[12:47:22] <mike18> def func(arg: arg_type, optarg: arg_type = default) -> return_type:
[12:47:24] <mike18> like that?
[12:47:38] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:d210:5680:3fa:ae3d)
[12:47:58] <pluri> arseru thanks. I feel like I'm missing something, because I was following a popular tutorial closely and not "activating" the logger seems like it would be a serious oversight
[12:49:16] <nedbat> mike18: yes, like that
[12:49:44] <mike18> nedbat: or like that? https://ideone.com/QmKgto
[12:49:54] <mike18> that seems the same - it looks like a comment here...
[12:50:45] <energizer> mike18: the comment is the python 2 way
[12:50:55] <mike18> oh ok - i use python 3
[12:51:23] <mike18> so without that type annotation mypy cant help right?
[12:52:05] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:d210:5680:3fa:ae3d) (Client Quit)
[12:52:12] *** Quits: swensson (~swensson@213.88.131.10) (Ping timeout: 256 seconds)
[12:52:24] <energizer> it can help much more if you have annotations than if you dont
[12:52:34] <mike18> ok
[12:53:28] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:d210:5680:3fa:ae3d)
[12:54:50] *** Joins: et_ (~et@user/et)
[12:55:02] <arseru> pluri: which popular tutorial?
[12:55:19] *** Quits: et (~et@user/et) (Ping timeout: 245 seconds)
[12:55:19] *** et_ is now known as et
[12:55:52] *** Joins: legola (~legola@46.235.101.220)
[12:56:48] <pluri> arseru miguel's popular flask tutorial. in particular this chapter, the code I'm using is in the code box under the heading "Logging to a file" https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-vii-error-handling
[13:00:08] *** Quits: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Quit: Leaving)
[13:00:25] <mike18> energizer: ok
[13:00:27] <arseru> pluri: I prefer these two to understand the logging module: https://blog.guilatrova.dev/how-to-log-in-python-like-a-pro/ and https://blog.urbanpiper.com/understanding-python-logging-library/
[13:00:51] <jamer05> wdym?
[13:01:15] *** Joins: magla (~gelignite@55d40f0d.access.ecotel.net)
[13:01:19] <pluri> arseru ty :)
[13:01:35] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[13:02:10] *** Joins: swensson (~swensson@213.88.131.10)
[13:02:55] <arseru> pluri: also this https://realpython.com/python-logging-source-code/
[13:05:42] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[13:05:55] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[13:06:49] *** Quits: y1n-v1 (~y1n@178.165.201.46.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[13:09:00] *** Joins: zerotypic (~zerotypic@66.96.192.176)
[13:09:01] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[13:09:32] *** Quits: metaace (~metaace@user/metaace) (Remote host closed the connection)
[13:10:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[13:10:38] *** Joins: Tas-sos (~Tas-sos@ppp141237138042.access.hol.gr)
[13:11:27] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[13:11:38] *** Joins: strk (~strk@user/strk)
[13:11:49] *** Joins: fikran (~fikran@user/fikran)
[13:12:00] *** Joins: elding (~nordic-de@p200300c2971f2900866da375155eb72e.dip0.t-ipconnect.de)
[13:12:13] <strk> can I count on a class' __del__ function to be invoked at the end of its scope ?
[13:12:24] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 245 seconds)
[13:15:06] <Peng> Not really. https://docs.python.org/3/reference/datamodel.html#object.__del__
[13:15:07] <Peng> "It is not guaranteed that __del__() methods are called for objects that still exist when the interpreter exits."
[13:16:33] *** Quits: helmet33 (~usetarmac@allpc.gmit.ie) (Quit: Leaving)
[13:16:34] *** Quits: cheater (~Username@user/cheater) (Write error: Connection reset by peer)
[13:16:39] <strk> ouch
[13:16:51] <strk> is this only on exit ?
[13:17:05] <strk> basically I'm trying to find an exception-safe way to do cleanups
[13:17:30] <strk> for a test class, where every test changes the starting data and I want to ensure every test *restores* the original data
[13:17:46] <strk> in case of a test failure I want to make sure the cleanup/restore is still performed
[13:18:01] <strk> so for now I went with a scopedVariable = ScopedBackup()
[13:18:04] <mawk> using context managers?
[13:18:08] <strk> with ScopedBackup.__del__ doing the cleanup
[13:18:12] <mawk> that's your exception-proof way
[13:18:27] <Repiphany> try except finally
[13:18:31] <mawk> with f() as protected_stuff: dangerous_stuff()
[13:18:58] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[13:19:43] <strk> ok, so with ScopedBackup(...) as
[13:19:54] <strk> but sometime I need multiple backups, does with support that ?
[13:20:02] *** Joins: Warped (~Warped@user/warped)
[13:20:16] <strk> with ScopedBackup('a') as scoped1, ScopedBackup('b') as scoped2: dangerous_stuff()
[13:20:48] <strk> also, do I *need* an `as xxx` ? because I don't really need to reference that object, just ensure it's kept alive for the block
[13:21:38] <strk> Repiphany: that'd be verbose, I'm trying to find a not-too-verbose way
[13:21:52] <strk> each test is a function, so the scope already exists (wouldn't really need to create another)
[13:22:49] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.68) (Ping timeout: 245 seconds)
[13:22:49] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:24:41] *** Joins: cheater (~Username@user/cheater)
[13:24:50] <nedbat> strk: for tests, use fixtures (with pytest) or addCleanup (for unittest)
[13:24:51] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[13:25:50] <AhmedAmerican> am using GMAIL SMTP to send an email which include a url, for some reason that email marked as spam, it's really a simple email. https://bpa.st/5T7Q what could be the reason ?
[13:26:09] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[13:26:39] <enoq> hi, I'm running ansible via venv; what do I need to do for things that are not in the venv to execute it?
[13:26:51] <enoq> is venv/bin/ansible enough?
[13:26:56] <nedbat> enoq: yes
[13:27:11] <enoq> ok, so a venv installed executable automatically sets the paths correctly
[13:27:19] *** Quits: lxwulf (~lxwulf@user/lxwulf) (Quit: Leaving)
[13:27:24] <enoq> like it will use the correct site packages
[13:29:13] *** Joins: Ivii (~Ivyy@2001:a61:13f1:cb01:46a6:5d27:eef4:b7ec)
[13:29:18] <nedbat> enoq: yes
[13:29:59] *** Joins: wender (~Wender@189.37.65.210)
[13:29:59] *** Quits: ckdCreations (~ckdCreati@147.55.133.142) (Read error: Connection reset by peer)
[13:30:10] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[13:30:10] <enoq> thank you
[13:30:12] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[13:30:31] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.68)
[13:31:00] <pluri> arseru i really like the first one!
[13:33:51] *** Quits: computeiro (~Wender@189.37.67.226) (Ping timeout: 265 seconds)
[13:34:29] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 245 seconds)
[13:34:37] *** Quits: jamer05 (~u0_a369@user/jamer05) (Remote host closed the connection)
[13:36:05] <astronaut> AhmedAmerican, it may be because Google thinks that any automated way of sending email can absued to spam people, so they mark anything like that as spam.
[13:39:18] *** Quits: mike18 (~geri@216.200.232.252) (Ping timeout: 265 seconds)
[13:40:11] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:40:13] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[13:41:21] *** Joins: cheater (~Username@user/cheater)
[13:43:02] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 265 seconds)
[13:44:38] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:44:58] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (Read error: Connection reset by peer)
[13:48:03] <greyblue9> AhmedAmerican: download the received "original message" and look through the headers. Often they will indicate at what point the mail was suspected spam or if the sender's mail reputation isn't good enough
[13:48:50] *** Quits: jpic (~jpic@bernadette.objectif-libre.com) (Ping timeout: 265 seconds)
[13:50:19] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 245 seconds)
[13:50:20] *** Joins: jpic (~jpic@82.142.13.78)
[13:50:44] *** Joins: Barones (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14)
[13:51:02] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[13:52:55] *** Quits: VaniaPy (~VaniaPy@ppp046176232235.access.hol.gr) (Quit: Connection closed)
[13:55:14] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[13:55:27] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[13:56:34] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[13:57:53] *** Quits: Ivii (~Ivyy@2001:a61:13f1:cb01:46a6:5d27:eef4:b7ec) (Remote host closed the connection)
[13:59:06] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:59:12] *** Joins: vimart (~vimart@85.255.232.192)
[13:59:29] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 245 seconds)
[14:00:35] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[14:05:10] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[14:13:03] *** Joins: semeion (~semeion@user/semeion)
[14:14:08] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:17:45] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[14:19:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2.1)
[14:19:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:20:03] *** Joins: driib8 (~driib@185.195.233.162)
[14:21:53] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[14:21:57] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[14:22:11] *** Quits: driib (~driib@185.195.233.167) (Ping timeout: 265 seconds)
[14:22:11] *** driib8 is now known as driib
[14:22:38] *** dcaro is now known as dcaro_lunch
[14:24:20] *** Joins: metaace (~metaace@user/metaace)
[14:30:17] *** Joins: subho (~subho@2405:201:9001:a805:40f:93eb:9b25:5e74)
[14:31:27] *** Joins: Guest20 (~Guest20@ec2-18-192-137-41.eu-central-1.compute.amazonaws.com)
[14:32:19] <Guest20> HI, I'm looking for a simple size limit cyclic list, there is any prepared solution for it in the builtins or a known package? https://bpa.st/LZSQ
[14:33:36] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Ping timeout: 250 seconds)
[14:33:43] <Repiphany> Guest20: collections.deque(maxlen = 2)
[14:34:34] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[14:34:40] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:ed9e:cfca:43af:b59b)
[14:35:55] *** Quits: subho (~subho@2405:201:9001:a805:40f:93eb:9b25:5e74) (Quit: subho)
[14:36:12] <Guest20> Thank you!
[14:36:40] *** Quits: Guest20 (~Guest20@ec2-18-192-137-41.eu-central-1.compute.amazonaws.com) (Quit: Client closed)
[14:36:44] *** Quits: rsrx (~rsrx@103.225.150.81) (Quit: Leaving)
[14:38:06] <Zweimer> https://i.ibb.co/sb6H8Cd/Unbenannt.png << I would like to make the buttons bigger (slightly higher and wider). How do I do this? Also: This is a widget now. Can I load this widget multiple times into a different Window? Can I even do it in QT Designer?
[14:38:29] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[14:38:37] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 265 seconds)
[14:38:59] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[14:39:06] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:41:41] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[14:43:01] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[14:43:15] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[14:43:24] *** Joins: VaniaPy (~VaniaPy@ppp046176232235.access.hol.gr)
[14:44:58] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[14:45:56] *** Quits: shad (~shad@user/shad) (Ping timeout: 245 seconds)
[14:47:27] *** Quits: moto (~moto@user/moto) (Remote host closed the connection)
[14:47:42] *** Joins: eem (~eem@user/eem)
[14:48:08] *** Joins: aknot (~aknot@2603-900a-1503-17bb-d2ba-460f-4d6b-e996.inf6.spectrum.com)
[14:48:51] *** Joins: moto (~moto@user/moto)
[14:50:05] *** Quits: Teacup (~teacup@user/teacup) (Remote host closed the connection)
[14:50:38] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[14:51:57] *** Quits: gerikson1 (~gerikson@user/gerikson) (Quit: WeeChat 2.8)
[14:53:48] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.68)
[14:55:16] <rendar> why this? For installing Procpath into a dedicated virtual environment pipx is recommended.
[14:56:20] *** Joins: drzacek (~drzacek@130-062-074-080.ip-addr.inexio.net)
[14:56:24] <drzacek> hello there
[14:57:05] <drzacek> I am opening a picture from within a python script (using subprocess.popen), which seems to work fine, BUT!
[14:57:26] <bjs> rendar: that's what pipx does
[14:57:40] <drzacek> I can't scroll between other pictures in that directory. I CAN do it, when I open the picture with double-click in explorer
[14:57:57] <bjs> rendar: I guess procpath is some standalone tool and it's suggesting making a virtualenv just for the tool,  and you can do it manually but `pipx` is a tool that'll do it for you
[14:58:20] <drzacek> what do I need to call to get same functionality from python script?
[14:59:12] *** Joins: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca)
[14:59:44] *** Quits: digilink (~digilink@user/digilink) (Quit: WeeChat 3.2.1)
[14:59:48] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:00:02] <stealth_> not sure why they set `os.open` `mode` to `511` or `0o777` https://docs.python.org/3/library/os.html#os.open
[15:00:02] <rendar> bjs, a virtualenv just for the tool? why? what about i have my project into a my own virtual env and i want to include that library?
[15:00:24] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[15:00:37] <bjs> rendar: because tools have dependencies, and those dependencies might (and often do) clash with random other libraries you might want to use in other places
[15:01:04] <rendar> bjs, oh! so that's basically a venv into another venv
[15:01:08] <bjs> rendar: no
[15:01:13] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:01:32] <bjs> rendar: imagine something like `black` (the code formatting tool).  This is a good example of something you want to install in its own virutalenv.  It has a bunch of dependencies with specific versions.  If you're writing some code and want to run black on it you would probably make two venvs. one for your library/whatever and one specifically just for black
[15:02:04] <rendar> bjs, i see
[15:02:04] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[15:02:08] <rendar> and pipx helps in doing that
[15:02:25] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:02:27] *** Parts: VaniaPy (~VaniaPy@ppp046176232235.access.hol.gr) ()
[15:02:29] <bjs> rendar: there was someone here not that long ago that had this exact problem, they were writing some tool/code that used tensorflow and they wanted to run black on their code
[15:02:44] <bjs> if they tried to install black into the same venv they were using, it all broke because tensorflow and black had incompatible requirements
[15:03:01] *** Quits: darkstardevx (~darkstard@c-24-21-53-33.hsd1.or.comcast.net) (Ping timeout: 245 seconds)
[15:03:06] <bjs> so the solution is to make a second venv just for black.  pipx says "why not just do that for all standalone tools and avoid dependency clashes entirely?"
[15:03:24] <bjs> so that's what it does,  i don't personally use it,  if i want a standalone tool I just make a venv
[15:03:44] *** Joins: darkstardevx (~darkstard@c-24-21-53-33.hsd1.or.comcast.net)
[15:03:53] *** Quits: yggdrasil (~yggdrasil@67-0-17-104.albq.qwest.net) (Ping timeout: 265 seconds)
[15:04:23] <rendar> i see
[15:04:33] <rendar> so pipx will create a venv for *each* standalone tooll
[15:04:42] <bjs> rendar: but the idea is `pipx install sometool` will make a venv in a standard place, pip install that tool into the venv, then make sure any scripts the tool creates is added to the PATH so you can use it
[15:05:05] <bjs> rendar: yes that's the idea
[15:05:06] <bookworm> stealth_: you mean you don't understand what 0o777 means as far as permissions go or why they picked 777?
[15:05:35] <bookworm> they picked 777 as this is the most unrestrictive thing
[15:05:59] <stealth_> bookworm, unrestrictive?
[15:06:03] <bookworm> (it's essentially u=rwx, g=rwx, o=rwx)
[15:06:09] <rendar> bjs, i see
[15:06:12] <bookworm> it doesn't impose any restrictions stealth_
[15:06:14] <stealth_> ya its a alos a major security flaw
[15:06:19] <rendar> bjs, i bet pipx is a standalone tool itself..
[15:06:21] <bookworm> it's not no
[15:06:31] *** Joins: digilink (~digilink@user/digilink)
[15:06:34] <bjs> rendar: yes
[15:06:39] <bookworm> the umask is still applied, setting the umask is done by your shell stealth_
[15:06:51] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[15:07:15] <stealth_> assuming your os/distro is smart enough to add proper umask
[15:07:42] <bjs> rendar: you can install pipx with pip,  and so I assume pipx is written to have minimal conflicting dependencies so itself doesn't cause problems :P
[15:07:48] <bookworm> any that doesn't does not deserve to be called a distro
[15:08:22] <stealth_> bookworm, ya well, what happens if you create file as root?
[15:08:54] <rendar> bjs, indeed
[15:08:54] <bookworm> nothing?
[15:09:03] <rendar> bjs, it seems that was not a bug at all, but a wanted behavior
[15:09:11] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 246 seconds)
[15:09:12] <bookworm> I mean, the file gets created, with the umask applied
[15:09:17] <bookworm> root has a umask just as well
[15:09:26] <bjs> rendar: for procpath or whatever it was called?
[15:09:39] <rendar> nope Task.cancel()
[15:09:45] <bjs> rendar: yes it probably really did mean pipx,  but it was only a suggestion and you can do what y ou want
[15:10:21] <cluelessperson> I think I might need some help figuring out how to implement this.
[15:10:39] <bjs> rendar: oh,  well maybe,  Chris is right you can follow the context/cause chain to get the original CancelledError that had the message.
[15:10:50] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[15:10:56] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[15:10:58] <cluelessperson> I'm making a tool for sorting media, where you can enter into a table,   keyboard shortcut and/or tags,  which map to a destination directory.
[15:11:04] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:11:06] <stealth_> bookworm, its relaying on 3rd party security settings
[15:11:25] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Read error: Connection reset by peer)
[15:11:41] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[15:11:42] <cluelessperson> I'm a little bit confused about how to approach when modifying the table, to check to make sure previous tags/shortcuts don't conflict, and then to allow them to be deleted by row.
[15:11:48] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[15:12:37] <bookworm> stealth_: no, the defaults are. If you are doing anything security sensitive, restrict it. If you aren't, the admin of whoever setup your program knows better than you, so use their umask
[15:13:19] <bookworm> you aren't controlling the user of the file either, or the group for that matter. All of that comes from the OS
[15:13:46] <cluelessperson> I think I just realized I might simply map actions_to_destinations  and cells_to_actions
[15:13:47] <stealth_> bookworm, i have seen systems where umask wasn't restricted, or sometimes its restricted for user but not root user
[15:14:07] <cluelessperson> I can check actions for already being used,  and use cells to actions to remove what's needed.
[15:14:22] <bookworm> stealth_: which systems exactly?
[15:15:16] <stealth_> bookworm, i can't be specific now, since it was a while ago
[15:16:02] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Quit: hyskaru)
[15:16:41] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[15:16:44] <stealth_> cluelessperson, are you using sqlite?
[15:16:51] *** Joins: audio (~audio@2603-8081-1800-1546-2f35-9681-dd0e-8587.res6.spectrum.com)
[15:18:05] <cluelessperson> stealth_, No.  It's a qt table, and the information I get from it is basically, "this cell was edited", and I think I just need to recheck the entire row any time anything is editted.
[15:18:11] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[15:18:38] <stealth_> cluelessperson, just use something something like watchdog to monitor the folder and when file is added, just store/update that info into sqlite
[15:19:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[15:19:21] <cluelessperson> stealth_, So this table is being used to configure   list of tags and/or keyboard shortcut  to a destination directory
[15:19:32] <cluelessperson> I'm not sure how to manage this data together
[15:19:43] <cluelessperson> because if something in the table changes, I basically get, row, or row+col
[15:20:35] *** Quits: lacrymology (~lacrymolo@static-164-4-25-46.ipcom.comunitel.net) (Quit: Lost terminal)
[15:20:52] <stealth_> cluelessperson, its hard to picture what you have implemented, is this online somewhere?
[15:20:57] *** Quits: audiobirb (~audio@2603-8081-1800-1546-9f91-ebec-2821-ecd5.res6.spectrum.com) (Ping timeout: 250 seconds)
[15:21:09] *** Joins: fikran (~fikran@user/fikran)
[15:21:10] <cluelessperson> stealth_, not yet.
[15:21:15] <cluelessperson> I can provide a screenshot
[15:23:06] <cluelessperson> stealth_, https://i.imgur.com/6pLtSWd.png
[15:23:34] *** Joins: thiras (~thiras@user/thiras)
[15:23:43] *** Quits: Allegretto (~allegrett@84-236-85-140.pool.digikabel.hu) (Ping timeout: 252 seconds)
[15:23:43] <cluelessperson> stealth_, I'm having trouble identifying the logic to handle this table ui
[15:25:02] <stealth_> cluelessperson, this some kind of qt thing?
[15:25:18] <cluelessperson> maybe I'll store like:   action_to_destination, cell_to_action, cell_to_destination
[15:25:31] *** Quits: aknot (~aknot@2603-900a-1503-17bb-d2ba-460f-4d6b-e996.inf6.spectrum.com) (Ping timeout: 245 seconds)
[15:25:39] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[15:25:45] <cluelessperson> then if a cell is modified, I can check which actions or destinations it might interfere with, so I can disable them if needed.
[15:25:46] *** Joins: lacrymology (~lacrymolo@static-164-4-25-46.ipcom.comunitel.net)
[15:25:48] <cluelessperson> stealth_, yes.
[15:25:54] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[15:26:19] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[15:26:55] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:27:30] <rendar> bjs, i see, should i close the bug?
[15:27:42] <cluelessperson> stealth_, it's a glorified media viewer and manual file sorting program.     The idea is you configure in the table "triggers" so that you can enter a tag name or keyboard shortcut to trigger an action,   like moving the file to another directory, renaming, or starting an external application for editing.
[15:27:46] *** Joins: Teacup (~teacup@user/teacup)
[15:28:07] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Client Quit)
[15:28:24] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 265 seconds)
[15:28:39] *** Joins: aknot (~aknot@2603:900a:1503:17bb:7226:c48e:3c60:5b92)
[15:29:18] <stealth_> cluelessperson, that could go wrong in so many ways!
[15:29:39] <cluelessperson> stealth_, how so?
[15:29:59] <stealth_> cluelessperson, i dono, just seems like it
[15:30:00] <bjs> rendar: the decision of whether to propagate the cancellation message or not seems like it was a deliberate decision that was made (see the other bpo) but it's not obvious to me which is the best.  I guess it doesn't matter too much as you can follow the __context__ to the root Cancellation and see what the cause was
[15:30:19] *** Quits: astronaut (~annada@103.160.128.31) (Ping timeout: 245 seconds)
[15:30:30] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[15:30:31] <rendar> yeah i got that
[15:30:50] <bjs> rendar: if anything,  it's worth a patch to the docs where it talks about awaiting a cancelled future implying cancellation of the task to say what happens to the cancellation message :)
[15:31:00] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:00] <cluelessperson> stealth_, at its heart, it's  table -> {trigger: action},   then detect triggers and perform their actions.
[15:31:14] <cluelessperson> stealth_, it's the modifying of the table that makes it annoying and complex
[15:31:28] <rendar> bjs, yeah at least it must be specified in the asyncio.Task docs, so what can i do? nothing?
[15:32:31] *** Quits: lacrymology (~lacrymolo@static-164-4-25-46.ipcom.comunitel.net) (Read error: No route to host)
[15:33:45] *** Joins: lacrymology (~lacrymolo@static-164-4-25-46.ipcom.comunitel.net)
[15:34:03] *** Joins: kosh_ (~kosh@user/kosh)
[15:34:12] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 265 seconds)
[15:35:07] <stealth_> cluelessperson, well i dono about this qt thing, but normal database have built in feature to detect on change/modified ... do something
[15:35:33] <bjs> rendar: submit a patch! :)
[15:35:38] *** Joins: Allegretto (~allegrett@178-164-188-250.pool.digikabel.hu)
[15:35:54] <cluelessperson> stealth_, in qt, I basically have "row/cell" changed
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:11] <stealth_> cluelessperson, isn't that event based?
[15:36:15] <cluelessperson> yes
[15:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:04] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[15:37:05] <cluelessperson> so I think I need to map   row/cell to any trigger or action,  so if any are modified, I can remove the previous one
[15:37:09] <cluelessperson> to check it and add a new one.
[15:37:43] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 265 seconds)
[15:38:56] <stealth_> cluelessperson, what happens when you restart this software? it has to rescan and create new keyword/tags?
[15:39:12] <rendar> bjs, uhm, how to properly do that, exactly?
[15:39:16] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 245 seconds)
[15:40:20] <cluelessperson> stealth_, the table of triggers and actions is completely separate from the files being scanned.
[15:40:35] *** Joins: pycurious (~Adium@user/pycurious)
[15:41:19] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Quit: Leaving)
[15:41:24] *** Joins: harleypig2 (thelounge@harleypig.com)
[15:41:45] <stealth_> cluelessperson, you could also store all the images directly into database, and name/tag/... then you can just moving its reference id or something
[15:41:59] <bjs> rendar: I think these days you can just submit a PR https://devguide.python.org/docquality/#helping-with-documentation
[15:42:38] <rendar> ok
[15:42:47] <stealth_> cluelessperson, think of it as a glorified zip file with all the sql features.
[15:42:51] *** Quits: litharge (litharge@libera/bot/litharge) (Quit: restarting)
[15:43:06] *** Joins: litharge (litharge@libera/bot/litharge)
[15:43:19] *** ChanServ sets mode: +o litharge
[15:43:38] *** Quits: harleypig (thelounge@harleypig.com) (Ping timeout: 260 seconds)
[15:43:38] *** harleypig2 is now known as harleypig
[15:45:19] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:46:34] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[15:48:00] *** Joins: thursdaylark (thurstylar@user/thurstylark)
[15:48:26] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 245 seconds)
[15:49:07] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:50:23] <thursdaylark> is there a way to tell if a script was launched using a symlink and what the link's name was? Would be cool if I could do some pseudo multi-call binary stuff with that...
[15:51:08] <The-Compiler> thursdaylark: sys.argv[0] should contain that information
[15:52:31] <Swayze> yeah
[15:52:32] *** Joins: argento (~argent0@168-227-96-51.ptr.westnet.com.ar)
[15:52:38] <Swayze> but you'll need to import sys :p
[15:52:49] *** Quits: argento (~argent0@168-227-96-51.ptr.westnet.com.ar) (Client Quit)
[15:53:08] <The-Compiler> Swayze: how's that a problem?
[15:53:15] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[15:53:39] *** Joins: argento (~argent0@168-227-96-51.ptr.westnet.com.ar)
[15:54:45] *** Quits: thunfisch (~thunfisch@user/thunfisch) (Ping timeout: 250 seconds)
[15:55:39] <stealth_> also have to use something like `os.path.islink` to tell if it is a link or not
[15:55:40] <cluelessperson> stealth_, I'm not storing any image data, and I don't have a database.
[15:56:38] <thursdaylark> works for me. My use-case is pretty narrow, so testing for some or all of sys.argv[0] should do the trick for me
[15:57:14] *** Quits: argento (~argent0@168-227-96-51.ptr.westnet.com.ar) (Client Quit)
[15:57:59] *** Joins: thunfisch (~thunfisch@user/thunfisch)
[15:59:02] *** dcaro_lunch is now known as dcaro
[16:00:17] *** Quits: elkclone (~elkclone@user/elkclone) (Quit: Leaving)
[16:00:18] <Swayze> os.path.realpath(...)
[16:00:21] <Swayze> if its a link
[16:00:57] <Swayze> and u want the actual file
[16:01:01] *** Joins: semeion (~semeion@user/semeion)
[16:02:06] *** Quits: thunfisch (~thunfisch@user/thunfisch) (Read error: Connection reset by peer)
[16:02:12] <InPhase> Note that realpath also expands things like '../foouser' into '/home/foouser', so it alters more than symlinks.
[16:02:33] *** Joins: thunfisch (~thunfisch@user/thunfisch)
[16:02:42] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[16:02:53] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:03:36] *** Joins: gnoirzox (~gnoirzox@user/gnoirzox)
[16:05:11] *** Quits: JanC (~janc@user/janc) (Read error: Connection reset by peer)
[16:05:18] <thursdaylark> hell yeah, this works perfectly: https://paste.xinu.at/eYk1/
[16:06:30] <thursdaylark> basically defining a default set of arguments when git runs it as a pre-push hook and all I have to do is symlink it :D
[16:08:44] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[16:09:27] <thursdaylark> I'll probably massage it into something a little more robust as I develop the script further
[16:09:46] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[16:10:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:10:10] *** Joins: JanC (~janc@user/janc)
[16:10:11] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Read error: Connection reset by peer)
[16:10:37] *** Joins: Wladimir (~doforlove@user/doforlove33)
[16:10:53] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[16:11:14] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[16:11:49] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Remote host closed the connection)
[16:11:50] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[16:12:39] <thursdaylark> here's the wider context for the curious: https://git.thurstylark.com/thurstylark/tlwiki/src/branch/master/tlwiki
[16:13:56] *** Joins: bn_work (uid268505@id-268505.uxbridge.irccloud.com)
[16:16:09] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[16:16:18] *** Joins: sekiro (~sekiro@125-85.iitb.ac.in)
[16:17:03] <sekiro> what's the best way to replace chars in a string in python?
[16:17:33] <sekiro> for example, i want 'a' to 'c' and 'b' to 'c' as well.
[16:17:33] <CrtxReavr> string.replace(old, new)
[16:17:44] <Repiphany> str.translate
[16:18:03] <sekiro> but right now i have to chain it like str.replace('a', 'c').replace('b', 'c')
[16:18:24] <CrtxReavr> Nothing wrong with that.
[16:19:18] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[16:19:22] <grym> you can also re.sub
[16:19:35] <Repiphany> `table = str.maketrans('
[16:19:46] <sekiro> but what if i have more chars like these. isnt that compulationaly expensive? looping each time?
[16:19:47] <Repiphany> `table = str.maketrans('ab', 'cc'); 'abcde'.translate(table)`
[16:20:00] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[16:20:18] <sekiro> Repiphany hmm let me try that
[16:20:44] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Ping timeout: 245 seconds)
[16:20:53] *** Joins: mIk3_09 (~Thunderbi@user/mik3-08/x-2852566)
[16:22:05] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:22:11] *** Joins: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr)
[16:23:11] *** mIk3_09 is now known as mIk3_08
[16:24:00] <sekiro> Repiphany yup, thats exactly what i was looking for. thanks!
[16:24:15] *** kosh_ is now known as kosh
[16:24:32] <sekiro> it's less computations than str.replace() right?
[16:24:45] <sekiro> or it wont matter
[16:24:48] <sekiro> ?*
[16:25:18] <deniska> sekiro: calling str.replace twice creates two copies of a string, translate only makes one copy
[16:25:40] <sekiro> good
[16:25:53] <deniska> sekiro: so it's a bit better, but unless it's on a critical path in a busy loop, probably won't matter much
[16:26:06] <sekiro> i see
[16:30:05] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[16:31:11] *** Quits: wender (~Wender@189.37.65.210) (Remote host closed the connection)
[16:33:19] *** Joins: paul424 (~tom@apn-31-2-54-166.dynamic.gprs.plus.pl)
[16:33:26] *** Quits: arseru (uid515527@user/arseru) (Quit: Connection closed for inactivity)
[16:33:43] *** Joins: computeiro (~Wender@189.37.65.210)
[16:35:20] *** Joins: oldguy (~oldguy@user/oldguy)
[16:35:28] <paul424> >> Namespaces are one honking great idea -- let's do more of those! << from import this # What is it pun for ?
[16:35:35] *** Quits: Jefren (~Jefren@70.35.66.172) (Ping timeout: 265 seconds)
[16:35:43] <grym> paul424: i don't see the pun
[16:35:56] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:36:28] <grym> 'honking great idea' is an idiom for "very good"
[16:36:30] <bjs> paul424: there's no pun
[16:36:32] <grym> but it's not a pun
[16:37:02] <hodapp> idiomatic/figurative, but not a pun
[16:37:22] *** Joins: Jefren (~Jefren@70.35.67.185)
[16:38:29] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 265 seconds)
[16:38:33] <dulanic> If I am doing a os.walk, I only want the very first result. How do I quit the walk once the 1st file is matched? I know I could append all and only pull back [0] but trying to cut down processing time by stopping when the 1st match is found.
[16:38:46] <paul424> so python has a namespaces ? grym ?
[16:38:53] <grym> paul424: python has namespacing, yes
[16:39:07] <paul424> like in c++ namespaces ?
[16:39:13] <grym> it's not a keyword or anything
[16:39:20] <paul424> ahhhhhh
[16:39:20] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (Quit: WeeChat 3.3-dev)
[16:39:24] <grym> you spell `namespace{}` as "make a module"
[16:39:28] <grym> (roughly)
[16:40:07] <stealth_> dulanic, `break`
[16:40:16] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[16:40:33] <Repiphany> dulanic: Break out of the for loop over the os.walk when you find whatever file? I don't understand your question
[16:41:05] <dulanic> thx, it was a beginner type question, i usually done code /w break so not used to using it lol
[16:41:08] <bjs> paul424: every file is a namespace :)
[16:43:21] *** Joins: semeion (~semeion@user/semeion)
[16:43:23] <CrtxReavr> Boy, the docstring for str.translate() is. . . terrible.
[16:44:31] <stealth_> its a good unused feature
[16:45:50] <deniska> I wish there would be str.replace but accepting multiple pairs to replace at once
[16:46:10] <deniska> I guess then you kinda drown in edge cases though
[16:46:13] <bjs> deniska: that's essentially what str.translate tries to be, but with a terrible API
[16:46:23] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[16:46:25] <deniska> bjs: and only a single character at a time
[16:46:41] <bjs> deniska: if you have multi characters then you get terrible terrible questions of overlapping
[16:46:53] <CrtxReavr> deniska, you could write your own function that uses str.replace(), but then you'd just be re-inventing str.translate() I guess.
[16:47:03] <deniska> I'm talking `c_code = pascal_code.replace({'begin': '{', 'end': '}'})`
[16:47:04] <grym> bjs: someone on my team did that just yesterday! and was very, very puzzled
[16:47:16] <deniska> but then yeah, edge cases
[16:47:29] <bjs> deniska: eh at some point, regex!
[16:47:38] <CrtxReavr> deniska, you could make a syscall/subprocess to sed!
[16:48:03] * CrtxReavr remembers being handed perl code to maintain that made syscalls to sed.
[16:48:05] <stealth_> deniska, they could have made it like: `str.replace('ab', 'cd', trans=True)`
[16:48:13] <grym> CrtxReavr: i only do that in dockerfiles :D
[16:49:20] <CrtxReavr> sed -e 's/foo/bar/g;s/baz/buz/g'
[16:49:49] <deniska> CrtxReavr: isn't that almost valid perl already?
[16:50:07] *** Quits: xiongxin (~quassel@113.116.33.66) (Ping timeout: 252 seconds)
[16:50:32] <grym> CrtxReavr: consider the manic glee of `RUN git clone <url> repo && git checkout <sha> && sed -i <pattern> repo/src/foo.h`
[16:51:34] <CrtxReavr> deniska, I never said it was good code. . . or even shitty code. . . it wasn't good enough to be shitty.
[16:52:11] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[16:52:13] *** Joins: shad (~shad@user/shad)
[16:52:26] *** Joins: bloody (~bloody@user/bloody)
[16:54:21] *** Joins: zeden (~zeden@user/zeden)
[16:54:58] *** Joins: alzgh (~alzgh@user/alzgh)
[16:57:19] *** Quits: vimart (~vimart@85.255.232.192) (Quit: WeeChat 2.8)
[16:59:23] *** Joins: Axy (~Axy@user/axy)
[16:59:52] <SnoopJ> bjs, from one terrible API to another? ;)
[17:00:08] <bjs> SnoopJ: from a terrible one to a bad one
[17:00:10] <bjs> :)
[17:01:22] *** Joins: szymon (~ugh@staticline-31-183-189-254.toya.net.pl)
[17:01:26] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[17:01:39] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[17:02:02] * jabberwock got his Pi Zero W ambilight rig working nicely :party_parrot:
[17:02:30] <jabberwock> It's nuts that Phillips Hues has a much lesser capable system for > $600
[17:02:43] <jabberwock> -much
[17:03:05] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:03:19] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:04:29] *** Joins: xiongxin (~quassel@113.116.33.66)
[17:04:37] * iflema - much
[17:06:21] *** Joins: node1 (~node1@user/node1)
[17:06:38] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[17:07:12] *** Joins: srhm (~srhm@user/srhm)
[17:08:19] *** Quits: sekiro (~sekiro@125-85.iitb.ac.in) (Ping timeout: 256 seconds)
[17:10:52] <B33F_1337> jabberwock: check out hubitat, at all?  Compatible with most zigbee and z-wave smart home devices.  community supported.
[17:11:04] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[17:11:27] *** Joins: paravida (~myChateau@user/paravida)
[17:11:34] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[17:12:35] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[17:12:41] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[17:12:48] <jabberwock> Not yet. I'll check that out. Thanks :) This setup is working well though
[17:12:49] *** Joins: Hackerpcs (~user@user/hackerpcs)
[17:13:14] <jabberwock> with the exception of CEC...
[17:13:14] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:13:17] <dulanic> is there any way to copy a file /w copy-on-write?  I'm not seeing a way to do it /w shutil.
[17:13:54] <Yhg1s> dulanic: you may be thinking of a hardlink, but that's not really a copy-on-write file.
[17:14:31] <dulanic> No, file system CoW like BTRFS/ZFS, so both files refer to the same inode, but they are considered independent files
[17:14:45] <jabberwock> ^ TIL
[17:15:50] <SnoopJ> dulanic, are you concerned with writes from your own application, or from *anything*?
[17:16:04] <fakenullie> dulanic: shutil.copyfile?
[17:16:32] *** Joins: CodePoint (~BitShift@96.47.237.10)
[17:16:36] <fakenullie> dulanic: "Changed in version 3.8: Platform-specific fast-copy syscalls may be used internally in order to copy the file more efficiently. See Platform-dependent efficient copy operations section."
[17:17:00] <dulanic> I am concerned /w performance and my FS is BTRFS so I can copy a file in a blink of an eye /w cp --reflink=always in linux, but shututil.copy does the normal copy and it takes MUCH longer
[17:17:19] *** Joins: Mumm-Ra (~Lando-Spa@user/lando-spacepimp)
[17:17:24] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[17:17:30] <dulanic> fakenullie: yeah I looked at the source code, that was mac specific
[17:17:35] <CrtxReavr> Last time I used btrfs, it had horrible, horrible bugs.
[17:17:47] <SnoopJ> dulanic, you might be better served by just invoking `cp`, the stdlib isn't written with a ton of specific OS details (like this) in mind
[17:17:56] <CrtxReavr> Like every time you accessed a file, it's permissions would incriment.
[17:18:02] <jabberwock> https://bugs.python.org/issue37157
[17:18:04] <jabberwock> .t
[17:18:12] <jabberwock> bah. Well there's a feature request for that, 2 years old
[17:18:35] <dulanic> Thats OK im not up for a BTRFS discussion, it works well for me lol. I can revert to the sys call I guess, that should work.
[17:18:40] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:18:54] <stealth_> didn't the core dev for btrfs pass away or something?
[17:19:15] <jabberwock> "death" "or something" ? lol
[17:19:20] <dulanic> not sure, its still actively worked on
[17:19:45] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:20:02] *** Quits: Wladimir (~doforlove@user/doforlove33) (Quit: Leaving)
[17:20:06] <stealth_> or maybe the person was jailed! or it could be a totally different story :)
[17:20:15] *** Joins: Wladimir (~doforlove@user/doforlove33)
[17:20:22] *** Quits: Wladimir (~doforlove@user/doforlove33) (Remote host closed the connection)
[17:20:42] <dulanic> jabberwock: I did see that bug too, didn't seem anything happened with it so i kept looking
[17:21:03] <jabberwock> yeah, no activity since last December...
[17:21:05] *** Joins: Wladimir (~doforlove@user/doforlove33)
[17:21:16] *** Quits: Wladimir (~doforlove@user/doforlove33) (Remote host closed the connection)
[17:21:20] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[17:21:33] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[17:21:46] <jabberwock> if reflink is primarily a BTRFS thing then I feel this would be potential bloat for everyone else
[17:21:47] *** Joins: LabMonkey (~LabMonkey@2602:306:cf62:e270:89f6:212a:87a4:b49e)
[17:22:00] <dulanic> It's also a ZFS thing I'd assume
[17:22:48] <jabberwock> I think if ZFS support gets out of its experimental phase in, say, Ubuntu.. then it's a good case
[17:23:04] <jabberwock> anyhoo
[17:23:37] *** Quits: Jefren (~Jefren@70.35.67.185) (Ping timeout: 252 seconds)
[17:24:05] <SnoopJ> Victor being behind the addition of this feature to shutil seems like a very good sign, but I guess Giampaolo has been working on other things
[17:24:45] *** Quits: swensson (~swensson@213.88.131.10) (Ping timeout: 256 seconds)
[17:24:47] <jabberwock> \o/
[17:24:54] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:6c29:9ab5:af43:15df) (Ping timeout: 260 seconds)
[17:25:14] <jabberwock> I wish I could matrix-download shutil code in my head so I knew where to go to add it
[17:25:24] *** Joins: Jefren (~Jefren@70.35.66.223)
[17:25:26] <jabberwock> It doesn't feel like a huge add but that's ignorance
[17:25:41] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[17:25:59] <SnoopJ> well, the diffs attached to that ticket have some hints :)
[17:26:20] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 265 seconds)
[17:26:21] <dulanic> The new linux coreutils 9 cp defaults now to cp --reflink=auto now so maybe at one point it will just work if shutil uses cp
[17:26:47] *** Joins: Wladimir (~doforlove@user/doforlove33)
[17:26:52] <SnoopJ> it doesn't, it uses fcntl
[17:27:06] <dulanic> Ah ok damn
[17:27:19] <SnoopJ> correction: that patch uses fcntl
[17:27:32] *** Quits: Wladimir (~doforlove@user/doforlove33) (Remote host closed the connection)
[17:28:04] <stealth_> i think there is a flaw in `splice`, and thus `os.sendfile`
[17:28:30] <jabberwock> The author of this is relying on that feature request as well: https://gitlab.com/rubdos/pyreflink
[17:28:40] <jabberwock> dulanic: have you looked into this? It appears to do what you need
[17:28:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[17:28:47] <SnoopJ> shutil.copyfile() uses sendfile(2) if it can and falls back on reading/writing in userspace
[17:29:15] <SnoopJ> but I agree with the discussion on the ticket: this behavior should be a separate function, reflink() seems like a pretty good name for it
[17:29:30] <dulanic> jabberwock: I had not, the one I found was from 2012 so I was like nope. But I will look at that one.
[17:29:53] <jabberwock> 👍
[17:30:28] *** Joins: fikran (~fikran@user/fikran)
[17:30:36] *** Joins: Wladimir (~doforlove@user/doforlove33)
[17:30:36] <stealth_> well its not suppose to make copies but it does, so its no better then read/write
[17:30:37] <jabberwock> SnoopJ: https://gitlab.com/rubdos/pyreflink/-/blob/master/reflink/linux.c
[17:30:41] <jabberwock> seems pretty straight forward
[17:30:48] *** Joins: LiftLeft (~LiftLeft@102.165.16.193)
[17:30:54] <dulanic> pip install fails, I'll have to dig in deeper
[17:30:56] *** Joins: djhankb (~djhankb@208.113.164.68)
[17:31:02] <jabberwock> d'oh
[17:31:08] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[17:31:18] <SnoopJ> jabberwock, yea, pretty much the same approach
[17:31:22] <jabberwock> nice
[17:31:46] *** Quits: Jefren (~Jefren@70.35.66.223) (Ping timeout: 245 seconds)
[17:32:10] <spaceone> is it impossible to have a class with __slots__ which inherits from Exception?
[17:32:47] <stealth_> think __slots__ are local to class
[17:33:43] *** Joins: grooverman (~grooverma@177.95.12.14)
[17:33:46] *** Joins: Jefren (~Jefren@70.35.66.74)
[17:35:55] <SnoopJ> spaceone, yes, it has the same effect as `__slots__ = ('foo', 'bar', '__dict__')` I think
[17:36:03] *** Quits: Wladimir (~doforlove@user/doforlove33) (Quit: Leaving)
[17:37:13] *** Joins: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net)
[17:37:32] *** Joins: edr (~edr@user/edr)
[17:37:38] <Mumm-Ra> I use 'hugg' 'bees' instead of 'foo' 'bar'
[17:38:05] <spaceone> SnoopJ: ok, thanks :-)
[17:38:51] *** Quits: aknot (~aknot@2603:900a:1503:17bb:7226:c48e:3c60:5b92) (Ping timeout: 245 seconds)
[17:40:29] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Ping timeout: 265 seconds)
[17:40:56] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 245 seconds)
[17:42:30] *** Joins: y1n-v1 (~y1n@77.119.208.211.wireless.dyn.drei.com)
[17:44:29] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[17:46:46] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[17:47:50] <jabberwock> Mumm-Ra: You are the ever living
[17:48:20] *** Joins: relight (~relight@user/relight)
[17:48:59] *** Quits: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[17:49:15] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[17:50:00] *** Joins: bloody_ (~bloody@user/bloody)
[17:50:19] *** Quits: paravida (~myChateau@user/paravida) (Ping timeout: 245 seconds)
[17:52:15] <CrtxReavr> I guess plenty of foo, bar, baz, biz, buz, wuz
[17:52:23] <CrtxReavr> I also use wibble & dribble on occasion.
[17:52:26] *** Quits: Jefren (~Jefren@70.35.66.74) (Ping timeout: 265 seconds)
[17:53:19] *** Quits: paul424 (~tom@apn-31-2-54-166.dynamic.gprs.plus.pl) (Quit: Leaving)
[17:53:26] *** Quits: bloody (~bloody@user/bloody) (Ping timeout: 245 seconds)
[17:53:33] *** bloody_ is now known as bloody
[17:54:21] *** Joins: Jefren (~Jefren@70.35.66.232)
[17:55:34] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 252 seconds)
[17:57:28] *** Joins: imakestuff (~imakestuf@197.156.86.132)
[17:58:14] *** Quits: jdmark3 (~jdmark@097-102-095-007.res.spectrum.com) (Quit: Leaving)
[17:58:32] *** Joins: jdmark (~jdmark@097-102-095-007.res.spectrum.com)
[17:59:25] *** Joins: akk (~akk@75.161.146.115)
[18:01:37] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[18:02:24] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[18:03:01] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 245 seconds)
[18:04:13] *** Joins: stdout (~stdout@216.163.21.11)
[18:04:46] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[18:05:44] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 245 seconds)
[18:05:45] *** Joins: majors (~majors@user/majors)
[18:05:58] *** Quits: majors_ (~majors@user/majors) (Ping timeout: 252 seconds)
[18:06:31] *** Quits: Pilate (~pilate@pilate.io) (Ping timeout: 252 seconds)
[18:06:54] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[18:07:59] *** Quits: raph_ael (~raphael@user/raph-ael/x-7806685) (Quit: WeeChat 3.1)
[18:08:07] *** Joins: raph_ael (~raphael@user/raph-ael/x-7806685)
[18:08:57] *** Joins: Pilate (~pilate@pilate.io)
[18:10:41] *** Joins: dudek (~dudek@185.150.236.103)
[18:13:39] *** Joins: mike18 (~geri@217-149-167-230.nat.highway.telekom.at)
[18:13:51] <mike18> hi energizer
[18:13:59] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[18:14:05] <mike18> does that mean i need to add type annotations for all functions / everywhere?
[18:14:09] <mike18> energizer:
[18:14:24] <mike18> so mypy can help
[18:14:26] <dudek> Hi, how does DLL loading works in Python? I get an error ImportError: DLL load failed: %1 is not a valid Win32 application. It needs a standard Windows DLL that is available, so I wonder what do I need to change? Is my PATH variable wrong?
[18:15:16] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[18:15:41] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[18:16:46] *** Quits: Jefren (~Jefren@70.35.66.232) (Ping timeout: 245 seconds)
[18:17:13] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[18:19:00] *** Joins: Jefren (~Jefren@206.253.157.252)
[18:19:54] <meridion> dudek: perhaps, what are you trying to import
[18:20:01] <meridion> searching the internet, gives me the following result:
[18:20:03] <meridion> https://stackoverflow.com/questions/14629818/importerror-dll-load-failed-1-is-not-a-valid-win32-application
[18:21:27] *** Joins: jamiejackson (~jamiejack@207.172.87.34)
[18:29:06] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:29:25] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[18:29:43] <grym> mike18: mypy supports incremental type annotations
[18:30:13] <Mumm-Ra> jabberwock, indeed!
[18:30:40] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[18:34:20] *** Joins: paravida (~myChateau@user/paravida)
[18:34:37] *** Quits: d3sync (~d3sync@130.43.59.21.dsl.dyn.forthnet.gr) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[18:37:48] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[18:39:29] *** Quits: jpic (~jpic@82.142.13.78) (Ping timeout: 245 seconds)
[18:39:38] *** Joins: jpic (~jpic@bernadette.objectif-libre.com)
[18:39:40] *** Joins: Klinda (~superleag@user/klinda)
[18:40:34] <pycurious> grep -R "MyClass()" * | grep -v test |   Question  <— how do i replace all the instances of MyClass() with MyClass.init() - in all these files?
[18:41:07] *** Joins: d3sync (~d3sync@130.43.59.21.dsl.dyn.forthnet.gr)
[18:41:59] *** Quits: CodePoint (~BitShift@96.47.237.10) (Quit: Never gonna give you up, never gonna let you down...)
[18:42:07] *** Quits: Barones (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14) (Quit: Leaving)
[18:44:03] <bjs> pycurious: sed?  but it's a kind of weird operation I'd guess not many tools can do much to help refactor it
[18:44:16] <phy1729> Ask your editor's channel
[18:44:49] <bjs> renaming one method for another might be something that IDEs can do,  but turning a constructor call into a classmethod or whatever call seems less likely to be automatically supported and you'll have to use some text editing tools
[18:47:27] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:48:08] <jinsun> vsocde has a folder wide search and replace (that uses ripgrep in the background, so it really fast), I use that when I have to do replacements like this
[18:49:28] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[18:49:29] <jinsun> but I wpuld not trust this one to go right really, I'd probably do replace one by one and look at each change manually, instead of replace all
[18:49:32] *** Joins: Wladimir (~doforlove@user/doforlove33)
[18:50:44] *** Quits: Wladimir (~doforlove@user/doforlove33) (Quit: WeeChat 3.3)
[18:52:03] *** Joins: DanTheAutomator (~dantheaut@user/dantheautomator)
[18:52:55] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[18:55:13] <stealth_> pycurious, why not just include `init()` inside `__init__(self, ...): self.init()`
[18:56:41] *** Joins: waynew (~wayne@user/waynew)
[18:58:08] *** Joins: MCx (~MCx@user/mcx)
[18:58:20] *** Joins: vimart (~vimart@85.255.232.192)
[18:59:04] *** Quits: paravida (~myChateau@user/paravida) (Ping timeout: 245 seconds)
[19:02:29] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Ping timeout: 264 seconds)
[19:02:56] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[19:03:08] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[19:03:29] *** Joins: zebrag (~chris@user/zebrag)
[19:03:33] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[19:05:07] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[19:05:18] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 250 seconds)
[19:05:53] <ska> Is there any official guidance in regards to installing python packages globally vs in virtual environments?
[19:06:58] <stealth_> ska, linux normally has python installed, you could use that
[19:07:00] *** Quits: shad (~shad@user/shad) (Ping timeout: 265 seconds)
[19:07:02] <mefistofeles> ska: the preferred approach is to use virtual environments and try not to mess with the system packages, as far as I know
[19:07:22] *** Joins: nomic (~nomic@185.192.69.208)
[19:07:49] *** Quits: Jefren (~Jefren@206.253.157.252) (Ping timeout: 245 seconds)
[19:08:15] *** Joins: sbrown (~sbrown@66.44.16.44)
[19:09:34] *** Joins: Bit_MCP (~Bit_MCP@99-22-255-91.lightspeed.frokca.sbcglobal.net)
[19:09:50] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[19:10:07] *** Joins: Jefren (~Jefren@70.35.67.133)
[19:13:12] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:14:01] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[19:14:30] <jinsun> ska: https://packaging.python.org/tutorials/installing-packages/ is the pypa guidance, it has a section about venvs, mostly in favor of them
[19:15:05] *** Quits: Jefren (~Jefren@70.35.67.133) (Ping timeout: 265 seconds)
[19:15:14] *** Joins: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com)
[19:15:42] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[19:15:55] <mehwork> what library should i use for sending POST and GET requests in python3?  Just urllib3?
[19:16:07] <jinsun> requests
[19:16:11] *** Quits: m1dnight (~christoph@188.ip-51-91-158.eu) (Quit: WeeChat 3.1)
[19:16:12] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:16:28] *** Joins: Jefren (~Jefren@70.35.67.24)
[19:16:29] <jinsun> or httpx if you want async too
[19:16:46] *** Joins: m1dnight (~christoph@188.ip-51-91-158.eu)
[19:16:49] <stealth_> ska, I normally custom install python into "/opt" maybe you could do that as well, just allow whatever user/process needs access to it.
[19:17:34] <mehwork> reqeusts can't do async?
[19:17:35] *** Joins: srilyk (~wayne@user/waynew)
[19:17:47] *** Quits: relight (~relight@user/relight) (Quit: Konversation terminated!)
[19:17:59] <mehwork> alright thanks
[19:18:12] <jinsun> yes requests is sync only
[19:18:28] <meejah> there's also "treq" that is "like requests, but for Twisted"
[19:19:07] *** Quits: Mumm-Ra (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[19:20:44] <foobaz212> what does the "i" in `{"foo": i["bar"]}` mean??
[19:20:59] <bjs> foobaz212: presumably it's a variable that was defined on a previous line
[19:21:02] <mike18> grym: whats incremental type annotations?
[19:21:19] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 252 seconds)
[19:21:20] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[19:21:22] <stealth_> foobaz212, variable name
[19:21:23] <foobaz212> bjs nope, it's not a variable I'm seeing it in my logs
[19:21:37] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[19:21:40] <bjs> foobaz212: okay let me rephrase, it's definitely a variable defined on a previous line :)
[19:21:52] <bjs> foobaz212: what "logs"?
[19:21:54] * CrtxReavr just learned the hard way that you can't properly use sys.stderr.write() with ipython.
[19:22:04] <foobaz212> print() logs
[19:22:11] <bjs> foobaz212: can you share the code?
[19:22:23] *** Joins: waynew (~wayne@user/waynew)
[19:22:24] <foobaz212> I can't unfortunately, at work ...
[19:22:45] <bjs> foobaz212: okay well look at the code, there'll be a line defining a variable `i` somewhere.
[19:22:48] <bjs> it has to come from somewhere :)
[19:22:52] *** Quits: magla (~gelignite@55d40f0d.access.ecotel.net) (Quit: Stay safe!)
[19:23:21] <jinsun> mike18: it means mypy will only check the functions that you annotate https://mypy.readthedocs.io/en/stable/getting_started.html#function-signatures-and-dynamic-vs-static-typing
[19:23:21] <CrtxReavr> Should be able to share a snippet with sensitive, or identifying info removed.
[19:23:24] <foobaz212> so I'm printing out a dict. Even if this "i" is a variable, why is it being wedged in the dict??
[19:23:41] <bjs> foobaz212: this is the output of a print?
[19:23:44] <foobaz212> yep
[19:23:49] <bjs> foobaz212: then why are there double quotes
[19:23:54] <bjs> Python doesn't put double quotes in printing a dic.t
[19:24:11] <bjs> It doesn't fit
[19:24:11] <CrtxReavr> How are you printing a dict?
[19:24:16] <foobaz212> yeah it's single quotes, typed it out on a different computer
[19:24:19] <CrtxReavr> 'Cause printing dicts can go really sideways.
[19:24:29] <bjs> foobaz212: okay so we can't see the code,  there isn't an i, and the output isn't the actual output.
[19:24:35] <bjs> foobaz212: It's hard to see how we can help :(
[19:24:41] *** Quits: srilyk (~wayne@user/waynew) (Ping timeout: 245 seconds)
[19:25:45] <CrtxReavr> foobaz212, are you jsut doing: print(your_dict)
[19:26:00] *** Quits: Meteorhead (~Meteorhea@165.225.205.20) (Quit: Client closed)
[19:26:28] <foobaz212> yep
[19:26:46] <CrtxReavr> try: from pprint import pprint ; pprint(your_dict)
[19:26:48] <foobaz212> I'm curious if i"some_string" is a thing, just like u"some_string"
[19:26:58] <bjs> foobaz212: no
[19:27:15] <bjs> foobaz212: it's really hard to help debug without knowing exactly what you did,  what exactly you printed and what the actual output was
[19:27:19] <CrtxReavr> Even pprint can royally F up a complex dict. . . I have a different function I use.
[19:27:51] <mehwork> is http/2 something i should worry about yet, and if so how do you know when to prefer it?
[19:28:09] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:28:34] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[19:28:54] <bjs> foobaz212: like, even something as simple as whether you see single or double quotes and where can tell us a lot and when you get them wrong it really hampers our debugging ability.  Not knowing what the actual object was you tried to print hurts too,  a dict where keys are strings I guess b ut what are the values?
[19:29:10] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[19:29:26] *** Quits: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp) (Read error: Connection reset by peer)
[19:29:49] *** Joins: aknot (~aknot@2603-900a-1503-17bb-317a-91d1-5e52-f805.inf6.spectrum.com)
[19:29:49] *** Joins: ice9 (~ice9@user/ice9)
[19:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[19:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[19:31:29] *** Quits: Tas-sos (~Tas-sos@ppp141237138042.access.hol.gr) (Quit: Lost terminal)
[19:32:00] *** Joins: goldfish (~goldfish@user/goldfish)
[19:32:29] *** Quits: xiongxin (~quassel@113.116.33.66) (Ping timeout: 265 seconds)
[19:32:39] *** Joins: xiongxin (~quassel@113.116.32.131)
[19:33:11] *** Quits: xiongxin (~quassel@113.116.32.131) (Read error: Connection reset by peer)
[19:33:33] <SnoopJ> mehwork, can you elaborate on what "worry" means to you, here? HTTP 1.1 isn't going away anytime soon.
[19:33:36] *** Quits: drzacek (~drzacek@130-062-074-080.ip-addr.inexio.net) (Quit: Leaving)
[19:33:38] <mike18> jinsun: what about functions which i dont annotate and i still want to check - bc it lots of work to annotate functions by hand...?
[19:33:50] <mike18> want to get checked
[19:34:28] *** Quits: dude-x (~textual@pool-108-50-217-42.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[19:34:31] *** Quits: grooverman (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[19:34:33] *** Quits: goldfish (~goldfish@user/goldfish) (Client Quit)
[19:34:36] <jinsun> what will mypy check if you didn't annotate?
[19:34:59] <SnoopJ> well, in strict mode, it yells at you for not annotating, but that's probably not what they're talking about
[19:35:02] *** Quits: Jefren (~Jefren@70.35.67.24) (Ping timeout: 265 seconds)
[19:35:06] *** Joins: dude-x (~textual@pool-108-50-217-42.nwrknj.fios.verizon.net)
[19:35:18] <jinsun> mypy can't assume the types itself (well except Any, and that is just as bad as not annotating)
[19:35:26] *** Joins: grooverman (~grooverma@177.102.119.40)
[19:35:42] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:36:24] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[19:36:32] <mike18> SnoopJ: should i enable strict mode?
[19:36:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[19:37:03] *** Joins: Jefren (~Jefren@70.35.66.124)
[19:37:11] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[19:37:24] *** Quits: asd (~noname@user/asd) (Ping timeout: 245 seconds)
[19:37:27] *** Quits: jpic (~jpic@bernadette.objectif-libre.com) (Ping timeout: 265 seconds)
[19:37:28] *** Joins: sbrown2 (~sbrown@66.44.16.44)
[19:37:59] <jinsun> not if you wanted "incremental typing", but if you just want something to tell you which functions are not annotated then yes
[19:38:02] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[19:38:09] *** Quits: elding (~nordic-de@p200300c2971f2900866da375155eb72e.dip0.t-ipconnect.de) (Quit: Client closed)
[19:38:15] <mike18> jinsun: how to annotate this func? https://ideone.com/CNZWgN
[19:38:18] *** Quits: waxfire (~waxfire@65.119.2.240) (Quit: Ping timeout (120 seconds))
[19:38:19] *** Quits: koltrast_ (~koltrast@h77-53-57-114.cust.a3fiber.se) (Quit: ZNC - http://znc.in)
[19:38:29] <SnoopJ> mike18, if you want to turn on all the optional flags, then yes.
[19:38:30] *** Quits: philipp64|work (~philipp64@174.27.28.163) (Read error: Connection reset by peer)
[19:38:32] *** Joins: waxfire (~waxfire@65.119.2.240)
[19:38:36] *** Joins: jpic (~jpic@bernadette.objectif-libre.com)
[19:38:41] *** Quits: Dan39 (~dan@user/dan39) (Ping timeout: 246 seconds)
[19:38:42] *** Joins: philipp64|work (~philipp64@174.27.28.163)
[19:38:48] *** Joins: fikran (~fikran@user/fikran)
[19:38:57] *** Quits: erhandsome (~erhandsom@user/erhandsome) (Remote host closed the connection)
[19:39:05] *** Quits: bhoman (~bhoman@pool-74-102-26-111.nwrknj.fios.verizon.net) (Ping timeout: 264 seconds)
[19:39:09] *** Joins: erhandsome (~erhandsom@user/erhandsome)
[19:39:10] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[19:39:12] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 268 seconds)
[19:39:22] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[19:39:23] *** Joins: asd (~noname@user/asd)
[19:39:23] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 265 seconds)
[19:39:32] *** Quits: twobitsprite (~twobitspr@45.134.140.18) (Ping timeout: 250 seconds)
[19:39:43] *** Joins: bhoman (~bhoman@pool-74-102-26-111.nwrknj.fios.verizon.net)
[19:39:44] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[19:39:52] *** Quits: Joel (~jjshoe@user/joel) (Remote host closed the connection)
[19:39:54] *** Quits: sbrown (~sbrown@66.44.16.44) (Ping timeout: 245 seconds)
[19:40:08] *** Joins: irrgit_ (~irrgit@192.241.175.183)
[19:40:13] *** Joins: twobitsprite (~twobitspr@45.134.140.18)
[19:40:42] <CrtxReavr> mehwork, it looks like the RFCs related to http2 were written back in 2015. . . since I haven't heard of this before you mentioned it, I'm guessing development/implementation efforts are stalled.
[19:40:55] <CrtxReavr> That said, however, http/2 sounds like a good idea.
[19:40:59] <jinsun> mike18: do you know what type you want f to be? if yes then just put that in the def, see https://www.python.org/dev/peps/pep-0484/#type-definition-syntax
[19:41:18] *** Quits: irrgit (~irrgit@192.241.175.183) (Remote host closed the connection)
[19:41:24] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[19:41:40] <jinsun> mike18: if there is no specific type in mind then maybe you want protocol https://docs.python.org/3/library/typing.html#typing.Protocol
[19:41:40] *** Quits: duri (~mduregon@97.120.139.0) (Ping timeout: 268 seconds)
[19:42:43] *** Joins: Joel (~jjshoe@user/joel)
[19:42:48] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[19:43:02] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[19:43:29] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[19:43:40] <SnoopJ> CrtxReavr, it is not "stalled," no. https://caniuse.com/http2
[19:44:11] <mike18> jinsun: f is an object of a class
[19:44:20] <mike18> defined in a lib
[19:44:39] <jinsun> so then the class is the type
[19:44:44] *** Quits: capn (~capn@user/capn) (Ping timeout: 250 seconds)
[19:45:25] <mehwork> SnoopJ: replace 'worry' with 'prefer'
[19:45:42] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[19:45:46] <jinsun> mike18: and the return type is bool I guess from the `and` so it should be something like `def is_relevant(self, f: TheClass) -> bool:`
[19:46:22] *** Joins: kosh (~kosh@user/kosh)
[19:46:32] <mehwork> SnoopJ: namely in a backend python script that makes requests with httpx, since it has optional http/2 support
[19:46:43] <SnoopJ> mehwork, if you want the tranport-layer improvements it offers. The verbs/etc. are all unchanged from HTTP/1.1, it's mostly about transport.
[19:46:46] *** Quits: Tykling (~tykling@irc.tyknet.dk) (Ping timeout: 260 seconds)
[19:46:53] *** Joins: capn (~capn@user/capn)
[19:47:13] *** Quits: guntbert (~yesitsme@user/guntbert) (Read error: Connection reset by peer)
[19:47:25] *** Quits: imakestuff (~imakestuf@197.156.86.132) (Remote host closed the connection)
[19:47:26] *** Quits: Maikel (~Maikel@130.61.63.136) (Read error: Connection reset by peer)
[19:47:37] *** Joins: guntbert (~yesitsme@user/guntbert)
[19:47:45] *** Joins: Maikel (~Maikel@130.61.63.136)
[19:47:55] *** Quits: infobob (~infobob@python/bot/infobob) (Remote host closed the connection)
[19:47:59] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[19:48:02] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[19:48:09] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (Quit: Ping timeout (120 seconds))
[19:48:11] *** Joins: infobob (~infobob@python/bot/infobob)
[19:48:15] <mike18> jinsun: and what if that class is not public in the lib?
[19:48:19] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (Ping timeout: 252 seconds)
[19:48:21] *** Joins: phlixi_ (~phlixi@aftr-82-135-86-19.dynamic.mnet-online.de)
[19:48:23] *** Joins: darksun (~darksun@user/darksun)
[19:48:27] *** Quits: emerent (~quassel@p200300cd5748555fba27ebfffed28a59.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:48:28] *** ChanServ sets mode: +o infobob
[19:48:29] *** Quits: zettabyte (~zettabyte@user/zettabyte) (Quit: Leaving)
[19:48:30] *** Joins: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl)
[19:48:34] <mehwork> SnoopJ: ok thanks
[19:48:43] *** Joins: zettabyte (~zettabyte@user/zettabyte)
[19:48:46] *** Joins: n000g (~NRG@user/nrg)
[19:49:11] *** Quits: mattmcc (~matt@li807-33.members.linode.com) (Ping timeout: 246 seconds)
[19:49:24] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Ping timeout: 265 seconds)
[19:49:25] *** infobob sets mode: -b *!*eniac@gateway/tor-sasl/eniac
[19:49:32] *** Quits: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) (Ping timeout: 246 seconds)
[19:49:35] *** Quits: zwindl (~abc@user/abc) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[19:49:37] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[19:49:38] <mehwork> SnoopJ: i can't imagine not wanting transport improvements though, so it sounds like as long as i _can_ use it, i should?
[19:49:43] *** Quits: Andrew (~andrew@user/andrewyu) (Remote host closed the connection)
[19:49:56] *** Joins: emerent (~quassel@p200300cd5748555fba27ebfffed28a59.dip0.t-ipconnect.de)
[19:49:56] *** Quits: BytesAndCoffee (~libera@bytes.coffee) (Ping timeout: 250 seconds)
[19:49:57] *** Joins: BytesAndCoffee|a (~libera@bytes.coffee)
[19:50:12] *** Joins: Duckle3 (~Duckle@user/duckle)
[19:50:14] *** Quits: lericson (~lericson@user/lericson) (Ping timeout: 246 seconds)
[19:50:18] *** Joins: abc_ (~abc@user/abc)
[19:50:22] *** Quits: jjhoo (~jahakala@user/jjhoo) (Ping timeout: 265 seconds)
[19:50:29] *** Quits: bbear (~znc@21212.s.t4vps.eu) (Ping timeout: 250 seconds)
[19:50:48] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[19:50:51] *** Quits: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net) (Ping timeout: 265 seconds)
[19:50:54] *** Joins: brabrax (~brabrax@user/brabrax)
[19:50:55] *** Quits: EyeOfJupiter (~EyeOfJ@user/eyeofjupiter) (Ping timeout: 268 seconds)
[19:50:56] <jinsun> mike18: you can import it just for the annotation, or if you don't want to import at runtime then put the import inside `if typing.TYPE_CHECKING:`
[19:50:59] <SnoopJ> mehwork, if you're sure it's supported, it is to my (limited) knowledge strictly an improvement. But if you aren't sure about it, I wouldn't go out of your way for it.
[19:51:07] <mehwork> ok
[19:51:14] *** Quits: rtur (~weechat@mail.rtur.org) (Ping timeout: 250 seconds)
[19:51:20] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Ping timeout: 260 seconds)
[19:51:24] *** Joins: AndrewYu (~andrew@user/andrewyu)
[19:51:35] *** Quits: renrelkha (~renrelkha@user/renrelkha) (Quit: bye)
[19:51:38] *** Quits: Forkk (~forkk@li926-228.members.linode.com) (Ping timeout: 246 seconds)
[19:51:38] *** Quits: omegatron (~some@p5099b1fe.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[19:51:40] *** Quits: nrg (~NRG@user/nrg) (Ping timeout: 250 seconds)
[19:51:41] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 264 seconds)
[19:51:41] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 264 seconds)
[19:51:47] *** Joins: sudorm (~sudorm@126-28-127-151.dsl.ovh.fr)
[19:51:47] *** Quits: anddam (~anddam@user/anddam) (Ping timeout: 250 seconds)
[19:51:47] *** Quits: Duckle (~Duckle@user/duckle) (Killed (NickServ (GHOST command used by Duckle3)))
[19:51:56] *** Duckle3 is now known as Duckle
[19:51:56] *** Quits: neolem[m] (~neolem@2001:470:69fc:105::c675) (Ping timeout: 260 seconds)
[19:51:57] *** Quits: ptival (~ptival@2001:470:69fc:105::41fc) (Ping timeout: 260 seconds)
[19:51:57] *** Quits: berton[m] (~berton@2001:470:69fc:105::ce36) (Ping timeout: 260 seconds)
[19:51:58] *** Quits: esaym153 (~esaym153@net153.net) (Ping timeout: 260 seconds)
[19:51:58] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 265 seconds)
[19:51:59] *** Quits: phlixi (~phlixi@aftr-82-135-86-19.dynamic.mnet-online.de) (Ping timeout: 246 seconds)
[19:51:59] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[19:52:04] *** Joins: nicode (~nic@2607:f2c0:952b:a700:bfee:6ab1:cc4b:b210)
[19:52:17] *** Quits: moldorcoder7 (~moldorcod@37.120.143.29) (Ping timeout: 264 seconds)
[19:52:20] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[19:52:20] *** Joins: Forkk (~forkk@li926-228.members.linode.com)
[19:52:30] *** Quits: allegary (~allegary@apache/committer/gjm) (Ping timeout: 260 seconds)
[19:52:30] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (Ping timeout: 260 seconds)
[19:52:39] *** Quits: d3sync (~d3sync@130.43.59.21.dsl.dyn.forthnet.gr) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[19:52:40] *** Joins: esaym153 (~esaym153@net153.net)
[19:52:55] *** Quits: Wu (~wu@173.red-83-50-192.dynamicip.rima-tde.net) (Ping timeout: 265 seconds)
[19:52:55] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[19:53:12] *** Joins: Dan39 (~dan@user/dan39)
[19:53:19] *** Quits: waynew (~wayne@user/waynew) (Quit: WeeChat 2.9)
[19:53:28] *** infobob sets mode: -o infobob
[19:53:37] *** Joins: rtur (~weechat@mail.rtur.org)
[19:53:42] *** Joins: waynew (~wayne@user/waynew)
[19:53:47] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[19:54:11] *** Joins: moldorcoder7 (~moldorcod@37.120.143.29)
[19:54:14] *** Quits: sharksauce (~sharksauc@user/sharksauce) (Ping timeout: 265 seconds)
[19:54:41] *** Joins: d3sync (~d3sync@130.43.59.21.dsl.dyn.forthnet.gr)
[19:54:57] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:56:31] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[19:56:42] *** Quits: waynew (~wayne@user/waynew) (Client Quit)
[19:58:12] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:58:42] *** Joins: Wu (~wu@173.red-83-50-192.dynamicip.rima-tde.net)
[19:59:43] *** Joins: waynew (~wayne@user/waynew)
[19:59:43] *** Quits: waynew (~wayne@user/waynew) (Client Quit)
[20:00:18] <mike18> jinsun: mypy tells me: error: Returning Any from function declared to return "bool"  for `def is_relevant(self, f: TheClass) -> bool:`
[20:00:59] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[20:01:03] <bjs> mike18: mypy has a mode (enabled by `--strict`) to warn if you return something typed `Any` from a function with a type annotation
[20:01:06] *** Joins: lericson (~lericson@user/lericson)
[20:01:13] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[20:01:21] <mike18> should that be only working?
[20:01:23] <mike18> warning?
[20:01:35] <bjs> mike18: it depends on what your actual code and annotations are :p
[20:01:48] <jinsun> you will have to annotate TheClass and self.local_time also probably
[20:02:13] *** Joins: jjhoo (~jahakala@user/jjhoo)
[20:02:26] <mike18> jinsun: how?
[20:02:26] *** Joins: EyeOfJupiter (~EyeOfJ@user/eyeofjupiter)
[20:02:30] <jinsun> first fix the missing annotations errors
[20:02:48] <jinsun> then look at the actual type errors
[20:03:10] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[20:03:12] <mike18> https://ideone.com/lt4SJn thats the current annotation
[20:03:13] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[20:03:38] *** Quits: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[20:03:47] <bjs> mike18: where is Any coming from then?  Does MyClass have annotations for everything?
[20:03:58] <bjs> and does local_time have annotations?
[20:04:28] *** Joins: ub (~Thunderbi@77.119.205.6.wireless.dyn.drei.com)
[20:04:36] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[20:05:07] <mike18> no annotation at local_time: https://ideone.com/lt4SJn
[20:05:19] <bjs> mike18: well that's probably why mypy is complaining
[20:05:31] <bjs> if you try annotate one function, but not the other it can't check the annotation is correct :)
[20:05:58] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[20:06:33] <jinsun> yeah because local_time is not annotated mypy will assume Any as the return type
[20:06:33] <mike18> bjs: thats lots of work - lots of annotation fixing :) - i basically can annotate everything?
[20:06:45] <bjs> mike18: the point of mypy is to let you annotate little bits at a time
[20:06:50] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[20:07:03] <mike18> bjs: little bits in what sense?
[20:07:04] <jinsun> don't use --strict if you don't want to annotate everything
[20:07:19] <bjs> mike18: but if you annotate a function and then call un-annotated functions inside it, then it can't check the annotation correctly
[20:07:19] *** Quits: dvx (~dvx@185.63.97.64) (Read error: Connection reset by peer)
[20:07:30] <bjs> mike18: really it means bottom->up rather than top->down
[20:07:58] *** Parts: andytoshi (~apoelstra@s66-183-0-205.bc.hsia.telus.net) ()
[20:09:22] *** Joins: Ivii (~Ivyy@2001:a61:13f1:cb01:f0f6:30f3:425:207c)
[20:09:29] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[20:10:39] <aphysically> re: TYPE_CHECKING, I learned a lot about imports yesterday, and the py.typed file (how did I miss that until now??)
[20:10:52] *** Quits: jpic (~jpic@bernadette.objectif-libre.com) (Ping timeout: 252 seconds)
[20:11:00] *** Joins: berton[m] (~berton@2001:470:69fc:105::ce36)
[20:11:10] *** Quits: Vonter (~Vonter@user/vonter) (Quit: WeeChat 3.2)
[20:11:19] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[20:12:10] <CrtxReavr> So. . . if I was writing a bash script and I needed a test to see if I was running in a crontab or not, I'd add a snippet like ``test -t 0 && tty=1``.
[20:12:23] <aphysically> anyway, my goal of satisfying pyright means I'm making pull requests now jinsun :D https://github.com/willmcgugan/rich/pull/1551
[20:12:23] *** Joins: jpic (~jpic@82.142.13.78)
[20:12:44] *** Joins: Wladimir (~doforlove@user/doforlove33)
[20:12:44] <CrtxReavr> That basically test to see if file descripter 0 (stdout) is a terminal.
[20:12:53] <BtbN> CrtxReavr, plenty of other ways to run a script won't have a tty
[20:12:59] <CrtxReavr> Is there a pythonic way to do similar?
[20:13:02] <BtbN> Doesn't cron set some specific env vars?
[20:13:29] <CrtxReavr> BtbN, well. . . it's typically the lack of certain variables. ..
[20:13:41] <Togra> personally what I've done is added an arg to my python scripts, --cron or something like that, and I make sure to personally add that when I add it to cron. but you do have to remember to do that, and depending on what you need, this may not be very viable
[20:13:48] *** Joins: ptival (~ptival@2001:470:69fc:105::41fc)
[20:13:48] *** Joins: Vonter (~Vonter@user/vonter)
[20:13:56] <Togra> oh, well there you go, see if those vars are missing and resort to cron mode if they are?
[20:14:00] *** Quits: vd898 (~vd898@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[20:14:08] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:ed9e:cfca:43af:b59b) (Quit: Client closed)
[20:14:08] <CrtxReavr> But if you want to write something more portable, between specific *nix OSes, or even different Linux distro or distro versions, You can't rely on those.
[20:14:09] <aphysically> mike18: I moved my project from untyped to mypy --strict; I started with functions and return types then mypy will hint you when it's confused about something else
[20:14:15] *** Joins: vd898 (~vd898@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[20:14:32] <BtbN> Yeah, adding a --cron argument seems the most sane approach
[20:14:49] <CrtxReavr> Sounds ghetto.
[20:14:51] <Togra> yeah, makes it way simpler on the code side- you just have to remember it yourself
[20:14:59] <Togra> yeah lol but simple
[20:15:11] <aphysically> jinsun: also I learned pyright can infer return types!! mypy doesn't do that at all. I like annotating the return types for documentation purposes though, but I think the None return annotations are sometimes a bit superfluous
[20:15:55] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[20:16:31] <evidlo> I've got a server using socket.io to publish live data to a client web-interface.  Is there a nice way the client can get the initial data values on connect without waiting for the next publish?
[20:16:48] <evidlo> I think autobahn/WAMP has this, but I remember it being a pretty heavyweight library
[20:16:51] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:17:14] *** Joins: neolem[m] (~neolem@2001:470:69fc:105::c675)
[20:17:30] <jinsun> aphysically: oh I never faced that `__main__` thing, TIL, and yeah that return type thing is one of the main reasons mypy annoys me more than pyright, asks for return type annotations when it is obvious :D
[20:17:45] *** Quits: Bit_MCP (~Bit_MCP@99-22-255-91.lightspeed.frokca.sbcglobal.net) (Quit: Leaving)
[20:18:28] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[20:18:36] *** Joins: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[20:18:45] *** Quits: MCx (~MCx@user/mcx) (Quit: Client closed)
[20:18:54] <aphysically> the pyright maintainer was very patient with helping me understand the __main__ thing
[20:18:58] <no_gravity> Why does str(float(1)) give me '1.0'? Is there a way to convert a floating point value to a string without trailing zeros?
[20:19:12] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[20:19:28] <lesshaste> I want to install https://github.com/fplll/fplll. It says you can do conda install fplll and brew install fplll but I only have pip. Is there a trick to get pip to be able to install?
[20:19:48] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[20:20:12] <jinsun> no_gravity: `f"{float(1):g}"` maybe?
[20:20:29] <no_gravity> jinsun: Holy moly, what does that do?
[20:20:37] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[20:20:57] *** Joins: allegary (~allegary@apache/committer/gjm)
[20:21:15] <jinsun> it will convert to scientific notation instead of displaying the number as it is
[20:21:38] <aphysically> well, only scientific notation sometimes
[20:22:15] <no_gravity> jinsun: Hmm.. that turns 1000000 into 1e+06
[20:22:34] *** Quits: computeiro (~Wender@189.37.65.210) (Quit: Leaving)
[20:22:39] <aphysically> if you never want scientific notation but you still want to trim trailing 0s you can rstrip("0") then rstrip(".") after a f string specifier that specifies decimals
[20:22:42] <CrtxReavr> Thing is. .
[20:22:58] <CrtxReavr> The repr for float(10) has to be ``1.0`` or it's not recognized as a float.
[20:23:09] <CrtxReavr> er - float(1)
[20:23:09] <aphysically> an f - f string
[20:23:32] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[20:23:39] <CrtxReavr> ``1.`` might cause confusion as well.
[20:23:54] <CrtxReavr> f"{1.20:g}"
[20:24:15] <aphysically> f"{float(1):.6f}.rstrip("0") re: no_gravity
[20:24:31] <no_gravity> aphysically: What does that do?
[20:24:37] <stealth_> no_gravity, why do you corvert it to float in the first place?
[20:24:57] <aphysically> converts it to a float with 6 place after decimal points always (so 1 becomes 1.000000)
[20:25:02] <no_gravity> I might use this: def stringy(v): return ('%f' % v).rstrip('0').rstrip('.')
[20:25:10] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[20:25:13] <aphysically> then just rstrips the zeros; adjust the number of decimal points as needed
[20:26:04] *** Joins: ckdCreations (~ckdCreati@147.55.130.32)
[20:26:16] <aphysically> I don't remember if f without decimal points is guaranteed to have trailing zeros
[20:26:27] <aphysically> :thinking:
[20:27:11] <trace987> is there a sytnax like [a for a in b] that does not make a list or generator but a string?
[20:27:36] <aphysically> "".join(a for a in b)
[20:27:40] <KirkMcDonald> trace987: You can achieve that with: "".join(f(x) for x in foo)
[20:27:49] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Quit: Leaving)
[20:28:08] *** Joins: Akuli (~Akuli@dy5sjrlqzr4b---2jx2xy-4.rev.dnainternet.fi)
[20:28:10] <aphysically> I forget what is it called when you do this like max(a for a in b), it's not actually a generator expression it's called something else
[20:28:27] *** Seto_Kaiba is now known as Hunterkll
[20:28:29] <KirkMcDonald> That is a generator expression.
[20:29:03] <KirkMcDonald> It's a special rule in the grammar where you can pass a generator expression to a function without an extra set of parentheses so long as it's the only argument.
[20:29:23] <CrtxReavr> BtbN, Togra, turns out sys.stdout.isatty() is a thing.
[20:29:23] <stealth_> no_gravity, `value = float(1.0); print(value if value % 1 else int(value))`
[20:29:26] <aphysically> yeah for some reason I thought the special rule had a different name than generator expression, but I guess not
[20:29:39] <Swayze> lambda functions?
[20:29:45] <Swayze> anonymous function?
[20:29:48] <BtbN> CrtxReavr, of course it is, but it has nothing to do with cron
[20:29:58] <CrtxReavr> BtbN, it absolutey does.
[20:29:59] <BtbN> Someone running your script on Windows will always be taken for cron probably
[20:30:14] <no_gravity> stealth_: Long story. Trying to put it shortly: Application allows user defined fields where all values are strings. Application also allows formulas like group_weight=individual_weight*group_size. Users do not expect to see different result if they entered individual_weight of "14" or individual_weight of "14.0".
[20:30:18] <CrtxReavr> I don't care. . . I know this one will be run on linux.
[20:30:19] *** Joins: shad (~shad@user/shad)
[20:30:21] <BtbN> Or someone running it in a container
[20:30:33] <BtbN> Or just via any means that don't create a tty
[20:30:42] *** Joins: Payam (~Payam@138.106.57.132)
[20:30:50] <CrtxReavr> That's fine.
[20:30:51] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[20:31:00] <strk> /go 8
[20:31:06] <bjs> BtbN: CrtxReavr: python3 -c "import sys; print(sys.stdin.isatty())" will print True,  but pipe to cat and it'll be False :)
[20:31:12] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-9006-d8f2-cc1e-b078.res6.spectrum.com)
[20:31:18] *** Parts: strk (~strk@user/strk) (WeeChat 3.0.1)
[20:31:19] <CrtxReavr> I just need the script to print output if it's run in a tty, or not print output if it's run in a crontab.
[20:31:25] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Quit: WeeChat 2.8)
[20:31:46] <bjs> all it really tells you is if it's there attached to a terminal with a user able to see and react
[20:32:19] <stealth_> no_gravity, i see, well try out that code, finally you can wrap the whole thing in `str(...)`
[20:32:25] <BtbN> CrtxReavr, as bjs point out, just piping it to a file will also not make it generate any output
[20:32:28] <bjs> uh I meant stdout there
[20:32:35] *** dcaro is now known as dcaro_away
[20:32:36] <BtbN> which is surely a "fun" sideeffect
[20:32:44] <no_gravity> stealth_: I am going with this now: def stringy(v): return ('%f' % v).rstrip('0').rstrip('.')
[20:32:53] <CrtxReavr> bjs, $ python3 -c "import sys; print(sys.stdin.isatty())" | cat
[20:32:53] <CrtxReavr> True
[20:33:10] <nicode> CrtxReavr: couldn't you add a parameter that tells your script not to output anything (e.g. --nooutput)?
[20:33:22] * CrtxReavr facepalms.
[20:33:26] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-3d8e-e9e6-0356-d7f3.res6.spectrum.com) (Ping timeout: 245 seconds)
[20:33:31] <Julian> that's stdin not stdout
[20:33:55] <Julian> python3 -c "import sys; print(sys.stdout.isatty())" | cat -> False
[20:34:05] *** Quits: Ivii (~Ivyy@2001:a61:13f1:cb01:f0f6:30f3:425:207c) (Remote host closed the connection)
[20:34:10] <evidlo> what pubsub frameworks do people like to use?
[20:34:11] <BtbN> for stdin, you'll need to pipe something into it, not out
[20:34:40] <Julian> Yup.
[20:34:42] <bjs> CrtxReavr: what are you facepalming at?
[20:35:09] *** Joins: emf (~emf@2620:10d:c090:400::5:fdfa)
[20:35:36] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:2416:760d:64ce:2c73)
[20:35:50] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:35:52] <bjs> yeah I typo'd it, clearly it's doing stdout'y things anyway
[20:35:57] *** Joins: Macuser (~Macuser@216.30.159.201)
[20:36:23] <bjs> I should've tried to run it locally rather than type shell directly into IRC :P
[20:36:29] *** Quits: Macuser (~Macuser@216.30.159.201) (Client Quit)
[20:36:32] *** no_gravity is now known as world
[20:36:54] *** Parts: world (~no_gravit@user/no-gravity/x-5639427) ()
[20:38:21] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[20:39:47] *** Quits: unbuggedware (~unbuggedw@2602:fe90:300:1a2::40e1:8aec) (Remote host closed the connection)
[20:39:49] <bjs> CrtxReavr: as BtbN says you'll also get the same False output if you redirect to a file (since stdout won't be atty either).  I think nicode's solution is the best (although I prefer -q/--quiet)
[20:42:36] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[20:43:06] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[20:43:33] *** Joins: sharksauce (sharksauce@user/sharksauce)
[20:44:14] *** Joins: fstd (~fstd@xdsl-87-79-83-167.nc.de)
[20:44:55] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[20:45:09] *** Quits: stevea (~stevea@user/stevea) (Quit: Either I or my computer has gone to sleep. ZZZzzz…)
[20:46:45] *** Quits: shad (~shad@user/shad) (Ping timeout: 260 seconds)
[20:46:53] *** Joins: promey (~Promeys@gateway/tor-sasl/promey)
[20:47:03] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[20:48:32] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[20:48:56] *** Quits: Wladimir (~doforlove@user/doforlove33) (Quit: WeeChat 3.3)
[20:48:57] *** Joins: nawcom (~nawcom@bulldadachat.com)
[20:49:11] *** Joins: Wladimir (~doforlove@user/doforlove33)
[20:49:18] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[20:51:34] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:52:08] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[20:54:01] <aphysically> hmm, I'm not convinced by this pyright behavior
[20:54:04] <aphysically>   /home/gregory/Documents/projects/pyffstream/src/pyffstream/encode.py:518:18 - error: Type of "Progress" is partially unknown
[20:54:33] <aphysically> it doesn't like when my constructor doesn't resolve the generic class (a method resolves it later)
[20:54:42] <aphysically> I guess it's the same behavior we talked about before with lists
[20:55:54] *** Joins: Ivii (~Ivyy@2001:a61:13f1:cb01:f0f6:30f3:425:207c)
[20:57:04] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[20:57:29] *** Joins: ano (~ano@user/ano)
[20:59:58] *** Quits: DanTheAutomator (~dantheaut@user/dantheautomator) (Ping timeout: 265 seconds)
[21:00:56] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[21:07:03] *** Quits: emf (~emf@2620:10d:c090:400::5:fdfa) (Read error: Connection reset by peer)
[21:07:28] *** Joins: emf (~emf@2620:10d:c090:400::5:fdfa)
[21:10:19] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[21:11:00] *** Joins: MCx (~MCx@user/mcx)
[21:11:36] <aphysically> jinsun: 625:31 - error: Type of "stop" is unknown (reportUnknownMemberType)
[21:11:41] <aphysically> see here: https://github.com/GBeauregard/pyffstream/blob/main/src/pyffstream/cli.py#L622
[21:11:56] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[21:12:13] <aphysically> I'm uncertain about this complaint when it's an anonymous lambda like this; I think I may be able to just do lambda: listener.stop() here though
[21:13:16] *** Joins: jimklo (~jimklo@2600:6c52:6f00:ae5f:1d93:a562:6898:bcba)
[21:15:00] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:2416:760d:64ce:2c73) (Quit: Client closed)
[21:15:39] <jinsun> yeah you will need annotation there, which means not lambda but a def
[21:15:47] <aphysically> there's an alternative I think
[21:16:07] *** Joins: sandbox (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[21:16:22] <aphysically> a: Callable[[QueueListener],None] = lambda...
[21:16:34] <aphysically> then register a
[21:16:52] *** Joins: Skyfire (~pyon@user/pyon)
[21:17:06] <aphysically> although at that point might as well write a def
[21:17:19] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[21:18:06] <aphysically> I'm going to try lambda: listener.stop() though; I didn't do it before because I wasn't sure how it interacted with the local object listener, but let's try it and see what happens
[21:18:40] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[21:18:45] *** sandbox is now known as Spawns_Carpeting
[21:18:54] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[21:19:02] <SnoopJ> (point of clarification: all lambdas are anonymous, but some are assigned to a name)
[21:20:03] <aphysically> yeah, so atexit.register(lambda: listener.stop()) works fine and avoids the pyright complaint
[21:21:06] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:21:39] *** Wladimir is now known as wladimir
[21:23:32] <jinsun> aphysically: that can be written as just listener.stop now, unnessesary lambda
[21:23:47] *** Joins: Atque (~Atque@user/atque)
[21:23:56] <aphysically> ooooo, you're right!
[21:24:01] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[21:24:27] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[21:24:54] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[21:25:17] <aphysically> I have very much upset pyright strict with the converters pattern in configparser https://github.com/GBeauregard/pyffstream/blob/a7627e16728d6439eb5e7aafa17876a84ad27619/src/pyffstream/cli.py#L787
[21:27:41] <aphysically> oh I guess I can encapsulate that in the dict easily :P
[21:27:54] *** Joins: ElPresidenteP (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net)
[21:27:55] <aphysically>     converters: dict[str, Callable[[str], object]] = {
[21:28:01] *** Joins: jazzy (~jaziz@172.58.19.25)
[21:28:33] <jinsun> that path one is again unnessary lamba I think
[21:28:37] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Quit: ZNC - https://znc.in)
[21:28:41] <jinsun> it could be just pathlib.Path
[21:28:47] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[21:29:01] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[21:29:04] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[21:29:11] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[21:29:25] <SnoopJ> aphysically, why `object` instead of `Any`?
[21:29:37] *** jazzy is now known as jazz-o-lantern
[21:30:08] <aphysically> uhhh 😰
[21:30:34] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:30:54] *** Joins: djhankb (~djhankb@208.113.164.68)
[21:31:09] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[21:31:40] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 252 seconds)
[21:31:53] <aphysically> jinsun: yeah I think you're right! that's a pattern I wasn't watching out for (unnecessary lambdas)
[21:32:00] *** Joins: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it)
[21:32:41] <aphysically> SnoopJ: short answer: because it worked and I want to try to avoid signalling Any when I can
[21:32:58] <aphysically> long answer: this probably is a genuine Any case/
[21:33:03] <SnoopJ> aphysically, object is a *lot* less permissive
[21:33:09] *** Joins: magla (~gelignite@55d40f0d.access.ecotel.net)
[21:34:00] <SnoopJ> e.g. https://bpa.st/FEWA
[21:34:04] *** Quits: vimart (~vimart@85.255.232.192) (Ping timeout: 245 seconds)
[21:34:16] <aphysically> which was fine here? Aren't I sorta looking for the least permissive that fits in with my API?
[21:34:30] <SnoopJ> I don't know what you're looking for, that's why I asked
[21:34:40] *** Quits: ElPresidenteP (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net) (Quit: WeeChat 3.3)
[21:34:49] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:2416:760d:64ce:2c73)
[21:35:21] <aphysically> oh okay; the converters function gets passed into configparser in stdlib, so I'm never calling these functions myself so it's fine to be quite restrictive (I don't think there's any difference that could come up between Any and object at all unless I started using it myself)
[21:35:38] <SnoopJ> "when the type of a value is object, a type checker will reject almost all operations on it, and assigning it to a variable (or using it as a return value) of a more specialized type is a type error"
[21:36:27] <aphysically> I think there's a design pattern where they recommend specifying object for ignored callbacks
[21:37:30] <jinsun> if you are not going to use it then object works
[21:37:47] *** Quits: szymon (~ugh@staticline-31-183-189-254.toya.net.pl) (Remote host closed the connection)
[21:38:12] <jinsun> if you will use it then probably will have to use Any for convenience, or cast to the actual type you wanted later
[21:40:20] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[21:40:20] *** Quits: Ivii (~Ivyy@2001:a61:13f1:cb01:f0f6:30f3:425:207c) (Remote host closed the connection)
[21:40:34] *** Joins: Ivii (~Ivyy@2001:a61:13f1:cb01:eb8d:cfc2:863:4d53)
[21:40:59] *** Joins: srhm (~srhm@user/srhm)
[21:41:00] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[21:41:15] *** Joins: shad (~shad@user/shad)
[21:41:20] <jinsun> it can be done without Any or cast again I think with Protocols but it will be too annoying probably, so in practice I would just cheat and use Any or cast
[21:42:14] <aphysically> okay *now* I've found what I believe to be a problem with pyright maybe
[21:42:19] <SnoopJ> jinsun, why would it be a cheat?
[21:43:37] <jinsun> well it just shuts up the type checker and allows whatver I want even if the type checker thought otherwise
[21:43:56] <aphysically> here https://github.com/GBeauregard/pyffstream/blob/ef3fa6900ab96561feb742bc0a9037952132d12b/src/pyffstream/encode.py#L518
[21:44:21] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:8d71:300d:fa5b:9d34) (Quit: Textual IRC Client: www.textualapp.com)
[21:44:50] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:44:54] <aphysically> The generic type of my Progress class gets narrowed during later method usage and not object creation, so pyright complains on creation here that it couldn't figure it out; I can replace the line with ffprogress = cast(ffmpeg.Progress[str], ffmpeg.Progress()) though and it's fine
[21:44:58] <SnoopJ> right, it's the natural way to indicate "this could be anything"
[21:45:14] *** Joins: ElPresidenteP (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net)
[21:45:15] *** Quits: ElPresidenteP (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net) (Client Quit)
[21:45:24] *** Joins: BSaboia (~bsaboia@177.37.198.74)
[21:45:31] <jinsun> SnoopJ: so if I am expecting anything that has a .foo method, but I am too lazy to define protocol so I use Any, then I'll be able to use .foo, but I'll be able to do .bar as well and the type checker won't save me
[21:45:36] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[21:45:41] <SnoopJ> I'm sure there's some case where you want to annotate `object`, I just dunno what it is
[21:45:56] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[21:46:28] <SnoopJ> jinsun, I'm guessing this Callable can't really know the type ahead of time, so I think protocols are out of bounds anyway
[21:47:50] <evidlo> why is the paho-mqtt interface so weird?  I would expect there to be a client.subscribe_callback function
[21:47:54] <evidlo> instead I have to use paho.mqtt.subscribe and provide all the connection details again
[21:48:03] <mehwork> if all i need to do is parse arguments to my program like --name foo --age 5, should i just use sys.argv or a library like getopt?
[21:48:08] *** Joins: fikran (~fikran@user/fikran)
[21:48:11] <grym> mehwork: argparse
[21:48:19] <mehwork> grym: thanks
[21:48:19] <grym> mehwork: or click, or typer, if you have non-stdlib dependencies.
[21:48:20] <SnoopJ> mehwork, argparse if you want stdlib, click if you want something developer-friendly
[21:48:51] *** Joins: omegatron (~some@p5099b1fe.dip0.t-ipconnect.de)
[21:49:35] <jinsun> aphysically: why is it not always str?
[21:49:40] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[21:49:53] <SnoopJ> getopt is okay as well if you prefer the more verbose usage, but don't mess about with sys.argv directly unless you have a really specific reason you need to
[21:49:58] <aphysically> like why did I change to to AnyStr? jinsun?
[21:50:01] *** Joins: alzgh (~alzgh@user/alzgh)
[21:50:28] <aphysically> it's a class that monitors the output of a ffmpeg subprocess output; it works fine in both bytes and str mode
[21:50:31] <evidlo> ok, apparently it's called 'message_callback_add', but no tutorials use it for some reason
[21:50:48] <aphysically> the generic of what kind of class it is gets resolved by what kind of stream IO it gets sent
[21:50:53] *** Parts: sudorm (~sudorm@126-28-127-151.dsl.ovh.fr) (Leaving)
[21:52:13] <aphysically> I've thought about making it a context manager in a way that could allow the specification of the IO on construction but it's hard because I need to setup the socket in advance to pass ffmpeg the correct arguments, which happens before the Popen
[21:52:32] <jinsun> hmm can't you make the StaticEncodeVars class generic too?
[21:53:03] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[21:53:08] <trace987> how do I create my own decorator
[21:53:24] <grym> trace987: write a function that takes a function and returns a function
[21:53:35] <bjs> trace987: a decorator is just a function, so you can write a `def`. The only requirement is that it must accept a single argument, the function to decorate.
[21:53:35] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[21:53:46] <SnoopJ> yea, you don't even *have* to return a function (although this is common)
[21:53:52] <jinsun> taking the function is the import part, it can return weird sttuff if you want
[21:53:56] *** Joins: _xor (~xor@72.49.199.147)
[21:53:56] <trace987> how do I create a decorator that does nothing
[21:54:00] *** Joins: anddam (~anddam@user/anddam)
[21:54:01] <jinsun> s/import/important
[21:54:06] <SnoopJ> `def do_nothing(func): pass`
[21:54:07] <bjs> trace987: `def my_deco(f): pass`
[21:54:11] <Julian> return f
[21:54:13] <Julian> is probably what you mean
[21:54:22] <aphysically> jinsun: :O I guess, I never really thought about it
[21:54:45] <bjs> trace987: more common is to do something like `def my_deco(f): <do something to f>; return f`
[21:54:58] <bjs> trace987: or to even `def my_deco(f): <make a new_func>; return new_func`
[21:55:08] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[21:57:14] *** Joins: Narrat (~omnius@p200300df5f0b351206ea56fffe2e7cdc.dip0.t-ipconnect.de)
[21:58:49] <trace987> how do I give that custom decorator an optional paramater that shall do nothing
[21:58:56] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[21:59:34] <SnoopJ> give the decorator function a parameter, and do nothing with it
[21:59:49] <trace987> I tried that, but that does not work
[22:00:17] <SnoopJ> err sorry, you want to write another layer of function nesting: `@decorate(42)` is calling decorate(42), then using the result of that as a decorator
[22:00:37] <SnoopJ> `def decorate(arg): def _decorator(func): ...; return _decorator`
[22:01:42] <SnoopJ> https://bpa.st/Z6LQ
[22:02:35] <trace987> thx works
[22:02:43] <SnoopJ> trace987, does it make sense?
[22:02:52] <trace987> ywa
[22:02:54] <trace987> yes
[22:05:49] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[22:06:19] *** Quits: akk (~akk@75.161.146.115) (Ping timeout: 252 seconds)
[22:09:37] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:2ca0:dd77:79c9:aedb)
[22:09:39] *** Joins: Syzygy (~Syzygy@dynamic-2l4rd2xn2u83wabpag-pd01.res.v6.highway.a1.net)
[22:10:50] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:d210:5680:3fa:ae3d) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:11:36] *** Joins: CodePoint (~BitShift@96.47.237.10)
[22:12:04] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[22:14:23] <mehwork> with httpx, how can i force the content-type to be json?
[22:14:32] <mehwork> on a post request
[22:15:56] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[22:16:13] <grym> set the relevant header
[22:16:13] <mehwork> the docs don't seem to mention it, so i thought maybe it was implicit when i passed data but i'm getting an error from an api saying it's not set to the right content-type of json
[22:16:22] *** Joins: _xor (~xor@72.49.199.147)
[22:16:23] <mehwork> ok let me see how to do that
[22:16:24] <SnoopJ> mehwork, set the Content-Type header
[22:16:29] <mehwork> thanks
[22:16:41] <SnoopJ> `httpx.post("wherever", headers={"Content-Type": "application/json"})`
[22:16:51] <grym> lacking that content-header sent me into a minor 23:00 panik.jpg the other day, actually
[22:16:52] <mehwork> i see, easy, i like that
[22:17:06] <grym> as fastAPI requires it when you curl -d @something.json
[22:17:28] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[22:18:51] <sveinse> I'm so puzzled: I have some py2 code which returns true on isinstance(value, (StringType, UnicodeType)), but false on isinstance(value, (str, unicode)). What should I be looking for. value is of type 'str'
[22:19:48] <mehwork> why do some api's want a POST request when you're not even sending any data. Shouldn't it be a GET request
[22:19:53] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Quit: Leaving)
[22:20:11] <Julian> sveinse: type str seems not possible, so something's up
[22:20:14] <Julian> sveinse: double check you're correct on that?
[22:20:19] <energizer> sveinse: you have a type(x) == str but isinstance(x, (str, unicode)) is false?
[22:20:24] <energizer> that seems impossible yeah
[22:20:32] <Julian> sveinse: isinstance(value, (StringType, UnicodeType)) can be true if you have a UserString crazy thing
[22:20:37] <Julian> but not if it's a str.
[22:20:43] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[22:20:45] <Julian> (the second part will be true if it's a str)
[22:21:15] <energizer> uh theoretically i guess the type repr could be 'str' without it actually being a str
[22:21:36] <energizer> so type(x) is str
[22:21:49] <Julian> well yeah or the metaclass's __eq__ could return an object which has __bool__ False but which has repr True
[22:21:56] <energizer> so `type(x) is str` would rule that out
[22:21:58] <Julian> but we're ignoring batcrazy insane ideas no :D
[22:22:07] <sveinse> hmm, yeah type(value) == str is not true. But type returns an object that prints as <type 'str'>... Hmm fishy
[22:22:15] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[22:22:18] <Julian> ok guess we were wrong to ignore batcrazy insane ideas
[22:22:27] <Julian> sveinse: find who wrote it, take their keyboard away
[22:22:31] *** Joins: shad (~shad@user/shad)
[22:22:37] <energizer> sveinse: `type(x) is str` ?
[22:23:16] <sveinse> energizer: false, so its not str
[22:24:39] <sveinse> I think it's this gnosis thing that does trixy-crazy stuff. E.g. who use eval and exec to serialize/pickle an xml-format into mem?
[22:25:27] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[22:26:58] *** Quits: wladimir (~doforlove@user/doforlove33) (Quit: WeeChat 3.3)
[22:27:06] <sveinse> Because of that, this project has been the hardest project I've ever had to port to py3
[22:28:06] <SnoopJ> mehwork, that's a question for whoever wrote the API
[22:28:12] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[22:28:28] <aphysically> almost fully pyright strict compliant, only one last error confusing me https://github.com/GBeauregard/pyffstream/blob/afdba52ff86609177da29e857094fc66add3b94a/src/pyffstream/encode.py#L247
[22:28:45] <pycurious> def f(**kw): print(a,b) —> d = {"a": 10, "b":20} —> f(d) - does not get a. How can I make this work?
[22:29:00] <SnoopJ> pycurious, I think you want `f(**d)`
[22:29:06] <pycurious> f(**d) does not find a,b either
[22:29:16] <SnoopJ> find?
[22:29:19] <aphysically> https://bpa.st/5RDQ
[22:29:25] <pycurious> NameError: name 'a' is not defined
[22:29:34] <Repiphany> print(kw['a'], kw['b'])
[22:29:39] <SnoopJ> oh, yes, that^
[22:29:43] <energizer> pycurious: def f(a,b,**kw): print(a,b)
[22:29:50] <SnoopJ> if you had `def f(a, b)` then what you're trying to do would work
[22:29:51] <aphysically> I don't understand where pyright is getting the dict[unknowns] here
[22:30:02] <pycurious> energizer: I need to change a,b at will using kw, that is the reason i 'm trying this
[22:30:28] *** Quits: grooverman (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[22:30:49] <SnoopJ> pycurious, then you need to access them as Repiphany showed, by indexing the dict that collects the kwargs
[22:31:13] *** Joins: grooverman (~grooverma@177.102.119.40)
[22:31:21] <bjs> pycurious: `def f(a,b): ...` then `f(**d)` will get a and b passed
[22:31:42] <bjs> pycurious: `def f(**kwargs)` can have any keyword *arguments* but they'll all be turned into the "kwargs" variable containing a dictionary
[22:32:01] <bjs> pycurious: it's important here to make a distinction between the arguments (the things in the call) and the parameters (the things in the `def`).
[22:35:06] *** Quits: Akuli (~Akuli@dy5sjrlqzr4b---2jx2xy-4.rev.dnainternet.fi) (Ping timeout: 245 seconds)
[22:35:15] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[22:35:20] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[22:36:07] *** Joins: zeden (~zeden@user/zeden)
[22:36:31] <jinsun> aphysically: when you do `self.filevals["tags"] = {}` I guess then it decides type of `self.filevals["tags"]` is dict[unknown, unknown], which is a bit weird that it is treating the dict key like a variable, but good in most cases I guess
[22:37:55] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[22:38:25] <aphysically> yeah I guess, and I can just set that to Any or dict[str,any] or whatever
[22:38:57] *** Quits: omegatron (~some@p5099b1fe.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[22:39:16] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[22:39:21] <aphysically> or cast it rather!
[22:39:53] *** Joins: Auron (~Auron956@user/auron)
[22:40:48] *** Quits: MCx (~MCx@user/mcx) (Quit: Client closed)
[22:42:28] *** Joins: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net)
[22:42:34] <aphysically> I still feel like the behavior is a bit Odd given the Any, but whatever it's fixed. These Any are used because this is json and I haven't otherwise fully typed the typeddict yet
[22:42:41] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[22:43:28] <mehwork> does Click not work with async functions? Or do i have to do something special for it to work
[22:43:30] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:44:00] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 260 seconds)
[22:44:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:44:18] <SnoopJ> mehwork, an asynchronous entrypoint would be pretty weird. Can you tell us more about what you're trying to do?
[22:44:24] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:8d71:300d:fa5b:9d34)
[22:44:35] <grym> mehwork: there's a fork https://pypi.org/project/asyncclick/
[22:44:39] <grym> (but i have not used it)
[22:45:25] <SnoopJ> oh, I guess if you're trying to await something in the function that's been click'd that would make sense enough
[22:45:53] <grym> looks like asyncclick's maintained by the trio team
[22:45:56] <grym> so that's a good omen
[22:46:06] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[22:47:24] <mehwork> thanks, sounds like i only need that if i'm insisting on using an async main function? So i can probably just make my main function sync, just to get the args and then call async functions from there?
[22:47:56] <grym> well, start your event loop or whatever
[22:48:01] *** Joins: upsala (~zcb@185.213.155.160)
[22:48:10] *** Quits: Syzygy (~Syzygy@dynamic-2l4rd2xn2u83wabpag-pd01.res.v6.highway.a1.net) (Ping timeout: 252 seconds)
[22:48:55] <sveinse> yeah, you don't get to do many things in main while the async event loop runs
[22:49:16] <grym> this async fork looks like it silently does that for you
[22:49:25] <grym> but i'm really not sure how that'd act
[22:49:25] <SnoopJ> mehwork, yep, that would be the normal way to do it
[22:49:26] *** Joins: xa0s (xa0s@205.166.94.30)
[22:49:50] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[22:49:54] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[22:50:01] *** Quits: xa0s (xa0s@205.166.94.30) (Client Quit)
[22:50:19] <trace987> what does tuple[str, int] mean
[22:50:37] <grym> trace987: it means a 2-tuple with a string and an int in it in that order
[22:50:46] <SnoopJ> ("like this", 42)
[22:51:11] <sveinse> grym: I think the asyncclick decorator starts the event loop so the async main function is a task
[22:51:19] <aphysically> jinsun: okay, the only pyright strict errors left are the errors in the rich library that I filed a PR fixing, an unnecessary isinstance check with int here https://github.com/GBeauregard/pyffstream/blob/67fe7fae35a6159f94bfc0efcc212b71fe74ff75/src/pyffstream/ffmpeg.py#L93 (I'm not convinced I want to "fix" this instead of ignoring it), and a complaint about a singledispatch function that I'm not
[22:51:21] <aphysically> sure I want to fix either (except by not using singledispatch)
[22:51:36] <trace987> how do I set this for dict for key and value
[22:51:50] <aphysically> the way singledispatch interacts with pyright and mypy strict together makes it more annoying to use than it's worth maybe
[22:52:39] *** Joins: canurabus (~canurabus@ip-24-156-182-35.user.start.ca)
[22:54:23] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[22:54:30] <jinsun> that isinstance thing is really ncessary if you don't use a typechecker, so args can be something else other than those 3 types you annotated
[22:54:36] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[22:55:04] <trace987> how do I set type for key and value for a dict
[22:55:17] <aphysically> that's why I'm not convinced it should be "fixed"
[22:55:29] <jinsun> and obviosuly the type checker doesn't like that you even thought about not using a type checker :D
[22:55:56] <aphysically> (how dare I?)
[22:56:03] <jinsun> trace987: dict[Tkey, TValue]
[22:57:13] <aphysically> this is the singledispatch it doesn't like (but that manages to satisfy mypy --strict) https://github.com/GBeauregard/pyffstream/blob/67fe7fae35a6159f94bfc0efcc212b71fe74ff75/src/pyffstream/ffmpeg.py#L628
[22:57:22] *** Quits: trashbird (~trashbird@user/trashbird) (Quit: what)
[22:57:39] <aphysically> it's self contained luckily enough for playing with
[22:57:48] <aphysically> just needs import re I guess
[22:57:56] <grym> trace987: or typing.Dict[keytype, valtype]
[22:57:59] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.2.1)
[22:59:21] *** Joins: trashbird (~trashbird@user/trashbird)
[23:00:13] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[23:00:19] *** Joins: DanTheAutomator (~dantheaut@user/dantheautomator)
[23:03:19] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[23:04:44] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[23:05:12] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[23:06:24] *** Joins: vimart (~vimart@85.255.232.192)
[23:07:28] <aphysically> jinsun: I'm not even sure the best workaround for the isinstance thing, an unnecessary type: ignore for mypy throws an error :D
[23:07:52] <jinsun> type: ignore[pyrightSpecificThing]
[23:09:25] *** Joins: ElPresidenteP (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net)
[23:09:28] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Quit: WeeChat 2.8)
[23:09:54] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 245 seconds)
[23:09:58] <aphysically> doesn't work, mypy --strict still complains
[23:10:09] <aphysically> I need a # type: ignore # type: ignore for mypy :D
[23:10:46] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[23:11:26] <jinsun> oh hmm I thought it worked
[23:11:56] <mehwork> do most companies that use python use mypy these days or is it hard to say how much its used?
[23:12:22] <energizer> mehwork: a lot of people use mypy. it's hard to say what fraction tho.
[23:13:22] <jinsun> aphysically: well I guess you will have to just do what pyright says, it is really unnessary if you keep using pyright
[23:14:01] <aphysically> I can imagine this as part of an external API in which case it's a bit unsatisfying, but yeah
[23:14:11] *** Joins: nomic (~nomic@185.192.69.208)
[23:14:14] *** Joins: Syzygy_ (~Syzygy@178-190-79-0.adsl.highway.telekom.at)
[23:14:59] <Syzygy_> I get an error calling pip on an ubuntu based google virtual machine
[23:15:17] <SnoopJ> mehwork, the most recent JetBrains survey found that ~71% of respondents use type hinting at least sometimes https://www.jetbrains.com/lp/python-developers-survey-2020/#DevelopmentTools
[23:15:27] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[23:15:29] <SnoopJ> But I doubt it's "most" at an organization level
[23:15:31] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 245 seconds)
[23:15:32] <Syzygy_> https://bpa.st/OM3A
[23:15:49] <Syzygy_> Can someone tell me what's going on here?
[23:16:10] <SnoopJ> Syzygy_, the pip you're trying to run is 3.6+, but you have python 3.5
[23:16:16] <grym> Syzygy_: do you have python 3.5 or lower
[23:16:26] <grym> derr it's right there
[23:16:27] <grym> heh
[23:17:08] <SnoopJ> this is unfortunately something that can happen if you upgrade pip from a much older version...like the ones that Debian/Ubuntu seem to insist on shipping
[23:17:12] <grym> Syzygy_: upgrade your python version to a supported one, or downgrade your pip to one that still supports your deprectated interpreter
[23:17:27] <jinsun> aphysically: it won't complain in asserts apparently, https://github.com/microsoft/pyright/issues/236
[23:17:44] <SnoopJ> yea, you'll want to upgrade your pip to a version no greater than whatever last supported 3.5, or use a more modern interpreter (preferably the latter since 3.5 is now obsolete)
[23:17:47] <jinsun> aphysically: so change the elif to else and assert inside that
[23:18:59] <stealth_> Syzygy_, python f-string was added in 3.6, you are running python 3.5
[23:19:14] <jinsun> aphysically: and just rely on the fact that mostly people don't disable the asserts I guess
[23:19:36] <aphysically> yeah it's only disabled if you do -O or that option or whatever, but if you're doing that you're probably deploying your app and not developing it
[23:19:39] <aphysically> so it's (probably) okay
[23:21:04] <Syzygy_> thanks for the info. For some reason I can't find anything above 3.5 on apt....
[23:21:31] <SnoopJ> Syzygy_, is this 16.04?
[23:21:35] <sveinse> I found my culprit. futurize added "from builtins import str" is _some_ .py file so, `type(mystr) is str` returned variable results depending on where mystr were defined :( Well, good I found it
[23:22:54] *** Joins: semeion (~semeion@user/semeion)
[23:23:46] <Syzygy_> SnoopJ, yes (I swear I set it to a more recent version... I guess I'll kill the server and start again from scratch
[23:23:51] *** Joins: junktext (~junktext@77.247.181.214)
[23:24:02] <SnoopJ> Syzygy_, you probably want to use the deadsnakes PPA, then, if you want it to be managed by apt.
[23:24:24] <SnoopJ> but upgrading to 18.04 or 20.04 would be a good idea for other reasons, heh.
[23:24:29] <Syzygy_> shouldn't be an issue on ubuntu lts 20+ right?
[23:24:51] <Syzygy_> not too concerned about long term viability of the server. but yes, I'll upgrade
[23:25:08] <SnoopJ> right, Ubuntu ships 3.6+ past right where you are
[23:25:10] <aphysically> jinsun: I think my feeling is this check makes sense for self contained code bases, but not necessarily for libraries intended to be used by other people who may or may not be using type checkers
[23:25:22] <aphysically> and in that case it probably makes sense to turn off reportUnnecessaryIsInstance
[23:26:08] *** Quits: Balzy (~Balzy@host-82-48-132-164.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[23:26:25] <SnoopJ> Syzygy_, for development purposes, I usually just install my own interpreter on Debian/Ubuntu systems, generally using pyenv. It's often hard to reason about the ones they ship officially, and they very much are not targeting developers working on anything but the distribution itself
[23:26:29] <jinsun> aphysically: well another solution is to accept object
[23:26:41] <SnoopJ> (but that is hopefully starting to change)
[23:27:21] <aphysically> jinsun: indeed, I already did that for the repr and stuff, but that muddies the autodoc :D
[23:27:47] *** LabMonkey is now known as Mechanismus
[23:29:09] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:29:17] *** Joins: jetchisel (jetchisel@user/jetchisel)
[23:29:43] <jinsun> aphysically: maybe another solution, https://github.com/agronholm/typeguard
[23:30:06] *** Joins: Balzy (~Balzy@host-79-21-15-58.retail.telecomitalia.it)
[23:30:32] *** Joins: Unode (~Unode@194.94.44.220)
[23:30:36] <trace987> where can I read how to set the types of namedtuple
[23:30:46] <Unode> Hi everyone. I would like to write tests for code that interacts with a series of APIs. To handle and match the result of the code I found https://github.com/syrusakbary/snapshottest but in order to avoid hammering the APIs every time I want to run tests, are there any popular frameworks or approaches people use these days besides mocking?
[23:30:48] <grym> trace987: it's just a tuple
[23:31:04] <grym> trace987: so probably like a tuple? i haven't tried, i don't need what namedtuple offers very often
[23:31:06] <OMGOMG_> aphysically: were you thinking of list comprehension
[23:31:12] <SnoopJ> best advice: don't use namedtuple, use dataclass instead
[23:31:19] <jinsun> trace987: use a dataclass or https://docs.python.org/3/library/typing.html#typing.NamedTuple
[23:31:40] <SnoopJ> huh, I forgot there was a dedicated annotation for it. Gross!
[23:32:13] <Unode> As not all APIs are HTTP based, it would be convenient to be able to cache the result of the API requests in some form. I was considering using pickle but would like to not reinvent the wheel.
[23:32:23] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[23:32:26] <DanTheAutomator> Unode, I think VCR is what you're looking for.
[23:33:08] <DanTheAutomator> Thought it might be HTTP focused.
[23:33:17] <DanTheAutomator> *Though
[23:33:25] <Unode> DanTheAutomator: VCR looks promising but HTTP only it seems. Any idea of something a bit more generic?
[23:33:27] <aphysically> I'll satisfy pyright for now the way it suggests and think about it some more
[23:33:59] <Unode> I'm already using pytest so something that plays well with it would be perfect.
[23:34:25] *** Parts: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it) ()
[23:34:38] *** Quits: Jefren (~Jefren@70.35.66.124) (Ping timeout: 265 seconds)
[23:34:44] <Syzygy_> everything is going wrong... now I can't even create a new server
[23:34:54] *** Joins: vicfred (~vicfred@user/vicfred)
[23:34:54] *** Quits: ElPresidenteP (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 245 seconds)
[23:35:23] <aphysically> jinsun: well now the only thing left is the singledispatch, but I'm really inclined to just give up on singledispatch https://bpa.st/PFGQ
[23:35:36] *** Quits: junktext (~junktext@77.247.181.214) (Quit: junktext)
[23:35:39] <trace987> https://pastebin.com/QsAcqzRd
[23:35:40] <infobob> https://bpaste.net/A7OA (repasted for trace987)
[23:35:43] <trace987> is typing right?
[23:35:49] <DanTheAutomator> Unode, Can't think of a more generic library at the moment. Sorry.
[23:36:02] <Unode> oh just ran into https://smarie.github.io/python-pytest-harvest/ this looks like it might work. Thanks DanTheAutomator, your suggestion pointed me in that direction
[23:36:14] *** Joins: Jefren (~Jefren@70.35.67.187)
[23:36:25] <aphysically> oops there's a leftover debug line in there
[23:36:28] <Unode> still checking if I can save this to a file to reuse across runs
[23:37:45] <aphysically> also I can remove the is None/is not None for regex matches, the docs specifically mention the match objects are always true and recommend regular truthy checking of them so there's no need to use the "no match = None" behavior
[23:38:10] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[23:38:10] <trace987> I do not believe that my typing is right
[23:38:26] <aphysically> me for the past 2 weeks ^
[23:38:30] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 265 seconds)
[23:38:47] <Unode> hum.. no pytest-harvest is for a different use-case. The interface looked like it could work though. A decorator around fixtures.
[23:39:29] <SnoopJ> Unode, are you trying to get mock responses "automatically" with this recording strategy?
[23:40:10] <tk> I asked earlier but this got ignored so I'll try this timezone instead.
[23:40:22] <Unode> SnoopJ: yes
[23:40:26] <tk> I think I found a bug in cpython's ssl module. connect_ex on EINPROGRESS does not clear _sslobj, connect on EINPROGRESS does clear _sslobj, this means that you have to call connect twice but connect_ex only once to get a connection up (normally on a non blocking connect you would call connect and on EINPROGRESS you would select the socket for writing before considering the connection established.
[23:40:27] <tk> What is the correct behaviour?
[23:41:05] <Unode> SnoopJ: What I was thinking of doing now is to have a fixture that does a call to the API but then cache it to disk. If the file exists on disk, use that instead of calling the API.
[23:41:29] *** Quits: jancoow (~jancoow@user/jancoow) (Quit: The Lounge - https://thelounge.chat)
[23:41:35] <jinsun> aphysically: didn't understand the problem pyright has really, but `@num.register(float)` instead of `@num.register` seems to work
[23:42:43] <aphysically> oh indeed, and that still satisfies mypy
[23:42:55] <Unode> SnoopJ: any thoughts?
[23:43:11] <aphysically> but yes I had trouble making heads or tails of what pyright's actual problem with it is
[23:43:30] <SnoopJ> Unode, that sounds pretty reasonable to me
[23:43:48] *** Joins: junktext (~junktext@77.247.181.212)
[23:44:38] <Unode> I've been hitting google for a while now but I'm clearly not using the right keywords. Everything I get is in a completely different direction
[23:44:55] <Unode> and it feels like something too obvious for someone to not have created something like it
[23:45:27] <aphysically> okay, with your help I've done it jinsun :D, fully pyright strict *and* mypy strict (except for the bug in the library rich)
[23:45:45] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 265 seconds)
[23:45:50] *** Quits: Jefren (~Jefren@70.35.67.187) (Ping timeout: 260 seconds)
[23:46:00] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[23:46:14] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.106)
[23:46:15] <Julian> nedbat: ewjoachim seems to be doing some interesting things with GH actions + coverage
[23:46:21] <Julian> nedbat: just putting it on your radar if you haven't noticed it already
[23:46:29] <Julian> nedbat: e.g. https://github.com/ewjoachim/coverage-comment-action
[23:47:20] *** Quits: moldorcoder7 (~moldorcod@37.120.143.29) (Ping timeout: 265 seconds)
[23:47:41] *** Joins: Jefren (~Jefren@70.35.67.141)
[23:49:01] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[23:49:21] <aphysically> I'll probably add pyright to my CI linting checks if/when upstream rich decides to land my PR
[23:50:50] *** Quits: CodePoint (~BitShift@96.47.237.10) (Quit: Never gonna give you up, never gonna let you down...)
[23:51:11] <jinsun> aphysically: oh the pyright specific thing was `# pyright: reportUnnecessaryIsInstance=false`
[23:51:34] <aphysically> oh
[23:52:42] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[23:52:58] <aphysically> I kinda want to use typealias and such now before I move to 3.10, I guess I can add typing_extensions as a dependency
[23:53:00] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.106) (Ping timeout: 265 seconds)
[23:53:35] *** Joins: arseru (uid515527@user/arseru)
[23:53:38] *** Joins: Oddity (Oddity@user/oddity)
[23:55:33] *** Joins: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it)
[23:55:36] <stealth_> whats the main reason for using typing?
[23:55:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[23:56:01] <bjs> stealth_: to catch dumb errors early on
[23:56:09] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 245 seconds)
[23:56:15] <bjs> and as extra documentation and editor aids
[23:56:20] *** Joins: codebam (~codebam@user/codebam)
[23:56:33] <stealth_> i should have tagged aphysically
[23:56:37] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:8d71:300d:fa5b:9d34) (Quit: Textual IRC Client: www.textualapp.com)
[23:56:40] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Remote host closed the connection)
[23:57:11] *** Quits: aknot (~aknot@2603-900a-1503-17bb-317a-91d1-5e52-f805.inf6.spectrum.com) (Ping timeout: 245 seconds)
[23:57:15] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[23:57:26] *** Quits: mike18 (~geri@217-149-167-230.nat.highway.telekom.at) (Remote host closed the connection)
[23:57:27] <stealth_> bjs, still, since its not restricted it isn't that effective
[23:57:29] *** Joins: fikran (~fikran@user/fikran)
[23:57:37] <aphysically> what bjs said, and also I want to do it quite strictly until I'm comfortable typing in all situations
[23:57:39] <bjs> stealth_: what do you mean, restricted?
[23:58:13] <aphysically> maybe they mean runtime enforced?
[23:58:22] <bjs> idk, that's why I asked :P
[23:58:26] <aphysically> :P
[23:58:31] <stealth_> bjs, as in when using mypy it will raise error, but when user run it, there is no error
[23:58:40] <bjs> stealth_: sure, it's a tool for a developer rather than a user
[23:59:04] <jinsun> is it actually enforced at runtime in any language?
[23:59:36] <stealth_> it just becomes useless
[23:59:38] <bjs> stealth_: think about tools like `black` or `pylint` or something,  the developer runs the tools to make developing easier in some sense
[23:59:41] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
