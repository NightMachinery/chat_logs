[00:00:17] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:02:25] *** Joins: gentooclimax (~gentoocli@58.69.205.77.rev.sfr.net)
[00:03:32] *** Quits: gentooclimax (~gentoocli@58.69.205.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:03:54] *** Joins: gentooclimax (~gentoocli@2a02-8440-6341-d680-1384-ccf1-8c0d-72a5.rev.sfr.net)
[00:12:27] *** Quits: galik (galik@gateway/vpn/airvpn/galik) (Quit: Leaving)
[00:12:55] *** Joins: galik (galik@gateway/vpn/airvpn/galik)
[00:19:12] *** Quits: joilerv (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:19:17] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[00:19:51] *** Quits: v8IbXNTl (~v8IbXNTl@host-204-118-069-229.dhcp.fewpb.net) (Quit: v8IbXNTl)
[00:21:12] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:22:38] *** gentooclimax is now known as climax
[00:23:24] *** Joins: Tokamak (~Tokamak@172.58.188.93)
[00:28:12] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46)
[00:30:24] *** climax is now known as gentooclimax
[00:32:26] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[00:32:53] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:33:00] *** Quits: magla (~gelignite@55d45b98.access.ecotel.net) (Read error: Connection reset by peer)
[00:33:02] *** Joins: geli (~gelignite@55d45b98.access.ecotel.net)
[00:34:06] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:34:44] *** Quits: WarauSalesman (~sjw@69.206.48.64) (Remote host closed the connection)
[00:35:56] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[00:37:28] *** Joins: Tokamak (~Tokamak@172.58.188.93)
[00:38:40] *** Joins: chozorho (~chozorho@2601:146:300:c30::be2f)
[00:42:31] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:44:22] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:47:27] *** Quits: gentooclimax (~gentoocli@2a02-8440-6341-d680-1384-ccf1-8c0d-72a5.rev.sfr.net) (Quit: Konversation terminated!)
[00:47:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:48:33] *** Joins: gentooclimax (~gentoocli@2a02-8440-6341-d680-1384-ccf1-8c0d-72a5.rev.sfr.net)
[00:48:43] *** Quits: gentooclimax (~gentoocli@2a02-8440-6341-d680-1384-ccf1-8c0d-72a5.rev.sfr.net) (Client Quit)
[00:51:57] *** Joins: gentooclimax (~gentoocli@2a02-8440-6341-d680-6756-ab06-5e9e-cbc8.rev.sfr.net)
[00:53:05] *** Quits: gentooclimax (~gentoocli@2a02-8440-6341-d680-6756-ab06-5e9e-cbc8.rev.sfr.net) (Read error: Connection reset by peer)
[00:53:26] *** Joins: gentooclimax (~gentoocli@2a02-8440-6341-d680-6756-ab06-5e9e-cbc8.rev.sfr.net)
[00:56:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[00:56:42] <LordKalma> !fact
[00:56:43] <nolyc> LordKalma: There are no signed, unsigned, short, or long bool types or values.
[00:56:58] *** Quits: gentooclimax (~gentoocli@2a02-8440-6341-d680-6756-ab06-5e9e-cbc8.rev.sfr.net) (Client Quit)
[00:57:26] <InPhase> long bool.  Exactly how true do you want it to be?
[00:58:14] *** Joins: gentooclimax (~gentoocli@2a02-8440-6341-d680-1384-ccf1-8c0d-72a5.rev.sfr.net)
[01:03:01] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:09:06] *** Joins: seninha (~seninha@user/seninha)
[01:09:11] *** Joins: markong (~kvirc@213.146.188.203)
[01:13:36] <Alipha> << sizeof(unsigned long bool);
[01:13:37] <geordi> error: 'unsigned' specified with 'bool'
[01:23:35] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:25:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[01:25:04] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[01:25:39] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[01:29:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[01:40:52] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[01:41:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:51] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:51] *** ChanServ sets mode: +v npaperbot
[01:44:51] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:45:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[01:48:13] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[01:56:13] *** Quits: gentooclimax (~gentoocli@2a02-8440-6341-d680-1384-ccf1-8c0d-72a5.rev.sfr.net) (Quit: Konversation terminated!)
[01:57:49] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:02:24] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:40f4:5e94:181e:e4a)
[02:02:24] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:40f4:5e94:181e:e4a) (Changing host)
[02:02:24] *** Joins: RoKenn (~RoKenn@user/rokenn)
[02:06:11] *** Joins: leonarth (~leonarth@user/leonarth)
[02:10:04] *** Joins: joilerv (~joilerv@135.129.250.144)
[02:12:25] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[02:13:25] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[02:17:06] *** Quits: joilerv (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:17:44] *** Joins: joilerv (~joilerv@135.129.250.144)
[02:17:45] *** Quits: joilerv (~joilerv@135.129.250.144) (Client Quit)
[02:21:50] *** Joins: Tokamak (~Tokamak@mobile-166-170-29-59.mycingular.net)
[02:37:36] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d180:c928:f791:f80d) (Ping timeout: 250 seconds)
[02:41:14] *** Quits: Tokamak (~Tokamak@mobile-166-170-29-59.mycingular.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:45:22] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:48:44] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:48:48] *** Joins: hexingb (~hexingb@111.32.64.60)
[02:49:05] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Remote host closed the connection)
[02:51:33] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[03:05:40] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[03:05:40] <AmR> Did GetSystemFirmwareTable function need any lib ?
[03:18:07] <great_taste> why is std::sort complaining that my type doesn't have a copy constructor?
[03:18:52] <cbreak> AmR: you implemented that function yourself?
[03:19:33] <great_taste> I thought std::sort could operate on movable types
[03:19:42] <cbreak> great_taste: it's probably because of std::swap fallback: https://en.cppreference.com/w/cpp/algorithm/sort
[03:19:52] <cbreak> https://en.cppreference.com/w/cpp/named_req/ValueSwappable
[03:20:13] <cbreak> it should work on movable types just fine
[03:20:41] <cbreak> { std::vector<std::unique_ptr<int>> vup; std::sort(vup.begin(), vup.end()); }
[03:20:42] <geordi>  
[03:20:53] <cbreak> yep, no complaints :)
[03:23:52] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:24:28] <great_taste> { std::deque<std::unique_ptr<int>> vup; std::sort(vup.begin(), vup.end()); }
[03:24:29] <geordi>  
[03:33:15] <cbreak> great_taste: you'll have to pastebin the exact error message :)
[03:33:18] <smallville7123> how do i convert an iterator into an integer?
[03:34:58] <smallville7123> or rather given an iterator how do i find it's location in the std::string in which it belongs to
[03:37:47] <AmR> cbreak: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemfirmwaretable
[03:37:50] <great_taste> { std::deque<S> vup; std::sort(vup.begin(), vup.end()); } struct S { S()=default; S(S &&)=default; S(const S &) = delete; };
[03:37:50] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:37:51] <geordi> error: no match for 'operator<' in '__first._Safe_iterator<deque<S>::iterator, deque<S>, random_access_iterator_tag>::<anonymous>._Safe_iterator<deque<S>::iterator, deque<S>, bidirectional_iterator_tag>::<anonymous>._Safe_iterator<deque<S>::iterator, deque<S>, forward_iterator_tag>::operator*() < __first._Safe_iterator<deque<S>::iterator, deque<S>, random_access_iterator_tag>::<anonymous>._Safe_iterator<deque<S>::iterator, deque<S>, bidirectional
[03:39:06] <AmR> cbreak: It's in sysinfoapi.h
[03:41:26] <cbreak> AmR: it says it requires Kernel32.dll
[03:41:28] <great_taste> { std::deque<S> vup; std::sort(vup.begin(), vup.end(), [] (auto &&lhs, auto &&rhs) { return lhs.i < rhs.i; }); } struct S { int i; S()=default; S(S &&)=default; S(const S &) = delete; };
[03:41:28] <geordi> error: use of deleted function 'constexpr S& S::operator=(const S&)'
[03:41:37] <great_taste> that's what I get
[03:41:37] <cbreak> AmR: at the bottom of that page
[03:41:57] <cbreak> great_taste: your type must be move-assignable as well as move-constructible
[03:42:47] <great_taste> hmm
[03:43:28] <great_taste> { std::deque<S> vup; std::sort(vup.begin(), vup.end(), [] (auto &&lhs, auto &&rhs) { return lhs.i < rhs.i; }); } struct S { int i; S()=default; S(S &&)=default; S & operator=(S &&)=default; S(const S &) = delete; };
[03:43:29] <geordi>  
[03:43:52] <great_taste> cbreak ok so I needed to be explicit about it. THanks
[03:44:46] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[03:45:43] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:46:11] *** Joins: c4017w (~c4017@209.52.68.8)
[03:46:51] <cbreak> you need to implement it
[03:47:26] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[03:47:28] <cbreak> the default implementation of move-assign is likely not sufficient, if you needed to implement your move constructor
[03:48:22] <great_taste> I had to write the explicit default because my type has an unique_ptr within
[03:48:38] <great_taste> and that was causing errors in the past
[03:48:44] <great_taste> that's why I wrote the =default things
[03:49:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[03:49:53] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:50:21] <smallville7123> why does replacing a string that is longer than then given end cause the current iterator to be invalidated?
[03:50:34] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:51:22] <smallville7123> eg   iterator.input.replace(match.begin, match.end, string);     where begin = 1, end = 8, current = 8, string size = 9
[03:51:36] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:54:59] <smallville7123> ot rather, cause both match.begin, match.end, and current iterators to become invalidated
[03:55:57] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[03:56:29] <smallville7123> position: 8      match begin position: 1     match end   position: 8    string length       : 9
[03:56:29] <smallville7123> position: 34904708305737     match begin position: 34904708305730      match end   position: 34904708305737
[03:57:12] <smallville7123> if the string length is 8 then these remain the same as     position: 8      match begin position: 1     match end   position: 8
[03:57:25] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:58:38] *** Quits: sigma_ (~sigma@164.215.248.82) (Ping timeout: 250 seconds)
[03:58:55] <cbreak> smallville7123: what's iterator.input?
[03:59:11] <smallville7123> std::string
[03:59:32] <cbreak> so you're calling https://en.cppreference.com/w/cpp/string/basic_string/replace?
[03:59:36] <smallville7123> yes
[04:00:04] <cbreak> this will invalidate iterators if the string has to grow
[04:02:33] <smallville7123> how do i recover the iterators?
[04:03:59] <cbreak> not at all.
[04:04:12] <cbreak> invalidated iterators may not be used for anything
[04:04:52] <smallville7123> would i do something like      auto old = iterator.current() - iterator.input.cbegin();      replace... ;    iterator.setCurrent(iterator.input.cbegin() + old);
[04:05:05] <hnOsmium0001[m]> you can calculate the index for the iterators and do begin() + idx afterwards
[04:05:17] <cbreak> smallville7123: your code makes 0 sense
[04:05:40] <cbreak> if iterator.input is a string, then iterator itself has nothing to do with your problem
[04:05:57] <cbreak> and has no role in the solution either
[04:06:03] <hnOsmium0001[m]> (calculate the index with `std::distance(str.begin(), it)`)
[04:06:27] <smallville7123> cbreak: iterator simple contains and manages iterators for the given std::string
[04:06:50] <cbreak> smallville7123: that makes no sense at all.
[04:06:56] *** Quits: hexingb (~hexingb@111.32.64.60) (Ping timeout: 256 seconds)
[04:07:00] <cbreak> iterators don't need to be managed.
[04:07:01] <hnOsmium0001[m]> here is a tip for asking questions: rename your variables so that people can see immediately what's going on, and remove as many abstractions as possible
[04:07:07] <cbreak> they need to be used, then discarded.
[04:07:25] <hnOsmium0001[m]> nobody needs to understand or see what's going on in your actual code, all we need is a Minimum Reproducible (or Undestandable) Sample
[04:07:39] <smallville7123> it is basically a string iterator that iterates the string
[04:07:40] <cbreak> you can't keep them, they'll be invalidated when ever you operate on the string in any way that invalidates iterators
[04:07:50] <smallville7123> how about this instead?
[04:07:53] <cbreak> smallville7123: std::string::iterator does that
[04:08:07] <smallville7123> cbreak: i know
[04:08:16] <cbreak> and it will get invalidated.
[04:08:19] <smallville7123> it is just a helper class
[04:08:23] <cbreak> sounds useless.
[04:08:35] <cbreak> if you want something that can persist, use indices, as hnOsmium0001[m] proposed.
[04:08:48] <cbreak> but obviously, those will also not be stable when you change the length
[04:08:59] <cbreak> they might point at the wrong thing afterwards, or even outside the string if it shrinks
[04:09:36] <smallville7123> anyway, how about this instead?   auto old = match.begin - iterator.input.cbegin();      replace... ;    match.begin = iterator.input.cbegin() + old;
[04:09:49] <smallville7123> where match.begin is std::string::const_iterator
[04:11:40] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[04:13:17] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[04:20:22] *** Quits: geli (~gelignite@55d45b98.access.ecotel.net) (Read error: Connection reset by peer)
[04:20:36] *** Joins: magla (~gelignite@55d45b98.access.ecotel.net)
[04:20:42] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[04:20:51] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:21:08] *** Quits: magla (~gelignite@55d45b98.access.ecotel.net) (Remote host closed the connection)
[04:24:09] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:25:15] *** Joins: hexingb (~hexingb@36.155.28.147)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:27:26] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 245 seconds)
[04:33:21] *** Quits: sbrothy (~sbrothy@192038134036.mbb.telenor.dk) (Read error: No route to host)
[04:36:41] *** Quits: DSpider (~DSpider@82.79.237.30) (Quit: Leaving)
[04:46:51] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:47:39] *** Joins: Tokamak (~Tokamak@mobile-166-170-29-59.mycingular.net)
[04:49:21] <smallville7123> https://gist.github.com/mgood7123/a60d648b13466109d237e246a6274d21 ok i got it working :)
[04:50:12] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[04:58:48] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:1181:18a7:7b4:f540)
[04:59:18] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 250 seconds)
[05:00:02] *** Joins: hexingb (~hexingb@111.32.64.60)
[05:05:00] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:06:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:1181:18a7:7b4:f540) (Quit: Quit)
[05:11:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[05:11:02] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[05:13:33] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:15:15] *** Joins: KombuchaKip (~kip@192.252.230.5)
[05:21:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:22:16] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 250 seconds)
[05:25:18] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:28:37] *** Quits: Tokamak (~Tokamak@mobile-166-170-29-59.mycingular.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:28:45] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:32:51] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:34:43] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:36:37] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[05:41:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:53] *** ChanServ sets mode: +v npaperbot
[05:47:22] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:48:56] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[05:51:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:56:52] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[06:03:39] *** Joins: Xardas (~Xardas@149.233.51.127)
[06:04:32] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:12:00] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[06:13:11] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:14:46] *** Joins: arch-angel (~arch-ange@2001:e68:5400:3444:f67f:24ed:5c4c:c6be)
[06:15:49] *** Joins: epony (epony@user/epony)
[06:35:37] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-178.dsl.bell.ca) (Ping timeout: 240 seconds)
[06:41:00] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:42:06] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[06:42:52] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[06:43:20] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca)
[06:46:09] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:46:36] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:47:51] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:51:16] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:01:34] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[07:02:34] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:05:02] *** Joins: adeliktas4 (~adeliktas@i59F52D68.versanet.de)
[07:06:37] *** Quits: adeliktas (~adeliktas@i59F527F1.versanet.de) (Ping timeout: 240 seconds)
[07:06:37] *** adeliktas4 is now known as adeliktas
[07:17:24] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:24:42] *** Joins: ferdna (~ferdna@user/ferdna)
[07:27:13] *** Quits: AmR (~AmREiSa@156.207.146.251) (Quit: Konversation terminated!)
[07:29:14] *** Quits: emerent (~quassel@p200300cd5704439cba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:29:38] *** Joins: emerent (~quassel@p200300cd57044358ba27ebfffed28a59.dip0.t-ipconnect.de)
[07:30:57] *** Quits: foul_owl (~kerry@94.140.8.105) (Read error: Connection reset by peer)
[07:31:41] *** Quits: wielding (~wielding@user/wielding) (K-Lined)
[07:31:41] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (K-Lined)
[07:31:41] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (K-Lined)
[07:31:42] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (K-Lined)
[07:31:42] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (K-Lined)
[07:31:43] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (K-Lined)
[07:31:43] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (K-Lined)
[07:31:43] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (K-Lined)
[07:40:22] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:43:42] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[07:44:57] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[07:48:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:48:56] *** Joins: foul_owl (~kerry@174-21-143-101.tukw.qwest.net)
[07:51:54] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:00:43] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[08:00:43] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[08:00:43] *** Joins: wielding (~wielding@user/wielding)
[08:00:43] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[08:00:43] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[08:00:43] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[08:00:56] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[08:02:40] *** Quits: hexingb (~hexingb@111.32.64.60) (Ping timeout: 256 seconds)
[08:03:59] *** Quits: MetaNova (zero-one@znc/supporter/metanova) (Quit: quit)
[08:05:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[08:06:47] *** Joins: hexingb (~hexingb@36.155.28.147)
[08:06:47] *** Joins: MetaNova (zero-one@znc/supporter/metanova)
[08:13:40] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[08:18:29] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Quit: Client limit exceeded: 20000)
[08:19:42] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Quit: Client limit exceeded: 20000)
[08:22:03] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Quit: Client limit exceeded: 20000)
[08:22:08] *** Quits: wielding (~wielding@user/wielding) (Quit: Client limit exceeded: 20000)
[08:22:55] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Client limit exceeded: 20000)
[08:28:10] *** Quits: jsbach_ (~jsbach@2a01:c22:3497:1a00:a44e:623a:c259:ecb7) (Ping timeout: 250 seconds)
[08:29:17] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: Client limit exceeded: 20000)
[08:29:53] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 250 seconds)
[08:40:12] <ville> smallville7123: http://www.eelis.net/c++draft/strings#string.require-4
[08:40:13] <smallville7123> if i have an allocation holder, how can i make two different holders hold the same allocation if given the same allocation twice ?
[08:40:25] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[08:40:25] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[08:40:25] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[08:40:26] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[08:40:26] *** Joins: wielding (~wielding@user/wielding)
[08:40:26] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[08:40:26] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[08:41:37] *** Joins: jsbach_ (~jsbach@2a01:c23:6421:f700:6d73:7db3:c97a:9054)
[08:42:07] <smallville7123> eg,     Rule * dot = new Char('.');     Rule * dots = new Or({dot, dot, dot}); // each dot is stored in a RuleHolder which deletes the allocation upon destruction
[08:42:39] <smallville7123> since this allocation is shared it would be triple-freed which i do not want
[08:43:22] <smallville7123> as opposed to    Rule * dots = new Or({new Char('.'), new Char('.'), new Char('.')});
[08:43:45] <kalven> if you have a graph like structure, it's a good idea to have a top-level thing that owns everything
[08:43:50] <smallville7123> in which there are 3 seperate allocations of "dot" which are safe to delete
[08:43:54] <kalven> and then just use non-owning pointers in the graph itself
[08:44:39] <smallville7123> could i store it in a std::shared_ptr ?
[08:45:02] <ville> you could, but it wouldn't do what you want
[08:45:18] <smallville7123> what should i use instead?
[08:45:45] <ville> rethink your design?
[08:46:25] <smallville7123> i dont want to allocate my rules on the heap
[08:47:22] <smallville7123> stack/heap
[08:47:53] <smallville7123> which ever is used to store non-new stuff
[08:48:35] <smallville7123> local stuff are stured on the ctack, right?
[08:48:38] <smallville7123> stored*
[08:48:43] <smallville7123> stack*
[08:48:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:49:06] <ville> perhaps it would just help to think about lifetimes. automatic and dynamic.
[08:49:21] <smallville7123> yea
[08:49:44] <smallville7123> what i want is to have the lifetime of rule A shared across different rule objects
[08:49:58] <imMute> sounds like you want a std::shared_ptr
[08:50:10] <smallville7123> imMute: 15:15:02 ville: you could, but it wouldn't do what you want
[08:50:18] <ville> you can still use new, placement new in specific, to use "stack" and create an object with dynamic lifetime
[08:50:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:51:16] <galik> I like kalven's idea. Store all your objects in a container, and use references into the container. Be careful of lifetimes. If you use a std::vector, maybe use indexes (unless you can create ALL your objects in advance). Or use a std::deque etc...
[08:52:11] <galik> it gets tricky is you need to delete stuff on the fly - use std::list maybe
[08:52:18] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[08:52:22] *** Joins: hexingb (~hexingb@36.155.28.147)
[08:53:28] <smallville7123> my current implementation uses Rule, and RuleHolder, a RuleHolder is just a container for a Rule which it deletes when the RuleHolder goes out of scope, and for example, the Or rule, i use a vector of RuleHolder's to contain my rules
[08:54:28] <smallville7123> eg    struct Or : Rule { std::vector<RuleHolder> rules;      Or(std::initializer_list<Rule*> rules, Action action = NO_ACTION) : Rule(action) { for (auto * rule : rules) { this->rules.push_back(rule); } }
[08:55:21] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[08:55:38] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:55:43] <ville> smallville7123: with that interrface it's not* possible, well unnecessarily difficult at least, in the implementation of Or() to detect if any of the Rule* point ot the same thing
[08:56:26] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:58:01] <ville> smallville7123: you've been lead to a blind alley by thinking your object lifetimes in too small scope. do something along the lines of what kalven said and your code should simplify
[08:58:05] <smallville7123> ville: it might be done in RuleHolder itself with it keeping a static list of all rules and reusing existing rules with reference counting
[08:58:22] <smallville7123> this is the interface for RuleHolder https://gist.github.com/e76183125a5b0cd6ee8f795bd3b9c7ef
[08:58:31] <ville> smallville7123: you're just piling on complexity on complexity because of bad choices you've made
[08:58:50] <ville> smallville7123: time to start thinking if things are in the problem set or in the solution set
[08:59:59] <ville> smallville7123: if i understand your situation correctly you're building some sort of grammar/parser? so likely that it self is static as in it's built, used and then discarded?
[09:00:39] <smallville7123> yes
[09:01:12] <smallville7123> tho it can be constructed from existing grammar, eg the components of one grammar may be reused in another grammar
[09:01:27] <smallville7123> (hence rule sharing)
[09:01:55] <ville> but what is the _actual_ usage?
[09:02:26] <smallville7123> parser
[09:02:39] <kalven> you desperately need to learn how to say "no" to your inner person that keeps saying "it'd be cool if we supported this feature"
[09:02:41] <ville> rather than thinking of your symbols as individual things, as you're doing now, if the actual usage is that you've a build it, use it and destroy it then you can make far simpler decissions
[09:02:51] <smallville7123> kalven: haha :)
[09:03:23] <smallville7123> ville: how so?
[09:03:34] <ville> so that goes to what kalven said. have something else that owns all the symbols that belong to a single grammar/parser and when you get rid of that object it gets rid off everything. not the symbols them selves
[09:03:54] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[09:04:43] <ville> and then secondly if you've things that may reallocate from under you then to simplify your own code usually it's a sign to switch from pointers to using indices
[09:05:47] <ville> well index-or-handle
[09:06:19] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:07:31] <ville> well i guess the decissions are perhaps not simpler but could lead to simpler code
[09:08:38] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 260 seconds)
[09:08:56] <smallville7123> alright
[09:12:26] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:12:40] *** Joins: hexingb (~hexingb@111.32.64.60)
[09:13:09] <ville> https://floooh.github.io/2018/06/17/handles-vs-pointers.html may be useful reading
[09:14:12] <kalven> great post
[09:16:14] <ville> not saying "do all of that instead", just some ideas worth considering individually on their own
[09:18:49] <johnny> maybe i don't do enough of this to have run into reading about that myself, but the real question is.. why i haven't i seen it in code?
[09:20:45] <ville> it?
[09:21:00] <johnny> the way it talks about handles
[09:21:19] <johnny> i was atually writing a sentence that used it in context, but then i couln't figure out how to ask what i wanted to ask :(
[09:21:37] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:8401:53e:dff:2db5) (Ping timeout: 240 seconds)
[09:21:50] <kalven> well.. because you haven't studied the right piece of code
[09:21:52] <johnny> maybe i've been blind and just didn't notice it
[09:22:24] <ville> johnny: you said you inherited a project? perhaps it's done good decissions for you?
[09:22:26] <johnny> so what is the right piece of code kalven ?
[09:22:33] <johnny> oh it certainly didn't
[09:22:35] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:23:12] <kalven> johnny: the author of that post has a lot of code up on github, that'd be a good place to start
[09:23:36] <johnny> that's not what i meant. i mean.. which popular libraries are using that approach?
[09:24:03] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:24:11] <ville> johnny: it's also easy to just tunnel vision on a solution based on the initial building blocks you've set out and not realize that it's those decissions that are causing the complexity of the solution you're writing
[09:24:50] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[09:24:55] <johnny> this whole bit with handles seems like a fundmental design choice
[09:24:55] <kalven> I have about zero desire to play no true scotsman with you, but you can start here: https://github.com/floooh/sokol
[09:25:51] <ville> johnny: for example if smallville7123's use case really is: build it, use it, kill it, and not some overly general: build them, pass them around, combine them whenever, kill them whenever
[09:26:23] <johnny> i'm not trying to play a game kalven . i'm trying to understand either a) if i missed it while looking at existing code  b) it's not not a technique well understood
[09:26:55] <ville> johnny: making that distinction let's you then simplify the symbol implementations as they don't care about lifetimes of the symbols they may contain. the symbols, well parser combinators i guess, onl care about well "combining", and someone else takes care of creating and killing
[09:27:45] <johnny> well there's two parts of the article right? the first part is about ownership and keeping it "local" to certain parts of the project right?
[09:28:22] <johnny> and then there's the description of passing these "handles" over pointers
[09:28:41] <ville> been ~3 years since i read them so i can't really tell what goes where
[09:29:57] <ville> but he has another decisions he's made: he is modifying something in-place and that something can reallocate. rather than having separate input buffer and output buffer
[09:31:19] <ville> so of course that will wipe out pointers/iterators and lead to implementation complexity to keep updating those pointers/iterators
[09:41:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:52] *** ChanServ sets mode: +v npaperbot
[09:42:56] *** Quits: hexingb (~hexingb@111.32.64.60) (Read error: Connection reset by peer)
[09:43:18] *** Joins: hexingb (~hexingb@111.32.64.60)
[09:45:58] *** Joins: K2FeO4 (~K2FeO4@27.211.123.244)
[09:46:16] *** Parts: K2FeO4 (~K2FeO4@27.211.123.244) ()
[09:49:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:52:58] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[09:53:13] *** Joins: ravan (~ravan@42.201.198.151)
[09:53:13] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[09:53:13] *** Joins: ravan (~ravan@user/ravan)
[09:54:18] <smallville7123> would this do? https://gist.github.com/8321d8ea5b6afdccfae5a14b3ba9b9b6
[09:55:23] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[09:55:44] *** Joins: kevr (~kevr@user/kevr)
[10:04:03] <smallville7123> -_- wtf
[10:04:20] <smallville7123> why is this->rules.push_back(rule); invoking virtual ~RuleHolder()
[10:04:30] <smallville7123> when rule is Rule * rule
[10:05:53] <ville> smallville7123: testcases testcases. not dump-all-my-code
[10:06:19] <ville> smallville7123: you know the rules by now. so follow them. or i will start banning you
[10:13:08] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 252 seconds)
[10:15:17] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[10:17:06] <smallville7123> https://coliru.stacked-crooked.com/a/a88a34e1e75871f0
[10:18:42] <ville> smallville7123: next narrow it down to necessary lines. surely not all 100 lines are needed
[10:20:45] <smallville7123> most i can do is 92
[10:20:59] <smallville7123> https://coliru.stacked-crooked.com/a/dea657e82a3fa5d1
[10:21:23] <ville> surely you can remove bunch of logic from various functions
[10:21:46] <ville> and when the functions are empty, you may be able to remove types, or places where that function was called. thus allowing removing more functions
[10:23:04] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[10:23:36] <smallville7123> i dont see anywhere i can remove logic without breaking it
[10:26:58] <ville> well i can't be bothered to really read it. i'll re-iterate the point that forget the idea that rules or rule holders or whatever you call them own anything.
[10:27:20] <ville> it'll allow you to forget this whole reference counting nonsense
[10:31:13] <ville> you've one "thing" that you use to track the rule-derived objects. be it some kind of allocator, factory or whatnot. you ask that thing for those object instances. then once you have such you combine them the way you're doing now. once the thing that's tracking the rule-derived objects is killed it kills all the tracked objects with it in one go
[10:31:21] <smallville7123> also i cannot allocate the rules on the stack anyway since object stripping will occur, and even if i make them references it will overcomplicate grammar a bit since for example, Or({Char('x'), Char('y')); cannot be valid since Char('x') is not a reference thus must be declared seperately before it can be used
[10:31:51] <ville> smallville7123: that is an inaccurate statement as well. slicing is not tied to how an object was allocated
[10:32:35] <smallville7123> well not allocate on the stack via new placement
[10:33:05] <smallville7123> just for example, Rule a = Char('x'); // object stripping occurs to make Char fit into Rule
[10:33:50] <smallville7123> Char fit into Rule since Char : Rule     *
[10:34:16] <ville> smallville7123: http://coliru.stacked-crooked.com/a/bc3799e0593000cb on line 22 x is most certainly an automatic variable, yet it's being used in a way that has not caused any slicing
[10:35:10] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[10:35:33] <ville> slicing happens when you try to stuff a derived object into a base object. pointers or references will not cause slicing. and you could certainly cause a dynamically allocated object to be sliced as well
[10:36:44] <ville> smallville7123: http://coliru.stacked-crooked.com/a/7d1b0be2b1664361 line 24 x is dynamically allocated but then sliced on line 25
[10:36:59] <smallville7123> yesyes but this does not http://coliru.stacked-crooked.com/a/38aefde245f020af
[10:37:03] <smallville7123> ville: yes*
[10:37:14] *** Joins: letto (~letto@86.120.81.105)
[10:37:39] <smallville7123> yea
[10:37:59] <ville> that slicing has nothing to do with automatic or dynamic though as you suggested. it's to do with the interface of the function. it takes its argument by value, thus copies it and slices any derived
[10:38:11] <smallville7123> yea
[10:38:25] <ville> as i demonstrated in the pastes you can cause slicing or avoid slicing independent of how an object was allocated
[10:38:59] <smallville7123> it is that that i want to avoid while also being able to simplify grammar building
[10:39:53] <smallville7123> also you would need to name each variable appropriately so you know which rule it belongs to
[10:40:08] <smallville7123> eg not just name a, b, c, d, ect
[10:40:25] <smallville7123> since doing so would end up with very confusing grammar
[10:40:32] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:40:41] <smallville7123> or rather, obsfucated grammar
[10:41:03] <smallville7123> also coming up with meaningful variable names is difficult
[10:42:14] <ville> if you want to simplify your implementation, as well, then look into what was suggested: have one thing that manages all the rule-based objects
[10:42:32] <smallville7123> thats what im trying to do
[10:42:56] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 250 seconds)
[10:43:07] <smallville7123> but i get https://coliru.stacked-crooked.com/a/dea657e82a3fa5d1
[10:43:26] <ville> you don't need any of that reference counting then
[10:44:15] <ville> you have one class whose sole purpose, for now at least, is to just create things and keep a pointer to any such thing it created, so it can be killed later
[10:45:11] <ville> struct aa { or_rule* create_or_rule(); and_rule* create_and_rule(); std::vector<rule*> rules_to_be_killed; }; or so
[10:45:54] <ville> and you never create a rule instance on your own directly with new. you first make an instance of aa, then: or_ = x.create_or_rule();
[10:46:29] <ville> whether you allow the "things" that will be or-ed to be passed in the create_or_rule() or be a separate call is up to you or
[10:46:44] <smallville7123> tho i can get it down to 83 lines if i remove the OR and simply create the RuleHolder's directly    https://coliru.stacked-crooked.com/a/a18c5ebd3f95aaab
[10:47:24] <ville> (of course the aa type has to have a dtor that atually then kills the rules)
[10:48:02] <smallville7123> ville: could you give me an example code of such?
[10:48:07] <ville> i just did
[10:48:29] <smallville7123> like one on wandbox or coliru
[10:49:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:50:39] <ville> http://coliru.stacked-crooked.com/a/5fdf7ea3d893a02a
[10:52:26] <smallville7123> so each rule would need its own create* function and `aa` acts as the rule manager that is responsible for creating and destroying rules?
[10:52:34] <ville> yes
[10:53:03] <ville> it's dead simple code. anyone can follow it. avoiding any reference counting nonsense.
[10:53:11] <smallville7123> how would custom rules be registered with `aa` ?
[10:53:14] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:54:11] <smallville7123> eg or_rule(and_rule(...), and_rule(...))
[10:54:20] <ville> you wouldn't. there are only so many parser combinators you need to make parser
[10:55:15] <ville> those are not custom "rules". those are just combinging the the existing ones
[10:55:33] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:55:58] <ville> so you've the or parser combinator, whether you take the things it ors in the create_-function as arguments or you set them afterwards is upto you
[10:56:12] <smallville7123> so you would do something like        auto or_ = aa.create_or_rule;   auto and1 = aa.create_and_rule;     auto and2 = aa.create_and_rule;     or_.combine(and1, and2);       ?
[10:56:29] <ville> upto you
[10:57:16] <smallville7123> hmm
[10:57:19] <ville> also you wouldn't have to give names for the and objects there
[10:59:08] <smallville7123> i guess i am attempting to "garbage collect" my created rules when they are no longer needed
[11:00:26] <ville> the basic transform proposed here, possibly, is replacing a direct or_rule constructor call with: rules.create_or_rule call. what parameters if any those have is for you to decide
[11:01:27] <ville> and don't forget to write the aa dtor that kills all the rules which were created
[11:01:28] <smallville7123> imma stick to my implementation
[11:01:38] <ville> oh dear
[11:11:28] *** Joins: sigma_ (~sigma@86.57.90.221)
[11:11:50] *** Joins: Burgundy (~NA@86.121.143.206)
[11:16:33] <smallville7123> imma go out on a limb and assume that `rules.erase(r)` invalidates whatever was returned by `rules.back()` ;-;
[11:17:38] * smallville7123 attempt to store an allocation instead of a copy to see if that fixes it
[11:21:07] <smallville7123> and it was, storing an allocation vector<Reference*> instead of a copy vector<Reference> fixes it
[11:32:54] *** Joins: Donno (~donno@58.84.206.182)
[11:38:18] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[11:41:26] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[11:47:46] *** Joins: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse)
[11:50:42] *** Joins: c4017w (~c4017@209.52.68.8)
[11:50:44] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:51:02] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[11:53:52] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:56:08] *** Quits: hexingb (~hexingb@111.32.64.60) (Ping timeout: 256 seconds)
[11:58:37] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[11:58:41] *** Quits: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 245 seconds)
[11:59:41] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Quit: Client limit exceeded: 20000)
[12:05:17] *** Joins: joilerv_ (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[12:07:25] *** Quits: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Ping timeout: 250 seconds)
[12:24:00] *** Joins: hexingb (~hexingb@2409:8902:7ba1:f6f4:7de6:813b:9252:c1f2)
[12:27:38] *** Joins: robod34 (~Username@79.113.195.239)
[12:30:17] *** Quits: hexingb (~hexingb@2409:8902:7ba1:f6f4:7de6:813b:9252:c1f2) (Ping timeout: 240 seconds)
[12:32:34] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 250 seconds)
[12:42:47] *** Joins: hexingb (~hexingb@2409:8902:7ba1:f6f4:8a5:a8d5:42be:9bc0)
[12:45:56] *** Quits: joilerv_ (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:49:17] *** Quits: hexingb (~hexingb@2409:8902:7ba1:f6f4:8a5:a8d5:42be:9bc0) (Ping timeout: 240 seconds)
[12:51:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:52:15] *** Quits: sigma_ (~sigma@86.57.90.221) (Quit: Konversation terminated!)
[12:54:40] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[13:05:48] *** Joins: gentooclimax (~gentoocli@2a02-8440-6341-191a-7a60-f84d-f9b5-92a8.rev.sfr.net)
[13:09:29] *** gentooclimax is now known as climax
[13:19:13] *** Joins: hexingb (~hexingb@60.10.254.229)
[13:19:22] *** Joins: sbrothy (~sbrothy@192038134036.mbb.telenor.dk)
[13:21:46] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:65d6)
[13:23:58] *** Quits: hexingb (~hexingb@60.10.254.229) (Ping timeout: 256 seconds)
[13:24:03] *** Quits: climax (~gentoocli@2a02-8440-6341-191a-7a60-f84d-f9b5-92a8.rev.sfr.net) (Read error: Connection reset by peer)
[13:24:16] *** Joins: climax (~gentoocli@2a02-8440-6341-191a-7a60-f84d-f9b5-92a8.rev.sfr.net)
[13:27:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:29:12] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:30:38] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[13:31:15] *** Quits: climax (~gentoocli@2a02-8440-6341-191a-7a60-f84d-f9b5-92a8.rev.sfr.net) (Ping timeout: 250 seconds)
[13:32:49] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:41:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:52] *** ChanServ sets mode: +v npaperbot
[13:43:13] *** Joins: xkuru (~xkuru@user/xkuru)
[13:45:47] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:47:46] *** Quits: chozorho (~chozorho@2601:146:300:c30::be2f) (Quit: WeeChat 3.0)
[13:51:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:53:37] *** Quits: sbrothy (~sbrothy@192038134036.mbb.telenor.dk) (Ping timeout: 240 seconds)
[13:55:19] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[14:16:55] *** Joins: plastico (~plastico@neomutt/plastico)
[14:21:18] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:21:38] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[14:29:14] *** Joins: climax (~gentoocli@aputeaux-655-1-41-5.w90-62.abo.wanadoo.fr)
[14:29:28] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[14:30:48] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:dc05:bb5d:f69a:4dd1)
[14:46:32] *** Joins: hexingb (~hexingb@36.155.28.147)
[14:49:16] *** Quits: climax (~gentoocli@aputeaux-655-1-41-5.w90-62.abo.wanadoo.fr) (Remote host closed the connection)
[14:49:37] *** Joins: magla (~gelignite@55d4f325.access.ecotel.net)
[14:49:41] *** Joins: climax (~gentoocli@2a01:cb18:222:5100:1310:103d:4cfd:eb99)
[14:52:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:55:46] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:56:38] *** Joins: proller (~p@80.240.216.69)
[15:00:14] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[15:06:09] *** Quits: climax (~gentoocli@2a01:cb18:222:5100:1310:103d:4cfd:eb99) (Ping timeout: 250 seconds)
[15:08:48] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:09:28] *** Quits: PJBoy (~PJBoy@user/pjboy) (Client Quit)
[15:10:01] *** Joins: gentooclimax (~gentoocli@aputeaux-655-1-41-5.w90-62.abo.wanadoo.fr)
[15:12:56] *** Quits: gentooclimax (~gentoocli@aputeaux-655-1-41-5.w90-62.abo.wanadoo.fr) (Remote host closed the connection)
[15:13:21] *** Joins: gentooclimax (~gentoocli@2a01:cb18:222:5100:1310:103d:4cfd:eb99)
[15:15:41] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 250 seconds)
[15:16:02] *** Joins: hexingb (~hexingb@60.10.254.229)
[15:17:17] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[15:17:39] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:19:52] *** Joins: kilitary (~kilitary@188.242.187.4)
[15:20:42] *** Quits: hexingb (~hexingb@60.10.254.229) (Ping timeout: 256 seconds)
[15:21:04] *** Joins: hexingb (~hexingb@60.10.254.229)
[15:25:09] *** Joins: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it)
[15:25:56] *** Quits: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it) (Remote host closed the connection)
[15:26:13] *** Joins: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it)
[15:32:25] *** Quits: gentooclimax (~gentoocli@2a01:cb18:222:5100:1310:103d:4cfd:eb99) (Remote host closed the connection)
[15:32:52] *** Joins: gentooclimax (~gentoocli@2a01:cb18:222:5100:1310:103d:4cfd:eb99)
[15:32:52] *** gentooclimax is now known as climax
[15:34:02] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:1181:18a7:7b4:f540)
[15:38:32] *** climax is now known as gentooclimax
[15:38:44] *** Quits: gentooclimax (~gentoocli@2a01:cb18:222:5100:1310:103d:4cfd:eb99) (Quit: Konversation terminated!)
[15:39:20] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[15:40:23] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[15:40:34] *** Joins: sbrothy (~sbrothy@192038134036.mbb.telenor.dk)
[15:41:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:42:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:43:29] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[15:45:06] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:46:01] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:50:12] *** Quits: kilitary (~kilitary@188.242.187.4) (Remote host closed the connection)
[15:52:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:56:13] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[16:04:20] *** Quits: hexingb (~hexingb@60.10.254.229) (Ping timeout: 256 seconds)
[16:06:54] *** Joins: hexingb (~hexingb@36.155.28.147)
[16:12:34] *** Joins: markong (~kvirc@213.146.188.203)
[16:19:40] *** Joins: chris64 (~chris@user/chris64)
[16:19:42] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[16:21:40] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[16:22:03] *** Joins: kevr (~kevr@user/kevr)
[16:22:23] *** Joins: gentooclimax (~gentoocli@2a01:cb18:222:5100:1310:103d:4cfd:eb99)
[16:27:48] *** Joins: joilerv (~joilerv@135.129.250.144)
[16:31:12] *** Joins: pulse (~pulse@user/pulse)
[16:31:38] *** Joins: cytokine_storm (~user@user/cytokine-storm/x-1083107)
[16:33:17] *** Joins: ravan_ (~ravan@42.201.198.151)
[16:33:17] *** Quits: ravan_ (~ravan@42.201.198.151) (Changing host)
[16:33:17] *** Joins: ravan_ (~ravan@user/ravan)
[16:35:51] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 250 seconds)
[16:35:57] *** Quits: sbrothy (~sbrothy@192038134036.mbb.telenor.dk) (Ping timeout: 240 seconds)
[16:38:09] *** Quits: gentooclimax (~gentoocli@2a01:cb18:222:5100:1310:103d:4cfd:eb99) (Quit: Konversation terminated!)
[16:38:29] *** Joins: kilitary (~kilitary@188.242.187.4)
[16:38:34] <ville> arch linux joinging the 20th century: https://lists.archlinux.org/pipermail/arch-dev-public/2022-January/030670.html
[16:38:35] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[16:38:48] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[16:40:10] <ville> that's really been my biggest complaint when using arch as development environment
[16:43:10] <pulse> comfy https://i.imgur.com/85yh7Xn.jpg
[16:43:59] <pulse> "MFC library reference" 3 meters thick
[16:44:27] <very_sneaky> now arch just needs a stable glibc maintainer
[16:45:08] *** Quits: ville (~ville@user/ville) (Ping timeout: 256 seconds)
[16:45:13] <barometz> pulse: not a broken link in sight though :P
[16:46:57] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:48:02] <pulse> no search function either
[16:51:59] *** Joins: ville (~ville@user/ville)
[16:53:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:53:31] <vdamewood> pulse: It's indexed.
[16:53:44] <vdamewood> Also, me want!
[16:54:09] <vdamewood> The MSDN documentation from teh Visual C++ 6 days was top notch.
[16:54:49] <pulse> i remember VB3 docs being good, never had VS6 docs :p
[16:55:04] *** Quits: joilerv (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:55:13] <vdamewood> I doubt there was much difference. They're pretty close together timewise.
[16:55:27] <pulse> i mean
[16:55:34] <pulse> two or three major windows versions came out in between
[16:56:53] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[17:03:51] <vdamewood> pulse: How do you define 'major'. I count only one Major release of Windows between VB3 and VB6.
[17:04:05] <vdamewood> s/'major'./'major'?/
[17:04:11] <pulse> vb3 came out for windows 3.1 right
[17:04:39] <pulse> vs6 came out in 1998
[17:04:51] <pulse> so i guess 2 major versions
[17:04:59] <pulse> unless you count NT too
[17:05:30] <vdamewood> I count NT as separate from Windows.
[17:06:15] <vdamewood> I still only count one major version between 3.1 and 98. And tha'ts 95. I consider 98 a minor version.
[17:06:35] <pulse> 98 had major improvements though
[17:06:36] <vdamewood> Since 95 was Windows 4.0 and 98 was something like 4.1 or something.
[17:06:42] <pulse> for one, it didn't crash every 5 minutes
[17:06:54] <pulse> well, 98se i guess
[17:06:56] <vdamewood> Neither did 95. It tooks 6 minutes, usually.
[17:07:01] <pulse> hah
[17:07:05] <vdamewood> 98se is even minorer.
[17:07:56] <vdamewood> To me 98 is like a feature update of 98, and 98se is a bugfix update of 98.
[17:08:10] <pulse> 98se was the stablest of the 9x
[17:08:16] <pulse> still not very stable, i have it on my retro pc
[17:08:23] <pulse> you can make it crash pretty easily
[17:08:31] <vdamewood> I'm still rocking NT 4.
[17:08:36] <pulse> nice
[17:08:40] <vdamewood> But my VM died on me.
[17:08:48] <pulse> i have 3.1 on a laptop
[17:08:58] <pulse> but it's hard to use
[17:09:06] <pulse> it has that old school lcd screen
[17:09:14] <pulse> it's black&white and there's ghosting on every movement
[17:09:18] <vdamewood> I would do that, but DOS and Win 3.1 don't idle the CPU when not in use, so my fans start going crazy.
[17:09:34] <pulse> i also have a win3.1 VM but idk what to do with it. maybe i can code something with VB3
[17:10:34] *** Joins: gentooclimax (~gentoocli@aputeaux-655-1-41-5.w90-62.abo.wanadoo.fr)
[17:11:42] <vdamewood> pulse: Play Ski Free
[17:12:01] <pulse> i never understood the popularity of that game
[17:12:18] <pulse> i'm more of a microman gamer
[17:12:36] <vdamewood> pulse: It was available on so many computers that people got used to it.
[17:13:54] <pulse> i've been testing out wxwidgets for a project i'm cooking up and i gotta say, it's pretty cool
[17:14:03] <pulse> why does everyone say it has an ugly api
[17:14:10] <pulse> seems pretty nice to me
[17:14:45] <vdamewood> pulse: Because they're not aware that wxWidgets 3.x is a thing.
[17:15:01] <pulse> i see. was it uglier in the past?
[17:15:06] <vdamewood> The API for 2.x required that you derive a class to implement behavior.
[17:15:22] <pulse> i see
[17:15:56] <pulse> i like their license too
[17:16:09] <pulse> much better than ... gasp... qt
[17:16:18] *** Quits: gentooclimax (~gentoocli@aputeaux-655-1-41-5.w90-62.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[17:17:41] <vdamewood> I don't remember what wxWidgets uses now, but I know you can just say "Button, when you're clicked call this function." While in wx2, you'd have to to the whole class myButton : wxButton { virtual onClick; } myButton::onClick(...) {  /* behavior here. */ }
[17:18:59] <vdamewood> pulse: The only difference is that wxWidgets lets you statically link without the LGPL requirements.
[17:19:11] <pulse> yes, and isn't that nice
[17:20:30] <TinoDidriksen> Static link doesn't require giving source even for LGPL - just requires that you can relink against a drop-in replacement. But you shouldn't be static linking in the first place, so meh.
[17:20:56] <vdamewood> Yeah, I'm with TinoDidriksen.
[17:21:00] *** Joins: AmR (~AmREiSa@156.207.146.251)
[17:21:20] <pulse> why shouldn't you be static linking?
[17:22:03] <TinoDidriksen> Dynamic linking lets system admins replace vulnerable libraries and saves space.
[17:22:24] <ville> i am not sure it's really that simple that should or shouldn't
[17:22:25] <pulse> static linking allows distribution of a single .exe file
[17:22:53] <TinoDidriksen> You almost never distribute a single exe anyway. You need an installer to fit into many situations.
[17:22:59] <pulse> plus you never run into compatibility issues
[17:23:24] <pulse> yeah but ensuring compatibility is a big one too. that single exe will work 20 years from now
[17:23:40] <TinoDidriksen> As will a dynamic bundle. That's not a difference.
[17:23:48] <pulse> in any case it's a bit more nuanced than just one or the other
[17:24:02] <pulse> yeah, i suppose. but why bundle dynamic libs when you can just statically link
[17:24:16] <TinoDidriksen> Because dynamic libs can be replaced and shared.
[17:24:28] <pulse> which creates potential problems
[17:24:35] <pulse> statically linked executable will just work
[17:24:50] <TinoDidriksen> Dynamic will also just work, but is more flexible.
[17:24:52] <pulse> lowers the chance of unexpected behavior
[17:25:20] <pulse> i think both have merit, depending on use case
[17:25:40] <pulse> i can see the point in bundling dynamic libs if you have multiple programs in your suite and they all depend on said libs
[17:25:53] <pulse> if you have a single program, it kind of doesn't matter much
[17:25:58] <TinoDidriksen> I find that static linking is only useful when the target requires it, such as embedded targets. Anything else, static is just worse.
[17:27:05] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 252 seconds)
[17:27:34] <chris64> Size of the program can also be a reason
[17:27:57] <vdamewood> For me, one of the biggest advantages of shared libraries was ruined when so many library authors made horrible, inconsistent, breaking changes to their ABIs.
[17:28:03] <chris64> or have unit tests linking against the production so?
[17:28:44] <vdamewood> Shared libraries are great when the libraries are distributed with the system, and available to all programs installed later. But that setup only works if the ABI changes to the library are backwards compatible during an OS/system upgrade.
[17:29:05] <pulse> that's how you get dependency hell in the long run
[17:29:20] <pulse> that's why i prefer the approach of bundling libs with programs instead
[17:29:28] <vdamewood> pulse: Well, like I said, the problem is library authors making breaking changes.
[17:30:05] <pulse> and isn't static linking the only viable way to distribute binaries for linux systems?
[17:30:05] <vdamewood> If semver had been around when shared libraries were first introduced, and people had followed it we wouldn't have a problem.
[17:30:26] <vdamewood> pulse: Nope. You can also distribute bespoke builds for each distribution.
[17:30:51] <pulse> which is... a ton of work?
[17:31:10] <TinoDidriksen> Not really.
[17:31:49] <pulse> don't you have to maintain builds for N distributions then?
[17:31:54] <TinoDidriksen> Yup
[17:31:59] <pulse> every time you update your code, you have to build for N systems
[17:32:02] <pulse> that sounds painful
[17:32:09] <vdamewood> Don't you automate your builds?
[17:32:13] <TinoDidriksen> It's a one-time setup, then it just works.
[17:32:17] <pulse> not to that extent
[17:32:22] <pulse> hmm
[17:32:34] <vdamewood> You should be able to issue a singel command-line command to build and upload every build of your project.
[17:32:54] <TinoDidriksen> There are free build farms even, such as OBS: https://build.opensuse.org/
[17:33:08] <ville> ...if it's possible to enter a command sequence manually, it's possible to stick it in a shell script
[17:33:10] <vdamewood> With cmake, ninja, and ssh that's a fairly easy process.
[17:33:27] <TinoDidriksen> And with Docker, it's even easier to automate it all locally.
[17:34:39] <TinoDidriksen> It just takes a long time to build for all the platforms, but there's a major upside: Building and testing on N platforms means your code is really well proven against bitrot and hard to catch bugs.
[17:36:10] <pulse> the reverse might also be true, you might spend time writing code for special cases for each platform
[17:36:15] <pulse> but in general i suppose you're right
[17:39:38] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[17:41:16] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[17:41:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:53] *** ChanServ sets mode: +v npaperbot
[17:43:10] <very_sneaky> speaking of semver, does anybody have any opinions on how to use it with automatic versioning for ci purposes? i.e., distinguishing between build 48 and build 49 of 1.3.0, for example
[17:43:21] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[17:45:30] <vdamewood> very_sneaky: 1.3.0-build.48
[17:45:38] <very_sneaky> atm i'm thinking vX.Y.Z-build.W+<commit hash>, where W is the build number
[17:45:53] <vdamewood> semver 2 would consider that a 'prebuild', and wouldn't count as the actual release, though.
[17:45:54] <very_sneaky> vdamewood: yeah sweet, similar to my thoughts
[17:46:19] <very_sneaky> yeah, i saw that. It seems like you need to be willing to adopt a pre-release tag if you want order of precedence sorting
[17:46:47] <very_sneaky> ideally i think it would be vX.Y.Z+build.W-<commit hash> or something, but build metadata isn't evaluated for order of precedence
[17:47:02] <vdamewood> very_sneaky: Just make sure that the 'letters' are in order before you do it. Either stick to a single 'prerelease' 'tag', or use ordered ones like 'alpha', 'beta', and 'rc'. for example.
[17:47:39] <vdamewood> PowerShell, for example, just labels them all x.y.z-prerelease.n, for example
[17:48:01] <very_sneaky> what do you mean by letters in order?
[17:48:56] <very_sneaky> my plan was just to use `-build` for all of them, and i don't think we'll have any use for alpha/beta/rc tags so weren't planning on using those
[17:49:23] <vdamewood> very_sneaky: With semver, when you have a pre-release version with an alpha component, the alpha part is given precedence in alphabetical order.
[17:49:50] <vdamewood> so alpha is before beta, is before gamma, is before release candidate.
[17:49:58] <vdamewood> err releasecandidate
[17:50:01] <very_sneaky> ah, so you mean, `alpha` and `beta` are compared lexicographically, not semantically
[17:50:08] <vdamewood> Yep.
[17:50:33] <very_sneaky> gotcha. so if i use `build`, it will take precedence over `alpha` in the situation where we decide to use that
[17:50:43] <vdamewood> Yep, xactly
[17:50:53] <vdamewood> exactly
[17:51:04] <very_sneaky> yep, makes sense. fortunately in our context those kinds of pre-releases don't make sense
[17:53:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:57:40] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:01:38] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[18:07:36] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:08:58] *** Quits: kilitary (~kilitary@188.242.187.4) (Remote host closed the connection)
[18:12:27] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[18:14:02] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:15:12] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Quit: Leaving)
[18:18:52] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:1181:18a7:7b4:f540) (Quit: Quit)
[18:20:41] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[18:27:41] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:28:36] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[18:30:26] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:30:40] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[18:32:31] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:32:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[18:34:02] *** Joins: bancroft (~bancroft@user/bancroft)
[18:34:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:35:14] <bancroft> can I take a void* to a function as an argument and execute the function? what would such a function look like?
[18:35:44] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[18:36:49] <bancroft> like func wrapper(void* function) {function();}
[18:38:29] <PJBoy> nope
[18:38:43] <PJBoy> function pointers are incompatible with object pointers
[18:40:16] <bancroft> so dead end, I can't call a void* to a function?
[18:44:19] <rpav> it would be neat if you could bind chained method return values
[18:44:41] <rpav> i don't think i've seen that in any language, so i'm not sure what would even be neat syntax
[18:45:24] <rpav> in lisp i guess you could have chain-let a la if-let, but that's not really helpful
[18:45:44] <ville> bancroft: on many platforms it's alright to stuff a pointer-to-function through a void*
[18:46:06] <rpav> in C++ you'd have to like .. chain calls but store each in a tuple .. i'm not sure if that could work
[18:46:21] <ville> bancroft: you'll still have to cast it to correct pointer-to-function type to call
[18:47:20] <ville> bancroft: posix used to require this to be alright, but think they made it optional in... 2017?
[18:50:36] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[18:50:45] <rpav> auto&& [x,y] = chain_bind(obj, &&Foo::m0, make_tuple(args...), &Bar::m1, make_tuple(args...)); // yea ugly
[18:51:18] <rpav> and you _still_ can't "intermediate-bind" so the call to Bar::m1 can't use x
[18:52:39] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Client Quit)
[18:54:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:55:28] *** Joins: immibis_ (~hexchat@62.156.144.218)
[18:57:28] *** Joins: jkaye (~jkaye@2601:281:8300:7530:780b:5ea4:97fa:3c7e)
[18:57:32] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 240 seconds)
[18:57:36] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:e6ac:ff60:94d1:6a1)
[18:57:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[19:00:50] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[19:11:50] *** Joins: h4k1m0u (~h4k1m0u@2001:861:3146:5890:75b4:39b9:ee73:fb33)
[19:12:05] <bancroft> ville: is it any easier if there are no function arguments at all
[19:14:09] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:15:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[19:17:49] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:18:47] *** Quits: arch-angel (~arch-ange@2001:e68:5400:3444:f67f:24ed:5c4c:c6be) (Ping timeout: 250 seconds)
[19:21:28] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[19:22:58] *** Joins: kevr` (~kevr@user/kevr)
[19:24:45] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 276 seconds)
[19:26:14] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:26:31] *** Quits: h4k1m0u (~h4k1m0u@2001:861:3146:5890:75b4:39b9:ee73:fb33) (Quit: Client closed)
[19:32:24] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[19:33:29] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:35:55] <AmR> I have idea, I want asking if it can work. this Idea about mixing files with , and in same Can I do the check sum with that ?? I talk about Windows.
[19:38:16] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 245 seconds)
[19:39:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[19:39:49] <ville> bancroft: easier?
[19:39:57] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 240 seconds)
[19:40:30] <ville> AmR: that makes no sense
[19:42:58] *** Joins: sbrothy (~sbrothy@192038130232.mbb.telenor.dk)
[19:47:23] <AmR> ville: I want hide some text in image file, like https://www.groovypost.com/howto/hide-text-inside-image-files/ And check sum for the files separated.
[19:52:42] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[19:54:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:56:08] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:56:42] <TinoDidriksen> You can embed any arbitrary data, including checksums.
[19:58:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[19:59:58] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[20:01:33] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:c1ca:91df:a271:86c)
[20:01:33] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:c1ca:91df:a271:86c) (Changing host)
[20:01:33] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:02:20] *** Quits: sbrothy (~sbrothy@192038130232.mbb.telenor.dk) (Quit: leaving)
[20:03:05] <pulse> random quote from some forum.. lol "If you think gdb is even remotely "good" then you have some serious brain damage. There's a reason the year of the Linux desktop is perpetually far away: and it's because nobody on the platform can actually debug anything."
[20:03:34] <pulse> not sure if true, i've used gdb ... 3 times
[20:06:23] *** Quits: jbalint (~jbalint@097-090-242-068.res.spectrum.com) (Quit: Bye!)
[20:06:34] *** Joins: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7)
[20:09:38] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[20:10:10] *** Joins: bancroft (~bancroft@user/bancroft)
[20:10:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[20:11:53] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[20:13:43] <TinoDidriksen> Plain gdb is indeed almost unusable.
[20:13:46] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:15:02] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:15:27] *** Quits: magla (~gelignite@55d4f325.access.ecotel.net) (Quit: Stay safe!)
[20:18:46] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 256 seconds)
[20:20:32] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:20:54] *** Joins: sbrothy (~sbrothy@192038130232.mbb.telenor.dk)
[20:22:26] <Praise> it is tough, but it is perfectly usable once you get used to it
[20:22:30] *** Quits: sbrothy (~sbrothy@192038130232.mbb.telenor.dk) (Client Quit)
[20:23:04] <TinoDidriksen> Or, you can avoid that whole mess and instead use a GUI wrapper that can also show much more context at once.
[20:23:55] *** Joins: sbrothy (~sbrothy@192038130232.mbb.telenor.dk)
[20:24:25] <pulse> why do people use gdb when lldb exists?
[20:25:10] <PJBoy> lldb's commands are weirder
[20:25:36] <PJBoy> and it doesn't offer anything useful AFAIK
[20:25:58] <PJBoy> gdb tui mode is perfectly bearable
[20:26:57] <PJBoy> except for when it destroys the stty mode and breaks horrendously
[20:26:58] <chris64> I'm only used to gdb so far, would need some quick intro to lldb to use it
[20:27:02] <Hello71> if you like emacs
[20:27:59] *** Quits: sbrothy (~sbrothy@192038130232.mbb.telenor.dk) (Client Quit)
[20:28:18] *** Joins: sbrothy (~sbrothy@192038130232.mbb.telenor.dk)
[20:29:24] *** Quits: sbrothy (~sbrothy@192038130232.mbb.telenor.dk) (Client Quit)
[20:29:37] *** Joins: sbrothy (~sbrothy@192038130232.mbb.telenor.dk)
[20:30:22] <ville> ...seek professional medical help
[20:31:49] <Hello71> PJBoy: it sounds like you are misinterpreting mixed program and gdb output as "stty mode". it is a problem with all screen-drawing programs that the output will be badly disrupted if uncontrolled text is injected into the stream. the problem is not fixable within the traditional unix console drawing api, but can normally be worked around by telling the program to redraw the screen, normally
[20:31:50] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:e6ac:ff60:94d1:6a1) (Ping timeout: 260 seconds)
[20:31:51] <Hello71> bound to ^L in most programs
[20:32:13] <PJBoy> nah I spam ^L constantly when I use gdb
[20:32:27] <PJBoy> it puts the terminal into a mode when `stty sane` has to be executed to get back to normal
[20:32:41] <PJBoy> \n's lose their implicit \r and typed text is invisible
[20:32:59] <PJBoy> not a great way to live
[20:33:06] <Hello71> it still smells like mixed output
[20:33:28] <PJBoy> this continues after killing gdb
[20:33:49] <Hello71> well if you kill gdb it won't reset the terminal state
[20:34:16] <PJBoy> well regardless, gdb throws that issue at me
[20:34:48] <PJBoy> and I can never reproduce it deterministicly
[20:34:56] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:38:21] *** Joins: kilitary (~kilitary@188.242.187.4)
[20:41:00] *** Joins: Tokamak (~Tokamak@172.58.191.35)
[20:41:41] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c90a:37de:e150:322e) (Ping timeout: 268 seconds)
[20:47:19] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:1181:18a7:7b4:f540)
[20:47:36] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:e6ac:ff60:94d1:6a1)
[20:48:43] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 250 seconds)
[20:50:55] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46)
[20:51:04] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a9ca:f4c8:c996:a5a2)
[20:51:04] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a9ca:f4c8:c996:a5a2) (Changing host)
[20:51:04] *** Joins: skapata (~Skapata@user/skapata)
[20:55:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:59:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:00:30] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[21:03:49] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Remote host closed the connection)
[21:06:24] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[21:06:48] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[21:10:11] *** Joins: Uswald (~leandre@2a01cb040075f900998baf519a3fa6fa.ipv6.abo.wanadoo.fr)
[21:10:11] *** Quits: Uswald (~leandre@2a01cb040075f900998baf519a3fa6fa.ipv6.abo.wanadoo.fr) (Changing host)
[21:10:11] *** Joins: Uswald (~leandre@user/Uswald)
[21:10:40] *** Quits: Uswald (~leandre@user/Uswald) (Client Quit)
[21:12:05] *** Quits: kilitary (~kilitary@188.242.187.4) (Remote host closed the connection)
[21:14:27] *** Joins: magla (~gelignite@55d4f325.access.ecotel.net)
[21:35:19] *** Joins: bancroft (~bancroft@user/bancroft)
[21:36:12] *** tonitch_ is now known as tonitch
[21:39:26] *** Quits: jkaye (~jkaye@2601:281:8300:7530:780b:5ea4:97fa:3c7e) (Ping timeout: 250 seconds)
[21:41:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:53] *** ChanServ sets mode: +v npaperbot
[21:42:58] <Inline> Ctrl-L won't always work
[21:43:00] *** Quits: baltazar (~baltazar@84-236-21-114.pool.digikabel.hu) (Quit: rebooting)
[21:43:05] <Inline> sometimes you have to issue reset
[21:43:14] <Inline> i.e. the command "reset"
[21:44:06] <Inline> or ssty sane
[21:44:15] <Inline> erm stty sane*
[21:47:03] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[21:48:20] *** Quits: mitch0 (~mitch@84-236-21-114.pool.digikabel.hu) (Remote host closed the connection)
[21:50:13] *** Parts: bancroft (~bancroft@user/bancroft) (WeeChat 3.2)
[21:51:41] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[21:51:59] *** Quits: nshire_ (~nshire@47.146.41.156) (Read error: Connection reset by peer)
[21:52:05] *** Joins: pulse (~pulse@user/pulse)
[21:52:18] *** Joins: nshire_ (~nshire@47.146.41.156)
[21:53:06] *** Joins: baltazar (~baltazar@84-236-21-114.pool.digikabel.hu)
[21:55:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:58:57] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:e6ac:ff60:94d1:6a1) (Ping timeout: 240 seconds)
[21:59:21] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[22:00:12] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:03:25] *** Joins: kilitary (~kilitary@188.242.187.4)
[22:07:21] <computerquip> ... google's workspace wants to charge me $20 a month to host basic email
[22:07:36] <computerquip> Why do I always regret using google shit lol
[22:12:39] <ville> looking forward to the day i can ditch stasi's spy handset
[22:16:23] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[22:18:11] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: wielding (~wielding@user/wielding) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Quit: Bridge terminating on SIGTERM)
[22:20:53] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[22:24:23] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Quit: foo)
[22:27:35] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[22:27:35] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[22:27:35] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[22:27:35] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[22:27:35] *** Joins: wielding (~wielding@user/wielding)
[22:27:35] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[22:27:49] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[22:28:28] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[22:30:41] *** Joins: horribleprogram (~user@user/horribleprogram)
[22:30:48] <horribleprogram> wtf i got kicked from ##C++-general
[22:30:59] <horribleprogram> is this the real one?
[22:31:09] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[22:32:03] <kalven> yes
[22:32:27] <horribleprogram> okay so
[22:32:36] <horribleprogram> I forget what this "term" is called
[22:32:43] <horribleprogram> but it was explained in that old book by Lakos
[22:32:59] <horribleprogram> so we know sizeof(Blah *) is always the same on a machine
[22:33:45] <horribleprogram> so the header itself doesn't need the #include "Blah.h"
[22:34:00] <ville> Oxyd: yes json's numbers are rather under-specified and strtod should set errno to ERANGE and return HUGE_VAL
[22:34:27] <Oxyd> Which I suppose is fine. Relative to strtod running off the end of the buffer.
[22:34:28] <ville> Oxyd: on your suggested input in #c++
[22:34:47] <ville> yeah that's fine. it's detectable at least
[22:36:07] <ville> i was thinking more of a future where the transmitted data changes from being guarantee json object to now allowing single number
[22:37:32] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[22:43:46] *** Joins: KombuchaKip (~kip@192.252.230.5)
[22:43:55] <horribleprogram> okay how does this work
[22:43:59] <horribleprogram> class Foo* my_foo;
[22:44:09] <horribleprogram> in a class declaration
[22:44:36] <horribleprogram> the corresponding .cpp file will include the header that defines Foo
[22:45:05] <horribleprogram> U understand the concept that a pointer has no need for knowing a class's members
[22:45:16] <horribleprogram> but this syntax in particular, I can't name it
[22:47:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[22:47:08] <horribleprogram> oh since .h files are "included"
[22:47:10] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[22:47:16] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Quit: Client limit exceeded: 20000)
[22:47:22] <horribleprogram> the forward declaration is not needed in the .h file, as the corresponding .cpp file includes it
[22:47:43] <horribleprogram> I was thikning from an object file point of view
[22:47:51] <horribleprogram> which was incorrect
[22:47:52] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[22:52:48] <horribleprogram> it's called an elaborated-type-specifier btw
[22:53:15] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Quit: Client limit exceeded: 20000)
[22:55:34] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Quit: Client limit exceeded: 20000)
[22:56:13] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Quit: Client limit exceeded: 20000)
[22:56:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:58:58] *** Quits: wielding (~wielding@user/wielding) (Quit: Client limit exceeded: 20000)
[22:59:17] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Remote host closed the connection)
[22:59:39] *** Joins: mitch0 (~mitch@84-236-21-114.pool.digikabel.hu)
[22:59:43] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Client limit exceeded: 20000)
[22:59:50] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[23:00:29] <hnOsmium0001[m]> storing references to elements in a vector is a glaring problem
[23:00:32] <hnOsmium0001[m]> even if it's not the cause of the segfault, fix it and it will do you good
[23:00:41] *** Quits: sbrothy (~sbrothy@192038130232.mbb.telenor.dk) (Read error: No route to host)
[23:01:33] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[23:04:29] <pulse> agreed, vector of pointers is much better :p
[23:04:30] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[23:04:30] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[23:04:30] *** Joins: wielding (~wielding@user/wielding)
[23:04:30] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[23:04:30] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[23:21:24] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[23:23:22] <ville> leonardus: you could look into things called sanitizers, which are available depend on the operating system and particular compiler
[23:23:47] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[23:24:20] <ville> basically they'll inject "stuff" into your program which allows catching for more errors than is possible at compile time. you'll get a report at runtime that "such and such happened"
[23:24:56] <leonardus> similar to a debugger?
[23:25:55] <ville> not really. it's just stuff printed out in the console
[23:27:37] <cbreak> pulse: pointers will break just as much
[23:28:04] <cbreak> there's absolutely no difference between the stability of references and pointers into a vector
[23:29:44] *** Quits: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it) (Ping timeout: 256 seconds)
[23:32:29] *** Joins: bingulo (~carlos@2804:431:e7c8:1e13:6aa5:f04b:2b75:a55b)
[23:33:36] <kalven> they said vector of pointers
[23:33:55] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:35:58] <cbreak> no
[23:36:12] <cbreak> qote: "storing references to elements in a vector is a glaring problem"
[23:37:14] <kalven> quote: "agreed, vector of pointers is much better :p"
[23:37:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:dc05:bb5d:f69a:4dd1) (Ping timeout: 250 seconds)
[23:39:57] <pulse> cbreak, i'm just kidding, but in general, i don't like paranoid programming paradigms
[23:40:38] <pulse> (i like raw pointers, too :D)
[23:41:28] <cbreak> this isn't really paranoid.
[23:42:16] <pulse> pointers in a vector will break if you do something stupid
[23:42:21] <pulse> if you don't, they will work just fine
[23:42:46] <cbreak> In my opinion, the only thing programmers should rely on is what is guaranteed by the language, the platform, a library, or something else.
[23:42:55] <cbreak> pulse: no
[23:43:03] <cbreak> they will break even if you do something totally normal
[23:43:10] <cbreak> like appending to the vector
[23:43:23] <pulse> why would that break them
[23:43:40] *** Joins: hexingb (~hexingb@36.155.28.147)
[23:43:47] <cbreak> because it will reallocate the underlying contiguous memory buffer when ever the old one is too small
[23:43:54] <cbreak> you have to actively work on keeping the vector valid if you want to point into it
[23:44:03] <cbreak> for example by reserving beforehand to a sufficient quantity
[23:44:17] <cbreak> or by actively avoiding resizing the vector altogether
[23:44:58] <PJBoy> it's not a good way to live
[23:44:58] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:64b2:4d59:ced9:7c72)
[23:45:26] <cbreak> I often rely on vector memory staying valid, but when ever I do, I do so in tightly controlled code
[23:45:39] <pulse> but that's pointing _to_ vector element, not vector elements being pointers
[23:45:43] <cbreak> so with a vector that's a private member, and which has a size that is known and remains
[23:45:46] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:45:53] *** Joins: sbrothy (~sbrothy@192038130232.mbb.telenor.dk)
[23:45:54] <cbreak> pulse: yes... that's the thing here
[23:46:04] <kalven> :P
[23:46:05] <cbreak> references to elements require this
[23:46:09] <cbreak> just like pointers
[23:46:57] <cbreak> the problem is stability of vector elements.
[23:47:10] <pulse> there's ways to mitigate or completely resolve that problem
[23:47:22] <cbreak> yes. many. I proposed two above.
[23:47:40] <cbreak> using a std::deque would also mitigate some of the cases, but gives less guarantees about contiguity.
[23:47:44] *** Parts: horribleprogram (~user@user/horribleprogram) (ERC (IRC client for Emacs 27.2))
[23:48:17] <cbreak> which is often a deal breaker
[23:48:34] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:a5a7:9716:6392:26bc)
[23:48:50] <cbreak> for example, you would want contiguity when storing an image in a vector, so you can do math to access individual pixel, a deque wouldn't allow that
[23:49:56] *** Joins: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it)
[23:50:26] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 252 seconds)
[23:52:39] <pulse> yeah that is a landmine i guess
[23:53:32] <pulse> at least C arrays don't have this problem
[23:53:36] <pulse> :p
[23:54:17] <cbreak> they do, if you use realloc :/
[23:54:42] <pulse> yeah but at least it's explicit then
[23:56:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:59:03] <PJBoy> Parental Advisory
[23:59:15] <PJBoy> this language contains explicit content
[23:59:27] <PJBoy> may not be suitable for children
