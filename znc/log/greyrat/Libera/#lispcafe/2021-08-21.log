[00:03:49] <pjb> gilberth: we can assume it's a bug in this implementation.
[00:04:40] <pjb> There's no reason why it should bus error, and even why it should break any code; for this method to be called, you'd need an explicit (when (next-method-p) (call-next-method))
[00:08:43] <gilberth> pjb: Well, I did not not intend to do that as I simply forgot to specialize the method. But yes, right, it shouldn't bus fault. Although I cannot expect the Lisp being in any way operational otherwise.
[00:10:29] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-21c6-3d7c-4be1-f3b8.res6.spectrum.com)
[00:11:31] <selwyn> gilberth finds another bug
[00:11:37] <selwyn> which implementation was it
[00:12:16] <gilberth> CCL, of course.
[00:12:30] <gilberth> selwyn: My second bug for today.
[00:12:34] <gilberth> bbl
[00:13:15] <lotuseater> of course :D
[00:14:08] <lotuseater> SBCL := StaSi Behörde (für) Common Lisp
[00:15:40] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-21c6-3d7c-4be1-f3b8.res6.spectrum.com) (Ping timeout: 240 seconds)
[00:15:57] <lotuseater> so in English "StateSecurity Bureau for Common Lisp"
[00:18:22] <pjb> :-)
[00:25:19] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-21c6-3d7c-4be1-f3b8.res6.spectrum.com)
[00:36:00] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-21c6-3d7c-4be1-f3b8.res6.spectrum.com) (Remote host closed the connection)
[00:36:13] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-21c6-3d7c-4be1-f3b8.res6.spectrum.com)
[00:46:40] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 240 seconds)
[00:52:40] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-21c6-3d7c-4be1-f3b8.res6.spectrum.com) (Ping timeout: 240 seconds)
[00:54:45] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[01:08:38] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[01:36:20] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:42:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:46:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:47:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:51:06] *** Joins: mr_rob0t (~user@154.6.18.155)
[01:52:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[01:56:10] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[01:56:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:59:40] *** Quits: mr_rob0t (~user@154.6.18.155) (Ping timeout: 240 seconds)
[02:00:59] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:22:01] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: later)
[02:26:00] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:59:02] *** Joins: selwyn (~selwyn@user/selwyn)
[03:02:15] *** Joins: mark-eliot (~mark-elio@154.6.18.5)
[03:02:18] <mark-eliot> hey
[03:07:46] *** Quits: mark-eliot (~mark-elio@154.6.18.5) (Quit: Lost terminal)
[03:15:44] *** Joins: mark-eliot (~mark-elio@154.6.18.5)
[03:17:31] <mark-eliot> hey
[03:18:23] <mark-eliot> anyone on?
[03:18:46] <hayley> No
[03:18:51] <mark-eliot> damn
[03:18:58] <mark-eliot> how are you?
[03:30:51] <kakuhen> zzz
[03:32:26] *** Quits: mark-eliot (~mark-elio@154.6.18.5) (Quit: Lost terminal)
[03:34:07] <gilberth> kakuhen: See, you scared mark-eliot away. Bad for Lisp Café sales in beverages.
[03:38:23] * hayley uploaded an image: (195KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/HpJONfgakhUMKMlSvalJsKgJ/metacircularity.jpg >
[03:41:12] <kakuhen> gilberth: i was never a good sales person
[03:44:12] *** Quits: nocturnal-one (~nocturnal@212.53.128.102) (Ping timeout: 245 seconds)
[03:45:27] <gilberth> kakuhen: Neither am I.
[03:45:53] <gilberth> Oops, my alter ego was also scared.
[03:47:06] *** Quits: random-nick (~random-ni@87.116.181.225) (Ping timeout: 250 seconds)
[03:47:44] <gilberth> Reminds me, that I need a keepalive mechanism. And why would an IRC server just stop talking to me?
[03:48:15] <hayley> Not enough layers of metacircularity?
[03:48:56] *** Joins: nocturnal-one (~nocturnal@212.53.128.102)
[03:48:56] *** ChanServ sets mode: +o nocturnal-one
[03:49:40] <gilberth> At least I upgraded from zinc to silver. Is there also gold.libera.chat?
[03:50:07] <hayley> [This message can only be viewed with Libera Gold]
[03:50:54] <gilberth> Heh. To get one month free enter "FREENODESUX".
[03:51:53] <pjb> :-)
[04:04:40] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[04:10:51] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:11:35] *** Joins: mark-eliot (~user@154.6.18.5)
[04:11:54] <mark-eliot> santa got high, now everything is funny
[04:12:09] <mark-eliot> someone had a gummy; he thiught he might try!
[04:12:28] <mark-eliot> his mouth is so dry, his teeth are kindy dingy
[04:12:40] <mark-eliot> howd he ever get so high?
[04:13:33] *** Quits: mark-eliot (~user@154.6.18.5) (Remote host closed the connection)
[04:22:31] <kakuhen> [This message requires a Libera Gold account to view]
[04:26:48] <hayley> https://www.youtube.com/watch?v=YRrGlDxZYwM
[04:26:49] -ixelp- Gommorah (A Nursery Rhyme) - YouTube
[04:38:40] <gilberth> SPECIAL OFFER! For a limited time only. Send "RU5TI55HIT" to +61 555 1337 for three month free #lispcafe Gold+ access.
[04:39:19] * hayley uploaded an image: (36KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/EPhjkKSImCOXIBNYkBRoMyiP/littlepogalankay.png >
[04:40:16] <kakuhen> what's wrong with rust :3c 
[04:40:22] <kakuhen> or rather, ru5t
[04:40:58] <gilberth> Careful, hayley is around. I hope I got her mobile number right.
[04:41:25] <hayley> kakuhen: https://www.youtube.com/watch?v=8TEAMHgrxi0
[04:41:25] -ixelp- JJ Burnel - Crabs - YouTube
[04:43:03] * hayley uploaded an image: (58KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/fDRxbaYlSRhKjhubXkNXmzWK/pauseless.png >
[04:47:20] <kakuhen> im in the middle of a backup, and returned to a frozen progress bar
[04:47:34] <kakuhen> i was afraid the mac zfs driver had the same mysterious bug as when i first used it months ago
[04:47:39] <kakuhen> thankfully that's not the case
[04:48:00] <kakuhen> seeing the output of "zpool status" is one of the most scary things for my backups
[04:49:13] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 248 seconds)
[04:49:28] <gilberth> But you said, you face a broken progress bar.
[04:49:42] <kakuhen> turns out it was just my hard drive being slow
[04:50:07] <gilberth> So it only appears to be frozen.
[04:50:09] <kakuhen> I saw it stuck on 3.66 GB for half a minute and decided to check "zpool status," everything was fine thankfully
[04:50:11] <kakuhen> yeah
[04:50:39] <kakuhen> the first time i tried making time machine backups over zfs, something went wrong with my pool (idk what since logging sucks on mac os)
[04:50:47] <kakuhen> and then something in kernel space got stuck in an infinite loop
[04:50:55] <kakuhen> kernel_task taking up 100% cpu on all cores was quite the sight for me
[04:51:13] *** Joins: aeth (~aeth@user/aeth)
[04:51:16] <kakuhen> and my pool wouldn't respond to any command whatsoever, even with the force flag
[04:51:32] <gilberth> My timemachine backups currently go over a VPN via DSL to my evil house 100km. That's slow. But then time machine always was unbearable slow.
[04:51:51] <kakuhen> yeah, I dont want to downgrade to Bug Sur or Monterey, so I'm stuck with HFS inside a ZVOL
[04:51:59] <kakuhen> ironically, it's somehow a bit faster than HFS itself
[04:52:03] <gilberth> Hmm, my linux box at times appears to freeze, when the RAID array is verified. No I/O bandwidth left for anything.
[04:52:19] <kakuhen> i've also experienced funny things with Btrfs on Linux
[04:52:58] <gilberth> I'm not brave enough to try any other file systems but ext.
[04:53:37] <kakuhen> i was spoiled by zfs thanks to freebsd
[04:53:47] <kakuhen> and i dont understand how freebsd users cope with UFS
[04:54:05] <gilberth> It definitly sounds very cool. ZFS that is.
[04:54:06] <kakuhen> It's almost like clockwork; someone tells me "oh I use UFS because I heard <ZFS FUD here>."
[04:54:18] <kakuhen> Then a day later, "god damnit another SU+J error on startup, my filesystem is screwed!"
[04:54:53] <gilberth> Last time, I found anything in /lost+found was with SYSV.
[04:55:03] <kakuhen> wow
[04:56:38] <gilberth> As much as I am bug haunted as lucky I appear to be with storage. Also, not a single hard disk failed for me. Never ever.
[04:56:49] <kakuhen> Me too!
[04:57:01] <kakuhen> I always see online people claiming their hard drives fail in 1-2 years.
[04:57:39] <kakuhen> Meanwhile I have decade-old hard drives that were powered on daily that still work
[04:57:40] <gilberth> Still I am kinda paranoid with backups. My hard drives are a bit older and run 24/7,
[04:58:37] <gilberth> However, I am always a bit nervous, when I need to spin them up again every other year or so.
[04:59:30] <kakuhen> makes sense; even SSDs can suffer quite a lot of bit rot when kept off for long periods of time
[04:59:49] <gilberth> kakuhen: I can't beat a decade. The PPRo which used to run CL-HTTPD is retired.
[05:00:05] <kakuhen> I can't find the paper right now, but some researchers found that SSDs have worse bit rot than HDDs if they're kept powered off with high ambient temperatures (think >30C)
[05:00:40] <gilberth> Really? Ok then, I'll stick to spinning platters.
[05:01:39] <kakuhen> well, to be fair, the bit rot is bad when the ambient temperature is well past room temperature (20-22C)
[05:01:42] <gilberth> But it's only so called server disks for 24/7 for me, idk if they are really any different. And ECC RAM.
[05:01:59] <kakuhen> im not sure how many people are storing their SSDs in a desert, but you shouldn't do that if you want less bit rot over long spans of time
[05:02:14] <gilberth> kakuhen: I would freeze to death at 20°C.
[05:03:09] <kakuhen> wow! my ideal temperature is 15-20C
[05:04:21] <gilberth> I once archived, that is copied, ~400 or so 5 1/4" floppy disks and found exactly one bad sector. Some already were like 20yo old.
[05:05:12] <gilberth> kakuhen: It's 24°C for me. But then I am very slim, no fat for isolation.
[05:05:37] <kakuhen> i am also slim, but my hands sweat easily once it's past 20C, so i've always preferred colder temperatures
[05:06:18] <kakuhen> probably TMI, but when I was in high school and had to read books in the summer, I'd be able to track my progress by seeing the light sweat stains on the side of the pages.
[05:06:38] <gilberth> My hands are also like that, but it has been getting better. I just prefer wet hands to freezing.
[05:07:27] * lotuseater is awake again
[05:07:35] <kakuhen> consequently, outside of the winter months, i have to regularly clean my keyboard :<
[05:07:56] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[05:08:10] <gilberth> Only dumb thing is, that I have trouble opening bottles or other packages, which you need to rip open. Too little friction.
[05:08:32] <dave0> maw
[05:08:58] <lotuseater> dave0!
[05:09:32] <kakuhen> gilberth: to open (beer) bottles, i just use  door latches
[05:09:33] <dave0> maw lotuseater !
[05:09:40] <lotuseater> wuff
[05:10:18] <lotuseater> or like a turtle does
[05:10:37] <dave0> wuff like a turtle!
[05:10:44] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 250 seconds)
[05:10:48] <gilberth> kakuhen: I was talking about bottles with a screw cap. For those I have a little pipe wrench in the kitchen.
[05:10:53] <kakuhen> aah
[05:11:12] * gilberth quickly claims the space before everyone else notices.
[05:11:22] <kakuhen> if i have trouble opening those, then i use a towel
[05:11:34] <gilberth> Doesn't work for me.
[05:11:43] <kakuhen> it's 50/50 for me
[05:11:56] <kakuhen> worst case scenario i need someone else to open it for me
[05:12:11] <gilberth> A wernch gives be a 100% success rate.
[05:12:33] <gilberth> kakuhen: Hard to find someone else, when you live alone.
[05:12:46] <gilberth> s/be/me/ ;again
[05:12:50] <lotuseater> indeed
[05:13:27] <gilberth> Why do I always mix up 'b' and 'm'?
[05:14:43] <kakuhen> the keys are close
[05:14:46] <lotuseater> are you using a nonstandard layout?
[05:15:15] <lotuseater> now that I have the new keyboard I should switch finally ...
[05:15:52] <gilberth> kakuhen: I also have a hammer in the kitchen. And a screw driver and a screw. The former is for crushed ice, the latter for pulling candle stubs.
[05:16:03] <kakuhen> I see
[05:16:31] <gilberth> lotuseater: The is an 'n' in between and therefore it being a typo does not work as an excuse.
[05:17:04] <lotuseater> yes for the standard layout
[05:17:05] <dave0> kakuhen: you need someone to open your beer?
[05:17:27] <kakuhen> I need the door latch yes
[05:17:27] <gilberth> As my wife moved in, she was wondering what I need tools for in the kitchen and assumed I just left them there.
[05:17:59] <lotuseater> maybe she does it by telekinetic powers
[05:18:01] <kakuhen> I know some people who can open beer bottles with their bare hands, and idk how they do it
[05:18:24] <gilberth> I can't even open them with a lighter.
[05:18:33] <lotuseater> me neither
[05:18:43] <kakuhen> granted, the people i know how can do this fall into two categories
[05:18:54] <kakuhen> (1) they're my dad, or (2) they served in the military at some point in their lives
[05:19:48] <gilberth> Both sets are disjoint?
[05:19:52] <kakuhen> yes
[05:21:22] <gilberth> But said kitchen is 100km away, yet I find similar tools here at my cousin's place.
[05:21:49] <gilberth> Perhaps it's the genes? Who knows.
[05:23:33] * gilberth doesn't feel like hacking today.
[05:25:21] <lotuseater> hmm
[05:31:23] <gilberth> As I said, sport is dangerous. I just read that 3,000 people were infected with Corona at the Wembley arena. I wonder how many of them will die because of the greed of the football clubs. Did I mention, that I don't like soccer?
[05:32:58] <lotuseater> so some of them don't like computers or math
[05:34:47] <gilberth> But my profession is not financed by de facto taxes, nor kills people on purpose. And does not foster violence either.
[05:34:56] <lotuseater> or some other of those beautiful nontrivial things reality or the universe has in charge
[05:39:47] <gilberth> And news about computers does not dominate the news either.
[05:42:31] <lotuseater> bread and games for the plebs
[06:02:00] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[06:02:23] *** Joins: Alfr (~Alfr@user/alfr)
[06:06:24] <gilberth> Stops them from thinking too much.
[06:07:16] <lotuseater> yes
[06:13:03] <dave0> time for a walk! bbl
[06:13:35] <dave0> byes
[06:13:40] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[06:26:40] <lotuseater> any series suggestion?
[06:36:30] * gilberth is tempted to write an OXYD clone in CLIM.
[06:36:30] <lotuseater> oh what's oxyd? :)
[06:36:30] <gilberth> Oh dear, those youngsters. Give me a second, I'll show you.
[06:37:12] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Ping timeout: 245 seconds)
[06:37:21] <gilberth> <https://www.youtube.com/watch?v=tm6ZgMKBL38&t=200s> Though my machine was monochrome.
[06:37:21] -ixelp- Oxyd - Atari ST (1992) - YouTube
[06:37:32] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[06:38:37] <lotuseater> oh cool, with laz0r
[06:39:24] <lotuseater> what does it take to write something like that with CLIM?
[06:39:30] <gilberth> There is a free^WGPLed clone called Enigma, but nobody told the authors about the conservation of impulse.
[06:40:13] <gilberth> lotuseater: Not much. I could just use output records like in animation demo. Sprites, if you like :)
[06:40:34] <lotuseater> those tricky laws of physics
[06:41:17] <lotuseater> okay, you're the absolute CLIM expert here ^^ I wouldn't even know how to start and will be frustrated
[06:41:18] <gilberth> lotuseater: OXYD has a pretty good simulation of physics. There are different grounds and boxes to push and stuff.
[06:41:57] <lotuseater> yes the video still runs, very cool
[06:42:57] <kakuhen> i really wanted to use the objective-c bridge in ccl to use cocoa for my lisp programs, but im too lazy to figure it all out
[06:42:58] <gilberth> You don't need to be an expert here. Have you seen my five minute animation hack, I once made?
[06:43:13] <kakuhen> one day someone will make a lisp version of gtk4rs  (sorry for mentioning a dirty ru5t library)
[06:43:28] <lotuseater> oh I would have thought you used it many times for things
[06:43:44] <lotuseater> no I didn't see it
[06:44:02] <lotuseater> it's totally ok kakuhen :)
[06:44:13] <gilberth> Well, Cocoa isn't that fast to get. You would end up reading the documentation all day to figure things out. Or you would need a good book.
[06:44:31] <kakuhen> my issue is more with getting the objc bridge to actually work on my version of os x
[06:44:36] <kakuhen> I keep getting null macptrs for the most basic things
[06:44:46] <kakuhen> otherwise i'd be ready to go to make graphical mac programs with ccl
[06:44:47] <lotuseater> i find this QML for Qt interesting, you define it declaratively. for example some CL App for Android uses that with ECL
[06:44:57] <kakuhen> oh hey i know which one youre talking about
[06:44:59] <kakuhen> i have it on my phone, too!
[06:45:10] <gilberth> That's not the bridge. It's you then. Cocoa didn't like what you wanted it to do.
[06:45:17] <kakuhen> :<
[06:45:18] <lotuseater> yes Cocoa sounds with containing a big amount of details one has to get
[06:45:24] <kakuhen> all I did was allocate an NSNumber and somehow I got a null macptr
[06:45:33] <kakuhen> i was just following the clozure cl docs themselves !! >.<
[06:46:06] <lotuseater> kakuhen: it was this CL REPL or this one sokoban clone
[06:46:18] * gilberth never allocated an NSNumber.
[06:47:08] <kakuhen> gilbert: NSNumber *x = [NSNumber numberWithInteger:51];
[06:47:16] <kakuhen> this works fine almost everywhere
[06:47:35] <kakuhen> but the equivalent in CCL would give me a null macptr unless I manually did the usual alloc-init　steps for NSObjects
[06:47:41] <gilberth> kakuhen: Sure, that's easy. I just never had the need to do that.
[06:47:43] <kakuhen> ironically, NSNumber is not an NSObject, it belongs to a different root class.
[06:47:46] <kakuhen> oh
[06:47:54] <kakuhen> well if you ever have to deal with NSArrays and need to pass numbers into them
[06:47:57] <kakuhen> then NSNumber is kinda mandatory
[06:48:30] <kakuhen> also turns out I am wrong about NSValue, it is an NSObject
[06:48:43] <kakuhen> I always forget the root classes: NSObject, NSFormatter, NSCoder, and 2 other ones I can't care about
[06:48:52] <gilberth> However (make-instance 'ns:ns-number :with-integer 10) => #<NS-NUMBER 10 (#xA37)>
[06:48:54] <lotuseater> what does the NS stand for?
[06:49:03] <lotuseater> namespace? ^^
[06:49:04] <kakuhen> nextstep
[06:49:46] <gilberth> lotuseater: <http://bauhh.de/free-clim/clim-animation.mp4> and <http://bauhh.de/free-clim/clim-animation-with-output-records.mp4> and <http://clim.rocks/gilbert/clim-animation-with-output-records.lisp>
[06:49:49] <kakuhen> or with great imagination you can think NeXT-Sun, since both companies worked together for OPENSTEP.
[06:50:01] <lotuseater> thx
[06:50:02] <kakuhen> but I am willing to bet  my money it refers to NeXTSTEP
[06:50:03] <gilberth> kakuhen: What is so special about Gtk4?
[06:50:30] <lotuseater> the first looks like harmonic oscillator
[06:50:39] <gilberth> As a German it always feels a bit awkward to type "NS".
[06:50:57] <kakuhen> gilberth: well, unlike Qt, you will be interfacing with a language that has a stable ABI
[06:50:58] <gilberth> lotuseater: Sure, that is sine function at work.
[06:51:09] <kakuhen> and many of the bad/tedious parts of gtk-3 were replaced with better things in gtk-4
[06:51:21] <kakuhen> lots of boilerplate code that was necessary for GTK 3 and under is no longer necessary with 4
[06:52:07] <gilberth> Hmm, when did Gtk abandomed using C? I mean C is stable, isn't it?
[06:52:23] <kakuhen> I was mostly joking about Qt using C++, which is much more tedious to interface with than C.
[06:52:24] <gilberth> kakuhen: I wonder when they will reinvent CLIM.
[06:52:35] <kakuhen> GTK-4 is still mostly C
[06:52:37] <lotuseater> i will try the code later on the manjaro laptop, loading and running mcclim works out much better
[06:52:57] <gilberth> C++ is poison for libraries. BeOS was bitten by that.
[06:53:16] <lotuseater> so other GUI toolkits converge to CLIM ^^
[06:53:35] <gilberth> Perhaps.
[06:53:48] <kakuhen> I wonder how CAPI is implemented
[06:53:55] <kakuhen> I'm too stingy to drop $1,500 on a Lisp compiler
[06:54:02] <gilberth> In Lisp?
[06:54:10] <kakuhen> ok thanks
[06:54:24] <kakuhen> I mean how they implemented it; obviously they are probably using Lisp
[06:54:24] <gilberth> Well CAPI is a bit like what I consider for Silica. That is CLIM w/o the presentation stuff.
[06:54:37] <lotuseater> is this with the LispWorks implementation?
[06:54:43] <kakuhen> But for instance, CLIM uses a X/Motif backend on OS X, whereas CAPI allegedly uses native backends on OS X
[06:54:50] <kakuhen> an X/Motif backend*
[06:55:23] <kakuhen> by "native" I mean the widgets translate directly to Cocoa, and you don't need to use XQuartz or anything to run the software.
[06:55:24] <lotuseater> and I doubt this mocl for shipping out applications to iOS is a real CL
[06:55:28] <gilberth> Yes, because they perhaps never bothered writing a proper Cocoa backend. Look at CLIM2, it's pretty awful.
[06:56:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[06:57:09] <kakuhen> Ltk also looks interesting to me
[06:57:20] <gilberth> CCL runs under iOS. And mocl is pretty much CL, it just isn't interactive. It's an ancient project for compiling to C using whole program type inference resurreced. I forgot the name.
[06:57:33] <kakuhen> You don't have native UI per se, but you don't deal with ugly FFI mess, since the Lisp will simply be communicating with the Tcl interpreter.
[06:58:34] <gilberth> kakuhen: Well, my secret plan is getting CLIM ready for cross-platform native toolkit use. I don't care so much about all the presentation based stuff.
[06:58:42] <kakuhen> i see
[06:59:06] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[06:59:57] <kakuhen> I just want to have a pretty GUI with Common Lisp
[07:00:15] <kakuhen> I am very partial toward Cocoa and Qt as far as GUI stuff goes; but maybe one day I'll become enlightened by CLIM
[07:00:29] <gilberth> This is why I want to pull that apart into a "we talk to a window system, do graphics, and have gadgets" and "we have this nifty Lisp Machine like interface". Seriously, I believe most, when they hear CLIM, assume that they must use the latter, which is not what most people want and casual users certainly could use.
[07:02:55] <kakuhen> oh also, unrelated, but the resource I have for Cocoa is so old that uhh, it has this funny paragraph that aged well
[07:03:21] <gilberth> Well, any toolkit I saw to date was a pain to actually use [as an application programmer]. Actually of all of them, I liked Xaw most. It's always a whole host of objects and controllers and views and what not to create for the most simple tasks.
[07:03:28] <kakuhen> >Ruby is increasingly used for Cocoa development. Ruby has a Smalltalk-like object model with Perl-like syntax. The object model means that it is a good fit for Cocoa, although the syntax is an acquired taste.
[07:03:56] <kakuhen> i can only think of ruby being used for two things: cocoapods and homebrew; and I actively avoid both after having tried them
[07:04:29] <gilberth> I find it funny, that constraint-based layout is rediscovered, after what? 30 years?
[07:05:09] <kakuhen> "This UI will break when resizing the window or if we want to translate it!"
[07:05:19] <kakuhen> "Okay, let's just not translate the interface, and make the window a fixed size."
[07:05:24] <kakuhen> :3c 
[07:05:37] <gilberth> "This website is optimized for 800x600."
[07:06:07] <kakuhen> I regret sticking with Objective-C and Interface Builder the moment I have to localize anything and the constraints mysteriously break
[07:06:46] <kakuhen> I have a bad habit where I will design interfaces with Japanese in mind, then retroactively apply English (and sometimes Chinese) translation.
[07:07:01] <gilberth> I somehow can't work with the Interface Builder. It feels like an endless fight for the most basic stuff.
[07:07:03] <kakuhen> labels align perfectly when system langauge is in Japanese...then when I switch to English or Chinese they're all over the place
[07:07:13] <kakuhen> thanks, "auto layout"
[07:08:01] <kakuhen> Auto Layout sells itself as a solution to a problem when it is in fact a problem looking for a solution
[07:08:37] <gilberth> Heh, so the regular expressions of GUI design?
[07:09:02] <kakuhen> with that said, SwiftUI is much more friendly for localizations... I am working on a FOSS clone of some time machine utility, and I've successfully managed to keep the interface in-tact despite having translations for English, Chinese, French, and Japanese. Soon adding Russian once one of my friends has time to translate things.
[07:09:24] <gilberth> But I must confess, that I don't have much experience with the Interface Builder.
[07:09:40] <kakuhen> Interface Builder is great until you have to supply constraints or do any localization.
[07:09:52] <kakuhen> In other words, IB is great for drafting, terrible for producing a finished UI.
[07:10:12] <kakuhen> SwiftUI is the opposite in my experience. You need to already have an idea of how the final UI should look like, then code accordingly.
[07:10:19] <gilberth> My error then perhaps is, that I want windows and dialogs to resize nicely. ok.
[07:10:41] <kakuhen> correct; IB loses all of its advantages (and greatness) the moment you want to be able to resize a window heh
[07:10:54] <kakuhen> oh also when you want the interface in more than one language.
[07:11:43] <gilberth> Which is sth I don't want. But I wonder what the trouble is with that?
[07:12:01] <kakuhen> with localization?
[07:12:08] <gilberth> yes.
[07:12:10] <kakuhen> IB generates the worst IDs ever for UI elements
[07:12:43] <kakuhen> the string files are absolute garbage and poorly documented, and there are edge cases where you have to pry into the XML file itself if you want to localize something specific (e.g. the label in a table column's title)
[07:12:50] <kakuhen> I would know since I had to do this recently.
[07:13:26] <kakuhen> One (ugly) workaround is to make IBOutlets for every UI element possible, then set the labels to NSLocalizedString's in the windowDidLoad method (or viewDidLoad method for iOS)
[07:13:31] <gilberth> Oh dear. So nothing like gettext, say?
[07:13:36] <kakuhen> Correct.
[07:13:49] <kakuhen> With SwiftUI this problem is gone because you don't have XIBs or Storyboards to begin with.
[07:14:12] <kakuhen> You just set the label to an NSLocalizedString with a key of your choice, then make a Localizable.strings file for your target language and supply a string for the key.
[07:14:34] <gilberth> Ok. I keep that in mind for my CLIM.
[07:14:35] <kakuhen> Localizing XIBs can be done in two (really, three) ways and they all suck.
[07:14:54] <kakuhen> SwiftUI has really primitive localization, yet it is miles ahead of Interface Builder. Let that sink in.
[07:15:22] <kakuhen> SwiftUI's case is literally just passing in a string as a key to some global hash table and getting a string back.
[07:15:35] <kakuhen> Nonetheless way better than what you'd have to do for XIBs and Storyboards.
[07:15:36] <gilberth> Would also switch layout direction to writing direction?
[07:15:55] <kakuhen> SwiftUI allegedly has support for that. For Interface Builder the situation is even trickier.
[07:16:03] <kakuhen> I haven't tried it myself, personally.
[07:16:21] <kakuhen> Maybe for fun, I will try making a Japanese app and use right-to-left text.
[07:16:36] <kakuhen> If I'm feeling extra masochistic, I will maybe even use vertical text instead of horizontal.
[07:17:04] <gilberth> Yes, but is this sth, one needs? I guess so. I mean a left-aligned label e.g. is perhaps rather "begin"-aligned.
[07:17:17] <gilberth> Is there really vertical text in use?
[07:17:35] <kakuhen> thankfully in the case of japanese and chinese, you can be fine with most sane text layouts
[07:18:00] <kakuhen> but for languages like hebrew or arabic, you are forced into a text orientation that is uncommon in the west and hence way less supported on computers etc.
[07:18:27] <kakuhen> it's very ironic; horizontal text became much more commonplace in Japan in large part due to computers being very limited in this regard.
[07:18:43] <gilberth> Well, both hebrew and arabic are just right to left, but still in lines.
[07:18:56] <kakuhen> i should clarify, horizontal + left to right
[07:19:11] <kakuhen> it's still commonplace to see vertical + right to left in things like books and newspapers.
[07:19:20] <kakuhen> i.e. not computer media
[07:19:39] <lotuseater> kakuhen: where are you from?
[07:19:57] <kakuhen> united states
[07:19:59] <gilberth> I was curious about vertical text. I mean all the Chinese text I ever saw in user manuals, websites, etc. always was horizontal.
[07:20:02] <lotuseater> okay
[07:20:20] <kakuhen> gilberth: unfortunately i dont know the conventions for chinese typography
[07:20:46] <kakuhen> but in theory they are also able to do what japanese can do, that is, use almost any (sane) layout you could think of.
[07:21:09] <kakuhen> in most cases it's easy to intuit the direction of text
[07:21:23] <gilberth> Books could be vertical. But I am talking about computers. Perhaps, I'll install a Chinese or Japanese version of Windows. I hope, I'll find any menu item.
[07:22:05] <gilberth> Or macOS.
[07:22:56] <gilberth> However for right to left script, I am wondering, if you also mirror the layout of buttons, etc.
[07:23:33] <kakuhen> anyway thanks to arbitrary direction, you can get funny coincidences in japanese text
[07:23:37] <kakuhen> https://stat.ameba.jp/user_images/20190605/03/nightwish-daisuki/0f/bd/j/o1200080014430057887.jpg?caw=800
[07:23:56] <kakuhen> boxed portion roughly translates to "let's meet up in tokyo"
[07:24:06] <kakuhen> but the text direction is very obviously horizontal and left to right
[07:24:32] <kakuhen> nonetheless the characters in the box match up just enough to produce a coherent sentence in japanese when read top-to-bottom 
[07:25:01] <gilberth> I see. Fun.
[07:27:09] <gilberth> Anyhow, I think CLIM faces a marketing problem.
[07:29:35] <kakuhen> my only issue with CLIM is that I don't like the appearence, heh
[07:30:20] <kakuhen> At least on OS X it somehow manages to make X/Motif look awful to my eyes, and I say this despite trying out CDE on FreeBSD a few months ago.
[07:30:37] <kakuhen> I actually really like the way Motif was used for CDE
[07:31:04] <gilberth> Heh, for McCLIM I invested quite some time to make it look like Motif :)
[07:31:33] <kakuhen> i think another potential problem is that XQuartz looks awful in general thanks to some magical changes Apple made under the hood for text rendering
[07:31:39] <kakuhen> It's sooo blurry on later versions of OS X
[07:31:44] <gilberth> But there is no way around to use the native gadgets.
[07:32:51] <gilberth> XQuartz doesn't render text unless you use the old bitmap fonts. Keith Packard didn't believe in text rendered in the X server.
[07:33:54] <gilberth> The youngsters believe that X11 should not do anything more than just blitter. It's a sad story.
[07:35:35] <gilberth> kakuhen: One common problem with bitmap fonts is that people forget to pick those fonts that are actually there. Then with old fashioned bitmap fonts the X server would attempt to scale it, with very bad results.
[07:36:04] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[07:37:31] <gilberth> This is where this old myth is coming from that fonts look ugly in X11. Misconfiguration. (I am not talking about anti-aliased fonts here).
[07:38:29] *** Joins: notzmv (~zmv@user/notzmv)
[07:39:12] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[07:52:32] <hayley> https://www.youtube.com/watch?v=Q6QQRHbkbh4
[07:52:33] -ixelp- BLT Sausage - YouTube
[07:53:33] <gilberth> Nice 404 page of TI: <https://www.ti.com/staging/error404.htm>
[07:54:48] <notzmv> ouo
[07:55:04] <notzmv> heh
[07:55:46] <hayley> ouo
[07:57:21] <hayley> https://www.youtube.com/watch?v=V7_jCAu7ucw the chemical GC
[07:57:21] -ixelp- This Evil Chemical Reacts with Nearly Anything - YouTube
[08:01:22] <notzmv> lol
[08:04:15] <lotuseater> or you use hydrofluoric acid in a bathtub ^^
[08:04:35] <contrapunctus> lotuseater: ooooh.
[08:04:44] <contrapunctus> I understood that reference 🙂
[08:04:50] <lotuseater> nice
[08:05:14] <contrapunctus> (Of course, the peril of watching world-famous stuff is...everyone does.)
[08:07:19] <hayley> https://www.youtube.com/watch?v=CNIyBTrya9o "Bollocks", said Thomas
[08:07:20] -ixelp- 06: Tamiz and the Unfeasibly Fast Bus - YouTube
[08:08:32] <notzmv> hey hayley do you like dathings 0u0
[08:08:41] <hayley> Yes.
[08:08:45] <notzmv> based
[08:08:51] * hayley is going through the olde poops this week.
[08:08:59] <notzmv> s o o s
[08:09:23] <lotuseater> ah that thingys
[08:09:42] <hayley> https://www.youtube.com/watch?v=kl0hT_d1dBU "You tosser," said Bertie.
[08:09:43] -ixelp- KOB 3 - Tomarse & the Downsides of Alcohol - YouTube
[08:12:01] <lotuseater> https://www.youtube.com/watch?v=sJC3JsvhM9o
[08:12:02] -ixelp- E03: C# vs Java: Which is Faster? Computer Language Drag Racing Series - YouTube
[08:12:23] <lotuseater> he mentions in the beginning your favorite language, Ru5t
[08:12:23] <notzmv> is zig still leading the benchmarks?
[08:12:48] <lotuseater> could be. depends for which kind of benchmarks
[08:12:59] <notzmv> I mean their benchmarks for that series
[08:13:12] <notzmv> that's the prime sieve race right
[08:13:41] <lotuseater> maybe after zig comes zack
[08:13:55] <hayley> "hahah JIT inlining goes bRRRRRRRRRRRR"
[08:14:09] <notzmv> zack fertig? lol
[08:14:14] <lotuseater> brrrrr
[08:14:25] <lotuseater> yes zack fertig aus, Ende.
[08:14:34] <notzmv> haha
[08:15:09] <hayley> Also this C♯ code is one giant race condition. We increment passes in parallel, and assign firstSieve non-atomically? Hell no.
[08:15:16] <lotuseater> in one of my favorite (German produced) movies: so what's your name? "fertig aus" that's it for my surname
[08:15:53] <lotuseater> hayley: they seem to like live in such environment
[08:16:32] <lotuseater> so if everything is a race condition in which you live, you can say in the inner there is all fine
[08:17:12] <notzmv> lol
[08:17:14] <hayley> And, of course, this kind of parallelism doesn't do anything. It does the exact same thing on all threads. What a crock of shit!
[08:18:13] <lotuseater> "but so much companies and people use it, it must be one of the best things possible"
[08:18:48] <hayley> I dunno about this, but this guy sounds pretty dumb.
[08:19:02] <lotuseater> you mean Dave?
[08:19:06] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[08:19:09] <notzmv> I don't think he's written the code right
[08:19:25] <notzmv> I get the impression he had setup a github for people to throw in their implementations
[08:19:27] <hayley> Yeah, I mean there is literally no point to this "parallelization".
[08:19:38] <lotuseater> He blinks little, also seems to me to be reading bluntly.
[08:21:08] <lotuseater> lol "the language lisp, which we'll cover later, also uses a bytecode stream"
[08:21:17] <notzmv> haha
[08:21:18] <hayley> Actually parallelizing the sieve of Eratosthenes is non-trivial, because there are a lot of data dependencies, and they don't decompose neatly.
[08:21:38] <lotuseater> it is indeed
[08:21:55] <notzmv> anyone looked at their CL implementation yet? hmm
[08:21:56] <lotuseater> non-trivial i mean
[08:22:01] <hayley> Well, IIRC you can find primes under sqrt(n), and then cross off everything in parallel.
[08:22:07] <lotuseater> CLISP goes brrrrrr
[08:22:44] <hayley> notzmv: Yeah, someone redid the Lisp code because the first version was total shit.
[08:22:45] <lotuseater> yes, if certain conditions hold you can do it as parallelized as you can
[08:22:52] <notzmv> nice
[08:23:06] <notzmv> is it looking dank yet
[08:23:09] <hayley> Like, what is this crap <https://github.com/PlummersSoftwareLLC/Primes/blob/drag-race/PrimeLisp/solution_1/PrimeSieve.lisp>
[08:23:10] -ixelp- Primes/PrimeSieve.lisp at drag-race · PlummersSoftwareLLC/Primes · GitHub
[08:23:21] <lotuseater> lel
[08:23:49] <hayley> The second version is much nicer: https://github.com/PlummersSoftwareLLC/Primes/blob/drag-race/PrimeLisp/solution_2/PrimeSieve.lisp
[08:23:49] -ixelp- Primes/PrimeSieve.lisp at drag-race · PlummersSoftwareLLC/Primes · GitHub
[08:24:27] <notzmv> wow 220x speed up haha
[08:24:28] <notzmv> nice meme
[08:24:32] <lotuseater> so i can now finally learn good style from that :D
[08:24:56] <notzmv> yeah that's what I was interested in 0u0
[08:24:56] <lotuseater> I touched my Sundaram Sieve this week again.
[08:25:10] <hayley> Well, it is not hard to go faster than the original code, which uses global variables for some reason.
[08:25:17] <lotuseater> and worked from 0 on an Atkin sieve, but something doesn't work out yet so well
[08:25:45] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 248 seconds)
[08:26:11] <lotuseater> yeah it's funny, first (defparameter rawbits ()) and then a setq in the prime-sieve function
[08:27:03] <notzmv> lol
[08:27:19] <hayley> A really parallel sieve would probably be segmented (see https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes#Segmented_sieve), and thus everything but the first chunk could be done in parallel.
[08:29:09] <hayley> Also Dave confuses that the JVM and IR bytecodes are basically irrelevant, as either VM uses machine-word-sized integers, and generates native code. (Really, the same goes for optimized Lisp code too...)
[08:29:51] <hayley> The worst part of it all is that the use of bit arrays in SBCL was optimized due to benchmark code.
[08:29:54] <notzmv> I think he used to work mostly with cpp right
[08:30:06] <gilberth> Next time I see Lisp indented that funny, I'll fight back and indent C like Lisp.
[08:30:13] <hayley> Yes, but if you are going to compare 45 languages, don't be a dumb-ass about it.
[08:30:21] <notzmv> heh
[08:30:23] <notzmv> true
[08:30:24] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[08:30:37] <lotuseater> how do bitvectors/bitarrays work in SICL?
[08:30:43] <notzmv> also what's so bad about indenting C like lisp :^)
[08:30:53] <notzmv> other than everybody hating it :p
[08:31:10] <gilberth> It would sure save space.
[08:31:15] <hayley> Well, they are stored as a bit vector, and what happens in IR is that the right word is picked first, and then the bit is extracted from it.
[08:31:47] <hayley> I had to fix it last week, when I fixed register allocation so that it would actually allocate registers for unboxed locations.
[08:31:52] <lotuseater> notzmv: the more C macros are defined that use each other the more parentheses they need
[08:32:02] <kakuhen> notzmv: [for [some [reason [C-niles [and [C++ lovers hate: this]]]]]];
[08:32:11] <notzmv> lmao
[08:32:42] <kakuhen> "it gets unreadable when you have multiple nested calls"
[08:33:07] <kakuhen> maybe im being partial, or maybe not, but i never understood this complaint about the square brackets in obj-c
[08:33:13] <lotuseater> hayley: and a bitvector in SBCL doesn't hopefully need 1byte per bit?
[08:33:32] <hayley> SBCL picks the right word, but then uses the BT instruction on x86-64 to pick the bit. However, the SICL IR is basically a boring RISC, and I assume MIR-to-LIR shakes it into some platform-dependent form.
[08:34:08] <notzmv> pardon my ignorance, but what does IR stand for again
[08:34:14] <hayley> Intermediate Representation
[08:34:21] <notzmv> oh right yeah
[08:34:21] <gilberth> Ever read Haible code? He indents both Lisp and C in the very same funny way. All close parenthesis on one line for its own, nicely put below the opening parens. Only that the open paren you find aligned with the close paren is not the one closed, as the close parens run the other way.
[08:34:22] <lotuseater> kakuhen: and when you set [ and ] like being read as ( and ) nothing stops you :)
[08:34:31] <hayley> SICL has three: High, Middle and Low levels (HIR, MIR and LIR)
[08:34:43] <notzmv> thanks 0u0
[08:34:54] <hayley> Also, arguably concrete and abstract syntax trees, and instructions for the assembler. So really six all up.
[08:34:55] <lotuseater> ah
[08:36:08] <hayley> CST is basically just S-expressions with source tracking, AST gives special forms their own representation, HIR manipulates Common Lisp data only, though some can be unboxed, MIR exposes memory layouts, LIR exposes registers, and assembler instructions are just those.
[08:38:43] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 252 seconds)
[08:39:08] <kakuhen> i just saw scheme appear in the most unexpected place ever x.x
[08:39:18] <lotuseater> which is?
[08:39:30] <kakuhen> libSandbox.dylib in OS X contains an embedded TinySCHEME library
[08:39:37] <lotuseater> uii
[08:39:42] <kakuhen> its used to create and modify sandbox profiles
[08:41:08] <kakuhen> https://wikileaks.org/ciav7p1/cms/files/Triclops%202015%20-%20TinyScheme.pdf
[08:41:46] <kakuhen> there's also brief mentions of it in Johnathan Levin's OS X internals book -- so the information still seems true today
[08:41:47] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[08:42:05] *** Joins: nihaal (~nihaal@117.96.193.218)
[08:42:51] <hayley> .oO(Should I just "inline" the lower segment by compiling a form to flip all the bits for each prime? It'd save some data cache, at the cost of a lot of instruction cache.)
[08:46:04] <notzmv> btw is anyone here into xiangqi? I fell in love with the game this week lol
[08:46:23] <lotuseater> no I don't know that
[08:46:46] <lotuseater> ah it's chinese chess
[08:47:20] <notzmv> yeah
[08:48:02] <notzmv> I'm a pretty decent international chess player and absolute garbage at xiangqi, but it's so fun 
[08:48:14] <lotuseater> oh
[08:48:22] <hayley> https://www.youtube.com/watch?v=GJs4ziSmO2M
[08:48:23] -ixelp- Gary Numan (London 1981) [04]. Metal - YouTube
[08:48:27] <kakuhen> ive played shougi before and xiangqi exactly once
[08:48:31] <kakuhen> I fkin hate the cannon in xiangqi
[08:48:36] <kakuhen> stupidly overpowered piece
[08:48:40] <notzmv> lmao
[08:49:01] <notzmv> it's just mindbending to me haha
[08:49:08] <kakuhen> oh also interesting thing I noticed
[08:49:12] <notzmv> same for how horses are so different from knights
[08:49:15] <kakuhen> so when I played xiangqi this all happened in high school
[08:49:33] <notzmv> vietnamese colleagues?
[08:49:36] <kakuhen> to my surprise, my friend translated 車 literally and called it a "car"
[08:49:43] <kakuhen> but the (liberal) translation is rook
[08:49:47] <notzmv> oh yeah that's a thing
[08:49:52] <kakuhen> he is actually right, 車 is indeed car
[08:49:57] <kakuhen> but idk this was an interesting observation to me at the time
[08:49:59] <kakuhen> i never commented on it
[08:50:04] <notzmv> yeah
[08:50:05] <lotuseater> and what is cdr?
[08:50:35] <notzmv> people usually call it chariot, which pretty much is what car used to mean before... cars :p
[08:50:38] <lotuseater> like in those google captchas i often thought when there is "select all cars" where is "select all cdrs"?
[08:50:55] <lotuseater> cadadadars
[08:50:59] <kakuhen> lotuseater: im not sure in chinese, but in japanese it'd be クダー 
[08:51:01] <notzmv> but the official notation still uses R for rook
[08:51:03] <kakuhen> i do not pronounce cdr as that however
[08:51:13] <kakuhen> for me it's more like シダー
[08:51:17] <lotuseater> contents of decrement register ^^
[08:51:20] <kakuhen> that's how my brain guessed the pronunciation when I first saw "cdr"
[08:51:27] <kakuhen> and I always have arguments with one friend about the pronunciation
[08:51:31] <kakuhen> because I refuse to pronounce it as "coulder"
[08:51:32] <notzmv> kuduri?
[08:51:48] <kakuhen> my brain first saw "cidr" and so I pronounce it as that
[08:51:52] <kakuhen> err guessed
[08:52:02] <lotuseater> kakuhen: the point in the real sicp lectures is funny where sussman explain how to speak it out loud
[08:52:08] <notzmv> kiduri then? my kana skills are rather lackluster
[08:52:14] <kakuhen> notzmv: no
[08:52:23] <kakuhen> クダー is literally "kudaa" or "coulder" transcribed.
[08:52:33] <kakuhen> シダー is my own transcription of how I pronounce "cdr"
[08:52:36] <kakuhen> "shidaa"
[08:53:07] <kakuhen> also this is the first time I paste unicode blobs onto IRC
[08:53:09] <notzmv> aha yeah I don't remember seeing katakana for a before
[08:53:11] <kakuhen> sorry for those viewing in a terminal~
[08:53:29] <hayley> Hm, SBCL has decided MAKE-LATER-SEGMENT is mostly dead code.
[08:53:31] <lotuseater> no works great for me in ERC
[08:53:44] <kakuhen> yeah I expect Emacs to have Unicode support
[08:53:46] <lotuseater> hayley: they hunt you down
[08:53:51] <kakuhen> but I mean like...people who may be using the suckless IRC client or whatever
[08:54:00] <kakuhen> oh my god, remember the pissnet stuff that happened in may - june?
[08:54:00] <notzmv> lul
[08:54:05] <notzmv> cold
[08:54:06] <notzmv> wet
[08:54:08] <notzmv> chats
[08:54:11] <kakuhen> there was this one channel where people had a bot that let you submit shell commands to it
[08:54:17] <hayley> Dammit, BIT returns an integer, (UNLESS (BIT ...) ...) is dead code.
[08:54:20] <kakuhen> and someone used it to build the suckless IRC client to connect to the channel to chat
[08:54:28] <hayley> I got confused with x86-64 BT, which sets some flag.
[08:54:29] <lotuseater> ahhh
[08:54:49] <lotuseater> so wrapping with a zerop
[08:55:13] <hayley> Yes.
[08:56:01] <lotuseater> beach advised me once better use zerop than (= 0 x) for clearer intention. and when needed one can define locally a ONEP
[08:56:11] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[08:56:50] <notzmv> kakuhen do people play xiangqi in japan then? that's interesting
[08:57:03] <notzmv> shogi starts so slow I want to zzzzzzzz
[08:57:04] <lotuseater> or go
[08:57:13] <notzmv> go is beautiful 0u0
[08:57:18] <lotuseater> yes indeed
[08:57:19] <kakuhen> >do people play xiangqi in japan then?
[08:57:23] <kakuhen> I wouldn't know; I played this in America
[08:57:27] <notzmv> too much so for me to be honest
[08:57:41] <notzmv> oh right
[08:57:43] <kakuhen> but to answer your question like a smartass
[08:57:52] <kakuhen> yes, there exists at least one person in japan who played xiangqi this year
[08:58:01] <notzmv> :o :p
[08:58:03] <kakuhen> the frequency is probably much less than games like go or mahjong
[08:58:04] <lotuseater> or this Hex game which idea is also by John Nash
[08:58:26] <kakuhen> i actually never liked go much; and chinese mahjong differs considerably from japanese mahjong for me to play it with my chinese friends
[08:58:34] <kakuhen> and none of my other friends want to learn mahjong because they get filtered by numbers
[08:58:34] <notzmv> I find hex to be much more interesting theoretically than as a game
[08:58:41] <kakuhen> or rather, to put it more nicely, they dont want to learn the loads of information.
[08:58:45] <lotuseater> https://www.youtube.com/watch?v=FTl0tl9BGdc
[08:58:46] -ixelp- Why Learn Go? - YouTube
[08:58:59] <lotuseater> it's actually a trap :D
[08:59:18] <notzmv> haha indeed
[08:59:45] <notzmv> most of the reason I dropped go again to focus on chess was that I actually have a shot at a title in chess
[08:59:45] <lotuseater> back from 2012
[08:59:59] <notzmv> do you play regularly lotuseater?
[09:00:02] <lotuseater> impressive ._.
[09:00:14] <lotuseater> no I'm not really capable of it
[09:00:30] <kakuhen> I'm watching the rob pike interview and I got to this part
[09:00:35] <kakuhen> >there hasn't been a good compiled language ...
[09:00:38] <kakuhen> common lisp! common lisp! common lisp! 
[09:00:41] <notzmv> not that much, I just played a bunch as a kid so a lot of the stuff is ingrained deep in my brain lol
[09:00:44] <lotuseater> was one of those things on my todo list since 2014(?) but hm
[09:01:14] <lotuseater> kakuhen: forgive them
[09:01:31] <notzmv> lotuseater: online-go.com is a great website if you don't know it
[09:01:38] <lotuseater> okay thx
[09:01:41] <kakuhen> yes im very frustrated that he painted the picture as "there's C, C++, and languages that compile to a JIT"
[09:01:49] <hayley> https://www.youtube.com/watch?v=3-VZP1pCIL8&t=56s
[09:01:49] -ixelp- The Angels - No Way Get Fucked Fuck Off - The Gov - Adelaide 2014 - YouTube
[09:02:19] <lotuseater> but unfortunately i know in advance like with mostly all other things i would like to be good at that it won't work out
[09:02:20] <kakuhen> Go somehow produces bigger binaries than #'ccl:save-application and that's saying something >.<
[09:02:58] <notzmv> lol 
[09:03:06] <lotuseater> oh it does? o_O should really dig into CCL
[09:03:19] <kakuhen> well maybe Go has better compression now? idk
[09:03:30] <kakuhen> but CCL, unlike SBCL, has no heap image compression
[09:03:37] <kakuhen> and unlike LispWorks and Allegro CL, there is no tree shaker either.
[09:04:04] <kakuhen> so you will produce HUGE binaries with (ccl:save-application :toplevel-function #'foo :prepend-kernel t)
[09:04:24] <lotuseater> it's like when some engineers or such tell me matlab is such a cool computer algebra system
[09:04:55] <lotuseater> hm normally SBCL binaries are around 60MB ?
[09:05:07] <kakuhen> even with core compression?
[09:05:25] <lotuseater> and ones with go much smaller. i could look up how big eg fuzzy-find is
[09:05:27] <kakuhen> iirc you can get a really really small binary in comparison with compression enabled, and the Nyxt people do this
[09:05:48] <lotuseater> ehm i don't know i didn't use it much yet
[09:05:52] <kakuhen> it does incur a cost for starting up the program, but it's negligible for end-user (it means your program takes ~50 ms more to load)
[09:06:18] <kakuhen> also there was a funny script circulating around the internet a few weeks ago on a "tree shaker" for SBCL
[09:06:27] <kakuhen> it involves destroying the CL package and running the garbage collector iirc
[09:06:30] <lotuseater> yes nyxt is a wonderful example for shipping out a real big nontrivial application
[09:06:33] <kakuhen> I don't know how good of an idea it is to do this...
[09:07:09] <lotuseater> me neither
[09:07:24] <lotuseater> destoying the CL package?!
[09:07:46] <kakuhen> OK turns out it just destroys the package system; I'm looking at the code right now.
[09:08:05] <kakuhen> But nonetheless, it does things you normally wouldn't do.
[09:08:44] <kakuhen> After running the GC, it will invoke sb-ext:save-lisp-and-die with core compression enabled
[09:09:09] <lotuseater> but when you strip out the whole runtime system and all when it's not needed for your application it also gets smaller
[09:09:13] <kakuhen> It can reduce the binary size by up to 40% according to the author 
[09:09:24] <lotuseater> okay
[09:10:05] <gilberth> Well, an SBCL core is 33MB, while a CCL image is at 23MB. But I don't consider this relevant anymore.
[09:10:12] <notzmv> hmm how big is nyxt
[09:10:30] <kakuhen> quite big
[09:10:48] <kakuhen> I'm not sure since I've been too lazy to try it out
[09:10:48] <notzmv> 135M on my machine
[09:10:51] <notzmv> pretty reasonable
[09:11:04] <kakuhen> The principe maintainer switched to Linux from OS X, and they were the only ppl to make it work on OS X
[09:11:17] <kakuhen> I may or may not be interested in testing it on OS X with CCL, but it's a lot of work...
[09:11:27] <kakuhen> in theory it should work, but nobody tests it
[09:11:57] <kakuhen> principle maintainer*
[09:12:53] <notzmv> vivaldi-bin is 182M and ff seems to be around 180M too
[09:13:29] <kakuhen> iirc Nyxt will use core compression for the binary if you are on SBCL
[09:14:05] <kakuhen> so that could explain the 135MB size
[09:14:05] <kakuhen> https://github.com/atlas-engineer/nyxt/blob/master/nyxt.asd#L328
[09:14:05] -ixelp- nyxt/nyxt.asd at master · atlas-engineer/nyxt · GitHub
[09:14:24] <lotuseater> muffle :3
[09:15:43] <gilberth> CLISP is 10MB (what made it so big?). ACL is 5M. But the latter is a 32-bit program.
[09:16:03] <gilberth> CMUCL always used to be quite big.
[09:16:44] <gilberth> But this was relevant IMHO in the 90s, not today.
[09:18:14] <gilberth> I used the free version of ACL quite a bit at the mid/late 90s. And surprise, although it didn't inline much and thus was using a mere 4.3MB it wasn't slower than CMUCL, inline happy, and at 20MB.
[09:20:20] <hayley> Well, I nearly had it work first try, but at a 1e6 vector something went horribly wrong.
[09:20:35] <gilberth> IIRC my machine had 64MB of RAM. Take that in relation. My linux box has 32GB of RAM.
[09:21:33] <kakuhen> i have 16 gb on my laptop but i regret not getting 32 gb
[09:21:50] <hayley> "Invalid index 2027 for (SIMPLE-BIT-VECTOR 2000), should be a non-negative integer below 2000." Dammit!
[09:22:16] <gilberth> My laptop has 16GB, too. And it's a bit tight actually.
[09:23:08] <gilberth> But it's usually the web browser eating all the RAM. I wonder why?
[09:23:47] <kakuhen> in my case, half my ram is used for caching system files
[09:24:01] <kakuhen> and there's seemingly no way to tell APFS "stop doing that"
[09:24:13] <kakuhen> I'd know what'd to do if this were ZFS, but APFS has a mind of its own, much like Btrfs.
[09:24:29] <hayley> Not a case of https://www.linuxatemyram.com/?
[09:24:30] -ixelp- Help! Linux ate my RAM!
[09:24:36] <kakuhen> Fedora uses Btrfs by default, and it loves to use half my RAM for caching files
[09:24:47] <kakuhen> Unlike ZFS, Btrfs is very greedy with RAM and will not give back much of it
[09:25:01] <kakuhen> It'd rather make programs write to swap than give back some memory.
[09:25:14] <gilberth> I made the experience in circa 2008 or so, that Linux would run way snappier with no swap space, as it too would use all RAM for FS cache.
[09:25:16] <kakuhen> I tried setting swappiness to the lowest possible value and it still does this >.<
[09:25:40] <hayley> (time (count-primes 100000000)) ⇒ 0.296 seconds of real time
[09:25:48] <hayley> That is with only two threads still.
[09:26:49] <gilberth> kakuhen: I tried ZFS a long time ago and it was unusable because of its RAM usage.
[09:27:01] <hayley> With 12 threads, it's like 86ms, and we're at 87% efficiency.
[09:27:22] <easye> contemporary ZFS is much better with memory usage.
[09:27:40] <kakuhen> gilberth:  I guess FreeBSD has saner defaults for ZFS
[09:27:53] <easye> Although that is from BSD experience, not Linux with ZFS
[09:28:10] <kakuhen> ZFS can cache aggressively to boost I/O performance, but if it runs with constrained resources, it will more or less behave like a normal file system
[09:28:22] <lotuseater> hayley: really cool!
[09:28:34] <gilberth> kakuhen: Perhaps. It was in like 2010 or so. With 2GB or so of RAM. Kind of don't remember exactly.
[09:28:37] <kakuhen> In my experience with Btrfs on Fedora 34, Btrfs just doesn't care if you have swap around. You will write to swap, or figure out how to fine tune Btrfs
[09:28:59] <kakuhen> also hi easye
[09:29:16] <easye> mornin' kakuhen
[09:30:09] <gilberth> And as I said in around that time frame, roughly, I used to turn of swapping altogether as otherwise the box would get unusable as a desktop.
[09:31:08] <gilberth> Linux seemed to rather evict pages of applications instead of some FS cache.
[09:31:48] <easye> Certainly ~2010 FreeBSD ZFS was un-usable with less than 4Gib of RAM.  
[09:32:09] <kakuhen> I guess I had the benefit of trying ZFS on FreeBSD ~9 years later :3c 
[09:32:52] <easye> And the point that most systems have like 8 Gib RAM minimum.
[09:34:20] <hayley> Hm, this is still slower. Though I could reduce lparallel overhead, and I don't do any wheel stuff (hell, I even check even numbers for some reason).
[09:34:53] * easye backscrolls to check on what hayley is workin' on
[09:35:02] <hayley> Nothing of value.
[09:35:28] <easye> At least you know the value of nothing...
[09:35:30] <gilberth> Well, I would not assume that a file server with very light use, would need plenty of RAM.
[09:35:43] <hayley> Fast things I can write: lock-free tables and distributed hash tables
[09:35:47] <hayley> Fast things I cannot write: anything else
[09:36:10] * notzmv cries in 4GB of RAM
[09:36:56] <hayley> The problem with having lots of RAM is that the SBCL GC pauses get proportionally worse.
[09:37:21] <easye> What's the story on the "parallel" GC for SBCL?
[09:37:33] <gilberth> Bah. It needs a secret option to even use much RAM.
[09:37:55] <hayley> Ravenbrook MPS is coming soon™.
[09:38:01] <hayley> Actually, I don't know if that is parallel.
[09:38:44] <easye> Well, the MPS GC is being pushed by-- among others-- GOOG for large RAM situations.
[09:39:08] <hayley> It is incremental, but apparently when it comes to parallelism it's a big stinker (source: drmeister and Clasp with 20 cores).
[09:39:24] <easye> Or at least that was what I gathered from chatting with people in the ITA maintenance group.
[09:39:41] <easye> Oh, clasp uses MPS?
[09:40:00] <hayley> Un-fun fact, I had an ARM port of the MPS nine months before it was cool (i.e. Ravenbrook supported a port). Though mine was probably not up to scratch.
[09:40:49] <hayley> Yes, but you usually run it with Boehm in some sort of kinda-precise mode as it is faster. And I think they are looking at the R*st rewrite of Mmtk, which includes a parallel Immix doohickey.
[09:41:19] * easye has to DDG most of those terms "Mmtk", "Immix"
[09:41:47] <hayley> Mmtk: some GC library Immix: mark-region GC. Think G1 but without remembered sets.
[09:42:10] <easye> mmtk:  Australia in da house.
[09:42:35] <hayley> "On the fly/wait free Immix" is somewhere on my bucket list of things to do.
[09:51:24] <hayley> Loosely speaking, the plan is to split it into mark-sweep and compaction passes (because I can't be bothered to reason about how doing both like real Immix would go); on the fly mark sweep is nothing new really, and compaction would be done with something like Andrew Appel's MMU hack.
[09:51:40] *** Joins: razzy (razzy@user/razzy)
[09:52:50] <hayley> The latter being https://www.cs.tufts.edu/~nr/cs257/archive/andrew-appel/real-time-gc.pdf
[09:58:09] <hayley> Another feature would be for it to play https://www.youtube.com/watch?v=2sUyk5zSbhM while collecting, but that tends to happen all the time, and cycles are relatively short.
[09:58:09] -ixelp- On The Run - YouTube
[10:05:42] <easye> Anyone know the state of dtrace on Linux?  Searching the packages for 'dtrace' doesn't really show anything, so mebbe it has been rebranded?
[10:06:04] <hayley> Yeah, come to think of it, writing a parallel and concurrent GC based on a non-parallel and non-concurrent GC framework isn't easy. AIUI an efficient parallel collector tries to run the GC on other cores to the mutator, so that they don't stomp out each other's cache.
[10:07:15] <hayley> Which distribution?
[10:07:33] <easye> Ubuntu 
[10:08:24] <easye> <https://github.com/opendtrace/opendtrace> seems to be part of the current effort.
[10:08:24] -ixelp- GitHub - opendtrace/opendtrace: Code for the cross platform, single source, OpenDTrace implementation
[10:08:29] <hayley> All signs point to building yourself: https://askubuntu.com/questions/60940/how-do-i-install-dtrace
[10:08:30] -ixelp- software installation - How do I install DTrace? - Ask Ubuntu
[10:09:09] <kakuhen> iirc there is a competitor to dtrace that was on in the linux land
[10:09:13] <kakuhen> forgot its name, but it has more features than dtrace now
[10:09:24] <easye> Thanks hayley, looks like <https://github.com/dtrace4linux/linux#installation> might be fresher than what I was lookin' at
[10:09:25] -ixelp- GitHub - dtrace4linux/linux: dtrace for linux - kernel driver and userland tools
[10:10:10] <kakuhen> bpftrace is the name, there we go.
[10:10:22] <easye> My "problem" is that I have a Go executable that I want to understand better, but I don't want to learn Golang stuff that much.  
[10:10:52] <easye> bpftrace sounds like it what just be dealing with packets.
[10:12:06] <kakuhen>  ebpf is powerful™
[10:17:21] <easye> Hmmm.  The dtrace4linux compile bails early complaining that interfaces to /proc/kcore are broken among other things.  Probably not gonna compile easily, as last commit was ~2 years ago...
[10:19:19] <easye> Linux kernel development:  move fast, break things, insult people who object
[10:20:45] <easye> Oh well, maybe I should move this hardware to FreeBSD.  
[10:22:00] <easye> It has enough RAM to bhyve everything easily.  But it isn't ZFS, so rejiggering the SSD would be tricky.  Wonder if I can buy a SSD at a physical shop on a pandemic Saturday...
[10:24:16] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:24:26] <easye> dave0: wam
[10:25:02] <dave0> re maw
[10:25:05] <dave0> hi easye 
[10:32:29] <lotuseater> oh dave0 is back. we talked about this other Microsoft Dave again recently
[10:33:00] <dave0> what's it like to work at microsoft?
[10:33:16] <lotuseater> I'm not about to find out. :D
[10:33:43] <lotuseater> and of course, most modern from its beginning
[10:43:29] <pl> easye: the people behind dtrace are now heavily working on BPF based tooling, afaik
[11:08:52] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[11:09:48] * hayley needs to find an ElectroBOOM video with him saying "table". This will take a very long time.
[11:10:15] <hayley> Or not. That was quick.
[11:19:21] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[11:28:19] <lotuseater> bam
[11:30:21] *** Joins: notzmv (~zmv@user/notzmv)
[11:31:00] *** Joins: selwyn (~selwyn@user/selwyn)
[11:46:16] *** Quits: nihaal (~nihaal@117.96.193.218) (Ping timeout: 252 seconds)
[12:17:30] <pjb> easye: wasn't it called strace on linux?
[12:21:09] <pjb> hayley: Perhaps https://dl.acm.org/doi/10.1145/1028976.1028982 would be useful?
[12:21:11] -ixelp- A unified theory of garbage collection | Proceedings of the 19th annual ACM SIGPLAN conference on Object-oriented progra [...]
[12:21:27] <hayley> pjb: Been there, read that.
[12:21:55] <easye> pjb: strace is a precursor to dtrace.  dtrace has a scripting language, and a very useful ecology of scripts.
[12:22:25] <pjb> kakuhen: don't terminals translate to romanjii automatically? ;-)
[12:22:42] <pjb> easye: ok. 
[12:24:49] <pl> easye: strace isn't really a precursor to dtrace, it's just that they share common naming style
[12:25:31] <easye> pl: agreed.  
[12:26:13] <pl> anyway, on linux, eBPF infrastructure is slowly gearing to the same point
[12:27:06] <pl> it's just a bit more fragmented, but also because eBPF isn't for tracing - it's just a bunch of tracepoints etc. got new functionality to attach eBPF programs
[12:27:12] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Read error: Connection reset by peer)
[12:28:05] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[12:30:01] *** Joins: shka (~herr@109.231.62.239)
[12:44:44] *** Joins: domovod_ (~domovod@176.196.122.197)
[12:47:52] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[13:08:10] *** Joins: nihaal (~nihaal@117.96.193.218)
[13:46:30] <hayley> https://www.youtube.com/watch?v=Q_B4oK4Mpzk
[13:46:31] -ixelp- [YTP] ElectroBOOM Clicks a Cliff - YouTube
[14:04:45] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[14:11:50] *** Joins: makomo (~makomo@user/makomo)
[14:16:25] *** Quits: domovod_ (~domovod@176.196.122.197) (Quit: WeeChat 3.2)
[14:40:23] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:45:20] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:51:16] *** Joins: selwyn (~selwyn@user/selwyn)
[15:01:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[15:04:48] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:09:31] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[15:21:50] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:27:03] *** Joins: random-nick (~random-ni@87.116.176.45)
[15:37:30] <edgar-rft> romanjii somehow sounds like latin emojis to me :-)
[16:14:40] *** Quits: nihaal (~nihaal@117.96.193.218) (Ping timeout: 252 seconds)
[16:33:21] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[16:36:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:40:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[16:44:51] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:11:41] *** Joins: notzmv (~zmv@user/notzmv)
[17:23:30] *** Quits: santiagopim (~user@90.166.59.254) (Ping timeout: 250 seconds)
[17:41:06] <edgar-rft> The discussion started yesterday on #clschool about the Common Lisp GSharp music score editor and the various music chords and tuning systems. Because I don't want to flood #clschool with off-topic stuff here now the missing rest :-)
[17:41:06] <edgar-rft> pjb: If you want real microtonal music then search youtube for Tolgahan Çoğulu. Originally born in Turkey he studied classical western guitar. Because he couldn't find a guitar on that he could play western music as well as turkish quartertone music he decided to learn building guitars and built a microtonal guitar with adjustable frets for each string. The weirdest guitar ever.
[17:41:06] <edgar-rft> Wikipedia -> https://en.wikipedia.org/wiki/Tolgahan_%C3%87o%C4%9Fulu
[17:41:07] <edgar-rft> Homepage -> https://tolgahancogulu.com/
[17:41:09] <edgar-rft> the guitar -> https://tolgahancogulu.com/wp-content/uploads/2019/07/foto1.jpg
[17:41:11] <edgar-rft> But my all-time favourite is this one. Three well-known turkish chaots (all three masters of their instruments) having fun like little children by playing music from Paco de Lucia and Al di Meola on turkish quartertone instruments -> https://www.youtube.com/watch?v=AI3kdLpXjF0 (Title: Eastern Mediterranean Sundance - Tar: Nevcivan Özel - Guitar: Tolgahan Çoğulu - Bağlama: Erdem Şimşek)
[17:49:02] <pjb> Nice. Thanks.
[17:53:30] *** Quits: lonjil (~quassel@user/lonjil) (Quit: Quit.)
[17:55:25] *** Joins: lonjil (~quassel@user/lonjil)
[18:20:46] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:36:34] *** Joins: nihaal (~nihaal@117.96.193.218)
[18:54:06] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[18:59:04] *** Joins: shka (~herr@109.231.62.239)
[18:59:31] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[19:06:16] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[19:09:18] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: See you another time)
[20:38:00] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:38:36] <gilberth> Good morning #lispcafe!
[20:38:59] <ck_> hello
[20:46:25] <lotuseater> heyho
[20:47:07] <lotuseater> gilberth: https://www.youtube.com/watch?v=pcBsqvedEDI
[20:47:08] -ixelp- Ochneeeee ne lass mal - YouTube
[20:48:27] <lotuseater> hm in this video the audio isn't synchron at all
[20:49:08] <gilberth> ?
[20:49:56] <lotuseater> forget it
[21:01:19] <edgar-rft> for Helge Schneider it's *very* synchon :-)
[21:02:09] <edgar-rft> I'm not sure if that wasn't made intentional
[21:03:47] <gilberth> Perhaps it was to give the impressions that this is a scene from some Hollywood movie.
[21:05:31] <edgar-rft> Helge Schneider *loves* to play the complete idiot, but he isn't
[21:06:36] <lotuseater> oh yes he's great
[21:07:26] <lotuseater> https://www.youtube.com/watch?v=AainIbNwIcY
[21:07:26] -ixelp- Helge Schneider - Es gibt Reis Baby (Official Video) - YouTube
[21:09:02] <edgar-rft> I'm not so much interested in the videos where he plays the idiot, he's a really great jazz musician, let me look for some videos...
[21:09:21] <gilberth> Of course he isn't. Likewise Horst Schlämmer isn't. It takes quite some intelligence to come up, author, and play those roles. Anyhow, that isn't my kind of humour in any way.
[21:09:42] <lotuseater> Hape Kerkeling also very great :D
[21:10:24] <edgar-rft> Hape Kerkeling as Queen Beatrix of Belgium was great! :-)
[21:15:07] * ck_ .oO( Auf der gruenen Wiese .. )
[21:33:25] <edgar-rft> 1) It's harder than I thought to find serious jazz videos with Helge Schneider and 2) Beatrix was Queen of the Netherlands, not of Belgium :-(
[21:41:46] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 250 seconds)
[21:42:48] *** Joins: mark-eliot (~user@154.6.18.5)
[21:43:17] <mark-eliot> hey
[21:50:01] *** Quits: mark-eliot (~user@154.6.18.5) (Ping timeout: 248 seconds)
[21:52:55] *** Quits: razzy (razzy@user/razzy) (Ping timeout: 252 seconds)
[21:53:52] *** Quits: ^[ (~user@user//x-8473491) (Quit: ^[)
[21:54:54] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[22:20:00] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: Textual IRC Client: www.textualapp.com)
[22:24:41] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[22:35:49] <aeth> Someone said something so ridiculous on reddit that I had to reactivate an account I hadn't used in over 5 years in order to reply. (I mostly lurk and I'm certainly not going to poke trolls with an account that's linked to me.) Surprisingly, I remembered the password after 10 or so tries.
[22:35:59] <aeth> I'd provide more details but that would defeat the point of what I did.
[22:36:25] <aeth> (You can't just make new throwaways because even tiny subs have minimum account age and karma requirements, so it's all about remembering really old throwaway account passwords these days)
[22:38:55] <aeth> On the plus side, you can just use Firefox account container tabs instead of messing with RES, so that's a major technological improvement since I last had to use multiple accounts.
[22:42:08] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[23:02:39] *** Joins: z147 (~z147@gateway/tor-sasl/z147)
[23:13:30] *** Quits: nihaal (~nihaal@117.96.193.218) (Quit: nihaal)
[23:23:41] <lotuseater> hmpf peope query me when I'm asleep
[23:24:50] <edgar-rft> maybe you should dream of irc
[23:25:46] <lotuseater> hmm
[23:29:38] <lotuseater> i should go buy some supplies now
[23:33:30] <aeth> This is fun. https://news.ycombinator.com/item?id=28253658
[23:33:31] -ixelp- A remark on the two diagrams following “Then the CSS is parsed and browser creat... | Hacker News
[23:33:48] <aeth> head, title, style, script { display: block; }
[23:35:48] <lotuseater> head, shoulders, knees and toes, knees and toes
[23:36:52] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
