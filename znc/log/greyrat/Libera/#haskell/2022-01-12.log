[00:00:03] <Inst> no relation to that smuggler, monochrom?
[00:00:07] <monochrom> And ultimately "best" just means the 3rd time you learn.
[00:00:32] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[00:00:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[00:00:45] <whatsupdoc> It's hard to find the motivation to learn something if I have no reason to learn it. I'm happy with C++ and Python :)
[00:00:48] <Inst> lesson 2 at least has to be an introduction to the typechecker and why it's telling you to kys
[00:01:24] <[itchyjunk]> Uh, i thought guard was the | stuff when defining functions.
[00:01:29] <whatsupdoc> I'll take this course and do all the assignments https://www.seas.upenn.edu/~cis194/fall16/
[00:01:34] <Inst> yeah, your only motivation is an off-handed claim in ##programming that you could pick up Haskell in 3 days
[00:01:37] <[itchyjunk]> Where is the guard in [x | x <- [1..10], even x] ?
[00:01:42] <polyphem> whatsupdoc: do you do template metaprogramming in c++ ?
[00:01:47] <Inst> I've met people who, with the appropriate pedagogy probably could do it
[00:01:51] <monochrom> This is why I don't push myself to learn an unmotivated thing.
[00:01:55] <Inst> but they were Harvard students overloading 24 credits a term
[00:01:55] <[itchyjunk]> Inst, someone in ##programming said that?
[00:01:59] <Inst> whatsupdoc
[00:02:27] <Inst> (norm is 16 credits, so I'm told)
[00:02:40] <Inst> in hard sciences, mind you
[00:02:53] <whatsupdoc> you're looking at 20 units at a top 10 public university, all A+s, 4 upper div CS classes
[00:03:00] <monochrom> For example people here raved about adjunctions, and I resisted for like 10 years.  I finally learned it, but only when it had utility for me.
[00:03:02] <whatsupdoc> lol
[00:03:09] <Inst> monochrom: the joke was regarding Lai Changxing
[00:03:11] <monochrom> And to date I still resist learning lenses.
[00:03:18] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[00:03:26] <whatsupdoc> i'm sure I can learn it
[00:03:33] <whatsupdoc> But usually I learn faster when I enjoy learning it
[00:03:33] <Inst> in 3 days?
[00:03:45] <geekosaur> [itchyjunk], "|" in general can be read as "such that". in some contexts that means a guard is coming (foo x | x < 5 = ...). in some cases that means something like "where", as in list comprehensions
[00:03:51] <whatsupdoc> I'm sure I could get the hang of some things after 3 days
[00:04:14] <whatsupdoc> And start writing meaningful-ish programs at that point
[00:04:16] <[itchyjunk]> geekosaur, ah the | can be though of as guard then? i see
[00:04:16] <Inst> okay, so i guess you want money to learn tolerably bad Haskell within 3 days
[00:04:23] <monochrom> [itchyjunk]: "even x" is the guard.
[00:04:23] <geekosaur> in some situsations
[00:04:41] <[itchyjunk]> oh :x
[00:04:51] <[itchyjunk]> i think i understand
[00:04:52] <Inst> hmmm
[00:04:52] <whatsupdoc> Never heard of template metaprogramming polyphem 
[00:04:56] <monochrom> true for some x's and false for some others.
[00:05:00] <geekosaur> "such that" is the general nmeaning. if you're defining something, "such that" means a guard is coming. in a list comprehension, the list is coming
[00:05:19] <Inst> look, if you can deliver me a composition dependent strategy calculator in haskell
[00:05:19] <geekosaur> there are some other uses of "|", but iirc they all fit "such that"
[00:05:20] <polyphem> whatsupdoc: c++ templates 
[00:05:24] <Inst> in 5 days
[00:05:29] <Inst> how much would you want for it?
[00:05:38] <whatsupdoc> polyphem: who hasn't written templates in C++ lol
[00:06:03] <whatsupdoc> they give power to the language
[00:06:08] <Inst> that is to say, a program that takes an input of some rules settings and outputs a chart telling you which action in blackjack delivers the most EV
[00:06:14] <polyphem> whatsupdoc: are they an more advanced and complex c++ feature ?
[00:06:26] <whatsupdoc> i would probably say so
[00:06:29] <monochrom> I disagree that "such that" has semantics at all.  It is there to just fulfill an English grammar rule. And English is by no means a hallmark of good expression.
[00:06:44] <[itchyjunk]> hmm
[00:06:49] <Inst> whatsupdoc? is money sufficient motivation?
[00:06:53] *** Quits: kuribas (~user@ptr-25vy0ia1hzdpftx2lxu.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[00:06:56] <whatsupdoc> what is up with you lol
[00:07:05] <Inst> sorry
[00:07:11] <monochrom> At best it plays the role of a separator. So, purely syntactical.
[00:07:12] <whatsupdoc> i'm about to get my wisdom teeth removed in 3 hours lol
[00:07:17] <Inst> i sort of need one
[00:07:20] <Inst> take it easy :)
[00:07:28] <whatsupdoc> So the challenge can't start now :)
[00:07:52] <Inst> and i thought about coding it myself, but then I tried doing a list enumeration of [1..20000000]
[00:07:57] <Inst> 2 hours to get to 4%
[00:08:02] <Inst> then again, it was on GHCi
[00:08:04] <whatsupdoc> I wouldn't be able to test out a 5 day challenge, especially working 40 hours a week
[00:08:04] <EvanR> hey man, schwarzchild solved einsteins equations while fighting world war I, maybe you could use haskell to take your mind off lol
[00:08:52] <whatsupdoc> Learning haskell at work lol
[00:08:54] <polyphem> whatsupdoc: what struck me about haskell, is that whats top end of c++ (templates) , is so easily expressed using haskell , and its more like hello world 
[00:08:56] <Inst> honestly, i think you're the stereotypical "ass" haskeller and you don't even know Haskell
[00:08:57] <monochrom> Fighting WWI is different from today's 40-hour-week job.
[00:09:07] <Inst> you'd fit right in
[00:09:21] <EvanR> refering the wisdom teeth thing
[00:09:25] <whatsupdoc> gatekeeper
[00:09:39] <whatsupdoc> you get to chill in a trench during a world war
[00:09:39] <monochrom> WWI was physically draining but not mentally draining. In fact doing mental work was how to rest.
[00:09:47] <Inst> from what i've heard
[00:09:54] <Inst> when American troops got into the trenches
[00:10:01] <whatsupdoc> put me in a trench and i'd get so bored, i'd reinvent haskell
[00:10:01] <Inst> all the soldiers on the allied side who seemed lucid from their letters
[00:10:11] <Inst> seemed like half-dead zombies
[00:10:12] <monochrom> Today's jobs are mentally draining but not physically draining. In fact turning off your brain and going to gym is how to rest.
[00:10:14] <Inst> due to the sheer fatigue
[00:10:37] *** Quits: Guest42 (~Guest42@563BEF60.catv.pool.telekom.hu) (Quit: Client closed)
[00:10:58] <whatsupdoc> EvanR: lol woosh
[00:11:49] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[00:11:53] <monochrom> But perhaps you can join the army.
[00:12:05] <monochrom> "Join the Army! Learn Haskell!"
[00:12:45] <Inst> if I ever get my dream of talking Xi Jinping into forcing his country's software industry to use Haskell by default implemented, that might actually come true
[00:13:17] <Inst> you'll have to learn Haskell in order to discover software vulnerabilities in opposing force electronics
[00:13:42] <Inst> tbh
[00:13:51] <Inst> if the Soviet Union still existed, do you think the Soviets would have mandated FP?
[00:13:51] <whatsupdoc> you probably big on cardano lol
[00:14:22] <whatsupdoc> FP?
[00:14:23] <EvanR> and then Americans learn haskell to find vulnerabilities in all china's software because it's written in haskell
[00:14:32] <Inst> EvanR: win win, no?
[00:14:41] <geekosaur> depends on whoever talked them into believing that <x> programming strategy is "bourgeois"
[00:14:44] <Inst> mass Haskell adoption for everyone
[00:15:05] <Inst> strangely enough, the best Haskell textbooks I've seen were written by Russians
[00:15:15] <geekosaur> remember that neither politics nor law is particularly rational
[00:15:20] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[00:15:31] <Inst> Soviets and Chinese have strong baseline math education
[00:15:32] <monochrom> C++ is too advanced. Haskell is so much easier.
[00:15:55] <Inst> reason Soviets would have stuck with IP / procedural norms, though, was that they were behind on semi-conductors
[00:16:34] <Inst> the Chinese are around 10 years behind, with 8nm being cutting edge (with imported equipment) and they're just implementing 14nm, whereas the Taiwanese are going to ship 5nm this year
[00:17:00] <Inst> so to get the most raw performance out of their semiconductors, they would likely have stuck with imperative programming
[00:17:11] <EvanR> my other computer is forall x > 0 nm
[00:18:07] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[00:18:58] <[itchyjunk]> Where do you hide your favorate list comprehension exercises?
[00:19:06] <[itchyjunk]> having a hard time finding them with google
[00:19:14] <[itchyjunk]> or maybe "list comprehension" isnt' the right term?
[00:19:15] <[exa]> [itchyjunk]: protip: try Prolog
[00:19:16] <Inst> i'll query you some "stuff"
[00:19:25] <Inst> are you working Lyah?
[00:19:27] <[itchyjunk]> isn't that a different language? :x
[00:20:18] <[exa]> list monad and prolog behave similarly (also check out LogicT), so porting some prologish exercises to lists&comprehensions is usually a cool way to find new exercises
[00:21:15] <[itchyjunk]> Hm, might have to do that. would have been ideal if i found some exercises made for novice haskeller
[00:21:17] <Inst> nice
[00:21:22] <Inst> check query
[00:21:50] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Read error: Connection reset by peer)
[00:22:08] <[exa]> try doing the "kalotan puzzle" with list comprehensions, not interpreting any of the logic yourself. See http://gauss.ececs.uc.edu/Courses/c694/lectures/Review/Exceptions/review.9.html or here with better hints https://ds26gte.github.io/tyscheme/index-Z-H-16.html#TAG:__tex2page_sec_14.4.1
[00:22:14] <monochrom> You may not need many list comprehension exercises.
[00:22:22] *** Joins: michalz (~michalz@185.246.204.126)
[00:22:26] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[00:22:26] <[exa]> [itchyjunk]: ^^
[00:22:26] <[itchyjunk]> :O
[00:22:27] <hololeap> [a] -> LogicT m a -- I've been using (asum . fmap pure) for this, but I'm wondering if there's something more idiomatic
[00:22:34] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[00:22:35] <polyphem> [itchyjunk]: i did project euler when i started to learn haskell and i used list comprehension quite a lot when doing the puzzles so maybe thats somthing for you
[00:22:46] <[exa]> +1 polyphem
[00:25:02] <polyphem> [itchyjunk]: https://projecteuler.net/
[00:25:36] <monochrom> Ugh no, unless you won't ask "how to make it fast".
[00:26:11] <monochrom> If you fully expect to use list comprehension for brute-forcing and fully expect it's blind brute-forcing then sure.
[00:29:49] <[itchyjunk]> Can I OR on guards?
[00:29:50] <EvanR> It's very good at brute forcing
[00:29:57] <polyphem> monochrom: what do you mean , projecteuler ?
[00:30:01] <[itchyjunk]> [x | x <- list, blah or blah2
[00:30:11] <tomsmeding> :t (||)
[00:30:12] <lambdabot> Bool -> Bool -> Bool
[00:30:15] <EvanR> specifically you won't miss elements of the lists
[00:30:18] <monochrom> Yes Project Euler.
[00:30:42] <monochrom> > [ x | x <- [1,2,3], even x || odd x]
[00:30:44] <lambdabot>  [1,2,3]
[00:31:17] *** Quits: schweers (~user@2001:16b8:e94a:ef00:aaa1:59ff:fe3f:235c) (Quit: ERC 5.4 (IRC client for GNU Emacs 28.0.91))
[00:32:30] <[itchyjunk]> https://bpa.st/YBQQ
[00:32:32] <[itchyjunk]> ta da
[00:33:31] <polyphem> foldr (+) 0 = sum
[00:34:10] <polyphem> > sum [1..10]
[00:34:11] <lambdabot>  55
[00:34:15] <EvanR> shouldn't sum really be a (strict) foldl
[00:34:20] <[itchyjunk]> oh
[00:34:21] *** Joins: jkaye (~jkaye@2601:281:8300:7530:a9ff:dc19:c096:5ef5)
[00:34:56] <tomsmeding> EvanR: it is since ghc 9.2
[00:35:02] <monochrom> It doesn't matter for 10 numbers.
[00:35:03] <tomsmeding> before that it was foldl, of all things
[00:35:13] <bjs> I think EvanR is saying for [itchyjunk]'s benefit
[00:35:16] <EvanR> oh it is? cool
[00:35:43] <tomsmeding> EvanR: https://hackage.haskell.org/package/base-4.15.1.0/docs/src/GHC.List.html#sum vs https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.List.html#sum
[00:36:00] <bjs> [itchyjunk]: you should keep doing fold exercises so you get a feel for when foldr and foldl make sense, it's tricky
[00:36:25] <[itchyjunk]> yeah foldl foldr has been the worst of them so far!
[00:36:25] *** Joins: notzmv (~zmv@user/notzmv)
[00:36:36] <EvanR> FOLD LIFE
[00:36:39] <bjs> tomsmeding: why was it foldl not foldl' before? I can't see a benefit
[00:37:09] <geekosaur> becuase that's what the haskell report's prelude said it should be
[00:37:19] <tomsmeding> https://www.haskell.org/onlinereport/haskell2010/haskellch9.html#x16-1720009.1
[00:37:30] <EvanR> yeah so no benefit
[00:37:35] <tomsmeding> indeed
[00:40:16] *** Joins: jgeerds_ (~jgeerds@55d4bbed.access.ecotel.net)
[00:40:25] <bjs> [itchyjunk]: it might be instructive to try write your own foldl function using foldr (and vice-versa) and considering how they behave on infinite lists
[00:42:23] *** Quits: Topsi (~Tobias@dyndsl-095-033-027-133.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[00:42:24] <[itchyjunk]> wth!
[00:42:39] <[itchyjunk]> write foldl using foldr? heh. alright, maybe i'll try that
[00:42:43] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:42:48] <[itchyjunk]> i did write filter using foldl and foldr i think
[00:43:47] <polyphem> [itchyjunk]: or you watch a video : https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwiB__zhzqr1AhUeR_EDHbmQBjkQwqsBegQIBxAB&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dt9pxo7L8mS0&usg=AOvVaw3U8z2I4AayiuQTHadI2Ms1
[00:44:08] *** Joins: breakwindows (~brkwnds@86.107.75.45)
[00:44:10] <polyphem> [itchyjunk]: sorry , https://www.youtube.com/watch?v=t9pxo7L8mS0
[00:45:39] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[00:47:17] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[00:47:18] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:47:19] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:47:19] *** Joins: wroathe (~wroathe@user/wroathe)
[00:48:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:49:37] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[00:49:56] <Inst> does anyone know / do fantasyland here?
[00:49:59] <Inst> I'm reading a bit up about it
[00:50:20] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[00:52:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:52:09] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[00:53:29] <Inst> ultimate love letter to haskell, tbh
[00:53:35] <Inst> well, it'd be ultimate if you had haskell syntax
[00:53:56] <EvanR> "fantasyland" is haskell related?
[00:54:43] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[00:56:09] <Inst> Fantasyland is a specification for Javascript libraries inspired by Haskell
[00:56:47] <Inst> it came after some people on Javascript committees told the devs "you must live in Fantasyland" after they suggested porting FP structures to the Javascript language
[00:56:52] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:58:08] <geekosaur> *snort*
[00:58:08] <Inst> they've implemented semigroups, monoids, the works
[01:00:05] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[01:01:11] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[01:01:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:02:27] <[itchyjunk]> Say i wanted to define a list l such that the first two element is 1 and 2 and the third element is the sum of those. so `let l = 1:2:"sum of those things"` `let l = 1:2:foldr (+) 0 l` ish?
[01:02:28] *** Quits: pottsy (~pottsy@129.227.183.244) (Ping timeout: 250 seconds)
[01:03:05] <[itchyjunk]> but i can see this is creating recursions that would mess it up
[01:03:27] <geekosaur> you might be interestd in zipWith
[01:03:33] <[itchyjunk]> hmmm
[01:03:50] <geekosaur> see the classic definition of fibs
[01:03:55] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[01:04:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:4f29:e68c:50c9:fe2) (Ping timeout: 240 seconds)
[01:05:00] <geekosaur> > let l = 1:2:zipWith (+) l (tail l) in l
[01:05:02] <lambdabot>  [1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,1771...
[01:05:45] <whatsupdoc> is haskell the future?
[01:05:48] <geekosaur> hm, or did you want to go from the beginning for each one?
[01:06:17] <[itchyjunk]> i am not sure what i wanted anymore! :P but i guess i'll learn up on zipWith a bit more
[01:06:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[01:06:18] <geekosaur> whatsupdoc, haskell is already having an impact on many other languages. not sure haskell itself is the future but its ideas certainly seem to be
[01:06:20] <[itchyjunk]> might be a useful thing
[01:06:21] <EvanR> whatsupdoc, I'm sure someone's been asking this since 1990
[01:06:43] <polyphem> whatsupdoc: wrong question , do YOU want it to be the future ?
[01:06:49] <whatsupdoc> no
[01:07:11] <Inst> it's sort of insulting, tbh, given that "Fusion is the energy technology of the future and has been since the 1950s."
[01:07:11] <EvanR> haskell is the present
[01:07:42] <EvanR> acme-now
[01:07:44] <polyphem> haskell has the tardis , its past and future
[01:07:48] <Inst> like I said, apparently Javascript coders got so jealous they reimplemented a good portion of the Haskell language in JS
[01:08:08] <EvanR> javascriptZ ?
[01:08:13] <[itchyjunk]> I want causality to stop existing. So we already had this conversation tomorrow.
[01:08:16] <Inst> is javascriptZ a thing?
[01:08:30] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:08:31] <geekosaur> there's alsourescript and typescript
[01:08:45] <geekosaur> *also purescript
[01:08:47] <Inst> fantasyland libs, i mean
[01:09:13] <whatsupdoc> typescript is functionally equivalent to haskell?
[01:09:24] <[itchyjunk]> So i want to reimplement foldr using foldl. is my signature correct? (a -> b -> b) -> b -> [a] -> [b]
[01:09:36] <[itchyjunk]> or do i need the constraint of Foldable t here?
[01:09:39] <EvanR> you mean implement foldl with foldr
[01:09:43] *** Joins: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net)
[01:09:51] <[itchyjunk]> i thought maybe using [a] lets me skip it
[01:10:02] <geekosaur> typescript takes the idea of haskell-ish types and adds them to javascript
[01:10:04] <Inst> did someone teach you accumulators yet?
[01:10:04] <[itchyjunk]> i thought i was trying to implement foldr using foldl
[01:10:18] <geekosaur> purescript is a closer approximation of haskell
[01:10:30] <[itchyjunk]> hmm i think i might have used accumulator to count the length of a string
[01:10:42] <EvanR> foldl fails any task for infinite list
[01:10:49] *** Quits: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net) (Client Quit)
[01:10:50] <[itchyjunk]> :o
[01:11:05] <Inst> foldl uses an accumulator as a central value, then kills itself and displays the accumulator on death
[01:11:07] <[itchyjunk]> so you can represent foldl with foldr but not vice versa? /o\
[01:11:20] <polyphem> [itchyjunk]: i really urge you to watch the video :)
[01:11:26] *** Joins: talismanick (~talismani@c-67-164-73-220.hsd1.ca.comcast.net)
[01:11:33] <[itchyjunk]> ive watched first 10 mins 
[01:11:51] <Inst> yeah, because the function has to finish processing the data before the accumulator can process
[01:12:07] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:2d06:fff0:d105:7c1) (Ping timeout: 268 seconds)
[01:12:12] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Quit: WeeChat 3.3)
[01:12:13] <polyphem> hmm
[01:12:33] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[01:12:34] <EvanR> the real answer lies in the code for foldl
[01:12:41] <Inst> accumulators: basically a sneaky way to get something like mutable variables, except with no side effects
[01:12:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:13:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:13:25] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:14:03] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[01:14:09] <Inst> i wonder what proportion of JS coders use fantasyland libs
[01:14:13] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Client Quit)
[01:14:26] <Inst> might possibly be more fantasyland users than Haskellers proper
[01:15:34] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[01:15:38] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:17:54] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:18:35] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Client Quit)
[01:20:19] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[01:22:33] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:4895:4e42:bd43:c273)
[01:24:43] <EvanR> Inst, a sneaky way to get something like mutable variables except no side effects is ST
[01:24:44] *** Quits: xff0x (~xff0x@2001:1a81:534d:9900:c522:bda4:b63a:6841) (Ping timeout: 252 seconds)
[01:25:24] *** Joins: xff0x (~xff0x@2001:1a81:534d:9900:8245:a333:af79:9a1f)
[01:26:08] *** Joins: biberu (~biberu@user/biberu)
[01:28:41] *** Quits: simpleauthority (~simpleaut@user/simpleauthority) (Quit: ZNC 1.8.2 - https://znc.in)
[01:28:49] *** Joins: pdroman (~pdroman@27.red-88-5-21.dynamicip.rima-tde.net)
[01:29:15] *** Joins: x28girl (~x28girl@user/x28girl)
[01:30:34] *** Joins: simpleauthority (~simpleaut@user/simpleauthority)
[01:30:44] *** Quits: pdroman (~pdroman@27.red-88-5-21.dynamicip.rima-tde.net) (Client Quit)
[01:31:26] *** Joins: x28_girl (~x28girl@user/x28girl)
[01:32:00] *** Joins: myrrh (~markus@user/poet)
[01:32:00] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Quit: WeeChat 3.3)
[01:33:20] *** Joins: x28__girl (~x28girl@user/x28girl)
[01:35:06] *** Quits: x28girl (~x28girl@user/x28girl) (Ping timeout: 256 seconds)
[01:38:51] *** Joins: Guest87 (~Guest87@151.82.3.46)
[01:38:51] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:38:51] *** Quits: Guest87 (~Guest87@151.82.3.46) (Client Quit)
[01:39:01] *** Joins: acidjnk (~acidjnk@p200300d0c7271e52381c42d4d3ad2973.dip0.t-ipconnect.de)
[01:39:01] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e52381c42d4d3ad2973.dip0.t-ipconnect.de)
[01:39:25] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[01:40:12] *** Quits: breakwindows (~brkwnds@86.107.75.45) (Ping timeout: 256 seconds)
[01:41:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[01:44:09] *** Joins: Guest87 (~Guest87@151.82.3.46)
[01:47:31] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[01:47:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:47:57] *** Joins: x28__girl (~x28girl@user/x28girl)
[01:48:24] *** Joins: Guest8762 (~Guest87@151.82.3.46)
[01:48:58] *** Quits: x28__girl (~x28girl@user/x28girl) (Max SendQ exceeded)
[01:49:27] *** Joins: x28__girl (~x28girl@user/x28girl)
[01:50:01] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:50:43] *** Quits: Guest8762 (~Guest87@151.82.3.46) (Client Quit)
[01:50:45] *** Quits: x28__girl (~x28girl@user/x28girl) (Max SendQ exceeded)
[01:51:55] *** Joins: x28__girl (~x28girl@user/x28girl)
[01:53:35] *** Quits: Guest87 (~Guest87@151.82.3.46) (Quit: Client closed)
[01:54:42] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[01:55:25] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[01:55:55] <Inst> https://groups.seas.harvard.edu/courses/cs152/2019sp/lectures/lec18-monads.pdf
[02:01:20] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[02:02:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:02:59] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[02:06:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[02:09:25] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[02:12:51] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:13:42] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:14:06] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[02:15:12] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:16:25] *** Quits: michalz (~michalz@185.246.204.126) (Remote host closed the connection)
[02:18:47] <[itchyjunk]> How do people end up defining groups in programming language?
[02:18:55] <[itchyjunk]> as a data structure? list comprehension?
[02:19:06] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Quit: WeeChat 3.3)
[02:19:32] <geekosaur> depends on what you mean by group, and on how you're going to use it
[02:20:11] <geekosaur> singly-linked lists are often a poor data structure; usually it's better to think of them as loops instead of as data structures
[02:20:45] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[02:20:54] <hpc> obligatory "as a monoid with an inverse operation" :D
[02:21:06] <jackdk> https://hackage.haskell.org/package/groups
[02:22:12] <Logio> [itchyjunk]: groups as in groups of stuff (i.e. sets), or the algebraic structure?
[02:22:24] <[itchyjunk]> algebraid structure :s
[02:23:16] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:24:02] *** Joins: qhong_ (~qhong@rescomp-21-400677.stanford.edu)
[02:24:23] <[itchyjunk]> I guess monoid is a datastructure and group just extends it :D
[02:25:03] <qhong_> Anyone has experience successfully get exference or MagicHaskeller running? They seem bitrot and I can't get them pass build at all
[02:25:24] <geekosaur> a monoid iusn't so much a data structure as an attribute of some (many) data structures
[02:25:30] <geekosaur> same with groups
[02:25:47] <Logio> unless you consider a tuple of a type and a function a data structure
[02:25:52] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:26:07] <hpc> i suppose there are other ways to define it, but via monoid seems the most natural
[02:26:40] <hpc> maybe each axis of the "group cube" could be its own class, and you build group alacarte? https://upload.wikimedia.org/wikipedia/commons/3/3f/Magma_to_group4.svg
[02:26:40] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Quit: WeeChat 3.3)
[02:27:20] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[02:28:27] *** Joins: alx741 (~alx741@157.100.93.160)
[02:29:22] <geekosaur> qhong_, poking at exference it looks like the usual problem with <> having been adopted by the Prelude with a different meaning
[02:33:28] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[02:35:08] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[02:36:55] *** Joins: alx741_ (~alx741@157.100.93.160)
[02:37:04] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:37:14] *** Quits: alx741_ (~alx741@157.100.93.160) (Client Quit)
[02:40:24] <geekosaur> seem to have it building locally with --allow-newer and the usual import Prelude mods
[02:40:29] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[02:43:55] <janus> how dangerous is it to use a nightly stackage snapshot? it doesn't seem very dangerous to me since the software has already been released to hackage
[02:45:18] <janus> the only way it could break is if value-level assumptions are suddenly broken, but how often does that happen in haskell? i feel like it doesn't happen very often
[02:45:34] <janus> if the incompatibility breaks the build, surely it doesn't even stay in the nightly snapshot
[02:50:09] *** Joins: pottsy (~pottsy@129.227.183.244)
[02:51:07] <janus> i have this perception that lts-14.27 is more trustworthy than stackage nightly, but i never really hit a nightly issue that would confirm that hypothesis. i am curious to hear how others weigh old-vs-new and stable-vs-unstable
[02:51:15] <geekosaur> the main danger is that something you rely on isn't there any more, or your own software isn't compatible with the compiler it's based on (as with the simplified subsumption changes in 9.0.x)
[02:52:11] <janus> oh but that isn't an issue because we have parallel builds with lts-14.27 and stackage nightly. we already fixed all the subsumption kinks
[02:52:54] <jackdk> if stack didn't generate `base >= 4.x && <5` in `package.yaml` or whatever, it wouldn't try to build with breaking changes like that
[02:53:46] <janus> i am just worried that if we switch production to run with the nightly build instead of lts-14.27, we'll hit some weird runtime issue. i actually worry more about library bugs than compiler bugs
[02:54:33] <janus> jackdk: sure, lots of libraries had to be fixed before they could go into stackage nightly again. i even had to ask trustees to fix some. but that is all done now
[02:54:34] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:55:10] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:55:36] *** Joins: dut (~dut@user/dut)
[02:56:26] <jackdk> those libraries should have been constraint-solving failures, not build-time failures.
[02:56:31] <geekosaur> welp. qhong_, got everything and then tripped over a kind change in Language.Haskell.Exts that I have no clue about. I think that means exference is toast. :(
[02:56:38] *** Joins: colton (~colton@2601:681:4c00:96e0:4151:f3f:5fca:73bb)
[02:57:02] <geekosaur> hm, hexagonel is here. wonder if that means it's been disowned
[02:57:15] <geekosaur> but exferenceBot isn't
[02:57:20] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:58:42] *** Parts: colton (~colton@2601:681:4c00:96e0:4151:f3f:5fca:73bb) ()
[02:59:24] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[02:59:25] *** Quits: emf (~emf@2620:10d:c090:400::5:b9c2) (Ping timeout: 268 seconds)
[03:00:01] *** Joins: alx741 (~alx741@157.100.93.160)
[03:00:59] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[03:01:14] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[03:04:54] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:06:49] *** Joins: emf (~emf@2620:10d:c091:480::1:79e9)
[03:09:46] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[03:10:10] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[03:10:18] *** Joins: alx741 (~alx741@157.100.93.160)
[03:12:21] *** Joins: emf_ (~emf@2620:10d:c090:400::5:b9c2)
[03:13:27] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[03:13:36] *** Quits: emf (~emf@2620:10d:c091:480::1:79e9) (Ping timeout: 268 seconds)
[03:16:39] <geekosaur> qhong_, both of those paqckages depend on (wrapped) compiler internals which change somewhat frequently. I have no idea what the necessary changes are; you'd have to use an older compiler
[03:17:28] <Henson> I'm having difficulty getting code coverage report to work with "stack test --coverage".  This used to work 2 years ago on an older version of stack, but now it doesn't and complains about the coverage report not seeing any code.  Does anybody have any suggestions as to what I should look at?  I've tried a bunch of things with no luck.
[03:18:16] <Inst> this is entertaining
[03:18:33] <EvanR> [itchyjunk], there are haskell libraries with a truckload of abstract algebra (re)defined, or you could just define class Monoid a => Group a where inv :: a -> a, if you want
[03:18:58] <[itchyjunk]> hmm
[03:19:00] <EvanR> that defines Group, though now you have to ask what could satisfy it
[03:19:44] <monochrom> Sum Int satisfies it, for example.
[03:19:47] <EvanR> maybe more importantly, what are some general algorithms that use it
[03:20:36] <monochrom> Algorithms that start from a few elements and find the generated subgroup :)
[03:20:43] <geekosaur> only if you ignore its minBound :þ
[03:20:58] <monochrom> Haha OK Integer
[03:21:00] <EvanR> by find the subgroup, do you mean... some kind of enumeration of all the elements? xD
[03:21:05] *** Joins: aeka (~aeka@user/hiruji)
[03:21:13] <monochrom> That's one version.
[03:21:17] <EvanR> or do we need a subgroup class
[03:21:29] <EvanR> (multiparameter)
[03:21:38] <EvanR> and it starts to get hairy
[03:21:57] <monochrom> Nah don't define a subgroup class.
[03:23:19] <EvanR> ok now I want to write that algorithm
[03:23:19] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:23:37] <EvanR> and see what happens with floats lol
[03:23:39] *** Joins: emf (~emf@2620:10d:c091:480::1:147e)
[03:24:37] *** Quits: emf_ (~emf@2620:10d:c090:400::5:b9c2) (Ping timeout: 240 seconds)
[03:24:40] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[03:24:48] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[03:27:28] *** Joins: emf_ (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[03:27:33] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[03:27:56] <EvanR> that's funny, Int w/ + breaks group laws?
[03:27:57] *** Quits: emf (~emf@2620:10d:c091:480::1:147e) (Ping timeout: 240 seconds)
[03:28:23] <EvanR> > -minBound :: Int
[03:28:24] <lambdabot>  -9223372036854775808
[03:28:35] <EvanR> > -minBound + minBound :: Int
[03:28:37] <lambdabot>  0
[03:28:39] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[03:28:45] *** Joins: alx741 (~alx741@157.100.93.160)
[03:28:45] <EvanR> :sus:
[03:29:12] <monochrom> Involutions are a thing.
[03:29:51] <EvanR> > -minBound + (minBound + minBound) :: Int
[03:29:52] <lambdabot>  -9223372036854775808
[03:30:03] <EvanR> > (-minBound + minBound) + minBound :: Int
[03:30:06] <lambdabot>  -9223372036854775808
[03:30:30] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[03:30:33] <monochrom> The Klein 4-group is full of involutions. Only the identity element is not an involution.
[03:30:45] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[03:31:04] *** Joins: aeka (~aeka@user/hiruji)
[03:32:39] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[03:33:03] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[03:33:38] *** Joins: Alex_test_ (~al_test@178.34.151.107)
[03:34:37] *** Quits: Alex_test (~al_test@178.34.151.107) (Ping timeout: 240 seconds)
[03:35:38] *** Joins: aeka (~aeka@user/hiruji)
[03:36:12] <Axman6> Does it bother anyone else that TIO.putStrLn $ T.reverse "🇦🇺" prints🇺🇦
[03:36:30] <Axman6> wow, that was not handled well by my terminal
[03:36:30] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[03:36:50] <EvanR> the aussie flag turns into.. who's that, estonia?
[03:37:01] <Axman6> ukraine I believe
[03:37:04] <EvanR> oh right
[03:37:26] *** Quits: max22- (~maxime@2a01cb0883359800decae4ceda35e3bf.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:37:34] <Axman6> "\127462\127482", regional indicator symbols for a and u
[03:37:38] *** Quits: burnside_ (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[03:38:10] *** Joins: burnsidesLlama (~burnsides@client-8-91.eduroam.oxuni.org.uk)
[03:39:25] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:40:01] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[03:40:37] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:40:41] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[03:42:13] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:42:17] *** Quits: burnsidesLlama (~burnsides@client-8-91.eduroam.oxuni.org.uk) (Ping timeout: 240 seconds)
[03:43:48] <hpc> welcome to ligature hacks :D
[03:44:18] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[03:44:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:44:35] <Axman6> It's annoyed me for a while that we don't have any decent glyph level handling of text values. Char is not enough!
[03:44:38] *** Joins: goepsilongo (~goepsilon@2806:263:c404:8000:a19a:aab0:db5f:4d8c)
[03:45:01] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[03:46:10] *** Joins: alx741 (~alx741@157.100.93.160)
[03:47:17] <hpc> it's ridiculously complicated too, probably needs its own entire library
[03:47:18] <Axman6> IIRC this is something Go does well out of the box. It's like the one thing they've got
[03:47:19] <hpc> like iconv
[03:47:23] <Axman6> yeah
[03:47:31] <hpc> emojis do it in a totally different way too, just for fun
[03:47:36] <Axman6> https://discourse.haskell.org/t/ann-unicode-data-0-3-0-apis-to-efficiently-access-the-unicode-character-database/3861 got me interested in it again
[03:47:47] <hpc> you use a zero-width joiner character and there's a few different ways that can play out
[03:47:56] <hpc> if your font even supports certain combinations to begin with
[03:48:35] <Axman6> Hence why I had this open https://en.wikipedia.org/wiki/Emoji#Joining :P
[03:48:51] * hpc . o O ( on april 1, have the reverse operation on a unicode string just put the RLO character in front of it )
[03:50:32] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:51:45] <Axman6> "-- | This function is pure-ish, it'll behave exactly as you expect unless called on 1 April UTC time each year, then it'll play pranks on you"
[03:52:47] <ephemient> > let s = "\128104\8205\129456\8205\128105" in (s, reverse s)
[03:52:49] <lambdabot>  ("\128104\8205\129456\8205\128105","\128105\8205\129456\8205\128104")
[03:52:54] <ephemient> oh foo
[03:53:29] <ephemient> > let s = "\128104\8205\129456\8205\128105" in putStr $ s ++ "|" ++ reverse s
[03:53:31] <lambdabot>  <IO ()>
[03:53:47] <ephemient> wellp, guess I can't get lambdabot to do it
[03:54:18] <Axman6> > let s = "\128104\8205\129456\8205\128105" in text $ s ++ "|" ++ reverse s  
[03:54:19] <lambdabot>  👨‍🦰‍👩|👩‍🦰‍👨
[03:54:28] <Axman6> interesting!
[03:54:40] *** Joins: vysn (~vysn@user/vysn)
[03:54:40] <hpc> Axman6: ooh, use acme-now to detect the date as well
[03:54:50] <hpc> and https://hackage.haskell.org/package/acme-mutable-package so it doesn't show up in the dependencies
[03:55:06] <hpc> sneak it into a revision that's created at build timme
[03:55:22] <Axman6> When running let s = "\128104\8205\129456\8205\128105" :: Text in TIO.putStrLn (s <> "|" <> T.reverse s) I get back 👨‍🦰‍👩|👩‍🦰‍👨
[03:55:44] <Axman6> uh... even mor einteresting, it removecd the ranga-ness!
[03:56:28] *** Joins: alx741 (~alx741@157.100.93.160)
[03:56:32] <geekosaur> remember yahb can do IO
[03:57:54] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[03:59:37] <monochrom> It would be funny if the 1 April prank implementation had a Y2K bug so after the year 2000 it mistook every day for 1 April. "The joke is on you."
[03:59:46] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:02:06] <hpc> like when microsoft added a teams ad to windows that made your entire system unusable
[04:02:16] <hpc> good thing they added a policy making easter eggs a fireable offense
[04:03:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:03:55] <monochrom> I would be more impressed if their policy made bugs a fireable offense.
[04:04:18] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[04:04:59] <monochrom> Banning easter eggs is just banning a symptom, and even among symptoms the most superficial and trivial one.
[04:04:59] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:05:06] <Axman6> Hmmmm: https://hackage.haskell.org/package/unicode-data-0.3.0/docs/src/Unicode.Internal.Char.UnicodeData.GeneralCategory.html#generalCategory
[04:05:14] <Axman6> Haddock did noy do well with this...
[04:05:37] <Axman6> not*
[04:05:50] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[04:06:08] <hpc> that crashed my browser lol
[04:06:43] <monochrom> That is epic.
[04:06:54] <Axman6> the original haskell file is 3.32 MB
[04:06:59] *** Joins: cheater (~Username@user/cheater)
[04:07:01] <Axman6> so... understandable
[04:09:17] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:09:17] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[04:10:11] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[04:10:39] <Axman6> uh, wow. ok looking at the code I can see why, bitmap# is an Addr#, presumably ord (maxBound :: Char) in length, and each element takes up four characters as \NUL\NUL etc
[04:10:47] <Axman6> I wonder if making it use \0 would help at all
[04:10:51] *** Joins: alx741 (~alx741@157.100.93.160)
[04:11:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:a9ff:dc19:c096:5ef5) (Ping timeout: 240 seconds)
[04:12:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[04:13:19] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[04:14:01] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[04:14:25] *** Joins: x28_girl (~x28girl@user/x28girl)
[04:15:49] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[04:17:39] *** Joins: aeka (~aeka@user/hiruji)
[04:17:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[04:18:21] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:18:46] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[04:19:38] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[04:21:24] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:21:37] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::55f8)
[04:23:57] <[itchyjunk]> Task is to implement zip in terms of zipWith. Here is my solution : https://bpa.st/WRNQ
[04:24:08] *** Joins: alx741 (~alx741@157.100.93.160)
[04:24:36] <geekosaur> I take it go is a leftover?
[04:24:50] <geekosaur> also as it turns out there's an even shorter version
[04:24:53] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[04:24:57] *** Quits: myrrh (~markus@user/poet) (Ping timeout: 256 seconds)
[04:25:10] <[itchyjunk]> oh yeah i replaced go with that lambda function
[04:25:13] <[itchyjunk]> hmm
[04:25:18] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[04:25:20] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:25:24] <geekosaur> (also the [] [] pattern match is unnecessary, since zipWith already handles it)
[04:25:34] <geekosaur> :t (,)
[04:25:35] <lambdabot> a -> b -> (a, b)
[04:25:36] <[itchyjunk]> ah, i was kinda suspecting it
[04:25:38] <whatsupdoc> you know a language sucks when hello world is 2 lines
[04:26:03] <ephemient> and once you take out [], xs and ys are unnecessary
[04:26:09] <[itchyjunk]> i inquired about "hello world" in riscv and you need to write a library for uART or somesuch to tdo it
[04:26:11] <[itchyjunk]> so i gave up
[04:26:38] <[itchyjunk]> ephemient, like _ _ suffices?
[04:26:54] <ephemient> @src zip
[04:26:54] <lambdabot> zip (a:as) (b:bs) = (a,b) : zip as bs
[04:26:54] <lambdabot> zip _      _      = []
[04:27:16] <ephemient> well I wasn't sure which definition was going to pop out
[04:28:01] <ephemient> > let zip :: [a] -> [b] -> [(a, b)]; zip = zipWith (,) in zip ['a'..] [1..]
[04:28:03] <lambdabot>  [('a',1),('b',2),('c',3),('d',4),('e',5),('f',6),('g',7),('h',8),('i',9),('j...
[04:28:11] <geekosaur> [itchyjunk], I showed you the trick already
[04:28:12] *** Joins: aeka (~aeka@2606:6080:1001:18:8d41:9604:d435:36b6)
[04:28:52] <geekosaur> right, and there's ephemient's version of the same thing
[04:28:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:29:03] <geekosaur> (,) is a tuple constructor
[04:30:11] <geekosaur> (sadly you need to turn on an extension to go the next step and use it as a section)
[04:30:23] <[itchyjunk]> oh right the constructor
[04:30:46] <ephemient> (,,,,,,,,,,,,,,,,,,,,,,,,,) is also a constructor
[04:31:27] <[itchyjunk]> :o
[04:32:08] <[itchyjunk]> does the fst snd thing works with n-tuples? i think not, right?
[04:32:24] <ephemient> (1,) and (,1) are sections, but they aren't allowed without {-# LANGUAGE TupleSections #-} (what geekosaur was referring to)
[04:32:51] <ephemient> Prelude's fst and snd are only defined on pairs (so no, not n-tuples)
[04:33:25] <geekosaur> right, the fact that each tuple type is its own thing makes defining a general one difficult
[04:33:35] <geekosaur> you can do it with typeclasses but it's hacky and fragile
[04:33:36] *** Joins: jkaye (~jkaye@2601:281:8300:7530:a78a:7d05:3820:99ae)
[04:33:42] <ephemient> lens does some magic to make _1 work on tuples of any-ish size
[04:33:43] <geekosaur> iirc
[04:34:25] *** Joins: alx741 (~alx741@157.100.93.160)
[04:34:56] <geekosaur> pretty sure it does the typeclass thing I just mentioned
[04:36:12] <geekosaur> :t _1
[04:36:13] <lambdabot> (Field1 s t a b, Functor f) => (a -> f b) -> s -> f t
[04:36:58] <ephemient> %% :i Field1
[04:36:59] <yahb> ephemient: http://qp.mniip.com/y/38
[04:36:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:36:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:36:59] *** Joins: wroathe (~wroathe@user/wroathe)
[04:37:01] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[04:37:45] <ephemient> looks like it's pre-defined up to… 37-tuples?
[04:38:29] <ephemient> seems like a pretty arbitrary limit but I guess it doesn't really matter. you can go nuts and define your own instances for larger tuples
[04:38:33] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (Ping timeout: 256 seconds)
[04:38:42] *** Quits: polyphem (~rod@2a02:810d:640:776c:e450:3ca3:b389:687a) (Ping timeout: 268 seconds)
[04:38:54] <geekosaur> the Generic default might do it for you, just slower
[04:39:23] *** Quits: aeka (~aeka@2606:6080:1001:18:8d41:9604:d435:36b6) (Read error: Connection reset by peer)
[04:39:50] <ephemient> > (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)^._1
[04:39:52] <lambdabot>  error:
[04:39:52] <lambdabot>      • Could not deduce (Num a0)
[04:39:52] <lambdabot>        from the context: (Num a, Num b, Num c, Num d, Num e, Num f, Num g,
[04:40:02] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:40:05] *** Joins: polyphem (~rod@ip5f5bff31.dynamic.kabel-deutschland.de)
[04:40:22] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[04:40:50] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:40:52] <ephemient> ... oh is {-# LANGUAGE NumericUnderscores #-} interfering with lens?
[04:40:59] <ephemient> > (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) ^. _1
[04:41:00] <lambdabot>  error:
[04:41:00] <lambdabot>      • Could not deduce (Num a0)
[04:41:00] <lambdabot>        from the context: (Num a, Num b, Num c, Num d, Num e, Num f, Num g,
[04:41:09] <ephemient> nope, not sure what it is
[04:41:39] <geekosaur> > (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) ^. _1 :: Int
[04:41:41] <lambdabot>  error:
[04:41:41] <lambdabot>      • No instance for (Field1
[04:41:41] <lambdabot>                           (Integer, Integer, Integer, Integer, Integer, Integ...
[04:41:47] <geekosaur> > (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) ^. _1 :: Integer
[04:41:48] <lambdabot>  error:
[04:41:48] <lambdabot>      • No instance for (Field1
[04:41:48] <lambdabot>                           (Integer, Integer, Integer, Integer, Integer, Integ...
[04:41:57] <ephemient> I guess the Generic instance doesn't help
[04:42:03] <geekosaur> doesn't look like it
[04:43:02] *** Joins: aeka (~aeka@user/hiruji)
[04:43:07] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:86d:17f:4605:4c9d) (Remote host closed the connection)
[04:43:14] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[04:43:39] *** Quits: jgeerds_ (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 256 seconds)
[04:43:49] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e52381c42d4d3ad2973.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:43:49] *** Quits: acidjnk (~acidjnk@p200300d0c7271e52381c42d4d3ad2973.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:44:22] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:46:49] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[04:47:09] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[04:47:51] *** Joins: aeka (~aeka@user/hiruji)
[04:49:05] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[04:49:48] *** Joins: alx741 (~alx741@157.100.93.160)
[04:52:57] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[04:52:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:54:40] <[itchyjunk]> in my go, when i > n, it should just return [] and the loop should stop, no?
[04:54:41] <[itchyjunk]> https://bpa.st/XZWA
[04:56:05] <[itchyjunk]> myTake 5 [1..10]
[04:56:05] <[itchyjunk]> [1,2,3,4,5,6,7,8,9,10]
[04:56:13] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[04:56:14] <[itchyjunk]> :D so the "loop" has an issue
[04:56:45] <Axman6> comparing to length xs is almost always a mistake in Haskell
[04:57:12] <[itchyjunk]> hmm
[04:57:38] *** Quits: mmhat (~mmh@55d441e1.access.ecotel.net) (Quit: WeeChat 3.4)
[04:57:42] <Axman6> also, just count down, once n <= 0 then return []
[04:57:50] <Axman6> no need to carry around i and n
[04:58:25] <geekosaur> also it looks to me like if it did work as you have it written it'd always produce []
[04:58:34] <geekosaur> because you throw away the result
[04:59:04] *** Joins: alx741 (~alx741@157.100.93.160)
[04:59:40] <[itchyjunk]> thats what i was expecting to see, [] everytime :P
[04:59:42] *** Joins: aeka` (~aeka@2606:6080:1001:f:ed79:9361:ea0e:3e88)
[04:59:59] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[05:00:31] <[itchyjunk]> tiny bit edit but still with the same bugs
[05:00:32] <[itchyjunk]> https://bpa.st/LVQA
[05:01:03] <[itchyjunk]> n should become 0 at some point in go.
[05:01:12] <[itchyjunk]> i dont see why i am not getting [] 
[05:01:49] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 240 seconds)
[05:03:26] <xsperry> you don't need lenght, or go. just keeping consing elements until you either 1) run out of elements (check for []) 2) n <= 0
[05:04:30] <[itchyjunk]> well if i change n in myTake, then hmm
[05:04:34] <Axman6> take 0 _ = []; take n (x:xs) = ???
[05:04:55] <[itchyjunk]> yeah i guess i can rethink this a bit
[05:05:03] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[05:05:45] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:06:15] <Axman6> > zipWith const "Hello, world!" [1..5]
[05:06:16] <lambdabot>  "Hello"
[05:06:25] <[itchyjunk]> https://bpa.st/6CBA
[05:07:27] <[itchyjunk]> ah there is an issue still
[05:07:50] <Axman6> looks good to me, though what happens when I say myTake 10 "Hello"?
[05:07:53] <xsperry> almost there, just have to handle empty list
[05:08:17] <Axman6> and if you turn on -Wall in ghci (:set -Wall) it will tell you there are patterns you haven't matched
[05:08:19] <[itchyjunk]> i get a non exhaustive error
[05:08:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[05:08:37] <[itchyjunk]> ah
[05:09:10] <[itchyjunk]> https://bpa.st/WYXA
[05:09:24] <[itchyjunk]> just needed `myTake n [] = []` to handle the empty list case
[05:09:57] <Axman6> what happens when I say myTake (-10) "Hello"?
[05:10:06] <[itchyjunk]> /o\
[05:10:28] <[itchyjunk]> I get "Hello"
[05:10:49] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:11:00] <Axman6> this is why we usually define take using guards: myTake n (x:xs) | n <= 0 = [] | otherwise = ...
[05:11:05] <[itchyjunk]> oh it keeps going negative numbers
[05:11:09] <[itchyjunk]> till the list become empty
[05:11:18] <[itchyjunk]> then it hits the `myTake n []` case
[05:11:20] <[itchyjunk]> and ends
[05:11:21] *** Joins: alx741 (~alx741@157.100.93.160)
[05:11:32] <ephemient> > let myTake n = foldr f [] . zip [n, n - 1..] where f (m, a) | m > 0 = (a:) | otherwise = const [] in myTake 10 ['a'..] -- ;-)
[05:11:33] <lambdabot>  "abcdefghij"
[05:11:56] * Axman6 glares
[05:12:05] <[itchyjunk]> so it handle case of negative integers as long as the list is finite it seems
[05:12:26] <[itchyjunk]> there was 2 different take right? take and takeWhile ?
[05:12:31] <[itchyjunk]> :t takeWhile
[05:12:32] <lambdabot> (a -> Bool) -> [a] -> [a]
[05:12:35] <[itchyjunk]> hmm
[05:12:51] <Axman6> generally people think of take as returning at most n elements. it should never return more than n elements
[05:13:01] <Axman6> > take 10 "Hello"
[05:13:03] <lambdabot>  "Hello"
[05:13:06] <Axman6> > take (-10) "Hello"
[05:13:08] <lambdabot>  ""
[05:13:13] <[itchyjunk]> ahh
[05:13:25] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[05:13:47] <[itchyjunk]> can i constraint n  to N = {0,..} then ?
[05:14:20] <[itchyjunk]> as i have it, idk how i would address n < 0
[05:15:25] <ephemient> one way is to guard first, another way is to rearrange your code so you don't have to address it separately
[05:16:53] <xsperry> [itchyjunk], the simplest way would be with an if/then/else expression. or guards 
[05:17:06] <xsperry> have you used either?
[05:17:18] <[itchyjunk]> if
[05:17:24] <[itchyjunk]> i've used if else
[05:17:39] <xsperry> then try doing it with that 
[05:17:42] *** Quits: pottsy (~pottsy@129.227.183.244) (Ping timeout: 250 seconds)
[05:17:44] <Axman6> we don't have if else =)
[05:18:44] <[itchyjunk]> https://bpa.st/DLCA
[05:18:48] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:18:56] <[itchyjunk]> i think my `myTake 0 xs = []` is redundent though
[05:19:04] <xsperry> yeah
[05:19:08] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[05:19:15] <xsperry> it is
[05:20:16] *** Quits: alx741 (~alx741@157.100.93.160) (Remote host closed the connection)
[05:21:35] <EvanR> in haskell it's more conventional to use Int and just put guards to deal sanely with negatives, though some low level modules will use Word which is non negative
[05:21:50] <EvanR> in other languages you might see Nat which is more appropriate for dealing with lists
[05:22:41] <EvanR> Nat = 0, 1, 2, ...
[05:23:28] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[05:23:45] <Axman6> this was discussed on reddit recently, and a good point was made that when thingd go negative with Word, things go very wrong. It's impossible to tell if someone meant to allocate maxBound :: Word bytes or accidentally tried to alocate -1 bytes. The failure modes for using Int are less bad usually, and while they can go equally wrong, doing so is much less common
[05:23:52] <ephemient> there is Numeric.Natural built-in, although I'm not sure when it was added…
[05:24:17] <Axman6> having a non wrapping type would help though
[05:24:24] <Axman6> > (-1) :: Word
[05:24:26] <lambdabot>  18446744073709551615
[05:24:27] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[05:24:33] <ephemient> > 10 ^ 100 :: Natural
[05:24:34] <lambdabot>  error:
[05:24:34] <lambdabot>      Not in scope: type constructor or class ‘Natural’
[05:24:36] <EvanR> yeah Word is not really for this
[05:24:43] <ephemient> oh I guess it's not imported in lambdabot
[05:24:50] <Axman6> % 10 ^ 100 :: Natural
[05:24:53] <yahb> Axman6: *** Exception: heap overflow
[05:24:55] <EvanR> and Natural is cool, but a bit heavy weight for usually uses
[05:24:56] <Axman6> D:
[05:25:01] <ephemient> @import Data.Natural
[05:25:01] <lambdabot> Unknown command, try @list
[05:25:17] <EvanR> @import Numeric.Natural
[05:25:17] <lambdabot> Unknown command, try @list
[05:25:21] <ephemient> > 10 ^ 100 :: Data.Natural.Natural
[05:25:23] <lambdabot>  error:
[05:25:23] <lambdabot>      Not in scope: type constructor or class ‘Data.Natural.Natural’
[05:25:23] <lambdabot>      No module named ‘Data.Natural’ is imported.
[05:25:40] <ephemient> meh, I don't remember how to poke it
[05:25:51] <ephemient> ah, and it's Numeric.Natural anyway
[05:26:01] <ephemient> > 10 ^ 100 :: Numeric.Natural.Natural
[05:26:02] <lambdabot>  error:
[05:26:03] <lambdabot>      Not in scope: type constructor or class ‘Numeric.Natural.Natural’
[05:26:03] <lambdabot>      No module named ‘Numeric.Natural’ is imported.
[05:26:11] <Axman6> % 10 ^ 10 :: Natural
[05:26:13] <yahb> Axman6: *** Exception: heap overflow
[05:26:18] <ephemient> ???
[05:26:19] <Axman6> % 10 ^ 5 :: Natural
[05:26:19] <yahb> Axman6: 100000
[05:26:25] <EvanR> lol, that's a small heap
[05:26:26] <Axman6> crazy
[05:26:31] <Axman6> yah
[05:26:43] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 256 seconds)
[05:27:00] <Axman6> mniip: what's the deal with 10^100 :: Natural getting a heap overflow in yahb?
[05:27:14] <EvanR> 10^10 even
[05:27:24] <ephemient> is there a strict (^)?
[05:27:27] *** Joins: nhatanh02 (~satori@123.24.172.30)
[05:27:46] <EvanR> I mean... it shouldn't matter
[05:27:52] <EvanR> for this
[05:28:07] <Axman6> yeah it's not like the result is particularly big
[05:28:16] *** Joins: joo-_ (~joo-_@80-62-117-53-mobile.dk.customer.tdc.net)
[05:28:16] *** Quits: joo-_ (~joo-_@80-62-117-53-mobile.dk.customer.tdc.net) (Changing host)
[05:28:16] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[05:28:52] <EvanR> a bigint takes up log(n) space
[05:30:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:30:02] <ephemient> % iterate' ((*) 10 $!) 1 :: [Natural]
[05:30:04] <yahb> ephemient: [1,10,100,1000,10000,100000,*** Exception: heap overflow
[05:30:19] <Axman6> that's amazing
[05:30:29] <EvanR> is this not your dad's Natural
[05:30:38] <EvanR> is it a list
[05:30:47] <Axman6> D:
[05:30:59] <Axman6> % 10 ^ 5 :: Numeric.Natural.Natural
[05:31:00] <yahb> Axman6: 100000
[05:31:05] <Axman6> % 10 ^ 100 :: Numeric.Natural.Natural
[05:31:05] <yahb> Axman6: 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
[05:31:10] <Axman6> better
[05:31:38] <ephemient> hah. wait what Natural is the yahb import then?
[05:31:50] <ephemient> %% :i Natural
[05:31:51] <yahb> ephemient: http://qp.mniip.com/y/39
[05:31:58] <ephemient> ohhhhh
[05:32:02] <EvanR> bingo
[05:32:25] <Axman6> yeah that's, uh, not good
[05:32:40] <dibblego> https://hackage.haskell.org/package/natural/docs/Natural.html
[05:32:42] <EvanR> that is so not a "Natural", that's Nat, but Nat is already something else I guess
[05:33:38] <Inst> btw, any ideas of how good Harvard's paper on monads is?
[05:33:39] <Inst> https://groups.seas.harvard.edu/courses/cs152/2019sp/lectures/lec18-monads.pdf
[05:33:50] <Inst> At this point I'm less interested in monads than on materials on Haskell's type system
[05:33:58] <Inst> is it called algebraic structures? algebraic data types? typeclasses?
[05:34:22] <EvanR> hindly milner types, system F, ...
[05:34:25] <Axman6> well it starts with proofs... so definitely not a great idea for beginners IMO
[05:35:11] <EvanR> type classes might be filed away under "constrained polymorphism"
[05:35:19] <Axman6> looks like a possibly useful paper for a mathematician, but I would never give that to a beginner
[05:36:01] <Inst> natural numbers (fixed precision) are already in Haskell
[05:36:05] <Inst> it's called Word
[05:36:15] <Inst> Axman6: it's taught to their UGs
[05:36:34] <Axman6> it's lecture 18, so past absolute beginners
[05:36:40] <Inst> https://groups.seas.harvard.edu/courses/cs152/2021sp/
[05:36:47] <Axman6> Word is not rewally a suitable type for natural numbers
[05:37:02] <Inst> why not?
[05:37:10] <EvanR> we just went over that
[05:37:11] <Axman6> > maxBound :: Word
[05:37:13] <lambdabot>  18446744073709551615
[05:37:33] <Inst> why can't Integral suffice?
[05:37:40] <Inst> word is more about performance
[05:37:40] <Axman6> % fromIntegral (maxBound :: Word) + 1 :: Numeric.Natural.Natural
[05:37:41] <yahb> Axman6: 18446744073709551616
[05:37:52] <EvanR> Word is more about compatibility with low level stuff
[05:38:05] <Axman6> Natural is at least one better than Word, I have proved it
[05:38:09] <Inst> how hard is it to get an arbitrary precision Word?
[05:38:17] <Axman6> that's exactly what Natural is
[05:38:19] <Inst> that's Natural?
[05:38:35] <EvanR> Natural exists and reacts better when you go negative
[05:38:40] <EvanR> by not becoming huge
[05:38:52] <Axman6> and Integer is basically defined as data Integer = Neg Natural | Pos Natural -- (not really, but essentially)
[05:39:19] <EvanR> Integer has two zeros? xD
[05:39:33] <ephemient> % -1 :: Numeric.Natural.Natural
[05:39:33] <yahb> ephemient: ; <interactive>:70:2: warning: [-Woverflowed-literals] Literal -1 is negative but GHC.Num.Natural.Natural only supports positive numbers; *** Exception: arithmetic underflow
[05:39:34] <Axman6> which interestingly means that there are operations on the native Haskell implementation of Integer which run faster than GMP's equivalent
[05:39:45] <EvanR> (Natural is implemented using Integer)
[05:39:58] <Inst> GMP?
[05:39:58] <Axman6> I don't think that's true
[05:40:06] <EvanR> it was last I checked xD
[05:40:37] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-25.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:40:53] <EvanR> Inst, Gnu Multiprecision, big int lib
[05:41:02] <Axman6> GMP is https://gmplib.org, which is what GHC uses to implement Integer by default
[05:41:15] <Inst> commonly used for all GNU compilers (if there's more than gcc?)
[05:41:20] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:41:35] <EvanR> it's used by whoever wants to use it
[05:41:36] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[05:41:48] <Inst> oh hey
[05:41:49] <Inst> https://groups.seas.harvard.edu/courses/cs152/2019sp/extension.html
[05:41:56] <Inst> so $2000 for it
[05:42:07] <Inst> Two points to emphasize: (1) this is not an introduction to programming; students should already know how to program, ideally in at least couple of languages. (2) you must be very comfortable with recursion, basic mathematical ideas and notations, including sets, relations, functions, and induction.
[05:42:51] <Axman6> yes, not exactly a beginner's course
[05:42:52] <ephemient> data Integer = IS !Int# | IP !BigNat# | IN !BigNat#; type BigNat# = WordArray# -- https://gitlab.haskell.org/ghc/ghc/-/tree/master/libraries/ghc-bignum/src/GHC/Num
[05:43:05] *** Joins: califax- (~califax@user/califx)
[05:43:31] <ephemient> current implementation looks like small | positive big | negative big
[05:43:35] <jkaye> Thoughts on enabling StrictData as a default extension within a package?
[05:43:40] <EvanR> ah they changed to a big nat
[05:43:43] <jkaye> I feel like I almost always want it
[05:43:45] <Axman6> right, IIRC Natural is basically just data Natural = N BigNat#
[05:44:13] <Inst> is it possible to implement a type of only even integers?
[05:44:22] <Axman6> jkaye: it would be very unexpected for other developers. I would at the very least do it on a per module basis. most people don't check the cabal file for extensions
[05:44:25] <Inst> as in, without resorting to extensions / CAPI?
[05:44:40] <monochrom> My code doesn't need StrictData. But this is precisely the peril of asking total strangers what to do to your code.
[05:44:41] <Inst> actually, i won't ask
[05:44:49] <Inst> today, i can finally pick up books, and have tons of books to read
[05:44:55] <EvanR> I do not want StrictData across the board
[05:44:57] <Inst> thanks for humoring me, have a good one
[05:45:00] <Axman6> just use an Integer newtype and store every number as n/2
[05:45:43] <jkaye> More interested in general thoughts tbh
[05:45:49] <jkaye> I was expecting most to say not to do it
[05:45:54] <monochrom> "It depends."
[05:45:56] <EvanR> viewEven f (Even i) = f (2 * i)
[05:45:57] <jkaye> But I'm mostly interested in the why 
[05:46:01] *** Joins: Cajun (~Cajun@user/cajun)
[05:46:28] <jkaye> Unexpected I could definitely see in the general case
[05:46:36] <EvanR> in my case, I am expecting to not look at all the data fields all the time before changing my mind
[05:46:39] <EvanR> and recomputing
[05:46:49] <EvanR> only some of them
[05:47:00] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:47:01] *** califax- is now known as califax
[05:47:29] <EvanR> some small types with two Ints, or three Floats, yeah strictify those suckers
[05:48:31] <EvanR> or the odd field used as a counter that you don't look at often, strict field
[05:48:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:49:23] <EvanR> a field containing a list? What does StrictData do in that case?
[05:49:34] <EvanR> evaluate the whole list?
[05:50:25] <ephemient> well, ! always means whnf, doesn't it?
[05:50:31] <jkaye> StrictData takes fields to whnf
[05:50:34] <monochrom> If it is your own custom list type and it is defined under StrictData, then yeah it becomes highly non-lazy.
[05:50:38] <jkaye> So I think that's well-defined?
[05:50:52] <jkaye> But I see what you're saying
[05:51:06] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-114.dsl.bell.ca)
[05:51:30] <EvanR> ok, so it won't evaluate the whole list, which is good, but like, is it even worth evaluating a list to WHNF xD
[05:52:02] <ephemient> whnf for tuples isn't very interesting either
[05:52:50] <EvanR> or a function
[05:54:01] <monochrom> If you have 100 fields, 99 are Int and need to be strict, and 1 is [()}, entering "{-# language StrictData #-}" and getting a harmless WHNF for the [()] field is probably better than entering "!" 99 times.
[05:54:26] <EvanR> yeah so that in a separately module sounds reasonable
[05:54:34] <EvanR> separate
[05:54:38] <jkaye> Yep right now I'm doing it in modules
[05:54:42] <jkaye> But it's in most modules
[05:54:51] <jkaye> So was thinking about just turning it on everywhere
[05:54:53] <jkaye> Thus the question :)
[05:55:01] <monochrom> Or rather, s/better/more convenient/
[05:55:14] <monochrom> And in fact, s/more convenient/more convenient for the author/
[05:55:30] <monochrom> You see, usually author's stakes conflict with reader's stakes.
[05:55:49] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-114.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:56:08] <monochrom> For the reader, if there is no "!" right next to your Int field, the reader may very well miss your "{-# language StrictData #-}" 945 lines away.
[05:56:11] <EvanR> and when the author = the reader back in time, there's a paradox
[05:57:29] *** Joins: neurocyte09170 (~neurocyte@IP-046243084168.dynamic.medianet-world.de)
[05:57:29] *** Quits: neurocyte09170 (~neurocyte@IP-046243084168.dynamic.medianet-world.de) (Changing host)
[05:57:29] *** Joins: neurocyte09170 (~neurocyte@user/neurocyte)
[05:57:30] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca)
[05:58:17] <jkaye> 945 line module is not my style, but again I see your point
[05:58:53] <monochrom> We have most people here who prove that they can't even see 10 lines above.
[05:59:25] *** Quits: xff0x (~xff0x@2001:1a81:534d:9900:8245:a333:af79:9a1f) (Ping timeout: 240 seconds)
[05:59:44] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:59:44] *** neurocyte09170 is now known as neurocyte0917
[06:01:10] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[06:01:21] *** Quits: puke (~puke@user/puke) (Quit: puke)
[06:01:35] *** Joins: xff0x (~xff0x@2001:1a81:538c:a900:ca7a:63a1:efb3:59ef)
[06:01:44] <jkaye> :D
[06:01:46] <jkaye> Lol
[06:02:01] <jkaye> Yeah, I have seen worse than that
[06:03:59] <jkaye> Well, thanks for the discussion
[06:05:17] <Inst> oh god
[06:05:21] <Inst> how stupid is this?
[06:05:32] <Inst> it should be possible to pass where blocks between modules
[06:05:41] <Inst> erm, functions
[06:06:47] <EvanR> passing functions around?
[06:07:31] <monochrom> You know you are really better off making your own programming language.
[06:07:32] <EvanR> you think they're first class values or something?
[06:08:13] <Inst> not saying it'd be a change to haskell, just WTF coding practice
[06:09:20] *** Quits: x28_girl (~x28girl@user/x28girl) (Read error: Connection reset by peer)
[06:09:45] *** Joins: x28_girl (~x28girl@user/x28girl)
[06:10:19] <Inst> or alternately setting up functions as directories of functions, but modules already do this
[06:11:28] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[06:11:35] <Inst> i was doing someone's homework assignment after they had finished it (trust me, and I'm not kidding, so that I could show them it's better done in Haskell)
[06:12:05] <Inst> it was an if-then control flow, I ended up using a where block for the case where "if any of the following are true, do it, then check the next case" and then "if none of them are true, do this"
[06:13:21] <Inst> then i got to think about problems with record syntax
[06:13:28] <Inst> (which afaik are solved by lenses)
[06:14:07] <Inst> which could be passed around as tuples for functions that were designed to support them
[06:14:27] <Inst> reinventing the wheel, probably
[06:14:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:15:37] *** Joins: mbuf (~Shakthi@223.178.108.186)
[06:16:19] *** Joins: puke (~puke@user/puke)
[06:20:55] <EvanR> specifically what problem with record syntax
[06:22:06] *** Joins: razetime (~quassel@49.207.203.87)
[06:22:30] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[06:24:35] <Inst> modifying them and saving the state long enough for them to be useful
[06:25:07] <Inst> but w/e, it's probably already done
[06:25:14] *** Quits: d0ku (~d0ku@178.43.3.56.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[06:25:23] <Inst> it came up because a Pythoner I had dragooned complained about having to define custom types for Aeson
[06:25:51] <Inst> it just feels like bad practice for functions to hold variables
[06:29:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:29:45] <Inst> and this annoys me
[06:30:39] <Inst> the python version of this has 40 words, the haskell version has 45 words, the python has 277 characters, the haskell version has 241 characters
[06:31:00] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[06:32:46] *** Joins: x28_girl (~x28girl@user/x28girl)
[06:33:02] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[06:33:30] *** Joins: x28_girl (~x28girl@user/x28girl)
[06:41:08] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:42:32] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:42:32] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:42:32] *** finn_elija is now known as FinnElija
[06:45:16] *** Joins: EsoAlgo4 (~EsoAlgo@152.70.142.52)
[06:46:09] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[06:47:48] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:48:03] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[06:48:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[06:49:55] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[06:53:25] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[06:54:22] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:56:49] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 256 seconds)
[06:59:01] <EvanR> stupid question, if f is BiApplicative, wouldn't g a b = A -> f a b also be BiApplicative
[07:00:02] <EvanR> e.g. A -> (a,b)
[07:01:44] <EvanR> compose a functor and a BiApplicative... ... Tannen
[07:02:09] <byorgey> intuitively I would expect that  g (f a b)  is  BiApplicative whenever f is BiApplicative and g is Applicative
[07:02:17] <byorgey> so yes
[07:03:04] <byorgey> ah, didn't know about Tannen
[07:03:31] <EvanR> i suspected that would be a hidden gem
[07:04:11] <byorgey> named after https://directory.seas.upenn.edu/val-b-tannen/ I suppose?
[07:04:42] <dolio> Nah.
[07:04:50] <dolio> It's named after Biff Tannen from Back to the Future.
[07:05:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:05:34] *** hays is now known as h_
[07:05:35] <EvanR> i see another newtype Biff
[07:05:55] <EvanR> so it must be true
[07:06:48] <dolio> Yeah, that is the real answer.
[07:08:05] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[07:10:10] <byorgey> lol
[07:10:22] *** Joins: systemhalted (~systemhal@130.51.137.77)
[07:10:40] <EvanR> what does Biff Tannen have to do with category theory
[07:11:31] <dolio> Biff came first. I forget what it actually is. Then someone named the 'opposite' thing Tannen.
[07:11:33] *** Quits: td_ (~td@94.134.91.153) (Ping timeout: 256 seconds)
[07:11:42] <dolio> At least, I think that's how it was.
[07:13:10] *** Joins: Erutuon (~Erutuon@user/erutuon)
[07:13:17] *** Joins: td_ (~td@94.134.91.149)
[07:14:05] *** Joins: trillp (~trillp@69.233.98.238)
[07:16:03] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[07:16:39] *** Quits: systemhalted (~systemhal@130.51.137.77) (Ping timeout: 256 seconds)
[07:19:02] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[07:19:02] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[07:19:26] *** Joins: x28__girl (~x28girl@user/x28girl)
[07:19:26] *** Joins: x28_girl (~x28girl@user/x28girl)
[07:21:54] *** Quits: ishutin (~ishutin@178-164-188-6.pool.digikabel.hu) (Ping timeout: 256 seconds)
[07:23:32] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[07:24:04] *** Joins: x28__girl (~x28girl@user/x28girl)
[07:24:28] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[07:24:57] *** Quits: x28__girl (~x28girl@user/x28girl) (Max SendQ exceeded)
[07:25:26] *** Joins: x28__girl (~x28girl@user/x28girl)
[07:26:18] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:26:59] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[07:30:24] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:31:06] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[07:35:25] *** Joins: myrrh (~markus@172.58.196.126)
[07:35:45] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:b189:8cdd:77fb:b913)
[07:36:48] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:37:29] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[07:39:25] *** Joins: ishutin (~ishutin@91-83-11-240.pool.digikabel.hu)
[07:43:25] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Ping timeout: 240 seconds)
[07:44:13] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:46:39] <hololeap> biff stands for "bifunctor functor"
[07:47:15] <hololeap> tannen was just because edwardk couldn't think of a good name for it
[07:47:18] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:48:00] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[07:48:02] <hololeap> but, yeah it's a back to the future reference
[07:51:35] <EvanR> runTannen should have been getOuttaHere
[07:53:49] *** Joins: arjun (~arjun@user/arjun)
[07:56:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:4895:4e42:bd43:c273) (Ping timeout: 240 seconds)
[07:56:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:a78a:7d05:3820:99ae) (Ping timeout: 240 seconds)
[07:57:49] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:58:30] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[07:58:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:58:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[07:59:09] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[08:03:33] *** Quits: myrrh (~markus@172.58.196.126) (Changing host)
[08:03:33] *** Joins: myrrh (~markus@user/poet)
[08:08:03] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[08:10:12] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:11:00] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[08:12:02] *** Joins: rembo10 (~rembo10@remulis.com)
[08:14:32] <EvanR> for several arguments to the function, the number of Tannens multiplies, just like in the Classic Film Series
[08:18:36] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:19:08] <qhong_> geekosaur: Thanks! I did similar thing trying to fix all those tiny errs in MagicHaskeller but there's always one after another. I ended up running it in another machine with old GHC (the old GHC itself bitrot on my daily drive, oops)
[08:21:32] <Inst> troll: Does Haskell even exist?
[08:21:51] *** Joins: vicfred (~vicfred@user/vicfred)
[08:23:32] <Inst> https://hackage.haskell.org/packages/tag/prelude
[08:23:58] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:24:42] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[08:26:28] *** Quits: emergence (~emergence@vm0.max-p.me) (Quit: emergence)
[08:32:08] *** Joins: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e)
[08:34:44] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[08:35:12] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:36:01] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[08:36:35] *** Joins: emergence (thelounge@2607:5300:60:5910:dcad:beff:feef:5bc)
[08:36:36] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[08:37:45] <EvanR> bizzlelude, a lousy prelude by a lousy dude. Charming
[08:39:01] <EvanR> protolude seems to be the winner
[08:39:09] <EvanR> other than just Prelude
[08:41:58] *** Joins: fef (~thedawn@user/thedawn)
[08:45:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:45:42] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:46:34] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[08:50:49] <Inst> diehl apparently hasn't updated protolude in more than a year
[08:51:05] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[08:51:33] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[08:51:33] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[08:52:00] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:52:01] <Inst> almost 2 years since last update
[08:52:06] *** Joins: x28__girl (~x28girl@user/x28girl)
[08:52:06] *** Joins: x28_girl (~x28girl@user/x28girl)
[08:52:18] <EvanR> is there no contravariant bifunctor
[08:53:33] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[08:53:35] *** Quits: emf_ (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[08:55:00] *** Joins: antony (~The_viole@203.77.49.232)
[08:55:03] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[08:55:46] *** Joins: Kaipi (~Kaiepi@156.34.47.253)
[08:55:47] <Axman6> shoudl it be BiCofunctor or CoBifunctor?
[08:55:56] <Axman6> should*
[08:56:03] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[08:56:03] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[08:56:06] *** Joins: polux8 (~polux@51.15.169.172)
[08:56:06] *** Joins: mcglk_ (~mcglk@131.191.49.120)
[08:56:11] *** Joins: mrmr3 (~mrmr@user/mrmr)
[08:56:12] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:56:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:56:28] *** Joins: SoF4 (~skius@user/skius)
[08:56:31] *** Joins: x28_girl (~x28girl@user/x28girl)
[08:56:32] *** Joins: x28__girl (~x28girl@user/x28girl)
[08:56:37] <EvanR> Bicontravariant I guess
[08:56:37] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[08:56:54] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[08:57:18] *** Joins: lemonsni- (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[08:57:18] *** Joins: sndr (~sander@user/sander)
[08:57:18] <Axman6> or Cobitravariant
[08:57:19] *** Joins: vgtw_ (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[08:57:21] <Axman6> >_>
[08:57:37] *** Joins: forell_ (~forell@host-178-216-90-220.sta.tvknaszapraca.pl)
[08:57:42] *** Joins: hgolden_ (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[08:58:04] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca)
[08:58:22] *** Joins: eggplant_ (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[08:58:25] *** Quits: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962) (Remote host closed the connection)
[08:58:34] *** Joins: hyiltiz_ (~quassel@31.220.5.250)
[08:59:20] *** Joins: werneta_ (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[08:59:22] *** Joins: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962)
[08:59:40] *** Quits: wrengr (~wrengr@150.12.83.34.bc.googleusercontent.com) (Killed (NickServ (GHOST command used by wrengr_)))
[08:59:42] *** Joins: gentauro_ (~gentauro@185.107.12.141)
[08:59:49] *** Joins: wrengr (~wrengr@150.12.83.34.bc.googleusercontent.com)
[08:59:54] *** Joins: bliminse_ (~bliminse@host86-186-17-7.range86-186.btcentralplus.com)
[09:00:00] *** Joins: tristanC_ (~tristanC@user/tristanc)
[09:00:03] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[09:00:03] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[09:00:07] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[09:00:08] *** Joins: aku_ (~aku@163.172.137.34)
[09:00:11] <BrokenClutch> Never heard about this contravariant thing
[09:00:17] <BrokenClutch> looks cool
[09:00:25] *** Joins: polyphem_ (~rod@2a02:810d:840:8754:e450:3ca3:b389:687a)
[09:00:26] *** Joins: trillp_ (~trillp@69.233.98.238)
[09:00:27] *** Joins: x28__girl (~x28girl@user/x28girl)
[09:00:27] *** Joins: x28_girl (~x28girl@user/x28girl)
[09:00:31] <Axman6> newtype Predicate a = Predicate (a -> Bool)
[09:01:16] <Axman6> looks like a Functor, but can't be, but it can be a contravariant functor: (a -> b) -> Predicate b -> Predicate a
[09:01:49] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Quit: ZNC 1.8.2+cygwin2 - https://znc.in)
[09:01:49] <Axman6> not generally as useful as Functor, but there are some places where contravariant functors are very natural
[09:02:15] *** Joins: hueso_ (~root@user/hueso)
[09:02:28] *** Quits: trillp (~trillp@69.233.98.238) (Killed (NickServ (GHOST command used by trillp_)))
[09:02:32] *** trillp_ is now known as trillp
[09:03:01] <BrokenClutch> Man, I feel dumb. Like, where's my for loop? xdxdxd
[09:03:12] <c_wraith> lens does this weird thing where it puts Functor and Contravariant constraints on the same type as a way of saying "this type variable is phantom"
[09:03:36] <EvanR> when it can't be a Functor, but it can be a Contravariant, it works very well
[09:03:39] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[09:03:59] <Axman6> hasql uses them to great effect for writing encoders for SQL values. if you have int :: Enc Int, bool :: Enc Bool, then you can use (fst <$> int) <> (snd >$< bool) to get a Enc (Int,Bool)
[09:03:59] <EvanR> maybe Bicontravariant can't work because they ran out of vocabulary words
[09:04:34] <EvanR> BrokenClutch, Traversable
[09:05:10] *** Quits: arjun (~arjun@user/arjun) (*.net *.split)
[09:05:10] *** Quits: razetime (~quassel@49.207.203.87) (*.net *.split)
[09:05:10] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca) (*.net *.split)
[09:05:11] *** Quits: SummerSonw (~The_viole@203.77.49.232) (*.net *.split)
[09:05:11] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[09:05:11] *** Quits: polyphem (~rod@ip5f5bff31.dynamic.kabel-deutschland.de) (*.net *.split)
[09:05:11] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (*.net *.split)
[09:05:11] *** Quits: talismanick (~talismani@c-67-164-73-220.hsd1.ca.comcast.net) (*.net *.split)
[09:05:11] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (*.net *.split)
[09:05:11] *** Quits: bliminse (~bliminse@host86-186-17-7.range86-186.btcentralplus.com) (*.net *.split)
[09:05:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[09:05:11] *** Quits: xstill- (xstill@fimu/xstill) (*.net *.split)
[09:05:11] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (*.net *.split)
[09:05:11] *** Quits: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca) (*.net *.split)
[09:05:11] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (*.net *.split)
[09:05:11] *** Quits: sus (zero@user/zeromomentum) (*.net *.split)
[09:05:11] *** Quits: sektor|2 (~kvirc@87.227.175.182) (*.net *.split)
[09:05:11] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[09:05:11] *** Quits: AlexZenon (~alzenon@178.34.151.107) (*.net *.split)
[09:05:11] *** Quits: gentauro (~gentauro@user/gentauro) (*.net *.split)
[09:05:11] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[09:05:11] *** Quits: sander (~sander@user/sander) (*.net *.split)
[09:05:11] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (*.net *.split)
[09:05:11] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (*.net *.split)
[09:05:11] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[09:05:12] *** Quits: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com) (*.net *.split)
[09:05:12] *** Quits: tremon (~tremon@217-120-53-183.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[09:05:12] *** Quits: kawpuh (~kawpuh@66.42.81.80) (*.net *.split)
[09:05:12] *** Quits: n3t (n3t@user/n3t) (*.net *.split)
[09:05:12] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (*.net *.split)
[09:05:12] *** Quits: polux (~polux@51.15.169.172) (*.net *.split)
[09:05:12] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[09:05:12] *** Quits: hyiltiz (~quassel@31.220.5.250) (*.net *.split)
[09:05:13] *** Quits: byorgey (~byorgey@155.138.238.211) (*.net *.split)
[09:05:13] *** Quits: forell (~forell@user/forell) (*.net *.split)
[09:05:13] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[09:05:13] *** Quits: remedan (~remedan@octo.cafe) (*.net *.split)
[09:05:13] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[09:05:13] *** Quits: tristanC (~tristanC@user/tristanc) (*.net *.split)
[09:05:13] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[09:05:13] *** Quits: hueso (~root@user/hueso) (*.net *.split)
[09:05:13] *** Quits: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (*.net *.split)
[09:05:13] *** Quits: mrmr (~mrmr@user/mrmr) (*.net *.split)
[09:05:13] *** Quits: aku (~aku@163.172.137.34) (*.net *.split)
[09:05:14] *** sndr is now known as sander
[09:05:14] *** polux8 is now known as polux
[09:05:14] *** mrmr3 is now known as mrmr
[09:05:17] *** SoF4 is now known as SoF
[09:05:46] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[09:05:59] *** Quits: modnar (~modnar@shell.sonic.net) (Remote host closed the connection)
[09:06:01] *** Quits: bliminse_ (~bliminse@host86-186-17-7.range86-186.btcentralplus.com) (Ping timeout: 256 seconds)
[09:06:39] *** Joins: modnar (~modnar@shell.sonic.net)
[09:07:23] <BrokenClutch> EvanR: why fold? Like, FP.
[09:07:29] *** Joins: erisco_ (~erisco@d24-57-249-233.home.cgocable.net)
[09:07:34] <BrokenClutch> >:(
[09:07:43] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 256 seconds)
[09:07:53] *** Joins: xstill- (xstill@fimu/xstill)
[09:08:09] <Axman6> @hoogle (a -> m b) -> t a -> m (t b)
[09:08:10] <lambdabot> Control.Concurrent.Async.Lifted mapConcurrently :: (Traversable t, MonadBaseControl IO m) => (a -> m b) -> t a -> m (t b)
[09:08:10] <lambdabot> Control.Concurrent.Async.Lifted.Safe mapConcurrently :: (Traversable t, MonadBaseControl IO m, Forall (Pure m)) => (a -> m b) -> t a -> m (t b)
[09:08:10] <lambdabot> Prelude traverse :: (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)
[09:08:17] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Ping timeout: 256 seconds)
[09:08:17] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Ping timeout: 256 seconds)
[09:08:17] *** erisco_ is now known as erisco
[09:08:17] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[09:08:38] <Axman6> believe it or not, traverse is just a for loop that returns the same structure you ran it over
[09:08:48] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[09:08:49] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[09:08:51] *** Quits: tristanC_ (~tristanC@user/tristanc) (Ping timeout: 256 seconds)
[09:09:25] *** Quits: hueso_ (~root@user/hueso) (Ping timeout: 256 seconds)
[09:09:25] *** Quits: werneta_ (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[09:09:25] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 256 seconds)
[09:09:40] *** Joins: arjun (~arjun@user/arjun)
[09:09:54] *** Joins: hueso (~root@user/hueso)
[09:10:12] *** Joins: AlexZenon (~alzenon@178.34.151.107)
[09:10:12] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[09:10:12] *** Joins: sektor (~kvirc@87.227.175.182)
[09:10:12] *** Joins: razetime (~quassel@49.207.203.87)
[09:10:12] *** Joins: talismanick (~talismani@c-67-164-73-220.hsd1.ca.comcast.net)
[09:10:12] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[09:10:12] *** Joins: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca)
[09:10:12] *** Joins: sus (zero@user/zeromomentum)
[09:10:12] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[09:10:12] *** Joins: kawpuh (~kawpuh@66.42.81.80)
[09:10:12] *** Joins: n3t (n3t@user/n3t)
[09:10:12] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[09:10:12] *** Joins: byorgey (~byorgey@155.138.238.211)
[09:10:12] *** Joins: remedan (~remedan@octo.cafe)
[09:10:12] *** Joins: drewr (~drew@user/drewr)
[09:10:33] *** Joins: tristanC (~tristanC@user/tristanc)
[09:11:24] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[09:11:34] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[09:11:35] *** Joins: koolazer (~koo@user/koolazer)
[09:11:39] *** Joins: tremon (~tremon@217-120-53-183.cable.dynamic.v4.ziggo.nl)
[09:12:15] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[09:12:42] *** Quits: goepsilongo (~goepsilon@2806:263:c404:8000:a19a:aab0:db5f:4d8c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:13:03] *** Joins: monochrom (trebla@216.138.220.146)
[09:13:52] *** Quits: modnar (~modnar@shell.sonic.net) (Quit: farewell)
[09:15:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[09:17:13] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[09:17:58] <BrokenClutch> I was not being serious. But I'm going to be a little serious now. I know that this isn't the objective of haskell, but it's too difficult to a layman understand stuff.
[09:18:20] <BrokenClutch> Like, I'm trying to teach my friends what I know of haskell. It's being quite difficult
[09:18:42] <BrokenClutch> like, lisp was too. At least haskell is easier to read because it's static typed
[09:19:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[09:19:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:20:45] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[09:21:34] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[09:22:00] *** Joins: x28_girl (~x28girl@user/x28girl)
[09:22:48] <Axman6> BrokenClutch: maybe you don't yet know enough to be able to effectively teach, which is fine, it just takes time.
[09:22:49] *** Quits: x28_girl (~x28girl@user/x28girl) (Max SendQ exceeded)
[09:23:19] *** Joins: x28_girl (~x28girl@user/x28girl)
[09:23:32] <Axman6> it took me wuite a while before I thought in Haskell, not just understood it. using it for basically all my uni courses helped (even the ones we weren't supposed to, I think I used it to generate python once)
[09:25:07] <BrokenClutch> Axman6: Yeah, I don't know enough to teach, I can show and explain some definitions, but I don't have practice
[09:26:55] <BrokenClutch> Some things are easier in haskell than in lisp. Like each symbol in lisp having a value and a function-value, confusing af
[09:27:38] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[09:28:27] <EvanR> haskell is too good sometimes
[09:28:29] <c_wraith> just to add to the chaos, not every lisp has that distinction
[09:28:52] *** Quits: puke (~puke@user/puke) (Read error: Connection reset by peer)
[09:29:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:30:16] <BrokenClutch> scheme doesn't have
[09:30:59] <BrokenClutch> I'm more a lisp guy, I like its flexibility. But haskell is helping me a lot to understand some concepts and to do more reasonable stuff
[09:31:22] <BrokenClutch> reasonable in the sense that's easier to reason about it
[09:31:52] <Axman6> I don't understand how people program without a decent type system, like, humans are really bad at it, let the completely accurate tool do it for you
[09:32:37] <BrokenClutch> Letting thing being simple
[09:32:43] <BrokenClutch> things*
[09:33:08] <EvanR> back when I first started haskell, it was very fascinating seeing what sort of shenanigas common in dynamic languages could and could not "just work" in haskell
[09:33:14] <c_wraith> Haskell gets away with a lot fewer special cases because the compiler rejects bad code, instead of libraries trying to make them work anyway.
[09:33:38] <BrokenClutch> Lisp has good libs, it isn't C
[09:33:43] <BrokenClutch> the real macro language
[09:34:09] <EvanR> at first it was like, were those crazy shenanigas wrong the whole time?
[09:34:22] <EvanR> years later I learned to do crazy shenanigas in haskell xD
[09:34:33] <BrokenClutch> Same thing was for me in C++
[09:34:44] <BrokenClutch> was like: Oh man, look at those rules
[09:35:04] <BrokenClutch> after some time i was just: template template template constexpr template auto
[09:35:17] *** Joins: vglfr (~vglfr@46.96.134.134)
[09:35:45] <EvanR> it's funny when someone complains about haskell's static types, and you show them Dynamic
[09:36:00] <BrokenClutch> don't know what this is
[09:36:10] <BrokenClutch> I'm scared, so won't see
[09:36:13] <EvanR> and it seems like a bad idea, despite being better than normal dynamic types
[09:36:55] <BrokenClutch> newForeignPtr gave me an error
[09:36:57] <BrokenClutch> sad
[09:36:59] <EvanR> Dynamic is just a wrapped Typeable
[09:37:06] <EvanR> dynamic types
[09:39:25] <BrokenClutch> meds are shooting me down
[09:39:26] <EvanR> what are you doing with ForeignPtr
[09:39:28] <BrokenClutch> need sleep
[09:39:35] <EvanR> nvm, go to sleep
[09:39:41] <BrokenClutch> night
[09:39:44] <BrokenClutch> byeee
[09:39:49] <Axman6> Any is also fun, it's even less safe Dynamic!
[09:39:56] <Axman6> @hoogle Any
[09:39:57] <lambdabot> Data.Monoid newtype Any
[09:39:57] <lambdabot> Data.Monoid Any :: Bool -> Any
[09:39:57] <lambdabot> Data.Semigroup newtype Any
[09:40:00] <Axman6> :(
[09:40:10] *** Parts: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e) ()
[09:40:10] <Axman6> those are the safe ones, I want the hard stuff!
[09:40:13] <EvanR> lambdabot willfully disregards its existence
[09:40:37] <c_wraith> Any is...  not really unsafe.  It's just weird.
[09:41:04] <EvanR> a better void* pointer
[09:41:14] <c_wraith> That's what it used to be.
[09:41:15] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[09:41:17] <c_wraith> It's not that anymore
[09:41:24] <c_wraith> these days it's a type family
[09:41:48] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[09:42:08] *** Joins: puke (~puke@user/puke)
[09:42:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[09:43:05] <Axman6> yeah just saw that, how interesting
[09:43:21] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[09:43:32] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[09:44:00] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[09:46:21] <c_wraith> Hmm.  I thought Dynamic was going to change its implementation at some point to data Dynamic where Dynamic :: Typeable a => a -> Dynamic
[09:46:35] <Axman6> isn't that what it is?
[09:46:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:47:11] <c_wraith> No, it's storing the TypeRep explicitly along with the value, instead of storing the whole Typeable dictionary
[09:47:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:47:45] <EvanR> is TypeRep particularly compact
[09:47:51] <c_wraith> This is better than it used to be, as TypeRep now has a parameter so you can actually tie those types together correctly.
[09:48:00] <Axman6> surely more compact than the whole dictionary
[09:48:09] <c_wraith> the dictionary is just a pointer
[09:48:26] <EvanR> i mean...
[09:48:28] <Axman6> so is the TypeRep, but it's a pointer into the dictionary
[09:48:29] <c_wraith> if there's a win, it's in less indirection in common operations
[09:48:30] <EvanR> I guess not then
[09:48:52] <EvanR> in a dynamically typed language the dynamic type info is likely some bits
[09:49:00] <EvanR> at least the basic parts
[09:49:04] <Axman6> yeah, it guarantees avoiding one indirection, but the compiler should be smart enough to remove that anyway
[09:49:31] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[09:49:52] <Axman6> I wonder if we could have a more compact representation for TypeRep (with pattern synonyms to keep things are they are)
[09:50:28] <EvanR> well the type universe is a lot bigger and more crazy in haskell so I wouldn't be surprised if it can't be done
[09:52:42] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[09:53:25] *** Quits: razetime (~quassel@49.207.203.87) (Remote host closed the connection)
[09:55:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:55:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:55:30] *** Joins: wroathe (~wroathe@user/wroathe)
[09:55:56] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Quit: emf)
[09:57:25] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:57:57] *** Quits: absence (torgeihe@hildring.pvv.ntnu.no) (Ping timeout: 240 seconds)
[09:58:10] *** Joins: absence (torgeihe@hildring.pvv.ntnu.no)
[09:59:36] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[09:59:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[10:00:35] <awpr> > Type.Reflection.TypeRep @(GHC.Exts.Any)  -- :(
[10:00:37] <lambdabot>  <hint>:1:25: error: parse error on input ‘@’
[10:01:36] <awpr> well lambdabot failed for a less interesting reason, but the point is since Any is a stuck type family, GHC can't even conceive of looking for a Typeable instance for it
[10:02:38] <Axman6> % Type.Reflection.TypeRep @(GHC.Exts.Any)
[10:02:39] <yahb> Axman6: ; <interactive>:71:1: error:; Not in scope: data constructor `Type.Reflection.TypeRep'; No module named `Type.Reflection' is imported.
[10:02:54] <Axman6> % import Type.Reflection
[10:02:54] <yahb> Axman6: 
[10:02:57] <Axman6> % Type.Reflection.TypeRep @(GHC.Exts.Any)
[10:02:57] <yahb> Axman6: ; <interactive>:73:1: error:; Not in scope: data constructor `Type.Reflection.TypeRep'; Perhaps you meant one of these: variable `Type.Reflection.typeRep' (imported from Type.Reflection), variable `Type.Reflection.eqTypeRep' (imported from Type.Reflection), variable `Type.Reflection.rnfTypeRep' (imported from Type.Reflection)
[10:03:15] <awpr> should've been lower-case, and also I misinterpreted the error -- it actually just says it can't find an instance
[10:03:15] <Axman6> % :t Type.Reflection.typeRep
[10:03:15] <yahb> Axman6: forall {k} {a :: k}. Typeable a => Type.Reflection.TypeRep a
[10:03:24] <Axman6> % Type.Reflection.typeRep @(GHC.Exts.Any)
[10:03:24] <yahb> Axman6: ; <interactive>:75:1: error:; * No instance for (Typeable GHC.Exts.Any) arising from a use of `it'; * In the first argument of `print', namely `it'; In a stmt of an interactive GHCi command: print it
[10:03:55] <awpr> I think it would be illegal to have an instance for it, but not illegal to ask for one / try to search for one
[10:04:16] *** Joins: fef (~thedawn@user/thedawn)
[10:07:03] *** Joins: chomwitt (~chomwitt@2a02:587:dc11:fb00:12c3:7bff:fe6d:d374)
[10:08:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:09:01] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:12:56] <EvanR> is Any a type family now because of levity or
[10:13:13] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Quit: mikoto-chan)
[10:15:22] <awpr> hmm, I can't find a version of base that has a definition that's not the type family.  caveat: only looked in GHC.Exts, so if it's somewhere else, I'd have missed it
[10:19:31] <awpr> https://github.com/ghc/ghc/commit/24d761531cfc18152598becc0aeb90376fd19198
[10:19:41] <Axman6> GHC.see https://gitlab.haskell.org/ghc/ghc/-/blob/master/compiler/GHC/Builtin/Types.hs#L427
[10:20:24] <Axman6> which is interesting because that file doesn't contain the definition for Any
[10:21:00] <awpr> ghc-prim/GHC/Types.hs
[10:21:26] <Axman6> yeah, that's where I found the reference to the [Any types] note
[10:26:50] <awpr> oh nice, this note is real documentation of the behavior I noticed a few times where GHC "doesn't care" about ambiguity when there are no constraints to solve
[10:26:52] *** Quits: phma (~phma@host-67-44-208-198.hnremote.net) (Read error: Connection reset by peer)
[10:27:13] <awpr> turns out the answer is that it defaults to `Any`
[10:28:02] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[10:30:15] *** Joins: phma (phma@2001:5b0:212a:9158:a864:46d6:7a87:abb)
[10:30:51] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:31:22] <dolio> That doesn't really matter at a surface level. You can only really observe that occurring in ghci.
[10:32:17] <awpr> it means something like `data SomeList = forall a. SomeList [a]` followed by `SomeList []` is accepted rather than rejected for ambiguity
[10:33:28] <dolio> No, it doesn't. Because you don't actually need to pick a concrete type for `a` to have a sensible type inference/checking algorithm.
[10:33:55] <dolio> Many algorithms just let the variables drop without solving them.
[10:34:36] <awpr> that's approximately what my mental model of GHC's behavior was.  but this note says that GHC chooses `Any`, which is interesting
[10:34:49] <dolio> GHC needs to put something there because core is explicitly typed, but that's at a lower level.
[10:34:58] *** Joins: nhatanh02 (~satori@123.24.172.30)
[10:36:24] <dolio> And if you do something like `l <- pure []` in ghci, l can't have a polymorphic type, so the variable has to be solved to something. But that situation can't ever happen in a program.
[10:37:48] *** Joins: Akiva (~Akiva@user/Akiva)
[10:38:14] <awpr> `do l <- pure []; return (length l)` should still have an unconstrained type variable and be usable in a compiled module
[10:38:47] <dolio> That's a situation where you don't have to solve the variable.
[10:39:06] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7492:3e11:3d28:6977)
[10:39:18] <dolio> It needs to be solved in ghci because everything is happening incrementally, so you can ask what type `l` is.
[10:39:43] <dolio> (And ghci will tell you `[Any]`.
[10:41:12] *** Quits: myrrh (~markus@user/poet) (Remote host closed the connection)
[10:50:11] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[10:50:25] *** Joins: alfonsox (~quassel@103.92.42.80)
[10:51:26] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:b189:8cdd:77fb:b913) (Remote host closed the connection)
[10:57:57] *** Quits: shapr (~user@2601:7c0:c202:5190:c2c1:1b44:a2c4:880c) (Ping timeout: 240 seconds)
[10:59:34] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[10:59:44] *** Joins: emf_ (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[11:00:29] *** Quits: antony (~The_viole@203.77.49.232) (Ping timeout: 256 seconds)
[11:03:45] *** Joins: michalz (~michalz@185.246.204.107)
[11:07:24] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[11:08:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[11:12:22] *** Joins: x28girl (~x28girl@user/x28girl)
[11:13:06] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[11:15:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:17:04] *** Quits: x28girl (~x28girl@user/x28girl) (Remote host closed the connection)
[11:17:30] *** Joins: x28girl (~x28girl@user/x28girl)
[11:18:33] *** Joins: antony (~The_viole@203.77.49.232)
[11:18:51] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[11:21:27] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:26:35] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:31:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:34:44] *** Quits: trillp (~trillp@69.233.98.238) (Quit: WeeChat 3.3)
[11:36:04] *** Joins: MajorBiscuit (~MajorBisc@c-001-022-052.client.tudelft.eduvpn.nl)
[11:41:45] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (Ping timeout: 268 seconds)
[11:41:54] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[11:41:57] *** Quits: emf_ (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Quit: emf_)
[11:42:22] *** Quits: ephemient (uid407513@id-407513.lymington.irccloud.com) (Ping timeout: 268 seconds)
[11:42:22] *** Quits: jmct_ (sid160793@id-160793.tinside.irccloud.com) (Ping timeout: 268 seconds)
[11:42:22] *** Quits: astra (sid289983@user/amish) (Ping timeout: 268 seconds)
[11:42:29] *** Joins: jmct_ (sid160793@id-160793.tinside.irccloud.com)
[11:43:52] *** Joins: astra (sid289983@id-289983.hampstead.irccloud.com)
[11:43:58] *** Joins: ephemient (uid407513@id-407513.lymington.irccloud.com)
[11:48:05] *** Quits: haskl (~haskl@user/haskl) (Ping timeout: 256 seconds)
[11:49:24] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:49:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[11:50:45] *** Joins: max22- (~maxime@2a01cb08833598001d140f792dd3c52e.ipv6.abo.wanadoo.fr)
[11:51:40] *** Joins: chele (~chele@user/chele)
[11:54:01] *** Joins: acidjnk (~acidjnk@p200300d0c7271e52381c42d4d3ad2973.dip0.t-ipconnect.de)
[11:54:01] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e52381c42d4d3ad2973.dip0.t-ipconnect.de)
[11:54:20] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[11:55:50] <Aleksejs> Hi, I wrote this line in ghci `let a f = return . f; foo = a (*2); bar = a (+1) in (foo >=> bar) 1` ((>=>) is from Control.Monad) and it gave me the result equal to 3. However, the type of this expression is (Monad m, Num c) => m c. My question is what is m in this case? 
[11:58:54] <c_wraith> in ghci, it'll pick IO if it has an instance of Monad that is otherwise unconstrained at the top level
[12:00:37] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:00:55] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:01:02] <siers> which intuitively is kind of the Identity functor, if you only use pure code, because it only contains a single value
[12:03:49] *** Quits: acidjnk (~acidjnk@p200300d0c7271e52381c42d4d3ad2973.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[12:03:49] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e52381c42d4d3ad2973.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[12:04:40] *** Joins: acidjnk (~acidjnk@p200300d0c7271e52a462db5e77aa7e55.dip0.t-ipconnect.de)
[12:05:09] *** Joins: haskl (~haskl@user/haskl)
[12:06:13] *** Quits: antony (~The_viole@203.77.49.232) (Ping timeout: 256 seconds)
[12:13:35] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 256 seconds)
[12:15:12] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[12:16:05] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[12:17:14] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:586d:5e29:f9c4:61ba)
[12:19:50] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:19:53] *** Quits: puke (~puke@user/puke) (Remote host closed the connection)
[12:20:12] *** Joins: breakwindows (~brkwnds@86.107.75.45)
[12:21:30] *** Quits: sus (zero@user/zeromomentum) (Quit: Ping timeout (120 seconds))
[12:21:45] *** Joins: sus (zero@user/zeromomentum)
[12:26:09] *** Alex_test_ is now known as Alex_test
[12:27:06] *** Joins: puke (~puke@user/puke)
[12:30:17] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: You have been kicked for being idle)
[12:30:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:37:17] *** Joins: sagax (~sagax_nb@user/sagax)
[12:47:31] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:31] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:34] *** allbery_b is now known as geekosaur
[12:50:56] *** Joins: jgeerds_ (~jgeerds@55d4bbed.access.ecotel.net)
[12:52:28] *** Joins: jgeerds__ (~jgeerds@55d4bbed.access.ecotel.net)
[12:55:31] *** Quits: jgeerds_ (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 256 seconds)
[12:57:55] *** Quits: alfonsox (~quassel@103.92.42.80) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:58:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:00:02] *** Joins: jumper149 (~jumper149@base.felixspringer.xyz)
[13:00:37] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[13:00:46] <Axman6> Aleksejs: GHCi is kinda, sort, a little bit like being in a magical IO do block. if your expression can be IO foo, it'll execute it, if it's anything else, it'll evaluate it and show it if possible
[13:01:05] <Axman6> what does :t it say if you run it after running that code?
[13:02:55] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[13:03:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[13:03:17] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 240 seconds)
[13:04:10] *** Quits: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca) (Ping timeout: 256 seconds)
[13:04:28] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Remote host closed the connection)
[13:05:08] *** Joins: cfricke (~cfricke@user/cfricke)
[13:05:13] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[13:05:22] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[13:06:20] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[13:06:57] <Aleksejs> (Monad m, Num c) => m c
[13:07:26] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[13:07:49] <Aleksejs> so I suppose, m becomes IO once expressed in ghci?
[13:08:24] <c_wraith> ghci takes the expression you enter and does various things with it, depending on what it unifies with.
[13:09:03] <c_wraith> If it unifies with IO (), it executes it and doesn't print anything.  If it unifies with (Show a) => IO a, it executes it >>= print
[13:09:19] <c_wraith> If it unifies with IO a without a Show constraint, it executes it and doesn't print anything
[13:09:44] <c_wraith> If none of those, it adds a call to print, including giving you the error about a missing Show instance if that's relevant
[13:11:37] *** Quits: arjun (~arjun@user/arjun) (Ping timeout: 240 seconds)
[13:12:04] <c_wraith> so...  4 cases.  3 of which are the special cases of "can this be an IO action?"
[13:12:18] *** Joins: ubert (~Thunderbi@p200300ecdf0994b6cb4175acd0981d1c.dip0.t-ipconnect.de)
[13:14:12] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Read error: Connection reset by peer)
[13:15:11] <justsomeguy> What is unification?
[13:15:42] <c_wraith> the process of solving for type variables so that two types can be the same thing.
[13:15:52] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[13:17:25] *** Joins: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca)
[13:20:00] *** Joins: __monty__ (~toonn@user/toonn)
[13:20:02] *** Joins: arjun (~arjun@user/arjun)
[13:20:08] *** Joins: benin (~benin@183.82.30.17)
[13:26:22] *** Quits: eggplant_ (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[13:26:27] *** Joins: antony (~The_viole@203.77.49.232)
[13:27:01] <sshine> justsomeguy, so when Just :: a -> Maybe a, and you write Just (5 :: Int), then Int and a are unified by setting a = Int, and the concrete Just :: Int -> Just Int is used.
[13:27:33] <sshine> oops, Just :: Int -> Maybe Int, of course. :)
[13:32:04] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[13:32:31] *** Joins: x28_girl (~x28girl@user/x28girl)
[13:36:34] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[13:36:58] *** Joins: x28_girl (~x28girl@user/x28girl)
[13:43:10] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:43:19] *** Joins: notzmv (~zmv@user/notzmv)
[13:43:51] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[13:44:32] *** Joins: nhatanh02 (~satori@123.24.172.30)
[13:46:03] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[13:46:27] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[13:48:50] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Remote host closed the connection)
[13:49:46] *** Quits: gawen_ (~gawen@user/gawen) (Quit: cya)
[13:50:04] *** Quits: haskl (~haskl@user/haskl) (Ping timeout: 256 seconds)
[13:52:54] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[13:56:20] *** astra is now known as amish
[13:56:48] *** Quits: amish (sid289983@id-289983.hampstead.irccloud.com) (Changing host)
[13:56:48] *** Joins: amish (sid289983@user/amish)
[13:57:32] *** amish is now known as astra
[13:57:50] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[13:59:39] *** Joins: FragByte (~christian@user/fragbyte)
[14:01:06] *** Joins: haskl (~haskl@user/haskl)
[14:06:53] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:08:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:09:06] *** Quits: MasseR (~MasseR@51.15.143.128) (Quit: The Lounge - https://thelounge.chat)
[14:09:32] *** Joins: MasseR (~MasseR@51.15.143.128)
[14:09:42] *** Lord_of_Life_ is now known as Lord_of_Life
[14:12:01] *** Quits: arjun (~arjun@user/arjun) (Ping timeout: 256 seconds)
[14:12:06] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[14:18:46] *** Joins: nhatanh02 (~satori@123.24.172.30)
[14:18:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:26:54] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:31:01] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[14:31:20] *** Joins: gawen (~gawen@user/gawen)
[14:32:39] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:34:07] *** Joins: Guest950 (~Guest9@host109-151-101-87.range109-151.btcentralplus.com)
[14:35:38] *** Quits: Guest950 (~Guest9@host109-151-101-87.range109-151.btcentralplus.com) (Client Quit)
[14:35:57] *** Joins: alx741 (~alx741@157.100.93.160)
[14:36:04] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[14:36:28] *** Joins: x28_girl (~x28girl@user/x28girl)
[14:38:18] *** Quits: x28girl (~x28girl@user/x28girl) (Quit: Leaving)
[14:38:18] *** Quits: x28_girl (~x28girl@user/x28girl) (Client Quit)
[14:40:06] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:40:09] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[14:41:28] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:41:33] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:42:37] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[14:42:45] *** Parts: Aleksejs (~Aleksejs@haskell.lv) (WeeChat 3.3)
[14:42:53] *** Joins: Aleksejs (~Aleksejs@haskell.lv)
[14:43:58] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[14:45:04] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[14:45:16] <siers> c_wraith, hadn't noticed the case about where a in IO a is not Show-able – cool
[14:45:36] *** Joins: mmhat (~mmh@55d44405.access.ecotel.net)
[14:48:42] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[14:49:24] *** Joins: arjun (~arjun@user/arjun)
[14:51:28] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7492:3e11:3d28:6977) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:51:28] *** Joins: wre^ (~wre@wsip-98-188-246-242.mc.at.cox.net)
[14:51:31] *** Joins: yurusanP (~gsbush23@50.93.222.100)
[14:53:49] *** Quits: acidjnk (~acidjnk@p200300d0c7271e52a462db5e77aa7e55.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[14:54:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:54:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:55:47] *** Quits: puke (~puke@user/puke) ()
[15:00:14] *** Parts: yurusanP (~gsbush23@50.93.222.100) ()
[15:00:39] *** Joins: yurusanP (~gsbush23@50.93.222.100)
[15:04:24] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[15:10:18] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:13:40] *** Parts: yurusanP (~gsbush23@50.93.222.100) ()
[15:16:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:17:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:19:20] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:296a:5977:b176:470b)
[15:28:37] *** Quits: antony (~The_viole@203.77.49.232) (Quit: Leaving)
[15:35:59] *** Joins: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk)
[15:41:33] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[15:43:20] *** Quits: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk) (Remote host closed the connection)
[15:43:57] *** Joins: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk)
[15:48:13] *** Quits: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[15:48:59] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[15:54:25] *** Joins: pottsy (~pottsy@129.227.183.244)
[16:00:13] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[16:03:59] *** Joins: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk)
[16:06:17] *** Quits: benin (~benin@183.82.30.17) (Ping timeout: 240 seconds)
[16:12:08] *** Quits: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk) (Remote host closed the connection)
[16:12:31] <dminuoso> Is there base functions that applie toLower/toUpper on the first element only?
[16:13:25] *** Quits: vgtw_ (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Ping timeout: 240 seconds)
[16:15:21] <geekosaur> not in base, no
[16:17:10] <dminuoso> Alright thanks
[16:17:33] <geekosaur> I think if yoiu're at that point you want to use text-icu and get titlecase right
[16:17:48] <merijn> titlecase doesn't do the first element, though :p
[16:17:55] <merijn> It does the first one of every word
[16:18:05] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[16:18:54] <dminuoso> geekosaur: Nah, Im just looking for a simple primitive to work with aeson generics
[16:19:05] *** Joins: zaquest (~notzaques@5.130.79.72)
[16:19:50] <dminuoso> So realistically this is only ever going to see ASCII letters :)
[16:21:47] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:21:58] <hpc> that's like saying "realistically this is only ever going to see vowels" :P
[16:22:45] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[16:23:07] <merijn> Lies, damned lies, and programmers talking about the inputs their code will get
[16:23:12] <geekosaur> ^
[16:23:20] *** Joins: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[16:23:36] <geekosaur> (although I'd usually just say "you hope")
[16:24:06] <dminuoso> well I have `data ObjectType = TyAll | TyZone | TyRecord | TyComment` and I just want a `constructorTagModifier = map1 toLower . strip "Ty"`
[16:24:29] <dminuoso> I think Im fine with the "given all expected inputs" thinking
[16:24:37] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[16:26:05] <dminuoso> Though it would be handy if Aeson had some primitive where I could say $(mkFromJsonEnum ''ObjectType [(TyAll, "all"), (TyRecord, "record"), (TyComment, "comment")]
[16:26:13] *** Quits: max22- (~maxime@2a01cb08833598001d140f792dd3c52e.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:26:23] <dminuoso> Perhaps i ought to make that thing.
[16:27:26] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[16:27:31] *** Joins: goepsilongo (~goepsilon@2806:263:c404:8000:54bf:3582:265f:1026)
[16:29:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:29:21] *** Quits: goepsilongo (~goepsilon@2806:263:c404:8000:54bf:3582:265f:1026) (Client Quit)
[16:30:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:33:25] *** Quits: Alex_test (~al_test@178.34.151.107) (Quit: ;-)
[16:33:30] *** Quits: AlexNoo (~AlexNoo@178.34.151.107) (Quit: Leaving)
[16:33:36] *** Quits: AlexZenon (~alzenon@178.34.151.107) (Quit: ;-)
[16:39:28] *** Quits: Arsen (arsen@managarm/dev/Arsen) (Quit: Quit.)
[16:39:46] *** Joins: Arsen (arsen@managarm/dev/Arsen)
[16:49:42] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[16:52:21] *** Joins: AlexZenon (~alzenon@178.34.151.107)
[16:52:37] *** Joins: AlexNoo (~AlexNoo@178.34.151.107)
[16:56:00] *** Joins: Alex_test (~al_test@178.34.151.107)
[16:56:07] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:56:47] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[16:57:17] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[16:57:17] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[16:58:24] *** Joins: neurocyte09170 (~neurocyte@IP-046243084168.dynamic.medianet-world.de)
[16:58:24] *** Quits: neurocyte09170 (~neurocyte@IP-046243084168.dynamic.medianet-world.de) (Changing host)
[16:58:24] *** Joins: neurocyte09170 (~neurocyte@user/neurocyte)
[17:02:21] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[17:02:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[17:03:25] *** Quits: breakwindows (~brkwnds@86.107.75.45) (Ping timeout: 240 seconds)
[17:06:36] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:07:07] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:07:18] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[17:10:08] *** Joins: random_ (~random@185.219.68.251)
[17:11:29] *** Quits: siers (~ij@user/ij) (Quit: ZNC 1.8.2 - https://znc.in)
[17:11:59] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:12:47] *** Quits: random__ (~random@185.219.68.251) (Ping timeout: 256 seconds)
[17:13:03] *** Joins: siers (~ij@user/ij)
[17:17:25] *** Joins: nhatanh02 (~satori@123.24.172.30)
[17:20:09] *** Joins: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2)
[17:21:51] *** Joins: max22- (~maxime@2a01cb0883359800849c77e11630007c.ipv6.abo.wanadoo.fr)
[17:30:02] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[17:30:39] *** Joins: crazazy (~chatzilla@130.89.171.62)
[17:31:36] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:37:18] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Quit: Reconnecting)
[17:37:30] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[17:38:02] *** Joins: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk)
[17:40:15] *** Joins: lechner (~lechner@debian/lechner)
[17:45:58] *** Joins: Guest43 (~Guest43@alotvpn.vps.wbsprt.com)
[17:47:27] *** Quits: Guest43 (~Guest43@alotvpn.vps.wbsprt.com) (Client Quit)
[17:47:50] *** Joins: mzvonar (~mzvonar@alotvpn.vps.wbsprt.com)
[17:50:23] *** Joins: guest (~guest@alotvpn.vps.wbsprt.com)
[17:50:39] *** Quits: guest (~guest@alotvpn.vps.wbsprt.com) (Remote host closed the connection)
[17:51:08] *** Joins: pavonia (~user@user/siracusa)
[17:51:28] *** Quits: talismanick (~talismani@c-67-164-73-220.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[17:52:42] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (Quit: leaving)
[17:52:56] <mzvonar> Hi guys, haskell beginner here. I was thinking if there's a reason that (++) function in standard library doesn't have a case "(++) xs [] = xs", which would skip the unnecessary traversal of the first argument if second argument is empty. Is this so the function is easier to reason about? Or does the compiler make this optimisation? Or is this
[17:52:57] <mzvonar> (kind of "asymmetric") optimisation not really saving much performance in real world? Thanks
[17:53:59] <merijn> mzvonar: Note the RULES "comment" underneath it
[17:54:51] <merijn> mzvonar: It actually gets a rewrite rule applied to it that rewrites applications of ++ into a fused version that (possibly) avoids building the list at all
[17:57:57] <mzvonar> oh, ok. I don't understand rewrite rules (yet), but that answers my question anyway, thanks!
[17:58:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:58:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:58:57] *** Joins: wroathe (~wroathe@user/wroathe)
[17:59:05] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6a7d:d789:f2c1:154c)
[17:59:19] <merijn> mzvonar: basically it's saying: replace "xs ++ ys" with "augment (\c n -> foldr c n xs) ys"
[18:00:11] <merijn> mzvonar: And foldr does shortcut when ys is [] :)
[18:00:33] *** Quits: michalz (~michalz@185.246.204.107) (Read error: Connection reset by peer)
[18:00:39] <Axman6> not sure that works...
[18:01:02] <Axman6> that should have ys and xs flipped right?
[18:01:17] <Axman6> wait
[18:01:21] *** Joins: michalz (~michalz@185.246.204.101)
[18:01:27] <mzvonar> oh, right. nice :) what I meant I understand how rewrite rules work, but I'm really confused how augment works
[18:01:28] <merijn> you're missing the augment :p
[18:01:28] <Axman6> what is augment?
[18:01:32] *** Quits: max22- (~maxime@2a01cb0883359800849c77e11630007c.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[18:01:35] *** Joins: kuribas (~user@ptr-25vy0i9q6berc613dpl.18120a2.ip6.access.telenet.be)
[18:02:29] <mzvonar> I guess ys gets passed to foldr as n argument, right?
[18:03:03] <merijn> augment g xs = g (:) xs
[18:05:29] *** Quits: jgeerds__ (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 256 seconds)
[18:05:51] <Axman6> so that doesn;t take care of the case where ys is [] so you can avoid the call to foldr at all and just return xs, which I think was the point of the question
[18:06:38] <mzvonar> now I see it I guess, so c is (:) and n is ys
[18:08:52] *** Joins: xkuru (~xkuru@user/xkuru)
[18:09:53] <merijn> Axman6: If foldr gets inlined it does
[18:11:18] <Axman6> foldr never inspects the z value
[18:11:33] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:12:56] <merijn> ah, wait, maybe my brain has them reversed
[18:14:45] <mzvonar> I thought I got it, but I got them reversed too :D
[18:15:16] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:16:04] <mzvonar> Ok, so (++) is actually not short circuiting when ys = [], right? Maybe the foldr implementation brings better advantages?
[18:17:12] <merijn> mzvonar: It's part of the fusion framework
[18:17:41] <merijn> mzvonar: fusion is about avoiding the construction of intermediate lists
[18:17:52] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[18:18:15] <mzvonar> Another noob question: why not write the implementation straight in terms of foldr instead of rewriting it with the rule?
[18:18:21] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[18:18:32] *** Quits: wre^ (~wre@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 240 seconds)
[18:18:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:18:56] <merijn> mzvonar: because there is an ordering and phases in which rewrite rules apply
[18:18:59] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[18:19:11] <merijn> mzvonar: So depending on the order they're applied other rules may or may not apply
[18:20:28] <mzvonar> oh, ok. sorry for silly questions. I'm still learning basics, so it's quite soon for me to dig in this low level stuff, but I'm curious :)
[18:20:46] <merijn> consider another rules that ends up changing "foo xs ys" into "f (xs ++ ys)" if you apply this rule before the ++ one, you can then rewrite the result using the ++ rule. If you replaced rules with implementation you lose that
[18:25:17] *** Quits: xff0x (~xff0x@2001:1a81:538c:a900:ca7a:63a1:efb3:59ef) (Ping timeout: 240 seconds)
[18:25:47] <mzvonar> I meant if it was defined like this: "(++) xs ys = foldr (:) ys xs"
[18:26:37] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 240 seconds)
[18:26:49] <mzvonar> Then "foo xs ys" could get rewriten as "f (xs ++ ys)" which would become "f (foldr (:) ys xs". Would it be the same result?
[18:26:54] <geekosaur> wouldn't that reverse the first string?
[18:27:57] <mzvonar> geekosaur oh yes... So I'm back at not understanding the augment function :D
[18:29:24] <mzvonar> I guess I'll wait a year or two to gain more experience about how fusion and rewrites work :)
[18:31:15] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:567f:a71e:f346:c5f0)
[18:31:29] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:31:45] *** Joins: shriekingnoise (~shrieking@181.229.0.83)
[18:33:17] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:33:21] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[18:33:58] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[18:34:35] *** forell_ is now known as forell
[18:34:59] *** Quits: forell (~forell@host-178-216-90-220.sta.tvknaszapraca.pl) (Changing host)
[18:34:59] *** Joins: forell (~forell@user/forell)
[18:36:22] <mzvonar> geekosaur thinking about it again, it wouldn't reverse the list
[18:36:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:36:48] <kritzefitz> For example you could write "f cons empty = 1 `cons` 2 `cons` 3 `cons` empty" and `augment f []` would result in `[1,2,3]` whereas `f (+) 0` would directly result in `1 + 2 + 3`.
[18:37:45] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:37:45] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:37:45] *** Joins: wroathe (~wroathe@user/wroathe)
[18:37:48] *** Joins: xff0x (~xff0x@2001:1a81:538c:a900:ca7a:63a1:efb3:59ef)
[18:38:02] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[18:38:07] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[18:43:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:43:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:44:28] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:44:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:46:23] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[18:46:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:46:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:46:55] *** Joins: wroathe (~wroathe@user/wroathe)
[18:47:37] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:48:23] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:50:49] *** Joins: max22- (~maxime@2a01cb08833598009c1792461f3ff785.ipv6.abo.wanadoo.fr)
[18:51:23] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:51:42] *** Joins: fizbin (~fizbin@154.sub-174-198-10.myvzw.com)
[18:52:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:53:51] *** Parts: maerwald (~maerwald@user/maerwald) (WeeChat 3.3)
[18:54:21] *** Joins: maerwald (~maerwald@user/maerwald)
[18:55:29] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:55:29] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:55:29] *** Joins: wroathe (~wroathe@user/wroathe)
[19:00:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:01:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:02:04] *** Joins: biberu (~biberu@user/biberu)
[19:09:16] <absence> how do i report errors or fail in a template haskell splice in ghc 9? the type of the splice changed from Q (TExp a) to Quote m => Code m a, but there's no MonadFail instance, and functions like reportError still retuirn Q ()
[19:09:20] *** Quits: fizbin (~fizbin@154.sub-174-198-10.myvzw.com) (Read error: Connection reset by peer)
[19:10:45] *** Joins: schweers (~user@2001:16b8:e960:8100:aaa1:59ff:fe3f:235c)
[19:11:21] *** Quits: MironZ (~MironZ@nat-infra.ehlab.uk) (Quit: The Lounge - https://thelounge.chat)
[19:12:43] *** Joins: MironZ (~MironZ@nat-infra.ehlab.uk)
[19:16:27] *** Joins: Guest3977 (~Guest39@2001:8b0:a3a:f3cf:a801:e09f:3591:91bc)
[19:16:44] <Guest3977> tomjaguarpaw here, testing Libera web chat
[19:16:49] <tomjaguarpaw> It works!
[19:16:54] *** Quits: Guest3977 (~Guest39@2001:8b0:a3a:f3cf:a801:e09f:3591:91bc) (Client Quit)
[19:17:24] <geekosaur> should just be a newer version of the kiwi chat on freenode
[19:17:55] <[exa]> absence: that might be a topic for #ghc if I get it right
[19:18:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:18:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:18:08] *** Joins: wroathe (~wroathe@user/wroathe)
[19:22:09] <merijn> absence: You can lift Q into Code, though
[19:22:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[19:26:57] *** Joins: acidjnk (~acidjnk@2001:16b8:6743:e100:c1f4:58dd:c8a4:2c18)
[19:28:33] <absence> merijn: hmm, it's not clear from the documentation which function can do that. i get that m ~ Q, so that i'm dealing with Code Q a, but i don't see anything that can lift e.g. Q (), only Q (TExp a)
[19:28:55] <merijn> absence: I forgot which one, but the GHC release notes have some migration notes, iirc
[19:30:19] *** Quits: aveltras[m] (~aveltrasm@2001:470:69fc:105::3ef9) (Quit: You have been kicked for being idle)
[19:31:33] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:32:15] <absence> merijn: these ones? https://gitlab.haskell.org/ghc/ghc/-/wikis/migration/9.0 i've been reading that, and it doesn't mention anything about this
[19:32:56] *** Joins: jacks- (~bc8147f2@cerf.good1.com)
[19:33:16] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 245 seconds)
[19:33:51] <merijn> Wrong GHC version? I think Code and co are in 9.2? :p
[19:34:15] <merijn> absence: Oh, wait!
[19:34:22] <merijn> absence: There is a template-haskell compat library
[19:34:37] <jacks-> hi. I need to programmatically convert alpha-3 code to country name. does anyone have a link where there's an easy to parse file with that information?
[19:34:46] <jacks-> (or perhaps even a package on hackage)
[19:35:11] <merijn> absence: That's what I did (but forgot): https://hackage.haskell.org/package/th-compat
[19:35:44] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[19:35:44] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[19:36:33] <merijn> absence: https://github.com/merijn/validated-literals/commit/a32515b898ceceb195987f354525511806b05f74
[19:36:47] <merijn> absence: That's my commit to fix it to work across old and new TH
[19:37:17] <jacks-> I found one. https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes
[19:37:25] *** Joins: xsperry (~xs@user/xsperry)
[19:37:29] <absence> merijn: i see. i'm just looking to migrate to new th though, so i won't need th-compat
[19:44:03] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:45:50] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[19:46:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:47:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:50:00] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[19:52:42] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:586d:5e29:f9c4:61ba) (Quit: WeeChat 2.8)
[19:54:02] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 240 seconds)
[19:54:20] *** Quits: mzvonar (~mzvonar@alotvpn.vps.wbsprt.com) (Quit: Client closed)
[19:55:13] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:55:55] *** Quits: xlei (~akans@pool-71-125-19-142.nycmny.fios.verizon.net) (Quit: ZNC 1.9.x-git-167-81df4dec - https://znc.in)
[19:56:04] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:56:57] *** Joins: trillp (~trillp@69.233.98.238)
[19:57:14] *** Joins: xlei (~akans@pool-71-125-19-142.nycmny.fios.verizon.net)
[19:57:27] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[19:58:14] *** Quits: pottsy (~pottsy@129.227.183.244) (Ping timeout: 250 seconds)
[19:58:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:01:51] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Ping timeout: 268 seconds)
[20:01:51] *** Quits: acidjnk (~acidjnk@2001:16b8:6743:e100:c1f4:58dd:c8a4:2c18) (Ping timeout: 250 seconds)
[20:02:58] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[20:03:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[20:07:12] <janus> how do i make cabal-run consume a library from the current directory?
[20:08:33] *** Quits: arjun (~arjun@user/arjun) (Quit: Leaving)
[20:08:50] <byorgey> janus: can you be more specific?  Not sure I understand what you're asking.
[20:09:17] <janus> i have a cabal script in the current directory, and i want to use it to test the repo that i also have checked out in the same directory
[20:09:34] <janus> but if i do a build-depends in the cabal script, it tries to pull the dep from hackage instead of the current directory
[20:09:48] *** Joins: pottsy (~pottsy@129.227.183.244)
[20:09:58] <janus> i guess i want a version of 'source-repository-package' that works with cabal scripts
[20:10:58] <byorgey> janus: I'm not really sure, but maybe you want to make a cabal.project file?
[20:11:27] <janus> i have, it doesn't seem like cabal-run is picking up on it
[20:11:34] <geekosaur> I am guessing this is just yet another thing that doesn't play well with cabal scripts
[20:11:37] <janus> maybe there is a way to do source-repository-package in the script prelude
[20:11:47] <geekosaur> they're really just kinda tacked on
[20:11:49] <fendor[m]> I don't think you can make the script see that cabal.project file
[20:12:18] <janus> ok, i will just make a new executable in the cabal file instead then
[20:13:02] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:15:34] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[20:16:00] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[20:16:00] *** Quits: pottsy (~pottsy@129.227.183.244) (Ping timeout: 250 seconds)
[20:16:57] <fendor[m]> yeah, cabal scripts are... a bit weird
[20:17:20] *** Joins: acidjnk (~acidjnk@2001:16b8:6743:e100:c1f4:58dd:c8a4:2c18)
[20:19:06] *** Joins: shapr (~user@2601:7c0:c202:5190:f73c:d98b:42b3:a084)
[20:21:47] *** Quits: acidjnk (~acidjnk@2001:16b8:6743:e100:c1f4:58dd:c8a4:2c18) (Ping timeout: 250 seconds)
[20:21:49] *** Quits: pgib (~textual@173.38.117.77) (Ping timeout: 240 seconds)
[20:24:38] *** Quits: crazazy (~chatzilla@130.89.171.62) (Quit: ChatZilla 0.10 [SeaMonkey 2.53.10.2/20211220132845])
[20:28:37] *** Quits: arahael (~arahael@203.158.51.1) (Ping timeout: 240 seconds)
[20:29:17] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:29:20] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:30:22] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:32:26] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:32:27] *** Joins: MoC (~moc@user/moc)
[20:32:48] *** Joins: Akiva (~Akiva@user/Akiva)
[20:33:07] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[20:34:16] *** Quits: unyu (~pyon@user/pyon) (Read error: Connection reset by peer)
[20:35:21] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[20:36:23] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:36:23] *** Joins: unyu (~pyon@user/pyon)
[20:36:24] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:36:57] *** Joins: pgib (~textual@173.38.117.86)
[20:37:33] *** Joins: arjun (~arjun@user/arjun)
[20:38:27] <arjun> made my benchmarks threaded with the -rtsopts -threaded
[20:38:38] <arjun> benchmark numbers went up, doubled in some cases
[20:39:03] <arjun> this common ?
[20:40:56] <sclv> it really depends on the code
[20:41:06] <sclv> the threaded rts can cause all sorts of different runtime behavior
[20:41:17] <EvanR> if anything anywhere is relying on threadDelay, it is much more responsive with -threaded
[20:41:29] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (see ya never)
[20:41:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 250 seconds)
[20:42:10] <arjun> its just simple lists, folds and sums
[20:42:32] <arjun> i was trying out the criterion library
[20:43:11] <ephemient> parallel gc maybe? although that always worked slower in my experience before
[20:43:43] <c_wraith> wait..  does "numbers went up" mean faster or slower?
[20:44:12] <arjun> c_wraith, timing numbers went up, i believe it went slower
[20:44:13] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[20:44:20] <c_wraith> that's to be expected.
[20:44:39] <c_wraith> the threaded RTS has to have more locking around some things
[20:44:45] <c_wraith> how are you benchmarking?
[20:45:09] <ephemient> oh try running with +RTS -qg or something like that to disable parallel gc
[20:45:48] <tomsmeding> arjun: did you also pass some -N flag, or really only -threaded?
[20:47:16] <arjun> tomsmeding,  ghc-options: -rtsopts -threaded -with-rtsopts=-N
[20:47:34] <c_wraith> I mean, I'm really suspicious that some call to putStrLn is being included in the benchmark, and it has to grab and release a mutually exclusive lock for each character of output with the threaded RTS
[20:47:41] <tomsmeding> arjun: also try without that -N
[20:48:43] <tomsmeding> that way separate the effect of the threaded runtime from the effect of having more hardware threads; and also try -qg like ephemient already mentioned
[20:49:56] <arjun> tomsmeding,   ghc-options: -rtsopts -threaded only pings 1 core
[20:50:04] <tomsmeding> true
[20:50:16] <tomsmeding> but it uses a different runtime
[20:50:29] <arjun> yea, numbers are back to the ones
[20:50:33] <arjun> in that case
[20:50:43] <arjun> without threaded ones
[20:50:56] <tomsmeding> and -N -qg?
[20:50:58] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:51:14] <arjun> how do i put those in the cabal file?
[20:51:21] *** Joins: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net)
[20:51:33] <tomsmeding> um, same way? :p
[20:51:40] <arjun> ghc-options: -rtsopts -threaded -with-rtsopts=-Nqg
[20:51:47] <arjun> or ghc-options: -rtsopts -threaded -with-rtsopts=-N -qg 
[20:51:52] <arjun> or sumthin? : P
[20:52:22] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[20:52:23] <tomsmeding> try "-with-rtsopts=-N -qg" with the quotes
[20:53:47] *** Joins: cheater (~Username@user/cheater)
[20:53:47] *** Joins: benin (~benin@183.82.30.17)
[20:53:49] <arjun> still pinging single core
[20:54:11] <tomsmeding> right, then your workload is just single-core
[20:54:25] <tomsmeding> all the multicore activity that you saw was the GC doing its work in a multi threaded manner
[20:54:42] <tomsmeding> and probably being less efficient than just doing it single-threaded, which is what you're telling it to do with -qg
[20:54:47] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-173.dynamic.mnet-online.de)
[20:55:03] <arjun> so it should just finish faster rather than running faster?
[20:55:19] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[20:55:24] <tomsmeding> no it might finish slower
[20:55:44] <tomsmeding> parallel GC is only useful if you have a _huge_ amount of stuff to traverse or something, I'm not actually sure
[20:55:55] <tomsmeding> some say -qg should be the default, with not-"-qg" being a tuning option
[20:56:14] <arjun> where would i benefit from using threaded stuff for real, like super dope speedup ?
[20:56:20] <tomsmeding> sometimes parallel gc is faster than single-threaded gc, but empirically, for smaller programs, often not
[20:56:27] <geekosaur> I think -qg is default as of 9.0?
[20:56:29] <tomsmeding> well if your stuff is actually parallel :p
[20:56:51] <arjun> tomsmeding :p
[20:56:53] <tomsmeding> if you use the 'async' library, or rpar from parallel-strategies, or forkIO
[20:57:11] <maerwald> or streamly :p
[20:57:14] <tomsmeding> haskell doesn't automatically parallelise your stuff, you have to at least tell it _where_ to
[20:57:19] <arjun> ah, so i have to specify it
[20:57:30] <tomsmeding> maerwald: right, which does said things under the hood :p
[20:57:49] <maerwald> well, you mentioned async too
[20:57:53] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[20:57:53] <arjun> sup' maerwald 
[20:58:00] <tomsmeding> haskell has fearless parallelism, but no fully automatic parallelism
[20:58:03] <tomsmeding> maerwald: good point
[20:58:24] <maerwald> arjun: jet lagged, looking at haskell xml code and understand nothing
[20:58:37] <arjun> tomsmeding, i think i took declarative to heart : P
[20:58:41] <tomsmeding> why are you looking at xml code
[20:58:47] <maerwald> also rage posting here and there
[20:58:52] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[20:58:57] <maerwald> tomsmeding: someone is paying me to
[20:58:58] <tomsmeding> arjun: haskell would very gladly have automatic parallelism, but it's a really really hard problem :p
[20:59:01] <tomsmeding> ah
[20:59:01] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:296a:5977:b176:470b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:59:22] <arjun> tomsmeding, r/nevertellmetheodds
[20:59:28] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[21:00:09] <arjun> maerwald, you're travelling?
[21:00:15] <c_wraith> it's easy to automatically parallelize haskell code. It's hard to make it speed up code on average. :P
[21:00:28] <maerwald> arjun: yeah
[21:00:41] <tomsmeding> c_wraith: I mean, yeah :p
[21:00:47] <arjun> maerwald, be safe, well as much one can be.
[21:01:16] <tomsmeding> c_wraith: and to think that "on average" is actually pretty bad, you'd rather have "in most cases"
[21:01:18] <geekosaur> guess not
[21:01:21] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[21:01:33] *** Quits: jumper149 (~jumper149@base.felixspringer.xyz) (Quit: WeeChat 3.3)
[21:01:47] <geekosaur> they discussed it but improved performance of the parallel garbage collector enough that they decided it was unnecessary
[21:02:16] <tomsmeding> interesting
[21:02:23] <tomsmeding> in 9.0?
[21:02:52] <geekosaur> 9.2.1
[21:03:08] <geekosaur> see its release notes
[21:05:35] * tomsmeding remembers reading that at some point on second thought
[21:06:25] <c_wraith> is that the same release that added the non-copying collector as an option?
[21:08:20] <tomsmeding> c_wraith: seems to be since 8.10.1? https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html#rts-flag---nonmoving-gc
[21:08:40] <c_wraith> really?  I didn't think that was that old
[21:08:52] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[21:09:02] <tomsmeding> me neither
[21:09:15] <tomsmeding> hence the ? lol
[21:09:26] <geekosaur> 8.10.2 has a flag to disable it
[21:09:39] <geekosaur> 8.10.1 doesn';t mention nonmoving gc though
[21:10:35] *** Joins: jeetelongname (~jeet@148.197.248.63)
[21:10:55] <tomsmeding> geekosaur: https://downloads.haskell.org/~ghc/8.10.1/docs/html/users_guide/runtime_control.html#rts-flag---nonmoving-gc ?
[21:11:11] <geekosaur> I meant in the release notes, sorry
[21:11:15] <tomsmeding> ah
[21:11:19] <geekosaur> so it apparently predates 8.10
[21:11:36] <tomsmeding> doubtful, I remember not having it on 8.8.4
[21:12:07] *** Joins: madjestic (~madjestic@77-63-50-60.mobile.kpn.net)
[21:12:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:13:13] <geekosaur> so I guess they never documented it?
[21:13:34] <geekosaur> in the release notes? but I could have sworn I'd read of it in some release note
[21:14:02] <tomsmeding> https://well-typed.com/blog/2019/10/nonmoving-gc-merge/ "Low-latency garbage collector merged for GHC 8.10"
[21:17:35] *** Quits: jeetelongname (~jeet@148.197.248.63) (Ping timeout: 256 seconds)
[21:23:25] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-173.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[21:24:43] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[21:24:43] *** Quits: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506) (Read error: Connection reset by peer)
[21:26:33] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:26:38] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[21:26:39] *** Quits: madjestic (~madjestic@77-63-50-60.mobile.kpn.net) (Read error: Connection reset by peer)
[21:27:40] *** Joins: zebrag (~chris@user/zebrag)
[21:30:21] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[21:31:41] *** Joins: jgeerds__ (~jgeerds@55d4bbed.access.ecotel.net)
[21:32:19] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[21:33:42] *** Quits: kuribas (~user@ptr-25vy0i9q6berc613dpl.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[21:35:01] *** Joins: jeetelongname (~jeet@148.197.248.63)
[21:36:25] *** Quits: alphabeta (~kilolympu@31.205.200.235) (Quit: Quitting IRC :()
[21:37:05] *** Joins: MoC (~moc@user/moc)
[21:38:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[21:39:12] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:40:16] *** Joins: nhatanh02 (~satori@123.24.172.30)
[21:42:00] *** Quits: mbuf (~Shakthi@223.178.108.186) (Quit: Leaving)
[21:42:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[21:42:36] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:46:00] <gentauro_> any hints to `debug` "lsp-ui-doc"? I upgraded `hls` and `emacs` packages and now it suddently dissapeared …
[21:46:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[21:46:54] *** Quits: gentauro_ (~gentauro@185.107.12.141) (Changing host)
[21:46:54] *** Joins: gentauro_ (~gentauro@user/gentauro)
[21:47:24] *** Quits: nhatanh02 (~satori@123.24.172.30) (Quit: leaving)
[21:49:04] *** gentauro_ is now known as gentauro
[21:49:13] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[21:51:00] <ProfSimm> In Haskell if I have to represent a stream, is there a way to discard the already read bytes as the consumer iterates, or basically that's entirely up to GC
[21:51:58] <EvanR> if you do it right the the consumed bytes are gone pretty fast
[21:52:07] <EvanR> i.e. they don't leave the nursery
[21:52:20] <ProfSimm> EvanR: is there some way to represent a "window" into a stream
[21:52:27] <ProfSimm> So it can't possibly be used wrong
[21:52:31] <EvanR> heh
[21:53:06] *** Quits: trillp (~trillp@69.233.98.238) (Quit: WeeChat 3.3)
[21:53:09] <ProfSimm> When I go into #rust they tell me I need haskell :P when I come here, it's like I need rust :)
[21:53:10] <EvanR> iteratees, conduits, pipes, machines, 
[21:57:30] *** Joins: jtmar (~james@jtmar.me)
[21:59:09] *** Joins: hubvu_ (sid495858@tinside.irccloud.com)
[21:59:36] *** Joins: nefercheprure (~tma@twin.jikos.cz)
[21:59:44] *** Joins: xdej_ (~xdej@quatramaran.salle-s.org)
[21:59:46] *** Joins: bravespear|2 (~Ranhir@157.97.53.139)
[22:00:44] *** Joins: carter_ (sid14827@helmsley.irccloud.com)
[22:02:30] <EvanR> here's a rabbit hole https://www.schoolofhaskell.com/user/edwardk/cellular-automata/part-2
[22:04:43] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[22:05:15] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (*.net *.split)
[22:05:15] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (*.net *.split)
[22:05:15] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6a7d:d789:f2c1:154c) (*.net *.split)
[22:05:15] *** Quits: Arsen (arsen@managarm/dev/Arsen) (*.net *.split)
[22:05:15] *** Quits: phma (phma@2001:5b0:212a:9158:a864:46d6:7a87:abb) (*.net *.split)
[22:05:15] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (*.net *.split)
[22:05:15] *** Quits: hueso (~root@user/hueso) (*.net *.split)
[22:05:16] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[22:05:16] *** Quits: sunarch (uid526836@user/sunarch) (*.net *.split)
[22:05:16] *** Quits: kronicma1 (user27604@neotame.csclub.uwaterloo.ca) (*.net *.split)
[22:05:16] *** Quits: riatre (~quassel@2001:310:6000:f::5198:1) (*.net *.split)
[22:05:16] *** Quits: sphynx (~xnyhps@2a02:2770:3:0:216:3eff:fe67:3288) (*.net *.split)
[22:05:16] *** Quits: retro_ (~retro@2e40edd9.skybroadband.com) (*.net *.split)
[22:05:16] *** Quits: lally (sid388228@id-388228.uxbridge.irccloud.com) (*.net *.split)
[22:05:16] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[22:05:16] *** Quits: megaTherion (~therion@unix.io) (*.net *.split)
[22:05:16] *** Quits: dagit (~dagit@2001:558:6025:38:6476:a063:d05a:44da) (*.net *.split)
[22:05:16] *** Quits: berberman (~berberman@user/berberman) (*.net *.split)
[22:05:16] *** Quits: adamCS (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com) (*.net *.split)
[22:05:16] *** Quits: xdej (~xdej@quatramaran.salle-s.org) (*.net *.split)
[22:05:16] *** Quits: eco_ (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (*.net *.split)
[22:05:16] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[22:05:17] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (*.net *.split)
[22:05:17] *** Quits: synthmeat (~synthmeat@user/synthmeat) (*.net *.split)
[22:05:17] *** Quits: hubvu (sid495858@user/hubvu) (*.net *.split)
[22:05:17] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[22:05:17] *** Quits: statusbot (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com) (*.net *.split)
[22:05:17] *** Quits: feetwind (~mike@user/feetwind) (*.net *.split)
[22:05:17] *** Quits: Ranhir (~Ranhir@157.97.53.139) (*.net *.split)
[22:05:17] *** Quits: robbert-vdh (~robbert@robbertvanderhelm.nl) (*.net *.split)
[22:05:17] *** Quits: Firedancer (sid336191@id-336191.hampstead.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: degraafk (sid71464@id-71464.lymington.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: glowcoil (sid3405@id-3405.tinside.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: carter (sid14827@id-14827.helmsley.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (*.net *.split)
[22:05:17] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (*.net *.split)
[22:05:17] *** Quits: [exa] (exa@user/exa/x-3587197) (*.net *.split)
[22:05:17] *** Quits: derelict (derelict@user/derelict) (*.net *.split)
[22:05:17] *** Quits: ystael (~ystael@user/ystael) (*.net *.split)
[22:05:17] *** Quits: ts2 (~ts@46.101.20.9) (*.net *.split)
[22:05:17] *** Quits: g (x@libera/staff/glguy) (*.net *.split)
[22:05:17] *** Quits: swistak (~swistak@185.21.216.141) (*.net *.split)
[22:05:17] *** Quits: nrr__ (sid20938@id-20938.lymington.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: integral (sid296274@user/integral) (*.net *.split)
[22:05:17] *** Quits: gmc (sid58314@id-58314.ilkley.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: dispater (~dispater@user/brprice) (*.net *.split)
[22:05:17] *** Quits: jamestmartin (~james@jtmar.me) (*.net *.split)
[22:05:17] *** Quits: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae) (*.net *.split)
[22:05:18] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) (*.net *.split)
[22:05:18] *** Quits: TMA (tma@twin.jikos.cz) (*.net *.split)
[22:05:18] *** Quits: iphy (sid67735@id-67735.lymington.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: whez (sid470288@id-470288.lymington.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: _0x47_ (sid508683@id-508683.tinside.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: teehemkay_ (sid14792@id-14792.lymington.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: gregberns__ (sid315709@id-315709.helmsley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: micro (~micro@user/micro) (*.net *.split)
[22:05:18] *** Quits: russruss (~russruss@my.russellmcc.com) (*.net *.split)
[22:05:18] *** Quits: S11001001 (sid42510@id-42510.ilkley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: tnks (sid412124@id-412124.helmsley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: marienz (~marienz@libera/staff/marienz) (*.net *.split)
[22:05:18] *** Quits: davetapley (sid666@id-666.uxbridge.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: rtpg (sid443069@id-443069.ilkley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: b20n (sid115913@id-115913.uxbridge.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: lightandlight (sid135476@id-135476.helmsley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: caasih (sid13241@id-13241.ilkley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: edmundnoble (sid229620@id-229620.helmsley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: travv0 (sid293381@user/travv0) (*.net *.split)
[22:05:18] *** Quits: philpax_ (sid516926@id-516926.lymington.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: jakesyl_ (sid56879@id-56879.hampstead.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[22:05:18] *** Quits: bbear (~znc@21212.s.t4vps.eu) (*.net *.split)
[22:05:18] *** Quits: dragestil (~znc@user/dragestil) (*.net *.split)
[22:05:18] *** Quits: welterde (welterde@thinkbase.srv.welterde.de) (*.net *.split)
[22:05:18] *** Quits: earthy (~arthurvl@2001:984:275b:1:ba27:ebff:fea0:40b0) (*.net *.split)
[22:05:18] *** Quits: cawfee (~root@2406:3003:2077:2758::babe) (*.net *.split)
[22:05:18] *** Quits: liskin (~liskin@xmonad/liskin) (*.net *.split)
[22:05:18] *** Quits: defanor (~defanor@tart.uberspace.net) (*.net *.split)
[22:05:18] *** Quits: codedmart (codedmart@2600:3c01::f03c:92ff:fefe:8511) (*.net *.split)
[22:05:18] *** Quits: xnbya (~xnbya@2a01:4f8:c17:cbdd::1) (*.net *.split)
[22:05:18] *** Quits: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org) (*.net *.split)
[22:05:18] *** Quits: Adran (~adran@botters/adran) (*.net *.split)
[22:05:18] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[22:05:18] *** Quits: tomjaguarpaw (~tom@li367-225.members.linode.com) (*.net *.split)
[22:05:18] *** Quits: immae (~immae@2a01:4f8:141:53e7::) (*.net *.split)
[22:05:18] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[22:05:19] *** Quits: janus (janus@anubis.0x90.dk) (*.net *.split)
[22:05:19] *** Quits: dixie (~dixie@real.wilbury.sk) (*.net *.split)
[22:05:19] *** Quits: dunj3 (~dunj3@kingdread.de) (*.net *.split)
[22:05:19] *** Quits: cpape (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[22:05:19] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[22:05:19] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (*.net *.split)
[22:05:19] *** Quits: ec (~ec@gateway/tor-sasl/ec) (*.net *.split)
[22:05:19] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (*.net *.split)
[22:05:19] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (*.net *.split)
[22:05:19] *** Quits: gehmehgeh (~user@user/gehmehgeh) (*.net *.split)
[22:05:19] *** Quits: fef (~thedawn@user/thedawn) (*.net *.split)
[22:05:19] *** Quits: califax (~califax@user/califx) (*.net *.split)
[22:05:19] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (*.net *.split)
[22:05:19] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[22:05:19] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[22:05:19] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (*.net *.split)
[22:05:19] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (*.net *.split)
[22:05:19] *** Quits: hololeap (~hololeap@user/hololeap) (*.net *.split)
[22:05:19] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (*.net *.split)
[22:05:19] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (*.net *.split)
[22:05:19] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (*.net *.split)
[22:05:19] *** Quits: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71) (*.net *.split)
[22:05:19] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (*.net *.split)
[22:05:19] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (*.net *.split)
[22:05:19] *** Quits: xbreu (~xbreu@2001:470:69fc:105::1:5061) (*.net *.split)
[22:05:19] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (*.net *.split)
[22:05:19] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (*.net *.split)
[22:05:19] *** Quits: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789) (*.net *.split)
[22:05:19] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (*.net *.split)
[22:05:19] *** Quits: quantum (~quantum@user/quantum/x-8556232) (*.net *.split)
[22:05:19] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (*.net *.split)
[22:05:19] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (*.net *.split)
[22:05:19] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (*.net *.split)
[22:05:19] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (*.net *.split)
[22:05:19] *** Quits: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72) (*.net *.split)
[22:05:19] *** Quits: simmsb (~simmsb@2001:470:69fc:105::1:55c3) (*.net *.split)
[22:05:19] *** Quits: soft (~soft@2001:470:69fc:105::c75) (*.net *.split)
[22:05:19] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (*.net *.split)
[22:05:19] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (*.net *.split)
[22:05:19] *** Quits: int-e (~noone@int-e.eu) (*.net *.split)
[22:05:19] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (*.net *.split)
[22:05:19] *** Quits: Unode (~Unode@194.94.44.220) (*.net *.split)
[22:05:20] *** Quits: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi) (*.net *.split)
[22:05:20] *** Quits: samhh (7569f027cf@2604:bf00:561:2000::e4) (*.net *.split)
[22:05:20] *** Quits: thebnq (~bnq@herrokitty.com) (*.net *.split)
[22:05:20] *** Quits: Noinia (~Frank@77-162-168-71.fixed.kpn.net) (*.net *.split)
[22:05:20] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[22:05:20] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[22:05:20] *** Quits: Putonlalla (~sapekiis@it-cyan.it.jyu.fi) (*.net *.split)
[22:05:20] *** Quits: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2) (*.net *.split)
[22:05:20] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[22:05:20] *** Quits: m4lvin (~m4lvin@w4eg.de) (*.net *.split)
[22:05:20] *** Quits: Vq (~vq@90-227-195-41-no77.tbcn.telia.com) (*.net *.split)
[22:05:20] *** Quits: acro (~acro@user/acro) (*.net *.split)
[22:05:20] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[22:05:20] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (*.net *.split)
[22:05:20] *** Quits: xacktm (xacktm@user/xacktm) (*.net *.split)
[22:05:20] *** Quits: evanrelf (3addc196af@2604:bf00:561:2000::f0) (*.net *.split)
[22:05:20] *** Quits: davl (~davl@207.154.228.18) (*.net *.split)
[22:05:20] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (*.net *.split)
[22:05:20] *** Quits: m5zs7k (aquares@web10.mydevil.net) (*.net *.split)
[22:05:20] *** Quits: lyxia (~lyxia@poisson.chat) (*.net *.split)
[22:05:20] *** Quits: SIben (~SIben@ns3106586.ip-5-135-191.eu) (*.net *.split)
[22:05:20] *** Quits: ggVGc (~ggVGc@a.lowtech.earth) (*.net *.split)
[22:05:20] *** Quits: ptrcmd (~ptrcmd@user/ptrcmd) (*.net *.split)
[22:05:21] *** Quits: Xe (~cadey@tailscale/xe) (*.net *.split)
[22:05:21] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[22:05:21] *** Quits: dpratt__ (sid193493@id-193493.helmsley.irccloud.com) (*.net *.split)
[22:05:21] *** Quits: rune (sid21167@id-21167.ilkley.irccloud.com) (*.net *.split)
[22:05:21] *** Quits: Adeon (sid418992@id-418992.lymington.irccloud.com) (*.net *.split)
[22:05:21] *** Quits: grfn (sid449115@id-449115.helmsley.irccloud.com) (*.net *.split)
[22:05:21] *** Quits: vito (sid1962@user/vito) (*.net *.split)
[22:05:21] *** Quits: pierrot (~pi@user/pierrot) (*.net *.split)
[22:05:21] *** Quits: bonz060 (~quassel@2001:bc8:47a4:a23::1) (*.net *.split)
[22:05:21] *** Quits: Jon (jon@dow.land) (*.net *.split)
[22:05:21] *** Quits: smorgasbord (buggy@user/smorgasbord) (*.net *.split)
[22:05:21] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[22:05:21] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:567f:a71e:f346:c5f0) (*.net *.split)
[22:05:21] *** Quits: notzmv (~zmv@user/notzmv) (*.net *.split)
[22:05:21] *** Quits: ubert (~Thunderbi@p200300ecdf0994b6cb4175acd0981d1c.dip0.t-ipconnect.de) (*.net *.split)
[22:05:21] *** Quits: chomwitt (~chomwitt@2a02:587:dc11:fb00:12c3:7bff:fe6d:d374) (*.net *.split)
[22:05:21] *** Quits: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8) (*.net *.split)
[22:05:21] *** Quits: Tisoxin (~ikosit@user/ikosit) (*.net *.split)
[22:05:21] *** Quits: jkachmar (~jkachmar@2001:470:69fc:105::c72d) (*.net *.split)
[22:05:21] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (*.net *.split)
[22:05:21] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (*.net *.split)
[22:05:21] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (*.net *.split)
[22:05:21] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (*.net *.split)
[22:05:21] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (*.net *.split)
[22:05:21] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (*.net *.split)
[22:05:21] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (*.net *.split)
[22:05:21] *** Quits: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da) (*.net *.split)
[22:05:21] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (*.net *.split)
[22:05:21] *** Quits: sweater (~sweater@206.81.18.26) (*.net *.split)
[22:05:21] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (*.net *.split)
[22:05:22] *** Quits: obviyus (sid415299@user/obviyus) (*.net *.split)
[22:05:22] *** Quits: gonz_____ (sid304396@id-304396.lymington.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (*.net *.split)
[22:05:22] *** Quits: davean (~davean@davean.sciesnet.net) (*.net *.split)
[22:05:22] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: tritlo (sid58727@user/tritlo) (*.net *.split)
[22:05:22] *** Quits: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net) (*.net *.split)
[22:05:22] *** Quits: pippijn (~pippijn@ra.xinutec.org) (*.net *.split)
[22:05:22] *** Quits: shane (~shane@ana.rch.ist) (*.net *.split)
[22:05:22] *** Quits: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com) (*.net *.split)
[22:05:22] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (*.net *.split)
[22:05:22] *** Quits: idnar (sid12240@debian/mithrandi) (*.net *.split)
[22:05:22] *** Quits: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: sa1_ (sid7690@id-7690.ilkley.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: typetetris (sid275937@id-275937.tinside.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: jackdk (sid373013@cssa/jackdk) (*.net *.split)
[22:05:22] *** Quits: gnyeki (~gnyeki@user/gnyeki) (*.net *.split)
[22:05:22] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[22:05:22] *** Quits: supersven (sid501114@id-501114.ilkley.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: christiaanb (sid84827@id-84827.lymington.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (*.net *.split)
[22:05:22] *** Quits: spider__ (~spider@vps-951ce37a.vps.ovh.ca) (*.net *.split)
[22:05:22] *** Quits: drlkf (~drlkf@2001:41d0:a:62bb::1) (*.net *.split)
[22:05:22] *** Quits: bwe (~bwe@2a01:4f8:1c1c:4878::2) (*.net *.split)
[22:05:22] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (*.net *.split)
[22:05:22] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[22:05:22] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[22:05:22] *** Quits: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net) (*.net *.split)
[22:05:22] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[22:05:22] *** Quits: arjun (~arjun@user/arjun) (*.net *.split)
[22:05:22] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (*.net *.split)
[22:05:23] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[22:05:23] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (*.net *.split)
[22:05:23] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (*.net *.split)
[22:05:23] *** Quits: shriekingnoise (~shrieking@181.229.0.83) (*.net *.split)
[22:05:23] *** Quits: pavonia (~user@user/siracusa) (*.net *.split)
[22:05:23] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (*.net *.split)
[22:05:23] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (*.net *.split)
[22:05:23] *** Quits: AlexNoo (~AlexNoo@178.34.151.107) (*.net *.split)
[22:05:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[22:05:23] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (*.net *.split)
[22:05:23] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (*.net *.split)
[22:05:23] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (*.net *.split)
[22:05:23] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (*.net *.split)
[22:05:23] *** Quits: aku_ (~aku@163.172.137.34) (*.net *.split)
[22:05:23] *** Quits: hyiltiz_ (~quassel@31.220.5.250) (*.net *.split)
[22:05:23] *** Quits: lemonsni- (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[22:05:23] *** Quits: sander (~sander@user/sander) (*.net *.split)
[22:05:23] *** Quits: mcglk_ (~mcglk@131.191.49.120) (*.net *.split)
[22:05:23] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (*.net *.split)
[22:05:23] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (*.net *.split)
[22:05:23] *** Quits: ishutin (~ishutin@91-83-11-240.pool.digikabel.hu) (*.net *.split)
[22:05:24] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (*.net *.split)
[22:05:24] *** Quits: simpleauthority (~simpleaut@user/simpleauthority) (*.net *.split)
[22:05:24] *** Quits: Athas (~athas@sigkill.dk) (*.net *.split)
[22:05:24] *** Quits: jonathanx__ (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se) (*.net *.split)
[22:05:24] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[22:05:24] *** Quits: qhong_ (~qhong@rescomp-21-400677.stanford.edu) (*.net *.split)
[22:05:24] *** Quits: gabiruh (~gabiruh@vps19177.publiccloud.com.br) (*.net *.split)
[22:05:24] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[22:05:24] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[22:05:24] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[22:05:24] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[22:05:24] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (*.net *.split)
[22:05:24] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (*.net *.split)
[22:05:24] *** Quits: stvc (~stvc@192.241.166.39) (*.net *.split)
[22:05:24] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[22:05:24] *** Quits: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org) (*.net *.split)
[22:05:24] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[22:05:24] *** Quits: fluxit (~fluxit@techsmix.net) (*.net *.split)
[22:05:24] *** Quits: edr (~edr@user/edr) (*.net *.split)
[22:05:24] *** Quits: dka (~code-is-a@193.70.33.83) (*.net *.split)
[22:05:24] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (*.net *.split)
[22:05:24] *** Quits: widelec-BB (~widelec@cpe-109-207-144-181.docsis.tczew.net.pl) (*.net *.split)
[22:05:24] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (*.net *.split)
[22:05:24] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[22:05:25] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[22:05:25] *** Quits: mniip (mniip@libera/staff/mniip) (*.net *.split)
[22:05:25] *** Quits: m1dnight (~christoph@christophe.dev) (*.net *.split)
[22:05:25] *** Quits: eL_Bart0 (eL_Bart0@dietunichtguten.org) (*.net *.split)
[22:05:25] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (*.net *.split)
[22:05:25] *** Quits: bollu (~bollu@159.65.151.13) (*.net *.split)
[22:05:25] *** Quits: canta (~canta@user/canta) (*.net *.split)
[22:05:25] *** Quits: foul_owl (~kerry@94.140.8.107) (*.net *.split)
[22:05:25] *** Quits: nhs (~nhs@136.49.226.20) (*.net *.split)
[22:05:25] *** Quits: jjhoo (~jahakala@user/jjhoo) (*.net *.split)
[22:05:25] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (*.net *.split)
[22:05:25] *** Quits: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net) (*.net *.split)
[22:05:25] *** Quits: df (~ben@justworks.xyz) (*.net *.split)
[22:05:25] *** Quits: douglaswinship (~douglaswi@78.40.148.180) (*.net *.split)
[22:05:25] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (*.net *.split)
[22:05:25] *** Quits: exarkun (~exarkun@user/exarkun) (*.net *.split)
[22:05:25] *** Quits: tv (~tv@user/tv) (*.net *.split)
[22:05:25] *** Quits: maerwald (~maerwald@user/maerwald) (*.net *.split)
[22:05:25] *** Quits: jeffz (~user@lambda.xen.prgmr.com) (*.net *.split)
[22:05:25] *** Quits: hltk (~hltk@hltk.fi) (*.net *.split)
[22:05:25] *** Quits: myme (~myme@40.51-175-185.customer.lyse.net) (*.net *.split)
[22:05:25] *** Quits: joeyh_ (~joeyh@kitenet.net) (*.net *.split)
[22:05:25] *** Quits: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de) (*.net *.split)
[22:05:25] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[22:05:25] *** Quits: Brandon_1X (~brandon@178-79-138-117.ip.linodeusercontent.com) (*.net *.split)
[22:05:25] *** Quits: barrucadu (~barrucadu@carcosa.barrucadu.co.uk) (*.net *.split)
[22:05:25] *** Quits: heath (~heath@user/heath) (*.net *.split)
[22:05:25] *** Quits: shanemikel (~shanemike@desk.roadwar.net) (*.net *.split)
[22:05:25] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[22:05:25] *** Quits: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de) (*.net *.split)
[22:05:25] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (*.net *.split)
[22:05:25] *** Quits: bcoppens (~bartcopp@vpn2.bartcoppens.be) (*.net *.split)
[22:05:25] *** Quits: spoonm (spoonm@inaba.spoonm.org) (*.net *.split)
[22:05:25] *** Quits: Ram-Z (~Ram-Z@li1814-254.members.linode.com) (*.net *.split)
[22:05:25] *** Quits: sajith (~sajith@user/sajith) (*.net *.split)
[22:05:25] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[22:05:26] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[22:05:26] *** Quits: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2) (*.net *.split)
[22:05:26] *** Quits: monochrom (trebla@216.138.220.146) (*.net *.split)
[22:05:26] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (*.net *.split)
[22:05:26] *** Quits: tremon (~tremon@217-120-53-183.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[22:05:26] *** Quits: tristanC (~tristanC@user/tristanc) (*.net *.split)
[22:05:26] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (*.net *.split)
[22:05:26] *** Quits: xstill- (xstill@fimu/xstill) (*.net *.split)
[22:05:26] *** Quits: dyniec (~dyniec@mail.dybiec.info) (*.net *.split)
[22:05:26] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (*.net *.split)
[22:05:26] *** Quits: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f89b:2c73:97b1:7ba3) (*.net *.split)
[22:05:26] *** Quits: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9) (*.net *.split)
[22:05:26] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[22:05:26] *** Quits: nf (~n@monade.li) (*.net *.split)
[22:05:26] *** Quits: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203) (*.net *.split)
[22:05:26] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (*.net *.split)
[22:05:26] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (*.net *.split)
[22:05:26] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (*.net *.split)
[22:05:26] *** Quits: moats (~oats@user/oats) (*.net *.split)
[22:05:26] *** Quits: alex[m] (~alexchete@2001:470:69fc:105::1:1001) (*.net *.split)
[22:05:26] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (*.net *.split)
[22:05:26] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (*.net *.split)
[22:05:26] *** Quits: bbhoss (sid18216@id-18216.tinside.irccloud.com) (*.net *.split)
[22:05:26] *** Quits: scav (sid309693@id-309693.helmsley.irccloud.com) (*.net *.split)
[22:05:26] *** Quits: bw (sid2730@user/betawaffle) (*.net *.split)
[22:05:26] *** Quits: feliix42 (~felix@gibbs.uberspace.de) (*.net *.split)
[22:05:26] *** Quits: cln (sid336875@id-336875.ilkley.irccloud.com) (*.net *.split)
[22:05:26] *** Quits: bgamari_ (~bgamari@2001:470:e438::1) (*.net *.split)
[22:05:26] *** Quits: slowtyper (~slowtyper@user/slowtyper) (*.net *.split)
[22:05:26] *** Quits: averell (~averell@user/averell) (*.net *.split)
[22:05:26] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (*.net *.split)
[22:05:27] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (*.net *.split)
[22:05:27] *** Quits: Ferdirand (~somebody@2001:4c78:2012:5000::2) (*.net *.split)
[22:05:27] *** Quits: dfg (dfg@user/dfg) (*.net *.split)
[22:05:27] *** Quits: Unhammer (~Unhammer@user/unhammer) (*.net *.split)
[22:05:27] *** Quits: relrod (~relrod@redhat/ansible.staff.relrod) (*.net *.split)
[22:05:27] *** Quits: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net) (*.net *.split)
[22:05:27] *** Quits: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001) (*.net *.split)
[22:05:27] *** Quits: glider (~glider@user/glider) (*.net *.split)
[22:05:27] *** Quits: quintasan (~quassel@quintasan.pl) (*.net *.split)
[22:05:27] *** Quits: orcus (~orcus@user/brprice) (*.net *.split)
[22:05:27] *** Quits: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (*.net *.split)
[22:05:27] *** Quits: teddyc (theodorc@cassarossa.samfundet.no) (*.net *.split)
[22:05:27] *** Quits: hiredman (~hiredman@frontier1.downey.family) (*.net *.split)
[22:05:27] *** Quits: piele (~piele@tbonesteak.creativeserver.net) (*.net *.split)
[22:05:27] *** Quits: OscarH_ (~OscarH@90.201.86.195) (*.net *.split)
[22:05:27] *** Quits: arkeet (~arkeet@moriya.ca) (*.net *.split)
[22:05:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (*.net *.split)
[22:05:27] *** Quits: max22- (~maxime@2a01cb08833598009c1792461f3ff785.ipv6.abo.wanadoo.fr) (*.net *.split)
[22:05:27] *** Quits: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5) (*.net *.split)
[22:05:27] *** Quits: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) (*.net *.split)
[22:05:27] *** Quits: sm (~sm@plaintextaccounting/sm) (*.net *.split)
[22:05:28] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (*.net *.split)
[22:05:28] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (*.net *.split)
[22:05:28] *** Quits: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0) (*.net *.split)
[22:05:28] *** Quits: nomeata (~nomeata@2001:470:69fc:105::1:5ed4) (*.net *.split)
[22:05:28] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (*.net *.split)
[22:05:28] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (*.net *.split)
[22:05:28] *** Quits: grabb0id[m] (~alangmatr@2001:470:69fc:105::b489) (*.net *.split)
[22:05:28] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[22:05:28] *** Quits: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f) (*.net *.split)
[22:05:28] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (*.net *.split)
[22:05:28] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[22:05:28] *** Quits: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1) (*.net *.split)
[22:05:28] *** Quits: AkechiShiro (~licht@user/akechishiro) (*.net *.split)
[22:05:28] *** Quits: noctuks (7vrDyCK6LH@user/noctux) (*.net *.split)
[22:05:28] *** Quits: WhateverRabbit (~rabbit@206.81.18.26) (*.net *.split)
[22:05:28] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[22:05:28] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (*.net *.split)
[22:05:28] *** Quits: noctux (~noctux@user/noctux) (*.net *.split)
[22:05:28] *** Quits: tired (~tired@user/tired) (*.net *.split)
[22:05:28] *** Quits: aria (sid380617@2a03:5180:f:2::5:cec9) (*.net *.split)
[22:05:28] *** Quits: jonrh (sid5185@2a03:5180:f:3::1441) (*.net *.split)
[22:05:28] *** Quits: taktoa[c] (sid282096@2a03:5180:f::4:4df0) (*.net *.split)
[22:05:28] *** Quits: hendi (sid489601@2a03:5180:f:2::7:7881) (*.net *.split)
[22:05:28] *** Quits: AndreasK (sid320732@2a03:5180:f:5::4:e4dc) (*.net *.split)
[22:05:29] *** Quits: lukec (9dfd4d094e@2604:bf00:561:2000::10e) (*.net *.split)
[22:05:29] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (*.net *.split)
[22:05:29] *** Quits: jkoshy (99b9359beb@2604:bf00:561:2000::10f) (*.net *.split)
[22:05:29] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (*.net *.split)
[22:05:29] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (*.net *.split)
[22:05:29] *** Quits: oats (~thomas@user/oats) (*.net *.split)
[22:05:29] *** Quits: flupe (~baboum@radon.sbi.re) (*.net *.split)
[22:05:29] *** Quits: cjay- (cjay@nerdbox.nerd2nerd.org) (*.net *.split)
[22:05:29] *** Quits: notabled1 (~notabledu@ares.dbalan.in) (*.net *.split)
[22:05:29] *** Quits: sshine (~simon@hubris.eta.solutions) (*.net *.split)
[22:05:29] *** Quits: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com) (*.net *.split)
[22:05:29] *** Quits: p3n (~p3n@217.198.124.246) (*.net *.split)
[22:05:29] *** Quits: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at) (*.net *.split)
[22:05:29] *** Quits: ellie (~ellie@user/ellie) (*.net *.split)
[22:05:29] *** Quits: blades (~blades@204.48.29.163) (*.net *.split)
[22:05:29] *** Quits: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0) (*.net *.split)
[22:05:29] *** Quits: kosmikus (~kosmikus@nullzig.kosmikus.org) (*.net *.split)
[22:05:29] *** Quits: robertm (robertm@lattice.rojoma.com) (*.net *.split)
[22:05:29] *** Quits: _________ (~nobody@user/noodly) (*.net *.split)
[22:05:29] *** Quits: Trattue (~Trattue@152.70.182.158) (*.net *.split)
[22:05:29] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (*.net *.split)
[22:05:29] *** Quits: michalz (~michalz@185.246.204.101) (*.net *.split)
[22:05:30] *** Quits: MasseR (~MasseR@51.15.143.128) (*.net *.split)
[22:05:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[22:05:30] *** Quits: haskl (~haskl@user/haskl) (*.net *.split)
[22:05:30] *** Quits: FragByte (~christian@user/fragbyte) (*.net *.split)
[22:05:30] *** Quits: schweers (~user@2001:16b8:e960:8100:aaa1:59ff:fe3f:235c) (*.net *.split)
[22:05:30] *** Quits: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4) (*.net *.split)
[22:05:30] *** Quits: AWizzArd (~code@gehrels.uberspace.de) (*.net *.split)
[22:05:30] *** Quits: Deide (~deide@user/deide) (*.net *.split)
[22:05:30] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (*.net *.split)
[22:05:30] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (*.net *.split)
[22:05:30] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (*.net *.split)
[22:05:30] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (*.net *.split)
[22:05:30] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (*.net *.split)
[22:05:30] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (*.net *.split)
[22:05:30] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (*.net *.split)
[22:05:30] *** Quits: lisq (~quassel@lis.moe) (*.net *.split)
[22:05:30] *** Quits: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001) (*.net *.split)
[22:05:30] *** Quits: martin02 (~silas@2001:4ca0:0:fe00:0:5efe:a96:1bc1) (*.net *.split)
[22:05:30] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (*.net *.split)
[22:05:30] *** Quits: wallymathieu (uid533252@id-533252.uxbridge.irccloud.com) (*.net *.split)
[22:05:30] *** Quits: ajb_ (~ajb@cupid.whatbox.ca) (*.net *.split)
[22:05:31] *** Quits: Flow (~none@gentoo/developer/flow) (*.net *.split)
[22:05:31] *** Quits: mncheck (~mncheck@193.224.205.254) (*.net *.split)
[22:05:31] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (*.net *.split)
[22:05:31] *** Quits: |beowulf| (1000@sourcemage/mage/beowulf) (*.net *.split)
[22:05:31] *** Quits: APic (apic@apic.name) (*.net *.split)
[22:05:31] *** Quits: ouroboros (~ouroboros@user/ouroboros) (*.net *.split)
[22:05:31] *** Quits: teehemkay (sid14792@id-14792.lymington.irccloud.com) (*.net *.split)
[22:05:31] *** Quits: PHO` (~pho@akari.cielonegro.org) (*.net *.split)
[22:05:31] *** Quits: nonzen (~nonzen@user/nonzen) (*.net *.split)
[22:05:31] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[22:05:31] *** Quits: smunix (~smunix@static.26.70.12.49.clients.your-server.de) (*.net *.split)
[22:05:31] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[22:05:31] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (*.net *.split)
[22:05:31] *** Quits: mcfilib (sid302703@user/mcfilib) (*.net *.split)
[22:05:31] *** Quits: tureba (~tureba@tureba.org) (*.net *.split)
[22:05:31] *** Quits: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg) (*.net *.split)
[22:05:31] *** Quits: jakalx (~jakalx@base.jakalx.net) (*.net *.split)
[22:05:32] *** Quits: bah (~bah@l1.tel) (*.net *.split)
[22:05:32] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (*.net *.split)
[22:05:32] *** Quits: alp (~alp@mail.fmap.fr) (*.net *.split)
[22:05:32] *** Quits: guibou (~guibou@mail.fmap.fr) (*.net *.split)
[22:05:32] *** Quits: Rembane (~Rembane@li346-36.members.linode.com) (*.net *.split)
[22:05:32] *** Quits: _\_ (~o@user/ding) (*.net *.split)
[22:05:32] *** Quits: kaol (~kaol@94-237-42-30.nl-ams1.upcloud.host) (*.net *.split)
[22:05:32] *** Quits: adium (adium@user/adium) (*.net *.split)
[22:05:32] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[22:05:32] *** Quits: edwtjo (~edwtjo@user/edwtjo) (*.net *.split)
[22:05:32] *** Quits: Aleksejs (~Aleksejs@haskell.lv) (*.net *.split)
[22:05:32] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[22:05:32] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (*.net *.split)
[22:05:32] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (*.net *.split)
[22:05:32] *** Quits: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d) (*.net *.split)
[22:05:32] *** Quits: Nate[m]1 (~m52957mat@2001:470:69fc:105::1:591a) (*.net *.split)
[22:05:32] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (*.net *.split)
[22:05:32] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (*.net *.split)
[22:05:32] *** Quits: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164) (*.net *.split)
[22:05:32] *** Quits: boxscape (~boxscape@user/boxscape) (*.net *.split)
[22:05:32] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[22:05:32] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (*.net *.split)
[22:05:32] *** Quits: siraben (~siraben@user/siraben) (*.net *.split)
[22:05:32] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (*.net *.split)
[22:05:32] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (*.net *.split)
[22:05:32] *** Quits: benjamin[m]1234 (~benjaminm@2001:470:69fc:105::1:3f2f) (*.net *.split)
[22:05:32] *** Quits: IgnatInsarov[m] (~kindaroma@2001:470:69fc:105::f5d9) (*.net *.split)
[22:05:32] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (*.net *.split)
[22:05:33] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[22:05:33] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[22:05:33] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (*.net *.split)
[22:05:33] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[22:05:33] *** Quits: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com) (*.net *.split)
[22:05:33] *** Quits: rookie101 (~rookie@165.232.121.13) (*.net *.split)
[22:05:33] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[22:05:33] *** Quits: samebchase (~samebchas@51.15.68.182) (*.net *.split)
[22:05:33] *** Quits: peutri (~peutri@ns317027.ip-94-23-46.eu) (*.net *.split)
[22:05:33] *** Quits: dfordvm (~dfordivam@tk2-219-19469.vs.sakura.ne.jp) (*.net *.split)
[22:05:33] *** Quits: bens (~bens@www.typius.com) (*.net *.split)
[22:05:33] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[22:05:33] *** Quits: auri (~quassel@fsf/member/auri) (*.net *.split)
[22:05:33] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[22:05:34] *** Quits: Moyst_ (~moyst@user/moyst) (*.net *.split)
[22:05:34] *** Quits: amir (sid22336@user/amir) (*.net *.split)
[22:05:34] *** Quits: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com) (*.net *.split)
[22:05:34] *** Quits: parseval (sid239098@id-239098.helmsley.irccloud.com) (*.net *.split)
[22:05:34] *** Quits: bsdbandit (~bwell@users.757.org) (*.net *.split)
[22:05:34] *** Quits: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec) (*.net *.split)
[22:05:34] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[22:05:34] *** Quits: ringo__ (~ringo@157.230.117.128) (*.net *.split)
[22:05:34] *** Quits: oxytocat (~alloca@user/suppi) (*.net *.split)
[22:05:34] *** Quits: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34) (*.net *.split)
[22:05:34] *** Quits: hexagoxel (~hexagoxel@2a01:4f8:c0c:e::2) (*.net *.split)
[22:05:34] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[22:05:34] *** Quits: nshepperd2 (~nshepperd@li364-218.members.linode.com) (*.net *.split)
[22:05:34] *** Quits: deni (~deni@user/deni) (*.net *.split)
[22:05:34] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[22:05:34] *** Quits: jocke-l (jocke-l@a.x0.is) (*.net *.split)
[22:05:34] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[22:05:34] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (*.net *.split)
[22:05:34] *** Quits: MironZ (~MironZ@nat-infra.ehlab.uk) (*.net *.split)
[22:05:34] *** Quits: ephemient (uid407513@id-407513.lymington.irccloud.com) (*.net *.split)
[22:05:34] *** Quits: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e) (*.net *.split)
[22:05:34] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (*.net *.split)
[22:05:34] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (*.net *.split)
[22:05:34] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (*.net *.split)
[22:05:35] *** Quits: codygman[m] (~codygman@2001:470:69fc:105::b4ba) (*.net *.split)
[22:05:35] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[22:05:35] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (*.net *.split)
[22:05:35] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (*.net *.split)
[22:05:35] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (*.net *.split)
[22:05:35] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (*.net *.split)
[22:05:35] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (*.net *.split)
[22:05:35] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (*.net *.split)
[22:05:35] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (*.net *.split)
[22:05:35] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (*.net *.split)
[22:05:35] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: truckasaurus (sid457088@id-457088.helmsley.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (*.net *.split)
[22:05:35] *** Quits: DigitalKiwi (~kiwi@2604:a880:400:d0::12fc:5001) (*.net *.split)
[22:05:35] *** Quits: Benzi-Junior (~BenziJuni@dsl-149-66-61.hive.is) (*.net *.split)
[22:05:35] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: systemfault (sid267009@id-267009.uxbridge.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: ikke (~kevin@alpine/developer/ikke) (*.net *.split)
[22:05:35] *** Quits: alinab (sid468903@helmsley.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[22:05:35] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: jakzale (6291399afa@user/jakzale) (*.net *.split)
[22:05:35] *** Quits: bradparker (sid262931@id-262931.uxbridge.irccloud.com) (*.net *.split)
[22:05:36] *** Quits: bjobjo (~bjobjo@user/bjobjo) (*.net *.split)
[22:05:36] *** Quits: Hecate (~mariposa@user/hecate) (*.net *.split)
[22:05:36] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (*.net *.split)
[22:05:36] *** Quits: Igloo (~ian@matrix.chaos.earth.li) (*.net *.split)
[22:05:36] *** Quits: aristid (sid1599@id-1599.uxbridge.irccloud.com) (*.net *.split)
[22:05:36] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[22:05:36] *** Quits: T_S_ (sid501726@id-501726.uxbridge.irccloud.com) (*.net *.split)
[22:05:36] *** Quits: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c) (*.net *.split)
[22:05:36] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[22:05:36] *** Quits: dy (~dy@user/dy) (*.net *.split)
[22:05:36] *** Quits: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca) (*.net *.split)
[22:05:36] *** Quits: statusfailed (~statusfai@statusfailed.com) (*.net *.split)
[22:05:36] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[22:05:36] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (*.net *.split)
[22:05:36] *** Quits: Cajun (~Cajun@user/cajun) (*.net *.split)
[22:05:36] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (*.net *.split)
[22:05:36] *** Quits: jeetelongname (~jeet@148.197.248.63) (*.net *.split)
[22:05:36] *** Quits: jgeerds__ (~jgeerds@55d4bbed.access.ecotel.net) (*.net *.split)
[22:05:36] *** Quits: kilolympus (~kilolympu@31.205.200.235) (*.net *.split)
[22:05:36] *** Quits: benin (~benin@183.82.30.17) (*.net *.split)
[22:05:36] *** Quits: pgib (~textual@173.38.117.86) (*.net *.split)
[22:05:36] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (*.net *.split)
[22:05:36] *** Quits: jacks- (~bc8147f2@cerf.good1.com) (*.net *.split)
[22:05:37] *** Quits: lechner (~lechner@debian/lechner) (*.net *.split)
[22:05:37] *** Quits: siers (~ij@user/ij) (*.net *.split)
[22:05:37] *** Quits: random_ (~random@185.219.68.251) (*.net *.split)
[22:05:37] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (*.net *.split)
[22:05:37] *** Quits: Alex_test (~al_test@178.34.151.107) (*.net *.split)
[22:05:37] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (*.net *.split)
[22:05:37] *** Quits: mmhat (~mmh@55d44405.access.ecotel.net) (*.net *.split)
[22:05:37] *** Quits: sus (zero@user/zeromomentum) (*.net *.split)
[22:05:37] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[22:05:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (*.net *.split)
[22:05:37] *** Quits: astra (sid289983@user/amish) (*.net *.split)
[22:05:37] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (*.net *.split)
[22:05:37] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (*.net *.split)
[22:05:37] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca) (*.net *.split)
[22:05:37] *** Quits: forell (~forell@user/forell) (*.net *.split)
[22:05:37] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[22:05:37] *** Quits: mrmr (~mrmr@user/mrmr) (*.net *.split)
[22:05:37] *** Quits: polux (~polux@51.15.169.172) (*.net *.split)
[22:05:37] *** Quits: Kaipi (~Kaiepi@156.34.47.253) (*.net *.split)
[22:05:37] *** Quits: vicfred (~vicfred@user/vicfred) (*.net *.split)
[22:05:37] *** Quits: rembo10 (~rembo10@remulis.com) (*.net *.split)
[22:05:37] *** Quits: td_ (~td@94.134.91.149) (*.net *.split)
[22:05:37] *** Quits: EsoAlgo4 (~EsoAlgo@152.70.142.52) (*.net *.split)
[22:05:37] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (*.net *.split)
[22:05:37] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (*.net *.split)
[22:05:37] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[22:05:38] *** Quits: dut (~dut@user/dut) (*.net *.split)
[22:05:38] *** Quits: juhp (~juhp@128.106.188.82) (*.net *.split)
[22:05:38] *** Quits: jlamothe (~jlamothe@198.251.61.229) (*.net *.split)
[22:05:38] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (*.net *.split)
[22:05:38] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[22:05:38] *** Quits: raym (~raym@user/raym) (*.net *.split)
[22:05:38] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (*.net *.split)
[22:05:38] *** Quits: raoul (~raoul@95.179.203.88) (*.net *.split)
[22:05:38] *** Quits: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4) (*.net *.split)
[22:05:38] *** Quits: yahb (xsbot@user/mniip/bot/yahb) (*.net *.split)
[22:05:38] *** Quits: Taneb (~Taneb@runciman.hacksoc.org) (*.net *.split)
[22:05:38] *** Quits: wagle (~wagle@quassel.wagle.io) (*.net *.split)
[22:05:38] *** Quits: juri_ (~juri@178.63.35.222) (*.net *.split)
[22:05:38] *** Quits: qrpnxz (abc4f95c31@user/qrpnxz) (*.net *.split)
[22:05:38] *** Quits: jassob (~jassob@h-155-4-71-72.A785.priv.bahnhof.se) (*.net *.split)
[22:05:38] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[22:05:38] *** Quits: srk (~sorki@user/srk) (*.net *.split)
[22:05:38] *** Quits: justIrresolute (~justache@user/justache) (*.net *.split)
[22:05:38] *** Quits: kitzman (~kitzman@user/dekenevs) (*.net *.split)
[22:05:38] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[22:05:39] *** Quits: Sqaure (~a@user/square) (*.net *.split)
[22:05:39] *** Quits: anderson (~ande@user/anderson) (*.net *.split)
[22:05:39] *** Quits: zero (~z@user/zero) (*.net *.split)
[22:05:39] *** Quits: haritz (~hrtz@user/haritz) (*.net *.split)
[22:05:39] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[22:05:39] *** Quits: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (*.net *.split)
[22:05:39] *** Quits: xerox (~edi@user/edi) (*.net *.split)
[22:05:39] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[22:05:39] *** Quits: Philonous (~Philonous@user/philonous) (*.net *.split)
[22:05:39] *** Quits: clever (~clever@99.192.114.98) (*.net *.split)
[22:05:39] *** Quits: c_wraith (~c_wraith@adjoint.us) (*.net *.split)
[22:05:39] *** Quits: nerdypepper (~nerdypepp@user/nerdypepper) (*.net *.split)
[22:05:39] *** Quits: nek0 (~nek0@nek0.eu) (*.net *.split)
[22:05:39] *** Quits: img (~img@user/img) (*.net *.split)
[22:05:39] *** Quits: cyphase (~cyphase@user/cyphase) (*.net *.split)
[22:05:39] *** Quits: jiribenes (~jiribenes@rosa.jiribenes.com) (*.net *.split)
[22:05:39] *** Quits: tinwood (~tinwood@canonical/tinwood) (*.net *.split)
[22:05:39] *** Quits: acidsys (~LSD@2.lsd.systems) (*.net *.split)
[22:05:39] *** Quits: hook54321 (sid149355@user/hook54321) (*.net *.split)
[22:05:39] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[22:05:39] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (*.net *.split)
[22:05:39] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[22:05:39] *** Quits: yushyin (UhIHx5Z1ii@mail.karif.server-speed.net) (*.net *.split)
[22:05:39] *** Quits: duckonomy (~duckonomy@177.ip-144-217-84.net) (*.net *.split)
[22:05:39] *** Quits: drdo (~drdo@144.172.69.89) (*.net *.split)
[22:05:39] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (*.net *.split)
[22:05:39] *** Quits: matijja (~matijja@193.77.181.201) (*.net *.split)
[22:05:39] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[22:05:39] *** Quits: kmein (~weechat@user/kmein) (*.net *.split)
[22:05:39] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (*.net *.split)
[22:05:39] *** Quits: bsima (~bsima@2604:a880:400:d0::19f1:7001) (*.net *.split)
[22:05:39] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (*.net *.split)
[22:05:39] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (*.net *.split)
[22:05:39] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[22:05:39] *** Quits: L29Ah (~L29Ah@wikipedia/L29Ah) (*.net *.split)
[22:05:39] *** Quits: SquidDev (~SquidDev@autoclave.squiddev.cc) (*.net *.split)
[22:05:39] *** Quits: res0nat0r0 (~Fletch@dia.whatbox.ca) (*.net *.split)
[22:05:39] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[22:10:23] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[22:10:23] *** Joins: energizer (~energizer@user/energizer)
[22:10:23] *** Joins: adamCS (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com)
[22:10:23] *** Joins: travv0_ (sid293381@id-293381.helmsley.irccloud.com)
[22:10:23] *** Joins: arjun (~arjun@user/arjun)
[22:10:23] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[22:10:23] *** Joins: marienz__ (~marienz@libera/staff/marienz)
[22:10:23] *** Joins: janus__ (janus@anubis.0x90.dk)
[22:10:23] *** Joins: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com)
[22:10:23] *** Joins: dispater- (~dispater@user/brprice)
[22:10:23] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[22:10:23] *** Joins: pie__ (~pie_bnc@user/pie/x-2818909)
[22:10:23] *** Joins: derelict (~derelict@user/derelict)
[22:10:23] *** Joins: immae1 (~immae@2a01:4f8:141:53e7::)
[22:10:23] *** Joins: robbert-vdh (~robbert@robbertvanderhelm.nl)
[22:10:23] *** Joins: dixie_ (~dixie@real.wilbury.sk)
[22:10:23] *** Joins: [exa] (exa@user/exa/x-3587197)
[22:10:23] *** Joins: ts3 (~ts@46.101.20.9)
[22:10:23] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[22:10:23] *** Joins: kronicmage (user75299@neotame.csclub.uwaterloo.ca)
[22:10:23] *** Joins: aweinsto1k (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[22:10:23] *** Joins: welterde (welterde@thinkbase.srv.welterde.de)
[22:10:23] *** Joins: lisk1n (~liskin@xmonad/liskin)
[22:10:23] *** Joins: domcornloan (~mike@user/feetwind)
[22:10:23] *** Joins: tomjagua1paw (~tom@li367-225.members.linode.com)
[22:10:23] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:10:23] *** Joins: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae)
[22:10:23] *** Joins: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667)
[22:10:23] *** Joins: swistak- (~swistak@185.21.216.141)
[22:10:23] *** Joins: Arsen_ (arsen@managarm/dev/Arsen)
[22:10:23] *** Joins: xnyhps_ (~xnyhps@2a02:2770:3:0:216:3eff:fe67:3288)
[22:10:23] *** Joins: micro_ (~micro@user/micro)
[22:10:23] *** Joins: riatre_ (~quassel@2001:310:6000:f::5198:1)
[22:10:23] *** Joins: xnbya2 (~xnbya@2a01:4f8:c17:cbdd::1)
[22:10:23] *** Joins: hueso_ (~root@user/hueso)
[22:10:23] *** Joins: S11001001 (sid42510@ilkley.irccloud.com)
[22:10:23] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[22:10:23] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[22:10:23] *** Joins: hugo- (znc@verdigris.lysator.liu.se)
[22:10:23] *** Joins: nrr___ (sid20938@id-20938.lymington.irccloud.com)
[22:10:23] *** Joins: _0x47_ (sid508683@id-508683.tinside.irccloud.com)
[22:10:23] *** Joins: caasih (sid13241@id-13241.ilkley.irccloud.com)
[22:10:23] *** Joins: ehamberg (sid18208@id-18208.hampstead.irccloud.com)
[22:10:23] *** Joins: whez (sid470288@id-470288.lymington.irccloud.com)
[22:10:23] *** Joins: b20n (sid115913@id-115913.uxbridge.irccloud.com)
[22:10:23] *** Joins: lightandlight (sid135476@id-135476.helmsley.irccloud.com)
[22:10:23] *** Joins: jakesyl__ (sid56879@id-56879.hampstead.irccloud.com)
[22:10:23] *** Joins: sunarch (uid526836@user/sunarch)
[22:10:23] *** Joins: hexeme (~hexeme@user/hexeme)
[22:10:23] *** Joins: dragestil (~znc@user/dragestil)
[22:10:23] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[22:10:23] *** Joins: berberman_ (~berberman@user/berberman)
[22:10:23] *** Joins: integral (sid296274@user/integral)
[22:10:23] *** Joins: codedmart_ (codedmart@2600:3c01::f03c:92ff:fefe:8511)
[22:10:23] *** Joins: bbear_ (~znc@21212.s.t4vps.eu)
[22:10:23] *** Joins: philpax_ (sid516926@id-516926.lymington.irccloud.com)
[22:10:23] *** Joins: cawfee_ (~root@2406:3003:2077:2758::babe)
[22:10:23] *** Joins: gmc (sid58314@id-58314.ilkley.irccloud.com)
[22:10:23] *** Joins: defanor (~defanor@tart.uberspace.net)
[22:10:23] *** Joins: megaTherion_ (~therion@unix.io)
[22:10:23] *** Joins: davetapley (sid666@id-666.uxbridge.irccloud.com)
[22:10:23] *** Joins: degraafk (sid71464@id-71464.lymington.irccloud.com)
[22:10:23] *** Joins: lally (sid388228@id-388228.uxbridge.irccloud.com)
[22:10:23] *** Joins: glowcoil_ (sid3405@id-3405.tinside.irccloud.com)
[22:10:23] *** Joins: tnks (sid412124@id-412124.helmsley.irccloud.com)
[22:10:23] *** Joins: edmundnoble (sid229620@id-229620.helmsley.irccloud.com)
[22:10:23] *** Joins: Firedancer (sid336191@id-336191.hampstead.irccloud.com)
[22:10:23] *** Joins: rtpg (sid443069@id-443069.ilkley.irccloud.com)
[22:10:23] *** Joins: dunj3_ (~dunj3@kingdread.de)
[22:10:23] *** Joins: teehemkay_ (sid14792@id-14792.lymington.irccloud.com)
[22:10:23] *** Joins: gregberns__ (sid315709@id-315709.helmsley.irccloud.com)
[22:10:23] *** Joins: cpape` (~user@2a01:4f9:c010:632d::1)
[22:10:23] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[22:10:23] *** Joins: jkaye_ (~jkaye@2601:281:8300:7530:6a7d:d789:f2c1:154c)
[22:10:23] *** Joins: dagit3146 (~dagit@c-24-21-226-72.hsd1.or.comcast.net)
[22:10:23] *** Joins: phma_ (phma@2001:5b0:212a:9158:6d66:ed09:dec5:bdad)
[22:10:23] *** Joins: statusbot5 (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com)
[22:10:23] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:10:23] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[22:10:23] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:10:23] *** Joins: jgeerds__ (~jgeerds@55d4bbed.access.ecotel.net)
[22:10:23] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[22:10:23] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[22:10:23] *** Joins: benin (~benin@183.82.30.17)
[22:10:23] *** Joins: cheater (~Username@user/cheater)
[22:10:23] *** Joins: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net)
[22:10:23] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:10:23] *** Joins: pgib (~textual@173.38.117.86)
[22:10:23] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:10:23] *** Joins: unyu (~pyon@user/pyon)
[22:10:23] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:10:23] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[22:10:23] *** Joins: jakalx (~jakalx@base.jakalx.net)
[22:10:23] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[22:10:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:10:23] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[22:10:23] *** Joins: xsperry (~xs@user/xsperry)
[22:10:23] *** Joins: jacks- (~bc8147f2@cerf.good1.com)
[22:10:23] *** Joins: MironZ (~MironZ@nat-infra.ehlab.uk)
[22:10:23] *** Joins: schweers (~user@2001:16b8:e960:8100:aaa1:59ff:fe3f:235c)
[22:10:23] *** Joins: maerwald (~maerwald@user/maerwald)
[22:10:23] *** Joins: max22- (~maxime@2a01cb08833598009c1792461f3ff785.ipv6.abo.wanadoo.fr)
[22:10:23] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:10:23] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[22:10:23] *** Joins: shriekingnoise (~shrieking@181.229.0.83)
[22:10:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:567f:a71e:f346:c5f0)
[22:10:23] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:10:23] *** Joins: michalz (~michalz@185.246.204.101)
[22:10:23] *** Joins: pavonia (~user@user/siracusa)
[22:10:23] *** Joins: lechner (~lechner@debian/lechner)
[22:10:23] *** Joins: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2)
[22:10:23] *** Joins: siers (~ij@user/ij)
[22:10:23] *** Joins: random_ (~random@185.219.68.251)
[22:10:23] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[22:10:23] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:10:23] *** Joins: neurocyte09170 (~neurocyte@user/neurocyte)
[22:10:23] *** Joins: Alex_test (~al_test@178.34.151.107)
[22:10:23] *** Joins: AlexNoo (~AlexNoo@178.34.151.107)
[22:10:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:10:23] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[22:10:23] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[22:10:23] *** Joins: mmhat (~mmh@55d44405.access.ecotel.net)
[22:10:23] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:10:23] *** Joins: Aleksejs (~Aleksejs@haskell.lv)
[22:10:23] *** Joins: MasseR (~MasseR@51.15.143.128)
[22:10:23] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:10:23] *** Joins: haskl (~haskl@user/haskl)
[22:10:23] *** Joins: FragByte (~christian@user/fragbyte)
[22:10:23] *** Joins: notzmv (~zmv@user/notzmv)
[22:10:23] *** Joins: ubert (~Thunderbi@p200300ecdf0994b6cb4175acd0981d1c.dip0.t-ipconnect.de)
[22:10:23] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[22:10:23] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[22:10:23] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[22:10:23] *** Joins: sagax (~sagax_nb@user/sagax)
[22:10:23] *** Joins: sus (zero@user/zeromomentum)
[22:10:23] *** Joins: machinedgod (~machinedg@24.105.81.50)
[22:10:23] *** Joins: ephemient (uid407513@id-407513.lymington.irccloud.com)
[22:10:23] *** Joins: astra (sid289983@user/amish)
[22:10:23] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[22:10:23] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[22:10:23] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[22:10:23] *** Joins: chomwitt (~chomwitt@2a02:587:dc11:fb00:12c3:7bff:fe6d:d374)
[22:10:23] *** Joins: fef (~thedawn@user/thedawn)
[22:10:23] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[22:10:23] *** Joins: monochrom (trebla@216.138.220.146)
[22:10:23] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[22:10:23] *** Joins: tremon (~tremon@217-120-53-183.cable.dynamic.v4.ziggo.nl)
[22:10:23] *** Joins: tristanC (~tristanC@user/tristanc)
[22:10:23] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[22:10:23] *** Joins: xstill- (xstill@fimu/xstill)
[22:10:23] *** Joins: aku_ (~aku@163.172.137.34)
[22:10:23] *** Joins: hyiltiz_ (~quassel@31.220.5.250)
[22:10:23] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca)
[22:10:23] *** Joins: forell (~forell@user/forell)
[22:10:23] *** Joins: sander (~sander@user/sander)
[22:10:23] *** Joins: lemonsni- (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[22:10:23] *** Joins: SoF (~skius@user/skius)
[22:10:23] *** Joins: mrmr (~mrmr@user/mrmr)
[22:10:23] *** Joins: mcglk_ (~mcglk@131.191.49.120)
[22:10:23] *** Joins: polux (~polux@51.15.169.172)
[22:10:23] *** Joins: Kaipi (~Kaiepi@156.34.47.253)
[22:10:23] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[22:10:23] *** Joins: vicfred (~vicfred@user/vicfred)
[22:10:23] *** Joins: rembo10 (~rembo10@remulis.com)
[22:10:23] *** Joins: ishutin (~ishutin@91-83-11-240.pool.digikabel.hu)
[22:10:23] *** Joins: td_ (~td@94.134.91.149)
[22:10:23] *** Joins: EsoAlgo4 (~EsoAlgo@152.70.142.52)
[22:10:23] *** Joins: Cajun (~Cajun@user/cajun)
[22:10:23] *** Joins: califax (~califax@user/califx)
[22:10:23] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[22:10:23] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:10:23] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[22:10:23] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:10:23] *** Joins: dut (~dut@user/dut)
[22:10:23] *** Joins: qhong_ (~qhong@rescomp-21-400677.stanford.edu)
[22:10:23] *** Joins: simpleauthority (~simpleaut@user/simpleauthority)
[22:10:23] *** Joins: juhp (~juhp@128.106.188.82)
[22:10:23] *** Joins: Athas (~athas@sigkill.dk)
[22:10:23] *** Joins: jonathanx__ (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se)
[22:10:23] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[22:10:23] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[22:10:23] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[22:10:23] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[22:10:23] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[22:10:23] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[22:10:23] *** Joins: gabiruh (~gabiruh@vps19177.publiccloud.com.br)
[22:10:23] *** Joins: raym (~raym@user/raym)
[22:10:23] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[22:10:23] *** Joins: raoul (~raoul@95.179.203.88)
[22:10:23] *** Joins: gdd (~gdd@129.199.146.230)
[22:10:23] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[22:10:23] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[22:10:23] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:10:23] *** Joins: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4)
[22:10:23] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[22:10:23] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[22:10:23] *** Joins: dyniec (~dyniec@mail.dybiec.info)
[22:10:23] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[22:10:23] *** Joins: litharge (litharge@libera/bot/litharge)
[22:10:23] *** Joins: yahb (xsbot@user/mniip/bot/yahb)
[22:10:23] *** Joins: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4)
[22:10:23] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[22:10:23] *** Joins: Taneb (~Taneb@runciman.hacksoc.org)
[22:10:23] *** Joins: hololeap (~hololeap@user/hololeap)
[22:10:23] *** Joins: wagle (~wagle@quassel.wagle.io)
[22:10:23] *** Joins: juri_ (~juri@178.63.35.222)
[22:10:23] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[22:10:23] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[22:10:23] *** Joins: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f89b:2c73:97b1:7ba3)
[22:10:23] *** Joins: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71)
[22:10:23] *** Joins: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5)
[22:10:23] *** Joins: jassob (~jassob@h-155-4-71-72.A785.priv.bahnhof.se)
[22:10:23] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[22:10:23] *** Joins: srk (~sorki@user/srk)
[22:10:23] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[22:10:23] *** Joins: justIrresolute (~justache@user/justache)
[22:10:23] *** Joins: kitzman (~kitzman@user/dekenevs)
[22:10:23] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[22:10:23] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[22:10:23] *** Joins: stvc (~stvc@192.241.166.39)
[22:10:23] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[22:10:23] *** Joins: Sqaure (~a@user/square)
[22:10:23] *** Joins: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9)
[22:10:23] *** Joins: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org)
[22:10:23] *** Joins: anderson (~ande@user/anderson)
[22:10:23] *** Joins: zero (~z@user/zero)
[22:10:23] *** Joins: haritz (~hrtz@user/haritz)
[22:10:23] *** Joins: a1paca (~a1paca@user/a1paca)
[22:10:23] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[22:10:23] *** Joins: fluxit (~fluxit@techsmix.net)
[22:10:23] *** Joins: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[22:10:23] *** Joins: xerox (~edi@user/edi)
[22:10:23] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[22:10:23] *** Joins: AWizzArd (~code@gehrels.uberspace.de)
[22:10:23] *** Joins: Philonous (~Philonous@user/philonous)
[22:10:23] *** Joins: clever (~clever@99.192.114.98)
[22:10:23] *** Joins: c_wraith (~c_wraith@adjoint.us)
[22:10:23] *** Joins: nerdypepper (~nerdypepp@user/nerdypepper)
[22:10:23] *** Joins: edr (~edr@user/edr)
[22:10:23] *** Joins: nek0 (~nek0@nek0.eu)
[22:10:23] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[22:10:23] *** Joins: img (~img@user/img)
[22:10:23] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[22:10:23] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[22:10:23] *** Joins: Deide (~deide@user/deide)
[22:10:23] *** Joins: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8)
[22:10:23] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[22:10:23] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[22:10:23] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[22:10:23] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[22:10:23] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[22:10:23] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[22:10:23] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[22:10:23] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[22:10:23] *** Joins: jinsun_ (~jinsun@user/jinsun)
[22:10:23] *** Joins: sm (~sm@plaintextaccounting/sm)
[22:10:23] *** Joins: flupe (~baboum@radon.sbi.re)
[22:10:23] *** Joins: nf (~n@monade.li)
[22:10:23] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[22:10:23] *** Joins: cyphase (~cyphase@user/cyphase)
[22:10:23] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[22:10:23] *** Joins: widelec-BB (~widelec@cpe-109-207-144-181.docsis.tczew.net.pl)
[22:10:23] *** Joins: douglaswinship (~douglaswi@78.40.148.180)
[22:10:23] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[22:10:23] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[22:10:23] *** Joins: tinwood (~tinwood@canonical/tinwood)
[22:10:23] *** Joins: tomku (~tomku@user/tomku)
[22:10:23] *** Joins: xbreu (~xbreu@2001:470:69fc:105::1:5061)
[22:10:23] *** Joins: codygman[m] (~codygman@2001:470:69fc:105::b4ba)
[22:10:23] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[22:10:23] *** Joins: psydroid (~psydroid@user/psydroid)
[22:10:23] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[22:10:23] *** Joins: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d)
[22:10:23] *** Joins: Nate[m]1 (~m52957mat@2001:470:69fc:105::1:591a)
[22:10:23] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[22:10:23] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[22:10:23] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[22:10:23] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[22:10:23] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[22:10:23] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[22:10:23] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[22:10:23] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[22:10:23] *** Joins: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164)
[22:10:23] *** Joins: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203)
[22:10:23] *** Joins: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0)
[22:10:23] *** Joins: boxscape (~boxscape@user/boxscape)
[22:10:23] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[22:10:23] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[22:10:23] *** Joins: nomeata (~nomeata@2001:470:69fc:105::1:5ed4)
[22:10:23] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[22:10:23] *** Joins: Tisoxin (~ikosit@user/ikosit)
[22:10:23] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[22:10:23] *** Joins: jkachmar (~jkachmar@2001:470:69fc:105::c72d)
[22:10:23] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[22:10:23] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[22:10:23] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[22:10:23] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[22:10:23] *** Joins: kadoban (~kadoban@user/kadoban)
[22:10:23] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[22:10:23] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[22:10:23] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[22:10:23] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[22:10:23] *** Joins: siraben (~siraben@user/siraben)
[22:10:23] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[22:10:23] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[22:10:23] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[22:10:23] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[22:10:23] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[22:10:23] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[22:10:23] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[22:10:23] *** Joins: grabb0id[m] (~alangmatr@2001:470:69fc:105::b489)
[22:10:23] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[22:10:23] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[22:10:23] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[22:10:23] *** Joins: moats (~oats@user/oats)
[22:10:23] *** Joins: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f)
[22:10:23] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[22:10:23] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[22:10:23] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[22:10:23] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[22:10:23] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[22:10:23] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[22:10:23] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[22:10:23] *** Joins: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72)
[22:10:23] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[22:10:23] *** Joins: alex[m] (~alexchete@2001:470:69fc:105::1:1001)
[22:10:23] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[22:10:23] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[22:10:23] *** Joins: benjamin[m]1234 (~benjaminm@2001:470:69fc:105::1:3f2f)
[22:10:23] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[22:10:23] *** Joins: IgnatInsarov[m] (~kindaroma@2001:470:69fc:105::f5d9)
[22:10:23] *** Joins: simmsb (~simmsb@2001:470:69fc:105::1:55c3)
[22:10:23] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[22:10:23] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[22:10:23] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[22:10:23] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[22:10:23] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[22:10:23] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[22:10:23] *** Joins: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da)
[22:10:23] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[22:10:23] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[22:10:23] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[22:10:23] *** Joins: acidsys (~LSD@2.lsd.systems)
[22:10:23] *** Joins: hook54321 (sid149355@user/hook54321)
[22:10:23] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[22:10:23] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[22:10:23] *** Joins: wolfshappen (~waff@irc.furworks.de)
[22:10:23] *** Joins: meejah (~meejah@rutas.meejah.ca)
[22:10:23] *** Joins: sajith (~sajith@user/sajith)
[22:10:23] *** Joins: Ram-Z (~Ram-Z@li1814-254.members.linode.com)
[22:10:23] *** Joins: spoonm (spoonm@inaba.spoonm.org)
[22:10:23] *** Joins: bcoppens (~bartcopp@vpn2.bartcoppens.be)
[22:10:23] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[22:10:23] *** Joins: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de)
[22:10:23] *** Joins: Teacup (~teacup@user/teacup)
[22:10:23] *** Joins: shanemikel (~shanemike@desk.roadwar.net)
[22:10:23] *** Joins: heath (~heath@user/heath)
[22:10:23] *** Joins: barrucadu (~barrucadu@carcosa.barrucadu.co.uk)
[22:10:23] *** Joins: Brandon_1X (~brandon@178-79-138-117.ip.linodeusercontent.com)
[22:10:23] *** Joins: drewolson (~drewolson@user/drewolson)
[22:10:23] *** Joins: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de)
[22:10:23] *** Joins: joeyh_ (~joeyh@kitenet.net)
[22:10:23] *** Joins: myme (~myme@40.51-175-185.customer.lyse.net)
[22:10:23] *** Joins: hltk (~hltk@hltk.fi)
[22:10:23] *** Joins: jeffz (~user@lambda.xen.prgmr.com)
[22:10:23] *** Joins: tv (~tv@user/tv)
[22:10:23] *** Joins: exarkun (~exarkun@user/exarkun)
[22:10:23] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[22:10:23] *** Joins: df (~ben@justworks.xyz)
[22:10:23] *** Joins: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net)
[22:10:23] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[22:10:23] *** Joins: jjhoo (~jahakala@user/jjhoo)
[22:10:23] *** Joins: nhs (~nhs@136.49.226.20)
[22:10:23] *** Joins: foul_owl (~kerry@94.140.8.107)
[22:10:23] *** Joins: canta (~canta@user/canta)
[22:10:23] *** Joins: bollu (~bollu@159.65.151.13)
[22:10:23] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[22:10:23] *** Joins: eL_Bart0 (eL_Bart0@dietunichtguten.org)
[22:10:23] *** Joins: m1dnight (~christoph@christophe.dev)
[22:10:23] *** Joins: mniip (mniip@libera/staff/mniip)
[22:10:23] *** Joins: enyc (~enyc@user/enyc)
[22:10:23] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[22:10:23] *** Joins: Jon (jon@dow.land)
[22:10:23] *** Joins: pierrot (~pi@user/pierrot)
[22:10:23] *** Joins: vito (sid1962@user/vito)
[22:10:23] *** Joins: smorgasbord (buggy@user/smorgasbord)
[22:10:23] *** Joins: grfn (sid449115@id-449115.helmsley.irccloud.com)
[22:10:23] *** Joins: rune (sid21167@id-21167.ilkley.irccloud.com)
[22:10:23] *** Joins: Adeon (sid418992@id-418992.lymington.irccloud.com)
[22:10:23] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[22:10:23] *** Joins: dpratt__ (sid193493@id-193493.helmsley.irccloud.com)
[22:10:23] *** Joins: Xe (~cadey@tailscale/xe)
[22:10:23] *** Joins: bonz060 (~quassel@2001:bc8:47a4:a23::1)
[22:10:23] *** Joins: ptrcmd (~ptrcmd@user/ptrcmd)
[22:10:23] *** Joins: ggVGc (~ggVGc@a.lowtech.earth)
[22:10:23] *** Joins: SIben (~SIben@ns3106586.ip-5-135-191.eu)
[22:10:23] *** Joins: lyxia (~lyxia@poisson.chat)
[22:10:23] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[22:10:23] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[22:10:23] *** Joins: davl (~davl@207.154.228.18)
[22:10:23] *** Joins: evanrelf (3addc196af@2604:bf00:561:2000::f0)
[22:10:23] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[22:10:23] *** Joins: xacktm (xacktm@user/xacktm)
[22:10:23] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[22:10:23] *** Joins: acro (~acro@user/acro)
[22:10:23] *** Joins: Vq (~vq@90-227-195-41-no77.tbcn.telia.com)
[22:10:23] *** Joins: m4lvin (~m4lvin@w4eg.de)
[22:10:23] *** Joins: urdh (~urdh@user/urdh)
[22:10:23] *** Joins: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2)
[22:10:23] *** Joins: Putonlalla (~sapekiis@it-cyan.it.jyu.fi)
[22:10:23] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[22:10:23] *** Joins: amk (~amk@109.255.169.126)
[22:10:23] *** Joins: Noinia (~Frank@77-162-168-71.fixed.kpn.net)
[22:10:23] *** Joins: thebnq (~bnq@herrokitty.com)
[22:10:23] *** Joins: samhh (7569f027cf@2604:bf00:561:2000::e4)
[22:10:23] *** Joins: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi)
[22:10:23] *** Joins: Unode (~Unode@194.94.44.220)
[22:10:23] *** Joins: Goodbye_Vincent (cyvahl@freakshells.net)
[22:10:23] *** Joins: int-e (~noone@int-e.eu)
[22:10:23] *** Joins: bwe (~bwe@2a01:4f8:1c1c:4878::2)
[22:10:23] *** Joins: drlkf (~drlkf@2001:41d0:a:62bb::1)
[22:10:23] *** Joins: spider__ (~spider@vps-951ce37a.vps.ovh.ca)
[22:10:23] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[22:10:23] *** Joins: christiaanb (sid84827@id-84827.lymington.irccloud.com)
[22:10:23] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[22:10:23] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[22:10:23] *** Joins: gnyeki (~gnyeki@user/gnyeki)
[22:10:23] *** Joins: jackdk (sid373013@cssa/jackdk)
[22:10:23] *** Joins: typetetris (sid275937@id-275937.tinside.irccloud.com)
[22:10:23] *** Joins: sa1_ (sid7690@id-7690.ilkley.irccloud.com)
[22:10:23] *** Joins: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com)
[22:10:23] *** Joins: idnar (sid12240@debian/mithrandi)
[22:10:23] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[22:10:23] *** Joins: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com)
[22:10:23] *** Joins: shane (~shane@ana.rch.ist)
[22:10:23] *** Joins: pippijn (~pippijn@ra.xinutec.org)
[22:10:23] *** Joins: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net)
[22:10:23] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[22:10:23] *** Joins: tritlo (sid58727@user/tritlo)
[22:10:23] *** Joins: davean (~davean@davean.sciesnet.net)
[22:10:23] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[22:10:23] *** Joins: gonz_____ (sid304396@id-304396.lymington.irccloud.com)
[22:10:23] *** Joins: obviyus (sid415299@user/obviyus)
[22:10:23] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[22:10:23] *** Joins: sweater (~sweater@206.81.18.26)
[22:10:23] *** Joins: arkeet (~arkeet@moriya.ca)
[22:10:23] *** Joins: OscarH_ (~OscarH@90.201.86.195)
[22:10:23] *** Joins: piele (~piele@tbonesteak.creativeserver.net)
[22:10:23] *** Joins: hiredman (~hiredman@frontier1.downey.family)
[22:10:23] *** Joins: teddyc (theodorc@cassarossa.samfundet.no)
[22:10:23] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[22:10:23] *** Joins: orcus (~orcus@user/brprice)
[22:10:23] *** Joins: quintasan (~quassel@quintasan.pl)
[22:10:23] *** Joins: glider (~glider@user/glider)
[22:10:23] *** Joins: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net)
[22:10:23] *** Joins: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001)
[22:10:23] *** Joins: relrod (~relrod@redhat/ansible.staff.relrod)
[22:10:23] *** Joins: Unhammer (~Unhammer@user/unhammer)
[22:10:23] *** Joins: dfg (dfg@user/dfg)
[22:10:23] *** Joins: Ferdirand (~somebody@2001:4c78:2012:5000::2)
[22:10:23] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[22:10:23] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[22:10:23] *** Joins: averell (~averell@user/averell)
[22:10:23] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[22:10:23] *** Joins: bgamari_ (~bgamari@2001:470:e438::1)
[22:10:23] *** Joins: cln (sid336875@id-336875.ilkley.irccloud.com)
[22:10:23] *** Joins: feliix42 (~felix@gibbs.uberspace.de)
[22:10:23] *** Joins: scav (sid309693@id-309693.helmsley.irccloud.com)
[22:10:23] *** Joins: bw (sid2730@user/betawaffle)
[22:10:23] *** Joins: bbhoss (sid18216@id-18216.tinside.irccloud.com)
[22:10:23] *** Joins: Trattue (~Trattue@152.70.182.158)
[22:10:23] *** Joins: _________ (~nobody@user/noodly)
[22:10:23] *** Joins: robertm (robertm@lattice.rojoma.com)
[22:10:23] *** Joins: kosmikus (~kosmikus@nullzig.kosmikus.org)
[22:10:23] *** Joins: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0)
[22:10:23] *** Joins: blades (~blades@204.48.29.163)
[22:10:23] *** Joins: ellie (~ellie@user/ellie)
[22:10:23] *** Joins: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at)
[22:10:23] *** Joins: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com)
[22:10:23] *** Joins: p3n (~p3n@217.198.124.246)
[22:10:23] *** Joins: sshine (~simon@hubris.eta.solutions)
[22:10:23] *** Joins: cjay- (cjay@nerdbox.nerd2nerd.org)
[22:10:23] *** Joins: oats (~thomas@user/oats)
[22:10:23] *** Joins: notabled1 (~notabledu@ares.dbalan.in)
[22:10:23] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[22:10:23] *** Joins: lukec (9dfd4d094e@2604:bf00:561:2000::10e)
[22:10:23] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[22:10:23] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[22:10:23] *** Joins: jkoshy (99b9359beb@2604:bf00:561:2000::10f)
[22:10:23] *** Joins: AndreasK (sid320732@2a03:5180:f:5::4:e4dc)
[22:10:23] *** Joins: hendi (sid489601@2a03:5180:f:2::7:7881)
[22:10:23] *** Joins: jonrh (sid5185@2a03:5180:f:3::1441)
[22:10:23] *** Joins: taktoa[c] (sid282096@2a03:5180:f::4:4df0)
[22:10:23] *** Joins: aria (sid380617@2a03:5180:f:2::5:cec9)
[22:10:23] *** Joins: tired (~tired@user/tired)
[22:10:23] *** Joins: noctux (~noctux@user/noctux)
[22:10:23] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[22:10:23] *** Joins: sm2n (ae95cb1267@user/sm2n)
[22:10:23] *** Joins: WhateverRabbit (~rabbit@206.81.18.26)
[22:10:23] *** Joins: noctuks (7vrDyCK6LH@user/noctux)
[22:10:23] *** Joins: AkechiShiro (~licht@user/akechishiro)
[22:10:23] *** Joins: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1)
[22:10:23] *** Joins: tafa (~tafa@user/tafa)
[22:10:23] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[22:10:23] *** Joins: jocke-l (jocke-l@a.x0.is)
[22:10:23] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[22:10:23] *** Joins: deni (~deni@user/deni)
[22:10:23] *** Joins: nshepperd2 (~nshepperd@li364-218.members.linode.com)
[22:10:23] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[22:10:23] *** Joins: hexagoxel (~hexagoxel@2a01:4f8:c0c:e::2)
[22:10:23] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[22:10:23] *** Joins: oxytocat (~alloca@user/suppi)
[22:10:23] *** Joins: ringo__ (~ringo@157.230.117.128)
[22:10:23] *** Joins: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec)
[22:10:23] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[22:10:23] *** Joins: bsdbandit (~bwell@users.757.org)
[22:10:23] *** Joins: parseval (sid239098@id-239098.helmsley.irccloud.com)
[22:10:23] *** Joins: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com)
[22:10:23] *** Joins: amir (sid22336@user/amir)
[22:10:23] *** Joins: Moyst_ (~moyst@user/moyst)
[22:10:23] *** Joins: chronon (~chronon@user/chronon)
[22:10:23] *** Joins: auri (~quassel@fsf/member/auri)
[22:10:23] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[22:10:23] *** Joins: bens (~bens@www.typius.com)
[22:10:23] *** Joins: dfordvm (~dfordivam@tk2-219-19469.vs.sakura.ne.jp)
[22:10:23] *** Joins: peutri (~peutri@ns317027.ip-94-23-46.eu)
[22:10:23] *** Joins: samebchase (~samebchas@51.15.68.182)
[22:10:23] *** Joins: finsternis (~X@23.226.237.192)
[22:10:23] *** Joins: rookie101 (~rookie@165.232.121.13)
[22:10:23] *** Joins: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com)
[22:10:23] *** Joins: niko (~niko@libera/staff/niko)
[22:10:23] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[22:10:23] *** Joins: PigDude (~PigDude@159.203.16.199)
[22:10:23] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[22:10:23] *** Joins: guibou (~guibou@mail.fmap.fr)
[22:10:23] *** Joins: alp (~alp@mail.fmap.fr)
[22:10:23] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[22:10:23] *** Joins: bah (~bah@l1.tel)
[22:10:23] *** Joins: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg)
[22:10:23] *** Joins: tureba (~tureba@tureba.org)
[22:10:23] *** Joins: mcfilib (sid302703@user/mcfilib)
[22:10:23] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[22:10:23] *** Joins: sudden (~cat@user/sudden)
[22:10:23] *** Joins: smunix (~smunix@static.26.70.12.49.clients.your-server.de)
[22:10:23] *** Joins: lieven (~mal@ns2.wyrd.be)
[22:10:23] *** Joins: nonzen (~nonzen@user/nonzen)
[22:10:23] *** Joins: PHO` (~pho@akari.cielonegro.org)
[22:10:23] *** Joins: teehemkay (sid14792@id-14792.lymington.irccloud.com)
[22:10:23] *** Joins: ouroboros (~ouroboros@user/ouroboros)
[22:10:23] *** Joins: APic (apic@apic.name)
[22:10:23] *** Joins: |beowulf| (1000@sourcemage/mage/beowulf)
[22:10:23] *** Joins: mncheck (~mncheck@193.224.205.254)
[22:10:23] *** Joins: Flow (~none@gentoo/developer/flow)
[22:10:23] *** Joins: ajb_ (~ajb@cupid.whatbox.ca)
[22:10:23] *** Joins: wallymathieu (uid533252@id-533252.uxbridge.irccloud.com)
[22:10:23] *** Joins: pepeiborra (sid443799@id-443799.ilkley.irccloud.com)
[22:10:23] *** Joins: martin02 (~silas@2001:4ca0:0:fe00:0:5efe:a96:1bc1)
[22:10:23] *** Joins: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001)
[22:10:23] *** Joins: lisq (~quassel@lis.moe)
[22:10:23] *** Joins: edwtjo (~edwtjo@user/edwtjo)
[22:10:23] *** Joins: nckx (~nckx@tobias.gr)
[22:10:23] *** Joins: adium (adium@user/adium)
[22:10:23] *** Joins: kaol (~kaol@94-237-42-30.nl-ams1.upcloud.host)
[22:10:23] *** Joins: Rembane (~Rembane@li346-36.members.linode.com)
[22:10:23] *** Joins: _\_ (~o@user/ding)
[22:10:23] *** Joins: shachaf (~shachaf@user/shachaf)
[22:10:23] *** Joins: statusfailed (~statusfai@statusfailed.com)
[22:10:23] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[22:10:23] *** Joins: dy (~dy@user/dy)
[22:10:23] *** Joins: reda_ (~reda@user/reda)
[22:10:23] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[22:10:23] *** Joins: T_S_ (sid501726@id-501726.uxbridge.irccloud.com)
[22:10:23] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[22:10:23] *** Joins: aristid (sid1599@id-1599.uxbridge.irccloud.com)
[22:10:23] *** Joins: Igloo (~ian@matrix.chaos.earth.li)
[22:10:23] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[22:10:23] *** Joins: Hecate (~mariposa@user/hecate)
[22:10:23] *** Joins: bjobjo (~bjobjo@user/bjobjo)
[22:10:23] *** Joins: asm (~alexander@user/asm)
[22:10:23] *** Joins: alinab (sid468903@helmsley.irccloud.com)
[22:10:23] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[22:10:23] *** Joins: bradparker (sid262931@id-262931.uxbridge.irccloud.com)
[22:10:23] *** Joins: jakzale (6291399afa@user/jakzale)
[22:10:23] *** Joins: ikke (~kevin@alpine/developer/ikke)
[22:10:23] *** Joins: systemfault (sid267009@id-267009.uxbridge.irccloud.com)
[22:10:23] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[22:10:23] *** Joins: Benzi-Junior (~BenziJuni@dsl-149-66-61.hive.is)
[22:10:23] *** Joins: DigitalKiwi (~kiwi@2604:a880:400:d0::12fc:5001)
[22:10:23] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[22:10:23] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[22:10:23] *** Joins: truckasaurus (sid457088@id-457088.helmsley.irccloud.com)
[22:10:23] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[22:10:23] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[22:10:23] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[22:10:23] *** Joins: yushyin (UhIHx5Z1ii@mail.karif.server-speed.net)
[22:10:23] *** Joins: res0nat0r0 (~Fletch@dia.whatbox.ca)
[22:10:23] *** Joins: SquidDev (~SquidDev@autoclave.squiddev.cc)
[22:10:23] *** Joins: L29Ah (~L29Ah@wikipedia/L29Ah)
[22:10:23] *** Joins: leah2 (~leah@vuxu.org)
[22:10:23] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[22:10:23] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[22:10:23] *** Joins: bsima (~bsima@2604:a880:400:d0::19f1:7001)
[22:10:23] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[22:10:23] *** Joins: kmein (~weechat@user/kmein)
[22:10:23] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:10:23] *** Joins: matijja (~matijja@193.77.181.201)
[22:10:23] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[22:10:23] *** Joins: drdo (~drdo@144.172.69.89)
[22:10:23] *** Joins: duckonomy (~duckonomy@177.ip-144-217-84.net)
[22:10:23] *** Joins: ChanServ (ChanServ@services.libera.chat)
[22:10:23] *** molybdenum.libera.chat sets mode: +o ChanServ
[22:10:31] *** Joins: emf (~emf@2620:10d:c090:400::5:3f1)
[22:10:31] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:7d45:c5da:471f:1879)
[22:10:32] *** Quits: pie__ (~pie_bnc@user/pie/x-2818909) (Ping timeout: 263 seconds)
[22:10:32] *** Joins: Adran (~adran@botters/adran)
[22:10:33] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:10:34] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[22:10:35] *** Joins: ystael (~ystael@user/ystael)
[22:10:41] *** Joins: Ekho- (~Ekho@user/ekho)
[22:12:08] *** Joins: earthy (~arthurvl@2001:984:275b:1:ba27:ebff:fea0:40b0)
[22:12:10] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[22:12:13] *** Joins: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org)
[22:12:14] *** Joins: iphy (sid67735@id-67735.lymington.irccloud.com)
[22:12:18] *** Joins: g (x@libera/staff/glguy)
[22:12:20] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[22:13:03] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:13:07] *** Quits: swistak- (~swistak@185.21.216.141) (Ping timeout: 256 seconds)
[22:13:54] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[22:14:13] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:15:43] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:17:47] *** Joins: swistak (~swistak@185.21.216.141)
[22:17:54] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:17:55] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[22:21:10] *** Joins: prite (~pritam@user/pritambaral)
[22:22:56] *** Joins: trillp (~trillp@69.233.98.238)
[22:26:21] *** nefercheprure is now known as TMA
[22:27:42] <arjun> -qg
[22:30:10] *** Quits: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net) (Quit: Leaving)
[22:30:49] <[itchyjunk]> i find this example from a book to be so crazy and neat
[22:30:50] <[itchyjunk]> https://bpa.st/XAFA
[22:30:57] <[itchyjunk]> id never have thought of it
[22:31:35] *** Quits: max22- (~maxime@2a01cb08833598009c1792461f3ff785.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[22:31:49] <ephemient> well, that's the trivial translation of idea of quicksort into Haskell
[22:32:08] *** Parts: trillp (~trillp@69.233.98.238) (WeeChat 3.3)
[22:32:43] <int-e> emphasis on *idea*
[22:34:37] *** Quits: prite (~pritam@user/pritambaral) (Ping timeout: 250 seconds)
[22:34:40] *** Joins: pritambaral (~pritam@user/pritambaral)
[22:35:00] <ephemient> yeah, its shortcomings have been discussed in many places
[22:36:30] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[22:36:51] *** Joins: acidjnk (~acidjnk@2001:16b8:6743:e100:9926:5e7c:ff5d:ab3b)
[22:37:09] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:37:46] *** Joins: cosimone` (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[22:39:58] *** lisk1n is now known as liskin
[22:41:25] *** Arsen_ is now known as Arsen
[22:44:02] *** Quits: acidjnk (~acidjnk@2001:16b8:6743:e100:9926:5e7c:ff5d:ab3b) (Ping timeout: 252 seconds)
[22:46:57] *** Quits: zaquest (~notzaques@5.130.79.72) (Ping timeout: 240 seconds)
[22:47:34] <byorgey> it's still a neat idea though!
[22:47:36] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:49:19] <monochrom> I am beginning to be of the opinion of s/idea of//
[22:49:34] <monochrom> But not very strongly.
[22:49:56] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[22:50:20] <monochrom> My overarching opinion is that people have too strong opinions on what aspect of an algorithm to focus on.
[22:52:19] <monochrom> I teach quicksort by emphasizing the divide-and-conquer aspect. Everything else you say (going out of your way to choose a pivot, going out of your way to use no temp memory), I consider details of [premature] optimizations.
[22:52:48] <int-e> well... you have linked lists, you shouldn't be using quicksort
[22:53:04] <monochrom> Without such distracting [and premature] optimizations, the simple Haskell code is quicksort.
[22:53:10] <int-e> the optimizations for in-place sorting of arrays are the only redeeming features
[22:53:11] *** phma_ is now known as phma
[22:53:20] <int-e> that quicksort has
[22:54:11] * geekosaur is tempted to say "you have linked lists, you shouldn't be using sort"
[22:54:19] <monochrom> haha
[22:54:32] <int-e> yeah, a defensible position
[22:55:18] *** Joins: econo (uid147250@user/econo)
[22:55:34] <int-e> 100000 elements is a short list, right? :-P
[22:56:47] *** Joins: zaquest (~notzaques@5.130.79.72)
[22:57:27] <int-e> Also, for whatever reason, I like the basic bottom-up merge sort (that's dynamically a heap sort).
[22:58:01] *** Quits: arjun (~arjun@user/arjun) (Quit: Leaving)
[22:59:47] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:00:15] *** Joins: Guest|25 (~Guest|25@137.205.0.148)
[23:00:18] <int-e> > let merge (x:xs) (y:ys) | x < y = x : merge xs (y:ys) | otherwise = y : merge (x:xs) ys; merge xs [] = xs; merge [] ys = ys; mergePairs (xs:ys:xss) = merge xs ys:mergePairs xss; mergePairs xss = xss; mergeAll [xs] = xs; mergeAll xss = mergeAll (mergePairs xss); sort = mergeAll . map pure in sort [1,42,3,5,111,-40,3]
[23:00:19] <lambdabot>  [-40,1,3,3,5,42,111]
[23:00:30] <int-e> . o O ( quite a mouthful )
[23:01:12] <int-e> and missing a base case for the empty list
[23:02:11] <int-e> (mergeAll [] = [])
[23:03:20] *** Quits: Guest|25 (~Guest|25@137.205.0.148) (Client Quit)
[23:05:06] <EvanR> sorting lists is easy if it's made of sorted lists
[23:05:26] *** carter_ is now known as carter
[23:05:34] <monochrom> "factorizing prime numbers"
[23:05:44] <EvanR> yeah!
[23:06:00] *** Joins: max22- (~maxime@2a01cb0883359800d1e94aeeb9e074b6.ipv6.abo.wanadoo.fr)
[23:06:05] <int-e> > map pure [1,42,3,5,111,-40,3] -- look I've turned my 7 element list into 7 sorted lists!
[23:06:06] <lambdabot>  error:
[23:06:06] <lambdabot>      • Ambiguous type variable ‘f0’ arising from a use of ‘show_M485853337499...
[23:06:06] <lambdabot>        prevents the constraint ‘(Show (f0 Integer))’ from being solved.
[23:06:11] <int-e> meh
[23:06:20] <int-e> > map pure [1,42,3,5,111,-40,3] :: [[Int]]
[23:06:22] <lambdabot>  [[1],[42],[3],[5],[111],[-40],[3]]
[23:06:25] <EvanR> lol
[23:06:27] <int-e> I should've used (:[])
[23:07:14] <int-e> (especially in these times where everyone seems to be collecting ugly looking apes)
[23:10:43] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:12:37] *** Joins: schuelermine (~schuelerm@user/schuelermine)
[23:12:48] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[23:13:36] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Client Quit)
[23:14:00] <schuelermine> Is it intentional that you can't do polymorphic implicit parameters, even w/ QuantifiedConstraints & ImpredicaticeTypes?
[23:14:49] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[23:16:00] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[23:18:33] <schuelermine> i.e.:
[23:18:33] <schuelermine> let ?id = \x -> x in (?id True, ?id ()) :: (Bool, ()) …errors out, it specializes it to () -> ()
[23:22:51] <schuelermine> Even providing the explicit signatures doesn't work!
[23:22:51] <schuelermine> x = ?f () + ?f []
[23:22:52] <schuelermine> x :: forall n. (Num n, ?f::(forall t. t -> n)) => n
[23:22:52] <schuelermine> --also errors out
[23:23:55] *** Quits: ystael (~ystael@user/ystael) (Read error: Connection reset by peer)
[23:24:15] *** Joins: zeikuzeta (~zeta@2a01cb0c04a54500f006e2422b3c8b06.ipv6.abo.wanadoo.fr)
[23:24:20] <int-e> it's impredicative, you'd have to wrap it into a datatype (newtype works):  newtype Id = Id { unId :: forall a. a -> a }; f :: (?id :: Id) => (Bool, ()); f = (unId ?id True, unId ?id ())
[23:24:24] <int-e> ugh
[23:25:02] *** Joins: talismanick (~talismani@c-67-164-73-220.hsd1.ca.comcast.net)
[23:26:53] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[23:27:07] <schuelermine> but ImpredicaticeTypes exists
[23:27:21] <schuelermine> (this is Ghc 9.2.1)
[23:28:42] <int-e> well evidently it's not as robust as advertised
[23:29:32] *** Quits: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk) (Remote host closed the connection)
[23:29:46] <geekosaur> tempted too ask if you misspelled it in the pragma too
[23:31:53] *** Quits: schuelermine (~schuelerm@user/schuelermine) (Ping timeout: 256 seconds)
[23:32:35] *** Joins: ystael (~ystael@user/ystael)
[23:32:44] <geekosaur> also I think just having ImpredicativeTypes on doesn't mean you can dispense with the wrapper. but they're gone…
[23:34:37] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:34:37] <lyxia> Isn't that the point of the extension? (I mean I also get that ImplicitParams is janky.)
[23:35:09] *** Joins: Guest19 (~Guest19@098-147-212-046.res.spectrum.com)
[23:35:14] *** Joins: schuelermine (~schuelerm@user/schuelermine)
[23:35:39] <schuelermine> well good news I reported this on the ghc gitlab
[23:35:48] *** Quits: Guest19 (~Guest19@098-147-212-046.res.spectrum.com) (Client Quit)
[23:35:50] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Remote host closed the connection)
[23:36:34] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[23:36:38] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:36:45] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:14] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[23:37:27] <awpr> ImplicitParams is a typeclass under the hood, and as far as I know ImpredicativeTypes doesn't make it legal to have instances for polymorphic types
[23:38:10] <schuelermine> Oh ok
[23:38:15] <schuelermine> what does, then?
[23:38:46] <schuelermine> what does FlexibleContexts do again? I always forget
[23:38:50] <awpr> IIUC nothing, it's just not legal
[23:39:04] <schuelermine> Aw what a shame
[23:39:12] <schuelermine> should be imo
[23:39:37] *** Quits: MajorBiscuit (~MajorBisc@c-001-022-052.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[23:40:51] *** Joins: neurocyte091707 (~neurocyte@IP-046243084168.dynamic.medianet-world.de)
[23:40:52] *** Quits: neurocyte091707 (~neurocyte@IP-046243084168.dynamic.medianet-world.de) (Changing host)
[23:40:52] *** Joins: neurocyte091707 (~neurocyte@user/neurocyte)
[23:40:58] <schuelermine> at any rate it is not well communicated in the error message, see https://gitlab.haskell.org/ghc/ghc/-/issues/20939
[23:42:12] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[23:42:39] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[23:42:39] *** neurocyte091707 is now known as neurocyte09170
[23:43:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:43:45] <[itchyjunk]> How do I constraint a thing to Int only ? :s
[23:43:50] <[itchyjunk]> I thought Num would be fine
[23:43:54] <[itchyjunk]> but ..
[23:44:00] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[23:44:05] <monochrom> Show actual code?
[23:44:12] <[itchyjunk]> https://bpa.st/PRZA
[23:45:11] <monochrom> So I can use your function as "myTreeSum (Nil :: MyFirstTree Double)"
[23:45:26] <monochrom> err that is not a very good example
[23:45:49] <monochrom> "myTreeSum (Node 1.2 Nil Nil :: MyFirstTree Double)"
[23:46:11] <monochrom> So now your code is doing (1.2 :: Double) + (0 :: Int)
[23:46:26] <monochrom> Do you see the type error?
[23:46:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:46:58] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[23:47:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:47:10] <[itchyjunk]> so my Nil being an integer was the issue?
[23:47:35] <[itchyjunk]> i think that's why i wanted a to be restricted to integer :x
[23:47:37] <monochrom> Yes and no. What causes your 0 to be pinned to Int?
[23:48:08] <[itchyjunk]> hm possibly my type signature that says MyFirstTree a -> Int
[23:48:12] <monochrom> Some people say that handwriting a type sig can help diagnose type errors.
[23:48:24] <monochrom> They speak the truth, but only half of it.
[23:48:44] <monochrom> The other half of it is that sometimes the type sig causes the type error.
[23:48:52] <[itchyjunk]> MyFirstTree a -> a would fixe it to whatever the Num a is possibly
[23:49:19] <monochrom> Who says that you never make mistakes in type sigs?
[23:49:27] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[23:49:36] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[23:49:37] * [itchyjunk] points to int-e 
[23:49:46] *** Joins: syrkis (~syrkis@189.122.124.6)
[23:49:58] *** Quits: syrkis (~syrkis@189.122.124.6) (Client Quit)
[23:50:12] *** Joins: tanners (~tanners@2600:1003:b11a:a16f:d0aa:19cc:13f7:58b7)
[23:50:22] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:50:38] <monochrom> When teaching conditional probability and Bayes's theorem, I also like to tell the story of a senior programmer and a fresh-grad tester.
[23:51:20] <monochrom> The code written by the senior programmer doesn't pass the test written by the fresh-grad tester.
[23:51:37] <monochrom> What is the probability that the test case is wrong?
[23:53:06] <monochrom> Well OK, you need to know a lot of priors etc to answer.  But basically if the priors say that the senior programmer has extremely low chance of being wrong (well they're senior, very experienced), and the fresh grad has a small but still not extremely small chance of being wrong (they're fresh grad),
[23:53:23] <monochrom> Then the test case has a very high chance of being wrong.
[23:53:37] <monochrom> (On condition that the code fails the test.)
[23:53:47] <[itchyjunk]> hmm
[23:53:59] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[23:54:02] <[itchyjunk]> so signature writing by hand is like the undergrad case?
[23:54:05] <dolio> I don't think I believe your conclusion. :þ
[23:54:08] <dolio> As a senior programmer.
[23:54:40] <monochrom> No no no! You should disbelieve by prior about senior programmers having extremely low chance of being wrong :)
[23:54:46] <monochrom> s/by prior/my prior/
[23:54:50] <[itchyjunk]> My code seems to actually work.. interesting https://bpa.st/STGQ
[23:55:10] <monochrom> Oh you should also disbelieve my prior that fresh grads have only a small chance of being wrong.
[23:55:11] <[itchyjunk]> https://bpa.st/P6GQ
[23:55:16] <[itchyjunk]> based on one single test :D
[23:55:54] <monochrom> You can't disbelieve Bayes's theorem, so you are only left with my input params.
[23:56:26] <dolio> Yeah, the priors are the problem.
[23:56:27] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[23:57:14] <int-e> [itchyjunk]: I don't think I've said that. If I did, I was wrong; mistakes can creep into any part of your code.
[23:57:47] <[itchyjunk]> int-e, i don't think you said that either.
[23:58:01] <[itchyjunk]> I just like blaming people other than me for my shortcommings!
