[00:00:07] <fizzie> When you give `go run` (or `go build`) a list of individual .go files (including just one), what it means is to make up a package out of those files, and those files alone, ignoring all other files in the directory. You *can* list multiple files, but most of the time you just say `.` or something, to mean "the package in the current directory".
[00:01:08] <fizzie> (I don't have a copy of the book so I don't know what the context there is. I guess it could just be omitting the already-shown pieces of code to save pages?)
[00:01:48] <pyzozord> yes it kind of does, but doexn't explain clearly does it want you to copy them manually
[00:08:32] *** Joins: danderson (~dave@tailscale/danderson)
[00:08:32] *** ChanServ sets mode: +v danderson
[00:15:14] <seebs> so when you have a module, you've got all the files in a directory, so if each file has its own main.go, they're in conflict. usually the answer is "don't put them all in one directory"
[00:16:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[00:17:28] *** Joins: jla (~jordi@137.215.35.37.dynamic.jazztel.es)
[00:18:23] <pyzozord> I have a variable that needs to be in the parent scope but also I need err that is only in the scope of if function. I can't use if stuff, err = foo(); err != nil {...} because err is not defined and I can't use if stuff, err ;= foo(); err != nil {...} because stuff is already defined and I don't want to redefine it. How do you guys deal with that?
[00:19:35] <A_Dragon> fizzie: not ., ./...
[00:19:36] <rewt> stuff, err = foo(); \n if err != nil { ... }
[00:19:38] <b0nn> You have do declare err before
[00:19:41] <seebs> declare err beforehand, usually
[00:19:53] <seebs> if i want one of the things in the assignment to already exist, they all have to already exist
[00:20:00] <A_Dragon> var err error :P
[00:20:15] <pyzozord> I see, so no nicer way
[00:21:04] <rewt> call the function first, and then check if err != nil
[00:21:11] <seebs> now i want to propose ";=" as an operator for "declare anything that doesn't already exist" so it can make everyone sad
[00:21:15] <b0nn> yes - var stuff type; if err shadow, err := foo(); err != nil {stuff = shadow}
[00:22:13] <b0nn> but, it's not a biggie if you reuse err, because it'll be nil if it gets past your call
[00:22:20] <fizzie> := can assign to things that exist already. It only requires one of the variables to be new.
[00:22:28] <seebs> yes, but not in that if form
[00:22:46] <seebs> in that form, it's actually creating a new variable rather than redeclaring the existing one
[00:22:57] <b0nn> wait, what? := is a declaration - you'll be shadowing
[00:23:01] <seebs> https://go.dev/play/p/z3boE3trrfn
[00:23:06] <fizzie> Oh, sure -- since it's a new scope.
[00:23:23] <fizzie> := can also do assignments, if some of the variables already exist in the same scope.
[00:23:24] <seebs> so, if you do a := declaration without a new scope, and there's existing values, it is not shadowing them, it's "redeclaring" them.
[00:23:56] <b0nn> https://go.dev/play/p/nCbBq_xDkon
[00:23:58] <fizzie> Yes, I guess they call it "redeclaring" rather than assigning.
[00:24:39] <fizzie> b0nn: https://go.dev/play/p/tAmnw2Pl7BA -- assigns to (okay, "redeclares") i.
[00:24:56] <fizzie> It requires at least one new variable, but allows some of them to already exist.
[00:25:09] <b0nn> uhh that's shadowing
[00:25:15] <b0nn> oh wait
[00:25:31] <b0nn> That I didn't know
[00:25:50] <fizzie> (In retrospect I should've removed the `if` from that example.)
[00:25:55] <A_Dragon> shadowing applies only if the original value remains, in the case of oldVar, newVar := x, y; oldVar is overwritten
[00:26:30] *** Quits: nekron (~nekron@noordsee.de) (Remote host closed the connection)
[00:26:32] <fizzie> I imagine the feature mostly exists so that you can reuse `err` as a name, in something like `x, err := foo(); y, err := bar(); ...`.
[00:28:04] *** Joins: nekron (~nekron@noordsee.de)
[00:28:41] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[00:29:54] *** Quits: Tasi__ (~Tasi@20014C4C220C8F00508FFCB92286498E.catv.pool.telekom.hu) (Read error: Connection reset by peer)
[00:30:16] *** Joins: Tasi__ (~Tasi@20014C4C220C8F00508FFCB92286498E.catv.pool.telekom.hu)
[00:31:39] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[00:32:51] *** Quits: Tasi__ (~Tasi@20014C4C220C8F00508FFCB92286498E.catv.pool.telekom.hu) (Read error: Connection reset by peer)
[00:33:16] *** Joins: Tasi__ (~Tasi@20014C4C220C8F00508FFCB92286498E.catv.pool.telekom.hu)
[00:33:17] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[00:35:36] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:35:57] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:37:25] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[00:38:03] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Client Quit)
[00:40:45] *** Quits: ilpanda (ilpanda@shell.xshellz.com) (Changing host)
[00:40:45] *** Joins: ilpanda (ilpanda@user/ilpanda)
[00:43:30] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[00:46:39] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[00:49:40] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Read error: Connection reset by peer)
[00:49:42] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[00:51:27] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[00:51:40] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Client Quit)
[00:51:46] *** Quits: absc (~absc@dynamic-adsl-94-34-219-179.clienti.tiscali.it) (Quit: Leaving)
[00:53:44] <Midjak> Hi there in this example https://github.com/fsnotify/fsnotify#usage I am not sure to understand the purpose of "done" . Is it just a mean for the main program to wait for the end of the go routine ?
[00:54:21] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[00:55:17] <b0nn> heh - it will wait forever
[00:55:57] <b0nn> done is not written to in that example, so the main goroutine will block forever
[00:56:30] <Midjak> yes at purpose I think
[00:56:57] *** Parts: Torr (~Torr@user/torr) ()
[00:57:38] <b0nn> Yeah - https://blog.sgmansfield.com/2016/06/how-to-block-forever-in-go/
[00:57:42] *** Quits: csileeeeeeeeeeoe (~csileeeee@50.232.121.75) (Remote host closed the connection)
[00:57:51] <Midjak> I guess it's just a mean to block the main gorpoutine while the second waiting for events from the watcher. Isn't it ?
[00:58:07] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[00:58:19] <Midjak> ok nice thanks b0nn
[00:59:50] <b0nn> The done channel is often used to convey to a boss routine that work in a worker goroutine is done... but waitgroup is better IMO
[01:00:52] <Midjak> I don't know waitgroup going to look at this thank you
[01:01:34] <b0nn> hmm belay that, the done channel can be used to say "this chunk of work is done" and that allows another goroutine to be told "you can use this chunk now whilst we wait for others to be ready"
[01:01:54] <b0nn> whereas a waitgroup will just wait until all chunks are finished
[01:03:50] <Midjak> Yeah I see. It's worth to know it.
[01:08:06] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[01:12:23] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[01:14:55] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[01:17:54] *** Parts: jla (~jordi@137.215.35.37.dynamic.jazztel.es) ()
[01:20:02] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:20:41] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 272 seconds)
[01:20:55] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:25:06] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[01:26:01] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:30:36] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[01:35:35] <Mathisen> hello: in this example " number, _ := strconv.ParseInt(os.Args[1], 10, 0) " what do the documentation mean by 10 is the base im confused about this ?
[01:36:27] <Mathisen> i do understand [1] the value im using and 0 = what "kind" of int it will be
[01:36:33] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[01:36:33] <Mathisen> but i dont get the base thing
[01:37:16] <bpalmer> Mathisen: are you familiar with binary numbers, decimal numbers, and hexadecimal numbers?
[01:37:28] <Mathisen> kinda yeah
[01:37:38] <bpalmer> Mathisen: the string "10" can mean different numbers.
[01:37:53] <bpalmer> If it is a binary number, "10" represents 2; if decimal, 10; if hexadecimal, 16.
[01:38:23] <bpalmer> So, base is how you tell go how the string should be interpreted. A base of 2  means it's in binary, a base of 16 hexadecimal, and so on.
[01:38:40] <Mathisen> ahhh thanks that make sense
[01:39:02] *** Quits: greypw254 (~greypw2@grey.pw) (Quit: I'll be back!)
[01:39:12] * Mathisen adds that line to his notes
[01:40:05] *** Joins: greypw254 (~greypw254@grey.pw)
[01:41:51] *** Quits: greypw254 (~greypw254@grey.pw) (Client Quit)
[01:42:21] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:42:57] *** Joins: greypw254 (~greypw254@grey.pw)
[01:43:51] *** Quits: Tasi__ (~Tasi@20014C4C220C8F00508FFCB92286498E.catv.pool.telekom.hu) (Quit: Leaving)
[01:51:56] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[01:54:19] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:58:57] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[02:05:41] *** Joins: Torr (~Torr@user/torr)
[02:05:50] <Torr> Hey
[02:06:10] <Torr> I was having a look at the <fs> package source and found this function: http://ix.io/3S9O
[02:06:46] <Torr> What does the "&" in the expression from line 10 means?
[02:07:30] <Torr> Afaik, that keyword is used to extract a pointer, but it's being used exactly after an identifier.
[02:07:31] <b0nn> It's bitwise
[02:08:06] *** Joins: treeford (~charleste@user/treeford)
[02:08:35] <b0nn> if m AND 100000000000000000000000000000000 != 0
[02:08:42] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 252 seconds)
[02:08:58] <b0nn> that uint(32-1-i is the position that's being anded
[02:09:40] <Torr> b0nn: Thank you
[02:10:08] <b0nn> Ugh I can't google the official docs, but this might be helpful https://yourbasic.org/golang/bitwise-operator-cheat-sheet/
[02:10:55] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:11:06] <Torr> Will read it right now.
[02:11:25] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[02:12:12] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[02:12:19] <bpalmer> golang.org/ref/spec
[02:13:06] <b0nn> I *wish* they would put anchor links into that page
[02:13:35] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:14:24] <b0nn> https://twitter.com/matryer/status/1502007228852695042
[02:15:09] <Mathisen> how do you handle overflows ? in this example https://go.dev/play/p/XQ6DWx-agZ1 im getting the factorial of the number 21 but that overflows it seem. i want it to just return 0 on a overflow but not sure how to handle that
[02:15:17] <b0nn> oh that twitter link is unrelated to the bitwise discussion
[02:18:54] <Mathisen> can you somehow check that if the value goes over the max of an int64 ?
[02:19:32] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:20:06] <b0nn> 2 ways
[02:20:21] <b0nn> 1) If it's negative, you've overflowed
[02:20:25] <b0nn> 2) https://stackoverflow.com/questions/6878590/the-maximum-value-for-an-int-type-in-go
[02:20:56] <Mathisen> ok so just do checks if it is a negative number and then a check for math.MaxInt64
[02:21:33] <b0nn> hmm, the neg chack, and a reverse check for the max
[02:21:55] <b0nn> that is if math.MaxInt64/X < Y you have an overflow
[02:22:56] <Mathisen> sorry i dont quite understand what you mean by " the neg chack, and a reverse check for the max "
[02:23:31] <b0nn> negative check == my result is negative which I did not expect
[02:24:18] <b0nn> reverse check == do a division of the math.MaxInt64 by one of your factors, and if the result is smaller than the other factor, that means the multiplication would have resulted in an overflow
[02:24:36] <Mathisen> ahhh smart
[02:24:45] <b0nn> Not sure which is uglier to be honest :)
[02:24:48] <Mathisen> it was the reverse part i did not get but i get it now
[02:26:43] <Mathisen> thanks
[02:27:20] <b0nn> WRT the negative check, you need to check the sign of both factors, if onw is +ve and the other -ve, you are expecting a -ve result, so if you get a +ve you have overflowed
[02:28:30] <b0nn> But, now that I think about it, you could end up with a sign result that is correct, but still have overslowed (ie math.MaxInt64*2.5)
[02:28:43] <b0nn> overflowed*
[02:29:33] *** Joins: crashrep (~crashrep@user/crashrep)
[02:30:17] <Mathisen> i so wish i payed more attention during math classes when i was younger math is not realy my strong side. and it seem in programming that math is must in many cases
[02:30:44] <b0nn> heh - thankfully there's a #math channel :)
[02:31:06] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[02:31:18] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[02:31:54] <Mathisen> :)
[02:32:11] <b0nn> also - if I may be all wise and zen and stuff - the best time to learn was 10 years ago, the second best time is now :)
[02:32:52] <Mathisen> true true
[02:33:13] <Mathisen> im 39 years young myself. so getting in to this kinda late
[02:34:53] *** Joins: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net)
[02:39:25] *** Joins: bindu_ (~bindu@user/bindu)
[02:39:54] *** Joins: Giovanni (~Giovanni@176.55.166.222)
[02:39:55] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[02:40:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[02:41:22] *** bindu_ is now known as bindu
[02:43:44] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[02:43:54] *** Joins: rcernin (~rcernin@101.189.129.123)
[02:47:00] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:48:14] <b0nn> You're doing well, you only look like you're in your early 20s from here ;)
[02:48:18] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[02:48:21] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[02:48:31] <Mathisen> lol thanks
[02:48:58] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[02:52:58] *** Quits: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:54:40] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: Leaving)
[02:56:49] *** Joins: Midjak (~Midjak@82.66.147.146)
[03:00:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:02:44] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[03:04:21] *** Joins: warblr (~warblr@ip-67-213-71-181.fibre.fibrestream.ca)
[03:21:55] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[03:22:16] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:26:43] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:26:43] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:33:50] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[03:34:13] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Ping timeout: 240 seconds)
[03:35:55] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:38:44] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[03:42:36] *** Quits: krux02 (~krux02@p200300e8171a750060abd903a9ed7316.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:48:32] *** Quits: andlabs_ (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[03:51:02] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[03:57:21] *** Joins: cnf (~cnf@d5152daf0.static.telenet.be)
[03:59:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[04:00:41] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[04:07:26] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[04:09:10] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[04:11:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[04:16:32] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:24:30] *** Joins: dsrt^ (~dsrt@50.232.121.75)
[04:31:18] *** Quits: markkuit (~markkuit@81.56.16.6) (Ping timeout: 272 seconds)
[04:35:18] *** Joins: markkuit (~markkuit@81.56.16.6)
[04:37:28] *** Joins: Maxattax97 (~max@174.131.224.89)
[04:39:32] *** Joins: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net)
[04:41:32] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[04:42:42] *** Quits: Maxattax97 (~max@174.131.224.89) (Ping timeout: 252 seconds)
[04:42:48] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[04:43:52] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Client Quit)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:39] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[04:47:55] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[04:50:33] *** Joins: R2robot (~R2robot@user/r2robot)
[04:51:43] *** Quits: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[04:54:24] *** Joins: Maxattax97 (~max@174.131.224.89)
[04:57:52] <nitrix> You have to be careful not romanticize it either. A couple different bases like binary or hexadecimal might look completely foreign and "mathy" but they're still the same basic arithmetic everyone already knows or would be able to easily learn.
[04:58:07] *** Joins: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net)
[04:59:09] <nitrix> Computer Science requires a minimal understanding of asymptotic complexity to understand what time/space tradeoffs you're making with algorithms, but the rest is fairly rooted in logic and can be deduced on your own with a bit of work.
[04:59:15] *** Quits: faceonkeyboard (~faceonkey@anquietas.itsh.dev) (Quit: Bridge terminating on SIGTERM)
[04:59:49] <nitrix> It's not and shouldn't become an excuse.
[05:08:31] *** Joins: faceonkeyboard (~faceonkey@anquietas.itsh.dev)
[05:09:06] *** Quits: Maxattax97 (~max@174.131.224.89) (Ping timeout: 252 seconds)
[05:13:42] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[05:14:50] *** Quits: warblr (~warblr@ip-67-213-71-181.fibre.fibrestream.ca) (Quit: Leaving)
[05:16:00] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:21:20] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[05:22:54] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:23:00] *** Quits: dsrt^ (~dsrt@50.232.121.75) (Ping timeout: 250 seconds)
[05:25:55] *** Joins: Guest7593 (~ss@cpe-72-128-85-177.wi.res.rr.com)
[05:26:32] <seebs> yeah. it's not that much to learn and it's definitely worth it.
[05:27:10] *** Quits: Guest7593 (~ss@cpe-72-128-85-177.wi.res.rr.com) (Client Quit)
[05:27:25] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:28:57] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 272 seconds)
[05:30:55] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[05:30:55] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[05:34:39] <b0nn> hrm, at risk of putting people off, University demanded I learnt linear algebra, and Kleene's theorem (+= a few other proofs) from the Math department before they would let me have a shiny piece of paper
[05:38:18] <b0nn> oh, they only demand 1st year math paper now, they've dropped the 2nd year stuff
[05:40:33] <KirkMcDonald> I will say that linear algebra has plenty of uses.
[05:41:02] <KirkMcDonald> It is certainly worth knowing, but there's also a whole lotta stuff you can do without any particular knowledge of the topic.
[05:44:26] *** Joins: treeford (~charleste@user/treeford)
[05:45:26] <b0nn> I dunno, there used to be this "Oh CS is hard because you have to do hard math" thing stopping people from learning it, and there's certainly careers in CS development where devs can live their whole lives without encountering it
[05:46:01] <seebs> yeah, although... a lot of the time, you don't know you're encountering a given math if you don't know that math.
[05:46:08] <seebs> so broad familiarity is super helpful.
[05:46:11] <b0nn> But, there's also plenty of times you /should/ know some of the math - so preparing someone for the world of SWE probably should still require some level of Math understanding
[05:46:23] <b0nn> snap!
[05:47:04] <b0nn> It's hard for me to understand because I /liked/ math and logic at school as a child
[05:47:15] <b0nn> (not that I did well at the advanced stuffs)
[05:49:00] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 250 seconds)
[05:49:55] *** Joins: borrougagnou (~borrougag@91.134.153.132)
[05:51:07] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:56:10] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[05:59:35] <KirkMcDonald> A lot of the math can be understood pretty intuitively, I think. Computational complexity is like this.
[06:01:18] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[06:03:59] <bpalmer> Some forms of computational complexity.
[06:06:44] <bpalmer> But, e.g., oracle relativization, pseudo-random algorithms, non-primitive recursions ... the academy always has somethign to hurt.
[06:07:30] <bpalmer> Thankfully, most of us live life squarely in the realm of for loops or at worst some exponential analysis.
[06:07:52] <KirkMcDonald> Also logarithms. Those'll pop up.
[06:09:02] <b0nn> Logarithms never made sense to me till that "Triangle" showed up on the internet
[06:09:51] <seebs> triangle?
[06:09:54] <b0nn> https://www.youtube.com/watch?v=sULa9Lc4pck
[06:10:25] <b0nn> or https://interestingengineering.com/understand-logarithms-help-simple-triangle
[06:10:44] <seebs> oh, yeah
[06:11:35] <KirkMcDonald> I learned how to use a slide rule as a kid. A side effect of having an engineer in the family.
[06:11:37] *** Joins: Maxattax97 (~max@h89.224.131.174.dynamic.ip.windstream.net)
[06:12:45] <foobaz> i have my grandfather's slide rule, which he taught me how to use :)
[06:13:07] <bpalmer> an elegant weapon for a more civilized age.
[06:13:29] <foobaz> better-dressed as well
[06:13:50] <foobaz> he always wore suit and tie to the office
[06:19:53] <bpalmer> technically, there's nothing stopping people from dressing up for work.
[06:20:40] <bpalmer> Just may make people think you're back from an interview.
[06:20:48] <bpalmer> or a funeral.
[06:25:03] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[06:26:26] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[06:29:13] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[06:29:24] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[06:30:22] *** Quits: adip_ (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[06:31:01] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[06:31:03] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[06:31:27] *** Joins: zaz\ (~zaz@poneybl.eu)
[06:33:59] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:37:31] *** Quits: dibic (~dibic@2601:248:4504:7ed0:edbb:3de5:2635:bf39) (Quit: Client closed)
[06:38:57] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 240 seconds)
[06:42:18] *** Joins: blacked (~blacked@user/blacked)
[06:42:33] <blacked> If i defined an integer
[06:42:47] <blacked> `var count = int(42)`
[06:42:59] <blacked> what is difference in using this  `var ptr=&count` vs `var ptr = count` ?
[06:44:04] <bpalmer> what are the types involved?
[06:44:21] <bpalmer> you can check with fmt.Printf and the %T specification
[06:44:43] <crashrep> the difference is wether ptr is a pointer or the value itself (actually, it would be a seperate piece of memory)
[06:45:40] <b0nn> ahem, weather is the rain, sun, snow; whether is discussing which choice to make, and wether is a castrated male sheep
[06:46:06] <b0nn> So, whether the wether goes out in the weather
[06:46:13] <blacked> :/
[06:46:26] <blacked> bpalmer they are *int and int
[06:46:37] <blacked> i didnt understand
[06:47:45] <blacked> tutorial says `var ptr=&count`
[06:48:00] <blacked> *by using the & operator. This returns the address of the count variable. You dereference the variable*
[06:48:08] <blacked> what does that even mean?
[06:48:32] <bougyman> it means you translate what is in memory to the type expected.
[06:48:32] <b0nn> blacked: do you know what pointers are?
[06:48:55] <bougyman> pointers are simply a pointer to a memory address.
[06:49:13] *** Joins: rcernin (~rcernin@101.189.129.123)
[06:49:38] <blacked> if i defined some variable ptr, then `&ptr` refers to the memory location where `ptr` variable reside right :/
[06:49:56] <seebs> yes
[06:49:56] <b0nn> yes, it's the address
[06:50:21] <blacked> Then what does `*ptr` refers ?
[06:50:23] <seebs> and no, it doesn't mean "translate what is in memory to the type", and they aren't a pointer to a memory address, they just *are* a memory address.
[06:50:39] <rewt> you can store that memory address in another variable; a pointer variable like *int
[06:50:43] <bougyman> seebs: That's what "dereferencing" does.
[06:50:46] <seebs> *ptr is the opposite. given any object o, &o is its address, and *(&o) is just o again.
[06:51:00] <seebs> but the pointer isn't a pointer-to a memory address, it just *is* an address.
[06:51:06] <bougyman> ack
[06:51:09] <seebs> if the thing is at 0x1234 in memory, the pointer is just 0x1234.
[06:51:14] <seebs> it's not a pointer-to 0x1234.
[06:52:24] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:52:32] <b0nn> right, how confused are you bow blacked ?
[06:52:35] <seebs> so, yeah. you have an int x, which has the value 3. it is stored somewhere. &x is of type *int, and is "where x is stored". if you store that in another variable, like "ptr := &x", now ptr holds that location. now you can dereference ptr, using "*ptr", and that's the same thing as x.
[06:53:04] * bougyman head exploding
[06:53:09] <blacked> =#  alot of confusion on what is `&ptr` `*ptr` what does they refer ........
[06:53:15] <b0nn> dereferencing is "give me the /value/ held at the address"
[06:53:18] <blacked> I should look to youtube
[06:53:46] <b0nn> when I first learnt it - I thought about a file on a website
[06:53:56] <b0nn> the address is the URL
[06:54:08] <seebs> blacked: don't use the & and * on the same thing, that makes it more confusing
[06:54:20] <b0nn> to get the file, I would send a browser to that address (that's dereferencing)
[06:54:30] <seebs> x := 3; ptr := &x // now *ptr and x refer to the same location in memory
[06:55:03] <seebs> it's a way to keep a reference to a specific object so that you can use the reference to modify the original object, rather than having a copy of it.
[06:55:35] *** Quits: aog (~aog@user/aog) (Ping timeout: 240 seconds)
[06:56:27] <seebs> https://go.dev/play/p/CTsicKrYomB
[06:57:35] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[06:57:55] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[06:59:50] *** Quits: crashrep (~crashrep@user/crashrep) (Remote host closed the connection)
[06:59:56] *** Joins: hackers (~self@user/hackers)
[06:59:59] *** hackers is now known as remote
[07:00:06] <rewt> blacked, also note that * has 2 meanings here;  1st in the variable type like *int that holds the address of the int, and 2nd is dereferencing to get to the value pointed at, like *varname
[07:07:28] *** Joins: crashrep (~crashrep@user/crashrep)
[07:07:29] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[07:12:01] *** Quits: JPT (~jpt@classified.name) (Quit: Hoppla!)
[07:13:19] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[07:13:29] *** Quits: crashrep (~crashrep@user/crashrep) (Remote host closed the connection)
[07:17:20] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[07:17:56] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:18:21] *** Joins: JPT (~jpt@classified.name)
[07:19:58] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[07:20:04] *** Joins: aog (~aog@user/aog)
[07:21:22] *** Joins: crashrep (~crashrep@user/crashrep)
[07:22:00] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[07:23:20] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[07:23:35] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[07:26:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Read error: Connection reset by peer)
[07:28:41] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[07:29:53] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4)
[07:30:06] *** Joins: rcernin (~rcernin@101.189.129.123)
[07:34:24] *** Quits: rcernin (~rcernin@101.189.129.123) (Client Quit)
[07:34:50] *** Joins: rcernin (~rcernin@101.189.129.123)
[07:38:37] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (Ping timeout: 240 seconds)
[07:40:30] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[07:43:01] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[07:47:00] *** Quits: stuart (~stuart@55d4f184.access.ecotel.net) (Ping timeout: 272 seconds)
[07:48:39] *** Joins: stuart (~stuart@55d4f330.access.ecotel.net)
[07:49:03] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:49:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[07:50:50] *** Joins: bluedust (~bluedust@37.120.198.151)
[07:51:54] *** Quits: mickey (~user@user/mickey) (Ping timeout: 252 seconds)
[07:55:04] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[07:56:43] *** Joins: mickey (~user@user/mickey)
[07:57:04] *** Joins: Casino_Mussolini (~tm@2603-8080-1503-d3b7-0000-0000-0000-1846.res6.spectrum.com)
[07:59:30] <blacked> oh it was great https://www.youtube.com/watch?v=sTFJtxJXkaY
[07:59:40] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Remote host closed the connection)
[07:59:51] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[08:03:24] <blacked> ohhhhhhhh
[08:03:25] <blacked> :/
[08:05:17] <blacked> for `var a = 1`   `&a refers to address where a variable is stored`
[08:05:17] <blacked> If i gave that pointer reference to another variable `var b = &a` then `b is pointer variable` , its value is address of a , But when we want value of the address of b is referring we do it by `*b`
[08:05:49] *** Joins: Atque (~Atque@user/atque)
[08:06:34] <blacked> gogogogogogoogogogoog :)
[08:06:37] <blacked> golang
[08:06:38] <blacked> :)
[08:06:41] <blacked> emacs
[08:06:47] <blacked> emacs is much more greater than vim
[08:06:48] <blacked> :)
[08:08:01] *** Joins: ekathva (~ekathva@n16iytldzw0rbah2i-1.v6.elisa-mobile.fi)
[08:10:17] *** Quits: blacked (~blacked@user/blacked) (Quit: Client closed)
[08:17:19] *** Joins: han-solo (~hanish@user/han-solo)
[08:28:22] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:32:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[08:34:53] *** Quits: Giovanni (~Giovanni@176.55.166.222) (Remote host closed the connection)
[08:35:24] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 250 seconds)
[08:39:35] *** Quits: benji (~benji@user/benji) (Quit: ZNC - https://znc.in)
[08:41:53] *** Joins: benji (~benji@user/benji)
[08:45:42] *** Quits: benji (~benji@user/benji) (Client Quit)
[08:46:12] *** Joins: benji (~benji@user/benji)
[08:50:25] *** Quits: benji (~benji@user/benji) (Client Quit)
[08:50:55] *** Joins: benji (~benji@user/benji)
[08:51:45] *** Quits: benji (~benji@user/benji) (Client Quit)
[08:52:14] *** Joins: benji (~benji@user/benji)
[08:52:56] *** Quits: benji (~benji@user/benji) (Client Quit)
[08:53:25] *** Joins: benji (~benji@user/benji)
[08:56:41] *** Quits: benji (~benji@user/benji) (Client Quit)
[08:57:10] *** Joins: benji (~benji@user/benji)
[08:57:31] *** Quits: benji (~benji@user/benji) (Remote host closed the connection)
[08:58:00] *** Joins: benji (~benji@user/benji)
[08:58:13] *** Quits: monoxane (~monoxane@user/monoxane) (Ping timeout: 256 seconds)
[08:58:27] *** Joins: monoxane8 (~monoxane@user/monoxane)
[08:58:37] *** Quits: benji (~benji@user/benji) (Client Quit)
[09:00:21] *** Quits: victori (~victori@cpe-76-89-139-69.socal.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[09:01:33] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4)
[09:02:27] *** Joins: rcernin (~rcernin@101.189.129.123)
[09:04:51] *** Quits: rcernin (~rcernin@101.189.129.123) (Client Quit)
[09:05:05] *** Joins: rcernin (~rcernin@101.189.129.123)
[09:14:30] *** Joins: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz)
[09:18:47] *** Joins: blacked (~blacked@user/blacked)
[09:19:45] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:20:46] *** Joins: treeford (~charleste@user/treeford)
[09:24:12] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[09:24:18] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[09:25:00] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[09:29:23] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[09:30:48] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[09:32:59] *** Quits: Casino_Mussolini (~tm@2603-8080-1503-d3b7-0000-0000-0000-1846.res6.spectrum.com) (Quit: Leaving)
[09:46:15] *** Joins: SteveR (~SteveR@2600:6000:ff7e:cdef::1f4)
[09:53:02] *** Quits: bluedust (~bluedust@37.120.198.151) (Ping timeout: 272 seconds)
[09:54:16] *** Quits: normen_ (~normen@p200300d71749cc00fd2a3876cbcdd871.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[09:56:36] *** Quits: Berlin36 (~Berlin36@user/berlin36) (Ping timeout: 240 seconds)
[10:05:19] *** Quits: blacked (~blacked@user/blacked) (Quit: Client closed)
[10:08:39] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:13:20] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[10:18:38] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:20:36] *** Joins: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de)
[10:21:55] *** Quits: aog (~aog@user/aog) (Ping timeout: 240 seconds)
[10:21:59] *** Joins: aog_ (~aog@user/aog)
[10:22:24] *** aog_ is now known as aog
[10:22:45] *** Joins: Atque (~Atque@user/atque)
[10:25:48] *** Quits: remote (~self@user/hackers) (Ping timeout: 240 seconds)
[10:27:16] *** Joins: remote (~self@user/hackers)
[10:32:21] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:34:34] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:35:02] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[10:35:39] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[10:36:20] *** Joins: ekathva_ (~ekathva@mobile-access-5672f9-153.dhcp.inet.fi)
[10:38:36] *** Quits: ekathva (~ekathva@n16iytldzw0rbah2i-1.v6.elisa-mobile.fi) (Ping timeout: 240 seconds)
[10:43:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[10:48:53] *** Quits: han-solo (~hanish@user/han-solo) (Read error: Connection reset by peer)
[10:53:12] *** Quits: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:54:57] *** Quits: ekathva_ (~ekathva@mobile-access-5672f9-153.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:56:13] *** Joins: ekathva_ (~ekathva@n16izluvk39q3lx3y-1.v6.elisa-mobile.fi)
[10:56:18] *** Joins: ghost08 (~ghost08@adsl-dyn-50.95-102-48.t-com.sk)
[11:02:19] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:04:29] *** Joins: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net)
[11:05:15] *** Joins: han-solo (~hanish@103.82.184.205)
[11:06:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[11:07:46] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[11:07:48] *** Quits: han-solo (~hanish@103.82.184.205) (Client Quit)
[11:08:33] *** Quits: SteveR (~SteveR@2600:6000:ff7e:cdef::1f4) (Ping timeout: 256 seconds)
[11:08:50] *** Joins: han-solo (~hanish@user/han-solo)
[11:10:10] *** Joins: treeford (~charleste@user/treeford)
[11:10:30] *** Joins: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de)
[11:11:36] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:13:10] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[11:13:21] *** Quits: toulene (~toulene@user/toulene) (Quit: Ping timeout (120 seconds))
[11:13:21] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4)
[11:14:38] *** Joins: toulene (~toulene@user/toulene)
[11:15:22] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 272 seconds)
[11:17:33] *** Joins: absc (~absc@81.31.144.28)
[11:19:37] *** Quits: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[11:19:40] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:20:03] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:23:37] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 272 seconds)
[11:23:49] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[11:25:02] *** Quits: lithamme- (~lithammer@arch-vps.cloud.tilaa.com) (Quit: ZNC - http://znc.in)
[11:25:24] *** Joins: lithammer (~lithammer@arch-vps.cloud.tilaa.com)
[11:25:26] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[11:25:35] *** Joins: toulene (~toulene@user/toulene)
[11:29:18] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[11:30:05] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[11:30:48] *** Joins: arinov_ (~arinov@213.194.126.155)
[11:36:06] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:43:51] *** Joins: shka (~herr@109.231.3.55)
[11:50:12] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[11:53:39] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:54:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:58:12] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[11:58:52] *** Quits: arinov_ (~arinov@213.194.126.155) (Remote host closed the connection)
[11:59:40] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:00:00] *** Joins: arinov_ (~arinov@213.194.126.155)
[12:00:53] *** Joins: King_julian (~King_juli@41.1.142.79)
[12:03:41] *** Quits: toulene (~toulene@user/toulene) (Quit: The Lounge - https://thelounge.chat)
[12:06:31] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[12:06:52] *** Quits: cim (~cim@205.185.117.110) (Quit: Ping timeout (120 seconds))
[12:07:06] *** Joins: cim (~cim@205.185.117.110)
[12:11:35] *** Joins: adip_ (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[12:13:58] *** Joins: toulene (~toulene@user/toulene)
[12:16:54] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[12:17:16] *** Joins: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de)
[12:19:56] *** Joins: trafficjam (~qubes@119-12-218-129.dynamic.ipstaraus.com)
[12:20:11] <trafficjam> hello
[12:20:40] <synthmeat> what's the websocket server lib of choice these days? i looked a bit into it, offerings don't exactly look healthy.
[12:22:31] <b0nn> I thought that websockets got usurped by SSE
[12:24:55] <b0nn> hmm this seems to think that WS is still better than SSE, but a lot more work https://ably.com/blog/websockets-vs-sse
[12:25:06] <synthmeat> sure, sse covers a lot of use-cases ws is being used for, i guess
[12:26:18] <synthmeat> (properly) bidirectional, binary messages, etc. plenty of stuff sse can't really do without bending backwards
[12:26:30] <b0nn> See also https://ably.com/blog/can-webtransport-replace-websockets
[12:28:31] <synthmeat> that one's gonna be a blast, when it's commonly available
[12:28:49] <b0nn> yeah - it looks like WS are the option you want right now
[12:28:59] <b0nn> but WT is going to be
[12:30:06] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: You have been kicked for being idle)
[12:30:10] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[12:30:39] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:31:44] *** Joins: justAstache (~justache@user/justache)
[12:34:56] <synthmeat> this one looks pretty low level https://github.com/gobwas/ws
[12:35:42] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[12:48:27] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:50:24] *** Joins: ricci (~ricci@31.187.110.131)
[12:53:24] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[12:55:36] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-554a-38a2-90fe-9029.ip6.gigabit.dk) (Ping timeout: 268 seconds)
[12:56:15] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[12:58:34] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[12:59:42] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[13:00:06] *** Joins: benji (~benji@user/benji)
[13:02:36] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 240 seconds)
[13:10:14] *** Joins: crashrep (~crashrep@user/crashrep)
[13:13:58] *** Joins: jla (~jordi@137.215.35.37.dynamic.jazztel.es)
[13:19:00] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[13:20:18] <dostoyevsky2> What kind of libs should I use if I want to stay connected to a server, subscribe to a couple of topics, and then receive updates on those topics... so kind of like a IRC server ;)
[13:25:05] <bpalmer> if you're looking for irc, search for "irc bouncer"
[13:25:25] *** Joins: han-solo (~hanish@user/han-solo)
[13:26:07] <dostoyevsky2> I am not looking for irc, just illustrating the client-server architecture I want to write ingo
[13:27:20] <dostoyevsky2> I guess http requests are keepalive these days anyways... just not sure how the server could deliver continuous replies as subscribed topics show activity
[13:28:23] <zutt> so something like https://github.com/emitter-io/emitter ?
[13:29:15] <zutt> https://en.wikipedia.org/wiki/Message_queue https://github.com/avelino/awesome-go#messaging
[13:29:45] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[13:32:37] <dostoyevsky2> I guess I could do it all based on plain sockets
[13:34:44] <buu> dostoyevsky2: are you writing the socket protocol or what?
[13:35:14] <dostoyevsky2> buu: yeah
[13:37:20] <buu> Starting with websockets is probably a sane idea
[13:37:35] <buu> But that awesome-go list has a couple of others
[13:37:46] <zutt> nats.io also exists if this is for server-to-server communication
[13:39:02] <dostoyevsky2> buu: Not sure how websockets could return multiple replies from the server... the client would need to periodically ask for updates
[13:39:42] <synthmeat> ws is just glorified tcp, you can do anything over it
[13:40:41] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:40:46] <synthmeat> sse sounds like it could be an option for you
[13:41:43] <pyzozord> hey, so goroutines are fun but the sync package is very humble
[13:42:03] <pyzozord> and it looks like you need to be quite verbose with these things
[13:42:15] <pyzozord> in javascript we have promises which I think are amazing
[13:42:23] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[13:42:43] <pyzozord> I was wondering how do you handle more complex concurent situations in go in practice in more complex projects
[13:44:34] <dostoyevsky2> synthmeat: I found some great examples on github for SSE :)
[13:46:06] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[13:47:08] <dostoyevsky2> pyzozord: have you looked into channels?  They enable communication between go routines and don't need any calls to sync.*
[13:47:33] *** Joins: arinov (~arinov@5.24.97.248)
[13:48:01] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 272 seconds)
[13:52:10] *** Quits: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[13:53:41] <dostoyevsky2> pyzozord: Not sure what in go would compare to JavaScript Promises, but one crucial difference with Go Routines is that in JavaScript you are single threaded, so your async functions don't really need to worry about accessing global variables with mutexes etc... whereas in go an async function can be it's own thread or also run in the main thread, it's automatically routed to the right option.  So
[13:53:47] <dostoyevsky2> you can have Go routines that consume 100% cpu, without stopping all the other Go routines
[13:56:57] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-d8d0-f6a2-b1f5-ecd8.ip6.gigabit.dk)
[13:56:57] *** Quits: han-solo (~hanish@user/han-solo) (Killed (NickServ (GHOST command used by hanish!~hanish@178.248.114.121)))
[13:57:13] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:57:45] *** Joins: han-solo (~hanish@user/han-solo)
[14:02:02] <pyzozord> I just mean the expressiveness of "run thise two things in parallel and wait until both are done"
[14:02:26] <pyzozord> in javascript you can do await Promise.all(thing1(), thing2()); console.log('both done')
[14:02:31] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[14:02:31] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[14:05:18] <pyzozord> in golang you need to create wait group then Add(2) and then each goroutine must be aware of this, be passed the work group and call Done() on it
[14:05:37] <pyzozord> that's really verbose, especially comparing to that one line in javascript
[14:05:55] <pyzozord> so I was wondering what people do in practice in golang, because the workgroup thing seems like a lot of work
[14:06:26] <ikke> That's like dostoyevsky2 mentioned because function in javascript return immediately
[14:06:46] <ikke> goroutines run really asynchronous, so there is nothing returned until they are done
[14:07:50] <pyzozord> no not really, js is singlethreaded yes, but it is concurrent
[14:08:16] <pyzozord> those functions do not return immediatly if they are async or if they are promises
[14:08:30] <pyzozord> well when they are promises they return immediatly but they return a promise object
[14:08:36] <ikke> exactly
[14:08:44] <dostoyevsky2> yeah... which can work like a workgroup...
[14:08:49] <ikke> javascript itself is single threaded, though you can call functions that run in a separate thread
[14:09:07] <ikke> But you don't have control of that
[14:09:07] <pyzozord> i think it doesn't matter from the abstraction point of view
[14:09:09] <ikke> over that
[14:09:43] <pyzozord> it just looks like go has lower level abstractions for concurrency
[14:10:00] <ikke> And callbacks are less common
[14:10:13] <ikke> which is what promises use
[14:10:19] <pyzozord> go's concurrency can be parallelism, js's concurrency can't be parallelism, but parallelism is just an implementation detail in this case, just a behind the scenes optimization
[14:10:21] *** Joins: walterwhip (~walterwhi@user/walterwhip)
[14:10:30] <dostoyevsky2> You could write a primise.All(thing1, thing2) but those functions would still need to call wg.Done()
[14:10:51] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 252 seconds)
[14:11:37] <pyzozord> hmm not really you could have Promise.All(thing1, thing2) that calls goroutine unnamed functions that will call the thing1 sequentially and then call wg.Done()
[14:11:55] <pyzozord> it's just an abstraction I think that's missing
[14:12:09] <pyzozord> that's why I am wondering how go developers deal with the more complex concurrency situations
[14:12:10] <ikke> It's a way of programming that is not common with go
[14:12:16] <ikke> relying on callbacks
[14:12:39] <ikke> So you don't see abstractions which rely on them
[14:12:46] <pyzozord> no no, I think you are not getting what I'm saying
[14:12:53] <pyzozord> what I suggested has no callbacks
[14:13:20] <pyzozord> it uses the waitgroup but it uses it "behind the scenes"
[14:13:36] <pyzozord> I guess it wouldn't be Promise.All() it would be just WaitAll()
[14:14:20] <pyzozord> anyway it's just suggestion, my real question is how go developers deal with more complex concurrent systems
[14:14:48] <pyzozord> because the waitgroup seems kind of verbose and a bit messy given that the function ust be aware it will be used inside a waitgroup
[14:15:10] <ikke> my experienc is that it's considered a feature
[14:15:31] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:15:34] <ikke> The channels are where most 'magic' happens
[14:15:55] <pyzozord> yeah channels are very cool
[14:16:14] <ikke> outside of that, it's all very concrete / verbose
[14:16:58] <pyzozord> but for example yesterday I ran into a situation where two goroutines were running in parallel and both were writing to the same channel at the same time, the main function was receivng data from that channel, and then I didn't know how to close the channel after both goroutines were done
[14:17:56] <pyzozord> I ended up manually counting like this http://bpa.st/W4KA (see line 34)
[14:18:09] <pyzozord> first version had waitgroups, but that was even more verbose
[14:18:27] <ikke> afaik, channels do not _have_ to be closed
[14:18:45] <ikke> "A sender can close a channel to indicate that no more values will be sent."
[14:19:10] <ikke> "Another note: Channels aren't like files; you don't usually need to close them. Closing is only necessary when the receiver must be told there are no more values coming, such as to terminate a range loop."
[14:19:18] <ikke> https://go.dev/tour/concurrency/4
[14:19:20] <pyzozord> you need to close the channel to move past the for chunk := range ch {} in 41
[14:20:17] <pyzozord> yeah exactly to terminate a range loop
[14:20:56] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[14:21:51] <pyzozord> so this jobs variable manually counting is very ugly and brittle code
[14:22:29] <pyzozord> I'd much prefer something simpler like a slice with pointers to functions and WaitAll(sliceWithFunctionPointers)
[14:22:51] <dostoyevsky2> I've had deadlock problems with channels too yesterday... main thread was in wg.Wait() and go routine wanted to `result <-'  before wg.Done() but main thread `<-result' was already over but close(done) hadn't been received yet by the go routine doing the `result <-'
[14:23:28] <fizzie> pyzozord: Doing *that* ("WaitAll") with a WatiGroup shouldn't be that much more verbose.
[14:26:42] <pyzozord> it is a bit, I mean what bothers me is that the functions that will be run in goroutines must be aware of the waitgroup
[14:26:44] <ikke> How would goroutines indicate they are done without them explicitly signalling that?
[14:27:03] <ikke> They cannot return something
[14:27:05] <fizzie> The *functions* don't really need to.
[14:27:06] <pyzozord> also you need to create the wait group on next line you need to add the number of jobs... It adds up to like 5-6 lines
[14:27:19] <fizzie> The goroutines do, but you can go with something like https://0x0.st/oZxS.txt
[14:27:40] <pyzozord> fizzie: yes! that was what I just talked about few minutes ago, that is much nicer abstraction
[14:27:42] <fizzie> (Yes, it's some amount of extra lines.)
[14:28:17] <pyzozord> do people jsut write it like that?
[14:28:38] <pyzozord> I feel like this could benefit from some library
[14:28:45] <pyzozord> from making it into some library
[14:30:01] <pyzozord> so I'm still wondering because that's quite a few extra lines, which means quite a few extra potential bugs
[14:30:39] <pyzozord> so that would suggest that in golang this situation just doesn't occur very often and people didn't feel a need to make a library for things like this?
[14:30:55] <pyzozord> like wait for all, wait for some, wait for the first one etc
[14:31:29] <pyzozord> it doesn't make sense to me, go is all about concurrency so I imagine people do all kinds of crazy things and have complex concurrent systems
[14:31:52] <pyzozord> so they should have a richer vocabulary for concurrent ideas
[14:33:32] <pyzozord> unless I am missing some part of go philosophy and how it translate to dealing with problems like that (maybe for example they don't run into problems like this in the first place thanks to their philosophy?)
[14:37:46] *** Quits: King_julian (~King_juli@41.1.142.79) (Ping timeout: 260 seconds)
[14:38:49] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[14:40:36] *** Quits: X-Scale (~ARM@83.223.233.31) (Ping timeout: 240 seconds)
[14:40:36] *** X-Scale` is now known as X-Scale
[14:41:05] *** Joins: han-solo (~hanish@user/han-solo)
[14:42:54] *** Quits: ekathva_ (~ekathva@n16izluvk39q3lx3y-1.v6.elisa-mobile.fi) (Remote host closed the connection)
[14:43:12] *** Joins: ekathva_ (~ekathva@n16izluvk39q3lx3y-1.v6.elisa-mobile.fi)
[14:45:20] *** Joins: treeford (~charleste@user/treeford)
[14:46:51] <dostoyevsky2> pyzozord: the go concurrency seems to be designed around making the C way easier to implement that one normally would do via threads/select.  Channels/Go routines help by not having to use mutexes but you still can have deadlocks or other errors, so it's just a bit of abstraction and not abstracting it all away
[14:47:42] <pyzozord> yeah it seems lower level in general
[14:48:02] <pyzozord> but since the language encourages doing concurrent stuff so much...
[14:49:24] *** Joins: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de)
[14:49:53] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 252 seconds)
[14:50:13] *** Joins: King_julian (~King_juli@41.1.142.79)
[14:53:03] *** go_ is now known as go
[14:53:26] <MD87> There's a quote from Rob Pike along the lines of "prefer a little copying over a little dependency" which may explain some of what you're seeing
[14:54:08] *** Joins: sig__ (~sig@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[14:55:56] *** Quits: Praise (~Fat@user/praise) (Remote host closed the connection)
[14:56:12] *** Quits: leonardo (leonardo@user/leonardo) (Ping timeout: 240 seconds)
[14:56:36] *** Quits: sig_ (~sig@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 240 seconds)
[14:56:50] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[14:57:06] *** Joins: Praise (~Fat@user/praise)
[14:57:14] *** Joins: leonardo (~leonardo@user/leonardo)
[14:57:46] <dostoyevsky2> The great thing about Go is that you can do a google search and find an example in Go from 2012 on stackoverflow... and it still works like that today..  They were very careful with what features they added to the language from the beginning, and it just made the language very stable... Even though you might notice that many projects keep reinventing the same functions to make Go more abstract..
[14:58:13] <MrElendig> this goes for most languages
[14:59:23] <dostoyevsky2> MrElendig: Not for rust... Or python, or Swift... or even JavaScript, if based on any framework... Angular deprecates it's api like what... every three months?
[15:01:17] <MrElendig> yes for python, partly yes for rust
[15:02:13] <MrElendig> not much have been deprecated from python3 since 2012 (mostly things you shouldn't be using in the first place)
[15:03:39] <MrElendig> for rust, the language wasn't 1.0 yet in 2012 so its not really a fair comparison
[15:04:00] <MrElendig> it was on 0.4 or something like that
[15:05:16] * MrElendig does have py3 code running that is unchanged from about 2010
[15:05:25] <pyzozord> MD87: I don't think it applies in this case. I mean it would explain why people write it manually now. But it doesn't explain why it's not in the standard library
[15:05:48] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[15:05:53] <han-solo> async/await ?
[15:06:20] <pyzozord> just higher abstractoin constructs to deal with concurrency patterns
[15:06:51] *** Joins: isflavior (~isflavior@2001:8a0:5dd8:4100:9064:d69:f6a4:2495)
[15:07:33] <crashrep> dostoyevsky2: i must say from my experience that the only thing about golang that makes things hard for me is that since the module system was added, when i find older go projects i have a hard time compiling them because they don't have a go.mod or go.sum file
[15:07:46] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[15:08:09] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[15:08:11] <han-solo> pyzozord: i'm a noob, but i think the concurrency model is different
[15:08:51] <dostoyevsky2> MrElendig: Most python2 code runs flawlessly on py3 today if you just 2to3 it...  But it's still frustrating find some gist on github and at first it doesn't work... with Go I enjoy browsing through ideas and trying them out like I have never before... But maybe I am just lucky :)
[15:08:55] <pyzozord> it has channels yes, but I can't WaitForAll in one line anyway
[15:09:14] <han-solo> `wg.Wait()` // ':)
[15:09:18] <MrElendig> dostoyevsky2: bad argument, py3 was out quite a few years before 2012
[15:10:03] <dostoyevsky2> MrElendig: You do realize that they still EOL python3.x versions...
[15:10:28] <MrElendig> yes, but most of the code written back then will run fine today on 3.10
[15:11:02] *** Joins: rvalue (~rvalue@user/rvalue)
[15:11:29] *** Joins: Midjak (~Midjak@82.66.147.146)
[15:12:16] <MD87> Wouldn't most of the code written in 2012 be py2 code though?
[15:12:55] <MD87> The adoption of py3 was a bit of a slow burn, from what I recall
[15:12:57] <pyzozord> han-solo: yes, it's just quite a bit more verbose
[15:13:03] *** Quits: Maxattax97 (~max@h89.224.131.174.dynamic.ip.windstream.net) (Remote host closed the connection)
[15:13:07] <pyzozord> I suppose in golang people just live with that
[15:13:15] <ikke> yes
[15:13:19] <ikke> that's the whole language
[15:13:33] <pyzozord> sometimes I am not bothered by verbosity when it makes complex ideas clear
[15:13:45] <pyzozord> but I feel in this case WaitForAll() would make things clearer
[15:15:40] <dostoyevsky2> My pet peeve is that there is a `regexp.ReplaceAllString' but not a regexp.ReplaceOneString() ... so "foo".replace(/o/g, "") but you can't just do something like /o/ without /g
[15:16:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:21:58] *** Joins: bluedust (~bluedust@103.160.194.139)
[15:22:00] <dostoyevsky2> https://old.reddit.com/r/golang/comments/tdjcfj/i_wanted_to_statically_link_some_stuff_that_used/ <- I really like that zig makes cross-compiling with cgo easier but they don't seem support OpenBSD and also not osx 10.11 ... so I guess I have to keep my dedicated build machines for cgo code
[15:22:06] *** Quits: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[15:22:26] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[15:22:35] <ikke> pyzozord: trying to think how such a function would work, but it seems to me it can cover only the most simple cases
[15:27:24] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[15:37:57] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[15:39:26] *** Joins: bluedust_ (~bluedust@117.217.158.59)
[15:42:26] *** Quits: bluedust (~bluedust@103.160.194.139) (Ping timeout: 245 seconds)
[15:47:04] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 272 seconds)
[15:47:04] *** Quits: lazysundaydreams (~mistr@ip-89-177-73-161.net.upcbroadband.cz) (Ping timeout: 272 seconds)
[15:49:58] *** Joins: lazysundaydreams (~mistr@ip-89-177-73-161.net.upcbroadband.cz)
[15:52:07] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[15:52:09] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[15:53:01] *** Quits: bluedust_ (~bluedust@117.217.158.59) ()
[15:54:48] *** Quits: lazysundaydreams (~mistr@ip-89-177-73-161.net.upcbroadband.cz) (Ping timeout: 252 seconds)
[15:59:45] *** Quits: hydracat (~hydracat_@pool-96-230-188-202.prvdri.fios.verizon.net) (Ping timeout: 252 seconds)
[16:01:59] *** Joins: han-solo (~hanish@user/han-solo)
[16:02:02] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[16:07:14] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:07:14] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:07:29] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[16:07:29] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:08:37] *** Quits: enamon (~enamon@2604:a880:cad:d0::2f:9001) (Ping timeout: 240 seconds)
[16:09:05] *** Quits: pjs (~pjs@user/pjs) (Ping timeout: 252 seconds)
[16:09:34] *** Joins: enamon (~enamon@2604:a880:cad:d0::2f:9001)
[16:13:59] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:14:33] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:15:09] *** Quits: arinov (~arinov@5.24.97.248) (Ping timeout: 252 seconds)
[16:16:16] *** halden^ is now known as halden
[16:16:55] *** Joins: beholders_eye (~weechat@2804:1b3:70c1:9d4a:2e43:cfbd:1e47:3d7e)
[16:21:28] *** Joins: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de)
[16:21:55] *** Quits: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[16:22:12] <pyzozord> fg
[16:22:17] <pyzozord> oops sorry
[16:22:24] <pyzozord> ikke: how so?
[16:23:18] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:29:26] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[16:30:54] *** Quits: walterwhip (~walterwhi@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:31:16] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:32:00] *** Joins: walterwhip (~walterwhi@user/walterwhip)
[16:37:49] *** Quits: walterwhip (~walterwhi@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:38:31] *** Joins: ricci (~ricci@31.187.110.131)
[16:39:45] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[16:39:57] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:43:34] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[16:47:14] *** Quits: moog_ (~moog@107.126.53.51) (Ping timeout: 272 seconds)
[16:50:26] *** Joins: rvalue (~rvalue@user/rvalue)
[16:52:40] *** Joins: toulene7 (~toulene@user/toulene)
[16:53:04] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[16:53:05] *** toulene7 is now known as toulene
[16:53:34] *** Quits: King_julian (~King_juli@41.1.142.79) (Ping timeout: 272 seconds)
[16:53:56] *** Joins: treeford (~charleste@user/treeford)
[16:56:53] *** Parts: trafficjam (~qubes@119-12-218-129.dynamic.ipstaraus.com) ()
[17:00:46] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 245 seconds)
[17:01:30] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:09:10] *** Joins: Atque (~Atque@user/atque)
[17:14:06] *** Quits: xse (~xse@user/xse) (Ping timeout: 250 seconds)
[17:19:29] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:19:29] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:19:43] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[17:19:44] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:21:55] *** Joins: servytor (uid525486@id-525486.hampstead.irccloud.com)
[17:23:43] *** Joins: King_julian (~King_juli@41.1.142.79)
[17:26:02] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 240 seconds)
[17:27:39] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:28:13] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:30:55] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[17:36:59] *** Joins: crashrep (~crashrep@user/crashrep)
[17:42:12] *** Quits: King_julian (~King_juli@41.1.142.79) (Ping timeout: 240 seconds)
[17:45:54] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[17:48:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[17:50:20] *** Quits: ypszilon (~ypszilon@user/ypszilon) (Quit: ᮮ)
[17:50:47] *** Joins: ypszilon (~ypszilon@user/ypszilon)
[17:54:19] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[17:56:59] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[17:57:06] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:57:08] *** Joins: bailsman (~Mm1@xls01.freecult.org)
[17:57:20] *** Parts: bailsman (~Mm1@xls01.freecult.org) ()
[18:02:47] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:03:21] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:07:37] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[18:08:52] *** Joins: arkurious (~arkurious@user/arkurious)
[18:10:31] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com)
[18:13:23] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com) (Remote host closed the connection)
[18:14:46] *** Joins: pjs (~pjs@user/pjs)
[18:18:49] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com)
[18:20:58] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[18:21:49] *** Quits: michele (~eraser@user/michele) (Read error: Connection reset by peer)
[18:23:24] *** Joins: xse (~xse@user/xse)
[18:24:14] *** Joins: michele (~eraser@user/michele)
[18:26:23] *** Parts: jla (~jordi@137.215.35.37.dynamic.jazztel.es) ()
[18:27:08] *** Quits: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:27:26] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[18:31:17] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[18:32:33] *** Joins: lechner (~lechner@debian/lechner)
[18:33:58] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:35:13] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[18:35:33] *** Joins: teasea (~teasea@user/teasea)
[18:35:47] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[18:40:07] *** Joins: tg (~tg@rockylinux/infra/tg)
[18:41:12] *** Quits: halden (~halden@lden.im) (Quit: Bye)
[18:43:15] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[18:43:24] *** Joins: halden (~halden@lden.im)
[18:44:01] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[18:45:17] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[18:52:02] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[18:52:03] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[18:52:03] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[18:52:15] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:52:17] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[18:53:22] *** Joins: andlabs (~andlabs@2605:ef80:8093:619e:f822:b4d2:e406:23b)
[18:54:20] *** Joins: Rhvs (Rhys@help.lux.melted.me)
[18:56:08] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[18:56:31] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[18:58:19] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:58:53] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:59:13] *** Joins: moog (~moog@98.97.86.136)
[19:01:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:03:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:06:08] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:08:22] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[19:08:46] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:09:03] *** Quits: ghost08 (~ghost08@adsl-dyn-50.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[19:12:13] *** Quits: k0ta (3da8335bb9@2604:bf00:561:2000::10a) (Remote host closed the connection)
[19:12:13] *** Quits: paulgrmn (4935b8e2c8@user/paulgrmn) (Remote host closed the connection)
[19:12:13] *** Quits: akelly (24aca7a63b@2604:bf00:561:2000::152) (Remote host closed the connection)
[19:12:13] *** Quits: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17) (Remote host closed the connection)
[19:12:13] *** Quits: kss (beeff4a8ee@2604:bf00:561:2000::3b8) (Remote host closed the connection)
[19:12:13] *** Quits: d4ve (3c3f700800@user/d4ve) (Remote host closed the connection)
[19:12:13] *** Quits: hannibal_ad_port (c99abf4150@2604:bf00:561:2000::297) (Remote host closed the connection)
[19:12:13] *** Quits: swissChili (a189591c17@user/swisschili) (Write error: Broken pipe)
[19:12:13] *** Quits: nhanb (522d4a25ea@2604:bf00:561:2000::13b) (Remote host closed the connection)
[19:12:13] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (Remote host closed the connection)
[19:12:13] *** Quits: tom5760 (73d4025b14@user/tom5760) (Write error: Broken pipe)
[19:12:13] *** Quits: mrmanner (29a724a13e@user/mrmanner) (Write error: Broken pipe)
[19:12:13] *** Quits: ddevault (e7b4bb6755@sourcehut/staff/ddevault) (Write error: Broken pipe)
[19:12:13] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (Remote host closed the connection)
[19:12:13] *** Quits: raiaq (0a41c94ab1@user/raiaq) (Remote host closed the connection)
[19:12:13] *** Quits: hwrd (aa272caead@2604:bf00:561:2000::137) (Remote host closed the connection)
[19:12:13] *** Quits: coder_kalyan (2c72974719@user/coderkalyan) (Write error: Broken pipe)
[19:12:13] *** Quits: geep (326606a8c6@2604:bf00:561:2000::3bd) (Remote host closed the connection)
[19:12:13] *** Quits: okt (560965ea7b@user/okt) (Remote host closed the connection)
[19:12:13] *** Quits: skeels (21030cf582@2604:bf00:561:2000::237) (Remote host closed the connection)
[19:12:13] *** Quits: toothlessgear (2c15493d69@user/toothlessgear) (Remote host closed the connection)
[19:12:13] *** Quits: psw (2b13331353@user/psw) (Remote host closed the connection)
[19:12:13] *** Quits: frode (9b90a24314@2604:bf00:561:2000::1d1) (Remote host closed the connection)
[19:12:13] *** Quits: blu (c99e8442f9@2604:bf00:561:2000::220) (Remote host closed the connection)
[19:12:13] *** Quits: fmac (bf93f83905@2604:bf00:561:2000::26) (Remote host closed the connection)
[19:12:14] *** Quits: saksophony (5fd0e087b8@2604:bf00:561:2000::1ff) (Remote host closed the connection)
[19:12:15] *** Quits: mendelmaleh (e58b23db5e@2604:bf00:561:2000::22b) (Remote host closed the connection)
[19:12:15] *** Quits: amolith (d1421e166a@nixnet/founder/amolith) (Remote host closed the connection)
[19:12:16] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Quit: Leaving)
[19:12:33] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[19:12:33] *** Joins: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17)
[19:12:34] *** Joins: nhanb (522d4a25ea@2604:bf00:561:2000::13b)
[19:12:34] *** Joins: frode (9b90a24314@2604:bf00:561:2000::1d1)
[19:12:39] *** Joins: paulgrmn (4935b8e2c8@2604:bf00:561:2000::93)
[19:12:40] *** Joins: kyle_ (beeff4a8ee@2604:bf00:561:2000::3b8)
[19:12:40] *** Joins: geep (326606a8c6@2604:bf00:561:2000::3bd)
[19:12:41] *** Joins: fmac (bf93f83905@2604:bf00:561:2000::26)
[19:12:41] *** Joins: skeels (21030cf582@2604:bf00:561:2000::237)
[19:12:41] *** Joins: saksophony (5fd0e087b8@2604:bf00:561:2000::1ff)
[19:12:41] *** Joins: coder_kalyan (2c72974719@user/coderkalyan)
[19:12:41] *** Joins: raiaq (0a41c94ab1@user/raiaq)
[19:12:44] *** Quits: paulgrmn (4935b8e2c8@2604:bf00:561:2000::93) (Changing host)
[19:12:44] *** Joins: paulgrmn (4935b8e2c8@user/paulgrmn)
[19:12:48] *** Joins: hwrd (aa272caead@2604:bf00:561:2000::137)
[19:12:48] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[19:12:48] *** Joins: d4ve (3c3f700800@user/d4ve)
[19:12:48] *** Joins: amolith (d1421e166a@nixnet/founder/amolith)
[19:12:48] *** Joins: k0ta (3da8335bb9@2604:bf00:561:2000::10a)
[19:12:48] *** Joins: mrmanner (29a724a13e@user/mrmanner)
[19:12:48] *** Joins: tom5760 (73d4025b14@user/tom5760)
[19:12:50] *** Joins: okt (560965ea7b@user/okt)
[19:12:53] *** Joins: ddevault (e7b4bb6755@sourcehut/staff/ddevault)
[19:12:53] *** Joins: akelly (24aca7a63b@2604:bf00:561:2000::152)
[19:12:56] *** Joins: toothlessgear (2c15493d69@user/toothlessgear)
[19:12:56] *** Joins: mendelmaleh (e58b23db5e@2604:bf00:561:2000::22b)
[19:13:03] *** Joins: m15o (965950e801@2604:bf00:561:2000::27d)
[19:13:03] *** Joins: swissChili (a189591c17@user/swisschili)
[19:13:03] *** Joins: hannibal_ad_port (c99abf4150@2604:bf00:561:2000::297)
[19:13:03] *** Joins: psw (2b13331353@user/psw)
[19:13:03] *** Joins: blu (c99e8442f9@2604:bf00:561:2000::220)
[19:16:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[19:25:27] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com) (Remote host closed the connection)
[19:29:21] *** Joins: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com)
[19:29:44] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com)
[19:30:06] <braxas> is there some way to set GOPRIVATE inside the repo
[19:30:23] <braxas> so that each person who clones a repo does not have to set it themselves
[19:31:53] <bookworm> no
[19:32:00] <bookworm> it's an environment variable
[19:32:55] <braxas> well, in my case it actually is only in ~/.config/go/env
[19:33:29] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:33:29] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:33:42] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:33:43] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[19:39:07] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:39:07] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:39:21] <bookworm> sure, but that needs a cli call to go, and git is sane enough that it doesn't allow for arbitrary code execution on clone unless you added the corresponding hook manually
[19:39:35] <bookworm> that would be a security nightmare
[19:40:28] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[19:41:49] *** Quits: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net) (Quit: Konversation terminated!)
[19:42:44] <braxas> okay but I was hoping for something like .gorc in repo which would control how go behaves in that directory
[19:42:49] <braxas> anyway, it is fine
[19:42:52] <braxas> was just wondering
[19:42:55] <braxas> not a big issue either way
[19:43:04] <braxas> thanks for exaplaining bookworm
[19:44:02] <tristero> I'd like to see that too. I have one package that needs CGO_ENABLED=0, and I always forget it
[19:44:54] <bookworm> makefiles are a thing
[19:45:00] <siXy> This stuff is a big part of why containers are popular. Your dockerfile can take care of all these things for you.
[19:45:00] <bookworm> they still work
[19:45:11] <siXy> makefiles too, but are less "cool".
[19:46:40] <tristero> sure, but neither is as nice as just "go build"
[19:46:50] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[19:47:16] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:47:20] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Client Quit)
[19:47:27] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Write error: Broken pipe)
[19:47:36] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[19:47:43] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[19:47:46] <bookworm> that only works if your build is very naive
[19:47:59] <bookworm> if you need to disable cgo your build isn't
[19:48:37] <bookworm> same if you need to inject flags to the linker, which you probably want to do if you want to have reproducible builds / hardening options
[19:49:33] <bookworm> (pie, relro etc)
[19:51:18] *** Joins: andlabs_ (~andlabs@2605:ef80:8093:9211:d97c:713f:998b:26ef)
[19:51:24] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 250 seconds)
[19:52:36] *** Quits: andlabs (~andlabs@2605:ef80:8093:619e:f822:b4d2:e406:23b) (Ping timeout: 240 seconds)
[19:54:00] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[19:54:55] *** Joins: koo5_ (~quassel@51.140.155.227)
[19:59:55] *** Joins: Giovanni (~Giovanni@176.55.166.222)
[20:02:31] *** Quits: Louis (~Louis@my-hostna.me) (Remote host closed the connection)
[20:04:18] *** Joins: Louis (~Louis@my-hostna.me)
[20:04:59] *** Quits: beholders_eye (~weechat@2804:1b3:70c1:9d4a:2e43:cfbd:1e47:3d7e) (Quit: WeeChat 3.3)
[20:06:21] *** Joins: beholders_eye (~weechat@2804:1b3:70c1:9d4a:2e43:cfbd:1e47:3d7e)
[20:07:02] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[20:08:18] *** Quits: andlabs_ (~andlabs@2605:ef80:8093:9211:d97c:713f:998b:26ef) (Ping timeout: 250 seconds)
[20:08:22] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:08:23] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:08:36] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[20:08:38] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[20:10:02] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Ping timeout: 250 seconds)
[20:11:32] *** Joins: Atque (~Atque@user/atque)
[20:12:42] *** Joins: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net)
[20:12:42] *** Quits: mud (~mud@user/kadoban) (Remote host closed the connection)
[20:12:42] *** Quits: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net) (Changing host)
[20:12:42] *** Joins: Latrina (~Latrina@user/latrina)
[20:12:44] *** Quits: Latrina_ (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net) (Read error: Connection reset by peer)
[20:13:07] *** Joins: mud (~mud@user/kadoban)
[20:13:10] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com) (Remote host closed the connection)
[20:14:15] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[20:14:15] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[20:19:55] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[20:20:35] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[20:24:00] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[20:33:44] <pyzozord> what does "iota" do?
[20:34:36] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[20:34:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[20:34:45] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 252 seconds)
[20:35:07] <ikke> https://golangbyexample.com/iota-in-golang/
[20:36:57] <pyzozord> oh how strange, is that used often?
[20:37:42] <fizzie> For approximating enumerated types mostly.
[20:37:44] <ikke> It's how you would create enum like tytpes
[20:38:12] <greeb> pyzozord: check out some well-known projects and search for iota for many real world examples
[20:38:14] <greeb> https://github.com/gohugoio/hugo/search?q=iota
[20:40:23] <pyzozord> when I do const ( a = 1; b; c) they will not autoincrement will they?
[20:40:42] *** Joins: Praise (~Fat@user/praise)
[20:41:01] <fizzie> That's right; that'd leave them all equal to 1.
[20:41:45] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:44:16] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Ping timeout: 250 seconds)
[20:45:21] *** Joins: treeford (~charleste@user/treeford)
[20:45:25] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[20:46:12] *** Joins: cstls (~ruiner@2603-7081-0800-4824-941c-70f2-a219-ad81.res6.spectrum.com)
[20:49:51] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[20:50:08] *** Joins: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com)
[21:00:28] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[21:00:48] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[21:04:04] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[21:05:43] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:05:49] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:05:49] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:07:50] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Read error: Connection timed out)
[21:08:20] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[21:09:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:13:01] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Ping timeout: 240 seconds)
[21:13:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[21:13:42] *** Quits: cstls (~ruiner@2603-7081-0800-4824-941c-70f2-a219-ad81.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:21:06] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[21:26:50] *** Joins: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net)
[21:31:18] *** Joins: jpw (~jpw@user/jpw)
[21:33:20] *** Joins: mattfoxxx (~mattfoxxx@200116b822fc9a00c05b4fdabbc92166.dip.versatel-1u1.de)
[21:34:10] *** Quits: isflavior (~isflavior@2001:8a0:5dd8:4100:9064:d69:f6a4:2495) (Quit: isflavior)
[21:41:09] *** Joins: belphegor666 (~satan@user/belphegor666)
[21:43:18] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:47:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[21:48:31] *** Joins: pepee (~pepee@user/pepee)
[21:50:14] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Remote host closed the connection)
[21:50:24] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:50:47] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Client Quit)
[21:53:04] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:59:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:02:30] *** Quits: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net) (Quit: Textual IRC Client: www.textualapp.com)
[22:04:24] <ishan> Hello! Is there a decent/well-known library which provides a peekable queue? I tried this out https://pkg.go.dev/github.com/golang-collections/go-datastructures/queue but the peek operation is only supported in Priority Queue. I also read some answers on SO and they suggested using linked lists(using containers/list) but I'd prefer to use a library right now
[22:07:44] *** Joins: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com)
[22:08:04] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[22:08:12] <ishan> Actually I just realized queue or stack doesn't matter. I just need peekable something. I'll do this with a stack
[22:09:16] *** Joins: Tasi (~Tasi@20014C4C220C8F0075294762935D112C.catv.pool.telekom.hu)
[22:11:40] <j416> ishan: not a queue, but bufio.Reader in case useful. https://pkg.go.dev/bufio#Reader.Peek
[22:11:58] <j416> (sort of a queue, bytes queue)
[22:12:13] <ishan> thank you for the suggestion but this will not work for me
[22:12:28] <j416> perhaps you can steal ideas from it.
[22:16:14] <ishan> Does the code to "pop" last item here look okay? https://go.dev/play/p/NbFgwSTlmM4
[22:20:06] *** Joins: freakazoid333 (~matt@2603-9000-cf03-86c3-7da2-d52d-7c03-c4c8.inf6.spectrum.com)
[22:21:54] <j416> write a test and find out? :)
[22:22:38] <j416> haven't tried it, but it looks ok to me
[22:22:52] <ishan> Will do. Here I meant, Does it look _okay_ from a performance standpoint? Is that a _good_ way to reduce the size of array ?
[22:23:18] <ishan> Another option is to use a counter and reduce the counter instead. Since I know ahead of the time the size of stack, That will probably be faster?
[22:23:31] <j416> it won't
[22:23:40] <j416> there's no reallocation here
[22:24:35] <j416> "s = s[:len(s)-1]" effectively just decrements an integer (the len field of the slice header)
[22:24:38] <ishan> Okay, that makes sense. Will `s.store = s.store[:len(s.store)-1]` deallocate ?
[22:24:41] <ishan> Ah
[22:24:56] <j416> you can check it with len(s) vs. cap(s)
[22:24:56] <ishan> Thank you for explaining!
[22:26:59] <j416> you can also see that it does not reallocate by slicing it back -> https://go.dev/play/p/opNNRSCC89L
[22:27:09] <j416> the underlying array is the same still
[22:29:09] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Ping timeout: 252 seconds)
[22:29:11] *** Joins: Atque (~Atque@user/atque)
[22:30:24] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[22:31:39] *** Quits: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net) (Remote host closed the connection)
[22:35:13] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:35:16] *** Joins: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net)
[22:40:00] *** Quits: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net) (Remote host closed the connection)
[22:41:44] *** Joins: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net)
[22:41:46] *** Quits: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net) (Remote host closed the connection)
[22:43:15] *** Joins: dr0n (~nabromov@97e36665.skybroadband.com)
[22:45:39] *** Joins: crashrep (~crashrep@user/crashrep)
[22:46:57] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[22:47:03] *** Joins: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net)
[22:47:36] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 272 seconds)
[22:50:16] *** imm__ is now known as imm_
[22:51:00] *** Quits: dr0n (~nabromov@97e36665.skybroadband.com) (Quit: WeeChat 3.3)
[22:51:19] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[22:52:12] *** Joins: dr0n (~nabromov@97e36665.skybroadband.com)
[22:56:37] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Ping timeout: 240 seconds)
[23:00:33] *** Quits: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz) (Quit: Leaving)
[23:01:20] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[23:01:29] *** southey2 is now known as foxtrot
[23:03:18] *** Joins: absc (~absc@dynamic-adsl-94-34-219-179.clienti.tiscali.it)
[23:06:31] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:16:46] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[23:23:03] *** Quits: lilgopher (~ubuntu@2601:241:8000:38f0::342c) (Ping timeout: 250 seconds)
[23:25:22] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Remote host closed the connection)
[23:25:47] *** Joins: k8yun (~k8yun@user/k8yun)
[23:31:25] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a12:7958:b98f:661d:a8ad)
[23:32:04] *** Joins: agrosant (~agrosant@46.12.50.59.dsl.dyn.forthnet.gr)
[23:33:27] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[23:33:48] *** Joins: walterwhip (~walterwhi@user/walterwhip)
[23:41:27] *** Quits: walterwhip (~walterwhi@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[23:51:12] *** Quits: servytor (uid525486@id-525486.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:52:02] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 240 seconds)
[23:52:12] *** Joins: cyrus_mc_ (~cyrus_mc_@45.62.180.58)
[23:54:32] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[23:57:17] *** cyrus_mc_ is now known as cyrus_mc
[23:57:30] <cyrus_mc> Uploaded file: https://uploads.kiwiirc.com/files/1cdff6492279bb9afbf962e63e84f53b/pasted.txt
[23:57:32] *** Quits: sig__ (~sig@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Quit: Leaving)
[23:57:38] <cyrus_mc> Sorry.
[23:57:46] *** Joins: lungaro (~sig@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[23:57:46] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[23:57:53] <lungaro> is anyone aware of a go lib that uses netlink like ss does instead of parsing /proc {udp,tcp} files?
[23:58:34] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[23:59:09] *** Joins: mud (~mud@user/kadoban)
[23:59:22] <cyrus_mc> Somewhat of a golang newbiew and trying to investigate memory usage (of Prometheus) to determine why an installation is taking more memory than I think it should be. Using pprof tool to look at heap space it shows: Showing nodes accounting for 538.96MB, 70.98% of 759.28MB total. Yet cgroup memory.stat shows 1.8G of anon memory (and active file
[23:59:23] <cyrus_mc> cache is only 8 Megs). Wondering why the discrepancy between what profile tool shows and what the underlying OS reports for used memory.
