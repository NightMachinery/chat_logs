[00:12:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[00:13:15] *** Quits: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:13:43] *** Quits: girafe2 (~girafe@176-147-142-235.abo.bbox.fr) (Quit: Leaving)
[00:14:06] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[00:14:38] *** Joins: fikran (~fikran@user/fikran)
[00:24:23] <mickey8> b0nn yeah that's what im about to end up doing. what parameters do you use to see if it's the "same" request? it's easy for GET but for POST you should be considering the body of the request
[00:24:55] <lungaro> When are generics? Is it go 1.18?
[00:25:00] <b0nn> what parameters?
[00:25:11] <b0nn> Um, that's a business logic question
[00:25:11] *** Joins: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com)
[00:25:51] <b0nn> ie. time since that endpoint was hit by that IP, or by that session (session key in the request) or time in general
[00:26:11] <ikke> And POST requests are often not idempotent
[00:26:19] <ikke> (You should assume they are not)
[00:26:24] <b0nn> the latter is "we return cached for all queries when the cache is younger than X
[00:26:28] <mickey8> i mean determine when to pull from cache (and where). like, i decided to cache a specific route, and let's say we're doing it very simple and store in memory, so there's some map[string]interface{}, where string is a hash of the path or (path,body) and the result is in the interface, right?
[00:27:38] <mickey8> then on the next request, there's a key of the hash of path or path,body or whatever which can be pulled and served, otherwise move to next handler
[00:28:10] <mickey8> assuming my logic is correct so far, what would you consider in the hash other than the path (and the body for a POST request)?
[00:30:13] <mickey8> and the next problem that i have no idea how to solve is how do you do this without applying 2 handlers - one before the request is actually processed (to serve cached results) and one after (to save results to cache)?
[00:31:40] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:6442:8ff7:5284:391f)
[00:32:54] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:35:02] <b0nn> I have no idea what you mean by "path"
[00:35:38] <mickey8> the url path, like /api/v1/getthis
[00:36:04] <b0nn> The key/hash you decide on needs to identify the unique data in the value, and you need to be able to look that up
[00:36:13] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:6442:8ff7:5284:391f) (Ping timeout: 252 seconds)
[00:36:22] <b0nn> that "path" is your endpoint route
[00:38:01] *** Joins: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225)
[00:38:20] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[00:39:28] *** Quits: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225) (Remote host closed the connection)
[00:39:30] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:41:28] <mickey8> i'm aware. never mind that, i'll figure that one out. can you give me a hitn on the other question?
[00:42:44] <b0nn> what other question?
[00:42:50] <seebs> usually, there's a handler which (1) checks cache, (2) failing that, does the thing and stores the result in the cache before returning it
[00:43:41] <b0nn> oh usually I have the handler check if the cache needs to be used or not, and, if not grab the fresh data then update the cache and return
[00:43:44] <j416> mickey8: don't forget the mutex
[00:44:13] <j416> (perhaps wrap your map in something with methods that hide the mutex stuff so you won't miss it)
[00:44:43] <j416> also don't forget to expire your cache as needed
[00:44:57] <j416> (if there's a risk it'll grow forever)
[00:44:59] <mickey8> so the cache handler itself calls the api functions? because right now the api functions are handlers here
[00:45:33] <mickey8> i mean it makes sense if the api functions are the 'next' handlers after the cache handler, but then how would it even know what the newer result was
[00:46:13] <j416> mickey8: handler() { if val, ok := cache.Get(key); ok { (respond with val and return) } (regular implementation) cache.Set(key, val) (respond with val and return) }
[00:46:37] <b0nn> I like to seperate things, handler functions orchestrate to an extent
[00:47:20] <b0nn> but the logic for this seems to belong at handler level as it's a handler that's choosing which data source to use
[00:47:47] <b0nn> it could be in the code called by the handler and the handler never needs to know that a cached value is being returned too
[00:47:50] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:498f:6d10:9aed:fe85) (Read error: Connection reset by peer)
[00:48:04] <j416> ^
[00:48:09] <j416> sometimes it makes sense to cache a bit higher up
[00:48:33] <j416> for example, your response may be dependent on the current time
[00:49:00] <mickey8> maybe i wasnt explaining myself well. i understand the cache handler, that's fine. im asking about how the cache handler would know the new result, considering right now it just checks the cache and then next.servehttp if no cache is found?
[00:49:10] <j416> in this case it might make more sense to cache data higher up, and filter based on time later, each and ever time
[00:49:11] <j416> every*
[00:50:35] <j416> mickey8: in that case the only way I can imagine would be to intercept the write and then forward it to the real response writer
[00:50:51] <j416> but, seems like a bit of a hassle
[00:51:18] <j416> easier to just put a cdn in front of the service and set proper cache headers
[00:51:32] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Read error: Connection reset by peer)
[00:51:45] *** Joins: cnf (~cnf@d5152daf0.static.telenet.be)
[00:52:19] *** Joins: rcernin (~rcernin@124.190.136.148)
[00:54:02] <noord> mickey8: why wouldn't you delegate caching to inner layer also there will be chance to add some business logic, think about this, request -> middleware -> your route -> CachedXFetcher -> XFetcher -> Data Source
[00:59:45] <mickey8> j416 mostly because im doing this to learn
[01:00:25] <mickey8> noord i will probably go that way eventually if i cant figure it out otherwise :q
[01:00:34] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[01:03:38] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:09:43] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:11:38] *** Joins: rcernin_ (~rcernin@124.190.136.148)
[01:12:29] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[01:12:30] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[01:12:30] *** Joins: resamvi (~resamvi@user/resamvi)
[01:14:21] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 252 seconds)
[01:14:52] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:29:06] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Ping timeout: 268 seconds)
[01:30:13] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[01:38:55] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Ping timeout: 252 seconds)
[01:41:03] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[01:41:14] <joshbaptiste> I git cloned an older project github.com/leechristensen/GolangSSHServer .. modified the main.go file .. I dont get how to build it .. go build returns "go.mod file not found in current directory or any parent directory"
[01:42:16] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[01:43:38] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[01:44:25] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 252 seconds)
[01:45:47] *** Joins: rcernin (~rcernin@124.190.136.148)
[01:45:53] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[01:46:51] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:1401:22a5:674e:d69b)
[01:48:10] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[01:49:29] <b0nn> joshbaptiste: you have two choices - create a go.mod file (go mod init; go mod tidy) or `GO111MODULE=off` which sets an environment variable to use go modules to off (note: this may not be respected in future versions of Go)
[01:50:47] <joshbaptiste> b0nn: ah
[01:50:51] *** Joins: mrmanner (29a724a13e@user/mrmanner)
[01:51:30] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:51:38] <joshbaptiste> great the go mod commands did it thx
[01:52:51] *** Quits: mrmanner (29a724a13e@user/mrmanner) (Remote host closed the connection)
[01:52:59] *** Joins: mrmanner (29a724a13e@user/mrmanner)
[01:53:11] *** Joins: bpalmer (~user@user/bpalmer)
[01:53:31] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:ace0:35d7:981a:a684) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:53:47] *** Quits: rcernin_ (~rcernin@124.190.136.148) (Ping timeout: 256 seconds)
[02:01:33] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[02:05:41] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 252 seconds)
[02:07:05] *** Quits: Batzy (~quassel@user/batzy) (Quit: No Ping reply in 180 seconds.)
[02:08:21] *** Joins: Batzy (~quassel@user/batzy)
[02:08:37] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 252 seconds)
[02:10:55] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:11:05] *** Joins: alzgh (~alzgh@user/alzgh)
[02:17:04] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[02:17:23] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:5c71:3789:3fa4:15a9)
[02:17:30] *** Joins: motheki (~motheki@192.58.125.4)
[02:19:06] *** Quits: Guest664 (~savio@177.12.48.155) (Quit: Leaving)
[02:22:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:22:48] *** Quits: motheki (~motheki@192.58.125.4) (Remote host closed the connection)
[02:23:17] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:5c71:3789:3fa4:15a9) (Ping timeout: 252 seconds)
[02:23:30] *** Joins: motheki (~motheki@192.58.125.4)
[02:23:58] *** Joins: fikran (~fikran@user/fikran)
[02:28:33] *** Quits: motheki (~motheki@192.58.125.4) (Quit: motheki)
[02:31:01] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:31:18] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:32:38] *** Quits: normen (~normen@p200300d71725d600f4eab571d3776494.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[02:35:15] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[02:35:32] *** Joins: bindu (~bindu@user/bindu)
[02:40:10] *** Joins: arinov (~arinov@213.194.126.155)
[02:40:15] *** Joins: rcernin_ (~rcernin@124.190.136.148)
[02:42:02] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[02:44:44] *** Quits: rcernin_ (~rcernin@124.190.136.148) (Ping timeout: 252 seconds)
[02:46:53] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[02:46:53] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[02:46:53] *** Joins: resamvi (~resamvi@user/resamvi)
[02:47:53] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:48:45] <b0nn> How are people building/compressing their lambda files when using terraform
[02:49:46] <b0nn> Is it just a matter of resource "null_resource" "build_stuff" { provisioner "local-exec" {command; command; working_dir}}
[02:53:22] *** Joins: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de)
[02:57:20] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:57:41] *** Joins: normen (~normen@p200300d71725d60065a9ab6e56e19e7c.dip0.t-ipconnect.de)
[03:04:18] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[03:05:28] *** Quits: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:19:22] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:24:46] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[03:25:02] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:5c71:3789:3fa4:15a9)
[03:25:17] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:26:19] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[03:27:31] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:30:34] *** Quits: lilgopher (~textual@2601:241:8000:38f0:80d2:5d75:881a:25e6) (Quit: Textual IRC Client: www.textualapp.com)
[03:39:33] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:5c71:3789:3fa4:15a9) (Ping timeout: 252 seconds)
[03:47:59] *** Quits: adip (~adip@deq245.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[03:48:15] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 256 seconds)
[03:51:45] *** Joins: cnf5 (~cnf@d5152daf0.static.telenet.be)
[03:52:11] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Read error: Connection reset by peer)
[03:52:11] *** cnf5 is now known as cnf
[03:53:00] *** Joins: rcernin (~rcernin@124.190.136.148)
[03:59:35] *** Quits: vimal (~vimal@ip-213-127-89-120.ip.prioritytelecom.net) (Ping timeout: 256 seconds)
[04:01:50] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::100f)
[04:01:52] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:16:24] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:18:03] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[04:18:36] *** Joins: vimal (~vimal@ip-213-127-42-70.ip.prioritytelecom.net)
[04:19:59] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[04:25:20] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:29:40] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[04:30:39] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:1401:22a5:674e:d69b) (Quit: smeeagle)
[04:31:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[04:31:54] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:32:44] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[04:33:19] *** Joins: fikran (~fikran@user/fikran)
[04:33:43] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[04:36:28] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[04:39:18] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 256 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:10] *** Joins: rcernin (~rcernin@124.190.136.148)
[04:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[05:04:04] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:5c71:3789:3fa4:15a9)
[05:04:39] *** Joins: frost (~frost@user/frost)
[05:09:15] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:5c71:3789:3fa4:15a9) (Ping timeout: 268 seconds)
[05:18:09] *** Joins: darkapex (~darkapex@user/darkapex)
[05:19:17] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[05:21:00] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::100f) (Quit: ZNC 1.8.2 - https://znc.in)
[05:23:19] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 252 seconds)
[05:34:36] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:36:47] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: https://kn100.me :))
[05:37:21] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[05:37:59] *** Quits: whaley (~whaley@2603-6080-a301-33d1-456a-1e4c-dd86-8e17.res6.spectrum.com) (Ping timeout: 252 seconds)
[05:39:05] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[05:41:02] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:bc1c:bbc4:ad37:23e0)
[05:44:14] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: https://kn100.me :))
[05:44:34] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[05:49:11] *** Joins: rcernin_ (~rcernin@124.190.136.148)
[05:49:43] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 252 seconds)
[05:51:11] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:bc1c:bbc4:ad37:23e0) (Ping timeout: 268 seconds)
[05:59:44] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5c71:3789:3fa4:15a9)
[06:04:23] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5c71:3789:3fa4:15a9) (Ping timeout: 252 seconds)
[06:07:18] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[06:08:17] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:12:38] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[06:37:07] *** Quits: rcernin_ (~rcernin@124.190.136.148) (Ping timeout: 256 seconds)
[06:40:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:41:03] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:42:30] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:42:40] *** Joins: fikran (~fikran@user/fikran)
[06:45:27] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[06:46:24] *** Joins: girafe2 (~girafe@176-147-142-235.abo.bbox.fr)
[06:48:23] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 252 seconds)
[06:48:29] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:57:56] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:01:29] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[07:02:37] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[07:04:09] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:08:51] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[07:12:54] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[07:12:54] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[07:12:54] *** Joins: resamvi (~resamvi@user/resamvi)
[07:13:26] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 256 seconds)
[07:23:49] *** Quits: getynge (~getynge@2601:702:80:2fc0::a0a3) (Remote host closed the connection)
[07:37:42] *** Joins: on^ (~on@68.101.58.90)
[07:38:53] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:43:25] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[07:47:52] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5c71:3789:3fa4:15a9)
[07:52:44] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5c71:3789:3fa4:15a9) (Ping timeout: 252 seconds)
[08:10:31] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 252 seconds)
[08:14:29] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:17:55] *** Joins: rcernin (~rcernin@124.190.136.148)
[08:18:13] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 252 seconds)
[08:18:57] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[08:23:16] *** Quits: vimal (~vimal@ip-213-127-42-70.ip.prioritytelecom.net) (Ping timeout: 245 seconds)
[08:24:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:25:45] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 265 seconds)
[08:31:17] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[08:31:17] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[08:31:17] *** Joins: resamvi (~resamvi@user/resamvi)
[08:33:27] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:35:26] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:35:38] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 252 seconds)
[08:37:49] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[08:38:19] *** Quits: on^ (~on@68.101.58.90) (Remote host closed the connection)
[08:42:49] *** Joins: vimal (~vimal@ip-213-127-87-89.ip.prioritytelecom.net)
[08:43:23] *** Joins: dlew^ (~dlew@68.101.58.90)
[08:46:38] *** Quits: egy (egy@tilde.team) (Ping timeout: 252 seconds)
[08:48:47] *** Joins: shtirlic (~shtirlic@178.70.141.25)
[08:49:56] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[08:51:07] *** Quits: shtirlic_ (~shtirlic@178.70.141.25) (Ping timeout: 250 seconds)
[08:52:02] *** Joins: fikran (~fikran@user/fikran)
[08:52:19] *** Quits: frost (~frost@user/frost) (Ping timeout: 252 seconds)
[08:53:49] *** Joins: shtirlic_ (~shtirlic@178.70.141.25)
[08:55:46] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:55:53] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[08:56:31] *** Quits: shtirlic (~shtirlic@178.70.141.25) (Ping timeout: 256 seconds)
[08:57:47] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:00:04] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[09:00:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[09:01:38] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:02:07] *** Quits: loggingbot (~loggingbo@user/loggingbot) (Read error: Connection reset by peer)
[09:03:15] *** Joins: loggingbot (~loggingbo@user/loggingbot)
[09:04:09] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[09:04:09] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[09:04:09] *** Joins: resamvi (~resamvi@user/resamvi)
[09:04:54] *** Quits: b0nn (~shane@user/b0nn) (Ping timeout: 265 seconds)
[09:05:37] *** Joins: b0nn (~shane@user/b0nn)
[09:06:09] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[09:07:13] *** Joins: andlabs (~andlabs@2604:ca00:179:4a97:2911:d921:e865:6875)
[09:18:10] *** Joins: egy (egy@tilde.team)
[09:19:38] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 252 seconds)
[09:20:33] *** Quits: andlabs (~andlabs@2604:ca00:179:4a97:2911:d921:e865:6875) (Ping timeout: 252 seconds)
[09:27:00] *** Joins: andlabs (~andlabs@2604:ca00:17b:11db:68d8:efcf:5178:dfef)
[09:28:01] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[09:29:42] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[09:31:29] *** Quits: resamvi (~resamvi@user/resamvi) (Quit: resamvi)
[09:32:26] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[09:34:11] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:34:44] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:35:48] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[09:35:57] *** Joins: andlabs_ (~andlabs@2604:ca00:17b:11db:c9c2:aad1:a25a:8a02)
[09:36:42] *** Quits: aLeSD (~aLeSD@139.47.114.114) (Remote host closed the connection)
[09:38:12] *** Joins: andlabs__ (~andlabs@2604:ca00:17b:11db:2cd8:742f:9d75:a3b8)
[09:39:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[09:39:37] *** Quits: andlabs (~andlabs@2604:ca00:17b:11db:68d8:efcf:5178:dfef) (Ping timeout: 252 seconds)
[09:40:27] *** Joins: muirrum0 (~muirrum@sourcehut/user/muirrum)
[09:41:27] *** Quits: andlabs_ (~andlabs@2604:ca00:17b:11db:c9c2:aad1:a25a:8a02) (Ping timeout: 252 seconds)
[09:43:10] *** Joins: andlabs (~andlabs@2604:ca00:17b:11db:ddd6:55e4:d011:a904)
[09:44:40] *** Joins: andlabs_ (~andlabs@2604:ca00:17b:11db:cc10:22cd:b3da:11a1)
[09:46:35] *** Quits: andlabs__ (~andlabs@2604:ca00:17b:11db:2cd8:742f:9d75:a3b8) (Ping timeout: 252 seconds)
[09:48:03] *** Quits: andlabs (~andlabs@2604:ca00:17b:11db:ddd6:55e4:d011:a904) (Ping timeout: 252 seconds)
[09:50:37] *** Quits: andlabs_ (~andlabs@2604:ca00:17b:11db:cc10:22cd:b3da:11a1) (Ping timeout: 252 seconds)
[09:54:38] *** Joins: andlabs (~andlabs@2604:ca00:17b:11db:e07c:1417:6454:ef78)
[10:01:06] *** Joins: lauraaah (uid156848@id-156848.ilkley.irccloud.com)
[10:04:52] *** Joins: andlabs_ (~andlabs@209.107.190.180)
[10:08:13] *** Quits: andlabs (~andlabs@2604:ca00:17b:11db:e07c:1417:6454:ef78) (Ping timeout: 252 seconds)
[10:08:14] *** Quits: andlabs_ (~andlabs@209.107.190.180) (Read error: Connection reset by peer)
[10:08:16] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:08:32] *** Joins: andlabs__ (~andlabs@2604:ca00:17b:11db:505:7e37:fa50:d177)
[10:15:27] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:24:19] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:24:55] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[10:32:11] *** Joins: adip (~adip@deq245.neoplus.adsl.tpnet.pl)
[10:34:50] *** Quits: andlabs__ (~andlabs@2604:ca00:17b:11db:505:7e37:fa50:d177) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:40:10] *** Joins: whaley (~whaley@2603-6080-a301-33d1-456a-1e4c-dd86-8e17.res6.spectrum.com)
[10:41:17] *** Joins: mrig (~AdiIRC@user/mrig)
[10:42:21] *** Joins: neurocyte0132889 (~neurocyte@45.128.181.202)
[10:42:22] *** Quits: neurocyte0132889 (~neurocyte@45.128.181.202) (Changing host)
[10:42:22] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[10:48:06] *** Joins: Atque (~Atque@user/atque)
[10:53:49] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 256 seconds)
[10:54:19] *** Quits: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[10:55:06] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:56:11] *** Joins: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com)
[10:59:33] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[11:00:37] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[11:01:22] *** Joins: fikran (~fikran@user/fikran)
[11:01:43] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:02:54] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:03:27] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[11:05:26] *** Joins: alwyn (~alwyn@user/alwyn)
[11:06:19] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:10:54] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:12:18] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:15:15] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:20:40] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:21:53] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:30:25] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:30:43] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[11:33:24] *** Joins: rendar (~rendar@user/rendar)
[11:35:36] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:35:49] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:38:57] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[11:41:06] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:41:13] <alwyn> Is it sensible to make a struct that only has one field?
[11:41:43] <bookworm> depends
[11:41:51] <bookworm> if you attach methods, sure
[11:42:19] <bookworm> if not, just pass around the field value or make ot it's own type
[11:42:20] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:42:32] <bookworm> it its*
[11:42:37] *** Joins: rcernin (~rcernin@124.190.136.148)
[11:45:46] *** Quits: muirrum (muirrum@sourcehut/user/muirrum) (Ping timeout: 268 seconds)
[11:45:47] *** muirrum0 is now known as muirrum
[11:45:57] *** Joins: muirrum_ (~muirrum@gilwell.devcara.com)
[11:45:57] *** Quits: muirrum_ (~muirrum@gilwell.devcara.com) (Changing host)
[11:45:57] *** Joins: muirrum_ (~muirrum@sourcehut/user/muirrum)
[11:47:05] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[11:48:47] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 256 seconds)
[11:51:15] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[11:53:11] *** Joins: frost (~frost@user/frost)
[11:55:53] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:56:31] <KirkMcDonald> A struct with one field can be sensible in the context of a target for deserialization, for example.
[11:58:07] *** Joins: acagastya (~acagastya@wikinews/acagastya)
[11:59:09] <acagastya> Hi, when using `http.Get` method to fetch a URL, is there a way to pass on query parameters to the URL, xor am I supposed to hard code it?
[12:01:37] <acagastya> Like for example, I am supposed to call the endpoint `api.example.com` and query parameters include `client_id` and `response_type` -- should I be hardcoding those in the `http.Get` call?
[12:08:39] <KirkMcDonald> GET query parameters are part of the URL.
[12:09:56] <KirkMcDonald> net/url has some stuff for formatting query parameters.
[12:10:25] <acagastya> GET query parameters are part of the URL. -- But should i be hardcoding -- or is there a way to provide them, so I can preserve some readability?
[12:10:37] <acagastya> Okay, looking at net/url...
[12:11:30] *** Joins: krux02 (~krux02@194.8.199.29)
[12:14:30] <alwyn> Does using struct field tags count as "attaching methods"? :)
[12:16:21] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:18:09] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.73)
[12:18:09] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.73) (Changing host)
[12:18:09] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:20:57] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[12:22:14] <KirkMcDonald> A struct tag isn't a method.
[12:31:06] <alwyn> Sorry, I meant if I have struct tags and parse them with a library. I'm still figuring out the right terminology
[12:31:43] *** Joins: arinov (~arinov@213.194.126.155)
[12:34:01] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:36:15] *** Joins: alzgh (~alzgh@user/alzgh)
[12:38:44] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[12:44:47] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:46:52] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[12:47:18] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:53:32] *** Quits: dr0n (~nabromov@94.11.23.235) (Quit: WeeChat 3.3)
[12:55:21] *** Joins: beholders_eye (~weechat@2804:1b3:70c2:6ca7:3ca2:c97d:e473:e816)
[12:55:49] *** Joins: nhanb (~nhanb@171.232.78.213)
[13:03:59] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:1401:22a5:674e:d69b)
[13:04:48] *** Quits: nhanb (~nhanb@171.232.78.213) (Quit: Konversation terminated!)
[13:08:03] *** Joins: andlabs (~andlabs@70.107.171.168)
[13:08:10] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:08:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[13:10:43] *** Joins: fikran (~fikran@user/fikran)
[13:12:39] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[13:16:11] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:16:56] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[13:17:23] *** Quits: zanshin (~zanshin@user/zanshin) (Read error: Connection reset by peer)
[13:18:47] *** Joins: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225)
[13:21:37] *** Joins: zanshin (~zanshin@user/zanshin)
[13:25:11] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:27:06] *** Quits: krux02 (~krux02@194.8.199.29) (Remote host closed the connection)
[13:28:45] *** Joins: krux02 (~krux02@194.8.199.29)
[13:29:43] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[13:30:13] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[13:31:00] *** Joins: __alex (~alex@tmo-109-131.customers.d1-online.com)
[13:32:23] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:1401:22a5:674e:d69b) (Quit: smeeagle)
[13:34:03] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:36:46] *** Quits: beholders_eye (~weechat@2804:1b3:70c2:6ca7:3ca2:c97d:e473:e816) (Ping timeout: 268 seconds)
[13:41:16] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:42:50] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:45:50] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[13:46:41] *** Quits: wim (~wim@42.be) (Ping timeout: 265 seconds)
[13:47:19] *** Joins: wim (~wim@42.be)
[13:50:41] *** Quits: bookworm (~bookworm@neomutt/bookworm) (Changing host)
[13:50:41] *** Joins: bookworm (~bookworm@thelounge/maintainer/bookworm)
[13:51:31] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:52:00] *** Quits: wim (~wim@42.be) (Ping timeout: 265 seconds)
[13:52:28] *** Joins: getynge (~getynge@2601:702:80:2fc0::b76e)
[13:52:39] *** Joins: wim (~wim@42.be)
[13:54:48] *** Joins: Atlas (~atlas@user/atlas)
[13:58:20] *** Quits: krux02 (~krux02@194.8.199.29) (Remote host closed the connection)
[13:58:36] *** Joins: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de)
[13:59:11] *** Quits: purpleidea (~james@user/purpleidea) (Ping timeout: 256 seconds)
[13:59:40] *** Joins: krux02 (~krux02@194.8.199.29)
[14:08:54] <bookworm> that'd most likely be the "context of a target for deserialization" as was suggested to you
[14:09:24] *** Parts: acagastya (~acagastya@wikinews/acagastya) ()
[14:09:26] <bookworm> generally called "Marshall" and "Unmarshall" in the go world iirc
[14:13:26] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:14:34] <shiroyasha> I can never remember if it's "Marshal" or "Marshall" (it's the former).
[14:15:56] <bookworm> yeah well, I auto complete in my editor as you can tell ;P
[14:16:51] <bookworm> it's a strange word anyhow, had no meaning to me. Not sure what was wrong with encode and decode but here we are
[14:17:23] <bookworm> depends from which age you are coming from I guess, or which language
[14:17:49] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[14:19:28] *** Joins: DM43078421495 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[14:21:05] *** Joins: purpleidea (~james@user/purpleidea)
[14:21:35] *** Quits: DM4307842149 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[14:21:35] *** DM43078421495 is now known as DM4307842149
[14:25:20] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:26:23] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[14:28:22] *** Joins: teasea (~teasea@user/teasea)
[14:29:07] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[14:31:19] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:35:13] <mort> Is there a way to tell fmt to expand nesting deeper? I have some grpc type which has a lastConnectionError member which I would really like to see, but %v just shows it as a pointer
[14:35:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[14:40:11] *** Joins: the_lanetly_052 (~the_lanet@85.132.73.6)
[14:46:44] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[14:50:33] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 252 seconds)
[14:53:54] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[14:58:59] *** Quits: Devilirium (~Deviliriu@catv-80-99-193-173.catv.broadband.hu) (Ping timeout: 252 seconds)
[15:05:07] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:09:57] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[15:09:59] *** Quits: normen (~normen@p200300d71725d60065a9ab6e56e19e7c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[15:10:31] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[15:10:35] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:12:26] <iivvoo> acting on the first or last element in a `range` loop in a template is still something that requires custom code/hacks, right?
[15:15:45] <bookworm> hacks? range $index, $element := pipeline < gives you the index
[15:16:15] <iivvoo> and how do I know if it's the last?
[15:16:15] <bookworm> so just check whether that's 0 or len(thing) -1
[15:16:29] <iivvoo> yeah so struggling with that currently
[15:17:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[15:19:01] *** Quits: the_lanetly_052 (~the_lanet@85.132.73.6) (Ping timeout: 256 seconds)
[15:19:07] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:a155:d417:1815:55b1)
[15:20:05] *** Joins: fikran (~fikran@user/fikran)
[15:22:40] <iivvoo> argh.. html/template is just awful to work with
[15:23:11] <bookworm> just keep logic out of it and you'll be fine
[15:23:49] <bookworm> it should get pre massaged data and mostly loop and display. If you have lots of if else and function calls you're doing it wrong
[15:24:18] <bookworm> you have a perfectly functional language in go, no need to get fancy in the templates
[15:24:33] <iivvoo> well, display logic should be in there (imho), since the outer code shouldn't have to know/bother too much with which specific details the templates need - e.g. even/odd first/last
[15:24:50] <bookworm> sure, but that's easy
[15:25:11] <iivvoo> no it's not - it's rather non-obvious
[15:25:18] <bookworm> how so?
[15:25:33] <bookworm> idx modulo 2, 0? even 1 odd
[15:26:37] <iivvoo> well it's specifically about the last row - I have to compare it against len(x)-1. I've already figured out the insane {{if eq foo (len x)}}, not sure how to add a -1 in there but I'll figure it out, currently having a hard time properly resolving the context variables
[15:26:54] <bookworm> or use the proper js abstraction, css can do the dance for you assuming you want to style tables
[15:27:21] <iivvoo> actually, trying to add htmx, to lazy-load on the last row. Not something css can do
[15:27:54] <iivvoo> but yeah, I will just split my dataset into top / last, do it the hacky way
[15:28:05] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[15:29:43] <bookworm> just... ckeck if the index is len - 1
[15:33:40] <iivvoo> I understamd the logic, but it's utterly non-obvious how to actually do that with the insane template logic. Each attempt results in some other syntactical error when running, so giving up for now
[15:34:33] *** Joins: beholders_eye (~weechat@2804:1b3:70c2:6ca7:3ca2:c97d:e473:e816)
[15:35:16] <iivvoo> I appreciate your help, I do wonder what made you such a templating wizard that this is all obvious for you - for me it definitely isn't
[15:35:54] *** Joins: normen (~normen@p200300d71725d60065a9ab6e56e19e7c.dip0.t-ipconnect.de)
[15:36:53] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:38:09] <bookworm> the logic is easy to come up with, as for the solution it's trivial to google
[15:39:15] <bookworm> https://go.dev/play/p/V94BPN0uKD
[15:39:20] *** Quits: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225) (Remote host closed the connection)
[15:39:32] <bookworm> adapt to your whatever, the approch is the same
[15:39:37] <bookworm> approach*
[15:42:15] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[15:42:48] *** Quits: nullheroes (~nullheroe@168.235.66.22) (Quit: WeeChat 2.3)
[15:44:07] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[15:44:44] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[15:46:12] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[15:46:34] *** Joins: arinov (~arinov@178.240.181.140)
[15:50:14] *** Joins: darkapex_ (~darkapex@user/darkapex)
[15:50:45] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[15:55:07] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:57:57] *** Joins: dntreou (~yakiza@2a02:587:7403:5500:5542:952a:f204:55f4)
[15:59:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[16:01:36] *** Quits: dntreou (~yakiza@2a02:587:7403:5500:5542:952a:f204:55f4) (Remote host closed the connection)
[16:02:02] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:04:39] *** Joins: dntreou (~yakiza@2a02:587:7403:5500:5542:952a:f204:55f4)
[16:08:41] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:2446:13de:20ec:764f)
[16:09:29] *** Joins: acagastya (~acagastya@wikinews/acagastya)
[16:11:24] <acagastya> I can't recall the technical term, but how should I declare a function which can take N (as-many) number of strings to perform some opeartion on them, just like `fmt.Print("foo", "bar", "baz")`?
[16:11:58] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:12:01] *** Quits: dlew^ (~dlew@68.101.58.90) (Remote host closed the connection)
[16:12:07] <bookworm> variadic
[16:12:54] <bookworm> https://gobyexample.com/variadic-functions
[16:12:56] <acagastya> Ah, yes!  That!
[16:13:13] <acagastya> Thanks, bookworm!
[16:14:48] <acagastya> But I won't be able to return them like that, right?
[16:15:01] <bookworm> no
[16:15:12] <bookworm> go isn't python
[16:15:28] <bookworm> just return the slice or array
[16:15:39] <acagastya> As in, if I call F("foo"), it returns "foo" and F("foo", "bar") will `return "foo", "bar"` -- and instead an array return might be needed?
[16:15:42] <acagastya> Ah, okay.
[16:16:18] <bookworm> your function looks like you try to implement map ?
[16:16:21] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[16:16:32] <bookworm> as in the functional style / js world?
[16:17:27] <bookworm> because just for programming on the fly you can just make it a single string in and out function and write it on 2 lines
[16:17:59] <bookworm> usually if you have a variadic function you want to concatenate / reduce it eventually
[16:18:15] <dntreou> Hello everyone, I am using the following function https://pkg.go.dev/path/filepath#WalkDir from filepath package, I have come across something peculiar, Walkdir is able to crawl the directory I have provided ( dummy directory with random files  I created ) but when I retrieve a folder struture from the server to test it on it does not crawl that directory, I even tried to chmod to 777 for the sake
[16:18:18] <dntreou> of it, also the directory and all its sub directories and files belong to my user/usergroup. Any clues as to why would walkdir not work on the retrieved dir
[16:18:18] <acagastya> I can think of it as a map -- but no, I was just curious if like how we havea variadic function, we can have a return like that or not.
[16:18:50] <bookworm> it's just syntactic sugar, your function receives a slice
[16:19:00] <bookworm> (or array, not sure which)
[16:19:17] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:a155:d417:1815:55b1) (Ping timeout: 252 seconds)
[16:19:23] <bookworm> it's simply a convenience for the caller
[16:19:46] <acagastya> Yes.  The function is getting too big, and I was thinking if I could somehow simplify it, if this was possible.
[16:21:29] <acagastya> Also out of curiosity, bookwork, like in js, we can declare constants as `const [foo, bar] = [1, 2]` -- is something like that possible in golang? -- I know it is just a syntactic sugar and my primitive guess will be -- that is a very slow operation, but is it possible to?
[16:22:13] <acagastya> My whole point of using golang was because syntactic sugar taxes code-execution, but this can come handy for simple debugging.
[16:22:54] <bookworm> go doesn't have tuple unpacking like that, whatever it's called in js land... structural assignment something
[16:23:33] <novns> someone has to invent the syntactic salt
[16:23:44] <bookworm> constants in go are something completely different than constants in js land as well
[16:23:44] *** Quits: kindablue (znc@irc.tpurist.com) (Quit: System Rebooting..)
[16:23:49] <novns> or the syntactic spice
[16:23:55] <bookworm> (they are untyped prior to using them)
[16:24:11] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:24:32] *** Joins: mathis (~mathis@dhcp-138-246-3-137.dynamic.eduroam.mwn.de)
[16:24:47] *** Quits: beholders_eye (~weechat@2804:1b3:70c2:6ca7:3ca2:c97d:e473:e816) (Ping timeout: 252 seconds)
[16:24:47] *** Joins: kindablue (znc@irc.tpurist.com)
[16:25:22] <acagastya> All right.
[16:26:33] <acagastya> Thanks for that, bookworm!
[16:27:53] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:28:33] *** Joins: beholders_eye (~weechat@2804:1b3:70c2:6ca7:3ca2:c97d:e473:e816)
[16:30:45] *** Parts: acagastya (~acagastya@wikinews/acagastya) ()
[16:32:04] <dostoyevsky2> Anyone know an example on github or the like where they use cgo and mix Go and C files in one package?
[16:32:10] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:32:41] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[16:35:13] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[16:35:16] <bookworm> any cgo package (search for db adaptors)
[16:35:22] <bookworm> sqlite for instance
[16:35:37] <dostoyevsky2> ok, thanks bookworm
[16:35:45] <bookworm> you automatically uave go and c code as soon as you use cgo
[16:35:53] <bookworm> have*
[16:36:03] *** Joins: Atque (~Atque@user/atque)
[16:38:28] *** Quits: __alex (~alex@tmo-109-131.customers.d1-online.com) (Read error: Connection reset by peer)
[16:40:34] *** Quits: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d) (Quit: WeeChat 1.9.1)
[16:40:52] *** Joins: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d)
[16:41:04] *** Joins: pepee (~pepee@user/pepee)
[16:42:12] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[16:45:11] <dostoyevsky2> bookworm: I was specificly looking for an example where they use packages to mix C and Go files... not just doing `/* my c code */ import "C" <go funcs>'   in one Go file without a package
[16:45:25] *** Quits: halden (~halden@lden.im) (Quit: Bye)
[16:45:28] *** Quits: dntreou (~yakiza@2a02:587:7403:5500:5542:952a:f204:55f4) (Remote host closed the connection)
[16:45:41] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:47:15] *** Joins: dntreou (~yakiza@2a02:587:7403:5500:5542:952a:f204:55f4)
[16:49:39] *** Joins: halden (~halden@lden.im)
[16:57:09] *** Joins: acagastya (~acagastya@wikinews/acagastya)
[16:57:48] *** Quits: dntreou (~yakiza@2a02:587:7403:5500:5542:952a:f204:55f4) (Ping timeout: 268 seconds)
[16:58:14] <shiroyasha> dostoyevsky2: tbh I have trouble understanding what you want. `github.com/mattn/go-sqlite3` has a package `sqlite3` with Go files, and in that same directory there's C files. And it calls C from Go (e.g. in the `Version` function).
[16:58:48] <acagastya> I have two files, `main.go` which calls `F()` and in the same directory `foo.go` which defines `F`.  I am trying `go run main.go` and that gives an error, `F undefined`, but when I do `go build`, it works fine -- am I supposed to specify all files while just doing `go run`?
[16:59:34] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--282.oracle-ocna.com)
[17:02:23] <sztanpet> yes, see go run -help
[17:02:40] <sztanpet> err, go help run i guess
[17:03:03] <bookworm> dostoyevsky2: what _shiroyasha said
[17:04:25] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[17:04:27] <bookworm> acagastya: go run is really only there for a quick debug thing, just build the binary, it's fast enough
[17:06:08] <acagastya> All right.
[17:07:12] <acagastya> And, if I were to put `foo.go` in a subdirectory, do I need to then specify paths?  Or do I need to include in import?
[17:08:36] <bookworm> you'd need to import it, your editor will automatically do it if setup correctly
[17:08:42] <sztanpet> that sounds like a basic question answered by https://go.dev/doc/code
[17:08:50] <bookworm> that too ^
[17:09:28] <sztanpet> if you are using modules, which you should, you cant use relative imports
[17:09:36] <sztanpet> just beware
[17:16:05] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:16:18] <mickey8> i need to convert some strings to a single []byte array, can this be done easily with sprintf somehow? something like var x []byte = fmt.Sprintf("<whatever>", string1, string2, string3...)
[17:16:36] <mickey8> []byte(string1) is fine but i cant make it work with more than a single string
[17:17:19] <mickey8> and []byte(fmt.Sprintf("%s%s", string1, string2..)) feels weird
[17:20:31] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[17:22:51] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:24:13] *** Joins: astraad[m] (~astraadma@2001:470:69fc:105::1:4425)
[17:26:00] <bookworm> strings.Join?
[17:27:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[17:27:57] <bookworm> or optionally strings.Builder
[17:29:26] *** Joins: fikran (~fikran@user/fikran)
[17:29:43] <fizzie> Strictly speaking, `fmt.Sprint(string1, string2, string3)` will also do it, but feels a bit of a misuse of fmt.
[17:33:58] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:36:04] *** Joins: sav_ (~savio@177.12.48.155)
[17:36:43] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[17:38:25] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[17:49:54] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:52:40] <iivvoo> bookworm just read your playground - you can't actually +1 in the templating code? This is what for me qualifies as hacks. If I have to provide a plus1 func to do my template logic, I might as well just preprocess my data entirely
[17:52:58] <iivvoo> again, I do appreciate you helping me and making suggestions, don't want to sound ungrateful
[17:55:38] <iivvoo> and in my specific case I don't actually need to know the last row, I realized. I can just add a dummy <tr> that gets replaced and shows something like "More.." - I just need a tag that triggers the next page load and it don't care too much what data is in it.
[17:57:52] *** Joins: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552)
[17:58:01] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[18:01:26] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[18:01:56] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:03:59] *** Quits: arinov (~arinov@178.240.181.140) (Ping timeout: 256 seconds)
[18:24:45] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--282.oracle-ocna.com) (Ping timeout: 268 seconds)
[18:26:05] *** Joins: dntreou (~yakiza@2a02:587:7403:5500:5542:952a:f204:55f4)
[18:31:39] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:36:00] *** Joins: arinov (~arinov@213.194.126.155)
[18:36:28] *** Quits: alwyn (~alwyn@user/alwyn) (Ping timeout: 268 seconds)
[18:40:33] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (Quit: Bridge terminating on SIGTERM)
[18:41:07] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[18:41:33] *** Quits: dntreou (~yakiza@2a02:587:7403:5500:5542:952a:f204:55f4) (Ping timeout: 252 seconds)
[18:43:29] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--9.oracle-ocna.com)
[18:45:57] *** Joins: shtirlic (~shtirlic@178.70.141.25)
[18:46:36] *** Joins: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de)
[18:46:36] *** Quits: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de) (Changing host)
[18:46:36] *** Joins: tane (~tane@user/tane)
[18:47:06] *** Quits: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552) (Remote host closed the connection)
[18:47:25] *** Joins: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552)
[18:49:06] *** Quits: shtirlic_ (~shtirlic@178.70.141.25) (Ping timeout: 245 seconds)
[18:51:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:54:57] *** Quits: sav_ (~savio@177.12.48.155) (Quit: Leaving)
[18:56:10] *** Joins: lilgopher (~textual@2601:241:8000:38f0:8143:8523:7b45:dec8)
[18:58:18] *** Quits: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552) (Remote host closed the connection)
[18:58:37] *** Joins: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552)
[18:59:06] <bpalmer> mickey8: var b bytes.Buffer; b.WriteString(s1); b.WriteString(s2); return b.Bytes()
[19:04:14] *** Quits: moldorcoder7_ (~moldorcod@37.120.143.28) (Ping timeout: 265 seconds)
[19:05:25] *** Joins: moldorcoder7 (~moldorcod@37.120.143.30)
[19:07:05] *** Quits: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552) (Remote host closed the connection)
[19:07:24] *** Joins: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552)
[19:09:49] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:15:52] *** Quits: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552) (Remote host closed the connection)
[19:16:11] *** Joins: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552)
[19:17:51] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Ping timeout: 252 seconds)
[19:18:21] *** Joins: tyson2`` (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:20:09] *** Quits: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552) (Remote host closed the connection)
[19:20:28] *** Joins: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552)
[19:20:37] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[19:22:30] *** Quits: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552) (Remote host closed the connection)
[19:22:49] *** Joins: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552)
[19:26:17] *** Quits: tyson2`` (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Ping timeout: 252 seconds)
[19:28:03] *** Quits: mathis (~mathis@dhcp-138-246-3-137.dynamic.eduroam.mwn.de) (Quit: WeeChat 3.3)
[19:28:30] *** Joins: mathis (~mathis@2a01:4f8:1c1c:94f::1)
[19:29:29] *** Quits: mathis (~mathis@2a01:4f8:1c1c:94f::1) (Client Quit)
[19:29:37] <acagastya> I need to make a POST request with custom headers (which means http.NewRequest needs to be used), but it also needs some body parameters (example key: grant_type, value "authorization_code").  How am I supposed to make and use the body parameters?
[19:29:51] *** Quits: krux02 (~krux02@194.8.199.29) (Remote host closed the connection)
[19:29:56] *** Joins: mathis (~mathis@2a01:4f8:1c1c:94f::1)
[19:30:14] <fnk> acagastya: in http.NewRequest you can provide body as the last parameter
[19:30:52] <acagastya> But, do I need to prepare them?  There are multiple body parameters, so I don't know how to supply all of them.
[19:31:58] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--9.oracle-ocna.com) (Ping timeout: 268 seconds)
[19:32:19] <fnk> acagastya: the body would be a json, right?
[19:33:57] *** Quits: mathis (~mathis@2a01:4f8:1c1c:94f::1) (Changing host)
[19:33:57] *** Joins: mathis (~mathis@user/mathis)
[19:34:05] <acagastya> fnk: as of now, I am using a json marshall, yes.  But I will be honest, I am not entirely sure it is.  (this is what it says -- https://ibb.co/5jD3Grh )
[19:34:38] <fnk> you can either create the body like body := []byte(`{"param1": "value1","param2": "value2"}`) and then use bytes.NewBuffer(body) or create your own type with the fields you need and marshal it
[19:34:54] *** Quits: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552) (Remote host closed the connection)
[19:35:08] <acagastya> I should probably try this first method you are suggesting.
[19:35:50] <acagastya> Looking at https://ibb.co/KKk3q27 -- the example code supplied -- makes it look like they are expecting json.
[19:36:15] <acagastya> Or wait!  Marshalling expects the first letter of the key to be in uppercase, right?
[19:36:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[19:37:23] <fnk> yes
[19:38:46] <acagastya> Ugh, I guess that is where I made the blunder.  I didn't capitalise the letter.
[19:38:47] *** Joins: fikran (~fikran@user/fikran)
[19:54:36] *** Joins: alwyn (~alwyn@user/alwyn)
[19:55:37] *** Quits: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it) (Quit: marqquit)
[19:57:30] <fnk> probably
[19:58:17] *** Joins: dntreou (~yakiza@178-147-236-189.haap.dm.cosmote.net)
[19:59:02] *** Joins: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[20:04:54] *** Quits: alwyn (~alwyn@user/alwyn) (Quit: WeeChat 3.3)
[20:06:17] *** Joins: alwyn (~alwyn@user/alwyn)
[20:08:10] *** Joins: ldiamond (~ldiamond@user/ldiamond)
[20:09:53] <ldiamond> I'm looking for a library that can give me jq-like selection of json/yaml fields when marshalling. Does anyone know such things?
[20:10:39] *** Quits: dntreou (~yakiza@178-147-236-189.haap.dm.cosmote.net) (Ping timeout: 252 seconds)
[20:17:47] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[20:19:21] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[20:21:18] *** Parts: acagastya (~acagastya@wikinews/acagastya) ()
[20:22:04] *** Joins: dntreou (~yakiza@178-147-236-189.haap.dm.cosmote.net)
[20:41:45] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:43:30] *** Joins: sav (~savio@177.12.48.155)
[20:43:50] <davidkrauser> is there a way to do something like a `go build ./...` that will build everything (including files with the _test.go suffix)? I did a huge refactor and want to see all build failures without running the tests.
[20:43:54] *** sav is now known as Guest5350
[20:44:04] <ikke> no
[20:44:27] <ikke> not that I'm aware of at least, _test files get skipped by the regular build process
[20:45:16] <davidkrauser> ikke, hmm, that's what I thought. I know `go test` has the `-c` flag to avoid running the tests after compilation, but it doesn't look like that works when you want to build multiple tests
[20:45:23] <dostoyevsky2> ldiamond: I wrote myself and Api that works like ReadYaml("y.yaml").First().M()["key"].S()
[20:46:52] <explodes> ldiamond: if performance is not a concern, shell out to `jq` otherwise, write the marshalling yourself
[20:47:02] <ikke> gojq exists
[20:47:15] <davidkrauser> I could do something like: `go build; for test in $(go list ./...); do go test -c $test; done`
[20:47:18] <ldiamond> yea I'm looking at gojq, it doesn't seem very popular though.
[20:47:20] <davidkrauser> but that feels cumbersome
[20:48:29] <explodes> oh sweet, gojq looks great
[20:48:43] <davidkrauser> Or something like this is _slightly_ better: `go build ./...; go list ./... | xargs -L1 go test -c`
[20:49:38] <dostoyevsky2> I guess my current go project is a great success -- I have just created my own build tool because, you know, no other build tool can do what my build tool can: building exactly what I want to build
[20:49:42] <bpalmer> davidkrauser: it may not affect you but you'll run into the same issue with other build tags
[20:50:00] <davidkrauser> bpalmer: what do you mean by that?
[20:50:48] <bpalmer> davidkrauser: suppose you have a file.go with // +build freebsd
[20:51:05] <bpalmer> go build will not try to compile that code unless you're cross-compiling or on a freebsd system.
[20:51:11] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[20:51:22] *** Joins: zunino (~zunino@2804:7f5:f380:b886:72e9:84b7:c60d:7151)
[20:51:36] <davidkrauser> bpalmer: ah, that makes sense. I'm not currently doing any cross-compilation, but that's good to keep in mind
[20:51:47] <bpalmer> similarly , if you have a file file_plan9.go
[20:52:18] *** Joins: neverfindme (~hayden@158.123.160.43)
[20:52:32] <bpalmer> if you *are* doing something like that, some form of make file or more elaborate system which manually does a go build on each file with the right flags may be in order
[20:53:10] <davidkrauser> bpalmer: that seems reasonable
[20:53:38] <davidkrauser> I wonder why `test -c` doesn't work with multiple binaries, while `test` does. Seems a strange limitation
[20:56:45] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[21:00:54] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[21:01:03] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:04:56] *** Joins: arinov (~arinov@46.154.79.152)
[21:05:34] *** Quits: Atlas (~atlas@user/atlas) (Quit: Textual IRC Client: www.textualapp.com)
[21:06:19] <Tv_> davidkrauser: `go test -c foo/one/bar foo/two/bar` now what
[21:06:57] <Tv_> same thing with `go build`
[21:10:33] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:10:47] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[21:12:26] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[21:13:23] <davidkrauser> Tv_: when I try that, I get the error: cannot use -c flag with multiple packages
[21:13:36] <Tv_> yes, you can't.
[21:13:40] <davidkrauser> right
[21:13:47] <Tv_> that's the reason
[21:14:11] <davidkrauser> oh, what you're saying is that the `-c` only applies to foo/one/bar?
[21:14:30] <davidkrauser> I would imagine that `-c` applies to the whole operation
[21:14:37] <davidkrauser> err, that was my initial assumption
[21:15:15] <Tv_> it applies to the whole operation
[21:15:23] <Tv_> the whole operation is troublesome, and hence prevented
[21:15:46] <davidkrauser> the whole operation is troublesome... sorry, I'm not following the reasoning. Why is it troublesome?
[21:16:32] <davidkrauser> My assumption is `go test -c ./...` would be functionally equivalent to: `go list ./... | xargs -L1 go test -c`
[21:18:21] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 256 seconds)
[21:18:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:18:29] *** Quits: dntreou (~yakiza@178-147-236-189.haap.dm.cosmote.net) (Ping timeout: 252 seconds)
[21:18:57] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:19:18] <fizzie> The operation is for creating a (single) binary, like `go build`.
[21:20:08] *** Quits: shtirlic (~shtirlic@178.70.141.25) (Ping timeout: 252 seconds)
[21:20:12] <fizzie> Well, like `go build -o`, rather.
[21:21:02] <davidkrauser> fizzie: right. But in this case, I don't necessarily care about producing an output. I just want to see if all of the go code in a directory compiles. The `-c` flag is the only way (that I know of) to build a test without running it.
[21:21:51] <fizzie> Right, but it's designed for building a binary file for you.
[21:21:53] <fizzie> "-c: Compile the test binary to pkg.test but do not run it (where pkg is the last element of the package's import path). The file name can be changed with the -o flag."
[21:22:17] <davidkrauser> that's right :-)
[21:22:42] <davidkrauser> My initial question was: is there a way to do something like a `go build ./...` that will build everything (including files with the _test.go suffix)?
[21:22:42] <fizzie> If it did accept multiple packages, you'd end up with a lot of "foo.test" files in the current directory, some of which would probably have overlapping names, which does feel a little odd.
[21:23:15] *** Quits: neverfindme (~hayden@158.123.160.43) (Ping timeout: 252 seconds)
[21:23:19] <davidkrauser> I did a huge refactor and want to see all build failures without running the tests.
[21:23:46] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[21:23:51] <fizzie> How about `go test -run SomeImpossibleToSatisfyRegularExpression ./...`?
[21:24:17] <fizzie> go test -run '$.^' ./...   # for example
[21:24:47] <davidkrauser> That'd work :-) What I came with above was: `go build ./...; go list ./... | xargs -L1 go test -c`
[21:25:31] <fizzie> I guess that works too, but you do end up with those *.test files cluttering the place.
[21:25:38] <davidkrauser> Then, I was just wondering why there's no mechanism to build all of the tests, but not run them. Seems kind of strange that there's no support for that?
[21:26:24] <davidkrauser> fizzie: that's true. Does go test without `
[21:26:30] <davidkrauser> oops, hit enter too early
[21:26:57] <davidkrauser> meant to say: does go test without `-c` cleanup the test executables? I have .test files hidden by my gitignore, so they don't really bother me
[21:27:36] <fizzie> It generates the binaries somewhere else (/tmp I guess?), I believe. At least they don't show up under the project directory.
[21:28:12] <davidkrauser> fizzie: that makes sense
[21:28:33] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[21:28:34] <fizzie> (Yeah, /tmp/go-build2902807291 (or equivalent), which it then cleans up.)
[21:30:13] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 252 seconds)
[21:30:31] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:31:18] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[21:33:01] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[21:33:11] *** Joins: dntreou (~yakiza@178-147-236-189.haap.dm.cosmote.net)
[21:35:16] *** Quits: belak (~belak@user/belak) (Quit: ZNC 1.8.2 - https://znc.in)
[21:35:28] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.73)
[21:35:28] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.73) (Changing host)
[21:35:28] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:35:32] *** Joins: belak (~belak@user/belak)
[21:35:51] *** Quits: muirrum (~muirrum@sourcehut/user/muirrum) (Quit: Gone away)
[21:36:01] *** Parts: Guest5350 (~savio@177.12.48.155) ()
[21:36:09] *** Joins: muirrum (~muirrum@sourcehut/user/muirrum)
[21:36:10] *** Joins: Guest5350 (~savio@177.12.48.155)
[21:37:24] *** Quits: Guest5350 (~savio@177.12.48.155) (Quit: Leaving)
[21:37:45] *** Joins: sav (~savio@177.12.48.155)
[21:38:09] *** sav is now known as Guest5157
[21:38:15] *** Quits: beholders_eye (~weechat@2804:1b3:70c2:6ca7:3ca2:c97d:e473:e816) (Quit: WeeChat 3.3)
[21:38:45] *** Joins: beholders_eye (~weechat@2804:1b3:70c2:6ca7:3ca2:c97d:e473:e816)
[21:39:12] *** Quits: Guest5157 (~savio@177.12.48.155) (Client Quit)
[21:39:57] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[21:41:13] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[21:41:26] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.73)
[21:41:26] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.73) (Changing host)
[21:41:26] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:43:20] *** Quits: SJrX (~sjr@S0106302303dfb018.vf.shawcable.net) (Ping timeout: 268 seconds)
[21:44:21] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[21:46:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:48:08] *** Joins: fikran (~fikran@user/fikran)
[21:54:20] *** Joins: henko (~henko@62-178-187-35.cable.dynamic.surfer.at)
[21:55:02] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[21:56:31] *** Quits: arinov (~arinov@46.154.79.152) (Read error: Connection reset by peer)
[21:57:14] *** Joins: arinov (~arinov@46.154.79.152)
[22:04:00] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:7078:7a98:2190:2777)
[22:06:46] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[22:09:34] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:10:05] *** Joins: mickey8 (~user@user/mickey)
[22:18:03] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[22:18:07] *** Quits: arinov (~arinov@46.154.79.152) (Remote host closed the connection)
[22:18:31] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.73)
[22:18:31] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.73) (Changing host)
[22:18:31] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:22:06] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:22:19] *** Joins: mickey8 (~user@user/mickey)
[22:36:13] *** Joins: shtirlic (~shtirlic@178.70.141.25)
[22:36:52] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:37:05] *** Joins: mickey8 (~user@user/mickey)
[22:40:26] *** Quits: shtirlic (~shtirlic@178.70.141.25) (Ping timeout: 252 seconds)
[22:41:15] *** Joins: shtirlic (~shtirlic@178.70.141.25)
[22:44:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:47:19] *** Quits: henko (~henko@62-178-187-35.cable.dynamic.surfer.at) (Ping timeout: 256 seconds)
[22:49:18] *** Joins: henko (~henko@62-178-187-35.cable.dynamic.surfer.at)
[22:54:03] *** Quits: dntreou (~yakiza@178-147-236-189.haap.dm.cosmote.net) (Ping timeout: 256 seconds)
[22:55:49] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--6c.oracle-ocna.com)
[22:56:55] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[22:57:17] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[22:59:56] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:2446:13de:20ec:764f) (Quit: smeeagle)
[23:05:25] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:09:35] <LambdaComplex> i swear i read stuff online saying/suggesting that you can't unmarshal from yaml into a time.Duration, but i just tried it and it worked
[23:09:37] <LambdaComplex> so....yay
[23:13:32] <henko> i'm fighting with the same program working on my private laptop but not on my companys
[23:13:43] <henko> laptop*
[23:19:52] <b0nn> henko: then give your laptop to your employer :)
[23:20:40] <henko> huh if it was /that/ easy
[23:23:36] <b0nn> well, if you need some help, you'll have to give to get - people will want to know what the problem is, how the environments differ, etc
[23:24:09] *** Joins: nabaiste^ (~nabaiste@68.101.58.90)
[23:25:10] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:27:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[23:29:00] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[23:29:03] <henko> i'm trying to connect to a remote busybox-ish environment (embedded system) via SSH, execute some program and grabbing the STDOUT. This guy doesn't have an API so I have to get some metrics via CLI
[23:29:27] <henko> when trying it locally with 127:1 and user+pass it works
[23:29:39] <henko> but using the real IP doesn't
[23:29:50] <henko> it works however via putty from my company machine
[23:30:17] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[23:30:19] <henko> executing the same go program on my companys machine... it just time outs
[23:30:24] <henko> how can that be? when putty works?
[23:30:35] <henko> What am I missing
[23:32:26] <henko> https://go.dev/play/p/MebETrZa3Hn
[23:33:55] <henko> sauce example code: https://pkg.go.dev/golang.org/x/crypto/ssh#Dial
[23:33:55] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:34:15] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:37:43] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) ()
[23:43:11] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:44:09] <bpalmer> henko: so if you run it on your machine, it connects successfully; when run on the  company machine, it times out? That sounds like your work probably has limits on outgoing network connections or a firewall
[23:44:49] <bpalmer> henko: you'll probably want to check with your work's network administrators and see if you can successfully do this connection "by hand" before you try to automate it
[23:46:33] <henko> when running it on my private machine with localhost ist work. when connecting via putty to the machine with IP 1.2.3.4 it works with user+pass (no ssh key). when doing 'go run' with the same program like on my private machine but with localhost exchanged with IP 1.2.3.4. it just timeouts?
[23:46:55] <henko> ist = it does
[23:47:19] <zsnes> are you expecting go run to somehow know your ssh user/pass?
[23:47:45] <zsnes> or to even negotiate ssh for you automatically?
[23:49:50] <henko> but I changed the user, pass and IP in the code which I posted above
[23:50:39] <henko> I just have massive ??? above my head. Why can I connect via putty to the machine flawlessy, but the go program can't?
[23:50:55] <henko> It should not be a firewall problem
[23:51:10] <henko> and im executing directly in powershell and not WSL2
[23:52:15] <henko> I do 'go run sshrequest.go'
[23:52:39] <henko> and no warnings or errors are displayed in VScode
[23:53:10] <bpalmer> I see. Try to capture a trace of the network traffic and see if they're tryin to connect to the same things.
[23:53:13] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--6c.oracle-ocna.com) (Ping timeout: 252 seconds)
[23:54:20] *** Joins: tyson2 (~user@bras-base-toroon0240w-grc-46-64-228-134-62.dsl.bell.ca)
[23:54:40] *** Quits: girafe2 (~girafe@176-147-142-235.abo.bbox.fr) (Quit: Leaving)
[23:54:40] *** Quits: zunino (~zunino@2804:7f5:f380:b886:72e9:84b7:c60d:7151) (Ping timeout: 268 seconds)
[23:55:04] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[23:55:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[23:57:29] *** Joins: fikran (~fikran@user/fikran)
