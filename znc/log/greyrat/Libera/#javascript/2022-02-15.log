[00:00:01] <jaawerth> yeah, you aren't *guaranteed* to hit it, but hwen you do it hits hard
[00:00:07] <jaawerth> particularly if you'er reviving an old repo
[00:00:32] <blueagain> arch has `downgrade`, so if push came to shove, I'd have that.
[00:01:01] <blueagain> Oh actually, I have a question.
[00:01:26] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[00:01:33] <blueagain> I've been using a lot of json imports in my code, recently after upgrading node I had to add assert {"type": "json" } for that.
[00:01:54] <blueagain> Is there any rationale there is no auto-detection here in case the file ending is json and no assert has been specified?
[00:02:29] <blueagain> (I realise this might be a spec thing more than a node thing, but I think the question is valid nonetheless.)
[00:02:33] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[00:02:59] <ljharb> blueagain: there's no good rationale, no
[00:03:06] <ljharb> blueagain: browsers require it because of browser-specific security constraints
[00:03:18] <ljharb> blueagain: and node, sadly, shipped JSON imports requiring the assertion, for no good reason
[00:03:27] <ljharb> blueagain: that said, there's zero benefit to native ESM; use babel.
[00:03:43] <jaawerth> there is the general idea that relying on extension for MIME types has not historically ended well, generally speaking
[00:04:03] <ljharb> the better solution for browsers would have been a separate manifest
[00:04:15] <jaawerth> but mdoule imports could be considered an exception. still, for stuff like js/jsx in a non-bundled environment you could be asking for trouble
[00:04:22] <ljharb> import assertions only advanced because node was planning to ship json imports without needing the assertion
[00:04:32] <jaawerth> but yes a manifest would be ideal, with individual assertions as as a per-import escape hatch
[00:04:38] <ljharb> but, that was changed at the last minute, so now here we are
[00:04:44] <ljharb> but at least tc39 knows it can't rely on node's promises anymore
[00:04:50] <blueagain> But an assert that something *is* can't really go wrong, can it? Either it is (good!), or it's just garbage posing as json, and it gets caught, also good.
[00:04:58] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[00:05:03] <jaawerth> and well for browsers it could actually check the content-type header too
[00:05:09] <ljharb> it does
[00:05:14] <jaawerth> well lookee there
[00:05:23] <ljharb> the reason for the assertion is so a JSON import can't suddenly become a JS import.
[00:05:39] <ljharb> which is a non-problem in anything that's not using network imports
[00:05:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:06:12] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 240 seconds)
[00:07:03] <blueagain> My only problem is that absolutely kills eslint. Really bugger.
[00:07:51] <blueagain> It's not even eslint, even acorn doesn't recognise it.
[00:08:04] <ljharb> that's because it's stage 3
[00:08:13] <ljharb> eslint has a dumb policy that doesn't support things until stage 4, even if they're shipped
[00:08:14] <magga> guys im fetching a long json from an api. and its containing dates with some information about it. and i want to render it on my page as <li>'s inside an <ul>. how hard would it be ? an example of one listitem would be: https://pastebin.com/gW4bj3DZ
[00:08:30] <ljharb> blueagain: since you should be using babel anyways, you can use the babel eslint parser.
[00:09:37] <blueagain> Yeah, not a huge fan of transpiling.
[00:10:07] <blueagain> How would an assert like that be transpiled even?
[00:11:56] <ljharb> since it's node, the file format is known in advance
[00:12:06] <ljharb> so it'd just fail to be transpiled, eagerly, if it wasn't pulling in a json file
[00:12:16] <magga> would i use something like .appendChild and .append or something? :)
[00:12:36] *** Joins: gcostigan (~glen.cost@h69-21-84-93.cncrtn.dedicated.static.tds.net)
[00:15:01] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[00:15:45] *** Joins: w0ng (~w0ng@103.1.212.190)
[00:16:20] *** Joins: jazzy (~jaziz@user/jaziz)
[00:17:47] *** Joins: Betal (~Betal@user/betal)
[00:19:02] *** Joins: Mnedusza (~Thunderbi@S010620e52a118339.ed.shawcable.net)
[00:20:24] *** Joins: sam_1 (~sam_1@87.51.251.118)
[00:22:05] *** Joins: matsaman (~matsaman@user/matsaman)
[00:24:36] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[00:24:53] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 250 seconds)
[00:27:01] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[00:27:16] <silly> omg html hell...
[00:28:19] <silly> 2hrs i wonder why the table wouldn't fit to content, how could it if the fields are all input elements ¯\_(ツ)_/¯
[00:29:43] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[00:29:54] <silly> so, if input elements are terrible with layouts, are there any nice alternatives?
[00:30:58] <silly> maybe if i replace the cell on click with an input whose style is set on the fly
[00:31:00] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[00:31:07] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[00:31:26] <ThePendulum> can´t you override the problematic styles?
[00:31:39] *** Joins: wyre (~wyre@user/wyre)
[00:31:51] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[00:32:11] *** Quits: crst (~crst@81-230-180-214-no2661.tbcn.telia.com) (Remote host closed the connection)
[00:32:15] <stenno> whats the css rules for the tr/td ?
[00:32:28] <silly> i'd have to set fixed widths for the input elements, but i wanted them to grow automatically
[00:32:43] *** Joins: ckdCreations (~ckdCreati@147.55.133.131)
[00:32:52] <silly> right now it's all input elements in every cell
[00:32:55] <stenno> wait didn't we have that issue a few weeks ago in here
[00:33:18] <silly> i certainly did not
[00:33:34] <stenno> not you, yeah
[00:33:39] <stenno> can you flexify a table?
[00:34:01] <silly> oh, there, https://react-table.tanstack.com/docs/examples/editable-data
[00:34:33] <silly> i haven't changed much since copy pasting, lol
[00:34:44] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:35:41] <stenno> huh
[00:35:47] <stenno> but those don't grow
[00:36:01] <silly> i want them to fit
[00:36:20] <silly> some would have to shrink, others would have to grow
[00:36:41] <silly> input element have their fixed size tho
[00:37:12] <stenno> wait how does that work
[00:37:41] *** Joins: nwoob (~apple@103.233.123.72)
[00:38:39] *** Joins: pavonia (~user@user/siracusa)
[00:39:14] <stenno> oh i assume its 'prepareRow' from useTable
[00:39:23] <silly> there there
[00:40:10] *** Joins: nomic (~nomic@185.217.117.82)
[00:40:12] <silly> i've changed from input to plain text and made the last th 100% wide
[00:40:14] <silly> fxxd
[00:40:54] *** Parts: squirrel (uid529456@user/squirrel) ()
[00:41:04] <nwoob> does equality operator checks for value or reference?
[00:41:13] *** Quits: hello-smile48 (~3fe02e3b@30.223.188.35.bc.googleusercontent.com) (Quit: Connection closed)
[00:41:39] <nwoob> because it checks for reference with objects and value with other types
[00:42:34] <stenno> value for primitives, 'reference' for objects
[00:42:41] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[00:42:44] <stenno> or for non-primitives, rather
[00:43:00] <stenno> value for primitives, 'reference' for non-primitives
[00:43:31] <nwoob> ok
[00:43:39] *** Quits: magga (magga@ti0036a400-3577.bb.online.no) (Remote host closed the connection)
[00:44:15] <stenno> b> const foo = 23; const bar = foo; const zomg = {a: 23}; const bla = zomg; [foo == bar, foo === bar, zomg == bla, zomg === bla]
[00:44:16] <jellobot> (okay) [ true, true, true, true ]
[00:44:46] <stenno> b> const foo = 23; const bar = 23; const zomg = {a: 23}; const bla = {a: 23}; [foo == bar, foo === bar, zomg == bla, zomg === bla]
[00:44:46] <jellobot> (okay) [ true, true, false, false ]
[00:44:54] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[00:46:07] <nwoob> interviewer asked me output of eqaulity and I asnwerd correctly, he confused me with saying if equality checks for value then why obj are not equal
[00:46:59] <systemfault> Stenno is right :)
[00:47:25] <stenno> i always like to think of primitives that the reference equals the value (which is probably super wrong, but it helps me understanding better)
[00:47:29] <nwoob> I said that's because objects have same value but they are pointinh to different memory location. then he said if that's the case then why a=10 === b=10
[00:47:56] <stenno> just think about references, don't think about memory locations. js has abstracted that away already
[00:48:24] <nwoob> isn't that the same thing?
[00:48:44] <stenno> i think in C it is
[00:48:51] <nwoob> ok
[00:48:57] <stenno> but thinking about memory locations in JS is moot unless you are actually implementing the engine
[00:49:04] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:49:42] <systemfault> That way of dealing with primitives vs objects isn't a JS-only concept, other langages... such as Java, works the same way.
[00:50:20] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[00:50:43] <stenno> how about (auto-)boxing?
[00:51:35] <systemfault> Same in Java :)
[00:51:43] <systemfault> Well... not always..
[00:51:52] <stenno> nice
[00:52:19] <KevinX> do i need a library to make an md5 hash in the browser?
[00:52:32] <systemfault> Maybe that the crypto lib supports it... not sure.
[00:52:39] <stenno> you should probably use one if you have to ask that question
[00:53:00] <stenno> oh as opposed to built-in
[00:53:16] <joepie91> MD5 hashing is generally a bad idea
[00:53:20] <KevinX> yeah is there a web api
[00:53:22] <stenno> n> 'toString' in 2
[00:53:22] <jellobot> (fail) TypeError: Cannot use 'in' operator to search for 'toString' in 2
[00:53:30] <joepie91> MD5 is very, very broken
[00:53:30] *** Quits: monoxane (~monoxane@user/monoxane) (Quit: Ping timeout (120 seconds))
[00:53:32] <systemfault> MD5 is fine... not for everything
[00:53:37] <KevinX> It's not something that needs to be secure
[00:53:41] <stenno> i assume its not for security but for hashing
[00:53:42] <systemfault> You wouldn't use that to hash passwords...
[00:53:44] *** Quits: purphoros (purphoros@devforge.org) (Quit: ZNC - https://znc.in)
[00:53:51] *** Joins: hello-smile48 (~3fe02e3b@30.223.188.35.bc.googleusercontent.com)
[00:53:53] <stenno> er but for hashing some object or os
[00:53:56] *** Joins: monoxane (~monoxane@user/monoxane)
[00:53:57] <KevinX> justw ant to hash a string to send as a query param
[00:54:01] <joepie91> KevinX: if you don't need cryptographic strength, then there are much faster non-cryptographic hashes
[00:54:11] <joepie91> and much simpler also, usually
[00:54:22] *** Quits: kristijonas (~kristijon@81-7-103-234.static.zebra.lt) (Ping timeout: 272 seconds)
[00:54:24] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a4d5:442:9efd:86ed) (Ping timeout: 252 seconds)
[00:54:24] <joepie91> but honestly for that usecase, just pick whatever the web crypto API offers
[00:54:49] <KevinX> i cant find many details on the api or how to use it
[00:54:54] *** Joins: purphoros (purphoros@devforge.org)
[00:54:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:54:56] <stenno> wait why do you want to hash the string?
[00:55:04] <KevinX> I just need something simple though
[00:55:11] <joepie91> KevinX: https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest
[00:55:28] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a4d5:442:9efd:86ed)
[00:55:57] <KevinX> I want to send an object in a query param in a utm value for google analytics
[00:56:03] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 252 seconds)
[00:56:16] <ljharb> KevinX: query params are only strings
[00:56:19] <KevinX> was thinkign something like md5(JSON.stringify({}))
[00:56:46] <KevinX> then save the same value in the database, along with the JSON
[00:57:12] <KevinX> I just want to avoid a long query param
[00:57:17] <austincheney> I use SHA3-512 for everything via Node and expose it to the browser as a microservice in my personal app.  Its fast enough for an end user.  If you wanted to hash records in a database you would probably want something faster
[00:58:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:58:46] <ljharb> KevinX: lol md5, without sorting the keys, is not going to work
[00:59:08] <ljharb> KevinX: you need a deterministic hash of the object. but really why
[00:59:14] <ljharb> KevinX: just save it on your backend, and use a DB ID
[00:59:33] <KevinX> They would be sorted. Ijust simplified the example above for chat
[01:00:09] <KevinX> It's dynamic though. it's also not on our site, but in code we distribute to the user
[01:00:20] <KevinX> And they report back to our saas service
[01:00:28] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[01:00:33] <KevinX> but there are also some links that have utm params
[01:01:03] <KevinX> This is for AB testing so I want to track all the tests they are participating in
[01:01:36] <KevinX> It's not determined until the component renders, but maybe I need to rethink that anyway
[01:02:41] <ljharb> KevinX: that seems like a really inefficient way to do a/b tests
[01:02:48] <ljharb> KevinX: the tests should have a unique ID on the backend
[01:02:54] *** Quits: hello-smile48 (~3fe02e3b@30.223.188.35.bc.googleusercontent.com) (Quit: Connection closed)
[01:04:17] <KevinX> The issue is reconciling it with Google Analytics to find what groups convert.
[01:04:35] <blueagain> Does anyone know if I can 'adopt' an npm package? It hasn't been updated in 7 years, and has only one other package that uses it... (which hasn't been updated in 7 years either).
[01:04:48] <austincheney> KevinX, do not reconcile test data with GA
[01:04:52] <austincheney> there is no reason to do that
[01:04:58] <KevinX> In a way that doens't track the specific user (just the state of their testing)
[01:05:36] <austincheney> your A/B test application should be providing all the data you need because all you need are your goal measures versus impressions per time interval and adjusted to cumulative measures
[01:05:39] <KevinX> well we have to. if we change the button from red to blue, we want to know which converts
[01:05:41] <ljharb> KevinX: the non-user-unique ID of the experiment is how you do that
[01:05:55] <ljharb> blueagain: nope, generally not
[01:06:03] <ljharb> blueagain: unless you get an owner of it to give it to you
[01:06:16] <blueagain> Damn, guess I have to pick another name for my package.
[01:06:29] <blueagain> ljharb: Yeah, only I see no way to contact the owner...
[01:06:31] *** Joins: hello-smile48 (~3fe02e3b@30.223.188.35.bc.googleusercontent.com)
[01:06:51] <ljharb> blueagain: `npm show foo` will list the email address of the publisher
[01:06:57] <ljharb> blueagain: but yes, generally in this scenario, you just pick another name
[01:07:04] <austincheney> KevinX, I know its stupid expsensive but just use Adobe Test and Target
[01:07:23] *** Joins: Alex8532 (~Alex8532@user/alex8532)
[01:07:32] <Maxdamantus> 10:11:04 < nwoob> does equality operator checks for value or reference?
[01:07:39] <blueagain> ljharb: Thanks! I'll send them an email! Maybe they're nice.
[01:07:46] <Maxdamantus> fwiw, imo people tend to use confusing terminology around that.
[01:07:56] <Maxdamantus> for me, === is always "for value"
[01:08:26] <KevinX> I'll check it out. This is code we distribute though, so we don't have control over their server. Everything we track is opt in too, but we still don't want to be able to ID the individual
[01:08:27] <Maxdamantus> With object value operands, it's just telling you whether the object values on both sides are the same.
[01:08:27] <austincheney> Maxdamantus, JS passes by reference only.  That is irrelevant for primitives, but important for complex types
[01:08:28] *** Joins: kristijonas (~kristijon@81-7-103-234.static.zebra.lt)
[01:08:36] <Maxdamantus> austincheney: JS passes by value only.
[01:08:51] <Maxdamantus> austincheney: your terminology there is definitely incorrect.
[01:08:52] <systemfault> References are copied by value....
[01:09:00] <systemfault> WWEEE EVERYONE IS RIGHT!
[01:09:11] <ljharb> nwoob: there is no "for reference" in JS
[01:09:16] <ljharb> nwoob: everything in JS is by value
[01:09:36] <austincheney> n> var a = {cat:"meow",dog:"bark"},b=a;b.cat="growl";a.cat; @Maxdamantus
[01:09:37] <jellobot> Maxdamantus, 'growl'
[01:09:47] <Maxdamantus> austincheney: "pass-by-reference" is another concept, which doesn't really exist in JS (it kind of does in the specification, but afaik no implementation allows pass-by-reference semantics)
[01:09:51] *** Quits: ThePhilgrim (~thephilgr@151.40.115.120) ()
[01:10:02] <stenno> the value that gets copied is the reference
[01:10:35] <Maxdamantus> austincheney: { let x = foo(); let y = x; bar(x); x === y; }
[01:10:40] <ljharb> !pass by value
[01:10:40] <jellobot> ljharb, JavaScript has call-by-value semantics in which references to objects are considered to be a type of value. Direct assignment to an argument will never be visible outside of a function. For a detailed explanation, see: https://web.archive.org/web/20161005155047/http://www.jon-carlos.com/2013/is-javascript-call-by-value-or-call-by-reference/
[01:10:54] <Maxdamantus> austincheney: ignoring NaN, in a pass-by-reference system, it is possible for that last comparison to be false.
[01:11:07] <Maxdamantus> austincheney: in JavaScript it's always true (again, ignoring the NaN issue)
[01:11:24] *** Quits: hello-smile48 (~3fe02e3b@30.223.188.35.bc.googleusercontent.com) (Quit: Connection closed)
[01:11:28] *** Quits: kristijonas (~kristijon@81-7-103-234.static.zebra.lt) (Remote host closed the connection)
[01:11:47] <Maxdamantus> austincheney: in C++ or PHP, someone can define a function like `void bar(int &x){ x = 4; }` which will modify the `x` variable. Never happens in JS.
[01:11:55] <blueagain> Dependencies: common-node: >=0.10.12
[01:12:03] <blueagain> They should definitely let someone adopt it. :)
[01:12:24] <ljharb> blueagain: what's the package name you want?
[01:12:29] <blueagain> ljharb: stick
[01:12:37] *** Quits: Mnedusza (~Thunderbi@S010620e52a118339.ed.shawcable.net) (Quit: Mnedusza)
[01:13:02] <ljharb> blueagain: still having 66 weekly downloads after 7 years doesn't bode well for taking it over
[01:13:15] <ljharb> but lol yes, that looks ancient
[01:13:15] <systemfault> Maxdamantus:  In a lot of languages, "references" are a bit like pointers with auto-dereferencing... Java is an example of that. It's unrelated to the idea of "references" in C/C++
[01:13:33] <Maxdamantus> fwiw, the thing I'm referring to in the specification relates to the result of calling a function, which according to the specification could conceivably be a reference, so maybe `foo() = 4;` would work, but I don't think there's any implementation that provides such a function.
[01:13:43] <Maxdamantus> it does however mean that `foo() = 4;` is valid syntax.
[01:13:48] <Maxdamantus> n> if(0) foo() = 4;
[01:13:48] <jellobot> (okay) undefined
[01:13:57] <ljharb> that's to allow for syntax old IE allowed
[01:14:08] <ljharb> i think it actually worked like that for interfacing with VB
[01:14:25] <ljharb> but it's a syntax error in everything else, and i doubt it'll ever work in JS, thankfully
[01:14:34] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[01:14:48] <blueagain> ljharb: Could that be me? You see, I use a local package with the same name, which I use with `yarn add ../stick`.
[01:14:55] <Maxdamantus> What do you mean by "everything else"? It has to be allowed syntax in all JS implementations.
[01:14:56] <blueagain> I have no idea if npm counts that as a download... probably not.
[01:15:19] <Maxdamantus> (just syntax that will always denote throwing code)
[01:15:32] <Maxdamantus> n> console.log() = 4;
[01:15:33] <jellobot> (fail) ReferenceError: Invalid left-hand side in assignment
[01:16:01] <blueagain> Anyway, I'll send an email their way, otherwise I'll just do stickjs or the likes.
[01:16:21] <Maxdamantus> systemfault: well, I wouldn't say "auto-dereferencing". `a.b` is how you dereference a reference in Java and JS.
[01:16:46] *** Joins: LtHummus (~lthummus@174-21-20-149.tukw.qwest.net)
[01:16:47] <ljharb> blueagain: no, it doesn't.
[01:16:59] <Maxdamantus> If you don't use the dot syntax (or something like `"" + a`, which will implicitly call `a.toString()`), then there's no dereferencing.
[01:17:02] <systemfault> Maxdamantus: I was making a "reference"(pun intended) to C... where you need to use * to dereference a pointer.
[01:18:09] <Maxdamantus> Right, that's because C allows you to have non-primitive things that are not dereferenced, so `a.b` in C doesn't mean dereferencing, but `a->b` (equivalent to `(*a).b`) does.
[01:18:56] <Maxdamantus> If C only had one of those things, it would just use the `a.b` syntax for whichever one it had.
[01:18:57] *** Joins: Mnedusza (~Thunderbi@S010620e52a118339.ed.shawcable.net)
[01:19:24] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 240 seconds)
[01:19:30] <systemfault> Maxdamantus: Anyway, you just want to argue at this point.... In JS, when you pass objects to functions, the objects are not copied by value, it's their <INSERT YOU FAVORITE WORD HERE>
[01:19:41] <systemfault> Maxdamantus: Tell me you favorite word and I'll use it
[01:19:47] <Maxdamantus> The object values are copied by value
[01:19:51] <blueagain> ljharb: https://github.com/olegp/stick has even been archived, lol.
[01:20:07] <systemfault> Maxdamantus: Okay bro
[01:24:44] <ljharb> systemfault: they are copied by value.
[01:24:52] <stenno> n> const buf = new Uint8Array([65,66,67]); const view = new DataView(buf, 1,1); buf.set([1],1); view.getUint8(0);
[01:24:53] <systemfault> No, they're not.
[01:24:53] <jellobot> (fail) TypeError: First argument to DataView constructor must be an ArrayBuffer
[01:24:57] <ljharb> systemfault: yes, they are. see the factoid.
[01:25:10] <ljharb> systemfault: it's just that the object values are a "reference value"
[01:25:12] <ljharb> systemfault: that is copied
[01:25:19] *** Quits: dirigible85 (~dirigible@2607:9000:0:3:36a4:cf80:2f7b:6990) (Quit: Leaving)
[01:25:21] <systemfault> ljharb: Yes
[01:25:29] <systemfault> ljharb: That's what I've been saying alllll that time.
[01:25:33] <ljharb> systemfault: right. and it's objectively "copying it by value", by every definition
[01:25:37] *** Joins: dirigible (~dirigible@2607:9000:0:3:36a4:cf80:2f7b:6990)
[01:25:46] <ljharb> that it's copying a reference by value doesn't make it "by reference"
[01:25:47] <systemfault> ljharb: But what do you call that "thing" is that copied?
[01:26:12] <Maxdamantus> systemfault: there is no concept of a "value" in JS representing the contents of an object.
[01:26:17] <systemfault> JS doesn't support C++ "pass by reference", it's pretty clear
[01:26:39] <Maxdamantus> systemfault: the contents of objects in JS are always indirect. There is no value for them.
[01:26:55] <ljharb> systemfault: right, the term i use for what's copied is "reference value" but it's definitely vague
[01:27:23] <ljharb> the object's property keys and values certainly aren't copied. but they're not "the object"; its identity is.
[01:27:29] <systemfault> ljharb: That's the one I'll use from now so that we have a common vocabulary on this channel
[01:27:39] <Maxdamantus> systemfault: a value is something that can be evaluated. You never evaluate to the contents of an object in JS.
[01:28:05] <Maxdamantus> (that is, something that is the result of an evaluation)
[01:28:38] <systemfault> Just because the value of the "reference" is not exposed doesn't mean it doesn't exist... (If it was C, it would be the address of said object)
[01:28:54] <systemfault> That non-exposed "value" is what is compared when you do ===
[01:28:58] <Maxdamantus> Right, so pointer values in C are also values.
[01:29:11] <stenno> everything in C is some sort of number
[01:29:11] <Maxdamantus> C additionally has the concept of the value stored in an object.
[01:29:41] <Maxdamantus> eg, if you're using `a->b` in C, you can also talk about the value of the object, denoted by `*a`, which will be a struct value.
[01:29:59] <Maxdamantus> that value exists independently of the object or any pointer pointing to it.
[01:30:11] <Maxdamantus> JS doesn't have that though.
[01:30:21] <ljharb> systemfault: that non-exposed "value" is also what i'd call its identity, ftr
[01:30:35] <systemfault> ljharb: Thanks again!
[01:30:37] <ljharb> Maxdamantus: an object in JS has an identity. that is a value you can test for.
[01:30:52] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[01:31:18] <Maxdamantus> ljharb: sure.
[01:31:44] *** Quits: nwoob (~apple@103.233.123.72) (Ping timeout: 272 seconds)
[01:32:20] <ljharb> so, that's the "reference value" that's reified/evaluated/exists
[01:32:28] <Maxdamantus> Yes.
[01:32:41] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:34:29] *** Joins: sam_1 (~sam_1@87.51.251.118)
[01:34:55] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[01:35:05] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:35:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:35:05] *** Joins: wroathe (~wroathe@user/wroathe)
[01:35:06] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[01:35:16] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Read error: Connection reset by peer)
[01:37:08] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[01:37:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:37:26] *** Quits: flughafen (~flughafen@p2e55d61e.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[01:37:26] *** Quits: cotko (~cotko@155.pool85-49-78.dynamic.orange.es) (Ping timeout: 272 seconds)
[01:38:57] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 252 seconds)
[01:40:40] *** Joins: AtomicLong (~primamate@p200300ee1713340034665eac106bc8bd.dip0.t-ipconnect.de)
[01:41:09] *** Quits: gcostigan (~glen.cost@h69-21-84-93.cncrtn.dedicated.static.tds.net) (Ping timeout: 252 seconds)
[01:42:44] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[01:43:37] *** Joins: abf (~abf@user/abf)
[01:49:02] *** Joins: audiobirb (~audio@user/audio)
[01:50:07] <bobdobbs> oen thing that constantly surprises me: the sheer volume of knowledge required for someone to be even  a mediocre programmer.
[01:50:31] *** Quits: MootPoot (uid444585@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[01:51:48] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[01:51:56] *** Joins: sam_1 (~sam_1@87.51.251.118)
[01:52:56] *** Joins: MootPoot (uid444585@id-444585.ilkley.irccloud.com)
[01:54:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:54:18] <bobdobbs> I've spent the last few hours experimenting with typescript. I've been figuring out how to set up the node module for a typescript language server, integrating it into my IDE, reading about it...
[01:55:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:57:04] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 272 seconds)
[01:58:02] *** Joins: pulse (~pulse@user/pulse)
[01:58:52] *** Joins: llorllale (~llorllale@198.98.119.85)
[01:59:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[02:00:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[02:00:26] *** Joins: trevors (~trevors@user/trevors)
[02:00:27] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[02:01:00] *** Quits: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[02:01:57] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[02:02:24] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 250 seconds)
[02:05:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:05:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:05:57] *** Joins: wroathe (~wroathe@user/wroathe)
[02:06:34] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 272 seconds)
[02:06:39] *** Joins: diamondbond (~diamondbo@175.157.50.34)
[02:09:15] *** Joins: sam_1 (~sam_1@87.51.251.118)
[02:10:17] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:1d61:6202:da16:ab6d) (Quit: Client closed)
[02:10:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[02:11:24] *** Joins: Jigsy (~Jigsy@user/jigsy)
[02:14:10] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 272 seconds)
[02:14:18] <stenno> n> 'a'.match(/\u{61}/u)
[02:14:19] <jellobot> (okay) [ 'a', index: 0, input: 'a', groups: undefined ]
[02:15:31] <stenno> n> '→'.match(/\u{2192}/u)
[02:15:31] <jellobot> (okay) [ '→', index: 0, input: '→', groups: undefined ]
[02:15:46] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[02:15:59] <stenno> n> 'xyz→'.match(/(.+)(?!\u{2192})/u)
[02:16:00] <jellobot> (okay) [ 'xyz→', 'xyz→', index: 0, input: 'xyz→', groups: undefined ]
[02:16:18] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:23:40] *** Quits: Arisc (~ckmptnml@189-31-251-104.user3p.brasiltelecom.net.br) (Ping timeout: 272 seconds)
[02:30:01] <ljharb> bobdobbs: TS can't be used properly without a pretty solid knowledge of JS, and also, it's not a superset, so you need to be aware of the caveats
[02:31:45] *** Quits: stagas (~stagas@2a02:587:c42f:9215:3eaa:9482:83c5:aa7) (Ping timeout: 252 seconds)
[02:32:42] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[02:32:46] *** Quits: pizdets (~pizdets@183.182.111.175) (Ping timeout: 250 seconds)
[02:33:53] *** Joins: pizdets (~pizdets@183.182.115.222)
[02:34:35] *** Joins: onosendi (~onosendi@user/onosendi)
[02:35:12] *** Quits: voidsync (~void@user/voidsync) (Quit: voidsync)
[02:36:26] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[02:36:36] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:37:44] *** Joins: trevors (~trevors@user/trevors)
[02:38:07] <VectorX> 'xyz→'.match(/^.+(?=\u2192)/um)
[02:38:11] <VectorX> n> 'xyz→'.match(/^.+(?=\u2192)/um)
[02:38:12] <jellobot> (okay) [ 'xyz', index: 0, input: 'xyz→', groups: undefined ]
[02:39:18] *** Joins: Arisc (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br)
[02:40:36] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[02:40:39] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[02:42:13] <VectorX> n> 'xyz→'.match(/^[^\u2192]+)/um)
[02:42:14] <jellobot> (fail) SyntaxError: Invalid regular expression: /^[^\u2192]+)/: Unmatched ')'
[02:42:31] <VectorX> n> 'xyz→'.match(/^[^\u2192]+/um)
[02:42:31] <jellobot> (okay) [ 'xyz', index: 0, input: 'xyz→', groups: undefined ]
[02:51:00] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[02:51:22] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[02:51:27] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[02:51:31] *** Joins: pulse_ (~pulse@user/pulse)
[02:51:47] <stenno> n> 'xyz→'.match(/^(?:(?!\u{2192}))*/u)
[02:51:48] <jellobot> (okay) [ '', index: 0, input: 'xyz→', groups: undefined ]
[02:52:25] <stenno> n> 'xyz→'.match(/^(?:(?!\u{2192}).)+/u)
[02:52:26] <jellobot> (okay) [ 'xyz', index: 0, input: 'xyz→', groups: undefined ]
[02:52:29] <stenno> here we are
[02:52:33] <stenno> with help from #regex
[02:53:07] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:53:19] *** Joins: hello-smile48 (~3fe02e3b@30.223.188.35.bc.googleusercontent.com)
[02:53:29] <stenno> VectorX: ^ fyi the lookahead variant
[02:54:05] <VectorX> the latter I posted is more efficient for one char, you would use a lookaround if you had more than 1 char
[02:54:18] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[02:54:29] <stenno> whats 'm' ?
[02:54:31] *** Quits: AtomicLong (~primamate@p200300ee1713340034665eac106bc8bd.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[02:54:32] <stenno> as a flag?
[02:55:06] <VectorX> m might not be needed for JS but generally tells the engine to treat ^ and $ as start and end of line
[02:55:19] <stenno> gotcha
[02:55:29] <VectorX> actually the lookahead i posted previous is also more efficient
[02:55:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:55:55] <stenno> ooh sorry didn't see that you posted that up there
[02:56:21] <VectorX> ... /^.+(?=\u2192)/um
[02:57:00] <stenno> 'match any character until the next character is →'
[02:57:29] <stenno> as opposed to
[02:58:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:58:24] <stenno> 'check if next character is the →, and if it isn't, continue matching'
[02:58:28] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[02:59:13] *** pulse_ is now known as pulse
[02:59:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[02:59:59] <VectorX> I selected PCRE so you can see the step count, 20 https://regex101.com/r/Hgabvk/1 vs 10 https://regex101.com/r/Hgabvk/2 vs 5 https://regex101.com/r/Hgabvk/3
[03:01:48] *** Joins: sam_1 (~sam_1@87.51.251.118)
[03:06:44] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 272 seconds)
[03:10:17] *** Joins: stagas (~stagas@2a02:587:c42f:9215:4a00:2372:35bd:b5ee)
[03:14:29] <onosendi> .window right
[03:16:20] *** hello-smile48 is now known as hello-smile6
[03:19:31] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[03:22:24] <bobdobbs> how do I  automatically load specific minor modes when a specific major mode has been opened?
[03:23:30] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.4)
[03:23:46] <systemfault> Are we doing emacs support now? :P
[03:24:33] <bobdobbs> dammit. wrong channel again
[03:24:43] *** Joins: crashrep (~crashrep@user/crashrep)
[03:25:07] <bobdobbs> systemfault: last night I asked a js question in #emacs. So I guess I'm balancing things out
[03:25:43] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:27:15] <hello-smile6> Huh
[03:29:32] <ljharb> easy to confuse a programming language with an operating system
[03:30:21] *** Quits: obimod (~obimod@gateway/vpn/pia/obimod) (Ping timeout: 250 seconds)
[03:30:53] *** Joins: sh4_ (~sh4@user/sh4)
[03:32:21] *** Joins: nomic2 (~nomic@185.217.117.193)
[03:32:25] <sh4_> i'm getting SyntaxError: expecting '('  when running     if (!isnodejs) { import * as std from 'std'; }   via quickjs. whats wrong ?
[03:33:49] <sh4_> quickjs seems to be quite anal about the position of that import statement, in fact i could only make it work as very first line (without condition)
[03:34:10] <deviantfero> https://github.com/PetterS/quickjs/issues/13
[03:34:20] <deviantfero> have you seen that issue? seems to be related to what you're seeing
[03:35:14] *** Quits: nomic (~nomic@185.217.117.82) (Ping timeout: 272 seconds)
[03:35:14] *** Quits: pmercado (~pmercado@186.107.49.217) (Ping timeout: 272 seconds)
[03:35:17] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 240 seconds)
[03:35:19] <ljharb> sh4_: so is the javascript language
[03:35:24] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[03:35:24] <ljharb> sh4_: `import` can only EVER appear at the top level of a module
[03:35:30] <ljharb> sh4_: there are no conditional ESM imports/
[03:35:43] <ljharb> sh4_: also don't use `import * as`.
[03:35:55] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[03:35:55] *** Quits: hassoon_ (hassoon@user/hassoon) (Ping timeout: 256 seconds)
[03:36:26] *** Joins: k8yun (~k8yun@user/k8yun)
[03:36:53] <sh4_> ljharb, good to know. the code later uses std.puts() and std.exit(), what would you suggest to turn that import statement into?
[03:37:09] <sh4_> optionally in a way that it can go into the !node condition...
[03:38:46] <ljharb> sh4_: ok so a) you can't optionally import things synchronously, sorry. only unconditionally.
[03:38:50] <ljharb> sh4_: so, just import it no matter what
[03:39:12] <sh4_> in that case it will probably fail with node.js
[03:39:13] <ljharb> sh4_: as for the import statement itself, either do `import std from 'std';` or do `import { puts, exit } from 'std';`, depending on what `std` is.
[03:39:44] <ljharb> sh4_: you can't necessarily write portable code between node and an unfinished hobby project like quickjs
[03:39:48] <sh4_> std is a C module offering a couple functions like fopen
[03:39:50] *** Quits: mat001 (~mat001@72.28.108.216) (Read error: Connection reset by peer)
[03:39:53] <ljharb> something from npm?
[03:40:23] <sh4_> it's part of quickjs
[03:40:38] <ljharb> ok so, there you go, it's not portable.
[03:40:44] <ljharb> write different code for node and quickjs
[03:41:07] <ljharb> (altho, it would work if it was in https://www.npmjs.com/package/std, or if you added a `node_modules/std/index.js` that had `module.exports = {}`
[03:41:10] <ljharb> )
[03:41:51] <sh4_> you're calling quickjs unfinished and i sort of have to agree. unmaintained since 1 year :/
[03:42:06] <sh4_> ah thanks, good trick that
[03:42:49] <ljharb> well sure, it was just a hobby project
[03:43:05] <ljharb> node is The Way to run JS code outside a browser, and will be so for the foreseeable future. it's not really worth trying anything else.
[03:43:23] <stenno> any reason why you chose quickjs?
[03:43:34] <sh4_> node is a bit too huge for my taste
[03:43:42] <sh4_> it takes like an hour to build
[03:43:54] <ljharb> sh4_: why do you need to build it, it ships binaries for most platforms
[03:44:05] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:44:08] <sh4_> i'm maintainer of a build-from-source distro
[03:44:16] <ljharb> ouch
[03:44:24] <ljharb> ok but who'd want to use a distro that doesn't use node
[03:44:34] <sh4_> it ships node
[03:44:36] *** Joins: obimod (~obimod@gateway/vpn/pia/obimod)
[03:44:51] <sh4_> but i dont want to use it on my hdd-space-starving home pc
[03:44:53] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[03:44:54] <ljharb> … but everyone has to build it from source?
[03:44:57] <sh4_> yes
[03:45:03] <sh4_> there are no binary packages
[03:45:06] <ljharb> i'm really confused; hard drive space is infinite and free
[03:45:19] <sh4_> not in a laptop
[03:45:21] <ljharb> also node taking an hour to build implies a very obsolete machine, how old are we talking?
[03:45:29] <ljharb> my laptop has a 2TB drive in it
[03:45:41] <sh4_> well, it seems you got a good salary
[03:45:56] <sh4_> anyway, no matter how big my harddrives, i always end up filling them quickly
[03:46:18] <Maxdamantus> sh4_: because you installed too many JS implementations?
[03:46:32] <sh4_> heh
[03:46:33] <ljharb> here's one for $70 https://www.amazon.com/Seagate-BarraCuda-Internal-Drive-2-5-Inch/dp/B07D99S8Z7/ref=sr_1_3?crid=2K6YQGG9LNTGA&keywords=2tb+laptop+hard+drive&qid=1644884183&sprefix=2tb+laptop+hard+dri%2Caps%2C173&sr=8-3
[03:46:41] <ljharb> but sure, fair enough
[03:46:52] <sh4_> the ssd in my laptop is soldered in
[03:46:56] <stenno> maybe it runs on some embedded thing
[03:47:26] *** Joins: hassoon_ (hassoon@shell.oddprotocol.org)
[03:47:44] <ljharb> sh4_: usually only macs are that unmodifiable, and those run node just fine
[03:48:31] <sh4_> well, i was surprised too when i got that thing
[03:48:41] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[03:48:55] <sh4_> i guess thats what you get when you go for ultra-low-power models
[03:49:11] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[03:49:34] <ljharb> sh4_: https://moneywise.com/managing-money/budgeting/boots-theory-of-socioeconomic-unfairness
[03:49:39] <stenno> sounds like a cool challenge tbf
[03:49:46] <Maxdamantus> Anyway, an hour to build node doesn't sound *that* old for a laptop.
[03:50:15] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[03:50:26] <stenno> does number of cores matter much?
[03:50:27] <Maxdamantus> iirc it took 45 minutes or so last time I built it on my 7-year-old work desktop, which afaict is basically equivalent to a modern laptop.
[03:50:32] <Maxdamantus> Yes.
[03:50:38] <stenno> i see
[03:50:42] <silly> make -j 512
[03:50:45] <stenno> hehe
[03:50:47] *** Joins: mat001 (~mat001@72.28.108.216)
[03:51:14] <ljharb> let's see.
[03:51:36] <Maxdamantus> I'll build it now on my home desktop, which should be a lot faster.
[03:51:39] * Maxdamantus predicts 10 minutes.
[03:52:11] <silly> i could benchmark J4105 gemini lake
[03:52:19] <sh4_> another reason against node.js is that versions > 12 require a bleeding edge C++ compiler
[03:52:21] <silly> building chrome takes 2 days
[03:52:22] *** Quits: DrowningElysium (uid190788@user/drowningelysium) (Quit: Connection closed for inactivity)
[03:52:23] <sh4_> > 0.12
[03:53:01] <sh4_> oh, 12 was right
[03:53:08] <silly> there's reason against supported node versions?
[03:53:09] <Maxdamantus> `make -j12`
[03:53:31] <ljharb> sh4_: 0.12 and 12 are verrrry different
[03:53:42] <ljharb> sh4_: and i doubt it's really bleeding edge
[03:53:49] <sh4_> yeah, i use 12.7, iirc last version that builds with gcc 6.56
[03:53:54] <sh4_> 6.5.0
[03:54:50] <Maxdamantus> CPU using about 120 W.
[03:54:55] <ljharb> sh4_: that came out in 2018
[03:55:07] <ljharb> sh4_: and gcc 9 came out in 2019
[03:55:13] <ljharb> according to google anyways
[03:55:19] <ljharb> what version does node 12+ require?
[03:55:19] *** Joins: ferdna (~ferdna@user/ferdna)
[03:55:27] <Maxdamantus> come to think of it, I should have actually done -j20
[03:55:30] <sh4_> i didn't want to upgrade the system compiler to a much more memory hungry version just to build a single package requiring C++17
[03:55:54] <sh4_> (gcc8 uses almost twice the ram than gcc6)
[03:56:10] <Maxdamantus> okay, restarted, now using 150 W.
[03:56:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:56:26] <ljharb> sh4_: lol i hope you read that boots article
[03:56:28] <sh4_> Maxdamantus, how do you meter your power consumption ?
[03:56:44] <Maxdamantus> sh4_: intel-rapl
[03:57:42] <Maxdamantus> sh4_: https://gist.github.com/Maxdamantus/2441aa2ed8665414f0f3b10d83983ad0
[03:58:30] <Maxdamantus> Might be some user-friendly graphical alternative, especially on MacOS.
[03:58:31] <matsaman> gcc 6?
[03:58:48] <matsaman> is there a disro that maintains gcc 6?
[03:58:55] <sh4_> matsaman, yes
[03:59:23] <sh4_> Maxdamantus, interesting. gotta see whether there's a CONFIG item i gotta turn on to get that in my kernel
[03:59:33] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:59:33] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:59:33] *** Joins: wroathe (~wroathe@user/wroathe)
[03:59:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[04:00:00] <matsaman> Debian 9 until this June?
[04:00:05] <Maxdamantus> sh4_: I think it's a relatively recent feature in Intel CPUs, so it might not be supported if it's a few generations back.
[04:00:12] <matsaman> I'm going to say no
[04:00:38] <Maxdamantus> sh4_: if it's a laptop, you can probably find the overall power usage through ACPI anyway (will be for the whole laptop, not just the CPU).
[04:01:06] <matsaman> your approach requires using something that even Debian will not support in four months
[04:01:11] *** Joins: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[04:01:24] <matsaman> a release of Debian originating five years ago
[04:01:43] <sh4_> matsaman, https://github.com/sabotage-linux/sabotage/blob/master/pkg/stage1#L5
[04:01:52] <sh4_> not all the world is debian/ubuntu
[04:02:26] <matsaman> doesn't sabotage prefer musl? You think they're patching gcc 6 bugs?
[04:02:41] <sh4_> musl is libc, gcc is compiler
[04:03:06] <buu> 129     perlDoc.elems.forEach((elements: PerlElem[], elemName: string) => {
[04:03:11] <matsaman> oh I'm thinking of clang, apologies
[04:03:21] <buu> forEach passes the index *number* as the second item right?
[04:03:33] <stenno> yes
[04:03:37] <matsaman> what's sabotage linux's thing? Old software? =P
[04:03:41] *** Quits: adas (adas@adas.shelltalk.net) (Ping timeout: 245 seconds)
[04:03:44] <stenno> hmm strange
[04:03:58] <buu> Wait, is there a different forEach for, like, a map or something?
[04:03:58] <stenno> signature is value, index, array
[04:04:11] <stenno> ooh
[04:04:25] <stenno> nodelists, right
[04:04:26] *** Quits: barkle (kirk@kirk.shelltalk.net) (Ping timeout: 268 seconds)
[04:04:32] <buu> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach
[04:04:45] <buu> Welp.
[04:04:49] <sh4_> matsaman, robustness, low resource usage, hackability
[04:05:03] *** Quits: kill (~killown@user/killown) (Quit: Leaving)
[04:05:33] <sh4_> my total memory usage is 12MB after booting and startx
[04:05:54] <matsaman> okay but where did you find a 12MB memory stick to make that worthwhile?
[04:05:59] <sh4_> so i have plenty of RAM left for the power-hungry browser
[04:06:21] <stenno> buu: er what
[04:06:35] <Maxdamantus> real    10m37.462s
[04:06:36] <Maxdamantus> user    154m46.139s
[04:06:36] <Maxdamantus> sys     6m35.786s
[04:06:50] * Maxdamantus wasn't expecting his prediction to be that accurate.
[04:06:56] <sh4_> user 154, e-g- 2.5 single-core hours
[04:07:10] <ljharb> buu: yes, map, set, and array have different ones
[04:07:55] <stenno> hysterical reasons?
[04:08:00] <matsaman> this kinda looks more like it uses gcc6 to install itself and then assumes you'll use another more recent version
[04:08:13] *** hello-smile6 is now known as he
[04:08:31] *** he is now known as hello-smile6
[04:08:46] <sh4_> matsaman, i provide newer versions, but gcc6 is the stock compiler and recommended
[04:09:29] <ljharb> stenno: no, good ones
[04:09:32] <sh4_> it's rock solid, produces very good code, and memory usage is somewhat reasonable
[04:10:06] <ljharb> what's the name of this distro
[04:10:10] <sh4_> i'd prefer gcc 4.7.4 because it's written in C, but alas, C++ standards getting used for core packages forced me to update
[04:10:27] <sh4_> *newer
[04:10:29] <stenno> ([key,value],index,ary,...) is what i would have expected i guess
[04:10:40] <stenno> er ary is wrong
[04:10:52] <stenno> map i guess
[04:10:56] <sh4_> ljharb, sabotage linux
[04:10:58] <matsaman> grumble grumble C++
[04:11:05] <ljharb> stenno: Map and Set don't pass the collection because that's dumb
[04:11:11] <ljharb> stenno: and they also don't have indexes
[04:11:18] <ljharb> stenno: like, conceptually
[04:11:25] <ljharb> so, a Map only has key and value, and a Set only has value
[04:11:27] <stenno> yeah that occured to me when i wrote it
[04:11:40] <stenno> right
[04:11:43] <ljharb> however, Set forEach callbacks get passed `value, value` so they can be shared between Map and Set
[04:11:45] <ljharb> not that that's a good reason
[04:12:52] <stenno> wait it does pass the collection though
[04:12:57] *** Quits: peteyboy1 (~peteyboy1@95.169.226.66) (Ping timeout: 252 seconds)
[04:13:15] <ljharb> oh no
[04:13:18] <ljharb> well, that's still dumb
[04:13:30] <stenno> n> new Map([['a',23],['b',42]]).forEach((value, key, map) => console.log(map))
[04:13:31] <jellobot> (okay) Map(2) { 'a' => 23, 'b' => 42 } Map(2) { 'a' => 23, 'b' => 42 }
[04:13:52] <ljharb> n> new Map([[1,2]]).forEach((...args) => console.log(args));
[04:13:53] <jellobot> (okay) [ 2, 1, Map(1) { 1 => 2 } ]
[04:13:55] <ljharb> ok so yeah that's dumb
[04:13:57] <ljharb> but there it is
[04:14:26] <ljharb> sh4_: ok, so on my 1 year old mac laptop, installing node 17.3 from source took 22 minutes
[04:14:34] <ljharb> so an hour maybe isn't that unreasonable
[04:15:24] <stenno> agreed that index is pretty useless for a Map...
[04:16:25] <stenno> with iterator helpers: map.entries().forEach(([k,v],i,a) => ...
[04:16:27] <stenno> :P
[04:16:34] <ljharb> it's a conceptual category error
[04:17:03] <sh4_> ljharb, M1 ?
[04:18:28] *** Quits: nomic2 (~nomic@185.217.117.193) (Quit: Leaving)
[04:18:35] <systemfault> I don't believe M1 MBP were a thing a year ago
[04:19:07] *** Quits: mat001 (~mat001@72.28.108.216) (Read error: Connection reset by peer)
[04:21:28] *** Joins: mintoyatsu (~mint@user/mintoyatsu)
[04:23:19] *** Joins: peteyboy1 (~peteyboy1@95.169.226.66)
[04:27:48] *** Quits: peteyboy1 (~peteyboy1@95.169.226.66) (Ping timeout: 252 seconds)
[04:27:51] *** Joins: fon (~fon@user/fon)
[04:36:45] *** Joins: Betal (~Betal@user/betal)
[04:38:10] <Maxdamantus> 22 minutes does sound quite fast for a laptop, so I'd guess M1.
[04:38:56] *** Joins: adas (adas@adas.shelltalk.net)
[04:40:38] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a4d5:442:9efd:86ed) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:42:33] <Maxdamantus> Since my build took 10 minutes at around 120–150 W (seemed to be thermal throttled at the end), a 22-minute build also on Intel would have been about 60 W.
[04:42:39] <Maxdamantus> Hm, maybe that's not so unrealistic.
[04:43:07] <Maxdamantus> I guess 60 W might be normal for a high-end laptop CPU.
[04:45:33] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[04:47:32] *** Joins: kirk (kirk@kirk.shelltalk.net)
[04:52:34] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-d449-2685-1032-d72e.res6.spectrum.com) (Remote host closed the connection)
[04:52:48] <ljharb> sh4_: no
[04:53:06] <ljharb> a year ago, too few things worked with m1; it wouldn’t have been a good bet
[04:55:08] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[04:55:31] *** hello-smile6 is now known as hello-smile48
[04:56:38] <sh4_> hmm, with node.js i get  ReferenceError: Babel is not defined   when require('./babel.js'); and then using Babel.transform(...) in code   from   https://unpkg.com/@babel/standalone/babel.js
[04:56:45] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[04:56:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:57:06] <sh4_> interestingly, it works in quickjs
[04:57:28] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:57:46] <Maxdamantus> node/CommonJS packages don't normally put things into the global scope.
[04:58:05] <Maxdamantus> so you need to do something like `const Babel = require("./babel.js");`
[04:58:37] *** hello-smile48 is now known as _9pfs
[04:58:54] <sh4_> cool, thanks
[05:00:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[05:00:24] *** Quits: Stanley (~stanley@d66-183-88-69.bchsia.telus.net) (Quit: ZNC - https://znc.in)
[05:00:48] *** Quits: diamondbond (~diamondbo@175.157.50.34) (Ping timeout: 252 seconds)
[05:00:48] *** Joins: Stanley (~stanley@d66-183-88-69.bchsia.telus.net)
[05:01:48] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[05:02:17] *** Joins: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net)
[05:04:15] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Quit: WeeChat 3.4)
[05:04:40] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:08:03] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:21:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:23:54] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Remote host closed the connection)
[05:25:04] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[05:27:38] *** Joins: Max29 (~adsasds@31.223.129.46)
[05:29:35] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[05:30:41] <ljharb> Max29: you need to auth with nickserv for non-ops to see what you say. see the last link in the topic
[05:30:54] <ljharb> sh4_: why would you require `./babel.js`
[05:30:59] <ljharb> sh4_: you should `require('babel')`
[05:31:58] <sh4_> i tried dozens of things to make node find it, and that worked, but note taken
[05:33:15] *** Quits: N4buc0 (~N4buc0@177.42.101.69) (Ping timeout: 252 seconds)
[05:34:26] <ljharb> sh4_: be sure all installed deps are inside a node_modules folder, and you have a package.json
[05:35:26] <sh4_> ljharb, i wanted to side-step npm
[05:35:38] <ljharb> um, why
[05:35:51] <ljharb> "i want to drive a car, but side-step wheels"
[05:36:45] <buu> And that's how ljharb discovered the tank!
[05:36:54] <sh4_> :>
[05:37:37] <ljharb> lol
[05:38:15] <buu> npm is cool it installs modules and doesn't afraid of anything
[05:38:56] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:40:23] *** Joins: vysn (~vysn@user/vysn)
[05:43:50] <ljharb> ᕙ(▀̿̿Ĺ̯̿▀̿ ̿) ᕗ
[05:43:52] <bobdobbs> new zealanders: "mum I want a tank". mum: "we have a tank at home"
[05:44:00] <bobdobbs> tank at home: https://en.wikipedia.org/wiki/Bob_Semple_tank
[05:46:00] *** Joins: matsaman (~matsaman@user/matsaman)
[05:47:22] *** Quits: _9pfs (~3fe02e3b@30.223.188.35.bc.googleusercontent.com) (Quit: Connection closed)
[05:50:14] *** Joins: hello-smile48 (~3fe02e3b@30.223.188.35.bc.googleusercontent.com)
[05:50:29] *** Joins: audio (~audio@user/audio)
[05:52:10] *** hello-smile48 is now known as _9pfs
[05:57:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:00:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:08:05] *** Joins: diamondbond (~diamondbo@175.157.50.34)
[06:10:53] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Remote host closed the connection)
[06:13:14] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[06:17:50] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[06:18:26] <banana_> yo I need help. how do you do like an array of awaits in a forEach(...) or .map(...)
[06:19:07] <ljharb> banana_: depends
[06:19:25] <ljharb> banana_: start with an array of "tasks" - functions that return a promise. now, do you want it to run concurrently or in serial
[06:19:54] <banana_> current doing like `await Promise.all(someArr.map(async (elem) => await someAsync(...)))`
[06:20:01] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[06:20:06] <banana_> in serial
[06:20:10] <banana_> for sure ljharb
[06:20:28] <ljharb> banana_: ok, `tasks.reduce((prev, task) => prev.then(() => task()), Promise.resolve())`
[06:20:30] <ljharb> that's serial
[06:20:32] *** Quits: Mnedusza (~Thunderbi@S010620e52a118339.ed.shawcable.net) (Quit: Mnedusza)
[06:20:32] <banana_> like the someArr I want it to enumerate but wait for the previous element to finish it's async
[06:20:56] <ljharb> concurrently would be `Promise.all(tasks.map(x => x())`
[06:21:02] <banana_> fuck that's ugly
[06:21:09] <banana_> but awesome I guess thanks for answering that
[06:21:20] <ljharb> np
[06:21:58] <banana_> do you create a util for that?
[06:22:03] <banana_> for stuff like that?
[06:23:01] <ljharb> you could, like `serial(tasks)`
[06:23:08] <ljharb> i usually don't tho. the use case comes up so rare;ly
[06:23:11] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[06:23:19] *** Quits: _9pfs (~3fe02e3b@30.223.188.35.bc.googleusercontent.com) (Quit: Connection closed)
[06:23:57] *** Quits: Alex8532 (~Alex8532@user/alex8532) (Quit: Going offline, see ya! (www.adiirc.com))
[06:28:17] <banana_> how do you use await-async keywords for the tasks
[06:28:50] <ljharb> i mean, you shouldn't use them if you don't have to
[06:29:05] <banana_> sorry trying to use await-async. so you can make tasks an array of function that returns Promises right
[06:29:14] <ljharb> but you could do: `tasks.reduce(async (prev, task) => { await prev return task(); }, Promise.resolve())`
[06:29:30] <ljharb> `tasks` is already promise-returning functions tho, as i said at the start
[06:30:56] <banana_> you shouldn't use async await keywords?
[06:31:19] <ljharb> i mean, `async` is fine as a way to guarantee a promise is returned. each `task` should be one.
[06:31:24] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Quit: WeeChat 2.8)
[06:31:28] <ljharb> `await` rarely offers value and should be avoided most of the time.
[06:31:57] <ljharb> but also, since you can't use `for-of` in an expression position, my first non-await `reduce` is the shortest way you can do that.
[06:32:40] <banana_> i thought people on here like async await
[06:33:11] <ljharb> i said what i said
[06:33:36] <gde33> I never use async await
[06:34:38] *** Joins: _9pfs (~3fe02e3b@30.223.188.35.bc.googleusercontent.com)
[06:34:42] <banana_> dude
[06:34:58] <banana_> I wanna join the club. i hate using async-await
[06:35:04] <deviantfero> why?
[06:35:07] <systemfault> From what I've seen so far, most people prefer async/await
[06:35:17] <deviantfero> I think there are certain cases where promise syntax makes more sense
[06:35:22] <deviantfero> mostly concurrent operations
[06:35:23] <banana_> cuz it's just easier knowing how promises work
[06:35:34] <deviantfero> you can know how promises work and use async/await
[06:35:38] *** Quits: abf (~abf@user/abf) (Quit: Leaving)
[06:36:06] <deviantfero> if I have to make six concurrent requests and I don't care about resolve order
[06:36:12] <deviantfero> definetly Promise is the way to go
[06:36:42] <gde33> probably
[06:36:57] <gde33> I just count to 6
[06:37:21] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Quit: Leaving)
[06:37:27] <ljharb> deviantfero: more to the point, when ordering doesn't matter, `await` is actively harmful
[06:38:37] *** _9pfs is now known as chmod10000
[06:39:01] *** chmod10000 is now known as _9pfs
[06:40:17] <deviantfero> yeah that's what I'm saying
[06:40:35] <deviantfero> if order doesn't matter, use Promises
[06:40:45] <deviantfero> but in most common use cases, it does matter
[06:41:27] <deviantfero> in any case, it's just a matter of me finding it more readable and less cumbersome to pass things around between async calls
[06:42:27] *** Quits: _9pfs (~3fe02e3b@30.223.188.35.bc.googleusercontent.com) (Quit: Connection closed)
[06:43:19] <deviantfero> like Promise(() => true).then((result) => !result).then((result1, result2) => ???), if I want the first result in my second then, I have to explicitly return it in the form of an array or something in the first then, the way I've written it won't work ofc
[06:44:01] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[06:44:14] <deviantfero> result1 = await call1(); result2 = await call2(); result3 = result1 + result2; ezpz
[06:47:14] <ljharb> deviantfero: right but in that case, if call2 doesn't depend on result1, you're needlessly making your program slower
[06:47:16] <ljharb> so, that's worse
[06:49:26] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[06:49:28] <deviantfero> well, I wrote it incorrectly
[06:49:44] <deviantfero> result1 = await call1(); result2 = await call2(result); result3 = result1 + result2;
[06:49:49] <deviantfero> check the first Promise example
[06:49:59] <deviantfero> result2 is an async operation that depends on result1
[06:50:24] <deviantfero> call2 would be something like (result) => !result
[06:50:49] <deviantfero> again this is just a pretty basic example of a chain of functions that depend on each other and the final one requiring all of the results
[06:51:57] *** Joins: _9pfs (~3fe02e3b@30.223.188.35.bc.googleusercontent.com)
[06:53:05] *** Joins: Rockwood (~Rocky@user/rocky)
[06:56:37] *** Joins: k8yun (~k8yun@user/k8yun)
[06:56:44] <sh4_> is there a way to precompile big js scripts with node ?
[06:56:44] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[06:57:03] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[06:57:47] <ljharb> deviantfero: ok well in that case it's fine
[06:57:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:58:00] <ljharb> deviantfero: but in my experience it's not actually common to have that. it's the rare case.
[06:58:07] <ljharb> sh4_: you can use a bundler, but it's weird to do that
[06:58:18] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:58:18] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:58:18] *** Joins: wroathe (~wroathe@user/wroathe)
[06:58:19] <sh4_> what does that do ?
[06:58:30] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 252 seconds)
[06:58:45] <ljharb> sh4_: combines all your code into a single file
[06:58:50] <ljharb> sh4_: but it's not really a good idea
[06:59:37] <sh4_> well, it's already one huge 4MB file (babel.js)
[06:59:58] <sh4_> i'd basically like the jitted code dumped into a binary
[07:00:29] <ljharb> sh4_: babel isn't something you run in production, you do it in advance
[07:00:38] <ljharb> sh4_: and "jitted code" can't ever exist on disk, that's a runtime thing
[07:00:43] <sh4_> $ time node babel_node.js --out-file foo.js --presets es2015 index.9912
[07:00:43] <sh4_> c4f6.js
[07:00:43] <sh4_> real    0m 2.95s
[07:00:55] <ljharb> sure, that's just the build
[07:00:56] <sh4_> takes 3 secs to transpile a 150 kb js
[07:01:00] <ljharb> so?
[07:01:01] <ljharb> you do that in CI
[07:01:07] <ljharb> you don't even `npm install` in production
[07:01:13] <sh4_> yeah but it want to integrate babel into palemoon browser
[07:01:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[07:01:16] <sh4_> *i
[07:01:19] <ljharb> um, no you don't
[07:01:24] <ljharb> babel is explicitly not meant to run on the fly
[07:01:36] <ljharb> and it's HIGHLY unsafe to transpile code you didn't write; there's tons of caveats
[07:01:46] <ljharb> iow, if you try to integrate that into a browser, lots of code will break in subtle ways
[07:01:57] <ljharb> if the browser doesn't natively support the code, then it shouldn't try
[07:02:15] <sh4_> the idea is when encountering a site that delivers ES2021 code even though it could precompile it, translate all its js to es2015 (and cache the result)
[07:02:20] <ljharb> right, that won't work
[07:02:32] <ljharb> not everything is transpileable, and many things only work in certain code paths
[07:02:44] <ljharb> if they ship ES2021 code, then it simply can't work in a browser that doesn't implement that.
[07:02:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[07:03:03] <ljharb> why are you stuck with a browser that implements a 7 year old obsolete standard?
[07:03:12] <sh4_> because rust
[07:03:25] <ljharb> (not that it's cool for a site to ship native ES2021 code, of course, that's super hostile to not support older envs)
[07:03:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:03:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:03:32] *** Joins: wroathe (~wroathe@user/wroathe)
[07:03:37] <sh4_> palemoon supports up to es2019 actually (in case that exists)
[07:03:39] <ljharb> sh4_: what does rust have to do with it. chrome, firefox, and safari are the browsers.
[07:03:47] <ljharb> yes, ES2019 exists, there's a new spec every year
[07:03:53] <sh4_> firefox requires rust
[07:04:14] <sh4_> and chrome is such a huge clusterfuck that i dont even try to compile it
[07:04:23] <ljharb> lol
[07:04:25] <sh4_> leaves me with palemoon
[07:04:28] <ljharb> ok, so include rust
[07:04:35] <sh4_> impossible
[07:04:50] <sh4_> it doesnt support most of the architectures my distro supports
[07:05:05] <ljharb> … and what does that tell you about those architectures
[07:05:29] <sh4_> that they're not mainstream
[07:05:34] <ljharb> anyways whatever palemoon supports natively, that's where you should stop
[07:05:42] <sh4_> or what google/mozilla considers interesting
[07:05:47] <ljharb> if a site doesn't work on it, then complain to the site. it's simply not something you can reliably fix.
[07:06:02] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:06:12] <Rockwood> i have to do every time manually nvm use 17
[07:06:27] <ljharb> Rockwood: `nvm alias default 17`
[07:06:28] <Rockwood> i wanna make it default
[07:06:49] <Rockwood> ah okay thanks
[07:06:53] <ljharb> or `nvm alias default node`
[07:06:53] <Rockwood> let me try that
[07:06:55] <ljharb> try that
[07:07:14] <sh4_> so what a jit compiler typically does is "allocate some rwx pages, write x86 code there, call the code"
[07:07:29] <sh4_> shouldnt be too hard to write those pages to disk
[07:07:42] <ljharb> lol good luck
[07:07:54] <ljharb> even google barely has it figured it out with v8 snapshots
[07:08:13] <ljharb> but either way, there's nothing that justifies automatically transpiling sites
[07:08:25] <sh4_> you just gotta glue an elf header in front of it
[07:08:33] <matsaman> google are idiots, though
[07:09:12] <gde33> matsaman: anyone wiht ambition should have left by now
[07:09:24] <ljharb> matsaman: lol i mean, they make lots of mistakes but that's hardly a reasonable thing to say
[07:09:41] <gde33> they killed the web
[07:09:57] <matsaman> nothing but downhill since 2009 at the latest
[07:10:28] <matsaman> you ever seen one of the videos of the googlers having their meetings?
[07:10:40] <ljharb> gde33: they're trying to.
[07:10:52] <matsaman> all you have to do is look at the ratio of apple to not-apple computers to see how silly they are
[07:10:59] <ljharb> matsaman: not sure what you mean by that
[07:11:11] <ljharb> matsaman: it's probably close to 1? like most tech companies in the US
[07:11:14] <Rockwood> ty
[07:11:15] <Rockwood> rockwood@cyberia:/var/www/api.rockwood.test$ nvm alias default node
[07:11:16] <Rockwood> default -> node (-> v17.5.0)
[07:11:24] <ljharb> matsaman: or sorry, close to ∞
[07:11:28] <ljharb> Rockwood: np
[07:12:43] <Rockwood> means i have to do before use node version
[07:12:44] <Rockwood>  source ~/.nvm/nvm.sh
[07:13:01] <ljharb> Rockwood: there should be a line in your profile that does that (with `.`, not `source`)
[07:13:08] <ljharb> Rockwood: see the nvm.sh readme
[07:13:17] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:13:56] *** Quits: fon (~fon@user/fon) (Quit: WeeChat 3.3)
[07:15:01] <Rockwood> not understand
[07:15:25] <Rockwood> i have to open my profile in ubuntu and see the there '.'
[07:16:15] <Rockwood> Last login: Tue Feb 15 03:44:53 2022 from 192.168.200.1
[07:16:15] <Rockwood> rockwood@cyberia:~$ node -v
[07:16:15] <Rockwood> v15.14.0
[07:16:25] <ljharb> Rockwood: i mean like `.bash_profile` or whatever
[07:16:27] <ljharb> Rockwood: your shell profile
[07:16:46] *** Joins: zebrag (~chris@user/zebrag)
[07:17:45] <jaawerth> the zsh plugin also comes with a lazy-load behavior for it, which could be confusing things if you're using zsh
[07:18:01] <jaawerth> but I don't think that's technically suported (ljharb would know, ofc)
[07:18:31] <Rockwood> ljharb, https://dpaste.com/4JZQT25AP
[07:18:39] <ljharb> jaawerth: not officially
[07:18:58] <jaawerth> thought not
[07:18:59] <ljharb> Rockwood: and `~/.bashrc`
[07:19:01] <ljharb> ?
[07:19:15] <Rockwood> let me see
[07:19:24] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[07:19:39] <jaawerth> and also .bash_profile too - unless bash auto-sources both, I can't remember. I know with zsh you have to manually source .profile from .zprofile
[07:19:58] <ljharb> depends on if it's a mac or ubuntu or something else
[07:20:04] <ljharb> i can never remember which does which tho
[07:20:06] <jaawerth> of course it does, lol
[07:20:26] <ljharb> profile detection is insanely hard; nvm's install script sucks at it but i have no idea how to make it better
[07:20:36] *** Quits: diamondbond (~diamondbo@175.157.50.34) (Ping timeout: 240 seconds)
[07:20:43] <Rockwood> ljharb,  https://dpaste.com/9RHKS4KXK
[07:20:48] <_9pfs> Is es2022 a thing?
[07:21:07] <jaawerth> ah info says bash reds the first that's readable so if there's both...
[07:21:12] <ljharb> _9pfs: yep, but i haven't cut it yet. it'll be cut soon, and published in june
[07:21:25] <jaawerth> cut in March, no?
[07:21:32] <_9pfs> ???
[07:21:37] <ljharb> it's usually cut before the March meeting, yeah
[07:21:43] <Rockwood> $HOME
[07:21:48] <jaawerth> ljharb: I didn't realize it was you doing it. can't catch a break eh
[07:21:58] <ljharb> lol
[07:22:09] <ljharb> Rockwood: ok so, those lines at the end of bashrc should already cover you
[07:22:15] <ljharb> Rockwood: $HOME is your home dir
[07:22:19] <_9pfs> Really?
[07:22:25] <ljharb> _9pfs: yes
[07:22:25] <Rockwood> so now?
[07:22:35] <ljharb> Rockwood: so you should just have nvm available when opening a new shell
[07:22:44] <_9pfs> So, you created javascript???
[07:23:06] <ljharb> _9pfs: no, that was Brendan Eich. i'm on the spec committee tho, and was an editor for 3 years, and do github administration stuff
[07:23:24] <Rockwood> means i ve to do every time? ljharb
[07:23:26] <ljharb> Rockwood: no
[07:23:29] <ljharb> Rockwood: it means, you never have to do it
[07:23:39] <ljharb> i've been on tc39 8 years now, terrifyingly enough
[07:23:40] <_9pfs> Wait, when will await work outside of asynchronous functions? Is that planned???
[07:24:17] <ljharb> _9pfs: it already works at the top level of native ESM modules
[07:24:24] <gde33> It is my opinion, if I may be so rude, that just abstracting away complexity isn't enough, it makes more sense to abstract towards usual application.
[07:24:24] <ljharb> _9pfs: and it will never, and should never, work anywhere else
[07:24:35] <ljharb> gde33: that's a segue out of literally nowhere
[07:25:12] <_9pfs> Why doesn't it work? It should work! I'm tired of await ruining my day!
[07:25:23] <ljharb> _9pfs: because `await` is just sugar for a promise then, and JS is single-threaded
[07:25:35] <ljharb> _9pfs: async things must always be async, not sure what to tell you
[07:25:52] <gde33> ljharb: well sure :)
[07:25:52] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Remote host closed the connection)
[07:25:58] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:26:00] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[07:26:03] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[07:26:08] <_9pfs> Ugh, if they have to be async, then let async sink!
[07:26:14] <jaawerth> _9pfs: script type="module" or in node's ESM, it will work because modules can load asynchronously, so you can fake blocking from them
[07:26:36] <jaawerth> anywhere else, you'd have to block the main thread, which would be bad
[07:27:11] <_9pfs> Well, modules don't work from local files! Also, I can't use fetch() for local files! When will there be a Chromium flag for that?
[07:27:32] <_9pfs> And what about indexeddb and notifications for local files?
[07:27:45] *** Quits: deviantfero (~deviantfe@179.51.61.253) (Quit: WeeChat 3.4)
[07:28:08] *** Joins: deviantfero (~deviantfe@179.51.61.253)
[07:28:18] <jaawerth> I believe browsers all block that because same origin policy and how it treats local files wrt "origin." I dont' think they will ever support it othert than maybe disablig security, which would also be bad. either way that's a browser env thing more than a js thig, sorry to say
[07:28:26] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[07:29:02] <_9pfs> Then who manages that? And how do I disable security in Chromium using chrome://flags ?
[07:29:19] <ljharb> _9pfs: you're using a lot of punctuation and i'm not really sure what you're complaining about
[07:29:27] <ljharb> _9pfs: file:// should never be used
[07:29:35] <ljharb> make a local webserver and be done with it
[07:29:54] <_9pfs> Well, then where's the built-in local webserver on Chrome OS?
[07:30:17] <ljharb> _9pfs: no idea, but chrome OS isn't a real computer
[07:30:40] <_9pfs> It crashes like one.
[07:30:55] <ljharb> unsurprising
[07:31:38] <_9pfs> But then, that might just be because nobody's written an operating system kernel using JavaScript.
[07:31:45] <ljharb> probably that too
[07:31:57] <gde33> its been predicted tho :P
[07:32:23] <jaawerth> again, this is more a browser platform thing than a language thing. I think you can launch chrom ewith --dssiable-scurity or --disable-web-security but um I wouldn't recommend it
[07:32:34] <jaawerth> it's not that hard to spin up a local server
[07:32:40] * gde33 is going to watch The Birth & Death of JavaScript again :P
[07:32:57] <jaawerth> pick one https://gist.github.com/willurd/5720255
[07:32:59] <_9pfs> This it?
[07:33:08] <_9pfs> Enable the U2F Security Key API
[07:33:09] <_9pfs> Enable the legacy U2F Security Key API (CryptoToken). The U2F Security Key API has been deprecated and will be removed soon. For more information, refer to the deprecation announcement at https://groups.google.com/a/chromium.org/g/blink-dev/c/xHC3AtU_65A – Mac, Windows, Linux, Chrome OS, Android, Fuchsia
[07:33:09] <_9pfs> #u2f-security-key-api
[07:33:43] <jaawerth> that's for interacting with security fobs
[07:34:05] <jaawerth> again pretty sure it's --disable-security or --disable-web-security if you really want to shoot yourself in the foot
[07:35:05] <_9pfs> Would Direct Sockets API allow an HTTP server in the browser? Also, I can't use --disable-web-security, sadly. Any vulnerabilities that can be exploited to set arbitrary command-line flags?
[07:35:08] *** Joins: zebrag (~chris@user/zebrag)
[07:36:08] <ljharb> _9pfs: if your OS doesn't let you do anything but run a browser, then no, you're kind of screwed.
[07:36:24] <ljharb> unless maybe you could install a chrome extension that has a webserver in it?
[07:37:06] <_9pfs> Well, I can use SSH, and I saw an error referencing `cat` once! Also, is there a way to use the Filesystem Access API and https://github.com/humphd/nohost together?
[07:37:30] <jaawerth> how can you use ssh but not launch chrome with a flag?
[07:37:37] <jaawerth> what os is this?
[07:37:52] <_9pfs> Chrome OS. Want my user-agent string?
[07:38:06] <jaawerth> nah
[07:38:47] <_9pfs> Also, I can write sparse files of arbitrary sizes to several locations, but I can't even read from /dev/zero
[07:40:40] <Maxdamantus> _9pfs: if you've got access to dev tools, you could theoretically install a service worker on some random website which ends up accessing files through the filesystem access API.
[07:41:03] <ljharb> i'm not sure that's entirely possible even with a service worker
[07:41:03] <Maxdamantus> (would be a bit complicated, since you'd probably have to do the filesystem API stuff outside of the service worker)
[07:41:09] <_9pfs> I can't use devtools, but I can use `javascript: (function () {  var script = document.createElement("script");  script.src = "//cdn.jsdelivr.net/npm/eruda";  document.body.appendChild(script);  script.onload = function () {    eruda.init();  };})();`
[07:41:35] <Maxdamantus> it should be possible. something in another window can talk to the service worker through requests.
[07:41:45] *** Quits: friend (~friend@2601:c1:c000:e8::1002) (Remote host closed the connection)
[07:41:48] <_9pfs> Or postMessage
[07:42:04] <Maxdamantus> Sure, dunno what APIs exactly are accessible to service workers.
[07:42:15] <_9pfs> Wonder what this can do.
[07:42:16] <_9pfs> Chrome OS System Extensions
[07:42:17] <_9pfs> Enable the Chrome OS System Extension platform. – Chrome OS
[07:42:18] <jaawerth> chromeos i weird though, I don't know whether it lets you disable it there without some kind of hackery. though I doubt it's impossible*
[07:42:20] <_9pfs> #system-extensions
[07:42:27] <jaawerth> launching a local webserver seems way mroe sensible
[07:43:05] <_9pfs> It'd be hard to run a webserver.
[07:43:09] <jaawerth> there are likely chrome plugins/apps for it, even
[07:43:28] <_9pfs> Trying to figure out what this system extensions thing does.
[07:48:51] *** Joins: pingpongball (~pingpongb@27.34.47.113)
[07:49:39] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Ping timeout: 252 seconds)
[07:53:01] <Maxdamantus> Actually, maybe that's not doable with a service worker, since the service worker source needs to be on the same origin as the website.
[07:53:28] *** Joins: zauberfisch (~Zauberfis@cm147-42.liwest.at)
[07:54:22] *** Quits: pingpongball (~pingpongb@27.34.47.113) (Quit: Client closed)
[07:58:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:58:55] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:01:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[08:01:53] <Rockwood> bye cya
[08:02:18] <_9pfs> .
[08:02:56] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[08:03:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[08:03:12] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[08:04:30] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[08:09:55] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:11:11] *** Joins: lilmonkey` (~lilmonkey@user/lilmonkey)
[08:11:14] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.27-225.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[08:11:50] *** Joins: p-i- (~Ohmu@mx-ll-183.89.27-225.dynamic.3bb.co.th)
[08:12:31] *** Quits: lilmonkey (~lilmonkey@user/lilmonkey) (Ping timeout: 256 seconds)
[08:14:50] *** Joins: nwoob (~apple@103.233.123.72)
[08:20:06] *** Joins: han-solo (~hanish@user/han-solo)
[08:24:03] *** _9pfs is now known as _9pfs-isleaving
[08:24:16] *** _9pfs-isleaving is now known as _9pfs
[08:24:22] *** Quits: _9pfs (~3fe02e3b@30.223.188.35.bc.googleusercontent.com) (Quit: _9pfs)
[08:25:29] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[08:27:50] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 272 seconds)
[08:31:24] *** Quits: deviantfero (~deviantfe@179.51.61.253) (Ping timeout: 240 seconds)
[08:33:24] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[08:40:39] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:41:58] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[08:42:13] *** Joins: sam_1 (~sam_1@87.51.251.118)
[08:44:13] *** Joins: k8yun (~k8yun@user/k8yun)
[08:45:25] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[08:45:37] *** Joins: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[08:45:45] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[08:46:45] <theskillwithin> https://youtu.be/oTQvKuvdcmM
[08:46:45] <skillbot> YouTube Title: James Webb Space Telescope beams back mirror selfie & first star imagery
[08:47:24] *** Quits: Max29 (~adsasds@31.223.129.46) (Ping timeout: 252 seconds)
[08:47:28] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 272 seconds)
[08:50:00] *** Quits: PowaBanga (~PowaBanga@user/powabanga) (Ping timeout: 272 seconds)
[08:51:24] *** Quits: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cee7.res6.spectrum.com) (Ping timeout: 240 seconds)
[08:56:38] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[08:56:44] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[08:57:10] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[08:58:13] <blueagain> theskillwithin: that's patently awesome.
[08:58:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:59:20] *** Joins: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-b071.res6.spectrum.com)
[09:02:40] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[09:07:00] *** audio is now known as audiofreeze
[09:19:06] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:23:48] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[09:38:45] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[09:54:30] *** Quits: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-b071.res6.spectrum.com) (Ping timeout: 252 seconds)
[09:55:41] *** Joins: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cee7.res6.spectrum.com)
[09:59:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:00:27] *** Parts: blueagain (~blueagain@user/blueagain) ()
[10:01:18] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[10:01:45] <sheetjs> ugh is there a way to determine why a variable is being pulled into a bundle
[10:02:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[10:04:10] *** Joins: blueagain (~blueagain@user/blueagain)
[10:09:49] <ljharb> sheetjs: what do you mean a variable
[10:09:53] <ljharb> files are pulled into a bundle
[10:10:26] *** Quits: remote (~self@user/hackers) (Ping timeout: 272 seconds)
[10:11:01] *** Joins: remote (~self@user/hackers)
[10:11:06] <sheetjs> an ESM script that has multiple exports and some other variables referenced by some of the exports
[10:11:09] *** Quits: chronon (~chronon@user/chronon) (Quit: leaving)
[10:11:25] *** Joins: chronon (~chronon@user/chronon)
[10:11:35] <sheetjs> for example, lets say you had `let x; function set_x($x) { x = $x; } function get_x() { return x; } export { set_x, get_x };`
[10:11:43] <ljharb> the entire file would be pulled in
[10:12:01] <ljharb> tree-shaking might try and do a half-ass job of cutting that down, but you can't ever guarantee something will be omitted
[10:12:02] <sheetjs> but ostensibly through tree shaking, if x is only referenced in the two places
[10:12:16] <ljharb> tree-shaking doesn't go to those levels
[10:12:25] <ljharb> it might delete the export
[10:12:32] <ljharb> but also, using hoisted function declarations probably messes with it
[10:12:44] <ljharb> try `export function get_x() { return x; }` instead of the `export { … }` thing
[10:12:58] <sheetjs> so importing just the version string (nothing else) is pulling in roughly 345KB of code
[10:13:01] <ljharb> in that case tho, if either export is used, the entire file needs to be there
[10:13:08] <ljharb> sheetjs: what do you mean version string
[10:13:13] <sheetjs> haha from this library
[10:13:16] <ljharb> you have the version somewhere besides package.json?
[10:13:18] <gkatsev> depending on your bundler, take a look at visualiser/inspector plugins
[10:13:26] <sheetjs> yeah its hardcoded and exported
[10:13:35] <ljharb> weird, but ok
[10:13:46] <ljharb> and it's native esm, or CJS
[10:13:51] <ljharb> the thing you're pulling in, i mean
[10:14:00] <sheetjs> so the angular project just does import { version } from 'xlsx'; which, thanks to big G, is now ESM
[10:14:47] <ljharb> that was a bad move
[10:14:55] <ljharb> you should have just stuck it out
[10:15:02] <ljharb> but ok
[10:15:09] <sheetjs> angular complains and complains
[10:15:16] <ljharb> who cares
[10:15:18] <ljharb> it's angular
[10:15:23] <sheetjs> and the end users for the most part don't have the same perspective
[10:15:26] <ljharb> their tolerance for badness is high
[10:15:46] *** Joins: off^ (~off@50.235.176.163)
[10:15:49] <ljharb> anyways assuming they're actually getting to https://unpkg.com/browse/xlsx@0.18.1/xlsx.mjs, i see the problem
[10:15:58] <ljharb> you're building up that massive object
[10:16:09] <ljharb> just `export const version = '0.18.1';`
[10:16:20] *** Joins: PowaBanga (~PowaBanga@user/powabanga)
[10:16:22] <ljharb> tree-shaking is stupid, it can't figure out everything you'll think it should.
[10:16:40] <ljharb> also oof, that mjs file looks awful
[10:16:49] <sheetjs> that object is only referenced in that way, there are 7 references and they all are reading or writing XLSX.version
[10:16:52] <sheetjs> nothing else is assigned
[10:16:57] <ljharb> there is *no way* that makes for a smaller final bundle than having a bunch of unbundled separate files.
[10:17:10] <ljharb> sheetjs: ok but why are they using that container object
[10:17:19] <ljharb> put the version in a standalone variable
[10:17:26] <ljharb> also writing? why would you ever be writing the version at runtime
[10:17:46] <sheetjs> the point of the question is
[10:18:01] <sheetjs> that's an independent variable from the perspective of the rest of the script
[10:18:07] <ljharb> not to trivial static analysis
[10:18:08] <ljharb> tree-shaking is incapable of being as smart as you think it will be.
[10:18:23] <ljharb> yes, if they built a full AST and truly analyzed every aspect of the file, but it's not AI
[10:18:29] <ljharb> you have to write the code simpler
[10:18:37] <ljharb> in particular, don't have an object container for no reason
[10:18:41] <Maxdamantus> Irrespective of tree shaking, I imagine it should generally be possible to make smaller outputs by including things in a single file.
[10:18:51] <ljharb> Maxdamantus: that depends what they're doing
[10:18:52] <Maxdamantus> including multiple things*
[10:19:15] <ljharb> the point of treeshaking is that your index file can export N things, and you can use 1, and their bundler can delete N - 1
[10:19:23] <ljharb> that works best when the index file re-exports everything else
[10:19:33] <ljharb> it works very very poorly when you have a 24 THOUSAND line file
[10:19:45] <Maxdamantus> Generally when you bundle 20 separate module files, each module is going to have a wrapping function, and there are going to be more calls to the require function.
[10:19:55] <ljharb> sheetjs: tbh if angular is happy with this mjs file then they *really* don't know wth they're talking about
[10:20:07] <sheetjs> main.61fde29dfcee04b3.js      | main          | 345.40 kB |                99.55 kB
[10:20:11] <ljharb> Maxdamantus: "more calls" isn't a bundle size concern, it's a runtime perf concern
[10:20:17] <sheetjs> the threshold is 500kB
[10:20:27] <ljharb> Maxdamantus: and the point is that the user isn't going to need all 20 files.
[10:20:30] <ljharb> sheetjs: what threshold
[10:20:36] <ljharb> sheetjs: maybe split things up into separate packages
[10:20:39] <sheetjs> the default threshold for angular to complain
[10:20:50] <ljharb> sheetjs: they won't complain about 50 100k packages, but they will about 1 501k package.
[10:21:01] <gkatsev> pre-bundling libs *can* reduce file size signifacntly. But it really depends on the usecases.
[10:21:16] <Maxdamantus> ljharb: `var a=f(0),b=f(1),c=f(2);` is going to be bigger than just having `var a="foo",b="bar",c="baz";`
[10:21:26] <ljharb> if there exists a way to reduce file sizes prepublish, then there always also exists a *better* way to rearchitect so that that method no longer offers a benefit
[10:21:30] <Maxdamantus> (`f` being the bundled version of the `require` function)
[10:21:42] <ljharb> Maxdamantus: in that example, the former will gzip far more, but i understand your point
[10:21:51] <ljharb> Maxdamantus: but that general principle simply fails in practice with large JS apps.
[10:22:51] <Maxdamantus> I think the single-export-module principle mainly only works for saving in filesize for libraries.
[10:23:00] *** Quits: nwoob (~apple@103.233.123.72) (Ping timeout: 240 seconds)
[10:23:06] <Maxdamantus> If you're writing code that's only part of an application, you can always just delete unused exports.
[10:23:26] <ljharb> detecting unused exports is actually very hard, and nowhere near the entirety of the problem
[10:23:41] <ljharb> the bulk will be in unused code, that's referenced by unused exports, and it's actually exceedingly difficult to find that in JS
[10:23:46] <ljharb> otherwise they wouldn't need ESM to do it
[10:24:08] <ljharb> (or at least, otherwise they wouldn't SAY they need esm; treeshaking works identically well in CJS if the bundlers weren't too lazy to integrate it)
[10:24:19] <Maxdamantus> Well, if you're not relying on it being automated, it should be pretty easy. Tool suggests it might be unused, so developer deletes it. If it actually was used, the program should now visibly break.
[10:25:04] <Maxdamantus> Though I suspect in a lot of cases it *should* be possible to detect that it is unused.
[10:25:11] <ljharb> and, everyone IS relying on it being automated
[10:25:21] <ljharb> if someone was using it as a detection tool that'd be different, but nobody is
[10:25:31] <ljharb> they're just writing sloppy programs and assuming that their bundler will clean it up
[10:26:43] <Maxdamantus> imo ES modules *should* have been specified in such a way that they could in fact be cleaned up without making assumptions.
[10:27:07] <Maxdamantus> that would have involved things like forbidding doing something like `import * as o from "m";; f(o);`
[10:28:47] <Maxdamantus> though I don't really see a problem with tools just working using that logic anyway. I suspect the problems only arise when people do weird things with reexports.
[10:29:02] <ljharb> there's a lot about ESM that should have been specified differently
[10:29:09] *** Quits: cth (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 252 seconds)
[10:29:12] <Maxdamantus> (if someone does do `f(o);`, then the treeshaking logic should either back off or give an error)
[10:29:12] <ljharb> Maxdamantus: and the problem is the nature of JS.
[10:30:14] *** Joins: sam_1 (~sam_1@87.51.251.118)
[10:32:17] *** Joins: Alex8532 (~Alex8532@user/alex8532)
[10:32:34] <theskillwithin> David Attenborough should narrate a doc on the nature of JS
[10:32:50] <Maxdamantus> ljharb: you mean because of the potential for side effects? You can probably still get pretty far there with a quite conservative approach.
[10:33:19] <Maxdamantus> ljharb: if a module just exports declared functions, those clearly don't have side effects.
[10:33:36] <Maxdamantus> maybe if it exports a class, that might have some implicit side effects, at least if it's been compiled to ES5.
[10:34:35] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[10:34:59] <Maxdamantus> b> Object.defineProperty(Object, "foo", { set(){ throw "oops"; }); class Bar { foo(){} }
[10:34:59] <jellobot> An async internal error occured: Unexpected token, expected "," (1:62)
[10:35:05] <ljharb> Maxdamantus: yes, because of that
[10:35:17] <Maxdamantus> b> Object.defineProperty(Object, "foo", { set: () => { throw "oops"; }); class Bar { foo(){} }
[10:35:17] <jellobot> An async internal error occured: Unexpected token, expected "," (1:68)
[10:35:22] <Maxdamantus> ugh-
[10:35:25] <ljharb> Maxdamantus: or if anything is passed into a global function (since there's no easy way to know which ones mutate) or referenced in a callback, or passed into another module
[10:35:48] <Maxdamantus> b> Object.defineProperty(Object, "foo", { set: () => { throw "oops"; } }); class Bar { foo(){} }
[10:35:48] <jellobot> (okay) [Function: Object]
[10:35:59] <ljharb> anyways if you think you can improve webpack's treeshaking, go for it
[10:36:00] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:5dc1:ef38:a9e4:9c9c)
[10:36:13] <ljharb> but the half-assed shitty job everyone does without exception suggests it's not improveable
[10:36:15] <Maxdamantus> That doesn't throw, but I suspect it would if the class were compiled to ES5.
[10:38:31] <Maxdamantus> oh actually, I messed up that example.
[10:38:35] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:38:39] <Maxdamantus> b> Object.defineProperty(Object.prototype, "foo", { set: () => { throw "oops"; } }); class Bar { foo(){} }
[10:38:40] <jellobot> (okay) [Object: null prototype] {}
[10:41:52] <Maxdamantus> ljharb: out of interest, would you consider it problematic that that code might throw an error if it's compiled to ES5?
[10:42:15] <Maxdamantus> since that presumably goes against the actual class semantics.
[10:43:21] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[10:43:29] *** Joins: xsznix953 (~xsznix@104-14-31-126.lightspeed.austtx.sbcglobal.net)
[10:43:42] *** Quits: xsznix95 (~xsznix@104-14-31-126.lightspeed.austtx.sbcglobal.net) (Ping timeout: 250 seconds)
[10:43:42] *** xsznix953 is now known as xsznix95
[10:44:11] <ljharb> Maxdamantus: in a general case, yes, if it works when native
[10:44:23] <ljharb> Maxdamantus: but there's a *ton* of caveats like that. which is why it's unsafe to transpile code you didn't author.
[10:44:50] <ljharb> Maxdamantus: but also, that particular example won't throw in ES5, because the class will be transpiled to use Define semantics by babel.
[10:45:05] <ljharb> that's the sort of easy bug they would have fixed long ago
[10:45:52] *** Quits: howdoi (uid224@id-224.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[10:49:20] *** Joins: ekathva_ (~ekathva@n3k06ap29nlro92ao-1.v6.elisa-mobile.fi)
[10:49:28] *** Quits: ekathva_ (~ekathva@n3k06ap29nlro92ao-1.v6.elisa-mobile.fi) (Remote host closed the connection)
[10:55:54] *** Joins: nwoob (~apple@103.233.123.72)
[10:56:01] <blueagain> Would you guys consider using str.replace(substr, () => newSubstr) more secure than str.replace(substr, newSubstr) if you don't know newSubstr in advance?
[10:56:42] <blueagain> I kind of feel the latter variant exposes you regexp attacks. This pattern unfortunately is not recognisable by eslint and the likes, won't be detected in static analysis.
[10:56:47] <blueagain> to*
[10:56:47] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[10:57:17] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:58:13] <Maxdamantus> blueagain: why do you think that?
[10:58:45] <Maxdamantus> The second argument is not meant to be a regular expression.
[10:58:58] <sheetjs> regexp attack usually involves the first argument, like a regexp vulnerable to catastrophic backtracking with specially crafted input
[10:59:00] <ljharb> blueagain: certainly if `newSubstr` has replacement patterns in it, the function form is ssafer
[10:59:15] <blueagain> Maxdamantus: But it supports replacement patterns.
[10:59:19] <ljharb> blueagain: but it's not a regex attack, it'd just be that they can reference some of the regex globals
[10:59:25] <Maxdamantus> Oh okay, didn't realise that.
[10:59:26] <ljharb> blueagain: so the substitution might not be what you expect
[10:59:28] <Maxdamantus> TIL
[10:59:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:00:38] *** Joins: jazzy (~jaziz@user/jaziz)
[11:00:54] <blueagain> ljharb: I realise this is pretty contrived, but can't they then build an expression using $` and $' for prematching? If they know the string that's operated on.
[11:01:00] * Maxdamantus doesn't think he's ever actually used `String.prototype.replace`
[11:01:07] <blueagain> pre/postmatching*
[11:02:09] <ljharb> blueagain: i don't know what you mean
[11:02:24] <ljharb> blueagain: literally all they can do is put in the various $ patterns, and it will cause perhaps-unexpected output to occur
[11:02:39] <ljharb> blueagain: there does not exist an attack vector otherwise from `newSubstr`
[11:02:59] *** Quits: bodiccea (~bodiccea@user/bodiccea) (Remote host closed the connection)
[11:03:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[11:03:19] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[11:03:23] <blueagain> ljharb: fair enough.
[11:03:25] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:04:44] *** Quits: audiofreeze (~audio@user/audio) (Read error: Connection reset by peer)
[11:05:02] *** Joins: audiofreeze (~audio@2603-8081-1800-13f9-f41f-668a-e39f-5599.res6.spectrum.com)
[11:05:14] <Maxdamantus> n> const s = "this is a normal string. perfectly normal. nothing wrong with it."; s.replace(/./, "$`$'$`$'$`$'$`$'$`$'$`$'$`$'$`$'");
[11:05:15] <jellobot> (okay) 'his is a normal string. perfectly normal. nothing wrong with it.his is a normal string. perfectly normal. nothing wrong with it.his is a normal string. perfectly normal. nothing wrong with it.his is a normal string. perfectly normal. nothing wrong with it.his is a normal string. perfectly normal. nothing wrong with it.his is a normal string. perfectly normal. nothing wrong with it.his is a normal string. perfectly normal. not …
[11:05:54] <ljharb> n> const s = "this is a normal string. perfectly normal. nothing wrong with it."; s.replace(/./, "$`$'$`$'$`$'$`$'$`$'$`$'$`$'$`$'").length
[11:05:55] <jellobot> (okay) 576
[11:05:55] *** Quits: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[11:06:21] <ljharb> since you can't have unconstrained repetition, i'd think the most you could do is cause an OOM by passing a string that was already at the max string length on the platform
[11:06:31] <ljharb> but you could probably do that without any regex patterns in there
[11:06:53] *** Joins: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net)
[11:07:39] *** Quits: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cee7.res6.spectrum.com) (Quit: WeeChat 3.3)
[11:10:08] <Maxdamantus> n> let s = "this is a normal string. perfectly normal. nothing wrong with it."; for (let x = 0; x < 5; x++) s = s.replace(/./, "$'$'$'$'$'$'$'$'$'$'$'$'$'$'$'$'"); s.length;
[11:10:09] <jellobot> (okay) 90782108
[11:10:20] <Maxdamantus> 90 MB
[11:11:43] <dave0> i'm surprised how quick to was to make a 90 meg string
[11:11:48] <ljharb> sure but you had to do the replace in a loop
[11:12:02] <ljharb> obviously there's some potential trouble there, and using the thunk is better
[11:12:17] <ljharb> n> let s = "this is a normal string. perfectly normal. nothing wrong with it."; for (let x = 0; x < 5; x++) s = s.replace(/./, () => "$'$'$'$'$'$'$'$'$'$'$'$'$'$'$'$'"); s.length;
[11:12:18] <jellobot> (okay) 220
[11:12:28] <ljharb> but it's not a ReDOS attack or anything on that scale
[11:12:29] <Maxdamantus> It probably doesn't actually allocate 90 MB, it probably just creates a rope referring to the same string a bunch of times.
[11:13:08] <ljharb> probably
[11:13:10] <Maxdamantus> n> let s = "this is a normal string. perfectly normal. nothing wrong with it."; for (let x = 0; x < 5; x++) s = s.replace(/./, "$'$'$'$'$'$'$'$'$'$'$'$'$'$'$'$'"); s.split("").join("").length;
[11:13:17] <jellobot> (timeout)
[11:13:20] <Maxdamantus> That one's slower.
[11:13:33] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:dd60:a941:ddd9:4bbf)
[11:13:40] <Maxdamantus> (because it's not smart enough to create a roped array)
[11:16:27] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:5dc1:ef38:a9e4:9c9c) (Ping timeout: 252 seconds)
[11:19:18] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[11:20:51] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[11:22:50] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:27:48] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[11:28:19] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[11:28:57] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[11:29:17] *** Joins: pingpongball (~pingpongb@27.34.47.113)
[11:29:46] *** Joins: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de)
[11:29:59] *** Quits: pingpongball (~pingpongb@27.34.47.113) (Client Quit)
[11:30:11] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:30:20] *** Joins: blacked (~blacked@user/blacked)
[11:30:28] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:31:32] *** blacked is now known as pingpongball
[11:32:27] *** Joins: pycode (~pycode3@2001:b07:5d28:551:644b:594a:36b3:4be)
[11:32:36] *** Joins: peteyboy1 (~peteyboy1@95.169.226.66)
[11:33:24] *** Quits: remote (~self@user/hackers) (Ping timeout: 272 seconds)
[11:34:20] *** Joins: remote (~self@user/hackers)
[11:35:26] *** Quits: src (~src@user/src) (Quit: Leaving)
[11:36:48] *** Quits: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[11:37:38] *** Joins: nomic (~nomic@185.217.117.193)
[11:37:56] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:38:52] *** Joins: Kartagis (~iegg@user/kartagis)
[11:42:32] *** Quits: pingpongball (~blacked@user/blacked) (Quit: Client closed)
[11:42:54] <Kartagis> hi. can I target an element within a PDF object?
[11:43:32] *** Quits: remote (~self@user/hackers) (Ping timeout: 272 seconds)
[11:44:44] *** Joins: remote (~self@user/hackers)
[11:45:43] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[11:47:16] *** Joins: cotko (~cotko@155.pool85-49-78.dynamic.orange.es)
[11:48:23] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[11:48:29] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[11:49:08] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[11:49:36] *** Joins: flughafen (~flughafen@p5796929b.dip0.t-ipconnect.de)
[11:50:45] *** LordKalma_ is now known as LordKalma
[11:52:05] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[11:55:24] *** Quits: audiofreeze (~audio@2603-8081-1800-13f9-f41f-668a-e39f-5599.res6.spectrum.com) (Ping timeout: 240 seconds)
[11:55:49] *** Joins: teut (~teut@122.161.83.81)
[11:59:09] *** Joins: Guest88 (~textual@85.249.167.96)
[12:00:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:00:38] *** Quits: Arisc (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br) (Ping timeout: 272 seconds)
[12:04:26] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[12:04:51] *** Joins: audiofreeze (~audio@2603-8081-1800-13f9-d8b0-b83c-787c-2d09.res6.spectrum.com)
[12:05:48] *** Quits: zauberfisch (~Zauberfis@cm147-42.liwest.at) (Ping timeout: 240 seconds)
[12:06:18] *** Joins: zauberfisch (~Zauberfis@cm147-42.liwest.at)
[12:07:05] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[12:08:52] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:09:30] *** Quits: Alex8532 (~Alex8532@user/alex8532) (Ping timeout: 272 seconds)
[12:09:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:09:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:09:57] *** Joins: wroathe (~wroathe@user/wroathe)
[12:10:12] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[12:10:22] *** Joins: va5c0 (~vasco.nun@50.0.208.46.dyn.plus.net)
[12:11:34] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:11:45] *** Quits: zauberfisch (~Zauberfis@cm147-42.liwest.at) (Read error: Connection reset by peer)
[12:12:33] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:14:10] *** Quits: Guest88 (~textual@85.249.167.96) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:14:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[12:14:37] *** Joins: Guest88 (~textual@85.249.167.96)
[12:15:48] *** Quits: audiofreeze (~audio@2603-8081-1800-13f9-d8b0-b83c-787c-2d09.res6.spectrum.com) (Ping timeout: 240 seconds)
[12:18:03] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[12:19:56] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:21:32] *** Quits: Guest88 (~textual@85.249.167.96) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:24:29] *** Joins: zauberfisch (~Zauberfis@cm147-42.liwest.at)
[12:27:51] *** Quits: ckdCreations (~ckdCreati@147.55.133.131) (Read error: Connection reset by peer)
[12:28:17] *** Joins: ckdCreations (~ckdCreati@147.55.130.35)
[12:29:36] *** Quits: cotko (~cotko@155.pool85-49-78.dynamic.orange.es) (Ping timeout: 252 seconds)
[12:30:07] *** Quits: MichaelLaRosa[m] (~michaelbi@2001:470:69fc:105::1:6ac9) (Quit: You have been kicked for being idle)
[12:30:07] *** Quits: h274f[m] (~h274fmatr@2001:470:69fc:105::1:6a8a) (Quit: You have been kicked for being idle)
[12:30:12] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[12:32:06] *** Joins: ccapndave (~ccapndave@2a02:1210:6c4e:d600:1dfa:a59c:a723:4090)
[12:32:16] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:36:51] *** Joins: voidsync (~void@user/voidsync)
[12:37:22] *** Joins: masber (~masber@213.55.224.10)
[12:39:24] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[12:41:08] *** Joins: kill (~killown@user/killown)
[12:41:40] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:41:48] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[12:46:49] *** Quits: masber (~masber@213.55.224.10) (Quit: Client closed)
[12:48:30] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[12:48:30] *** Quits: SoF (~skius@user/skius) (Quit: Ping timeout (120 seconds))
[12:48:49] *** Joins: m5zs7k_ (aquares@web10.mydevil.net)
[12:48:58] *** Joins: SoF (~skius@user/skius)
[12:49:17] *** Quits: robertparkerx (~robertpar@user/robertparkerx) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[12:49:27] *** Joins: robertparkerx (~robertpar@2001:19f0:5:6262:5400:3ff:fe40:6b40)
[12:49:27] *** Quits: robertparkerx (~robertpar@2001:19f0:5:6262:5400:3ff:fe40:6b40) (Changing host)
[12:49:27] *** Joins: robertparkerx (~robertpar@user/robertparkerx)
[12:51:12] *** Joins: masber (~masber@213.55.224.10)
[12:52:42] *** Quits: ccapndave (~ccapndave@2a02:1210:6c4e:d600:1dfa:a59c:a723:4090) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:54:13] *** Joins: ccapndave (~ccapndave@2a02:1210:6c4e:d600:1dfa:a59c:a723:4090)
[12:55:44] *** Joins: Guest88_ (~textual@85.249.167.96)
[12:57:46] *** m5zs7k_ is now known as m5zs7k
[12:58:20] <kuba-orlik> Kartagis: what do you mean by "a PDF object"?
[12:58:27] *** Quits: ccapndave (~ccapndave@2a02:1210:6c4e:d600:1dfa:a59c:a723:4090) (Ping timeout: 250 seconds)
[12:58:52] <kuba-orlik> are you talking about a PDF displayed within a browser context?
[12:59:28] <Kartagis> kuba-orlik: I show a PDF on my website and it's recognised as an object
[12:59:35] *** Quits: Guest88_ (~textual@85.249.167.96) (Client Quit)
[13:00:24] <kuba-orlik> Kartagis: In what way are you showing the PDF on the website? Is it within HTML or as a separate file?
[13:00:46] <kuba-orlik> Kartagis: And also, what do you mean by "target an element"? What is the end goal of this?
[13:00:52] <Kartagis> kuba-orlik: it's uploaded daily as a file
[13:00:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:01:15] <Kartagis> kuba-orlik: my end-goal is to hide the download button
[13:01:37] <kuba-orlik> can you send a link to where that button is visible?
[13:02:13] <Kartagis> http://egazete.webcinizim.com/e-gazete/aydinlik-03022022
[13:02:52] <kuba-orlik> Kartagis: hmm, it requires logging in
[13:03:31] <kuba-orlik> Kartagis: But I see this is a Drupal website, so possibly hiding the "Download" button would be best done on the backend side
[13:04:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:07:41] *** Quits: flughafen (~flughafen@p5796929b.dip0.t-ipconnect.de) (Quit: WeeChat 2.8)
[13:09:45] *** Quits: va5c0 (~vasco.nun@50.0.208.46.dyn.plus.net) (Ping timeout: 252 seconds)
[13:09:45] *** Joins: Guest88 (~textual@85.249.167.96)
[13:13:15] *** Quits: Guest88 (~textual@85.249.167.96) (Client Quit)
[13:14:06] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 272 seconds)
[13:14:16] *** Joins: aLeSD (~aLeSD@80.169.85.234)
[13:16:03] *** Quits: masber (~masber@213.55.224.10) (Quit: Client closed)
[13:18:23] *** Joins: va5c0 (~vasco.nun@162.154-253-62.static.virginmediabusiness.co.uk)
[13:19:00] *** Quits: nomic (~nomic@185.217.117.193) (Quit: Leaving)
[13:20:26] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[13:21:03] *** Quits: remote (~self@user/hackers) (Remote host closed the connection)
[13:23:23] *** Joins: bkkk (~bkkk@dslb-088-070-030-097.088.070.pools.vodafone-ip.de)
[13:24:53] *** Quits: pycode (~pycode3@2001:b07:5d28:551:644b:594a:36b3:4be) (Ping timeout: 250 seconds)
[13:25:22] *** Joins: remote (~self@user/hackers)
[13:27:50] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:29:38] *** Joins: N4buc0 (~N4buc0@2804:7f4:348b:2121:b67f:dc97:6336:3daf)
[13:30:34] *** Joins: D4mned (~D1mned@212.101.234.238)
[13:32:01] *** Quits: aLeSD (~aLeSD@80.169.85.234) (Quit: Leaving)
[13:42:03] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[13:43:48] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[13:44:36] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[13:46:06] *** Joins: i0e (~is0ke3@user/is0ke3)
[13:49:12] *** Joins: cotko (~cotko@155.pool85-49-78.dynamic.orange.es)
[14:00:15] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:01:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:01:26] *** Joins: Guest88 (~textual@85.249.167.96)
[14:02:56] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[14:04:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[14:05:16] *** Quits: entropygain (levitate@user/entropygain) (Quit: Bye)
[14:07:30] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 252 seconds)
[14:10:15] *** Quits: kill (~killown@user/killown) (Ping timeout: 252 seconds)
[14:14:53] *** Quits: cheater (~Username@user/cheater) (Read error: Connection reset by peer)
[14:16:22] *** Joins: kill (~killown@user/killown)
[14:17:51] *** Joins: yte3 (~0@151.31.102.40)
[14:18:23] *** Joins: cheater (~Username@user/cheater)
[14:20:42] *** Quits: kill (~killown@user/killown) (Ping timeout: 252 seconds)
[14:22:55] <nemesit> is there a nice way to find an element by data attribute and get that data attributes value?
[14:23:05] <nemesit> without repeating the data attribute name?
[14:23:26] <theskillwithin> dataset
[14:24:19] <theskillwithin> https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset
[14:25:15] *** Quits: Junxter (~Junxter@222.95.164.193) (Read error: Connection reset by peer)
[14:25:24] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[14:25:38] *** Joins: Junxter (~Junxter@222.95.164.193)
[14:27:42] <nemesit> that seems to only work for the element itself
[14:27:52] <nemesit> I'd like something similar to element.find('[data-test]').data('test')
[14:28:23] <nemesit> where its not necessarily a data attribute on the element but on some nested child
[14:28:45] <theskillwithin> querySelector / querySelectorAll
[14:29:10] <theskillwithin> https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll
[14:29:24] <Cork> querySelector to match the .find()
[14:29:30] <Cork> as All returns an array like object
[14:29:55] <Cork> so document.querySelector('[data-test]').dataset.test
[14:30:37] *** Quits: dvanloon (~dvanloon@user/dvanloon) (Quit: 🖖)
[14:31:30] <nemesit> then I'm still writing "test" twice
[14:31:42] <nemesit> obviously my actual attribute is like a sentence long xD
[14:31:59] <Cork> ya, you will always have to find the element first and pick the attributes from it
[14:32:07] <Cork> as attributes is assigned to elements
[14:32:13] *** Joins: humanBird (~humanBird@098-148-010-232.res.spectrum.com)
[14:32:14] <Cork> not a seperate entity
[14:32:19] <nemesit> yeah
[14:32:33] *** Joins: dvanloon (~dvanloon@user/dvanloon)
[14:33:04] <Cork> you COULD do that though, but you would have to write the mapping your self
[14:34:00] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:35:44] *** Quits: Guest88 (~textual@85.249.167.96) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:36:56] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[14:36:58] *** Joins: xse_ (~xse@user/xse)
[14:37:31] *** Quits: xse (~xse@user/xse) (Ping timeout: 256 seconds)
[14:37:36] *** xse_ is now known as xse
[14:38:58] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[14:40:28] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:40:57] <nemesit> hehe yeah but I thought maybe there's a builtin or jquery way
[14:41:22] <nemesit> can't always remember to add all my custom stuff to new projects and then I'll miss them xD
[14:46:36] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[14:49:24] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[14:49:50] *** Joins: kill (~killown@user/killown)
[14:51:29] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:53:33] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Remote host closed the connection)
[15:01:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:02:47] *** Joins: nomic (~nomic@185.217.117.193)
[15:04:36] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[15:05:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[15:06:12] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 240 seconds)
[15:07:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:07:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:07:25] *** Joins: wroathe (~wroathe@user/wroathe)
[15:07:32] *** Joins: enoq (~enoq@194-208-178-35.lampert.tv)
[15:12:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[15:15:04] *** Quits: nwoob (~apple@103.233.123.72) (Ping timeout: 272 seconds)
[15:18:41] *** Quits: hassoon_ (hassoon@shell.oddprotocol.org) (Changing host)
[15:18:41] *** Joins: hassoon_ (hassoon@user/hassoon)
[15:21:41] *** Joins: voltage_ (voltage@user/voltage)
[15:22:45] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[15:25:02] *** Joins: diamondbond (~diamondbo@175.157.50.34)
[15:25:52] *** Joins: codebam (~codebam@user/codebam)
[15:26:21] <codebam> anyone want to do code review on my first web extension and tell me if I could write it better? https://github.com/codebam/spottube/blob/master/background.js
[15:28:08] <codebam> am I using catch right? I never know how to properly do that
[15:31:31] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:32:36] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[15:35:23] *** Quits: pax_os__ (sid535114@id-535114.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:38:03] *** Joins: pmercado (~pmercado@186.107.49.217)
[15:40:11] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[15:40:45] *** Joins: chao (~stenno@user/stenno)
[15:40:51] *** Joins: teut (~teut@122.161.83.81)
[15:41:01] <since_> why do you use chrome. and not browser. while having the polyfill?
[15:41:17] <since_> but use promises of the polyfill
[15:41:27] <blueagain> codebam: Looks fine to me, don't know though if packing the key into the repo is the greatest of ideas.
[15:41:57] <since_> in this way you are not conforming the standard and it wont work in safari afaik
[15:42:13] <since_> use "browser."
[15:42:35] <codebam> blueagain: how would I do it for an extension so that they don't have to input an API key when using my extension
[15:42:35] <since_> also your console.log might log into an other console as you are used to
[15:42:39] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[15:42:52] <codebam> isn't the API key already going to be public since it's in the package that's released on addons.mozilla.org?
[15:43:12] <codebam> since_: I am using browser.*
[15:43:16] <codebam> I polyfilled it
[15:43:38] <since_> chrome.browserAction.setBadgeText({ text: "(ツ)" });
[15:43:50] <codebam> oh I should switch that to browser. okay
[15:43:51] *** Joins: Max29 (~adsasds@31.223.129.46)
[15:43:54] <codebam> thank you
[15:43:56] <blueagain> codebam: no idea, I just usually don't hardcode API keys like that, public or not. Doesn't an extension have the possibility of the user saving his own API if needed?
[15:44:20] <teut> how to install https://www.npmjs.com/package/@windmill/react-ui    typescript version?
[15:44:35] <codebam> I didn't add a feature for that. is there a way to make that configurable without adding a whole interface?
[15:44:59] <codebam> there are extension configuration options right, can I just set one of those and set the default to my API key?
[15:46:45] *** Joins: Guest88 (~textual@85.249.167.96)
[15:47:02] *** Joins: pycode (~pycode3@2001:b07:5d28:551:d2f4:e1ff:7758:267)
[15:49:34] *** Quits: Guest88 (~textual@85.249.167.96) (Client Quit)
[15:50:02] <codebam> updated to use the browser polyfill, thank you I didn't notice that
[15:52:12] *** Quits: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:54:45] *** Quits: Max29 (~adsasds@31.223.129.46) (Ping timeout: 252 seconds)
[15:56:36] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[15:57:33] *** Joins: trevors (~trevors@user/trevors)
[16:00:54] *** Quits: voidsync (~void@user/voidsync) ()
[16:01:53] *** Joins: blacked (~blacked@user/blacked)
[16:02:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:06:22] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[16:06:35] *** Joins: vysn (~vysn@user/vysn)
[16:09:01] *** Joins: Max29 (~adsasds@31.223.129.46)
[16:09:36] *** Joins: d[-_-]b (~stenno@user/stenno)
[16:11:15] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 252 seconds)
[16:11:48] *** Quits: va5c0 (~vasco.nun@162.154-253-62.static.virginmediabusiness.co.uk) (Ping timeout: 240 seconds)
[16:13:33] *** Quits: Max29 (~adsasds@31.223.129.46) (Ping timeout: 256 seconds)
[16:14:30] *** Joins: Alex8532 (~Alex8532@user/alex8532)
[16:14:45] *** Quits: pycode (~pycode3@2001:b07:5d28:551:d2f4:e1ff:7758:267) (Ping timeout: 250 seconds)
[16:15:02] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[16:15:14] *** Quits: diamondbond (~diamondbo@175.157.50.34) (Ping timeout: 272 seconds)
[16:16:35] *** Joins: Guest88 (~textual@85.249.167.96)
[16:17:59] *** Joins: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de)
[16:19:47] *** Joins: diamondbond (~diamondbo@175.157.50.34)
[16:19:49] *** Joins: polyrob_ (~rob@user/polyrob)
[16:22:15] *** Quits: d[-_-]b (~stenno@user/stenno) (Ping timeout: 252 seconds)
[16:22:32] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 240 seconds)
[16:22:32] *** polyrob_ is now known as polyrob
[16:23:18] <sickdyd> you try to sign in with google and all of a sudden you're creating a new account
[16:23:21] <sickdyd> this should be illegal
[16:23:31] <sickdyd> Twitter does this
[16:24:03] <silly> yea and wants you to provide username, email and set a password
[16:24:18] <silly> why using google in the first place?
[16:25:15] <sickdyd> there must be some statistics that say that people are more likely to bla bla bla
[16:25:24] <silly> this is covid only taking the wrong people... fight covid
[16:27:36] *** Quits: Guest88 (~textual@85.249.167.96) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:27:49] <silly> earlier today i've tried watching figure skating, you'd imagine this being possible in 2022... in a distant future we will look back at us and say these were the darkest middle ages and we'll be ashamed of ourselves
[16:28:26] <silly> #humanity
[16:33:10] *** Joins: d[-_-]b (~stenno@user/stenno)
[16:34:52] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[16:36:59] *** Quits: d[-_-]b (~stenno@user/stenno) (Client Quit)
[16:37:15] *** Joins: stenno (~stenno@user/stenno)
[16:37:39] *** Joins: Arisc (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br)
[16:38:49] <Booster2ooo> Hi
[16:40:42] <ross> if IntersectionObserver is the best way to detect when an element moves onscreen, what's the best way to detect if it's already onscreen?
[16:42:06] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:42:28] *** Quits: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[16:42:46] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[16:42:51] *** Quits: clamiax (~clamiax@net-93-144-125-193.cust.dsl.teletu.it) (Read error: Connection reset by peer)
[16:49:46] *** blacked is now known as pingpongball
[16:50:42] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[16:52:32] *** Joins: gcostigan (~glen.cost@h69-21-84-93.cncrtn.dedicated.static.tds.net)
[16:54:46] *** Quits: gcostigan (~glen.cost@h69-21-84-93.cncrtn.dedicated.static.tds.net) (Client Quit)
[16:59:31] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[16:59:53] <teut> ross , maybe you can check it's opacity value
[16:59:57] <teut> or display
[17:00:46] <teut> if  element.style.display === null
[17:00:52] <teut> "none"*
[17:01:28] *** Quits: diamondbond (~diamondbo@175.157.50.34) (Ping timeout: 272 seconds)
[17:01:36] <ross> I don't believe elements have their display set to none simply by being offscreen
[17:02:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:03:07] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[17:03:18] <teut> https://stackoverflow.com/a/65867464/4213362
[17:04:31] <Alexendoo> ross: If you've already got an intersection observer, it does report an entry on the initial observe call. But otherwise yeah, getBoundlingClientRect or similar
[17:05:10] <ross> Alexendoo: oh lmao, looks like my problem is solved without me having to do anything in that case - thanks!
[17:05:11] <codebam> anyone know how I can fix this warning that I get when I polyfill browser in my chrome extension? DevTools failed to load source map: Could not load content for chrome-extension://gohllndpgepaoakjcfamilcblgnnemah/browser-polyfill.js.map: HTTP error: status code 404, net::ERR_UNKNOWN_URL_SCHEME
[17:05:14] <ross> and thanks teut!
[17:05:26] <teut> that's helpful?
[17:06:15] <codebam> it's caused by polyfilling exactly as according to the docs. it's just a warning but I'd like to fix it if I can
[17:07:09] <Alexendoo> codebam: separate source map files don't work for extensions, so you have to either use inline ones or disable them
[17:07:10] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[17:07:23] <betterOn1> hi
[17:07:48] *** Joins: chenqisu12 (~chenqisu1@183.217.200.249)
[17:08:04] <Alexendoo> Oh nice it got fixed recently though https://bugs.chromium.org/p/chromium/issues/detail?id=212374
[17:08:11] <betterOn1> what will happen if i call an async function in not-async function without await?
[17:08:26] <Alexendoo> betterOn1: You get a Promise
[17:08:52] <betterOn1> Alexendoo: in fact, there is an existing project and analyzing it
[17:09:06] <betterOn1> all functions are non-async except one
[17:09:15] <betterOn1> async method makes an http call
[17:09:38] <betterOn1> isnt it a problem if your function depends on http response?
[17:10:10] *** Joins: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de)
[17:10:28] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Read error: Connection reset by peer)
[17:10:41] <Alexendoo> You can't synchronously wait for the result of something async yeah. But you can use .then or make the caller async in order to use await
[17:10:41] <ross> isn't that what the async function is for?
[17:11:08] <betterOn1> Alexendoo: so caller function must be async right?
[17:11:15] <betterOn1> or use await at least
[17:11:16] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Remote host closed the connection)
[17:11:17] *** Quits: msfninja (~kali@user/msfninja) (Ping timeout: 240 seconds)
[17:11:29] <ross> or any other way of resolving the promise
[17:11:38] <betterOn1> okay
[17:11:39] *** Quits: Tabmow (~tabmow@user/tabmow) (Ping timeout: 256 seconds)
[17:11:45] <betterOn1> thank you
[17:12:03] <ross> .then() is probably easiest to implement if the function is not already async
[17:13:46] *** Joins: Tabmow (~tabmow@user/tabmow)
[17:14:55] <jaawerth> betterOn1: caller function need not be async, to be clear. it can work by passing in handlers to the promise's .then/.catch methods and return a new resulting promise. even if you prefer using await it's good to understand promises because await is just sugar that hides the promise stuff under imperative syntax. understanding will save you from surprise bugs
[17:15:24] *** Quits: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[17:17:24] <codebam> Alexendoo: should I delete the map or how am I supposed to deal with that warning? I don't get any warnings in firefox so I think it's working there
[17:17:40] <codebam> I might just ignore the warning
[17:19:10] <Alexendoo> codebam: Yeah you can just ignore it, it will be fixed in a future chrome version
[17:19:20] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[17:22:06] *** Joins: pycode (~pycode3@2001:b07:5d28:551:5267:7e42:40a7:19d1)
[17:22:30] *** Joins: DrowningElysium (uid190788@user/drowningelysium)
[17:23:46] *** Joins: pulse (~pulse@user/pulse)
[17:24:54] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[17:28:22] *** Quits: pingpongball (~blacked@user/blacked) (Quit: Client closed)
[17:31:16] *** Joins: voidsync (~void@user/voidsync)
[17:33:12] *** Quits: peteyboy1 (~peteyboy1@95.169.226.66) (Read error: Connection reset by peer)
[17:35:27] *** Joins: Guest999 (~Guest999_@2a02:810d:8fc0:48b8:39df:8961:f936:850d)
[17:38:26] *** Joins: hsv (~unknown@user/hsv)
[17:39:48] *** Joins: Guest88 (~textual@85.249.167.96)
[17:40:26] *** Parts: Guest999 (~Guest999_@2a02:810d:8fc0:48b8:39df:8961:f936:850d) ()
[17:41:50] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[17:42:29] *** Joins: gehn (~gehn@user/gehn)
[17:44:35] *** Quits: Guest88 (~textual@85.249.167.96) (Client Quit)
[17:44:41] *** Joins: iffraff (~quassel@2605:a601:aae0:4a00:87ef:e0bd:9524:1377)
[17:45:00] *** Quits: humanBird (~humanBird@098-148-010-232.res.spectrum.com) (Quit: Client closed)
[17:45:43] <iffraff> Hi, I'm having a problem with a plugin for graphql-code-generator, but I'm getting no response from those channels.
[17:46:06] <iffraff> It's basically a javascript issue though, so I thought I'd ask on here.
[17:48:30] <iffraff> here is a gist to the error message I'm getting.
[17:48:30] <iffraff> https://gist.github.com/reharik/aad2ec7d92f3d42dec58b89303de5cc5
[17:48:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:48:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:48:58] *** Joins: wroathe (~wroathe@user/wroathe)
[17:49:46] <iffraff> tldr is it seems to be throwing because my plugin code is es module but some of the dependencies in node_modules are not, and if I do it the other way it throws because my code is not and some of the dependencies are.
[17:49:48] *** Quits: obimod (~obimod@gateway/vpn/pia/obimod) (Ping timeout: 240 seconds)
[17:49:57] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:690a:d027:b8ea:dcab)
[17:50:14] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:51:04] *** Joins: obimod (~obimod@gateway/vpn/pia/obimod)
[17:51:23] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:5c57:7f45:b808:8adb) (Ping timeout: 250 seconds)
[17:54:51] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:690a:d027:b8ea:dcab) (Ping timeout: 250 seconds)
[17:55:56] *** Quits: p-i- (~Ohmu@mx-ll-183.89.27-225.dynamic.3bb.co.th) (Ping timeout: 272 seconds)
[17:59:03] *** Joins: deviantfero (~deviantfe@179.51.61.253)
[17:59:18] *** Joins: Guest88 (~textual@85.249.167.96)
[18:00:38] *** Joins: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de)
[18:02:25] *** Quits: Guest88 (~textual@85.249.167.96) (Client Quit)
[18:02:38] *** Quits: obimod (~obimod@gateway/vpn/pia/obimod) (Quit: every day brings new choices)
[18:03:21] <jwpapi> Do you guys work with a portrait monitor. I’m considering a curved 49 inch monitor or like a 32 inch and a vertical one
[18:03:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:04:20] *** Quits: D4mned (~D1mned@212.101.234.238) (Read error: Connection reset by peer)
[18:05:00] *** Quits: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:05:09] *** Joins: Guest88 (~textual@85.249.167.96)
[18:06:02] *** Joins: D4mned (~D1mned@212.101.253.144)
[18:06:35] <jaawerth> iffraff: since you used a scaffolder, my guess is that it generatored code that uses require() on local modules (which is to say, not ones in node_modues). if you set type to "module" in your package.son, it will assume all your local modules are ESM and thus yell at you for using require on the locals. if my guess is right, you can rename the commonjs ones to end in .cjs as a quick fix, or
[18:06:37] <jaawerth> replace the requires with import statements
[18:06:59] *** Quits: Guest88 (~textual@85.249.167.96) (Client Quit)
[18:07:20] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[18:07:27] <jaawerth> jwpapi: I'm not that fancy, but I probably should consider it... my external monitor is a free one I was allowd to keep after leaving an old job, lol
[18:07:30] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:95ea:d1ff:55f2:9ea6)
[18:07:43] <jaawerth> I need to upgrade my whole desk tbh
[18:11:03] *** Joins: Guest88 (~textual@85.249.167.96)
[18:11:33] <iffraff> jaawerth: so, if I change all my import to requires then it might work?  Again I literally just copied the code from a plugin in their repo.  I believe they have some super custom build process though so who know what happens there.
[18:12:01] <iffraff> But so I might try, only using require and removing the type="module"?
[18:12:33] <jwpapi> jaawerth: I’m finally settling down after 5 years of travelling and can’t decide between one 49 inch and a portrait monitor
[18:14:07] <iffraff> jwpapi: fwiw, I have a 50" 4k monitor and it's awesome!  I'm running linux, not sure what windows or mac would do.  I have it broken down into 3 columns and 2-3 rows per column.  And the thing only cost me like $250.
[18:14:29] <jwpapi> How did you get is so cheap? wtf
[18:14:45] <jwpapi> It seems like most people use a 49-50 inch one
[18:14:53] <jwpapi> couldn’t find anyone with a portrait one, wonder why
[18:15:09] <iffraff> Problem is, that now while all the hipsters can take their crapbook to the coffee shop and flirt with the hotties, I can't leave my office cuz I can't work on one tiny screen
[18:15:14] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:95ea:d1ff:55f2:9ea6)
[18:15:28] <iffraff> jwpapi: it's just a 4k tv.
[18:15:45] <jwpapi> iffraff: how much hz can you run it on?
[18:15:49] <jwpapi> that’s the downside isn’t it?
[18:15:52] <iffraff> idk where you are, but in the states you can get a 4k tv for cheap.
[18:16:08] <jaawerth> iffraff: only using require would also work, sure. I'd grep the codebase before doing anything but odds on any given thing using require a are high
[18:16:12] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[18:16:57] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:95ea:d1ff:55f2:9ea6) (Ping timeout: 250 seconds)
[18:17:15] <iffraff> well, I don't use it for gaming. Or like intense graphic design.  just coding. it depends on your graphics card, but 30hz or 60hz.  I know the tv can DO 60hz I just don't remember whether  was able to get my laptop to behave.
[18:17:32] <iffraff> jaawerth: thanks for the help, I'll try this.
[18:20:31] *** Joins: chao (~stenno@user/stenno)
[18:20:56] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[18:22:12] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[18:24:06] *** Joins: trevors (~trevors@user/trevors)
[18:25:12] *** Quits: Guest88 (~textual@85.249.167.96) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:27:03] *** Joins: clamiax (~clamiax@net-93-65-240-243.cust.vodafonedsl.it)
[18:28:24] <iffraff> jaawerth: but wait, I have bebeled and tsc'd the code before publishing it so it's all requires.  And I have tried with type="module" and with out.
[18:28:34] <iffraff> so wouldn't that do it?
[18:29:38] <jaawerth> well with type module you're + babel you'd end up with all requires in a package that expect imports, guaranteeing the error
[18:29:56] <jaawerth> but I can't commment further because there are way too many variables in what you just described
[18:30:04] <iffraff> the situation is complicated.  There is a code gen library, that is used by a consuming app.  There is the plugin code which I write ( copy from their source ) and then have to publish to npm.  Then there is the consuming app.
[18:30:08] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 272 seconds)
[18:31:08] <jaawerth> you can invoke `npm pack` on what you're publishing and inspect the tgz
[18:31:09] <iffraff> so you are suggesting that perhaps I ran babel on the app but still had the type="module" in the p.json. And that might affect the outcome?
[18:31:24] <jaawerth> I'm saying if that's the case you would always get the error
[18:31:40] <iffraff> well, what I'm doing to test is actually just copying the code from the plugin proj to the consuming code node_modules
[18:31:40] <jaawerth> babel won't transform the package.json
[18:31:42] *** Joins: chao (~stenno@user/stenno)
[18:31:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:32:40] <iffraff> so in the consuming app node_modules I change the package.json to not have the type="module" then I get basically the oposite error.  saying you can't use require.
[18:33:04] <jaawerth> as the error explains, it cares about the nearest parent package.json
[18:33:18] <jaawerth> so anything that has require() in node_modules is fine so long as its companion package.json isn't type: module
[18:33:35] <jaawerth> but if you published your thing, with type: module  in the package.json, and the code contains requires...
[18:33:56] <iffraff> let me try and run it again and see what the error is when I do it this way.
[18:33:59] <jaawerth> I would suggest inspecting the files rather than just trying diferent combos until it works
[18:34:06] *** chao is now known as stenno
[18:34:33] *** Joins: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de)
[18:34:43] *** Joins: thiras (~thiras@user/thiras)
[18:36:40] <iffraff> jaawerth: I have a different error, should I post it here or in the gist?
[18:37:28] *** Quits: nomic (~nomic@185.217.117.193) (Quit: Leaving)
[18:37:54] <iffraff> here I have added it to the gist
[18:37:54] <iffraff> https://gist.github.com/reharik/aad2ec7d92f3d42dec58b89303de5cc5
[18:39:00] *** Quits: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:41:05] <iffraff> actually crap that's the same error. but it's complaining about require being in codegen-ts-plugin/node_modules/@graphql-codegen/cli/bin.js  which is the node_modules of the consuming app, and not my plugin
[18:42:06] *** Joins: Guest88 (~textual@85.249.167.96)
[18:43:55] *** Joins: p-i- (~Ohmu@183.89.27.225)
[18:44:04] *** Quits: chenqisu12 (~chenqisu1@183.217.200.249) (Ping timeout: 272 seconds)
[18:46:12] *** Joins: onosendi (~onosendi@user/onosendi)
[18:47:59] *** Quits: i0e (~is0ke3@user/is0ke3) (Read error: Connection reset by peer)
[18:48:36] <jaawerth> are you mually impoorting the plugins or are you passing a flag or something and having them auto-resolve?
[18:48:39] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:49:09] <jaawerth> if the latter it is almost certainly generating requires, which means you wouldn't want type=module in your published package.json
[18:49:29] <jaawerth> generally speaking publisshing ESM is still best avoided since you can import either from ESM but can only require CJS from CJS
[18:50:44] <tokie> jaawerth: https://lololo.lol/🐶🦊 i got a decent JS based terminal working
[18:51:17] *** Quits: Guest88 (~textual@85.249.167.96) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:51:49] <jaawerth> hahaha nice
[18:53:00] <jaawerth> what'd you end up going with? manual? or using one of those term things?
[18:54:20] <stenno> tmate ftw
[18:55:00] <stenno> oh n/m
[18:55:01] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[18:55:24] <stenno> wait what languages is that
[18:55:30] * stenno counts number of parentheses
[18:55:32] <stenno> lisp?
[18:55:59] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:57:13] *** Joins: Guest88 (~textual@85.249.167.96)
[18:58:31] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[18:59:15] <iffraff> jaawerth: so right now I have two editors going, one with the plugin code and one with the consumer code.  I'm building in different ways and then copy/pasting the result into the node_modules of the consumer code.  To be clear I did and npm -i of the plugin in the consumer once.  Then I start replacing what is in the node_moduels/myPlugin folder.
[18:59:42] <tokie> jaawerth: jquery terminal
[19:00:17] <stenno> no hterm or xterm.js ?
[19:00:22] <tokie> stenno: it's scheme
[19:00:26] <stenno> tokie: ah
[19:00:34] *** Quits: Guest88 (~textual@85.249.167.96) (Client Quit)
[19:00:36] <tokie> i would love to use xterm.js but if i used xtermjs i would have to write my own readline/local echo equiv
[19:00:39] <stenno> so quasilisp
[19:00:43] <tokie> which i may still do but that's a huge project
[19:01:10] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[19:01:13] <stenno> i am currently writing my own browser vt100 xterm compatible emulator
[19:01:41] <stenno> its a project that is most likely doomed to failure, but there is a small chance it will actually work
[19:01:47] <stenno> and then it will be epic
[19:01:52] <tokie> xterm.js is great. but it's pretty raw
[19:02:05] <stenno> its really difficult to get state out of xterm.js
[19:02:19] <stenno> their api is quite restrictive imo
[19:02:32] <stenno> its super fast but i cannot use it for the stuff i need
[19:03:25] <stenno> but it sounds great for your usecase
[19:03:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:03:57] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 252 seconds)
[19:03:57] <tokie> i think i also looked at hterm and it also doesn't really have great localecho stuff
[19:04:02] <tokie> i need a readline, really :)
[19:04:03] <stenno> there is a websocket plugin for xterm.js, would that be helpful? or is yours completely serverless?
[19:04:11] <tokie> my compiler runs in WASM
[19:04:13] <tokie> it's written in rust
[19:04:25] <stenno> so client side
[19:04:27] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:04:33] <tokie> yeah
[19:04:35] <tokie> https://github.com/strtok/marwood/
[19:04:44] <stenno> kinda hard to do readline in the client lol
[19:04:53] <stenno> gotta do contenteditable or input hacks i reckon
[19:05:31] *** Joins: sam_1 (~sam_1@87.51.251.118)
[19:05:38] *** Parts: Phineas (~Phineas@user/Phineas) ()
[19:07:10] *** Joins: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de)
[19:07:57] <tokie> well, if i had a layer of JS that's driving xtermjs as a readline and provided me hooks for things like completion hinting and syntax highlighting and stuff it would have worked
[19:08:08] <tokie> https://github.com/wavesoft/local-echo like this project
[19:08:08] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[19:08:22] <tokie> except it's not really complete
[19:09:06] <stenno> have you seen the addon example which does link handling?
[19:09:18] <tokie> to xtermjs?
[19:09:22] <stenno> yeah
[19:09:30] <tokie> i think i saw it in the addons list
[19:09:38] <stenno> its kinda hacky
[19:10:04] <stenno> i also made the experience that by introducing custom hooks it really really slows xterm.js down but that might've been because of my own incompetence
[19:10:40] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 272 seconds)
[19:11:47] <tokie> yeah, jquery terminal is super super slow for certain things. it's great for outputting results of evaluating a scheme expression but if you try to do something like call scheme (display) to draw ascii art that's styled per character then it ends up rendering a <span> per character to the DOM and slows to a halt
[19:12:02] <stenno> ooh oof
[19:12:03] *** Quits: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[19:12:09] <stenno> you probably want to render to canvas instead
[19:21:29] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[19:22:47] *** Joins: trevors (~trevors@user/trevors)
[19:24:08] *** Quits: ejjfunky (~ejjfunky2@125.164.19.191) (Remote host closed the connection)
[19:24:27] *** Joins: Guest88 (~textual@85.249.167.96)
[19:31:19] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 256 seconds)
[19:31:24] <tokie> stenno: one reason it's easier to have the readline impl be on the JS side too is that if it's executing a long running eval it can periodically yield to the JS main thread, but if i had implemented the terminal backend completely in rust it would be a lot harder to yield back to JS
[19:31:51] <stenno> websockets, right
[19:31:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:31:53] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:31:53] *** Joins: wroathe (~wroathe@user/wroathe)
[19:31:56] <stenno> but you will get network latency
[19:32:07] <stenno> oh wait
[19:32:18] <stenno> you mean the terminal in rust but still in the browser?
[19:32:22] <tokie> yes
[19:32:36] <stenno> i looked into rust-to-wasm on the weekend, the whole type stuff drove me insane lol
[19:32:52] <stenno> my buddy tried teh best to explain it to me but i got impatient quickly
[19:32:54] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[19:33:06] <tokie> WASM runs in the JS main thread
[19:33:15] <tokie> unless you use webworkers, which has its own issues
[19:33:49] <tokie> so i had to have jquery terminal tell me VM to execute 1000 instructions at a time in a loop so that it wouldn't hang the JS main thread
[19:34:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[19:34:08] *** Joins: va5c0 (~vasco.nun@162.154-253-62.static.virginmediabusiness.co.uk)
[19:34:51] *** Joins: zebrag (~chris@user/zebrag)
[19:34:53] <tokie> despite popular beliefe i'm not really a web developer so i had to learn the magic of setTimeout and the smoke and mirrors that is async/await :p
[19:35:19] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:36:12] <stenno> well its syntax sugar for .then
[19:37:00] <stenno> are you familiar with the concept of eventloops in single-threaded languages?
[19:37:35] <tokie> lol yes
[19:38:02] <stenno> ok so learning should have been easy for you then
[19:38:05] <jaawerth> tokie: your choice of identifiers makes me think you'd get a kick out of this https://gist.github.com/jaawerth/7501b0ae26ce82dbad76a51ecb8cdb78
[19:38:09] <tokie> i understand what async/await does in JS. i called it smoke and mirrors because it doesn't really contribute to cooperative multitasking in the way that something like async in rust does
[19:38:33] <tokie> jaawerth: that's actually conformant to r7rs!
[19:38:38] <stenno> i am not familiar with how async works in rust
[19:40:26] <stenno> lol zalgo
[19:40:29] <stenno> should work in ruby too
[19:40:30] <jaawerth> the allowed identifiers you mean? yeah, I just thought it would be fine to write a macro that degrades soruce code into something unrenderable but still runnable. kitty terminal (as in the screenshot) is actually doing an amazing job. most other terms you're lucky if you can read anything
[19:40:53] <stenno> js allows for some crazy characters in identifiers
[19:41:27] *** Joins: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de)
[19:41:46] <stenno> n> const 𒀇 = 23; 𒀇
[19:41:47] <jellobot> (okay) 23
[19:42:33] <stenno> n> const h̵̢̞͙̦̜̱̱̝͇̔̄̇͗̎̀͊̑̄̈̕e̶̛͕͖͙̻͙̳̣͛̈̇̽̀ḽ̶̡̨̳͎͕̲̞̭̻̒̑͊̈́̑̓́̄̈̈́̃̂͐͝͝ͅļ̵̗̞̤̥̯̜͙̥͙͇̩͓̗͛͊̎͛̒̊̈̕ͅơ̷̢̜͈͓̹̮̬͜ = 23;
[19:42:34] <jellobot> (okay) undefined
[19:42:35] <stenno> h̵̢̞͙̦̜̱̱̝͇̔̄̇͗̎̀͊̑̄̈̕e̶̛͕͖͙̻͙̳̣͛̈̇̽̀ḽ̶̡̨̳͎͕̲̞̭̻̒̑͊̈́̑̓́̄̈̈́̃̂͐͝͝ͅļ̵̗̞̤̥̯̜͙̥͙͇̩͓̗͛͊̎͛̒̊̈̕ͅơ̷̢̜͈͓̹̮̬͜
[19:42:46] <stenno> n> const h̵̢̞͙̦̜̱̱̝͇̔̄̇͗̎̀͊̑̄̈̕e̶̛͕͖͙̻͙̳̣͛̈̇̽̀ḽ̶̡̨̳͎͕̲̞̭̻̒̑͊̈́̑̓́̄̈̈́̃̂͐͝͝ͅļ̵̗̞̤̥̯̜͙̥͙͇̩͓̗͛͊̎͛̒̊̈̕ͅơ̷̢̜͈͓̹̮̬͜ = 23;
[19:42:47] <jellobot> (okay) undefined
[19:42:48] <stenno> h̵̢̞͙̦̜̱̱̝͇̔̄̇͗̎̀͊̑̄̈̕e̶̛͕͖͙̻͙̳̣͛̈̇̽̀ḽ̶̡̨̳͎͕̲̞̭̻̒̑͊̈́̑̓́̄̈̈́̃̂͐͝͝ͅļ̵̗̞̤̥̯̜͙̥͙͇̩͓̗͛͊̎͛̒̊̈̕ͅơ̷̢̜͈͓̹̮̬͜
[19:42:50] <stenno> lol that newline
[19:43:16] <stenno> n> const h̵̢̞͙̦̜̱̱̝͇̔̄̇͗̎̀͊̑̄̈̕e̶̛͕͖͙̻͙̳̣͛̈̇̽̀ḽ̶̡̨̳͎͕̲̞̭̻̒̑͊̈́̑̓́̄̈̈́̃̂͐͝͝ͅļ̵̗̞̤̥̯̜͙̥͙͇̩͓̗͛͊̎͛̒̊̈̕ͅơ̷̢̜͈͓̹̮̬͜ = 23;
[19:43:17] <jellobot> (okay) undefined
[19:43:18] <jaawerth> huh, I actually thought js would choke on it
[19:43:18] <stenno> h̵̢̞͙̦̜̱̱̝͇̔̄̇͗̎̀͊̑̄̈̕e̶̛͕͖͙̻͙̳̣͛̈̇̽̀ḽ̶̡̨̳͎͕̲̞̭̻̒̑͊̈́̑̓́̄̈̈́̃̂͐͝͝ͅļ̵̗̞̤̥̯̜͙̥͙͇̩͓̗͛͊̎͛̒̊̈̕ͅơ̷̢̜͈͓̹̮͜
[19:43:20] <stenno> n/m
[19:43:24] <jaawerth> a babel plugin is too much work though, lol
[19:43:29] <stenno> certain work, certain don't work
[19:43:34] <stenno> pile of poo doesn't work
[19:43:52] <stenno> the spec has details on which unicode planes(is that the right word) are allowed
[19:44:05] *** Quits: JayDoubleu_ (sid339529@id-339529.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[19:44:08] <silly> https://beta.reactjs.org/apis/usestate
[19:44:11] <jaawerth> yeah I knew itd allowed in some unicode but didn't think it was quite THAT permissive
[19:44:12] <tokie> jaawerth: does fennel have first class symbols?
[19:44:15] *** Quits: iffraff (~quassel@2605:a601:aae0:4a00:87ef:e0bd:9524:1377) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:44:18] *** Joins: yst (~yst@user/yst)
[19:44:36] <silly> nice new docs
[19:44:37] <tokie> in scheme you can string->symbol and symbol->string
[19:44:58] <stenno> ruby too
[19:45:18] <jaawerth> only in compile-time. the goal of fennel is to be as light-weight a layer on top of the lua runtime as possible so it can ride lua into everywhere it's embedded, so it's mostly just lisp compiletime semantics (s-exprs and macros)  on top of lua runtime semantics
[19:45:29] *** Quits: hughrawlinson_ (sid11243@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[19:45:40] <jaawerth> with some added goodies in the compile (whichc can be embedded along with as a lua library or just compile AOT)
[19:45:57] <jaawerth> it's also its own module bundler
[19:46:08] *** Quits: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[19:46:37] <jaawerth> purists would likely question its lisp bonaides for that reason
[19:46:44] <jaawerth> *bonafides
[19:46:50] <jaawerth> well that and the clojurisms with [] and {}
[19:47:16] *** Joins: JayDoubleu_ (sid339529@id-339529.hampstead.irccloud.com)
[19:47:27] *** Joins: hughrawlinson_ (sid11243@id-11243.ilkley.irccloud.com)
[19:48:17] <jaawerth> the zalgo stuff is hilarious because of how wildly different it renders based on context. here's what happened when I tried to expand some in the web repl on fennel-lang.org https://p.jaawerth.com/cursed-web-repl.png
[19:49:11] <stenno> You like math? *proceeds to zalgo*
[19:49:17] <jaawerth> hahaha
[19:49:56] <jaawerth> it does sorta look like a wave function (probably because of the PRNG)
[19:51:24] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[19:52:20] <stenno> zalgo is basically just 'use all the diacritics at the same time', right?
[19:52:46] <jaawerth> more or less. just injecting them as random noise into text
[19:53:47] *** Joins: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de)
[19:55:25] *** Quits: enoq (~enoq@194-208-178-35.lampert.tv) (Quit: enoq)
[19:56:16] *** Joins: Simplar (~quassel@188.163.93.241)
[19:57:11] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[19:57:30] <Simplar> when I'm parsing a date with `new Date('Tue, 15 Feb 2022 16:24:09 GMT').toString()` it gives me 'Tue Feb 15 2022 18:24:09 GMT+0200'
[19:57:50] <Simplar> Can I somehow preserve the original timezone without modifying it whilst parsing the date?
[19:58:25] *** Joins: trevors (~trevors@user/trevors)
[19:58:51] <stenno> probably Intl.DateTimeFormat
[19:59:29] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[19:59:50] *** Joins: zebrag (~chris@user/zebrag)
[20:00:55] *** Joins: sam_1 (~sam_1@87.51.251.118)
[20:01:01] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[20:01:30] *** Quits: Guest88 (~textual@85.249.167.96) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:02:27] *** Joins: Guest88 (~textual@85.249.167.96)
[20:02:37] <systemfault> Oh, that's fun https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/
[20:02:56] <jaawerth> it only took them 6 years to catch up to gitlab!
[20:03:50] <stenno> When we encounter code blocks marked as mermaid, we generate an iframe that takes the raw Mermaid syntax and passes it to Mermaid.js, turning that code into a diagram in your local browser.
[20:04:08] <stenno> ok..
[20:04:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:04:39] *** Quits: Guest88 (~textual@85.249.167.96) (Client Quit)
[20:05:21] <jaawerth> stenno: like so  https://gitlab.com/-/snippets/1785199
[20:05:59] <jaawerth> well I say "catch up" but I gitlab also supports, like, plantuml and I think one other diagram thinger
[20:06:11] <jaawerth> it's the best markdown flavor
[20:06:13] <stenno> oh gitlab also uses an iframe
[20:06:16] <systemfault> Yeah... problem is that nobody uses gitlab except "companies" because it can easily be self-hosted.
[20:06:39] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 252 seconds)
[20:06:55] <jaawerth> it's just the self-fulfilling "everybody uses it because everybody uses it" thing though
[20:07:13] <stenno> the tautology of social anything
[20:07:23] *** Joins: Guest88 (~textual@85.249.167.96)
[20:07:24] *** Quits: voltage_ (voltage@user/voltage) (Remote host closed the connection)
[20:07:25] *** Quits: cotko (~cotko@155.pool85-49-78.dynamic.orange.es) (Quit: Konversation terminated!)
[20:07:38] *** Quits: heatwave (~heatwave@2401:4900:1c62:8216:4ab1:c927:2d6f:8a63) (Quit: WeeChat 3.4)
[20:07:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[20:07:51] *** Joins: voltage_ (voltage@user/voltage)
[20:08:02] *** Joins: heatwave (~heatwave@185.203.122.87)
[20:08:19] <systemfault> Often times, it's because of timing... X was there first.
[20:08:55] <jaawerth> yeah. and for anything people ant to be discoverable you kind of need to at least have a gh mirror
[20:08:58] <systemfault> So, even if Y comes up a bit later with a slightly better featureset, it doesn't matter... because it will eventually be added to X and people won't want to move.
[20:09:11] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:10:31] <jaawerth> well I also dislike how the whole open-soruce world is reliant on one company's platform (even before that company was ms) but going against that flow takes work. at least until git platforms have some kind of wide-adopted activitypub thing
[20:11:13] *** Quits: Guest88 (~textual@85.249.167.96) (Client Quit)
[20:11:33] *** Joins: matsaman (~matsaman@user/matsaman)
[20:12:00] <jaawerth> for fennel we've been using sourcehut for a while, but it's so oldschool that we keep the github mirror alive and accept issues/pr's from it as well since the whole git send-mail thing is a barrier to potential contributors who aren't used to it, and soucehut's web ux is still a work in progress
[20:12:52] <jaawerth> I have come to appreciate the constraints, though. e.g. the lack of PR's has improved my git commit messsage habits to be more verbose instead of just shoving all relevant info into the PR message.
[20:13:16] <jaawerth> which I carry over back to gh
[20:14:35] *** Quits: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net) (Remote host closed the connection)
[20:15:09] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[20:15:28] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[20:15:30] *** Joins: mat001 (~mat001@72.28.108.216)
[20:16:50] *** Joins: sam_1 (~sam_1@87.51.251.118)
[20:17:46] *** Joins: kinabalu (~kinabalu@198.23.166.98)
[20:17:46] *** Quits: kinabalu (~kinabalu@198.23.166.98) (Changing host)
[20:17:46] *** Joins: kinabalu (~kinabalu@about/java/kinabalu)
[20:18:50] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Client Quit)
[20:19:09] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[20:19:51] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 252 seconds)
[20:21:36] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 272 seconds)
[20:23:09] *** Joins: benni (~benni@p5dc1c909.dip0.t-ipconnect.de)
[20:24:12] *** Quits: va5c0 (~vasco.nun@162.154-253-62.static.virginmediabusiness.co.uk) (Ping timeout: 240 seconds)
[20:24:58] <systemfault> jaawerth: Fennel is interesting, I'll probably play with it
[20:26:51] <ljharb> but also it's really annoying when people call them "MRs"
[20:27:19] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[20:28:14] <Tabmow> I'm trying to troubleshoot a certain function that is being called 3 times on page load in vue.js. Is there a good way to do this? A console.log tells me that it is being called 3 times but from what I can tell from the code it should only be called once...
[20:29:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[20:30:28] *** Quits: pizdets (~pizdets@183.182.115.222) (Ping timeout: 272 seconds)
[20:30:36] <SpiceMan> put a breakpoint, check the call stack
[20:30:51] *** Joins: pizdets_ (~pizdets@183.182.111.58)
[20:31:42] *** Joins: diamondbond (~diamondbo@175.157.50.34)
[20:32:10] <tokie> jaawerth: it's because opensource has a foot and a half in industry and github provides a lot of resources and support that industry needs
[20:32:36] *** Quits: davlefou (~davlefou@5.183.213.164) (Ping timeout: 250 seconds)
[20:32:43] <jaawerth> systemfault: nice! I'm a fan - I mostly got into it because I liked lisps and it could natively in nvim then used it as an excuse to play with lightweight lang design and compiler stuffs. ended up using it all over once I realized how much stuff I already used could run lua, though
[20:33:23] <tokie> eveyrone should implement a lisp!:D
[20:33:57] <jaawerth> tokie: it's partly that, but personally I acatually like gitlab's offerings better. I ran it on-prem for a couple years at oldob and fell in love with it. it's also the best "freemium" platform I've used, where the community edition isn't super-nerfed compared to the enterprise one
[20:34:15] <jaawerth> (that space tends to be a garbage fire more often than not)
[20:34:52] <Tabmow> SpiceMan: I can run it in debug mode?
[20:35:09] <jaawerth> but I still use github lots if I care about people finding the thing (which isn't that often, since if people find it I'll feel guilty for not maintaining it)
[20:35:58] *** Quits: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Quit: Ping timeout (120 seconds))
[20:36:09] *** Joins: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[20:36:30] <SpiceMan> Tabmow: what? in the browser's dev tools.
[20:36:43] <jaawerth> ljharb: MR makes more sense to me tbh. Like, you're asking to merge, not pull :P
[20:37:15] <systemfault> MR vs PR is probably somewhere near the bottom of my "annoying things in the programming world" list
[20:37:16] <jaawerth> but PR still takes precedence in my brain because of gh's dominance
[20:37:23] <ox1eef> you're asking to do so form of "git pull".
[20:37:49] <jaawerth> true
[20:38:09] *** Quits: diamondbond (~diamondbo@175.157.50.34) (Quit: Leaving)
[20:38:10] <jaawerth> to systemfault's point, I would only claim a preference if you put a gun to my head
[20:38:20] <jaawerth> I'm fine with either
[20:39:00] <ox1eef> same, ive come to expect github as the defacto standard - sourcehub sounds interesting. once a site you love becomes owned by a big corp, i think it's only a matter of time before it goes downhill.
[20:39:05] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[20:39:06] *** Quits: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[20:39:12] <Tabmow> SpiceMan: ahh cool! I didn't even know that was possible, thanks!
[20:39:50] <jaawerth> yeah. gitlab has done an admirable job holding of from getting ruined by VC but it's only a matter of time
[20:39:52] <ox1eef> the beauty of git and the genius of linus is the distributed nature, i'm sure that would have been shot down by any product team at MS
[20:40:05] <jaawerth> but when that happens at least it can be forked
[20:40:20] <ox1eef> yeah, it seems to be the natural way of things - sooner or later it happens.
[20:41:41] *** Joins: cth (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:41:52] <jaawerth> sourcehut is.. I am fond of it but in a way such that I would hesitate to recommend it to someone unless I knew their preferences really well. I think it's nice to have that sort of alternative (and something that doesn't rely on client-side JS for the web ui to work)
[20:42:33] <ox1eef> i will give it a closer look, its sound like an old school model of development - which works for a lot of projects.
[20:43:04] <jaawerth> yeah that's exactly it. like you don't NEED to but the expectation is contrib will be around patches sent to mailing lists
[20:43:19] <jaawerth> the web ui "submit a patch" is just a frontend to that
[20:43:57] <ox1eef> solid approach if you ask me, it's proven to work and not everyone likes the GitHub model.
[20:44:11] <jaawerth> yeah. it's just hard for people used to gh to contribute to projects on it
[20:44:22] <ox1eef> indeed, different mindset
[20:44:27] *** Joins: davlefou (~davlefou@5.183.213.164)
[20:47:31] *** Joins: sagax (~sagax_nb@user/sagax)
[20:47:55] <ljharb> jaawerth: lol yeah fair
[20:48:10] <ljharb> jaawerth: but either way i can always spot a gitlab person on github that way
[20:48:31] <lf94> What do you call "since <time period>" ?
[20:48:37] <lf94> human readable relative time? <_>
[20:48:41] <ljharb> lf94: yes
[20:48:44] <lf94> descriptive time?
[20:48:48] <ljharb> lf94: usually just "relative time"
[20:48:50] <lf94> descriptive relative time
[20:48:56] <lf94> ok
[20:49:02] <ljharb> lf94: but it's also really hard to do that in an internationalizable way
[20:49:04] <lf94> I would argue its not just "relative time" but you know what I mean.
[20:49:20] <lf94> True
[20:49:30] <lf94> This is only business support side though
[20:49:34] <lf94> But good to note :)
[20:49:39] <lf94> thanks ljharb
[20:49:41] *** Joins: Akiva (~Akiva@user/Akiva)
[20:50:33] <jaawerth> ljharb: has that enriched your life?
[20:50:37] *** Joins: sam_1 (~sam_1@87.51.251.118)
[20:51:21] <lf94> what's the preferred package to use on the node side to get that sort of time?
[20:51:26] <lf94> lumen or whatever?
[20:51:35] <lf94> iirc there was something other than the other time lib used these days
[20:51:47] <jaawerth> something other than the other?
[20:51:54] <lf94> > moment
[20:52:00] <lf94> ah
[20:52:01] <ox1eef> it's probably a 20 line function you don't need to pull in the kitchen sink for.
[20:52:01] <jaawerth> oh, date-fns probably
[20:52:02] <lf94> > luxon
[20:52:08] <lf94> that was it
[20:52:12] <jaawerth> haven't even heard of luxon
[20:52:14] <lf94> ah, I'll check date-fns too
[20:52:21] <lf94> luxon is by the moment people afaik
[20:52:29] <jaawerth> date-fns is a modular set of utils you can grab a la carte
[20:52:34] <lf94> ooou, ok.
[20:53:14] <jaawerth> e.g. for the relative time thing, https://date-fns.org/v2.28.0/docs/formatRelative
[20:54:21] <lf94> perfecto
[20:55:01] <lf94> erm
[20:55:03] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 252 seconds)
[20:55:10] <lf94> well maybe. It's not quite like "since X days ago"
[20:55:18] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[20:55:59] <lf94> https://date-fns.org/v2.28.0/docs/formatDistanceToNowStrict
[20:56:01] <lf94> should do it!
[20:56:11] *** Joins: src (~src@user/src)
[20:56:13] <jaawerth> haha nice search skillz
[20:56:38] <lf94> the non-strict version is pretty funky.
[20:57:46] *** Joins: nomic (~nomic@185.217.117.193)
[20:58:40] <ljharb> jaawerth: yes, i like to be able to spot intruder
[20:58:41] <ljharb> s
[20:58:56] <ljharb> jaawerth: otherwise the cockroaches in mimic take over
[21:00:23] *** Quits: benni (~benni@p5dc1c909.dip0.t-ipconnect.de) (Quit: Client closed)
[21:02:52] *** Joins: trevors (~trevors@user/trevors)
[21:04:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:07:51] *** Joins: quartz (~user_name@user/quartz)
[21:08:11] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[21:08:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[21:09:14] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[21:09:28] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[21:11:19] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[21:13:07] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[21:13:25] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Read error: Connection reset by peer)
[21:13:34] *** Joins: howdoi (uid224@id-224.lymington.irccloud.com)
[21:15:13] *** Joins: phrix (~phrix@185.76.176.45)
[21:18:47] *** Joins: masoudd (~masoudd@user/masoudd)
[21:19:24] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[21:20:21] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[21:21:37] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:22:19] *** Joins: crashrep (~crashrep@user/crashrep)
[21:23:23] *** Quits: Harlin (~DonQixote@75-163-174-136.clsp.qwest.net) (Quit: Leaving)
[21:23:24] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 240 seconds)
[21:25:35] *** Joins: teut (~teut@122.161.83.81)
[21:25:45] <onosendi> If an element is added to the DOM, then 2 seconds later it is removed, is `jest.useFakeTimers` what I want to test this? Is it possible to mock '2 seconds have passed', then try selecting the element to assert that it's `null`?
[21:27:20] <ljharb> onosendi: that seems like a weird thing to be testing with jest
[21:27:32] <onosendi> Hmm
[21:28:43] <onosendi> ljharb: do you not recommend jest-dom?
[21:29:10] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[21:29:34] <ljharb> i don't know what that is
[21:29:39] <ljharb> jsdom?
[21:29:48] <ljharb> either way jest is for unit tests, not e2e tests
[21:29:48] *** Quits: mat001 (~mat001@72.28.108.216) (Ping timeout: 240 seconds)
[21:31:12] <lf94> ^ this
[21:31:25] <lf94> e2e tests are so difficult to keep consistent
[21:31:32] <lf94> too many factors
[21:32:47] <onosendi> ljharb: 'jest-dom is a companion library for Testing Library that provides custom DOM element matchers for Jest'. So are you saying that I shouldn't use this, or that I'm using it wrong?
[21:34:36] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[21:35:43] <ljharb> onosendi: no, dom matchers are fine. i'm saying that trying to test "adds to the dom and removes 2s later" is not what jest is for
[21:35:54] <onosendi> ljharb: ah, gotcha.
[21:38:06] *** Quits: nomic (~nomic@185.217.117.193) (Quit: Leaving)
[21:40:44] *** Joins: mat001 (~mat001@72.28.108.216)
[21:41:28] *** Joins: sam_1 (~sam_1@87.51.251.118)
[21:42:39] *** Joins: N4buc0- (~N4buc0@177.42.101.69)
[21:43:12] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[21:44:18] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:2121:b67f:dc97:6336:3daf) (Remote host closed the connection)
[21:44:37] <jaawerth> ljharb: lol, got your new gh avatar https://p.jaawerth.com/sutherland-pod.gif
[21:46:12] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 252 seconds)
[21:46:21] *** Quits: Junxter (~Junxter@222.95.164.193) (Read error: Connection reset by peer)
[21:47:03] *** Joins: trevors (~trevors@user/trevors)
[21:47:48] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[21:49:42] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: The Game)
[21:52:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:55:56] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[21:55:58] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[21:56:23] *** Joins: thiras (~thiras@user/thiras)
[21:57:46] *** Joins: cotko (~cotko@155.pool85-49-78.dynamic.orange.es)
[21:59:10] *** Quits: cotko (~cotko@155.pool85-49-78.dynamic.orange.es) (Client Quit)
[22:05:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:06:01] <ljharb> jaawerth: oh god, do i really want to click
[22:06:10] <ljharb> lol what movie is that from
[22:06:13] <ljharb> oh pod people
[22:06:27] <ljharb> jaawerth: tbh "the invasion" is a good one too
[22:08:04] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[22:08:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[22:10:29] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[22:11:02] *** Joins: Guest88 (~textual@85.249.167.96)
[22:11:11] *** Tobbi__ is now known as Tobbi
[22:11:33] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:17:54] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[22:18:08] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 272 seconds)
[22:22:27] *** Quits: src (~src@user/src) (Quit: Leaving)
[22:22:34] *** Quits: heatwave (~heatwave@185.203.122.87) (Ping timeout: 272 seconds)
[22:23:00] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[22:23:16] *** Quits: Guest88 (~textual@85.249.167.96) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:26:36] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[22:28:16] *** Quits: quartz (~user_name@user/quartz) (Ping timeout: 272 seconds)
[22:28:58] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[22:30:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[22:31:00] *** Joins: crashrep (~crashrep@user/crashrep)
[22:31:17] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[22:33:31] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[22:35:13] *** Joins: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de)
[22:35:45] *** Quits: Simplar (~quassel@188.163.93.241) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:37:54] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 252 seconds)
[22:40:34] *** Joins: voltage_ (voltage@user/voltage)
[22:41:43] *** Quits: pycode (~pycode3@2001:b07:5d28:551:5267:7e42:40a7:19d1) (Ping timeout: 250 seconds)
[22:44:13] *** Joins: quartz (~user_name@user/quartz)
[22:44:42] *** Joins: Betal (~Betal@user/betal)
[22:45:05] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:46:11] *** Joins: summersault (~summersau@179.221.251.36)
[22:47:54] *** Quits: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[22:48:30] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[22:50:28] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[22:51:04] <howdoi> o/
[22:51:07] *** Joins: jazzy (~jaziz@user/jaziz)
[22:52:55] *** Joins: Guest88 (~textual@85.249.167.96)
[22:53:28] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[22:54:06] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[22:57:34] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[22:57:40] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[22:57:56] *** Quits: Guest88 (~textual@85.249.167.96) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:59:12] *** Joins: Guest88 (~textual@85.249.167.96)
[22:59:35] *** Quits: D4mned (~D1mned@212.101.253.144) (Read error: Connection reset by peer)
[23:00:00] *** Joins: D4mned (~D1mned@212.101.253.144)
[23:05:20] *** Quits: Guest88 (~textual@85.249.167.96) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:05:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:09:23] *** Quits: ckdCreations (~ckdCreati@147.55.130.35) (Read error: Connection reset by peer)
[23:10:04] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[23:18:54] *** Joins: kongzilla (~weechat@gateway/tor-sasl/kongzilla)
[23:19:41] *** Parts: kongzilla (~weechat@gateway/tor-sasl/kongzilla) ()
[23:20:02] *** Joins: nomic (~nomic@185.217.117.193)
[23:20:13] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[23:21:50] *** Joins: ckdCreations (~ckdCreati@147.55.130.32)
[23:22:17] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[23:23:05] *** Joins: Betal (~Betal@user/betal)
[23:24:38] *** Joins: nucranium (~nucranium@2a02:8010:6173:0:1d19:98e2:4b9a:bf4a)
[23:24:39] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 252 seconds)
[23:26:34] *** Joins: quartz (~user_name@user/quartz)
[23:28:22] <teut> https://jsfiddle.net/tn04p9um/
[23:28:32] <teut> why do I get undefined?
[23:29:35] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:31:25] <SpiceMan> because this is the global object (window in case of the browser)
[23:32:22] <teut> so this only gets a local scope inside of functions only?
[23:32:32] <teut> except arrow funcs
[23:32:44] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[23:33:46] <SpiceMan> "this" is... complicated
[23:33:48] <SpiceMan> teut: https://www.freecodecamp.org/news/javascript-this-keyword-binding-rules/
[23:34:16] *** Quits: Alex8532 (~Alex8532@user/alex8532) (Quit: Going offline, see ya! (www.adiirc.com))
[23:34:20] <teut> I know, its a favourite interview ques
[23:34:29] *** Parts: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Leaving)
[23:34:34] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:34:34] <jaawerth> ljharb: haha yeah, it was bodysnatchers. even I got conufused trying to search it up though, I misremembered it as being from Day of the Triffids even though Bodysnatchers is clearly the most obvious
[23:35:54] <jaawerth> ljharb: in terms of alien-invaders-movie-related gifs though my favorite has got to be https://p.jaawerth.com/shut-it-down.gif
[23:39:46] *** Joins: Betal (~Betal@user/betal)
[23:44:39] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:1b5d:374a:816c:e903)
[23:45:10] *** Joins: kakashiAL (~kakashi@p5b31684e.dip0.t-ipconnect.de)
[23:46:48] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 272 seconds)
[23:47:24] *** Quits: nucranium (~nucranium@2a02:8010:6173:0:1d19:98e2:4b9a:bf4a) (Ping timeout: 240 seconds)
[23:51:31] *** Joins: Guest88 (~textual@85.249.167.96)
[23:52:17] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:bdb1:824b:9e32:41f6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:52:42] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:9980:28d:a4a3:60f) (Ping timeout: 252 seconds)
[23:53:30] *** Joins: nucranium (~nucranium@2a02:8010:6173:0:1d19:98e2:4b9a:bf4a)
[23:53:48] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[23:56:14] *** Joins: jazzy2 (~jaziz@user/jaziz)
[23:56:23] *** Quits: Guest88 (~textual@85.249.167.96) (Client Quit)
[23:58:12] *** Quits: kill (~killown@user/killown) (Ping timeout: 252 seconds)
