[00:00:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[00:10:45] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[01:10:53] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:27:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:31:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[01:49:44] *** Joins: vcarvalho (~vcarvalho@161.230.15.110)
[01:53:20] *** Joins: epony (epony@user/epony)
[02:04:08] *** Joins: ilmu (~ilmu@176.76.242.171)
[02:05:47] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[02:08:36] <ilmu> can someone give me a link / gist with minimal example or list of attack surface I need to cover if I want to replace the reader and restrict the accessible procedures to some whitelist vocabulary
[02:09:15] <ilmu> I was looking at coalton a bit I think I can figure this out eventually but I am sure someone has made a blog post or something, just haven't found it yet
[02:10:36] <kagevf> maybe blacklist eval?
[02:14:06] <ilmu> idk if that really does what I want but if you have a link that talks about that then it could be helpful
[02:38:21] <kagevf> ilmu: I don't have a link but I've seen it said that you should be able to use forms like APPLY to get around having to use EVAL
[02:39:35] <kagevf> ilmu: actually ... maybe take a look at this? https://stevelosh.com/blog/2016/06/symbolic-computation/#s13-evaluating-lisp
[02:40:02] *** Joins: dre (~dre@2001:8003:c932:c301:880:1cdd:3f72:271d)
[02:40:11] <kagevf> there's an eval that's put together from scratch ... probably not bullet proof, but might be useful
[03:23:32] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[03:29:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:33:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[03:58:06] *** Joins: Bike (~Bike@71.69.170.70)
[04:06:13] <White_Flame> INTERN is something to blacklist as well
[04:06:31] <White_Flame> you can't let the user even manifest CL: or your application's symbols
[04:06:50] <White_Flame> READ, unless you replace that with your own reader
[04:07:19] <White_Flame> then the ability to swap out the reader would have to be done as well, but those are LETs and such, so again blocking at the symbol level is probably better
[04:07:52] <White_Flame> FIND-PACKAGE et al would also be verboten
[04:09:42] <White_Flame> and likely SYMBOL-PACKAGE as well, as they'd presumably have CL:+ etc
[04:11:46] *** Joins: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se)
[04:16:48] *** Joins: aeth_ (~aeth@user/aeth)
[04:16:54] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[04:16:59] *** aeth_ is now known as aeth
[04:46:47] *** Quits: vcarvalho (~vcarvalho@161.230.15.110) (Ping timeout: 256 seconds)
[05:04:04] *** Joins: occ (~occ@user/occ)
[05:29:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:34:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[05:35:16] *** Quits: tewi (~tewi@apn-95-41-175-122.dynamic.gprs.plus.pl) (Ping timeout: 250 seconds)
[05:38:55] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:41:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:41:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[06:08:11] *** Quits: dre (~dre@2001:8003:c932:c301:880:1cdd:3f72:271d) (Ping timeout: 250 seconds)
[07:10:40] *** Joins: Oladon (~olad@98.43.81.226)
[07:10:43] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[07:30:40] <beach> Good morning everyone! 
[07:36:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:54:21] *** Quits: Bike (~Bike@71.69.170.70) (Quit: sleep)
[08:03:48] *** Joins: lisp123_ (~lisp123@45.86.203.177)
[08:07:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[08:24:49] *** Quits: lisp123_ (~lisp123@45.86.203.177) (Remote host closed the connection)
[08:27:19] *** Joins: lisp123_ (~lisp123@45.86.203.9)
[08:31:57] *** Quits: lisp123_ (~lisp123@45.86.203.9) (Ping timeout: 240 seconds)
[08:41:56] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:08:16] *** Joins: dre (~dre@2001:8003:c932:c301:1c5e:3f1c:f7a4:be5b)
[09:19:11] *** Joins: lisp123 (~lisp123@45.86.203.9)
[09:20:36] *** Quits: dre (~dre@2001:8003:c932:c301:1c5e:3f1c:f7a4:be5b) (Ping timeout: 250 seconds)
[09:36:56] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[09:40:53] *** Quits: lisp123 (~lisp123@45.86.203.9) (Ping timeout: 256 seconds)
[09:46:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[09:48:26] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:05:35] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[10:11:16] *** Joins: occ (~occ@user/occ)
[10:34:52] *** Joins: shka (~herr@109.231.0.226)
[11:19:26] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:828:5888:3c6b:3bf8)
[11:21:32] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:22:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:26:57] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:828:5888:3c6b:3bf8) (Ping timeout: 240 seconds)
[11:27:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[11:29:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:30:28] *** Joins: treflip (~user@user/treflip)
[11:41:05] *** ogamita`` is now known as ogamita
[11:55:24] *** Quits: Harag (~user@105.243.9.173) (Remote host closed the connection)
[12:04:29] *** Joins: lisp123_ (~lisp123@45.86.203.9)
[12:07:34] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[12:08:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[12:09:47] *** Joins: treflip (~user@user/treflip)
[12:09:53] *** Joins: ilmu1 (~ilmu@176.76.242.151)
[12:11:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:12:37] *** Quits: ilmu (~ilmu@176.76.242.171) (Ping timeout: 240 seconds)
[12:14:37] *** Quits: lisp123_ (~lisp123@45.86.203.9) (Ping timeout: 240 seconds)
[12:30:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:40:44] *** Joins: silasfox (~sbv@p200300cec74715008ae52312fa2e25de.dip0.t-ipconnect.de)
[12:56:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:08:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[13:08:24] *** ilmu1 is now known as ilmu
[13:08:38] <ilmu> White_Flame thanks
[13:09:05] <ilmu> kagevf checking your link, sry for late answer was asleep by then
[13:17:41] *** Joins: tewi (~tewi@apn-95-41-155-14.dynamic.gprs.plus.pl)
[13:48:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:48:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:48:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:04:07] <ilmu> I guess it's too much work to strip down lisp and better to just build from scratch
[14:06:00] <lisp123> ilmu: in relation to?
[14:11:09] <ilmu> lisp123: I wanted to be able to do something like (in-package :w/e) and have very severe restrictions on what the reader accepts
[14:12:07] <ilmu> and what functionality is accessible
[14:12:47] <skeemer> is there any website, book, material for doing exercises with developing macros? 
[14:12:48] <ilmu> but now I'm thinking the right way to implement it is just from scratch via eval apply
[14:13:03] <lisp123> skeemer: On Lisp is not bad
[14:13:06] <ilmu> skeemer: on lisp and let ove rlambda
[14:13:19] <skeemer> i have heard that let over lambda is very difficult
[14:13:23] <skeemer> i just started with macros
[14:13:32] <ilmu> it is not really that difficult
[14:13:32] <skeemer> i understood the example in practical common lisp
[14:13:34] <lisp123> ilmu: Good luck, unfortunately I dont have much value to add 
[14:13:50] <lisp123> skeemer: Best way is to start writing them. They are not that difficult
[14:16:37] <skeemer> lisp123, but i don't know what kind of macro to write
[14:16:42] <skeemer> that's why i would need ideas
[14:16:43] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:78c8:bb9f:f5b1:85aa) (Quit: Konversation terminated!)
[14:17:37] <lisp123> On Lisp IMO is a very good book for this (and freely available)
[14:17:44] <lisp123> But you can start small
[14:18:41] <lisp123> Start off by writing a macro
[14:18:44] <lisp123> that improves IF
[14:18:55] <lisp123> to be like Emacs IF (progn on the else clause)
[14:20:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[14:22:32] *** Joins: aeth (~aeth@user/aeth)
[14:34:10] <rotateq> lisp123: this inconsistent implicit progn thing in emacs if
[14:34:55] <lisp123> It makes life easier when doing (if (null something) (something-small) (something-big-as-main-control-branch))
[14:35:04] <lisp123> but I was half joking too :P
[14:35:32] <rotateq> yes I hope so :D
[15:17:29] *** Quits: ilmu (~ilmu@176.76.242.151) (Ping timeout: 256 seconds)
[15:29:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[15:31:05] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[15:42:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:42:57] *** Quits: silasfox (~sbv@p200300cec74715008ae52312fa2e25de.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[15:50:03] *** Joins: Andrew (Andrew@user/AndrewYu)
[15:50:54] *** Joins: xsperry (~xs@user/xsperry)
[16:14:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[16:15:52] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:30:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:55:09] <CodeBitCookie[m]> Hello, Everyone!
[16:55:32] <CodeBitCookie[m]> How do I install quickload with NixOS
[17:14:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:19:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[17:49:41] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[17:52:45] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[17:54:18] *** Joins: silasfox (~sbv@p4fe8daed.dip0.t-ipconnect.de)
[17:55:02] *** Joins: occ (~occ@user/occ)
[18:34:14] *** Quits: treflip (~user@user/treflip) (Quit: rebooting)
[19:05:17] *** Quits: tewi (~tewi@apn-95-41-155-14.dynamic.gprs.plus.pl) (Ping timeout: 256 seconds)
[19:06:58] *** Joins: tewi (~tewi@apn-31-2-52-52.dynamic.gprs.plus.pl)
[19:16:13] *** Quits: silasfox (~sbv@p4fe8daed.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:23:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:28:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[19:29:25] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[19:29:40] <White_Flame> CodeBitCookie[m]: you mean quicklisp?  the main/only supported way is to download quicklisp.lisp and run it
[19:30:42] <White_Flame> hmm, I guess it is in apt on my linux mint, but I've never used that.  getting SLIME via apt was always problematic
[19:32:18] <White_Flame> on a new machine, I tend to build SBCL from source (as the package manager versions get out of date quickly), emacs from apt, then quicklisp.lisp, then (ql:quickload "quicklisp-slime-helper"), then I'm up and running
[19:36:04] *** Joins: occ (~occ@user/occ)
[20:22:13] <lagash> CodeBitCookie[m]: and don't forget to PGP verify it too!
[20:29:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:30:24] <skeemer> folk
[20:30:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:31:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:36:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[23:02:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:08:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[23:08:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:30:07] *** Joins: Nselm (~Nselm@p200300d56f4b3f232fdd2f2b08ee3842.dip0.t-ipconnect.de)
[23:33:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
