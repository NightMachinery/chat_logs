[00:00:15] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:208a:4e08:1f28:2ca1)
[00:00:16] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:208a:4e08:1f28:2ca1) (Remote host closed the connection)
[00:00:30] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:208a:4e08:1f28:2ca1)
[00:03:09] <Simplar> hey guys
[00:03:11] <Simplar> 'class std::stack<int>' has no member named 'peek'
[00:03:16] <Simplar> what's wrong tho
[00:03:23] <Simplar> peek is there in specs
[00:03:37] <Simplar> https://wandbox.org/permlink/QLwq3l9EWZuWLbsv
[00:09:02] <PJBoy> no it isn't
[00:09:05] <PJBoy> @ Simplar
[00:09:31] <PJBoy> https://en.cppreference.com/w/cpp/container/stack
[00:09:31] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:dd19:17d3:b6e0:9c0f) (Ping timeout: 245 seconds)
[00:14:59] <robod34> i have a silly question guys
[00:15:09] <robod34> i downloaded a c++ library
[00:15:35] <robod34> and I do not know how to make Microsoft Visual Studio find it
[00:16:25] <robod34> if i do « include <[precise path to .h file ]> »  , it works, but all the includes from that .h file fail
[00:16:41] <robod34> because they are relative
[00:17:24] <robod34> how do I set Microsoft VS in this case?
[00:17:33] <robod34> i use this
[00:17:35] <robod34> https://www.libvips.org/API/8.11/cpp/
[00:18:00] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:dd19:17d3:b6e0:9c0f)
[00:18:03] <robod34> I am trying to compile that silly example but I am failing at the include part
[00:21:35] <JeffH> if i have a vector of pointers to an object (Telemetry*) is there a build-in way to find the pointer where item->value == passed_in_value?  Currrently I'm looping over the vector and returning item when item->value = passed_in_value.
[00:23:22] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:26:04] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:26:12] *** Joins: Guest37 (~textual@124.168.255.30)
[00:27:09] *** Joins: KillAnimals (~anon@208.98.223.9)
[00:27:27] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:27:34] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:27:39] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[00:29:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:29:02] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[00:29:53] <scjg> maybe you could use std::find_if, but honestly looping over the vec seems like the simpler and nicer solution
[00:30:40] *** Quits: Guest37 (~textual@124.168.255.30) (Ping timeout: 260 seconds)
[00:32:19] *** Joins: johnny (~johnny@user/johnny)
[00:33:49] <PJBoy> C++20 you can do std::find with a projector
[00:33:56] <PJBoy> std::ranges::find even
[00:34:03] <johnny> hook that bad boy right up
[00:34:22] <johnny> i thought of the projector device, not projection
[00:34:29] <PJBoy> haha
[00:34:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[00:35:03] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[00:35:27] <johnny> there was that discussion on r/cpp about how to pronounce std , and in my head i basically say "standard" and a lot of people disagree. I've never once spoken the a name of a c++ function out loud though
[00:35:47] <PJBoy> { vector<S> v(3); v[2].value = 1; auto it = ranges::find(v, 1, &S::value); cout << distance(begin(v), it); } struct S { int value; };
[00:35:48] <geordi> 2
[00:36:17] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[00:36:39] <johnny> strcmp and memcpy and all that stuff is super awkward to speak about anyways
[00:37:01] <PJBoy> I've gone back and forth on "S T D" and "standard"
[00:37:11] <PJBoy> but I usually say "S T D"
[00:37:12] <barix> i use "stood"
[00:37:47] <johnny> the M V command? uggh.. stupid computers
[00:38:47] <johnny> barix, and you speak that out loud to your teammates or  whatnot?
[00:39:20] <barix> my day job doesn't involve c++, so no
[00:45:52] <johnny> i guess that's the people i most wanna hear from. folks who actually talk about it outloud
[00:52:36] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[00:53:21] *** Quits: shad0w (~shad0w@user/xshadow) (Ping timeout: 250 seconds)
[01:00:42] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 260 seconds)
[01:04:18] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:04:19] <robod34> @ PJBoy, please help me
[01:05:33] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[01:06:21] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[01:06:47] *** Quits: proller (~p@2a02:6b8:b081:7205::1:2d) (Ping timeout: 268 seconds)
[01:09:19] *** Joins: proller (~p@80.240.216.69)
[01:12:02] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:16:34] *** Quits: JeffH (~harrisja@174-16-133-53.hlrn.qwest.net) (Quit: Konversation terminated!)
[01:18:05] *** Quits: sysctl (~sysctl@88.215.77.255) (Remote host closed the connection)
[01:18:41] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 245 seconds)
[01:19:05] *** Joins: proller (~p@2a02:6b8:b081:8020::1:39)
[01:20:05] *** Quits: Simplar (~quassel@188.163.92.225) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:20:49] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Quit: Leaving)
[01:21:03] *** Quits: magla (~gelignite@55d4b9e2.access.ecotel.net) (Quit: Stay safe!)
[01:23:31] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:33:08] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:35:23] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:208a:4e08:1f28:2ca1) (Ping timeout: 250 seconds)
[01:38:10] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:208a:4e08:1f28:2ca1)
[01:38:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:38:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:38:44] *** ChanServ sets mode: +v npaperbot
[01:40:13] *** Joins: Cyp_ (~cyp@213.237.85.9)
[01:40:28] <hnOsmium0001[m]> today I learned resharper has an extension system of its own
[01:40:47] <hnOsmium0001[m]> plugins of plugins...
[01:43:51] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Ping timeout: 250 seconds)
[01:46:39] <LordKalma> resharper is just JetBrain's engine lifted from their IDE into VS
[01:46:47] *** Joins: markong (~kvirc@213.146.188.203)
[01:56:19] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[02:04:52] *** Quits: Leone (~Leo@216.154.50.172) (Read error: Connection reset by peer)
[02:09:25] <very_sneaky> LordKalma, PJBoy: Kubernetes is orchestration software. It fills the same niche as docker compose but seems to have obtained the critical mass of market share to have "won" the war. Basically, if you have a microservices architecture it allows you to load balance nodes that perform the same function and horizontally scale up/down on an as needed basis
[02:10:24] <very_sneaky> or if you have a loosely coupled architecture you can upgrade/replace/maintain individual components of your architecture in isolation
[02:12:25] <johnny> not many people actually NEED microservices though
[02:12:40] <very_sneaky> agree. it fits the web mould pretty well though
[02:12:42] <johnny> very_sneaky, you ever read https://circleci.com/blog/its-the-future/
[02:12:50] <very_sneaky> which i guess is why it gained popularity
[02:13:06] <johnny> it gained popularity because doing what google does is "cool"
[02:13:19] <very_sneaky> yeah i have read that lol
[02:13:34] <very_sneaky> it straw mans the arguments for containers a bit though
[02:13:39] <johnny> it's like owning a f-150 for city driving.. totally unnecessary
[02:13:56] <very_sneaky> nah disagree, it is actually useful in the web space
[02:13:58] <johnny> it's actually worse than that though, but ican't hink if a better car
[02:14:08] <johnny> it's useful in the webspace, ONLY IF YOU SCALE
[02:14:09] <very_sneaky> where you have dynamic user loads and easily separable components
[02:14:12] <johnny> and most people don't need that scale
[02:14:17] <johnny> 99% of people do not need it
[02:14:21] <very_sneaky> sure. "big" web then
[02:14:26] <johnny> yeah, and that's almost nobody
[02:14:32] <very_sneaky> well, even middle web
[02:14:44] <johnny> you'd do way better and have it way easier to scale the way other folks do
[02:14:49] <very_sneaky> government census websites, services websites
[02:15:02] <very_sneaky> which is?
[02:15:28] <johnny> well a census website is mostly readonly, so.. you generate the data and serve it with a static webserver
[02:15:42] <johnny> and you can just round robin dns
[02:15:44] <johnny> or whatever
[02:15:50] <very_sneaky> in my country we've had numerous instances of government websites crashing due to user load
[02:15:51] <johnny> you won't need to many
[02:16:03] <very_sneaky> then subsequent ignorant claims of a "ddos" attack
[02:16:18] <johnny> sure, but do you know the architecture they use? it could just be some SQL queries you need to optimize, and static data not being served when it should be
[02:16:30] <johnny> like i've done stuff that's not static that could have been just because it was easier
[02:16:34] <very_sneaky> sure, maybe.
[02:16:37] <johnny> but if it ever became a problem i could pregen it
[02:16:52] <very_sneaky> i think you've taken that article a little too much to heart though :P
[02:17:03] <johnny> no , i haven't.. i'm actually a web dev first over a C++ person
[02:17:04] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[02:17:07] <very_sneaky> i'm not saying buy into all the hype, but it certainly is useful in some use cases
[02:17:09] <johnny> i don't even like heroku for example
[02:17:27] <johnny> the article is some fun hyperbole to make fun of a trend at the time
[02:17:44] <johnny> that's all it is.. it's not meant to be taken completely seriously
[02:20:30] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[02:21:33] <johnny> most of microservices hype are just from bored devs trying to spice up their life :)
[02:24:41] <comrad> i do webstuff on c++
[02:27:35] <PJBoy> very_sneaky, thanks that was a helpful description
[02:28:06] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[02:28:11] <PJBoy> starting to get a grip on this new fangled tech
[02:33:25] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[02:38:38] *** Quits: KillAnimals (~anon@208.98.223.9) (Ping timeout: 256 seconds)
[02:40:05] *** Joins: Skyfire (~pyon@user/pyon)
[02:45:18] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: relaxed atomics nightmares)
[02:47:26] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:47:41] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[02:52:04] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[02:52:42] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[02:54:13] *** Quits: NyB (~archon@2a02:169:1d9::1:0:0) (Remote host closed the connection)
[02:57:08] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 260 seconds)
[03:00:57] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[03:08:34] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Remote host closed the connection)
[03:10:47] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[03:15:17] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Ping timeout: 250 seconds)
[03:16:43] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:208a:4e08:1f28:2ca1) (Read error: Connection reset by peer)
[03:17:22] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:20:56] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[03:21:50] *** Joins: X-Scale` (~ARM@31.22.203.240)
[03:23:31] *** X-Scale` is now known as X-Scale
[03:24:45] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a5fe:ecf9:b47d:1d85)
[03:28:49] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[03:51:37] *** Joins: johnny (~johnny@user/johnny)
[03:57:00] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:79f8:8470:8aa2:c43a) (Ping timeout: 268 seconds)
[04:03:14] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:03:38] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[04:08:00] *** Joins: Skyfire (~pyon@user/pyon)
[04:10:07] *** Joins: msk_ (~msk@185.124.240.168)
[04:12:29] *** Quits: msk_ (~msk@185.124.240.168) (Client Quit)
[04:15:34] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:15:42] *** Quits: AmR (~AmREiSa@102.47.62.197) (Quit: Konversation terminated!)
[04:19:48] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[04:22:41] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[04:24:38] *** Joins: KillAnimals (~anon@208.98.223.9)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:46:03] *** Quits: KillAnimals (~anon@208.98.223.9) (Ping timeout: 250 seconds)
[04:47:29] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[04:48:01] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[05:10:21] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a5fe:ecf9:b47d:1d85) (Ping timeout: 245 seconds)
[05:14:14] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a5fe:ecf9:b47d:1d85)
[05:16:37] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 250 seconds)
[05:18:32] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[05:19:14] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[05:24:02] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[05:29:09] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[05:32:45] *** Joins: skapata (~Skapata@user/skapata)
[05:34:11] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:34:55] <smallville7123> could i use lambda to register function callbacks for multiple objects? similar to the C atExit function
[05:35:57] <smallville7123> something like globalObject->registerDestructor(this, &MyObjClass::~MyObjClass);
[05:36:37] <smallville7123> in which when globalObject's destructor runs it would call the destructor for all registered objects
[05:38:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:38:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:38:43] *** ChanServ sets mode: +v npaperbot
[05:40:31] <smallville7123> could i use a lambda instead?
[05:47:26] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[05:48:16] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[05:49:24] *** Joins: malloy (~jimery@116.30.222.115)
[06:01:59] <smallville7123> im just gonna use a dedicated class instead
[06:02:43] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[06:11:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:dd19:17d3:b6e0:9c0f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:26:51] *** Quits: causative (~halberd@user/causative) (Quit: may the truth move you)
[06:27:57] *** Joins: causative (~halberd@user/causative)
[06:44:06] *** Joins: frost (~frost@user/frost)
[06:55:28] *** Joins: guest (~user@c-73-77-216-3.hsd1.tx.comcast.net)
[06:56:04] *** Quits: guest (~user@c-73-77-216-3.hsd1.tx.comcast.net) (Remote host closed the connection)
[07:23:30] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[07:29:04] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:30:25] *** Quits: KombuchaKip (~kip@192.252.230.5) (Read error: Connection reset by peer)
[07:30:47] *** Joins: KombuchaKip (~kip@192.252.230.5)
[07:31:09] <KombuchaKip> I have a lambda that is invoked via for_each(std::execution::par, start, end, my_lambda); The my_lambda is resource intensive and I'd like to ensure that the STL's thread scheduling algorithm never has anymore than N threads of my_lambda (perhaps hardware_concurrency() value, but will experiment). What is the right way to do this with C++17? I see there is a std::counting_semaphore, but that's not available in C++17.
[07:42:54] *** Joins: ferdna (~ferdna@user/ferdna)
[07:49:25] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:03:39] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[08:04:31] <Raziel> KombuchaKip, I don't think there is any good straight-forward way within std. You'd have to implement your own thread pool and executor, or use a more capable library, like taskflow or such
[08:04:50] * KombuchaKip nods
[08:06:41] <Raziel> now, my turn: is this a dumb way of turning switch-case into something closer to pure data? https://wandbox.org/permlink/a13KETSeB5fYcjaK
[08:06:50] <Raziel> should I just be using std::functions instead or am I on to something here? lol
[08:08:50] <Raziel> obviously this would only be for pure data returns. basically anything that I'd only be using switch for because map didn't have a "default"
[08:11:02] <Raziel> and yes, I find myself doing that often enough that I thought I needed something like this >_>
[08:17:45] *** Quits: m_tadeu (~quassel@bl5-182-86.dsl.telepac.pt) (Ping timeout: 250 seconds)
[08:18:01] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:39a3:7ca3:e6e3:c6e9)
[08:18:01] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:39a3:7ca3:e6e3:c6e9) (Changing host)
[08:18:01] *** Joins: skapata (~Skapata@user/skapata)
[08:18:15] *** Joins: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt)
[08:22:26] <InPhase> Raziel: You might want to std::move the Map and get rid of the mutable at(), but overall I suppose it's not horrible.
[08:22:51] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Ping timeout: 245 seconds)
[08:23:03] <InPhase> Raziel: I don't know that I'd call it a SwitchMap, although I know where your brain was going there.  Maybe DefaultMap or something.  :)
[08:24:48] <Raziel> InPhase, fair enough :D
[08:24:50] <InPhase> Raziel: As for the mutable at, it is strange to have mutable values but not mutable keys in a map.  Maybe you have a use case, but it just seems more likely to hurt than help.
[08:25:13] <Raziel> Yeah, I don't think I'll ever find much use for mutable at
[08:25:46] <InPhase> testMap.at(2) = "Two"; and suddenly "Two" is the new default.  :)
[08:26:44] <Raziel> if I did want to make it dynamically modifiable to a higher extent, how would I avoid that issue?
[08:27:03] <InPhase> With a completely separate modification function probably.
[08:27:15] <Raziel> fair enuff
[08:27:28] *** Joins: CoderCharmander (~CoderChar@2A001110022624DE00000025E85FEF01.mobile.pool.telekom.hu)
[08:32:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:33:27] <Raziel> I don't need that right now though, sooo I'll leave it as is for now
[08:35:07] *** Quits: proller (~p@2a02:6b8:b081:8020::1:39) (Ping timeout: 268 seconds)
[08:46:26] *** Quits: Atlas667 (~Atlas667@193.27.12.10) (Ping timeout: 260 seconds)
[08:46:50] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[08:48:49] *** Joins: malloy (~jimery@116.30.222.115)
[08:48:58] *** Joins: proller (~p@80.240.216.69)
[08:53:48] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[09:03:43] *** Joins: reumeth (~reumeth@user/reumeth)
[09:10:49] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 250 seconds)
[09:11:02] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[09:38:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:38:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:38:44] *** ChanServ sets mode: +v npaperbot
[09:46:31] *** Joins: txtsd (~txtsd@user/txtsd)
[09:51:14] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:56:54] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:19:08] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a5fe:ecf9:b47d:1d85) (Read error: Connection reset by peer)
[10:20:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a547:2f1c:fe7:baef)
[10:41:18] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:45:28] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[10:49:04] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:56:40] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:10:55] *** Joins: andreasbuhr (~quassel@p549db7c2.dip0.t-ipconnect.de)
[11:10:55] *** Quits: andreasbuhr (~quassel@p549db7c2.dip0.t-ipconnect.de) (Client Quit)
[11:11:41] <LordKalma> so what's up?
[11:12:31] <MaddHatter> debating what options might exist to run two separate python instances within one process
[11:15:49] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:902b:bcbc:c497:537d)
[11:18:31] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a547:2f1c:fe7:baef) (Ping timeout: 268 seconds)
[11:20:05] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:26:13] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:967:ffb5:9e15:e2f5)
[11:48:40] *** Quits: chozorho (~chozorho@2601:146:300:c30::8dd5) (Quit: good night)
[11:54:34] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Ping timeout: 260 seconds)
[11:55:58] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 260 seconds)
[12:02:02] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:967:ffb5:9e15:e2f5) (Quit: Leaving)
[12:02:40] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:23:24] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:24:19] *** Joins: robod34 (Username@79.113.195.239)
[12:33:43] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f990:15e7:361b:c905)
[12:36:04] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[12:37:42] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:44:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:6c3d:a51b:b506:c9ec)
[12:59:27] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[13:02:21] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:04:48] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[13:05:44] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f990:15e7:361b:c905) (Remote host closed the connection)
[13:06:08] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:79f8:8470:8aa2:c43a)
[13:11:47] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:16:38] *** Joins: plastico (~plastico@neomutt/plastico)
[13:27:03] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:6c3d:a51b:b506:c9ec) (Quit: Leaving)
[13:38:37] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:38:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:38:44] *** ChanServ sets mode: +v npaperbot
[13:40:02] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:40:10] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[13:48:22] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:55:45] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[13:55:50] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[14:00:34] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3987:c0f2:111d:dc0c)
[14:00:51] <Haohmaru> does anyone happen to know a pastebin-like site for temporary things, which can visualize as asciidoc or at least gitlab-like markdown?
[14:05:21] *** Quits: tinloaf (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1) (Ping timeout: 245 seconds)
[14:05:37] <PJBoy> https://bpa.st does markdown
[14:06:06] <Haohmaru> i found paste.ee and giving it a try now
[14:06:19] <Haohmaru> no asciidoc preview while writing the text tho
[14:06:32] <Haohmaru> (but that's not a deal breaker)
[14:15:37] *** Joins: frost (~frost@user/frost)
[14:20:04] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[14:20:55] *** Joins: tinloaf (~tinloaf@virt-no01.mrvm.net)
[14:22:29] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6195)
[14:22:29] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6195) (Client Quit)
[14:22:55] *** Joins: malloy (~jimery@116.30.222.115)
[14:33:22] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:35:51] *** Quits: CoderCharmander (~CoderChar@2A001110022624DE00000025E85FEF01.mobile.pool.telekom.hu) (Ping timeout: 268 seconds)
[14:37:55] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[14:41:21] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[14:41:27] *** Quits: tinloaf (~tinloaf@virt-no01.mrvm.net) (Ping timeout: 250 seconds)
[14:42:01] *** Quits: jehelset (~jeh@ti0005q162-7332.bb.online.no) (Ping timeout: 245 seconds)
[14:42:56] <Haohmaru> paste.ee was a lie
[14:44:06] <mort> hmm I should consider adding some markdown rendering support to my pastebin
[14:44:25] <Haohmaru> asciidoc is moar rich
[14:44:41] <mort> nobody uses asciidoc
[14:44:52] <Haohmaru> >:/
[14:44:56] <LordKalma> ReST > others
[14:46:30] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[14:58:08] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[15:02:47] *** Joins: markong (~kvirc@213.146.188.203)
[15:09:08] <Haohmaru> PJBoy does that just syntax-highlight the markdown or does it run it thru markdown->html?
[15:09:19] <PJBoy> just syntax highlight
[15:09:25] <Haohmaru> >:/
[15:09:30] <Haohmaru> that's not what i wanted
[15:09:34] <PJBoy> my b
[15:09:52] <PJBoy> gist probably does markdown rendering
[15:10:02] <Haohmaru> what's that?
[15:10:15] <PJBoy> the github paste website
[15:10:59] <PJBoy> https://gist.github.com/
[15:11:17] <PJBoy> I guess you need an account tho
[15:11:33] <Haohmaru> aww, f*ck that then
[15:12:00] <Haohmaru> okay, i'll leave it for tomorrow
[15:12:03] <PJBoy> although their rest interface doesn't require login
[15:12:33] <PJBoy> weird
[15:12:51] <Haohmaru> i have an account at home (and i intend to remove it), but if i'm at home i could just splosh an .html on my server
[15:18:28] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[15:18:48] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[15:18:48] *** Joins: jkl1337 (~jkl@user/jkl)
[15:18:49] *** Joins: h4x0riz3d (~pewpew@imightbe.antonsavov.net)
[15:18:55] *** Joins: celphi_ (sid97751@user/celphi)
[15:19:05] <very_sneaky> LordKalma: i do like rst, especially for doco, but md is nice for quick notes/comments. I'd hate to be replying to a github comment writing it in rst
[15:20:08] *** Server sets mode: +Fcnt 
[15:20:54] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Killed (strontium.libera.chat (Nickname regained by services)))
[15:20:54] *** uramhoaH is now known as Haohmaru
[15:21:00] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[15:21:02] *** Joins: eck_ (~root@user/eck)
[15:21:05] *** Joins: ethoxy_ (~caretaker@cx21.havox.ru)
[15:21:10] *** Joins: BluesBoy_ (~bboy@stotz2.com)
[15:21:19] *** Joins: cq-work (~Z_Lund@user/cq-work)
[15:21:22] *** Joins: barix_ (~barix@user/barix)
[15:21:32] *** Joins: mgot_ (~mgot@vps-35cddd71.vps.ovh.net)
[15:21:35] *** Joins: Adrinael_ (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi)
[15:21:59] *** Quits: BluesBoy_ (~bboy@stotz2.com) (Client Quit)
[15:22:23] *** Joins: cbreak_ (~cbreak@77-58-201-132.dclient.hispeed.ch)
[15:22:44] *** Joins: m42e (~m42e@pb42.de)
[15:24:29] *** Joins: Kebianiz` (~Kebianiza@188.127.164.127)
[15:25:31] *** Joins: HeTo_ (henkka@beer.modeemi.fi)
[15:25:46] *** Quits: smeso (~smeso@user/smeso) (Killed (NickServ (GHOST command used by smeso_)))
[15:25:47] *** Joins: smeso (~smeso@user/smeso)
[15:25:59] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: celphi (sid97751@user/celphi) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: eck (~root@user/eck) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: X-Scale (~ARM@31.22.203.240) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: cq-work_ (~Z_Lund@user/cq-work) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: Kebianizao (~Kebianiza@188.127.164.127) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: BluesBoy (~bboy@user/bluesboy) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: mabi (~m42e@pb42.de) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: barix (~barix@user/barix) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: HeTo (henkka@beer.modeemi.fi) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: francis (francis@user/francis) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: ethoxy (~caretaker@cx21.havox.ru) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: amosbird (~amosbird@13.75.119.182) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: Moult (~sevenstro@sevenstrokes.net) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: Fairy97 (~Fairy@ti0004a400-3806.bb.online.no) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: CalamityBlue (~CalamityB@cpe-108-185-144-94.socal.res.rr.com) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: WeblordPepe (~pepe@104.248.83.14) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: Dragoon (~Dragoon@user/dragoon) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: greenbagels (~gb@user/greenbagels) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: antto (~pewpew@imightbe.antonsavov.net) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: Alipha (~AliphaX@user/alipha) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: jkl (~jkl@user/jkl) (Ping timeout: 260 seconds)
[15:26:01] *** flynn8 is now known as flynn
[15:26:02] *** Joins: tinloaf (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1)
[15:26:06] *** X-Scale` is now known as X-Scale
[15:26:17] *** Joins: WeblordPepe (~pepe@104.248.83.14)
[15:26:31] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[15:26:37] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[15:27:51] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:29:01] *** HeTo_ is now known as HeTo
[15:30:27] *** Adrinael_ is now known as Adrinael
[15:31:42] *** Joins: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com)
[15:31:43] *** Joins: Moult (~sevenstro@sevenstrokes.net)
[15:31:52] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[15:32:22] *** Joins: Dragoon (~Dragoon@user/dragoon)
[15:32:58] *** Joins: Alipha (~AliphaX@user/alipha)
[15:33:00] *** Joins: greenbagels (~gb@user/greenbagels)
[15:34:37] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:36:26] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[15:42:01] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 245 seconds)
[15:42:54] *** Quits: KillAnimals (~anon@208.98.223.96) (Ping timeout: 256 seconds)
[15:46:26] <smallville7123> hmmm
[15:46:58] <smallville7123> i have a bit of a problem with RAII
[15:47:45] <smallville7123> how can i make it such that i can define a virtual callback to be executed at destruction?
[15:48:17] <smallville7123> i am not sure if using a lambda would work with inheritence
[15:48:20] <PJBoy> there's several reasons that's a bad idea
[15:48:32] <smallville7123> yea
[15:49:40] <smallville7123> basically i have a Context class that objects can attach themselves to
[15:50:15] <smallville7123> and i have a detachFromContext function that detaches the object from it's context
[15:50:56] <smallville7123> this function is automatically called when the object is destructed and detachFromContext is a non-virtual function
[15:51:52] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[15:51:58] <smallville7123> but the problem with this is that i do not have a simply way to use this in the case of object ownership, where the object can own other objects that attach to context's
[15:52:06] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[15:53:09] <smallville7123> eg     class ObjectA : ContextAttacher {};       class ObjectB : ContextAttacher { ObjectA ownedObj; }
[15:53:20] <PJBoy> this context thing sounds crazy
[15:53:37] <mort> PJBoy: oh, my pastebin highlights markdown
[15:53:37] <PJBoy> why do objects and subobjects both need to attach to it
[15:53:47] <mort> that's at https://p.mort.coffee
[15:54:25] <PJBoy> cool
[15:54:25] <smallville7123> ObjectA can be owned by (moved to) ObjectB however when ObjectB wants to detach from it's context then any object's it owns should also get detached as well
[15:55:24] <smallville7123> eg ObjectA should also be detached from the context that ObjectB is attached to when ObjectB is detached from the context
[15:55:57] <mort> https://p.mort.coffee/jRI.md here's my language's readme for example
[15:56:09] <smallville7123> the problem here is the detachment function cannot be virtual as the object needs to automatically detach once it's lifetime ends
[15:58:31] <PJBoy> I would maybe find a way of specifying that the ObjectA is dependent on Object B to the context
[15:58:38] <mort> and even though it does highlight when viewed in a browser, if you `curl https://p.mort.coffee/jRI.md` or view it with a UA which doesn't advertise HTML support, it'll show the plaintext rather than the highlighted HTML
[15:58:41] <PJBoy> and have the context manage detaching dependencies
[15:58:45] <mort> I thought that was neat and not something you see in pastebins that often
[15:59:01] <smallville7123> the problem is this for some reason does not happen (trying to figure out why atm)
[16:00:25] <mort> smallville7123: do you have a test case type thing somewhere? Or some code which doesn't do what you expect which we could look at
[16:01:23] <smallville7123> hmm it seems to call the move assignment operator
[16:01:54] <smallville7123> which calls the move assignment for the ContextAttacher class
[16:05:19] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[16:05:42] <smallville7123> so in the move constructor i would need to move the context attachment from the old context to the new context, right?
[16:05:57] *** Joins: Leone (~Leo@216.154.50.172)
[16:06:29] <mort> some example code which demonstrates your problem would really help here
[16:09:07] <smallville7123> if a ContextAttacher attaches and detaches to the context be registering and deregistering callbacks with `this` instance, if the ContextAttacher is moved would the callback need to be transfered from the old instance to the new instance?
[16:09:12] <smallville7123> by*
[16:11:44] <smallville7123> eg     if (old.context != nullptr) { old.context->removeDestructor(&old); old.context->addDestructor(this); }
[16:12:54] <Svitkona> i unedrstand a lot of those words
[16:14:39] *** Joins: Simplar (~Simplar@188.163.92.225)
[16:15:43] *** Joins: CoderCharmander (~CoderChar@254C708F.nat.pool.telekom.hu)
[16:16:50] <Simplar> One thing I want to ask about is, what's the best STL container storing a never changing list of chars, and is only used in code to compare whether the given char is in that list or not?
[16:17:12] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[16:18:12] *** Joins: BluesBoy (~bboy@user/bluesboy)
[16:22:01] <mort> a good old C-style array would work there, no?
[16:22:49] <mort> or, if you want faster lookup, you could use a table where you have an 'unsigned char table[256] = {0}' and then set table['A'] = 1, table['B'] = 0, etc
[16:23:05] <mort> that way, to check whether a char x is in the table, you can check table[x]
[16:23:37] <Simplar> unsigned char bracket_list = {'(',')','[',']','<','>'} ?
[16:24:00] <Simplar> oh. I get your idea.
[16:24:20] * smallville7123 gets stuck inside of printf and does not know how to step outside in lldb
[16:24:27] <mort> if you only have a few characters then a 256-byte long table probably isn't necessary, I would probably do something more like what you pasted ye
[16:24:48] <mort> unsigned char brackets[] = {'(', ')', '[', ']', '<', '>'}
[16:25:00] <mort> or char rather than unsigned char probably
[16:25:16] *** Quits: CoderCharmander (~CoderChar@254C708F.nat.pool.telekom.hu) (Remote host closed the connection)
[16:25:21] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[16:25:43] <mort> the 256-byte long table would be more if you need faster lookup than what you can get with a linear search, but a linear search of 6 options shouldn't be a problem
[16:25:52] <PJBoy> smallville7123, it's `finish` to step out in gdb/lldb
[16:26:02] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[16:26:04] <smallville7123> PJBoy: thanks :)
[16:26:23] <mort> I have so many stupid ideas for how you could do this extremely efficiently but unreadably
[16:26:46] <PJBoy> also I second that lookup table
[16:27:40] <mort> instead of using 256 bytes for it, you could be more cache friendly by having 256 bits and saying that each bit represents a character, like ascii 0 is bit (1 << 0), ascii 1 is bit (1 << 1), etc
[16:29:19] <mort> but this is all stupid, just use the array of 6 chars and the loop which checks each option, until you find out that your loop actually takes measurable time, at which point you can start optimizing
[16:30:10] <PJBoy> nah I like this other idea now that you've mentioned it
[16:30:12] <PJBoy> :p
[16:30:52] <mort> huh
[16:30:53] <mort> shit
[16:30:58] <mort> this is a perfect case for vector<bool>
[16:30:59] <mort> xP
[16:31:13] <mort> nah it's better with that static length bitset type
[16:32:50] <PJBoy> d'oh, bitset isn't constexpr
[16:33:04] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[16:33:19] <mort> ok I think this would actually be pretty readable: std::bitset<256> brackets; brackets['('] = brackets[')'] = brackets['{'] = brackets['}'] = brackets['<'] = brackets['>'] = true;
[16:33:23] <mort> then check x with brackets[x]
[16:33:26] <LordKalma> The c++ standard should add a clause to add constexpr to literally everything
[16:33:29] <PJBoy> yeah that's what I was thinking
[16:33:33] <PJBoy> but its operator[] isn't constexpr
[16:33:48] <LordKalma> and consteval to everywhere possible :p
[16:33:52] <PJBoy> or any other member function
[16:33:54] <mort> simplar might not need it to be constexpr
[16:34:06] <PJBoy> oh true
[16:34:07] <mort> ..but it totally should be, I agree
[16:34:10] <PJBoy> constexpr is completely optional
[16:34:44] <Simplar> I'm writing some code XD
[16:34:51] <PJBoy> << bracket_truth['('], bracket_truth[']'], bracket_truth['x']; bitset<256> bracket_truth = [] { bitset<256> t; for (unsigned char c : "()[]{}"sv) t.set(c); return t; }();
[16:34:52] <geordi> true, true, false
[16:34:52] <LordKalma> good
[16:35:20] <Simplar> comparison of integer expressions of different signedness: 'int' and 'std::__cxx11::basic_string<char>::size_type'
[16:35:22] <Simplar> I mean, what?
[16:35:39] <PJBoy> you know it would actually take less time to write a constexpr bitset than to propose adding constexpr to std::bitset
[16:35:46] <Simplar> I have string input_string; cin >> input_string;  for(int i = 0; i < input_string.length(); i++) { ...
[16:35:47] <mort> you're comparing a string size with an int
[16:35:51] <PJBoy> yeah don't compare ints to size_t
[16:35:59] <PJBoy> use size_t for your loop variable
[16:36:05] <Simplar> size_t i = 0?
[16:36:08] <PJBoy> yeah
[16:36:18] <PJBoy> then your i and input_string.length() int types match
[16:36:21] <mort> 'int' is 32 bits, it can hold up to like 2 billion
[16:36:30] <mort> a string can hold more than 2 billion characters
[16:36:45] <Simplar> Wowza
[16:36:45] <mort> so if you iterate from i=0 while i<str.size() you may have a loop where i wraps around
[16:36:51] <mort> that's what your compiler is warning you about
[16:36:52] <Simplar> Gotcha
[16:36:59] <LordKalma> {for(int i{0}; i<bananas.length(); ++i);} string bananas{"bananas"};
[16:36:59] <geordi> warning: comparison of integer expressions of different signedness: 'int' and 'string::size_type' {aka 'long unsigned int'}
[16:37:04] <LordKalma> {for(size_t i{0}; i<bananas.length(); ++i);} string bananas{"bananas"};
[16:37:05] <geordi>  
[16:37:09] <Simplar> https://wandbox.org/permlink/sNkOmeJjSrrs5Syp why does it not print out any founds if there are brackets in stdin?
[16:37:17] <Simplar> I literally only try to find it in the char array
[16:37:36] <LordKalma> protip
[16:37:38] <mort> does operator>> split on whitespace or on newline
[16:37:42] <LordKalma> use <algorithm> ;)
[16:37:45] <LordKalma> std::find
[16:37:47] <mort> I never ever ever read using iostream :p
[16:37:50] <PJBoy> read the code LordKalma
[16:37:50] <LordKalma> mort, new line iirc
[16:37:56] <mort> ah
[16:38:06] <LordKalma> PJBoy, find inside for?
[16:38:07] <LordKalma> wuut
[16:38:16] <mort> Simplar
[16:38:22] <PJBoy> yeah
[16:38:29] <PJBoy> he's searching an array for each character
[16:38:34] <mort> nvm
[16:38:38] <PJBoy> find_first_of would be better here
[16:38:40] <Simplar> Find inside for? Why not? I'm searching if a current char of a string is a bracket
[16:38:42] <PJBoy> but point is he is using algorithm
[16:38:49] <Simplar> oh wait hey
[16:38:53] <Simplar> maybe i can use ints to compare
[16:38:57] <LordKalma> PJBoy, so the first for should be over bracket_list no?
[16:39:23] <PJBoy> either way works I guess
[16:39:25] <mort> I don't see the problem with that code
[16:39:29] <mort> std::find should work
[16:39:31] <LordKalma> I guess I guess
[16:39:32] <LordKalma> anyway
[16:39:35] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:39:55] <LordKalma> again, why does Wandbox has such a shit layout? designed to see code, has a textbox with 10 lines
[16:39:57] *** Joins: proller (~p@2a02:6b8:0:40c:de3:c8d7:d23e:2473)
[16:40:06] <PJBoy> the issue is the input
[16:40:13] <mort> OH
[16:40:15] <PJBoy> cin reads in "a"
[16:40:18] <PJBoy> and that's it
[16:40:22] <mort> Simplar you have to loop while i < input_string.size()
[16:40:28] <mort> what even is .length() of a string?
[16:40:33] <Simplar> 40,41,60,62,91,93,123,125
[16:40:33] <PJBoy> same as size()
[16:40:36] <mort> oh
[16:40:39] <mort> then it should work..
[16:40:41] <LordKalma> PJBoy, I though it was on new line
[16:40:42] <Simplar> i just looked up every single bracket in ascii table XD
[16:40:48] <PJBoy> nah that's getline
[16:40:52] <PJBoy> cin always stops on whitespace
[16:40:59] <PJBoy> cin operator>> that is
[16:41:02] <mort> ah
[16:41:10] <Simplar> PJBoy: I always thought it reads whole line, lol!
[16:41:12] <mort> that's why I asked, I knew iostreams can't be trusted
[16:41:19] <PJBoy> https://wandbox.org/permlink/eqYPOUXAcZYwqXYm
[16:41:31] <LordKalma> well, Simplar, in that case you can wrap the code in "while(/* soemthing about std::cin having something left to read */)")
[16:41:48] <mort> I would probably read char by char from the stream
[16:41:51] <Simplar> wait so i may not even need the string?
[16:41:51] <mort> but that's slow probably
[16:41:54] <mort> tbh
[16:41:59] <PJBoy> if you don't need the input string for anything else, sure
[16:42:00] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[16:42:07] <Simplar> let me check the task again
[16:42:11] <Simplar> i'm practicing using stacks
[16:42:14] <mort> I would write my own I/O abstraction and build a buffered I/O abstraction on top of that and use my buffered I/O thing
[16:42:15] <PJBoy> I would do getline regardless myself
[16:42:16] <mort> and read char by char
[16:42:21] <mort> but that's me
[16:42:25] <LordKalma> bracket matching using a stack?
[16:42:28] <LordKalma> that's a classic
[16:43:22] *** Joins: luizfrds (~Luiz@152.250.243.147)
[16:43:24] <LordKalma> find an opening bracket, push into the stack. Find a closing bracket, check if it matches to the one in stack.head(), if yes, pop the stack.
[16:43:30] <LordKalma> if no, tell the user he'd a dumb fuck
[16:43:36] <LordKalma> he's
[16:43:44] <mort> I have a place in my lexer where I need to do that to keep track of whether I'm in parens or braces
[16:43:44] <PJBoy> and then blow up on 10k line files
[16:44:09] <PJBoy> did you ever see that VS Code blog post where they were talking about bracket matching?
[16:44:10] <mort> haven't written it yet so currently my language is slightly broken
[16:44:17] <LordKalma> I skimmed trough it
[16:44:25] <mort> I remember reading about it, don't think I read it
[16:44:54] <PJBoy> tldr is they use an actual algorithm that supports the better supports the idea of updating those matching bracket sets
[16:45:07] <PJBoy> *tldr is they use an actual algorithm that better supports the idea of updating those matching bracket sets
[16:45:47] <PJBoy> I was personally surprised that naive algorithm was so poorly performing
[16:45:55] <LordKalma> it's cool because I used the bracking colouring extension which went out of support
[16:46:00] <LordKalma> and MS picked it as a core feature now
[16:46:02] <LordKalma> with that new algo
[16:46:16] <mort> what was their algorithm tl;dr? Just the stack-based one kalma described?
[16:46:25] <LordKalma> anyhow, the stack bracket matching is just the classic academic example
[16:47:07] <LordKalma> https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization
[16:47:12] <LordKalma> "10,000x faster"
[16:47:45] <mort> probably more like "we turned it from O(n^2) to O(n log n) and for some values of n that's a big change"
[16:48:03] <PJBoy> I didn't look into the algorithm in detail either
[16:48:07] <mort> it's a weird thing people do with describing a complexity reduction as a fixed speed increase
[16:48:19] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:48:23] <LordKalma> "we could use (2,3)-trees, recursion-free tree-traversal, bit-arithmetic, incremental parsing, and other techniques"
[16:48:44] <LordKalma> rom O(N+E)\mathcal{O}(N + E)O(N+E) to O(log3N+E)\mathcal{O}(\mathrm{log}^3 N + E)O(log3N+E) with NNN being the document size and EEE the edit size, assuming the nesting level of bracket pairs is bounded by O(logN)\mathcal{O}(\mathrm{log} N)O(logN).
[16:48:50] <PJBoy> not every day you see log^3 in a complexity
[16:48:56] <LordKalma> hahah indeed
[16:49:15] <LordKalma> https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization#_algorithmic-complexities
[16:49:23] <mort> one thing I wish C++ did better is arrays with elements <8 bits big
[16:49:36] <LordKalma> vector<bool> :D
[16:49:55] <mort> vector<bool> works if you happen to need one bit per element
[16:50:02] <LordKalma> this article is huge
[16:50:05] <mort> but sometimes you have to represent a stack of tristates
[16:50:45] <mort> and your options are using vector<char> and waste 6 bits per element or writing your own custom weird thing
[16:51:25] <Simplar> > bracket matching using a stack?
[16:51:31] <Simplar> yes LordKalma
[16:51:39] <Simplar> I had an idea how to do it
[16:51:41] <LordKalma> hahah classical
[16:51:49] <Simplar> just no idea how to efficiently record brackets
[16:51:50] <PJBoy> in my dissertation project, we had to implement an algorithm with time complexity O(log^4(m) / d^2)
[16:52:05] <LordKalma> Simplar, std::queue<char>
[16:52:05] <Simplar> PJBoy: why so exact complexity? o.o
[16:52:26] <PJBoy> actually
[16:52:32] <mort> shouldn't you simplify that expression somehow when talking about big-O
[16:52:34] <PJBoy> O(log^5(m) / d^2)
[16:52:47] <mort> what's d
[16:53:01] <PJBoy> and that was the day I found out that taking the log of a number doesn't make it trivially small :D
[16:53:23] <mort> does log^4(m)  == log(m)^4
[16:53:24] <PJBoy> d there is an approximation constant
[16:53:28] <PJBoy> yeah
[16:53:40] <smallville7123> https://gist.github.com/mgood7123/a53beba7f5eeb350b3e463df146179a3 :)
[16:53:41] <PJBoy> this was for approximate string matching
[16:53:46] <LordKalma> log is indefinitely crescent
[16:53:51] <LordKalma> just the slowest one to
[16:53:57] <mort> if it's a constant I think you'd want to simplify it to O(log(m)^4)
[16:54:23] <PJBoy> we care about how the complexity changes with d
[16:54:45] <mort> certainly
[16:54:47] <PJBoy> it's really complicated
[16:54:55] <mort> it just doesn't feel right to include it when doing "proper" big-O?
[16:54:57] <PJBoy> but suffice to say this was just a small component of the paper I was reading
[16:55:31] <PJBoy> well the algorithm is specified with that d parameter
[16:55:37] <mort> this is probably a case where regardless of whether I'm "correct" it's more useful to include the /d^2
[16:55:45] <mort> hmm I suppose
[16:56:04] <mort> we do say O(m*n) even when m is more of a tunable parameter and not input so you're probably right
[16:56:09] <PJBoy> like if you do naive string matching, you have match(P, T) in O(m n) time
[16:56:10] <PJBoy> yeah
[16:56:36] <PJBoy> and in approximate string matching you have match(P, T, d)
[16:56:36] * smallville7123 is getting duplicate callbacks (which are ignored when adding) but does not seem to cause a crash so ignores
[16:57:01] <LordKalma> famous last words
[16:57:15] <mort> the worst bugs are those which don't cause a crash
[16:57:20] <PJBoy> there n is missing from the time complexity because this is just a preprocessing phase
[16:57:57] <PJBoy> there's a log^6 in this paper too
[16:58:08] <Simplar> Hey guys, I wanted to ask if Knuth's The Art of Computer Programming is worth a read
[16:58:24] <PJBoy> if you're mathematically oriented, sure
[16:58:31] <Simplar> Well, I kinda am
[16:58:32] <PJBoy> otherwise, ehh
[16:58:55] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3987:c0f2:111d:dc0c) (Ping timeout: 268 seconds)
[16:59:01] <Simplar> for the bracket pairs, I have my own solution
[16:59:11] <Simplar> (I didn't peek in any answers to see whether I am right)
[16:59:20] <LordKalma> if you're supposed to use a stack, there's really only one
[17:01:46] <mort> I hate that the best solution to this problem is to use vector<bool>
[17:01:57] <LordKalma> !grab mort
[17:01:57] <nolyc> LordKalma: The operation succeeded.
[17:02:38] <PJBoy> nah I don't respect vector<bool>
[17:02:51] <PJBoy> what's wrong with bitset?
[17:02:59] <mort> not dynamically sized
[17:03:01] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[17:03:11] <PJBoy> this is for the bracket matching thing right?
[17:03:13] <LordKalma> isn't there a tristate vector on boost?
[17:03:18] <LordKalma> it sounds like a boost thing
[17:03:22] <mort> sorry, I was thinking of a different case
[17:03:28] <mort> I was thinking of the case where you have two kinds of braces
[17:03:28] <LordKalma> PJBoy, mort wanted a vector of tristates, iirc
[17:03:35] <mort> there, vector<bool> is the best solution
[17:03:41] <mort> 1 for {, 0 for (
[17:03:45] <PJBoy> ohh we're thinking about this now
[17:03:47] <PJBoy> ok
[17:03:53] <LordKalma> you can just store vector<char>
[17:03:58] <LordKalma> with the actual char
[17:04:00] <LordKalma> who cares
[17:04:06] <mort> I do :9
[17:04:08] <mort> :( *
[17:04:09] <LordKalma> and support {[(<
[17:04:29] <LordKalma> and support {[(<"'` even
[17:05:24] <smallville7123> https://gist.github.com/mgood7123/6c74bab9d16874d39dfbbb0ca84541ed context attachment and auto-deletion works now, yay :)
[17:05:28] <mort> for my own language, where I'm using C, but only need to keep track of () and {}, I might use a fixed-size bitset? idk
[17:05:30] <LordKalma> and support {[(<"'`| even
[17:05:34] <LordKalma> there's alwayus one more
[17:05:35] <LordKalma> haha :p
[17:05:46] <mort> not supporting arbitrary nesting syntactically is probably a good thing
[17:05:56] <mort> (and I have hard limits in the expression parser anyways to not blow the stack)
[17:06:01] <LordKalma> mort, if this was LaTeX you even have to match \left( with \right)
[17:06:19] <LordKalma> or \Bigg( with \Bigg) :d
[17:06:21] <mort> I'm happy to not be writing a latex parser
[17:06:31] <mort> but this is for a very particular thing
[17:06:37] <LordKalma> parsing latex should be fun
[17:06:44] <LordKalma> the language is cmake-lang levels of insane
[17:06:59] <mort> in the parser, this isn't an issue, the parser can see the ( and enter a state where it expects a )
[17:07:05] <LordKalma> and written mostly in perl for some reason
[17:07:13] <mort> because the parser already inherently does stack-based stuff
[17:07:25] <mort> but I have to know whether to produce EOL tokens on newline or not in my lexer, which isn't stack-based
[17:07:32] <LordKalma> well, a parser given ( can either match ) or receiver any other opening bracker
[17:07:35] <LordKalma> well, a parser given ( can either match ) or receiver any other opening bracket*
[17:07:39] <mort> I want to produce end-of-line tokens most of the time, but not when directly inside of a (...)
[17:07:57] <mort> so I need to introduce a brace stack in the lexer
[17:08:06] <mort> this language's lexer+parser is a complete mess, I love it
[17:08:18] <Simplar> mort: https://wandbox.org/permlink/NDUK6WmbEvTzu2me rate my solution
[17:08:25] <Simplar> I know one way to improve it
[17:08:41] <Simplar> (it prints YES if the string is alright, and NO if the string has unclosed brackets)
[17:09:02] <LordKalma> yes
[17:09:05] <smallville7123> https://gist.github.com/mgood7123/bda6931d1b1d579cc007939c948f24f5 :)
[17:09:06] <mort> Simplar: well, currently you're not matching anything
[17:09:07] <LordKalma> that's the naive algorithm exactly
[17:09:15] <mort> (] is counted as a valid pair
[17:09:31] <LordKalma> ah yes, I didn't even notice that
[17:09:41] <mort> if that's the goal, you should be using a simple counter which increments on [(< and decrements on ])> and verify that it's 0 at the end
[17:10:05] <LordKalma> you can also do it with a more complicated if logic
[17:10:07] <LordKalma> ideally a switch
[17:10:09] <Simplar> mort: how does it count that as a valid pair?
[17:10:23] <Simplar> I only compare specific pairs of brackets
[17:10:29] <mort> wait sorry
[17:10:32] <mort> I misread your code
[17:10:36] <Simplar> ..oh
[17:10:42] <Simplar> I thought you tested it :D
[17:11:00] <LordKalma> `using namespace std;` 0/10
[17:11:11] <smallville7123> mort: Svitkona: PJBoy: thanks for help :)
[17:11:12] <Simplar> X"D
[17:11:14] <LordKalma> <bits/stdc++.h> 0/10
[17:11:32] <Simplar> I know how to include specific libs
[17:11:33] <LordKalma> char bracket_list[] without const[expr] 0/10 :p
[17:12:41] <smallville7123> https://gist.github.com/mgood7123/bda6931d1b1d579cc007939c948f24f5 forgot to paste output as well :)         also got context attachment and semi-RAII working
[17:14:51] <Simplar> LordKalma: I can tell one more thing I can improve tbf
[17:14:52] <mort> it seems like a perfectly good bracket matching thing
[17:14:58] <Simplar> let me code this
[17:15:00] <Simplar> and paste again
[17:15:07] <mort> only thing I would maybe say is, when you meet a closing bracket and the stack is empty, you could already error out
[17:15:14] <LordKalma> ideally you wouldn't have two equal elses
[17:15:31] <mort> currently you push the closing thing to the stack
[17:15:39] <mort> and that happens to work, because there's no way to remove a closing thing from the stack
[17:16:21] <mort> you also don't need the std::find there actually, you already check the char in the ifs, I would probably remove the std::find and add the needed cases to the if
[17:16:57] <mort> btw, is there any advantage to std::stack over std::vector? Is it able to do anything more efficiently somehow due to the lack of random access?
[17:17:09] <PJBoy> no
[17:17:41] <mort> seems weird to have a strictly worse data structure
[17:17:52] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[17:18:16] <PJBoy> it provides a common interface across implementations of std::stack
[17:18:35] <mort> is std::stack not a concrete type?
[17:18:38] <PJBoy> so you can easily swap out vector for deque or whatever they renamed colony too
[17:18:40] <PJBoy> nah it is
[17:18:46] <PJBoy> it takes the container as a template argument
[17:18:55] <mort> h
[17:18:56] <mort> ah*
[17:19:01] <mort> makes sense
[17:19:05] <PJBoy> but you can always change that template argument if it benefits you profiling or whatever
[17:19:07] <mort> so it's more of an adaptor than a container
[17:19:15] <mort> that makes sense
[17:19:23] <PJBoy> yeah stack/queue and literally called container adapters
[17:19:26] <PJBoy> *are
[17:19:41] <PJBoy> and priority_queue
[17:19:56] <Simplar> https://wandbox.org/permlink/RWYrfPHsljUYsfKH mort look at that
[17:21:25] <mort> now nothing will be considered balanced because you're pushing any character, not just brackets
[17:22:22] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:22:42] <Simplar> mort: isn't continue; skipping the whole iteration?
[17:23:23] <mort> oh yes
[17:23:40] <Simplar> that is what I tried to do
[17:23:45] <mort> the push should probably go inside the if then
[17:24:03] <mort> it's saying no even though it shouldn't though, on ()
[17:24:56] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[17:31:03] <Simplar> mort: https://wandbox.org/permlink/ZMAcd33jg3J986yo I am a dirty coder fixing dirty code
[17:31:12] <Simplar> I can make it look geeky in no time
[17:32:40] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[17:32:58] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[17:33:30] <LordKalma> my solution: https://godbolt.org/z/n4EGc3Eqh
[17:35:16] *** Joins: reumeth (~reumeth@user/reumeth)
[17:35:16] <LordKalma> CC mort and Simplar
[17:36:30] <Simplar> LordKalma, this is such a dirty way to use recursion XD
[17:36:38] <LordKalma> who used recursion?
[17:36:42] <LordKalma> definitely not me
[17:36:48] <Simplar> well
[17:36:52] <Simplar> looping the same function
[17:36:54] <LordKalma> global state, yes
[17:37:01] <LordKalma> tgat's not recursion
[17:38:37] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:38:46] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:38:46] *** ChanServ sets mode: +v npaperbot
[17:39:20] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[17:44:04] <whupdup> is there a reason std::vector copy constructs elements when it grows instead of move constructing them?
[17:45:12] <PJBoy> it does move
[17:45:21] <PJBoy> if the value type has a noexcept move ctor
[17:45:37] <whupdup> ah it has to be noexcept
[17:45:45] <LordKalma> btw, just for the fun of it: https://godbolt.org/z/jd6bzqxx1
[17:46:34] <LordKalma> PJBoy, I wrote `std::cout << std::endl;` in there just for you
[17:46:41] <PJBoy> fuck you
[17:47:09] <LordKalma> does C++20 is able to provide views into a stack?
[17:47:11] <LordKalma> it should :p
[17:47:26] <PJBoy> stacks don't expose any kind of iterator access
[17:47:26] <LordKalma> (it doesn't require the underlying container to have .begin() so probably not)
[17:47:40] <PJBoy> or allow for any kind of random access
[17:47:56] <LordKalma> yeah, that print_stack() is just evil
[17:48:55] <whupdup> why even use an std::stack at all then
[17:49:04] <whupdup> std::vector is everything a stack needs to be but better
[17:49:16] <LordKalma> I added print stack after the fact
[17:49:19] <PJBoy> gives you a consistent stack like interface
[17:49:23] <LordKalma> and it was just fooling around :p
[17:49:28] <PJBoy> but you can change the underlying container
[17:50:00] <Simplar> Oh by the way
[17:50:28] <Simplar> I'm going to send you some cringe called 'my self-appointed homework on emulating stacks'
[17:50:56] <LordKalma> Simplar, regardless. Using functions isn't cheating. It's good design
[17:51:06] <Simplar> LordKalma: I was being ironic :)
[17:51:10] <Simplar> I love functions
[17:52:59] <mort> LordKalma: https://godbolt.org/z/5no8rGdch here's one
[17:53:02] <mort> I'm sure you'll love it
[17:53:28] <Simplar> https://wandbox.org/permlink/LCxvNX4smJeET0hs here you go
[17:53:41] <Simplar> it should use a stack to process commands from input
[17:53:53] <Simplar> command '+<number>' adds <number> to stack
[17:54:05] <Simplar> command '-' just pops the top element from a stack
[17:54:06] <LordKalma> what kind of unreadaable gibberish is this shit? mort
[17:54:13] <mort> sorry, that last return was obviously supposed to be 'return stackptr == 0'
[17:54:23] <mort> it's a nice byte processing language
[17:56:52] <mort> I knew you'd like it
[17:57:04] <Simplar> I'm loving it!
[18:01:09] <Simplar> mort: Initially, a stack is empty. Then, line by line, commands from input.txt are executed. To manage stack, two commands are used: '+<number>' pushes <number> to the top of a stack, and '-' removes a number currently residing at the top of a stack. The task is to display the stack's state after execution of these commands. The program should write to output.txt one line: a space-separated list of numbers inside the stack after the commands from
[18:01:09] <Simplar> input.txt are all executed. If a stack is empty, write 'EMPTY' to output.txt. If something went wrong during command execution from input.txt, write 'ERROR' to output.txt.
[18:01:17] <Simplar> Just so you understand the context of my paste
[18:01:50] <Simplar> The trick is, I must print space-separated numbers FROM bottom TO top of a stack
[18:02:01] <Simplar> I don't know whether there is some sort of command making it possible
[18:04:48] <mort> a nice feature with my brace checker is that if you input a string with 4095 (s in a row it starts overwriting whatever is on the stack
[18:13:01] <Simplar> mort: I've noticed
[18:13:11] <Simplar> Because else it will overflow
[18:14:53] <whupdup> is it possible to use realloc with a vector/arraylist and also validly move non-trivially movable objects?
[18:15:41] <Simplar> whupdup: I wonder why would you want that
[18:16:26] <whupdup> isn't realloc potentially more efficient than alloc'ing a new data block for your new vector capacity and freeing the old one?
[18:18:07] *** Joins: Atlas667 (~Atlas667@193.27.12.10)
[18:18:16] <whupdup> though the problem is if realloc returns a ptr that != the old ptr, isn't it UB to read from that old memory and thus call the new objects' move ctors with the old data
[18:18:31] <whupdup> at least that's what I assume
[18:19:24] <whupdup> fundamentally though my assumption is that realloc is potentially more efficient than simply malloc + free for growing a vector
[18:22:32] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Ping timeout: 240 seconds)
[18:24:02] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 268 seconds)
[18:24:51] *** Joins: horribleprogram (~user@user/horribleprogram)
[18:24:59] <horribleprogram> Why would you guys lie to me
[18:25:34] <horribleprogram> https://godbolt.org/z/c68GWroGx
[18:26:04] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[18:27:07] <horribleprogram> the first member, Foo::a is not stored first, but last
[18:27:24] <horribleprogram> notice the movl $5, -8(%rbp)
[18:27:32] <horribleprogram> movl $10, -4(%rbp)
[18:27:46] <horribleprogram> since the stack grows "downwards" it's reversed
[18:29:08] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[18:33:44] <whupdup> http://www.eelis.net/c++draft/c.malloc#lib:realloc
[18:34:00] <whupdup> hmm though actually, I can't see anything specifically wrong with reading the old memory from realloc
[18:34:10] <whupdup> though I guess that's exactly what makes it undefined
[18:34:53] <ville> horribleprogram: first as in lower address
[18:35:15] <horribleprogram> that's actually a good point
[18:36:22] <PJBoy> I think a realloc implementation of vector could work
[18:36:46] <PJBoy> for trivial value types with the standard allocator
[18:37:09] <whupdup> I'm trying to extend it to stuff that isn't trivially movable
[18:37:35] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[18:37:46] <whupdup> I'm sort of under the assumption that so long as I keep reallocations from being interrupted (i.e. keeping them thread safe) there's no harm with reading the old memory from realloc before the function leaves
[18:37:54] <PJBoy> realloc copies the bytes if it moves the data, so it can only be used for trivial types
[18:38:03] <horribleprogram> whupdup: not move assignable or not move constructible... :/
[18:38:22] <whupdup> kinda annoying though
[18:38:47] <PJBoy> you could potentially desire a "can_realloc_in_place" function to see if you can just grow in place
[18:38:58] <PJBoy> and fallback to the usual new + moves + free old memory otherwise
[18:38:59] <whupdup> yeah that'd be nice
[18:39:03] <PJBoy> but then you have TOCTOU errors
[18:39:38] <PJBoy> so you'd need to end up making a "try_realloc_in_place()" function instead
[18:40:33] <PJBoy> but like
[18:40:43] <PJBoy> I think in most situations if that kind of thing ever mattered for your use-case
[18:40:54] <PJBoy> you would have a better solution using reserve() up front
[18:41:06] <PJBoy> realloc is just gonna make performance unpredictable
[18:46:04] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:49:13] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[18:49:47] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: Lost terminal)
[18:52:50] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[18:53:55] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Read error: Connection reset by peer)
[18:54:33] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[18:58:41] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 245 seconds)
[18:59:13] *** Joins: bobb_ (~bobb_@dslb-088-065-184-219.088.065.pools.vodafone-ip.de)
[18:59:40] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[19:00:55] *** Joins: great_taste (~great_tas@190.32.235.20)
[19:09:22] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[19:10:51] <Alipha> PJBoy: or a realloc with a callback if it has to move
[19:11:19] <PJBoy> like resize_and_overwrite?
[19:11:23] <PJBoy> -_-
[19:11:52] *** Joins: markong (~kvirc@213.146.188.203)
[19:12:32] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[19:15:59] <PJBoy> I never realised that T. Canens from cppreference was Tim Song :o
[19:16:24] <bobb_> Has anyone ever tried to compile a cmake projekt inside of a docker container using kdevelop?
[19:18:33] *** eck_ is now known as eck
[19:19:48] *** Joins: jwillikers_ (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[19:23:14] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Ping timeout: 268 seconds)
[19:23:15] *** jwillikers_ is now known as jwillikers
[19:34:19] *** Quits: baltazar (~baltazar@91-82-172-24.pool.digikabel.hu) (Ping timeout: 268 seconds)
[19:34:31] *** Quits: mitch0 (~mitch@91-82-172-24.pool.digikabel.hu) (Ping timeout: 245 seconds)
[19:35:19] *** Joins: magla (~gelignite@55d411d7.access.ecotel.net)
[19:35:39] *** Joins: baltazar (~baltazar@94-21-222-223.pool.digikabel.hu)
[19:36:20] *** Joins: mitch0 (~mitch@94-21-222-223.pool.digikabel.hu)
[19:48:35] <bobb_> is it just me having the feeling that docker isn't widely used in C++ projects?
[19:56:46] *** Joins: Simplar (~Simplar@188.163.92.225)
[19:56:50] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[20:00:17] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[20:03:23] <PJBoy> we use docker for our CI at work
[20:03:31] <PJBoy> but we have a guy for that
[20:04:41] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[20:05:32] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[20:06:21] <bobb_> PJBoy okay, interesting
[20:10:09] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Quit: SureVoIP: http://www.surevoip.co.uk)
[20:12:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:cd5:9ac7:cfa0:7cce)
[20:12:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:cd5:9ac7:cfa0:7cce) (Changing host)
[20:12:25] *** Joins: skapata (~Skapata@user/skapata)
[20:16:21] *** Quits: Atlas667 (~Atlas667@193.27.12.10) (Ping timeout: 265 seconds)
[20:19:05] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[20:19:32] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[20:20:14] <Simplar> Good gracious X"D
[20:20:30] <Simplar> my stack code executed correctly but found a bug in platform's tests
[20:20:41] <Simplar> I've been able to catch errors a platform itself ignored X"D
[20:24:50] *** Joins: thelounge5125 (774efe05@67.205.143.82)
[20:29:08] *** Quits: thelounge5125 (774efe05@67.205.143.82) (Quit: The Lounge - https://thelounge.chat)
[20:30:16] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[20:34:08] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 268 seconds)
[20:34:28] *** Joins: meicceli (meicceli@kapsi.fi)
[20:41:40] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:45:32] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[20:45:32] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[20:50:04] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[20:55:36] *** Joins: meator (~meator@user/meator)
[20:55:55] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Remote host closed the connection)
[21:02:01] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[21:07:36] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[21:11:21] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[21:14:34] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[21:17:00] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[21:17:38] *** Joins: Colt (~Colt@user/colt)
[21:22:04] *** Quits: letto (~letto@86.120.85.133) (Quit: Konversation terminated!)
[21:24:14] *** Joins: letto (~letto@86.120.85.133)
[21:26:00] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[21:29:31] *** Joins: Colt (~Colt@user/colt)
[21:31:26] <LordKalma> !rq
[21:31:27] <nolyc> LordKalma: <anyone> a testcase with a trainer but with no pokemon ain't no good testcase :>
[21:35:14] <PJBoy> eclipse
[21:37:37] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[21:37:59] *** Joins: Colt (~Colt@user/colt)
[21:38:38] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:38:45] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:38:46] *** ChanServ sets mode: +v npaperbot
[21:40:20] <PJBoy> *does* support clangd
[21:40:36] <PJBoy> wow it took me a while, but I think I've got it
[21:42:36] <LordKalma> generic lsp client or real extension?
[21:42:56] <LordKalma> Speaking of
[21:42:57] <LordKalma> https://github.com/microsoft/vscode/issues/137885#issuecomment-980007297
[21:43:04] <LordKalma> they told me to go do it myself
[21:43:39] <PJBoy> like
[21:43:55] <PJBoy> it's an extension out to clangd, yeah
[21:44:20] <PJBoy> but it actually requires clangd to be installed and I have to manually pass its arguments
[21:44:34] <PJBoy> I'm fairly sure it leverages a generic LSP layer in eclipse
[21:44:38] <PJBoy> but not 100% sure
[21:45:01] <PJBoy> but certainly if there was another C++ LSP server, it wouldn't support it
[21:45:32] *** Quits: bobb_ (~bobb_@dslb-088-065-184-219.088.065.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[21:46:07] *** Joins: chozorho (~chozorho@2601:146:300:c30::3eb7)
[21:46:47] <PJBoy> > IMO we should not add such support out of the box to VS Code
[21:46:55] <PJBoy> I'm not sure what that was supposed to mean
[21:47:35] <PJBoy> are they trying to say "we should not add full clangd support out the box, but rather use a common LSP layer"?
[21:47:42] <LordKalma> no
[21:47:44] <LordKalma> thing is
[21:47:55] <LordKalma> vscode of course has APIs to support client extensions:
[21:47:56] <LordKalma> https://code.visualstudio.com/api/language-extensions/language-server-extension-guide
[21:48:05] *** Joins: Figworm (FiggyWitIt@user/figworm)
[21:48:11] <LordKalma> but it doesn't have a way to tell vscode "here is the server, do LSP client stuff"
[21:48:17] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[21:48:19] <LordKalma> and they think including that is out of scope
[21:48:43] <PJBoy> the person say they'd be happy to assist with such an extension though
[21:48:45] <LordKalma> *here is the server url (eg. localhost:1232)
[21:48:47] <PJBoy> which makes it sound in-scope
[21:48:49] <LordKalma> "assist"
[21:48:51] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:48:59] <LordKalma> but hey, it's something
[21:49:09] <PJBoy> like it sounds like they'd want something like that too
[21:49:14] <LordKalma> basically I have to do start from here:
[21:49:15] <LordKalma> https://code.visualstudio.com/api/language-extensions/language-server-extension-guide
[21:49:23] <LordKalma> well after I finish the website I might try that
[21:49:27] <LordKalma> speaking of
[21:49:38] <LordKalma> rpav, thanks for the tip on Vue.js. really usable
[21:49:51] <PJBoy> man github is a blinding white
[21:49:57] <LordKalma> react has a better supported "vendored" ecosystem though.
[21:50:04] <LordKalma> github has dark mode if you want it to
[21:50:13] <PJBoy> I didn't see a link to dark mode anywhere
[21:50:20] <LordKalma> it's there
[21:50:53] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 250 seconds)
[21:51:04] <PJBoy> maybe it's login walled
[21:51:42] <PJBoy> yeah it's part of the user settings
[21:53:00] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:55:52] *** Joins: meicceli (meicceli@kapsi.fi)
[22:01:14] *** Quits: proller (~p@2a02:6b8:0:40c:de3:c8d7:d23e:2473) (Ping timeout: 265 seconds)
[22:04:13] * SuperNintendoSUX walls PJBoy
[22:07:27] *** Quits: meator (~meator@user/meator) (Ping timeout: 260 seconds)
[22:21:27] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[22:23:34] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:79f8:8470:8aa2:c43a) (Quit: Konversation terminated!)
[22:30:54] <RandomReader> PJBoy / whupdup - note "trivial types" isn't a good enough switch for using straight realloc, because trivial does not mean "relocatable" .. e.g. struct { int a; int* p; }; is trivial but would not survive a copy if p contains the address of a
[22:31:31] <whupdup> and I guess there's no easy test for trivial relocatability
[22:32:10] <PJBoy> yeah but those trivial types get relocated anyway
[22:32:13] <RandomReader> (you could argue that type design should attach proper constructors to that and make it non-trivial, just pointing out the subtleties of assumptions there)
[22:32:13] <PJBoy> without your consent
[22:32:40] <PJBoy> so it's really up to the user to not make trivial types that aren't relocatable
[22:33:17] <whupdup> yeah personally for a custom implementation I just chose to test is_trivially_move_constructible and is_trivially_destructible for whether to choose the realloc optimization
[22:33:32] <RandomReader> you can arrange for them not to be with current std::vector, because of the interface guarantees
[22:34:05] <RandomReader> hm, although those might carry to a realloc version...
[22:34:23] <whupdup> otherwise to get the same benefit I'd have to roll an allocator I can query "can I get a little more memory without moving" which means rolling one from the ground up
[22:34:43] <whupdup> or petitioning the standard for such a query to malloc
[22:35:00] <RandomReader> there should be a few allocators out there that provide that or an equivalent
[22:35:09] <whupdup> or however you do it, that's the option I wouldn't take because writing is hard and submitting bureaucratic paperwork is pretty uncomfy
[22:35:11] <RandomReader> (if you wanted to pin yourself to a particular implementation)
[22:35:29] <RandomReader> I think I've seen at least one that will return the actual amount on the first alloc
[22:35:40] <RandomReader> (it was a chunked one)
[22:35:59] <whupdup> I'm biding my time until it comes to needing to write a proper general purpose allocator
[22:36:04] <RandomReader> hehe
[22:36:16] <RandomReader> 'tis a rabbit hole
[22:36:23] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[22:36:49] <whupdup> right now I just have a malloc wrapper and simple child allocators for managing specific cases (i.e. stack and pool allocator)
[22:37:04] <whupdup> not worth replacing malloc (yet)
[22:49:25] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Quit: Lost terminal)
[22:50:01] *** Joins: KombuchaKip (~kip@192.252.230.5)
[22:56:59] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.36)
[22:58:55] *** Joins: ferdna (~ferdna@user/ferdna)
[23:01:32] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:902b:bcbc:c497:537d) (Ping timeout: 268 seconds)
[23:19:07] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c12e:1e58:3b84:ea29)
[23:22:55] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[23:24:07] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[23:45:56] <RandomReader> PJBoy / whupdup - actually you're right, trivially movable + trivially destructable does imply relocatable .. not sure what I was thinking of
[23:49:27] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:50:15] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
