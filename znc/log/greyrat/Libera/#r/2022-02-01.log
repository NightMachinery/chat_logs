[00:04:38] *** Joins: usr725635 (~User@cpe-45-47-86-32.twcny.res.rr.com)
[00:08:04] *** Joins: linux_dream (~isaac@37.166.208.6)
[00:10:05] *** Quits: huftis (~huftis@user/huftis) (Quit: Konversation terminated!)
[00:12:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:8844:e45a:1aab:92c2) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:35:33] *** Quits: linux_dream (~isaac@37.166.208.6) (Quit: WeeChat 3.4)
[01:54:40] *** Quits: debianero (~debianero@60.132.134.77.rev.sfr.net) (Quit: Leaving)
[02:29:49] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:bc3f:ae22:7b02:63e) (Quit: Leaving)
[03:21:42] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:22:32] *** Quits: usr725635 (~User@cpe-45-47-86-32.twcny.res.rr.com) (Ping timeout: 256 seconds)
[03:30:50] *** Joins: velix (~velix@user/velix)
[03:31:32] <velix> Anyone with an idea, how "range" works? I want c(2020, 2019, 2018, 2017, 2016). range(c(2016, 2020)) etc. don't work.
[03:32:03] <velix> ah, seq()
[03:32:03] <velix> thanks
[03:36:36] <rickyrick> wat
[03:36:44] <rickyrick> I smell python
[03:39:55] <velix> https://stackoverflow.com/questions/11454333/r-numbers-from-1-to-100/11454412
[03:40:06] <velix> ;)
[03:40:08] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[03:40:10] <velix> I'm not the only one.
[03:40:16] <velix> I think there should be ONE main syntax only :D
[03:43:22] <rickyrick> Yeah the definition of range() in R makes more sense than the definition in Python :^)
[03:47:10] <mefistofeles> rickyrick: hmm, it depends who you ask xD 
[03:47:58] <mefistofeles> I mean, it does make sense, but at the same time, it's not hard to make python range to behave like R's and python's at the same time, depending on the object
[03:48:17] <mefistofeles> so you can argue that you don't need range and seq separately in python 
[03:49:04] <rickyrick> I guess if domain and range aren't part of your usual vocabulary it doesn't make as much sense
[03:49:36] <mefistofeles> oh wait, actually, what I said is not true, so nvm
[03:49:37] <mefistofeles> xD
[03:49:46] <mefistofeles> because range is a builtin, and changing that is not easy
[03:52:52] <mefistofeles> rickyrick: I guess what you can "easily" do in python is to make an object/structure to have a .range method that does what R's range does. That makes me wonder how would someone do the same in R, I'm still an R noob.
[04:02:09] <rickyrick> The problem is that range() in R is already a variadic function
[04:02:30] <rickyrick> If it only accepted a single vector as a parameter, then you could say that range() with two or three parameters behaves as seq()
[04:02:49] <rickyrick> But range(c(1,3,5)) is the same as range(1,3,5), for better or for worse
[04:34:28] <velix> rickyrick: https://www.rdocumentation.org/packages/fstrings/versions/0.0.0.9000/topics/fstring
[04:34:30] <velix> hrhrhrhrhr
[04:34:33] <velix> Pythonization of R
[04:37:02] <rickyrick> sprintf is more than enough for anyone
[04:38:20] <velix> yeah, I'm loving it.
[04:38:38] <velix> str_glue(), f() ... way too much. What's next? `ticks?`
[04:48:06] *** Quits: twrk (~user@user/twrk) (Ping timeout: 256 seconds)
[04:49:58] <mefistofeles> velix: f-strings are hardly a python thing :P
[04:50:16] <mefistofeles> if anything, they took a long time to include them in python 
[04:50:29] <velix> mefistofeles: where do they come from?
[04:50:39] <mefistofeles> I'd say shell languages, but cannot be sure
[04:50:42] *** Joins: twrk (~user@user/twrk)
[05:26:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:39:10] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:35:40] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[08:20:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:38:52] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:44:58] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[08:46:17] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[09:57:17] *** Quits: twrk (~user@user/twrk) (Ping timeout: 256 seconds)
[11:14:10] *** Joins: twrk (~user@user/twrk)
[11:29:35] *** Joins: palasso (~palasso@user/palasso)
[12:22:24] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[12:42:12] *** Joins: LogIN (~LogIN@82-132-233-130.dab.02.net)
[12:42:14] *** Quits: LogIN (~LogIN@82-132-233-130.dab.02.net) (Remote host closed the connection)
[13:08:28] *** Quits: rickyrick (~rickyrick@S01069050ca454523.vf.shawcable.net) (Ping timeout: 256 seconds)
[14:03:52] *** Joins: Adoi (~Adoi@user/adoi)
[14:12:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[14:13:44] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[14:15:37] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 250 seconds)
[14:16:22] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[14:20:26] *** Joins: huftis (~huftis@user/huftis)
[14:23:07] *** Joins: capjack[m] (~raffaem@2001:470:69fc:105::393)
[14:57:28] *** Quits: huftis (~huftis@user/huftis) (Quit: Konversation terminated!)
[15:03:40] *** Quits: capjack[m] (~raffaem@2001:470:69fc:105::393) (Quit: Bridge terminating on SIGTERM)
[15:04:54] *** Joins: usr725635 (~User@cpe-45-47-86-32.twcny.res.rr.com)
[15:11:00] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[15:17:42] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Read error: Connection reset by peer)
[15:26:44] *** Joins: eliocamp2 (~eliocamp@user/eliocamp)
[15:30:34] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[15:32:11] *** Quits: usr725635 (~User@cpe-45-47-86-32.twcny.res.rr.com) (Ping timeout: 256 seconds)
[15:32:43] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Remote host closed the connection)
[15:36:32] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[15:38:02] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[15:51:58] *** Joins: capjack[m] (~raffaem@2001:470:69fc:105::393)
[15:51:58] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[16:00:41] *** Parts: fltrz (~ik@213.219.149.71) ()
[16:03:19] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: Client limit exceeded: 20000)
[16:04:53] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Client limit exceeded: 20000)
[16:06:05] *** Quits: capjack[m] (~raffaem@2001:470:69fc:105::393) (Quit: Client limit exceeded: 20000)
[16:19:29] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:24:49] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[16:25:07] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[16:34:47] *** Joins: debianero (~debianero@60.132.134.77.rev.sfr.net)
[16:46:05] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[17:28:40] *** Joins: usr725635 (~User@cpe-45-47-86-32.twcny.res.rr.com)
[17:37:04] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 256 seconds)
[17:55:05] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:56:32] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[17:57:00] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Client Quit)
[18:39:56] *** Joins: davor_ (~davor@user/davor)
[18:40:39] *** Quits: davor (~davor@user/davor) (Ping timeout: 268 seconds)
[18:52:58] *** Joins: palasso_ (~palasso@user/palasso)
[18:55:37] *** Quits: palasso (~palasso@user/palasso) (Ping timeout: 240 seconds)
[18:55:50] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[19:04:24] <Bayes> most sources point to C https://en.wikipedia.org/wiki/Printf_format_string#History
[19:04:39] <Bayes> or at least I've always seen it described as "R has C-like printf" blabla
[19:24:20] <Bayes> if I have 340 columns in my model predictor matrix, is that enough to call it a high dimensional problem?
[19:26:19] *** Quits: palasso_ (~palasso@user/palasso) (Read error: Connection reset by peer)
[19:27:56] *** Joins: palasso (~palasso@user/palasso)
[19:31:38] *** eliocamp2 is now known as eliocamp
[19:32:33] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[19:33:34] <eliocamp> More than 2 seems high dimensional for me ¯\_(ツ)_/¯
[19:47:18] *** Joins: palasso (~palasso@user/palasso)
[19:50:18] <Bayes> fair enough, paper published +1 (?)
[19:50:32] <Bayes> I once wrote this function and decided it didn't need any documentation https://i.imgur.com/XhKbUsK.png
[19:55:00] <eliocamp> regex https://c.tenor.com/oP2uClHfhcMAAAAC/mickey-mouse-eyesout.gif
[20:15:09] <Bayes> lol
[20:15:10] <Bayes> I love regex
[20:15:38] <Bayes> and every time I ask something on #regex, I get some very illuminating feedback that blows me away
[20:16:19] <Bayes> as in... "dang clever" kind of feedback that only those fighting the regex quirks for years can share
[20:17:35] <Bayes> also, regex101 has been terrific for getting my head around regex
[20:18:43] <Bayes> speaking of quirks, fendur here's a Stan quirks I came across
[20:19:13] <Bayes> so I have a couple of ".stan" files that I compile and then call optimize and sampling many times on
[20:19:39] *** Joins: rickyrick (~rickyrick@S01069050ca454523.vf.shawcable.net)
[20:19:40] <fendur> listening :)
[20:20:33] <Bayes> now, there's one of that dozen stan files that always throws: Error in dyn.load(libLFile) unable to load shared object
[20:21:04] <Bayes> it's kinda funny that none of the other stan files have that issue when used exactly in the same way as this one particular file
[20:21:40] <rickyrick> Maybe it was compiled for a different architecture
[20:21:53] <Bayes> the very same piece of code on the very same data, function(file = "a.stan") always throws that and function(file = "b.stan") doesn't
[20:22:09] <Bayes> yeah but all a.stan, b.stan, etc are all compiled and processed using the same code
[20:22:19] <Bayes> so their treatment and use is homogeneous across the board
[20:22:37] <Bayes> "/lib64/libm.so.6: version `GLIBC_2.29' not found"
[20:23:21] <Bayes> the only thing that I could think of, but I don't think it makes much sense, is that failing mode has something that triggers the usage of this specific glibc version or something
[20:23:24] <Bayes> but it doesn't make sense really
[20:23:53] <rickyrick> lol maybe they were linked against the wrong version of glibc
[20:24:01] <Bayes> whatever, after I run it again it works
[20:24:07] <rickyrick> ¯\_(ツ)_/¯
[20:24:09] <Bayes> cause IT 101
[20:24:12] <rickyrick> Magic
[20:24:44] <fendur> perhaps your computer has PTSD
[20:25:18] <Bayes> yes
[20:25:23] <fendur> nope i don't have a reinterpretation of what PTSD means. 
[20:25:28] <rickyrick> Installed gentoo one too many times :^)
[20:25:38] <fendur> :)
[20:25:40] <Bayes> proud arch user here <3
[20:26:08] <fendur> can you replicate on other machines?
[20:26:09] * rickyrick runs Windows XP
[20:26:15] <fendur> lol
[20:26:20] <Bayes> idk it happens on the cluster so whatev
[20:26:30] <Bayes> I don't care it was more like sharing a not-so-fun fun fact
[20:27:06] <fendur> ah maybe to do with cluster software
[20:27:14] <fendur> slurm or whatever
[20:30:19] <Bayes> do .C vs .Call differ in how they pass the data from R to C in terms of copying vs referencing?
[20:30:37] <Bayes> basically trying to understand whether they're equally efficient when it comes to passing a "large matrix" from R to C
[20:30:54] <Bayes> was reading the manual but it wasn't clear to me
[20:31:08] <rickyrick> I just do const arma::mat & in RcppArmadillo
[20:31:21] <Bayes> ya I hear ya
[20:31:34] <Bayes> but I was thinking not marrying with any Rcpp solution
[20:31:45] <Bayes> really I feel the urge to get as close to raw C as possible
[20:32:31] <Bayes> as in make your core code 100% in C, then create a extern wrapper around the purely-C code, and then create R code to call the wrapper
[20:32:34] <Bayes> make sense?
[20:36:36] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[20:37:09] <rickyrick> I've never tried with C
[20:37:13] <rickyrick> Not sure if you can just pass a pointer to it
[20:37:37] <Bayes> any reason you use armadillo instead of eigen?
[20:38:05] <rickyrick> I dunno
[20:38:18] <rickyrick> The benchmarks online I've seen show armadillo is faster
[20:38:27] <rickyrick> And I CBA to learn the eigen syntax right now
[20:39:03] <Bayes> hm weird
[20:39:09] <Bayes> I wouldn't think armadillo was faster than eigen
[20:39:39] <Bayes> eigen is supposed to target speed while armadillo is supposed to put more weight into readability, or so I thought
[20:41:45] <rickyrick> Yeah I would have thought that as well given that eigen claims to do much more aggressive optimization
[20:41:57] <rickyrick> Never got around to re-writing my own code in eigen to benchmark
[20:47:43] *** Joins: palasso (~palasso@user/palasso)
[20:58:39] <Bayes> fair enough
[20:58:48] <Bayes> it's okay to suck rickyrick, we don't judge you
[20:58:57] <rickyrick> ya
[20:59:18] * rickyrick migrates to MATLAB
[20:59:34] <Bayes> I mean R is not that far from MATLAB
[20:59:37] <Bayes> unfortunately
[21:04:30] <rickyrick> :^)
[21:47:30] *** Joins: resistor4u (~resistor4@2601:5c2:102:33d0:f158:fe34:3965:8827)
[21:58:22] <resistor4u> finally
[21:58:44] <resistor4u> i spent a good deal of time trying to get anonymize data into an MRE
[21:59:28] <resistor4u> i would greatly appreciate anyone who can run this and help me understand why the size scale is not arranged correctly in order
[21:59:38] <resistor4u> https://pst.klgrth.io/paste/zsszfscc7uy8eseorcj2vsey/raw
[21:59:47] <rickyrick> mmm mres
[22:00:35] <resistor4u> and by size scale, i mean the `# Lèt demann` bit
[22:00:43] <resistor4u> legend
[22:00:53] <rickyrick> Gotta grab the packages
[22:01:01] <resistor4u> 10-4
[22:01:59] <rickyrick> >require_namespaces
[22:02:00] <rickyrick> >not a dependency
[22:02:02] <rickyrick> Thanks package
[22:07:36] <resistor4u> would the british equivalent of groundhog day be something like stoat day?
[22:09:31] <rickyrick> Shot in the dark but maybe casting your soliciations to numeric might work?
[22:09:38] <rickyrick> It takes forever to draw a plot for me lmao
[22:10:36] <resistor4u> lol
[22:10:54] <resistor4u> i note that the package documentation has this to say: A final option is to replace these legends with any compatible ggplot2 scale. Due to how ggnet2 works internally, additional legends have to be discrete_scale controllers, even when the scale applies to the size of the nodes"
[22:11:43] <resistor4u> and so i was doing somrhting like this: `scale_size_discrete( name = "Responses",range = as.numeric(sqrt(c(1,25))*2), breaks=seq(25,1,-4))`
[22:11:55] <resistor4u> which is horribly wrong, it seems
[22:12:24] <rickyrick> Does that scale work for a regular old ggplot
[22:13:17] <rickyrick> Well here's a cheesy trick
[22:13:30] <rickyrick> After your left_join do arrange(solicitations)
[22:13:31] <rickyrick> :^)
[22:13:41] <rickyrick> Or -solicitaions
[22:13:58] <rickyrick> https://i.ibb.co/vmMjc7p/XRxcb-JBDa-Gp-Ye0-Rm-KJvq.png
[22:14:05] <rickyrick> (I only took the first 100 edges for speed)
[22:14:43] <resistor4u> gotcha
[22:14:47] <resistor4u> let men try
[22:14:52] <resistor4u> HA oops 
[22:14:55] <rickyrick> :^)
[22:16:10] <resistor4u> yes
[22:16:12] <resistor4u> that works
[22:16:21] <resistor4u> but wha'ts going on under the hood?
[22:16:27] <rickyrick> ¯\_(ツ)_/¯
[22:19:28] <resistor4u> that certain;y works, thanks
[22:19:51] <resistor4u> and if I wanted to stick with the kludge of adding diff size discrete scale
[22:20:33] <resistor4u> i *was* doing: `scale_size_discrete( name = "solicitations",range = as.numeric(sqrt(c(1,36))*2), breaks=seq(36,1,-4))`
[22:21:44] <resistor4u> ideally i'd get the points that approximate an upward scale, like 1, 4, 8, 20, or whatev
[22:21:52] <resistor4u> do you have suggestions for that?
[22:22:42] *** Quits: rickyrick (~rickyrick@S01069050ca454523.vf.shawcable.net) (Ping timeout: 250 seconds)
[22:24:03] *** Joins: rickyrick (~rickyrick@S01069050ca454523.vf.shawcable.net)
[22:32:46] <resistor4u> brb
[23:31:16] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
