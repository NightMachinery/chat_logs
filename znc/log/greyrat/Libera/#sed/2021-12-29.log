[00:09:52] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[00:12:21] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:35:55] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[00:38:14] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:52:37] *** Joins: seninha (~seninha@user/seninha)
[02:49:25] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (Remote host closed the connection)
[03:01:08] *** Joins: ferdna (~ferdna@user/ferdna)
[03:09:18] *** Quits: totenkoph (~scythe@user/totenkoph) (Ping timeout: 276 seconds)
[03:26:03] *** Joins: totenkoph (~scythe@user/totenkoph)
[03:46:19] *** Quits: malina (~malina@user/malina) (Quit: malina)
[03:51:07] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[04:46:30] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[05:33:04] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:51:26] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:18:53] *** Joins: adeliktas1 (~adeliktas@i59F4D5C9.versanet.de)
[07:20:32] *** Quits: adeliktas (~adeliktas@i59F4A2E7.versanet.de) (Ping timeout: 240 seconds)
[07:20:32] *** adeliktas1 is now known as adeliktas
[07:35:27] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:57:42] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[07:57:53] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[08:21:13] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[08:23:45] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[08:50:00] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[08:51:32] *** Quits: Fozzworth (~Fozzworth@user/fozzworth) (Remote host closed the connection)
[08:54:37] *** Quits: fcr (~fran@r186-48-127-73.dialup.adsl.anteldata.net.uy) (Ping timeout: 240 seconds)
[08:59:45] *** Joins: fcr (~fran@r167-60-24-135.dialup.adsl.anteldata.net.uy)
[09:18:14] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.4)
[09:20:39] *** Joins: treble (~treble@user/treble)
[09:56:54] *** Joins: seninha (~seninha@user/seninha)
[10:06:07] *** Quits: yitz (~yitz@exercism/yitz) (Remote host closed the connection)
[10:39:24] *** Joins: nerozero (~nerozero@87.253.63.54)
[10:58:10] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[11:07:17] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[11:14:52] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:19:32] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Ping timeout: 240 seconds)
[12:15:59] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[12:18:16] *** Joins: epony (epony@user/epony)
[12:27:49] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:12:21] *** Parts: pagios (~pagios@life.is-a.beauty) (Leaving...)
[16:08:06] *** Joins: ychaouche (~chatzilla@user/ychaouche)
[16:08:11] <ychaouche> hey sed gurus
[16:08:40] <ychaouche> is there an easy way in sed to capture the lines from /regexp/ no /regex/+n lines ? 
[16:08:53] <ychaouche> basically something like grep -A n 
[16:09:10] <ychaouche> s/no/to/
[16:20:49] *** Joins: nochi (~nochi@static.216.66.130.94.clients.your-server.de)
[16:30:17] <emanuele6> ychaouche: `grep -A 1 -e regexp' in GNU grep will print a '--' after every group
[16:30:22] <emanuele6> do you actually mean that?
[16:31:21] <emanuele6> # printf '%s\n' 11 12 20 11 11 22 30 22 11 11 | grep -A 1 -e 2 | paste -s
[16:31:22] <shbot> emanuele6: 12      20      11      --      22      30      22      11
[16:31:53] <ychaouche> emanuele6: no, I though -A n will print n lines after the match
[16:31:57] <ychaouche> thought
[16:32:04] <emanuele6> or do you just want to print lines that match regex and the next n lines after?
[16:32:15] <emanuele6> but not checking the n lines
[16:32:35] <ychaouche> my grep version has this in the help : -A, --after-context=NUM   print NUM lines of trailing context
[16:33:07] <emanuele6> for example:    1 2 1 4 5 6 7 8 9      with n=5 should this print: 1 2 1 4 5    or 1 2 1 4 5 6 7 ?
[16:34:04] <emanuele6> ychaouche: in GNU grep it adds a -- as separator unless you pass --no-group-separator or --group-separator=
[16:34:18] <emanuele6> and has the behaviour of printing   1 2 1 4 5 6 7
[16:34:37] <emanuele6> so it keeps checking the lines while figuring out the context
[16:34:37] <ychaouche> emanuele6: see live example here : https://gist.githubusercontent.com/ychaouche/43072dc82773751edfa9bd9e9ef4c384/raw/d8a15ba7dbe2fa6c24149be544c967672484a3ef/gistfile1.txt
[16:35:03] <ychaouche> no dashes are printed
[16:35:17] <emanuele6> because there is only one match
[16:35:25] <ychaouche> oh
[16:36:07] <ychaouche> in case of multiple matches it's nice to have a separator
[16:36:17] <emanuele6> try   printf '%s\n' 11 12 20 11 11 22 30 22 11 11  and then try passing it to  grep -e 2 -A 1
[16:36:54] <emanuele6> (2 is the regex here)
[16:37:00] <ychaouche> ok yes
[16:37:04] <ychaouche> I can see the dashes
[16:37:13] <ychaouche> I just totally forgot about multiple occurences
[16:37:32] <emanuele6> also try    printf '%s\n' 1 2 1 4 5 6 7 8 9 | grep -e 1 -A 5
[16:37:41] <emanuele6> you will see that it will print up to 5
[16:37:51] <emanuele6> s/5/7/
[16:38:02] <ychaouche> because of second 1
[16:38:05] <emanuele6> yes
[16:38:11] <ychaouche> ok that's fine
[16:38:22] <ychaouche> so, probably stick with grep ?
[16:38:47] <emanuele6> what do you want to implement in sed? with the separator? prints up to 5 in that case? prints up to 7 in that case?
[16:40:46] <ychaouche> the simplest the best
[16:40:54] <ychaouche> I'm ok with all three
[16:41:00] <emanuele6> well, the simplest is up to 5
[16:41:28] <emanuele6> which is just    sed -n '/regex/ { n;n;n;n;p; }'
[16:41:45] <emanuele6> with N-1 n commands
[16:42:24] <emanuele6> or sed -n '/regex/,+1p'
[16:42:41] <ychaouche> +1 is an interesting syntax
[16:42:42] <emanuele6> (+1 is N)
[16:43:08] <ychaouche> N the number ? 
[16:43:22] <emanuele6> the number you would pass to -A, the context lenght
[16:43:29] <emanuele6> s/lenght/length/
[16:43:53] <ychaouche> so in my case /regex/,+5p will print next 5 lines after /regex/ ? 
[16:44:01] <emanuele6> yes
[16:44:05] <ychaouche> voil√†
[16:44:25] <emanuele6> i thought you actually wanted to implement grep-A in sed, lol
[16:44:27] <ychaouche> good ! 
[16:44:35] <emanuele6> like write a clone
[16:44:56] <ychaouche> honestly I just wanted to learn more sed
[16:45:07] <ychaouche> now I learned about the +n syntax
[16:45:19] * ychaouche powers up
[16:45:31] <emanuele6> that syntax is not sed rally
[16:45:36] <emanuele6> s/rally/really/
[16:45:39] <ychaouche> xp +10
[16:45:47] <emanuele6> that is GNU sed specific
[16:46:14] <ychaouche> I haven't had the opportunity to encounter a significant difference yet
[16:46:18] <ychaouche> but I'll try to remeber that
[16:46:24] <ychaouche> if I ever run on a non-gnu sed
[16:46:37] <emanuele6> in regular sed, you would use `/regex/ { n;n;n;n;p; }' instead of of `/regex/,+4p'
[16:46:38] <ychaouche> but I mostly work on gnu linux systems so
[16:48:32] <ychaouche> where n would be a sed command I guess
[16:48:39] <emanuele6> yes
[16:48:42] <emanuele6> oh, oops
[16:48:48] <emanuele6> i meant `N', not `n' sorry
[16:49:04] <ychaouche> N : append next line from input file to pattern space
[16:49:09] <emanuele6> yep
[16:49:42] <ychaouche> Ok I still have to learn about the different spaces and dimensions and universes and how to make the most out of them
[16:50:10] <emanuele6> there is the pattern space and the hold space
[16:50:28] <emanuele6> in the hold space you can save stuff and it is persistent
[16:51:08] <emanuele6> the pattern space is set to the current line at every iteration, and it is what most commands use
[16:51:20] <emanuele6> e.g. `p' prints what is in the pattern space
[16:51:22] <emanuele6> that is it
[16:52:14] <ychaouche> so in order to print what's in the buffer space you need to first copy it to the pattern space ? 
[16:52:24] <emanuele6> hold space
[16:52:34] <emanuele6> you can use many commands to interact with the hold space
[16:52:42] <ychaouche> but you can't print it
[16:52:46] <emanuele6> `x' swaps hold and pattern space
[16:52:49] <emanuele6> you can
[16:52:52] <emanuele6> x;p;x
[16:52:59] <ychaouche> yeah :)
[16:54:15] <ychaouche> so as I said, you need to first copy it to the pattern space, well in your case you swaped them.
[16:55:24] <ychaouche> also why are they sometimes written in capitals ? 
[16:55:27] <ychaouche> the sed commands
[16:55:33] <ychaouche> for example, D instead of d
[16:55:39] <ychaouche> aren't they the same ? 
[16:55:55] <ychaouche> or P instead of p
[16:55:56] <emanuele6> usually capitals means that is similar to the lowercase one, but appends or only considers the first line
[16:56:15] <emanuele6> ychaouche: yeah, P prints up to the first newline in the pattern space
[16:56:22] <emanuele6> while p prints the whole pattern space
[16:56:44] <emanuele6> ychaouche: i am starting to write a grep-A implementation in sed :) http://0x0.st/orFv.txt
[16:57:31] <emanuele6> it will be ran as ./grep-A.sed 3<<< '5' file
[16:57:46] <emanuele6> and i will probably make the regex hardcoded until i can figure something out
[16:58:47] <emanuele6> (forgot the `g' flag in the second `s')
[17:02:36] <ychaouche> emanuele6: are you mia ? 
[17:02:52] <ychaouche> oh probably not
[17:02:58] <emanuele6> no, i am emanuele
[17:03:01] <ychaouche> you're not running 0x0 yourself 
[17:03:11] <emanuele6> 0x0.st is a public website
[17:08:38] *** Joins: seninha (~seninha@user/seninha)
[17:29:45] <emanuele6> oh, no
[17:30:12] <emanuele6> `r file' does not write the content of `file' to the pattern space
[17:30:24] <emanuele6> it simply prints out file
[17:30:32] <emanuele6> that ruins my plan
[17:30:41] <emanuele6> it took me a while to figure out, lo
[17:30:44] <emanuele6> s/$/l
[17:31:34] <emanuele6> bummer
[17:32:11] <emanuele6> it would have been nice a nice way to pass cli arguments to sed using:  `r /dev/fd/3'
[17:32:46] <emanuele6> i never actually used `r' before; i always assumed it read to the pattern space
[17:33:35] <Riviera> that'd be nice, wouldn't it
[17:33:43] <emanuele6> YES!
[17:34:06] <emanuele6> welp, i guess, i will have to make a wrapper script
[17:34:21] <emanuele6> that writes the arguments to stdin before the actual input
[17:58:58] <ychaouche> is it easy to print what's in a range except for the last line in the range ? like /regex1/,/regex2/ but don't print the line containing regex2 ? 
[18:00:18] <ychaouche> I think I already saw some scripts print help messages by reading from the man pages between OPTION and another regex, but don't remember how they did it or what the script was
[18:05:25] *** Joins: libc (~weechat@user/tessio)
[18:05:27] <libc> hi
[18:06:02] <emanuele6> ychaouche: sed -n -e '/regex1/ {' -e :x -e 'H; n' -e '/regex2/by' -e 'bx' -e :y -e 'g; s/.//p;}'
[18:06:35] <ychaouche> so easy
[18:06:38] <emanuele6> actually
[18:06:45] <emanuele6> sed -n -e '/regex1/ {' -e :x -e 'H; n' -e '/regex2/!bx' -e 'g; s/.//p;}'
[18:06:57] <emanuele6> you don't need two labels, one is enough
[18:07:23] <libc> and also all these confusing -e
[18:07:56] <emanuele6> i forgot to clear the hold space
[18:08:13] <emanuele6>  sed -n -e '/regex1/ {' -e :x -e 'H; n' -e '/regex2/!bx' -e 'g; s/.//p; s/.*//; h ;}'
[18:08:18] <emanuele6> ^
[18:09:35] <libc> no ..
[18:10:04] <libc> replace these -e's with ;
[18:10:14] <emanuele6> this also works: slightly simpler
[18:10:17] <emanuele6>  sed -n -e '/regex1/ { h' -e :x -e n -e '/regex2/by' -e H -e bx -e :y -e 'g; p ;}'
[18:10:30] <emanuele6> libc: no
[18:10:51] <libc> you are concatenating scripts without a reason
[18:10:57] <libc> you aware of it ?
[18:11:06] <emanuele6> ...
[18:11:44] <libc> at least the first -e
[18:11:45] <emanuele6> there is a reason: a semicolon after a label name is undefined behaviour
[18:11:55] <emanuele6> libc: no.
[18:12:10] <emanuele6> if you remove the first -e, '/regex1/ { h' will be interpreted as a file
[18:12:39] <libc> if no -e is specified the first non option argument are consider as script
[18:12:59] <emanuele6> but here that is not the case
[18:13:12] <emanuele6> there are other 4 -e specified
[18:13:24] <emanuele6> so "no -e is specified" is not true
[18:13:33] <emanuele6> why don't you tias?
[18:13:43] <libc> tias ?
[18:14:00] <emanuele6> /msg greybot tias
[18:14:30] <emanuele6> i will do it for you
[18:14:54] <emanuele6> # printf '%s\n' a b c | sed '/a/p' -e '/b/p'
[18:14:55] <shbot> emanuele6: sed: can't read /a/p: No such file or directory
[18:15:06] <libc> hmm
[18:15:08] <libc> indeed
[18:15:47] <libc> standing corrected
[18:26:59] <emanuele6> you could remove two of the -e though
[18:27:22] <emanuele6>  sed -n -e '/regex1/ { h; :x' -e n -e '/regex2/by' -e 'H; bx' -e :y -e 'g; p ;}'
[18:27:31] <emanuele6> that would work
[18:33:36] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[18:43:15] *** Quits: ychaouche (~chatzilla@user/ychaouche) (Ping timeout: 250 seconds)
[19:19:54] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[19:39:00] *** Joins: seninha (~seninha@user/seninha)
[19:43:18] <emanuele6> # sed -n -e '/^a/p; bb' -e :a -e '//p; b' -e :b -e '/c/p; ba' <<< 'cb'
[19:43:19] <shbot> emanuele6: cb
[19:43:19] <shbot> emanuele6: cb
[19:43:22] <emanuele6> # sed -n -e '/^a/p; bb' -e :a -e '//p; b' -e :b -e '/c/p; ba' <<< 'ab'
[19:43:23] <shbot> emanuele6: ab
[19:43:28] <emanuele6> interesting
[19:44:01] <emanuele6> `//' uses the last RE that was used, not the last regex mentioned in the source code
[19:44:19] <emanuele6> again, something that took me a while to figure out, lol
[19:45:11] <emanuele6> but it is interesting; it feels like a powerful feature
[20:00:17] *** Quits: nerozero (~nerozero@87.253.63.54) (Ping timeout: 240 seconds)
[20:03:12] *** Joins: yitz (~yitz@exercism/yitz)
[20:48:15] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[20:50:43] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[20:53:08] *** Quits: fcr (~fran@r167-60-24-135.dialup.adsl.anteldata.net.uy) (Read error: Connection reset by peer)
[20:54:54] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[21:03:38] *** Joins: fcr (~fran@r167-60-123-107.dialup.adsl.anteldata.net.uy)
[21:12:47] <fcr> that's right, gnu sed documentation mentions: ¬´The empty regular expression '//' repeats the last regular expression match (the same holds if the empty regular expression is passed to the 's' command).  Note that modifiers to regular expressions are evaluated when the regular expression is compiled, thus it is invalid to specify them together with the empty regular expression.¬ª
[21:14:21] <emanuele6> i know that, but i never used // while branching
[21:14:52] <emanuele6> and i always assumed it was using the last regex mentioned in the source code
[21:15:05] <emanuele6> not that it was keeping track of the last used regex
[21:15:42] <emanuele6> but it is nice that it is this way; i think it could be used for something cool
[21:16:40] <fcr> wow, it's even in the standard ¬´If an RE is empty (that is, no pattern is specified) sed shall behave as if the last RE used in the last command applied (either as an address or as part of a substitute command) was specified.¬ª
[21:16:57] <emanuele6> yes, it is standard
[21:19:47] <fcr> good thing about it being the last regex applied is that it makes sense if you have something like /regex/{some commands with some more regexes...} //!{...}
[21:21:52] <emanuele6> yeah, but that is inefficient. i was thinking it could be used to select a different regex based on a condition
[21:22:58] <emanuele6> x; /../ { /pat1/ ;}; /./ { /pat2/ ;}; /^$/ { /pat3/ ;}; x; // { ... }
[21:23:01] <emanuele6> something like that
[21:24:19] <emanuele6> if the hold space contains at least 2 characters, check if the pattern space matches /pat1/; if it only contains one character, check /pat2/; otherwise, check /pat3/
[21:27:13] <emanuele6> # printf '%s\n' ''  ball cool arrgh | sed -e '1 { h; b ;} x; /../ /a/; /./ /b/; /^$/ /c/; x; //p'
[21:27:14] <shbot> emanuele6: sed: -e expression #1, char 13: extra characters after command
[21:27:40] <emanuele6> # printf '%s\n' ''  ball cool arrgh | sed -e '1 { h; b ;}; x; /../ /a/; /./ /b/; /^$/ /c/; x; //p'
[21:27:41] <shbot> emanuele6: sed: -e expression #1, char 22: unknown command: `/'
[21:27:51] <emanuele6> needs the curlies
[21:28:01] <emanuele6> ah, yeah, of course it does
[21:28:27] <emanuele6> # printf '%s\n' ''  ball cool arrgh | sed -e '1 { h; b ;}; x; /../{/a/;}; /./{/b/;}; /^$/{/c/;}; x; //p'
[21:28:28] <shbot> emanuele6: sed: -e expression #1, char 25: unknown command: `;'
[21:28:55] <emanuele6> odd, shouldn't that be considered the null command?
[21:29:37] <emanuele6> # printf '%s\n' ''  ball cool arrgh | sed -e '1 { h; b ;}; x; /../{/a/' -e }; /./{/b/' -e '}; /^$/{/c/' -e '}; x; //p'
[21:29:43] <shbot> emanuele6: Missing terminating quote, bracket or keyword
[21:29:46] <fcr> another problem is that going that route will always end up with the last condition or the last regex for that last condition
[21:30:08] <fcr> though that can be fixed with a branch
[21:30:31] <emanuele6> keeps saying missing command even with -e
[21:31:20] <emanuele6> fcr: oh, yeah. i wanted to branch, but forgot
[21:31:42] <emanuele6> that was the whole point: use // with branching
[21:32:16] <fcr> # { echo foo; echo bar; } | sed '/f/{/.\(.\)/tX;bX;};/b/{/..\(.\)/tX;bX;};:X;s//<\1>/'
[21:32:18] <shbot> fcr: <o>o
[21:32:18] <shbot> fcr: <r>
[21:32:42] <fcr> very perverse! I like it
[21:32:47] <emanuele6> # printf '%s\n' ''  ball cool arrgh | sed -e '1 { h; b ;}; x; /../{/a/be' -e '}; /./{/b/be' -e} /^$/{/c/be' -e '};:e' -e 'x; //p'
[21:32:54] <shbot> emanuele6: Missing terminating quote, bracket or keyword
[21:33:39] <emanuele6> # printf '%s\n' ''  ball cool arrgh | sed -n -e '1 { h; b ;}; x; /../{/a/be' -e '}; /./{/b/be' -e '}; /^$/{/c/be' -e '};:e' -e 'x; //p'
[21:33:40] <shbot> emanuele6: cool
[21:33:44] <emanuele6> # printf '%s\n' '.'  ball cool arrgh | sed -n -e '1 { h; b ;}; x; /../{/a/be' -e '}; /./{/b/be' -e '}; /^$/{/c/be' -e '};:e' -e 'x; //p'
[21:33:45] <shbot> emanuele6: no output
[21:33:49] <emanuele6> # printf '%s\n' '..'  ball cool arrgh | sed -n -e '1 { h; b ;}; x; /../{/a/be' -e '}; /./{/b/be' -e '}; /^$/{/c/be' -e '};:e' -e 'x; //p'
[21:33:50] <shbot> emanuele6: no output
[21:34:00] <emanuele6> mm
[21:34:33] <emanuele6> # printf '%s\n' '...'  ball cool arrgh | sed -n -e '1 { h; b ;}; x; /../{/a/be' -e '}; /./{/b/be' -e '}; /^$/{/c/be' -e '};x;:e' -e //p
[21:34:34] <shbot> emanuele6: no output
[21:36:16] <emanuele6> oh oops
[21:36:35] <emanuele6> i am branching conditionally hehe
[21:37:10] <emanuele6> # printf '%s\n' '...'  ball cool arrgh | sed -n -e '1 { h; b ;}; x; /../{/a/be' -e be -e '}; /./{/b/be' -e be -e '}; /^$/{/c/be' -e be -e '};x;:e' -e //p
[21:37:11] <shbot> emanuele6: ball
[21:37:14] <emanuele6> # printf '%s\n' '.'  ball cool arrgh | sed -n -e '1 { h; b ;}; x; /../{/a/be' -e be -e '}; /./{/b/be' -e be -e '}; /^$/{/c/be' -e be -e '};x;:e' -e //p
[21:37:15] <shbot> emanuele6: ball
[21:37:20] <emanuele6> # printf '%s\n' ''  ball cool arrgh | sed -n -e '1 { h; b ;}; x; /../{/a/be' -e be -e '}; /./{/b/be' -e be -e '}; /^$/{/c/be' -e be -e '};x;:e' -e //p
[21:37:21] <shbot> emanuele6: ball
[21:49:05] <emanuele6> oh, i am exchanging before the label, oops
[21:49:25] <emanuele6> # printf '%s\n' ''  ball cool arrgh | sed -n -e '1 { h; b ;}; x; /../{/a/be' -e be -e '}; /./{/b/be' -e be -e '}; /^$/{/c/be' -e be -e '};:e' -e 'x;//p'
[21:49:27] <shbot> emanuele6: cool
[21:49:30] <emanuele6> # printf '%s\n' 'a'  ball cool arrgh | sed -n -e '1 { h; b ;}; x; /../{/a/be' -e be -e '}; /./{/b/be' -e be -e '}; /^$/{/c/be' -e be -e '};:e' -e 'x;//p'
[21:49:31] <shbot> emanuele6: ball
[21:49:33] <emanuele6> # printf '%s\n' 'aa'  ball cool arrgh | sed -n -e '1 { h; b ;}; x; /../{/a/be' -e be -e '}; /./{/b/be' -e be -e '}; /^$/{/c/be' -e be -e '};:e' -e 'x;//p'
[21:49:34] <shbot> emanuele6: ball
[21:49:34] <shbot> emanuele6: arrgh
[21:49:39] <emanuele6> now it works hehe
[21:51:03] <emanuele6> regex dispatching based on hold space length; cool
[22:41:33] <emanuele6> anyhow, here is what i have so far for the GNU grep -A implementation
[22:41:49] <emanuele6> http://0x0.st/ossl.txt    ( wrapper script ../x/grep-A.sed.sh )
[22:43:32] <emanuele6> s@\.\./x/grep-A\.sed\.sh@ http://0x0.st/ossU.sh @
[22:44:38] <emanuele6> and this is my initial implementation; uses a unary number instead of a decimal number   http://0x0.st/ossI.txt (same wrapper)
[22:45:47] <emanuele6> my original idea was to covert the argument from decimal to unary and use the same script, but i figured out it was easier to just decrement the decimal number until it reaches zero
[22:46:27] <emanuele6> s/covert/convert/
[22:50:26] <emanuele6> the goal was to implement   grep -A $arg --group-separator=-- -e arbitrary_hardcoded file
[22:51:42] <emanuele6> but my implementation can only be used with regexes that are anchored to the end and don't use `.' (because `.' would match newline)
[22:52:19] <emanuele6> i think i will try to do:   grep -F -A $arg --group-separator=$arg_without_nl -e $arg_without_nl file    next
[22:52:25] <emanuele6> it should not be too hard
[23:11:05] <libc> emanuele6: i still don't understand why you using -e and not ;
[23:11:29] <libc> just use '/regex/; blahblah; blahlah; etc..'
[23:11:54] <emanuele6> <emanuele6 > there is a reason: a semicolon after a label name is undefined behaviour
[23:12:10] <libc> :x ;
[23:12:29] <libc> even after a space is a problem :
[23:12:31] <libc> ?
[23:13:24] <emanuele6> of course.
[23:13:44] <libc> that -e everywhere is just ugly
[23:13:56] <emanuele6> is not everywhere.
[23:14:13] <emanuele6> look closely and you will see i am only using it after label names and file names
[23:14:44] <emanuele6> though i personally don't mind using -e everywhere at the command line
[23:16:48] <emanuele6> $ uname -a
[23:16:50] <emanuele6> NetBSD sdf 9.1 NetBSD 9.1 (GENERIC) #0: Sun Oct 18 19:24:30 UTC 2020  mkrepro@mkrepro.NetBSD.org:/usr/src/sys/arch/amd64/compile/GENERIC amd64
[23:16:57] <emanuele6> $ printf '%s\n' a | sed -n '/a/ba;d;:a;p'
[23:16:59] <emanuele6> sed: 1: "/a/ba;d;:a;p": undefined label 'a;d;:a;p'
[23:17:07] <emanuele6> # printf '%s\n' a | sed -n '/a/ba;d;:a;p'
[23:17:08] <shbot> emanuele6: a
[23:17:13] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[23:17:32] <emanuele6> as you can see, it does not work.
[23:17:53] <emanuele6> only in GNU sed
[23:18:20] <libc> gnu is the standard
[23:18:22] <libc> accept it
[23:19:02] <emanuele6> gnu is not the standard sed on sdf.
[23:19:17] <emanuele6> or any bsd, or macos
[23:20:03] <emanuele6> sed is a programming language; GNU sed an implementation of a sed interpreter
[23:20:18] <libc> sed is a stream editor 
[23:25:22] <libc> nevertheless it's nice to see you fully immersed yourself in the command line 
[23:31:30] <libc> emanuele6: where you work ? 
[23:38:28] *** Quits: libc (~weechat@user/tessio) (Quit: WeeChat 3.2)
