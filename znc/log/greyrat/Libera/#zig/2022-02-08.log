[00:01:08] *** Joins: plumeus (~plumeus@user/plumeus)
[00:01:09] *** Joins: Snektron[m] (~snektron@2001:470:69fc:105::f0a3)
[00:01:10] *** Joins: aspe[m] (~dimitrisa@2001:470:69fc:105::d93e)
[00:01:10] *** Joins: Levy[m] (~tauoverpi@2001:470:69fc:105::1:71a5)
[00:01:11] *** Joins: LorisCro[m] (~kristoff-@2001:470:69fc:105::1:2521)
[00:01:12] *** Joins: AtomToast (~atomtoast@2001:470:69fc:105::8a5)
[00:01:13] *** Joins: josias (~mottmatri@2001:470:69fc:105::b6c)
[00:01:13] *** Joins: Andy[m]1 (~anparrama@2001:470:69fc:105::1:6826)
[00:01:15] *** Joins: acd8 (~acd84c8cc@2001:470:69fc:105::916)
[00:04:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[00:04:37] *** Quits: koakuma (~koakuma@user/koakuma) (Read error: Connection reset by peer)
[00:04:51] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:540b:bd79:8d25:836)
[00:09:26] *** Joins: nopenope[m] (~repmovsb@2001:470:69fc:105::1:274e)
[00:10:49] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[00:11:58] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:13:25] *** Joins: darkbit[m] (~darkbitst@2001:470:69fc:105::3ae3)
[00:13:27] *** Joins: devast8a (~devast8a@2001:470:69fc:105::3f46)
[00:17:10] *** Joins: xackus (~xackus@185.15.0.3)
[00:17:13] *** Joins: treeshateorcs[m] (~treeshate@2001:470:69fc:105::1:41c4)
[00:17:15] *** Joins: TianruiWei[m] (~tianruiwe@2001:470:69fc:105::1:601a)
[00:17:46] *** Joins: alethkit (~alethkitm@2001:470:69fc:105::1:6fa4)
[00:19:17] *** Quits: Evo2 (~hastings@aj158235.dynamic.ppp.asahi-net.or.jp) (Remote host closed the connection)
[00:21:31] *** Joins: Evo2 (~hastings@aj158235.dynamic.ppp.asahi-net.or.jp)
[00:21:34] *** Joins: gpanders (~gpanders@user/gpanders)
[00:21:53] *** Quits: notapenguin (~ryu@187.3.254.107) (Quit: WeeChat 3.4)
[00:23:20] *** Joins: koakuma (~koakuma@user/koakuma)
[00:24:39] *** Quits: Evo2 (~hastings@aj158235.dynamic.ppp.asahi-net.or.jp) (Client Quit)
[00:25:28] *** Joins: Evo2 (~hastings@aj158235.dynamic.ppp.asahi-net.or.jp)
[00:28:55] *** Quits: boardwalk (~boardwalk@2605:a601:aac3:100:c352:7304:d60a:9a4a) (Quit: Ping timeout (120 seconds))
[00:29:11] *** Joins: boardwalk (~boardwalk@2605:a601:aac3:100:eb7b:bdca:b0e0:905e)
[00:33:08] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:33:33] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Ping timeout: 250 seconds)
[00:38:17] *** Joins: coolshaurya (~coolshaur@2001:470:69fc:105::fac0)
[00:46:26] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[00:48:46] *** Joins: barath (~barath@2001:470:69fc:105::21a)
[00:51:42] *** Joins: Levytauoverpitch (~tauoverpi@2001:470:69fc:105::728)
[00:57:32] *** Joins: siraben (~siraben@user/siraben)
[00:59:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[01:05:23] *** Quits: siraben (~siraben@user/siraben) (Write error: Connection reset by peer)
[01:05:23] *** Quits: barath (~barath@2001:470:69fc:105::21a) (Read error: Connection reset by peer)
[01:05:23] *** Quits: LorisCro[m] (~kristoff-@2001:470:69fc:105::1:2521) (Read error: Connection reset by peer)
[01:05:23] *** Quits: _javyre (~javyre@2001:470:69fc:105::2162) (Read error: Connection reset by peer)
[01:05:23] *** Quits: tleydxdy[m] (~tleydxdy@2001:470:69fc:105::16a3) (Read error: Connection reset by peer)
[01:05:23] *** Quits: HenrikHenriksson (~hxctrl-cl@2001:470:69fc:105::e37b) (Write error: Connection reset by peer)
[01:05:23] *** Quits: devast8a (~devast8a@2001:470:69fc:105::3f46) (Read error: Connection reset by peer)
[01:05:23] *** Quits: acd8 (~acd84c8cc@2001:470:69fc:105::916) (Read error: Connection reset by peer)
[01:05:23] *** Quits: nopenope[m] (~repmovsb@2001:470:69fc:105::1:274e) (Read error: Connection reset by peer)
[01:05:23] *** Quits: Andy[m]1 (~anparrama@2001:470:69fc:105::1:6826) (Read error: Connection reset by peer)
[01:05:23] *** Quits: Aren (~ar333matr@2001:470:69fc:105::39b2) (Read error: Connection reset by peer)
[01:05:24] *** Quits: Levy[m] (~tauoverpi@2001:470:69fc:105::1:71a5) (Read error: Connection reset by peer)
[01:05:24] *** Quits: plumeus (~plumeus@user/plumeus) (Read error: Connection reset by peer)
[01:05:24] *** Quits: TianruiWei[m] (~tianruiwe@2001:470:69fc:105::1:601a) (Write error: Connection reset by peer)
[01:05:24] *** Quits: darkbit[m] (~darkbitst@2001:470:69fc:105::3ae3) (Read error: Connection reset by peer)
[01:05:24] *** Quits: alethkit (~alethkitm@2001:470:69fc:105::1:6fa4) (Read error: Connection reset by peer)
[01:05:24] *** Quits: Levytauoverpitch (~tauoverpi@2001:470:69fc:105::728) (Read error: Connection reset by peer)
[01:05:24] *** Quits: treeshateorcs[m] (~treeshate@2001:470:69fc:105::1:41c4) (Write error: Connection reset by peer)
[01:05:24] *** Quits: josias (~mottmatri@2001:470:69fc:105::b6c) (Read error: Connection reset by peer)
[01:05:24] *** Quits: midi[m] (~justmidim@2001:470:69fc:105::c739) (Read error: Connection reset by peer)
[01:05:24] *** Quits: Snektron[m] (~snektron@2001:470:69fc:105::f0a3) (Read error: Connection reset by peer)
[01:05:24] *** Quits: polykernel (~polykerne@user/polykernel) (Read error: Connection reset by peer)
[01:05:24] *** Quits: blackcatter[m] (~blackcatt@2001:470:69fc:105::e10c) (Read error: Connection reset by peer)
[01:05:24] *** Quits: gpanders (~gpanders@user/gpanders) (Write error: Connection reset by peer)
[01:05:25] *** Quits: aspe[m] (~dimitrisa@2001:470:69fc:105::d93e) (Write error: Connection reset by peer)
[01:05:25] *** Quits: AtomToast (~atomtoast@2001:470:69fc:105::8a5) (Read error: Connection reset by peer)
[01:05:25] *** Quits: coolshaurya (~coolshaur@2001:470:69fc:105::fac0) (Read error: Connection reset by peer)
[01:06:49] *** Joins: devast8a (~devast8a@2001:470:69fc:105::3f46)
[01:09:27] *** Joins: moats (~oats@user/oats)
[01:09:27] *** Joins: polykernel (~polykerne@user/polykernel)
[01:09:27] *** Joins: siraben (~siraben@user/siraben)
[01:09:27] *** Joins: bfredl (~bfredl@2001:470:69fc:105::183)
[01:09:27] *** Joins: CrystalGamma[m] (~crystalga@2001:470:69fc:105::1011)
[01:09:27] *** Joins: LorisCro[m] (~kristoff-@2001:470:69fc:105::1:2521)
[01:09:28] *** Joins: motiejus (~motiejus@2001:470:69fc:105::38fb)
[01:09:28] *** Joins: mikolajw (~mikolajtc@2001:470:69fc:105::3b02)
[01:09:28] *** Joins: Levytauoverpitch (~tauoverpi@2001:470:69fc:105::728)
[01:09:28] *** Joins: tleydxdy[m] (~tleydxdy@2001:470:69fc:105::16a3)
[01:09:28] *** Joins: alethkit (~alethkitm@2001:470:69fc:105::1:6fa4)
[01:09:28] *** Joins: coolshaurya (~coolshaur@2001:470:69fc:105::fac0)
[01:09:39] *** Joins: Aren (~ar333matr@2001:470:69fc:105::39b2)
[01:09:39] *** Joins: darkbit[m] (~darkbitst@2001:470:69fc:105::3ae3)
[01:09:39] *** Joins: HenrikHenriksson (~hxctrl-cl@2001:470:69fc:105::e37b)
[01:09:39] *** Joins: midi[m] (~justmidim@2001:470:69fc:105::c739)
[01:09:40] *** Joins: blackcatter[m] (~blackcatt@2001:470:69fc:105::e10c)
[01:09:40] *** Joins: Andy[m] (~anparrama@2001:470:69fc:105::1:6826)
[01:09:40] *** Joins: Snektron[m] (~snektron@2001:470:69fc:105::f0a3)
[01:09:40] *** Joins: aspe[m] (~dimitrisa@2001:470:69fc:105::d93e)
[01:09:40] *** Joins: josias (~mottmatri@2001:470:69fc:105::b6c)
[01:09:41] *** Joins: Levy[m] (~tauoverpi@2001:470:69fc:105::1:71a5)
[01:09:41] *** Joins: AtomToast (~atomtoast@2001:470:69fc:105::8a5)
[01:09:41] *** Joins: da_lorax (~daloraxye@2001:470:69fc:105::1:5e15)
[01:09:41] *** Joins: gpanders (~gpanders@user/gpanders)
[01:09:41] *** Joins: _javyre (~javyre@2001:470:69fc:105::2162)
[01:09:41] *** Joins: barath (~barath@2001:470:69fc:105::21a)
[01:09:41] *** Joins: nopenope[m] (~repmovsb@2001:470:69fc:105::1:274e)
[01:09:41] *** Joins: TianruiWei[m] (~tianruiwe@2001:470:69fc:105::1:601a)
[01:09:42] *** Joins: plumeus (~plumeus@user/plumeus)
[01:09:42] *** Joins: treeshateorcs[m] (~treeshate@2001:470:69fc:105::1:41c4)
[01:09:43] *** Joins: acd8 (~acd84c8cc@2001:470:69fc:105::916)
[01:15:58] *** Quits: jemius (~imperator@200116b82d162d00c2b5e8d9288d1e7f.dip.versatel-1u1.de) (Quit: Leaving)
[01:20:21] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:21:24] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[01:25:04] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:31:37] *** Joins: Guest16 (~Guest16@071-094-000-165.res.spectrum.com)
[01:31:54] *** Quits: rv1sr (~rv1sr@user/rv1sr) ()
[01:32:36] *** Quits: Guest16 (~Guest16@071-094-000-165.res.spectrum.com) (Client Quit)
[01:33:58] *** Quits: Levytauoverpitch (~tauoverpi@2001:470:69fc:105::728) (Quit: You have been kicked for being idle)
[01:34:00] *** Quits: aspe[m] (~dimitrisa@2001:470:69fc:105::d93e) (Quit: You have been kicked for being idle)
[01:36:38] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:39:57] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 256 seconds)
[01:43:00] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[01:45:08] *** Joins: bindu (~bindu@user/bindu)
[01:48:15] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[01:48:45] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:49:43] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:56:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[01:59:01] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:00:32] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[02:03:18] *** Joins: sheb_ (~sheb@31.223.228.71)
[02:03:53] <andrewrk> marler8997_, oof wow what a mess
[02:04:08] *** Joins: aspe[m] (~dimitrisa@2001:470:69fc:105::d93e)
[02:04:08] *** Joins: Levytauoverpitch (~tauoverpi@2001:470:69fc:105::728)
[02:04:24] <andrewrk> thanks for looking into that
[02:04:34] *** Quits: Levytauoverpitch (~tauoverpi@2001:470:69fc:105::728) (Quit: You have been kicked for being idle)
[02:04:43] <marler8997_> yeah, someone just happened to see this when running zigup and it would hang, and it just happened to be a bug in the code that I put in :)
[02:04:58] *** Joins: Levytauoverpitch (~tauoverpi@2001:470:69fc:105::728)
[02:05:27] *** Quits: sheb (~sheb@31.223.228.71) (Ping timeout: 256 seconds)
[02:06:39] <andrewrk> just in time for 0.9.1
[02:06:55] <marler8997_> oh perfect
[02:09:25] *** Quits: q66 (~q66@q66.moe) (Quit: q66)
[02:09:42] *** Joins: q66 (~q66@q66.moe)
[02:14:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[02:16:43] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:21:58] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[02:27:05] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 250 seconds)
[02:27:59] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:540b:bd79:8d25:836) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:28:00] *** Quits: outfox (~outfox@user/outfox) (Quit: leaving)
[02:34:50] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:540b:bd79:8d25:836)
[02:38:16] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:540b:bd79:8d25:836) (Client Quit)
[02:43:05] *** Quits: gwizon (~gwizon@ool-45798d64.dyn.optonline.net) (Ping timeout: 256 seconds)
[02:43:59] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 250 seconds)
[02:47:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:52:58] *** Joins: xackus (~xackus@185.15.0.3)
[02:53:28] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[02:54:09] <cr1901> I contributed to Zig :P
[02:58:43] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 256 seconds)
[03:00:32] *** Quits: xackus (~xackus@185.15.0.3) (Remote host closed the connection)
[03:00:52] *** Joins: xackus (~xackus@185.15.0.3)
[03:00:57] *** Quits: xackus (~xackus@185.15.0.3) (Read error: Connection reset by peer)
[03:12:19] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 256 seconds)
[03:16:29] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[03:16:33] <marler8997_> yeah cr1901 was the one who discovered the issue and after some printf debugging over IRC we were able to track it down to collectOutputWindows :)
[03:17:29] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:18:41] <cr1901> async is not fun on Windows- ty for your effort
[03:20:18] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[03:28:48] <andrewrk> nice cr1901 thank you for helping track this down
[03:31:05] <cr1901> Ty. I very much love the idea behind zigup and am happy to test drive it on Windows (even if I still want to bootstrap a Windows Zig from Linux "for the learning experience")
[03:31:27] <cr1901> marler8997_: Your final changes work fine on my end as well
[03:59:35] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 256 seconds)
[04:00:42] *** Joins: rgrinberg (~textual@187.223.115.137)
[04:08:03] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[04:09:56] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[04:11:14] *** Joins: haliucinas (~haliucina@5.20.153.21)
[04:25:37] *** Quits: Biolunar (~bio@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (Ping timeout: 240 seconds)
[04:32:33] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[04:40:57] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[04:41:30] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[04:42:32] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791)
[05:09:31] *** Quits: thatcher (~thatcher@91.110.109.236) (Ping timeout: 256 seconds)
[05:09:50] *** Joins: thatcher (~thatcher@91.110.109.236)
[05:11:31] *** Joins: Kingsquee (~Kingsquee@node-1w7jr9plitnrxjg5a84xze8kz.ipv6.telus.net)
[05:19:40] *** Quits: rgrinberg (~textual@187.223.115.137) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:34:25] *** Joins: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles)
[05:38:14] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:1975:85fc:6d44:5df5)
[05:38:36] <mikezackles> Hi! I'm brand new to zig coming from c++-land. I'm just getting started, but so far this language looks awesome! Looking forward to learning more.
[05:39:11] <mikezackles> Just thought I'd say hello. Carry on :)
[05:40:21] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 250 seconds)
[05:42:09] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:49:47] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:50:59] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[05:55:45] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 256 seconds)
[05:56:02] *** Quits: Pistahh (~pistahh@user/pistahh) (Ping timeout: 240 seconds)
[06:01:17] *** Joins: Pistahh (~pistahh@user/pistahh)
[06:15:47] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[06:20:39] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 250 seconds)
[06:36:31] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[06:40:29] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[06:45:23] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 256 seconds)
[06:47:32] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:58:16] *** Quits: dbohdan (~dbohdan@user/dbohdan) (Read error: Connection reset by peer)
[06:59:14] *** Joins: dbohdan (~dbohdan@user/dbohdan)
[07:05:14] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[07:09:02] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[07:10:19] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 256 seconds)
[07:14:21] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[07:19:57] *** Quits: royo (~royo@user/royo) (Ping timeout: 256 seconds)
[07:21:39] *** Quits: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 276 seconds)
[07:30:01] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[07:35:06] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 260 seconds)
[07:45:44] *** Joins: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles)
[07:54:46] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[07:54:55] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791) (Ping timeout: 250 seconds)
[08:09:06] *** Quits: dmh (~dmh@pclmulqdq.dev) (Quit: leaving)
[08:14:36] *** Quits: terinjokes (~terinjoke@2604:a880:2:d0::227b:f001) (Quit: ZNC 1.8.2 - https://znc.in)
[08:15:13] *** Joins: terinjokes (~terinjoke@2604:a880:2:d0::227b:f001)
[08:40:00] *** Quits: frmdstryr (~jrm@172.58.190.218) (Ping timeout: 250 seconds)
[08:45:30] *** Quits: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 276 seconds)
[09:04:52] *** Joins: dmh (~dmh@pclmulqdq.dev)
[09:10:21] *** Quits: dmh (~dmh@pclmulqdq.dev) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[09:16:32] *** Joins: dmh (~dmh@pclmulqdq.dev)
[09:17:42] *** Quits: dmh (~dmh@pclmulqdq.dev) (Client Quit)
[09:18:01] *** Joins: dmh (~dmh@pclmulqdq.dev)
[09:21:41] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Quit: leaving)
[09:47:52] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:1975:85fc:6d44:5df5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:53:30] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:58:37] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[10:56:24] *** Joins: pkap (~pkap@185.213.155.232)
[11:03:41] *** Joins: royo (~royo@user/royo)
[11:17:24] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[11:31:03] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:51:28] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[11:51:37] *** Quits: wavemode (~wavemode@2601:241:0:fc90:7b48:d1cc:a5e5:a126) (Ping timeout: 256 seconds)
[11:53:19] *** Quits: pkap (~pkap@185.213.155.232) (Ping timeout: 256 seconds)
[12:00:51] *** Joins: pkap (~pkap@185.213.155.232)
[12:01:07] *** Joins: MajorBiscuit (~MajorBisc@c-001-001-054.client.tudelft.eduvpn.nl)
[12:30:06] *** Quits: aspe[m] (~dimitrisa@2001:470:69fc:105::d93e) (Quit: You have been kicked for being idle)
[12:35:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[12:44:33] *** Quits: bozo (~bozo@188.252.184.136) (Ping timeout: 256 seconds)
[12:45:03] *** Joins: bozo (~bozo@188.252.185.216)
[12:46:17] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 240 seconds)
[13:01:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:12:04] *** Joins: ehammarstrom (~ehammarst@62-20-203-39-no182.tbcn.telia.com)
[13:14:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[13:15:09] *** Quits: Arnavion (arnavion@user/arnavion) (Ping timeout: 250 seconds)
[13:16:33] *** Joins: Arnavion (arnavion@user/arnavion)
[13:22:56] *** Joins: notzmv (~zmv@user/notzmv)
[13:24:33] *** Quits: pkap (~pkap@185.213.155.232) (Ping timeout: 256 seconds)
[13:25:03] *** Joins: livoreno (~livoreno@user/notzmv)
[13:40:06] *** Quits: bfiedler (~bfiedler@2a0d:d740:107::3) (Read error: Connection reset by peer)
[13:40:21] *** Joins: bfiedler (~bfiedler@193.36.107.1)
[13:49:50] *** Quits: bgiannan (giann@2a01:4f8:141:1272::2) (Ping timeout: 260 seconds)
[13:57:37] *** Quits: semarie (~semarie@user/semarie) (Ping timeout: 240 seconds)
[14:02:27] *** Joins: semarie (~semarie@user/semarie)
[14:17:10] *** Joins: pkap (~pkap@185.213.155.232)
[14:43:20] <motiejus> can folks recommend me a good zig codebase that deals with C APIs (small or moderately sized)? I am starting to integrate a C library to a zig program, and have all sorts of simple questions, which may be answered by looking at some examples.
[14:44:59] <motiejus> at this moment: would like to see examples of converting `[*c]` to something reasonable, converting `**char` to something zig understands (don't yet even know what that will be), and similar.
[15:01:43] *** Joins: notapenguin (~ryu@187.3.254.107)
[15:03:21] <luuk> I'd suggest looking into River, and its dependencies (zig-wlroots and zig-wayland). Afaic, the entire bindings were written by hand, rather than using translate-c, which results in a very clean and readable implementation that looks much more like Zig, and less like C-translated Zig.
[15:03:27] <luuk> The main repo can be found at: https://github.com/riverwm/river
[15:04:03] <motiejus> thanks! Looking. :)
[15:07:38] <motiejus> looks like no double pointers though (grepped `**`) in river nor its deps though. But this looks like a pretty good start for build.zig
[15:09:22] *** Quits: sheb_ (~sheb@31.223.228.71) (Quit: Leaving)
[15:33:24] <novakane> motiejus: here some bindings for fcft that uses double pointers https://sr.ht/~novakane/zig-fcft/
[15:33:33] <novakane> https://codeberg.org/dnkl/fcft/src/branch/master/fcft/fcft.h
[15:37:41] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:41:19] <novakane> you can see here for wlroots too https://gitlab.freedesktop.org/wlroots/wlroots/-/blob/master/include/wlr/types/wlr_seat.h#L684 https://github.com/swaywm/zig-wlroots/blob/master/src/types/seat.zig#L461
[15:43:27] <motiejus> ah that's why I didn't find it, as I was expecting `**` somewhere. Thanks.
[15:44:21] <ifreund> it really depends on context what zig pointer type c pointers should be translated to, which is why translat-c just spits out [*c]
[15:45:22] <ifreund> [*c] is never necessary in manually translated code though, which results in much more ergonomic bindings
[15:48:32] *** Joins: bgiannan (giann@2a01:4f8:141:1272::2)
[15:53:17] <motiejus> I have been trying to figure out how to build a `**char` in zig
[15:53:45] <motiejus> I started with zig translate-c, but realize I should have looked deeper into docs, as translate-c was not helpful in this case
[15:54:02] <motiejus> (I need to pass a list of strings to a C function from zig)
[15:54:58] <motiejus> sentinel-terminated slices sound like what I need, so I am now working to get the right syntax
[15:56:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[15:59:29] <novakane> probably something like `[*][*:0]const u8` if that an array of strings
[16:04:34] <motiejus> yep, sounds like it :) thanks novakane !
[16:06:40] *** Joins: frmdstryr (~jrm@172.58.190.218)
[16:11:49] *** Quits: Kingsquee (~Kingsquee@node-1w7jr9plitnrxjg5a84xze8kz.ipv6.telus.net) ()
[16:18:53] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[16:38:20] *** Quits: tenshi (~red@user/tenshi) (Ping timeout: 252 seconds)
[16:40:34] *** Joins: tenshi (~red@user/tenshi)
[16:41:12] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Remote host closed the connection)
[16:54:31] *** Quits: pkap (~pkap@185.213.155.232) (Quit: Client closed)
[17:11:49] *** Joins: pkap (~pkap@185.213.155.232)
[17:17:02] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:22:20] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[17:27:25] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[17:28:17] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[17:34:28] *** Quits: oats (~thomas@user/oats) (Quit: until later, my friends)
[17:34:55] *** Joins: oats (~thomas@user/oats)
[17:40:59] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:05:05] *** Joins: colinhb (~colinhb@e176058.upc-e.chello.nl)
[18:06:15] *** Quits: colinhb (~colinhb@e176058.upc-e.chello.nl) (Client Quit)
[18:07:10] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[18:09:05] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[18:13:06] *** Joins: arkurious (~arkurious@user/arkurious)
[18:30:49] *** Joins: phaleth (~user@user/phaleth)
[18:32:51] *** Joins: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles)
[18:38:31] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[18:41:45] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:1975:85fc:6d44:5df5)
[18:46:18] *** Quits: rv1sr (~rv1sr@user/rv1sr) ()
[18:52:32] <oats> mikezackles, howdy! nice to have you aboard, hope you enjoy your stay
[18:53:01] *** Quits: pkap (~pkap@185.213.155.232) (Quit: Client closed)
[19:06:59] *** Joins: pkap (~pkap@185.213.155.232)
[19:09:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:10:17] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[19:14:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Client Quit)
[19:19:52] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[19:19:52] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[19:19:52] *** Joins: tane (~tane@user/tane)
[19:24:54] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:1975:85fc:6d44:5df5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:27:21] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[19:29:07] *** Quits: frmdstryr (~jrm@172.58.190.218) (Ping timeout: 250 seconds)
[19:29:23] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[19:35:37] *** Quits: ehammarstrom (~ehammarst@62-20-203-39-no182.tbcn.telia.com) (Ping timeout: 240 seconds)
[19:39:33] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[19:43:39] *** Quits: pkap (~pkap@185.213.155.232) (Ping timeout: 256 seconds)
[19:43:56] <mikezackles> thanks, oats :)
[19:52:51] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[19:54:28] <Piraty> hi. i need to start a small project soon to scratch someone else's RL itch and i'm keen on using it as an excuse to dive into zig again. are there libs (or even stdlib?) yet for doing hypertext requests and parsing json?
[19:58:12] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:00:36] <tsmanner> Piraty there is `std.json` already, I'm not sure about hypertext requests. https://github.com/ziglang/zig/blob/0.9.0/lib/std/json.zig
[20:01:48] <Piraty> thanks! 
[20:02:44] <tsmanner> Piraty this might also be helpful on the hypertext side https://aquila.red/1/truemedian/zfetch though I don't have any experience with it
[20:03:13] <Piraty> will look into it, thanks a bunch!
[20:03:38] <tsmanner> Cheers!
[20:08:28] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[20:22:06] *** Joins: jemius (~imperator@2001:16b8:2d8f:ba00:24ec:341e:2900:8aa0)
[20:25:00] *** Joins: jjido (~Denis@94.4.149.217)
[20:27:56] <jemius> Here's a medium-interesting paper about the dead-store removal by C-compilers we talked about a week ago
[20:27:58] <jemius> https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-yang.pdf
[20:28:58] <jemius> tl;dr: There is no solution guaranteed 100% to work everywhere, as you'd want it with portable C
[20:47:30] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[20:48:01] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[20:54:55] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:1975:85fc:6d44:5df5)
[21:00:37] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:01:51] *** Joins: wavemode (~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2)
[21:06:00] *** Joins: pkap (~pkap@185.209.196.164)
[21:19:47] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01) (Remote host closed the connection)
[21:20:07] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:8192:df18:486a:6454)
[21:20:27] *** Joins: frmdstryr (~jrm@172.58.190.218)
[21:38:58] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[21:40:20] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[21:40:44] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:1975:85fc:6d44:5df5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:47:17] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:8192:df18:486a:6454) (Remote host closed the connection)
[21:48:41] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:8192:df18:486a:6454)
[21:50:16] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:8192:df18:486a:6454) (Remote host closed the connection)
[21:50:57] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:8192:df18:486a:6454)
[21:52:12] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[21:53:49] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:8192:df18:486a:6454) (Client Quit)
[21:54:08] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:8192:df18:486a:6454)
[21:54:19] *** Quits: MajorBiscuit (~MajorBisc@c-001-001-054.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[22:00:31] <ikskuh> jemius: luckily, zig is not C ;)
[22:01:02] <ikskuh> and 100% secure memory scrubbing cannot be done in userspace
[22:01:04] <ikskuh> anyways
[22:01:15] *** Joins: todo75 (~todo75@user/todo75)
[22:01:30] <ikskuh> but you have to use both volatile and atomics/barriers to get a truly correct implementation
[22:01:56] <ikskuh> volatile stores alone might not work on MIPS for example
[22:02:08] <ikskuh> which requires explicit memory barriers
[22:05:31] <jemius> computers are just terrible
[22:05:40] <ikskuh> no, they are not designed for security *shrugs*
[22:06:24] <jemius> The last days I annoy everyone who does not run away fast enough with Andrew's quote from that talk. "Ask an engineer if entering a plane is safe [...] ask a programmer if voting machines are a good idea"
[22:07:55] <ikskuh> ^^
[22:08:26] <ikskuh> i still think dead store elimination is a good thing
[22:10:47] <jemius> dunno man. What do I have a low level language for, if not to know what is going to happen? I placed memset() there for a reason, Mr Compiler. If I wanted someone to take care of everything stupid, I'd program Python
[22:10:50] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[22:11:46] <ikskuh> what about that case:
[22:11:48] <ikskuh> a = 2;
[22:11:50] <ikskuh> a = 3;
[22:11:54] <ikskuh> what should the compiler emit?
[22:11:59] <ikskuh> two or one instruction?
[22:12:12] <ikskuh> i see enough code in the wild that is basically
[22:12:22] <ikskuh> Struct foo = { 0 }; memset(&foo, 0, sizeof(Struct));
[22:12:28] <wavemode> back when the term "high level language" was coined, it referred to C and similar languages. true "low level" was asm
[22:12:52] *** Joins: ehammarstrom (~ehammarst@62-20-203-39-no182.tbcn.telia.com)
[22:12:56] <ikskuh> jemius: especiall as using memset() to zero memory is definitly wrong
[22:13:02] <ikskuh> even if the compiler would emit the call
[22:13:07] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:1975:85fc:6d44:5df5)
[22:13:21] <jemius> ikskuh, [obvious queston here]
[22:13:51] <ikskuh> caches
[22:14:11] <ikskuh> in a multicore environment, your memset wouldn't be necessarily visible on other cores
[22:14:20] <ikskuh> if you don't explicitly flush the caches 
[22:14:46] <jemius> The cache line will get flushed sooner or later. Or is your argument that the memory cells below might surivive zeroing in any case?
[22:14:48] <ikskuh> which is totally ignored in that paper, because they probably only tested on x86_64, which has this effect implicitly
[22:15:01] <Franciman> ikskuh: is this a well known problem or only a "problem" of the zig model?
[22:15:10] *** Quits: ehammarstrom (~ehammarst@62-20-203-39-no182.tbcn.telia.com) (Remote host closed the connection)
[22:15:23] <ikskuh> it's a problem with any program
[22:15:34] <ikskuh> it's not about flushing, but refetching the same cache line
[22:16:31] *** Quits: pkap (~pkap@185.209.196.164) (Quit: Client closed)
[22:16:34] <ikskuh> the problem is that another core might read your secure key while your core can already see that its cleared to zero
[22:16:42] <ikskuh> as writes are not necessarily directly visible
[22:17:06] <ikskuh> i made a nice demo program for andrew one day where the effects of all atomic semantics where clearly visible due to different instructions being emitted
[22:17:13] <ikskuh> give me a minute, i'll reconstruct
[22:23:31] *** Quits: frmdstryr (~jrm@172.58.190.218) (Ping timeout: 250 seconds)
[22:24:41] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[22:25:29] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[22:26:11] <tsmanner> ikskuh jemius I can say pretty confidently that there are CPUs out that there will happily gather multiple stores to one cache line into a single cache operation.  The System Z mainframe processor, for example, will gather stores to L1 if the instructions are close enough together in the issue pipelines.  It will only write to L2 if the line is evicted from L1 or a software command to flush it is executed.  The same is
[22:26:11] <tsmanner>  true from L2->L3 and L3->L4 on those systems.  It's called Total Store Ordering (TSO), there's a good primer of it here https://www.cs.utexas.edu/~bornholt/post/memory-models.html
[22:27:04] <ikskuh> ep
[22:27:05] <ikskuh> *ep
[22:27:06] <tsmanner> TSO systems also typically don't require a store anywhere in the system to invalidate all read-only copies of a cache line elsewhere
[22:27:08] <ikskuh> *yep
[22:27:23] <tsmanner> *when a store occurs somewhere else
[22:28:21] <jemius> tsmanner, https://31.media.tumblr.com/df971a0c77fc08721827e9b277f521bd/tumblr_inline_n4e4w0wHur1rvlcgk.gif
[22:28:27] <jemius> ok, well, I guess that's a point
[22:28:39] <cr1901> "TSO systems also typically don't require a store anywhere in the system to invalidate all read-only copies of a cache line when a store occurs somewhere else"?
[22:29:22] <ikskuh> jemius: https://zig.godbolt.org/z/coq8Mq5oM
[22:30:16] <ikskuh> write effects on mips are only really visible when you call sync after the store
[22:30:30] <cr1901> I think I'm confused because the first part of that sentence says "typically don't require a store anywhere"...
[22:30:48] <cr1901> but the last part of the sentence says "when a store occurs somewhere else". Which is it :P?
[22:31:59] *** Quits: Evo2 (~hastings@aj158235.dynamic.ppp.asahi-net.or.jp) (Ping timeout: 250 seconds)
[22:32:15] <tsmanner> cr1901 In a multi-CPU environment, especially in the presence of out-of-order execution, it's not possible to prove that the other core didn't observe the value pre-store.  The synchronization point for MP coherence in the system is that loads of line X occurring after a store to line X in the same CPU must observe the older store.
[22:32:50] <tsmanner> yeah, i realized after I added that that I had already said it... "TSO systems also typically don't require a store anywhere in the system to invalidate all read-only copies of a cache line elsewhere" was what I meant
[22:35:49] <Piraty> jemius: which talk is that you refer to?
[22:36:59] <andrewrk> motiejus, for argv this is the zig type: [*:null]const ?[*:0]const u8
[22:37:21] <cr1901> tsmanner: Sorry I still don't follow. "loads of line X occurring after a store to line X in the same CPU must observe the older store." >>
[22:37:29] <andrewrk> if it seems confusing, read it from right to left
[22:37:35] <jemius> Piraty, "The Road to Zig 1.0" IIRC
[22:37:48] <cr1901> If this is concerning the POV of a single core, then I would hope that the value you wrote would be the value read
[22:38:30] <cr1901> A CPU that wrote one thing but then read another (without the interference of a different core) sounds... not ideal :P
[22:39:24] *** Joins: pkap (~pkap@185.209.196.134)
[22:39:48] *** Quits: todo75 (~todo75@user/todo75) (Ping timeout: 250 seconds)
[22:39:56] <ikskuh> cr1901: now let's talk about branch delay slots 
[22:40:41] <cr1901> Okay, what about delay slots?
[22:40:53] <ikskuh> execute code after jumps
[22:41:37] <tsmanner> cr1901 Yeah, basically as long as you own an exclusive (writeable) copy of a line in a core, the store ordering is good.  If you have a read-only copy, your core may be notified of an exclusive fetch somewhere else, but isn't obligated to stop using the line, meaning that stores from that other core may or may not be observed here.
[22:42:03] *** Joins: Arw| (~Arwalk@lfbn-dij-1-972-242.w90-125.abo.wanadoo.fr)
[22:42:10] <cr1901> If I store 0x00 to mem 0x00000001 in the delay slot, I would be concerned if a load from 0x00000001 after the delay slot didn't read 0x00
[22:42:47] <cr1901> hmmm, maybe... :o
[22:42:57] *** Quits: Arw- (~Arwalk@lfbn-dij-1-972-242.w90-125.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[22:43:21] <Piraty> using a google online spreadsheet for transparency isn't really ideal nor very accesible
[22:43:28] <ikskuh> no, delay slots are about execution oder
[22:43:30] <ikskuh> *order
[22:45:05] <wavemode> Piraty what problems are you having with it?
[22:50:30] <andrewrk> is this about the ZSF financials? I just checked, and it is very straightforward to use private browsing mode to download the spreadsheet as an excel file which is convertable to any format with libreoffice
[22:52:48] *** Quits: ofelas (~ofelas@ti0071a400-5198.bb.online.no) (Remote host closed the connection)
[22:53:41] *** Quits: wavemode (~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2) (Quit: Client closed)
[22:53:53] *** Joins: wavemode (~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2)
[22:59:31] <cr1901> tsmanner: I'm in over my head, but when you say "invalidate all read-only copies", that means "if the cores w/ read-only copies try to read from said cache line, they must wait until the CPU w/ read-write access to the line has written to it", correct?
[22:59:43] *** Quits: Arw| (~Arwalk@lfbn-dij-1-972-242.w90-125.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[23:01:02] *** Joins: Arw- (~Arwalk@lfbn-dij-1-964-247.w90-125.abo.wanadoo.fr)
[23:01:42] <cr1901> I don't think I grok how "your core may be notified of an exclusive fetch somewhere else, but isn't obligated to stop using the line" and "read-only copies are invalidated" are both simultaneously possible :P
[23:03:33] *** Joins: todo75 (~todo75@user/todo75)
[23:05:57] *** Quits: pkap (~pkap@185.209.196.134) (Ping timeout: 256 seconds)
[23:06:50] <tsmanner> cr1901 sorry, I work in cache design so I tend to fall into jargon quickly.  I mean that the core with the read-write copy doesn't prevent other cores from continuing to read the cache line.  There's a mechanism for notifying those cores that someone did get read-write access, but no notification when a write actually occurs.  That means that the system does not guarantee that readers see writes right now, only that 
[23:06:50] <tsmanner> they will eventually see the writes.
[23:07:32] *** Joins: frmdstryr (~jrm@172.58.203.20)
[23:07:36] *** Joins: Evo2 (~hastings@aj158235.dynamic.ppp.asahi-net.or.jp)
[23:08:49] <cr1901> tsmanner: Thanks, and it's not your fault. CPUs got really damn difficult once distributed systems reared their ugly head. I find it very mentally taxing, so I have trouble keeping up :P
[23:16:05] <tsmanner> cr1901 reminds me of the quote "There are only two hard things in Computer Science: cache invalidation and naming things."  Honestly, I don't understand it all either haha
[23:16:35] <cr1901> and off-by-one errors
[23:16:37] <wavemode> the two hard things are cache invalidation, naming things, and off-by-one errors
[23:21:22] <tsmanner> I think the original quote was by Phil Karlton, the off-by-one thing was added later and it turned into the (great) meme
[23:21:50] <mikezackles> hmm, pretty sure it's just one hard thing: cache invalidation and naming things
[23:24:46] *** Joins: Arw| (~Arwalk@lfbn-dij-1-964-247.w90-125.abo.wanadoo.fr)
[23:25:17] *** Quits: Arw- (~Arwalk@lfbn-dij-1-964-247.w90-125.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[23:31:38] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[23:32:47] <andrewrk> good one, mikezackles 
[23:41:13] <mikezackles> :)
[23:46:33] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:46:34] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[23:50:05] *** Quits: duck2 (~duck2@146.185.156.161) (Quit: Ping timeout (120 seconds))
[23:59:27] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
