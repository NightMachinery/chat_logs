[00:08:45] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[00:11:25] <jcowan> Like set-top boxes
[00:11:51] *** Joins: hobo (~hobo@69.218.33.204)
[00:16:58] *** Quits: varjagg (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 260 seconds)
[00:20:57] *** Joins: varjagg (~user@ti0040a400-5479.bb.online.no)
[00:25:36] *** Quits: varjagg (~user@ti0040a400-5479.bb.online.no) (Remote host closed the connection)
[00:26:04] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[00:26:15] *** Quits: brettgilio (~brettgili@x-node.gq) (Ping timeout: 250 seconds)
[00:26:15] *** Quits: herlocksholmes (~herlocksh@x-node.gq) (Ping timeout: 250 seconds)
[00:26:23] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[00:28:41] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 245 seconds)
[00:30:26] *** Joins: varjagg (~user@ti0040a400-5479.bb.online.no)
[00:34:06] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[00:34:25] *** Joins: kuao (uid504326@id-504326.helmsley.irccloud.com)
[00:50:32] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:51:04] *** Joins: aartaka (~aartaka@5.1.53.225)
[01:01:42] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[01:03:31] *** Joins: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[01:04:57] *** Joins: akoana (~ah@user/akoana)
[01:05:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:06:12] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 260 seconds)
[01:08:17] *** Quits: ahorse (~horse@corgi.boiled.dog) (Quit: Lost terminal)
[01:08:31] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[01:09:08] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[01:14:15] *** Quits: cage (~cage@dynamic-adsl-94-34-16-50.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:25:16] <semz> I'm not even sure where you would draw the line between a very advanced Common Lisp library and a new language, especially when you allow implementation extensions into the picture, e.g. to get more precise control over generated code.
[01:28:17] <semz> If I remember correctly, there is a library that adds an ML-like type system and lets you mix that freely with normal CL code. Is this still CL or a new lisp?
[01:29:30] <semz> So I'm not sure how meaningful the question is. But I'd definitely say that much too few "recent" languages offer something over CL.
[01:30:32] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[01:30:44] <mzan> semz: the name of the library/language is Coalton https://github.com/coalton-lang/coalton
[01:30:52] <engblom> I would say that Clojure offers something over CL, but being forced to run on java or javascript is a drawback.
[01:31:09] <hayley> lol
[01:31:43] <semz> > Coalton is an efficient, statically typed functional programming language [â€¦]
[01:31:54] <semz> I guess that at least explains how its authors would answer my question, lol.
[01:32:43] <White_Flame> my only real interest in "new" languages is getting over the entire imperative paradigm.  For anything else, CL is fine
[01:32:51] *** Quits: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 245 seconds)
[01:33:08] <White_Flame> or put differently, CL is IMO the current local maxima
[01:37:01] *** Joins: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[01:39:16] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:40:00] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 268 seconds)
[01:42:35] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:43:48] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:44:03] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:45:09] <mzan> semz: to be fair some very advanced libraries of mainstream PL can be seen a domain-specific-languages, or in extreme cases as distinct languages.
[01:45:39] <mzan> Many interactions with external DBMS are for sure based on different paradigms/languages.
[01:46:23] <mzan> But obviously in case of CL the situation is exhagerated.
[01:47:38] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:49:16] *** Quits: varjagg (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 268 seconds)
[01:50:21] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[01:51:45] *** boro is now known as borodust
[01:52:22] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:58:41] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[01:58:41] *** ChanServ sets mode: +o MichaelRaskin
[02:04:37] <rotateq> watch out hayley, or the crabs run us down too
[02:06:54] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:08:02] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:08:20] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:08:58] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:10:20] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:10:28] *** Joins: x88x88x (~x88x88x@218.212.160.154)
[02:10:43] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:13:28] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[02:13:38] *** Joins: x88x88x94 (~x88x88x@218.212.160.154)
[02:13:58] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:15:39] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:16:04] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:17:31] *** Quits: x88x88x (~x88x88x@218.212.160.154) (Ping timeout: 256 seconds)
[02:20:21] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[02:33:08] *** Quits: pve (~pve@188-67-171-65.bb.dnainternet.fi) (Quit: leaving)
[02:33:28] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 260 seconds)
[02:41:01] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[02:41:21] *** Joins: robin (~robin@user/terpri)
[02:47:34] *** Quits: x88x88x94 (~x88x88x@218.212.160.154) (Ping timeout: 256 seconds)
[02:49:26] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:49:45] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:51:03] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[03:01:57] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:03:33] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:03:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:04:02] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[03:04:30] *** Quits: cosimone` (~user@93-47-228-243.ip115.fastwebnet.it) (Ping timeout: 268 seconds)
[03:06:57] *** Quits: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 268 seconds)
[03:08:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[03:10:02] *** Quits: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864) (Ping timeout: 240 seconds)
[03:17:37] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:22:31] *** Joins: X-Scale` (~ARM@25.55.43.5.rev.vodafone.pt)
[03:23:03] *** Quits: X-Scale (~ARM@31.22.203.240) (Ping timeout: 250 seconds)
[03:26:02] *** Quits: gaqwas (~john@dynamic-077-009-049-055.77.9.pool.telefonica.de) (Ping timeout: 240 seconds)
[03:26:59] *** Joins: X-Scale (~ARM@83.223.225.150)
[03:28:16] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 245 seconds)
[03:29:09] *** Quits: X-Scale` (~ARM@25.55.43.5.rev.vodafone.pt) (Ping timeout: 268 seconds)
[03:30:37] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:34:56] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 245 seconds)
[03:41:35] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:42:02] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:43:06] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:43:46] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:44:39] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:45:02] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[03:45:13] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:53:35] *** Quits: prxq_ (~quassel@x4db4e642.dyn.telefonica.de) (Ping timeout: 250 seconds)
[03:53:50] *** Joins: prxq (~quassel@x4db58cd3.dyn.telefonica.de)
[03:56:02] *** Quits: splittist (sid17737@tinside.irccloud.com) (Ping timeout: 240 seconds)
[03:56:32] *** Quits: conjunctive (sid433686@helmsley.irccloud.com) (Ping timeout: 240 seconds)
[03:56:32] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 240 seconds)
[03:56:52] *** Quits: jmercouris (sid438340@hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:57:01] *** Joins: hubvu (sid495858@user/hubvu)
[03:57:01] *** Joins: jmercouris (sid438340@id-438340.hampstead.irccloud.com)
[03:57:01] *** Joins: splittist (sid17737@id-17737.tinside.irccloud.com)
[03:57:14] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[03:59:52] *** Joins: amb007 (~a_bakic@208.245.204.77.rev.sfr.net)
[03:59:52] *** Quits: amb007 (~a_bakic@208.245.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[04:00:06] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[04:02:01] *** Quits: iisi (sid19824@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[04:03:16] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (Ping timeout: 245 seconds)
[04:05:56] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[04:07:26] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[04:10:00] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[04:10:39] *** Joins: Inline (~Inline@2a02:908:1252:7a80::7)
[04:30:49] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[05:01:26] *** Joins: s-liao (~s-liao@101.86.101.83)
[05:07:49] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[05:13:19] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 250 seconds)
[05:17:02] *** Quits: rotateq (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:31:20] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[05:38:19] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:39:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[05:39:52] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:44:48] *** Joins: notzmv (~zmv@user/notzmv)
[05:51:35] *** Joins: Oladon (~olad@98.43.81.226)
[05:55:29] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[06:04:04] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[06:14:32] *** Joins: s-liao (~s-liao@101.86.101.83)
[06:17:50] *** Joins: gpiero_ (~quassel@camale.rm-rf.it)
[06:19:51] *** Quits: gpiero (~quassel@camale.rm-rf.it) (Ping timeout: 250 seconds)
[06:20:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[06:31:24] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[06:35:57] *** Joins: s-liao (~s-liao@101.86.101.83)
[06:55:01] *** Joins: prxq_ (~quassel@x4db31002.dyn.telefonica.de)
[06:55:07] *** Quits: prxq (~quassel@x4db58cd3.dyn.telefonica.de) (Ping timeout: 268 seconds)
[06:55:46] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 245 seconds)
[06:58:02] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Ping timeout: 256 seconds)
[07:02:23] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:05:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:09:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[07:10:03] *** Joins: karlosz (~karlosz@47.151.136.69)
[07:15:58] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[07:27:04] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:29:56] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[07:30:50] <beach> Good morning everyone!
[07:57:40] <phantomics> Morning beach
[08:06:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:13:28] <Guest74> well that's interesting, my inferior-lisp says fatal error encountered in SBCL pid 2117 tid 6661: and yet my window manager is still running.
[08:15:09] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[08:20:31] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[08:24:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[08:24:44] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[08:31:13] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:31:28] *** Quits: gko (~user@user/gko) (Remote host closed the connection)
[08:33:22] *** Joins: semz (~none@user/semz)
[08:40:54] *** Joins: s-liao (~s-liao@101.86.101.83)
[08:44:32] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[08:44:57] *** Joins: Jing (~hedgehog@2604:a840:3::1065)
[08:53:08] *** Quits: kuao (uid504326@id-504326.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[08:58:44] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[09:02:26] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 245 seconds)
[09:04:25] *** Joins: s-liao (~s-liao@101.86.101.83)
[09:13:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:14:02] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[09:17:26] *** Joins: Oladon (~olad@98.43.81.226)
[09:33:26] *** Joins: gko (~user@user/gko)
[09:35:42] <susam> Good morning, beach!
[09:49:38] *** Joins: rain3 (~rain3___@79.115.252.154)
[10:07:03] *** Joins: s-liao (~s-liao@101.86.101.83)
[10:07:19] *** Quits: s-liao (~s-liao@101.86.101.83) (Client Quit)
[10:12:05] *** Joins: s-liao (~s-liao@101.86.101.83)
[10:15:48] *** Joins: neocron (~NeoCron@p200300c4cf3f7e00320b69bf1a44e74d.dip0.t-ipconnect.de)
[10:18:37] *** Quits: Doraemon (~NeoCron@p200300c4cf1c0a00df145b32079df496.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[10:40:45] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[10:56:36] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:05:19] *** Quits: s-liao (~s-liao@101.86.101.83) (Quit: Client closed)
[11:12:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:13:54] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[11:14:27] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[11:15:44] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Quit: Leaving)
[11:17:20] *** Joins: pve (~pve@188-67-191-164.bb.dnainternet.fi)
[11:27:01] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[11:35:21] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 245 seconds)
[11:42:45] *** Joins: X-Scale` (~ARM@25.55.43.5.rev.vodafone.pt)
[11:43:44] *** Quits: X-Scale (~ARM@83.223.225.150) (Ping timeout: 268 seconds)
[11:44:54] *** X-Scale` is now known as X-Scale
[11:46:49] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[11:52:52] *** Joins: nature (~nature@45.32.235.173)
[11:58:50] *** Joins: gaqwas (~john@dynamic-077-004-185-088.77.4.pool.telefonica.de)
[12:04:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:08:03] *** Joins: varjagg (~user@ti0040a400-5479.bb.online.no)
[12:12:45] *** Quits: varjagg (~user@ti0040a400-5479.bb.online.no) (Remote host closed the connection)
[12:14:44] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[12:20:30] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 256 seconds)
[12:28:17] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:35:00] *** Joins: Lycurgus (~juan@98.4.112.204)
[12:38:46] *** Joins: notzmv (~zmv@user/notzmv)
[12:49:25] *** Joins: s-liao (~s-liao@101.86.101.83)
[13:04:34] *** Joins: ns12 (~ns12@user/ns12)
[13:05:30] <ns12> Can defstruct be implemented using CLOS?
[13:06:00] <lisp123> ns12: Of course, its very easy to do so
[13:06:18] <lisp123> (there might be some minor points I am missing)
[13:07:19] <lisp123> something like this https://plaster.tymoon.eu/view/2729#2729
[13:07:37] <ns12> Can CLOS be implemented using structs?
[13:07:51] <lisp123> With Macros yes
[13:08:34] <ecraven> I've implemented something like tinyclos in a normal Scheme, and the main task was generic functions, once those work, it's just more implementing
[13:09:06] <lisp123> https://github.com/binghe/PCL
[13:09:26] <beach> ns12: Adding CLOS to a pre-ANSI Common Lisp system mainly requires the addition of funcallable-standard-object.
[13:09:39] <beach> ns12: What is the reason for your question?
[13:09:55] <ns12> Are there libraries that provide standard compliant structures, but with extra features?
[13:10:33] <ns12> beach: I want to write a standards compliant defstruct implementation as a challenge.
[13:11:22] <beach> ns12: The macro only?  Assuming the implementation already has a STRUCTURE-OBJECT and a STRUCTURE-CLASS?  That's just a matter of macrology.
[13:12:23] <beach> I said "just", but it's pretty messy actually.
[13:13:38] <ns12> I still have much to learn about Common Lisp, so this might be some kind of long-term project.
[13:13:59] <beach> I see.
[13:15:49] <ns12> I have read many Common Lisp programs, written some programs in Common Lisp, read PAIP, ANSI Common Lisp, Practical Common Lisp, and parts of the HyperSpec. But I still feel a overwhelmed by the flexibility of this wonderful language.
[13:16:20] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[13:18:01] *** Quits: srji_ (~srji@static.43.141.203.116.clients.your-server.de) (Quit: leaving)
[13:18:12] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[13:18:26] <ns12> I will probably try to read CLtL, but I am concerned that it is not 100% ANSI Common Lisp. Is there some kind of document that summarizes the differences between CLtL and ANSI Common Lisp?
[13:18:53] <lisp123> https://stackoverflow.com/questions/108537/what-are-the-main-differences-between-cltl2-and-ansi-cl
[13:20:29] <beach> ns12: The only remedy I can think of for being overwhelmed is to practice more and read even more.
[13:23:02] *** Joins: ebrasca (~user@librepanther.com)
[13:28:03] <beach> ns12: One of the documents you may be interested in at some point is the AMOP.  It explains how CLOS works, and also how it can be implemented.
[13:30:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:32:05] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[13:33:43] *** Lord_of_Life_ is now known as Lord_of_Life
[13:35:59] *** Joins: rotateq (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de)
[13:43:54] *** Joins: yournick (~chee@218.212.160.154)
[13:45:38] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[13:50:30] *** Quits: yournick (~chee@218.212.160.154) (Ping timeout: 265 seconds)
[13:52:47] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[13:59:08] *** Joins: x88x88x (~chee@gateway/vpn/pia/x88x88x)
[14:01:30] *** Quits: x88x88x (~chee@gateway/vpn/pia/x88x88x) (Client Quit)
[14:02:52] *** Joins: eomyulkes (~chee@gateway/vpn/pia/x88x88x)
[14:03:17] *** Quits: eomyulkes (~chee@gateway/vpn/pia/x88x88x) (Client Quit)
[14:03:53] *** Joins: x88x88x (~chee@gateway/vpn/pia/x88x88x)
[14:14:38] <ns12> beach: Thanks for the advice.
[14:19:03] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[14:27:11] *** Joins: cage (~cage@dynamic-adsl-94-34-16-50.clienti.tiscali.it)
[14:35:32] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[14:39:01] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:01:02] *** Quits: x88x88x (~chee@gateway/vpn/pia/x88x88x) (Ping timeout: 240 seconds)
[15:04:50] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[15:06:01] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[15:09:06] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 245 seconds)
[15:13:52] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[15:14:01] *** Joins: varjagg (~user@ti0040a400-5479.bb.online.no)
[15:18:24] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[15:20:02] *** Joins: taiju (~taiju@210.160.37.43)
[15:24:40] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[15:26:56] *** Quits: taiju (~taiju@210.160.37.43) (Ping timeout: 256 seconds)
[15:27:53] *** Joins: random-nick (~random-ni@87.116.180.220)
[15:29:23] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[15:29:46] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[15:31:30] *** Joins: aeth (~aeth@user/aeth)
[15:32:34] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[15:36:23] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[15:39:47] <pve> Hi, is there a big difference between doing (eval `(defmethod foo ...)) and creating the method "manually" followed by (add-method #'foo my-new-method)?
[15:44:45] *** Joins: X-Scale` (~ARM@92.250.96.158)
[15:45:02] *** Quits: X-Scale (~ARM@25.55.43.5.rev.vodafone.pt) (Ping timeout: 240 seconds)
[15:46:44] *** X-Scale` is now known as X-Scale
[15:50:57] <lisp123> pve: that is a good equestion, that I'm also keen on
[15:51:31] <lisp123> if you are speaking in terms of writing these forms in a file, then obviously, the latter is faster
[15:52:10] <lisp123> but working in a live, running image, given that defmethod is already a top-level form, my suspicion is that they might be the same
[15:52:17] <lisp123> and the former is easier to read
[15:52:29] <lisp123> keen to get a "correct" answer
[15:55:28] <pve> lisp123: when you say "faster", what do you mean?
[15:55:58] <pve> do you mean faster to make and install the method?
[15:57:06] <lisp123> defmethod is a macro, so some of its work will be done in compile time vs. load time
[15:57:14] <lisp123> whereas eval is a function so everything happens during run time
[15:59:04] <lisp123> Sorry, I guess you were referring to doing the parts of defmethod manaully in your latter part --> so what I just said may not apply directly, but to the extent there are any macros within those parts, it will be faster
[15:59:42] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:00:11] <pve> lisp123: yes, I mean (make-instance some-method-class ... ) and the whole make-method-lambda deal
[16:01:33] <lisp123> I see. Will wait for someone else to respond, but in the meantime (I have to jet), here's the source of defmethod (https://plaster.tymoon.eu/view/2730#2730)
[16:06:29] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[16:06:48] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[16:08:20] *** Joins: igemnace (~ian@user/igemnace)
[16:15:04] *** Joins: taiju (~taiju@215.185.218.133.dy.bbexcite.jp)
[16:22:36] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[16:25:45] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[16:34:16] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[16:41:33] *** Joins: dra (~dra@2a04:4540:641d:2a00:29cc:5e9c:41ed:f149)
[16:43:38] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[16:47:31] *** Quits: etiago- (~etiago@cpc120220-heme13-2-0-cust103.9-1.cable.virginm.net) (Ping timeout: 250 seconds)
[16:48:02] *** Quits: taiju (~taiju@215.185.218.133.dy.bbexcite.jp) (Read error: Connection reset by peer)
[16:50:54] *** Joins: etiago (~etiago@user/etiago)
[16:51:08] *** Joins: taiju (~taiju@215.185.218.133.dy.bbexcite.jp)
[16:51:52] *** Joins: McParen (~mcp@user/mcparen)
[16:53:59] *** Joins: mingus (~jan-magnu@auth-147-189.anyconnect.uib.no)
[16:58:20] <beach> pve: Using EVAL, you can't have the method function be a closure.
[16:59:11] <beach> clhs defmethod
[16:59:14] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm
[17:03:51] <pve> beach: right, thanks
[17:05:12] <pve> beach: but is defmethod the only way to create a new method using CL only (i.e. no MOP)?
[17:05:59] <beach> No, you can use MAKE-INSTANCE on STANDARD-METHOD.
[17:06:08] <beach> clhs standard-method
[17:06:08] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/t_std_me.htm
[17:06:29] <pve> ah, yes, I think I meant make-method-lambda
[17:07:28] <beach> Right.  That's more complicated.
[17:11:16] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:11:48] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 268 seconds)
[17:14:33] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:15:01] *** Joins: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[17:15:53] *** Joins: s-liao (~s-liao@101.86.101.83)
[17:17:32] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 240 seconds)
[17:17:39] *** Quits: nature (~nature@45.32.235.173) (Remote host closed the connection)
[17:18:04] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:20:38] *** Quits: paule32 (~paule32@user/paule32) (Quit: Leaving)
[17:21:39] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:21:41] *** Joins: nature (~nature@45.32.235.173)
[17:21:46] *** Quits: Inline (~Inline@2a02:908:1252:7a80::7) (Quit: Leaving)
[17:25:54] *** Quits: nature (~nature@45.32.235.173) (Client Quit)
[17:26:00] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1)
[17:29:12] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1) (Remote host closed the connection)
[17:31:06] *** Joins: lagash (lagash@lagash.shelltalk.net)
[17:34:17] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[17:36:20] <pjb> ns12: com.informatimago.common-lisp.cesarum.utility:define-structure-class implements the defstruct API using CLOS, so I would say it qualify as a library providing standard compliant structures, but with extra features.
[17:36:31] <pjb> ns12: you could rename it ns12-cl:defstruct if you want.
[17:38:42] <pjb> pve: manually, you'd have to define the generic function first: (defgeneric foo â€¦)
[17:39:11] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1)
[17:39:32] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[17:39:49] <pjb> pve: and perhaps other implementation specific details your implementation defmethod doesâ€¦
[17:42:38] *** Quits: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 268 seconds)
[17:54:56] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 245 seconds)
[17:56:02] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 265 seconds)
[17:58:18] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:10:59] *** Quits: s-liao (~s-liao@101.86.101.83) (Quit: Client closed)
[18:15:20] *** Joins: jealousmonk (~user@2804:431:e7c5:a365:cf0:d781:d307:9a26)
[18:16:19] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[18:29:03] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[18:30:08] *** Joins: anddam (~anddam@user/anddam)
[18:39:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:43:53] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[18:44:13] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[18:52:31] *** Joins: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[18:54:55] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 250 seconds)
[18:57:44] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[18:59:45] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[19:03:35] <Guest74> so I'm revisiting and cleaning up my ioctl stuff and see that i've kept c style names for structs and constants.  I'm wondering if I should keep them exactly like this since that's what all the manuals/tutorials on the internet say, or lispify them?
[19:05:54] <pjb> Guest74: depends.  I split by ffi stuff in two layers. a lower layer where I stick to C, and a higher layer, where I lispify.
[19:07:12] <Guest74> I've thought of that, but since they're just ioctls and not actual ffi to a library I'm wondering if that's even worth it.
[19:08:38] <Guest74> I'm also wondering if it's a terrible idea to replace all foreign structs with just static-vectors and then have lisp side functions to access the array as the struct slots.  I'm not sure if that is more work, or faster for setting/getting.
[19:22:22] *** Joins: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x)
[19:34:30] *** Quits: ebrasca (~user@librepanther.com) (Read error: Connection reset by peer)
[19:41:03] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[19:44:19] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[19:48:42] <Guest74> anybody know how to translate this to lisp from c?  1000000000UL/a I have no idea what's going on in the c.
[19:49:22] <pjb> It's just (/ 1000000000 a)
[19:49:52] <pjb> if a is an int type, (truncate 1000000000 a)
[19:50:09] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[19:50:18] <pjb> Guest74: type: /nick somehonestnick
[19:50:23] <Guest74> if it's not?
[19:50:32] <pjb> then just (/ 1000000000 a)
[19:51:07] <Guest74> how does a real fit into an unsignedlong?
[19:53:01] <Guest74> maybe doesn't matter, doesn't seem to be used anywhere anyways.
[19:53:13] *** Joins: Alfr (~Alfr@user/alfr)
[19:57:01] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[20:06:13] <semz> Guest74: If a is a float or double, 1000000000 would be converted to that first. / does the same thing in CL if a is a floating-point number.
[20:07:16] <semz> If you translate C names to Lisp names, I'd recommend being extra careful that your scheme is consistent and intuitive though; speaking from experience, it's infuriating when you have to look up how each name was translated in the manual when you're familiar with the underlying foreign API.
[20:10:53] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[20:13:27] <beach> On the rare occasions that I had to use a Lisp interface to a C library, I found it infuriating to have to consult the manual for the C library at all.  I expected a consistent, well documented Lisp interface that did not refer to the underlying C library or its concepts.
[20:25:09] <Guest74> semz: that's what I was thinking.
[20:25:41] <Guest74> beach: it's not a foreign library, it's just ioctls.  How do you handle interfacing with the linux kernel?
[20:27:24] <beach> I haven't given any thought to that.  But some day I guess I will have to, given that I want a Lisp-y POSIX library at some point.
[20:28:29] <beach> Like the one I started here: http://metamodular.com/POSIX-API/
[20:29:40] <Guest74> I figure the lispy interface should be built on ioctls, since, as far as i understand, that's how you interact with the kernel.  the ioctl level being not so lispy.
[20:30:55] <Guest74> I figure the person writing the lispy interface wouldn't mind the c-ness of the ioctl interface since all documentation for the kernel is written that way.
[20:31:21] *** Quits: dra (~dra@2a04:4540:641d:2a00:29cc:5e9c:41ed:f149) (Quit: Leaving)
[20:34:59] <Guest74> though at the same time, I'd also like to change things like  DRM_IOCTL_MODE_GETRESOURCES to drm-ioctl:mode-getresources , which kinda makes sens to me. But then how for do I go? drm-ioctl:mode-get-resources?
[20:35:46] <Guest74> and since they're constants, do i go even further? drm-ioctl:+mode-get-resources+
[20:37:35] <beach> The "get" suggests a function, not a constant.
[20:38:13] <beach> But I guess in the IOCTL it kind of is a function designator.
[20:40:01] <beach> I might create one Lisp function for each type of IOCTL, rather than maintaining the interface.  But I think you are saying that that's someone else's job.
[20:41:29] <Guest74> yes, I figure in the higher level library, the equivalent of libdrm in c, it would just be a function, and no trace of ioctls would be seen.
[20:43:16] <Guest74> lol, preferably. I suspect that would be more work and I'd rather just start using the parts I need.  However, I would like to at least standardize the lisp representation of ioctls.
[20:45:59] *** Joins: nature (~nature@45.32.235.173)
[20:56:43] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[21:00:20] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[21:03:32] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[21:04:22] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 260 seconds)
[21:05:06] *** Joins: amb007 (~a_bakic@183.106.204.77.rev.sfr.net)
[21:06:08] *** Quits: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x) (Ping timeout: 268 seconds)
[21:06:22] *** Quits: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:17:34] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[21:18:50] *** Quits: amb007 (~a_bakic@183.106.204.77.rev.sfr.net) (Ping timeout: 260 seconds)
[21:23:15] *** Joins: amb007 (~a_bakic@63.196.204.77.rev.sfr.net)
[21:34:18] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[21:37:08] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:42:31] *** Quits: etiago (~etiago@user/etiago) (Read error: Connection reset by peer)
[21:43:52] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[21:44:41] *** Joins: etiago (~etiago@user/etiago)
[21:55:05] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[22:02:16] <semz> Is there a recommended way to document/enforce crucial assumptions for a piece of code? I use (eval-when (:compile-toplevel :load-toplevel :execute) (unless (precondition-holds-p) (error "FOO isn't supported because BAR."))), but maybe there's a better way.
[22:02:28] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Ping timeout: 256 seconds)
[22:02:36] <jcowan> Sometimes reading *less* is wiser.  Learning CL by reading the whole spec is only for crazies like me.
[22:02:51] <semz> This is under the assumption that there isn't a portable fallback implementation, of course.
[22:03:30] <semz> And that lacking the feature under consideration would be lethal.
[22:03:58] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[22:06:00] *** Joins: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x)
[22:10:21] *** Joins: Catie (~user@user/catie)
[22:11:17] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1) (Quit: Leaving)
[22:21:37] *** Quits: taiju (~taiju@215.185.218.133.dy.bbexcite.jp) (Ping timeout: 250 seconds)
[22:23:14] *** Quits: varjagg (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 260 seconds)
[22:23:47] <Alfr> semz, if it's a system you're testing for and you're using asdf, there's :depends-on. Further, is it fatal at compile/load time or is it permissible for what's missing to be loaded later?
[22:24:07] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:24:43] <Alfr> semz, CL also an assert macro, if all you want to do is signal an error.
[22:25:05] *** Joins: taiju (~taiju@215.185.218.133.dy.bbexcite.jp)
[22:25:12] *** Parts: McParen (~mcp@user/mcparen) ()
[22:25:25] <Alfr> (You'll have to keep the eval-when, if it's needed.)
[22:28:16] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:28:20] <semz> Alfr: In this case, it would make the code incorrect, but it would probably load.
[22:28:44] <semz> Oh right, assert can specify the error message.
[22:31:14] <semz> Or hm, that seems to be tied to places, which doesn't always apply here.
[22:32:34] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:35:07] *** Quits: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: Using Circe, the loveliest of all IRC clients)
[22:35:29] *** Joins: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x)
[22:38:37] *** Quits: rain3 (~rain3___@79.115.252.154) (Ping timeout: 268 seconds)
[22:39:51] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:42:14] <jcowan> People underestimate how BIG Posix actually is when they set out to provide a non-thin library.  By actual count: 81 headers, 1191 interfaces, and 51 data types.
[22:42:33] <jcowan> "interfaces" are functions/macros
[22:47:44] *** Quits: taiju (~taiju@215.185.218.133.dy.bbexcite.jp) (Ping timeout: 260 seconds)
[22:49:28] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:50:41] *** Joins: taiju (~taiju@215.185.218.133.dy.bbexcite.jp)
[22:52:43] *** Quits: Alfr (~Alfr@user/alfr) (Killed (erbium.libera.chat (Nickname regained by services)))
[22:52:47] *** Joins: Alfr (~Alfr@user/alfr)
[22:54:08] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:57:35] *** Quits: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: Using Circe, the loveliest of all IRC clients)
[22:58:05] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[22:59:09] <shka> well, it is OS interface, larger size should not be a surprise
[23:00:37] *** Quits: X-Scale (~ARM@92.250.96.158) (Ping timeout: 250 seconds)
[23:00:57] <jackdaniel> people overestimate how big the os interface must be ,)
[23:01:28] <shka> mmm, i guess
[23:01:52] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[23:06:04] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[23:09:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1)
[23:10:22] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:12:38] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[23:13:43] *** Joins: varjagg (~user@ti0040a400-5479.bb.online.no)
[23:17:52] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[23:18:05] *** Quits: hobo (~hobo@69.218.33.204) (Ping timeout: 268 seconds)
[23:21:45] *** Joins: Everything (~Everythin@37.115.210.35)
[23:21:47] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:25:01] *** Joins: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[23:26:51] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:27:28] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:27:44] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[23:27:52] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:29:39] *** Quits: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 250 seconds)
[23:29:52] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Quit: Using Circe, the loveliest of all IRC clients)
[23:32:26] *** Quits: amb007 (~a_bakic@63.196.204.77.rev.sfr.net) (Ping timeout: 245 seconds)
[23:36:32] *** Joins: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[23:39:41] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 268 seconds)
[23:44:02] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[23:46:13] *** Joins: amb007 (~a_bakic@66.245.204.77.rev.sfr.net)
[23:46:32] *** Quits: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 260 seconds)
[23:46:53] *** Joins: raeda (~raeda@72.49.249.241)
[23:47:31] *** Joins: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[23:50:02] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 240 seconds)
[23:55:51] <Alfr> semz, the list of places can be empty, they're only needed if you want the continue restart to ask for new values.
[23:57:09] <semz> I see.
[23:58:15] <semz> Amusingly/annoyingly enough, SBCL complains about dead code if the assertion is true at compile time.
