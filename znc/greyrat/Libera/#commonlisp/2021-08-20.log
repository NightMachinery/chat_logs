[00:00:47] <Bike> if you want to update "owners" it makes more sense to maintain specific backpointers in the objects
[00:00:47] *** Joins: amb007 (~a_bakic@109.245.227.99)
[00:04:10] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[00:04:29] <akater[m]> I wouldn't even consider having backpointers everywhere.  It's more expensive than necessary and it's too easy to miss something anyway.  OTOH, telling users “according to our protocol, thou shall only update objects with this '(setf ..)`” is normal.
[00:04:31] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[00:05:07] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 252 seconds)
[00:05:25] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[00:07:51] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[00:08:04] *** Joins: lotuseater (~user@p200300e7871b3f0034cae31f44471c25.dip0.t-ipconnect.de)
[00:08:40] *** Quits: Wairu_Goodman (~Wairu_Goo@2804:389:e018:364a:5dbc:659b:96b4:191d) (Ping timeout: 240 seconds)
[00:08:55] <Bike> but you're not just asking for that - you're ruling out maintaining references to inner objects, because if you have such references, you can modify the objects without modifying their "owners".
[00:09:56] <Bike> as in the alist example, where the ability to get at any pair in the alist screws up the updating. and of course similar things are possible with standard objects rather than conses.
[00:10:25] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:11:10] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[00:11:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:13:04] *** Lord_of_Life_ is now known as Lord_of_Life
[00:16:32] <akater[m]> Bike: Yes.  Inner objects are created entirely within the library; altering something not created by you is generally a bad idea, right?
[00:16:57] <Bike> I mean, no? depends on the library.
[00:18:20] <Bike> if i define a class with accessors, the standard library creates generic function objects. i am allowed to alter those (by adding/removing methods etc) without worrying about the class definition that originally created them, because backpointers are set up to keep everything consistent.
[00:18:22] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[00:22:47] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Remote host closed the connection)
[00:23:23] *** Joins: amb007 (~a_bakic@109.245.227.99)
[00:27:15] <akater[m]> Classes are different.  I'm talking about destroing a list not consed by me.  I would never do it.
[00:28:15] <Bike> it's not different. the library is creating a mutable object, the generic function, which is referenced by the class, another mutable object.
[00:28:26] <Bike> the library consed the generic function.
[00:30:15] *** Quits: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se) (Quit: WeeChat 3.2)
[00:32:07] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 245 seconds)
[00:32:20] <dieggsy> can i have (format nil "~a" thing) ignore *print-right-margin* ?
[00:34:54] <lotuseater> you could wrap it in a let form with (let ((*print-right-margin* t)) ...)
[00:35:12] <lotuseater> as the default value seems to be NIL
[00:36:56] <lotuseater> okay forget it :D
[00:37:06] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[00:37:24] <lotuseater> it shall be of type (or unsigned-byte null)
[00:38:12] <dieggsy> ?
[00:38:17] <dieggsy> ah
[00:39:02] *** Joins: lisp123 (~lisp123@45.130.83.208)
[00:45:02] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:45:02] *** Joins: makomo (~makomo@user/makomo)
[00:49:31] <pjb> dieggsy: bind *print-pretty* to nil.
[00:52:53] <dieggsy> pjb: thanks!
[00:56:55] *** Quits: lisp123 (~lisp123@45.130.83.208) (Remote host closed the connection)
[01:05:17] *** Joins: lsip123_` (~user@80.227.170.170)
[01:05:23] *** Joins: lisp123 (~lisp123@45.130.83.208)
[01:08:25] *** Quits: lsip123_win10 (~user@80.227.170.170) (Ping timeout: 248 seconds)
[01:09:53] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[01:10:45] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 268 seconds)
[01:11:15] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:75ac:b02c:7af0:2ba3)
[01:12:16] *** Joins: silasfox (~sbv@xdsl-87-78-57-101.nc.de)
[01:12:48] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:b526:c3f1:f5cd:985b)
[01:12:58] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Read error: Connection reset by peer)
[01:14:58] *** Joins: lisp123 (~lisp123@45.130.83.208)
[01:20:25] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:32:25] *** Quits: silasfox (~sbv@xdsl-87-78-57-101.nc.de) (Ping timeout: 248 seconds)
[01:33:51] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:75ac:b02c:7af0:2ba3) (Ping timeout: 258 seconds)
[01:34:45] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[01:42:57] *** Quits: lisp123 (~lisp123@45.130.83.208) (Remote host closed the connection)
[01:54:17] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:57:59] *** Quits: pve (~pve@37-33-116-216.bb.dnainternet.fi) (Quit: leaving)
[02:00:49] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-70A0-dynamic.midco.net)
[02:03:00] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[02:03:08] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[02:21:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:26:02] *** Joins: akoana (~ah@user/akoana)
[02:32:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[02:32:41] *** Quits: gaqwas (~john@dynamic-077-007-019-030.77.7.pool.telefonica.de) (Ping timeout: 248 seconds)
[02:48:52] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[02:49:40] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[02:51:40] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[02:52:11] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[02:53:30] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:56:10] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[02:56:16] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[03:02:06] *** Quits: frgo (~frgo@p200300deef0cee000d6de3e0d8973689.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:02:33] *** Joins: frgo (~frgo@p200300deef0cee000d6de3e0d8973689.dip0.t-ipconnect.de)
[03:03:28] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:05:06] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 250 seconds)
[03:05:46] *** Joins: amb007 (~a_bakic@109.245.227.99)
[03:06:04] <nij-> Hmm.. both (quote (function +)) and (list 'function '+) give #'+ but not the list (function +), where the car is the symbol 'function... what can I do to get the list (function +)?
[03:07:12] <hayley> Try (first '#'+)
[03:08:16] <nij-> Oh! So #'+ is just a printer sugar for the list (function +).
[03:08:54] <nij-> Thanks, hayley
[03:08:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[03:09:21] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:10:17] <pjb> nij-: syntactic sugar. https://en.wikipedia.org/wiki/Syntactic_sugar
[03:10:28] <pjb> #' is a dispatching reader macro.
[03:10:54] <pjb> nij-: some implementation may print '(function foo) as #'foo ; but the sugar is in the reader.
[03:11:20] <nij-> No.. it's definitely in the printer.. consider (list 'function '+)
[03:11:42] <nij-> evaluating this, it prints gives something that is printed as #'+
[03:11:54] <nij-> If I read that back, then the dispatching reader macro is working.
[03:12:16] <moon-child> nij-: a conforming implementation _could_ print the list as (function foo)
[03:12:30] <moon-child> afaik
[03:12:39] <pjb> nij-: it depends on the implementation! https://termbin.com/wv3r
[03:12:39] <pjb>  
[03:12:51] <pjb> it's not in the printer, it's in the implementation!
[03:12:55] <moon-child> but the reader syntax is required
[03:13:17] <pjb> both (function foo) and #'foo are readable, so both can be used to print readably.
[03:17:09] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 268 seconds)
[03:22:34] <Bike> yeah, printing #'foo as (function foo) is allowed. i don't know if any implementations are that dumb though.
[03:23:12] <pjb> Bike: abcl as I demonstrated!
[03:23:22] <pjb> but it'snot dumb, it's the right thing to do.
[03:23:27] <pjb> you're not always printing code!
[03:23:40] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[03:24:56] <nij-> I see
[03:25:46] <mfiano> pjb: Curious why you don't use #' in your codes
[03:25:53] <mfiano> I see lots of (function foo)
[03:26:55] <dieggsy> If i call (package-name package) from a function, will it always return the package that the function was defined in, or will it spit out whatever current package i'm in ?
[03:27:03] <dieggsy> ....hoping for the latter i guess
[03:27:06] <mfiano> No
[03:27:10] <dieggsy> er (package-name *package*)
[03:27:15] <mfiano> It won't always
[03:27:41] <mfiano> *package* is a special variable. It has dynamic scope.
[03:27:44] <dieggsy> mfiano: does that mean option 2 is true ?
[03:27:47] <dieggsy> ok, good.
[03:28:01] <akater[m]> dieggsy: functions are not “from packages”, only their names are.
[03:28:15] <dieggsy> Ah, fair point
[03:29:10] <nij-> I've been trying to formulate this questions for 2 hours, but I don't think I have done it perfectly. Anyway, here it is: https://bpa.st/VMRQ
[03:29:10] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[03:29:20] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[03:29:44] <mfiano> That is not very hygeinic of you
[03:30:10] <dieggsy> nij-: what's the question
[03:30:11] <nij-> Notice how I really want to include "package-name *package*" in the macro. This is because (defun a::foo ..) and (defun b::foo ..) do give different results, and I want the macro to include the "current" package when it is evaluated.
[03:30:28] <nij-> mfiano: my macro?
[03:30:31] <nij-> I think so..
[03:30:40] <hayley> Why are you writing a::foo to start with?
[03:31:08] <nij-> I have different math structures, and I have defined operation <+> for them.
[03:31:27] <mfiano> You likely want (package-name op)
[03:31:47] <mfiano> Also that can be simplified some with alexandria:format-symbol
[03:31:53] <nij-> lemme try
[03:31:59] <mfiano> No need for read-from-string
[03:32:37] <mfiano> also, you probably want to rename "multiary" to variadic
[03:33:41] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[03:34:13] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 258 seconds)
[03:34:23] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[03:34:38] <mfiano> You don't need format-symbol there anyway
[03:35:01] <mfiano> The package of the symbol you generate will be that of the calling package
[03:35:13] <mfiano> You could just use alexandria:symbolicate
[03:35:38] <nij-> I want (package-name *package*) indeed.
[03:35:42] <mfiano> (alexandria:symbolicate ,op '#:-binary) for example
[03:35:47] <mfiano> No you don't
[03:35:50] <nij-> I want the package to be the one that's current when it's evaluated.
[03:35:59] <mfiano> That wont be the case
[03:36:10] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:b526:c3f1:f5cd:985b) (Ping timeout: 240 seconds)
[03:36:19] <mfiano> You are evaluating that at macro-expansion time, in the package the macro is defined in
[03:36:25] <mfiano> Rather than the package of thye calling code
[03:38:41] <nij-> Oh indeed..
[03:38:49] <mfiano> Try expanding your macro in different packages. The let binding will be bound to a symbol in the caller's package, while the name of the function will be in the macro's package
[03:38:57] <nij-> what can I do in order to achieve what I wnat?
[03:39:05] <mfiano> Ok let's start over
[03:39:22] <mfiano> I assume you want to generate a function with a symbol in the package that you call the macro in
[03:39:27] <mfiano> as its name
[03:39:30] <nij-> Yes
[03:40:05] <mfiano> `(defun ,op (&rest xs) ...)
[03:40:19] <mfiano> Now for the inner format...
[03:41:24] <mfiano> Reading code, sec
[03:41:28] <nij-> cool
[03:41:39] <mfiano> The 2 branch seems suspect
[03:41:44] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[03:42:00] <mfiano> That is calling the function bound to op2, but it is a symbol, and i see no function with a -binary suffix
[03:42:16] <nij-> It's going to apply to other functions.
[03:42:31] <akater[m]> nij-: Looks like you just want `intern`.
[03:42:31] <nij-> For example, in another package I'd have a method <+>-binary defined.
[03:42:39] <mfiano> Why? It seems that you are doing out of band generation
[03:42:49] <nij-> And then I can call (def-multiary-operator <+>) to define the rest.
[03:42:56] <mfiano> If this macro expects to call a function *-binary, then this macro should probably generate it
[03:43:57] <mfiano> s/this macro/the code this macro generates/
[03:44:45] <nij-> Lemme see how I should put this..
[03:45:01] <nij-> so I have structures "set" and "vector-space"
[03:45:14] <mfiano> It seems an unecessary burden on the user of this macro to define another macro. That's a footgun
[03:45:19] <nij-> I have two packages 'set and 'vector-space
[03:45:33] <nij-> in the package 'set,  i have a class 'set
[03:45:45] <nij-> and I define set:<+>-binary for two sets
[03:45:57] <nij-> same for vector-space
[03:46:10] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[03:46:23] <pjb> What same?
[03:46:25] <nij-> so now I have two functions #'set:<+>-binary and #'vector-space:<+>-binary
[03:46:29] <akater[m]> nij-: Before you define your own foundations for a gargantuan effort of writing a computer algebra system, maybe read about existing efforts.  Maxima looks like it has no design at all but Weyl has, and it has a clean manual by SimLab group, available in PDF.
[03:46:30] <mfiano> Yeah you lost me
[03:46:31] <pjb> Why are they different?
[03:46:42] <pjb> nij-: why don't you define a single generic function?
[03:46:57] <pjb> nij-arithmetic:<+>-binary
[03:47:18] <pjb> Then you can add methods for sets and methods for vector-spaces.
[03:47:22] <nij-> pjb! oh yes
[03:47:27] <nij-> should have done that
[03:47:53] <nij-> Sorry folks.. I shot my feet many times, only to try to explain how i did it.
[03:47:55] <mfiano> nij-: But the much simpler code I gave you solves the problem with the function name
[03:48:05] <pjb> ok. Now I can go to bed. Good night!
[03:48:07] <nij-> I think pjb's advice will work. That's the cleanest
[03:48:08] <nij-> thanks pjb
[03:48:25] <nij-> gn ;; mfiano which simpler code?
[03:48:33] <mfiano> nij-: You want to generate code for the function name. By using ",", you are evaluating that at macro-expansion time, and not generating code using the calling package
[03:48:41] <mfiano> nij-: `(defun ,op (&rest xs) ...)
[03:48:49] <mfiano> That is all you need for the function signature
[03:48:57] <mfiano> So you just have to work out the function body
[03:49:17] <nij-> I used to define in this way but there was a bug too.. lemme think if that's explanable.
[03:49:46] <mfiano> I would recommend On Lisp or Let Over Lambda as good macro books
[03:50:07] <mfiano> It seems you have some misunderstanding of the phases of evaluation in a Lisp compiler
[03:50:16] <nij-> Yeah, pretty much.
[03:50:23] <nij-> And I got quite confused by that.
[03:50:38] <mfiano> First, a file is READ
[03:51:16] <mfiano> To put simply and not entirely technically correct, this means the string contents of the file are parsed, and any reader macros are expanded into s-expressions as well
[03:52:20] <mfiano> Then, macros are evaluated, in which case, you generate s-expression, like your outer backtick before DEFUN, and any unquotes at this level (the ",") is evaluated at exactly this time
[03:52:55] <mfiano> So the result will be your generated code with some of it resolved at macro-expansion time (the ",") parts
[03:53:06] <mfiano> Then your code is compiled.
[03:53:22] <mfiano> READ, MACRO-EXPAND, COMPILE
[03:53:27] <mfiano> in that order, file by file
[03:53:45] <mfiano> Hope that helps. I'm a bit tired so probably explained very poorly
[03:55:55] <mfiano> So, when some file that calls your macro is sent to the compiler, first the string is converted to s-expressions while at the same time any reader macros are also expanded into s-epxressions. Then your macro is "expanded" into different s-expressions. Then THAT is compiled
[03:57:50] <mfiano> So if you want to generate a function whose name is the symbol of OP that was supplied to the macro...well that symbol is already in the correct package, assuming it wasn't qualified with a different package. (in-package :mypkg) (my-macro foobar) => (defun mypkg::foobar () ..)
[03:58:25] <mfiano> I annotated the actual package of the defun's name, which wouldn't be shown if you expanded it in this package, just to show you that OP is already a symbol in the correct package!
[04:02:26] <mfiano> Now I'll wait for the inevitable pedants to try school my tired mind
[04:03:31] <mfiano> or for more questions (back to code until pinged)
[04:12:04] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[04:21:10] *** Parts: akoana (~ah@user/akoana) (Leaving)
[04:23:41] <pillton> Any recommendations for a key-value database? I need something file based with either transactions or fast open/close. The keys and values are strings.
[04:28:40] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 240 seconds)
[04:30:39] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:51:20] <nij-> That helped. Sorry, I was away for an emergency.
[04:59:11] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[05:03:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:11:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[05:17:26] <dieggsy> So i'm "compressing" a list of ordered numbers as in '(1 1 1 2 2) -> '((1 . 3) (2 . 2)) and i have this https://paste.dieggsy.com/2021-08-19T20:46:44 but i'm almost certain there's a more efficient way lol
[05:18:52] <dieggsy> i don't think i'm doing badly, i just think it's awkward code
[05:19:02] <moon-child> dieggsy: the condition (= last thing) is duplicated.  I would have only one branch
[05:19:29] <moon-child> you can also declare 'last' and 'last-count' inside of the loop
[05:19:38] <moon-child> also, I don't think you correctly collect the final run of values
[05:20:40] <dieggsy> moon-child: i think you're right, i'm off by one
[05:20:48] <dieggsy> could you show me an example of what you mean by the first two suggestions though?
[05:21:18] <moon-child> second: (loop with last = (car list) with last-count = 0 for thing in list...)
[05:21:27] <dieggsy> ah, with. nice.
[05:22:41] <dieggsy> ooh, i think i'm off by one in that i'm missing one for each count but also the last element of the list lol
[05:22:50] <dieggsy> oof
[05:22:55] <mfiano> dieggsy: That is called RLE
[05:23:40] <nij-> mfiano: Thanks a lot, really. I am determined to understand the read=>macro-exp=>compile procedure.
[05:23:50] <dieggsy> mfiano: ah, that helps
[05:23:54] <moon-child> dieggsy: https://0x0.st/-ygz.txt or so
[05:24:02] <mfiano> nij-: Sure thing.
[05:24:03] <moon-child> (for the unified-branch bit)
[05:24:04] <nij-> Where can I look for an exact detail?
[05:24:26] <moon-child> (though I think I might actually prefer the recursive approach to the iterative, for this)
[05:24:40] <nij-> For example, in the READ stage, reader macros kick in and expand things into s-expressions.
[05:24:59] <nij-> What are s-exprs right here? Are they still texts? Or are some part internalized already?
[05:25:39] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[05:25:41] <dieggsy> moon-child: i prefer recursive everything since i'm coming from years of exclusively scheme lol, but i'm trying to wrap  my head around loop better. thanks for your help
[05:25:53] <mfiano> nij-: They are lisp data, s-expressions.
[05:26:29] <nij-> So interalized as lisp data already?
[05:26:40] <mfiano> After read, everything is lisp data, yes
[05:26:47] <nij-> I.e. not just text?
[05:26:48] <nij-> ok
[05:26:52] <mfiano> Right
[05:27:34] <mfiano> The hard part to realize is that even though there is READ -> MACRO-EXPAND -> COMPILE for each file...
[05:27:53] <mfiano> within each of those steps, you can invoke any other, recursively.
[05:27:59] <mfiano> But let's ignore that for now
[05:28:32] <nij-> You said after READ it's lisp data, how about during READ?
[05:28:33] <mfiano> Important thing to realize though, is you can only access functions in the MACRO-EXPAND phase that have been previously compiled.
[05:28:37] <mfiano> Which means:
[05:29:32] <mfiano> if you try to use a unquote "," in a macro, and it's calling a function defined in that same file earlier, it will not be available without an (eval-when ...) around it. This is because we are still at the MACRO-EXPAND stage, and haven't reached COMPILE yet
[05:29:47] <mfiano> But if it was defined in a previous file, then COMPILE would have been reached for it already
[05:30:02] <nij-> oh..
[05:30:02] <moon-child> dieggsy: http://sprunge.us/DyifHk?cl  here's another approach
[05:30:24] <mfiano> This isnt a problem if the macro generates (returns) a call to that function
[05:30:43] <mfiano> It's only the unquoted stuff that is evaluated at the middle stage of the pipeline
[05:30:50] <mfiano> that needs to be fully available at that stage
[05:32:20] <mfiano> so: (defmacro foo () (some-func ...)) is bad if there is a (defun some-func ...) before it in that file
[05:32:32] <mfiano> but: (defmacro foo () `(some-func ...) is fine.
[05:33:03] <mfiano> To fix the former, you'd do: (eval-when (:compile-toplevel :load-toplevel :execute) (defun some-func ...))
[05:33:19] <mfiano> But I prefer to just usually define it in a previous file
[05:33:50] <nij-> read->macroexp->compile
[05:33:53] <nij-> how about special forms?
[05:34:39] <mfiano> special forms are just compiled. they are already in lowest terms, since they are implementation code
[05:34:46] <dieggsy> moon-child: woah! funky use of :by
[05:34:52] <dieggsy> i've a lot to learn
[05:34:55] <mfiano> you can treat them as any other function, just with different evaluation rules
[05:34:55] <dieggsy> that's neat
[05:34:58] <nij-> at which stage are they invoked?
[05:35:12] <moon-child> mfiano: 'lowest terms' depends quite a lot; you can define different special forms in terms of each other
[05:35:19] <mfiano> what do you mean by invoked?
[05:35:39] <moon-child> 'treat them as any other function'  No (funcall #'if t 5 7)
[05:35:44] <moon-child> (actually, you can do that in s7 scheme.  But not in cl)
[05:35:45] <mfiano> moon-child: true, i'm using a pedagogical device here, as to not introduce too much at once.
[05:36:04] <nij-> er
[05:36:19] <nij-> How to genuinely understand the procedure?
[05:36:27] <nij-> To read the source code of an impl, say sbcl?
[05:36:46] <mfiano> Can you rephrase?
[05:37:30] <nij-> Rephrase for "invoke"? Sure. I mean, at which stage does an expression that starts from a special form gets invoked?
[05:37:49] <mfiano> You shouldn't really try to understand special forms without intimate knowledge of the inner workings of the particular implementation. Just read CLHS for the semantics of each one.
[05:37:59] <mfiano> They are just functions to you.
[05:38:17] <nij-> So they take actions after "COMPILE"?
[05:38:38] <dieggsy> nij-: not sure i'd recommend reading the source code of an impl to start out with, that can be.... WILDLY hairy lol
[05:38:44] <mfiano> Yes
[05:38:58] <nij-> I think so, dieggsy. How about going through MAL myself?
[05:39:00] <mfiano> Well, they take actions when they are called
[05:39:08] <mfiano> Compiling is different from calling.
[05:39:10] <nij-> dieggsy:, that won't be CL though..
[05:39:37] <nij-> mfiano: I feel like I have a general picture, but many corners are still pretty vague.
[05:39:44] <dieggsy> i mean, whatever works for you i suppose
[05:40:20] <mfiano> nij-: It will become clear if you read more books and write more code. It took me a couple years to fully grasp it, but I am slow, so YMMV
[05:41:32] <moon-child> an interpreter is different from a compiler.  But both express a language's semantics in terms of something else; it won't tell you how anything 'actually' works
[05:41:57] <moon-child> if you can understand natively the semantics of a compiler's target language or an interpreter's implementation language, then you can understand natively the semantics of the source language itself
[05:42:02] <hayley> MAL doesn't have an awful lot of special forms, or really anything that is notably hard. And it is only a tree-walking interpreter, so the implementation would be different to that of a compiler.
[05:42:10] <nij-> mfiano: Thanks for that :) Yes, I'm sure CL will accompany my life and give me a lot of fun.
[05:42:33] <mfiano> nij-: I highly recommend picking up one or both of the books I mentioned, but only if you've read PCL first.
[05:42:38] <nij-> hayley: Oh, good to know that too.
[05:42:45] <mfiano> Even if you don't understand them yet, you will later.
[05:42:46] <hayley> Say, (IF p t e) could just be defined as (if (eval p environment) (eval t environment) (eval e environment)) and that would be...kind of boring
[05:43:03] <nij-> I've read PCL as a tool book. For some of them, I skimmed through. For some other parts, I revisited many times.
[05:43:14] <mfiano> That's good.
[05:43:28] <mfiano> Keep at it and repeat until your brain is full of parentheses
[05:44:19] <nij-> (eq () '<3) ;; => T
[05:44:36] <mfiano> But no book or no person can teach someone how to program or how a compiler works. That is all intuited from experience.
[05:45:02] <mfiano> You can read and get an idea, but until you write code or dig into compiler theory by writing your own compiler, you won't understand a lot
[05:45:16] <nij-> I think the trickest part is that we all talk about "lisp data", but we cannot point to lisp data at all, we can only point to expressions that evaluate to them.
[05:45:44] <nij-> But the importance lies in the difference of expression and data.. so i often find it confusing.
[05:45:46] <moon-child> nij-: why do you say that?
[05:46:14] <mfiano> nij-: Question for you
[05:46:24] <nij-> moon-child: just some rant, i guess..
[05:46:40] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[05:48:09] <mfiano> nij-: Without cheating, what do you think this returns, and let me know your thought process: (length (quote '(1 2 3)))
[05:48:18] <White_Flame> lisp data is cons cells, numbers, symbols, etc.  The same components that make up expressions.
[05:48:39] <White_Flame> (hashtables, structs, etc as well, which aren't generally part of form literals)
[05:49:51] <White_Flame> the entire point of "homoiconic" is that there is no difference between expressions & data
[05:50:10] <White_Flame> it is the evaluator (and sometimes the reader/printer) than interpret the meaning of it
[05:50:16] <White_Flame> *that
[05:50:51] <nij-> Hmm.. that is just (length (quote (quote (1 2 3))), which is (length ___), where ___ evaluates to a list of two members. So the answer should be 2.
[05:51:32] <nij-> ___ is the list whose car is 'quote and whose second is '(1 2 3)
[05:51:58] <White_Flame> the CAR is the symbol QUOTE, and the second is the list (1 2 3)
[05:52:03] <mfiano> Good. The important thing is that reader macros are expanded first.
[05:52:03] <nij-> White_Flame: Let me think about it. I think there's still some subtle difference.
[05:52:27] <mfiano> What about (length '#'foo)?
[05:52:34] <moon-child> nij-: there is none
[05:52:40] <moon-child> nij-: consider that EVAL is a regular function
[05:52:45] <nij-> mfiano: I didn't know any reader macros working here. I just know that quote is a special form, and it stops the evaluation stack.
[05:52:48] <White_Flame> the quotes in IRC are intended to represent literals, but you should probably get used to not using those
[05:52:59] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[05:53:24] <nij-> mfiano: (length '#'foo) is just (length (quote (function foo))), so it is 2 as well.
[05:54:03] <White_Flame> what value is being evaluated as the parameter to LENGTH?
[05:54:14] <nij-> moon-child: Now I'm pretty intrigued.. by "there is none". I should think deeper.
[05:54:24] <White_Flame> or otherwise, what if it was CAR instead of LENGTH?
[05:54:40] <nij-> (car (quote (function foo))) should return the symbol FUNCTION
[05:54:48] <White_Flame> ok, right
[05:55:24] <mfiano> nij-: #\' is a reader macro character, and so is #\( if you want to be technical.
[05:55:44] <nij-> Oh, I see. I admit I don't understand this part well yet.
[05:57:59] <mfiano> What does this return before the compiler sees it? (macrolet ((foo (x) `(call-me ',x))) (call-me foo))
[05:58:05] <mfiano> err
[05:58:13] <mfiano> (macrolet ((foo (x) `(call-me ',x))) (foo foo))
[05:58:14] <nij-> moon-child: By "there is none" do you mean that if we really want, we can print every lisp data READably, whose result is read back as the "same" (up to #'equalp') lisp data?
[05:58:42] <moon-child> no
[05:58:51] <moon-child> reading is largely a distraction
[05:59:20] <nij-> mfiano: you mean macroexpand-1 that?
[05:59:23] <nij-> lemme think..
[05:59:28] <mfiano> I mean work it out in words
[05:59:32] <hayley> Generally, any object can be shoved into a Lisp expression, as everything that is not a list or symbol is self evaluating.
[05:59:38] <moon-child> consider environments like https://github.com/disconcision/fructure, which remove the need for a reader
[05:59:52] <White_Flame> hayley: as long as it doesn't try to get written into a .fasl
[05:59:58] <hayley> White_Flame: Right.
[06:00:18] <hayley> Try (eval `(list ,(make-instance 'standard-class :name 'blah))) for example. (the :name is just so that the printer probably won't signal an error while printing the class name.)
[06:00:34] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-70A0-dynamic.midco.net) (Read error: Connection reset by peer)
[06:02:32] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-70A0-dynamic.midco.net)
[06:02:37] <mfiano> hayley: except for keyword symbols.
[06:02:54] <nij-> mfiano: sorry my computer locked myself and I needed to reboot
[06:03:00] <mfiano> np
[06:03:22] <moon-child> hayley: huh?  I don't get an error printing that
[06:03:24] <nij-> I am thinking about your macrolet problem.. ',foo seems to be turned into whatever foo evaluates too, and then get quoted.
[06:03:40] <mfiano> ',x you mean
[06:03:45] <hayley> moon-child: Oh, okay. I swear it did once.
[06:04:12] <White_Flame> and of course, the (quote ,x) view of it makes it apparent
[06:04:20] <White_Flame> compared to (list 1 2 ,y) or something
[06:04:21] <nij-> "hayley: Generally, any object can be shoved into a Lisp expression, as everything that is not a list or symbol is self evaluating." <== ??!?!
[06:04:42] <nij-> mfiano:  oh right
[06:04:55] <mfiano> nij-: remember macros return data. this is why you do not need to know what call-me does for the answer.
[06:04:57] <hayley> 1 is self-evaluating. The result of evaluating (make-instance 'standard-class) is self-evaluating.
[06:05:00] <moon-child> nij-: for an easy example, try (eval 1)
[06:05:10] <moon-child> or (eval "hello")
[06:05:21] <moon-child> if that weren't the case, something like (+ 1 2) wouldn't work.  You'd have to write (+ '1 '2)
[06:05:39] <nij-> mfiano: .. hmm ok I don't know how that macrolet works.
[06:05:47] <mfiano> nij-: let me rewrite it
[06:06:09] <mfiano> (defmacro foo (x) `(call-me ',x))     (foo foo)
[06:06:16] <nij-> hayley:  I should have been more clear. What do you mean by "shoved into a lisp expr"?
[06:06:48] <mfiano> So what does (foo foo) return after MACRO-EXPAND phase to the compiler?
[06:06:50] <hayley> 1 is a valid Common Lisp expression. So is a standard instance.
[06:06:58] <nij-> mfiano.. so this gives the data (call-me (quote foo))
[06:07:08] <mfiano> Right...now:
[06:07:22] <mfiano> What does this return:
[06:07:38] <nij-> hayley:  how about "shove"?
[06:07:46] <mfiano> (defmacro foo (x) `(call-me ',x))    (in-package :bar) (foo baz::foo)
[06:07:56] <mfiano> err
[06:07:56] <hayley> "shove" has a very precise meaning in the CLHS glossary...
[06:08:11] <mfiano> (in-package :foo) (defmacro foo (x) `(call-me ',x))  (in-package :bar)  (foo baz::foo)
[06:08:11] <nij-> :O! Lemme check it up.
[06:08:30] <mfiano> nij-: Hint, it's an error, given the information
[06:08:55] <nij-> mfiano: yeah cuz in the last form, foo is bar::foo, which doesn't have any macro or function def.
[06:09:11] <mfiano> GOod, what about? (in-package :foo) (defmacro foo (x) `(call-me ',x))  (in-package :bar)  (foo::foo baz::foo)
[06:09:49] <nij-> It gives the data (call-me (quote baz::foo))
[06:09:56] <nij-> It gives the data (foo::call-me (quote baz::foo))
[06:09:57] <mfiano> Good. Now, you see why you don't need symbol-package in your macro earlier?
[06:10:27] <nij-> What symbol-package?  (it was here https://bpa.st/VMRQ)
[06:10:40] <mfiano> err package-name
[06:10:50] <nij-> yeah.....right
[06:11:04] <nij-> I see
[06:11:09] <mfiano> Given what I showed you, at what time is the first READ-FROM-STRING evaluated?
[06:11:32] <nij-> When #'defmacro is evaluated.
[06:11:42] <mfiano> Right. Before the file that (in my example) (foo::foo baz::foo) is even READ
[06:11:47] <nij-> So *package* has been fixed.
[06:12:17] <mfiano> Assuming the macro and the call to the macro are in separate files
[06:12:33] <mfiano> Which I assume to be the case for your macro.
[06:12:35] <nij-> Yeah.. I created too many packages, which shoot into my foot.
[06:12:42] <nij-> Yes you're right.
[06:13:35] <mfiano> So in your code you would get an op in the package the macro is defined in. The user would be writing code for your own package :)
[06:13:57] <mfiano> Also you rarely need to use read-from-string in everyday macros
[06:14:24] <nij-> I dunno too many terms to use xD
[06:15:09] <mfiano> Anyway, I have to get going. I hope you have at least somewhat of a better idea now. I am not a very good instructor this late at night.
[06:15:25] <nij-> I think you did a nice job. Thanks a lot :))
[06:15:31] <mfiano> Sure see ya
[06:17:58] <mfiano> nij-: Wait
[06:18:09] <mfiano> You got an answer wrong!
[06:19:02] <mfiano> Oh, no you didn't. This is me being too tired. Good job, and good night!
[06:22:39] <nij-> :)
[06:27:42] <kakuhen> For some reason, an example of FORMAT from the clhs does not work on either ccl, ecl, clisp, or sbcl
[06:28:14] <kakuhen> clhs 22.3.2.1
[06:28:15] <specbot> Tilde R: Radix: http://www.lispworks.com/reference/HyperSpec/Body/22_cba.htm
[06:28:30] <kakuhen> the 3rd example does not produce the expected output on either implementation
[06:28:44] <kakuhen> I'm aware that you are no longer allowed to pass in just 0 itself, so you must use '0 on all 4 impls I tried
[06:28:52] <kakuhen> They all give the output "000001101 0000 0101"
[06:29:58] <kakuhen> So the exact line I am using is (format nil "~19,0,' ,4:B" 3333), if anyone here would like to verify what I said
[06:30:09] <kakuhen> I'm sorry, I meant to write (format nil "~19,'0,' ,4:B" 3333)
[06:30:52] <kakuhen> The former will signal an error since 0 is not a character. On CCL it'll tell you explicitly to replace 0 with '0
[06:33:00] <mfiano> back for a few before bed
[06:33:04] <mfiano> kakuhen: known issue
[06:33:07] <mfiano> sec
[06:33:23] <mfiano> see first bullet point: https://www.cliki.net/Issue%20FORMAT-RADIX-COMMACHAR
[06:33:41] <mfiano> Also examples are not part of the standard, so don't take them too seriously
[06:35:40] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Ping timeout: 240 seconds)
[06:35:42] <kakuhen> yeah I know its not part of the standard
[06:36:04] <kakuhen> I just saw the example since it was something useful to me, and then I got curious if it was just ECL giving me problems or it's just a mistake in the CLHS example
[06:36:38] <kakuhen> thanks for the link btw -- i wish i could've found this earlier.
[06:37:05] <mfiano> full list of errata https://www.cliki.net/ANSI%20Clarifications%20and%20Errata
[06:37:43] <mfiano> also ask beach about WSCL
[06:40:13] <hayley> minion: tell kakuhen about WSCL
[06:40:13] <minion> kakuhen: WSCL: Well-Specified Common Lisp. Pronounce it as "whistle". A project to revise the Common Lisp standard in a non-controversial way. See https://github.com/s-expressionists/wscl
[06:44:58] *** Joins: copec (~copec@schrodbox.unaen.org)
[06:55:44] <nij-> What's the relation between https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/clm.html and CLHS?
[06:56:08] <nij-> Which one is really the standard of CL?
[06:56:23] <hayley> Neither CLtL book is considered representative of the language you use, but the HyperSpec is derived from the ANSI standard.
[06:57:19] <Bike> CLtL2 was written during the standardization process, so it's not totally up with the standard
[06:58:05] <nij-> Oh.. I see.
[06:58:25] <Bike> but it is pretty close and sometimes easier to follow
[06:58:30] <hayley> The prose in CLtL is more interesting, e.g. "Lisp implementations since Lisp 1.5 have had what was originally called ``the program feature,'' as if it were impossible to write programs without it!"
[06:58:51] <nij-> I find cltl easier indeed.. sometimes
[06:59:47] <hayley> "In certain implementations of Common Lisp they get away with it.  Others abhor what they view as an abuse of unintended ambiguity in the language specification.  For maximum portability, I advise users to steer clear of these issues."
[07:01:00] <copec> CLtL is a fascinating read for historical insight
[07:01:17] <copec> How CL formed
[07:13:48] *** Joins: prxq_ (~quassel@x4db5bc22.dyn.telefonica.de)
[07:17:40] *** Quits: prxq (~quassel@x4db60978.dyn.telefonica.de) (Ping timeout: 240 seconds)
[07:23:09] *** Joins: Qwnavery (~Qwnavery@1.128.104.224)
[07:23:26] *** Parts: Qwnavery (~Qwnavery@1.128.104.224) ()
[07:23:37] *** Quits: copec (~copec@schrodbox.unaen.org) (Quit: checkity check out.)
[07:24:03] *** Joins: copec (~copec@schrodbox.unaen.org)
[07:24:42] <jcowan> Not only for that, but for explanations *why* features appear in the standard, something the dpANS and CLHS are sorely lacking
[07:27:17] <nij-> Sounds like a good read.
[07:27:57] <nij-> I cannot figure this out.. when I evaluate (asdf:defsystem..) I got the error pasted in the bottom. In the link you can also find the tree system too. https://bpa.st/AQYQ
[07:28:34] <nij-> I've done several micro projects, copying and pasting the defsystem forms.. never had this problem before.
[07:30:58] <lotuseater> you don't have to set the pointed named systems set in double quotes
[07:31:48] <lotuseater> and try with ":serial t" maybe that works then
[07:34:46] <nij-> Still doesn't work @_@
[07:35:27] <beach> Good morning everyone!
[07:36:29] <lotuseater> Hello beach :)
[07:36:57] <nij-> Hello!
[07:41:03] <lotuseater> I must admit, very impressive how you manage staying up so early every day.
[07:41:19] <nij-> You mean me or beach?
[07:41:43] <nij-> (It's 10:11pm here, btw.)
[07:42:40] <lotuseater> I mean him.
[07:43:17] <nij-> Oh ok.. iirc beach said that's a scripted good morning.
[07:43:20] <beach> lotuseater: It's a genetic defect in my family.  We can't help it.  My parents were so bored at 4am that they got second jobs distributing newspapers.
[07:43:38] <nij-> I wouldn't call it a defect.
[07:44:20] <nij-> I still have no idea why the tree structure of my repo doesn't work ... @_@
[07:44:51] <nij-> lotuseater: fixed with your advice: https://bpa.st/   ... same error though
[07:44:56] <lotuseater> Oh I wasn't aware of such. But that way around one is more productive I think.
[07:45:24] <nij-> Oops wrong link https://bpa.st/FBCA
[07:45:47] <nij-> beach: If they are too bored, drive them to learn some lisp.
[07:45:53] <nij-> They will never be bored again.
[07:47:29] <lotuseater> nij-: Then genetic difference. That people can eat lactose products is also just possible by genetic mutations.
[07:50:34] <lotuseater> and in the :components you surely need the double quotes as this is looking how files are named
[07:51:27] <dieggsy> i think I asked this before, but does anyone know of a way of seeing uiop:run-program's :interactive output in the slime REPL buffer as opposed to the inferior lisp buffer ?
[07:51:42] <Bike> if that's actually the directory structure I don't understand how the error is happening. I mean, if i'm reading correctly that package.lisp is in the same directory as fusion-category.asd.
[07:51:56] <nij-> dieggsy: I wonder that too.
[07:52:00] <dieggsy> basically it's kind of inconvenient to have to switch buffers or wait for :output t
[07:52:04] <nij-> Iirc it's an unsolved issue.
[07:52:18] <nij-> Bike: yes.
[07:54:31] <nij-> \ @_@ /
[07:56:03] <nij-> Oh interesting, I remove all the subdirectories (operator, ordered-set,..) and removed them from :depends-on accordingly, then it loads.
[07:56:09] <nij-> god knows why it happens..
[07:56:42] *** Quits: semz (~none@user/semz) (Ping timeout: 245 seconds)
[07:56:44] <Bike> huh. maybe the error is botched. like the actual error is that asdf can't find the subsystems, but it reports it wrong.
[08:00:08] <nij-> Am I supposed to evaluate (asdf:defsystem..) manually in the repl?
[08:07:10] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 240 seconds)
[08:07:30] <nij-> Ah, nvm. I end up using an simpler tree system. Thank you Bike and lotuseater :)
[08:08:00] <Bike> you're not supposed to evaluate defsystem forms, no.
[08:08:14] <Bike> you're supposed to tell asdf where asd files are and then let it handle them.
[08:08:42] <lotuseater> or link the file symbolically to quicklisp/local-projects
[08:09:02] <nij-> I see.
[08:09:26] *** Joins: semz (~none@user/semz)
[08:10:03] <semz> and my connection drops the moment I say that. clearly the admins disagree
[08:10:50] <semz> I don't know how easy it would be to redirect stdout to the slime buffer but that's the direction I'd go looking in
[08:15:13] <nij-> It goes already  into the inferior buffer, so it shouldn't be too hard..
[08:15:17] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:16:01] <nij-> dieggsy: In the first place, why are there any info that is sent to the inferior buffer but not the main slime buffer?
[08:16:38] <nij-> Is there a filter that determines which should go into the main slime buffer? I guess there must be one in the source code.
[08:16:56] <dieggsy> nij-: er, because of the way that slime is set up as a server/client and the funky things that have to happen to handle output
[08:17:11] <dieggsy> it's not exactly deliberate AFAIK
[08:17:24] <nij-> What is the inferior buffer doing there anyways?
[08:18:17] <nij-> I mean, the hardest part seems to be catching what ever from the shell into emacs. Now they are in the inf buffer, meaning that this step is achieved already.
[08:18:30] <dieggsy> Again, details i'm not well acquainted with to do with SLIME's architecture. If it was built on e.g. run-lisp it could all be on a single buffer, but it's not and there's not an option for that AFAIK. Would be neat. Something something pull request, I know. Maybe one day when I have a lot of time lol
[08:19:14] <dieggsy> nij-: I think something about separating the actual running lisp from the client REPL is what splits the output in this fashion
[08:19:43] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[08:20:07] <dieggsy> makes you wonder if you couldn't just have some listener in emacs waiting around for inferior lisp to get output and just shoving it into the REPL buffer
[08:20:15] <dieggsy> probably be real dirty though
[08:26:53] <lukego> dieggsy: have you asked slime to globally redirect io? though I guess that's not enough if uiop is passing through the terminal's stdio file descriptors, you'd want some cooperation from uiop there. https://common-lisp.net/project/slime/doc/html/Global-IO-Redirection.html
[08:28:26] <dieggsy> I'm fairly certain I tried that. I come back to this a lot. Can't hurt to try again later i suppose
[08:30:25] <lukego> I wonder if that works better in Sly. I know they don't use the SLIME REPL code but I'm not sure if it's actually terminal I/O that you interact with there.
[08:31:00] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[08:31:01] <dieggsy> lukego: sly is actually what i use. output technically works worse lol
[08:31:35] <dieggsy> slime has a stream flushing loop it uses for real time output that sly removed
[08:31:41] <dieggsy> neither of these affect uiop:run-program IIRC though
[08:32:24] <lukego> least messy solution that comes to my mind would be giving these subprocesses their own repl-like buffers where all their I/O happens in a raw form. pops up on output, type and press ENTER to send. I'm not sure how much of the necessary infra exists in SLIME/UIOP.
[08:33:37] <dieggsy> lukego: not sure i follow that or how it's better than switching to the inferior lisp buffer i guess
[08:34:52] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 250 seconds)
[08:35:04] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[08:49:04] <nij-> (Partial) dieggsy: Sly prepares the main buffer in a message CONNECTION here and send it to slynk: https://github.com/joaotavora/sly/blob/master/sly.el#L1550
[08:57:07] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[09:09:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:11:05] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[09:11:36] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[09:14:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[09:23:33] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:33:41] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[09:40:14] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:40:52] *** Joins: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465)
[09:43:48] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[09:52:44] *** Joins: Alfr (~Alfr@user/alfr)
[09:57:45] *** Quits: ahlk (~user@2600:1700:31c0:3a10::48) (Remote host closed the connection)
[10:00:35] *** Joins: kstuart (~user@185.92.25.246)
[10:07:35] *** Joins: selwyn (~selwyn@user/selwyn)
[10:11:07] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[10:12:13] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Client Quit)
[10:33:36] *** Joins: pve (~pve@178-55-32-254.bb.dnainternet.fi)
[10:34:14] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[10:34:35] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[10:45:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:49:51] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:10:04] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[11:12:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:13:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:13:15] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[11:21:17] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 245 seconds)
[11:25:42] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:25:55] *** Joins: easye (~user@oxi.slack.net)
[11:28:54] *** Joins: shka (~herr@109.231.62.239)
[11:29:04] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[11:34:04] *** Joins: amk (~amk@109.255.169.126)
[11:35:01] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[11:35:30] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:36:39] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[11:39:54] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 250 seconds)
[11:40:09] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[11:41:12] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Ping timeout: 250 seconds)
[11:42:43] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:51:17] *** Joins: makomo (~makomo@user/makomo)
[11:57:31] *** Quits: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465) (Quit: Leaving)
[11:57:59] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[11:59:10] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 240 seconds)
[12:00:17] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[12:01:28] *** Joins: Krystof (~user@81.174.155.115)
[12:01:55] *** Joins: gaqwas (~john@dynamic-095-115-015-217.95.115.pool.telefonica.de)
[12:02:51] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[12:03:16] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[12:06:39] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[12:24:25] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:cb9:2d96:4da8:aca7)
[12:25:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:26:04] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[12:29:16] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:29:46] *** Joins: cosimone` (~user@93-44-184-163.ip98.fastwebnet.it)
[12:31:54] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 250 seconds)
[12:32:20] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[12:34:17] *** Quits: gaqwas (~john@dynamic-095-115-015-217.95.115.pool.telefonica.de) (Ping timeout: 248 seconds)
[12:35:36] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:03] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:41:16] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[12:46:42] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (Quit: Lost terminal)
[12:47:02] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[13:13:36] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[13:16:44] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[13:18:19] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:19:31] *** Joins: selwyn (~selwyn@user/selwyn)
[13:19:46] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[13:20:10] *** Joins: selwyn (~selwyn@user/selwyn)
[13:21:18] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[13:22:07] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 268 seconds)
[13:26:29] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[13:42:02] *** Quits: santiagopim (~user@90.166.59.254) (Remote host closed the connection)
[13:42:21] *** Joins: santiagopim (~user@90.166.59.254)
[14:06:31] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:21:58] *** Quits: kstuart (~user@185.92.25.246) (Ping timeout: 250 seconds)
[14:25:44] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:27:09] *** Joins: selwyn (~selwyn@user/selwyn)
[14:27:54] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[14:28:19] *** Joins: selwyn (~selwyn@user/selwyn)
[14:28:37] *** Quits: cosimone` (~user@93-44-184-163.ip98.fastwebnet.it) (Remote host closed the connection)
[14:30:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[14:31:44] *** Joins: cosimone (~user@93-44-184-163.ip98.fastwebnet.it)
[14:32:50] *** Quits: cosimone (~user@93-44-184-163.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[14:40:48] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:42:38] *** Joins: cosimone (~user@93-44-184-163.ip98.fastwebnet.it)
[14:53:51] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:01:07] *** Quits: frgo (~frgo@p200300deef0cee000d6de3e0d8973689.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:01:37] *** Joins: frgo (~frgo@p200300deef0cee0055753606a3ff1096.dip0.t-ipconnect.de)
[15:02:31] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[15:11:41] *** Joins: random-nick (~random-ni@87.116.181.225)
[15:13:08] *** Joins: tyson2 (~user@70.31.33.162)
[15:14:09] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:b326:b0de:d8fc:1ba)
[15:18:00] <nij-> dieggsy: Here's where =sly= sends the finalized string to the socket: https://github.com/joaotavora/sly/blob/master/sly.el#L1618 . It uses the emacs built-in function #'process-send-string. An example usage of that is `(shell) (process-send-string (get-process "shell") "date\n")`. The first form calls shell and gives you a comint buffer, the second sends the process to shell. There's no other need to "listen", the result of `d
[15:18:01] <nij-> up immediately in the comint buffer.
[15:19:21] <nij-> This leads me believe that, at least in sly/slynk, how the message is received from the inferior process depends on comint.
[15:21:16] <nij-> In the example of #'process-send-string above, we replace (get-process "shell") with (sly-connection) in our case. See for example, https://github.com/joaotavora/sly/blob/master/sly.el#L2627
[15:21:40] *** Joins: selwyn (~selwyn@user/selwyn)
[15:26:00] <nij-> What #'sly-connection returns in my case now, is given by #'sly-net-connect.
[15:26:41] *** Joins: dlowe (~dlowe@user/dlowe)
[15:32:27] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[15:50:40] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[15:55:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:56:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[15:56:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:56:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[15:58:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:59:09] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[16:00:57] *** Joins: ln43 (~ln43@user/ln43)
[16:13:20] *** Quits: cosimone (~user@93-44-184-163.ip98.fastwebnet.it) (Ping timeout: 250 seconds)
[16:19:58] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-70A0-dynamic.midco.net) (Remote host closed the connection)
[16:24:40] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[16:33:40] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[16:41:12] *** Quits: lotuseater (~user@p200300e7871b3f0034cae31f44471c25.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[16:49:11] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[16:51:33] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 258 seconds)
[16:52:25] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:111d:10d9:6ad:31c9)
[16:53:36] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[17:01:05] *** Quits: tyson2 (~user@70.31.33.162) (Quit: ERC (IRC client for Emacs 27.2))
[17:06:48] *** Joins: lisp123_ (~lisp123@45.130.83.191)
[17:10:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 248 seconds)
[17:28:10] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 240 seconds)
[17:31:09] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-70A0-dynamic.midco.net)
[17:31:54] *** Joins: ahlk (~user@2600:1700:31c0:3a10::48)
[17:36:05] <phoe> I am still searching for use cases for UIOP:DEFINE-PACKAGE's :UNINTERN keyword
[17:36:39] <phoe> does anyone perhaps have any?
[17:38:14] <beach> Maybe the author?  Fare, I presume?
[17:39:16] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[17:40:56] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[17:41:51] *** Joins: amb007 (~a_bakic@109.245.227.99)
[17:44:51] *** Joins: Bike (~Glossina@71.69.170.70)
[17:44:51] *** ChanServ sets mode: +o Bike
[17:52:28] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:59:10] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[18:07:46] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:10:20] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:b326:b0de:d8fc:1ba) (Ping timeout: 250 seconds)
[18:19:26] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[18:23:03] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[18:23:11] *** Joins: amb007 (~a_bakic@109.245.227.99)
[18:24:05] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[18:24:35] *** Joins: amb007 (~a_bakic@cable-94-189-158-67.dynamic.sbb.rs)
[18:29:56] *** Joins: cosimone (~user@93-44-184-163.ip98.fastwebnet.it)
[18:32:45] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 258 seconds)
[18:34:22] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[18:37:38] *** Quits: amb007 (~a_bakic@cable-94-189-158-67.dynamic.sbb.rs) (Ping timeout: 250 seconds)
[18:38:30] *** Joins: amb007 (~a_bakic@109.245.227.99)
[18:44:05] *** Joins: rowanthorpe (~Thunderbi@ppp005054200060.access.hol.gr)
[18:44:37] *** Quits: lisp123_ (~lisp123@45.130.83.191) (Remote host closed the connection)
[18:45:34] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[18:49:52] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[18:50:37] *** Joins: amb007 (~a_bakic@cable-94-189-158-67.dynamic.sbb.rs)
[18:52:37] *** Quits: amb007 (~a_bakic@cable-94-189-158-67.dynamic.sbb.rs) (Read error: Connection reset by peer)
[18:53:03] *** Joins: amb007 (~a_bakic@cable-94-189-158-67.dynamic.sbb.rs)
[18:57:27] <jcowan> The only thing I can think of is to make security-critical internal bindings unavailable even to ::.
[18:57:40] <jcowan> kind of an anti-export
[18:57:50] <phoe> that's a stretch
[18:57:58] <phoe> I mean, I can understand this
[18:58:22] <phoe> but still, this would belong to an UNINTERN call, rather than an UIOP:DEFINE-PACKAGE (re)definition
[18:58:32] *** Joins: keutoi (~keutoi@157.48.195.127)
[18:59:46] <jcowan> The unintern call would have to appear at the end of the code itself, which kind of negates the idea that defsystem specifies the whole of a package's visibility.
[18:59:53] <jcowan> But I am shooting fish in the dark
[19:00:09] <phoe> yes, that is my main gripe with this idea
[19:04:15] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:05:08] <jcowan> These troubles are due to the very old decision that was is imported and exported are symbols, rather than the meaning(s) of symbols.  Normally, when you import foo from package bar, you don't care about foo itself, what you want is the function or variable definition of it.
[19:06:31] *** Quits: amb007 (~a_bakic@cable-94-189-158-67.dynamic.sbb.rs) (Read error: Connection reset by peer)
[19:06:41] *** Joins: lisp123 (~lisp123@45.130.83.191)
[19:06:54] <jcowan> s/was is/what is
[19:07:08] <phoe> the issue is that "function or variable definition" are not first class concepts
[19:07:17] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[19:07:23] <phoe> same with class/type/whatever definition
[19:07:31] *** Joins: amb007 (~a_bakic@cable-94-189-158-67.dynamic.sbb.rs)
[19:08:18] <lisp123> Does the hashing function used in CL for hash tables create unique hashes for each key hashed, or does it create non-unique hashes and then a secondary step is to take a list of elements on that hash to extract the right one?
[19:08:21] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[19:08:45] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:10:01] <Bike> i am not sure what "take a list of elements on that hash" means, but in general hashes can collide and the hash table implementation has to deal with collisions
[19:10:23] <Bike> two keys hashing to the same hash can still have different values in the same table
[19:11:13] <lisp123> Bike: Yes. In a book I am reading, if two keys hash to the same hash, the values are stored in something like an alist, so then one needs to extract the right element from that list
[19:11:28] <Bike> that is one way to do it, but there are other ways
[19:11:28] <lisp123> How frequent are collisions in the CL Hash Function?
[19:11:40] <Bike> the hash function is totally implementation dependent.
[19:11:52] *** Quits: amb007 (~a_bakic@cable-94-189-158-67.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[19:12:02] <Bike> of course hash tables are very useful and implementations generally try pretty hard to come up with hash functions with few collisions.
[19:12:29] <lisp123> I was wondering if there was a trade off between computing the hash vs. reducing the number of collisions
[19:13:06] *** Joins: amb007 (~a_bakic@109.245.227.99)
[19:13:28] <Bike> well, sure there is. You could use (constantly 0) as a hash function and it would be very quick to compute, but severely degrade the performance of the table
[19:13:42] <lisp123> Yes :)
[19:14:02] <lisp123> Thanks for the color, looks like in general most hash tables have very few collisions
[19:15:46] <jcowan> Per contra, there are ways to derive perfect hash functions if you know the set of keys in advance.
[19:16:01] <Bike> if your hash function gives you a 64-bit word, it can distinguish eighteen quintillion objects. of course a real hash function isn't evenly distributed over all possible objects, but it can be pretty suboptimal while still working fine for a table with less than say a trillion entries
[19:16:27] <Bike> a real hash function that isn't perfect
[19:17:21] <lisp123> jcowan: Thanks, thats useful to know
[19:18:09] <lisp123> Bike: Thanks, useful to know
[19:18:11] <jcowan> For example, in protocol interpretation you may know that some string has a hundred valid values and you want to map it to some internal representation.  A perfect hash function is ideal for this.
[19:19:14] <lisp123> Why is that?
[19:19:43] <lisp123> Is it because you don't have to compute the hash?
[19:19:59] <lisp123> (actually ignore that0
[19:20:07] <Bike> the opposite. you don't have to do any comparisons.
[19:21:17] <lisp123> Oh yes, okay
[19:26:30] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[19:26:39] *** Joins: Josh_2 (~user@37.25.47.130)
[19:27:06] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:111d:10d9:6ad:31c9) (Remote host closed the connection)
[19:27:48] *** Joins: lotuseater (~user@p200300e7871bf0006cee4099f1cfa667.dip0.t-ipconnect.de)
[19:28:13] *** Joins: lisp123__ (~lisp123@45.130.83.191)
[19:30:04] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 250 seconds)
[19:30:50] *** Joins: pjb (~pjb@user/pjb)
[19:31:04] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[19:31:12] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[19:31:53] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 248 seconds)
[19:34:25] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[19:35:06] *** Joins: amb007 (~a_bakic@87.116.175.27)
[19:37:26] *** Quits: amb007 (~a_bakic@87.116.175.27) (Read error: Connection reset by peer)
[19:38:06] *** Joins: amb007 (~a_bakic@87.116.175.27)
[19:39:09] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:43:43] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[19:47:42] <utis> a simple cat in cl with (loop (write-line) (read-line)) works differently from a corresponding while ((c = getchar()) != EOF) putchar(c); in c: if you type foo<ctl-d>, the c program will duplicate the line immediately, on the same line, but the cl program requires either RET or /two/ ctl-d.  why is that?
[19:48:06] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-70A0-dynamic.midco.net) (#commonlisp)
[19:50:45] <pjb> util: (loop :for ch := (read-char input nil nil) :while ch :do (write-char ch output) :finally (finish-output output))
[19:51:14] <pjb> sorry s/util/utis
[19:52:23] <pjb> utis: that's because read-line reads a line.  Therefore it can ask the system to perform this line buffering, but using the line discipline on the input stream.  C-d doesn't interrupt anything (contrarily to C-c); it just enqueues an end-of-file mark.
[19:52:48] <pjb> utis: note: using read-char will probably use the same line discipline, so it'll behave the same.
[19:52:57] <utis> pjb: sorry, i meant: read-char
[19:53:36] <pjb> utis: you'd have to use implementation specific API to use the character discipline (raw-mode), or use FFI to use the I/O primitives of the system, like C does it.
[19:53:37] <utis> so is there a way to get the behaviour of the c code?
[19:53:57] <Xach> utis: use read-char instead of read-line.
[19:54:12] <pjb> utis: you can get the behavior of the C code by doing exactly the same thing.
[19:54:14] <utis> Xach: yeah, sorry that was just a typo, i did use read-char
[19:55:20] <utis> pjb: ? if i did exactly the same thing i would be writing c and not cl
[19:56:06] <pjb> utis: which means, not using CL operators, but using FFI to use the C operators.  You could call getchar from CL.  But note that getchar comes from libc, uses FILE, and buffering, and if the C program doesn't remove the line buffering, it'll behave like the CL library functions.  Probably cat changes the buffering calling setvbuf https://www.gnu.org/software/libc/manual/html_node/Controlling-Buffering.html
[19:56:52] *** Quits: alanz (sid110616@id-110616.highgate.irccloud.com) (Ping timeout: 256 seconds)
[19:57:17] <pjb> utis: but you can also call directly syscalls from Common Lisp, ie. call ioctl(2), read(2) and write(2), to  set the line discipline, and read character by character.
[19:57:27] <pjb> utis: indeed.
[19:58:12] <utis> pjb: thanks!
[19:59:10] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:59:41] <pjb> utis: but in standard conforming CL it's not possible to manage that. With clisp, you can use clisp specific functions such as ext:with-keyboard, or screen. https://clisp.sourceforge.io/impnotes/terminal.html#with-kbd or the SCREEN pacakge: https://clisp.sourceforge.io/impnotes/screen.html
[20:00:25] <pjb> utis: you may also find a "portability library" which gives you access to the C libraries, such as eg. cl-charms (or cl-curses) to use ncurses, etc.
[20:00:25] *** Quits: amb007 (~a_bakic@87.116.175.27) (Read error: Connection reset by peer)
[20:01:30] <pjb> utis: you could use stty(1) to set C-d to signal an interrupt, and install a signal handler (but again, posix signal handlers are not defined by the CL standard, you'll have to use extensions or the FFI to do that).
[20:02:08] <pjb> then you could use read-line or read-char, and get a lisp condition signaled when the posix signal is received. (it may be difficult to program correctly, given the restrictions on what you can do in signal handlers).
[20:03:07] *** Joins: alanz (sid110616@highgate.irccloud.com)
[20:03:16] <pjb> utis: perhaps more reasonable, would be to patch the CL implementations to provide the wanted feature, as an extension to the CL language (which is allowed by the CL standard). Since you could implement this extension in several (free-software) CL implementations, you'd have a strong proposition force there.
[20:03:32] *** Joins: amb007 (~a_bakic@net204-35-245-109.mbb.telenor.rs)
[20:04:48] *** Quits: lisp123__ (~lisp123@45.130.83.191) (Ping timeout: 268 seconds)
[20:09:20] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[20:09:40] *** Joins: notzmv (~zmv@user/notzmv)
[20:19:46] *** Quits: amb007 (~a_bakic@net204-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[20:20:29] *** Joins: amb007 (~a_bakic@net204-35-245-109.mbb.telenor.rs)
[20:21:38] *** Joins: selwyn (~selwyn@user/selwyn)
[20:36:34] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:43:43] *** Quits: amb007 (~a_bakic@net204-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[20:44:11] *** Joins: amb007 (~a_bakic@net204-35-245-109.mbb.telenor.rs)
[20:48:30] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[20:52:12] *** Quits: amb007 (~a_bakic@net204-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[20:52:42] *** Joins: amb007 (~a_bakic@cable-89-216-113-28.static.sbb.rs)
[20:52:46] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Quit: I'll be back.)
[20:54:59] *** Joins: notzmv (~zmv@user/notzmv)
[21:01:19] *** Quits: amb007 (~a_bakic@cable-89-216-113-28.static.sbb.rs) (Ping timeout: 252 seconds)
[21:02:21] *** Joins: lisp123 (~lisp123@45.86.202.65)
[21:02:43] *** Joins: amb007 (~a_bakic@net204-35-245-109.mbb.telenor.rs)
[21:05:10] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:05:36] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:08:25] *** Quits: rowanthorpe (~Thunderbi@ppp005054200060.access.hol.gr) (Ping timeout: 248 seconds)
[21:11:26] *** Joins: wheelsucker (~user@2600:8801:8c03:1f00::8165)
[21:11:28] *** Quits: amb007 (~a_bakic@net204-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[21:13:48] *** Joins: amb007 (~a_bakic@net204-35-245-109.mbb.telenor.rs)
[21:14:53] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[21:25:16] *** Quits: lotuseater (~user@p200300e7871bf0006cee4099f1cfa667.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:25:24] *** Joins: lotuseater (~user@p200300e7871bf000d922bc6401acd239.dip0.t-ipconnect.de)
[21:25:59] *** Quits: pjb (~pjb@user/pjb) (Quit: need to reboot to install of a new version of a macOS kernel module.)
[21:41:39] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[21:41:59] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[21:48:15] *** Joins: derelict (~derelict@user/derelict)
[21:50:40] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Ping timeout: 240 seconds)
[21:54:22] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[21:55:53] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 248 seconds)
[22:02:37] *** Quits: amb007 (~a_bakic@net204-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[22:03:02] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[22:07:22] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 250 seconds)
[22:08:19] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[22:18:53] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[22:22:02] *** Joins: gaqwas (~john@dynamic-095-115-015-217.95.115.pool.telefonica.de)
[22:25:14] *** Joins: pjb (~pjb@user/pjb)
[22:26:42] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[22:28:13] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[22:28:29] *** Joins: amb007 (~a_bakic@net204-35-245-109.mbb.telenor.rs)
[22:29:19] *** Quits: amb007 (~a_bakic@net204-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[22:29:52] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 252 seconds)
[22:30:11] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[22:39:13] *** Quits: keutoi (~keutoi@157.48.195.127) (Ping timeout: 252 seconds)
[22:40:14] *** Joins: notzmv (~zmv@user/notzmv)
[22:41:14] *** Joins: keutoi (~keutoi@106.208.52.196)
[22:59:43] *** Joins: copec_ (~copec@206.214.226.5)
[23:00:05] *** Quits: copec_ (~copec@206.214.226.5) (Client Quit)
[23:12:13] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[23:12:25] *** Quits: keutoi (~keutoi@106.208.52.196) (Quit: leaving)
[23:17:10] *** Joins: selwyn (~selwyn@user/selwyn)
[23:17:58] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[23:18:01] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:21:11] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[23:26:31] *** Quits: cosimone (~user@93-44-184-163.ip98.fastwebnet.it) (Ping timeout: 252 seconds)
[23:28:25] <Josh_2> Now I'm in the correct room...
[23:28:33] <Josh_2> With local-time is there a way to get the :min keyword to local-time:encode-timestamp to always return two digits?
[23:28:47] <Josh_2> right now if the time is say 12 the string ends up as 12:0 which isn't right imo
[23:29:28] <mfiano> Show your call
[23:29:57] <Josh_2> https://plaster.tymoon.eu/view/2600#2600
[23:30:29] <Josh_2> Ideally I'd want 12 to show 12:00
[23:30:32] <Josh_2> I can hack this together ofc
[23:31:02] <mfiano> (:min 2)
[23:31:22] <Josh_2> Epic tyvm!!
[23:33:17] <mfiano> you likely want that for hour12 too
[23:35:33] <mfiano> or maybe you don't. depends if you are trying to align text or not. I haven't played with local-time in a long time but maybe there's a way to change the zero pad character
[23:38:49] <Josh_2> I am not trying to align text
[23:38:57] <Josh_2> going for most aesthetic
[23:45:02] <pjb> (local-time:format-timestring *standard-output* (local-time:universal-to-timestamp (get-universal-time)) '(:ordinal-day " of " :long-month " " :year  " at " :hour12 ":" :min :ampm)) --> > Debug: Incorrect keyword arguments in ((:ordinal-day " of " :long-month " " :year " at " :hour12 ":" :min :ampm)) .
[23:46:57] <pjb> Sorry, :format got dumped in the process.
[23:47:07] <pjb> (local-time:format-timestring *standard-output* (local-time:universal-to-timestamp (get-universal-time)) :format '(:ordinal-day " of " :long-month " " :year  " at " (:hour12 2) ":" (:min 2) :ampm))  #| 20th of August 2021 at 09:17pm --> "20th of August 2021 at 09:17pm" |#
[23:47:55] <pjb> In any case, you don't want to use hour12, always use hour24!
[23:48:15] <pjb> see https://www.youtube.com/watch?v=nxbFwPF3HSo
[23:56:58] <Josh_2> I cant watch that, blocked in the UK
[23:57:05] <Josh_2> idk why I would want to watch tintin anyway
[23:57:29] <Josh_2> also why wouldn't I want to use 12h? Looks nice
[23:57:32] <lotuseater> wtf blocked
[23:58:15] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:58:23] <lotuseater> cause it's a bit inconsistens and you would have to shoulder a 'AM/PM
[23:59:00] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[23:59:50] <lotuseater> pjb: France gave us cool things like this :) or pink panther
