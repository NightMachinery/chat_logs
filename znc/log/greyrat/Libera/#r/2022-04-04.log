[00:40:22] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[00:42:33] *** Quits: usr725635 (~User@cpe-45-47-86-32.twcny.res.rr.com) (Ping timeout: 260 seconds)
[01:28:39] *** Joins: Origin (~Origin@d-69-161-70-214.nh.cpe.atlanticbb.net)
[01:29:46] *** Quits: debianero (~debianero@60.132.134.77.rev.sfr.net) (Quit: Leaving)
[01:30:43] *** Quits: triberio13 (~triberio1@195.53.32.158) (Quit: Konversation terminated!)
[01:57:26] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[02:21:48] *** Joins: Colombo (~jmoravec@132.181.20.202)
[02:24:31] *** Quits: Origin (~Origin@d-69-161-70-214.nh.cpe.atlanticbb.net) (Quit: Leaving)
[03:18:50] *** Quits: Colombo (~jmoravec@132.181.20.202) (Quit: Leaving.)
[05:28:25] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[05:39:40] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[06:49:22] *** Joins: talismanick (~talismani@2601:644:8500:8350::5496)
[07:17:13] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:30:21] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Remote host closed the connection)
[07:32:14] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[08:05:25] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[09:03:01] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Remote host closed the connection)
[10:58:11] *** Joins: palasso (~palasso@user/palasso)
[11:09:27] *** Quits: dfdx (~F@user/dfdx) (*.net *.split)
[11:09:27] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[11:09:27] *** Quits: dschk (~dschk@22.186.227.35.bc.googleusercontent.com) (*.net *.split)
[11:09:27] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[11:09:28] *** Quits: fidothe (sid1130@id-1130.uxbridge.irccloud.com) (*.net *.split)
[11:09:28] *** Quits: Bayes (~Bayes@user/bayes) (*.net *.split)
[11:09:28] *** Quits: tdsmith (~tdsmith@kvm.kumokasumi.org) (*.net *.split)
[11:10:07] *** Joins: tdsmith (~tdsmith@kvm.kumokasumi.org)
[11:10:15] *** Joins: fidothe (sid1130@2a03:5180:f:5::46a)
[11:10:41] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[11:11:24] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[11:11:35] *** Joins: dschk (~dschk@22.186.227.35.bc.googleusercontent.com)
[11:13:12] *** Quits: Betawolf (~matthew@xn--bta-yla.net) (*.net *.split)
[11:13:12] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[11:13:23] *** Joins: Betawolf (~matthew@xn--bta-yla.net)
[11:13:30] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[11:14:53] *** Joins: dfdx (~F@user/dfdx)
[11:15:08] *** Joins: Bayes (~Bayes@user/bayes)
[11:33:35] *** Quits: palasso (~palasso@user/palasso) (Ping timeout: 260 seconds)
[11:51:46] *** Joins: Vojtaeus (~vojta@user/vojtaeus)
[12:09:42] *** Joins: palasso (~palasso@user/palasso)
[13:42:21] *** Joins: debianero (~debianero@60.132.134.77.rev.sfr.net)
[13:52:12] *** Quits: talismanick (~talismani@2601:644:8500:8350::5496) (Ping timeout: 240 seconds)
[15:10:31] *** Joins: usr725635 (~User@cpe-45-47-86-32.twcny.res.rr.com)
[15:33:48] *** Parts: eoli3n (~eoli3n@82-64-112-150.subs.proxad.net) ()
[16:24:01] *** Joins: LogIN (~LogIN@104.248.160.203)
[16:24:45] *** Quits: LogIN (~LogIN@104.248.160.203) (Client Quit)
[16:50:52] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[17:04:20] *** Joins: talismanick (~talismani@2601:644:8500:8350::5496)
[17:05:21] <Bayes> & versus && gets me /every/ single time
[17:25:46] <confuzeus> i think you can use & in all the cases?
[17:26:16] <Bayes> brb need more coffee (ᴗ˳ᴗ)zzz http://ix.io/3Uhq
[17:27:00] <Bayes> confuzeus well, I don't know about that, & is elementwise comparison and && means all must be true, so depending what you want to do I guess
[17:27:15] <Bayes> for some reason I'm wired to typing &&
[17:27:41] <fendur> is that perl or something?
[17:30:39] <confuzeus> if you are using them in an if statement, i cannot see the difference other than, perhaps, stopping a milisecond or so early
[17:31:32] <Bayes> fendur I think it might be that my first programming language ever was PHP (as a kid), which is based on perl so you're quite close actually
[17:32:47] <Bayes> confuzeus yeah in my case I'm using it to subset data frames
[17:32:56] <Bayes> hence why I should stick to & by default
[17:33:14] <Bayes> instead of just typing && everywhere which seems like second nature at this point
[18:07:01] *** Joins: LogIN (~LogIN@104.248.160.203)
[18:39:51] <Bayes> anyone have a sense which is the most efficient among tapply(x, f, mean) vs ave(x, f, mean)?
[18:42:10] <Bayes> here's some benchmarking http://ix.io/3UhH
[18:42:33] <Bayes> can't say I'm surprised about f4
[18:43:01] <Bayes> re:f3 I was hoping that it'd be optimized under the hook or something so I was expecting it'd do better but I had no evidence to back that up
[18:43:32] <Bayes> unlist(lapply(split())) being faster than tapply is actually a bit surprising
[18:43:48] <Bayes> I tend to use tapply quite a bit so maybe... I'll have to pay more attention to it
[18:49:28] *** Joins: wataru (~wataru@p59010-mobac01.tokyo.ocn.ne.jp)
[18:51:39] *** Quits: wataru (~wataru@p59010-mobac01.tokyo.ocn.ne.jp) (Client Quit)
[18:51:57] *** Quits: Vojtaeus (~vojta@user/vojtaeus) (Ping timeout: 256 seconds)
[18:59:49] *** Quits: Vultyre (~vultyre@user/vultyre) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:04:54] *** Joins: Vultyre (~vultyre@user/vultyre)
[19:08:09] <confuzeus> i would have guessed tapply to be the most performant too. also, f2 is not doing what you expected it too i guess?
[19:41:01] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[20:20:44] <Bayes> yep, f2 being called "ave" kind of made me thing it'd be optimized for this specific purpose
[20:21:55] <Bayes> weirdly enough, f2 is nothing but a wrapper around f0
[20:22:05] <confuzeus> oh, i meant it is not doing what you intend it to do. like the output
[20:24:46] <confuzeus> of f2() might not be what you want?
[20:25:45] <Bayes> euh 1 sec
[20:26:59] <Bayes> confuzeus uhm you're right o.O
[20:27:51] <Bayes> ohhhhhhhhhhhhhhhhhhhhhhhhh
[20:28:07] <Bayes> ave takes group means and populates it over the original vector
[20:28:10] <Bayes> dang
[20:28:18] <Bayes> great catch confuzeus
[20:28:24] * Bayes gotta learn to check the assumptions
[20:36:06] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:70be:3437:d6be:b5ae)
[20:37:26] <confuzeus> aggregate() may have been better for the comparisons but i am sure it will be slower than the top two
[20:39:33] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:950:287b:c4be:ac00) (Ping timeout: 260 seconds)
[21:17:36] <Bayes> of course somebody (not here) commented on readability of unlist(lapply(split(...))) over tapply, so mandatory update http://ix.io/3Uiw
[21:18:04] <Bayes> it's evident that base tapply is more general, but when such generality is not needed you get a 15% bump in speed
[21:20:07] <Bayes> which is not too bad if the call is part of your Amdahl's
[21:21:48] <Bayes> I mean nothing new under the sun but for some reason I take pleasure in the benchmarking ^_^
[23:01:44] *** Quits: LogIN (~LogIN@104.248.160.203) (Remote host closed the connection)
[23:06:19] *** Joins: [exa] (exa@user/exa/x-3587197)
[23:07:59] <[exa]> Hi all! quick question -- is there any _existing_ (not even easy) way to get machine integers bigger than the NA limit into Rcpp (.C called or .Call called) functions? I want to use `nativeRaster` possibility for plotting rasters more quickly (seems to give around 6x speedup), but for plotting e.g. black, I'd need to send it an _integer_ with value 0xff000000, which is out of range and throws an error
[23:08:34] *** Joins: redrum88 (~redrum88@user/redrum88)
[23:09:42] <[exa]> specifically, I want to somehow trigger this https://github.com/wch/r-source/blob/trunk/src/library/graphics/src/plot.c#L1918-L1927
[23:10:12] <[exa]> except I guess most full-alpha colors are simply irrepresentable this way
