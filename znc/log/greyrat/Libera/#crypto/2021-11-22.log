[00:00:54] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[00:04:17] *** Quits: voices- (~voices_@84.238.197.28) (Remote host closed the connection)
[00:09:57] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 250 seconds)
[00:11:07] *** Quits: VarunAgw (~VarunAgw@103.158.148.26) (Ping timeout: 256 seconds)
[00:21:31] *** Joins: voices- (~voices_@84.238.197.28)
[00:31:43] *** Quits: electr0n (~electr0n@about/security/founder/electr0n) (Quit: WeeChat 3.3)
[00:36:53] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:40:00] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[00:40:38] *** Quits: X-Scale (~ARM@83.223.249.106) (Ping timeout: 260 seconds)
[00:41:50] *** X-Scale` is now known as X-Scale
[00:46:46] *** Quits: defjam (~eb0t@90.198.60.224) (Ping timeout: 268 seconds)
[00:48:37] *** Joins: defjam (~eb0t@90.196.140.50)
[00:50:55] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[00:54:29] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[01:00:42] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 260 seconds)
[01:11:35] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[01:16:05] *** Joins: X-Scale` (~ARM@31.22.202.54)
[01:16:32] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 240 seconds)
[01:18:46] *** X-Scale` is now known as X-Scale
[01:22:33] *** Joins: mononote (~mononote@user/mononote)
[01:24:43] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[01:39:22] *** Quits: voker57 (~quassel@2a06:1700:0:24::) (Ping timeout: 260 seconds)
[01:44:42] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[01:46:34] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[01:46:44] *** Quits: voices- (~voices_@84.238.197.28) (Remote host closed the connection)
[01:49:09] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[01:56:00] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[02:02:40] *** Joins: voker57 (~quassel@2a06:1700:0:24::)
[02:03:10] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[02:21:31] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[02:24:06] <Hash> The number of positive integers less than or equal to n that are co-prime to n is called the Euler’s Totient of n 
[02:24:14] <Hash> I see.
[02:24:27] <Hash> The number 6, 4 and 5 are co-prime with 6. Therefore, Eulers Totient = 2 
[02:24:45] <Hash> A number that has no factors in common with another number 
[02:24:55] <Hash> 3 and 7 are co primes.
[02:25:10] <Hash> Hmm.
[02:25:38] <Hash> 4,5,6 are co primes. 
[02:25:57] <ms7821> wat
[02:26:00] <Hash> I don't fully understand the co prime numbers. Are they also prime? Because 3 is not a prime number.
[02:26:15] <Hash> I mean sorry, 6 is not a prime number.
[02:26:23] <Hash> It is divisible by 3 and 2 and 1
[02:26:39] <ms7821> 4 and 6 are not coprime, because 2 goes into both
[02:26:44] <Hash> So what does it mean? A number that has no factors in common with another number.
[02:27:15] <ms7821> yes, it's sometimes called relatively prime
[02:27:16] <Hash> https://i.imgur.com/rqbIBi4.png 
[02:27:20] <Hash> Can you look this please?
[02:27:22] <Hash> I got confused a bit.
[02:27:27] <ms7821> not a propert of a number itself, but of pairs/groups of numbers
[02:28:02] <ms7821> so 4 is coprime to 3 and 5, but not to 6
[02:29:17] <Hash> Hmm.
[02:30:06] <Hash> What is this wierd symbol called?
[02:30:33] <Hash> φ 
[02:30:41] <ms7821> phi
[02:30:49] <Hash> I thought so. I was thinking 'fi'. Thanks
[02:31:02] <MacGyver> You'll want to have https://en.wikipedia.org/wiki/Greek_alphabet at hand.
[02:31:14] <Hash> Ok 
[02:31:33] <Hash> Trying to still wrap my head around co primes.
[02:31:40] <Hash> primes are numbers divisible by themselves and 1.
[02:32:00] <Hash> Co primes are numbers who don't share factors with other numbers
[02:32:16] <Hash> But co primes don't themselves have to be prime numbers
[02:32:21] <Hash> right?
[02:32:42] <edk> well a number can't be coprime, a pair of numbers can
[02:32:44] <ms7821> coprime is not a property of a number itself
[02:32:47] <Hash> Ohhh
[02:32:49] <MacGyver> Not exactly -- those statements are in contradiction.
[02:32:52] <Hash> I see what you mean.
[02:32:56] <MacGyver> Coprimes can themselves be composite, as long as they don't *share* any of their components.
[02:32:56] <Hash> Kind of.
[02:33:06] <Hash> Hang on
[02:33:14] <edk> for any number you can find other numbers it's coprime with
[02:33:30] <MacGyver> So 2*3 (6) and 5*7 (35) are coprime.
[02:33:34] <Hash> So a pair of numbers, say (3,7) are co primes for what number?
[02:33:42] <Hash> Oh. Hmm
[02:33:57] <MacGyver> That pair of numbers "is coprime".
[02:34:16] <Hash> Something is not clicking. I google more
[02:34:18] <MacGyver> You don't consider other numbers -- just that 3 and 7 are coprime (trivially, because they are themselves prime)
[02:34:44] <MacGyver> 15 and 16 are also coprime.
[02:34:59] <MacGyver> Don't care about other numbers. Just factor them.
[02:35:06] <MacGyver> You'll see that they share no common terms.
[02:35:09] <Hash> So two numbers whose factors are only 1
[02:35:13] <int-e> . o O ( Theorem: n and n+1 are coprime for all natural numbers n. )
[02:35:24] <Hash> so 1 and 2 are coprimes?
[02:35:29] <MacGyver> 1 is tricky.
[02:35:33] <int-e> Yes they are.
[02:35:42] <Hash> Cool I understood something. yay
[02:35:48] <int-e> 1 isn't tricky. 1 is coprime to all natural numbers (including itself)
[02:35:59] <MacGyver> The "including itself" is what makes it tricky.
[02:36:03] <Hash> I see. That's a special proeprty of one. I just picked them as example
[02:36:15] <Hash> So 8 and 9 are co primes as they don't share any factors but 1
[02:36:18] <Hash> I see.
[02:36:23] <MacGyver> Exactly.
[02:36:27] <Hash> Thanks!
[02:37:07] <Hash> Now: The number of positive integers less than or equal to n that are co-prime to n is called the Euler’s totient of n.
[02:37:22] <Hash> Hmm. English is the trickly bit
[02:37:31] <edk> i dimly recall a conversation in some programming channel somewhere where someone wanted to find the nearest number to n that shared no factors with it
[02:37:50] <ms7821> I have no idea what that ECES page is trying to say, but it's wrong as I read it
[02:38:07] <edk> there were several people joining in and suggesting interesting algorithms
[02:38:14] <Hash> Yeah, text is a bit confusing sometimes for me. I have to work hard for English understanding
[02:38:38] <ms7821> the calculation of φ for 6 is that 1 and 5 are coprime with 6, therefore φ = 2
[02:38:54] <Hash> Euler's theorem generalises Fermat's theorem to the case where the modulus is not prime. It says that: if n is a positive integer and a, n are coprime, then aφ(n) ≡ 1 mod n where φ(n) is the Euler's totient function.
[02:38:56] <ms7821> perhaps 4 is a typo for 1 and the comma should be a colon
[02:39:11] <Hash> Why is phi 2? I'm trying to understand the totient
[02:39:15] <int-e> Hash: the exponentiation got lost
[02:39:24] <Hash> Sorry copy paste.
[02:40:25] <Hash> So let's take 8 and 9 for example. They are co primes.  And positive integers. 
[02:40:49] <Hash> then a ** phi(n) = 1 mod n <- didn't understnad yet.
[02:40:57] <int-e> "For the number 6, 1 and 5 are co-prime with 5. Therefore, Eulers Totient = 2." <-- yeah maybe.
[02:41:30] <Hash> In number theory, Euler's totient function counts the positive integers up to a given integer n that are relatively prime to n.
[02:41:45] <Hash> So how do you get 2 from 1 and 5 being co primes to 5
[02:42:01] <ms7821> that's how many numbers there are (count)
[02:42:05] <Hash> Or if you take 8 and 9 as co primes what would be the totient of those tow?
[02:42:12] <ms7821> it's co-primes to 6, not 5
[02:42:13] <Hash> Ohhh
[02:42:19] <Hash> I see.
[02:42:27] <Hash> No I don't see yet. hang on
[02:42:36] *** Joins: voices- (~voices_@84.238.197.28)
[02:42:52] <int-e> Why... meh. It's not immediate, you actually have to develop some theory. Or maybe you know group theory already in which case you can realize that the coprime residues modulo n form a group under multiplication and apply Lagrange's theorem.
[02:43:14] <Hash> I don't know it yet.
[02:44:14] <Hash> Ohhhhhh
[02:44:18] <Hash> Eureka.
[02:44:43] <Hash> phi(6) is {1,2,3,4,5,6} and you have to count all the nubmers who don't have a prime, form 1 to n
[02:44:47] <Hash> so you have only two
[02:44:54] <Hash> 1 and 5
[02:45:00] <Hash> So that's 2
[02:45:06] <Hash> I see. Did I do this right?
[02:45:19] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:8c55:8432:f2b6:d367)
[02:45:20] <ms7821> "who don't have a common factor", but I think so
[02:45:27] <Hash> yes, thanks for that correction
[02:45:29] <Hash> I meant that.
[02:45:39] <int-e> "don't have a prime"? Yeah, "don't share a factor with 6" would make sense
[02:45:58] <ms7821> so for 8, it's 1,3,5,7 which are co-prime to 8 and therefore the count is 4
[02:45:59] <Hash> Sorry English is not 100%
[02:46:20] <Hash> Yup. I get it now. Thanks. Now to see how this related to RSA
[02:46:32] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 240 seconds)
[02:47:07] *** Quits: Narrat (~omnius@p200300df5f15684606ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:47:15] *** Quits: yewscion (~yewscion@72-21-196-67.amazon.com) (Ping timeout: 250 seconds)
[02:47:25] <Hash> For a prime # p, the phi is always p -1
[02:47:45] <Hash> So if you have a prime # 7, 7-1 = 6, so phi(7) = 6?
[02:47:55] <MacGyver> Yes - do you understand why?
[02:48:01] <Hash> Not yet.
[02:48:12] <MacGyver> Okay, think about what it means for a number to be prime.
[02:48:13] <Hash> How did this formula come around?
[02:48:19] <Hash> 1 and itself.
[02:48:32] <Hash> no other factors
[02:48:39] <MacGyver> So the natural result of that is?
[02:48:53] <Hash> everything else must have factors.
[02:48:57] <Hash> count those?
[02:49:00] <MacGyver> Not exactly.
[02:49:13] <MacGyver> But it does have to do with the factors of all the numbers smaller than the prime.
[02:49:20] <Hash> ok one more try
[02:49:24] <int-e> What prime factors can a prime p share with another number n?
[02:50:27] *** Joins: RickSanchez (~RickSanch@2607:fb90:1d67:afea:c563:8bae:d960:33d6)
[02:52:17] <maroon> 3 is prime, and it can share a factor with 3*10
[02:52:22] *** Quits: RickSanchez (~RickSanch@2607:fb90:1d67:afea:c563:8bae:d960:33d6) (Remote host closed the connection)
[02:52:22] <Hash> it would only have itself and 1 as a factor, so you count the rest of them? phi7 would be {1,2,3,4,5,6,7} and if it's only divisbile by itself and 1 is divisble by everything, so you count from 1-6 and not 7?
[02:52:49] <Hash> Something like that?
[02:52:55] *** Joins: RickSanchez (~RickSanch@2607:fb90:1d67:afea:c563:8bae:d960:33d6)
[02:53:08] <int-e> Yeah. 1-6 are not divisible by 7. 7 is.
[02:53:32] <Hash> I see.
[02:53:45] <maroon> well, depends if the definition is 2 thru n-1, or is the definition 1-n range
[02:54:10] <int-e> maroon: the former isn't an option
[02:55:20] <Hash> I'm guessing somehow co primes are used in key pair generatio.
[02:55:29] <int-e> maroon: It's really about residue classes, but people may find that confusing. So you pick representatives, with ranges wither 0..n-1 or 1..n. Which makes no difference because except for n = 1, neither 0 nor n are coprime to n, and for n = 1, both are coprime to n.
[02:55:31] <Hash> As they are related.
[02:55:39] <maroon> divisible by 7 or divisible into 7? because 1 is divisible into 6 and 7 the way 2 is divisible into 6
[02:55:59] <int-e> maroon: Sorry, I realized I filled in some context... maybe clarify your statement? What is that range 2..n-1 for?
[02:56:13] <maroon> counting the totient
[02:56:23] <int-e> maroon: divisible by 7.
[02:56:45] <maroon> well nothing less than n can be divisible by n
[02:56:51] <int-e> maroon: the question is, are n (in the 1..7 range) and 7 coprime.
[02:57:07] <int-e> This reduces to divisibility by 7 because 7 is priem.
[02:57:09] <int-e> *prime.
[02:57:32] <Hash> Also, to clarify, modulus is another word for division's 'remainder?
[02:57:41] <maroon> to me, divisible by 6 means 2/6 3/6 4/6 etc
[02:57:41] <Hash> Or is it a new thing i dunno about
[02:57:56] <maroon> modulus is the divisor which produces the remainder
[02:58:08] <Hash> I don't follow. Hang on
[02:58:14] *** Quits: RickSanchez (~RickSanch@2607:fb90:1d67:afea:c563:8bae:d960:33d6) (Ping timeout: 260 seconds)
[02:58:22] <maroon> if i take 10 / 7, 3 is the remainder, and 7 is the modulus
[02:58:30] <int-e> maroon: Sure. But the question we'd ask for the totient is whether 2 is coprime to 6, and it's not; 2 is a factor of both.
[02:58:32] <Hash> Ohh
[02:58:41] <Hash> divisor, dividend, and remainder
[02:58:45] <Hash> You have 3 things right
[02:58:47] <MacGyver> maroon: But that's not relevant in the explanation of why phi(p) is always p-1.
[02:58:55] <Hash> So divisor name is modulo
[02:59:28] <maroon> even more confusing, is that divided/divisor can also be called numerator/denominator
[02:59:40] <Hash> yes, in fraction form
[02:59:48] <Hash> I am starting to remember math. :)
[02:59:55] <Hash> It's been 20 years since I did college algebra
[03:00:06] <Hash> (doing 2nd degree now after many years in life)
[03:00:41] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[03:01:58] <maroon> in public schools and college, none of my math classes ever mentioned the words modulus modulo or totient
[03:02:06] <Hash> Same.
[03:03:25] <int-e> Hmm. No modular arithmetic, even at college level?
[03:03:40] <Hash> It wasn't called that.
[03:03:47] <int-e> (that "modular" is strongly connected to "modulus")
[03:05:08] <Hash> How many people do you invite to your party so that two will have the same birthday (with high probability)? √365
[03:05:24] <maroon> nope not in college. we had 'college algebra', which didnt cover it, and it wasnt in calculus either
[03:05:27] <Hash> Does this mean square root of 365? This symbol is for sqrt or division?
[03:05:41] <maroon> the sqrt(n) is an approximation
[03:05:47] <Hash> This is about Birthday Theorem
[03:05:56] <Hash> How many people do I invite to my party?
[03:06:03] <Hash> √365 to have a collision
[03:06:13] <int-e> sqrt(2n) people give you about a 50% chance.
[03:06:17] <maroon> for year=2^32 days, they say the birthday paradox has 50% collision at 2^16 days (65536), but the actual number is in the 70-thousands somewhere
[03:06:31] <int-e> uh, what am I doing
[03:06:37] <maroon> i thought it was just sqrt(n)
[03:06:44] <Hash> You need approximately 1.174 √N to have a high probability of a collision. This is called the birthday paradox.
[03:06:55] <int-e> It's a 39% chance.
[03:07:02] <int-e> maroon: You'll usually O(sqrt(n))
[03:07:24] <int-e> And you can pick a constant factor depending on what probability of success (or failure) is acceptable to you.
[03:08:03] <maroon> so then they should have called it the sqrt(2)*SWEET32 attack?
[03:08:45] <Hash> I need a break now and food. 
[03:08:50] <Hash> Thanks be back in a while
[03:08:52] <int-e> Okay, my brain is clearly not working. Yes, 1.174 √N gives you about a 50/50 chance.
[03:08:59] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[03:09:49] <int-e> The 39% number is for sqrt(N)
[03:10:06] <int-e> 2sqrt(N) would be 63%.
[03:11:48] <maroon> hrm, 63%, would that be any relation to (1 - 1/e) or just coincidental?
[03:12:02] *** Quits: sav_ (~savio@177.12.48.155) (Ping timeout: 240 seconds)
[03:12:19] <int-e> maroon: That's the right connection.
[03:12:43] *** Joins: sav (~savio@177.12.48.155)
[03:12:55] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[03:13:07] *** sav is now known as Guest2820
[03:14:19] <int-e> k sqrt(N) samples out of N give you a collision with probability 1-e^(k^2/2) as N approaches infinity; intuitively because there are k^2N/2 pairs each with 1/N probability of being a collision and these events are almost independent (close enough to be negligible in the limit).
[03:18:04] <int-e> Formally you'll be dealing with N(N-1)...(N-n+1)/N^n where n = floor(k sqrt(N)), which becomes 1(1-1/N)(1-2/N)...(1-(n-1)/N) and (1-k/N) is about (1-1/N)^k etc...
[03:22:56] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[03:25:11] *** Joins: RickSanchez (~RickSanch@2607:fb90:1d67:afea:c563:8bae:d960:33d6)
[03:31:33] *** Joins: PJBoy (~PJBoy@user/pjboy)
[03:35:38] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:36:44] <maroon> the 1-1/e percentage i'd seen before, from a dice having n sides being rolled n times, and only 63% of the numbers [1,n] will typically show up
[03:38:55] <int-e> Yeah it pops up in several places... the probability that a particular number doesn't show up is (1-1/N)^N (here N=6), and the limit of that is 1/e.
[03:41:13] <int-e> If you go the intuitive route I mentioned above, the birthday paradox scenario is similar except that each pair of samples becomes a trial, so for n trials you have (1 - 1/N)^(n(n-1)/2). (Oh and I messed up once again... the 2sqrt(N) should be sqrt(2N). I got that correct further up... sigh.)
[03:41:30] <int-e> for n trials -> for n samples
[03:42:32] <maroon> yeah i saw the sqrt(2n) earlier, that's why i was saying it should be the sqrt(2)*SWEET32 attack
[03:49:33] *** Quits: Guest2820 (~savio@177.12.48.155) (Quit: Leaving)
[03:54:02] *** Quits: jess (~jess@libera/staff/jess) ()
[03:54:06] <maroon> sqrt(2n) = sqrt(2) * sqrt(N), but the above 1.174 isn't sqrt2, which is 1.414, so im guessing sqrt(2n) is an approximation
[03:54:39] <maroon> im feeling a lot safer about SWEET32 now that i know i have that extra 17.4%!
[03:54:40] <int-e> maroon: I messed up.
[03:55:25] <int-e> maroon: But I've since corrected it... I think if you put it all together you get a fairly accurate picture.
[03:56:39] <int-e> Then again I've made so many mistakes now that I'm not sure that I've caught them all ;)
[03:59:02] *** Joins: HumanG33k (~HumanG33k@2a01:e0a:95:5d90:215:c5ff:fe68:fb04)
[04:01:37] *** Quits: ericonr (~ericonr@voidlinux/docs/ericonr) (Quit: WeeChat 3.3)
[04:01:54] *** Joins: ericonr (~ericonr@voidlinux/docs/ericonr)
[04:04:08] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[04:04:27] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:06:49] *** Joins: ionface (~ionface@user/ionface)
[04:07:32] *** Quits: RickSanchez (~RickSanch@2607:fb90:1d67:afea:c563:8bae:d960:33d6) (Ping timeout: 240 seconds)
[04:11:14] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:11:47] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:30:42] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[04:32:52] *** Joins: namkeleser (~namkelese@101.179.132.178)
[04:47:56] *** Joins: samm (~sammm@88.170.120.145)
[04:52:05] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[04:54:23] *** Quits: geeknix (~pi@147.158.227.80) (Ping timeout: 264 seconds)
[04:57:23] *** Joins: frost (~frost@user/frost)
[05:26:45] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 268 seconds)
[05:30:59] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[05:42:51] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[05:58:22] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[06:19:34] *** Quits: _- (~orgg@20.55.233.57) (Changing host)
[06:19:34] *** Joins: _- (~orgg@user/orgg)
[06:21:43] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Ping timeout: 256 seconds)
[06:22:57] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[06:29:05] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[06:37:09] *** Joins: RickSanchez (~RickSanch@2607:fb90:1d67:afea:c563:8bae:d960:33d6)
[06:37:35] *** Joins: gggp (~gggp@li1766-35.members.linode.com)
[06:40:48] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[06:43:38] *** Quits: RickSanchez (~RickSanch@2607:fb90:1d67:afea:c563:8bae:d960:33d6) (Ping timeout: 260 seconds)
[06:56:27] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[06:56:56] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[07:00:30] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 260 seconds)
[07:10:21] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[07:14:40] *** Joins: WarpedAI (~Warped@user/warped)
[07:15:00] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[07:17:07] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 268 seconds)
[07:21:19] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpw1n6m4afpgbvv.ipv6.telus.net) (Remote host closed the connection)
[07:22:15] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpyedfabgfciyye.ipv6.telus.net)
[07:35:38] *** Quits: gggp (~gggp@li1766-35.members.linode.com) (Quit: Leaving)
[07:35:53] *** Joins: gggp (~gggp@li1776-19.members.linode.com)
[07:56:46] *** _- is now known as you
[07:58:25] *** you is now known as _-
[08:06:48] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Quit: linear_cannon)
[08:11:36] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpyedfabgfciyye.ipv6.telus.net) (Remote host closed the connection)
[08:12:34] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpws5btwds6m6b1.ipv6.telus.net)
[08:18:20] *** Joins: kish` (~sid742412@user/aqua)
[08:38:17] *** Quits: defjam (~eb0t@90.196.140.50) (Ping timeout: 256 seconds)
[08:40:20] *** Joins: defjam (~eb0t@90.197.81.95)
[08:47:43] *** Quits: b93 (~I@209.127.74.140) (Ping timeout: 265 seconds)
[09:14:35] *** Joins: sav_ (~savio@177.12.48.155)
[09:18:48] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[09:18:48] *** Quits: artart78 (~artart78@2001:41d0:a:3ba6::1) (*.net *.split)
[09:19:05] *** Joins: artart78 (~artart78@2001:41d0:a:3ba6::1)
[09:19:29] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[09:22:35] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[09:24:36] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[09:24:56] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[09:24:59] *** Quits: dynemeloun (~dynemelou@93-93-35-197.cust.mitranet.cz) (*.net *.split)
[09:24:59] *** Quits: scjosh (~scjosh@206.189.79.69) (*.net *.split)
[09:24:59] *** Quits: neildaemond (~neildaemo@ipv6two.tilde.club) (*.net *.split)
[09:24:59] *** Quits: dusk (~quassel@suki.ds7s.nl) (*.net *.split)
[09:24:59] *** Quits: MacGyver (~macgyver@user/macgyver) (*.net *.split)
[09:24:59] *** Quits: towel (~towel@user/towel) (*.net *.split)
[09:24:59] *** Quits: mteo (francis@user/francis) (*.net *.split)
[09:25:00] *** Quits: Ragnor (~Ragnor@user/ragnor) (*.net *.split)
[09:25:00] *** Quits: nullheroes (~nullheroe@168.235.66.22) (*.net *.split)
[09:25:00] *** Quits: AlloSaur1s (pate81@itu.ihme.org) (*.net *.split)
[09:25:00] *** Quits: poopster (poopster@user/poopster) (*.net *.split)
[09:25:00] *** Quits: A_Dragon (A_D@libera/staff/dragon) (*.net *.split)
[09:25:00] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[09:25:00] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (*.net *.split)
[09:25:00] *** Quits: Nebraskka (~Nebraskka@user/nebraskka) (*.net *.split)
[09:25:00] *** Quits: rxcomm (~rxcomm@user/rxcomm) (*.net *.split)
[09:25:00] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[09:25:00] *** Quits: EpicKitty (EpicKitty@marshadow.epickitty.co.uk) (*.net *.split)
[09:25:00] *** Quits: ms7821 (~Mark@london.rack.ms) (*.net *.split)
[09:25:00] *** Quits: B4ckBOne (~B4ckBOne@static.88-198-44-71.clients.your-server.de) (*.net *.split)
[09:25:00] *** Quits: ericnoan (~en@user/ericnoan) (*.net *.split)
[09:25:00] *** Quits: DefiantN (~DefiantN@user/defiantn) (*.net *.split)
[09:25:00] *** Quits: asalor (~asalor@user/asalor) (*.net *.split)
[09:25:06] *** Joins: AlloSaurus (pate81@itu.ihme.org)
[09:25:06] *** Joins: poopster (poopster@shell.xshellz.com)
[09:25:07] *** Joins: ericnoan (~en@user/ericnoan)
[09:25:11] *** Joins: dusk (~quassel@suki.ds7s.nl)
[09:25:14] *** Joins: Ragnor (~Ragnor@dslb-084-062-055-138.084.062.pools.vodafone-ip.de)
[09:25:16] *** Joins: EpicKitty (EpicKitty@marshadow.epickitty.co.uk)
[09:25:26] *** Quits: Ragnor (~Ragnor@dslb-084-062-055-138.084.062.pools.vodafone-ip.de) (Changing host)
[09:25:26] *** Joins: Ragnor (~Ragnor@user/ragnor)
[09:25:26] *** Joins: ms7821 (~Mark@london.rack.ms)
[09:25:30] *** Joins: MacGyver (~macgyver@sog.polvanaubel.com)
[09:25:35] *** Joins: nisstyre (~wes@li798-187.members.linode.com)
[09:25:36] *** Joins: neildaemond (~neildaemo@ipv6two.tilde.club)
[09:25:57] *** Quits: MacGyver (~macgyver@sog.polvanaubel.com) (Changing host)
[09:25:57] *** Joins: MacGyver (~macgyver@user/macgyver)
[09:26:11] *** Joins: B4ckBOne (~B4ckBOne@static.88-198-44-71.clients.your-server.de)
[09:26:15] *** Joins: asalor (~asalor@113.151.broadband3.iol.cz)
[09:26:19] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[09:26:27] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[09:26:45] *** Joins: Nebraskka (~Nebraskka@user/nebraskka)
[09:26:53] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[09:27:15] *** Joins: rxcomm (~rxcomm@user/rxcomm)
[09:27:19] *** Joins: DefiantN (~DefiantN@user/defiantn)
[09:27:20] *** Joins: dynemeloun (~dynemelou@93-93-35-197.cust.mitranet.cz)
[09:28:08] *** Joins: towel (~towel@user/towel)
[09:31:17] *** Joins: alip (~alip@exherbo/developer/alip)
[09:37:42] *** Joins: Wulf (~Wulf@user/wulf)
[09:45:06] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 244 seconds)
[09:47:34] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 260 seconds)
[09:57:04] *** Parts: bythecoin10 (~Jail21@190.171.113.56) ()
[09:58:25] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[09:59:04] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[09:59:56] *** Quits: dynemeloun (~dynemelou@93-93-35-197.cust.mitranet.cz) (Ping timeout: 245 seconds)
[10:02:02] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 240 seconds)
[10:04:41] <Hash> n=pq in RSA, where do the primes come from and how large are the primes?
[10:06:24] *** Joins: dynemeloun (~dynemelou@93-93-35-197.cust.mitranet.cz)
[10:09:54] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[10:16:51] <Wulf> Hash: chosen randomly. half as large as n.
[10:18:32] <maroon> i keep seeing conflicting advice of how RSA primes should be chosen, much of which seems to be ignored by openssl
[10:18:49] *** Joins: RickSanchez (~RickSanch@2607:fb90:1d67:afea:c563:8bae:d960:33d6)
[10:18:56] <Hash> Thanks
[10:18:58] <Hash> On ECC now
[10:19:57] <Hash> Based on equations of the form y2 = x3 + Ax + B along with a distinguished point at infinity, denoted
[10:20:08] <Hash> Am I sensing a slope here?
[10:20:49] <Hash> Also why is x3 + Ax not combined into Ax4?
[10:21:09] <Hash> y2 = Ax4+B
[10:21:16] <maroon> that's not the way algebra works
[10:21:25] <Hash> Wht do you mean?
[10:21:33] <Hash> oh sorry it's an ddition
[10:21:37] <Hash> i misread + as *
[10:21:37] <maroon> you can't see "x2 +4x" and say wow, that's 4x^3
[10:21:56] <blumagicmidnite> can you have slope with no function?
[10:22:42] <Hash> x + x2 + x3 are different terms, I remember.
[10:23:04] <Hash> but (x) (x2) (x3) = x6
[10:23:12] <Hash> When you multiply they get added the powers
[10:23:19] *** Joins: qbt (~qbt@user/edun)
[10:23:44] <blumagicmidnite> in which algebra?
[10:23:44] <maroon> yes, where DH gets its mojo
[10:23:45] <Hash> I got college algebra coming up soon too
[10:24:27] *** Quits: RickSanchez (~RickSanch@2607:fb90:1d67:afea:c563:8bae:d960:33d6) (Ping timeout: 264 seconds)
[10:24:41] <maroon> one of these days they'll find a way to attack curves the same way as DH, and they'll be throwing it in the trash :)
[10:27:02] <Hash> The basic reason for this is that elliptic
[10:27:04] <Hash> curves over finite fields provide an inexhaustible supply of finite
[10:27:06] <Hash> abelian groups which, even when large, are amenable to
[10:27:09] <Hash> computation because of their rich structure
[10:28:42] <Hash> The fact that makes elliptic curves useful is that the points of the curve form an additive abelian group with O as the identity  element
[10:30:10] <Hash> https://www.youtube.com/watch?v=nybVFJVXbww
[10:30:16] <Hash> Elliptic Curve Back Door - Computerphile
[10:33:31] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[10:33:52] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[10:33:57] <maroon> i haven't dived into curves much, but they seem so brittle compared to DH - you can get a decent DH safe prime in a few minutes, but everyone is worried about choices of curves turning out to have a hidden gotcha
[10:35:45] <Wulf> maroon: most encryption on internet protocols (tls, ipsec, wireshark, etc.) runs on ECDH. So if it's broken, we're all hosed.
[10:35:49] <maroon> and like a year ago or so, there was a CVE exploit having to do with curves, it didn't affect win7 because it was 'too old' to have the new neat encryptoin
[10:36:18] <maroon> like back in the day when everything used RC4 :/
[10:36:28] <Wulf> s/shark/guard/
[10:36:35] <maroon> rc4 has a 2^1684 keyspace!
[10:37:57] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[10:39:15] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[10:41:52] *** Joins: System_Error (~SystemErr@user/systemerror)
[10:45:57] *** Joins: VarunAgw (~VarunAgw@103.158.148.26)
[10:47:19] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[10:53:27] *** Joins: voices- (~voices_@84.238.197.28)
[11:01:13] *** Quits: asalor (~asalor@113.151.broadband3.iol.cz) (Changing host)
[11:01:13] *** Joins: asalor (~asalor@user/asalor)
[11:15:39] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[11:17:34] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 260 seconds)
[11:18:47] <Hash> What mathematical advances might endanger the security of RSA?
[11:19:30] <Hash> How there can be more algorithms in the list which are symmetric rather than assymetric
[11:20:44] <Wulf> Hash: quantum computers, and unforeseen improvements in integer factorization or discrete logarithm computation.
[11:21:16] <Wulf> Hash: there is no proof that no algorithms exist which can break RSA efficiently.
[11:21:25] *** Joins: System_Error (~SystemErr@user/systemerror)
[11:22:28] *** Quits: aizen (sid462968@id-462968.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[11:23:21] *** Quits: mats1 (sid23029@user/mats1) (Ping timeout: 265 seconds)
[11:23:54] <Hash> I see
[11:24:02] *** Joins: aizen (sid462968@id-462968.ilkley.irccloud.com)
[11:24:23] <Hash> I think it's becuse PKI is used to exchange keys, like symmetric keys can be exchanged with PKI
[11:24:26] *** Joins: mats1 (sid23029@user/mats1)
[11:24:39] <Wulf> what
[11:24:43] <Hash> Since Symmetric is much faster, it is used more commonly
[11:25:32] <Hash> You can encrypt private keys using RSA public/private keys and send those over to someone
[11:25:42] <Wulf> Hash: symmetric keys are exchanged with dh. dh is secured with asymmetric keys. And they are protected through PKI.
[11:25:53] <Hash> I think that's why there are more symmetric algorithms than there are assymetric
[11:26:01] <Hash> Gotcha
[11:26:18] <Wulf> Hash: it's easier to invent a symmetric algorithm that's not instantly broken
[11:26:32] <Hash> Oh I see.
[11:28:48] <Wulf> How about this one: Seed a CSPRNG with a secret. For each 36-byte-block of data to encrypt, XOR it with (md5(rand) || sha1(rand)).
[11:29:04] <Wulf> I assume it's not easy to break. But might be a bit slow.
[11:34:22] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 260 seconds)
[11:40:49] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[11:45:42] *** Joins: andreasbuhr (~quassel@p549dbdeb.dip0.t-ipconnect.de)
[11:45:50] *** Quits: andreasbuhr (~quassel@p549dbdeb.dip0.t-ipconnect.de) (Client Quit)
[11:49:02] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[11:49:33] *** Joins: System_Error (~SystemErr@user/systemerror)
[12:00:30] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[12:02:48] *** Joins: holgersson_work (~holgersso@home-str.buw-eng.de)
[12:02:50] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:09:04] *** Quits: holgersson_work (~holgersso@home-str.buw-eng.de) (Ping timeout: 256 seconds)
[12:10:24] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:11:36] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[12:20:24] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[12:28:26] *** Quits: voices- (~voices_@84.238.197.28) (Remote host closed the connection)
[12:37:21] *** Joins: voices- (~voices_@84.238.197.28)
[12:45:37] *** Joins: andreasbuhr (~quassel@p549dbdeb.dip0.t-ipconnect.de)
[12:45:38] *** Quits: andreasbuhr (~quassel@p549dbdeb.dip0.t-ipconnect.de) (Client Quit)
[12:55:36] *** Joins: igemnace (~ian@user/igemnace)
[12:56:25] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[12:57:40] *** Quits: krin (sid500722@user/krin) (Ping timeout: 260 seconds)
[12:57:40] *** Quits: Mutsuhito (sid13530@id-13530.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:57:59] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:58:08] *** Quits: hlieberman__ (sid17492@id-17492.tinside.irccloud.com) (Ping timeout: 268 seconds)
[12:58:13] *** Quits: AsenMx (~AsenMx@user/asenmx) (Read error: Connection reset by peer)
[12:58:16] *** Quits: aizen (sid462968@id-462968.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[12:58:36] *** Quits: bw__ (sid2730@id-2730.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:58:45] *** Quits: elichai2 (sid212594@id-212594.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[12:58:56] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Ping timeout: 246 seconds)
[12:59:03] *** Quits: griffinmb (sid410590@id-410590.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[12:59:11] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[12:59:15] *** Quits: mats1 (sid23029@user/mats1) (Ping timeout: 264 seconds)
[12:59:17] *** Quits: terabit (sid146285@id-146285.uxbridge.irccloud.com) (Ping timeout: 246 seconds)
[12:59:22] *** Quits: dez (uid92154@user/dez) (Ping timeout: 268 seconds)
[12:59:22] *** Quits: pdg (sid395042@id-395042.lymington.irccloud.com) (Ping timeout: 268 seconds)
[12:59:23] *** Quits: merpnderp (sid16744@id-16744.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[12:59:47] *** Quits: ses (uid38151@id-38151.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[12:59:47] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:59:59] *** Quits: beard (sid110468@user/beard) (Ping timeout: 268 seconds)
[13:00:03] *** Joins: ses (uid38151@hampstead.irccloud.com)
[13:00:06] *** Joins: merpnderp (sid16744@hampstead.irccloud.com)
[13:00:24] *** Joins: pdg (sid395042@lymington.irccloud.com)
[13:01:42] *** Joins: krin (sid500722@user/krin)
[13:01:42] *** Joins: dez (uid92154@user/dez)
[13:01:50] *** Joins: aizen (sid462968@ilkley.irccloud.com)
[13:02:55] *** Joins: Manouchehri (sid384576@hampstead.irccloud.com)
[13:02:57] *** Joins: elichai2 (sid212594@hampstead.irccloud.com)
[13:03:13] *** Joins: hlieberman__ (sid17492@tinside.irccloud.com)
[13:03:16] *** Joins: beard (sid110468@user/beard)
[13:03:16] *** Joins: hendi (sid489601@lymington.irccloud.com)
[13:03:18] *** Joins: griffinmb (sid410590@helmsley.irccloud.com)
[13:03:21] *** Joins: mats1 (sid23029@user/mats1)
[13:03:33] *** Joins: bw__ (sid2730@ilkley.irccloud.com)
[13:03:34] *** Joins: terabit (sid146285@uxbridge.irccloud.com)
[13:03:34] *** Joins: SrPx (sid108780@uxbridge.irccloud.com)
[13:05:08] *** Quits: moose (~moose@user/moose) (Quit: Leaving)
[13:12:16] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[13:12:43] *** Joins: Mutsuhito (sid13530@id-13530.ilkley.irccloud.com)
[13:16:34] *** Parts: Guyver2 (Guyver@guyver2.xs4all.nl) (Closing Window)
[13:23:09] *** Joins: mononote (~mononote@user/mononote)
[13:23:55] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:38:41] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 245 seconds)
[13:41:24] *** Joins: voices- (~voices_@84.238.197.28)
[14:00:36] *** Quits: Douwd (~douwd@nexus.bsdpro.net) (Quit: So long, and thanks for all the fish.)
[14:16:14] *** Joins: holgersson_work (~holgersso@home-str.buw-eng.de)
[14:16:25] *** Quits: holgersson_work (~holgersso@home-str.buw-eng.de) (Client Quit)
[14:16:39] *** Joins: holgersson_work (~holgersso@home-str.buw-eng.de)
[14:19:12] *** Quits: sav_ (~savio@177.12.48.155) (Quit: Leaving)
[14:22:51] <holgersson_work> Hi, I'd like to transfer data from a client to a server over HTTPS and search for feasible ways to make this resistant to man in the middle attacks. As the server's certs will change often (LE) I can't sanely just pin the fingerprint or something like that. Fetching signed fingerprint information from somewhere else would require proper key
[14:22:52] <holgersson_work> handling on the clients, so my naive approach would be using a shared secret (let's say 256bit random data) per client and encrypting data with that secret and decrypting it on the server.
[14:23:19] <holgersson_work> What do you think about this? Am I missing something obvious? Do I need to always sign encrypted data?
[14:27:03] <riv> This is the exact goal of HTTPS
[14:27:11] <riv> so I think that the problem is already solved, right?
[14:27:20] <riv> is there some aspect of the setup that you are concerned about?
[14:27:50] <riv> You should try to sort out the HTTPS situation and use that, don't add an extra layer of encryption
[14:30:32] <holgersson_work> Sounds reasonable, but how can I verify the HTTPS cert?
[14:30:57] <riv> as a client?
[14:31:00] <holgersson_work> yes
[14:31:12] <riv> when you install your OS you get HTTP certificate authority roots installed
[14:31:29] <riv> and those get updated and managed securely but your browser and distro
[14:31:52] <riv> so it should be verified just based on if the browser says its valid or not
[14:32:02] *** Joins: AsenMx (~AsenMx@user/asenmx)
[14:32:19] <riv> only exception would be if a user adds extra CAs to their browser, including a compromised one
[14:32:32] *** Quits: namkeleser (~namkelese@101.179.132.178) (Quit: Client closed)
[14:33:50] <holgersson_work> head -> table. sure, I have to trust the CA, but can do some sanity check and check if the CA matches the expectations.
[14:34:13] <holgersson_work> thanks riv for pointing me to the root certs :-)
[14:34:42] <riv> im not sure about a sanity check
[14:35:26] <riv> the difficulty is that... if you somehow have bad CAs installed, it (theoretically) becomes difficult to identify that because the bad actor could MITM you and lie that it's not a bad CA
[14:35:51] <riv> that's a high level of paranoia that isn't realistic though
[14:36:34] <edk> unfortunately browsers murdered hpkp
[14:36:55] <holgersson_work> no, unfortunately it isn't. IIRC there were CAs removed from that trust store after behaving badly (symantec?).
[14:37:24] <edk> do you control the client implementation in this scenario
[14:37:26] <holgersson_work> anyways, my server will probably keep running with LE certs, so it should be possible to check if the cert is issued by them
[14:37:32] <edk> yes
[14:37:34] <holgersson_work> both
[14:37:40] <holgersson_work> the client is just some python software
[14:37:43] <edk> well then you can verify the SPKI fingerprint
[14:37:54] <holgersson_work> will look for that, ty
[14:38:23] <Peng> If you pin one CA, that will blow up in your face one day
[14:38:37] <holgersson_work> sure, but not today :D
[14:38:43] <edk> you will have to make sure your cert issuance setup reuses the same key forever rather than generating new ones each time, and you'll probably want to make some backup private keys in case you lose control of the current one
[14:38:43] <Peng> :T
[14:38:57] * holgersson_work is AFK for some minutes - thanks for every input so far!
[14:40:57] <Wulf> holgersson_work: what kind of data are you transferring?
[14:41:39] <Wulf> Sometimes it does make sense to sign the data separately and then transfer the signed data over TLS.
[14:42:52] <Peng> holgersson_work: Are you likely to be MITMed by spies or organized cybercriminals? HTTPS shenanigans don't happen to most services.
[14:43:30] <Peng> MITMed or otherwise attacked, I guess
[14:56:35] <Wulf> The ACME protocol, for example, is protected twice. Through TLS, and each client request is signed with the client's account key.
[14:56:57] <Wulf> Software updates are usually signed too even if they're transmitted through TLS.
[14:57:17] <Wulf> Signed emails are usually transmitted through smpt+starttls
[14:57:21] <Wulf> etc. etc.
[14:58:28] *** Quits: holgersson_work (~holgersso@home-str.buw-eng.de) (Quit: Client closed)
[14:59:22] *** Joins: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374)
[15:04:26] *** Quits: MacGyver (~macgyver@user/macgyver) (Quit: WeeChat 3.3)
[15:04:34] *** Joins: MacGyver (~macgyver@user/macgyver)
[15:06:10] *** Joins: X-Scale` (~ARM@31.22.202.54)
[15:08:16] *** Quits: X-Scale (~ARM@31.22.202.54) (Ping timeout: 268 seconds)
[15:08:21] *** X-Scale` is now known as X-Scale
[15:08:46] *** Quits: Pythayr` (~pither195@64.42.181.51) (Remote host closed the connection)
[15:15:16] <menace> is there a python module where i can do gnupg/openpgp compatible operations (like signing/verification for example) without having gnupg/pgp installed? 
[15:15:28] *** Joins: namkeleser (~namkelese@101.179.132.178)
[15:16:05] *** Quits: martin02 (~silas@141.84.69.76) (Ping timeout: 256 seconds)
[15:16:32] <Wulf> menace: don't now. I'm planning to build one. Well, one of many projects in an early stage.
[15:18:04] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[15:18:32] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[15:20:35] *** Quits: aleck1 (~aleck@user/aleck) (Remote host closed the connection)
[15:21:05] <rk4> https://gitlab.com/sequoia-pgp/sequoia#bindings would be the first thing i investigated
[15:21:45] <rk4> i haven't sequoia, let alone the bindings, so an evaluation of both of those would be part of the investigation :>
[15:22:20] *** Joins: holgersson_work (~holgersso@home-str.buw-eng.de)
[15:23:43] <holgersson_work> re, after the webclient disconnected me..
[15:24:45] <holgersson_work> edk, in the long run I might even set up a signed file on the server containing the fingerprint and some infra to update the pubkey for that signatures on the clients.
[15:24:51] <holgersson_work> but that's overkill right now
[15:26:07] <holgersson_work> Wulf: let's call it sensor data but they can contain information that I'd like to keep confidential, so reading them by a third party would be awful
[15:26:32] *** Joins: aleck (~aleck@user/aleck)
[15:26:52] <sonOfRa> TLS (or https in this case) already offers confidentiality.
[15:27:07] <MacGyver> holgersson_work: DANE is intended for your usecase.
[15:27:24] <MacGyver> holgersson_work: https://en.wikipedia.org/wiki/DNS-based_Authentication_of_Named_Entities
[15:27:33] <holgersson_work> MacGyver Doesn't DANE need dnssec?
[15:27:37] <MacGyver> Yes, it does.
[15:27:59] <MacGyver> But compare that to *not* having DANE, you trust all Internet PKI CAs.
[15:28:16] <MacGyver> It's the middle ground between pinning a sub-CA / server cert and not doing anything.
[15:28:24] <sonOfRa> Adding a lot of complicated extra steps is probably a waste of time in most scenarios. Should probably start with a threat model, rather than throwing random "this adds extra security" bits at the problem
[15:28:26] <holgersson_work> I like DANE, it's just that I don't have control over the DNS
[15:31:11] <holgersson_work> sonOfRa: I did so, and there could be anyone inside the clients' LANs pretending they are my server.
[15:32:43] <sonOfRa> So the working assumption is that the network you're deploying this in is generally hostile and prone to DNS takeovers?
[15:33:16] <Peng> holgersson_work: Maybe you should get more influence over the DNS
[15:33:35] <MacGyver> If you don't have control over the DNS, you can't trust LetsEncrypt either.
[15:34:07] <sonOfRa> Because if that is the case, you cannot trust your server getting the correct certificates from LetsEncrypt
[15:34:20] <MacGyver> (Because there's nothing stopping the DNS admin from gratuitously issuing certificates for that domain in whichever way they please.)
[15:35:29] <holgersson_work> sonOfRa: Yes.
[15:36:32] <holgersson_work> but it's pural, networks. I can't trust the networks hosting the clients, but I can trust the network with the server (internet :-D)
[15:36:32] <sonOfRa> Also, you're saying *anyone* can pretend this. Is this a network where *everyone but you* has access to DNS records?
[15:39:07] <sonOfRa> If you can't trust DNS, you'll generally have a problem with any TLS authentication.
[15:39:09] <holgersson_work> the more I think about that: yes. I don't know who has access and who e.g. spans another DHCP server telling me I should forward all my traffic through his host
[15:39:54] <sonOfRa> One thing that can work in this case, but I wouldn't really recommend is hard coding the IP address of the server, and setting up your own CA and issue IP-based certificates.
[15:40:20] <holgersson_work> yes, and that was the reason for that strange encryption-inside-TLS approach.
[15:40:30] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[15:40:53] <holgersson_work> the secret for that encryption would be shared before the client will be moved into the "hostile" network
[15:41:04] <holgersson_work> but hard coded, symmetrically *sigh*
[15:41:17] *** Joins: igemnace (~ian@user/igemnace)
[15:43:32] <MacGyver> I don't understand the issue. Do you, or don't you, have administrative control over the DNS domain? I get the feeling you're conflating "I don't control the DHCP-provided DNS resolver the clients use" with "I don't control the DNS entries for the domain". The whole point of dnssec is to prevent DNS takeovers from mattering (of course you have to enforce dnssec on the client for that to be
[15:43:34] <MacGyver> effective). Once you have that, you can build the rest on top of that.
[15:48:26] <holgersson_work> OK, I'll try to describe the whole picture again: I've got clients in un-trusted networks and a server in the free internet which can be trusted reasonably for getting proper TLS certificates via acme from let's encrypt. I have control over the server's DNS entries and could probably enable DNSSEC there, but I had (with other setups) trouble with
[15:48:27] <holgersson_work> DNS resolution if routers/firewalls didn't support DNSSEC in the way from my DNS server to my clients, so I don't trust it to be stable enough for every-day usage.
[15:51:40] <holgersson_work> Now my assumption is, that in theory anyone could say "Hi, I'm your server foo.com' showing my any TLS cert and I want to verify on the client that the cert I see is the cert that's valid on my server.
[15:53:48] <sonOfRa> I'd say that's unlikely to say the least
[15:54:01] <holgersson_work> why?
[15:54:02] <sonOfRa> Because in order to be able to get a *valid* TLS certificate for that domain, they'd have to go through some issuer
[15:54:10] <MacGyver> Right. Well, since relying on dnssec is out, and normal domain validation is apparently not enough for you because the attacker might somehow trick any other CA to provide a valid certificate for the domain, pinning the Let's Encrypt root CA seems to me to be your only remaining option. Bearing in mind the mandatory software update you'll need to do when they roll that over.
[15:54:20] <Peng> I don't understand your issue. Does your TLS client have all certificate validation off, and you're trying to turn it on? Or is normal certificate validation working but you want something extra?
[15:54:58] <sonOfRa> So if your client connects, sees a certificate for "yourserver.com", and it is valid according to the client's validation rules, then in all likelihood *it is your server*
[15:56:08] <sonOfRa> Unless you consider the client that your software is running on *also compromised*, but if that is your working assumption, no amount of crypto you add will make your system safe
[15:57:01] <holgersson_work> sonOfRa, MacGyver: Yes, I would check the CA/cert issuer(?) of that cert as riv suggested earlier :)
[15:57:07] <holgersson_work> s/would/will/
[15:57:37] <MacGyver> But understand that you're trading a current mostly non-issue for a future very-much-real-issue.
[15:57:50] <MacGyver> Because that root CA *will* roll over.
[15:58:08] <MacGyver> (Though since they've just had one, not for another ten years or so, I think.)
[15:58:38] <holgersson_work> yes and thanks for pointing that out again.
[15:58:49] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[15:59:13] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[15:59:37] <holgersson_work> this is mostly a short-time fix anyway and the whole setup will change in the foreseeable future
[16:00:21] <holgersson_work> Peng: The core problem is that I can only protect agains invalid certs, but not against one that is technically valid, but issued by someone not authorized to do so.
[16:00:44] <holgersson_work> -> problem IMHO solved
[16:01:35] *** Joins: rtypo (~alex@user/rtypo)
[16:01:41] <Peng> holgersson_work: Not letting unauthorized people issue certs is one of a CA's main jobs. (One that they are mediocre at, admittedly.)
[16:02:52] <holgersson_work> that's why I don't trust them :-b
[16:03:32] <sonOfRa> Do you generally verify the fingerprints of everything you connect to? Because it's not like this exact scenario doesn't apply to every single TLS connection you open every day
[16:04:09] <Peng> sonOfRa: Not if you're in the Google ecosystem, where they pin their own CA for their domains. ;-)
[16:04:24] <MacGyver> sonOfRa: Which is why nowadays chrome e.g. checks certificate transparency logs.
[16:04:30] <sonOfRa> exactly
[16:04:43] <maroon> then you have chrome flagging stuff like that, except the error messages it gives you are completely worthless at telling you what the real problem is
[16:04:56] <MacGyver> There are mitigations in place for this scenario in client software, which is exactly what holgersson_work wants to do in their client software.
[16:05:01] *** Joins: RickSanchez (~RickSanch@2607:fb90:1d67:afea:c563:8bae:d960:33d6)
[16:05:16] <MacGyver> So why exactly shouldn't they?
[16:06:26] <Peng> Pinning is foot-shooty and should be approached with great care, IMO.
[16:06:46] <holgersson_work> sonOfRa: actually I do so here and there, but ofc not generally.
[16:07:23] <MacGyver> Peng: I agree there, but if this is indeed a short-term thing (and nothing sticks around as long as a short-term solution of course) I don't really see an issue.
[16:07:26] <sonOfRa> I suppose https://sslmate.com/ct_search_api/ could be a helpful step if it's a non-interactive client software
[16:07:33] <sonOfRa> Verify CT logs when you make calls
[16:07:36] <Peng> (Does your stuff check revocation?)
[16:09:31] *** Quits: RickSanchez (~RickSanch@2607:fb90:1d67:afea:c563:8bae:d960:33d6) (Ping timeout: 245 seconds)
[16:11:13] <maroon> microsoft excel: "hey let's make our =date function be compatible with lotus 123 so we can steal market share, we'll fix that year 1900 leap year bug later! 40 years later...
[16:12:18] *** Quits: gggp (~gggp@li1776-19.members.linode.com) (Remote host closed the connection)
[16:12:31] *** Quits: voices- (~voices_@84.238.197.28) (Remote host closed the connection)
[16:13:22] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[16:13:24] *** Joins: gggp (~gggp@li1776-19.members.linode.com)
[16:20:22] *** Quits: gggp (~gggp@li1776-19.members.linode.com) (Remote host closed the connection)
[16:21:43] *** Joins: gggp (~gggp@li1776-19.members.linode.com)
[16:22:47] <holgersson_work> (Peng: no)
[16:22:59] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[16:23:51] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 264 seconds)
[16:29:47] *** Joins: voices- (~voices_@84.238.197.28)
[16:34:37] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 265 seconds)
[16:35:38] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[16:45:34] *** Quits: bw__ (sid2730@ilkley.irccloud.com) ()
[16:45:53] *** Joins: bw (sid2730@user/betawaffle)
[16:46:06] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:49:18] *** Joins: Guest60378 (~IRCgo@197.1.221.107)
[16:51:18] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[16:54:52] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[17:02:42] *** Quits: namkeleser (~namkelese@101.179.132.178) (Quit: Client closed)
[17:14:57] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:15:01] *** Joins: Douwd (daniel@crux.bsdpro.net)
[17:22:05] *** Joins: GAYDERG (~GAYDERG@102.33.35.23)
[17:22:30] *** Quits: GAYDERG (~GAYDERG@102.33.35.23) (Client Quit)
[17:23:36] *** Quits: Guest60378 (~IRCgo@197.1.221.107) (K-Lined)
[17:35:40] *** Joins: son0p (~ff@181.136.122.143)
[17:48:17] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[17:51:53] *** Joins: aliosablack (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374)
[17:52:03] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[17:52:09] *** Quits: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[17:57:21] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:00:27] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 264 seconds)
[18:06:53] <dusk> Ugh. Got the notice for my CHES submission
[18:07:58] <dusk> Reading reviewer feedback is always so intense :(
[18:08:14] *** Quits: gggp (~gggp@li1776-19.members.linode.com) (Remote host closed the connection)
[18:09:04] *** Joins: gggp (~gggp@li1776-19.members.linode.com)
[18:11:59] *** Quits: holgersson_work (~holgersso@home-str.buw-eng.de) (Quit: Client closed)
[18:14:05] *** Quits: nisstyre (~wes@li798-187.members.linode.com) (Changing host)
[18:14:05] *** Joins: nisstyre (~wes@user/nisstyre)
[18:15:12] <yawkat> pls rewrite your paper. thanks!
[18:17:30] <Alipha> holgersson: unless your data has high value on the black market or is valuable to a nation state, someone obtaining a cert from another CA seems highly unlikely. But I'd go with double encryption in that case then--not symmetric encryption, but public key encryption using libsodium or pgp or something
[18:17:48] <dusk> yawkat: <3
[18:18:03] <dusk> Yeah this is one of the reasons why I'm seriously considering leaving the crypto research community
[18:18:22] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[18:18:58] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Remote host closed the connection)
[18:24:47] <holgersson> Alipha: Thanks for that recommendation. I'll stick to that root-cert pinning approach for now and take a look into libsodium to rebuild the arch for the near future.
[18:25:29] *** Joins: igemnace (~ian@user/igemnace)
[18:36:04] *** Joins: voices- (~voices_@84.238.197.28)
[18:41:15] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 264 seconds)
[18:57:37] *** Joins: voices- (~voices_@84.238.197.28)
[19:05:49] *** Joins: System_Error (~SystemErr@user/systemerror)
[19:10:15] *** Joins: zro (~zro@user/zro)
[19:13:00] *** Quits: gggp (~gggp@li1776-19.members.linode.com) (Remote host closed the connection)
[19:14:22] *** Joins: gggp (~gggp@li1776-19.members.linode.com)
[19:21:58] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:8c55:8432:f2b6:d367) (Ping timeout: 260 seconds)
[19:32:28] *** Joins: Pythayr (~pither195@2600:1700:82f0:2fe0:7a00:12a4:dcac:6d69)
[19:33:16] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 245 seconds)
[19:35:52] *** Joins: voices- (~voices_@84.238.197.28)
[19:39:11] *** Joins: Pythayr` (~pither195@64.42.181.50)
[19:39:27] *** Quits: Pythayr (~pither195@2600:1700:82f0:2fe0:7a00:12a4:dcac:6d69) (Ping timeout: 264 seconds)
[19:42:00] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Ping timeout: 276 seconds)
[20:00:46] *** Quits: gggp (~gggp@li1776-19.members.linode.com) (Ping timeout: 245 seconds)
[20:29:34] *** Quits: voices- (~voices_@84.238.197.28) (Remote host closed the connection)
[20:46:44] *** Joins: voices- (~voices_@84.238.197.28)
[20:51:11] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 245 seconds)
[20:55:06] *** Joins: Narrat (~omnius@p200300df5f0df13d06ea56fffe2e7cdc.dip0.t-ipconnect.de)
[20:56:09] *** Joins: voices- (~voices_@84.238.197.28)
[20:59:02] *** Quits: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9) (Ping timeout: 260 seconds)
[20:59:23] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:15:05] *** _- is now known as you
[21:19:52] *** you is now known as ^X
[21:27:41] *** BrandonArnold2 is now known as BrandonArnold
[21:41:36] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[21:43:15] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[21:45:18] <taeaad> dusk: What, the peer review process?
[21:45:37] *** Joins: System_Error (~SystemErr@user/systemerror)
[21:46:03] <dusk> Yeah; but also more generally the inflated value of getting papers published
[21:47:53] <taeaad> If your work is correct you can upload it to arXiv. But the points for papers is something of a BS habit that humanity has picked up. I understand the "researchers need to lead to finances working out" but finances is partially BS too: Facebook is a $x billion company with a net negative general influence. So in my mind that's all just negative money; pure evil of sorts.
[21:49:07] <dusk> I think if this paper does not get accepted this round I will probably put it on ePrint, quit the PhD, and apply at the first company that will hire me
[21:50:19] *** Joins: aleck1 (~aleck@user/aleck)
[21:51:03] <taeaad> History also is written by historians; in the mathematics side of things there have been many great researchers that were almost (or were in fact) overlooked. John Nash for example was something of a social catalyst more than a lone mathematician in the sense that he could lead research by nudging other people. But anyway, my point is that value is elusive where money or rigidity takes over.
[21:51:21] <dusk> That is so true
[21:51:35] <dusk> But I'm afraid that might even be worse in industry
[21:51:51] <taeaad> An article featured in Wikipedia today is the one about F. Scott Fitzgerald. He died thinking that no-one would ever read his novels.
[21:51:58] <dusk> Lol
[21:52:11] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[21:52:26] <taeaad> dusk: It's pretty bad in industry. I try to carve out a cave and hide in it to focus in the shade.
[21:52:57] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[21:53:02] <dusk> At least you don't have to publish as much :P
[21:53:04] <taeaad> I've had two jobs that would have lead nowhere if I had stayed there. But leaving is also a game; you have to time it in order to work out living expenses.
[21:53:08] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 265 seconds)
[21:53:45] <taeaad> dusk: Yes, but if you think you would like to continue with research, perhaps just do it anyway.
[21:53:53] <dusk> I think I would
[21:54:01] <dusk> But I would do it in the way I think we should
[21:54:16] <dusk> I would try to follow @jedisct1 in their ways
[21:54:23] <taeaad> Who is that?
[21:54:30] <dusk> The author of libsodium.
[21:54:58] <taeaad> Oh, I know about libsodium but not the author.
[21:55:03] <dusk> I am not aware of *any* paper that he published, but he maintains *the* state-of-the-art crypto library on GitHub atm
[21:55:33] <taeaad> That's cool.
[21:55:46] <dusk> He is generally pretty active in the community I think. I met him last year on a virtual workshop iirc
[21:56:07] <taeaad> Do they have any plans for (partially) homomorphic encryption?
[21:56:17] <dusk> I very much doubt it :P
[21:57:19] <dusk> What kind of primitives do you need for that?
[21:57:21] <taeaad> I didn't think so but I was just generally asking.
[21:58:03] <taeaad> dusk: Well the thing is that fully homomorphic would be fully general. But given that people instead want some sort of compromise, I surmise that said compromise would instead be specific.
[21:58:35] <taeaad> But the concept is the same as homomorphisms of groups, or what is termed functoriality more generally for that matter.
[21:58:52] <dusk> Check
[21:59:33] <taeaad> My C skills are nowhere near good enough to think about implimentation, but my mathe skills are somewhat suitable for it. Especially since one would want to do data science and that's the motivation to start off with.
[21:59:50] <ms7821> there are FHE libraries out there
[22:00:00] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[22:00:03] <taeaad> Yes there are.
[22:00:32] <taeaad> Written by the same authors of the original papers.
[22:00:43] <ms7821> eh?
[22:00:54] <taeaad> But my expectation is that you do need dedicated programmers too; not just mathematicians.
[22:01:05] <dusk> Here here
[22:01:15] <MacGyver> That's effectively what jedisct1 is.
[22:01:19] <dusk> Hear hear*
[22:01:25] <dusk> Exactly
[22:01:27] <MacGyver> Took NaCl, made it usable.
[22:01:28] <taeaad> ms7821: Craig Gentry I believe and Vinod Vainkuntanathan (probably typo there).
[22:02:01] <ms7821> I'm talking about things like https://github.com/google/fully-homomorphic-encryption and https://github.com/microsoft/SEAL
[22:02:06] <dusk> MacGyver: But I feel these kinds of people are (unfortunately) rare
[22:02:12] <taeaad> But they use ring theory and some (a lot) would have to be reimplimented in faster ways.
[22:02:12] <yawkat> you need dedicated fashion photographers too, not just programmers and mathematicians.
[22:02:57] <MacGyver> dusk: Yeah, well, anyone can write a paper and get it accepted somewhere -- much harded to write software and not have it break anywhere.
[22:03:01] <MacGyver> harder*
[22:03:05] *** Quits: voices- (~voices_@84.238.197.28) (Remote host closed the connection)
[22:03:17] <taeaad> ms7821: Oh, yes I've seen MS and Google's libraries. They are similar, but all have slightly different focuses. It's not like libsodium where everything works in standard and verified ways for normal computational needs.
[22:03:21] <dusk> MacGyver: Yeah but your work needs to have novelty ~~~~
[22:03:42] <dusk> MacGyver: "Otherwise it is not really research"
[22:03:44] <ms7821> well it's an area of ongoing research because nothing is really practical yet
[22:03:53] <ms7821> whereas libsodium is a "weaponised" library
[22:04:13] <ms7821> oh also https://github.com/homenc/HElib
[22:04:17] <taeaad> ms7821: So my point is that you can break it and then it's practicaly. But breaking here requires serious understanding of what you are doing.
[22:04:29] <taeaad> *practical
[22:04:48] <MacGyver> dusk: Still, there's more room and respect for research than for good engineering, which is a shame.
[22:04:56] <taeaad> The popular example is to "do data science across different banks".
[22:04:58] <ms7821> I thought you were making a suggestion for libsodium to support it
[22:05:15] <taeaad> So banking would like PHE (or FHE) for things like fraud detection.
[22:05:25] <dusk> MacGyver: Uhu
[22:05:41] <taeaad> But my worry is that the bankers won't understand the programs and it's even worse for PHE than FHE, of course.
[22:05:53] <ms7821> I don't think FHE helps with fraud detection
[22:06:05] <ms7821> sadly, the first real use case for it is probably going to be DRM (again)
[22:06:11] <taeaad> So PHE breaks something that doesn't make it FHE anymore, but gains in speed and implimentation ability.
[22:06:37] <taeaad> ms7821: This is just in principal. I don't know if any banks use it yet.
[22:06:39] <MacGyver> No no no.
[22:06:43] <MacGyver> Sugar beet auctions.
[22:07:00] <ms7821> lol
[22:07:10] <dusk> :')
[22:07:42] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 260 seconds)
[22:08:14] <taeaad> My point is simply that machine learning underneath HE might well break the HE or else leaks statistics that could be used to break HE. Even if the HE works, the data returned by the ML routine would need to be audited and agreed upon priorly.
[22:08:42] <ms7821> wait what, when did we get onto ML?
[22:09:07] <taeaad> ms7821: That's the use case that I was explaining.
[22:09:10] <ms7821> or is that what you meant banks would use?
[22:09:19] <ms7821> ML is _already_ used for fraud detection
[22:10:01] <taeaad> ms7821: Right. But you need security clearance. With HE (presumable well implimented) you could send the ML service provider cyphertext instead of plaintext.
[22:10:41] <MacGyver> ms7821: The usecase is that the bank can offload the training and detection to some Amazon or Google or somesuch and not have to worry about leaking the data.
[22:10:52] <taeaad> But I would do both: Still have access restriction and encrypt and send cyphertext anyway. Banks always need the maximum possible restrictions.
[22:11:08] <MacGyver> ms7821: Decide for yourself how desirable this development is, of course.
[22:11:09] <ms7821> they already do, banks don't require some bitcoin-style absolute trust thing
[22:11:26] <MacGyver> ms7821: They would definitely *like* to not have to rely on contracts and good behaviour of the cloud provider.
[22:11:37] <MacGyver> It's pretty much *the* usecase for FHE.
[22:12:02] <ms7821> maybe FHE will enable lower-quality ML providers to publish their models without worrying about IP but generally this stuff's done by contract
[22:12:07] <MacGyver> It's also why you don't see it actually used -- it's currently inefficient and we have contracts and good behaviour.
[22:12:37] <ms7821> hmm, I still feel like that's the cryptographer's dream of FHE, rather than a killer app
[22:13:16] <ms7821> if this stuff were important it would be using sgx already
[22:13:49] <MacGyver> Why do you assume they aren't?
[22:13:51] *** Parts: tolarz (bfa39a78db@ircbox.informatik.uni-erlangen.de) (WeeChat 3.0)
[22:13:59] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[22:14:55] <ms7821> I haven't seen anyone advertising it yet, but yeah perhaps they are
[22:15:49] <ms7821> hmm, https://www.unite.ai/intel-consilient-join-forces-to-use-federated-learning-to-fight-financial-fraud/ seems to be at the concept stage
[22:16:30] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[22:16:36] <taeaad> A calendar would work well with FHE. You can make all data events 100kb and have calendars synchronised without revealing the events.
[22:16:54] <taeaad> MS Exchange's calendar is actually rediculous: It uses ICS which is an open format, but synchronises only if you have a deal with MS. Sending an ICS from Thunderbird without an MS account then they refuse to automatically add it to the calendar for the receiver.
[22:18:37] <taeaad> A FHE calendar would be decentrialised and use email to send the encrypted blobs. Then again, you don't need FHE to do that, but I think it's a sensible use case as it makes sure there is no decryption step where an intermediary can read your calendar.
[22:18:40] *** Joins: voices- (~voices_@84.238.197.28)
[22:20:06] <taeaad> You will have to whitelist email addresses that can add to your calendar. MS whitelists, well, people who use MS and people who use Google at times when MS and Google do not engage in, er, "wars".
[22:20:29] <taeaad> But anyway, it's a non banking example.
[22:21:07] <taeaad> I would be keen to write this, but my time is taken up by ML work.
[22:23:16] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 245 seconds)
[22:43:18] *** Quits: Elzington (~Elzington@static-68-235-44-38.cust.tzulo.com) (Quit: Leaving)
[22:48:02] *** Joins: voices- (~voices_@84.238.197.28)
[22:51:45] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[22:54:43] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[23:02:50] *** Joins: chasmo77 (~chas77@71.63.241.168)
[23:10:39] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 264 seconds)
[23:16:39] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 264 seconds)
[23:19:44] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:20:16] *** Joins: andreasbuhr (~quassel@p549dbdeb.dip0.t-ipconnect.de)
[23:20:28] *** Quits: andreasbuhr (~quassel@p549dbdeb.dip0.t-ipconnect.de) (Client Quit)
[23:22:01] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[23:22:22] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[23:25:34] *** Quits: qbt (~qbt@user/edun) (Quit: Leaving.)
[23:25:41] *** Joins: qbt (~qbt@user/edun)
[23:26:21] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[23:45:14] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:48:58] *** Quits: VarunAgw (~VarunAgw@103.158.148.26) (Ping timeout: 260 seconds)
[23:53:29] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[23:58:45] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
