[00:00:36] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 240 seconds)
[00:08:10] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[00:14:32] <d_bot_> <companion_cube> ðŸ˜‚
[00:14:41] <d_bot_> <companion_cube> nah I'm just curious
[00:22:34] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[00:39:15] *** Quits: gravicappa (~gravicapp@145.255.0.191) (Ping timeout: 256 seconds)
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:18:55] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[01:19:34] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[01:19:42] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:20:57] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:24:26] *** Joins: ski (~ski@remote12.chalmers.se)
[02:15:35] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[02:23:10] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[02:23:44] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[02:37:33] *** Quits: jlrnick (~josephler@2a01cb040a159400c0436636e952777e.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[02:40:24] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[02:54:27] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[03:25:56] *** Quits: spip (~bobo@37.165.33.217) (Ping timeout: 252 seconds)
[03:25:58] *** Joins: bobo (~bobo@37.164.117.39)
[03:32:00] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:53:55] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 268 seconds)
[03:56:41] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[03:57:14] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[05:20:43] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[05:20:52] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[05:21:25] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Remote host closed the connection)
[05:21:48] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[06:01:20] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:04:41] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[06:18:35] <d_bot_> <dariusf> just curious, what causes std_formatter to be flushed? is a @. automatically emitted at the end of the program?
[06:19:19] <d_bot_> <dariusf> say if the whole program is `let () = Format.printf "a"`, without an explicit flush
[06:19:34] <companion_cube> there might be a `at_exit`
[06:23:15] <companion_cube> https://c-cube.github.io/tiny_httpd/dev/tiny_httpd/Tiny_httpd_html/index.html ahahah I reinvent the wheeeeeel
[06:46:41] <d_bot_> <RegularSpatula> dariusf: looks like the `at_exit` here possibly? (https://github.com/ocaml/ocaml/blob/adb1d64aeb61ac2f85aafe1442f7268942661061/stdlib/format.ml#L1475)
[06:47:24] <d_bot_> <dariusf> yep! thanks for looking that up
[06:48:12] <d_bot_> <RegularSpatula> ah sorry for the noise if you had already found it!
[07:08:19] <d_bot_> <mimoo> hello hello. Been struggling to use the stdlib Event module
[07:08:38] <d_bot_> <mimoo> I'm creating two channels, one for each direction
[07:09:06] <d_bot_> <mimoo> then on one thread send with `Event.sync (Event.send send msg)`
[07:09:33] <d_bot_> <mimoo> oh nevermind I think I see the problem
[07:10:52] <d_bot_> <mimoo> sync will make it block if nobody tries to listen on the other side right, is there a notion of buffered channels?
[07:11:49] *** Joins: mbuf (~Shakthi@122.162.78.73)
[07:23:00] <sleepydog> @mimoo I don't think that module has a buffered channel. i think you could get the same semantics with a Queue
[07:23:07] <sleepydog> and an unbufferd channel
[07:23:55] <sleepydog> thinking about it, you might need an extra thread for that
[07:32:13] *** Quits: chiastre (~chiastre@user/chiastre) (Ping timeout: 268 seconds)
[07:40:11] *** Joins: chiastre (~chiastre@user/chiastre)
[08:05:25] <d_bot_> <mimoo> yeah I just used a Queue and use Event.poll instead, seems to work
[08:05:39] <d_bot_> <mimoo> if it doesn't send, then queue it and try again later
[08:05:55] <d_bot_> <mimoo> can I assert that a type is a specific tag of a variant?
[08:06:04] <d_bot_> <mimoo> type t = A | B of int
[08:06:12] <d_bot_> <mimoo> assert (a = B _)
[08:06:13] <d_bot_> <mimoo> ?
[08:06:15] <d_bot_> <mimoo> doesn't seem to work
[08:09:17] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[08:36:01] <sleepydog> I would use pattern matching to do that
[08:37:52] <sleepydog> assert (match a with B _ -> true | _ -> false)
[08:46:06] <d_bot_> <mimoo> I was hopping to avoid a match
[08:57:52] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:57:56] *** Quits: mbuf (~Shakthi@122.162.78.73) (Quit: Leaving)
[10:18:56] *** Joins: gravicappa (~gravicapp@145.255.0.191)
[10:20:28] <sim642> There is the stupid way: let (B _) = a in ...
[10:20:37] <sim642> Just gotta silence the partial match warnings
[10:21:04] <sim642> And instead of Assert_failure you'll get Match_failure
[10:22:20] *** Joins: mro (~mro@port-92-195-182-144.dynamic.as20676.net)
[10:22:36] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[10:27:40] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[10:44:18] *** Joins: mbuf (~Shakthi@122.174.182.104)
[10:49:19] *** Quits: gahr (~gahr@user/gahr) (Quit: leaving)
[10:51:31] *** Joins: gahr (~gahr@user/gahr)
[11:01:20] *** Quits: mro (~mro@port-92-195-182-144.dynamic.as20676.net) (Remote host closed the connection)
[11:11:05] *** Joins: mro (~mro@port-92-195-182-144.dynamic.as20676.net)
[11:18:45] *** Joins: spip (~bobo@37.173.241.154)
[11:19:00] *** Quits: bobo (~bobo@37.164.117.39) (Ping timeout: 240 seconds)
[11:44:31] *** Joins: nd__ (~nd@ip-176-199-211-174.um44.pools.vodafone-ip.de)
[11:45:03] *** Joins: epony (epony@user/epony)
[11:56:16] *** Joins: bobo (~bobo@37.173.241.154)
[11:56:46] *** Quits: spip (~bobo@37.173.241.154) (Ping timeout: 268 seconds)
[12:14:45] *** Quits: kurfen (~kurfen@213.152.188.7) (Ping timeout: 250 seconds)
[12:14:51] *** Joins: kurfen_ (~kurfen@176.119.195.9)
[12:15:35] *** Quits: gahr (~gahr@user/gahr) (Quit: leaving)
[12:17:25] *** Joins: gahr (~gahr@user/gahr)
[12:18:28] *** Quits: gahr (~gahr@user/gahr) (Client Quit)
[12:18:34] *** Joins: ymherklotz (~ymherklot@2a0c:5bc0:40:107b:fdfc:4d2d:898a:f9f5)
[12:18:57] *** Joins: gahr (~gahr@user/gahr)
[12:28:31] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:30:12] *** Quits: smondet[m] (~smondetma@2001:470:69fc:105::b33) (Quit: You have been kicked for being idle)
[12:41:00] *** Quits: nd__ (~nd@ip-176-199-211-174.um44.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[12:46:01] *** Joins: olle (~olle@c-8a89e455.034-536-6d6c6d4.bbcust.telenor.se)
[12:55:07] *** Quits: Techcable (~Techcable@168.235.93.147) (Read error: Connection reset by peer)
[12:55:14] *** Joins: Techcable (~Techcable@168.235.93.147)
[13:03:03] *** Joins: nd__ (~nd@ip-176-199-211-174.um44.pools.vodafone-ip.de)
[13:09:02] *** Quits: nd__ (~nd@ip-176-199-211-174.um44.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[13:17:53] *** Joins: andreypopp_ (uid22726@id-22726.ilkley.irccloud.com)
[13:47:43] *** Joins: nd__ (~nd@ip-176-199-211-174.um44.pools.vodafone-ip.de)
[13:52:57] *** Quits: nd__ (~nd@ip-176-199-211-174.um44.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[14:32:07] *** Joins: nd__ (~nd@ip-176-199-211-174.um44.pools.vodafone-ip.de)
[14:39:21] <qwr> you can make the match a function and assert function call, if you have it repeatedly in code...
[14:39:46] <olle> assert?
[14:39:59] <olle> A match expression is not a first-class citizen
[14:40:11] <olle> What's your use-case?
[14:43:01] *** Quits: nd__ (~nd@ip-176-199-211-174.um44.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[14:57:35] *** Joins: nd__ (~nd@ip-176-199-211-174.um44.pools.vodafone-ip.de)
[15:09:12] <d_bot_> <glennsl> There's a ppx for that: https://github.com/wrbs/ppx_matches
[15:09:42] <d_bot_> <glennsl> I assume it'll work with wildcard patterns, but haven't actually tested that
[15:20:57] *** Quits: olle (~olle@c-8a89e455.034-536-6d6c6d4.bbcust.telenor.se) (Remote host closed the connection)
[15:46:59] *** Quits: mro (~mro@port-92-195-182-144.dynamic.as20676.net) (Remote host closed the connection)
[15:52:49] <d_bot_> <andreypopp> what are the go to libraries for working with date/time?
[15:58:46] <d_bot_> <VPhantom> I wrote my own, but that said <https://github.com/daypack-dev/timere> seems _very_ complete.
[16:00:48] <d_bot_> <andreypopp> yeah... the amount of deps though... I'm looking for something to map postgresql's interval type into ocaml
[16:01:41] <d_bot_> <andreypopp> maybe just an integer value of seconds would work
[16:03:34] <d_bot_> <VPhantom> I deal with seconds when I can in my projects, yeah. It makes dealing with offsets easier and sometimes even the stdlib can be enough for converting to/from timestamps (if you happen to use UTC).
[16:04:19] <d_bot_> <VPhantom> The fun stuff starts when you get into day/calendar offsets because that becomes very hairy (leap years, Julian vs Gregorian, etc.)
[16:04:52] <d_bot_> <VPhantom> The venerable `CalendarLib` helps there if you want few dependencies.
[16:05:22] <d_bot_> <VPhantom> <https://github.com/ocaml-community/calendar>
[16:05:24] <d_bot_> <andreypopp> yeah... but in my case I think I want to conform to pg's behaviour so probably will just try to use pg's C api
[16:05:40] <d_bot_> <VPhantom> Ah yes, if you're already linking to it you might as well get the most out of it.
[16:06:26] <d_bot_> <VPhantom> Wow, venerable indeed (CalendarLib): "This library requires OCaml 3.09.1 or higher. OCaml 3.09 is usable at your own risk." ðŸ˜›
[16:08:03] *** Joins: olle (~olle@212-181-59-82.customer.telia.com)
[16:22:19] <d_bot_> <darrenldl> @andreypopp ptime might suffice?
[16:29:01] <d_bot_> <andreypopp> actually ptime looks good, thanks!
[16:39:16] *** Quits: nd__ (~nd@ip-176-199-211-174.um44.pools.vodafone-ip.de) (Quit: leaving)
[16:52:43] <d_bot_> <darrenldl> timedesc will have much fewer deps eventually...just when i have time to get to that
[16:52:45] *** Joins: bartholin (~bartholin@109.53.7.222)
[16:54:07] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[16:58:28] <d_bot_> <VPhantom> Oh yeah that's the one I was looking for when I thought of CalendarLib!
[16:58:57] *** Quits: hannes (~hannes@193.30.40.133) (Ping timeout: 240 seconds)
[17:03:59] <d_bot_> <darrenldl> some reduction will necessitate vendoring some functions within timedesc itself, which im slightly on the fence about, but i guess that'll have to be the case for a library to be usable as a fundamental lib
[17:10:00] *** Joins: mro (~mro@port-92-195-182-144.dynamic.as20676.net)
[17:20:11] *** Quits: bartholin (~bartholin@109.53.7.222) (Quit: Leaving)
[17:30:05] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:33:37] <companion_cube> ahahah ffs protobuf
[17:33:52] <companion_cube> I mean, the whole "required is never good" so you have comments saying "this is actually required" :D
[17:48:47] <Cypi> :D
[17:49:16] <companion_cube> they added back `optional` though
[17:49:41] <sleepydog> they made optional the default
[17:53:00] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 250 seconds)
[17:57:09] <d_bot_> <VPhantom> My main gripe is with messages for which I have to add a comment saying: "due to limitations in Protobuf this isn't declared as a 'oneof' but it MUST be treated as such".
[17:57:16] <companion_cube> oooof
[17:57:21] <d_bot_> <VPhantom> And it's not a limitation with the format, it's only with the IDL.
[17:57:31] <d_bot_> <VPhantom> Can't have repeated fields or maps in a oneof.
[17:57:43] <d_bot_> <VPhantom> Can't have ENUMs as keys in a map, either.
[17:57:59] <companion_cube> ah but you can wrap the fields or maps in a message
[17:58:06] <companion_cube> the data model isn't great
[17:58:06] <d_bot_> <VPhantom> Both limitations are purely in the IDL and screwed up my designs in the past.
[17:58:33] <d_bot_> <VPhantom> Yeah you can wrap messages in each other and everything but, having done that last month for one concept, the result is harder to work with. It's not just "ugly" it's less functional in practice.
[17:58:41] <companion_cube> hmm no, the data format can't let you have repeated maps I think
[17:58:46] <d_bot_> <VPhantom> (And, extra useless bytes in the resulting data.)
[17:59:02] <d_bot_> <VPhantom> Not repeated maps, no.
[17:59:24] <d_bot_> <VPhantom> They were two distinct limitations: can't have maps in a oneof, and can't have repeated fields in a oneof. It's the same limitation with a twist, I think.
[17:59:37] *** Joins: Haudegen (~quassel@91.114.49.10)
[17:59:44] <companion_cube> yeah but it's the same root cause: a oneof must fit in a single field
[17:59:52] <d_bot_> <VPhantom> The format itself can perfectly well represent that, of course, but they don't want to add that complexity in the codec.
[18:00:02] <sleepydog> maps are just repeated fields under the covers, right?
[18:00:05] <d_bot_> <VPhantom> "must" is a strong word here.
[18:00:25] <d_bot_> <VPhantom> Repeated pairs... there's compact and non-compact, I haven't seen the details in a whileâ€¦
[18:00:26] <companion_cube> the format can't, except by wrapping into bytes
[18:00:40] <d_bot_> <VPhantom> The format absolutely can: oneof is merely about enforcing the limitation.
[18:04:14] <companion_cube> I don't see how the format can
[18:04:23] <companion_cube> if maps are separate fields, that is, like sleepydog says
[18:07:35] *** Quits: andreypopp_ (uid22726@id-22726.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[18:07:51] <d_bot_> <VPhantom> The concept of "oneof" is purely enforced in encoders and decoders, it does not affect the wire data at all.
[18:08:55] <d_bot_> <VPhantom> They refused to add repeated fields (and thus maps) in oneof purely to keep the encoders simpler.
[18:10:14] <companion_cube> I'm still not sure what you mean
[18:10:23] <companion_cube> for oneof to work, there must be exactly one field in it to be present
[18:10:38] <companion_cube> how does that work if some components have multiple fields? or 0, like an empty map?
[18:12:49] <d_bot_> <VPhantom> I don't understand what you don't understandâ€¦ Oneof is purely a restriction on the encoding side, and it is possibly recognized on the decoding side's generated code to optimize the resulting structure a bit (like how they become variants in `ocaml-protoc`.) On the wire the message containing the oneof is structured exactly the same regardless of the oneof restriction, it just happens to only have one field set at most (and i
[18:13:49] <d_bot_> <VPhantom> The problem is that they want their codecs to make the further assumption that only a single field (not repeated) be present in those oneof but that is a design choice, not a format restriction.
[18:15:41] <companion_cube> well, if i write ocaml-protoc and have `oneof` as a sum type
[18:15:51] <companion_cube> I do need exactly one field to be present
[18:16:02] <companion_cube> (or if 0, take the default option, blabla, that sucks)
[18:16:09] <d_bot_> <VPhantom> One field _id_ but there's nothing preventing you from having it repeated.
[18:16:13] <companion_cube> I don't see how it works when you have a case that could extend on multiple fields.
[18:16:18] <companion_cube> yes but: empty map?
[18:16:21] <d_bot_> <VPhantom> `|Thing of string list` or something
[18:16:46] <companion_cube> and you'll never get `Thing []`
[18:16:55] <companion_cube> because it's interpreted by the 0 constructor instead
[18:17:01] <d_bot_> <VPhantom> An empty map is represented, isn't it? Hm.
[18:17:29] <d_bot_> <VPhantom> I already can't get empty lists on the client side though, in non-oneof messages.
[18:17:46] <d_bot_> <VPhantom> (proto3)
[18:18:10] <companion_cube> are they represented as `None` instead of `[]`?
[18:18:54] <d_bot_> <VPhantom> I have no idea. I never even thought of setting a repeated field explicitly to an empty list in the APIs I used before (Perl, JS)
[18:19:02] *** Quits: gravicappa (~gravicapp@145.255.0.191) (Ping timeout: 240 seconds)
[18:20:11] <d_bot_> <ansiwen> You haven't done that yet, right? I just checked, but want to make sure I'm not missing it.
[18:20:38] <d_bot_> <VPhantom> A repeated field is just the ability to set the field more than once (compactness aside) and codecs make it handy with list/array representations. I suppose the compact format could be used to represent an empty list? I'm rusty in those details.
[18:20:44] <Cypi> I don't think distinguishing an empty list from an unset field is supported, especially in proto3.
[18:20:53] <d_bot_> <VPhantom> That's my impression yeah.
[18:21:09] <companion_cube> the compact format only works for scalars
[18:21:17] <companion_cube> afaik
[18:21:26] <Cypi> (Regarding maps keyed by an enum, the reason is that representing in a language like Java with closed enums is annoying.)
[18:21:29] <d_bot_> <VPhantom> So from that perspective I don't see why we should necessarily forbid repeated fields in oneof.
[18:21:46] <d_bot_> <quernd> Actually, I have, but it's hidden in a branch: https://github.com/dialohq/ocaml-grpc/tree/etcd-example/examples/etcd
[18:21:50] <d_bot_> <VPhantom> (Bah, spoils it for everyone else. ðŸ˜›)
[18:21:52] <d_bot_> <ansiwen> Oh, you have a branch
[18:22:04] <d_bot_> <ansiwen> Yeah, just found it ðŸ™‚
[18:22:30] <d_bot_> <ansiwen> thanks a bunch... will have a look at it
[18:22:32] <d_bot_> <quernd> Yeah, sorry for not getting back to you on it, I think I wanted to add a README before merging but I guess you won't need that
[18:23:56] <d_bot_> <ansiwen> no worries, thanks a lot. since you have experience with gRPC: what do you think is the impact performance-wise compared to the http/json gateway?
[18:25:39] <d_bot_> <quernd> If you have lots of small requests and latency is important, you can probably benefit a lot from keeping a connection open between requests (like I did in the example)
[18:26:04] *** Quits: mro (~mro@port-92-195-182-144.dynamic.as20676.net) (Remote host closed the connection)
[18:27:34] <d_bot_> <quernd> You also save one roundtrip of serialization to JSON. But as always it depends, the bottleneck could be somewhere else
[19:10:46] *** Joins: gravicappa (~gravicapp@145.255.0.191)
[19:16:13] *** Joins: zebrag (~chris@user/zebrag)
[19:23:01] *** Quits: mbuf (~Shakthi@122.174.182.104) (Quit: Leaving)
[19:33:35] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[19:38:28] *** Joins: mro (~mro@port-92-195-182-144.dynamic.as20676.net)
[19:39:19] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:42:09] *** Quits: olle (~olle@212-181-59-82.customer.telia.com) (Remote host closed the connection)
[20:05:02] *** Quits: mro (~mro@port-92-195-182-144.dynamic.as20676.net) (Remote host closed the connection)
[20:10:41] *** Joins: mro (~mro@port-92-195-182-144.dynamic.as20676.net)
[20:13:22] *** Quits: mro (~mro@port-92-195-182-144.dynamic.as20676.net) (Remote host closed the connection)
[20:21:35] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:31:02] *** Joins: ns12 (~ns12@user/ns12)
[21:32:13] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:46:36] *** Joins: mbuf (~Shakthi@122.174.182.104)
[22:01:58] *** Joins: mro (~mro@port-92-195-182-144.dynamic.as20676.net)
[22:04:54] *** Quits: mro (~mro@port-92-195-182-144.dynamic.as20676.net) (Remote host closed the connection)
[22:25:47] <companion_cube> @Anurag, @wokalski: https://github.com/AestheticIntegration/ocaml-opentelemetry
[22:25:55] <companion_cube> it's super WIP
[22:26:11] <companion_cube> but we could emit some basic traces and metrics :)
[22:26:11] *** Joins: mro (~mro@port-92-195-182-144.dynamic.as20676.net)
[22:28:37] *** Quits: mbuf (~Shakthi@122.174.182.104) (Quit: Leaving)
[23:16:05] *** Quits: mro (~mro@port-92-195-182-144.dynamic.as20676.net) (Remote host closed the connection)
[23:18:17] *** Quits: bobo (~bobo@37.173.241.154) (Ping timeout: 240 seconds)
[23:18:38] *** Joins: bobo (~bobo@37.167.51.28)
[23:33:47] *** Joins: Everything (~Everythin@37.115.210.35)
[23:42:32] *** Quits: gravicappa (~gravicapp@145.255.0.191) (Ping timeout: 252 seconds)
[23:49:36] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
