[00:18:47] <FromDiscord> <Shoto> Is it possible to make Nim output the C code that's compilable on any platform?
[00:19:57] <FromDiscord> <Gumber> Nim already does this?
[00:20:07] <FromDiscord> <Gumber> you need to invoke the correct compiler toolchain
[00:20:15] <FromDiscord> <Gumber> for your target OS / cpu arch
[00:20:15] <FromDiscord> <haxscramper> I don't think so, most platform-specific stuff is generated based on nim compilation checks
[00:20:28] <FromDiscord> <haxscramper> so things like `when defined(windows)` in the stdlib etc.
[00:20:42] <FromDiscord> <Gumber> oh yeah I mean you need to handle platform specific stuff on the Nim side
[00:21:02] <FromDiscord> <Gumber> but as far as the generated code - it will generate for whatever platform / cpu arch you say it should
[00:21:11] <FromDiscord> <Gumber> in Nim
[00:21:32] <FromDiscord> <Gumber> and with the generated C code as long as you invoke the correct compiliation toolchain
[00:21:36] <FromDiscord> <Gumber> (edit) "compiliation" => "compilation"
[00:21:50] <FromDiscord> <Gumber> you can target whatever you want.... as long as Nim supports it (and it supports a lot of targets)
[00:21:58] <FromDiscord> <Gumber> if you want an ezmode solution I'd check out zigcc
[00:22:01] <FromDiscord> <Gumber> (edit) "zigcc" => "`zigcc`"
[00:23:12] *** Joins: rockcavera (~rc@192.12.112.227)
[00:23:13] *** Quits: rockcavera (~rc@192.12.112.227) (Changing host)
[00:23:13] *** Joins: rockcavera (~rc@user/rockcavera)
[00:23:49] <FromDiscord> <Shoto> Oh okay then
[00:23:52] <FromDiscord> <Shoto> Ezmode?
[00:24:31] <FromDiscord> <Gumber> easier than having to use a separate compilation toolchain
[00:24:54] <FromDiscord> <Shoto> Oh okay
[00:30:24] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[00:35:38] <FromDiscord> <Yardanico> Oo, new hacktoberfest rules are even stricter than the last year
[00:35:42] <FromDiscord> <Yardanico> "I acknowledge that I will be disqualified indefinitely from Hacktoberfest if I submit two invalid pull requests."
[00:35:52] <FromDiscord> <dom96> oooh
[00:36:05] <FromDiscord> <dom96> the time for another t-shirt is here
[00:36:20] <FromDiscord> <Yardanico> also the opt in thing for maintainers is still there, but we have the hacktoberfest tag on the repo since last year
[00:36:44] <FromDiscord> <Yardanico> Also this year hacktoberfest supports GitLab
[00:37:31] <FromDiscord> <dom96> In reply to @Yardanico ""I acknowledge that I": hm, couldn't malicious people really screw someone up by marking their PRs as invalid?
[00:38:40] <Mister_Magister> how do you clear sequence?
[00:39:02] <FromDiscord> <Elegantbeef> `yourSeq.setLen(0)`
[00:39:03] <FromDiscord> <Yardanico> setLen(0)
[00:39:27] <FromDiscord> <Yardanico> In reply to @dom96 "hm, couldn't malicious people": that's possible, but I guess you'll be able to solve those types of things with the support
[00:39:32] <FromDiscord> <Yardanico> It's quite unlikely anyway
[00:40:17] <FromDiscord> <Yardanico> last year hacktoberfest had to introduce opt-in because a certain YouTube video showed how to get t-shirts "for free" by committing a useless change to a readme of some repository
[00:40:20] <Mister_Magister> why isn't setLen in docs
[00:40:26] <FromDiscord> <Yardanico> it is though
[00:40:27] <Mister_Magister> wait
[00:40:28] <Mister_Magister> it is
[00:40:30] <FromDiscord> <Yardanico> system module
[00:40:37] <Mister_Magister> thats kinda dumb tho
[00:40:41] <Mister_Magister> but  whatever
[00:40:42] <Mister_Magister> thanks
[00:41:48] <nrds> <06Prestige99> Yeah it's hard to find things sometimes 
[00:42:10] <nrds> <06Prestige99> if you're having trouble usually check the manual or system page
[00:43:12] <Mister_Magister> !eval echo test
[00:43:15] <NimBot> Compile failed: /usercode/in.nim(1, 6) Error: undeclared identifier: 'test'
[00:43:16] <nrds> <12R2D299> /usercode/in.nim(1, 6) Error: undeclared identifier: 'test'
[00:43:22] <Mister_Magister> why two
[00:44:14] <Mister_Magister> !eval var test: seq[string] = @["test"]; open(test[0])
[00:44:17] <NimBot> Compile failed: /usercode/in.nim(1, 40) Error: expression 'open(test[0], fmRead, -1)' is of type 'File' and has to be used (or discarded)
[00:44:17] <nrds> <12R2D299> /usercode/in.nim(1, 40) Error: expression 'open(test[0], fmRead, -1)' is of type 'File' and has to be used (or discarded)
[00:44:27] <Mister_Magister> !eval var test: seq[string] = @["test"]; discard open(test[0])
[00:44:30] <NimBot> /usercode/in.nim(1)      in↵/playground/nim/lib/system/io.nim(741) open↵Error: unhandled exception: cannot open: test [IOError]
[00:44:31] <nrds> <12R2D299> /usercode/in.nim(1)      in /playground/nim/lib/system/io.nim(741) open Error: unhandled exception: cannot open: test [IOError]
[00:44:36] <Mister_Magister> hmm
[00:44:46] <Mister_Magister> thats weird
[00:45:10] <Mister_Magister> ahhh i see, problem is somewhere else
[00:45:31] <Mister_Magister> !eval var test: seq[string] = @["test", "0"]; discard open(test[test[1]])
[00:45:33] <NimBot> Compile failed: /usercode/in.nim(1, 58) Error: type mismatch: got <seq[string], string>
[00:45:34] <nrds> <12R2D299> /usercode/in.nim(1, 58) Error: type mismatch: got <seq[string], string>
[00:45:36] <Mister_Magister> exactly
[00:46:01] <Mister_Magister> how do you convert string to itn
[00:46:07] <Mister_Magister> parseInt
[00:46:15] <Mister_Magister> !eval var test: seq[string] = @["test", "0"]; discard open(test[parseInt(test[1])])
[00:46:18] <nrds> <12R2D299> /usercode/in.nim(1, 59) Error: undeclared identifier: 'parseInt'
[00:46:18] <NimBot> Compile failed: /usercode/in.nim(1, 59) Error: undeclared identifier: 'parseInt'
[00:46:29] <Mister_Magister> !eval use strutils; var test: seq[string] = @["test", "0"]; discard open(test[parseInt(test[1])])
[00:46:32] <NimBot> Compile failed: /usercode/in.nim(1, 1) Error: undeclared identifier: 'use'
[00:46:32] <nrds> <12R2D299> /usercode/in.nim(1, 1) Error: undeclared identifier: 'use'
[00:46:41] <Mister_Magister> !eval import strutils; var test: seq[string] = @["test", "0"]; discard open(test[parseInt(test[1])])
[00:46:46] <nrds> <12R2D299> /usercode/in.nim(1)      in /playground/nim/lib/system/io.nim(741) open Error: unhandled exception: cannot open: test [IOError]
[00:46:47] <NimBot> /usercode/in.nim(1)      in↵/playground/nim/lib/system/io.nim(741) open↵Error: unhandled exception: cannot open: test [IOError]
[00:46:52] <Mister_Magister> perfecto
[00:47:15] <FromDiscord> <Elegantbeef> you know there are REPLs and also multiple websites that run nim code?
[00:47:29] <Mister_Magister> yeah sorry
[00:47:46] <Mister_Magister> just thought i would ask for help with example but instead i got answer
[00:48:56] <Mister_Magister> what is openArray exactly?
[00:49:31] <Mister_Magister> !eval var s: openArray[uint8]
[00:49:35] <nrds> <12R2D299> /usercode/in.nim(1, 5) Error: invalid type: 'openArray[uint8]' for var
[00:49:35] <NimBot> Compile failed: /usercode/in.nim(1, 5) Error: invalid type: 'openArray[uint8]' for var
[00:49:39] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#types-open-arrays
[00:49:39] <Mister_Magister> yeah here, why
[00:49:46] <Mister_Magister> why is it invalid type?
[00:50:46] <Mister_Magister> it should be fine but its not
[00:54:24] <nrds> <06Prestige99> openArray can only be used as a param
[00:55:02] <FromDiscord> <Yardanico> @Prestige what's this nrds bot?
[00:55:11] <Mister_Magister> ah
[00:55:41] <FromDiscord> <Yardanico> And can you please disable its !eval in this chat as it conflicts with the one we have in NimBot
[00:58:59] <nrds> <06Prestige99> nrds is just the relay it's another bot in here but I'll disable it for your side
[00:59:43] <FromDiscord> <Yardanico> huh, what does it relay to? your telegram group or something?
[01:00:17] <nrds> <06Prestige99> another irc network
[01:00:35] <Mister_Magister> https://nim-lang.org/docs/io.html#readBytes%2CFile%2CopenArray%5B%5D%2CNatural%2CNatural
[01:00:39] <Mister_Magister> this, this is dumb
[01:01:02] <Mister_Magister> if i have 1TB file and i want to read 1 byte at the end of it i have to allocate 1TB array
[01:01:07] <Mister_Magister> just to read one byte
[01:01:18] <FromDiscord> <Yardanico> no?
[01:01:36] <Mister_Magister> yes?
[01:01:45] <Mister_Magister> reads len bytes into the buffer a starting at a[start]. 
[01:01:49] <Mister_Magister> starting at a[start].
[01:01:58] <FromDiscord> <Yardanico> https://nim-lang.org/docs/io.html#setFilePos%2CFile%2Cint64%2CFileSeekPos
[01:02:16] <Mister_Magister> still dumb
[01:02:28] <FromDiscord> <Yardanico> ok
[01:04:22] <FromDiscord> <Elegantbeef> It's how it works everywhere
[01:04:33] <FromDiscord> <Elegantbeef> You open a file you move the file to X pos and read data
[01:04:40] <FromDiscord> <Elegantbeef> Welcome to file streaming
[01:14:17] <FromDiscord> <dom96> Mister_Magister: no you don't need to alloc a 1TB array, you just seek the file to the end
[01:14:19] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:14:30] <FromDiscord> <dom96> stop calling things you think don't make sense 'dumb'
[01:16:59] <nrds> <06Prestige99> Hmm this is interesting - this sdl api that fills in polygons requires a pointer to a cfloat - it expects vertices to be laid out like [x1, y1, x2, y2...] etc. I have a seq of Vec2s (from vmath), I wonder if there's an easy way I could do this...
[01:17:42] <nrds> <06Prestige99> each Vec2 is essentially an object with an arr: array[2, float]
[01:20:08] <nrds> <06Prestige99> Only thing I can really think of is duplicating the vertices into a single array
[01:20:20] <Mister_Magister> @dom96  why
[01:27:37] *** Quits: max22- (~maxime@2a01cb088335980073a4b4db0ef417b5.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[01:50:36] <FromDiscord> <MaksimBoyarkin> Hello, MS Defender find Malware in Nim archive for windows
[01:50:38] <FromDiscord> <MaksimBoyarkin> https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=TrojanDropper:Win32/Zpevdo.B&ThreatID=2147774529
[01:50:44] <FromDiscord> <Elegantbeef> Why what? Why do you have to seek to the end or stop calling things dumb?
[01:51:00] <FromDiscord> <MaksimBoyarkin>  https://media.discordapp.net/attachments/371759389889003532/892898783715811388/SPOILER_unknown.png
[01:51:20] <FromDiscord> <Elegantbeef> Yea windows defender falsely things nim tooling is a virus
[01:52:51] <FromDiscord> <MaksimBoyarkin> I suspect that this is due to the fact that finish.exe is downloading the compiler
[01:53:07] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[01:54:33] *** Joins: rockcavera (~rc@192.12.112.227)
[01:54:33] *** Quits: rockcavera (~rc@192.12.112.227) (Changing host)
[01:54:33] *** Joins: rockcavera (~rc@user/rockcavera)
[01:56:37] <FromDiscord> <dom96> which exe did it highlight as malware?
[02:00:55] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[02:01:10] <FromDiscord> <MaksimBoyarkin> In reply to @dom96 "which exe did it": nim-1.4.8\bin\nimble.exe
[02:10:29] *** Joins: cyraxjoe (~joe@201.150.5.24)
[02:35:00] <FromDiscord> <dom96> also new RC2 also affected https://forum.nim-lang.org/t/8466#54728
[02:41:37] <FromDiscord> <MaksimBoyarkin> It seems to me that automation after unpacking and downloading the compiler is redundant. Before starting programming, a person must be able to independently set environment variables and the compiler.
[02:43:32] <FromDiscord> <MaksimBoyarkin> Perhaps these things allow you to add an antivirus signature to the company database
[02:56:03] <NimEventer> New post on r/nim by mescobal: Get the first and last day of current month in Nim?, see https://reddit.com/r/nim/comments/py7b4n/get_the_first_and_last_day_of_current_month_in_nim/
[03:30:24] <FromDiscord> <MaksimBoyarkin> By the way, how are things with coroutines in Him?
[03:30:59] <FromDiscord> <MaksimBoyarkin> (edit) "Him?" => "Nim?"
[03:34:07] <NimEventer> New thread by Alexeypetrushin: Auto-free C pointer when Nim object gets GC, see https://forum.nim-lang.org/t/8470
[03:50:27] <FromDiscord> <exelotl> sent a long message, see http://ix.io/3AmV
[03:53:30] <FromDiscord> <exelotl> personally I'm using Nimcoro because it's the only one that's possible to use with --gc:none
[03:53:52] <FromDiscord> <exelotl> (if you modify it to use a preallocated area of memory for the stack)
[03:54:06] <FromDiscord> <exelotl> but if that wasn't a consideration I'd probably try closure iterators first
[03:57:17] <FromDiscord> <MaksimBoyarkin> In reply to @exelotl "you have a few": thx
[04:50:10] <FromDiscord> <Gumber> more than that!
[04:50:18] <FromDiscord> <Gumber> don't forget about fibers / context switching 🙂
[04:50:25] <FromDiscord> <Gumber> they'll require dropping down to asm though
[04:50:50] <FromDiscord> <Gumber> but I actually already have an implementation of a job system using fibers and system threads
[04:51:13] <FromDiscord> <Gumber> but I think closure iterators might be a bit easier to get a handle on
[05:01:54] *** Joins: vicfred (~vicfred@user/vicfred)
[05:46:55] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:34] *** Quits: rockcavera (~rc@user/rockcavera) (Read error: Connection reset by peer)
[07:39:36] *** Joins: rockcavera (~rc@192.12.112.227)
[07:39:37] *** Quits: rockcavera (~rc@192.12.112.227) (Changing host)
[07:39:37] *** Joins: rockcavera (~rc@user/rockcavera)
[08:05:42] *** Joins: Guest71 (~Guest71@99-6-76-144.lightspeed.rcsntx.sbcglobal.net)
[08:06:49] <Guest71> Hello everyone. I have a naive question about the seq. Is it possible to case its type? Like: (float)mySeq
[08:07:13] <Guest71> I need to convert a float seq into complex seq.
[08:07:25] <Guest71> Thanks in advance.
[08:10:36] <FromDiscord> <Elegantbeef> You can make a conversion procedure, or just use `sequtils.map`/`sugar.collect`
[08:12:27] <Guest71> Thank you. I will look at the sequtils.map
[08:12:43] *** Quits: Guest71 (~Guest71@99-6-76-144.lightspeed.rcsntx.sbcglobal.net) (Quit: Client closed)
[08:17:39] <FromDiscord> <cabboose> Sounds like you want the procedure to hold different types?
[08:17:41] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:17:55] <FromDiscord> <Elegantbeef> Sounded more like they want to convert the elements to a different type
[08:18:07] <FromDiscord> <Elegantbeef> 'e' is near \`'t' case -\> cast
[08:18:17] <FromDiscord> <cabboose> Hahahahaha ofc
[08:18:48] <FromDiscord> <cabboose> When did you become a typo linguist you dastardly devil
[08:18:49] <FromDiscord> <Elegantbeef> I fuck up a lot
[08:39:14] <FromDiscord> <Yandong Zhang> [cabboose](https://matrix.to/#/@cabboose:matrix.org)\: [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org)  Want to convert the real number seq into the complex seq and use the FFT. The sequtils.map works well. Thanks again.
[08:39:40] <FromDiscord> <Yandong Zhang> I just tried.
[09:23:13] <NimEventer> New Nimble package! hottie - Sampling profiler that finds hot paths in your code., see https://github.com/treeform/hottie
[09:23:16] <nrds> <12R2D299> 4GitHub: 7"Sampling profiler that finds hot paths in your code."
[09:27:52] <FromDiscord> <impbox [ftsf]> hot
[09:27:59] <FromDiscord> <Elegantbeef> tie
[09:35:14] <NimEventer> New Nimble package! shady - Nim to GPU shader language compiler and supporting utilities., see https://github.com/treeform/shady
[09:35:16] <nrds> <12R2D299> 4GitHub: 7"Nim to GPU shader language compiler and supporting utilities."
[09:38:38] <FromDiscord> <NullCode> Where can i learn intermediate/ advanced nim stuff
[09:38:47] <FromDiscord> <NullCode> I'm pretty sure i have the basics covered
[09:39:56] <FromDiscord> <impbox [ftsf]> have you read the book?
[09:40:06] <FromDiscord> <impbox [ftsf]> it's good
[09:41:08] <FromDiscord> <Elegantbeef> Wait impbox can read?!
[09:41:45] <FromDiscord> <impbox [ftsf]> (i assume it's good)
[09:42:19] <FromDiscord> <impbox [ftsf]> other than the book, i learn the advanced stuff from @ElegantBeef's play links
[09:42:39] <FromDiscord> <Elegantbeef> I really should make a more official source of information
[09:42:56] <FromDiscord> <Elegantbeef> Some annoying asshat in realtime chats isnt the best
[09:43:18] <FromDiscord> <Rika> In reply to @impbox "other than the book,": From what I’ve read they’re not that advanced yet
[09:45:05] <FromDiscord> <Elegantbeef> An authoritative annoying asshat's written tutorials in a blog style post seems better
[09:45:16] <FromDiscord> <NullCode> In reply to @impbox "have you read the": Nim basics pdf thingy? Yes
[09:45:19] <FromDiscord> <NullCode> I forgot exact name tho
[09:45:21] <FromDiscord> <impbox [ftsf]> Nim in Action
[09:45:27] <FromDiscord> <impbox [ftsf]> https://livebook.manning.com/book/nim-in-action/
[09:45:29] <FromDiscord> <NullCode> In reply to @impbox "Nim in Action": Can you link it
[09:45:45] <FromDiscord> <NullCode> Ok no i haven't read this
[09:46:12] <nrds> <06Prestige99> Elegantbeef has a nice post about marcos on dev.to
[09:46:40] <FromDiscord> <Elegantbeef> nah the post about marcos is on 50shadesofmarcos.com
[09:46:47] <FromDiscord> <Elegantbeef> The macro post is on dev.to indeed
[09:47:35] <FromDiscord> <impbox [ftsf]> https://dev.to/beef331/demystification-of-macros-in-nim-13n8 looks to be it
[09:48:06] <FromDiscord> <Elegantbeef> Been meaning to make a more advanced macro explanation
[09:48:34] <FromDiscord> <Elegantbeef> Maybe will do if i get nimscripters interop not poop anymore
[09:49:49] <FromDiscord> <cabboose> What are you trying to learn↵(@NullCode)
[09:50:16] <FromDiscord> <cabboose> The book isn’t the best for advanced IMO (I have read it)↵(@impbox [ftsf])
[09:50:29] <FromDiscord> <cabboose> Very good to start off
[09:50:35] <FromDiscord> <Elegantbeef> Impbox was joking about not reading it
[09:50:53] <FromDiscord> <Elegantbeef> atleast i hope so
[09:50:59] <FromDiscord> <impbox [ftsf]> The metaprogramming section is good
[09:51:13] <FromDiscord> <Elegantbeef> I know i havent read it cause i'm too cool for books
[09:51:25] <FromDiscord> <cabboose> Holy shit beef does blogs
[09:51:25] <FromDiscord> <cabboose> I will consume them
[09:51:32] <FromDiscord> <Elegantbeef> I do blog()
[09:51:34] <FromDiscord> <impbox [ftsf]> the blogs or beef?
[09:51:46] <FromDiscord> <cabboose> Both
[09:52:20] <FromDiscord> <cabboose> You might be right; it was beyond me when I started but I didn’t have a very good computer science background to understand it↵(@impbox [ftsf])
[09:52:44] *** Joins: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr)
[09:52:58] <FromDiscord> <cabboose> The whole node structure and what not makes more sense now; but initially I was just thinking “wot”
[09:53:01] <FromDiscord> <cabboose> “I write words”
[09:53:04] <FromDiscord> <Elegantbeef> Also impbox have you got nico to work with 1.6 yet?
[09:53:07] <FromDiscord> <cabboose> “What are nodes”
[09:53:34] <FromDiscord> <impbox [ftsf]> @ElegantBeef nah i haven't got 1.6 to install yet
[09:53:44] <FromDiscord> <Elegantbeef> Ah me either
[09:53:52] <FromDiscord> <Elegantbeef> Cannot be arsed to do a work around on it either
[09:54:15] <FromDiscord> <impbox [ftsf]> onboarding for nim is a big problem
[09:54:22] <FromDiscord> <Elegantbeef> Just curious cause I wanted to try embedding nimscript + nico + wasm
[09:54:34] <FromDiscord> <impbox [ftsf]> maybe i'll try and get it working this weekend
[09:54:43] <FromDiscord> <impbox [ftsf]> currently working 5 days though so i'm le tired
[09:54:52] <FromDiscord> <impbox [ftsf]> so much for quitting my job
[09:55:02] <FromDiscord> <Elegantbeef> Yea i mean i still have to finish the interop again, so it's no big deal
[09:55:51] <FromDiscord> <impbox [ftsf]> In reply to @cabboose "The whole node structure": yeah i kinda skimmed it first time, but going back to it with a focus on learning metaprogramming it's good
[09:56:01] <FromDiscord> <cabboose> Is there an operation to get a binary with X number of bits set to 1?
[09:56:04] <FromDiscord> <impbox [ftsf]> helps if you have a goal in mind
[09:56:10] <FromDiscord> <impbox [ftsf]> learning without a goal is hard
[09:56:26] <FromDiscord> <Elegantbeef> are you on 1.5.1+ cabb?
[09:56:35] <FromDiscord> <cabboose> This↵(@impbox [ftsf])
[09:57:12] <FromDiscord> <cabboose> Yeah
[09:57:13] <FromDiscord> <cabboose> bleeding edge dude
[09:57:19] <FromDiscord> <Elegantbeef> Ah then i might have something
[09:57:30] <FromDiscord> <impbox [ftsf]> @cabboose `((1 shl 5) - 1)`
[09:57:34] <FromDiscord> <impbox [ftsf]> (edit) "5)" => "x)"
[09:57:57] <FromDiscord> <cabboose> Oooo ofc
[09:58:06] <FromDiscord> <impbox [ftsf]>  https://media.discordapp.net/attachments/371759389889003532/893021368646529024/unknown.png
[09:58:11] <FromDiscord> <cabboose> Thank you; so obvious in hindsight lmao
[09:58:40] <FromDiscord> <impbox [ftsf]> i always get shl/shr mixed up because i get left and right mixed up
[09:59:12] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3AnL
[09:59:28] <FromDiscord> <Elegantbeef> `echo` and `toBin` are just for showcase
[09:59:31] <FromDiscord> <cabboose> So verbose
[09:59:44] <FromDiscord> <impbox [ftsf]> complementary!
[09:59:58] <FromDiscord> <Elegantbeef> I mean it's not that verbose
[09:59:58] <FromDiscord> <cabboose> Fair
[10:00:06] <FromDiscord> <impbox [ftsf]> you can also just type them in as literals `0b01111`
[10:00:26] <FromDiscord> <cabboose> Yeah but it’s supposed to get the mask based on a constant
[10:01:06] <FromDiscord> <cabboose> The -1 IMO is pretty explicit
[10:01:20] <FromDiscord> <impbox [ftsf]> a bit offensive
[10:01:26] <FromDiscord> <cabboose> I didn’t think of it before but it’s the one I’ll go for
[10:01:34] <FromDiscord> <Elegantbeef> Shame!
[10:01:50] <FromDiscord> <Elegantbeef> Mine uses the new setutils!
[10:01:54] <FromDiscord> <Elegantbeef> It's clearly cooler
[10:01:54] <FromDiscord> <cabboose> Mate that’s the one you put
[10:02:22] <FromDiscord> <cabboose> I am a simple brained person beef
[10:02:39] <FromDiscord> <cabboose> Forgive me
[10:02:41] <FromDiscord> <cabboose> \:’)
[10:02:57] <FromDiscord> <Elegantbeef> I mean i forgot how i implemented complement so... 😛
[10:03:18] <FromDiscord> <cabboose> Peas in a pod
[10:03:42] <FromDiscord> <Elegantbeef> ah it's just internally `{0..11}`
[10:03:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[10:04:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Client Quit)
[10:04:13] <FromDiscord> <cabboose> That does look nice 👀
[10:04:46] <FromDiscord> <Elegantbeef> Well sadly it's not that simple though since there is no type annotation
[10:05:11] <FromDiscord> <cabboose> But lower bit ops are more language agnostic
[10:14:10] <FromDiscord> <impbox [ftsf]> i think they're a bit op
[10:21:57] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[10:27:49] <FromDiscord> <Elegantbeef> Lol spent so much time trying to figure out why this wasnt working, turns out some asshat accidently did `[T: object or tuple]`
[10:28:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[10:28:11] <FromDiscord> <treeform> who was the asshat?
[10:28:24] <FromDiscord> <Elegantbeef> I'd prefer not to self incriminate
[10:29:34] <FromDiscord> <impbox [ftsf]> is it because this is deprecated?
[10:31:03] <FromDiscord> <Elegantbeef> Nah it's just cause i thought it'd work but was making it go throw a macro which destroyed it
[10:31:18] <FromDiscord> <Elegantbeef> But now have the nimscript -\> nim rewrite done
[10:31:39] <FromDiscord> <impbox [ftsf]> \o/
[10:32:43] <FromDiscord> <Elegantbeef> Got to get the otherside done again then clean up and get to play with a better done version of nimscripter
[10:33:34] <FromDiscord> <Elegantbeef> All of this presently works
[10:33:36] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/893030299171172362/image.png
[10:36:10] <FromDiscord> <impbox [ftsf]> what does the "test" argument do?
[10:36:22] <FromDiscord> <Elegantbeef> "module" it's implemented in
[10:37:11] <FromDiscord> <Elegantbeef> Makes sense for if you want a bunch of different interpreters for different things
[10:37:29] <FromDiscord> <Elegantbeef> May eventually be added to a faux module with that name aswell since i believe that's possible
[10:37:40] <FromDiscord> <Elegantbeef> So you'd do `import test` inside the nimscript
[10:38:09] <FromDiscord> <impbox [ftsf]> cool
[10:38:10] <FromDiscord> <Elegantbeef> Presently it's just to hold specific functions so you can do `implNimScriptModule(test)` and get all the functions it holds
[10:40:00] <FromDiscord> <Elegantbeef> Heavily using the macro cache to elevate some issues i had with the previous method, `implNimScriptModule` actually emits a list of lambdas that call the procedures that are stored in the macrocache, this way you dont have as many problems with needing to import X before being able to call Y
[11:00:19] <PMunch> Damn it.. How am I supposed to wrap this: `XDamageCreate(Display *dpy, Drawable drawable, int level);` and `#define X_DamageCreate 1`
[11:01:51] <FromDiscord> <Rika> thats one reason why we cant do auto-wrapping i guess
[11:02:09] <FromDiscord> <Elegantbeef> `xDamageCreate`- proc  and `XDamageCreate`- const
[11:02:31] <FromDiscord> <Rika> that just shifts the problem though
[11:02:37] <FromDiscord> <Rika> what now when you have a type and a define
[11:02:46] <PMunch> I mean I could rename X_DamageCreate to XunderscoreDamageCreate
[11:02:51] <PMunch> And stuff like that..
[11:03:06] <FromDiscord> <Rika> so we're back to mangling
[11:03:13] <FromDiscord> <Elegantbeef> Well when you have that problem you swim over to C land and shit on the nearest C programmer
[11:03:19] <FromDiscord> <Elegantbeef> If it's yourself i'm sorry you have to
[11:03:28] <PMunch> Yeah, but that's just the nature of mapping a bigger space onto a smaller one
[11:03:29] <FromDiscord> <Rika> and if its you
[11:03:52] <FromDiscord> <Elegantbeef> Time to use unicode characters pmunch
[11:04:04] <nrds> <06Prestige99> emoji var names
[11:04:17] <PMunch> Oh man :P That'd be a massive mess :P
[11:04:22] <FromDiscord> <Rika> unicode underscore
[11:04:25] <FromDiscord> <Rika> lets gooooo
[11:04:36] <FromDiscord> <Rika> "how to force snake case in nim"
[11:04:46] <PMunch> <_<
[11:04:47] <FromDiscord> <Rika> im sorry maybe i shouldnt have said that
[11:05:17] <FromDiscord> <Elegantbeef> It's not that worst solution to this problem, i'm more likely to copy paste anything named `XUnderscoreDamgeCreate` than manually write it 😛
[11:06:01] <PMunch> The problem is that you're probably reading a C guide
[11:06:22] <PMunch> And suddenly it looks like something didn't get automatically wrapped
[11:06:41] <FromDiscord> <Rika> well what if someone has "AunderscoreA" and "A_A"
[11:06:42] <FromDiscord> <Rika> xdddd
[11:07:26] <PMunch> My current workaround is to rename things as _1 _2 _3, etc. whenever I map something to something that already existed
[11:07:40] <FromDiscord> <Rika> works i guess
[11:08:03] <FromDiscord> <Elegantbeef> Just throw in the type `Define` `Func`....
[11:08:32] <FromDiscord> <Rika> i think it should only apply for defines
[11:09:07] <FromDiscord> <Rika> so DefXDamageCreate or so
[11:10:37] <PMunch> Hmm, problem now is that if I include file X which includes file Y, the defines from file Y will get their names first, then file X will get _1 postfixes
[11:15:49] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[11:16:40] *** Joins: jkl (~jkl@user/jkl)
[11:19:41] *** Joins: neurocyte0132 (~neurocyte@45.14.189.33)
[11:19:41] *** Quits: neurocyte0132 (~neurocyte@45.14.189.33) (Changing host)
[11:19:41] *** Joins: neurocyte0132 (~neurocyte@user/neurocyte)
[11:38:05] <nrds> <06Prestige99> When creating an object that has a seq[Foo] property, does the seq start with a len 0 or does it alloc memory before anything is added?
[11:40:10] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:42:57] <FromDiscord> <Jonah> a user of my cli written in nim is getting `could not load: (libcrypto-1_1-x64|libeay64).dll` errors on windows, assuming it's from openssl missing. what's the easiest way for them to install that? does the nim installer for windows include it?
[11:43:42] <FromDiscord> <Yardanico> You can just ship those DLLs with your binary
[11:44:25] <FromDiscord> <Yardanico> They're available in the bin directory where nim.exe itself is located
[11:44:49] <FromDiscord> <Yardanico> Or you can also get them from https://nim-lang.org/download/dlls.zip
[11:45:01] <FromDiscord> <Yardanico> No need to ship all DLLs inside of the archive, only the ones needed
[11:45:21] <FromDiscord> <Yardanico> As another (more complicated) solution you can statically link openssl
[11:45:47] <FromDiscord> <impbox [ftsf]> @Prestige default seq will be len 0 i believe
[11:45:48] <FromDiscord> <Jonah> which dlls do you think they need
[11:45:54] <FromDiscord> <Jonah> just `libcrypto-1_1-x64.dll`?
[11:46:23] <nrds> <06Prestige99> Cool - couldn't find info on it in the docs, but was hoping it'd be 0
[11:46:56] <FromDiscord> <impbox [ftsf]> afaik nim doesn't set any defaults other than zeroing memroy
[11:47:09] <FromDiscord> <NullCode> In reply to @Jonah "a user of my": It is indeed from openssl being missing
[11:47:13] <FromDiscord> <NullCode> I had that same error too
[11:47:30] <FromDiscord> <NullCode> My solution was to use `puppy` https://github.com/treeform/puppy
[11:47:33] <nrds> <12R2D299> 4GitHub: 7"Puppy fetches HTML pages for Nim."
[11:48:02] <FromDiscord> <Jonah> why would i want to use some 3rd party library for that
[11:48:13] <FromDiscord> <Jonah> if the dll is missing just provide the dll
[11:48:14] <FromDiscord> <NullCode> Because static linking is tedious
[11:48:25] <FromDiscord> <NullCode> In reply to @Jonah "if the dll is": Oh you have that kinda scenario
[11:48:28] <FromDiscord> <NullCode> In that case, sure
[11:48:44] <FromDiscord> <NullCode> Just grab dlls from `%nim_dir%\bin`
[11:49:11] <FromDiscord> <Jonah> yeah that's what yardanico said
[11:49:15] *** Joins: Vladar (~Vladar@46.162.2.53)
[11:50:10] <PMunch> @Prestige, something like `var x: seq[int]` is a completely nulled out object. This means that size is 0, capacity is 0, and buffer pointer is nil.
[11:52:22] <nrds> <06Prestige99> Perfect
[11:53:24] <FromDiscord> <Elegantbeef> Comically the "just provide the dll" is sadly not a common view \:D
[11:56:22] <FromDiscord> <Jonah> does this same issue happen on linux
[11:57:00] <FromDiscord> <Jonah> i guess i've never noticed since i always have nim installed which provides the deps it needs
[11:57:31] <FromDiscord> <Elegantbeef> I think openssl is typically on linux, but dont recall, can always statically link if you must have a self contained binary
[11:57:57] <PMunch> This is usually not a problem on Linux because you normally have dependencies like this installed system-wide
[11:57:58] <FromDiscord> <Elegantbeef> Pretty tedious as i understand it, but idk never done it
[11:59:00] <FromDiscord> <Jonah> i've heard statically linking openssl specifically is irresponsible as it leaves users vulnerable to any crypto issues unless you're keeping the linked version up to date
[11:59:17] <FromDiscord> <Jonah> but telling this guy to download the dll manually is not any safer so
[11:59:51] <FromDiscord> <Yardanico> In reply to @Elegantbeef "Pretty tedious as i": I wouldn't say that it's tedious, but more complicated than normal compilation of course
[12:00:02] <PMunch> Which is why Linux updates these dependencies system wide
[12:00:24] <FromDiscord> <Yardanico> In reply to @Jonah "does this same issue": Not really as virtually all Linux desktop distros ship with OpenSSL
[12:01:14] <FromDiscord> <Yardanico> VoidLinux used LibreSSL for a long time, which is mostly compatible with OpenSSL, but even they decided to switch back to OpenSSL because of other projects only really being tested with OpenSSL
[12:01:59] <FromDiscord> <Yardanico> https://voidlinux.org/news/2021/02/OpenSSL.html
[12:02:35] <FromDiscord> <Jonah> would nim ever consider a compiler flag to statically link those DLLs/whatever the linux equivalent is?
[12:02:46] <FromDiscord> <Jonah> so devs don't have to figure it out themselves
[12:03:53] <FromDiscord> <Yardanico> don't think so, it's on the level of the C compiler and also with static linking you should follow the licenses of the project you're linking with
[12:04:10] <FromDiscord> <Yardanico> That said, it's possible to make Nim config scripts to simplify the process
[12:04:34] <FromDiscord> <Yardanico> See e.g. https://github.com/kaushalmodi/hello_musl
[12:04:37] <nrds> <12R2D299> 4GitHub: 7"NimScript (config.nims) for building a static binary using Nim + musl + pcre + libressl/openssl"
[12:08:54] <FromDiscord> <Jonah> neat
[12:26:50] <FromDiscord> <Yardanico> @timotheecour btw, about the binary size - with latest Nim and the same cmdline the hello world binary is 7.4kb, might have something to do with newer LLVM versions in zig cc or something else
[12:27:11] <FromDiscord> <Yardanico> `nim c --os:any -d:posix -d:noSignalHandler --cc:clang --clang.exe="zigcc.sh" --clang.linkerexe="zigcc.sh" -d:danger --gc:arc -d:useMalloc --panics:on --passL:"-target x86_64-linux-musl -flto" --opt:size↵ hello.nim`↵↵zigcc.sh is because Nim doesn't accept commands in clang.exe like "zig cc"
[12:27:24] <FromDiscord> <Yardanico> I will also try with musl GCC to see if it's much different from zig cc
[12:28:15] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Aol
[12:28:51] <FromDiscord> <Yardanico> ah right, forgot one more trick `strip -R .comment -R .note -R .note.ABI-tag hello` then the size is 7296
[12:29:07] <FromDiscord> <Yardanico> (this removes the comment sections from the binary that state which compiler version it was created with)
[12:29:45] <ehmry> does anyone remember the github issue on for making the compiler emit FILE:LINE output? or does anyone have a patch?
[12:32:56] <PMunch> FILE:LINE output?
[12:38:13] <ehmry> PMunch: "standard" compiler output for giving the location of a line within a file
[12:38:34] <ehmry> like GCC or clang or go or pcc
[12:39:00] <PMunch> Still not sure what you want
[12:39:23] <FromDiscord> <impbox [ftsf]> makes sense to me, but i don't know of the github issue
[12:40:57] <nrds> <06Prestige99> Is there a way to expose a readonly view of a seq of an object? E.g. https://play.nim-lang.org/#ix=3Aor
[12:41:10] <nrds> <06Prestige99> I suppose my only other option would be to wrap the seq impl
[12:41:11] <FromDiscord> <impbox [ftsf]> ehmry https://github.com/nim-lang/Nim/issues/690 there you go
[12:42:13] <PMunch> Prestige, I mean you could put in in a different module and not export the children field?
[12:42:19] <FromDiscord> <impbox [ftsf]> Prestige, not afaik
[12:42:23] <PMunch> Oh wait, you have a children template..
[12:42:38] <nrds> <06Prestige99> Yeah
[12:42:54] <nrds> <06Prestige99> Wanted to expose useful functions to iterate etc without allowing modifications
[12:43:08] <FromDiscord> <Elegantbeef> `lent T`
[12:43:08] <nrds> <06Prestige99> like using things in sequtils
[12:43:54] <nrds> <06Prestige99> ohh neat
[12:43:57] <nrds> <06Prestige99> https://nim-lang.github.io/Nim/destructors#lent-type
[12:44:18] <ehmry> impbox [ftsf]: yes, thank you!
[12:44:29] <FromDiscord> <Yardanico> anyone knows of any prebuilt clang musl toolchains?
[12:44:39] <FromDiscord> <Yardanico> there are quite a lot for GCC, but can't find any with clang
[12:44:55] <FromDiscord> <Elegantbeef> It will copy if it needs to IE\:  `var a = getsomeThing()` but aside from that it will be a read only pointer
[12:45:52] <PMunch> We seriously need more documentation for how lent and sink and ARC works..
[12:45:53] <FromDiscord> <Elegantbeef> But yea does exactly what you want https://play.nim-lang.org/#ix=3Aos
[12:46:38] <FromDiscord> <Elegantbeef> Probably
[12:46:45] <nrds> <06Prestige99> hm 
[12:48:19] <nrds> <06Prestige99> ah it needed to be a proc, okay
[12:48:21] <nrds> <06Prestige99> Thanks beef
[12:48:51] <FromDiscord> <Elegantbeef> Yea templates being code substitution cannot use stuff like that afaik
[12:49:17] <FromDiscord> <Elegantbeef> having a template return a `lent T` doesnt make sense as it's pasting the body where it's called
[12:49:42] <nrds> <06Prestige99> Yeah found it interesting that it compiles but doesn't work the same way as a proc would
[12:50:21] <FromDiscord> <Elegantbeef> Arguably might be a "bug"
[12:50:40] <FromDiscord> <Elegantbeef> Though i guess you could be calling a functioning internally which does borrow
[12:58:31] <FromDiscord> <Yardanico> From https://github.com/nim-lang/website/pull/301, maybe someone will find it useful:
[12:58:48] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Aoy
[13:05:51] <FromDiscord> <NullCode> In reply to @Yardanico "See e.g. https://github.com/kaushalmodi/hello_musl": Hello musl is cool
[13:41:54] <Zevv> Is it common in elixir code to whitespace align the ->'s in a case?
[13:42:12] <Zevv> oh damn EWRONGCHAN
[13:42:13] <FromDiscord> <Rika> This is the Nim channel sir
[13:42:19] <FromDiscord> <Yardanico> XDD
[13:42:25] <FromDiscord> <Yardanico> exposed
[13:42:46] <Zevv> Fuck Nim
[13:43:19] <Zevv> Oh wait. also the wrong channel to say that, isn't it?
[13:44:01] <FromDiscord> <Yardanico> it's the wrong universe to say that
[13:44:04] <FromDiscord> <Rika> Someone ban pls
[13:44:05] <FromDiscord> <Rika> Troll
[13:44:33] <Zevv> yeah it's about time I got banned
[13:45:38] * PMunch swings hammer
[13:45:51] <PMunch> Anyways, are you checking out Elixir Zevv?
[13:45:51] <Zevv> PMunch, our might local Thor
[13:45:58] <Zevv> not checking out, I'm flying high
[13:46:13] <Zevv> this stuff is hilarious. I'm just telling my computer *what* to do, not *how* to do it
[13:46:27] <PMunch> That's the beauty of functional programming :)
[13:46:27] <Zevv> I played around a few months ago, ported npeg to xpeg
[13:46:37] <PMunch> At least if you have a good functional language..
[13:46:52] <Zevv> now I needed a distributed system for managing a fleet of embedded computers connected to a load, power supply, temp sensor etc to do battery measurements
[13:46:59] <Zevv> this clustering stuff just _works_
[13:47:06] <Zevv> I wrote about 250 lines of elixir. It all works
[13:47:19] <Zevv> clustring. HTTP rest & json api. programmable scripting. communication with the hardware
[13:47:27] <Zevv> 750 lines
[13:47:31] <PMunch> Oh right, Elixir uses Erlang for the distributed bits right?
[13:47:39] <PMunch> Damn, that's impressive
[13:47:41] <Zevv> right. It lies on top of OTP
[13:47:53] <Zevv> but the underlying framework is solid as hell.
[13:48:16] <Zevv> Supervisor trees, hot code reloading, gazillions of tasks, actors
[13:48:42] <Zevv> it really nicely matches the problem I'm working on now
[13:49:35] <PMunch> Yeah it sounds like a perfect fit for the use-case you mentioned
[13:50:13] <PMunch> How's the speed of Elixir/the Erlang VM by the way?
[13:50:26] <PMunch> Not like benchmarking speeds, but ballpark
[14:03:25] <Zevv> latest version gained JIT this year
[14:03:42] <Zevv> its not in the rust or nim or c ballpark
[14:03:56] <Zevv> but is much better then python, php, ruby and the likes
[14:05:54] <PMunch> Cool
[14:06:03] <Zevv> its semi-dynamic so it's not light on the allocations and all
[14:06:06] <Zevv> you pay for that, right
[14:06:10] <PMunch> I mean if it was in the C ballpark it would be amazing for a functional language
[14:06:38] <Zevv> but I decided that raw performance is something I rarely need. And  there is always FFI of course
[14:06:58] <Zevv> it makes for a nice team with Nim or Rust, for example
[14:07:08] <PMunch> Yeah, most functional languages tend to have slightly worse performance in order to give the guarantees it does
[14:08:49] <FromDiscord> <hotdog> Hey @PMunch
[14:09:00] <FromDiscord> <hotdog> Futhark is awesome
[14:09:06] <PMunch> Thanks :)
[14:09:20] <PMunch> Have you used it for anything particular?
[14:09:28] <PMunch> Or did you just try it out?
[14:09:31] <FromDiscord> <hotdog> I used it a couple days ago to wrap jack (audio library) headers
[14:09:44] <FromDiscord> <hotdog> I was trying to put together a quick prototype
[14:09:54] <PMunch> Oh nice, did it work alright for those?
[14:10:36] <FromDiscord> <hotdog> And used some existing jack wrapper from nimble or github, but it was broken, outdated and kept segfaulting. Spent a while trying to fix it and gave up. Then decided to try futhark and in literally 2 minutes I had a fully working wrapper
[14:10:55] <FromDiscord> <hotdog> So it's ideal for prototyping
[14:11:14] <FromDiscord> <hotdog> You can just pull a library in super quickly
[14:11:28] <PMunch> @Zevv, I kinda want to see something like zero-functional expanded to an entire language. Compile-time lazy evaluation and compile-time resolution of the things zero-functional does
[14:11:30] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[14:11:39] <FromDiscord> <hotdog> I saw the mixed reactions on the forum, and I disagree with a lot of what was said
[14:12:07] <PMunch> @hotdog, that is the exact same experience I have had using Futhark :)
[14:12:21] <FromDiscord> <hotdog> For me, Nim is a swiss-army-knife that can do  so much, and integrate in so many places. But it doesn't work if you have to spend 6+ hours wrapping each library you want to use
[14:13:04] <PMunch> I was a bit surprised by some of the negativity on the forum, but I guess it was a bit down to me sort-of claiming Futhark would replace c2nim and nimterop
[14:13:12] <FromDiscord> <hotdog> But before e.g. publishing to nimble, I probably would put some effort in to make it more Nim style
[14:13:20] <FromDiscord> <hotdog> My wrapper, I mean
[14:13:27] <PMunch> Oh for sure
[14:13:32] <FromDiscord> <hotdog> But it's so handy to have a working library so quickly
[14:13:55] <FromDiscord> <tandy> feels like a spoiler to read this now↵(@Yardanico)
[14:13:59] <PMunch> Yeah, and it's perfect if you're just making a small application for yourself. Or as you said prototyping something
[14:14:02] <FromDiscord> <Yardanico> In reply to @tandy "feels like a spoiler": why?
[14:14:06] <FromDiscord> <Yardanico> it's better to know the changes beforehand
[14:14:08] <FromDiscord> <hotdog> In reply to @PMunch "I was a bit": Yeah I can see that. I think it fills a slightly different use case
[14:14:13] <FromDiscord> <Yardanico> most of this was already in changelog.md
[14:14:28] <FromDiscord> <hotdog> In reply to @PMunch "Yeah, and it's perfect": Yeah 100%
[14:14:37] <PMunch> It is a bit different for sure
[14:14:51] <FromDiscord> <hotdog> I've got a question for you
[14:14:51] <PMunch> Have you had a look at the cached output by the way?
[14:15:31] <FromDiscord> <hotdog> For the symbol renaming, would it be possible to have a callback? I want to e.g. change every symbol that ends in "_t" to a more nim-style type name
[14:15:43] <FromDiscord> <hotdog> But don't want to write every symbol into the wrapper
[14:15:59] <FromDiscord> <hotdog> In reply to @PMunch "Have you had a": Yeah I did, had a poke around
[14:16:04] <PMunch> I want to write a mode that doesn't output all the `when declared` shenanigans so it would be slightly better for wrapping
[14:16:12] <PMunch> Ooh, that is a good idea indeed
[14:16:28] <FromDiscord> <tandy> how↵(@hotdog)
[14:16:31] <FromDiscord> <tandy> that sounds amazing
[14:16:32] <PMunch> If you've had a look at the Futhark sources I have a "TODO: Rethink this" over the entire renaming table :P
[14:16:44] <FromDiscord> <tandy> agree↵(@hotdog)
[14:16:45] <FromDiscord> <hotdog> In reply to @PMunch "I want to write": Cool that would be good. I navigated around mostly by jump-to-definition
[14:17:07] <PMunch> Ah, that is indeed the best way to navigate that mess
[14:17:20] <FromDiscord> <tandy> i mean yeah ive seen the changes before but its just exciting to read the blog posts lol↵(@Yardanico)
[14:17:36] <PMunch> It's output that way to ensure you won't have collisions and so that you can define your own overriding types
[14:18:01] <PMunch> But that's less of a concern if you're going to process it into a wrapper
[14:18:28] <FromDiscord> <hotdog> In reply to @PMunch "It's output that way": I see
[14:18:42] <PMunch> But throwing some callbacks in at various points is a good idea
[14:18:49] <FromDiscord> <hotdog> Maybe a callback to handle collisions
[14:18:58] <FromDiscord> <hotdog> ah snap 🙂
[14:19:06] <PMunch> Yeah, I'm actually working on some better collision handling right now..
[14:19:10] <PMunch> It's a bit of a mess
[14:21:27] <FromDiscord> <hotdog> Cool
[14:21:44] <FromDiscord> <hotdog> I'm keen to see how it goes
[14:22:22] <PMunch> Most of the trouble comes from trying to convert C names to Nim-names without horrible mangling
[14:22:43] <PMunch> This sometimes causes overlaps (just scroll back a bit and you'll see me mentioning some of them)
[14:22:58] <FromDiscord> <hotdog> Yeah I can imagine that
[14:23:48] <FromDiscord> <Rika> ~~damn so you didn’t opt for the Unicode underscore method~~
[14:24:04] <PMunch> But the `when declared` stuff is just so that you'll be able to fix wrapping issues by just declaring it yourself. A feature that I missed when doing c2nim and nimterop
[14:24:07] <FromDiscord> <hotdog> I guess the main thing is handling different naming conventions used in C, there could even be a few presets for different common ones
[14:24:18] *** Quits: neurocyte0132 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[14:24:20] <PMunch> @Rika, haha, give me a keyboard that can output those and I'll consider it
[14:24:32] <FromDiscord> <hotdog> In reply to @PMunch "But the `when declared`": Yeah that is handy
[14:24:36] <FromDiscord> <Rika> On it chief, making the firmware right now
[14:25:22] <PMunch> Damn it, just realised that I have written keyboard firmware in Nim that would support that.. You could literally fork it and have a keyboard firmware I can flash onto my keyboard in minutes..
[14:25:33] <FromDiscord> <hotdog> Anyway, go to rush off. Just wanted to say good job on it, nice one @PMunch
[14:25:37] <FromDiscord> <Rika> Poggers
[14:25:45] <PMunch> Thanks again
[14:25:50] <PMunch> Gotta go to a meting myself
[14:25:56] <FromDiscord> <Rika> See you
[14:31:27] <FromDiscord> <tandy> using essentia / flucoma from nim would be amazing
[14:32:23] <FromDiscord> <Rika> ?
[14:32:29] <FromDiscord> <Rika> Reply with unknown content?
[14:36:15] <FromDiscord> <tandy> strange
[14:36:30] <FromDiscord> <tandy> i asked pmunch if they were going to support cpp
[14:40:32] <FromDiscord> <Rika> C++ is another beast
[14:40:34] <FromDiscord> <Rika> I doubt it
[14:41:08] <FromDiscord> <tandy> damn
[14:41:25] <FromDiscord> <enthus1ast> i one want to try it on windows\: https://github.com/PMunch/futhark/issues/1
[14:41:33] <FromDiscord> <Yardanico> In reply to @tandy "damn": your best bet is to hope haxscramper suceeds :)
[14:41:37] <FromDiscord> <Yardanico> (edit) "suceeds" => "succeeds"
[14:41:55] <FromDiscord> <Yardanico> he's doing the ultimate C++ wrapping tool and wants to test it on the ultimate C++ beast - Qt
[14:41:58] <FromDiscord> <tandy> where is haxscramper working on that?↵(@Yardanico)
[14:42:03] <FromDiscord> <enthus1ast> to install it i had changed the nimble file to not install opir, build it by hand, then copy opir to the nimble dir
[14:42:05] <FromDiscord> <tandy> oh my god↵(@Yardanico)
[14:42:08] <FromDiscord> <tandy> incredibly based
[14:42:09] <FromDiscord> <Yardanico> it's too early to try rn I think
[14:42:27] <FromDiscord> <Yardanico> https://github.com/haxscramper/hcparse
[14:42:30] <nrds> <12R2D299> 4GitHub: 7"High-level nim bindings for parsing C/C++ code"
[14:57:43] <FromDiscord> <cabboose> He will definitely succeed
[14:57:52] <FromDiscord> <cabboose> the question is whether he will burn down his computer before that happens
[14:58:03] <FromDiscord> <cabboose> pray for him 🙏
[15:01:33] <FromDiscord> <haxscramper> It would be pretty helpful if I wasn't the only person actually doing thinking, because all other solutions just seem to be a quick-patches, without diving deep into details of macro expansion, interfacing with virtual classes, c templates, portability and tracking of library abi changes and so on
[15:02:04] <FromDiscord> <haxscramper> Maybe I should put up more issues in "help wanted" section
[15:02:48] <FromDiscord> <haxscramper> And when 1.6 finally comes out and unbreaks my CI write documentation for the whole internal API
[15:04:06] <FromDiscord> <haxscramper> Because implementing this, given right tools is not as hard as coming up with the design
[15:06:12] <FromDiscord> <tandy> is there really no interest from araq / lead nim devs in working on the stuff ur doing?
[15:06:51] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[15:08:16] <FromDiscord> <Rika> Probably just have their hands full
[15:11:03] <FromDiscord> <tandy> makes sense↵(@Rika)
[15:14:07] <FromDiscord> <haxscramper> In reply to @tandy "is there really no": c2nim seems to be "good enough for now" for them
[15:14:55] <FromDiscord> <haxscramper> At least there was no real push for any other official tooling that involved libclang/tree-sitter/boost::wave and other tools of that sort
[15:15:28] <FromDiscord> <tandy> hmm, dont they have a lot of money in their open collective
[15:15:42] <FromDiscord> <haxscramper> c2nim is basically a lowest common denominator. It works ... often enough
[15:15:43] <FromDiscord> <tandy> would be useful to fund some ppl with that
[15:15:53] <FromDiscord> <haxscramper> Well
[15:16:09] <FromDiscord> <haxscramper> It is not exactly a problem that can be solved by throwing money at it
[15:16:23] <FromDiscord> <haxscramper> Or we would just end up with new nimterop or something like that
[15:17:18] <FromDiscord> <haxscramper> Main issue is collecting use cases and iteratively adapting the solution
[15:17:26] <FromDiscord> <haxscramper> Coming up with good base tooling and building on top of this
[15:17:52] <FromDiscord> <haxscramper> So far I haven't seen any solution that followed this procedure, it mostly just straight-up jump to codegen
[15:32:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[15:32:55] *** Quits: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[15:34:36] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Client Quit)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:46:32] <FromDiscord> <Goel> Is it possible to specify to import only a single exported procedure form another module, instead of the whole module
[15:46:36] <FromDiscord> <Goel> (edit) "module" => "module?"
[15:46:51] <FromDiscord> <enthus1ast> from module import foo
[16:00:19] <FromDiscord> <gnu+linux user> but does it do any good on terms of generated csource of module having no other code other than imported procs
[16:00:31] <FromDiscord> <gnu+linux user> (edit) "procs" => "procs?"
[16:00:59] <FromDiscord> <cabboose> Nim only compiles the code you use anyway
[16:01:22] <FromDiscord> <cabboose> Well there are exceptions to that I think
[16:04:52] <FromDiscord> <Yardanico> @gnu+linux user as cabboose said, Nim always has dead-code elimination on
[16:05:04] <FromDiscord> <Yardanico> unless the procedure is marked with `{.exportc.}`
[16:10:30] *** Joins: arkurious (~arkurious@user/arkurious)
[16:17:17] <FromDiscord> <Goel> I had to do that because i only needed a single `type = object` from another module. Instead of importing that i triet to "trick" it creating the same type object, same name, same structure and fields, withing my module, but then when i export this module with its procedures, the compiler complains. So i suppose every created object even if is exactly the same (same name and fields) of another already present in a different module, is still 
[16:17:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[16:24:49] <FromDiscord> <cabboose> Unless you have collision issues then you can still import the whole module. It doesn’t effect performance. Otherwise you can do the from module import
[16:24:59] <FromDiscord> <cabboose> All kinds of ways to be tricky about it if you need
[16:31:18] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:44:19] <FromDiscord> <Yardanico> In reply to @Goel "I had to do": yes of course, that's how it should work
[16:45:11] *** Joins: rockcavera (~rc@192.12.114.205)
[16:45:11] *** Quits: rockcavera (~rc@192.12.114.205) (Changing host)
[16:45:11] *** Joins: rockcavera (~rc@user/rockcavera)
[16:48:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[16:50:00] <FromDiscord> <gnu+linux user> so from is a placebo 😔
[16:59:06] <FromDiscord> <cabboose> Well no; it’s good for collisions, so like if you had two procs of the same names in module a and b
[16:59:11] <FromDiscord> <cabboose> You can either import everything except that proc from b
[16:59:19] <FromDiscord> <cabboose> Or just import the ones you want from b
[16:59:23] *** Joins: max22- (~maxime@2a01cb08833598008dc43d9542692ebe.ipv6.abo.wanadoo.fr)
[17:01:40] <FromDiscord> <NullCode> but is there size reduction
[17:01:44] <FromDiscord> <NullCode> if we do from
[17:01:54] <FromDiscord> <NullCode> (edit) "from" => "`from`"
[17:02:18] <FromDiscord> <exelotl> no, Nim has dead code elimination regardless
[17:02:46] <FromDiscord> <exelotl> if you import something and don't use it, it won't show up in the generated C code
[17:03:54] <FromDiscord> <NullCode> i see
[17:04:06] <FromDiscord> <exelotl> I like to use `from` for cases where a module is just imported so that I can call a single proc on line 733
[17:08:14] <FromDiscord> <exelotl> or cases where it's really not clear where a proc came from  - e.g. in my game there's a shard (currency) counter but i sometimes re-use it to show messages. So I have `from shards import showMessage` to tell the reader (e.g. my future self) that yes, this is weird and I know it
[17:14:32] *** Joins: Schnouki (~schnouki@user/schnouki)
[17:29:54] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[17:33:26] *** Joins: neurocyte0132 (~neurocyte@45.14.189.33)
[17:33:26] *** Quits: neurocyte0132 (~neurocyte@45.14.189.33) (Changing host)
[17:33:26] *** Joins: neurocyte0132 (~neurocyte@user/neurocyte)
[17:50:34] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:55:26] <FromDiscord> <Rika> when types are extremely generic in name (Image, Color) i qualify them (pixie.Image, pixie.Color), then both procs and types are obvious as to where they come from
[18:06:52] <FromDiscord> <Gumber> or you can alias the import
[18:06:58] <FromDiscord> <Gumber> `import pixie as pix` or whatever
[18:07:30] <FromDiscord> <Gumber> I don't know - I rarely find the aliasing stuff / import stuff useful and I usually just do what @Rika described above...
[18:14:14] <FromDiscord> <reilly> Are there any ways of doing a bitwise AND besides the `bitops.bitand()` macro? I think it has some pragmas that are causing me issues.
[18:16:26] <FromDiscord> <Gumber> yes
[18:16:32] <FromDiscord> <Gumber> `0 and 1`
[18:17:13] <FromDiscord> <Gumber> In reply to @reilly "Are there any ways": https://play.nim-lang.org/#ix=3ApM
[18:19:16] <FromDiscord> <reilly> Oh yeah, duh. Thanks.
[18:26:48] <FromDiscord> <reilly> So, I've got a pointer to a `uint8`. How can I access the memory located `x` bytes away from this pointer?
[18:27:17] <FromDiscord> <reilly> Specifically, I''m trying to assign to a portion of memory `x` bytes away from a pointer.
[18:27:27] <FromDiscord> <reilly> (edit) "I''m" => "I'm"
[18:28:16] <FromDiscord> <Gumber> @reilly pointer arithmetic is one option
[18:28:27] <FromDiscord> <Gumber> if you know what the underlying memory represents you could cast it to that
[18:28:34] <FromDiscord> <Gumber> so if it's like an array of uint8s or something
[18:28:47] <FromDiscord> <Gumber> and you know the size of the underlying array - you could cast it to that and access it that way
[18:29:05] *** Quits: neurocyte0132 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[18:29:17] <FromDiscord> <Gumber> you could also cast it to an `ptr UncheckedArray[uint8]` and then use the subscript operator to access the element you want
[18:30:23] *** Joins: neurocyte0132 (~neurocyte@45.14.189.33)
[18:30:23] *** Quits: neurocyte0132 (~neurocyte@45.14.189.33) (Changing host)
[18:30:23] *** Joins: neurocyte0132 (~neurocyte@user/neurocyte)
[18:31:02] <FromDiscord> <Gumber> I've used this library before - https://github.com/kaushalmodi/ptr_math - with success
[18:31:05] <nrds> <12R2D299> 4GitHub: 7"Pointer arithmetic in Nim"
[18:33:03] <FromDiscord> <tandy> are there any similar language projects to nim atm?
[18:35:24] <FromDiscord> <auxym> Similar how? Nim is often lumped in with Rust, Go, Zig, D, Crystal. Whether they are "similar" is somewhat subjective and depends on what you are comparing. Some people even say Nim is "similar" to python because of whitespace syntax, despite the fact that they are pretty different languages on most other axes
[18:35:55] <FromDiscord> <tandy> i guess nice syntax, high level, general purpose?↵(@auxym)
[18:36:07] <FromDiscord> <Gumber> Nim isn't really high level....
[18:36:07] <FromDiscord> <tandy> i wouldnt say zig is an alternative to nim
[18:36:15] <FromDiscord> <tandy> it can be though
[18:36:26] <FromDiscord> <tandy> whereas zig isnt at all
[18:36:36] <FromDiscord> <Gumber> Well Zig is meant to replace C Nim isn't
[18:36:43] <FromDiscord> <Gumber> Nim will probably eventually get a Zig compiler backend
[18:36:56] <FromDiscord> <Gumber> But I mean you can compile inline assembly with Nim - I wouldn't call it high level
[18:37:01] <FromDiscord> <tandy> yee↵(@Gumber)
[18:37:06] <FromDiscord> <tandy> awesome hahah↵(@Gumber)
[18:37:07] <FromDiscord> <Gumber> semantic wise it's much closer to C++ than a lot of other languages
[18:37:18] <FromDiscord> <tandy> i suppose general purpose is better↵(@Gumber)
[18:37:20] <FromDiscord> <Gumber> so if you consider C++ high level, I guess Nim is then too, but.....
[18:37:33] <FromDiscord> <Gumber> No I don't think there are many languages like Nim - maybe the closest would be D
[18:37:42] <FromDiscord> <Gumber> but I also don't know much about D's memory  model
[18:37:53] <FromDiscord> <tandy> what about crystal? i havent looked at that much↵(@Gumber)
[18:37:57] <FromDiscord> <Gumber> lol
[18:38:17] <FromDiscord> <Gumber> sorry it's just whenever I hear Crystal or V these days I chuckle
[18:38:19] <FromDiscord> <Rika> crystal is still vm based isnt it
[18:38:27] <FromDiscord> <Gumber> Crystal still doesn't support windows afaik lol
[18:38:36] <FromDiscord> <Rika> i find crystal at least much more respectable than v/
[18:38:43] <FromDiscord> <Gumber> I mean yeah - but it's still kind of a joke IMO
[18:38:52] <FromDiscord> <Gumber> been kind of sitting in the same state since it was announced for the most part
[18:38:56] <FromDiscord> <tandy> yeah its pretty funny how out of all these attempts nim is the only one that survived↵(@Gumber)
[18:38:59] <FromDiscord> <Gumber> and everyone was sooooo hyped about it
[18:39:11] <FromDiscord> <Gumber> well Nim has been around for close to two decades at this point
[18:39:24] <FromDiscord> <Gumber> or it's nearing that point anyway
[18:39:39] <FromDiscord> <Gumber> it's much older than Crystal or V or Zig or Rust
[18:39:41] <FromDiscord> <tandy> damn i didnt realise↵(@Gumber)
[18:39:48] <FromDiscord> <tandy> i thought it was only a decade
[18:40:03] <FromDiscord> <Gumber> nope
[18:40:25] <FromDiscord> <Gumber> 13 years ago it says now
[18:40:29] <FromDiscord> <Gumber> but I think that's probably wrong
[18:40:30] <FromDiscord> <Gumber> https://en.wikipedia.org/wiki/Nim_(programming_language)
[18:40:40] <FromDiscord> <Gumber> yeah it was started in 2005
[18:40:43] <FromDiscord> <Gumber> development - so 16 years now
[18:40:57] <FromDiscord> <Gumber> became public in 2008 with the name `Nimrod`
[18:41:37] <FromDiscord> <Gumber> why are you looking for alternatives anyway? what don't you like about Nim?
[18:41:40] <FromDiscord> <Gumber> or are you just curious?
[18:41:47] <FromDiscord> <dom96> In reply to @Gumber "Nim will probably eventually": seriously doubt this, far more likely we'll get a LLVM backend
[18:41:52] <FromDiscord> <Gumber> I mean we already have one
[18:41:57] <FromDiscord> <Gumber> NLVM
[18:42:07] <FromDiscord> <Gumber> and I would much prefer a Zig backend to an LLVM one
[18:42:21] <FromDiscord> <Gumber> LLVM brings all sorts of issues that Zig is already figuring out
[18:42:31] <FromDiscord> <tandy> wow↵(@Gumber)
[18:43:01] <FromDiscord> <Gumber> also zigcc exists now so.....
[18:43:02] <FromDiscord> <tandy> just curious, i love nim, but im not sure about its long term position↵(@Gumber)
[18:43:22] <FromDiscord> <Gumber> I think worrying about that kind of thing is a bit pointless if you're exploring niche languages
[18:43:35] <FromDiscord> <tandy> tru lol
[18:44:20] <FromDiscord> <Gumber> I will RFC hard for Zig compiler backend when Zig reaches a more mature state
[18:44:26] <FromDiscord> <Gumber> (edit) "I will RFC hard for ... Zig" 03added "a"
[18:44:31] <nrds> <06Prestige99> That would be great
[18:44:45] <FromDiscord> <enthus1ast> what would be the benefit to have a zig backend over c?
[18:45:23] <FromDiscord> <tandy> zig is the future?
[18:46:11] <FromDiscord> <Gumber> Because Zig is going to be a safer alternative to C with less UB
[18:46:44] <FromDiscord> <tandy> cant wait till we fix computers
[18:46:50] <FromDiscord> <enthus1ast> would be interesting to have a direct nim -\> binary instead of a backend
[18:47:11] <FromDiscord> <enthus1ast> though nim would be the future \:)
[18:47:27] <FromDiscord> <Gumber> sent a code paste, see https://play.nim-lang.org/#ix=3Aqa
[18:47:28] <FromDiscord> <Gumber> this is why a Zig backend is more attractive than a C one
[18:47:39] <FromDiscord> <dom96> Nim->Zig->LLVM->Binary would just be too much
[18:47:42] <FromDiscord> <Gumber> I mean we can go to LLVM and deal with long ass compile times like the Rust team has to
[18:47:47] <FromDiscord> <dom96> C UB can be avoided
[18:47:48] <FromDiscord> <Gumber> Zig is ditching LLVM
[18:47:52] <FromDiscord> <Gumber> or has been working on doing that for a while
[18:48:21] <FromDiscord> <Gumber> https://kristoff.it/blog/zig-new-relationship-llvm/
[18:48:47] <FromDiscord> <enthus1ast> UB?
[18:49:11] <FromDiscord> <Gumber> undefined behaviour
[18:49:54] <FromDiscord> <Gumber> In reply to @dom96 "C UB can be": I mean sure - but it doesn't change the fact that the language spec is full of it....
[18:49:58] <FromDiscord> <Gumber> Zig aims to completely avoid that
[18:50:12] <FromDiscord> <Gumber> I don't even know why anyone wants an LLVM backend
[18:50:20] <FromDiscord> <Gumber> like - we've seen what's happened with rust in relation to compile times....
[18:50:26] <FromDiscord> <Gumber> do we really want to go down that same road?
[18:50:50] <FromDiscord> <Gumber> (edit) "an" => "a"
[18:51:01] <FromDiscord> <dom96> > and adds an amazing feature for debug builds of your code: incremental compilation with in-place binary patching, another unique Zig feature.↵hah, that article says this and has links to "color blind async/await" + "zig comptime", pretty sure you could say Nim has both too
[18:51:51] <FromDiscord> <dom96> In reply to @Gumber "do we really want": nope, I'm happy with C compilation
[18:52:02] <FromDiscord> <Gumber> I mean me too
[18:52:07] <FromDiscord> <Gumber> but I'd be happier with Zig compil;ation
[18:52:12] <FromDiscord> <Gumber> (edit) "compil;ation" => "compilation"
[18:52:18] <FromDiscord> <Gumber> once Zig is ready anyway
[18:52:55] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[18:54:10] <FromDiscord> <dom96> at that point why not just use Zig?
[18:55:09] <nrds> <06Prestige99> why not just use c?
[18:55:52] <FromDiscord> <tandy> so does zig support IC yet?↵(@Gumber)
[18:56:26] <FromDiscord> <dom96> because C has a poor type system, poor module system and is in general an archaic language
[18:57:16] <nrds> <06Prestige99> So you think Nim doesn't have advantages over Zig?
[18:57:32] <FromDiscord> <Gumber> I don't know if zig has IC fully implemented yet I know they're working on it
[18:57:47] <FromDiscord> <Gumber> Look you don't use zig and you don't use C because Nim has higher level abstractions than both languages
[18:57:58] <FromDiscord> <Gumber> The point is if zig is going to eventually end up being a better C it doesn't even make sense to compile to see anymore it makes sense to compile to zig
[18:58:17] <FromDiscord> <Gumber> But we're not there yet The zig team is still working on making zig a c replacement it's obviously making a lot of progress towards that but it's not there yet
[18:58:31] <FromDiscord> <Gumber> The zig team has also made some incredible tooling like zig CC which basically eliminates the need for cross compile tool chains altogether
[18:58:41] *** Joins: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[18:58:46] <FromDiscord> <Gumber> So zig is going to end up being like a better LLVM for Nim
[18:58:51] <FromDiscord> <haxscramper> It is harder to compiler to zig because it is harder to use it as dumb backend
[18:58:54] *** Quits: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Changing host)
[18:58:54] *** Joins: beshr (~beshr@user/beshr)
[18:59:10] <FromDiscord> <Gumber> This is true there are more language semantics and rules and everything like that it's definitely a more complex challenge than writing a C compiler back end
[18:59:16] <FromDiscord> <haxscramper> if zig code is too smart we have to transpile nim code to correct zig
[18:59:18] <FromDiscord> <Gumber> But I think in the end if it is feasible it is worth the effort
[18:59:30] <FromDiscord> <Gumber> Right but I think one of the design goals of the zig team is to keep it simple I guess we'll just have to find out how simple it ends up being
[18:59:30] <FromDiscord> <haxscramper> which is harder than converting to correct C
[18:59:45] <FromDiscord> <Gumber> Yeah I mean you're right if it ends up being a transpilation step instead of a compilation step then we will have issues for sure
[19:00:04] <FromDiscord> <haxscramper> and what benefits does zig bring to us again?
[19:00:10] <FromDiscord> <dom96> Prestige: I don't think the advantages are large enough to warrant implementing a Zig backend for Nim over simply just using Zig
[19:00:16] <FromDiscord> <haxscramper> it being better language makes harder for us to compile to it
[19:00:19] <FromDiscord> <Gumber> Well less undefined behavior more memory safety
[19:00:22] <FromDiscord> <haxscramper> the smarter zig gets
[19:00:33] <FromDiscord> <haxscramper> the worse our backend impl would have to be
[19:00:45] <FromDiscord> <haxscramper> have you seen generated C for iterators for examples?
[19:00:48] <FromDiscord> <dom96> What undefined behaviour does Nim have due to its C compilation?
[19:00:50] <FromDiscord> <Gumber> Yeah I mean I agree with and see your points I'm just optimistic that it won't be so high level and so full of abstractions that it will make targeting it difficult but I don't know I don't follow its development extremely closely
[19:00:52] <FromDiscord> <haxscramper> it is just rat's nest of gotos
[19:01:06] <FromDiscord> <Gumber> Nim doesn't have undefined behavior but it has to account for it
[19:01:14] <FromDiscord> <Gumber> Well that's probably a misnomer but
[19:01:32] <FromDiscord> <Gumber> My point is nim doesn't have to expose C'sa UB
[19:01:45] <FromDiscord> <haxscramper> In reply to @Gumber "Yeah I mean I": again, what benefits does it brings us again, except for abstract "C is UB from top to bottom"
[19:01:58] <FromDiscord> <haxscramper> does it have larger ecosystem?
[19:02:16] <FromDiscord> <haxscramper> maybe some unique libs that we would benefit from using?
[19:02:26] <FromDiscord> <haxscramper> access to new platforms that C can't compile to?
[19:02:39] <FromDiscord> <haxscramper> more performant backend for free?
[19:02:43] <FromDiscord> <Gumber> In reply to @haxscramper "it is just rat's": No on the ecosystem
[19:02:54] <FromDiscord> <Gumber> I don't know about the unique library situation but I mean there are libraries for most things in C
[19:02:54] <FromDiscord> <haxscramper> I mean zig is nice to use
[19:03:19] <FromDiscord> <haxscramper> We'd better targeting `.net` or java ecosystem
[19:03:21] <FromDiscord> <Gumber> My thinking is that platforms and available targets will become easier to write code for with a zig back end than it presently is let's see
[19:03:29] <FromDiscord> <Gumber> With C
[19:03:41] <FromDiscord> <Gumber> Well those would be transpilation
[19:03:47] <FromDiscord> <haxscramper> why?
[19:03:51] <FromDiscord> <Gumber> And I imagine just as difficult if zig ends up being very high level
[19:04:03] <FromDiscord> <Gumber> Because they're at the same abstraction level as Nim
[19:04:11] <FromDiscord> <haxscramper> they are all bytecode vm
[19:04:18] <FromDiscord> <haxscramper> we already have bytecode register vm
[19:04:22] <FromDiscord> <haxscramper> I'm talking jvm
[19:04:23] <FromDiscord> <haxscramper> etc.
[19:04:25] <FromDiscord> <Gumber> Okay I see what you're saying
[19:04:28] <FromDiscord> <Gumber> CLR and JVM
[19:04:47] <FromDiscord> <haxscramper> yes, though maybe transpilation to java is easier than jvm code generation
[19:04:56] <FromDiscord> <Gumber> I don't know I've never tried either
[19:04:57] <FromDiscord> <haxscramper> idk, so right now this is just an assumption
[19:05:17] <FromDiscord> <Gumber> Yeah it very much is and that's why I said probably it would get one but if it turns out that zig ends up being too high level to make it worth it then I'm totally wrong
[19:05:47] <FromDiscord> <Gumber> I think one of the design goals was always to replace C and b a viable compilation target but I don't know if that's changed or if it is even still something people are exploring
[19:05:58] <FromDiscord> <Gumber> I explored zig probably 3 to 4 years ago at this point when it was still just a baby
[19:06:25] <FromDiscord> <Gumber> And I know the language semantics and the project itself have changed quite rapidly since I last took a solid look at the project
[19:06:52] <FromDiscord> <Gumber> I know that when I wrote in zig I missed a lot of the abstractions in Nim, and especially Nims metaprogramming
[19:07:12] <FromDiscord> <Gumber> But writing's Zig was much nicer than writing C
[19:09:09] <FromDiscord> <Gumber> Also I have no idea how zig's standard library is going to compare to C's at the end of the day
[19:10:14] <FromDiscord> <haxscramper> I think we would get better shot at interfacing with zig
[19:10:24] <FromDiscord> <haxscramper> or generating zig APIs with something like genny
[19:10:27] <FromDiscord> <haxscramper> EEE strategy
[19:10:44] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[19:11:15] <FromDiscord> <haxscramper> well, last E is not necessary, but still
[19:11:44] <FromDiscord> <Gumber> yeah that could work well too I think and yeah might end up being better than a Zig compiler backend
[19:12:36] *** Quits: neurocyte0132 (~neurocyte@user/neurocyte) (Ping timeout: 245 seconds)
[19:30:38] <FromDiscord> <Gumber> yeah but no need to extinguish zig lol
[19:30:47] <FromDiscord> <Gumber> had a meeting in the middle of those replies xD
[19:40:15] <FromDiscord> <Yandong Zhang> Hello everyone, I have a question for sequence comparing.
[19:40:17] <FromDiscord> <Yandong Zhang> assert(@[1.0,1.0,1.0,1.0,1.0] == @[1.0,1.0,1.0,1.0,1.0],"wrong!")
[19:40:37] <FromDiscord> <Gumber> you're comparing refs
[19:40:41] <FromDiscord> <Yandong Zhang> The above statement is not correct. Do anyone know how to compare the seq?
[19:40:53] <FromDiscord> <Shoto> It'd be cool if i could use C libs easily via Zig ngl
[19:41:02] <FromDiscord> <Gumber> You can use C libs easily via Nim 🙂
[19:41:22] <FromDiscord> <Gumber> In reply to @Yandong Zhang "The above statement is": sequences are ref objects you need to compare the objects the ref points to, not the refs
[19:41:33] <FromDiscord> <Shoto> In reply to @Gumber "You can use C": I haven't been able to figure that out at all lol
[19:41:39] <FromDiscord> <Gumber> do you know C?
[19:41:49] <FromDiscord> <Shoto> Enough to make a basic C program, yes
[19:41:58] <FromDiscord> <Gumber> well then learn how to use `importc`
[19:42:02] <FromDiscord> <Gumber> because it's that easy
[19:42:16] <FromDiscord> <Yandong Zhang> @Gumber\:   assert([1.0,1.0,1.0,1.0,1.0] == [1.0,1.0,1.0,1.0,1.0],"wrong!")↵Still not work 🙄
[19:42:35] <FromDiscord> <Gumber> you're also comparing floating point values
[19:42:44] <FromDiscord> <Gumber> which is not going to work....
[19:43:05] <FromDiscord> <Gumber> depending on your cpu arch and default word size
[19:43:05] <nrds> <06Prestige99> seems odd, why doesn't that work?
[19:43:12] <FromDiscord> <Gumber> you're either comparing sixty-four bit floating point values or 32-bit
[19:43:12] <FromDiscord> <Yandong Zhang> assert([1,2] == [1,2],"wrong!")↵ Not work too
[19:43:22] <FromDiscord> <Gumber> that should work....
[19:43:23] <FromDiscord> <Shoto> Hm alright
[19:43:33] <FromDiscord> <Gumber> give me one sec Yandong, let me take a look
[19:44:14] <FromDiscord> <Yandong Zhang> Sorry. Works now.
[19:44:20] <FromDiscord> <Yandong Zhang> Thank you
[19:44:21] <FromDiscord> <Gumber> was about to say 🙂
[19:44:24] <FromDiscord> <Gumber> yeah, no problem!
[19:44:40] <FromDiscord> <Gumber> In reply to @nrds "<Prestige> seems odd, why": because floating point units in modern CPUs don't work that way 🙂
[19:44:49] <FromDiscord> <Gumber> floating point math by nature is imprecise
[19:45:11] <FromDiscord> <Gumber> sent a code paste, see https://play.nim-lang.org/#ix=3Aqp
[19:45:24] <nrds> <06Prestige99> yeah but I'd think an expression if 1.0 == 1.0 should always be true
[19:45:43] <FromDiscord> <Gumber> one would think....
[19:45:46] <FromDiscord> <xflywind> Compare string form or using map + https://nim-lang.github.io/Nim/math.html#almostEqual%2CT%2CT%2CNatural
[19:46:26] <FromDiscord> <xflywind> (edit) "using map +" => "use"
[19:46:44] <FromDiscord> <Yandong Zhang> @xflywind\: I use the echo now. Give the assertion.
[19:46:52] <FromDiscord> <Yandong Zhang> REPL way to do the test, LoL
[19:47:09] <FromDiscord> <Yandong Zhang> give up the assertion at this moment.
[19:47:25] <FromDiscord> <Gumber> in general it's just not a good idea to use `==` when checking for equality with floating point values
[19:47:33] <FromDiscord> <Gumber> I think Nim has like `~=` or something?
[19:48:16] <FromDiscord> <Yandong Zhang> Do not know. Another question is, is there a convenient way the convert seq[float] to seq[int]?
[19:48:25] <FromDiscord> <Yandong Zhang> Maybe we need to use the map?
[19:48:38] <FromDiscord> <Gumber> maybe something in `sequtils`
[19:48:44] <FromDiscord> <Gumber> just know that it will == allocations
[19:49:02] <FromDiscord> <Gumber> because that module is full of pure functions and doesn't mutate state
[19:49:19] <FromDiscord> <Yandong Zhang> Will check the sequtils. Thanks again.
[19:49:45] <FromDiscord> <Gumber> https://rosettacode.org/wiki/Approximate_equality#Nim
[19:49:46] <FromDiscord> <Gumber> yeah np!
[19:51:35] <FromDiscord> <xflywind> In reply to @Gumber "https://rosettacode.org/wiki/Approximate_equality#N": Yeah, it is implemented as https://nim-lang.github.io/Nim/math.html#almostEqual%2CT%2CT%2CNatural
[19:51:52] <FromDiscord> <Yardanico> In reply to @Gumber "sequences are ref objects": no
[19:52:00] <FromDiscord> <Gumber> huh?
[19:52:06] <FromDiscord> <Gumber> oh yeah that changed fuck
[19:52:06] <FromDiscord> <Yardanico> nim sequences are ref objects internally, but they have value semantics in Nim
[19:52:06] <FromDiscord> <Gumber> lol
[19:52:10] <FromDiscord> <Yardanico> it never changed
[19:52:13] <FromDiscord> <Yardanico> it always was that way :)
[19:52:20] <FromDiscord> <Gumber> oh well, I barley use sequences so....
[19:52:33] <FromDiscord> <Gumber> and yes I know it's the same for strings
[19:52:52] <FromDiscord> <Gumber> I guess I just forgot seqs had the same thing - I dunno man I'm always in C land
[19:52:56] <FromDiscord> <Gumber> or C++ land
[19:53:07] <FromDiscord> <Gumber> I rarely rely on Nim strings or sequences etc....
[19:53:21] <FromDiscord> <Gumber> but thank you for clarifying my error Yard 🙂
[19:54:34] <FromDiscord> <Gumber> sent a code paste, see https://play.nim-lang.org/#ix=3Aqr
[19:54:46] <FromDiscord> <Rika> !eval assert(@[1.0,1.0,1.0,1.0,1.0] == @[1.0,1.0,1.0,1.0,1.0],"wrong!")
[19:54:50] <NimBot> <no output>
[19:54:51] <FromDiscord> <Yardanico> yeah, it's specific to floats that it doesn't work
[19:54:53] <FromDiscord> <Gumber> right
[19:54:56] <FromDiscord> <Yardanico> @Rika different hardware
[19:54:59] <FromDiscord> <Yardanico> can yield different results
[19:55:03] <FromDiscord> <Rika> of course
[19:55:11] <FromDiscord> <Yardanico> !eval assert(@[1.0,1.0,1.0,1.0,1.0] == @[1.0,1.0,1.0,1.0,1.0],"wrong!")
[19:55:15] <NimBot> <no output>
[19:55:22] <FromDiscord> <Rika> i just sent that
[19:55:25] <FromDiscord> <Yardanico> yes
[19:55:29] <FromDiscord> <Gumber> !eval assert(@[1.0,1.0,1.0,1.0,1.0] == @[1.0,1.0,1.0,1.0,1.0],"wrong!")
[19:55:33] <NimBot> <no output>
[19:55:35] <FromDiscord> <Gumber> what hardware are we all on?
[19:55:36] <FromDiscord> <Gumber> oh weait
[19:55:37] <FromDiscord> <Gumber> lol
[19:55:39] <FromDiscord> <Gumber> it's all nimbot's hardware
[19:55:40] <FromDiscord> <Gumber> xD
[19:55:42] <FromDiscord> <Rika> xd
[19:55:47] <FromDiscord> <Gumber> god my brain sucks without my meds
[19:55:55] <FromDiscord> <Rika> why not take them
[19:55:57] <FromDiscord> <Gumber> trying not to take them every day because they're bad for you
[19:56:01] <FromDiscord> <Rika> huh okay
[19:56:03] <FromDiscord> <Gumber> being on speed every day isn't the greatest thing ever
[19:56:27] <FromDiscord> <Gumber> I'm trying to do 4x a week instead of 7x
[19:56:44] <FromDiscord> <Gumber> to avoid glaucoma, dementia, etc... later in life which stimulants put you at higher risk for
[19:56:57] <FromDiscord> <Gumber> anyway ot
[19:59:13] <FromDiscord> <Yandong Zhang> Today is my third of Nim learning/programming. I just felt that the grammar of Nim is too powerful. Thus, it may not be suitable for a team to use because everyone finally will customize their own grammar. With that said, it looks like Nim is the best tool for a small group or solo programming.
[20:00:40] <FromDiscord> <Rika> it can be suitable for a team once the proper linting tools pop up
[20:01:01] <FromDiscord> <Rika> that way you can lint for editing then lint back for committing
[20:01:21] <FromDiscord> <Rika> and there will be no preferred style issues
[20:06:59] <FromDiscord> <Yandong Zhang> @Rika\: Any lint recommendation? I did not go that far yet. 3x
[20:08:53] <FromDiscord> <Rika> not as of now, the linters are very basic as of now
[20:09:02] <FromDiscord> <Rika> and theres pm just two of them too
[20:09:14] <FromDiscord> <Rika> nimpretty and morepretty (which is just an extension of nimpretty)
[20:10:20] *** Joins: kobi7 (~k@82.166.168.241.fix.netvision.net.il)
[20:10:46] <kobi7> Hello everyone!
[20:11:11] <FromDiscord> <Rika> hello, whats up?
[20:11:46] <kobi7> good! I am seeking information about fidget the gui lib
[20:12:15] <kobi7> anybody has experience with it, here?
[20:13:03] <FromDiscord> <Rika> afaik its currently undermaintained because the author is busy, but thats just from what i hear
[20:13:16] <FromDiscord> <Rika> i havent actually confirmed it from the author themself...
[20:13:40] <kobi7> is treeform around sometime? maybe I should ask my question in the forum
[20:14:25] <FromDiscord> <Rika> he is sometimes but not as often nowadays as i remember
[20:14:31] <FromDiscord> <dom96> just ask your questions, treeform will respond eventually I'm sure
[20:14:43] <kobi7> thanks dom, so here goes
[20:14:52] <FromDiscord> <Rika> @treeform a question for you below
[20:15:15] <FromDiscord> <Rika> im not sure if he backreads so just in case...
[20:15:38] <kobi7> the dsl in fidget is basically templates of an id which is the name of the control, and a block of code that describes it and its procs
[20:16:22] <kobi7> the way to do a binding to a var, is mentioning that var, which is a global or in the higher scope.
[20:16:34] <FromDiscord> <Shoto> Probably a stupid question but if i wanted to make a plugin for this Python server software (https://github.com/Podrum/podrum-docs/blob/main/plugins/creating.rst) with Nimpy, how would i actually get the code to work?
[20:16:56] <kobi7> Now I am interested in reusing controls, so I want to pass the binding part (passing that variable to the dsl template)
[20:17:25] <FromDiscord> <Shoto> Would i have to wrap it up in a Python file or can i use the new Types system in Nimpy to emulate a class (i genuinely don't want to because OOP is meh but like, i can't see any other way around it)
[20:17:33] <kobi7> (or multiple vars)
[20:18:44] <kobi7> so that's the question, making a self contained widget/control. because from the tests and examples, I only see low level building it, which is fun but perhaps not so productive
[20:20:18] <kobi7> The gui scene in Nim is in general not very clear. Atleast wrt portable gui: I have tried Nigui and nimx a while ago, but they had very few controls. Maybe it's better to interface with python or something? 
[20:22:06] <FromDiscord> <Gumber> what GUI scene in any language is clear?
[20:22:07] <FromDiscord> <Shoto> If you're looking for a GUI library maybe check nimraylib_now? Iirc they have RayGUI
[20:22:10] <FromDiscord> <Gumber> (edit) "what ... GUI" 03added "cross platform"
[20:22:17] <kobi7> Oh, I spoke too soon, looking at available pkgs I see "spinner":Spinner is a companion library for the wonderful Fidget
[20:23:05] <FromDiscord> <Gumber> (edit) "what cross platform GUI scene in any ... language" 03added "compiled native"
[20:23:53] <kobi7> Gumber, well there are mature libraries like wx, fox toolkit, gtk, qt, iup, first that come to mind.
[20:24:06] <FromDiscord> <Gumber> Nim has bindings to wx
[20:24:11] <FromDiscord> <Gumber> I don't know what fox toolkit is
[20:24:13] <kobi7> of course i prefer the simpler solutions
[20:24:15] <FromDiscord> <Gumber> I think Nim has bindings to gtk too
[20:24:23] <FromDiscord> <Gumber> qt is not simple - but bindings are in the work
[20:24:27] <FromDiscord> <Gumber> and I wouldn't call that a clear picture lol
[20:24:43] <FromDiscord> <Gumber> (edit) "work" => "works I believe"
[20:25:04] <FromDiscord> <Gumber> also GUI requirements differ vastly between use cases
[20:25:12] <kobi7> a clear picture, I mean mature or "battle tested" as they say, with enough controls to make a non-trivial gui app
[20:25:24] <kobi7> today the android case is also important
[20:25:27] <FromDiscord> <Gumber> I mean you're free to wrap whatever C/C++ library you want
[20:25:32] <FromDiscord> <Gumber> well maybe to you 🙂
[20:25:40] <FromDiscord> <treeform> kobi7, about fidget, you can bind any var if you wrap your control in a function or a template.
[20:25:55] <kobi7> hi treeform
[20:26:27] <kobi7> oh, so simply to add another proc that wraps the declaring code?
[20:26:59] <FromDiscord> <treeform> in hn.nim app I pass ID, but you can pass anything: https://github.com/treeform/fidget/blob/master/examples/hn/hn.nim#L31
[20:27:14] <FromDiscord> <treeform> you can even pass a string and bind it
[20:27:23] <FromDiscord> <treeform> but it has to be a var string so that it can be modified in place
[20:28:43] <kobi7> cool, I understand now. Thanks!
[20:29:12] <kobi7> if you're here, what about themes? is there a mechanism that gets a json or a hashtable with a theme name and values?
[20:29:26] <FromDiscord> <treeform> for some thing like a toggle you might pass a `var bool` and modify it in the unclick handler
[20:29:28] <kobi7> (values for each component)
[20:30:02] <kobi7> OKay. Btw, are there more docs? couldn't find much
[20:30:02] <FromDiscord> <treeform> yeah at work where I use this lib, I have a file with common controls I use.
[20:30:09] <FromDiscord> <treeform> and they take the normal stuff in.
[20:30:20] <FromDiscord> <treeform> there isn't more docs sorry
[20:30:28] <FromDiscord> <treeform> fidget1 is on hold while I work on fidget2
[20:30:47] <kobi7> ah, will it have the same simplicity and dsl?
[20:31:06] <FromDiscord> <treeform> yes and no
[20:31:12] <FromDiscord> <treeform> its going to be different
[20:31:43] <kobi7> as long as you don't make a WPF out of it. the horror..
[20:31:54] <kobi7> :)
[20:32:10] <kobi7> your gui lib reminds me of rebol's 
[20:33:12] <FromDiscord> <treeform> rebol is very short though
[20:33:27] <FromDiscord> <treeform> rebol UI takes amazingly short amount of code
[20:33:37] <kobi7> yes, and quite primitive, but the same style
[20:34:27] <kobi7> I like your thinking, what you did with that. I think it's a fun way to program
[20:34:47] <FromDiscord> <treeform> I am glad you like it.
[20:37:14] <kobi7> so, spinner lib is the way forward for more controls?
[20:39:11] *** Joins: vicfred_ (~vicfred@user/vicfred)
[20:40:05] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[20:40:32] <FromDiscord> <enthus1ast> @treeform\: do we need figma to use fidget?
[20:40:45] <FromDiscord> <enthus1ast> or just for designing?
[20:41:30] <kobi7> it looks like the recommended way, according to the website, but you can use the dsl directly
[20:42:27] <FromDiscord> <enthus1ast> i must admit that it was a big no no for me the create an account on some website just to create guis on my machine
[20:42:51] *** Joins: supakeen_ (~user@python/site-packages/supakeen)
[20:43:57] <kobi7> I haven't tried figma yet, but the plugin is installed on the website. i mean, no local installation afaict
[20:45:17] <FromDiscord> <enthus1ast> thats a sign that it will be a locked garden soon
[20:46:59] <FromDiscord> <treeform> Yes the spinner library has the right idea. Bunch of functions to create controls. But really every place usually has custom buttons and controls anyways. You want to project your brand.
[20:47:07] <kobi7> i don't know, there is a free plan and an upgraded one for unlimited designs. I am not a designer so haven't yet used it, but it has a plugins section on the website, which on my account has Fidget Export
[20:47:12] <FromDiscord> <treeform> So you would have to create some thing like the spinner library
[20:47:36] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (*.net *.split)
[20:47:36] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[20:47:36] *** Quits: vicfred (~vicfred@user/vicfred) (*.net *.split)
[20:47:37] *** Quits: blackbeard420 (~blackbear@2600:3c03:e000:297:af:af:af:42) (*.net *.split)
[20:47:37] *** Quits: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (*.net *.split)
[20:47:37] *** Gustavo6046_ is now known as Gustavo6046
[20:48:34] <kobi7> hmm, not so good for code reuse. perhaps flexible theming support instead? like, maybe take inspiration from css
[20:48:59] <kobi7> or some variant of it
[20:49:08] <FromDiscord> <treeform> @enthus1ast I think its terrible that in most companies designers design the UI then most of their work is thrown a way for programmers to implement (draw the UI again) it in code.
[20:49:20] <FromDiscord> <treeform> My goal is to eliminate this waste.
[20:49:50] <FromDiscord> <treeform> We used to make 3d models in code, but now we use Blender, Maya and other programs.
[20:50:06] <FromDiscord> <treeform> We used to make sound in code (chip tunes etc..) but now we use Sound editing programs.
[20:50:14] <FromDiscord> <enthus1ast> yes, i do not have the bigger picture
[20:50:52] <FromDiscord> <enthus1ast> i thought figma was a gui library itself
[20:51:25] <FromDiscord> <treeform> Because UI is now sufficiently complex ... we have left the realm of simple buttons and boxes... we need a whole profession just to position and brand the controls.
[20:51:33] *** Quits: kinkinkijkin (~pch@66.49.131.33) (Remote host closed the connection)
[20:51:46] <FromDiscord> <treeform> Na Figma is just an Editor that Designers really like.
[20:51:52] *** Joins: kinkinkijkin (~pch@66.49.131.33)
[20:52:05] <FromDiscord> <treeform> Like "Adobe Photoshop" but for UI work.
[20:52:09] *** Joins: blackbeard420 (~blackbear@2600:3c03:e000:297:af:af:af:42)
[20:52:09] *** Joins: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[20:52:14] <FromDiscord> <treeform> Its really taking the design world by storm.
[20:52:20] <FromDiscord> <treeform> Every one is switching to it.
[20:52:40] <FromDiscord> <treeform> I have never seen a program take over a profession (UX design) this fast.
[20:53:46] <kobi7> treeform, so in Figma, can I simply pick a theme
[20:54:02] <kobi7> d control kit and use it? is it free to use?
[20:54:21] <FromDiscord> <treeform> So Figma has like a Github for UX designers
[20:54:42] <FromDiscord> <treeform> Its called "community"
[20:54:47] <FromDiscord> <treeform> https://www.figma.com/community/explore
[20:55:00] <FromDiscord> <treeform> You can go to UI kit section:
[20:55:01] <FromDiscord> <treeform> https://www.figma.com/community/ui_kits
[20:55:08] <FromDiscord> <treeform> and there are 1000s of UI kits to choose from
[20:55:14] <FromDiscord> <treeform> you can just pick one out now
[20:55:15] <FromDiscord> <treeform> and go with it
[20:55:26] <FromDiscord> <treeform> its free to use as community requires a single license
[20:55:54] <FromDiscord> <treeform> everything in the community is: https://creativecommons.org/licenses/by/4.0/
[20:55:59] <kobi7> wow very nice
[20:56:14] <FromDiscord> <treeform> its hard of hard to switch between them
[20:56:18] <FromDiscord> <treeform> they don't use common naming theme
[20:56:22] <FromDiscord> <treeform> so its not like a theme you pick
[20:56:34] <FromDiscord> <treeform> once you pick one and use the names you are kind of stuck with it
[20:56:53] <kobi7> so after export, I only need to modify the generated code for the bindings?
[20:56:58] <FromDiscord> <treeform> Its more like picking theme from theme forest or some thing
[20:57:42] <kobi7> it does make it simpler for non-designers to do an indie gui work
[20:57:56] <FromDiscord> <enthus1ast> thank you for the insight @treeform very interesting
[20:57:58] <FromDiscord> <treeform> only if it works
[20:57:59] <kobi7> work = app
[20:58:43] <FromDiscord> <treeform> How I see it is this, say I am a programmer that knows nothing about the complex and rich field of UX. When I make UIs they look crappy.
[20:58:59] *** supakeen_ is now known as supakeen
[20:59:09] <FromDiscord> <treeform> I go to the figma community, find a theme/app that kind of looks like what I want mine to look like.
[20:59:36] <FromDiscord> <treeform> Copy the file down, follow the license to attribute it... maybe clean it up for my needs.
[21:00:06] <FromDiscord> <treeform> Make the code for my app, but use the visuals from the UX designers so that my app looks "good".
[21:00:21] <FromDiscord> <treeform> No more programmer art and ui from me.
[21:00:40] <kobi7> sounds like an awesome deal to me
[21:00:42] <FromDiscord> <treeform> Even though I am not good at UX, I get good UX for my apps, because I just copy.
[21:01:33] <kobi7> when I need more controls though, eiher make it by hand or get from another such kit, and then have to modify all the colors etc to look similar, right?
[21:01:46] <FromDiscord> <treeform> yeah
[21:02:22] <kobi7> awesome, this changes the usual story, by a lot
[21:02:23] <FromDiscord> <treeform> If you have $ and are a company, you might even reach out to the person that made the original controls and do a deal 🙂
[21:02:44] <FromDiscord> <treeform> what kind of app thing do you want to make?
[21:02:58] <kobi7> I'd feel like I'm ripping off and want to give back to that designer
[21:03:09] <FromDiscord> <treeform> well its just like github in a way
[21:03:25] <FromDiscord> <treeform> when you use fidget are you ripping me off?
[21:04:04] <kobi7> no, but if i had $$ i'd probably donate some as either appreciation or support for dev
[21:04:12] <FromDiscord> <treeform> UX industry finally discovered the magic of open source.
[21:06:27] <kobi7> I am figuring out if I can make a side income, a work from home kind of thing, in the age of corona limitations. for now, simple frontends, an app that does one thing, and be portable to smart phone (android) and the 3 large oses (linux, mac, windows)
[21:07:03] <FromDiscord> <treeform> If you give me the type of an app you want I might find a theme that will fit.
[21:08:38] <kobi7> I think it will look like a batch converter type of app. u know, like audio convert, or image resize, audio normalize, markup to doc, all these conversions, probably useful to someone :-)
[21:09:35] <kobi7> though i haven't done android development before.
[21:09:57] <kobi7> need to see what UI changes are required, etc. but step by step...
[21:10:42] <kobi7> In any case, after these answers I feel more hopeful
[21:11:09] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[21:12:48] *** Joins: MightyJoe (~joe@201.150.5.24)
[21:13:00] *** Joins: skrzyp1 (~skrzyp@skrzyp.net)
[21:13:54] *** Joins: mal``` (~mal``@static.38.6.217.95.clients.your-server.de)
[21:14:29] *** Quits: cyraxjoe (~joe@201.150.5.24) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: skrzyp (~skrzyp@skrzyp.net) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (Ping timeout: 265 seconds)
[21:15:24] *** Joins: xet7 (~xet7@user/xet7)
[21:15:31] *** Quits: asd (~noname@user/asd) (Ping timeout: 265 seconds)
[21:15:45] *** Joins: asd (~noname@user/asd)
[21:18:55] <kobi7> really nice. Thanks treeform, enthusiast. i'm off.
[21:19:02] *** Quits: kobi7 (~k@82.166.168.241.fix.netvision.net.il) (Quit: Leaving)
[21:30:21] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/E06
[21:31:48] <FromDiscord> <haxscramper> pixie-python just imports generated bindings, without any extra setup, but this does not work for my case (or maybe I missed something)
[21:31:49] <FromDiscord> <treeform> We are fixing that like right now: hardcoded "pixie"
[21:32:24] <FromDiscord> <haxscramper> This requries more than a single fix in the file template?
[21:32:45] <FromDiscord> <haxscramper> I just fixed this, probably missed some other part that had to be edited
[21:32:53] <FromDiscord> <treeform> https://github.com/treeform/genny/pull/26/files
[21:33:22] <FromDiscord> <treeform> I just merged that PR in
[21:33:56] <FromDiscord> <treeform> are you on mac or windows?
[21:34:12] <FromDiscord> <haxscramper> linux
[21:34:16] <FromDiscord> <treeform> you need to have the dll were you .py file is
[21:34:18] <FromDiscord> <haxscramper> and no, the issue still persists
[21:34:21] <FromDiscord> <treeform> or .so in your case
[21:34:34] <FromDiscord> <treeform> `dir = os.path.dirname(sys.modules["test"].file)`
[21:35:01] *** Joins: KainAlive (~KainAlive@ip5f5bd0bf.dynamic.kabel-deutschland.de)
[21:35:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[21:35:19] <FromDiscord> <treeform> what is the actual error? It looks like your traceback is cut off
[21:36:10] <FromDiscord> <treeform> genny will generate two files .py file and the .so file for your platform.
[21:36:18] <FromDiscord> <treeform> both need to be present next to each other
[21:36:30] <FromDiscord> <haxscramper> https://github.com/treeform/genny/blob/235641dcbecface46d3d472e2dbd08dd231d72b9/src/genny/languages/python.nim#L451 um this is still hardcoded?
[21:36:32] <FromDiscord> <treeform> you might also have to add init.py when going into a folder
[21:36:52] <FromDiscord> <haxscramper> In reply to @treeform "what is the actual": this is the actuall error
[21:37:10] <FromDiscord> <haxscramper> anyway, I will look into more details about all unwritten assumptions python makes
[21:37:36] <FromDiscord> <haxscramper> I just thought it was some me-genny interaction error
[21:38:32] <FromDiscord> <treeform> Your Traceback does not appear to be complete
[21:38:44] <FromDiscord> <treeform> it needs to say what the error was on the last line
[21:38:51] <FromDiscord> <haxscramper> ah,ffs
[21:39:01] <FromDiscord> <haxscramper> anyway,
[21:39:04] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3Ar2
[21:39:38] <FromDiscord> <treeform> ok fixin in real time: https://github.com/treeform/genny/pull/27/files
[21:39:42] <FromDiscord> <treeform> pull and run
[21:40:35] *** Quits: KainAlive (~KainAlive@ip5f5bd0bf.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[21:43:08] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3Ar3
[21:43:28] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3Ar4
[21:43:58] <FromDiscord> <haxscramper> (edit) "https://play.nim-lang.org/#ix=3Ar3" => "https://play.nim-lang.org/#ix=3Ar5"
[21:45:33] <FromDiscord> <cabboose> If I try to use enums as bitfields I get VM does not support cast from tySet to tyInt32
[21:47:34] <FromDiscord> <guzba> sent a code paste, see https://play.nim-lang.org/#ix=3Ar7
[21:48:50] <FromDiscord> <guzba> you'll also need to `pip install .` each time the python changes as i am not aware of a `nimble develop` equiv for python (though there prob is one)
[21:49:01] <FromDiscord> <guzba> (edit) "you'll also need to `pip install .` each time the python changes ... as" 03added "in the python dir"
[21:50:55] <FromDiscord> <haxscramper> alright, seems like I'm here for quite some time until I try to figure out all of this
[21:51:06] <FromDiscord> <haxscramper> because my python experience is basically non-existent
[21:51:15] <FromDiscord> <treeform> if you have the test script in the same dir as your lib (not ideal)
[21:51:16] <FromDiscord> <treeform> it should work
[21:51:28] <FromDiscord> <haxscramper> I do have this, but it doesn't work
[21:51:48] <FromDiscord> <haxscramper> I showed my directory structure in the last question
[21:52:54] <FromDiscord> <guzba> In reply to @haxscramper "I do have this,": the python set up stuff is annoying to get right, but it is a one-time battle. I suggest matching the pixie-python repo structure as a shortcut
[21:52:57] <FromDiscord> <treeform> hmm sys.modules["genny_main"] might be breaking it
[21:53:03] <FromDiscord> <guzba> (edit) "In reply to @haxscramper "I do have this,": the python set up stuff is annoying to get right, but it is a one-time battle. I suggest matching the pixie-python repo structure as a shortcut ... " 03added "https://github.com/treeform/pixie-python"
[21:54:10] <FromDiscord> <guzba> you will need to move the generated python out of the nim area into the python directory structure. i do not recommend trying to intermingle
[21:54:53] <FromDiscord> <guzba> sys.modules expects a pip "genny_main" to be located somewhere, which requires the setup.py and `pip install .` on the python repo
[21:55:05] <FromDiscord> <guzba> (edit) "the" => "your"
[21:58:49] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3Arb
[21:58:56] <FromDiscord> <haxscramper> In the end I was planning to take a look at implementing C++ codegen anyway
[22:02:11] <FromDiscord> <treeform> at one point it worked simpler, but python packages require a more complex apporach
[22:02:21] <FromDiscord> <treeform> not our fault 🙂
[22:03:13] <FromDiscord> <Gumber> Python is the pits
[22:03:39] <FromDiscord> <Gumber>  https://media.discordapp.net/attachments/371759389889003532/893203955037900800/python_environment.png
[22:03:59] <FromDiscord> <enthus1ast> thanks to this ^
[22:04:03] <FromDiscord> <enthus1ast> i found nim
[22:07:57] <FromDiscord> <haxscramper> I mean python is simple and easy to learn language
[22:08:11] <FromDiscord> <haxscramper> not their fault they have 234123123 different ways to import things
[22:08:16] *** Joins: neurocyte0132 (~neurocyte@user/neurocyte)
[22:08:57] <FromDiscord> <haxscramper> I've spent like 10 minutes trying to figure out why `from generated.test import ` was failing, because I thought I messed up relative imports
[22:09:16] <FromDiscord> <haxscramper> and everything I found were like some random SO answers with ten different code pieces
[22:09:22] <FromDiscord> <haxscramper> and mile-long articles
[22:09:30] <FromDiscord> <haxscramper> that can be summarized on one like
[22:09:53] <FromDiscord> <haxscramper> "hello folks, now we are going to learn how to import shit.py into your crap_pile project"
[22:10:25] <FromDiscord> <haxscramper> wall of text
[22:10:30] <FromDiscord> <enthus1ast> i cannot remember the nitty gritty of module creation in python, but back then i was not able to create a nice (importable) module of my (crap) code back then
[22:10:50] <FromDiscord> <enthus1ast> i had to rewrite large parts of the code
[22:10:57] <FromDiscord> <enthus1ast> then i found nim \:)
[22:13:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:18:57] <FromDiscord> <treeform> @haxscramper I am looking forward to what you do with C++
[22:48:35] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[23:01:40] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3Aru
[23:03:12] <FromDiscord> <haxscramper> I'm trying to figure out where some generated source code comes from, and it would certainly help someone to try to contribute to improved wrapper generators for a language
[23:04:17] *** skrzyp1 is now known as skrzyp
[23:10:32] <FromDiscord> <treeform> I don't know how helpful that will be.
[23:10:53] <FromDiscord> <treeform> We already port the doc comments, its pretty easy to figure out where the stuff came from.
[23:11:28] <FromDiscord> <haxscramper> I've spent last half an hour trying to trace back where `def get_data` exactly comes from
[23:11:44] <FromDiscord> <haxscramper> of course I'm new to the code base and all, so
[23:11:53] <FromDiscord> <treeform> genny_main_obj_get_data
[23:11:55] <FromDiscord> <haxscramper> well, I just asked, if you don't think it is useful I wont
[23:12:00] <FromDiscord> <treeform> it somes from MainObj.data
[23:12:15] <FromDiscord> <haxscramper> In reply to @treeform "genny_main_obj_get_data": no, I was talkint about `python/exportProcPy`
[23:12:16] <FromDiscord> <treeform> (edit) "somes" => "comes"
[23:12:23] <FromDiscord> <haxscramper> line 138 and previous
[23:12:44] <FromDiscord> <haxscramper> `genny/src/languages/python.exportProcPy`
[23:13:00] <FromDiscord> <treeform> but most procs come from exportProcPy ?
[23:13:20] <FromDiscord> <treeform> most procs would have `# generated from python.nim:same line`
[23:13:25] <FromDiscord> <haxscramper> i'm not really pushing for it, I just asked
[23:13:39] <FromDiscord> <haxscramper> no means no, I will just keep debugging echos to my tests
[23:13:49] <FromDiscord> <treeform> debuging echos are fine
[23:14:26] <FromDiscord> <treeform> maybe there is value to some sort of verbose output flag
[23:14:35] <FromDiscord> <treeform> but I would have to see it
[23:14:46] <FromDiscord> <treeform> I would not want to ship a file to people with those in
[23:14:49] <FromDiscord> <haxscramper> I was talking about something like this https://media.discordapp.net/attachments/371759389889003532/893221864678236180/unknown.png
[23:15:10] <FromDiscord> <treeform> that could be helpful yes
[23:15:28] <FromDiscord> <treeform> if they can be turned off for final build
[23:15:44] <FromDiscord> <treeform> a python programmer looking at this
[23:15:48] <FromDiscord> <treeform> would have no clue about nim stuff
[23:16:06] <FromDiscord> <treeform> when they just want to use the library
[23:16:34] <FromDiscord> <treeform> brb
[23:18:30] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3Arx
[23:19:04] <FromDiscord> <haxscramper> (edit) "https://play.nim-lang.org/#ix=3Arx" => "https://play.nim-lang.org/#ix=3ArB"
[23:19:57] <FromDiscord> <haxscramper> (edit) "https://play.nim-lang.org/#ix=3ArB" => "https://play.nim-lang.org/#ix=3ArF"
[23:24:30] <FromDiscord> <Shoto> I'm curious, has anyone implemented a JRE in Nim?
[23:34:22] *** Quits: jfinkhaeuser (~jfinkhaeu@user/jfinkhaeuser) (Ping timeout: 265 seconds)
[23:34:53] *** Quits: skrzyp (~skrzyp@skrzyp.net) (Ping timeout: 264 seconds)
[23:34:57] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (Ping timeout: 268 seconds)
[23:35:43] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[23:36:49] *** Joins: skrzyp (~skrzyp@skrzyp.net)
[23:36:59] *** Joins: neurocyte01326 (~neurocyte@212.232.88.198)
[23:37:00] *** Quits: neurocyte01326 (~neurocyte@212.232.88.198) (Changing host)
[23:37:00] *** Joins: neurocyte01326 (~neurocyte@user/neurocyte)
[23:38:19] *** Quits: neurocyte0132 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[23:38:19] *** neurocyte01326 is now known as neurocyte0132
[23:38:40] <FromDiscord> <Yardanico> no
[23:38:49] <FromDiscord> <Yardanico> implementing something like that takes a lot of effort
[23:39:00] <FromDiscord> <Yardanico> In reply to @Shoto Todoroki "I'm curious, has anyone": maybe you just want to interface with Java code?
[23:39:06] <FromDiscord> <Yardanico> https://github.com/yglukhov/jnim
[23:39:09] <nrds> <12R2D299> 4GitHub: 7"Nim - Java bridge"
[23:39:37] *** Joins: jfinkhaeuser (~jfinkhaeu@user/jfinkhaeuser)
[23:41:26] <FromDiscord> <Shoto> Nah was just legit curious
[23:42:02] <FromDiscord> <SivadNai> Does anyone use winim a lot? I was trying to adapt one of the examples, but despite what I understood worked from reading the API, i sat back and cried tears as an error appeared onsrceen https://play.nim-lang.org/#ix=3ArL
[23:57:14] <Mister_Magister> how do you initialize array filling it iwth one value?
[23:58:27] <FromDiscord> <haxscramper> You can fill it via loop if you are talkint about `array[N, T]`
[23:58:44] <Mister_Magister> ye but loop seems like overdoing it
[23:58:49] <Mister_Magister> isn't there some fancy dandy wy?
[23:58:51] <Mister_Magister> way*
[23:59:07] <FromDiscord> <haxscramper> `for it in mitems(arr): it = value`
[23:59:07] <nrds> <06Prestige99> like init with ints all set to 5 for example?
[23:59:13] <FromDiscord> <haxscramper> not really fancy IMO
[23:59:28] <Mister_Magister> for example
[23:59:29] <FromDiscord> <haxscramper> There is `newSeqWith()`, but that is for `seq[T]`
[23:59:55] <FromDiscord> <haxscramper> `var arr: array[5, int]; for i in mitems(arr): i = 5; echo arr`
