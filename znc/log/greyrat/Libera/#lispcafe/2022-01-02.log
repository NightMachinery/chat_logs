[00:04:12] <shka> yup
[00:04:52] <shka> keep your language simple to understand, because complex language will multiply complexity of all applications 
[00:05:03] <shka> that's actually why i like dynamic typing
[00:05:05] <Aurora_v_kosmose> I suspect it's harder to implement lifetimes & all the checking Rust does than to implement a pauseless GC following the currently published papers.
[00:05:16] <shka> it removes layer of complexity 
[00:05:33] <Aurora_v_kosmose> So it's both disadvantageous from a language implementation and a language use pov.
[00:08:41] <White_Flame> all we need to do is solve the halting problem, and the collector can always know what to free \:D/
[00:09:19] <Aurora_v_kosmose> Of course
[00:09:21] <Aurora_v_kosmose> :p
[00:09:46] <White_Flame> but I guess the rust approach is to just keep constraining the language until it's tractable
[00:13:53] <hayley> Aurora_v_kosmose: Might help that some people e.g Cliff Click left Sun. IIRC he said in a presentation (when he worked at Azul) that someone should have been fired at Sun for not putting read barriers in their new hardware.
[00:14:08] <kakuhen> my biggest problem with rust is how semantics of safe code will change in different profiles, because to me it's not as clear cut as (optimize '(safety [0-3])) yet it's equally opaque as that
[00:14:43] <pl> Aurora_v_kosmose: it gets easier of you don't intentionally hobble yourself about it 
[00:15:04] <White_Flame> and just like haskell and other constrained languages, people will build "interpreters" for their dynamic stuff on top, resurrecting weaknesses that are above the languages' protections
[00:15:29] <hayley> Arc<RefCell<T>>
[00:15:44] <pl> A big implementation complexity bit is that Rust insists it has to do it all statically upfront and doesn't accept GC
[00:15:57] <hayley> ...and we already know how well that works.
[00:16:56] <pl> A crab lover recently learnt how much it thrashes caches 
[00:17:12] <hayley> Right.
[00:17:13] <Aurora_v_kosmose> oh?
[00:17:26] <pl> Recent post on HN 
[00:17:37] <hayley> https://pkolaczk.github.io/server-slower-than-a-laptop/
[00:17:38] -ixelp- How a Single Line of Code Made a 24-core Server Slower Than a Laptop | Piotr Kołaczkowski
[00:18:16] <pl> Might work faster on latest Z or POWER10 
[00:18:35] <pl> But probably still weighted by crosstalk 
[00:19:07] <kakuhen> >Don’t assume that a single assembly instruction cannot become a performance problem.
[00:19:07] <kakuhen> i dont know shit about computers, but im sure this has always been true since forever
[00:19:24] <kakuhen> do people not remember how costly division was in the 90s
[00:20:48] <kakuhen> look at gcd algorithm implementations in C from the 90s and earlier and they almost all avoid use of division for speed
[00:21:18] <White_Flame> and it's a big reason that bresenham existed
[00:21:29] <White_Flame> *the bresenham algo
[00:23:59] <hayley> https://www.youtube.com/watch?v=9Uje-HmeT6I
[00:24:00] -ixelp- Thela Hun Ginjeet - YouTube
[00:25:14] <selwyn> i remember point-in-polygon algorithms that avoided division were prized
[00:26:02] <White_Flame> and of course CPUs without a division instruction at all were still common
[00:26:12] <shka> don't assume anything
[00:26:20] <shka> measure everything
[00:26:54] <selwyn> as a 14 year old the 'arccos algorithm' was the only one i could understand so i implemented that
[00:27:03] <selwyn> but it is by some way the most expensive algorithm
[00:28:35] <White_Flame> shka: we did.  cycle counting by hand ;)
[00:29:31] <selwyn> https://www.youtube.com/watch?v=SPvJ-M-hU5w
[00:29:32] -ixelp- Survival Guide to the Biblical Apocalypse - YouTube
[00:30:16] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[00:36:29] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:36:41] <shka> White_Flame: very smart, precise, and professional, you bring tear to my eye
[00:37:01] <White_Flame> it used to all be deterministic
[00:37:03] <shka> that's what everyone should aspire to do 
[00:37:36] <shka> selwyn: so not a great expectations for 2022? :P
[00:39:58] <White_Flame> but I guess cycle counting is more proof than measurement, to be technical
[00:40:35] <shka> also, it is not like CPU is doing just a singular operation at a time
[00:40:38] <White_Flame> and code wasn't that reused across platforms, for this class of code (graphical rendering)
[00:40:43] <White_Flame> yes it was
[00:41:02] <shka> superscalar CPUs are a little bit trick in that regard
[00:41:11] <White_Flame> the 6502 in particular even was "famous" for doing the most minimal of 1-deep pipelining in the next fetch
[00:41:12] <shka> oh, so it was something embedded?
[00:41:21] <White_Flame> well yeah, talking about 90s and earlier code
[00:41:29] <shka> makes sense 
[00:41:45] <shka> today it is trickier
[00:43:13] <shka> that's why i advocate "measure everything"
[00:43:17] <White_Flame> or rather s/trickier/impossible/
[00:43:19] <shka> "assume nothing"
[00:44:38] <shka> I really wish that world would rather pick "compiler generates optimized code, cpu simply executes code and that's it" route
[00:44:45] <White_Flame> I think gilberth said he had some stuff where his interpreter was faster than compiler, probably due to cache effects
[00:44:46] <shka> but it is what it is
[00:45:15] <White_Flame> I agree, and it also means not distributing compiled binaries
[00:46:09] <shka> well, ideally, imho, OS itself should provide JIT env
[00:46:23] <shka> but it is not going to happen
[00:46:53] * hayley uploaded an image: (120KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/QwgQBWJRPdmINSHjPMDqEcYe/i-told-you-about-locks.jpeg >
[00:47:15] <shka> still, it would make much more sense 
[00:47:32] <shka> and everything could be optimized for the hardware it actually runs on 
[00:47:34] <White_Flame> shka: and if it did, there could even be different languages of "bytecode" that could be distributed, depending on language or whatever
[00:47:46] <White_Flame> *depending on source language
[00:48:03] <shka> sure
[00:49:08] <shka> also, it would be possible, in theory at least, to optimize depending on the dynamic analysis 
[00:49:51] <shka> but regardless, route not taken
[00:49:51] <White_Flame> IBM TIMI, Mill CPU, there's a few smatterings of the idea out there
[00:50:19] <shka> yaeh, Mill CPU is kinda a vaporware at this point...
[00:50:24] <White_Flame> yeah :(
[00:50:52] <shka> do you know about transputers?
[00:50:57] <White_Flame> yep
[00:51:12] <White_Flame> which language did they support again, ML?
[00:51:58] <White_Flame> ah, Occam
[00:52:03] <shka> Occam, which had CSP thing going on
[00:52:41] <shka> but Transputer hardware and software is something in spirit that should have won in my opinion
[00:54:01] <White_Flame> maybe.  It all has to do with the speed of the links
[00:54:04] <White_Flame> there have been so many many-core systems out there based on streaming data around, and it mostly only really works for treating the whole chip as a big single pipeline
[00:54:32] <White_Flame> for general purpose computing, fast (and often shared) access to lots of RAM direct from the CPU is important, IMO
[00:54:41] <White_Flame> *from each CPU core
[00:54:59] <White_Flame> see also ps3 cell SPU memory
[00:55:42] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:85ca:129c:de7a:29e4) (Ping timeout: 268 seconds)
[01:02:41] <shka> White_Flame: sure, but recent ideas coming from the AMD look like a way to the future
[01:03:04] <shka> chiplets, active interposer, fabric 
[01:03:38] <shka> manycores is going to take over eventually 
[01:03:57] <White_Flame> and MASSIVE cache
[01:04:06] <White_Flame> (which is a good thing)
[01:04:07] <shka> i mean, yeah
[01:04:36] <White_Flame> in the next couple of gens, the top end chip is going to get close to 1GB (!)
[01:04:43] <shka> silicon CPU, silicon memory, makes sense to simply put it all on single die
[01:05:17] <White_Flame> absolutely, it's something I've wanted for a very long time.  Venray Technologies was a promising idea,but had a poor business model
[01:05:20] <shka> many cores and integrated memory is the future
[01:05:23] <White_Flame> and even then it wasn't a new idea
[01:05:38] <White_Flame> right, but those cores are directly connected to the cache/memory hierarchy
[01:05:51] <White_Flame> instead of having comm pipes between them
[01:05:54] <shka> for now
[01:06:04] <White_Flame> right, it won't scale indefinitely
[01:06:11] * hayley uploaded an image: (268KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/CEGuVxhdaTfMNyKeAzpxBThw/book-cover-review.png >
[01:06:18] <White_Flame> and we still don't have languages that allow the machine to wrangle that (to return to a prior point)
[01:06:46] <White_Flame> but at least the hardware progress doesn't seem to be slowing down
[01:07:10] <shka> i mean, it is natural step to move from "pipeline to dedicated memory chip" to "pipeline to another memory/CPU integrated chip"
[01:07:32] <White_Flame> "beowulf on a chip" to grab a meme from decades past
[01:07:33] <shka> it is all pipelines
[01:07:46] <shka> they could be just different 
[01:07:53] <epony> transistors
[01:08:24] <White_Flame> and of course, we've had technically NUMA systems even on desktop for decades already, too
[01:08:39] <White_Flame> most multi-socket systems
[01:08:50] <epony> which are not found on desktops ;-)
[01:08:53] <shka> so your memory hierarchy would be: local core memory -> other cores memory 
[01:09:20] <shka> while now it is local core cache -> RAM
[01:09:25] <shka> again, not that different
[01:09:36] <shka> well, at the same time very different
[01:09:38] <shka> but doable 
[01:10:09] <White_Flame> and of course NVRAM, SSD, could be unified in there, too
[01:10:24] <White_Flame> especially when the caches get really huge
[01:10:41] <shka> yeah, it could, but i feel like file systems are really not going away
[01:10:52] <epony> periphery and memory buses differ
[01:10:52] <shka> for better or worse 
[01:11:16] <White_Flame> an actual "save" will always be needed
[01:11:29] <shka> maybe apple will do something in that vain on iOS
[01:11:31] <shka> who knows
[01:12:03] <White_Flame> I"m curious if they're going to scale their M1 design to actual multiple chips/sockets, or just keep it all to 1
[01:12:16] <hayley> There are already seperate commit actions in databases and version control systems.
[01:12:20] <White_Flame> especially for actual "mac pro" style systems
[01:12:55] <epony> check out how many multi-CPU laptops are sold yearly (hint: not much)
[01:13:06] <White_Flame> hayley: right, but externalizing a file such that you can send it to another machine is part of it, too
[01:14:24] <White_Flame> it's very interesting working with stacks of undoable command objects and checkpoints
[01:15:07] <shka> i honestly suspect apple to taking bite of the cloud market now
[01:15:24] <White_Flame> I'm so outside all that sort of usage, that I really have no opinion
[01:15:50] <epony> not likely, they don't own any fab
[01:16:05] <shka> there is no way in hell that they could expand further on the already established markets, m1 chip is power efficient, why not invest into data centers?
[01:16:30] <White_Flame> it'll be interesting to see how efficient it actually is, as a CPU core
[01:16:40] <epony> Apple is not a chip vendor, nor a hardware maker
[01:16:45] <White_Flame> much of their speed is due to heavy integration with all the custom accelerators
[01:16:50] <shka> unless they want to produce wider range of user products
[01:17:03] <shka> for instance that "apple car" meme could be actually true
[01:17:04] <White_Flame> (in a general application performance sense for video and such)
[01:17:21] <White_Flame> yeah, that meme's been around for how long? :)
[01:17:24] <epony> consumer electronics as minimum products for their own services which they lease from other server provider companies (resale)
[01:17:30] <shka> White_Flame: they also have more execution units 
[01:17:39] <White_Flame> yeah, it's impressively wide
[01:17:51] <epony> not likely, Apple does not have a factory
[01:17:54] <shka> i have no idea for how long, but it makes little sense to me
[01:18:11] <shka> still, it could happen if apple would push for it 
[01:18:22] <epony> more like in dash infotainment
[01:18:33] <shka> they have enough funds for that, and it would be uncorrelated stream of income if it would work out
[01:18:36] <White_Flame> I think musk might have already captured the apple fanboy car desire
[01:18:45] <shka> but Tesla STILL can't bring in the profits 
[01:19:21] <shka> so i think that Apple would rather stray in the computing adjacent territory  
[01:19:35] <shka> and perhaps would take a page out of the MS book
[01:19:53] <White_Flame> what even is the MS book at this point? :-P
[01:20:22] <shka> well, they have everything to a some degree 
[01:20:53] <shka> office applications, windows, azure cloud and services...
[01:21:08] <shka> it is crazy to think about it, but MS does not even need windows anymore
[01:21:26] <shka> oh, they also have xbox, and gamepass...
[01:21:34] <shka> so my point is: they are diversified 
[01:21:47] <shka> while apple leans on the iphone hardcore 
[01:22:07] <epony> both MSFT and AAPL and GOOG and AMZN are not HW vendords, they just add software to a low quality consumer product of the "services" market
[01:22:40] <shka> and i get that iphone is insanely profitable, but it is possible to suddenly fell from grace 
[01:23:25] <shka> and you can't actually sell more iphones then they already do 
[01:23:33] <shka> so they bumped price up
[01:23:50] <White_Flame> the cult/fashion status dues keep people buying stuff, though, as opposed to me with my 6-year old PC that has no issues running anything
[01:23:54] <shka> and also bumped prices up on all those iphone accessories 
[01:23:54] <White_Flame> *does
[01:25:01] <shka> yeah, not a great strategy to be so reliant on a single revenue stream if you ask me
[01:25:06] <shka> so m1 is smart move 
[01:25:14] <shka> make more out of it
[01:25:29] <White_Flame> what is their revenue stream, though?  iphone hardware sales, app store, apple TV goings on, icloud upsells, etc?
[01:26:13] <shka> https://bcf-invest.com/the-apple-paradox/
[01:26:14] -ixelp- The Apple paradox - Boris Chovnik Financials
[01:27:11] <shka> a lot of iphone, some services
[01:28:26] <shka> https://www.macrumors.com/2021/07/27/apple-3q-2021-earnings/
[01:28:27] -ixelp- Apple Reports 3Q 2021 Results: $21.7B Profit on $81.4B Revenue, New June Quarter Records - MacRumors
[01:28:36] <shka> iphone is shrinking apparently, which is a good thing
[01:28:59] <Aurora_v_kosmose> Unaffordable luxury during an impending/ongoing economic slump.
[01:29:33] <shka> but you know what?
[01:29:36] <epony> consumption
[01:29:40] <White_Flame> I don't know if "iphone sales" includes app store sales, as the latter isn't split out anywhere
[01:29:41] <shka> those services include app store 
[01:29:47] <White_Flame> ah, k
[01:29:57] <epony> there are suckers for all kinds of soup
[01:30:01] <shka> so it may not be that nice as it looks
[01:30:18] <shka> they may be selling more expensive apps or something
[01:30:32] <shka> and if iphone dies out, so is the app store 
[01:30:37] <shka> well, excluding mac
[01:31:05] <epony> at some point they'll just stop adding the cellular modems
[01:31:10] <MichaelRaskin> App Store might even be a bigger risk right now…
[01:31:24] <shka> MichaelRaskin: you think so?
[01:31:25] <White_Flame> yeah, legal challenges and such
[01:31:30] <Aurora_v_kosmose> epony: lol
[01:31:34] <epony> so.. they'll be making lamp posts
[01:31:39] <MichaelRaskin> Because given the starting moves in S.Korea / EU, their 30% cut might be under pressure
[01:31:49] <shka> i see
[01:32:12] <shka> well, it is rather late here, so i will be going to bed now
[01:32:25] <shka> it was a pleasure to talk with you all 
[01:32:26] <epony> Intel already made very powerful direct on chip thousands of clients supporting microwave wireless chips for street facilities.
[01:32:33] <shka> good night!
[01:33:09] <epony> Apple is behind.. a lot (always has been)
[01:36:15] <White_Flame> hasta
[01:39:29] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 268 seconds)
[01:40:30] <epony> https://en.wikipedia.org/wiki/Template:Major_OEMs
[01:41:47] <epony> https://en.wikipedia.org/wiki/Original_equipment_manufacturer#Computer_software
[01:42:26] <epony> https://en.wikipedia.org/wiki/Electronics_manufacturing_services#Notable_companies
[01:43:12] <epony> https://en.wikipedia.org/wiki/Laptop#Manufacturers
[01:44:07] <epony> https://en.wikipedia.org/wiki/Market_share_of_personal_computer_vendors#Top_vendors_market_share_(2020)
[01:44:47] <epony> https://en.wikipedia.org/wiki/List_of_laptop_brands_and_manufacturers#Original_design_manufacturers_(ODMs)
[01:46:45] <epony> PC (x86) 92% vs non-PC (armple) 8%
[01:48:25] <epony> https://en.wikipedia.org/wiki/List_of_best-selling_mobile_phones#2020_2
[01:48:51] <epony> Android 85% vs iPhone 15%
[01:54:03] <kakuhen> <White_Flame> "the cult/fashion status dues..." <- many of my friends are still rocking their 2012-2014 macbook pros
[01:54:17] <epony> https://en.wikipedia.org/wiki/List_of_semiconductor_fabrication_plants search for Apple (you'd be surprised it goes through TSMC for chip productions)
[01:54:27] <kakuhen> its funny because everyone's raving about two mostly useless ports coming back to macbooks meanwhile my friends have always had them, and more
[01:54:51] <White_Flame> yeah, apple did go backwards a few times
[01:54:51] <kakuhen> so getting a new macbook is still a downgrade for them, but just not as major as a year ago
[01:55:36] <epony> https://en.wikipedia.org/wiki/TSMC#Sales_and_market_trends
[01:55:49] <White_Flame> and the cult section tends to go with "Yeah, it's a good thing they removed that!" anyway
[01:56:11] <kakuhen> yes i can predict what apple fanboys will say after having read enough macrumors comments
[01:56:31] <epony> there may be more fangirls than fanboys
[01:56:42] <epony> "fashion" / "paint"
[01:57:10] <kakuhen> i cant/dont want to get an apple silicon macbook because CCL doesnt support it yet and intuition tells me buying 1st generation of anything is a bad idea
[01:57:16] <epony> which is funny since the smartphones are fanless
[01:57:22] <kakuhen> the first intel macbooks became obsolete in like two years
[01:57:27] <kakuhen> they were putting Core Solos in them iirc
[01:57:51] <White_Flame> yeah, we have a m1 mini in the office, not sure how long it will be legimately useful
[01:58:56] <White_Flame> we hit some big problems with the cl ssl libs and the apple security model. I don't think it was SBCL's fault
[01:58:59] <kakuhen> it'll probably last long, but i also expect it to be leagues behind the M2 or whatever the name of the new processors will be
[01:59:01] <epony> "just keep buying"  --sellers
[01:59:08] <White_Flame> right
[01:59:27] <White_Flame> max/pro are already go a lot further
[01:59:34] <White_Flame> -are
[01:59:42] <kakuhen> and they are still based on the A14 design
[01:59:52] <kakuhen> A15 allegedly offers significantly better graphics performance
[02:01:23] <kakuhen> oh yeah and another hurdle in upgrading for me is that uh
[02:01:28] <kakuhen> my current macbook still "works"
[02:01:42] <kakuhen> its hard to justify dumping a 2 year old laptop
[02:01:47] <hayley> .oO(All technology is inhumane, because it rids one of the human condition of not being able to think very well.)
[02:02:38] <White_Flame> alternately, if you can think more abstractly than getting lost in the details, it's better thinking
[02:02:55] <epony> still, just 8%
[02:03:06] <kakuhen> White_Flame: was it the fact mac os ships system libs for crypto that they dont want you to link directly against
[02:03:08] <White_Flame> problem is if people never knew the details
[02:03:25] <epony> they are pegged at the semiconductor batch orders
[02:03:26] <kakuhen> I recall some dumb thing where they want developers to "use this security framework" or whatever
[02:03:28] <White_Flame> kakuhen: something like that.  googling around, there wasn't a solution for that problem yet
[02:03:42] <kakuhen> but frameworks dont expose libs so its annoying
[02:03:44] <White_Flame> and of course the CL libs wanted to link
[02:03:48] <hayley> AIUI yes, and they fixed CL+SSL...at some time?
[02:04:21] <hayley> Or not?
[02:04:34] <White_Flame> it was probably early this year when we were messing with that, to try to deploy stuff on macos
[02:04:38] <kakuhen> something something ABI instability, which is a non-issue anyway since im sure compiler devs are well aware of how to deal with it
[02:04:43] <White_Flame> erm, early 2021 :-P
[02:04:49] <hayley> e.g. https://github.com/cl-plus-ssl/cl-plus-ssl/issues/138
[02:04:50] <epony> now we have to compare non-JVM and JVM pegged software (use your imagination) by the rate of Oracle sales
[02:04:50] -ixelp- MacOS Monterey appears to have further broken dynamic library loading · Issue #138 · cl-plus-ssl/cl-plus-ssl · GitHub
[02:11:54] <kakuhen> oh right big sur did something really stupid
[02:12:07] <kakuhen> dylibs all became stubs that referenced offsets in dyld shared cache
[02:12:25] <kakuhen> so if youre writing mac malware just find a way to corrupt this cache ;-)
[02:16:46] <epony> the moment you start naming your "updates" and "releases".. you're doomed (selling disposable software)
[02:17:13] * hayley goes to read https://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.18.4791&rep=rep1&type=pdf
[02:33:16] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:85ca:129c:de7a:29e4)
[02:45:20] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:85ca:129c:de7a:29e4) (Remote host closed the connection)
[02:57:09] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[02:57:16] <vms14> gilberth: hi
[02:57:53] <vms14> I've ended taking your advice and abandon NetBSD to use debian so I have a proper lisp environment
[02:58:06] <vms14> it took me so much time btw xD
[03:04:57] <Gnuxie> Selwyn: latest mission episode is so goof 
[03:04:59] <Gnuxie> Good 
[03:06:13] <selwyn> will check it out
[03:06:41] <hayley> https://www.youtube.com/watch?v=t_he2hubqNo
[03:06:42] -ixelp- Sealand (2003 Digital Remaster) - YouTube
[03:06:56] <selwyn> the image of you sitting down with the whole family to watch it is amusing lol
[03:07:06] <selwyn> don't think i've ever sat down to watch youtube with the family
[03:08:29] <selwyn> one day the straight lines will be national heritage trails
[03:10:11] <Gnuxie> They.ve been glued to it
[03:10:33] <Gnuxie> They've even asked to see the Scotland one 
[03:33:55] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Remote host closed the connection)
[03:54:18] <hayley> https://www.youtube.com/watch?v=2SWrIB75vc8
[03:54:19] -ixelp- Needles In The Camel's Eye (2004 Digital Remaster) - YouTube
[04:28:14] <drakonis> ah apple...
[04:41:44] <kakuhen> <vms14> "I've ended taking your advice..." <- What was wrong with NetBSD?
[04:42:37] <kakuhen> I've ironically had more lisp problems on Fedora than on FreeBSD. I can never compile a CCL or SBCL copy that doesnt immediately segfault on Fedora
[04:43:08] <hayley> gilberth: https://old.reddit.com/r/rust/comments/rtutr0/lockless_threads_for_mutable_operations/
[04:43:09] -ixelp- Lockless threads for mutable operations? : rust
[04:43:46] <kakuhen> I assume ease-of-compiling software-without-unexpected-interruptions is why my friends constantly sell Arch Linux over other distros
[04:43:54] <kakuhen> but I can never figure out how to install Arch
[04:44:13] <gilberth> kakuhen: Fedora is not Debian :-)
[04:44:32] <drakonis> debian...
[04:44:43] <kakuhen> I run debian for my matrix server actually
[04:45:05] <drakonis> you can also go with something a bit more... exquisite like Guix System or NixOS
[04:45:12] <kakuhen> bad idea btw because you need to pull in a dozen alternative apt sources for reasonably up to date nodejs, python, and dependencies
[04:45:31] <drakonis> run debian testing or unstable perhaps
[04:45:49] <kakuhen> ah i was lazy and just stuck with the default distro the vps provider gave me
[04:45:56] <gilberth> I am a bit odd though. (1) I run my Linux headless (2) I never update (3) I am fine with manually building things and including dependencies.
[04:46:14] <kakuhen> I thought to myself "ive used debian 10 years ago i can figure it out" :-)
[04:46:29] <kakuhen> and now its the messiest server ive ever made
[04:46:42] <kakuhen> but it works so its ok
[04:47:01] <kakuhen> my ideal server would run os x if apple didnt force the windowserver to run and had an actual server os
[04:47:22] <gilberth> And (4) I grew up with SYSV and BSD still is alien to me.
[04:47:29] <kakuhen> (yes i know of the workaround to start up an X11 program and immediately crash it after Quartz stops trying to take the display, no I dont like this workaround)
[04:47:58] <kakuhen> (this ugly hack lets you run KDE on old versions of OS X though)
[04:49:15] <kakuhen> gilberth: Is Solaris close enough to what you grow up with
[04:50:08] <kakuhen> Since most of my linux experience was as a clueless kid and most of my BSD experience was after I gained patience to read manuals, BSD feels right at home but anything else feels foreign
[04:50:09] <gilberth> kakuhen: I don't know what the heritage of Solaris is.
[04:50:38] <kakuhen> Allegedly derived from some old Sys-V revision
[04:50:59] <gilberth> Ok, you answered your own question, then.
[04:51:17] <kakuhen> SVR4 in particular
[04:51:32] <kakuhen> yeah but I was more interested in your experience than claims on a website
[04:51:49] <gilberth> And Linux is more a SYSV than an BSD. I had no trouble at all to move from SYSV to Linux, all was familiar.
[04:53:22] <gilberth> kakuhen: I have very little experience with Solaris. And only a bit with what ever version ran on a Sun 3.
[04:55:35] <gilberth> What I can say is that I felt at home with Linux coming from XENIX and not with 386BSD or what ever that was called at that time. This is some decades ago.
[04:55:37] <drakonis> https://ziglang.org/
[04:55:37] -ixelp- Home â¡ Zig Programming Language
[04:55:39] <drakonis> this is something.
[04:55:39] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 250 seconds)
[04:56:42] <gilberth> My exposure to HPUX, SunOS, IRIX, Ultrix is little and only as a user/hacker, not as a sysadmin.
[04:57:24] <hayley> drakonis: https://www.youtube.com/watch?v=tbHix56qfG8
[04:57:25] -ixelp- The Aircrash Bureau - YouTube
[04:58:24] <kakuhen> gilberth: most of my tinkering^Wsysadmin experience is with FreeBSD, so going to any particular Linux distro is always a relearning experience for me
[04:58:56] <kakuhen> one of my friends claimed Void is close to NetBSD in behavior and setup but in my experience it is not at all
[04:59:28] <kakuhen> xbps feels nothing like pkgsrc and I guess musl is equal to NetBSD'S libc in the sense that it won't play nice with programs with hard glib dependencies
[05:00:09] <kakuhen> oh and services are weird with OpenRC; there's like three different places you to have symlink to set up a service
[05:00:40] <drakonis> hayley: a good track
[05:00:51] <drakonis> kakuhen: its runit not openrc mind you
[05:01:12] <drakonis> but weird nonetheless
[05:01:21] <kakuhen> yeah the one with /etc/sv/a-million-symlinks to be precise
[05:01:41] <drakonis> hayley: neat song
[05:01:50] <drakonis> v. chill
[05:02:07] <gilberth> kakuhen: Yes, this impedance is why I never actually used FreeBSD despite FreeBSD being perhaps the better OS.
[05:02:35] <kakuhen> I was thinking that in my head earlier as an additional reason for Linux "winning" over the BSDs
[05:02:48] <kakuhen> not only lawsuits, but also familiar ity
[05:02:54] <kakuhen> familiarity*
[05:02:57] <drakonis> linux won because of a social factor
[05:03:08] <drakonis> it was much easier to get in and people didn't have an elitist streak
[05:03:41] <kakuhen> I see
[05:03:44] <gilberth> 386BSD (or what it was called) was available at the same time as Linux. Give or take a few month, no idea which one was earlier.
[05:04:00] <drakonis> it did, yes.
[05:05:43] <Alfr> drakonis, what does "optimal" software even mean?
[05:05:45] <gilberth> Well, I did my choice based on being too lazy to relearn. But I doubt that that many Linux adopters already had a Unix at home before the switch.
[05:05:59] <drakonis> optimal software?
[05:06:38] <hayley> "Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software." -- Zig website
[05:06:46] <drakonis> what is this in relation to?
[05:06:46] <hayley> "Were the rest chopped liver?" -- David Ungar
[05:06:51] <drakonis> oh
[05:07:10] <kakuhen> Oh speaking of Zig, Theo was fuming at that description months ago when zig was added to OpenBSD ports
[05:07:20] <drakonis> optimal? i guess it has to do being the better option?
[05:07:36] <hayley> kakuhen: https://marc.info/?l=openbsd-ports&m=161449568814043
[05:07:37] -ixelp- 'Re: new: lang/zig' - MARC
[05:07:48] <kakuhen> yeah that's the one
[05:07:52] <hayley> How do you know it's the better option?
[05:07:55] <Alfr> drakonis, also that what Zig calls simple well may lead to very verbose code: explicit allocations couples with no preprocessor or macro essentially means that one has repeatedly type out commonly used patterns.
[05:08:12] <drakonis> idk
[05:08:13] <gilberth> hayley: So Zig is a multi-paradigm, dynamically typed language with a proper GC? Is Zig the new hype?
[05:08:16] <drakonis> its their claims
[05:08:25] <drakonis> they're rewriting the compiler to be llvm free
[05:08:37] <Alfr> drakonis, not sure, but it sound like even more boiler plate than java.
[05:08:48] <hayley> When I was introduced to the Glamorous Toolkit (a UI library for Pharo/Smalltalk) I said I would make a library called "We think this is a good library". 
[05:08:58] <drakonis> i'm linking to it but i've not used it
[05:09:05] <drakonis> glamorous toolkit?
[05:09:13] <hayley> gilberth: Ask drakonis, not me.
[05:09:15] <drakonis> isnt that the one for data visualization?
[05:09:23] <drakonis> zig is the other hype
[05:09:28] <hayley> https://gtoolkit.com/
[05:09:28] -ixelp- Glamorous Toolkit
[05:09:28] <hayley> Yes.
[05:10:01] <drakonis> its the C to rust's C++
[05:10:06] <drakonis> rather
[05:10:14] <hayley> (FWIW I can't imagine using it for anything, because I can't make even good-looking linear documentation. So putting my code into another linear form really does not appeal to me.)
[05:10:15] <drakonis> eh, you get the point
[05:10:38] <hayley> Right, so more <https://www.youtube.com/watch?v=tbHix56qfG8> then.
[05:10:39] -ixelp- The Aircrash Bureau - YouTube
[05:10:40] <kakuhen> For me, it's Hare, because it has a cute bunny as a mascot
[05:11:04] <drakonis> ah hare
[05:11:08] <drakonis> drewlang
[05:11:24] <kakuhen> hare exists because drew was fuming over being kicked from zig iirc
[05:11:29] <selwyn> what
[05:11:42] <hayley> I was going to call the Telekons project "The Aircrash Bureau" in reference to that song, but I didn't think references to air crashes would fit with some people.
[05:11:48] <drakonis> amazing
[05:11:55] <drakonis> telekons?
[05:12:04] <hayley> Hare? You mean <div style="color: black">xxxx</div>?
[05:12:04] <drakonis> also glamorous toolkit in cl when
[05:12:05] <selwyn> https://harelang.org/floppies/ ?
[05:12:06] -ixelp- 3Â½" Floppy Disc Distribution
[05:12:14] <hayley> https://github.com/telekons
[05:12:15] -ixelp- Telekons · GitHub
[05:12:15] <hayley> Gotta fly.
[05:12:23] <selwyn> its like a troll language
[05:12:29] <drakonis> oic
[05:12:38] <drakonis> selwyn: he's very serious about it
[05:13:43] <kakuhen> meanwhile me: making my own lisp sounds cool but i'll stick with a proper common lisp implementation because its the most comfortable for me
[05:13:49] <selwyn> i thought he was a c or bust type of guy
[05:14:03] <drakonis> he is, but he got mad that the good c-like kicked him out or something?
[05:15:03] <kakuhen> iirc drew got into some drama with ppl working on zig and was subsequently blocked from working on zig
[05:15:10] <drakonis> sounds like drew
[05:15:14] <kakuhen> then a month or two later we got hare
[05:15:14] <selwyn> lol
[05:15:58] <kakuhen> my favorite drew moment was when he politely told a guy asking for DRM in Wayland to f*** off
[05:16:00] <drakonis> this seems entirely in line with his behavior
[05:16:23] <kakuhen> i should find the github issue where he pledges to never allow DRM support as long as he lives
[05:16:27] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[05:17:06] <selwyn> kakuhen: well, you could help contribute to an existing common lisp implementation
[05:17:29] <selwyn> it was fun but ultimately not for me, at least at the moment
[05:17:53] <kakuhen> i contributed a line code to ccl thanks to finding a year old issue of phoe pointing out a missing feature
[05:18:11] <kakuhen> missing entry in features
[05:19:02] <selwyn> nice
[05:19:55] <kakuhen> oh right i have a set of dozens of patches for stumpwm
[05:20:19] <kakuhen> havent sent them yet because i gave up refactoring the i/o loop to use iolib
[05:21:31] <kakuhen> the idea was to patch the hell out of stumpwm to add ccl support back, and maybe some more implementations too like ecl
[05:22:04] <kakuhen> and I told myself: send nothing until it runs fine on freebsd/ccl
[05:22:10] <selwyn> surprised it was implementation specific
[05:22:32] <kakuhen> because they used to use a dummy io loop for non sbcl impls and it became grossly underperformant
[05:22:48] <kakuhen> lots of discussion happened on MLs and the decision was to just make the software SBCL-only
[05:23:20] <kakuhen> i think this happened before iolib was a thing
[05:23:25] <drakonis> kakuhen: be the change you want to see in the world
[05:23:39] <drakonis> this reminds me of another problem with the bsds
[05:23:44] <kakuhen> because comments in the io.lisp indicate sbcl doesnt support epoll stuff they want for better perf
[05:23:49] <kakuhen> but it technically does with iolib
[05:23:56] <kakuhen> so if i refactored the sbcl io stuff to use iolib
[05:24:04] <kakuhen> there technically shouldnt be any complaints to adding another dep
[05:24:12] <drakonis> the secret club and unwillingness to participate
[05:25:19] <kakuhen> anyway yeah for a while i was "trying to be change" so to speak
[05:25:33] <kakuhen> then i got distracted by other stuff and in 2 days im back to being a busy math student
[05:26:01] *** Joins: Alfr (~Alfr@user/alfr)
[05:26:22] *** Parts: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[05:26:41] <kakuhen> with that said, maintaining my patches has been relatively simple -- i havent ran into issues into merging them with the latest git revisions
[05:27:50] <drakonis> isolationism in operating systems is bad...
[06:12:56] <pl> kakuhen: don't see how such a pledge can work 
[06:14:14] <pl> OTOH, not supporting DRM means continuation of "never going to have fullhd or better streaming" situation from X11 days, which is fine with me 
[06:29:06] <drakonis> drm as direct rendering management or streaming drm?
[06:29:41] <kakuhen> digital rights management
[06:40:17] * pl meanwhile ponders how wayland/gtk circlejerk will unfuck itself from "there's only one colour format, and it's RGBA8888"
[06:41:13] <selwyn> return to rgb565
[06:41:18] <White_Flame> digital restrictions mechanism
[06:45:42] <gilberth> Who needs colour? Let's go grayscale. With high contrast. How about black and white?
[06:47:06] <White_Flame> dithered black & white certainly has its own aesthetics
[06:47:10] <White_Flame> especially with stipple patterns
[06:48:29] <hayley> The Smalltalk-80 look(tm)
[06:49:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[06:50:57] <hayley> Speaking of, I am not going too well with my march against terminal boredom today.
[06:51:25] <epony> vms14(gone), yes BSD is not the home for LISP, tell that to mfiano too who is getting into his FreeBSD trials and is going to find many Linuxisms are.. irreconcileable
[06:51:28] *** Joins: aeth (~aeth@user/aeth)
[06:54:16] * hayley uploaded an image: (26KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/CRgKnRfzgVwwAiZepiLsudRo/images.jpeg.jpg >
[06:54:28] <hayley> ^ me after coming up with "terminal boredom"
[06:56:10] <White_Flame> get ye an E.T terminal https://twitter.com/edu_arana/status/635854346572439552
[06:56:13] <pl> selwyn: funny you mention rgb565...
[06:56:38] <pl> selwyn: GTK3, unless somehow patched, used to look especially ugly on certain set of laptops we had in Warsaw Hackerspace
[06:56:47] <pl> (old Thinkpad R50i)
[06:56:54] <White_Flame> rgb565 is ugly, and can't do gradients :-/
[06:57:15] <pl> White_Flame: rgba8888 hw dithered to rgb565 is way uglier ;)
[06:57:38] <hayley> Not really what I meant by boredom. Though you can't take yourself too seriously on a funny looking terminal.
[06:57:41] <White_Flame> nah, dithering into 565 isn't that bad
[06:57:52] <White_Flame> masks the banding
[06:57:53] <pl> White_Flame: you haven't seen what I've seen, then ;)
[06:58:06] <White_Flame> and the banding in 565 is worse than 555 because it mucks with the color, too
[06:58:13] <pl> it's probably less dithering than clamping,too
[06:58:22] <selwyn> https://www.youtube.com/watch?v=ARPCjp0ppEE
[06:58:22] -ixelp- BLADE RUNNER - I ve seen things you people wouldn't believe... - YouTube
[06:58:33] <pl> White_Flame: The laptops I mentioned? They had 24bit 2D pipeline, and 16bit 3D pipeline
[06:58:39] <selwyn> what do you mean no gradients
[06:59:11] <pl> GTK3 would of course go with 3d pipeline, issue rgba8888 to it, and spew ugly hw approximation out
[06:59:14] <White_Flame> gradients look terrible in 565 and mutates the colors as it bands
[06:59:19] <White_Flame> (unless it's dithered)
[06:59:27] <pl> meanwhile everything else worked fine, because it didn't insist on 3d
[06:59:48] <gilberth> I repeat myself, I would prefer 8-bit grayscale over rgb565.
[07:00:01] <selwyn> gilberth: lol
[07:00:20] <White_Flame> I"d take 256 color, 16 colors * 16 intensities, over rgb565 too :)
[07:00:43] <gilberth> selwyn: Hey, I had a monochrome screen for some years.
[07:00:55] <selwyn> i learnt gamedev from a book that built a game engine that rendered in rgb565
[07:01:18] <gilberth> I preferred the larger screen real estate over colour.
[07:01:34] <selwyn> well, you are allowed to have both
[07:01:41] <White_Flame> gilberth: yep
[07:04:56] <gilberth> selwyn: This was in the 90s and I was a student. A large colour screens was off my budget. The monochrome 19" screen was free modulo some soldering for the composite sync. Or was it 21"? I don't remember, it however was larger than what you usually would have.
[07:05:19] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:05:47] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[07:06:01] <dave0> maw
[07:06:53] <gilberth> Hello dave0!
[07:07:55] <dave0> maw gilberth &nbsp; !
[07:08:06] <dave0> it's a non-breakable spae
[07:08:13] <dave0> space
[07:08:32] <White_Flame> gilberth: yeah, I remember seeing a lot of those for sale pretty cheap
[07:08:42] <gilberth> .oO(Hmm, two spaces. One breakable, one not. Which one should I claim?)
[07:10:12] <gilberth> White_Flame: Yep. I got mine from the uni. They hadn't any use for them anymore and you could pick it up for free. Later I also got nice X11 terminals for free.
[07:11:39] <gilberth> Fixed frequency and composite sync. So those EE skills were handy. The fixed frequency didn't bother me, just run X11 all the time.
[07:11:40] <White_Flame> I did end up with a nice 19" 2048x1536 (color) monitor though, so I didn't have to go for those
[07:13:07] <gilberth> White_Flame: That resolution is decadent. Fancy!
[07:13:59] <White_Flame> technically it was 1600x1200, but you could edit the monitor.sys file (or whatever it was) and crank it up
[07:14:24] <White_Flame> since the horizontal frequency certainly supported higher, but the config file only "knew" up to 1600x1200
[07:15:10] <White_Flame> it took a LONG time for LCDs to catch up in resolution, and I stuck with CRT for longer than most
[07:15:11] <gilberth> Well, given that your video board could keep up. Mine certainly couldn't, but that was like in 1995 IIRC.
[07:15:54] <White_Flame> yeah, this might have been a year or two later
[07:16:05] <gilberth> Yep, I used CRTs for that very same reason longer than most others.
[07:17:30] <gilberth> It must have been as late as 2010 or so I finally switched the flatscreens. But I really don't remember the exact year.
[07:26:56] <epony> 2002 here
[07:29:39] <epony> 2010 for conversion from HD TN to QHD 10bit IPS
[07:34:26] <epony> that's the single most important upgrade you can get, if you can afford it (the monitor resolution and panel type for maxing your video card / machine usage), after maxing out the RAM
[07:44:37] *** Quits: semz (~none@user/semz) (Ping timeout: 240 seconds)
[07:44:46] <hayley> Hmm, why not have a bytemap specifying a colour/resolution mode for sections of the screen?
[07:46:08] <gilberth> You design the circuit that drives the CRT.
[07:46:59] <gilberth> I suppose that could be done. Instead of a sync have X and Y signals. Vector display, anyone?
[07:47:19] <hayley> Eh, just keep the bitmap but have a different way of sampling pixels.
[07:47:53] <gilberth> And what would the benefit be?
[07:48:27] <hayley> e.g. if you could flip between black and white and 4 bit, you could round down X and Y by 2 to get quarter resolution.
[07:48:48] <hayley> You could have split screens with color imagery and high resolution text.
[07:49:18] <gilberth> You would scared with what people already came up.
[07:50:21] <hayley> Well, most people that care about such stupid things seem to think you should have no better than a VT 100 these days.
[07:50:39] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[07:51:40] <gilberth> Apart from hacks, my CP/M-80 machine has three 640x400 1-bit graphics planes and a text screen. You could have both the text output and the graphics enabled at the same time. You could enable each graphics planes as well as the text screen being visible or not. For two monitors individually which could be attached.
[07:51:43] <dave0> we've had bitmapped graphics for years and people still think of text terminals
[07:52:20] <dave0> gilberth: cool
[07:52:27] <hayley> .oO(What was the line again? "I just died - terminal boredom.")
[07:52:58] <hayley> What do you do with three bitmap planes?
[07:52:59] <gilberth> It featured two Z80s. The second would execute graphics commands in parallel to the first thinking about the next thing to draw.
[07:53:13] <dave0> graphics co-processor
[07:53:15] <gilberth> hayley: Display graphics?
[07:53:22] <dave0> oldskool hardware acceleration
[07:53:57] <hayley> Yeah, but what graphics needs three B&W planes?
[07:54:20] <gilberth> dave0: This was fun. Draw a few dozen lines. The main CPU would be done, while the other CPU would still ponder on the lines.
[07:54:22] <hayley> Or are those RGB planes?
[07:54:44] <epony> Hercules graphics controllers were quite populat back then too..
[07:55:22] <gilberth> hayley: How about having either 8 colours or three screens for quick switching between different parts of a 2d-graphics or between a menu screen and a work screen?
[07:56:03] <dave0> 8 colours at 640x400 is quite good for computers of that time
[07:56:04] <gilberth> hayley: Redraw as slow you could watch a line being drawn.
[07:56:46] <dave0> CP/M was a 70's/80's thing? around that time?
[07:56:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:56:58] <dave0> late 70's early 80's ?
[07:57:17] <gilberth> dave0: Yeah. This was pretty nifty. I wrote a schematic capture application on that box, which was in use at my fathers company for quite some time. We should have sold that application and be Cadence today.
[07:57:36] *** Joins: semz (~none@user/semz)
[07:59:01] <gilberth> dave0: Yeah. This was like '84 or so.
[07:59:15] <dave0> cool
[07:59:30] <dave0> i was 7 in 1984 :-)
[07:59:44] <gilberth> I was 10 and already a hacker.
[07:59:50] <dave0> i think hayley didn't exist yet :-p
[08:00:03] <dave0> gilberth: awesome
[08:00:04] <hayley> No shit Sherlock
[08:00:34] <dave0> yes we're old ;-p
[08:00:56] <gilberth> dave0: Don't remind me of that, I try to ignore that as best as I could.
[08:01:56] <dave0> the cold hand of death is around every corner
[08:02:08] <hayley> https://www.youtube.com/watch?v=ietkuUZwjpU&t=13
[08:02:09] -ixelp- Cymbaline - YouTube
[08:02:28] <gilberth> hayley: You could attach both colour and monochrom screens. And for the colour screen you could say whether it should be RGB with three planes, or B/W using just one.
[08:02:38] <dave0> oh the actual quote is "death stalks you at every turn"
[08:03:19] <hayley> Oh, if you want a (somewhat hubris-induced) laugh: https://twitter.com/malleablesys/status/1477273660402634754
[08:03:21] <gilberth> dave0: Will you silence, please? Or talk about something more hopeful?
[08:04:24] <dave0> gilberth: okay no problem sorry gilberth 
[08:04:53] <gilberth> dave0: Nah, that's me. Did I mention that I have an ongoing midlife crisis?
[08:06:19] <dave0> gilberth: you're a little too young for that
[08:06:50] <gilberth> dave0: I believe I am past the middle of my life.
[08:08:06] <dave0> but you're successful... enjoy your success
[08:08:32] <gilberth> Sucessful? By no means.
[08:10:09] <dave0> my understanding is apart from not owning a satellite or a trip to space, you don't want for anything?
[08:10:36] <dave0> who owns a fucking satellite
[08:10:37] <hayley> If gilberth was successful, he would have funded CLOSOS among other things
[08:10:39] <dave0> that's crazy
[08:11:17] <gilberth> dave0, we had the discussion the other night. I won't call me successful when I can't throw a party.
[08:11:34] <hayley> Also, here is stassats on benchmarking sites: https://www.reddit.com/r/Common_Lisp/comments/rrg703/comment/hqoehi2/?context=3
[08:11:36] -ixelp- Heap allocation confirmation needed : Common_Lisp
[08:11:36] <gilberth> hayley: You are just begging for money you don't need.
[08:12:54] <hayley> I'm kidding. But I do wish I had money to buy a Russian sockpuppet farm to rig design "discussions".
[08:14:17] <kakuhen> if i were rich enough to fund chaotic things i would fund chaotic things
[08:14:44] <kakuhen> such as: a new common lisp spec, hexstream, and climacs
[08:15:05] <kakuhen> some regulars over at #emacs dont like the idea of climacs and proceed to bash on CL users as a whole
[08:15:16] <hayley> Yeah, hexstream didn't debunk phoe still.
[08:15:41] <hayley> gilberth must have been paying off...idk, maybe stassats to not expose phoe.
[08:16:08] <hayley> That's a better conspiracy theory than anything Hexstream can make.
[08:16:24] <kakuhen> upload cl-mafia to quicklisp and its just a file with constants naming names
[08:16:26] <gilberth> kakuhen: Some 20 years ago I contemplated to port GNU Emacs to CL. It would have been a wasted effort, I completely dropped the idea.
[08:16:57] <hayley> Don't worry, they only want to port GNU Emacs to Rust and Javascript now.
[08:17:17] <kakuhen> didnt remacs die because builds broke on mac os and the devs all used macs
[08:17:23] <kakuhen> and now there's emacs-ng i think?
[08:17:25] <gilberth> Lol. Make Emacs slower? Terrific idea.
[08:17:31] <hayley> A very pretentious name.
[08:17:45] <kakuhen> well NG is short for "no good" so its a fitting name
[08:18:01] <hayley> The funny thing was the remacs README had a list of reasons to use Emacs, and they were all why one shouldn't use Rust really.
[08:18:45] <gilberth> Meanwhile, I still wonder why Emacsians seem to hate CL.
[08:19:17] <kakuhen> I'd say the most pretentious thing in remacs (or any attempted emacs rewrite) was "Risp"
[08:19:44] <kakuhen>  its motivation was literally "parentheses bad, and what I think is pure FP is good"
[08:20:28] <kakuhen> >we hate s-expressions so lets mash up ML syntax and Rust semantics together to make a  scripting language with decent performance
[08:20:50] <kakuhen> thankfully it was just an idea and Risp never existed
[08:20:57] <gilberth> Well, I once made Hemlock portable. But then hadn't any time to continue to improve it.
[08:22:03] <gilberth> Though. Hemlock lives!
[08:22:13] <pl> hayley: what you were asking about regarding changing resolution and the like for different parts of the screen was common on Amiga and used in a bunch of other analog output systems
[08:22:32] <pl> Amiga I think had it most capable
[08:23:16] <dave0> yes you could share a high colour low resolution area with a low colour high resolution area
[08:23:35] <dave0> fully supported in the os
[08:23:37] <pl> The trick on most hw was to change the global mode fast enough to flip it for part of the screen while the signal was generated
[08:24:08] <White_Flame> raster interrupts or display lists
[08:24:46] <hayley> kakuhen: "risp" is also the name of gilberth's favourite Lisp implementation in Rust.
[08:24:55] <pl> Amiga made it more generic by providing a simple programmable chip that could twiddle registers in all of the display hardware and had access to interrupts so as long as you gave enough time it could switch things for you per line
[08:25:10] <gilberth> Anyhow, my plan was to have C to CL compiler for an initial GNU Emacs port and then work from replacing its Lisp implementation by CL and work your way up. The idea was to have a fully functional system at all times.
[08:25:28] <White_Flame> yeah, "copper lists" In amigaspeak
[08:25:37] <White_Flame> ("amiiiiiiigaaaaaaa!!!!")
[08:25:47] <dave0> i believe the NES could do that too, in super mario bros for example
[08:25:58] <pl> dave0: not at amiga granularity
[08:26:10] <dave0> ah ok
[08:26:21] <pl> NES/SNES and bunch of other systems could do the equivalent of swapping a mode register at given line, iirc
[08:26:44] <kakuhen> hayley: I'll take that Risp over the remacs-proposed Risp any day
[08:26:47] <pl> copper exposed a generic programmable controller that could access all of Chipsets
[08:27:16] <pl> iirc the only limitation was that you needed to take care of certain latencies
[08:27:18] <White_Flame> NES didn't have a raster interrupt, not sure exactly how it timed the splits.  SNES added in HDMA and such to stuff register values at specific lines
[08:27:52] <kakuhen> gilberth: Besides the transpiler, the remacs team also intended to have fully functional system at all times, but it somehow fell apart
[08:27:54] <pl> I think some operations with copper required 16 pixel delay, and some caused an empty line
[08:28:08] <White_Flame> yeah, the amiga bus was weird
[08:28:14] <kakuhen> The idea was to leave elisp untouched but replace the simplest C files with Rust
[08:28:38] <White_Flame> and IMO didn't have the bandwidth to pull off what they were trying with the hardware
[08:29:36] <pl> more the problem was that a lot of clever hacks were later constraining them (can't update hw design easily because it would break all copper stuff, for example), and another was that they effectively were late with any updates
[08:30:04] <pl> OCS was nice and powerful, ECS was not much of an update, AGA was late and eclipsed by cheap PC
[08:30:27] <pl> AAA (Hombre?) didn't happen
[08:30:28] <White_Flame> and AA/AAA just went vapor
[08:30:34] <gilberth> kakuhen: Well, the number one advantage of CL would be that you could compile elisp to machine code. You find a lot of C functions in Emacs, which were written in elisp initially, but recoded in C for speed. And Emacs still could be pretty slow.
[08:31:31] <kakuhen> Yeah I've heard of how some elisp operations are written in C for speed
[08:31:40] <kakuhen> I've never thought of the machine code thing however
[08:32:24] <gilberth> kakuhen: It was more severe in the 90s. While Hemlock would indent a whole large DEFUN instantly, Emacs could easily take a few seconds. I used Hemlock quite a bit in late 90s to early 2000s for Lisp hacking.
[08:32:42] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 260 seconds)
[08:35:46] <pl> These days I often hit issues involving, afaik, internal buffer structure
[08:36:58] <hayley> Oh, this is hilarious. stassats is indirectly pissed at someone running a benchmark site, because the maintainer cannot believe that enough allocations are being performed, if the allocations are not done by calling a function (i.e. they are inlined, which SBCL does).
[08:37:17] <gilberth> kakuhen: Things have changed though, machines got faster and Emacs nice features like syntax highlighting and an X11 UI these days. Still no variable width font support that would work for hacking. I miss my Epoch. Hence, the gap between Hemlock and GNU Emacs in features grows larger and larger. That gap wasn't so big in the 90s.
[08:39:59] * hayley decides to do the flaming on stassats's behalf.
[08:43:21] <pl> hayley: link?
[08:43:59] <gilberth> The only thing I really don't like with Hemlock is that its buffers and buffer manipulation functions are line oriented . I believe GNU Emacs got it right with exposing the buffer as just a vector of characters^Wintegers^Wbytes^Wintegers, whatever.
[08:44:01] <hayley> https://github.com/hanabi1224/Programming-Language-Benchmarks/issues/144 I haven't written anything yet, but the "interesting" stuff is near the end.
[08:44:02] -ixelp- Could you please add SBCL Common Lisp to the languages? · Issue #144 · hanabi1224/Programming-Language-Benchmarks · GitH [...]
[08:45:21] <hayley> Apparently the author thinks that, if caml_alloc comes up in profiler output, it must be consing. Otherwise not.
[08:45:33] <hayley> And caml_alloc is only actually called by OCaml for large enough objects.
[08:46:22] <pl> gilberth: GNU Emacs uses a gap buffer
[08:46:44] <pl> and explodes on long lines just as easily as if it was using list of lines :/
[08:49:14] <dave0> should use a rope https://en.wikipedia.org/wiki/Rope_(data_structure)
[08:49:33] <dave0> silly name i think but supposed to be better than a simple string
[08:50:22] <hayley> Here's my comment: https://github.com/hanabi1224/Programming-Language-Benchmarks/issues/144#issuecomment-1003665896
[08:50:23] -ixelp- Could you please add SBCL Common Lisp to the languages? · Issue #144 · hanabi1224/Programming-Language-Benchmarks · GitH [...]
[08:56:47] <gilberth> pl: The redisplay in GNU Emacs could be very slow with long lines, yes. Still API-wise it's easier to work with buffer positions as some offset, instead of needing to deal with a line/offset pair.
[08:57:24] <Gnuxie> *no-defun-allowed*: nice 
[08:58:51] <gilberth> It could use what ever it wishes internally, but an API for writing macros on terms of just buffer offsets is nicer IMHO.
[09:04:00] <hayley> So TL/DR the "problem" is that SBCL, the JVM, and OCaml like to allocate without calling into C. This makes the author's profiler sad.
[09:05:45] <White_Flame> s/'s profiler//
[09:06:03] * pl thinks he had seen *C* that didn't allocate in a way the author would catch
[09:06:19] <hayley> Oh, gilberth and I have seen C that didn't allocate before.
[09:06:28] <hayley> https://gist.github.com/no-defun-allowed/7e3e238c959e27d4919bb4272487d7ad#appendix-a-fun-bug-in-the-cello-benchmarks
[09:06:29] -ixelp- Don't Build Your Own Lisp · GitHub
[09:06:41] <hayley> Yes, there is an appendix because I really want to rub in the incompetence of the author of BYOL.
[09:07:45] <pl> hayley: nah, I'm not talking about not allocating, just using a bump pointer in C :D
[09:10:01] <hayley> Time to find out if the author will remove my comment for being rude and insulting.
[09:10:52] <gilberth> I like the argument that SBCL must be doing something fishy because it is faster than Java. Or sth like this.
[09:11:47] <hayley> Yes, why even bother running a benchmark site, if you're going to just use personal beliefs as an argument for anything?
[09:12:42] <gilberth> Maybe because the purpose of the benchmark site is to confirm your beliefs?
[09:13:01] <hayley> lol, true.
[09:13:41] <hayley> "I've also removed racket impl which cannot be profiled by callgrind, and haskell impl which is not making fair heap allocations togeter with all cl impls" LMAO
[09:13:48] <kakuhen> Earlier this week people were mentioning site counters and other relics of the web, and I just ran into two sites with counters. Really nice.
[09:14:18] <hayley> What a shit requirement. None of the fast allocators are going to call a function (and probably not a C function, at that) to allocate.
[09:14:29] <kakuhen> gilberth: GC bad, JVM least bad, so non-JVM better means non-JVM not true GC, since GC bad and JVM least bad.
[09:14:56] <gilberth> Indeed.
[09:16:06] <gilberth> What comes next? Complaining that cons cells don't come with an object header? "You can't allocate a pair in just two words, that's not possible! Where is the type stored?"
[09:16:27] * hayley stares in -lgc
[09:18:47] * hayley uploaded an image: (57KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/WeArOXsJpzDBoVOEiwenvEUu/ron-mael-drinking.png >
[09:43:44] *** Joins: shka (~herr@109.231.0.226)
[10:13:48] <moon-child> pl: gnu emacs also fails with very large files, regardless of the line length
[10:13:59] <moon-child> just a fundamental limitation of gap buffers
[10:15:03] <moon-child> vim uses some kind of tree structure, but the minimal leaf node is a single line.  So it deals well with extremely large files, but not with very long lines
[10:16:36] <moon-child> I agree in some contexts it is nicer to consider only an offset.  However it can get annoying when you want to persist positions across undo/redo.  Versus tracking a _pointer_ to some line which remains stable even if the position of that line changes
[10:16:44] <moon-child> moreover, line-oriented movement is common
[10:18:51] <moon-child> hence I think a two-level tree structure may be appropriate.  (That said my own texteditor is yet a toy and I have not performed _any_ appreciable thought or implementation work on the buffer representation.)
[10:46:58] <gilberth> moon-child: Markers exist.
[10:49:16] <gilberth> I assume what you want is to remember some buffer position, which should be meaninful and just point to the right spot by doing the right thing(tm) in the presence of subsequent editing operations.
[10:50:26] <kakuhen> Today I learned the implementation of poll() in OS X is such that ping packets get magically truncated by one byte each time
[10:50:46] <kakuhen> got fixed in qemu 6.something but I downgraded to 5.something because it lets me use 16:10 resolution on a powerpc VM
[10:51:47] <kakuhen> apparently was also present in freebsd but fixed somehow https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=237441
[10:52:16] * gilberth doesn't see the connection between a ping packet, poll() and qemu and notes that he is a selecter.
[10:53:00] <kakuhen> I dont understand how poll() returning some random value too fast is causing ping to act funky in a powerpc emulator either
[10:53:02] <kakuhen> but it is
[10:54:14] <gilberth> Is the byte eaten alive? Or would a subsequent read(2) just miss it and return it with the next read(2) and thus not observing the packet structure?
[10:55:00] <gilberth> And is the fd in question even sth packet oriented?
[10:55:23] <kakuhen> well, in my case, I am trying to ping the host from a guest in qemu
[10:55:37] <kakuhen> and it returns a bunch of bytes that dont make sense to me, but ping is upset at it
[10:56:35] <gilberth> Yeah, but is it osx's fault, or was the application taking bets?
[10:57:09] <kakuhen> gonna find out once qemu 6 finishes recompiling
[10:57:50] <kakuhen> I say "recompile" because macports decided to ignore the previous qemu 6 install i deactivated, and grepping for it returned no results, and now it's compiling qemu from source
[10:58:10] <kakuhen> well either it deleted the copy without telling me, or I wiped all inactive ports and forgot to add "and not qemu"
[10:58:15] <kakuhen> * inactive ports from disk and forgot
[11:01:03] <kakuhen> i hope this stupid bug forcing 16:9 resolution is gone -- but i know it's returning, and I'll be in a rock and hard place 
[11:01:23] <kakuhen> i dont even know where to begin to find out why the latest qemu suddenly made 16:10 resolutions impossible when it used to force them
[11:01:24] <moon-child> gilberth: well say I have a marker on some line.  And I kill that line and then yank it somewhere else
[11:01:31] <moon-child> how do you get the marker to move to the new position?
[11:02:48] <gilberth> moon-child: Ah, you want the marker follow into the kill buffer and then to any of the places it is yanked to?
[11:02:49] <kakuhen> ok the ping problem persists
[11:03:20] <moon-child> gilberth: indeed
[11:03:39] <gilberth> kakuhen: I see URG mentioned. This will almost certainly cause pain.
[11:04:14] * kakuhen uploaded an image: (58KiB) < https://libera.ems.host/_matrix/media/r0/download/kotoura.moe/HErHNxLYWSVANRZsvsmVYyLV/image.png >
[11:04:17] <gilberth> moon-child: I could not imagine how that could be useful. Can you give me an example application for that kind of mark?
[11:04:23] <kakuhen> too lazy to find a paste site that works in safari 4.0 so here's a picture
[11:05:13] <moon-child> less likely to happen with an individual line than a group of them.  Say, I mark line 3 of some function, and then I move the entire function somewhere else
[11:06:28] <gilberth> With kill/yank you could yank more than once.
[11:06:58] <moon-child> yeah.  Complications there
[11:07:17] <moon-child> could keep a reference count maybe.  When the reference count goes from 0 to 1 you move the marker location
[11:07:52] <kakuhen> anyway, I suspect this weird truncation thing happening with ping is why the virtual machine is failing to connect to a http server on the host 
[11:08:06] <gilberth> Anyhow. GNU Emacs has sth like decoration for extents and these could be yanked as well. Never actually used that.
[11:09:14] <gilberth> Fonts are a special case of this, but it could be anything.
[11:09:44] <kakuhen> safari 4.0 claims "the server unexpectedly dropped the connection," but hunchentoot doesn't print anything in response, so whatever error is happening is probably happening before an actual http request is sent :)
[11:09:46] <moon-child> interesting
[11:11:54] <gilberth> moon-child: Anyhow, what you want could be had in principle, I see no difficulties. API-wise I could imagine sth like enumerating all instances of that marker, which my have any number of copies left.
[11:12:24] <gilberth> This garbled sentence.
[11:12:51] <gilberth> * Any physical spots where copies of that marker hide.
[11:13:57] <sm2n> Yeah, emacs lets you copy text overlays iirc. Though I have never really seen a good user-facing reason for it
[11:14:08] <sm2n> it's useful programmatically though
[11:14:46] <sm2n> Makes it much easier for external packages to compose
[11:14:58] <gilberth> sm2n: I hate it when it happens by accident. Especially if you mark some r/o text and yank a copy somewhere else and it still is r/o.
[11:15:17] <sm2n> Yup, it's more irritating than not when it happens
[11:15:46] <sm2n> I've had colored fonts and such end up in the minibuffer before I think
[11:16:00] <gilberth> And killing and yanking again will not fix that. Writing the file, killing the buffer and reading the file again, will.
[11:16:16] <sm2n> I think revert-buffer works too
[11:17:09] <gilberth> What if I want that text in my buffer but the r/o attribute and the colour or whatever there is?
[11:17:32] <dave0> i'm doing a round of coffees
[11:17:32] <sm2n> *with the write first
[11:17:52] <sm2n> Still easier than killing and reopening
[11:18:03] <kakuhen> OK so I was suspecting the sungem network thing was causing the problem, but no, even with usb-net I get issues :<
[11:18:21] <gilberth> sm2n: My muslce memory is not fancy enough for revert-buffer.
[11:18:49] <sm2n> Fair enough
[11:32:25] <dave0> freshen your coffee?
[11:33:11] <ck_> Yes I'd like one of those coffees
[11:33:29] <ck_> how do you prepare it most typically in australia?
[11:34:15] <dave0> i don't know what's standard, but i like espresso
[11:34:36] <dave0> but there's an aussie trick with a latte and a tim tam
[11:35:02] <ck_> I like espresso as well, but I also like more volume so I stretch it
[11:35:05] <ck_> what is a tim tam?
[11:35:56] <dave0> https://www.youtube.com/watch?v=k8hEo4N8Nhs
[11:35:56] -ixelp- Tim Tam Slam - How to eat Tim Tams (The Correct Way) - YouTube
[11:36:27] <ck_> :D welcome to 2022, I'm watching a tutorial on how to eat a candy bar
[11:36:34] <dave0> lol
[11:39:35] <ck_> so you said you're 45, right?
[11:39:50] <dave0> yes :-)
[11:40:05] <ck_> that's a couple of years in the future from my perspective. Please, dispense some wisdom
[11:40:28] <dave0> pfft i don't know nothin'
[11:40:45] <ck_> you know /that/ though, that's on par with
[11:41:02] <moon-child> P L A T O
[11:41:08] <moon-child> err, the other dude
[11:41:12] <moon-child> S O C R A T E S
[11:41:25] <ck_> :)
[11:42:19] <ck_> lettering like that makes cinematic intro score play in my head
[12:12:01] <shka> selwyn: i just remembered something
[12:12:27] <shka> if you think that "drumhead" makes you uncomfortable, try "paradise lost" of ds9
[12:16:21] <aeth> to be fair
[12:16:38] <aeth> everything we know about Socrates is basically... "'I said this' -- Socrates" -- Plato
[12:16:57] <aeth> So the philosophical views are interchangeable
[12:17:07] <aeth> (* iirc, there's one other account of Socrates from another author)
[12:17:47] <aeth> Xenophon's the other author. https://en.wikipedia.org/wiki/Socrates#Plato_and_Xenophon
[12:17:57] <moon-child> aeth: well, kinda
[12:18:09] <moon-child> as a historical figure, socrates exists only as an element of plato's psychology
[12:18:16] <moon-child> but as part of the philosophical mythos, they are distinct
[12:19:05] <aeth> well, no, Socrates is a historical figure, it's just that Plato is the only one who wrote down philosophical things "said" by Socrates.
[12:20:06] <aeth> So the difference between the philosophy of Socrates and the philosophy of Plato is really just the difference between early Plato and late Plato
[12:22:30] <aeth> s/early/middle/
[12:23:36] <Aurora_v_kosmose> Regarding McClim, what does it expect users to do regarding multithreading & interface updates relying on slowly-computed outputs? Does it expect manual management or does it provide some standard workflow like Qt does for its own stuff?
[12:30:47] <ck_> hmm, is there a threading demo amongst the examples? I don't know the answer
[12:31:54] <ck_> "Asynchronous commands" maybe?
[12:32:02] * Aurora_v_kosmose shrugs
[12:32:06] <Aurora_v_kosmose> I'll keep looking.
[12:32:43] <ck_> I mean there is a demo called "Asynchronous commands", and it shows a thread increasing a counter after a set delay
[12:32:51] <ck_> that sounds like what you were looking for, no?
[12:32:57] <Aurora_v_kosmose> Probs yeah.
[12:33:21] <Aurora_v_kosmose> I'm tyring to essentially decide what framework probably my first GUI project in years is going to use.
[12:33:31] <ck_> https://github.com/McCLIM/McCLIM/blob/master/Examples/asynchronous-commands.lisp#L95
[12:33:32] -ixelp- McCLIM/asynchronous-commands.lisp at master · McCLIM/McCLIM · GitHub
[12:33:39] <Aurora_v_kosmose> (Work projects excluded ofc, but then work doesn't pay me to code CL ;_;)
[12:33:51] <ck_> oh, then I don't know whether I'd recommend mcclim, as unfortunate as that statement is
[12:34:12] <Aurora_v_kosmose> Ah?
[12:35:37] <ck_> can't say much more without knowing an outline of your plans, but I've lost some enthusiasm about the state of it over the few years I've been involved with it
[12:36:29] <ck_> it could be that you'll run into a dead-end at an unexpected time, just because its difference in concepts lead to implementation gaps where you wouldn't expect them, coming from mainstream environments
[12:36:45] <ck_> if it's just for fun and games, go ahead and use mcclim, absolutely
[12:37:49] <ck_> if your main interest on the other hand is the non-gui part, and you just want something to reliably and easily display a gui, I'd recommend something else. tcl/tk maybe. I hope I could express what I mean clearly enough
[12:38:30] <Aurora_v_kosmose> Hm, yeah. The GUI display is absolutely not the main purpose of my program.
[12:38:37] <Aurora_v_kosmose> It's mostly that I intend for it to also be usable by normies, so a GUI is mandatory.
[13:17:23] *** Joins: treflip (~user@user/treflip)
[13:26:10] <moon-child> aeth: I'm not saying he isn't a historical figure, only that everything we know about him comes from plato and is therefore coloured by plato's perceptions
[13:33:57] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[13:34:29] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[13:36:32] <kakuhen> ok so i wasted a ton of time setting up mac os 9 in a vm to play with my website on an old browser just to find out i was doing things the wrong way this entire time
[13:37:05] <kakuhen> instead of connecting directly to the hunchentoot server, i was supposed to set up a reverse proxy with nginx; now things work
[13:37:10] <kakuhen> I learned that IE 4.5 does not support much CSS2.
[13:37:20] <kakuhen> But the webpage renders flawlessly on Safari 4
[14:32:29] <hayley> gilberth: Congratulations, you guessed right!! "And zero tag means no GC pressure"
[14:37:49] <moon-child> I wonder if he also objects to symbol interning
[14:38:21] <moon-child> O(n) EQ, anyone?
[14:39:36] <hayley> I'm dying inside.
[14:39:56] <hayley> The guy completely missed my comment on how OCaml avoids calling caml_alloc where possible, instead using inline allocation instructions.
[14:46:22] <hayley> "As someone who has worked on multiple Common Lisp implementations, and studied the OCaml memory management system before, these points are embarrassing to refute. You don't really sound like you know what you're talking about here."
[14:46:23] <hayley> Too rude?
[14:47:07] <hayley> Oh, I should add that my name is in the errata for the GC Handbook, just to rub it in.
[14:47:15] <shka> i really don't like "as someone"
[14:47:15] <moon-child> depends on your goal
[14:47:17] <shka> annoying
[14:47:55] <Gnuxie> Yeah don't appeal to your own authority its bs 
[14:47:56] <hayley> "Quit ya bullshit" but without the word "bullshit"
[14:48:08] <Gnuxie> Just make them look like an idiot 
[14:48:18] <Gnuxie> Well,  the idiot they are 
[14:48:36] <moon-child> Gnuxie: I don't entirely buy that.  At some point it's unproductive to try to engage with somebody, and you have to communicate that somehow
[14:52:21] <epony> telepathy is still in its early deployment stages
[14:55:58] * hayley left a comment
[15:00:11] <moon-child> 'worse' is really strong.  Apt, but very strong (if you still hope for your point to be taken, which--I wouldn't, but ¯\_(ツ)_/¯).  Maybe just go for 'moreover'
[15:00:41] <hayley> Sure.
[15:06:35] * moon-child tea
[15:06:37] <moon-child> mint tea
[15:07:05] * hayley struggles to find the code in OCaml wherein a Cop(Calloc, ...) IR thingy is turned into allocation code.
[15:07:43] <hayley> But, given that the alternative is to insert the appropriate instruction to call a C function for allocation, it seems very unlikely that they'd have two things that both end up calling into C. 
[15:08:26] <hayley> https://github.com/ocaml/ocaml/blob/trunk/asmcomp/selectgen.ml#L464 okay, Calloc becomes Ialloc.
[15:08:27] -ixelp- ocaml/selectgen.ml at trunk · ocaml/ocaml · GitHub
[15:10:46] <hayley> asmcomp/amd64/proc.ml L319 says Ialloc only clobbers R10 and R11 at worst.
[15:12:21] <hayley> https://github.com/ocaml/ocaml/blob/trunk/asmcomp/amd64/emit.mlp#L595-L611 GOTCHA!!!
[15:12:22] -ixelp- ocaml/emit.mlp at trunk · ocaml/ocaml · GitHub
[15:42:57] <hayley> Next theory is that this guy isn't even generating optimised code!
[15:43:39] <moon-child> my
[15:45:18] <hayley> Note that <https://github.com/ocaml/ocaml/blob/trunk/asmcomp/amd64/emit.mlp#L597> only does inline allocation if `env.f.fun_fast` which sounds like optimising. Otherwise, caml_alloc«words» is called if there are few words. 
[15:45:19] -ixelp- ocaml/emit.mlp at trunk · ocaml/ocaml · GitHub
[15:54:38] <hayley> moon-child: Compare https://github.com/hanabi1224/Programming-Language-Benchmarks/issues/144#issuecomment-1003707145 and the call graphs before. They have to be doing something dumb.
[15:54:39] -ixelp- Could you please add SBCL Common Lisp to the languages? · Issue #144 · hanabi1224/Programming-Language-Benchmarks · GitH [...]
[15:59:37] * hayley puts https://www.youtube.com/watch?v=_P7V5j8Iwh4 on jukebox
[16:10:34] * hayley also can't reproduce any results for either the toy tree allocator, or the actual benchmark. Hooray!
[16:12:04] <pl> hayley: imagine if they had to deal with multithreaded allocator?
[16:12:25] * hayley uploaded an image: (65KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/CmHRgDmoaJCUDmulwbjCXIUn/boehm.svg >
[16:12:28] <hayley> Have a call graph just to rub it in.
[16:13:46] <hayley> https://www.youtube.com/watch?v=bjIvD_Ma8bc "No [C calls]! Ya fuckin' stupid Hans?"
[16:13:47] -ixelp- Oops... No bullets..:))) - YouTube
[16:16:00] <hayley> pl: Well, yeah, part of it in SBCL is to avoid banging on a global bump pointer. But it's orthogonal to inline allocation or not.
[16:16:02] <hayley> e.g. tcmalloc has caches, but you still call malloc.
[16:16:06] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:16:58] <pl> hayley: I was thinking more of "now you have bump pointer per thread"
[16:18:00] <hayley> Yeah, but the logical flaw this guy is making is thinking that the allocator is always entered by a function call.
[16:35:59] * hayley decides to call it for the night, which should have been done two hours ago.
[16:37:47] <hayley> "U may need to make field blah mutable to make the example general" Or I could make actual binary trees, which can't be unboxed cause you'd need infinite memory for that.
[16:38:00] <selwyn> shka: will check it out
[16:39:55] <hayley> This guy can't really do any logic at all, as far as I've seen.
[16:42:47] <hayley> I guess I've had enough of that thread, honestly. Look where the last time I had a dumb discussion got me. I even had to convert TeX to org-mode markup for that!
[16:45:07] <hayley> (The last time, what I said was quoted in a shit article I mentioned before in #lispcafe, and that provoked me to make a web version of The Lisp "Curse" Redemption Arc)
[17:02:34] <selwyn> hayley: remember to have fun on the computer
[17:35:22] <shka> yes
[17:35:46] <shka> there are 3 axis of computer language quality
[17:35:55] <shka> practicality/stupid/boring
[17:36:29] <shka> for instance java is practical, not very stupid (annoying maybe), and maxes out boring
[17:37:43] <selwyn> i don't have that much experience with java since jdk 1.5.0, but modern java does seem to improve over time
[17:37:49] <shka> and lisp is not boring, it is actually really fun
[17:38:27] <shka> selwyn: no, java is fine language, it is just really boring and "ritualistic"
[17:38:36] <shka> but it ain't stupid
[17:38:54] <selwyn> i agree that it is well designed
[17:39:04] <shka> there are reasons behind every aspect of it
[17:39:10] <selwyn> but they seem to come up with measures to decrease the boring
[17:39:28] <selwyn> iirc you get lambdas now, though i assume its syntactic sugar around anonymous classes
[17:39:40] <shka> it is
[17:39:40] <ck_> reasons for everything, sometimes even a ReasonObserver, or a ReasonBean
[17:39:50] <shka> so no real closures 
[17:40:20] <selwyn> all produced by the ReasonBeanObserverFactory
[17:40:58] <ck_> ..Singleton
[17:41:03] <ck_> aren't patterns awesome
[17:41:11] <shka> the main problem with java, is that it tries to be a good language for large teams composed of interchangeable members
[17:41:47] <shka> that's what i think at least
[17:42:02] <shka> but by using this optic, java (and C#) makes sense 
[17:43:25] <ck_> I agree with that, the rigidity of it makes people more easily replaceable
[17:44:02] <selwyn> shka: but does it actually achieve that
[17:44:14] <selwyn> i never really felt that java was genuinely modular
[17:44:35] <selwyn> though it might often be better than python i suppose
[17:44:51] <shka> selwyn: perhaps, but the problem with that whole idea is that the best software is done in just the opposite way 
[17:45:18] <shka> also, notice that extreme modularity comes with infinite numbers to combine code 
[17:45:22] <shka> (vide CL)
[17:45:30] <selwyn> infinte numbers?
[17:45:42] <shka> *infinite number of ways
[17:45:43] <shka> sorry
[17:45:51] <selwyn> oh right
[17:46:19] <selwyn> the last big project i did before discovering cl was doing an android app for a tech startup
[17:46:20] <shka> and you don't want to do that because it is counter productive to your goal
[17:46:41] <shka> oh gosh android
[17:46:50] <selwyn> so much of the code base ended up being anonymous classes trying to be lambdas
[17:47:03] <shka> i really don't appreciate "serialize everything" of the android
[17:47:08] <selwyn> hm
[17:47:36] <selwyn> i didn't dislike the experience but as i say i really didn't know any better
[17:47:45] <selwyn> i would probably find android dev frustrating now
[17:47:55] <ck_> it is
[17:49:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:50:07] <selwyn> i liked the xml layout editor
[17:50:44] <selwyn> it makes working with designers much easier
[17:51:00] <shka> yeah... i still would rather construct trees of objects
[17:51:06] <shka> like, you know, in lisp...
[17:51:08] <ck_> yeah I just very recently tried that editor, ro had to
[17:51:25] <selwyn> xml has trees :p
[17:51:40] <ck_> after I failed to use the toolset from the command line only, I installed android studio
[17:51:43] <ck_> made me sad
[17:51:56] <shka> yeah, but do you really need separate language to express a tree?
[17:51:59] <selwyn> do you have a specific project in mind?
[17:52:15] <selwyn> i feel that it is very difficult to avoid android studio
[17:52:16] <ck_> me? it was for work
[17:52:28] <selwyn> i see
[17:52:56] <ck_> I wanted to put a local page into the application that you'd see while things were loading or the device was offline
[17:54:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[17:58:18] <selwyn> was it very difficult
[17:58:41] <selwyn> it was very difficult to visualise animations and transitions iirc
[17:58:47] <selwyn> yet this is a huge part of smartphone ux
[18:00:18] <ck_> I only had one day to do it and I failed to do it "properly", I couldn't understand the details on how the layouting worked, so it became just a local html asset
[18:00:55] <ck_> I found that if I put for example a button on top of a webview, the button wouldn't show until after the webview finished loading its content
[18:01:31] <selwyn> lol
[18:01:40] <selwyn> yeah sounds like android
[18:02:15] <selwyn> well, condolences
[18:02:48] <ck_> like I said -- next life: definitely gardener
[18:02:53] <ck_> thank you
[18:03:30] <selwyn> the other app i developed was a graphical calculator which could solve equations and such
[18:03:38] <selwyn> plot graphs etc.
[18:03:57] <ck_> neat. did you base it on some physical device?
[18:04:17] <selwyn> not really
[18:04:45] <selwyn> the main interface for inputting equations was loosely inspired by calculators i had used
[18:07:59] <selwyn> https://lh3.googleusercontent.com/PAY2o0kDRb5y1tSa82BEmsgMJAONSMDfxkE_MVKprXLqP58JvTPFElwkYLN_qoO-Qw=w1024-h768-rw
[18:08:38] <ck_> blast from the past
[18:09:11] <ck_> i mean the device resolution and all that
[18:09:21] <ck_> is there also a screenshot of a graph?
[18:09:22] <selwyn> i had a basic phone even for the time
[18:09:27] <selwyn> https://lh3.googleusercontent.com/4_Jq15yB8EyDtmOCB_2mSwjclxBHHqYbl1zkQ_fMVtCJ0I52Ygw-J984bXkEQD8eElwU=w1024-h768-rw
[18:12:22] <ck_> my first 'smart' phone was a palm pre, probably a similar screen size. It was nice. I miss those days a little bit
[18:12:28] <selwyn> the equation ui was done in a ~13 hour hacking session
[18:12:32] <selwyn> longest i ever did
[18:12:57] <ck_> what were your goals with that?
[18:13:03] <selwyn> in 2011 there was a moral panic here over the blackberry
[18:13:07] <selwyn> which is very amusing to remember
[18:13:11] <ck_> do you ken tilton and his algebra tutoring thing?
[18:13:20] <ck_> 2011, that's like yesterda.. oh.
[18:13:33] <selwyn> lol
[18:13:43] <selwyn> i just wanted to make a calculator and i thought it might be popular
[18:14:03] <selwyn> but i made no effort to do marketing or sales
[18:14:35] <ck_> it's surprisingly competitive in my very cursory estimation. It seems to be a popular thing to implement and put on a store
[18:14:51] <ck_> some music? https://www.youtube.com/watch?v=lCeebWgjrrU
[18:14:52] -ixelp- Leyenda by Albeniz in HD - Andres Segovia - YouTube
[18:15:41] <selwyn> at the time i thought that it could outcompete the opposition in at least a few respects
[18:18:54] <selwyn>  but even if true, i still hadn't made any attempt to figure out if anyone would purchase what i was selling
[18:19:10] <selwyn> which is even more important than making the product
[18:19:26] <ck_> yes, that's a tough lesson
[18:19:31] <selwyn> well
[18:19:39] <selwyn> i made it in my spare time and didn't have high expectations
[18:20:04] <selwyn> but i wish we had done some proper marketing when we were doing our startup
[18:21:19] <ck_> were the two connected?
[18:21:29] <selwyn> the startup was a separate thing
[18:22:20] <selwyn> it was a nightlife/events app which recommended events based on your personal preferences
[18:22:41] <selwyn> and you could buy tickets through it
[18:22:57] <ck_> sounds like a pretty good idea to me
[18:23:02] <selwyn> well
[18:23:04] <ck_> clubbing recommender system
[18:23:18] <selwyn> it was a huge project for us
[18:23:22] <ck_> but I'm absolutely not in that target demographic
[18:23:28] <selwyn> two guys just out of university without a clue
[18:24:19] <selwyn> thing is, when you sell tickets there are some best legal practices you ought to comply with
[18:25:00] <selwyn> which means getting a legal team
[18:28:59] <ck_> doing the recommending first wasn't an option?
[18:30:22] <selwyn> the business model (which we also didn't plan very well) was to take commission from the ticket sales
[18:30:48] <selwyn> margins would have been very tight in the best case
[18:32:37] <selwyn> iirc we didn't want to skimp on the only part of the app that would make $
[18:32:58] <ck_> understandable. I respect the initiative
[18:36:08] <selwyn> it possibly did get me a phd place, and it means if i do it again i know what to avoid
[18:38:35] <selwyn> but i think pl will be the one to make waves in the startup world
[18:41:23] <dave0> nite all
[18:42:04] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:51:05] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[18:59:25] <ck_> what is pl making?
[19:00:35] <pl> I think selwyn meant something about programming languages? Or did they mean my side project, hmm... 
[19:01:23] <selwyn> your plan to make a non-us cloud computing platform (?)
[19:01:38] <ck_> Galilazure! I can see it
[19:05:15] <pl> Well, not much of a computing platform. We have this a plenty. But a one stop shop for considerable amount of companies, yes ;-)
[19:06:05] <selwyn> indeed
[19:13:55] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:155:5b5f:e3c2:b079)
[19:16:48] *** Joins: notzmv (~zmv@user/notzmv)
[19:42:56] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:58:17] <selwyn> is the fixed output of nuclear power plants a disadvantage
[20:13:50] <ck_> fixed in what way?
[20:14:24] <ck_> (and compared to what)
[20:16:38] <edgar-rft> power can increase exponentially when the power plant explodes
[20:43:56] <Alfr> edgar-rft, don't you have to reduce the time exponentially as well, there's only so much energy within a power plant ...
[20:47:06] <edgar-rft> true, explosions with fixed power output could be useful to limit the damage
[20:54:47] <shka> selwyn: i don't understand the question honestly
[20:55:25] <selwyn> i was under the impression that fixed output is good because e.g. renewables don't have this and its a problem
[20:55:43] <shka> oh, ok
[20:55:48] <selwyn> but i have heard that variable output is also desirable
[20:55:59] <shka> well, power output of nuclear reactor is adjustable
[20:56:14] <shka> and if you are going with SMR, doubly so 
[20:56:29] <ck_> still don't get it, isn't every nuclear reactor equipped with moderation rods and all that
[20:56:30] <selwyn> surely you can just turn the thing on and off every so often to get a very crude variable output
[20:56:56] <shka> besides, i think that future is "we need all the carbon free power we can get, and use that to remove carbon from the atmosphere or we are going to die"
[20:56:59] <ck_> I mean, a nuclear power plant is a steam engine so to speak isn't it
[20:57:29] <shka> ck_: yeah, turbine has range of output
[20:57:43] <shka> but if you have multiple smaller turbines, then you are golden
[20:57:48] <shka> besides, same applies to coal
[20:57:54] <ck_> I was about to say that
[20:58:14] <shka> more importantly, you can ADJUST the output and you cant do that with solar at night
[20:58:28] <Aurora_v_kosmose> Wasn't the moral panic with the blackberry something about them all being pwn'd or something?
[20:58:58] <shka> honestly this feels like completely non-issue
[20:59:07] <selwyn> the panic was that the 2011 riots were (supposedly) coordinated by blackberry, which (supposedly) made it impossible for the police to keep up
[20:59:57] <Aurora_v_kosmose> Ah yes, the kind of panics spouted by people who don't understand technology in the slightest. My favorite kind (to hate).
[21:00:12] <ck_> Aurora_v_kosmose: you mean "politicians" ?
[21:00:22] <ck_> (sry4cheapjoke)
[21:00:38] <Aurora_v_kosmose> ck_: While they're almost all within that set, unfortunately it includes more than just them.
[21:01:04] <selwyn> it has been a while since then, but my conclusion nearer the time was that the police deliberately soft pedalled the response in order to make the case that they needed more police powers in order to do their job
[21:01:22] <Aurora_v_kosmose> Sounds corrupt, so probably right.
[21:01:22] <selwyn> while they blamed smartphones
[21:02:29] <ck_> damn kids and their .. smartphones
[21:05:21] <selwyn> shka: i heard about it in response to this video https://www.youtube.com/watch?v=_p_wxYN2x8I
[21:05:22] -ixelp- Росатом. Итоги 2021. Реактор нового поколения и другие события - YouTube
[21:05:31] <selwyn> which features many nuclear goodies
[21:05:49] <selwyn> currently trying to figure out wtf is at 10:51
[21:06:46] <ck_> I still struggle with cyrillic, maybe I should put some focused exercise in :) I know P is R, but.. .oO( "Pocatom Ntorn 2021. peaktop hoboro [...]" )
[21:07:47] <selwyn> i learnt greek and after that cyrillic is not that hard
[21:07:58] <selwyn> i can't pronounce anything properly though
[21:08:01] <MichaelRaskin> selwyn: 10:51 is Rosatom working on carbon composites for the reactor construction
[21:08:09] <selwyn> thanks
[21:18:21] <gilberth> ck_: Yeah, all mixed up; Н is N and И is I, Я is YA, В is W. Easy. And г is G.
[21:18:57] <selwyn> recently i found out about a native american language that was first written using a broken typewriter
[21:19:05] <selwyn> the only all caps alphabet in the world
[21:21:38] <gilberth> Italic is fun. What looks like "m" is "т".
[21:26:22] <edgar-rft> "italic" is called "corsivo" in italy, next task is finding out how "corsivo" is called in Corsica.
[21:27:06] <selwyn> uh 
[21:27:13] <selwyn> 'italic' = 'cursive'?
[21:28:18] <gilberth> More or less. But not quite.
[21:28:46] <edgar-rft> I think in germany "italic" = "kursiv"?
[21:29:15] <selwyn> in the uk, cursive handwriting is afaict exclusively taught in catholic schools, so it is something of a shibboleth to determine someone's background
[21:30:22] <gilberth> Yes. We call "italic" "kursiv". But a "Kursivschrift" is something different.
[21:33:07] <selwyn> nothing improved my handwriting as much as studying maths
[21:33:16] <gilberth> There also is Kurrent, which is what I almost use when handwriting German.
[21:33:53] <gilberth> selwyn: Well, the scripts taught at school are just plain nuts.
[21:34:03] <ck_> selwyn: what germanic letter did you use most often? https://en.wikipedia.org/wiki/S%C3%BCtterlin#/media/File:S%C3%BCtterlin-A.png ?
[21:34:16] <selwyn> uh
[21:34:23] <ck_> I seem to remember that from some formal methods course or another
[21:34:32] <ck_> set of algebras maybe
[21:34:46] <edgar-rft> ah, yes, "cursive" matches "Kursivschrift" while "italic" in germany is "kursiv", what a mess :-(
[21:34:54] <gilberth> I quit using a connected handwriting somewhen at grade 8 or so and development an italic coming from printed letters. These days I adopted most of Kurrent. Way faster to write.
[21:34:55] <selwyn> i don't know about this sutterlin but fraktur letters are used in lie algebras
[21:35:07] <selwyn> which i found tricky to write
[21:35:33] <gilberth> Sütterlin also is one of those unpractical scripts already.
[21:36:16] <edgar-rft> my grandma liked it :-)
[21:36:44] <semz> just let your hand spaz, when the reader sees an unreadable letter he'll assume it's fraktur and guess which letter it is from the context :-)
[21:37:02] <edgar-rft> ...but she still grew up under Emperor Willy :-)
[21:37:04] <ck_> or it could be a bad attempt at writing xi
[21:38:19] <selwyn> is there a simple reason why germany has so many typefaces
[21:38:31] <gilberth> selwyn: Fraktur is not a script for handwriting. It's called "Fraktur" for a reason.
[21:39:58] <gilberth> selwyn: I could only guess. Starting with Süterlin it was all constructed scripts for teaching and went downhill ever since. These scripts appear to be designed to torture students.
[21:40:04] <selwyn> lol
[21:40:24] <shka> selwyn: fiber
[21:40:37] <selwyn> similar story with cursive
[21:40:51] <shka> i have no idea why rosatom is doing composite materials now
[21:40:52] <selwyn> moral? dietary? optics?
[21:40:59] <selwyn> oh in the video
[21:41:43] <shka> i mean, they say it is a carbon fiber, no clue what for
[21:41:49] <gilberth> Many people I know at one time quit using the official school script because it was slow, hard to get looking nice and pretty hard to read because of that. Many switched to a printed script and developed an italic by connecting the letters as they gained speed with that.
[21:42:15] <shka> and since it is Russia, i suspect something military 
[21:42:17] <selwyn> my handwriting improved over time
[21:42:42] <shka> they are building that nuclear propulsion cruise missile 
[21:42:42] <selwyn> if its a secret they wouldn't put it in a promotional video
[21:42:51] <MichaelRaskin> shka: they claim they are mostly planning to produce carbon fiber for their own production
[21:43:08] <MichaelRaskin> Out of it
[21:43:17] <shka> MichaelRaskin: yeah, i understand some Russian, i picked that up, but it is Rosatom
[21:43:25] <shka> why they would need carbon fiber?
[21:43:26] <MichaelRaskin> You know, need something done right, do it yourself
[21:43:44] <MichaelRaskin> Why would they not need it?
[21:44:07] <gilberth> What is curious is, that my German handwriting looks very different from my English handwriting. And I have two German handwritings. One which is pretty much Kurrent, which I use for myself, but nobody could read because the script is little known, and some other more looking like printing characters, for others to read.
[21:44:45] <shka> MichaelRaskin: well, carbon fiber is not great at high temperatures, it has no predictable fatigue like metal alloys, is not neutron radiation resistant...
[21:45:01] <shka> i am hard pressed at finding use case for carbon fiber in the nuclear technology
[21:45:27] <shka> unless it is produced for aviation 
[21:45:40] <MichaelRaskin> What you have described mostly is about the inner loop, I think
[21:46:50] <shka> oh, there is that secretive but cool nuclear powered space tug 
[21:47:11] <shka> but again, not sure what they would need carbon fiber there for 
[21:47:48] <shka> gotta wait and see i guess
[21:48:48] <shka> MichaelRaskin: is rosatom doing anything not strictly nuclear?
[21:48:57] <shka> like rockets?
[21:50:33] <ck_> rockets can be nuclear
[21:50:43] <ck_> cold war II here we goooo (ramjets etc)
[21:51:11] <MichaelRaskin> Even in a reactor there is a ton of stuff in second circuit and out…
[21:51:47] <shka> MichaelRaskin: sure, but i wonder what is the merit of using expensive and finicky carbon fiber
[21:51:57] <MichaelRaskin> I think Rosatom does just the reactor part for nuclear tug
[21:53:27] <MichaelRaskin> That video also mentions Rosatom somehow ending up involved in recycling
[21:53:35] <shka> waaait
[21:53:42] <shka> ok, that makes sense actual
[21:54:22] <shka> MichaelRaskin: molecular carbon fiber recycling experimental setup?
[21:54:36] <shka> that is something that is legit good use for nuclear power
[21:55:01] <shka> (in theory)
[21:55:11] <selwyn> how does nuclear help with that
[21:55:16] <selwyn> excessive energy requirements?
[21:55:23] <MichaelRaskin> Apparently some more normal one
[21:56:10] <MichaelRaskin> I think it's more that they had somewhat relevant parts and ended up vertically integrating that
[21:56:42] <shka> selwyn: yes
[21:58:15] <shka> selwyn: also, pyrolisis
[21:58:24] <shka> *pyrolysis
[21:59:31] <selwyn> https://en.wikipedia.org/wiki/Pyrolysis#/media/File:Verkohlte_Pizza_2013-04-01-2658.jpg lol
[22:00:28] <semz> yum
[22:01:35] <shka> https://www.intechopen.com/chapters/59532
[22:01:36] -ixelp- Characterization of Carbon Fibers Recovered by Pyrolysis of Cured Prepregs and Their Reuse in New Composites | IntechOpe [...]
[22:03:16] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[22:18:22] <shka> eh, i am overthinking it
[22:24:57] <shka> selwyn: have i used you to dump my ML learning model?
[22:25:05] <shka> well, idea for it
[22:25:05] <ck_> it's 2022 and I am paralyzed by simple things like "which vaccum cleaner do I need". the future is stupid
[22:25:07] <selwyn> no?
[22:25:20] <shka> ck_: one that sucks
[22:25:23] <shka> DUH
[22:25:41] <selwyn> feel free to try me
[22:25:52] <ck_> akckshually I need one that makes the atmosphere blow most
[22:25:52] <selwyn> today i learnt about an ai that plays monopoly
[22:25:59] <ck_> (s01e02 (?) reference)
[22:26:07] <ck_> does it win
[22:26:17] <selwyn> yes it does
[22:26:44] <selwyn> but it doesn't learn appear to learn any superhuman strategies
[22:27:09] <shka> selwyn: it combines isolation forest style trees with reservoir sampling, and perceptrons
[22:27:19] <selwyn> https://www.youtube.com/watch?v=dkvFcYBznPI
[22:27:20] -ixelp- AI Learns Insane Monopoly Strategies - YouTube
[22:27:30] <selwyn> (a misleading title)
[22:27:55] <ck_> I'm watching
[22:28:00] <ck_> hope it wins a beauty contest
[22:28:42] <shka> so you have a tree, and leaf of that tree has a fixed size set of perceptron units
[22:28:47] <selwyn> ok
[22:28:54] <shka> for instance, 20 perceptrons per leaf
[22:29:57] <shka> tree starts as just one leaf, you put elements into it and some of the elements get accumulated into it via reservoir sampling
[22:31:00] <shka> once the sample reaches split condition (for instance average distance from the center reaches threshold) leaf splits into tree with two fresh leafs
[22:31:33] <shka> perceptrons are randomly moved to left and right leaf, and 10 fresh perceptrons are created 
[22:31:40] <selwyn> ok
[22:31:56] <shka> but before that!
[22:32:19] <shka> you push element down the tree, normal stuff, find a leaf which has those 20 perceptrons
[22:32:30] <shka> and some will be activated
[22:33:01] <shka> if it is first element in the sequence, all are marked as active with the value of 1
[22:33:30] <shka> so this is the start of the sequence learning
[22:33:35] <shka> and to move forward
[22:33:53] <shka> now imagine forest of such trees let's say 5 trees
[22:34:11] <shka> you pull 20 active perceptrons out of each 
[22:34:28] <shka> you mark those perceptrons as active
[22:34:39] <shka> the next element of the sequence goes in
[22:35:00] <shka> so you pull another 20 perceptrons out of each tree
[22:35:07] <shka> and here you actually learn weights
[22:36:34] <shka> so you are going to assume that each of those freshly pulled perceptrons is connected to each perceptron from the previous iteration
[22:36:56] <shka> some new connections will have to be initialized, some could exist previously 
[22:37:26] <shka> anyway, calculate boring sum of weight*(1 or 0) for each
[22:38:09] <shka> and select top 5 with the highest score from each leaf
[22:38:25] <shka> mark those as active, move forward to the next sequence element
[22:38:37] <shka> oh, and update weights
[22:38:50] <shka> because we are going to learn those 
[22:40:00] <shka> you can also have some useful prediction connected to the current active leafs
[22:40:10] <shka> anyway, the idea is that this way you can have 
[22:40:30] <shka> 1) sequential model without back propagation 
[22:41:22] <shka> 2) dynamicly added perceptron units depending on the input which means that model itself sort of does meta-learning by itself 
[22:41:42] <shka> 3) also, this thing is actually on-line learning
[22:42:11] <shka> so you can get predictions as model is being learned
[22:42:44] <shka> i am tempted to give it a go with my counter-strike data set
[22:42:56] <selwyn> sounds fun
[22:43:25] <selwyn> i don't understand lots of the details tbh
[22:43:40] <selwyn> but 2) reminds me of 'neat' https://en.wikipedia.org/wiki/Neuroevolution_of_augmenting_topologies
[22:44:47] <shka> well, long story short, sequential model, but recursive nature is achieved by simply subset selection
[22:44:50] <selwyn> when a perceptron is activated - you mean it is connected to perceptrons in upper and lower layers to form a neural network that corresponds to the topologt of the tree?
[22:45:39] <shka> selwyn: i mean that there are no explicit layers, instead everything is densly connected within one layer
[22:45:52] <selwyn> ok
[22:46:06] <shka> and only small, fixed number of perceptrons can be active because one leaf per tree can be selected
[22:46:41] <shka> so 99% of that network at any given time is just 0
[22:49:50] <selwyn> i see
[22:50:00] <shka>  you know that meme with "what if we would use 100% of our brain"?
[22:50:08] <selwyn> vaguely
[22:50:50] <shka> well, i think that this is the point, brain is not 100% active by design
[22:51:03] <Aurora_v_kosmose> The amusing thing is that the one known case that resembles 100% activation is epilepsy.
[22:51:14] <shka> Aurora_v_kosmose: right
[22:51:23] <selwyn> the factoid that it is only 10% active is bullshit
[22:51:52] <shka> there has to be some filter mechanism which selects what is active and what is not
[22:51:56] <Aurora_v_kosmose> It varies based on whatever it's doing. But 100% activity means indiscriminate activation, which is no good.
[22:53:04] <shka> and NOT being active is perhaps the key to what makes biological neural networks so flexible 
[22:53:21] <selwyn> hm
[22:53:48] <selwyn> i wonder if there is an analogy to physical fitness
[22:54:35] <Aurora_v_kosmose> selwyn: 100% muscular use is feasible and known as hysterical strength. It's also accompanied with major muscle tearing & bone fractures.
[22:54:49] <selwyn> i mean more in terms of lifestyle
[22:55:02] <shka> well, maybe how not all muscle fibers contract at the same time to obtain fine motor control
[22:55:03] <selwyn> elite athletes tend to rest as much as possible, when they are not training very hard
[22:57:37] <selwyn> i.e. 100% muscular use 5% of the time, combined with 95% rest
[22:58:17] <shka> i would not build analogies on that
[22:58:19] <Aurora_v_kosmose> Eh... based on recorded feats, I'd think it's closer to 65% use
[22:58:28] <Aurora_v_kosmose> At most.
[22:58:42] <selwyn> fair enough
[22:58:45] <selwyn> i am making up these numbers
[22:59:01] <shka> especially since "elite athletes" are everything but natural
[22:59:19] <shka> they are abusing corner cases of human physiology :P
[22:59:45] <shka> human is not a husky dog :P
[23:00:48] <selwyn> the way i am training at the moment is inspired a lot by neuroscience actually
[23:00:53] <selwyn> i never felt so strong
[23:03:58] <selwyn> anyway, i agree that attention mechanisms are important
[23:06:26] <shka> well, regardless, i will give this model a shot later this year
[23:07:16] <shka> i still have a pending blog post to finish
[23:29:03] <selwyn> i should keep a blog this year
[23:38:02] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[23:38:22] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[23:41:40] *** Joins: minion (~minion@common-lisp.net)
[23:41:41] *** Server sets mode: +nrt 
[23:42:12] *** Quits: Alfr (~Alfr@user/alfr) (Killed (tantalum.libera.chat (Nickname regained by services)))
[23:42:16] *** Joins: Alfr (~Alfr@user/alfr)
[23:43:54] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[23:43:54] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (*.net *.split)
[23:43:54] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[23:43:54] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[23:43:54] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[23:44:43] *** Joins: remexre (~remexre@user/remexre)
[23:45:01] *** Joins: jm (~jm@pool-74-104-177-164.bstnma.fios.verizon.net)
[23:45:26] *** Joins: robin_ (~robin@user/terpri)
[23:45:32] *** Joins: massimo_zaniboni (~quassel@mail.asterisell.com)
[23:45:35] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: mzan (~quassel@mail.asterisell.com) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:155:5b5f:e3c2:b079) (Quit: No Ping reply in 180 seconds.)
[23:45:37] *** Quits: jmorrison_ (~jm@pool-74-104-177-164.bstnma.fios.verizon.net) (Remote host closed the connection)
[23:45:37] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Read error: Connection reset by peer)
[23:45:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[23:45:59] *** Joins: random-nickname (~random-ni@87.116.167.125)
[23:46:55] *** Joins: elflng (~elflng@5.28.137.182)
[23:47:14] *** Quits: shka (~herr@109.231.0.226) (*.net *.split)
[23:47:15] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[23:47:15] *** Quits: ixelp (~ixelp@p5b157756.dip0.t-ipconnect.de) (*.net *.split)
[23:47:15] *** Quits: clintm (~user@h118.153.91.75.dynamic.ip.windstream.net) (*.net *.split)
[23:47:16] *** Quits: Catie (~user@user/catie) (*.net *.split)
[23:47:16] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[23:50:17] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[23:52:41] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[23:52:42] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 252 seconds)
[23:52:43] *** Quits: hayley (~theemacss@user/hayley) (Ping timeout: 268 seconds)
[23:52:53] *** Server sets mode: +nrt 
[23:54:05] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
