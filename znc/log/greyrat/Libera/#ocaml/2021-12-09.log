[00:15:05] *** Quits: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:21:31] *** Quits: bartholin (~bartholin@158.110.70.215) (Quit: Leaving)
[00:27:31] *** Joins: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4)
[00:33:05] *** Joins: spip (~bobo@82.142.17.127)
[00:33:29] *** spip is now known as Guest1107
[00:35:19] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[00:36:43] *** Quits: Guest9089 (~bobo@37.168.206.122) (Ping timeout: 268 seconds)
[00:37:43] *** Quits: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:45:21] <Anarchos> Is there something i can do to get some merlin support for my local ocaml 5.00.0+dev0-2021-11-05 toolchain version ?
[00:51:12] *** Quits: mro (~mro@port-92-195-227-4.dynamic.as20676.net) (Read error: Connection reset by peer)
[00:51:36] *** Joins: mro (~mro@port-92-195-227-4.dynamic.as20676.net)
[01:00:37] *** Joins: rgrinberg (~textual@187.223.250.159)
[01:03:52] *** Quits: mro (~mro@port-92-195-227-4.dynamic.as20676.net) (Ping timeout: 256 seconds)
[01:08:11] *** Joins: vicfred (~vicfred@user/vicfred)
[01:12:33] *** Quits: rgrinberg (~textual@187.223.250.159) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:20:46] *** Joins: rgrinberg (~textual@187.223.144.204)
[01:39:11] *** Joins: mro (~mro@2002:5cc3:e304:0:19a2:3228:4ac4:85d4)
[01:47:24] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[01:51:13] *** Joins: average (uid473595@user/average)
[01:55:59] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:14:53] *** Quits: jlrnick (~josephler@2a01cb040a15940064592a4092f13cc6.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[02:20:56] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 268 seconds)
[02:21:33] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Ping timeout: 268 seconds)
[02:33:48] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[02:38:30] *** Quits: jonasbits (~quassel@185.97.32.58) (Ping timeout: 256 seconds)
[02:41:39] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 265 seconds)
[02:42:03] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[02:45:18] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Ping timeout: 256 seconds)
[02:51:37] *** Joins: rgrinberg (~textual@187.223.250.159)
[02:59:03] *** Quits: rgrinberg (~textual@187.223.250.159) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:05:29] *** Quits: andreypopp (~andreypop@94.188.42.16) (Ping timeout: 252 seconds)
[03:12:24] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[03:16:37] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Ping timeout: 240 seconds)
[03:38:51] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 252 seconds)
[03:39:08] <d_bot> <gar> A question about packed modules.  Leaving aside questions of efficiency and convenience, does using pack/for-pack give me anything that I could not get by concatenating the sourcee files of the submodules, wrapping each in the appropriate module declaration?
[03:44:06] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[03:48:50] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Ping timeout: 265 seconds)
[03:48:53] *** Joins: rgrinberg (~textual@2806:101e:7:9999:a48b:a8:fbe9:e141)
[03:58:45] *** Quits: mro (~mro@2002:5cc3:e304:0:19a2:3228:4ac4:85d4) (Quit: Leaving...)
[04:02:31] *** Joins: andreypopp (~andreypop@94.188.42.16)
[04:05:40] <companion_cube> packed modules are values, so you can carry them around without knowing which actual concrete module you have
[04:05:43] <companion_cube> a bit like objects
[04:16:58] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[04:20:52] *** Quits: average (uid473595@user/average) (Quit: Connection closed for inactivity)
[04:28:40] *** Joins: jonasbits (~quassel@2a00:66c0:1:1::58)
[04:29:25] <rgrinberg> companion_cube i think your unix example is slower because unix is first reading the data into a temp buffer
[04:29:39] <rgrinberg> and only then copying it to your buffer
[04:37:14] <companion_cube> but why?
[04:37:20] <companion_cube> where is the buffer?
[04:37:31] <companion_cube> if anything it should be `buf` which is slower
[04:38:08] <rgrinberg> look at unix_read
[04:45:14] <companion_cube> hum
[04:45:17] <companion_cube> why does it do that? :/
[04:45:45] <companion_cube> I imagine in_channel has the same
[04:46:05] <rgrinberg> it does not
[04:46:31] <rgrinberg> channel uses caml_read_fd which reads it into the buffer directly
[04:47:00] <rgrinberg> basically, don't use Unix.read/write for anything performance sensitive
[04:47:03] <companion_cube> indeed, i just opened the source
[04:47:08] <companion_cube> but why does Unix do that?
[04:47:13] <companion_cube> instead of a single syscall?
[04:47:17] <companion_cube> yeah TIL
[04:47:26] <companion_cube> I thought it'd be more bare metal by nature…
[04:47:34] <rgrinberg> it is a single syscall
[04:47:37] <rgrinberg> it's just a pointless temp buf
[04:47:47] <d_bot> <Anurag> To deal with blocking calls maybe? I could be wrong but is this defense against the use provided bytes being moved by the GC?
[04:49:02] <companion_cube> but in a blocking call, no one else will trigger the GC
[04:49:45] <rgrinberg> before the read/write the lock is released
[04:49:56] <rgrinberg> actually, i think it's because channel has only a single buffer
[04:50:09] <rgrinberg> while Unix.read/write allocates the buffer on every call
[04:50:45] <companion_cube> the enter_blocking_section releases the runtime lock? heh
[04:50:49] <companion_cube> makes sense I guess.
[04:51:10] <companion_cube> so it doesn't have to do that for in_channel because, being in C, it won't be moved?
[04:51:58] <rgrinberg> with the channel, it reads it first into an internal buffer and only then moves it to your byte
[04:52:10] <rgrinberg> the key is that this buffer is reused between calls
[04:54:55] <companion_cube> yeah
[04:55:01] <companion_cube> crazy
[04:55:28] <companion_cube> and so the solution that directly syscalls into a `bytes` doesn't work because it can't release the runtime lock, correct?
[04:55:37] <d_bot> <gar> @companion_cube I don't follow you,  can you elaborate?  What does "packed modules are values" mean? "Carry them around"?
[04:56:03] <rgrinberg> well you can keep the lock for the duration of the Unix.read
[04:56:08] <rgrinberg> I'm not sure that's so bad in your case
[04:56:22] <companion_cube> right, but it's bad in the general case I suppose.
[04:56:22] <rgrinberg> but in multi threaded code, other threads will not be able to make progress
[04:56:27] <companion_cube> yep
[04:56:47] <companion_cube> all that because there's no notion of pinned values, I suppose
[04:56:58] <rgrinberg> it's a shame that one either needs to accept fragmentation with bigarrays or extra copying
[05:02:18] <companion_cube> buffers should live for a while
[05:02:25] <companion_cube> it'd be ok to have them being actual C buffers
[05:02:42] <companion_cube> a thing we _really_ lack, anyway, is slices. so many things are harder because of no slices.
[05:04:46] <rgrinberg> what's so hard about passing (buf, pos, len) everywhere?
[05:12:29] <companion_cube> well, for a start, it's an allocation.
[05:12:40] <companion_cube> if you do that for every char, you allocate a shitton
[05:13:10] <companion_cube> and then, everyone can do their own `{buf: bytes; mutable pos: int; mutable len: int}` to at least avoid allocs
[05:13:21] <companion_cube> but that's not compatible with anyone else :?
[05:13:23] <companion_cube> :/
[05:14:56] <rgrinberg> So it's just a matter of adding the slice type to the stdlib then
[05:15:19] <rgrinberg> type 'a slice = { buf : 'a ; mutable pos : int ; mutable len : int }
[05:15:22] <rgrinberg> and off you go
[05:16:16] <companion_cube> if only!
[05:16:41] <companion_cube> (buf also needs to be mutable, I think, btw)
[05:17:20] <rgrinberg> I don't see why
[05:17:34] <companion_cube> well, this is also useful for proper buffers, isn't it?
[05:17:37] <companion_cube> like Buffer.t
[05:17:45] <companion_cube> (which is sadly a bit too private to be useful in general)
[05:18:00] <rgrinberg> Oh I thought you meant the field needs to be mutable
[05:18:07] <companion_cube> yes
[05:18:24] <companion_cube> so it can be redimensionned, in some use cases
[05:19:21] <rgrinberg> or you can just instantiate 'a with a ref
[05:19:27] <companion_cube> yikes
[05:24:38] <companion_cube> I guess that's why bigarrays are better, in a way
[05:24:45] <companion_cube> they don't move… do they?
[05:24:59] <rgrinberg> yes they stay still
[05:25:02] <companion_cube> right
[05:25:09] <companion_cube> so they'd allow `read` to be fast
[05:25:09] <rgrinberg> but they're slow and turn your heap into swiss cheese
[05:25:15] <companion_cube> why are they slow?
[05:25:27] <companion_cube> I mena, they _should_ have fast memcpy, but that's another problem
[05:25:36] <rgrinberg> i don't know but i remember benchmarks showing their get/set is like 2x slower than bytes
[05:26:09] <companion_cube> one must take care to use monomorphic bigarrays
[05:27:44] <rgrinberg> here's one example https://www.thekerneltrip.com/ocaml/ocaml-bigarray-vs-array/
[05:27:51] <rgrinberg> although this isn't the benchmark I remember seeing
[05:29:20] <companion_cube> this is using owl, for all I know it uses polymorphic bigarrays
[05:30:14] <rgrinberg> read sum_big_array. there's no owl there
[05:31:34] <companion_cube> idk if it's monomorphic though
[05:31:38] <companion_cube> at least the layout might be unspecified
[05:31:49] <d_bot> <Anurag> In some benchmarks in the past, i didn't notice a big difference in get/set, but the `sub` operation is slower than bytes. That's where things like cstruct come in
[05:31:55] <companion_cube> yes
[05:31:59] <companion_cube> because sub allocate a new bigarray :s
[05:32:44] <companion_cube> `val sum_big_array : int -> (float, 'a, 'b) Bigarray.Array2.t -> float = <fun>` yep yep
[05:33:01] <companion_cube> godbolt shows that in the general case, this kind of access is a C call
[05:33:09] <companion_cube> but in monomorphic cases it's a few asm instructions
[05:33:36] <companion_cube> rgrinberg: https://godbolt.org/z/sKj6Evorj
[05:36:46] <rgrinberg> I see. I wonder if polymorphic get/set is even a good idea
[05:38:37] <companion_cube> it is when you write generic code on matrices I suppose
[05:38:47] <companion_cube> but I wish we had a kind of template-like polymorphism, like F# does :/
[05:38:54] <companion_cube> it'd be so useful sometimes
[05:39:19] <companion_cube> anyway, bigstring/bigstringaf would make fine buffers, if we could do it again
[05:39:30] <rgrinberg> if you write code on matrices you don't want things to be slow though
[05:39:34] <companion_cube> (assuming you reuse buffers and don't throw them away, obviously)
[05:39:39] <companion_cube> ah, true.
[05:39:51] <companion_cube> tbh that's probably where you should  rather call C/fortran…
[05:44:36] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:46:05] *** Quits: jonasbits (~quassel@2a00:66c0:1:1::58) (Ping timeout: 252 seconds)
[05:51:59] *** Joins: jonasbits (~quassel@2a00:66c0:1:1::58)
[05:53:32] <companion_cube> oh TIL about [@untagged] in C FFI
[05:54:27] <rgrinberg> what does it do??
[05:56:01] <companion_cube> skips the tag encoding/decoding apparently
[05:56:18] <companion_cube> I suppose a function with that and `[@noalloc]` must have a very small overhead :)
[06:48:19] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[07:24:01] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Ping timeout: 256 seconds)
[07:38:27] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[08:15:47] *** Joins: mbuf (~Shakthi@122.178.122.215)
[08:37:55] *** Joins: gravicappa (~gravicapp@178.214.248.43)
[08:59:39] *** Quits: ansiwen (~sanders@vm1.a6n.de) (Quit: ZNC 1.7.1 - https://znc.in)
[09:01:49] *** Joins: ansiwen (~sanders@vm1.a6n.de)
[09:23:58] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:02:55] *** Joins: zebrag (~chris@user/zebrag)
[10:03:13] *** Quits: zebrag (~chris@user/zebrag) (Client Quit)
[10:04:57] *** Quits: gravicappa (~gravicapp@178.214.248.43) (Ping timeout: 252 seconds)
[10:17:11] *** Quits: rgrinberg (~textual@2806:101e:7:9999:a48b:a8:fbe9:e141) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:18:02] *** Joins: rgrinberg (~textual@2806:101e:7:9999:a48b:a8:fbe9:e141)
[10:39:08] *** Joins: average (uid473595@user/average)
[10:41:59] *** Joins: jlrnick (~josephler@2a01cb040a1594004ca47e3e98b160c8.ipv6.abo.wanadoo.fr)
[11:04:44] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[11:06:09] *** Joins: lagash (lagash@lagash.shelltalk.net)
[11:30:34] *** Joins: mro (~mro@2002:5cc3:fea7:0:416e:8509:da41:8b46)
[11:46:15] *** Joins: gravicappa (~gravicapp@178.214.248.43)
[11:55:21] *** Quits: mro (~mro@2002:5cc3:fea7:0:416e:8509:da41:8b46) (Remote host closed the connection)
[12:03:13] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:04:41] *** Joins: mro (~mro@2002:5cc3:fea7:0:416e:8509:da41:8b46)
[12:09:36] *** Quits: rgrinberg (~textual@2806:101e:7:9999:a48b:a8:fbe9:e141) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:10:56] <d_bot> <Et7f3> Slice in golang/vector in cpp have an internal buffer that some times is reallocated and I don't see complain about that.
[12:11:10] *** Quits: mro (~mro@2002:5cc3:fea7:0:416e:8509:da41:8b46) (Remote host closed the connection)
[12:11:20] *** Joins: mro (~mro@port-92-195-254-167.dynamic.as20676.net)
[12:13:22] *** Quits: mro (~mro@port-92-195-254-167.dynamic.as20676.net) (Remote host closed the connection)
[12:18:50] *** Joins: mro (~mro@port-92-195-254-167.dynamic.as20676.net)
[12:30:09] *** Quits: krnkktz (~krnkktzma@2001:470:69fc:105::74c) (Quit: You have been kicked for being idle)
[13:03:30] *** Joins: mro_ (~mro@port-92-195-254-167.dynamic.as20676.net)
[13:05:14] *** Quits: mro (~mro@port-92-195-254-167.dynamic.as20676.net) (Ping timeout: 256 seconds)
[13:11:40] *** Joins: bartholin (~bartholin@158.110.70.215)
[13:36:40] *** Joins: quernd2 (~quernd@boethin.uberspace.de)
[13:38:44] *** Quits: quernd (~quernd@boethin.uberspace.de) (Killed (NickServ (GHOST command used by quernd2)))
[13:38:52] *** quernd2 is now known as quernd
[14:06:13] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 252 seconds)
[14:06:36] *** Quits: mro_ (~mro@port-92-195-254-167.dynamic.as20676.net) (Remote host closed the connection)
[14:09:29] *** Quits: jlrnick (~josephler@2a01cb040a1594004ca47e3e98b160c8.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[14:12:20] *** Quits: gravicappa (~gravicapp@178.214.248.43) (Ping timeout: 265 seconds)
[14:22:25] <zozozo> companion_cube: with [@inline] annotations, you should be able to get template-like behavious, no ?
[14:22:56] <zozozo> (thoguh for bigarrays, I'm not sure how much flambda1 does)
[14:30:17] *** Joins: namkeleser (~namkelese@101.175.128.51)
[14:31:00] *** Joins: mro (~mro@2002:5cc3:fea7:0:416e:8509:da41:8b46)
[14:36:15] *** Quits: mro (~mro@2002:5cc3:fea7:0:416e:8509:da41:8b46) (Remote host closed the connection)
[14:36:49] *** Joins: fds (franki@triton.blinkenshell.org)
[14:54:41] <companion_cube> Yeah yeah, and I'd need to trust inline to always work
[14:55:39] <zozozo> well, even if [@inline] can omsetimes have troubles [@inlined] annotations work fairly well and report warnings (that can be made fatal) when they fail
[14:56:41] <companion_cube> I don't like code that only works well with flambda anyway
[14:58:02] <d_bot> <dinosaure> `cstruct` :p
[15:13:26] *** Quits: mbuf (~Shakthi@122.178.122.215) (Quit: Leaving)
[15:57:20] *** Joins: mro (~mro@port-92-195-254-167.dynamic.as20676.net)
[16:03:21] *** Quits: mro (~mro@port-92-195-254-167.dynamic.as20676.net) (Remote host closed the connection)
[16:08:27] *** Joins: Techcable (~Techcable@168.235.93.147)
[16:16:35] *** Joins: jlrnick (~josephler@2a01cb040a15940059843ea2cb44c237.ipv6.abo.wanadoo.fr)
[16:25:31] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[16:30:47] *** Joins: mro (~mro@port-92-195-254-167.dynamic.as20676.net)
[16:31:35] *** Joins: xiongxin (~Thunderbi@113.116.35.60)
[16:35:07] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[16:40:40] *** Quits: namkeleser (~namkelese@101.175.128.51) (Quit: Client closed)
[16:40:43] *** Quits: jlrnick (~josephler@2a01cb040a15940059843ea2cb44c237.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[17:15:22] *** Joins: gravicappa (~gravicapp@178.214.253.129)
[17:31:29] *** Quits: arg_ (~arthur@ns3054037.ip-91-121-134.eu) (Ping timeout: 256 seconds)
[17:31:36] *** Joins: arg_ (~arthur@ns3054037.ip-91-121-134.eu)
[17:34:18] *** Joins: Haudegen (~quassel@91.114.49.10)
[17:41:57] *** Quits: mro (~mro@port-92-195-254-167.dynamic.as20676.net) (Remote host closed the connection)
[17:46:18] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[17:50:40] *** Quits: bartholin (~bartholin@158.110.70.215) (Remote host closed the connection)
[17:52:52] *** Joins: bartholin (~bartholin@158.110.70.215)
[17:53:26] *** Joins: mro (~mro@port-92-195-254-167.dynamic.as20676.net)
[18:16:33] *** Quits: mro (~mro@port-92-195-254-167.dynamic.as20676.net) (Remote host closed the connection)
[18:22:13] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[18:25:30] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[18:30:32] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[18:50:01] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Ping timeout: 252 seconds)
[19:04:35] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[19:07:12] *** Quits: xiongxin (~Thunderbi@113.116.35.60) (Remote host closed the connection)
[19:20:42] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 265 seconds)
[19:21:07] <d_bot> <Continuation Calculus> I'm trying to define a ppx deriving where each type (even in a list of types defined mutually recursively) can have its own separate attributes
[19:21:30] <d_bot> <Continuation Calculus> the signature of `Ppx.Deriving.Generator.make_x` is `(P.rec_flag * P.type_declaration list) -> P.structure_item list` and doesn't seem to allow that
[19:21:35] <d_bot> <Continuation Calculus> Am I missing something obvious?
[19:23:58] <companion_cube> hmm I don't think you can put different attributes on mutually recursive types
[19:24:06] <companion_cube> the attributes are on the whole block, afaik
[19:26:07] *** Joins: mro (~mro@port-92-195-254-167.dynamic.as20676.net)
[19:42:49] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[20:19:27] *** Joins: gareppa (~gareppa@user/gareppa)
[20:24:17] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[20:30:54] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:54:53] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[20:57:23] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:57:36] *** Joins: jlrnick (~josephler@2a01cb040a1594009cd9cac62c110f80.ipv6.abo.wanadoo.fr)
[21:02:32] *** Quits: mro (~mro@port-92-195-254-167.dynamic.as20676.net) (Read error: Connection reset by peer)
[21:02:38] *** Joins: mro_ (~mro@port-92-195-254-167.dynamic.as20676.net)
[21:03:23] *** Quits: mro_ (~mro@port-92-195-254-167.dynamic.as20676.net) (Client Quit)
[21:06:33] *** Quits: Guest1107 (~bobo@82.142.17.127) (Ping timeout: 265 seconds)
[21:07:31] *** Joins: zebrag (~chris@user/zebrag)
[21:09:04] <d_bot> <Continuation Calculus> hmmmmm
[21:09:09] <d_bot> <Continuation Calculus> thanks
[21:09:34] <d_bot> <Continuation Calculus> it's actually trivial to solve I think. I can just pass an extra argument that states to which type the thing applies
[21:11:51] *** Joins: rgrinberg (~textual@2806:101e:7:9999:a48b:a8:fbe9:e141)
[21:16:08] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Ping timeout: 252 seconds)
[21:30:06] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[21:33:05] *** Joins: Guest1107 (~bobo@82.142.17.127)
[21:38:38] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Ping timeout: 256 seconds)
[21:44:43] <d_bot> <VPhantom> Suggestion: someone might want to write and pin a message in this channel to show details of the IRC side of the bridge bot. I haven't used IRC in nearly 20 years and I'm curious to see this channel from the other perspective 😉
[21:46:55] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:47:53] <companion_cube> wdym?
[21:48:36] *** Quits: jlrnick (~josephler@2a01cb040a1594009cd9cac62c110f80.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[21:51:21] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[22:04:02] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Read error: Connection reset by peer)
[22:07:43] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[22:09:38] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Remote host closed the connection)
[22:12:06] <d_bot> <VPhantom> (Whoa I needed Google for that acronym… 😛) I mean which server(s) and channel are on the other side of the BOT gateway.
[22:12:26] <d_bot> <Et7f3> only this one
[22:12:38] <d_bot> <VPhantom> No… I mean on the _IRC_ side.
[22:12:55] <d_bot> <VPhantom> What is this Discord channel bridged with on the IRC side.
[22:14:17] <hannes> VPhantom: the server "on the other side" is libera.chat, the channel is #ocaml
[22:19:52] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[22:21:52] <d_bot> <RegularSpatula> I'm pretty sure both the `input` and the `unix_read` release the runtime... the unix_read function wraps the `read` syscall in `caml_enter_blocking_section`, and the `caml_read_fd` wraps it in `caml_enter_blocking_section_no_pending`
[22:22:42] <companion_cube> yeah, but they can do it for different reasons
[22:23:49] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Ping timeout: 240 seconds)
[22:25:57] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[22:30:39] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Ping timeout: 265 seconds)
[22:31:38] <d_bot> <RegularSpatula> Hmm...I've been going through the c code for the unix_read and the in_channel input trying to figure it out
[22:33:28] <d_bot> <RegularSpatula> I think I'm confused as to why rginberg said above that the stack allocated buffer that `unix_read` makes is pointless
[22:35:49] <d_bot> <RegularSpatula> If the buffer you pass in to `unix_read` can move during gc and you release the runtime around the `read` call, what else is there to do in `unix_read` other than allocate a buffer that you know won't move while the runtime is released?
[22:36:34] <d_bot> <RegularSpatula> (as opposed to the read in using the `in_channel` which has its  own buffer (that I guess won't move?...idk))
[22:36:36] <companion_cube> in a way, it could use a nonblocking FD and use select to know when it can read, maybe?
[22:36:45] <companion_cube> then when it's ready, do the read without releasing the lock
[22:36:53] *** Quits: rgrinberg (~textual@2806:101e:7:9999:a48b:a8:fbe9:e141) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:37:25] <d_bot> <RegularSpatula> huh interesting
[22:43:08] <d_bot> <RegularSpatula> I saw that benchmark you put on the discuss and the actual timing differences between the in_channel and the unix_read was pretty small...have you seen instances where using unix_read is actually noticeably slower?
[22:43:08] *** Joins: VPhantom (~VPhantom@98.143.218.83)
[22:44:49] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[22:47:09] <companion_cube> in both cases you're going to have 2 buffers
[22:47:17] <companion_cube> so I think it's normal it takes ± the same time
[22:48:06] *** Joins: sluigi (~sluigi@18.31.9.106)
[22:48:17] *** Joins: rgrinberg (~textual@187.223.58.12)
[22:48:20] <sluigi> how do you make an empty map?
[22:48:27] <sluigi> I tried Map.empty, but it keeps on asking me for a comparator
[22:48:35] <sluigi> I tried Map.empty (String.equal) but that didn't work either
[22:49:09] <d_bot> <RegularSpatula> ccube: yeah that makes sense
[22:49:20] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Ping timeout: 268 seconds)
[22:49:37] <d_bot> <RegularSpatula> Are you using Jane streets Base library?
[22:49:51] <d_bot> <antron> sluigi: provide specifics immediately. what library are you using? what "didn't work"?
[22:50:02] <d_bot> <antron> what was the output you got?
[22:50:04] <sluigi> i'm using Core
[22:50:16] <sluigi> Error: This expression has type string -> string -> bool
[22:50:16] <sluigi>        but an expression was expected of type
[22:50:17] <sluigi>          ('a, 'b) Map.comparator =
[22:50:17] <sluigi>            (module Core_kernel__.Comparator.S with type comparator_witness = 'b and type t = 'a)
[22:50:41] <sluigi> I also tried Map.empty (String.comparator) which didn't work either :P
[22:50:43] <sluigi> Error: This expression has type
[22:50:43] <sluigi>          (string, String.comparator_witness) Comparator.t
[22:50:44] <sluigi>        but an expression was expected of type
[22:50:44] <sluigi>          ('a, 'b) Map.comparator =
[22:50:45] <sluigi>            (module Core_kernel__.Comparator.S with type comparator_witness = 'b and type t = 'a)
[22:51:03] <sluigi> I think I understand the issue but I'm not sure what the correct thing to do is
[22:51:12] <d_bot> <antron> ok i have to defer to someone who uses core. i've stuck only with standard library's Map
[22:51:28] *** Parts: VPhantom (~VPhantom@98.143.218.83) ()
[22:51:47] <d_bot> <RegularSpatula> `Map.empty (module String)` is what you want
[22:52:41] <sluigi> Can you explain how the types work out
[22:52:56] <sluigi> im particular how (module String) satisfies the  ('a, 'cmp) Map.comparator type
[22:55:09] <sluigi> so actually I defined a type alias for string (type name = String) and want the keys to be names, I guess Map.empty (module String) still works, but is there a way to be more precise (to indicate we're using names and not strings)
[22:55:32] <d_bot> <RegularSpatula> Yeah Map.empty actually takes a first class module as its argument
[22:56:35] <companion_cube> (in Base)
[22:57:31] <d_bot> <RegularSpatula> yeah in base...sluigi it's actually a little tricky to get the base types and stuff...for using maps from base the Real world ocaml book is helpful: https://dev.realworldocaml.org/maps-and-hashtables.html
[22:58:03] *** Quits: rgrinberg (~textual@187.223.58.12) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:58:58] *** Quits: sluigi (~sluigi@18.31.9.106) (Quit: Client closed)
[23:01:25] <d_bot> <RegularSpatula> If you check the docs for Base.Map, you can follow the signatures and types to see how it works...Map.empty takes `('a, 'cmp) comparator` and if you check that type its a `Comparator.S` which is a module type that specifies a couple things...you'll see that most of the standard base modules satisfy this type
[23:02:05] <d_bot> <RegularSpatula> For String...it has a `comparator_witness` and a `comparator` function of the correct type already defined, so you can use it there
[23:18:43] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[23:24:13] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Ping timeout: 240 seconds)
[23:46:04] *** Quits: bartholin (~bartholin@158.110.70.215) (Quit: Leaving)
[23:51:45] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
