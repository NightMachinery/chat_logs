[00:03:04] *** Quits: teasea (~teasea@user/teasea) (Remote host closed the connection)
[00:03:26] *** Joins: teasea (~teasea@user/teasea)
[00:06:55] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[00:12:14] *** Quits: stealth[] (~stealth]@2001:9e8:36fb:7f00:8d30:acae:5df0:7de8) (Read error: Connection reset by peer)
[00:12:44] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[00:13:27] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:13:56] <rawtaz> so if inside a function i just need a string-int map to set some stuff in, it doesnt really matter if i do  var foo map[string]int  or  foo := make(map[string]int)   right? or is there any relevant difference to know about?
[00:15:15] <b0nn> the first example is nil unless you make
[00:16:12] <fizzie> (And attempting to set a value in a nil map will panic.)
[00:16:19] <b0nn> your choices are foo := make(map[string]int); var foo map[string]int; or, my personal favourite foo := map[string]int{}
[00:17:35] <b0nn> znpy: sounds like you need to raise an issue with those library providers
[00:17:38] <rawtaz> but  var foo map[string]int  isnt an option at all i take it? it's pretty useless since it's just nil, i cant use it for anything
[00:17:57] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[00:19:01] <b0nn> I mean, it's possibly for scope, with an inner foo = map[string]int{"one":1}
[00:19:19] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:19:30] <rawtaz> hm ok. well ill just use the := way
[00:20:14] *** Quits: Xjs (~jannis@user/xjs) (Read error: Connection reset by peer)
[00:20:15] <jezebel> how am i meant to use the golang:latest docker image as a development environment? i keep running into permission errors?
[00:20:37] <rawtaz> jezebel: please be more specific - what exact symptoms/permission errors?
[00:20:48] <b0nn> jezebel: didn't you figure that out yesterday
[00:21:21] <jezebel> yeah i hit another problem
[00:21:23] <jezebel> and now another
[00:21:34] <jezebel> so i docker run it with --user 1000:1000
[00:21:43] <jezebel> and now go cant create /.cache
[00:22:04] <b0nn> there's a docker channel that might be better help
[00:22:16] <rawtaz> yeah probably, it's #docker
[00:22:55] <jezebel> oh ok
[00:23:00] <jezebel> thanks
[00:23:51] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[00:24:34] *** Quits: prologic (~prologic@mail.mills.io) (Quit: ZNC - https://znc.in)
[00:24:55] *** Joins: prologic (~prologic@mail.mills.io)
[00:27:13] *** Joins: Xjs (~jannis@user/xjs)
[00:31:15] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:31:21] *** Joins: mhorn (~textual@134.134.137.85)
[00:32:19] *** Quits: mhorn (~textual@134.134.137.85) (Client Quit)
[00:36:23] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 264 seconds)
[00:37:03] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:37:58] *** Joins: pepee (~pepee@user/pepee)
[00:41:21] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[00:42:13] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 250 seconds)
[00:46:22] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) ()
[00:46:32] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[00:49:59] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[00:53:22] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 260 seconds)
[00:54:08] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:55:37] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:57:58] *** Quits: rewt (~default@user/rewt) (Killed (NickServ (GHOST command used by rewt__)))
[00:58:14] *** Joins: rewt (~default@user/rewt)
[00:58:17] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[01:02:50] *** Parts: prologic (~prologic@mail.mills.io) (Textual IRC Client: www.textualapp.com)
[01:06:33] *** Joins: rcernin (~rcernin@124.190.139.235)
[01:09:09] *** Quits: danmurf (uid480399@user/danmurf) (Quit: Connection closed for inactivity)
[01:11:42] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[01:12:54] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:19:03] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[01:20:43] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:25:20] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[01:26:35] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:26:42] *** Quits: jespada (~jespada@252-155-231-201.fibertel.com.ar) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:31:31] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[01:32:26] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:37:19] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[01:37:41] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Ping timeout: 250 seconds)
[01:38:19] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:42:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[01:44:11] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:44:11] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 264 seconds)
[01:45:44] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 256 seconds)
[01:47:22] *** Joins: mrig (~mrig@user/mrig)
[01:48:34] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 256 seconds)
[01:48:55] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[01:50:03] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:50:46] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (Ping timeout: 260 seconds)
[01:53:23] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[01:54:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[01:54:40] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[01:55:55] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:56:45] *** Quits: GJdan (~quassel@107-190-25-70.cpe.teksavvy.com) (Ping timeout: 250 seconds)
[02:00:02] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 268 seconds)
[02:00:50] *** Quits: zwr (~zwr@2804:d45:b966:fb00:f670:f79d:3e7d:a052) (Remote host closed the connection)
[02:01:00] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c972:cfd6:54b3:c83e)
[02:02:07] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:03:23] *** Joins: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net)
[02:06:25] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a5f1-5281-6a38-5d1d.res6.spectrum.com)
[02:07:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:07:51] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:09:04] *** Joins: fikran (~fikran@user/fikran)
[02:11:43] *** Quits: abeaumont (~abeaumont@163.172.180.248) (Remote host closed the connection)
[02:14:31] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[02:16:04] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:18:45] *** Joins: Torr_ (~Torr@user/torr)
[02:19:07] *** Joins: mikey__ (~mikey__@user/mikey/x-6463285)
[02:20:49] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[02:21:55] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:26:32] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[02:27:48] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:32:17] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[02:33:54] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:35:55] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:37:00] *** Joins: alzgh (~alzgh@user/alzgh)
[02:37:53] *** Quits: Echoz_ (~chris@user/echoz) (Ping timeout: 264 seconds)
[02:38:01] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[02:38:21] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[02:39:34] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a5f1-5281-6a38-5d1d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:39:47] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:42:22] *** Quits: Techcable_ (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[02:42:45] *** Joins: Echoz_ (~chris@user/echoz)
[02:44:10] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:44:26] *** Joins: Techcable (~Techcable@168.235.93.147)
[02:44:40] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[02:45:06] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[02:45:16] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Quit: !be back soon)
[02:45:28] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[02:45:36] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[02:45:38] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:47:53] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Ping timeout: 250 seconds)
[02:48:12] *** Joins: Fault (~Fault@150.230.39.7)
[02:48:20] *** Quits: Xjs (~jannis@user/xjs) (Read error: Connection reset by peer)
[02:49:14] *** Quits: sagax (~sagax_nb@user/sagax) (Excess Flood)
[02:50:18] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[02:51:30] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:54:37] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[02:56:07] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[02:57:23] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:16:30] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[03:19:18] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 265 seconds)
[03:19:48] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[03:27:10] *** Quits: adip (~adip@aejc92.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[03:28:09] *** Joins: g2anj (~v@58.227.244.56)
[03:30:06] *** Quits: lilgopher (~textual@2601:241:8000:38f0:edd5:dcfc:17ed:129) (Quit: Textual IRC Client: www.textualapp.com)
[03:32:31] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:36:54] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[03:37:22] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[03:40:55] *** Quits: schaeffer (~schaeffer@user/schaeffer) (Read error: Connection reset by peer)
[03:41:14] *** Joins: schaeffer (~schaeffer@user/schaeffer)
[03:41:35] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[03:45:07] *** Quits: Rhvs (Rhys@help.lux.melted.me) (Quit: R.I.P)
[03:46:57] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[03:47:04] *** Joins: Rhvs (Rhys@help.lux.melted.me)
[03:47:19] <dostoyevsky2> Can I read a binary file as []byte and convert it to a string and then convert it back to []byte without corrupting it?
[03:57:03] *** Joins: EdFletcher (~PKD@user/edfletcher)
[03:57:08] <fizzie> Yes, you can. A string is just an immutable []byte with a funny special case for the range statement, pretty much.
[03:58:20] *** Joins: bpalmer` (~user@user/bpalmer)
[03:59:02] *** Quits: bpalmer (~user@user/bpalmer) (Killed (NickServ (GHOST command used by bpalmer`)))
[03:59:05] *** bpalmer` is now known as bpalmer
[03:59:26] <fizzie> In fact, https://pkg.go.dev/bytes#Equal is implemented by converting both arguments to strings and applying the == operator, which maybe counts as evidence that a string "works" for holding arbitrary bytes.
[04:03:02] *** Quits: Rhvs (Rhys@help.lux.melted.me) (Quit: R.I.P)
[04:04:57] *** Joins: Rhvs (Rhys@help.lux.melted.me)
[04:07:23] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:07:47] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a5f1-5281-6a38-5d1d.res6.spectrum.com)
[04:10:36] <seebs> yeah. note that, as an optimization, the compiler is smart enough not to actually do the allocation there.
[04:16:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[04:17:19] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Read error: Connection reset by peer)
[04:18:04] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[04:18:26] *** Joins: fikran (~fikran@user/fikran)
[04:22:13] *** Quits: krux02_ (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:23:08] *** Joins: sagax (~sagax_nb@user/sagax)
[04:27:06] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[04:31:48] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Ping timeout: 265 seconds)
[04:37:08] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[04:38:20] <dostoyevsky2> Well, it seems as if I found a bug in compress/gzip by repeatedly compressing the same payload... because when it decompresses the data is altered, after some decompressions... I can see the corruption when I try to do the same steps with just gzip which seems to have no problem with the nested decompression... well, I deactivated gzip for now and the code works now fine again...
[04:38:21] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:39:41] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Ping timeout: 250 seconds)
[04:41:58] <fizzie> Extraordinary claims (and a data corruption bug in "compress/gzip" would definitely qualify) require extraordinary evidence of not coming from somewhere else (like misusing the API or something) though.
[04:42:55] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[04:44:01] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[04:45:04] <dostoyevsky2> Yeah, it's not what I imagined of finding when beginning my first large project in Go ;-)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:19] <lazyreader> "nested compression"?
[04:46:52] <lazyreader> definitely curious to see a minimal reproducer of that
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:57] <dostoyevsky2> I also googled for fixed bugs but couldn't see any mentioned... so I think I will definitely try to reproduce the bug I saw on play.golang.org in the next days
[04:48:57] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[04:50:17] *** Joins: EdFletcher (~PKD@user/edfletcher)
[04:52:25] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:55:30] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:00:40] *** Quits: X-Scale (~ARM@31.22.167.45) (Ping timeout: 256 seconds)
[05:01:00] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[05:02:29] *** X-Scale` is now known as X-Scale
[05:03:26] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[05:09:20] *** Joins: EdFletcher (~PKD@user/edfletcher)
[05:10:18] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 256 seconds)
[05:13:35] *** Joins: JonasTripps (~user@bras-base-crnwon2435w-grc-27-76-70-40-124.dsl.bell.ca)
[05:13:42] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[05:14:34] *** Quits: JonasTripps (~user@bras-base-crnwon2435w-grc-27-76-70-40-124.dsl.bell.ca) (K-Lined)
[05:20:53] *** Quits: Torr_ (~Torr@user/torr) (Quit: leaving)
[05:25:59] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:29:05] *** Quits: g2anj (~v@58.227.244.56) (Ping timeout: 250 seconds)
[05:29:58] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[05:30:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[05:30:43] *** Joins: EdFletcher (~PKD@user/edfletcher)
[05:31:22] *** Joins: g2anj (~v@39.112.227.198)
[05:35:15] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a12:948f:1075:7e0e:7e97) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:47:41] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Ping timeout: 265 seconds)
[05:49:33] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[05:50:01] *** Quits: baakeydow (~baake@2001:bc8:65c:2601::1) (Quit: baakeydow)
[05:54:06] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[05:58:30] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:02:17] *** Joins: andlabs (~andlabs@2604:ca00:179:3da7:b1:e9d1:ce54:be0a)
[06:02:40] *** Joins: frost (~frost@user/frost)
[06:04:13] *** Joins: andlabs_ (~andlabs@2604:ca00:179:3da7:c418:9a3:ef16:fa34)
[06:04:58] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[06:06:16] *** Joins: bindu (~bindu@user/bindu)
[06:06:40] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:07:10] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[06:07:11] *** Quits: ryu` (~ryusaku@c72AD5BC1.dhcp.as2116.net) (Ping timeout: 245 seconds)
[06:07:16] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[06:07:26] *** Joins: ryu_ (~ryusaku@c72AD5BC1.dhcp.as2116.net)
[06:07:56] *** Quits: andlabs (~andlabs@2604:ca00:179:3da7:b1:e9d1:ce54:be0a) (Ping timeout: 268 seconds)
[06:10:04] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[06:10:24] *** Joins: alzgh (~alzgh@user/alzgh)
[06:11:06] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:11:16] *** Joins: andlabs (~andlabs@2604:ca00:179:3da7:a509:d645:6453:81e8)
[06:12:03] *** Joins: andlabs__ (~andlabs@2604:ca00:179:3da7:5999:9f8d:d74d:385)
[06:13:47] *** Joins: andlab___ (~andlabs@2604:ca00:179:3da7:86e:8b68:7d75:52df)
[06:14:09] *** Quits: andlabs_ (~andlabs@2604:ca00:179:3da7:c418:9a3:ef16:fa34) (Ping timeout: 250 seconds)
[06:14:18] *** Joins: kiril (~kiril@85.91.153.163)
[06:15:59] *** Quits: andlabs (~andlabs@2604:ca00:179:3da7:a509:d645:6453:81e8) (Ping timeout: 264 seconds)
[06:16:35] *** Quits: andlabs__ (~andlabs@2604:ca00:179:3da7:5999:9f8d:d74d:385) (Ping timeout: 264 seconds)
[06:17:11] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[06:17:36] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 245 seconds)
[06:18:46] *** Parts: mikey__ (~mikey__@user/mikey/x-6463285) (WeeChat 3.3)
[06:19:36] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[06:24:33] *** Quits: ryu_ (~ryusaku@c72AD5BC1.dhcp.as2116.net) (Ping timeout: 250 seconds)
[06:24:59] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[06:25:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:26:17] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[06:27:46] *** Joins: fikran (~fikran@user/fikran)
[06:30:42] *** Joins: Yexuan (~Yexuan@221.15.245.88)
[06:30:59] *** Quits: Yexuan (~Yexuan@221.15.245.88) (Remote host closed the connection)
[06:37:07] *** Quits: fling (~fling@user/fling) (Ping timeout: 250 seconds)
[06:37:48] *** Joins: saml_ (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[06:39:17] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[06:39:30] *** Joins: fling (~fling@user/fling)
[06:40:37] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Ping timeout: 268 seconds)
[06:41:41] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[06:42:47] *** Quits: saml_ (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Ping timeout: 265 seconds)
[06:44:24] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[06:44:40] *** Joins: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:1c8:bcb5:8c94:e21d)
[06:46:40] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:46:45] *** Joins: saml_ (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[06:47:08] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Ping timeout: 265 seconds)
[06:48:35] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:1937:5740:9a75:d704) (Ping timeout: 265 seconds)
[06:49:40] *** Joins: andlabs (~andlabs@2604:ca00:179:3da7:e533:662c:c69c:2538)
[06:50:45] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 250 seconds)
[06:51:29] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[06:51:51] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[06:52:11] *** Quits: andlabs (~andlabs@2604:ca00:179:3da7:e533:662c:c69c:2538) (Client Quit)
[06:53:47] *** Quits: andlab___ (~andlabs@2604:ca00:179:3da7:86e:8b68:7d75:52df) (Ping timeout: 264 seconds)
[06:57:29] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:58:45] *** Quits: saml_ (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:03:41] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:03:58] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[07:06:09] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 250 seconds)
[07:18:50] *** Joins: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net)
[07:20:00] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[07:21:19] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[07:25:17] *** Joins: andlabs (~andlabs@70.107.171.168)
[07:26:56] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[07:27:16] *** Joins: alzgh (~alzgh@user/alzgh)
[07:29:32] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[07:30:31] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:34:40] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:39:05] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[07:52:09] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[07:52:15] *** Joins: ckeshav (~keshavcha@user/ckeshav)
[07:52:56] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[08:00:45] <bch> hello #go -- I'm struggling to provide a pointer to a C function() (for a callback) to another C function. So (eg): C.sort(...., C.comparor)
[08:00:56] <bch> pointers? (no pun intended)
[08:02:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[08:06:49] *** Joins: baakeydow (~baake@163.172.145.178)
[08:06:57] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:09:27] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[08:13:43] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:15:07] *** Joins: bindu (~bindu@user/bindu)
[08:21:22] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 260 seconds)
[08:25:14] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[08:26:09] *** Joins: jpw (~jpw@user/jpw)
[08:29:42] *** Quits: Kaivo (~Kaivo@user/kaivo) (Read error: Connection reset by peer)
[08:30:06] *** Joins: Kaivo (~Kaivo@user/kaivo)
[08:30:20] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 256 seconds)
[08:30:43] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:34:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[08:37:08] *** Joins: fikran (~fikran@user/fikran)
[08:38:33] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:41:06] <A_Dragon> what *exactly* are you trying to do?
[08:41:12] <A_Dragon> is it a C pointer or a go pointer?
[08:41:23] <A_Dragon> because if its the latter, you really shouldnt be doing that
[08:43:08] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[08:45:18] <bch> hey -
[08:45:50] <bch> what I'm doing is janky-feeling to be sure, but sorting it out will illuminate things for me, so...
[08:46:07] <bch> its foo.go code...
[08:46:39] <bch> with /* ... */import "C"
[08:48:24] <bch> ...
[08:48:57] <A_Dragon> yeah that'll be C code
[08:48:59] <bch> and so in the C section, theres (eg) -- foo() and cb()
[08:49:12] <A_Dragon> mhmm
[08:49:17] <bch> right -- sorry I'm typing slow because I've got a few things going on...
[08:49:22] <A_Dragon> is fine, take your time
[08:51:07] <bch> ... and as I think of it I'm rethinking my design, but lets proceed...
[08:51:28] <A_Dragon> rethinking helps too, rubber ducks :D
[08:51:29] <bch> in the actual Go section of main(), I'll do something like:
[08:51:36] <bch> A_Dragon: *exactly*
[08:51:55] <bch> C.foo(C.cb)
[08:52:13] <bch> is an (incorrect) way to represent what I think I want to do...
[08:52:29] <A_Dragon> C function pointers?
[08:52:40] * bch nods
[08:52:43] <A_Dragon> That one Im not sure about at all
[08:52:53] <A_Dragon> I'd suggest, try doing it in the C code and see if it behaves
[08:53:03] <A_Dragon> thats a bit outside of my C knowlege
[08:53:09] <bch> The C methodology is sound.
[08:53:24] <A_Dragon> yeah Im just trying to think how that is passed around in cgo
[08:53:24] <bch> what I did think though (rubber ducking) is this:
[08:53:30] <A_Dragon> Im somewhat sure it wont be nicely
[08:54:04] *** Joins: normen (~normen@p200300d71723fa00d95c547067958535.dip0.t-ipconnect.de)
[08:54:51] <bch>  /* int cb(...){};\n wrapper () { foo(cb); } */import "C"
[08:55:08] <bch> func main () { C.wrapper() }
[08:55:16] <A_Dragon> that should work
[08:56:24] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:56:50] *** Quits: Guest6873 (~Leon@176.sub-174-198-207.myvzw.com) (Ping timeout: 260 seconds)
[08:59:05] *** Quits: normen (~normen@p200300d71723fa00d95c547067958535.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[09:00:25] <bch> A_Dragon: thanks for standing in as a duck ;)
[09:00:32] * A_Dragon quack
[09:08:52] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 256 seconds)
[09:10:20] *** Joins: analoq (~yashi@user/dies)
[09:14:04] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[09:15:34] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:15:40] *** Quits: fling (~fling@user/fling) (Ping timeout: 256 seconds)
[09:20:47] *** Joins: leonthemisfit (~Leon@94.sub-174-198-197.myvzw.com)
[09:20:47] *** Quits: leonthemisfit (~Leon@94.sub-174-198-197.myvzw.com) (Changing host)
[09:20:47] *** Joins: leonthemisfit (~Leon@user/leonthemisfit)
[09:21:32] <bch> A_Dragon: my stuff worked.
[09:21:37] <A_Dragon> \o/
[09:31:32] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[09:32:09] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[09:34:16] *** Joins: EdFletcher (~PKD@user/edfletcher)
[09:42:54] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[09:44:07] *** Joins: bindu (~bindu@user/bindu)
[09:50:26] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[09:51:43] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[09:51:54] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[09:55:21] *** Joins: fling (~fling@user/fling)
[09:56:24] *** Joins: et_ (~et@user/et)
[09:57:11] *** Quits: et (~et@user/et) (Ping timeout: 245 seconds)
[09:57:11] *** et_ is now known as et
[09:58:32] *** Quits: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5) (Ping timeout: 265 seconds)
[10:00:03] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[10:12:22] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[10:14:57] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[10:25:42] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:26:17] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:31:02] *** Joins: mrig (~AdiIRC@user/mrig)
[10:31:34] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Quit: Leaving)
[10:41:14] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[10:43:44] <egy> unrelated, but is a subdomain takeover at gobyexample.com normal ?
[10:44:38] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[10:46:29] *** Joins: fikran (~fikran@user/fikran)
[10:47:24] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[10:51:51] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:53:29] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[10:57:10] *** Joins: jla (~jordi@64.225.79.195)
[11:05:00] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[11:05:47] *** Joins: bindu (~bindu@user/bindu)
[11:07:52] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 256 seconds)
[11:08:31] <A_Dragon> hmm?
[11:10:35] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[11:10:54] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:13:17] <A_Dragon> egy: ?
[11:13:36] <egy> A_Dragon: checkout www.gobyexample.com
[11:13:59] <egy> https://gobyexample.com should work
[11:14:24] <A_Dragon> well thats interesting
[11:14:29] <foobaz> looks like they were hacked
[11:14:37] <A_Dragon> I'd send em an email :P
[11:14:40] *** Quits: Echoz_ (~chris@user/echoz) (Ping timeout: 256 seconds)
[11:18:17] <egy> i thought it's nothing special and that the site author intended to leave it as is
[11:19:15] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[11:20:38] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:28:55] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[11:30:24] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[11:30:30] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:30:51] *** Joins: Everything (~Everythin@37.115.210.35)
[11:31:23] *** Joins: EdFletcher (~PKD@user/edfletcher)
[11:34:38] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:35:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[11:37:33] *** Joins: frost (~frost@user/frost)
[11:43:54] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[11:46:37] *** Joins: adip (~adip@aejc92.neoplus.adsl.tpnet.pl)
[11:46:53] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:49:07] *** Quits: chasmo77 (~chas77@71.63.241.168) (Ping timeout: 250 seconds)
[11:49:19] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[11:49:48] *** Joins: chasmo77 (~chas77@71.63.241.168)
[11:51:09] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 265 seconds)
[11:53:11] *** Quits: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5) (Ping timeout: 264 seconds)
[11:59:55] *** Joins: joshbaptiste (~josh@192.210.151.34)
[12:00:13] *** Joins: Xjs (~jannis@user/xjs)
[12:01:34] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[12:05:02] *** Joins: jannis (~jannis@user/xjs)
[12:05:39] *** Quits: ckeshav (~keshavcha@user/ckeshav) (Ping timeout: 265 seconds)
[12:09:02] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 265 seconds)
[12:09:42] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[12:10:45] <azidhaka> Hi everyone, how to i do error handling for the both Fprintf in this example: http://p.ip.fi/p0AU
[12:11:27] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[12:12:02] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:13:49] <b0nn> azidhaka: fmt.Fprintf returns an int, and an error, so: if  _, err := fmt.Fprintf(&buf, "%02X", f); err != nil { // handle the error how you see fit }
[12:14:23] <seebs> you decide what to do if they fail and handle that. but also don't use Fprintf for a single fixed character.
[12:14:46] <seebs> if i were doing it, i'd write "%02X:" for each thing, then truncate the last byte.
[12:14:47] <azidhaka> b0nn: right, i thought it will assign the fprintf to a new variable. Still lot to learn moving from python to go :)
[12:14:51] <Mattiaslndstrm> Is jldiaz implementation of a wait group a good illustration how a wait group works? Or is there any major problems? I just want to better understand how they works without diving into to the official, very optimized version. https://gist.github.com/harryhare/6a4979aa7f8b90db6cbc74400d0beb49#gistcomment-3916668
[12:15:04] <seebs> i don't even know what "assign the fprintf to a new variable" would mean
[12:15:35] *** Joins: arcatech (~arcatech@user/arcatech)
[12:15:45] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Quit: Leaving)
[12:16:05] <azidhaka> seebs: thanks, don't mind my struggles :)
[12:16:17] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 265 seconds)
[12:18:21] *** Joins: neurocyte0132889 (~neurocyte@45.131.36.116)
[12:18:21] *** Quits: neurocyte0132889 (~neurocyte@45.131.36.116) (Changing host)
[12:18:21] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:19:16] *** Quits: dr0n (~nabromov@94.11.23.235) (Ping timeout: 245 seconds)
[12:23:47] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 250 seconds)
[12:24:21] <b0nn> Mattiaslndstrm: I didn't think that the official implementation (https://github.com/golang/go/blob/master/src/sync/waitgroup.go) was very opaque
[12:24:36] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[12:25:06] <b0nn> there's a bit of magic (the noCopy struct is to ensure that there's only one copy of a given waitgroup at any point in time
[12:27:16] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-f899-ffb2-eda6-47a8.ip6.gigabit.dk)
[12:28:55] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:28:59] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[12:29:27] <Mattiaslndstrm> b0nn: It's not super opaque, but there is still quite a lot I don't understand. Right now my focus is to actually be able to use concurrency in Go rather than deeply understand it. Deep understanding needs a foundation. Do you think the code above will be a good illustration of how it works without adding any major misunderstandings or similar?
[12:30:52] <b0nn> That Done is racy
[12:32:38] <b0nn> It calls Add (which is thread safe) then it reads the retruned value (v); however, in the mean time another goroutine could have incremented the counter, done will call the exit (via the channel) but a goroutine will still be running
[12:33:16] <Mattiaslndstrm> Haha, okay. So I probably need to dive deeper then. I don't know much about race conditions.
[12:34:22] <b0nn> When you are writing code for a single thread, you pretty much think, step 1, step 2.... etc; when you are writing with multiple threads you need to think will step 1,2,3, or 17 run next
[12:34:36] <b0nn> And the answer is : yes
[12:39:26] <Mattiaslndstrm> Thank you! Do you happen to have any suggestion on resources how to understand concurrency in general or in Go? I haven't worked with it in any language, but will start to work as a Go developer this week or next, and I'll need to understand concurrency well soon.
[12:41:02] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:42:15] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[12:42:25] <b0nn> Not sure to be honest; the last explicit learning I did on threading and race conditions was at uni, using Java
[12:42:32] *** Joins: holgersson (~quassel@user/holgersson)
[12:42:41] <b0nn> there'll be some OCW classes about (but they won't be Go)
[12:43:00] <j416> Mattiaslndstrm: practice, make mistakes, try again, loop; after a while you will end up doing similar things as is taught in books, I think
[12:43:15] <j416> (I don't know of a good resource)
[12:43:41] <j416> s/books/whatever resource/
[12:44:14] <b0nn> Threading, multiprocessing, race conditions is afairly deep rabbit hole
[12:45:04] <egy> Mattiaslndstrm: i watched this yesterday and i found it helpful https://vro.omcat.info/watch?v=4CrL3Ygh7S0
[12:45:54] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[12:46:27] <Mattiaslndstrm> b0nn: There seem to be quite a bit of resources around about threading in Java. And actually there is a MOOC about concurrency in Go: https://www.coursera.org/learn/golang-concurrency
[12:46:36] <egy> and i enjoyed this one (might not be related) from filippo valsorda as well: https://vro.omcat.info/watch?v=J4J-A9tcjcA
[12:47:16] <Mattiaslndstrm> j416: True, that's what I'm trying to do. I have practiced with Tour of Go, and Exercism seem to have at least one exercise on concurrency.
[12:47:34] <Mattiaslndstrm> egy: Thank you! I'll watch it!
[12:49:16] <b0nn> It's worth the effort to understand, the principles apply to multi threaded programs, multiple service systems (eg. microservices) and, to a lessor extent, multi system stuff
[12:50:01] <b0nn> although the latter two get muddied by our new enemy of easy : TCP/IP networks
[12:51:48] *** Quits: jannis (~jannis@user/xjs) (Quit: Bye.)
[12:52:44] <j416> also useful to understand the difference between data races and race condition
[12:52:49] <j416> s
[12:53:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[12:54:11] <j416> Go's race detector will mostly be able to find the former, but not the latter
[12:55:49] *** Joins: fikran (~fikran@user/fikran)
[12:55:53] <Mattiaslndstrm> I'll definitely will have to understand all that. I'll build private mobile networks, so everything above is included.
[12:59:57] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:02:57] <j416> also, hej, fellow swede (?) guessing from your name. o/
[13:04:37] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[13:10:36] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[13:14:37] <Mattiaslndstrm> Haha, correct j416! Where are you located?
[13:14:44] <j416> \^^/
[13:14:45] <j416> sthlm.
[13:15:24] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:15:50] <Mattiaslndstrm> Okay! I'm in Gothenburg.
[13:25:54] <krux02> That name could also be German.
[13:26:51] *** Joins: gspbirel5669 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[13:27:58] *** Quits: gspbirel566 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Ping timeout: 260 seconds)
[13:27:58] *** gspbirel5669 is now known as gspbirel566
[13:29:19] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:34:04] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[13:36:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[13:36:58] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[13:45:04] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:49:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[13:52:20] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[13:57:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[14:00:03] *** Quits: strubbl891941988 (~strubbl@ipb21a9322.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[14:01:29] *** Joins: strubbl891941988 (~strubbl@ipb21a9322.dynamic.kabel-deutschland.de)
[14:02:11] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:19:46] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[14:23:14] <Thedarkb-Work> The first explicit learning I did about race conditions was running into crashes.
[14:23:23] <Thedarkb-Work> :P
[14:24:37] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[14:29:02] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:31:51] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:35:29] *** Mion is now known as lb9di
[14:36:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[14:42:15] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:43:45] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[14:43:49] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[14:44:09] *** Joins: alzgh (~alzgh@user/alzgh)
[14:47:25] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[14:49:58] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[14:50:34] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:51:03] <lofiguy> Thedarkb-Work, excellent learning path. Create race condition - fix it. Award yourself a prize :P
[14:51:06] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[14:51:25] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:301e:cfcd:47ee:8af2)
[15:03:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[15:04:41] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:05:10] *** Joins: fikran (~fikran@user/fikran)
[15:13:09] <dalan62367> Hi all, question: I have a `struct` A with a single property which is an array of another `struct` B. If I have a map of `map[int]A` how do I append to the property array?
[15:13:09] <dalan62367> e.g. type Line struct {
[15:13:09] <dalan62367> 	Begin Coordinate
[15:13:09] <dalan62367> 	End Coordinate
[15:13:09] <dalan62367> }
[15:13:09] <dalan62367> type Path struct {
[15:13:09] <dalan62367> 	Lines []Line
[15:13:10] <dalan62367> }
[15:13:10] <dalan62367> wires := make(map[int]Path)
[15:13:31] *** Joins: jla (~jordi@2.154.174.13.dyn.user.ono.com)
[15:13:32] <dalan62367> How would I append a new Line to an entry in the map?
[15:14:02] <ikke> dalan62367: with append
[15:14:41] <dalan62367> I have this: `wires[i] = append(wires[i].Lines, line)` but has error `cannot use append(wires[i].Lines, line) (value of type []Line) as Path value in assignment` I don't understand.
[15:15:04] <ikke> wires[i].Line = ..
[15:15:22] <ikke> sorry, .Lines
[15:16:07] <dalan62367> derpppp
[15:16:13] <dalan62367> `wires[i].Lines = append(wires[i].Lines, line)`
[15:16:18] <ikke> yes
[15:16:23] <dalan62367> Now has error `cannot assign to struct field wires[i].Lines in map`
[15:16:33] *** Joins: noord (~noord@user/noord)
[15:16:37] <fizzie> Yeah, it's not easy to have a map of structs.
[15:17:02] <fizzie> Maybe consider a map[int]*Path instead, it's easier to update.
[15:17:03] <dalan62367> Is there a more Go way of achieving this?
[15:17:13] <ikke> https://stackoverflow.com/questions/42605337/cannot-assign-to-struct-field-in-a-map
[15:17:18] <dalan62367> What difference does the pointer make?
[15:18:03] <fizzie> The struct is addressable when the map holds a pointer.
[15:18:08] <fizzie> So you can update a field of it.
[15:18:26] <fizzie> Otherwise you'll need to do something like `wire := wires[i]; wire.Lines = append(wire.Lines, line); wires[i] = wire`.
[15:18:38] <dalan62367> Ahhhhh interesting
[15:19:05] <fizzie> And selectors dereference pointers implicitly, so with a map[int]*Path you can still write your simple `wires[i].Lines = append(wires[i].Lines, ...)`.
[15:19:54] <fizzie> ...although you do need to take care of creating the Path objects, which isn't the case for a map of structs, since the zero value is usable as-is.
[15:20:15] <dalan62367> Right, so I'd need to pre-fill the map, correct?
[15:20:34] <dalan62367> for i, _ := range wires_paths {
[15:20:34] <dalan62367> 		wires[i] = &Path{}
[15:20:34] <dalan62367> 	}
[15:21:54] <fizzie> Yes, or `new(Path)`. And whether you need to pre-fill it completely depends on context, but you would need to do something like that before you try to access wires[i].Lines.
[15:23:08] <dalan62367> Amazing
[15:24:03] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[15:24:04] <dalan62367> When you say 'selectors dereference pointers' what is the 'selector' in this case? `wires[i]`?
[15:24:10] *** Quits: dfip^ (~dfip@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[15:24:31] <fizzie> `x.f` where `f` is a field is called a "selector expression".
[15:24:58] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:25:09] <fizzie> And the `Lines` in `wires[i].Lines` there would strictly speaking be the selector.
[15:26:43] <fizzie> If you want to keep a map[int]Path, another alternative would be a `func (p Path) AppendLine(line Line) Path { p.Lines = append(p.Lines, line); return p }` and then `wires[i] = wires[i].AppendLine(line)`, but it maybe looks a bit odd. Anyway, the fundamental thing about that is that you need to update the entire map value, not a part of it.
[15:29:15] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[15:32:44] *** Quits: mrig (~AdiIRC@user/mrig) (Read error: Connection reset by peer)
[15:32:58] *** Joins: mrig (~AdiIRC@user/mrig)
[15:35:24] <Thedarkb-Work> lofiguy, I also discovered SQL injection by having a surname with an apostrophe in it.
[15:37:36] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 256 seconds)
[15:39:49] <lofiguy> Thedarkb-Work, lovely :D
[15:40:09] <Thedarkb-Work> :)
[15:40:45] <lofiguy> Awarded yourself? ;-)
[15:41:03] *** Quits: jla (~jordi@2.154.174.13.dyn.user.ono.com) (Quit: Leaving.)
[15:41:25] *** Quits: mrig (~AdiIRC@user/mrig) (Read error: Connection reset by peer)
[15:41:31] <Thedarkb-Work> I learned how to sanitise my inputs...
[15:41:38] *** Joins: mrig (~AdiIRC@user/mrig)
[15:41:50] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:41:57] <Thedarkb-Work> It's surprising how many websites will break if you have an apostrophe in your name.
[15:42:21] <Thedarkb-Work> I wasn't able to buy Kerbal Space Program legitimately before it went on Steam due to it.
[15:43:43] <ikke> oof
[15:44:23] <Thedarkb-Work> Parameterising your database queries isn't hard!
[15:44:41] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[15:46:32] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[15:46:52] *** Joins: shtirlic_ (~shtirlic@95-55-26-173.dynamic.avangarddsl.ru)
[15:48:36] *** Joins: jla (~jordi@2.154.174.13.dyn.user.ono.com)
[15:48:38] *** Quits: shtirlic (~shtirlic@95-55-24-132.dynamic.avangarddsl.ru) (Ping timeout: 265 seconds)
[15:48:44] <adip> it seem that bug in my program spawned over 28000 gorountines :d
[15:51:15] *** Joins: fef (~thedawn@user/thedawn)
[15:51:22] *** Quits: shtirlic_ (~shtirlic@95-55-26-173.dynamic.avangarddsl.ru) (Ping timeout: 265 seconds)
[15:51:50] *** Joins: shtirlic (~shtirlic@178.71.173.137)
[15:53:25] *** Joins: arcatech (~arcatech@user/arcatech)
[15:54:26] <lofiguy> adip, it's not a bug it's a feature
[15:58:37] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 265 seconds)
[15:59:10] *** Quits: jla (~jordi@2.154.174.13.dyn.user.ono.com) (Ping timeout: 260 seconds)
[16:00:08] *** Joins: jla (~jordi@64.225.79.195)
[16:00:45] *** Joins: dlbh^ (~dlbh@h50.174.139.63.static.ip.windstream.net)
[16:03:39] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:04:57] <adip> lofiguy: fork bomb as a feature
[16:06:51] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[16:12:35] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 250 seconds)
[16:13:10] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:13:57] *** Joins: X-Scale` (~ARM@46.50.0.92)
[16:15:32] *** X-Scale` is now known as X-Scale
[16:17:45] *** Quits: jespada (~jespada@252-155-231-201.fibertel.com.ar) (Quit: Textual IRC Client: www.textualapp.com)
[16:17:51] <dalan62367> current_position := Coordinate{X:0, Y:0}
[16:17:51] <dalan62367> current_position.X ++
[16:17:52] <dalan62367> ^ this isn't incrementing the member value? How come?
[16:18:23] <dalan62367> Do I need to explicitly say current_position.X = current_position.X + 1?
[16:19:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:20:57] <dalan62367> Derp I'm dumb
[16:21:04] <dalan62367> Was logic elsewhere 😅
[16:21:48] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[16:21:56] <lofiguy> dalan62367, https://play.golang.org/p/Eqp3sY0kxaK
[16:22:24] *** Joins: Echoz_ (~chris@user/echoz)
[16:24:17] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 250 seconds)
[16:24:23] <fizzie> On an unrelated note, `currentPosition` would be a more common name than `current_position`.
[16:25:44] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[16:25:58] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[16:25:59] <lofiguy> fizzie, absolutely but I based on name convention from dalan62367
[16:26:37] <dalan62367> What is the idiomatic casing for Golang?
[16:26:51] <fizzie> https://golang.org/doc/effective_go#mixed-caps "Finally, the convention in Go is to use `MixedCaps` or `mixedCaps` rather than underscores to write multiword names."
[16:27:30] *** Quits: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a) (Quit: Leaving)
[16:28:04] <fizzie> (And the case of the initial letter isn't really a matter of convention, since it controls whether names are exported or not. ...well, I guess it's a matter of convention for local variable names, but it'd be weird to make them look like exported names.)
[16:28:40] <lofiguy> Fixed https://play.golang.org/p/Zs_etJoZ3EJ
[16:29:05] <lofiguy> "For better naming convention" ;-)
[16:32:31] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[16:32:50] <sztanpet> also https://github.com/golang/go/wiki/CodeReviewComments
[16:35:07] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 250 seconds)
[16:36:51] *** Joins: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a)
[16:41:33] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[16:41:50] *** Joins: mickey8 (~user@user/mickey)
[16:42:34] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[16:45:26] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:45:46] *** Joins: neurocyte0132889 (~neurocyte@45.131.36.116)
[16:45:46] *** Quits: neurocyte0132889 (~neurocyte@45.131.36.116) (Changing host)
[16:45:46] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:46:14] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:47:02] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:48:29] *** Quits: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com) (Remote host closed the connection)
[16:50:45] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[17:01:52] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:03:31] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[17:03:44] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[17:04:54] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[17:04:58] *** Quits: foxtrot (~foxtrot@user/foxtrot) (Ping timeout: 260 seconds)
[17:05:18] *** Quits: Echoz_ (~chris@user/echoz) (Ping timeout: 268 seconds)
[17:05:50] *** Joins: Echoz_ (~chris@user/echoz)
[17:06:09] *** Joins: southey (~foxtrot@user/foxtrot)
[17:06:34] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[17:10:59] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[17:12:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[17:14:31] *** Joins: fikran (~fikran@user/fikran)
[17:15:03] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:15:10] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:301e:cfcd:47ee:8af2) (Ping timeout: 268 seconds)
[17:21:32] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[17:28:08] *** Quits: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a) (Ping timeout: 268 seconds)
[17:28:57] *** Joins: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a)
[17:33:50] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[17:37:13] *** Quits: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a) (Ping timeout: 265 seconds)
[17:38:55] *** Joins: aman (~aman@user/aman)
[17:48:26] *** Quits: xzr (xzar@shell.troopers.fi) (Ping timeout: 245 seconds)
[17:50:59] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[17:51:17] *** Joins: mickey8 (~user@user/mickey)
[17:52:59] <noord> why golang doesn't support pre-increment decrement operation? what is the reason behind it?
[17:54:01] <siXy> noord: https://golang.org/doc/faq#inc_dec
[17:54:42] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:56:09] *** Joins: Gaming4LifeDE (~Gaming4Li@lxproxy4.bfinv.de)
[17:56:35] *** Joins: neiluj (~neiluj@2a01:e0a:1f2:d960:1103:b620:e77c:d1a2)
[17:56:58] <neiluj> Hello! How do you memcpy in Go? Iterate over the array and the string?
[17:57:15] <seebs> copy()
[17:57:16] <sztanpet> neiluj use copy()
[17:57:33] <Gaming4LifeDE> Hi. Are there any other good (and well documented) frameworks for parsing yaml besides go-yml? i just can't wrap my head around it (also, i basically just started using go
[17:57:36] <seebs> in general you don't memcpy on strings because that's usually nonsensical.
[17:57:55] <neiluj> sztanpet: many thanks! :)
[17:58:02] <sztanpet> https://pkg.go.dev/builtin#copy
[17:58:20] <siXy> Gaming4LifeDE: https://pkg.go.dev/gopkg.in/yaml.v2 is probably the most common.
[17:58:46] <Gaming4LifeDE> siXy yeah, i just cannot work with it. I just can't get my yaml to parse...
[17:58:54] <siXy> Gaming4LifeDE: But if you just started, and haven't gone through tour.golang.org yet - do that first.
[17:59:17] <sztanpet> Gaming4LifeDE my magic crystal ball says you did not export your fields! are you sure you did that? :)
[17:59:19] <Gaming4LifeDE> where as in python, it's a simple yaml.safe_load() and that's all. Took me not even 5 mins in python, but hours in go
[17:59:28] <siXy> Once you've done that if it still doesn't make sense, show us how far you got on play.golang.org and we can help.
[17:59:44] <Gaming4LifeDE> sztanpet if by that you mean starting all the fields with upper case, i did
[18:00:02] <sztanpet> noice
[18:00:14] <Gaming4LifeDE> problem is that i can't really show the code, maybe i can work out a simple example
[18:00:30] <Gaming4LifeDE> sztanpet already learned that the hard way lol
[18:01:27] <seebs> If it's taking you hours to do something like that, you are probably missing fundamentals that you should start with.
[18:01:28] <neiluj> When do you start your functions' names with a capital letter? They're all mixed case but sometimes some functions start with a lowercase
[18:01:35] <Mattiaslndstrm> I'm trying to solve a coding problem where I need to set a pointer to nil in a method. pointer = nil doesn't work. Can someone give me clue on what to do?
[18:01:49] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:03:43] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[18:04:51] *** Joins: arcatech (~arcatech@user/arcatech)
[18:04:59] *** Joins: bindu (~bindu@user/bindu)
[18:10:04] <siXy> Mattiaslndstrm: pointer = nil will work if pointer is actually a pointer. Have you read https://tour.golang.org/methods/5 and onwards?
[18:10:19] *** Joins: krux02_ (~krux02@194.8.199.29)
[18:10:42] <Mattiaslndstrm> siXy: I have! I'll have another look at it though.
[18:11:10] *** Quits: krux02_ (~krux02@194.8.199.29) (Client Quit)
[18:11:46] <siXy> Mattiaslndstrm: If you still can't figure it out after that, maybe share what you have and I'll try to give some hints without just giving away the answer :)
[18:12:42] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[18:13:03] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 250 seconds)
[18:13:21] <Mattiaslndstrm> siXy: Thank you! It's the Account.Close()-method. I know it's not safe for concurrent use yet, but I wan't to make the core functionality work before I implement concurrencey. https://play.golang.org/p/OzdQRgnCATL
[18:13:28] <Mattiaslndstrm> Last method
[18:13:31] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[18:13:40] *** Quits: rek2 (~ReK2@47.61.173.146) (Quit: WeeChat 3.3)
[18:14:02] <tar_xvf> Hello. Any of you have any tips for how to log all requests if i am running a net/http server in go with seperate pages specified by http.HandleFunc, besides adding a line in every one of those functions?
[18:16:45] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Excess Flood)
[18:16:52] *** Quits: asm (~alexander@burner.asm89.io) (Changing host)
[18:16:52] *** Joins: asm (~alexander@user/asm)
[18:17:10] <siXy> Mattiaslndstrm: Ahh! Okay, so I see where's going wrong - the subtlty here is that in go everything is passed by value not by reference. What that means in practice is that a.Close() has a copy of the pointer to the underlying Account, so you're setting a copy of the pointer to nil.
[18:17:15] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:17:39] <sztanpet> neiluj only if you want them exported aka its your api
[18:18:37] <Mattiaslndstrm> siXy: Interesting! I should be able to figure it out in a while then!
[18:18:44] <neiluj> sztanpet: thanks, perfect!
[18:18:47] <siXy> Mattiaslndstrm: Basically the answer boils down to "don't do it like that". Close() the account by setting Amount = 0, wiping all user IDs etc, and let the garbage collector handle cleanup from there.
[18:22:21] *** Joins: elmeyer (~elmeyer@2001:9e8:2c7:9200:3cde:2beb:f942:2247)
[18:22:55] *** Joins: servytor (uid525486@hampstead.irccloud.com)
[18:22:55] <Mattiaslndstrm> siXy: That option is not available. It must be impossible to change the balance of the account after closing.
[18:24:35] <siXy> Mattiaslndstrm: Go doesn't really work this way. You could have an a.open bool which is checked before any Deposit call though
[18:25:32] <siXy> Mattiaslndstrm: Like https://play.golang.org/p/mw3UK1g_GKv for example.
[18:27:02] <Mattiaslndstrm> siXy: Oh, okay! That would be an option I'll try that. Thank you!
[18:27:48] <siXy> welcome :)
[18:28:06] *** Joins: pepee (~pepee@user/pepee)
[18:28:34] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[18:29:19] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:30:30] *** Quits: elmeyer (~elmeyer@2001:9e8:2c7:9200:3cde:2beb:f942:2247) (Quit: Client closed)
[18:35:19] *** Joins: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de)
[18:35:19] *** Quits: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de) (Changing host)
[18:35:19] *** Joins: tane (~tane@user/tane)
[18:40:06] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[18:40:09] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Excess Flood)
[18:41:02] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:43:47] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[18:44:07] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[18:44:17] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[18:45:00] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[18:45:31] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[18:51:44] *** Joins: bindu (~bindu@user/bindu)
[18:51:50] *** Quits: dlbh^ (~dlbh@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[18:52:52] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:53:50] *** Joins: arcatech (~arcatech@user/arcatech)
[19:00:09] *** Joins: cnf0 (~cnf@d5152daf0.static.telenet.be)
[19:00:10] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Read error: Connection reset by peer)
[19:00:10] *** cnf0 is now known as cnf
[19:00:54] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[19:02:46] *** Joins: jla (~jordi@2.154.174.13.dyn.user.ono.com)
[19:03:23] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:04:05] *** Joins: bindu (~bindu@user/bindu)
[19:06:03] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:07:19] *** Joins: arcatech (~arcatech@user/arcatech)
[19:07:45] *** Quits: aman (~aman@user/aman) (Quit: aman)
[19:09:54] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:13:40] *** Joins: iateadonut (~dan@121.177.17.154)
[19:13:47] *** Parts: iateadonut (~dan@121.177.17.154) ()
[19:13:48] *** Joins: iateadonut (~dan@121.177.17.154)
[19:14:03] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[19:14:14] <neiluj> it's weird that you have to create a connection object in UDP
[19:15:07] <neiluj> with the C sockets API you just 'sendto'
[19:18:07] <neiluj> is there a reason for that?
[19:18:07] *** Joins: sbodin (~Android@185.12.224.122)
[19:18:37] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:20:37] *** Quits: iateadonut (~dan@121.177.17.154) (Quit: Leaving.)
[19:21:15] *** Parts: sbodin (~Android@185.12.224.122) ()
[19:21:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:23:08] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Ping timeout: 246 seconds)
[19:23:52] *** Joins: fikran (~fikran@user/fikran)
[19:24:03] *** Joins: arcatech (~arcatech@user/arcatech)
[19:26:59] <siXy> neiluj: So that it fits into the net.Conn interface, allowing you to write stuff that works both over multiple socket types, basically. mostly what it does is just create an FD, as you can see here: https://cs.opensource.google/go/go/+/refs/tags/go1.17.3:src/net/ipsock_posix.go;drc=refs%2Ftags%2Fgo1.17.3;l=137
[19:28:01] *** Quits: Echoz_ (~chris@user/echoz) (Ping timeout: 250 seconds)
[19:29:15] <neiluj> siXy: thanks, oh it's fine then!
[19:31:09] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[19:31:19] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:31:38] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[19:31:57] *** Joins: bindu (~bindu@user/bindu)
[19:35:23] *** Joins: arcatech (~arcatech@user/arcatech)
[19:35:59] *** Joins: Echoz_ (~chris@user/echoz)
[19:37:08] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[19:37:34] *** Quits: jla (~jordi@2.154.174.13.dyn.user.ono.com) (Ping timeout: 260 seconds)
[19:38:12] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[19:38:32] *** Joins: jla (~jordi@64.225.79.195)
[19:39:13] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[19:39:15] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[19:43:44] <fizzie> neiluj: You can also create a connection without any association with a peer and use the WriteTo method to send packets to desired destinations, such as in the example for https://pkg.go.dev/net#UDPConn.WriteTo
[19:47:41] *** Joins: sheldon (~sheldon@user/sheldon)
[19:50:48] <neiluj> Nice!
[19:51:29] <neiluj> Noob question but: how would you select on file descriptors in Go? There's the keyword select but for channels.
[19:51:47] <neiluj> For instance, select on the udp net.Conn object
[19:52:49] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[19:54:10] <siXy> Normally you'd use one of the Read* methods of the UDPConn object that gets returned by DialUDP/ListenUDP
[19:54:50] <neiluj> Or maybe a better way is to make a goroutine with a infinite for loop that does a ListenUDP and sends the message with a conditional wait and signal?
[19:54:52] *** Quits: rockyh (~rockyh@user/rockyh) (Ping timeout: 256 seconds)
[19:55:15] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[19:55:19] *** Quits: Echoz_ (~chris@user/echoz) (Ping timeout: 250 seconds)
[19:55:39] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:55:54] <neiluj> oh yes there's conn.Read(buf)
[19:56:41] *** Joins: Echoz_ (~chris@user/echoz)
[19:57:26] *** Joins: normen (~normen@p200300d71723fa00d95c547067958535.dip0.t-ipconnect.de)
[19:57:49] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Read error: Connection reset by peer)
[19:58:00] *** Joins: cnf (~cnf@d5152daf0.static.telenet.be)
[20:02:03] *** Joins: arcatech (~arcatech@user/arcatech)
[20:07:23] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:12:38] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[20:15:52] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[20:17:25] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 250 seconds)
[20:19:20] *** Joins: mrig (~mrig@user/mrig)
[20:21:02] *** Quits: Gaming4LifeDE (~Gaming4Li@lxproxy4.bfinv.de) (Quit: Client closed)
[20:23:25] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[20:29:33] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 250 seconds)
[20:30:32] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:30:39] *** Quits: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Remote host closed the connection)
[20:31:19] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[20:31:34] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a5f1-5281-6a38-5d1d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:34:14] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[20:37:22] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Ping timeout: 256 seconds)
[20:38:20] <bloony> I have a instance running of my app that ListenAndServe on a port. Is there a way to find the port it is running from in another golang instance? I want to be able to connect to it from the cli without having to specify the port.. I could save a port file in /tmp and read it from there.. but maybe theres another way? I tried running netstat.. It lists the port, but not showing that that is my app..
[20:38:28] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 265 seconds)
[20:39:27] *** Joins: sheldon (~sheldon@user/sheldon)
[20:43:25] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Quit: leaving)
[20:43:51] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[20:43:55] <siXy> bloony: If the app has some sort of config file, the cli tool could read that? Alternatively, and not terribly portably, you could use a systemd.socket as an IPC mechanism between app and cli. If you want to hack it up you can look at the process tree to find the PID of the app, look through open FDs to find the socket and connect there.... but that's kind of awful
[20:47:16] <bloony> It does have a config file, but it is also possible to set config in environment variables
[20:48:53] <bloony> I have a cli rest api and it is working.. I also want to be able to connect remotely with the cli
[20:49:38] <siXy> Basically what you're asking for is service discovery, which is a useful thing to have, but it's something you need to set up. The OS won't do it for you.
[20:49:46] <girafe> is there another golang channels on irc ?
[20:50:04] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a5f1-5281-6a38-5d1d.res6.spectrum.com)
[20:50:28] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[20:52:26] *** Joins: larsm (~larsm@ip5f5a137c.dynamic.kabel-deutschland.de)
[20:53:01] *** Joins: sheldon (~sheldon@user/sheldon)
[20:54:18] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[20:54:20] <bloony> siXy: hmm.. looking at it it seems a bit to complex for what I need.. Think I might just go with saving the port to a file for now
[20:56:06] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[20:56:09] <bloony> when I use the cli remote I don't mind specifying the port.. just when it runs on the same machine/docker image
[21:01:01] <fizzie> Add a server listening on another port that tells which port the first server is listening on. ;)
[21:01:12] *** Quits: larsm (~larsm@ip5f5a137c.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[21:01:15] <fizzie> Then one more to communicate that port, and so on.
[21:01:54] <siXy> I was tempted to reply with "use DBUS!" but I'm not that mean
[21:02:50] *** Joins: alzgh (alzgh@user/alzgh)
[21:03:28] *** Joins: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a)
[21:03:28] *** Joins: andlabs (~andlabs@70.107.171.168)
[21:07:57] *** Joins: vsantana (~vsantana@fttx-177136148231.usr.predialnet.com.br)
[21:10:13] *** ruel is now known as lvlinux
[21:11:12] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[21:11:46] *** Joins: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[21:26:18] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 260 seconds)
[21:27:24] *** Joins: arcatech (~arcatech@user/arcatech)
[21:31:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[21:32:57] *** Joins: fef (~thedawn@user/thedawn)
[21:33:13] *** Joins: fikran (~fikran@user/fikran)
[21:38:41] *** Joins: krux02_ (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[21:38:55] *** Joins: jpw (~jpw@user/jpw)
[21:47:06] <neiluj> Is there a way to get an ecdsa pubkey struct from this call https://pkg.go.dev/crypto/ecdsa#PrivateKey.Public?
[21:47:36] <neiluj> to access https://pkg.go.dev/crypto/ecdsa#PublicKey
[21:48:04] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 265 seconds)
[21:48:38] <KirkMcDonald> neiluj: Does a type assertion work?
[21:49:15] <KirkMcDonald> Looks like it should.
[21:49:49] <KirkMcDonald> So, k.Public.(*ecdsa.PublicKey)
[21:49:56] <KirkMcDonald> Er, k.Public().(*ecdsa.PublicKey)
[21:50:01] *** Quits: cfebs (~cfebs@user/cfebs) (Quit: ZNC 1.8.2 - https://znc.in)
[21:50:01] <neiluj> the .Public() call returns a crypto.PublicKey, which is just an interface. It seems that the ecdsa library doesn't expose a 'raw' PublicKey struct with its fields
[21:50:02] *** Quits: prime (~prime@user/prime) (Ping timeout: 260 seconds)
[21:50:23] <KirkMcDonald> Oh, but also: it's just k.PublicKey
[21:50:26] <neiluj> oh it works KirkMcDonald !
[21:50:33] <KirkMcDonald> It's a public field of the struct.
[21:50:46] <KirkMcDonald> Or perhaps &k.PublicKey, if you want a pointer.
[21:50:50] *** Quits: mastardet (~mastardet@user/mastardet) (Ping timeout: 268 seconds)
[21:50:55] <neiluj> oh yeah!
[21:50:56] *** Quits: eldritch (~eldritch@user/eldritch/x-9272577) (Ping timeout: 245 seconds)
[21:50:58] <neiluj> good catch
[21:51:19] <neiluj> thanks, I'll pay more attention when looking at the APIs
[21:51:34] <KirkMcDonald> It looks like the Public() method exists because the crypto.Signer interface requires it.
[21:51:35] *** Joins: Xu_R1 (~dev-dsk-x@user/xu-r/x-9187770)
[21:51:41] *** Quits: Xu_R (~dev-dsk-x@user/xu-r/x-9187770) (Ping timeout: 264 seconds)
[21:51:41] *** Xu_R1 is now known as Xu_R
[21:52:00] *** Joins: prime (~prime@user/prime)
[21:52:14] *** Joins: mastardet (~mastardet@user/mastardet)
[21:52:23] *** Joins: cfebs (~cfebs@user/cfebs)
[21:55:13] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[22:00:33] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[22:01:35] *** Joins: sheldon (~sheldon@user/sheldon)
[22:05:11] *** Joins: xzr (xzar@shell.troopers.fi)
[22:05:35] *** xzr is now known as Guest7127
[22:05:46] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[22:06:08] *** Joins: alzgh (alzgh@user/alzgh)
[22:06:45] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[22:08:27] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:09:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:12:23] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:18:58] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[22:19:34] <lungaro> Has anyone used a stable inotify lib ?
[22:19:44] <lungaro> I seem to recall one that leaked and stopped gettin events =P
[22:20:03] *** Joins: carlavilla (~carlavill@188.26.219.172)
[22:20:17] <lungaro> i guess I should just abstract away the notifier implementation behind an interface and try inotify again
[22:20:56] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 265 seconds)
[22:21:16] *** Joins: fef (~thedawn@user/thedawn)
[22:21:51] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[22:23:11] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[22:24:21] *** Joins: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de)
[22:24:21] *** Quits: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de) (Changing host)
[22:24:21] *** Joins: tane (~tane@user/tane)
[22:27:03] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[22:27:41] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[22:27:45] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[22:29:20] *** Joins: GJdan (~quassel@107-190-26-141.cpe.teksavvy.com)
[22:31:16] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 256 seconds)
[22:33:15] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[22:33:51] *** Joins: fef (~thedawn@user/thedawn)
[22:35:20] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:40:18] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:42:50] *** imm__ is now known as imm_
[22:44:09] *** Joins: larsm (~larsm@ip5f5a137c.dynamic.kabel-deutschland.de)
[22:45:17] *** Joins: noord (~noord@user/noord)
[22:47:35] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[22:48:32] *** Joins: noord (~noord@user/noord)
[22:51:14] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[22:54:44] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Quit: Ping timeout (120 seconds))
[22:55:00] *** Joins: cnf (~cnf@d5152daf0.static.telenet.be)
[22:56:32] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[22:56:54] <larsm> hi all. this stack overflow question basically says that even with GOMAXPROCS=1 goroutines other than the one that called runtime.LockOSThread() can run on that thread if the goroutine that locked the thread is blocked by e.g. a channel send or a syscall: https://stackoverflow.com/questions/37426511/why-doesnt-gos-lockosthread-lock-this-os-thread
[22:56:55] <larsm> is there any way to alter this behavior?
[22:58:45] <b0nn> No, the scheduler detects if a call is going to block a thread and then spins up another thread for any other goroutines
[22:59:06] <b0nn> technically the thread that you wanted locked *is* locked, but a new one has been spun up to replace it
[23:01:10] <b0nn> can I ask, what's you usecase for locking threads such that nothing in your runtime ... does anything
[23:03:20] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[23:03:52] <mickey8> parsing time "\"2021-11-05T00:00:00Z00:00\"" as "\"2006-01-02T15:04:05Z07:00\"": cannot parse "00:00\"" as "\""
[23:03:54] <mickey8> what am i missing here?
[23:04:43] <b0nn> the :00 on the end?
[23:05:05] <mickey8> is it supposed to be Z00 and not Z00:00?
[23:05:22] <mickey8> or Z00:00:00 and not Z00:00?
[23:06:07] <mickey8> because RFC3339 says “2006-01-02T15:04:05Z07:00”, and that's exactly the format i have it it as far as i can see
[23:07:50] <b0nn> 2021-11-05T00:00:00Z00:00 needs to lose :00 to match 2006-01-02T15:04:05Z07:00
[23:08:02] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[23:08:03] <b0nn> oh, wait, no it doesn't
[23:08:49] <b0nn> Sorry I strongly dislike this parsing syntax :\
[23:08:54] <larsm> @b0nn ah i see, that was a misunderstanding on my part. i thought that thread actually gets another goroutine scheduled onto it even though it's locked, but that's not the case. thanks! i am working with a really syscall-heavy piece of code that is exhibiting some latency issues, and it's part of a codebase with, let's say, "liberal" (i.e. sloppy)
[23:08:55] <larsm> use of goroutines, so I was kind wondering if the scheduler is to blame
[23:09:40] <larsm> it's low-level-y network code to be precise
[23:10:12] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[23:10:16] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:10:29] *** Joins: mickey8 (~user@user/mickey)
[23:10:36] <mickey8> sorry i got disconnected
[23:12:01] <b0nn> that time  isn't RFC3339
[23:12:36] <mickey8> maybe a lower level solution would be a better approach, the string comes as a json element of "date": "2021-11-05" and i added the rest of the string to match the layout.
[23:13:15] <mickey8> and i believe it is, https://pkg.go.dev/time#pkg-constants
[23:13:34] *** Joins: mikey__ (~mikey__@user/mikey/x-6463285)
[23:13:45] *** Joins: bindu (~bindu@user/bindu)
[23:13:51] <mickey8> (i'd prefer to avoid altering the unmarshaler because it'll mess up other things)
[23:14:21] <b0nn> https://play.golang.org/p/rL2t_3rI63v
[23:14:52] <b0nn> Instead of changing your input to match the time, maybe change the parser input?
[23:14:53] <fizzie> mickey8: The "Z07:00" format means Z *or* +/- 00:00, not both.
[23:15:47] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[23:16:16] <b0nn> fizzie: hrm, that's not clear from the reference :\
[23:16:18] <fizzie> And the extra pair of double quotes you have there sounds pretty odd too.
[23:16:19] <mickey8> makes sense, "2021-11-05T00:00:00Z" works. i guess i fell on the exception of zero
[23:16:40] <mickey8> fizzie it's just the logger, it's not meant to be copy-pasted around
[23:16:49] <mickey8> thanks guys.
[23:16:59] <fizzie> b0nn: Yeah, it's only mentioned in the "Constants" section. "Replacing the sign in the format with a Z triggers the ISO 8601 behavior of printing Z instead of an offset for the UTC zone."
[23:17:29] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (Ping timeout: 264 seconds)
[23:17:51] <neiluj> Is it possible to "enforce" the size of a slice? for instance a function with a return type of [64]byte which returns a byte array initialized with make([]byte, 64) doesn't work.
[23:18:35] <A_Dragon> neiluj: in newer versions of go you can convert a []thing to a [n]thing
[23:18:44] <A_Dragon> they are two distinct types, however
[23:20:06] <fizzie> IOW, if it returns a [64]byte, it doesn't return a slice.
[23:20:10] <b0nn> [64]byte is an array, not a slice
[23:20:27] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:20:53] <larsm> since go1.17: https://golang.org/ref/spec#Conversions_from_slice_to_array_pointer
[23:22:02] <neiluj> A_Dragon & fizzie : thanks!
[23:22:31] <neiluj> fizzie & b0nn :  oh these are indeed two different types, thanks!
[23:23:08] <b0nn> and [64]byte sounds like uuid or crypto lib
[23:24:08] <neiluj> yep, I'm implementing a hybrid protocol with some peer-to-peer and central server, and light crypto :)
[23:25:47] *** Quits: larsm (~larsm@ip5f5a137c.dynamic.kabel-deutschland.de) (Quit: Client closed)
[23:29:37] <neiluj> happy with the choice of Go, the networking APIs are better than in OCaml
[23:30:04] <neiluj> plus concurrency is easier
[23:33:01] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[23:35:13] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a5f1-5281-6a38-5d1d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:35:59] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[23:36:17] <b0nn> It's rare in the standard library to be using arrays, they tend to favour slices, so seeing that [64]byte is a strong indicator of where you are in their code :)
[23:36:59] *** Joins: teasea (~teasea@user/teasea)
[23:38:39] <A_Dragon> mmm crypto
[23:38:42] *** Joins: rustyboy (~rustyboy@82.77.237.221)
[23:40:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[23:42:34] *** Joins: fikran (~fikran@user/fikran)
[23:42:41] <neiluj> Newbie problem about code architecture: I often find split code into several modules, with the main module containing a big structure with the mutable data that is passed to the other functions, including in other modules.
[23:43:21] <neiluj> That's sounds like a bad pattern, is there a way to organize code better?
[23:43:53] <b0nn> that sounds like an orchestrator pattern, which is fine IMO
[23:45:09] *** Joins: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net)
[23:45:22] <bpalmer> neiluj: that sounds pretty typical in go: the main package parses command line flags, loads configuration, etc, and then starts everything going.
[23:46:57] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[23:47:03] <neiluj> Good, that's sometimes annoying due too cyclic dependencies, as the modules have too tight dependencies with the others
[23:47:19] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[23:48:45] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:48:58] *** Joins: mickey8 (~user@user/mickey)
[23:51:00] <bpalmer> (ideally each subsystem doesn't take the entire application configuration, but only the relevant subset for it)
[23:52:47] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[23:53:32] <b0nn> Also, having all the mutable state nearest the owner, allows for actor model style programming
[23:55:16] *** Quits: vsantana (~vsantana@fttx-177136148231.usr.predialnet.com.br) (Quit: Leaving)
[23:58:36] <noord> neiluj: I generally start with writing facades before actual code, Good module level boundaries make thinking easier
