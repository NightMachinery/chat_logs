[00:02:01] *** Joins: magla (~gelignite@d536536e.access.ecotel.net)
[00:04:01] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:18:52] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:2c0b:a6b2:9b3a:540b)
[00:26:42] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[00:28:36] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:44:13] *** Quits: cratuki_ (~Craig@buster.default.cturner.bv.iomart.io) (Ping timeout: 240 seconds)
[00:45:19] *** Joins: cratuki (~Craig@buster.default.cturner.bv.iomart.io)
[00:48:40] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:cf1:8507:720a:c17) (Read error: Connection reset by peer)
[00:48:46] *** Joins: cr1901_ (~cr1901@2601:8d:8600:911:cf1:8507:720a:c17)
[00:51:46] *** Quits: Elw3 (~Elw3@dynamic-002-247-240-158.2.247.pool.telefonica.de) (Quit: Leaving)
[00:55:47] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[00:56:05] *** Quits: taupiqueur_ (~taupiqueu@182.245.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[01:10:47] *** __xor is now known as _xor
[01:30:28] <hsv> Is there a code indent level typically used by convention?
[01:31:12] <hsv> Emacs in lua-mode wants to use 3 spaces it seems.
[01:31:15] *** Quits: brunoos (~brunoos@179.35.13.172) (Quit: WeeChat 2.8)
[01:33:41] *** Quits: password (~password@user/password2) (Quit: Connection closed)
[01:36:16] <furq> you should definitely use either 2 or 3 or 4 or 8 and they should or should not be tabs
[01:37:05] <furq> there is definitely no convention for 3 though that's just the emacs guy being weird
[01:37:08] <furq> if you can imagine such a thing
[01:38:19] <bomb> mandatory  https://www.youtube.com/watch?v=SsoOG6ZeyUI
[01:40:15] <hsv> So that's a no then?
[01:40:59] <furq> yes
[01:41:12] * hsv would have thought 4 spaces would be most common, i just haven't seen enough lua code yet.
[01:41:19] <furq> i use four spaces so it must be correct
[01:41:29] *** Quits: netlynx (~jan@94-226-69-15.access.telenet.be) (Quit: Leaving)
[01:45:08] <hsv> Except when it uses 9 spaces that is - https://paste.debian.net/1233048/
[01:46:05] <furq> nice
[01:48:08] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:2c0b:a6b2:9b3a:540b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:57:11] <Albright> the answer is always two spaces in every language/framework
[02:01:53] <technomancy> “Should array indices start at 0 or 1? My compromise of 0.5 was rejected without, I thought, proper consideration.” but for spaces instead of indices
[02:02:54] <nmz> the problem with 4 spaces, is lua is extremely verbose, and very unflexible, so you sometimes have to use an if inside an if inside an if, by 5 layers, you are already wrapping on the next line
[02:02:59] <nmz> 4 space tabs*
[02:03:54] <technomancy> (I literally think that's why it's 3 in emacs; as a way of making fun of how people can't decide between 2 and 4)
[02:04:44] <nmz> I've managed to format my code strangely in lua
[02:05:39] <technomancy> I've never been trolled by a defvar before but honestly I can't be mad; it's too funny
[02:06:13] <nmz> if my if goes on too long, then the if has no indents, the ors and the ands are in the next line but with 2 spaces, the expression has 3 spaces, the then is indented once.
[02:07:57] <nmz> https://termbin.com/lj1h take a look at codeline, its a gigantic if, with lots of ors and ands
[02:08:53] <technomancy> whaaaat is going on here
[02:09:42] <bomb> it's one of those annual moments of #lua where more than 3 people participate in a conversation.
[02:10:32] <nmz> oh, that's a formatter btw, I'm trying to create a gofmt but for lua in lua
[02:10:57] <technomancy> I can see why; you're in desperate need of better formatting =)
[02:11:19] <nmz> Indeed
[02:11:49] <nmz> I use 2 text editors, one uses whatever it likes, and I'm too lazy to configure it.
[02:33:29] *** Quits: pizdets (~pizdets@183.182.114.123) (Ping timeout: 265 seconds)
[02:33:55] <technomancy> lmao the existing lua-fmt is written in typescript
[02:34:01] <technomancy> what the hell people ಠ_ಠ
[02:34:04] *** Joins: pizdets (~pizdets@183.182.111.207)
[02:34:15] <furq> that's ideal
[02:34:32] <furq> that immediately tells you everything you need to know about using a tool like that
[02:34:32] <nmz> :S
[02:35:17] <furq> also if you have four nested ifs you should probably rewrite it
[02:35:33] <nmz> its lua, 4 nested ifs is the minimum
[02:36:10] <technomancy> coding without pattern matching https://p.hagelb.org/great-tragedy.gif
[02:37:17] <furq> there isn't a single nested if in the thing you pasted
[02:37:46] <nmz> nope
[02:37:51] <nmz> theres a humongous if
[02:37:55] <furq> it's unpleasant to read for entirely different reasons
[02:37:58] <nmz> well, not that big
[02:38:13] <furq> if you mean the kind == one then that should really use a set
[02:38:29] <nmz> a set?
[02:39:01] <furq> local kinds = { identifier = true, operator = true ... } if kinds[kind] then 
[02:39:25] <nmz> ah, match by element table
[02:39:38] <nmz> hashtable
[02:39:46] <furq> sure but practically it's a set
[02:39:52] <furq> it's less code and also not O(N)
[02:40:14] <furq> or at least less ugly code
[02:41:39] <furq> also newlines directly after [[ are ignored
[02:41:58] <furq> so you (assuming you wrote this) can make that help string look nicer
[02:42:13] <furq> or a newline not all newlines obviously
[02:42:48] <nmz> really?
[02:43:05] <nmz> why would you even have that special edge case
[02:43:18] <furq> it's for precisely this
[02:43:29] <furq> so you can have your long string entirely at the same indent level
[02:43:30] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 260 seconds)
[02:43:44] <furq> if you need it to start with a newline you can just put two
[02:44:35] <furq> this is genuinely one of the things i miss most in other languages
[02:45:28] <nmz> well, I'll do that, but making the or kind, into a table is a nono since the code is still unstable, an operator could still be used somewhere else, plus its really clear what the ors are for
[02:47:46] *** Joins: Erutuon (~Erutuon@user/erutuon)
[02:49:16] *** Joins: Elw3 (~Elw3@dynamic-002-247-243-218.2.247.pool.telefonica.de)
[02:57:54] *** Quits: bomb (~bomb@user/bomb) (Quit: ‎)
[02:59:44] <hsv> nmz: so you put and/or at the start of the line rather than the end?
[02:59:49] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[03:04:37] <hsv> and no spaces around '=='.
[03:09:41] <nmz> I used to put it at the end but I prefer it at the start now
[03:10:11] <nmz> I also use a () so I know the end of the expression
[03:10:58] <nmz> which is sad, because C uses that, and I've been mad at C like languages for forcing if(){}, but when your ifs get too big, you want the ()
[03:11:29] <technomancy> optional parens are just one of those things I will never understand
[03:11:45] <technomancy> like ... who has room in their head to try to remember all the rules around when you need them and when you don't
[03:11:47] <hsv> {} is optional in C.
[03:12:19] <Gustavo6046> is it?
[03:12:28] <Gustavo6046> no, I don't think it is
[03:12:33] <Gustavo6046> let me try
[03:12:39] <hsv> yes, though any decent coding standard mandates it.
[03:12:54] <Gustavo6046> nobody writes K&R C
[03:13:10] <hsv> oh, they do.
[03:13:14] <Gustavo6046> if by "coding standard" you mean post-K&R standardization
[03:13:25] <Gustavo6046> ew
[03:13:31] <Gustavo6046> K&R C is the worst
[03:14:06] <hsv> i suppose K&R is a coding standard, but i mean MISRA and the like.
[03:14:18] *** Joins: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[03:14:19] <nmz> that's what bothers me, () is what should be optional, unless your if gets to be longer than 80 characters, you don't need the ()
[03:14:30] <nmz> go looks really nice
[03:14:38] <Gustavo6046> Rust also forgoes the ()
[03:14:46] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[03:14:58] <hsv> () saves you from having to remember operator precendence.
[03:15:07] <Gustavo6046> I think the () makes it look cleaner, for some reason.
[03:16:04] <nmz> I think prefix and/or postfix saves you from having to remember operator precedence
[03:16:15] <Gustavo6046> Tiny C Compilre requires parentheses in an if conditional.
[03:16:19] <Gustavo6046> $ echo 'int main() { if 1 { return 0; } else { return 1; } }' | tcc -run -                                                                                         ↵ 1
[03:16:19] <Gustavo6046> <stdin>:1: error: '(' expected (got "1")
[03:16:41] <Gustavo6046> nmz, they do too, but they make more sense in languages like Lisp
[03:16:56] *** Quits: magla (~gelignite@d536536e.access.ecotel.net) (Quit: Stay safe!)
[03:17:02] <Gustavo6046> not saying that Lisp is better or worse, just saying it's apples and oranges :)
[03:17:12] <nmz> well, I was mostly talking about rebol, which to me does a parser and prefix right.
[03:17:18] <nmz> lisp does it horribly
[03:17:19] <hsv> Gustavo6046: int main() { if (1) return 0; else return 1; }
[03:17:21] <Gustavo6046> interesting remark: everything is better and worse than everything else all the time
[03:17:34] <Gustavo6046> don't draw the use case from the tools you use, choose the tools you use from the subject matter :D
[03:17:38] <Gustavo6046> from the use case*
[03:17:41] <Gustavo6046> ugh
[03:17:52] <Gustavo6046> nmz, Lisp looks fine, depending on how you write it
[03:18:03] <Gustavo6046> I'm not a big fan of it either but for different reasons
[03:18:06] * nmz shivers
[03:18:17] *** Quits: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[03:18:26] <Gustavo6046> Maybe you're thinking about stack based languages?
[03:18:26] <Gustavo6046> Like Forth
[03:18:26] <Gustavo6046> I have no idea what rebol is
[03:18:30] <tumn> operator precedence is easy: the scarier the operator, the higher a precedence it has
[03:18:52] <nmz> rebol is prefix based, I think TCL is also prefix based
[03:18:58] <Gustavo6046> hsv, indeed, but you said the () around the 1 could be optional
[03:18:58] <Gustavo6046> I demonstrated otherwise.
[03:19:14] <Gustavo6046> I've heard of Tcl but never used it
[03:19:16] <nmz> forth is postfix
[03:19:17] <Gustavo6046> scary
[03:19:20] <furq> k&r declarations are gone in C23
[03:19:20] <Gustavo6046> yeah
[03:19:27] <hsv> Gustavo6046: i never say that.
[03:19:27] <Gustavo6046> I think stack based implies postfix.
[03:19:30] <furq> so 40 years from now you'll never see them again
[03:19:34] <Gustavo6046> <hsv> {} is optional in C.
[03:19:40] <nmz> Gustavo6046: it used to, but not anymore :S
[03:19:41] <Gustavo6046> Oh wait, you mean around expressions?
[03:19:44] <hsv> Gustavo6046: yes, that's what i said.
[03:19:55] <Gustavo6046> What if it wasn't?
[03:20:05] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[03:20:07] <Gustavo6046> (2 + 2 + (3 * 4 / (myArray[(2 * 3)])))
[03:20:10] <hsv> 23:41 <hsv> {} is optional in C.
[03:20:14] <Gustavo6046> versus
[03:20:25] <Gustavo6046> 2 + 2 + 3 * 4 / myArray[2 * 3]
[03:20:31] <hsv> ugh.
[03:20:40] <Gustavo6046> (which would of course be compiled away to 4 + 12 * myArray[6] but that is besides the point)
[03:20:57] <Gustavo6046> hsv, oh oops
[03:21:06] <Gustavo6046> yeah I like the { } and I don't like when they are omitted
[03:21:38] <Gustavo6046> then again I also kind of like the () in an if, makes it clear which part is the expression and which isn ot
[03:21:48] <Gustavo6046> well, what about Rust?
[03:21:51] <hsv> "Write code so it looks like it does what you mean it to."  <-- this is the only coding standard you need.
[03:21:59] <Gustavo6046> ew, no
[03:22:10] <Gustavo6046> write code so it does what you want the computer to do for you
[03:22:17] <Gustavo6046> nevermind
[03:22:17] <hsv> nope.
[03:22:31] <Gustavo6046> yeah that was a dumb sentence lol
[03:22:33] <Gustavo6046> programming languages are meant to handle the "what you want the computer to do" part for you
[03:22:39] <Gustavo6046> so you can worry about making the code humany
[03:22:57] <Gustavo6046> except Assembly but by design
[03:22:59] <hsv> worry about making the code easy to spot bugs for the next guy.
[03:23:22] <Gustavo6046> some languages work actively against that
[03:23:26] <Gustavo6046> like.... C!....
[03:23:55] <Gustavo6046> or.... uhm... or.... it starts with the 12th letter of the alphabet... er no I mean PHP!
[03:23:57] <Gustavo6046> phew
[03:24:17] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[03:24:31] <Gustavo6046> my country is really bad at making programming languages :(
[03:24:38] <Gustavo6046> or computer stuff in general
[03:24:45] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[03:24:48] <Gustavo6046> nothing computery good comes out from here from Brazil
[03:25:45] <hsv> if the next guy has to spend ages deciding your code is bug free they will hate you.  if they spot your bugs easy then meh that's just software.
[03:26:07] <hsv> that's why i say "Write code so it looks like it does what you mean it to."
[03:26:36] <Gustavo6046> yup
[03:26:52] * Gustavo6046 prematurely optimizes hsv
[03:31:15] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[03:31:35] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:32:09] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Remote host closed the connection)
[03:32:13] *** Joins: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[03:43:42] *** Quits: Elw3 (~Elw3@dynamic-002-247-243-218.2.247.pool.telefonica.de) (Ping timeout: 260 seconds)
[03:58:44] *** Joins: fling (~fling@user/fling)
[04:03:18] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[04:03:24] *** Quits: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[04:04:16] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:05:54] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[04:05:55] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 256 seconds)
[04:06:31] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[04:18:09] *** Gustavo6046_ is now known as Gustavo6046
[04:20:38] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 272 seconds)
[04:23:01] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:39:04] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[04:39:09] <nmz> Gustavo6046: a diss on lua?
[04:39:26] <Gustavo6046> hm?
[04:39:40] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[04:39:57] <Gustavo6046> I don't even know what a lua is or what a Gustavo6046 is, pff, nahh, I know nothin', I deny any culpability on this matter :P
[04:40:04] <Gustavo6046> what even is a brazil?
[04:40:20] <Gustavo6046> lol yeah I'm not the biggest fan of Lua to be honest, but I do like its simplistic syntax and its efficiency
[04:40:32] <furq> what about that official wonder boy 3 romhack where they made it about turma dâ monica
[04:40:44] <furq> not sure how that ^ ended up there
[04:40:49] <furq> turma da mônica
[04:41:30] <nmz> running lua on a gameboy?
[04:41:32] <nmz> possible?
[04:41:35] <furq> no
[04:41:50] <nmz> wonderboy, that's like, a really old gameboy right?
[04:41:57] <furq> master system
[04:42:03] <furq> and a couple for the mega drive
[04:42:10] <furq> although those are technically monster world games 
[04:43:47] <furq> or terra dos monstros games
[04:57:06] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[04:57:25] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[05:00:09] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:2c0b:a6b2:9b3a:540b)
[05:12:45] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:2c0b:a6b2:9b3a:540b) (Ping timeout: 252 seconds)
[05:24:08] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[05:24:45] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[05:30:17] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[05:31:00] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[05:48:52] *** Joins: ratchet_freak (~ratchetfr@d8D8779D9.access.telenet.be)
[05:51:53] *** Quits: ratchetfreak_ (~ratchetfr@ptr-82rtos4u888h5wswcur.18120a2.ip6.access.telenet.be) (Ping timeout: 256 seconds)
[05:52:26] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[05:52:40] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[05:56:13] *** Joins: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[05:56:36] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[06:00:52] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[06:03:37] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 240 seconds)
[06:06:29] *** Quits: ratchet_freak (~ratchetfr@d8D8779D9.access.telenet.be) (Read error: Connection reset by peer)
[06:14:36] *** Quits: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[06:15:30] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[06:27:04] *** Joins: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[06:27:56] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[06:29:22] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[07:01:50] *** Quits: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[07:05:34] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:d0cb:b707:5684:c8e6)
[07:11:58] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[07:21:00] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Ping timeout: 240 seconds)
[07:35:17] *** Joins: Psyraven (~Psyraven@p79032f3f.tokynt01.ap.so-net.ne.jp)
[07:40:12] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[07:40:48] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[07:41:24] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[07:43:15] *** Joins: Erutuon (~Erutuon@user/erutuon)
[07:47:59] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[08:05:26] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-5dc1-4b48-b196-5bd1.res6.spectrum.com) (Read error: Connection reset by peer)
[08:10:23] <technomancy> gba is possible but not the original game boy
[08:11:16] *** Joins: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[08:11:48] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[08:18:48] <nmz> I wonder if sector lisp could run there
[08:18:54] <nmz> since its only 500 bytes
[08:19:54] <furq> can it run in 8KB of memory
[08:20:29] <nmz> it is 500 bytes?
[08:21:03] <nmz> https://github.com/jart/sectorlisp
[08:21:06] <furq> what does code size have to do with it
[08:22:25] <nmz> wait, code size doesn't matter?
[08:22:51] <furq> you can have 1MB gameboy carts
[08:23:54] <furq> and you generally don't need to copy stuff into memory unless you're transforming it
[08:24:13] <furq> but unless the VM or whatever fits in 8KB then you're out of luck
[08:28:16] *** Quits: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[08:29:17] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[08:31:45] *** Joins: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[08:31:59] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[08:35:07] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Quit: WeeChat 3.4)
[08:48:13] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[08:48:46] *** Quits: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[09:08:19] <technomancy> I think the GBA lua POC was like ... lua 4.0 or something daft like that
[09:08:35] <technomancy> forth on the OG GB is fine tho
[09:13:08] <furq> elua runs on arm7
[09:13:15] <furq> should be possible to get that running on a gba i guess
[09:13:18] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:d0cb:b707:5684:c8e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:13:19] <furq> not sure why you'd bother though
[09:20:50] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[09:21:39] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[09:25:39] *** Joins: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[09:26:11] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[09:29:28] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:d0cb:b707:5684:c8e6)
[09:47:38] <nmz> I mean, its forth, damn thing could run on a toaster
[09:56:00] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[09:58:12] *** Quits: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[09:59:57] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[10:20:16] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[10:24:59] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[10:26:23] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[10:30:02] *** Quits: colordro1 (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cee7.res6.spectrum.com) (Ping timeout: 240 seconds)
[10:45:37] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:d0cb:b707:5684:c8e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:52:36] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[10:53:13] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[10:57:24] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[11:05:58] *** Quits: fcr (~fran@r167-60-73-200.dialup.adsl.anteldata.net.uy) (Ping timeout: 268 seconds)
[11:11:35] *** Joins: fcr (~fran@r167-56-87-39.dialup.adsl.anteldata.net.uy)
[11:12:34] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[11:13:14] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[11:21:34] *** Joins: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[11:21:39] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[11:23:45] *** Joins: Erutuon (~Erutuon@user/erutuon)
[11:37:51] *** Quits: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Remote host closed the connection)
[11:38:18] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[11:45:05] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[12:19:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[12:20:48] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[12:21:25] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[12:32:08] *** Joins: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[12:33:48] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[12:34:36] *** Quits: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[12:39:43] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[12:54:54] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[12:57:57] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[13:05:51] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[13:15:55] *** Joins: ratchetfreak (~ratchetfr@d8D8779D9.access.telenet.be)
[13:24:49] <hsv> How to get a list of a table's indexes and check this against an expected list?
[13:25:23] <hsv> e.g. table has just the expected indexes and no more.
[13:27:04] <hsv> table = { foo = "xxx", bar = "yyy" }
[13:27:08] <hsv> if *something* == { "foo", "bar" } then print("OK") end
[13:31:14] <kakolainen[m]> you could use some set library or just iterate all indexes and check
[13:34:08] <kakolainen[m]> an easy way to do adhoc set functionality would be to make __newindex metamethod which adds hash of the index every time it's accessed, that way tables with same hash will have the same set of indexes
[13:36:00] *** Joins: ratchetfreak_ (~ratchetfr@ptr-82rtos4u888h5wswcur.18120a2.ip6.access.telenet.be)
[13:38:55] <hsv> The input table would be a key-value set, whereas the reference table is a list of keys.
[13:43:17] <kakolainen[m]> the reference table is a key set with only true values
[13:45:34] <kakolainen[m]> if you need high performance you would convert the key set to a bloom filter and check it before checking the set
[13:47:15] <kakolainen[m]> if you only have a dozen keys then a 64bit bloom filter is enough which fits nicely into a single integer
[13:47:35] <andreyorst> hsv: side question - tables are open, why do you care if it has extra keys? If extra keys wouldn't matter, then you could iterate over the list and check if all keys are present in the table
[13:48:29] <hsv> andreyorst: it's validating user input, checking for mal intent.
[13:48:41] <andreyorst> I see
[13:48:59] <andreyorst> well in that case use a hash set instead of a list
[13:50:09] <andreyorst> like allowed = {allowed_key1 = true, allowed_key2 = true} and then just for k,_ in pairs(table_to_check) if allowed[k] == nil then error ... end end
[13:50:24] <hsv> The input is http://..../?foo=xxx&bar=yyy with the args converted to a table: { foo = "xxx", bar = "yyy" }
[13:50:28] <andreyorst> missing keys as well as extra keys should be cauthg like that
[13:51:06] <hsv> thanks, i will try it.
[13:52:37] *** Joins: Darkcoal (~user@user/Darkcoal)
[13:54:31] <andreyorst> alternatively, if you must have a list, you can just create a new table from the table you're checking like: new_table = {} for _,k in ipairs(allowed_keys) new_table[k] = table_to_check[k] end
[13:54:56] <andreyorst> then you'll end up with a table of only allowed keys, and in this loop you can also check for missing keys
[13:55:12] <andreyorst> but I like the first variant better, as it doesn't have unnecessary copying
[13:57:26] <hsv> How does the first method catch missing keys?
[14:02:49] <kakolainen[m]> for validating input you might want to try for example Lua Flatbuffers, just code it so that if the construction fails then it's an invalid input, kind of the langsec way
[14:06:24] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[14:08:55] <kakolainen[m]> missing keys need a second for loop
[14:11:50] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 260 seconds)
[14:12:12] *** Joins: Darkcoal (~user@user/Darkcoal)
[14:12:28] <kakolainen[m]> or maybe you could do it in one for loop, free NFT to anyone who figures out how
[14:16:10] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Quit: taupiqueur)
[14:19:31] *** Quits: tuvok (tuvok@Photography.tuvok.eu) (Ping timeout: 245 seconds)
[14:20:18] *** Joins: dvx (~dvx@5.181.92.64)
[14:20:39] <andreyorst> um. I've provided two ways of doing it with one for loop
[14:20:50] <andreyorst> I don't need NFT tho
[14:21:18] <hsv> andreyorst: How does the first method catch missing keys?
[14:22:18] <andreyorst> for missing keys you can keep count of found keys
[14:22:22] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 250 seconds)
[14:22:32] <andreyorst> check if it is the same as amount of keys in the allowed set
[14:22:43] <andreyorst> (which you can compute once)
[14:24:31] *** Joins: Darkcoal (~user@user/Darkcoal)
[14:44:46] *** Joins: tuvok (tuvok@Photography.tuvok.eu)
[14:55:14] *** Quits: tuvok (tuvok@Photography.tuvok.eu) (Ping timeout: 260 seconds)
[15:08:19] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[15:15:32] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[15:16:47] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:18:07] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[15:18:36] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:26:33] *** Quits: ubq323 (~ubq323@user/ubq323) (Ping timeout: 252 seconds)
[15:27:05] <andreyorst> (though it will not tell you what keys are missing exactly)
[15:28:19] <hsv> sub-optimal solution - http://codepad.org/FMQ9J7q7
[15:30:05] <hsv> Ultimately i will probably either 1) not be so tight arsed about checking, or 2) iterate the args and manually check against the few valid names.
[15:30:56] <hsv> an interesting excercise nonetheless.
[15:46:28] <andreyorst> though, this is two loops as well
[15:46:40] <andreyorst> one loop is just hidden in table.concat
[15:47:39] <hsv> yep it's quite inefficient.
[15:53:44] <kakolainen[m]> counting the amount of keys is the best solution
[15:55:30] <hsv> As a generalised solution i agree.
[15:55:33] <kakolainen[m]> a solution with zero for loops would be do local input=input; setmetatable({}, {__index = function(t,k) if allowedkeys[k] then return input[k] end })
[15:57:39] <hsv> I've saved the general solution for future reference, but will use this for now - https://paste.debian.net/plain/1233083
[16:05:28] *** Joins: ratchet_freak (~ratchetfr@d8D8779D9.access.telenet.be)
[16:09:20] *** Quits: ratchetfreak (~ratchetfr@d8D8779D9.access.telenet.be) (Ping timeout: 272 seconds)
[16:14:23] <andreyorst> hsv: https://paste.debian.net/plainh/c55a2c5b
[16:15:42] <andreyorst> oh, I pasted the older version with wrong take 3, sorry for that
[16:15:48] <andreyorst> but you get the idea
[16:16:34] <andreyorst> k,_ should be _,k
[16:17:17] <hsv> thanks for the help, much appreciated.
[16:21:59] *** Quits: ratchet_freak (~ratchetfr@d8D8779D9.access.telenet.be) (Ping timeout: 256 seconds)
[16:23:06] *** Quits: kiike (~kiike@218.181.77.188.dynamic.jazztel.es) (Read error: Connection reset by peer)
[16:26:36] *** Quits: vancz (~vancz@user/vancz) (Ping timeout: 240 seconds)
[16:29:04] *** Joins: vancz (~vancz@user/vancz)
[16:37:52] *** Quits: vancz (~vancz@user/vancz) (Ping timeout: 256 seconds)
[16:41:17] *** Joins: vancz (~vancz@user/vancz)
[16:45:46] <kakolainen[m]> one loop version: local k1,k2; repeat k1,k2=next(input,k1),next(allowed,k2); assert((not input[k1]) == (not allowed[k1]) and (not input[k2]) == (not allowed[k2])) until((not k1) or (not k2))
[16:50:13] *** Joins: tuvok (tuvok@Photography.tuvok.eu)
[16:56:40] *** Joins: parnikkapore (~parnikkap@user/parnikkapore)
[17:03:00] *** Quits: tuvok (tuvok@Photography.tuvok.eu) (Ping timeout: 240 seconds)
[17:04:16] *** Joins: tuvok (tuvok@Photography.tuvok.eu)
[17:10:28] <andreyorst> completely forgot about repeat
[17:29:22] *** Joins: Elw3 (~Elw3@dynamic-002-247-241-040.2.247.pool.telefonica.de)
[17:31:57] *** Quits: tuvok (tuvok@Photography.tuvok.eu) (Ping timeout: 240 seconds)
[17:49:27] <kakolainen[m]> repeat is nearly always useless, even in that one liner it introduces a bug when input table is empty, using while there wouldn't been that bug
[17:53:30] <Elw3> I use it quite a lot
[18:05:43] *** Quits: ard (~ard@2001:984:74c7:1:21e:6ff:feff:ff03) (Ping timeout: 256 seconds)
[18:06:15] *** Joins: ard (~ard@2001:984:74c7:1:21e:6ff:feff:ff03)
[18:18:38] <nmz> :S
[18:18:40] <nmz> so do I
[18:24:03] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-91ff-82cc-1e7d-4c05.res6.spectrum.com)
[18:29:28] *** Joins: bomb (~bomb@user/bomb)
[18:30:04] *** Joins: alec (~alec@104.219.97.186)
[18:40:51] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d400:5de4:279e:c12c)
[18:40:51] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d400:5de4:279e:c12c) (Changing host)
[18:40:51] *** Joins: skapata (~Skapata@user/skapata)
[18:59:01] *** Joins: ubq323 (~ubq323@130.88.226.27)
[18:59:02] *** Quits: ubq323 (~ubq323@130.88.226.27) (Changing host)
[18:59:02] *** Joins: ubq323 (~ubq323@user/ubq323)
[19:17:27] *** Quits: barkle (kirk@kirk.shelltalk.net) (Ping timeout: 250 seconds)
[19:18:20] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 250 seconds)
[19:25:15] *** Quits: ano (~ano@user/ano) (Ping timeout: 240 seconds)
[19:27:31] *** Joins: ano (~ano@user/ano)
[19:28:00] *** Quits: cr1901_ (~cr1901@2601:8d:8600:911:cf1:8507:720a:c17) (Remote host closed the connection)
[19:28:33] *** Joins: cr1901_ (~cr1901@2601:8d:8600:911:cf1:8507:720a:c17)
[19:29:06] *** cr1901_ is now known as cr1901
[19:29:20] *** Joins: vnogueira (~vnogueira@user/vnogueira)
[19:37:26] *** Joins: velgin (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net)
[19:43:00] *** Quits: parnikkapore (~parnikkap@user/parnikkapore) (Quit: Leaving)
[19:53:56] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 256 seconds)
[19:55:34] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:55:51] *** Joins: Darkcoal (~user@user/Darkcoal)
[19:58:33] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:02:23] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[20:04:30] *** Quits: dionys (dionys@user/dionys) (Quit: dionys)
[20:04:45] *** Joins: dionys (~dionys@user/dionys)
[20:10:16] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[20:12:49] *** Quits: alec (~alec@104.219.97.186) (Quit: WeeChat 3.0)
[20:23:29] *** Joins: velgin_ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net)
[20:24:12] *** Joins: tuvok (tuvok@Photography.tuvok.eu)
[20:24:55] *** Quits: velgin (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[20:34:45] *** Joins: alec (~alec@104.219.97.186)
[20:39:11] *** Quits: alec (~alec@104.219.97.186) (Client Quit)
[20:39:31] *** Joins: alec (~alec@104.219.97.186)
[20:40:12] *** Quits: tuvok (tuvok@Photography.tuvok.eu) (Ping timeout: 240 seconds)
[20:41:03] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Read error: Connection reset by peer)
[20:41:36] *** Joins: tuvok (tuvok@Photography.tuvok.eu)
[20:41:57] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[20:42:17] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[20:43:06] *** Quits: vancz (~vancz@user/vancz) (Quit: vancz)
[20:48:52] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:51:59] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[20:52:54] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:58:45] *** Joins: colordro1 (~erahhal@cpe-142-129-123-225.socal.res.rr.com)
[21:04:57] *** Quits: tuvok (tuvok@Photography.tuvok.eu) (Ping timeout: 240 seconds)
[21:11:44] *** Joins: Asgaroth (~Asgaroth@93.107.191.92)
[21:14:51] *** Joins: _Asgaroth_ (~Asgaroth@93.107.191.92)
[21:14:59] *** Quits: _Asgaroth_ (~Asgaroth@93.107.191.92) (Remote host closed the connection)
[21:20:03] <technomancy> wait repeat is a keyword??
[21:20:33] <furq> sure
[21:21:02] <furq> % repeat print(1) until true
[21:21:02] <bomb> repeat ... until
[21:21:02] <yalb> furq: sandbox:1: count; stack traceback:; [C]: in function 'error'; sandbox:1: in main chunk
[21:21:17] <furq> someone do the thing that resets the bot i forget what it is
[21:21:18] <bomb> upside down while
[21:23:02] <technomancy> coming up on 8 years of lua and this is the first I've heard of it
[21:23:41] <fcr> so is goto
[21:23:55] <technomancy> fcr: that one I know about but only because it's so damn hilarious
[21:24:32] <furq> nothing wrong with goto
[21:24:45] <fcr> at least it's not supported by luajit
[21:25:03] <technomancy> it's super useful for code as performance art
[21:25:06] <technomancy> also for trolling
[21:25:34] *** Joins: lagash (lagash@lagash.shelltalk.net)
[21:33:36] *** Joins: magla (~gelignite@55d44f73.access.ecotel.net)
[21:39:46] *** Joins: vancz (~vancz@user/vancz)
[21:46:48] *** Quits: vancz (~vancz@user/vancz) (Quit: vancz)
[21:47:53] *** Joins: vancz (~vancz@user/vancz)
[21:52:14] *** Joins: netlynx (~jan@94-226-69-15.access.telenet.be)
[21:53:21] *** Joins: kirk (kirk@kirk.shelltalk.net)
[22:01:37] <nmz> ʍɥᴉlǝ
[22:02:10] <nmz> goto is super useful as a next replacement
[22:03:07] <nmz> in awk, you have to use next a lot, seq 10 | lua -e 'for line in io.lines() do if y then goto continue end ::continue:: end os.exit()' 
[22:03:11] <nmz> but it does have its problems
[22:04:49] <sham1> I do still wish that `continue` was its own keyword, not gonna lie. Just having to add a label at the end of a loop just to skip the rest of the body feels icky
[22:06:46] <sham1> It's a minor thing but it's still somewhat irritating
[22:09:51] <furq> they should have removed break for consistency
[22:10:02] <furq> disclaimer: i don't actually think this i think the opposite of this
[22:11:24] <technomancy> removing break isn't enough; they should remove early returns too
[22:11:28] * technomancy flees
[22:11:46] <nmz> woah furq that's too much
[22:12:03] <nmz> could that work theoretically?
[22:12:05] <technomancy> if you want to terminate a loop early that's what god invented recursion for
[22:12:11] <technomancy> you don't need break
[22:12:14] <furq> well yeah it works the same way as not having continue but having goto
[22:12:16] <nmz> afaik goto is scope aware
[22:12:29] <nmz> but I try to never use it, especially for a break
[22:12:44] <nmz> technomancy: go write ATS then
[22:12:54] <fcr> technomancy: you don't need recursion when you can have combinators
[22:13:09] <nmz> no loops, only recursion
[22:13:20] <furq> goto can jump out of a scope
[22:13:25] <furq> it can't jump into a scope
[22:13:26] <nmz> ah
[22:14:00] <nmz> "A label is visible in the entire block where it is defined, except inside nested functions. A goto may jump to any visible label as long as it does not enter into the scope of a local variable. A label should not be declared where a label with the same name is visible, even if this other label has been declared in an enclosing block."
[22:14:05] <furq> break but no continue but goto is one of those things that only makes sense if you've been using lua since 5.1
[22:14:08] <nmz> edge cases abound
[22:14:12] <technomancy> nmz: I did write my own compiler; thanks. it's great and it doesn't have break or early return. =P
[22:14:16] <Elw3> Just never make scopes :D
[22:14:17] <furq> and you know it's there for backward compat
[22:14:21] <furq> otherwise it's completely ridiculous
[22:14:38] <furq> which is something i associate more with other languages
[22:14:47] <nmz> goodbye gsub repl funcs
[22:15:16] <furq> saying that it's still better than break but no continue and no goto
[22:17:33] <nmz> I like break, consider it syntactic sugar
[22:17:49] <nmz> what is the cost of having break anyway?
[22:18:27] <furq> was the disclaimer not explicit enough
[22:32:17] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[22:32:57] *** Joins: fling (~fling@user/fling)
[22:44:11] <sham1> At least lua has proper tail-call elimination so one could replace all loops with recursion, although unlike with stuff like Scheme that's not quite as idiomatic
[22:46:36] *** Quits: Psyraven (~Psyraven@p79032f3f.tokynt01.ap.so-net.ne.jp) (Ping timeout: 240 seconds)
[22:52:37] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:54:43] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[22:54:57] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:04:06] <nmz> furq: well, I was more wondering performance wise
[23:04:06] *** Quits: fcr (~fran@r167-56-87-39.dialup.adsl.anteldata.net.uy) (Read error: Connection reset by peer)
[23:04:16] <nmz> but I just checked and its the same bytecode
[23:04:26] <nmz> neat
[23:04:51] <sham1> Well break and continue really are just structured goto-statements
[23:12:57] *** Joins: fcr (~fran@r167-60-23-38.dialup.adsl.anteldata.net.uy)
[23:45:27] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-91ff-82cc-1e7d-4c05.res6.spectrum.com) (Read error: Connection reset by peer)
