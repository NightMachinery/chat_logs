[00:09:47] *** Quits: randir (~randir@95-25-159-246.broadband.corbina.ru) (Remote host closed the connection)
[00:11:02] *** Joins: randir (~randir@95-25-159-246.broadband.corbina.ru)
[00:18:14] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[00:23:36] *** Joins: semeion (~semeion@user/semeion)
[00:25:11] *** Quits: EGD (~egd@user/egd) ()
[00:34:32] *** Joins: jabberwok (~wlindley@75.105.20.104)
[00:34:35] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 268 seconds)
[00:35:50] *** Joins: khosruw (~khosruw@vps-6df5f188.vps.ovh.net)
[00:36:57] <khosruw> hey guys, it's been a long time I haven't been here. Hope y'all be ok.
[00:37:17] <khosruw> Do we have any LQIP library in Perl? 
[00:38:58] <khosruw> LQIP = Low Quality Image Placeholders, like as we have in Node.js and PHP etc
[00:39:56] *** edef_ is now known as edef
[00:40:49] *** Joins: whynot_ (~whynot@37.73.77.5)
[00:41:45] <khosruw> ... well i got it, i just should: 1. make a copy of image, 2. resize, 3. blur - the image
[00:42:37] *** Quits: khosruw (~khosruw@vps-6df5f188.vps.ovh.net) (Quit: leaving)
[00:44:30] *** Joins: rorx (~rorx@cpe-65-24-161-82.columbus.res.rr.com)
[00:49:23] *** Quits: xenial-user10 (~androirc@20014C4C17E1D20071A86FDA7A344641.catv.pool.telekom.hu) (Read error: Connection reset by peer)
[00:49:30] *** Joins: xenial-user10 (~androirc@20014C4C17E1D20071A86FDA7A344641.catv.pool.telekom.hu)
[01:06:30] *** Quits: rorx (~rorx@cpe-65-24-161-82.columbus.res.rr.com) (Ping timeout: 260 seconds)
[01:06:44] *** Joins: WinterStar (~IceLight@user/icelight)
[01:08:32] *** Joins: rorx_ (~rorx@cpe-192-181-154-240.kya.res.rr.com)
[01:17:11] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 264 seconds)
[01:23:50] <LeoNerd> Not really a perl question, but: Does anyone know of a command somewhat like `tee`, but keeps a limited size buffer on disk? I want the final... maybe 1000 lines or so of log output from a program but I don't know how long it'll run until it breaks. Could be days. So I'd prefer not to eat all my disk space until then
[01:25:53] *** Quits: xenial-user10 (~androirc@20014C4C17E1D20071A86FDA7A344641.catv.pool.telekom.hu) (Ping timeout: 265 seconds)
[01:27:03] *** rorx_ is now known as rorx
[01:30:39] <ether> run in a tmux window, then when you get to the end of the process, set the history-limit config and save the buffer to a file?
[01:31:19] *** Joins: semeion (~semeion@user/semeion)
[01:34:15] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[01:36:16] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[01:36:24] <kiwiroy> LeoNerd: mbuffer?
[01:40:14] <ilmari> that doesn't seem to have anything for limiting how much is saved
[01:40:16] <simcop2387> LeoNerd: tail itself can do that fine, fifo + tail should do fine
[01:40:59] <simcop2387> assuming tail doesn't detect the end of the fifo
[01:41:21] <ilmari> if you can keep the buffer in memory until the end, yes
[01:41:59] <simcop2387> it should only keep the last N lines in memory i would think
[01:42:20] <ilmari> yeah, but LeoNerd specifically said disk buffer, not memory. but if it's only 1000 lines, that should be fne
[01:42:23] <ilmari> *fine
[01:42:46] <LeoNerd> I could write a thing that just keeps the last 1000 lines in memory then writes them to disk on EOF I suppose
[01:43:24] <simcop2387> longcmd | tee fifo & tail -n 1000 fifo | tee logs
[01:43:25] <ilmari> some-command | pee cat 'tail -n1000 > some-command.log'
[01:43:44] <ilmari> no need for a fifo
[01:44:05] <simcop2387> neat, didn't know about peeing
[01:44:48] <simcop2387> part of moreutils apparently
[01:54:02] <simcop2387> alright bye bye perlbot.  back in a few, putting a ups on my router and modem again
[01:56:36] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[01:57:15] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Ping timeout: 260 seconds)
[01:57:25] *** Quits: perldoc (~perldoc@24.88.49.194) (Ping timeout: 252 seconds)
[01:58:31] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 252 seconds)
[01:58:31] *** Quits: kaitlyn0 (~kaitlyn@user/kaitlyn) (Ping timeout: 252 seconds)
[01:58:34] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Ping timeout: 252 seconds)
[01:59:00] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 260 seconds)
[02:00:38] *** Joins: kaitlyn0 (~kaitlyn@user/kaitlyn)
[02:01:58] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[02:04:59] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[02:07:30] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[02:07:30] *** ChanServ sets mode: +v perlbot
[02:08:30] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[02:11:02] *** Joins: perldoc (~perldoc@24.88.49.194)
[02:27:07] *** Quits: dansan (~daniel@75.81.148.51) (Quit: The C preprocessor is a pathway to many abilities some consider to be unnatural.)
[02:28:05] <simcop2387> perldoc: hi
[02:28:05] <perlbot> simcop2387: Your documentation is available at: https://perldoc.perl.org/hi
[02:28:43] <simcop2387> alright there we go
[02:32:47] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[02:32:52] *** Quits: pizdets_ (~pizdets@183.182.115.35) (Ping timeout: 250 seconds)
[02:33:44] <simcop2387> ok i really need to get around to the iouring stuff in perl/io-async.  https://www.phoronix.com/scan.php?page=news_item&px=8M-IOPS-Per-Core-Linux
[02:33:45] <Paperbot> Link title(s): [ Axboe Achieves 8M IOPS Per-Core With Newest Linux Optimization Patches - Phoronix ]
[02:33:50] *** Joins: pizdets (~pizdets@183.182.114.240)
[02:33:53] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Ping timeout: 265 seconds)
[02:34:02] <simcop2387> i think that's going to be my primary focus when i take a short vacation in early december
[02:35:13] <simcop2387> with that, we might be able to make Net::Async::HTTP::Server able to serve up hundreds of thousands of requests per second (of static files anyway)
[02:35:58] *** Joins: dansan (~daniel@75.81.148.51)
[02:36:12] <simcop2387> and maybe similar with hypnotoad too
[02:37:32] *** Joins: humky (~humky@user/humky)
[02:38:47] *** Joins: krismatrix (~krismatri@38.80.149.51)
[02:43:45] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[02:44:10] *** Quits: bs338 (~pi@host217-44-189-120.range217-44.btcentralplus.com) (Ping timeout: 252 seconds)
[02:45:51] *** Joins: bs338 (~pi@host31-54-8-204.range31-54.btcentralplus.com)
[02:47:38] *** Joins: humky (~humky@user/humky)
[02:47:40] *** Quits: whynot_ (~whynot@37.73.77.5) (Quit: leaving)
[02:50:27] *** Quits: jelly (jelly@user/jelly) (Remote host closed the connection)
[02:53:44] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[02:54:08] <krismatrix> I am confused about some real basic concept within perl. And I don't think I quite realized it before. it seems when creating arrays or hash..sometimes we use squayre brackets or curly brackets and other times we use common brackets. Whats going on there?
[02:54:39] <simcop2387> references vs non-references
[02:54:42] <krismatrix> Are my @array = ['abc', 'def'] as well as  my @array = ('abc', 'def') both valid?
[02:54:58] <simcop2387> my $arrayref = [ ... ]; my @array = ( ... );
[02:55:23] <simcop2387> the first of yours is valid but almost certainly not what you want.  it puts an array reference in the first element of @array, and no other elements
[02:55:27] <simcop2387> perldoc: perlreftut
[02:55:28] <perlbot> simcop2387: Your documentation is available at: https://perldoc.perl.org/perlreftut
[02:55:37] <simcop2387> give that a read, it covers the basics of references in perl
[02:55:50] <krismatrix> ok
[02:56:45] <simcop2387> they're sort-of, kind-of, but not really, like pointers in C.  they refer to an array or hash, in a single value (aka a scalar)
[02:57:20] <krismatrix> i am aware of perl references and have used them. I just didn't know or forgot about this difference in declaration.
[02:58:12] <simcop2387> yea it's an easy thing to get confused about when starting out with perl.  python and ruby don't really have the same concept in the same way so it's easy to miss them
[02:58:44] <krismatrix> for example, when doing multi-dimensionsal DS, I don't think I could do { '1' => ('1', '2', '3')} and instead need to do {'1' => ['1', '2', '3'] }
[02:59:51] *** Joins: jelly (~me@user/jelly)
[03:01:14] <krismatrix> that should be common braces and not curly races above
[03:01:42] <krismatrix> i just ran a test code...i guess, I can technically do both...yeesh
[03:01:51] <LeoNerd> Then your test was wrong
[03:02:50] <krismatrix> i meant that I can do ('1' => ('1', '2', '3') }  as well as ('1' => ['1', '2', '3'])
[03:03:15] <LeoNerd> Those are both valid perl things to write, yes
[03:03:17] <LeoNerd> They don't mean the same thing
[03:03:21] <krismatrix> correct
[03:03:25] <krismatrix> or agreed i guess.
[03:03:27] <LeoNerd> Likely only one of them gives the answer you were expecting
[03:03:44] <LeoNerd> Reminder: parens are there just to override parsing precedence between operators
[03:03:53] <LeoNerd> This is the _only_ thing parens mean
[03:04:11] <krismatrix> parens are there just to override parsing precedence between operators --> I don't understand.
[03:04:22] <krismatrix> oh...you mean like PEMDAS?
[03:04:26] <LeoNerd> (1+2) * 3   <== parens override precedence
[03:04:35] <krismatrix> right.
[03:04:36] <LeoNerd> Yes. all operators have precedence
[03:04:43] <LeoNerd> parens exist just to override that
[03:04:55] <LeoNerd> 2, 3, 4    <== a list of numbers
[03:05:04] <LeoNerd> (2, 3, 4)   <== the same list of the same numbers. The parens didn't change that
[03:05:19] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[03:05:20] <krismatrix> but i guess it helps group them.
[03:05:22] <LeoNerd> my @nums = (2, 3, 4)    <== the parens are here to tell the commas to happen first, before the = happens
[03:05:33] <krismatrix> ok.
[03:05:39] <LeoNerd> because without the parens,   my @nums = 2, 3, 4   parses like   (my @nums = 2),  3,  4
[03:05:54] <LeoNerd> But again I will say again: the parens don't *do* anything
[03:06:05] <LeoNerd> (1 => (1, 2, 3))   <== they're not doing anything here
[03:06:10] <LeoNerd> (1 => 1, 2, 3)    <== same list
[03:06:18] <LeoNerd> [] and {} _do_ actually do something
[03:06:36] <LeoNerd> So it should be really obvious when you want to use () and when you want to use [] or {}.. .Namely when you want something to actually happen
[03:06:50] <krismatrix> ok.
[03:06:55] <LeoNerd> [] actually _creates_ an array, sticks some values into it, returns a ref to it
[03:07:05] <LeoNerd> {} actually _creates_ a hash, sticks some keys/values into it, returns a ref to it
[03:09:24] <krismatrix> cool..that helps.
[03:09:52] <krismatrix> Does perl have a within double quote expression evaluation. I know it automatically does it for $ and @ variables.
[03:10:30] <krismatrix> i.e. my $x = 2; my $y= 3;   print "$x + $y = ${x +y}\n";    something like that...
[03:10:32] <LeoNerd> Sortof but it's not very nice. My advice would to be try any of the other things
[03:10:42] <krismatrix> well...i normally do this:
[03:10:44] <LeoNerd> join "", or sprintf, or sticking values into variables then interpoalte those
[03:10:55] <krismatrix> print "$x + $y = ",$x + $y, "\n";
[03:11:02] <LeoNerd> printf "%f + %f is %f", $x, $y, $x + $y;
[03:11:28] <simcop2387> LeoNerd: how would you feel about IO::Async being able to do hundreds of thousands of io operations per second per core? (possibly up to a million or two on the right hardware).
[03:11:35] <LeoNerd> my $result = $x + $y; print "$x + $y is $result";
[03:11:45] <krismatrix> right..all of those work.
[03:11:55] <LeoNerd> join "", "$x + $y is ", $x + $y;
[03:12:06] <LeoNerd> or the concat you suggest
[03:12:11] <simcop2387> if it required some internal changes to enable it do you think it could be worth it? (most likely reading files and directing them into sockets/fds)
[03:12:25] <LeoNerd> simcop2387: ehsure? hard to say no at that point
[03:12:35] <LeoNerd> but would be interested to see in more detail closer the time
[03:14:20] <simcop2387> yea i'll have to get the io_uring library finished, and then start figuring out how to plumb things together inside a loop for io async to do it.  it'd likely require some internal changes to allow me to shortcut some things but i don't know how invasive it'd be.  essentially i'd have to be able to take some common operations and plumb them into the io_uring state-machine and then setup the
[03:14:26] <simcop2387> events to happen later inside perl once the kernel is done.
[03:15:15] <simcop2387> i can't imagine you'd be opposed philosophically to that, but i have no idea how extensive those changes will need to be to do it
[03:15:50] <simcop2387> might just be making some new apis instead that i provide some stub implementations for other loops to use when they don't support that kind of thing
[03:15:58] <LeoNerd> Best to not work in secret then throw it to me atomically at the end, then :)
[03:16:25] <simcop2387> probably won't be in secret but it'll probably be a lot of false starts once the underlying library is ready
[03:17:33] <simcop2387> the main things i can see worth supporting: copy from one fd to another, dump a socket to an fd (with some byte limit, or socket close), send an fd to a socket and get a completion event (and maybe progress ones?)
[03:17:51] <LeoNerd> So, basically the sendfile()-like operations
[03:17:54] <simcop2387> yea
[03:18:01] <LeoNerd> Would be good to get an API shape around those. I didn't quite manage to finish it
[03:18:09] <LeoNerd> tm604 may have some inspirational help there
[03:18:31] <simcop2387> those would potentially let you use a single core perl script to saturate a 10GbE link (maybe up to 25G too, but hard to tell how far that could scale)
[03:19:40] <simcop2387> in theory you could do more, i think they're almost ready to have the bpf stuff work inside io_uring to let you do inspection/conditional stuff at the kernel level which would be kinda cool but that'd need another set of apis really
[03:20:07] <simcop2387> https://lwn.net/Articles/847951/ # bpf and io_uring
[03:20:07] <Paperbot> Link title(s): [ BPF meets io_uring [LWN.net] ]
[03:21:58] * GumbyPAN CPAN Upload: Device-Chip-0.20 by PEVANS https://metacpan.org/release/PEVANS/Device-Chip-0.20
[03:22:04] <simcop2387> there should also be some nice read-async optimizations with io_uring and io-async but those shouldn't need any new apis at least
[03:31:24] <krismatrix> speaking of async...if I want to do some sort of async operations in perl, isn't that just using fork()?
[03:31:46] <mst> krismatrix: those are completely different to async
[03:32:31] <mst> krismatrix: fork is about having multiple processes doing things
[03:32:43] <mst> krismatrix: async is about having a single process doing multiple things
[03:32:47] <krismatrix> hmm...isn't async just a way to say...execute this piece of code but don't wait to finish..when that other piece of code finally finishes...do a callack to the original...fork() does that..doesn't it.
[03:33:34] <xenu> async is more like "when this filehandle is ready for reading execute this code"
[03:33:39] *** Joins: splatt9990 (~splatt999@dsl-208-102-94-26.fuse.net)
[03:33:39] <LeoNerd> that might be sortof one way but it's kinda pretty terrible in almost every respect
[03:33:51] <mst> you can achieve a lot of the same things with both approaches but they work very differently
[03:34:05] <krismatrix> ok.
[03:34:45] <mst> krismatrix: ok, imagine you have five things you want to do at the same time, and they each -need- their own process
[03:34:53] <krismatrix> ok
[03:35:19] <mst> krismatrix: but as results come in to the parent process you want to be able to do something with whichever result just turned up
[03:35:34] <krismatrix> uh huh
[03:35:44] <mst> krismatrix: fork is how you'd give each task its own process
[03:36:03] <mst> krismatrix: async is how you'd make the parent be able to notice 'whichever result showed up' and work on it
[03:36:19] <mst> note, that's not a great explanation, but I'm trying to be as simple as possible here
[03:36:26] <krismatrix> i like simple.
[03:36:32] <mst> to try and give you a general idea
[03:37:25] <Grinnz> async is a catchall phrase for setting up code that will execute when certain conditions happen, rather than sequentially
[03:37:47] <simcop2387> krismatrix: i think the bit you're missing is that there's two concepts: Concurrency and Parallelism.  Concurrency is the ability to have two (or more) things that don't interfere with eachother able to run in any order or at the same time.  Parallelism is having multiple "threads" of execution going at once, i.e. pthreads, fork, beowulf clusters, SMP, etc.
[03:37:58] <Grinnz> non-blocking means that a task can operate in the background and run a callback/followup when it's done, rather than blocking until the task is done
[03:38:17] <Grinnz> neither of these are inherent to forking or threading, but forking and threading are one way to interact with otherwise-blocking code in an async manner.
[03:38:20] <simcop2387> you can have one without the other, but you can't really have effective parallelism without concurrnecy, but you can have concurrency without parallelism.  
[03:39:12] <Grinnz> async code that doesn't involve forking or threading usually instead involves waiting on socket I/O or signals or timers
[03:39:19] <Grinnz> all of which can be done non-blocking
[03:39:20] <simcop2387> what i've just ranted about are the "Proper Computer Science" terms for the whole thing, and will be useful for googling about the concepts.
[03:39:38] <krismatrix> I remember learning about them in uni.
[03:40:06] <krismatrix> Hard to keep them in memory as I don't think multithreaded/multiprocess often but i get your point.
[03:40:18] <simcop2387> they won't necessarily be useful for learning about how async/await and other things actually work as language features, but they are really necessary to have as a general idea to understand those
[03:44:46] <krismatrix> Ok..here is super simple example to see if I grasp the concept. Let's say I have two programs. One in perl. One in python. The python program is running an ML problem..which can take several minutes. The perl program simply prints the time every second. When the python program solves it returns the accuracy and loss as a signal. The perl program while looping and printing time, waits on the signal...when it gets signal, it prints the losses/acurracy, 
[03:44:46] <krismatrix> and then asks the python program to execute again..(maybe with different params). 
[03:45:40] <krismatrix> so...however we call the python program (fork or some other methods)...that perl and python are two processes running...but perl is waiting on the signal from python when it is done. This is the async?
[03:46:12] <Grinnz> it can be, that's up to how you implement it
[03:46:38] <Grinnz> but like i said timers and signals are trivially async
[03:46:45] <Grinnz> since it's just waiting
[03:47:01] * GumbyPAN CPAN Upload: Device-Chip-MAX44009-0.03 by PEVANS https://metacpan.org/release/PEVANS/Device-Chip-MAX44009-0.03
[03:49:15] <mst> krismatrix: a better example would be
[03:49:24] <mst> krismatrix: the perl program is running -two- ML problems
[03:49:37] <mst> krismatrix: each python program was spawned via fork
[03:49:56] <mst> krismatrix: the perl program being able to notice whichever one finished first and report on that
[03:50:05] <mst> krismatrix: is what we're talking about as async
[03:50:18] <krismatrix> right.
[03:50:37] <LeoNerd> "async" is much like "strong typed" - it's a word (phrase) that people throw around and as long as everyone in the conversation has roughly the same idea of what they're talking about, all is fine. But in actual fact it doesn't really have a singled, fixed, definition
[03:51:03] <krismatrix> but fork...which is i guess multi-processing...is different from multi-threading as a concept right?
[03:51:05] <mst> krismatrix: like, this is not a -great- explanation, but it's one intentionally written to try and help you get a handle on the idea
[03:51:16] <krismatrix> no problem mst
[03:51:51] <Grinnz> async is like REST - it described an overall mode of operation, not a specific concept or implementation
[03:51:56] <Grinnz> describes
[03:52:38] <krismatrix> I kinda sorta know these concepts...but I haven't applied them much in practice. I happen to do Async through JS, i guess when using Ajax/promises/fetch. But don't do much signals or async in perl or other languages.
[03:53:03] <krismatrix> so...i am trying to understand where i might want to think about using it.
[03:53:07] <Grinnz> js is pretty much built to be async, like mojo
[03:53:31] <krismatrix> mojo is async?
[03:53:33] <LeoNerd> One particular definition of "async" would apply just to POSIX signals at the Linux level, ... or maybe interrupts at a much lower hardware level in C (or assembly)
[03:54:00] <Grinnz> mojo is designed to support async operation of various components and that's largely how mojolicious daemons operate, yes
[03:54:00] <mst> krismatrix: something worth noting - async did my fucking head in when I first started using it, and I had a long "banging my head against a brick wall until blood or understanding resulted" phase
[03:54:12] <LeoNerd> Namely the idea that the regular flow of control can get suddenly interrupted entirely outside of your control and thrown over to a new place for a short time, until you finish handling the thing, and then you return back to wherever you were
[03:54:23] <mst> krismatrix: it's one of those things that is really hard to understand, right up until it "clicks" in your head, and then you're ok
[03:54:35] <krismatrix> right.
[03:54:38] <Grinnz> (but it should be noted mojolicious applications aren't required to operate async, they run without an event loop when used with the CGI or PSGI server)
[03:55:44] <Grinnz> LeoNerd: well that's also not the same as cooperative async
[03:56:00] <Grinnz> though most of the time event loops still allow signals to interrupt, nothing else does
[03:56:41] <Grinnz> (i say most of the time because POE's signal handlers are deferred to the loop, which i had to stop using because of that)
[03:57:14] <krismatrix> have you guys programmed for like 2 decades plus or something?
[03:57:22] <LeoNerd> definitely "plus"
[03:57:31] <Grinnz> depends on the definition of "programmed"
[03:57:41] <xenu> while modern async solutions *don't* use select(), learning how it works might give you an epiphany
[03:58:03] <Grinnz> i also recommend reading the source code of Mojo::Reactor::Poll
[03:58:07] <LeoNerd> I first started fiddling with a BBC Micro at about age 14. I'm now 39.
[03:58:23] <Grinnz> although it's a little harder to read now that it uses _poll, but you can still get the idea with how it implements timers
[03:58:41] <mst> LeoNerd: Acorn Electron, 6, 38, but same trajectory
[03:59:00] <fuzzix> I started programming a ZX Spectrum when I was 8, and now I'm in my mid 40s. I think I was a better programmer in the 80s, tbh.
[03:59:40] <mst> fuzzix: I made a choice some years back to be able to do liveware hacking as well as software hacking
[04:00:35] <krismatrix> yeesh...i feel like there is so much to learn...and every time i feel like there is a breakthrough...I get punched out.
[04:00:41] <fuzzix> Yeah, I read the manual for that but couldn't get the gist.
[04:00:58] <mst> fuzzix: no, live *ware*, as in wetware
[04:01:02] <mst> fuzzix: as in humans
[04:01:10] <xenu> are you a doctor?
[04:01:44] <mst> krismatrix: dude, that's the best possible moment of programming, I have a thing I've said for so many years I turned it into an IRC client alias, sec
[04:01:47] <mst> learning to program is fundamentally (a) become less stupid (b) discover how much more stupid you are than you originally thought (c) goto a
[04:02:14] <mst> krismatrix: the "discover how much more stupid you are" IS WHAT IT MEANS TO LEVEL UP AS A PROGRAMMER
[04:02:15] <krismatrix> lol
[04:02:24] <fuzzix> mst: Right. Haynes did a tear down.
[04:02:51] <mst> krismatrix: you weren't punched in the face, you'd learned enough to see a whole new world of stuff you were ignorant about, and that was when you should've known you'd really learned something
[04:03:03] <mst> krismatrix: be proud of that feeling, seriously, it means you've done something right
[04:03:43] <krismatrix> yeah. I think my bigger cautionary fear with programming is that i don't get stuck in tutorail hell. I actually want to build stuff with it.
[04:04:38] <krismatrix> xenu: I am not a doctor (assuming the question was directed at me).
[04:04:53] <mst> krismatrix: I can't learn shit unless I have a project I actually want to exist to write in the process
[04:05:25] *** Joins: pucara (~i@181.90.255.235)
[04:05:27] <xenu> krismatrix: mst said he is able to do liveware hacking and i'm trying to figure out what that means
[04:06:03] <mst> xenu: I mean dealing with recalcitrant humanity ;)
[04:06:29] <mst> xenu: there's an Iain M. Banks Culture novel with a ship called the Liveware Problem
[04:06:34] <fuzzix> You gotta understand the user and their requirements, where understand involves full on human empathy, otherwise all your fancy pants software is worthless.
[04:07:05] <mst> fuzzix: sure, and also you need to work with other people
[04:07:07] <fuzzix> Imagine "hu-mon" pronounced as a Ferengi would :)
[04:07:12] <krismatrix> I have been learning a bunch of little things the last year (taking full advantage of pandemic freedom). Improving Perl knowledge, Mojo, Node, Vue, React, TensorFlow...yowza. Every now and then, I have to break..and say to myself..do I really get this..and do a small project. Hence my webpack frustration a few weeks ago. 
[04:07:22] <Grinnz> "psychological manipulation", but hopefully less sociopathic than that sounds
[04:08:29] <mst> when sawyer's original plan for perl7 involved "future releases of perl will never be /usr/bin/perl on any operating system again, and that's ok" the part where people thought that was ok was a liveware problem
[04:09:11] <mst> I might not have been as gentle as I might be in the process of solving it, but it got solved.
[04:10:03] <xenu> tbh i don't find it hard to be up to date, important things rarely change, unless you're a frontend developer, of course
[04:11:09] <Grinnz> as long as you don't think 2005 is "up to date with perl"
[04:11:17] <Grinnz> like most people do
[04:11:27] <xenu> it takes 1 hour to read all perldeltas
[04:11:31] <krismatrix> I don't really do much backend. I keep simple paradigms. flat-files for databases. Don't even need SQL for what I build.
[04:11:47] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 264 seconds)
[04:11:49] <mst> fuzzix: so that's what I mean by liveware problem
[04:12:41] <xenu> btw, fun fact: during the last 20 years only two new major programming languages were invented: go and rust (or three if you count typescript as a new language)
[04:12:44] <xenu> and you're free to ignore them
[04:13:07] <krismatrix> why ignore them?
[04:13:25] <xenu> i didn't say you should, but you can, they aren't necessary for anything
[04:14:01] <krismatrix> Since I don't know C well (well...just the minimum in K&R)...I figured Go/Rust would be valuable for future embededded programming.
[04:14:24] <rfi> I ignored Go for a while until I found out Ken Thompson worked on it. I still ignore it but now I feel a bit bad about it. 
[04:14:26] <krismatrix> or anything where perl (or domain specific language) isn't fast enough.
[04:19:09] <leont> Go is for when you want 80% of C's speed for 20% of the effort. It makes more business sense than technical sense, IME
[04:20:02] <mst> leont: it's not at all my aesthetic but it chose its trade-offs consciously and leaned into them in a way that squeezed almost every possible ounce of advantage out of it
[04:21:00] <mst> leont: also, honestly, it has the only implementation of tricolour parallel mark+sweep that I've ever truly respected
[04:21:11] <krismatrix> leont: That actually sounds good to me about Go. why do you think that it is not all that?
[04:21:29] <leont> I think it's effective, I don't think it's fun at all
[04:21:31] *** Quits: splatt9990 (~splatt999@dsl-208-102-94-26.fuse.net) (Ping timeout: 268 seconds)
[04:21:45] <krismatrix> fun?
[04:21:45] <mst> krismatrix: because it feels like banging rocks together, basically
[04:22:01] <xenu> leont: it's closer to 50% or even worse, but yeah
[04:22:20] <xenu> i don't think people appreciate how fast c/c++/rust are
[04:22:41] <leont> Programming is supposed to be a craft, and as such involved creativity. Go penalizes creativity.
[04:23:09] <leont> xenu: I didn't actually measure, but "much faster than perl/python/ruby" was mainly the thing I was going for
[04:23:54] <leont> I'm way more comfortable with C/C++ than I should be, so I'd never pick go for performance reasons anyway. Started learning rust, since that's where all the exciting things happen nowadays, I expect to mostly switch over eventually.
[04:24:06] <xenu> ocaml is a much better language in a similar space, but unfortunately it's ecosystem is *terrible*, so i can't really recommend it
[04:24:40] <leont> ML is a fairly solid foundation, that helps a lot
[04:24:50] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[04:25:17] <krismatrix> ugh...pass on caml. I learned a little bit of it for a class...and don't understand why I would ever want to use it. What is the point? It seems to be an odd func paradigm that apparently people who love lambda calculus seem to like.
[04:26:09] <xenu> actually i'd say that ocaml is more like "we like functional programming but we don't want to be elitist about it, so feel free to use loops and side effects"
[04:26:59] <krismatrix> anywya...sounds like you guys are saying...if I am not going to bother with C or C++, then Rust should be my choice?
[04:27:36] <krismatrix> I feel like I should learn C/C++...but I don't do much low level stuff..so it has never been a focus.
[04:27:44] <mst> I find it very useful to be able to -debug- C code but I'm fucking terribad at writing C from scratch
[04:28:00] <xenu> C is the foundation of everything and it will remain for the foreseeable future, and it will likely live forever for interoperability
[04:28:03] <mst> leont is actually good at this stuff so will likely have a more useful opinion
[04:28:13] <xenu> even rust relies on using C ABI for interfacing with the external world
[04:28:52] <fuzzix> Like binding to openssl cos you don't roll your own ;)
[04:29:11] <leont> C is fairly easy to learn, and teaches you a lot about how computers work. It's just not very effective at getting pretty much anything done.
[04:29:31] <leont> C++ is much more effective, but also much harder to learn well.
[04:29:58] <krismatrix> I mean...i know C at a basic level. I can do print, simple mathematical functions, etc. I get stuck sometimes with file IO stuff and doing memory mgmt.
[04:30:01] <leont> At this stage, rust is definitely the better language, and for any stand alone project I would very much recommend it over either
[04:30:21] <xenu> although tbh for majority of project both c++ and rust are overkills
[04:30:25] <xenu> projects*
[04:31:08] <krismatrix> I think C/C++/Rust is for game engine, graphics or arduino (microcontroller) stuff for my needs.
[04:31:23] <leont> They're worth it for their standard library alone. C doesn't even give you automatic arrays of maps, having to reimplement that sort of thing again and again gets tiresome
[04:31:33] <leont> s/of/or/
[04:32:00] <xenu> yeah, it's pain, every C project implements its own buggy and slow hashtable
[04:32:43] * mst quite enjoying playing with nim
[04:32:46] <krismatrix> leont: They're worth it for their standard library alone. --> What is they here?
[04:32:53] <leont> C++/Rust
[04:33:03] <leont> (when compared to C)
[04:33:04] <xenu> C doesn't have RAII, it doesn't have real generics (_Generic is useless), it doesn't have error handling
[04:33:11] <krismatrix> ok.
[04:33:37] *** Quits: rorx (~rorx@cpe-192-181-154-240.kya.res.rr.com) (Ping timeout: 252 seconds)
[04:34:24] <xenu> also tbh C even sucks as a portable assembly due to the committee's incompetence: strict aliasing rules, signed integer overflow is undefined, unaligned reads are UB, bitfields are limited to ints for no apparent reason
[04:34:33] <xenu> but unfortunately there are no alternatives
[04:35:36] <leont> unaligned reads were something we ran into in 5.32.0-RC1 -_-
[04:36:10] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 265 seconds)
[04:36:59] <xenu> fun fact: it's impossible to implement malloc() or memcpy() without triggering UB
[04:37:23] <leont> It was discovered because m68k has weird alignment rules, and debian still supports that
[04:37:29] <xenu> at least C++ has std::bit_cast, which is a cast that ignores the strict aliasing rules
[04:39:13] <xenu> yeah, 68k is weird because sizeof(void*) == 4, but everything is aligned to 2 bytes
[04:39:54] <xenu> btw there's another platform with similar weirdness which probably would've triggered the same bug, but we don't test on it
[04:40:01] <xenu> x32 linux (64-bit code with 32-bit pointers)
[04:40:12] <xenu> sizeof(void*) == 4 but everything is aligned to 8 bytes
[04:40:41] <mst> https://thephd.dev/binary-banshees-digital-demons-abi-c-c++-help-me-god-please
[04:40:41] <Paperbot> Link title(s): [ Binary Banshees and Digital Demons | The Pasture ]
[04:40:59] <xenu> unaligned reads are legal on x86 but iirc our problem wasn't actually about doing unaligned reads but about making assumptions about struct layout
[04:42:12] *** Joins: splatt9990 (~splatt999@2600:2b00:8a19:ea00:435:2032:7643:fff5)
[04:46:28] *** Quits: andinus (andinus@tilde.institute) (Remote host closed the connection)
[04:49:19] *** Joins: rorx (~rorx@cpe-65-24-161-82.columbus.res.rr.com)
[04:51:31] *** Joins: bn_work (uid268505@id-268505.uxbridge.irccloud.com)
[04:53:54] <xenu> mst: i like this article but it's slightly inaccurate about time_t
[04:54:18] <xenu> the only reason why musl and bsds broke their ABI when moving to 64-bit time_t was laziness
[04:54:21] <Grinnz> time_t is slightly inaccurate so that makes sense
[04:54:21] <mst> xenu: it's a C and C++ standard editor, take it up with them
[04:54:44] <xenu> msvcrt avoided the breakage with some preprocessor magic
[04:55:35] *** Quits: rorx (~rorx@cpe-65-24-161-82.columbus.res.rr.com) (Ping timeout: 264 seconds)
[04:56:34] <xenu> mst: they probably ommitted that to make their point stronger :P
[04:56:38] <xenu> i do this all the time!
[04:59:17] <xenu> intmax_t otoh is a turd comparable with VLA, and both were introduced in c99. as i said, i'm not exacly a fan of the C committee
[04:59:42] <mst> neither is the blog author, even if they choose to work within said system
[04:59:49] <mst> you might enjoy the rest of their rants
[04:59:49] *** Joins: rorx_ (~rorx@cpe-65-24-161-82.columbus.res.rr.com)
[05:00:20] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Remote host closed the connection)
[05:03:22] <xenu> if i were less lazy i'd make a bell curve meme about C: IQ 0-80: "they should just remove the UB" IQ 80-120: "there important historical and performance reasons why UB is needed" IQ 120+: "they should just remove the UB"
[05:03:26] *** Quits: Su-Shee (~Susanne@p508945c8.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[05:03:33] <xenu> there are important*
[05:04:04] <mst> ahahahahaha
[05:05:28] *** Joins: Su-Shee (~Susanne@p50894696.dip0.t-ipconnect.de)
[05:06:21] <keir> I think more and more Rust jobs are going to start appearing in the next 5 years.
[05:06:42] <keir> more and more companies are adopting it
[05:06:49] <keir> so it's definitely a skill to have
[05:07:02] <krismatrix> yeah.
[05:07:06] <krismatrix> ?
[05:08:03] <keir> (how much you can lean on idomatic rust is another question though)
[05:08:21] <krismatrix> I think my difficulty with companies is...i am good at perl..and most of them don't use it for any sort of heavy programming. For whatever reason...they don't find it convincing that I can translate skill to other languages.
[05:09:03] <keir> you still probably need an understanding of memory management when you may need to open an unsafe Rust block
[05:09:33] <keir> or an understand of C, if you need to call out to C code
[05:09:43] <keir> s/understand/understanding/
[05:12:30] <keir> so C and Rust kind of go hand in hand
[05:13:11] <Grinnz> LeoNerd: i feel like this applies to lots of responses to your recent suggestions https://twitter.com/thingskatedid/status/1449911094789607429
[05:13:12] <Paperbot> Kate (@thingskatedid) 11m15s ago: awk's math API: > You can use ‘pi = atan2(0, -1)’ to retrieve the value of pi  from the people who brought you "why implement head(1) when you can sed 10q"?
[05:13:46] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[05:15:37] *** rorx_ is now known as rorx
[05:15:56] <xenu> does perl have pi?
[05:16:05] <Grinnz> Math::Trig is core so, ish
[05:16:55] <xenu> oh, apparently POSIX has it too
[05:16:56] <xenu> M_PI
[05:17:16] <Grinnz> yes when i want irrational numbers i'll definitely be going for POSIX
[05:17:45] <xenu> there are plenty of math functions there
[05:18:13] <mst> and core has sin/cos etc.
[05:19:02] <xenu> that pi() from Math::Trig is a some kind of object that represent a real pi or is it just approximation?
[05:19:08] <xenu> represents*
[05:19:35] <xenu> i can't tell from the docs
[05:20:58] <Grinnz> https://metacpan.org/dist/Math-Complex/source/lib/Math/Complex.pm#L327
[05:20:59] <Paperbot> Link title(s): [ lib/Math/Complex.pm - metacpan.org ]
[05:21:16] <xenu> yeah, so it's just an approximation
[05:21:44] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:21:53] <Grinnz> kind of stupid that pi2 and pi4 etc are provided but they just multiply that instead of calculating it from atan2 themselves
[05:23:44] <Grinnz> sweval: use Math::Calc::Parser; Math::Calc::Parser->new->bignum(1)->evaluate('atan pi')
[05:23:46] <perlbot> Grinnz: bless( {_m => bless( [698343509,322083605,911683444,627255678,1262], 'Math::BigInt::Calc' ),_e => bless( [39], 'Math::BigInt::Calc' ),_es => "-",sign => "+"}, 'Math::BigFloat' )
[05:23:49] <Grinnz> sweval: use Math::Calc::Parser; Math::Calc::Parser->new->bignum(1)->evaluate('atan pi')->bstr
[05:23:51] <perlbot> Grinnz: 1.262627255678911683444322083605698343509
[05:23:58] <Grinnz> that uses bpi
[05:35:11] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 264 seconds)
[05:36:51] *** Quits: splatt9990 (~splatt999@2600:2b00:8a19:ea00:435:2032:7643:fff5) (Read error: Connection reset by peer)
[05:37:49] *** Joins: splatt9990 (~splatt999@2600:2b00:8a19:ea00:435:2032:7643:fff5)
[05:40:35] *** Quits: Su-Shee (~Susanne@p50894696.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[05:41:31] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:42:16] *** Joins: Su-Shee (~Susanne@p50894129.dip0.t-ipconnect.de)
[05:43:19] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[05:44:27] *** Quits: splatt9990 (~splatt999@2600:2b00:8a19:ea00:435:2032:7643:fff5) (Read error: Connection reset by peer)
[05:45:42] *** Joins: splatt9990 (~splatt999@95.141.35.15)
[05:46:07] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[05:48:45] <_73> In module A I have `use lib '/foo'` so I can import module B. In module B I have `use lib /bar` so I can import module C. However from module A I get the error `Compilation failed in require` unless in module A I also add `use lib /bar`. Is this just a fact of perl life?
[05:54:03] <_73> and by `this` I mean that toplevel modules have to add all lower level module paths to its @INC
[05:54:41] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 245 seconds)
[06:04:10] *** Joins: semeion (~semeion@user/semeion)
[06:18:10] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:18:43] <Grinnz> are they actually absolute paths, first of all?
[06:18:47] <Grinnz> (they should be)
[06:19:17] <Grinnz> and no, the effect of use lib is global
[06:19:27] <Grinnz> as long as you do it before the module that needs to be found there
[06:19:36] <simcop2387> perlbot: hi
[06:19:38] <perlbot> simcop2387: hi
[06:19:42] <simcop2387> yea just the roku
[06:19:53] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:28:14] *** Quits: splatt9990 (~splatt999@95.141.35.15) (Remote host closed the connection)
[06:30:15] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[06:30:16] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[06:31:10] *** Joins: splatt9990 (~splatt999@tor-relay.zwiebeltoralf.de)
[06:31:18] *** Quits: splatt9990 (~splatt999@tor-relay.zwiebeltoralf.de) (Remote host closed the connection)
[06:31:32] *** Joins: splatt9990 (~splatt999@172.58.187.44)
[06:33:01] *** Quits: splatt9990 (~splatt999@172.58.187.44) (Client Quit)
[06:49:25] <xenu> typically you don't use 'lib' in modules at all, only in the main script
[06:50:18] <xenu> but that's a side note, *technically* it doesn't matter where it is, as long as it was used before you tried to load a module located in the added path
[06:50:38] <xenu> as Grinnz said
[06:54:30] *** Joins: krismatrix (~krismatri@38.80.149.51)
[07:03:58] *** Quits: pucara (~i@181.90.255.235) (Quit: Lost terminal)
[07:04:50] *** Joins: Martchus_ (~martchus@dynamic-077-002-062-076.77.2.pool.telefonica.de)
[07:04:55] *** Quits: Martchus (~martchus@dynamic-095-114-048-192.95.114.pool.telefonica.de) (Ping timeout: 252 seconds)
[07:20:49] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[07:23:47] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 264 seconds)
[07:24:59] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Ping timeout: 264 seconds)
[07:27:47] *** Joins: ozzzo_work (~ozzzo_wor@h87.s239.verisign.com)
[07:27:59] <ozzzo_work> https://perl.bot/p/udxjaq
[07:27:59] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[07:28:13] <ozzzo_work> What am I doing wrong here?
[07:28:38] <ozzzo_work> It's reporting the error on the sleep at line 20
[07:32:51] <xenu> what error?
[07:33:17] <xenu> you only pasted a warning and it isn't triggered by sleep()
[07:36:43] <Grinnz> the warning is probably from $check_rdns_output being undef in the while condition checking its string equality
[07:37:05] <mst> ozzzo_work: http://trout.me.uk/vaguecat.jpg ? :)
[07:37:17] <Grinnz> eq '' is not the correct way to determine a value is empty unless you know it will be a string
[07:37:32] <Grinnz> which we don't have enough context to guess
[07:38:51] <ozzzo_work> should it be: while (!$check_rdns_output)
[07:39:22] <xenu> maybe? we don't know what $check_rdns_output is and where it comes from
[07:39:55] <Grinnz> it could be correct to check !defined, or !length, or it could be incorrect that it's undef at all, we don't know
[07:39:57] <ozzzo_work> before the loop I'm setting it to ""
[07:40:23] <mst> ozzzo_work: we don't know!
[07:40:34] <mst> ozzzo_work: stop hiding the problem
[07:40:42] <mst> vague question is really, really vague, in fact it's so fucking vague that you can't even caption a cat with it because the cat would DIE OF VAGUE
[07:42:02] <Grinnz> when gethostbyaddr fails it returns undef not empty string so that's a likely reason
[07:42:12] <ozzzo_work> it looks like  (!$check_rdns_output) is working; I don't get the warning anymore
[07:42:13] <Grinnz> why are you setting anything to empty string?
[07:42:22] * mst sighs
[07:42:33] <mst> ozzzo_work: do you want help or not? :(
[07:42:48] <ozzzo_work> maybe I should just do "my $check_rdns_output" instead of setting it to ""
[07:42:51] <mst> Grinnz: time for the phryk check
[07:43:36] <Grinnz> yes, if undef is your failure indication don't introduce random empty strings, and use defined() not eq or plain truthiness
[07:43:49] <ozzzo_work> got it, ty
[07:44:01] <Grinnz> anyway, Socket::getnameinfo is a better function for this
[07:44:09] <Grinnz> if a bit more involved to call
[07:44:19] <ozzzo_work> I was on vacation for a few months so I forgot some of my basic perl knowledge
[07:46:07] <Grinnz> this while loop also makes no sense unless you're expecting dns to randomly fail and are ok with infinite loops when rdns doesn't resolve
[07:46:55] <Grinnz> like, retry a couple times sure, but an infinite loop checking it seems excessive
[07:46:56] <ozzzo_work> it's waiting for gethostbyaddr to return a non-empty value
[07:47:23] * mst sighs
[07:47:26] <Grinnz> is this part of a process that should be setting rdns or something?
[07:47:56] <ozzzo_work> https://perl.bot/p/i8wij8
[07:47:57] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[07:48:27] <ozzzo_work> it's my stackwatch script. It creates a bunch of VMs, then times how long it takes for creation, ping, f/rDNS, and deletion
[07:48:39] <Grinnz> ok so it is then
[07:48:52] <ozzzo_work> I wrote the same thing at Spectrum a few months ago; now I'm working for Verisign
[07:49:18] <Grinnz> i see you're using an alarm timeout in place of limiting your while loop
[07:49:45] <ozzzo_work> is there a better way to wait $timing seconds?
[07:50:22] <Grinnz> depends whether the alarm can actually interrupt gethostbyaddr
[07:50:27] <Grinnz> which i don't know
[07:50:28] <ozzzo_work> er... sorry not $timing
[07:50:52] <Grinnz> if it can't, then the alarm is pointless and you should just check after each iteration whether you've exceeded the time and break the loop yourself
[07:51:03] <ozzzo_work> $global_alarm_timeout
[07:51:54] <ozzzo_work> gethostbyaddr doesn't block; it either returns the DNS value or an empty value
[07:52:07] <ozzzo_work> so I'm calling it in a loop until I get a value, or it times out
[07:52:21] <Grinnz> if you're not worried abotu gethostbyaddr blocking then yeah, the alarm is pointless
[07:52:52] <ozzzo_work> so it would be better to just check the time on every loop and break out when it expires?
[07:52:56] <Grinnz> yes
[07:53:01] <ozzzo_work> ok got it
[07:53:47] <Grinnz> alarm introduces a whole bunch of signal complication which is sometimes worthwhile, but not if you can avoid it
[08:00:37] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (*.net *.split)
[08:00:37] *** Quits: Champi (Champi@damn.e-leet.be) (*.net *.split)
[08:00:37] *** Quits: noctux (~noctux@user/noctux) (*.net *.split)
[08:00:37] *** Quits: tobs (~tobs@taboege.de) (*.net *.split)
[08:00:37] *** Quits: thowe_ (~thowe@66.39.169.133) (*.net *.split)
[08:00:37] *** Quits: ilmari (~ilmari@user/ilmari) (*.net *.split)
[08:00:37] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[08:00:37] *** Quits: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2) (*.net *.split)
[08:00:37] *** Quits: peder (4822@nidur.ifi.uio.no) (*.net *.split)
[08:00:37] *** Quits: f3ew (~f3ew@2a01:4f9:4b:3b57::2) (*.net *.split)
[08:00:37] *** Quits: plicease (quassel@2600:3c00::f03c:91ff:feea:c7bb) (*.net *.split)
[08:00:37] *** Quits: haarg (haarg@haarg.org) (*.net *.split)
[08:00:37] *** Quits: revhippie (~jdavis@047-013-092-010.res.spectrum.com) (*.net *.split)
[08:00:37] *** Quits: Benett (~Benett@2a03:4000:1a:7aa::2) (*.net *.split)
[08:00:37] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[08:00:37] *** Quits: El_Che (~nxadm@ssh2.ulyssis.student.kuleuven.be) (*.net *.split)
[08:00:37] *** Quits: diegok (~diegok@ns2.freekeylabs.com) (*.net *.split)
[08:00:37] *** Quits: dmvrtx_ (dmvrtx@2a01:7e01::f03c:92ff:fefd:6ed6) (*.net *.split)
[08:00:45] *** Joins: plicease (quassel@2600:3c00::f03c:91ff:feea:c7bb)
[08:00:46] *** Joins: ilmari (~ilmari@user/ilmari)
[08:00:47] *** Joins: tobs (~tobs@taboege.de)
[08:00:47] *** Joins: Spiney_ (~Spiney@2604:a880:400:d0::1d82:b001)
[08:00:48] *** Joins: noctux (~noctux@user/noctux)
[08:00:49] *** Joins: El_Che (~nxadm@ssh2.ulyssis.student.kuleuven.be)
[08:00:49] *** Joins: Riviera (Riviera@user/riviera)
[08:00:50] *** Joins: revhippie (~jdavis@047-013-092-010.res.spectrum.com)
[08:00:51] *** Joins: thowe (~thowe@66.39.169.133)
[08:00:52] *** Joins: dmvrtx (dmvrtx@2a01:7e01::f03c:92ff:fefd:6ed6)
[08:00:53] *** Joins: f3ew (~f3ew@2a01:4f9:4b:3b57::2)
[08:00:54] *** Joins: peder (4822@nidur.ifi.uio.no)
[08:01:10] *** Joins: haarg (haarg@haarg.org)
[08:01:30] *** Joins: quesker (~idnet@mail.89vx.net)
[08:01:30] *** Joins: Benett (~Benett@2a03:4000:1a:7aa::2)
[08:01:30] *** Joins: phryk (~totallyno@user/phryk)
[08:01:36] *** Joins: Champi (Champi@damn.e-leet.be)
[08:16:03] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[08:34:17] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[08:45:23] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:2db9:cc50:9077:eb75) (Ping timeout: 264 seconds)
[08:56:11] *** Quits: FastJack_ (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 264 seconds)
[09:17:25] *** Joins: mattil (~mattil@d1xx8qbp0trf5hq631f-4.rev.dnainternet.fi)
[09:17:32] *** Quits: mattil (~mattil@d1xx8qbp0trf5hq631f-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:18:10] *** Joins: mattil (~mattil@airio.portalify.com)
[09:19:16] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:19:43] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Remote host closed the connection)
[09:19:55] *** Joins: jplesnik (~jplesnik@83.240.62.176)
[09:20:00] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[09:24:04] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[09:27:08] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[09:27:29] *** Joins: mattil (~mattil@d1xx8qbp0trf5hq631f-4.rev.dnainternet.fi)
[09:28:03] *** Quits: mattil (~mattil@d1xx8qbp0trf5hq631f-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:29:03] *** Joins: mattil (~mattil@d1xx8qbp0trf5hq631f-4.rev.dnainternet.fi)
[09:29:50] *** Quits: mattil (~mattil@d1xx8qbp0trf5hq631f-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:30:23] *** Joins: mattil (~mattil@airio.portalify.com)
[09:33:23] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Remote host closed the connection)
[09:34:21] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[09:36:22] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[09:44:54] *** Joins: mattil (~mattil@d1xx8qbp0trf5hq631f-4.rev.dnainternet.fi)
[09:46:31] *** Quits: mattil (~mattil@d1xx8qbp0trf5hq631f-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:47:31] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:47:34] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:48:06] *** Joins: mattil (~mattil@airio.portalify.com)
[10:01:17] *** Joins: Discipulus_ (~discip@194.242.223.24)
[10:05:06] *** Quits: u4ia (~u4ia@2a02:a462:49df:1:201:2eff:fe34:f6fb) (Ping timeout: 245 seconds)
[10:06:02] *** Joins: u4ia (~u4ia@2a10:3781:18fd:1:53d4:805b:c8e3:1629)
[10:27:12] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[10:30:25] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:35:00] *** Quits: randir (~randir@95-25-159-246.broadband.corbina.ru) (Remote host closed the connection)
[10:41:48] * GumbyPAN CPAN Upload: App-Timestamper-WithElapsed-0.6.1 by SHLOMIF https://metacpan.org/release/SHLOMIF/App-Timestamper-WithElapsed-0.6.1
[10:48:09] *** Joins: randir (~randir@93.159.239.42)
[10:52:20] *** Joins: cation21 (cation@user/cation)
[10:53:48] *** Quits: cation (cation@user/cation) (Ping timeout: 265 seconds)
[10:55:37] *** cation21 is now known as cation
[11:08:20] *** Joins: art1 (~romeyke@p200300ccdf0708005da90432bf8b3226.dip0.t-ipconnect.de)
[11:12:00] *** Quits: veesh (~veesh@89.237.104.108) (Ping timeout: 268 seconds)
[11:24:00] *** Joins: veesh (~veesh@89.237.97.163)
[11:31:38] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[11:32:30] *** Joins: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net)
[11:32:50] *** Joins: alex_ (~alex11@user/alex11)
[11:33:03] *** Joins: darkstarx (~darkstard@2601:1c2:300:c8a0::6c32)
[11:33:18] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[11:33:18] *** Quits: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32) (Remote host closed the connection)
[11:33:26] *** Quits: patterner_ (sid212303@ilkley.irccloud.com) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: tag (sid271787@lymington.irccloud.com) (Ping timeout: 245 seconds)
[11:33:52] *** Joins: tag (sid271787@id-271787.lymington.irccloud.com)
[11:33:55] *** Joins: patterner_ (sid212303@id-212303.ilkley.irccloud.com)
[11:34:22] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 252 seconds)
[11:35:31] *** Quits: Fozzworth (~Fozzworth@user/fozzworth) (Ping timeout: 245 seconds)
[11:55:29] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[11:58:39] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 258 seconds)
[12:07:02] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[12:07:34] *** Joins: mattil (~mattil@airio.portalify.com)
[12:30:09] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (Quit: All for nothing)
[12:41:51] <Altreus> :v
[12:47:17] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[13:06:41] *** Quits: alex_ (~alex11@user/alex11) (Quit: Leaving)
[13:07:04] * GumbyPAN CPAN Upload: WorkerManager-0.1002 by HATENA https://metacpan.org/release/HATENA/WorkerManager-0.1002
[13:08:21] *** Joins: choroba (~E.Choroba@88.146.255.114)
[13:14:47] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Ping timeout: 264 seconds)
[13:18:01] *** Quits: Michelle (~michelle@203.206.128.220) (Ping timeout: 268 seconds)
[13:19:07] *** Joins: Michelle (~michelle@2407:8800:bc20:200a:7c32:fcf6:11e0:aab0)
[13:30:20] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:31:05] *** Joins: csrf (~csrf@user/csrf)
[13:31:56] *** Quits: sdk_ (~x@shell.codevoid.de) (Quit: gopher://codevoid.de)
[13:32:50] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:37:11] *** Quits: Su-Shee (~Susanne@p50894129.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[13:39:03] *** Joins: Su-Shee (~Susanne@p4ffc780d.dip0.t-ipconnect.de)
[13:43:35] *** Quits: mattil (~mattil@airio.portalify.com) (Read error: Connection reset by peer)
[13:44:14] *** Joins: mattil (~mattil@airio.portalify.com)
[13:54:51] *** Joins: sdk_ (~x@shell.codevoid.de)
[13:55:32] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[13:58:38] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 258 seconds)
[14:04:00] *** Quits: Su-Shee (~Susanne@p4ffc780d.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[14:04:37] *** Joins: jabberwok (~wlindley@75.105.20.104)
[14:05:32] *** Joins: Su-Shee (~Susanne@p4ffc7853.dip0.t-ipconnect.de)
[14:05:54] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:11:23] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:27:36] <gamo> \o/
[14:30:36] *** Joins: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[14:33:37] <rindolf> gamo: hi, sup?
[14:45:29] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:47:14] * GumbyPAN CPAN Upload: Catalyst-Plugin-CurrentComponents-0.008 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/Catalyst-Plugin-CurrentComponents-0.008
[14:48:13] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:51:55] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:56:32] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:57:04] *** Joins: mattil (~mattil@airio.portalify.com)
[15:02:06] *** Quits: Su-Shee (~Susanne@p4ffc7853.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[15:02:24] *** Joins: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu)
[15:03:29] *** Joins: Su-Shee (~Susanne@p4ffc7713.dip0.t-ipconnect.de)
[15:07:15] *** Quits: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu) (Ping timeout: 258 seconds)
[15:07:58] *** Quits: roflbot (~hoydand@195.181.139.135) (Remote host closed the connection)
[15:10:35] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 264 seconds)
[15:11:40] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 252 seconds)
[15:12:33] *** Quits: sdk_ (~x@shell.codevoid.de) (Quit: gopher://codevoid.de)
[15:12:48] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[15:22:29] <daemon> what the heck happened to poe.perl.org Third Love Corperation?
[15:22:33] <daemon> Lobe Corperation*
[15:22:35] *** Quits: Su-Shee (~Susanne@p4ffc7713.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[15:22:54] *** Joins: mattil (~mattil@airio.portalify.com)
[15:23:14] <daemon> ok weird I ahve two different browsers doing different things
[15:23:48] <daemon> https://poe.perl.org seems to have some broken ssl ticket and be this: https://i.imgur.com/e3JrnBh.png
[15:23:50] *** Joins: Su-Shee (~Susanne@p4ffc7739.dip0.t-ipconnect.de)
[15:23:55] <daemon> the http one is perfectly normal
[15:25:02] <rindolf> daemon: Corporation?
[15:25:19] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[15:25:23] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:25:32] <daemon> rindolf, no idea check the screenshot or goto https://poe.perl.org
[15:25:35] <daemon> I assume its not just me getting this
[15:25:48] *** Quits: mattil (~mattil@airio.portalify.com) (Read error: Connection reset by peer)
[15:26:02] *** Joins: mattil (~mattil@airio.portalify.com)
[15:29:40] <rindolf> daemon: i see
[15:29:52] <Altreus> yep invalid cert
[15:30:18] <Altreus> what is the third lobe corporation?
[15:31:14] <daemon> no idea first time I think I have ever seen that, I normally just goto http://poe.perl.org but chrome defaults to https (do not usually use chrome)
[15:31:16] <Paperbot> Link title(s): [ POE: Perl Object Environment ]
[15:34:35] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Ping timeout: 264 seconds)
[15:43:29] *** Joins: proller (~p@2a02:6b8:0:40c:139d:4eb7:a2e7:6842)
[15:49:13] *** Joins: krismatrix (~krismatri@38.80.149.51)
[15:50:51] *** Quits: jabberwok (~wlindley@75.105.20.104) (Remote host closed the connection)
[15:54:37] *** Joins: sdk_ (~x@shell.codevoid.de)
[15:55:17] <merpaderp> :eval say $$; fork || say $$;
[15:55:26] <merpaderp> eval: say $$; fork || say $$
[15:55:28] <perlbot> merpaderp: 1 2 
[15:58:39] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:03:02] <The_Blode> Good afternoon Perlites!
[16:03:06] <djerius> mst: aptly named role.  but, see https://l.perl.bot/p/5tjihm.  1) stdout disappears when sent into pipe. 2) may take several runs of the code to clear out the queue.
[16:03:06] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[16:03:19] <The_Blode> Quick question. Is this valid / optimal? if ($var =~ 1) {
[16:04:00] <Altreus> not optimal for legibility I'd say
[16:04:10] <Altreus> eval: 10203 =~ 1
[16:04:12] <perlbot> Altreus: 1
[16:04:22] <Altreus> eval: 20203 =~ 1
[16:04:23] <perlbot> Altreus: No output.
[16:04:43] <The_Blode> eval: 10 =~ 1
[16:04:44] <Altreus> but it's easy to miss that it's being used as a regex so you might as well make it /1/
[16:04:45] <perlbot> The_Blode: 1
[16:05:12] <The_Blode> I'm thinking of asking them to use equality operator instead
[16:05:34] *** Joins: roflbot (~hoydand@195.181.139.135)
[16:05:37] <Altreus> That's different logic
[16:05:47] <Altreus> We commonly use what you posted to check HTTP status codes
[16:05:48] <choroba> do you mean -1 != index 10203, 1 ?
[16:05:55] <Altreus> and by commonly I mean I wish we wouldn't do that
[16:06:05] <Altreus> But you can e.g. test for an error with $code =~ /^4/
[16:06:33] <Altreus> the alternative is $code >= 400 && $code < 500
[16:06:42] <Altreus> or 600 if you want all errors, I guess
[16:06:51] <Altreus> can we do ternary comparisons in perl?
[16:07:08] <Altreus> eval: my $code = 401; 400 <= $code < 500
[16:07:09] <The_Blode> Ok it just looks slightly off to me.
[16:07:09] <perlbot> Altreus: 1
[16:07:11] <Altreus> nice
[16:07:27] <Altreus> The_Blode: it is slightly off because it probably doesn't quite mean what they think it does
[16:07:43] <Altreus> if they really mean "this number contains a 1" then ... well
[16:07:50] <Altreus> That's a strange thing to ask for
[16:09:34] *** Joins: quernd41 (~quernd@boethin.uberspace.de)
[16:09:36] <The_Blode> Well, the block is looking for 1 only
[16:11:02] <Altreus> welp if that's what they meant then that is a suitable way of doing it, although I'd ask for the slashes
[16:11:20] <Altreus> I think /1/ makes it clearer you didn't mean /^1/ or anything like that
[16:11:21] *** Quits: quernd4 (~quernd@boethin.uberspace.de) (Ping timeout: 245 seconds)
[16:11:21] *** quernd41 is now known as quernd4
[16:11:57] <Altreus> also makes it easier to later amend that regex when it turns out that's not what they meant :D
[16:13:01] *** Joins: koo6 (~koo6@89-24-49-216.nat.epc.tmcz.cz)
[16:19:21] *** Joins: semeion (~semeion@user/semeion)
[16:19:45] *** Joins: jabberwok (~wlindley@75.105.20.104)
[16:20:59] <jabberwok> Note to self: When you have been mucking with your program's modules and the boss asks for a summary of your work, but you don't remember what you have done ----   $ git add lib
[16:21:32] <lopid> git diff?
[16:21:42] <jabberwok> more a lame pun on "ad-lib"
[16:23:12] <lopid> ah
[16:25:34] <jabberwok> Puns, after all, are jokes that are not yet fully groan
[16:29:04] <lopid> oh i don't know about that…
[16:30:30] <huf> the other way around
[16:30:31] <huf> rather
[16:34:05] *** Quits: kaitlyn0 (~kaitlyn@user/kaitlyn) (Quit: The Lounge - https://thelounge.chat)
[16:34:57] *** Joins: kaitlyn0 (~kaitlyn@user/kaitlyn)
[16:35:05] <jabberwok> Anyone else thinking of Hacktoberfest? I know it's a little late to begin but there are a fair number of cpan modules participating
[16:36:00] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[16:36:39] <Altreus> forgot about that
[16:37:01] <Altreus> wish I'd planned for it cos I don't have time really
[16:40:46] <jabberwok> https://github.com/search?l=perl&q=%23hacktoberfest&type=Repositories    # Relevant list of participating Perl projects
[16:41:06] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[16:49:50] *** Joins: bmeneg (~bmeneg@2001:1284:f016:975e:713b:8772:bad6:3e5d)
[16:50:00] <Altreus> that's many
[16:50:27] *** Joins: alex11 (~alex11@user/alex11)
[16:56:52] <_73> Grinnz: (from 11 hours ago): Yes I use absolute paths with $Bin from FindBin. Reproduced the problem: http://dpaste.com/BJX5KJN7B
[16:56:56] <Paperbot> Link title(s): [ dpaste: @INC err ]
[16:57:33] <_73> And if I add `use lib "$Bin/Bar";` to A.pm everything works fine
[16:57:53] <jabberwok> i wrote some code that loads emacs Org Mode tables, and was trying to put that as an add-on to TableData but ... integration and writing t/* will take too long for any kind of nice PR anytime soon
[17:03:02] <jabberwok> CSV files are difficult to hand-edit, and irritating to edit in a spreadsheet. Also bothersome you can't have more than one table per csv file. Orgmode has tables visually editable in emacs, and can be interspersed with metadata, headings, freeform text, and comments. 
[17:03:36] <lopid> "Locates the full path to the script bin directory to allow the use of paths relative to the bin directory", script bin dir, not current module dir, as evidenced by "$Bin/../Bar" loading "…/Scratch/../Bar" (expanding to "…/Bar" not "…/Scratch/Bar")
[17:04:23] <lopid> …if i'm reading it right
[17:04:28] <Altreus> _73: it's usually preferable to leave module discovery up to the environment
[17:04:48] <Altreus> If X.pm can't find Y.pm then you've put something in the wrong place
[17:05:15] *** Joins: diskin (~diskin@31.23.58.39)
[17:05:22] <Altreus> Using lib in test files is common, but my personal preference is to avoid that too
[17:05:49] <Altreus> However, polluting your @INC with t/lib can cause issues so that one's a bit more per-project
[17:06:56] <_73> If I understand correctly, this means that using FindBin $Bin in modules is useless because $Bin is always the path to the toplevel script?
[17:06:58] <lopid> it's even documented as a known issue
[17:07:29] <_73> err well not useless
[17:07:40] <_73> just not useful for what I was doing
[17:08:38] <lopid> lib::relative, Dir::Self, or even __FILE__
[17:09:25] <lopid> but depending on your project, using the environment like Altreus said is probably better
[17:09:58] <_73> ok thanks
[17:11:26] *** Joins: diskin_ (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[17:11:26] *** Quits: diskin (~diskin@31.23.58.39) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[17:11:26] *** diskin_ is now known as diskin
[17:14:48] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[17:17:29] <Altreus> The idea is that use Foo::Bar should be able to /find/ Foo/Bar.pm without you having to do anything
[17:17:38] <Altreus> If it can't, there are very few situations where that's not your fault
[17:18:02] <Altreus> Either a) it doesn't exist; b) you didn't install it; or c) you don't have the right paths in @INC
[17:18:13] <Altreus> ... or d) you named it wrong
[17:18:26] *** Quits: u4ia (~u4ia@2a10:3781:18fd:1:53d4:805b:c8e3:1629) (Ping timeout: 245 seconds)
[17:18:32] *** Joins: choroba_ (~E.Choroba@88.146.255.106)
[17:18:55] <Altreus> it's not a or b because it's your work, and it's not c because it found A.pm correctly
[17:20:30] <_73> Altreus: are you assuming that . is in @INC ?
[17:21:23] *** Quits: choroba (~E.Choroba@88.146.255.114) (Ping timeout: 264 seconds)
[17:22:37] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 268 seconds)
[17:26:48] *** Joins: humky (~humky@user/humky)
[17:27:03] *** Quits: vague (~vague@irssi/staff/vague) (Ping timeout: 256 seconds)
[17:27:51] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[17:28:50] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:28:57] *** Joins: u4ia (~u4ia@2a10:3781:18fd:1:53d4:805b:c8e3:1629)
[17:33:41] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 258 seconds)
[17:33:59] *** Quits: koo6 (~koo6@89-24-49-216.nat.epc.tmcz.cz) (Ping timeout: 264 seconds)
[17:36:32] * GumbyPAN CPAN Upload: Chemistry-OpenSMILES-0.6.0 by MERKYS https://metacpan.org/release/MERKYS/Chemistry-OpenSMILES-0.6.0
[17:38:43] *** Joins: pj (~pj@ghettoforge/pj)
[17:42:04] *** Quits: ozzzo_work (~ozzzo_wor@h87.s239.verisign.com) (Quit: Client closed)
[17:42:17] *** Joins: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617)
[17:44:38] *** Quits: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617) (Client Quit)
[17:44:59] *** Joins: krismatrix (~krismatri@38.80.149.51)
[17:45:31] <krismatrix> perl has such beautiful scoping with curlies. Why the heck didn't they decide to have curlies for packages?
[17:46:38] *** Joins: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617)
[17:49:57] <Grinnz> _73: also your packages are misnamed. B should be named Bar::B and and loaded with "use Bar::B", and you should not use any additional lib dirs.
[17:50:18] <Grinnz> Foo::B, whatever
[17:50:37] <Grinnz> there is no reason for a project to contain nested lib dirs ever.
[17:50:49] <Grinnz> nested dirs are just how module hierarchies work
[17:51:32] <Grinnz> but yes, lib::relative is the correct way to do this, whether you can install it or not (it explains how to do it with core modules as well)
[17:51:33] <lopid> you can have curlies for packages: package Foo { … }
[17:51:47] <Grinnz> lopid: that doesn't affect namespacing
[17:52:19] <Grinnz> oh that was to krismatrix 
[17:52:23] <lopid> yes
[17:53:11] <jabberwok> Bar::B::Doll->life_in_plastic()
[17:53:20] <Grinnz> _73: once you have a single lib dir, either your toplevel script or your environment should arrange for that absolute path to be in @INC
[17:53:21] <lopid> fantastic
[17:53:32] <Grinnz> and then you're done, nothing else needs to mess with it
[17:54:00] <krismatrix> really?! Good. I should probably do that then.
[17:54:15] <Grinnz> your environment adds absolute paths via the PERL5LIB env var
[17:54:44] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Read error: No route to host)
[17:54:54] <Grinnz> krismatrix: requires 5.14+
[17:55:02] <krismatrix> that is ok for me.
[17:55:05] <lopid> not necessary if you have only one package in the module
[17:55:25] <krismatrix> oh..wait...do you mean..i need to do something like use 5.14 or something?
[17:56:14] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Remote host closed the connection)
[17:56:18] <lopid> doesn't look like it
[17:56:22] <Grinnz> no
[17:56:27] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:57:48] <krismatrix> good...now this looks more like class in most languages. Makes my ability to think simpler.
[18:00:02] <krismatrix> ooh...and when I do curlies...it means I no longer need to do package main; to get back to main context.
[18:01:17] <lopid> aka braces
[18:01:32] <krismatrix> huh?
[18:01:53] <lopid> https://en.wikipedia.org/wiki/Braces_(punctuation)
[18:01:54] <Paperbot> Link title(s): [ Bracket - Wikipedia ]
[18:02:20] <krismatrix> ah.
[18:03:13] <krismatrix> ppl call it differntly. When I first learned them, we called the flower brackets (in India), then in the US we call them curly brackets (curlies for short). braces are nice too.
[18:05:34] <BLZbubba> ok dbix::connect wizards, quick question - if i prepare a statement in one txn() block, can I re-use the sth in the next one, or should I re-prepare?
[18:06:35] * GumbyPAN CPAN Upload: Term-Choose-1.743 by KUERBIS https://metacpan.org/release/KUERBIS/Term-Choose-1.743
[18:06:35] * GumbyPAN CPAN Upload: Term-TablePrint-0.146 by KUERBIS https://metacpan.org/release/KUERBIS/Term-TablePrint-0.146
[18:06:38] * GumbyPAN CPAN Upload: App-DBBrowser-2.286 by KUERBIS https://metacpan.org/release/KUERBIS/App-DBBrowser-2.286
[18:09:27] *** mjgardner_ is now known as mjgardner
[18:09:42] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 260 seconds)
[18:14:32] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[18:15:47] <BLZbubba> i guess it would make sense to re-prepare, otherwise it would use the old dbh in case of a reconnect
[18:16:40] <_73> thanks Grinnz I finally got everything working using lib::relative and a lib dir
[18:16:44] *** Joins: YaoNai (~YaoNai@user/yaonai)
[18:20:33] <Grinnz> BLZbubba: right, you have no guarantee of being able to access dbh or sth from the previous transaction
[18:20:43] <Grinnz> and you should definitely not save either of them outside the block 
[18:21:27] <Grinnz> also, general DBI usage: don't bother with preparing statements explicitly unless you're running the statement many thousands of times in a loop
[18:21:34] <Grinnz> just use select* and do
[18:22:05] <Grinnz> the only other time you need to prepare explicitly is when you want to bind blob params, since dbi's param binding api only allows specifying types that way
[18:22:08] <BLZbubba> i use it for input validation 
[18:22:27] <Grinnz> dunno what that means
[18:22:28] <BLZbubba> to protect from little bobby tables (xkcd reference there)
[18:22:42] <Grinnz> explicit or implicit prepared statements make no difference to that
[18:22:44] *** Joins: semeion (~semeion@user/semeion)
[18:24:35] <Altreus> _73: no, that would be bad
[18:24:53] <Altreus> _73: you should ensure your @INC is correct either with perl -I lib, or by adding your specific lib directory to PERL5LIB
[18:24:57] <BLZbubba> so if one of my users inserts text like '\'; drop table users;' then i'm screwed?
[18:25:14] <Grinnz> no, parameter binding protects against that
[18:25:23] <Grinnz> that works whether or not you use prepare explicitly or implicitly
[18:25:50] <BLZbubba> ok don't scare me like that 
[18:26:05] <Altreus> good on you for being worried about it
[18:26:14] <Altreus> I remember having to convince people it was even a problem
[18:26:34] <BLZbubba> i show that xkcd cartoon to anyone i work with on databases
[18:26:55] <Grinnz> $dbh->prepare('INSERT INTO foo VALUES (?,?)')->execute($foo, $bar) is just $dbh->do('INSERT INTO foo VALUES (?,?)', undef, $foo, $bar) but unnecessarily complicated and often slower
[18:27:09] <Grinnz> and for prepare/execute/fetch see the select* methods
[18:27:31] <Grinnz> you often only need selectall_arrayref with the {Slice => {}} parameter to return an arrayref of hashrefs
[18:28:03] <BLZbubba> https://xkcd.com/327/
[18:28:03] <Paperbot> Link title(s): [ xkcd: Exploits of a Mom ]
[18:29:14] <Grinnz> my $arrayref_of_hashrefs = $dbh->selectall_arrayref('SELECT * FROM foo WHERE bar = ?', {Slice => {}}, $bar);
[18:29:20] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[18:29:26] <_73> Altreus: In the end I fatpack my program. In this case is there any problem?
[18:29:42] <BLZbubba> ah another one: https://external-preview.redd.it/LdJtCEThgWARp1jqPTwmxoS8kYv1S4hELFLO4_u1FBs.png
[18:29:46] <Altreus> _73: no, that will in fact bypass the problem
[18:29:53] <Grinnz> my $arrayref_of_foos = $dbh->selectcol_arrayref('SELECT foo FROM bar WHERE baz = ?', undef, $baz);
[18:29:54] <Altreus> _73: of course, you have to have @INC correct when you run fatpack
[18:30:11] <_73> ok nice
[18:30:20] <Grinnz> those are the two methods i often use
[18:30:24] <Altreus> BLZbubba: 403 Forbidden
[18:30:29] <Altreus> wtf :D
[18:30:38] <BLZbubba> ah reddit doesn't like deep links
[18:30:55] <BLZbubba> https://www.reddit.com/r/xkcd/comments/1luud9/looks_like_little_bobby_tables_mother_is_at_it/
[18:30:56] <Paperbot> Link title(s): [ Looks like Little Bobby Tables mother is at it again! : xkcd ]
[18:31:05] <Grinnz> there's also selectrow_hashref for getting a single row as a hashref, and selectrow_array for getting a single value (but only use this when you don't care about the difference between null value and missing row, because you can't tell them apart with selectrow_array)
[18:31:47] <BLZbubba> Grinnz: ok cool thanks for the suggestions
[18:32:36] <jabberwok> SQL::Abstract::More   is my favorite for writing data-driven queries
[18:34:27] *** Joins: gast0n (~g4570n@user/gast0n)
[18:35:26] <Altreus> Is it even abstracter?
[18:35:39] <Altreus> perlbot: perldoc SQL::Abstract::More
[18:35:39] <perlbot> Altreus: Your documentation is available at: https://perldoc.perl.org/SQL::Abstract::More
[18:35:54] <Altreus> it's nice that the perl ecosystem works so well together
[18:36:48] <Altreus> actually it seems less abstract, which is nice
[18:38:30] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:38:32] *** Joins: thrig (~thrig@65.113.153.50)
[18:39:00] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:60fb:a62c:6c4e:adb0)
[18:52:12] *** Quits: jplesnik (~jplesnik@83.240.62.176) (Quit: Leaving)
[18:56:37] *** Quits: rewt (~default@user/rewt) (Killed (NickServ (GHOST command used by rewt__)))
[18:56:53] *** Joins: rewt (~default@user/rewt)
[18:58:18] *** Joins: randir (~randir@95-25-159-246.broadband.corbina.ru)
[19:01:47] *** Quits: p71 (~p71@071-090-085-184.res.spectrum.com) (Excess Flood)
[19:02:32] *** Joins: p71 (~p71@071-090-085-184.res.spectrum.com)
[19:12:00] *** Joins: Guest59 (~Guest59@144.160.96.228)
[19:12:07] <Guest59> Hi All
[19:12:47] <Guest59> I am facing issue while installing mod_perl2 on my machine having perl v5.34
[19:12:53] *** Quits: esm2_ (~esm@esm.me.uk) (Quit: leaving)
[19:13:11] <Guest59> modperl_perl.c: In function ‘modperl_hash_seed_set’:
[19:13:11] <Guest59> modperl_perl.c:271:16: error: lvalue required as unary ‘&’ operand
[19:13:12] <Guest59> memcpy(&PL_hash_seed, &MP_init_hash_seed,
[19:13:12] <Guest59> ^
[19:13:13] <Guest59> make[1]: [Makefile:114: modperl_perl.lo] Error 1
[19:13:16] *** Joins: vague (~vague@irssi/staff/vague)
[19:13:54] <Guest59> can somebody help me here 
[19:18:00] <LeoNerd> It's a C error, not a Perl one. Also, mod_perl in 2021..really?
[19:18:12] <LeoNerd> perlbot: mod_perl
[19:18:13] <perlbot> LeoNerd: a way of customising the Apache webserver's behaviour by using Perl scripts; it is not the best option for writing webapps. http://perl.apache.org | FAQ: https://perl.bot/mpf/mod_perl-faq.html
[19:18:43] <Altreus> one would presume this is an extant app and not a new one
[19:19:32] <Altreus> although that being the case, I would also say don't bother upgrading perl
[19:19:44] <Altreus> let working apps lie
[19:19:49] <thrig> "working"
[19:20:22] <Altreus> well it works even less now!
[19:21:04] <thrig> last I supported mod_perl (2006 or so) we ended up with "probe port and if dead restart apache" as nobody wanted to fix it
[19:22:40] <Altreus> before I even started using perl at all
[19:28:04] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[19:29:28] <BinGOs> Guest59: https://github.com/Perl/perl5/issues/18617#issuecomment-822056978
[19:29:29] <Paperbot> Link title(s): [ Replacement of PL_hash_seed with PL_hash_seed_w breaks mod_perl2 · Issue #18617 · Perl/perl5 · Gi... ]
[19:30:40] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[19:36:37] *** Parts: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[19:38:58] <aquanight> so if mod_perl is not the way to do things anymore... what is? CGI I assume?
[19:39:38] <thrig> lol no
[19:40:09] <aquanight> last I ever messed with apache I think those were the only two methods I know of
[19:40:45] <Grinnz> modern web frameworks deployed in a perl web server, usually proxied from apache or nginx or similar
[19:40:58] <Grinnz> separation of concerns like cgi, but without all the slowness
[19:41:20] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[19:41:22] <Grinnz> https://shadow.cat/blog/matt-s-trout/mstpan-2/
[19:41:23] <Paperbot> Link title(s): [ mstpan 2 - Web Deployment ]
[19:41:34] <LeoNerd> I quite like FastCGI but it doesn't seem to be very common
[19:41:39] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[19:41:57] <Grinnz> fastcgi is alright
[19:42:27] *** Joins: paulbx (~paulbx@172.103.72.107)
[19:42:30] <Grinnz> reasonable for a synchronous otherwise-PSGI sort of application, anyway
[19:42:35] <jabberwok> The idea being that by leaving your  Perl server running all the time, you avoid all the startup penalties. Something like Mojolicious (or Dancer, Catalyst...) handles all the gnarly bits
[19:42:46] <Grinnz> if you want async request handling or websockets, you really need a mojolicious server
[19:43:07] <Altreus> > Really? In 2014?
[19:43:09] <Altreus> :D
[19:43:26] <Grinnz> hahaha
[19:44:04] <Grinnz> aquanight: have you like, tuned out every webapp discussion you've seen in here or something, i'm boggling that you would conclude we have been pushing CGI
[19:44:42] <aquanight> Grinnz: I've seen all the Mojo stuff sure. I've just never really looked into how that actually plugs into, say, apache.
[19:45:05] <Grinnz> right, so that's usually https://metacpan.org/pod/Mojolicious::Guides::Cookbook#Apache/mod_proxy
[19:45:06] <Paperbot> Link title(s): [ Mojolicious::Guides::Cookbook - Cooking with Mojolicious - metacpan.org ]
[19:45:25] <Grinnz> but ther's several other options listed in that section
[19:45:37] <Grinnz> (other than nginx doing the same thing, they're all worse)
[19:45:59] <aquanight> I mean I guess I should've figured you'd need some way to handoff from httpd to perl unless you were just putting the perl right up on an extenral-facing port
[19:46:21] <Grinnz> yes, which you can do as well, it's just easier to let a widely used http server do it
[19:46:28] <Grinnz> especially if you need SNI
[19:46:34] <thrig> stop saying that!
[19:46:45] * GumbyPAN CPAN Upload: mb-0.34 by INA https://metacpan.org/release/INA/mb-0.34
[19:46:45] *** Joins: e1f (~user@141.117.1.174)
[19:46:45] * GumbyPAN CPAN Upload: Mojo-WebSocket-PubSub-0.05 by EBRUNI https://metacpan.org/release/EBRUNI/Mojo-WebSocket-PubSub-0.05
[19:46:46] <LeoNerd> DEATH BY SNI-SNI!
[19:46:49] <thrig> ahh!
[19:46:50] <aquanight> hmmm
[19:47:01] <aquanight> now I wonder if there's a doc for plugging perl into Windows' interal httpd
[19:47:15] * BinGOs pronounces SNI the same way Johnny Rotten says EMI
[19:47:18] <Grinnz> i've literally never heard of such a thing, so probably not
[19:47:42] <LeoNerd> As long as you don't say it "sunny", I think we'll be fine
[19:48:08] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[19:48:14] <aquanight> Grinnz: I think it's the backend for shit like IIS, or running the micro-ASP.NET from vstudio. And all that XML/SOAP nonsense.
[19:48:18] <BinGOs> IIS has FastCGI module, so there's that.
[19:48:46] <Grinnz> yeah the answer is likely "use its fastcgi or proxy support"
[19:48:48] <LeoNerd> My main reason for liking FastCGI doesn't apply on Windows anyway.. namely, that you can bind it via a filesystem-named socket instead of a TCP port
[19:48:49] <BinGOs> or it did. doh
[19:49:21] <LeoNerd> All my little webapps live in /var/www/$appname/... and connect via a named socket called  /var/www/$appname/app.sock
[19:49:27] <Grinnz> LeoNerd: you can do that with mojo too https://metacpan.org/pod/Mojolicious::Guides::Cookbook#UNIX-domain-sockets
[19:49:27] <Paperbot> Link title(s): [ Mojolicious::Guides::Cookbook - Cooking with Mojolicious - metacpan.org ]
[19:49:38] <Altreus> SNI is sunny as much as SQL is sequel
[19:49:38] <Grinnz> oops, that's for the UA
[19:49:39] <LeoNerd> That way they're not visible on TCP at all, and I don't have to care about port numbers like it's still 1976
[19:50:10] <aquanight> if I can bloody remember how to do it there's even a way to see what active URIs are bound.
[19:50:26] <Grinnz> https://metacpan.org/pod/Mojo::Server::Daemon#listen
[19:50:27] <Paperbot> Link title(s): [ Mojo::Server::Daemon - Non-blocking I/O HTTP and WebSocket server - metacpan.org ]
[19:50:40] <Grinnz> listen on http+unix and nginx can proxy to it i believe
[19:51:09] <LeoNerd> Ah, that's probably new. When I was setting up this sort of thing a decade or so ago, none of the httpds could proxy to an http server on UNIX, but most could talk FastCGI there
[19:51:17] <Grinnz> yeah, last couple years
[19:51:22] <aquanight> netsh http show servicestate
[19:51:26] <aquanight> *there* it is
[19:51:59] <aquanight> there's also netsh http show urlacl
[19:52:04] <Grinnz> http://nginx.org/en/docs/http/ngx_http_upstream_module.html#server
[19:52:04] <Paperbot> Link title(s): [ Module ngx_http_upstream_module ]
[19:52:14] <Grinnz> server unix:/foo/bar.sock;
[19:52:17] <aquanight> but basically rather than having to fuck with binding IPs yourself you can register a URI and get requests that way
[19:52:19] <thrig> RedHat took a while to get unix domain sockets into their httpd
[19:52:28] <aquanight> hell if I remember all the APIs right now though
[19:53:08] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[19:53:17] <Grinnz> Altreus: i will never pronounce it sequel
[19:55:03] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[19:55:34] *** Quits: krismatrix (~krismatri@38.80.149.51) (Remote host closed the connection)
[19:55:56] *** Joins: krismatrix (~krismatri@38.80.149.51)
[19:56:10] <Altreus> good
[19:56:14] <Altreus> I pronounce it sql
[19:56:22] <LeoNerd> "skwell"
[19:56:24] <Altreus> I have to put a schwa in there but it gets through
[19:56:28] <thrig> throatwarblermangrove
[19:56:40] <Altreus> skwl ... school?
[19:56:58] <thrig> IPA exists for a reason
[19:57:04] <Altreus> skwell is basically how they pronounce school in some parts of the country
[19:57:15] <Altreus> I think Ant and Dec would have gone to skwell
[19:57:23] <Altreus> or at least should have
[19:58:00] <OnlineCop> Before I go reinvent the wheel, some of Damian Conway's talks showed pseudo code of what a regex would look like if deconstructed (try/catch blocks, for/while loops, etc.). Has someone [already] made a "regex-to-code" project that does this kind of thing for arbitrary regexes?
[19:58:15] <BinGOs> I believe it was byker grove
[19:58:25] <Altreus> byker grove was a youth centre I think
[19:58:32] <Altreus> a yoof cen're like
[19:58:37] <Altreus> cen'a
[19:59:15] <Altreus> oh hey, it is
[19:59:17] <Altreus> well was
[20:00:22] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[20:02:15] <jabberwok> My first database course was in with Ingres in 1986, and we pronounced it 'sequel' then, I still do
[20:03:17] <lopid> barf
[20:03:23] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[20:03:49] <TitanOfOld> I pronounced on my own when I read it in a book because nobody around me knew anything about computers. I pronounced it "sequel".
[20:04:05] <TitanOfOld> Or Ess Queue Elle.
[20:04:21] <paulbx> dumb perl question from a python guy: in this sub code, where is it getting the `$status` and `@notes` values that it returns? https://dpaste.com/G8S6M82UL
[20:04:22] <Paperbot> Link title(s): [ dpaste: where do $status and @notes values come from?, by paul_bissex ]
[20:04:25] <TitanOfOld> But never, ever skwell. What's wrong with those people?!
[20:04:51] *** Quits: art1 (~romeyke@p200300ccdf0708005da90432bf8b3226.dip0.t-ipconnect.de) (Quit: Leaving.)
[20:05:00] <TitanOfOld> paulbx: It isn't.
[20:05:16] <lopid> it's only just initialiased them
[20:05:33] <Grinnz> paulbx: it's just declared them and not assigned anything to them, so it's returning either a list containing only undef, or 0 (the size of @notes), depending on the context the sub is called in
[20:05:41] <TitanOfOld> paulbx: Line 6 declared them, and line 7 is returning undefined values.
[20:05:42] <LeoNerd> Perhaps there used to be some code in there between lines 6 and 7 that has since been removed?
[20:05:52] <LeoNerd> Otherwise, that's a really odd thing to have written
[20:05:55] <TitanOfOld> However,
[20:06:09] <paulbx> gotcha. that's what it looked like to me but i though maybe some perl magic was happening. thanks!
[20:06:10] <TitanOfOld> line 6 and 7 will never be reached.
[20:06:27] <LeoNerd> TitanOfOld: line 5
[20:06:36] <TitanOfOld> Gosh darn it!
[20:06:57] <LeoNerd> It's not great style.. I wouldn't wrap the conditional onto the next line like that
[20:07:01] <TitanOfOld> I would like to issue a retraction...
[20:07:02] <LeoNerd> It's prone to misreading exactly as you did ;)
[20:07:54] <paulbx> ha yeah. me i had to web search "return if" to even grok the syntax. it's legacy code i'm just trying to reverse engineer.
[20:08:08] <TitanOfOld> LeoNerd: I agree! I never let that happen in my code. If the postfix would end up on the next line, I flip it around.
[20:08:19] <LeoNerd> STATEMENT if CONDITION;  is fairly standard perl. It's just usually we'd write that on *one* line ;)
[20:08:52] <TitanOfOld> LeoNerd: I think he's referring to his codebase.
[20:09:01] <LeoNerd> It's nothing specific to `return`.. can do anything like that. Eg..  print "It's Tuesday" if $isTuesday;
[20:09:22] <Grinnz> paulbx: start with https://perldoc.perl.org/ rather than google for perl stuff, most of the google results will be ancient and terrible
[20:09:22] <Paperbot> Link title(s): [ Perl Documentation - Perldoc Browser ]
[20:09:36] * paulbx bookmarks
[20:09:48] <TitanOfOld> Grinnz++
[20:09:53] <paulbx> thanks for the quick and friendly help, perl people
[20:09:55] <Altreus> google's getting better
[20:09:58] <Altreus> but yeah
[20:10:06] <Grinnz> mostly because we've reclaimed perldoc.perl.org :P
[20:10:09] <Altreus> :)
[20:10:49] *** Quits: paulbx (~paulbx@172.103.72.107) ()
[20:12:17] <lopid> back to you all pronouncing squirrel incorrectly
[20:12:38] <thrig> treerat!
[20:13:44] <jabberwok> "return if" is a beloved (*) hold-over from BASIC-PLUS/2 out of the 1970s    * For various values of "beloved"
[20:14:32] <thrig> clean your room if you mess it up
[20:15:24] <Altreus> what's the least tedious way of doing return $self->long_winded_thing if $self->long_winded_thing; blablabla; $self->long_winded_thing = result of blablabla;
[20:15:59] <Altreus> nothing wrong with a postfix if
[20:16:07] <Altreus> if you'd say it in English you should be able to say it in perl
[20:16:35] <Altreus> unless you prefer your code to look difficult
[20:16:56] <Grinnz> return $_ for do { bunch of stuff that returns a thing };
[20:17:15] <Altreus> until we have a way for computers to read minds, we benefit from natural language in computing
[20:17:16] <Grinnz> you might get some funny looks though
[20:17:28] <Altreus> Grinnz: yeah I considered return $self->thing //= do
[20:17:35] <LeoNerd> Altreus: I have sometimes pondered a `returnif` keyword
[20:17:38] <Altreus> thing is a hashref lookup
[20:17:42] <LeoNerd> But would it return if true? if defined?
[20:17:44] <Altreus> but I'd fail code review
[20:17:46] <LeoNerd> if length?
[20:17:57] <Altreus> LeoNerd: but you have : now
[20:18:01] <Altreus> returnif : //
[20:18:11] <LeoNerd> Hah.. no I don't... labels still eat : far too often
[20:18:26] <LeoNerd> Also,  COND ? TRUE : FALSE  will complicate it
[20:18:27] <Altreus> wait what's wrong with returnif [boolean operator]
[20:18:28] <LeoNerd> suck :(
[20:18:36] <LeoNerd> Oooh.. in that sense
[20:18:44] <LeoNerd> returnif<defined> thing
[20:18:46] <Altreus> returnif length
[20:18:51] <Altreus> returnif defined
[20:19:04] <LeoNerd> returnif<isa Colour> $octarine;
[20:19:10] <thrig> wouldn't it return "if" ?
[20:19:25] <Altreus> oh yes also that
[20:19:37] <Altreus> surely a block is better here
[20:19:45] <LeoNerd> I wonder how many people would shoot me for pointing out that -obviously- we also need  returnunless<...>
[20:19:49] <TitanOfOld> Would it retur "nif"?
[20:19:54] <Grinnz> returnelsif
[20:20:10] <LeoNerd> returnonlyifnot<...>
[20:20:11] <Altreus> I mean I'd just ask for some features from raku, like "with"
[20:20:21] <Altreus> return $_ with $self->whateveritis
[20:20:34] <LeoNerd> defined and return with $thing;
[20:20:50] <LeoNerd> Annoyingly, I can't make a postfix `with` using PL_keyword_plugin
[20:20:57] <LeoNerd> Though I suspect PL_infix_plugin could do it
[20:21:22] <Grinnz> Altreus: that's just for spelled differently
[20:21:23] <Altreus> return doesn't use $_ by default
[20:21:29] <LeoNerd> ooh.. point
[20:21:34] <Altreus> Grinnz: with is if defined x
[20:21:37] <LeoNerd> defined and return $_ with thing
[20:21:38] <Altreus> and sets $_
[20:21:41] <TitanOfOld> The possibilities are endless! I look forward to is being in Perl 5.38/7 whichever comes first.
[20:21:42] <Grinnz> the fuck?
[20:21:45] <Grinnz> why is it called 'with' then
[20:21:49] <LeoNerd> At which point you might as well   defined and return $_ for $thing;
[20:21:53] <Altreus> because if you don't have x it doesn't do anything with it
[20:22:10] <Grinnz> not being defined is not the same as not having it
[20:22:23] <Altreus> at some point brevity wins out over logical accuracy
[20:22:40] <Grinnz> that's not logical accuracy but readability and intuitiveness
[20:22:50] <Grinnz> and coherent design
[20:22:56] <Altreus> well yes, I have these complaints about raku myself
[20:23:03] <Grinnz> but anyway, maybe it makes more sense with raku types
[20:23:06] <Altreus> I'm only really toying with it, and it's good for inspiration
[20:23:11] <Grinnz> it would be a stupid word in perl though
[20:23:15] <Altreus> it's probably short for "with a defined value in"
[20:23:18] <Altreus> :)
[20:23:19] <jabberwok> is there any progress on ~> or whatever we are calling the "calmly evaluate to undef and stop when trying to chain methods" operator?
[20:23:40] <Altreus> Ah, Scalar::IfDefined but with a better interface!
[20:24:03] <Grinnz> jabberwok: not so far, maybe we can poke the PSC into rolling it along
[20:24:10] <Altreus> is that the ?foo of Ruby ... do I mean Ruby?
[20:24:17] <Altreus> The one where it calls it if it can
[20:25:35] <Altreus> eval: $h{package::name} = 1; \%h
[20:25:37] <perlbot> Altreus: {"package::name" => 1}
[20:25:40] <Altreus> hmm
[20:25:45] <Altreus> I like this more
[20:26:02] <Altreus> vim highlighting doesn't know it strigifies
[20:26:02] <Grinnz> eval: sub package::name { 42 } $h{package::name} = 1; \%h
[20:26:04] <perlbot> Grinnz: {42 => 1}
[20:26:07] <Grinnz> :)
[20:26:18] <Altreus> yeah but I broke a lot more of perl doing that the other day
[20:26:21] <Altreus> so I'm going to say that's fine
[20:26:27] <LeoNerd> jabberwok: Write an experiment using  XS::Parse::Infix  and try it out
[20:26:32] <Grinnz> point is don't write that ever
[20:26:39] <Grinnz> quote your :: string
[20:27:08] <Altreus> but why
[20:27:18] <Altreus> You can break literally anything doing that
[20:27:24] <Altreus> We all trust each other not to
[20:27:30] <Grinnz> sweval: my %h; $h{package::name} = 1; \%h
[20:27:32] <perlbot> Grinnz: ERROR: Bareword "package::name" not allowed while "strict subs" in use at (IRC) line 1. 
[20:27:34] <Grinnz> because that?
[20:27:42] <Altreus> oh, it was a no-strict thing
[20:27:50] <Altreus> heh, fair, should have used the right test
[20:27:53] *** Quits: choroba_ (~E.Choroba@88.146.255.106) (Quit: Leaving)
[20:27:59] <Altreus> so vim highlighting is correct
[20:28:05] <Grinnz> ish
[20:28:09] *** Joins: Pali (~pali@user/pali)
[20:28:11] <Altreus> still helpful
[20:28:21] <Grinnz> it still tries to make it a string, but strict subs always prevents that
[20:28:34] <Grinnz> (other than where it doesn't)
[20:28:55] * Altreus tries to remember how surround.vim works
[20:29:39] <Altreus> aha
[20:29:49] <Altreus> turns out sometimes it doesn't
[20:34:03] *** Joins: arthurpbs (~arthurpbs@168.121.98.124)
[20:36:09] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[20:42:22] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[20:44:12] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 258 seconds)
[20:46:04] *** Joins: nehsou^ (~nehsou@70.166.66.234)
[20:50:16] <ology> I'd like to mock a mojo helper in a test. But redefining it with $t->app->helper( foo_helper => sub {... doesn't seem to trigger it in the following $t->post_ok call.
[20:50:27] <ology> I'm following https://mojolicious.io/blog/2017/12/20/day-20-practical-testing/ but that may be outdated?
[20:50:27] <Paperbot> Link title(s): [ Day 20: Practical Testing - mojolicious.io ]
[20:50:58] <ology> Guess I'm not sure what my question is...
[20:52:21] <ology> Maybe I'll make a lite-app test without so much (work source) baggage.
[20:56:30] *** Joins: Linux77_ (~Linux7_7@186.233.183.1)
[20:56:31] *** Joins: semeion (~semeion@user/semeion)
[20:56:52] * GumbyPAN CPAN Upload: Tangence-0.27 by PEVANS https://metacpan.org/release/PEVANS/Tangence-0.27
[20:58:04] <LeoNerd> ^-- much dogfooding.. no change in real features, but rewrites lots of code to use Object::Pad, async/await, dynamically, match/case and perl 5.26 signatures
[20:58:18] *** Quits: Linux77 (~Linux7_7@186.233.182.243) (Ping timeout: 265 seconds)
[20:58:22] <LeoNerd> Overall the tarball code reduced from 88K down to 78K :)
[20:58:27] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Remote host closed the connection)
[20:59:20] <thrig> not increasing your "lines of code coded" metric isn't going to look good on the merit raise review
[20:59:21] <Altreus> If someone emails you by accident, so you tell them, and they say woops thanks for letting me know ... but don't correct it
[20:59:28] <Altreus> Can you just delete all future emails? :P
[21:07:35] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[21:11:58] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[21:15:22] *** Quits: furrymcgee (~devuan@cgn-89-1-209-32.nc.de) (Quit: leaving)
[21:16:45] <gordonfish-> Hmm, given that we got sequels like Freddy vs. Jason, I'm wondering if they were ever planning to do one for Pamela (Voorhees) vs Amanda (Krueger.)
[21:16:55] * GumbyPAN CPAN Upload: RT-Extension-REST2-1.15 by BPS https://metacpan.org/release/BPS/RT-Extension-REST2-1.15
[21:17:19] <gordonfish-> There's even a simple cheesy subtitle for it: Maternal Extinct
[21:18:11] <gordonfish-> And TBH, a versus film I've really wanted to see since the 80s was Freddy vs. Carrie
[21:18:13] *** gordonfish- is now known as gordonfish
[21:18:52] <gordonfish> As well as Jason vs Micheal Myers, that one has always been begging to be made
[21:19:11] <gordonfish> (though it might get hard to tell which one is which after a while)
[21:19:59] <gordonfish> Also, Jason vs. Leather Face and settle the Jason-does-not-use-chainsaws things once and for all.
[21:20:02] *** Joins: magla (~gelignite@55d45a4d.access.ecotel.net)
[21:20:14] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[21:30:21] <Altreus> Carrie Fisher?
[21:30:55] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[21:36:32] *** Joins: EGD (~egd@user/egd)
[21:36:57] * GumbyPAN CPAN Upload: Term-TablePrint-0.147 by KUERBIS https://metacpan.org/release/KUERBIS/Term-TablePrint-0.147
[21:39:13] *** Quits: Guest59 (~Guest59@144.160.96.228) (Ping timeout: 256 seconds)
[21:42:31] <Grinnz> i still have no concept of what tangence is
[21:42:47] <Grinnz> "attribute-oriented server/client object remoting framework" are all words, but i'm not sure what they combine to mean
[21:44:29] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[21:44:44] <rewt> sounds like a framework with attributes, and server/client comms, and some objects, all done remotely... or something
[21:48:03] <gordonfish> Altreus: Carrie from the Stephen King story
[21:57:25] *** Quits: proller (~p@2a02:6b8:0:40c:139d:4eb7:a2e7:6842) (Ping timeout: 258 seconds)
[22:00:24] *** Quits: GumbyPAN (cpanbot@jingo.bingosnet.org) (Remote host closed the connection)
[22:13:39] *** Joins: P1RATEZ (piratez@user/p1ratez)
[22:20:39] *** Joins: krismatrix (~krismatri@38.80.149.51)
[22:22:06] *** Quits: magla (~gelignite@55d45a4d.access.ecotel.net) (Quit: Stay safe!)
[22:22:23] <krismatrix> Can anyone advice what the error is here: https://perl.bot/p/ygwo7t
[22:22:24] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[22:24:11] <alh> merge() takes two arguments, $left, and $right, but returns an array (list) of any size
[22:24:16] <alh> merge_sort returns whatever merge() returns
[22:24:33] <alh> So...
[22:24:34] <alh>   return merge(\&merge_sort(\@left), \&merge_sort(\@right)); 
[22:25:42] <krismatrix> i feel like you are telling me something I already know. I am not seeing what you (and perl) think I have wrong 
[22:26:22] <krismatrix> oh..are you saying I cannot return an array?
[22:26:37] <alh> Well you can, but you can't use that array as input to merge(), since merge wants two values
[22:26:55] *** Joins: pucara (~i@181.93.167.217)
[22:27:04] <Grinnz> also you are passing two subrefs to merge, which is then attempting to use them as arrayrefs
[22:27:24] <Grinnz> actually not even subrefs. \&merge_sort(\@left) is nonsense
[22:27:44] <gordonfish> return merge(\&merge_sort(\@left), \&merge_sort(\@right)); should be return merge([merge_sort(\@left)], [merge_sort(\@right)]);
[22:27:44] <Grinnz> if you're just trying to call the sub and put its return value in the merge() args, then remove the \&
[22:27:48] <alh> That might actually call merge sort, then return a reference to the array
[22:27:55] <gordonfish> That is, \&merge_sort isn't going to give you an array ref
[22:28:11] <alh> Right, so the actual problem is
[22:28:19] <alh>   if ($length == 1) {
[22:28:19] <alh>     return @list;
[22:28:19] <alh>   }
[22:28:30] <gordonfish> sweval: sub foo { my @x=qw(A B C); return @x; } \&foo()
[22:28:32] <perlbot> gordonfish: \"C"
[22:28:33] <alh> What's happening is merge_sort($left) is returning a list of two elements 
[22:28:36] <gordonfish> sweval: sub foo { my @x=qw(A B C); return @x; } [foo()]
[22:28:38] <perlbot> gordonfish: ["A","B","C"]
[22:28:52] <gordonfish> alh: Yeah that too
[22:29:09] <alh> ($#list == 1 means the list has two elements 0 and 1)
[22:30:11] <Grinnz> right, `my $length = $#list;` is also wrong
[22:30:33] <gordonfish> Also, my $length = $#list might be wrong, as @list is the actual length of the array (how many elements there are), while $#list is the last index.
[22:30:46] <krismatrix> yeesh...lots of issues...give me second...
[22:30:50] <gordonfish> That is, @lsit in scalar context.
[22:31:29] <Grinnz> consider calling your array and arrayref different names, and not calling arrays @list
[22:31:34] <Grinnz> these are just confusing you further
[22:33:05] <ether> . o O ( list of what? )
[22:39:32] <krismatrix> https://perl.bot/p/6834q6  Ok...now why is the final output 1 instead of the entire sorted list?
[22:39:36] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[22:40:03] <krismatrix> I think I captured most of your advices...(or did i miss anything?).
[22:41:27] *** Linux77_ is now known as Linux77
[22:43:59] * jabberwok spends all morning chasing a bug in Perl which turns out to be called "My program did exactly what I wrote"
[22:45:43] *** Quits: pucara (~i@181.93.167.217) (Ping timeout: 258 seconds)
[22:46:07] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[22:47:42] *** Quits: EGD (~egd@user/egd) ()
[22:48:20] <Grinnz> krismatrix: your merge logic is wrong - it will push one side onto @result and then increment the index and then the condition will no longer loop
[22:48:56] <Grinnz> i would suggest: while (@left or @right)
[22:49:26] <Grinnz> and check $left[0] and $right[0], and shift the value from them
[22:49:32] <Grinnz> when adding it to @result
[22:50:02] <Grinnz> either way you need to handle the case where @left has a value left to check and @right doesn't, and vice versa
[22:50:12] <krismatrix> what does while (@left or @right) do? 
[22:50:22] <krismatrix> is it check until both are empty?
[22:50:23] <Grinnz> loops as long as either array has elements left
[22:50:35] <Grinnz> so that method would require shifting
[22:50:41] <krismatrix> right.
[22:50:59] <Grinnz> if the index incrementing works for you that's fine too, but you still need to handle the case where one has reached the end of the array and the other hasn't
[22:51:07] <krismatrix> right right.
[22:54:09] <BinGOs> I hope to have gumbypan back soon, doing a host os upgrade
[22:56:41] <ether> @left evaluated in scalar context is the number of elements of @left. so (@left or @right) will be true when either list is not empty
[22:58:34] *** Joins: proller (~p@2a02:6b8:b081:4::1:36)
[23:06:37] *** Joins: magla (~gelignite@55d45a4d.access.ecotel.net)
[23:07:02] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:07:54] *** Quits: splatt990 (4b25e29db1@198.108.77.17) (Remote host closed the connection)
[23:31:14] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 260 seconds)
[23:35:25] *** Joins: whynot_ (~whynot@37.73.62.14)
[23:41:35] *** Quits: bmeneg (~bmeneg@2001:1284:f016:975e:713b:8772:bad6:3e5d) (Remote host closed the connection)
[23:44:01] *** Joins: semeion (~semeion@user/semeion)
[23:45:12] *** Joins: GumbyPAN (cpanbot@jingo.bingosnet.org)
[23:48:09] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[23:49:33] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[23:59:28] *** Joins: stephane (~stephane@88.164.90.135)
