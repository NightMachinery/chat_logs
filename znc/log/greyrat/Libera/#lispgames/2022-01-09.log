[00:00:02] <aeth> yup
[00:00:19] <GreaseMonkey> unless you can somehow use a non-NVidia driver e.g. DRI PRIME stuff
[00:00:49] <aeth> non-Nvidia drivers are garbage for anything other than just getting your 2D, unaccelerated stuff working
[00:00:51] <GreaseMonkey> the classic example is this, which i'm not sure if it's become valid in later versions: float lum = texture(tex0, tc);
[00:01:03] <aeth> (unless you want to pretend you're using a 1999 graphics card)
[00:01:14] <aeth> you will struggle to run 2004 games
[00:01:21] <GreaseMonkey> eh, if you have a recent enough CPU there's a chance it'll have a reasonable GPU in it
[00:01:26] *** Parts: technomancy (~user@170.ip-158-69-211.net) (ERC (IRC client for Emacs 26.1.50))
[00:01:34] <GreaseMonkey> it'll be fine for 2004 games, maybe not so fine for 2014 games
[00:01:37] <aeth> I thought you meant nouveau, not iGPUs
[00:01:51] <aeth> but Intel's GPU isn't great, either, and only low end AMD CPUs come with a GPU post-Ryzen
[00:01:52] <GreaseMonkey> i meant any driver that wasn't NVidia's
[00:02:08] <GreaseMonkey> so yes that does include software rendering
[00:02:33] <aeth> just get a 64 core EPYC and CPU render on it
[00:02:38] <aeth> wasting power is fun
[00:02:50] <GreaseMonkey> then you can run your 2005 games
[00:05:04] <jstoddard> So far I got cl-sdl2 to give me a window with a gl context (the with-everything macro is pretty convenient) and to set attributes to OpenGL version 3.3 and core profile. So now I have sort of forced myself to write at least a vertex shader and a fragment shader even to get to the first triangle.
[00:06:28] <aeth> it's only about 5 lines
[00:06:45] <aeth> usually the first page of any online OpenGL 3.x/4.x tutorial
[00:07:03] <aeth> basically, just multiplying a few matrices
[00:07:17] <GreaseMonkey> i tend to move my way from 1.1 to 3.x Core, the trick i do is i use GLSL 1.30 when i get to shaders
[00:07:23] <GreaseMonkey> because that version works on both compat and core
[00:07:26] <jstoddard> But I can finally start playing around with OpenGL after spending the morning trying to figure out the cl-sdl2 side of things. gl-set-attrs and window events were fun without any real documentation to point out what keywords to use for SDL2's constants, etc.
[00:07:37] <GreaseMonkey> and then once i'm on core i move to 3.30
[00:08:28] <GreaseMonkey> VAs -> shaders -> VBOs -> VAOs -> training wheels come off
[00:08:31] <aeth> (set! gl-position (* projection-matrix view-matrix model-matrix (vec4 position 1f0))
[00:08:46] <aeth> just one line inside the main function after the input/output setup, boilerplate stuff
[00:09:02] <aeth> and the fragment shader's nothing until you need textures and iirc lighting... I forget which one gets the lighting
[00:09:35] <GreaseMonkey> if you need to select stuff, probably geometry to do the selection and fragment to do the lighting
[00:09:44] <aeth> in GLSL, it's probably this: glPosition = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
[00:10:15] <GreaseMonkey> gl_Position but otherwise yes
[00:10:19] <aeth> oh, right
[00:10:46] <GreaseMonkey> and IIRC you can declare position as a vec4 to get the implicit 1.0, but i could be wrong on that one, and i'm not sure which is faster
[00:10:47] <aeth> gl-foo gets special-cased into gl_Foo because GLSL is a hideously inconsistent language, but then again, anyone who uses CamelCase is inconsistent and full of naming convention exceptions that makes autotranslation tricky
[00:11:20] <GreaseMonkey> i've seen bugs caused by CamelCase before
[00:11:33] <GreaseMonkey> snake-case or kebab-case, make damn sure there's no camels
[00:11:49] <aeth> CamelCase gets you https://en.wikipedia.org/wiki/XMLHttpRequest
[00:12:03] <aeth> instead of XML_HTTP_request
[00:12:03] <GreaseMonkey> -x-m-l-http-request
[00:12:41] <GreaseMonkey> oh right, it mixes UpperCamelCase with lowerCamelCase and nocase
[00:12:46] <jstoddard> Yeah, I'm just going to stick something like that in a string for the fragment shader. I know I've seen something to do shaders with a lispy syntax, but I don't want to throw in additional possible points of failure until I figure out what I'm doing.
[00:13:47] <aeth> I had to NIH my own because the other ones try to be fancy
[00:13:54] <aeth> while I try to just write literally just GLSL in prefix
[00:14:08] <GreaseMonkey> would that explain the use of `set!` then?
[00:14:11] <aeth> which is why I *almost* got it right in my GLSL knowledge, but I forgot about the gl-foo hack
[00:14:33] <aeth> GreaseMonkey: what would you call =?
[00:14:45] <aeth> You can't call it := like in Pascal because := and = are the same, := is just in the keyword package
[00:14:50] <aeth> you can't call it = because that's == in Lisp
[00:14:53] <GreaseMonkey> was this a lib for Scheme, or CL, or what
[00:14:58] <aeth> You can't call it SETF because SETF does more things
[00:15:04] <GreaseMonkey> fair enough, set! it is
[00:15:06] <aeth> You could possibly call it SETQ or SET but that might still give the wrong impression
[00:15:13] <aeth> SET! isn't taken because it's not Scheme
[00:15:37] <aeth> and unlike the other libraries, I'm not trying to translate CL into GLSL, I'm just trying to express GLSL as s-expressions
[00:16:15] <GreaseMonkey> and that gets you to a large chunk of the fun already
[00:17:21] *** Quits: gingerale (~gingerale@2a03:b0c0:0:1010::19:c001) (Quit: WeeChat 3.4)
[00:17:35] <aeth> plus, I kinda have to make it Schemey because there's no LET/LET*, at least initially
[00:17:49] <aeth> so DEFINE if it's not yet defined and SET! if it is.
[00:18:13] <aeth> that distinction does exist in C-likes, e.g. int x = 42 (use DEFINE) vs x = 42 (use SET! and it has to already be DEFINEd)
[00:18:30] <aeth> gl-position is a global so it would be SET!, not DEFINE
[00:19:11] <aeth> I'm going to eventually do a reverse-Scheme and turn LETs into DEFINEs to make it look more like Lisp... but amusingly, Scheme does it the reverse, and implicitly turns internal DEFINEs into LETs
[00:19:17] <aeth> or I guess LET*s
[00:20:25] <aeth> imo, it's way easier to make that part in particular behave like Scheme and hope that the Lisper is aware of that than to try to match it to CL's names and confuse the user into thinking that it's closer to CL than it is
[00:21:06] <aeth> GreaseMonkey: All of that being said, I lied a bit.
[00:21:51] <aeth> In my actual simplest-possible-shader code, it's (:out (gl-position :vec4) (* projection-matrix view-matrix model-matrix (vec4 position 1f0)))
[00:22:29] <aeth> I can pretend that simple shaders are pure functions if I permit the main()'s setting to be done in the header of the file
[00:23:05] <aeth> but internally it becomes SET! or whatever I happened to call it at the time
[00:25:47] *** Joins: gingerale (~gingerale@2a03:b0c0:0:1010::19:c001)
[02:01:33] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[02:16:53] *** Quits: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77) (Read error: Connection reset by peer)
[02:27:50] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[02:35:17] *** Joins: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77)
[02:53:57] <jstoddard> After several hours, I finally have a triangle, much like the triangle in the basic example in cl-sdl2, but using shaders.
[02:55:48] <jstoddard> Dead simple shaders, of course. As in: gl_Position = vec4(position, 1.0) for the vertex shader, and a fragment shader that just outputs vec4(1.0, 0.0, 0.0, 1.0)
[02:56:09] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[02:58:36] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[03:02:16] *** Quits: artchad (~user@public-gprs230031.centertel.pl) (Read error: Connection reset by peer)
[03:46:52] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 256 seconds)
[05:58:11] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 256 seconds)
[06:16:43] *** Joins: mixfix41 (~homefame@user/mixfix41)
[07:07:06] <Jach> jstoddard: Nice! A few months ago I got to the point of having a white quad (triangle fan) on a green bg, haven't played with gl since though. Basically just ported this https://lazyfoo.net/tutorials/SDL/51_SDL_and_modern_opengl/index.php
[07:18:09] <jstoddard> Oh cool, I went through the first few lessons of the lazyfoo tutorials to get up to speed on SDL2.
[07:21:29] <jstoddard> I got two triangles up on the screen and called it a day. That's the furthest I've gotten with OpenGL so far, and I think I finally got at least a general understanding of the pipeline.
[08:53:34] *** Quits: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77) (Quit: Leaving)
[10:34:13] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:57:37] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[11:27:27] *** Joins: artchad (~user@public-gprs230031.centertel.pl)
[12:46:32] *** Joins: notzmv (~zmv@user/notzmv)
[13:31:56] *** Joins: rtypo (~alex@user/rtypo)
[13:37:43] *** Quits: artchad (~user@public-gprs230031.centertel.pl) (Remote host closed the connection)
[13:42:28] *** Joins: rito_ (~rito_gh@45.112.243.206)
[14:55:06] *** Joins: artchad (~user@public-gprs230031.centertel.pl)
[14:56:44] <artchad> borodust: check out the binary at https://codeberg.org/artchad/dmomd, it doesn't exit. D:
[14:56:57] <artchad> it works fine in the Lisp REPL
[14:57:23] <artchad> you could also compile the binary as described in the readme and see wether it exits properly for you.
[15:35:04] *** Quits: artchad (~user@public-gprs230031.centertel.pl) (Read error: Connection reset by peer)
[16:10:57] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[16:56:45] <borodust> .memo artchad probably the same thing as in https://github.com/borodust/trivial-gamekit/issues/44
[16:56:45] <plexi> Memo left for artchad.
[18:04:39] *** Quits: rito_ (~rito_gh@45.112.243.206) (Ping timeout: 256 seconds)
[19:31:27] *** Joins: artchad (~user@public-gprs230031.centertel.pl)
[20:08:54] *** Joins: domovod (~domovod@176.196.122.197)
[20:28:22] *** Joins: yewscion (~yewscion@72-21-196-64.amazon.com)
[20:37:10] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Quit: WeeChat 3.4)
[20:38:46] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[21:29:42] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[21:37:14] *** Joins: makomo (~makomo@user/makomo)
[22:52:35] *** Joins: jstoddard (~Jeremiah@2607:fb90:4af3:abad:6e77:59c6:fcf:ce6c)
[23:05:17] <artchad> borodust: Is there any fix for the issue I mentioned?
[23:17:30] <jstoddard> Good morning everyone! I was hoping to play around more with shaders today and dig into textures, so I could consider the weekend productive.
[23:18:02] <jstoddard> But I didn't sleep as well as I would have liked last night, and my head's not in it, so I'm doing stuff I really like this morning.
[23:18:35] <jstoddard> Namely, (format nil "~s has vanquished the ~s! ~d experience gained." ...
[23:25:26] <artchad> good "morning" jstoddard
[23:25:38] <artchad> I'll be going to sleep soon. ;)
[23:29:53] <jstoddard> Yeah, I seem to be on the opposite side of the world from a lot of lispers.
[23:32:19] <artchad> at least there is a bit of cross over between our waking hours.
