[00:36:05] <selwyn> this plan to have clean electricity by 2035 is very ambitious
[00:36:09] <selwyn> maybe too ambitious
[00:41:21] <pl> which one?
[00:41:27] <selwyn> recent uk plan
[00:41:48] <pl> ah, so not the one that depends on greenwashing russian gas by greenpeace to sell as part of energiewende
[00:42:19] <pl> now, the little problem is that I'm not sure where they are going to get that clean electricity :>
[00:42:42] <pl> especially given that they went a bit autarky on power supply
[00:53:44] <gilberth> There is a plan? Will it work?
[00:57:20] <pl> which one, british or german?
[00:57:35] <pl> One is probably lots of hot air and the other is lots of lies
[01:00:58] <gilberth> For the latter? Sure. I don't know the former.
[01:01:38] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:01:46] <hayley> Good morning everyone!
[01:02:16] <pl> gilberth: arguably both british and german might be right now considered lots of lies
[01:02:19] <gilberth> Though as always I wonder if those telling those lies do know that these are lies.
[01:02:28] <gilberth> hayley: Hello there!
[01:02:30] <pl> I meaen, it's Conservatives with BoJo in power
[01:03:52] <gilberth> Well, the conservatives lost here. We'll see what the next government does.
[01:05:15] <pl> greens are quite busy bees trying to stop nuclear from being included as "green" and trying to get "green gas" accepted
[01:05:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:05:55] <gilberth> Green gas? Made from what?
[01:06:17] <pl> gilberth: some greenpeace magic lawyering applied to russian gas
[01:06:28] <gilberth> lol.
[01:06:44] <pl> apparently by mixing in some biogas
[01:07:10] <gilberth> That is almost as terrific as those nuclear power filters you could buy to keep nuclear energy outside your house.
[01:07:58] <gilberth> pl: "some" that's the problem. And terrific idea to link food prices with energy prices.
[01:08:44] <pl> well, energy prices impact food prices pretty directly, though mostly in fossil fuels as we don't have effective electrical distribution network for food
[01:08:45] <gilberth> Have they calculated the area needed to grow all those crops to make enough "green gas" to power the whole country?
[01:09:13] <pjb> worse, whatever the area, it's not energetically profitable.
[01:09:34] <pl> no idea
[01:09:49] <gilberth> pl: There is a difference whether I need some energy to produce food to saying food=energy.
[01:12:06] <pl> gilberth: there's also a question of whether you have means to produce your own food, or do you need deliveries
[01:14:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[01:20:00] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 258 seconds)
[01:24:54] <selwyn> i got the impression that the conservatives were not that bad at reducing the non-renewable share of the national grid
[01:25:01] <selwyn> it's the only thing i credit them with
[01:26:50] <selwyn> https://grid.iamkate.com/
[01:26:50] -ixelp- National Grid: Live Status
[01:49:13] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[01:49:15] <gilberth> pl: Ok. I find a figure that says you need between .5 and 1.2 hectares per kW installed power. We have an installed power of 214GW, that is 214M * 1kW, or 214M * .5 to 1.2 hectares, or 2.14M * .5 to 1.2 square kilometers. Or 1034km to 1602km squared. I believe Germany would be smaller.
[01:52:21] *** Quits: semz (~none@user/semz) (Quit: Leaving)
[01:52:52] *** Joins: semz (~none@user/semz)
[02:14:34] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:80b1:8ede:e79b:49cf)
[02:21:51] <selwyn> wondering how much work it would be to successfully flash my nokia 105 with some custom software
[02:22:12] <selwyn> can any common lisp implementation fit into 4mb?
[02:24:41] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:80b1:8ede:e79b:49cf) (Remote host closed the connection)
[02:25:09] <semz> A Scheme would definitely fit at least.
[02:31:57] <gilberth> A Common Lisp could fit as well. CLISP used to be like 1.5MB.
[02:32:26] * hayley uploaded an image: (40KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/zKsHbCAAABuKVtrsWNnxPhWY/ttvd2myqd8u71.jpg >
[02:33:09] <Catie> you might be on to something here
[02:34:21] <hayley> I seem to have discovered something. The "client" for Netfarm probably should verify objects on its end, and the best way to do that is to run a "node" on the client which only grabs objects that it's asked to grab.
[02:34:49] <Mondenkind> selwyn: 'lisp500', perhaps
[02:35:58] <Mondenkind> hayley: sounds like a pyramid scheme
[02:36:18] <hayley> Else, trying to verify the objects runs the risk of blowing the heap if you store them in memory.
[02:36:59] <gilberth> Or run a CADR emulator on it :-)
[02:42:17] <hayley> That said, you can blow the heap on a node. Have an object with a slot which has a list of n objects, each with slots just like that. Write a method which accumulates all the slot values into a list.
[02:42:24] <White_Flame> selwyn: maybe ECL is one of the smaller ones today?  not sure
[02:42:45] * hayley needs to think of how to bill object loads. Another 1,000 instructions/object?
[02:44:25] <selwyn> imagine putting cl on this thing https://gadgets.ndtv.com/nokia-105-2017-4270
[02:44:25] -ixelp- Nokia 105 (2017) Price in India, Specifications, Comparison (20th October 2021)
[02:44:36] <selwyn> repl over sms
[02:46:12] <hayley> OTOH larger objects are proportionately worse. So...I bill per byte loaded? But then you have to figure out the length if you haven't actually used the canonical binary format to receive an object.
[02:57:16] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[03:04:00] <hayley> Then there's the problem of figuring out how much to bill every time if I hash cons and thus avoid traps to get objects most of the time. Guess I use another set somewhere.
[03:10:44] <hayley> No, I want to bill per object loaded, not per slot. So the set would be of loaded objects surely.
[03:11:15] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[03:20:35] <pl> selwyn: "L" used to run in 1MB 68k setup
[03:20:50] <pl> without virtual memory
[03:34:38] <hayley> https://www.reddit.com/r/ProgrammerDadJokes/comments/qbnqe6/people_are_stealing_my_lisp_lists/
[03:34:40] -ixelp- People are stealing my Lisp lists. : ProgrammerDadJokes
[03:36:45] <hayley> Think I need two sets to do this efficiently: one of slot values I've already counted, and one of objects I've already counted. The former covers hitting the same slot repeatedly. The latter ensures we don't bill an object twice.
[03:37:17] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[03:37:53] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[03:40:35] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 264 seconds)
[03:42:17] <hayley> The other place I could pull new objects is when loading scripts for CALL-METHOD. But it's basically the same deal, and it's nice that I have a VM with orthogonal instructions so there aren't any other places to cover.
[03:42:54] * hayley wonders how this compares to Ethereum gas per opcode.
[03:44:19] <hayley> Yes, Ethereum charges per word or byte to copy.
[04:06:40] <hayley> ...but it's different as there are no first-class objects on the Ethereum VM like there are in Netfarm. They're all just hashes. So the VM could page objects out whenever it feels like.
[04:07:56] <hayley> aeth: https://www.youtube.com/watch?v=7DXdWeGIDRY
[04:07:57] -ixelp- Half-Life 2 with only 1 health condensed (part 1) - YouTube
[04:21:42] * hayley uploaded an image: (24KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/DYpfywhWxojpxdCCpjPWRGFW/Screenshot%20from%202021-10-20%2011-51-25.png >
[04:25:47] *** Quits: random-nick (~random-ni@87.116.178.206) (Quit: quit)
[04:27:14] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[04:29:07] *** Joins: aeth (~aeth@user/aeth)
[04:32:22] <hayley> gilberth: https://delphi.allenai.org/?a1=Should+Gilbert+Baumann+take+care+of+Ville+Laurikari
[05:09:00] <Mondenkind> the dude who made tre?
[05:12:08] <copec> What were the most recent babblings or complaints about roswell? 
[05:12:57] <copec> I haven’t had problems with it, but I am relatively simplistic in what I do
[05:13:11] <hayley> Mondenkind: Apparently the dude who got them wrong with a non-existent "tag priority" function.
[05:13:53] <copec> I was under the impression it was more than documentation https://fukamachi.hashnode.dev/day-1-roswell-as-a-common-lisp-implementation-manager
[05:14:24] <hayley> (a|aa)* has no working priority function AIUI.
[05:14:33] <gilberth> Yep, the can't be a tag priority function as published. And he was hand-waving there and said that there is such a relation, while there isn't.
[05:15:03] <gilberth> hayley: Are you preparing for "Phil. 101"?
[05:15:28] <hayley> No, just messing around with an AI. But the AI says it's okay for you to take care of him.
[05:15:59] <gilberth> I can't barely take care of myself.
[05:16:38] * hayley reads https://rust-leipzig.github.io/regex/2017/03/28/comparison-of-regex-engines/
[05:17:02] <hayley> "but not the expression [a-q][^u-z]{13}x. This expression requires backtracking." It does‽
[05:22:03] <hayley> First, [a-q][^u-z] is an excellent prefix (two characters, assuming all random letters we still have Pr = 0.25) and that ain't backtracking.
[05:25:05] <hayley> Hm, does the Rust regex engine eagerly give you results? I imagine if you could have a lazy iterator and give it to DO-MATCHES, you would avoid any allocation. This would be a very interesting twist.
[05:31:26] <hayley> Can't say from the documentation, but I'd guess not.
[05:31:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[05:32:16] <Mondenkind> I think you can make it call a callback on every match, but not actually use the results?  Maybe?  idk
[05:33:21] *** Joins: aeth (~aeth@user/aeth)
[05:41:27] <hayley> Still, if we are comparing to Rust, I cannot complain about compile times ever again.
[05:42:36] <hayley> https://twitter.com/m_ou_se/status/1413589032697729036 ← average Rust programmer computer
[05:44:24] <hayley> Maybe I should be happy ASDF doesn't do parallel compilation, because that makes it socially difficult to have a bog slow compiler.
[05:45:50] <Mondenkind> sometimes, it is not possible to get away from scale.  The solution to compile times is incrementality, not parallelism or even straight compilation speed
[05:47:14] <Mondenkind> https://github.com/golang/go/issues/48886
[05:47:15] -ixelp- sync: ExampleWaitGroup includes an porn website url · Issue #48886 · golang/go · GitHub
[05:48:11] <hayley> Apparently rustc/cargo/something has the most sophisticated incremental compilation model evah. Still slow.
[05:48:50] <hayley> Mondenkind: Can reproduce. Though I regret it now.
[05:49:25] <Mondenkind> ehh not really
[05:49:42] <Mondenkind> they still monomorphize everything
[05:50:06] <hayley> True.
[05:50:21] <hayley> But that's not so much incrementalism as being stupid with what you compile.
[05:53:39] <Mondenkind> is there a difference?  I think of incrementalism in this context as avoiding recompiling something which you would not otherwise have to
[05:57:42] <hayley> Yeah, fair.
[05:58:32] <hayley> I'd say monomorphisation leads to too large work units, but incrementalism is having small work units. (And I don't think the former is even true, come to think of it.)
[05:59:38] <hayley> If you want fast compile times and monomorphisation, why not JIT though? :P
[06:02:09] <hayley> Aha, so Regex::find just finds the leftmost match, and Regex::find_iter gives you all. What does o-m-r-n do in the same benchmark? IIRC it gives all.
[06:03:03] <Mondenkind> not large/small; monomorphisation leads to an algorithmic increase of the work needed to compile.  If type U satisfies typeclass T, and I change the definition of U, with a polymorphic representation I only have to recompile code which refers to a concrete type U.  Whereas with monomorphisation I now need to figure out where Ts might have a dynamic type of U and recompile that code
[06:03:25] <Mondenkind> 'JIT' indeed!
[06:04:32] <hayley> Yes, find_iter is lazy. Or it scanned all the strings (of varying lengths) in 3.5ns. I think the former somehow.
[06:09:05] <hayley> And it seems that it just eliminates code if I try to run through the iterator. Oh well, guess I will be adding FIRST-MATCH to the API or something.
[06:10:05] <gilberth> -Wconversion is too pedantic. When I have uint16_t foo (uint16_t old, uint16_t mask, uint16_t new) { return (old & ~mask) | new; } it complains.
[06:24:57] * hayley adds a compiler macro for FIRST-MATCH.
[06:25:23] <hayley> Lisp 4.5× as fast as Rust (on gilberth's dyslexia simulator tagged RE)
[06:30:23] * hayley reads the news for once.
[06:30:32] <hayley> https://www.wsj.com/articles/teen-girls-are-developing-tics-doctors-say-tiktok-could-be-a-factor-11634389201 What the fuck?
[06:30:36] * hayley goes back to not reading the news.
[06:31:01] <Catie> Ohhhhh that article is NUTS
[06:32:01] <Catie> Especially like the way they describe the tics that the youths are developing don't line up AT ALL with my experience with tourette's
[06:33:35] <hayley> I haven't watched those videos, but the one person I knew who had Tourette's was very embarrassed about it. Not that she had a reason to be, not her fault, but ticing(?) for clout is quite something.
[06:34:28] <Catie> God, ain't that the truth. I was always given so much shit for it, it's crazy how the views seem to have changed (?)
[06:35:30] <hayley> I also heard about the same thing with ASD (which I do have - I don't have Tourette's so I'd rather not say anything). But it comes off superficial, like they're just playing stereotypes.
[06:36:28] <Catie> I haven't seen anything on that, for which I'm deeply grateful
[06:37:03] <hayley> But, then again, they could be legit and destigmatising it makes it seem more common. From memory, that has happened with people self-identifying as queer or gay or etc, and there was a little panic over that.
[06:37:12] <hayley> Hard to say.
[06:38:04] <hayley> Apparently it's worse, since there was initially a trend of "people with Aspergers don't stim" <https://old.reddit.com/r/aspergers/comments/p303ll/tiktokers_currently_faking_autism_by_stimming_to/>
[06:38:06] -ixelp- TikTokers currently faking autism by "stimming" to music. Creating a counter reaction of Aspies proving "real people wit [...]
[06:38:11] <Catie> Overall it really doesn't affect my life in the slightest. The youths will do what they'll do
[06:38:33] <Catie> Hhhhhhhh sakes alive
[06:38:38] * hayley is currently shaking leg to Gary Numan played loud, since no on else is at home.
[06:39:57] <copec> Most Rust benches I’ve seen are just *okay* performance. Unoptimized code under SBCL is usually within a factor of 5x of Rust, but optimized CL under SBCL is usually always faster.
[06:40:13] <copec>  /peanut_gallery 
[06:40:56] <hayley> copec: Today I'm just attacking regular expressions. And as they interpret DFAs whereas gilberth and I compile, it's like shooting fish in a barrel. (And moreso once I reuse the scratch vectors properly.)
[06:42:07] <copec> Yeah, I can totally see that 
[06:42:42] <hayley> I inlined something and now MAKE-ARRAY has disappeared from profiling results. That's a bit of a problem, as I know I allocate, but now I can't quantify it.
[06:44:52] <copec> I forget what PAIP calls it, I think data-oriented programming, but it’s so easy to move it down and compile it
[06:45:15] <hayley> Yup.
[06:46:06] <hayley> FWIW "inspiration porn" has existed for like a decade, but what's happening now ain't inspiration porn.
[06:46:11] <copec> Are there any hooks into the compiler in Rust? I wonder what other LLVM languages expose it in the language like CLASP
[06:46:49] <hayley> There are Scheme-like and procedural macros in Rust. I dunno about compiler macros or rewrite rules on arbitrary function calls though.
[06:48:00] <hayley> Oh, there are "compiler plugins" but those come off as implementation details, and not language features.
[06:52:07] <copec> If you made the functions in C in a generic way, I wonder if one could do some hacky shit to line up the function calls as if it was compiled for a specific DFA to begin with, instead of some trampoline interpretation 
[06:53:50] <copec> ^ignore just thinking out loud
[06:54:42] <copec> there’s nothing like trying to figure out how to do something wrong
[06:55:40] <copec> I wonder what sort of hacky stuff you could do with unsafe Rust… is where that thinking came from 
[07:01:09] <gilberth> Gosh. This code is so brittle. I face a non-working version now. And I didn't change anything(TM).
[07:01:12] <hayley> It's hard to get properly position-independent code, and you'd win with some register allocation.
[07:01:56] <hayley> Seems we are given buggy C code for security classes now.
[07:02:36] <gilberth> But I keep file versions like foo.c.<n>
[07:03:00] <hayley> TBH they had it going in this function by using "unsigned int" as the type for an array length, rather than size_t. You aren't going to have arrays big enough that overflowing size_t is a problem.
[07:03:01] <gilberth> hayley: You read our favorite book in class?
[07:03:16] <hayley> gilberth: No, they told us it is buggy. This file is int_overflow_vuln.c
[07:03:54] <hayley> This other one strcpys to a buffer which is too small. But they then just strcmp the buffer, so why bother with the buffer?
[07:04:00] <gilberth> Well, you usually want size_t, but that breaks when sizeof(array[0]) != 1 anyway.
[07:04:41] <hayley> https://www.youtube.com/watch?v=tbHix56qfG8
[07:04:41] -ixelp- The Aircrash Bureau - YouTube
[07:05:26] <hayley> Now we have a presentation on logging. Isn't it a bit too late to read logs to find pwning? I guess it helps to handle the damage.
[07:06:32] <gilberth> When really pwned, why would there still be something useful in logs?
[07:06:56] <gilberth> I mean, could you trust any bit?
[07:07:01] <hayley> That came up in conversation. Apparently you protect the logs more (but if you have permission to write the log, you have permissions to kill it).
[07:07:03] <hayley> Yeah, no.
[07:07:31] <gilberth> You could have another machine keeping the logs, yes.
[07:08:00] <hayley> What, we log if there are SQL injections? Surely the better thing to do is just not write SQL injections? That's one thing which is hard not to do these days.
[07:08:24] <hayley> "Do they teach us how to write buggy code in the first semester class so we have stuff to log?"
[07:08:27] <gilberth> It never was hard.
[07:09:20] <hayley> The same goes for "large queries" and "suspicious connections" IMO.
[07:10:33] <hayley> Now we have slides on "code testing". Can't wait to see what they get wrong now!
[07:11:32] <hayley> Oh, so this person in the meeting chat is a teacher? Saying that you just log the logs and it's like a camera being watched by another camera?
[07:11:48] <hayley> I dunno, what happens if you program the camera to explode? How is another camera going to help find the culprit?
[07:12:58] <hayley> Apparently we only learn SQL injections next week. I hope no one got hired in the last six months to use databases.
[07:14:15] <copec> I use modsecurity and rsyslog to a log server at work 
[07:14:57] <hayley> Okay, yeah, system logs would solve that, unless you manage to pwn the log server too. That'd suck.
[07:16:50] <gilberth> I wonder whether they teach that the languages used are responsible for most of flaws. And wrt SQL inject the religion that everything is a string.
[07:17:19] <hayley> Now we're told that logging is easier than writing code with obvious defects like SQL injection.
[07:17:55] <gilberth> lol. How do you actually detect an SQL injection?
[07:18:18] <hayley> The log says '); DROP TABLE stuff; --your code sucks lmao
[07:18:32] <gilberth> hayley: And now I know, why you want fast grepping. You want to scan those logs fast!
[07:18:44] <hayley> Clearly.
[07:18:46] <copec> Like 20 years ago there was a good exploit for tail, and many admins would tail a web server log
[07:19:03] <copec> One could craft a request string to pwn the tail
[07:19:11] <gilberth> hayley: Sure. There should be a law to forbid children being called DROP TABLE.
[07:19:33] <White_Flame> or a law to place liability on injection attacks with the devs
[07:19:42] <hayley> People only run tests after code is deployed? What happened to dev staging?
[07:19:59] <gilberth> Or people living in some "St Paul's St" as a friend of mine.
[07:20:01] <White_Flame> startups!  deploy!  pivot!  deploy!
[07:20:10] <copec> That’s how it works 
[07:20:15] <White_Flame> there is only run, no stage!
[07:20:17] <hayley> And tests apparently take longer to run than static testing. Depends on the testing I guess. Type checks? Sure, why not. Model checking? Fuck no!
[07:23:36] <copec> Most IT is shoestring and bubblegum 
[07:24:21] <copec> A Rube Goldberg machine with Perl
[07:24:35] <hayley> I'd take that €5k machine just to run TLA+ after incrementing one size variable.
[07:26:35] <copec> I’ve never actually written anything to sanitize for SQL injection 
[07:27:26] <copec> Do you try to fully parse it first? Or just filter characters?
[07:27:39] <hayley> Nor have I. But I think the latter from experience.
[07:27:46] <hayley> ...experience using shitty applications.
[07:28:17] <hayley> Also, could they have made anything more confusing than those UML(?) interface diagrams where you have the actors and the operations with "extends" and "includes" arrows?
[07:28:22] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:30:29] <copec> They tried to teach it first using LDAP, but that wasn’t confusing enough 
[07:31:24] <hayley> In some discussions of encryption(?) procedures you have those diagrams where Alice has one vertical line, Bob has another, and messages are squiggly lines going between them. Not quite the same, but it makes some procedures a lot clearer.
[07:38:00] <White_Flame> note that that sort of diagram is also UML ;)
[07:39:28] <hayley> Well, I like that sort of diagram more, independent of it being UML or not.
[07:40:56] <hayley> "You could do a buffer overflow with other languages though" Which ones?
[07:41:47] *** Joins: semz (~none@user/semz)
[07:42:46] <hayley> No one has entertained my proposal to simply not copy a string, rather than copying it to an appropriately sized buffer.
[07:45:48] <hayley> "You don't need C knowledge to analyse this code." "Oh, so we're supposed to know that C defines overflow to compute mod 2^32, and that an integer is not of arbitrary length?"
[07:50:25] <hayley> I don't think any of these things are natural to anyone. Maybe integer overflow is, coming from Java, but then again this class is a Python class.
[07:57:35] <hayley> "I think writing SQL injections is pretty hard, as you have to format strings rather than use prepared statements." "Yes, but it's more common to write injections." "Well, they only taught us to write injections in the last class." "..."
[08:05:58] <gilberth> I believe the CADR pop up menus have a usability issue. When they pop up the mouse is placed on the very menu item, you selected last time. This way muscle memory is of no use, when you remember where each menu item is. The placement of the mouse, when the menu pops up, should not be different each time. This is, why I always need ages to maneuver those menus.
[08:06:31] <gilberth> And in general, I believe warping the mouse around is a bad idea.
[08:08:18] <Mondenkind> this is one of the issues with the mouse in general.  The communication channel between human and computer has high latency, so you need a lot of pipelining if you want to make effective use of it.  The mouse tends to require a lot more synchronization/round-trips than e.g. a keyboard
[08:08:25] <Mondenkind> (not disagreeing that this specific case could be better, fwiw)
[08:09:50] <gilberth> Yes, and this is why I prefer keyboard short cuts. Mice are only useful for inputting an actual position, like where to place some element in a graphics, or where to put a window.
[08:12:03] <gilberth> I totally hate this peeking in any kind of menus, also like in a file browser or dialog. Dammit, I know how the file is named and there is completion. Way faster.
[08:12:41] <gilberth> My cousin always finds my screen boring and "depressing", all text but a few window decorations.
[08:13:58] <gilberth> And white on black. Real black, not gray. More depressing ;-)
[08:14:33] <Mondenkind> hehe, I am the same way
[08:14:50] <Mondenkind> 'real black, not gray'  I cannot stand the modern low-contrast trend
[08:16:21] <gilberth> Well, still better than black on white, as for some reason since my bad health, I have a hard time to actually read black on white. Must be some neurological issue. My eyes are in perfect order and all other neurological diagnosis turned up nothing. Doctors shrug.
[08:17:21] <gilberth> But then I always used white on black. Or green on black in the 80s :-)
[08:18:23] <Mondenkind> black on white is not terrible, for me.  But works much better on paper
[08:18:30] <Mondenkind> 'green on black' no amber? T_T
[08:18:46] <gilberth> No, I was cheap, no amber.
[08:19:45] <gilberth> Mondenkind: Well, I have this trouble with BoW only since last year. But it has gotten better.
[08:21:11] <gilberth> However as I used a laptop with a "retina" screen for almost a year, I have trouble to adjust to a regular screen. I should get a 27" display with that same physical DPI, and a machine which could emit such a video signal.
[08:22:12] <Mondenkind> perhaps sitting further away would help?
[08:22:23] <Mondenkind> maybe still lower dpi, but regain the same dp 'eye'
[08:24:40] <gilberth> Hmm, I sit not closer than approx 70cm away, that isn't suffice?
[08:26:20] <gilberth> But then: Sitting farther away, would make me want a larger font => less text => bad.
[08:31:05] <White_Flame> by "real black", I presumed you were using a CRT
[08:31:10] <White_Flame> or maybe an OLED
[08:34:17] <gilberth> As black as my display could show, which still is gray, of course.
[08:39:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:54:27] * hayley continues to typeset the Applied Language in #333 to annoy Mondenkind
[08:54:40] <hayley> Though the rest of the site is proper black.
[08:54:58] <hayley> lol jk, it's #111 for some reason.
[08:55:23] <hayley> Sadly they look indistinguishable with my monitor and lighting conditions rn.
[08:56:10] <Mondenkind> hayley: fwiw my website is light blue on dark blue
[08:56:14] <Mondenkind> my hope is that no one is able to read it
[09:08:10] *** Quits: remexre (~nathan@user/remexre) (Quit: WeeChat 3.1)
[09:09:24] *** Joins: remexre (~remexre@user/remexre)
[09:20:51] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:21:21] <dave0> maw
[09:25:03] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[09:46:38] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[09:59:43] <gilberth> Terrific! XQuartz is broken wrt to the mouse. I do an XWrapPointer, And the stream of incoming motion events is like <relative-to-old-position>* <warp> <still-relative-to-old-position>* <relative-to-new-position>*
[10:00:21] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[10:00:50] <Qwnavery> hi
[10:01:17] <gilberth> I have enough! I am fed up! This, is, not, funny, anymore. I switch professions and rather grow vegetables.
[10:02:41] <Mondenkind> i feel you on that point
[10:02:47] <Mondenkind> granted vegetables do not always do what you want either
[10:02:58] <Mondenkind> but we have been doing that for thousands of years now, and have a pretty good idea of how to do it well
[10:03:34] <gilberth> I am bad with every kind of plant, they won't grow in my presence.
[10:04:46] <gilberth> I mean, I don't want to loose pointer motion events. I still want to track motion while I put the invisible mouse pointer back to the middle of the window.
[10:05:26] <dave0> maybe check the timestamp for before-warp and after-warp ?
[10:05:48] <gilberth> Events carry a serial number, and this serial number is in sync with the serial numbers of my requests for a reason.
[10:07:00] <gilberth> dave0: You're supposed to remember the serial number of the XWarpPointer request you send, which I do, and the synthetic motion event because of the wrap carries exactly that serial number.
[10:08:56] <dave0> oh i think i understand
[10:08:59] <gilberth> Say, I am at around (300,300) and wrap to (200,200), what I see is say (302,304) (308,306) (200,200) [serial = warp] (310,308) (312,309) (201, 202) ; if you get what I mean. There are events with the old positions after I got the synthetic motion event.
[10:09:45] <gilberth> This works most of the time, but not always. Especially not with a high latency link.
[10:11:45] <gilberth> So this is a show stopper for me.
[10:14:15] <gilberth> I wonder if XFree86 has the same bug.
[10:24:12] * hayley tries to compute residuals from neural network training results, and the machine starts swapping hard.
[10:24:51] <hayley> Cool, now I have to start all over again with training. It takes a couple of minutes even on this machine.
[10:26:14] <hayley> TensorFlow also still tries to load CUDA despite that I don't have it (having an AMD graphics card) and spews warnings about it.
[10:30:36] *** Joins: elflng_ (~elflng@5.28.137.182)
[10:31:13] *** Joins: nckx_ (~nckx@tobias.gr)
[10:36:36] <hayley> Okay, I got bit by array broadcasting where I didn't expect it, making a n^2 element array.
[10:39:50] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: nckx (~nckx@tobias.gr) (Ping timeout: 260 seconds)
[10:39:51] *** nckx_ is now known as nckx
[10:42:35] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:45:54] * hayley uploaded an image: (11KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/UqHzVSGMdmRqOCIjNZkxOhFQ/regressions.png >
[10:46:26] <hayley> Which is smaller? I guess I should pull out inter-quartile range, really.
[10:48:15] <hayley> Apparently I reduced the standard deviation by a whopping 10%. Hooray.
[10:48:20] * hayley sarcastic toots on 🎉
[11:09:07] <gilberth> Reading the schematics and the ucode does help. I can't see how interrupts on mouse motions are generated, rather the pointer position is polled in the 60Hz interrupt.
[11:10:22] * hayley randomly pokes at neural network variables, meaning she is doing meta-simulated annealing.
[11:10:50] <gilberth> And -fprofile-generate and -fprofile-use does help. I am down to 14ns/cycle from 18ns/cycle on the slow machine.
[11:11:11] <gilberth> hayley: Meta learning?
[11:11:21] <hayley> Yes, sadly.
[11:11:40] <gilberth> What's so sad about it?
[11:12:46] <hayley> It's annoying to do, and I have no clue what the variables mean.
[11:13:07] <gilberth> Does anybody have a clue?
[11:13:54] <hayley> Now I got better performance, even though I used the same settings? Do I have to set the RNG seed of this too?
[11:14:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[11:14:44] <hayley> If I don't seed every RNG with a specific number, I could get in trouble for rigging the results.
[11:15:33] <Mondenkind> https://board.asm32.info/asmbb-v2-9-has-been-released.328/  'fully written in assembly language [...] very secure'
[11:15:35] <Mondenkind> yeah, right
[11:15:46] <hayley> That said, gradient descent probably really exposes differences between FPUs. So I wouldn't even count on that.
[11:17:20] <gilberth> Mondenkind: In assembler? That must be a joke.
[11:17:37] <hayley> Though the sample code I got was for a binary classification problem, whereas I have regression. sigh
[11:18:49] <Mondenkind> gilberth: it appears not
[11:19:09] <Mondenkind> https://asm32.info/fossil/asmbb/dir?ci=tip&name=source
[11:21:00] <gilberth> Oh dear.
[11:21:03] <hayley> Now, after "fixing" the loss function to be more suitable, the model performs worse. Go figure.
[11:23:00] <gilberth> Mondenkind: This guy has too much time.
[11:23:50] <gilberth> Which reminds me, that crafting a B compiler is on my list of completely useless things.
[11:24:29] <hayley> https://www.youtube.com/watch?v=PcsumKaIXEs
[11:24:32] <Mondenkind> I will say one thing for assembly, though: unlike c, it is impossible to get confused by the compiler's braindead rules about signed/usnigned and promotion
[11:24:33] -ixelp- Gary Numan (London 1981) [07]. The Aircrash Bureau - YouTube
[11:25:03] <hayley> Mondenkind: So I guess you'll write https://applied-langua.ge/posts/parastatal-problem.html but s/C/assembler?
[11:26:29] <hayley> Seems I want absolute errors, not squared. The latter loses very badly somehow.
[11:27:27] <gilberth> Mondenkind: You can't get confused in B, as there are no types. Everything is a word.
[11:28:06] <hayley> gilberth: What are your thoughts on calling dynamically-typed languages "untyped"?
[11:28:50] <gilberth> A dynamically typed language is not untyped. B is, or assembler.
[11:30:00] <Mondenkind> ehh assembler is kinda typed.  You have simd registers and gpr and segment registers and msrs etc.  Trying to add a simd register to a gpr is a compile-time error
[11:30:27] <gilberth> Heh, true.
[11:31:07] * hayley goes to continue dinner while the next model trains.
[11:33:50] <Qwnavery> hayley: what kind of net are you training, RNN? Time-Series?
[11:33:50] <hayley> Seems I am stuck with only a 20% reduction in error. Though I could add another layer...
[11:34:11] <hayley> Qwnavery: The boring kind, idk. Car info goes in, asking prices come out.
[11:34:20] <Qwnavery> Oh, RNN.
[11:34:51] <hayley> RNNs have a sort of feedback loop, no? These are independent observations and thus no feedback.
[11:39:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:39:31] <selwyn> it doesn't sound like an rnn
[11:40:22] <hayley> Now I wonder why TensorFlow is barely loading this machine. Guess the batch size is pretty small, so there's not much to parallelize.
[11:40:32] <selwyn> rnns have state, which acts as a memory, which means that they usually act on sequences (not the case here)
[11:42:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:43:16] <hayley> Maybe I should invest in a TPU. Then again, maybe not.
[11:49:16] <selwyn> trying to figure out how likely i am to permanently brick the nokia 105 by modding the firmware
[11:49:27] <hayley> OTOH AMD has ROCm and there's TensorFlow for ROCm.
[11:49:39] <hayley> Anyone have opinions on ROCm?
[11:50:35] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 258 seconds)
[11:52:05] <selwyn> i can't find out a damn thing about this phone
[11:52:16] <selwyn> concerned that i am 20 years too late for the nokia modding scene
[11:52:23] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[11:54:58] <hayley> Really, to build ROCm I need to build LLVM too?
[12:00:59] <hayley> Well, I can't be bugged with that shit.
[12:29:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:30:22] * hayley still struggles to crack loss < 0.0101
[12:36:41] <shka> lol
[12:36:41] <shka> https://www.youtube.com/watch?v=uhIdijSrnVc
[12:36:42] -ixelp- NEW M1 Max MacBook Pro Reaction: The Ports are Back! - YouTube
[12:36:55] <shka> apple returns to normality
[12:38:01] * hayley spots "val_loss: 0.0099"
[12:39:40] <shka> hayley: oh, you are doing ML, wanna tips?
[12:40:07] <hayley> Sure.
[12:40:30] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 260 seconds)
[12:40:46] <hayley> Though it's just an extension for a statistics assignment and I shouldn't be so fixated on getting better performance. They don't even mark for performance, just for writing.
[12:41:14] <shka> employ GBT as a regression technique
[12:41:32] <hayley> It has to be a neural network.
[12:41:32] <shka> neural networks CAN be really good, but they are really fiddly 
[12:41:46] <hayley> No shit.
[12:42:14] <shka> sure, but if you want to have solid baseline to know what is "good" GBT is great for that
[12:42:51] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[12:43:34] <shka> and if you are using  LightGBM it will train quickly as well
[12:43:58] <shka> or you can use statistical-learning as to have excuse to use lisp :-)
[12:44:24] <hayley> No, the assignment also has to be in Python sadly.
[12:44:34] <shka> lightgbm it is
[12:44:55] <hayley> ...and it has to use a neural network. No GBT.
[12:45:02] <shka> oh, ok
[12:45:41] <shka> i still think it is worth doing if you are not sure if the performance achieved by neural network is acceptable 
[12:45:49] <hayley> Sure.
[12:45:54] <shka> as a reference
[12:46:14] <shka> and it is easier to select attributes etc. with GBT 
[12:46:40] <shka> well, that's what i think at least
[12:46:43] <shka> you do you
[12:47:36] <hayley> Well, I am not too impressed with the results of a neural network, compared to linear regression, admittedly.
[12:48:04] * hayley uploaded an image: (12KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/cybqzdwLBHnPredlQUFeogbU/residuals.png >
[12:48:39] <shka> it is possible that problem, well, is suited for linear regression :)
[12:49:27] <hayley> The linear regression results weren't great either.
[12:49:28] <shka> but if you want to check, GBT is easy and quick way to have decent performance
[12:50:42] <shka> that's how you will know if goofed with NN 
[12:53:48] <shka> hayley: going away for cycling, feel free to reach me if you want some help with that NN
[12:54:11] <hayley> Thanks.
[12:54:13] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[12:56:31] * hayley changes from SGD to Adam optimization and it hits loss < 0.01 much faster.
[12:56:58] <hayley> We have been utterly bamboozled. Also I should have remembered this from when I did CAPTCHA recognition with CNNs.
[12:57:43] <hayley> That used Adam too.
[13:11:46] *** Joins: rogersm (~rogersm@90.166.177.48)
[13:32:47] *** Joins: random-nick (~random-ni@87.116.165.220)
[13:34:04] <selwyn> i realised why i am clumsy with neural networks
[13:34:46] <selwyn> because they are as close as you can get to doing a real world physics experiment on the computer
[13:35:19] <selwyn> most of your control of the neural network is tweaking knobs
[13:35:24] <selwyn> and seeing what works
[13:35:25] * hayley uploaded an image: (16KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ggOOlfhqspddBQSoffwbvYfk/Screenshot_2021-10-20_21-12-21.png >
[13:35:36] <hayley> Well, I'm happy with these results now. And I didn't even change any of the parameters of Adam from defaults.
[13:36:05] <selwyn> people who have been doing it for ages have some grasp of heuristics that is difficult to imitate
[13:36:14] <selwyn> patience is important
[13:36:17] <selwyn> just like experiments
[13:37:05] <selwyn> how flexible are els with the submission deadline in practice?
[13:37:38] <hayley> I haven't tried, but after an initial submission they gave me a while to edit.
[13:40:00] <selwyn> aliexpress order arriving today
[13:41:50] <hayley> IMO effective uses of "haha only serious" and detournement have broad overlap.
[13:43:22] <hayley> Or, at least, subversions e.g. https://upload.wikimedia.org/wikipedia/commons/1/12/Its_a_bore.jpg have some comedic value as well.
[13:44:40] <selwyn> oh it already arrived
[13:46:28] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: ta\)
[13:52:50] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 260 seconds)
[13:53:13] <mfiano> Morning
[13:53:59] <hayley> Hey mfiano
[13:54:05] <mfiano> Hi hayley 
[13:54:58] <lisp123> Anyone seen lotuseater lately? Haven't seen him message in a while
[13:54:58] <hayley> I think I found the problem with mean squared error. We have some really expensive outliers, one being about $80,000. The model basically always gets this one wrong. If it gets it wrong, then the error is going to be huge. So I just removed the really expensive cars, since there's a whole ten of them in a dataset of about 49,000 cars.
[13:55:28] <mfiano> I decided to take this week to rewrite my hacky Emacs config from scratch to try to fix some issues and use some alternative packages I've been keeping on eye on. Who knows, maybe I will like using Emacs a little more...I prefer vim for everything non-CL :)
[13:55:53] *** Joins: robin_ (~robin@user/terpri)
[13:56:00] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[13:56:05] <mfiano> Been using  the same config for like 7 years...except last year or so I have been using Doom Emacs because I've been too lazy to fix some issues with mine until now
[13:56:34] <lisp123> mfiano: Are you using EVIL?
[13:56:40] <mfiano> I really hate this kind of "meta-programming"; whenever I make a small edit in my editor config, I spend a week cascading into other issues
[13:56:49] <mfiano> lisp123: Of course
[13:56:56] <lisp123> What about Lispy etc?
[13:57:26] <mfiano> I do not like it. I use smartparens/evil-smartparens/evil-cleverparens structural editing
[13:57:38] <mfiano> for ^
[13:57:55] *** robin_ is now known as robin
[13:58:17] <lisp123> Yeah me neither. I'm actually using pure VIM (with a bit of paredit when needed), but I've fallen in love with these keybindings:
[13:58:40] <lisp123> https://pastebin.com/n4PttwL3
[13:58:41] -ixelp- (define-key evil-normal-state-map (kbd "q") 'kill-this-buffer);; Lisp Local - Pastebin.com
[14:00:06] <lisp123> Basically, if you are already at the start of a line, 0 defaults to beginning of defun, so you can quickly move up the file via toplevel forms...and since I don't use space much I have that bound to moving down
[14:00:45] <lisp123> I also mapped d[space], y[space] to cut sexp and copy sexp...ok athat's enough selling for today :)
[14:00:52] <mfiano> I have a different approach to that
[14:00:59] <lisp123> What do you do?
[14:01:39] *** Joins: Oddity (Oddity@user/oddity)
[14:02:37] <mfiano> https://gist.github.com/mfiano/491a31000d4d43740526d7252ff01abf
[14:02:38] -ixelp- utilities.el · GitHub
[14:03:13] <mfiano> lets me use HOME to toggle beginning of line / beginning of sexp
[14:06:21] <selwyn> adapter seems to be working but no hard drive visible
[14:09:14] <lisp123> mfiano: nice, will try it out
[14:09:40] <lisp123> I'm not an VIM expoert, by HOME do you mean the key "HOME" or do you mean 0 or something else?
[14:13:34] <lisp123> hayley: Yep, that's one of the most useful data cleaning adjustments
[14:14:13] <lisp123> Reminds me of my days when I was doing econometrics. We were using a horrid application called EViews then, I'm sure times have changed greatly since
[14:14:53] <mfiano> Whatever move-beginning-of-line is bound to, that vector will rebind that key
[14:15:00] <mfiano> Thats what vector keybindings do
[14:15:28] <lisp123> Interesting, good to know
[14:16:12] <mfiano> vim text objects are the only way I can think about manipulating s-expressions
[14:16:27] <mfiano> If you aren't familiar with them, I suggest you learn
[14:16:35] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 264 seconds)
[14:17:15] <mfiano> I wrote a short guide years ago.
[14:19:54] <lisp123> Oh cool, do you have a link?
[14:20:36] <mfiano> It was written with Spacemacs in mind, but most of the article is about vim text objects and motions in general: https://mfiano.net/posts/A-Few-Little-Time-Savers-for-Editing-Lisp-with-Spacemacs.html
[14:21:09] <lisp123> Thanks!
[14:22:04] <lisp123> I don't want to sound biased, but after switching to VIM style bindings, I can't go back to Emacs style (although I use them from time to time, e.g C-j for new line)
[14:24:46] <mfiano> Not sure why you would say that https://farm1.staticflickr.com/130/412117799_04fedb9b0a_z.jpg
[14:36:00] <selwyn> the bios thinks the pcie slot is empty, yet the led on the card is on
[14:36:13] <selwyn> no idea what to do
[16:01:33] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[16:06:02] <shka> selwyn: contact professionals
[16:06:29] <shka> "this is a macbook, a little bit wrecked, backup files please"
[16:06:34] <mfiano> and then follow the rule of 3
[16:06:43] <mfiano> 3 backups, 2 off-site
[16:07:03] <selwyn> annoying thing is that when it was starting to fail, i said to myself 'good thing i don't need any stuff on here anymore'
[16:07:10] <selwyn> famous last words
[16:19:15] <selwyn> shka: :/
[16:32:39] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[16:34:22] *** Joins: aeth (~aeth@user/aeth)
[16:50:36] <dave0> nite all
[16:50:51] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:54:02] <pl> hayley: https://news.ycombinator.com/item?id=28925465 I think you had some papers related to that?
[16:54:02] -ixelp- Yeah, that's what I thought about interrupt handlers. (Also if you're allocating... | Hacker News
[17:09:43] *** Quits: copec (~copec@schrodbox.unaen.org) (Ping timeout: 268 seconds)
[17:12:40] *** Joins: copec (~copec@schrodbox.unaen.org)
[17:22:25] <shka> as for the neural networks
[17:22:56] <shka> selwyn: that's why i tend to recommend tree based models just to establish baseline
[17:23:08] <shka> neural networks are fiddly
[17:29:29] <shka> wibbly wobbly neural networks :P
[17:52:26] <selwyn> i never like to use them
[17:52:33] <selwyn> but that is partly because i am rubbish at them
[18:19:33] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:20:45] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:39:25] *** Parts: icer (eric@gateway/vpn/protonvpn/icer) (WeeChat 2.8)
[18:59:26] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[19:25:09] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[19:28:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:45:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[19:47:11] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:47:23] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:56:52] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[20:04:08] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Quit: Leaving)
[20:22:20] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:42:15] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:42:45] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:49:24] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:06:29] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:52:35] <shka> https://www.youtube.com/watch?v=5s2YabkzSrg
[21:52:35] -ixelp- Messerspit - The Frankenstein Fighter - YouTube
[21:52:50] <shka> the nazi abomination
[22:07:17] <gilberth> Good morning #lispcafe!
[22:08:24] *** elflng_ is now known as elflng
[22:08:47] <shka> morning
[22:09:32] <gilberth> I believe I introduced a bug, because I said uint32_t instead of int32_t. So much for that.
[22:11:00] <gilberth> I can't see it, but then those promotion rules of C are counter-intuitive at times.
[22:15:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:24:30] <gilberth> But the original code is confusing. The is an ALU functions which mimics the '181, it operands are declared signed, while the output is declared unsigned.
[22:45:51] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:58:45] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:00:13] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:07:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:30:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:39:29] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:98c3:36b4:8d7b:786c)
[23:58:22] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-102F-static.midco.net) (Ping timeout: 252 seconds)
