[00:00:07] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[00:00:59] *** Joins: bebyx (~Thunderbi@user/bebyx)
[00:02:21] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[00:02:59] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[00:05:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:05:16] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[00:05:46] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 245 seconds)
[00:07:05] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[00:09:17] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[00:10:21] <meator> Hello. How can I get the controlling terminal of a foreign process if I know its PID? I'm talking about the thing that ps -aux displays in the TTY column. I have straced ps, and it seems that it gets most of its info from /proc/<pid>/stat. I have skimmed through proc(5) and the seventh value tty_nr seems promising. But how can I convert 34818 shown in stat to pts/2 shown in ps -aux?
[00:11:00] <vin> So in a class I have opened a file and mmaped it. I create initialize this class in a method. But in aother method I don't want to open the same file again. so I plan on passing a reference to the class instance, is it safe?
[00:12:49] <Xgc> vin: Maybe in another language. But not here.  It's not possible.
[00:13:07] <omegatron> meator: if  ps  can display the value you want to retrieve, check it's source code how to do it
[00:15:08] <meator> I have downloaded the source code of procps (my distro's provider of ps) and looked around, but I think it would require a deeper investigation of the code to understand how it can get it.
[00:15:26] *** Quits: rgrinberg (~textual@2806:102e:18:c0c1:a896:63f7:5249:df28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:15:36] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[00:17:00] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[00:17:18] <vin> Ah so stuff on stack created by one method can't be shared across methods eh Xgc
[00:17:24] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.190)
[00:17:29] <meator> I'm not very familiar with gnu autotools, so I couldn't make a build of ps with debugging symbols.
[00:18:41] <Xgc> vin: That's not entirely correct.  "creating in a method" says nothing about the scope and duration of an object, even in C++.
[00:19:14] <Xgc> vin: Your question needs to be more detailed.
[00:20:53] <vin> Xgc: So I construct a class class_t abc(some_param); in a method, now I want to return a reference to this abc instance, so that I can pass it to another method which could use the values of abc.
[00:22:20] <Xgc> vin: C++ has instance and class members, as well as automatic storage duration objects.
[00:22:29] <fossforus> what's a method? a function pointer in a struct?
[00:22:32] <fossforus> and then we all lauged
[00:22:43] <fossforus> s/g/gh
[00:23:06] <Xgc> vin: If you want 2 methods to share an object, use an instance (or class) member or pass from one method to the other.
[00:23:23] <omegatron> meator: try  https://linuxfromscratch.org/lfs/view/development/chapter08/procps-ng.html  as build instructions for procps-ng
[00:23:34] <Xgc> vin: You really should use the other channel, for that language.  This is for C.
[00:23:52] *** Joins: rgrinberg (~textual@2806:102e:18:c0c1:a896:63f7:5249:df28)
[00:23:56] <omegatron> meator:  or  https://archlinux.org/packages/core/x86_64/procps-ng/  and  https://github.com/archlinux/svntogit-packages/blob/packages/procps-ng/trunk/PKGBUILD
[00:23:59] <candide> Title of omegatron's link: Arch Linux - procps-ng 3.3.17-1 (x86_64)
[00:24:05] <vin> Xgc: Ah you are right, wrong channel!
[00:29:54] *** Joins: mahmutov_ (~mahmutov@5.176.43.25)
[00:30:12] *** Quits: mahmutov (~mahmutov@37.155.95.65) (Ping timeout: 240 seconds)
[00:30:42] *** mahmutov_ is now known as mahmutov
[00:34:07] *** Joins: eima (~eima@78-57-30-220.static.zebra.lt)
[00:35:07] *** Quits: eima (~eima@78-57-30-220.static.zebra.lt) (Client Quit)
[00:35:42] *** Joins: strajder (~strajder@user/strajder)
[00:35:51] <rustytaco> So i have a small device (atmega256) which i need to store and parse a human readable configuration (for later recovery, if Something Bad Happens (TM). I need a little bit of nesting so i thought something like this - https://termbin.com/jbuc - what would be a good way to write parser for that? yacc/lex still? its 2022 now and i havent done that sort of thing since 1990s
[00:37:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[00:37:50] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:39:27] *** Joins: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de)
[00:39:40] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[00:40:00] *** Joins: pulse (~pulse@user/pulse)
[00:42:57] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[00:44:20] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Quit: leaving)
[00:45:40] <Pentode> rustytaco: writing a parser in c for something like the above is pretty straightforward and would be a good little exercise. if you open and start scanning the file bit by bit you could just set up conditions for your delimiters and make a nice little parser.
[00:45:47] *** Joins: Enitin (~Enitin@82.180.145.226)
[00:50:37] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[00:52:09] *** Joins: Oddity (~Oddity@user/oddity)
[00:52:22] *** Quits: rgrinberg (~textual@2806:102e:18:c0c1:a896:63f7:5249:df28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:53:50] *** Joins: rgrinberg (~textual@187.144.82.175)
[00:54:57] *** lawt2 is now known as lawt
[00:55:21] <greeter> "Segmentation fault (core dumped)to begin..." sure seems like a great start :-D
[00:55:39] *** Quits: rgrinberg (~textual@187.144.82.175) (Client Quit)
[00:57:43] <Amun-Ra> it's a great start for using asan/ubsan libs :>
[00:59:33] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 256 seconds)
[01:00:23] *** Quits: sh0ne (~sh0ne@178.237.217.167) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:00:47] <greeter> hmm, i clearly did something wrong with pointers (no shock there)
[01:02:36] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[01:03:37] *** Joins: Enitin (~Enitin@82.180.145.230)
[01:04:22] <greeter> love it when i can fix the problem on my own though :-D
[01:07:25] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.190) (Ping timeout: 250 seconds)
[01:07:29] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[01:07:30] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:09:07] *** Quits: sidy (~sidy@user/sidy) (Read error: Connection reset by peer)
[01:10:34] <meator> omegatron: That's interesting, but I don't know how to inject -O0 -ggdb into it.
[01:11:26] <omegatron> export CFLAGS="-O0 -ggdb" before running the configure script should do the trick
[01:11:59] <omegatron> you can check all configure options by running   ./configure --help
[01:12:19] <omegatron> at the end there are also influental environment variables listed
[01:12:39] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[01:14:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[01:15:01] *** Joins: oxfuxxx (~oxfuxxx@185.216.32.156)
[01:15:59] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[01:18:07] <meator> ps is nowhere to be found after running ./autogen.sh && ./configure && make.
[01:19:29] <meator> It's there after I do make install. I have created a local DESTDIR to keep my normal version of ps.
[01:19:55] *** Quits: john99 (~john99@102.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[01:20:33] *** Joins: kurahaupo (~kurahaupo@pa49-182-118-127.pa.qld.optusnet.com.au)
[01:20:35] <meator> But it requires LD_LIBRARY_PATH shenanigans now.
[01:21:00] <meator> And I don't really care about ps, I just want to get the controlling terminal of the process.
[01:21:39] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-251-82.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[01:22:09] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:22:58] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:24:12] *** Quits: alch (~alch@151.38.240.14) (Ping timeout: 240 seconds)
[01:25:31] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:26:26] *** Joins: alch (~alch@151.18.228.236)
[01:26:31] *** Quits: oxfuxxx (~oxfuxxx@185.216.32.156) (Ping timeout: 256 seconds)
[01:26:36] *** Quits: rootx74 (~rootx74@user/rootx74) (Ping timeout: 245 seconds)
[01:29:35] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 256 seconds)
[01:29:54] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 252 seconds)
[01:31:01] <omegatron> meator: I didn't expect you would use this to replace your system's procps tools ; of course you would either use some DESTDIR-method and put it in some arbitrary place OR install in /usr/local ; and depending on what you chose, yes, if procps-ng comes along with libraries and they are installed in a directory ld does not know about, you have to use LD_LIBRARY_PATH for example
[01:33:14] <omegatron> if you don't want to use gdb et al., then printf() is the universal debugger ... you could now insert     printf ( "%s : %s ()" "\n", __FILE__, __FUNCTION__ ) ;   at the start of the functions you think are relevant to break down how and where ps retrieves the information you care about
[01:33:19] *** Joins: oxfuxxx (~oxfuxxx@185.216.32.157)
[01:33:56] <Pentode> meator: a specific process or the one you are currently in?
[01:34:53] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[01:35:01] *** Quits: oxfuxxx (~oxfuxxx@185.216.32.157) (Client Quit)
[01:35:21] *** Joins: Alhazred (~Alhazred@45.129.56.151)
[01:35:44] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[01:35:52] <Pentode> you could use ctermid() or ttyname() alternatively you _can_ use proc/stat but its a little bit of a pain if you need a specific tty :-/
[01:38:48] *** Joins: Enitin (~Enitin@82.180.145.226)
[01:39:45] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:41:57] *** Quits: zzbot (~zzbot@user/zzbot) (Remote host closed the connection)
[01:42:37] *** Joins: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833)
[01:43:21] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:43:23] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[01:45:15] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[01:45:39] *** Joins: Viewday115 (~Viewday@user/viewday)
[01:47:25] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:49:51] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: leaving)
[01:51:20] *** Joins: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[01:51:31] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[01:52:24] <meator> The process of which I'd like to get the pathname of the controlling terminal isn't related to the process requesting this information, so ctermid() isn't applicable and the only thing I know is the PID, I don't have the file descriptor of the controlling terminal.
[01:54:10] *** Joins: Viewday1151 (~Viewday@user/viewday)
[01:54:28] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[01:55:25] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:55:41] *** Viewday1151 is now known as Viewday115
[01:56:54] <Pentode> meator: you can use MAJOR() / MINOR() in kdev_t.h to get the appropritate values from stat
[01:57:19] <Pentode> meator: im not sure which values they are but if you look at the macros you can work it out and put them in a variable
[01:59:27] *** Quits: tolot (~tolot@dynamic-002-244-155-162.2.244.pool.telefonica.de) (Quit: Leaving)
[02:03:46] <meator> I'll look into this and into ps further.
[02:03:51] <meator> I have to leave now.
[02:03:58] <meator> Thanks for your help!
[02:04:37] <Pentode> good luck
[02:04:50] *** Joins: Guest49 (~Guest49@2600:1700:2050:1040:5d4c:e061:4689:d06a)
[02:05:00] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[02:08:39] *** Quits: Guest49 (~Guest49@2600:1700:2050:1040:5d4c:e061:4689:d06a) (Quit: Client closed)
[02:14:29] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:15:34] *** Joins: Batzy (~quassel@user/batzy)
[02:16:39] *** Joins: zmt00 (~zmt00@user/zmt00)
[02:17:11] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[02:19:06] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:20b1:b36f:805d:9afa) (Quit: Quit)
[02:19:18] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:20b1:b36f:805d:9afa)
[02:19:27] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[02:20:38] *** Joins: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[02:21:58] <Juliu> How do I remember the path in a binry tree with O(log n) many bits?
[02:23:47] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[02:26:44] <Xgc> Juliu: You didn't mean O, did you?  O is about complexity, not number of bits.  Maybe you meant log2(n)
[02:27:04] <Xgc> Juliu: For that, the tree probably needs to be balanced.
[02:28:24] <Juliu> I meant what I wrote
[02:28:39] <Juliu> Yes, I mean O(log2(n))
[02:29:28] <Juliu> Well, actually O(log2(n)) == O(logk(n)), so the 2 does not really matter
[02:29:36] <BtbN> "O(...) many bits" just makes no sense
[02:29:42] <Xgc> Juliu: It's a "binary" tree.  It matters.
[02:29:45] <Juliu> Of course it makes sense
[02:30:05] <Xgc> Juliu: O is not about bits.
[02:30:14] <Juliu> Xgc, no it does not matter. O(log2(n)) is equal to O(log3(n)), for example
[02:30:27] <Juliu> Xgc, O is also not about runtime. Stop wasting my time please
[02:30:35] <Xgc> Juliu: Are you asking about complexity or number of required bits?
[02:30:52] <BtbN> Well, you seem to know better anyway, soo, no helping neccesary.
[02:30:59] * Xgc nods
[02:31:03] <Juliu> No, I am telling you about the complexity of the number of memory that is allowed, and asked how to do it
[02:31:07] * Xgc wanders off.
[02:31:35] <Xgc> Juliu: You asked about: "a binry tree with O(log n) many bits"
[02:31:43] <Juliu> Actually it also does not matter if I say O(log n) many bits, or if I say O(log n) many bytes, since both is the same
[02:31:53] <Xgc> Which makes 0 sense.  But I suspect I know what you meant.
[02:32:26] <Juliu> Xgc, no, I asked for a way to store a path in a binary tree, and the storage of this path should be in O(log n) many bits. Sorry if that was unclear
[02:32:49] <Juliu> The tree of course has n nodes
[02:33:16] <Juliu> (Which makes the tree of size O(n log n), but that does not really matter)
[02:33:17] <Xgc> Juliu: It's log2(n) bits, and that would handle a balanced binary tree. Big-O has nothing to do with it.
[02:33:27] <BtbN> O(log n) many ANYTHING makes no sense. log(n) many bits could
[02:33:45] <Xgc> Juliu: Take a breath and read the comments.
[02:33:45] <Juliu> Xgc, you don't get it
[02:33:54] <Juliu> BtbN, of course it makes sense
[02:34:03] <Xgc> Juliu: Read about Big-O
[02:34:18] <Juliu> O(log n) many bits could for example be 7*log(n) bits
[02:34:32] <Juliu> Xgc, I know about Big-O, thanks
[02:34:51] <Xgc> You have your answer.
[02:35:11] <Juliu> Xgc, your answer is not helpful since you do not even seem to understand the question, but thanks
[02:35:38] <Xgc> Juliu: Do you know if the tree is balanced?
[02:36:02] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[02:36:03] <Juliu> My question remains: When I have a binary tree with n nodes, how do I remember a path in this tree with only O(log n) bits
[02:36:16] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[02:36:24] <Juliu> Xgc, if the tree was balanced it would be easy, true. It's not necessarily balanced
[02:36:35] <BtbN> The O still makes no sense, but the most trivial way to remember a path in a (balanced) binary tree is just a one bit per layer in the tree
[02:36:37] *** Joins: vysn (~vysn@user/vysn)
[02:36:59] <BtbN> *a single
[02:37:02] <Juliu> BtbN, the O still makes sense. It tells you that I do not care if it's log(n) many bits or 1000*log(n) many bits
[02:37:29] <Juliu> Well, the tree is not balanced
[02:38:24] <BtbN> Given it's a binary tree, just 0 for left and 1 for right should still work.
[02:38:43] <Juliu> Actually it does not matter if it's a binary tree or not, but I said binary since that's easier
[02:39:09] <BtbN> it very much matters if you ant to come up with a binary representation of the tree
[02:39:12] <BtbN> *want
[02:39:17] <Juliu> BtbN, well, a path could be of length O(n) and hence need O(n) bits with your method. And that's more than O(log n)
[02:39:27] <Xgc> Correct.  and the length apparently doesn't matter, since it can be n bits in length, for a tree completely unbalanced no node having more than one path to the next level.
[02:39:52] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[02:40:16] <BtbN> You can also come up with an algorithm that defines how to iterate over your tree in a well defined order
[02:40:20] <BtbN> and then just store the index
[02:40:27] <BtbN> That comes with a bunch of assumptions though
[02:40:50] <Xgc> So to handle all cases, you need one bit per node, since the worst case is one node per level/depth.
[02:41:08] <Juliu> BtbN, well, not really. You can easily convert a non-binary tree locally to a binary tree on the fly and use only O(log n) memory for that, and the longest path in the tree would only increase from O(n) to O(n^2), and O(log(n)) is equal to O(log(n^2)). So it does not matter if it's binary or not
[02:41:31] *** Joins: moog_ (~moog@107.126.53.19)
[02:41:37] <BtbN> Which brings us back to "You seem to know better anyway"
[02:41:55] <Juliu> BtbN, well, I know some things. Sure
[02:42:07] <Juliu> Assumptions?
[02:42:22] <Xgc> What part are you having difficulty with?
[02:42:33] *** Quits: nelgau (~nelgau@cpe-75-82-216-42.socal.res.rr.com) ()
[02:42:52] <BtbN> Like, the index is only valid for that one particular tree
[02:42:58] <BtbN> any change to it, and the index might shift
[02:43:26] <Juliu> Well, actually I hoped you would come up with the answer that there is (at most) only 1 path in any tree between any 2 nodes, so storing only the first and the last node would be enough, and that is in O(log n). Because then I could have extended my question to come to the real question
[02:43:39] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[02:44:20] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[02:44:56] <BtbN> That sounds highly redundant
[02:45:46] <Juliu> Then I would have asked about how we traverse such a "tree" if we also add some more edges to each node so that we can't traverse it that simply
[02:45:46] *** Quits: strajder (~strajder@user/strajder) (Quit: gn)
[02:46:02] <BtbN> To store those two nodes, you need to first come up with a way to "address" it, which is exactly what you asked to do.
[02:46:11] <Juliu> BtbN, storing 2 indices is highly redundant?
[02:46:59] <BtbN> You didn't seem to be happy with the index solution, soo
[02:47:19] *** Quits: moog_ (~moog@107.126.53.19) (Ping timeout: 250 seconds)
[02:47:34] <Juliu> BtbN, your solution was to store a bit for each fork, and that would be too many bits in the worst case (i.e. if the tree is not balanced)
[02:49:22] <Juliu> Maybe you guys have another idea besides storing the index of the first and last node on the path?
[02:49:27] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[02:49:43] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[02:49:55] <Juliu> Because if I do that it seems pretty hard to find for example the second last node on the path
[02:50:03] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[02:50:55] *** Quits: ekathva (~ekathva@2001:999:50:a96:4ee5:c816:f561:d86f) (Quit: Leaving)
[02:51:03] <Juliu> Any idea?
[02:53:27] *** Quits: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net) (Ping timeout: 256 seconds)
[02:55:27] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[03:00:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[03:02:43] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[03:04:00] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[03:05:01] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[03:07:03] *** Joins: bindu_ (~bindu@user/bindu)
[03:07:55] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[03:08:19] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[03:09:00] *** bindu_ is now known as bindu
[03:10:06] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[03:10:12] *** Joins: korg815 (~korg815@user/korg815)
[03:11:31] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:13:34] *** Joins: lureevar (~lureevar@2804:d45:4788:bb00:890b:9a9a:267:fb74)
[03:14:10] *** Joins: Ox000 (~jy@107.122.97.241)
[03:17:08] *** Quits: Ox000 (~jy@107.122.97.241) (Remote host closed the connection)
[03:17:26] *** Quits: mahmutov (~mahmutov@5.176.43.25) (Ping timeout: 260 seconds)
[03:29:00] <zwr> forgive me #c, for I have sinned. I wrote a header that behaves a lot like some sort of macro function
[03:29:26] <zwr> you #define a specific variable to pass as "argument" to that header, then you #include it, and that's a function call of sorts
[03:31:21] <sham1> How is that sinful
[03:31:39] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[03:32:11] <zwr> actually, now that you asked that, I see it's a lot like _POSIX_C_SOURCE or _GNU_SOURCE
[03:32:15] <zwr> but mine isn't a feature test macro
[03:32:33] <sham1> It's also used with STB stuff
[03:32:40] <zwr> it takes the value of that #define and does some basic text processing
[03:33:08] <Xgc> zwr: See also X macros
[03:33:25] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[03:33:50] *** Joins: pizdets_ (~pizdets@183.182.110.214)
[03:34:11] *** Quits: pizdets (~pizdets@183.182.115.102) (Ping timeout: 265 seconds)
[03:37:37] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[03:37:42] <zwr> also it can't be a function-like macro because it uses the result of that text processing in an #include
[03:38:23] <zwr> which itself is conditional
[03:40:21] <zwr> essentially I did this because a function-like macro can't contain even more preprocessor directives
[03:40:57] *** Quits: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[03:41:29] <Xgc> zwr: Right.  But there are sometimes ways to rewrite to avoid that approach.
[03:41:33] *** Joins: soul-d (~uknown@user/soul-d)
[03:46:30] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[03:47:20] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[03:47:24] *** Joins: seninha (~seninha@user/seninha)
[03:48:30] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 252 seconds)
[03:49:13] *** Quits: Akuli (~Akuli@213.216.208.39) (Quit: Akuli)
[03:51:24] *** Joins: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com)
[03:52:10] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:53:41] *** Joins: Viewday1150 (~Viewday@user/viewday)
[03:54:06] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 245 seconds)
[03:54:20] *** Joins: cincoswim (~cincoswim@cm-72-241-33-17.buckeyecom.net)
[03:55:11] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[03:55:11] *** Viewday1150 is now known as Viewday115
[03:57:51] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:58:12] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[03:58:49] <zwr> the obvious one would be to copypaste the contents of that kludge around, but that's not pretty too. Another solution would be to generate the header with the build system, but that would hardcode some stuff I'm trying to do. the issue here is that I need a preprocessor extension, but I don't have it or its functionality everywhere, and so I need to use the preprocessor to get around that
[03:59:18] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[04:00:28] *** Quits: cincoswim (~cincoswim@cm-72-241-33-17.buckeyecom.net) (Quit: WeeChat 3.4)
[04:02:02] <zwr> I would post the code but it doesn't feel right to show the preacher proof of your sins when you confess them
[04:02:27] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[04:02:29] <SamuelMarks> hi
[04:03:09] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[04:03:12] *** Joins: Arthuria (~Arthuria@user/arthuria)
[04:03:28] <SamuelMarks> I've got some code that uses `fputs` to write to something I `fopen`ed. Is there some way of using a `char*` instead, without rewriting the rest of the function?
[04:03:39] * SamuelMarks wants the same code to be used to dump to disk and to dump to a char*
[04:04:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[04:04:18] <fizzie> In POSIX, yes.
[04:04:29] <fizzie> In standard C, you'll have to invent your own abstraction, unfortunately.
[04:04:45] <SamuelMarks> darn
[04:04:48] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[04:05:06] <SamuelMarks> Okay I'll just build something up using `asprint` and output that char* to a file at the end, probably better on I/O anyway
[04:05:10] <SamuelMarks> *asprintf
[04:05:41] <fizzie> If you're going to be using `asprintf`, you've already left the confines of standard C, and could use the GNU facilities.
[04:05:42] <zwr> shouldn't be too hard with function pointers, but it might not be worth it
[04:06:15] <fizzie> In POSIX (and GNU), the relevant functions to look at would be `open_memstream` and `fmemopen`, depending on whether you want a dynamically resized stream, or a fixed chunk of memory.
[04:06:17] <SamuelMarks> fizzie - Oh I wrapped it myself, see https://github.com/offscale/c89stringutils
[04:06:17] <candide> Title of SamuelMarks's link: GitHub - offscale/c89stringutils: string functions from newer standards / common non-standards for C89
[04:06:24] <fizzie> Oh, that's different.
[04:06:50] <SamuelMarks> Oh cool, maybe I should wrap `open_memstream` and `fmemopen` for SunOS, BSD, and Windows also
[04:08:19] *** Quits: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[04:10:36] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[04:11:16] <fizzie> There's also a few even more flexible (and even more implementation-specific) functions, specifically the GNU `fopencookie` and the BSD `funopen`, which can make up a `FILE *` that points at arbitrary I/O functions that can do whatever.
[04:11:29] <zwr> cool, you managed to automate testing on SunOS
[04:11:35] <zwr> I've wanted to do that for my own projects but failed
[04:11:51] <fizzie> The problem with wrapping them is that you can't really make up a non-file `FILE *` unless your implementation provides some way of doing that. You can of course make your own "either a file or an in-memory stream" type, but often the whole reason you'd want to is that there's some existing code written with plain `FILE *` in mind that you'd want to repurpose.
[04:14:00] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[04:14:09] *** Joins: hiroshi_ (~freedom@151.35.190.68)
[04:14:15] <SamuelMarks> zwr - Yeah it's a bit finicky
[04:17:25] *** Quits: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[04:19:56] *** Quits: reset (~reset@user/reset) (Quit: reset)
[04:21:16] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Read error: Connection reset by peer)
[04:21:25] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:22:18] *** Quits: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833) (Quit: Leaving)
[04:22:38] *** Joins: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833)
[04:22:52] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[04:23:48] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:156d:4cd3:81cf:f50c) (Ping timeout: 240 seconds)
[04:25:15] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 250 seconds)
[04:25:34] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 260 seconds)
[04:25:51] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2b3e:70f8:165f:be99)
[04:25:54] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[04:26:16] *** Joins: nicbk (~nicbk@user/nicbk)
[04:26:18] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[04:27:06] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[04:27:12] *** Quits: Praise (~Fat@user/praise) (Remote host closed the connection)
[04:28:21] *** Joins: Praise (~Fat@user/praise)
[04:32:35] *** Quits: Fairy (~Fairy@2001:464a:4992:0:5813:fe5c:3e8c:63aa) (Read error: Connection reset by peer)
[04:32:55] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5813:fe5c:3e8c:63aa)
[04:33:15] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[04:33:41] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 268 seconds)
[04:33:48] *** Joins: bindu_ (~bindu@user/bindu)
[04:33:52] *** Joins: p0g0__ (~p0g0@user/p0g0)
[04:34:12] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[04:34:21] *** Quits: noose (~noose@user/noose) (Quit: Bye)
[04:34:33] *** Joins: noose (~noose@user/noose)
[04:34:36] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[04:35:44] *** bindu_ is now known as bindu
[04:37:32] *** Quits: p0g0_ (~p0g0@user/p0g0) (Ping timeout: 240 seconds)
[04:37:32] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (Ping timeout: 240 seconds)
[04:38:06] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[04:40:59] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[04:43:21] *** Joins: Briann (~Brianboru@177.12.221.56)
[04:46:29] *** Quits: ckdCreations (~ckdCreati@147.55.130.35) (Read error: Connection reset by peer)
[04:46:45] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[04:46:55] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[04:52:03] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Quit: Konversation terminated!)
[04:54:42] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[04:55:29] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[04:57:21] *** Joins: nicbk (~nicbk@user/nicbk)
[04:58:37] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[05:01:44] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[05:05:36] *** Joins: Enitin (~Enitin@82.102.22.86)
[05:07:26] *** Quits: yetoo_ (~yetoo@user/yetoo) (Remote host closed the connection)
[05:14:59] *** Quits: hiroshi_ (~freedom@151.35.190.68) (Quit: hiroshi_)
[05:15:00] *** Joins: dansan (~daniel@75.81.148.51)
[05:15:41] *** Quits: Red (~Red@41.92-221-233.customer.lyse.net) (Ping timeout: 256 seconds)
[05:16:38] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[05:17:54] *** Joins: fengdaolong (~fengdaolo@171.43.210.166)
[05:19:29] *** Joins: hanzo (uid532183@user/hanzo)
[05:19:56] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 268 seconds)
[05:21:06] *** Joins: zer0x (~zer0x@42.113.144.44)
[05:21:47] *** Quits: Epithium (~Epithium@2603-6080-3203-8d68-b162-a173-f12a-3a04.res6.spectrum.com) (Remote host closed the connection)
[05:22:39] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:23:25] *** Quits: alch (~alch@151.18.228.236) (Ping timeout: 240 seconds)
[05:23:52] *** Joins: Epithium (~Epithium@2603-6080-3203-8d68-565d-9a3f-5480-e6eb.res6.spectrum.com)
[05:25:27] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:25:27] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:25:27] *** Joins: wroathe (~wroathe@user/wroathe)
[05:25:40] *** Joins: alch (~alch@151.38.244.92)
[05:26:23] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[05:26:38] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[05:27:50] *** Joins: Wulf (~Wulf@user/wulf)
[05:28:36] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[05:29:06] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 245 seconds)
[05:29:42] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.4.1)
[05:30:22] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (Read error: Connection reset by peer)
[05:30:24] *** Quits: candide (~pbot3@about/c/bot/candide) (Read error: Connection reset by peer)
[05:30:38] *** Joins: candide (~pbot3@about/c/bot/candide)
[05:31:40] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[05:33:00] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 252 seconds)
[05:33:17] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[05:36:04] *** Quits: lureevar (~lureevar@2804:d45:4788:bb00:890b:9a9a:267:fb74) (Quit: lureevar)
[05:36:54] *** Quits: xbkkd (~F0@user/xbkkd) (Remote host closed the connection)
[05:40:23] *** Quits: dsrt^ (~dsrt@96-67-120-105-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[05:41:45] *** Joins: Zeturic (~Orimendix@50.26.218.162)
[05:42:39] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[05:42:46] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[05:43:55] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[05:45:40] *** Quits: Trashlord (~trash@user/trashlord) (Quit: ZNC 1.8.2 - https://znc.in)
[05:45:48] *** Quits: X-Scale (~ARM@89.214.146.25) (Ping timeout: 240 seconds)
[05:45:48] *** X-Scale` is now known as X-Scale
[05:48:07] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[05:48:23] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[05:50:33] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:50:41] *** Joins: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[05:50:59] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:51:10] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[05:52:32] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[05:52:39] *** Quits: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[05:52:47] *** Joins: Techcable (~Techcable@user/Techcable)
[05:53:10] *** Joins: kurfen_ (~kurfen@176.119.195.10)
[05:53:27] *** Joins: Viewday1154 (~Viewday@user/viewday)
[05:53:37] *** Quits: kurfen (~kurfen@176.119.195.8) (Ping timeout: 240 seconds)
[05:54:06] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:54:56] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[05:54:59] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 252 seconds)
[05:55:32] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 252 seconds)
[05:55:32] *** Viewday1154 is now known as Viewday115
[05:57:46] *** Joins: soul-d (~uknown@user/soul-d)
[05:58:45] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[06:01:03] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Ping timeout: 252 seconds)
[06:06:24] *** Joins: vysn (~vysn@user/vysn)
[06:07:52] *** Joins: Red (~Red@41.92-221-233.customer.lyse.net)
[06:08:36] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[06:11:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[06:12:16] *** Joins: lainon (lainon@gateway/vpn/protonvpn/lainon)
[06:12:47] *** Joins: Trashlord (~trash@user/trashlord)
[06:15:40] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:17:55] *** Joins: ferdna (~ferdna@user/ferdna)
[06:21:35] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[06:23:24] *** Joins: HaMsTeRs (~Thunderbi@210.3.201.132)
[06:25:37] *** Quits: vin (~vin@user/crash) (Quit: WeeChat 2.8)
[06:25:41] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Client Quit)
[06:27:50] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[06:33:14] <SamuelMarks> How does `asprintf` work? - `char *s; asprintf(&s, "foo%s", "bar"); asprintf(&s, "can%d", 5);` <-- is that invalid?
[06:33:23] *** Joins: CCCG2022 (~dell@120.245.30.14)
[06:34:12] *** Quits: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 240 seconds)
[06:34:39] <vdamewood> SamuelMarks: Looks good. Don't forget to free().
[06:35:09] *** Joins: teeto (~user@177-85-227-184.user.virtualslice.com.br)
[06:36:32] *** Parts: teeto (~user@177-85-227-184.user.virtualslice.com.br) ()
[06:36:35] *** Joins: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[06:36:48] <SamuelMarks> Oh that's valid? - Hmm then something else is breaking in my code
[06:38:53] *** Joins: rootx74 (~rootx74@user/rootx74)
[06:40:59] <SamuelMarks> Oh maybe I need to explicitly use it, like `asprintf(&s, "%scan%d", s, 5)`
[06:41:29] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[06:42:28] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[06:43:54] <rcf> Your original would not work, as it would allocate a new string (leaking the old one in the process)
[06:44:24] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[06:45:36] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[06:48:57] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Ping timeout: 256 seconds)
[06:56:18] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[06:58:15] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 252 seconds)
[06:59:41] <fizzie> The other version would leak the string allocated by the first call too. It's not really a function well-suited for incrementally building up a string.
[06:59:50] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[07:02:57] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[07:03:16] *** Joins: Phandal (~Phandal@user/phandal)
[07:03:33] *** Joins: mzxtuelkl__ (~mzxtuelkl@user/mzxtuelkl)
[07:04:11] <SamuelMarks> fizzie - What do I use for incrementally building a `char*` of arbitrary size from formatted strings?
[07:05:30] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[07:07:02] *** Quits: mzxtuelkl_ (~mzxtuelkl@user/mzxtuelkl) (Ping timeout: 240 seconds)
[07:07:11] <pragma-> allocate a single big-enough buffer or realloc just-big-enough buffers over and over.
[07:08:33] <pragma-> sprintf with null arguments will return the size you need if you need exact sizes.
[07:09:11] <pragma-> otherwise a big-enough buffer and the normal string functions generally work for most people
[07:10:18] <rootx74> hey yah all
[07:10:30] <rootx74> what is this printf actually ?
[07:10:45] <rootx74> i am newbie in c
[07:10:51] <rootx74> where can i learn more
[07:11:49] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[07:14:36] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[07:14:50] <Phandal> rootx74: man pages?
[07:16:28] *** Joins: Inline__ (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de)
[07:17:19] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[07:17:42] *** Joins: wovixo (~wovixo@128.104.205.49)
[07:18:47] *** Quits: Inline (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:19:11] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Client Quit)
[07:19:26] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[07:20:12] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[07:24:41] *** Joins: fe23 (~fe23@2409:8a34:466:6010:508a:50b0:3206:7113)
[07:29:56] <fizzie> s/sprintf/snprintf/, unfortunately.
[07:33:43] *** Quits: banc (~banc@217.138.195.27) (Ping timeout: 256 seconds)
[07:35:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[07:36:21] <fizzie> An `astrcatf` function ("reallocate and append formatted") could be written on top of (C99) `snprintf`, but it's one of those functions that would be prone to turning inherently O(n) operations to O(n^2) algorithms thanks to the need to repeatedly locate the end of the string. I prefer a `struct { char *data; size_t len, cap; }` kind of a thing instead.
[07:36:27] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4.1)
[07:36:35] <fizzie> On the other hand, `astrcatf` sounds like "astrocat", so there's that.
[07:36:54] *** Quits: HaMsTeRs (~Thunderbi@210.3.201.132) (Quit: HaMsTeRs)
[07:38:08] *** Joins: nicbk (~nicbk@user/nicbk)
[07:39:07] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[07:43:47] *** Joins: HaMsTeRs (~Thunderbi@210.3.201.132)
[07:43:55] *** Joins: pulse (~pulse@user/pulse)
[07:46:43] *** Joins: bbju (~bbju@103.144.149.53)
[07:47:20] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:47:23] <rootx74> what is kernel.c anyway
[07:47:26] <rootx74> i am confuse
[07:47:55] *** Quits: lainon (lainon@gateway/vpn/protonvpn/lainon) (Quit: WeeChat 3.4)
[07:48:29] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[07:51:49] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[07:53:33] *** Joins: Viewday1159 (~Viewday@user/viewday)
[07:54:40] *** Joins: banc (~banc@217.138.195.27)
[07:55:06] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[07:55:06] *** Viewday1159 is now known as Viewday115
[07:59:03] *** Quits: malloy (~jimery@116.30.221.173) (Ping timeout: 265 seconds)
[07:59:18] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[08:00:41] *** Joins: malloy (~jimery@116.30.221.173)
[08:01:40] *** Quits: llh (~UPP@user/llh) (Read error: Connection reset by peer)
[08:03:21] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 268 seconds)
[08:05:40] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[08:17:55] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 256 seconds)
[08:21:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[08:22:13] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[08:23:16] *** Joins: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[08:23:29] <Akawama[m]> I ran into this weird situation, please take a look https://dpaste.org/jnio#L
[08:23:33] *** Quits: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[08:24:06] <caze> int a[] = {0}; pretty weird
[08:24:36] *** Quits: Arthuria (~Arthuria@user/arthuria) (Ping timeout: 240 seconds)
[08:25:13] *** Quits: Phandal (~Phandal@user/phandal) (Quit: Phandal)
[08:26:24] <caze> Akawama[m]: https://ideone.com/jJs2zD
[08:26:39] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[08:27:32] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[08:28:32] <Akawama[m]> caze got it
[08:28:57] <Akawama[m]> How do I declare an array without its size, like when I'm expecting an input from user?
[08:29:06] <caze> You don't.
[08:29:31] <Akawama[m]> So I HAVE TO give it a size?
[08:29:54] <caze> If you want to declare an array, yes.
[08:30:12] <Akawama[m]> got it, thanks.
[08:30:29] <caze> Think about why you need an array.
[08:30:35] <caze> Or why you need to store.
[08:32:16] <caze> Akawama[m]: You could just do something like this: https://ideone.com/VYfONY
[08:33:30] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[08:41:27] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[08:41:30] <fossforus> an array declared like this arr[] is the same as *arr from what I can tell
[08:41:51] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[08:41:53] <fossforus> and arr[][4] is the same as (*arr)[4] iirc
[08:41:57] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[08:42:21] <caze> fossforus: No.
[08:42:50] <caze> fossforus: Both of those are incomplete.
[08:43:31] *** lukedashjr is now known as luke-jr
[08:45:54] <caze> fossforus: (and neither *arr nor (*arr)[4] are arrays)
[08:46:07] *** Quits: bbju (~bbju@103.144.149.53) (Quit: Client closed)
[08:46:07] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[08:46:13] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[08:46:59] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[08:47:00] <fossforus> oh right, [] syntax is required only if you initialize, and the compiler figures out the size
[08:47:05] *** Joins: ironman (~ironman@2405:201:1010:b026:5f00:b63f:4116:bd78)
[08:47:13] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[08:47:14] <fossforus> s/is required/only works
[08:48:08] <caze> Or if the array is defined somewhere else, and you only want a pointer to it.
[08:48:34] <fossforus> [] in a[] = {1,1,1,1,1} expands to [5] at compile time
[08:48:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:20b1:b36f:805d:9afa) (Quit: Quit)
[08:48:37] <caze> Which is presumably the context where you've seen *arr and (*arr)[4].
[08:48:41] <fossforus> caze: yeah that's where I was thinking of that "decaying"
[08:48:49] <fossforus> like in *argv[]
[08:51:55] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[08:55:25] *** Joins: Phandal (~user@user/phandal)
[08:56:14] *** Quits: HaMsTeRs (~Thunderbi@210.3.201.132) (Quit: HaMsTeRs)
[08:56:56] *** Joins: kdc (~kdc@196-210-1-81.dynamic.isadsl.co.za)
[08:57:15] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[09:00:15] *** Quits: rootx74 (~rootx74@user/rootx74) (Quit: Leaving)
[09:03:39] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:03:59] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-4ce8-d361-ccfb-76b2.fixed6.kpn.net)
[09:06:07] *** Quits: Phandal (~user@user/phandal) (Remote host closed the connection)
[09:07:47] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[09:08:06] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[09:08:29] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[09:08:35] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-4ce8-d361-ccfb-76b2.fixed6.kpn.net) (Ping timeout: 252 seconds)
[09:12:07] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[09:15:49] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[09:16:53] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 250 seconds)
[09:17:25] *** lukedashjr is now known as luke-jr
[09:19:58] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[09:24:13] *** Quits: alch (~alch@151.38.244.92) (Ping timeout: 256 seconds)
[09:26:00] *** Joins: alch (~alch@151.18.226.124)
[09:27:14] *** Quits: Briann (~Brianboru@177.12.221.56) (Remote host closed the connection)
[09:27:16] *** Joins: jkotra_ (~jkotra@122.176.148.190)
[09:27:58] *** Quits: jkotra (~jkotra@122.169.141.242) (Ping timeout: 260 seconds)
[09:30:02] *** Quits: Brewster (~Brewster@user/brewster) (Remote host closed the connection)
[09:30:39] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[09:30:53] *** Joins: Brewster (~Brewster@us.8bitshort.com)
[09:31:42] *** Quits: karthy (~karthy@103.219.206.35) (Ping timeout: 252 seconds)
[09:32:01] *** Joins: jkotra (~jkotra@122.176.152.121)
[09:32:23] *** Quits: jkotra_ (~jkotra@122.176.148.190) (Ping timeout: 256 seconds)
[09:32:36] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[09:40:15] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[09:43:49] *** Joins: nicbk (~nicbk@user/nicbk)
[09:46:17] *** Joins: ekathva (~ekathva@2001:999:50:a96:5456:875b:fc0e:ff69)
[09:50:57] *** Quits: dansan (~daniel@75.81.148.51) (Quit: The C preprocessor is a pathway to many abilities some consider to be unnatural.)
[09:51:37] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[09:53:31] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[09:53:41] *** Joins: Viewday1151 (~Viewday@user/viewday)
[09:55:11] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[09:55:11] *** Viewday1151 is now known as Viewday115
[09:55:21] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 252 seconds)
[09:55:46] *** lukedashjr is now known as luke-jr
[09:55:53] *** Quits: mudzap (~mudzap@2806:107e:f:64c7:ef6d:b82a:36c:d8f6) (Ping timeout: 250 seconds)
[09:58:18] <nitrix> ,decay
[09:58:19] <candide> Decaying implies permanence. Arrays do not "decay"; it is the expression that is converted, not the array. In most cases, an expression that has type "array of T" is converted to an expression with type "pointer to T" that points at the first element. See C11 6.3.2.1p3 for the exceptions.
[09:58:33] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:59:26] *** Joins: karakedi (~eAC53C340@user/karakedi)
[10:03:32] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:09:09] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[10:11:27] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[10:13:18] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[10:16:15] *** Quits: zer0x (~zer0x@42.113.144.44) (Ping timeout: 252 seconds)
[10:17:14] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[10:18:35] *** Joins: findingnemoeggfr (~findingne@h95-110-103-59.dyn.bashtel.ru)
[10:18:53] <findingnemoeggfr> lmfao encountered my first ever segfault today
[10:19:13] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[10:19:17] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[10:24:47] <dave0> did you get a nice fresh core file?
[10:29:33] <dave0> might have been a crusty stale old core file
[10:31:40] *** Joins: rootx74 (~root@108.61.89.107)
[10:31:55] *** Joins: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net)
[10:32:03] *** Joins: j0hn_mc_clane (~j0hn_mc_c@dD577050E.access.telenet.be)
[10:32:20] *** Quits: rootx74 (~root@108.61.89.107) (Changing host)
[10:32:20] *** Joins: rootx74 (~root@user/rootx74)
[10:36:39] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[10:37:59] <Pentode> nothing worse than a stale core. tastes like the rest of the plane.
[10:42:39] *** Quits: j0hn_mc_clane (~j0hn_mc_c@dD577050E.access.telenet.be) (Ping timeout: 256 seconds)
[10:45:23] *** Joins: seninha (~seninha@user/seninha)
[10:46:17] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Ping timeout: 240 seconds)
[10:47:47] *** Joins: dansan (~daniel@75.81.148.51)
[10:51:05] *** Quits: kurahaupo (~kurahaupo@pa49-182-118-127.pa.qld.optusnet.com.au) (Ping timeout: 268 seconds)
[10:51:38] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Remote host closed the connection)
[10:52:19] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[10:57:27] *** Quits: wand (~user@gateway/tor-sasl/wand) (Remote host closed the connection)
[11:00:06] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[11:00:47] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[11:02:53] *** Joins: wand (~user@gateway/tor-sasl/wand)
[11:04:02] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[11:05:45] *** Quits: Zeturic (~Orimendix@50.26.218.162) (Quit: Leaving)
[11:07:57] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 252 seconds)
[11:08:33] *** Joins: vysn (~vysn@user/vysn)
[11:08:35] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[11:10:24] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[11:14:40] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[11:16:40] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[11:19:29] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[11:19:36] *** lukedashjr is now known as luke-jr
[11:21:33] *** Quits: coruja (~coruja@user/coruja) (Quit: WeeChat 3.4.1)
[11:21:33] *** Quits: malloy (~jimery@116.30.221.173) (Ping timeout: 265 seconds)
[11:22:19] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[11:22:20] *** Joins: coruja (~coruja@user/coruja)
[11:23:22] *** Joins: malloy (~jimery@116.30.221.173)
[11:24:06] *** Joins: zer0x (~zer0x@42.113.144.44)
[11:29:55] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[11:30:20] *** Joins: amke[m] (~amkematri@2001:470:69fc:105::1:bdaf)
[11:31:25] *** Quits: ntwk (~ntwk@user/ntwk) (Ping timeout: 250 seconds)
[11:32:13] *** amke[m] is now known as predawn[m]
[11:34:12] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[11:35:00] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[11:35:21] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[11:36:00] *** Joins: Atque (~Atque@user/atque)
[11:36:37] *** Joins: predawn (~predawn@223.233.73.96)
[11:44:04] *** Joins: ntwk (~ntwk@user/ntwk)
[11:46:50] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[11:50:18] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:51:51] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:53:19] *** Joins: nelgau (~nelgau@cpe-75-82-216-42.socal.res.rr.com)
[11:53:53] *** Joins: Viewday1157 (~Viewday@user/viewday)
[11:54:56] *** Quits: predawn (~predawn@223.233.73.96) (Changing host)
[11:54:56] *** Joins: predawn (~predawn@user/predawn)
[11:55:24] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[11:55:24] *** Viewday1157 is now known as Viewday115
[11:56:37] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[12:01:24] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:03:14] *** Joins: eddybilley (~freddieti@217.119.232.174)
[12:07:20] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[12:10:36] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Ping timeout: 240 seconds)
[12:11:03] *** Joins: jellie (~luv_panda@user/jellie)
[12:14:42] *** Joins: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9)
[12:17:57] *** Joins: oxfuxxx (~oxfuxxx@45.152.181.204)
[12:19:17] *** Quits: predawn (~predawn@user/predawn) (Quit: Client closed)
[12:20:27] *** Joins: reset (~reset@user/reset)
[12:23:04] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[12:26:12] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Client Quit)
[12:27:49] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:28:59] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[12:32:35] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 256 seconds)
[12:34:19] *** Joins: aradesh (~aradesh@user/aradesh)
[12:35:57] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[12:38:29] *** Joins: VoidSync (~sync@user/voidsync)
[12:43:55] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[12:44:21] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[12:44:25] <Dean> hello
[12:45:01] *** Quits: noonien (~noonien@user/noonien) (Ping timeout: 240 seconds)
[12:45:15] <phaise> Cello
[12:45:52] *** Joins: mattil (~mattil@helsinki.portalify.com)
[12:49:15] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[12:56:51] *** Joins: bbju (~bbju@103.144.149.53)
[12:57:46] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[13:00:43] *** Quits: bbju (~bbju@103.144.149.53) (Client Quit)
[13:00:59] *** Joins: dsrt^ (~dsrt@96-67-120-105-static.hfc.comcastbusiness.net)
[13:02:14] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[13:02:26] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:03:11] *** Quits: findingnemoeggfr (~findingne@h95-110-103-59.dyn.bashtel.ru) (Ping timeout: 256 seconds)
[13:03:52] *** Joins: Enitin (~Enitin@82.180.145.226)
[13:05:50] *** Quits: baloona (~baloona@mail.baloona.de) (Remote host closed the connection)
[13:06:39] *** Joins: baloona (~baloona@mail.baloona.de)
[13:06:42] *** Joins: pulse (~pulse@user/pulse)
[13:10:31] <NRK> *victim found*
[13:10:31] <NRK> ,nohello
[13:10:32] <candide> stop saying hello, just ask what you gotta ask. https://nohello.net
[13:12:59] <no-n> what's wrong with saying hello
[13:13:05] <no-n> greeter does it
[13:14:11] *** Joins: zsoltiv__ (~zsoltiv@85-235-95-111.naracom.hu)
[13:14:21] *** Quits: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu) (Ping timeout: 250 seconds)
[13:17:09] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:17:25] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Remote host closed the connection)
[13:19:29] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[13:20:21] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[13:20:46] *** Joins: HaMsTeRs (~Thunderbi@210.3.201.132)
[13:21:41] *** Quits: alch (~alch@151.18.226.124) (Read error: Connection reset by peer)
[13:22:42] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[13:25:05] *** Joins: alch (~alch@151.68.224.254)
[13:26:55] *** Joins: trafficjam (~trafficja@203.176.111.34)
[13:27:25] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-219-172.wlan.tudelft.nl)
[13:28:07] *** Quits: oxfuxxx (~oxfuxxx@45.152.181.204) (Ping timeout: 256 seconds)
[13:29:06] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-219-172.wlan.tudelft.nl) (Client Quit)
[13:30:17] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[13:35:50] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[13:36:27] *** Quits: zer0x (~zer0x@42.113.144.44) (Ping timeout: 252 seconds)
[13:36:43] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[13:37:00] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[13:37:19] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[13:38:39] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[13:39:32] *** Joins: zer0x (~zer0x@42.113.144.44)
[13:39:56] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 245 seconds)
[13:41:21] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:41:42] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Quit: Leaving)
[13:41:57] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[13:42:34] *** Quits: wand (~user@gateway/tor-sasl/wand) (Remote host closed the connection)
[13:42:47] *** Joins: wand (~user@gateway/tor-sasl/wand)
[13:44:23] *** Joins: talin (~talin@c6973BF51.dhcp.as2116.net)
[13:47:02] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Remote host closed the connection)
[13:47:07] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:48:00] <talin> hello. why do some projects do e.g: struct something_st; typedef struct something_st something_t; ?
[13:48:33] <Wulf> talin: because some people don't like typing `struct' all the time.
[13:48:38] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[13:48:56] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[13:48:59] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:49:04] <talin> seawulf! you are still around
[13:49:09] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:49:15] <Wulf> talin: sometimes...
[13:50:47] *** Quits: trafficjam (~trafficja@203.176.111.34) (Ping timeout: 256 seconds)
[13:50:48] <ioxzev1z> talin, you shouldn't be using _t
[13:51:10] <Wulf> , _t
[13:51:21] <ioxzev1z> Also typedefing a struct so you don't have to use "struct" isn't a great idea
[13:51:26] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[13:51:28] <Wulf> candide: reserved?
[13:51:28] <candide> [#bash] The following words are recognized as reserved when unquoted and either the first word of a simple command or the third word of a case or for command: ! case do done elif else esac fi for function if in select then until while { } time [[ ]]
[13:51:43] <ioxzev1z> Wulf, _t is posix reserved iirc
[13:51:48] <sham1> At least POSIX reserves _t, yeah
[13:51:53] <ioxzev1z> anyway used by C too, e.g. uint32_t
[13:51:56] <sham1> Although WG21 also uses it
[13:52:03] <sham1> Err
[13:52:06] <talin> they seem to be using something like projectNameSource_t
[13:52:15] <sham1> They too, but more relevantly WG14
[13:52:18] <talin> in this code i'm looking at
[13:53:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:54:45] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[13:54:47] <dave0> talin: the _t stands for 'type' in case the reader forgets
[13:55:09] <talin> dave0: i see
[13:55:28] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[13:55:40] <dave0> talin: it's pretty silly, because you can tell if something is a type from the syntax
[13:55:52] <dave0> xxx variable;     xxx is a type
[13:56:26] <dave0> you are declaring a variable `variable` of type `xxx`
[13:57:41] <sham1> Well I'd say that _t does make sense because you wouldn't want to collide with things
[13:57:44] <sham1> With "user types"
[13:57:49] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[13:58:03] *** Joins: cart_ (~cart@185.191.86.4)
[13:58:26] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[13:58:34] <ioxzev1z> sham1, that's why its there
[13:58:50] <ioxzev1z> Along with __
[13:59:54] <ioxzev1z> Uh, _
[14:00:38] <dave0> i don't have strong feelings about typedef .. i pretty much use it just to save typing :-p
[14:00:58] <ioxzev1z> imo typedefs are good with function pointers
[14:01:20] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-219-172.wlan.tudelft.nl)
[14:02:56] *** Joins: kurahaupo (~kurahaupo@pa49-182-118-127.pa.qld.optusnet.com.au)
[14:03:32] *** Joins: azed (~azed@197.19.177.23)
[14:05:57] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-51-199.pa.qld.optusnet.com.au)
[14:07:14] *** Quits: kurahaupo (~kurahaupo@pa49-182-118-127.pa.qld.optusnet.com.au) (Ping timeout: 252 seconds)
[14:07:22] <sham1> typedef return_type (function_type_name)(arg_type_1 arg_1, arg_type_2 arg_2); function_type_name *function_pointer;
[14:08:45] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[14:10:50] *** Joins: pulse (~pulse@user/pulse)
[14:10:57] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[14:11:39] *** Quits: azed (~azed@197.19.177.23) (Ping timeout: 252 seconds)
[14:13:17] *** Quits: HaMsTeRs (~Thunderbi@210.3.201.132) (Ping timeout: 240 seconds)
[14:15:52] *** Quits: highrate (~presonic@user/highrate) (Read error: Connection reset by peer)
[14:16:56] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[14:17:38] *** Joins: kurahaupo (~kurahaupo@pa49-197-14-161.pa.qld.optusnet.com.au)
[14:19:20] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-51-199.pa.qld.optusnet.com.au) (Ping timeout: 252 seconds)
[14:20:39] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[14:21:02] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 260 seconds)
[14:22:35] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[14:23:29] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[14:24:47] *** Joins: HaMsTeRs (~Thunderbi@210.3.201.132)
[14:25:32] *** Joins: jim (~jim@about/linux/staff/jim)
[14:25:43] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[14:26:03] *** Parts: jim (~jim@about/linux/staff/jim) (Leaving)
[14:27:37] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[14:28:05] *** Joins: Everything (~Everythin@37.115.210.35)
[14:28:49] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[14:28:57] *** Joins: djph (~dpurgert@cpe-107-10-235-152.neo.res.rr.com)
[14:28:57] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[14:29:26] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 260 seconds)
[14:31:35] *** Quits: HaMsTeRs (~Thunderbi@210.3.201.132) (Quit: HaMsTeRs)
[14:31:49] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[14:32:23] *** Joins: anandhkumares (~anandhkum@43.229.88.112)
[14:32:28] <anandhkumares> hi
[14:33:51] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[14:33:56] *** Joins: luke-jr- (~luke-jr@user/luke-jr)
[14:34:06] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[14:35:00] <anandhkumares> hello, i liked to learn C
[14:35:08] <anandhkumares> can you guys suggest some resources
[14:35:31] *** luke-jr- is now known as luke-jr
[14:36:22] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[14:36:30] *** anandhkumares is now known as anandh
[14:36:47] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Ping timeout: 260 seconds)
[14:36:48] *** Joins: ircuz (~ircuz@5.2.79.79)
[14:36:50] <ircuz> hai
[14:37:23] <dave0> anandh: from the topic... http://www.iso-9899.info/wiki/Books
[14:37:32] <ircuz> anandh u indian?
[14:40:36] *** Quits: anandh (~anandhkum@43.229.88.112) (Quit: leaving)
[14:41:13] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[14:41:53] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 252 seconds)
[14:43:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[14:43:56] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[14:43:58] *** Joins: findingnemoeggfr (~findingne@h95-110-103-59.dyn.bashtel.ru)
[14:44:43] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 260 seconds)
[14:45:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[14:45:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:45:34] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[14:47:08] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[14:49:28] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[14:49:45] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[14:51:07] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[14:51:22] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[14:55:01] *** Quits: manx (xuew@p200300e18f3aa800022215fffe03cf97.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[14:55:40] *** Joins: shivesh (~shivesh@user/shivesh)
[14:55:46] *** Joins: manx (xuew@p200300e18f16de00022215fffe03cf97.dip0.t-ipconnect.de)
[14:59:28] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:01:25] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[15:01:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:01:41] *** Joins: predawn (~predawn@user/predawn)
[15:01:59] *** Quits: findingnemoeggfr (~findingne@h95-110-103-59.dyn.bashtel.ru) (Ping timeout: 260 seconds)
[15:02:11] *** Quits: predawn (~predawn@user/predawn) (Client Quit)
[15:15:37] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[15:15:52] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[15:16:23] *** Quits: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833) (Remote host closed the connection)
[15:17:54] *** Joins: unknow (~i.am@user/marlboro)
[15:18:03] *** Quits: fengdaolong (~fengdaolo@171.43.210.166) (Ping timeout: 250 seconds)
[15:22:12] *** Joins: bbju (~bbju@103.144.149.53)
[15:23:18] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:25:25] *** Quits: CCCG2022 (~dell@120.245.30.14) (Quit: Leaving.)
[15:27:06] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[15:28:25] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[15:30:04] *** Quits: Elladan (~elladan@user/elladan) (Quit: ZNC - http://znc.in)
[15:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:30:59] *** Joins: csrf (~csrf@user/csrf)
[15:31:31] *** Joins: cassepipe (~cassepipe@62.210.32.9)
[15:32:42] <cassepipe> Hi all ! From what I have read about the use of sigaction, I need one struct sigaction per signal type is that right ? Or can one struct handle various signals ?
[15:32:56] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[15:33:00] *** Joins: Elladan (~elladan@user/elladan)
[15:33:55] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[15:34:23] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[15:34:37] *** Quits: ncrowl (~ncrowl@83-233-96-165.cust.bredband2.com) (Ping timeout: 240 seconds)
[15:34:59] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:36:09] *** Joins: findingnemoeggfr (~findingne@h95-110-103-59.dyn.bashtel.ru)
[15:36:33] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[15:36:51] *** Joins: ncrowl (~ncrowl@83-233-96-181.cust.bredband2.com)
[15:37:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[15:39:46] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[15:40:29] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 256 seconds)
[15:40:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:40:50] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[15:42:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[15:46:18] *** Quits: findingnemoeggfr (~findingne@h95-110-103-59.dyn.bashtel.ru) (Remote host closed the connection)
[15:46:40] *** Joins: findingnemoeggfr (~findingne@h95-110-103-59.dyn.bashtel.ru)
[15:49:21] *** Joins: Enitin (~Enitin@82.180.145.227)
[15:49:22] <dave0> cassepipe: one struct
[15:50:17] *** Joins: noonien (~noonien@user/noonien)
[15:50:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:51:41] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[15:54:24] *** Quits: Viewday115 (~Viewday@user/viewday) (Quit: Ping timeout (120 seconds))
[15:54:37] *** Joins: Viewday115 (~Viewday@user/viewday)
[15:55:04] <cassepipe> dave0: Ha my bad. SO how would that work ? Can I just call sigaction repeatedly on different signals with the same struct ?
[15:55:45] <cassepipe> Also the man 2 sigaction says : A child created via fork(2) inherits a copy of its parent's signal dispositions.  During an execve(2), the dispositions of handled signals are reset to  the default; the dispositions of ignored signals are left unchanged.
[15:56:14] <cassepipe> How can I ignore a signal but avoid the children ignore it too ?
[15:56:26] *** Joins: jellie (~luv_panda@user/jellie)
[15:56:44] <cassepipe> I thought about making a dummy function but it will print me an ugly \^ which I would like to avoid
[15:56:54] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[15:57:06] <dave0> i can't make the robot catch the signal
[15:57:41] <cassepipe> Sorry do I make sense ? I am trying to reproduce bash's behaviour in my toy shell
[15:57:42] <dave0> ,cc void segvhandler(int signo){ write(2,"sigsegv",7); } void inthandler(int signo){ write(2,"interrupt",9); } int main(void){ struct sigaction sa={0}; sigemptyset(&sa.sa_mask); sa.sa_handler=segvhandler; if(sigaction(SIGSEGV,&sa,0)==-1)perror("sigsegv"); sa.sa_handler=inthandler; if(sigaction(SIGINT,&sa,0)==-1)perror("sigint"); raise(SIGINT); raise(SIGSEGV); }
[15:57:45] <candide> dave0:  Program received signal SIGINT, Interrupt in __pthread_kill_implementation () called by main () at statement: raise(SIGINT);
[15:59:26] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[15:59:39] <dave0> cassepipe: to stop the children using the parent signal handler, after you fork(), in the child, reset the signal to default SIG_DFL
[16:03:02] <dave0> cassepipe: use SIG_IGN in the parent, but after you fork, but before you execve, reset the signal to SIG_DFL
[16:03:05] <cassepipe> dave0: Thanks for that snippet get it now
[16:03:48] <dave0> cassepipe: i'm pretty sure it will work for you, the robot is different, it might be because it runs the code in the debugger
[16:03:51] <cassepipe> dave0: I was wondering if there was some smart trick to avoid that but yes it seems like the obvious way to do it thanks
[16:04:23] <dave0> signals are far from obvious :-)
[16:04:31] *** Quits: yggdrasil (~yggdrasil@67-0-0-186.albq.qwest.net) (Ping timeout: 256 seconds)
[16:04:32] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:05:14] <dave0> even today, where linux has taken over, signals still aren't portable
[16:05:19] <fizzie> ,cc void handler(int signo){ write(1, "we get signal!", 14); } gdb("handle SIGUSR1 nostop noprint pass"); struct sigaction sa = { .sa_handler = handler }; sigemptyset(&sa.sa_mask); sigaction(SIGUSR1, &sa, 0); raise(SIGUSR1);
[16:05:22] <candide> fizzie:  Signal        Stop   Print   Pass to program   Description SIGUSR1       No   No   Yes      User defined signal 1   we get signal!
[16:05:27] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:05:49] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[16:05:53] <fizzie> Slightly noisy, couldn't figure out a way to change signal disposition in gdb without it printing the deets.
[16:06:00] *** Joins: yggdrasil (~yggdrasil@67-0-79-64.albq.qwest.net)
[16:06:09] <fizzie> (And I think SIGINT is slightly special for gdb.)
[16:06:37] <dave0> thanks fizzie :-)
[16:08:55] <djph> fizzie: main screen turn on
[16:09:19] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:09:23] <fizzie> ,cc void handler(int signo){ write(1, "we get signal!", 14); } struct sigaction sa = { .sa_handler = handler }; sigemptyset(&sa.sa_mask); sigaction(SIGWINCH, &sa, 0); raise(SIGWINCH); // looks like a few are quiet by default
[16:09:25] <candide> fizzie: we get signal!
[16:10:57] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[16:13:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 240 seconds)
[16:13:57] <cassepipe> You wizards
[16:14:15] *** Joins: angelacrust (~angelacru@223.233.73.96)
[16:14:18] <cassepipe> One more question : Do I need to set sa_flags to 0 ?
[16:14:46] <cassepipe> Else it's garbage right and could be anything right ?
[16:16:14] <dave0> play it safe and set everything to 0 ..    struct sigaction sa = {0};    or memset if you prefer
[16:16:23] *** Joins: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833)
[16:16:49] <dave0> fizzie's initialization also sets sa_flags to 0 as a side effect of initializing sa_handler
[16:16:55] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[16:17:12] <dave0> or even    static struct sigaction sa;
[16:17:31] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:18:14] *** Joins: xbkkd (~F0@user/xbkkd)
[16:18:43] <cassepipe> dave0: All good ideas thanks
[16:19:57] <angelacrust> https://bpa.st/S2MQ is resulting in a `segmentation fault` error at max length (45).
[16:21:19] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:22:05] <avar> I can't believe that clang/gcc will get on your case about misleading indentation, but then don't spot cases where you accidentally end a brace-less "if" body with "," instead of ";", which if the next (unindented!) line is a variable assignment will be valid syntax...
[16:22:17] *** Quits: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833) (Quit: Leaving)
[16:22:41] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[16:28:19] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 260 seconds)
[16:30:01] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:30:21] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[16:30:36] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:31:00] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:31:06] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[16:31:32] <dave0> for a while gcc would suggest i add a space before the semi colon in a for loop..    for(a = 0; str[a] != 0; a++) <insert space here> ;
[16:32:41] <dave0> that's a real help while it obliterates some other code because it detects a possible undefined behaviour
[16:32:49] <dave0> at least the whitespace is correct
[16:33:57] *** Joins: jellie (~luv_panda@user/jellie)
[16:34:07] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[16:34:36] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[16:35:06] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[16:35:31] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Remote host closed the connection)
[16:35:34] *** Quits: bbju (~bbju@103.144.149.53) (Quit: Client closed)
[16:35:51] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[16:36:22] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[16:36:23] <dave0> angelacrust: it's a bit over the place... what is the    struct node    ?
[16:37:01] <angelacrust>  -- word[LENGTH + 1] and struct node *next
[16:37:25] <angelacrust> Increasing the buffer size by 1 helps, but that seems buggy...
[16:37:34] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[16:38:35] *** Quits: noonien (~noonien@user/noonien) (Ping timeout: 260 seconds)
[16:38:57] <dave0> your list handling is suspect
[16:39:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 252 seconds)
[16:39:11] *** Joins: Klinda (~superleag@user/klinda)
[16:39:19] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-26-233.pa.qld.optusnet.com.au)
[16:39:40] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[16:39:56] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Remote host closed the connection)
[16:40:04] <dave0> it looks like you have added some code for a possible hash table (`bucket`) but haven't implemented it yet
[16:40:10] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[16:40:13] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[16:40:44] <dave0> i think you should first make it work with a single linked list, then once that code is working, add in the hash table
[16:40:46] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Read error: Connection reset by peer)
[16:41:04] *** Joins: novns (~novns@user/novns)
[16:41:24] <angelacrust> it's loading the words correctly only if I increase the buffer size by 1...
[16:41:24] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[16:41:26] <dave0> oh hang on, i didn't see    table[bucket] = list;
[16:41:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:42:20] <dave0> angelacrust: does it correctly print the list of words as you read the file?
[16:42:24] <angelacrust> yep
[16:42:44] <angelacrust> it's taking 4.958 seconds to load a dictionary of 150k words
[16:43:22] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[16:43:40] <angelacrust> I think getchar() can make it more efficient but idk
[16:43:49] *** Quits: kurahaupo (~kurahaupo@pa49-197-14-161.pa.qld.optusnet.com.au) (Ping timeout: 268 seconds)
[16:44:14] <dave0> your createNode looks correct
[16:44:29] <dave0> but lines 32-41 look suspect
[16:45:10] <dave0> angelacrust: what is your definition of   table[]
[16:45:13] <angelacrust> It's insertion at the beginning of the linked list
[16:45:21] <angelacrust> `node *table[N]` where N = 26
[16:45:56] <dave0> okay
[16:46:31] <dave0> replace lines 32-41 with    table[bucket] = createNode(table[bucket], buffer);
[16:46:47] *** Joins: noonien (~noonien@user/noonien)
[16:46:56] <angelacrust> oh okay
[16:47:01] *** Quits: ircuz (~ircuz@5.2.79.79) (Quit: Lost terminal)
[16:47:04] <dave0> you do not have to allocate a node for `list`
[16:47:10] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:47:38] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[16:47:46] <dave0> okay one more thing
[16:47:54] <angelacrust> should I remove the malloc for `list`?
[16:48:01] <dave0> yes
[16:48:20] <dave0> once you made the change, post the new code please
[16:48:24] <angelacrust> okay
[16:49:14] <angelacrust> https://bpa.st/TIZQ
[16:49:53] <dave0> okay looks good so far
[16:50:11] <angelacrust> hm
[16:50:22] <dave0> add line 23:    if(bucket < 0 || bucket >= N) { printf("bucket out of range! %d ", bucket); exit(1); }
[16:50:42] <angelacrust> oh it's not going to happen though
[16:50:51] <dave0> humor me :-)
[16:51:18] *** Quits: noonien (~noonien@user/noonien) (Ping timeout: 260 seconds)
[16:51:23] <angelacrust> bucket is always less than N (in this case)
[16:51:35] *** Quits: zer0x (~zer0x@42.113.144.44) (Remote host closed the connection)
[16:51:56] <dave0> trust me :-)
[16:52:03] <angelacrust> okay
[16:52:15] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-26-233.pa.qld.optusnet.com.au) (Ping timeout: 252 seconds)
[16:52:28] <dave0> you can put in a comment "dave0 insisted i put this here.. what a douche"
[16:52:37] <dave0> or similar <swear>
[16:53:05] <angelacrust> lol
[16:54:19] <angelacrust> why did we remove `list` though? unnecessary allocation?
[16:54:27] *** Joins: zer0x (~zer0x@42.113.144.44)
[16:54:47] <dave0> yes
[16:54:53] <angelacrust> got it
[16:55:08] <angelacrust> and why do I have to increase the buffer size by 1?
[16:55:29] <dave0> i don't think you do. i think it sohuld be   char buffer[LENGTH + 1];
[16:55:59] <angelacrust> the program fails at the longest word in the dictionary `pneumonoultramicroscopicsilicovolcanoconiosis`- length 45
[16:56:06] <dave0> try making that change and see if it works
[16:56:21] <dave0> paste the latest code
[16:56:25] <angelacrust> okay
[16:56:37] <angelacrust> https://bpa.st/TIZQ is already the latest code
[16:56:46] <dave0> okay i'll reload
[16:56:59] <dave0> it doesn't have my test
[16:57:03] <angelacrust> okay
[16:58:04] <angelacrust> ill remove `first_letter` too, it's not used anywhere in the program
[16:58:21] <dave0> ok
[16:59:02] *** Joins: constxd (~brad@142.134.78.128)
[16:59:07] <constxd> kings!
[16:59:07] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:59:28] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:59:55] *** Joins: kubrickdave_ (~kubrickda@80-121-90-104.adsl.highway.telekom.at)
[16:59:56] *** Quits: kubrickdave (~kubrickda@80-121-15-46.adsl.highway.telekom.at) (Ping timeout: 245 seconds)
[16:59:57] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[17:00:24] <dave0> angelacrust: okay i just figured out why   char buffer[LENGTH + 2];    works, even though it looks suspect
[17:00:36] <angelacrust> yeah ikr
[17:01:01] <dave0> angelacrust: where else is LENGTH used?
[17:01:08] <angelacrust> in the createNode function
[17:01:12] <angelacrust> (LENGTH + 1)
[17:01:21] <dave0> angelacrust: and the   struct node   ?
[17:01:27] <angelacrust> yes
[17:01:31] <dave0> where else?
[17:02:08] <angelacrust> that's it ig
[17:03:00] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[17:03:01] <angelacrust> maybe it's the newline character that's creating this bug?
[17:03:51] <dave0> it's more of a style thing, but rather than     #define LENGTH 45 char word[LENGTH + 1]; char buffer[LENGTH + 1]; char word_name[LENGTH + 1];    you    #define LENGTH 46 char word[LENGTH]; char buffer[LENGTH]; char word_name[LENGTH];
[17:04:14] <dave0> it is the newline yes
[17:04:16] <angelacrust> `length + 1 (\0) + '\n'` for the longest word
[17:04:18] <angelacrust> Yeah
[17:04:28] *** Joins: fengdaolong (~fengdaolo@2409:8a4d:c46:9901::4d3)
[17:04:35] <dave0> roll it into the define
[17:04:45] <dave0> #define LENGTH (45 + 1)
[17:04:59] <dave0> but even    #define LENGTH (45 + 2)    to fix the newline bug
[17:05:16] <angelacrust> okay
[17:05:39] *** Joins: strajder (~strajder@user/strajder)
[17:06:20] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[17:06:20] <dave0> the problem is, you have a 45 letter word, that you read with fgets() ... fgets keeps the newline, and always adds a \0 ... so the buffer must be    (45 + 1 + 1)    45 for the word, 1 for the \n, 1 for the \0
[17:06:32] <angelacrust> yeah...
[17:06:39] <angelacrust> should I use getchar() instead?
[17:06:40] <dave0> but when i saw that i thought aha bug! because   createNode   only accepts  45 + 1
[17:06:49] <dave0> no no fgets is fine
[17:07:07] <angelacrust> yep
[17:07:32] <dave0> when you remove the newline with    strcspn    now the string is indeed 45+1
[17:07:41] <angelacrust> yeah
[17:07:43] <dave0> but it is terribly tricky
[17:08:02] <dave0> you see a buffer of 45+2 being stuffed into a word of 45+1
[17:08:22] <angelacrust> yeah
[17:08:36] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[17:08:41] <dave0> be a little bit conservative and increase LENGTH
[17:08:45] <angelacrust> that's why we're storing the word after the strcspn
[17:08:47] *** Parts: danieln (~danieln@erebor.danieln.de) (WeeChat 3.2)
[17:08:56] <angelacrust> in the createNode function?
[17:08:59] <dave0> yes you remove the \n
[17:09:13] <dave0> but the code is not obvious at first glance
[17:09:33] <dave0> angelacrust: make everything [LENGTH] but increase the define to    #define LENGTH 60
[17:09:58] <angelacrust> gotcha
[17:10:15] <dave0> put a comment if you want     #define LENGTH 60 /* this is conservative because the longest word is 45 characters. there is a bit of slop here for the newline */
[17:10:48] <angelacrust> or 47? that way, we'll have saved some memory too
[17:11:13] <dave0> that would work
[17:11:19] <dave0> i would use 60
[17:11:27] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:11:31] <dave0> i would really use 100 becuse even 45 bytes is nothing
[17:11:35] <dave0> 55
[17:11:40] <dave0> whatever 100-45 is
[17:11:55] <angelacrust> hm
[17:12:01] <dave0> just because 100 is a nice round number
[17:12:10] <dave0> i can't stop you from using 47 :-p
[17:12:12] *** Quits: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Remote host closed the connection)
[17:12:18] <angelacrust> hehe:)
[17:12:39] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[17:13:38] <dave0> i can't make you put in the test for bucket either, but you really should
[17:14:07] <angelacrust> I did put in the test you shared earlier
[17:14:12] <dave0> cool
[17:14:18] <angelacrust> it's a good habit to be safe ig
[17:14:29] <dave0> yep it will never hurt
[17:14:54] *** Joins: kurahaupo (~kurahaupo@pa49-197-154-50.pa.qld.optusnet.com.au)
[17:14:57] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:15:19] <dave0> and the code is fragile.. if you get input that starts with a capital letter for example
[17:15:25] <dave0> or a number
[17:17:21] <dave0> any luck?
[17:17:27] *** Quits: findingnemoeggfr (~findingne@h95-110-103-59.dyn.bashtel.ru) (Ping timeout: 250 seconds)
[17:18:10] <angelacrust> every word appears in lowercase (even, for simplicity, proper nouns and acronyms) in the dictionary. From top to bottom, the file is sorted lexicographically, with only one word per line (each of which ends with \n). No word is longer than 45 characters, and no word appears more than once.
[17:18:11] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Ping timeout: 256 seconds)
[17:18:37] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 240 seconds)
[17:19:18] <angelacrust> that reduces the number of constraints in this problem
[17:20:29] <dave0> fair enough
[17:22:14] *** Quits: ekathva (~ekathva@2001:999:50:a96:5456:875b:fc0e:ff69) (Remote host closed the connection)
[17:22:17] *** Quits: alch (~alch@151.68.224.254) (Read error: Connection reset by peer)
[17:22:23] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[17:23:21] <dave0> hopefully it works?
[17:23:38] <angelacrust> yes, thank you so much:)
[17:24:22] <dave0> no worries :-)
[17:25:35] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:26:27] *** Joins: alch (~alch@151.82.236.239)
[17:26:52] *** Joins: noonien (~noonien@user/noonien)
[17:27:25] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[17:28:37] *** Joins: ekathva (~ekathva@2001:999:409:7be:593e:c5d:6f6:ba5e)
[17:28:59] *** Quits: Enitin (~Enitin@82.180.145.227) (Ping timeout: 260 seconds)
[17:29:06] *** Joins: Arthuria (~Arthuria@user/arthuria)
[17:29:07] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[17:30:23] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[17:31:01] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[17:31:45] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:e9e8:35a5:7e6b:da91)
[17:33:21] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-155-154.pa.qld.optusnet.com.au)
[17:33:42] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[17:33:46] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 268 seconds)
[17:34:31] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:35:57] *** Joins: jellie (~luv_panda@user/jellie)
[17:35:59] *** Quits: kurahaupo (~kurahaupo@pa49-197-154-50.pa.qld.optusnet.com.au) (Ping timeout: 260 seconds)
[17:38:07] *** Quits: xbkkd (~F0@user/xbkkd) (Quit:  )
[17:41:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[17:41:22] *** Quits: angelacrust (~angelacru@223.233.73.96) (Quit: Client closed)
[17:42:49] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:46:13] *** Joins: Senicar0 (~Senicar@gateway/tor-sasl/senicar)
[17:46:51] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[17:47:24] *** Quits: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[17:47:32] *** Joins: CodePoint_ (~CodePoint@2607:fb90:25df:e3d4:20e4:9377:5749:e49a)
[17:47:41] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[17:48:15] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Ping timeout: 240 seconds)
[17:48:16] *** Senicar0 is now known as Senicar
[17:48:28] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:49:59] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 260 seconds)
[17:51:31] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:54:21] *** Joins: Viewday1157 (~Viewday@user/viewday)
[17:54:22] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[17:54:36] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 240 seconds)
[17:54:36] *** Viewday1157 is now known as Viewday115
[17:54:39] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:55:11] *** Joins: CodePoint__ (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[17:55:25] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[17:55:47] *** Quits: CodePoint_ (~CodePoint@2607:fb90:25df:e3d4:20e4:9377:5749:e49a) (Ping timeout: 250 seconds)
[17:58:23] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 260 seconds)
[17:58:35] *** Joins: Thymo (~Thymo@88-159-60-197.fixed.kpn.net)
[17:59:05] *** Quits: Arthuria (~Arthuria@user/arthuria) (Killed (NickServ (GHOST command used by guest2795)))
[17:59:05] *** Joins: Arthuria (~Arthuria@user/arthuria)
[17:59:29] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[18:01:39] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 260 seconds)
[18:02:07] *** Joins: bebyx (~Thunderbi@user/bebyx)
[18:03:51] *** Quits: Arthuria (~Arthuria@user/arthuria) (Ping timeout: 256 seconds)
[18:03:59] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[18:04:57] *** Quits: CodePoint__ (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[18:05:15] *** Joins: mcleuder_ (~mcleuder@gateway/tor-sasl/mcleuder)
[18:05:27] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:07:41] *** PublicWiFi is now known as McDonaldsWiFi
[18:08:30] *** Joins: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[18:08:35] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Ping timeout: 240 seconds)
[18:09:35] *** Quits: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[18:10:13] *** Joins: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[18:10:15] *** Quits: mcleuder_ (~mcleuder@gateway/tor-sasl/mcleuder) (Ping timeout: 240 seconds)
[18:10:19] *** Quits: Thymo (~Thymo@88-159-60-197.fixed.kpn.net) (Ping timeout: 250 seconds)
[18:10:33] *** Quits: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[18:12:21] *** Quits: Alhazred (~Alhazred@45.129.56.151) (Ping timeout: 256 seconds)
[18:12:27] *** Joins: Thymo (~Thymo@88-159-60-197.fixed.kpn.net)
[18:12:44] *** Joins: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[18:13:22] *** Quits: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[18:15:06] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[18:16:40] *** Quits: ironman (~ironman@2405:201:1010:b026:5f00:b63f:4116:bd78) (Quit: Leaving)
[18:18:43] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[18:20:29] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[18:24:38] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[18:24:42] *** Joins: kts (~kts@103.73.237.196)
[18:25:13] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:25:37] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[18:27:22] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:27:22] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:27:22] *** Joins: wroathe (~wroathe@user/wroathe)
[18:31:31] *** Quits: cyphics (~cyphix@user/cyphics) (Quit: WeeChat 3.0)
[18:31:43] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[18:31:57] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:34:05] *** Joins: Thymo_ (~Thymo@88-159-60-197.fixed.kpn.net)
[18:34:12] *** Quits: Thymo (~Thymo@88-159-60-197.fixed.kpn.net) (Ping timeout: 240 seconds)
[18:34:23] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[18:34:35] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[18:34:51] *** Quits: p0g0__ (~p0g0@user/p0g0) (Read error: Connection reset by peer)
[18:35:11] *** Joins: p0g0__ (~p0g0@user/p0g0)
[18:35:30] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[18:35:55] *** Joins: Guest91 (~Guest91@42.107.76.15)
[18:38:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:39:13] *** Quits: Thymo_ (~Thymo@88-159-60-197.fixed.kpn.net) (Ping timeout: 256 seconds)
[18:40:44] *** Joins: Alhazred (~Alhazred@86.106.74.39)
[18:41:11] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:41:19] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[18:42:27] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[18:43:11] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (Ping timeout: 256 seconds)
[18:46:01] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Ping timeout: 256 seconds)
[18:46:27] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:47:06] *** Joins: Thymo (~Thymo@88-159-60-197.fixed.kpn.net)
[18:47:40] *** Joins: zacts (~zacts@user/zacts)
[18:48:14] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[18:48:35] *** Joins: kurahaupo (~kurahaupo@pa49-182-30-67.pa.qld.optusnet.com.au)
[18:49:56] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[18:51:03] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-155-154.pa.qld.optusnet.com.au) (Ping timeout: 252 seconds)
[18:53:01] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Quit: leaving)
[18:53:27] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:53:34] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[18:54:28] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:06:37] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:07:06] <Guest91> ded chat
[19:07:32] *** Parts: Guest91 (~Guest91@42.107.76.15) ()
[19:07:56] *** Joins: Guest53 (~Guest53@42.107.76.15)
[19:08:02] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.156)
[19:11:00] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[19:11:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:12:05] *** Joins: angelacrust (~angelacru@223.233.73.96)
[19:12:39] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.156) (Ping timeout: 256 seconds)
[19:12:40] <angelacrust> I think the speller is working correctly, but how do I make it fast?
[19:12:41] <angelacrust> https://bpa.st/3WYA
[19:14:15] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[19:14:36] <djph> angelacrust: stab in the dark - are you sorting / making hte lists unique?
[19:16:03] <angelacrust> I do think the lists are unique because the words in dictionary are unique
[19:16:59] <clarity> How's your lookup implemented?
[19:17:13] <djph> angelacrust: sorry, I meant the "list" of 900k words in the input text.
[19:19:19] <angelacrust> https://bpa.st/BXKQ
[19:19:39] <clarity> Eugh, a linked list
[19:19:43] <clarity> Yea, that is going to be slow
[19:19:55] <clarity> Oh wait
[19:19:56] <clarity> Hmm
[19:20:00] <clarity> Sorry I read it too quickly :)
[19:20:01] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[19:20:15] <angelacrust> djph, I don't think there's any logic to detect duplicates so far
[19:20:43] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[19:21:15] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[19:22:01] <clarity> I'm not convinced detecting dupes can generally be any faster than checking whether key is in dictionary
[19:22:07] <clarity> It's pretty much the same thing, isn't it?
[19:22:21] <clarity> Except in the latter case you have a dynamic dictionary of words encountered so far
[19:23:27] <angelacrust> the problem is that all the words starting with a given letter have only one node in the hash table, so it's really traversing the entire list
[19:23:34] <clarity> Yea
[19:23:40] <clarity> So make your table bigger and hash function better
[19:24:23] *** Joins: Enitin (~Enitin@82.180.145.226)
[19:24:25] <angelacrust> table[26 * 26] then?
[19:25:01] <clarity> Ideally size of hash table equals number of keys.  But that's only if you have no hash collisions, in practice you want table larger than the number of keys
[19:25:07] <clarity> (Obvious space-time tradeoff)
[19:25:19] *** Joins: mekeor[m] (~mekeormat@2001:470:69fc:105::17e4)
[19:25:31] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[19:25:32] <angelacrust> Yep
[19:26:36] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:27:01] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[19:27:29] <djph> i'm bad at spellcheck - I just make a pipeline that ends up using comm :|
[19:27:29] <mekeor[m]> why can i write into an array after freeing its dynamically allocated memory without my OS complaining during run-time? http://ix.io/3TgI/c
[19:27:49] <clarity> mekeor[m]: Why not?
[19:28:13] <clarity> After freeing, you're not supposed to touch the memory.  If you do, whatever might happen.
[19:28:30] <clarity> (It depends on how your allocator is implemented)
[19:28:53] <mekeor[m]> clarity: i am using gcc on mac os. how is my allocator implemented? o.O
[19:29:05] <clarity> Idk, ask apple for their source code
[19:29:10] <NRK> gcc doesn't implement your allocator
[19:29:12] <NRK> your libc does
[19:29:17] <clarity> Or reverse-engineer your libc.. yea
[19:29:31] <mekeor[m]> and on linux?
[19:29:35] <mekeor[m]> glibc?
[19:29:47] <NRK> .oO( unless gcc has __builtin_malloc... )
[19:30:19] <mekeor[m]> i thought OS take care that processes don't read and write each others memory
[19:30:21] *** Quits: cassepipe (~cassepipe@62.210.32.9) (Remote host closed the connection)
[19:30:33] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Quit: Leaving)
[19:30:33] <NRK> https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html it does, kek.
[19:30:40] <clarity> mekeor[m]: https://sourceware.org/git/?p=glibc.git;a=tree;f=malloc;h=a49bd3c50cbefe8e1b3237dffeca4dfffa2d6f20;hb=HEAD
[19:30:41] <candide> Title of clarity's link: sourceware.org Git - glibc.git/tree - malloc/
[19:30:53] <NRK> mekeor: OS doesn't hand out memory in bytes
[19:31:09] <NRK> it hands it out in chunks. typically 4KiB.
[19:31:15] <clarity> Of course there are other libcs out there
[19:31:53] <NRK> your allocator might reuse that chunk, instead of *actually* freeing when you call free()
[19:31:53] <mekeor[m]> NRK: so the pointer was probably still pointing within my process's memory space
[19:32:11] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Ping timeout: 260 seconds)
[19:32:47] <NRK> probably, asking OS for memory is time expensive. so a lot of allocators keep memory to themselvs and give it back to you on next malloc().
[19:33:07] *** Quits: Alhazred (~Alhazred@86.106.74.39) (Ping timeout: 260 seconds)
[19:33:38] <NRK> from the OS's pov, you're just writing into page that it gave to you. nothing wrong.
[19:34:11] <NRK> there are tools that can detect this tho, such as address sanitizer
[19:35:11] <mekeor[m]> but i can't just `int *i = null; while (true) *i++ = 0;`, right?
[19:35:16] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[19:35:21] <NRK> ,cc int *a = malloc(5 * sizeof(*a)); free(a); a[2] = 5;
[19:35:24] <candide> NRK: [warning: pointer 'a' may be used after 'free' [-Wuse-after-free]  note: call to 'free' here  warning: pointer 'a' used after 'free' [-Wuse-after-free]  note: call to 'free' here  warning: pointer 'a' may be used after 'free' [-Wuse-after-free]  note: call to 'free' here] no output: a = 0x41f1a0
[19:35:54] <NRK> mekeor: null dereference is undefined behavior.
[19:36:12] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[19:37:01] *** Quits: zer0x (~zer0x@42.113.144.44) (Ping timeout: 256 seconds)
[19:38:11] *** Joins: oxfuxxx (~oxfuxxx@45.152.181.204)
[19:40:22] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:40:38] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:44:07] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c4ec:7584:bbd2:af2d)
[19:44:07] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c4ec:7584:bbd2:af2d) (Changing host)
[19:44:07] *** Joins: skapata (~Skapata@user/skapata)
[19:44:36] *** Quits: oxfuxxx (~oxfuxxx@45.152.181.204) (Ping timeout: 240 seconds)
[19:46:18] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[19:48:03] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[19:50:03] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[19:50:32] *** Joins: wovixo (~wovixo@128.104.205.49)
[19:50:50] *** Joins: oxfuxxx (~oxfuxxx@45.152.181.204)
[19:52:27] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-33-81.pa.qld.optusnet.com.au)
[19:53:33] *** Joins: Viewday1151 (~Viewday@user/viewday)
[19:54:20] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:54:21] *** Viewday1151 is now known as Viewday115
[19:55:57] *** Quits: kurahaupo (~kurahaupo@pa49-182-30-67.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[19:57:51] *** Quits: oxfuxxx (~oxfuxxx@45.152.181.204) (Ping timeout: 260 seconds)
[19:59:44] *** Joins: Alhazred (~Alhazred@86.106.74.39)
[20:03:39] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[20:06:23] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[20:07:42] *** Joins: vysn (~vysn@user/vysn)
[20:08:03] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Ping timeout: 252 seconds)
[20:08:56] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[20:10:33] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[20:12:48] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[20:15:02] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[20:15:35] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 260 seconds)
[20:15:45] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Ping timeout: 252 seconds)
[20:16:44] *** Quits: angelacrust (~angelacru@223.233.73.96) (Quit: Client closed)
[20:18:26] *** Joins: bbju (~bbju@103.144.149.53)
[20:18:47] *** Joins: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:30ce:2414:18b0:d4d2)
[20:19:27] *** Joins: tejr_ (~tejr@user/tejr)
[20:20:23] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[20:20:27] *** tejr_ is now known as tejr
[20:22:15] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[20:22:44] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[20:22:49] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[20:23:12] *** rootx74 is now known as skraito
[20:23:12] *** Quits: skraito (~root@user/rootx74) (K-Lined)
[20:23:13] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-123-74.mobile.abo.orange.fr)
[20:23:27] *** Joins: rootx74 (~root@2001:19f0:5:446d:5400:3ff:feea:eab7)
[20:23:39] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:256f:7d5e:6ba9:76fc)
[20:23:39] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:256f:7d5e:6ba9:76fc) (Changing host)
[20:23:39] *** Joins: skapate (~Skapata@user/skapata)
[20:24:16] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:25:10] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[20:26:19] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[20:26:48] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[20:27:24] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-123-74.mobile.abo.orange.fr) (Ping timeout: 240 seconds)
[20:27:39] *** acidtonic__ is now known as acidtonic
[20:28:45] *** Joins: ramzy (~ramzy@102.42.129.5)
[20:29:58] *** Quits: ramzy (~ramzy@102.42.129.5) (Client Quit)
[20:31:25] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[20:34:49] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 256 seconds)
[20:35:10] *** Joins: findingnemoeggfr (~findingne@h95-110-103-59.dyn.bashtel.ru)
[20:36:57] *** Quits: Inline__ (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de) (Quit: Leaving)
[20:38:16] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-121-172.mobile.abo.orange.fr)
[20:39:18] *** Quits: bbju (~bbju@103.144.149.53) (Quit: Client closed)
[20:41:14] *** Quits: nq (~nq@2a02:2f08:e015:a900:99af:f5ee:ecd5:7377) (Ping timeout: 268 seconds)
[20:42:48] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[20:44:19] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:44:39] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Quit: And I'm out.)
[20:45:25] *** Quits: findingnemoeggfr (~findingne@h95-110-103-59.dyn.bashtel.ru) (Remote host closed the connection)
[20:45:49] *** Joins: findingnemoeggfr (~findingne@h95-110-103-59.dyn.bashtel.ru)
[20:47:39] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[20:48:51] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:49:49] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-121-172.mobile.abo.orange.fr) (Ping timeout: 240 seconds)
[20:53:34] *** Joins: nq (~nq@82.79.141.40)
[20:54:56] *** Joins: Inline (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de)
[20:55:48] *** Quits: rootx74 (~root@2001:19f0:5:446d:5400:3ff:feea:eab7) (Ping timeout: 240 seconds)
[20:56:53] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-105-8.mobile.abo.orange.fr)
[20:56:55] *** Quits: findingnemoeggfr (~findingne@h95-110-103-59.dyn.bashtel.ru) (Ping timeout: 256 seconds)
[20:58:07] *** Joins: nvmd (~weechat@user/nvmd)
[20:59:49] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[21:01:19] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-105-8.mobile.abo.orange.fr) (Ping timeout: 260 seconds)
[21:03:30] *** Joins: badsektor (~badsektor@user/badsektor)
[21:03:34] *** Joins: Enitin (~Enitin@82.180.145.226)
[21:04:21] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[21:04:51] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:04:55] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-c8ca-2d29-e4b6-b73.fixed6.kpn.net)
[21:07:29] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-123-185.mobile.abo.orange.fr)
[21:09:29] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-c8ca-2d29-e4b6-b73.fixed6.kpn.net) (Ping timeout: 250 seconds)
[21:09:49] *** Quits: nvmd (~weechat@user/nvmd) (Quit: WeeChat 3.4.1)
[21:09:51] *** flooded is now known as _flood
[21:10:12] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Ping timeout: 240 seconds)
[21:10:33] *** Joins: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum)
[21:11:12] *** Joins: Arthuria (~Arthuria@user/arthuria)
[21:12:33] *** Joins: Zeturic (~Orimendix@50.26.218.162)
[21:12:53] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[21:14:03] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-123-185.mobile.abo.orange.fr) (Ping timeout: 252 seconds)
[21:15:26] *** Joins: mahmutov (~mahmutov@37.155.56.176)
[21:17:25] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[21:18:07] *** Joins: ayaka (~randy@154.3.4.179)
[21:19:35] *** Quits: fossforus (~stan@174.99.70.146) (Quit: Leaving.)
[21:19:53] *** Joins: fossforus (~stan@174.99.70.146)
[21:20:08] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-104-102.mobile.abo.orange.fr)
[21:20:47] <ayaka> I know there is a ms-extension that allow us access the struct embedded in another struct. But what I want to do is struct foo {int a; int b;}; struct bar {struct foo <anonymous>; int c};
[21:21:02] <ayaka> struct bar var; var.a = 1;
[21:21:39] *** Quits: alch (~alch@151.82.236.239) (Read error: Connection reset by peer)
[21:22:07] <ayaka> is it possible that I could use a macro that copy the define of struct foo into struct bar ?
[21:22:22] *** Joins: jack_rabbit (knusbaum@gateway/vpn/protonvpn/knusbaum)
[21:23:17] <ayaka> or any magic I could play that remove the name tag of struct foo, I could take all gnu and gcc extension just not ms extension
[21:23:24] *** Quits: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum) (Ping timeout: 252 seconds)
[21:23:25] <caze> ayaka: That is standard.
[21:24:03] <caze> Oh, wait. Not quite.
[21:24:27] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-104-102.mobile.abo.orange.fr) (Ping timeout: 250 seconds)
[21:25:41] *** Joins: alch (~alch@pd-18-125-14.service.infuturo.it)
[21:27:03] *** Joins: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum)
[21:27:55] *** Quits: jack_rabbit (knusbaum@gateway/vpn/protonvpn/knusbaum) (Ping timeout: 250 seconds)
[21:29:51] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[21:30:08] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[21:31:15] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-112-49.mobile.abo.orange.fr)
[21:31:46] *** Quits: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:32:24] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[21:32:56] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[21:32:57] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[21:33:11] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[21:34:17] *** Quits: yagamisato (~SingSong@user/yagamisato) (Ping timeout: 240 seconds)
[21:34:22] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[21:35:53] *** Joins: yagamisato (~SingSong@183.234.128.105)
[21:35:53] *** Quits: yagamisato (~SingSong@183.234.128.105) (Changing host)
[21:35:53] *** Joins: yagamisato (~SingSong@user/yagamisato)
[21:37:41] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-112-49.mobile.abo.orange.fr) (Ping timeout: 252 seconds)
[21:39:13] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[21:41:57] *** Quits: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum) (Quit: ZNC 1.8.2 - https://znc.in)
[21:44:06] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-107-26.mobile.abo.orange.fr)
[21:44:47] *** Joins: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum)
[21:44:49] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[21:46:57] *** Quits: Thymo (~Thymo@88-159-60-197.fixed.kpn.net) (Ping timeout: 240 seconds)
[21:47:50] *** Quits: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net) (Ping timeout: 268 seconds)
[21:48:15] *** Quits: djph (~dpurgert@cpe-107-10-235-152.neo.res.rr.com) (Ping timeout: 256 seconds)
[21:48:27] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-107-26.mobile.abo.orange.fr) (Ping timeout: 260 seconds)
[21:49:43] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[21:49:56] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[21:50:32] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[21:51:19] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[21:54:04] *** Joins: strajder (~strajder@user/strajder)
[21:55:10] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-102-188.mobile.abo.orange.fr)
[21:55:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[22:00:10] <ayaka> caze, I see, thank you. I think that was impossible to do that
[22:00:47] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-219-172.wlan.tudelft.nl) (Ping timeout: 252 seconds)
[22:00:49] *** Quits: kdc (~kdc@196-210-1-81.dynamic.isadsl.co.za) (Quit: Leaving)
[22:02:23] <constxd> bros
[22:02:29] <constxd> i hate technology
[22:02:37] <ioxzev1z> y tho?
[22:02:53] <greeter> i don't know if someone pinged me here or not. if so my client clobbered it :-\ sorry
[22:03:32] <ioxzev1z> greeter, iirc people were talking about the ,nohello
[22:03:46] <greeter> ah, maybe that was it?
[22:04:03] <ioxzev1z> yeah, quote <no-n> what's wrong with saying hello; <no-n> greeter does it
[22:04:12] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-102-188.mobile.abo.orange.fr) (Ping timeout: 240 seconds)
[22:04:15] <ioxzev1z> Now I pinged him...
[22:04:39] <greeter> that's ok. the other day for some reason my client changed my nickname to "that" so then everyone started pinging me
[22:05:13] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[22:05:50] *** Joins: effexzi (uid474242@id-474242.ilkley.irccloud.com)
[22:06:32] <greeter> ah ok thank you ioxzev1z that makes sense :-)
[22:07:49] *** Joins: Akiva (~Akiva@user/Akiva)
[22:10:51] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.157)
[22:14:36] *** Joins: lightningwright (~lightning@user/lightningwright)
[22:14:39] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving...)
[22:14:58] *** Joins: HP55555 (~HP51248@49.205.97.4)
[22:15:31] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.157) (Ping timeout: 260 seconds)
[22:17:55] *** Joins: zacts (~zacts@user/zacts)
[22:18:21] <sham1> Hello
[22:18:34] <greeter> greetings :-)
[22:18:34] <sham1> Seems somewhat quiet today
[22:19:06] <pragma-> hi NRK
[22:19:11] <Bou> Hello!
[22:19:13] <greeter> well, i'm taking a break from coding today, so i for once don't need help with something :-P
[22:20:18] *** Joins: Rounin (~david@84.212.130.215)
[22:22:16] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.153)
[22:25:19] <ioxzev1z> sham1, for some reason this channel has been pretty quiet last few weeks
[22:25:51] <NRK> well, i guess im taking a break from terrorizing hello sayers as well :P
[22:26:16] <greeter> some of us make a very good living doing that you know :-P
[22:28:43] *** Quits: Alhazred (~Alhazred@86.106.74.39) (Ping timeout: 256 seconds)
[22:30:10] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:30:10] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:30:10] *** Joins: wroathe (~wroathe@user/wroathe)
[22:30:11] *** Joins: segnior (segnior@user/segnior)
[22:30:39] *** Joins: Alhazred (~Alhazred@130.245.70.36)
[22:31:13] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[22:32:03] <omegatron> not only this channel/network has been quiet the past few weeks ..
[22:32:44] <nomagno> Hm?
[22:33:26] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[22:33:36] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Read error: Connection reset by peer)
[22:33:52] <strajder> #c quiet lately? no; offtopic? definitely
[22:34:29] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[22:34:57] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.153) (Ping timeout: 256 seconds)
[22:35:14] *** Quits: fengdaolong (~fengdaolo@2409:8a4d:c46:9901::4d3) (Ping timeout: 260 seconds)
[22:35:38] <pragma-> that / probably should be a ;
[22:36:04] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:36:04] <pragma-> yeah, i think people have moved to discord or whatever these days
[22:36:50] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[22:36:51] <Teckla> Is there an official unofficial Discord channel for C programmers?
[22:37:15] <pragma-> I have never used discord. I have no idea.
[22:37:48] <strajder> fyi, https://stallman.org/discord.html
[22:37:49] <candide> Title of strajder's link: Reasons not to use Discord
[22:38:22] <pragma-> ,g reasons not to listen to stallman
[22:38:23] <candide> pragma-: (1,400,000 results) Reasons not to use Microsoft: <https://stallman.org/microsoft.html> -- Why (Almost) Everyone Wants Richard Stallman Canceled – The ...: <https://thenewstack.io/why-almost-everyone-wants-richard-stallman-cancelled/> -- Reasons not to use Google: <https://stallman.org/google.html>
[22:39:10] <strajder> he's right
[22:39:30] <greeter> bookmarked that link. thank you :-)
[22:39:38] *** Joins: nf (~n@monade.li)
[22:39:49] <pragma-> I was just wondering if anyone took rms's reasons-not-to-use template and applied it to the man himself
[22:40:09] <greeter> that would also be a good idea actually
[22:40:28] *** Joins: eroux (~eroux@102-65-72-61.ftth.web.africa)
[22:40:29] <pragma-> smh
[22:40:38] <pragma-> rms suggests using a burner phone while using discord
[22:40:40] <pragma-> insanity
[22:41:01] *** Parts: mekeor[m] (~mekeormat@2001:470:69fc:105::17e4) ()
[22:41:12] <strajder> it's better not to use it though
[22:41:31] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 256 seconds)
[22:42:28] <greeter> one big reason i didn't see mentioned is that Discord is privately owned. what happens if the owner decides to pull the plug on it?
[22:42:32] <NRK> ^ yeah, just dont use it to begin with :)
[22:43:13] *** Quits: fe23 (~fe23@2409:8a34:466:6010:508a:50b0:3206:7113) (Quit: fe23)
[22:43:22] <pragma-> hello!
[22:43:42] <NRK> ,recall NRK break
[22:43:42] <candide> [17m51s ago] <N﻿RK> well, i guess im taking a break from terrorizing hello sayers as well :P
[22:43:46] *** Joins: polyrob (~rob@user/polyrob)
[22:44:20] <pragma-> NRK has been defeated
[22:44:30] *** Joins: rootx74 (~root@2001:19f0:5:446d:5400:3ff:feea:eab7)
[22:45:37] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[22:46:07] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-c8ca-2d29-e4b6-b73.fixed6.kpn.net)
[22:47:11] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:47:25] *** Joins: terminalpusher (~terminalp@2a01:586:124a:1:832a:f4bb:6fb9:a240)
[22:47:44] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[22:50:35] *** Quits: cart_ (~cart@185.191.86.4) (Ping timeout: 256 seconds)
[22:50:50] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-c8ca-2d29-e4b6-b73.fixed6.kpn.net) (Ping timeout: 252 seconds)
[22:50:51] *** Joins: plastico (~plastico@neomutt/plastico)
[22:50:58] *** Joins: sheldon (~sheldon@user/sheldon)
[22:51:23] *** Quits: rootx74 (~root@2001:19f0:5:446d:5400:3ff:feea:eab7) (Ping timeout: 252 seconds)
[22:51:27] *** Joins: rootx74_ (~root@2001:19f0:5:446d:5400:3ff:feea:eab7)
[22:51:40] <ioxzev1z> smh my head this is dull tonight
[22:51:48] *** Joins: cart_ (~cart@185.191.86.4)
[22:52:31] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Ping timeout: 256 seconds)
[22:55:33] *** Joins: pulse (~pulse@user/pulse)
[22:57:11] <NRK> i've been quite "productive" lately :)
[22:58:47] <ioxzev1z> Doing what?
[22:58:54] <ioxzev1z> C I hope
[22:59:19] *** Quits: cart_ (~cart@185.191.86.4) (Ping timeout: 256 seconds)
[22:59:44] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.153)
[23:01:21] <NRK> yes
[23:01:29] <constxd> wtf does that mean bro
[23:01:51] <constxd> makes it sound like you've been having s*x
[23:03:05] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[23:03:51] *** Joins: sheldon_ (~sheldon@user/sheldon)
[23:04:08] <ioxzev1z> No need to get graphic constxd, just call it s*
[23:04:17] *** Joins: mahmutov_ (~mahmutov@5.176.13.173)
[23:05:07] <fossforus> s(x[0])
[23:05:11] *** Quits: mahmutov (~mahmutov@37.155.56.176) (Ping timeout: 250 seconds)
[23:06:12] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.153) (Ping timeout: 240 seconds)
[23:06:26] <pragma-> s & m
[23:06:37] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 240 seconds)
[23:07:04] *** Joins: Akuli (~Akuli@82-203-162-96.bb.dnainternet.fi)
[23:08:50] <NRK> oh lol, i just realized that quoting productive didn't have the same effect that i thought it would have :D
[23:08:54] <ioxzev1z> pragma-, ever considered writing candide in C?
[23:09:35] <NRK> i quoted it cus i don't agree with the traditional definition of productivity
[23:09:57] <pragma-> Actually I'm a firm believer in using the right tool/language for the task at hand, and at the time Perl was the most appropriate language for an IRC bot.
[23:10:25] <ioxzev1z> Still is, no?
[23:10:42] <pragma-> These days I wish Perl had a great number of things that I miss, like type annotations and an AST and stuff.
[23:10:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:11:29] <pragma-> Perl seems to have really embraced the whole "Only the Perl binrary can parse Perl" thing and it's a little annoying.
[23:12:25] <ioxzev1z> Given code written as Perl, it makes sense that the perl binrary is the correct way to parse and execute that code?
[23:12:25] <NRK> perl, ewww.. kool kids dont use that anymore B)
[23:12:42] <pragma-> the TIMTOWDI can be too much sometimes too, where different Perl programs written by different authors look like completely different languages rather than merely written with a different algorithm.
[23:12:42] <ioxzev1z> NRK, I'm actually slowly migrating over to rust
[23:12:54] <NRK> wow, betrayal...
[23:13:26] *** Quits: Guest53 (~Guest53@42.107.76.15) (Quit: Client closed)
[23:13:38] <fossforus> strongly typed is weakly fun :(
[23:14:30] <NRK> i tried rust out a bit sometimes ago, didn't vibe with it ;(
[23:14:42] <ioxzev1z> NRK, rust is fr the future
[23:14:56] <NRK> zig seems more interesting, but haven't tried it yet.
[23:15:24] <pragma-> ioxzev1z: yes, but with other languages, you can write tools to parse the code and analyze it and whatnot. But with Perl, only /bin/perl can parse Perl reliably. Everything else that attempts to parse Perl is a hack at best. This makes it really difficult to write good syntax highlighters and other tools taht work with Perl source code.
[23:15:25] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-102-228.mobile.abo.orange.fr)
[23:15:57] <ioxzev1z> for example, please compare: fprintf(stdout, "%\n", "Hello world."); | println!("Hello world."); . Do you not see the future in the second line?
[23:16:08] *** Joins: frannk (~frannk@186.249.21.18)
[23:16:26] *** Parts: frannk (~frannk@186.249.21.18) ()
[23:16:26] <pragma-> you could write printf("Hello world.\n");
[23:16:34] <pragma-> examples should be comparable.
[23:16:37] <ioxzev1z> lolol
[23:16:38] <fossforus> how do you even write something like an regional/arena allocator in rust if you can't typecast (presumably)
[23:16:41] *** Joins: frannk (~frannk@186.249.21.18)
[23:17:23] <pragma-> the comparable equiavalentish would be more `puts("Hello world.")` since it doesn't look like println is formatted output.
[23:17:48] <ioxzev1z> pragma-, println! allows {}, e.g. println!("{}", 5); etc
[23:18:00] <greeter> when i try fprintf(stdout, "%\n", "Hello world."); i get warnings about unknown converstion type character '\x0a'
[23:18:15] <ioxzev1z> greeter, should have been %s
[23:18:16] <pragma-> Are you using the right double quotes?
[23:18:19] <pragma-> Oh.
[23:18:24] <greeter> ah that makes more sense
[23:19:31] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-102-228.mobile.abo.orange.fr) (Ping timeout: 245 seconds)
[23:20:21] *** Quits: geeknix (~pi@2001:e68:5432:2980:281e:46e1:b91e:3c1c) (Ping timeout: 245 seconds)
[23:20:28] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:20:32] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:841d:14ca:11b1:4064)
[23:21:00] <ioxzev1z> Rust also uses -> for specifying return value types.
[23:21:05] <ioxzev1z> Muh style.
[23:21:08] *** Joins: justOkay (~justache@user/justache)
[23:22:33] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[23:23:33] <pragma-> I almost changed -> to : for return types in my toy language since I already use : for parameter types and variable declarations
[23:23:37] <pragma-> but I left it alone
[23:23:45] *** Quits: frannk (~frannk@186.249.21.18) (Quit: leaving)
[23:24:15] *** Joins: frannk (~frannk@186.249.21.18)
[23:24:25] <NRK> : for types is cancer
[23:24:25] <NRK> i hate it
[23:24:56] <pragma-> harsh
[23:25:18] <ioxzev1z> NRK, let line: [0; 32]; cancer like that?
[23:25:20] <fossforus> remember when type meant a length of bytes
[23:25:22] *** Quits: frannk (~frannk@186.249.21.18) (Client Quit)
[23:25:34] *** Joins: frannk (~frannk@186.249.21.18)
[23:25:43] <NRK> it makes rare complicated cases easier to read. but it makes the more common case harder to write.
[23:25:59] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.157)
[23:26:12] <NRK> `int a` undebateably better than `let a : int`
[23:26:50] <pragma-> It was bad enough when nobody could agree on the size of a byte, so we have CHAR_BIT. But apparently now we can't agree on the size of a boolean, so we now have BOOL_WIDTH! Progress!
[23:26:55] *** Quits: lightningwright (~lightning@user/lightningwright) (Quit: Leaving)
[23:27:11] <NRK> anyways, having tagged union as a language builtin might be useful
[23:27:44] <pragma-> NRK: `int a` is ambiguous in several contexts!
[23:28:05] <NRK> looks fine to me /shrug
[23:28:09] <fossforus> int a is always at least a 16-bit signed integer
[23:28:15] <fossforus> not really ambiguous
[23:28:17] <pragma-> ,c-parsing-ambiguities
[23:28:17] <candide> c-parsing-ambiguities is https://hal.archives-ouvertes.fr/hal-01633123/document
[23:28:53] <pragma-> fossforus: the size isn't the ambiguous part (though it is!) that I was referring to. it's ambiguous whether it's a variable declaration or not.
[23:29:42] <ioxzev1z> pragma-, wrt bool, isn't it ambiguous due to being able to have _Bool a = 5; _Bool b = 6; where a == b in if?
[23:30:11] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 260 seconds)
[23:30:18] <pragma-> ,cc _Bool a = 5, b = 6; // just curious
[23:30:20] <candide> pragma-: no output: a = true; b = true
[23:30:26] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.157) (Ping timeout: 252 seconds)
[23:30:43] <ioxzev1z> ,cc _Bool a = 5, b = 6; if(a == b) { puts("Y"); }
[23:30:45] <candide> ioxzev1z: Y
[23:31:06] <pragma-> gdb outputs "true", hmm
[23:31:07] <NRK> tbh, _Bool is bloat
[23:31:18] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[23:31:18] <ioxzev1z> pragma-, above outputs Y on a == b
[23:31:31] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[23:31:33] <twkm> only surprising if you think it is just int.
[23:31:33] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Ping timeout: 252 seconds)
[23:31:40] <NRK> typedef unsigned char bool; // problem solved
[23:32:00] <ioxzev1z> twkm, no, but wrt BOOL_WIDTH it makes sense to have that considering bool can be 1 bit or 32
[23:32:19] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[23:32:31] <ioxzev1z> Actually bool can be 1 or any bits long
[23:32:34] <ioxzev1z> But yeah
[23:32:42] <NRK> i don't think anyone cares about BOOL_WIDTH, until you need to put it on a struct...
[23:33:09] *** Joins: tiotags (~tiotags@user/tiotags)
[23:33:49] <fizzie> The number of bits of the object representation is not what the /width/ of an integer type is. It's the number of value bits.
[23:35:10] <pragma-> ioxzev1z: but _Bool can only store 0 or 1, I thought? Performing arithmetic on it does weird things that keep it within 0 and 1, no? I cannot remember what the standard says and I don't feel like looking it up.
[23:35:30] <fizzie> It has a special conversion property, yes.
[23:35:39] <fizzie> ,c11 6.3.1.2p1
[23:35:39] <candide> http://www.iso-9899.info/n1570.html#6.3.1.2p1 [Boolean type] When any scalar value is converted to _Bool, the result is 0 if the value compares equal to 0; otherwise, the result is 1.59) FOOTNOTE.59 NaNs do not compare equal to 0 and thus convert to 1.
[23:35:43] <pragma-> caze gets a kick out of doing subtraction on bools
[23:36:09] <fizzie> And of course since its rank is less than that of `int`, performing any arithmetic on it involves a conversion to int, doing the operation, and then a conversion back to _Bool, with the above rule.
[23:36:18] <NRK> `otherwise, the result is 1.59` :>
[23:36:22] <ioxzev1z> pragma-, iirc bool just means 0 false, any other value true, hence a = 5, b = 6; a == b is true, whereas int x = 5, y = 6; x == y; is false
[23:36:26] <pragma-> smh, footnote 59
[23:36:32] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[23:36:32] <ioxzev1z> But bool guarantees the above
[23:36:38] <ioxzev1z> Hence why it's a different type
[23:36:52] <pragma-> x and y both have 1 stored in them
[23:37:00] *** Quits: rootx74_ (~root@2001:19f0:5:446d:5400:3ff:feea:eab7) (Ping timeout: 240 seconds)
[23:37:01] <pragma-> not 5 or 6
[23:37:05] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[23:37:19] *** Joins: geeknix (~pi@2001:e68:5432:7a19:c5f9:1f10:fdeb:7503)
[23:37:23] *** Joins: rootx74 (~root@108.61.89.107)
[23:37:31] <ioxzev1z> x and y are int, meaning x stores 5, y stores 6. In the a, b bool example some magic happens such that a == b, even if values are different
[23:37:35] <pragma-> er, a and b
[23:37:55] <fizzie> The values are *not* different, that's the point.
[23:38:09] <pragma-> the values are 1 and 1!
[23:38:19] <ioxzev1z> fizzie, iirc it's implementation dependent on how _Bool is stored
[23:38:26] <ioxzev1z> But there is the guarantee that true == true
[23:38:48] <fizzie> We just quoted the relevant bit. "When any scalar value is converted to _Bool, the result is 0 if the value compares equal to 0; otherwise, the result is 1."
[23:39:05] <ioxzev1z> oic, so it is defined
[23:39:19] <fizzie> `_Bool a = 5;` involves converting a scalar value (an int with the value 5) to _Bool, and since the value does not compare equal to 0, the result is 1.
[23:39:34] <NRK> u basically get a double not when u put something inside a _Bool.
[23:39:53] <NRK> so `_Bool a = 5` == `_Bool a = !!5`
[23:40:00] <ioxzev1z> ,cc int a = 3; printf("%d\n", !!a);
[23:40:00] <fizzie> What's implementation-dependent is the representation, and what happens if you modify the object representation (by way of memcpy, for example).
[23:40:02] <candide> ioxzev1z: 1
[23:40:55] *** Quits: HP55555 (~HP51248@49.205.97.4) (Ping timeout: 260 seconds)
[23:42:26] <ioxzev1z> In that case, is there some if(x) { x = !!x; } when compiling _Bool x; ?
[23:42:33] *** Joins: magla (~gelignite@d53678fd.access.ecotel.net)
[23:42:37] <ioxzev1z> So it's always 1
[23:43:00] <fizzie> I guess it's possible to argue you might have a _Bool with a width greater than 1, and supporting representations of values other than 0 and 1, which you just couldn't write there by normal assignment since that involves a conversion (except from another _Bool object).
[23:43:38] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Ping timeout: 252 seconds)
[23:44:00] <ioxzev1z> fizzie, I think that was a little my point, that true == true even if it isn't specifically 0 or 1
[23:44:21] <fizzie> But it *is* specifically 0 or 1. If it isn't, the values wouldn't be equal.
[23:44:46] <ioxzev1z> fizzie, right, and that's where my belief about some magic conversion came from, such that 5 could == 6, if _Bool
[23:44:54] <ioxzev1z> But now it's just !!x
[23:44:57] <ioxzev1z> To get 1
[23:45:07] *** Quits: Haxxa (~Haxxa@202-130-210-100.ip4.superloop.com) (Quit: Haxxa flies away.)
[23:45:17] <NRK> , int a = 5; if (a == true) then; printf("true"); else printf("false");
[23:45:17] <candide> int is a signed integer data type, at least 16 bits wide, which must be able to represent (at least) all the numbers in the range -32767 to +32767. Its lowest value, INT_MIN, and highest value, INT_MAX, are defined in <limits.h>
[23:45:25] <NRK> oops
[23:45:33] <NRK> ,cc int a = 5; if (a == true) then; printf("true"); else printf("false");
[23:45:35] <candide> NRK: error: 'then' undeclared
[23:45:43] <NRK> what?
[23:45:55] <NRK> oh, wtf
[23:46:02] <fizzie> `true` is an int, incidentally.
[23:46:03] <ioxzev1z> NRK, ,cc _Bool a = 5, b = 6; if(a == b) { puts("Y"); } int x = 5; int y = 6; if(x == y) puts("Z");
[23:46:04] <NRK> ,cc int a = 5; if (a == true) printf("true"); else printf("false");
[23:46:05] <candide> NRK: Y
[23:46:06] <candide> NRK: false
[23:46:12] <ioxzev1z> NRK, ^
[23:46:19] <pragma-> lol
[23:46:26] <pragma-> NRK be like "wtf now why is my program printing Y?"
[23:46:44] <NRK> yeah, iwas baited
[23:47:06] <fizzie> ,c11 7.18p3
[23:47:06] <candide> http://www.iso-9899.info/n1570.html#7.18p3 [Boolean type and values <stdbool.h>] The remaining three macros are suitable for use in #if preprocessing directives. They are true which expands to the integer constant 1, false which expands to the integer constant 0, and __bool_true_false_are_defined which expands to the integer constant 1.
[23:47:18] <NRK> anyways, anything directly comparing to `true` or `false` is probably an idiot
[23:47:31] <pragma-> __bool_true_false_are_defined
[23:47:34] *** Joins: Haxxa (~Haxxa@202-130-210-100.ip4.superloop.com)
[23:47:40] <NRK> and stdbool creates more problems than it solves if you ask me, just use uchar !
[23:47:47] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[23:48:03] <pragma-> u8!
[23:48:09] <NRK> s/anything/anyone/
[23:48:22] <pragma-> but why use a u8 if you only need a u1?
[23:48:46] <fizzie> ISTR the C23 proposal to make `bool`, `true` and `false` proper keywords would have given the latter two a `bool` type.
[23:48:51] <ioxzev1z> pragma-, is u1 even possible? Doesn't something like x86_64 work on octets at minimum?
[23:48:55] *** Joins: llh (~UPP@user/llh)
[23:49:03] <NRK> `struct u1 { unsigned char bool : 1; }` :>
[23:49:10] <NRK> (don't mention padding)
[23:49:18] <pragma-> I'm still salty that it wasn't mandated and well-defined that adjacent bitfields would always collapse into the same object region. "Implementation defined" me arse.
[23:49:24] <ioxzev1z> ,cc struct u1 { unsigned char bool : 1; }; sizeof(u1);
[23:49:25] <candide> ioxzev1z: error: two or more data types in declaration specifiers
[23:49:33] <ioxzev1z> ,cc struct u1 { unsigned char b : 1; }; sizeof(u1);
[23:49:34] <candide> ioxzev1z: error: 'u1' undeclared
[23:49:39] <ioxzev1z> ,cc struct u1 { unsigned char b : 1; }; sizeof(struct u1);
[23:49:40] <NRK> kek
[23:49:41] <candide> ioxzev1z:  No struct type named u1.
[23:49:47] <ioxzev1z> ( ._.) wat
[23:49:51] <fizzie> I won't mention padding, but can I mention that `unsigned char` as the base type of a bit-field is implementation-defined.
[23:50:06] <pragma-> ioxzev1z: gdb doesn't see things that get optmized out
[23:50:08] <NRK> yeah ik ;(
[23:50:17] <ioxzev1z> Ah
[23:50:35] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[23:50:42] *** Joins: Dean_ (~Dean@165-73-119-36.ip.afrihost.capetown)
[23:50:45] <pragma-> ,cc struct u1 { unsigned char b : 1; } a; sizeof(a);
[23:50:48] <candide> pragma-: no output: sizeof(a) = 1
[23:50:50] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[23:50:51] * pragma- shrugs.
[23:50:56] <pragma-> Beats me why gcc/gdb are like this.
[23:50:59] <ioxzev1z> So minimum 1 char
[23:51:08] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[23:51:15] <NRK> which to be seems like some braindeath, most of the time you're using bitfields you want to save space. and using a (u)int would increase the alignment requirement
[23:51:23] <fossforus> I feel like I'll never understand more than 1% of gdb
[23:51:46] <NRK> ,cc struct u1 { unsigned int b : 1; } a; sizeof(a);
[23:51:48] <candide> NRK: no output: sizeof(a) = 4
[23:51:57] <ioxzev1z> That people could write code (at this point) to copy clang's ^ error signifier in gcc compilation is amazing
[23:51:59] <NRK> sadface
[23:52:03] <ioxzev1z> gcc is a dinosaur
[23:52:12] *** Quits: Dean_ (~Dean@165-73-119-36.ip.afrihost.capetown) (Changing host)
[23:52:12] *** Joins: Dean_ (~Dean@user/De4n-Whit3/x-9385125)
[23:52:18] <Dean_> hello
[23:52:23] <pragma-> ,cc sizeof (struct u1 { unsigned char b : 1; });  // just curious
[23:52:24] <greeter> greetings
[23:52:24] <fizzie> Well, _Bool is an allowed type for a bit-field as well. ;)
[23:52:25] <candide> pragma-: Success (no output).
[23:52:31] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[23:53:01] <pragma-> hi!
[23:53:13] <ioxzev1z> ,cc struct u1 { _Bool b; } a; sizeof(a);
[23:53:14] <fizzie> (But it makes the bit-field inherit the same weird semantics of _Bool, so it rather defats the purpose.)
[23:53:15] <candide> ioxzev1z: no output: sizeof(a) = 1
[23:53:27] <fizzie> ,c11 footnote.122
[23:53:27] <candide> http://www.iso-9899.info/n1570.html#FOOTNOTE.122 While the number of bits in a _Bool object is at least CHAR_BIT, the width (number of sign and value bits) of a _Bool may be just 1 bit.
[23:53:35] <NRK> `struct { _Bool i_need_3bits_for_this : 3; _Bool and_5_for_this: 5; }`
[23:53:43] *** Quits: Alhazred (~Alhazred@130.245.70.36) (Ping timeout: 256 seconds)
[23:53:53] <fizzie> Guess the fact that's "may be" rather than "must be" allows that weirdo _Bool with more than two valid values.
[23:54:16] <NRK> obviously, you'd want a uchar there. but you cant if you want to avoid implementation specific behavior.
[23:54:46] <NRK> which is why it seems braindead to me
[23:54:47] <fossforus> what I have learned is that uchar is the cooler bool, if I don't need to collapse >1 into 1
[23:55:11] <fizzie> ,cc struct { _Bool threebit : 3; _Bool fivebit : 5; } s; // sadly
[23:55:12] <candide> fizzie: error: width of 'threebit' exceeds its type
[23:55:28] <NRK> fossforus: you mean !0
[23:55:38] <NRK> cus negatives are "true" as well
[23:55:45] <fizzie> And 0.5, and...
[23:56:32] <fizzie> ,cc int x = 0.1; bool y = 0.1; printf("%d %d", x, y); // a favourite demonstration
[23:56:34] <candide> fizzie: 0 1
