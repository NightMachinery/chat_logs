[00:00:06] <SnoopJ> p-i-, these two forms of syntax do ENTIRELY DIFFERENT things. One makes a list, the other one doesn't. Both create an iterable object.
[00:00:11] <p-i-> well, sum([...]) actually has to create a whole fresh list.
[00:00:17] <habnabit_> p-i-, but yes you and SnoopJ are certainly right that at the point where this level of overhead for the sum matters you should be using numpy
[00:00:18] <MD500_Pilot> very cool!!!
[00:00:23] <MD500_Pilot> Thank you!!!
[00:00:33] <SnoopJ> p-i-, yes, this is a classic anti-pattern
[00:00:37] <p-i-> Whereas sum(...) has iterator overhead, but doesn't actually allocate a fresh object
[00:00:47] <SnoopJ> or well, usually an anti-pattern I guess :)
[00:00:54] <habnabit_> p-i-, it allocates a fresh generator object
[00:01:04] <SnoopJ> p-i-, it's less to do with allocation than it is with having to scan the [thingy] in the first place
[00:01:07] <habnabit_> p-i-, the memory consumption doesn't ever reach 0
[00:01:20] <p-i-> ok I'll stick with Principle of Least Squiggles and use gen.comp.s
[00:01:30] <SnoopJ> p-i-, `sum([x for x in range(100_000_000)])` is going to need a lot more memory than `sum(x for x in range(100_000_000))`
[00:02:04] <SnoopJ> (they could both be reduced to sum(range(...)), but think of the case when range(...) is a big_iterable_object instead)
[00:02:40] <MD500_Pilot> so why is is `subprocess.run` better than `subprocess.getoutput` in this case?
[00:02:59] *** Quits: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Quit: WeeChat 3.1)
[00:03:20] *** Joins: thecoder (~mrrobot@c-73-27-71-147.hsd1.fl.comcast.net)
[00:03:31] <habnabit_> MD500_Pilot, getoutput is a deprecated legacy API
[00:03:54] <MD500_Pilot> understood, so `.run` is the new way to do things
[00:03:56] <habnabit_> MD500_Pilot, it's not as useful
[00:04:02] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:04:07] <habnabit_> MD500_Pilot, yes, run's behavior is much more sane
[00:04:18] <MD500_Pilot> understood, thanks!
[00:04:53] *** Joins: alnr (~alnr@38.125.204.99)
[00:06:21] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Ping timeout: 250 seconds)
[00:08:27] <MD500_Pilot> now that I have that dictionary, I want to wrap it in another dictionary where `k` = `server_name` and `v` = `dict` we just created. I eventually want to build a class that takes this dict from each server so I can do lookups on dirve uuid's by looking at all of the dicts and returning the `server_name` where that UUID is located
[00:09:31] <MD500_Pilot> Does that make logical sense?
[00:10:26] *** Joins: fivegruel (~fivegruel@hsi-kbw-095-208-248-118.hsi5.kabel-badenwuerttemberg.de)
[00:10:29] <SnoopJ> yep
[00:10:32] <MD500_Pilot> `{server01': {'a6b32a82-23bb-4b16-90f3-fb75caaad61c': '/mnt/enclosure0/front/column0/drive0', '9517800b-6348-44d2-a688-3ae41580f1d8': '/mnt/enclosure0/front/column2/drive12'}}`
[00:10:39] *** Quits: Achylles (~Achylles_@2804:431:d724:510f:d7b1:4ecb:6877:1a1a) (Quit: Leaving)
[00:10:39] <alnr> i'm getting ModuleNotFound error on imports running in vscode, i've done the usual setup, with pythonEnv=... .env, anyone run into this and have any suggestions?
[00:12:21] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[00:14:26] <p-i-> alnr: Try activating the .venv from the CLI running ipython and importing the module, maybe...
[00:14:44] <p-i-> That should elucidate whether it's VSCode related
[00:15:38] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[00:15:52] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[00:16:48] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::791f) (Quit: Konversation terminated!)
[00:17:19] <alnr> btw my setup: https://bpa.st/O3UQ
[00:18:19] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[00:18:20] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 255 seconds)
[00:18:48] <alnr> its does bring up a terminal properly so far as the interpreter, but it doesnt have the workspace root in PYTHONPATH eg in the executing sript, i do sys.path and its not in there
[00:18:48] *** Joins: Pickchea (~private@user/pickchea)
[00:19:35] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Quit: ZNC 1.8.2 - https://znc.in)
[00:19:39] *** Joins: stig124 (~stig124@89.44.9.44)
[00:20:20] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[00:20:29] *** Quits: argento (~argent0@168-227-97-29.ptr.westnet.com.ar) (Quit: leaving)
[00:20:30] *** Joins: d3sync (~d3sync@62.1.243.19.dsl.dyn.forthnet.gr)
[00:20:59] *** Quits: fivegruel (~fivegruel@hsi-kbw-095-208-248-118.hsi5.kabel-badenwuerttemberg.de) (Remote host closed the connection)
[00:21:40] <SnoopJ> alnr, how did you install the package you're trying to import?
[00:22:12] *** Joins: nmoura (~nmoura@177.192.16.58)
[00:23:37] <alnr> so this is my code eg /path/to/myworkspace/mypkg1/mymodule.py where myworkspace is the folder opened as the workspace
[00:24:14] <alnr> the import being like import mypkg1.mymodule
[00:25:12] <alnr> so i would expect, that myworkspace would have to be either the current dir in which the interpreter runs, or appear in the PYTHONPATH env var
[00:25:38] *** Quits: NeoCore (~neocore@195.200.221.95) (Quit: Leaving)
[00:25:55] *** Joins: Auron (~Auron956@user/auron)
[00:26:22] <habnabit_> PYTHONPATH is almost never set
[00:27:03] <SnoopJ> it's best avoided, yep. The reason I ask how you installed it is that it's easy to install with one interpreter, run with another.
[00:27:05] <alnr> ah ok then maybe its supposed to have the workspace as the current dir (with the venv active ofc)
[00:27:13] <SnoopJ> And VSCode sometimes makes that problem even worse
[00:27:50] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[00:27:50] *** Quits: georgios (~georgios@ppp046176224061.access.hol.gr) (Ping timeout: 252 seconds)
[00:28:29] <BrokenCog> hello, the other day I was asking about a problem with curses displaying line characters:  it's definitely an issue with PuTTY ... anyone happen to have any experience with configuring the display/Appearance settings for PuTTY to render curses characters correctly?
[00:29:37] <alnr> in fact the terminal is in the workspace root (with the venv somewhere else, activated, as shown by the prompt)
[00:29:44] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[00:31:13] *** Joins: Naan (~Naan@user/naan)
[00:31:40] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[00:32:31] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:33:18] *** Joins: deivislk (~deivislk@189.7.117.212)
[00:33:50] *** Quits: decimuscorvinus_ (~jimmy@136.37.105.112) (Quit: Will return)
[00:34:43] *** Joins: nomic2 (~nomic@2a00:23c6:9902:2401:88c6:460a:5c1:7965)
[00:35:14] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:88c6:460a:5c1:7965) (Read error: Connection reset by peer)
[00:36:38] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 252 seconds)
[00:37:34] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[00:37:53] <jinsun> alnr: the .env file is used by the "GUI" parts like the debugger and the auto-completion, in the terminal you have to use terminal.integrated.env or set it yourself
[00:38:34] *** nomic2 is now known as nomic
[00:40:29] <alnr> i have to look into 'terminal.integrated.env' as i saw references but no doc. i noticed that if i run: /opt/venv3.8/bin/python3  -c "import sys;sys.path.append('.');  import mymodule" it is fine, by adding '.' to sys.path
[00:41:43] <alnr> so i wonder if the current path is somehow supposed to be set in sys.path or maybe it should come from pythonhome or some other place
[00:42:19] *** Quits: magla (~gelignite@55d49622.access.ecotel.net) (Quit: Stay safe!)
[00:42:50] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[00:42:59] <alnr> terminal.integrated.env sure sounds right though
[00:43:45] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[00:44:31] *** Joins: rany (~rany@user/rany)
[00:45:06] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[00:46:22] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:9b0:5b02:289d:6c18) (Ping timeout: 245 seconds)
[00:47:45] *** Joins: nmoura (~nmoura@177.192.16.58)
[00:47:49] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[00:48:51] *** Quits: nmoura (~nmoura@177.192.16.58) (Client Quit)
[00:48:53] *** Joins: i0e (~is0ke3@user/is0ke3)
[00:49:14] *** Quits: i0e (~is0ke3@user/is0ke3) (Client Quit)
[00:49:54] *** Quits: spiun (~spiun@89.36.68.218) (Ping timeout: 256 seconds)
[00:50:30] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Ping timeout: 265 seconds)
[00:52:30] *** Joins: nmoura (~nmoura@177.192.16.58)
[00:53:26] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Quit: Default quit message is difficult to set. If you don't see me returning, ask me? You will find me, if you want to)
[00:54:19] *** Joins: ovnicraft (~ovnicraft@45.70.237.20)
[00:55:20] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 265 seconds)
[00:56:01] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[00:57:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:58:35] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[00:58:57] *** Joins: ano (~weechat@user/ano)
[00:59:20] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[01:00:13] *** Joins: jetchisel (jetchisel@user/jetchisel)
[01:01:29] *** Quits: ovnicraft (~ovnicraft@45.70.237.20) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:01:41] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:88c6:460a:5c1:7965) (Quit: Leaving)
[01:02:17] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[01:02:19] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[01:03:07] *** Joins: ovnicraft (~ovnicraft@45.70.237.20)
[01:03:16] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: Blackpajamas)
[01:05:45] *** Quits: ovnicraft (~ovnicraft@45.70.237.20) (Client Quit)
[01:07:12] *** Joins: ovnicraft (~ovnicraft@45.70.237.20)
[01:08:25] *** Joins: georgios (~georgios@ppp046176224061.access.hol.gr)
[01:09:09] *** Joins: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[01:11:48] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:12:04] *** Quits: stig124 (~stig124@89.44.9.44) (Quit: stig124)
[01:13:27] *** Quits: ovnicraft (~ovnicraft@45.70.237.20) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:14:52] *** Praise- is now known as Praise
[01:17:12] *** Joins: ovnicraft (~ovnicraft@45.70.237.20)
[01:19:12] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[01:19:16] *** Joins: jazzy (~jaziz@2600:380:c174:6a3d:9430:49a9:10fc:d56c)
[01:19:26] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[01:20:46] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[01:21:46] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[01:22:46] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[01:22:58] *** Quits: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Quit: WeeChat 3.1)
[01:23:11] *** Quits: ovnicraft (~ovnicraft@45.70.237.20) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:23:31] *** Joins: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[01:23:52] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[01:23:55] <rannnn8888> help i make new porject in server ubuntu but the site dont find the static folder this my setting https://dpaste.org/KVDb
[01:24:16] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[01:24:57] *** Joins: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f)
[01:25:38] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[01:27:12] *** Quits: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Client Quit)
[01:28:39] *** Quits: jjasghar (~quassel@user/jjasghar) (Ping timeout: 258 seconds)
[01:28:39] *** Joins: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[01:29:47] *** Joins: lothar_m (~lothar_m@88.210.113.39.rev.optimus.pt)
[01:29:57] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[01:30:53] *** Quits: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Client Quit)
[01:30:54] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[01:31:04] *** Joins: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[01:31:10] *** Quits: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Client Quit)
[01:31:38] *** Joins: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[01:31:53] *** Joins: KombuchaKip (~kip@192.252.230.5)
[01:32:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:33:22] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 240 seconds)
[01:35:00] *** Quits: syrius (syrius@titan.stormtek.net) (Ping timeout: 276 seconds)
[01:35:12] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[01:36:31] *** Joins: dynotiger (~dynotiger@45.32.186.178)
[01:36:33] <dynotiger> Hello
[01:36:35] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[01:37:10] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:38:27] <dynotiger> I have a piece of code here: https://zerobin.net/?731391597d087ade#KEO2r3ZSsCVKISgqIRp/1ityRty3mEafNsJBAiLiODk=
[01:39:08] <dynotiger> Can someone explain to me what line 5 is: for dev in touchscreens if disable_touchpads else (touchscreens + touchpads):
[01:39:17] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[01:39:27] *** Quits: Akuli (~Akuli@82-203-162-166.bb.dnainternet.fi) (Quit: Leaving)
[01:39:32] <dynotiger> I try to print out `dev` but I get nothing
[01:39:39] *** Joins: pnoud (~pnoud@user/pnoud)
[01:41:26] <Repiphany> Explain what about it
[01:41:39] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[01:41:40] <graingert> dynotiger: it's a ternary in a for loop
[01:41:48] *** Joins: Guddu (~Guddu@117.222.80.5)
[01:41:57] <dynotiger> what is a ternary?
[01:42:53] <dynotiger> oh 3
[01:43:01] <graingert> that's trinary
[01:43:21] <SnoopJ> it's both
[01:43:50] <Repiphany> res = `a if b else c` is the same as `if b: res = a; else: res = c`
[01:43:50] <SnoopJ> dynotiger, it's an extension of the notion of unary, binary operators: a ternary has three operands, usually a predicate and two outcomes
[01:44:02] <graingert> https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator
[01:44:27] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:44:41] <SnoopJ> yea, if you're familair with C, it's the same as `predicate ? trueval : falseval`
[01:44:41] <graingert> dynotiger: so you read it like this:
[01:44:42] <graingert> for dev in (touchscreens if disable_touchpads else (touchscreens + touchpads)):
[01:44:44] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[01:45:07] *** Quits: WarpedAI (~Warped@user/warped) (Ping timeout: 265 seconds)
[01:45:08] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (Quit: See you on the flip side.)
[01:45:18] *** Quits: radu24240 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[01:46:11] *** Joins: oriba (~oriba@dynamic-089-014-023-203.89.14.pool.telefonica.de)
[01:46:35] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[01:47:53] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[01:48:32] *** Joins: KombuchaKip (~kip@192.252.230.5)
[01:48:35] <dynotiger> thanks I get it now.
[01:48:58] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:49:26] *** Joins: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[01:49:51] <graingert> maybe like this? https://www.irccloud.com/pastebin/e9Z89zzL/rotate.py
[01:51:25] *** Joins: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d)
[01:51:42] <graingert> dynotiger: ^
[01:52:04] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[01:52:54] *** Quits: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:4ec5:6765:26be:8e46) (Quit: WeeChat 3.2)
[01:53:14] *** Joins: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:4ec5:6765:26be:8e46)
[01:53:26] *** Quits: Ard1t (~ard1t@user/ard1t) (Quit: Nettalk6 - www.ntalk.de)
[01:54:12] *** Joins: nmoura (~nmoura@177.192.16.58)
[01:55:11] *** Quits: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:4ec5:6765:26be:8e46) (Client Quit)
[01:55:15] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:8458:ee87:2a2d:ffde)
[01:55:24] <dynotiger> graingert: when I try to print `dev` why do I get no output from either of them?
[01:55:29] *** Joins: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:4ec5:6765:26be:8e46)
[01:55:38] *** Quits: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:4ec5:6765:26be:8e46) (Client Quit)
[01:56:19] *** Joins: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:4ec5:6765:26be:8e46)
[01:56:42] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 240 seconds)
[01:57:06] *** Quits: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:4ec5:6765:26be:8e46) (Client Quit)
[01:57:10] <graingert> dynotiger: either of what?
[01:57:42] <dynotiger> graingert: in the ternary check on line 5(see line 6) and on line 12
[01:58:29] <graingert> dynotiger: What about if you use my version?
[01:58:44] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[01:58:53] <dynotiger> let me try.
[02:01:18] *** Quits: computeiro (~Wender@189.37.64.123) (Ping timeout: 256 seconds)
[02:01:34] *** Joins: t3nj1n (~t3nj1n@69.206.216.207)
[02:02:38] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[02:05:25] *** Quits: t3nj1n (~t3nj1n@69.206.216.207) (Client Quit)
[02:05:41] *** Joins: t3nj1n (~t3nj1n@69.206.216.207)
[02:06:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[02:08:16] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[02:10:21] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:11:15] *** Quits: t3nj1n (~t3nj1n@69.206.216.207) (Quit: WeeChat 2.8)
[02:11:30] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[02:12:46] <puff> Good afternoon. I have some code that includes a "VlcPlayer" class, which uses VLC to play videos.  I'm changing it over to mpv, and my reflex (from java) is to create a "VideoPlayer" superclass and then make both VlcPlayer and MpvPlayer descend from it.  Again, my reflex from Java is to define the interface on the superclass with the "abstract" keyword on the methods and empty methods.  How does this map to python?
[02:15:00] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[02:15:03] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[02:15:49] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[02:16:54] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[02:18:18] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[02:18:41] <caveman> what's the easiest way to print seconds since epoch (utc) as local time with whatever timezone the user has?
[02:18:47] <SnoopJ> puff, the closest direct analogy is abc.abstractmethod(), which requires that you give the base class a 'metaclass' of ABCMeta, and from which your variants could inherit, overriding that method. You can also just define a plain ol' class and `raise NotImplemented` in the method stubs.
[02:18:50] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[02:18:50] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[02:19:28] *** audio is now known as audiocat
[02:19:30] <grym> puff: there are also things like zope.interface
[02:19:40] <SnoopJ> yea, typing.Protocol in particular if you're on 3.8+
[02:20:04] <grym> protcols are very, very interesting and i should do more with them
[02:20:20] <SnoopJ> puff, sorry, I mean NotImplementedError. NotImplemented is for something totally different
[02:20:31] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 268 seconds)
[02:20:36] *** Gustavo6046_ is now known as Gustavo6046
[02:20:49] *** Joins: utunbu (~utunbu@user/utunbu)
[02:21:13] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Client Quit)
[02:21:25] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:22:04] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[02:22:51] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 250 seconds)
[02:23:11] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[02:23:31] *** Joins: t3nj1n (~t3nj1n@69.206.216.207)
[02:23:58] *** Quits: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54) (Ping timeout: 256 seconds)
[02:24:32] *** Joins: azazello (~azazello@109.75.158.195)
[02:24:35] *** Joins: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54)
[02:24:50] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 268 seconds)
[02:25:08] <puff> SnoopJ, grym: Thanks.
[02:26:33] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:26:45] <grym> puff: when i came to pythyon (from c#), i tried abcs and then threw them away.  protocols weren't around, then; they feel more naturally python-ish to me than trying to use my old patterns did
[02:26:53] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:27:03] *** Joins: p-i-_ (~Ohmu@node-11os.pool-118-173.dynamic.totinternet.net)
[02:27:03] *** Joins: mertyildiran (~mertyildi@157.230.123.143)
[02:27:16] <SnoopJ> a base class with stubs that raise is probably just fine here
[02:28:50] *** Quits: p-i- (~Ohmu@113.53.162.9) (Ping timeout: 252 seconds)
[02:31:06] <puff> I guess I should look into protocols then.
[02:31:12] <puff> But not right now :-)
[02:32:03] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:33:17] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:33:30] *** Quits: ferz (~ferz@93.48.251.229) (Ping timeout: 276 seconds)
[02:33:38] <SnoopJ> There was a good talk about them at PyCon by the author of Fluent Python: https://www.youtube.com/watch?v=kDDCKwP7QgQ
[02:33:55] *** Parts: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) ()
[02:34:08] <puff> Hm, if I never invoke the vlc player code, do I still need to import the vlc library?
[02:34:26] <SnoopJ> you need to if you use any names from within it
[02:34:29] <SnoopJ> otherwise nope :)
[02:34:31] <puff> The mpv player class ended up being significnatly simpler :-)
[02:34:41] *** Quits: dynotiger (~dynotiger@45.32.186.178) (Quit: Leaving)
[02:34:49] <puff> Well my vlc player class obviously uses the vlc methods and etc.
[02:34:51] <SnoopJ> I bet, if it's using that library with all the nice interface bits
[02:34:56] <puff> Yeah.
[02:35:14] <puff> python-mpv
[02:35:24] <puff> I thought about using the json ipc stuff but python-mpv was fast and easy.
[02:35:27] *** Joins: Naan` (~Naan@user/naan)
[02:36:08] <puff> I have higher priorities but I'd like to look into driving two monitors simultaneously.
[02:36:26] *** Quits: asix (~Anders@user/asix) (Ping timeout: 252 seconds)
[02:36:35] <puff> mpv is *also* performing better than vlc was, much less of a noticeable gap between videos.
[02:36:37] *** cman_ is now known as cman
[02:36:51] <SnoopJ> it's definitely crafted a little closer to your task
[02:38:32] <grym> mpv's rad
[02:38:58] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 240 seconds)
[02:39:02] <puff> Another question is how well it supports jumping to a specific frame.
[02:39:16] *** Joins: xkuru (~xkuru@user/xkuru)
[02:39:32] <puff> Again, not high priority right now, but for the next version I want to see if I can figure out how to create the illusion a video moving from monitor to monitor, while it plays.
[02:39:37] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[02:40:09] *** Quits: xkuru (~xkuru@user/xkuru) (Client Quit)
[02:40:42] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[02:41:15] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[02:41:24] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[02:42:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:43:27] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[02:46:26] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[02:46:34] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[02:47:14] *** Joins: jdiez (~jdiez@static.197.82.46.78.clients.your-server.de)
[02:47:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[02:48:39] *** Joins: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de)
[02:49:21] <puff> What do people like for logging libraries in python?
[02:49:23] *** Quits: Fridtjof (~fridel@thonk.9net.org) (Quit: ZNC - http://znc.in)
[02:49:24] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (Remote host closed the connection)
[02:49:36] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (Remote host closed the connection)
[02:49:55] <grym> stlib, structlog, eliot are the three that get bandied about the most
[02:50:02] <grym> they're pretty self-dissimilar
[02:50:03] <SnoopJ> the stdlib `logging` library is extremely full featured
[02:50:26] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
[02:50:45] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[02:50:50] *** Joins: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10)
[02:51:09] <mefistofeles> I've only used the one in stdlib tbh, does the job
[02:51:55] *** Joins: asix (~Anders@user/asix)
[02:51:55] <SnoopJ> You definitely have to sit down with its documentation or a good 3rd-party tutorial to get your head around the organization, but yea, it's got lots of the obvious stuff in there "batteries included"
[02:52:33] <SnoopJ> puff, if you're interested in logging for debugging purposes, I'm also quite fond of https://pypi.org/project/q, which is helpful for debugging purposes.
[02:53:18] <InPhase> puff: f.write is pretty solid for logging.  :)  It's super easy to customize a logging class to exactly what you want it to do if the standard solution isn't a perfect fit.
[02:53:45] <SnoopJ> InPhase, you mean just "open a file and write to it?"
[02:53:49] <SnoopJ> or is f.write a library
[02:54:03] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:8458:ee87:2a2d:ffde) (Quit: Leaving)
[02:54:11] <InPhase> SnoopJ: Yeah, the just open a file and write to it one.  :)
[02:54:25] <grym> that's the spirit of q, too
[02:54:29] <SnoopJ> `print("But wait, there's a keyword argument for that!", file=f)` :)
[02:54:31] *** Quits: fluffyballoon (~fluffybal@pat-verona-l.epic.com) (Ping timeout: 246 seconds)
[02:54:42] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 245 seconds)
[02:54:43] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:f9c1:7a67:9f07:1e57)
[02:54:47] *** Joins: bninja (~bloodninj@user/bloodninja)
[02:55:49] <caveman> how is this code giving local timezone?  ``datetime.datetime.now(datetime.timezone.utc).astimezone().tzinfo''?
[02:56:33] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[02:56:42] <InPhase> SnoopJ: Sure, but I like a little formatting and parsing.  I usually add datetime stamps to every line.  For debug logging purposes I like to parse out tracebacks from passed exceptions.  Sometimes I add bonuses like extracting the right data from a custom class used in that program if it shows up often.
[02:56:50] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[02:57:16] <SnoopJ> InPhase, I like that stuff too, it's why I use `logging`. But sure, you can always roll your own
[02:58:35] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Ping timeout: 265 seconds)
[02:59:58] *** Joins: nmoura (~nmoura@177.192.16.58)
[03:01:06] *** Quits: sectec84 (~sectec84@24.18.109.173) (Ping timeout: 240 seconds)
[03:01:18] *** Quits: drant (~drant@2a05:f480:1c00:d82::) ()
[03:01:47] *** Joins: sectec84 (~sectec84@24.18.109.173)
[03:02:12] *** Quits: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10) (Ping timeout: 245 seconds)
[03:02:28] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:02:52] <puff> This q library looks handy, yeah.
[03:03:52] <puff> Mainly, at the moment, I have a variety of print statements scattered through out the code, looking at deploying this soon and I want to avoid filling the disks up with logs.
[03:04:13] <puff> So my first thought is switch to a real logging tool so I can tune what prints get to the log file.
[03:04:25] <SnoopJ> the support for levels is the thing that usually draws me to `logging`, and then the rest is there if/when I want it
[03:04:33] *** Quits: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com) (Read error: Connection reset by peer)
[03:04:33] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:f9c1:7a67:9f07:1e57) (Read error: Connection reset by peer)
[03:04:50] *** Joins: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com)
[03:04:54] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:f9c1:7a67:9f07:1e57)
[03:05:02] <puff> Yeah, same here.
[03:05:04] <puff> Hm,that's annoying.
[03:05:46] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[03:05:55] <puff> A few times it just gave me a black screen for a few seconds.  I currently have it configured to only play each video for 2 seconds, for testing/debugging.
[03:06:49] <puff> I was trying to figure that out and of course didn't have -u in the systemd execstart command, so the log lines were flushing in intermittent batches, which makes it hard to debug.
[03:06:55] <puff> Okay, so go in and add -u and restart systemd... and now it's not doing the black screen thing.
[03:07:02] <puff> I'll let it run for a while and see...
[03:07:30] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[03:08:35] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:f9c1:7a67:9f07:1e57) (Client Quit)
[03:08:55] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:f9c1:7a67:9f07:1e57)
[03:10:03] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:10:04] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[03:10:23] <InPhase> SnoopJ: Well, logging just requires too much micromanaging of the messages for most of what I want.  I like to centralize things, especially when it's not too hard to do.
[03:10:38] <SnoopJ> InPhase, any reason you don't subclass Logger when you do DIY?
[03:13:23] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 255 seconds)
[03:14:07] <InPhase> SnoopJ: Well, because sometimes I need a hundred or so different log files, parameterized, and created only if needed.  logging doesn't look to me to be designed well for this, so it doesn't add much for me.
[03:14:19] *** Joins: dre (~dre@2001:8003:c932:c301:e8e8:61dd:d08f:b129)
[03:14:44] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 255 seconds)
[03:14:53] *** Quits: oriba (~oriba@dynamic-089-014-023-203.89.14.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:16:57] <SnoopJ> InPhase, from that description I'd say that the Handler sounds like it would fit that, but perhaps it doesn't qualify as "well" heh. It would definitely be a task to deal with that many, I think.
[03:17:50] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[03:18:22] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 256 seconds)
[03:24:00] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[03:24:52] *** Joins: koziad (~koz@74.102.176.11)
[03:25:32] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[03:26:18] *** Quits: schumaml1 (~schumaml@dslb-094-216-170-120.094.216.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[03:26:44] *** Quits: mertyildiran (~mertyildi@157.230.123.143) (Quit: WeeChat 2.8)
[03:26:49] *** Joins: thiras (~thiras@user/thiras)
[03:27:32] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[03:27:47] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 255 seconds)
[03:28:42] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[03:28:58] *** Joins: schumaml1 (~schumaml@dslb-092-074-011-162.092.074.pools.vodafone-ip.de)
[03:29:07] <InPhase> SnoopJ: For context that use case arises for me in big data analyses run massively in parallel, and for marking which data groups errors occur in.
[03:32:13] <SnoopJ> InPhase, makes sense. I think I'd like logging's hierarchical organization for that sort of thing, but I confess that most of my physics sims dumped things fairly ad-hoc. And when it came to errors, they just crashed :)
[03:32:36] <SnoopJ> I guess that's because "massive" probably means "no, really, massive" here
[03:34:47] *** Joins: y1n (~y1n@84-115-64-197.wifi.dynamic.surfer.at)
[03:35:08] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:35:12] *** Quits: dece (~dece@dece.space) (Quit: Quit)
[03:35:19] *** Quits: schumaml1 (~schumaml@dslb-092-074-011-162.092.074.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[03:36:43] *** Joins: dece (~dece@dece.space)
[03:37:14] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[03:37:58] *** Joins: schumaml1 (~schumaml@dslb-088-067-051-170.088.067.pools.vodafone-ip.de)
[03:39:19] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[03:40:16] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[03:40:22] <InPhase> SnoopJ: Tonight my after-work assignment is to write up a justification for why we need to add another 100TB of storage for running the next experiment.
[03:40:30] *** Joins: pnoud (~pnoud@user/pnoud)
[03:40:49] <SnoopJ> Ahh, proposal season...
[03:43:10] *** Quits: schumaml1 (~schumaml@dslb-088-067-051-170.088.067.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[03:43:49] *** Joins: adamts3 (~Adam@user/mysteryblokhed)
[03:44:44] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 258 seconds)
[03:45:21] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: gildasio)
[03:45:28] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[03:46:18] *** Quits: adamts (~Adam@user/mysteryblokhed) (Ping timeout: 276 seconds)
[03:46:18] *** adamts3 is now known as adamts
[03:46:56] *** Quits: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[03:48:34] *** Joins: nmoura (~nmoura@177.192.16.58)
[03:48:47] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Quit: ZNC 1.8.2 - https://znc.in)
[03:49:40] *** Quits: nmoura (~nmoura@177.192.16.58) (Client Quit)
[03:51:20] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[03:51:45] *** Joins: tims (~tims@220-245-254-151.static.tpgi.com.au)
[03:52:01] *** Quits: y1n (~y1n@84-115-64-197.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[03:52:11] *** Joins: y1n (~y1n@84-115-64-254.wifi.dynamic.surfer.at)
[03:53:28] <nomic> 100tb is insane
[03:53:41] *** Quits: Cache_Money (~Cache_Mon@c-67-160-112-6.hsd1.wa.comcast.net) (Quit: Client closed)
[03:55:22] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 240 seconds)
[03:57:08] *** Quits: cedric (~cedric@2a01:cb11:867:c200:5175:4046:4abc:8403) (Quit: Konversation terminated!)
[03:58:36] *** Quits: Guddu (~Guddu@117.222.80.5) (Quit: Leaving)
[03:59:19] *** Quits: beanzilla (~beanzilla@user/beanzilla) (Quit: ZNC 1.8.2 - https://znc.in)
[04:02:11] *** Joins: wyclif (~wyclif@user/wyclif)
[04:02:49] *** Quits: ambv (~ambv@c138-59.icpnet.pl) (Quit: Textual IRC Client: www.textualapp.com)
[04:03:06] *** Joins: schumaml1 (~schumaml@dslb-092-074-012-234.092.074.pools.vodafone-ip.de)
[04:03:13] *** Joins: ambv (~ambv@c138-59.icpnet.pl)
[04:06:32] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[04:07:13] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[04:09:54] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 240 seconds)
[04:10:48] *** Joins: ionface (~ionface@user/ionface)
[04:11:16] *** Quits: notevil (~notevil@user/notevil) (Quit: ZNC 1.8.2 - https://znc.in)
[04:11:29] *** Joins: notevil (~notevil@user/notevil)
[04:12:05] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Ping timeout: 244 seconds)
[04:15:32] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[04:16:44] *** Quits: schumaml1 (~schumaml@dslb-092-074-012-234.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:20:43] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[04:20:51] *** Quits: ambv (~ambv@c138-59.icpnet.pl) (Quit: Bye)
[04:20:52] *** Joins: ano (~weechat@user/ano)
[04:20:56] *** Joins: Wulf4 (~Wulf@user/wulf)
[04:21:54] *** Joins: zenloading (~zenloadin@user/zenloading)
[04:24:05] *** Quits: Naan` (~Naan@user/naan) (Quit: Leaving)
[04:24:37] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[04:24:37] *** Wulf4 is now known as Wulf
[04:24:39] *** Joins: schumaml1 (~schumaml@dslb-188-104-180-174.188.104.pools.vodafone-ip.de)
[04:26:13] *** Joins: Dotz0cat_ (~Dotz0cat@h193.175.40.162.dynamic.ip.windstream.net)
[04:26:33] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[04:26:39] *** Quits: Dotz0cat (~Dotz0cat@h216.44.90.75.dynamic.ip.windstream.net) (Ping timeout: 268 seconds)
[04:27:32] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[04:28:11] *** Joins: KombuchaKip (~kip@192.252.230.5)
[04:29:07] *** Dotz0cat_ is now known as Dotz0cat
[04:29:13] <puff> Hm, so, installation/packaging/etc....
[04:29:57] *** Quits: kolcon (~kolcon@v.kolouch.org) (Ping timeout: 252 seconds)
[04:30:31] *** Joins: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net)
[04:30:50] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[04:33:09] *** Joins: kolcon (~kolcon@v.kolouch.org)
[04:33:46] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[04:35:34] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 268 seconds)
[04:36:21] *** Quits: qlixed (~qlixed@152.170.36.244) (Ping timeout: 276 seconds)
[04:39:41] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:42:26] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:42:37] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 245 seconds)
[04:42:43] *** Joins: nmoura (~nmoura@177.192.16.58)
[04:43:09] *** Joins: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de)
[04:43:20] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[04:43:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:44:07] *** Quits: nmoura (~nmoura@177.192.16.58) (Client Quit)
[04:44:40] *** Joins: nmoura (~nmoura@177.192.16.58)
[04:47:30] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[04:48:18] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 265 seconds)
[04:50:08] *** Quits: hposca (~hposca@node-1w7jr9phoke2tgwo5dsrqdhce.ipv6.telus.net) (Ping timeout: 255 seconds)
[04:50:39] *** Joins: vimart (~vimart@148.252.128.55)
[04:50:47] <SnoopJ> puff, what about it?
[04:50:52] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[04:51:18] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[04:52:23] *** Quits: y1n (~y1n@84-115-64-254.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[04:52:50] *** Quits: coc0nut (~coc0nut@167.99.37.181) (Quit: ZNC 1.8.2 - https://znc.in)
[04:52:53] *** Joins: y1n (~y1n@84-115-65-56.wifi.dynamic.surfer.at)
[04:54:00] *** Quits: zenloading (~zenloadin@user/zenloading) (Quit: Leaving)
[04:54:00] *** Joins: coc0nut (~coc0nut@167.99.37.181)
[04:54:04] *** Quits: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54) (Ping timeout: 268 seconds)
[04:54:33] *** Joins: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54)
[04:54:38] *** Quits: squirrel (~sq@user/squirrel) (Ping timeout: 255 seconds)
[04:55:55] *** Quits: georgios (~georgios@ppp046176224061.access.hol.gr) (Ping timeout: 268 seconds)
[04:57:11] *** Quits: ATAD (~ATAD@user/atad) (Ping timeout: 258 seconds)
[04:57:46] *** Quits: y1n (~y1n@84-115-65-56.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[04:57:56] <MD500_Pilot> So I have a file that contains a list of dicts `[{k {k, v}}, {k {k, v}}]`, and I would like to be able to check that list of dicts for a specific value [{k {k, `v`}}, {k {k, v}}] and then return both the initial `k`  [{`k` {k, v}}, {k {k, v}}] as well as the value of the key match [{k {k, `v`}}, {k {k, v}}]
[04:58:16] <MD500_Pilot> This is the file: https://bpa.st/6JMQ
[04:58:53] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:59:43] <MD500_Pilot> So I want to search for `a6b32a82-23bb-4b16-90f3-fb75caaad61c` and have it return {'servernas01': '/mnt/enclosure0/front/column0/drive0'}
[04:59:59] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[05:00:15] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[05:00:36] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[05:00:55] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[05:01:16] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[05:02:12] *** Gustavo6046_ is now known as Gustavo6046
[05:02:42] *** Joins: squirrel (~sq@user/squirrel)
[05:03:14] *** Joins: nmoura (~nmoura@177.192.16.58)
[05:03:26] <InPhase> MD500_Pilot: Is line 4 a human typo, or a data quality issue needing dealt with?
[05:04:44] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.2)
[05:05:25] <MD500_Pilot> :-)  My bad copy and paste!
[05:05:33] <MD500_Pilot> human type
[05:05:35] <MD500_Pilot> type
[05:05:48] <MD500_Pilot> I am trying something like this: `for k, v in [(k, v) for x in servers for (k, v) in x.items()]:`
[05:05:56] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:f9c1:7a67:9f07:1e57) (Quit: Leaving)
[05:06:07] <MD500_Pilot> ` if 'db0f5649-6d9d-47fd-96e5-2f1f3c170fbd' in v:`
[05:06:17] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:06:29] <MD500_Pilot> `print(k, v)` but I am getting the entire first dict
[05:06:49] *** Joins: zenloading (~zenloadin@user/zenloading)
[05:08:02] <MD500_Pilot> I think I need to iterate a bit deeper, but I just can't figure it out
[05:08:32] <SnoopJ> MD500_Pilot, that comprehension looks weird, in part because it's reusing almost every name that appears in it.
[05:08:52] *** Quits: asix (~Anders@user/asix) (Ping timeout: 245 seconds)
[05:09:10] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[05:09:10] <SnoopJ> and the outer layer looks pointless
[05:09:11] <MD500_Pilot> not surprising, I am just trying to learn comprehension better
[05:09:40] *** Joins: djapo (~archangel@user/djapo)
[05:09:49] *** Quits: zenloading (~zenloadin@user/zenloading) (Remote host closed the connection)
[05:10:12] <MD500_Pilot> that was the only way I could get it to actually match the test
[05:10:31] *** Quits: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca) (Quit: Client closed)
[05:10:36] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:10:47] *** Joins: fofoni_ (~fofoni@user/fofoni)
[05:11:13] <habnabit_> MD500_Pilot, sounds like you want a database. have you tried sqlite??
[05:11:53] <MD500_Pilot> yeah, I would rather not add the complexity of a database if I can help it, it's just a simple file
[05:12:16] <habnabit_> MD500_Pilot, sqlite is pretty simple. it too is 'just a simple file'
[05:12:17] <SnoopJ> A database can be just a simple file, too.
[05:12:27] <habnabit_> MD500_Pilot, https://dataset.readthedocs.io/en/latest/
[05:12:34] *** Joins: zenloading (~zenloadin@user/zenloading)
[05:12:38] *** Quits: fofoni (~fofoni@user/fofoni) (Ping timeout: 255 seconds)
[05:12:40] <SnoopJ> or a JSON file
[05:12:58] <MD500_Pilot> that is pretty much what this is, a json file
[05:12:59] <SnoopJ> I'm not sure what the question is, though.
[05:13:58] <MD500_Pilot> I am wanting to search the dicts and if it finds a match return the outer Key and inner Value of the key searched.
[05:14:14] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[05:14:16] *** Quits: fofoni_ (~fofoni@user/fofoni) (Client Quit)
[05:16:15] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[05:16:37] <MD500_Pilot> `[{k: {k, v}}, {k: {k, v}}]` In this case the outer `k` is my server name, the inner `{k, v}` are drive UUIDs followed by mountpoints with `k` being the UUID and `v` being the mountpoint. I want to be able to search for a specific UUID and if it is found, return the serner name and mountpoint.
[05:17:16] <habnabit_> MD500_Pilot, sounds like it'd be easier if you transformed the data into a dict mapping from uuid to server
[05:17:32] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[05:17:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[05:17:35] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[05:18:02] *** Quits: DesCaFeinado (~CaFeINA@2001:8a0:ddef:9e00:81e9:7d38:c401:bf08) (Quit: Leaving)
[05:19:49] <MD500_Pilot> ok, I am not familiar with dict mapping, i'll do some googling
[05:20:21] <habnabit_> MD500_Pilot, no, 'dict' is the noun
[05:20:25] <SnoopJ> A mapping is a thingy that has keys and values associated with the keys.
[05:20:26] <habnabit_> MD500_Pilot, not 'dict mapping'
[05:20:42] <MD500_Pilot> so `map()`
[05:20:44] <SnoopJ> hno
[05:20:46] <SnoopJ> no*
[05:20:47] <habnabit_> MD500_Pilot, again, no
[05:20:56] <MD500_Pilot> :-)
[05:20:57] <SnoopJ> (that one is an unfortunate affectation of computer science)
[05:21:04] <habnabit_> MD500_Pilot, a dict maps from keys to values. it is a mapping from keys to values
[05:21:14] <MD500_Pilot> that is what I have now I thought
[05:21:22] <habnabit_> MD500_Pilot, your keys aren't uuids
[05:21:39] <MD500_Pilot> `'a6b32a82-23bb-4b16-90f3-fb75caaad61c': '/mnt/enclosure0/front/column0/drive0'`
[05:21:46] <SnoopJ> MD500_Pilot, they mean your outer keys
[05:22:29] <SnoopJ> i.e. a dict where the keys are drive UUIDs, and the values are the servers those drives live in.
[05:22:35] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1d78:91e0:1aa2:663d)
[05:23:02] <MD500_Pilot> humm, not sure how that would work, the individual servers kick out the dict with uuid:mountpoint mapping, then they all come together in a single file based on the key of the server name
[05:23:32] <habnabit_> MD500_Pilot, yes, you have described your current data. i'm saying: change its shape
[05:23:56] <SnoopJ> It would make a lot of sense if looking up drives is a thing you will do often.
[05:23:58] <habnabit_> MD500_Pilot, make your top level dict {'a6b32a82-23bb-4b16-90f3-fb75caaad61c': ('servername', '/mnt/enclosure0/front/column0/drive0')}
[05:24:25] <MD500_Pilot> so the `v` is a tuple
[05:24:31] <SnoopJ> right
[05:24:32] <MD500_Pilot> the `k` being the UUID
[05:24:42] <habnabit_> MD500_Pilot, or a better data structure
[05:25:21] <SnoopJ> Perhaps an object that represents the associated server
[05:25:41] <habnabit_> MD500_Pilot, anyway this is trivial as a database with three columns
[05:25:44] <MD500_Pilot> i thought dicts were better data structures :-)
[05:25:56] <habnabit_> MD500_Pilot, dataset even has an example of this exact thing on its main page
[05:25:58] <SnoopJ> better than what?
[05:26:05] *** Quits: akk (~akk@75.161.155.222) (Quit: +++)
[05:26:50] <SnoopJ> (and better *at* what?)
[05:26:52] <MD500_Pilot> seems like a lot of work to spin up a database server and then write all the database code to read and write data to it instead of just iterate through a small dict file
[05:27:04] <SnoopJ> A dict's most useful property is that you can look up the value of a key very easily: d[k]
[05:27:05] <habnabit_> MD500_Pilot, 'database server'? again, we're talking about sqlite
[05:27:17] <SnoopJ> A database can just be a file.
[05:27:20] <habnabit_> MD500_Pilot, did you see the dataset docs? its example is very small
[05:27:29] <MD500_Pilot> that is what I am trying to do, just match a UUID to a server and mountpoint but across many servers
[05:27:33] <SnoopJ> If you use Firefox or Chrome, you have dozens of them in your user profile just for that one application :)
[05:27:43] <SnoopJ> but you can use them in much much smaller/simpler applications, too.
[05:27:55] <habnabit_> it's a very good single-file embedded database
[05:28:07] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:28:09] <SnoopJ> MD500_Pilot, right, and the way you are doing it right now gets rid of the dict's best property: you have to scan the entire dict to find your target the way you've laid out your data.
[05:28:17] <SnoopJ> In fact, the code you shared earlier scans the entire dict TWICE.
[05:29:06] *** Quits: zeenk (~zeenk@2a02:2f04:a008:d600:18f2:3421:bac6:8f38) (Quit: Konversation terminated!)
[05:29:29] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[05:30:00] *** Quits: baloona (~baloona@baloona.de) (Quit: WeeChat 2.3)
[05:30:00] *** Quits: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1) (Quit: hej-hej!)
[05:30:15] *** Joins: qlixed (~qlixed@181.44.129.13)
[05:30:19] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[05:30:24] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:32] <MD500_Pilot> So this is the function that actually generates the dict for each server, I am guessing I would need to rewrite it....  https://bpa.st/TDOA
[05:30:32] *** Joins: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1)
[05:31:59] *** Joins: ATAD (~ATAD@user/atad)
[05:32:00] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-f513-f13a-b418-4a09.res6.spectrum.com) (Read error: Connection reset by peer)
[05:32:17] <SnoopJ> If we take the data at face value and assume there is EXACTLY ONE matching UUID (I'll call it `needle`), you can do `target_server = next((srv for srv in servers if needle in src), None)`, and you'll have the dict associated with a UUID (or None) in that name.
[05:32:17] *** Joins: zaquest (~notzaques@5.128.210.178)
[05:32:37] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[05:33:19] <SnoopJ> But this still may scan the entire dict, so it's being pretty dang wasteful as well as being a LOT harder to read than `target_server = dsk2srv.get(needle, None)`
[05:33:39] <habnabit_> MD500_Pilot, my version is fewer lines https://bpa.st/6NZQ
[05:33:42] <SnoopJ> (where dsk2srv is the result of the transformation we're discussing)
[05:34:04] <habnabit_> MD500_Pilot, then to search, table.find_one(uuid='a6b32a82-23bb-4b16-90f3-fb75caaad61c')
[05:34:11] <habnabit_> MD500_Pilot, way easier
[05:34:19] *** Joins: cjb (~cjb@user/cjb)
[05:34:26] *** Joins: vlm (~vlm@user/vlm)
[05:35:08] <MD500_Pilot> the only problem that I see is that I have 10 servers
[05:35:19] <habnabit_> MD500_Pilot, and that is a problem because..?
[05:36:15] <MD500_Pilot> well, how do I search across 10 different databases? In my case I copy all of those individual files to a central server, then append them all in one file which is how I get this: https://bpa.st/4AWA
[05:36:25] <SnoopJ> You already have that problem
[05:36:31] *** Joins: schumaml2 (~schumaml@dslb-178-002-177-215.178.002.pools.vodafone-ip.de)
[05:36:43] <SnoopJ> You're just solving it in a way that requires you to write all of that machinery from scratch
[05:37:06] *** Joins: asix (~Anders@user/asix)
[05:37:13] <SnoopJ> granted, drive configuration won't change often, so probably that can just be done by hand.
[05:37:19] <SnoopJ> Or I assume it won't change often.
[05:37:19] <MD500_Pilot> I'm not following...
[05:37:27] *** Quits: schumaml1 (~schumaml@dslb-188-104-180-174.188.104.pools.vodafone-ip.de) (Ping timeout: 276 seconds)
[05:37:39] <MD500_Pilot> I already have a totall differnt set of utilities to manage the drives themselves
[05:37:48] <MD500_Pilot> I call it `auto_drive.py` :-)
[05:37:50] <SnoopJ> No, I suppose not. That's why I provided a solution to the data you have in-hand, too.
[05:39:15] *** Joins: schumaml3 (~schumaml@dslb-188-104-167-213.188.104.pools.vodafone-ip.de)
[05:40:03] <MD500_Pilot> so i would there be an easy way to take this: https://bpa.st/4AWA and dump it into the sqlite db? On of the reason I do it the way I do is that I move drives around a lot. That list is updated every 60 seconds, so if I move a drive from `server01` to `server07`, 60 seconds later all of the other servers know that i has been moved
[05:40:40] *** Quits: adamts (~Adam@user/mysteryblokhed) (Quit: That's all Folks!)
[05:40:50] <MD500_Pilot> I just want a simple way to run a quick query and see what server a specific UUID is on
[05:40:59] *** Quits: schumaml2 (~schumaml@dslb-178-002-177-215.178.002.pools.vodafone-ip.de) (Ping timeout: 255 seconds)
[05:41:09] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: Blackpajamas)
[05:41:16] <SnoopJ> Yes, and we're trying to explain to you that the way this data is organized makes that task MUCH more complex than it needs to be.
[05:41:21] *** Joins: pnoud (~pnoud@user/pnoud)
[05:42:12] <MD500_Pilot> I get that, but I guess I just don't get how to convert what I have (given that it comes from a bunch of different servers) into a better layout
[05:42:32] *** Joins: schumaml4 (~schumaml@dslb-092-074-014-126.092.074.pools.vodafone-ip.de)
[05:42:36] <SnoopJ> `dsk2srv = {"a6b...": ("servernas01": "/mnt/enclosure0/frontcolumn0/drive"), ...}` is what would fit this task perfectly, lookup becomes: `dsk2srv[needle]`
[05:42:45] *** Joins: syrius (syrius@titan.stormtek.net)
[05:43:23] <MD500_Pilot> That I get, the issue is creating that data structure :-)
[05:44:38] *** Quits: schumaml3 (~schumaml@dslb-188-104-167-213.188.104.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[05:44:55] *** Quits: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net) (Quit: Client closed)
[05:45:07] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[05:45:30] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[05:46:18] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[05:46:36] <InPhase> MD500_Pilot: https://bpa.st/7K3A
[05:47:36] <MD500_Pilot> wow
[05:47:37] <InPhase> MD500_Pilot: Instant table for your tabular data.
[05:49:11] <InPhase> MD500_Pilot: Do a print(df) to see a proper layout for that.
[05:50:10] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Ping timeout: 265 seconds)
[05:50:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[05:50:46] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[05:51:01] *** Joins: TheFreim (~TheFreim@50-81-18-58.client.mchsi.com)
[05:51:19] *** morrigan_ is now known as morrigan
[05:51:29] <SnoopJ> MD500_Pilot, https://bpa.st/YY7A
[05:51:54] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[05:51:57] *** Joins: wyclif (~wyclif@user/wyclif)
[05:52:02] *** Quits: schumaml4 (~schumaml@dslb-092-074-014-126.092.074.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[05:52:25] <InPhase> SnoopJ: I win the golf!  ;)
[05:52:26] *** Quits: TheFreim (~TheFreim@50-81-18-58.client.mchsi.com) (Client Quit)
[05:52:49] <SnoopJ> InPhase, of course you do, you let the other guy put you on the green ;)
[05:53:00] <InPhase> Hahah.
[05:53:07] *** Joins: schumaml4 (~schumaml@dslb-178-002-179-051.178.002.pools.vodafone-ip.de)
[05:54:27] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:54:41] *** Joins: califax- (~califax@user/califx)
[05:54:54] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[05:55:00] *** Quits: asix (~Anders@user/asix) (Ping timeout: 265 seconds)
[05:55:10] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 252 seconds)
[05:55:19] <SnoopJ> MD500_Pilot, given an existing drv2srv dict, you can update() it with the result of transform_server() from that as needed, and you can also remove drives or change their mount points much more easily. Seems like a better fit for a drive-first view of your task.
[05:55:28] *** Joins: CombatVet (~c4@user/combatvet)
[05:55:29] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[05:55:38] *** Quits: deivislk (~deivislk@189.7.117.212) (Quit: deivislk)
[05:55:59] <SnoopJ> Of course, if you have many tasks to perform, the argument only gets stronger for something more database-y (pandas isn't far off from *being* a database)
[05:56:05] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:56:21] <MD500_Pilot> Not a lot of tasks like that
[05:56:36] <SnoopJ> Yea, I figured as much. The drive is the principal unit of concern.
[05:56:41] <MD500_Pilot> yes
[05:56:53] <MD500_Pilot> and that file is updated every 60 seconds
[05:56:58] <SnoopJ> So a dict of drive UUIDs to [whatever data needs to be associated with them] makes maximal sense to me
[05:57:44] <MD500_Pilot> so would I just rewrite this: https://bpa.st/TDOA to match the new data structure and then combine them, would that be easier or leave it like it is and trandform it when I need to do a lookup?
[05:57:45] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 258 seconds)
[05:57:45] *** brabrax_ is now known as brabrax
[05:58:00] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[05:58:09] *** califax- is now known as califax
[05:58:14] <SnoopJ> You would want to transform the data as it is created and update dsk2srv as necessary.
[05:58:27] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[05:58:50] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[05:59:28] <MD500_Pilot> `dsk2srv` would just be loading the file, correct?
[06:00:28] *** Joins: schumaml (~schumaml@dslb-094-216-174-099.094.216.pools.vodafone-ip.de)
[06:00:49] *** Quits: schumaml4 (~schumaml@dslb-178-002-179-051.178.002.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[06:01:00] <MD500_Pilot> `dsk2srv = {"a6b...": ("servernas01": "/mnt/enclosure0/frontcolumn0/drive"), ...}`  would be `dsk2srv = json.loads(uuid_file.read())`
[06:01:12] <MD500_Pilot> ?
[06:05:16] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1d78:91e0:1aa2:663d) (Quit: Leaving)
[06:05:37] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[06:06:10] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Remote host closed the connection)
[06:08:06] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:9af4:e021:9dca:50c4) (Remote host closed the connection)
[06:08:13] <SnoopJ> MD500_Pilot, https://bpa.st/XRFQ
[06:11:13] <MD500_Pilot> disks.append((k, v))
[06:11:14] <MD500_Pilot> AttributeError: 'function' object has no attribute 'append'
[06:11:45] <SnoopJ> MD500_Pilot, sorry, that should be `dsks.append`
[06:12:04] <SnoopJ> I originally named it disks, thought better of it, and apparently missed the most important replacement 😒
[06:12:30] <MD500_Pilot> :-)
[06:12:49] *** Quits: lothar_m (~lothar_m@88.210.113.39.rev.optimus.pt) (Quit: WeeChat 3.2-rc1)
[06:12:52] *** Joins: schumaml1 (~schumaml@dslb-188-104-182-068.188.104.pools.vodafone-ip.de)
[06:13:26] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[06:13:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[06:13:52] *** Quits: schumaml (~schumaml@dslb-094-216-174-099.094.216.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[06:13:56] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[06:15:11] *** Gustavo6046_ is now known as Gustavo6046
[06:15:46] <MD500_Pilot> ok, that works great and I think I can actually understand it, but I have 10 servers that are going to generate this file, I need to somehow be able to tag the servername against it
[06:16:13] <MD500_Pilot> `dsk2srv = {"a6b...": ("servernas01": "/mnt/enclosure0/frontcolumn0/drive"), ...}`
[06:16:24] <SnoopJ> that is a SyntaxError
[06:16:33] <SnoopJ> but I don't understand what you said, can you say more?
[06:17:15] <MD500_Pilot> ?
[06:17:20] <MD500_Pilot> say more?
[06:17:45] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[06:17:47] <SnoopJ> MD500_Pilot, "I need to somehow be able to tag the servername against it" means approximately nothing to me
[06:18:07] <SnoopJ> If you can describe what you need to do, perhaps we can help
[06:18:13] <MD500_Pilot> oh, when I look up the uuid I need the servername and the mountpoint
[06:18:21] <MD500_Pilot> `dsk2srv = {"a6b...": ("servernas01": "/mnt/enclosure0/frontcolumn0/drive"), ...}`
[06:18:33] <MD500_Pilot> this one you have the servername and mount as a tuple
[06:18:45] <SnoopJ> is it a problem if it's a tuple?
[06:19:24] *** Quits: emerent (~quassel@p200300cd57058c5aba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:19:27] <SnoopJ> and again, that sample of code is invalid syntax
[06:19:38] *** Joins: emerent (~quassel@p200300cd57058cefba27ebfffed28a59.dip0.t-ipconnect.de)
[06:20:00] <SnoopJ> oh, it's not invalid syntax, sorry
[06:20:21] <SnoopJ> it's using the mount-point as a type annotation, which...might be even worse
[06:20:52] <MD500_Pilot> so `{"a6b32a82-23bb-4b16-90f3-fb75caaad61c" : "("servernas01": "/mnt/enclosure0/frontcolumn0/drive")"}`
[06:20:56] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[06:21:08] *** Joins: nmoura (~nmoura@177.192.16.58)
[06:21:10] <MD500_Pilot> or is that not valid
[06:21:18] <SnoopJ> MD500_Pilot, I am much more interested in hearing an answer to the question I asked you. Is it a problem if it's a tuple?
[06:21:30] <SnoopJ> If so, why?
[06:21:34] <MD500_Pilot> no, no problem at all, sorry
[06:21:44] <SnoopJ> Just wondering what "tag" means to you, here.
[06:23:02] <MD500_Pilot> well, ultimately I need to be able to match the UUID against a servername and mountpoint, in my mind, `tagging` the uuid with the servername, maybe a bad way of saying it
[06:23:28] <SnoopJ> Okay, well, the dict does that. Both of those pieces of data are in the tuple.
[06:23:28] <MD500_Pilot> that is how I currently had it done: https://bpa.st/4AWA
[06:24:02] *** Joins: asix (~Anders@user/asix)
[06:24:06] <MD500_Pilot> ? I think I am missing something, the code does not output that that I can see...
[06:24:12] <MD500_Pilot> `{'a6b32a82-23bb-4b16-90f3-fb75caaad61c': '/mnt/enclosure0/front/column0/drive0'}`
[06:24:18] <MD500_Pilot> that is all it outputs
[06:24:27] <SnoopJ> oh, did I goof that up
[06:24:49] <SnoopJ> sorry I was reading "you have ... as a tuple" and thinking I'd done it right in the code, but I think maybe you meant my description, not the code.
[06:25:04] <MD500_Pilot> I would not say `goof` since you are providing immeasurable help and learning opportunities :-)
[06:25:45] *** Joins: schumaml2 (~schumaml@dslb-178-007-205-050.178.007.pools.vodafone-ip.de)
[06:26:35] <SnoopJ> MD500_Pilot, I would rewrite L12-13 as: `uuid, mnt = item.decode().split(); disks.append((uuid, (servername, mnt))` where `servername` would have to come from somewhere else, probably you have already computed it somewhere in your program.
[06:26:48] <SnoopJ> err, and I'm missing a ) in that, but yea, that.
[06:28:10] *** Quits: schumaml1 (~schumaml@dslb-188-104-182-068.188.104.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[06:28:36] <SnoopJ> the `k, v` in the original are part of what threw me off, I have to unscramble `disks.append((k, v))` to figure out if I'm appending the right thing :)
[06:29:38] <MD500_Pilot> now when I have 10 of these files, what is the best way to combine them (or load them all at once) in order to do a lookup?
[06:30:00] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (Quit: upekkha)
[06:30:17] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 252 seconds)
[06:30:39] *** Quits: driib (~driib@185.195.233.168) (Read error: Connection reset by peer)
[06:30:52] *** Joins: driib (~driib@185.195.233.168)
[06:32:10] <MD500_Pilot> currently I just open them all and append them all in one file, that is how I get this: https://bpa.st/4AWA
[06:32:56] <SnoopJ> The simple way to do it would be to have just one file that each server updates and writes back out (and locks the file while it's doing this). On each server, you'd load() the file (bringing its contents into dsk2srv), update_disk_db() (putting the current server's disk into into dsk2srv), then save().
[06:34:01] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[06:34:09] *** Quits: schumaml2 (~schumaml@dslb-178-007-205-050.178.007.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[06:34:19] <MD500_Pilot> so maybe an nfs export that they all talk to
[06:34:40] <SnoopJ> If you have multiple dicts, though, you can merge them like this: `merged = {**d1, **d2, **d3}` (or `merged = d1 | d2 | d3` in 3.9+)
[06:34:53] <MD500_Pilot> I assume to do a lookup I need to load() first
[06:34:53] <SnoopJ> MD500_Pilot, yep, NFS would be a fairly natural choice
[06:35:22] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[06:35:22] <SnoopJ> You call load() when you want to reload the dict from the disk
[06:35:32] *** Joins: christover (~christove@8.47.69.131)
[06:35:50] *** Joins: schumaml2 (~schumaml@ipservice-092-211-200-143.092.211.pools.vodafone-ip.de)
[06:36:10] <SnoopJ> it replaces dsk2srv entirely; if you had data in it that you didn't save(), you would lose that data
[06:36:51] <MD500_Pilot> `disk2srv` is a instant snapshot of `disks90`
[06:36:59] <MD500_Pilot> `disks()`
[06:37:32] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[06:37:51] * altendky looks around
[06:38:20] <SnoopJ> MD500_Pilot, it's the result of all calls to disks() since it was initialized (either to the empty dict, or by calling load()).
[06:38:24] * SnoopJ waves to altendky
[06:38:59] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[06:39:02] *** Joins: schumaml3 (~schumaml@dslb-178-007-195-121.178.007.pools.vodafone-ip.de)
[06:39:31] *** Quits: zenloading (~zenloadin@user/zenloading) (Quit: Leaving)
[06:39:53] *** Joins: zenloading (~zenloadin@user/zenloading)
[06:41:09] <MD500_Pilot> so the `load()` function I need to call to do the lookup
[06:41:12] <MD500_Pilot> ?
[06:41:22] *** Quits: schumaml2 (~schumaml@ipservice-092-211-200-143.092.211.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[06:41:29] <MD500_Pilot> `load(uuid_export_file)`
[06:41:44] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:42:02] *** Joins: schumaml4 (~schumaml@dslb-092-074-011-151.092.074.pools.vodafone-ip.de)
[06:42:05] <SnoopJ> If you want to do a lookup against what's on disk, yes.
[06:42:18] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 240 seconds)
[06:42:20] <MD500_Pilot>     dsk2srv = json.load(dsk2srv)
[06:42:21] <MD500_Pilot> UnboundLocalError: local variable 'dsk2srv' referenced before assignment
[06:42:37] *** Quits: bninja (~bloodninj@user/bloodninja) (Quit: So long king bowser!)
[06:42:52] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[06:42:54] <SnoopJ> MD500_Pilot, in my dummy program it is initialized at the global level. Probably you want load() to return the value it loaded instead.
[06:43:23] <SnoopJ> I didn't spend any effort trying to make this "drag-n-drop" into your code, I'm trying to just illustrate the point where you can take that code and work it into what you need it to be.
[06:43:36] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[06:43:51] <MD500_Pilot> (y)
[06:44:05] <SnoopJ> well, I guess that's not true, I did take effort not to change things (I couldn't help myself with the `raise` on L26 though)
[06:44:27] *** Quits: schumaml3 (~schumaml@dslb-178-007-195-121.178.007.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[06:44:28] *** Joins: dcaro (~dcaro@user/dcaro)
[06:45:19] *** Joins: schumaml (~schumaml@dslb-178-007-199-244.178.007.pools.vodafone-ip.de)
[06:46:30] *** Quits: schumaml4 (~schumaml@dslb-092-074-011-151.092.074.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[06:46:55] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[06:47:06] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[06:48:08] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[06:49:23] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 268 seconds)
[06:49:37] *** Joins: nmoura (~nmoura@177.192.16.58)
[06:50:10] *** Joins: schumaml1 (~schumaml@dslb-178-002-181-025.178.002.pools.vodafone-ip.de)
[06:51:22] *** Quits: schumaml (~schumaml@dslb-178-007-199-244.178.007.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[06:52:30] *** Joins: Fiji (~Fiji@user/fiji)
[06:53:58] *** Joins: schumaml2 (~schumaml@ipservice-092-211-202-078.092.211.pools.vodafone-ip.de)
[06:56:03] *** Joins: frost (~frost@59.71.241.179)
[06:56:32] *** Quits: schumaml1 (~schumaml@dslb-178-002-181-025.178.002.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[07:00:17] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:00:26] *** Quits: schumaml2 (~schumaml@ipservice-092-211-202-078.092.211.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[07:02:40] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:02:40] *** FinnElija is now known as Guest3789
[07:02:40] *** finn_elija is now known as FinnElija
[07:02:58] *** Joins: schumaml2 (~schumaml@dslb-092-074-009-134.092.074.pools.vodafone-ip.de)
[07:03:19] *** Joins: nmoura (~nmoura@177.192.16.58)
[07:05:34] *** Quits: Guest3789 (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[07:06:25] *** Joins: schumaml3 (~schumaml@ipservice-092-211-202-106.092.211.pools.vodafone-ip.de)
[07:07:24] *** Quits: schumaml2 (~schumaml@dslb-092-074-009-134.092.074.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[07:11:51] *** Quits: schumaml3 (~schumaml@ipservice-092-211-202-106.092.211.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[07:12:45] *** Joins: schumaml3 (~schumaml@dslb-092-074-008-101.092.074.pools.vodafone-ip.de)
[07:14:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:20:54] *** AmyMalik is now known as MelMalik
[07:21:08] *** Joins: dcaro_ (~dcaro@user/dcaro)
[07:22:04] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 268 seconds)
[07:22:15] *** dcaro_ is now known as dcaro
[07:22:37] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:23:18] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[07:27:41] *** Quits: ckdcreation (~ckdCreati@147.55.133.131) (Read error: Connection reset by peer)
[07:27:58] *** Joins: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[07:28:05] *** Quits: schumaml3 (~schumaml@dslb-092-074-008-101.092.074.pools.vodafone-ip.de) (Ping timeout: 255 seconds)
[07:31:26] *** Quits: vimart (~vimart@148.252.128.55) (Quit: WeeChat 2.8)
[07:31:50] *** Quits: christover (~christove@8.47.69.131) (Quit: Leaving)
[07:32:51] *** Joins: tnez (~el@user/tnez)
[07:33:32] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[07:34:27] *** Joins: schumaml3 (~schumaml@dslb-178-002-178-217.178.002.pools.vodafone-ip.de)
[07:36:26] *** Quits: tone0 (~tone@071-011-252-111.res.spectrum.com) (Read error: Connection reset by peer)
[07:36:54] *** Joins: schumaml4 (~schumaml@dslb-092-074-003-075.092.074.pools.vodafone-ip.de)
[07:37:08] *** Joins: tone0 (~tone@071-011-252-111.res.spectrum.com)
[07:38:57] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:75af:7907:b5fe:65e1)
[07:39:01] *** Joins: hvtuananh (~hvtuananh@pool-72-68-118-121.nwrknj.east.verizon.net)
[07:39:20] *** Joins: goepsilongo (~chacho@2603-7000-ab00-62ed-0000-0000-0000-0bd0.res6.spectrum.com)
[07:39:43] *** Quits: schumaml3 (~schumaml@dslb-178-002-178-217.178.002.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[07:39:48] *** Quits: goepsilongo (~chacho@2603-7000-ab00-62ed-0000-0000-0000-0bd0.res6.spectrum.com) (Client Quit)
[07:41:47] *** Quits: schumaml4 (~schumaml@dslb-092-074-003-075.092.074.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[07:41:55] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[07:42:11] *** Joins: pnoud (~pnoud@user/pnoud)
[07:42:17] *** Joins: schumaml4 (~schumaml@dslb-188-104-172-041.188.104.pools.vodafone-ip.de)
[07:44:09] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[07:46:00] *** Joins: schumaml (~schumaml@dslb-092-074-002-183.092.074.pools.vodafone-ip.de)
[07:46:42] *** Quits: schumaml4 (~schumaml@dslb-188-104-172-041.188.104.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[07:47:06] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[07:47:23] *** Joins: kongzilla (~weechat@gateway/tor-sasl/kongzilla)
[07:48:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[07:48:41] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[07:55:48] *** Quits: frost (~frost@59.71.241.179) (Ping timeout: 252 seconds)
[07:56:06] *** Joins: schumaml1 (~schumaml@ipservice-092-211-206-079.092.211.pools.vodafone-ip.de)
[07:56:54] *** Parts: kongzilla (~weechat@gateway/tor-sasl/kongzilla) ()
[07:56:54] *** Joins: nmoura (~nmoura@177.192.16.58)
[07:57:43] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[07:58:00] *** Quits: hvtuananh (~hvtuananh@pool-72-68-118-121.nwrknj.east.verizon.net) (Quit: leaving)
[07:58:17] *** Quits: schumaml (~schumaml@dslb-092-074-002-183.092.074.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[07:58:57] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[07:59:06] *** Joins: alexyov8 (~alexyov@79.124.0.2)
[07:59:27] *** Quits: alexyov (~alexyov@79.124.0.2) (Read error: Connection reset by peer)
[07:59:28] *** alexyov8 is now known as alexyov
[08:00:01] *** Joins: schumaml2 (~schumaml@dslb-178-007-207-082.178.007.pools.vodafone-ip.de)
[08:01:30] *** Joins: dodobrain_ (~dodobrain@user/dodobrain)
[08:02:10] *** Joins: schumaml3 (~schumaml@dslb-188-104-167-149.188.104.pools.vodafone-ip.de)
[08:02:36] *** Quits: schumaml1 (~schumaml@ipservice-092-211-206-079.092.211.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[08:04:32] *** Quits: schumaml2 (~schumaml@dslb-178-007-207-082.178.007.pools.vodafone-ip.de) (Ping timeout: 255 seconds)
[08:04:59] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 255 seconds)
[08:07:38] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[08:08:26] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[08:08:28] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (Ping timeout: 258 seconds)
[08:10:40] <GenTooMan> hmm question I have some keys I wish to use in a dict but they aren't immutable, they are integer values stored in (on?) an object, Obviously these aren't immutable, thoughts suggestions?
[08:10:51] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[08:12:45] *** Quits: schumaml3 (~schumaml@dslb-188-104-167-149.188.104.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[08:13:27] <domhnall> Hi, I'm using combinations and I seem to be missing a pair, {(5,5)} with this code: https://bpa.st/GOTQ. I rather be pointed to explaination or explained why I'm not getting expected. Thanks
[08:14:53] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:14:56] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[08:15:14] <habnabit_> domhnall, perhaps you meant itertools.product? combinations doesn't resample
[08:15:26] *** Quits: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Quit: WeeChat 3.1)
[08:15:28] <domhnall> habnabit_: hm... will check that out.
[08:15:34] <domhnall> habnabit_: thank you!
[08:16:15] *** Joins: schumaml3 (~schumaml@dslb-178-007-194-144.178.007.pools.vodafone-ip.de)
[08:16:23] *** Joins: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[08:17:30] *** Joins: Roey (~Roey@user/Roey)
[08:18:21] <SnoopJ> GenTooMan, the values themselves *are* immutable (you can't re-assign the value of 2), but the value that lives in that field on the object can be changed (you *can* reassign myobj.two)
[08:19:04] <SnoopJ> GenTooMan, is the dict storing data about the object, or what? We can make better suggestions if we know about the complete problem you're looking at
[08:19:18] *** Joins: schumaml4 (~schumaml@dslb-188-104-179-112.188.104.pools.vodafone-ip.de)
[08:20:02] *** Quits: Roey (~Roey@user/Roey) (Client Quit)
[08:21:39] *** Quits: schumaml3 (~schumaml@dslb-178-007-194-144.178.007.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[08:24:17] *** Joins: frost (~frost@59.71.241.179)
[08:24:50] *** Quits: schumaml4 (~schumaml@dslb-188-104-179-112.188.104.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[08:25:34] *** Joins: schumaml4 (~schumaml@dslb-092-074-013-143.092.074.pools.vodafone-ip.de)
[08:31:10] *** Quits: schumaml4 (~schumaml@dslb-092-074-013-143.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[08:31:39] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:34:28] *** Joins: schumaml4 (~schumaml@dslb-178-010-034-118.178.010.pools.vodafone-ip.de)
[08:34:35] *** Quits: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Quit: WeeChat 3.1)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:28] *** Joins: yogoyo (~patrick@user/yogoyo)
[08:36:39] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:37:12] *** Joins: schumaml (~schumaml@dslb-178-010-034-250.178.010.pools.vodafone-ip.de)
[08:38:56] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[08:39:06] *** Quits: schumaml4 (~schumaml@dslb-178-010-034-118.178.010.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[08:39:12] *** Joins: P1RATEZ (piratez@user/p1ratez)
[08:40:55] <GenTooMan> SnoopJ, the object is contained in a python library EX wx.ID_ANY <-- this type of value for example. Thus it's not immutable. The dictionary is just to map values from one set to another set of integers.
[08:41:21] *** Joins: schumaml1 (~schumaml@dslb-178-010-035-150.178.010.pools.vodafone-ip.de)
[08:41:32] <SnoopJ> GenTooMan, that is a name
[08:41:56] *** Quits: schumaml (~schumaml@dslb-178-010-034-250.178.010.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[08:42:29] <SnoopJ> GenTooMan, I don't really know what the problem is, so I can't offer any suggestions. It would help to see some reproducting code and the complete error report.
[08:42:52] *** Joins: pnoud (~pnoud@user/pnoud)
[08:43:33] <GenTooMan> Ok thanks for trying.
[08:44:01] <SnoopJ> "An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable." from https://docs.python.org/3/reference/datamodel.html#objects-values-and-types
[08:45:22] <SnoopJ> when you do `foo.bar = 42; foo.bar = -1`, you are changing what the name "bar" on the object named by `foo` is pointing to, not changing the value of 42
[08:47:27] <InPhase> SnoopJ: However, this is how you change the value of 42:  ctypes.memmove(id(42), id(54), 28)
[08:47:43] <SnoopJ> InPhase, in CPython, yes.
[08:47:44] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[08:48:11] <SnoopJ> InPhase, in this sense, immutable values don't exist anywhere :)
[08:48:58] *** Quits: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001) (Ping timeout: 240 seconds)
[08:49:22] <InPhase> Alas, it seems to crash for this value.  Some constants it will let you mutate, some not.  CPython is a mystery.
[08:49:25] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:49:26] <SnoopJ> And I guess we hope the object size is what we expected it to be when we authored it ;)
[08:49:30] *** Quits: audiocat (~audio@2603-8081-1800-00ad-3736-d60e-b265-76c0.res6.spectrum.com) (Ping timeout: 240 seconds)
[08:50:16] <SnoopJ> InPhase, huh, really?
[08:50:18] *** Joins: i0e (~is0ke3@user/is0ke3)
[08:51:01] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[08:52:15] <domhnall> hm, okay habnabit_ this is a bit more helpful, only now I have duplicate permuations, (6,4), (4,6).
[08:52:18] *** Quits: schumaml1 (~schumaml@dslb-178-010-035-150.178.010.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[08:52:55] <xcombelle> InPhase: small integer are interned for performance reason*
[08:53:11] <domhnall> actually I didn't use the library, just did the equivalent.
[08:53:12] <SnoopJ> xcombelle, that shouldn't matter here, 28 bytes of PyObject is 28 bytes
[08:53:55] <domhnall> habnabit_: looking at the docs for product(), what are they assuming A and B are? iterables?
[08:54:01] <InPhase> SnoopJ: Ah.  I got it to work in a straight python3 call.  I had been testing in ipython3.  I forgot, I had noticed before these behave differently for this (for some reason).
[08:54:30] *** Joins: schumaml1 (~schumaml@dslb-178-007-201-220.178.007.pools.vodafone-ip.de)
[08:55:05] <habnabit_> domhnall, itertools generally takes iterables
[08:55:14] <domhnall> heh...yah!
[08:55:36] <SnoopJ> InPhase, that's...even weirder? It works for me in IPython 7.19.0aaaahh no, it does core dump at the end there.
[08:55:36] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Read error: Connection reset by peer)
[08:55:57] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[08:56:54] <SnoopJ> I thought you meant it crashed the interpreter promptly, which would be *really* weird, not that this isn't.
[08:57:24] <InPhase> It did that several times promptly for me as well.  But it's pretty inconsistent.
[08:57:49] <SnoopJ> Possibly because of the intercommunication between IPython and the kernel
[08:58:21] <SnoopJ> err, s/the kernel/CPython/
[08:58:42] *** Quits: schumaml1 (~schumaml@dslb-178-007-201-220.178.007.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[08:59:30] *** Joins: schumaml1 (~schumaml@dslb-178-007-198-017.178.007.pools.vodafone-ip.de)
[08:59:38] *** Joins: dodobrain__ (~dodobrain@user/dodobrain)
[09:00:10] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:00:26] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[09:01:57] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:02:06] *** Joins: schumaml2 (~schumaml@dslb-188-104-170-105.188.104.pools.vodafone-ip.de)
[09:03:29] *** Quits: dodobrain_ (~dodobrain@user/dodobrain) (Ping timeout: 255 seconds)
[09:05:03] *** Quits: schumaml1 (~schumaml@dslb-178-007-198-017.178.007.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[09:06:34] *** Quits: schumaml2 (~schumaml@dslb-188-104-170-105.188.104.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[09:07:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[09:08:14] *** Joins: wyclif (~wyclif@user/wyclif)
[09:08:20] <SnoopJ> InPhase, derp, no, it says right there clear as day "free(): invalid size."  I believe that what's happening is that in our fool's copy, we've duplicated the ob_digit[] pointer and the GC doesn't know about this, so it's happy to free() that when each of these objects is garbage collected.
[09:10:41] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 255 seconds)
[09:11:22] *** Joins: doev (~doev@p549d7641.dip0.t-ipconnect.de)
[09:11:33] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:13:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[09:13:34] <SnoopJ> InPhase, well hey, that's neato: it crashes for me on 3.8 but not on 3.9 or 3.10.0b4
[09:13:41] *** Joins: wyclif (~wyclif@user/wyclif)
[09:17:53] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:18:58] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:19:43] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:21:04] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-1439-2069-2ba1-eff6.res6.spectrum.com)
[09:21:20] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-4d9e-129d-662b-32a5.res6.spectrum.com) (Ping timeout: 252 seconds)
[09:24:32] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[09:27:13] *** Joins: tg (~tg@rockylinux/infra/tg)
[09:27:15] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:27:58] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[09:30:02] *** Quits: doev (~doev@p549d7641.dip0.t-ipconnect.de) (Quit: Client closed)
[09:30:02] *** Quits: emerent (~quassel@p200300cd57058cefba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[09:30:26] *** Joins: stranac (~stranac@195.29.239.126)
[09:30:40] *** Joins: schumaml2 (~schumaml@dslb-178-010-038-134.178.010.pools.vodafone-ip.de)
[09:32:03] *** Joins: emerent (~quassel@p200300cd57058cefba27ebfffed28a59.dip0.t-ipconnect.de)
[09:35:00] *** Quits: reset (~reset@user/reset) (Quit: reset)
[09:35:19] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[09:38:15] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Remote host closed the connection)
[09:39:14] *** Joins: Blankspace (~abcd@user/blankspace)
[09:41:00] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:41:06] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[09:42:00] *** Joins: cman_ (~Cody@2603:9000:d104:8465:556d:190a:6b7a:6a79)
[09:42:55] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[09:43:54] *** Quits: Aye (jeda@hellomouse/dev/cryb.jeda) (Ping timeout: 240 seconds)
[09:44:07] *** Joins: Aye (jeda@hellomouse/dev/cryb.jeda)
[09:44:29] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:44:29] *** Quits: P1RATEZ (piratez@user/p1ratez) (Remote host closed the connection)
[09:44:30] *** Joins: Vonter (~Vonter@user/vonter)
[09:44:33] *** Quits: cman (~Cody@2603:9000:d104:8465:2866:c99f:b575:bffb) (Ping timeout: 252 seconds)
[09:44:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:46:56] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[09:48:31] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:48:54] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[09:49:05] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[09:49:56] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[09:50:05] *** Joins: schumaml3 (~schumaml@dslb-178-010-038-048.178.010.pools.vodafone-ip.de)
[09:50:15] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[09:50:52] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[09:51:05] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[09:52:42] *** Quits: schumaml2 (~schumaml@dslb-178-010-038-134.178.010.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[09:53:02] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[09:53:45] *** Joins: doev (~doev@p549d7641.dip0.t-ipconnect.de)
[09:53:54] *** Joins: djapo (~archangel@user/djapo)
[09:55:58] *** Joins: jetchisel (jetchisel@user/jetchisel)
[10:02:55] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[10:03:32] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 256 seconds)
[10:05:51] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:07:12] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[10:07:38] *** Joins: christover (~christove@8.47.69.131)
[10:07:52] *** Joins: Julian (~tos9@python/site-packages/Julian)
[10:08:34] *** Joins: LiftLeft (~LiftLeft@191.96.150.126)
[10:09:03] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[10:09:15] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:09:45] *** Joins: sertsa (~sertsa@209.140.9.160)
[10:10:20] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 256 seconds)
[10:10:49] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:11:09] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[10:13:02] *** Quits: sertsa (~sertsa@209.140.9.160) (Client Quit)
[10:13:35] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[10:13:37] *** Joins: sertsa (~sertsa@209.140.9.160)
[10:13:50] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[10:15:02] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 255 seconds)
[10:15:33] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[10:16:54] *** Joins: dvx (~dvx@185.63.97.64)
[10:18:36] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:18:48] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[10:19:07] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:20:19] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[10:21:22] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[10:22:26] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:2982:42b0:f26d:aa27)
[10:22:56] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 252 seconds)
[10:25:27] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[10:26:08] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:27:52] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:28:20] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Ping timeout: 252 seconds)
[10:29:52] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 246 seconds)
[10:30:08] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[10:30:10] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Client Quit)
[10:30:45] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[10:31:46] <graingert> Is there a way to do rpartition on ':' or '.' ?
[10:31:58] <graingert> I have a string for pkgutil.resolve_name
[10:32:07] <graingert> And I want the last segment
[10:32:41] <graingert> Eg input: "ham.spam.eggs", output: "ham.spam", "eggs"
[10:32:44] <BrenBarn> can't you just. . . call rpartition?
[10:32:49] *** Quits: AhmedAmerican (sid470527@id-470527.charlton.irccloud.com) ()
[10:32:57] <SnoopJ> BrenBarn, it takes a single separate, they want to get it done in one call I think
[10:33:00] <SnoopJ> separator*
[10:33:05] <graingert> And "ham.spam:eggs", output "ham.spam:", "eggs"
[10:33:17] *** Joins: AhmedAmerican (sid470527@id-470527.charlton.irccloud.com)
[10:33:18] <BrenBarn> oh by "or" you mean in the same call
[10:33:19] *** Quits: christover (~christove@8.47.69.131) (Quit: Leaving)
[10:33:37] <graingert> But also "ham.spam:eggs.bacon", output: "ham.spam:eggs", "bacon"
[10:33:57] *** Joins: schumaml4 (~schumaml@ipservice-092-211-206-167.092.211.pools.vodafone-ip.de)
[10:34:05] <SnoopJ> graingert, and "ham" becomes "ham", ""?
[10:34:06] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:2982:42b0:f26d:aa27) (Quit: WeeChat 3.2)
[10:34:10] <graingert> The colon is also tricky because I want to keep it on the LHS
[10:34:27] <graingert> SnoopJ: actually I don't care about that case
[10:34:43] <graingert> SnoopJ: something else checks there's a . Or : in it already
[10:34:51] <graingert> Would be nice to handle it all in one go
[10:35:01] <SnoopJ> I don't think rpartition() could, I'd probably write a regex
[10:35:18] *** Quits: dalan6 (~dalan@61-68-95-57.static.tpgi.com.au) (Read error: Connection reset by peer)
[10:35:31] <graingert> SnoopJ: The regex is gnarly though
[10:35:49] *** Quits: schumaml3 (~schumaml@dslb-178-010-038-048.178.010.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[10:35:54] *** Joins: dalan6 (~dalan@61-68-95-57.static.tpgi.com.au)
[10:35:55] <xcombelle> s.split(>>> "ham.spam:eggs.bacon".rsplit(".",1)[1]
[10:35:57] <xcombelle> 'bacon'
[10:36:01] <BrenBarn> can't you just split on `\.|:`?
[10:36:27] <graingert> SnoopJ: https://github.com/python/cpython/blob/main/Lib/pkgutil.py#L682
[10:36:31] <SnoopJ> graingert, my first thought is like r"^(.*:?)([^.:]+)$" but probably I'm being naive about greediness
[10:36:43] <graingert> But once I reach for regex I'll have to do it properly
[10:36:44] <SnoopJ> oh, not far off I guess
[10:36:47] <BrenBarn> like, you said before you want the last segment, but do you really mean you want to get both the last segment and everything else in a single call?
[10:37:07] <SnoopJ> a little less permissive of invalid names heh
[10:37:12] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[10:37:15] <SnoopJ> err, mine is a little *more*, that is
[10:37:23] *** Quits: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr) (Client Quit)
[10:37:30] <graingert> I added support for mock.patch("ham.spam:eggs.bacon") recently
[10:37:43] <graingert> I'm looking to support "ham.spam:eggs"
[10:37:47] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[10:38:47] <graingert> https://github.com/python/cpython/blob/main/Lib/unittest/mock.py#L1592
[10:38:49] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:38:50] *** Leonarbro_ is now known as Leonarbro
[10:39:50] *** Quits: LiftLeft (~LiftLeft@191.96.150.126) (Ping timeout: 272 seconds)
[10:40:00] <SnoopJ> graingert, if you're going to backport it in the first place, I should hope it's proper :P
[10:40:07] <graingert> SnoopJ: ?
[10:40:14] *** Joins: schumaml (~schumaml@ipservice-092-211-200-115.092.211.pools.vodafone-ip.de)
[10:40:38] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:40:56] <SnoopJ> 02:06 <graingert> But once I reach for regex I'll have to do it properly
[10:41:01] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[10:41:10] <graingert> SnoopJ: right?
[10:41:38] *** Joins: anandprabhu (~anandprab@185.195.233.165)
[10:41:52] <graingert> but I've got other needs for rsplit with a set
[10:42:01] <SnoopJ> oh, is it not for the lib itself
[10:42:11] <graingert> SnoopJ: no it's for cPython
[10:42:35] *** Quits: schumaml4 (~schumaml@ipservice-092-211-206-167.092.211.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[10:42:36] * SnoopJ is confused
[10:43:42] *** Joins: pnoud (~pnoud@user/pnoud)
[10:43:43] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:44:23] <graingert> SnoopJ: I'm looking to make a PR to cPython
[10:44:56] <graingert> You can do this: mock.patch("ham.spam:eggs.bacon")
[10:45:18] <graingert> But not this: mock.patch("ham.spam:eggs")
[10:45:29] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[10:45:32] *** Joins: gusto (~Augustus@2620:149:e0:6004::14)
[10:45:48] *** Joins: schumaml1 (~schumaml@dslb-092-074-013-191.092.074.pools.vodafone-ip.de)
[10:45:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:45:54] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:11] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[10:46:24] *** Joins: seednode2 (~seednode@user/seednode)
[10:46:32] *** Quits: schumaml (~schumaml@ipservice-092-211-200-115.092.211.pools.vodafone-ip.de) (Ping timeout: 255 seconds)
[10:47:04] *** Lord_of_Life_ is now known as Lord_of_Life
[10:47:49] <graingert> And I want to fix it
[10:49:33] <SnoopJ> Gotcha
[10:50:03] <SnoopJ> not familiar with the dot-after-colon spelling
[10:50:33] *** Joins: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de)
[10:50:43] <sertsa> mock.patch("ham.spam:eggs".replace(":","."))
[10:52:08] *** Joins: upsala (~zcb@185.213.155.160)
[10:53:28] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[10:53:59] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[10:53:59] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[10:55:03] <SnoopJ> sertsa, I don't think they're equivalent spellings
[10:55:29] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:55:54] *** Quits: stranac (~stranac@195.29.239.126) (Ping timeout: 240 seconds)
[10:56:21] *** Joins: c10l (~c10l@89.34.167.207)
[10:56:52] *** Joins: Elodin (~weechat@user/elodin)
[10:57:20] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[10:58:11] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[10:59:40] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:00:05] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[11:00:18] <graingert> eg it does importlib.import_module("ham.spam").eggs
[11:00:35] <graingert> but the other form does recursive __import__ calls
[11:00:46] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[11:01:36] *** Joins: CombatVet (~c4@user/combatvet)
[11:02:28] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[11:02:54] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-1439-2069-2ba1-eff6.res6.spectrum.com) (Quit: jarthur_)
[11:04:59] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[11:05:22] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[11:06:10] *** Quits: yogoyo (~patrick@user/yogoyo) (Remote host closed the connection)
[11:07:07] *** Joins: palasso (~palasso@user/palasso)
[11:08:13] *** Quits: s8n (~s8n@user/s8n) (Remote host closed the connection)
[11:09:01] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:09:56] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 255 seconds)
[11:10:39] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:11:02] *** Joins: s8n (~s8n@user/s8n)
[11:12:14] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Read error: Connection reset by peer)
[11:13:50] *** Joins: AlanMD_ (~AlanMD@193.105.140.131)
[11:15:18] *** Joins: cre (~x@p5b0fbc70.dip0.t-ipconnect.de)
[11:17:13] *** Joins: schumaml2 (~schumaml@dslb-088-067-051-068.088.067.pools.vodafone-ip.de)
[11:18:15] *** Quits: schumaml1 (~schumaml@dslb-092-074-013-191.092.074.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[11:20:42] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[11:26:08] *** Joins: Tas-sos (~Tas-sos@78-153-134.adsl.cyta.gr)
[11:26:24] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[11:28:35] *** Joins: yogoyo (~patrick@user/yogoyo)
[11:28:43] *** Joins: networker (~zenix@118.69.128.37)
[11:28:50] <networker> i was trying to import mp4 from mp3 by using relative import "from . import mp4" but it failed with "attempted relative import with no known parent package" even though i am not very sure why tho, here is how i structure my file https://ibb.co/fdWXdMQ
[11:28:54] <networker> abnyone have any idea why ?
[11:29:31] *** Quits: eramirez (~eramirez@2001:4453:367:0:7e13:9779:9980:5d72) (Remote host closed the connection)
[11:30:55] *** Quits: Tas-sos (~Tas-sos@78-153-134.adsl.cyta.gr) (Ping timeout: 265 seconds)
[11:31:34] *** Joins: Tas-sos (~Tas-sos@ppp079167195025.access.hol.gr)
[11:31:53] *** Quits: Tas-sos (~Tas-sos@ppp079167195025.access.hol.gr) (Client Quit)
[11:31:54] <Repiphany> networker: How are you trying to run your script
[11:32:09] *** Joins: Tas-sos (~Tas-sos@ppp079167195025.access.hol.gr)
[11:32:09] <networker> Repiphany: by doing "python mp3.py"
[11:32:16] <networker> at the same directory
[11:32:26] <Repiphany> Relative imports only work if you're importing the whole module from the outside
[11:32:34] <BrenBarn> when you do that Python doesn't know it's in the package
[11:32:43] <BrenBarn> it's one of Python's main warts in my opinion
[11:33:30] <Repiphany> If you have e.g. "module/images" and "module/sound", you can import module.sound.mp3 from that base path
[11:33:36] *** Joins: stranac (~stranac@195.29.239.126)
[11:34:30] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[11:34:41] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[11:34:46] <networker> awh, ok got it
[11:36:18] *** Joins: chele (~chele@user/chele)
[11:36:30] <networker> Repiphany: also yea, i did also hear about "from .. import <something>" and i did try that tho, it is not really working, base on the previous screenshot, i was having a "main.py" outside of sound and image importing sound.mp4 then in mp4.py i have "from .. import image" but it is not really working
[11:36:36] <networker> Repiphany: do you also have any idea why ?
[11:36:41] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:36:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[11:37:11] <Repiphany> You can't really run individual scripts from within modules if you're also trying to do relative imports inside them
[11:37:52] *** Joins: wyclif (~wyclif@user/wyclif)
[11:38:02] *** Quits: Tas-sos (~Tas-sos@ppp079167195025.access.hol.gr) (Ping timeout: 245 seconds)
[11:38:19] <networker> Repiphany: oh no this time i run main.py
[11:38:48] <networker> https://ibb.co/fHYLk4x
[11:38:52] <networker> that is my new one
[11:39:11] *** Joins: Tas-sos (~Tas-sos@ppp079167214230.access.hol.gr)
[11:39:22] <Repiphany> Test should have a "__init__.py" inside it and main should be in the folder below
[11:39:40] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[11:39:44] <Repiphany> Then you could have "import Test.sound.mp4" in that main.py
[11:40:24] <networker> well i was successful with sound.mp4 actually, but this time inside mp4.py i was having "from .. import image" and it didn't work out
[11:40:57] <Repiphany> Yes, if you want to import from .., you need an __init__.py in that .. folder
[11:42:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[11:42:41] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[11:43:03] <networker> Repiphany: so i am assuming you mean this ? https://ibb.co/VYgdW9z and doing "import lib.sound.mp4" ?
[11:43:20] *** Joins: wyclif (~wyclif@user/wyclif)
[11:43:24] <networker> that is what i get from "folder below"
[11:43:31] <Repiphany> Yes
[11:43:54] <networker> awh ok works now, gotit
[11:43:56] <networker> thank
[11:44:37] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[11:45:20] *** Quits: Tas-sos (~Tas-sos@ppp079167214230.access.hol.gr) (Ping timeout: 252 seconds)
[11:45:38] *** Joins: Tas-sos (~Tas-sos@ppp079167208097.access.hol.gr)
[11:48:38] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[11:49:21] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 255 seconds)
[11:51:12] *** Joins: rendar (~rendar@user/rendar)
[11:56:22] *** Joins: slav0nic (slav0nic@python.su)
[11:58:51] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Ping timeout: 258 seconds)
[11:59:34] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:5407:5fca:fb3c:8b3d)
[12:00:16] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 272 seconds)
[12:00:55] *** Quits: dre (~dre@2001:8003:c932:c301:e8e8:61dd:d08f:b129) (Quit: Leaving)
[12:04:22] *** Joins: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10)
[12:06:03] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:10:04] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[12:11:54] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:5407:5fca:fb3c:8b3d) (Ping timeout: 240 seconds)
[12:13:29] *** Quits: SGautam (~SGautam@59.90.2.33) (Ping timeout: 250 seconds)
[12:14:44] *** Quits: fsg (fsg@2600:3c00::f03c:92ff:fec6:da18) (Ping timeout: 255 seconds)
[12:15:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:16:26] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::791f)
[12:17:03] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:17:53] *** Joins: Atque (~Atque@user/atque)
[12:18:18] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[12:19:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[12:20:25] *** Joins: wyclif (~wyclif@user/wyclif)
[12:21:02] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 255 seconds)
[12:24:11] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:6c7e:b9aa:3365:ca28)
[12:24:12] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:24:17] *** Quits: p-i-_ (~Ohmu@node-11os.pool-118-173.dynamic.totinternet.net) (Quit: Leaving...)
[12:24:39] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:25:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[12:25:54] *** Joins: wyclif (~wyclif@user/wyclif)
[12:26:22] *** Quits: networker (~zenix@118.69.128.37) (Quit: Leaving)
[12:26:59] *** Quits: schumaml2 (~schumaml@dslb-088-067-051-068.088.067.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[12:27:20] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[12:27:37] *** Joins: schumaml2 (~schumaml@dslb-178-010-036-006.178.010.pools.vodafone-ip.de)
[12:27:40] *** Joins: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr)
[12:28:42] *** Quits: ilmostro (~ilmostro@user/ilmostro) (Quit: WeeChat 3.0.1)
[12:30:12] <VaniaPy> Hello,i'm trying to check if some values that i'm sending through POST are None
[12:30:25] <VaniaPy> but i'm getting TypeError: '>' not supported between instances of 'NoneType' and 'int'
[12:30:52] <VaniaPy> should i apply a casting or something?
[12:31:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[12:31:06] <AhmedAmerican> so you comparing `None` > `int`
[12:31:07] <grawity> how are you currently checking for None
[12:31:08] <Repiphany> What's the code that results in the error
[12:31:11] *** Quits: ttkap (~ttkap@user/ttkap) (Ping timeout: 244 seconds)
[12:31:15] <grawity> sounds like you're doing a '>' comparison before you're doing the None check, instead of the other way around
[12:31:22] *** Joins: wyclif (~wyclif@user/wyclif)
[12:31:27] *** Joins: schumaml3 (~schumaml@dslb-178-002-181-092.178.002.pools.vodafone-ip.de)
[12:31:48] <AhmedAmerican> if type(var) is int and `var` > `Yourint`?
[12:32:15] *** Quits: thecoder (~mrrobot@c-73-27-71-147.hsd1.fl.comcast.net) (Ping timeout: 268 seconds)
[12:33:02] <VaniaPy> Repiphany here's the code https://dpaste.org/759e
[12:34:06] *** Quits: schumaml2 (~schumaml@dslb-178-010-036-006.178.010.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[12:34:11] <AhmedAmerican> `while not`?
[12:34:18] *** Joins: schumaml4 (~schumaml@dslb-178-002-176-014.178.002.pools.vodafone-ip.de)
[12:34:26] *** Joins: ttkap (~ttkap@user/ttkap)
[12:34:34] *** Joins: ilmostro (~ilmostro@user/ilmostro)
[12:34:45] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Remote host closed the connection)
[12:35:56] <Repiphany> It doesn't make sense to me why there's a while loop there in the first place, sent_alert can't be modifying data and you just break out immediately anyway
[12:36:02] *** Quits: schumaml3 (~schumaml@dslb-178-002-181-092.178.002.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[12:36:11] <AhmedAmerican> you even don't need to use while loop! just `if not data["water"]` for ex
[12:36:13] *** Joins: schumaml (~schumaml@dslb-178-007-202-013.178.007.pools.vodafone-ip.de)
[12:36:23] <VaniaPy> let me try with if then
[12:36:46] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:37:03] <VaniaPy> still the same error
[12:37:22] <Repiphany> There aren't any > comparisons in that code anyway, show the actual code with the comparison line
[12:37:38] *** Joins: fsg (fsg@2600:3c00::f03c:92ff:fec6:da18)
[12:37:58] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:22] <AhmedAmerican> https://bpa.st/+python+tb
[12:38:56] <jinsun> you mean https://bpa.st/+python+pytb
[12:39:04] *** Quits: schumaml4 (~schumaml@dslb-178-002-176-014.178.002.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[12:39:19] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[12:39:20] <AhmedAmerican> Yea sorry
[12:39:55] *** Joins: zeenk (~zeenk@2a02:2f04:a008:d600:18f2:3421:bac6:8f38)
[12:40:24] *** Joins: schumaml1 (~schumaml@ipservice-092-211-205-093.092.211.pools.vodafone-ip.de)
[12:40:29] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:40:57] *** Joins: Kvothe (~weechat@user/elodin)
[12:41:06] *** Quits: sertsa (~sertsa@209.140.9.160) (Quit: Konversation terminated!)
[12:41:29] <VaniaPy> Repiphany https://bpa.st/PHFQ
[12:41:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[12:41:32] *** Quits: schumaml (~schumaml@dslb-178-007-202-013.178.007.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[12:41:43] <AhmedAmerican> `    if data['water'] > 20 and data['oxygen'] < 12:`
[12:41:49] <AhmedAmerican> here the issue occur!
[12:42:18] <Repiphany> You're not doing anything that changes data["water"] if it actually is None
[12:42:24] *** Joins: wyclif (~wyclif@user/wyclif)
[12:42:50] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:43:04] <Repiphany> line 18 runs no matter what the result of the check in line 12 is
[12:43:05] <raek1> VaniaPy: maybe you wanted a "return" after the send_alert() call to exit the function early?
[12:43:47] <AhmedAmerican> `if not data["water"] is None or not data['oxygen'] is None:` ! for this you've to do `if not data["water"] or not data["oxygen"]` !
[12:43:54] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 256 seconds)
[12:45:13] <AhmedAmerican> then you've to move the rest into if/elif/else!
[12:45:58] <VaniaPy> yeah that worked
[12:46:00] <VaniaPy> thanks!
[12:46:11] *** Joins: Naan (~Naan@user/naan)
[12:46:40] *** Joins: Atque (~Atque@user/atque)
[12:46:56] <Repiphany> That's bad if data["water"] or data["oxygen"] can be 0
[12:47:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[12:47:53] *** Joins: wyclif (~wyclif@user/wyclif)
[12:47:57] *** Quits: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[12:48:08] *** Quits: fstd (~fstd@xdsl-85-197-59-162.nc.de) (Remote host closed the connection)
[12:48:10] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 240 seconds)
[12:48:18] *** Joins: fstd (~fstd@xdsl-85-197-59-162.nc.de)
[12:48:29] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[12:49:08] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 252 seconds)
[12:49:42] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[12:50:03] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:50:10] <AhmedAmerican> BTW, dict key can be assigning directly within the dict! so you don't need `water_threshold = ""` and `oxygen_threshold = ""`. just enclose it directly within the dict --> `{"key1" :var1, "key2": var2}` ?
[12:50:17] *** Joins: upsala (~zcb@185.213.155.160)
[12:51:11] *** Quits: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr) (Ping timeout: 255 seconds)
[12:51:32] <AhmedAmerican> Repiphany: correct, am not sure what's his/her data structure could be.
[12:52:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[12:52:55] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[12:53:08] <Repiphany> water_threshold and oxygen_threshold don't get changed from empty strings so lines 29-32 are almost certainly not producing anything useful
[12:53:24] *** Joins: wyclif (~wyclif@user/wyclif)
[12:53:31] <Repiphany> Nothing even gets done with thresholds after
[12:54:06] <Repiphany> {"": 1, "": 2} -> {"": 2}
[12:54:53] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[12:56:49] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:80c0:ff1d:f199:aec5)
[12:58:18] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:6c7e:b9aa:3365:ca28) (Ping timeout: 240 seconds)
[12:58:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[12:58:26] *** Joins: shad (~shad@user/shad)
[12:58:54] *** Joins: wyclif (~wyclif@user/wyclif)
[13:02:28] *** Quits: dodobrain__ (~dodobrain@user/dodobrain) (Ping timeout: 268 seconds)
[13:04:48] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:07:20] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[13:07:51] *** Quits: schumaml1 (~schumaml@ipservice-092-211-205-093.092.211.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[13:09:45] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:6c7e:b9aa:3365:ca28)
[13:11:03] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[13:11:08] *** Quits: xrogaan_ (~xrogaan@user/xrogaan) (Quit: Leaving)
[13:11:39] *** Joins: schumaml1 (~schumaml@dslb-188-104-181-250.188.104.pools.vodafone-ip.de)
[13:13:41] *** Joins: Kvothe (~weechat@user/elodin)
[13:13:49] *** Joins: Falc (~Falc@2a02:a03f:69be:a00:9c97:427a:45fb:8e85)
[13:16:11] *** Parts: Kingsy (~chris@kingsy.co.uk) ()
[13:16:39] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Ping timeout: 268 seconds)
[13:17:09] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:17:22] <madprops> how can I call a python script with some argument, from within a bash script, but preserving quotes (if provided) like "this" ?
[13:19:36] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 256 seconds)
[13:20:38] <The-Compiler> madprops: can you show an example?
[13:20:57] <madprops> The-Compiler, output=$(python3 "${CCDIR}"/ezkl.py jump "$1")
[13:21:09] <madprops> $1 can be this or "this"
[13:21:22] <The-Compiler> madprops: that looks correct
[13:21:29] <madprops> it seems getting the arg from sys.arv removes the quotes?
[13:21:31] <The-Compiler> madprops: are you sure you're invoking your script correctly?
[13:21:52] <madprops> the script does run
[13:21:58] <madprops> and when i print the variable there's no quote
[13:22:03] <The-Compiler> madprops: if you run   yourscript.sh "this"   your shell will interpret the quotes, you might want to run it like   yourscript.sh '"this"'   if you want to keep them
[13:22:12] *** Joins: securethemews (~securethe@2a00:23c4:1e9a:a000::4)
[13:22:19] <The-Compiler> that's unrelated to the Python part though
[13:22:22] <madprops> oh hm
[13:23:10] <madprops> trying ""this"" doesn't work neither though
[13:23:26] <The-Compiler> ""this"" and '"this"' aren't the same thing
[13:23:39] <The-Compiler> the former is an empty quoted string, then a literal this, then another empty quoted string
[13:23:41] *** Quits: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com) (Ping timeout: 250 seconds)
[13:24:34] <madprops> i have to do "\"this\"" to make it work
[13:24:53] <The-Compiler> either that, or like I said, '"this"' (i.e. put the literal thing in single quotes)
[13:24:56] <The-Compiler> see https://wiki.bash-hackers.org/syntax/quoting
[13:25:01] *** Joins: omegatron (~some@p5484990d.dip0.t-ipconnect.de)
[13:25:13] <madprops> oh single quotes
[13:25:23] <The-Compiler> or http://mywiki.wooledge.org/Quotes
[13:25:35] *** Joins: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com)
[13:26:08] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[13:28:04] *** Joins: georgios (~georgios@ppp046176224061.access.hol.gr)
[13:30:05] *** Joins: SGautam (~SGautam@59.90.2.33)
[13:31:19] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:33:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[13:40:54] *** Joins: rsrx (~rsrx@103.225.150.81)
[13:44:12] *** Joins: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr)
[13:44:15] *** Joins: pnoud (~pnoud@user/pnoud)
[13:44:17] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:6c7e:b9aa:3365:ca28) (Ping timeout: 255 seconds)
[13:44:38] *** Joins: nyah (~nyah@90.221.186.180)
[13:44:53] <VaniaPy> has anyone experience with FutureSessions?
[13:45:51] <yogoyo> my FutureSessions says: permission denied
[13:46:49] *** Quits: yogoyo (~patrick@user/yogoyo) (Remote host closed the connection)
[13:47:10] *** Smedles_ is now known as Smedles
[13:49:57] <lericson> what's a good way to extract all columns from a numpy matrix into variable names
[13:50:00] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[13:50:04] <lericson> col_a, col_b = mat.T for example
[13:51:49] *** Joins: yogoyo (~patrick@user/yogoyo)
[13:55:23] *** Joins: p-i- (~Ohmu@node-11os.pool-118-173.dynamic.totinternet.net)
[13:55:53] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:6c7e:b9aa:3365:ca28)
[13:57:19] <p-i-> Suppose I have a list like [100, 150, 2, 73, 1, 810, ...]. What is a clean way to get the list from the first <100 element to the end?
[13:57:31] <boris[m]> Hello everyone ! any tips on how you handle big dataframes that get truncated in jupyterlab ? are you using widgets or some other techniques ?
[13:57:48] <p-i-> So the above would yield [2, 73, 1, 810, ...] as 2 is the first element < 100
[13:58:17] *** Joins: ambv (~ambv@c138-59.icpnet.pl)
[13:58:30] <Repiphany> p-i-: itertools.dropwhile
[13:58:49] <p-i-> nice!
[13:58:59] <Repiphany> dropwhile(lambda x: x>=100, [100, ...])
[13:59:10] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (Ping timeout: 252 seconds)
[13:59:13] *** Quits: okamis (~okamis@81-235-235-237-no92.tbcn.telia.com) (Ping timeout: 258 seconds)
[13:59:36] *** Quits: securethemews (~securethe@2a00:23c4:1e9a:a000::4) (Quit: Leaving)
[13:59:58] *** Quits: Barones (~Barones@2804:48dc:8500:0:e5c2:2c6d:8626:1ebb) (Remote host closed the connection)
[14:00:12] *** Joins: Barones (~Barones@2804:48dc:8500:0:f081:1673:dfec:e59d)
[14:02:36] <jinsun> boris[m]: what do you mean by "handle"?
[14:03:05] <boris[m]> jinsun: sorry bad wording. I mean better visualize
[14:04:02] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 252 seconds)
[14:05:56] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[14:06:23] <boris[m]> at the moment I am using jupyter and pandas to filter / sort/ aggregate  datasets  and then I write them to an xlsx file to visualize the result with Excel.But there might be a more officient way
[14:06:33] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 265 seconds)
[14:06:40] <Repiphany> matplotlib or seaborn or whatever
[14:06:46] *** Quits: ttkap (~ttkap@user/ttkap) (Ping timeout: 244 seconds)
[14:06:57] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[14:07:09] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Remote host closed the connection)
[14:07:10] *** Quits: enkrypt (~enkrypt@user/enkrypt) (Quit: WeeChat 3.0)
[14:07:57] *** Joins: ttkap (~ttkap@user/ttkap)
[14:08:38] <boris[m]> would like to see the tabular output Repiphany . Not interested in graphs etc. Is there a way to do this with matplotlib / seaborn ?
[14:09:00] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[14:09:02] <jinsun> if you mean looking at the values, usually there is no reason to look at that much data manually, I just slice it and look at the parts I care about
[14:09:16] <jinsun>  but vsocde has a dataframe viewer also if you use the jupyter interactive window, I use that sometimes
[14:09:32] <boris[m]> I understand this jinsun . so you re using head , tail etc?
[14:09:37] <jinsun> or just dump it to csv and load that in vscode
[14:09:55] *** Joins: mikeliuk (~mikeliuk@213.205.198.158)
[14:10:01] <jinsun> boris[m]: yes or .loc and .iloc
[14:10:04] <boris[m]> k will try vscode. Any other extension you would recommend ?
[14:10:23] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 255 seconds)
[14:10:52] <jinsun> Microsoft's python extension is the one most people use, it is great
[14:14:00] *** Quits: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com) (Ping timeout: 256 seconds)
[14:14:04] <caveman> i'm still stuck.  i got epoch since 1970s in utc.  i just want to format it as per local timezone.  how to do it?
[14:14:13] <madprops> i don't seem to trigger any errors by playing with annotations
[14:14:15] <madprops> in vscode
[14:14:28] <madprops> like changing a parameter from str to int
[14:14:33] *** Quits: georgios (~georgios@ppp046176224061.access.hol.gr) (Ping timeout: 258 seconds)
[14:14:54] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[14:15:17] <caveman> i guess .astimezone() des it?
[14:15:35] <boris[m]> thank you all!
[14:15:42] <jinsun> madprops: did you set "python.analysis.typeCheckingMode" to "basic" or "strict"? by default it is "off"
[14:15:59] *** Joins: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com)
[14:16:01] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[14:16:22] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[14:16:43] <madprops> i see, it works now jinsun
[14:17:03] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[14:18:48] <domhnall> habnabit_: I went with combinations_with_replacement. it does exactly what I want.
[14:20:09] <madprops> should i use -> None: on defs that don't return anything?
[14:20:40] <leduyquang753> Well no one prevents you from doing so.
[14:21:10] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[14:21:22] <madprops> just wondering if it's worth it at all
[14:21:42] <sharperguy_> Funny I was reading stackoverflow to find the regex to match a valid domain, and there are a ton of answers with different variations, but none of them match the domain "localhost" because there must be at least one ".".
[14:22:03] <caveman> does datetime.fromtimestamp(...) already apply local timezone automatically?
[14:22:05] <jinsun> madprops: if you use mypy --strict, it  willl force you to add it
[14:22:13] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:23:23] <caveman> so, i guess `datetime.datetime.fromtimestamp(time.time()).astimezone()` is redundant?  it suffices to just say `datetime.datetime.fromtimestamp(time.time())`?
[14:24:11] *** Joins: colegatron (~colegatro@86.127.251.171)
[14:24:14] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[14:26:48] *** Joins: schumaml2 (~schumaml@dslb-092-074-010-120.092.074.pools.vodafone-ip.de)
[14:26:57] <sharperguy_> is localhost just not considered a domain name? Even the validators package doesn't recognize it.
[14:27:18] <graingert> sharperguy_: it's special
[14:27:26] <graingert> sharperguy_: but also not special in some places
[14:27:34] <graingert> sharperguy_: there's a RFC to make it truly special
[14:27:38] <bjs> caveman: https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp  "If optional argument tz is None or not specified [...] the returned datetime object is naive."
[14:27:46] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[14:28:18] <bjs> caveman: so fromtimestamp(time.time()) gives you the local time as a datetime object without any timezone info
[14:28:29] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (Quit: you can't fire me!)
[14:28:36] <caveman> so will be correct, but %Z %z won't work.  right?
[14:28:53] <bjs> caveman: I'm not entirely sure where you're suggesting putting a %Z in this
[14:29:04] <caveman> strftime
[14:29:16] *** Quits: schumaml1 (~schumaml@dslb-188-104-181-250.188.104.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[14:29:26] *** Joins: schumaml3 (~schumaml@dslb-094-216-173-129.094.216.pools.vodafone-ip.de)
[14:29:35] <bjs> caveman: you really should just learn to read the docs.  https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes  "%Z Time zone name (empty string if the object is naive)."
[14:29:54] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:6c7e:b9aa:3365:ca28) (Ping timeout: 240 seconds)
[14:30:13] <caveman> yes.  that's what i meant by "%z won't work"
[14:30:41] <caveman> the rest of the datetime will be as per the local time (o.s. applies timezone in its own system clock  or whatever)
[14:30:46] <caveman> no?
[14:31:38] <p-i-> Would be nice if itertools had dropuntil and takeuntil to complement dropwhile and takewhile
[14:31:41] *** Quits: schumaml2 (~schumaml@dslb-092-074-010-120.092.074.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[14:31:48] *** Quits: upsala (~zcb@185.213.155.160) (Ping timeout: 258 seconds)
[14:31:54] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[14:32:31] <caveman> bjs: to make %Z %z not be empty, i can just add .astimezone() to datetime.fromtimestamp(time.time()).  right?  same effect?  suddenly because non-naive?
[14:32:40] *** Joins: thiras (~thiras@user/thiras)
[14:32:43] *** Quits: ttkap (~ttkap@user/ttkap) (Quit: WeeChat 3.2)
[14:32:50] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:27c5:b36:8a5d:9ea3)
[14:32:53] <bjs> caveman: fromtimestamp has a `tz` argument
[14:32:57] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: Leaving)
[14:33:08] <caveman> when it's none, it assumes system's timezone?
[14:33:12] *** Quits: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com) (Read error: Connection reset by peer)
[14:33:21] <bjs> no you just get *no* timezone
[14:33:32] *** Joins: upsala (~zcb@185.213.155.160)
[14:33:33] *** Joins: schumaml4 (~schumaml@dslb-178-002-180-135.178.002.pools.vodafone-ip.de)
[14:33:35] <caveman> odd.  i'm getting timezone.
[14:33:36] *** Joins: ttkap_ (~ttkap@user/ttkap)
[14:33:42] <bjs> caveman: there's a difference between the date "11:03 23/07/2021 BST" and "11:03 23/07/2021"
[14:33:48] <bjs> the former assumes my local timezone, the latter just has no timezone
[14:33:50] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 256 seconds)
[14:34:03] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:34:07] <caveman> true.
[14:34:46] <caveman> this somehow shows timezone.  any explanation?  print(datetime.datetime.fromtimestamp(time.time()).astimezone().strftime('%Y-%m-%d %H:%M %z'))
[14:34:52] <caveman> import date, datetime
[14:35:01] <caveman> s/date,/time,/
[14:35:25] <bjs> caveman: https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone  "Return a datetime object with new tzinfo attribute tz, [...] If called without arguments (or with tz=None) the system local timezone is assumed for the target timezone."
[14:35:54] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[14:36:02] *** Quits: schumaml3 (~schumaml@dslb-094-216-173-129.094.216.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[14:36:25] <caveman> so, it will have a timezone?
[14:36:37] <bjs> caveman: yes, that's what astimezone does
[14:36:56] <caveman> nice.  i guess all my troubles are solved now.
[14:36:59] <bjs> caveman: but isn't it better to generate a time with a timezone, rather than to generate one without and then stick one on?
[14:37:06] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[14:37:14] <bjs> although it *probably* can't go wrong here?  it just feels like a bad idea
[14:37:44] <Falc> caveman: do read two paragraphs down from what bjs ^asted
[14:38:04] <Falc> "If you merely want to attach a time zone object tz to a datetime dt without adjustment of date and time data, use dt.replace(tzinfo=tz)."
[14:38:08] *** Joins: schumaml (~schumaml@ipservice-092-211-206-106.092.211.pools.vodafone-ip.de)
[14:38:40] <bjs> caveman: actually it probably does go wrong
[14:38:55] *** Joins: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com)
[14:38:55] <caveman> my approach will go wrong?
[14:39:20] <bjs> caveman: probably,  anytime you have an object without timezone info and you try shove a timezone onto it you should have red flags
[14:39:56] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[14:40:14] <caveman> i'm storing the time in a database (json).  this database is international and will be shared around.  so this time must be in UTC
[14:40:28] <bjs> caveman: why not store a timestamp?
[14:40:35] <bjs> a time.time()
[14:40:35] <caveman> that's what i do.  i store time.time()
[14:40:42] *** Quits: schumaml4 (~schumaml@dslb-178-002-180-135.178.002.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[14:40:58] <caveman> now, i'm coding the local display part where that timestamp is formatted to look nice for readability.
[14:41:01] <thiras> what library would you recommend for converting html to docx?
[14:41:09] <bjs> caveman: so it shouldn't be UTC< it should be the users local timezone
[14:41:30] <thiras> or would you prefer to use python-docx to create docx directly
[14:41:35] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:6c7e:b9aa:3365:ca28)
[14:41:50] <caveman> bjs: which part shouldn't be UTC?   the timestamp in internationally exchanged database?  or the time displayed locally by the user who loads the exchanged database?
[14:42:01] <bjs> caveman: the timestamp doesn't have a timezone
[14:42:03] <Falc> caveman: so when you're reading it back in, you datetime.fromtimestamp(), right?
[14:42:14] <bjs> caveman: the one you display locally? you should display in local time probably
[14:42:22] <bjs> otherwise your users will be sad
[14:42:28] <caveman> bjs: i agree.  that's what i'm aimin now.
[14:43:28] <caveman> Falc: yes.  date/time is right (adjusted for local timezone).  but it just won't display the timezone information when i command it by strftime('... %Z')
[14:43:46] *** Quits: schumaml (~schumaml@ipservice-092-211-206-106.092.211.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[14:44:16] <Falc> caveman: you do know that datetime.fromtimestamp() takes a tz argument?
[14:44:45] <caveman> yes.  but i don't know my local timezone.  i thought adding .astimezone() will automatically assume my local timezone.
[14:45:05] *** Joins: reset (~reset@user/reset)
[14:46:28] <caveman> Falc: if i supply a tz argument, it means i'll need to extract the local timezone.  got any simple way to do this?  that's simpler than adding .astimezone()?
[14:46:56] <bjs> caveman: no you don't need the _local_ timezone
[14:46:58] <bjs> just any timezone
[14:47:04] <bjs> pick UTC or something
[14:47:20] <caveman> oh
[14:47:56] *** Joins: niluje (~niluje@2a05:d012:f91:1700:6975:ef0b:def6:3bdd)
[14:47:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:48:09] <caveman> print(datetime.datetime.fromtimestamp(time.time(), datetime.timezone.utc).strftime('%Y-%m-%d %H:%M %z'))
[14:48:22] <caveman> bjs: like this?  it shows time formatted in utc, ignoring my local timezone.
[14:48:43] <bjs> caveman: well you probably want to .astimezone() when you want to print it
[14:48:47] <bjs> so you get the local timezone
[14:49:16] <caveman> ok.  so by your last comment, you meant about 'storing it in database'.
[14:49:26] <bjs> huh?
[14:49:37] <niluje> With Python3, it is possible to force arguments to be positional or named. def func(a, b, /, *, c, d=None): makes it mandatory to provide a and b as positional arguments, c is required and must be named, d is optional and must be named. The syntax to do so (/, *) looks horrible. Has it been ever considered something like: strict def myfunc(a, b, c=, d=None)?
[14:49:38] <Falc> caveman: you're reading an UTC timestamp from your database, so you should load it and make sure it contains all that info.
[14:49:52] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:49:54] <bjs> there is no such thing as a "UTC timestamp",  timestamps *dont have timezone* information
[14:50:00] <caveman> <bjs> just any timezone   <-  here you meant when storing it in a database to be exchanged internationally, right?
[14:50:04] <bjs> no
[14:50:21] <bjs> caveman: I mean the `tz` argument to `fromtimestamp` you can pick whatever timezone you want to work with in the program
[14:50:39] <caveman> so each user will pick the tz he/she wants?
[14:50:40] <Falc> bjs: pretty sure that timestamps are relative to a UTC time
[14:50:41] <bjs> (people usually do all the *work* in UTC), then you can just convert to local timezone when you want to display the time
[14:50:42] <madprops> `Path is unbound`  , what does that mean?
[14:50:48] <bjs> Falc: no this is just rubbish
[14:50:54] <madprops> I'm doing `filepath: Path`
[14:50:57] <bjs> Falc: if you and I both call time.time() right now we get the same answer, regardless of timezone
[14:51:12] <madprops> oh nvm
[14:51:36] <caveman> bjs: or.. did you suggest this?  print(datetime.datetime.fromtimestamp(time.time(), datetime.timezone.utc).astimezone().strftime('%Y-%m-%d %H:%M %z'))
[14:52:06] <bjs> caveman: that will work.  also datetime having naive objects at all is just a massive PITA
[14:52:31] <caveman> are you implying that i'm doing some naive stuff?
[14:52:40] <bjs> caveman: no, I'm saying this is what you have to do to not get a naive datetime
[14:52:42] <bjs> :(
[14:52:51] <caveman> i see.
[14:53:17] <caveman> bjs: i still get same exact result if i remove the tz argument from fromtimestamp.  i wonder what value is it adding?
[14:53:23] <Falc> bjs: timestamps are seconds since the epoch. The epoch has to be strictly defined somehow. Why would it not be defined as an UTC time?
[14:53:56] <bjs> Falc: ... what does that even mean? moments in time don't have a timezone
[14:55:14] <bjs> If you want to write down a string that is the date of the epoch, then you have to pick a timezone
[14:56:04] <grawity> any integer offset from that date will have the same timezone as the epoch itself, will it not
[14:56:11] <Falc> bjs: moments in time exist in all timezones simultaneously
[14:56:23] <Repiphany> Differences in time don't have a timezone
[14:56:31] <bjs> Falc: this kind of attitude just causes mass confusion, because you end up thinking timestamps have a timezone ;)
[14:56:36] <Repiphany> 10 seconds from now in UTC doesn't mean anything
[14:57:10] *** Joins: darksun (~darksun@user/darksun)
[14:57:14] <madprops> why would `matches = []` need an annotation? (with basic checks)
[14:57:40] *** Joins: y1n (~y1n@84-115-64-38.wifi.dynamic.surfer.at)
[14:57:49] <bjs> madprops: depends what you do with it.  I mean, *I* cannot tell if it's supposed to be a list of ints, or a list of strings or what from here
[14:57:58] <bjs> and it depends on what you mean by "need" :)
[14:58:13] <madprops> it's a mypy error
[14:58:20] <madprops> the return type is just 'list'
[14:58:26] <madprops> of the def
[14:58:26] <bjs> oh
[14:58:32] <bjs> madprops: can you show the actual code and actual mypy error?
[14:59:22] <madprops> https://bpa.st/O6AA
[14:59:51] <madprops> sorry i mean the return type of the def is str
[15:00:13] <Falc> caveman: to reply to your last question, it's cleaner. Source data should be kept as pristine as possible, for a long as possible.
[15:00:39] <caveman> which one is cleaner?  one with tz?  or without?
[15:00:50] <bjs> madprops: mypy needs to check that `return matches[0]["path"]` really is a `str` so it needs to know what the type of `matches` is but it cannot figure it out
[15:01:03] <Falc> caveman: reading from your database with the tz
[15:01:12] <madprops> bjs, the weird thing is that if i just tell it that matches is a list it cools off
[15:01:12] <bjs> caveman: I have no idea if the way without timezone is even correct, it's very suspicious
[15:01:20] <caveman> Falc: you want me to put timezone information in the dataset?
[15:02:05] <caveman> bjs: i added it now.  now my code is 100% bjs-compliant.
[15:02:07] <bjs> madprops: i think the logic for checking for annotations is a little over-approximate and is probably giving a warning even though it's not needed?
[15:02:24] <bjs> caveman: there's no need to add timezone info into the database because you're storing a timestamp
[15:02:26] <Falc> caveman: no, not in the database. Your database stores the timestamp.
[15:02:58] <Falc> caveman: once you read it back in, the best approach is to completely ignore what you're going to be using it for
[15:03:51] <Falc> caveman: focus on reading in the data and what it represents.
[15:04:51] <bjs> caveman: I think a reading of the docs would make it safe without the `tz` argument to fromtimestamp but frankly I don't trust the library to do it right :P
[15:07:02] <jinsun> madprops: annotating list is equivalent to annotating list[Any] and because Any practcally just bypasses the type checking, mypy doesn't want to assume Any implicitly I guess, so it forces you to add it yourself
[15:07:12] <p-i-> i_cutoff = next(i for i, d in enumerate(self.deltas) if is_reject(d))  # how to gracefully handle if next doesn't find an item?
[15:07:32] <p-i-> I'd like it to return 0
[15:07:48] <dav1d> next(foo, 0)
[15:07:54] <dav1d> https://docs.python.org/3/library/functions.html#next
[15:08:19] <p-i-> I tried, that but then I get "SyntaxError: Generator expression must be parenthesized"
[15:08:23] *** Joins: kosh (~kosh@user/kosh)
[15:08:35] <dav1d> then do that
[15:08:37] <Falc> p-i-: next((your for), 0)
[15:08:39] <p-i-> oh I see
[15:08:40] <p-i-> duh
[15:08:42] <dav1d> :D
[15:08:59] *** Quits: anandprabhu (~anandprab@185.195.233.165) (Quit: Konversation terminated!)
[15:09:06] <Falc> p-i-: because there's a comma in it AND you need a comma before the 0
[15:09:12] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[15:09:20] *** Quits: colegatron (~colegatro@86.127.251.171) (Ping timeout: 255 seconds)
[15:09:42] <caveman> bjs: do you also suggest to replace time.time() by datetime.now(datetime.timezone.utc)?
[15:10:11] <bjs> caveman: no, time.time() is just the current timestamp
[15:10:12] <Falc> p-i-: also, "if is_reject(d)" should be "if reject(d)"
[15:10:22] <bjs> caveman: it should be fine, although I usually recommend truncating it with int()
[15:10:26] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Client Quit)
[15:11:27] <p-i-> Falc, I'm using reject as a noun :p
[15:11:38] <p-i-> rEject
[15:11:58] <p-i-> maybe I'll write it that way
[15:12:28] <bjs> caveman: if you're using a database it probably has a proper datetime type that'd be better as databases can be weird. Although I remember you were doing something else
[15:12:34] <Falc> caveman: you should store the timestamp of an event unambiguously. Both approaches you mentioned do that. So whether one or the other is better also depends on your database
[15:12:40] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[15:13:05] <caveman> bjs: better in which sense?
[15:13:43] <bjs> caveman: timestamps aren't as perfect and absolute as I've been saying, they have some issues especially with some mistakes of handling leap seconds
[15:13:45] <bjs> but nobody cares really
[15:13:55] *** Joins: georgios (~georgios@ppp046176224061.access.hol.gr)
[15:13:58] <bjs> and historical dates don't work so well obviously
[15:16:05] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:6c7e:b9aa:3365:ca28) (Ping timeout: 255 seconds)
[15:16:07] <caveman> historical dates?  as in year/month/day hour:min:sec?
[15:16:22] <madprops> jinsun, that makes sense
[15:16:34] <Falc> caveman: I think bjs means any actual date before 1970
[15:18:17] <madprops> why am I forced to use quotes on this:  -> "list[str]"  ?
[15:18:21] <bjs> right good luck storing the 24th October 1929 or something in your database using timestamps
[15:18:50] <bjs> madprops: for silly historical reasons,  the annotations are just normal Python expressions and in your version of Python list[str] isn't a valid Python expression
[15:19:07] <madprops> oh
[15:19:28] <bjs> madprops: however!  type checkers basically have their own syntax and their own rules and they do understand
[15:19:38] *** Joins: colegatron3 (~colegatro@ec2-34-240-152-191.eu-west-1.compute.amazonaws.com)
[15:19:58] <bjs> madprops: so you often see annotations that are in quotes (note there is also `from __future__ import annotations`, which will mean you dont need the quotes)
[15:20:29] *** Joins: ilmais1n (~il@irc.oh1cgn.fi)
[15:20:31] <ilmais1n> hello
[15:20:41] <bjs> If the language were to be designed from the ground up,  probably annotations would get dedicated syntax and problems like this would go away.  But sadly we're stuck with what we have
[15:20:53] <ilmais1n> what is the recommended way to create that vtimezone thing for icalendar files?
[15:20:55] <madprops> i see
[15:21:54] <nedbat> madprops: if you can upgrade to Python 3.9, you don't have to quote it
[15:22:05] <colegatron3> Hi. a pip installed package I am using is not working properly and they deprecated my legacy django and python version. what is the best way to have (and maintain alongside the project code) my own version of that package? probably it is basic python skill, but I have no idea how to do it. tnx
[15:23:17] *** Joins: entuland (~entuland@user/entuland)
[15:23:53] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[15:25:33] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:25:54] *** Joins: mickey (~user@user/mickey)
[15:26:43] *** Joins: banshi (~tcst@85.115.248.75)
[15:26:46] <banshi> hello all
[15:27:25] <banshi> i need docker image with python3 which runs script and reloads script on change. Is there solution?
[15:28:03] *** Quits: rsrx (~rsrx@103.225.150.81) (Quit: Leaving)
[15:28:57] *** Parts: no_gravity (~no_gravit@user/no-gravity/x-5639427) ()
[15:29:09] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:6c7e:b9aa:3365:ca28)
[15:29:12] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (Quit: you can't fire me!)
[15:29:21] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[15:29:25] *** Quits: extmind (~lars@quasar.extmind.de) (Quit: leaving)
[15:30:10] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (Client Quit)
[15:33:20] <madprops> why is a parameter of type: float treat as `str | float` ?
[15:33:33] <madprops> it seems it attempts to cast it
[15:33:35] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[15:33:46] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 252 seconds)
[15:33:52] <Yhg1s> madprops: can you show an example of that being the case?
[15:35:03] <madprops> https://bpa.st/VAQQ
[15:35:06] <madprops> it complains in the append line
[15:35:32] *** Quits: colegatron3 (~colegatro@ec2-34-240-152-191.eu-west-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[15:35:40] <Yhg1s> what is 'it'? Python? mypy? pytype? pyright? another type checker? Can you show the output?
[15:36:09] <madprops> https://i.imgur.com/TKlukP0.jpg
[15:36:15] <banshi> it - script
[15:36:19] <Yhg1s> oh, I see the problem.
[15:36:35] <Yhg1s> dict[str, float] does not mean 'a dict with one str value and one float value'
[15:36:54] <Yhg1s> banshi: clearly not.
[15:37:02] <banshi> I need something like 'uvicorn --reload'
[15:37:04] *** Joins: colegatron3 (~colegatro@86.127.251.171)
[15:37:33] <madprops> huh
[15:37:53] <Yhg1s> madprops: what you declare is a list containing dicts where all the keys are strings, and all the values are floats. Your 'match' dict is a dict where all the keys are strings, and the values are strings or floats.
[15:38:20] *** Joins: Roey (~Roey@user/Roey)
[15:38:46] <Yhg1s> that aside, using a list of dicts this way is rather peculiar. Are you sure you don't want a single dict, where path is the key and acc is the value?
[15:38:56] <Yhg1s> that would be a *lot* more efficient, for a variety of reasons.
[15:39:01] *** Joins: ioe (~is0ke3@user/is0ke3)
[15:39:12] <Yhg1s> Or, an attrs class, perhaps.
[15:39:36] <madprops> need the list I think
[15:39:43] <madprops> because there can be multiple instances with different acc
[15:39:47] <madprops> which should be considered
[15:39:54] <Yhg1s> not in the code you pasted, but oay.
[15:39:54] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[15:41:04] <madprops> or maybe you're right
[15:41:09] <madprops> i could check and replace if needed
[15:41:22] <madprops> though i sort the dicts later on
[15:41:27] <madprops> list*
[15:42:14] *** Joins: SGautam_ (~SGautam@117.195.246.164)
[15:45:48] *** Quits: SGautam (~SGautam@59.90.2.33) (Ping timeout: 256 seconds)
[15:46:50] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:46:56] *** Joins: pnoud (~pnoud@user/pnoud)
[15:47:03] *** Quits: ambv (~ambv@c138-59.icpnet.pl) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:48:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[15:48:45] <madprops> seems dictionaries can be sorted
[15:48:45] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[15:49:04] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2)
[15:49:39] *** Joins: ambv (~ambv@c138-59.icpnet.pl)
[15:49:48] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:50:16] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[15:50:31] *** Joins: Atque (~Atque@user/atque)
[15:51:55] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[15:53:45] *** Quits: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[15:53:50] <Repiphany> What do you mean by sorting a dictionary
[15:54:11] *** Joins: okamis (~okamis@62.119.248.44)
[15:54:42] *** Quits: okamis (~okamis@62.119.248.44) (Client Quit)
[15:58:16] *** Joins: carlio (~carlio@88.198.149.110)
[16:00:54] *** Quits: y1n (~y1n@84-115-64-38.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[16:01:18] *** Joins: y1n (~y1n@84-115-64-38.wifi.dynamic.surfer.at)
[16:01:21] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[16:02:00] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[16:04:30] <ferros> Well you can sort by key or value depending on what your heart desires, Repiphany
[16:05:15] <bjs> madprops: if you mean with sorted(),  it takes anything you can loop over and makes a list
[16:05:33] *** Joins: kostkon_ (~androirc@ob21aa.static.otenet.gr)
[16:05:40] <bjs> you can't really "sort" a dictionary in a traditional sense because you won't get back another dictionary
[16:06:38] *** Quits: georgios (~georgios@ppp046176224061.access.hol.gr) (Ping timeout: 272 seconds)
[16:08:26] <Repiphany> The insertion order of keys is remembered but there is no simple built-in way of changing that order, which is why I asked what they meant by "sorting a dictionary"
[16:08:31] *** Quits: ionface (~ionface@user/ionface) (Read error: Connection reset by peer)
[16:10:28] *** Joins: ionface (~ionface@user/ionface)
[16:10:28] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[16:10:37] *** Joins: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001)
[16:11:25] <jor> well, OrderedDict has a move_to_end, so could implement some clumsy sorting with that
[16:12:10] <grawity> hmm if foo.keys() returns a magic KeysView instead of just a list, could it in theory have a foo.keys().sort() that affects the underlying dict?
[16:12:23] <bjs> grawity: in theory yes
[16:12:40] <grawity> (assuming one wants in-place sorting, instead of {**sorted(mydict.items())})
[16:14:11] *** Joins: mrtnt (~Martin@2001:ad0:1:1:da9e:f3ff:fe4a:8dd0)
[16:14:22] <Falc> grawity: that sounds like I would want a 100% guarantee in advance that it won't sort the keys but not the items, which would jumble those up
[16:14:41] <Falc> I meant "values" and not "items"
[16:15:21] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:15:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:17:19] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:17:45] *** Joins: Harlin (~DonQixote@2603:300b:663:e800:98ff:d1ab:5789:5085)
[16:20:03] *** Joins: schumaml (~schumaml@dslb-188-104-162-252.188.104.pools.vodafone-ip.de)
[16:20:06] *** Joins: azazello (~azazello@109.75.158.195)
[16:20:27] *** Quits: azazello (~azazello@109.75.158.195) (Client Quit)
[16:20:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:21:24] *** Joins: Elodin (~weechat@user/elodin)
[16:24:47] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 265 seconds)
[16:27:29] *** Joins: Atque (~Atque@user/atque)
[16:29:19] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[16:30:23] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[16:30:59] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:31:54] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[16:32:13] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[16:32:15] *** Quits: mikeliuk (~mikeliuk@213.205.198.158) (Quit: Connection closed)
[16:32:28] *** Quits: SGautam_ (~SGautam@117.195.246.164) (Remote host closed the connection)
[16:32:36] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[16:32:56] <bjs> a dict should guarantee that `for k, v in d.items(): assert d[k] is v` ,  I would say that if the sort broke that it'd just be a broken sort
[16:32:58] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Quit: Konversation terminated!)
[16:33:06] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:6c7e:b9aa:3365:ca28) (Ping timeout: 240 seconds)
[16:33:57] <madprops> I just ended up doing a list of Match and sorting that
[16:34:11] <madprops> so no dictionary involved
[16:34:12] <carlio> but the sort is just sorting the list, not the dict keys? v is still in d?
[16:35:22] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[16:35:25] *** Joins: foobaz21253 (~foobaz212@82.33.219.124)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:04] *** Joins: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr)
[16:36:08] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[16:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:38:14] *** Quits: koziad (~koz@74.102.176.11) (Changing host)
[16:38:14] *** Joins: koziad (~koz@user/koziad/x-1285628)
[16:38:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:39:20] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:6c7e:b9aa:3365:ca28)
[16:39:26] *** Joins: mikeliuk (~mikeliuk@213.205.198.158)
[16:44:30] *** Joins: WilhelmVonWeiner (~dch@209.250.249.51)
[16:46:20] *** Quits: ioe (~is0ke3@user/is0ke3) (Read error: Connection reset by peer)
[16:47:16] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[16:47:40] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:50:10] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:50:17] <bjs> carlio: which comment are you referring to?
[16:50:50] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2) (Quit: Leaving)
[16:51:15] <p-i-> How come `for x in L: self.process(x)` works, but `map(self.process, L)` doesn't?
[16:52:19] <grawity> map() gives you a lazy-evaluated result (it's a bit like a generator comprehension vs a list comprehension)
[16:53:14] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:53:43] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 268 seconds)
[16:55:17] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[16:55:35] *** Joins: schumaml1 (~schumaml@dslb-188-104-187-157.188.104.pools.vodafone-ip.de)
[16:55:43] *** Joins: mickey (~user@user/mickey)
[16:58:02] *** Quits: schumaml (~schumaml@dslb-188-104-162-252.188.104.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[16:58:35] *** Parts: niluje (~niluje@2a05:d012:f91:1700:6975:ef0b:def6:3bdd) (WeeChat 1.9.1)
[17:00:28] *** Quits: schumaml1 (~schumaml@dslb-188-104-187-157.188.104.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[17:01:02] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:01:15] *** Quits: y1n (~y1n@84-115-64-38.wifi.dynamic.surfer.at) (Ping timeout: 276 seconds)
[17:01:29] *** Joins: foobaz2125371 (~foobaz212@82.33.219.124)
[17:01:30] <raek1> yeah, map returns an iterator that will evaluate the return value of self.process on demand. if you put the iterator into a for loop or into list() call, then the self.process() calls will happen
[17:01:31] *** Quits: foobaz21253 (~foobaz212@82.33.219.124) (Quit: Client closed)
[17:01:32] *** Joins: manti7 (~manti7@176.10.104.94)
[17:01:33] *** raek1 is now known as raek
[17:02:11] *** Quits: i0e (~is0ke3@user/is0ke3) (Read error: Connection reset by peer)
[17:03:03] <raek> in Python, map is centered around computing values rather than side-effects of functions
[17:03:22] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:04:02] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[17:06:40] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:06:56] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2)
[17:07:08] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2) (Client Quit)
[17:07:18] *** Joins: drant (~drant@2a05:f480:1c00:d82::)
[17:07:46] *** Joins: abraxas (~abraxas@2600:8805:c880:3:c7fe:fc8e:f2cc:8056)
[17:09:27] *** Joins: rsx (~dummy@ppp-188-174-150-109.dynamic.mnet-online.de)
[17:09:44] *** Joins: y1n (~y1n@84-115-64-38.wifi.dynamic.surfer.at)
[17:09:50] *** Quits: Psi-Jack (~psi-jack@user/psi-jack) (Quit: Do you type on  your PS1 or play on your PS1?)
[17:09:59] *** Quits: gusto (~Augustus@2620:149:e0:6004::14) (Remote host closed the connection)
[17:10:01] *** Joins: sebastianos (~sebastian@user/sebastianos)
[17:10:35] *** Joins: gusto (~Augustus@2620:149:e0:6004::14)
[17:10:59] *** Joins: telboon (~telboon@user/telboon)
[17:11:15] *** Joins: Psi-Jack (~psi-jack@user/psi-jack)
[17:11:54] *** Joins: zeden (~zeden@user/zeden)
[17:12:18] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:6c7e:b9aa:3365:ca28) (Ping timeout: 240 seconds)
[17:12:56] *** Joins: Blankspace (~abcd@user/blankspace)
[17:13:04] *** Joins: tims1 (~tims@61.69.131.46)
[17:13:17] *** Quits: gusto (~Augustus@2620:149:e0:6004::14) (Read error: Connection reset by peer)
[17:13:25] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[17:14:53] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 255 seconds)
[17:15:04] <VaniaPy> what is the most appropriate way to make multiple http requests(i mean to call asynchronously 4 different APIs)
[17:15:30] *** Quits: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) (Quit: Leaving.)
[17:15:58] *** Joins: gusto (~Augustus@2620:149:e0:6004::182)
[17:16:14] *** Quits: tims (~tims@220-245-254-151.static.tpgi.com.au) (Ping timeout: 255 seconds)
[17:16:20] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[17:17:39] <bjs> VaniaPy: the requests or httpx library
[17:18:28] *** Quits: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net) (Read error: Connection reset by peer)
[17:19:19] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2)
[17:22:42] *** Joins: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net)
[17:23:10] *** Joins: Warped (~Warped@user/warped)
[17:23:14] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[17:24:02] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:24:25] *** Quits: mikeliuk (~mikeliuk@213.205.198.158) (Quit: Connection closed)
[17:25:15] <grym> httpx is pretty sweet
[17:25:36] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:a875:99b5:35aa:a99)
[17:25:51] *** Joins: ianliu (~ian@189-46-252-161.dsl.telesp.net.br)
[17:27:07] <domhnall> md  fsssssssss s
[17:27:58] *** Quits: foobaz2125371 (~foobaz212@82.33.219.124) (Quit: Client closed)
[17:28:07] *** Quits: Blankspace (~abcd@user/blankspace) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[17:28:12] *** Joins: foobaz2125371 (~foobaz212@82.33.219.124)
[17:29:22] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[17:29:26] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[17:30:23] <ianliu> When working with dataclasses, is it possible to inherit some default fields from a base class, and add non-default fields in the subclasses?
[17:31:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[17:31:12] <grym> ianliu: inheritance works like normal
[17:31:15] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2) (Quit: Leaving)
[17:31:28] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 252 seconds)
[17:32:18] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[17:32:58] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[17:33:12] <domhnall> sorry about that, forgot to set readonly on terminal window.
[17:33:25] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 265 seconds)
[17:35:32] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[17:35:51] <madprops> any idea what can be causing copy pasting inside the document making text lose indentation in vscode?
[17:36:43] *** Joins: Atque (~Atque@user/atque)
[17:37:13] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:38:26] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[17:39:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[17:39:47] *** Joins: Kvothe (~weechat@user/elodin)
[17:40:16] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 252 seconds)
[17:42:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:42:42] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 258 seconds)
[17:42:43] *** Joins: schumaml1 (~schumaml@dslb-178-007-206-236.178.007.pools.vodafone-ip.de)
[17:44:27] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2)
[17:44:56] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2) (Client Quit)
[17:47:46] *** Joins: pnoud (~pnoud@user/pnoud)
[17:47:54] *** Joins: magla (~gelignite@55d493d3.access.ecotel.net)
[17:49:32] *** Quits: Naan (~Naan@user/naan) (Read error: Connection reset by peer)
[17:50:35] *** Joins: mokulus (~mokulus@user/mokulus)
[17:50:36] <entuland> madprops, did you try pasting somewhere else to see if the problem is the source or the destination?
[17:51:13] <entuland> or are you copypasting within the same document and not from elsewhere?
[17:51:19] <madprops> entuland, copying from vscode and pasting it on another editor renders correct indentation in the other editor
[17:51:35] <madprops> the problem is when i do it in the same document
[17:51:36] *** Joins: wyclif (~wyclif@user/wyclif)
[17:51:53] <WilhelmVonWeiner> is `a = [(1, 2), (3, 4)]; max(a, key=sum)` a hack?
[17:51:54] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 258 seconds)
[17:51:59] <WilhelmVonWeiner> like the `key=sum` in max
[17:52:14] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:52:14] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 255 seconds)
[17:52:19] <entuland> madprops, enable the option to see whitespace chars and verify if you have spaces or tabs
[17:52:29] <entuland> also check if you have any setting that automatically mangles such whitespace
[17:52:45] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[17:53:02] <bjs> WilhelmVonWeiner: what is a hack?
[17:53:13] <WilhelmVonWeiner> bit of cheeky coding
[17:53:19] <bjs> it looks fine to me?
[17:54:56] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 272 seconds)
[17:55:12] *** Quits: shoobie (~shoobie@user/shoobie) (Ping timeout: 255 seconds)
[17:55:29] *** Joins: shoobie (~shoobie@user/shoobie)
[17:55:34] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[17:57:17] <madprops> entuland, it was an extension related to indentation on paste :p
[17:57:19] *** Joins: Atque (~Atque@user/atque)
[17:58:42] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:a875:99b5:35aa:a99) (Ping timeout: 240 seconds)
[17:59:06] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[17:59:28] *** Joins: newtoliberachat (~xyz@49.206.29.212)
[17:59:41] <GinFuyou> Hello! Is pyinstaller still the way to build an executable for windows?
[18:00:58] *** Quits: y1n (~y1n@84-115-64-38.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[18:01:22] *** Joins: y1n (~y1n@84-115-65-171.wifi.dynamic.surfer.at)
[18:01:46] *** Joins: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs)
[18:01:50] <entuland> madprops, nice, glad you found the culprit
[18:01:55] *** Joins: fluffyballoon (~fluffybal@131.93.208.196)
[18:02:32] <grym> GinFuyou: aiui, yes it's still a popular option
[18:05:47] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[18:07:33] *** Quits: shad (~shad@user/shad) (Ping timeout: 276 seconds)
[18:07:35] <AhmedAmerican> is there a way within `except` to catch it by variable ? https://bpa.st/TOUA
[18:07:55] <AhmedAmerican> something like to try except the same exception within single block
[18:07:57] *** Quits: jazzy (~jaziz@2600:380:c174:6a3d:9430:49a9:10fc:d56c) (Ping timeout: 250 seconds)
[18:08:12] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:80c0:ff1d:f199:aec5) (Ping timeout: 276 seconds)
[18:08:27] *** Quits: Falc (~Falc@2a02:a03f:69be:a00:9c97:427a:45fb:8e85) (Ping timeout: 245 seconds)
[18:08:30] <deniska> AhmedAmerican: not really
[18:08:50] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[18:09:28] <GinFuyou> grym, OK, thanks!
[18:10:40] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:a875:99b5:35aa:a99)
[18:11:35] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 255 seconds)
[18:11:43] *** Quits: y1n (~y1n@84-115-65-171.wifi.dynamic.surfer.at) (Remote host closed the connection)
[18:11:53] *** Joins: y1n (~y1n@84-115-65-171.wifi.dynamic.surfer.at)
[18:12:58] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2)
[18:14:30] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[18:15:37] *** Joins: f-a (~f-a@151.82.58.0)
[18:16:22] <f-a> hello folks. I am not a python user, how do I compile/get an executable from this https://github.com/frankIT/ofxstatement-fineco ?
[18:16:38] <f-a> bonus points if it could also feature this https://github.com/frankIT/ofxstatement-fineco/issues/10#issuecomment-771281306
[18:16:40] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2) (Client Quit)
[18:17:13] <entuland> something like this? https://datatofish.com/executable-pyinstaller/
[18:17:29] *** Joins: Fiji (~Fiji@user/fiji)
[18:17:36] <Yhg1s> f-a: on what OS or platform?
[18:17:43] <f-a> sorry I should have specified
[18:17:50] <f-a> I am on Debian gnu/linux
[18:17:58] <f-a> and I just meant: I want to run this program
[18:18:05] <grym> f-a: is your goal to have One File That You Can Share Around, or... oh
[18:18:07] <grym> that's easier
[18:18:10] <f-a> I do not know how python packages stuff, I am not looking to distribute it
[18:19:20] *** Joins: Naan (~Naan@user/naan)
[18:19:53] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2)
[18:19:57] <grym> f-a: cool.  what do you get if you `python3 -V`
[18:20:01] <grym> from a command line
[18:20:26] <f-a> Python 3.7.3
[18:21:11] <domhnall> although my 'solution' returns the correct count for positive pairs: https://bpa.st/JRUA, I am wondering if this is actually what the problem is asking. Thoughts?
[18:21:22] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[18:21:43] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2) (Client Quit)
[18:22:01] <f-a> I also ran make after cloning, not sure if I should have done it http://paste.debian.net/1205352/
[18:22:04] <domhnall> I'm pondering how would I possibly do this without using a ranged list...or if that is even possible.
[18:22:13] <grym> groovy.  ok, i recommend that you `sudo apt install python3-venv python3-pip python3-wheel`  and then `python3 -m venv ~/ofxvenv; ~/ofxvenv/bin/pip install git+https://github.com/frankIT/ofxstatement-fineco; ~/ofxvenv/bin/pip install xlrd==1.2.0`
[18:22:17] <grym> f-a: ^
[18:22:36] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:80c0:ff1d:f199:aec5)
[18:22:44] <grym> f-a: then you should be able to `~/ofxvenv/bin/fineco`  to run it
[18:23:00] <f-a> will try this, thanks
[18:23:04] <GinFuyou> f-a, you don't compile python, if you only need to install it and it's deps
[18:23:14] <grawity> feels like range(0, 9999) should be range(0, m) or m+q
[18:23:18] <grawity> m+1*
[18:23:25] <domhnall> grawity: hm, good point
[18:23:27] <grym> f-a: (and don't `sudo pip` please)
[18:23:33] <grym> f-a: (sudo is only for apt :))
[18:23:46] <grawity> but
[18:24:22] <grawity> if it's only two integers ...
[18:25:12] *** Joins: fluffyballoon12 (~fluffybal@2620:72:0:6480::81d)
[18:25:35] *** Quits: yogoyo (~patrick@user/yogoyo) (Remote host closed the connection)
[18:25:35] <grawity> aren't there always exactly x pairs of (x, m-x), or something like that
[18:26:06] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[18:26:31] *** Joins: yogoyo (~patrick@user/yogoyo)
[18:26:56] <grawity> I can't math but it just feels like this has a formula answer
[18:28:19] *** Quits: fluffyballoon (~fluffybal@131.93.208.196) (Ping timeout: 246 seconds)
[18:28:23] *** Joins: nmoura (~nmoura@177.192.16.58)
[18:28:30] <f-a> I get an  error: invalid command 'bdist_wheel', weird as python3-wheel is already the newest version (0.32.3-2)
[18:28:39] <grawity> domhnall: for now, you can simplify it further by using range_to_test = list(range(0, m)) or [*range(0, m)] instead of the list comprehension
[18:28:43] *** fluffyballoon12 is now known as fluffyballoon
[18:28:48] <Yhg1s> f-a: from which command?
[18:29:41] <domhnall> grawity: okay. I'll be getting the solution mailed around 11:30am EST. was working on the other part now before then. where the condition is a ^ b = N
[18:30:14] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-2cc5-c74c-4d22-4413.res6.spectrum.com)
[18:30:17] *** Joins: kikijiki1 (~Thunderbi@user/kikijiki)
[18:30:24] <domhnall> It just feels like I have the concept, but missing the purpose.
[18:30:25] <f-a> Yhg1s: ./bin/pip install git+https://github.com/frankIT/ofxstatement-fineco
[18:30:40] <Yhg1s> f-a: run './bin/pip install wheel'
[18:31:15] <grym> f-a: you may need to add `~/ofxvenv/bin/pip install --upgrade pip wheel` before ` bin/pip install git+https://github.com/frankIT/ofxstatement-fineo` yeah
[18:31:19] <grym> sorry
[18:31:27] <grym> i forget what ubuntu does and doesn't include sometimes
[18:31:30] <f-a> no worries
[18:31:46] <Yhg1s> this isn't about ubuntu, since it's in the virtualenv.
[18:32:20] <f-a> pretty awesome, it works, thanks everyone
[18:32:46] <domhnall> grawity: still, thank you!
[18:32:49] *** Quits: rsx (~dummy@ppp-188-174-150-109.dynamic.mnet-online.de) (Quit: rsx)
[18:33:06] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Ping timeout: 240 seconds)
[18:33:06] *** kikijiki1 is now known as kikijiki
[18:33:36] *** Joins: colegatron2 (~colegatro@ec2-34-240-152-191.eu-west-1.compute.amazonaws.com)
[18:34:02] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2)
[18:35:06] <domhnall> actually, I have to re-write the first solution in JS...should be fun.
[18:35:54] *** Quits: colegatron3 (~colegatro@86.127.251.171) (Ping timeout: 240 seconds)
[18:36:12] <colegatron2> excuse my ignorance: I have stated that I can move a package from site-package to the project's root folder (in order to make changes/have my own version). there is some other path other than the root folder where that package can be stored to avoid having it in the project folder? (project's-other-site-packages-pip-unmanaged folder or alike)
[18:36:56] *** Joins: zebrag (~chris@user/zebrag)
[18:37:01] <ChrisWarrick> colegatron2: messing around with site-packages manually is not a good idea
[18:37:08] <deniska> colegatron2: typically what you would do, is get the source code of the package from somewhere, say github, and install it using `pip -e` where -e means editable
[18:37:23] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Ping timeout: 252 seconds)
[18:37:25] <deniska> so changes to the directory will be seen immediately
[18:37:27] <grym> f-a: cheers!
[18:37:42] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 265 seconds)
[18:38:25] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:38:28] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[18:38:51] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:40:54] <colegatron2> deniska, what do you mean with -e editable ? didn't know about that
[18:41:30] <colegatron2> I mean the idea is to be able make changes to a package and don't loose the changes between deployments
[18:41:52] <colegatron2> maybe as ChrisWarrick is a bad idea and there is a proper way to do it
[18:42:38] *** Quits: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[18:43:23] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Remote host closed the connection)
[18:44:47] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[18:44:53] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:a875:99b5:35aa:a99) (Ping timeout: 255 seconds)
[18:45:12] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2) (Quit: Leaving)
[18:47:18] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[18:47:36] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[18:47:43] <ChrisWarrick> colegatron2: -e is the right way to do it
[18:47:51] <GinFuyou> colegatron2, how you don't lose changes between deployments if you don't include it in the project?
[18:48:05] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2)
[18:48:09] <GinFuyou> If it can be installed as dependency - yes, pip -e
[18:48:29] *** Quits: y1n (~y1n@84-115-65-171.wifi.dynamic.surfer.at) (Ping timeout: 255 seconds)
[18:48:31] <GinFuyou> pip -e requires package to be present locally I think?
[18:48:32] <colegatron2> ok. thnx. reading about pip :)
[18:48:39] <anddam> howdy, from https://docs.python.org/3/library/collections.html#ordereddict-objects says "now that the built-in dict class gained the ability to remember insertion order (this new behavior became guaranteed in Python 3.7)."
[18:49:29] <grym> anddam: that's true
[18:49:40] *** Quits: doev (~doev@p549d7641.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[18:49:43] <anddam> https://docs.python.org/3/library/stdtypes.html#dict has "Dictionaries preserve insertion order. " with no 3.7 mention or further "setup", is that just new behavior or an "ability" that I have to enable?
[18:50:07] <anddam> grym: was typing a long period
[18:50:14] <Yhg1s> anddam: there's nothing to enable. It's how dictionaries behave since 3.6 (and it's guaranteed since 3.7)
[18:50:25] <grym> anddam: "Changed in version 3.7: Dictionary order is guaranteed to be insertion order. This behavior was an implementation detail of CPython from 3.6." from your second link
[18:50:44] <grym> those are 3.9's docs, so they'll just tell you what dicts do now because that's correct for 3.9
[18:50:56] <grym> but there's usually a note at the end telling you when something started to be true
[18:51:41] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[18:51:58] <anddam> I see, thanks
[18:53:51] <kieto> Hi all, I've setup a private PyPI repository in AWS CodeArtifact and I was trying to see if I can make it work with `poetry publish`, but it only seems to support `twine` to upload packages. Has anyone tried that?
[18:55:04] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2) (Quit: Leaving)
[18:56:09] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2)
[18:56:47] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:9180:253f:e2c0:7b7d)
[18:57:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[18:58:47] *** Joins: wyclif (~wyclif@user/wyclif)
[19:01:30] *** Joins: akk (~akk@75.161.155.222)
[19:03:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:03:37] *** Quits: gusto (~Augustus@2620:149:e0:6004::182) (Remote host closed the connection)
[19:03:51] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 250 seconds)
[19:04:15] *** Joins: wyclif (~wyclif@user/wyclif)
[19:04:18] *** Joins: gusto (~Augustus@2620:149:e0:6004::182)
[19:04:33] *** Quits: foobaz2125371 (~foobaz212@82.33.219.124) (Quit: Client closed)
[19:04:47] *** Joins: foobaz2125371 (~foobaz212@82.33.219.124)
[19:06:31] *** Joins: p-i-_ (~Ohmu@node-5fz.pool-1-0.dynamic.totinternet.net)
[19:08:11] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:09:00] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:09:07] *** Quits: p-i- (~Ohmu@node-11os.pool-118-173.dynamic.totinternet.net) (Ping timeout: 265 seconds)
[19:09:16] *** Quits: foobaz2125371 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[19:09:20] *** Quits: kostkon_ (~androirc@ob21aa.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[19:09:30] *** Quits: ianliu (~ian@189-46-252-161.dsl.telesp.net.br) (Quit: WeeChat 3.2)
[19:09:38] *** Joins: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca)
[19:09:38] *** Joins: d00gy (~tonberry@user/d00gy)
[19:09:44] *** Quits: mokulus (~mokulus@user/mokulus) (Ping timeout: 252 seconds)
[19:10:03] *** Joins: wyclif (~wyclif@user/wyclif)
[19:14:45] *** Joins: sedeki (~textual@user/sedeki)
[19:16:59] *** Joins: jjasghar (~quassel@user/jjasghar)
[19:17:31] *** Joins: foobaz2125371 (~foobaz212@82.33.219.124)
[19:19:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[19:20:37] *** Joins: ferz (~ferz@93.48.251.229)
[19:21:02] *** Joins: wyclif (~wyclif@user/wyclif)
[19:21:36] *** dob1_ is now known as dob1
[19:21:41] <ferz> Hi, are __LINE__ and __FILE__ macros available in python to use in log()?
[19:21:53] <Yhg1s> ferz: no.
[19:21:54] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[19:21:59] <ferz> __FUNC__ ?
[19:22:00] <Yhg1s> ferz: what is log()?
[19:22:05] <Yhg1s> ferz: Python isn't C.
[19:22:16] <ferz> logging.debug() for example
[19:22:27] <Yhg1s> ferz: the logging module can log those things for you.
[19:22:29] *** Quits: Tas-sos (~Tas-sos@ppp079167208097.access.hol.gr) (Quit: Lost terminal)
[19:23:20] <ferz> Yhg1s: oh, thank you.
[19:23:33] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[19:24:28] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:24:31] *** Quits: lacrymology (~lacrymolo@static-5-62-25-46.ipcom.comunitel.net) (Quit: Lost terminal)
[19:24:46] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:304e:cff7:51b8:63f2) (Quit: Leaving)
[19:24:54] <Yhg1s> ferz: https://docs.python.org/3/library/logging.html#logrecord-attributes has a list of things you can include in message templates.
[19:25:08] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[19:25:19] *** Joins: tg (~tg@rockylinux/infra/tg)
[19:25:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[19:26:31] *** Joins: wyclif (~wyclif@user/wyclif)
[19:26:58] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[19:27:16] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[19:27:24] *** Joins: hendursa1 (~weechat@user/hendursaga)
[19:28:30] *** Joins: hposca (~hposca@node-1w7jr9phoke2vrgk4227u1bpc.ipv6.telus.net)
[19:29:38] *** Quits: tims1 (~tims@61.69.131.46) (Ping timeout: 252 seconds)
[19:29:54] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:9180:253f:e2c0:7b7d) (Ping timeout: 240 seconds)
[19:30:35] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[19:30:48] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Quit: ZNC 1.8.2 - https://znc.in)
[19:31:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[19:32:06] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[19:32:10] *** Joins: wyclif (~wyclif@user/wyclif)
[19:32:50] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[19:34:10] *** Quits: hposca (~hposca@node-1w7jr9phoke2vrgk4227u1bpc.ipv6.telus.net) (Ping timeout: 256 seconds)
[19:34:46] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[19:37:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[19:37:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[19:37:41] *** Joins: wyclif (~wyclif@user/wyclif)
[19:37:57] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[19:38:33] *** Joins: kosh (~kosh@user/kosh)
[19:39:06] *** Joins: shad (~shad@user/shad)
[19:41:14] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:41:54] <f-a> mhh I have problem running this python project https://github.com/egh/ledger-autosync
[19:42:08] <f-a> the readme says «install from source with `python setup.py install`» but there is no setup.py
[19:42:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:42:33] <grym> f-a: the readme's doubly wrong.
[19:42:39] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:9180:253f:e2c0:7b7d)
[19:42:45] <f-a> good
[19:42:54] <f-a> can I venv like that last program I installed?
[19:43:03] *** Quits: wyclif (~wyclif@user/wyclif) (Read error: Connection reset by peer)
[19:43:07] <grym> f-a: `python3 -m venv ledgervenv; ledgervenv/bin/pip install --upgrade pip wheel; ledgervenv/bin/pip install git+https://github.com/egh/ledger-autosync`
[19:43:11] <grym> bingo
[19:43:18] *** Joins: wyclif (~wyclif@user/wyclif)
[19:44:12] <grym> f-a: then it looks like ledgervenv/bin/ledger-autosync  and ledgervenv/bin/hledger-autosync  are the entry points / cli commands
[19:44:18] <grym> https://github.com/egh/ledger-autosync/blob/master/pyproject.toml#L34
[19:45:13] <grym> f-a: you might actually just use the venv you've already made, looks like they share some dependencies
[19:45:23] <grym> and are all "the same thing" you're working on, i am guessing
[19:45:30] <grym> (tying ledger to your bank?)
[19:47:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:48:35] *** Joins: pnoud (~pnoud@user/pnoud)
[19:48:38] *** Joins: wyclif (~wyclif@user/wyclif)
[19:49:43] *** Quits: schumaml1 (~schumaml@dslb-178-007-206-236.178.007.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[19:50:10] <gitesh> so, in function you can change mutable actual parameter, like if you do in function alist.append(2) it will change
[19:50:29] <gitesh> but then how you can't do alist = [a, new, list] ?
[19:50:57] <gitesh> because formal parameter alist is bound to actual parameter my_list
[19:51:16] <gitesh> so it doesn't change my_list to [a, new, list] ?
[19:51:27] *** Joins: audiocat (~audio@2603-8081-1800-00ad-8216-d195-8c28-472e.res6.spectrum.com)
[19:51:36] *** Joins: nmoura (~nmoura@177.192.16.58)
[19:51:39] *** Joins: alexyov8 (~alexyov@79.124.0.2)
[19:51:44] <gitesh> watch this video --- https://www.youtube.com/watch?v=Ndw_EgFO_tw
[19:51:47] *** Quits: alexyov (~alexyov@79.124.0.2) (Read error: Connection reset by peer)
[19:51:47] *** alexyov8 is now known as alexyov
[19:51:48] <gitesh> I'm talking about this
[19:51:54] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-05fe-b1af-aaf2-9af4.res6.spectrum.com)
[19:52:09] *** Joins: schumaml1 (~schumaml@dslb-092-074-009-161.092.074.pools.vodafone-ip.de)
[19:52:09] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[19:52:42] *** Joins: fofoni (~fofoni@user/fofoni)
[19:53:09] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[19:53:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:53:42] <Yhg1s> gitesh: I recommend watching bit.ly/pynames1 to learn about how assignment works.
[19:53:50] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[19:54:07] *** Joins: wyclif (~wyclif@user/wyclif)
[19:54:13] <bjs> gitesh: `alist = [a, new, list]`  just re-binds the name. You can do that but it doesn't change the actual list
[19:54:20] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:54:28] <bjs> it's just giving the new list the same name as the old one
[19:55:27] *** Joins: mokulus (~mokulus@user/mokulus)
[19:57:52] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 2.3)
[19:58:14] <VaniaPy> Uploaded file: https://uploads.kiwiirc.com/files/3276119e64a7778a24dc7151f61f55f8/pasted.txt
[19:58:16] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:58:16] <VaniaPy> when i'm trying to run an async function in Flask i'm getting this error
[19:58:34] *** Quits: mokulus (~mokulus@user/mokulus) (Client Quit)
[19:58:37] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:59:05] <grym> VaniaPy: if i want async and flask-ish behavior, i reach for fastAPI when i can
[19:59:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[19:59:13] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[19:59:33] <grym> i haven't used flask[async] though
[19:59:36] *** Quits: schumaml1 (~schumaml@dslb-092-074-009-161.092.074.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[19:59:42] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 272 seconds)
[19:59:44] *** Joins: wyclif (~wyclif@user/wyclif)
[20:00:21] <VaniaPy> grym all my app is in Flask,it's too late for fastAPI unfortunately
[20:01:02] <grym> VaniaPy: i'm reading https://flask.palletsprojects.com/en/2.0.x/async-await/, then, which suggests either the extra, or quart as a drop-in-ish replacement
[20:01:05] *** Joins: tokerboker (~vivaan@c-73-71-182-125.hsd1.ca.comcast.net)
[20:01:15] <grym> (are you using flask[async] now?)
[20:01:27] *** Joins: PdimH (~pdimh@user/pdimh)
[20:01:39] <VaniaPy> aiohttp
[20:01:52] <VaniaPy> and asyncio
[20:03:15] *** Quits: newtoliberachat (~xyz@49.206.29.212) (Quit: leaving)
[20:03:29] *** Joins: newtoliberachat (~xyz@49.206.29.212)
[20:04:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[20:05:40] *** Joins: wyclif (~wyclif@user/wyclif)
[20:07:04] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 268 seconds)
[20:08:29] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[20:08:36] *** Quits: ionface (~ionface@user/ionface) (Quit: ionface)
[20:08:41] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[20:10:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[20:11:10] *** Joins: wyclif (~wyclif@user/wyclif)
[20:11:29] *** Joins: georgios (~georgios@ppp046176224061.access.hol.gr)
[20:12:12] *** Quits: newtoliberachat (~xyz@49.206.29.212) (Remote host closed the connection)
[20:12:17] *** Joins: Blankspace (~abcd@user/blankspace)
[20:12:19] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 250 seconds)
[20:14:12] *** Quits: p-i-_ (~Ohmu@node-5fz.pool-1-0.dynamic.totinternet.net) (Remote host closed the connection)
[20:14:31] *** Quits: Blankspace (~abcd@user/blankspace) (Client Quit)
[20:15:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[20:16:36] *** Joins: wyclif (~wyclif@user/wyclif)
[20:16:59] *** Quits: jpcanepa (~jpcanepa@2800:300:62b1:a600::c) (Quit: Textual IRC Client: www.textualapp.com)
[20:17:11] *** Quits: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[20:17:59] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[20:18:29] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:9180:253f:e2c0:7b7d) (Ping timeout: 255 seconds)
[20:20:15] *** Quits: jabberwo- (~jessy@user/jabberwock) (Quit: ZNC 1.9.x-git-140-29142359 - https://znc.in)
[20:20:52] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[20:21:16] *** Joins: hendursa1 (~weechat@user/hendursaga)
[20:21:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[20:21:53] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:22:09] *** Joins: wyclif (~wyclif@user/wyclif)
[20:22:53] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:4897:825b:2664:436)
[20:23:36] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[20:23:56] *** Joins: schumaml1 (~schumaml@dslb-094-216-170-065.094.216.pools.vodafone-ip.de)
[20:24:01] *** Joins: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry)
[20:24:06] <StayHungry> Evening, comrades
[20:24:41] <WilhelmVonWeiner> can you increment inside an expression without writing a function to do it?
[20:25:05] <StayHungry> I'm learning of the shortest ways of swapping first and last items of strings such as 23-07-2021 -> 2021-07-23
[20:25:30] <StayHungry> powershell's way: '23-07-2021'.split('-')[2..0] -join '-'
[20:25:58] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 265 seconds)
[20:26:01] <StayHungry> lua's way: print('23-07-2021'):gsub('(..)(....)(....)','%3%2%1')
[20:26:07] <StayHungry> what about python?
[20:26:39] <WilhelmVonWeiner> probably starts with "import re" lol
[20:26:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[20:27:11] <gitesh> http://bit.ly/pynames1     Yhg1s doesn't work here that link, video unavailable
[20:27:14] <WilhelmVonWeiner> but if you know the string you could do it with slicing StayHungry
[20:27:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:27:30] <gitesh> anyways i like this stuff so much called 'formal parameters'
[20:27:33] <grym> StayHungry: '-'.join(reversed("23-07-2021".split('-'))) , perhaps
[20:27:40] *** Joins: wyclif (~wyclif@user/wyclif)
[20:27:41] <StayHungry> grym: let me try that, sir
[20:27:52] <deniska> StayHungry: literal translation of powershell snippet: '-'.join('23-07-2021'.split('-')[::-1])
[20:28:39] <bjs> gitesh: the video works for me, it has a grey box with a "Watch on YouTube" link.  Which goes to https://www.youtube.com/watch?v=_AEJHKGk9ns&ab_channel=PyCon2015
[20:28:56] <bjs> gitesh: but yes, if you have `def f(x): ...` then `f(42)` we call "x" the parameter and 42 the argument
[20:29:15] <bjs> (and the call goes `x = 42` just like an assignment)
[20:29:37] <StayHungry> grym, deniska: both variants work, do you see a shorter way?
[20:30:16] <gitesh> bjs: it's not actaully new assignment, but the actual world's reference are passed
[20:30:32] <gitesh> so it can change actual world if it is mutable object
[20:30:51] <bjs> gitesh: Python really does an assignment
[20:30:52] <gitesh> but it can't do assignment for the actaul world's object
[20:30:57] *** Joins: qlixed (~qlixed@181.44.129.13)
[20:31:11] <gitesh> bjs: okay that true and clear
[20:31:42] <gitesh> bjs: what if after that assignment in function i do `x = 55`
[20:31:47] <nedbat> gitesh: does it work to watch that video on YouTube?
[20:31:48] <sybariten> with a dictionary like this:   k = {'MASTER_HOST': '10.178.226.196', 'MASTER_PORT': 9999}    my task is to convert it into a string, but over several rows. Thats possible for a string, i guess?  Each line ending with a \n , according to my task. Any suggestions how to adress that? A for loop over k.items() , but then what?
[20:31:53] <gitesh> nedbat: yes
[20:31:58] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 256 seconds)
[20:32:02] <gitesh> but was unavailable on site
[20:32:03] <bjs> gitesh: then the name "x" refers to the object 55 in the function
[20:32:05] <StayHungry> grym, deniska: or, if it's not possible to shorten further, could you offer a slight change to make it more aesthetically eye-pleasing, that is by somehow moving join to last position so logic would become less nested and more sequential?
[20:32:16] <sybariten> And actually preferably sorted on the name.... should i do the sorting in the same go?
[20:32:26] <grym> StayHungry: golf's rarely a beautiful sport
[20:32:30] <gitesh> bjs: so it overrides?
[20:32:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:32:41] <grawity> sybariten: do you need to *return* the string, or just to print it out?
[20:32:53] <bjs> gitesh: yes, the name "x" now refers to 55 rather than the argument inside the function
[20:33:11] *** Joins: wyclif (~wyclif@user/wyclif)
[20:33:11] <sybariten> grawity: no i think we're talking about a return, the string is supposed to be my answer so to speak
[20:33:49] <grawity> sybariten: if you can do a for loop over k.items(), then the rest is just string concatenation, could be something as basic as result += key + "=" + str(value) + "\n"
[20:33:55] <bjs> gitesh: but this doesn't change the actual argument,  and it doesn't change what "x" means *outside* of the function.
[20:34:05] <grawity> whether using +, or %s formatting, or f"" strings, or something else
[20:34:12] <gitesh> bjs: yeah, that's what i got it
[20:34:18] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[20:34:24] *** Joins: dba (uid502594@id-502594.stonehaven.irccloud.com)
[20:34:37] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[20:34:53] <grawity> sybariten: start with a zero-length string before the loop, append a new line for each dict item with += or something
[20:34:54] <sybariten> grawity: hmmm ok . And sorting? Before the for loop, during, or after?
[20:34:58] <gitesh> bjs: but in case it's mutable and we change a thing of it, it is changed outside of the function
[20:35:10] <bjs> gitesh: not if you go `x = 55`, this isn't changing anything
[20:35:15] <grawity> sybariten: hmm, generally before I guess
[20:35:20] <gitesh> that is not mutable bjs
[20:35:36] <bjs> gitesh: okay but even if `f([])` and then `x = [42]`  this isn't changing anything either
[20:35:46] *** Quits: PdimH (~pdimh@user/pdimh) (Quit: May we meet again)
[20:35:49] <grawity> you *could* sort later, if you instead make 'result' a list and only join its items into a single string at the end
[20:36:11] <grawity> but probably better to start with an already sorted k.items()
[20:36:32] <bjs> gitesh: assigning doesn't mutate or copy or anything,  it's just making a note that when  you use that name it refers to a different object.  If you want to mutate something you need to call a method or change an attribute (or perform some other operation) on the actual object itself,  not just re-assign the name.
[20:36:46] *** Joins: NeoCore (~neocore@195.200.221.95)
[20:37:24] <sybariten> grawity: yup, just realized there is a handy sorted() function . Ill try, thank you!
[20:37:38] <gitesh> bjs: that's true
[20:38:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:38:10] <StayHungry> grym: by the way, code works when python is launched, but when i run it as python -c "'-'.join('23-07-2021'.split('-')[::-1])" -> output is empty
[20:38:30] <grym> StayHungry: wrap it in a print() if you want to see what it prints
[20:38:40] *** Quits: Naan (~Naan@user/naan) (Read error: Connection reset by peer)
[20:38:40] <grym> StayHungry: (repls do that for you)
[20:38:41] *** Joins: wyclif (~wyclif@user/wyclif)
[20:38:58] <grym> it=the statement
[20:39:04] <grym> expression?
[20:39:08] <grym> expression.
[20:39:27] <StayHungry> repls... you mean interactive language shell, i see
[20:39:39] <grym> yes, what you get when you type python RET , for example
[20:39:47] <StayHungry> it works now, thank you, sir
[20:39:54] <grym> cheers
[20:40:19] <StayHungry> (however it bothers me still that '-`.join(...) goes first)
[20:40:23] *** Joins: LiftLeft (~LiftLeft@37.19.198.39)
[20:40:34] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[20:40:36] <grym> yeah, that one quirks everyone's eyebrow the first few times
[20:41:01] <StayHungry> why there is no (...).join('-') or something :D
[20:41:08] <grym> join's on str, not list
[20:41:16] *** Quits: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10) (Ping timeout: 268 seconds)
[20:41:17] <grym> i think, Because
[20:41:56] <grawity> you'd need a .join for every kind of iterable, which I guess would be Annoying to implement?
[20:42:10] <grawity> though I wouldn't even mind having to do [*some_generator].join(",") really
[20:42:48] * StayHungry looks up what is [::-1] in '-'.join('23-07-2021'.split('-')[::-1])
[20:43:00] <grym> it's a slice
[20:43:05] <grym> that means "reverse me!"
[20:43:14] <grym> or, uh, "me, in reverse"
[20:43:24] <grawity> probably it's one of those things, like list.get(), where "too niche" is bigger than "obvious way to do it"
[20:43:34] *** Joins: ozoned (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[20:43:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:43:38] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 258 seconds)
[20:43:53] <StayHungry> looks like something from IPv6 to me :)
[20:43:59] <dba> I want to send and excel sheet as email body not attachment but when I tried converting it to html pd.to_html() all the formatting disappeared, is there any better approach ?
[20:44:04] <gitesh> bjs: how does function invocation work? does it makes his own world while having legs to outside values?
[20:44:12] *** Joins: wyclif (~wyclif@user/wyclif)
[20:44:45] <bjs> gitesh: names belong to a function or file or whatever, and then when you call it just does an assignment to the name in the function
[20:44:49] <ChrisWarrick> dba: all the formatting disappeared when you loaded it into pandas, actually
[20:44:55] <ChrisWarrick> dba: do you really need excel in this?
[20:45:35] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[20:45:41] <bjs> gitesh: maybe the easiest way of thinking is that "x" inside the function and "x" outside the function are different names that just look the same to you (but Python can tell the difference).
[20:45:45] <dba> ChrisWarrick, I dont require excel
[20:46:00] *** Quits: ambv (~ambv@c138-59.icpnet.pl) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:46:00] <StayHungry> grym: i'll go with your 'reversed' version, easier for my humanitarians mindset to remember
[20:46:01] <ChrisWarrick> dba: okay, then perhaps you could produce your tables in HTML directly
[20:46:11] <gitesh> bjs: no but they are same objct
[20:46:14] <gitesh> *object
[20:46:15] *** Joins: Pixi (~Pixi@user/pixi)
[20:46:16] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[20:46:17] <bjs> gitesh: they might not be
[20:46:19] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[20:46:26] <bjs> gitesh: and they aren't when the function is first called, not until Python assigns them
[20:46:33] *** Quits: audiocat (~audio@2603-8081-1800-00ad-8216-d195-8c28-472e.res6.spectrum.com) (Ping timeout: 250 seconds)
[20:46:41] <grym> StayHungry: i like it too.  you'll need slices if you want to do thing like "go every third element" or whatever
[20:46:46] <grym> s/need/really want
[20:46:51] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:46:54] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[20:46:55] <gitesh> bjs: python assigns them automatically
[20:46:55] *** Quits: foobaz2125371 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[20:46:56] <bjs> gitesh: if you have `x = 1 ; f(2)` then "x" outside the function is a name for 1, and "x" inside the function is a name for 2.  When f is called, Python assigns 2 to the name "x" inside the function
[20:47:03] <bjs> gitesh: yes, that's what you were asking about wasn't it?
[20:47:28] *** Quits: Barones (~Barones@2804:48dc:8500:0:f081:1673:dfec:e59d) (Remote host closed the connection)
[20:47:34] <bjs> I'm explaining the process, it creates a new "x" name inside the function, then assigns the argument to it.
[20:47:42] *** Joins: Barones (~Barones@2804:48dc:8500:0:9d80:58af:9f0d:504b)
[20:47:53] <gitesh> bjs: got it , you mean it doesn't have to be always from outside the function
[20:47:56] <bjs> and it does this on *every* call, so each call has its own "x"
[20:48:00] <StayHungry> grym: and what if i want not to print the output, but copy it to clipboard? of course, i go with python -c print(...) | clip route, but perhaps there is a native ability, like python -c clipboard(...) ?
[20:48:11] <gitesh> bjs: but still it's outside the function it looks like
[20:48:34] <grym> StayHungry: if i want to capture stdout i use | xclip -sel clip
[20:48:44] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (Ping timeout: 252 seconds)
[20:48:58] *** Joins: creese (~user@136-25-168-142.cab.webpass.net)
[20:49:02] <grym> which i have aliased to pbcopy from some macOS habits i have picked up over the years
[20:49:04] <gitesh> bjs: what i mean is argument is outside the function , the same is bound to formal parameters
[20:49:04] <bjs> gitesh: no, if you have `x = 1; def f(x): x = 3 ; f(2)` this program has _two_ names that both look like "x".
[20:49:32] *** Quits: ozoned (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 256 seconds)
[20:49:47] <gitesh> bjs: i'm not confused with that
[20:50:06] <dba> ChrisWarrick: The table is already produced in a panda ExcelWriter
[20:50:09] <bjs> gitesh: here, the "global" x is a name for the value 1, and then when you call f with argument 2, it creates a new local "x" (which is new name, and isn't the same as the previous "x") and it assigns the argument to it
[20:50:20] <bjs> gitesh: it *didnt* assign one x to the other.
[20:50:41] <jinsun> dba: you can do formatting of tables with pandas instead of excel https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html
[20:50:41] <gitesh> bjs: yes
[20:50:45] <bjs> gitesh: in this program the global x is 1 and stays 1 and isn't re-assigned.
[20:50:52] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:50:55] <gitesh> bjs:  when you pass that x to that function
[20:51:03] <gitesh> i am talking about that
[20:51:07] <bjs> gitesh: I'm not passing x to the function, I 'm passing 2 to the function
[20:51:18] <creese> How do you specify a default value for a generic dataclass? I want to create a dataclass that takes a Node[T] where the value is not optional, but I also want a dummy head in which the value isn't set. I do not want to make all the values optional however.
[20:51:18] <gitesh> bjs: yes i got that
[20:51:23] <bjs> and it gets assigned to the name 'x' inside the function.
[20:51:25] <gitesh> that is right
[20:51:28] <dba> jinsun: Style in pandas works only with Jupyter
[20:51:30] <gitesh> bjs: yeah
[20:52:40] <gitesh> bjs: why doesn't it change global 1?
[20:52:52] <gitesh> *global x is 1
[20:53:03] <creese> I currently have the value set to Any and in moving to generics, the best I can do for the node value is Optional[T]. However, I would like this to just be T. In order to do that, I need to be able set a default value for the head node which is part of the parent data structure. Suggestions?
[20:53:24] <bjs> gitesh: because the "x" inside the function is not the same as the global "x".  That program has 2 names that both look like "x" and the global "x" doesn't get changed
[20:53:47] <bjs> gitesh: when you call, Python assigns to the local x, and then `x = 3` re-assigns the local x.
[20:53:48] <zware> gitesh: I may be off base here, but it looks like you might be having the classic misunderstanding that Python doesn't have "variables"; it has objects and various names for those objects.  It also has namespaces, which are basically collections of names that can be the same or different from names in another namespace, and those names can point to the same or different objects
[20:53:49] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Quit: Leaving)
[20:54:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[20:54:36] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Quit: ZNC 1.8.2 - https://znc.in)
[20:54:45] <ChrisWarrick> dba: okay, but you need HTML for email
[20:54:47] *** Joins: the4oo4- (~the4oo4@shenzhou.whatbox.ca)
[20:54:48] <gitesh> zware: cool
[20:54:50] *** Quits: the4oo4 (~the4oo4@shenzhou.whatbox.ca) (Read error: Connection reset by peer)
[20:54:58] <zware> gitesh: When you pass a name into a function, you're not passing the name (or variable), you're passing the object named by that name
[20:55:14] *** Joins: wyclif (~wyclif@user/wyclif)
[20:55:28] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:55:29] <sybariten> https://bpa.st/57FQ   this did not work, cause i had "too many values to unpack" . Any obvious mistake?
[20:55:39] <bjs> sybariten: you forgot .items()
[20:56:54] <gitesh> zware: yes but that object if assign within function with an assignment statement it is not changed
[20:56:57] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[20:56:57] *** Joins: slavfox (~slavfox@93.158.232.111)
[20:57:03] *** Joins: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10)
[20:57:08] <zware> gitesh: Also, object-to-name is a one-to-many relationship; one object may have many names, but each name will only ever point to one object (though which object that is may change over the life of a program)
[20:57:12] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 245 seconds)
[20:57:19] <jinsun> dba: no, df.style.render() will give you the html snippet that you can insert in any html
[20:58:12] <sybariten> bjs: thank you!!
[20:58:21] <gitesh> bjs: zware thank you
[20:58:50] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 265 seconds)
[21:00:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[21:00:46] *** Joins: wyclif (~wyclif@user/wyclif)
[21:00:49] <zware> gitesh: If I understand correctly, you're looking at something like `x = 1; def f(x=2): x = 3; return x` and are asking about what happens when you call `f(x)`?
[21:01:16] <gitesh> zware: yes
[21:02:06] <gitesh> zware: so x = 2 means x is bound to 2 in function but then it is reassgined to 3
[21:02:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:02:20] <zware> gitesh: For that call, yes
[21:02:20] <bjs> gitesh: yes, but only inside the function
[21:03:13] *** Quits: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10) (Read error: Connection reset by peer)
[21:03:28] <gitesh> bjs: zware yes got it guys
[21:03:30] *** Joins: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10)
[21:03:30] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[21:03:32] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Remote host closed the connection)
[21:03:54] <gitesh> I am gonna learn what is global and what is local tomorrow in that course
[21:04:03] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[21:04:38] *** Parts: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry) (-)
[21:05:17] *** Joins: humberto1 (~humbertow@2806:107e:f:6813:3cb5:b67a:1c69:f72e)
[21:05:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[21:06:04] *** Joins: han-solo (~hanish@user/han-solo)
[21:06:05] *** Joins: jetchisel (jetchisel@user/jetchisel)
[21:06:09] <zware> gitesh: I hope I clarified rather than muddying :)
[21:06:17] *** Joins: wyclif (~wyclif@user/wyclif)
[21:07:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[21:07:59] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:4897:825b:2664:436) (Ping timeout: 255 seconds)
[21:08:32] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:08:45] *** Quits: Gerula (~Gerula@user/gerula) (Read error: Connection reset by peer)
[21:08:53] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[21:09:51] *** Joins: Gerula (~Gerula@user/gerula)
[21:11:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:11:48] *** Joins: wyclif (~wyclif@user/wyclif)
[21:11:49] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Quit: ZNC 1.8.2 - https://znc.in)
[21:12:19] *** Joins: scabby (~scabby@user/scabootssca)
[21:12:35] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[21:12:45] <nedbat> zware: i really don't like "python doesn't have variables"
[21:13:45] <bjs> Python doesn't have C's variables ;)
[21:14:02] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Client Quit)
[21:14:07] <phy1729> python doesn't expose pointers, but that's probably just more confusing for many
[21:14:48] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[21:15:05] <bjs> phy1729: that's not really the biggest difference
[21:15:10] <bjs> phy1729: in C `x = y` copies the contents of y into x
[21:15:12] <zware> Hmm, "doesn't have variables as you might understand them from other languages"?
[21:15:43] *** Quits: omegatron (~some@p5484990d.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[21:15:44] <bjs> zware: or just, variables don't work like they do in those other languages
[21:15:53] <phy1729> bjs: just in python's case most of the time you just copy the pointer not the underlying value
[21:15:54] <bjs> that works too
[21:15:59] *** Quits: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10) (Remote host closed the connection)
[21:16:08] <zware> That would probably be better :)
[21:16:17] *** Joins: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10)
[21:16:30] <bjs> phy1729: well that's a completely different semantics for assignment, so it's more than just "doesn't expose pointers"
[21:16:42] *** Joins: schumaml2 (~schumaml@dslb-188-104-166-084.188.104.pools.vodafone-ip.de)
[21:16:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:17:04] <nedbat> zware: Python's variables are exactly like JavaScript's, Ruby's, Java's, ....
[21:17:18] *** Joins: wyclif (~wyclif@user/wyclif)
[21:17:46] <nedbat> zware: i think there's an old idea that "other languages" means "C", and that's less and less true these days.
[21:18:58] *** Quits: schumaml1 (~schumaml@dslb-094-216-170-065.094.216.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[21:20:32] <Lando-SpacePimp> C is for cookie; that's good enough for me.
[21:20:33] *** Joins: ckdCreations (~ckdCreati@147.55.133.131)
[21:21:27] *** Joins: hposca (~hposca@node-1w7jr9phoke2v1ekkbsawouqo.ipv6.telus.net)
[21:21:33] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 265 seconds)
[21:21:51] *** Joins: ozoned (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[21:21:59] *** Quits: shoobie (~shoobie@user/shoobie) (Remote host closed the connection)
[21:22:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 276 seconds)
[21:22:49] *** Joins: wyclif (~wyclif@user/wyclif)
[21:24:27] *** Quits: finsternis (~X@23.226.237.192) (Remote host closed the connection)
[21:25:54] *** Joins: mokulus (~mokulus@user/mokulus)
[21:26:22] *** Quits: f-a (~f-a@151.82.58.0) (Ping timeout: 256 seconds)
[21:27:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:27:58] *** Quits: ozoned (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 252 seconds)
[21:28:17] *** Joins: f-a (~f-a@151.68.94.208)
[21:28:20] *** Joins: wyclif (~wyclif@user/wyclif)
[21:28:24] *** Quits: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10) (Ping timeout: 276 seconds)
[21:28:33] *** Quits: rendar (~rendar@user/rendar) ()
[21:30:34] *** Joins: p-i- (~Ohmu@node-5fz.pool-1-0.dynamic.totinternet.net)
[21:31:18] <dba> jinsun: https://bpa.st/DF5Q actually the data is in ExcelWriter and the writer does not have style attr to render the html
[21:31:54] <p-i-> Suppose I have `for x in X: process(x)`. If I do `map(process, X)` it doesn't behave the same.
[21:31:57] <BrokenCog> follow up with answer, FTCI:  With PuTTY not correctly displaying ncurses line drawing, enable setting:  Window->Translation-> "Enable VT100 line drawing even in UTF-8 mode"  (https://superuser.com/questions/278286/making-256-color-and-line-drawing-characters-both-work-in-putty)
[21:32:00] <p-i-> What's happening here?
[21:32:11] <BrokenCog> ah. sorry to clobber your question ...
[21:32:29] <justsomeguy> close
[21:32:38] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.0.1)
[21:32:44] <p-i-> `m = map(process, X)` returns a generator, it seems. So does this defer execution of of `process(x)` until `m` is enumerated?
[21:32:50] <dav1d> yes
[21:32:55] <han-solo> p-i-: `map` is lazy
[21:32:55] *** Joins: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10)
[21:33:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:33:09] <dav1d> 14:22 <grawity> map() gives you a lazy-evaluated result (it's a bit like a generator comprehension vs a list comprehension)
[21:33:26] <p-i-> Thanks!
[21:33:41] <p-i-> yes, sorry my power went down and I lost my chat history.
[21:33:56] *** Joins: wyclif (~wyclif@user/wyclif)
[21:35:11] <sybariten> OK, so here's something i pieced together from someone elses stackoverflow question.  https://bpa.st/MDRA   I need to do something else but i'm starting here. This will produce a dict with keys from 0 to 3 and they each have a phone number as value
[21:35:33] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[21:36:27] <sybariten> If in reality i wanted to add these phone numbers to the beatles guys who are commented there, do i still want to make a range from len(beatles) or something? And loop over that? But what do i in that case write where i construct the dict pairs?
[21:37:01] <bjs> sybariten: `for key, value in zip(keys, values): ...`  or `for i, key in enumerate(keys): ...`
[21:37:02] <han-solo> `dict(zip(keys, values))`
[21:37:28] <sybariten> oh, so i need to use something special there
[21:37:49] <bjs> sybariten: well no, you can also use range() or keep a counter. They all work.  zip is probably the nicest.
[21:38:06] <sybariten> the zip object
[21:38:10] <sybariten> ok
[21:38:17] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[21:38:34] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[21:38:50] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[21:39:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[21:39:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:39:26] *** Joins: wyclif (~wyclif@user/wyclif)
[21:40:42] *** Quits: ripdog_ (~quassel@user/ripdog) (Quit: ripdog_)
[21:41:06] *** Quits: ferz (~ferz@93.48.251.229) (Ping timeout: 240 seconds)
[21:41:15] *** Joins: ripdog (~quassel@user/ripdog)
[21:41:52] *** Quits: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de) (Quit: Leaving.)
[21:43:49] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:fc69:a47b:2d46:673b)
[21:44:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[21:44:58] *** Joins: wyclif (~wyclif@user/wyclif)
[21:45:15] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::f245) (Remote host closed the connection)
[21:46:21] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[21:46:46] *** Parts: banshi (~tcst@85.115.248.75) ()
[21:46:48] *** Joins: Liblx (~Alex@2a02:810c:280:59c:68e7:d569:ad47:d289)
[21:47:23] <sybariten> lets say we know it will be 4 of them, how would i write it without using zip then, in a more "straightforward" manner? In other words, i don't need to do len() , but i have both the range(4) and the beatles list. Can i build trhe dict using someting else than zip ?
[21:48:06] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::f245)
[21:48:21] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[21:49:25] *** Joins: pnoud (~pnoud@user/pnoud)
[21:49:39] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[21:50:04] *** Joins: akaWolf (~akaWolf@akawolf.org)
[21:50:19] <zware> nedbat: That's fair.  I forget that I have been involved in this stuff long enough that things have changed from when I started :(
[21:50:29] <Repiphany> Not sure why you want to avoid zip, it's the exact tool for pairing up objects in different iterables
[21:51:04] *** Quits: Liblx (~Alex@2a02:810c:280:59c:68e7:d569:ad47:d289) (Client Quit)
[21:51:17] *** Joins: davegarath (~davegarat@net-93-66-97-252.cust.vodafonedsl.it)
[21:51:52] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[21:52:38] <sybariten> hmm ok. No not trying to avoid it, i guess i was wondering if there is a more.... standard approach, albeit longer. I realized i'm actually just trying to create a dict from two lists, googled for that, and found someone demonstrating what they call the naive approach. Will try
[21:53:18] *** Joins: greedom (~greedom@2001:16b8:3254:3900:220b:1996:5f5a:8378)
[21:53:19] *** Joins: skapata (~Skapata@user/skapata)
[21:53:21] <sybariten> Sometimes i just want to learn stuff without using helper stuff, to begin with, just to get a different understanding. Not sure if thats the case here
[21:53:22] <Repiphany> zip is extremely standard
[21:53:29] <sybariten> ok
[21:53:44] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:53:59] <han-solo> sybariten: assuming you want a key value pair of `{name: phone_number, ...}` could you try `dict(zip(names, numbers))` ?
[21:54:22] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:54:22] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[21:55:01] <sybariten> han-solo: yep, i will do something like that, thanks
[21:55:02] *** Quits: greedom (~greedom@2001:16b8:3254:3900:220b:1996:5f5a:8378) (Remote host closed the connection)
[21:55:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:55:47] *** Joins: greedom (~greedom@2001:16b8:3254:3900:220b:1996:5f5a:8378)
[21:55:58] *** Joins: wyclif (~wyclif@user/wyclif)
[21:56:40] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[21:56:52] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[21:57:11] *** Joins: ferz (~ferz@93.48.251.229)
[21:57:36] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[21:58:41] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Quit: ZNC 1.8.2 - https://znc.in)
[21:59:09] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: Blackpajamas)
[21:59:22] *** Joins: schumaml3 (~schumaml@dslb-178-002-183-160.178.002.pools.vodafone-ip.de)
[22:00:26] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[22:00:49] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[22:00:58] *** Quits: schumaml2 (~schumaml@dslb-188-104-166-084.188.104.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[22:01:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:01:17] <foo> I'm having to store DDMMYYYY and MMYYYY in a JSON string. I've been using free text and then converting / changing display format via arrow. Short of using pendulum, I don't think there's a cleaner way to do this - right?
[22:01:28] *** Joins: wyclif (~wyclif@user/wyclif)
[22:02:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[22:04:09] *** Joins: Liblx (~Alex@2a02:810c:280:59c:68e7:d569:ad47:d289)
[22:04:17] *** Joins: schumaml4 (~schumaml@dslb-188-104-178-056.188.104.pools.vodafone-ip.de)
[22:04:22] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:05:07] *** Joins: colegatron3 (~colegatro@86.127.251.171)
[22:06:02] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 255 seconds)
[22:06:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[22:06:59] *** Quits: schumaml3 (~schumaml@dslb-178-002-183-160.178.002.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[22:07:00] *** Joins: wyclif (~wyclif@user/wyclif)
[22:07:22] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Quit: Client closed)
[22:07:35] *** Quits: colegatron2 (~colegatro@ec2-34-240-152-191.eu-west-1.compute.amazonaws.com) (Ping timeout: 250 seconds)
[22:07:36] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[22:08:50] *** Joins: Akuli (~Akuli@82-203-164-35.bb.dnainternet.fi)
[22:11:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:11:54] *** Quits: gusto (~Augustus@2620:149:e0:6004::182) (Quit: Textual IRC Client: www.textualapp.com)
[22:11:58] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[22:12:31] *** Joins: wyclif (~wyclif@user/wyclif)
[22:13:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[22:15:30] *** ripdog is now known as ripdog_
[22:15:32] *** ripdog_ is now known as ripdog
[22:16:14] *** Quits: schumaml4 (~schumaml@dslb-188-104-178-056.188.104.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[22:19:06] *** Joins: schumaml4 (~schumaml@dslb-188-104-179-146.188.104.pools.vodafone-ip.de)
[22:19:29] <ChrisWarrick> foo: if you’re using a reasonable serialization library, there might be a way to handle this automatically
[22:20:02] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 265 seconds)
[22:21:14] <jinsun> dba: didn't you say earlier that you don't require the excel? excel formatting will not show up in df.to_html or df.style you will have to redo the formatting in the pandas styler way and create html  from that
[22:22:12] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:22:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:22:27] <nubonix> is there a way to send video via a starlette or fastapi websocket?
[22:22:43] <ChrisWarrick> nubonix: what would you do with that video?
[22:22:51] <nubonix> not looking to render it via a browser, but display it in a pyqt5 widget
[22:23:03] <ChrisWarrick> nubonix: and it’s real-time streaming?
[22:23:06] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:23:07] <nubonix> yeah
[22:23:12] <foo> ChrisWarrick: interesting, I didn't think about pickle or such knowing how to handle a date format. I thought the only option would be to store in unix timestamp or such and then convert to datetime object when referencing
[22:23:32] *** Joins: wyclif (~wyclif@user/wyclif)
[22:23:35] <ChrisWarrick> foo: pickle is neither reasonable nor a serialization library
[22:23:38] <nubonix> ChrisWarrick: ive got a socket atm, but i want to use a websocket so i can send more than one image at a time
[22:23:41] <deniska> pickle is ^ yeah, that
[22:24:02] <ChrisWarrick> nubonix: you should probably use a real standard geared towards real-time video streaming
[22:24:12] <nubonix> ChrisWarrick: suchas?
[22:24:33] <ChrisWarrick> nubonix: I’ve heard all the cool kids are using webrtc these days
[22:25:37] <ChrisWarrick> foo: unix timestamp is an ugly way to store timestamps. Libraries that handle serialization (marshmallow would be one example) can be told how to deal with datetime objects (or objects from your favorite date/time library)
[22:25:51] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[22:26:25] <nubonix> ChrisWarrick: lemme revise my last statement. so ive got a server, and im sending video [from multiple programs that are running in the background on the server], and the number of video:server ratio can be 1:1 or 2:1  10:1, etc, the ratio is flexible and im trying to avoid having to port forward a port for each video feed
[22:26:43] <foo> ChrisWarrick: thanks, is it reasonable to use marshmallow to store in a JSONB field?
[22:26:47] <foo> (in postges)
[22:26:48] <nubonix> ChrisWarrick: webrtc? isnt that an ip verification thing?
[22:27:18] <nubonix> ChrisWarrick: any recommendations on what library for webrtc?
[22:28:20] <nubonix> hmm https://github.com/aiortc/aiortc
[22:28:23] <ChrisWarrick> nubonix: (1) no, it definitely isn’t (2) I don’t have any
[22:28:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[22:28:50] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[22:28:57] <ChrisWarrick> foo: sure, it would be (although it would be more reasonable to store stuff in regular columns)
[22:28:57] <nubonix> ChrisWarrick: (1) reason i ask about the ip verify thing is b/c https://whoer.net/
[22:29:02] *** Joins: wyclif (~wyclif@user/wyclif)
[22:29:28] <nubonix> ChrisWarrick: advtanage of using webrtc over sockets or websockets?
[22:29:48] <ChrisWarrick> nubonix: it’s an actual protocol made for real-time streaming?
[22:29:52] <han-solo> https://www.youtube.com/watch?v=WmR9IMUD_CY
[22:30:01] <nubonix> ChrisWarrick: fair enough
[22:30:07] <ChrisWarrick> nubonix: there are existing libraries that understand how to do video over webrtc
[22:30:09] <nubonix> ChrisWarrick: thanks ill give it a try
[22:30:15] <deniska> nubonix: for real time video you generally don't care about everything TCP does for you when it detects a missing packet
[22:30:30] <nubonix> deniska: idk what that means
[22:30:57] <bjs> deniska: surely for real-time video there's no reason to use TCP at all
[22:31:13] <nubonix> bjs udp?
[22:31:19] <deniska> one reason would be client compatibility, that's why HLS is a thing :)
[22:31:22] <bjs> something datagram-y
[22:31:32] <bjs> if you drop a packet you don't want to wait around for it because by t he time it arrives it's stale ;P
[22:31:50] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[22:32:15] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:32:30] <deniska> nubonix: basically in typical uses you'd rather have a small probably even unnoticable hick in a video rather than the whole thing stalling for 0.3 seconds or so
[22:32:53] *** Quits: schumaml4 (~schumaml@dslb-188-104-179-146.188.104.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[22:33:37] <deniska> unless your job is to actually relay the video without losses while being not so realtime being an acceptable trade off :)
[22:34:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[22:34:34] *** Joins: wyclif (~wyclif@user/wyclif)
[22:34:53] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 250 seconds)
[22:35:10] <p-i-> I'm processing a datastream of 600 million (symbol, packet) tuples. Each symbol can be processed independently of the others. Proto-Code looks like this: https://bpa.st/LOHQ
[22:35:10] <p-i-> Might someone be willing to make a sketch of how I can adapt this to use all 4 cores on my MBP?
[22:35:10] <p-i-> If I can see a prototype of the target, it will make reading the multiprocessing doc much easier.
[22:35:55] *** Quits: marduk (~marduk@216.243.54.166) (Remote host closed the connection)
[22:38:10] *** Quits: creese (~user@136-25-168-142.cab.webpass.net) (Ping timeout: 240 seconds)
[22:39:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:40:04] *** Joins: wyclif (~wyclif@user/wyclif)
[22:40:43] *** Joins: marduk (~marduk@216.243.54.166)
[22:41:34] *** Joins: DB123454321 (~DB1234543@2409:4065:e1b:7426:f10a:fd35:84b2:967)
[22:41:38] <DB123454321> Hi
[22:41:59] <DB123454321> Can someone help me out with a mysql.connector error?
[22:42:44] <DB123454321> Waiting for a reply!
[22:43:05] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:43:23] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 255 seconds)
[22:43:36] <dav1d> maybe
[22:43:50] <DB123454321> Let me share the error code.
[22:43:50] <raek> DB123454321: don't ask to ask! :-) just post a link to the error
[22:43:53] <p-i-> DB123454321: If you're lucky everyone else is waiting for a question
[22:44:00] <DB123454321> thanks
[22:44:18] *** Joins: trampel (~trampel@2601:602:9c00:921:1be9:6d7a:a476:156)
[22:44:53] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:80c0:ff1d:f199:aec5) (Ping timeout: 252 seconds)
[22:45:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:45:35] *** Joins: wyclif (~wyclif@user/wyclif)
[22:46:01] <han-solo> p-i-: https://bpa.st/A2AQ # will that work ?
[22:47:17] <DB123454321> import mysql.connector as s
[22:47:18] <DB123454321> con=s.connect(host='localhost',user='root',password='1234',database='empl')
[22:47:18] <DB123454321> Error:
[22:47:19] <DB123454321> mysql.connector.errors.ProgrammingError: 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)
[22:47:41] *** Quits: t3nj1n (~t3nj1n@69.206.216.207) (Ping timeout: 268 seconds)
[22:47:49] <p-i-> han-solo: My concern is that packets for (say) symbol 'ADX' are ALWAYS handled on the same core. Would that code achieve this?
[22:49:13] <han-solo> https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor-example
[22:49:26] <ChrisWarrick> DB123454321: (1) don’t use mysql.connector, use mysqlclient instead (2) are you sure the configuration is correct? how is authentication configured in mysql?
[22:49:32] <han-solo> p-i-: are you saying, it should *always* handle 'ADX' in the same core ?
[22:49:35] <p-i-> I was thinking I would need to create 4 'core' objects, one for each CPU core, and then allocate 13 symbols for each.
[22:49:39] <p-i-> yeah!
[22:50:03] <han-solo> p-i-: i don't think, it would
[22:50:11] *** crackerj- is now known as crackerjack
[22:50:11] <p-i-> Otherwise 2 cores might bump into each other operating over the Processor('ADX') object.
[22:50:19] <han-solo> it just splits the data, and handles them to each available core, i guess
[22:50:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:50:34] *** Joins: amanr (~therojjha@20.204.87.0)
[22:50:56] <DB123454321> Actually, I need to use mysql.connector only for my school project purpose.
[22:51:02] *** Quits: crackerjack (crackerjac@pear.bnc4free.com) (Quit: fBNC - https://bnc4free.com)
[22:51:05] *** Joins: wyclif (~wyclif@user/wyclif)
[22:51:16] *** Joins: crackerjack (crackerjac@pear.bnc4free.com)
[22:51:25] <DB123454321> Otherwise, the same code works pretty well with pymysql.connect.
[22:52:46] *** Joins: Cache_Money (~Cache_Mon@c-67-160-112-6.hsd1.wa.comcast.net)
[22:53:23] <DB123454321> ChrisWarrick: Waiting for reply.
[22:53:59] <ChrisWarrick> DB123454321: well, I’m not surprised that something is broken in mysql.connector but works in other libraries
[22:53:59] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[22:54:12] *** Joins: Auron (~Auron956@user/auron)
[22:54:14] <ChrisWarrick> DB123454321: but how is the user configured in mysql? the database is sometimes picky about things like hostnames
[22:55:42] <DB123454321> ChrisWarrick: I checked that out in mysql. I typed select current_user; and got output: root@localhost
[22:55:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[22:56:00] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:56:04] <ChrisWarrick> DB123454321: hm, no idea right now, sorry
[22:56:23] *** Joins: c10l (~c10l@89.34.167.207)
[22:56:25] <DB123454321> okay, waiting for someone else to help.
[22:56:36] <jinsun> p-i-: how will one symbol be processed twice? you have a dictionary of symbols right? so each symbol is unique I expect
[22:56:36] *** Joins: wyclif (~wyclif@user/wyclif)
[22:57:18] *** Quits: greedom (~greedom@2001:16b8:3254:3900:220b:1996:5f5a:8378) (Remote host closed the connection)
[22:59:10] <DB123454321> Can someone kindly get me out of the trouble? It's really painful as I have no idea how to solve it.
[22:59:18] *** Quits: Celelibi (celelibi@user/celelibi) (Ping timeout: 256 seconds)
[22:59:57] <DB123454321> Facing it since two months now, checked out google sources but, in vain.
[23:00:46] *** Joins: Celelibi (celelibi@user/celelibi)
[23:01:02] <ChrisWarrick> DB123454321: perhaps ask the #mysql channel, or just switch to a library that works
[23:01:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[23:02:07] *** Joins: wyclif (~wyclif@user/wyclif)
[23:02:15] *** Quits: scabby (~scabby@user/scabootssca) (Remote host closed the connection)
[23:02:39] *** Joins: scabby (~scabby@user/scabootssca)
[23:02:43] *** Joins: gloin (~gloin@user/gloin)
[23:02:48] <DB123454321> ChrisWarrick: I would need to use mysql.connector only for my project. Let me check out in the channel you adviced.
[23:04:13] *** Quits: cre (~x@p5b0fbc70.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[23:04:21] <han-solo> one SO posts seems to say, version mismatch could also raise that error, weird. https://stackoverflow.com/questions/32852163/accessing-mysql-from-python-3-access-denied-for-user/32853007
[23:05:00] *** Joins: cre (~x@p5b0fbc70.dip0.t-ipconnect.de)
[23:05:24] <ChrisWarrick> DB123454321: I’d talk to the teacher
[23:05:52] <DB123454321> ChrisWarrick: Thanks
[23:06:23] <ChrisWarrick> unless they’re incompetent, or paid by or*cle (and effectively incompetent), they shouldn’t really care about minor things like a specific mysql connection library
[23:06:31] <gloin> Somewhat noobish question - I'm trying to consolidate testing whether a function returns anything, much more accustomed to perl so here's what would work in perl but fails in python. How do I correctly do this, preferably with the test being a single line? https://bpa.st/Q6OA
[23:07:01] <grym> gloin: foo:=somefunction() and foo is not None
[23:07:03] <DB123454321> han-solo: I checked that out too. My versions are compatible
[23:07:18] <gloin> grym++
[23:07:40] <ChrisWarrick> gloin: one-liners aren’t a good idea in python
[23:07:50] <habnabit_> eh? the usual := usage is `if (foo := f()) is not None:`
[23:08:07] <DB123454321> han-solo: I am using Python 3.9.6 and Mysql 8.0.25
[23:08:33] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Read error: Connection reset by peer)
[23:08:37] <grym> gloin: in a test, i'd write `test_somefunction():; result= somefunction(); assert result is not None # or a stronger assert about the return value`
[23:08:40] *** Quits: coldenbrewed (~nitrobrew@li1517-39.members.linode.com) (Remote host closed the connection)
[23:08:43] *** Joins: Adoi (~Adoi@user/adoi)
[23:08:54] <Adoi> hello everyone! :)
[23:08:58] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[23:09:13] <gloin> ach, I'm on python3.6, no walrus
[23:09:22] <grym> gloin: (i don't like functions that only return a non-None value _sometimes_; i don't want to check that at runtime if i can get away with it)
[23:09:26] <ChrisWarrick> DB123454321: and mysql.connector?
[23:09:32] *** Joins: beencubed (~beencubed@209.131.238.248)
[23:09:45] <habnabit_> yeah, 'while loop with None test' is just begging to be an iterator instead
[23:09:56] <habnabit_> for loops are great
[23:09:58] <DB123454321> ChrisWarrick: 8.0.25
[23:10:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[23:10:43] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:10:51] *** Quits: telboon (~telboon@user/telboon) (Remote host closed the connection)
[23:10:54] <habnabit_> gloin, for foo in iter(f, None):
[23:10:56] <p-i-> jinsun: I have 52 unique symbols. And each stream-event pertains to one of them. There will be no shared resources, apart from the payload that is fed into processor[symbol].process(symbol, payload). i.e. the payload exists in the root level code, and on the core that is responsible for handling that symbol.
[23:11:10] *** Joins: telboon (~telboon@user/telboon)
[23:11:17] <p-i-> I can do `core_index = symbols.index(symbol) % 4`
[23:11:44] *** Quits: mokulus (~mokulus@user/mokulus) (Quit: WeeChat 3.2)
[23:12:00] <gloin> so assuming I have a group of related functions, each of which may or may not return a value, and I want to run through them and build a list of returned values... or maybe I should be putting these results in a hash. Hm. Python has a hash right?
[23:12:09] <p-i-> But I think I need some queueing system. To queue items to process for each core. And I'm a bit worried one of the queues may get really big, as I can't guarantee the distribution of workload will be even.
[23:12:11] <habnabit_> p-i-, what you're looking for is called 'consistent hashing'
[23:12:33] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[23:12:36] <habnabit_> p-i-, https://www.toptal.com/big-data/consistent-hashing
[23:12:42] <gloin> ok there's the hash
[23:12:45] <gloin> hrm
[23:12:59] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Read error: Connection reset by peer)
[23:13:03] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Read error: Connection reset by peer)
[23:13:11] <habnabit_> gloin, you should probably read the tutorial in the /topic.. it's short, and written for people who know other languages already
[23:13:22] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[23:13:28] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[23:13:33] <dav1d> gloin: foo = some_func()\n if foo is not None: ...?
[23:13:40] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[23:13:42] <gloin> yeah, I think I will habnabit_ - I'm already in the weeds of "what are these double-underscores about?" from the hash builtin page
[23:14:13] <dav1d> gloin: __hash__?
[23:14:20] <ChrisWarrick> gloin: if you’re looking for a hashtable - we call those dictionaries, or dicts for short
[23:14:33] <grym> __hash__ is something else entirely
[23:15:04] <gloin> "As stated above, hash() method internally calls __hash__() method."
[23:15:14] <gloin> then I'm like okay double-underscores, huh
[23:15:20] <p-i-> I suppose if my symbol is 'ABC', I can just wait until one core is free, and none of the others are currently processing symbol 'ABC'. And throw it to that core.
[23:15:23] *** Quits: ttys000 (~ttys000@user/ttys000) (Quit: Textual IRC Client: www.textualapp.com)
[23:15:42] <gloin> so I think the best use of my time is to hit that tutorial or similar
[23:15:54] <habnabit_> p-i-, is 'always processed by the same core' or 'fair queueing' more important
[23:16:47] *** Joins: nmoura (~nmoura@177.192.16.58)
[23:16:57] <p-i-> habnabit_: I've just realized, the only constraint is that I don't have 2 cores simul. processing the same symbol.
[23:17:02] *** Joins: wyclif (~wyclif@user/wyclif)
[23:17:31] <habnabit_> p-i-, then you can trivially use a queue that each core reads from
[23:17:57] <Repiphany> Does your symbol processor have a state that changes with each payload
[23:19:15] *** Joins: thecoder (~mrrobot@c-73-27-71-147.hsd1.fl.comcast.net)
[23:19:32] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[23:20:40] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[23:20:46] <p-i-> I'm thinking maybe I can maintain a dict of the symbol each core is currently chewing, which may be None. Yes, as soon as the core finishes chewing a payload, it needs to be able to set `curr_symbol[core] = None`... then I can simply wait for (1) at least one core free, and (2) no cores processing 'symbol', and then `core[first_free].process(symbol, payload)`
[23:20:54] *** Quits: vince (~vince@75.127.14.76) (Ping timeout: 252 seconds)
[23:21:03] *** Quits: alexyov (~alexyov@79.124.0.2) (Remote host closed the connection)
[23:21:16] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Ping timeout: 252 seconds)
[23:21:17] *** Joins: alexyov (~alexyov@79.124.0.2)
[23:21:23] <p-i-> ... and avoid a queueing system inside each core processor. Which might lead to race conditions, if 2 pick the same symbol at the same time.
[23:21:33] <p-i-> Repiphany: Yes! It's stateful.
[23:21:35] <no_gravity> p-i-: Words are cheap. Show us code.
[23:21:43] <thecoder> I've been messing around with this cognito and trying to get pagination to work, or maybe it is working, but I am not understanding how it is working. can someone elaborate?
[23:21:44] <thecoder> https://pastebin.com/SHp3RtDR
[23:22:00] *** Quits: moto (~moto@user/moto) (Ping timeout: 252 seconds)
[23:22:09] <thecoder> Basically I'm just trying to get all the results of each page with pagination. Not sure what I might be doing incorrectly.
[23:22:14] *** Joins: moto (~moto@user/moto)
[23:22:18] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[23:22:23] <p-i-> no_gravity: ok I'll pseudocode it, and put it up here and ask the group to shoot holes in it.
[23:22:25] <thecoder> also I haven't cleaned up any of the code yet...
[23:23:06] <bjs> p-i-: i'm not sure what the problem is, so you have a queue to begin working on each of those symbols and all 4 cores read from that queue and then what?
[23:23:36] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[23:24:03] <DB123454321> ChrisWarrick: Have you got any solution for my error?
[23:24:58] <ChrisWarrick> DB123454321: no
[23:25:09] <DB123454321> Okay
[23:25:14] <Repiphany> I get the feeling that the proper solution to your problem depends entirely on the nature of processing that you need to actually do
[23:25:27] <Repiphany> because sharing state among multiple processes is going to be a mission
[23:26:10] <DB123454321> Could you elaborate what you mean a bit?
[23:27:11] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[23:27:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:27:18] *** Joins: schumaml4 (~schumaml@dslb-178-002-184-123.178.002.pools.vodafone-ip.de)
[23:27:59] <DB123454321> Will come back tomorrow! Please try to find out the solution as I am facing it since 2 months now, nothing in google helped
[23:28:05] *** Joins: wyclif (~wyclif@user/wyclif)
[23:28:10] <DB123454321> Bye
[23:28:29] *** Parts: DB123454321 (~DB1234543@2409:4065:e1b:7426:f10a:fd35:84b2:967) ()
[23:29:53] *** Joins: fofoni_ (~fofoni@user/fofoni)
[23:30:05] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[23:30:27] *** Joins: DB123454321 (~DB1234543@2409:4065:e1b:7426:f10a:fd35:84b2:967)
[23:31:00] *** Quits: DB123454321 (~DB1234543@2409:4065:e1b:7426:f10a:fd35:84b2:967) (Client Quit)
[23:31:06] *** Quits: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10) (Ping timeout: 240 seconds)
[23:31:48] *** Quits: duoi (~duoi@user/duoi) (Ping timeout: 268 seconds)
[23:32:06] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[23:32:16] *** Quits: bluss (~bluss@user/bluss) (Ping timeout: 252 seconds)
[23:32:16] *** Quits: erica (~erica@user/erica) (Ping timeout: 252 seconds)
[23:32:16] *** Quits: Gud (~Gud@user/gud) (Ping timeout: 252 seconds)
[23:33:00] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:33:03] *** Joins: erica (~erica@user/erica)
[23:33:14] *** Quits: schumaml4 (~schumaml@dslb-178-002-184-123.178.002.pools.vodafone-ip.de) (Remote host closed the connection)
[23:33:22] *** Quits: cation (cation@user/cation) (Ping timeout: 252 seconds)
[23:33:34] *** Joins: wyclif (~wyclif@user/wyclif)
[23:33:38] *** Joins: schumaml4 (~schumaml@dslb-178-002-184-123.178.002.pools.vodafone-ip.de)
[23:33:52] *** Joins: cation (cation@user/cation)
[23:34:59] *** Joins: duoi (~duoi@user/duoi)
[23:37:09] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[23:37:55] *** Joins: bluss (~bluss@user/bluss)
[23:37:57] *** Joins: y1n (~y1n@84-115-64-28.wifi.dynamic.surfer.at)
[23:38:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[23:39:06] *** Joins: wyclif (~wyclif@user/wyclif)
[23:39:08] <p-i-> ok, here's some pseudocode: https://bpa.st/VMXQ
[23:39:12] <p-i-> How dumb is this approach?
[23:39:39] <thecoder> I've been messing around with this cognito and trying to get pagination to work, or maybe it is working, but I am not understanding how it is working. can someone elaborate?
[23:39:39] *** Joins: Paul (~Paul@user/paul)
[23:39:42] <thecoder> damnit
[23:39:48] <thecoder> didn't mean to repost that
[23:40:07] <p-i-> AFAICS, it will _ocasionally_ wait a _little_ time for an available processing slot, but otherwise be really efficient.
[23:40:13] <thecoder> so I think the pagination is working but when I was running it in a different region it was only returning a result of about 78 users.
[23:40:18] *** Quits: Liblx (~Alex@2a02:810c:280:59c:68e7:d569:ad47:d289) (Ping timeout: 240 seconds)
[23:40:31] <habnabit_> p-i-, why would you do this instead of a queue?
[23:40:47] <thecoder> but it shows there are a total of 532 users so am I missing something or is it just 78 users that are active.
[23:40:47] <thecoder> weird.
[23:40:57] *** Joins: Betal (~Beta@user/betal)
[23:41:08] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[23:41:16] <ChrisWarrick> thecoder: what’s a cognito and did you show your code?
[23:41:16] *** Joins: Qtronix (~qtronix@cm-84.213.108.169.getinternet.no)
[23:41:19] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:41:30] *** Joins: Liblx (~Alex@2a02:810c:280:59c:68e7:d569:ad47:d289)
[23:41:40] <p-i-> habnabit_: woops, there's a mistake. It's an `async for` loop the events are coming from. i.e. there's already a queueing system.
[23:41:44] <ChrisWarrick> p-i-: Do you get roughly the same amount of each symbol?
[23:42:02] <p-i-> Do you mean a queue inside each of my 52 `processor` objects?
[23:42:14] *** Quits: thecoder (~mrrobot@c-73-27-71-147.hsd1.fl.comcast.net) (Read error: Connection reset by peer)
[23:42:22] <habnabit_> p-i-, no. i mean one queue with one write end and one read end held by each core
[23:42:26] <p-i-> ChrisWarrick: Yes, but it's not guaranteed, and it'll imbalance over time.
[23:42:45] <habnabit_> p-i-, then when any core reads from its end of the queue, no other core will receive that
[23:42:47] *** Quits: fsg (fsg@2600:3c00::f03c:92ff:fec6:da18) (Ping timeout: 255 seconds)
[23:42:51] <p-i-> habnabit_: But then each core needs to know what symbol the others are chewing on. So as to avoid racecond.
[23:43:04] <habnabit_> p-i-, ?? why would the core need to know that
[23:43:04] <p-i-> If I centralize the dispatch, I avoid this issue.
[23:43:11] <ChrisWarrick> p-i-: I’d consider just assigning a core number to each symbol instead of all that complicated stuff
[23:44:26] <p-i-> Because if another core is processing the same symbol, the state (internal to processor[symbol]) will get mangled
[23:44:26] <p-i-> ChrisWarrick: like `core_index = symbols.index(symbol) % 4`
[23:44:26] <p-i-> I thought of that, but work could pile up on one core, and I've got 600M lines to chew.
[23:44:30] <habnabit_> p-i-, the core only knows one symbol at a time: the one that it got from the queue
[23:44:41] <ChrisWarrick> p-i-: but how likely is this situation?
[23:44:48] <habnabit_> p-i-, yes, but as i said, no core will know about any symbol that any other would
[23:44:57] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: Ping timeout (120 seconds))
[23:45:05] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 250 seconds)
[23:45:05] <habnabit_> p-i-, a symbol only exits from exactly one read end of the queue
[23:45:12] <voldial> Is there a standard way to tie verbosity level (for debugging) to call depth? I standardized everything to always take verbose/debug kwargs, but I want a way to (for example) make verbose a int that (just for example) gets the call depth subtracted from, and then stops causing additional debug output when verbose=0.
[23:45:31] <habnabit_> voldial, i've never heard of anyone doing that, so idk
[23:45:48] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:45:50] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Ping timeout: 252 seconds)
[23:46:01] <p-i-> Might get an escalating RAM issue.
[23:46:01] <p-i-> habnabit_: yeah, but another core might be chewing the same symbol at the same time. And that would fubar.
[23:46:12] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 252 seconds)
[23:46:20] *** Joins: thiras (~thiras@user/thiras)
[23:46:23] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[23:46:30] <habnabit_> p-i-, you keep saying "but two cores might know about a symbol" and i keep saying "no, that would be impossible as i described it" and you say "but what if it wasn't impossible"
[23:46:31] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[23:46:33] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[23:46:46] <habnabit_> p-i-, but, again, the system as i decribed it makes it impossible
[23:46:50] *** schumaml4 is now known as schumaml
[23:46:56] <voldial> habnabit_: ok, I'll give it a shot, depth = len(stack)
[23:47:27] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[23:47:29] *** Joins: nmoura (~nmoura@177.192.16.58)
[23:47:32] *** Quits: Qtronix (~qtronix@cm-84.213.108.169.getinternet.no) ()
[23:47:36] <habnabit_> p-i-, if it was possible, it wasn't the system i described
[23:47:50] <p-i-> habnabit_: so each core's 'runtime' keeps picking items off the central queue?
[23:47:58] <habnabit_> p-i-, yes
[23:48:42] <p-i-> but suppose runtime0 picks 'ADX', and moments later runtime3 picks 'ADX' also...
[23:48:47] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[23:49:14] <p-i-> both are now operating on the processors['ADX'] object/state
[23:49:17] <habnabit_> p-i-, again: how? queues don't randomly duplicate items, and you'd only put it into the queue once
[23:49:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[23:49:36] <p-i-> habnabit_: I'll get many feeds for each symbol!
[23:49:45] <p-i-> Only 52 symbols, 600M lines...
[23:49:58] <habnabit_> p-i-, i see
[23:50:08] *** Joins: wyclif (~wyclif@user/wyclif)
[23:50:16] *** Joins: pnoud (~pnoud@user/pnoud)
[23:50:21] <habnabit_> p-i-, then yes, a queue per symbol
[23:50:41] <habnabit_> p-i-, what is the processing it's doing?
[23:50:56] <p-i-> But then queues could get massive, as some symbols are super-active.
[23:51:04] <p-i-> It has to maintain an orderbook and log trades.
[23:51:15] <habnabit_> p-i-, queues can be bounded
[23:51:49] <p-i-> like... suspends execution until queue is small enough to accomodate a new item?
[23:51:53] <habnabit_> p-i-, you want to pause processing lines when you hit backpressure, right?
[23:52:12] <p-i-> yeah, I'll have to, one way or another.
[23:52:19] *** Quits: trampel (~trampel@2601:602:9c00:921:1be9:6d7a:a476:156) (Quit: Leaving)
[23:52:32] <habnabit_> p-i-, sure. trio's bounded queues give you backpressure in exactly this way
[23:52:39] <habnabit_> p-i-, you can even consume from them with an `async for`
[23:53:11] <p-i-> oh that's good to know. I always use Trio if I can. It's awesome.
[23:53:21] <p-i-> I'll post in the gitter.
[23:54:02] <habnabit_> p-i-, then the producer and consumer don't have to know about each other; the thing reading log lines pushes into the right queue per symbol, and concurrently (via a nursery at some point) some things are reading from those queues to process symbols
[23:54:30] <habnabit_> p-i-, if pushing into the queue gives you backpressure, then the reading lines pauses whilst the queues concurrently empty
[23:55:29] *** Joins: zumba_addict (~zumba_add@2601:240:4500:8320:5d6e:c7d7:5f3:8e6b)
[23:55:31] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[23:56:45] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 268 seconds)
[23:57:08] *** Joins: thiras (~thiras@user/thiras)
[23:57:12] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 252 seconds)
[23:57:36] *** Quits: dodo (~dodo@user/dodo) (Quit: dodo)
[23:59:01] *** Joins: dodo (~dodo@user/dodo)
