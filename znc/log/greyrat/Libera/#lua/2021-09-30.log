[00:01:46] *** Quits: Yorlik (~Yorlik___@ip4-188-74-2-246.dyn.netcomnetz.de) (Ping timeout: 245 seconds)
[00:19:30] *** Quits: kurfen (~kurfen@37.120.204.67) (Quit: WeeChat 2.3)
[00:19:54] *** Joins: kurfen (~kurfen@37.120.204.67)
[00:51:17] *** Quits: SquidDev (~SquidDev@autoclave.squiddev.cc) (Quit: Bye!)
[00:51:41] *** Joins: SquidDev (~SquidDev@autoclave.squiddev.cc)
[00:58:51] *** Quits: kurfen (~kurfen@37.120.204.67) (Quit: WeeChat 2.3)
[00:59:12] *** Joins: kurfen (~kurfen@37.120.204.67)
[01:02:29] *** Quits: kurfen (~kurfen@37.120.204.67) (Client Quit)
[01:33:41] *** Joins: xqt (~xqt@user/xqt)
[01:38:36] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 265 seconds)
[02:00:54] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[02:30:31] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[02:31:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:33:47] *** Joins: pizdets_ (~pizdets@183.182.111.176)
[02:34:17] *** Quits: pizdets (~pizdets@183.182.110.222) (Ping timeout: 264 seconds)
[02:42:42] *** Quits: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr) (Quit: bye)
[03:08:37] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[03:17:10] *** Quits: macaw (~macaw@176.221.120.196) (Ping timeout: 256 seconds)
[03:21:55] *** Joins: xqt (~xqt@user/xqt)
[03:26:47] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 252 seconds)
[03:44:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[03:45:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:04:49] *** Quits: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net) (Remote host closed the connection)
[05:04:33] *** Quits: ratchet_freak (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be) (Ping timeout: 250 seconds)
[05:10:13] *** Joins: xqt (~xqt@user/xqt)
[05:15:08] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 265 seconds)
[05:34:05] *** Quits: password (~password@user/password2) (Quit: Ping timeout (120 seconds))
[05:45:34] *** Quits: ratchetfreak (~ratchetfr@d8D8779D9.access.telenet.be) (Read error: Connection reset by peer)
[06:32:28] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 265 seconds)
[06:36:29] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (Read error: Connection reset by peer)
[06:58:28] *** Joins: xqt (~xqt@user/xqt)
[07:03:01] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 245 seconds)
[07:42:41] *** Joins: kipras (~kipras@78-57-120-254.static.zebra.lt)
[08:03:51] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 245 seconds)
[08:05:49] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[08:45:31] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:395e:a5e0:4cb1:5563)
[08:46:45] *** Joins: xqt (~xqt@user/xqt)
[08:51:17] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 252 seconds)
[09:11:50] *** Joins: password (~password@user/password2)
[09:16:43] *** Andrew_ is now known as Andrew
[09:26:36] *** Quits: Elw3 (~Elw3@x59cc9b3b.dyn.telefonica.de) (Quit: Leaving)
[09:31:23] *** Joins: Yorlik (~Yorlik___@ip6-2a03-7500-0612-9000-048d-6644-94ca-30c0.dyn.netcomnetz.de)
[09:39:31] *** Quits: fcr (~fran@r167-56-79-124.dialup.adsl.anteldata.net.uy) (Ping timeout: 265 seconds)
[09:39:41] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Ping timeout: 245 seconds)
[09:45:05] *** Joins: fcr (~fran@r167-60-72-42.dialup.adsl.anteldata.net.uy)
[10:07:08] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:14:49] *** Quits: km (~km@user/km) (Quit: Leaving)
[10:17:24] *** Joins: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net)
[10:23:49] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[10:30:17] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[10:30:26] *** Joins: xqt (~xqt@user/xqt)
[10:30:33] *** Joins: kiril (~kiril@85.91.153.163)
[10:37:05] *** Joins: macaw (~macaw@176.221.120.196)
[10:52:22] *** Joins: dvx (~dvx@185.63.97.64)
[10:53:16] *** Quits: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net) (Ping timeout: 252 seconds)
[11:10:20] *** Joins: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be)
[11:11:21] *** Quits: Yorlik (~Yorlik___@ip6-2a03-7500-0612-9000-048d-6644-94ca-30c0.dyn.netcomnetz.de) (Ping timeout: 245 seconds)
[11:15:49] *** Quits: aead (~aead@user/aead) (Quit: ZNC - https://znc.in)
[11:17:22] *** Joins: aead (~aead@user/aead)
[11:34:38] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 252 seconds)
[11:35:14] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:39] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:45:17] *** Joins: km (~km@user/km)
[11:54:50] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[11:58:33] *** Joins: kiril (~kiril@85.91.153.163)
[12:07:45] *** Joins: xqt (~xqt@user/xqt)
[12:41:58] *** Joins: Yorlik (~Yorlik___@ip6-2a03-7500-0612-9000-f13b-5666-062e-3b78.dyn.netcomnetz.de)
[13:25:28] *** Quits: xqt (~xqt@user/xqt) (Quit: WeeChat 3.3)
[13:32:42] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:35:31] *** Quits: uzi_ (~uzi@161.9.200.42) (Ping timeout: 245 seconds)
[13:41:24] *** Joins: uzi_ (~uzi@161.9.200.42)
[13:43:01] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Ping timeout: 245 seconds)
[14:03:01] *** Quits: uzi_ (~uzi@161.9.200.42) (Ping timeout: 245 seconds)
[14:05:34] *** Joins: uzi_ (~uzi@161.9.200.42)
[14:11:30] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[14:17:26] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 265 seconds)
[14:34:21] *** Quits: uzi_ (~uzi@161.9.200.42) (Ping timeout: 265 seconds)
[14:38:41] *** Joins: uzi_ (~uzi@161.9.200.42)
[15:03:12] *** Quits: uzi_ (~uzi@161.9.200.42) (Read error: Connection reset by peer)
[15:12:00] *** Joins: uzi_ (~uzi@161.9.200.42)
[15:12:07] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:395e:a5e0:4cb1:5563) (Quit: Textual IRC Client: www.textualapp.com)
[15:36:13] *** Quits: uzi_ (~uzi@161.9.200.42) (Ping timeout: 265 seconds)
[15:42:39] *** Joins: uzi_ (~uzi@161.9.200.42)
[15:56:35] *** Joins: Elw3 (~Elw3@x59cc9bfe.dyn.telefonica.de)
[16:09:18] *** Quits: uzi_ (~uzi@161.9.200.42) (Ping timeout: 260 seconds)
[16:11:08] *** Quits: dionys (dionys@user/dionys) (Quit: dionys)
[16:11:35] *** Joins: dionys (dionys@user/dionys)
[16:12:11] *** Quits: Yorlik (~Yorlik___@ip6-2a03-7500-0612-9000-f13b-5666-062e-3b78.dyn.netcomnetz.de) (Ping timeout: 245 seconds)
[16:15:07] *** Joins: uzi_ (~uzi@161.9.200.42)
[16:20:41] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[16:20:55] *** Joins: kiril (~kiril@85.91.153.163)
[16:35:34] *** Joins: uzi__ (~uzi@161.9.200.42)
[16:35:34] *** Quits: uzi__ (~uzi@161.9.200.42) (Client Quit)
[16:36:21] *** Quits: uzi_ (~uzi@161.9.200.42) (Read error: Connection reset by peer)
[16:43:16] *** Joins: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net)
[16:52:30] *** Joins: ttmrichter (~ttmrichte@user/ttmrichter)
[16:59:50] *** Quits: khoa (~khoa@user/khoa) (Ping timeout: 265 seconds)
[17:01:29] *** Joins: khoa (~khoa@user/khoa)
[17:06:21] *** Quits: ttmrichter (~ttmrichte@user/ttmrichter) (Quit: Client closed)
[17:07:52] *** Joins: ttmrichter (~ttmrichte@user/ttmrichter)
[17:22:33] *** Quits: Elw3 (~Elw3@x59cc9bfe.dyn.telefonica.de) (Ping timeout: 265 seconds)
[17:23:41] *** Joins: Yorlik (~Yorlik___@ip6-2a03-7500-0612-9000-19d8-64c1-a753-2f9a.dyn.netcomnetz.de)
[17:34:41] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c528:3580:c9d3:3c6)
[17:34:41] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c528:3580:c9d3:3c6) (Changing host)
[17:34:41] *** Joins: skapata (~Skapata@user/skapata)
[17:43:49] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[17:45:44] *** Joins: tbcr_ (~tbcr@user/tbcr)
[17:51:17] *** tbcr_ is now known as tbcr
[18:21:36] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:9842:f3f7:64ff:d6dc)
[18:44:22] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[18:48:43] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c528:3580:c9d3:3c6)
[18:48:44] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c528:3580:c9d3:3c6) (Changing host)
[18:48:44] *** Joins: skapata (~Skapata@user/skapata)
[19:18:40] *** Quits: Yorlik (~Yorlik___@ip6-2a03-7500-0612-9000-19d8-64c1-a753-2f9a.dyn.netcomnetz.de) (Ping timeout: 250 seconds)
[19:18:51] *** Quits: tbcr (~tbcr@user/tbcr) (Remote host closed the connection)
[19:19:15] *** Joins: tbcr (~tbcr@user/tbcr)
[19:30:42] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:30:45] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[19:34:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:35:31] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[19:37:19] *** Quits: tbcr (~tbcr@user/tbcr) (Remote host closed the connection)
[19:37:43] *** Joins: tbcr (~tbcr@user/tbcr)
[19:42:00] *** Quits: tbcr (~tbcr@user/tbcr) (Remote host closed the connection)
[19:42:47] *** Joins: Elw3 (~Elw3@dynamic-002-247-242-186.2.247.pool.telefonica.de)
[19:58:55] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[20:02:53] <RhodiumToad> kevans: lundump.c might be superfluous if you never need to load binary chunks
[20:02:54] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[20:07:08] *** Joins: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr)
[20:14:50] *** Joins: Yorlik (~Yorlik___@ip6-2a03-7500-0612-9000-6466-32e8-ab22-4b52.dyn.netcomnetz.de)
[20:23:25] *** Joins: ChipsterOne (~Chipster@99.234.26.93.rev.sfr.net)
[20:24:46] *** Quits: Chipster (~Chipster@99.234.26.93.rev.sfr.net) (Ping timeout: 265 seconds)
[20:30:46] *** Quits: Songro (~songro@184-23-230-118.dedicated.static.sonic.net) (Ping timeout: 252 seconds)
[20:31:58] *** Joins: Songro (~songro@184-23-230-118.dedicated.static.sonic.net)
[20:36:07] *** Quits: Songro (~songro@184-23-230-118.dedicated.static.sonic.net) (Ping timeout: 240 seconds)
[20:37:53] *** Joins: ratchet_freak (~ratchetfr@d8D8779D9.access.telenet.be)
[20:39:39] <kevans> RhodiumToad: ah, good shout. It looks easy enough to excise (one call in ldo.c) and I can't imagine needing to load binary chunks
[20:39:49] *** Quits: dlan (~dennis@gentoo/developer/dlan) (Ping timeout: 268 seconds)
[20:40:38] <kevans> I'll need to measure how much we actually need to shave off to imagine the possibility of loader veriexec, but that's a 2k start at least
[20:40:44] *** Joins: benaiah` (~benaiah@104.131.128.41)
[20:41:01] *** Joins: dlan (~dennis@gentoo/developer/dlan)
[20:41:29] *** Joins: vladimiroff (~kiril@85.91.153.163)
[20:42:12] *** Joins: andreyorst_ (~andreyors@2.92.125.242)
[20:42:58] *** Joins: dostoyev1ky2 (~sck@user/dostoyevsky2)
[20:47:36] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[20:47:36] *** Quits: kiril (~kiril@85.91.153.163) (*.net *.split)
[20:47:36] *** Quits: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be) (*.net *.split)
[20:47:36] *** Quits: password (~password@user/password2) (*.net *.split)
[20:47:36] *** Quits: kipras (~kipras@78-57-120-254.static.zebra.lt) (*.net *.split)
[20:47:36] *** Quits: reset (~reset@user/reset) (*.net *.split)
[20:47:36] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-3d27-f9b8-30f5-ae89.res6.spectrum.com) (*.net *.split)
[20:47:36] *** Quits: andreyorst (~andreyors@2.92.125.242) (*.net *.split)
[20:47:37] *** Quits: JanC (~janc@user/janc) (*.net *.split)
[20:47:37] *** Quits: benaiah (~benaiah@104.131.128.41) (*.net *.split)
[20:47:37] *** Quits: Rue (~rue@2001-b011-1000-18fe-c1c5-8c34-a15c-8faf.dynamic-ip6.hinet.net) (*.net *.split)
[20:47:37] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[20:47:57] <RhodiumToad> have you tried fiddling the compilation options much? especially for lvm.c, the amount of inlining will make a huge difference
[20:48:19] *** Joins: Songro (~songro@184-23-230-118.dedicated.static.sonic.net)
[20:48:59] *** Joins: tertu (~tertu@2601:449:8380:8aa0:d250:99ff:fedf:91a7)
[20:49:49] *** Joins: JanC (~janc@user/janc)
[20:50:13] *** Joins: crm (~crm@70.120.0.94)
[20:51:56] *** Quits: dstein64 (~dstein64@dannyadam.com) (Excess Flood)
[20:52:08] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:52:08] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-3d27-f9b8-30f5-ae89.res6.spectrum.com)
[20:52:08] *** Joins: Rue (~rue@2001-b011-1000-18fe-c1c5-8c34-a15c-8faf.dynamic-ip6.hinet.net)
[20:52:11] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Max SendQ exceeded)
[20:52:51] *** Joins: dstein64 (~dstein64@dannyadam.com)
[20:53:26] *** Joins: magla (~gelignite@55d4d08c.access.ecotel.net)
[20:53:46] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 265 seconds)
[20:53:58] *** Joins: kipras (~kipras@78-57-120-254.static.zebra.lt)
[20:54:40] *** Joins: reset (~reset@user/reset)
[20:55:03] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[20:57:54] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:58:25] *** Quits: Yorlik (~Yorlik___@ip6-2a03-7500-0612-9000-6466-32e8-ab22-4b52.dyn.netcomnetz.de) (Ping timeout: 260 seconds)
[21:05:04] <kevans> RhodiumToad: I don't believe we've tried much beyond -Oz/-Os and -ffunction-sections -fdata-sections
[21:06:51] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:06:54] <RhodiumToad> data-sections probably won't do anything for lua since there isn't any data
[21:07:02] <kevans> right, these are just what we apply globally to stand
[21:08:01] <kevans> although I thought we'd applied... something else
[21:08:09] <RhodiumToad> have you compared whether there's any noticable size difference between the switch-threaded and jump-threaded interpreters?
[21:08:25] * RhodiumToad would guess there probably isn't much
[21:12:07] *** Joins: dlan_ (~dennis@58.37.232.153)
[21:12:27] <kevans> switch-threaded and jump-threaded?
[21:12:28] *** Joins: strungout (znc@mutant.penguin.fyi)
[21:12:53] *** Joins: phryk_ (~totallyno@user/phryk)
[21:13:23] *** Joins: Exagone313 (exa@irc.moe)
[21:13:55] <RhodiumToad> LUA_USE_JUMPTABLE
[21:13:57] *** Joins: supernov1h (~supernova@mail.ijk.nz)
[21:14:00] <RhodiumToad> (in 5.4+ only)
[21:14:08] *** Joins: andreyorst` (~andreyors@2.92.125.242)
[21:14:15] <kevans> ah, ok, that's kinda what I thought from a quick grep
[21:14:23] * kevans checks
[21:14:29] *** Quits: dlan (~dennis@gentoo/developer/dlan) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: suffer (znc@mutant.penguin.fyi) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Exa (exa@irc.moe) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: yalb (xsbot@user/mniip/bot/yalb) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: andreyorst_ (~andreyors@2.92.125.242) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: supernovah (~supernova@mail.ijk.nz) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: edr (~edr@user/edr) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: Humbedooh (~humbedooh@apache/staff/humbedooh) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: phryk (~totallyno@user/phryk) (Ping timeout: 265 seconds)
[21:14:56] <RhodiumToad> basically switch-threaded interpreters look like  for(;;) switch (op) { case ... break; ... }
[21:15:00] *** Joins: yalb (xsbot@user/mniip/bot/yalb)
[21:15:26] *** Exagone313 is now known as Exa
[21:16:03] *** Joins: edr (~edr@50.116.53.250)
[21:16:04] *** Quits: edr (~edr@50.116.53.250) (Changing host)
[21:16:04] *** Joins: edr (~edr@user/edr)
[21:16:10] <RhodiumToad> while jump-threaded ones have a label for each opcode and each block ends with a computed goto
[21:16:19] <kevans> yeah, not much of a difference
[21:16:34] *** Joins: Humbedooh (~humbedooh@humbedooh.com)
[21:16:36] *** Quits: Humbedooh (~humbedooh@humbedooh.com) (Changing host)
[21:16:36] *** Joins: Humbedooh (~humbedooh@apache/staff/humbedooh)
[21:16:43] <kevans> ahh
[21:17:24] <RhodiumToad> jump-threading does mean repeating part of the "get next opcode" logic in each block, which can make it a bit larger
[21:19:12] <RhodiumToad> on modern systems there can be some performance benefit for jump-threading, since switch-threading interacts very badly with branch prediction
[21:19:39] <RhodiumToad> (the branch at the switch entry being essentially unpredictable)
[21:19:55] *** Joins: ratchetfreak (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be)
[21:20:11] <kevans> right
[21:20:34] <clever> RhodiumToad: i had seen a c++ talk before, about making gcc compile a switch statement like that differently
[21:20:50] <clever> it would basically turn every break; into a `goto table[opcode];`
[21:21:17] <clever> the critical difference, is that having a dozens of the same goto, changes how the host cpu's jump prediction works
[21:21:44] <RhodiumToad> right, but it means making copies of the code between the for() and the switch() for each break
[21:21:52] <clever> if every `break;` jumps to a shared `goto table[opcode]`, then the host cpu can only make general predictions, how likely a given guest opcode is
[21:22:16] <clever> but, if every opcode ends with a `goto table[opcode]`, the host cpu can make more specialized predictions
[21:22:23] <clever> based on the previous opcode
[21:22:38] <clever> so if X is always followed by Y, the host cpu will learn that, and predict better
[21:22:40] <RhodiumToad> right, you get to predict for common cases of opcode pairs
[21:22:46] <clever> yep
[21:22:59] <RhodiumToad> given the huge hit of prediction failure, even a few successes can help
[21:23:26] <RhodiumToad> this is what jump-threaded interpreters basically implement manually using computed gotos
[21:24:01] <clever> on some ISA's, there is a dedicated `switch r0` opcode
[21:24:10] <RhodiumToad> in lua 5.4, if you look at ljumptab.h, you can see that you end up repeating the vmfetch() and the GET_OPCODE(i) code for each goto
[21:24:15] <clever> which is then immediately followed by an uint16_t[] of  pc-relative offsets
[21:24:30] <clever> so the lookup table is likely going to be hot in the cache
[21:24:31] <RhodiumToad> still doesn't help much if you can't predict it
[21:25:04] <clever> yeah
[21:25:31] <clever> https://www.youtube.com/watch?v=j0_u26Vpb4w
[21:25:35] <clever> ah, it was in this talk
[21:26:08] <clever> i think
[21:26:25] <clever> no, a diff one
[21:26:35] <clever> i can never find it
[21:26:47] <clever> because google bookmark search, cant search for c++, lol
[21:26:52] <clever> the +'s get stripped out
[21:27:45] <clever> https://www.youtube.com/watch?v=IAdLwUXRUvg&t=1873s
[21:27:51] <clever> RhodiumToad: aha, there it is!, "labels as values"
[21:28:31] <clever> this lets you put a standard `label:` into your code, but then make an array of labels, and put `goto table[opcode]` right into the c++, not having to use asm to get that feature
[21:29:01] <clever> i should also look, at how vc4-gcc compiled ljumptab.h .....
[21:31:12] <clever> ah, i see whats going on
[21:31:39] <clever> vmdispatch/vmcase/vmbreak are #define macro's, to let you substitute the logic at each point
[21:31:53] <kevans> alright, guess I'm ending the mission anyways, even trimming off the difference between ficl and lua isn't enough to include veriexec
[21:31:55] <clever> LUA_USE_JUMPTABLE then yanks in ljumptab.h, which overrides those macros
[21:32:25] <kevans> they had to disable zfs and other useful stuff to fit it, at which point I don't think I need to try and make it work
[21:34:24] <RhodiumToad> ah
[21:34:44] <RhodiumToad> this is trying to make a loader that can verify the kernel?
[21:34:59] <kevans> yeah
[21:35:10] <kevans> it also verifies all loader scripts, iirc
[21:35:17] <RhodiumToad> ah right
[21:35:28] <kevans> it blows up 4thloader to 492k which is seemingly too large already
[21:35:33] <clever> kevans: that reminds me of what WoW's lua did
[21:35:40] <kevans> so it just doesn't work at all in the stock configuration
[21:35:42] <kevans> oh?
[21:35:48] <clever> any official lua code, is signed by something, and has special privs
[21:36:04] <clever> if the call stack passes thru unsigned code, you cant call certain special functions, such as spell casting
[21:36:21] <kevans> in this case, they use it as part of their secureboot implementation or something like that, so signing is generally a hard requirement for most bits
[21:36:22] <clever> this lets them use lua to manage the entire gui of the game
[21:36:23] <RhodiumToad> does it break just the non-efi configuration? I don't know what size limit if any applies to EFI
[21:36:29] <clever> and then allow untrusted lua for addons
[21:36:43] <clever> but the untrusted lua, cant call certain functions, so you cant create a bot that just plays the game for you
[21:36:55] <kevans> afaik EFI doesn't have a size limit that we need to worry about
[21:36:58] <RhodiumToad> but obviously legacy boot has to fit a whole ton of stuff into a bit less than 640k
[21:37:02] <clever> the untrusted lua is limited to doing things like changing keybindings when outside of combat
[21:37:14] <clever> and once you enter combat, the keybindings are locked
[21:37:24] <clever> and the player behind the keyboard must make the choice on what to do and when
[21:37:43] <clever> and the untrusted lua, is limited to graphical operations that cant impact the input system
[21:37:55] *** Quits: fcr (~fran@r167-60-72-42.dialup.adsl.anteldata.net.uy) (Read error: Connection reset by peer)
[21:38:01] <clever> so it can compute things, and offer advice to the player
[21:38:06] <clever> but the player must make the ultimate choice on what action to do
[21:38:16] <kevans> I feel like I can't call that clever because of who's telling me this
[21:38:21] <kevans> but that's clever, clever
[21:38:27] <clever> lol
[21:38:40] <clever> the keybind stuff, is mostly to auto-create extra buttons
[21:38:52] <clever> so as a healer, you can have a grid of buttons, one per player
[21:39:05] <clever> and clicking with a certain combination of modifiers, will do a certain action
[21:39:13] <clever> and the untrusted lua, can configure all of that
[21:40:01] <clever> so it can configure that left click calls X, shift+left calls Y, and so on
[21:40:16] <clever> and if you point those event handlers to a trusted function (WoW lua internals), then it can cast a spell
[21:42:45] *** Quits: khoa (~khoa@user/khoa) (Ping timeout: 260 seconds)
[21:44:09] *** Joins: khoa (~khoa@user/khoa)
[21:44:27] <clever> RhodiumToad: let me see if i can decipher this asm for luaV_execute ....
[21:45:19] <clever>        a:       0c e8 00 00 00 00       mov r12,0x0
[21:45:21] <clever>                         a: R_VC4_IMM32  .rodata.disptab.4005
[21:45:37] <clever> yeah, this was definitely built with LUA_USE_JUMPTABLE=1
[21:45:57] <RhodiumToad> it's the default for 5.4 built with gcc or clang
[21:46:10] <clever> i'm using a gcc fork, so i wasnt sure it detected right
[21:46:34] <clever> this looks exactly like what that youtube video i linked above was talking about
[21:47:28] *** Joins: fcr (~fran@r167-60-90-246.dialup.adsl.anteldata.net.uy)
[21:48:15] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[21:49:37] <RhodiumToad> yup, it's been a standard technique for bytecode interpreters for a while
[21:50:22] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[21:52:16] <xaltsc> Hey, what's the (lua) standard for querying whether NeoVim is running in GUI ?
[21:53:20] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:9842:f3f7:64ff:d6dc) (Quit: Textual IRC Client: www.textualapp.com)
[21:54:27] <RhodiumToad> that's not something lua itself can tell, that's down to however the lua binding in neovim supplies that information
[21:56:53] *** Quits: dostoyev1ky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[21:57:09] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[21:58:28] <xaltsc> so vim.fn.has('gui_running') it is ?
[21:59:16] <Elw3> ...
[22:04:48] *** Joins: kurfen (~kurfen@lfbn-ann-1-215-215.w86-200.abo.wanadoo.fr)
[22:06:27] *** Quits: ratchet_freak (~ratchetfr@d8D8779D9.access.telenet.be) (Ping timeout: 240 seconds)
[22:09:08] *** Quits: kurfen (~kurfen@lfbn-ann-1-215-215.w86-200.abo.wanadoo.fr) (Client Quit)
[22:09:37] *** Joins: kurfen (~kurfen@37.120.204.67)
[22:11:30] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[22:11:35] *** Joins: JanC_ (~janc@user/janc)
[22:11:57] *** Joins: km_ (~km@user/km)
[22:12:00] *** Quits: km (~km@user/km) (Remote host closed the connection)
[22:12:30] *** JanC_ is now known as JanC
[22:18:34] *** Quits: Elw3 (~Elw3@dynamic-002-247-242-186.2.247.pool.telefonica.de) (Quit: Leaving)
[22:20:06] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[22:24:29] *** Joins: Elw3 (~Elw3@x59cc9ad2.dyn.telefonica.de)
[22:36:14] *** Quits: ttmrichter (~ttmrichte@user/ttmrichter) (Quit: Client closed)
[22:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[22:39:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:45:02] <clever> RhodiumToad: oh, i just realized, a normal switch statement on the VPU, is already a lookup table, and the cpu core lacks prediction logic (as far as i know), so using goto* may be slower...
[22:45:08] <clever> i'll need to profile that
[22:48:00] <RhodiumToad> the core is not pipelined at all?
[22:48:29] <RhodiumToad> or has fixed or static prediction rather than dynamic branch target caches?
[22:58:12] <clever> RhodiumToad: i think it has static predictions
[22:58:27] <clever> the scalar side is dual-issue, so it can potentially run 2 opcodes in the same clock cycle
[22:58:43] <clever> the vector side is single-issue, but once a vector op begins, the scalar side can resume running opcodes
[22:59:02] <clever> so you can start an expensive vector opcode, and then do a dozen scalar opcodes
[22:59:09] <clever> and all of it runs in parallel
[23:19:06] *** phryk_ is now known as phryk
[23:27:05] *** Quits: vladimiroff (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[23:29:39] *** Joins: kiril (~kiril@85.91.153.163)
[23:31:03] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[23:34:05] *** Quits: phryk (~totallyno@user/phryk) (Ping timeout: 252 seconds)
[23:34:31] *** Quits: g5pw (~g5pw@mittelab/sudo/g5pw) (Ping timeout: 252 seconds)
[23:34:45] *** Quits: daddy (ryan@hashbang/bdfl) (Ping timeout: 250 seconds)
[23:34:49] *** Joins: kiril (~kiril@85.91.153.163)
[23:35:20] *** Quits: bgiannan (giann@2a01:4f8:141:1272::2) (Ping timeout: 260 seconds)
[23:35:53] *** Joins: daddy (~ryan@hashbang/bdfl)
[23:36:12] *** Joins: phryk (~totallyno@user/phryk)
[23:36:20] *** Quits: magla (~gelignite@55d4d08c.access.ecotel.net) (Quit: Stay safe!)
[23:37:07] *** Joins: g5pw (~g5pw@mittelab/sudo/g5pw)
[23:37:40] *** Joins: bgiannan (giann@2a01:4f8:141:1272::2)
[23:37:42] *** Quits: vnogueira (~vnogueira@user/vnogueira) (Read error: Connection reset by peer)
[23:37:42] *** Quits: ano (~ano@user/ano) (Read error: Connection reset by peer)
[23:37:42] *** Quits: ArRay (~ArRay_@user/array/x-1947090) (Read error: Connection reset by peer)
[23:37:56] *** Joins: vnogueira (~vnogueira@user/vnogueira)
[23:38:25] *** Quits: macaw (~macaw@176.221.120.196) (Ping timeout: 256 seconds)
[23:38:36] *** Joins: macaw (~macaw@176.221.120.196)
[23:39:03] *** Joins: ano (~ano@user/ano)
[23:39:04] *** Joins: ArRay (~ArRay_@user/array/x-1947090)
[23:39:16] *** Quits: tertu (~tertu@2601:449:8380:8aa0:d250:99ff:fedf:91a7) (Quit: Goodbye everyone.)
[23:50:16] *** km_ is now known as km
[23:51:05] *** Quits: Elw3 (~Elw3@x59cc9ad2.dyn.telefonica.de) (Ping timeout: 252 seconds)
[23:55:24] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[23:56:27] *** Joins: Elw3 (~Elw3@x59cc9ad2.dyn.telefonica.de)
[23:58:15] *** Quits: kurfen (~kurfen@37.120.204.67) (Quit: WeeChat 2.3)
