[00:01:09] <RandomReader> scalability in what sense?
[00:01:15] <senoraraton> I don't want to store the entire structure in a vector because then I have to parse the entire vector for elements.  In my current implementation I can reference children of an object, or its sibling, and I can reference siblings child, sibling, child, sibling sibling, child etc.  So I get a "unique" path to each element that is faster and more efficent than parsing the vector tree, its also "safer" imho
[00:02:28] <RandomReader> how does that help you traverse the path though?
[00:02:31] <senoraraton> Because there is no chance for misassingment.  There is no range bound functions over a vector to get a given "submenu".  I can just say "give me all of the children ptrs of this parent"
[00:02:52] <RandomReader> you could do that without the linked list though
[00:02:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:03:49] <CarloWood> senoraraton: often it helps a lot to make some ascii-art comment :).  Ie: https://github.com/CarloWood/evio/blob/master/StreamBuf.h#L331 or https://github.com/CarloWood/ai-utils/blob/master/SimpleSegregatedStorage.h#L37 just to get your head wrapped around what you really want.
[00:03:50] <RandomReader> e.g. a plain tree has a root and branches, so that's fine .. but then you don't seem to be making the parent the single source of truth, you also want each entry to know its next sibling .. why?
[00:04:03] <RandomReader> that's both redundant information and more fragile, since it requires keeping more in sync
[00:04:25] <CarloWood> Plus, it would make it very clear how things are supposed to work, for others.
[00:04:34] <RandomReader> (and in this case, is making initialization more complicated to *use*)
[00:05:16] <RandomReader> (which is what I was getting at with the question about the initMenu function, vs what you want to represent conceptually)
[00:06:18] <senoraraton> So to be clear, your suggesting that instead of using the sibling* that I should store the keys in the vector(which already exists because its how the thing is instantiated)?
[00:06:20] <RandomReader> and yes, I realize I'm only seeing a fraction of what you intend, hence the questions
[00:06:39] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:07:03] <RandomReader> yes, or more accurately questioning why that wouldn't fit how you need to use this
[00:07:53] <senoraraton> I guess ultimately I wanted to write a recursive function that rendered the tree.  And if its all pointers then I can iterate through the linked list and render the tree.  If its in vectors then I end up in this world where I'm juggling two data types *ptr to children and vectors of siblings, and it just feels messy.
[00:08:24] <RandomReader> why are siblings necessary?
[00:09:17] *** Quits: tavares (~tavares@user/tavares) (Ping timeout: 240 seconds)
[00:09:29] <senoraraton> Because I want a single paradigm to parse the tree not two? Its not necessary but it mixes two data structures together if I use vectors. I think?
[00:09:58] <RandomReader> let's say you want to walk root->File->Open .. that's simply taking each node and recursively examining its children
[00:10:18] <RandomReader> what operation requires tracking siblings, that isn't already covered by the parent's children?
[00:11:19] <senoraraton> What about root->Edit->Config ?  Which is a sibling of File->Edit->Help etc.
[00:11:46] <RandomReader> that's the second recursion from root
[00:12:05] <senoraraton> Sure, but top level elements don't have the same root node in this implementation.
[00:12:23] <senoraraton> Or to be more exact, the parents of root nodes is just an empty menuItem.
[00:12:32] <RandomReader> so not a tree?
[00:13:32] <RandomReader> if you mean File, Edit, etc are roots, then that can just be a single store of "roots"
[00:13:43] <RandomReader> (which conceptually ends up the same as having an actual single root)
[00:14:46] <RandomReader> in the abstract, what I'm getting at here is I think the same goal you had in mind to begin with: single concept -> same traversal logic regardless of where you are
[00:14:48] <senoraraton> I guess in theory if there is a single root node, which makes sense.  Then it IS a tree, and it does parse better because you don't need siblings, because you can just go up the tree one node and get the siblings.
[00:15:54] <senoraraton> I was trying to connect the tree over this first node as root for some reason, I guess cause conceputally that seemed a good entry point, but creating a root node(which addresses my pointer issue too), and then having the elements be children of that single root node is a lot cleaner.
[00:16:30] *** Joins: tavares (~tavares@187.19.213.50)
[00:16:31] <senoraraton> I don't need a vector though. I just need a ptr to the root node.
[00:17:14] <RandomReader> in interface terms, usage goes back to one of the original suggestions about "class that inits the thing": mainMenu is the first thing created, has a nullptr parent, and everything else is logically: fileMenu = mainMenu.add("File"); fileMenu.add("Open");
[00:17:39] <RandomReader> whether you actually pick that interface or not is beside the point, it conceptually gets you a self-contained thing to start from and navigate
[00:18:19] <RandomReader> mainMenu would then be the thing you render/search from, most of the time
[00:18:19] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:18:33] <RandomReader> and any single item can be referenced, and it can recursively walk "parent" if it needs to find the root
[00:19:17] <RandomReader> or just up one if siblings are needed
[00:20:03] <RandomReader> it *does* make "next sibling" logic slightly more involved, if that's a starting point for you, since it would need to find its position among the parent's children
[00:21:02] <RandomReader> I was imagining you would only ever need to start from "rendering all children" or similar, so the recursion handles this, but if there is a situation where you're starting from an arbitrary menu item cold and need to find the next sibling, this doesn't really make that simpler
[00:22:14] <RandomReader> personally I would probably still go with this tree style and just deal with the extra position-finding logic, since that seems low cost relative to maintaining the rest of the data structure, but YMMV
[00:22:33] <RandomReader> (again assuming this actually comes up for you, and I'm not just rambling about a non-case)
[00:26:17] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Ping timeout: 240 seconds)
[00:27:09] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 256 seconds)
[00:27:23] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:27:36] *** Joins: jokoon (~eio@2a01:e0a:542:e160:60a3:ee15:b13d:6bd9)
[00:27:37] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:30:47] *** Quits: Guest36 (~Guest36@res388d-128-61-91-234.res.gatech.edu) (Ping timeout: 256 seconds)
[00:33:17] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 256 seconds)
[00:35:52] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[00:36:35] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[00:40:17] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:46:17] *** Quits: tavares (~tavares@187.19.213.50) (Ping timeout: 240 seconds)
[00:49:04] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[00:49:06] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184) (Ping timeout: 245 seconds)
[00:49:46] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[00:50:06] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[00:50:12] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[00:56:31] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[00:59:13] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) ()
[01:01:55] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:03:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:04:57] *** Joins: tavares (~tavares@187.19.213.50)
[01:07:03] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:08:39] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:09:10] *** Joins: jsbach (~jsbach@2a01:c23:6469:4c00:a24a:db6c:c9a:28fd)
[01:12:09] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[01:14:58] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:15:04] *** Quits: sam113101 (~sam@modemcable229.128-202-24.mc.videotron.ca) (Ping timeout: 250 seconds)
[01:15:37] *** Quits: sbrothy (~sbrothy@213.83.133.231) (Ping timeout: 240 seconds)
[01:15:42] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:24:41] <senoraraton> This is SO much cleaner.  I turned 20 lines of code into two.
[01:27:15] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[01:29:53] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:31:10] *** Quits: retux (~user@dyndsl-091-096-027-122.ewe-ip-backbone.de) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[01:35:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[01:37:17] *** Quits: tavares (~tavares@187.19.213.50) (Ping timeout: 240 seconds)
[01:39:36] *** Quits: jokoon (~eio@2a01:e0a:542:e160:60a3:ee15:b13d:6bd9) (Quit: Leaving)
[01:39:46] *** Joins: neo (~Neo@user/neo)
[01:41:16] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[01:42:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:09] *** ChanServ sets mode: +v npaperbot
[01:50:41] <CarloWood> Is it possible to expand a parameter pack with ... inside a std::cout << foo << (..., something)?
[01:51:41] <senoraraton> Now the fun part.  Writing the recursive call to parse the tree.:D
[01:52:09] * enyc meows
[01:52:55] <CarloWood> Lets say - I have a template:  template<typename T0, typename T1> void f(T0 arg0, T1 arg1) { std::cout << foo<T0>.g() << ", " << foo<T1>.g(); }
[01:53:20] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:4455:76db:487:e9f8)
[01:53:32] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Quit: No Ping reply in 180 seconds.)
[01:53:33] <CarloWood> Now I have a template: template<typename... Ts> void f(Ts... args) { std::cout << ...?whathere?...; }
[01:54:16] <CarloWood> nevermind the ", ".. that is - it may print an extra comma.
[01:54:26] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[01:56:06] <CarloWood> I meant: template<typename T0, typename T1> void f(T0 arg0, T1 arg1) { std::cout << ", " << foo<T0>().g() << ", " << foo<T1>().g(); }
[01:56:41] *** Quits: thebe111 (~thebe111@user/thebe111) (Ping timeout: 256 seconds)
[01:57:02] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2133:2367:93c2:891d)
[01:59:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[02:00:05] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Quit: flush)
[02:00:14] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[02:00:21] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[02:00:35] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:01:19] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[02:01:39] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[02:03:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:06:25] <Alipha> CarloWood: i would just fold over the comma operator: https://wandbox.org/permlink/Qcghe1gcnkkUPVSB
[02:07:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[02:07:42] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[02:08:27] <Alipha> you can fold over <<, but there's no way to get `", " <<` injected into each fold: https://wandbox.org/permlink/ATTuGIUpKiimeZIc
[02:09:03] <CarloWood> That's not the question though.
[02:09:23] <CarloWood> It has to be of the form:  std::cout << ...?whathere?...;
[02:09:39] <CarloWood> aka - expand it while already being written to an ostream
[02:09:42] <Alipha> that's my second example. but doesn't quite do what you want
[02:10:09] <CarloWood> nah... you put a '(' in front of the std::cout
[02:10:32] <Alipha> then the answer is "no, that's not possible"
[02:10:34] <CarloWood> You can only change "...?whathere?..."
[02:11:18] <CarloWood> How do you know? I mean ... apparently I don't get the fold operator :(.  It is still so much a mystery to me that I can't reason why that is impossible.
[02:12:02] <Alipha> https://wandbox.org/permlink/3XNUEZMCIcwXBzVK :-)
[02:12:25] <Alipha> fold expressions are indeed confusing
[02:14:10] *** Joins: MadcapJake (~MadcapJak@047-012-202-057.res.spectrum.com)
[02:19:39] <Alipha> a fold expression is in the form of (x OP ... OP y) where x or y is an expression involving a parameter pack. the parentheses are a necessary part of the fold expression. and since you want to << to std::cout, the expression then must be in the form of `(std::cout << ... << y)`
[02:20:13] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:4455:76db:487:e9f8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:20:41] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:20:42] <Alipha> something like `std::cout << (", " << ... << y)` would mean you're left-shifting ", " not std::cout
[02:22:59] <CarloWood> { std::cout << std::cout << 1 << 2; }
[02:22:59] <geordi> error: no match for 'operator<<' in 'cout << cout' (operand types are 'ostream' {aka 'ostream'} and 'ostream' {aka 'ostream'})
[02:23:20] <CarloWood> I don't get your last link
[02:23:20] *** Joins: Markow (~Markow@176.122.215.103)
[02:23:52] <Alipha> it's obscurity at its best ;-)
[02:24:03] <CarloWood> You used the comma operator
[02:24:17] <CarloWood> { std::cout << (std::cout << 1 << 2, "indeed"); }
[02:24:18] <geordi> error: no match for 'operator<<' in 'cout << operator,<char, char_traits<char>, char [7]>((* &(& cout.ostream::operator<<(1))->ostream::operator<<(2)), "indeed")' (operand types are 'ostream' {aka 'ostream'} and 'enable_if<true, ostream >::type' {aka 'ostream'})
[02:24:49] <Alipha> you're not going to be able to do any of these examples with geordi because geordi overloads the comma operator for ostream :-P
[02:25:00] <CarloWood> Oh rite
[02:25:25] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:25:51] *** Quits: sbrothy (~sbrothy@213.83.133.231) (Read error: No route to host)
[02:26:08] <Alipha> i'm not sure if we can disable geordi-isms. i know there's like --no-using-std or something
[02:27:43] <senoraraton> On line 98, my test function prints that a match was found, which means I'm in the loop.  Why does the function keep running, instead of returning child?  I commented out the lower else block and it still acted as such -> https://github.com/SenorGato/8bit/blob/main/main.cpp
[02:27:45] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Ping timeout: 256 seconds)
[02:29:05] <Alipha> senoraraton: you're calling fetchMenuItem recursively, so presumably it returns to line 101. and i think you want line 101 to be `return fetchMenuItem(key, child);`
[02:30:03] <senoraraton> I only make the recursive call though, if there is no match, so once there is a match, it should break and return child?
[02:30:35] <Alipha> senoraraton: also, please, please turn on warnings. i would suspect g++ to warn you about the fact that it's possible for fetchMenuItem to reach line 110 without hitting a return statement. add `-Wall -Wextra -pedantic` to your compiler options
[02:32:44] *** Joins: Viewday115 (~Viewday@user/viewday)
[02:33:14] <Alipha> senoraraton: if your code reaches line 101, then it calls fetchMenuItem. if that new call then reaches line 98, then it returns back to the call on 101, not line 135.
[02:33:25] *** Quits: pizdets (~pizdets@183.182.111.49) (Ping timeout: 256 seconds)
[02:33:57] *** Joins: pizdets_ (~pizdets@183.182.110.193)
[02:34:00] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[02:34:07] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[02:34:08] *** Viewday115 is now known as Viewday11
[02:35:51] <senoraraton> I still don't understand.  If my code reaches line 98, why does it not return?  Its supposed to break the loop, and return from the function, but it does not, it keeps making more calls.
[02:35:57] <senoraraton> return means "End", it doesn't end.
[02:36:44] <senoraraton> I get my test function printing that I am in the loop that starts at 96.  Why does the function not return even though there is a return statement?
[02:36:59] <Alipha> senoraraton: can you pastebin the output of your program?
[02:37:36] <senoraraton> https://bpa.st/SZEA
[02:38:12] <senoraraton> Line 35.  "We have a match" which means Im' IN the loop, and the next line after that print statement is return child;  Except the program keeps running.
[02:38:53] <senoraraton> Wait, it only breaks the most recent call to itself, so it doesn't break out of EVERYTHING....
[02:38:59] <Alipha> correct
[02:39:23] <senoraraton> Just assign child to a variable and return the variable at the end of the function?  That seems inefficent.
[02:39:35] <senoraraton> Because it still makes all these extraneous calls.  How do I get it to fully break out?
[02:39:42] <Alipha> change line 101 to: return fetchMenuItem(key, child);
[02:40:08] <Alipha> well, maybe
[02:40:18] <Shell> ehh, no
[02:41:27] <senoraraton> https://bpa.st/KXHA
[02:41:28] <CarloWood> Alipha: whatdoyouknow... this works! https://gyazo.com/3c62878c8eef7c33e809eb6cd03a769d
[02:41:32] *** Quits: toadtoad (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) (Quit: toadtoad)
[02:41:51] <Alipha> i suppose you have to check to see if the return of fetchMenuItem on line 101 actually found a child
[02:42:01] *** Joins: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[02:42:29] <Shell> menuItem* foo = fetchMenuItem(key, child); if foo != nullptr { return foo; }, and make the function return nullptr if it doesn't find a child.
[02:42:42] <Alipha> yeah, what Shell said
[02:42:53] <Shell> doesn't find the item*
[02:43:08] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[02:43:24] <senoraraton>  menuItem* foo = fetchMenuItem(key, child); if foo != nullptr { return foo; }, and make the function return nullptr
[02:43:35] <senoraraton>                if it doesn't find a child.menuItem* foo = fetchMenuItem(key, child); if foo != nullptr { return foo; }, and make the function return nullptr
[02:43:40] <senoraraton> >.< Sorry.
[02:44:09] *** Quits: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) (Client Quit)
[02:44:21] *** Joins: proller (~p@80.240.216.69)
[02:44:57] <Alipha> senoraraton: https://wandbox.org/permlink/lxrHXKBWtsRzibqO  "warning: control reaches end of non-void function [-Wreturn-type]"  ... you should be getting that warning. if you aren't, turn on warnings. if you are, don't ignore warnings.
[02:45:41] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:45:43] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[02:45:50] <linext> anyone attempt the "Attending Workshops" on Hackerrank for C++ ?
[02:46:05] <linext> C++ > Other Concepts
[02:46:08] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc2-git-9f7fb8d-Pogorze-Karpackie-CUSTOM-KERNEL)
[02:48:52] *** Joins: epony (epony@user/epony)
[02:52:37] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[02:55:07] *** Quits: andreasbuhr (~quassel@p5dcf991b.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:56:50] <linext> seems pretty tough, i'm just trying to get the test case working
[02:57:07] <linext> https://www.hackerrank.com/challenges/attending-workshops?isFullScreen=true
[02:58:32] <Alipha> CarloWood: that's pretty hacky
[02:59:20] *** Quits: neo (~Neo@user/neo) (Quit: Leaving)
[03:00:10] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[03:02:25] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[03:04:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:07:36] <CarloWood> Also it was full of typos :/. I never compiled it it seems. But I got it working just now.
[03:08:11] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[03:08:19] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:08:20] <CarloWood> This really works: https://gyazo.com/29204536dc5201d0690f8d5ea91b4672
[03:08:25] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:09:44] *** Joins: NEYi (~NEYi@109.251.216.38)
[03:13:57] <CarloWood> Alipha: You are already God after what you did last - but if you want to make me get an even higher opinion of you, guess what warning geordi gives when you feed it this: { auto l = [](){}; cout << l; }
[03:14:54] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:15:47] <Alipha> That's an interesting warning
[03:15:58] <CarloWood> It makes no sense :)
[03:16:53] <CarloWood> I suppose it converts the address of the lambda to a bool before printing.
[03:17:12] <CarloWood> But why give that warning then? Cause it will just always print 1?
[03:17:31] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Remote host closed the connection)
[03:17:42] <CarloWood> I should be in bed.
[03:30:10] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[03:30:59] *** Quits: magla (~gelignite@d5361383.access.ecotel.net) (Quit: Stay safe!)
[03:31:45] *** Joins: Xardas (~Xardas@149.233.51.127)
[03:31:51] <Xardas> const int i = 0;
[03:32:01] <Xardas> const auto &r = i;
[03:32:46] <Xardas> is specifying const before with auto useless in this case ?
[03:33:05] <Xardas> I mean a reference is by itself const...
[03:33:08] <Xardas> right ?
[03:34:54] <jdavfsxd> constness applies to the referred object, not the reference itself, that would be const auto &const r, which is redundant.
[03:35:16] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:fff2:3dbb:5d64:acec:a3f1)
[03:35:43] <jdavfsxd> so, it's not useless, as you may or may not want const access to something.
[03:36:09] <Alipha> The const is being applied to the referred-to type, not to the reference. In this case, `const int` is already const, so the additional const is unnecessary (but perhaps may still aid in readability)
[03:36:13] <Xardas> It only makes sense in my code below, when i get rid of the const in the first line, right ?
[03:36:32] <Xardas> jdavfsxd I get your point actually.
[03:37:12] <Xardas> I can make a const reference to a non-const variable.
[03:37:14] <Alipha> int i = 0; const auto &r = i; // here, the const is actually doing something. r is of type `const int &`
[03:37:23] <kalven> const auto& const r would be a compile error
[03:38:30] *** Quits: bnchs (~bnchs@41.141.173.31) (Ping timeout: 250 seconds)
[03:38:36] <jdavfsxd> I meant hypothetically at that.
[03:38:51] <kalven> ah yes, a hypothetical compiler would accept it
[03:39:16] <jdavfsxd> you can still attain it by means of typedefs
[03:39:28] <jdavfsxd> then it becomes a warning or something
[03:39:37] *** Quits: MadcapJake (~MadcapJak@047-012-202-057.res.spectrum.com) (Ping timeout: 240 seconds)
[03:40:30] <Xardas> Thanks guys.
[03:41:11] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:41:54] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[03:44:18] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (Read error: Connection reset by peer)
[03:46:07] <jdavfsxd> {int x = 1; const int_r x_r = x; x_r = 2; cout << x;} typedef int &int_r;
[03:46:08] <geordi> 2
[03:52:32] *** Quits: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com) (Remote host closed the connection)
[03:53:39] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:19e7:ade0:dc6f:5dab)
[03:53:39] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:19e7:ade0:dc6f:5dab) (Changing host)
[03:53:39] *** Joins: skapata (~Skapata@user/skapata)
[03:56:15] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Ping timeout: 256 seconds)
[04:04:17] *** Quits: constxd (~brad@142.167.170.88) (Ping timeout: 240 seconds)
[04:04:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:06:02] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[04:08:23] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:16:42] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49)
[04:18:35] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[04:19:12] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[04:20:40] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[04:23:37] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[04:24:00] *** Quits: TheSchaf (~TheSchaf@pd95f17ef.dip0.t-ipconnect.de) ()
[04:24:14] *** Joins: seninha (~seninha@user/seninha)
[04:28:17] *** Joins: MadcapJake (~MadcapJak@047-012-202-057.res.spectrum.com)
[04:29:50] *** Quits: MadcapJake (~MadcapJak@047-012-202-057.res.spectrum.com) (Client Quit)
[04:30:24] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:31:12] *** Quits: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[04:31:37] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[04:32:51] *** Joins: Viewday118 (~Viewday@user/viewday)
[04:34:24] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[04:34:25] *** Viewday118 is now known as Viewday11
[04:36:08] *** Quits: Guest7572 (~luca0N@nautilus.luca0n.com) (Ping timeout: 250 seconds)
[04:38:26] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[04:39:35] *** Quits: emerent (~quassel@p200300cd57044366ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[04:39:55] *** Joins: emerent (~quassel@p200300cd570443b6ba27ebfffed28a59.dip0.t-ipconnect.de)
[04:45:17] *** Quits: jsbach (~jsbach@2a01:c23:6469:4c00:a24a:db6c:c9a:28fd) (Ping timeout: 240 seconds)
[04:47:37] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Ping timeout: 240 seconds)
[04:48:17] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Ping timeout: 240 seconds)
[04:48:42] *** Joins: tavares (~tavares@187.19.213.50)
[04:48:44] *** Quits: tavares (~tavares@187.19.213.50) (Remote host closed the connection)
[04:48:57] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 256 seconds)
[04:49:43] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[04:50:30] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[04:51:46] *** gentooclimax is now known as climax
[04:53:53] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:fff2:3dbb:5d64:acec:a3f1) (Remote host closed the connection)
[04:54:16] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:fff2:3dbb:5d64:acec:a3f1)
[05:02:36] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[05:05:05] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[05:05:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:07:39] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[05:07:58] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[05:09:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:10:10] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[05:11:57] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[05:13:02] *** Emet-Selch is now known as Azem
[05:13:53] *** Joins: luca0N (~luca0N@nautilus.luca0n.com)
[05:14:17] *** luca0N is now known as Guest8857
[05:16:33] *** Quits: Guest8857 (~luca0N@nautilus.luca0n.com) (Remote host closed the connection)
[05:18:46] *** Quits: koolazer (~koo@user/koolazer) (Remote host closed the connection)
[05:20:10] <AliceMeows> Is it possible to check if type has operator-> without checking if its pointer? I know you could check if the function itself exist but can it be done with builtin types?
[05:23:50] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:24:10] <RandomReader> the only builtin types that support it are pointers, so...
[05:24:32] <AliceMeows> I was just wondering if conceptually it is possible or not
[05:24:42] <RandomReader> more accurately, pointers to class types
[05:25:03] <RandomReader> not that I can think of, there's no concept of synthesizing an operator-> function
[05:25:03] <InPhase> AliceMeows: Sure, there are SFINAE solutions to that.
[05:25:15] <RandomReader> are there?
[05:25:26] <AliceMeows> I'm wondering about that too lol
[05:25:28] <RandomReader> *use* of operator-> requires a target identifier
[05:25:47] <InPhase> RandomReader: Why not T::operator-> ?
[05:25:48] <RandomReader> is there a suitably generic expression that doesn't require one?
[05:25:56] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:26:03] <RandomReader> because that won't exist for a pointer type?
[05:26:10] <InPhase> Hmm.
[05:27:07] <InPhase> I see the artificial constraint now of without checking if it's a pointer being a problem...
[05:28:19] <RandomReader> I'm not sure it matters in practice, since you generally either need to know if T supports a specific target, or you kick the problem upstream anyway
[05:28:44] <RandomReader> e.g. unique_ptr doesn't care, it just provides the operator, if the usage makes no sense for the target type the compiler will yell anyway
[05:29:42] <AliceMeows> unique_ptr most likely checks if the type is pointer or has operator->
[05:30:00] <RandomReader> it doesn't need to
[05:30:23] <AliceMeows> I suppose so
[05:30:42] <RandomReader> the only requirement for implementing the operator is returning a pointer, which is what unique_ptr stores anyway, and since it's a member of a template it's not instantiated until it's used
[05:31:48] <RandomReader> so usage will generate the function and a call to it (which is always fine), and then it's the same as a bare expression, and the compiler will complain about either the type or the target if it's not suitable
[05:32:22] <RandomReader> operator-> seems to be unique in chaining like that
[05:42:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:10] *** ChanServ sets mode: +v npaperbot
[05:43:14] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:46:17] *** Quits: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca) (Read error: Connection reset by peer)
[05:47:53] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[05:47:55] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[05:56:06] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:492b:bea1:e3dc:aaab)
[05:56:06] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:492b:bea1:e3dc:aaab) (Changing host)
[05:56:06] *** Joins: skapata (~Skapata@user/skapata)
[05:58:36] *** Joins: ferdna (~ferdna@user/ferdna)
[06:04:53] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[06:05:55] <AliceMeows> How reliable is decltype(&T::func) compared to decltype(std::declval<T>().func()) to detect if a function exist?
[06:05:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:06:33] <RandomReader> not reliable at all, since "a function" means the entire call signature, including argument types
[06:07:07] <RandomReader> the latter sets up context for that, including the qualifiers on the T object
[06:07:27] <AliceMeows> What if I don't care about the signature and only care if the function exists?
[06:07:37] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[06:07:58] <RandomReader> there is no "the function", that's my point :P
[06:08:05] *** Joins: artok_ (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[06:08:45] <RandomReader> << TYPE<decltype(&S::mf)>;   struct S { void mf() {} void mf(bool) {} };
[06:08:45] <geordi> error: 'decltype' cannot resolve address of overloaded function
[06:09:28] <AliceMeows> That is a good point
[06:09:39] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:09:40] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[06:10:11] <RandomReader> you have to be more specific in one form or another: either in what you're looking for, or implicitly in what you don't support
[06:10:37] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 240 seconds)
[06:10:57] <RandomReader> of course I see &S::mf all the time, but it usually makes more sense when the user is also the author of T ... writing on the library side, it's usually better to be more specific, just to support all the unknown use cases
[06:13:08] <AliceMeows> I wonder if it'll be possible to check for those unknown use cases
[06:13:50] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[06:13:57] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 240 seconds)
[06:16:53] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:18:05] <AliceMeows> With decltype(&T::func) it'll only work as long as there is no overloading involved while with decltype(declval<T>().func()) you'd need the whole signature so my question is if it could be made to check for existence of func in type T regardless of the signature or if its overloaded
[06:19:03] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d142:9ff8:db64:1336) (Ping timeout: 256 seconds)
[06:19:21] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:22:01] <RandomReader> I don't think there's any expression that would stop at just name lookup
[06:22:21] <AliceMeows> Oh well
[06:22:25] *** Joins: Rynn_ (~rynn@216.30.158.198)
[06:22:33] <RandomReader> every expression has a result, which means resolving the type, which will run into ambiguity issues in the case of function overloads
[06:23:27] *** Quits: Rynn_ (~rynn@216.30.158.198) (Client Quit)
[06:23:39] <RandomReader> and even though name lookup is an individually-described process, I can't think of a mechanism that stops there, instead of doing the next step
[06:24:11] <AliceMeows> That makes sense
[06:24:17] *** Quits: grafikrobot (~grafikrob@208.59.79.14) (Ping timeout: 240 seconds)
[06:24:32] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:24:43] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:26:27] *** Joins: seninha (~seninha@user/seninha)
[06:27:32] <AliceMeows> Another thing I wonder about, is there anything that concepts can do which cannot be done with templates alone?
[06:27:39] <senoraraton> if(&head->children)  This will always evaluate to true.  How do I properly test that the value at head->children is defined?
[06:28:19] <AliceMeows> Your if statement checks for the address of children so it will always evaluate to true
[06:28:48] <AliceMeows> if children is pointer then if(head->children) would do
[06:29:16] <senoraraton> error: could not convert ‘head->menuItem::children’ from ‘st │87 }                    │ d::vector<menuItem*>’ to ‘bool’
[06:29:53] <RandomReader> if (!head->children.empty())
[06:30:02] <senoraraton> Thank you.
[06:30:11] <RandomReader> (it's a vector, which is a container, which has a member function to query whether it currently contains anything)
[06:31:14] <RandomReader> in a broad sense, it's always defined and present, since it's an object .. C++ isn't like JavaScript or some other languages that have an independent "presence" concept for values
[06:31:48] <AliceMeows> I believe that mostly applies to dynamic languages
[06:32:15] <RandomReader> instead individual object types may have sentinel values or markers, like nullptr for pointers, or .empty() / .size()==0 etc for containers, and that sort of thing
[06:32:17] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[06:32:39] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:33:08] <RandomReader> but in generic sense, there's always *something* there, and it's up to the type to represent an "empty" concept
[06:33:37] *** Joins: Viewday113 (~Viewday@user/viewday)
[06:34:31] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[06:34:32] *** Viewday113 is now known as Viewday11
[06:35:09] <AliceMeows> One thing to note however is that you can always implement something like this with std::vector<std::any> to create some sort of a 'dynamic object' like dynamic languages provide
[06:37:17] <Eelis> optional<T> is a more logical recommendation if the goal is to get nullability
[06:38:00] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:38:41] <AliceMeows> I can't seem to find anything that only concepts can do which cannot be implemented via templates
[06:40:32] <AliceMeows> I have a feeling that I might be missing something but I can't figure it out
[06:40:51] <RandomReader> there might be some expressions that concepts can handle that templates can't, but I'm not entirely certain .. some things are difficult to shove into a sfinae context, I would expect concepts to be easier at least
[06:41:04] <RandomReader> (I haven't personally explored enough)
[06:41:43] <AliceMeows> That is what I'm trying to figure out
[06:41:52] <Eelis> AliceMeows: you're probably missing the fact that the point of concepts isn't to make entirely new things possible, but to turn things that people were previously doing with monstrous hackery, into a sane language mechanism
[06:41:58] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:58b3:64eb:a057:2f5c)
[06:42:38] <Eelis> enable_if was incredibly awkward and embarrassing
[06:42:46] *** Joins: N4buc0- (~N4buc0@189.58.131.84)
[06:43:02] <AliceMeows> I agree but I was curious if there is anything that actually cannot be done without them
[06:43:11] <Alipha> AliceMeows: partially specialize std::hash to work with any types that have a compute_hash() member function without using concepts
[06:43:28] <Eelis> AliceMeows: there is nothing C++ can do that C can't do
[06:43:45] <AliceMeows> At compile time without macros? I somehow doubt it
[06:44:17] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:fff2:3dbb:5d64:acec:a3f1) (Remote host closed the connection)
[06:44:17] <Eelis> they're both turing complete languages
[06:44:22] <Alipha> AliceMeows: do you know how to do it with concepts?
[06:44:56] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[06:45:05] <AliceMeows> I'm not entirely, I'll have to look into that as I've just started to use them
[06:45:20] <kalven> Eelis: a single problem in an expression that generates pages of compiler error messages.. that's something C can't do
[06:47:11] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[06:47:17] *** Joins: frost (~frost@user/frost)
[06:47:46] *** Joins: ipgd (~IPGD@180.254.226.48)
[06:48:21] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[06:50:27] *** Quits: zoraj (~zoraj@209.126.81.159) (Quit: ZNC - https://znc.in)
[06:50:32] *** Quits: ldlework (~hexeme@user/hexeme) (Remote host closed the connection)
[06:50:51] <AliceMeows> Technically speaking templates were always the wrong tool for the job to do some things which concepts address
[06:51:18] *** Joins: Xark_ (~Xark@47.156.11.28)
[06:51:38] *** Joins: zoraj (~zoraj@209.126.81.159)
[06:51:49] *** Quits: Xark (~Xark@47.156.11.28) (Ping timeout: 240 seconds)
[06:51:50] *** Joins: frost (~frost@user/frost)
[06:51:58] *** Joins: millido (~millido@84.210.150.128)
[06:52:02] <AmR> I need some function like printf and wprintf but can work with "" And L""
[06:52:22] <AliceMeows> Make it a template?
[06:52:35] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49)
[06:53:22] *** Joins: hexeme (~hexeme@user/hexeme)
[06:53:37] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:58b3:64eb:a057:2f5c) (Ping timeout: 256 seconds)
[06:54:50] *** Joins: sam113101 (~sam@modemcable229.128-202-24.mc.videotron.ca)
[06:55:12] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:56:25] <Alipha> AliceMeows: specifically, this cannot be done without concepts without the standard changing how std::hash is defined: https://wandbox.org/permlink/bXtQEXfASlu8yMmj
[06:57:18] <AliceMeows> That is interesting but that is what I was looking for, thanks
[06:58:43] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 256 seconds)
[07:00:33] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[07:01:15] <AliceMeows> AmR: https://godbolt.org/z/ocoWTE9h4
[07:02:21] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[07:04:03] <Alipha> AliceMeows: this is how you'd do it in c++17, but that would require std::hash to have been defined with the extra default template parameter: https://wandbox.org/permlink/1ttH7dWXyEvlT4BA Since std::hash isn't defined that way, this isn't possible
[07:05:42] <AliceMeows> I understand that, it clicked the moment I saw it
[07:06:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:06:56] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:07:08] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[07:09:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:09:57] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 250 seconds)
[07:10:06] <AliceMeows> Alipha: would that be considered a limitation of the type system or a limitation of templates themselves?
[07:11:42] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:12:38] <Alipha> AliceMeows: a limitation of templates? template metaprogramming is kinda one big hack. sfinae is a hack. partial specialization like i showed is a hack. std::void_t and std::enable_if_t are hacks. concepts finally brings a clean interface for expressing these things
[07:14:32] <Alipha> and by "a limitation of templates?" i mean, "my answer is: 'a limitation of templates', but i'm not entirely sure of my answer because i'm not entirely sure of your question, so the ? indicates my unsure-ness :-)"
[07:15:54] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:21:17] *** Quits: clime (~clime@37-48-57-231.nat.epc.tmcz.cz) (Ping timeout: 240 seconds)
[07:21:18] <AliceMeows> Now I agree that templates are hacks, as for the question if assuming template<typename T> struct hash<T> was by some magic legal then it would've been possible to specialize it without the use of concepts
[07:21:33] <AmR> AliceMeows: Thanks for the Idea
[07:21:43] <AliceMeows> Np
[07:22:11] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[07:24:45] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:448e:2f95:fd23:bf53)
[07:32:26] *** Joins: grafikrobot (~grafikrob@208.59.79.14)
[07:34:08] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:34:11] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[07:35:00] <AmR> AliceMeows: Can it done with C++11 ?
[07:35:57] <writeback[m]> concepts are c++20 and beyond
[07:36:09] <writeback[m]> if that’s what you mean
[07:41:38] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[07:41:39] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[07:42:09] <kalven> AmR: you can just use plain overloading..
[07:43:08] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[07:46:00] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:46:25] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[07:48:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[07:49:22] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:56:01] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[07:56:34] *** Joins: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com)
[07:58:57] *** Quits: BobTheTomato (~paul@141.217.247.7) (Ping timeout: 240 seconds)
[07:59:08] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[08:03:26] *** Joins: grafikrobot_ (~grafikrob@208.59.79.14)
[08:04:15] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:448e:2f95:fd23:bf53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:04:59] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:448e:2f95:fd23:bf53)
[08:05:02] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:448e:2f95:fd23:bf53) (Client Quit)
[08:06:03] *** Quits: grafikrobot (~grafikrob@208.59.79.14) (Ping timeout: 256 seconds)
[08:06:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:07:08] *** Joins: joolma (uid527699@id-527699.uxbridge.irccloud.com)
[08:07:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[08:07:55] *** Joins: Xardas (~Xardas@149.233.51.127)
[08:08:01] <Xardas> Good morning.
[08:08:18] <Alipha> good evening
[08:09:13] <AmR> How I can copy va_list to anther function ?
[08:10:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:13:27] *** Joins: grafikrobot__ (~grafikrob@208.59.79.14)
[08:13:45] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[08:15:10] <Xardas> What's the difference between `auto *p = &i` and `auto p = &i` , don't they both auto-deduce a pointer ?
[08:15:37] *** Quits: grafikrobot_ (~grafikrob@208.59.79.14) (Ping timeout: 240 seconds)
[08:15:43] <Xardas> the * before p is kinda unnecessary, right ?
[08:16:45] *** Joins: frost (~frost@user/frost)
[08:17:04] <Alipha> Xardas: yes, it's unnecessary. it simply provides clarity. or a compiler error, if the right-hand side of the = is not actually a pointer
[08:18:43] <Xardas> gotcha, thank you.
[08:19:01] <Xardas> :)
[08:25:04] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[08:27:40] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:29:33] <AmR> What is bad in this " https://godbolt.org/z/zdr84WfsK "?
[08:30:11] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[08:33:32] *** Joins: Viewday110 (~Viewday@user/viewday)
[08:34:01] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[08:34:02] *** Viewday110 is now known as Viewday11
[08:40:13] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:44:53] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[08:46:10] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[08:48:17] *** Quits: ipgd (~IPGD@180.254.226.48) (Read error: Connection reset by peer)
[08:50:19] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[08:50:21] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 256 seconds)
[08:50:23] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[08:52:07] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[08:52:22] <Eelis> AmR: https://stackoverflow.com/questions/8681623/printf-and-wprintf-in-single-c-code
[08:56:06] <AmR> Eelis: Then This can't be done by this way, May be by #ifdef ?
[09:00:31] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[09:01:10] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[09:01:21] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[09:01:31] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[09:03:09] *** Joins: frost (~frost@user/frost)
[09:03:59] *** Quits: climax (~gentoocli@81-64-65-213.rev.numericable.fr) (Read error: Connection reset by peer)
[09:04:14] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[09:06:47] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[09:06:59] *** Joins: trillp (~trillp@2001:19f0:6401:72e:c092:4829:25d6:b788)
[09:07:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:07:28] <hans> how do i >SOCKET *ms = (SOCKET*) malloc(sizeof(s));
[09:07:42] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[09:07:42] *** gentooclimax is now known as climax
[09:07:50] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[09:08:20] <hans> is it just SOCKET *ms = new SOCKET();  ?
[09:08:26] <hans> err
[09:09:17] <hans> or new SOCKET(1); ?
[09:10:11] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[09:11:08] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:11:19] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:12:16] <AliceMeows> AmR: https://godbolt.org/z/3s7szoacb is that more to your liking?
[09:12:37] *** Joins: slidercrank (~slidercra@user/slidercrank)
[09:16:53] *** Quits: climax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[09:18:07] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[09:19:35] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[09:21:18] <AmR> AliceMeows: Nop I know How I can overload the function, I need find way to use printf and wprintf like one function with args without function overload
[09:26:00] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[09:26:16] *** Joins: Betal_ (~Betal@user/betal)
[09:26:32] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[09:26:35] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[09:27:07] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[09:27:25] *** Quits: Betal (~Betal@user/betal) (Ping timeout: 256 seconds)
[09:35:55] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[09:41:38] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[09:42:02] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:10] *** ChanServ sets mode: +v npaperbot
[09:47:14] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (Ping timeout: 260 seconds)
[09:47:58] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[09:51:26] *** Joins: the_lanetly_052 (~the_lanet@194.135.153.209)
[09:52:18] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[09:53:38] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[10:02:11] *** Joins: Atque (~Atque@user/atque)
[10:02:50] *** Quits: Atque (~Atque@user/atque) (Client Quit)
[10:03:36] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[10:05:06] <AliceMeows> AmR: If you can't overload and can't use c++11 then its simply not possible
[10:07:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:09:56] *** Joins: Atque (~Atque@user/atque)
[10:10:23] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:11:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:14:28] *** megeve_ is now known as megeve
[10:15:14] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[10:26:38] *** Quits: joolma (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[10:32:47] <AliceMeows> AmR: I've tested your supposedly broken code with minor modifications and it seems to work just fine
[10:32:47] *** Joins: Viewday116 (~Viewday@user/viewday)
[10:34:10] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[10:34:17] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[10:34:20] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[10:34:21] *** Viewday116 is now known as Viewday11
[10:37:26] *** Joins: callq (~callq@2409:4062:2e9e:2081:816d:3026:9fb1:625b)
[10:38:32] *** Joins: ipgd (~IPGD@180.254.226.48)
[10:38:51] *** Parts: ipgd (~IPGD@180.254.226.48) ()
[10:44:52] *** Joins: frost (~frost@user/frost)
[10:47:39] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[10:59:19] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:59:35] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[11:08:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:09:25] *** Quits: artok_ (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 256 seconds)
[11:11:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:11:50] <AliceMeows> AmR: https://godbolt.org/z/P9cczj8da
[11:14:15] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:16:17] *** Quits: amit_ (~amit@2601:445:447f:a2f6:8bf3:cc4c:919d:bcbf) (Ping timeout: 240 seconds)
[11:19:58] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[11:22:54] *** Joins: xkuru (~xkuru@user/xkuru)
[11:24:17] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 240 seconds)
[11:25:47] *** Quits: reset (~reset@user/reset) (Quit: reset)
[11:27:47] *** Joins: toverna (~uni@2.95.60.140)
[11:30:17] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Ping timeout: 240 seconds)
[11:34:36] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[11:36:40] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[11:37:35] *** Quits: toverna (~uni@2.95.60.140) (Quit: Konversation terminated!)
[11:38:20] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[11:44:46] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[11:45:37] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[11:46:40] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:46:40] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[12:01:18] *** Joins: rendar (~rendar@user/rendar)
[12:01:35] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:03:01] *** Joins: Atque (~Atque@user/atque)
[12:05:22] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[12:06:57] *** Quits: callq (~callq@2409:4062:2e9e:2081:816d:3026:9fb1:625b) (Ping timeout: 240 seconds)
[12:07:34] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b85b:7732:789a:17bc)
[12:08:27] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Quit: Leaving)
[12:08:40] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[12:08:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:09:40] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[12:10:06] *** Joins: Markow (~Markow@176.122.215.103)
[12:12:19] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:12:25] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b85b:7732:789a:17bc) (Ping timeout: 250 seconds)
[12:14:44] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[12:15:07] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[12:18:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[12:20:26] *** Joins: bindu (~bindu@user/bindu)
[12:32:54] *** Joins: Viewday113 (~Viewday@user/viewday)
[12:34:06] *** Joins: szymon (~ugh@5.253.206.218)
[12:34:38] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[12:34:38] *** Viewday113 is now known as Viewday11
[12:35:47] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[12:40:03] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:40:32] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:48:21] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:50:53] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[12:51:11] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:51:13] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[12:51:26] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:51:57] *** Quits: Kerr (~quassel@2601:602:ce00:c8d0:cb1b:59a4:8a8b:230c) (Remote host closed the connection)
[12:52:01] *** Joins: teepee (~teepee@openscad/teepee)
[12:52:30] *** Quits: the_lanetly_052 (~the_lanet@194.135.153.209) (Remote host closed the connection)
[12:52:56] *** Joins: Kerr (~quassel@2601:602:ce00:c8d0:c6dd:f827:618b:869d)
[12:55:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[12:56:14] *** Quits: Kerr (~quassel@2601:602:ce00:c8d0:c6dd:f827:618b:869d) (Remote host closed the connection)
[12:57:55] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:5c57:f5a0:9c0c:92b3)
[12:57:56] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 250 seconds)
[13:00:26] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[13:00:57] *** Quits: N4buc0- (~N4buc0@189.58.131.84) (Ping timeout: 240 seconds)
[13:06:19] *** Joins: rendar_ (~Paxman@2001:b07:2ef:6e26:6473:687:f001:948b)
[13:06:52] *** Quits: rendar_ (~Paxman@2001:b07:2ef:6e26:6473:687:f001:948b) (Client Quit)
[13:08:11] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[13:09:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:13:05] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[13:15:28] *** Joins: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[13:25:33] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[13:26:24] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[13:26:54] <AmR> AliceMeows: Thanks I don't say I Can't use C++11, But that What I need. Thanks for idea And work too.
[13:27:00] *** Quits: Betal_ (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:31:06] *** Joins: clime (~clime@37-48-57-231.nat.epc.tmcz.cz)
[13:35:37] *** Joins: bnchs (~bnchs@41.141.173.31)
[13:37:03] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:37:17] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2133:2367:93c2:891d) (Ping timeout: 240 seconds)
[13:38:03] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[13:39:02] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[13:40:18] *** Joins: rvalue (~rvalue@user/rvalue)
[13:41:37] *** Quits: marshmallow (~marshmall@user/marshmallow) (Remote host closed the connection)
[13:42:02] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:10] *** ChanServ sets mode: +v npaperbot
[13:42:28] *** Joins: marshmallow (~marshmall@94.177.224.11)
[13:44:42] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[13:44:53] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[13:47:35] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[13:48:57] *** Joins: walterwhip (~www@user/walterwhip)
[13:50:21] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[13:50:35] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Remote host closed the connection)
[13:54:53] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[13:55:21] *** Joins: rg (~r-g@163.172.90.106)
[13:55:44] *** Joins: proller (~p@80.240.216.69)
[13:56:35] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[13:57:54] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[14:01:03] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:b4e8:6f53:6fdf:55e6)
[14:08:13] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:09:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:12:24] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:13:35] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:16:17] *** Joins: Kerr (~quassel@2601:602:ce00:c8d0:1f10:2cdc:eae4:98d8)
[14:23:39] *** Joins: zen_coder (~zen_coder@141.113.64.75)
[14:25:05] *** Joins: rendar (~rendar@user/rendar)
[14:27:50] *** Joins: MatSharrow (~matthew@53.115.9.51.dyn.plus.net)
[14:28:40] <AliceMeows> Np
[14:30:22] <AliceMeows> Is there ever a reason not to std::move something assuming the type is moveable?
[14:31:04] <aosync> If you want to copy it, you should copy it
[14:32:01] <AliceMeows> I'm designing unique_resource and I'm wondering if release() should ever copy instead of moving
[14:32:26] <aosync> What is unique_resource ?
[14:33:06] <AliceMeows> Hopefully a class that will make it into the standard if I'll sort out all the issues in time and write a paper
[14:33:14] *** Joins: Viewday111 (~Viewday@user/viewday)
[14:34:05] <aosync> what is its purpose
[14:34:15] <AliceMeows> Manage resources
[14:34:47] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[14:34:47] *** Viewday111 is now known as Viewday11
[14:37:35] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[14:40:49] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[14:41:35] *** Joins: kevr (~kevr@user/kevr)
[14:44:40] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[14:46:12] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[14:49:17] *** Quits: szymon (~ugh@5.253.206.218) (Ping timeout: 256 seconds)
[14:52:13] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc2-git-9f7fb8d-Pogorze-Karpackie-CUSTOM-KERNEL)
[14:52:27] *** Joins: bnchs__ (~bnchs@41.141.173.31)
[14:53:35] *** Quits: zen_coder (~zen_coder@141.113.64.75) (Quit: Konversation terminated!)
[14:53:50] *** Joins: zen_coder (~zen_coder@141.113.64.75)
[14:54:55] *** Quits: bnchs (~bnchs@41.141.173.31) (Ping timeout: 250 seconds)
[15:05:49] *** Joins: arch-angel (~arch-ange@2001:e68:5400:3444:f67f:24ed:5c4c:c6be)
[15:06:58] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[15:07:37] *** Quits: bnchs__ (~bnchs@41.141.173.31) (Ping timeout: 240 seconds)
[15:10:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:14:13] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:17:41] *** Joins: neure (~tksuoran@dzpbl51kyyyyyyyyyyyyt-3.rev.dnainternet.fi)
[15:18:17] <AliceMeows> How terrible of a concept is this template<typename T> concept is_smart = requires(T& t) { t.reset(t.release()); };?
[15:21:40] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Quit: boo)
[15:21:57] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[15:24:45] <CarloWood> I don't like it.
[15:26:34] <AliceMeows> Why?
[15:27:05] <CarloWood> It's not the definition of a smart pointer.
[15:28:10] <AliceMeows> The concept is only meant to be used to check for these two functions
[15:28:40] <AliceMeows> I could add a bunch of stuff but I'm not sure if there is any point in doing so or not
[15:28:58] <CarloWood> If it tests exactly what you need, then ok. But it doesn't, only the existence of two member functions and their signature :/.
[15:29:17] *** micronnn is now known as micronn
[15:30:00] <CarloWood> class NotSmart { void reset(bool yes); bool release() const; };  would fit the concept
[15:31:11] <AliceMeows> Yes it would
[15:34:33] <AliceMeows> CarloWood: https://godbolt.org/z/dvYMrch5o
[15:35:38] <CarloWood> duh
[15:35:53] <CarloWood> It was pseudo code :P
[15:37:42] *** Joins: seninha (~seninha@user/seninha)
[15:46:57] *** Quits: gjvc (~gjvc@user/gjvc) (Quit: leaving)
[15:47:15] *** Joins: gjvc (~gjvc@user/gjvc)
[15:48:58] *** Quits: gjvc (~gjvc@user/gjvc) (Client Quit)
[15:50:04] *** Joins: gjvc (~gjvc@user/gjvc)
[15:51:09] *** Joins: akacrs (k7f@user/akacrs)
[15:51:23] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:51:30] <CarloWood> ideone.com can't compile C++17 ??
[15:51:37] *** Quits: neure (~tksuoran@dzpbl51kyyyyyyyyyyyyt-3.rev.dnainternet.fi) (Quit: Leaving)
[15:51:38] <CarloWood> https://ideone.com/8S93tm
[15:52:11] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 256 seconds)
[15:55:00] *** Quits: sbrothy (~sbrothy@213.83.133.231) (Read error: Connection reset by peer)
[16:00:29] <zz> well, don't use ideone.com (__cplusplus is 2014)
[16:01:53] *** Joins: Uswald (~leandre@2a04:cec0:119c:a4fe:eddf:c883:bc96:ae22)
[16:01:53] *** Quits: Uswald (~leandre@2a04:cec0:119c:a4fe:eddf:c883:bc96:ae22) (Changing host)
[16:01:53] *** Joins: Uswald (~leandre@user/Uswald)
[16:07:18] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 250 seconds)
[16:07:46] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[16:10:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:13:22] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:13:23] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 256 seconds)
[16:14:31] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:15:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:21:10] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[16:24:13] *** Quits: Stewart (~stewart@2001:470:69fc:105::1:6cd) (Quit: You have been kicked for being idle)
[16:32:38] *** Joins: Viewday119 (~Viewday@user/viewday)
[16:34:11] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[16:34:11] *** Viewday119 is now known as Viewday11
[16:34:13] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:39:08] *** Joins: pulse (~pulse@user/pulse)
[16:42:24] *** Joins: bnchs__ (~bnchs@41.141.173.31)
[16:44:38] *** Joins: chris64 (~chris@user/chris64)
[16:45:11] *** Quits: marshmallow (~marshmall@94.177.224.11) (Changing host)
[16:45:11] *** Joins: marshmallow (~marshmall@user/marshmallow)
[16:45:22] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:45:27] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[16:46:35] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[16:54:17] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 256 seconds)
[16:59:31] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:178:7edf:7ae2:b6e7)
[16:59:31] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:178:7edf:7ae2:b6e7) (Changing host)
[16:59:31] *** Joins: skapata (~Skapata@user/skapata)
[17:04:57] *** Joins: mono_jamoon (~mono_jamo@117.200.234.87)
[17:10:09] *** Joins: plastico (~plastico@neomutt/plastico)
[17:11:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:11:40] *** Quits: MatSharrow (~matthew@53.115.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[17:14:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:16:46] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:22:22] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[17:23:15] <hans> i want a lock_guard that complains if try_lock has failed for too long.. does this seem about right? https://wandbox.org/permlink/sUTvlXD1mxnKQj58
[17:23:42] <hans> (debugging a hanging application, suspect it might be hanging on a lock_guard somewhere)
[17:28:17] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 256 seconds)
[17:29:55] <hans> i found an issue with the code, startime isn't initialized if the first try_lock succeeds, fixing that, https://wandbox.org/permlink/5nsuU8TI2lVOV0eS
[17:30:47] <hans> err, https://wandbox.org/permlink/UXrMLtED4HjZazfL
[17:33:23] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[17:34:48] <hans> and a more performant/optimistic fix would be https://wandbox.org/permlink/F7ganKTRTgSXGzF4
[17:35:27] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[17:40:35] *** Quits: bnchs__ (~bnchs@41.141.173.31) (Remote host closed the connection)
[17:41:30] *** Joins: bnchs (~bnchs@41.141.173.31)
[17:42:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:10] *** ChanServ sets mode: +v npaperbot
[17:46:48] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (Remote host closed the connection)
[17:48:13] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[17:48:51] *** Joins: callq (~callq@92.119.19.230)
[17:49:46] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[17:52:53] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[17:53:12] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[17:54:26] *** Quits: Cyp (~cyp@213.237.88.120) (Read error: Connection reset by peer)
[18:01:05] *** Joins: Cyp (~cyp@213.237.88.120)
[18:10:44] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[18:10:57] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[18:11:02] <lxsameer> hey folks, is it possible to force the destructor of the class B to be used when C get destroyed instead of A in this code https://wandbox.org/permlink/IK4pCFmcq6yLQv5P
[18:11:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:13:01] <vdamewood> lxsameer: Make the destructor virtual
[18:13:23] <chris64> Is it wise to not call the constructor of A?
[18:13:30] <chris64> *destructor
[18:13:52] <ville> what lxsameer has is ub
[18:14:36] *** Joins: orthoplex64 (~crm@70.120.0.94)
[18:15:13] <ville> by default std::unique_ptr will delete its resource, and it would happen though a pointer-to-A, but the pointer is pointing to a derived object. hence ub
[18:15:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[18:15:20] <lxsameer> vdamewood: unfortunately i don't control A and B
[18:15:24] <ville> err through
[18:16:16] <lxsameer> is it possible to dynamic cast `a` to B type and some how force a destructor call?
[18:16:22] <vdamewood> lxsameer: Then whoever coded A and B did it wrong.
[18:16:28] <ville> vdamewood: no
[18:16:35] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:b4e8:6f53:6fdf:55e6) (Read error: Connection reset by peer)
[18:16:40] <vdamewood> ville: Oh. Oops.
[18:16:51] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:90d6:f3c8:741b:677a)
[18:17:19] <ville> vdamewood: there's the "what rules require" and there's the "what's a reasonably unnuanced" way of doing things
[18:17:54] <ville> lxsameer: dynamic_cast only works on polymoprhic types
[18:18:05] <ville> err polymorphic
[18:18:35] <ville> the rules require: if you have pointer-to-base which points to derived object and you delete through that pointer, then the base type must have virtual dtor
[18:18:57] <lxsameer> coool, thanks folks
[18:19:15] <ville> the "less nuanced" approach is to stick a virtual dtor an all your base classes, so you don't have to think about the rules
[18:19:38] <lxsameer> cheers
[18:21:36] <vdamewood> ville: Ah, so it's only wrong if the original author meant for pointers-to-A to point to B's.
[18:22:03] <ville> ...no.. only if deletion occurs through base which does not have virtual dtor.
[18:22:24] <ville> you could still avoid that by releasing the reosurce guarded by the unique_ptr manually
[18:22:50] <ville> now why would any one do that in practice is another question
[18:24:17] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 240 seconds)
[18:26:51] <ville> http://coliru.stacked-crooked.com/a/1f4ed033eea87ea5 that's fine. no virtual dtors, deleting happens through pointer to correct type
[18:27:41] <ville> whether that's delete called by unique_ptr or the programer makes no difference
[18:32:47] *** Joins: Viewday113 (~Viewday@user/viewday)
[18:34:49] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:34:49] *** Viewday113 is now known as Viewday11
[18:37:40] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:48:35] *** Joins: x_kuru (~xkuru@user/xkuru)
[18:49:19] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 256 seconds)
[18:50:17] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[18:54:38] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[19:00:00] *** Joins: ipe (~ipe@d4z1v1bknl0mm2j9464-4.rev.dnainternet.fi)
[19:04:29] *** Joins: amit_ (~amit@2601:445:447f:a2f6:5ef4:eeef:ce07:ccaf)
[19:09:46] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[19:12:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:16:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:23:52] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[19:25:49] *** Joins: constxd (~brad@142.167.170.88)
[19:30:01] *** Quits: tlophd_becky__ (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Quit: Leaving)
[19:30:20] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[19:30:42] *** Joins: Miyu (~hackkitte@94.31.104.136)
[19:31:09] *** Joins: slidercrank (~slidercra@user/slidercrank)
[19:32:37] *** Joins: jsbach (~jsbach@2a01:c23:64ed:9900:3a00:ede3:d41a:ce11)
[19:33:34] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 250 seconds)
[19:37:37] *** Miyu is now known as hackkitten
[19:38:19] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Read error: Connection reset by peer)
[19:41:21] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (Quit: Bye)
[19:44:34] *** Joins: Yamakaja (~yamakaja@vps.pub.yamakaja.me)
[19:44:34] *** Quits: Yamakaja (~yamakaja@vps.pub.yamakaja.me) (Changing host)
[19:44:34] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[19:49:06] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[19:52:13] *** Quits: bnchs (~bnchs@41.141.173.31) (Ping timeout: 256 seconds)
[19:52:17] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 240 seconds)
[19:52:20] *** Joins: bnchs__ (~bnchs@41.141.173.31)
[19:57:23] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:57:50] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[20:00:46] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[20:05:51] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:08:10] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:12:02] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:12:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:16:05] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[20:16:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:22:25] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[20:23:00] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[20:26:41] *** Quits: AssKoala (~asskoala@user/asskoala) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[20:26:58] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[20:26:58] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[20:26:58] *** Joins: AssKoala (~asskoala@user/asskoala)
[20:30:44] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:b2c7:8af1:1d8:3fe4)
[20:30:44] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:b2c7:8af1:1d8:3fe4) (Changing host)
[20:30:44] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:32:41] *** Joins: Viewday115 (~Viewday@user/viewday)
[20:34:16] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[20:34:17] *** Viewday115 is now known as Viewday11
[20:37:54] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:39:02] *** Joins: martiert1work (~martiert@173.38.220.52)
[20:39:31] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:40:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[20:41:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:42:19] *** Quits: martiert_work (~martiert@173.38.220.45) (Ping timeout: 256 seconds)
[20:46:16] *** Joins: sigma_ (~sigma@164.215.206.157)
[20:52:11] *** Joins: bnchs___ (~bnchs@160.177.20.208)
[20:52:28] *** Joins: andreasbuhr (~quassel@p549dbd79.dip0.t-ipconnect.de)
[20:52:47] *** Quits: andreasbuhr (~quassel@p549dbd79.dip0.t-ipconnect.de) (Client Quit)
[20:54:47] *** Quits: bnchs__ (~bnchs@41.141.173.31) (Ping timeout: 256 seconds)
[20:54:54] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[20:55:40] *** Quits: mono_jamoon (~mono_jamo@117.200.234.87) (Quit: Leaving)
[20:59:37] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[21:06:21] *** Joins: ethrl (~ethereal@user/doforlove33)
[21:07:50] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[21:08:41] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[21:08:57] *** Quits: bnchs___ (~bnchs@160.177.20.208) (Ping timeout: 240 seconds)
[21:09:41] *** Joins: Betal (~Betal@user/betal)
[21:10:29] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[21:11:14] <linext> https://ideone.com/KkgCPp
[21:11:24] <linext> https://ibb.co/YDpcJJw
[21:11:29] <linext> fails for about half the test cases
[21:12:02] *** Quits: ethrl (~ethereal@user/doforlove33) (Quit: WeeChat 2.8)
[21:12:27] *** Joins: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[21:13:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:14:03] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Ping timeout: 256 seconds)
[21:16:53] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:27:39] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[21:31:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[21:31:26] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[21:34:23] *** hexeme is now known as ldlework
[21:35:36] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[21:37:17] *** Quits: zen_coder (~zen_coder@141.113.64.75) (Ping timeout: 240 seconds)
[21:39:46] *** Quits: grafikrobot__ (~grafikrob@208.59.79.14) (Remote host closed the connection)
[21:42:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:11] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:11] *** ChanServ sets mode: +v npaperbot
[21:43:35] *** Joins: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca)
[21:43:42] *** Quits: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) (Quit: macbook)
[21:48:43] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[21:50:42] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[21:51:13] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[21:57:25] *** Joins: ferdna (~ferdna@user/ferdna)
[22:06:22] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[22:08:36] *** Joins: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[22:11:57] *** macbook is now known as toadtoad
[22:12:18] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[22:13:17] *** Quits: toadtoad (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) (Client Quit)
[22:13:38] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:16:10] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[22:16:50] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[22:17:21] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[22:19:12] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[22:19:24] *** Joins: xkuru (~xkuru@user/xkuru)
[22:23:21] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[22:23:26] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac)
[22:25:34] *** Joins: NEYi (~NEYi@109.251.216.38)
[22:27:38] *** Joins: x_kuru (~xkuru@user/xkuru)
[22:28:31] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[22:28:41] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102)
[22:30:31] *** Quits: qwedfg_ (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[22:30:58] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:31:39] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Quit: leaving)
[22:33:01] *** Joins: Viewday116 (~Viewday@user/viewday)
[22:34:11] *** Joins: Uswald (~leandre@2a01cb040075f900607ca9235dcc5cbc.ipv6.abo.wanadoo.fr)
[22:34:11] *** Quits: Uswald (~leandre@2a01cb040075f900607ca9235dcc5cbc.ipv6.abo.wanadoo.fr) (Changing host)
[22:34:11] *** Joins: Uswald (~leandre@user/Uswald)
[22:34:31] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[22:34:32] *** Viewday116 is now known as Viewday11
[22:35:20] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:37:51] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[22:38:46] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[22:41:14] *** Joins: vicfred (~vicfred@user/vicfred)
[22:42:12] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:42:26] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:51:11] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[22:53:20] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[22:56:05] *** Quits: autark (~autark@ti0048a400-0869.bb.online.no) (Read error: Connection reset by peer)
[22:56:51] *** Parts: trillp (~trillp@2001:19f0:6401:72e:c092:4829:25d6:b788) (WeeChat 3.4)
[22:58:21] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:59:54] *** Joins: Azem (~haise01@user/haise01)
[23:01:11] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[23:03:17] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 240 seconds)
[23:11:37] *** Joins: reset (~reset@user/reset)
[23:12:15] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[23:12:56] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[23:13:55] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:14:31] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 256 seconds)
[23:14:39] <senoraraton> https://bpa.st/F7AA  how do I go about tracking down this issue?
[23:16:42] <neshpion> looks like you forgot an include guard or something
[23:17:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[23:17:22] <zz> no, you included something twice and the library was not made for it
[23:17:50] <ville> that's his own function deceptively in a class beginning with SDL
[23:18:36] <senoraraton> So the SDLisHard.h gets included from Menu.h and Menu.h is included in main.cpp https://github.com/SenorGato/8bit/
[23:18:57] <senoraraton> Also Menu.h gets included in Menu.cpp as well.
[23:19:11] <ville> line  3 is #endif...
[23:19:22] <ville> in SDLisHard.h that is
[23:19:39] <ville> same problem in all of your headers?
[23:19:40] <senoraraton> Thats not how you declare include guards?
[23:19:40] <zz> non-inline functions in .h, ugh
[23:19:50] <zz> like I said
[23:20:34] <ville> you stick the contens that you're trying to protect in the #ifndef
[23:21:00] <senoraraton> So all my header files need the #endif moved to the bottom of the file?
[23:21:05] <ville> yes
[23:21:46] <ville> now you're still going to run into problems because other issues
[23:21:50] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:22:38] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:22:47] <ville> header guards prevent the same header from inserting its contents in a single translation unit. when you have multiple translation units you have to use other means to avoid multiple definitions
[23:23:42] <sbrothy> you may see "#pragma once" used like that too but it's not standard. id avoid
[23:24:12] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:24:32] <sbrothy> i prefer good old header guards
[23:26:05] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[23:29:18] <senoraraton> I'm confused, its still not working.
[23:30:29] <zz> sbrothy: name a contemporary compiler that does not know #pragma once?
[23:31:44] <sbrothy> yeh. but still. with header guard you can test if a header is included downstream. can you do that with #pragma once?
[23:32:01] <sbrothy> may im just a dinosaur
[23:32:36] <senoraraton> So why doesn't moving the #endif to properly be header guards not stop the file from getting imported twice?  I thought that was what header guards were designed for.
[23:32:37] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:34:39] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[23:35:02] <neshpion> it stops the contents from being copy-pasted multiple times into one translation unit, but when it comes time to link them together, there could be collisions at that point; am i getting this right? i'm noob
[23:35:15] <zz> headers guards don't guard files, they guard a section (which usually spans most of the file)
[23:35:16] <sbrothy> and if youre a beginner i'd definitely get the hang of include guards fist. no offence
[23:35:22] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[23:35:54] <sbrothy> isnt that a strength as opposed to #pragma. anyway, this is a discussion for general. nvm.
[23:36:16] <senoraraton> So wait, because I have multiple compliation targets, its colliding... How do I fix that...
[23:38:52] <senoraraton> So I think I'm doing this wrong.  I wanted to create a namepspace of functions that are helper functions for SDL that abstract some of the complexity away.  So I put then in the namespace SDLisHard in SDLisHard.h  Then I included that in my Menu class.  Is this the wrong way to handle this situation?
[23:39:35] <senoraraton> Should I make a *.cpp file and include the implementations in the .cpp file?  So even though its just a set of function declerations it still needs to be broken up into two files?
[23:40:49] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[23:41:50] *** Joins: Markow (~Markow@176.122.215.103)
[23:42:19] *** Joins: pulse (~pulse@user/pulse)
[23:42:32] <senoraraton> That didn't work.
[23:43:47] <senoraraton> Adding externs tot he functions in the header file also did not work.
[23:47:14] <senoraraton> Everything I am reading is implying that header guards should solve this problem... And it isn't.
[23:49:47] *** Joins: CaCode (~CaCode@user/cacode)
[23:51:03] <ville> senoraraton: then reread my last comment
[23:51:25] <senoraraton> Sure, but I can't find a solution on how to address that.
[23:52:26] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 245 seconds)
[23:52:33] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[23:52:39] <ville> you've not told what the new error is exactly
[23:52:43] <senoraraton> I set the functions to inline in the SDLisHard header file, and it compiled.
[23:52:56] <senoraraton> It was the exact same error as before I moved the header guards.
[23:54:13] <ville> we can't know that
[23:58:03] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:58:21] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
