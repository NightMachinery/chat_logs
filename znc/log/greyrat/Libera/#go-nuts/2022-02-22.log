[00:03:32] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:05:27] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:06:10] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com)
[00:10:47] *** Joins: tse (~tse@user/tse)
[00:15:14] *** Quits: mmfood (~mmfood@81-233-128-225-no92.tbcn.telia.com) (Ping timeout: 272 seconds)
[00:16:35] *** Joins: mmfood (~mmfood@82.118.29.193)
[00:22:24] *** Quits: dalek_caan (~Thunderbi@109.252.124.86) (Quit: dalek_caan)
[00:23:01] <blinux> Does anyone know of a good comparison of the pros/cons to Gopherjs+React vs. Elm for frontend work?
[00:23:39] <b0nn> You really want to ask that in a #javascript channel
[00:23:54] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:8a6:a8d3:62c4:7875) (Ping timeout: 260 seconds)
[00:25:28] <blinux> OK, good idea.
[00:34:28] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:36:20] *** Joins: crashrep (~crashrep@user/crashrep)
[00:36:25] *** Joins: iryith1 (~iryith3@207.81-166-89.customer.lyse.net)
[00:40:25] *** Quits: iryith (~iryith3@user/iryith) (Ping timeout: 256 seconds)
[00:42:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:42:36] *** Joins: internut (~internut@2601:280:4e00:7b70:3063:f8c:4d00:6154)
[00:44:38] *** Joins: jespada (~jespada@148.252.132.52)
[00:54:50] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:56:36] *** Quits: alyx (~alyx@173.30.132.213) (Ping timeout: 240 seconds)
[00:57:20] *** Joins: alyx (~alyx@173.30.132.213)
[00:57:43] *** Quits: bluedust (~bluedust@103.165.167.221) (Remote host closed the connection)
[00:57:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[00:59:02] *** Quits: jjonah (~jjonah@p200300d5d744e000dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[00:59:07] *** Joins: crashrep (~crashrep@user/crashrep)
[00:59:53] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[01:03:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[01:04:17] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[01:06:21] *** Joins: crashrep (~crashrep@user/crashrep)
[01:07:37] *** Quits: alyx (~alyx@173.30.132.213) (Ping timeout: 240 seconds)
[01:10:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[01:11:35] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) ()
[01:14:25] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:17:28] *** Joins: crashrep (~crashrep@user/crashrep)
[01:17:57] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 272 seconds)
[01:31:42] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[01:32:00] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[01:32:30] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 272 seconds)
[01:32:48] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[01:34:08] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Read error: Connection reset by peer)
[01:34:13] *** Joins: slowtype- (~slowtyper@2a02:214c:840d:cd00:225:64ff:feb7:4668)
[01:35:06] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[01:35:13] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Read error: Connection reset by peer)
[01:35:28] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[01:36:12] *** Quits: mmfood (~mmfood@82.118.29.193) (Ping timeout: 240 seconds)
[01:38:33] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895)
[01:39:31] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 245 seconds)
[01:40:02] *** Quits: d42 (~root@user/d42) (Quit: ZNC - http://znc.in)
[01:41:48] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:41:57] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[01:42:00] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 272 seconds)
[01:43:33] *** Joins: d42 (~root@user/d42)
[01:49:28] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:50:18] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[01:51:30] *** Joins: alyx (~alyx@173.30.132.213)
[02:01:13] *** Joins: zunino (~zunino@2804:7f5:f380:33d4:d611:8d34:6a79:a818)
[02:03:04] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:04:02] *** Joins: rcernin (~rcernin@124.190.132.36)
[02:06:36] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 240 seconds)
[02:19:52] *** Quits: jespada (~jespada@148.252.132.52) (Read error: Connection reset by peer)
[02:20:43] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 256 seconds)
[02:22:47] *** Joins: treeford (~charleste@user/treeford)
[02:29:09] *** Quits: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net) (Quit: So long!)
[02:29:13] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[02:30:09] *** Quits: frebib (~frebibcha@nerdhouse.io) (Quit: Bridge terminating on SIGTERM)
[02:30:12] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:30:16] *** Joins: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net)
[02:31:02] *** Joins: frebib (~frebibcha@nerdhouse.io)
[02:31:39] *** Joins: jespada (~jespada@148.252.132.52)
[02:32:02] <pjs> if I'm accepting an io.Reader as a func argument, is there any way to get the size of the buffer without knowing the incoming concrete type? right now I'm filling a bytes.Buffer and using Len() but basically this is causing the app to read the buffer twice because the 3rd party lib expects a io.Reader as well. I assume the answer is no without some weird checks using reflect or something but figured I'd ask
[02:32:48] <b0nn> pjs: No, because the io.Reader interface does not require a len type function
[02:33:00] <b0nn> That is, you can satisfy the interface without one
[02:33:22] *** Joins: moog (~moog@107.77.244.141)
[02:33:57] <b0nn> https://pkg.go.dev/io#Reader
[02:34:38] <pjs> Yea, I was just hoping there was some magic to search for things like Stat(), Size() or Len().. not a big deal just figured I'd ask
[02:34:48] <pjs> b0nn: thanks as always
[02:35:06] <b0nn>  Heh, np, and there's never any harm in asking
[02:35:08] *** Quits: The_Loko (~The_Loko@86.127.255.193) (Quit: Leaving)
[02:36:02] <b0nn> hmm, who is your expected user?
[02:36:05] *** Quits: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net) (Remote host closed the connection)
[02:36:27] <b0nn> You could cheat and create an interface that embeds the io.Reader interface, and demands a len style function as well
[02:38:04] *** Quits: jespada (~jespada@148.252.132.52) (Read error: Connection reset by peer)
[02:38:59] *** Joins: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net)
[02:48:18] *** Joins: shirro (~shirro@user/shirro)
[02:48:31] *** Joins: Torr (~Torr@user/torr)
[02:49:03] <fizzie> You *can* do something like `if lenReader, ok := reader.(interface { Len() int }); ok { size = lenReader.Len() }` if you want to just say "if the concrete type has a Len() method, call it".
[02:49:23] <fizzie> Whether you consider that a "weird check" is more debatable.
[02:50:20] <fizzie> That's what errors.As for example uses to discover if the error has an As(...) method it could call: https://cs.opensource.google/go/go/+/refs/tags/go1.17.7:src/errors/wrap.go;l=95;drc=fedb49487831e1168ebad7d313e23a8494bee6a2
[02:51:52] <fizzie> That said, just looking for random methods might not be the best idea. Even if the type does have a Len() or a Size() method, it doesn't necessarily mean it returns anything useful.
[03:09:31] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 245 seconds)
[03:10:49] <pjs> Yea, I did think of a custom interface but decided I was over thinking it.
[03:10:57] <pjs> fizzie: thx for the tips though
[03:13:50] *** Quits: beholders_eye (~weechat@2804:1b3:70c1:2444:7e2a:dfd:5b24:6a17) (Quit: WeeChat 3.3)
[03:14:57] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:23:22] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[03:28:24] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[03:30:36] *** Joins: masoudd (~masoudd@user/masoudd)
[03:32:51] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[03:33:03] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:33:49] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[03:34:32] *** Quits: normen_ (~normen@p200300d717235c00b131e7a9da4dda24.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:35:20] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 250 seconds)
[03:37:04] *** Joins: mrig (~mrig@user/mrig)
[03:40:55] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[03:45:54] *** Quits: zunino (~zunino@2804:7f5:f380:33d4:d611:8d34:6a79:a818) (Quit: WeeChat 3.0.1)
[03:51:00] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:56:48] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:58:15] *** Joins: treeford (~charleste@user/treeford)
[04:00:43] *** Joins: normen_ (~normen@p200300d717235c00b131e7a9da4dda24.dip0.t-ipconnect.de)
[04:02:43] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[04:04:06] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 245 seconds)
[04:27:44] *** Parts: dba (sid533975@id-533975.hampstead.irccloud.com) ()
[04:31:03] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[04:32:22] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[04:36:06] *** Quits: Bitflux (~byte@byteflux.net) (Quit: ZNC - https://znc.in)
[04:36:18] *** Joins: Byteflux (~byte@byteflux.net)
[04:36:39] *** Joins: ejjfunky (~ejjfunky@125.164.23.55)
[04:37:29] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[04:40:37] *** Quits: jeromenerf (~jerome@per92-h03-176-149-34-153.dsl.sta.abo.bbox.fr) (Ping timeout: 240 seconds)
[04:42:23] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[04:43:17] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[04:43:53] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:55:56] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[04:57:33] *** Joins: treeford (~charleste@user/treeford)
[05:02:36] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[05:03:58] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[05:06:26] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[05:07:30] *** Joins: jeromenerf (~jerome@per92-h03-176-149-34-153.dsl.sta.abo.bbox.fr)
[05:16:19] *** Joins: A337-Guest (~A337-Gues@mobile-107-77-204-64.mobile.att.net)
[05:16:36] *** Joins: treeford (~charleste@user/treeford)
[05:24:40] <Rudde> I have this DO droplet, I sometimes want a go script running on it which doesn't provide binaries. Is there any simple way to get a docker container to just have everything I need to go a go get or go install and let me run these scripts easily? Maybe also let me modify them as I do sometimes?
[05:25:04] <Rudde> I've tried a bunch of docker containers on github, but they're not active and often very out of date, or I just don't get them to actually work
[05:25:34] <b0nn> "go script"?
[05:26:09] <Rudde> Simple programs running in the CLI taking command line arguments
[05:26:13] <b0nn> If I read you correctly there's a go project out there somewhere that you want a binary of on a Digital Ocean droplet
[05:27:09] <b0nn> I'm wondering why you don't build the go application, then put that into a container and leave that out there
[05:27:10] <Rudde> Well, yes, but I also don't want to compile them externally and have to move them over every time I want to do this
[05:27:22] <Rudde> I also run a distro that does not provide go in it's offical repo
[05:27:43] <Rudde> And I do not want unoffical repos on my system
[05:27:56] <b0nn> So, you want to ad hoc download the src, build, and run on the droplet?
[05:28:16] <antarus> he doesn't have golang on his droplet; so he wants a container that does what you said
[05:28:33] <antarus> it seems a fairly trivial dockerfile to write, but what source container does he use?
[05:29:03] <b0nn> hmm, for me I would go with the Golang container, then mv the binary to a  scratch container
[05:29:22] <antarus> I normally use golang:<version> as the src container for this sort of thing
[05:29:29] <antarus> (where version is whatever verison of go you want)
[05:29:41] <b0nn> Then I'd leave the scratch on the droplet until I felt like updating
[05:29:41] <Rudde> Can't I treat the container as a "dev" environment and just keep it all go related there?
[05:30:09] <antarus> b0nn: if he built a binary, it doesn't need anything at runtime, right? He could execute it directly on his droplet?
[05:30:27] <antarus> Rudde: nothing stopping you from doing that either
[05:30:28] <b0nn> libc can be problematic
[05:30:51] <antarus> well sure, but its probably good enough :)
[05:30:52] *** Joins: shtirlic_ (~shtirlic@178.70.132.113)
[05:30:54] <b0nn> IIRC you need to set CGO_ENABLED=0
[05:31:11] <antarus> (but why not just run it in the container anyway)
[05:31:21] <antarus> Rudde: have you tried using the golang:<version> contianers for it?
[05:31:26] * antarus is confused as to why they would not work for you
[05:31:57] <Rudde> I've never really written a dockerfile
[05:32:04] <Rudde> I've tried to do it for this purpose
[05:32:07] <Rudde> but it is my first
[05:32:18] <antarus> https://gitweb.gentoo.org/sites/soko.git/tree/Dockerfile
[05:32:50] <antarus> is a maybe passable example of building a program in a container, then hosting it in a scratch container
[05:33:41] *** Quits: shtirlic (~shtirlic@178.70.137.68) (Ping timeout: 245 seconds)
[05:34:10] <antarus> so basically 3 steps, the first step builds the go program, the second step builds the nodejs web frontend (probably not relevant for you) and the third step finally copies everything into a standalone container for running it
[05:34:33] <Rudde> But I want the container to be generic?
[05:34:39] <Rudde> I would like to shell into it
[05:34:45] <Rudde> and work on whatever I need at that moment
[05:35:39] <b0nn> add bash to the scratch container (or just ignore that step and deploy the fat acotainer)
[05:35:40] <antarus> normally I'd use systemd-nspawn for something like that; but I'm not quite sure how I'd populate the nspawn thing for htat
[05:36:21] * b0nn feels like I almost made Thomas the Tank Engine Fat controller reference
[05:36:25] <Rudde> what is the FROM scratch part?
[05:36:44] <antarus> https://docs.docker.com/develop/develop-images/baseimages/
[05:37:21] * antarus is unsure how on topic this conversation is
[05:37:26] <antarus> so I'll go make dinner, good luck !
[05:37:27] *** Quits: A337-Guest (~A337-Gues@mobile-107-77-204-64.mobile.att.net) (Quit: Connection closed)
[05:37:41] <Rudde> Where do I define the name of my image?
[05:38:20] <b0nn> Rudde: you define the name for the image when you build it
[05:38:35] <b0nn> I think that you might be better served in #Docker for the docker stuffs
[05:39:26] *** Joins: nuclearg1 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[05:39:26] <b0nn> There is a bit of "multiple moving parts" going on when you work with docker (there's docker, the ganguage(go) and the code you are building)
[05:39:35] <b0nn> language*
[05:40:14] *** Quits: normen_ (~normen@p200300d717235c00b131e7a9da4dda24.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:43:25] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:44:45] *** Joins: pepee (~pepee@user/pepee)
[05:50:57] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[05:51:11] *** Joins: ejjfunky2 (~ejjfunky@125.164.19.196)
[05:54:12] *** Quits: ejjfunky (~ejjfunky@125.164.23.55) (Ping timeout: 240 seconds)
[05:58:47] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Read error: Connection reset by peer)
[06:03:38] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 260 seconds)
[06:03:52] *** Joins: treeford (~charleste@user/treeford)
[06:05:47] *** Quits: andlabs (~andlabs@ool-457dd512.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:06:12] *** Quits: justAstache (~justache@user/justache) (Remote host closed the connection)
[06:07:42] *** Joins: justAstache (~justache@user/justache)
[06:08:18] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 250 seconds)
[06:13:37] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 256 seconds)
[06:28:37] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:33:45] *** Joins: treeford (~charleste@user/treeford)
[06:40:13] *** Joins: pepee (~pepee@user/pepee)
[06:42:39] *** Joins: normen_ (~normen@p200300d71749cc00652494539d217589.dip0.t-ipconnect.de)
[06:45:00] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 240 seconds)
[06:45:22] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 272 seconds)
[06:48:57] *** Joins: andlabs (~andlabs@70.107.171.168)
[06:50:52] *** Joins: pepee (~pepee@user/pepee)
[06:55:50] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[07:00:00] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:02:31] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[07:05:05] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Remote host closed the connection)
[07:06:38] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[07:08:16] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Remote host closed the connection)
[07:09:18] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[07:11:24] *** Joins: Yawhatnever (~ywn@ip-210.dhcp7.dyn.enventis.net)
[07:15:36] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Remote host closed the connection)
[07:16:00] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[07:16:42] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Remote host closed the connection)
[07:19:23] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[07:22:28] *** Joins: treeford (~charleste@user/treeford)
[07:22:34] *** Quits: chameleon (~chameleon@62.ip-51-89-164.eu) (Quit: ZNC - https://znc.in)
[07:24:59] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Remote host closed the connection)
[07:25:24] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[07:25:47] *** Joins: blacked (~blacked@user/blacked)
[07:27:20] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:2d1e:ce5d:e885:dca3)
[07:27:37] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[07:28:38] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[07:29:15] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:2d1e:ce5d:e885:dca3) (Client Quit)
[07:29:55] *** Joins: rcernin (~rcernin@124.190.132.36)
[07:30:52] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Quit: WeeChat 3.4)
[07:31:27] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[07:31:54] *** Quits: s0k1t (~user@vps-f3ad6eb6.vps.ovh.ca) (Quit: WeeChat 3.3)
[07:32:04] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Remote host closed the connection)
[07:33:16] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[07:34:07] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Remote host closed the connection)
[07:34:32] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[07:36:46] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Remote host closed the connection)
[07:37:09] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[07:37:19] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Client Quit)
[07:37:42] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[07:40:03] *** Joins: s0k1t (~user@vps-f3ad6eb6.vps.ovh.ca)
[07:40:16] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[07:40:35] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Changing host)
[07:40:35] *** Joins: nuclearg2 (~nucleargr@user/nuclearg1)
[07:41:24] *** Quits: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[07:41:44] *** Quits: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[07:53:10] *** Quits: blacked (~blacked@user/blacked) (Quit: Client closed)
[07:56:12] *** Quits: nehsou^ (~nehsou@50.233.120.162) (Ping timeout: 240 seconds)
[07:57:17] *** Joins: blacked (~blacked@user/blacked)
[07:57:32] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[07:57:47] *** Joins: treeford (~charleste@user/treeford)
[07:58:15] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[07:58:16] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[07:58:16] *** Joins: nortoh (~nortoh@user/nortoh)
[08:01:59] *** Joins: chameleon (~chameleon@62.ip-51-89-164.eu)
[08:03:16] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[08:04:17] *** Joins: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[08:08:53] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[08:09:20] *** Joins: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[08:10:52] *** Quits: nuclearg2 (~nucleargr@user/nuclearg1) (Quit: WeeChat 3.4)
[08:11:21] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[08:15:49] *** Joins: treeford (~charleste@user/treeford)
[08:18:12] *** Quits: blacked (~blacked@user/blacked) (Quit: Client closed)
[08:21:07] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[08:23:52] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Quit: WeeChat 3.4)
[08:24:15] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[08:27:59] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Client Quit)
[08:28:21] *** Joins: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[08:44:37] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 240 seconds)
[08:44:43] *** Quits: shirro (~shirro@user/shirro) (Quit: Leaving)
[08:46:37] *** Quits: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[08:46:58] *** Quits: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[08:47:03] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:47:22] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[08:47:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:48:02] *** Quits: nuclearg1 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[08:48:29] *** Joins: bluedust (~bluedust@103.165.167.221)
[08:49:04] *** Quits: kshockey (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.2 - https://znc.in)
[08:49:19] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[08:49:20] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[08:49:20] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[08:51:21] *** Joins: crashrep (~crashrep@user/crashrep)
[08:56:59] *** Joins: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[08:57:01] *** Joins: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[09:01:18] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[09:14:17] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[09:15:22] *** Quits: nuclearg2 (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Quit: WeeChat 3.4)
[09:15:37] *** Joins: treeford (~charleste@user/treeford)
[09:21:11] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[09:22:42] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[09:29:12] *** Joins: crashrep (~crashrep@user/crashrep)
[09:30:19] *** Joins: Jad (~Nashmi@user/jad)
[09:33:29] *** Quits: crashrep (~crashrep@user/crashrep) (Client Quit)
[09:37:10] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[09:37:50] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[09:41:25] *** Quits: clee (~clee@tali.t0k.org) (Ping timeout: 240 seconds)
[09:56:38] *** Quits: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[09:56:38] *** Quits: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[10:00:51] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 256 seconds)
[10:01:31] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:03:47] *** Joins: clee (~clee@209.198.135.112)
[10:04:21] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[10:08:30] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:09:24] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[10:09:41] *** Joins: masoudd (~masoudd@user/masoudd)
[10:09:49] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:11:28] *** Joins: shka (~herr@109.231.3.55)
[10:21:26] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[10:26:42] *** Quits: Jad (~Nashmi@user/jad) (Quit: Benefits I derive from free­dom are largely the result of the uses of freedom by others, and mostly of those uses of freedom that I could never avail myself of.)
[10:37:43] *** Parts: m15o (965950e801@2604:bf00:561:2000::27d) ()
[10:37:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[10:41:14] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[10:49:34] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: quick everyone outta the universe)
[10:51:47] *** Joins: fdan (~fdan@103.215.168.1)
[10:52:02] *** Quits: rcernin (~rcernin@124.190.132.36) (Quit: WeeChat 3.4)
[10:52:06] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.2 - https://znc.in)
[10:52:21] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[10:52:21] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[10:52:21] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[11:03:03] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[11:03:05] *** Joins: bkircher (~bkircher@2001:a61:246d:f401:4760:9a66:af72:3722)
[11:03:47] *** Joins: treeford (~charleste@user/treeford)
[11:07:17] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:07:22] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[11:08:05] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:09:28] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 272 seconds)
[11:12:47] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:15:57] *** Quits: chripell (~chripell@147.80.76.34.bc.googleusercontent.com) (Remote host closed the connection)
[11:22:11] *** Joins: rendar (~rendar@user/rendar)
[11:25:02] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: Leaving)
[11:25:51] *** Joins: rogersm (~rogersm@90.166.180.250)
[11:26:34] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[11:28:50] *** Joins: absc (~absc@81.31.144.28)
[11:33:59] *** Joins: neurocyte0917090 (~neurocyte@IP-213157011045.dynamic.medianet-world.de)
[11:33:59] *** Quits: neurocyte0917090 (~neurocyte@IP-213157011045.dynamic.medianet-world.de) (Changing host)
[11:33:59] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[11:49:17] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 240 seconds)
[11:49:53] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:51:26] *** Joins: aLeSD (~aLeSD@91.126.33.194)
[11:51:39] *** Joins: whoami (~whoami@d118-75-54-10.try.wideopenwest.com)
[11:52:09] *** Joins: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[11:52:11] *** Joins: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[11:55:32] <aLeSD> hi all
[11:55:37] <aLeSD> is there common to define custom type (aliases) for data type for an app. For example: type uint Index; ?
[11:57:39] <aLeSD> ops ... type Index uint
[12:01:26] <b0nn> aLeSD: I don't know the answer, but I'm curious why you are looking at this
[12:07:13] <bookworm> and yes it is common to do in Situations where you have say enums of a specific type
[12:07:22] *** Joins: arinov_ (~arinov@213.194.126.155)
[12:07:51] <bookworm> and you want people to easily find a constant with their editor so that it makes sense (int wouldn't work well in that case)
[12:08:52] <bookworm> if you see a variable in code called int it doesn't really give you meaning, Index will clarify what the intent is, so it can help there
[12:09:12] <bookworm> s/called/with a type of /
[12:13:01] *** Quits: chameleon (~chameleon@62.ip-51-89-164.eu) (Quit: ZNC - https://znc.in)
[12:13:15] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 240 seconds)
[12:15:36] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[12:18:55] <aLeSD> b0nn, bookworm it is for semantic purpose .... for example one of my real case : type Leaf common.Hash
[12:24:51] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:24:53] <aLeSD> here is another question ... I have those Leaf type ... where I should put the definition in my source tree ?
[12:25:10] <aLeSD> I mean many modules are going to use it
[12:27:57] <aLeSD> maybe a common modules ?
[12:29:39] *** Joins: jespada (~jespada@85.255.234.190)
[12:33:46] <jjakob> what do you use for sending mail? I used to use https://github.com/go-gomail/gomail, then a fork https?github.com/mschneider82/mail"
[12:34:56] <jjakob> but looking at the forks page there are a lot of other people's forks of gomail, the latest updated one seems to be https://github.com/Shopify/gomail
[12:35:19] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[12:35:53] *** Joins: analogsalad (~analogsal@user/analogsalad)
[12:37:33] *** Joins: zaz\ (~zaz@poneybl.eu)
[12:44:58] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[12:45:44] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 272 seconds)
[12:46:12] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:47:44] *** Quits: tripfandango (~tripfanda@5.29.21.247) (Ping timeout: 256 seconds)
[12:51:19] *** Joins: mrig (~mrig@user/mrig)
[12:52:01] *** Joins: treeford (~charleste@user/treeford)
[12:57:39] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[13:00:03] <mickey8> int64(true) apparently can't cast true to 1, so what are the options here?
[13:00:51] <KirkMcDonald> There's no ternary expression, either.
[13:01:04] <KirkMcDonald> So: An if statement. Perhaps put it in a function.
[13:01:11] <mickey8> thought so. thanks
[13:01:14] <b0nn> x := 0; if true {x = 1}
[13:02:35] *** Joins: jespada_ (~jespada@85.255.234.190)
[13:02:45] *** Quits: jespada (~jespada@85.255.234.190) (Ping timeout: 256 seconds)
[13:08:06] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[13:11:00] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:13:08] <bpalmer> x := map[bool]int{true: 1}[true]
[13:15:17] *** Joins: tripfandango (~tripfanda@5.29.21.247)
[13:19:14] *** Quits: bluedust (~bluedust@103.165.167.221) (Remote host closed the connection)
[13:23:04] *** Joins: jinie (~jimmy@195.254.169.70)
[13:23:49] *** Quits: jinie (~jimmy@195.254.169.70) (Client Quit)
[13:25:33] *** Joins: goldfish (~goldfish@user/goldfish)
[13:27:48] *** Joins: rcernin (~rcernin@124.190.132.36)
[13:33:24] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[13:36:20] *** Quits: moldorcoder7 (~moldorcod@37.120.143.29) (Read error: Connection reset by peer)
[13:37:03] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 272 seconds)
[13:38:13] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[13:38:50] *** Joins: moldorcoder7 (~moldorcod@37.120.143.30)
[13:40:29] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[13:43:37] *** Joins: mrig (~mrig@user/mrig)
[13:44:24] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[13:45:44] *** Joins: rcernin (~rcernin@124.190.132.36)
[13:49:30] *** Quits: tnez (~el@user/tnez) (Ping timeout: 256 seconds)
[13:50:57] *** Joins: tnez (~el@user/tnez)
[13:57:16] *** Joins: treeford (~charleste@user/treeford)
[13:58:22] * bookworm throws a rock at bpalmer 
[14:02:32] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[14:06:06] <fizzie> x := func(v bool) (n int) { if v { n = 1 }; return }(true) // except sadly gofmt insists splitting it to 6 lines
[14:06:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:09:14] *** Quits: rcernin (~rcernin@124.190.132.36) (Quit: WeeChat 3.4)
[14:10:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[14:13:55] *** Joins: yoonkn (~user@175.197.208.79)
[14:15:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Client Quit)
[14:20:23] <shiroyasha> x := math.Abs(math.Ceil(math.Sin(math.Copysign(1, float64(int(strconv.FormatBool(true)[0])-0x73)))))
[14:21:24] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[14:22:14] *** Joins: __alex (~alex@95.91.226.215)
[14:23:50] <shiroyasha> I missed a final conversion though.
[14:25:13] <aLeSD> if a function signature in : func New(a []int) *MyType ... how could a user can understand if I am getting a copy or a reference of the slice ?
[14:26:07] * aLeSD English 2.0
[14:29:45] <siXy> aLeSD: You're getting a copy of the slice _header_, because everything in go is pass-by-copy. But the slice header is just a 3-word struct that contains a pointer to the actual data. So.... "yes".
[14:30:55] <aLeSD> siXy, so the syntax will never assure the user that "a" will be never changed by MyType
[14:31:43] <aLeSD> the only way is that the user will "clone" a before passing ...
[14:32:03] <siXy> Correct. Go does not provide that sort of guarantee - for that you'd want rust.
[14:32:26] <aLeSD> but than there's the prob that MyType will never know if the user will never change the passing slice ...
[14:32:41] <aLeSD> siXy, ok . I see
[14:33:27] <siXy> It ends up being a bit complicated because anything that modifies the slice header so that the pointer ends up pointing at a different array (such as extending it beyond it's current length), will allow the New function to modify it without affecting the caller's copy. But until you have a really good mental model of slice implementation, that can be hard to predict.
[14:34:27] <siXy> Generally, I'd say that it would be considered extremely rude for such a function to modify a, and the only time you'd ever want to do that if you were writing a function whose name clearly communicated the expectation that the slice passed in would be modified.
[14:35:42] <siXy> E.g. func DeleteElem(a []int, elems ...int) # it'd be fine for this to modify a, because you've communicated that by the name of the function.
[14:36:19] <aLeSD> siXy, in my case the ownership of a is passed to MyType. the user should forget a.
[14:36:44] <aLeSD> a will be an internal attribute of MyType .... actually a private one
[14:37:06] *** Quits: alyx (~alyx@173.30.132.213) (Ping timeout: 256 seconds)
[14:38:11] *** Joins: xse_ (~xse@user/xse)
[14:38:45] *** Quits: xse (~xse@user/xse) (Ping timeout: 250 seconds)
[14:38:45] *** xse_ is now known as xse
[14:38:58] <siXy> Go doesn't have such a concept of explicit ownership, and assuming the user will guess your intent is risky. For maximal safety, your New function could copy a into a new slice so that you avoid the question - as long as a sn't large, and you aren't doing this in a tight loop, that should be fine.
[14:39:43] <siXy> There are cases in the stdlib though where there is an explicit note in a functions docs that a user should not modify a once passed to foo(), so you can do that if the above won't work.
[14:39:59] <A_Dragon> quick and dirty copy can be `append([]T(nil), slice...)`
[14:40:08] <A_Dragon> but you should probably use `copy`
[14:40:11] <siXy> I'd also suggest reading through https://github.com/golang/go/wiki/SliceTricks as this will help build a better understanding of go's slices, which can be a little counter-intuitive at times.
[14:40:14] <A_Dragon> siXy: yeah Ive been caught by that once or twice
[14:40:27] <A_Dragon> the one that comes to mind is io.Writer
[14:41:12] *** Joins: mmfood (~mmfood@82.118.29.133)
[14:41:39] <siXy> *nod* yeah, I do really like rust's explicit ownership - it does clarify this stuff really nicely. Although "clarity" isn't normally the first thing that rust code brings to mind :)
[14:44:04] *** Joins: chripell (~chripell@147.80.76.34.bc.googleusercontent.com)
[14:53:40] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[14:54:24] *** Joins: blacked (~blacked@user/blacked)
[14:58:21] <Rudde> Is there any way I can get the offical golang:1.17.7-bullseye (or other flavor) to run as non-root with it keeping to function?
[15:00:01] <siXy> Assuming you're talking about the container, then probably yes, as long as you're on a reasonably recent OS. Most linux distros can run containers as non-root - consult your specific distros support channel for guidance on how though as it varies.
[15:00:31] <blacked> :)
[15:04:14] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[15:12:52] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[15:14:47] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[15:18:12] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[15:24:39] *** Parts: pyzozord (pyzozord@user/pyzozord) ()
[15:28:10] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[15:28:15] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[15:33:24] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 240 seconds)
[15:40:00] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 256 seconds)
[15:45:13] *** Joins: treeford (~charleste@user/treeford)
[15:50:42] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 250 seconds)
[16:14:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:24:31] *** Quits: bkircher (~bkircher@2001:a61:246d:f401:4760:9a66:af72:3722) (Remote host closed the connection)
[16:24:45] *** Joins: bkircher (~bkircher@2001:a61:246d:f401:4760:9a66:af72:3722)
[16:25:34] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[16:25:45] *** Quits: blacked (~blacked@user/blacked) (Quit: blacked)
[16:27:10] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[16:31:11] *** Joins: untq (~untq@static.240.142.216.95.clients.your-server.de)
[16:31:32] *** Parts: untq (~untq@static.240.142.216.95.clients.your-server.de) ()
[16:36:06] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[16:36:10] *** Joins: monchi (~joints@143.198.92.132)
[16:41:34] *** Quits: jespada_ (~jespada@85.255.234.190) (Ping timeout: 260 seconds)
[16:42:07] *** Joins: pako8128 (~pako8128@dynamic-046-114-038-243.46.114.pool.telefonica.de)
[16:44:05] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:44:25] *** Joins: goldfish (~goldfish@user/goldfish)
[16:45:03] *** Joins: jjido (~Denis@94.4.149.217)
[16:45:30] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[16:48:06] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:52:27] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[16:54:50] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:56:14] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[16:57:16] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:12:31] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[17:14:07] <Rudde> siXy: When you say distro support channel, do you mean the distro of the host or the underlying distro of the container? Like bullseye?
[17:16:24] *** Joins: blacked (~blacked@user/blacked)
[17:16:59] <siXy> No. I mean whatever OS you are currently running on your machine,
[17:17:22] *** Quits: analogsalad (~analogsal@user/analogsalad) (Read error: Connection reset by peer)
[17:18:32] *** Joins: analogsalad (~analogsal@user/analogsalad)
[17:20:41] *** Quits: analogsalad (~analogsal@user/analogsalad) (Read error: Connection reset by peer)
[17:22:02] *** Joins: analogsalad (~analogsal@user/analogsalad)
[17:26:15] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:26:31] <blacked> There is only one and it is `GNU/linux` :)
[17:29:16] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:30:51] *** Joins: bluedust (~bluedust@103.165.167.221)
[17:32:55] <dostoyevsky2> When I start my server it's loading a bunch of data, which makes the memory grow to 500M... and after that my cpu is like 20% for the next 20mins where the GC seems to compact the heap down by one 1M/s until it's reached 100M
[17:33:08] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[17:33:32] *** Joins: treeford (~charleste@user/treeford)
[17:35:57] *** Quits: aLeSD (~aLeSD@91.126.33.194) (Ping timeout: 240 seconds)
[17:38:36] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[17:39:21] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:40:48] <Yawhatnever> dostoyevsky2: that sounds kind of similar to an issue Twitch wrote a blog post about: https://blog.twitch.tv/en/2019/04/10/go-memory-ballast-how-i-learnt-to-stop-worrying-and-love-the-heap/
[17:40:49] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[17:43:08] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[17:43:09] *** Joins: arkurious (~arkurious@user/arkurious)
[17:45:28] <dostoyevsky2> Yawhatnever: couldn't they just set GOGC to a higher value?  That would have a similar effect to the ballast variable, no?
[17:45:50] <Yawhatnever> That's answered in the blog post
[17:45:51] *** Joins: treeford (~charleste@user/treeford)
[17:46:46] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[17:47:23] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:47:30] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[17:48:26] <dostoyevsky2> Oh, so GOGC=100 means that the heap can grow by 100% in size before the gc will be triggered... but not sure when the initial size is determined... with the ballast var is seems to suggest that the initial size is determined after alloocating that placeholder, no?
[17:48:53] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[17:50:21] <dostoyevsky2> also, I have a lot of large strings on my heap, I wonder how the GC can shrink the heap by 1m/s... there are some strings that are a couple of 10Ms in size....
[17:52:18] <Yawhatnever> No idea. I don't even know if the blog post is talking about the same thing you were, I just thought it sounded similar
[17:56:39] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[17:56:50] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:59:55] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:03:33] *** Joins: Compy (~compy@user/compy)
[18:17:19] *** Joins: chameleon (~chameleon@62.ip-51-89-164.eu)
[18:18:12] *** Joins: phylaz (~phylaz@82.51-174-55.customer.lyse.net)
[18:20:22] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[18:20:36] *** Joins: kinlo (~peter@user/kinlo)
[18:25:33] *** Joins: aLeSD (~aLeSD@91.126.33.194)
[18:27:30] *** Quits: eggsampler (~ur@s.id-rsa.pub) (Ping timeout: 260 seconds)
[18:28:15] *** Joins: eggsampler (~ur@s.id-rsa.pub)
[18:31:08] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 256 seconds)
[18:31:47] *** Joins: alyx (~alyx@173.30.132.213)
[18:32:30] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[18:35:43] *** Quits: Atlas (~atlas@user/atlas) (Quit: ZNC - https://znc.in)
[18:36:22] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[18:36:34] *** Joins: Atlas (~atlas@user/atlas)
[18:37:58] *** Joins: treeford (~charleste@user/treeford)
[18:41:04] *** Joins: moog_ (~moog@107.77.244.141)
[18:43:36] *** Quits: moog (~moog@107.77.244.141) (Ping timeout: 256 seconds)
[18:46:26] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[18:48:14] *** Joins: bluedust_ (~bluedust@61.3.164.166)
[18:49:34] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[18:50:57] *** Quits: bluedust (~bluedust@103.165.167.221) (Ping timeout: 240 seconds)
[18:53:57] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[19:01:45] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[19:09:32] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[19:10:45] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:11:00] *** Joins: Scarecr0- (scarecr0w@user/scarecr0w)
[19:11:08] *** Joins: pyzozord (pyzozord@user/pyzozord)
[19:11:30] *** Quits: Scarecr0- (scarecr0w@user/scarecr0w) (Remote host closed the connection)
[19:14:02] *** Joins: crashrep (~crashrep@user/crashrep)
[19:16:15] <pyzozord> hey, I'm wondering what are the differences between The Go Programming Language, Get Programming with Go, Go Programming Blueprints, and all the other officially recommended books
[19:16:45] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[19:22:13] <seebs> "officially" seems like a strong claim. i've only heard of the first one, and that's the one I'd have recommended by default.
[19:22:41] <pyzozord> https://go.dev/learn the "features books" section
[19:22:51] <pyzozord> featured*
[19:23:54] <connor_k> pyzozord, I personally haven't read all of those books, but I learned Go from "The Go Programming Language" and thought it was excellent. If I were you, I'd either look up reviews or get your hands on the table of contents to see which book provides the coverage you want.
[19:25:33] <seebs> i mean, kernighan has some credibility as a programming book writer. i haven't read things by the other people, although Roger Peppé is at least around in go community stuff
[19:25:50] <pyzozord> The Go Programming Language is a bit older now, I want to go with this one since it's written by Kernighan, but I'm worried this book is out of date now
[19:26:06] <seebs> go doesn't change fast
[19:26:20] <seebs> the only out-of-date it would meaningfully have would be not covering generics, which are only gonna show up in a release "soon"
[19:26:57] <siXy> Error handling and modules too, depending on when it was last updated.
[19:27:23] <siXy> But there's good guides on both of those topics on the go.dev site, so that shouldn't be a deal breaker.
[19:29:38] *** Quits: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Killed (zinc.libera.chat (Nickname regained by services)))
[19:30:03] *** Joins: Guest5916 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[19:30:23] *** Quits: Guest5916 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Client Quit)
[19:33:37] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[19:36:20] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[19:36:26] <pyzozord> Guides? can you link to one by example?
[19:36:57] *** Joins: Guest5916 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[19:38:44] *** Joins: admin123 (~harrymore@47.23.53.26)
[19:39:14] *** Joins: jespada (~jespada@85.255.234.190)
[19:44:54] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:45:28] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[19:48:18] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Read error: Connection reset by peer)
[19:48:39] *** Joins: hobo (~hobo@69.218.33.204)
[19:49:44] *** Quits: hobo (~hobo@69.218.33.204) (Client Quit)
[19:49:53] *** Joins: andlabs (~andlabs@70.107.171.168)
[19:50:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[19:53:28] *** Joins: hobo (~hobo@69.218.33.204)
[19:55:58] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[19:56:24] *** Quits: blacked (~blacked@user/blacked) (Quit: Client closed)
[19:57:12] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:57:50] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Ping timeout: 256 seconds)
[19:59:15] *** Quits: DaPinkOne (~Dap@user/dap) (Ping timeout: 256 seconds)
[20:00:20] <fizzie> The one I know about error handling is the "Working with Errors in Go 1.13" blog post, https://go.dev/blog/go1.13-errors -- and for modules, there's a bunch of articles under the "Developing modules" heading at https://go.dev/doc/#developing-modules
[20:02:46] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[20:03:25] <fizzie> (I've only lightly skimmed gopl at the office, but it didn't seem all that outdated, except for chapter 10 -- "Packages and the Go Tool" -- which is where predating modules is most visible.)
[20:03:47] *** Joins: DaPinkOne (~Dap@user/dap)
[20:04:24] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:05:52] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[20:10:58] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Ping timeout: 272 seconds)
[20:11:36] *** Quits: DaPinkOne (~Dap@user/dap) (Ping timeout: 272 seconds)
[20:15:19] *** Joins: dalek_caan (~Thunderbi@109.252.124.86)
[20:15:37] *** Joins: blacked (~blacked@user/blacked)
[20:15:49] *** Quits: blacked (~blacked@user/blacked) (Client Quit)
[20:17:06] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[20:17:38] *** Joins: DaPinkOne (~Dap@user/dap)
[20:23:41] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:25:17] *** Joins: bluedust (~bluedust@89.45.90.217)
[20:25:27] *** Quits: bluedust_ (~bluedust@61.3.164.166) (Read error: Connection reset by peer)
[20:26:02] *** Joins: bluedust_ (~bluedust@61.3.164.166)
[20:26:44] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Ping timeout: 256 seconds)
[20:26:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[20:27:52] *** Joins: blacked (~blacked@user/blacked)
[20:28:07] *** Joins: bkicher_ (~bkircher@2001:a61:246d:f401:9d17:d248:7628:4233)
[20:28:14] *** Quits: hobo (~hobo@69.218.33.204) (Read error: Connection reset by peer)
[20:28:26] *** Quits: DaPinkOne (~Dap@user/dap) (Ping timeout: 256 seconds)
[20:28:39] *** Joins: Dap (~Dap@user/dap)
[20:28:42] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[20:28:48] *** Joins: bluedus__ (~bluedust@89.46.114.243)
[20:29:06] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[20:29:58] *** Quits: bluedust (~bluedust@89.45.90.217) (Ping timeout: 272 seconds)
[20:30:23] *** Quits: bkircher (~bkircher@2001:a61:246d:f401:4760:9a66:af72:3722) (Ping timeout: 250 seconds)
[20:31:24] *** Quits: dayimproper (amit@2a01:7e00::f03c:91ff:fe08:f7b7) (Ping timeout: 240 seconds)
[20:32:41] *** Quits: bluedust_ (~bluedust@61.3.164.166) (Ping timeout: 256 seconds)
[20:33:00] *** Quits: mmfood (~mmfood@82.118.29.133) (Ping timeout: 240 seconds)
[20:34:26] <jchase> Has anyone run into issues where your Gerrit account uses your gmail without a dot? I just made a PR and the link between my github/Gerrit isn't working due to the dot
[20:34:32] *** Quits: aLeSD (~aLeSD@91.126.33.194) (Remote host closed the connection)
[20:35:18] <siXy> jchase: as in it ignores the dot between foo.bar in foo.bar@gmail.com?
[20:35:59] <siXy> If so, that's probably WAI: gmail ignores dots in email addresses.
[20:36:12] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[20:36:40] <jchase> siXy: Gerrit lists the author as jeremy.chase@gmail.com but my account is jeremychase@gmail.com. So if I click 'Author' it says my account is not found: https://go-review.googlesource.com/c/website/+/387314#message-86873114277e0f20ae3182e9ef20c5385f32a269
[20:37:27] <siXy> Yeah, so that's it then - it's well documented that gmail ignores the dot. As far as gmail is concerned your real email address is jeremychase@gmail.com.
[20:38:07] <jchase> Right. So my issue is that I signed the CLA with jeremychase@gmail.com, according to Gerrit
[20:40:15] *** Joins: mmfood (~mmfood@82.118.29.193)
[20:40:21] <siXy> Can you make a note in your PR that this is the case, and link to the correct place?
[20:41:02] <jchase> I can comment on the GitHub PR, but not in Gerrit
[20:42:20] *** Joins: andlabs (~andlabs@172.102.12.188)
[20:42:39] *** Quits: henry40408 (~henry4040@175.181.177.116) (Ping timeout: 272 seconds)
[20:43:13] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895)
[20:43:31] <siXy> Well the alternative would be to ignore the github bit completely, and just use the gerrit-only workflow
[20:43:41] <siXy> I can find some docs on how to do that, sec
[20:43:55] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Ping timeout: 272 seconds)
[20:44:28] <siXy> Here: https://go.dev/doc/contribute - see the "Sending a change via Gerrit" section.
[20:44:52] <siXy> You should be able to get all the gerrit stuff working properly by using your email address w/o the dot
[20:44:58] *** Joins: dayimproper (amit@2a01:7e00::f03c:91ff:fe08:f7b7)
[20:45:09] *** Quits: Dap (~Dap@user/dap) (Ping timeout: 256 seconds)
[20:45:13] <jchase> I don't think that will resolve the issue. My problem is that Gerrit thinks my email is jeremychase and not jeremy.chase
[20:45:25] <siXy> Because that _is_ your email address.
[20:45:30] *** Joins: bluedust (~bluedust@61.3.164.166)
[20:45:44] <jchase> Indeed. the issue seems that Gerrit does not ignore the .
[20:46:36] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895) (Client Quit)
[20:47:18] *** Quits: blacked (~blacked@user/blacked) (Quit: Client closed)
[20:47:45] <siXy> Perhaps I'm not understanding your issue here. Disregarding github entirely - what's stopping you from creating an account that will allow you to log into gerrit?
[20:48:13] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[20:48:37] *** Quits: mmfood (~mmfood@82.118.29.193) (Ping timeout: 240 seconds)
[20:48:44] *** Joins: DaPinkOne (~Dap@user/dap)
[20:49:36] *** Quits: bluedus__ (~bluedust@89.46.114.243) (Ping timeout: 272 seconds)
[20:49:50] *** Quits: mweckbecker (~matthias@weckbecker.name) (Ping timeout: 260 seconds)
[20:49:51] <jchase> Nothing, if I want to use jeremychase@gmail.com in my commit log. I want to use jeremy.chase@gmail.com
[20:52:22] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[20:52:25] *** Joins: bluedust_ (~bluedust@static-198-54-134-121.cust.tzulo.com)
[20:52:53] <siXy> It sounds like it won't let you do that. You could try filing a bug here: https://gerrit-review.googlesource.com/q/status:open+-is:wip but I'm not sure how persuasive the "I want to have dots that don't do anything in my email address" will turn out to be. YMMV.
[20:53:03] <analogsalad> you are aware that dots don't make a difference in your email?
[20:54:17] <seebs> they don't with gmail specifically, i think
[20:54:28] *** Joins: mattfoxxx (~mattfoxxx@200116b822640300aca7387ac9215c19.dip.versatel-1u1.de)
[20:55:15] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[20:55:19] <analogsalad> yeah
[20:55:28] <siXy> The gmail feature to ignore dots is intended to mean that if people accidentally add them when they shouldn't that's not a problem. The intention is definitely not for you to use them like this - this is just one of several corner cases where you need to use your *actual* email, and not add random dots.
[20:55:37] *** Quits: bluedust (~bluedust@61.3.164.166) (Ping timeout: 240 seconds)
[20:55:41] *** Joins: mmfood (~mmfood@82.118.29.45)
[20:56:18] *** Joins: ThatOtherGuy (~LogicAsid@user/logicaside)
[20:56:27] *** Joins: mweckbecker (~matthias@weckbecker.name)
[20:56:28] <jchase> If you look at https://github.com/golang/go/blob/master/CONTRIBUTORS there are many people using dots to make the email more clear to human users
[20:56:31] <analogsalad> So the feature works precisely when the dots are used accidentally?
[20:56:34] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Ping timeout: 272 seconds)
[20:56:37] *** Quits: DaPinkOne (~Dap@user/dap) (Ping timeout: 240 seconds)
[20:57:14] *** ThatOtherGuy is now known as LogicAside
[20:57:20] *** Quits: ejjfunky2 (~ejjfunky@125.164.19.196) (Ping timeout: 256 seconds)
[20:57:40] <siXy> I'm extremely unpersuaded that your additional dot makes anything clearer to anyone. But anyway, you know what the issue is now.
[20:57:49] *** Joins: DaPinkOne (~Dap@user/dap)
[20:58:04] *** Joins: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com)
[20:58:43] <siXy> analogsalad: The feature works when people send email and accidentally add dots. It doesn't mean you can add a million dots to your oauth2 uid and expect that to actually, y'know, *work*.
[20:58:47] *** Quits: andlabs (~andlabs@172.102.12.188) (Read error: Connection reset by peer)
[20:59:11] *** Joins: andlabs (~andlabs@2605:ef80:8097:621c:1839:898a:8f77:203a)
[20:59:33] <analogsalad> siXy: Who said add a million dots? You can add a dot as a separator character with no issues.
[20:59:52] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[21:00:07] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:00:11] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[21:00:46] *** Quits: mmfood (~mmfood@82.118.29.45) (Ping timeout: 245 seconds)
[21:02:54] *** ruel is now known as lvlinux
[21:05:08] *** Joins: bluedust (~bluedust@61.3.164.166)
[21:06:50] *** Joins: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com)
[21:08:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[21:08:40] *** Quits: bluedust_ (~bluedust@static-198-54-134-121.cust.tzulo.com) (Ping timeout: 256 seconds)
[21:08:59] <jchase> Look at this person, their account is fine with the dot: https://go-review.googlesource.com/q/owner:adam.kisala%2540gmail.com
[21:09:33] *** Joins: pedr0 (~pedr0@cpc151485-finc21-2-0-cust173.4-2.cable.virginm.net)
[21:09:56] *** Quits: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com) (Read error: Connection reset by peer)
[21:10:25] <jchase> I think the issue is that I can't change my Gerrit email, add the dot version as an identity. Or perhaps there is a trick to get it to create a dot account
[21:15:11] *** Joins: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com)
[21:15:57] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[21:18:10] *** Quits: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com) (Read error: Connection reset by peer)
[21:20:45] *** Joins: andlabs_ (~andlabs@2605:ef80:8097:621c:552:8dc9:5d47:30d2)
[21:21:40] *** Quits: analogsalad (~analogsal@user/analogsalad) (Quit: bye)
[21:22:08] *** Joins: analogsalad (~analogsal@user/analogsalad)
[21:22:27] *** Joins: treeford (~charleste@user/treeford)
[21:23:15] *** Joins: andlabs__ (~andlabs@2605:ef80:8097:621c:6508:29dc:f313:807)
[21:23:27] *** Joins: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com)
[21:24:06] *** Quits: andlabs (~andlabs@2605:ef80:8097:621c:1839:898a:8f77:203a) (Ping timeout: 245 seconds)
[21:25:24] *** Joins: andlabs (~andlabs@172.102.12.188)
[21:26:37] *** Quits: andlabs_ (~andlabs@2605:ef80:8097:621c:552:8dc9:5d47:30d2) (Ping timeout: 240 seconds)
[21:28:17] *** Quits: andlabs__ (~andlabs@2605:ef80:8097:621c:6508:29dc:f313:807) (Ping timeout: 240 seconds)
[21:29:02] *** Quits: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com) (Ping timeout: 240 seconds)
[21:30:51] *** Joins: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com)
[21:30:58] *** Quits: andlabs (~andlabs@172.102.12.188) (Read error: Connection reset by peer)
[21:31:23] *** Joins: andlabs (~andlabs@2605:ef80:8097:621c:286f:a986:b492:8859)
[21:33:21] *** Joins: andlabs_ (~andlabs@2605:ef80:8097:621c:8837:29a8:5040:97d9)
[21:35:57] *** Quits: Yawhatnever (~ywn@ip-210.dhcp7.dyn.enventis.net) (Ping timeout: 240 seconds)
[21:36:04] *** Quits: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com) (Ping timeout: 250 seconds)
[21:36:17] *** Quits: andlabs (~andlabs@2605:ef80:8097:621c:286f:a986:b492:8859) (Ping timeout: 240 seconds)
[21:37:06] *** Joins: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com)
[21:39:17] *** Quits: andlabs_ (~andlabs@2605:ef80:8097:621c:8837:29a8:5040:97d9) (Ping timeout: 240 seconds)
[21:39:52] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[21:40:41] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[21:49:00] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[21:50:32] *** Quits: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com) (Read error: Connection reset by peer)
[21:50:47] *** Joins: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com)
[21:53:26] *** Quits: __alex (~alex@95.91.226.215) (Ping timeout: 256 seconds)
[21:54:24] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[22:00:41] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:03:29] *** Joins: Midjak (~Midjak@82.66.147.146)
[22:04:15] *** Quits: bkicher_ (~bkircher@2001:a61:246d:f401:9d17:d248:7628:4233) (Ping timeout: 256 seconds)
[22:08:03] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:c1e1:3103:f7d8:8b84)
[22:11:44] *** Joins: crashrep (~crashrep@user/crashrep)
[22:12:54] *** Quits: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com) (Ping timeout: 260 seconds)
[22:13:22] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:14:18] *** Joins: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com)
[22:15:54] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[22:19:17] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[22:21:45] *** Quits: pedr0 (~pedr0@cpc151485-finc21-2-0-cust173.4-2.cable.virginm.net) (Ping timeout: 250 seconds)
[22:22:31] *** Joins: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it)
[22:27:38] *** Joins: Compy_ (~compy@user/compy)
[22:28:36] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:30:04] *** Quits: jespada (~jespada@85.255.234.190) (Read error: Connection reset by peer)
[22:31:07] *** Quits: Compy (~compy@user/compy) (Ping timeout: 256 seconds)
[22:31:15] *** Compy_ is now known as Compy
[22:34:50] *** Quits: dalek_caan (~Thunderbi@109.252.124.86) (Quit: dalek_caan)
[22:41:12] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[22:41:35] *** Quits: admin123 (~harrymore@47.23.53.26) (Ping timeout: 252 seconds)
[22:46:45] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:4939:5e11:de52:5ed3) (Quit: dingdreher)
[22:48:03] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 272 seconds)
[22:52:55] *** Joins: tane (~tane@user/tane)
[23:01:16] *** Joins: bkicher_ (~bkircher@2001:a61:246d:f401:9d17:d248:7628:4233)
[23:01:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:04:52] *** Joins: crashrep (~crashrep@user/crashrep)
[23:06:21] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[23:07:01] *** imm__ is now known as imm_
[23:10:32] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 250 seconds)
[23:10:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:12:51] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 245 seconds)
[23:13:22] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[23:14:38] *** Quits: pako8128 (~pako8128@dynamic-046-114-038-243.46.114.pool.telefonica.de) (Ping timeout: 272 seconds)
[23:19:13] *** Joins: treeford (~charleste@user/treeford)
[23:21:12] *** Joins: beholders_eye (~weechat@2804:1b3:70c1:47ce:20e3:9772:6daa:47e8)
[23:26:18] *** Joins: crashrep (~crashrep@user/crashrep)
[23:27:21] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:28:01] *** Quits: dr0n (~nabromov@176.26.119.61) (Quit: WeeChat 3.3)
[23:28:43] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[23:32:56] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:33:23] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:34:34] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[23:41:44] *** Quits: thatcher (~thatcher@91.110.109.236) (Ping timeout: 250 seconds)
[23:42:35] *** Joins: thatcher (~thatcher@91.110.54.67)
[23:43:09] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:44:06] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[23:44:32] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[23:45:12] *** Quits: bkicher_ (~bkircher@2001:a61:246d:f401:9d17:d248:7628:4233) (Ping timeout: 250 seconds)
[23:46:30] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[23:47:00] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:48:45] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[23:54:12] *** Quits: mmfood (~mmfood@81-229-169-126-no92.tbcn.telia.com) (Ping timeout: 240 seconds)
[23:59:24] <Tv_> Today's become a better software developer resource: https://dgryski.medium.com/consistent-hashing-algorithmic-tradeoffs-ef6b8e2fcae8
[23:59:44] <Tv_> i am in awe of the distillation of knowledge there-in
