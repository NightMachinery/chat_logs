[00:00:05] <sheetjs> the spec says its implementation-dependent, but at least put in a nontrivial amount of effort
[00:00:12] *** Joins: PowaBanga (~PowaBanga@user/powabanga)
[00:00:16] <stenno> parseInt-like magicks
[00:00:46] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 245 seconds)
[00:00:47] *** Quits: nb-ben (~ben@user/nb-ben) (Remote host closed the connection)
[00:00:57] <sheetjs> n> new Date("Mays Landing NJ 08330")
[00:00:58] <jellobot> (okay) 8330-05-01T00:00:00.000Z
[00:01:19] <sheetjs> it sees the "May" and assumes the date is in may of the year 8330
[00:01:39] <blueagain> that's kind of cool
[00:01:47] <stenno> you can do really silly stuff with that
[00:02:11] <sheetjs> tried to write a regex to match the forms that Excel accepts for dates
[00:02:24] <sheetjs> ... over 5000 characters :(
[00:02:32] <stenno> n> new Date("may the fourth")
[00:02:33] <jellobot> (okay) Invalid Date
[00:02:39] *** Joins: ttys000 (~ttys000@user/ttys000)
[00:03:11] <blueagain> sheetjs: not sure that's the intended use of regexps
[00:03:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:04:02] <sheetjs> yacc seemed like overkill for this
[00:04:29] <stenno> is that why you mentioned heregexp the other day?
[00:04:31] <blueagain> yacc is God's given to man
[00:04:36] <blueagain> gift*
[00:04:36] <stenno> whatsitcalled
[00:04:43] <sheetjs> yacc -> bison -> jison
[00:04:44] *** Joins: jazzy (~jaziz@user/jaziz)
[00:04:45] <stenno> heregex
[00:04:55] <sheetjs> yeah coffeescript heregexes are great
[00:05:07] <sheetjs> its like perl's /x mode
[00:05:09] <stenno> the name is so great
[00:05:28] <sheetjs> yeah it's based on heredocs
[00:05:35] <stenno> yep
[00:05:56] *** Joins: ben_ (~ben@135.125.147.53)
[00:07:01] *** Joins: suss` (~user@user/suss)
[00:07:03] <ezakimak> well, it's in the registry: https://npm.io/package/systeminformation-enhanced
[00:07:11] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[00:08:02] <sheetjs> ezakimak: what registry?
[00:08:17] <systemfault> What is npm.io anyway? :/
[00:08:18] <sheetjs> https://www.npmjs.com/package/systeminformation-enhanced is the official registry
[00:08:24] <sheetjs> and that link ... 404s
[00:08:37] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[00:08:37] *** Quits: suss (~user@user/suss) (Ping timeout: 240 seconds)
[00:08:48] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (Quit: baakeydow)
[00:11:36] *** Joins: mexen (uid495612@user/mexen)
[00:12:00] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[00:13:20] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:14:14] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[00:15:24] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:17:09] <blueagain> sheetjs: heregex sounds like a d&d weapon
[00:17:32] <sheetjs> https://coffeescript-cookbook.github.io/chapters/regular_expressions/heregexes
[00:17:36] <sheetjs> OHHHH that discussion
[00:17:45] <sheetjs> is the plural of heregex "heregexes" or "heregices" ?
[00:17:51] <stenno> when you first said the name i thought you made a joke
[00:18:03] <blueagain> I thought you play d&d
[00:18:41] *** Joins: summersault (~summersau@179.221.251.36)
[00:20:28] <stenno> does coffeescript have named capture groups?
[00:20:29] <sheetjs> we could have had readable regular expressions, instead we have pipelines
[00:20:59] *** Quits: magga (magga@ti0036a400-3577.bb.online.no) (Remote host closed the connection)
[00:21:47] <substructure> ljharb: False positives are a large concern. I consider the F1 score to be a key metric for the success of this project. Right now the score is very, very, very bad and it does bring a tear to my eye. It is my third largest concern. Do you think it is possible for the community to push for determinism or is that too pie in the sky?
[00:21:47] <substructure> "i won't allow that it can be done, because the nature of javascript permanently prevents it from being done." What specifically prevents this? Can you point me towards resources that go into depth on the issues?
[00:21:48] <substructure> I will need to think more about handling other version control systems. I would assume users would mirror their repos to github/gitlab if a small allowlist was created. Similar to how golang handles their dependencies. Right now I don't see npm adding this requirement.
[00:21:48] <substructure> Existing packages present an interesting set of issues. It most likely is the case that the dependency graph contains roots that terminate with very early package versions. Bootstrapping builds has turned into computer archaeology.
[00:22:35] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[00:22:45] *** Joins: bulletsquid (~bulletsqu@user/bulletsquid)
[00:23:00] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[00:24:14] *** Joins: crashrep (~crashrep@user/crashrep)
[00:25:10] <ljharb> substructure: determinism in this way can be improved but never reached.
[00:25:36] <ljharb> substructure: by "the nature of javascript" i mean that there's no way to look at all javascript and identify whether it's deterministic or not. that's P=NP hard.
[00:25:48] <ljharb> substructure: and, encouraging mirrors would not be good for any ecosystem :-)
[00:26:12] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 240 seconds)
[00:26:19] <sheetjs> we could have had readable regular expressions, instead we have pipelines
[00:26:22] <sheetjs> err
[00:26:30] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[00:26:31] <sheetjs> "P=NP hard" is just "NP-hard"
[00:26:53] <sheetjs> P is a subset of NP (whether it is strict is the crux of the P=NP question)
[00:27:00] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[00:27:56] *** Quits: D4mned (~D1mned@212.101.253.100) (Ping timeout: 256 seconds)
[00:28:22] <blueagain> this discussion might be a bit over my head, but in what way is the security of the npm repo different from than of any other repo like pacman?
[00:29:09] <sheetjs> pacman isn't a repo
[00:29:20] <blueagain> I meant pacman's repos, the Arch repos
[00:29:29] <sheetjs> right, there
[00:29:53] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[00:30:10] <sheetjs> ultimately its a trust issue through and through
[00:30:13] <jaawerth> pacman's repos are maintained and audited
[00:30:23] <jaawerth> the AUR, on the other hand, is about as risky of NPM
[00:30:29] <jaawerth> as npm, rather
[00:30:50] <blueagain> fair enough, then npm vs. aur. my point was this isn't a discussion about npm and/or js
[00:30:59] <jaawerth> except it's easier to manually audit the aur becausee you have less in the way of fractal dependencies
[00:31:09] <substructure> ljharb: I agree that looking at the javascript won't work, but applying the techniques used by other ecosystems I think we can. The typically approach is to build the package in a variety of environments and check for differences in the output. If they are bit for bit identical then they are sufficiently deterministic.
[00:31:31] *** Joins: D4mned (~D1mned@212.101.253.100)
[00:31:42] <blueagain> I could imagine a js package manager where some core packages are maintained and audited, and then there's an aur-like open-for-all marketplace
[00:31:48] <stenno> n> '23'.match(/(?:(?<foo>23))/).groups.foo
[00:31:49] <jellobot> (okay) '23'
[00:31:53] <stenno> ^ is that a bug
[00:31:54] <blueagain> but I don't think if that would improve much
[00:32:08] <Alexendoo> stenno: Seems fine to me
[00:32:13] <jaawerth> which is to say, npm is really no different than any other land userland package manager - ALL of them are risky. it's just that npm's dep tree tends to have more to it, which means it's more work to verify everything yourself
[00:32:44] <jaawerth> it's one downside of the lots-of-tiny-modules approach
[00:32:44] <stenno> so i can still 'capture' non-capturing groups with named capture groups
[00:32:53] <jaawerth> (there are also upsides, of course)
[00:33:08] <blueagain> jaawerth: in some way, I consider node's core modules the 'maintained and audited' part of the ecosystem
[00:33:18] <Alexendoo> stenno: The non capturing group isn't capturing anything, you have a second (named) group that is
[00:33:21] <blueagain> so that's the same constellation as with Arch's official repos and the aur
[00:33:28] <substructure> ijharb: "encouraging mirrors would not be good for any ecosystem " Yeah, I'm not exactly aiming to make js more centralized. I'll need to think about this more as it is an issue.
[00:33:45] <stenno> Alexendoo: ooh i get it, that makes sense
[00:33:51] <jaawerth> but tbh most devs in general trust userland packages way too much and it's kind of a miracle it doesn't go horribly and publicy awry more often than it does
[00:34:07] <jaawerth> s/userland packages/userland package managers/
[00:34:08] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[00:34:23] <stenno> (?:(.)) would capture too
[00:34:28] *** Joins: pavonia (~user@user/siracusa)
[00:34:55] <jaawerth> I mean, look at vim plugins. you just add a repo source. most people don't do any versin pinning, too
[00:35:07] <jaawerth> (to like a commit hash etc)
[00:35:17] <Alexendoo> Yeah
[00:36:10] <ljharb> substructure: sure, but given that you can't *also* mandate there be a lockfile even if there is a repo, i just don't think it's a viable approach
[00:36:15] <substructure> blueagain: pacman is working on adding reproducible builds https://wiki.archlinux.org/title/Reproducible_Builds
[00:36:26] <ljharb> pacman is a fundamentally broken package manager, as are most.
[00:36:43] <ljharb> npm, cargo, and nix (and maybe flatpak; haven't looked yet) are the only ones that qualify as a non-broken package manager.
[00:36:47] <jaawerth> pacman is great
[00:36:59] <ljharb> jaawerth: it has a flat pool of deps
[00:37:12] <blueagain> substructure: so that's like rebuilding the packages locally each time/
[00:37:17] <blueagain> ?*
[00:37:27] <jaawerth> that's because it's rolling/evergreen release ¯\_(ツ)_/¯
[00:37:34] <jaawerth> it's great for the usecase it serves
[00:37:40] <ljharb> jaawerth: huh? no i don't mean the cli itself
[00:37:57] <ljharb> jaawerth: i mean for a package manager to be nonbroken, it *must* allow for incompatible versions of the same dep to exist in the tree at the same time
[00:38:10] <jaawerth> ohhh, THAT
[00:38:24] <blueagain> ljharb: that actually exists in pacman. just not under the same package name
[00:38:40] <blueagain> lua, for example, has like 4 different versions that are installable and dependable
[00:38:45] <jaawerth> yeah, it just does it via namespacing
[00:38:51] <jaawerth> by convention
[00:38:52] <ljharb> blueagain: right but it needs to use the same package name to qualify
[00:38:58] <blueagain> ljharb: why?
[00:39:04] <ljharb> blueagain: unless, of course, it's impossible to ever publish breaking changes under the same name. then i'd be ok with it
[00:39:10] *** Quits: D4mned (~D1mned@212.101.253.100) (Read error: Connection reset by peer)
[00:39:24] <ljharb> blueagain: because you'll end up with one package depending on foo v1, and another foo v2, and you'll be forced to upgrade them in sync
[00:39:31] <jaawerth> ljharb: it mostly gets around that via the "provides" keyword
[00:39:34] <ljharb> blueagain: that is the primary cause of "dependency hell" in every ecosystem that works this way
[00:39:37] <ljharb> jaawerth: elaborate?
[00:39:39] <substructure> blueagain: depends on how it is implemented. A user could do all the builds locally if they want extra trust, but alternatively could verify checksums with an external build source.
[00:39:40] <blueagain> in the case of namespaced packages, that is the case. they don't break
[00:39:48] *** Quits: hojasuelta (~hojasuelt@c-76-104-207-0.hsd1.wa.comcast.net) (Remote host closed the connection)
[00:40:08] <jaawerth> ljharb: like when you install a package with deps, there can sometimes be more than one package that will satisfy the requirement, as dettermined by fields in the PKGBUILD
[00:40:15] <blueagain> if something is called lua51 it will stick to the lua51 lines
[00:40:17] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:40:23] *** Quits: _xxoxx (~Junxter@222.95.164.193) (Quit: Leaving)
[00:40:28] <blueagain> line*
[00:40:31] *** Joins: D4mned (~D1mned@212.101.234.123)
[00:40:34] <jaawerth> and when you install it'll have the default option and ask if you want that or one of the list of others
[00:41:04] <jaawerth> it's also useful for, like, forks or alternative implemetnations of things
[00:41:08] *** Quits: ThePhilgrim (~ThePhilgr@151.41.9.171) (Quit: ThePhilgrim)
[00:41:15] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[00:41:15] <jaawerth> like cron, usually you don't want actual cron, but one of the better alternatives
[00:41:28] <blueagain> substructure: ah, cool
[00:41:53] <jaawerth> ljharb: https://wiki.archlinux.org/title/PKGBUILD#provides
[00:41:59] <ljharb> jaawerth: sure but it has to ask
[00:42:01] <ljharb> jaawerth: that's just bower
[00:42:27] <ljharb> jaawerth: in my scenario with "foo", if foo is a transitive dep in both cases, then *nobody should ever know that foo is being used* - it should be an implementation detail.
[00:42:34] <blueagain> ljharb: it *is* often the case in arch, that with new major versions they split it. arch has php for *current* and php7 for php7.
[00:42:38] <ljharb> blueagain: that's not a guarantee tho
[00:42:41] <jaawerth> it asks when there are alternatives
[00:42:51] <ljharb> blueagain: if there's nothing stopping me from breaking lua51 then it's not a quality of the package manager inherently
[00:42:56] <ljharb> jaawerth: right but it asks you to pick *one*, right?
[00:42:58] <Alexendoo> Multiple versions wouldn't be alternatives
[00:43:03] <ljharb> jaawerth: the important criteria is that you end up with two
[00:43:03] <jaawerth> ^
[00:43:06] <ljharb> hm, ok
[00:43:07] <Alexendoo> Packages would depend on the right one
[00:43:17] <ljharb> and pacman would allow both to exist, without end user input?
[00:43:22] <Alexendoo> Yeah
[00:43:23] <jaawerth> you can specify versions, is the point. the main repos just dont' really do that since it's all rolling rolling rolling
[00:43:28] <jaawerth> but it comes up more often in the AUR
[00:43:31] <Alexendoo> This is fine here, wouldn't be for npm ofc
[00:43:58] <Alexendoo> Since they can just update any other package to use whichever version they want
[00:44:24] <blueagain> ljharb: what's stopping you from breaking lua51 is the 'vetting' by the community, the fact only trusted people can publish to the official repos
[00:44:38] <blueagain> but technically, yes, it's not stopped by the package manager
[00:44:46] <blueagain> the same way npm wouldn't stop you from pooping on semver
[00:45:12] <ljharb> blueagain: ok, fair point
[00:45:25] <jaawerth> it's not perfect and the deterministic/reproducible builds thing is a big part of it, but in general I am a big fan of the PKGBUILD format. it is very flexible and transparent, you can open the thing up with little more info than the docs on what the fields do and decent shell scripting knowledge. when things break, its transactions are solid not leaving you in an unrecoverable state for the
[00:45:27] <ljharb> blueagain: does pacman have semver tho?
[00:45:27] <jaawerth> most part, etc
[00:46:38] <blueagain> ljharb: as said, it does respect semver in often splitting major packages into packageN and package
[00:46:41] <blueagain> like php and php7
[00:47:01] <blueagain> that's because, for a time, many packages would still depend on the php7 line
[00:47:21] <blueagain> I imagine that as soon as nothing depends anymore on php7 AND php7 reached EOL they'd remove it
[00:47:21] <substructure> ljharb: "sure, but given that you can't *also* mandate there be a lockfile even if there is a repo, i just don't think it's a viable approach" Going back in time to figure out the package versions is a really difficult problem. There are some neat algorithms that I think can be applied to reduce the search space. The cost is still high, but my
[00:47:22] <substructure> estimations of cost are around $1-3k USD to make a build environment for most companies dependency closures. Not ideal as this is cost prohibitive for many.
[00:47:22] <substructure> My second largest concern is the npm open source terms of use. https://docs.npmjs.com/policies/open-source-terms#conditions number 4
[00:47:23] <substructure> "You may access and use data about the security of Packages, such as vulnerability reports, audit status reports, and supplementary security documentation, only for your own personal or internal business purposes. You may not provide others access to, copies of, or use of npm data about the security of Packages, directly or as part of other
[00:47:23] <substructure> products or services."
[00:47:24] <substructure> This is just vague enough to prevent sharing of build result checksums. IANAL, but I have been looking to hire one to get a concrete answer.
[00:48:26] <ljharb> blueagain: the version number is attached to the name tho
[00:48:37] <ljharb> blueagain: packageN and package don't have any semver relationship
[00:48:59] <ljharb> substructure: what is the term "dependency closure", that's not a thing
[00:49:31] <blueagain> ljharb: maybe, but they are installable side by side, and that's effectively two versions of the same software, depended on by other packages
[00:49:42] <ljharb> substructure: that just means you can't re-distribute the checksums. you can use them for whatever you want
[00:49:53] <ljharb> blueagain: i understand that is a hack to achieve that
[00:49:58] <systemfault> I guess that a term to define all the dependencies of an application, including transitive dependencies... first time I had heard of it yesterday
[00:50:01] <ljharb> blueagain: but "the name" is the software
[00:50:15] <systemfault> But hey, we could call it "beep" instead.
[00:50:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[00:51:50] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[00:52:39] *** Joins: crashrep (~crashrep@user/crashrep)
[00:52:41] <substructure> ljharb: Your dependencies are a directed graph. I'm trying to reference the set of all direct and transitive dependencies of a package. I would call that a closure of that graph, but if there is a preferred term I'll gladly use that.
[00:53:03] <blueagain> ljharb: sure
[00:53:13] <ljharb> substructure: it's just a dependency graph/tree
[00:53:21] *** Joins: Guest3878 (~blahboyba@c-67-161-96-247.hsd1.wa.comcast.net)
[00:53:26] <systemfault> substructure: I believe that the term makes sense, I just never had heard of it before.
[00:53:38] <ljharb> substructure: a graph is already "in its entirety", unless qualified with "sub" or "partial"
[00:54:07] <jaawerth> ljharb: things like versioning in PKGBUILD are more open-ended than that because it has to also be able to handle upstream projects that don't necessarily follow semver themselves. generally the one who writes the pkgbuild can, if desired, tell it how to resolve the target versions at build time. this makes it wasy to create variants of packages such as `-git` for a vcs package or in the case
[00:54:09] <jaawerth> of lua stuff, be able to use the same PKGBUILD to publish the same library for luas 5.1-5.4, etc
[00:54:24] <jaawerth> you're not wrong that there are downsides but in practice I've found it works out quite well
[00:54:27] <ljharb> jaawerth: is pacman === PKGBUILD?
[00:54:28] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:b579:336d:9a22:79d7) (Ping timeout: 250 seconds)
[00:54:32] <substructure> ljharb: Re: sums. Yeah, I can use them, but I find it less than ideal that the cost is so high to rebuild everything. It feels like this information should be shareable.
[00:54:44] <ljharb> substructure: why? you can just point to the npm URL for them
[00:54:50] *** Joins: naan (~Naan@user/naan)
[00:55:59] *** Joins: AJTJ (~AJTJ@d205-234-49-159.yt.northwestel.net)
[00:56:21] <jaawerth> ljharb: it's all part of the arch build system. every arch package was created by a PKGBUILD. it's just that the official repos actually give you prebuilt binaries. the AUR makes use of the same system, only now you're using the PKGBUILDs directly to build the pakge using makepkg rather than just fetching a binary.
[00:56:26] <AJTJ> I'm trying to filter an array, but it looks like .filter() functions differently when it is async
[00:56:28] <AJTJ> https://gist.github.com/AJTJ/b1ae30361ba039287e0672f0c392e70d
[00:56:39] <jaawerth> what's neat is if you, say, find a bug in a package, you can use asp to check out the PKGBUILD and patch it - you coul then submit the patch or just use your locally-patched version until the update hits the officil repos
[00:56:41] <AJTJ> this is not filtering anything out, and I"m wondering what I'm missing
[00:56:45] <jaawerth> it's all very transparent
[00:57:02] <jaawerth> alpine's package system is actually a derivative of it iirc
[00:57:43] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[00:58:02] <jaawerth> its PKGBUILD format is slightly different but there's a tool someone wrote (in fennel!) that automates converting from one format to the other. it works pretty well
[00:58:03] <substructure> ljharb: Maybe, I'm not sure if obscuring the data, but using it to direct user is allowed by the terms. If so that may be an ok stopgap. If we provide the sums then users can verify on their end. Our system doesn't become a trusted entity. Rather, our service just does they difficult work of finding a build formula for a given package.
[00:58:22] <ljharb> zndr[m]: you need to auth with nickserv for non-ops to see what you say; see the last link in the topic. (also please disable that super annoying matrix `[m]` thing)
[00:58:36] <blueagain> though I still think the comparison is slightly off. an Arch installation is basically comparable to *one* npm project, and one that you want to keep updated at all times
[00:58:40] <ljharb> substructure: of course it's allowed. unless you're re-sharing the checksums, it's for internal use
[00:58:50] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[00:58:55] <ljharb> AJTJ: filter only works sync
[00:59:09] <AJTJ> ljharb: huh, what's the alternative?
[00:59:12] <ljharb> AJTJ: if your filter predicate is async, you have to do something really gross
[00:59:30] <blueagain> things like firefox are almost never packages you want several versions of installed side by side, it's most the libs that get depended on
[00:59:41] <blueagain> mostly*
[01:00:02] <ljharb> AJTJ: `Promise.all(items.map(x => predicate(x).then(p => p ? [x] : [])).then(results => results.flat())`, i think?
[01:00:16] <dpuerto> Hi friends! Long time no hang. Sooo... I found myself at another React / JavaScript impasse. I have a sort mechanism on a table and it filters ascending/descending... however, if a new username comes into the table, I am to insert it and ensure that it enters the sort order correctly
[01:00:34] <ljharb> AJTJ: the mapper can also be `async x => (await predicate(x)) ? [x] : []` i suppose
[01:00:40] <dpuerto> any ideas where to start on this to ensure that my data is updated correctly and that the sort happens correctly with the new data?
[01:00:57] <ljharb> blueagain: until you have firefox to browse, and old firefox to e2e test on
[01:00:59] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[01:01:07] <ljharb> blueagain: literally anything you can think of, i can contrive a scenario where you need multiple versions at once :-)
[01:01:19] <AJTJ> ljharb: jesus
[01:01:21] <AJTJ> that's rough
[01:01:26] <ljharb> dpuerto: it's react. you just sort the array, and you make sure your list uses keys properly
[01:01:32] <ljharb> AJTJ: yep, predicates are always sync :-)
[01:01:39] <blueagain> ljharb: imho that's where stuff like flatpak comes in. flatpak installs apps directly in your home, so technically there shouldn't be a problem having several versions alongside. though I have no idea if it's possible
[01:01:43] <AJTJ> ljharb: what is a predicate?
[01:01:53] <ljharb> AJTJ: any function that takes one argument and returns true or false.
[01:02:09] <ljharb> AJTJ: it's a function that answers a question, in other words (i suppose it could take more than one argument, but typically it's one)
[01:03:58] <AJTJ> ljharb: can you clarify that `Promise.all...` example you gave? I'm trying to apply it to that gist I shared, but I'm not totally grokking all the steps
[01:04:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:04:37] <blueagain> ljharb: it also begins the question *how* you would use those different versions. you'd need something like nvm, or something that allows you to start firefox-x and firefox-y alongside. And also, I believe your firefox would have a problem with the profile version, so that would need to be separated too
[01:04:42] <blueagain> begs*
[01:05:28] <blueagain> so effectively you'd need a completely separated home tree
[01:05:40] <blueagain> since most stuff keeps its config in .config
[01:06:14] <blueagain> in such case, I'd just move to different installations inside virtual machines :)
[01:06:47] <substructure> ijharb: "of course it's allowed. unless you're re-sharing the checksums", having multiple systems owned by multiple individuals/organizations is great from a threat mitigation perspective. If we can share results we will have more confidence in our results. This is only a concern if the dang thing works and people want to use it. I'm ok with this
[01:06:47] <substructure> being a problem for now.
[01:06:48] <substructure> What are you thoughts towards viability? Is there something about javascript that makes this impossible? Right now it just looks difficult with willpower and human issues being the main blockers.
[01:07:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:08:25] *** Joins: viva (~viva@2601:2c7:8900:169:6082:5cab:e6c7:91c7)
[01:08:51] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[01:09:30] <viva> hi, i had a question about node.js dependency substitution attacks... a lot of the articles online (specifically the Birsan medium article) discuss the packages.json file on public githubs (so you can identify the dependency packages) BUT! what if you KNOW or can safely assume that a particular
[01:09:45] <viva> private package name is already installed on someones local machine and is thus in their local projects package.json file?
[01:10:02] <blueagain> ljharb: https://docs.flatpak.org/en/latest/tips-and-tricks.html#testing-an-app-with-a-different-runtime
[01:10:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[01:10:20] <viva> so you put that on the npmjs registry w/ a newer version and they update, this will cause the same problem as a new install right?
[01:10:25] <jaawerth> AJTJ: so what it's doing there is mapping the array in order to apply the predicate to the resolved value of each promise using .then, which gives you a resulting promise containing the actual result of the predicate - then it uses Promise.all(predicateResultPromises) to get a promise of all the results so it can do the actual filtering in the end. This would be, effectivey parallel - if your
[01:10:26] <jaawerth> predicate made an http call, for example, it would more or less make all of them at the same time
[01:10:38] <jaawerth> AJTJ: if you needed it to happen in order, you'd do it slightly differently
[01:12:27] <AJTJ> hmm
[01:12:39] <ljharb> blueagain: yes, i agree that when a program uses shared state that's version-dependent, you'd need to manage that too
[01:12:51] <ljharb> blueagain: that's why nvm handles migrating installed global packages
[01:13:05] <ljharb> viva: those attacks are 100% mitigated if you do the following
[01:13:36] <ljharb> viva: 1) all internal packages ONLY use an npm scope that you ALSO squat on publicly. 2) you ONLY use an internal registry, that fetches and caches all public packages, but is configured to NEVER fetch public packages from the internal scope.
[01:13:52] <blueagain> ljharb: I'm not essentially disagreeing, just saying the challenges for an OS package manager are different from npm's challenges
[01:14:00] <ljharb> viva: iow, both are long-time best practices, and following them prevents that entire attack vector.
[01:14:03] <AJTJ> jaawerth: thank you, this is complex, and I'm trying to sort it out
[01:14:04] <ljharb> blueagain: fair
[01:14:19] <ljharb> AJTJ: jaawerth clarified it well :-)
[01:14:42] <ljharb> substructure: you can share results. you don't need the checksum to do that.
[01:14:56] <ljharb> substructure: the checksum is immutably tied to the npm package specifier (name+version)
[01:15:21] <ljharb> lol this seems like an unusually high number of parallel conversations for me to be carrying on at once :-p
[01:15:51] <blueagain> we've stackoverflowed ljharb
[01:16:42] <ljharb> nah, still going
[01:17:07] *** Joins: crashrep (~crashrep@user/crashrep)
[01:18:06] <jaawerth> AJTJ: it's a bit easier to reason through when it's written long-form rather than a one-liner, fwiw
[01:19:01] <jaawerth> I suppos these days you could also do it with an async generator if you wanted to be all fancy
[01:19:41] <jaawerth> but I try to not rely on those unless it's server-side or an app (not a library), since I don't like forcing regenerator dependencies into my libraries
[01:20:05] <sheetjs> !ciu async generator
[01:20:05] <jellobot> sheetjs, Async functions (Edge 15, FF 52, Chrome 55, Opera 42, Safari 11, iOS 11.0-11.2, Android 98) 95.69% https://caniuse.com/async-functions, see also https://caniuse.com/async-clipboard, https://caniuse.com/es6-generators, https://caniuse.com/script-async
[01:20:37] <sheetjs> https://caniuse.com/mdn-javascript_functions_method_definitions_async_generator_methods
[01:20:52] <sheetjs> 94.11% is not bad
[01:21:03] <blueagain> this bot is awesome
[01:21:12] <blueagain> is it free software?
[01:23:05] <ljharb> !about @ blueagain
[01:23:05] <jellobot> blueagain, I'm written entirely in JavaScript using Node.js. Look under the hood on Github: <https://github.com/ljharb/jellobot>
[01:23:14] <ljharb> it's open source software, which is better
[01:24:02] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[01:24:25] <blueagain> I meant free as in libre. just didn't want to get all rms about it :)
[01:24:40] <blueagain> thanks
[01:24:58] <blueagain> oh, you maintain it, cool
[01:25:10] <systemfault> I don't know if there's anything "libre" in the JS world...
[01:25:31] <systemfault> A lot of us believe that copyleft licenses are cancer... so we tend to pick MIT or similar.
[01:25:41] <ljharb> MIT is free enough
[01:25:48] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[01:25:50] <blueagain> I go with bsd-3 usually
[01:25:52] <ljharb> blueagain: to be clear, i didn't create it, i just maintain it now (see the first link in the topic)
[01:25:55] <blueagain> but it's virtually the same
[01:26:11] <ljharb> most companies i've worked at only allow MIT or apache2
[01:26:18] <blueagain> ljharb: oh :(
[01:26:33] <blueagain> wait. oh, now I get the name.
[01:27:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[01:27:35] <blueagain> ljharb: any reason they have against bsd-2 or 3?
[01:27:43] <blueagain> I think it's almost the same
[01:29:00] <banana_> ljharb: "this seems like an unusually high number of parallel conversations for me to be carrying on at once" </JS-Expert-Problems></1st-Word>
[01:29:13] <banana_> aww
[01:29:16] <banana_> World*
[01:29:18] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[01:30:01] <substructure> ljharb: hmmm, maybe we can share this data if we minimize it. I not sure how to go about getting an answer to that question from npm. My hunch is that they will say no if they respond at all.
[01:30:02] <substructure> Do you still believe there is something that makes this impossible for javascript? Sorry for the repeat question, but if someone that worked on the javascript spec committee tells me my project is impossible, I'd like to deeply understand their perspective. What specifically make this impossible. I don't need an answer right now, but I would value
[01:30:02] <substructure> your input.
[01:31:06] <ljharb> substructure: yes. the nature of the language means that you can't enforce determinism in the general sense. you'd have to dramatically restrict the capabilities of the language, with a linter, and that would also dramatically decrease the viability of already-common minification/transpilation/bundling output techniques.
[01:31:26] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:31:45] <zndr[m]> Hello, sorry for noobish question. Is there a way to use "paragraph.match(regex)" in line 3 without calculating it again or without assigning it to a variable?... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/24e72fec50b779052f89034f48b21b4e786a671b)
[01:31:53] <zndr[m]> I hope my message appears now :)
[01:35:23] <blueagain> systemfault: I don't think copyleft is cancer, but I think the rational between desktop and server applications is different
[01:35:32] <blueagain> rationale*
[01:36:22] <systemfault> blueagain: I mostly see it as a reaction to the 90s Microsoft... nothing else.
[01:36:27] <ljharb> yup
[01:37:40] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[01:37:58] *** Quits: viva (~viva@2601:2c7:8900:169:6082:5cab:e6c7:91c7) (Remote host closed the connection)
[01:38:09] <blueagain> I used to care more about gpl and copyleft. I agree they're mostly historical, but I think they had an important role in creating an alternative
[01:38:39] <matsaman> zndr[m]: could use try/catch I suppose, not sure I would
[01:39:31] *** Joins: brentaarnold (~brentaarn@24.112.56.42)
[01:39:57] <systemfault> blueagain: If it wasn't of Linus, RMS would still be working on his magical unicorn kernel as we speak... Linus made GPL popular by GPLing his kernel so he wouldn't have to write his own compiler toolchain and userland utilities.
[01:40:17] <Alexendoo> zndr[m]: Could `paragraph.match(regex)?.length ?? "No capital letters";`
[01:40:29] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:40:30] <systemfault> Timing has been key for Linux... otherwise, BSD could have won.
[01:40:40] <matsaman> that's one way of saying GNU made GPL popular by giving Linus an entire userland already made
[01:40:54] <matsaman> yeah BSD really boned itself
[01:41:02] *** Joins: Guest55 (~Guest55@2a0a-a543-298-0-4dcc-12ed-58e8-31e1.ipv6dyn.netcologne.de)
[01:41:04] <systemfault> AT&T didn't help...
[01:41:20] <matsaman> I mean there was one thing they weren't allowed to say
[01:41:22] <matsaman> and they said it =P
[01:41:33] <systemfault> Heh :/
[01:42:06] <matsaman> someone else probably would've pushed licensing to the same point either way, I bet
[01:42:11] *** Quits: Guest55 (~Guest55@2a0a-a543-298-0-4dcc-12ed-58e8-31e1.ipv6dyn.netcologne.de) (Client Quit)
[01:42:26] <zndr[m]> Alexendoo: Sorry, I don't really understand meaning of this question marks
[01:42:27] <substructure> ljharb: Is your concern limited to the build tools not being deterministic? Other ecosystems have worked to make their build tools deterministic, can that not be done in the js space? See Maven https://maven.apache.org/guides/mini/guide-reproducible-builds.html
[01:42:51] <ljharb> substructure: for an individual tool, certainly. not for the ecosystem as a whole tho.
[01:43:21] <Alexendoo> zndr[m]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator
[01:43:39] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:43:39] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:43:39] *** Joins: wroathe (~wroathe@user/wroathe)
[01:43:39] <systemfault> Reproducible builds in a language without a build step?
[01:43:42] <Alexendoo> I'm not sure I'd do it like that, probably would just put it in a variable
[01:43:42] <ljharb> zndr[m]: please do remove the `[m]` if you can
[01:44:12] <zndr[m]> Alexendoo: oh, thanks, will look in to this
[01:44:27] <zndr[m]> ljharb: is it better now or no change?
[01:45:02] <ljharb> zndr[m]: no change yet. you may need to `/nick` and change it, and if you authed with the [m] one you may need to add it as an alias first
[01:45:48] *** Joins: cotko (~cotko@155.pool85-49-78.dynamic.orange.es)
[01:45:57] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[01:46:10] <matsaman> Alexendoo: lovely variables
[01:46:55] *** Joins: mange (~user@n114-78-12-98.bla3.nsw.optusnet.com.au)
[01:47:05] *** zndr[m] is now known as zender
[01:48:33] <zender> ljharb: how is it now?
[01:48:45] <ljharb> zender: much better, ty
[01:48:54] <zender> Nice
[01:49:54] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[01:50:26] *** Joins: prawnsalad (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk)
[01:51:04] <substructure> ljharb: I agree, there are too many humans to get alignment with. Ok, then it is possible to get a subset of packages to be reproducible, but it will take community effort right? I'm not looking to make every package fit into this square hole, but are there any other reasons this would be impossible in javascript?
[01:51:13] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Client Quit)
[01:52:44] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 272 seconds)
[01:53:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[01:53:56] <substructure> systemfault: build is being used in a more general way. I think of a build as any process that takes source code and yields the package artifacts. It could be that the build is a no-op.
[01:54:38] *** Quits: prawnsal_ (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk) (Ping timeout: 272 seconds)
[01:54:51] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[01:54:52] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[01:56:01] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[02:00:30] <systemfault> It would be difficult, hmm... We would need some way to say "I want package X at version Y downloaded at time Z" for each package and transitive dependency or similar
[02:00:40] <systemfault> I don't know enough to tell, really...
[02:03:14] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:03:51] <ljharb> substructure: standard transpiler output isn't statically analyzeable in the way you need
[02:04:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:04:35] <substructure> Checkout this cool work done in golang on transparency of their module system. https://research.swtch.com/tlog I think we still have issues with trust on first use, but don't quote me on that.
[02:05:19] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[02:05:20] <substructure> ljharb: We don't need static analysis. We just check to see if the files are bit for bit identical. A must easier task.
[02:05:43] *** Quits: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:07:01] *** Joins: trevors (~trevors@user/trevors)
[02:07:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:08:07] <substructure> Here is the html version of David Wheeler's paper on Diverse Double-Compiling (DDC) https://dwheeler.com/trusting-trust/dissertation/html/wheeler-trusting-trust-ddc.html
[02:08:07] <substructure> Applying DDC to the graph is approach I'm pursuing right now.
[02:08:24] <substructure> The dependency graph that is.
[02:08:30] <jaawerth> AJTJ: I actually had an impl of the serial equivalent of async filter kicking it around so I figured I'd drop it here foro you as an example https://replit.com/@jaawerth/filter-async-series
[02:08:57] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[02:09:03] <jaawerth> you could use an async function + for...of loop to do it too, but it's a bit more portable to just use reduce if you want to support older platforms
[02:10:04] <stenno> iterator helpers!..
[02:10:52] <jaawerth> soon!
[02:11:10] <AJTJ> jaawerth: oh thanks!
[02:11:24] <AJTJ> jaawerth: I think this is almost working can you give it an eyeball? https://gist.github.com/AJTJ/b1ae30361ba039287e0672f0c392e70d
[02:11:29] <stenno> i decided that i will seriously look into rxjs in the meantime
[02:11:37] <jaawerth> though uh what's that library, there's a pretty good one already. well, more than one, but I think there's one particularly popular and well-maintained library of iter utils (for both sync and async iterators)
[02:12:10] <stenno> Introduction
[02:12:12] <stenno> RxJS is one of the hottest libraries in web development today.
[02:12:15] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Quit: Leaving)
[02:12:16] <stenno> off to a bad start..
[02:12:18] <jaawerth> lol
[02:12:27] <AJTJ> jaawerth: I'm not sure about line 7, I don't know about that async
[02:12:39] <jaawerth> observables are push-based so you're really just reacting to things, it makes ceertain flow control a bit more unwieldy IME
[02:12:53] <jaawerth> AJTJ: the comment?
[02:13:04] <jaawerth> oh you mean line 8?
[02:13:14] <AJTJ> jaawerth: yea, that console isn't being called yet
[02:13:20] <AJTJ> hmm
[02:13:21] <AJTJ> damn
[02:13:26] <jaawerth> huh?
[02:14:05] <jaawerth> I am not sure how to connect these statements you're making together in order to clarify things
[02:14:13] <systemfault> I know it's unrelated... but if you use the `any` type everywhere in TypeScript...
[02:14:43] <jaawerth> AJTJ: are you asking why I'm doing the Promise.all([prevP, valueOrPromise]) ?
[02:15:00] <jaawerth> or are you saying running that repl.it isn't working for you?
[02:15:17] <AJTJ> I'm running that gist in my project, and it isn't working as I'd like
[02:15:18] <jaawerth> if you run it, it will take about 1s to complete because it's processing the items in series
[02:15:49] <jaawerth> well one thing I don't do in that example is handle rejected promises
[02:15:50] *** Quits: dfinr (~dfinr@user/dfinr) ()
[02:15:59] <jaawerth> in that impl, if any one promise fails it will stop the whole train
[02:16:06] <jaawerth> and you'll ust get a rejection at the end
[02:16:16] <jaawerth> so maybe try adding a .catch to see if that's what's happening
[02:16:48] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[02:17:22] <jaawerth> if you wanted to filter regardless of whether your async predicate succeeds and just treat a rejection as false you could just implement the predicatae with a `.catch(() => false)` in there. that way instead of holding things up, rejected promises would filter themselves out
[02:18:22] <AJTJ> jaawerth: good idea. Currently in my gist line 8 (the console.log) is never being called. Do you know why? https://gist.github.com/AJTJ/b1ae30361ba039287e0672f0c392e70d
[02:21:57] <jaawerth> AJTJ: hard to say without a live example (or at least seeing the calling context)
[02:22:06] <jaawerth> nothing's immediately jumping out at me
[02:24:25] <jaawerth> AJTJ: make sure allEvents is an array and not a promise of an array. that can getcha sometimes. to account for both you could await it, which would unwrap it if it's a promise of an an array or otherwise just give you back the same array
[02:24:29] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Quit: Leaving)
[02:26:47] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[02:29:44] *** naan is now known as Naan
[02:30:01] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:28] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[02:30:36] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:31:45] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[02:32:36] *** Quits: D4mned (~D1mned@212.101.234.123) (Ping timeout: 256 seconds)
[02:33:25] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Client Quit)
[02:33:44] *** Quits: pizdets_ (~pizdets@183.182.111.116) (Ping timeout: 256 seconds)
[02:34:01] *** Joins: D4mned (~D1mned@212.101.234.123)
[02:34:14] *** Joins: pizdets (~pizdets@183.182.111.223)
[02:35:13] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[02:37:16] <jochum> Can someone help me here at line 149: https://www.typescriptlang.org/play?module=1&ssl=149&ssc=1&pln=150&pc=1#code/KYDwDg9gTgLgBDAnmYcAqEDWwB2cC8cAYgK44DGMAlhHgD5wDyARgFbCVwMDOMUVOAOZc43RAFtmEADYBuAFChIsBMlQARYADMBVarQLEylGvTgBtUhX04AuiPMZsOADRHrp2wqXR4AmMBQWgCG5KgAQgIAJgLCAN7ycElwWjgAXO4mtC6JybQAshBkMBlSMsDBrrlJtACqOIXFpRDllTkAvvKK4L4pxjZwVNxWWTgAFMFQghmViACUM1OD3JkDCUlQwDAkUHhIKBBacJPC+GdwAORa-
[02:37:16] <jochum> aYXCp3dyvDXHgZDLOyUE1MzOPOLwiGTDYHHg6zgm22u2OSwAZLDVAcjicCOcLhAQZQ7vIHj4VC9RssAMp8WLfabHP4LGGAla8fhCODgyE7PZqQ401GEC702LY3E9fE3N7cIkSKTScm-f6coFiSQyJm5FnQ-bADkos7c+US-ldPHPYV4IZOXBSykylFA014ZlbVnLEY2clzLgMd6YmAut3E0lCb10d2i8UyF33LryAD0ACpo4lo3BIjgoojUDAIKIUOQqDpgCnyNJgtxuAA6eORxIGvqvPYQADCheLY3ItHpJEo0AyOGAAHc4GMS4OTtxpa78AA+
[02:37:16] <jochum> C2uu1QvBFpMxf1jMeT8HJOAtnC8QZbmCVMKGbt9zdtjtQZcKdcbe3QgS8ffAS9wdpzcNR2PyBML1MIDPcLM5lQeYpKE6ZQIg1ajGW0YVlWBIDOmRCgdAiBjFEwBgNwjBQEhZ6IBkTqmOY9gMIR2QgXhBFGiIZDoTo3ZRNOuQ5v2ACCUBQMEiAlkM7Gcah6GYdhuFgfMcDwo6RpjCEeFzExV5Xiqc7cAuZIyaJA6DoJWE4ch4EluIwRgGM6bOAQk6CFsACSu4PiZWC4HJclPg816zscKnRGS2nCXpEFFqspivjiXQxnGX7RD+6aZhwgHAQAbsE0gkMA0GwYKho1r+ABqSUpWMiXJcAo5Km5Drzl5S4rnAhUpcFDxhZ+iaRWqv5wKAQzUIyd57hQqDSBA5DBAEKbMBBpm4Gljy9PBpi-
[02:37:16] <jochum> gAoiAnVkhN6ToA5ODyRCN7KapVXmXAlkwDZ959fZzjOSF77LL1zAkNIgyCDg0CoN2IDwDB8gnvAVlEgA+uEVkAHLqMDADihhqhyYoKg9WqXLNtAXHAAD8cAwxKy5wBkFx-X9zCVYIePYu+4VwPkkyYJBAwBQTyaxNTphTYju2E2MdOLhSszUmRtq5BzsTmL9APA6DQNg-YhB8ClT5KXAAtCG+cHUZsgidYEe2CGh2i6DYGSaPRehBaVcDSFsv7OG4CuCE+LFjHxXE8dwDsCTrOBG7Qckm+u5irVbhOQxtktwHRuumC57XSNwqBrskq2GNbhih+7NguV0SR28LgMg+DO7y4TACEW3rsEURRJr524G4cSpKUhduAURQ4CUIFR8ADc4PUjTNxkIRty+EfAG33vJN9cCN8Uhjog0TcwMjAj5-TQgFyWYBQBA6Zqk+65j3UM+
[02:37:16] <jochum> T9ytDqEM3dz3n1sr2vG8b2oCjVMkpfl2zftMrXv4NkW3Ds4XHlwEe-aDhLMOEqE4pwd1Ph3Lus8B65E6AKJ4jMDCq3VlATWX9k4ey3PrN2mDiJbQwTYUsWhoDzVCAACzGMg3gGtCb1QjGPfGhMRwWBtG4TWthiKGGInfKsY9rYrEIFjUBjCl6CG4DwjKG5WzwEfprQwlc1qsMXpzDImtqqxzHvRKINl0IgEMCIzmRDog6NAGMMYIBqogHMAABklucVawV1x2y0SYvRBdzgAFoACMxcrwGNiNwcwLjkygGDr7Da-tRFeHvuuOW-CLz31cskfxQhSxgBINwCh4TLbKNiLYRxyQ4lMISe0O+DCeoPmYY4CJwJPgwA4WE6J00VBjwqX1AR-Zqp-TaWEcR+
[02:37:17] <jochum> pJFjyoQEKAJ1eoHkEatDISienFVqaCdR99NHGJCXowg3TbLtJLME3RZiLEHSsbYrkFtHLb0GEcaSyzdFwHcYQbxvj1zrNOr0oJlzQlcJfjM6JCkyq3g2b0hJ64klJEeWM4AaSMlZI+X84A+TTlyxmV-eqEiEEs0OtZaFAAeNA44FFTI2tSNANEQn0TzN4SRqKjqjLspM9aF1pRKkWdIncTzUCEARcuLZ0RdmWJsXYqW+LTl2yhkcGZ1y0S0TdnmC49zCk7WZaC8wXivnJCBVI3cuTGSEHiXMTlyZuX7N5UchxgrznCo1accVxKBBSplT8vAEqSVRFOaqseR4qV9QToTRVtgtnjAKdeNW1CRnQoUW4N10Lgr3zluGllb5mmZUJMQqAYR3VhCxTimlNoCUj1adCwwlLMXYoUf6s5-YzWivhhcB11qojSpHuuGAZD159n-
[02:37:19] <jochum> vNDi0AxgAANU2oAuAAEjiKtEs6YSQMi1nMdoyNnrPCblETtJbVXwuhXGqswRmD0lAhuRsKxWJgCoEqAAkGujdnA17+AABJDwGsuDI8UIBUCdTiMlCCCyfzgLuqgVlxBgAelQb9ZtxC4BgDuvdJsz3N0vdIa91I70PpNgek85QSwDS1hcSDA04AAHVoDSFrQUuBd8hk0NEWMcwH63Afq-T+2F8gk0psxR+nFH6dXgZgOhiAF4gA
[02:37:23] <jochum> ohh thats a long link....
[02:38:14] *** Quits: jumpcutking (uid459573@id-459573.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:38:21] <jochum> I'm trying to get an instance of "MyAbstractClass" from a Map and I don't want to pass MyAbstractClass twice (in this case Api).
[02:38:54] <jochum> In that link you see the most of my Dependency Injection code btw. which I copied from various sources together.
[02:42:42] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[02:43:05] *** Joins: wovixo (~wovixo@128.104.205.49)
[02:43:22] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Quit: WeeChat 3.4)
[02:43:23] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[02:44:19] <systemfault> Find a link shortener or use the built-in one...
[02:45:07] <KevinX> no one can click that link, right?
[02:46:26] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[02:49:52] <jochum> I can, will shorten the link sorry for the mess.
[02:49:54] *** Joins: shailangsa (~shailangs@host109-152-9-189.range109-152.btcentralplus.com)
[02:50:43] <jochum> https://shorturl.at/jmoK5
[02:51:07] *** Joins: audio (~audio@user/audio)
[02:51:36] <jochum> ^ not working :/
[02:51:39] *** Quits: tex (~super@user/dix) (Quit: tex)
[02:52:03] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[02:52:24] <jochum> https://tinyurl.com/mpzxu7yv <-- tested
[02:52:29] *** Joins: mikey_p (uid129477@id-129477.uxbridge.irccloud.com)
[02:53:41] *** Joins: trevors (~trevors@user/trevors)
[02:53:45] <ljharb> oof
[02:54:08] <ljharb> maybe find an irc client that stops you from doing that :-p
[02:54:29] <ljharb> jochum: ok for one, don't use `any` anywhere, use `unknown`
[02:54:52] <ljharb> jochum: what's a "Token"?
[02:55:04] <jochum> Anything valid as "Key"
[02:55:10] <ljharb> right but why those things
[02:55:34] <ljharb> (also, calling something isObject that returns false for functions is very confusing)
[02:56:19] <jochum> Can you have a look at line 149 ?
[02:56:57] <jochum> const myInstanceOfAbstractClass = forceInstance<AbstractClass>(AbstractClass);
[02:57:17] <ljharb> also line 72 is broken once you fix all the anys into unknowns
[02:57:18] <ljharb> looking tho
[02:57:23] <jochum> I want to remove the generic type <AbstractClass>
[02:57:58] <ljharb> line 149 is `export function forceInstance<T>(token: Token): T {`
[02:58:28] <jochum> yes, I wrote that "forceInstance" thing
[02:58:28] <ljharb> do you mean line 169, and you want to avoid saying `Api` twice?
[02:58:34] <jochum> There is the usage
[02:58:37] <jochum> Yes
[02:58:40] <ljharb> k
[02:58:57] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:00:17] *** Quits: niko (~niko@libera/staff/niko) (Ping timeout: 600 seconds)
[03:01:10] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[03:04:12] *** Quits: pmercado (~pmercado@186.107.40.57) (Ping timeout: 240 seconds)
[03:05:02] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:06:02] *** Quits: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[03:07:07] <substructure> ljharb: Thanks for the discussion today. I'm going to move forward with this even though we have disagreements. I hope I didn't come off too strong. This is the first time I've been able to contribute to open source in almost a decade and this seems like a meaningful contribution if successful.
[03:07:24] <ljharb> substructure: good luck, i just don't think it's a viable approach
[03:08:10] <jaawerth> lol I immediately saw the URL noise and knew it was gonna be the typescript sandbox
[03:08:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:08:37] <ljharb> jochum: ok so this code seems like it's doing something very weird
[03:08:42] <ljharb> jochum: why are you caching instances and bindings?
[03:09:10] <jochum> at line 114 are _instances
[03:09:14] <blueagain> substructure: what you are actually creating, a js runtime?
[03:09:20] <ljharb> jochum: in this case, you're passing `Api` which does NOT have a `printHello`, so i don't know how you'd expect TS to know that the instance found is actually an ApiImpl
[03:09:26] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[03:09:48] <jochum> ljharb: it does, see 160 + 163
[03:10:04] <ljharb> jochum: that's ApiImpl that does. Api itself does not.
[03:10:06] <jochum> ljharb: my usecase is to register Implementations as needed
[03:10:10] <ljharb> jochum: and Api is what you're passing into forceInstance.
[03:10:18] <ljharb> jochum: that's not a use case, that's your attempt to solve a use case
[03:10:29] <ljharb> jochum: building a registry of class instances sounds very much like an xy problem
[03:10:31] <ljharb> !xy @ jochum
[03:10:31] <jellobot> jochum, The XY problem: You want to do X, but don't know how. You think you can solve it using Y, but don't know how to do that either. You ask about Y, which is a strange thing to want to do. Just ask about X. See also: http://xyproblem.info/
[03:10:34] <ljharb> this is JS, not C#
[03:11:00] <systemfault> It's a typical DI container.
[03:11:06] <jochum> ljharb: please give more details whats wrong with it?
[03:11:07] <ljharb> right, and DI in javascript is just "function arguments"
[03:11:12] <ljharb> and anything else is wildly unidiomatic JS
[03:11:42] <ljharb> jochum: i have no idea how you'd convey to TS that `Api` maps to `ApiImpl`, and that the returned thing is thus of type `ApiImpl`, without specifying `ApiImpl` anywhere
[03:11:46] <ljharb> * anywhere at the callsite
[03:11:55] <jochum> ljharb: ohh i can explain that
[03:12:00] *** Joins: ferdna (~ferdna@user/ferdna)
[03:12:37] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[03:12:50] <jochum> Line 142 makes an instance of XXImpl when theres no instance of that Abstract Class / Interface
[03:13:18] <jochum> and the very same function returns the "instance" then
[03:13:38] <ljharb> jochum: right but that's far too dynamic for the very naive type system of TS to figure out
[03:14:05] <jochum> ljharb: so no way around supplying the Abstract twice... :/
[03:14:13] <jochum> Would have been nice
[03:15:01] <jochum> ljharb: i use this to share the same code with different usecases ( Electron / Browser )
[03:15:18] <jochum> Both have the same Interface but do very different things at the backend.
[03:15:53] <jochum> I could have done with If's but I don't like If's.
[03:16:34] <ljharb> if's are often a good approach
[03:16:41] <ljharb> jochum: but either way, why have an abstract class? js doesn't have those.
[03:16:57] <jochum> ljharb: typescript does
[03:17:19] <ljharb> jochum: yes but it's fake, it just generates a real instantiable class.
[03:17:30] <ljharb> simply *using* an abstract class suggests a misunderstanding of how inheritance works in JS
[03:17:47] <ljharb> (and TS can't be used properly without understanding JS properly, despite TS not being a superset of JS)
[03:19:01] <jochum> I just like stuff beeing typesafe
[03:19:24] <jochum> Fullstack developer here, most of the work not in TS/JS.
[03:19:31] <systemfault> Just check how the other DI libs are doing it..
[03:19:45] <jochum> systemfault: can you give me a good one?
[03:19:51] <jochum> please
[03:20:03] <jochum> I haven't found a simple one yet.
[03:20:10] *** Joins: hojasuelta (~hojasuelt@50.210.61.206)
[03:20:16] *** Quits: killown (~killown@user/killown) (Quit: Leaving)
[03:20:18] <systemfault> The most widely used one is inversify AFAIK
[03:20:27] <jochum> Thank yoiu
[03:20:29] <ljharb> jochum: right but TS isn't a sound type system, so "typesafe" isn't an actually achievable goal :-)
[03:20:34] <ljharb> at any rate, good luck
[03:20:47] <systemfault> No language is sound...
[03:21:02] <systemfault> We need to stop repeating bullshit someone has written on a blogpost.
[03:21:14] <ljharb> it's still true tho
[03:21:32] <ljharb> and yes, no language is sound. but far too large a percentage of TS users falsely believe that TS actually gives them guaranteed safety
[03:21:56] *** Quits: hojasuelta (~hojasuelt@50.210.61.206) (Remote host closed the connection)
[03:21:57] <jochum> systemfault: inversify sadly uses "reflect-metadata" with experimentalDecorators that stuff is badly supported in the wild
[03:22:49] <jochum> systemfault: it cost me 2 days to remove my @inject decorator i used a lot.
[03:23:48] <jochum> ljharb: no guarteed but better compile time safety.
[03:24:10] <ljharb> jochum: sure. but you can get even better safety with actual runtime checks, linting, and unit tests - all things you need anyways.
[03:24:42] <jochum> ljharb: what about good intellisense ?
[03:25:26] <substructure> blueagain: A collection of components that together validate a commit plus dependencies result in specific build artifacts. There is a horizontally scalable build system, git repo analyzer, transparent data store, and client side validator.
[03:26:08] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[03:26:15] <ljharb> jochum: you get that on normal JS from vscode
[03:26:15] <systemfault> jochum: Then the only way out, I believe, would be to create your own "Token" system with a generic parameter to capture the type... but I'm not sure.
[03:26:29] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[03:26:31] <ljharb> jochum: you can always define .d.ts types to add that feature if you want, but that's just DX, not safety
[03:27:05] <ljharb> substructure: so let's say you come up with a way to validate that a package (that meets constraints) comes from the source code. what do you do with that info?
[03:27:37] <jochum> systemfault: seems i still pass it twice, np at all. Would have been nice once but ok.... :)
[03:27:42] <ljharb> substructure: since npm can't/won't apply those constraints, and the ecosystem already does things that violate them, and the npm cli thus doesn't have a way to check your deps on/before/after install, what's the value prop?
[03:27:44] <jochum> systemfault: ljharb thanks both.
[03:28:54] <ljharb> jochum: srsly tho, if you want type safety you shouldn't use "any" ever
[03:28:56] <ljharb> unknown ftw
[03:29:41] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[03:29:50] <jochum> ljharb: yeah, yeah. For better "safety" I have to, I just don't want to also the Budget doesn't want to.
[03:29:50] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[03:29:56] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[03:30:09] <systemfault> jochum: Generic parameters can be inferred from function parameters.
[03:30:18] <ljharb> jochum: lol the budget?
[03:30:26] <ljharb> jochum: s/any/unknown/g and move on
[03:30:37] <ljharb> jochum: it'll either work, or find bugs
[03:31:21] <jochum> systemfault: inferred sounds like fun.
[03:31:48] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[03:31:56] <systemfault> jochum: forceInstance<T extends Token>(token: T)... but then the problem becomes the return type
[03:32:11] <ljharb> yeah i played with that, and the `infer` keyword, but couldn't get there
[03:33:03] <jochum> systemfault: the problem is the argument "token" is a Type so i get the type of "Type" in the end
[03:33:13] <jochum> not the type of something
[03:33:16] <jochum> I tried that
[03:34:47] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[03:36:14] *** Joins: Naan` (~Naan@user/naan)
[03:36:38] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[03:36:45] *** Joins: trevors (~trevors@user/trevors)
[03:37:56] *** Joins: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net)
[03:39:42] *** Quits: trevors (~trevors@user/trevors) (Client Quit)
[03:39:45] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 250 seconds)
[03:45:51] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[03:50:25] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[03:51:21] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:52:14] <jaawerth> systemfault: just off the topo of my head, languages with at least *some* level of support for both typedefs and dynamic or hybrid checking compared to typescript's 0 support for dynamic: clojure, common lisp (some impls), erlang, elixir, julia, objective-c,   scheme/racket. and I'm not even a big type system person
[03:52:47] <systemfault> And... how is that related to what I said?
[03:52:55] <jaawerth> "no language is sound"
[03:53:03] <jaawerth> I'm not setting the bar very high for soundness. just, if you'r going to make a whole syntax for expressing type information, I want to be able to have that platform directly support some ability to apply those rules in dynamically
[03:53:17] <jaawerth> there are third party tools for it in typescript, I know. there should be a supported utility for it
[03:53:24] <systemfault> Sure, it's just a non-goal for TypeScript
[03:53:28] <jaawerth> right
[03:53:31] <jaawerth> that is the problem
[03:53:43] <ljharb> yup
[03:53:51] <jaawerth> I'm just pointing out that "no language is sound" is reductive and under a very strict definition of soundness
[03:54:00] <jaawerth> I am setting the bar very low for soundness and typescript is like "meh"
[03:54:13] *** Joins: crashrep (~crashrep@user/crashrep)
[03:54:24] <jaawerth> (but at least there's third party stuff)
[03:54:28] <systemfault> jaawerth: Give me an example of a widely-used language that is good in that aspect
[03:54:59] <jaawerth> I'm not even asking for good, I'm asking for greater than zero
[03:55:34] <jaawerth> also what is your bar for widely used? some of the langs I'd listed would count
[03:56:21] <jaawerth> like, I would be prefectly happy even if typescript just had some construct that allowed me to say "validate the these types at these function boundaries using the typedefs, and let me know if you can't because I made the typedefs too wacky"
[03:56:25] <systemfault> C, C++, Java, C#, Python, Perl, Ruby, JavaScript, PHP... anything part of the top X on... let's say, the TIOBE language chart (which isn't that accurate but can give you an idea)
[03:57:13] <systemfault> This chart https://www.tiobe.com/tiobe-index/
[03:58:05] <jaawerth> well, obective-c
[03:58:08] <systemfault> Then maybe, we could have a good understanding of why TypeScript is much worse in terms of soundness than the most popular programming languages on the planet
[03:58:13] <jaawerth> I think groovy as wellbut I'm not sure
[03:58:19] <systemfault> Fair enough
[03:58:28] <jaawerth> juli is growing but it's top 30, not top 20
[03:58:33] <jaawerth> *julia
[03:59:46] <ljharb> but also, "as crappy as everything else" is a pretty low bar
[03:59:55] <ljharb> and not a good reason to not complain
[04:00:03] <jaawerth> wait typescript is at 38 so uh let's just say top 50 lol. so lisp would count (well that depends on which dialect so I recognize it's a stretch)
[04:00:07] <jaawerth> I *think* dart can do it?
[04:00:13] <jaawerth> but I have never actually used dart
[04:00:47] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[04:01:19] <jaawerth> huh I didn't realize fortran was still in the top 50 on the TIOBE index
[04:01:21] <jaawerth> lol
[04:01:32] <jaawerth> (I'm not listing fortran, I just noticed it in the list haha)
[04:03:09] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[04:03:16] <jaawerth> anyway, a handful in the top 50 and mmost of the ones I listed earlier are at least in the top 100
[04:03:20] *** Quits: Naan` (~Naan@user/naan) (Quit: Leaving)
[04:03:38] <systemfault> The point here is that is doesn't make sense to use a discriminant that doesn't discriminate against anything.... It's like saying that Jesus is good because he ate food.
[04:03:55] <jaawerth> what?
[04:04:14] <ljharb> which would be a valid response if someone said "i like jesus because he doesn't go hungry"
[04:04:23] <ljharb> maybe, i dunno. this is a really weird analogy
[04:04:24] <systemfault> Exactly... the fact that he ate food is not useful
[04:04:28] <blueagain> oO
[04:04:32] <blueagain> I lost you guys at Jesus
[04:04:32] *** Joins: trevors (~trevors@user/trevors)
[04:04:36] <ljharb> except to disprove people who believe that that fact matters
[04:04:39] <jaawerth> my rationale for wanting this is very simple: if a language is going to have me go to the trouble of definiing types to the extent typescript wants me to, I want to be able to use them for runtime validations too without having to re-define the same data somewhere else and/or in a different format
[04:04:39] <systemfault> The fact that TypeScript is unsound is not useful.
[04:04:48] <ljharb> people *objectively* believe that with TS they will have unbreakable type safety
[04:04:53] <jaawerth> because me having to do that not only means more work but also more chances for human error maintaining it in two places
[04:04:53] <KevinX> I like to follow food, so you're saying I should follow jesus?
[04:04:55] <ljharb> telling them that TS is unsound is very useful, because they'r ewrong
[04:04:56] <jaawerth> and I don't like that
[04:04:58] <systemfault> As much as in Java.. C#... etc.
[04:05:05] <systemfault> They're all unsound.
[04:05:07] *** Quits: Guest3878 (~blahboyba@c-67-161-96-247.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[04:05:09] <ljharb> systemfault: yes but in those languages you don't choose to add a type system
[04:05:15] <jaawerth> I'd sooner just use a dynamic lang and do my own runtime validations
[04:05:19] <blueagain> Isn't it better to do defensive programming in JS than use TS
[04:05:20] <ljharb> systemfault: most people who choose TS falsely believe it gives them more guarantees than it does.
[04:05:23] <ljharb> blueagain: yes
[04:05:23] <jochum> I just follow Jesus, no need to discuss details.
[04:05:25] <ljharb> jaawerth: and yes
[04:05:30] <blueagain> that's what I do, at least
[04:05:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:05:34] <jaawerth> that's it, that's my reasoning. I don't think I'm asking for the world here
[04:05:44] <systemfault> ljharb: No, it's because they used C# or Java at school and it makes them feel at home
[04:05:45] <ljharb> systemfault: if someone who chooses TS actually understands its limitations, then obviously that person doesn't need to be told it's unsound
[04:05:54] <ljharb> systemfault: that's the actual reason, sure! but not the claimed reason.
[04:06:01] <systemfault> Claimed who?
[04:06:05] <jaawerth> I'm going by a very permissive definition of "sound"
[04:06:08] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[04:06:09] <ljharb> systemfault: pointing out TS's unsoundness defeats their alleged reasons
[04:06:11] <blueagain> I don't think you need TS if you do defensive programming and use proper linting / test cases
[04:06:16] <jaawerth> which typescript still doesn't care to meet
[04:06:18] <ljharb> systemfault: it still leaves the real reasons, which is "it feels better"
[04:06:58] <blueagain> seeing as defensive programming actually gives you runtime safety
[04:07:02] <systemfault> ljharb: Yes... same reason I'm going to eat a pizza instead of a salad tonight... I stopped believing that people chose their programming languages because of their technical merit.
[04:07:04] <jaawerth> I'm not even saying typescript is useless. I'm just saying the lack of support for this counts against it in my mental calculus on return on time investment
[04:07:24] <systemfault> ljharb: Familiarity... community... documentation... etc.. are usually the reasons.
[04:07:37] <ljharb> systemfault: i agree with you. but when they SAY it's technical merit, then it is always useful to explain why that reasoning doesn't hold
[04:07:47] <ljharb> systemfault: even if the only use is for them to admit/realize the real reasons, which are as you say
[04:08:08] <jochum> ljharb: you seem to be very grounded with your opionions, aren't you?
[04:08:26] <ljharb> jochum: not sure what you mean by "grounded", but in the "mindfulness" sense, yes, i hope so
[04:08:26] <blueagain> and also, (I think someone here argued in this direction), TS gives you a false sense of safety
[04:08:29] <ljharb> ^
[04:08:34] <blueagain> effectively making you a worse programmer
[04:08:46] <ljharb> jochum: if you mean my opinions are strongly held, yes, lots of time and experience tends to do that :-)
[04:09:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[04:09:23] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Client Quit)
[04:09:28] <systemfault> ljharb: I'm just saying that telling people to not use TypeScript because of a flaw that the language they come from also have...
[04:09:34] <systemfault> It just doesn't work.
[04:09:52] <jaawerth> I think you both polarize too much on the subject, personally :P
[04:09:56] <ljharb> systemfault: i'm not telling them not to use it for that reason
[04:10:01] <jochum> ljharb: i use what i like, with typescript I have code faster and cleaner than with plain JS.
[04:10:04] <ljharb> systemfault: i'm erasing the reason they said they DO use it
[04:10:17] <ljharb> jochum: sure, fair enough. altho that says more about you than about TS :-)
[04:10:29] <jochum> ljharb: maybe it does :-)
[04:10:50] <jochum> ljharb: the very same sentence says a lot about you too :)
[04:10:55] <jaawerth> systemfault: like, I agree to an extent that ljharb is really fast to dismiss/dissuade TS usage but I think you are also too fast to dismiss the criticisms of same
[04:11:08] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[04:11:34] <systemfault> jaawerth: TS has quite a few problems... just saying that using "soundness" as if it was a good reason it wrong.
[04:11:50] *** Quits: average (uid473595@user/average) (Quit: Connection closed for inactivity)
[04:11:51] <systemfault> The standard lib function types in TS are clearly bad in a lot of cases..
[04:11:52] <jaawerth> I just said all the reasons why soundness is a reason for me
[04:11:58] <systemfault> They make you lose types.
[04:12:03] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[04:12:05] <jaawerth> what is wrong with the above reasoning?
[04:12:08] *** Quits: lessshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Remote host closed the connection)
[04:12:12] <blueagain> jochum: TS programmers underestimate the higher complexity. you say "faster and cleaner", but I've seen many TS type definitions that look straight out of hell, where the person who wrote them doesn't even understand after a week what he did
[04:12:12] *** Joins: leshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[04:12:21] <systemfault> jaawerth: No, you're mostly complaining about the lack of runtime reflection/semantic
[04:12:38] <jochum> blueagain: I see that in any language.
[04:12:49] <jochum> blueagain: spaghetti code for example *shrug*
[04:12:49] <jaawerth> which in my mind is the bare minimum requirement of soundness
[04:13:07] <ljharb> jochum: sure. but it says that i can be very productive with just JS, which i'm happy with :-)
[04:13:12] <blueagain> jochum: sure, but that mindset of "types will fix everything" is broken.
[04:13:20] <jaawerth> I feel like your definition of soundness is maybe a little "no true scotsman." or mine is tooo loose
[04:13:22] <jaawerth> (or both)
[04:13:22] <ljharb> systemfault: yes, the TS stdlib types suck
[04:13:40] <blueagain> they fix a very small use case that can be equally solved by defensive programming and proper linting/testing
[04:13:40] <jochum> blueagain: true, I'm not that kind of developer
[04:13:50] <ljharb> jochum: also, to be quite honest, none of the code you showed before is even remotely clean
[04:13:53] <blueagain> (and would give you runtime safety)
[04:14:04] <ljharb> jochum: OOP code with lots of classes is automatically messier from the start, but that code was very obscure
[04:14:11] <substructure> ljharb: For the limited set of packages supported initially you would have strong proof that the version you get from npm was built from publicly accessible commits to their associated repo. It would not be possible for an attacker to publish a malicious version to only npm. This will allow updating dependencies to be less risky. I'm thinking about
[04:14:12] <substructure> having a lockfile with the mapping between package and accepted repo uri, not 100% sure on this yet. Right now there is a trade-off between updating to the most recent version for security fixes and lagging behind a bit to avoid getting burnt by supply chain attacks(This is at least my perception). This benefit is muddied by the fact that
[04:14:12] <substructure> dependencies don't claim to stay reproducible right now. Tomorrow a package may no longer be reproducible.
[04:14:13] <substructure> It would make debugging an issue easier as you can know with confidence the commit of the package to investigate.
[04:14:13] <substructure> Tooling needs to be built on top of this to extract more utility. I think static analysis could be improved if it could utilize the entire call graph, but that and many other ideas need broad and ongoing community support.
[04:14:39] <jochum> ljharb: it was a quick copy&paste
[04:15:07] <jochum> https://github.com/pcdummy <-- thats me
[04:15:33] <ljharb> jochum: sure but that code shouldn't exist anywhere :-p i'm https://github.com/ljharb
[04:15:37] <jaawerth> but yes I dont' actually care about it being 100% sound. it's fine to only do runtime checks at the entrypoints, since after that you can very comfortably rely on only static checking once data makes it through the door
[04:16:34] <ljharb> jochum: is this code from salt?
[04:16:44] <ljharb> substructure: right but those deps are already not risky
[04:16:47] <jochum> not at all :)
[04:16:49] <ljharb> substructure: because they're trusted and well-tested
[04:16:51] <ljharb> jochum: k, jw
[04:17:10] <ljharb> substructure: the reality is that those kinds of attacks aren't actually that big a problem
[04:17:10] <jochum> I'm a Freelancer working for a client
[04:17:20] <ljharb> substructure: specifically supply chain attacks; there's two simple mitigations that prevent 100% of those attacks
[04:17:55] <ljharb> substructure: 1) publicly own an npm org; all internal packages use that scope and are on a private registry; 2) configure the private registry to never fetch that scope from public, and enforce that registry be used
[04:18:08] <blueagain> lol, feels like substructure and ljharb have been discussing this like 4 hours intermittently
[04:18:26] <ljharb> substructure: i'm very familiar with the tiny tiny number of actual security incidents npm has had over the last decade, and what you're talking about won't actually mitigate any of them.
[04:18:56] <ljharb> substructure: including event-stream - because the attacker could just point the package to a different repo they maintain that redirects to the real one after initial verification
[04:18:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:18:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:18:59] *** Joins: wroathe (~wroathe@user/wroathe)
[04:19:51] <jochum> ljharb: now i see, you know LOTS about JS, seem's I can learn a lot from ya.
[04:23:27] <emyrs> may want to subscribe to his github.
[04:24:01] <emyrs> s/subscribe to/sponsor
[04:24:03] *** Joins: Guest3848 (~blahboyba@c-67-161-97-138.hsd1.wa.comcast.net)
[04:24:26] <jochum> If I wouldn't been poor I would ;P
[04:24:30] *** Joins: onosendi (~onosendi@user/onosendi)
[04:24:37] <emyrs> excuses!
[04:24:59] <jochum> True...
[04:25:06] <ljharb> lol don't worry about yourself, get your company to do it :-p type `npm fund` in your project and sponsor the top however many you pick
[04:25:48] <jaawerth> ljharb: honestly for internal/private packages you really gotta do both because it's really hard to reliably force all the devs to use a registry and it's also common for private registries to be behind VPN's
[04:25:50] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[04:25:57] <jochum> Wanna start another discussion... I'm using pnpm having fun with it.
[04:26:07] <ljharb> jaawerth: yes, my claim was that both are needed
[04:26:07] <jaawerth> so a dev might switch to public npm until they sign into the vpn and then oops I accidentally hit public npm
[04:26:12] <jaawerth> ohh
[04:26:13] <ljharb> jochum: be careful, its approach breaks things
[04:26:15] <jaawerth> then I agree!
[04:26:17] <jaawerth> lol
[04:26:21] <ljharb> jaawerth: but, with both, you're 100% protected
[04:26:41] <ljharb> see, yall get that security advice for free, my employer had to pay me for it
[04:26:56] <jochum> ljharb: I've had no breaks yet, you have an example?
[04:27:23] <ljharb> jochum: basically, lots of things require stuff that's not listed as a dependency - like everything that has a static config and has plugins. so, eslint, babel, webpack, etyc
[04:27:45] <ljharb> jochum: so in the high-profile cases, pnpm probably has a hack to work around them, but in the general case, it could break stuff silently
[04:27:52] <jaawerth> those have been my rules for years, ever since I read about whatever that big high-profile pulic-name registration attack was
[04:27:58] <ljharb> jochum: anything that uses a try/catch require of a non-dep won't work properly in pnpm, and you might never know
[04:28:04] <jaawerth> (there may have been more than one but I remember there was one really loud one)
[04:28:14] <ljharb> jochum: since the only advantage over npm is "less disk space" - something that's infinite and free - imo it's not worth it. just stick with npm.
[04:28:38] <jochum> ljharb: it speed of "pnpm install"
[04:28:51] <jochum> ljharb: it workspace which i love in my other monorepo
[04:29:11] *** Quits: cotko (~cotko@155.pool85-49-78.dynamic.orange.es) (Ping timeout: 272 seconds)
[04:29:21] <ljharb> jochum: npm has workspaces
[04:29:34] <jochum> with overrides?
[04:29:36] <ljharb> jochum: and i very much doubt npm install is significantly slower than pnpm
[04:29:36] <ljharb> yes
[04:29:38] <ljharb> np has overrides too
[04:29:40] <jochum> ohh NICE
[04:29:40] <ljharb> *npm
[04:30:00] <jochum> ljharb: not just significantly but a lot
[04:30:04] *** Quits: realies (~realies@user/realies) (Quit: Ping timeout (120 seconds))
[04:30:07] <ljharb> afaik there is no features left that npm lacks, except that yarn has pnp (which breaks many things) and pnpm has its isolated layout mode (which breaks less, but also, npm will be adding soon anyways)
[04:30:25] <ljharb> so at some point even if you stuck with pnpm, you'd be able to use npm instead with the same layout and breakage
[04:30:33] *** Joins: realies (~realies@user/realies)
[04:31:06] <jochum> ljharb: so npm optional layout will break packages as well?
[04:31:12] <jochum> Linked Layout that is
[04:31:22] <ljharb> "isolated mode", and yes
[04:31:26] <ljharb> but it won't be on by default
[04:32:01] <jochum> I was an early adopter for yarn then switched to pnpm no bugs yet ... good to know there could be some.
[04:32:40] <ljharb> yarn is far worse, so i'd take pnpm over yarn any day
[04:32:46] <ljharb> but there's no substitute for the standard
[04:33:04] *** Quits: DrowningElysium (uid190788@user/drowningelysium) (Quit: Connection closed for inactivity)
[04:33:48] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Ping timeout: 240 seconds)
[04:35:58] <jochum> ljharb: first download "npm" is slower, after removing -lock and node_modules its always nearly as fast as pnpm
[04:36:03] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[04:36:14] <jochum> on this freshly started project here
[04:36:48] <jochum> ljharb: when clearing pnpm cache its seems faster than npm, maybe cause hitting the server's harder.
[04:37:35] <jochum> pnpm install  2,23s user 0,67s system 49% cpu 5,860 total - npm install  2,51s user 0,65s system 149% cpu 2,113 total <-- both with all packages in cache
[04:38:25] <jochum> I'll switch back to the standard, thanks
[04:39:02] *** Joins: hojasuelta (~hojasuelt@50.34.135.134)
[04:42:24] <jochum> ^ ignore that one
[04:43:00] *** Quits: hojasuelta (~hojasuelt@50.34.135.134) (Ping timeout: 240 seconds)
[04:43:07] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[04:44:23] *** Joins: substructure80 (~substruct@141.98.255.145)
[04:48:19] *** Quits: substructure (~substruct@141.98.255.145) (Ping timeout: 256 seconds)
[04:54:12] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[04:57:33] *** Joins: psy1 (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net)
[04:58:48] *** Quits: peteyboy1 (~peteyboy1@95.169.226.66) (Ping timeout: 256 seconds)
[04:59:42] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[05:00:29] *** Joins: masoudd (~masoudd@user/masoudd)
[05:00:33] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[05:01:48] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[05:02:58] *** Joins: ejjfunky (~ejjfunky2@125.164.21.7)
[05:03:29] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[05:04:19] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[05:06:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:06:27] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:06:42] *** Joins: TubbyTommy (~blank@user/slimmyjimmy)
[05:06:44] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[05:07:39] *** Joins: hojasuelta (~hojasuelt@50.34.135.134)
[05:09:34] <ljharb> jochum: makes sense, glad it’s as fast
[05:09:34] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:09:52] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[05:14:41] *** Quits: s1b1 (~s1b1@user/s1b1) (Read error: Connection reset by peer)
[05:17:22] *** Joins: trevors (~trevors@user/trevors)
[05:23:20] *** Joins: llorllale (~llorllale@198.98.119.85)
[05:24:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[05:31:12] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:44:36] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[05:46:32] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:54de:a685:89de:8152) (Ping timeout: 250 seconds)
[05:47:28] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[05:48:02] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:54de:a685:89de:8152)
[05:48:23] *** Quits: substructure80 (~substruct@141.98.255.145) (Ping timeout: 256 seconds)
[05:52:24] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:54de:a685:89de:8152) (Client Quit)
[05:53:36] *** Quits: psy1 (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net) (Quit: WeeChat 2.8)
[05:59:44] *** Quits: Inspiral (~inspiral@user/inspiral) (Ping timeout: 272 seconds)
[06:00:07] *** Joins: Inspiral (~inspiral@host-92-22-22-119.as13285.net)
[06:00:07] *** Quits: Inspiral (~inspiral@host-92-22-22-119.as13285.net) (Changing host)
[06:00:07] *** Joins: Inspiral (~inspiral@user/inspiral)
[06:03:48] *** Quits: hassoon_ (hassoon@user/hassoon) (Ping timeout: 240 seconds)
[06:04:40] *** Joins: diamondbond_ (~diamondbo@175.157.92.206)
[06:06:01] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[06:06:14] *** Quits: KaitoDaumoto (Frat@user/kaitodaumoto) (Remote host closed the connection)
[06:06:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:06:49] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[06:08:04] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[06:08:44] *** Joins: justAstache (~justache@user/justache)
[06:10:29] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[06:10:30] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[06:11:24] *** Quits: diamondbond_ (~diamondbo@175.157.92.206) (Ping timeout: 240 seconds)
[06:14:50] *** Joins: s1b1 (~s1b1@user/s1b1)
[06:15:14] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[06:16:39] *** Joins: diamondbond_ (~diamondbo@175.157.92.206)
[06:17:29] *** Joins: pmercado (~pmercado@186.107.40.57)
[06:20:49] *** Quits: diamondbond_ (~diamondbo@175.157.92.206) (Client Quit)
[06:21:00] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[06:30:14] *** Quits: kerat58 (~tarek58@user/tarek58) (Remote host closed the connection)
[06:31:29] *** Joins: tarek58 (~tarek58@user/tarek58)
[06:32:27] *** Joins: substructure (~substruct@185.65.135.182)
[06:39:26] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:40:48] *** Quits: tarek58 (~tarek58@user/tarek58) (Ping timeout: 256 seconds)
[06:41:03] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Remote host closed the connection)
[06:41:21] *** Joins: D3mned (~D1mned@212.101.234.123)
[06:41:33] *** Joins: kerat58 (~tarek58@user/tarek58)
[06:41:58] *** Joins: N4buc0 (~N4buc0@2804:7f4:348b:7576:9478:bcc2:7990:f89b)
[06:42:10] *** Quits: D4mned (~D1mned@212.101.234.123) (Read error: Connection reset by peer)
[06:42:22] *** D3mned is now known as D4mned
[06:48:28] <substructure> ljharb: I haven't forgotten about your last message. I'm going to gather my thoughts on our conversation so far and respond tomorrow. Your criticisms have pointed to many areas of the project that need work and or are poorly conveyed via this medium. I'll finish the RFC I've been working on. Can I request your feedback on that document? If there is
[06:48:28] <substructure> a record of this chat I'll ensure your comments are addressed. (I recall most of your points, but this has been a long conversation) Thank you again.
[06:49:01] *** Quits: hojasuelta (~hojasuelt@50.34.135.134) ()
[06:49:14] *** Quits: Arisco (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br) (Ping timeout: 252 seconds)
[06:54:07] <TubbyTommy> Is it possible to name each individual element of a JSON array?
[06:55:02] <substructure> What do you mean by name TubbyTommy? As in you have a string that maps to each element?
[06:55:11] <TubbyTommy> Yes
[06:55:25] <TubbyTommy> Exactly that, so that the string can be used as the indexer.
[06:56:51] <substructure> So like const hash = {"a": 2, "b": 33, "d": 400 }
[06:56:52] <substructure> And you could access it via hash["a"] => 2
[06:57:22] <TubbyTommy> Ah, but you used curly braces and not angle brackets, therefore, that is an object, and not an array.
[06:57:38] <TubbyTommy> JSON array is: [1, 2, 3, 4, 5];
[06:58:53] <TubbyTommy> So, I guess that's as close as you can get to mimicking an associate array in JSON.
[06:59:01] <jaawerth> you can map it to another structure but an array is fundamentally a list, to be indexed by integers or iterated
[06:59:42] <substructure> Must it be an array? What is your use case?
[06:59:45] <TubbyTommy> So, what you're saying in so many words, is that associative arrays aren't really arrays at all?
[06:59:58] <jaawerth> well usually they're hash tables
[07:00:11] <TubbyTommy> And those hash tables are stored in....
[07:00:26] <jaawerth> but in JS you have objects for that, which may or may not be backked by a native array under the hood
[07:00:46] <jaawerth> most languages do, in fact, have separate list and dictionary structures
[07:00:56] <substructure> The hash table gives very good access time. Why do you need an associative array?
[07:01:05] <jaawerth> and the ones that mush them together still dont like you just use a given property in both contexts
[07:01:18] <TubbyTommy> It sounds like your talking about the programmers implementation under the covers, I don't think that's really appropriate to bring into the discussion for my simple question.
[07:01:31] <jaawerth> lol
[07:01:52] <jaawerth> I am saying the fact that they call it an "associative array" in other languages doesn't change the fact that it is a dictionary-type structure
[07:02:14] <jaawerth> and in JS, you have two different types of this. whether it is an array under the hood is the implementation detail, and in JS it just doesn't use the word "array"
[07:02:27] <jaawerth> so in JS, an array is a list, emant to be used as a list
[07:02:32] <TubbyTommy> Come on folks, let me start again. When you these 2 symbols in JavaScript, what do you call the type "[" and "[". Is that not the syntax to start and end an array?
[07:02:36] <jaawerth> i you want to look stuff up by name you can use an object or a Map
[07:02:49] <jaawerth> it's an array
[07:02:56] <substructure> Yeah, those make an array literal.
[07:02:59] <TubbyTommy> Ok, see, there we go.
[07:03:11] *** Joins: src (~src@user/src)
[07:03:22] <TubbyTommy> So, my question is, in between those 2 symbols can you name the individual elements in JSON?
[07:03:31] <substructure> No
[07:03:35] <TubbyTommy> I don't think the syntax supports it.
[07:03:46] <TubbyTommy> Thank You. Because I did try it but it never worked.
[07:04:08] <TubbyTommy> So, you have to go to the objects to get similar functionality that might work as I expected coming from C#.
[07:04:45] <jaawerth> some languages do use a single construct for both, but in reality what you have is an array part and hash table/dictionary/wahtever-the-language-calls-it part. lua is similar
[07:05:26] <jaawerth> everything is a table, when you use index keys it's using one part of the internals, and the hash table form utilizes another - and how you interact with the named vs indexed keys is different
[07:05:27] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[07:05:37] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 240 seconds)
[07:05:47] <substructure> You can easily go from a hash to an array effectively. So your data is in the hash map { "a": 3, "b": 33 } and you can very simply get either your keys ["a", "b"] iterated or values [3, 33]. Why does it need to be an array exactly?
[07:06:07] <jaawerth> also, just for the sake of clarity, strictly speaking JSON is neither, but rather the serialized-to-string form. That probably sounds like nitpicking but it can cause confusion for people sometimes so I figured I'd mention it
[07:06:24] <TubbyTommy> It doesnt have to be, I just expected it to work coming from C#. But it's all good.
[07:06:26] <substructure> The hash map has really great time complexity.
[07:06:27] *** Quits: de-facto (~de-facto@user/de-facto) (Quit: See you around. 💤)
[07:06:42] *** Joins: bobdobbs` (~user@116.251.146.222)
[07:07:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:07:05] *** Joins: niko (~niko@libera/staff/niko)
[07:07:45] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[07:07:45] <substructure> Good point on JSON vs object delineation.
[07:07:46] <jaawerth> JS also has the Map as of ES6, which is similarly used for keyed lookups, but lets you use anything (not just strings and/or integers) as a key, and is slightly better for random access/lots of mutation
[07:07:49] <TubbyTommy> I can use objects in JSON to get the same results of an associative array so that's what I will be doing.
[07:07:54] *** Joins: de-facto (~de-facto@user/de-facto)
[07:07:57] <jaawerth> but tbh people stll don't use Map a lot
[07:08:12] *** Quits: bobdobbs (~user@2406:5a00:4456:db00:f1c5:6c8:4348:3a7e) (Ping timeout: 240 seconds)
[07:08:27] <jaawerth> yep, that's what you'll want
[07:08:42] <systemfault> I don't use them as much as I should... because it doesn't feel like a built-in
[07:08:48] <substructure> I've tried using Maps everywhere, but as soon as you need really good performance an array with your own logic to determine indexing is so much faster.
[07:08:52] <systemfault> It feels like a "class" and accessors and shit.
[07:08:54] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:09:13] *** Joins: junebug (~junebug@2600:1700:3db0:2540:ec82:e3f9:7206:8ac4)
[07:09:42] <jaawerth> faster in what sense?
[07:10:10] <jaawerth> my main complaint about them is the like of higher-order methods
[07:10:46] <jaawerth> iterator helpers will serve that purpose fine though
[07:11:02] <jaawerth> once that proposals finishes up
[07:11:10] *** Joins: Rockwood (~Rocky@user/rocky)
[07:11:18] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[07:12:02] <jaawerth> systemfault: I do know what you mean, though on the bright side when keys come from external/possibly-user-supplied data you don't have to worry about prototype collisions
[07:12:24] <systemfault> jaawerth: true...
[07:12:28] <substructure> Less time is spent accessing items from the data structure. Array indexing can be inlined by the v8 turbofan optimization system. https://v8.dev/docs/turbofan
[07:13:04] <Rockwood> boom boom Ukraine :(
[07:13:13] <jaawerth> I'm familiar with turbofan but I am skeptical you'd beat a Map in JS with a custom array-based structure outside of very specific subsets of key types
[07:13:34] <jaawerth> particularly on cache misses
[07:14:37] <substructure> My data sets had very few cache misses. That may be a factor. I didn't test different hit rates.
[07:15:22] <jaawerth> ah sure, I can definitely see outdoing a Map if you write a custom structure that best suites the kind of data you're working with
[07:15:22] *** Joins: silverdust (~silverdus@user/silverdust)
[07:15:36] <jaawerth> Map is pretty solid for general random access scenarios though
[07:16:23] *** Joins: viva (~viva@2601:2c7:8900:169:6082:5cab:e6c7:91c7)
[07:16:33] <substructure> I agree, for everyday use Map is good, but I just like that it only has the data in it, not the dang properties.
[07:17:31] <systemfault> Not sure what that means.. :/
[07:18:02] <viva> i have a simple syntax example i need help with, can anyone tell me the diff between these two (import?) statements please? https://jsfiddle.net/6nqg213d/
[07:18:05] <systemfault> n> const myMap = new Map(); myMap.set('x', 10); myMap.set('y', 20); myMap;
[07:18:06] <jellobot> (okay) Map(2) { 'x' => 10, 'y' => 20 }
[07:19:43] <systemfault> viva: The first one simply uses "destructuring" to access what's needed. If you don't use destructuring, you need to import and assign in two steps: const randomBytesLib = require('crypto'); const randomBytes = randomBytesLib.randomBytes;
[07:20:10] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 272 seconds)
[07:20:15] <jaawerth> viva: the first one is a named import, and will get you items from a module exported along the lines of `export function foo() { }`. The second  one imports the default export, `export default someValue`
[07:20:35] <viva> ok so how do you know when you need to destructure and when you dont?
[07:20:46] <viva> depends on what you need to do?
[07:20:58] <jaawerth> it's not actually destructuring in real ES mdoules. you know based on whether the thing you're importing was a default export or not
[07:21:30] <jaawerth> viva: this goes into detail https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import
[07:21:52] <systemfault> You use destructuring when you use CommonJS (require). When using ESM, that "destructuring-like" thing is just part of the import syntax
[07:22:01] *** suss` is now known as suss
[07:22:23] <viva> ok thanks thats helpful
[07:22:42] <jaawerth> sure thing. you can see the second form under the "importing defaults" section
[07:22:43] <viva> also, in Java we called these libraries i believe... in JS they're called exports?
[07:22:50] <viva> the things you import, that is.
[07:23:03] <jaawerth> well, they're modules. the exports are what are exposed by the module
[07:23:10] <viva> ah
[07:23:24] <viva> ok thank you that makes total sense
[07:23:35] <viva> im still learning but JS is fun and somewhat quick to pickup
[07:23:53] <viva> and its so darn handy these days... i shoulda been learning this years ago... decades even
[07:24:11] <viva> anyways, thank again. tata
[07:24:28] *** Quits: viva (~viva@2601:2c7:8900:169:6082:5cab:e6c7:91c7) (Remote host closed the connection)
[07:26:53] *** Quits: substructure (~substruct@185.65.135.182) (Quit: Client closed)
[07:27:53] <Rockwood> hi
[07:28:00] <Rockwood> any good in nginx?
[07:28:27] <SpiceMan> no, only evil and memes inside
[07:36:41] <systemfault> Until the Russia/Ukraine war is over, we can't like NGinx :P
[07:38:21] *** Joins: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney)
[07:40:15] <Rockwood> interesting, open the t.v and see with some drinks :D
[07:40:43] *** Quits: kmh (~kmh@2a00:6020:5004:6800:1856:1e91:efc3:b86f) (Quit: Leaving)
[07:42:22] *** Joins: darkdrgn2k (~darkdrgn2@user/darkdrgn2k)
[07:42:42] <darkdrgn2k> how do i convert a Uint8Array into an arraybuffer
[07:47:49] *** Quits: TubbyTommy (~blank@user/slimmyjimmy) (Quit: Going offline, see ya! (www.adiirc.com))
[07:49:40] *** Joins: onosendi (~onosendi@user/onosendi)
[07:49:45] <buu> new ArrayBuffer ?
[07:50:05] <buu> systemfault: Shoulda been like me and stuck with apache
[07:50:28] <systemfault> darkdrgn2k: .buffer
[07:51:55] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[07:53:08] *** Joins: N4buc0- (~N4buc0@201.22.12.94.dynamic.adsl.gvt.net.br)
[07:53:16] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:7576:9478:bcc2:7990:f89b) (Remote host closed the connection)
[07:54:22] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 250 seconds)
[07:59:46] <sheetjs> n> new Uint8Array([1,2,3]).buffer
[07:59:47] <jellobot> (okay) ArrayBuffer { [Uint8Contents]: <01 02 03>, byteLength: 3 }
[08:00:27] *** Quits: junebug (~junebug@2600:1700:3db0:2540:ec82:e3f9:7206:8ac4) (Quit: Leaving)
[08:01:22] *** Joins: kmh (~kmh@2a00:6020:5004:6800:b906:7081:ba66:f9a5)
[08:01:33] <Rockwood> sheetjs, o/
[08:01:42] <sheetjs> Rockwood: o\
[08:04:20] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:05:54] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[08:07:07] *** Joins: k8yun (~k8yun@user/k8yun)
[08:07:26] *** Joins: jaredk (~jaredk@c-24-17-174-192.hsd1.wa.comcast.net)
[08:07:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:08:41] *** Joins: onosendi (~onosendi@user/onosendi)
[08:09:35] *** Joins: han-solo (~hanish@user/han-solo)
[08:11:28] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:13:10] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 256 seconds)
[08:18:36] *** Quits: audio (~audio@user/audio) (Ping timeout: 240 seconds)
[08:22:38] *** Quits: winlundn (nick@2600:3c01::f03c:92ff:fe32:c297) (Quit: WeeChat 3.0.1)
[08:23:00] *** Quits: N4buc0- (~N4buc0@201.22.12.94.dynamic.adsl.gvt.net.br) (Ping timeout: 240 seconds)
[08:30:31] *** Joins: zebrag (~chris@user/zebrag)
[08:31:08] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[08:40:20] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[08:50:11] *** Quits: jaredk (~jaredk@c-24-17-174-192.hsd1.wa.comcast.net) (Quit: Client closed)
[08:53:24] *** Quits: ejjfunky (~ejjfunky2@125.164.21.7) (Remote host closed the connection)
[08:56:11] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[09:00:32] *** Joins: duch_kazatel (~robert0@c-76-114-62-229.hsd1.ca.comcast.net)
[09:01:48] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:02:46] *** Quits: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[09:03:09] *** Quits: AJTJ (~AJTJ@d205-234-49-159.yt.northwestel.net) (Quit: Leaving...)
[09:04:47] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[09:05:26] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[09:08:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:11:24] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 240 seconds)
[09:11:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:13:21] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:20:57] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[09:23:47] *** Joins: k8yun_ (~k8yun@user/k8yun)
[09:27:00] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 240 seconds)
[09:36:11] *** Joins: audio (~audio@user/audio)
[09:39:01] *** Quits: pmercado (~pmercado@186.107.40.57) (Ping timeout: 256 seconds)
[09:39:56] *** Joins: teut (~teut@122.161.83.81)
[09:40:40] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9e12:946e:262d:4e8a:73e2) (Remote host closed the connection)
[09:41:23] *** Joins: p-i- (~Ohmu@2403:6200:8978:9e12:54a2:f1ed:cf5c:274a)
[09:43:16] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[09:44:41] *** Quits: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney) (Ping timeout: 256 seconds)
[09:47:44] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 272 seconds)
[09:49:10] *** Quits: mikey_p (uid129477@id-129477.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[09:51:06] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[09:51:22] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[09:52:11] *** Quits: src (~src@user/src) (Quit: Leaving)
[09:55:44] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[09:57:01] *** Joins: ckdCreations (~ckdCreati@147.55.133.135)
[10:00:33] *** Joins: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney)
[10:03:11] *** Quits: kmh (~kmh@2a00:6020:5004:6800:b906:7081:ba66:f9a5) (Quit: Leaving)
[10:08:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:09:50] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[10:10:05] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:11:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:12:09] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:12:21] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:14:18] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:14:31] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:16:29] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:16:42] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:18:52] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:19:05] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:21:20] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[10:21:34] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:23:35] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:23:47] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:26:08] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:26:20] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:27:00] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Ping timeout: 240 seconds)
[10:29:03] *** Quits: mange (~user@n114-78-12-98.bla3.nsw.optusnet.com.au) (Remote host closed the connection)
[10:29:03] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:29:16] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:31:15] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[10:31:25] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:31:37] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:33:40] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:33:53] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:34:23] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[10:35:55] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:36:08] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:38:08] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:38:22] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:40:26] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[10:40:40] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:42:30] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:42:43] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:43:14] *** Joins: iomari891 (~iomari891@105.112.138.38)
[10:43:40] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:916:d428:8448:3aea)
[10:44:07] *** Guest3848 is now known as blahboybaz
[10:44:39] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:44:51] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[10:45:14] *** Joins: sam_1 (~sam_1@87.51.251.118)
[10:45:57] *** Quits: defjam (~eb0t@90.196.141.185) (Ping timeout: 250 seconds)
[10:47:29] <blahboybaz> I thought I understood (the reduce method) - in fact, I'm sure I do. But something odd seems to be going on and I can't really peg why. I have https://onecompiler.com/javascript/3xuduqsc6  where it is complaining the the first parameter is undefined  yet this example: https://onecompiler.com/javascript/3xucqj86z  although the parameter name is different it shows that the same paramenter in the same
[10:47:35] <blahboybaz> position ought to be defined and usable.
[10:47:44] <blahboybaz> I feel like the universe is against me
[10:47:51] *** Joins: defjam (~eb0t@90.210.89.170)
[10:47:53] <blahboybaz> what am I doing wrong?
[10:48:33] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:c47f:a31f:302d:f1aa)
[10:48:43] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[10:49:03] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:916:d428:8448:3aea) (Ping timeout: 256 seconds)
[10:49:34] *** Joins: TubbyTommy (~blank@user/slimmyjimmy)
[10:50:06] <systemfault> You need to always return what will be the next value of "data" at the end of the function
[10:50:50] <blahboybaz> systemfault: A return inside the callback function?
[10:50:57] <systemfault> Yes, always.
[10:51:20] <blahboybaz> yep!
[10:51:23] <blahboybaz> ty
[10:51:25] <systemfault> The value you return in that callback will be the value of the "data" variable at the next iteration
[10:52:07] *** Joins: Simplar (~quassel@188.163.93.241)
[10:52:15] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 240 seconds)
[10:52:55] *** Joins: de-facto (~de-facto@user/de-facto)
[11:09:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:11:23] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 256 seconds)
[11:12:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:14:07] <silly> oh no, the dark mode button on onecompiler is broken, it never changes to the sun icon :( https://mui.com/customization/dark-mode/#toggling-color-mode
[11:14:57] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[11:15:12] <systemfault> Oh no! Yesterday... Ukraine and now.... onecompiler is broken? OH THE HUMANITY
[11:17:10] *** Quits: ckdCreations (~ckdCreati@147.55.133.135) (Read error: Connection reset by peer)
[11:18:22] <silly> what happened to ukraine?
[11:18:31] <ThePendulum> goes to show things can always get worse
[11:18:46] <ThePendulum> silly: u wot
[11:19:07] <silly> oh well, i made major progress with a native node module \o/
[11:19:21] <silly> all is bright
[11:19:45] *** Quits: TubbyTommy (~blank@user/slimmyjimmy) (Quit: Going offline, see ya! (www.adiirc.com))
[11:23:42] <jmcantrell> Anyone ever notice the browser's fetch returning a different response body than curl? I'm getting a text response from a github api rest call in the browser and json when doing the same request with curl. I don't know how to debug this.
[11:24:54] <dminuoso> Hi. Given a simple parcel-built browser app, what is the ideal way of injecting a build variable in there?
[11:25:32] <dminuoso> Specifically I want to inject a base url during `parcel build`
[11:28:28] *** Joins: silverdust (~silverdus@user/silverdust)
[11:32:33] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:33:29] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 256 seconds)
[11:36:39] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:41:37] <SpiceMan> jmcantrell: probably the Accept header provided by the browser
[11:42:20] *** Quits: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[11:42:57] <jmcantrell> SpiceMan: Could it possibly be overriding the one I've set for the request?
[11:43:39] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[11:43:46] <silly> jmcantrell, in devtools network pane right click on the request, chose "copy as curl" and compare the clipboard contents with your curl command
[11:44:43] *** Joins: Arisco (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br)
[11:46:45] *** Joins: stenno (~stenno@user/stenno)
[11:54:06] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:54:53] *** Joins: pycode (~pycode3@2001:b07:5d28:551:2da1:82f1:2901:8ce5)
[11:55:25] *** Quits: brentaarnold (~brentaarn@24.112.56.42) (Ping timeout: 240 seconds)
[11:56:10] <jmcantrell> @silly: caching seems to be a factor. disabling it produces the correct response. i'm not sure what kind of caching would apply here
[11:57:30] <silly> you disable it with the "disable cache checkbox" in devtools network pane?
[11:57:49] *** Quits: blahboybaz (~blahboyba@c-67-161-97-138.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[11:58:29] <jmcantrell> @silly: yes
[11:59:48] <silly> interesting, sadly, i don't know much about the caching mechanisms in general
[12:00:02] *** Quits: monokrome (~monokrome@50.215.11.140) (Ping timeout: 240 seconds)
[12:02:59] *** Joins: monokrome (~monokrome@50.215.11.140)
[12:09:11] *** Joins: wyclif (~wyclif@user/wyclif)
[12:09:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:10:06] <Cork> jmcantrell: if the http try adding something like a _=<timestamp> to the http request and you should work around the cache in the browser
[12:11:28] *** Joins: rendar (~rendar@user/rendar)
[12:11:32] <Cork> ex. http://example.com/?_=1645778487
[12:12:06] <rendar> https://bpa.st/7FRQ -- i have this to check if a keydown is a charachter, but it seems to not work properly, if i press right arrow, for instance, it checks true, and i get the character '%' -- why?
[12:12:18] <jmcantrell> for some reason, it's using an "accept" header that i was using while testing.
[12:12:52] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[12:13:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:14:57] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:15:38] *** Joins: average (uid473595@user/average)
[12:16:26] *** Joins: ejjfunky (~ejjfunky@125.164.23.251)
[12:17:41] *** Quits: ejjfunky (~ejjfunky@125.164.23.251) (Remote host closed the connection)
[12:19:11] <rendar> any help?
[12:19:32] *** Joins: cotko (~cotko@155.pool85-49-78.dynamic.orange.es)
[12:20:47] *** Joins: aLeSD (~aLeSD@91.126.33.194)
[12:21:25] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[12:22:03] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[12:23:57] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[12:24:02] *** Joins: brentaarnold (~brentaarn@24.112.56.42)
[12:24:08] *** Quits: aLeSD (~aLeSD@91.126.33.194) (Client Quit)
[12:24:48] <Cork> rendar: make a jsfiddle showing your problem, makes it easer for ppl to understand what you have problem with
[12:25:14] <rendar> Cork, https://jsfiddle.net/ef1monkh/1/
[12:25:34] <rendar> now try to type first letters, then arrows there, and look
[12:26:22] <dminuoso> Also, I like how npm claims that parcel's size is `38.6 kB` unpacked. But when I stare at node_modules, it's 250MiB.
[12:26:28] <dminuoso> What's up with that?
[12:26:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[12:28:21] *** Joins: wyclif (~wyclif@user/wyclif)
[12:28:34] <Cork> rendar: hmm
[12:28:37] <Cork> ome min
[12:29:07] <silly> rendar, dunno but... https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode
[12:29:13] <silly> .keyCode is deprecated
[12:29:15] *** Joins: eugercek (~user@user/eugercek)
[12:29:22] <rendar> ok, what i should use?
[12:30:14] *** Joins: cheater (~Username@user/cheater)
[12:30:24] <silly> https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/which
[12:30:34] <silly> "This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user."
[12:30:46] <rendar> so i can't use it?
[12:30:55] <rendar> and i still have to use keyCode which is deprecated?
[12:31:02] <silly> https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
[12:31:34] <silly> use .key or .code
[12:31:43] <rendar> ok
[12:31:53] <rendar> how can i get a string from the key?
[12:32:07] <stenno> read the page silly linked
[12:32:46] <rendar> ok
[12:32:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[12:33:53] *** Joins: wyclif (~wyclif@user/wyclif)
[12:33:57] <silly> .key looks best to me, with support down to ie9
[12:34:28] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[12:35:35] <systemfault> dminuoso: It's always like that... that 39k is just the parcel source, not the billion of dependencies it uses
[12:37:16] <systemfault> (most of them transitive...)
[12:38:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[12:39:21] *** Joins: wyclif (~wyclif@user/wyclif)
[12:39:22] *** Quits: D4mned (~D1mned@212.101.234.123) (Read error: Connection reset by peer)
[12:41:00] *** Joins: D4mned (~D1mned@212.101.253.253)
[12:42:45] *** Quits: relms (~relms@user/relms) (Quit: Going to kill oneself)
[12:44:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[12:45:07] *** Joins: wyclif (~wyclif@user/wyclif)
[12:46:21] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[12:48:20] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:49:13] *** Joins: peteyboy1 (~peteyboy1@95.169.226.66)
[12:49:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[12:56:12] *** Joins: wyclif (~wyclif@user/wyclif)
[13:01:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[13:01:51] *** Joins: wyclif (~wyclif@user/wyclif)
[13:03:15] *** Joins: Elzington_ (~Elzington@87.249.134.17)
[13:05:59] *** Quits: Elzington (~Elzington@68.235.43.84) (Ping timeout: 252 seconds)
[13:06:24] *** Joins: kakashiAL (~kakashi@41.143.6.180)
[13:06:37] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[13:07:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[13:07:33] *** Joins: wyclif (~wyclif@user/wyclif)
[13:08:41] *** Joins: i0e (~is0ke3@user/is0ke3)
[13:09:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[13:10:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:13:30] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:15:24] *** Quits: kakashiAL (~kakashi@41.143.6.180) (Ping timeout: 240 seconds)
[13:18:00] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[13:18:44] *** Joins: wyclif (~wyclif@user/wyclif)
[13:20:22] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 260 seconds)
[13:20:32] *** Joins: teut (~teut@122.161.83.81)
[13:21:00] <teut> https://dpaste.org/LiOj
[13:21:14] <teut> can someone help with this?
[13:22:03] *** Joins: i0e (~is0ke3@user/is0ke3)
[13:22:52] <teut> https://firebase.google.com/docs/auth/web/phone-auth
[13:23:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[13:24:28] *** Joins: wyclif (~wyclif@user/wyclif)
[13:29:00] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[13:29:17] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[13:29:22] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 256 seconds)
[13:29:59] *** Joins: wyclif (~wyclif@user/wyclif)
[13:31:07] *** Quits: cotko (~cotko@155.pool85-49-78.dynamic.orange.es) (Ping timeout: 256 seconds)
[13:34:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[13:35:32] *** Joins: wyclif (~wyclif@user/wyclif)
[13:35:36] *** Quits: darkdrgn2k (~darkdrgn2@user/darkdrgn2k) (Ping timeout: 256 seconds)
[13:39:07] <Exa> Hi, I'm working on an old website and finally upgraded jQuery from 1.x to 3.x.  Somehow I have some pages that "scroll" upon loading to the middle of the page, but I'm unable to find the code responsible of this scrolling.  Is there a way I can have my web browser track these scrolling events to save a stacktrace of what triggered it?  Thanks.
[13:39:47] <wez> Exa: I recommend upgrading further, to react or vue
[13:40:05] <teresko> I would just "upgrade" to native JS :P
[13:40:08] <Exa> wez: this is not possible, it's a really big application, and it's not what I'm asking for
[13:40:17] <wez> ah ok
[13:40:20] <Exa> it would take as much time as recoding everything
[13:40:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[13:40:50] <Exa> the client is not willing to pay for it ofc
[13:40:54] <wez> of course
[13:40:57] <wez> they never are
[13:40:58] <teresko> Exa: have you tried just searching for "scrollTo" ?
[13:41:01] *** Joins: wyclif (~wyclif@user/wyclif)
[13:41:50] <Exa> teresko: the thing is, there are code at some places that contains it, but it bundles a lot of libraries that may not even be called on that page
[13:42:08] <silly> https://developer.mozilla.org/en-US/docs/Web/API/Document/scroll_event
[13:42:27] <Exa> so it's difficult to understand which code to check, this is why I'd like to work on it from the opposite direction: checking in the browser what code triggers it
[13:42:47] <silly> although dunno if you can find the code responsible
[13:44:09] <silly> ah, i doubt it will reveal what triggered the scroll
[13:45:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[13:46:02] <Exa> I could probably have some code triggered if I add an event on the scroll event, but pretty sure I can't get a stracktrace of what triggered it that way
[13:46:33] *** Joins: wyclif (~wyclif@user/wyclif)
[13:46:48] <blueagain> Exa: you're using $.scrollTo?
[13:47:08] <Exa> I have no idea which code does the scrolling, it can be vanilla JS or jQuery
[13:47:14] <Exa> or something else
[13:48:20] <blueagain> no idea if this would help you, but you could trying monkey-patching scrollTo to find out when it gets called
[13:48:25] <blueagain> try*
[13:50:19] <teresko>  Exa: I would instead try two wrap every instance of `scrollTo` in a "logging closure"
[13:50:27] <silly> you can make it break on scrolling in general, it takes me to some js code in jquery on a random website
[13:50:56] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[13:50:57] <teresko> or .. hell ... breakpoints :D
[13:51:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[13:51:33] <silly> debugger -> event listener breakpoints -> control -> scroll
[13:51:40] <silly> both in firefox and chrome
[13:52:05] *** Joins: wyclif (~wyclif@user/wyclif)
[13:52:26] *** Joins: i0e (~is0ke3@user/is0ke3)
[13:54:31] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[13:56:05] <Simplar> which regexp replaces single quotes with two single quotes?
[13:56:22] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:56:40] <teresko> Simplar: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll
[13:57:07] <han-solo> n> JSON.strinfigy('hello world'); // ':)
[13:57:08] <jellobot> (fail) TypeError: JSON.strinfigy is not a function
[13:57:11] <han-solo> er
[13:57:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[13:57:33] <Cork> stringify not strinfigy
[13:57:37] *** Joins: wyclif (~wyclif@user/wyclif)
[13:57:42] <han-solo> yes
[14:01:41] <Exa> blueagain: monkeypatch is a great idea, thanks
[14:02:02] <Exa> silly: I'll try with a breakpoint, thanks
[14:02:52] <Exa> Simplar: this seems like an XY problem
[14:06:23] <Exa> silly: it seems to add breakpoints when an event watches the scrolling event, not when scrolling is triggered
[14:06:55] <silly> i don't know, i've never used it
[14:07:52] <silly> oic... :/
[14:10:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:12:36] <silly> Exa, can you paste a link to show a page with the issue?
[14:14:22] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[14:15:29] *** Joins: sa0 (~sa0sin@88.120.82.205)
[14:22:04] <rendar> can i change span's id on the fly with javascript? what about class?
[14:22:24] <silly> rendar, you can change all attributes
[14:23:10] <teresko> ... just a side not - spans usually dont get IDs ;)
[14:23:25] <teresko> *note
[14:23:52] <blueagain> ids are considered overrated in general
[14:24:18] <silly> i always end up with #root in react
[14:24:36] <blueagain> can't you just use <main>?
[14:24:44] <blueagain> or you don't like its semantics?
[14:25:02] <teresko> I used them for defining large and resuable "areas" of the code
[14:25:43] <stenno> main doesn't make sense
[14:25:58] <stenno> there shoudl only be a single main on one page
[14:26:10] <stenno> main doesn't make sense because e.g. a sidebar lives outside the main
[14:26:11] <silly> i love ids everywhere tho, then you can create links that scroll to anchors in a page
[14:26:39] <stenno> and if that was your react root element, it'd mean that the (react) sidebar/menubar would also be inside that main
[14:27:00] <silly> https://superuser.com/questions/295736/tmux-status-bar-messages-last-only-about-a-second-can-i-extend-this#post-form
[14:28:10] <rendar> silly, i see, it's a common thing to change class attributes to change the style of a span?
[14:28:15] <rendar> or there are better methods?
[14:28:32] <silly> https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key#javascript
[14:28:45] <blueagain> stenno: fair point
[14:29:38] <silly> especially on mdn... i even had a userscript that would create links where ever there's an id
[14:30:33] <silly> rendar yes, use https://developer.mozilla.org/en-US/docs/Web/API/Element/classList
[14:30:46] <silly> or modify el.class directly
[14:31:13] <silly> src... el.className
[14:31:16] <silly> *sry
[14:31:35] <rendar> i see
[14:31:40] <silly> but .classList has add, remove and toggle methods
[14:32:34] <silly> even .replace
[14:33:20] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:33:34] <stenno> remember when we didn't have classlist
[14:33:37] <stenno> bad times
[14:33:39] <silly> rendar, https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList
[14:34:00] <rendar> silly, thanks
[14:39:30] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[14:40:32] <Exa> silly: I can't paste a link, it's not a public app
[14:41:00] *** Quits: Simplar (~quassel@188.163.93.241) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:41:57] <Exa> I monkeypatched window. scroll, scrollTo, scrollBy, etc... but neither are called. maybe it does something like body.scrollTop = xxx
[14:43:34] <silly> scroll usually isn't a thing that's used excessively, grep through your code base
[14:44:05] <silly> and sprinkle breakpoints or debugger statements everywhere
[14:45:49] <silly> are you sure it's not the browser, remembering scroll position when using back and forward navigation?
[14:45:57] <blueagain> silly: you use tmux? I mostly still use gnu screen I believe it's not being actively developed anymore
[14:46:08] <Exa> silly: yes I'm sure
[14:46:21] <blueagain> been considering the move to tmux
[14:46:25] <Exa> it does that on multiple environments and on multiple pages
[14:46:35] <silly> yes, i've heard that there still are screen users... but it's tmux here
[14:47:14] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9e12:ddf5:e7cc:8a2a:f65c)
[14:47:17] <blueagain> I was using screen before tmux even existed, lol
[14:47:28] <blueagain> screen is like super old, I believe from the 80s
[14:47:57] <blueagain> yup, 87
[14:48:24] <silly> uh, in 2000 i made first contact with screen, but it's been tmux for me when i really started using it
[14:48:50] <blueagain> anything that's any different in it? except the non-copyleft license
[14:49:00] <silly> Exa, how many matches do you have when you search for `scroll`?
[14:49:21] <silly> blueagain, i really don't know anything about screen
[14:49:29] <blueagain> oh, ok
[14:49:39] <silly> there's #tmux
[14:49:58] <blueagain> yeah, just out of interest, I can look it up myself on wiki or the project page
[14:50:13] <silly> or just repeat the question in #tmux
[14:50:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:9e12:54a2:f1ed:cf5c:274a) (Ping timeout: 240 seconds)
[14:50:38] <Exa> silly: since there are many JS files loaded in the page, some minified by webpack, some depending to each other it's not easy to understand which source code is actually used
[14:51:02] <Exa> things are also coming from multiple repositories
[14:51:03] <Exa> it's hell
[14:51:05] <silly> Exa, just grep through everything
[14:51:33] <blueagain> yeah, I'm not planning on switching now so going in and asking isn't that relevant
[14:51:43] <blueagain> but thanks for the tip, I'll do it if I need any help when switching
[14:51:46] <Exa> silly: thanks for your help I'll continue to do that, I'll also start to disable loading of some JS to try to find which JS file is responsible
[14:51:51] <silly> or, in an affected site, use the prettifier and search in your devtools to get an overview
[14:53:19] <silly> with tmux, i don't like the many breaking changes every now and then
[14:53:41] <blueagain> you can just downgrade if you use Arch
[14:53:43] <silly> fixing the config file is annoying
[14:54:03] <blueagain> until you have time to fix the config
[14:54:04] <silly> yea, or apt-pinning with debian
[14:54:47] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:54:49] <silly> i wanted to switch to arch years ago
[14:55:08] <blueagain> it is awfully nice, I've been using it for years. was originally a debian/ubuntu user
[14:55:32] *** Joins: chao (~stenno@user/stenno)
[14:55:33] <silly> maybe if i buy a new computer
[14:56:04] <blueagain> did a brief stint with gentoo, decided that compiling a text editor for 2 hours on a small computer is definitely not my choice pasttime, and since then I'm no arch
[14:56:21] <blueagain> on*
[14:56:29] <silly> i can't stand when the display in front of me turns black, or just changes in general
[14:57:00] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[14:57:34] <silly> with a new one to the side, i might be able to make the switch
[14:58:28] * silly looking at fanless intel NUCs
[14:59:00] <blueagain> irssi is so awesome, `/lastlog pattern` allows you to search the chat back
[14:59:07] <silly> are you still on X11 or did you switch to wayland?
[14:59:34] <blueagain> i'm on endeavouros / cinnamon, and cinnamon hasn't made the switch to wayland yet, so X11
[15:00:05] <blueagain> they're a bit slow to adopt new features, but I really like this desktop
[15:00:23] <blueagain> endev is basically an arch installer
[15:01:02] <silly> i'm using xlib in a node module and porting it to wayland seems impossible :/
[15:01:03] <blueagain> (unlike manjaro has its own repos)
[15:01:21] <blueagain> oh, why? no node wayland bindings?
[15:01:47] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 256 seconds)
[15:01:52] <rendar> let's say i want to set className to a certain value and after 5s revert it back to the previous name, what is the best way to accomplish this?
[15:01:57] <silly> no, waylands enhanced security doesn't allow
[15:02:14] <blueagain> rendar: set a timer
[15:02:40] <blueagain> silly: in what sense?
[15:02:41] <silly> which is nice, but my app will never work with wayland
[15:03:07] <silly> i retrieve information about the current focused window
[15:03:17] <teresko> rendar: why? if it is just for animation, then just use animation that triggers when class is applied but only runs once
[15:03:23] <silly> spying in wayland isn't allowed
[15:03:45] *** Joins: chao (~stenno@user/stenno)
[15:03:48] <rendar> teresko, yes, how to do that?
[15:03:53] <blueagain> there seems to be node-wayland, but it seems pretty dead
[15:04:03] <blueagain> last updated 2014
[15:04:18] <blueagain> but yeah
[15:05:33] <teresko> rendar: look up keywords "animation" and "keyframes"
[15:06:11] <teresko> for css, that is
[15:06:17] <rendar> teresko, the thing is: i already have an animation! that animation is infinite, and for 5s i want to substitute that animation with another animation
[15:06:34] <teresko> hmm
[15:06:42] <teresko> well, then just to steTimeout :D
[15:06:49] <teresko> *setTimeout
[15:06:52] <silly> compositor or wayland client has to allow me what i want to do, like a gnome extension would do that
[15:07:35] <silly> afaik, i can't just hook into wayland libs, like i can with X11
[15:07:40] <blueagain> how would you do a screen recording application in wayland then?
[15:07:48] <blueagain> or is that not a thing
[15:07:53] <silly> the client has to allow it
[15:08:04] <silly> or implement it
[15:08:12] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[15:08:25] <rendar> teresko, ok
[15:09:26] <silly> so you get different screen recorders for sway, gnome, and every other wayland compositor
[15:09:55] <Maxdamantus> What do you mean spying is not allowed? So how do screen capture tools (eg, grim) work?
[15:10:20] <silly> but i might be wrong
[15:10:48] <Maxdamantus> If you mean getting meta-information about windows, that's just up to individual compositors, but afaik tools like grim just use a standard protocol for screen capture.
[15:11:04] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:11:12] <silly> "If you mean getting meta-information about windows, that's just up to individual compositors"
[15:11:12] <Maxdamantus> and that works by default for me. I didn't have to enable anything (in sway) for grim to work.
[15:11:15] <silly> ^this
[15:11:34] <Maxdamantus> Right, like window position and layout, because that's not part of the Wayland protocol.
[15:11:49] <silly> ok, i'm learning about wayland, slowly
[15:12:04] *** Quits: suss (~user@user/suss) (Ping timeout: 268 seconds)
[15:12:39] <Maxdamantus> eg, I can run `swaymsg -r -t get_tree` to dump all information about window layout in sway.
[15:13:14] <silly> interesting
[15:13:32] <silly> i could make something for sway and gnome
[15:14:04] <Maxdamantus> so that connects to sway using a separate unix socket and it talks some sway-specific protocol (maybe it's the same protocol used in i3, dunno) to request that information.
[15:14:09] <silly> for all windowmanagers in x11 it's already done in <100 lines of code
[15:14:29] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:14:29] <silly> wayland support is a can of worms tho
[15:14:36] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 240 seconds)
[15:15:45] *** chao is now known as stenno
[15:18:57] <Maxdamantus> I switched to wayland because I started getting graphical glitches in Xorg. I was also thinking of maybe upgrading one of my displays to something HiDPI, but Wayland seems worse fore HiDPI.
[15:19:38] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:fc98:bb5f:7d17:fcbd)
[15:19:39] <silly> wow, worse?
[15:19:57] <silly> no using different dpi with multiple monitors?
[15:19:59] <Maxdamantus> Yes. It's pretty ridiculous.
[15:20:12] <silly> i thougth this was fixed with wayland
[15:20:29] <blueagain> Maxdamantus: I'm running arch in a virtual machine on a computer that has hidpi and everything works flawlessly. where are you encoutering this issue?
[15:20:35] <Maxdamantus> Wayland tries to fix it, but it does it partially and in such a way that it makes things much worse.
[15:20:56] <Maxdamantus> It does integer-based scaling at the protocol level.
[15:21:20] <Maxdamantus> and then a compositor will do further fractional scaling by just rescaling your already rasterised pixels.
[15:21:37] <silly> lol
[15:21:49] <blueagain> I get a crisp display, can't complain
[15:21:50] *** Quits: pycode (~pycode3@2001:b07:5d28:551:2da1:82f1:2901:8ce5) (Ping timeout: 252 seconds)
[15:22:06] <silly> blueagain, you have no to monitors with different dpi?
[15:22:10] <silly> *two
[15:22:18] <Maxdamantus> so eg, if you want one display to have 1.5 pixel density, it will render it at 2x and then scale that down to 75% (because 0.75*2 = 1.5)
[15:22:21] <blueagain> silly: nope, just a laptop
[15:22:56] <silly> blueagain, if you get an external monitor, make sure dpi matches with your laptop display
[15:23:11] <Maxdamantus> in Xorg you can already just define per-screen DPIs, and at least Qt applications will handle that natively.
[15:23:42] <Maxdamantus> so definitely if you use Qt, you'll get scaling artifacts in Wayland using "fractional scaling" that you don't get in Xorg.
[15:23:56] <Maxdamantus> It should be just a matter of time before things like Firefox handle it properly.
[15:24:00] <blueagain> in that case, that's definitely something they ought to fix in wayland
[15:24:12] <Maxdamantus> Yes, they should fix it.
[15:24:25] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[15:24:37] *** Joins: DPA (~DPA@94.16.128.75)
[15:24:38] <silly> *somebody
[15:24:45] <blueagain> maybe that's the reason cinnamon is conservative about the switch
[15:24:47] <silly> *ANYBODY!
[15:25:13] <silly> blueagain, you can't just "switch"
[15:25:23] <silly> it's an entirely new project
[15:25:30] <blueagain> I didn't mean "switch" as in pulling a switch
[15:25:36] <blueagain> I meant rewriting their code
[15:25:41] <silly> it is pulling a switch
[15:25:46] <blueagain> to use the wayland apis
[15:25:57] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[15:26:17] <Maxdamantus> anyway, here's a reddit post I found when I was looking into this a while ago: https://www.reddit.com/r/kde/comments/lficfe/wayland_fractional_scaling_may_be_sort_of_a/
[15:26:29] <silly> imo, it's best to just leave the old project as is and interested developers create a new project
[15:26:38] <blueagain> I was somehow under the impression cinnamon was a gnome 3 fork that stayed atop gtk 3
[15:26:45] <blueagain> and that gtk 3 implemented wayland as a backend?
[15:26:53] <silly> wasn't that gnomev2?
[15:27:00] <blueagain> no, that was mate
[15:27:06] <silly> oh TIL
[15:27:15] <silly> tomorrow i forgot again
[15:28:41] <teresko> lol .. gnome
[15:28:45] <teresko> my condolences
[15:28:50] <blueagain> why is half reddit like deleted users
[15:29:05] <blueagain> but yeah
[15:29:16] <blueagain> teresko: what's wrong with gnome?
[15:29:21] <silly> it might have been just one deleted user :)
[15:29:48] <teresko> reddit is really bid on enforcing an echochember
[15:30:03] <teresko> it's all taht "social cohesion" stuff from their chinese owners
[15:30:15] <blueagain> teresko: you just described all social media
[15:31:06] <teresko> not really, for example Minds is pretty neutral
[15:31:21] <blueagain> never heard of minds
[15:31:29] <blueagain> mean the big ones, fb etc.
[15:31:42] <Alexendoo> "Minds is an alt-tech blockchain-based social network"
[15:31:50] <Alexendoo> Well, sounds more like you found the echo chamber you agree with
[15:32:26] <teresko> lol, I don't tend to agree with humans in general :P
[15:32:26] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[15:32:41] <blueagain> well, given the most social media also skews pretty hard to the left, that makes anything else "alt-tech", whatever that means
[15:32:51] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[15:34:11] <silly> "I don't tend to agree with humans in general" ...so NO! lol
[15:34:33] <blueagain> disagreement is kind of crucial to human progress
[15:34:48] <teresko> blueagain: "alt tech" basically just means "not froim scilicon walley" .... that's the closes common thing they seem to have
[15:35:05] <teresko> sorry, wrong ping
[15:35:09] <teresko> it was for Alexendoo
[15:35:34] <Alexendoo> teresko: The bit I was focused on was actually the blockchain part
[15:35:46] <Alexendoo> I hadn't heard the term alt-tech before just now
[15:35:56] <blueagain> I have found blockchain to be more often a scam than anything else
[15:36:06] <blueagain> also nft etc., just a huge pile of scam
[15:36:17] <teresko> they use crypto as medium for buying/selling ads
[15:36:29] <teresko> I don't think it is even traded
[15:36:54] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[15:36:55] <blueagain> how do you even qualify ads' worth then?
[15:37:18] <blueagain> in classical advertisement you'd say x millicents per page view
[15:37:23] <teresko> don't ask me, I have no investigated further
[15:37:24] <blueagain> doesn't work with crypto, too volatile
[15:37:33] <blueagain> sounds like a scam to me
[15:39:50] <teresko> that's like saying that Bitchute is a piracy site, just because you use torrents as a technology for "load sharing" of the videos
[15:40:21] <teresko> you really have not paid attention to anything outside facebook/youtube/reddit
[15:40:23] *** Joins: pmercado (~pmercado@186.107.40.57)
[15:40:56] <silly> classical advertisement has shifted to just in time bidding too
[15:41:24] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[15:41:34] *** Joins: silverdust (~silverdus@user/silverdust)
[15:41:38] <blueagain> silly: but you'd be bidding on a slot over time
[15:41:41] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[15:41:52] <blueagain> i'd be interested how this 'over time' is qualified with crypto
[15:42:14] <silly> i thought it was bidding on every view
[15:42:52] <blueagain> that'd solved the problem, if it's automated, sure
[15:43:00] <blueagain> you just enter your limits and that works
[15:43:01] <silly> https://support.google.com/authorizedbuyers/answer/6136272?hl=en
[15:43:12] <stenno> torrents are really not good for 'load sharing'
[15:43:38] <stenno> it might lead to parts of the video not being available
[15:44:06] <stenno> there is a reason why the order of the data blocks downloaded is randomized
[15:44:27] <blueagain> silly: that sounds like a lot of resource-consuming work for an individual impression...
[15:44:29] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9e12:ddf5:e7cc:8a2a:f65c) (Remote host closed the connection)
[15:44:36] <teresko> have you experienced any outages for bitchute videos?
[15:44:39] <silly> that's what i thought
[15:44:44] <teresko> or have you never heard about it ...
[15:45:00] <silly> it'll cost more power than the ad itself
[15:45:03] <blueagain> yup
[15:45:05] <stenno> i haven't heard of bitchute yet but i understand the concept from what you have described
[15:45:11] *** Joins: p-i- (~Ohmu@2403:6200:8978:9e12:41de:2f81:a206:a893)
[15:45:15] <stenno> because i looked into this concept many many years ago already
[15:45:37] <teresko> well, I don't know how they do it, but I have had no issues
[15:45:41] <blueagain> teresko: I don't really use any social media, but yeah, I'm only aware of the big ones
[15:45:48] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[15:45:57] <stenno> if thats how it is, then it is against the spirit of the torrent protocol
[15:46:22] <blueagain> I know there's mastadon and gab and countless others, but I know nothing past their names and roughly where they sit on a political spectrum
[15:46:35] <blueagain> mastadon is actually software though
[15:46:38] <stenno> (and that was the reason why i abandoned my own project for that)
[15:48:25] <silly> oh dat ot escalation... i'll back to something at hand...
[15:48:43] <blueagain> just don't do anything silly
[15:49:04] <silly> silly is good
[15:52:14] *** Joins: mearp (~mearp@gateway/vpn/pia/mearp)
[15:53:31] <pizza> is it possible to install yarn by itself, without npm?
[15:53:49] *** Quits: mearp (~mearp@gateway/vpn/pia/mearp) (Client Quit)
[15:54:29] <blueagain> pizza: pacman -S yarn on Arch, consult your distro otherwise
[15:55:37] <blueagain> yarn doesn't need npm installed afaik. its only dependency is node
[15:56:56] <wez> blueagain: How do you install yarn without npm?
[15:57:15] <stenno> with your package manager, as they said
[15:57:21] <stenno> like OS package manager
[15:57:44] <wez> stenno: oh that is crazy, use nvm to install node, not the OS package. Those are usually 2 or 3 LTS versions behind
[15:58:03] <stenno> wez: i am talking about yarn, not node.
[15:58:08] <pizza> so if i need to jump node versions i also need to reinstall yarn, if i install it via npm. correct?
[15:58:42] <blueagain> yarn/npm just manage dependencies. they do not have per se a lot to do with node, node runs the code
[15:59:13] <blueagain> obviously it doesn't make sense to use them without node since you wouldn't be able to run the code, but they're different tools
[15:59:24] *** Quits: stagas (~stagas@2a02:587:c41b:6388:b8f6:eccb:ec9b:2747) (Ping timeout: 240 seconds)
[16:03:34] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[16:06:04] <pizza> my hunch is yes, i'm thinking since using nvm switches your node/npm environment(?) i would need to install yarn again for that specific version
[16:06:10] *** Joins: trevors (~trevors@user/trevors)
[16:11:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:14:43] *** Joins: stagas (~stagas@2a02:587:c404:7045:19a6:ba60:5eda:c6f6)
[16:15:25] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:16:05] *** Joins: TubbyTommy (~blank@user/slimmyjimmy)
[16:16:53] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Quit: going to lala land)
[16:23:01] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Quit: Leaving)
[16:24:08] <wez> pizza: BBQ base, some type of protien, pineapple and olives minimum
[16:24:58] <blueagain> wez: you definitely want some meat with your pineapple
[16:25:15] <wez> blueagain: correct, definitely not pork based
[16:25:41] <wez> Unless in sausaage form
[16:25:49] <blueagain> wez: I was thinking more about goose/chicken breast
[16:25:55] <wez> yum
[16:25:58] <blueagain> but pork suasages also work
[16:26:05] <blueagain> sausages*
[16:26:11] <wez> Peperoni or chucken
[16:31:24] *** Joins: voltage_ (~voltage@user/voltage)
[16:32:32] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[16:34:52] <pizza> its too early for this context switching, i thought i was in ##cooking
[16:34:54] <pizza> D:
[16:35:45] *** Joins: trevors (~trevors@user/trevors)
[16:41:21] *** Joins: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com)
[16:41:43] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[16:44:41] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Remote host closed the connection)
[16:49:58] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[16:50:10] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[16:50:32] *** Joins: dmaislin_ (~dmaislin@047-233-046-055.res.spectrum.com)
[16:51:20] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[16:51:34] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[16:52:04] *** Joins: codebam (~codebam@user/codebam)
[16:52:31] *** Quits: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com) (Ping timeout: 256 seconds)
[16:56:00] <wez> pizza: You are right, it is 00:25
[16:56:06] <wez> night night
[16:57:00] <blueagain> 14:25 here
[16:57:03] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[16:57:12] <blueagain> wez: you're either very left or very right of me. :)
[16:57:34] <silly> blueagain, i'm with you
[16:58:55] <blueagain> silly: EU then?
[16:59:19] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[16:59:49] <silly> yess!
[17:00:10] <silly> but it could have been africa as well
[17:00:13] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[17:00:24] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[17:00:27] <blueagain> it could. but I don't know that africa stretches its timezones like the EU does.
[17:00:36] <silly> even more
[17:01:04] *** Joins: Deneb^ (~johnch@245.82.159.143.dyn.plus.net)
[17:01:09] <blueagain> like spain would totally make more sense in as gmt 0
[17:01:13] *** Joins: tex (~super@user/dix)
[17:01:45] <blueagain> even western france is further west than dover
[17:01:54] <blueagain> then again, china has one timezone.
[17:02:17] <silly> oh til
[17:02:45] <theskillwithin> what if you stand on the south pole?
[17:02:49] *** Joins: mintoyatsu (~mint@user/mintoyatsu)
[17:04:11] <blueagain> since our day is based on the sun, a timezone doesn't really make sense at the poles
[17:04:47] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:04:55] <blueagain> it's just a convention anyway, time is the same for everyone
[17:05:23] <blueagain> I'm more interested in how people will define their age once humanity becomes multiplanetary
[17:05:42] <blueagain> it's a non-trivial question imho
[17:05:43] *** Joins: Tempesta (~Tempesta@user/tempesta)
[17:06:27] <silly> theskillwithin, i saw a time zone run on tv in a documentary
[17:06:50] <silly> a quick walk through all time zones
[17:07:48] <silly> i guess it makes most sense to pin the entire antarctic to GMT
[17:08:21] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[17:08:31] <silly> which is not what they really do :D https://www.timeanddate.com/time/zone/antarctica
[17:08:40] <theskillwithin> the sun and the rotation of the earth
[17:09:02] <blueagain> silly: you don't have a concept of a day though, no? it's just half a year darkness, half a year light.
[17:09:06] <silly> GMT is only Toll Station lol
[17:09:12] <silly> *Troll
[17:10:08] <theskillwithin> i guess the space station they use GTM 0
[17:11:01] <blueagain> GMT makes no sense out of earth
[17:12:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:12:04] <silly> " Due to the extreme lower temperature needed, joining the 300 club can only happen on a limited number of days in the deep winter months. At the South Pole, the marker to run round is (obviously) the geographic South Pole through all time zones, with the trek from sauna to pole and back to the building taking a few minutes."
[17:12:15] <silly> https://www.coolantarctica.com/Community/antarctica-celebrations-traditions.php
[17:12:19] <blueagain> oO
[17:13:26] <silly> ISS should use StarTrek StarTime
[17:13:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[17:13:49] <silly> stardate
[17:14:16] *** Joins: pulse (~pulse@user/pulse)
[17:14:49] *** Joins: wyclif (~wyclif@user/wyclif)
[17:15:24] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:17:55] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Quit: Leaving)
[17:18:03] *** Quits: Deneb^ (~johnch@245.82.159.143.dyn.plus.net) (Quit: Leaving)
[17:20:31] *** Joins: DrowningElysium (uid190788@user/drowningelysium)
[17:21:07] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:21:23] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[17:21:47] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:23:13] *** Joins: hassoon_ (hassoon@user/hassoon)
[17:23:15] *** Joins: silverdust (~silverdus@user/silverdust)
[17:24:35] *** Joins: trevors (~trevors@user/trevors)
[17:27:32] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[17:28:19] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[17:32:11] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[17:32:55] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[17:33:26] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[17:35:40] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Read error: Connection reset by peer)
[17:36:18] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[17:36:32] *** Joins: VoidSync (~sync@user/voidsync)
[17:39:45] *** Joins: darkdrgn2k (~darkdrgn2@bras-base-toroon4425w-grc-40-76-64-72-176.dsl.bell.ca)
[17:45:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[17:48:22] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:50:10] *** Joins: suss (~user@user/suss)
[17:51:15] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[17:52:50] *** Joins: Junxter (~Junxter@222.95.164.193)
[17:53:57] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:54:12] *** Quits: Junxter (~Junxter@222.95.164.193) (Max SendQ exceeded)
[17:54:39] *** Joins: Junxter (~Junxter@222.95.164.193)
[18:02:31] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Quit: taupiqueur)
[18:02:35] *** Joins: trevors (~trevors@user/trevors)
[18:03:06] *** Joins: wyclif (~wyclif@user/wyclif)
[18:06:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:06:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:06:17] *** Joins: wroathe (~wroathe@user/wroathe)
[18:06:25] *** Quits: sam_1 (~sam_1@87.51.251.118) (Quit: Lost terminal)
[18:11:45] *** Joins: ejjfunky (~ejjfunky@125.164.21.7)
[18:12:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:16:23] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:18:33] *** Quits: nepeat (~nepeat@79.110.170.60) (Read error: Connection reset by peer)
[18:19:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:20:46] *** Joins: sidy (~sidy@user/sidy)
[18:22:03] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[18:23:57] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:24:10] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:24:45] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[18:25:11] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:25:48] *** Joins: nepeat (~nepeat@79.110.170.59)
[18:26:11] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:26:11] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:26:11] *** Joins: wroathe (~wroathe@user/wroathe)
[18:26:58] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[18:28:40] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[18:30:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:35:09] *** Quits: ejjfunky (~ejjfunky@125.164.21.7) (Quit: Leaving)
[18:39:06] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 272 seconds)
[18:39:12] *** Joins: ejjfunky (~ejjfunky2@125.164.16.41)
[18:40:21] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[18:40:53] *** Quits: zer0 (~zer0@user/zer0) (Remote host closed the connection)
[18:41:16] *** Joins: src (~src@user/src)
[18:44:34] *** Quits: ejjfunky (~ejjfunky2@125.164.16.41) (Quit: Leaving)
[18:45:13] *** Joins: ejjfunky (~ejjfunky2@125.164.19.196)
[18:46:25] *** Joins: silverdust (~silverdus@user/silverdust)
[18:50:23] *** Joins: wyclif (~wyclif@user/wyclif)
[18:50:30] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[18:51:22] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:51:42] *** Joins: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39)
[18:54:27] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[18:54:36] *** Quits: TubbyTommy (~blank@user/slimmyjimmy) (Ping timeout: 240 seconds)
[18:55:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[18:56:34] *** Joins: foo (~foo@user/foo/x-8763512)
[18:56:37] <foo> I'm doing some research on a mobile-friendly calendar, something like this: https://demo.mobiscroll.com/javascript/eventcalendar/mobile-month-view -> would love to feed it events via JSON or such and they just appear. Still doing some research, thought I'd share in case anyone is a fan of something ?
[18:57:50] *** Joins: Rockwood (~Rocky@user/rocky)
[18:59:32] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[19:00:01] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[19:03:07] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:04:03] *** Joins: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net)
[19:04:04] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[19:06:21] *** Joins: pycode (~pycode3@2001:b07:5d28:551:6826:61e3:38bf:c94f)
[19:08:16] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Killed (NickServ (GHOST command used by Sven_vB_)))
[19:08:18] *** Joins: Sven_vB_ (~sven@user/sven-vb/x-2094958)
[19:08:31] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[19:08:52] *** Joins: onosendi (~onosendi@user/onosendi)
[19:09:00] *** Joins: wyclif (~wyclif@user/wyclif)
[19:10:27] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:13:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:13:55] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[19:14:21] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[19:15:06] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:b876:cfb6:6a14:5ce2) (Quit: Textual IRC Client: www.textualapp.com)
[19:15:08] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[19:16:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[19:16:45] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[19:18:49] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:19:13] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[19:20:40] <silly> you get a thumbs up from me only if it's silly
[19:21:07] *** Joins: codebam (~codebam@user/codebam)
[19:25:02] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[19:27:52] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[19:28:00] <blueagain> ?
[19:29:00] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
[19:29:11] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:29:46] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 272 seconds)
[19:30:54] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 260 seconds)
[19:31:04] *** Quits: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:32:03] *** Joins: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39)
[19:33:28] *** Joins: han-solo (~han-solo@user/han-solo)
[19:34:23] *** Joins: trevors (~trevors@user/trevors)
[19:36:07] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[19:37:17] *** Joins: matsaman (~matsaman@user/matsaman)
[19:37:34] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:38:19] *** Quits: darkdrgn2k (~darkdrgn2@bras-base-toroon4425w-grc-40-76-64-72-176.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:39:36] *** Joins: Rockwood_ (~Rocky@user/rocky)
[19:40:21] *** Quits: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:41:49] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 240 seconds)
[19:43:56] *** Joins: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39)
[19:44:03] *** Quits: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39) (Client Quit)
[19:44:12] *** Quits: audio (~audio@user/audio) (Ping timeout: 240 seconds)
[19:49:49] *** Joins: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39)
[19:51:24] *** Joins: kakashiAL (~kakashi@105.157.34.82)
[19:52:34] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.4)
[19:53:30] *** Joins: onosendi (~onosendi@user/onosendi)
[19:55:19] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 256 seconds)
[19:56:03] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 250 seconds)
[19:57:28] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:01:31] *** Joins: ___Rockwood__ (~Rocky@user/rocky)
[20:02:59] *** Quits: Rockwood_ (~Rocky@user/rocky) (Ping timeout: 250 seconds)
[20:04:54] *** Quits: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[20:05:30] *** Joins: Rockwood_ (~Rocky@user/rocky)
[20:07:02] *** Joins: Rockwood (~Rocky@user/rocky)
[20:07:53] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Remote host closed the connection)
[20:08:36] *** Quits: ___Rockwood__ (~Rocky@user/rocky) (Ping timeout: 240 seconds)
[20:09:48] *** Quits: Rockwood_ (~Rocky@user/rocky) (Ping timeout: 240 seconds)
[20:13:05] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[20:13:35] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:17:16] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[20:18:52] *** Joins: darkdrgn2k (~darkdrgn2@23-233-76-221.cpe.pppoe.ca)
[20:22:57] *** Joins: p-i-_ (~Ohmu@183.89.30.105)
[20:22:58] *** Joins: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net)
[20:26:12] *** Quits: p-i- (~Ohmu@2403:6200:8978:9e12:41de:2f81:a206:a893) (Ping timeout: 240 seconds)
[20:31:36] <t3nj1n> https://youtu.be/Uo3cL4nrGOk
[20:31:36] <skillbot> YouTube Title: Interview with Senior JS Developer in 2022
[20:34:34] *** Sven_vB_ is now known as Sven_vB
[20:36:43] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[20:38:03] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:41:49] *** Quits: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:44:47] *** Joins: zebrag (~chris@user/zebrag)
[20:46:33] <onosendi> lol
[20:47:05] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[20:47:23] *** Joins: stenno (~stenno@user/stenno)
[20:47:25] *** Quits: peteyboy1 (~peteyboy1@95.169.226.66) (Ping timeout: 240 seconds)
[20:47:48] *** Joins: Akiva (~Akiva@user/Akiva)
[20:48:32] <wyclif> Hahahahaha
[20:48:49] <wyclif> "JQuery? What are you, five?"
[20:50:27] <onosendi> That was some funny shit.
[20:50:47] <wyclif> Indeed.
[20:50:56] *** Joins: trevors (~trevors@user/trevors)
[20:55:29] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[20:57:35] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[20:57:59] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Max SendQ exceeded)
[20:58:01] <silly> google has nothing for jjquery
[20:58:23] <silly> and no jayjquery
[20:58:25] *** Quits: Junxter (~Junxter@222.95.164.193) (Read error: Connection reset by peer)
[20:58:35] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[20:58:35] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[20:58:48] <silly> no jayjayquery too
[20:58:48] *** Joins: Junxter (~Junxter@222.95.164.193)
[20:59:46] <matsaman> it's good to watch the 'junior' version, too
[21:01:04] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[21:01:17] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[21:01:32] *** Joins: cthulchu_ (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[21:01:48] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[21:05:08] *** Joins: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39)
[21:05:54] <silly> TIL country of transnistia uses plastic coins as real money https://de.wikipedia.org/wiki/Transnistrien#/media/Datei:2014-1-Rubel-Prednistrojen-Kursmuenze-Avers.jpg
[21:05:55] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[21:06:30] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:06:45] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[21:08:53] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:09:24] <ox1eef> thats so silly
[21:09:34] <blueagain> silly: oO
[21:10:00] <blueagain> silly: that's not a real country
[21:10:41] <silly> they do seem to have their own president from time to time
[21:10:54] <blueagain> ah, the russians will take control of them soon
[21:11:40] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[21:11:41] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:11:58] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[21:12:09] <ox1eef> thats the first russia reference ive seen on irc all this time. nice thing about irc. social media is drenched in it.
[21:13:25] *** Quits: kakashiAL (~kakashi@105.157.34.82) (Ping timeout: 240 seconds)
[21:13:53] *** Joins: ckdCreations (~ckdCreati@147.55.133.137)
[21:13:59] *** Joins: zer0 (~zer0@user/zer0)
[21:14:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:14:14] *** Joins: peteyboy1 (~peteyboy1@95.169.226.66)
[21:16:29] *** Joins: paule32 (~paul@nat-91-137-21-18.net.encoline.de)
[21:16:29] *** Quits: paule32 (~paul@nat-91-137-21-18.net.encoline.de) (Changing host)
[21:16:29] *** Joins: paule32 (~paul@user/paule32)
[21:16:37] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:16:59] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:17:27] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:18:04] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[21:18:08] <wyclif> matsaman: Here's the Junior Developer version: https://youtu.be/-9jttTSSDzc
[21:18:09] <skillbot> YouTube Title: Interview with Junior JS Developer in 2022
[21:18:38] <ox1eef> he left and so far hasn't returned.
[21:19:34] *** Joins: codebam (~codebam@user/codebam)
[21:21:05] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[21:22:14] *** Quits: wyclif (~wyclif@user/wyclif) (Quit: leaving)
[21:23:49] <blueagain> ox1eef: who?
[21:24:14] <ox1eef> well, now they've both left: wyclif & matsaman.
[21:30:55] <ljharb> lol that video's been dropped in this channel a bunch of times in the last day
[21:35:11] *** Joins: k8yun (~k8yun@user/k8yun)
[21:43:44] *** Joins: trevors (~trevors@user/trevors)
[21:47:18] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[21:47:57] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[21:55:06] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 260 seconds)
[21:55:46] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[21:56:16] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[21:56:24] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[21:57:15] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Remote host closed the connection)
[21:57:57] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[22:00:21] *** Joins: ejjfunky0 (~ejjfunky2@125.164.22.39)
[22:01:15] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[22:03:03] *** Quits: ejjfunky (~ejjfunky2@125.164.19.196) (Ping timeout: 256 seconds)
[22:03:04] *** Joins: TubbyTommy (~blank@user/slimmyjimmy)
[22:07:30] *** Quits: ejjfunky0 (~ejjfunky2@125.164.22.39) (Remote host closed the connection)
[22:08:41] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[22:10:45] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[22:10:50] *** scoobydoob is now known as scoobydoo
[22:13:47] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[22:13:48] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[22:14:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:15:58] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[22:16:02] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[22:16:48] *** Joins: hashfunc1818 (~user@2601:5c0:c280:7090:8c1e:afa3:b36b:39be)
[22:17:07] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:18:02] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[22:18:19] <jaawerth> I think I've heard "jquery" spoken of more times in that video than I've seen it come up anywhere else in the past... month, at least
[22:18:33] *** Tobbi__ is now known as Tobbi
[22:18:37] *** Quits: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:18:43] <blueagain> I don't what's funny about that video
[22:18:47] <blueagain> maybe I'm dumb
[22:19:21] *** Joins: Betal (~Betal@user/betal)
[22:19:37] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 240 seconds)
[22:21:50] *** Joins: codebam (~codebam@user/codebam)
[22:24:13] <theskillwithin> the senior one was funny
[22:24:16] <sheetjs> does v8 have a label limit?
[22:24:47] *** Quits: pycode (~pycode3@2001:b07:5d28:551:6826:61e3:38bf:c94f) (Ping timeout: 252 seconds)
[22:25:56] <jaawerth> I don't find it funny either. like, it's just referencing htings like "yes, there ARE too many crappy tutorials that people rely on!" I usually don't like that kind of humor, even when it isn't also kinda mean-spirited
[22:26:19] <ljharb> sheetjs: labels?
[22:26:24] <ljharb> sheetjs: the label limit should be zero :-p
[22:26:33] <jaawerth> but the "I am referencing thing you know!" is also just in general a kind of humor I have limited patience with
[22:26:39] <ljharb> jaawerth: it's just an outlet for people who are grumpy about having to learn things
[22:26:41] <sheetjs> what's the 2022 way of emulating goto in JS
[22:26:55] <ljharb> not doing that?
[22:27:07] <ljharb> labelled breaks are still the only way to do it
[22:27:12] <ljharb> but, like, why
[22:27:38] <sheetjs> transpiling from VBA
[22:28:29] <blueagain> I wouldn't say the average level of a js developer is any lower than say, that of a php dev
[22:28:58] <blueagain> in fact it's probably hard to make a claim about the level of developers with any language
[22:29:39] <sheetjs> the average level of a ___ developer is negatively correlated to the popularity of ___
[22:30:17] <ljharb> sheetjs: ew, why not rewrite the algorithm
[22:30:41] *** Joins: matsaman (~matsaman@user/matsaman)
[22:30:48] <jaawerth> right, JS is an easy target because there are just MORE js devs, which also means more bad ones, more ecosystem chaos, etc
[22:30:56] <sheetjs> the goal is not to write an optimizing compiler
[22:31:06] <blueagain> yeah but that is no statement about the quality of the language itself
[22:31:10] <blueagain> it's just popularity bashing
[22:31:12] <blueagain> which is stupid
[22:31:38] <sheetjs> there are two types of programming languages: those people hate and those that are unused
[22:31:39] <jaawerth> ljharb: given who's doing it it's probably because they need to be able to fully run excel spreadsheets, including ones in vba, in JS
[22:32:05] <jaawerth> which means it isn't specific vba but existing vba in users' workbooks
[22:32:17] <blueagain> sheetjs: are you actually related to the sheetjs project?
[22:32:34] <jaawerth> they ARE the sheetjs project
[22:32:46] <blueagain> oh, sorry for the ignorance
[22:32:58] <ljharb> sheetjs: what's the use case?
[22:33:13] <jaawerth> not someting to apologize for, I'm just answering you haha
[22:33:29] *** Joins: stenno (~stenno@user/stenno)
[22:33:43] <blueagain> jaawerth: I just assumed anyone can get any nickname :)
[22:34:00] <sheetjs> literally what jaawerth wrote -- a number of people asked about running existing VBA macros in the browser
[22:34:25] <sheetjs> blueagain: that is a fair question since anyone can register for any name
[22:34:29] <jaawerth> blueagain: you assume right! in this case it just happens to be an accurate nickname
[22:34:32] <ljharb> sheetjs: ok so you need to transpile it on the fly
[22:34:45] <ljharb> sheetjs: i'd suggest making a babel plugin
[22:35:14] <sheetjs> there are two use cases
[22:35:25] <sheetjs> 1) you have the file ahead of time -- babel could work
[22:35:31] <jaawerth> sheetjs: are there no existing vba implementations in js you could extend? I know there are ones for other BASIC dialects..
[22:35:34] <stenno> you always have first right to the nickname that is also your accountname
[22:35:38] <stenno> and that one will also never time out
[22:35:48] <stenno> on libera at least
[22:35:57] <ljharb> sheetjs: babel can run in the browser too
[22:36:02] <sheetjs> 2) the user is submitting a file via file input
[22:36:13] <blueagain> oh, I thought there was a policy on channel names, but didn't realise it applied to nicknames too
[22:36:28] <jaawerth> I don't think it does
[22:36:28] *** Joins: heatwave (~heatwave@2401:4900:1c63:79ba:bebb:7795:84e6:e816)
[22:36:39] <jaawerth> it's just if you registered a nick and someone else uses it you can ghost them
[22:37:05] <sheetjs> https://inexorabletash.github.io/jsbasic/
[22:37:14] <jaawerth> or rather you can forcibly take the nick back
[22:37:17] <stenno> no, if you registered your nick, and don't use it, it can be taken away from you after a certain inactivity time
[22:37:17] *** Quits: TubbyTommy (~blank@user/slimmyjimmy) (Quit: Going offline, see ya! (www.adiirc.com))
[22:37:24] <stenno> unless its also your accountname
[22:37:29] <jaawerth> well that would mean it's no longer registered
[22:37:45] <stenno> it is grouped to your account
[22:37:46] <blueagain> so account names don't expire?
[22:37:50] <blueagain> and nicknames do?
[22:37:52] <stenno> yes
[22:37:53] <jaawerth> at any rate all that has nothing to do with whether sheet js is affiliated with the project
[22:37:55] <stenno> correct
[22:38:05] <blueagain> k, thanks
[22:38:08] <stenno> yes, indeed
[22:38:26] <sheetjs> https://gist.github.com/SheetJSDev/9b22de6dbbcde410c8ecda1abe53cd13 here lets put it to rest
[22:38:51] <jaawerth> lol
[22:39:18] <blueagain> lol, I didn't question your affilitian
[22:39:24] <blueagain> I just wasn't present to me automatically
[22:39:27] <blueagain> it*
[22:41:49] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[22:44:41] <blueagain> affiliation*
[22:52:37] *** Joins: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39)
[22:52:51] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Ping timeout: 250 seconds)
[22:53:14] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[22:58:31] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:59:29] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[22:59:43] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[23:04:02] *** Quits: peteyboy1 (~peteyboy1@95.169.226.66) (Ping timeout: 240 seconds)
[23:04:05] *** Joins: nomic (~nomic@185.198.243.229)
[23:04:59] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 250 seconds)
[23:06:50] *** Quits: DrowningElysium (uid190788@user/drowningelysium) (Quit: Connection closed for inactivity)
[23:08:15] *** Quits: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:08:31] *** Joins: teut (~teut@122.161.83.81)
[23:08:41] <teut> are routes in react the same as routes in next?
[23:08:58] <teut> routes in react switch components and change the url
[23:09:40] <teut> routes in next are hyperlinks and they actually fetch pages from the server
[23:09:44] <teut> this is my belief
[23:10:55] *** Joins: peteyboy1 (~peteyboy1@95.169.226.66)
[23:12:45] *** Joins: TubbyTommy (~blank@user/slimmyjimmy)
[23:13:01] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Remote host closed the connection)
[23:15:02] <onosendi> teut: Read the "Linking between pages" section: https://nextjs.org/docs/routing/introduction
[23:15:04] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:16:05] <teut> so routers in next are same as react
[23:16:17] *** Joins: crashrep (~crashrep@user/crashrep)
[23:16:21] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: The Game)
[23:16:22] <teut> and  I mean    Link in line 2?
[23:16:25] <teut> Line 2:  routes in next are hyperlinks and they actually fetch pages from the server
[23:17:18] <onosendi> teut: if that page uses SSR, then the page will be fetched from the server.
[23:17:50] <teut> doesnt it uses SSR by default?
[23:18:48] <onosendi> teut: I believe it's SSG by default. `getServerSideProps` enables SSR.
[23:18:59] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:19:04] <onosendi> teut: https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props If you export a function called getServerSideProps (Server-Side Rendering) from a page, Next.js will pre-render this page on each request using the data returned by getServerSideProps.
[23:19:05] <teut> SSG?
[23:19:16] <onosendi> teut: Static Site Generation
[23:19:21] <teut> oh
[23:19:41] <teut> thanks, I understood it now
[23:22:24] <onosendi> teut: Go through these pages one by one, it explains everything: https://nextjs.org/learn/basics/data-fetching
[23:22:54] <teut> hmm, looks like a step by step example of the full flow
[23:22:55] *** Joins: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39)
[23:28:00] *** Quits: ckdCreations (~ckdCreati@147.55.133.137) (Read error: Connection reset by peer)
[23:28:31] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[23:29:22] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[23:30:36] *** Quits: peteyboy1 (~peteyboy1@95.169.226.66) (Ping timeout: 240 seconds)
[23:30:46] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:32:52] *** Joins: jazzy (~jaziz@user/jaziz)
[23:33:48] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[23:34:37] *** Joins: ckdCreations (~ckdCreati@147.55.133.133)
[23:34:57] *** Joins: coder7of9 (~coder7of9@user/coder7of9)
[23:35:52] <sheetjs> n> Readable
[23:35:53] <jellobot> (fail) ReferenceError: Readable is not defined
[23:37:00] <stenno> n> stream.Readable
[23:37:00] <jellobot> (okay) { [Function: Readable] ReadableState: [Function: ReadableState], _fromList: [Function: fromList], from: [Function (anonymous)], fromWeb: [Function (anonymous)], toWeb: [Function (anonymous)], wrap: [Function (anonymous)] }
[23:37:18] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[23:39:57] *** Joins: phrix (~phrix@185.76.176.47)
[23:47:27] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[23:47:38] <sheetjs> oh it became a global in 8.x
[23:48:14] <sheetjs> `typeof stream` in v0.8.28 - v6.17.1 is "undefined"
[23:48:25] *** Quits: D4mned (~D1mned@212.101.253.253) (Quit: Leaving)
[23:50:22] <sheetjs> * `typeof stream` in v0.8.28 - v4.9.1 is "undefined"
[23:51:35] *** Quits: heatwave (~heatwave@2401:4900:1c63:79ba:bebb:7795:84e6:e816) (Quit: WeeChat 3.4)
[23:52:39] *** Joins: mauz (~mauz@2a01:e0a:994:7ed0:6940:6bd7:6496:6991)
[23:54:08] *** Quits: average (uid473595@user/average) (Quit: Connection closed for inactivity)
[23:55:13] <ljharb> don't use it as a global; it's a requireable core module in every node version
[23:55:16] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
