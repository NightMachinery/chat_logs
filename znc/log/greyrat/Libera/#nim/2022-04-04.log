[00:00:04] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:00:04] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:00:21] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:00:21] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Read error: Connection reset by peer)
[00:00:37] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:00:37] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:00:54] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:00:54] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Read error: Connection reset by peer)
[00:01:10] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:01:10] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Read error: Connection reset by peer)
[00:01:27] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:01:28] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:01:59] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:02:00] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:02:16] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:02:16] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:02:32] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:02:32] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Read error: Connection reset by peer)
[00:03:02] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:03:02] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:04:05] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:04:05] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:04:22] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:04:22] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:04:38] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:04:38] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:04:54] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:04:54] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Read error: Connection reset by peer)
[00:05:56] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:05:56] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:06:12] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:06:12] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Read error: Connection reset by peer)
[00:06:28] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:06:28] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:06:45] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:06:45] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:07:01] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:07:02] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:07:18] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:07:18] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:07:35] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:07:36] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:07:51] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:07:51] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Read error: Connection reset by peer)
[00:08:21] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:08:21] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Remote host closed the connection)
[00:08:37] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:10:09] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[00:22:21] <FromDiscord> <Phil> Wait.... wait.... I could be making sqlite extensions right now
[00:22:49] <PMunch> Why are you guys making sqlite extensions?
[00:22:50] <FromDiscord> <Phil> Well, I have my next project after my current one, never even considered that a possibility
[00:23:41] <FromDiscord> <Phil> Because sqlite is awesome and if I can get smart enough to contribute something useful I'd love to do it
[00:23:58] <PMunch> Oh don't get me wrong, sqlite is pretty awesome
[00:24:14] <PMunch> I was just wondering what extensions to sqlite where for, never encountered them before
[00:24:20] <FromDiscord> <Phil> I'd need to brainstorm what I'd like there to be first though
[00:24:30] <FromDiscord> <Phil> Oh, there's at least one very useful one
[00:24:37] <FromDiscord> <Phil> That implements a bunch of more esoteric SQL syntax
[00:24:48] <PMunch> Like?
[00:25:15] <FromDiscord> <Phil> I think reverse was one, also a couple others, let me find the extension page
[00:25:29] <PMunch> I'm not sure SQLite needs more esoteric syntax :P I remember my students had enough trouble learning the default stuff :P
[00:25:49] <PMunch> I guess if you store custom data as blob types an extension to print them in a more sensible way would be nice
[00:26:09] <PMunch> I had a database with GUIDs in them and it would just print out the blob as ASCII characters...
[00:26:16] <PMunch> Including newlines and everything
[00:26:29] <FromDiscord> <Phil> Reverse() not existing was actually ahuge problem for me
[00:26:37] <FromDiscord> <Phil> That's why I recall that one in particular
[00:26:45] <FromDiscord> <Phil> But the sqlite extension page is as always such a massive pain to find
[00:27:18] <FromDiscord> <Phil> Oh, FTS5 apparently is an extension
[00:27:33] <PMunch> You mean this one? https://www.sqlite.org/loadext.html
[00:27:34] <FromDiscord> <Phil> If you know of it, that thing can basically replace something like elasticsearch for you and provide you a pretty decent search algorithm
[00:27:59] <FromDiscord> <Phil> Nah, that wasn't the one
[00:28:37] *** Joins: vicfred (~vicfred@user/vicfred)
[00:29:28] <FromDiscord> <Phil> God fucking damnit sqlite people, you had the page, I know it exists, why is it so hard to find
[00:30:15] <PMunch> This might be  way to find it: https://www.sqlite.org/doclist.html
[00:31:14] <PMunch> Oooh, this is interesting: https://github.com/nalgeon/sqlean
[00:32:11] <PMunch> Damn it, I should've known of this when I was doing that other project with GUIDs. It even has a UUID module!
[00:34:40] <FromDiscord> <Phil> Couldn't find their "shoutout" page for extensions again, what I found on their page was like half of what I know is there somewhere
[00:34:52] <FromDiscord> <Phil> https://rsqlite.r-dbi.org/reference/initextension↵Here is an example for a bunch of useful functions though as well
[00:35:51] <FromDiscord> <Phil> Wanting an SQL function to invert a string was actually what made me compile sqlite for the first time myself
[00:36:38] <PMunch> Hmm, are you able to accidentally break the ACID properties with extensions?
[00:36:52] <FromDiscord> <Phil> That I have no idea of
[00:37:16] <FromDiscord> <Phil> Back in the days I was trying to keep a virtual FTS5 table that contained a copy of aggregated data from other tables in sync with said tables via triggers
[00:37:48] *** Quits: yiggityswaps (~yoyojambo@2806:108e:18:68ab:7cf8:3696:b641:b09d) (Ping timeout: 240 seconds)
[00:37:52] <FromDiscord> <Phil> Because the FTS5 tables in sqlite can only find full matches and prefixes though I also had to store the copied/aggregated data in the FTS5 table twice, the second time inverted
[00:38:00] <FromDiscord> <Phil> (edit) "inverted" => "inverted. That way I could also find prefixes"
[00:38:28] <FromDiscord> <Phil> That was like a year ago, I've since moved to Django signals and their re-implementation in nimstoryfont
[00:38:42] <FromDiscord> <Phil> (edit) "Back in the days I was trying to keep a virtual FTS5 table that contained a copy of aggregated data from other tables in sync with said tables via ... triggers" 03added "database"
[00:39:03] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[00:39:05] <FromDiscord> <Phil> I can not express how insanely cool the FTS5 table feature is
[00:39:34] <FromDiscord> <Phil> (edit) "is" => "is. Literally a small search engine, bundled into your tiny database, I love it so much"
[00:41:22] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:28:17] <FromDiscord> <lord> anyone know how to create an array of size `k` thats passed in to a proc?
[01:28:57] <FromDiscord> <huantian> Array sizes can’t be dynamic, I’d assume the size k would have to be static
[01:30:08] <FromDiscord> <lord> uhh
[01:30:42] <FromDiscord> <lord> wut if im trying to read to stdin which is the length of the array siez that im trying to create?
[01:30:48] <FromDiscord> <lord> kinda stuckl
[01:31:42] <FromDiscord> <leorize> use `seq`
[01:31:53] <FromDiscord> <leorize> seq can have variable sizes
[01:33:03] <FromDiscord> <lord> fk me
[01:33:03] <FromDiscord> <lord> thanks
[01:42:18] *** Joins: xet7 (~xet7@user/xet7)
[02:03:36] <FromDiscord> <lord> sent a code paste, see https://play.nim-lang.org/#ix=3UdH
[02:04:03] <FromDiscord> <lord> (edit) "https://play.nim-lang.org/#ix=3UdH" => "https://play.nim-lang.org/#ix=3UdI"
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:19:54] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:21:16] <FromDiscord> <treeform> sent a code paste, see https://play.nim-lang.org/#ix=3UdM
[02:24:44] <FromDiscord> <spoon> okay so just importing nimscripter doesn't let my program compile
[02:25:36] <FromDiscord> <spoon> any other ways to implement nimscript?
[02:25:49] <FromDiscord> <spoon> for modding/extension purposes
[02:29:17] <FromDiscord> <huantian> In reply to @treeform "https://play.nim-lang.org/#ix=3UdL": Does enumerate work on `lines` or did you just use split on a string for purposes of playground
[02:41:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:43:57] <PMunch> Why doesn't it compile @spoon?
[02:44:08] <PMunch> I've used it successfully in the past
[02:51:08] <FromDiscord> <treeform> In reply to @huantian "Does enumerate work on": I don't know, I can't read files in the playground.
[02:51:21] <FromDiscord> <spoon> sent a code paste, see https://play.nim-lang.org/#ix=3UdW
[02:52:18] <FromDiscord> <Elegantbeef> You're using 1.4.8 compiler lib with a 1.6 compile
[02:52:19] <FromDiscord> <Elegantbeef> compiler\
[02:52:26] <FromDiscord> <spoon> how does that happen?
[02:52:35] <FromDiscord> <spoon> i went to scoop and deleted all the old versions
[02:52:38] <FromDiscord> <Elegantbeef> Old nimscripter
[02:52:44] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 272 seconds)
[02:52:53] <FromDiscord> <spoon> ah
[02:52:53] <FromDiscord> <Elegantbeef> Modern nimscripter doesnt rely on `compiler` in nimble so this doesnt happen
[02:53:04] <FromDiscord> <spoon> this is the version i pulled from nimble
[02:53:08] <FromDiscord> <spoon> hmm
[02:53:26] <FromDiscord> <Elegantbeef> check the version
[02:53:35] <FromDiscord> <spoon> 1.0.13
[02:53:38] <FromDiscord> <Elegantbeef> It's 1.0.13 right now
[02:53:48] <FromDiscord> <Elegantbeef> Youre installed one cannot be that
[02:53:50] <FromDiscord> <Elegantbeef> your\
[02:53:58] <FromDiscord> <spoon>  https://media.discordapp.net/attachments/371759389889003532/960303676990316545/unknown.png
[02:54:03] <FromDiscord> <Elegantbeef> `nim -v`?
[02:54:13] <FromDiscord> <spoon> 1.6.4
[02:54:40] <FromDiscord> <Elegantbeef> Yea i dont know how you managed this, it's supposed to use the compiler in your path
[02:54:45] <FromDiscord> <Elegantbeef> `nimble uninstall compiler`
[02:55:55] <FromDiscord> <spoon> sent a code paste, see https://play.nim-lang.org/#ix=3UdX
[02:56:09] <FromDiscord> <Elegantbeef> Yep that's good
[02:56:19] <FromDiscord> <Elegantbeef> make a config.nims with `--path"$nim"`
[02:56:20] <FromDiscord> <lord> is it me
[02:56:32] <FromDiscord> <lord> or languages with typings are a bitch to write
[02:56:41] <FromDiscord> <Elegantbeef> It's you
[02:56:56] <FromDiscord> <Elegantbeef> static typing is a godsend and i will not sit idly by as you insult it!
[02:57:05] <FromDiscord> <lord> but y though
[02:57:11] <FromDiscord> <Elegantbeef> Why what?
[02:57:30] <FromDiscord> <lord> like in python u can just write stuff but theres so much "compile" time exceptions when writing nim
[02:57:56] <FromDiscord> <Elegantbeef> And those would be runtime errors
[02:58:16] <FromDiscord> <lord> true lol
[02:58:54] <FromDiscord> <Elegantbeef> Run that in python and you occasionally get a runtime errror
[02:58:58] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3UdY
[02:59:11] <FromDiscord> <Elegantbeef> Port that to Nim and you cannot compile it cause you cannot add string to int
[02:59:22] <FromDiscord> <Recruit_main707> dynamic typing is all fun and games until you work on someone else´s code
[02:59:36] <FromDiscord> <Recruit_main707> on/with
[02:59:37] <FromDiscord> <Elegantbeef> It's all fun and games until you write code you want to work
[02:59:40] <FromDiscord> <lord> honestly yall on to something
[02:59:59] <PMunch> @lord, I'd rather have my program fail during the 3 second compile-time than after I have run my program for an hour right as its meant to save the output to a file
[03:00:44] <FromDiscord> <Elegantbeef> So spoon the reason your program had that error is you just had a `.nim` file and as such it could freely import the compiler apiii
[03:01:00] <FromDiscord> <Elegantbeef> That api was outdated and as such caused the issue
[03:01:18] <FromDiscord> <Elegantbeef> With a nimble file and restricted import paths that'd go away
[03:01:52] <FromDiscord> <Elegantbeef> `nimble build` \> `nim c` in ensuring your imports are portable
[03:03:29] <FromDiscord> <spoon> not familiar with setting flags in nimscript files though
[03:03:39] <FromDiscord> <Elegantbeef> What do you mean
[03:03:48] <FromDiscord> <Elegantbeef> `config.nims` with `--path:"$nim"`
[03:03:48] <FromDiscord> <lord> also whats the diff between `let` and `const` lol
[03:03:53] <FromDiscord> <spoon> In reply to @Elegantbeef "make a config.nims with": making a config.nims
[03:03:56] <FromDiscord> <Elegantbeef> let is runtime constant
[03:03:59] <FromDiscord> <Recruit_main707> its what you are used to, but specially once things start to get big static typing becomes very useful, if you ask people that have coded in Ada, they will tell you how good it is for large projects because of its numerous compile time checks that explain both to the compiler and the programmers what some piece of code may do and to ensure runtime safety.
[03:04:01] <FromDiscord> <Elegantbeef> `const` is compiletime constant
[03:04:34] <FromDiscord> <Elegantbeef> Spoon i dont get the issue
[03:04:54] <FromDiscord> <Elegantbeef> I guess i should steal pmunches code from nimslp
[03:05:02] <FromDiscord> <Elegantbeef> Though i personally dont like that solution
[03:05:53] <FromDiscord> <Recruit_main707> let is a variable that you arent allowed to change, for defining constant stuff at runtime, under the hood its the same as `var`, but its recommended to use let when something is not supposed to be edited↵const is the more traditional constant, it is determined at compile time
[03:06:16] <FromDiscord> <Elegantbeef> The tree of variable declaration is `const` \> `let` \> `var`
[03:06:21] <FromDiscord> <Elegantbeef> It's a simple bamboo shoot
[03:06:51] <FromDiscord> <lord> and for best practices is it better to do `var name: string = "john"` or `var name = "john"`
[03:06:59] <FromDiscord> <lord> In reply to @Elegantbeef "The tree of variable": thx for all the help btw
[03:07:10] <FromDiscord> <Elegantbeef> The latter
[03:07:30] <FromDiscord> <Elegantbeef> Type annotations are only needed when you want to be explicit which makes life more difficult
[03:07:43] <FromDiscord> <Elegantbeef> the only time i use variable type annotations is when using vars like `var myThing: T`
[03:07:57] <FromDiscord> <Elegantbeef> I want a 0'd value but i dont  want to manually construct it
[03:08:19] <FromDiscord> <Recruit_main707> i do specify them sometimes
[03:08:53] <FromDiscord> <spoon> it's yelling at me but it works when it compiles, guess it's just the extension https://media.discordapp.net/attachments/371759389889003532/960307429625708564/unknown.png
[03:09:02] <FromDiscord> <Recruit_main707> yep
[03:09:08] <FromDiscord> <Recruit_main707> dont worry
[03:09:21] <FromDiscord> <Elegantbeef> Also i wasnt lying you can verbatim write `--path:"$nim"`
[03:09:43] <FromDiscord> <Elegantbeef> Config nimscript has an operator for `--`
[03:09:47] <PMunch> @lord, most people do `var name = "john"`, explicit type annotations are most often used when you don't set a value
[03:10:11] <FromDiscord> <spoon> In reply to @Elegantbeef "Also i wasnt lying": yeah, i tried that too and it also got mad at me
[03:10:20] <FromDiscord> <spoon> but if it works at compile time eh
[03:10:39] <FromDiscord> <Elegantbeef> There is a fix for this in devel, but that's beside the point
[03:11:02] <FromDiscord> <Recruit_main707> i also try to be a bit explicit with my variable names when not specifying the type manually, like:↵`let collisionNormal = this.findContactSurface() # a Vector3, i consider it specified with the "Normal" in the name`
[03:11:07] <FromDiscord> <Elegantbeef> The config works so it's fine!
[03:11:24] <FromDiscord> <Elegantbeef> Alternatively make distinc types
[03:11:28] <FromDiscord> <Elegantbeef> Problem solved 😛
[03:12:02] <FromDiscord> <spoon> is it a problem with `nim check`?
[03:12:10] <FromDiscord> <exelotl> In reply to @lord "and for best practices": I sometimes do `var name: string = someComplexExpressionThatIsNotClear()`
[03:12:33] <FromDiscord> <Elegantbeef> Nim check didnt init a VM environment to check `.nims` so errored
[03:12:44] <FromDiscord> <spoon> hm
[03:12:55] <FromDiscord> <Elegantbeef> Devel has a fix for it, but i'd just say dont worry about it
[03:13:00] <FromDiscord> <exelotl> especially if it's like a generated const array and I want to make sure it has correct length
[03:13:28] <FromDiscord> <Elegantbeef> Imagine not justu sing a distinct type for that exelotl
[03:13:57] <FromDiscord> <spoon> In reply to @exelotl "I sometimes do `var": i just go full on `var something = parseWhateversInside(Thing, expression(thing1, thing2).int32)` with no defined type
[03:13:58] <FromDiscord> <Elegantbeef> Jeez i think this keyboard is toast
[03:14:09] <FromDiscord> <Elegantbeef> between it writing "apiii" and delaying my spaces
[03:14:17] <FromDiscord> <spoon> resulting in beautiful code
[03:14:36] <FromDiscord> <Recruit_main707> beautifully confusing :P
[03:15:58] <FromDiscord> <Elegantbeef> Also recruit why wouldnt it be `getContactNormal`?
[03:16:03] <FromDiscord> <spoon> less lines = better
[03:16:16] <FromDiscord> <Elegantbeef> It returns a vector3 which is the normal of the contact, hardly a surface
[03:16:23] <FromDiscord> <Elegantbeef> Less horizontal space = better
[03:16:28] <FromDiscord> <exelotl> In reply to @Elegantbeef "Jeez i think this": your keyboard may be toast but my gamepad is bananas https://media.discordapp.net/attachments/371759389889003532/960309334481461319/unknown.png
[03:16:36] <FromDiscord> <Elegantbeef> I dont care how many lines something is aslong as it's written intelliigently
[03:16:59] <FromDiscord> <Elegantbeef> Go work on goodboy galaxy or something! 😛
[03:17:29] <FromDiscord> <exelotl> hahaha touché
[03:17:41] <FromDiscord> <huantian> In reply to @Elegantbeef "between it writing "apiii"": You should build a 1k usd custom keeb
[03:19:24] <nrds> <03DarthOreo99> why 5 banananas when there 4 directions and 2 buttons...    
[03:20:28] <nrds> <03DarthOreo99> sorry put too much thought into that already  XD
[03:21:17] <FromDiscord> <Elegantbeef> Damn you're right huan, you want to fund it?
[03:21:17] <FromDiscord> <Elegantbeef> Inb4 pmunch\: "Damn that sounds good, why didnt i do that"
[03:21:24] <FromDiscord> <Elegantbeef> It'll be the ultimate Nim keyboard
[03:21:30] <FromDiscord> <Elegantbeef> All the keys will be macros the backplate will be purple, the keys yellow and special keys slightly darker yellow
[03:21:32] <FromDiscord> <Elegantbeef> I only read keeb as kebab so uhh dont eat it
[03:21:32] <FromDiscord> <Elegantbeef> Huan i'm not making a keyboard
[03:21:32] <FromDiscord> <huantian> Purple and yellow keeb huh
[03:21:33] <FromDiscord> <huantian> I’ve seen some pretty nice looking GMK caps that are purple and yellow I think
[03:21:35] <FromDiscord> <huantian> ik it’s just fun to muse about it
[03:22:00] <FromDiscord> <Elegantbeef> You arent supposed to look int oit
[03:22:04] <FromDiscord> <Recruit_main707> In reply to @Elegantbeef "Also recruit why wouldnt": name is provisional yeah :p
[03:22:09] <FromDiscord> <Elegantbeef> I do like that a lurker's first message is about a joke response
[03:22:27] <FromDiscord> <Elegantbeef> And it should return a `Normal`
[03:22:30] <FromDiscord> <Elegantbeef> Then you have no problem
[03:22:48] <FromDiscord> <Elegantbeef> Recruit i bet you write `proc doThing(a: float) # a should be in range 0 and 1`
[03:24:04] <FromDiscord> <Recruit_main707> well, i specified why i dont do something just in case i forgot lol↵`proc findContactSurface(this: ref Env): Vec3 = #, bool) = dont need to check wether the collision happens or not, just return a cero vector in that case`
[03:24:29] <FromDiscord> <Elegantbeef> That's not what i jokingly suggested!
[03:25:32] <FromDiscord> <Recruit_main707> bold of you i didnt have that written already
[03:25:38] <FromDiscord> <Recruit_main707> to think
[03:25:52] <FromDiscord> <Elegantbeef> Lol
[03:26:07] <FromDiscord> <Elegantbeef> I was just saying you're the type to not do `proc doThing(a: 0.0 .. 1.0)`
[03:26:20] <FromDiscord> <Elegantbeef> or `0d..1d` if you prefer
[03:26:42] <FromDiscord> <Recruit_main707> does that even work?
[03:27:03] <FromDiscord> <Elegantbeef> Of course
[03:27:12] <FromDiscord> <Elegantbeef> Subrange types work for all numeric types
[03:27:18] <FromDiscord> <Recruit_main707> why didnt i know about this before
[03:27:25] <FromDiscord> <Recruit_main707> now ill use it everywhere
[03:27:26] <FromDiscord> <Elegantbeef> See
[03:27:55] <FromDiscord> <huantian> Wonder if I can get this to work for book
[03:27:58] <FromDiscord> <huantian> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/960312217557934091): Wonder if I can get this to work for books
[03:27:59] <FromDiscord> <Elegantbeef> Such a lovely life
[03:28:02] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/KJZ
[03:28:05] <FromDiscord> <huantian> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/960312217557934091): Wonder if I can get this to work for bools
[03:28:18] <FromDiscord> <Recruit_main707> the more you know 🌠
[03:28:18] <FromDiscord> <Elegantbeef> Why not
[03:28:39] <FromDiscord> <huantian> That way it’d be more explicit if you can pass both true and false
[03:28:42] <FromDiscord> <Elegantbeef> Need a distinct for that though
[03:28:44] <FromDiscord> <Elegantbeef> Sadly
[03:29:08] <FromDiscord> <Elegantbeef> Bools dont work for all ordinal operations sadly like conventional enums
[03:29:21] *** Joins: rawrrr (uid540880@id-540880.lymington.irccloud.com)
[03:29:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Ue3
[03:30:50] <FromDiscord> <huantian> Make a converter and it’s basically python!
[03:30:59] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[03:31:05] <FromDiscord> <Recruit_main707> lol
[03:35:31] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[03:38:43] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 260 seconds)
[04:05:01] <FromDiscord> <auxym> what am I reading
[04:05:19] <FromDiscord> <Elegantbeef> What do you mean?
[04:05:38] <FromDiscord> <auxym> you guys are joking right
[04:05:54] <FromDiscord> <Elegantbeef> What?
[04:05:59] <FromDiscord> <Elegantbeef> Subrange types exist in Nim
[04:06:09] <FromDiscord> <auxym> "That way it’d be more explicit if you can pass both true and false"
[04:06:23] <FromDiscord> <auxym> `bool` already makes that pretty explicit no?
[04:06:48] <FromDiscord> <Elegantbeef> I hope they were joking
[04:07:00] <FromDiscord> <auxym> yes 🙂
[04:07:26] <FromDiscord> <auxym> something something implement all bools with subleq
[04:07:51] <FromDiscord> <Elegantbeef> Either subrange types are wonderful and i despise more people dont use them
[04:08:03] <FromDiscord> <Elegantbeef> It's legitimately self documenting code
[04:09:19] <FromDiscord> <auxym> yes subranges are nice, and so are runtime overflow checks. I just heard nginx had a cve recently caused by integer overflow? this is 2022 why are people still doing this to themselves :/
[04:09:52] <FromDiscord> <Elegantbeef> Probably cause their typesystem doesnt do it itself
[04:24:07] <FromDiscord> <Alea> sent a code paste, see https://play.nim-lang.org/#ix=3Uea
[04:33:37] <FromDiscord> <huantian> It'll only compile if a is a value between 0 and 1
[04:36:07] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[04:36:24] <FromDiscord> <Alea> interesting
[04:36:31] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[04:38:39] <FromDiscord> <Elegantbeef> It also has runtime checks to ensure it's only 0..1
[04:38:39] <FromDiscord> <Elegantbeef> You can use subrange types everywhere so dont think it's just a procedure thing!
[04:39:41] <FromDiscord> <auxym> yeah was about to say it can also crash at run time: https://play.nim-lang.org/#ix=3Uee
[04:40:02] <FromDiscord> <auxym> unless you compile with `-d:danger`
[04:40:17] <FromDiscord> <Elegantbeef> Nice complex `1.5`
[04:40:51] <FromDiscord> <auxym> gotta trick the compile into thinking that the value isn't known at compile time 😄
[04:41:17] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Uef
[04:41:20] <FromDiscord> <Elegantbeef> Nim doesnt do value narrowing
[04:41:33] <FromDiscord> <Elegantbeef> Subrange types only statically error if a literal or const is passed
[04:41:53] <FromDiscord> <auxym> `doThing(0.5 + 1)` was caught at compile time though
[04:45:36] <FromDiscord> <Elegantbeef> That's a constant
[04:46:27] <FromDiscord> <Elegantbeef> Just cause you write your constant `Tau / 2` doesnt mean it's not constant 😛
[04:48:15] *** Joins: yiggityswaps (~yoyojambo@2806:108e:18:68ab:2c11:5120:5e46:16a1)
[04:54:33] <FromDiscord> <auxym> yeah. but that's the story of how `var b = 0.5 +1` happened
[05:11:50] <FromDiscord> <dither> Sorry dumb question, I think Nim is great and I'm not sure if I'm thinking of things correctly but it seems great for maintaining C/C++ projects since it supports the backend. There's an old large C++ codebase and I want to slowly rewrite it in Nim while still being integrated with the rest of the codebase as I go, similar to how you would go about modernizing a javascript project with typescript (or Nimlang even). Am I correct to think Ni
[05:12:22] <FromDiscord> <Elegantbeef> It does have C++ interop and is one of the few languages that does so it seems fine
[05:12:54] <FromDiscord> <Elegantbeef> Making the bindings is the biggest thing you'll need to do
[05:13:16] <FromDiscord> <dither> that doesn't sound too bad, would I write the bindings in Nim?
[05:13:29] <FromDiscord> <dither> overall that's great to hear, I thought so too because of how it had C++ backend support but wanted to make sure I wasn't coming to the wrong conclusion
[05:14:16] <FromDiscord> <Elegantbeef> https://youtu.be/d2VRuZo2pdA?t=1968
[05:14:20] <FromDiscord> <Elegantbeef> Little talk about it if you want
[05:15:06] <FromDiscord> <dither> Thank you Elegantbeef, I appreciate it. Will watch it as soon as I can 🙏
[05:16:27] <FromDiscord> <dither> Another small dumb question, I was reading a lot into Crystal and Zig, they seem to be going for similar use cases as well tho what I appreciated about Nimlang is that it seems to not overpromise, Zig is trying to tackle an entire toolchain and Crystal still lacks windows support outside of WSL2. Hope Nim keeps growing in popularity
[05:16:38] <FromDiscord> <dither> (edit) "dumb question," => "aside,"
[05:16:58] <FromDiscord> <dither> (edit) "popularity" => "popularity, it seems mature enough for big projects"
[05:23:19] <FromDiscord> <Elegantbeef> Join the club 😛
[05:23:45] <FromDiscord> <demotomohiro> Nim can wrap template class/functions in C++
[05:23:51] <FromDiscord> <demotomohiro> https://forum.nim-lang.org/t/9007
[05:24:13] <FromDiscord> <Elegantbeef> The talk i linked goes overthat
[05:40:00] *** Joins: vicfred (~vicfred@user/vicfred)
[05:47:31] *** Joins: neurocyte86144 (~neurocyte@user/neurocyte)
[05:49:37] *** Quits: neurocyte8614 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:49:37] *** neurocyte86144 is now known as neurocyte8614
[06:36:07] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Gustavo6046)
[06:36:18] *** Joins: Gustavo6046 (gustavo604@user/gustavo6046)
[06:39:34] *** Quits: Gustavo6046 (gustavo604@user/gustavo6046) (Client Quit)
[06:39:46] *** Joins: Gustavo6046 (gustavo604@user/gustavo6046)
[06:40:38] *** Joins: rockcavera (~rc@192.12.115.204)
[06:40:39] *** Quits: rockcavera (~rc@192.12.115.204) (Changing host)
[06:40:39] *** Joins: rockcavera (~rc@user/rockcavera)
[07:13:06] <yiggityswaps> Are the BigO notations of the the procs in the standard library anywhere? I usually check nim-lang.org/docs for the documentation but it doesn't seem like it has it anywhere...
[07:14:28] <FromDiscord> <ynfle> Which procs? Some have in the docs, some are quite obvious and some you can get by reading the source code
[07:22:45] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:37:19] <FromDiscord> <Elegantbeef> Who whatns to make a bigopximator? 😛
[07:37:21] <FromDiscord> <Elegantbeef> wants to
[07:37:39] <yiggityswaps> Right now I'm not curious about one, just wanted to know haha
[07:38:10] <FromDiscord> <Elegantbeef> I dont think any mentions big O
[07:38:24] <FromDiscord> <Elegantbeef> I guess some do
[07:42:11] *** Quits: yiggityswaps (~yoyojambo@2806:108e:18:68ab:2c11:5120:5e46:16a1) (Quit: Leaving)
[07:43:17] *** Quits: Gustavo6046 (gustavo604@user/gustavo6046) (Quit: Gustavo6046)
[07:43:21] *** Joins: yoyojambo (~yoyojambo@2806:108e:18:68ab:2c11:5120:5e46:16a1)
[08:19:29] <FromDiscord> <aph> can i read with encoding with `FileStream.readStr`? it got me stuck for a while, not sure what i did wrong but the text i got is just weird
[08:20:03] <FromDiscord> <Elegantbeef> Strings in nim are binary streams
[08:20:37] <FromDiscord> <aph> hmm
[08:20:51] <FromDiscord> <Elegantbeef> What's the code?
[08:20:57] <FromDiscord> <Elegantbeef> And the file
[08:21:17] <FromDiscord> <aph> hang on
[08:21:18] <FromDiscord> <aph> :)
[08:21:43] <FromDiscord> <aph> da file https://media.discordapp.net/attachments/371759389889003532/960386155826782278/lumine.pmx
[08:21:55] <FromDiscord> <aph> sent a code paste, see https://play.nim-lang.org/#ix=3Uf1
[08:22:08] <FromDiscord> <aph> (edit) "https://play.nim-lang.org/#ix=3Uf1" => "https://play.nim-lang.org/#ix=3Uf2"
[08:22:36] <FromDiscord> <demotomohiro> That file contains a text not in unicode encoding?
[08:22:41] <FromDiscord> <Elegantbeef> I assume this file has non ascii text?
[08:22:47] <FromDiscord> <aph> yes
[08:23:10] <FromDiscord> <aph> it's in binary, but it also contains some text data in UTF8 or UTF16LE encoding
[08:23:47] <FromDiscord> <Elegantbeef> Well strings and streams are not unicode aware so you need to figure out if the string is unicode and if so figure out how much you need to read
[08:24:03] <FromDiscord> <demotomohiro> Nim's echo expects utf8 encoding.
[08:24:17] <FromDiscord> <Elegantbeef> I mean echo doesnt matter
[08:24:20] <FromDiscord> <aph> oh, i guess i need to convert it?
[08:24:31] <FromDiscord> <Elegantbeef> Nim's echo expects a string, it's whatever your terminal expects that's the issue
[08:24:40] <FromDiscord> <aph> In reply to @Elegantbeef "Nim's echo expects a": hmm
[08:24:44] <FromDiscord> <aph> time to switch os
[08:24:47] <FromDiscord> <aph> 😎
[08:26:35] <FromDiscord> <demotomohiro> On windows, Nim change console code page to 65001 and fail to print utf8 encoded Japanese text if I didnt set the font of console correclty.
[08:27:29] <FromDiscord> <Elegantbeef> Well you could also make your own `unicodestream` 😛
[08:27:55] <FromDiscord> <aph> oh i know why now. chinese characters contains 2 bytes
[08:27:56] <FromDiscord> <aph> hm
[08:28:05] <FromDiscord> <aph> In reply to @demotomohiro "On windows, Nim change": time to switch to linux ig
[08:28:07] <FromDiscord> <huantian> Well Inmean
[08:28:13] <FromDiscord> <huantian> What did you expect from utf16
[08:28:26] <FromDiscord> <aph> i was supposed to get `女主角` instead of `sY;N҉`. heh
[08:28:29] <FromDiscord> <huantian> 16 bits = 2 bytes 😛
[08:28:37] <FromDiscord> <aph> In reply to @huantian "16 bits = 2": :(
[08:28:42] <FromDiscord> <Elegantbeef> There is `widestr`
[08:29:41] <FromDiscord> <aph> sure will try
[08:29:42] <FromDiscord> <aph> ty
[08:29:57] <FromDiscord> <Elegantbeef> Though dont know if it'll help
[08:30:12] <FromDiscord> <aph> gotta try everything ¯\_(ツ)_/¯
[08:30:23] <FromDiscord> <aph> ~~or just ignore it, who cares about comments or model name~~
[08:33:00] <FromDiscord> <demotomohiro> On windows, if you want to echo non-utf8 charactors, compiling your code with `-d:nimDontSetUtf8CodePage` might work.
[08:33:09] <FromDiscord> <demotomohiro> https://github.com/nim-lang/Nim/blob/c3f03cfa5dfa2ca47f8e4cf99bbcdbf5a7d16eda/lib/std/syncio.nim#L856
[08:33:43] <FromDiscord> <huantian> Why is windows so weird with utf8 honestly
[08:33:55] <FromDiscord> <huantian> Probably backwards compatibly baggage ig
[08:33:58] <FromDiscord> <aph> In reply to @demotomohiro "On windows, if you": heh, didn't work :(
[08:34:15] <FromDiscord> <aph> trying to use wsl if it makes a difference, installing nim
[08:34:19] <FromDiscord> <huantian> I feel bad for people who have to use cmd all the time
[08:34:28] <FromDiscord> <huantian> At least Windows Terminal exists
[08:35:13] <FromDiscord> <aph> In reply to @aph "trying to use wsl": nope it didn't! time to fix the code!
[08:35:21] <FromDiscord> <huantian> Maybe there’s something in std/unicode for this
[08:35:25] <FromDiscord> <aph> In reply to @huantian "I feel bad for": ~~use powershell smh~~
[08:35:40] <FromDiscord> <huantian> Also shouldn’t UTF-8 account for variable width chars
[08:35:44] <FromDiscord> <huantian> Like isn’t that the point
[08:36:08] <FromDiscord> <aph> ¯\_(ツ)_/¯
[08:37:54] <FromDiscord> <aph> hurray `encodings` worked
[08:37:56] <FromDiscord> <aph> thanks
[08:46:03] <FromDiscord> <Elegantbeef> you mean windows 😛↵(@huantian)
[08:47:49] <FromDiscord> <spoon> up + enter > interacting with ui
[08:48:13] <FromDiscord> <Elegantbeef> How'd you know my build process
[08:48:31] <FromDiscord> <Elegantbeef> How goes the nimscripter stuff anyway?
[08:49:12] <FromDiscord> <spoon> well i got it to run and then i had to leave
[08:49:41] <FromDiscord> <spoon> but now i have to figure out how to get it to fit into my object instead of a proc so i can flatty + supersnappy my world object
[08:50:08] <FromDiscord> <Elegantbeef> What do you mean?
[08:50:32] <FromDiscord> <spoon> remember how i was using an onHit proc in my game and it took an enemy as a parameter?
[08:50:47] <FromDiscord> <Elegantbeef> Sure
[08:51:36] <FromDiscord> <spoon> i'm trying to switch it to nimscript so i can serialize special objects
[08:51:57] <FromDiscord> <Elegantbeef> Well the bridge presently does everything by copies
[08:53:28] <FromDiscord> <spoon> so would `onHit: NimScriptFile"proc(e: enemy)"` work out do you think?
[08:54:08] <FromDiscord> <Elegantbeef> I dont see why it wouldnt, but you then need to make an intepreter for each
[08:54:28] <FromDiscord> <spoon> hmmm
[08:55:20] <FromDiscord> <spoon> could just be stored as a string, too
[08:55:32] <FromDiscord> <spoon> can i use options to make the enemy parameter optional?
[08:55:48] <FromDiscord> <Elegantbeef> If you ship the options module with your stdlib
[08:57:17] <FromDiscord> <spoon> sure, ship it with everything
[08:58:07] <FromDiscord> <Elegantbeef> Do you intend on dynamically scripting the actions?
[09:01:01] <FromDiscord> <Elegantbeef> Cause if not what you're doing is pretty silly
[09:04:00] <FromDiscord> <spoon> i'm not very familiar with embedding, so i'm probably reorganizing most of it later
[09:04:13] <FromDiscord> <spoon> or embedded scripting languages rather
[09:04:21] <FromDiscord> <Elegantbeef> Is this purely for seralizing?
[09:05:24] <FromDiscord> <spoon> no, the object originally had a `proc` field for modding/extension purposes, but you can't serialize a proc, at least not with flatty
[09:05:42] <FromDiscord> <Elegantbeef> I mean you can serialise it relatively easily
[09:05:52] <FromDiscord> <Elegantbeef> Assuming it's compiled in the binary
[09:07:19] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/wX9
[09:07:53] <FromDiscord> <spoon> well having programmable objects is one of my goals
[09:08:02] <FromDiscord> <Elegantbeef> Well then i guess carry on
[09:08:28] <FromDiscord> <Elegantbeef> Sounded like this was only a serialisation issue prior
[09:12:23] <FromDiscord> <spoon> yeah, just meant procs don't serialize
[09:14:30] <FromDiscord> <spoon> guess it'll be easier now to just have all the potential functions in one nimscriptfile object
[09:17:24] <FromDiscord> <spoon> `isNil` doesn't work for it though
[09:17:26] <FromDiscord> <spoon> hmm
[09:17:41] <FromDiscord> <Elegantbeef> Fow what?
[09:18:13] <FromDiscord> <spoon> for `not isNil specialWeapon(ply.handEquip).onHit`
[09:18:46] <FromDiscord> <Elegantbeef> You'd have to load the interpreter up, and depending on how you set up nimscripter that check is moot
[09:19:22] <FromDiscord> <Elegantbeef> I'd suggest to just go with the table approach until later
[09:20:17] <FromDiscord> <spoon> so would i have to boot up a new interpreter each time the attack proc runs then?
[09:20:24] <FromDiscord> <Elegantbeef> no
[09:20:34] <FromDiscord> <Elegantbeef> You boot up the interpreter on changes
[09:20:39] <FromDiscord> <Elegantbeef> And then just call t he procedure
[09:20:51] <FromDiscord> <Elegantbeef> you can ensure the procedure exists statically
[09:21:29] <FromDiscord> <spoon> that's gonna be rough if the enemy can hold scripted weapons too
[09:21:31] <FromDiscord> <spoon> oh well
[09:21:41] <FromDiscord> <Elegantbeef> Well perhaps this isnt the library to use for you
[09:22:49] *** Quits: yoyojambo (~yoyojambo@2806:108e:18:68ab:2c11:5120:5e46:16a1) (Quit: Leaving)
[09:23:20] <FromDiscord> <spoon> dunno, maybe can figure something out unless there's already a better fit
[09:23:28] <FromDiscord> <Elegantbeef> No clue
[09:23:38] <FromDiscord> <Elegantbeef> I'd personally use dynamic libraries or WASM
[09:23:59] <FromDiscord> <spoon> wasm?
[09:24:06] <FromDiscord> <spoon> how'd that work?
[09:24:30] <FromDiscord> <spoon> i guess if i were rendering with webkit
[09:24:36] <FromDiscord> <Elegantbeef> No
[09:24:57] <FromDiscord> <Elegantbeef> You can use the WASM runtime as a plugin system for slightly safer native code libraries
[09:25:13] <FromDiscord> <spoon> hm.
[09:26:33] <FromDiscord> <spoon> i'll have to look into how enu does its stuff
[09:27:16] <FromDiscord> <spoon> but haven't heard of using wasm
[09:27:23] <FromDiscord> <Elegantbeef> WASM/dynamic libraries give a language agnostic API for scripting
[09:27:36] <FromDiscord> <Elegantbeef> WASM would mostly be for sandboxxing
[09:27:49] <FromDiscord> <Elegantbeef> Dont want people to distribute malware and that would give you that
[09:29:47] <FromDiscord> <spoon> yea, being able to edit on the fly is important too so wasm doesn't sound ideal for that
[09:30:07] <FromDiscord> <spoon> if nimscript just doesn't work right now there's also lua, i like their hook system
[09:30:17] <FromDiscord> <huantian> Why do you need to edit your modded files on the fly?
[09:31:18] <FromDiscord> <spoon> In reply to @huantian "Why do you need": current game is also a testing ground for a future ss13-like where i'm hoping gms will be able to quickly prototype and make custom scripted weapons and such
[09:31:36] <FromDiscord> <spoon> but maybe i'll add drones in the current thing i'm making
[09:31:59] <FromDiscord> <Elegantbeef> Why cant you edit on the fly with WASM?
[09:32:10] <FromDiscord> <spoon> doesn't wasm need to be compiled for some lang?
[09:32:20] <FromDiscord> <spoon> from
[09:32:23] <FromDiscord> <Elegantbeef> Sure nad it'd be relatively small packages
[09:32:23] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:33:00] <FromDiscord> <Elegantbeef> Like yes you need a compiler tool chain, but they'd be small packages so the code would be generated very quickly
[09:33:28] <FromDiscord> <spoon> i've actually done on the fly editing with luapad and gmod from within the actual game before before so i know it works
[09:33:43] <FromDiscord> <spoon> if i were to implement something else it'd likely be that
[09:34:34] <FromDiscord> <Elegantbeef> We have different views so dont let me dissuade you 😛
[09:35:15] <FromDiscord> <spoon> meh, relying on a compiler toolchain and quick prototyping just don't sound like they go together for me
[09:35:26] <FromDiscord> <Solitude> i like your views more, beef
[09:36:01] <FromDiscord> <Elegantbeef> Well we're talking about small files, yes there is a bit of preamble for setup, but in the end it's more extensible
[09:36:30] <FromDiscord> <Elegantbeef> Lol why solitude
[09:36:32] <FromDiscord> <spoon> if i were making something where mods were loaded on startup and could maybe be refreshed, wasm would probably be a good choice
[09:36:38] <FromDiscord> <spoon> just not for my use case
[09:37:03] <FromDiscord> <spoon> 'cause giving tons of options for languages sounds cool
[09:38:13] <FromDiscord> <Elegantbeef> Also solitude i see you're using owlkettle aswell,  am i missing how to force focus on a widget or is it just non existent presently?
[09:48:14] <FromDiscord> <Solitude> i see that shitload of stuff is missing and owlkettle's approach is a mistake
[09:48:25] <FromDiscord> <Solitude> he really shoud've built it on top of gintro
[09:49:04] <FromDiscord> <Elegantbeef> yea i know nothing about gtk, so i just see the purdy declarative API
[09:49:11] <FromDiscord> <huantian> In reply to @spoon "that's gonna be rough": Wait why does reloading on file changes not work with enemy weapons? Just curious
[09:49:38] <FromDiscord> <Elegantbeef> Each weapon would need it's own interpreter i think is the issue
[09:49:54] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:13:28] <FromDiscord> <morgan> so i added an input called shared to a proc, and it got highlighted different and inspect tokens or whatever says invalid keyword, but it runs with no errors/warnings and has no error/warning squiggles
[10:13:47] <FromDiscord> <morgan> but it's not in the list of reserved keywords
[10:14:00] <FromDiscord> <Elegantbeef> Extension sounds wrong
[10:14:05] <FromDiscord> <morgan> ok
[10:15:06] <FromDiscord> <morgan>  https://media.discordapp.net/attachments/371759389889003532/960414690532532254/unknown.png
[10:15:27] <FromDiscord> <Elegantbeef> oh wait `shared`
[10:16:23] <FromDiscord> <morgan> the manual only has one instance of `shared` and it's not related
[10:17:11] <FromDiscord> <Elegantbeef> Ah i was thinking of isolated
[10:19:14] <FromDiscord> <morgan> only interface and out are in the list of reserved keywords so i assume that's to warn people when they type one of those that it's not a keyword that's going to work, which seems like not highlighting it as a keyword would be better for
[10:29:36] *** Joins: rockcavera (~rc@192.12.115.204)
[10:29:37] *** Quits: rockcavera (~rc@192.12.115.204) (Changing host)
[10:29:37] *** Joins: rockcavera (~rc@user/rockcavera)
[10:33:07] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[11:09:27] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (*.net *.split)
[11:09:27] *** Quits: systemdsucks (~systemdsu@user/systemdsucks) (*.net *.split)
[11:09:27] *** Quits: adium (znc@user/adium) (*.net *.split)
[11:09:27] *** Quits: nisstyre (wes@user/nisstyre) (*.net *.split)
[11:09:27] *** Quits: madprops (hj8oijo@user/madprops) (*.net *.split)
[11:09:28] *** Quits: lain (~lain@172.16.254.xxx) (*.net *.split)
[11:09:28] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (*.net *.split)
[11:09:39] *** Joins: madprops (~hj8oijo@li628-159.members.linode.com)
[11:10:00] *** Joins: nisstyre (wes@2600:3c00::f03c:91ff:fe69:7f3d)
[11:10:05] *** Quits: madprops (~hj8oijo@li628-159.members.linode.com) (Changing host)
[11:10:05] *** Joins: madprops (~hj8oijo@user/madprops)
[11:10:23] *** Joins: lain (~lain@172.16.254.xxx)
[11:11:23] *** Joins: adium (adium@user/adium)
[11:11:33] <FromDiscord> <creikey> Anybody care to review a small amount of nim networking code? I'm meaning for it to be an example in using std/net https://github.com/creikey/nim-net-chat-example
[11:11:59] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[11:13:11] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (*.net *.split)
[11:13:12] *** Quits: ecs (~ecs@user/ecs) (*.net *.split)
[11:13:19] *** Joins: ecs (ecs@user/ecs)
[11:14:42] *** Joins: systemdsucks (~systemdsu@user/systemdsucks)
[11:16:08] *** Quits: nisstyre (wes@2600:3c00::f03c:91ff:fe69:7f3d) (Quit: WeeChat 3.4)
[11:16:17] *** Joins: nisstyre (wes@user/nisstyre)
[11:19:51] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[11:20:04] <FromDiscord> <Attachment Aditya> hey!
[11:20:14] <FromDiscord> <Attachment Aditya> where can i like ask questions?
[11:20:27] <FromDiscord> <Elegantbeef> You just asked one so hopefully here
[11:20:35] <FromDiscord> <Attachment Aditya> hmm
[11:20:48] <FromDiscord> <Attachment Aditya> i mean i want to convert my python project to nim
[11:20:59] <FromDiscord> <Elegantbeef> Ask questions her
[11:21:01] <FromDiscord> <Elegantbeef> here\
[11:23:24] <FromDiscord> <Attachment Aditya> i want to convert my big python project to a big nim project... how do i convert it? is there a cheatsheet that can help me easily? are there converters out there? what do i do to convert 1895 lines of code of python to nim? why is it so hard? https://media.discordapp.net/attachments/371759389889003532/960431876340854784/unknown.png
[11:23:48] <FromDiscord> <Elegantbeef> It's hard cause python doesnt have type annotations
[11:23:56] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers
[11:24:20] <FromDiscord> <Elegantbeef> There arent any converters that work on unannotated python
[11:24:41] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 246 seconds)
[11:25:01] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[11:25:17] <FromDiscord> <Attachment Aditya> In reply to @Elegantbeef "It's hard cause python": it has actually
[11:25:25] <FromDiscord> <Attachment Aditya> but that isn't compulsory to use
[11:25:36] <FromDiscord> <Elegantbeef> @creikey\: https://github.com/creikey/nim-net-chat-example/blob/main/src/server.nim#L47-L54 is a bit odd why not just iterate backwards
[11:25:36] <FromDiscord> <Elegantbeef> Yes i know it's optional
[11:25:37] <FromDiscord> <Attachment Aditya> the annotations are just like nim too...
[11:25:40] <FromDiscord> <Attachment Aditya> almost...
[11:25:49] <FromDiscord> <Elegantbeef> I know typings exist
[11:26:12] <FromDiscord> <xflywind> there are some old transpiler https://github.com/adsharma/py2many
[11:26:23] <FromDiscord> <Attachment Aditya> so is that cheatsheet you sent in the first link?
[11:26:32] <FromDiscord> <Attachment Aditya> In reply to @flywind "there are some old": oh, thanks.
[11:26:39] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/zf5
[11:26:59] <FromDiscord> <Elegantbeef> If you have type annotations a transpiler may work
[11:27:10] <FromDiscord> <Elegantbeef> You will still have to touch it up and make it idiomatic though
[11:27:23] <FromDiscord> <Elegantbeef> Just cause nim has significant whitespace doesnt mean it's like python
[11:28:12] <FromDiscord> <Attachment Aditya> ik, but its still ok for me to use nim, the c experience was horrible to me...
[11:28:22] *** Joins: PMunch (~PMunch@user/pmunch)
[11:31:13] <FromDiscord> <Elegantbeef> Also @creikey  https://github.com/creikey/nim-net-chat-example/blob/main/src/common.nim#L6-L13↵you there is https://nim-lang.org/docs/net.html#recv%2CSocket%2Cpointer%2Cint
[11:32:20] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/k3z
[11:32:32] <FromDiscord> <Elegantbeef> And perhaps ensure it's LE but dont recall if that's needed
[11:33:09] <FromDiscord> <Elegantbeef> Same with your `sendData`
[11:34:06] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3UfP
[11:34:16] <FromDiscord> <Elegantbeef> guess you want `data.len.uint32`
[11:37:14] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3UfQ
[11:39:08] <FromDiscord> <Elegantbeef> Well that looks like it aside from "import system modules with `std/` prefix and group them in an array like `std/[net, common]`
[11:43:52] *** Joins: gsalazar (~gsalazar@132.120.90.149.rev.vodafone.pt)
[11:53:17] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[12:27:11] <FromDiscord> <aph> `enum` vs `object`, which one should i use
[12:27:26] <PMunch> It totally depends on what you're doing
[12:27:31] <FromDiscord> <Elegantbeef> Do you need values or a data object
[12:27:34] <PMunch> They're not comparable in any way
[12:27:55] <FromDiscord> <Elegantbeef> They are  if you squint
[12:28:07] <FromDiscord> <Elegantbeef> `type A = object` can look a lot like `type A = enum`
[12:28:29] <PMunch> Eh, fair enough
[12:28:30] <FromDiscord> <aph> In reply to @Elegantbeef "Do you need values": ehhh im not sure what i want
[12:28:33] <FromDiscord> <aph> lol
[12:28:43] <FromDiscord> <Elegantbeef> Well what are you doing
[12:28:48] <FromDiscord> <Elegantbeef> There has to be a reason to ask this
[12:28:54] <FromDiscord> <Elegantbeef> It's like asking bool or float
[12:28:55] <FromDiscord> <aph> In reply to @Elegantbeef "Well what are you": storing info of file header
[12:29:05] <FromDiscord> <aph> the type is the same everytime
[12:29:07] <FromDiscord> <Elegantbeef> So then a object
[12:29:10] <FromDiscord> <aph> okk
[12:29:12] <FromDiscord> <aph> tyy
[12:29:32] <FromDiscord> <Elegantbeef> Oh have you used Java/Rust enums?
[12:29:50] <FromDiscord> <aph> i have never used enums
[12:30:06] <FromDiscord> <Elegantbeef> In Nim enums are just named integers, with optional string names
[12:30:20] <FromDiscord> <aph> ohh
[12:30:22] <PMunch> You want to use enums instead of a lot of constant variables
[12:30:23] <FromDiscord> <Elegantbeef> You use them for flags, states and anything that's a fixed set of named values
[12:30:52] <FromDiscord> <aph> ohh
[12:30:58] <FromDiscord> <aph> i've been using `const` so long
[12:30:59] <FromDiscord> <aph> lol
[12:31:21] <FromDiscord> <Elegantbeef> Eh it's fine, depends what you're holding onto
[12:31:47] <FromDiscord> <Elegantbeef> In a 4 direction game you might use an enum for `North, East, South, West`
[12:32:14] <FromDiscord> <aph> heh i'm not fixing my dirty codebase
[12:32:17] <FromDiscord> <Elegantbeef> Also if you're passing a group of bools you can use enums instead
[12:32:34] <FromDiscord> <aph> will keep in note!
[12:32:57] <FromDiscord> <Elegantbeef> `proc doThing(doItFast, doItWeird, doItFunny, doitDumb: bool)`
[12:33:45] <FromDiscord> <aph> i didn't know that such thing exists
[12:34:08] <FromDiscord> <aph> i'm doing `doItFast: bool, doItWeird: bool, doItFunny: bool, doItDumb: bool`
[12:34:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Ug0
[12:34:25] <FromDiscord> <aph> ohh, that's cool
[12:34:31] <FromDiscord> <Elegantbeef> then you can do `doThing({diFast, d iDumb}`
[12:37:51] <FromDiscord> <aph> wait, what happens to `diFunny` or `diWeird`
[12:39:10] <FromDiscord> <Rika> Not set
[12:40:03] <FromDiscord> <aph> hmm, like `void`?
[12:40:19] <FromDiscord> <aph> (edit) "`void`?" => "`nil`?"
[12:44:01] <FromDiscord> <Rika> no
[12:44:03] <FromDiscord> <Rika> like `false`
[12:44:27] <FromDiscord> <Rika> `doThing(true, false, false, true)`
[13:05:27] <FromDiscord> <aph> ohh, ty
[13:07:51] <FromDiscord> <Elegantbeef> Its a more clear and more friendly way to write passing of flags
[13:26:43] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 260 seconds)
[13:33:40] *** Quits: adium (adium@user/adium) (Ping timeout: 272 seconds)
[13:45:02] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 246 seconds)
[13:55:34] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[14:32:13] <FromDiscord> <exelotl> yooo nice to see Generic's GC emulator in the monthly post
[14:38:49] <FromDiscord> <ajusa> Yeah the macro writeup was super interesting
[14:42:54] *** Joins: adium (adium@user/adium)
[14:45:29] <PMunch> I was actually thinking of maybe doing a podcast for these monthly posts
[14:49:28] <FromDiscord> <Rika> what kind of podcast, a live one?
[14:49:39] <FromDiscord> <Rika> or those which are recorded and then edited?
[14:51:30] <PMunch> The thought was an edited one
[14:52:22] <PMunch> Find a "guest" possibly one of the ones who have a library in the list, and then talk about the different entries, and possibly other stuff that's been going on with Nim for the past month
[15:01:17] <FromDiscord> <ajusa> Personally I prefer writeups, but hey if there's demand a podcast sounds cool
[16:19:40] *** Joins: Gustavo6046 (gustavo604@user/gustavo6046)
[16:26:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[16:36:02] <FromDiscord> <mratsim> podcast for programming? Do they stay high-level, I can't fathom how you can discuss concrete code without showing it.
[16:40:56] <PMunch> Oh yeah, it would be a totally high-level thing
[16:41:12] <FromDiscord> <Tanguy> You can spell it
[16:41:34] <PMunch> More talking about the new projects people write, the new libraries, etc.
[16:42:06] <FromDiscord> <Tanguy> (edit) "spell" => "read" | "readit ... " 03added "aloud"
[16:42:29] <PMunch> I'm not going to be sat there going "indentation level 4, for i in x, dot, keys, colon, newline, indentation level 5"
[16:44:42] <FromDiscord> <Tanguy> Just do it ASMR style
[16:47:08] <FromDiscord> <Phil> Brain storm a concept to elegantly and beautifully make something that is as flexible and as extensible as Djangos object oriented views, I would love to steal whatever is drawn up, thank
[16:47:33] <FromDiscord> <Phil> (edit) "views," => "views in one of the podcast episodes,"
[16:55:49] <FromDiscord> <mratsim> > object oriented↵↵You lost me there.
[17:01:09] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[17:01:38] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[17:09:48] <FromDiscord> <riplooke> Does Nim have a Wayland api
[17:12:27] <FromDiscord> <Solitude> https://github.com/yglukhov/wayland here is something, you figure out how it works
[17:13:08] <FromDiscord> <riplooke> Ok
[17:13:53] <FromDiscord> <riplooke> I like the ||lack of||documentation for it 😂
[17:13:59] <FromDiscord> <riplooke> (edit) "of||documentation" => "of|| documentation"
[17:20:53] <PMunch> @Phil, I have an idea for a type oriented web-api
[17:21:17] <FromDiscord> <Phil> In reply to @mratsim "> object oriented ": Doesn't have to be oo, preferably isn't, just want that level of extensibility
[17:21:22] <PMunch> Essentially treating routes as procedures, with a strict typed set of arguments and return type
[17:22:55] <FromDiscord> <Phil> Yeh but does it provide a default implementation in which I can change around individual aspects?
[17:32:40] <FromDiscord> <Phil> Though I think... Hmmm you could solve this with a proc that accepts a ton of procs as parameters that contains default arguments
[17:42:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:42:54] <PMunch> A default implementation?
[17:42:58] <PMunch> Not sure what you mean
[17:48:03] <FromDiscord> <riplooke> Can I use gnu make (and a makefile) to compile nim
[17:48:27] <FromDiscord> <Rika> Sure, why not
[17:48:53] <FromDiscord> <Rika> A makefile is almost basically a shell script anyway
[17:49:14] <PMunch> Yeah, I've used Makefiles a lot for building Nim
[17:50:24] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:58:30] <arkanoid> I need an idea to implement a disk based concurrent queue. A producer fills the queue, a consumer empty it and pushes to the network. If push fails, data must persist to the queue until success (or out of space)
[17:58:57] <arkanoid> Is there an existing solution to reliably implement this?
[17:59:39] *** Joins: arkurious (~arkurious@user/arkurious)
[18:00:17] <arkanoid> I was thinking about using sqlite but we have multiple writers here so its not the best thing
[18:02:31] <FromDiscord> <Rika> Is there a priority to performance?
[18:04:30] <arkanoid> Rika, no, the most important thing is never lose data
[18:05:04] <PMunch> arkanoid, I've recently done something similar
[18:05:14] <PMunch> Basically what I ended up with was a simple journaling system
[18:05:18] <FromDiscord> <Rika> I was going to suggest using directories (per writer) and files (per message) and monotonic counters and stuff
[18:05:45] <FromDiscord> <Rika> Yeah that works too, append only log
[18:06:37] <PMunch> My program is essentially a relay, it receives messages on HTTP, and sends them on with a proprietary protocol
[18:06:41] <arkanoid> Rika the problem with files is the amount of them. I have very small buffers to queue, if I produce a file per buffer I'd ed up with a very difficult situation  to list files
[18:07:36] <arkanoid> PMunch:  why you think Journaling is required?
[18:07:51] <FromDiscord> <Rika> That’s for performance I believe
[18:08:03] *** Joins: rockcavera (~rc@192.12.115.204)
[18:08:03] *** Quits: rockcavera (~rc@192.12.115.204) (Changing host)
[18:08:03] *** Joins: rockcavera (~rc@user/rockcavera)
[18:08:04] <arkanoid> I mean, I just need to assure that the network push is successful, then I can delete the entry 
[18:08:12] <PMunch> To ensure that if my program crashes every message that has been received and returned 200 OK will eventually be ent
[18:08:17] <FromDiscord> <Rika> The quicker you can write something the less likely that if you crash you’ll lose something haha
[18:08:35] <PMunch> They are written into the journal but only read from the journal on start-up
[18:09:10] <FromDiscord> <Rika> You could probably also make a “clean up” stage that does deletes from the log, if you’re sure it’s sent already
[18:09:44] <PMunch> So when I receive a message I write a "new message" flag and the message to a journal file, if I've written more than 100 entries to that journal file I create a new one. Then I put it into some internal data-structures (and keeping track of which journal it lives in). Then when I manage to pass it on I write a "message sent flag" and the GUID of the task. If this was the 100th message completed in this journal file I delete the journal file.
[18:10:47] <PMunch> This means that if I have accepted a message and then crash (or the computer is shut of or whatever) my program will read the journal during startup, figure out which tasks where accepted but never completed, and start working through them.
[18:11:11] <PMunch> I actually considered writing a small Nim library for this
[18:11:42] <FromDiscord> <Rika> I mean it’s just technically a structured log file
[18:11:54] <PMunch> Well yes, that's what a journal is
[18:19:24] <FromDiscord> <Zoom> My knee-jerk reaction would be to try to utilize a loop device with some journaling fs to store the messages and unload all the hard work on the os↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[18:22:19] <arkanoid> PMunch:  what's the advantage of your solution over sqlite?
[18:22:50] <arkanoid> Sqlite has journaling, but also write ahead log that's even more resilient
[18:23:10] <arkanoid> And it supports multiple writers thanks to locking. And is also very battle tested
[18:23:38] <FromDiscord> <Rika> I thought you didn’t want to use that?
[18:24:49] <arkanoid> I said that multiple writers to same sqlite is not the best thing, not that I don't want to use it
[18:24:57] <PMunch> arkanoid, I used sqlite at first, but it was too slow
[18:25:02] <PMunch> And it kept locking up
[18:25:37] <arkanoid> PMunch:  ok
[18:25:43] <PMunch> To be fair I used it fully as a database, with all my logic going through sqlite
[18:26:20] <PMunch> My new system basically just uses journaling, and then it does all the sqlite/database stuff with other structures in memory
[18:27:16] <PMunch> But since I didn't need any of the relational stuff or other fancy features sqlite offers it was a bit overkill and as I said didn't meet my performance criteria
[19:16:28] *** Joins: v9fk (~quassel@user/v9fk1yn3nu)
[19:39:52] *** Quits: v9fk (~quassel@user/v9fk1yn3nu) (Quit: Goodbye!)
[19:53:32] <PMunch> Hmm, is there a way I can check if a value will be possible to put in a const block?
[19:54:30] <PMunch> Something like `when isCompileTime`
[20:02:44] <FromDiscord> <Yardanico> I guess one way you can do it is by using `compiles` :P
[20:03:03] <PMunch> I tried, but it doesn't like `when compiles(const x = something)`
[20:03:17] <PMunch> Error: expression expected, but found 'keyword const'
[20:04:46] <FromDiscord> <Yardanico> ah right, you need to make it an expression
[20:05:15] <FromDiscord> <Yardanico> you can just add () around it to make it an statement list expression
[20:05:22] <FromDiscord> <Yardanico> `when compiles((const x = stuff)):`
[20:08:08] <PMunch> Hmm, that seems to work
[20:08:18] <PMunch> But now I get a -1 not in 0..0 error
[20:08:24] <PMunch> But it doesn't say where it comes from..
[20:08:29] <PMunch> I guess it might be the compiler
[20:13:40] <FromDiscord> <huantian> In reply to @Yardanico "you can just add": Wait you can do that? I just used a template lmao
[20:14:53] <FromDiscord> <gerwy> quick question↵i know its possible with tuples i think, that i can access its stuff with index like `[0]`↵but can i do the same for objects? How would i access the field if i don't know which name its gonna have?
[20:15:11] <FromDiscord> <gerwy> other way than using iterators of course
[20:15:41] <FromDiscord> <Rika> no
[20:15:59] <FromDiscord> <gerwy> :C
[20:16:32] <FromDiscord> <Vindaar> for what unholy purpose would you not know the field names of the object?
[20:16:54] <FromDiscord> <Vindaar> you _could_ write a macro for that. but... I'm not sure that's the best idea
[20:17:14] <FromDiscord> <Rika> well you could
[20:17:15] <FromDiscord> <gerwy> tagged union
[20:17:20] <FromDiscord> <Rika> i dont think its too bad with a ma
[20:17:29] <FromDiscord> <Rika> macro
[20:17:49] <FromDiscord> <Rika> In reply to @Life Sucks "tagged union": what?
[20:19:51] <FromDiscord> <gerwy> fieldPairs work
[20:20:05] <FromDiscord> <gerwy> and its in two lines of code so ://
[20:20:26] <FromDiscord> <gerwy> In reply to @Rika "what?": i have `Value` object that uses tagged union for expression evaluation
[20:20:33] <FromDiscord> <Yardanico> any reason you're not using object variants instead?
[20:20:40] <FromDiscord> <gerwy> In reply to @Yardanico "any reason you're not": thats exactly what i do
[20:20:44] <FromDiscord> <Yardanico> ??
[20:20:46] <FromDiscord> <gerwy> i forgor how its called in nim 💀
[20:20:59] <FromDiscord> <gerwy> you mean `case .. of` ?
[20:21:01] <FromDiscord> <Yardanico> yes
[20:21:05] <FromDiscord> <gerwy> (edit) "?" => " in object declaration?"
[20:21:08] <FromDiscord> <gerwy> (edit) "declaration?" => "definition?"
[20:21:12] <FromDiscord> <gerwy> yeah thats what i do
[20:21:17] <FromDiscord> <Rika> field pairs works with object variants?
[20:21:48] <FromDiscord> <Yardanico> i don't think so?
[20:21:49] <FromDiscord> <Yardanico> https://github.com/nim-lang/RFCs/issues/367
[20:21:51] <FromDiscord> <Yardanico> is open
[20:23:14] <PMunch> Huh, apparently you can do `when is static`, that's handy
[20:24:04] <FromDiscord> <Yardanico> huh, but won't that only apply to variables that are `const` and won't work for expressions that can be computed at compile-time?
[20:24:09] <FromDiscord> <Yardanico> ah nvm, apparently it works for stuff like 1 + 5 too
[20:24:13] <FromDiscord> <Yardanico> interesting
[20:28:42] <FromDiscord> <gerwy> In reply to @Rika "field pairs works with": works for me idk
[20:28:50] <FromDiscord> <gerwy> In reply to @PMunch "Huh, apparently you can": oh yeah, i use when :3
[20:28:57] <FromDiscord> <gerwy> (edit) "when" => "`when`" | "`when`:3 ... " 03added "maybe thats why"
[20:29:10] <PMunch> Huh?
[20:29:23] <PMunch> I was talking about an issue I had
[20:30:33] <FromDiscord> <gerwy> oh sorry
[20:30:44] <PMunch> Argh, this unhandled exception is really annoying..
[20:30:47] <FromDiscord> <gerwy> i was talking about fields with object variants
[20:31:05] <FromDiscord> <Yardanico> @PMunch if you installed the compiler with build_all you also should have nim_temp
[20:31:13] <PMunch> nim_temp?
[20:31:14] <FromDiscord> <Yardanico> or was it nim_debug
[20:31:24] <FromDiscord> <Yardanico> nim-dbg
[20:31:26] <FromDiscord> <Yardanico> arghh
[20:31:28] <FromDiscord> <Yardanico> nim_dbg
[20:31:31] <FromDiscord> <Yardanico> debug build of the compiler
[20:31:35] <FromDiscord> <Yardanico> with stacktrace and all that stuff on
[20:31:40] <FromDiscord> <Yardanico> so at least you'll know where it crashes
[20:32:05] <FromDiscord> <Yardanico> actually it's built by `koch tools`
[20:37:27] <PMunch> Ah right, that helped
[20:37:45] <PMunch> So apparently this crashes the compiler: https://play.nim-lang.org/#ix=3Uil
[20:41:18] <FromDiscord> <Phil> In reply to @PMunch "A default implementation?": I was mentally again at fully generic handler-procs (as prologue calls them) aka controller procs.↵If the framework is very opinionated, you could provide an entire handler that is associated with the route and that can be adjusted by passing custom procs as parameter for fetching a given entry from the database, for checking permissions a user may have on that entry etc.
[20:42:37] <FromDiscord> <Phil> E.g. if the request is "put", then demand that there must be an ID-param or a custom-provided "fetch entry from database" proc and the default handler provided will automatically be for carrying out an update of sorts, so it'll check for update permissions and execute the correct SQL for that for you and and and
[21:01:58] *** Joins: nixpica_ (~nixpica@22.pool90-175-23.dynamic.orange.es)
[21:01:58] *** Joins: nixpica (~nixpica@22.pool90-175-23.dynamic.orange.es)
[21:02:11] *** Quits: nixpica (~nixpica@22.pool90-175-23.dynamic.orange.es) (Client Quit)
[21:04:54] *** Joins: noxnivi (~noxnivi@22.pool90-175-23.dynamic.orange.es)
[21:04:58] *** Quits: nixpica_ (~nixpica@22.pool90-175-23.dynamic.orange.es) (Client Quit)
[21:34:56] *** Quits: noxnivi (~noxnivi@22.pool90-175-23.dynamic.orange.es) (Quit: Leaving)
[21:36:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[21:42:00] <FromDiscord> <salt> i've seen this hack of mimicking oo with closures in python, maybe you can do something like that in nim, i'd have to look for it
[21:45:20] <FromDiscord> <salt> this is pretty old stuff: https://code.activestate.com/recipes/578091/  -- am not sure how one can use it with nim
[21:47:00] <FromDiscord> <Rika> streams in the nim stdlib uses this "kind of oop"
[21:49:07] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3UiF
[21:51:43] <FromDiscord> <salt> that's interesting
[21:52:59] <FromDiscord> <Phil> The end result doesn't look.... great but, well, functional I guess
[21:53:33] <FromDiscord> <Phil> `createReadHandler[ReadDiaryEntryParams, DiaryEntryRead, DiaryEntrySerializable](getDiaryEntry, checkReadPermission, serializeDiaryEntryRead)`
[21:57:36] <FromDiscord> <Phil> Fun fact, trying to provide default values for the generic parameters of generic procs is a terrible idea
[21:57:43] <FromDiscord> <Phil> (edit) 04removed "the"
[21:58:27] <FromDiscord> <Phil> I did not realize it at the time, but that essentially locks your typing down again, because now everything you provide instead of the default must match the type-signature of your default value again
[21:59:05] <FromDiscord> <gerwy> so umm, i kinda have no idea how to make macros in nim heh
[21:59:22] <FromDiscord> <Phil> That makes two of us, what are you trying to do? Maybe you can solve it with generics or templates
[21:59:45] <FromDiscord> <gerwy> sent a code paste, see https://play.nim-lang.org/#ix=3UiG
[22:00:14] <FromDiscord> <Phil> Is there a specific reason why you want to express this as a macro when you can express it in normal syntax?
[22:00:19] <FromDiscord> <gerwy> basically, its what i talked about earlier when getting second field in object variant
[22:00:37] <FromDiscord> <gerwy> In reply to @Isofruit "Is there a specific": the point is that i can't lol
[22:01:12] <FromDiscord> <Phil> I mean, the only thing that changes is what type "arg" is, right?
[22:01:19] <FromDiscord> <gerwy> yeah but
[22:01:37] <FromDiscord> <gerwy> sent a code paste, see https://play.nim-lang.org/#ix=3UiH
[22:02:05] <FromDiscord> <Phil> I might be missing this if you tried it already. Would a generic work instead?
[22:02:06] <FromDiscord> <gerwy> (edit) "https://play.nim-lang.org/#ix=3UiH" => "https://play.nim-lang.org/#ix=3UiI"
[22:02:46] <FromDiscord> <gerwy> idk, wait actually i should try to compile it because it just assume won't work from lsp showing error but it might be wrong
[22:03:06] <FromDiscord> <Phil> Ohhh wait, you don't know what type it'll spit out at the end do you
[22:03:20] <FromDiscord> <gerwy> nope it tells me `type mismatch: got <NimNode>`
[22:04:17] <FromDiscord> <Phil> More as in, you don't know the data-type of the first field in `arg` that is not called "typ", correct?↵Could be string, int, whatever
[22:06:02] <FromDiscord> <gerwy> i know the first field, its gonna be enum of what type the value is↵i just can't get second field since they have different names
[22:06:28] <FromDiscord> <gerwy> In reply to @Isofruit "More as in, you": object arg, has field `typ` which is enum and some field of value that has whatever the type
[22:09:44] <FromDiscord> <Phil> Could you give me your "Value" type definition?
[22:10:01] <FromDiscord> <Phil> Playing around a bit, I'm fairly sure you don't need a macro, a generic should do with this
[22:11:09] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:11:56] <FromDiscord> <Rika> yikes, im wondering if this is way too long of an import path for a module https://media.discordapp.net/attachments/371759389889003532/960595084804517888/unknown.png
[22:12:08] <FromDiscord> <ShalokShalom> https://nim-lang.github.io/Nim/manual_experimental.html#void-type↵↵What is the difference between void and auto?
[22:12:28] <FromDiscord> <Rika> void means no return type, at all
[22:12:42] <FromDiscord> <Rika> auto means "please infer what the type should be for me, compiler"
[22:12:48] <FromDiscord> <Rika> at least to my understanding, that is
[22:13:00] <FromDiscord> <Phil> In reply to @Life Sucks "object arg, has field": Nevermind, worked it out
[22:13:05] <FromDiscord> <ShalokShalom> Thanks
[22:13:17] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3UiL
[22:13:18] <FromDiscord> <ShalokShalom> Somebody told me, that auto means also 'any type'
[22:13:46] <FromDiscord> <Rika> technically, yeah
[22:14:09] <FromDiscord> <gerwy> sent a code paste, see https://play.nim-lang.org/#ix=3UiN
[22:14:18] <FromDiscord> <Rika> you can pass any type to the proc, and expect it to not error out because of a type mismatch at the proc signature
[22:14:27] <FromDiscord> <Rika> it can still type mismatch in the body, though
[22:14:30] <FromDiscord> <Phil> In reply to @Life Sucks "hmm looks cool i": "R" is a generic type, it's a placeholder for "Whatever the programmer defines is R"
[22:14:41] <FromDiscord> <ShalokShalom> That sounds confusing
[22:14:48] <FromDiscord> <Phil> That's why there's the `[]` in front of the proc
[22:15:13] <FromDiscord> <ShalokShalom> So it is essentially NOT any type
[22:15:16] <FromDiscord> <ShalokShalom> Just in theory
[22:15:17] <FromDiscord> <Phil> So you define what types `T` and `R` in this particular usage of `get_val` represent
[22:15:19] <FromDiscord> <Rika> im not sure what you mean
[22:15:23] <FromDiscord> <ShalokShalom> And that theory doesnt matter
[22:15:27] <FromDiscord> <gerwy> oh hmm, well that makes sense, but what if i don't know its type?
[22:15:30] <FromDiscord> <Phil> I think shalok is not talking about my generic stuff
[22:15:30] <FromDiscord> <ShalokShalom> Well, I try to understand the difference
[22:15:31] <FromDiscord> <Rika> ah yeah it would still error on compile time if types dont match
[22:15:34] <FromDiscord> <Rika> somewhere in the body
[22:15:44] <FromDiscord> <ShalokShalom> yeah, thats what I mean
[22:15:47] <FromDiscord> <gerwy> do i really need to have few if's just to get that thing?
[22:16:04] <FromDiscord> <gerwy> i can't do like `typeof` since i can't reach second field without knowing its name
[22:16:07] <FromDiscord> <ShalokShalom> So the fact that it doesnt error in the type declaration is completely irrelevant
[22:16:15] <FromDiscord> <Rika> it's equivalent to using an explicit generic with no restriction, i believe
[22:16:20] <FromDiscord> <Phil> In reply to @Life Sucks "oh hmm, well that": If you don't know the type, that means you have several options for T again, at which point the proc that uses this proc likely should also be a generic
[22:16:37] <FromDiscord> <gerwy> hmm okay i will give it a try maybe
[22:16:45] <FromDiscord> <Rika> so `proc p[T](a: T)` and `proc p(a: auto)` i believe are similar or the same
[22:17:37] <FromDiscord> <gerwy> but im also thinking↵macro in nim can get properties of what im giving to it right?↵can't it just like ↵`echo get_value(p)` and its gonna return `p.int_value` if its int or `p.float_value` if its float?
[22:17:40] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:17:49] <FromDiscord> <gerwy> just return the parameter name with dot and the second field?
[22:17:57] <FromDiscord> <gerwy> that should be doable maybe?
[22:18:02] <FromDiscord> <gerwy> but i will try the Phil way first
[22:18:10] <FromDiscord> <ShalokShalom> So auto returns a type, void does not
[22:18:31] <FromDiscord> <Rika> i guess thats one way to put it
[22:18:35] <FromDiscord> <ShalokShalom> I would it welcome, if the documentation mentions similar techniques
[22:18:48] <FromDiscord> <ShalokShalom> Like, mention auto at the place of void and vice versa
[22:18:55] <FromDiscord> <Rika> it might have just been written in a different way that you didnt understand
[22:19:14] <FromDiscord> <Phil> In reply to @Life Sucks "that should be doable": I generally recommend to look for solutions in the following order:↵generics > templates > macros↵generics are imo always easier to grasp in what they do than templates, which in turn are a fair bit easier to grasp and maintain than macros
[22:19:19] <FromDiscord> <Rika> to me, auto and void are extremely clear and didnt need explanation even as a beginner, but eh
[22:19:57] <FromDiscord> <ShalokShalom> Also like cmd and all the 3748 similar concepts
[22:20:17] <FromDiscord> <gerwy> In reply to @Isofruit "I generally recommend to": `Error: cannot instantiate: 'R'` heh
[22:20:27] <FromDiscord> <Generic> In reply to @Isofruit "I generally recommend to": don't forget generic macros and generic templates 😛
[22:20:28] <FromDiscord> <Phil> I'd need to see your code there
[22:20:40] <FromDiscord> <Phil> In reply to @Generic "don't forget generic macros": Do not speak in cursed tongue to me!
[22:20:44] <FromDiscord> <gerwy> In reply to @Life Sucks "`Error: cannot instantiate: 'R'`": either that or ↵`Error: type mismatch: got 'int64' for 'arg.int_value' but expected 'string'`
[22:20:57] <FromDiscord> <fs> is there any reason to explicitly state void as a type instead of just leaving the return type empty?
[22:21:01] <FromDiscord> <Rika> In reply to @Isofruit "Do not speak in": generic concepts
[22:21:07] <FromDiscord> <fs> (edit) "is there any reason to explicitly state void as a ... type" 03added "return"
[22:21:12] <FromDiscord> <Rika> In reply to @fs "is there any reason": not really, pretty much if you'd like
[22:21:17] <FromDiscord> <gerwy> also your example works on inherited field↵im using object variant
[22:21:19] <FromDiscord> <Rika> theyre useful for generics
[22:21:38] <FromDiscord> <ShalokShalom> In reply to @Rika "to me, auto and": Well, you are not a beginner
[22:21:40] <FromDiscord> <Rika> `proc p[T](): T` that you pass a `void` as `T`
[22:21:45] <FromDiscord> <Rika> In reply to @ShalokShalom "Well, you are not": i was one
[22:21:50] <FromDiscord> <Rika> i never thought of it
[22:21:51] <FromDiscord> <Phil> In reply to @Rika "generic concepts": Somebody get me some holy water, I've got demons to exorcise
[22:21:53] <FromDiscord> <ShalokShalom> Its pretty easy to see, whats nice to a beginner, by being a beginner
[22:21:55] <FromDiscord> <ShalokShalom> Vice versa
[22:22:05] <FromDiscord> <Rika> i will not have this conversation again
[22:22:32] <FromDiscord> <Rika> In reply to @Isofruit "Somebody get me some": lol
[22:22:44] <FromDiscord> <ShalokShalom> In reply to @Rika "i never thought of": Void is experimental
[22:22:55] <FromDiscord> <Rika> i. am. not. having. this. again.
[22:23:02] <FromDiscord> <ShalokShalom> How were you a beginner
[22:23:04] <FromDiscord> <Rika> end of conversation with me, discuss it with someone else
[22:23:08] <FromDiscord> <Rika> good bye
[22:23:09] <FromDiscord> <Phil> Shalok, stop it.
[22:23:24] <FromDiscord> <ShalokShalom> 🙄
[22:23:28] <FromDiscord> <Rika> call me ignorant all you want or whatever, i'm done with you
[22:23:41] <FromDiscord> <ShalokShalom> I call you dismissive
[22:23:42] <FromDiscord> <Phil> I was there the last time we debated for an hour or so whether things should be capable of being inferred 100%
[22:23:53] <FromDiscord> <Rika> see you elsewhere 🙂
[22:23:53] <FromDiscord> <ShalokShalom> That's not the point
[22:24:04] <FromDiscord> <gerwy> In reply to @Isofruit "I'd need to see": literally no code, i just copied your example and used it like you
[22:24:30] <FromDiscord> <ShalokShalom> I just say 'this is helpful' and instead of accepting it, my opinion is put down with the pseudo argument 'I dont need it'
[22:24:34] <FromDiscord> <gerwy> thats how Value object looks like https://media.discordapp.net/attachments/371759389889003532/960598267312365568/unknown.png
[22:24:39] <FromDiscord> <ShalokShalom> And 'you are dumb for doing so'
[22:24:48] <FromDiscord> <Rika> you're putting words in my mouth
[22:24:49] <FromDiscord> <ShalokShalom> That's extremely abusive.
[22:24:54] <FromDiscord> <Phil> Okay, could you guys move this to offtopic
[22:24:54] <FromDiscord> <Rika> i said i never thought of it
[22:24:59] <FromDiscord> <ShalokShalom> That's exactly what you convey.
[22:24:59] <FromDiscord> <Rika> i will not continue
[22:25:18] <FromDiscord> <Rika> In reply to @ShalokShalom "That's exactly what you": it is your assumption
[22:25:19] <FromDiscord> <Phil> I'd like to check out gerwy's point where I mistook his original issue to be about inheritance instead of object variants
[22:25:57] <FromDiscord> <gerwy> no, its object variant
[22:26:03] <FromDiscord> <Rika> thats what phil did say
[22:26:19] <FromDiscord> <Phil> It was my mistake that I thought it were about inheritance
[22:26:26] <FromDiscord> <gerwy> and i need to get the second field↵i know that its already possible with fieldPairs but i don't want to type it every time i need to access it...
[22:26:32] <FromDiscord> <Phil> Maybe badly expressed on my end, I'm playing about with object variant atm
[22:26:37] <FromDiscord> <gerwy> In reply to @Isofruit "It was my mistake": It's okay! i still appreciate help<3
[22:26:55] <FromDiscord> <Rika> what are you trying to do again
[22:27:31] <FromDiscord> <Phil> Essentially a getter on an object variant that gives you the filled in field without complaining
[22:27:45] <FromDiscord> <Rika> oh good luck you're not getting that
[22:28:01] <FromDiscord> <Phil> You coooouuuuuuld just write a normal proc for that
[22:28:08] <FromDiscord> <Rika> its the "return type can differ depending on a runtime value" thing
[22:28:10] <FromDiscord> <Phil> With a switch case in it
[22:28:19] <FromDiscord> <Rika> which is just, no
[22:28:37] <FromDiscord> <Phil> Wait, no, I'm an idiot, then you still don't have the type
[22:28:38] <FromDiscord> <Phil> gnaaaa
[22:28:40] <FromDiscord> <Rika> the fix is to.... use an object variant, which is just the same thing
[22:28:46] <FromDiscord> <Rika> back to square one so
[22:28:50] <FromDiscord> <Rika> nope, you just dont here
[22:28:52] <FromDiscord> <Phil> It's object variants all the way down
[22:28:56] <FromDiscord> <Rika> template if you want
[22:29:05] <FromDiscord> <Rika> prolly?
[22:29:16] <FromDiscord> <Rika> im not sure, ive never used this but i think its prolly possible
[22:29:46] <FromDiscord> <Phil> I mean, you run into trouble every time
[22:29:53] <FromDiscord> <Rika> nop
[22:29:54] <FromDiscord> <Phil> Because the variable you put your stuff in has to know what type it is
[22:29:56] <FromDiscord> <Rika> nope
[22:29:58] <FromDiscord> <Rika> you cant do this at all
[22:30:04] <FromDiscord> <Rika> manually only
[22:30:12] <FromDiscord> <Rika> i forget easily
[22:30:12] <FromDiscord> <Phil> And with an object variant you don't necessarily know what value your type is
[22:30:25] <FromDiscord> <Phil> (edit) "And with an object variant you don't necessarily know what value your ... type" 03added "output"
[22:30:38] <FromDiscord> <gerwy> In reply to @Rika "oh good luck you're": im very sure that it can be done easily in macros but macros in Nim are a bit weird and wacky
[22:30:42] <FromDiscord> <Rika> no
[22:30:45] <FromDiscord> <Rika> you cant
[22:31:00] <FromDiscord> <gerwy> but i just need to add it to code
[22:31:01] <FromDiscord> <Rika> return type based on runtime value is impossible without type elision i believe?
[22:31:08] <FromDiscord> <Rika> no matter what
[22:31:16] <FromDiscord> <Rika> macro, template, no not possible
[22:31:27] <FromDiscord> <Rika> i'm pretty confident its not
[22:31:35] <FromDiscord> <gerwy> i know what type its gonna be, i have an enum that says it, it shows me what type the value is that its holding↵i just can't access it manually typing the field
[22:31:38] <FromDiscord> <fs> macros only act in compile time
[22:31:46] <FromDiscord> <Rika> you dont know what it is on compile time
[22:31:54] <FromDiscord> <Rika> it must be known on compile time
[22:31:56] <FromDiscord> <Rika> therefore
[22:32:00] <FromDiscord> <Phil> Could you show me the context in which you're trying to have this proc?
[22:32:07] <FromDiscord> <fs> (edit) "macros" => "macro magic" | "act" => "acts"
[22:32:18] <FromDiscord> <Phil> I want to be doubly sure I'm not misunderstanding you there
[22:32:33] <FromDiscord> <Rika> okay wait
[22:32:34] <FromDiscord> <gerwy> sent a code paste, see https://paste.rs/8lm
[22:32:44] <FromDiscord> <Rika> wait wait i think i can think of a thing that MIGHT work
[22:33:16] <FromDiscord> <gerwy> think fast
[22:33:33] <FromDiscord> <Rika> i cant make code as quick as a certain type of meat here can
[22:34:13] <FromDiscord> <Phil> Question,if you do `let x = get_value(myValue)` do you always know at compile time what type x is going to be?
[22:35:00] <FromDiscord> <Phil> (that was directed at gerwy)
[22:35:26] <FromDiscord> <Rika> this might work
[22:35:27] <FromDiscord> <Rika> im not sure
[22:35:29] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3UiT
[22:35:48] <FromDiscord> <Rika> yes the exception is required
[22:36:19] <FromDiscord> <Rika> also no its just a proof of concept, you might need to promote this into a macro for parts
[22:36:26] <FromDiscord> <Rika> (edit) "also no its just a proof of concept, you might need to promote this into a macro for ... partsto" 03added "the enum and field" | "the enum and fieldparts ... " 03added "to work"
[22:36:50] <FromDiscord> <Rika> usage would be like `v.value(int)` or something like that
[22:36:57] <FromDiscord> <Phil> In reply to @fs "is there any reason": I... err... can't think of anything tbh
[22:36:59] <FromDiscord> <Rika> which is still pretty bad, but you can use generics here
[22:37:07] <FromDiscord> <Rika> `v.value(T)` if you have a T generic type
[22:37:18] <FromDiscord> <gerwy> In reply to @Isofruit "Question,if you do `let": compile time, not sure, but runtime yeah you will know
[22:37:23] <FromDiscord> <Rika> if this is still pretty bad then idk what you want lol
[22:37:28] <FromDiscord> <Rika> its just an idea
[22:37:31] <FromDiscord> <Rika> its three am
[22:37:35] <FromDiscord> <Rika> give me a break xdddddd
[22:37:36] <FromDiscord> <Phil> In reply to @Life Sucks "compile time, not sure,": Runtime isn't good enough sadly... I think
[22:38:12] <FromDiscord> <gerwy> sent a code paste, see https://play.nim-lang.org/#ix=3UiV
[22:38:17] <FromDiscord> <Rika> no
[22:38:21] <FromDiscord> <gerwy> D:
[22:38:21] <FromDiscord> <Rika> procs cannot be untyped
[22:38:24] <FromDiscord> <gerwy> bruh
[22:38:34] <FromDiscord> <Phil> Because the compiler has to figure out "Do I reserve some memory space the size of an int? A string? an array?"
[22:38:37] <FromDiscord> <gerwy> what if i change untyped to T?
[22:38:44] <FromDiscord> <Rika> no
[22:38:51] <FromDiscord> <Rika> return types conflict in each runtime branch
[22:39:06] <FromDiscord> <ajusa> there's no way to determine stuff at compile time when it is decided at runtime
[22:39:12] <FromDiscord> <ajusa> if v is static maybe you could do it
[22:39:34] <FromDiscord> <gerwy> no
[22:40:35] <FromDiscord> <Phil> This is one of those points where it shows that nim doesn't really do dynamic typing. You can escape the static typing a little bit in general, but a type that isn't known at compiletime is going to be hard to deal with
[22:40:49] <FromDiscord> <fs> why don't you guys just appreciate the fact that you're working in a static language :)
[22:40:57] <FromDiscord> <Vindaar> given that you already provide a generic argument `T` you can make it work if in each branch you call some conversion proc from type `U` (the type of the field) to the output `T`. That may error at CT for certain combinations
[22:41:21] <FromDiscord> <Phil> In reply to @fs "why don't you guys": I mean, I do, I just also like generics a lot 😛
[22:42:14] <FromDiscord> <Rika> In reply to @fs "why don't you guys": sometimes its needed really, like if you want to represent arbitrary JSON
[22:42:24] <FromDiscord> <Rika> but yeah idk it hasnt been a problem for me
[22:42:34] <FromDiscord> <ShalokShalom> Could concepts do it?
[22:42:46] <FromDiscord> <Rika> concepts are compile time as well
[22:43:04] <FromDiscord> <gerwy> damn its so simple concept and im still struggling to find a solution bruh
[22:43:18] <FromDiscord> <Rika> shalok i'll have to apologise for last time, my intention was not to tell you what you thought i mean
[22:43:18] <FromDiscord> <Rika> (edit) "mean" => "meant"
[22:43:33] <FromDiscord> <fs> In reply to @Rika "sometimes its needed really,": mh, then stdlib json already solves it with the getStr, getInt, ...
[22:43:42] <FromDiscord> <Rika> but i meant something more like "i didnt think it was common to mistake auto and void, so that's why its not there"
[22:43:47] <FromDiscord> <Rika> im not sure if people do that
[22:43:49] <FromDiscord> <Phil> In reply to @Life Sucks "damn its so simple": It's a simple concept, but in a static language this particular thing is very hard to achieve in order to allow other nice things in nim
[22:44:10] <FromDiscord> <Rika> In reply to @fs "mh, then stdlib json": its still ugly lol
[22:44:17] <FromDiscord> <Phil> There can be no types that you don't know what they are at compile time
[22:44:51] <FromDiscord> <Rika> i really prefer it if the type were not embedded in the name xdddd
[22:44:57] <FromDiscord> <Rika> get(T)
[22:45:07] <FromDiscord> <fs> i like the way treeform's jsony maps json to static types
[22:45:15] <FromDiscord> <Rika> yes that works most of the time and its good
[22:45:20] <FromDiscord> <gerwy> just tell me how do to this in macro ↵that i give it an enum and that Value variable↵and it just returns like `variable.field_according_to_enum`
[22:45:24] <FromDiscord> <Phil> jsony is my go to for transforming object --> json
[22:45:26] <FromDiscord> <Rika> but sometimes json's arbitrary-er than that
[22:45:47] <FromDiscord> <Rika> In reply to @Life Sucks "just tell me how": no can do if the enum is not static 🙂
[22:45:57] <FromDiscord> <Rika> back to square one, are we
[22:46:22] <FromDiscord> <Phil> I mean, maybe let him experience for himself? I'd give you a macro to knock yourself out but I tend to avoid macros for a reason
[22:46:40] <FromDiscord> <Phil> (edit) "himself?" => "himself (?)↵Could be educational ^^↵"
[22:46:44] <FromDiscord> <ShalokShalom> In reply to @Rika "shalok i'll have to": All fine
[22:48:30] <FromDiscord> <ShalokShalom> sent a long message, see http://ix.io/3UiY
[22:48:40] <FromDiscord> <Rika> hm
[22:48:41] <FromDiscord> <ShalokShalom> Since you might look for a, but stumble across b
[22:48:50] <FromDiscord> <Rika> just a different way of thinking
[22:49:03] <FromDiscord> <Rika> really hard to account for stuff like that really
[22:49:06] <FromDiscord> <Rika> (edit) "that" => "that,"
[22:49:55] <FromDiscord> <ShalokShalom> In reply to @Isofruit "There can be no": So, I assume void simply counts as its own type?↵↵And auto as well?
[22:49:56] <FromDiscord> <Phil> In reply to @Life Sucks "just tell me how": Try to tackle beef if he shows up?
[22:50:05] <FromDiscord> <ShalokShalom> Like, at compile time.
[22:50:10] <FromDiscord> <gerwy> Beef gets really easily annoyed by me heh
[22:50:12] <FromDiscord> <Phil> In reply to @ShalokShalom "So, I assume void": Void is an absence of type. It is not a type, it is nothing
[22:50:28] <FromDiscord> <Phil> It is beyond type for it's just nothingness
[22:51:14] <FromDiscord> <ShalokShalom> So, it avoids type checking?
[22:51:16] <FromDiscord> <Phil> and auto as stated is just a place-holder that the compiler fills in for you
[22:51:24] <FromDiscord> <Rika> teeeeeeeeeeechnically its a type but only in a sense, its less type-y than int lool
[22:51:25] <FromDiscord> <Rika> (edit) "lool" => "lol"
[22:51:28] <FromDiscord> <Phil> It is a type, just one that you don't specify
[22:51:31] <FromDiscord> <ShalokShalom> So, that would mean its even more loose than dynamic types?
[22:51:35] <FromDiscord> <ShalokShalom> Aha.
[22:51:37] <FromDiscord> <Phil> (edit) "It ... is" 03added "(auto)"
[22:51:40] <FromDiscord> <Rika> no its literally the lack of a type
[22:51:47] <FromDiscord> <Rika> you cannot pass anything to it
[22:51:50] <FromDiscord> <Rika> it is no type
[22:52:00] <FromDiscord> <Rika> oh auto?
[22:52:03] <FromDiscord> <Rika> im lost xd
[22:52:06] <FromDiscord> <ShalokShalom> Well both
[22:52:21] <FromDiscord> <ShalokShalom> See, that would make sense to be documented
[22:52:26] <FromDiscord> <Rika> void is lack of type in the sense there is none↵auto is lack of type in the sense that you leave the compiler to choose
[22:52:28] <FromDiscord> <Phil> We're talking about both at once.↵Auto is a type, just one that the compiler determines.↵Void isn't a type, it's just nothing.
[22:52:29] <FromDiscord> <Rika> oh
[22:52:32] <FromDiscord> <Rika> i see your confusion now]
[22:52:43] <FromDiscord> <gerwy> okay so Rika, having your thingy i think might be the closest to what i want
[22:52:49] <FromDiscord> <gerwy> what should toEnum(T) return
[22:53:13] <FromDiscord> <Rika> nimnode of an enum value
[22:53:14] <FromDiscord> <ShalokShalom> In reply to @Isofruit "We're talking about both": That sounds very appropriate
[22:53:31] <FromDiscord> <Rika> it was just a concept i htought of and i dont know if it works at all'
[22:53:41] <FromDiscord> <Rika> you still kinda have to pass a type
[22:53:41] <FromDiscord> <gerwy> sent a code paste, see https://play.nim-lang.org/#ix=3Uj1
[22:53:47] <FromDiscord> <Rika> In reply to @Life Sucks "and whats the deal": yeah pm
[22:53:48] <FromDiscord> <gerwy> i mean it seems like it will work
[22:54:02] <FromDiscord> <Phil> IIRC it works identical in java and...err... does C++ have a similar concept? I know it has auto which does the same as in nim, just not sure about void
[22:54:05] <FromDiscord> <gerwy> In reply to @Rika "yeah pm": okay so i guess now i need to figure out how to declare it
[22:54:08] <FromDiscord> <Rika> yeah, but idk why you're against `.int_value` if youre fine with `.value(int)`
[22:54:21] <FromDiscord> <Rika> i have my reasons, idk yours
[22:55:13] <FromDiscord> <fs> ~~just use python~~
[22:55:14] <FromDiscord> <gerwy> hmm wait i have an idea
[22:55:20] <FromDiscord> <gerwy> In reply to @fs "~~just use python~~": ew nah, i prefer to suffer
[22:55:23] <FromDiscord> <Phil> In reply to @fs "~~just use python~~": But the speeeeeeed
[22:55:34] <FromDiscord> <Rika> In reply to @Life Sucks "ew nah, i prefer": so you prefer using python?
[22:55:41] <FromDiscord> <Rika> 😛
[22:55:43] <FromDiscord> <ShalokShalom> In reply to @Isofruit "IIRC it works identical": Yeah, I also thought about [auto] coming from C++
[22:56:21] <FromDiscord> <Phil> let me google if c++ has void
[22:56:45] <FromDiscord> <ShalokShalom> Well, C has a void type to begin with
[22:56:50] <FromDiscord> <Phil> I'm reading about void pointers
[22:56:51] <FromDiscord> <ShalokShalom> But idk if that's the same
[22:56:52] <FromDiscord> <Phil> This is dark magic
[22:56:53] <FromDiscord> <Phil> burn it
[22:57:00] <FromDiscord> <Rika> nim has `pointer` though :)))
[22:57:02] <FromDiscord> <ShalokShalom> 🔥
[22:57:09] <FromDiscord> <Rika> bet phil cant sleep today because of that
[22:57:19] <FromDiscord> <Phil> I need holy water and holy fire
[22:57:24] <FromDiscord> <Rika> is there holy fire?
[22:57:29] <FromDiscord> <Phil> One to exorcise generic concepts, the other to burn void pointers
[22:57:31] <FromDiscord> <Rika> shit man sorry you're shit outta luck
[22:57:35] <FromDiscord> <Phil> If there isn't  I will make some
[22:57:54] <FromDiscord> <Rika> what about void pointers that store void pointers
[22:58:06] <FromDiscord> <Rika> `ptr ptr pointer`
[22:58:09] <FromDiscord> <Phil> I'll staple so many layers of generic on top of one another until my machine bursts in holy fury
[22:58:18] <FromDiscord> <Phil> And a holy flame shall erupt from it
[22:58:18] <FromDiscord> <fs> i should get more into pointers and c to understand the jokes
[22:58:32] <FromDiscord> <Phil> void pointers can just be converted into any type
[22:58:36] <FromDiscord> <gerwy> okay never mind it doesn't work D:
[22:58:39] <FromDiscord> <fs> (edit) "i should get more into pointers and c ... to" 03added "just"
[22:59:05] <FromDiscord> <Phil> It's basically "What if I basically allow this to be anything now and open myself up to a whole host of potential memory issues"
[22:59:35] <FromDiscord> <gerwy> sent a code paste, see https://play.nim-lang.org/#ix=3Uj3
[22:59:53] <FromDiscord> <Rika> yeah i told you
[22:59:55] <FromDiscord> <Rika> why
[22:59:58] <FromDiscord> <Rika> i told you why
[22:59:58] <FromDiscord> <gerwy> :<<
[23:00:08] <FromDiscord> <gerwy> i don't like it
[23:00:13] <FromDiscord> <gerwy> it should work >:c
[23:00:23] <FromDiscord> <Phil> I banged my head against the object variant wall as well for a while
[23:00:25] <FromDiscord> <Phil> I relented
[23:00:52] <FromDiscord> <Phil> I found my pice in solving the problem in a different way... one that surpsrisingly enough lead to a macro
[23:00:57] <FromDiscord> <gerwy> yeah i have enough i think, but i still don't want to have millions of if's just to get that stupid value
[23:01:00] <FromDiscord> <Phil> (edit) "surpsrisingly" => "surprisingly"
[23:01:25] <FromDiscord> <Phil> (edit) "pice" => "peace"
[23:01:52] <FromDiscord> <Rika> i'll finish the demo i made if you can give me the type def of your Value thing
[23:02:17] <FromDiscord> <Phil> Not a screenshot, copy paste of code please, so Rika can copy paste as well
[23:02:29] <FromDiscord> <Rika> haha
[23:02:32] <FromDiscord> <Rika> thats what i meant
[23:02:46] <FromDiscord> <gerwy> oh oka wait
[23:02:53] <FromDiscord> <ShalokShalom> @gerwy what are you trying to do in the first place?
[23:03:01] <FromDiscord> <Phil> A getter on an object variant
[23:03:09] <FromDiscord> <gerwy> sent a code paste, see https://play.nim-lang.org/#ix=3Uj4
[23:03:15] <FromDiscord> <ShalokShalom> Seems like you map types to .. equivalent versions of it
[23:03:27] <FromDiscord> <Phil> Want's to get the value out of an object variant for which he doesn't know the type. So a getter that could return any type whatsoever
[23:03:46] <FromDiscord> <gerwy> In reply to @ShalokShalom "<@347345994217816066> what are you": having an AST, trying to evaluate expressions with this, since i don't know what their types are, i just know an enum and string value
[23:03:54] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[23:05:36] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:05:46] <FromDiscord> <ShalokShalom> And there is no concept in Nim, that does allow that?
[23:05:59] <FromDiscord> <ShalokShalom> This sounds like a relatively common use case
[23:06:20] <FromDiscord> <ShalokShalom> Would it make sense to raise an issue, and ask for a new implementation, that allows that?
[23:06:26] <FromDiscord> <Phil> you're trying to do `let x = get_value(objectVariant)` without knowing if x will be an int, string, object, array, seq, set or whatnot
[23:06:36] <FromDiscord> <Phil> And in this case, the compiler won't know either
[23:06:51] <FromDiscord> <Phil> And if the compiler doesn't know at compile time, it can't deal with it
[23:07:35] <FromDiscord> <gerwy> In reply to @ShalokShalom "And there is no": there is and its called object variant, exact thing im using
[23:07:39] <FromDiscord> <ShalokShalom> C# has lots of dynamic features, despite being a mostly statically typed language
[23:07:45] <FromDiscord> <gerwy> people call it tagged union too
[23:07:48] <FromDiscord> <ShalokShalom> 😬
[23:07:50] <FromDiscord> <Phil> Because you don't know if objectVariant is of variant "hasString", "hasObj", "hasArr", "hasSeq" etc.
[23:08:13] <FromDiscord> <ShalokShalom> In reply to @Life Sucks "people call it tagged": Yeah, but why isnt it working then for you?
[23:08:19] <FromDiscord> <enthus1ast> you must check with "of" then cast to concrete type
[23:08:22] <FromDiscord> <gerwy> In reply to @Isofruit "you're trying to do": you know if its an int or string or whatever thats the point
[23:08:26] <FromDiscord> <enthus1ast> or convert not cast
[23:08:33] <FromDiscord> <gerwy> In reply to @ShalokShalom "Yeah, but why isnt": because nim is wacky and doesn't understand simple stuff
[23:08:37] <FromDiscord> <ShalokShalom> Seems like have only part of the solution
[23:08:41] <FromDiscord> <Phil> In reply to @ShalokShalom "Yeah, but why isnt": Because you can deal with it: By dealing with what to do for every single variant
[23:08:45] <FromDiscord> <Rika> im still not sure why you'd rather my solution than just `int_value` etc etc
[23:08:46] <FromDiscord> <Phil> Which is a lot of typing
[23:08:46] <FromDiscord> <ShalokShalom> Yeah, thats what I mean.
[23:09:00] <FromDiscord> <gerwy> In reply to @Rika "im still not sure": how would i know if its INT?
[23:09:03] <FromDiscord> <gerwy> (edit) "INT?" => "int?"
[23:09:09] <FromDiscord> <ShalokShalom> In reply to @Isofruit "Which is a lot": So that sounds like a macro?
[23:09:42] <FromDiscord> <Phil> Not necessarily. I don't know what you want to do when you encounter an int variant vs a string variant
[23:09:45] <FromDiscord> <gerwy> In reply to @enthus1ast "or convert not cast": so you say i should do `toInt(v.int_value)` or something like this?
[23:09:56] <FromDiscord> <Phil> So I can't write a macro that does a specific thing for you
[23:10:19] <FromDiscord> <enthus1ast> first check what kind the object is, then use type conversion
[23:10:25] <FromDiscord> <ShalokShalom> That sounds like dynamic typing then :p
[23:10:30] <FromDiscord> <Phil> If I presume that you always want whatever value is stored as a string I could write a compile-time-proc instead of a macro that contains the entire if-stuff
[23:10:41] <FromDiscord> <Phil> (edit) "If I presume that you always want whatever value is stored as a string I could write a compile-time-proc instead of a macro that contains the entire if-stuff ... " 03added "and converts from the various types into string"
[23:11:10] <FromDiscord> <gerwy> In reply to @enthus1ast "first check what kind": yeah i check it with `case typ` which is an enum and it tells me which type this object is
[23:11:13] <FromDiscord> <Phil> In reply to @ShalokShalom "That sounds like dynamic": Yeh, just type-intensive to ensure correctness
[23:11:34] <FromDiscord> <Phil> (edit) "Yeh," => "Its"
[23:11:43] <FromDiscord> <Phil> (edit) "type-intensive" => "typing-intensive"
[23:12:22] <FromDiscord> <ShalokShalom> Yeah, I see.
[23:12:41] <FromDiscord> <enthus1ast> ah no ignore me, not test with `of`
[23:12:50] <FromDiscord> <enthus1ast> this is for oop
[23:13:05] <FromDiscord> <gerwy> sent a code paste, see https://play.nim-lang.org/#ix=3Uj6
[23:13:09] <FromDiscord> <enthus1ast> yes
[23:13:19] <FromDiscord> <Phil> In reply to @enthus1ast "ah no ignore me,": I don't think I've ever used of anywhere so I can't really comment on it.... that was sarcasm right?
[23:13:31] <FromDiscord> <Phil> (edit) "In reply to @enthus1ast "ah no ignore me,": I don't think I've ever used of anywhere so I can't really comment on it.... that was sarcasm ... right?" 03added "about how we didn't respond to "of","
[23:13:35] <FromDiscord> <gerwy> sent a code paste, see https://play.nim-lang.org/#ix=3Uj7
[23:13:49] <FromDiscord> <enthus1ast> no with `of` you can test if an object is of the given type
[23:13:59] <FromDiscord> <ShalokShalom> @gerwy is this 'case typ' meaning case type?
[23:14:03] <FromDiscord> <Phil> Wait... isn't that just "is"?
[23:14:30] <FromDiscord> <gerwy> In reply to @ShalokShalom "<@347345994217816066> is this 'case": yeah, typ is enum storing what type that object is
[23:14:35] <FromDiscord> <Phil> (My stuff was directed at enthus1ast)
[23:14:38] <FromDiscord> <gerwy> In reply to @Isofruit "Wait... isn't that just": no
[23:14:50] <FromDiscord> <Phil> Hah! Saw it coming from a mile away!
[23:15:02] <FromDiscord> <ShalokShalom> So just to avoid name duplication
[23:15:50] <FromDiscord> <Phil> Shalok, have you read about object variants in nim already?
[23:15:57] <FromDiscord> <ShalokShalom> Would you need proc in this case?
[23:16:05] <FromDiscord> <ShalokShalom> Seems like func would work as well
[23:16:14] <FromDiscord> <ShalokShalom> And provides you with more guarantees.
[23:16:34] <FromDiscord> <ShalokShalom> In reply to @Isofruit "Shalok, have you read": Yes, what am I missing?
[23:16:46] <FromDiscord> <gerwy> In reply to @ShalokShalom "Seems like func would": if it only could return any type
[23:17:09] <FromDiscord> <Phil> In reply to @ShalokShalom "Yes, what am I": Nothing, If not I'd have just thrown the url to their docs at you since I thought you might've found that interesting
[23:17:23] <FromDiscord> <enthus1ast> this is what i meant @Phil   https://play.nim-lang.org/#ix=3Uj9
[23:17:35] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3Ujb
[23:17:37] <FromDiscord> <Rika> this is dumb btw
[23:17:40] <FromDiscord> <ShalokShalom> Yeah, actually the only Nim code I every wrote and commited, is nothing both that
[23:17:54] <FromDiscord> <ShalokShalom> But I am not used yet to call it object variants
[23:18:06] <FromDiscord> <ShalokShalom> Grew up calling them choice types
[23:18:20] <FromDiscord> <ShalokShalom> Or discriminated unions.
[23:18:21] <FromDiscord> <Rika> yeah some others call them tagged unions as well
[23:18:27] <FromDiscord> <Phil> Ah, fair.
[23:18:29] <FromDiscord> <ShalokShalom> Yeah
[23:18:39] <FromDiscord> <Rika> lotsa names for it
[23:18:40] <FromDiscord> <enthus1ast> since attribs in case objects cannot be named nicely, i try to avoid them
[23:18:47] <FromDiscord> <ShalokShalom> I was confused initially that they are realized with objects here
[23:19:34] <FromDiscord> <Phil> In reply to @enthus1ast "this is what i": Huh... yeah that works entirely different than "is"
[23:19:44] <FromDiscord> <ShalokShalom> sent a long message, see http://ix.io/3Ujc
[23:20:13] <FromDiscord> <enthus1ast> my example is misleading since the attrib name can be just val (withouth the str/int prefix)
[23:20:16] <FromDiscord> <gerwy> sent a code paste, see https://paste.rs/DTi
[23:20:17] <FromDiscord> <Rika> In reply to @Life Sucks "throws an exception for": used how?
[23:20:49] <FromDiscord> <gerwy> In reply to @Rika "used how?": pasted your example lol
[23:20:50] <FromDiscord> <ShalokShalom> Could pure C do what gerwy wants?
[23:20:56] <FromDiscord> <Rika> thats the point i mean
[23:20:58] <FromDiscord> <ShalokShalom> Since then we could just inline.
[23:21:01] <FromDiscord> <Rika> the first part works, the second doesnt
[23:21:02] <FromDiscord> <Rika> just to show
[23:21:02] <FromDiscord> <enthus1ast> and this is the reason i usually use them instead of case objects
[23:21:03] <FromDiscord> <Phil> In reply to @ShalokShalom "Objects always represented to": How languages shape what concepts you like. In java everything insane I've seen is objects. The only good bits I've seen in there resemble functional programming bits (lambdas, just so many lambdas)
[23:21:07] <FromDiscord> <gerwy> In reply to @ShalokShalom "Could pure C do": in macros, maybe, i have no idea if there are tagged unions in C
[23:21:20] <FromDiscord> <ShalokShalom> In reply to @Isofruit "How languages shape what": Yeah, totally
[23:21:37] <FromDiscord> <ShalokShalom> You have ever seen the Java part of the Clojure source code?
[23:21:40] <FromDiscord> <Rika> i should prolly go to sleep lest i risk having under 6 hours of sleep
[23:21:47] <FromDiscord> <ShalokShalom> Its said to be pretty much like that.
[23:21:50] <FromDiscord> <gerwy> In reply to @enthus1ast "and this is the": i can't use just val for object variant, since it shows an error for redefinition of val
[23:21:50] <FromDiscord> <Rika> ask beef to fix whatever dumb idea i had today
[23:21:56] <FromDiscord> <ShalokShalom> In reply to @Rika "i should prolly go": Sleep well.
[23:22:08] <FromDiscord> <Phil> Sleeping? So weak!
[23:22:11] <FromDiscord> <gerwy> In reply to @Rika "i should prolly go": go to sleep Rika, i appreciate all your help, i will figure it out thank youu<3
[23:22:16] <FromDiscord> <Phil> Just stay awake! Sleep is wasted time!
[23:22:24] <FromDiscord> <ShalokShalom> In reply to @Life Sucks "in macros, maybe, i": Well, I am generally asking, because C is much more loose about its types
[23:22:29] <FromDiscord> <Rika> last time i did that was yesterday, for 30 hours
[23:22:33] <FromDiscord> <Phil> You could be coding more an give progressively better coding advice as you forego sleep for more coding!
[23:22:37] <FromDiscord> <gerwy> oh wait it makes sense that it doesn't work since you made it doesn't work lol
[23:22:40] <FromDiscord> <Rika> no thanks, i have things to do in the morning
[23:22:51] <FromDiscord> <gerwy> but i still want it to use enum instead of type <_>
[23:23:06] <FromDiscord> <creikey> In reply to @Elegantbeef "Same with your `sendData`": this is an interesting way of doing it, I was mainly just used to binny but didn't want to add a whole other dependency so just copy pasted the functions I needed
[23:23:14] <FromDiscord> <enthus1ast> yes i know, thats the reason i try to avoid case objects, but use inheritance↵(@gerwy)
[23:23:29] <FromDiscord> <Rika> In reply to @Life Sucks "but i still want": cannot do, the value must be compile time resolvable
[23:23:41] <FromDiscord> <ShalokShalom> In reply to @Isofruit "You could be coding": That doesn't scale well 😂
[23:23:44] <FromDiscord> <Rika> that is a must, there is no going around that
[23:23:46] <FromDiscord> <creikey> the counting down so I don't have a seq for indices is useful though I forgot you could do that
[23:23:54] <FromDiscord> <Rika> In reply to @ShalokShalom "That doesn't scale well": it's a fine line
[23:23:56] <FromDiscord> <gerwy> In reply to @Rika "cannot do, the value": i can do like↵`ident tolower($T) & "value"` maybe hmm?
[23:24:01] <FromDiscord> <Phil> In reply to @ShalokShalom "That doesn't scale well": Just buy more scales if your scale isn't well!
[23:24:09] <FromDiscord> <Rika> a fine line of alcohol, caffeine, and sleep deprivation
[23:24:12] <FromDiscord> <enthus1ast> @gerwy\: https://play.nim-lang.org/#ix=3Uje
[23:24:50] <FromDiscord> <gerwy> In reply to @enthus1ast "<@347345994217816066>\: https://play.nim-lang.org/#": cool, now you need to use specifically StrObj only if you know exactly thats its gonna be string
[23:26:13] <FromDiscord> <gerwy> made it work for enums
[23:26:18] <FromDiscord> <gerwy> thanks to toLowerAscii
[23:26:37] <FromDiscord> <gerwy> oh wait i need to..
[23:26:38] <FromDiscord> <gerwy> uugh
[23:26:46] <FromDiscord> <gerwy> Rikaaa
[23:27:35] <FromDiscord> <ShalokShalom> Considering the malware issue, that led to blocking Nim, and all Nim programs in general seen by Windows as potential thread:↵↵How does Windows know, that a certain software is written in Nim?
[23:27:41] <FromDiscord> <ShalokShalom> Considering its compiled.
[23:27:50] <FromDiscord> <gerwy> you know, this `echo val.value(INT)` is cool and all
[23:28:05] <FromDiscord> <gerwy> but i kinda wanted something like `echo val.value(val.typ)` to work too...
[23:28:39] <FromDiscord> <ShalokShalom> (edit) 04removed "Nim, and all" | 04removed "in general seen"
[23:28:43] <FromDiscord> <gerwy> In reply to @ShalokShalom "Considering the malware issue,": not only Nim suffers from that, its just that software is not signed↵same happens on Mac
[23:28:53] <FromDiscord> <ShalokShalom> Yeah, true
[23:28:58] <FromDiscord> <Rika> In reply to @ShalokShalom "Considering the malware issue,": Signature or patterns in the code generated
[23:29:02] <FromDiscord> <creikey> In reply to @Life Sucks "not only Nim suffers": I tried googling it but couldn't get a straight answer, how hard is it to get your executables signed?
[23:29:08] <FromDiscord> <Rika> In reply to @creikey "I tried googling it": Expensive
[23:29:09] <FromDiscord> <Phil> In reply to @ShalokShalom "Considering the malware issue,": Antivirus is just all ML learning
[23:29:14] <FromDiscord> <ShalokShalom>  https://media.discordapp.net/attachments/371759389889003532/960614540607885382/Screenshot_2022-04-04-20-59-06-37.jpg
[23:29:23] <FromDiscord> <ShalokShalom> But I am talking about that
[23:29:27] <FromDiscord> <Rika> In reply to @Life Sucks "Rikaaa": Again the enum should be compile time determinable as I’ve said
[23:29:31] <FromDiscord> <Rika> Nowhere around that
[23:29:43] <FromDiscord> <ShalokShalom> In reply to @Isofruit "Antivirus is just all": Ah, I see. So it decompiled and knows its based on Nim
[23:29:44] <FromDiscord> <Phil> So it'll have some patterns the way the nim compiler translates nim code to C
[23:29:53] <FromDiscord> <gerwy> In reply to @Isofruit "Antivirus is just all": no, its checking hash of software and also its behaviour in small VM↵ML i think is not that effective
[23:30:05] <FromDiscord> <gerwy> In reply to @Rika "Nowhere around that": thats such a boomer
[23:30:07] <FromDiscord> <ShalokShalom> In reply to @creikey "I tried googling it": There are Reddit groups, who help ypu
[23:30:15] <FromDiscord> <ShalokShalom> Since x amount of users can say its fine
[23:30:19] <FromDiscord> <ShalokShalom> And then its fine
[23:30:30] <FromDiscord> <Rika> Sometimes AV vendors are stubborn though
[23:30:34] <FromDiscord> <Phil> In reply to @Life Sucks "no, its checking hash": It checks software hashes against a known whitelist?
[23:30:36] <FromDiscord> <creikey> In reply to @ShalokShalom "Since x amount of": interestintg
[23:30:37] <FromDiscord> <ShalokShalom> In reply to @Isofruit "So it'll have some": I see.
[23:30:44] <FromDiscord> <creikey> In reply to @ShalokShalom "There are Reddit groups,": https://stackoverflow.com/questions/252226/signing-a-windows-exe-file there's this but how do I get the actual certificate
[23:30:47] <FromDiscord> <creikey> do I need to be LLC
[23:30:55] <FromDiscord> <Rika> No you just have to pay
[23:31:03] <FromDiscord> <gerwy> i guess i will use that cringe ass fieldPairs for this moment↵we will see what i can do in future↵i planned on rewriting this language in Zig but thats only if i will decide to make it better and stuff
[23:31:04] <FromDiscord> <Phil> Or is there more to it? Because that'd be very surprising to me if you can see from a hash whether it's malware or not
[23:31:17] <FromDiscord> <Phil> Unless you've got blacklists/whitelists
[23:31:39] <FromDiscord> <gerwy> In reply to @Isofruit "It checks software hashes": ye, if the software does something malicious to your PC, its hash is saved in database and then reused in AV scanning files
[23:31:44] <FromDiscord> <creikey> In reply to @Rika "No you just have": who do I pay though? like where is the information
[23:32:25] <FromDiscord> <Phil> In reply to @Life Sucks "ye, if the software": That wouldn't explain why nim lands in the bin though, would it? That is under the assumption the various AV providers out there haven't just thrown the entire nim language on a blacklist
[23:32:46] <FromDiscord> <Phil> I assume that because I want to have some faith in humanity that AV providers don't just blacklist an entire language because of like 3 programs written in it
[23:32:58] <FromDiscord> <gerwy> In reply to @Isofruit "That wouldn't explain why": not signed software that does suspicious things↵again, you can sign your binary on windows
[23:33:33] <FromDiscord> <Phil> But the suspicious things would be determined through ML I'd assume
[23:33:56] <FromDiscord> <creikey> https://www.digicert.com/tls-ssl/compare-certificates do I buy this?
[23:34:37] <FromDiscord> <ShalokShalom> In reply to @creikey "who do I pay": You can also get your binary on the whitelist, when a certain amount of users accepts it as trustworthy
[23:34:46] <FromDiscord> <enthus1ast> when its easy for AV to trigger on eg gc then yes \:)↵(@Phil)
[23:34:49] <FromDiscord> <ShalokShalom> You can avoid paying that way
[23:34:57] <FromDiscord> <creikey> In reply to @ShalokShalom "You can also get": every time I update the executable though the same process has to happen right
[23:35:06] <FromDiscord> <creikey> but if I get the signature I can just sign every update
[23:35:06] <FromDiscord> <ShalokShalom> In reply to @Isofruit "I assume that because": Cute
[23:35:32] <FromDiscord> <enthus1ast> i must say lately my windows antivirus and sophos did not flag nim applications
[23:36:52] <FromDiscord> <ShalokShalom> In reply to @Isofruit "That wouldn't explain why": "This language is so rarely used, just block every single program. Basically, the malware is the first program, that I have encountered in it, so it is probably not really used for anything else."
[23:37:48] <FromDiscord> <ShalokShalom> In reply to @enthus1ast "when its easy for": You can still create hash rates from all Nim programs that are out in the wild.
[23:37:58] <FromDiscord> <gerwy> ugh god okay i guess fieldPairs doesn't work...
[23:38:02] <FromDiscord> <gerwy> i need to find some workaround
[23:38:13] <FromDiscord> <ShalokShalom> In reply to @creikey "every time I update": I think so, yes. Or you as the vendor become trustworthy.
[23:38:36] <FromDiscord> <ShalokShalom> But I think I can remember that people complained about having to do it for every version
[23:38:41] <FromDiscord> <ShalokShalom> Windows 🤷🏻‍♂️
[23:39:14] <FromDiscord> <ShalokShalom> (edit) "become" => "becomes"
[23:39:24] <FromDiscord> <Phil> I mean, AV's have already started with the base assumption that nim as a language isn't trustworthy, otherwise the issue wouldn't exist
[23:39:36] <FromDiscord> <ShalokShalom> Yeah, totally.
[23:40:00] <FromDiscord> <Phil> So the only really viable paths are convincing them otherwise which needs community growth by like tenfold and then some and flooding them with complaints, or paying
[23:40:03] <FromDiscord> <gerwy> i have, veryyyy stupid idea that i hate to even have
[23:40:22] <FromDiscord> <gerwy> what if i just stored all the values as strings↵and convert them to the needed type
[23:40:22] <FromDiscord> <ShalokShalom> I guess they treat it as an obfuscation tool
[23:40:29] <FromDiscord> <ShalokShalom> What's understandable
[23:40:43] <FromDiscord> <ShalokShalom> Since honestly, thats it, pretty much
[23:41:00] <FromDiscord> <ShalokShalom> From a AV/ML point of view.
[23:41:05] <FromDiscord> <Phil> In reply to @Life Sucks "what if i just": That's.... why would you do this to yourself. You might as well keep using the object variant
[23:41:20] <FromDiscord> <Phil> You're exposing yourself to a sleuth of bugs in order to save some typing effort xP
[23:41:33] <FromDiscord> <Phil> Might as well convert to json and back
[23:41:48] <FromDiscord> <ShalokShalom> In reply to @Life Sucks "i have, veryyyy stupid": Sounds like you're enjoying the language
[23:41:52] <FromDiscord> <gerwy> In reply to @Isofruit "That's.... why would you": this fucking fucker doesn't work
[23:42:00] <FromDiscord> <ShalokShalom> Do you want to rate us in the app shop?
[23:42:00] <FromDiscord> <gerwy> this idea is literally what JS does lol
[23:42:57] <FromDiscord> <Phil> Yeh, and nowadays JS is treated more like a compilation target than an actual language xP
[23:43:11] <FromDiscord> <Phil> (By Typescript mind you, not nim)
[23:46:44] <FromDiscord> <gerwy> Typescript imo is awful too but well 🙄
[23:47:10] <FromDiscord> <gerwy> i thought Nim would be able to tolerate my horrible idea but i guess i need to think about it in a different way
[23:47:11] <FromDiscord> <ShalokShalom> In reply to @Isofruit "(By Typescript mind you,": Why not by Nim?
[23:47:38] <FromDiscord> <ShalokShalom> Practically every language compiles to JS these days
[23:47:43] <FromDiscord> <ShalokShalom> Why is Nim different?
[23:48:00] <om3ga> Strange thing, I try to add() row I got from mariadb to the sec[string], and it not works :X ... rror: type mismatch: got <seq[string], string>
[23:48:01] <FromDiscord> <enthus1ast> it also compiles to c?
[23:48:38] <FromDiscord> <enthus1ast> is your seq a var?
[23:48:46] <FromDiscord> <ShalokShalom> sent a long message, see http://ix.io/3Ujl
[23:48:52] <FromDiscord> <gerwy> i will just have horrible code for now i guess
[23:48:59] <om3ga> If I'm not mistaken, sequences are similar to array of char arrays right?
[23:49:04] <FromDiscord> <gerwy> i mostly need this to evaluate expression
[23:49:06] <FromDiscord> <ShalokShalom> In reply to @enthus1ast "it also compiles to": Well, it treats JS as a compilation target
[23:49:40] <om3ga> enthus1ast: sequence.add(data[i][1])
[23:49:40] <FromDiscord> <enthus1ast> show some code please↵(<@709044657232936960_om3ga=5b=49=52=43=5d>)
[23:50:05] <FromDiscord> <enthus1ast> where does `sequence` come from?
[23:50:10] <om3ga> where data[i][1] == cell from table (string)
[23:50:22] <om3ga> sequence: seq[string]
[23:50:29] <FromDiscord> <Phil> In reply to @ShalokShalom "Why not by Nim?": That was more a jab in that IIRC Typescript is the largest amount of source code that is used to compile to JS, because... well, it's the default for most of the entire JS ecosystem
[23:50:54] <FromDiscord> <Phil> Nim can compile to JS, in terms of sheer amount of code typescript will bury you
[23:51:02] <FromDiscord> <Phil> (edit) "Nim can compile to JS, in terms of sheer amount of code ... typescript" 03added "intended to compile to JS"
[23:51:15] <om3ga> I tested in playground... .add() works well with regular strings
[23:51:22] <FromDiscord> <enthus1ast> to share a more complete code snippet
[23:51:35] <om3ga> ok, just a minute
[23:51:42] <FromDiscord> <ShalokShalom> In reply to @Isofruit "That was more a": I think its so complicated because of the type system
[23:52:05] <FromDiscord> <Phil> In reply to @ShalokShalom "I think its so": You mean TS is complicated?
[23:52:08] <FromDiscord> <ShalokShalom> I heard it has a very advanced type system, to accommodate for JS
[23:52:20] <FromDiscord> <ShalokShalom> Well, complicated in terms of much code
[23:52:47] <FromDiscord> <Phil> TS is basically JS, but you can stick types at the end to guarantee that you didn't just do a dumb mistake in your types
[23:52:48] <FromDiscord> <ShalokShalom> Like, basically all functional languages are said to have a simpler type system
[23:53:06] <FromDiscord> <ShalokShalom> TS is actually based on researched, that had not been tested in production
[23:53:18] <FromDiscord> <ShalokShalom> In reply to @Isofruit "TS is basically JS,": Yeah, from a user side
[23:53:37] <FromDiscord> <ShalokShalom> But in order to be 100% compatible, they had to jump through hoops.
[23:53:46] <FromDiscord> <Phil> That I can imagine
[23:53:48] <FromDiscord> <ShalokShalom> (edit) "a" => "an"
[23:53:59] <FromDiscord> <Phil> Stuff like decorator annotations were still barely to non functional IIRC
[23:54:10] <FromDiscord> <Phil> (edit) "Stuff like ... decorator" 03added "some levels of"
[23:54:41] <FromDiscord> <Phil> At least they were early last year, I remember being unable to do so because not yet supported
[23:54:58] <FromDiscord> <Phil> (edit) "do so" => "annotate a couple decorators how I wanted"
[23:56:08] <om3ga> enthus1ast: https://pastebin.pl/view/13519a44
[23:56:19] <om3ga> shortened example
[23:56:41] <FromDiscord> <enthus1ast> sequence is a proc param
[23:56:41] <FromDiscord> <ShalokShalom> Still, I guess TS would be able to do, what gerwy wants to do
[23:56:52] <FromDiscord> <ShalokShalom> Probably even pretty elegantly.
[23:57:02] <FromDiscord> <ShalokShalom> Due to the runtime being dynamic
[23:57:05] <FromDiscord> <enthus1ast> proc params are immutable unless you use `sequence: var seq[string]`
[23:57:23] <FromDiscord> <Phil> I mean, depends on if you have certain rules active. TS does have rules that enforce every variable must have a specific type
[23:57:29] <FromDiscord> <Phil> If you enable that you're once more in fun town
[23:57:52] *** Quits: neurocyte8614 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[23:58:00] <FromDiscord> <Phil> Not sure how elaborate they made that one, we're at work working towards being able to enable it without it blowing up various parts of our frontend projects
[23:58:02] <om3ga> enthus1ast: yes, db.getAllRows returns sequence of Row type, where Row == string
[23:58:47] <om3ga> enthus1ast, oh!
[23:58:51] *** Joins: neurocyte86144 (~neurocyte@user/neurocyte)
[23:58:53] <om3ga> that's my fault
[23:59:10] <om3ga> but I tried to return new seq from that proc
[23:59:22] <om3ga> warning was the same... Let me try again
[23:59:52] <om3ga> or yeah, I will try to make param mutable
