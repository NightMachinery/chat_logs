[00:12:30] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Remote host closed the connection)
[00:13:41] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[00:18:50] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:25:30] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[00:35:10] *** Joins: beach` (~user@2a01:cb19:150:3400:c6e2:a1be:d1a7:9252)
[00:35:48] <jcowan> Conversely, I wrote an implementation of T (a Scheme) in CL called CLTAU, relying on the underlying CL to do tail recursion.  I posted it to comp.sources.misc, but it seems to have been lost.
[00:36:59] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 264 seconds)
[00:39:31] *** Quits: beach (~user@2a01:cb19:150:3400:c6:70c3:435f:d71d) (Ping timeout: 252 seconds)
[00:49:36] <pjb> jcowan: github/gitlab seem safer for the time being than usenetâ€¦
[00:50:19] <jcowan> "For the time being" being the operative word.
[00:50:37] <jcowan> They didn't exist then.
[00:50:41] <pjb> jcowan: at least, with git, you can push to multiple repositories.
[00:50:53] <jcowan> Ditto on Usenet.
[00:50:56] <pjb> jcowan: I know, hence my tongue-in-cheek comment.
[00:51:11] <pjb> Why is comp.sources.misc lost?
[00:51:13] <jcowan> With you I can never be sure
[00:51:48] <jcowan> I searchet the google and funet.fi archives without success.
[00:52:26] <pjb> There are "mirrors" https://www.google.com/search?client=safari&rls=en&q=archive+comp.sources.misc&ie=UTF-8&oe=UTF-8
[00:53:46] <pjb> but yes, we'd have to find an archive including it, while not being indexed by google.
[00:57:59] <jcowan> Thanks.  sunet.se gave me volumes 1-8.  Perhaps there was no archiving then, or I screwed up the archive headers.
[00:58:31] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 258 seconds)
[01:08:18] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[01:08:41] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[01:08:50] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[01:22:42] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 260 seconds)
[01:23:43] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[01:28:18] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 260 seconds)
[01:31:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:39:56] <jcowan> Is the practice of defining a macro around a procedure for ease of use at the repl (to avoid typing ' a lot) or to catch errors at compile time still common?  Is there a name for this sort of macro?
[01:41:15] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[01:43:05] *** Quits: gaqwas (~john@dynamic-095-118-027-234.95.118.pool.telefonica.de) (Ping timeout: 260 seconds)
[01:43:18] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[01:43:42] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 260 seconds)
[01:46:00] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 260 seconds)
[01:47:46] <hayley> Eventually I intend to have all the compiler macros for my regular expression engine "lint" the regular expression provided, so it's common to me. I don't know if it has a name though.
[01:55:08] <jcowan> Is it posted anywhere?
[01:56:25] *** Quits: pve (~pve@178-55-6-122.bb.dnainternet.fi) (Quit: leaving)
[01:58:39] <hayley> Well, I haven't done it yet. But given that it compiles the regex at load-time, you'd still get parse errors at compile time.
[01:58:53] <hayley> https://github.com/telekons/one-more-re-nightmare/blob/master/Code/Interface/interface.lisp
[02:01:57] <jcowan> Ah.
[02:11:54] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[02:14:41] *** Joins: cjb (~cjbayliss@user/cjb)
[02:14:54] *** Quits: cjb (~cjbayliss@user/cjb) (Client Quit)
[02:15:13] *** Joins: taiju (~taiju@240b:253:ec40:2400:354b:1e2d:5d92:ba2c)
[02:18:54] *** Joins: igemnace (~ian@user/igemnace)
[02:22:36] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[02:27:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[02:30:09] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[02:45:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:51:17] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:51:45] *** Joins: holycow_ (~rtaylor@69.172.184.139)
[02:52:36] *** Quits: holycow_ (~rtaylor@69.172.184.139) (Client Quit)
[02:52:47] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:53:08] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[03:09:17] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[03:14:56] *** Joins: vats (~vats@103.158.91.165)
[03:15:07] *** Quits: vats (~vats@103.158.91.165) (Client Quit)
[03:15:19] *** Joins: vats (~vats@103.158.91.165)
[03:19:21] <holycow> so you guys see this yet: https://www.youtube.com/watch?v=I_4Fb7mOtDc
[03:19:32] <holycow> lisp on bare metal raspi i believe
[03:29:00] *** Joins: igemnace (~ian@user/igemnace)
[03:30:14] <jcowan> Nice!  Copying this to #interlisp, which is the only (AFAIK) surviving image-based Lisp env
[03:35:18] <holycow> hi jcowan thanks for your email earlier
[03:35:29] <holycow> i will get back to you shortly.  what are your hours normally?
[03:36:07] <holycow> oh there is #interlisp now? neat!
[03:36:23] *** Quits: taiju (~taiju@240b:253:ec40:2400:354b:1e2d:5d92:ba2c) (Ping timeout: 264 seconds)
[03:37:38] <jcowan> holycow: 1300-0400 UTC; I'm in NYC
[03:42:03] <holycow> ah! okay, i will keep that in mind.  thank you kindly.
[03:44:27] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[03:44:57] *** Joins: rogersm (~rogersm@90.166.177.48)
[03:45:28] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:45:59] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[03:46:45] *** Lord_of_Life_ is now known as Lord_of_Life
[03:51:12] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[04:01:19] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:10:43] *** Quits: stacksmith (~stack@ctrl-c.club) (Quit: WeeChat 3.0.1)
[04:24:14] *** Quits: random-nick (~random-ni@87.116.183.63) (Ping timeout: 260 seconds)
[04:24:52] *** Joins: aeth_ (~aeth@user/aeth)
[04:25:10] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[04:25:15] *** aeth_ is now known as aeth
[04:27:57] *** Parts: akoana (~ah@user/akoana) (Leaving)
[04:29:07] *** Quits: aeth (~aeth@user/aeth) (Read error: Connection reset by peer)
[04:29:51] *** Joins: aeth (~aeth@user/aeth)
[04:44:11] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 264 seconds)
[04:57:46] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[04:58:57] *** Joins: hendursaga (~weechat@user/hendursaga)
[05:56:52] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 252 seconds)
[05:57:25] *** Quits: travv0 (sid293381@user/travv0) (Ping timeout: 260 seconds)
[05:57:59] *** Quits: victor (sid208353@user/victor) (Ping timeout: 264 seconds)
[05:59:29] *** Joins: travv0 (sid293381@user/travv0)
[05:59:30] *** Joins: hubvu (sid495858@user/hubvu)
[05:59:55] *** Joins: victor (sid208353@user/victor)
[06:01:16] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1034-static.midco.net) (Ping timeout: 252 seconds)
[06:04:28] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[06:10:33] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 258 seconds)
[06:12:18] *** beach` is now known as beach
[06:12:29] *** ChanServ sets mode: +o beach
[06:17:12] *** beach sets mode: -o beach
[06:30:27] <beach> Good morning everyone!
[06:47:03] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleepin')
[06:50:13] *** Joins: myrrh (~user@2607:fb90:b441:1990:2c17:4875:8df6:fd58)
[06:53:47] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 264 seconds)
[07:04:34] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[07:14:31] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[07:24:28] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[07:26:27] *** Quits: semz (~none@user/semz) (Ping timeout: 258 seconds)
[07:39:18] *** Joins: semz (~none@user/semz)
[07:45:30] <lisp123> Good morning Beach!
[07:58:11] *** Quits: jealousmonk (~user@2804:431:e7c5:834:2ab0:b9fd:f87f:7a23) (Quit: ERC (IRC client for Emacs 27.1))
[08:05:41] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[08:05:42] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[08:08:44] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[08:08:46] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[08:10:14] *** Quits: Catie (~user@24.19.51.175) (Quit: rcirc on GNU Emacs 29.0.50)
[08:34:46] <CodeBitCookie[m]> Good Morning Everyone!
[08:34:51] <CodeBitCookie[m]> beach: good morning beach
[08:35:29] <CodeBitCookie[m]> I have a small question about SBCL. The #freenode_#sbcl:matrix.org is a bit inactive. If anyone doesn't mind here goes:
[08:36:03] <CodeBitCookie[m]> I love how SBCL creates large executables for portability. My question is how portable? I mean, can it run on any computer that can run C?
[08:37:00] <hayley> An SBCL executable is only portable to other machines with the same operating system and instruction set.
[08:39:30] <CodeBitCookie[m]> And thats all the requirements?
[08:40:31] <CodeBitCookie[m]> A leading question I am having is Cross-platform Compilation. Can anyone point me to a link or article where this is explained? Thanks
[08:41:02] <CodeBitCookie[m]> Obviously I am talking, in Common Lisp. Not necessarily SBCL but yeah.
[08:42:17] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[08:42:55] *** Joins: srhm (~srhm@user/srhm)
[08:44:06] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[08:46:03] <beach> CodeBitCookie[m]: It is usually pretty simple.  Creating an executable is just a matter of putting the right bytes in the right order.  It doesn't matter which platform the compiler runs on, so output for any other platform can be produced in a straightforward (but not necessarily simple) way.
[08:47:01] <CodeBitCookie[m]> So any pointers?
[08:47:02] <beach> CodeBitCookie[m]: The code generator obviously needs some kind of description of the target processor and such, but that is also independent of the platform it is running on.
[08:47:24] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[08:47:26] <CodeBitCookie[m]> Ohhhh, in my ASDF system?
[08:47:34] <beach> CodeBitCookie[m]: It is so straightforward that I don't think there is an article for it.
[08:47:50] *** Joins: srhm (~srhm@user/srhm)
[08:48:32] <beach> CodeBitCookie[m]: No, ASDF is not involved.  The compiler has to be configured to generate code for a specific target machine/OS, etc.  But whether that configuration is for the same target as the compiler is running on is unimportant.
[08:50:19] <beach> CodeBitCookie[m]: A file compiler is a "simple" program in that it mostly takes bytes from an input file and produce bytes in an output file (for Common Lisp, it's a bit more complicated than that), so the compiler can produce an executable for any platform it has been configured for.
[08:52:17] <beach> CodeBitCookie[m]: Does that make sense to you?
[08:53:14] <beach> CodeBitCookie[m]: If not, feel free to ask more questions.
[08:54:49] <CodeBitCookie[m]> hmmm, so if I'm not mistaken, my Implentation is my Compiler?
[08:55:35] <beach> For Common Lisp?  Well, sort of.  The compiler is a significant part of any Common Lisp implementation, because the Common Lisp standard requires the compiler to be present at run time.
[08:56:16] <beach> For more traditional languages like C, the compiler is just a file translator.  Then you have other tools like the linker to produce an executable from several object files produced by the compiler.
[08:57:02] <hayley> I wonder how much more memory you would need in order to store enough of the state of the compiler, so that you could develop on x86-64 and dump an image for RISC-V.
[08:57:37] <beach> Not very much I think.
[08:59:25] *** Quits: vats (~vats@103.158.91.165) (Ping timeout: 260 seconds)
[09:00:29] *** Joins: vats (~vats@42.111.22.26)
[09:03:29] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[09:04:47] <beach> CodeBitCookie[m]: Maybe you need to read up on what compilers do?
[09:11:27] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[09:12:47] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[09:22:30] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[09:23:06] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[09:27:38] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[09:29:18] *** Joins: flip214 (~marek@user/flip214)
[09:33:41] *** Joins: igemnace (~ian@user/igemnace)
[09:35:38] *** Quits: flip214 (~marek@user/flip214) (Ping timeout: 258 seconds)
[09:35:58] <beach> Another way of putting it is that a compiler running on some platform P does not use any information about P in order to generate code.  It uses only information provided to it in the form of data structures.
[09:36:09] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[09:37:42] *** Joins: flip214 (~marek@user/flip214)
[09:37:55] *** Quits: vats (~vats@42.111.22.26) (Ping timeout: 260 seconds)
[09:38:10] *** Joins: vats (~vats@103.158.91.165)
[09:39:11] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[09:42:43] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[09:43:14] *** Quits: flip214 (~marek@user/flip214) (Read error: Connection reset by peer)
[09:43:45] *** Joins: flip214 (~marek@user/flip214)
[10:06:54] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:07:05] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 260 seconds)
[10:08:13] *** Quits: vats (~vats@103.158.91.165) (Ping timeout: 258 seconds)
[10:09:15] *** Joins: vats (~vats@42.111.12.17)
[10:11:26] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[10:13:47] <CodeBitCookie[m]> beach: I am understanding now. I will read up more on it. Thanks, will come back in a few hours to clear my doubts if that's okay.
[10:14:57] *** Joins: gaqwas (~john@dynamic-095-114-069-162.95.114.pool.telefonica.de)
[10:15:11] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: Reconnecting)
[10:15:34] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[10:18:15] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:23:03] <CodeBitCookie[m]> beach: Oh, I didn't need a lot of hours, I remembered now that compilers don't matter, we just need to be able to use a Docker container or Nix or maybe even wine for windows so that we could compile easily. Thanks and forgive my bad memory.
[10:23:10] <CodeBitCookie[m]> (Is still wrong)
[10:23:29] <CodeBitCookie[m]>  * (Is still wrong?)
[10:46:12] *** Joins: makomo (~makomo@user/makomo)
[10:52:24] <pjb>  CodeBitCookie[m]: try: irc://irc.libera.chat#sbcl  everything has moved from freenode to libera.chat
[10:54:14] <pjb> CodeBitCookie[m]: if you want portable lisp object files, the only implementation providing that is clisp: you can compile a clisp program to .fas files on linux/680x0 and run it on ms-window/x86; this is also the reason why the byte order for binary files (when the element-type is bigger than an octet), is little-endian even on big-endian machines with clisp.
[10:54:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[10:55:03] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[10:56:03] <pjb> CodeBitCookie[m]: lisp executable images are large because they contain a compiler, a linker, a library, your application and its dependencies, data and resources, and other cruft that couldn't be garbage-collected before saving the image because you kept references to it.
[10:56:40] * beach obviously misunderstood the entire issue. :(
[10:56:42] <pjb> CodeBitCookie[m]: basically, take a small unix program use ldd on it recursively, and sum the size of all the shared libraries, plus gcc and ldâ€¦
[10:58:03] <pjb> beach: not really.  The initial message was full of misconception; giving explanations on the various topics mentionned should draw a map that will help make the things clearer.
[10:59:10] <beach> Thanks.
[10:59:28] <flip214> I think it's awesome that I can distribute SBCL images with a complete HTTPS server, application code, dynamic loading of subservices (using the compiler), a debugger, etc, compressed with zlib level 1 in a single ~30MB file.
[10:59:53] <pjb> CodeBitCookie[m]: now, the trick with executable images, is that they are saved from the memory of a program running on the host machine, usually.  Cross compiling would involve saving an image, not by copying the (whole) memory of the running program, but by generating a new memory for the new processor, as beach explained.
[11:00:08] <flip214> yeah, libc and a few external dependencies exist, but compared to a typical application stack in C++ or Java....
[11:02:05] <pjb> There could be a way to do it perhaps more economical, by using an interpreter.  Then we have to cross-compile only the interpreter in the new (bootstrap) image, and the rest of the code saved would be lisp sources (sexps).  Then the bootstrap image would load on the target system and use the now native interpreter to interpret a compiler for this new target, to compile the rest of the image.
[11:02:26] <pjb> Assuming cross-compilation is "costly", involving multiple environments, and stuffâ€¦
[11:05:22] <White_Flame> the size of an sbcl executable is smaller than a JVM & its libraries, and all in one file
[11:05:25] <pjb> flip214: you can still compile and link unix program statically.  This may require some work.
[11:05:30] <White_Flame> I tend to compare it to the JRE footprint
[11:05:48] <White_Flame> since that's what a lot of people have been familiar with.  Boomer example, I know :-P
[11:05:56] <pjb> Compare program sizes with Firefoxâ€¦ :-)
[11:07:07] <White_Flame> the nodejs executable is 35MB on my machine, and that's somewhat comparable as well
[11:07:07] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[11:07:23] <White_Flame> I should start using that example instead ;)
[11:11:51] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[11:23:33] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:32:10] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[11:32:38] *** Joins: pve (~pve@188-67-200-192.bb.dnainternet.fi)
[11:34:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[11:35:00] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[11:37:18] *** Quits: gaqwas (~john@dynamic-095-114-069-162.95.114.pool.telefonica.de) (Ping timeout: 260 seconds)
[11:37:55] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[11:38:05] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[11:40:39] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[11:46:34] *** Quits: vats (~vats@42.111.12.17) (Remote host closed the connection)
[11:50:52] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[11:51:37] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 252 seconds)
[12:38:26] *** Quits: kdlv (~kdlv@c83-251-237-81.bredband.tele2.se) (Quit: The Lounge - https://thelounge.chat)
[12:39:55] *** Joins: kdlv (~kdlv@c83-251-237-81.bredband.tele2.se)
[12:59:51] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[13:05:09] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:29:49] <CodeBitCookie[m]> beach: flip214 pjb White_Flame : Thanks everyone for the help. I think I understood all of it and this was super helpful. Thanks you. :D
[13:30:05] <CodeBitCookie[m]> s/Thanks/Thank/
[13:30:44] <beach> Sure.  Sorry I misunderstood your problem.  Wouldn't be the first time for me. :(
[13:32:36] <CodeBitCookie[m]> beach: No problem at all, You still kind of explained a point that was important to me. No time is wasted and no knowledge is extra. Thanks
[13:33:17] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[13:41:15] *** Joins: cosimone (~user@93-44-185-43.ip98.fastwebnet.it)
[13:45:33] *** Joins: random-nick (~random-ni@87.116.183.63)
[13:55:18] <lisp123> Any way to get the file name where a symbol is defined/used? I'm reading through SLIME (since it has this information), but wondering if somebody already solved this before
[13:56:13] <lisp123> I could brute force get it by reading all lisp files and creating a hash table of all symbols...sounds inefficient
[13:57:29] <pjb> Think about what you're askingâ€¦
[13:57:35] <flip214> lisp123: where a symbol is used is not stored.
[13:57:45] <pjb> Also the REPL.
[13:57:48] <flip214> your implementation might remember where a _function_ for that symbol was set up.
[13:58:13] <flip214> (or a special, a compiler-macro, etc.)
[13:58:17] <pjb> But indeed, if the implementation doesn't do it (does M-. works?), your "brute force" algorithm is not a bad idea.
[13:58:31] <pjb> lisp123: only that, reading lisp files is not what load or compile-file doesâ€¦
[13:58:51] <pjb> load and compile-file evaluate what they read. And this can change everything.
[13:59:14] *** Joins: asdf-troubles (~asdf-trou@156.red-79-145-94.dynamicip.rima-tde.net)
[13:59:15] <lisp123> Let me remove the "/used" from "define/used", that came out wrong. So just definitions
[13:59:15] <flip214> and Lisp code can create symbols programmatically - (INTERN (FORMAT NIL "SYM~d" (RANDOM 5)))
[13:59:20] <pjb> lisp123: also, CL is a lisp-2 (actually, lisp-âˆž).  So there's not a single definition attached to a symbol!
[13:59:54] <pjb> (deftype foo () (member foo)) (defvar foo 'foo) (defun foo () foo)
[14:00:06] <pjb> what foo definition do you want to find?
[14:00:29] <lisp123> pjb: Yes agree. So to be more specific, I'm only interested in functions/macro definitions --> So I could extract all these from an image, and then do a plain text search of defun symbol / defun macro...sounds very basic but could work
[14:00:54] <asdf-troubles> hi there :)
[14:01:21] <pjb> Theorically, M-. could detect what kind of reference is being done to foo: (let ((foo (foo (the foo foo)))) foo)  Depending on what foo you type M-. on, it should be able to jump to one of the other def forms above, or to the foo binding in the let.
[14:01:26] <lisp123> (basically I'm tired of specifying which test suite my tests should be linked to, rather they infer them from the file name)
[14:03:04] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:03:22] <pjb> lisp123: it's not clear what the problem is.
[14:03:26] <lisp123> pjb: yes, confirming it works via M-.
[14:03:41] <lisp123> Just tried it
[14:03:56] <pjb> lisp123: when it works with M-. you can look in slime/swank what the implementation specific API is to do it.
[14:04:49] <lisp123> pjb: No problem. Since I organise code by file names also, I want my test suites to match the file name where the functions are located in. So if I can get that info, I don't have to type it in :)
[14:05:22] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[14:05:31] <pjb> lisp123: (swank:find-definitions-for-emacs "foo") #| --> (("#'foo" (:location (:file "/private/tmp/foo.lisp") (:position 50) (:snippet "(defun foo () foo)"))) ("(type foo)" (:location (:file "/private/tmp/foo.lisp") (:position 1) (:snippet "(deftype foo () '(member foo))"))) ("(variable foo)" (:location (:file "/private/tmp/foo.lisp") (:position 32) (:snippet "(defvar foo 'foo)")))) |#
[14:06:22] <pjb> lisp123: right, but when you write test suites, don't you start by creating a file where to write them?
[14:08:34] <lisp123> pjb: Thanks! That worked really well. I tried searching on my end but didn't get to that function, I got to 'slime-edit-definition' and got stuck
[14:08:49] <pjb> lisp123: M-. also works in emacs lisp ;-)
[14:09:33] <pjb> and C-x C-e: slime-edit-definition body is   (slime-postprocess-xrefs (funcall slime-find-definitions-function name)) So move after slime-find-definitions-function and type C-x C-e to see the current binding.
[14:10:13] *** Quits: asdf-troubles (~asdf-trou@156.red-79-145-94.dynamicip.rima-tde.net) (Quit: Client closed)
[14:10:27] <lisp123> pjb: Yes, I save them in their own file, usually mirroring the file structure of the main program (e.g. filename-test.lisp). I just didn't want to write a line at the top of each test file to manually set the value of filename :D
[14:10:28] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[14:10:55] <pjb> You mean, to load the source file?
[14:11:09] <lisp123> No, just to use as part of the name of the test
[14:11:15] *** Quits: X-Scale (~ARM@46.50.2.19) (Ping timeout: 258 seconds)
[14:11:25] <pjb> Instead define asd systems, system "foo" in foo.asd  system "foo.test" in foo.test.asd and "foo.test" :depends-on "foo" ; and that's all.
[14:11:38] <pjb> lisp123: oh, for the report. Ok.
[14:11:44] <lisp123> So I organise the test suites by filename, and then the name of the test is the name of the function I'm testing, with a counter for each test
[14:11:49] <pjb> Let me see how I did it.
[14:12:22] *** X-Scale` is now known as X-Scale
[14:13:26] <pjb> lisp123: right to report the path, I used the path of the test file (load-time-value *load-truename*), not the path of the tested file.
[14:14:26] <pjb> I guess if you assume swank (you can add :depends-on "swank" in the test system), you can use (swank:find-definitions-for-emacs (symbol-name tested-function)) and find the :file inthere.
[14:19:05] <lisp123> pjb: Thanks!
[14:19:30] <lisp123> (reading into load-time-value and *load-truename* now)
[14:20:50] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[14:23:58] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[14:26:10] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[14:29:25] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[14:32:33] <lisp123> pjb: Do you have a Stack Overflow Account? I'm want to put the above as a Q&A there, I can draft up an answer for you to post if you have an account
[14:35:54] *** Joins: mingus_ (~jan-magnu@auth-147-15.anyconnect.uib.no)
[14:37:48] *** Quits: mingus (~jan-magnu@ti0135a400-3391.bb.online.no) (Ping timeout: 265 seconds)
[14:37:54] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[14:38:08] *** mingus_ is now known as mingus
[14:38:17] <pjb> lisp123: I don't use stackoverflow often enough.
[14:38:33] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[14:38:54] <pjb> You may answer yourself, I don't mind.
[14:38:59] *** Joins: X-Scale` (~ARM@83.223.233.104)
[14:39:58] <lisp123> pjb: Great, thanks, I'll put a note to credit you on the answer. Just want to save down some of this knowledge for others in the future :-)
[14:40:13] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[14:41:23] *** X-Scale` is now known as X-Scale
[14:51:23] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[15:01:56] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[15:09:58] *** Joins: Guest-liao81 (~Guest-lia@101.86.103.113)
[15:10:14] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[15:12:08] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[15:16:00] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[15:16:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:19:32] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[15:19:38] *** Joins: Bike (~Glossina@71.69.170.70)
[15:19:38] *** ChanServ sets mode: +o Bike
[15:30:34] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[15:38:16] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 258 seconds)
[15:41:55] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[15:48:47] <pjb> lisp123: :-)
[16:13:14] *** Joins: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi)
[16:31:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[16:32:36] *** Joins: hendursaga (~weechat@user/hendursaga)
[16:36:17] *** Joins: vats (~vats@103.158.91.165)
[16:36:28] *** Quits: vats (~vats@103.158.91.165) (Client Quit)
[16:36:41] *** Joins: vats (~vats@103.158.91.165)
[16:38:43] *** Quits: vats (~vats@103.158.91.165) (Client Quit)
[16:38:58] *** Joins: vats (~vats@103.158.91.165)
[16:40:11] *** Quits: vats (~vats@103.158.91.165) (Client Quit)
[16:40:24] *** Joins: vats (~vats@103.158.91.165)
[16:46:32] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Quit: Leaving)
[16:53:42] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[16:57:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[17:07:14] *** Quits: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi) (Ping timeout: 260 seconds)
[17:21:44] *** Joins: jealousmonk (~user@2804:431:e7c5:834:2ab0:b9fd:f87f:7a23)
[17:22:43] *** Joins: nature (~nature@45.32.235.173)
[17:24:52] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[17:25:45] *** Joins: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi)
[17:28:17] *** Quits: Bike (~Glossina@71.69.170.70) (Ping timeout: 258 seconds)
[17:35:46] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[17:37:01] *** Quits: vats (~vats@103.158.91.165) (Ping timeout: 252 seconds)
[17:37:35] *** Quits: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi) (Ping timeout: 264 seconds)
[17:37:57] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:43:08] *** Joins: vats (~vats@103.158.91.165)
[17:51:34] *** Quits: random-nick (~random-ni@87.116.183.63) (Ping timeout: 260 seconds)
[17:55:00] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[18:04:16] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:06:25] *** Quits: paule32 (~paule32@user/paule32) (Read error: Connection reset by peer)
[18:09:40] *** Joins: Guest39 (~Guest39@2001:6b0:1:1041:2a6d:a48d:707d:37df)
[18:11:23] *** Joins: Bike (~Glossina@71.69.170.70)
[18:11:23] *** ChanServ sets mode: +o Bike
[18:16:51] *** Quits: nature (~nature@45.32.235.173) (Remote host closed the connection)
[18:18:47] *** Joins: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi)
[18:18:52] *** Joins: nature (~nature@45.32.235.173)
[18:25:12] <loke[m]> Anyone know of an existing library that can use MOP to serialise arbitrary class instances to sexps? There are a few that serialise to byte arrays, but I'd like something that generates a sexp.
[18:25:43] *** Joins: lance (~lance@69.218.33.204)
[18:25:44] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[18:26:23] <Bike> loke[m]: make-load-form-saving-slots? or do you want custom behavior for user slot definition classes or something?
[18:26:32] *** ChanServ sets mode: -o Bike
[18:27:07] <Bike> i guess it's difficult to process the initialization form
[18:27:36] *** lance is now known as hobo
[18:27:46] <loke[m]> Bike: Yeah, I need something where I can WRITE the output to a file, and then load it back in using READ (followed by a deserialisation)
[18:28:31] <loke[m]> Something like hu.dwim.serializer but that writes to a sexp instead of a byte array.
[18:30:24] <beach> loke[m]: We do that for AST classes in SICL.
[18:30:58] <beach> Check out Code/Cleavir/Input-output in the SICL repository.
[18:31:24] <Bike> it doesn't work out the slots automatically, though.
[18:31:47] <beach> I didn't know that was a requirement.
[18:32:02] <beach> In fact it doesn't refer to slots at all, which is the right thing.
[18:32:13] <beach> It refers only to accessors and initargs.
[18:32:44] <beach> The #\[ character is used, so that an instance is written as [<class-name> :initarg1 <value1> :initarg2 <value2>...]
[18:33:11] <loke[m]> So the reader uses a custom readtable?
[18:33:31] <beach> The reader macro for #\[ does (apply #'make-instance (read-delimited-list #\])
[18:33:43] <loke[m]> Oh I see.
[18:33:47] <beach> Just one macro character.
[18:33:56] <loke[m]> In this case, that wouldn't work, because not all slots have initargs.
[18:34:18] <beach> Well, it works if they have initforms.
[18:34:54] <beach> And every slot should have one or the other, or else the slot should be computed from the others, so that will work too.
[18:35:40] <beach> loke[m]: We are doing nothing but encoding good interface practice here.  Slots are implementation details and should not appear.  The true interface to a class is its initargs and its accessors.
[18:36:38] <loke[m]> beach: problem is, I'm serialising objects that I have no control over. In this case there are slots without initforms nor initargs.
[18:36:45] <beach> This way, you can also change the slots of your class between writing and reading.  As long as the modified class respects the interface, it is fine, even if that means ignoring some initargs or using them to compute other slots rather than initialize slots.
[18:37:00] <beach> I am sorry to hear that.  Sorry I can't help then.
[18:37:32] *** Quits: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi) (Ping timeout: 265 seconds)
[18:37:52] <beach> Look, I am in a rotten mood, so I am not going to elaborate on what I think of this code you are using.  I'll go do something else.
[18:45:14] *** Joins: makomo (~makomo@user/makomo)
[18:45:31] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[18:48:47] *** Joins: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net)
[18:51:20] *** Quits: Guest-liao81 (~Guest-lia@101.86.103.113) (Quit: Client closed)
[18:53:49] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:12:33] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Remote host closed the connection)
[19:13:05] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[19:15:17] *** Quits: raeda (~raeda@72.49.219.33) (Quit: Leaving)
[19:15:50] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[19:21:57] *** Joins: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi)
[19:27:35] *** Joins: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1038-static.midco.net)
[19:39:20] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 260 seconds)
[19:48:32] *** Quits: Guest39 (~Guest39@2001:6b0:1:1041:2a6d:a48d:707d:37df) (Quit: Client closed)
[19:53:46] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[19:54:11] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:54:27] *** Quits: phantomics (~phantomic@71-33-148-118.hlrn.qwest.net) (Ping timeout: 240 seconds)
[19:54:46] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[19:57:22] *** Quits: myrrh (~user@2607:fb90:b441:1990:2c17:4875:8df6:fd58) (Read error: Connection reset by peer)
[19:57:24] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:57:39] *** Joins: myrrh (~user@2607:fb90:b441:1990:2c17:4875:8df6:fd58)
[20:01:35] *** Quits: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi) (Ping timeout: 264 seconds)
[20:07:49] *** Joins: phantomics (~phantomic@71-218-252-43.hlrn.qwest.net)
[20:08:02] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:11:38] *** Quits: myrrh (~user@2607:fb90:b441:1990:2c17:4875:8df6:fd58) (Remote host closed the connection)
[20:11:57] *** Joins: myrrh (~user@2607:fb90:b441:1990:2c17:4875:8df6:fd58)
[20:13:17] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:17:04] *** Quits: myrrh (~user@2607:fb90:b441:1990:2c17:4875:8df6:fd58) (Ping timeout: 252 seconds)
[20:25:21] *** Joins: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi)
[20:33:42] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[20:34:21] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Goodbye :D)
[20:34:35] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 258 seconds)
[20:34:49] *** Joins: stacksmith (~stack@ctrl-c.club)
[20:35:10] <stacksmith> Good morning
[20:35:21] <hobo> hello
[20:36:15] <edgar-rft> how many stacks have you forged today?
[20:37:23] <stacksmith> Sadly none.  I haven't seen a stack in days.  I am ashamed.
[20:40:56] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[20:41:31] <edgar-rft> don't feel sad, you can easily make a stack with DEFVAR, PUSH an POP :-)
[20:43:47] <hobo> you could make a DSL with your IRC nick too!
[20:44:47] <lisp123> edgar-rft: lol
[20:46:17] <pjb> loke[m]: that said, when you're considering OODB, you indeed want to save the slots, and not the interface.  But even in this case you may want to indicate that some slots are computed and not to be saved. (or the values bound to those slots may need special treatment, different than sexp serialization).
[20:47:45] <pjb> loke[m]: without using the MOP, you can have a method in each class that give the list of slots that need to be saved (or printed in this example): https://github.com/informatimago/lisp/blob/4b7e543eb2bb48386522f41d9de2fa66910634ec/common-lisp/cesarum/utility.lisp#L949
[20:47:47] *** Quits: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi) (Ping timeout: 264 seconds)
[20:48:02] <loke[m]> pjb: yes. For binary serialisation I usually use conspack which allows me to customise this.
[20:50:04] <pjb> loke[m]: otherwise, using the MOP you can get the list of slots or direct slots in a class, and get or set their values (or bound status and unbind them), so you may store the data.  Just mind to apply the usual algorithm to deal with circular structures.
[20:50:48] <pjb> loke[m]: of course, one difficulty will be if you have amongst the reachable values, say, structure objects. Then there's no MOP of them (unless the implementation implements structure objects as standard objects).
[20:55:17] *** Quits: vats (~vats@103.158.91.165) (Ping timeout: 265 seconds)
[20:56:43] *** Joins: vats (~vats@42.111.13.59)
[20:57:13] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[20:59:07] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:01:00] *** Quits: vats (~vats@42.111.13.59) (Ping timeout: 260 seconds)
[21:01:15] *** Joins: vats (~vats@42.111.22.112)
[21:01:24] *** Joins: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi)
[21:15:35] *** Joins: Psybur (~Psybur@mobile-166-170-29-82.mycingular.net)
[21:29:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:30:18] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:31:41] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:40:14] *** Quits: vats (~vats@42.111.22.112) (Ping timeout: 265 seconds)
[21:40:30] *** Joins: vats (~vats@103.158.91.165)
[21:45:22] *** Quits: peterhil (~peterhil@mobile-access-2e846e-36.dhcp.inet.fi) (Ping timeout: 260 seconds)
[21:45:53] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 258 seconds)
[21:47:25] *** Joins: tfeb (~tfb@88.98.95.237)
[21:55:35] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[21:56:30] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[22:00:57] *** Quits: hobo (~lance@69.218.33.204) (Quit: restart)
[22:01:32] *** Joins: lance (~lance@204.238.252.22)
[22:01:35] *** lance is now known as hobo
[22:01:58] *** Joins: notzmv (~zmv@user/notzmv)
[22:07:11] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[22:07:45] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Client Quit)
[22:09:00] *** Joins: seere (~seere@user/seere)
[22:18:23] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[22:24:17] *** Joins: random-nick (~random-ni@87.116.183.63)
[22:30:18] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:33:02] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:38:00] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:42:44] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[22:42:44] *** ChanServ sets mode: +o MichaelRaskin
[23:04:04] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[23:04:49] *** Quits: vats (~vats@103.158.91.165) (Ping timeout: 265 seconds)
[23:05:34] *** Joins: vats (~vats@42.111.22.162)
[23:08:13] *** Joins: gaqwas (~john@dynamic-095-114-069-162.95.114.pool.telefonica.de)
[23:24:29] *** Joins: Guest19 (~Guest19@2601:c9:8000:14b8:79a9:8f1f:aead:70da)
[23:30:45] *** Joins: akoana (~ah@user/akoana)
[23:47:50] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[23:53:14] *** Quits: random-nick (~random-ni@87.116.183.63) (Ping timeout: 260 seconds)
