[00:03:37] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Remote host closed the connection)
[00:04:52] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[00:05:47] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 252 seconds)
[00:07:01] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[00:08:30] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 260 seconds)
[00:08:30] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:4079:afdf:7e9e:c580) (Ping timeout: 260 seconds)
[00:11:27] *** Joins: dra (~dra@2a04:4540:640a:7f00:8881:b96:6405:a162)
[00:22:27] *** Quits: rotateq (~user@p200300e787056600fdfeed040e17b750.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[00:41:05] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:42:06] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[00:42:11] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[00:43:53] *** Lord_of_Life_ is now known as Lord_of_Life
[01:12:15] *** Quits: dra (~dra@2a04:4540:640a:7f00:8881:b96:6405:a162) (Quit: Leaving)
[01:12:23] *** Joins: dra (~dra@2a04:4540:640a:7f00:8881:b96:6405:a162)
[01:15:51] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[01:20:39] *** Joins: akoana (~ah@user/akoana)
[01:25:23] *** Joins: karlosz (~karlosz@12.196.174.98)
[01:25:49] *** Joins: Oladon (~olad@98.43.81.226)
[01:38:44] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 252 seconds)
[01:42:46] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[01:44:12] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[01:46:43] *** Quits: dra (~dra@2a04:4540:640a:7f00:8881:b96:6405:a162) (Quit: Leaving)
[01:51:11] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[01:54:49] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:55:31] *** Joins: X-Scale` (~ARM@31.22.162.96)
[01:57:25] *** Quits: X-Scale (~ARM@92.250.96.13) (Ping timeout: 265 seconds)
[01:57:35] *** X-Scale` is now known as X-Scale
[02:00:04] *** Quits: gaqwas (~john@dynamic-095-114-152-198.95.114.pool.telefonica.de) (Ping timeout: 252 seconds)
[02:02:01] *** Joins: cjb (~cjb@user/cjb)
[02:22:08] *** Quits: frgo (~frgo@p200300deef0cee0081ec75b54b122023.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:22:38] *** Joins: frgo (~frgo@p200300deef0cee0081ec75b54b122023.dip0.t-ipconnect.de)
[02:24:55] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:27:07] *** Joins: Guest59 (~Guest59@ip72-201-46-187.ph.ph.cox.net)
[02:28:21] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[02:32:14] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e473:ba5e:85e3:6828) (Ping timeout: 260 seconds)
[02:33:03] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[02:33:30] *** Joins: srhm (~srhm@user/srhm)
[02:35:23] *** Quits: asarch (~asarch@2806:10ae:7:1568:4a81:d674:9e97:714f) (Quit: Leaving)
[02:43:12] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[02:43:49] *** Joins: srhm (~srhm@user/srhm)
[02:49:48] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[02:51:58] *** Quits: Guest59 (~Guest59@ip72-201-46-187.ph.ph.cox.net) (Ping timeout: 256 seconds)
[02:55:37] *** Joins: igemnace (~ian@user/igemnace)
[02:55:41] *** Joins: CptKirk (~user@70-57-27-195.hlrn.qwest.net)
[03:05:43] *** Joins: dre (~dre@2001:8004:4430:7fc7:86e5:778f:714b:303f)
[03:15:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:19:27] *** Quits: pve (~pve@37-33-35-187.bb.dnainternet.fi) (Quit: leaving)
[03:22:55] *** Parts: akoana (~ah@user/akoana) ()
[03:25:54] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 260 seconds)
[03:33:52] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:f09e:1a4c:1730:ffd3)
[03:47:52] *** Joins: cjb87253 (~cjb@user/cjb)
[03:48:00] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[03:48:16] *** cjb87253 is now known as cjb
[03:48:48] *** Quits: dre (~dre@2001:8004:4430:7fc7:86e5:778f:714b:303f) (Quit: Leaving)
[03:57:25] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[03:57:41] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[04:17:21] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:23:08] *** Joins: asarch (~asarch@2806:10ae:7:1568:4a81:d674:9e97:714f)
[04:55:02] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:f09e:1a4c:1730:ffd3) (Ping timeout: 260 seconds)
[05:07:38] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Ping timeout: 260 seconds)
[05:09:25] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[05:09:39] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[05:11:02] *** Quits: CptKirk (~user@70-57-27-195.hlrn.qwest.net) (Ping timeout: 252 seconds)
[05:40:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:05:55] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Ping timeout: 252 seconds)
[06:11:32] *** Quits: prxq_ (~quassel@x4dbe4c0f.dyn.telefonica.de) (Ping timeout: 252 seconds)
[06:12:02] *** Joins: prxq (~quassel@x4dbdf619.dyn.telefonica.de)
[06:15:52] *** Joins: CptKirk (~user@70-57-27-195.hlrn.qwest.net)
[06:16:12] *** Joins: CptKirk23 (~CptKirk@70-57-27-195.hlrn.qwest.net)
[06:16:22] *** Parts: CptKirk (~user@70-57-27-195.hlrn.qwest.net) ()
[06:16:35] *** Quits: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c) (Ping timeout: 250 seconds)
[06:17:28] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[06:17:39] *** Quits: CptKirk23 (~CptKirk@70-57-27-195.hlrn.qwest.net) (Client Quit)
[06:32:18] <beach> Good morning everyone!
[06:34:46] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[06:35:57] *** Joins: Alfr (~Alfr@user/alfr)
[06:42:27] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[07:05:55] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:05:58] *** Quits: jealousmonk (~user@2804:431:e7c5:e827:5c1c:24ea:7fec:c9e5) (Remote host closed the connection)
[07:19:16] *** Joins: semz (~none@user/semz)
[07:23:06] *** Joins: Michal (~user@5.30.23.247)
[07:23:11] <Michal> Good Morning All
[07:23:25] <beach> Hello Michal.
[07:23:31] *** Joins: karlosz (~karlosz@12.196.174.98)
[07:23:36] <Michal> Hello Beach
[07:23:53] <Michal> How are you doing today?
[07:24:41] <beach> I am fine thank you.  You too I hope.  But how I am is really off-topic. :)
[07:25:39] <beach> We are making great progress with SICL code generation, so I am quite pleased with that.  I can see the light at the end of the tunnel.
[07:26:45] <Michal> Well that is great :) I read about it from time to time, so looking forward to seeing it. Well let me make it on-topic :)
[07:27:06] <Michal> I was curious on if there was a way to search for existing functions loaded in my image by their name or docstring
[07:27:47] <beach> clhs apropos
[07:27:48] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_apropo.htm
[07:29:19] <Michal> Thanks. Is there a way to search by docstring?
[07:30:13] <beach> Not in the standard.  You need to know the name you want documentation for.
[07:30:52] <Michal> Thanks, makes sense
[07:33:26] *** Parts: Michal (~user@5.30.23.247) (ERC (IRC client for Emacs 27.1))
[07:34:06] *** Joins: dre (~dre@2001:8003:c932:c301:a6ae:89a3:2bc6:7303)
[07:35:11] <moon-child> I believe this is what is traditionally referred to as a 'hit and run'
[07:35:43] <beach> Heh.
[08:06:37] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:29:08] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[08:35:09] *** Quits: cjb (~cjb@user/cjb) ()
[08:55:21] *** Joins: shka (~herr@109.231.6.176)
[09:17:48] *** Joins: dre_ (~dre@2001:8004:4430:58d:7c07:dfdd:439:9f82)
[09:18:33] *** Quits: jdz (~jdz@185.23.160.114) (*.net *.split)
[09:18:33] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[09:18:34] *** Quits: victor (sid208353@user/victor) (*.net *.split)
[09:18:34] *** Quits: fishfinger (~fishfinge@178.62.22.133) (*.net *.split)
[09:18:34] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[09:18:34] *** Quits: commandoline (~commandol@ubuntu/member/commandoline) (*.net *.split)
[09:18:34] *** Quits: griffinmb (sid410590@id-410590.helmsley.irccloud.com) (*.net *.split)
[09:18:42] *** Joins: griffinmb (sid410590@id-410590.helmsley.irccloud.com)
[09:18:42] *** Joins: commandoline (~commandol@ubuntu/member/commandoline)
[09:18:48] *** Joins: gabc (~gabc@user/gabc)
[09:18:54] *** Joins: jdz (~jdz@185.23.160.114)
[09:19:01] *** Joins: victor (sid208353@user/victor)
[09:19:14] *** Joins: danieli (~danieli@user/danieli)
[09:20:05] *** Quits: dre_ (~dre@2001:8004:4430:58d:7c07:dfdd:439:9f82) (Remote host closed the connection)
[09:20:34] *** Quits: dre (~dre@2001:8003:c932:c301:a6ae:89a3:2bc6:7303) (Ping timeout: 260 seconds)
[09:22:22] *** Joins: fishfinger (~fishfinge@178.62.22.133)
[09:24:41] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[09:24:42] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[09:24:42] *** Quits: Xach (~xach@66-63-89-62.static.suscom-maine.net) (*.net *.split)
[09:24:42] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[09:24:42] *** Quits: micro (~micro@user/micro) (*.net *.split)
[09:24:42] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (*.net *.split)
[09:24:42] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[09:24:43] *** Quits: mgxm (~mgxm@user/mgxm) (*.net *.split)
[09:24:43] *** Quits: mason (~mason@redhat/mason) (*.net *.split)
[09:24:43] *** Quits: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) (*.net *.split)
[09:24:43] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[09:24:43] *** Quits: spec (~mrSpec@user/spec) (*.net *.split)
[09:24:43] *** Quits: spacebat1 (spacebat@spot.ubermonkey.net) (*.net *.split)
[09:24:43] *** Quits: Kabouik (~Kabouik@user/kabouik) (*.net *.split)
[09:24:43] *** Quits: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (*.net *.split)
[09:24:43] *** Quits: totoro (~totoro@user/totoro) (*.net *.split)
[09:24:49] *** Joins: micro (~micro@user/micro)
[09:24:51] *** Joins: Xach (~xach@66-63-89-62.static.suscom-maine.net)
[09:24:54] *** Joins: mason (~mason@tigris.blisses.org)
[09:24:59] *** Quits: mason (~mason@tigris.blisses.org) (Changing host)
[09:24:59] *** Joins: mason (~mason@redhat/mason)
[09:25:18] *** Joins: Kabouik (~Kabouik@2a03:4000:4d:fbd:4fe:b1ff:fee3:35d)
[09:25:24] *** Joins: totoro (~totoro@173.82.187.126)
[09:25:29] *** Quits: totoro (~totoro@173.82.187.126) (Changing host)
[09:25:29] *** Joins: totoro (~totoro@user/totoro)
[09:25:30] *** Joins: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[09:25:45] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[09:25:46] *** Quits: Kabouik (~Kabouik@2a03:4000:4d:fbd:4fe:b1ff:fee3:35d) (Changing host)
[09:25:46] *** Joins: Kabouik (~Kabouik@user/kabouik)
[09:26:09] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[09:26:10] *** Joins: sm2n (~sm2n@user/sm2n)
[09:26:20] *** Joins: mgxm (~mgxm@user/mgxm)
[09:26:23] *** Joins: mrSpec (~mrSpec@user/spec)
[09:26:32] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[09:26:33] *** ChanServ sets mode: +o fe[nl]ix
[09:26:39] *** Joins: spacebat1 (spacebat@spot.ubermonkey.net)
[09:28:53] *** Joins: energizer (~energizer@user/energizer)
[09:29:38] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[09:32:25] *** Joins: spiaggia (~user@2a01:cb19:150:3400:d15e:cde0:1a2b:7c64)
[09:38:18] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[09:47:08] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e473:ba5e:85e3:6828)
[09:47:08] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[09:47:37] *** Joins: amb007 (~a_bakic@80.149.22.93.rev.sfr.net)
[09:49:01] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[09:54:26] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 250 seconds)
[09:55:32] *** Joins: selwyn (~selwyn@user/selwyn)
[09:55:32] *** Joins: pve (~pve@178-55-231-220.bb.dnainternet.fi)
[09:56:49] *** Joins: dre (~dre@2001:8003:c932:c301:4390:76e3:18b:dad4)
[10:02:43] *** Quits: asarch (~asarch@2806:10ae:7:1568:4a81:d674:9e97:714f) (Quit: Leaving)
[10:21:45] *** Joins: Cymew (~ante@host-217-213-100-152.mobileonline.telia.com)
[10:28:56] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 252 seconds)
[10:32:49] *** Quits: amb007 (~a_bakic@80.149.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[10:33:01] *** Parts: spiaggia (~user@2a01:cb19:150:3400:d15e:cde0:1a2b:7c64) (ERC Version 5.3 (IRC client for Emacs))
[10:33:08] *** Joins: amb007 (~a_bakic@80.149.22.93.rev.sfr.net)
[10:37:47] <pjb> beach: what's the bus factor of sicp?
[10:38:06] <pjb> beach: I'm not sure your health is entirely off-topic of CL…
[10:38:16] <pjb> s/sicp/sicl/
[10:41:53] <pjb> beach: https://termbin.com/fizn
[10:41:59] *** Joins: asarch (~asarch@2806:10ae:7:1568:4a81:d674:9e97:714f)
[10:42:26] <pjb> search-in-docstring ^
[10:42:26] *** Quits: amb007 (~a_bakic@80.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[10:43:17] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[10:46:17] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[10:47:01] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[10:48:26] <beach> pjb: I think I have taken steps to make myself as replaceable as possible.  Most of the techniques are documented in the form of published papers or in the specification.  Much of the code has been extracted to independent repositories, usually well documented and including tests.  Remaining code is often highly modular and often well commented.
[10:48:51] *** Joins: gaqwas (~john@dynamic-077-002-078-062.77.2.pool.telefonica.de)
[10:48:51] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[10:49:56] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[10:50:38] *** Quits: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c) (Ping timeout: 260 seconds)
[10:50:43] <beach> pjb: Bike and karlosz know the compiler fairly well.  heisig knows a lot about HIR because he wrote the HIR evaluator.  The register allocator was largely written by hayley.  The reader is Eclector, so scymtym knows about it.  heisig also wrote the entire implementation fo the sequence functions.
[10:51:08] <beach> pjb: That leaves the details of the bootstrapping technique that I am currently the only one who understands.
[10:51:36] <beach> Plus, the bootstrapping procedure not being entirely finished, the documentation is not accurate at this point.
[10:51:38] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[11:00:06] <beach> Gnuxie knows the assembler and the disassembler.  lonjil did a large part of the printer.
[11:00:29] <beach> froggey did the struct module.
[11:00:55] <beach> pjb: Is that good enough?
[11:01:41] <beach> I would love to have someone else work on bootstrapping, because that aspect is essential for a final system.
[11:01:50] <CodeBitCookie[m]> Good Morning Everyone!
[11:02:03] <beach> Hello CodeBitCookie[m].
[11:02:07] <CodeBitCookie[m]> SBCL is giving me an error
[11:02:25] <CodeBitCookie[m]> "Unable to load any of the alternatives: libssl ......."
[11:02:43] <beach> FFI stuff?
[11:02:56] <CodeBitCookie[m]> [Condition of type CFFI:LOAD-FOREIGN-LIBRARY-INSTEAD]
[11:02:59] <CodeBitCookie[m]> beach: yes
[11:03:13] <CodeBitCookie[m]> when trying to (ql:quickload :my-project)
[11:03:33] <mfiano> Make sure you are using the latest release of SBCL and the Quicklisp dist, and then probably a question for #sbcl
[11:03:42] <CodeBitCookie[m]> I get this on many projects depending on what I put in ":depends-on"
[11:04:25] <CodeBitCookie[m]> mfiano: okay. I have SBCL Version 2.1.2 and Quicklisp is already latest
[11:06:46] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[11:07:53] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[11:08:29] *** Quits: asarch (~asarch@2806:10ae:7:1568:4a81:d674:9e97:714f) (Quit: Leaving)
[11:13:19] <flip214> CodeBitCookie[m]: you need to have some libraries available - in this case, OpenSSL.
[11:25:41] *** Joins: cosimone (~user@151.14.38.15)
[11:33:00] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[11:33:51] *** Quits: gaqwas (~john@dynamic-077-002-078-062.77.2.pool.telefonica.de) (Ping timeout: 245 seconds)
[11:42:24] *** Joins: Alfr (~Alfr@user/alfr)
[11:48:18] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[11:49:59] *** Quits: terrorjack (~terrorjac@ec2-13-37-149-154.eu-west-3.compute.amazonaws.com) (Ping timeout: 265 seconds)
[11:52:53] *** Parts: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad) ()
[12:11:23] *** Joins: cosimone` (~user@5.171.24.89)
[12:13:01] *** Quits: cosimone (~user@151.14.38.15) (Ping timeout: 245 seconds)
[12:21:03] *** Quits: cosimone` (~user@5.171.24.89) (Ping timeout: 265 seconds)
[12:26:21] *** Quits: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c) (Ping timeout: 245 seconds)
[12:47:53] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[12:50:46] *** Joins: dim (~dimlibera@212.85.154.83)
[12:53:01] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 245 seconds)
[12:55:20] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[12:59:35] *** Joins: cosimone (~user@151.14.38.15)
[13:08:35] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[13:22:37] *** Joins: terrorjack (~terrorjac@2a05:d012:f4:f400:3981:7d7e:56ee:2dd9)
[13:28:14] *** Quits: dre (~dre@2001:8003:c932:c301:4390:76e3:18b:dad4) (Ping timeout: 265 seconds)
[13:37:50] *** Joins: random-nick (~random-ni@87.116.165.220)
[13:49:41] *** Quits: Cymew (~ante@host-217-213-100-152.mobileonline.telia.com) (Ping timeout: 245 seconds)
[13:57:35] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 265 seconds)
[13:57:35] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:58:10] *** Joins: amb007 (~a_bakic@80.149.22.93.rev.sfr.net)
[13:59:56] *** Joins: VincentVega (~user@212.241.16.199)
[14:08:07] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 240 seconds)
[14:11:09] *** Quits: amb007 (~a_bakic@80.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:11:27] *** Joins: amb007 (~a_bakic@80.149.22.93.rev.sfr.net)
[14:12:36] *** Quits: amb007 (~a_bakic@80.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:13:36] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:21:21] *** Quits: frgo (~frgo@p200300deef0cee0081ec75b54b122023.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:21:30] *** Joins: frgo (~frgo@p200300deef0cee00dd51feaa628830c1.dip0.t-ipconnect.de)
[14:26:39] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[14:26:39] *** Quits: specbot (~specbot@common-lisp.net) (Read error: Connection reset by peer)
[14:27:40] *** Joins: minion (~minion@common-lisp.net)
[14:27:45] *** Joins: specbot (~specbot@common-lisp.net)
[14:28:17] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[14:29:57] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[14:43:48] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[14:46:53] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[15:02:17] *** Joins: cosimone` (~user@5.170.241.146)
[15:04:25] *** Quits: cosimone (~user@151.14.38.15) (Ping timeout: 265 seconds)
[15:18:03] *** Joins: cosimone (~user@151.14.38.15)
[15:18:14] *** Quits: cosimone` (~user@5.170.241.146) (Ping timeout: 252 seconds)
[15:21:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:35:18] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 260 seconds)
[15:36:48] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Quit: No Ping reply in 180 seconds.)
[15:38:13] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[15:49:21] *** Joins: Cymew (~ante@host-217-213-100-222.mobileonline.telia.com)
[16:08:14] *** Joins: cosimone` (~user@5.171.25.123)
[16:10:01] *** Quits: cosimone (~user@151.14.38.15) (Ping timeout: 265 seconds)
[16:14:01] *** Quits: cosimone` (~user@5.171.25.123) (Ping timeout: 265 seconds)
[16:19:48] *** Joins: makomo (~makomo@user/makomo)
[16:19:50] *** Quits: makomo (~makomo@user/makomo) (Client Quit)
[16:25:35] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[16:28:46] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[16:31:15] *** Joins: Bike (~Glossina@71.69.170.70)
[16:31:15] *** ChanServ sets mode: +o Bike
[16:46:42] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:09:51] *** mrSpec is now known as spec
[17:15:58] *** Joins: selwyn (~selwyn@user/selwyn)
[17:16:13] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[17:16:38] *** Joins: selwyn (~selwyn@user/selwyn)
[17:22:58] *** Joins: jealousmonk (~user@2804:431:e7c5:e827:5c1c:24ea:7fec:c9e5)
[17:33:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:43:37] <akater[m]> CLHS lists the following Method Signatures for remove-method:
[17:43:37] <akater[m]> > remove-method (generic-function standard-generic-function) method
[17:43:37] <akater[m]> IIUC, it means, the implementation must define a method with specializers (standard-generic-function t).  SBCL only has (STANDARD-GENERIC-FUNCTION METHOD).  Is it my misunderstanding of CLHS, or is it SBCL?
[17:45:42] <beach> mop remove-method
[17:45:42] <specbot> http://metamodular.com/CLOS-MOP/remove-method.html
[17:45:59] <beach> akater[m]: This is a case where the standard differs from the MOP.
[17:46:22] <beach> I guess it makes no sense if the second argument is not a method.
[17:46:48] <akater[m]> Also CLHS: > remove-method must not signal an error if the method is not one of the
[17:46:48] <akater[m]> methods on the generic-function.
[17:47:09] <akater[m]> This hints it might make sense, according to the standard.
[17:47:53] <akater[m]> I mean, it could be interpreted as “when the second arg is not a method at all, there should be no error”.
[17:47:58] <beach> OK, let me explain...
[17:48:32] <beach> The Common Lisp HyperSpec page says in Arguments and Values:  method---a method.
[17:48:35] <beach> Agreed?
[17:48:54] <akater[m]> Yes.
[17:49:04] <beach> And Exceptional Situations: none.  Yes?
[17:49:39] <beach> So then, this one kicks in:
[17:49:40] <akater[m]> Yes.  But it also lists a specific specializer, isn't it?
[17:49:43] <beach> clhs 1.4.4.3
[17:49:43] <specbot> The ``Arguments and Values'' Section of a Dictionary Entry: http://www.lispworks.com/reference/HyperSpec/Body/01_ddc.htm
[17:50:06] <beach> Which means that the consequences are undefined if a method is not given to REMOVE-METHOD.
[17:50:31] <akater[m]> Yes, now I agree.  Thank you.
[17:50:32] <beach> So SBCL just defines those consequences to be that there is no applicable method in that case.
[17:50:43] <beach> Pleasure.
[17:50:53] <beach> And this is a case for WSCL.
[17:51:26] <beach> minion: Please tell akater[m] about WSCL.
[17:51:27] <minion> akater[m]: WSCL: Well-Specified Common Lisp. Pronounce it as "whistle". A project to revise the Common Lisp standard in a non-controversial way. See https://github.com/s-expressionists/wscl
[18:00:36] *** Joins: Posterdati (~posterdat@host-95-235-15-123.retail.telecomitalia.it)
[18:01:49] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[18:02:30] *** Joins: lcao201 (~chatzilla@pool-96-255-234-118.washdc.fios.verizon.net)
[18:02:41] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:04:11] *** ec is now known as tjl
[18:04:51] *** tjl is now known as tlj
[18:05:38] <lcao201> Hi I am a LISP newbie and reading Practical Common LISP book but have trouble with one of the examples. Could someone help me? The book is at https://gigamonkeys.com/book/
[18:05:57] *** Joins: eddof13 (~textual@2806:102e:12:18a2:6888:32ac:b8b1:4238)
[18:06:29] <beach> Which example?
[18:06:46] <hexology> lcao201: go ahead and ask your question, someone will answer if they have an answer. as they say, "don't ask to ask"
[18:07:14] <lcao201> Under the heading "Updating Existing Records--Another Use for WHERE", I typed the snippet but the code never updates the *db* global var
[18:07:42] <lcao201> The code is this:
[18:07:56] <lcao201> (defun update (selector-fn &key title artist rating (ripped nil ripped-p))
[18:07:56] <beach> Please use a paste site.
[18:07:57] <lcao201>   (setf *db*
[18:07:58] <lcao201>         (mapcar
[18:08:00] <lcao201>          #'(lambda (row)
[18:08:01] <lcao201>              (when (funcall selector-fn row)
[18:08:02] <beach> Too late.
[18:08:03] <lcao201>                (if title    (setf (getf row :title) title))
[18:08:05] <lcao201>                (if artist   (setf (getf row :artist) artist))
[18:08:06] <lcao201>                (if rating   (setf (getf row :rating) rating))
[18:08:08] <lcao201>                (if ripped-p (setf (getf row :ripped) ripped)))
[18:08:09] <lcao201>              row) *db*)))
[18:08:13] <lcao201> Sorry.
[18:08:15] <beach> Please do not paste code of more than one line in the channel.
[18:09:17] <lcao201> https://pastebin.com/ku7zKUka
[18:09:23] <beach> You said WHERE, did you mean WHEN?
[18:10:01] <Jach> lcao201: did you type the following snippet, (update (where :artist "Dixie Chicks") :rating 11) ?
[18:10:12] <Jach> The snippet you've pasted only defines the update function, it does not run it
[18:10:36] <lcao201> Yes I ran the command in REPL but no change at all
[18:11:03] <lcao201> The WHERE is another function in earlier part of the page. Seee https://pastebin.com/XarzeDdM
[18:11:25] <lcao201> I guess the author is referring the same pattern as WHERE?
[18:12:52] *** Quits: eddof13 (~textual@2806:102e:12:18a2:6888:32ac:b8b1:4238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:13:00] <beach> What is the value of *db* before and after you run the snippet?
[18:14:16] *** tlj is now known as tjl
[18:16:58] <lcao201> let me rerun the whole thing
[18:17:01] <Jach> lcao201: Maybe start at the beginning of the chapter's snippets and type them in, I just did that and it works fine (updates the ratings from 9 and 8 to 11).
[18:18:26] <lcao201> https://pastebin.com/h4GyqGfa   for before and after
[18:20:17] *** Quits: tjl (~ec@gateway/tor-sasl/ec) (Quit: tjl)
[18:20:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:21:52] <lcao201> Jack, thank you for confirming this! Must be something in the code then. Here is my whole file. https://pastebin.com/gbgrt6ts
[18:22:21] <lcao201> I mean my code not the author's code.
[18:22:42] <_death> (if title (equal (getf cd :title title) t))
[18:23:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:25:51] <Jach> _death found it
[18:26:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[18:27:15] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:27:23] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[18:28:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:28:11] *** Joins: eddof13 (~textual@177.241.59.113)
[18:30:30] <lcao201> IC. Thanks! Let me try fixing it.
[18:33:37] <lcao201> Yes it works now! Thanks to Jach and _death and others for your help!
[18:34:21] <pjb> beach: that sounds good enough.  Nonetheless, Live Long and Prosper!  ;-)
[18:35:17] <beach> pjb: Thanks!
[18:36:26] *** Parts: lcao201 (~chatzilla@pool-96-255-234-118.washdc.fios.verizon.net) ()
[18:47:34] <lisp123> Any good resources on the theory of testing in interactive languages like Common Lisp?
[18:48:02] <lisp123> (not testing frameworks, but reasoning / thoughts /etc as it applies to interactive development)
[18:49:22] *** Joins: greenMac (~chatzilla@pool-96-255-234-118.washdc.fios.verizon.net)
[18:50:44] *** Joins: makomo (~makomo@user/makomo)
[18:54:23] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[18:54:56] *** Parts: greenMac (~chatzilla@pool-96-255-234-118.washdc.fios.verizon.net) ()
[18:56:02] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[18:57:22] <beach> lisp123: It seems to me you always want to start with a fresh image so that everything is in a well defined state that can be repeated.
[18:58:14] <beach> lisp123: If this were SICL, I would say "fresh global environment" instead, but the only option you have in current Common Lisp implementations to get a fresh global environment is to start a fresh image.
[19:00:31] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[19:03:03] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:03:33] <lisp123> beach: Multiple global environments sounds a great quality of life improvement
[19:04:21] <beach> Indeed.  And lately I have been thinking that they are a necessity for a single-image IDE.
[19:05:09] <mariari> beach: there could be a lot of refactoring improvements with first class environments, at least I envision having tools akin to what unison has in regards to refactoring images
[19:05:27] <beach> With current Common Lisp implementations, it is just too easy to destroy the (single) global environment, and thereby the IDE too.
[19:05:51] *** Joins: rotateq (~user@p200300e787056600fdfeed040e17b750.dip0.t-ipconnect.de)
[19:06:01] <beach> mariari: You mean using first-class global environments to help with refactoring?  How would that work?
[19:06:21] <lisp123> Yes (at least for me, I do M-x slime-restart-inferior-lisp a lot, which I think is a fair precaution)
[19:06:52] <beach> lisp123: It is an "unfortunate necessity" rather than "a fair precaution" in my opinion.
[19:07:16] <lisp123> Agreed
[19:07:24] <rotateq> lisp123: why do you restart so often?
[19:07:24] <mariari> yeah! From what I've seen on Unison they do this at a type level so when types change and changes cascade, you can commit back the changes after everything fits together. For CL in particular we could recompile parts that we know has to play together in a new environment, and then merge the changes when we are more confident the whole system works together, maybe a swap replacement of the old
[19:07:27] <mariari> image, or diffing it if new data has come into the old env while time has passed
[19:08:20] <beach> Yes, I see.  Interesting idea.
[19:10:46] <mariari> I think there is a lot of very cool ideas that can be had once first class environments become more common
[19:10:54] <lisp123> rotateq: I don't have a list on me, sometimes its running a computation that exceeds the stack, sometimes its clashing symbols after recompiling certain parts of code (the latter I could probably solve without restarting - but I have an easy workflow - restart lisp -> asdf:load-system)
[19:11:03] <beach> mariari: I think so too.
[19:12:03] <etimmons> I would love to have first class environments. The lack of them is largely what drove me to implement my dependency manager as a second process
[19:12:04] <rotateq> do you mean exceeding the heap size? or really the stack?
[19:12:40] <beach> etimmons: Hmm.  Yes, I can see that.
[19:12:52] <lisp123> rotateq: Sorry, I'm not 100% clear on terminology, just when my computation is too big (since I work a lot with permutations and factorials can get big fast)
[19:13:17] <pve> lisp123: I even have a hotkey for restarting my session. Complete heresy, I know.
[19:13:30] <rotateq> so you should look out how to cancel out things before even computing anything
[19:13:52] <lisp123> beach: Maybe you read it, maybe its too old, but this seemed interesting http://www.softwarepreservation.org/projects/interactive_c/bib/Sandewall-1978.pdf
[19:14:20] <lisp123> pve: Nice, time for me to do that
[19:14:21] <beach> rotateq: I restart often when I run SICL bootstrapping with SBCL as a host, simply because each execution of the bootstrapping procedure adds methods to some Common Lisp generic functions, and that results in a gradual slowdown of the entire computation.  It is much easier to restart than to remove those methods.
[19:15:03] <pve> lisp123: yeah, restarting the session also runs tests etc.
[19:15:46] <beach> lisp123: Erik Sandewall was THE professor of computer science where I went to university.  He was in fact the first such professor in Sweden.  I was very lucky to have him (and his other group members) as a teacher.
[19:16:39] <lisp123> beach: Small World! That must have been a great experience. Well I will definitely read it in depth now
[19:16:53] <beach> lisp123: Thanks to him, I learned LISP in 1977 or so.
[19:16:57] <lisp123> pve: Agreed
[19:17:54] <rotateq> beach: Your bootstrapping magic. :)
[19:18:17] <rotateq> beach: So how shall I ever catch up to your experience? ^^
[19:19:00] <lisp123> beach: That would have been amazing to LISP in those very times
[19:22:35] <beach> rotateq: After my death, every second you spend still being alive, you will catch up.
[19:22:36] *** Quits: Cymew (~ante@host-217-213-100-222.mobileonline.telia.com) (Ping timeout: 245 seconds)
[19:22:57] <rotateq> Hopefully will never come.
[19:24:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:28:02] <jeosol> Good morning all!
[19:28:24] <jeosol> lisp123: Thanks for linking that paper about, should be a good read. Will definitely be reading it sometime
[19:29:26] <rotateq> hey jeosol
[19:29:33] *** Joins: Guest0 (~Guest0@c-69-255-2-251.hsd1.md.comcast.net)
[19:32:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:36:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:37:09] <rotateq> beach: There is a myth that Donald Knuth will die in the moment he finishes book 7 (Compilers) of The Art of Computer Programming.
[19:37:09] *** Quits: eddof13 (~textual@177.241.59.113) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:37:15] *** Guest0 is now known as jkordani
[19:37:35] <beach> Heh!
[19:40:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:40:38] <rotateq> But who will check sent issues and writes the symbolic checks? :)
[19:42:20] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 265 seconds)
[19:43:59] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[19:46:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:47:57] *** Joins: eddof13 (~textual@177.241.59.113)
[19:56:55] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[19:57:36] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[20:00:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:01:46] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 245 seconds)
[20:01:59] *** Joins: amb007 (~a_bakic@96.149.22.93.rev.sfr.net)
[20:10:31] *** Quits: amb007 (~a_bakic@96.149.22.93.rev.sfr.net) (Ping timeout: 245 seconds)
[20:11:05] *** Joins: amb007 (~a_bakic@246.36.22.93.rev.sfr.net)
[20:11:46] *** Joins: n00p3 (~n00p3@ip-37-248-154-84.multi.internet.cyfrowypolsat.pl)
[20:16:53] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 264 seconds)
[20:18:45] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[20:21:53] *** Joins: Oladon (~olad@98.43.81.226)
[20:23:26] *** Quits: amb007 (~a_bakic@246.36.22.93.rev.sfr.net) (Ping timeout: 245 seconds)
[20:23:59] *** Joins: amb007 (~a_bakic@189.36.22.93.rev.sfr.net)
[20:26:41] *** Joins: charles_ (~charles@cpe-76-186-124-165.tx.res.rr.com)
[20:29:23] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 250 seconds)
[20:42:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:48:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:48:51] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 245 seconds)
[20:49:36] <lisp123> jeosol: You are welcome :) P.S. I subscribed to ACM to read some of their papers, if anybody wants an article from there, ping me and hopefully I will have access
[20:52:11] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[20:55:24] *** Quits: amb007 (~a_bakic@189.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:59:33] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[21:00:40] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:00:50] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:02:51] *** Joins: karlosz (~karlosz@47.180.55.252)
[21:03:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:03:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:04:47] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[21:05:26] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:08:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[21:10:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[21:10:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:12:53] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:14:16] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:19:00] *** Quits: eddof13 (~textual@177.241.59.113) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:19:16] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 245 seconds)
[21:31:22] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 260 seconds)
[21:33:05] *** Quits: VincentVega (~user@212.241.16.199) (Read error: Connection reset by peer)
[21:35:54] *** Joins: selwyn (~selwyn@user/selwyn)
[21:38:56] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[21:41:10] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[21:41:34] *** Joins: selwyn (~selwyn@user/selwyn)
[22:00:34] *** Joins: Inline (~Inline@2a02:908:1252:7a80:1feb:c0cd:e428:d19f)
[22:02:07] *** Quits: Inline (~Inline@2a02:908:1252:7a80:1feb:c0cd:e428:d19f) (Remote host closed the connection)
[22:02:40] *** Joins: eddof13 (~textual@2806:102e:12:18a2:ed8f:fb44:845:a3fb)
[22:02:56] *** Joins: Inline (~Inline@2a02:908:1252:7a80:1feb:c0cd:e428:d19f)
[22:04:34] *** Quits: eddof13 (~textual@2806:102e:12:18a2:ed8f:fb44:845:a3fb) (Client Quit)
[22:10:07] *** Joins: eddof13 (~textual@189.178.0.178)
[22:11:13] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[22:22:25] *** Quits: Inline (~Inline@2a02:908:1252:7a80:1feb:c0cd:e428:d19f) (Quit: Leaving)
[22:23:26] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:e0ff:efea:3ba:f67e)
[22:24:26] *** Joins: Inline (~Inline@2a02:908:1252:7a80:1feb:c0cd:e428:d19f)
[22:24:38] *** Joins: semz (~none@user/semz)
[22:26:11] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[22:26:35] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[22:29:27] *** Joins: gaqwas (~john@dynamic-077-002-078-062.77.2.pool.telefonica.de)
[22:29:34] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 265 seconds)
[22:30:22] *** Joins: akoana (~ah@user/akoana)
[22:35:22] *** Quits: semz (~none@user/semz) (Ping timeout: 265 seconds)
[22:39:16] *** Joins: semz (~none@user/semz)
[22:45:31] *** Quits: semz (~none@user/semz) (Ping timeout: 265 seconds)
[22:49:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[22:51:21] *** Quits: n00p3 (~n00p3@ip-37-248-154-84.multi.internet.cyfrowypolsat.pl) (Ping timeout: 245 seconds)
[23:43:53] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:9265:7a34:99ac:4807)
[23:44:58] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 265 seconds)
[23:47:26] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:48:08] *** Joins: semz (~none@user/semz)
[23:52:42] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[23:54:23] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:59:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
