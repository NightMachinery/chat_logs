[00:02:09] <timo> oh, what's your version btw?
[00:02:20] <Skarsnik> 2021.10
[00:02:21] <timo> since we've just had a new implementation of hashes a couple months back
[00:03:30] <Skarsnik> I still don't have debug symbols for moar :(
[00:04:05] <Skarsnik> I tried running make distclean && perl Configure.pl --gen-moar --moar-option='--optimize=0 --debug=3'--gen-nqp --backends=moar --prefix=/home/skarsnik/raku/ && make && make install but gdb still give me a "empty" bt
[00:05:37] <timo> the libmoar.so should have debug symbols, can you "file" it?
[00:06:54] <Skarsnik>  /home/skarsnik/raku/lib/libmoar.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=1527b691445b9a3be39cc60f5c9388024e86112f, not stripped
[00:07:13] <timo> ok, so "not stripped" is already a good step forward
[00:07:33] <timo> oh, right, turn off the JIT as well if you want proper C-level backtraces
[00:08:26] *** Joins: monkey_ (~user@190.104.116.153)
[00:08:28] <timo> since we don't use the stack pointer / base pointer registers in the way gdb would require for things to go right ... at least that's how i interpret it
[00:10:52] <Skarsnik> I tried objdump --syms /home/skarsnik/raku/lib/libmoar.so | grep debug and this show nothing outside symbols that are called debugsthing (no .debug entry)
[00:11:13] <Skarsnik> So I guess this does not compile with symbol x)
[00:11:27] <timo> yeah, you'll probably want dwarfdump honestly
[00:11:51] <timo> the dwarf data has boatloads more information than just the publically exported symbols
[00:12:57] <timo> but dwarfdump doesn't come with typical installations of gcc and such, like "build-essential"
[00:13:50] <nine> Skarsnik: did you by any chance have gdb still running when you did make install?
[00:14:15] <nine> It may not be able to actually replace the file while it's in use
[00:14:31] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[00:14:41] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[00:15:12] <Skarsnik> I restarted it, it was even using an old rakudo, the system one I installed a long time ago (package was still called perl6)
[00:15:12] <timo> ooh, that is definitely a thing that happens, despite my best efforts (which were perhaps misguided and we'll perhaps want to actually revert that?)
[00:15:27] <Skarsnik> I add -g
[00:16:07] <Skarsnik> let's see if that fix it x)
[00:24:29] <Skarsnik> huho fatal: unable to access 'https://github.com/Raku/nqp.git/': The requested URL returned error: 500 x)
[00:26:16] <Skarsnik> Let's take a shower and eat, then try this later I guess
[00:28:00] <nine> Github has a major outage
[00:28:11] <nine> https://www.githubstatus.com/
[00:31:53] <japhb> A bit disingenuous to say that webhooks are working if git operations aren't ....
[00:32:34] <japhb> .oO( "Well, there are no *errors* occuring ... I mean, there's also no *traffic*, but that's just semantics." )
[00:34:31] <tbrowder> lizmat: i should be able to clone yr mi6 repo and force install from it
[00:41:15] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:50:16] <Skarsnik> just when I rm -fr my raku install xD
[01:00:50] <Voldenet> Is there a mirror for raku repo?
[01:04:57] *** Joins: jgaz (~jgaz@2600:8805:d982:4233::9e0)
[01:09:26] *** Quits: jgaz (~jgaz@2600:8805:d982:4233::9e0) (Client Quit)
[01:13:21] *** Quits: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se) (Read error: Connection reset by peer)
[01:13:37] *** Joins: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se)
[01:19:06] *** Joins: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se)
[01:21:10] <Skarsnik> that a good point x)
[01:21:55] *** Joins: dogbert12 (~dogbert@c83-253-59-194.bredband.tele2.se)
[01:23:02] *** Quits: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 240 seconds)
[01:23:41] *** Quits: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 245 seconds)
[01:25:05] <timo> i mean, with git everybody essentially has a mirror :P
[01:29:42] <Skarsnik> could be nice if release could be build with github down, maybe copy each tagged thing somewhere and have the script use the mirror if regular git fail?
[01:31:55] <ugexe> realistically what does that achieve? almost certainly something you will want to use in the chain will use github
[01:36:34] <Skarsnik> sadly, yes ~~
[01:49:59] *** Tirifto_ is now known as Tirifto
[01:50:44] *** Quits: qorg11 (~lain@2605:6400:c022:fa04::5) (Quit: WeeChat 3.3)
[02:14:16] *** Joins: qorg11 (~lain@2605:6400:c022:fa04::2)
[02:15:24] *** Joins: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se)
[02:15:24] *** Quits: dogbert12 (~dogbert@c83-253-59-194.bredband.tele2.se) (Read error: Connection reset by peer)
[02:17:02] *** Joins: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se)
[02:20:02] *** Joins: dogbert12 (~dogbert@c83-253-59-194.bredband.tele2.se)
[02:20:52] *** Quits: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 256 seconds)
[02:22:31] *** Quits: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 256 seconds)
[02:42:21] *** Quits: dogbert12 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 256 seconds)
[02:43:52] *** Quits: Ergo444 (~Ergo444@2E8B6AFC.catv.pool.telekom.hu) (Quit: Connection closed)
[03:17:56] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 260 seconds)
[03:28:27] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 268 seconds)
[03:28:41] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:29:48] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[03:32:43] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:36:38] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[03:39:32] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[03:53:18] *** Joins: monkey_ (~user@190.104.116.153)
[04:03:26] *** Quits: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 256 seconds)
[04:17:36] *** Joins: lembark (~lembark@c-73-154-246-108.hsd1.pa.comcast.net)
[04:27:43] *** Quits: getimiskon (~getimisko@athedsl-4406825.home.otenet.gr) (Quit: Lost terminal)
[04:35:05] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[05:25:41] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[05:48:16] *** Quits: [Coke] (~coke@172.58.224.43) (Ping timeout: 256 seconds)
[05:49:50] *** Joins: [Coke] (~coke@172.58.224.43)
[05:51:54] <SmokeMachine> m: use Test; my $*a = 42; react whenever Promise.in: 1 { await start { is $*a, 42 } } # should this work?
[05:51:56] <camelia> rakudo-moar d6817f088: OUTPUT: «not ok 1 - ␤# Failed test at <tmp> line 1␤# expected: '42'␤#      got: (Failure)␤»
[05:52:23] <SmokeMachine> m: use Test; my $*a = 42; react whenever Promise.in: 1 { is $*a, 42 }
[05:52:24] <camelia> rakudo-moar d6817f088: OUTPUT: «ok 1 - ␤»
[05:53:15] <SmokeMachine> m: use Test; my $*a = 42; await start { is $*a, 42 }
[05:53:16] <camelia> rakudo-moar d6817f088: OUTPUT: «ok 1 - ␤»
[05:53:56] <SmokeMachine> why it's ok with whenever, it's on on a Promise but when doing both that breaks?
[05:58:43] <Voldenet> m: my $b; my $*a = 42; react whenever Promise.in: 1 { await start { $b = $*a } };
[05:59:03] <Voldenet> rip
[05:59:05] <camelia> rakudo-moar d6817f088: OUTPUT: «(timeout)»
[06:00:33] <Voldenet> when you don't do this assignment, however
[06:00:53] <Voldenet> m: my $b; my $*a = 42; react whenever Promise.in: 1 { await start { } };
[06:00:55] <camelia> rakudo-moar d6817f088: ( no output )
[06:01:59] <SmokeMachine> m: my $*a = 42; react whenever Promise.in: 1 { await start { say $*a } };
[06:02:00] <camelia> rakudo-moar d6817f088: OUTPUT: «A react block:␤  in block <unit> at <tmp> line 1␤␤Died because of the exception:␤    An operation first awaited:␤      in block  at <tmp> line 1␤␤    Died with the exception:␤        Dynamic variable $*a not found␤          in block …»
[06:02:31] <SmokeMachine> m: my $a = 42; react whenever Promise.in: 1 { await start { say $a } }; # not dyn
[06:02:32] <camelia> rakudo-moar d6817f088: OUTPUT: «42␤»
[06:09:25] <Voldenet> m: use Test; my $*a = 42; await start { await start { is $*a, 42 } };
[06:09:25] <camelia> rakudo-moar d6817f088: OUTPUT: «not ok 1 - ␤# Failed test at <tmp> line 1␤# expected: '42'␤#      got: (Failure)␤»
[06:09:30] <Voldenet> m: use Test; my $*a = 42; await start { is $*a, 42 };
[06:09:30] <camelia> rakudo-moar d6817f088: OUTPUT: «ok 1 - ␤»
[06:11:59] <SmokeMachine> It seems a bug to me... does it seem a but to you, Voldenet ?
[06:12:28] <Voldenet> I bet it can be explained, but it doesn't seem fine at all
[06:21:31] <SmokeMachine> https://github.com/rakudo/rakudo/issues/4654
[06:49:50] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:49:50] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:51:15] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[07:11:35] *** Quits: [Coke] (~coke@172.58.224.43) (Quit: Lost terminal)
[07:32:23] *** Joins: [Coke] (~coke@172.58.224.43)
[07:32:34] <[Coke]> .
[07:40:36] <discord-raku-bot> <frost#6297> Hello all
[07:41:42] <discord-raku-bot> <frost#6297> The question is about zef, can I set DefaultCUR as a custom path in the config.json?
[07:51:35] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[07:58:14] *** Quits: kjp (~kevin@180.216.176.95) (Quit: WeeChat 2.8)
[08:01:35] *** Joins: kjp (~kevin@180.216.176.95)
[09:01:35] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:01:35] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:01:35] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:01:35] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:01:35] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[09:01:36] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[09:02:16] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[09:02:37] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[09:02:46] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[09:02:54] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[09:03:15] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[09:03:59] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[09:04:24] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:04:30] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[09:04:43] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[09:31:37] *** Joins: small_petit (~small_pet@102.176.65.4)
[09:32:37] *** Quits: small_petit (~small_pet@102.176.65.4) (Client Quit)
[09:32:49] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:42:38] *** Joins: dogbert12 (~dogbert@c83-253-59-194.bredband.tele2.se)
[10:02:52] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[10:03:49] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[10:04:38] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[10:06:37] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:33:16] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:55:39] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:56:27] *** Joins: seednode (~seednode@user/seednode)
[10:59:10] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[11:03:57] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[11:04:08] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[12:00:59] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:03:24] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[12:14:39] *** Joins: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[12:15:02] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 240 seconds)
[12:15:02] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 240 seconds)
[12:16:57] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 268 seconds)
[13:03:52] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[13:04:19] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[13:04:28] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[13:30:08] *** nebuchad` is now known as nebuchadnezzar
[13:38:12] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[13:52:03] <Voldenet> m: use Test; my $*a = 42; await start { await start { is $*a, 42 } };
[13:52:03] <camelia> rakudo-moar d6817f088: OUTPUT: «not ok 1 - ␤# Failed test at <tmp> line 1␤# expected: '42'␤#      got: (Failure)␤»
[13:52:14] <Voldenet> m: $*SCHEDULER = CurrentThreadScheduler; use Test; my $*a = 42; await start { await start { is $*a, 42 } };
[13:52:14] <camelia> rakudo-moar d6817f088: OUTPUT: «ok 1 - ␤»
[14:04:00] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[14:06:13] *** Quits: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Quit: Textual IRC Client: www.textualapp.com)
[14:06:31] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[14:06:51] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[14:06:52] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[14:12:44] *** Joins: Xliff_ (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net)
[14:13:12] <Xliff_> Here's a sample of what you can now do with Raku. Please note the full script for this example on the right.
[14:13:15] <Xliff_> https://vimeo.com/650780944
[14:13:22] <Xliff_> Thank YOU, #rakyu
[14:13:40] <Xliff_> :P # raku
[14:14:20] <Xliff_> https://github.com/Xliff/p6-GEGL
[14:16:14] <timo> "Video is not rated. Log in to watch." :\
[14:17:48] <timo> vimeo forgot what video i wanted to watch when i created an account with "sign in with google"
[14:18:02] <Xliff_> LOL
[14:18:14] <Xliff_> Let me see if I can rate it.
[14:19:22] <timo> the slow / abrupt movement of the grid makes it look like it's stuttering :D
[14:20:48] <Xliff_> Yeah. Interpolation is float, but the property is int.
[14:22:00] <timo> just hvae the grid twice and fade opacity between one step and the next perhaps :D
[14:22:43] <Xliff_> Perhaps. That is a whole different level of complexity.
[14:23:00] <Xliff_> Probably be easier to modify gegl:grid to use a float.
[14:23:21] <Xliff_> Then again... probably not
[14:24:07] <timo> couldn't really read the code on the video, so no clue how gegl actually works
[14:26:03] <Xliff_> https://github.com/Xliff/p6-GEGL/blob/main/t/spiral.t
[14:26:44] <timo> ha, that wasn't there when last i looked :D
[14:28:49] <phogg> Should probably link to the source in the description (or a comment)
[14:36:11] <Xliff_> timo: Good idea. Busy fixing a snack. Will add that when I'm done.
[14:36:52] <Xliff_> You can get an operation list, here: https://gegl.org/operations/
[15:00:58] *** Joins: _Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net)
[15:01:04] <_Xliff> https://vimeo.com/650787185
[15:01:16] <_Xliff> This one is rated, so should be viewable without a login.
[15:08:11] <timo> the fractal zoomer is just a node implemented inside of gegl itself?
[15:10:39] <_Xliff> Yes.
[15:11:05] <_Xliff> Actually, it's a fully functional  explorer.
[15:11:17] <_Xliff> Have to work on getting better colors out of it, though.
[15:18:29] <timo> so gegl has a concept of user input as well?
[15:23:49] <_Xliff> Hmmm... what do you mean?
[15:25:07] <timo> like, i imagine a fully functional explorer you'd control with the mouse or something?
[15:25:41] <_Xliff> Yes. You can accomplish that using GTK.
[15:26:30] <_Xliff> There's a project out there called GEGL-Gtk. It's written for GTK2, but shouldn't be hard to convert to GTK3.
[15:26:43] <_Xliff> I'm pretty sure there's an easier route, though.
[15:26:48] <timo> ah, ok
[15:26:59] <_Xliff> It's all GLib
[15:27:16] <timo> how easy is it to hook a gegl renderer up to SDL's windowing and opengl/vulkan context management?
[15:27:16] <_Xliff> https://gitlab.gnome.org/GNOME/gegl-gtk
[15:27:39] <_Xliff> Don't know. Haven't looked that far yet. Project is only 10 days old. :)
[15:28:14] <_Xliff> https://gegl.org/operations/gegl-sdl2-display.html
[15:30:04] <timo> oh that's fun
[15:30:10] <_Xliff> =)
[15:30:24] <timo> looks like it takes control of the window completely or something like that?
[15:31:12] <_Xliff> Actually, I think it just controls the content. SDL still controls the window.
[15:31:40] <timo> right, i meant more like you can't pass something from SDL to use or get the thing from gegl to use your own sdl stuff with?
[15:31:58] <timo> not that important :)
[15:32:48] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:32:59] <_Xliff> Actually, you should be able tgo.
[15:33:10] <_Xliff> You'd use the SDL buffer as an input.
[15:34:32] <_Xliff> https://gegl.org/operations/gegl-load.html
[15:34:58] <_Xliff> https://gegl.org/operations/gegl-pixbuf.html
[15:35:14] <_Xliff> https://gegl.org/operations/gegl-buffer-source.html
[15:35:26] <_Xliff> So convert SDL buffer to one of those and you should be good.
[15:36:27] <_Xliff> Set your chain up to do processing in the middle and then output to gegl:sdl2-display
[15:36:40] <_Xliff> Yet another way to do user input, too.
[15:36:50] <_Xliff> Let SDL handle it. ;)
[15:37:56] <_Xliff> timo: Mind taking a gander at https://github.com/rakudo/rakudo/issues/4655?
[15:38:25] <_Xliff> nine is working on it, but more eyes couldn't hurt. That's the last thing killing the weekly timings since new-disp landed.
[15:38:55] <timo> don't really have the opportunity to try to reproduce it, but when nine catches it in the rr, i shall have a look or two
[15:39:23] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2021/11/28/leaky-rakudo/
[15:40:37] <timo> oh, gfldex, if you had zstd available at moarvm build time, you'll be using the newer heap snapshot format that's already compressed
[15:43:37] <timo> you can see which format it is from the first 16 bytes of the file
[15:46:34] <_Xliff> What is `rr`? Rakudo Repository?
[15:47:31] <timo> rr is mozilla's time traveling debugger / recorder and replay tool
[15:48:47] <timo> i've been the one who keeps shouting "have you tried rr" for perhaps a year or so :P
[15:57:09] <_Xliff> Huh. Is it easy to set up?
[16:07:27] <discord-raku-bot> <frost#6297> To be honest, I'm confused about the zef config😫
[16:09:41] <discord-raku-bot> <frost#6297> in the README file, it said that the config.json in  $*HOME/.zef/config.json will override the default config.json
[16:09:57] <discord-raku-bot> <frost#6297> Most cases
[16:10:42] <discord-raku-bot> <frost#6297> actually, that path is not working
[16:11:26] <discord-raku-bot> <frost#6297> The right path is $*HOME/.config/zef/config.json
[16:11:57] <Xliff> README might need updating.
[16:12:05] <Xliff> You'll have to ask ugexe about that.
[16:12:14] <discord-raku-bot> <frost#6297> Yeah
[16:12:23] <discord-raku-bot> <frost#6297> I think so
[16:12:42] <Xliff> weekly: https://vimeo.com/650780944, https://vimeo.com/650787185, http://github.com/p6-GEGL
[16:12:43] <notable6> Xliff, Noted! (weekly)
[16:13:20] <timo> if you don't run into any trouble, it's trivial to set up
[16:13:31] <timo> `rr record raku -e 'say "hi"'`, then `rr replay`
[16:13:53] <timo> you land in a regular old gdb but now commands like "reverse-step", "reverse-continue" etc work
[16:14:28] <Xliff> Huh... OK
[16:14:56] <timo> also compatible with that browser-based gdb frontend, gdbgui i think it's called?
[16:30:05] <nine> timo: I think you've advertised rr a lot longer than just a year ;) And good thing you did that, too
[16:30:23] <timo> time is relative, especially when you rr
[16:31:58] *** Joins: MoC (~moc@user/moc)
[16:32:55] <gfldex> timo: Am I looking for "MoarHeapDumpv002"?
[16:34:51] <timo> ok that format will benefit from compression, and also be slower to load in the heap dump explorer
[16:47:52] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[16:48:36] *** Joins: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net)
[17:33:24] *** Quits: andinus (andinus@tilde.institute) (Remote host closed the connection)
[17:35:03] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[17:43:16] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:00:13] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[18:16:18] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[18:23:16] *** Quits: _Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net) (Quit: Leaving)
[18:38:48] <qorg11> will there ever be a fork() function in raku?
[18:39:25] <tbrowder> or goto  (pls)
[18:40:12] <tbrowder> ah, well, getting along without it so far  ;-D
[18:40:22] <qorg11> I don't usually use goto
[18:41:20] <tbrowder> i see need for it less and less since i don't have it. forgetting fortran was easy!
[18:50:29] <qorg11> Well, you can call fork() using NativeCall
[18:50:36] <qorg11> `sub fork( --> int32) is native("c",v6) {*}`
[18:53:01] <Skarsnik> hm, still no luck getting moar with debug symbols :(
[18:54:32] <Skarsnik> goto is useful (for me) to replace exception or when you have some clean up to do before exiting a function. The last part you can probably do with the LEAVE phaser or don't worry at all since you don't have to free memory
[18:59:43] <Xliff> Skarsnik: Are you using --moar-option="--debug" when you invoke Configuree.pl?
[18:59:52] <Xliff> s/eee/
[18:59:53] <Skarsnik> yes
[18:59:58] <Xliff> Huh.
[19:03:37] <Skarsnik> perl Configure.pl --gen-moar --moar-option='--optimize=0 --debug=3 -g' --gen-nqp --backends=moar --prefix=/home/skarsnik/raku/ && make && make install
[19:04:10] <ugexe> qorg11: there is nqp::fork() although unless you really know whats going on internally re threadpool, mutxes, etc you're going have a bad time
[19:13:11] <Xliff> Skarsnik: Try with just --debug
[19:14:01] <Skarsnik> I think that never rebuild moar actually
[19:14:28] <Xliff> Sounds about right.
[19:14:31] <Xliff> --force-rebuild
[19:14:58] <Xliff> ./Configure.pl --gen-moar --force-rebuild --moar-option="--debug" # Works for me.... ymv
[19:15:04] <Xliff> s/ymv/ymmv/
[19:21:23] <Skarsnik> aaah
[19:21:26] <Skarsnik> finall xD
[19:21:36] *** Joins: monkey_ (~user@190.104.116.153)
[19:24:47] <Skarsnik> https://gist.github.com/Skarsnik/611d0211fb95b94604a6277c430da149
[19:49:56] <nine> Skarsnik: What does `p *key` say?
[19:53:59] <Skarsnik> (gdb) p *key
[19:53:59] <Skarsnik> $1 = {common = {header = {sc_forward_u = {forwarder = 0x0, sc = {sc_idx = 0, idx = 0}, st = 0x0}, owner = 0,
[19:53:59] <Skarsnik>       flags1 = 0 '\000', flags2 = 0 '\000', size = 0}, st = 0x0}, body = {storage = {blob_32 = 0x0, blob_ascii = 0x0,
[19:53:59] <Skarsnik>       blob_8 = 0x0, strands = 0x0, any = 0x0}, storage_type = 0, num_strands = 0, num_graphs = 0,
[19:53:59] <Skarsnik>     cached_hash_code = 0}}
[19:54:00] <Skarsnik> (gdb)
[19:55:40] <Skarsnik> This code is annoying, it does not always merge everything :( (sometime it merge 1 struct and sometime 2}
[19:55:47] <Skarsnik> when it does not crash x)
[19:58:23] <nine> That's a lot of 0es for a string
[20:00:11] <Skarsnik> I think it try to use a deleted key (that why I need to test for ~~ Struct since I got Any when it's something I removed)
[20:02:07] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[20:06:22] <nine> That alone doesn't explain it. MoarVM is not allowed to segfault just because you're trying to access a deleted hash entry.
[20:08:23] <Skarsnik> I pushed the code on https://github.com/Skarsnik/gptrixie. I am using the  MQTTProperties.h from https://github.com/eclipse/paho.mqtt.c .Just run gptrixie like this for example gptrixie --structs --castxml=c99 tmp/paho.mqtt.c/src/MQTTProperties.h
[20:08:31] <Skarsnik> Time to do something else x)
[20:39:38] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Ping timeout: 256 seconds)
[21:00:47] *** Joins: Sgeo (~Sgeo@user/sgeo)
[21:02:07] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[21:32:41] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:33:53] *** Joins: monkey_ (~user@190.104.116.153)
[21:35:41] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:13:02] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[22:33:31] *** Joins: Ergo444 (~Ergo444@2E8B6AFC.catv.pool.telekom.hu)
[22:33:45] <Ergo444> m: say now;say ^1000000 .race.grep(*.is-prime) .elems;say now
[22:33:46] <camelia> rakudo-moar d6817f088: OUTPUT: «Instant:1638126262.303614874␤78498␤Instant:1638126263.255051417␤»
[22:34:04] <Ergo444> m: say now;say ^1000000  .grep(*.is-prime) .elems;say now
[22:34:05] <camelia> rakudo-moar d6817f088: OUTPUT: «Instant:1638126281.673599486␤78498␤Instant:1638126282.05227383␤»
[22:34:58] <Ergo444> m: $t= now;say ^1000000  .grep(*.is-prime) .elems;say now-$t
[22:34:58] <camelia> rakudo-moar d6817f088: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$t' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5$t= now;say ^1000000  .grep(*.is-prime) ␤»
[22:35:11] <Ergo444> m: my $t= now;say ^1000000  .grep(*.is-prime) .elems;say now-$t
[22:35:12] <camelia> rakudo-moar d6817f088: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    now used at line 1. Did you mean 'HOW', 'not'?␤␤»
[22:35:42] <Ergo444> m: my $t= now();say ^1000000  .grep(*.is-prime) .elems;say now()-$t
[22:35:42] <camelia> rakudo-moar d6817f088: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    now used at line 1. Did you mean 'not', 'HOW'?␤␤»
[22:36:27] <Ergo444> m: my $t= now.Int;say ^1000000  .grep(*.is-prime) .elems;say now.Int-$t
[22:36:27] <camelia> rakudo-moar d6817f088: OUTPUT: «78498␤0␤»
[22:36:46] <Ergo444> m: my $t= now.Num;say ^1000000  .grep(*.is-prime) .elems;say now.Num-$t
[22:36:47] <camelia> rakudo-moar d6817f088: OUTPUT: «78498␤0.3817102909088135␤»
[22:37:02] <Ergo444> m: my $t= now.Num;say ^1000000  .race .grep(*.is-prime) .elems;say now.Num-$t
[22:37:03] <camelia> rakudo-moar d6817f088: OUTPUT: «78498␤0.6764755249023438␤»
[22:38:05] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[22:47:05] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[22:47:36] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[22:52:04] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:00:15] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[23:10:54] <gfldex> m: say ^1000000  .race .grep(*.is-prime) .elems; say now - BEGIN now;
[23:10:55] <camelia> rakudo-moar d6817f088: OUTPUT: «78498␤0.893027857␤»
[23:11:12] <gfldex> Ergo444: ^^^ we got phasers for that
[23:53:52] *** Quits: Xliff_ (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net) (Ping timeout: 265 seconds)
[23:56:48] *** Joins: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com)
