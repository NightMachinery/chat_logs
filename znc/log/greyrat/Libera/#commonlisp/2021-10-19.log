[00:00:02] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:00:24] <White_Flame> well, the old ones really sucked because they used symbol plists as an application database, and did spaghetti mutation everywhere
[00:00:30] <lisp123> The one before was DIY, you got the primitives, go have fun. The ones after is like, why reinvent the wheel, use these useful tools. That's my two cents
[00:00:58] <White_Flame> I don't know when, say, hashtables came around compared to format/loop
[00:01:10] <jcowan> Format, howevs, comes straight from Fortran, and is a sore thumb even there.
[00:01:28] <CodeBitCookie[m]> White_Flame: I agree with this thought.
[00:02:04] <jcowan> There should be a bottom-up MOP+CLOS book that explains how a CLOS is done, analogous to phoe's condition book.
[00:03:01] <Bike> amop is kind of written like that... though it skips some of the efficiency details and isn't quite in line with the MOP "standard"
[00:03:58] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Client Quit)
[00:04:53] <lisp123> Perhaps SICL will be best for that. Otherwise beach should write a book on it :)
[00:05:01] * jcowan confesses to never having read amop except for the publicly available parts.
[00:06:03] <Bike> well, i haven't read the conditions book, so it's fine
[00:06:04] <lisp123> jcowan: You can also check out Sonja Keene's book and then the standards. Then look at Portable Common Loops
[00:08:17] <lisp123> https://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/lisp/oop/clos/pcl/0.html
[00:31:41] *** Quits: raeda (~raeda@72.49.219.33) (Remote host closed the connection)
[00:38:38] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[00:48:44] *** Joins: raeda (~raeda@72.49.219.33)
[00:50:01] *** Quits: raeda (~raeda@72.49.219.33) (Remote host closed the connection)
[00:50:21] *** Joins: raeda (~raeda@72.49.219.33)
[00:53:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:54:26] *** Joins: dra (~dra@2a04:4540:6409:4e00:cc08:6836:8a16:3bee)
[00:57:52] *** Quits: pve (~pve@188-67-203-167.bb.dnainternet.fi) (Quit: leaving)
[01:11:02] *** Joins: cjb (~cjb@user/cjb)
[01:12:33] *** Quits: dra (~dra@2a04:4540:6409:4e00:cc08:6836:8a16:3bee) (Quit: Leaving)
[01:14:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[01:16:13] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:16:25] *** Joins: lad (~lad@user/lad)
[01:20:58] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 258 seconds)
[01:35:55] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[01:45:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[01:45:33] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:46:34] *** Quits: lad (~lad@user/lad) (Ping timeout: 260 seconds)
[01:54:35] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[01:56:25] <_death> ah, one of those special days where I use PROG2
[01:56:50] *** Quits: gaqwas (~john@dynamic-077-009-020-130.77.9.pool.telefonica.de) (Ping timeout: 260 seconds)
[01:58:23] <_death> while debugging something, I wanted to TRACE a function, evaluate a form that calls it, and then UNTRACE it..
[01:59:21] *** Joins: igemnace (~ian@user/igemnace)
[02:01:46] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[02:03:05] *** Quits: frgo (~frgo@p200300deef0cee0045e9e5107b7b22f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:03:23] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 264 seconds)
[02:03:34] *** Joins: frgo (~frgo@p200300deef0cee0045e9e5107b7b22f3.dip0.t-ipconnect.de)
[02:03:44] *** Joins: paule32 (~paule32@user/paule32)
[02:07:55] <jcowan> _death: You could use unwind-protect, which would be safer.
[02:09:37] <_death> jcowan: unwind-protect is more like m-v-prog1
[02:11:34] <mfiano> prog2 is like prog1 ;)
[02:12:05] <jcowan> (u-p (progn (trace foo) (foo ...)) (untrace foo)), no?
[02:12:24] <jcowan> you can of course macrofy this to avoid the progn
[02:12:44] <_death> jcowan: sure.. but that's too much typing while debugging.. and I knew no error would be signaled
[02:13:38] <jcowan> (while-tracing foo (foo ...))
[02:13:41] <_death> instead I kept the flow and just (prog2 (trace foo) <the form> (untrace foo))
[02:14:01] <mfiano> perfect use for prog2, yes
[02:14:17] <jcowan> and put while-tracing in your init file
[02:14:32] <_death> it's not that often that I need it ;)
[02:15:04] <_death> the point was to brag about use of PROG2, not create tools for the future
[02:15:39] <jcowan> fair nuf
[02:17:26] <greyrat> Is Gnu CL basically dead? I think it can do C-ABI shared library exports?
[02:18:03] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[02:19:07] *** Quits: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net) (Ping timeout: 268 seconds)
[02:19:46] <jcowan> What is "dead"?  The last release was in 2014, but it is still being maintained.  Java weevils will tell you CL is dead, but there are plenty of other weevils who will tell you Java is dead.
[02:20:10] *** Joins: lad (~lad@user/lad)
[02:20:34] <jcowan> (They are known as the lesser of the two weevils.)
[02:24:48] *** Joins: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net)
[02:24:50] *** Quits: lad (~lad@user/lad) (Ping timeout: 260 seconds)
[02:30:50] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[02:31:54] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[02:34:32] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[02:34:32] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[02:35:24] <greyrat> jcowan: Any idea if GCL supports exporting shared libraries (`.so`, `.dylib`)?
[02:37:24] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[02:40:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:42:22] *** Quits: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) (Quit: k60)
[02:44:36] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[02:44:51] *** Quits: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) (Client Quit)
[02:45:30] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[02:50:02] *** Quits: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) (Ping timeout: 260 seconds)
[02:51:18] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[02:55:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[03:04:45] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 250 seconds)
[03:07:48] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:59a6:cb38:6d37:7205) (Remote host closed the connection)
[03:11:36] *** Joins: lad (~lad@user/lad)
[03:12:22] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:15:03] <yitzi> greyrat: Keep in mind that bordeaux-threads does not support GCL and that several platforms that used GCL to support Maxima now use SBCL or something else.
[03:17:09] <mfiano> GCL is not even a CL, yet
[03:19:07] <yitzi> I had heard that the maintainers don't want to be. Is that true?
[03:19:21] <pjb> Resources are scarse.
[03:23:08] <yitzi> Understand
[03:24:59] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 264 seconds)
[03:34:25] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[03:36:35] <kagevf> xaltsc: "clisp" is an implementation of Common Lisp - similar to SBCL, ABCL, ECL, and so on ; use "CL" to abbreviate "Common Lisp"
[03:38:44] *** Joins: Alfr (~Alfr@user/alfr)
[03:39:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:41:05] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[03:41:49] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:47:55] <lad> is there a way to hook into the eval function such that I can define my own special symbols?
[03:48:18] <Bike> special symbols how?
[03:50:51] <lad> I want these symbols to be able to self-evaluate: http://pastie.org/p/2HHTbH3yyf4oIqmamUs5rB
[03:51:11] <Bike> (defconstant do 'do)
[03:51:14] *** Quits: random-nick (~random-ni@87.116.178.206) (Ping timeout: 258 seconds)
[03:53:54] <yitzi> Or make them keywords
[03:53:55] <lad> I need to figure out how to get around Lthis ock on package COMMON-LISP violated when DO as a constant while in package COMMON-LISP-USER.
[03:54:23] <lad> that's why i think i need my own eval/apply / mini lang
[03:54:29] <Bike> that is a reader problem, not an eval problem
[03:54:41] <Bike> also, an easily fixed one. don't make work for yourself
[03:55:03] <yitzi> As I said, make them keywords.
[03:55:19] <Bike> DO is a part of the standard CL package, so you can't define it as a constant. You can define your own package that uses the CL package but shadows DO, and then SOLFEGE:DO can be defined however
[03:55:26] <Bike> or just make them keywords and save that work too
[03:55:37] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:04:43] <pjb> lad: you could shadow cl:do to use your-own:do instead.
[04:05:14] <lad> pjb, Bike the shadow seems to work, thx. I don't want to use keywords i think
[04:05:40] <pjb> (defpackage "LAD" (:use "CL") (:shadow "DO")) (in-package "LAD") (defconstant do 'do) (defmacro do (&rest stuff) `(cl:do ,@stuff))
[04:11:10] <lad> http://pastie.org/p/5OfiqsD6UDmqoxakurCNy0  <- line 12 has an issue, what is a good way around this?
[04:11:33] <lad> say i don't want to define constants, just bindings that I can use within a macro, for example
[04:12:30] <pjb> don't define a function, define a macro that expands to a let form.
[04:12:36] <pjb> Or to a set of defconstant…
[04:13:03] <pjb> lad: also, the semantics of your first form is not defined.
[04:14:29] <lad> pjb, would you mind elaborating a bit?
[04:15:29] <pjb> https://termbin.com/7sv6
[04:16:04] <pjb> Note: with let, they're not constant, so you can shadow them or rebind them: (with-solfege (setf do 42) (list do re mi)) #| --> (42 re mi) |#
[04:16:23] <pjb>  (with-solfege (let ((do re) (re mi) (mi fa)) (list do re mi))) #| --> (re mi fa) |#
[04:16:30] <pjb> which may or may not be wanted.
[04:17:22] <lad> pjb, i think those symbols should be able to be rebound since they are relative to a scale
[04:18:11] <lad> i just want to be able to reference them without quoting
[04:18:36] <pjb> If you want them globally, you can use symbol-macros.
[04:19:32] <pjb> https://termbin.com/rxpt
[04:20:19] <yitzi> lad: Why do you not want to do keywords? The deftype will just have `(member :do :di :re ...)`
[04:20:49] <lad> pjb, that's pretty slick. i'll explore that.
[04:21:28] <pjb> The advantage of symbol-macros is that they're lexical bindings, and you can shadow them in a let (let ((si 42)) (list la si do)) #| --> (la 42 do) |#
[04:21:37] <pjb> with defconstant you couldn't do that.
[04:22:34] <lad> yitzi, i don't want to use ":" everywhere. the solfege language doesn't use colons at all so I don't want them
[04:23:52] <yitzi> ok
[04:26:19] <lad> pjb, symbol-macros seems to be exactly what i need in this case. otherwise i'd have to do it via a macro-expanding-to-let form. very interesting, thank you
[04:48:21] *** Quits: lad (~lad@user/lad) (Quit: Leaving)
[04:57:23] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 264 seconds)
[04:59:08] *** Joins: johnjay (~pi@192.142.100.50)
[05:13:44] *** Joins: cjb94216 (~cjb@user/cjb)
[05:15:52] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[05:16:28] *** cjb94216 is now known as cjb
[05:36:14] *** Parts: akoana (~ah@user/akoana) ()
[05:47:35] *** Joins: prxq_ (~quassel@x4db43cf8.dyn.telefonica.de)
[05:47:47] *** Quits: prxq (~quassel@x4dbed57b.dyn.telefonica.de) (Ping timeout: 264 seconds)
[05:55:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[05:56:07] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[05:59:28] <zacque> Good morning #commonlisp =)
[06:17:59] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:30:17] <beach> Good morning everyone!
[06:30:26] <beach> Hello zacque.  Are you new here?  I don't recognize your nick.
[06:30:53] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Quit: Leaving)
[06:41:00] <zacque> beach: Hi beach, ah, yes, I'm entire new to IRC thing
[06:41:21] <zacque> beach: But I've been learning CL for the past few months, that's why I'm here =D
[06:41:23] <beach> I see.  Welcome to #commonlisp.
[06:41:49] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 258 seconds)
[06:48:34] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Read error: Connection reset by peer)
[06:48:59] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[06:54:55] <zacque> beach: Thanks a lot =D
[07:03:52] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[07:09:37] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[07:16:19] *** Quits: jhi (sid81469@id-81469.lymington.irccloud.com) (Ping timeout: 258 seconds)
[07:16:19] *** Quits: dbotton (sid492350@id-492350.lymington.irccloud.com) (Ping timeout: 258 seconds)
[07:17:30] <jeosol> Good morning all!
[07:17:38] <jeosol> morning beach, zacque
[07:28:05] *** Quits: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df) (Quit: ERC (IRC client for Emacs 27.1))
[07:29:34] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:30:33] <beach> Hello jeosol.
[07:31:32] *** Joins: jhi (sid81469@id-81469.lymington.irccloud.com)
[07:31:34] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[07:34:29] <jeosol> beach: i am ok
[07:35:41] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[07:35:51] <jeosol> beach: btw, I noticed you extracted some statistics about # of :before, :after modifiers for one of you codebase. I was going to ask how you extracted those numbers
[07:36:03] <jeosol> I think it came to around 1 per 1KLOC or something.
[07:36:20] <jeosol> did you a script or other utility
[07:38:36] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[07:43:05] *** Joins: semz (~none@user/semz)
[07:50:56] <zacque> Hi jeosol =)
[08:07:04] <beach> jeosol: Oh, I just did `git grep :before | wc -l' etc.
[08:07:57] <jeosol> beach: i was thinking it was some command line utility
[08:08:08] <jeosol> beach: thanks
[08:08:12] <beach> Sure.
[08:08:36] <jeosol> I am not sure if there are editors that can having such information
[08:08:37] <beach> It might not be totally accurate, but it gives the order of magnitude.
[08:08:59] <beach> Not that I know of.
[08:09:04] <jeosol> I remember the days of using C++, one of the microsoft VC++ editor has some introspection
[08:10:14] <jeosol> i still use just emacs + slime + paredit, serves me well
[08:11:10] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[08:14:06] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[08:19:26] *** Joins: karlosz (~karlosz@47.151.136.69)
[08:22:51] <beach> I use Emacs and SLIME, but I wish it served me better.
[08:24:02] *** Quits: cjb (~cjb@user/cjb) ()
[08:49:44] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[08:52:03] <beach> So binding a special variable using something like LET, as in (let ((*x* <form>)) ...) must be the same as (progv '(*x*) (list <form>) ...) right?
[08:52:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:52:33] <beach> If so, binding special variables using LET or similar is just some kind of syntactic sugar for PROGV.
[08:53:40] <White_Flame> hmm, as LET binds in parallel, and PROGV binds in order, not sure that's exactly possible
[08:54:09] <White_Flame> as far as the visibility goes when mixing lexicals & specials in a singular LET form
[08:54:43] <beach> PROGV doesn't "bind in order", does it?
[08:55:26] <beach> The VALUES argument is evaluated without binding the SYMBOLS.
[08:55:48] <beach> But yes, you can't mix lexical and special bindings with PROGV.
[08:55:50] <White_Flame> oh, PROGV evaluates its init values in order
[08:56:24] <beach> What do you mean by that?
[08:56:44] <White_Flame> just misreading the clhs
[08:57:37] <beach> I see.
[08:57:42] <White_Flame> I guess the init values are evaluated first, then the bindings are made, then forms are executed, though it's a bit hard to glean
[08:58:22] <beach> Yes, the SYMBOLS and VALUES arguments are evaluated
[09:11:48] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[09:14:26] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[09:27:38] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 260 seconds)
[09:32:19] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:37:54] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[09:39:29] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[09:39:43] *** Joins: aeth (~aeth@user/aeth)
[09:40:27] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Client Quit)
[09:46:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:47:03] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[09:47:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:51:48] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[09:52:43] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 258 seconds)
[09:56:57] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[09:57:10] *** Joins: amb007 (~a_bakic@208.14.23.93.rev.sfr.net)
[09:57:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:57:51] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[10:05:35] *** Joins: gaqwas (~john@dynamic-077-007-148-179.77.7.pool.telefonica.de)
[10:15:20] *** Quits: frgo (~frgo@p200300deef0cee0045e9e5107b7b22f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[10:25:41] *** Quits: amb007 (~a_bakic@208.14.23.93.rev.sfr.net) (Ping timeout: 258 seconds)
[10:26:42] *** Joins: amb007 (~a_bakic@5.36.22.93.rev.sfr.net)
[10:30:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:36:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[10:38:37] *** Quits: kagevf (~jfh@ip68-224-125-162.lv.lv.cox.net) (Ping timeout: 268 seconds)
[10:40:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[10:42:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[10:49:50] *** Quits: amb007 (~a_bakic@5.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[10:51:00] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[10:52:31] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[10:56:04] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[11:16:02] *** Joins: kagevf (~jfh@ip68-108-33-76.lv.lv.cox.net)
[11:27:52] *** Joins: lukego (sid312033@lymington.irccloud.com)
[11:28:57] <lukego> Hey anyone have an idea why static-vectors version 20210807-git - same version as in latest quicklisp - would be failing to build in a certain env with this error?  The function (COMMON-LISP:SETF STATIC-DISPATCH::COMBINATION-FUNCTION) is undefined.
[11:30:02] <lukego> seems weird especially since the error is preceded by this message: The function (COMMON-LISP:SETF STATIC-DISPATCH::COMBINATION-FUNCTION) is undefined.
[11:30:12] <lukego> er, this message: ; processing (DEFUN (SETF COMBINATION-FUNCTION) ...
[11:35:24] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:13] <jackdaniel> the word static seems to indicate, that the function may be expected at compilation time perhaps?
[11:38:37] <jackdaniel> i.e something tries to call it from the macro and the functio ndefinition is not wrapped in eval-when
[11:38:57] *** Joins: pve (~pve@37-136-125-1.rev.dnainternet.fi)
[11:39:06] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:23] <scymtym> lukego: is it really the combination of static-vectors and static-dispatch? i had those as completely separate in my mental model
[11:53:04] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[12:02:34] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:04:29] <lukego> jackdaniel: yeah that's how it reads to me too, but it seems weird because it builds fine in other similar environments, same code on another SBCL and Linux userspace of a similar vintage...
[12:05:02] <lukego> scymtym: oh, sorry, I see what you mean, no it's just static-dispatch and that's a typo/thinko
[12:05:47] <lukego> maybe it's a different in the way compile-time and load-time are staged in this environment...
[12:05:52] <scymtym> lukego: i see. i have no idea what the problem could be, though
[12:07:06] <jackdaniel> and on both environments you've tried with same initial conditions? i.e an empty cache
[12:07:58] <lukego> not really, I have a pretty loose understanding of how the environments are initialized in many ways, more moving parts than I can really account for. I'll try doing separate COMPILE-OP and LOAD-OP etc.
[12:09:59] <lukego> the new failing case is when I try to add my dependencies to the upstream packaging of Quicklisp in NixOS/nixpkgs. I used a similar setup before and there I did some specific tweaks e.g. forcing packages to be loaded during packaging to realize various initialization steps...
[12:10:15] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Read error: Connection reset by peer)
[12:10:26] <lukego> but that wasn't due to Lisp weirdness so much as Nix weirdness i.e. package directories being migrated to read-only storage after build and not being able to generate artifacts there
[12:10:39] <lukego> so this will be something else (but possibly related)
[12:11:43] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:58cd:7a73:282:b3d7)
[12:12:32] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:58cd:7a73:282:b3d7) (Remote host closed the connection)
[12:12:56] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:14:29] <lukego> The good thing is that in this framework I probably have an easy way to apply local patches to projects and can start fixing things without quasi-permanently forking them and having them go stale on me
[12:15:44] <jackdaniel> duct-tape heaven so to speak ,-)
[12:15:51] *** Quits: xaotuk (~xaotuk@89.110.231.41) (Quit: WeeChat 3.2)
[12:25:29] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[12:34:52] *** Quits: winning-luser (~winning-l@2601:8c1:181:1340::e50f) (Quit: zzz)
[12:36:37] <lukego> at least accumulating individual bits of duct-tape is at this point preferable to ~/quicklisp/local-projects/ being a completely ad-hoc and outdated mirror of half my dependencies :)
[12:36:49] <lukego> ... or maybe not, we shall see!
[12:37:29] <lukego> also this would be sharable because it turns out that other people are actively doing stuff with the Lisp packages in Nix land.
[12:37:45] <lukego> "a problem shared is a problem halved" or what is it they say
[12:51:47] <lukego> Is there a way to ask Quicklisp to only compile and not load?
[12:52:09] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[12:55:01] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Remote host closed the connection)
[12:56:01] <jackdaniel> yes and no :) you may create a bundle with quicklisp (then dependencies will be also downloaded) into the destination folder
[12:56:09] <jackdaniel> then you may call asdf's compilation operation
[12:56:32] <jackdaniel> that said "only compile" may be a bit misleading - in order to compile foo that depends on bar, you need to first load bar
[12:56:56] <jackdaniel> (i.e cl-jinx depends on alexandria and uses its function in macro expansions - i.e alexandria:parse-lambda-list)
[12:59:41] <lukego> filed a bug at https://github.com/alex-gutev/static-dispatch/issues/12
[13:00:13] <lukego> jackdaniel: thanks yeah that seems good enough for having a simple env to make bug reports from
[13:01:09] <jackdaniel> bundles are such a useful feature
[13:06:51] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[13:07:09] <lukego> what do you use that for?
[13:09:01] <jackdaniel> for source code distribution. instead of depending on quicklisp in CI you build a bundle artifact you may load with only asdf
[13:09:35] <jackdaniel> ideally it would be that you don't require even asdf :)
[13:09:40] <pve> can the bundle be loaded with LOAD?
[13:09:47] <pve> oh
[13:09:49] <jackdaniel> yes
[13:09:59] <jackdaniel> s/yes/no, asdf:load-system/
[13:10:22] <pve> right
[13:10:50] <jackdaniel> also when you keep all deps in vcs then bundles are easier to compare and manage
[13:11:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:13:39] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[13:14:15] <lukego> Sounds nice. Generally I'm always looking for moar import/export of well-defined passive data. Often this seems to be hiding behind operational APIs. For example Quicklisp releases are defined by text files listing the source for each package - and CLPM too as I understand it - but these seem to be treated mostly as internal implementation details while for me it's the primary artifact of interest
[13:16:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[13:16:19] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[13:16:21] <lukego> i.e. for me the really phenomenal thing about Quicklisp is that it defines a set of relatively up-to-date software versions that are known to actually work together. that's huge -- especially in that often the reason they work is that Xach has given authors a heads-up when they break. The fact that it also has a client to automatically install stuff is just a cherry on the top.
[13:20:11] <lukego> I suppose that in Nix terms what's needed - and is cobbled together in various out-of-tree packages - is something similar to Bundles but exporting only metadata e.g. the list of packages, the list of dependencies between packages, the list of systems provided by each package, etc. Maybe exporting that could be a Quicklisp (or CLPM or ...) feature one day to cut down on ad-hoc wheel reinventing.
[13:20:41] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Quit: Leaving)
[13:20:43] <lukego> and bonus points I'd say if git url and commit/tag were provided when known
[13:23:24] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[13:23:41] *** Joins: random-nick (~random-ni@87.116.178.206)
[13:25:25] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Client Quit)
[13:27:17] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:1c3e:7618:d62b:4ef2)
[13:28:41] <lukego> Sorry to spam, but here is my "duct-tape bliss" workaround to the static-vectors problem, quite satisfactory for the moment:
[13:28:52] <lukego>       postUnpack = ''
[13:28:52] <lukego>         sed -e '/^(in-package / a (eval-when (:compile-toplevel :load-toplevel :execute)' \
[13:28:52] <lukego>             -e '$a)' \
[13:28:52] <lukego>             -i $sourceRoot/src/combin.lisp
[13:28:52] <lukego>       '';
[13:29:25] <lukego> i.e. just wrap one whole strategically chosen file in a new (eval-when ...)
[13:30:35] <lukego> which is considerably less nasty when I add a comment linking to a proper bug report on github
[13:30:40] <jackdaniel> yuck
[13:31:18] <lukego> yum :-)
[13:31:53] <lukego> I guess you always have to find your own tribe. This packaging setup already has a few very similar hacks to this so likely it represents my people :)
[13:32:26] <lukego> in a perfect world I'd prefer something managed by Git but that seems like too much of a headache when you have hundreds of projects that each need to be forked separately
[13:33:29] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[13:33:56] <lukego> although now we come to the real yuck for me which is that it will take about 45 minutes to see if this works due to the serial nature of the package updating code
[13:33:57] <jackdaniel> - does it work? ; - well, kind of. first you need to apply these 2 patches to compile it, then this binary patch to fix a miscompiled magic number - easy peasy
[13:34:58] <jackdaniel> ah, and the host must feature libfoo 2.01 from 1999 (september release)
[13:35:27] <jackdaniel> ... with this patch
[13:36:19] <lukego> for me it's comforting to have one central file, in this case https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/lisp-modules/quicklisp-to-nix-overrides.nix, which declares all the obscure rules for installing a consistent set of working packages, including all their FFI dependencies and required patches due to bugs that need to be worked around and so on.
[13:36:51] <lukego> so yes, you do have all those obscure rules as you describe, but you don't have to remember them because they are collected and automatically applied.
[13:37:00] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:37:38] <jackdaniel> until you, what, change the package manager? ;) either way this seems to be only remotely related to lisp, sorry for interrupting
[13:37:44] *** Joins: amb007 (~a_bakic@21.36.22.93.rev.sfr.net)
[13:37:49] <lukego> and my BATNA here is to make a fork of static-dispatch, somehow redirect my builds to that instead of the Quicklisp default, and then feel guilty about not having any strategy for keeping that in sync with upstream
[13:38:56] <Nilby> At least 3 OSs that I use seem to be held together by a lot of such duct tape "bliss" when you look under the hood.
[13:40:12] <lukego> jackdaniel: I think it's a practical issue too, e.g. I don't get automatic updates of McCLIM on my machine, because I have an older version forked in ~/quicklisp/local-projects/, and I can't easily get rid of that because it contains a dirty hack that's needed to locate fonts on my machine that is too nasty to upstream
[13:40:42] <lukego> so it would be an upgrade for me if my "distro" would automatically pull the latest mcclim and just automatically remember to apply my patch to that, or complain if it doesn't apply cleanly anymore.
[13:41:31] <_death> maybe automatic updates are bad, with or without patches
[13:41:35] <jackdaniel> maybe the problem is the dirty hack that is too nasty to upstream? ,)
[13:43:14] *** Joins: tfb (~tfb@88.98.95.237)
[13:43:36] <Nilby> Not saying it's good, but even old Lisps you'd have to all apply-all-patches before getting a sane system.
[13:43:44] <jackdaniel> speaking of fonts, cl-dejavu is available on quicklisp, so if anyone has some free time, then making McCLIM depend on that would be great
[13:44:25] <jackdaniel> (instead of trying to locate fonts in god-knows-which-on-which-platform-where)
[13:44:36] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:45:09] <scymtym> lukego: do you know whether this https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/lisp-modules/quicklisp-to-nix-overrides.nix#L226 and the next one are nix-specific? i can't immediately see why they would be
[13:45:25] <lukego> jackdaniel: Sure, but fixing stuff often has to be asynchronous. Particularly on NixOS there is a genre of problem where a package has done things in a way that's not correct but that you can get away with on most distros - e.g. hard-coding a path into /usr/share/xxx and hoping that's where the data is - but that stuff all breaks once you get to NixOS. So it creates a burden on NixOS users to try and figure out the "right" way
[13:45:55] <jackdaniel> lukego: I'm not preaching you to change your ways, I'm just saying that this looks damn ugly from sidelines
[13:47:19] <lukego> I spent a whole bunch of energy trying to "fix" the expedient workarounds that Pharo Smalltalk does on NixOS and pretty much burned out on that to the point I don't want to even look at the environment again. I'm trying not to get into that situation with Lisp :)
[13:48:09] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[13:49:24] <lukego> I suppose there are different kinds of ugly. This is my preferred one. Central collection of nasty hacks that are applied automatically and systematically and can be shared with other users on that same basis.
[13:50:38] <lukego> Here's the mcclim code btw: https://github.com/McCLIM/McCLIM/blob/master/Extensions/fonts/fontconfig.lisp#L18-L34. I just did what everyone else apparently does, added my own directory to the list, but my directory is "/nix/store/70rrm133w22d68lmx7gy3pzdp2xmjfar-dejavu-fonts-2.37" and that doesn't seem like something that should go upstream.
[13:51:55] <lukego> So anyway if I successfully migrate from "random hacked forks in ~/quicklisp/local-projects/" to "random hacked patches in quicklisp-overrides.nix" then I'll at least be getting automatic updates again, both of the actual lisp packages and also crowdsourced expedient hacks from other nix users...
[13:53:16] <lukego> and on the plus side, I'm not spending at least a whole day on this hacks-curating, and it seems like at the end I'll be able to make a pull request to nixpkgs to share the fruits of it with some small number of other people. I do like the idea of collaborative package-wrangling instead of doing everything in $HOME/
[13:56:02] <lukego> scymtym: Good question. No idea, it would be nice to have comments on these. I guess at least 'git blame' should work.
[13:56:08] *** Quits: amb007 (~a_bakic@21.36.22.93.rev.sfr.net) (Ping timeout: 258 seconds)
[13:56:14] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:57:19] <scymtym> lukego: i see, thanks. does nix require build steps to produce bit-level deterministic results?
[13:57:35] <lukego> scymtym: This is the upstream Lisp tooling for Nix and I never really looked at it before this week, having used a downstream one called ql2nix for creating "bundles." I believe there is some asdf-level instrumentation going into the builds, something about caching, and possibly this causes problems that are specific to this environment and need such workarounds
[13:58:24] <scymtym> lukego: ok
[13:59:00] <lukego> Generally speaking Nix doesn't do bit-level determinism, though maybe that is a thing now as a more recent advancement. the Nix brand of determinism is just that it was built with the same commands from the same sources, applied recursively throughout all dependnecies including e.g. compiler and libc and so on. If the actual program is non-deterministic, e.g. writes a random number to a file, that's mostly ignored.
[13:59:23] <_death> the nix introduction says "An important consequence is that operations like upgrading or uninstalling an application cannot break other applications, since these operations never “destructively” update or delete files that are used by other packages." but this can only be true if programs don't interact (anyway)
[13:59:32] <lukego> I think that the CI might try building packages multiple times and checking for differences, but that would be more of a style-warning
[13:59:58] *** Quits: random-nick (~random-ni@87.116.178.206) (Ping timeout: 258 seconds)
[14:01:11] <scymtym> like reproducibility monitoring in Debian, i see
[14:01:20] <lukego> _death: I'd rate that as "mostly true." If program A depends on program B then it will be pinned to one specific version of B, identified by sha256 hash. If another program depends on B, or B is installed as stand-alone, then those will be separate copies (potentially shared if they are identical.)
[14:01:37] <scymtym> sorry, didn't mean to take the discussion further off-topic
[14:02:12] <_death> lukego: I guess you mean "depend on" in a narrow way
[14:02:54] <_death> lukego: when using a program, a user can feed it output from another program, for example
[14:03:16] <_death> lukego: or it can "shell out" to some other program
[14:03:21] <lukego> _death: I mean in the sense that it uses it to compile, or wants it in the $PATH at runtime, or in $LD_LIBRARY_PATH, etc. But not in the sense of e.g. both attached to the same X11 server and being copy-pasted between
[14:04:13] <jackdaniel> OK, I'm as guilty as anyone, but let's cease offtopic. unless it is lisp-related please move i.e to #lispcafe
[14:04:32] <_death> ok, sorry
[14:04:37] <jackdaniel> thank you
[14:05:38] *** Joins: heisig (~heisig@p200300cbcf2bc60096e45cc594e9a02c.dip0.t-ipconnect.de)
[14:05:49] <lukego> This is actually Lisp related. This is the way I'm managing my Lisp dependencies, including "shell out" executables like openssl and z3. I declare them as dependencies and Nix generates a line like "export PATH=/nix/store/abcd1234-z3/bin:..." so that the Lisp process always shells out to precisely the command that was declared as a dependency, including its patches and which compiler was used and what compiler arguments and so on.
[14:06:52] <jackdaniel> discussing inner workings of nix is not though; I sometimes eat when I code in common lisp but this doesn't render sandwitches ontopic
[14:07:05] <lukego> I have a vague fantasy of integrating this a bit more with Lisp, e.g. for Nix to be able to build a set of stand-alone executables and shared libraries that correspond with Quicklisp, so that the Quicklisp client could automatically fetch known-good working versions of all of those things. Julia ecosystem seems to have this and it works surprisingly well.
[14:07:21] <_death> I guess I brought it up because lukego's dejavu directory trouble
[14:07:27] *** Parts: lukego (sid312033@lymington.irccloud.com) ()
[14:10:36] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:19:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:19:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:19:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:22:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[14:22:56] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[14:24:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[14:25:56] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[14:27:20] *** Quits: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) (Client Quit)
[14:27:53] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[14:29:17] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[14:35:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[14:38:34] *** Quits: heisig (~heisig@p200300cbcf2bc60096e45cc594e9a02c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[14:42:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[15:11:54] *** Joins: heisig (~heisig@p200300cbcf2bc60096e45cc594e9a02c.dip0.t-ipconnect.de)
[15:17:25] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:21:59] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 264 seconds)
[15:26:24] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:31:10] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[15:32:18] *** Joins: amk (~amk@109.255.169.126)
[15:35:02] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[15:35:12] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[15:35:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:36:42] *** Joins: aeth (~aeth@user/aeth)
[15:37:24] *** Parts: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) ()
[15:43:28] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[15:44:22] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[15:45:59] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:1c3e:7618:d62b:4ef2) (Ping timeout: 264 seconds)
[15:49:23] *** Joins: Guest25 (~Guest25@c-76-107-75-167.hsd1.la.comcast.net)
[15:49:36] *** Parts: Guest25 (~Guest25@c-76-107-75-167.hsd1.la.comcast.net) ()
[15:51:00] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[15:54:14] *** Joins: Bike (~Glossina@71.69.170.70)
[15:54:14] *** ChanServ sets mode: +o Bike
[15:59:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[16:00:37] *** Bike is now known as and
[16:00:41] *** and is now known as Bike
[16:03:22] *** ChanServ sets mode: -o Bike
[16:05:49] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[16:06:14] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:10:14] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[16:11:58] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[16:13:01] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:13:56] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Read error: Connection reset by peer)
[16:14:45] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[16:16:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[16:24:25] *** Joins: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df)
[16:48:54] *** Parts: andreyorst (~andreyors@2.92.124.83) (WeeChat 3.2)
[16:51:33] <stacksmith> Good morning
[16:53:06] <beach> Hello stacksmith.
[16:56:31] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[17:12:40] <rotateq> hi stacksmith :)
[17:16:21] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:16:50] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:25:42] *** Joins: nature (~nature@45.32.235.173)
[17:27:41] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[17:31:57] *** Quits: heisig (~heisig@p200300cbcf2bc60096e45cc594e9a02c.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[17:50:59] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:1845:6993:369c:6011)
[17:53:32] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[17:54:05] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:55:55] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[17:58:19] *** Joins: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it)
[17:58:19] *** Quits: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it) (Excess Flood)
[17:58:19] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[17:58:29] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[17:59:24] *** Joins: rogersm (~rogersm@90.166.177.48)
[18:03:29] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Remote host closed the connection)
[18:06:07] *** Joins: aartaka (~aartaka@5.1.53.225)
[18:12:29] *** Joins: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it)
[18:12:30] *** Quits: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it) (Excess Flood)
[18:16:43] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[18:30:35] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 268 seconds)
[18:31:36] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:35:37] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[18:39:06] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:59:01] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[19:00:53] *** Quits: prxq_ (~quassel@x4db43cf8.dyn.telefonica.de) (Ping timeout: 258 seconds)
[19:03:52] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[19:06:30] *** Joins: Catie (~user@24.19.51.175)
[19:08:15] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Goodbye :D)
[19:17:51] *** Joins: igemnace (~ian@user/igemnace)
[19:18:27] <lisp123> Reading through Norvig & Pitman's Style Guide is such a treat
[19:18:28] <minion> lisp123, memo from beach: What I call "concrete data type" is anything data type where there is essentially only one reasonable implementation.  An abstract data type is defined entirely by the operations possible on its instance, without reference to its implementation.
[19:18:28] <minion> lisp123, memo from beach: s/anything/any/
[19:18:59] <lisp123> beach: Many thanks for that (thanks minion)
[19:19:39] <beach> minion: Thanks!
[19:19:39] <minion> np
[19:24:28] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[19:35:40] *** Joins: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc)
[19:45:46] *** Joins: kpoeck (~kpoeck@80.149.96.222)
[19:46:17] *** Joins: JeromeLon (~jerome@2a00:23c7:999f:3700:d02a:bd80:198a:4854)
[19:47:54] *** Joins: amk (~amk@109.255.169.126)
[19:49:54] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[19:55:33] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[19:59:00] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:59:45] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[20:02:41] *** Joins: cosimone (~user@93-47-230-89.ip115.fastwebnet.it)
[20:07:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:08:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:14:22] <kagevf> abstract : concrete .. sequence : list ...?
[20:16:53] <Bike> sequence is an abstract type, sure
[20:21:35] *** Joins: molson (~molson@2001-48F8-704A-CA1-0-0-75F-102F-static.midco.net)
[20:32:10] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 260 seconds)
[20:32:27] *** Joins: amb007 (~a_bakic@5.13.23.93.rev.sfr.net)
[20:38:57] *** Joins: knobo (~knobo@c092BBF51.dhcp.as2116.net)
[20:39:09] *** Quits: kpoeck (~kpoeck@80.149.96.222) (Quit: Client closed)
[20:44:42] <jmercouris> You know what
[20:44:45] <jmercouris> You are right
[20:44:51] <jmercouris> Sequence is an abstract type
[20:44:58] <jmercouris> I never thought of that
[20:56:27] *** Quits: knobo (~knobo@c092BBF51.dhcp.as2116.net) (Quit: Client closed)
[20:57:55] *** Quits: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc) (Ping timeout: 260 seconds)
[20:59:57] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:1845:6993:369c:6011) (Remote host closed the connection)
[21:04:50] *** Quits: amb007 (~a_bakic@5.13.23.93.rev.sfr.net) (Ping timeout: 260 seconds)
[21:06:02] *** Joins: amb007 (~a_bakic@51.198.204.77.rev.sfr.net)
[21:09:57] <jcowan> beach: I don't follow that definition of CDTs.  It looks to me like fixnum is a CDT on your account and so is float, but bignum is an ADT and so is string.
[21:10:10] <jcowan> Do you really mean that?
[21:12:36] *** Joins: knobo (~knobo@c092BBF51.dhcp.as2116.net)
[21:27:30] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[21:28:51] *** Quits: amb007 (~a_bakic@51.198.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[21:29:06] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:29:46] *** Joins: stack1 (~stack@ctrl-c.club)
[21:30:31] *** Quits: stack1 (~stack@ctrl-c.club) (Client Quit)
[21:31:45] *** Joins: random-nick (~random-ni@87.116.178.206)
[21:34:39] *** Quits: stacksmith (~stack@ctrl-c.club) (Quit: WeeChat 3.0.1)
[21:35:10] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[21:36:01] *** Joins: stacksmith (~stack@ctrl-c.club)
[21:42:44] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[21:42:59] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[21:48:23] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 264 seconds)
[21:59:47] *** Quits: cosimone (~user@93-47-230-89.ip115.fastwebnet.it) (Ping timeout: 264 seconds)
[22:04:49] *** Joins: cosimone (~user@93-47-230-89.ip115.fastwebnet.it)
[22:23:54] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:33:59] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[22:35:42] *** Joins: aeth (~aeth@user/aeth)
[22:41:06] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[22:41:58] *** Joins: aeth (~aeth@user/aeth)
[22:45:48] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[22:46:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[22:48:15] *** Joins: aeth (~aeth@user/aeth)
[22:50:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:50:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:51:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:51:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:52:53] *** Joins: Oddity (Oddity@user/oddity)
[23:03:07] <lisp123> Is it okay to use the same package for my tests as my main package?
[23:08:41] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:10:38] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:19:51] <stacksmith> lisp123: if it's just for your own use, anything goes
[23:22:31] *** Quits: nckx (~nckx@tobias.gr) (Quit: Updating my Guix System <https://guix.gnu.org>)
[23:23:29] *** Joins: nckx (~nckx@tobias.gr)
[23:25:36] *** Quits: knobo (~knobo@c092BBF51.dhcp.as2116.net) (Quit: Client closed)
[23:25:47] <lisp123> stacksmith: Thanks. An alternative I found is (do-symbols (s (find-package "my-package")) (shadowing-import (find-symbol (symbol-name s) "my-package")))
[23:26:08] <lisp123> (If anybody thinks thats a bad idea for importing all internal symbols, let me know)
[23:39:34] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[23:41:15] *** Joins: aeth (~aeth@user/aeth)
[23:41:42] <_death> you could have an implementation package that exports both symbols for external use and internally used symbols that you want to refer to in your tests.. then an external interface package can use it and export only the former symbols
[23:42:32] <lisp123> _death: Thank you!! That is genius (and solves a problem I was facing with a brute force shadowing-import)
[23:44:07] <White_Flame> personally, I think it's reasonable for tests to invasively use foo::bar to get at the internals of what it's testing
[23:44:34] <White_Flame> I'm not sure that's a widely held opinion, though
[23:45:36] <lisp123> White_Flame: Yeah, I have the same view. And I got tired of typing foo:: for every test
[23:45:37] <_death> I think it's ok (and not just for testing, as long as you've control of both ends), but may get a bit verbose
[23:54:01] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:59:06] *** Joins: peterhil (~peterhil@mobile-access-56734e-227.dhcp.inet.fi)
