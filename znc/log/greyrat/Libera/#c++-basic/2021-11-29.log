[00:04:12] *** Joins: true-false (~truexfals@62.1.59.181.dsl.dyn.forthnet.gr)
[00:04:19] <true-false> Heyo folks
[00:04:45] <true-false> I am doing a research, for a paper, and I need to find out what issues can be caused in c++ that can be avoided in c
[00:05:04] <true-false> I found out and read about object slicing, but I need some others to research and I need some ideas.
[00:07:18] *** Joins: truex-false (~truexfals@194.219.40.113.dsl.dyn.forthnet.gr)
[00:07:45] <Alipha> so... basically this is going to be a list of "C doesn't have this problem because C doesn't have a feature that C++ has"? heh.
[00:09:02] <Alipha> you might have better luck asking in the C channel, if you haven't already ( #c or ##c -- not sure which it is on this server), as they're probably more hostile towards c++ than we are :-)
[00:10:38] <Alipha> ... i suppose there's probably technically some issues in c++ (by a strict reading of the standard) that you don't have in c because of c++'s stricter lifetime rules. though are they really issues if all the compilers support the functionality anyway?
[00:10:57] *** Quits: true-false (~truexfals@62.1.59.181.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[00:11:01] <Alipha> e.g., i'm thinking of stuff like, in c++, malloc doesn't actually create objects
[00:12:07] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[00:12:41] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:13:31] *** Joins: seninha (~seninha@user/seninha)
[00:14:37] <seninha> hello,
[00:14:43] <seninha> I have a dummy question: 0x0.st/-7Rr.hpp
[00:15:49] <seninha> tl;dr: what is the better way to return two fields (that I'm currently implementing as a 2-sized array): pointer to array? two getter functions? return a std::pair?
[00:16:38] *** magla is now known as geli
[00:22:56] *** Joins: RazielZ (~Raziel@user/raziel)
[00:23:13] *** Quits: navidr (uid112413@id-112413.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:26:14] *** Quits: geli (~gelignite@55d4f645.access.ecotel.net) (Quit: Stay safe!)
[00:26:20] <truex-false> Alipha, sorry my router lost ip
[00:26:28] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 268 seconds)
[00:27:02] <truex-false> Alipha, no, it is more like "What problems does C have that c++ does not, and what problems does c++ have that c does not?"
[00:27:41] <truex-false> So far, as a disadvantage for c, where c++ fixes, is the fact that in c you have to always define the memory allocation, while in c++ you do not, althrough it is a posssibility
[00:28:07] <truex-false> Or to put it in better words, to correct my statement, c depends a lot on the allocation of memory by the user
[00:28:13] <truex-false> c++ does not
[00:28:57] <truex-false> if you forget to allocate.. you can mess up stuff, like alloc/dealloc. C++ evades it by using constructors.
[00:30:26] <Alipha> i think you could look at pretty much any feature that c++ added and turn that into something that c++ fixes because of some c disadvantage
[00:30:32] <truex-false> I am trying to discuss Bjarn's infamous statement, and cite weaknesses in both programming languages, while considering that statement, and then giving a response on each part and my opinion. So, I definitely have to explore secure coding in both c and c++, and also, issues in both language that can screw you up if ignored.
[00:31:28] <truex-false> I could learn into c++ is better (althrough my personal preference is c) for many applications ;) but meh
[00:31:31] <truex-false> lean*
[00:31:50] *** truex-false is now known as true-false
[00:32:29] <true-false> I am also thinking about object slicing, which is a reverse weakness, ie, you HAVE to use a pointer in that case
[00:32:36] <Alipha> as far as why people program in c instead of c++, typically you hear: c++ is too complicated. c++ is bloated. c++ is slower (not necessarily true).
[00:32:45] <true-false> which specifically affects c++
[00:33:31] <true-false> So I am taking into account that both languages deal with pointers and it is necessary to be careful
[00:34:26] <true-false> But then, what can you do in c++ that can seriously screw you up, but if you do it in c it won't?
[00:34:44] <true-false> I am trying to find that weakness, yet I find much more many weaknesses in C
[00:34:46] <Alipha> your object slicing example is weird to me because you're complaining about a feature that doesn't exist in c. that's like saying "walking is better than driving because you don't have to worry about oil changes"
[00:35:06] <true-false> I am not comparing it to c, I give it as the example of a weakness
[00:38:20] <Alipha> well, the biggest issue that c++ programmers run into is lifetime issues--accessing objects after they have been destroyed. which that problem exists in c, but it seems to be a larger problem in c++ with automatic cleanup (destructors), heavy use of dynamically-growing containers, and reference lifetime extension
[00:40:01] <true-false> So we could say improper use of destroyers and constructors can be considered?
[00:46:30] *** Joins: louipc (~louipc@archlinux/fellow/louipc)
[00:46:36] <louipc> true-false: yeaaa
[00:46:44] <true-false> ah you found me! 
[00:46:56] <louipc> so did they tell you that c++ is safer than c like i suspected?
[00:47:07] <true-false> hummmm
[00:47:18] <Alipha> c++ is safer than c ;-)
[00:47:32] <louipc> that was my vague understanding
[00:47:33] <Alipha> it's also easier and faster to program in
[00:47:38] <true-false> Alipha, yup and when I get over with my project, I will finish with c and begin c++
[00:47:45] <true-false> I just need to finish this stupid paper
[00:47:52] <louipc> but probably good to know both
[00:48:08] <true-false> well, I have experience in c# and java and a little of c
[00:48:25] <true-false> object-oriented languages always give you an advantage I think learning c++
[00:48:45] <true-false> cause you already are familiar with inheritance, constructors, etc.
[00:49:00] <true-false> I think I found another weakness in C. It is procedural
[00:49:23] <true-false> procedural means, you have to do things in order. it is a very basic screwup which can lead to integers not being read
[00:49:42] <louipc> i think it depends what youre doing
[00:50:04] <louipc> sometimes objects are handy, other times burdensome
[00:50:17] <true-false> I don't know, but in all object-oriented languages I have been into, it does not matter where you define x = whatever
[00:50:21] <true-false> as long as it is public
[00:50:45] <true-false> louipc, good point. 
[00:51:09] <true-false> and you can screw up objects easily, do wrong inheritances, use constructors/destructors improperly
[00:51:30] <louipc> yea and inheritance tree can become stupid complex
[00:51:40] <louipc> fkin java
[00:52:05] <true-false> I do not know, the basic weaknesses in both seem to come from their nature
[00:52:07] <louipc> iduno i really only used java for OOP
[00:52:16] <true-false> procedural vs object-oriented
[00:52:33] <true-false> then, c's weaknesses comes from the question "What c++ has fixed?"
[00:53:11] <true-false> then, c++'s weaknesses come, from "What can seriously screw you up if ignored?"
[00:55:12] <true-false> OH new stuff!!
[00:55:17] <true-false> Garbage pickup on code
[00:55:23] <true-false> c++ does not natively support this
[00:56:17] <Alipha> neither does c?
[00:57:09] <true-false> nope
[00:57:13] <true-false> so I will write it for both
[01:01:59] <louipc> did you try to search online why is c++ better
[01:06:15] <true-false> I am yes
[01:06:21] <true-false> it states things it corrected
[01:06:30] <true-false> however, I am trying to find the answer to one big question
[01:06:58] <true-false> Why while C++ being more secure and stable, it screws you up more if you do an error?
[01:07:24] <true-false> Hence the part "While C++ makes it harder to shot you through the foot, it blows away all your leg"
[01:08:03] <louipc> i dont really see the point of this question
[01:08:19] <louipc> if you like the advantages it provides then use it
[01:08:47] <louipc> if its more secure and stable, and those claims are valid then it should mitigate any 'screwing up'
[01:09:56] <true-false> correct
[01:10:04] <true-false> let me think...
[01:11:32] <louipc> but yea if you have doubts then try some tasks in both
[01:11:50] <louipc> and make your decision then
[01:12:10] <louipc> you'll never really know unless you try it first hand
[01:12:22] <louipc> the rest is hearsay
[01:14:40] <true-false> right
[01:14:50] <true-false> and I have to source them anyways in discussion
[01:25:11] <Alipha> Because of templates, error messages in c++ are hell to figure out what they mean
[01:35:21] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:48:03] <true-false> Hmm right
[01:48:06] <true-false> I could use it
[02:02:42] *** Joins: markong (~kvirc@213.146.188.203)
[02:12:00] *** Quits: Inline (~Inline@aftr-37-201-240-2.unity-media.net) (Remote host closed the connection)
[02:15:17] <cbreak> templates aren't that bad, if you like haystacks, needles, but hate magnets
[02:31:11] *** Quits: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi) (Ping timeout: 245 seconds)
[02:46:48] *** Quits: bobb_ (~bobb_@dslb-092-074-251-151.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:51:26] *** Joins: Firecatmon (~firecatmo@45.125.247.94)
[02:52:35] <seninha> Hello, I have two classes A and B. A has a private member `B array[2];`, an array of two objects of class B.
[02:52:41] <seninha> How can I access those members from an object A using getter functions?
[02:53:58] <Alipha> seninha: one option would be: `B* get_Bs() { return array; }`
[02:55:27] <seninha> hmm, I was getting an error
[02:55:34] <seninha> but it was because the getter function was const
[02:56:07] <seninha> Using this option I'd be able to modify the array elements, wouldn't I?
[03:11:54] <Alipha> seninha: const B* get_Bs() const { return array; }   // if you want the elements read-only
[03:31:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:51:00] *** Quits: argonautx (~argonautx@i5E867391.versanet.de) (Quit: Leaving)
[04:01:32] *** Quits: true-false (~truexfals@194.219.40.113.dsl.dyn.forthnet.gr) (Quit: Leaving)
[04:29:20] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[04:41:47] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:41:47] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:42:09] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:42:09] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:42:31] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:42:32] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:42:53] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:42:54] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:43:16] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:43:17] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:43:17] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (K-Lined)
[04:45:21] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 245 seconds)
[04:45:48] *** Quits: shailangsa (~shailangs@host86-186-136-24.range86-186.btcentralplus.com) (Ping timeout: 260 seconds)
[04:46:32] *** Joins: markong (~kvirc@213.146.188.203)
[04:50:12] *** Joins: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com)
[04:57:10] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 268 seconds)
[04:59:39] *** Quits: Firecatmon (~firecatmo@45.125.247.94) (Remote host closed the connection)
[05:25:29] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[05:26:01] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[05:46:11] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[05:53:26] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[05:55:15] *** Joins: ferdna (~ferdna@user/ferdna)
[06:40:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:00:59] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:50:17] *** Joins: geistes (~geistes@2600:100c:b031:4516:5b85:9d3f:e3b1:e648)
[07:51:02] <geistes> Hi guys, I'm working on a program that seemingly has no syntax errors and compiles fine. However, I am getting a segmentation fault when I run the compiled binary
[07:51:12] <geistes> I'd really appreciate some help with this, as I'm stumped
[07:52:58] <geistes> Here's the code https://gcc.godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAMzwBtMA7AQwFtMQByARg9KtQYEAysib0QXACx8BBAKoBnTAAUAHpwAMvAFYTStJg1DIApACYAQuYukl9ZATwDKjdAGFUtAK4sGEgKykrgAyeAyYAHI%2BAEaYxCDSAA6oCoRODB7evgGkyamOAqHhUSyx8dJ2mA7pQgRMxASZPn5cgZXVArX1BEWRMXEJtnUNTdmtQ929JWUJAJS2qF7EyOwc5gDMYcjeWADU5paoqADWtSSYAHQIByYaAIIbWzuY%2B%2BtuAG5VRMQm69i3DzMmwY2y8e1%2BbicCgIxEwrF%2B/3ujxBz1ebgU0Nh8L%2BAORoPBbyomLhLARuKBTzBL
[07:52:58] <geistes> whmLCwDJ9y8qSMu2YbAUiSYK120PQvysSPuRJhJN2YQAYnRMPyAQB6WXCrEsXaLAiS%2BgywV3MIEXYsJhhCCzfYAdgFDw0AE5aSzokdjgB9Wh4aEmfwWSRugAimotlolUouqESjAgBztJy9TDqFwIqgIB1IYpSIBAqtmvtu/oY6upbwh%2BzMZn8brcjWs1mUxFQwGIrDpIF24uryqrqGi9GVd2YtAAnqkFLsiLs27XWLsvZhUsAGKWCP4ALRcE0L/zFswADi4C/Wc7uFjcc7MGhPc7XF38GiPV/8Za4pYYAFkxHhjkmvRchBc5%2BKvAAvP9ewnF1kFhAgXlqYgvAcJYpzndYFxNS0NA3Jd1nWRdPVvAhlAQfs8FEBcADU4gMelsOPU9sI3S0Liou8bzLMwH2fZ03wnJhPgYLAfmwx8S
[07:52:58] <geistes> CwBQBCTAApVAEFnbDfwAoDnwIBBMH1RxkDFBhdkfTB8GQMJpWwhCkJQtDi0QudcPwwiSOIMjr3oggaLoxiCC4RiGF3PiBKnYTdjEiS51Y193041w4jnNwFKMJMhAQPAEAXMKvCMOcAAl6mIICfLUwx0F2AAVBT1KYYACLwQw5w0BcgUtCr1gANgwhdHMfZA7gaBAll2O4LgnTB3h03YLHtBQ5y4S1RuG2jLRLbDnIfNyywAcSOKgk0W1AqF7UzvCIJNlEwcDeLLJK4XQJNn2IY45y9Xs2QI3YAElBDiAB1TBohHasxxYFg6SPMwF1Gtdt0kfwEPvbD5oiPbxstDd4Imy0jymu8DjRAtXFoTNBWzXMLm2FJMCNTHscDYNQ3De0oxjOMEyLJMoVTVTdgzdZzVxK1%2BGIXYIB1MVXi9XYrxZ
[07:53:05] <geistes> 3mCxLIW8ArSxjRMM02YRq1gD251wm5nMpSTCNHWdV13XF/wvSTMA1lvBhDeZ1mrSzbSGAuPAZ3OCANANo23BNjgzdl6WfS1LNPgcEg0Q1nLexDBFdg1oaWbZv0Oa5nm8D5gX%2BWFt5dlFiwxQliwpZlrGs0D4OXg1iANadF0Ex1713dzq1w4uRImQQB1oi5Y5i/tKu/U9qOsxjtuTiDkNCxqjXdkbcPs/NuXLTQLxdQhAsNaTj2rRnuf8xTg4BpORsbkjrGwKWNTBfTrv7jd/ROH8Xg/A4LRSFQThD0saweUWZZqSBHhSAITQ3fmY4QCXgvhwSQ19f7304LwBQIBHY/1vufOAsAkBoCwLgQgJByCUBoPQNkqwv78EECIMQ7ApAyEEIoFQ6h4GkF0GYfQhhjCZ1sJgewBQ/AQFcKMPwgQQ
[07:53:09] <louipc> stop
[07:53:10] <geistes> g6WmAMMwwNcgpDSAILhgDhH5HSFMfo8RBFtBYV8GowxGieGaBI9obCugNBkaUARQjoTdHEW0FRuiZjyPmEJJYKxOB4lRBCX23wGSAmBPiPMkIUgimxIiFxlICTomJN48krj7GEkCaSHESIKQoipGiG09JIm%2BJif45030CARx8UyOkrJWBTk5NyXkmM7jbCYBiMO9oB7Uhzn6RIxA8DvGjOwZe1oYTZMcAQDUe9O5WnibsJgs8EAkCGu6LC/NfhjJlkWRMhZmK0xmdMm4UyTQ%2Bi6VmLMvT64dhdApH4qyLY9NaSyO6QgLARCJusw5wBdgKwYLCc5K8BDQl2MgBA9RdhYFSYQOICdDZzl%2BXs7p2ZdS9jhLsyePdaCoGjLsWpBFpR7KnnHBgZxkAXQRVmHmbAGBeDCqgOFRS1lWkcSQ
[07:53:15] <geistes> GklzQ5hH4AAeVnvXBMALCWWneHi7K8SconEYHgP8cQIDxOaQytADAnnmBqqpfgpA%2BX7Ono83ULy3kfLwGk8V1cp4%2By%2BP7AsvTQ7CpVDS2eDpfYd2aUyvA2UhCJGdAQB6/AeWXPKScB0FLUCGslTzdp9AhCgpeTaupLI3VwXdN6OmggYVBt1GQHktrcHOsRcG/UYRcVwpVgQZ1gLjXZXwByAwvYcqEHoITdFRLmU8j2jmjpBNo0%2ByLWgFgnJYSlrzSmhlab3kunNUwXsKLW4VsLSa4twgiCovzeCnt2UvCJHQI0ztQ7mk8wUIMgA7lOxtkrm0Zrbb2ZQXgtlzu5d2xlRalA4S3VrHZ07vYrqLWurNdwBlDLPamg9e0b3yTvcuqeq7W1ZuOac%2B9TbH2WpOREX9yqP2ZvbVWRNe
[07:53:20] <geistes> 7m2HogysYDD7e1XvbQATVBcB99/7UP1Hg3%2BxDn723zUYLCdDlbe2HsI7c8tBLJVUDqa4FU4TtWkzrE49ebgICeKVExhQSYBVPPzoPYVGsJ4Al2GJ8TEnxMH2IGpFIvpJMSdPhaGpx6CIgCNUWuNT5GBeBIzXCpBdvXZI1lap1pph1TzNRa0zfdjimbNqaL2gKBMEx5iC%2BoInlXrJLbmqjBap6HqXfcgLe1N3btPXu7zBBn2DOIAoPTIWAM/siz00LdS4MVuWWsrLAKeYudTH6j19QvW9L9cMqwetQ0htUmGpMvSo3mdlngKgXNEio3WPzYgnnAWYswABVACcIBtZfl12UzF/PNa5mVt0Fg2D9e9HzcZOS2AZi81aaTak5t/lQMFybEBpvui2ztvWrxsDLcwKtwFWYNtDl80V5YCB9u
[07:53:25] <geistes> %2BZ49Vo7S4kxRt2y1p7ZbytHYWwWT7a3LQ3cK56x7ZWkz/csFwJM4bPvoqy/vPah9dhLkzEj5Tzb8sgCQ9m3zRpGtY1Xu1twMz63sBmaT27Zal6Y4BNjgzIZUyHop4T6Wk8Sfzw3kWbAj1ObyULvaQ2g4/U7ymQiq2p3Q5%2Brp05uUspGf9wLqmattbMBs%2B6wzotOO8dLqJ36LnbGZmdvF2YanYRO3U5RmgRIeA4IS5PvT%2B4SvjiVJZ3tfXHPZZG8PDzswfP9pDnyqwRYwa1rPODPbwcYQI2oFRWbomUuyR/FUp2uXUdXfu5AGOid4EvfVMtqqa3vP%2BfB5eLnxp2VQ8JV1BH230e%2BkNLoEwDsLwY7yRdHagB8zJex5T2dy3A60VO/l/cPLTP2AgDnagRdw/2eF/WyjmTafh8
[07:53:30] <geistes> Z61FnlXuP8MbtUzu4gC/OfF%2B52Tg4YWT2aTDkBFGJ%2BYV752evrHOvJ8e6PeF3dBui%2BzxLwHsvgvu8i537v7xC96c7944ip6bIX5gqOaZ7P7K7M7b5ga9jfpAZa4PLf634HAQCoFm7U6oE/4ZiO6wEb7wFu5b6HqoGH4%2B7H7G4HCB7fL/4ayAG4GgE%2B7gH/Cp6oGP7a69q6476wblqf4YFrx%2B6n5FgAAkN%2BxusKKwPBLuZB2eMG6WQh3uxOtBYhMyDBAu%2BUshLwEeTB9oiefeakA%2BMKKh8hdwm%2BiBeOWGB%2B6BUqmBdBRYdheBt%2B7mMBSmvB2UOOh6dh1B6hThmh9Bf%2B%2BUHhKoLWUBBE0Y6QxhYBphEBZ2Hhlh1hU%2BeOFGxGDhvuBYBwGRlO0hmhNy
[07:53:37] <geistes> dyQsXhChfBL%2B0%2Be0eRARhuGhORpeQehhJwgBRR%2BRju7BCRnBZ2rRKRihW%2BWmGk2KNRWY6AA2ahgKCg/Y4ELAYYRY2woKBwe62R/uL0tA1aLww4AASvHscIAVvMcLsGcHckWNTujMFsseIWYGynqEwMcC8EwMWqwukEmAQAXGKOkpHsQLCByAIPgCyNinopzFlOYVOIOIbNob8icbfmcf5hcTMlwI2BBsGg8VrHXi1uHAUWjNxBjLCXUf7mYIiT6rqCiWXBEd3oOMCQQQCWUENFCcbjCRZnCQcOsI2NcUoC8JNg8SPF3mEAuNCDsZiSnAyc0kyUWJIKyQNpXuBOXqyLImSQ3lOGSVyfaIKWTsKcqqKcWBKeYTzMqc0RwIOHnkwKqbsOqYCpqZaI2NgKoIQDKbUjWHWKSHSZoWaf
[07:53:42] <geistes> yniZcVqu0cqlijioMnCgnJ3goAuAiFpgmnBj6WGRdsFrKAAFQKDzqEBeoRl%2BkrAOH8qlIvAIkSrTwZm7AEnZmiBKC7AskFm5nimllFn%2BDqbA6FkvCWnZlYBUD9K0A/yOa7AxmyginukzJVigm7Dgn86Gy7Cyj9kcCbHL6uxDgDag4Db/5aZ6g6bfjOlYnoA4mMlhA2x2yZHnEbkKwEAkbLK7DzrRT0BczJl4rchgBgBLaWgOalHajBo46hkpmuaCBZEcGhznn4oIrHlShcxXlWxpkrwbnzHYZLEbm2wMD2wAlxAESlxpIRzoheIsCpBcoIipj6iqBGhOwPimznHdkHB5T6EMB9i7ANLOjZQvIXmKn1CZmrh9LcS7C0QXBdTKD0C5kwhASFQGh%2BBsEakfmp5flyElHO6Wi/mnkQBC
[07:53:47] <geistes> XuK7BcCmiHgmhk5SWnZMVAWOGiH1FXH5QCCkXkW9pUVwoUmwgyX0XAnMWsXsVFmcV9LAA8VxEikCVnZSVJwkF%2BjiUvCSU6aRnKX%2BBDzapKUFi3nCFTyalEUqgkVAS6WUUvmGV0U%2BWmUsXmVwiWVpTWW2V8XmkOULnYqRnOWlEg4TlZW%2BnUW9HlEIFT6srsoMCcrcq8oanSpDyiqoBKrmn1WyqczyqKpGpqqcwaq2qekiqqi0r6pVAOHxLhI8gOjhIqz8DRq9JfJgrdxWhuVcx7lKwEwKCTXIV0z7RJgdWECzCqWDV6q%2Bx1wNxNwtzcz7SZby7O5WF9GIFWaEA2a9IlyOoOGBnBl/AVV3FVVcoH6vUMBirvIsIKrzVBpUq6rJrUb%2BjfaOrUoEC0oXCoWqEdZLYmiqV%2BoJ
[07:53:52] <geistes> xw2Q0zZgwrIWYEFLbY0I2zwzbMR6zBZRH75Y2A2oDw20ozZuT43NLhFLb8l4DTV0040jKVyU0qEJz8lUCc302k3uhTReh7pD47EC1EAc3E0M3ug1S82I5j5%2BgsJFl7by2zxI3VXs6o0da7AbiqX9IvpxYzY3hjIG1a3lwWB43BaY1E200i023k3M3KqE1W1O3c0WBM2U337fKO0Q0k022jLBas0G3s3C3e3i17p6Ey1rRR3B0zZK16yS3IrD7x1y1e1J3ugmjK3gq3VZjq0cmw3Z2I3I160rL8yBXjEMom2xblYW001B0K223ejBb11DK40A6e0t2i0WCu322%2BbN1c050%2B3t3%2BYe38zW0zah3%2BZU07Ij3O0zbi1h2gqZ2J2t0p0S183%2Bls1EBC0z25350zrp3S3714qb39
[07:53:58] <geistes> 2wyp3nKF1WjF1BVZid1m3uhN2B2j2t123%2BYv3lZ41L3e2D0/23qv0D093T1l392%2B3%2BYO292f391z0E2AYANj2r3z3%2B09VwPL2K0T0Wbh38yR1H0WB5233z380X2H2QM203070TZn2oob1EMIykMF0TJejny0CXxgLUIPwcBPxWCWCvzWIfzrBmC8BwJaAHWkAAJAKcMgLcN3y8NQIwLfy/xSNyNiOkA3yKOQKqPwJSOfBxaxGSBAA
[07:54:01] <geistes> sorry: https://gcc.godbolt.org/z/P7xGxq4E4
[07:54:05] <geistes> I pasted the long link on accident.
[07:54:42] <geistes> What I'm trying to do is load information from a text file, which is then parsed and then used to create objects. 
[08:13:09] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[08:22:30] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 265 seconds)
[08:26:16] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[08:37:54] <Alipha> geistes: what's the problem?
[08:41:07] <Alipha> I mean, your operator<< doesn't do anything--all it has is `return os;`--so nothing is going to get displayed when you do `cout << book;`
[08:44:22] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[08:44:22] *** internalsplit_of is now known as givemeyourpies
[08:44:22] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[08:44:44] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[08:50:18] *** Joins: seninha (~seninha@user/seninha)
[09:21:32] *** Quits: geistes (~geistes@2600:100c:b031:4516:5b85:9d3f:e3b1:e648) (Ping timeout: 240 seconds)
[09:22:32] *** Joins: geistes (~geistes@2600:100c:b031:4516:5b85:9d3f:e3b1:e648)
[09:25:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:32:02] *** Quits: sonic (~sonic@user/sonic) (*.net *.split)
[09:32:03] *** Quits: undeclared (nullx@user/undeclared) (*.net *.split)
[09:32:03] *** Quits: nolyc (~nolyc@tinodidriksen.com) (*.net *.split)
[09:32:35] *** Joins: sonic (~sonic@c-76-108-224-224.hsd1.fl.comcast.net)
[09:32:56] *** Quits: sonic (~sonic@c-76-108-224-224.hsd1.fl.comcast.net) (Signing in (sonic))
[09:32:56] *** Joins: sonic (~sonic@user/sonic)
[09:33:01] *** Joins: undeclared (nullx@user/undeclared)
[09:33:32] *** Joins: nolyc (~nolyc@tinodidriksen.com)
[09:42:01] *** Quits: geistes (~geistes@2600:100c:b031:4516:5b85:9d3f:e3b1:e648) (Ping timeout: 245 seconds)
[09:50:44] *** Joins: geistes (~geistes@2603-8080-f000-e5bc-0000-0000-0000-0136.res6.spectrum.com)
[10:29:15] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:29:28] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:30:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:34:47] *** Quits: indy (~indy@dsl-static-104.213-160-167.telecom.sk) (Ping timeout: 250 seconds)
[10:44:56] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[10:51:58] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[10:52:24] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[11:09:51] *** Joins: AmR (~AmREiSa@156.199.223.24)
[11:11:51] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Read error: Connection reset by peer)
[11:15:54] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[11:20:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:25:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[11:42:20] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[11:46:14] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[11:53:14] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[12:01:05] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[12:12:18] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:24:18] *** RazielZ is now known as Raziel
[12:41:44] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[12:41:47] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[13:07:36] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:15:36] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:24:09] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:25:05] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[13:43:55] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 265 seconds)
[13:50:25] *** Joins: meicceli (meicceli@kapsi.fi)
[14:00:59] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 252 seconds)
[14:06:34] *** Joins: meicceli (meicceli@kapsi.fi)
[14:14:58] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[14:23:56] *** Joins: gehn (~gehn@user/gehn)
[14:29:21] *** Joins: Colt (~Colt@user/colt)
[14:47:50] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:49:12] *** Joins: markong (~kvirc@213.146.188.203)
[14:51:38] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[15:29:08] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[15:32:01] *** Joins: CalamityBlue (~CalamityB@cpe-108-185-144-94.socal.res.rr.com)
[15:34:52] *** Joins: seninha (~seninha@user/seninha)
[15:34:53] *** Quits: CalamityToo (~CalamityB@cpe-108-185-144-94.socal.res.rr.com) (Ping timeout: 250 seconds)
[16:38:42] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:52:52] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Ping timeout: 256 seconds)
[16:59:34] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[17:00:27] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[17:02:45] *** Joins: kylese (~kylese@p5dd8b8e5.dip0.t-ipconnect.de)
[17:26:28] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[17:29:58] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[17:30:47] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[17:38:40] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[17:49:28] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 264 seconds)
[17:51:00] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[18:10:28] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[18:32:12] *** night_wulfe_ is now known as night_wulfe
[18:46:40] *** Joins: indy (~indy@dsl-static-104.213-160-167.telecom.sk)
[18:47:49] *** Quits: dld (~dld@98.217.187.57) (Ping timeout: 268 seconds)
[18:51:10] *** Joins: meator (~meator@user/meator)
[19:01:17] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[19:09:52] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[19:22:59] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[20:30:04] <noarb> because c++ mangles names, in order for a library to be usable from both C and C++, are there compiler flags to leave both symbols in a shared lib?
[20:32:35] <Alipha> noarb: you just use extern "C" and it can be used from both C and C++: `extern "C" void foo();`
[20:35:31] <Alipha> noarb: typically you'd see something like this in a header: https://wandbox.org/permlink/5YY2AjwQXf0vrmkV
[20:37:20] *** Joins: dld (~dld@2620:6e:6000:2900:4c8f:59ca:20e7:8c51)
[20:38:52] <noarb> Alipha: are roughly the second half of these symbols name-mangled, or internal, or something else? https://bpa.st/7HIQ  I do see the `extern "C"` in the header, so is this shared library just a regular C library with internal symbols? file says it is stripped
[20:40:17] <Alipha> noarb: yeah, the _Z symbols are mangled
[20:40:58] <noarb> so this library has both C and C++ symbols? So it can be used with extern C and without that declaration? Is that standard?
[20:46:19] <Alipha> noarb: it looks like the library provides a C api and then also a C++ wrapper around that C api (or vice versa). e.g., it looks like there's a FPMComponent::GetTemplateSize which probably just calls SGFPM_GetTemplateSize
[20:56:18] <noarb> Alipha: I think you're right. The pdf documentation does mention the C++ wrapper on top of the C function calls. When this library is compiled (I don't have the source available) is it probably written in C++ with some public APIs marked as C code, using the same `extern "C"` for declarations that's used when consuming the library? If that's right I think I'm understanding it.
[21:10:42] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:02:22] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[22:03:04] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Quit: Shutdown)
[22:24:42] *** Quits: hsv-2 (~weechat@gateway/tor-sasl/hsv-2) (Ping timeout: 276 seconds)
[22:31:16] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[22:55:44] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[22:58:49] *** Joins: meator (~meator@user/meator)
[23:19:29] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:25:41] *** Joins: hsv-2 (~weechat@gateway/tor-sasl/hsv-2)
[23:28:32] *** Quits: Raziel (~Raziel@user/raziel) (Read error: Connection reset by peer)
[23:28:57] *** Joins: Raziel (~Raziel@user/raziel)
[23:32:56] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Ping timeout: 265 seconds)
[23:32:57] *** Quits: Zertrin (~zertrin@user/zertrin) (Ping timeout: 265 seconds)
[23:33:25] *** Quits: xq (~xq@user/xq) (Ping timeout: 265 seconds)
[23:33:38] *** Quits: meicceli (meicceli@kapsi.fi) (Quit: WeeChat 3.0)
[23:33:54] *** Quits: louiz (~louiz@2001:bc8:38e7::) (Ping timeout: 265 seconds)
[23:35:40] *** Joins: Zertrin (~zertrin@user/zertrin)
[23:45:06] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[23:48:53] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[23:49:15] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[23:49:53] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[23:53:54] *** Joins: teut (~teut@182.68.254.204)
[23:56:42] *** Joins: rito_ (~rito_gh@45.112.243.47)
[23:57:27] *** Quits: rito_ (~rito_gh@45.112.243.47) (Quit: Leaving)
