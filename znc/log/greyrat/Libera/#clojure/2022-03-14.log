[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:14:42] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:18:55] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[01:52:52] *** Quits: seabass (~seabass@user/seabass) (Quit: leaving)
[02:11:13] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:20:12] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 272 seconds)
[02:32:51] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[02:39:12] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[02:39:14] *** Joins: eddof13 (~eddof13@192.154.196.148)
[02:42:00] *** Quits: eddof13 (~eddof13@192.154.196.148) (Client Quit)
[02:53:54] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[02:56:18] *** Quits: uncleyear (~ian@178.176.78.75) (Ping timeout: 272 seconds)
[03:00:23] *** Quits: HDurer (~hdurer@104.132.61.66) (Remote host closed the connection)
[03:02:53] *** Joins: uncleyear (~ian@178.176.77.39)
[03:24:16] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[03:29:14] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[03:42:28] *** Quits: uncleyear (~ian@178.176.77.39) (Ping timeout: 250 seconds)
[03:59:29] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[04:05:45] *** Joins: piotrts (~piotrts@188.146.130.81.nat.umts.dynamic.t-mobile.pl)
[04:09:10] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[04:10:15] *** Quits: piotrts (~piotrts@188.146.130.81.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 252 seconds)
[04:10:39] *** Joins: KSuyno (~KSuyno@cpe-76-188-109-80.neo.res.rr.com)
[04:16:32] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:24:44] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[04:32:04] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Read error: Connection reset by peer)
[04:32:10] *** Joins: AKEmily (~AlaskanEm@user/alaskanemily)
[04:34:02] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[04:38:48] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 250 seconds)
[04:41:24] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-0d13-db80-1316-2ed6.res6.spectrum.com) (Remote host closed the connection)
[04:41:24] *** AKEmily is now known as AlaskanEmily
[04:41:36] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[04:42:55] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[04:49:03] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Read error: Connection reset by peer)
[04:49:19] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[04:52:34] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Read error: Connection reset by peer)
[04:52:40] *** Joins: AKEmily (~AlaskanEm@user/alaskanemily)
[04:57:15] *** Quits: AKEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[04:57:39] *** Joins: AKEmily (~AlaskanEm@user/alaskanemily)
[04:59:35] *** Quits: AKEmily (~AlaskanEm@user/alaskanemily) (Read error: Connection reset by peer)
[04:59:41] *** Joins: emily__ (~AlaskanEm@user/alaskanemily)
[05:02:02] *** emily__ is now known as AlaskanEmily
[06:02:53] *** Quits: mcint (mcint@user/mcint) (Ping timeout: 256 seconds)
[06:19:29] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[06:21:20] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[06:21:51] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-0034-44e7-d0a8-40e0.res6.spectrum.com)
[06:22:48] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-0034-44e7-d0a8-40e0.res6.spectrum.com) (Remote host closed the connection)
[06:34:21] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 252 seconds)
[06:35:53] *** Joins: tomku (~tomku@user/tomku)
[06:36:57] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[06:43:42] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 252 seconds)
[06:52:45] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[07:05:29] <v3ga> hey, using hugsql can someone tell me why this changed every record in the table? https://gist.github.com/v3gal0g/7c19096d52de35b4510bc9819c336d51
[07:05:52] <v3ga> i assumed :1 would tell hugsql that we're only dealing with one record
[07:08:27] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Ping timeout: 252 seconds)
[07:08:41] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[07:08:47] <seebs> i know nothing about this but i wouldn't be surprised if :1 meant you took only the first response, which was the single response telling you everything got updated
[07:11:18] <v3ga> hmm, checking docs now but  I could have sworn...
[07:13:37] <v3ga> hmm i see it... id = id;  should be id = :id;  
[07:17:39] <v3ga> bam, got it =P 
[07:25:28] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Ping timeout: 272 seconds)
[07:45:19] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[08:09:44] *** Quits: zmt01 (~zmt00@user/zmt00) (Quit: Leaving)
[08:10:55] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:13:12] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[08:13:27] *** bandal is now known as sciencerules
[08:16:38] *** Parts: sciencerules (~bandal@209.23.8.246) ()
[08:37:25] *** Joins: fp-zealot (~user@pool-108-28-67-5.washdc.fios.verizon.net)
[08:39:12] *** Parts: fp-zealot (~user@pool-108-28-67-5.washdc.fios.verizon.net) ()
[08:44:11] *** Joins: shiranaihito (~textual@219.85.3.209)
[09:13:52] *** Joins: puchka (~marius@165.73.240.254)
[09:42:01] *** Quits: shiranaihito (~textual@219.85.3.209) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:47:49] *** Joins: uncleyear (~ian@178.176.77.39)
[09:49:53] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[09:52:55] *** Joins: shiranaihito (~textual@2001-b011-4011-1456-c1b3-c1be-e9e9-4766.dynamic-ip6.hinet.net)
[10:07:08] *** Joins: ajb (~ajb@cupid.whatbox.ca)
[10:09:43] *** Joins: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz)
[10:15:35] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[10:40:48] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[10:45:42] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 252 seconds)
[11:02:31] *** Joins: DasBrain (DasBrain@user/dasbrain)
[11:05:00] *** Joins: struchu (~struchu@62.87.192.114)
[11:06:03] *** Quits: DasBrain_ (~DasBrain@user/dasbrain) (Ping timeout: 256 seconds)
[11:22:16] *** Joins: MajorBiscuit (~MajorBisc@c-001-018-036.client.tudelft.eduvpn.nl)
[12:30:05] *** Joins: mbuf (~Shakthi@223.178.86.208)
[12:30:10] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[12:31:47] *** Joins: justAstache (~justache@user/justache)
[12:45:09] *** Quits: struchu (~struchu@62.87.192.114) (Quit: WeeChat 3.3)
[12:48:47] *** Joins: struchu (~struchu@62.87.192.114)
[13:10:10] *** Joins: vats (~vats@103.158.91.1)
[13:20:21] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Quit: Iacob)
[13:34:12] *** Quits: puchka (~marius@165.73.240.254) (Ping timeout: 240 seconds)
[13:36:25] *** Joins: puchka (~marius@165.73.240.252)
[14:02:03] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2e86:80a5:f58b:d1a4) (Ping timeout: 252 seconds)
[14:02:59] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:a4f7:3458:36c4:ffd7)
[14:39:27] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[14:44:27] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 256 seconds)
[15:04:45] *** Quits: vats (~vats@103.158.91.1) (Ping timeout: 252 seconds)
[15:28:05] *** Joins: unyu (~pyon@user/pyon)
[16:29:44] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[16:50:16] *** Quits: puchka (~marius@165.73.240.252) (Ping timeout: 250 seconds)
[17:02:40] *** Joins: puchka (~marius@185.106.102.226)
[17:07:50] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[17:12:42] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 260 seconds)
[17:13:37] *** Joins: vats (~vats@103.16.30.211)
[17:27:00] *** Quits: struchu (~struchu@62.87.192.114) (Quit: WeeChat 3.3)
[17:30:26] *** Joins: struchu (~struchu@62.87.192.114)
[17:49:02] *** Quits: struchu (~struchu@62.87.192.114) (Quit: WeeChat 3.3)
[17:49:44] <lagash> ah yes, the one character fixes..
[17:50:52] <Para> High ROI on those.
[17:53:07] *** Joins: struchu (~struchu@62.87.192.114)
[17:53:43] *** Quits: puchka (~marius@185.106.102.226) (Ping timeout: 256 seconds)
[17:55:26] *** Joins: puchka (~marius@165.73.241.29)
[18:11:00] *** Quits: atw (~user@ool-18bf5678.dyn.optonline.net) (Ping timeout: 240 seconds)
[18:42:40] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[18:45:58] *** Quits: shiranaihito (~textual@2001-b011-4011-1456-c1b3-c1be-e9e9-4766.dynamic-ip6.hinet.net) (Ping timeout: 250 seconds)
[18:57:11] *** Quits: puchka (~marius@165.73.241.29) (Ping timeout: 256 seconds)
[19:12:13] *** Quits: \f (4c1975b719@user/f/x-7101985) (Remote host closed the connection)
[19:12:13] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (Remote host closed the connection)
[19:12:13] *** Quits: nackjicholson (e492d83292@2604:bf00:561:2000::1d8) (Write error: Broken pipe)
[19:12:13] *** Quits: sm2n (ae95cb1267@user/sm2n) (Write error: Broken pipe)
[19:12:13] *** Quits: brown121407 (1fd27a54a7@gnu/webmaster/smarton) (Write error: Broken pipe)
[19:12:13] *** Quits: mrmanner (29a724a13e@user/mrmanner) (Write error: Broken pipe)
[19:12:13] *** Quits: dfreeman (f6e24f0053@user/dfreeman) (Remote host closed the connection)
[19:12:13] *** Quits: dawdler (035b60b5aa@user/dawdler) (Write error: Broken pipe)
[19:12:13] *** Quits: harryvederci (aca786de33@user/harryvederci) (Write error: Broken pipe)
[19:12:13] *** Quits: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac) (Remote host closed the connection)
[19:12:19] *** Quits: shrysr (4e0b42ae98@user/shrysr) (Remote host closed the connection)
[19:12:39] *** Joins: dawdler (035b60b5aa@2604:bf00:561:2000::3b6)
[19:12:40] *** Joins: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac)
[19:12:40] *** Joins: dfreeman (f6e24f0053@2604:bf00:561:2000::30d)
[19:12:41] *** Joins: nackjicholson (e492d83292@2604:bf00:561:2000::1d8)
[19:12:45] *** Quits: dfreeman (f6e24f0053@2604:bf00:561:2000::30d) (Changing host)
[19:12:45] *** Joins: dfreeman (f6e24f0053@user/dfreeman)
[19:12:47] *** Quits: dawdler (035b60b5aa@2604:bf00:561:2000::3b6) (Changing host)
[19:12:47] *** Joins: dawdler (035b60b5aa@user/dawdler)
[19:12:48] *** Joins: brown121407 (1fd27a54a7@gnu/webmaster/smarton)
[19:12:48] *** Joins: harryvederci (aca786de33@user/harryvederci)
[19:12:48] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[19:12:48] *** Joins: mrmanner (29a724a13e@user/mrmanner)
[19:12:50] *** Joins: sm2n (ae95cb1267@user/sm2n)
[19:13:03] *** Joins: \f (4c1975b719@user/f/x-7101985)
[19:13:03] *** Joins: shrysr (4e0b42ae98@user/shrysr)
[19:21:03] *** Quits: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz) (Ping timeout: 252 seconds)
[19:23:02] *** Joins: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz)
[19:31:01] *** Quits: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz) (Read error: Connection reset by peer)
[19:33:46] *** Quits: struchu (~struchu@62.87.192.114) (Quit: WeeChat 3.3)
[19:43:54] *** Joins: puchka (~marius@165.73.241.27)
[20:38:03] *** Quits: uncleyear (~ian@178.176.77.39) (Ping timeout: 252 seconds)
[20:41:45] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:55:39] *** Joins: seschwar (~seschwar@user/seschwar)
[20:59:49] <seebs> adventures in newbie-ville: trying to figure out how to "read this gzipped stream", found examples of similar/related things, one of them had (apply io/copy input output), i tried this, i got a very weird compile failure because a gzipinputstream couldn't be converted to iseq.
[21:00:07] <seebs> also accidentally deleted the [...] of a function and the message for that was Very Hard To Understand.
[21:00:34] <seebs> anyway here's the result of like 20 minutes of trying to figure this out:
[21:00:35] <seebs>   (with-open [gz (-> "resources/sample.dat" io/input-stream GZIPInputStream.)
[21:00:35] <seebs>         output (new java.io.ByteArrayOutputStream)]
[21:00:35] <seebs>     (io/copy gz output)
[21:00:35] <seebs>     (prn gz (.size output)))
[21:00:45] <seebs> (obviously, the sample file is a Temporary Placeholder here)
[21:01:59] <seebs> so someone (aphyr i think) pointed me at some example code using FileChannel to read things from an input buffer, which looked relatively handy, but I do not understand the objects involved well enough to get from a ByteArrayOutputStream to a FileChannel, or whether I could omit the intermediate step and just make a FileChannel from the stream.
[21:02:09] <seebs> My guess is no, because FileChannel looks like it wants to be seekable.
[21:09:25] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[21:14:39] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 256 seconds)
[21:20:53] *** Quits: puchka (~marius@165.73.241.27) (Quit: leaving)
[21:23:10] *** Quits: mbuf (~Shakthi@223.178.86.208) (Quit: Leaving)
[21:40:07] *** Joins: uncleyear (~ian@178.176.77.39)
[22:24:05] *** Joins: mcint (mcint@user/mcint)
[22:29:09] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Ping timeout: 252 seconds)
[22:30:30] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[22:37:36] *** Quits: kipz (~kipz@2a02:8010:6876:0:35a6:b3ba:833f:9798) (Remote host closed the connection)
[22:37:48] *** Joins: kipz (~kipz@2a02:8010:6876:0:c147:cc10:2cd2:40d6)
[22:37:52] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Quit: WeeChat 3.4)
[22:38:31] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[22:47:20] <aphyr> Seebs: FileChannel is meant to back a file--were you thinking of writing the BAOS to a file, and then putting a FileChannel around that?
[22:47:36] <aphyr> Or having a FileChannel backing a file, and writing data *from* a BAOS into it?
[22:51:16] <aphyr> Here's an example of setting up an outputstream which writes to a region of a FileChannel: https://github.com/jepsen-io/jepsen/blob/1b8673a3bc2e8afaea21529bda79e7265b1e5cd0/jepsen/src/jepsen/store/format.clj#L948-L956
[22:51:33] <aphyr> https://github.com/jepsen-io/jepsen/blob/main/jepsen/src/jepsen/store/FileOffsetOutputStream.java
[22:55:05] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[23:15:47] <seebs> ohh, i see. no, i don't want a filechannel then, i think i just want to convert the output stream to its underlying bytearray and read that
[23:22:31] <Para> Java's classic input/output streams are all meant to be nested. And then the bytearray variants are sort of fallbacks/inmem extractors.
[23:22:59] <Para> Whatddya called that, decorator pattern?
[23:24:41] <aphyr> seebs: That shouldn't be hard. Call (.toByteArray baos) when you're ready for the array?
[23:30:45] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[23:35:26] <seebs> yeah, that was what i'd concluded i probably wanted.
[23:37:12] <seebs> hmm
[23:37:14] <seebs>   (with-open [gz (-> "resources/sample.dat" io/input-stream GZIPInputStream.)
[23:37:14] <seebs>         output (new java.io.ByteArrayOutputStream)
[23:37:14] <seebs> 	_ (io/copy gz output)
[23:37:14] <seebs> 	output (.toByteArray output)]
[23:37:32] <seebs> i thought i would try a clever thing (there's more after this, but this is the "clever" part) to see whether it worked, and wow, i do not comprehend the error
[23:37:39] <seebs> Syntax error (NullPointerException) compiling at (/tmp/form-init2236293843051955199.clj:1:73).
[23:37:39] <seebs> Cannot invoke "Object.getClass()" because "target" is null
[23:38:16] <Para> Your file isn't there. There's a common gotcha, "resources" directory is not part of path.
[23:38:46] <Para> That is, your file probably should be just "sample.dat"
[23:38:53] <seebs> hmm
[23:39:01] <seebs> and yet it was working previously, and giving the expected value?
[23:39:57] <Para> There's behavioral details on whether it's trying to load from within JAR, path or directly from filesystem.
[23:40:25] <Para> Now where' that snippet of mine that gets around exactly this... :) hold on
[23:40:48] <seebs>   (with-open [gz (-> "resources/sample.dat" io/input-stream GZIPInputStream.)
[23:40:48] <seebs>         output (new java.io.ByteArrayOutputStream)]
[23:40:48] <seebs> 	(io/copy gz output)
[23:40:48] <seebs>     	(prn gz (.size output))))
[23:40:55] <seebs> this one works-as-expected
[23:41:20] <Para>  (-> (or (jio/resource path) (jio/file path))
[23:42:58] <Para> The difference is that depending on how things exactly are called, they're either resolved as classpath resources or plain files. And these two vary depending on how the piece of code is being run, and what the build tool's directory config is.
[23:44:10] <Para> The idea of resources directory is that everything in it will be added to the resulting JAR, which means classloader can load the resource through ClassLoader#getResource or #getResourceAsStream
[23:44:10] <seebs> https://gist.github.com/seebs/cb84bb73a4334ee50c88ed99890a3252
[23:44:33] <seebs> this produces a very strange, to me, output of: #object["[B" 0x6f6a7463 "[B@6f6a7463"]
[23:44:42] <Para> But if you just open it as a direct file path from root of the project, it'll load, until everything is packaged and this extra resource directory is missed :)
[23:44:48] <Para> Oh that's just how JVM prints ouf byte arrays.
[23:44:53] <Para> [B is byte array type
[23:45:11] <Para> Do a (String. bytes) call on it or smth :)
[23:45:15] <seebs> ... ohhhh
[23:45:24] *** Quits: MajorBiscuit (~MajorBisc@c-001-018-036.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[23:45:27] <seebs> and that's why (.size foo) got that strange error about .size not existing in [B.
[23:45:37] <seebs> because i was looking at the docs for ByteBuffer, not ByteArray.
[23:45:45] <Para> Yeah Java arrays don't have size, that's a Collection method.
[23:46:04] <Para> Java arrays have .length, just to keep things exciting.
[23:46:20] <seebs> strictly speaking, technically, i am Not Dyslexic
[23:46:46] <seebs> but it would never occur to me that, if looking at the word ByteBuffer one second, and ByteArray the next, I was not seeing the same word
[23:47:39] <Para> That's terminology overloading :) Gets quite annoying at times.
[23:48:12] <Para> Java used to be quite good with its collections terms and concepts. NIO sort of spread the palette a bit too much.
[23:50:26] <Para> And to expand on that, 1) Java collections make a clear distinction between collection of things vs maps. 2) All collections inherit from java.util.Collection 3) Collections with unique items are Sets 4) Collections with non-unique items are Lists
[23:50:40] <Para> Then the rest is just specific algo implementations and Vector to confuse everyone.
[23:50:50] <Para> And no trees, those are not Java.
[23:53:58] <seebs> hmm. once i *get* a bytebuffer, i can't check its size... but there's (alength ...)
[23:54:50] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[23:55:14] <Para> `alength` is for arrays, which are strictly special in JVM
[23:55:32] <seebs> okay, so, why doesn't adding "_ (io/copy a b)" to a (let [...]) work? it says "Cannot invoke "Object.getClass()" because "target" is null"
[23:56:17] <seebs> io/copy should return nil (if it's not throwing IOException), is nil not an allowable assign here?
[23:56:20] <Para> b is baos?
[23:56:33] <seebs> yeah
[23:56:45] <Para> nils are assignable, so that shouldn't be an issue
[23:57:07] <seebs> https://gist.github.com/seebs/4b1d4a09fc60481e62abc4b9e68effd6
[23:57:19] <Para> ohh I think you have a scope issue.
[23:57:48] <seebs> i have seen previous things use previously assigned values in the same let [], so i figured that was PROBABLY allowed.
[23:57:51] <Para> ...or not
[23:58:17] <seebs> this is definitely a good exercise in that i'm already getting errors i can't make any sense of
[23:58:24] <Para> Are you trying to create a ByteBuffer for actual use elsewhere?
[23:58:59] <seebs> sort of
[23:59:12] <ToxicFrog> Looking at that code I'd expect those two versions to be eqv
[23:59:19] <ToxicFrog> So, I'm baffled
[23:59:21] <seebs> okay, the underlying thing i want to do: deserialize a Minecraft NBT file, which is a gzipped stream of a godawful crime against developer sanity.
[23:59:26] <Para> Yeah it looks fine(ish?)
[23:59:48] <Para> gotta hit that repl now
[23:59:57] <seebs> it looks to me like ByteBuffer provides the ability to Read Next Bits in various formats, like (.getInt), which is I believe sufficient to allow me to do everything I want in the immediate term.
