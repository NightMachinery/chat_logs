[00:00:50] <susam> gin: It is ASDF that tries to write to ~/.cache/ when you load Quicklisp. The default cache location can be overridden by specifying XDG_CACHE_HOME environment variable. See https://wiki.archlinux.org/title/XDG_Base_Directory for details.
[00:03:48] <mfiano> jmercouris: I stopped writing on the web and moved to gemini :)
[00:10:03] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[00:17:00] *** Quits: Fare (~fare@2601:184:4a7f:995c:ccdd:65c8:2890:7f7d) (Ping timeout: 272 seconds)
[00:20:36] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[00:29:01] *** Quits: pve (~pve@178-55-175-93.bb.dnainternet.fi) (Quit: leaving)
[00:32:15] <mfiano> I need help figuring out why SBCL detected this DCE. My brain is not picking up on it
[00:32:23] <mfiano> Any takers?
[00:32:48] *** Joins: akoana (~ah@user/akoana)
[00:33:56] <lotuseater> what does DCE stand for in this context?
[00:34:13] <mfiano> Dead Code Elimination
[00:34:44] <lotuseater> ahh
[00:36:10] *** Quits: lad (~lad@user/lad) (Ping timeout: 256 seconds)
[00:38:30] <Josh_2> Send away
[00:38:42] <mfiano> https://gist.github.com/mfiano/6972696d168b5be6bb43b5491fe0e637
[00:48:29] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:50:52] *** Joins: khrbt (~znc@user/khrbt)
[00:51:50] *** Quits: khrbt_ (~znc@user/khrbt) (Ping timeout: 252 seconds)
[00:53:47] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[00:56:18] <mfiano> Oh huh. It's because it doesn't like it when ABS is bound to REL's binding in the parameter list.
[00:56:29] <mfiano> Must be an algorithmic problem
[00:56:48] *** Joins: notzmv (~zmv@user/notzmv)
[00:58:14] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[01:06:24] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Ping timeout: 272 seconds)
[01:09:18] *** Joins: selwyn (~selwyn@user/selwyn)
[01:09:55] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[01:12:19] *** Joins: john__ (~john@dynamic-095-117-104-051.95.117.pool.telefonica.de)
[01:13:45] *** Quits: gaqwas (~john@dynamic-095-117-104-051.95.117.pool.telefonica.de) (Ping timeout: 248 seconds)
[01:14:08] *** Joins: khrbt_ (~znc@user/khrbt)
[01:15:16] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 272 seconds)
[01:18:01] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 248 seconds)
[01:23:30] *** Quits: psycomic (~psycomic@2a01cb0588c5e40085e2f0a623c428bc.ipv6.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[01:43:01] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[01:43:26] *** Joins: dsk (~dsk@user/dsk)
[01:45:02] *** Joins: sander (~sander@user/sander)
[01:46:58] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Remote host closed the connection)
[01:48:17] *** Joins: lisp123 (~lisp123@45.130.83.208)
[01:49:09] *** Joins: Volt (~Volt@c-73-145-164-70.hsd1.mi.comcast.net)
[01:52:40] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 256 seconds)
[01:52:45] <pjb> mfiano: it's because either (%%= e1 e2 …) is true or not, the function %= will always return nil.  Since %%= doesn't have any side effect (sbcl can prove it since it's inlined), then it's useless to evaluate it: it's dead code.
[01:53:39] <pjb> mfiano: the only thing that may be left are type checks, but if you've declared the type of data or if sbcl can prove e1 and e2 and rel and abs are real, then there's no type error.
[01:53:54] <pjb> or if you use safety 0…
[01:54:23] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:55:06] <pjb> mfiano: ah, the joy of using a smart compiler!
[02:01:37] *** Joins: lisp123 (~lisp123@45.130.83.208)
[02:03:09] <mfiano> pjb: that's not true
[02:03:27] <pjb> You have a better theory?
[02:03:52] <mfiano> it only returns from %= with a NIL if ANY call to %%= returns NIL, otherwise hits the T at the end
[02:04:00] <mfiano> I explained the problem above
[02:04:05] <mfiano> It was due to the parameter binding
[02:04:32] <pjb> Oh, sorry, I didn't see the T.
[02:04:58] <mfiano> It is somehow solved by changing line 3
[02:05:04] <mfiano> from (abs rel) to (abs 1d-7)
[02:05:18] <pjb> But (abs rel) is legal AFAIK.
[02:05:20] <mfiano> So I have to re-evaluate my algorithm
[02:05:29] <mfiano> Yes it is, which makes me question the algorithm
[02:06:47] <pjb> mfiano: https://termbin.com/ka8y
[02:07:19] <pjb> If just s/abs rel/abs 1d-7/ is enough to make good, then there's a bug in sbcl.
[02:08:06] <mfiano> Then I guess there is
[02:08:15] <mfiano> I have been trying to track down the cause
[02:12:58] <mfiano> Yeah seems to be pointing to a hard to reproduce bug
[02:13:20] <mfiano> I'll just hack around it for now. Can't be bothered anymore
[02:31:12] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[02:40:00] *** Joins: dra (~dra@2a04:4540:6409:3200:38bd:12bb:1f40:bea2)
[02:43:45] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[02:44:13] *** Parts: akoana (~ah@user/akoana) (Leaving)
[02:54:06] *** Joins: jans1 (~Thunderbi@185.65.135.237)
[02:54:46] *** Joins: makomo (~makomo@user/makomo)
[02:56:08] *** Quits: jans (~Thunderbi@193.138.218.216) (Ping timeout: 256 seconds)
[02:56:08] *** jans1 is now known as jans
[03:04:26] *** Joins: Fare (~fare@2601:184:4a7f:995c:4b6e:9078:59a1:ba6d)
[03:06:09] *** Quits: frgo (~frgo@p200300deef0cee00588f7d35cd48dfd2.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:06:37] *** Joins: frgo (~frgo@p200300deef0cee00a99c244b7f2873f6.dip0.t-ipconnect.de)
[03:08:57] *** Quits: john__ (~john@dynamic-095-117-104-051.95.117.pool.telefonica.de) (Ping timeout: 248 seconds)
[03:10:37] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[03:17:52] *** Joins: cjb (~cjb@user/cjb)
[03:23:39] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[03:24:28] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 256 seconds)
[03:30:36] <jcowan> beach: And yet JS, which started out with objects-as-hash-tables, is now heavily optimized on the fly.  It most certainly is not impossible to be fast
[03:31:58] <jcowan> in highly dynamic languages
[03:32:09] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[03:39:49] *** Quits: dra (~dra@2a04:4540:6409:3200:38bd:12bb:1f40:bea2) (Quit: Leaving)
[03:43:44] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 256 seconds)
[03:44:26] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[03:56:50] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 272 seconds)
[03:58:56] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:01:22] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:02:14] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (Ping timeout: 258 seconds)
[04:07:33] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[04:11:13] *** Joins: tyson2 (~user@cpeb4fbe4e04394-cmf0f249001100.cpe.net.cable.rogers.com)
[04:13:37] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[04:15:01] *** Joins: john__ (~john@dynamic-095-117-104-051.95.117.pool.telefonica.de)
[04:15:32] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:19:17] <pl> jcowan: this involves, at times, a bit esoteric knowledge about details of implementation leaking out from abstraction
[04:20:03] <pl> for example, I have a book somewhere which talks about manual optimizations (i.e. structuring code so that optimizer can work) related to underlying method resolution algorithm
[04:20:05] *** Joins: Demosthenex (~Demosthen@user/demosthenex)
[04:21:03] <hayley> Yeah, the optimization (hidden classes) only works if you don't change the set of slot names. Fortunately I don't think anyone does that.
[04:21:13] <hayley> *slot names frequently
[04:23:41] <moon-child> compare a language where you're not _allowed_ to change the set of slot names to one where you can, incurring a performance penalty only when you do
[04:23:49] <moon-child> have you lost anything in moving to the latte rlanguage?
[04:24:30] <jcowan> "C-style syntax", of course.
[04:25:37] <moon-child> well, assuming languages which are otherwise equivalent
[04:25:55] <moon-child> a hypothetical version of js where the slotset is fixed; or a hypothetical version of cl where you can add and remove slots dynamically
[04:29:17] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:30:03] <pl> hmmm.... pretty sure you can add/remove slots dynamically in CLOS
[04:30:16] *** Quits: john__ (~john@dynamic-095-117-104-051.95.117.pool.telefonica.de) (Ping timeout: 268 seconds)
[04:30:20] <pl> can't do that for symbols,  but that's what symbol-plist is for
[04:31:48] *** Joins: selwyn (~selwyn@user/selwyn)
[04:33:13] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 248 seconds)
[04:37:56] *** Quits: random-nick (~random-ni@87.116.179.221) (Ping timeout: 272 seconds)
[04:50:54] *** Joins: Guest92 (~textual@61.69.157.152)
[04:51:50] <Guest92> Hi all. I'm new to CL. Just a quick question, is there a go-to JSON encoding/decoding library I should be using? I'm playing around with REST APIs.
[04:52:00] *** Guest92 is now known as cpu6502
[04:52:17] *** Joins: asarch (~asarch@2806:10ae:7:defb:627b:ef7f:734a:76f5)
[04:54:22] *** Quits: Fare (~fare@2601:184:4a7f:995c:4b6e:9078:59a1:ba6d) (Ping timeout: 258 seconds)
[05:06:00] *** Quits: asarch (~asarch@2806:10ae:7:defb:627b:ef7f:734a:76f5) (Quit: Leaving)
[05:06:24] *** Joins: Fare (~fare@2601:184:4a7f:995c:e911:9fa9:22be:31ec)
[05:06:58] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-85A7-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[05:10:09] *** Joins: notzmv (~zmv@user/notzmv)
[05:12:06] *** Joins: cromyr (~cromyr@1.132.105.57)
[05:14:03] *** Quits: Volt (~Volt@c-73-145-164-70.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[05:16:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[05:19:37] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[05:20:50] *** Joins: Alfr (~Alfr@user/alfr)
[05:24:13] <saturn2> cpu6502: yason seems to be popular
[05:27:40] <cpu6502> saturn2: thank you. I'll use that.
[05:43:25] <akater[m]> I thought the canonical answer to that question was https://sabracrolleton.github.io/json-review
[05:43:30] <Josh_2> I was just gonna post that
[05:43:40] <Josh_2> jonathan for encoding and something else for decoding
[05:45:44] <Josh_2> jonathan and jsown
[05:46:26] <cpu6502> akater[m]: that's quite an exhaustive review! thanks.
[05:46:47] <Josh_2> altho I personally use jonathan for decoding when I am connecting to a known api
[05:51:47] *** Quits: tyson2 (~user@cpeb4fbe4e04394-cmf0f249001100.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[05:53:22] *** Quits: cpu6502 (~textual@61.69.157.152) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:08:09] <akater[m]> Consider the following general problem: starting with a list of keywords (“spec”) and a plist where all keywords are unique and are present in the spec, complete the plist to a plist which contains values for all keywords in the spec.  Procedures that perform the completion generally come from independently developed libraries, often take into account key-value pairs found in he plist so far and often depend on dynamic environment.  Of
[06:08:09] <akater[m]> course it could be any k-v map, not neccesarily plist.
[06:08:14] <akater[m]> Does this problem have a name?  Something like “form filling” maybe?
[06:10:46] <dieggsy> akater: so you're saying something like spec - '(:key1 default-val1 :key2 default-val2 :key3 default-val3) plist - '(:key1 foo) -> result '(:key1 foo :key2 default-val2 :key3 default-val3) ?
[06:11:37] <moon-child> pl: well, sure--how fast do you expect symbol-plist is?
[06:12:17] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[06:12:38] <pl> moon-child: depends on too many things to give proper baseline, but unless you go too high in numbers, you're going to get decentish performance
[06:14:20] <akater[m]> dieggsy: Spec is a list of keys.  Maybe value types.  But there hardly are “default values”, more like default procedures to get them (and usually they just ask user interactively)
[06:15:27] <akater[m]> One example is a completion of function name at point.  Another is completion of incomplete connection spec to a spec containing usersame, host, key/password, optionally proxy.  Starting combinations here may vary, many are reasonable, and it makes sense to complete differently depending on what we start with.
[06:22:25] <akater[m]> I just wonder if there's a name.  I'm writing CLOS protocol for this and I mostly ask here because the problem seems general enough and dynamic enough to require CLOS powers significantly.  Naive attempts to support multiple “backends” modularly seem to quickly turn into duplicated code and ad hoc solutions.
[06:27:23] <akater[m]> In the same time, lots of tasks seem to fall into this category.  Resembles pattern matching but it's not quite that.
[06:34:28] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 272 seconds)
[07:18:18] *** Joins: prxq_ (~quassel@x4db60df5.dyn.telefonica.de)
[07:18:49] *** Joins: cpu6502 (~textual@61.69.157.152)
[07:22:17] *** Quits: prxq (~quassel@x4db59413.dyn.telefonica.de) (Ping timeout: 248 seconds)
[07:35:47] <beach> Good morning everyone!
[07:36:19] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[07:43:24] *** Joins: lad (~lad@user/lad)
[07:48:27] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[08:17:53] *** Quits: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net) (Remote host closed the connection)
[08:21:11] *** Joins: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net)
[08:28:25] *** Quits: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net) (Quit: Leaving)
[08:28:52] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[09:09:48] *** Quits: cpu6502 (~textual@61.69.157.152) (Quit: Textual IRC Client: www.textualapp.com)
[09:12:38] *** Quits: kakuhen (~kakuhen@user/kakuhen) (*.net *.split)
[09:12:38] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[09:12:38] *** Quits: derelict (~derelict@user/derelict) (*.net *.split)
[09:12:38] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[09:12:38] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (*.net *.split)
[09:12:39] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[09:12:39] *** Quits: andreyorst (~andreyors@2.92.124.61) (*.net *.split)
[09:12:39] *** Quits: jgkamat (~jay@user/jay) (*.net *.split)
[09:12:39] *** Quits: froggey-1 (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (*.net *.split)
[09:12:39] *** Quits: easye (~user@2a01:4f8:200:8261::b0) (*.net *.split)
[09:12:39] *** Quits: Kabouik (~Kabouik@user/kabouik) (*.net *.split)
[09:12:39] *** Quits: spacebat1 (spacebat@spot.ubermonkey.net) (*.net *.split)
[09:12:39] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[09:12:39] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[09:12:39] *** Quits: gko (~user@user/gko) (*.net *.split)
[09:12:39] *** Quits: les (znc@user/les) (*.net *.split)
[09:12:39] *** Quits: jackdaniel (~jack@user/jackdaniel) (*.net *.split)
[09:13:13] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[09:13:13] *** Joins: minion (~minion@common-lisp.net)
[09:13:13] *** Joins: derelict (~derelict@user/derelict)
[09:13:13] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[09:13:13] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[09:13:13] *** Joins: andreyorst (~andreyors@2.92.124.61)
[09:13:13] *** Joins: jgkamat (~jay@user/jay)
[09:13:13] *** Joins: easye (~user@2a01:4f8:200:8261::b0)
[09:13:13] *** Joins: froggey-1 (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[09:13:13] *** Joins: Kabouik (~Kabouik@user/kabouik)
[09:13:13] *** Joins: spacebat1 (spacebat@spot.ubermonkey.net)
[09:13:13] *** Joins: dcx (~dcx@user/dac)
[09:13:13] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[09:13:13] *** Joins: les (znc@user/les)
[09:13:13] *** Joins: gko (~user@user/gko)
[09:13:13] *** Joins: jackdaniel (~jack@user/jackdaniel)
[09:13:13] *** iridium.libera.chat sets mode: +o jackdaniel
[09:14:51] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[09:14:54] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (*.net *.split)
[09:14:54] *** Quits: sander (~sander@user/sander) (*.net *.split)
[09:14:54] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (*.net *.split)
[09:14:55] *** Quits: stylewarning (sid241636@id-241636.brockwell.irccloud.com) (*.net *.split)
[09:14:55] *** Quits: alanz (sid110616@id-110616.highgate.irccloud.com) (*.net *.split)
[09:14:55] *** Quits: jsatk (sid304796@id-304796.brockwell.irccloud.com) (*.net *.split)
[09:14:55] *** Quits: ullbeking (sid5364@id-5364.charlton.irccloud.com) (*.net *.split)
[09:14:55] *** Quits: jfrent (~josiah@user/jfrent) (*.net *.split)
[09:14:55] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[09:14:55] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (*.net *.split)
[09:14:55] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (*.net *.split)
[09:14:56] *** Quits: ecraven (ecraven@user/nex) (*.net *.split)
[09:14:56] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (*.net *.split)
[09:14:56] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[09:14:56] *** Quits: susam (~susam@user/susam) (*.net *.split)
[09:14:56] *** Quits: gin (~gin@user/gin) (*.net *.split)
[09:14:56] *** Quits: dale (dale@user/dale) (*.net *.split)
[09:15:22] *** Joins: Demosthenex (~Demosthen@user/demosthenex)
[09:15:22] *** Joins: sander (~sander@user/sander)
[09:15:22] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[09:15:22] *** Joins: gin (~gin@user/gin)
[09:15:22] *** Joins: stylewarning (sid241636@id-241636.brockwell.irccloud.com)
[09:15:22] *** Joins: alanz (sid110616@id-110616.highgate.irccloud.com)
[09:15:22] *** Joins: jsatk (sid304796@id-304796.brockwell.irccloud.com)
[09:15:22] *** Joins: ullbeking (sid5364@id-5364.charlton.irccloud.com)
[09:15:22] *** Joins: jfrent (~josiah@user/jfrent)
[09:15:22] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[09:15:22] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[09:15:22] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[09:15:22] *** Joins: ecraven (ecraven@user/nex)
[09:15:22] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[09:15:22] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[09:15:22] *** Joins: susam (~susam@user/susam)
[09:15:22] *** Joins: dale (dale@user/dale)
[09:15:57] *** Quits: heretical_crypte (~heretical@2001:470:69fc:105::8054) (Ping timeout: 245 seconds)
[09:16:10] *** Quits: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7) (Ping timeout: 240 seconds)
[09:16:22] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 256 seconds)
[09:16:34] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Ping timeout: 240 seconds)
[09:16:40] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Ping timeout: 272 seconds)
[09:16:44] *** Quits: hayley (~theemacss@user/hayley) (Ping timeout: 252 seconds)
[09:16:47] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Ping timeout: 245 seconds)
[09:16:51] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Ping timeout: 252 seconds)
[09:17:00] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 276 seconds)
[09:17:00] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Ping timeout: 276 seconds)
[09:17:19] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Ping timeout: 272 seconds)
[09:18:04] *** Quits: mariari (~mariari@user/mariari) (*.net *.split)
[09:18:04] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (*.net *.split)
[09:18:04] *** Quits: sterni (~lukas@user/sterni) (*.net *.split)
[09:18:04] *** Quits: dsk (~dsk@user/dsk) (*.net *.split)
[09:18:04] *** Quits: drmeister (sid45147@id-45147.charlton.irccloud.com) (*.net *.split)
[09:18:04] *** Quits: jcowan (sid325434@id-325434.charlton.irccloud.com) (*.net *.split)
[09:18:04] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (*.net *.split)
[09:18:04] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (*.net *.split)
[09:18:04] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[09:18:04] *** Quits: theBlackDragon (~dragon@fvwm/admin) (*.net *.split)
[09:18:04] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[09:18:04] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[09:18:05] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (*.net *.split)
[09:18:05] *** Quits: sander (~sander@user/sander) (*.net *.split)
[09:18:05] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (*.net *.split)
[09:18:05] *** Quits: stylewarning (sid241636@id-241636.brockwell.irccloud.com) (*.net *.split)
[09:18:05] *** Quits: alanz (sid110616@id-110616.highgate.irccloud.com) (*.net *.split)
[09:18:05] *** Quits: jsatk (sid304796@id-304796.brockwell.irccloud.com) (*.net *.split)
[09:18:05] *** Quits: ullbeking (sid5364@id-5364.charlton.irccloud.com) (*.net *.split)
[09:18:05] *** Quits: jfrent (~josiah@user/jfrent) (*.net *.split)
[09:18:05] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[09:18:05] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (*.net *.split)
[09:18:05] *** Quits: ecraven (ecraven@user/nex) (*.net *.split)
[09:18:05] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (*.net *.split)
[09:18:05] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[09:18:05] *** Quits: susam (~susam@user/susam) (*.net *.split)
[09:18:05] *** Quits: gin (~gin@user/gin) (*.net *.split)
[09:18:05] *** Quits: dale (dale@user/dale) (*.net *.split)
[09:18:05] *** Quits: kakuhen (~kakuhen@user/kakuhen) (*.net *.split)
[09:18:05] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[09:18:05] *** Quits: derelict (~derelict@user/derelict) (*.net *.split)
[09:18:05] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (*.net *.split)
[09:18:05] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[09:18:06] *** Quits: andreyorst (~andreyors@2.92.124.61) (*.net *.split)
[09:18:06] *** Quits: jgkamat (~jay@user/jay) (*.net *.split)
[09:18:06] *** Quits: froggey-1 (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (*.net *.split)
[09:18:06] *** Quits: easye (~user@2a01:4f8:200:8261::b0) (*.net *.split)
[09:18:06] *** Quits: Kabouik (~Kabouik@user/kabouik) (*.net *.split)
[09:18:06] *** Quits: spacebat1 (spacebat@spot.ubermonkey.net) (*.net *.split)
[09:18:06] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[09:18:06] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[09:18:06] *** Quits: gko (~user@user/gko) (*.net *.split)
[09:18:06] *** Quits: les (znc@user/les) (*.net *.split)
[09:18:06] *** Quits: jackdaniel (~jack@user/jackdaniel) (*.net *.split)
[09:18:06] *** Quits: prxq_ (~quassel@x4db60df5.dyn.telefonica.de) (*.net *.split)
[09:18:06] *** Quits: notzmv (~zmv@user/notzmv) (*.net *.split)
[09:18:06] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (*.net *.split)
[09:18:06] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (*.net *.split)
[09:18:06] *** Quits: d4ryus (~d4ryus@ppp-188-174-54-240.dynamic.mnet-online.de) (*.net *.split)
[09:18:06] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (*.net *.split)
[09:18:06] *** Quits: palter (sid27521@brockwell.irccloud.com) (*.net *.split)
[09:18:06] *** Quits: Krystof (~user@81.174.155.115) (*.net *.split)
[09:18:06] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[09:18:06] *** Quits: santiagopim (~user@90.166.59.254) (*.net *.split)
[09:18:06] *** Quits: luis (~luis@lisp/luis) (*.net *.split)
[09:18:06] *** Quits: phantomics (~phantomic@97-118-239-225.hlrn.qwest.net) (*.net *.split)
[09:18:06] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (*.net *.split)
[09:18:06] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (*.net *.split)
[09:18:07] *** Quits: raeda (~raeda@72.49.219.33) (*.net *.split)
[09:18:07] *** Quits: micro (~micro@user/micro) (*.net *.split)
[09:18:07] *** Quits: lsip123_win10 (~user@80.227.170.170) (*.net *.split)
[09:18:07] *** Quits: tux0r- (~tux0r@rosaelefanten.org) (*.net *.split)
[09:18:07] *** Quits: gpiero_ (~quassel@camale.rm-rf.it) (*.net *.split)
[09:18:07] *** Quits: ck_ (~ck@plskthx.org) (*.net *.split)
[09:18:07] *** Quits: _death (~death@adeht.org) (*.net *.split)
[09:18:07] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (*.net *.split)
[09:18:07] *** Quits: Skyfire (~pyon@user/pyon) (*.net *.split)
[09:18:07] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (*.net *.split)
[09:18:07] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (*.net *.split)
[09:18:07] *** Quits: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad) (*.net *.split)
[09:18:07] *** Quits: beach (~user@2a01:cb19:150:3400:2606:4cb6:32f2:ab73) (*.net *.split)
[09:18:07] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (*.net *.split)
[09:18:07] *** Quits: totoro2021 (~totoro@173.82.187.126) (*.net *.split)
[09:18:07] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[09:18:07] *** Quits: victor (sid208353@user/victor) (*.net *.split)
[09:18:07] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[09:18:07] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[09:18:07] *** Quits: iisi (sid19824@id-19824.stonehaven.irccloud.com) (*.net *.split)
[09:18:07] *** Quits: pranavats (3fba1d1b34@jabberfr.org) (*.net *.split)
[09:18:07] *** Quits: markasoftware (~quassel@107.161.26.124) (*.net *.split)
[09:18:08] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (*.net *.split)
[09:18:08] *** Quits: rdrg109 (~rdrg109@51.195.232.80) (*.net *.split)
[09:18:08] *** Quits: pl (sid98063@id-98063.brockwell.irccloud.com) (*.net *.split)
[09:18:08] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[09:18:08] *** Quits: lad (~lad@user/lad) (*.net *.split)
[09:18:08] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (*.net *.split)
[09:18:08] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[09:18:08] *** Quits: jans (~Thunderbi@185.65.135.237) (*.net *.split)
[09:18:08] *** Quits: lisp123 (~lisp123@45.130.83.208) (*.net *.split)
[09:18:08] *** Quits: amk (~amk@176.61.106.150) (*.net *.split)
[09:18:08] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[09:18:08] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[09:18:08] *** Quits: travv0 (sid293381@user/travv0) (*.net *.split)
[09:18:08] *** Quits: jhi (sid81469@tooting.irccloud.com) (*.net *.split)
[09:18:08] *** Quits: conjunctive (sid433686@brockwell.irccloud.com) (*.net *.split)
[09:18:08] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[09:18:08] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[09:18:08] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[09:18:08] *** Quits: fengshaun (~fengshaun@68.69.214.210) (*.net *.split)
[09:18:08] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (*.net *.split)
[09:18:08] *** Quits: srhm (~ascii@user/srhm) (*.net *.split)
[09:18:08] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (*.net *.split)
[09:18:08] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[09:18:08] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (*.net *.split)
[09:18:08] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[09:18:08] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (*.net *.split)
[09:18:09] *** Quits: remexre (~nathan@user/remexre) (*.net *.split)
[09:18:09] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[09:18:09] *** Quits: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net) (*.net *.split)
[09:18:09] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (*.net *.split)
[09:18:09] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (*.net *.split)
[09:18:09] *** Quits: mingus (~jan-magnu@ti0135a400-2471.bb.online.no) (*.net *.split)
[09:18:09] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (*.net *.split)
[09:18:09] *** Quits: Fare (~fare@2601:184:4a7f:995c:e911:9fa9:22be:31ec) (*.net *.split)
[09:18:09] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (*.net *.split)
[09:18:09] *** Quits: frgo (~frgo@p200300deef0cee00a99c244b7f2873f6.dip0.t-ipconnect.de) (*.net *.split)
[09:18:09] *** Quits: Josh_2 (~user@37.25.47.130) (*.net *.split)
[09:18:09] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[09:18:09] *** Quits: specbot (~specbot@common-lisp.net) (*.net *.split)
[09:18:09] *** Quits: seanw (spwhitton@debian/spwhitton) (*.net *.split)
[09:18:09] *** Quits: gendl (sid100083@id-100083.stonehaven.irccloud.com) (*.net *.split)
[09:18:09] *** Quits: jmercouris (sid438340@id-438340.stonehaven.irccloud.com) (*.net *.split)
[09:18:09] *** Quits: d_run (sid83858@id-83858.stonehaven.irccloud.com) (*.net *.split)
[09:18:09] *** Quits: IUSR (sid348938@id-348938.stonehaven.irccloud.com) (*.net *.split)
[09:18:09] *** Quits: pjb (~pjb@user/pjb) (*.net *.split)
[09:18:09] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[09:18:09] *** Quits: dim (~dimlibera@2a02:2178:2:4:1658:d0ff:fe49:408c) (*.net *.split)
[09:18:09] *** Quits: loke (~loke@junk.nocrew.org) (*.net *.split)
[09:18:09] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[09:18:09] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[09:18:09] *** Quits: mgxm (~mgxm@user/mgxm) (*.net *.split)
[09:18:09] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (*.net *.split)
[09:18:09] *** Quits: dbotton (sid492350@id-492350.tooting.irccloud.com) (*.net *.split)
[09:18:09] *** Quits: splittist (sid17737@id-17737.tinside.irccloud.com) (*.net *.split)
[09:18:09] *** Quits: etiago (~etiago@user/etiago) (*.net *.split)
[09:18:09] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (*.net *.split)
[09:18:10] *** Quits: hubvu (sid495858@id-495858.tinside.irccloud.com) (*.net *.split)
[09:18:10] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (*.net *.split)
[09:18:10] *** Quits: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa) (*.net *.split)
[09:18:10] *** Quits: flip214 (~marek@user/flip214) (*.net *.split)
[09:18:10] *** Quits: mason (~mason@redhat/mason) (*.net *.split)
[09:18:10] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (*.net *.split)
[09:18:10] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[09:18:10] *** Quits: hisacro (~OBSD@my.displ.nl) (*.net *.split)
[09:18:10] *** Quits: leo_song (~leo_song@1.156.52.78) (*.net *.split)
[09:18:10] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[09:18:10] *** Quits: boeg (sid41541@id-41541.tinside.irccloud.com) (*.net *.split)
[09:18:10] *** Quits: deck4rd (~deckard@ec2-3-129-211-221.us-east-2.compute.amazonaws.com) (*.net *.split)
[09:18:10] *** Quits: hirez (~hirez@104.128.237.40) (*.net *.split)
[09:18:10] *** Quits: sgithens (sid10659@id-10659.brockwell.irccloud.com) (*.net *.split)
[09:18:10] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (*.net *.split)
[09:18:10] *** Quits: antoszka (~antoni@rozalia.antoszka.pl) (*.net *.split)
[09:18:10] *** Quits: skempf (~Kabriel@user/kabriel) (*.net *.split)
[09:18:11] *** Quits: Xach (~xach@user/xach) (*.net *.split)
[09:18:11] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[09:18:11] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (*.net *.split)
[09:18:11] *** Quits: Fade (fade@outrider.deepsky.com) (*.net *.split)
[09:18:11] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (*.net *.split)
[09:18:11] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[09:18:11] *** Quits: phadthai (mmondor@ginseng.pulsar-zone.net) (*.net *.split)
[09:18:11] *** Quits: spec (~mrSpec@user/spec) (*.net *.split)
[09:18:11] *** Quits: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) (*.net *.split)
[09:18:11] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (*.net *.split)
[09:18:11] *** Quits: cromyr (~cromyr@1.132.105.57) (*.net *.split)
[09:18:11] *** Quits: knobo (~knobo@c092BBF51.dhcp.as2116.net) (*.net *.split)
[09:18:11] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (*.net *.split)
[09:18:11] *** Quits: hendursaga (~weechat@user/hendursaga) (*.net *.split)
[09:18:11] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[09:18:11] *** Quits: cjb (~cjb@user/cjb) (*.net *.split)
[09:18:12] *** Quits: cpape` (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[09:18:12] *** Quits: ^[ (~user@user//x-8473491) (*.net *.split)
[09:18:12] *** Quits: jdz (~jdz@185.23.160.114) (*.net *.split)
[09:18:12] *** Quits: fishfinger_ (~fishfinge@178.62.22.133) (*.net *.split)
[09:18:12] *** Quits: kagevf (~jfh@ip68-224-125-162.lv.lv.cox.net) (*.net *.split)
[09:18:12] *** Quits: commandoline_ (~commandol@ubuntu/member/commandoline) (*.net *.split)
[09:18:12] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[09:18:12] *** Quits: ane (ane@shell.wilan.org) (*.net *.split)
[09:18:12] *** Quits: pok (~pok@user/pok) (*.net *.split)
[09:18:12] *** Quits: jemoka (~jemoka@user/jemoka) (*.net *.split)
[09:18:12] *** Quits: |3b| (bbb@user/3b/x-2324788) (*.net *.split)
[09:18:12] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[09:18:12] *** Quits: cheers (user@2600:3c00::f03c:91ff:fe1c:3c39) (*.net *.split)
[09:18:12] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[09:18:32] *** Joins: dale (dale@user/dale)
[09:18:32] *** Joins: susam (~susam@user/susam)
[09:18:32] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[09:18:32] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[09:18:32] *** Joins: ecraven (ecraven@user/nex)
[09:18:32] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[09:18:32] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[09:18:32] *** Joins: jfrent (~josiah@user/jfrent)
[09:18:32] *** Joins: ullbeking (sid5364@id-5364.charlton.irccloud.com)
[09:18:32] *** Joins: jsatk (sid304796@id-304796.brockwell.irccloud.com)
[09:18:32] *** Joins: alanz (sid110616@id-110616.highgate.irccloud.com)
[09:18:32] *** Joins: stylewarning (sid241636@id-241636.brockwell.irccloud.com)
[09:18:32] *** Joins: gin (~gin@user/gin)
[09:18:32] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[09:18:32] *** Joins: sander (~sander@user/sander)
[09:18:32] *** Joins: Demosthenex (~Demosthen@user/demosthenex)
[09:18:32] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[09:18:32] *** Joins: jackdaniel (~jack@user/jackdaniel)
[09:18:32] *** Joins: gko (~user@user/gko)
[09:18:32] *** Joins: les (znc@user/les)
[09:18:32] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[09:18:32] *** Joins: dcx (~dcx@user/dac)
[09:18:32] *** Joins: spacebat1 (spacebat@spot.ubermonkey.net)
[09:18:32] *** Joins: Kabouik (~Kabouik@user/kabouik)
[09:18:32] *** Joins: froggey-1 (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[09:18:32] *** Joins: easye (~user@2a01:4f8:200:8261::b0)
[09:18:32] *** Joins: jgkamat (~jay@user/jay)
[09:18:32] *** Joins: andreyorst (~andreyors@2.92.124.61)
[09:18:32] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[09:18:32] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[09:18:32] *** Joins: derelict (~derelict@user/derelict)
[09:18:32] *** Joins: minion (~minion@common-lisp.net)
[09:18:32] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[09:18:32] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[09:18:32] *** Joins: lad (~lad@user/lad)
[09:18:32] *** Joins: prxq_ (~quassel@x4db60df5.dyn.telefonica.de)
[09:18:32] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[09:18:32] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[09:18:32] *** Joins: cromyr (~cromyr@1.132.105.57)
[09:18:32] *** Joins: notzmv (~zmv@user/notzmv)
[09:18:32] *** Joins: Fare (~fare@2601:184:4a7f:995c:e911:9fa9:22be:31ec)
[09:18:32] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:18:32] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:18:32] *** Joins: cjb (~cjb@user/cjb)
[09:18:32] *** Joins: frgo (~frgo@p200300deef0cee00a99c244b7f2873f6.dip0.t-ipconnect.de)
[09:18:32] *** Joins: jans (~Thunderbi@185.65.135.237)
[09:18:32] *** iridium.libera.chat sets mode: +o jackdaniel
[09:18:32] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[09:18:32] *** Joins: lisp123 (~lisp123@45.130.83.208)
[09:18:32] *** Joins: dsk (~dsk@user/dsk)
[09:18:32] *** Joins: boeg (sid41541@id-41541.tinside.irccloud.com)
[09:18:32] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[09:18:32] *** Joins: hendursaga (~weechat@user/hendursaga)
[09:18:32] *** Joins: Josh_2 (~user@37.25.47.130)
[09:18:32] *** Joins: knobo (~knobo@c092BBF51.dhcp.as2116.net)
[09:18:32] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[09:18:32] *** Joins: amk (~amk@176.61.106.150)
[09:18:32] *** Joins: d4ryus (~d4ryus@ppp-188-174-54-240.dynamic.mnet-online.de)
[09:18:32] *** Joins: Skyfire (~pyon@user/pyon)
[09:18:32] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[09:18:32] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[09:18:32] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[09:18:32] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[09:18:32] *** Joins: specbot (~specbot@common-lisp.net)
[09:18:32] *** Joins: seanw (spwhitton@debian/spwhitton)
[09:18:32] *** Joins: gendl (sid100083@id-100083.stonehaven.irccloud.com)
[09:18:32] *** Joins: jmercouris (sid438340@id-438340.stonehaven.irccloud.com)
[09:18:32] *** Joins: d_run (sid83858@id-83858.stonehaven.irccloud.com)
[09:18:32] *** Joins: IUSR (sid348938@id-348938.stonehaven.irccloud.com)
[09:18:32] *** Joins: iisi (sid19824@id-19824.stonehaven.irccloud.com)
[09:18:32] *** Joins: drmeister (sid45147@id-45147.charlton.irccloud.com)
[09:18:32] *** Joins: palter (sid27521@brockwell.irccloud.com)
[09:18:32] *** Joins: travv0 (sid293381@user/travv0)
[09:18:32] *** Joins: jhi (sid81469@tooting.irccloud.com)
[09:18:32] *** Joins: conjunctive (sid433686@brockwell.irccloud.com)
[09:18:32] *** Joins: jcowan (sid325434@id-325434.charlton.irccloud.com)
[09:18:32] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[09:18:32] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[09:18:32] *** Joins: Krystof (~user@81.174.155.115)
[09:18:32] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[09:18:32] *** Joins: hisacro (~OBSD@my.displ.nl)
[09:18:32] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[09:18:32] *** Joins: sm2n (~sm2n@user/sm2n)
[09:18:32] *** Joins: santiagopim (~user@90.166.59.254)
[09:18:32] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[09:18:32] *** Joins: energizer (~energizer@user/energizer)
[09:18:32] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[09:18:32] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[09:18:32] *** Joins: pjb (~pjb@user/pjb)
[09:18:32] *** Joins: srhm (~ascii@user/srhm)
[09:18:32] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[09:18:32] *** Joins: luis (~luis@lisp/luis)
[09:18:32] *** Joins: phantomics (~phantomic@97-118-239-225.hlrn.qwest.net)
[09:18:32] *** iridium.libera.chat sets mode: +o luis
[09:18:32] *** Joins: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad)
[09:18:32] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[09:18:32] *** Joins: aeth (~aeth@user/aeth)
[09:18:32] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[09:18:32] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[09:18:32] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[09:18:32] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[09:18:32] *** Joins: zagura (~zagura@user/zagura)
[09:18:32] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[09:18:32] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[09:18:32] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[09:18:32] *** Joins: dim (~dimlibera@2a02:2178:2:4:1658:d0ff:fe49:408c)
[09:18:32] *** Joins: ane (ane@shell.wilan.org)
[09:18:32] *** Joins: loke (~loke@junk.nocrew.org)
[09:18:32] *** Joins: remexre (~nathan@user/remexre)
[09:18:32] *** Joins: beach (~user@2a01:cb19:150:3400:2606:4cb6:32f2:ab73)
[09:18:32] *** Joins: raeda (~raeda@72.49.219.33)
[09:18:32] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[09:18:32] *** Joins: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net)
[09:18:32] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[09:18:32] *** Joins: sterni (~lukas@user/sterni)
[09:18:32] *** Joins: mariari (~mariari@user/mariari)
[09:18:32] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[09:18:32] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[09:18:32] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[09:18:32] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[09:18:32] *** Joins: totoro2021 (~totoro@173.82.187.126)
[09:18:32] *** Joins: micro (~micro@user/micro)
[09:18:32] *** Joins: danieli (~danieli@user/danieli)
[09:18:32] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[09:18:32] *** Joins: moon-child (~moon-chil@cardinal.elronnd.net)
[09:18:32] *** Joins: lsip123_win10 (~user@80.227.170.170)
[09:18:32] *** Joins: victor (sid208353@user/victor)
[09:18:32] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[09:18:32] *** Joins: mingus (~jan-magnu@ti0135a400-2471.bb.online.no)
[09:18:32] *** Joins: tux0r- (~tux0r@rosaelefanten.org)
[09:18:32] *** Joins: gpiero_ (~quassel@camale.rm-rf.it)
[09:18:32] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[09:18:32] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[09:18:32] *** Joins: ck_ (~ck@plskthx.org)
[09:18:32] *** Joins: jfb4 (~jfb4@178.62.2.68)
[09:18:32] *** Joins: _death (~death@adeht.org)
[09:18:32] *** Joins: leo_song (~leo_song@1.156.52.78)
[09:18:32] *** Joins: samebchase (~thelounge@51.15.68.182)
[09:18:32] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[09:18:32] *** Joins: borodust (~irc@user/borodust)
[09:18:32] *** iridium.libera.chat sets mode: +o MichaelRaskin
[09:18:32] *** Joins: mgxm (~mgxm@user/mgxm)
[09:18:32] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[09:18:32] *** Joins: Xach (~xach@user/xach)
[09:18:32] *** Joins: skyl4rk (~tlvb@user/tlvb)
[09:18:32] *** Joins: mason (~mason@redhat/mason)
[09:18:32] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[09:18:32] *** Joins: dbotton (sid492350@id-492350.tooting.irccloud.com)
[09:18:32] *** Joins: splittist (sid17737@id-17737.tinside.irccloud.com)
[09:18:32] *** Joins: markasoftware (~quassel@107.161.26.124)
[09:18:32] *** Joins: etiago (~etiago@user/etiago)
[09:18:32] *** Joins: hubvu (sid495858@id-495858.tinside.irccloud.com)
[09:18:32] *** Joins: cpape` (~user@2a01:4f9:c010:632d::1)
[09:18:32] *** Joins: deck4rd (~deckard@ec2-3-129-211-221.us-east-2.compute.amazonaws.com)
[09:18:32] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[09:18:32] *** Joins: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa)
[09:18:32] *** Joins: ^[ (~user@user//x-8473491)
[09:18:32] *** Joins: flip214 (~marek@user/flip214)
[09:18:32] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[09:18:32] *** Joins: hirez (~hirez@104.128.237.40)
[09:18:32] *** Joins: jdz (~jdz@185.23.160.114)
[09:18:32] *** Joins: phadthai (mmondor@ginseng.pulsar-zone.net)
[09:18:32] *** Joins: spec (~mrSpec@user/spec)
[09:18:32] *** Joins: sgithens (sid10659@id-10659.brockwell.irccloud.com)
[09:18:32] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[09:18:32] *** Joins: fishfinger_ (~fishfinge@178.62.22.133)
[09:18:32] *** Joins: kagevf (~jfh@ip68-224-125-162.lv.lv.cox.net)
[09:18:32] *** Joins: gabc (~gabc@user/gabc)
[09:18:32] *** Joins: commandoline_ (~commandol@ubuntu/member/commandoline)
[09:18:32] *** Joins: pok (~pok@user/pok)
[09:18:32] *** Joins: lonjil (~quassel@user/lonjil)
[09:18:32] *** Joins: ChanServ (ChanServ@services.libera.chat)
[09:18:32] *** Joins: jemoka (~jemoka@user/jemoka)
[09:18:32] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[09:18:32] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[09:18:32] *** Joins: pl (sid98063@id-98063.brockwell.irccloud.com)
[09:18:32] *** iridium.libera.chat sets mode: +oooo Xach ChanServ fe[nl]ix pl
[09:18:32] *** Joins: |3b| (bbb@user/3b/x-2324788)
[09:18:32] *** Joins: phoe (~phoe@user/phoe)
[09:18:32] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[09:18:32] *** Joins: Fade (fade@outrider.deepsky.com)
[09:18:32] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[09:18:32] *** Joins: antoszka (~antoni@rozalia.antoszka.pl)
[09:18:32] *** Joins: skempf (~Kabriel@user/kabriel)
[09:18:32] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[09:18:32] *** Joins: cheers (user@2600:3c00::f03c:91ff:fe1c:3c39)
[09:18:32] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[09:18:52] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (Ping timeout: 245 seconds)
[09:19:12] *** Quits: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad) (Ping timeout: 272 seconds)
[09:20:01] *** Quits: Fare (~fare@2601:184:4a7f:995c:e911:9fa9:22be:31ec) (Ping timeout: 258 seconds)
[09:20:16] *** Quits: dsk (~dsk@user/dsk) (Remote host closed the connection)
[09:20:20] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Ping timeout: 256 seconds)
[09:20:20] *** Quits: drmeister (sid45147@id-45147.charlton.irccloud.com) (*.net *.split)
[09:20:20] *** Quits: jcowan (sid325434@id-325434.charlton.irccloud.com) (*.net *.split)
[09:20:20] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (*.net *.split)
[09:20:20] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[09:20:21] *** Quits: theBlackDragon (~dragon@fvwm/admin) (*.net *.split)
[09:20:21] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[09:20:21] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[09:20:45] *** Joins: drmeister (sid45147@id-45147.charlton.irccloud.com)
[09:20:45] *** Joins: jcowan (sid325434@id-325434.charlton.irccloud.com)
[09:20:45] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[09:20:45] *** Joins: aeth (~aeth@user/aeth)
[09:20:45] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[09:20:45] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[09:20:45] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[09:22:42] *** Quits: mariari (~mariari@user/mariari) (*.net *.split)
[09:22:42] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (*.net *.split)
[09:22:42] *** Quits: sterni (~lukas@user/sterni) (*.net *.split)
[09:23:02] *** Joins: mariari (~mariari@user/mariari)
[09:23:27] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[09:23:34] *** Joins: sterni (~lukas@user/sterni)
[09:23:38] *** Quits: cromyr (~cromyr@1.132.105.57) (Quit: Client closed)
[09:24:11] *** Quits: cpape` (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[09:24:11] *** Quits: ^[ (~user@user//x-8473491) (*.net *.split)
[09:24:11] *** Quits: jdz (~jdz@185.23.160.114) (*.net *.split)
[09:24:11] *** Quits: fishfinger_ (~fishfinge@178.62.22.133) (*.net *.split)
[09:24:11] *** Quits: kagevf (~jfh@ip68-224-125-162.lv.lv.cox.net) (*.net *.split)
[09:24:11] *** Quits: commandoline_ (~commandol@ubuntu/member/commandoline) (*.net *.split)
[09:24:11] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[09:24:11] *** Quits: ane (ane@shell.wilan.org) (*.net *.split)
[09:24:11] *** Quits: pok (~pok@user/pok) (*.net *.split)
[09:24:11] *** Quits: jemoka (~jemoka@user/jemoka) (*.net *.split)
[09:24:11] *** Quits: |3b| (bbb@user/3b/x-2324788) (*.net *.split)
[09:24:11] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[09:24:11] *** Quits: cheers (user@2600:3c00::f03c:91ff:fe1c:3c39) (*.net *.split)
[09:24:11] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[09:24:15] *** Joins: ane_ (ane@shell.wilan.org)
[09:24:17] *** Joins: commandoline (~commandol@ubuntu/member/commandoline)
[09:24:17] *** Joins: cpape`` (~user@2a01:4f9:c010:632d::1)
[09:24:17] *** Joins: greaser|q (greaser@antihype.space)
[09:24:19] *** Joins: pok_ (~pok@castor.klingenberg.no)
[09:24:22] *** Joins: kagevf (~jfh@ip68-224-125-162.lv.lv.cox.net)
[09:24:22] *** Joins: phoe (~phoe@2001:19f0:5:689f:5400:2ff:fe77:b1de)
[09:24:23] *** Joins: gabc_ (~gabc@user/gabc)
[09:24:23] *** pok_ is now known as pok
[09:24:25] *** Joins: cheers (user@2600:3c00::f03c:91ff:fe1c:3c39)
[09:24:28] *** Quits: phoe (~phoe@2001:19f0:5:689f:5400:2ff:fe77:b1de) (Changing host)
[09:24:28] *** Joins: phoe (~phoe@user/phoe)
[09:24:33] *** Joins: |3b| (bbb@user/3b/x-2324788)
[09:24:56] *** Joins: jemoka_ (~jemoka@user/jemoka)
[09:25:05] *** Quits: pok (~pok@castor.klingenberg.no) (Changing host)
[09:25:05] *** Joins: pok (~pok@user/pok)
[09:25:18] *** Joins: jdz (~jdz@185.23.160.114)
[09:26:13] *** Quits: knobo (~knobo@c092BBF51.dhcp.as2116.net) (Ping timeout: 246 seconds)
[09:26:20] *** Joins: fishfinger (~fishfinge@178.62.22.133)
[09:32:18] *** Joins: Fare (~fare@2601:184:4a7f:995c:6dd:4a8:985:727d)
[09:43:55] *** Alfr is now known as Guest3689
[09:43:55] *** Quits: Guest3689 (~Alfr@user/alfr) (Killed (lead.libera.chat (Nickname regained by services)))
[09:43:59] *** Joins: Alfr (~Alfr@user/alfr)
[09:45:19] *** Joins: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad)
[09:50:26] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[09:51:00] *** Joins: hayley (~theemacss@2001:470:69fc:105::234)
[09:51:27] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[09:53:55] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:54:07] *** Quits: hayley (~theemacss@2001:470:69fc:105::234) (Changing host)
[09:54:07] *** Joins: hayley (~theemacss@user/hayley)
[09:55:48] <contrapunctus> Is there any way to get SLIME to display function/macro signatures in greater detail? e.g. for defclass I see just `(defclass name direct-superclasses direct-slots &rest options)`, whereas I'd like to see the slot and class options too 🤔️ (without going the CLHS route)
[10:00:00] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[10:02:08] <beach> I think SLIME is just using the information provided by the implementation.  So either you change the lambda list of the macro in the implementation, or else you make SLIME use some additional information.
[10:10:34] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[10:19:14] *** ane_ is now known as ane
[10:19:18] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 268 seconds)
[10:24:39] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[10:24:51] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[10:24:55] *** Joins: shka (~herr@109.231.62.239)
[10:27:43] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:33:13] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[10:35:30] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[10:36:15] *** Joins: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7)
[10:37:10] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[10:37:29] *** Joins: asarch (~asarch@2806:10ae:7:defb:627b:ef7f:734a:76f5)
[10:42:06] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[10:49:57] *** Joins: Cymew (~ante@host-217-213-111-64.mobileonline.telia.com)
[10:55:56] *** Joins: heretical_crypte (~heretical@2001:470:69fc:105::8054)
[11:00:36] <susam> Good morning, beach!
[11:00:40] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[11:00:41] <susam> Good morning, everyone!
[11:03:09] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[11:03:20] <beach> Hello susam.
[11:03:41] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 268 seconds)
[11:14:48] *** Quits: lad (~lad@user/lad) (Ping timeout: 268 seconds)
[11:15:50] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[11:16:18] *** Joins: john__ (~john@dynamic-095-118-023-212.95.118.pool.telefonica.de)
[11:22:00] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[11:26:30] *** Quits: Fare (~fare@2601:184:4a7f:995c:6dd:4a8:985:727d) (Ping timeout: 272 seconds)
[11:29:53] *** Joins: psycomic (~psycomic@2a01cb0588c5e400f979b12e567d3038.ipv6.abo.wanadoo.fr)
[11:31:25] *** Joins: pve (~pve@37-33-8-14.bb.dnainternet.fi)
[11:32:11] *** Joins: Michal (~user@5.30.23.247)
[11:32:19] <Michal> Hello
[11:32:30] <Michal> Can I ask a question?
[11:32:34] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[11:32:37] <beach> Hello Michal.
[11:32:42] <beach> Of course.  Go right ahead.
[11:32:52] <Michal> Thanks Beach
[11:33:13] <Michal> Is it possible to inherit all symbols of a package, not just the exported ones of that package?
[11:33:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[11:33:25] <Michal> So I don't need to refer to internal symbols with a "::"
[11:33:48] *** Lord_of_Life_ is now known as Lord_of_Life
[11:33:52] <beach> It is possible to do it programmatically, but that's a really bad idea.
[11:34:00] <beach> Even referring to them with :: is a bad idea.
[11:34:35] <beach> Even USE-ing a package (other than the CL package) is a bad idea.
[11:35:52] <beach> A package exports precisely the symbols that are meant to be used by client packages.  There is some assumption that those symbols won't change or do anything different in the future.
[11:36:29] <beach> But internal symbols are basically anything else, like the parameter x in a function.  You don't want to use those in a client package.
[11:41:15] <Michal> Thank you, I agree
[11:41:36] <Michal> I am actually trying to write some test packages so the test package is sort of like the main package
[11:42:30] <lisp123_> Is it possible to use the same package name within the test package?
[11:42:51] <beach> In my experience, it is best to test your code using only exported functionality.  Otherwise, you have to rewrite the tests whenever some implementation detail changes.
[11:44:21] <Michal> I see, thank you
[11:44:33] <Michal> I understand that perspective, perhaps I should try it that way.
[11:45:33] *** Quits: asarch (~asarch@2806:10ae:7:defb:627b:ef7f:734a:76f5) (Quit: Leaving)
[11:45:37] <rain3> beach: for a few months I followed the advice "USE-ing a package (other than the CL package) is a bad idea." to the extreme . But then my defpackages definitions were very long, they would fill an entire screen and I would spend a lot of time specifying :import-from ... . I have come to the understanding that it is as bad as always using just :use
[11:46:46] <beach> rain3: I think that means that your packages contain more functionality than they should.
[11:47:15] <hayley> You could use package local nicknames as a compromise between typing no prefix with :use or typing all the package prefix. For example, while the name of one package I use is SICL-REGISTER-ARRANGEMENTS, I only type the prefix ARR: as a package local nickname was used.
[11:47:28] <beach> rain3: I tend to structure my code into "modules", where each module resides in a directory, has one ASDF system definition, and one package definition.
[11:47:43] <hayley> But yeah, it is also possible you are doing too much in a package/module.
[11:48:57] <rain3> ok . I'll continue observing , maybe I missed this
[11:50:23] <Michal> Oh I see, thank you hayley. I saw package local nicknames but did not know what they were for.
[11:50:49] <pve> Michal: what kind of tests are you writing?
[11:51:59] <Michal> On a related question, how many exported functions is "too much" for a package, because I am facing a similar issue to rain3 in that I have too many symbols in a package. Hence, I put them all into one package to avoid having to keep amending my export list. But at the same time, from a testing perspective, I wanted to test the 'submodules' if you may call them that - not the most elementary functions, but not the ultimate high level
[11:51:59] <Michal> function either
[11:52:08] <Michal> pve: I am using Parachute
[11:53:26] <lisp123_> I am curious to this question as well!
[11:53:30] *** Quits: sterni (~lukas@user/sterni) (Quit: WeeChat 2.9)
[11:53:48] <beach> Michal: You can't put a number on that.  A module should ideally do one thing.  Typically, it's the definition of some abstract data type.  Then the exported symbols are the names of classes and generic functions of the protocol for that abstract data type.
[11:53:49] <hayley> I think the question is what you are testing; say, some exported functions, some internal data structure, a whole application, or so on.
[11:54:08] *** Joins: sterni (~lukas@user/sterni)
[11:55:18] <hayley> (loop for x being the external-symbols of (find-package 'netfarm) count t) ; ⇒ 106, so I can't really complain about fewer than 106 symbols.
[11:55:24] <beach> Michal: Modularity works basically the same in most programming languages.  You split up your code into modules that are coherent in some way.
[11:55:36] <Michal> I would like to test certain steps that make up an exported function for example.
[11:55:37] <beach> Michal: Then, the number of exported symbols should be small.
[11:56:04] <pve> Michal: ok, I didn't mean what framework you are using, but rather what you are testing, like hayley said
[11:56:05] <hayley> (loop for x being the external-symbols of (find-package 'clim) count t) ; ⇒ 1955, but I hear that's quite tame for a full GUI toolkit. I heard the Swift UI stuff goes into tens of thousands?
[11:56:27] <Michal> Thank you Beach. What if my exported symbol had some complex logic behind it, and I want to test each part
[11:56:38] <beach> hayley: Also, CLIM was specified at a time when it seems the package system was under-used.
[11:57:08] <beach> Michal: Then in those few cases you use ::.
[11:57:38] <Michal> Hello pve. I think it falls under a mix of unit testing vs. integration testing (I wonder where the boundary is)
[11:57:59] <hayley> It depends on the logic, but generally you write enough tests to cover as many paths as possible.
[11:58:00] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[11:58:03] <Michal> Thank you Beach.
[11:58:03] <beach> Michal: Using :: has the additional advantage that you immediately indicate to the person reading your code that there is something fishy going on.  And that person is likely you in a few weeks.
[11:59:05] <Michal> That I agree, at least in the main code. But for testing, does that hold true as well?
[11:59:07] <beach> Michal: Would you like to expose the code of your big package so that people can give you feedback?
[11:59:33] <hayley> I only use one internal symbol in perhaps all my tests, and it is just to help observe the "progress" of a running concurrent program.
[12:00:18] <beach> Michal: Again, testing is best done using only the external protocol.  I strongly suspect your code has modularity issues.
[12:00:26] *** Quits: john__ (~john@dynamic-095-118-023-212.95.118.pool.telefonica.de) (Ping timeout: 268 seconds)
[12:00:33] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:00:40] <hayley> Oh, I found another one, but it is just to get everything into a steady state before a benchmark. And, admittedly, it is pointless because unless I am modifying the code between tests, it should be in a stable state already.
[12:02:10] <Michal> Thank you. Let me revisit and fix that. So to conclude, its a warning sign if one is having to test internal symbols?
[12:02:29] *** Joins: Fare (~fare@2601:184:4a7f:995c:e735:1870:1c37:da7c)
[12:02:37] <hayley> A few years ago I thought I just had one module, but then I rewrote it and kept refactoring, and I ended up with ten. Go figure.
[12:03:14] <Michal> Thank you hayley, seeing that perspective gives me hope that I need to keep working on my code and not assume its correct at the moment
[12:03:17] <beach> Michal: Exceptionally, it can be useful, but then, just mark those situations clearly by using ::.
[12:03:36] <hayley> Generally, yes. But it is reasonable to check if internal invariants are held, for example.
[12:03:36] <Michal> I will try to reduce the number of internal symbols in my testing. Something to think about.
[12:04:11] <beach> Michal: Again, you may want to expose your code on a past site for feedback.
[12:04:34] <beach> Michal: That could resolve some issues.  We are kind of left guessing why you are having these difficulties.
[12:06:12] *** Quits: sterni (~lukas@user/sterni) (Quit: WeeChat 2.9)
[12:06:51] *** Joins: sterni (~lukas@user/sterni)
[12:07:38] <Michal> One second
[12:07:46] <Michal> Let me clean it up a bit.
[12:07:56] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[12:12:19] <Michal> It may not be perfect, but here's some of the main code. It has one exported function 'generate-core-data' which takes a series of returns and calcualtes a bunch of statistics
[12:12:27] <Michal> The rest of the file is the statistics calculations
[12:12:31] <Michal> https://pastebin.ubuntu.com/p/Qf44Fdgxvs/
[12:13:10] <Michal> So I only wanted to expose 'generate-core-data' because that produces the 'master set of statistics', and not each of the individual statistic generating functions
[12:14:58] <beach> Michal: There is A LOT of code duplication in there.  Maybe if you find the right commonalities, the modularity will be more obvious.
[12:16:11] <beach> The only difference between PORT-WORST-MOTH and BENCH-WORST-MONTH seems to be 1 or 2.
[12:16:22] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[12:17:57] <Michal> Thank you. That makes sense.
[12:18:18] <beach> Michal: Certainly, if you refactor this code in the obvious way, you won't have to test each individual function, because each such function would be a trivial wrapper around a single function, so only the common function needs to be tested.
[12:19:33] <beach> I don't even see any difference between PORT-FREQ-PERFORMANCE and BENCH-FREQ-PERFORMANCE.
[12:19:49] <Michal> And would you put the common function in its own package?
[12:19:51] <beach> Oh, fourth and fifth.
[12:20:12] <Michal> Yes, its like a spreadsheet of returns & calculations. Hence the column number is the common change
[12:20:17] <beach> I think you can think about that later when you figure out what the abstractions are.
[12:20:37] <beach> So why not do the obvious thing and pass the number as an argument?
[12:21:22] <Michal> Yes, it seems obvious in retrospect.
[12:21:25] <beach> then FREQ-PERFORMANCE is a function that takes an additional argument, and PORT-FREQ-PERFORMANCE and BENCH-FREQ-PERFORMANCE would call that common function with 1 or 2.
[12:21:47] <beach> Once you do this, you will likely find other commonalities.
[12:22:02] <beach> Then, I think your abstractions should be more obvious.
[12:22:22] <Michal> Okay, let me try.
[12:23:03] <Michal> I still don't like the whole passing core-data everywhere, but given the complexities of some of the calculations (they depend on values up to a certain point in the series), some of it was unavoidable.
[12:23:22] <beach> Michal: This kind of code is almost impossible to maintain.  If a change needs to be made, then it must be made in the same way in several places.  That's a big no-no.
[12:23:30] <Michal> Not unavoidable, sorry, but the complexity was unavoidable. But let me try at least with these simple wins.
[12:23:57] <beach> If you don't like passing core-data, use a (special) dynamic variable.
[12:24:31] <beach> I think this code can be condensed to a 10th of what it is.
[12:24:34] <Michal> Thank you, perhaps that's why testing for it seemed laborious.
[12:24:52] <beach> I suspect that is the case, yes.
[12:25:48] <Michal> Thanks.
[12:26:00] <beach> Michal: Simple thing: you compute start-row and end-row in every single function.  Why not abstract that into a function that returns two values?
[12:26:40] *** Quits: Fare (~fare@2601:184:4a7f:995c:e735:1870:1c37:da7c) (Ping timeout: 240 seconds)
[12:26:57] <beach> Michal: Is Common Lisp your first programming language?
[12:27:15] <Michal> I used Microsoft Excel before
[12:27:36] <beach> Ah, OK.  That explains why you are not so used to creating abstractions.
[12:27:46] <Michal> They introduced Lambda functions and that got me searching online
[12:28:10] *** Joins: asarch (~asarch@2806:10ae:7:defb:627b:ef7f:734a:76f5)
[12:28:16] <hayley> Lines 117-151 look like they could be simplified into one function which takes a column index, and a function to apply to the column.
[12:28:18] <beach> Michal: It is almost a rule that, whenever you see some duplication, even if it has a slight variation, you should create an abstraction for it.
[12:28:40] <pve> Michal: If the code is working now, you might write a couple of tests for generate-core-data before you start refactoring the individual functions
[12:29:42] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[12:30:14] <Michal> Thank you, I will try to pick up the duplications and think of minimising them (including lines 117 - 151)
[12:30:50] <beach> Good luck.  And feel free to expose your improvements.
[12:32:22] <Michal> Pve, thank you that is a good idea.
[12:33:38] <Michal> Thank you Beach, I may do that once I do a second version. At least my code is working now (well I think), so the light at the end of the tunnel is not too far.
[12:34:25] <Michal> Time to clean it up.
[12:34:41] <beach> Sure.  Good luck.
[12:35:51] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:46] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:40:05] <beach> This code creates an almost irresistible desire for me to refactor it.
[12:40:19] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[12:41:46] <beach> Michal: I would also attempt to bundle up start-year, start-month, end-year, end-month into an object called, say, PERIOD.
[12:41:58] <beach> Or INTERVAL.
[12:50:16] <Michal> I will have a think about that.
[12:50:47] <Michal> By the way, if you can refactor it and release it as a library, you will basically cover the requirements of most investment funds for basic statistics
[12:51:35] <Michal> I need to add portfolio and benchmark attribution, and I think that's about it in terms of what is required for performance measurement
[12:53:36] <pve> Michal: is some part of this difficult to do with excel? (not an excel expert)
[12:56:22] <Michal> I just transcribed my excel formulae into Common Lisp, which partly would explain the way its written. The main complexity is that (a) the input data is a time series (dates, returns for those dates) and (b) many of the statistics rely upon all the statistics of every date upto that period. So one needs to store all the intermediate results
[12:57:09] <Michal> I guess a mapping function may be of use here, I will see if that works. But its some relatively complex interdependencies (but always one way - at any point in time, one needs the data before it but not after it).
[12:58:14] <Michal> For example, if you see the main core-data function - you can see how many let variables are defined in it - each one being used in subsequent ones
[12:58:43] <Michal> So my solution was to keep all this data in a 'core-data' object, which gets passed in each time.
[13:03:55] <pve> Michal: are you saying you hade no previous programming experience, besides excel?
[13:06:40] <Michal> I did a bit of Visual Basic
[13:07:15] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[13:08:22] <pve> Michal: Mathematical background? I'm impressed that you recursively generate the core date. Not something a beginner would do, I'm guessing.
[13:08:28] <pve> *data
[13:12:17] <Michal> Thanks Pve. I don't know, I was trying it for a while :)
[13:12:34] <Michal> I have a bit of maths background but only high school
[13:13:14] <Michal> I just replicated the formulas in my Excel sheet. Since they required all the prior rows, I stored this in 'core-data' and then kept adding to it
[13:14:07] <Michal> I think I saw some basic example of recursion in the Lisp tutorials, so perhaps that's what guided me.
[13:14:25] <rain3> cool
[13:15:22] <lisp-newbie> Hi, I'm inside a macro trying to concatenate a string, and for some reason it compiles as a function. I think because the string is turned into a symbol instead of a string. I've tried doing this: (nth-value 2 (function-lambda-expression #'+)) replaceing the + for the string, with no success. Any ideas?
[13:15:40] <pve> Michal: cool, indeed
[13:16:19] <lisp-newbie> maybe (string xx), will try
[13:16:40] <beach> lisp-newbie: What you are saying makes no sense to me.  Maybe show some code, what you expected, and what you got instead?
[13:16:57] <beach> lisp-newbie: A string can't "compile as a function".
[13:16:59] <lisp-newbie> beach will do one sec
[13:17:19] <beach> And strings don't get "turned into symbols" just like that.
[13:17:36] <beach> And then the example code seems unrelated to your string concatenation.
[13:18:38] <lisp-newbie> beach here: https://pastebin.com/W40bMp4d
[13:19:00] <lisp-newbie> when I run it get this: Evaluation aborted for #<SB-PCL::NO-APPLICABLE-METHOD-ERROR {10040E3603}>
[13:19:18] *** Joins: selwyn (~selwyn@user/selwyn)
[13:19:56] <lisp-newbie> that's like a simplified version, I've broken up the larger macro into smaller peaces because going at it at once didn't work...
[13:22:43] <beach> There is no problem with the macro that I can see, except that the call to STRING seems superfluous.  And the error must be generated by the call to DEFROUTE, and not from the macro expansion.
[13:23:03] <ck_> you're saying (defroute ("some-route" ..)) when you should have (defroute "some-route" ..)
[13:23:14] <lisp-newbie> beach it seems to me that the evaluator is ignoring the backquote and trying to evaluate the defroute function even though it has no comma
[13:23:37] <beach> lisp-newbie: That makes no sense.
[13:24:03] *** Joins: voltron (~voltrin_@ip5f5993ed.dynamic.kabel-deutschland.de)
[13:24:12] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[13:24:29] <lisp-newbie> beach I addded the call to string because without it I was getting an error of trying to evaluate the string as a function saying it's not a function... one sec I will try something else
[13:24:34] <beach> lisp-newbie: Furthermore, your code has no trace of a string being turned into a symbol, nor of any FUNCTION-LAMBDA-LIST that you mentioned.
[13:24:56] <lisp-newbie> right, I changed that because it didn't work. one sec let me try something
[13:25:23] <beach> lisp-newbie: I don't recommend you introduce things arbitrarily without understanding what the problem is.
[13:25:49] <beach> lisp-newbie: I think ck_ may be onto something.  I don't know the operator you are applying so I can't help with that.
[13:26:01] <lisp-newbie> beach I think it may be because in the repl where I evaluated it the function defroute was not available, so I'm trying to do it in the correct package...
[13:26:37] <lisp-newbie> beach ck_ thanks, there are two syntaxes, if I want to determine the HTTP method, then it's done with a parenthesis like this ("someroute" :method :POST)
[13:26:38] <rain3> lisp-newbie: first forget all about caveman , just reduce your thinking to the most basic unit of functionality you're trying to achieve. you said you want to obtain a string, or a symbol, so just focus on that first
[13:26:38] <beach> The existence or not of defroute can't possible influence the expansion of the macro.
[13:27:18] <lisp-newbie> beach that's what I thought... but then you said "And the error must be generated by the call to DEFROUTE, and not from the macro expansion."
[13:27:25] <lisp-newbie> what did you mean by that?
[13:27:52] <beach> That I don't see any thing in the macro that could have signaled such an error.
[13:28:18] <beach> Besides, you didn't show the details of the error message.
[13:28:26] <beach> Normally, it mentions the function in question.
[13:28:48] <lisp-newbie> beach oy vey, realized forgot the quote when calling macro expand
[13:28:58] <lisp-newbie> fixed it
[13:29:02] <lisp-newbie> sorry for the confusion
[13:30:40] *** Quits: Michal (~user@5.30.23.247) (Ping timeout: 240 seconds)
[13:32:08] <gin> hunchentoot easy-acceptor listens on all interfaces by default. is there a way to restrict it to listen on 127.0.0.1 only?
[13:33:26] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[13:34:36] <rain3> maybe giving the key :address "127.0.0.1"  							     )
[13:34:36] <rain3>  .
[13:36:58] <rain3> (swank:inspect-in-emacs (find-class 'hunchentoot:easy-acceptor))
[13:41:19] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[13:43:34] <gin> rain3: thanks! that works.
[13:43:42] *** Joins: Michal (~user@5.30.23.247)
[13:45:16] <beach> Why use the SLIME inspector rather than Clouseau?
[13:46:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:47:14] <rain3> good question, that shows how old habits die hard
[13:49:37] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[13:50:46] <rain3> (ql:quickload '(clouseau)) (clouseau:inspect (find-class 'hunchentoot:easy-acceptor) :new-process t)
[13:51:03] <beach> Yes.
[13:59:30] *** Quits: asarch (~asarch@2806:10ae:7:defb:627b:ef7f:734a:76f5) (Quit: Leaving)
[14:02:35] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Read error: Connection reset by peer)
[14:08:08] *** Joins: makomo (~makomo@user/makomo)
[14:09:13] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 248 seconds)
[14:09:46] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[14:11:55] <lisp123> Is log4cl the recommended logging library?
[14:12:28] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[14:12:58] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[14:19:55] <antoszka> Oh, I love the name, Inspector Clouseau — was one of my fav childhood comedies.
[14:28:24] <beach> Tim Moore came up with the name.
[14:29:07] <antoszka> Excellent.
[14:29:51] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-85A7-dynamic.midco.net)
[14:30:21] <beach> I think I wrote most of the first version, but then scymtym rewrote it completely, and it is now a very nice program that can also be customized in lots of ways.
[14:31:47] <beach> For instance, I was able to customize it to recognize "ersatz" SICL objects during bootstrapping, so that I didn't have to stare at the host version of those objects.
[14:32:59] <antoszka> Nice.
[14:34:04] <beach> Of course, the customization ability is also what makes it highly modular.  There is no difference between adding new kinds of objects to inspect and adding standard object types.
[14:38:12] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[14:38:25] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[14:38:38] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Remote host closed the connection)
[14:38:47] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[14:38:47] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Client Quit)
[14:38:50] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:d522:7d2b:5449:bfca)
[14:42:13] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:d522:7d2b:5449:bfca) (Remote host closed the connection)
[14:43:30] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[14:45:16] <gin> another hunchentoot question: is there a way to prevent the REPL from quitting when top-level is done? I want the REPL to stay alive as long as Hunchentoot is running.
[14:48:09] *** Quits: Cymew (~ante@host-217-213-111-64.mobileonline.telia.com) (Ping timeout: 268 seconds)
[14:48:36] <lisp123> gin: That is strange, can you share your code?
[14:48:47] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[14:49:01] <gin> lisp123: (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port 4242))
[14:49:21] <lisp123> Thanks gin, but do you know why REPL is quitting?
[14:49:27] <lisp123> It shouldn't
[14:49:31] <gin> lisp123: because the top-level exits
[14:49:41] <lisp123> Why is that
[14:49:50] <lisp123> What IDE are you using?
[14:49:58] <gin> lisp123: IDE?
[14:50:08] <lisp123> Are you using Emacs / Slime for example?
[14:50:35] <gin> lisp123: yes. but that is unrelated to my question. I want to keep the top-level running as long as hunchentoot is running.
[14:51:12] <lisp123> What happens if you do M-x slime-restart-inferior-lisp and then (ql:quickload :hunchentoot) and then the above code?
[14:51:19] <lisp123> It shouldn't exit
[14:52:29] <gin> lisp123: yes, no problem in that case. now put that code in foo.lisp and run sbcl --script foo.lisp < /dev/null and the program will die as soon as top-level quits without really waiting for hunchentoot to shutdown
[14:52:57] <lisp123> Ah I see (I was suspecting that too)
[14:53:18] <flip214> gin: add a (sleep most-positive-fixnum) at the end
[14:53:48] <gin> flip214: thanks
[14:54:08] <lisp123> Perhaps add a loop which takes in user input, and then exit the loop on a certain command
[14:54:10] <flip214> or have some loop that acts on unix signals - reloading the config, cleanly quitting, etc.
[14:54:51] <gin> lisp123: wouldn't that loop quit too immediately because the standard input is directed to /dev/null?
[14:55:07] <gin> loop for unix signals sounds like a good solution
[14:55:22] <lisp123> gin: Would it be possible just to load the file in Slime directly?
[14:55:34] <lisp123> That way you can modify it as you go about your day, while not shutting down the server
[14:55:45] <lisp123> Unless you are planning on making an executable
[14:56:21] <gin> lisp123: for dev, yes. for running it an unattended manner, I am trying to integrate it with ubuntu systemctl which redirects the standard input to /dev/null
[14:56:51] <lisp123> Understood, thanks
[14:57:51] <lisp123> Just check if the loop doesn't cause you any issues
[14:59:43] <lisp123> https://stackoverflow.com/questions/30422451/sbcl-deploying-hunchentoot-application-as-executable
[15:02:03] <gin> lisp123: thanks! a little concerned that it needs to depend on an SBCL extension.
[15:02:57] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 245 seconds)
[15:03:35] *** Joins: pve_ (~pve@176-93-64-110.bb.dnainternet.fi)
[15:04:06] <lisp123> gin: Yeah, I agree. Perhaps not the end of the world though
[15:04:09] <lisp123> Try this also https://stackoverflow.com/questions/48103501/deploying-common-lisp-web-applications
[15:04:41] <gin> thanks!
[15:04:44] <lisp123> Good luck and if you find something useful, please do blog about it since it doesn't seem to be anything super concrete
[15:05:07] <hayley> It can be done with Bordeaux threads.
[15:05:37] <lisp123> Yeah, looks like it (gin - try the second link)
[15:05:49] <hayley> Just replace SB-THREAD with BT, and SB-THREAD:LIST-ALL-THREADS with BT:ALL-THREADS.
[15:05:57] <lisp123> Or that :)
[15:06:07] *** Quits: frgo (~frgo@p200300deef0cee00a99c244b7f2873f6.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:06:16] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[15:06:34] *** Joins: frgo (~frgo@p200300deef0cee00a99c244b7f2873f6.dip0.t-ipconnect.de)
[15:06:39] *** Quits: pve (~pve@37-33-8-14.bb.dnainternet.fi) (Ping timeout: 268 seconds)
[15:07:23] <gin> thanks hayley, lisp123. found a code example using bt:all-threads here: https://lisp-journey.gitlab.io/web-dev/
[15:09:00] <_death> better to just sleep and not depend on such implementation details
[15:11:31] *** Joins: random-nick (~random-ni@87.116.182.198)
[15:15:05] *** gabc_ is now known as gabc
[15:17:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:23:57] <gin> _death: is bt:all-threads considered to be implementation details?
[15:24:55] <_death> gin: I mean the details of what constitutes a "hunchentoot thread", and which one of them to wait on, and so on
[15:31:01] <gin> _death: understood. I like the simplicity of sleep solution too.
[15:35:27] <lisp123> How often do you like to use free variables in your code?
[15:36:03] <lisp123> I am finding I am using them more and more. For example, for print-object, I can create different versions, based on a global setting (which is a free variable in the print-object method)
[15:36:24] <hayley> You mean, special variables?
[15:36:29] <lisp123> I can see libraries doing similar things reasonably frequently, but it does seem a bit going away from a functinal style
[15:36:44] *** Quits: voltron (~voltrin_@ip5f5993ed.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[15:36:46] <lisp123> hayley - I'm not sure if its exactly the same
[15:36:51] <hayley> There is something like special variables in Haskell. Implicit parameters?
[15:37:40] <lisp123> a free variable is one that is not bound in the form and relies on functions called up higher (if my wording is correct), usually referring to global / special variables but not necessarily
[15:38:15] <hayley> Right.
[15:38:26] <lisp123> for example I could define -my-free-variable- within a LET
[15:38:48] <lisp123> and then any lets within that let, could refer to that -my-free-variable- --> so in this case, its not a special variable
[15:38:51] <lisp123> just a free one
[15:39:10] <lisp123> That way, I am not worried about other parts of the program changing its value
[15:39:42] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[15:40:21] <lisp123> Let me do an example
[15:42:33] *** Joins: voltron (~voltrin_@ip5f5993ed.dynamic.kabel-deutschland.de)
[15:43:34] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 272 seconds)
[15:44:24] <lisp123> https://pastebin.com/83y6K3wM
[15:44:25] <_death> gin: even better is not to quit once the function returns, i.e. not using --script.. instead you can use, say, --load
[15:45:23] <gin> _death: yes, tried sbcl --load too and it did not help since systemctl redirects stdin to /dev/null. So even with --load, sbcl quits as soon as it hits the last line of my top-level code.
[15:45:54] <lisp123> Color is a free variable within the inner let in this function - this is a trivial example, but I am frequently starting to use this paradigm for control flow // and other computations. Not sure if I am going down a dark path..
[15:46:21] <_death> gin: there's an old tool called detachtty (I use it on my server)
[15:56:07] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[15:58:51] *** Joins: derelict (~derelict@user/derelict)
[16:02:14] *** Joins: salvatore (~Username@5.170.16.91)
[16:05:46] *** Quits: salvatore (~Username@5.170.16.91) (Remote host closed the connection)
[16:10:27] <lisp123> Is there an equivalent for boundp for lexical bindings?
[16:13:29] <lisp123> I guess I could use a combination of symbol-value & ignore-errors
[16:13:38] <lisp123> Wonder if there was another way
[16:16:04] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[16:16:43] <akater[m]> lisp123: “If it were possible, the compiler would be very limited in the kinds of optimizations it could do.” — beach . The question seems to be popular.
[16:17:35] <lisp123> akater[m]: Is this in relation to boundp & lexical bindings?
[16:17:58] <hayley> The set of lexical bindings could be determined at compile time, but I don't see why you want it.
[16:17:59] <lisp123> symbol-value also *seems* to only work for global variables, I am investigating it further
[16:18:41] <lisp123> I am trying to create print-object, which will first read *print-method* and then determine which print configuration to use
[16:18:46] *** Joins: Cymew (~ante@host-217-213-111-64.mobileonline.telia.com)
[16:18:49] <hayley> clhs symbol-value
[16:18:50] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_symb_5.htm
[16:18:53] <lisp123> However, I would like to protect against unbound values
[16:18:56] <hayley> "symbol-value cannot access the value of a lexical variable."
[16:18:56] <akater[m]> lisp123: No need to.  You can not intrespect lexical scope.
[16:19:08] <hayley> Why would you create unbound variables?
[16:19:24] <lisp123> *print-method* will be a free variable within print-object
[16:19:47] <lisp123> which I will then set within various programs, but on occasion I may forget, I want it to take the default value
[16:19:58] <hayley> That is not a lexical variable, based on the naming convention.
[16:20:09] <lisp123> For that I want to know if its unbound. The easy solution is just to create a global variable for it to cover that case
[16:20:18] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[16:20:20] <mfiano> There are no global variables
[16:20:24] <hayley> Just use something like (defvar *print-method* :the-default-one) and you will have a default value.
[16:20:41] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[16:20:43] <lisp123> hayley: Yes :) I want to see if there is a way to avoid that
[16:20:43] <hayley> A "global variable" is just a special variable with a sensible default value.
[16:20:58] <hayley> Any way to avoid it would be categorically worse.
[16:21:01] <lisp123> akater[m]: Thanks for the confirmation
[16:21:50] <lisp123> hayley: Thanks. Now I am aware its not feasible (or desirable in most cases)
[16:23:14] <hayley> As you have a special variable, you could handle it being unbound, but I am not going to tell you how, because it would be a bad idea.
[16:23:40] <lisp123> It's not guaranteed to be a special variable (despite the use of *)
[16:23:53] <lisp123> its just a symbol within print-object
[16:24:06] <hayley> Well, it won't be any use as a "free variable" if it is not a special variable.
[16:24:07] <mfiano> Lots of bad ideas around here
[16:24:34] <lisp123> mfiano: lol
[16:25:36] <beach> If it's a lexical variable it is always bound.
[16:27:30] *** Joins: hhdave_ (~hhdave@ip212.ip-193-70-71.eu)
[16:27:40] <lisp123> https://pastebin.com/83y6K3wM
[16:27:58] <lisp123> Imagine if the second inner let was its own function
[16:28:03] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 268 seconds)
[16:28:04] *** hhdave_ is now known as hhdave
[16:28:05] <beach> lisp123: Please indent your code correctly.
[16:28:06] <mfiano> Mixing tabs and spaces is also a bad idea
[16:28:45] <lisp123> Sorry that was the copy/paste, one second
[16:29:07] <mfiano> It looks indented correctly, but your editor is misconfigured.
[16:29:22] * hayley tries to count the characters for CL-USER> but finds a tab.
[16:29:22] <mfiano> So it won't to everyone else, including web paste services.
[16:30:29] <mfiano> also tell lisp123 about FORMAT
[16:32:20] <beach> lisp123: If the inner LET were a function, how would it then bind a variable?
[16:32:49] <lisp123> beach: you are right, I just got that error while trying to re-create the formatted code
[16:33:17] * mfiano points to COmmon Lisp Recipes again
[16:33:24] <mfiano> err
[16:33:28] <mfiano> Practical Common Lisp
[16:33:28] <lisp123> https://pastebin.com/Scnvk93g
[16:34:52] <beach> lisp123: In BAR, the variable COLOR is unbound, unless of course it has been declared SPECIAL.
[16:35:05] <lisp123> beach: yes
[16:35:30] <beach> So what's the problem?
[16:36:22] <mfiano> It's still mis-indented due to your use of tab characters, which leads me to believe your swank client is not properly connected.
[16:36:32] <lisp123> https://pastebin.com/ijmy3Pke
[16:37:16] <beach> So what's the problem?
[16:37:17] <lisp123> So I have added in a special declaration to make it work
[16:37:52] <_death> you need another special declaration at the point of reference
[16:38:28] <beach> lisp123: What _death said.  You now have a lexical COLOR in BAR and a special one in FOO.
[16:39:01] <mfiano> This is why defvar/defparameter special declaration with conventional earmuffs is a good idea.
[16:39:08] <lisp123> Do I need (locally (declare (special color)) color) within bar?
[16:39:15] <beach> And your lack of earmuffs means you are violating the naming convention.
[16:39:57] <lisp123> beach: So looks like you guys solved my problem.
[16:40:08] <lisp123> Despite all the confusion I created
[16:40:25] <lisp123> My original question earlier was to get boundp to refer to lexical bindings
[16:40:45] <lisp123> But as the variables need to be special anyway, that question has disappeared
[16:40:46] <beach> You can't and you don't have to, because lexical variables are always bound.
[16:41:01] <beach> There is no way to create an unbound lexical variable.
[16:41:06] <lisp123> beach: Thanks yes, I realise that now (but not at the start of this conversation)
[16:41:34] <lisp123> _death: can you expand on "you need another special declaration at the point of reference"?
[16:42:02] <_death> lisp123: such use of specials is not usual.. often there are better ways to solve the actual problems
[16:43:10] <lisp123> _death: I am trying to customise print-object
[16:43:17] <mfiano> Yes. It seems like you are trying to make things hard on yourself intentionally.
[16:43:24] *** Joins: igemnace (~ian@user/igemnace)
[16:43:31] <mfiano> Learn about special variables and FORMAT in PCL then?
[16:43:48] <lisp123> If *print-method* is unbound, then do default printing, otherwise follow whichever print method is selected
[16:43:52] <_death> lisp123: expand in what way? seems you got it with the locally form, or you can declare it wherever else declarations are allowed
[16:44:10] <lisp123> _death: Okay, so my last example was fine?
[16:44:35] <lisp123> mfiano: This is for setting the defaults for printing classes
[16:44:48] <mfiano> I know
[16:44:53] <lisp123> via the defmethod print-object
[16:45:12] <_death> lisp123: if you're talking about your paste, you had a declaration at the point of binding (in FOO) but not at the point of refernece (in BAR).. so you'd also need (declare (special color)) in BAR
[16:45:25] <lisp123> Since I can't pass in a variable for *print-method*, it has to receive the value from somewhere
[16:45:35] <lisp123> _death: Thanks, I will do that
[16:45:52] <lisp123> (is there a particular reason why?)
[16:46:20] <_death> lisp123: but why do you need a "*print-method*" variable, and if you do need it, why not use defvar to say that it's special
[16:47:24] <_death> lisp123: the reason is that CL is lexical by default, and it's considered a good thing for a compiler to warn you when it sees a free variable
[16:49:13] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[16:51:13] <lisp123> (just writing up an example)
[16:51:22] *** Joins: silasfox (~silasfox@cgn-89-1-212-5.nc.de)
[16:51:32] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[16:52:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:00:06] <lisp123> https://pastebin.com/c31NLZh6
[17:00:21] <lisp123> mfiano: sorry, I think the tabs is due to paredit perhaps
[17:01:36] <lisp123> _death: so the difference here vs. declaring *print-method* via a defvar, is that here *print-method* "loses" its value automatically once all the forms are evaluated, whereas with defvar, one would have to remember to reset it to whatever the default value is
[17:02:05] <_death> it's possible that you're trying to use print-object for something that it's not intended to be used for
[17:02:38] <lisp123> The main purpose of *print-method* is to later put in various cases (e.g. info, extra-info, debug, etc.) so that it prints with the level of detail required
[17:03:15] <hayley> This doesn't sound like a good use of PRINT-OBJECT.
[17:03:25] <_death> print-object is for printing objects concisely, for development/debugging purposes or for naive serialization when *print-readably* is true
[17:03:26] <lisp123> _death: Sometimes I want a detailed print object, sometimes I want a very basic one, so I wanted to add that customizablity
[17:03:57] <hayley> That said, there is print-pretty\ which is a special variable which customizes printing in a way.
[17:04:08] * hayley fails to appease Markdown yet again.
[17:04:21] <beach> lisp123: What does it mean that one has to remember to reset it?
[17:04:34] <_death> for more intensive printing, there's describe-object.. you can also have your own functions, and you can also make use the pretty printer
[17:04:53] <mfiano> lisp123: It seems you want to use a special variable for a _flag_ then, not the object to be printed.
[17:05:22] <mfiano> All of the logic related to printing can be contained within print-object or auxilliary functions
[17:05:35] <hayley> And you can use LET to temporarily bind a special variable, so there is no need for "resetting" or whatever.
[17:05:51] <beach> Yes, that's why I am asking.
[17:06:01] <lisp123> beach: say I have (defparameter *print-method* nil), then within a function I set it to 'debug. If I don't reset it back to nil, then future calls to print-object will refer to 'debug
[17:06:15] <hayley> Don't set it. Just re-bind it.
[17:06:19] <beach> lisp123: Don't set it then, bind it.
[17:06:28] <mfiano> You should read about how dynamic binding works
[17:06:56] <lisp123> Ah yes, that makes sense
[17:07:35] <lisp123> So you guys don't like this approach to custom printing?
[17:07:40] <lisp123> I though it was cool
[17:08:01] <hayley> I don't think it is a great use of PRINT-OBJECT, no.
[17:08:56] <mfiano> Alkso parewdit is not responsible for your misconfigured Emacs that doesnt convert tabs to spaces. You need to setq-default the right Emacs variable, that slipped my mind, but I remember beach knows
[17:09:01] <mfiano> Also*
[17:09:08] <lisp-newbie> hi, is there an inspect or describe equivalent that instead of printing will just return a string? or with the stream, how to turn it into a string in a variable?
[17:09:32] <mfiano> These are 2 unrelated questions
[17:09:35] <mfiano> FORMAT, and INTERN
[17:09:36] <lisp123> mfiano: Thanks, let me look at that. Was easier just to blame paredit ;)
[17:09:36] <hayley> Well, inspect won't do you much good.
[17:09:58] <hayley> clhs with-output-to-string
[17:09:58] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_w_out_.htm
[17:10:04] <lisp-newbie> ok, just want to solve my issue
[17:10:13] <_death> another issue with your print-object method is that it uses the readers, which may signal errors, e.g., when the slots are not bound.. it often makes sense to only print the slot values if they're bound, i.e. use slot-boundp and slot-value
[17:10:19] <lisp-newbie> hayley thanks
[17:10:36] <hayley> I would have to check the lambda list of DESCRIBE, but if it takes a stream parameter to write to, you are basically set.
[17:10:44] <lisp123> _death: thanks, that's a good pickup
[17:10:52] <lisp-newbie> hayley it does
[17:10:55] <lisp-newbie> thanks!
[17:13:51] <lisp-newbie> hayley, great! it works! thanks! :D
[17:15:28] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Quit: Leaving.)
[17:27:52] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[17:28:29] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[17:29:11] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[17:29:38] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[17:31:47] *** Joins: silasfox70 (~silasfox@xdsl-78-35-71-64.nc.de)
[17:32:07] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[17:33:23] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[17:34:10] *** Quits: silasfox (~silasfox@cgn-89-1-212-5.nc.de) (Ping timeout: 240 seconds)
[17:34:10] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[17:34:29] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[17:37:53] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[17:44:00] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[17:44:56] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[17:53:10] *** Quits: silasfox70 (~silasfox@xdsl-78-35-71-64.nc.de) (Quit: Connection closed)
[17:55:33] *** Joins: Bike (~Glossina@71.69.170.70)
[17:55:33] *** ChanServ sets mode: +o Bike
[17:56:08] *** Joins: silasfox (~sbv@2001-4dd6-a194-0-6e8a-d9bc-7d25-2e68.ipv6dyn.netcologne.de)
[18:00:58] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 258 seconds)
[18:16:07] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[18:21:23] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:e136:c2c4:4e69:e3b2)
[18:26:53] *** Joins: jans1 (~Thunderbi@185.213.154.242)
[18:28:56] *** Quits: jans (~Thunderbi@185.65.135.237) (Ping timeout: 268 seconds)
[18:28:56] *** jans1 is now known as jans
[18:29:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:29:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:32:11] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[18:33:19] *** Joins: ^[ (~user@user//x-8473491)
[18:33:22] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:34:37] *** Quits: Michal (~user@5.30.23.247) (Ping timeout: 245 seconds)
[18:34:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 248 seconds)
[18:39:40] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 240 seconds)
[18:39:42] *** Joins: Fare (~fare@2601:184:4a7f:995c:c45e:f1a1:6693:68ff)
[18:42:46] *** Quits: voltron (~voltrin_@ip5f5993ed.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[18:45:57] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[18:56:16] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[18:57:52] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[18:59:35] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-85A7-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[19:03:45] *** Joins: Michal (~user@5.30.23.247)
[19:04:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:10:52] *** Quits: amk (~amk@176.61.106.150) (Ping timeout: 268 seconds)
[19:11:54] *** Joins: amk (~amk@176.61.106.150)
[19:13:42] *** Joins: lad (~lad@user/lad)
[19:14:10] *** Quits: Michal (~user@5.30.23.247) (Ping timeout: 240 seconds)
[19:14:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[19:17:02] *** Quits: amk (~amk@176.61.106.150) (Ping timeout: 268 seconds)
[19:17:39] *** Joins: amk (~amk@176.61.106.150)
[19:18:09] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[19:22:55] *** Joins: Alfr (~Alfr@user/alfr)
[19:26:17] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Ping timeout: 268 seconds)
[19:27:04] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[19:27:31] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 268 seconds)
[19:28:51] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:e136:c2c4:4e69:e3b2) (Remote host closed the connection)
[19:28:53] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[19:30:19] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:3cef:4e3e:524c:afe3)
[19:30:41] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:3cef:4e3e:524c:afe3) (Remote host closed the connection)
[19:34:55] <lisp-newbie> hi, if I have a list of key value pairs, and I have an existing object, how can I set every slot for which the key is a slot name?
[19:35:47] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[19:37:17] <lisp-newbie> without getting an unbound-slot error
[19:40:16] <beach> lisp-newbie: You can handle the error, or use the MOP.
[19:40:28] <_death> slot-exists-p and (setf slot-value)
[19:40:38] <lisp-newbie> beach _death thanks
[19:40:42] <beach> Oh, right, no MOP needed.
[19:40:57] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 248 seconds)
[19:42:08] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[19:43:00] <lisp-newbie> _death beach thanks I also found (describe 'slot-boundp)
[19:45:53] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[19:46:46] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[19:47:05] *** Joins: Michal (~user@5.30.23.247)
[19:48:05] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[19:49:15] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[19:50:11] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[19:51:37] *** Quits: Michal (~user@5.30.23.247) (Ping timeout: 248 seconds)
[19:54:12] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[19:54:21] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[19:54:22] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[19:54:39] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[19:56:06] *** Joins: derelict (~derelict@user/derelict)
[19:59:23] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:03:10] *** Quits: silasfox (~sbv@2001-4dd6-a194-0-6e8a-d9bc-7d25-2e68.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[20:04:32] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[20:04:59] *** Devon is now known as Devon7
[20:05:04] *** Devon7 is now known as Devon
[20:10:07] *** Joins: silasfox (~sbv@2001-4dd6-a194-0-6e8a-d9bc-7d25-2e68.ipv6dyn.netcologne.de)
[20:11:58] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:16:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:16:30] *** Joins: Michal (~user@5.30.23.247)
[20:19:10] *** Quits: Fare (~fare@2601:184:4a7f:995c:c45e:f1a1:6693:68ff) (Ping timeout: 240 seconds)
[20:25:40] *** Quits: silasfox (~sbv@2001-4dd6-a194-0-6e8a-d9bc-7d25-2e68.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[20:27:43] *** Joins: silasfox (~sbv@2a0a-a540-533f-0-bad8-6c2f-3a71-f612.ipv6dyn.netcologne.de)
[20:31:10] *** Quits: Cymew (~ante@host-217-213-111-64.mobileonline.telia.com) (Ping timeout: 240 seconds)
[20:34:04] *** Parts: Michal (~user@5.30.23.247) (ERC (IRC client for Emacs 27.1))
[20:35:05] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[20:39:37] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 248 seconds)
[20:40:24] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[20:45:30] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[20:47:41] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[20:47:53] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[20:49:31] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.2)
[20:51:48] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[20:52:33] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[20:52:53] *** Joins: Skyfire (~pyon@user/pyon)
[20:55:26] *** Quits: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:55:40] *** Joins: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net)
[20:56:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:57:40] *** Quits: silasfox (~sbv@2a0a-a540-533f-0-bad8-6c2f-3a71-f612.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[20:58:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:59:32] *** Joins: silasfox (~sbv@xdsl-78-35-71-64.nc.de)
[21:00:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:00:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:02:06] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[21:02:23] <Qwnavery> lotuseater: couldn't sleep, thought of something
[21:04:32] <Qwnavery> https://pastebin.com/qxGNfJti
[21:06:51] <beach> Qwnavery: Common Lisp evaluates a form only once by default.
[21:07:13] <Qwnavery> beach: ?
[21:07:28] *** Joins: Fare (~fare@2601:184:4a7f:995c:e8f9:7f16:4246:effa)
[21:07:30] <beach> Qwnavery: Some other formalisms, like the lambda  calculus will continue until a normal form is reached.  Not so with Common Lisp.
[21:07:51] <mfiano> Qwnavery: I would not use SETQ. Use the generalized SETF instead
[21:08:13] <mfiano> Qwnavery: Also, you probably don't want to use APPEND. Most uses of it is a performance trap, including this one.
[21:08:18] <beach> In your code, the variable I is just a list of things.
[21:08:25] <Qwnavery> yes
[21:09:09] <Qwnavery> I tried using let
[21:09:42] <beach> There is nothing wrong with LET.
[21:10:40] <Qwnavery> All I'm trying to do is try and use homoiconicity to define an expanding power function that returns a lambda function of that nth multiplication
[21:10:50] <beach> Qwnavery: Do you want your function to generate a form, i.e., a list with * in the CAR, or do you want it to generate a function?
[21:11:24] <mfiano> It's unclear if you want to return a closure or generate code
[21:11:28] <beach> Qwnavery: There is no such thing as a "lambda function".  There are lambda expressions and just functions.  Functions are sometimes anonymous.
[21:11:56] <Qwnavery> ij
[21:11:58] <Qwnavery> ok
[21:13:09] <beach> The problem here is that, although you return a function, its body is just a variable that contains a form that is not being evaluated.  You should generate the function instead of the form.
[21:13:11] <Qwnavery> I have the (lambda (x) i) returning because I want it to generate an anonymous function which can be called as (* x x... {n times})
[21:14:10] <Qwnavery> erm, is there a way to turn a list like '(* x x) into a function?
[21:14:12] <random-nick> (lambda (x) i) is just a lambda which always returns i
[21:14:15] <random-nick> (the list)
[21:14:15] <Bike> (defun power (n) (compile nil `(lambda (x) (* ,@(make-list n :initial-element x))))) (funcall (power 2) 2) => 4
[21:14:49] <Qwnavery> random nick: yes, i is (* x x) so it expands to (lambda (x) (* x x))
[21:15:05] <Bike> it doesn't "expand". why would it expand? "i" is just a variable.
[21:15:06] <random-nick> it doesn't expand
[21:15:10] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[21:15:28] <Qwnavery> like, evaluates to
[21:15:34] <random-nick> the i in the lambda expression isn't replaced by the value of i
[21:15:34] <beach> But it is not evaluated.
[21:15:47] <Bike> you are confused about how evaluation works.
[21:15:49] <Qwnavery> what word do I use then wth
[21:15:57] <beach> Qwnavery: Because Common Lisp evaluates only once, so the variable i is evaluated to a list.
[21:15:58] <Bike> the "i" is evaluated in that its value is read.
[21:15:58] <random-nick> instead, the produced lambda object contains a reference to the value of i
[21:16:02] <Bike> that value is not evaluated again.
[21:16:14] <Qwnavery> I don't know how to describe it, i is a pointer to the list in memory that is (* x x) ???
[21:16:28] <Bike> you are overthinking it. listen. if you write (lambda () x), you get a function that reads the value of the variable x.
[21:16:31] <beach> Yes, and that list is just that, a list.
[21:16:33] <Bike> It does not then evaluate the value read.
[21:17:02] <Qwnavery> I get it.
[21:17:12] <random-nick> the construction of the lambda object doesn't read i at all
[21:17:14] <Qwnavery> Thanks Bike that makes sense
[21:17:42] <beach> Qwnavery: Try (defun power (n) (lambda (x) (apply #'* (make-list n :initial-element x))))
[21:17:44] <Bike> The definition of POWER i gave does what you want, i think. you can see that the form has to be explicitly made into a function by COMPILE. EVAL could also be used
[21:18:51] <akater[m]> Qwnavery: It's not about evaluation rules for i, it's about evaluation rules for lambda.  lambda is a macro. It does not evaluate its arguments.
[21:19:15] <Qwnavery> akater[m]: bear with me, I don't understand macros quite yet.
[21:19:24] <Bike> macros aren't really related here.
[21:19:48] <Bike> this would work the same if #'(lambda ...) had been used, and in that form no macroexpansion is involved.
[21:20:34] <Qwnavery> Bike: Your defintion of POWER is very elegant.
[21:20:47] <lotuseater> oh a highlight on my nick :)
[21:20:56] <Qwnavery> Thank you beach, Bike, random-nick, akater[m]
[21:21:21] <Qwnavery> oop and mfiano
[21:21:48] <Qwnavery> lotuseater: don't look >_< it'll hurt your eyes.
[21:22:12] <Qwnavery> ok I'm going to sleep now that it's out of my head 0_0
[21:22:15] <lotuseater> i was in the kitchen
[21:22:25] <mfiano> Qwnavery: I mention this multiple times per day recently, but here it is again if you haven't seen it: Read Practical Common Lisp for free online. Some of your misconceptions can be solved by reading it.
[21:22:26] <lotuseater> yes you should
[21:22:38] <Qwnavery> mfiano: I tried at one stage
[21:22:46] <Qwnavery> attention span very short.
[21:23:20] <mfiano> Well fumbling in the dark is no way to learn. You need a gentle walkthrough of the language, which that is.
[21:23:31] <mfiano> Read little bits at a time, and take notes if you need to
[21:24:09] <Qwnavery> ok. sorry for being a nusiance
[21:24:36] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[21:24:37] <lotuseater> Qwnavery already know that keeping an eye to details is important. :)
[21:24:42] <mfiano> You're not. I just want to see people succeed rather than get a wrong impression of Lisp
[21:25:01] <mfiano> heh
[21:26:01] <lotuseater> he's on a good way, I wrote with him a bunch in query the last days :)
[21:27:48] <akater[m]> Bike: > macros aren't really related here.  — the person does not get evaluation rules (evaluation order, in particular).  Macros are related in the sense they have non-standard evaluation rules.
[21:28:40] <Bike> we were already talking about evaluation rules. i don't see the point of bringing up macros when they are not actually involved.
[21:29:33] <mfiano> Bike is right. This has nothing at all to do with macros. The misunderstanding was at a much lower level.
[21:31:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:32:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:37:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 248 seconds)
[21:39:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:42:33] *** Joins: lisp123_ (~lisp123@45.130.83.200)
[21:43:55] <_death> I thought https://plaster.tymoon.eu/view/2595#2595 may be instructive, but Qwnavery is gone
[21:45:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[21:50:08] <contrapunctus> I happened to be defining a class named `quote` in a package that has `(:use :cl)`, which resulted in a package lock violation error. I imagine I could either change the class name, or change the `:use` to `:import-from` and specify the exact symbols I'm using (`quote` is not one of them...yet)...but is there any other alternative?
[21:50:26] <mfiano> add (:shadow #:quote) after :use
[21:50:36] <mfiano> but that might have disastrous consequences :)
[21:50:53] <contrapunctus> ._.
[21:50:57] <Xach> mfiano: why?
[21:51:31] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[21:51:38] <mfiano> I suppose it would not if you always use the reader macro. Such a common operator is all I mean
[21:51:44] <Xach> ah
[21:53:27] <contrapunctus> Thanks, I'm changing the class name ^^
[21:55:32] <moon-child> 'quotation'?
[22:01:13] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 248 seconds)
[22:02:32] <mfiano> '|'|
[22:03:05] <moon-child> thanks, I hate it
[22:05:36] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:06:51] *** ec is now known as tl
[22:08:54] <contrapunctus> moon-child: indeed
[22:09:07] <contrapunctus> mfiano: what's that?
[22:09:19] <mfiano> That is a the symbol '
[22:09:22] <mfiano> s/a//
[22:09:24] *** Quits: tl (~ec@gateway/tor-sasl/ec) (Client Quit)
[22:09:33] <mfiano> quoted
[22:09:36] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:09:41] <mfiano> so (defclass |'| ...)
[22:09:56] <contrapunctus> wat
[22:10:55] <contrapunctus> What is |? Never saw that before
[22:12:50] <lotuseater> contrapunctus: '|The pipes make symbols, I swear!|
[22:13:22] *** Quits: silasfox (~sbv@xdsl-78-35-71-64.nc.de) (Ping timeout: 245 seconds)
[22:13:36] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[22:13:50] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[22:14:01] <mfiano> ::clhs 2.1.4.5
[22:14:01] <Colleen> Clhs: section 2.1.4.5 http://www.lispworks.com/documentation/HyperSpec/Body/02_ade.htm
[22:15:15] <mfiano> Xach: Can you remove my feed from Planet Lisp?
[22:15:50] <contrapunctus> mfiano: thanks, TIL 🤯️
[22:18:01] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[22:19:29] <random-nick> so why is that defined as an escape character
[22:19:33] <random-nick> instead of as a reader macro
[22:20:04] <random-nick> oh, so you could write it in the middle of a symbol
[22:21:06] *** Parts: jfrent (~josiah@user/jfrent) (WeeChat 3.1)
[22:23:49] <lisp123_> Is there a way for :after methods to have access to the bindings in the main method (CLOS query)?
[22:24:29] <mfiano> Use special variables or an around method instead.
[22:24:42] <lisp123_> mfiano: Thanks, will try around
[22:25:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:32:11] *** Joins: silasfox (~sbv@2a0a-a540-533f-0-bad8-6c2f-3a71-f612.ipv6dyn.netcologne.de)
[22:32:13] *** Joins: selwyn (~selwyn@user/selwyn)
[22:42:09] *** Joins: Danishman (~Allan@2-104-144-110-cable.dk.customer.tdc.net)
[22:43:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:47:12] *** Joins: john__ (~john@dynamic-095-118-023-212.95.118.pool.telefonica.de)
[22:47:26] *** john__ is now known as gaqwas
[22:49:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[22:50:27] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:50:51] *** Joins: retropikzel (~retropikz@2001:999:200:4ae7:ecfe:ddd3:50a6:ff37)
[22:51:43] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-3436-dynamic.midco.net)
[22:55:10] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[22:55:41] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[22:56:29] <lotuseater> beach: Do you maybe know if drmeister plans for this year to give an updated talk about CLASP and the biomolecular metaprogramming? The first one was 2015, then 2018 and now it's 2021. :)
[22:58:35] <Bike> he has been busy doing biomolecular metaprogramming. i don't know if he's planning on a talk that isn't to a government agency with money
[22:58:55] <Bike> i might be able to answer particular questions
[22:59:05] <lotuseater> it's so awesome
[22:59:49] <lotuseater> Bike: cool you are able to understand how it works? :)
[23:00:00] <Bike> i am literally working on clasp right now
[23:00:15] <lotuseater> wow
[23:00:18] <Bike> if you mean how the chemistry works, i'm only a little familiar, though
[23:01:04] <lotuseater> it would be nice to understand these things, but I'm not good
[23:01:43] <lotuseater> so for the next pandemic CLASP generates us a working vaccine :)
[23:01:57] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[23:01:57] *** Joins: greaser|q (greaser@user/greasemonkey)
[23:02:01] *** greaser|q is now known as GreaseMonkey
[23:03:31] <lotuseater> so the CLASP compiler generates LLVM code, right?
[23:07:33] <Bike> LLVM-IR, yes.
[23:07:54] *** Joins: tyson2 (~user@72.142.96.152)
[23:08:44] <pjb> lotuseater: clasp, or nvidia.
[23:09:57] *** Quits: psycomic (~psycomic@2a01cb0588c5e400f979b12e567d3038.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[23:10:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:11:18] <lotuseater> nice
[23:11:49] <lotuseater> I once tried to install on my NixOS, but it compiled over 30min and then I stopped it.
[23:12:11] *** Quits: lisp123_ (~lisp123@45.130.83.200) (Remote host closed the connection)
[23:12:22] <Bike> it's pretty big. compilation times are way down from what they used to be, at least.
[23:12:25] *** Joins: voltron (~voltrin_@ip5f5993ed.dynamic.kabel-deutschland.de)
[23:12:42] <lotuseater> oki :)
[23:12:47] *** Joins: lisp123 (~lisp123@45.130.83.200)
[23:12:55] <Bike> llvm is not especially fast, and we are throwing hundreds of files at it.
[23:13:12] <pjb> contrapunctus: after shadow quote, you can both defmacro quote and defclass quote, so you can still write (make-instance (quote quote))
[23:13:16] *** Quits: lisp123 (~lisp123@45.130.83.200) (Remote host closed the connection)
[23:13:30] *** Joins: lisp123 (~lisp123@45.130.83.200)
[23:13:30] <pjb> contrapunctus: (defmacro quote (object) `(cl:quote ,object))
[23:14:46] <pjb> but all the functions and all the macros and all the reader macros that have been defined outside of your package would still work, since they'd already refer cl:quote, not your-package::quote.
[23:15:14] <pjb> the macro would only be a convenience so that you can keep using (quote x) in your package.
[23:15:48] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[23:16:31] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[23:16:52] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Remote host closed the connection)
[23:22:07] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 245 seconds)
[23:22:31] * lotuseater realized yesterday that symbol-macros want proper list forms
[23:23:55] <mfiano> They do not need to be proper lists
[23:24:14] *** Quits: voltron (~voltrin_@ip5f5993ed.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:24:40] <lotuseater> i mean lists in general
[23:24:40] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[23:24:47] *** Joins: amb007 (~a_bakic@93.87.81.23)
[23:24:49] <mfiano> (symbol-macrolet ((foo '(1 2 . 3))) foo) ;=> (1 2 . 3)
[23:24:59] <lotuseater> yes
[23:25:07] <mfiano> Not sure what you mean. They evaluate to what you give them
[23:25:12] <mfiano> or rather expand
[23:25:16] <lotuseater> yes
[23:25:38] <lotuseater> i had (define-symbol-macro N 17) but that's better as parameter
[23:25:55] <mfiano> More like a constant
[23:26:02] <lotuseater> or that
[23:26:20] <mfiano> I despise global symbol macros.
[23:26:33] <mfiano> There is no convention for their naming and it can be rather confusing
[23:27:25] <lotuseater> yes, I actually just use symbol-macrolet
[23:27:26] <mfiano> They are useful for some things, like deflex iirc
[23:27:42] <aeth> seems like the main thing they're for is ultra-niche hacks
[23:27:50] <lotuseater> saw sometime global symbol macros are named with % by convention
[23:27:51] <aeth> perhaps if you need to implement another language in CL
[23:28:00] <aeth> symbol-macrolet, however, is incredibly useful
[23:28:08] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:28:11] <lotuseater> aeth: oh yes :)
[23:28:21] <aeth> lets you extend the with-accessors style pattern to all sorts of things, e.g. array elements
[23:28:32] <aeth> this makes up for array access syntax being fairly awkward in Lisps vs in "normal" syntax languages
[23:28:38] <mfiano> symbol-macrolet is useful, however they have to be used with care in performance critical code
[23:28:54] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[23:28:59] <mfiano> It is too easy to ignore their expansion and treat the code as lexivars when read by a human
[23:29:19] <aeth> Yes. I'm assuming that they're only used for things that are compiler-inlinable, mainly struct accessors and array accessors.
[23:29:19] <mfiano> Which could be re-evaluating expensive (or not so expensive but tight-looped) things
[23:29:25] <aeth> Then it's on the implementation, not on the user.
[23:29:41] <aeth> Avoid CLOS generic accessors.
[23:29:56] <aeth> (in more elaborate symbol-macrolets, anyway... I do use WITH-ACCESSORS for simple things)
[23:30:29] <lotuseater> aeth: sometimes i did eg one arr[s] for (aref arr s)
[23:30:47] <lotuseater> or also with this .foo syntax
[23:31:19] <aeth> I sometimes use . to decompose arrays with symbol-macrolet since it's available... but I make it look more like the dot-accessor-notation of "normal" languages
[23:31:23] <aeth> e.g. foo.x foo.y foo.z
[23:31:36] <aeth> I find that that is, to me at least, clearer
[23:31:39] <mfiano> How Algol of you
[23:31:40] *** Quits: amb007 (~a_bakic@93.87.81.23) (Ping timeout: 240 seconds)
[23:31:42] <aeth> Especailly since it's a macrolet
[23:31:50] <aeth> *Especially
[23:32:10] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 240 seconds)
[23:33:32] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[23:33:51] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[23:34:10] <lotuseater> algolholic?
[23:34:29] <lotuseater> "gosh, that looks like fortran"
[23:35:35] <aeth> If you've ever used almost any other programming language, an internal . within the symbol-macrolet will be immediately obvious. That is, decompose foo into foo.x, foo.y, and foo.z and it's clear that it's a symbol-macrolet related to foo, rather than fresh lexical bindings of local variables like foo-x, foo-y, and foo-z or x, y, and z
[23:36:21] <aeth> idk if anyone else uses this convention, though
[23:36:24] <aeth> probably not
[23:40:20] <pjb> (defstruct (point (:constructor point (x y)) (:conc-name point.)) x y)  (values (point.x (point 3 4)) (point.y (point 3 4))) #| --> 3 ; 4 |#
[23:41:02] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[23:41:29] <lotuseater> ah :)
[23:42:07] *** Quits: tyson2 (~user@72.142.96.152) (Ping timeout: 245 seconds)
[23:42:16] <pjb> (defstruct (point (:constructor point (x y)) (:conc-name point->)) x y)  (values (point->x (point 3 4)) (point->y (point 3 4))) #| --> 3 ; 4 |#
[23:42:25] <pjb> You can use all kinds of conventions…
[23:43:56] <mfiano> Add ":type (vector fixnum)" in there, and a corresponding deftype perhaps, to maybe get a bit more performance and have named accessor functions AND array indexing
[23:47:06] <pjb> (defun point (x y) (complex x y))  (+ (point 3 4) (point 2 1)) #| --> #C(5 5) |#  ;-)
[23:47:10] <mfiano> However, because types are mostly structural and not nominal, you no longer have a unique type to dispatch on with method specialization.
[23:48:12] <mfiano> Actually, I'm not sure how that even works. I could be wrong there. (runs some tests)
[23:49:56] <pjb> Just use quaternions for 3d or 4d points, and octonion up to 8d.
[23:50:09] <pjb> We should remmeber to add them to CL…
[23:51:34] <pjb> mfiano: correct, but there could be a branding mechanism.  In Modula-3, we can define a type to be equal to another, then it's just a new name, or a type to  be like another type but a new brand, then they're similar, but values of one type are not compatible with values of the other type.
[23:52:03] *** khrbt_ is now known as khrbt
[23:52:14] <pjb> in lisp this branding would have to occur at run-time, but it'd be possible. It would just mean that (some) CL operations are really hidden generic functions.
[23:52:53] <mfiano> Did I just find a bug in SBCL?
[23:53:01] <mfiano> VECTOR is a bad :TYPE for DEFSTRUCT.
[23:54:08] <White_Flame> works for me
[23:54:08] <pjb> (defstruct (point (:constructor point (x y)) (:type vector) :named) x y) (point 1 2) #| --> #(point 1 2) |#
[23:54:24] <lotuseater> lol
[23:54:49] <lotuseater> ah this is what :named does
[23:54:51] <mfiano> Oh silly me. I'm attempting to define it in the package I was currently working in, and of course it shadows CL:VECTOR
[23:55:15] <White_Flame> the true bug was the friends we made along the way
[23:56:12] <pjb> mfiano: cl:vector in that case.
[23:56:18] <mfiano> Right
[23:57:11] <mfiano> So I was correct. a struct with a type of vector or list no longer has a user-defined type of the name of the struct
[23:57:19] <mfiano> So you cannot dispatch on it in that case
[23:57:50] <White_Flame> how would the type be determined, given any given vector object?
[23:58:26] <mfiano> I have used (:type (vector single-float)) and (deftype name-of-struct () (simple-array single-float (3)) in my codes a long time ago to greatly speed up access
[23:58:41] <mfiano> While still allowing named access (in addition to aref)
[23:58:50] <White_Flame> sure, but that's not saying that some vector is of type POINT struct that you've defined
[23:58:53] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:58:56] <mfiano> Sure
[23:59:39] <mfiano> It's an alias to mostly allow for concise ftype declarations
