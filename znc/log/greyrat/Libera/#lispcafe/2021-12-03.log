[00:03:43] *** Quits: random-nick (~random-ni@87.116.180.220) (Quit: quit)
[00:03:58] *** Joins: random-nick (~random-ni@87.116.165.83)
[00:09:43] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[00:18:53] <hayley> Good morning everyone!
[00:18:59] <selwyn> good morning
[00:27:03] <gilberth> Hi there!
[00:27:21] <hayley> https://www.youtube.com/watch?v=AwZl_DYSvdo
[00:27:22] -ixelp- Gary Numan - We Take Mystery (Early Version) - YouTube
[00:41:49] <amazigh> moooooooooooooorning
[00:43:29] <sham1> Good mythical morning
[00:46:25] <gilberth> It's a mooooooooorning machine. :)
[00:47:09] <hayley> "Our decision procedure for intervals is new, although it is a reasonably obvious extension of standard interval arithmetic. It has not been described before most likely because programming it in Fortran is too painful to contemplate."
[00:47:40] <gilberth> What are you reading, hayley?
[00:48:11] <hayley> I just found that quote in my logs. Probably Henry Baker's SUBTYPEP.
[00:48:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:48:38] <hayley> https://plover.com/~mjd/misc/hbaker-archive/Subtypep.html
[00:48:47] <gilberth> Ah. I once was successful to use regular languages to solve SUBTYPEP.
[00:50:15] <hayley> "Our derivative procedure for tags is new, although it is a reasonably obvious extension of standard Brzozowski derivstives. It has not been described before most likely because programming it in C is too painful to contemplate."
[00:50:22] *** Joins: aeth (~aeth@user/aeth)
[00:50:42] <gilberth> C? Why C?
[00:50:44] <selwyn> captains logs?
[00:51:11] <hayley> You want to do hash consing in C?
[00:52:24] <gilberth> hayley, I actually have a C implementation.
[00:52:41] <hayley> Damn!
[00:53:26] <hayley> Still, /me needs to handle larger isums without blowing out code size. Guess I could start with two level tables, and then try binary search over a vector after. Idk
[00:53:28] <gilberth> Though I could not image to have used C to develop my algorithm. It took ages with Lisp, would have taken eternity with C.
[00:53:36] <gilberth> * imagine
[00:54:13] <gilberth> Well, if you do binary search anyway, why not open code it? ISUM-CASE?
[00:55:15] <gilberth> And yes, indeed, I have a lex(1) replacement written in C. And guess what: It's faster than flex(1). Mea culpa.
[00:57:38] <hayley> If I open code, the compiler will just go slower. Though I should test that too.
[00:57:56] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:57:58] <gilberth> And for SUBTYPEP, doesn't Baker's method punt on ARRAY or CONS or a combination there of. I would need to look that up, but when you turn the types into regular expressions, you could use <http://clim.rocks/gilbert/L-esprit-de-l-escalier.lisp> to decide SUBTYPEP.
[00:59:41] *** Joins: aeth (~aeth@user/aeth)
[01:02:24] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:04:27] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[01:05:56] *** Joins: aeth (~aeth@user/aeth)
[01:08:43] <hayley> But AIUI isum-case handles multiple isums, I just have one hairy isum?
[01:10:26] <gilberth> Dispatching on one isum is just a special case, isn't it? Otherwise binary search on exactly one isum is trivial.
[01:11:53] <hayley> Oh, right, I have to handle multiple isums too, not just some A and ~A.
[01:12:28] <hayley> However I'd like to see compiling the search for [:alpha:].
[01:13:30] <gilberth> It won't be small. But: Won't an "externally" defined predicate do?
[01:14:18] *** Joins: clothesp_ (~awolven@2601:246:4000:1030:b03d:2fe:e5d4:5326)
[01:15:19] <hayley> Yes, but then what about [:alpha:]|1 as well? Do I have to recognise arbitrary functions on the [:alpha:] set?
[01:15:50] <hayley> Special casing isums for such sets also doesn't appeal to me, since that requires more simplification rules.
[01:16:22] <gilberth> I'd do the following: Have a set representation which also has short-hands for those POSIX character classes and invoke ready-made predicates. The tricky part would be set operations of isums with those character classes. Will get hairy.
[01:16:58] * gilberth thinks.
[01:18:12] <gilberth> What hurts is that we need a partition of subsets of \Sigma. There may not be any overlap.
[01:19:19] <hayley> Should I know that [:alpha:] without [:lower:] is [:upper:]?
[01:19:37] * gilberth thinks again.
[01:20:49] <hayley> Think I'll stick to lookup tables, as SBCL uses lookup tables anyway.
[01:21:10] <gilberth> .oO(Apart from that I won't bet on [:lower:] and [:upper] being a partition of [:alpha:].)
[01:21:46] <hayley> ...in order to implement ALPHA-CHAR-P and all. There's a vector of character code -> class number, and some comparisons are performed on the class number.
[01:21:58] <gilberth> hayley: You still have to a representation of [:alpha:]|1. And you still need partitions for DFA construction.
[01:22:19] <hayley> Fuck it, [:alpha:] isum
[01:22:26] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[01:22:41] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[01:22:53] <hayley> As long as it doesn't take a second to compile the POSIX equivalent of \\w{3}, we're in the clear.
[01:23:01] <dave0> maw
[01:23:10] *** Quits: clothesp_ (~awolven@2601:246:4000:1030:b03d:2fe:e5d4:5326) (Remote host closed the connection)
[01:23:48] * hayley contemplates a third RE nightmare, which breaks up REs into a* machines, string machines and DFAs.
[01:24:36] <gilberth> When you're lazy you can expand [:alpha:] and compress at code generation. But that will be slow. There is a more elegant and faster method. It should work to have char classes in the ISUM representation. Oh dear, I hope, I always use the ISUM API. I should have encapsulated that in a DEFSTRUCT in the first place. But I was greedy on speed.
[01:25:02] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:25:36] <gilberth> dave0: Hello there! hayley is keeping me busy again, as you may have noticed.
[01:26:07] <dave0> hi gilberth !
[01:26:20] <Gnuxie> selwyn: Unite is cutting labour funding 
[01:26:22] <dave0> yes she is a hard task-master
[01:26:54] * gilberth in gratefulness claims the space.
[01:27:18] <hayley> https://www.youtube.com/watch?v=IW2TslVcpWU
[01:27:19] -ixelp- A Saucerful Of Secrets (Live) (2011 Remastered Version) - YouTube
[01:27:19] *** Joins: Inline (~Inline@aftr-37-201-241-35.unity-media.net)
[01:28:08] <hayley> But I would still need bitmaps or something for more complex isums anyway.
[01:28:26] <gilberth> How many character classes are there?
[01:29:04] <hayley> I thought you were the POSIX RE wizard.
[01:29:14] <dave0> 5?
[01:29:15] <gilberth> man re_format
[01:29:30] <gilberth> 12
[01:30:19] <gilberth> hayley: Do you also want to handle [=...=]?
[01:30:44] <hayley> I guess I should.
[01:31:14] * hayley just wanted to learn REs because maths classes were going slowly.
[01:31:20] <gilberth> And about character class: A locale may provide other character classes beyond the twelve standard.
[01:31:47] <hayley> Would "I wrote a fully compliant POSIX regular expression compiler" suffice to actually skip the models of computation class?
[01:32:27] <gilberth> In theory. I doubt it will work in practice.
[01:33:20] <hayley> That's what people say about DFAs.
[01:33:30] <gilberth> lol
[01:33:44] <gilberth> They never used lex(1)?
[01:33:57] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[01:34:28] <hayley> Apparently not.
[01:35:43] <hayley> I have a pretty easy compression technique for bitmaps still. Generate lower and upper bounds, make a vector of "page" vectors which are all hash consed.
[01:37:01] <hayley> Most pages are all 1s or all 0s from experience.
[01:37:35] <gilberth> Anyhow, this collation business makes my brain hurt.
[01:38:52] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[01:45:55] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:46:11] <dave0> gilberth: someone said you were decoding utf-8 using simd
[01:46:52] <gilberth> dave0: hayley was day dreaming. I wonder what she dreams at night.
[01:47:09] <dave0> i have ideas but i'm stuck on how to shuffle the bytes
[01:47:34] <dave0> dreams of unicorns?
[01:48:09] <gilberth> ponies, rather, I guess.
[01:48:24] <dave0> aw pony
[01:49:15] <gilberth> dave0: I am still a practical SIMD noob, I would have to read the processor manual to get a grasp about the instructions available.
[01:49:30] * hayley uploaded an image: (197KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/kEHgDJFOJsQILFhTNpKNKVIr/sicp-pony.png >
[01:49:49] <hayley> Don't worry, someone told me SIMD is easy. Mostly because they just did problems that you'd do with MAP.
[01:50:40] <gilberth> hayley: Put the Dragon book on, I have the hunch you'd learn more from that.
[01:51:22] <gilberth> hayley: Sure it's easy. Yet for practical purposes I should have an idea of the set of available operations, shouldn't I?
[01:51:45] <hayley> gilberth: The joke is they only did easy things, and concluded that it's all easy.
[01:52:13] <hayley> AIUI UTF-8 parsing requires a lot of shuffling and bullshit. Doing a vectorised sum does not require much shuffling nor much bullshit.
[01:52:29] <gilberth> Still. How hard could it be?
[01:52:33] <moon-child> gilberth: dragon book, not muchnick?
[01:53:19] <gilberth> Muchnick? Is that a book my small but fine library lacks?
[01:54:02] <moon-child> presumably
[01:54:04] <moon-child> https://0x0.st/-hjy.pdf
[01:56:21] <gilberth> moon-child: Indeed. It's siting on my Amazon wish list for ages. Never ordered a copy.
[01:57:45] <dave0> gilberth: there's too many instructions to remember
[01:58:56] <hayley> gilberth: https://software.intel.com/sites/landingpage/IntrinsicsGuide/# and check all from SSE through AVX2 on the left. 
[01:59:55] <gilberth> hayley: You really believe I'll craft an UTF-8 decoder, don't you?
[02:00:06] <hayley> Not really.
[02:00:18] <gilberth> Good.
[02:00:24] <dave0> lol
[02:01:45] <hayley> https://www.youtube.com/watch?v=MGmqoraRqxs
[02:01:45] -ixelp- Sparks - "La Dolce Vita" (official video) - YouTube
[02:08:23] <sm2n> https://github.com/bdonlan/branchless-utf8/blob/master/test/decode-simd.s
[02:08:23] -ixelp- branchless-utf8/decode-simd.s at master · bdonlan/branchless-utf8 · GitHub
[02:08:29] <sm2n> a thing
[02:24:48] *** Quits: luis (~luis@lisp/luis) (Quit: The Lounge - https://thelounge.chat)
[02:26:45] *** Joins: luis (~luis@lisp/luis)
[02:37:57] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 256 seconds)
[03:03:20] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[03:05:33] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[03:12:27] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[03:14:10] *** Joins: aeth (~aeth@user/aeth)
[03:32:29] *** Quits: random-nick (~random-ni@87.116.165.83) (Ping timeout: 252 seconds)
[03:45:43] <hayley> https://twitter.com/yanovazy/status/1465855650060247044 "Heterosexual lighting"
[03:49:31] <selwyn> just saw a mouse in my kitchen and shat it
[03:50:11] <hayley> You shat out the mouse in the kitchen?
[04:01:45] *** Quits: Inline (~Inline@aftr-37-201-241-35.unity-media.net) (Ping timeout: 256 seconds)
[04:02:00] *** Joins: Inline (~Inline@aftr-37-201-241-35.unity-media.net)
[04:33:09] <gilberth> hayley: I am reading those instructions. When looking at most basic instructions^Wintrinsics like _mm_or_pd and _mm_or_ps, I am puzzled. What is the difference? Both mention floating point values, yet the explanation for both says "just compute a 128-bit bit-wise OR".
[04:33:28] <hayley> None, IIRC it's just to make the C type checker happy.
[04:33:33] <moon-child> there is no difference
[04:33:47] <moon-child> one of them might have a slightly smaller encoding, in some cases, forget which though
[04:33:51] <hayley> And bitwise OR and movemask, etc, don't really make sense on floats IMO. So just pretend that they are bytes, words, double words, etc.
[04:35:02] <gilberth> Yes, this what puzzled me as the code given just mentions bits. Ok, thanks!
[04:35:38] <moon-child> gilberth: easier to explain with asm than with c.  There is a concept of ‘domain’.  XORPD and XORPS both operate on the float domain, while PXOR operates in the int domain.  All behave the same, but if you recently accessed some register as an int vector, then PXOR will be fast while there will XORPD/XORPS will have some added latency
[04:37:58] <hayley> Are there domains for VPAND and VPOR?
[04:38:07] <gilberth> Ok, I see. There are perhaps integer registers and floating point registers being distinct. At least internally. However, I believe, it will be easiest to approach that from C and bother with assembler later. For now I just want an overview what is there.
[04:39:15] <moon-child> hayley: yeah, VPAND int domain; VANDPD and VANDPS float domain
[04:39:20] <moon-child> same thing
[04:40:16] <gilberth> Who came up with those mnemonics?
[04:40:51] <gilberth> I mean, why is the "P" in front in the first case and near the end in the second?
[04:41:17] <moon-child> ¯\_(ツ)_/¯
[04:41:31] <White_Flame> peopel arguing at intel?
[04:42:44] <moon-child> gilberth: out of curiosity, if you had to guess, what would you say GF2P8MULB does? :)
[04:44:31] <gilberth> White_Flame: Yep, I could imagine that. Perhaps they were arguing so much that they decided to draw straws to settle.
[04:44:48] <gilberth> moon-child: Let me think.
[04:47:06] <gilberth> "Girl friend to parallel eight multiple b... *aehm* b..." No idea, really.
[04:47:33] <gilberth> Multiply sth. But what? Eight sth with what?
[04:48:51] <gilberth> And what is "GF" at Intel?
[04:49:16] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[04:50:37] <gilberth> What is the difference between an xmm and a ymm register?
[04:51:21] <moon-child> ymm is bigger
[04:51:24] <selwyn> these sound like openings to unfunny german jokes
[04:51:32] <moon-child> low half of a ymm is an xmm, like how eax is the low half of rax
[04:51:51] <hayley> VANDPS is AVX, VPAND is AVX2? Random guess.
[04:52:10] <gilberth> moon-child: Ah! Good to know, I would never have guessed.
[04:53:20] <gilberth> Can I access the high half of an xmm? zmm, perhaps?
[04:53:30] *** Joins: notzmv (~zmv@user/notzmv)
[04:53:30] <moon-child> hayley: apparently there was vpand for xmm vectors in avx, but not for ymm until avx2
[04:53:34] <gilberth> Of an ymm, of course.
[04:53:40] <moon-child> gilberth: nope.  zmm is a 64-byte vector
[04:53:52] <moon-child> you can permute to get at the high bits if you need them
[04:54:11] <gilberth> zmm exists? *sigh*
[04:54:17] <sm2n> lol
[04:54:36] <moon-child> I'm sure when they need 128-byte vectors they will name them wmm
[04:54:39] <moon-child> ...but what comes next??
[04:55:06] <gilberth> moon-child: I was just about to ask about wmm. You were faster or reading my mind.
[04:55:17] <moon-child> :)
[04:55:35] <sm2n> just follow the microsoft excel convention
[04:55:39] <hayley> How many instructions will there be in AVX1024?
[04:55:43] <gilberth> I won't recommend the latter though. It's not healthy.
[04:57:15] <moon-child> perhaps I can help with that
[04:57:31] <hayley> Someone counted 57 in MMX, 70 for SSE, 144 SSE2, 86 AVX, 137 AVX2
[04:58:24] <hayley> Furthermore, would Linus Torvalds merely be satisfied with a "painful death" for AVX1024?
[04:59:29] <sm2n> they have to stop eventually
[04:59:48] <sm2n> or instruction decoding will become too complicated
[05:00:13] <moon-child> eh
[05:00:24] <moon-child> cpus are big enough the decoding bits don't take up _that_ much space
[05:00:38] <hayley> I don't think there is one AVX512 set, so there isn't one AVX512 instruction count. Oh well.
[05:00:53] <sm2n> it's still overhead
[05:01:02] <sm2n> cpu thermal headroom isn't exactly cheap
[05:01:06] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[05:01:11] <hayley> Can I have a read barrier in hardware yet?
[05:01:23] <moon-child> lol
[05:01:28] <moon-child> sm2n: uop cache go brr
[05:02:07] <sm2n> a hack
[05:02:20] <moon-child> also decode goes in parallel, so even without uop cache you can increase your buffer size.  Currently they use 16 bytes I think
[05:02:43] <hayley> If we did, a concurrent compacting GC with even concurrent stack scanning would be trivial.
[05:04:37] <moon-child> hayley: maybe bring it to https://github.com/riscv/riscv-j-extension ?
[05:04:38] -ixelp- GitHub - riscv/riscv-j-extension: Working Draft of the RISC-V J Extension Specification
[05:06:29] <sm2n> oh that's a nice idea
[05:07:32] <hayley> Not much to go by, other than having a baby user-mode MMU. IIRC Azul hardware had a special "GC mode" which could bypass MMU write protection too, but it could be generalised to something like Intel MPK. 
[05:08:53] <hayley> But perhaps a read barrier could be implemented by an instruction which looks up an address in the MMU, and traps if the page the address resides in is "invalid" somehow.
[05:10:31] <moon-child> hmm, ideally not actually traps--see recent sbcl change :P
[05:12:02] <hayley> Yes, the "trap" should still be handled in userland, but IIRC it was still called a trap.
[05:12:13] * moon-child nods
[05:12:37] <moon-child> complication with userspace traps is red zone.  Wonder how they handle that
[05:13:04] <hayley> https://youtu.be/5uljtqyBLxI?t=3402
[05:13:05] -ixelp- Java on a 1000 Cores - Tales of Hardware / Software CoDesign - YouTube
[05:13:52] <sm2n> isn't there some intel thing for that?
[05:14:19] <sm2n> userland traps
[05:14:57] <hayley> There's MPK for userland keys, but I don't know if the kernel is involved for a trap.
[05:15:57] <sm2n> https://lwn.net/Articles/871113/
[05:16:31] <sm2n> hmm, not really the same thing
[05:24:14] <hayley> moon-child: Now, the other part is that someone has to implement it in hardware...
[05:27:53] <moon-child> just make sure it makes js fast.  If they implemented FJCVTZS, they'll implement anything
[05:47:37] <gilberth> Hmm, UTF-8 decoding isn't trivial. And then I am only after having a fast US-ASCII case. I need a cheat sheet of the available ops.
[05:51:10] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[05:52:27] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:56:53] <hayley> JS has a GC, right?
[05:57:07] <hayley> So, yeah, probably does.
[06:00:12] <gilberth> Sure it has, what made you doubt that?
[06:01:23] <hayley> The joke is that concurrent compacting GC would probably make JS execution less choppy, even though V8 has a...fine incremental GC already.
[06:02:10] <gilberth> Is it choppy? And JS has no threads anyway.
[06:02:31] <moon-child> I thought they added something.  ‘web workers’?
[06:03:50] <hayley> You still might want parallel collection then. Give something for your other N - 1 cores to do.
[06:03:51] <gilberth> Yes, but they don't share objects.
[06:05:38] <gilberth> hayley: JS could and probably does already, if they are not too stupid, benefit from running a micro [nursery] GC between events. It's event based, all the way down. There is nothing JS could do, that you could see or notice otherwise while it runs. There is no sleep, no waiting, no synchronization, nothing.
[06:06:05] <hayley> I heard that if you never yield in NodeJS, the GC just never runs.
[06:06:08] <gilberth> And web workers and your main JS share octets, no objects.
[06:06:30] <gilberth> hayley: lol.
[06:07:17] <hayley> Pretty cool to have cooperative multitasking when you have unbounded work due to running a server, I guess.
[06:07:59] <gilberth> So when you want an interactive Lisp in JS, it's continuation passing and better not using the stack. This is reaaaaal fast.
[06:08:02] <hayley> Speaking of, there was a paper on an on the fly GC for Java, which presents latency numbers, but they don't really say if the latency is due to the GC or the server being overloaded.
[06:08:18] *** semz_ is now known as semz
[06:08:44] <gilberth> hayley: It's worse than cooperative. Your coloured subroutines article names the issue.
[06:09:22] <hayley> https://www.researchgate.net/publication/221032952_Implementing_an_On-the-Fly_Garbage_Collector_for_Java p.11: Is the on the fly GC 11x pausing too much by going from 10 threads to 15, or is the server crapping itself?
[06:09:24] -ixelp- (PDF) Implementing an On-the-Fly Garbage Collector for Java.
[06:09:37] <gilberth> So, while it is trivial to compile Lisp to JS (no surprise), it all is moot when you want READ-CHAR, or SLEEP.
[06:09:45] <hayley> It also helps that there was only one GC thread, so the GC just gets outpaced with more mutator threads.
[06:10:29] <gilberth> And btw JS has no TCO, otherwise continuation passing style would be somewhat sane at least.
[06:11:09] <pl> gilberth: CPS used to be reasonably popular as advanced JS technique in the past
[06:11:13] <gilberth> It's as anti-CLIM as you can get.
[06:11:27] <pl> especially under older runtimes
[06:12:27] <hayley> gilberth: Yeah, but even if you stomach the async/sync code shit, you're then given another turd of trying to figure if some threads can make another stall, simply because they won't yield. 
[06:12:47] <gilberth> pl: Still slow and as you don't have TCO, you end up in a loop invoking continuations all the time. You can however speed things up, when you allow the stack to grow for a while and only then unroll it again. But that would be placing bets on the stack size.
[06:13:09] <pl> gilberth: no loops involved actually
[06:13:14] <hayley> All that crap is about juggling yield points, more or less. And some people believe yield points are a fine synchronisation primitive. But you literally can't write lock-free code if you have async/await. Congratulations!
[06:13:45] <gilberth> pl: How does it work then? How do they implement the inherit GOTO, then?
[06:14:19] <pl> tl;dr old JS runtimes didn't really yield to GC or process events in any multithreaded way, so you pushed a continuation in the form of closure called by browser's timer thread
[06:14:49] <gilberth> There is your loop.
[06:14:51] <pl> this forced JS processing "off", made browser process next stuff on the site and run GC
[06:15:32] <pl> well, I wouldn't call it a loop, really, considering it was essentially async yield of "run my continuation whenever you have time next"
[06:15:50] <gilberth> And yes, I implemented a Lisp doing my stack trick and which would yield every now and then to let it appear to run concurrently with the browser.
[06:16:36] <gilberth> pl: It still is a loop. Or put otherwise: How do you implement SLEEP?
[06:17:18] <pl> by making a closure with continuation of what's going to happen after SLEEP and hooking it to timer interrupt coming later?
[06:18:02] <gilberth> You can't just in general invoke the continuation passed, because that would blow the stack. So you need to be prepared to yield anytime. Either to a top level loop, or through the event loop by yielding to the browser and setting a timer for more cycles.
[06:18:50] <pl> well, ok, yielding to browser puts an obvious break in the stack
[06:18:53] *** Quits: Inline (~Inline@aftr-37-201-241-35.unity-media.net) (Ping timeout: 256 seconds)
[06:19:06] <gilberth> pl: Yes, but as I pointed out, you need to have a loop to invoke all continuations on the way to the SLEEP. Everything needs to be continuation passing style, as you never know where the SLEEP might pop up.
[06:20:12] <gilberth> pl: I opted to throw to a main loop often and only after /n/ rounds through it to the browser. Some JS stacks are tiny. And it still is painfully slow, even if I allow for using a little stack.
[06:20:53] <gilberth> Going through the browser loop for every function return would be reaaaaaaaaaaal fast.
[06:22:23] <gilberth> I never tried, but I start to believe a carefully tuned BC interpreter would be faster. And put less pressure on the GC, as no closures need to be consed all the time.
[06:45:36] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[07:44:43] *** Joins: Catie (~user@user/catie)
[08:12:45] <hayley> https://dl.acm.org/doi/10.1145/277652.277718 Fuck it, generational stack scanning
[08:12:46] -ixelp- Generational stack collection and profile-driven pretenuring | ACM SIGPLAN Notices
[08:16:01] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:28:56] *** Joins: semz (~none@user/semz)
[08:38:47] <aeth> I hope everyone had a good 20211202
[08:38:54] <aeth> I mentioned it the day before, but not on 20211202 itself
[08:39:05] <aeth> (unless you're in the western 3/4 of North America)
[08:44:09] <Catie> aeth: Looks good to me
[09:00:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:05:20] *** Joins: Inline (~Inline@aftr-37-201-240-188.unity-media.net)
[09:05:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[09:05:28] *** Quits: Inline (~Inline@aftr-37-201-240-188.unity-media.net) (Remote host closed the connection)
[09:07:26] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[09:21:07] <gilberth> My bug for tonight: <https://lispcafe.org/how-hard-can-line-wrapping-be-p.mp4> A web browser again. Will they ever figure line wrapping out?
[09:21:55] <gilberth> Not funny.
[09:33:49] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[09:35:33] *** Joins: aeth (~aeth@user/aeth)
[09:52:09] <contrapunctus> gilberth: ISTR you mentioning CADR a few times...what's your connection to it? 🤔
[09:54:27] <moon-child> gilberth: forget about wrapping, they can't even get spacing right! https://0x0.st/-h_N.png
[09:54:53] <moon-child> firefox gets it right, though
[09:56:59] <gilberth> Browser are full of bugs in paragraph filling. Also: <http://clim.rocks/gilbert/browser-bugs/bug1.html>
[09:56:59] -ixelp- Safari Bug
[09:57:42] <gilberth> contrapunctus: None in particular, only that I have a recent interest in computer history.
[09:58:31] <gilberth> I mean, what do I need to do that with normal white space rules, #\newline is handled different from #\space?
[09:59:46] <contrapunctus> gilberth: ah, I thought you had an emulator or something.
[10:00:48] <gilberth> Brad Parker has, I only made it non-sluggish. Oh and I hacked a FILE server.
[10:01:48] <gilberth> Actually not much besides the CPU and harddisk emulation is still the original code.
[10:53:09] *** Quits: Catie (~user@user/catie) (Quit: sleepy)
[10:56:09] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[11:00:17] <moon-child> oh, wow, I just found a text selection bug in firefox too
[11:00:19] <moon-child> fun...
[11:16:51] *** Joins: notzmv (~zmv@user/notzmv)
[11:21:35] <susam> Hey moon-child! Is https://outerproduct.net/ your website?
[11:23:30] <gilberth> moon-child: Any plans to apply for membership with my Club of the Bug Haunted Ones?
[11:25:36] <moon-child> susam: yes
[11:25:38] <moon-child> gilberth: :D
[11:28:16] <susam> moon-child: Oh nice! Really enjoyed the AT&T syntax post! I see you maintain the website by handwritten HTML because your recent post on pointers is not listed under /boring/ .
[11:29:03] <moon-child> ah, heh, yeah, just updated that
[11:29:27] <moon-child> I need to get around to making an html sugar...
[11:33:31] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[11:36:46] <susam> I maintain my blog in plain handwritten HTML too (because that's how I learnt web-dev and still prefer it like that) but I have a small Common Lisp program too to add a common layout to all posts and generate the post list.
[11:41:02] <gilberth> As you might have noticed, I am currently at fixing proper defun-like signature typesetting for HTML documentation. I am hacking a markdown mockup, because that is the most convenient way for me. I can have Lisp macros and via CLIM have figures as SVG inline, both in the markup and the HTML document.
[11:41:53] <moon-child> susam: HTML is not horrible, and I much prefer it to some opaque monster of a markup language, which still requires me to write html if I am doing something non-trivial.  But I want--a couple of things, mainly
[11:42:32] <moon-child> 1, not having to write closing tags; 2, lightweight syntax for inline emphasis; 3, ability to execute arbitrary code for templating (so I can e.g. include a text file from somewhere and syntax highlight it)
[11:44:49] <gilberth> This is no HTML I do want to write by hand: <http://clim.rocks/gilbert/defun-signature-layout-3.html> or this approach: <http://clim.rocks/gilbert/defun-signature-layout.html>
[11:45:42] <gilberth> moon-child: You just spec'ed my markdown mockup. :-) Kind of.
[11:46:01] <moon-child> gilberth: I hate markdown
[11:46:06] <susam> On Emacs, I use C-c C-e to close tags. So emphasis is <em>text C-c C-e. Yes, including text files from somewhere and syntax highlight it requires adding some sugar and logic.
[11:46:57] <moon-child> gilberth: (I implemented most of this already) I have something like [font :color black I have [em [+ 2 2]] ;o] and it turns into <font color=black>I have <em>4</em> ;o</font>
[11:47:08] <gilberth> Here is my surface syntax for documentation: <http://clim.rocks/gilbert/foo.md.txt>
[11:47:32] <dave0> moon-child: i'm reading your article about at&t assembly syntax!
[11:48:07] <gilberth> moon-child: Well, I love to just time without hardly any markup. foo for italic (like here) and `blah` for TT. \n\n for paragraphs. Done.
[11:48:21] <gilberth> * type
[11:49:06] <moon-child> gilberth: I do plan to add those.  But you can not get away with special-purpose syntax for _everything_.  Just the most common things.  Otherwise you turn into c
[11:49:08] <gilberth> I prefer that over any actual markup syntax.
[11:50:55] <gilberth> moon-child: You can use HTML with my tool anytime or say @(foo-fun ...) to have Lisp evaluated and inserted. So there is an escape. But I wanted to have something as low as a threshold to use for me as I am already way too lazy on writing. And I don't need much typesetting. In fact, a proper stylesheet should do most of the work.
[11:51:44] * moon-child nods
[11:51:56] <dave0> hayley: "star trek: the motion picture" is on tv tonight
[11:52:04] <gilberth> This defun stuff is just there, because I want to document stuff I hack and finally get some out the door.
[11:54:18] * moon-child spots a number of stale chars in xterm
[11:54:32] <moon-child> maybe I should switch back to gnome-terminal ... but gnome-terminal was also infuriating
[11:55:01] <gilberth> moon-child: You try really hard to get into my exclusive club, don't you?
[11:55:16] <dave0> oh shit wrath of khan is on tv tomorrow
[11:55:32] <moon-child> gilberth: careful.  At this rate, I may outpace you
[11:56:11] <gilberth> moon-child: :D
[12:39:30] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[13:00:53] <hayley> https://www.youtube.com/watch?v=FPNjQ4JWr9U turns 50 today.
[13:00:53] -ixelp- Islands - YouTube
[13:16:39] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[13:17:03] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[13:26:32] *** Joins: cranium (~cranium@user/cranium)
[13:48:46] <hayley> https://people.eecs.berkeley.edu/~brewer/papers/threads-hotos-2003.pdf lololol
[14:11:12] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:eca1:6dc5:130:b5b5)
[14:34:19] <shka> they used linux, linux threads are damn cheap
[14:34:51] <moon-child> linux threads are damn expensive
[14:35:14] <moon-child> I want sending a message to be as cheap as calling a subroutine 
[14:37:04] <shka> moon-child: so cheap that spamming threads to write to the HDD is a thing
[14:38:52] <moon-child> still not cheap enough
[14:39:03] <moon-child> note writes are also quite expensive if you want to do them robustly
[14:39:12] <moon-child> partly this is posix being awful.  But.
[14:40:15] <hayley> I want threads that are so cheap that BT:MAKE-THREAD would deposit $0.01 in my bank account.
[14:40:34] <hayley> I could retire if I hacked decentralise2 and ran the tests as religiously as I usually do for a week.
[14:40:56] <moon-child> i don't need making threads to be super fast
[14:41:00] <shka> hayley: thread creation on linux is so chap that using thread pool to avoid creating new thread is a non-argument
[14:41:12] <moon-child> like thread-per-conn network thing is fine cuz net latency will be even bigger
[14:41:19] <moon-child> i just want free ctx switches once the thread is there
[14:41:47] <shka> moon-child: unix, can't do
[14:41:57] <moon-child> indeed! :<
[14:44:00] <moon-child> (well, you can do it, but not in a ‘traditional’ unix.  You would need some kind of safe substrate; some way of turning address spaces into name spaces.  If you do that you can put everything in the same address space.)
[14:49:55] <hayley> https://www.youtube.com/watch?v=xB7SIzpPZ74
[14:49:56] -ixelp- Telegram Sam - YouTube
[15:00:37] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[15:02:26] <hayley> hayley's tenth law part 2: some P2P communication thing now implemented a voluntary moderation system, where you can subscribe to moderators and do all that crap. I only gave a demo at the Online Lisp Meeting 1.5 years ago. I only wrote a manifesto a year ago, wherein people complained it was "too democratic" or something.
[15:03:17] <hayley> I really do like the idea of ditching everything else and just working on compilers.
[15:03:25] <hayley> Maybe GCs too.
[15:18:47] *** Joins: random-nick (~random-ni@87.116.165.83)
[15:44:58] <Gnuxie> heweh 
[15:53:27] <selwyn> theres a quantum sdk that supports python and c++ (no surprise)
[15:53:34] <selwyn> but javascript as well (why)
[15:54:04] <semz> something has to power those disruptive quantum blockchains as a service
[15:59:08] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:eca1:6dc5:130:b5b5) (Ping timeout: 268 seconds)
[16:10:23] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[16:16:14] <pjb> moon-child: you don't need threads to call a function. Just call it.
[16:27:54] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[17:38:56] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[17:40:32] <shka> i've just deleted a lot of code from statistical-learning
[17:40:36] <shka> feels good
[17:42:00] <shka> https://github.com/sirherrbatka/statistical-learning/commit/13e949ced835a85ba15a075c6be680608b333952
[17:42:01] -ixelp- Refactor tree protocl to allow for better code reuse. · sirherrbatka/statistical-learning@13e949c · GitHub
[18:14:44] <dave0> nite all
[18:14:56] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:17:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:18:42] *** Joins: treflip (~user@95.79.32.99)
[18:28:46] * selwyn thinks about quantum compilers
[18:30:12] <selwyn> how many irs have normal compilers used?
[18:30:31] <selwyn> clasp uses llvm and the sicl ir right
[18:30:46] <selwyn> is there any reason (apart from ugly practical considerations) why you would want to have more than one ir
[18:35:44] <shka> yes
[18:36:30] <selwyn> does it complicate compiler design much?
[18:36:56] <shka> but i think that clasp is using ASTs from sicl 
[18:37:09] <shka> not sure about IR 
[18:52:23] <shka> selwyn: regardless, you need lisp ATSs for lisp
[18:58:33] <selwyn> ight
[18:58:36] <selwyn> right
[19:00:19] <shka> and you need llvm IR for the actual code generator
[19:01:06] <selwyn> of course
[19:01:10] <selwyn> and you need this because of what clasp is
[19:03:13] <selwyn> but sbcl (i assume) cuts out the middleman and compiles directly to machine code
[19:03:42] <selwyn> or if you are compiling something with llvm you compile to the ir and let llvm handle the rest
[19:03:54] <selwyn> is there any reason to have more than one layer of intermediate representation
[19:03:57] <shka> dunno, about that
[19:04:18] <shka> selwyn: yes, you want to separate code generator from the ASTs
[19:05:41] <selwyn> ok
[19:05:57] <shka> so you will have one optimizer for all target platforms
[19:06:29] *** Joins: Alfr (~Alfr@user/alfr)
[19:08:28] <selwyn> i ask because quantum computers have several layers of what could be considered 'ir'
[19:08:48] <selwyn> so i don't know how applicable classical compiler theory is
[19:13:24] <shka> sorry, i don't know compilers 
[19:13:28] <shka> :(
[19:13:41] <selwyn> thats ok
[19:13:45] <selwyn> i don't know them either :)
[19:16:07] <contrapunctus> Is there any Common Lisp implementation which can run on 8-bit microcontrollers?
[19:16:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[19:16:36] <shka> contrapunctus: no
[19:16:57] <shka> but there is mikro-lisp
[19:36:12] *** Joins: makomo (~makomo@user/makomo)
[19:39:28] *** Joins: notzmv (~zmv@user/notzmv)
[19:41:56] <contrapunctus> shka: hm...
[19:51:53] <Gnuxie> i don't think it's possible to have CL on an 8-bit micro-controller 
[20:03:34] <selwyn> me neither
[20:04:59] <contrapunctus> I see 🤔
[20:07:50] <Gnuxie> thankfully 
[20:10:32] <shka> i think that you kinda need OS for cl
[20:11:30] <selwyn> yeah
[20:11:46] <selwyn> gnuxie: are you a snooker fan
[20:12:14] <Gnuxie> no lol
[20:13:38] <selwyn> ronnie o sullivan on dangerous form in the uk championship
[20:14:20] <Gnuxie> I used to watch it on the TV with my sister when i was a kid, though i couldn't tell you anything about it
[20:14:47] <Gnuxie> that doesn't sound unusual 
[20:15:42] <selwyn> will he ever stop playing
[20:16:51] <Gnuxie> when he becomes incapacitated, not sure that's in the rules though 
[20:17:30] <selwyn> judd trump lamping him in the back of the head with a cue
[20:30:56] <ck_> yes hello I'd like to try gossip news 400 to see how it feels
[20:30:59] <ck_> https://www.gloucestershirelive.co.uk/news/gloucester-news/bomb-squad-called-gloucestershire-royal-6298076
[20:35:23] <Gnuxie> unfortunate indeed 
[20:37:35] <selwyn> > The man was a military enthusiast who found the shell while clearing out, but somehow "tripped" and fell onto the 57mm piece of army ordnance that landed him in hospital
[20:37:37] <selwyn> classic
[20:39:09] <selwyn> does that mean its 57mm in diameter?
[20:40:16] <ck_> yes
[20:40:37] <ck_> I thought the same about slipping and falling, many bad things seem to be possible as a result
[20:41:17] <selwyn> bottle of hp sauce
[20:41:25] <selwyn> mortar shell
[20:41:31] <selwyn> rent boy
[20:41:35] <selwyn> anything can get up there
[20:41:48] <selwyn> does this kind of thing happen in other countries? i only ever hear of them trying that excuse on here
[20:42:22] <ck_> oh, it definitely is a universal thing
[20:43:41] <ck_> for example, there's a famous medical doctoral thesis about injuries after masturbating with a certain type of vacuum cleaner
[20:44:43] <contrapunctus> selwyn: "bottle of hp sauce"?
[20:44:50] <ck_> like a typical medical dissertation, it's not really deep research, but more a collection of case studies
[20:47:18] <selwyn> https://www.youtube.com/watch?v=SBjqWqzJMbo
[20:47:18] -ixelp- Bottle Up Arse - YouTube
[20:47:32] <selwyn> actually the brand not specified
[20:47:54] <ck_> [injunction suit incoming]
[20:48:14] <selwyn> i just don't want to be guilty of spreading misinformation on #lispcafe
[20:48:58] <ck_> just say you tripped and fell on the keyboard
[20:49:03] <selwyn> hahaha
[21:03:34] *** Joins: Catie (~user@user/catie)
[21:32:55] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:38:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:46:07] <gilberth> Good morning #lispcafe!
[21:49:25] <contrapunctus> Good evening gilberth 
[21:50:29] * gilberth considers to use "moin" as a greeting next time.
[21:51:44] <gilberth> I wonder what would be a good syntax for so called hyper links in a markdown-alike syntax.
[21:52:32] <ck_> don't they already do [1],  1: <link> ?
[21:52:36] <contrapunctus> [foo](bar) => <a href=bar>foo</a> ?
[21:53:31] <gilberth> Yes, both are available, but somehow I don't like either. Hmm.
[21:54:21] <gilberth> Especially not the latter as it's backwards to me. The reference should be in square brackets, not the link title.
[21:56:34] <gilberth> The former has the technical problem of not marking the linked text.
[21:58:03] <contrapunctus> gilberth: [[foo][bar]] => <a href=foo>bar</a>
[21:58:17] <contrapunctus> Org mode ;)
[21:58:26] <gilberth> That's even worse, sorry.
[22:00:08] <ck_> +++++++++++++++++++++++++[>++>+++>++++>+++++<<<<-]+++++++++++++++++++++++++>>>---------.+++++++++++.+++++++++..<++++++++++++++++++.<----------.>+++++.-.>+++.<<+.
[22:00:10] <gilberth> I contemplate _the most famous hack_[1] or _the most famous hack_[http://hack.example.come]. I already have ... for italic. But also not ideal.
[22:00:45] <gilberth> s/come/com ;me needs more coffee.
[22:01:28] <gilberth> Or perhaps put URLs in angle brackets? This is custom in plain text.
[22:04:26] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[22:04:41] <gilberth> Using [1] has the problem that I need to manually make sure that I don't use it twice. Bad.
[22:17:14] <pjb> (incf ck_)
[22:46:58] <gilberth> However my main grief with markdown is not its idea per se, but the implementation, which is fragile regarding escaping and produceing HTML in an ad hoc way.
[23:07:01] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[23:07:01] *** ChanServ sets mode: +o MichaelRaskin
[23:15:58] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[23:56:38] <gilberth> First bug for tonight: Preview.app crashed. As this is most likely C, this points to a potential security issue.
