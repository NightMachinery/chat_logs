[00:06:13] *** Quits: benin (~benin@183.82.179.164) (Quit: The Lounge - https://thelounge.chat)
[00:06:33] *** Quits: julm (~julm@user/julm) (Quit: leaving)
[00:07:00] *** Joins: julm (~julm@user/julm)
[00:07:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:10:37] *** Quits: julm (~julm@user/julm) (Client Quit)
[00:13:05] *** Joins: julm (~julm@user/julm)
[00:30:02] *** Joins: benin (~benin@183.82.179.164)
[00:33:23] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[00:33:23] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[00:33:26] *** allbery_b is now known as geekosaur
[00:40:50] *** Quits: benin (~benin@183.82.179.164) (Quit: The Lounge - https://thelounge.chat)
[00:41:07] *** Joins: benin (~benin@183.82.179.164)
[00:41:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[00:42:01] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Quit: gone to sleep. ZZZzzz…)
[01:01:27] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[01:02:30] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[01:03:31] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Client Quit)
[01:44:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:51:17] *** Quits: benin (~benin@183.82.179.164) (Quit: The Lounge - https://thelounge.chat)
[02:00:22] *** Joins: benin (~benin@183.82.179.164)
[02:05:33] *** Quits: benin (~benin@183.82.179.164) (Quit: The Lounge - https://thelounge.chat)
[02:18:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[02:22:45] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[02:24:36] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:40:06] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[03:03:05] *** Quits: jasonmason (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[03:34:00] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[04:08:03] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[04:14:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:39:54] *** Joins: boxscape_73 (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[04:42:31] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:48:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[05:20:24] *** Quits: opfez (~opfez@ti0013a400-3880.bb.online.no) (Ping timeout: 260 seconds)
[05:32:41] *** Joins: opfez (~opfez@ti0013a400-7032.bb.online.no)
[06:30:02] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[06:31:30] *** Joins: sander (~sander@user/sander)
[06:45:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:54:17] *** Joins: pfurla (~pfurla@201.17.118.230)
[07:19:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[07:44:56] *** Quits: boxscape_73 (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[08:00:53] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[09:15:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:24:34] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[09:37:19] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 252 seconds)
[09:50:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[11:07:31] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Ping timeout: 252 seconds)
[11:45:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:54:54] *** Joins: vpan (~0@212.117.1.172)
[12:32:20] *** Joins: libertyprime (~libertypr@203.211.78.24)
[12:47:36] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:36] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:39] *** allbery_b is now known as geekosaur
[14:12:47] *** Joins: wei2912 (~wei2912@116.88.103.128)
[14:13:06] *** Quits: libertyprime (~libertypr@203.211.78.24) (Quit: leaving)
[15:09:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:10:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:15:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:16:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:26:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:26:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:37:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:38:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:38:19] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[15:48:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:49:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:54:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:54:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:57:27] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Quit: gone to sleep. ZZZzzz…)
[15:58:50] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[15:59:43] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Client Quit)
[16:00:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:00:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:03:27] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[16:05:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:06:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:11:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:12:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:21:52] *** Joins: _bo (~bo@79.171.122.236)
[16:23:37] <_bo> Does haskell or rather stack work with docker? I'm not fluent with either, but it seems that stack allows me to containerize an app to be later deployed and scaled with containers, is this correct?
[16:24:16] <merijn> tbh, I'm not really what that statement means, let alone whether it's correct
[16:25:29] <merijn> I mean what does it mean to "containerize an app"? And what does it mean to "allow" that?
[16:25:30] <_bo> Alright, I need to understand what to ask first
[16:25:35] <dminuoso> "containerize" is such a complicated word.
[16:25:48] <dminuoso> And I think its worthless jargon used in circlejerk groups
[16:26:03] <dminuoso> Docker containers are capable of running ELF binaries.
[16:26:09] <dminuoso> Haskell can be shipped as ELF binaries
[16:26:12] <merijn> Well, I think docker makes sense if your entire toolchain conflates "build" and "runtime"
[16:26:18] <merijn> i.e. python/ruby/JS
[16:26:55] <dminuoso> Docker also makes sense if you need an exotic build environment
[16:27:07] <dminuoso> Like building statically linked ELF binaries in Haskell is most easy on alpine
[16:27:15] <dminuoso> and docker makes providing an alpine environment rather trivial
[16:27:17] <merijn> _bo: In the end "Haskell" binaries are just, well, binaries the same way C/C++ applications are you can distribute them (or libraries) independently as binaries without any Haskell tooling on the machine that runs them
[16:27:17] <jneira[m]> and the runtime is tied to the machine, java does not need docker so hard
[16:27:38] <merijn> jneira[m]: Java also has a "hard" line between build and runtime, though
[16:28:15] <jneira[m]> merijn: ideally :-P
[16:28:42] <dminuoso> also, docker is a great environment for tests. :
[16:29:04] <_bo> I understand I know nothing now
[16:29:10] <merijn> :D
[16:29:11] <jneira[m]> or development
[16:29:13] <dminuoso> Anyway
[16:29:18] <dminuoso> 13:56:03  dminuoso | Docker containers are capable of running ELF binaries.
[16:29:19] <dminuoso> 13:56:08  dminuoso | Haskell can be shipped as ELF binaries
[16:29:25] <dminuoso> _bo: ^- these are the key lines I think
[16:29:53] <dminuoso> So if you have some autoscaling K8s infrastructure in mind, yeah you can put your Haskell binaries into containers if you like
[16:29:55] <merijn> the implicit "why do you (think you) need containers?" is also pretty key :)
[16:30:39] <_bo> dminuoso: thanks!
[16:31:07] <_bo> The reason I was asking is that I have an mqtt queue with a certain messaging going through
[16:31:18] <jneira[m]> merijn: and drawbacks are not always outlined off there
[16:31:44] <_bo> I just wanted to write a small haskell app, listening for a certain topic
[16:32:34] <_bo> Catch is that everything is hosted in azure and it could be that I might need multiple instances of this listener, which calls for docker, imo
[16:32:57] <_bo> So I wanted to know if it's possible at all, before putting effort into that
[16:33:18] <_bo> I understand it is possible, so why not give it a try
[16:36:15] <jneira[m]> sure, i think merijn advise is maybe you could consider use directly the executable, without enclosing it in a container
[16:36:57] <dminuoso> _bo: Why do you think you need multiple instances of this listener?
[16:38:02] <jneira[m]> that would be simpler and faster so there have to be very good reasons to put in inside a container
[16:38:39] <jneira[m]> but you know the complete context to decide of course
[16:39:01] <geekosaur> I feel like people reach for containers too quickly
[16:39:53] <geekosaur> they don't really add anything, at most they're a convenient way to reproduce a developer's known-working environment on another machine, which is kinda bad hygiene
[16:40:54] <dminuoso> They also create frustrating barriers, where interaction with that environment becomes difficult, you introduce a volatile and complicated tech stack few people understand well, docker also has disgusting ways of interacting with the networking stack..
[16:41:12] <_bo> dminuoso: There are multiple customers, which could be interested in some messages and since there's one mqtt bus, I though that I could write one listener and deploy it with different configs, on what to listen for and where to send output
[16:41:35] <dminuoso> You could also bake multi tentancy into the program
[16:41:46] <dminuoso> Or just have sufficient automation to spool up new servers.
[16:42:32] <_bo> Can you please direct me to some reading material on mentioned topics?
[16:42:42] <_bo> Please, no "let me google it for you" stuff
[16:50:11] <_bo> Aight, perhaps there's no need for docker after all, but need to think of subscription management
[16:50:21] <_bo> Thanks, I'm satisfied with my care
[17:06:14] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[17:07:37] *** Joins: hololeap (~hololeap@user/hololeap)
[17:18:49] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Quit: gone to sleep. ZZZzzz…)
[17:24:09] *** Quits: alx741 (~alx741@181.196.68.155) (Ping timeout: 256 seconds)
[17:36:33] *** Joins: alx741 (~alx741@186.178.108.253)
[17:39:38] <vpan> I'm a Haskell beginner but this sentiment of hating unjustified complexity and disillusionment with whatever the tech FAD of the time is makes me feel at home :)
[17:48:34] <merijn> vpan: That only applies sometimes >.>
[17:48:50] <merijn> vpan: Other times people invent their own fads, but on the type level >.>
[18:04:30] <_bo> >Containerization is an approach in which an application, its dependencies, and its configuration (abstracted as deployment manifest files) are packaged together as a container image
[18:04:39] <_bo> This is very confusing to me
[18:04:58] <_bo> App, dependencies and whatnot are abstracted away
[18:05:04] <dminuoso> Yes, docker is very confusing.
[18:05:16] <dminuoso> And it is so without adding much benefit
[18:05:37] <merijn> _bo: Ok, so hyper-biased summary
[18:05:41] <_bo> Can we say that angular app, is a container, because all dependencies are abstracted away in a package.json file?
[18:05:52] <dminuoso> _bo: a container is roughly a filesystem virtualization.
[18:05:58] <merijn> Python, Ruby, etc. all started out as simple scripting language without much dependency management and stuff
[18:06:00] <dminuoso> Plus additional safeguards/magic in the kernel
[18:06:13] <merijn> The way you imported stuff was just "look up the file, evaluate contents"
[18:06:44] <merijn> Now, that doesn't really scale, so people started creating more and more elaborate systems to find these files...which became a hassle to deal with, so they built tools to handle that
[18:07:00] <_bo> Please, define "scale"
[18:07:09] <merijn> Unfortunately, at no point did anyone bother to distinguish "the tools and stuff for development" and "tools and stuff for production"
[18:07:39] <merijn> So most of the Python/Ruby tooling handles both dev tools and dependencies *and* runtime tools and dependencies with no clear distinction
[18:07:53] <merijn> And after 10-15 years of that, no one wants to deal with untangling the mess that creates
[18:08:33] <dminuoso> That history is flawed and mostly wrong. But it's makes for a good pubtime talk.
[18:08:36] * dminuoso shrugs
[18:08:44] <merijn> Which means the easiest thing is to just always ship dev and runtime dependencies. But that becomes a mess when multiple projects conflict
[18:08:53] <merijn> dminuoso: I did say "hyper-biased summary" :D
[18:09:04] <dminuoso> heh.
[18:10:02] <merijn> _bo: So you stuff everything into a container, which then acts as a sorta lightweight VM separating the run/dev mess of individual projects from each other
[18:10:43] <_bo> Alright, makes sense, let's make app carry it's own OS with it kind of thing
[18:10:51] <dminuoso> _bo: Broadly you can think of docker as lightweight VMs that share kernel resources with the host.
[18:11:05] <dminuoso> (that is, a container doesnt bring its own kernel)
[18:11:09] <merijn> _bo: Right, because it's hard to reuse the same node.js installation and package dir across multiple applications
[18:12:05] <merijn> _bo: But with Haskell (or C/C++/Rust/Go/insert compiled language of choice) you don't really have any interpreter or shared module/package stuff. You just have "an executable" (and maybe "some libraries") which are all pretty explicitly identified
[18:13:41] <_bo> So nothing prevents me from starting another instance of app, without making it carry whole tree of dependencies with it
[18:14:04] <merijn> _bo: I mean, in theory the same app should be fine even for the interpreted ones
[18:14:07] <_bo> Obv. depends on what that exec does, but still
[18:14:19] <merijn> _bo: The real issue is "multiple different apps with conflicting dependencies"
[18:15:08] <merijn> _bo: But (by default) all Haskell packages are linked into the final executable statically, so each executable will have it's own libraries embedded anyway
[18:16:10] <_bo> Alright, this makes sense
[18:17:01] <_bo> So coming back to original question about putting haskell app in a docker to start it several times seems like an unnecessary thing, since there's no need for docker at all
[18:17:54] <geekosaur> it still has its uses, but you should understand those uses and the need for them before dragging docker into it
[18:18:11] <_bo> However since whole thing is hosted in azure, it's either different appservice for each listener instance (which might be a lot), or one app, which supports tenancy
[18:18:17] <geekosaur> otherwise it's just one more thing that can go wrong
[18:21:31] <_bo> Don't you feel like industry is bit too pushy about microservice architecture?
[18:21:43] <_bo> Hello world? Here's how microservices can help you
[18:22:47] <_bo> merijn: thx for hyper-biased explanation!
[18:25:06] <dminuoso> _bo: docker has nothing to do with microservice architecture.
[18:25:37] <_bo> That was a new topic starter
[18:25:52] <dminuoso> Fair
[18:25:54] <vpan> _bo: http://boringtechnology.club/ ;)
[18:34:09] <merijn> My main complaint about microservices is that most people don't understand WTF they're doing
[18:34:26] <merijn> "Our app had a single point of failure, so we turned into a distributed micro-services design"
[18:34:42] <merijn> '...but...your application can't tolerate any of the services failing...'
[18:34:47] <merijn> "Yeah? So?"
[18:35:02] <merijn> 'so you turned a single point of failure into multiple points of failure...'
[18:35:05] <merijn> "..."
[18:39:50] *** Quits: opfez (~opfez@ti0013a400-7032.bb.online.no) (Remote host closed the connection)
[18:42:08] <vpan> this generalizes well - not knowing what you're doing is often at the of the problem :)
[18:50:12] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[18:57:22] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[19:19:16] *** Joins: samhh (7569f027cf@2604:bf00:561:2000::e4)
[19:22:28] *** Quits: xsperry (~xs@user/xsperry) ()
[20:01:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:22:26] *** Quits: wei2912 (~wei2912@116.88.103.128) (Quit: Lost terminal)
[20:23:09] *** Quits: _bo (~bo@79.171.122.236) (Read error: Connection reset by peer)
[20:35:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:40:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:42:19] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Quit: gone to sleep. ZZZzzz…)
[20:59:46] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[21:00:53] *** Joins: zaquest (~notzaques@5.130.79.72)
[21:46:41] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[22:33:13] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[22:34:32] *** Joins: hololeap (~hololeap@user/hololeap)
[22:36:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:09:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[23:28:32] *** Joins: xsperry (~xs@user/xsperry)
