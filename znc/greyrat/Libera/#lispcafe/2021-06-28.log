[00:00:20] <Aurora_v_kosmose> gilberth: I wonder if you might not instead be intolerant to some byproduct of the bacteria used in making cheese.
[00:01:14] <gilberth> shka: I neither want or need to masquerade.
[00:02:03] <edgar-rft> also not at the internet carneval?
[00:02:14] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[00:02:46] <gilberth> Aurora_v_kosmose: Could well be. It is worst however with sheep cheese. Of which literally half a tea spoon is enough to set be off.
[00:03:17] <gilberth> edgar-rft: Carneval?
[00:04:30] <edgar-rft> okay, carnival :-)
[00:05:15] <edgar-rft> carneval is carnival for beef-eaters
[00:06:40] <aeth> gilberth: interesting because a lot of people online tell people in your situation to try goat cheese (which I guess is probably like sheep cheese)
[00:06:41] <gilberth> I know. A "wall of meat" literally.
[00:07:24] <gilberth> aeth: Yes, I guess so.
[00:07:51] <aeth> The principle is the same, anyway. Try cheese from a different animal
[00:08:00] *** Joins: shka (~herr@109.231.62.239)
[00:09:04] <gilberth> aeth: tbh, I don't care as on top of that, I don't like the taste of cheese anyway, so I don't miss anything.
[00:10:23] <aeth> A lot of things are only really given flavor from the cheese, e.g. the lazy way most people make pasta at home (well, a bland sauce, too).
[00:10:40] <aeth> But I have quite a lot of spices now so I just put that on pasta instead of cheese, and it tastes way better
[00:11:36] <gilberth> shka: Thanks for the pointer. But I want to connect to the existing Wifi LAN just like a switch would do. I want a wired LAN in my room, but can't pull a wire though the house to connect to the existing Wifi, which then connects outside. I am only guest here.
[00:12:27] <shka> uh, so you want a repeater?
[00:12:47] <gilberth> Is that what a repeater does?
[00:13:03] <shka> i honestly can't understand what you want to achieve
[00:13:11] <shka> other then connecting to wifi 
[00:13:52] <shka> i know that you want a cable, but then you will need some sort of network adapter
[00:14:11] <gilberth> I want to connect a wired LAN, which I would setup in my room via Wifi to the existing LAN. Like with a switch, but the uplink being wifi.
[00:14:59] <gilberth> shka: Yes, normally I would route a wire down to where the internet router/switch is. But I cannot do that, it's not my house.
[00:15:24] <shka> sure, buy yourself a wifi router, connect it to the original network, pull cable between the router and your computer, set the gateway, done?
[00:16:27] <gilberth> ok. I'll read the docu of my spare wifi AP, which is pretty nifty. I only have find a power brick, as I used to power it via PoE.
[00:17:34] <gilberth> [My own house, where I don't live, is completly wired with PoE available.]
[00:18:12] <shka> gilberth: you can also use the powerline ethernet thingy
[00:18:16] <shka> can't remember the name
[00:18:49] <shka> hey, i got the name right
[00:18:52] <shka> it is the powerline
[00:19:02] <gilberth> Nope. I will not use the power line.
[00:19:15] <shka> as you wish
[00:19:59] <gilberth> It radiates like hell, not nice.
[00:20:48] <shka> you are concerned with the security?
[00:21:07] <gilberth> No, with the radio interference.
[00:21:52] <gilberth> I just don't want to pollute the ether any more than is necessary.
[00:21:59] <shka> ok
[00:22:11] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[00:24:47] <gilberth> shka: Anyhow, thanks. I'll google myself, although Google is getting worse at finding relevant information each day.
[00:43:08] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[00:58:36] *** Joins: lucf117 (~lucf117@user/lucf117)
[01:26:32] *** Quits: brainfunnel (~quassel@187.142.208.46.dyn.plus.net) (Quit: thanks, bye!)
[01:28:50] *** Quits: nckx (~nckx@tobias.gr) (Quit: Updating my Guix System <https://guix.gnu.org>)
[01:29:44] *** Joins: nckx (~nckx@tobias.gr)
[01:30:33] *** Quits: nckx (~nckx@tobias.gr) (Remote host closed the connection)
[01:31:45] *** Joins: nckx (~nckx@tobias.gr)
[01:56:35] *** Joins: selwyn (~selwyn@user/selwyn)
[02:03:29] <gilberth> They again haul freight trains here like crazy. I wonder what they haul, when ships are said to be stuck in China.
[02:04:15] <selwyn> do you live near a train line?
[02:04:32] <aeth> CL is amazing for a compiled language.
[02:04:49] <gilberth> I mean, they haul north, that is from the harbor not towards it.
[02:04:56] <aeth> 17:33:29 :gilberth!~gilberth@p54bfef57.dip0.t-ipconnect.de PRIVMSG #lispcafe :They again haul freight trains here like crazy. I wonder what they haul, when ships are said to be stuck in China.
[02:05:00] <aeth> 17:34:15 <selwyn:#lispcafe> do you live near a train line?
[02:05:04] <aeth> That instant transparent recompilation and hot loading
[02:05:25] <aeth> I just turned the PRIVMSG from the raw IRC format to a readable one, with just one git pull and file recompile
[02:05:40] <aeth> and nothing has broken, hopefully
[02:06:00] <gilberth> selwyn: It runs right besides the back yard. During the day it's mostly public transport. But this is good for me, every train passing reminds me, that there are more people than just me.
[02:06:41] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:59fd:6cc7:d82f:e6b3)
[02:07:24] <selwyn> i live next to three train lines and i find it very relaxing
[02:07:36] <gilberth> aeth: IMHO CL still is the best language. My very last key I'll type before I eventually die will be ")".
[02:07:51] <selwyn> it´s nice to listen to them in the morning before i have properly woken up, or at weekends
[02:07:58] <selwyn> gilberth: excellent epitaph tbh
[02:08:05] <aeth> gilberth: It's only the best language because Airship Scheme isn't complete yet
[02:09:10] * aeth wonders if the bot will crash on /me
[02:09:14] <aeth> success?
[02:09:56] <gilberth> selwyn: It is. I really hate my house [in which I am not living], and that hate is mutual, complete silence there. And pitch black at night. You feel like the last human.
[02:10:26] <aeth> gilberth: 2020 made a lot of people feel like the apocalypse has happened
[02:10:29] <selwyn> uh ok :(
[02:10:46] <aeth> gilberth: idk if I'd be able to tolerate absolute, complete silence though
[02:10:58] <gilberth> aeth: I don't trust Airship Scheme, you will perhaps put in an exploit into the compiler triggered by the uid being me. You did that to cond, you'll do it again.
[02:11:25] <aeth> cond: do you love gilberth?
[02:11:25] <cond> aeth: Yes!
[02:11:42] <gilberth> cond: I love you too.
[02:11:43] <cond> gilberth: nope
[02:11:50] <aeth> ouch
[02:11:53] <gilberth> aeth: See. :)
[02:12:12] <aeth> I mean, cond thinks that you hate it
[02:12:17] <aeth> And I can see why
[02:12:53] <gilberth> selwyn: Yes, and it is very funny in a way to read articles about how people suffer from lockdown and solitude. It's the norm for me with no friends, no work, or school, in the middle of nowhere, where can't even go out.
[02:13:54] <selwyn> for me the main emotion is boredom with having to stay in my area most of the time, though its become much mitigated since the lockdown restrictions were lifted
[02:13:57] <selwyn> however
[02:14:00] <gilberth> aeth: I still like cond, it's only that I hoped for a Porsche and cond disappointed me. Guess I need to find some money to buy one myself.
[02:14:07] <selwyn> we are going back to being plague island
[02:14:29] <selwyn> i cannot believe that we managed to fuck the covid response again for the third time
[02:14:34] <selwyn> after vaccinating so many people
[02:14:36] <gilberth> selwyn: I am never bored.
[02:14:43] <selwyn> that´s nice
[02:15:13] <selwyn> gilberth: do you still maintain some kind of covid dashboard?
[02:15:26] <gilberth> selwyn: Yes, and we seem to make the same mistakes as you did. Again.
[02:15:52] <gilberth> selwyn: No. Not for a long time as my data sources went dry.
[02:16:41] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[02:17:13] <dave0> maw
[02:17:13] <gilberth> I will get my second shot of Biontec this Friday. I'll feel safer then.
[02:18:03] <gilberth> Hello, dave0!
[02:18:09] <dave0> maw gilberth 
[02:20:15] <gilberth> selwyn: And interesting plot would be the Delta variant numbers for Germany. Our numbers are pretty low and declining, yet in absolute numbers the Delta variant rises. The forth wave is hiding in the third wave ending.
[02:21:33] <gilberth> fourth, even ; too much PS for me.
[02:22:28] <selwyn> lisp over lambda has a forth implementation as an example
[02:22:38] <selwyn> i should read it sometime
[02:23:46] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 272 seconds)
[02:24:05] <gilberth> Isn't it "Let over lambda"?
[02:24:19] <selwyn> yeah that
[02:24:29] <selwyn> lately i misremember words a lot..
[02:24:44] <gilberth> Could have been a second book.
[02:25:05] <selwyn> no, it was definitely let over lambda
[02:25:07] <selwyn> last chapter
[02:25:11] <gilberth> I have it sitting on my book shelf, yet never read it.
[02:26:21] <selwyn> it is decent, even inspirational for me when i read it as a newbie
[02:26:41] <selwyn> but iirc it does code walking by #´flatten ing function definitions
[02:26:56] <selwyn> which is actually broken on sbcl
[02:27:31] <gilberth> Ah. Anyhow, I believe there is nothing for me to learn. :(
[02:27:43] <gilberth> selwyn: why did it break?
[02:27:59] <aeth> gilberth: nothing left to learn for what?
[02:28:02] <selwyn> behaviour of quasiquotes
[02:28:40] <selwyn> some of which is not in the spec and implementation dependent
[02:28:52] <selwyn> let me try to find it
[02:29:02] <gilberth> Yes, I never really got, why backquote does it work in a reader macro instead of being syntax only like "'".
[02:29:45] <gilberth> aeth: For what? Lisp hacking, I guess.
[02:30:38] <selwyn> https://github.com/thephoeron/let-over-lambda/blob/master/let-over-lambda.lisp#L61
[02:30:39] -ixelp- let-over-lambda/let-over-lambda.lisp at master · thephoeron/let-over-lambda · GitHub
[02:31:00] <selwyn> they had to patch #´flatten when sbcl updated its backquote implementation (lol)
[02:31:18] <aeth> gilberth: there's always new things being added
[02:32:04] <aeth> In particular, there's still no portable equivalent to all of the functionality of sb-unicode afaik.
[02:32:27] <selwyn> and gilberth wept because he had nothing else to learn
[02:33:34] <aeth> Unicode, graphics, networking, etc., still has some ways to go as far as completion goes. And probably general interlanguage interop
[02:33:35] <gilberth> selwyn: Ok. They put a kind of structure or instance into the code? Bad.
[02:33:56] <selwyn> yeah bad
[02:34:09] <selwyn> which reflects somewhat badly on the approach of the book
[02:34:25] <gilberth> So this breaks a contract set by the ANSI-CL.
[02:34:34] <selwyn> however, they try to do very ambitious things with macros
[02:34:48] <gilberth> aeth: That is just APIs. And graphics is CLIM for me.
[02:35:47] <selwyn> so i can understand how such a thing happened
[02:37:34] <gilberth> Indeed: ,x reads as a structure, which by ANSI-CL is a constant in code. Bad, pretty bad.
[02:38:41] <gilberth> selwyn: Well, they could have done (defmacro comma (x) x) and read ,x as (comma x) and forms would print back as nicely.
[02:38:56] <aeth> gilberth: networking/unicode/etc. blurs the line between built-in and API, even though it's outside of the spec. CFFI-type stuff as well
[02:39:13] <selwyn> hm
[02:39:25] <selwyn> i wonder if underspecifying quasiquote/comma was a mistake
[02:39:35] <gilberth> aeth: Still libraries. Nothing CL specific.
[02:40:31] <gilberth> selwyn: No it's not. ANSI-CL said that there are those 23 or so special forms, and everything else is either a macro or an ordinary function => A portable code walker is possible to write. SBCL breaks that.
[02:41:03] <aeth> gilberth: Yes, but the Schemer would say that CL itself is mostly just library, with the core language being rather small, and it's just unfortunate that everything got thrown into "CL" instead of being separated like with, say, r7rs
[02:42:07] <gilberth> aeth: Sure, but unlike CLOS or heck conditions, none of the things mentioned by you would introduce new language concepts.
[02:44:10] <selwyn> i uh
[02:46:00] <selwyn> i don´t understand why that rules out the possibility of backquote being a read macro that expands to some weird shit
[02:46:12] <gilberth> Rather: (defmacro comma (x) `(values ,x))
[02:46:51] <gilberth> selwyn: A structure object is a constant as per ANSI-CL.
[02:47:15] <selwyn> yes
[02:47:51] <gilberth> SBCL breaks this assumption. => I cannot write a code walker, or an interpreter.
[02:48:31] <selwyn> i see
[02:48:47] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:50:11] <gilberth> CLISP e.g. does `,x => (SYS::BACKQUOTE (SYS::UNQUOTE X)), which is fine, as SYS::BACKQUOTE is a macro, I can expand.
[02:51:24] <selwyn> oh
[02:51:35] <selwyn> now i get it
[02:51:44] <gilberth> what a second: SBCL does the same, only that they use a struct. But that is inside the SB-INT:QUASIQUOTE macro. Which is fine. So I stand corrected.
[02:51:54] <selwyn> lol
[02:51:57] <gilberth> * wait a second.
[02:52:09] <selwyn> so, let over lambda is broken in some way
[02:52:12] <aeth> quasiquotes are weird in CL
[02:52:17] <aeth> in Scheme they act just like QUOTE
[02:52:24] <aeth> (quasiquote 1) instead of (quote 1)
[02:52:44] <gilberth> aeth: Especially nested ones.
[02:52:54] <aeth> yeah, once you nest more than one, just stop :-p
[02:53:02] <aeth> it's not so bad if you nest it via functions though
[02:53:09] <aeth> i.e. call functions that return `(foo 42)
[02:54:22] <gilberth> It gets funny, when you write macros to define macros. You wind up with ,',x and such lovely things. I can only do that by experimentation.
[02:55:01] <aeth> well, that's why I tend to use LET/FLET or helper functions
[02:55:06] <aeth> in any macro that's even remotely complicated
[02:55:14] <aeth> or just expand to a macro
[02:56:13] <gilberth> Yes, otherwise it approaches being line noise like overly complicated format strings.
[02:56:52] <hayley> ,', is the middle finger operator
[02:57:22] <gilberth> hayley: Well, good morning then. Is there an emoji for that?
[02:58:16] <hayley> 🖕
[02:58:20] <hayley> You asked.
[02:58:31] <gilberth> That is not rendered here :-)
[02:59:38] <gilberth> Indeed, I would not have thought it would exist.
[03:28:59] <aeth> Another recompile. I think I'm finally free from the PING PONG noise
[03:29:09] <aeth> idk how some clients show it all by default, in particular mIRC iirc
[03:30:06] <aeth> Now I should be able to read this channel just via cond's SLIME output
[03:32:22] <gilberth> CL-IRC handles pings by default.
[03:33:00] <aeth> handling pings is easy, knowing what to do with them is hard
[03:33:11] <gilberth> However, that reminds me that I want ixelp to ping the server and reconnect by itself, if needed.
[03:33:23] <aeth> e.g. 18:57:48 -!- [PING] zinc.libera.chat
[03:33:30] <gilberth> aeth: Just pong?
[03:33:34] <aeth> right
[03:33:54] <aeth> not quite that simple since if you get the two argument PING you're supposed to respond to the second rather than to the first, but idk if any server does that
[03:34:00] <gilberth> However I did not yet find out what the argument to a PING really is.
[03:34:34] <aeth> the raw message is iirc: PING :foo, PING foo, PING foo :bar, or PING foo bar
[03:34:36] <gilberth> aeth: Where have you found that information?
[03:34:42] <aeth> You are supposed to respond to the second
[03:34:47] <aeth> (or first if no second is provided)
[03:35:03] <aeth> gilberth: ping in particular is via https://datatracker.ietf.org/doc/html/rfc1459 even though it's really, really out of date (May 1993)
[03:35:04] -ixelp- rfc1459
[03:35:26] <aeth> Most things are best gotten from https://modern.ircdocs.horse/ instead but it's not complete yet (e.g. it doesn't have PING/PONG)
[03:35:28] -ixelp- IRC Client Protocol Specification
[03:36:07] <aeth> I don't need an IRC library because all it does is add an additional API burden. I.e. I have to learn the API of the library rather than the well-documented protocol
[03:36:45] <aeth> I just parse the messages myself and send replies based on the specs. IRC is so simple that you can do it by hand from telnet, although you'd have to remember to PONG every PING
[03:37:09] <gilberth> Yeah, I read that a couple of times, it's not very clear. Oh, and it says, that servers should not respond to PING. :(
[03:37:16] <aeth> Most of the work I'm doing is what I'd have to do from a minimal IRC library, anyway, i.e. coming up with human-readable logging formats
[03:37:41] <aeth> gilberth: yeah, servers are supposed to PING, clients are supposed to PONG
[03:37:56] <aeth> when you /ping another person, that's really the distinct CTCP PING
[03:38:03] <gilberth> Ok. Then I need something else to ping the server.
[03:38:16] <aeth> when I need to ping the server, I ping myself
[03:38:46] <gilberth> How?
[03:38:51] <aeth> apologies in advance for the flood:
[03:38:53] <aeth> 19:08:35 [libera] [ctcp(aeth)] PING 1624835315 184473
[03:38:53] <aeth> 19:08:35 [libera] aeth [~aeth@user/aeth] requested CTCP PING from aeth: 1624835315 184473
[03:38:56] <aeth> 19:08:38 [libera] CTCP PING reply from aeth: 2.948 seconds
[03:39:01] <aeth> In my client, it's just /ping aeth
[03:39:18] <aeth> if it's not provided then you have to /ctcp aeth ping message1 message2
[03:39:24] <gilberth> ah ok, it's a CTCP message. I see.
[03:39:25] <aeth> idk what the second message is. the first appears to be the Unix timestamp
[03:40:05] <gilberth> I have neither /ping nor /ctcp :)
[03:40:20] <aeth> a CTCP PING is supposed to reply with whatever the client sent, and then the client translates that into seconds, e.g. pinging my bot:
[03:40:23] <aeth> 19:09:47 [libera] [ctcp(cond)] PING 1624835387 527311
[03:40:25] <aeth> 19:09:47 [libera] CTCP PING reply from cond: 0.325 seconds
[03:40:42] <aeth> my bot didn't say "0.325 seconds", it said PING 1624835387 527311
[03:41:07] <aeth> It's easy to reply to someone else's ping. It's harder to actually implement sending CTCP ping
[03:41:22] <aeth> I've done the former (implement CTCP PING reply) but haven't done the latter (implementing sending pings)
[03:41:36] <gilberth> What is so special about that?
[03:42:01] <aeth> you need to come up with the two things to send to the client, which must respond verbatim to give a valid response, and you must then turn that into the duration when displaying
[03:42:13] <aeth> so that's a lot more involved than just replying verbatim
[03:42:37] <aeth> my reply, from the perspective of cond, was just: NOTICE aeth :^APING 1624835387 527311^A
[03:43:08] <aeth> ^A on either side of the message turns a NOTICE into an NCTCP (for replying to CTCPs) or a PRIVMSG into a CTCP (for sending CTCPs)
[03:43:18] <aeth> #x01 iirc
[03:43:33] <aeth> (code-char #x01) if you implement it yourself
[03:43:37] <gilberth> Yes.
[03:44:18] <gilberth> #\SOH :-)
[03:44:35] <aeth> idk if that's portable, it probably isn't, you only get portability guarantees for a few
[03:44:47] <aeth> works in SBCL and probably CCL since I think that's what you use
[03:45:12] <aeth> however, (code-char #x01) is a pure function on a constant, so it's likely to just be optimized into #\SOH
[03:45:30] <aeth> #.(code-char #x01) if you don't want to have to rely on optimizations
[03:45:36] <gilberth> Heh, #.(code-char 1) :)
[03:45:48] <aeth> I'm sorry, but characters only exist in hex form :-p
[03:45:48] <gilberth> You were faster.
[03:45:59] <aeth> in particular, even hexes :-p
[03:46:05] <gilberth> Octal, aeth, octal.
[03:46:14] <aeth> okay, fair enough, octal counts too
[03:46:29] <aeth> s/even hexes/even-length hexes/
[03:46:41] <gilberth> No Unicode?
[03:48:15] <aeth> At the moment, I just sb-ext:string-to-octets and sb-ext:octets-to-string where I need to (I could just read IRC as a char stream and make that implicit, but technically IRC doesn't guarantee Unicode). I could make that portable with babel (and I have in other places where I've done that)...
[03:48:19] <gilberth> Anyhow, CL-IRC already has an IRC:CTCP-PING-MESSAGE class.
[03:48:23] <aeth> however, I'll probably just manually encode/decode utf-8
[03:48:42] <aeth> (since IRC requires a fallback if it's not valid utf-8, while you normally don't need to worry about that)
[03:49:23] <aeth> Little details like this are why I'm writing my own library to be ultra-spec-conforming, rather than merely something that works
[03:49:50] <gilberth> NIH?
[03:50:29] <aeth> the problem is that for things like IRC, or JSON, etc., it's very simple so there are lots of libraries that do it, but there's infinite complexity in the finer details, so none of them do it properly
[03:50:49] <aeth> plus, now you have to learn two things: the protocol and the library that abstracts over it
[03:51:34] <gilberth> Indeed, CL has bad libraries, too. And at times I feel like I am the only one, who could read a spec.
[03:51:48] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:59fd:6cc7:d82f:e6b3) (Remote host closed the connection)
[03:54:33] <gilberth> And often I just don't like the API. Although I find CL-IRC being pretty relyable, I still don't like its API.
[03:54:50] <White_Flame> aeth: oh the woes I've had trying to get CL websocket libraries working
[03:55:36] <gilberth> Oh yes, websockets is on the list of things, I want.
[03:56:08] <White_Flame> I think we're still using a modified hunchensocket to get the subset of functionality we're using working
[03:56:13] <White_Flame> instead of an actual real solution
[03:57:18] <aeth> re sockets, well, I'm sure I won't be happy with usocket when I look into the details, so I'm refusing to look into the details for now while I get my IRC library working (-:
[03:58:11] <gilberth> Oh, yes. Why do all socket API seem to be overly complicated?
[04:00:16] <gilberth> Why not just TCP-CONNECT host port &key element-type external-format ?
[04:00:33] <aeth> because you need UDP too
[04:00:56] <gilberth> Then have UDP-CONNECT, too. But that isn't really a stream.
[04:01:05] <aeth> arguably everything is moving to the rebuilding-TCP-on-top-of-UDP direction since you can only assume TCP or UDP are available on any arbitrary connection due to how network software/hardware works
[04:01:14] <aeth> e.g. HTTP
[04:01:37] <aeth> I'll have to deal with UDP eventually for my game engine, but right now, I can just stick with the simple TCP for IRC
[04:02:30] <gilberth> Yeah, that is my point. You could get arbitrary generic with a network API, while in 99% of the cases, you want just a damn TCP connection.
[04:05:32] <gilberth> But then CL streams are broken in another regard, as you can't unread more than a single _character_.
[04:07:56] <aeth> you want the features of TCP, but you don't want TCP's feature set precisely, which means that any large enough project winds up eventually rebuilding TCP on top of UDP
[04:07:58] <gilberth> Say you want to build some chain: TCP-CONNECTION, HTTP chunked encoding, charset decoding, MIME encoding, LZW decoding and what not. Cannot be done in an efficient buffered way without copying, when the last entity entity determines when some object encoding is done.
[04:08:34] <aeth> gilberth: well, the way to deal with network streams imo is to always make them byte streams
[04:08:44] <aeth> and use something like babel, built-in decoding/encoding, or manual decoding/encoding
[04:08:53] <aeth> Probably adds a performance overhead, but it's the correct way to do it
[04:09:03] <gilberth> Read again.
[04:09:03] <aeth> And the performance overhead probably isn't noticeable vs network lag
[04:09:34] <aeth> gilberth: right, if the last entity determines what the object encoding is, then you read into an octet array, get to the last entity, and then that tells you what the octet array is
[04:09:38] <gilberth> Well network could be pretty fast, or take a fast SSD.
[04:09:44] <aeth> you cannot use a char stream for network traffic
[04:10:49] <gilberth> When the encoding is established, I can. It would be another encoding/decoding stream using the underlying octet stream, be it a network stream, or some other.
[04:12:26] <gilberth> In closure is an efficient implementation to deal with character encodings from octet streams, while allowing to switch it and/or rewind and start over.
[04:13:24] <gilberth> Or: I don't want an HTML parser, say work on octet streams. The character encoding should happen in a reusable way outside.
[04:14:12] <aeth> gilberth: well, for that sort of thing I have this: https://gitlab.com/zombie-raptor/zr-utils/-/blob/master/stream.lisp
[04:14:13] -ixelp- stream.lisp · master · zombie-raptor / zr-utils · GitLab
[04:14:36] <aeth> just a gray-stream that does both input and output (since that doesn't appear to be built-in anywhere, at least when I checked)
[04:14:49] <aeth> So you can just build up new streams in a portable way
[04:15:07] <aeth> I might do my channel-specific logfiles that way, idk.
[04:15:20] <aeth> It could get quite large in memory if you're in hundreds of channels, each with a buffer waiting to be written to files
[04:15:36] <aeth> I'm not 100% sure how to write to files
[04:16:07] <gilberth> At which point does UNREAD-CHAR also unread the octets read?
[04:16:10] <aeth> alexandria:with-output-to-file is absolutely *NOT* the way to go because if you use that as your output/log stream, then it won't even write it at all until the process is finished. It just builds it up in memory, apparently.
[04:16:51] <hayley> Allow me to tell you about OS caches...
[04:17:23] <gilberth> OSes do cache? uff.
[04:18:30] <hayley> Yeah, always when you don't want them to.
[04:18:39] <gilberth> Heh.
[04:23:11] <hayley> https://www.youtube.com/watch?v=DaOqK7p8rsU
[04:23:12] -ixelp- Cold Warning - YouTube
[04:26:17] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[04:27:39] <aeth> I like what I was doing with the logging, my bot's SLIME is quite readable now.
[04:27:55] <aeth> I think I'll keep this even when I log to individual files based on the channel
[04:28:12] <aeth> e.g. slime will say 19:57:55 <aeth:#lispcafe> I think I'll keep this even when I log to individual files based on the channel
[04:28:25] <aeth> while the log file will say 19:57:55 <aeth> I think I'll keep this even when I log to individual files based on the channel
[04:29:38] <hayley> Time to compile my stupid DFAs now.
[04:29:41] <aeth> maybe just with-open-file set to append would work, does anyone know if it writes right away?
[04:30:20] <White_Flame> you mean with finish-output?  I don't see why it wouldn't
[04:32:57] <aeth> looks like this waits until the end: (with-open-file (stream #P"test42.txt" :direction :output :if-exists :append :if-does-not-exist :create) (write-line "Hi" stream) (sleep 2) (write-line "Hello" stream) (sleep 3) (write-line "Hi" stream))
[04:33:02] <aeth> (no finish output)
[04:34:15] <White_Flame> why would you expect such short writes to get written without a flush?
[04:34:18] <aeth> while this does not: (with-open-file (stream #P"test42.txt" :direction :output :if-exists :append :if-does-not-exist :create) (write-line "Hi" stream) (finish-output stream) (sleep 2) (write-line "Hello" stream) (finish-output stream) (sleep 3) (write-line "Hi" stream) (finish-output stream))
[04:34:34] <gilberth> You rarely need FINISH-OUTPUT, use FORCE-OUTPUT instead.
[04:34:42] <aeth> White_Flame: the key is write-line, not write-string, since it's possible that \n would do it
[04:34:46] <White_Flame> and sleeps don't affect auto-flushing at all, rather buffer size
[04:35:05] <White_Flame> gilberth: yeah, true.  I wasn't checking the docs
[04:35:58] <White_Flame> async vs sync
[04:35:59] <aeth> OK this works how I would expect IRC log files to work (of course, force-output would only need to be done, in a loop, when a batch is done): (with-open-file (stream #P"test42.txt" :direction :output :if-exists :append :if-does-not-exist :create) (write-line "Hi" stream) (force-output stream) (sleep 5) (write-line "Hello" stream) (force-output stream) (sleep 5) (write-line "Hi" stream) (force-output 
[04:36:01] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:36:01] * gilberth once made McCLIM way faster by eliding round trips of DISPLAY-FORCE-OUTPUT calls, where DISPLAY-FINISH-OUTPUT would have been suffice.
[04:36:05] <aeth> stream))
[04:36:17] <hayley> fsync() (er, finish-output) or go home
[04:36:45] <aeth> FORCE-OUTPUT would definitely be the way to go for log files, since it would have multiple streams open
[04:36:48] <gilberth> hayley: Does it really need to hit the disk?
[04:36:55] <aeth> now the real question is how many files this would be able to handle
[04:38:25] <aeth> i.e. can I be naive or can I manage them in a fancy way
[04:38:39] *** Joins: notzmv (~zmv@user/notzmv)
[04:44:57] <hayley> FORCE-OUTPUT drops buffers.
[04:45:24] <gilberth> It drops what?
[04:45:27] <aeth> hayley: idk what that means, does that mean that it's not reliable for logging?
[04:45:53] <aeth> IRC logs can just be append-only, at least until message deletes/edits are through IRCv3
[04:46:06] <aeth> (not like most client logs will respect those)
[04:46:21] <gilberth> It is as reliable as any other regular file write.
[04:48:15] <gilberth> When you're paranoid use an USP and make the machine shutdown, if called for.
[04:49:31] <aeth> yeah I need a UPS
[04:49:45] <aeth> probably wouldn't even need a way to shut down, it can probably power for hours
[04:50:33] <aeth> I temporarily configured this pi hooked into a battery power bank (used to extend the capacity of cell phones by recharging them, portably)
[04:50:47] <aeth> I mean, it's a pi 3, it's basically a batteryless smartphone
[04:52:20] <gilberth> Power almost never fails here, anyway. I have seen exactly three power fails ever.
[04:52:32] <aeth> I had a brown out a week or two ago
[04:53:04] <aeth> Just enough to turn off my computers (including the pi, which doesn't always happen), but not enough to make the digital clocks lose the time and flash 12:00
[04:53:34] <gilberth> A brown out? Never had that.
[04:53:40] <aeth> when that happens, the last line of the logfile becomes NULs, which makes grep break on them unless you do grep --text because it says "Binary file matches" or whatever after the point of the NULs
[04:54:05] <aeth> gilberth: I mean, I'm technically in the South of the US. Barely. Right on the border, really, but at the coast so it does still get hot/humid.
[04:54:08] <gilberth> Who puts the NULs in there?
[04:54:22] <aeth> idk, I guess that's how the Linux filesystem works? Somehow?
[04:54:36] <aeth> If it's in the process of writing to a logfile it first NULs them before writing them to append to it? Or something
[04:54:39] <aeth> I'm not sure
[04:54:42] <aeth> I just know it happens
[04:54:55] <gilberth> No.
[04:55:18] <aeth> I only notice because (1) it breaks grep, (2) it shows up as ^@s in emacs, and (3) if I happen to have sent a message right before the power goes out, that one in particular might not have logged
[04:55:33] <aeth> maybe it's the storage media rather than the filesystem/etc.
[04:55:34] <gilberth> Though meta data somehow as a priority, so this could only be explained with the meta data flushed, but not the payload.
[04:56:04] <hayley> gilberth: In the context of a logger, I think so.
[04:56:11] <aeth> I just know that it gets a line or two of ^@s in emacs right when the power cuts
[04:56:20] <aeth> but not in all of the files, only in the ones that it was presumably writing to
[04:56:25] <gilberth> hayley: Then power must be cut during sync.
[04:57:20] <gilberth> Reminds me of ^Z in CP/M. Files would only have a size in blocks. Would there be fewer characters, it would be padded out by ^Z.
[04:58:05] <hayley> Suppose I should get the compiler to work before optimizing DFA construction.
[04:58:41] <gilberth> Which compiler?
[04:59:24] * hayley checks if her university gives away Windows keys.
[04:59:55] * gilberth reminds hayley that Windows is cheap anyway.
[05:00:39] <hayley> Dammit, all the "applications" just connect to a VM?
[05:03:05] * hayley finds the Windows 10 key
[05:03:05] <hayley> "This product may not be compatible with your current operating system" Well yeah.
[05:04:43] * aeth gives hayley a Mezzano key
[05:12:47] <hayley> https://www.youtube.com/watch?v=1G-YVPtA3GQ
[05:12:48] -ixelp- Gary Numan Complex - YouTube
[05:16:57] <hayley> "finish-output attempts to ensure that any buffered output sent to output-stream has reached its destination, and then returns. force-output initiates the emptying of any internal buffers but does not wait for completion or acknowledgment to return."
[05:17:09] <hayley> The latter seems less reliable. idk
[05:24:09] <hayley> 0/10 no transaction log
[05:24:19] <gilberth> hayley: Log messages with a round trip, if you like. Don't cry when you can't keep up with the speed of things to log. And write disk block multiple times. And: As reliable as froce-output in case of a sudden power cut. Nothing gained.
[05:25:28] <gilberth> It's not like aeth must first log and only then ack that to the remote server or some such.
[05:25:51] <hayley> Can't get a key cheaper than free still. Unless MS pays you to use it -- perhaps they do with free cloud services. But those are Linux right?
[05:26:39] <hayley> Despite the $300 of free credit Google and MS give out, you can only spend it on the itty bitty machines and not the >100 core machines I was interested in.
[05:27:45] <hayley> https://www.youtube.com/watch?v=1G-YVPtA3GQ Gary Numan discusses how to make you suffer in the car
[05:27:46] -ixelp- Gary Numan Complex - YouTube
[05:29:54] <hayley> I thought I linked https://www.youtube.com/watch?v=Or0cXIBBf9s
[05:29:54] -ixelp- Gary Numan I Die You Die - YouTube
[05:31:44] <gilberth> Huh? A CTCP needs to be responded to with another PING? How to break the infinite loop, when I PING myself?
[05:33:19] <aeth> CTCP PING (a PRIVMSG wrapped in ^APING ...^A) is responded to via a NCTCP PING (a NOTICE wrapped in ^APING ...^A) with an identical, ideally unique, message. This message is, at least in my client, based on a unix timestamp.
[05:33:34] <aeth> That's how you can ping yourself, multiple times even, without breaking
[05:33:35] <gilberth> Ah, I get a NOTICE back, which CL-IRC does not parse.
[05:33:43] <aeth> hahah
[05:33:51] <aeth> that's what I mean about CL libraries and why I NIH everything
[05:34:13] <aeth> On day one I supported more features than CL-IRC since I prioritized the most visible things (PING, then PRIVMSG, then NOTICE)
[05:34:13] <gilberth> Yes.
[05:35:35] <aeth> e.g. I just pinged myself quickly twice in a row and got "1624842303 105904" and "1624842303 543877"
[05:35:38] <gilberth> What I don't like about CL-IRC is that no message objects are crafted for your own messages. And thus they don't hit the message handler.
[05:36:30] <aeth> I'm guessing the first component is the seconds timestamp and the second is the... 1/1000000 of a second? So microsecond?
[05:36:37] <aeth> Does CL even have microsecond precision?
[05:37:03] <hayley> Depends on internal-time-units-per-second
[05:37:20] <gilberth> See: internal-time-units-per-second, which is 1e6 here.
[05:37:28] <hayley> Modern SBCL likes to lie to you and say you do, but get-internal-real-time uses Linux's approximate-but-fast counter and thus gets like 3.3ms precision from experience.
[05:37:36] <aeth> How would I clone that in CL? (get-universal-time) obviously does the first part. Well, I did (get-universal-time) and got 3833831204 but then I did (- (get-universal-time) +unix-time-offset+) => 1624842436
[05:38:10] <aeth> hayley: doesn't matter as long as two `/ping aeth` messages don't contain the exact same contents
[05:38:14] <hayley> For my uses, it means computing a standard deviation of times I measure is completely pointless. And sadly storing (expt time 2) in a counter would overflow a 64-bit word too soon for my liking, so I can't use it in my atomic metering library.
[05:38:16] <gilberth> GET-INTERNAL-REAL-TIME not suffice?
[05:38:25] <hayley> aeth: Just use (random (expt 2 256))?
[05:38:33] <aeth> ah, but that will fail, randomly
[05:38:44] <hayley> Wanna bet?
[05:39:15] <hayley> Or you could just keep your own PING counter somewhere.
[05:39:19] <aeth> Number too large to print in English: 115,792,089,237,316,195,423,570,985,008,687,907,853,269,984,665,640,564,039,457,584,007,913,129,639,936
[05:39:22] <aeth> :-(
[05:41:40] <aeth> but, yeah, (get-universal-time) (get-internal-real-time) is probably the way to do the unique PING
[05:41:57] <aeth> or (- (get-universal-time) +unix-time-offset+) (get-internal-real-time) if you want normies to be able to handle the first part.
[05:42:31] <gilberth> I'd just send some unique cookie.
[05:42:38] <aeth> but that should be unique
[05:42:55] *** Quits: lucf117 (~lucf117@user/lucf117) (Remote host closed the connection)
[05:42:58] <gilberth> Up to your time resolution.
[05:43:42] <gilberth> So, to be safe you need to wait until it flips to the next clock reading.
[05:45:18] <hayley> (symbol-name (gensym))
[05:47:02] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[05:47:12] <gilberth> I offer: (setf *gensym-counter* 0)
[05:47:45] <gilberth> Try (gentemp), but that isn't unique either.
[05:48:49] <gilberth> Oh, CL-IRC does parse the CTCP PING NOTICE.
[05:49:16] <pjb> aeth: https://termbin.com/7e4y
[05:49:28] <aeth> pjb: ty
[05:50:13] <aeth> gilberth: well, adding an internal-time-units-per-second is probably the way to go
[05:50:30] <aeth> on my desktop SBCL, 1000000
[05:50:42] <aeth> on my server, 1000 because I didn't recompile a recent SBCL version on it
[05:51:17] <pjb> aeth: oops remove nreverse.
[05:51:27] <aeth> Also, I seem to have 8809464972 for my (get-internal-real-time) on my desktop and 68579272 on my server
[05:51:38] <aeth> (obviously not done at the exact same instant)
[05:52:16] <pjb> aeth: corrected: https://termbin.com/537e
[05:52:33] <aeth> >duodecillion
[05:52:40] <gilberth> Still, CL-IRC _is_ buggy here. *sigh*
[05:53:25] <gilberth> I don't know what the fuss is: Either bump a counter, or sign a wall time and read that, if you're really paranoid.
[05:53:59] <aeth> zr-irc is almost full featured at this point
[05:54:03] <aeth> not quite usable for bots yet
[05:54:11] <aeth> and besides
[05:54:12] <aeth> cond: do you like gilberth?
[05:54:12] <cond> aeth: You're the best!
[05:54:17] <aeth> uh oh
[05:54:27] <aeth> I don't like the way cond dodged that question
[05:54:49] <pjb> aeth: if you insist on short scale: https://termbin.com/hlrz
[05:55:26] <pjb> aeth: I mean: https://termbin.com/gtws
[05:55:27] <gilberth> CL-IRC parses the message, but not the arguments. So I get ^APING ...^A inside ^As. Brain damage!
[05:56:52] <gilberth> aeth: Yes, I should have written my own library.
[05:57:23] <aeth> it is very easy to misparse IRC because certain messages have formats that they almost always take but that they're not required to take
[05:57:38] <aeth> e.g. PRIVMSG #lispcafe :hello
[05:57:43] <aeth> but it could also be PRIVMSG #lispcafe hello
[05:57:48] <aeth> since you only need the : if you have a space in the message
[05:58:01] <aeth> however, you also need to accept PRIVMSG #lispcafe hello world this is an invalid message
[05:58:10] <gilberth> So the raw message CL-IRC responds with to a ping is: NOTICE gilberth :^APING ^APING 961604687785^A^A
[05:58:11] <aeth> even though it's actually invalid since if the last parameter has a space in it, it should begin with " :"
[05:59:37] <gilberth> cond: Should I continue using CL-IRC?
[05:59:37] <cond> gilberth: Disagreed.
[05:59:57] <gilberth> At last a useful response. :)
[06:00:07] <aeth> and CTCP/NCTCP just being built off of ^A isn't very good, either
[06:00:13] <aeth> should've just been ^A but it's ^A...^A
[06:00:41] <gilberth> Yes, but I expect a library to handle that for me.
[06:00:44] <aeth> You must send ^A...^A, but you must accept ^A...\r\n and even ^A...\n as valid CTCP since there's no guarantee that it's going to be well-formed!
[06:00:59] <aeth> so the library should be full of edge case test cases and I just don't see that in cl-irc
[06:01:30] <aeth> not a lot of tests at all. https://gitlab.common-lisp.net/charmon/cl-irc/-/blob/master/test/test-parse-message.lisp
[06:01:30] -ixelp- test/test-parse-message.lisp · master · Cyrus Harmon / cl-irc · GitLab
[06:01:53] <gilberth> Next thing I don't like is the names of the accessors skipping the prefix.
[06:01:58] <aeth> I already test parsing more messages and I've barely started... https://gitlab.com/zombie-raptor/zr-irc/-/blob/master/tests/all.lisp
[06:01:58] -ixelp- tests/all.lisp · master · zombie-raptor / ZR IRC · GitLab
[06:02:30] <aeth> Notice how cl-irc apparently assumes valid messages and tests on those
[06:02:43] <aeth> while almost all of my test cases are on variants.
[06:03:00] <aeth> Including invalid but probable-to-see messages.
[06:04:38] <gilberth> The BNF I just read about CTCP even mentions that the trailing ^A is optional.
[06:04:58] <aeth> it's an internet standard
[06:05:09] <aeth> so the trailing ^A is mandatory to send, but optional to receive :-)
[06:05:40] <aeth> the joys of having multiple clients/servers implement one standard
[06:06:06] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[06:06:21] <aeth> (the ircd servers might drop the trailing ^A depending on how they truncate messages that are too long, since IRC just accepts too-long messages and then truncates them)
[06:06:23] *** Joins: derelict (~derelict@user/derelict)
[06:07:26] <aeth> your client might send an invalid message and have the ircd make it valid (in this case, by adding the missing ^A) or make a valid CTCP invalid (by truncating the message improperly) and proper IRC library software shouldn't make any assumptions (especially since it can be used for clients, bots, bouncers, or ircd)
[06:09:15] <aeth> I suppose CTCP commands themselves are the same.
[06:10:02] <aeth> they must be uppercase and your client should ensure this (by e.g. turning /ctcp aeth version into a "VERSION" even though you typed "version"), but you cannot assume that you will receive "VERSION" instead of "version" or "VeRsIoN" (although you probably can in this case, since replying to that is non-critical)
[06:10:07] <aeth> or e.g. PRIVMSG vs privmsg
[06:13:49] <aeth> telneting into an unrealircd, I was able to send a "privmsg" (lower case) without a : and probably with just a \n instead of an \r\n and the ircd accepted it (but hopefully turned it into a proper message before forwarding it onto clients)
[06:14:24] <gilberth> Sure, sure. You don't need to tell me how to implement protocols in a sensible way.
[06:16:43] <aeth> fortunately, the way IRC's structured, the optional " :" (note that it's " :" since parameters can have a ":" in them!) for the last parameter so it can include spaces is very easy to work around even if it's absent
[06:16:59] <aeth> You're not going to have arbitrary things inserted in the middle of a PRIVMSG before the expected (but missing) " :"
[06:30:01] <gilberth> Hmm. ^AACTION foo␣␣bar^A is malformed. Two spaces in a row.
[06:49:32] <hayley> https://www.youtube.com/watch?v=0cK2J-YwTRE
[06:49:33] -ixelp- We Are Glass - YouTube
[07:08:55] <gilberth> aeth: I get 265,597µs to cond.
[07:15:40] <aeth> interesting that PING 966020240645 worked
[07:15:51] <aeth> well, I guess it's because of how I implemented it
[07:16:24] <aeth> hmm, actually, it's not necessarily two
[07:16:37] <aeth> it just has to match whatever is sent, according to https://modern.ircdocs.horse/ctcp.html#ping
[07:16:38] -ixelp- Client-to-Client Protocol (CTCP)
[07:16:58] <aeth> gilberth: I guess you used get-internal-real-time?
[07:16:59] <gilberth> aeth: Yes, I can read specs. :)
[07:17:12] <gilberth> aeth: Yes, I did.
[07:17:25] <aeth> gilberth: in particular, the spec of specs is here. https://ircv3.net/irc/
[07:17:26] -ixelp- IRCv3 Specifications - IRCv3
[07:17:41] <aeth> That links to the main RFCs, as well as the horse docs, and (of course) the IRCv3 extensions
[07:17:46] <aeth> Not all RFCs are linked to there
[07:18:12] <aeth> the roadmap is also a thing. https://github.com/ircv3/ircv3-specifications/milestone/4
[07:18:12] -ixelp- Roadmap Milestone · GitHub
[07:18:16] <aeth> as well as https://github.com/ircv3/ircv3-ideas/issues
[07:18:17] -ixelp- Issues · ircv3/ircv3-ideas · GitHub
[07:19:26] <gilberth> I guess, it often is two, because of gettimeofday(2).
[07:20:33] <aeth> yeah, you might want something independent of the runtime like that
[07:20:34] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[07:21:08] <aeth> mainly because you might crash and then rejoin before the PING is received or other such edge cases
[07:21:19] <aeth> so you could wind up with a negative ping
[07:21:29] <aeth> (I mean, they would wind up with it, from your perspective)
[07:21:52] <aeth> unfortunately, get-universal-time only involves seconds
[07:22:36] <gilberth> Heh, I could send what ever I want.
[07:23:46] <aeth> yes, but if you don't send a timestamp then it is not stateless
[07:23:57] <aeth> although I guess it still has to be stateful or else someone could spoof it
[07:24:06] <aeth> by NCTCPing a fake timestamp to you
[07:24:43] <gilberth> It's a timestamp. And for not spoofing^Wforging it, I would sign it.
[07:24:56] <aeth> yes, that could be argument #2
[07:26:17] <gilberth> As with HTTP cookies for session management: Always sign them. Or remember unique hard to guess tokens, but by only signing a session id, you don't need to create a session object unless the cookie really comes back.
[07:26:39] <aeth> IRC needs cookies, suggest that in #ircv3 :-)
[07:26:47] <aeth> but what it especially needs is EU cookie banners :-)
[07:27:53] <gilberth> Hell no! "To continue say: /msg CookieServ I AGREE!!!"
[07:28:56] <aeth> Say "/msg CookieServ accept all" or "/msg CookieServ accept *" to continue. Alternatively, to reject cookies, do "/msg CookieServ reject list" and manually reject each one one by one. "all" or "*" is not allowed for cookie rejection.
[07:29:32] <aeth> All cookies must have an accept or reject towards them in order to continue
[07:43:05] <gilberth> Yes, indeed. No fun otherwise.
[07:43:50] <gilberth> Unfortunately there is no NSAServ to ask to stop recording my traffic.
[07:51:03] <hayley> My current compiler generates something barely passable as "correct" so far.
[07:55:36] <gilberth> But to full obey to law Libera would need to (1) install filters to detect copyright infringement (2) install filters to detect and censor hate speech and (2) provide an interface for authorities for them being a man-in-the-middle.
[07:56:04] <aeth> Authorities will MITM with or without cooperation
[07:56:21] <aeth> Iirc, the NSA MITMed Google's internal connections, which were unencrypted until the news broke.
[07:57:16] <gilberth> With cooperation of the Libera staff, they must cooperate by recent law.
[07:59:12] <gilberth> Other dreams further is (1) Libera must verify my real identity (2) Libera must verify that I am >18yo or filter content not fit for children. (3) I may not use a pseudonym.
[08:00:15] <gilberth> Perhaps I have forgotten something.
[08:01:23] <gilberth> This MITM law was just recently passed, while football dominated media. So no news about that in mainstream media at all.
[08:02:43] <gilberth> Beautiful new world.
[08:02:52] <hayley> gilberth: Some success with your damn machine: https://pastebin.com/L8GVTre3
[08:02:52] -ixelp- ONE-MORE-RE-NIGHTMARE> (compile-regular-expression "(ab«c»)|(a«b»d)" :vector-typ - Pastebin.com
[08:03:52] <gilberth> «» is your group capture?
[08:04:09] <hayley> FWIW seems I don't have to change my compiler there. But for any repetition where I actually save state, I need to roll back to the end of the actual match.
[08:04:10] <hayley> Yes.
[08:04:11] <gilberth> hayley: _My_ machine? It's your code.
[08:04:20] <hayley> gilberth: Your damn paper.
[08:04:48] <gilberth> Sorry about that. And: It's a draft, hayley.
[08:06:12] <hayley> But I'll probably redo the compiler because I failed to make it look nice before IMO.
[08:09:27] <gilberth> Mine grew ugly over time.
[08:09:45] <hayley> Yes, it is incorrect when I do (ab)*. Oh well.
[08:10:08] <gilberth> Iteration again?
[08:14:21] <hayley> Not sure what the cause is.
[08:15:09] <cond> Wow, I just did a disassemble on the same function on aarch64 vs on x86-64 and it's so weird how different the results are. I expected different, but not this different.
[08:16:25] <aeth> I did x86 (not x86-64) and MIPS in two separate comp sci classes so I do have a little bit of exposure to both kinds of asm. I never really cared to do a side-by-side before, though.
[08:17:05] <gilberth> Well, two-address versus three-address.
[08:17:35] <gilberth> hayley: False values in registers, where there should be none?
[08:17:55] <aeth> In particular, everything in the second column of SBCL's disassemble is the same length in ARM. e.g. 8E0A40F9, vs variable length x86-64 like 498B4510 or 48C745C817011050 or 7402
[08:17:59] <hayley> gilberth: Looking at the DFA, when I fail I assign the wrong end position.
[08:18:19] <aeth> Plus, all of the LDR and STR vs MOV
[08:18:44] <gilberth> aeth: That's just a different name.
[08:19:27] <aeth> it does make the disassembly take about twice as many bytes, although that could also be the compiler (including that the ARM one is using an older SBCL, although both are old at this point)
[08:19:32] <gilberth> hayley: Oh! That sounds nasty. Is your unification correct?
[08:19:38] <hayley> Yes.
[08:20:26] <hayley> Come to think of it, I have a special case in NEW-TAGS s.t going from something to the empty set results in no tags. But not for alpha[empty-set, ...]
[08:21:26] <gilberth> You misspeeled iota.
[08:22:33] <hayley> Okay, now the DFA looks right. But the compiler still has to back up to the right spot when having a second attempt.
[08:23:04] <gilberth> Hmm.
[08:24:10] <hayley> No, that is a dumb hack. If I extend to abc* we lose again. Think I need to replicate if we have history laying around.
[08:25:28] *** Joins: lucf117 (~lucf117@user/lucf117)
[08:25:30] <hayley> OTOH why does this piece of crap make assignments like END <- P when it hasn't "disappeared" as we've been describing it?
[08:28:38] * hayley removes the special cases because they are probably wrong.
[08:36:54] * hayley uploaded an image: (89KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/dcBtAcJxJxdaWoPHPjzzRSIh/abc*.png >
[08:37:23] <hayley> Nearly there. I just need to figure why we have bogus assignments to END coming from failing to find B or C.
[08:53:05] <hayley> https://www.youtube.com/watch?v=YYM3a1r7JgU
[08:53:05] -ixelp- Peter Stanchion and the Radiophonic One - YouTube
[10:05:38] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[10:07:46] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 250 seconds)
[10:13:08] *** Quits: lucf117 (~lucf117@user/lucf117) (Remote host closed the connection)
[10:14:26] *** Joins: canopus (~user@116.68.96.91)
[10:18:33] *** Joins: derelict (~derelict@user/derelict)
[10:35:09] *** Quits: lad (~lad@user/lad) (Remote host closed the connection)
[10:35:18] <hayley> gilberth: AFAICT it is also a matter of if the tag that disappears is on the front of the RE?
[10:35:33] *** Joins: lad (~lad@user/lad)
[10:38:58] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 250 seconds)
[10:43:40] *** Joins: shka (~herr@109.231.62.239)
[11:00:35] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:03:40] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[11:11:01] <hayley> But I haven't a clue of how to determine that, as I don't know how "precise" this has to be. It is trivial to tell that END is never assigned by the intermediate states, but perhaps not for other REs. 
[11:22:03] <hayley> At least I think we want to know precisely if it is possible that you could supply nothing and the tag would be applied. e.g in [A](abc)*[B] obviously B could be applied as (abc)* could match the empty string. But what about some more complex RE? We have all of Boolean logic to confuse ourselves with.
[11:22:33] <hayley> At least I think we want to know precisely if it is possible that you could supply nothing and the tag would be applied. e.g in [A](abc)*[B] obviously B could be applied as (abc)* could match the empty string. But what about some more complex RE? We have all of Boolean logic to confuse ourselves with.
[11:26:09] *** Joins: brainfunnel (~quassel@187.142.208.46.dyn.plus.net)
[11:26:58] <hayley> gilberth: New idea: the LHS of an assignment has to appear on the RHS of an assignment in the derivative to be applied. This also handles the use check I already did to eliminate some pointless writes. 
[11:28:34] <hayley> But I already do that, and it is still live because it appears in history.
[11:30:52] *** Joins: derelict (~derelict@user/derelict)
[11:43:39] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 272 seconds)
[11:44:54] <gilberth> hayley: I am tired and wait for the pain killers to kick in. I never really used this \alpha expression, so I would need to re-read what I have written and/or look for my implementation of it. You could give me your precise definition of \delta_x(\alpha(..)) and \nu(\alpha(..)) and I'll look into it.
[11:45:54] <gilberth> I assumme you do kill registers, when entering an iteration and have the POSIX fixup for the iteration not taken.
[12:08:07] <hayley> "Yes" and "I'd have to check but probably not".
[12:12:35] * hayley uploaded an image: (197KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/UjNIZuGZgaqiYtnZMjbrmGsh/Screenshot%20from%202021-06-28%2017-42-15.png >
[12:14:27] *** Joins: treflip (~user@95.79.32.99)
[12:23:50] *** Quits: lad (~lad@user/lad) (Ping timeout: 268 seconds)
[12:28:03] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[12:29:43] * hayley considers replicating history across derivatives so that it won't be clobbered now.
[12:43:36] * gilberth believes that hayley spotted a red herring.
[12:46:47] <gilberth> The POSIX part is only a semantic issue.
[12:47:59] <gilberth> It's this POSIX idea that an empty match by an iteration is longer than no match.
[13:08:49] * shka pushed faulty commits to github, twice
[13:09:11] <shka> and those commits triggered warning from the quicklisp
[13:12:34] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:edf7:146a:8396:f657)
[13:24:12] *** Parts: coat (~coat@user/coat) ()
[13:24:27] *** Joins: coat (~coat@user/coat)
[13:38:42] <hayley> Nearly works, except that now END is never assigned but is magically carried around anyway.
[13:38:46] <hayley> See, this guy did it again. He made a dumb joke, so I said "at least I don't have to look up how to write a sum formula", and so he sarcastically said "aww, you're so sweet". What the fuck did you expect?
[13:41:29] *** Joins: selwyn (~selwyn@user/selwyn)
[13:45:07] <shka> hayley: you know that you could simply ignore the fella, right?
[13:52:39] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 268 seconds)
[13:52:41] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:54:49] *** Joins: selwyn (~selwyn@user/selwyn)
[14:28:39] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:28:58] *** Joins: notzmv (~zmv@user/notzmv)
[14:30:25] *** Joins: selwyn (~selwyn@user/selwyn)
[14:39:11] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:40:24] *** Joins: selwyn (~selwyn@user/selwyn)
[14:54:47] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[14:55:14] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[15:05:41] *** Quits: X-Scale (~ARM@175.38.114.89.rev.vodafone.pt) (Ping timeout: 268 seconds)
[15:13:35] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[15:14:18] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[15:15:22] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[15:17:00] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[15:41:07] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[15:47:27] *** Joins: random-nick (~random-ni@87.116.183.60)
[16:09:19] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:19:05] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[16:21:44] *** Joins: selwyn (~selwyn@user/selwyn)
[16:39:26] *** Joins: selwyn_ (~selwyn@user/selwyn)
[16:42:14] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 268 seconds)
[17:58:24] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:11:59] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[18:19:45] *** Joins: derelict (~derelict@user/derelict)
[18:23:24] * hayley uploaded an image: (122KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/YGJlvDtfhpoqzZMHMetvhfcM/abc*.png >
[18:23:24] <hayley> I also changed the history to be (nullable r) rather than (nullable (derivative r ...)) which was probably a typo come to think of it.
[18:23:24] <hayley> However here, END is never assigned for e.g. ac
[18:23:24] <hayley> gilberth: Indeed, you were right that I had a red herring.
[18:23:24] <hayley> One will note I miss merging the end states, but I'm not too bothered by that as they likely barely burden the compiler's CFG or anything like that.
[18:23:25] <hayley> gilberth or the other fella who sent me a dumb joke? Tried to ignore the former, failed miserably. As for the latter, eh.
[18:23:25] <hayley> I had a rule where I'd write all registers going out of a nullable state. Maybe that isn't entirely wrong. /me shrugs
[18:23:25] * hayley uploaded an image: (74KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/deQlRGDkjKjfMopJgOOCexQa/ab*.png >
[18:23:26] <hayley> No, it is wrong. e.g. (a)* would do something dumb rather than set nothing.
[18:23:26] <hayley> The tag assignments look like crap but I guess that's right for ab*
[18:23:27] <hayley> Just pull the names out of NULLABLE?
[18:23:27] <hayley> https://www.youtube.com/watch?v=0cK2J-YwTRE
[18:23:27] -ixelp- We Are Glass - YouTube
[18:33:10] *** Joins: selwyn (~selwyn@user/selwyn)
[18:33:12] *** Joins: selwyn_ (~selwyn@user/selwyn)
[18:33:48] *** Quits: selwyn_ (~selwyn@user/selwyn) (Remote host closed the connection)
[18:35:58] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:49:22] *** Joins: makomo (~makomo@user/makomo)
[18:54:43] *** Joins: rixard (~rixard@h-158-174-122-239.A357.priv.bahnhof.se)
[19:03:31] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[19:24:03] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 244 seconds)
[19:24:27] *** Joins: Mandus (~aasmundo@85.112.154.250)
[19:40:55] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1074)
[20:19:42] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 252 seconds)
[20:21:46] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:36:04] <aeth> cond: 
[20:36:12] <aeth> cond: test
[20:36:12] <cond> aeth: Complete and total agreement!
[21:22:11] *** Joins: pjb (~pjb@user/pjb)
[21:29:22] *** Quits: canopus (~user@116.68.96.91) (Quit: ERC (IRC client for Emacs 27.2))
[21:42:23] <gilberth> Good morning #lispcafe!
[21:48:43] <humasect> gm!
[21:54:33] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1074) (Remote host closed the connection)
[21:56:07] <sham1> Good evening to compliment the morning!
[22:15:57] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1074)
[22:16:55] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1074) (Remote host closed the connection)
[22:18:06] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:21:24] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[22:27:47] *** Joins: humasect (~humasect@d24-235-145-145.home1.cgocable.net)
[22:31:13] *** Joins: aeth_ (~aeth@user/aeth)
[22:31:17] <cond> test
[22:31:36] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 268 seconds)
[22:31:49] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[22:31:51] *** aeth_ is now known as aeth
[22:33:34] <Lulu> test
[22:33:54] <aeth> so it's just a pingout on irssi and not the machine, then
[22:33:59] <aeth> hmmm
[22:39:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:56:39] *** Joins: derelict (~derelict@user/derelict)
[22:58:38] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:06:09] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:07:28] *** Joins: selwyn (~selwyn@user/selwyn)
[23:09:06] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[23:10:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:22:12] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 272 seconds)
[23:25:07] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:26:39] <aeth> going to need to restart the bot because I modified the core loop to add some extra parameters in the function call
[23:27:16] <aeth> it's the only thing that can't really be avoided (well, I could avoid that in particular with &allow-other-keys and making everything keyword arguments, but it still would require a restart if I modified the logic of the loop)
[23:28:36] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[23:39:42] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[23:41:07] *** Joins: aeth (~aeth@user/aeth)
[23:56:06] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:59:26] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
