[00:00:36] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[00:08:27] *** Joins: arinov (~arinov@213.194.126.155)
[00:11:28] *** Joins: Everything (~Everythin@37.115.210.35)
[00:20:27] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[00:20:43] *** Parts: winning-luser (~wl@2601:8c1:80:70d0::414b) ()
[00:21:57] *** Quits: remote (~self@user/hackers) (Ping timeout: 240 seconds)
[00:24:37] *** Joins: pztrn (~pztrn@user/pztrn)
[00:32:39] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[00:32:44] *** Quits: nightwatch (~vvlad@ipservice-092-213-074-022.092.213.pools.vodafone-ip.de) (Remote host closed the connection)
[00:32:56] *** Joins: nightwatch (~vvlad@ipservice-092-213-074-022.092.213.pools.vodafone-ip.de)
[00:35:16] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:36:55] *** Joins: andlabs (~andlabs@70.107.171.168)
[00:40:44] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:51:37] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:52:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[00:53:10] *** Joins: grantbow (~grantbow@tatooine.princessleia.com)
[00:54:40] *** Joins: fikran (~fikran@user/fikran)
[00:56:56] <b0nn> A whiles back someone mentioned that the pkg/ directory has a lot of traction in the Go world for package layout, but it wasn't understood why (and it's not flash)
[00:57:04] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[00:57:24] <b0nn> It's because pre-Go1.0 it was the way the *go* distribution was laid out https://dave.cheney.net/2019/10/06/use-internal-packages-to-reduce-your-public-api-surface
[01:05:10] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:07:31] *** Joins: Garb0 (~Garb0@user/garb0)
[01:13:55] *** Joins: whaley (~whaley@2603-6080-a301-33d1-e627-917a-2dbe-22f7.res6.spectrum.com)
[01:14:59] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 256 seconds)
[01:16:01] *** Joins: Garb0 (~Garb0@user/garb0)
[01:16:57] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[01:18:29] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:18:37] <dostoyevsky2> I had a security review for my Go code at work.  Turns out there is a test RSA certificate in the binary which stems from a test case... but why is the test case included in the build???
[01:20:02] *** Joins: azrael (~azrael@2601:100:857f:3e30:4585:d20a:410a:d131)
[01:20:59] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:21:00] <b0nn> shouldn't be - check that the filename that holds that testdata is _test.go
[01:21:12] <b0nn> or in the testdata directory
[01:21:19] <dostoyevsky2> https://github.com/golang/go/blob/master/src/net/http/internal/testcert/testcert.go#L31
[01:21:34] <dostoyevsky2> I can find this cert in my current code as well... I think at work it was another cert..
[01:22:06] *** Parts: azrael (~azrael@2601:100:857f:3e30:4585:d20a:410a:d131) ()
[01:22:06] <ikke> So it's an internal package, not a test package
[01:23:46] <dostoyevsky2> At work security review found this one: https://github.com/golang/go/blob/master/src/crypto/tls/handshake_server_test.go#L1656
[01:25:21] <b0nn> hmm, that's in a _test.go file - it shouldn't be in your binary at all
[01:25:43] <b0nn> was the review on what was built, or what code existed?
[01:25:57] <dostoyevsky2> they analyzed the binary
[01:26:12] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Quit: Leaving)
[01:28:22] <bpalmer> dostoyevsky2: are you using  go 1.17 or higher?
[01:28:57] <dostoyevsky2> bpalmer: actually I switches from go 1.16 at work to go 1.17 but they reviewed the binary generated by go 1.16
[01:29:13] <bpalmer> ok, then that bug (https://github.com/golang/go/issues/46677 ) explains it
[01:29:16] <dostoyevsky2> ( I switched yesterday)
[01:30:02] <dostoyevsky2> ah, good find!
[01:30:17] <bpalmer> it was built at init() so couldn't be stripped out by the linker; starting in 1.17 it's a separate package so binaries that don't depend on it won't include it
[01:30:53] *** Joins: rcernin (~rcernin@124.190.149.221)
[01:31:39] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[01:32:51] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:40:18] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[01:40:33] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[01:56:00] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:02:31] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[02:02:47] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[02:18:48] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[02:21:48] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.3)
[02:22:02] *** Joins: arinov (~arinov@213.194.126.155)
[02:22:10] <ramblebamble> hi there again, I have another question regarding the understanding of golang: Do I understand it correctly, that p := new(bytes.Buffer), reader := io.Reader(p) is, more in line with type casting rather than composition, in other languages? so, I have struct of bytes.Buffer and I instruct golang to treat that buffer as if of type io.Reader() which is an interface?
[02:22:17] *** Quits: rcernin (~rcernin@124.190.149.221) (Ping timeout: 240 seconds)
[02:22:59] *** Joins: rcernin (~rcernin@124.190.149.221)
[02:23:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[02:25:06] *** Joins: Garb00 (~Garb0@user/garb0)
[02:26:10] *** Joins: mjanssen (~mpcjansse@2a01:4f9:c011:75e6::1)
[02:26:22] <fizzie> You're converting a value of type `*bytes.Buffer` to a value of type `io.Reader`, which is allowed, because the latter is an interface type, and the type `*bytes.Buffer` implements all the methods of the interface.
[02:26:38] *** Quits: sharko2 (~sharko2@c148-218.icpnet.pl) (Quit: Leaving)
[02:28:03] <ramblebamble> Yes that is what I ment to say, what did I say? Anyways greate, I understood it correctly thank you.
[02:28:17] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 268 seconds)
[02:28:39] *** Quits: beholders_eye (~weechat@177.132.24.49) (Ping timeout: 250 seconds)
[02:28:42] <fizzie> Well, there's a few nitpicks. It's not `bytes.Buffer` (the struct) that's being treated as an io.Reader, it's `*bytes.Buffer` (the pointer), since it's the pointer type that actually implements the interface.
[02:30:12] <ramblebamble> why is that distinction made? A pointer points to an instance of struct but I can use an instance  without a pointer can't I
[02:30:21] <ramblebamble> is it to prevent copying?
[02:30:35] <fizzie> Sure you can. Struct values are perfectly good values too.
[02:30:46] <Festive_Dragon> the implementation of the Reader functions accepts a pointer to the struct
[02:30:50] <Festive_Dragon> rather than the struct itself
[02:30:59] <ramblebamble> yes that is my question why?
[02:31:04] <Festive_Dragon> usually because the implementation needs to modify the struct
[02:31:27] <Festive_Dragon> (as opposed to one that doesnt, which would get a copy of the struct in its call, so any modifications it made wouldnt make it back out)
[02:31:44] <ramblebamble> ah I get it thank you.
[02:32:34] <fizzie> FWIW, it's pretty rare that you'd actually have to write an explicit conversion to an interface type like that. Most of the time you'd just pass `p` to some function/method that takes an `io.Reader` argument, or return `p` from a function/method that returns an `io.Reader`. Both of those are allowed implicitly.
[02:34:10] *** Quits: krux02 (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:34:39] *** Joins: Garb000 (~Garb0@user/garb0)
[02:35:03] *** Quits: Garb000 (~Garb0@user/garb0) (Remote host closed the connection)
[02:35:50] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[02:36:31] <ramblebamble> k, good to know
[02:37:32] *** Quits: Garb00 (~Garb0@user/garb0) (Ping timeout: 268 seconds)
[02:44:59] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (Quit: The Lounge - https://thelounge.chat)
[02:45:25] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[03:01:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[03:03:51] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:04:00] *** Joins: fikran (~fikran@user/fikran)
[03:10:52] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[03:15:22] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[03:22:17] *** Quits: normen (~normen@p200300d71703160090960436327aa7c8.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:23:58] *** Joins: acosta (~acosta@163.172.62.165)
[03:46:31] *** Joins: todo75 (~todo75@2601:2c7:4300:1530:898c:7b99:ee4e:ea60)
[03:47:38] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[03:48:11] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[03:48:43] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:49:26] *** Joins: normen (~normen@p200300d71703160090960436327aa7c8.dip0.t-ipconnect.de)
[03:51:16] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:54:09] *** Quits: todo75 (~todo75@2601:2c7:4300:1530:898c:7b99:ee4e:ea60) (Quit: todo75)
[03:55:31] *** Joins: todo75 (~todo75@2601:2c7:4300:1530:898c:7b99:ee4e:ea60)
[03:59:42] *** Quits: todo75 (~todo75@2601:2c7:4300:1530:898c:7b99:ee4e:ea60) (Changing host)
[03:59:42] *** Joins: todo75 (~todo75@user/todo75)
[03:59:53] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[04:04:34] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.3)
[04:07:35] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: Ping timeout (120 seconds))
[04:07:53] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[04:08:17] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
[04:12:15] *** Joins: nitrix (~nitrix@user/nitrix)
[04:16:53] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 256 seconds)
[04:22:22] *** Quits: normen (~normen@p200300d71703160090960436327aa7c8.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:32:20] *** Joins: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp)
[04:35:48] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[04:40:28] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:c959:9e8d:b7ca:4f4d)
[04:41:29] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[04:43:03] *** Joins: arinov (~arinov@213.194.126.155)
[04:43:37] *** Quits: barnoby (~barnoby@2603-6000-a409-2660-a82c-0949-6c9b-1a1c.res6.spectrum.com) (Ping timeout: 240 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:50:17] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[05:07:08] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[05:07:10] <mikoto-chan> https://go.dev/play/p/q1l84x13BXt
[05:07:28] <mikoto-chan> how do I use this library to extract the text in the tags?
[05:09:12] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:10:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[05:10:59] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[05:13:20] *** Joins: fikran (~fikran@user/fikran)
[05:20:56] <mikoto-chan> or should I say, how do I find the corresponding TextNode for the ElemenNode?
[05:22:28] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[05:23:20] *** Joins: normen (~normen@p200300d71703160090960436327aa7c8.dip0.t-ipconnect.de)
[05:26:17] <mikoto-chan> I guess that I have to use nodes ...
[05:27:11] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[05:28:22] <mikoto-chan> tokens*
[05:28:37] <fizzie> https://go.dev/play/p/NEw_lOGuzWt  // but that's assuming there's a text node as the direct (and only) child of the <a> element, which isn't guaranteed.
[05:30:55] *** Joins: shtirlic_ (~shtirlic@178.70.132.77)
[05:31:06] <bpalmer> parsing and checking html by hand rapidly drives me towards looking to something like https://github.com/antchfx/htmlquery
[05:32:25] <fizzie> https://go.dev/play/p/KholxxQeRGi  // if your needs are very simple, it doesn't take that much to make x/net/html do it
[05:33:50] <mikoto-chan> fizzie: aha, so the ElementNode contains the matching TextNode as a child?
[05:34:32] *** Quits: shtirlic (~shtirlic@178.70.143.240) (Ping timeout: 268 seconds)
[05:35:22] <mikoto-chan> bpalmer: I'm trying to scrape without any external libraries
[05:37:55] <fizzie> If you really want to get scrappy (in terms of resource use), that would probably involve pulling the text out using only the tokenizer, without parsing the document structure (there's an example of that in the docs).
[05:38:25] <bpalmer> mikoto-chan: sure, fizzie's example shows how to do it; it just turns a bit tedious real fast.
[05:44:44] *** Joins: cstls (~ruiner@2603-7081-0800-4824-c490-a8ae-01b5-10bc.res6.spectrum.com)
[05:47:33] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[05:47:47] *** Joins: cobber (~protorom@213.240.182.77)
[05:48:17] *** Quits: cobber (~protorom@213.240.182.77) (Client Quit)
[05:52:26] *** Quits: normen (~normen@p200300d71703160090960436327aa7c8.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:54:17] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[05:59:42] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[06:08:34] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[06:09:29] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[06:16:26] *** Joins: TheDude2600 (~TheDude26@pa49-199-4-176.pa.vic.optusnet.com.au)
[06:19:42] *** Quits: chromis (sid150893@id-150893.tinside.irccloud.com) (Read error: Connection reset by peer)
[06:19:50] *** Joins: chromis (sid150893@id-150893.tinside.irccloud.com)
[06:20:15] *** Quits: Balooga (sid407689@id-407689.lymington.irccloud.com) (Ping timeout: 264 seconds)
[06:20:32] *** Quits: hhes (sid420846@id-420846.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[06:20:37] *** Quits: jsvcycling (sid369784@id-369784.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[06:20:37] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[06:20:56] *** Joins: jsvcycling (sid369784@id-369784.uxbridge.irccloud.com)
[06:20:57] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[06:21:13] *** Joins: hhes (sid420846@id-420846.ilkley.irccloud.com)
[06:23:25] *** Joins: Balooga (sid407689@id-407689.lymington.irccloud.com)
[06:24:29] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:26:13] *** Quits: Anderson-D (sid146635@id-146635.tinside.irccloud.com) (Ping timeout: 240 seconds)
[06:27:33] *** Joins: Anderson-D (sid146635@id-146635.tinside.irccloud.com)
[06:40:56] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:49:38] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[06:50:00] *** Joins: normen (~normen@pd9eeca92.dip0.t-ipconnect.de)
[06:51:02] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 240 seconds)
[06:53:38] *** Joins: jespada (~jespada@87.74.33.157)
[07:00:49] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Quit: Leaving)
[07:01:01] <mikoto-chan> how do I return 2 ints as a slice?
[07:02:01] *** Joins: mrlemke (~quassel@208.74.105.200)
[07:03:24] <tar_xvf> mikoto-chan: is this what you are thinking of? https://go.dev/play/p/WWjDLU_4Td3
[07:08:43] *** Quits: moog (~moog@107.242.124.157) (Remote host closed the connection)
[07:13:40] <mikoto-chan> tar_xvf: yeah, stupid question after all since I figured it out on my own
[07:13:56] <tar_xvf> mikoto-chan: no problem, glad you were able to figure it out
[07:16:18] *** Joins: remote (~self@user/hackers)
[07:22:02] *** Quits: normen (~normen@pd9eeca92.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:35:02] *** Quits: qrpnxz (~qrpnxz@user/qrpnxz) (Ping timeout: 260 seconds)
[07:49:27] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[08:13:09] *** Quits: Kaivo (~Kaivo@170.249.85.113) (Ping timeout: 250 seconds)
[08:15:25] *** Joins: Kaivo (~Kaivo@user/kaivo)
[08:20:01] *** Joins: normen (~normen@pd9eeca92.dip0.t-ipconnect.de)
[08:33:15] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[08:41:33] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[08:52:17] *** Quits: normen (~normen@pd9eeca92.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[08:59:14] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:03:58] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[09:09:02] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[09:09:10] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Client Quit)
[09:09:53] *** Quits: pztrn (~pztrn@user/pztrn) (Quit: Ping timeout (120 seconds))
[09:10:11] *** Joins: pztrn (~pztrn@user/pztrn)
[09:15:12] *** Joins: barnoby (~barnoby@2603-6000-a409-2660-c41d-560b-b85d-0163.res6.spectrum.com)
[09:20:29] *** Quits: cstls (~ruiner@2603-7081-0800-4824-c490-a8ae-01b5-10bc.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:24:23] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:28:42] *** Joins: Atque (~Atque@user/atque)
[09:31:29] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-8703-960c-aac7-5a22.ip6.gigabit.dk)
[09:44:25] *** Quits: remote (~self@user/hackers) (Ping timeout: 256 seconds)
[09:45:28] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[09:45:52] *** Joins: remote (~self@user/hackers)
[09:48:17] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Ping timeout: 240 seconds)
[09:50:10] *** Joins: normen (~normen@pd9eeca92.dip0.t-ipconnect.de)
[09:56:08] *** Joins: andlabs_ (~andlabs@70.107.171.168)
[09:59:09] *** Quits: andlabs (~andlabs@70.107.171.168) (Ping timeout: 256 seconds)
[10:00:34] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:03:47] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:05:27] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:06:00] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Client Quit)
[10:16:58] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[10:17:07] *** Quits: TheDude2600 (~TheDude26@pa49-199-4-176.pa.vic.optusnet.com.au) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[10:22:23] *** Quits: normen (~normen@pd9eeca92.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[10:29:03] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:32:26] *** Quits: remote (~self@user/hackers) (Ping timeout: 245 seconds)
[10:33:17] *** Quits: avemestr (~avemestr@2a01:4f8:121:228f::2) (Quit: WeeChat 2.8)
[10:34:34] *** Joins: remote (~self@user/hackers)
[10:34:44] *** Quits: sailorCat (~sailorCat@mail2.gajsin.name) (Quit: ZNC 1.8.2 - https://znc.in)
[10:34:58] *** Joins: sailorCat (~sailorCat@mail2.gajsin.name)
[10:35:22] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[10:35:39] *** Joins: bindu (~bindu@user/bindu)
[10:35:46] *** launchd is now known as BuddyTheElf
[10:38:15] *** Quits: moto (~moto@user/moto) (Ping timeout: 256 seconds)
[10:41:02] *** Quits: remote (~self@user/hackers) (Ping timeout: 240 seconds)
[10:43:08] *** Joins: remote (~self@user/hackers)
[10:49:35] *** Quits: effprime (~effprime@user/effprime) (Ping timeout: 256 seconds)
[10:52:09] *** Joins: effprime (~effprime@user/effprime)
[11:00:23] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[11:03:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:08:32] *** Joins: moto (~moto@user/moto)
[11:10:17] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:19:25] *** Joins: normen (~normen@p200300d7170316007c2b35ecd5d6dd1b.dip0.t-ipconnect.de)
[11:20:58] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:28:39] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[11:29:40] *** Joins: rendar (~rendar@user/rendar)
[11:30:09] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Remote host closed the connection)
[11:31:07] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[11:33:41] *** Joins: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[11:34:43] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[11:38:16] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[11:41:39] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:44:37] *** Quits: rcernin (~rcernin@124.190.149.221) (Ping timeout: 240 seconds)
[11:44:58] *** Joins: mrig (~AdiIRC@user/mrig)
[11:53:10] *** Quits: normen (~normen@p200300d7170316007c2b35ecd5d6dd1b.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[12:00:51] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::46ff)
[12:05:58] *** Joins: jla (~jordi@64.225.79.195)
[12:07:19] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[12:07:39] *** Joins: fling (~fling@user/fling)
[12:10:54] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:f07d:ef08:d280:aff)
[12:22:46] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:f07d:ef08:d280:aff) (Ping timeout: 268 seconds)
[12:23:05] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[12:23:21] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[12:23:21] *** Joins: menace (~someone@user/menace)
[12:23:25] *** menace is now known as Deknos
[12:25:25] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[12:25:53] *** Joins: jla (~jordi@64.225.79.195)
[12:26:18] *** Quits: jla (~jordi@64.225.79.195) (Client Quit)
[12:30:04] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:f07d:ef08:d280:aff)
[12:30:14] *** Joins: jla (~jordi@64.225.79.195)
[12:30:35] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Quit: Leaving)
[12:35:43] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Ping timeout: 268 seconds)
[12:37:25] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[12:40:52] *** Joins: normen (~normen@p200300d7170316007c2b35ecd5d6dd1b.dip0.t-ipconnect.de)
[12:50:37] *** Quits: idstam (~idstam@2.65.3.149.mobile.tre.se) (Ping timeout: 240 seconds)
[13:04:17] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:f07d:ef08:d280:aff) (Ping timeout: 240 seconds)
[13:06:51] *** Bitflux is now known as Byteflux
[13:19:26] *** Quits: remote (~self@user/hackers) (Ping timeout: 260 seconds)
[13:25:14] *** Joins: shka (~herr@109.231.0.226)
[13:37:02] *** Joins: user914 (~user914@dcm-info-22.u-ga.fr)
[13:52:03] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:f07d:ef08:d280:aff)
[13:53:10] *** Joins: n-st (~n-st@user/n-st)
[13:55:56] <n-st> hi! for a packet capture tool, i need to set a filter on my packet source. what would be a good way to write `const bpfFilter = "icmp6 && ip6[40] == 128"`, while extracting the two magic numbers?
[13:56:26] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:f07d:ef08:d280:aff) (Ping timeout: 252 seconds)
[13:56:41] <n-st> gopacket already gives me `const layers.ICMPv6TypeEchoRequest = 128`, but how do i use that in my string constant?
[13:59:19] *** Quits: user914 (~user914@dcm-info-22.u-ga.fr) (Ping timeout: 256 seconds)
[14:27:38] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:35:14] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Quit: Either rebooting or something broke.)
[14:37:57] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[14:44:41] *** Joins: jasonwucj (uid13975@id-13975.ilkley.irccloud.com)
[14:50:20] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[14:50:57] *** Joins: rogersm (~rogersm@90.166.177.48)
[14:51:07] *** Quits: rogersm (~rogersm@90.166.177.48) (Remote host closed the connection)
[15:00:53] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[15:08:25] *** Joins: beholders_eye (~weechat@2804:1b3:70c2:d7e4:2dd:3e29:fd7e:314)
[15:10:37] *** Joins: user914 (~user914@dcm-info-22.u-ga.fr)
[15:15:18] *** ajfriesen7 is now known as ajfriesen
[15:16:55] *** Quits: beholders_eye (~weechat@2804:1b3:70c2:d7e4:2dd:3e29:fd7e:314) (Quit: WeeChat 3.3)
[15:18:45] *** Joins: beholders_eye (~weechat@2804:1b3:70c2:d7e4:2dd:3e29:fd7e:314)
[15:19:16] *** Joins: cstls (~ruiner@2603-7081-0800-4824-c490-a8ae-01b5-10bc.res6.spectrum.com)
[15:21:01] *** Quits: cstls (~ruiner@2603-7081-0800-4824-c490-a8ae-01b5-10bc.res6.spectrum.com) (Client Quit)
[15:25:27] *** Joins: szahid (~szahid@2a01:4f9:3a:1029::219)
[15:27:11] <szahid> Which web framework is the best  for you?
[15:29:57] *** Quits: beholders_eye (~weechat@2804:1b3:70c2:d7e4:2dd:3e29:fd7e:314) (Ping timeout: 240 seconds)
[15:44:22] <sztanpet> none, a few middlewares, and the stdlib works for me just fine
[15:45:04] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[15:45:43] *** Joins: Everything (~Everythin@37.115.210.35)
[15:48:02] *** Quits: zwr (~zwr@2804:d45:b966:fb00:a798:3719:6645:498) (Ping timeout: 240 seconds)
[15:49:03] *** Joins: zwr (~zwr@2804:d45:b966:fb00:7634:5fa:3b2f:e1a6)
[16:13:57] <szahid> sztanpet: like  gorilla-mux?
[16:17:02] *** Joins: bittin (~bittin@fedora/bittin)
[16:19:53] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[16:19:59] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 250 seconds)
[16:26:27] *** Joins: aLeSD (~aLeSD@85.62.96.34)
[16:32:57] *** Joins: mobbi (~quassel@dfsm20yhfpcm49zm2byvy-3.rev.dnainternet.fi)
[16:34:13] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:f07d:ef08:d280:aff)
[16:36:02] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::46ff) (Ping timeout: 240 seconds)
[16:36:18] *** Quits: aLeSD (~aLeSD@85.62.96.34) (Remote host closed the connection)
[16:36:57] *** Quits: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) (Ping timeout: 256 seconds)
[16:39:18] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:f07d:ef08:d280:aff) (Ping timeout: 268 seconds)
[16:48:47] *** Joins: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz)
[16:49:11] *** Joins: mthunter (mthunter2@gateway/vpn/protonvpn/mthunter)
[16:49:31] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:50:22] *** Quits: normen (~normen@p200300d7170316007c2b35ecd5d6dd1b.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:52:58] *** Joins: normen (~normen@p200300d7170316007c2b35ecd5d6dd1b.dip0.t-ipconnect.de)
[16:54:20] <TDT_> Hey All, I'm trying to test out making my own modules, and the relationship with the Internal package.  I'm fairly newer to Go, and am running examples similar to the book "Learning Go" on chapter 9.  I pasted all relevant code https://gist.github.com/TheDarkTrumpet/5dc976abc8e4daa59c02e09bbf858689 - I'm getting compilation errors with the internal package.
[16:54:24] *** TDT_ is now known as TDT
[16:55:02] <TDT> I'm hoping to, in mod.go, to call an internal package (mod/internal/internal.go), but it's talking about disallowed import paths.
[16:55:43] *** imm__ is now known as imm_
[16:55:44] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[16:57:49] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:c959:9e8d:b7ca:4f4d) (Ping timeout: 240 seconds)
[16:58:42] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[17:00:06] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:00:28] *** Joins: jezebel (jezebel@user/jezebel)
[17:00:30] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[17:00:52] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:01:18] *** Joins: jla (~jordi@64.225.79.195)
[17:01:51] <jezebel> syslog from the standard library is frozen. is it considered feature complete or is usage discouraged?
[17:02:51] <jezebel> or should i use log?
[17:04:25] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:15:10] *** Quits: bittin (~bittin@fedora/bittin) (Quit: Leaving)
[17:16:12] *** Quits: normen (~normen@p200300d7170316007c2b35ecd5d6dd1b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:21:35] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[17:27:27] *** Quits: whaley (~whaley@2603-6080-a301-33d1-e627-917a-2dbe-22f7.res6.spectrum.com) (Remote host closed the connection)
[17:28:42] *** Joins: henko (~henko@62-178-187-35.cable.dynamic.surfer.at)
[17:30:56] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:f07d:ef08:d280:aff)
[17:35:17] *** Joins: fef (~thedawn@user/thedawn)
[17:35:57] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:f07d:ef08:d280:aff) (Ping timeout: 240 seconds)
[17:37:54] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[17:42:20] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[17:42:59] *** Joins: normen (~normen@p200300d7170316007c2b35ecd5d6dd1b.dip0.t-ipconnect.de)
[17:49:24] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Read error: Connection reset by peer)
[17:51:07] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[17:52:05] <mickey8> is there any reason i can't access a variable of another package? i have it defined outside of all functions in that package as var Names = "xyz", and I can'
[17:52:19] <mickey8> I can't access it from a package that imported that package
[17:52:59] <mickey8> I can access it if it's a const, but consts and maps don't work well together
[17:53:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:57:36] *** Joins: dhrv0x (~dhrv0x@user/dhrv)
[17:58:05] <dhrv0x> a.go:11:5: no required module provides package github.com/charmbracelet/bubbletea: go.mod file not found in current directory or any parent directory; see 'go help modules'
[17:58:29] <dhrv0x> import (     "fmt"     "log"     "os"     "time"      tea "github.com/charmbracelet/bubbletea" )
[17:59:12] <dhrv0x> go install https://github.com/charmbracelet/bubbletea
[17:59:30] <dhrv0x> ^ I installed using this command, still getting that error
[18:01:02] *** Quits: pgloor (~petergloo@mix.cubus.space) (Quit: The Lounge - https://thelounge.chat)
[18:01:38] *** Joins: pgloor (~petergloo@mix.cubus.space)
[18:02:56] *** Joins: neverfindme (~hayden@158.123.160.43)
[18:02:56] *** Joins: arinov (~arinov@213.194.126.155)
[18:04:01] *** Parts: Everything (~Everythin@37.115.210.35) ()
[18:09:07] *** Quits: henko (~henko@62-178-187-35.cable.dynamic.surfer.at) (Quit: WeeChat 3.3)
[18:12:54] <bookworm> dhrv0x: init a module for the code you are working on
[18:13:04] <bookworm> go mod init $name
[18:13:27] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[18:13:31] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[18:14:22] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[18:17:45] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[18:18:23] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[18:18:40] *** Joins: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp)
[18:21:45] <mickey8> anyone please?
[18:33:59] <n-st> mickey8: what's the name of your variable? it will only be accessible from outside the package if it starts with an uppercase letter: https://golangbyexample.com/scope-of-variable-go/
[18:34:07] <mickey8> "Names".
[18:34:31] *** Quits: jasonwucj (uid13975@id-13975.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[18:34:52] <mickey8> i figured it out now though. i had the package name and an instance of it with the same name, so it was looking for Names under the instance and not the package.
[18:35:02] <n-st> gotcha
[18:38:05] <dostoyevsky2> Today security review mentioned that go binaries are trivial to decompile, even when stripping the debug symols, as section .gopclntab contains all the function names.  Not sure if they are only present if reflect is being used somewhere, though...
[18:38:57] *** Quits: normen (~normen@p200300d7170316007c2b35ecd5d6dd1b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:39:55] *** Quits: dhrv0x (~dhrv0x@user/dhrv) (Remote host closed the connection)
[18:42:06] <fikran> hi all! I have not been able to find an example of golang websockets using golang.org/x/net/websocket. Does anyone have an example?
[18:42:54] <fikran> oh wait...THE documentation...
[18:43:17] <dostoyevsky2> https://gist.github.com/mowings/dad4917b6fc21e6e5ffe2da3b16e7ef9
[18:43:40] <dostoyevsky2> fikran: ^ that gist uses golang.org/x/net/websocket
[18:44:31] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[18:46:02] *** Quits: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz) (Quit: Leaving)
[18:46:02] *** Quits: neverfindme (~hayden@158.123.160.43) (Ping timeout: 240 seconds)
[18:47:10] *** Joins: arinov (~arinov@176.89.29.127)
[18:47:40] *** Parts: mthunter (mthunter2@gateway/vpn/protonvpn/mthunter) ()
[18:49:20] <Teckla> fikran: I'm under the impression that golang.org/x/net/websocket is not used much and not recommended.
[18:50:00] <Teckla> I've seen nhooyr.io/websocket recommended frequently.
[18:51:03] *** Joins: neverfindme (~hayden@158.123.160.43)
[18:51:20] *** Quits: neverfindme (~hayden@158.123.160.43) (Client Quit)
[18:52:11] *** Quits: andlabs_ (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:53:35] <jezebel> Hey Teckla
[19:00:44] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[19:02:42] *** Joins: thorsager (~mit@green.krakow.dk)
[19:02:55] *** Quits: user914 (~user914@dcm-info-22.u-ga.fr) (Quit: Client closed)
[19:05:05] *** Quits: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d) (Ping timeout: 250 seconds)
[19:05:29] *** Joins: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d)
[19:06:50] *** Joins: andlabs (~andlabs@2604:ca00:140:2751:2883:a2a9:33ab:4031)
[19:09:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:14:07] <Teckla> jezebel: Hello
[19:15:17] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 240 seconds)
[19:15:33] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:15:54] *** Joins: bindu (~bindu@user/bindu)
[19:17:29] *** Joins: arinov (~arinov@31.223.10.63)
[19:20:13] <nebiros> hello, any thoughts on this one: https://www.reddit.com/r/golang/comments/rhwy3c/how_do_people_in_large_go_teams_approach/?
[19:21:14] <nebiros> I usually think about what I need to pass, I mean, if is some data from request, I pass it as a value, if I need something that can be nil, then I pass a pointer instead
[19:21:46] *** Quits: pgloor (~petergloo@mix.cubus.space) (Read error: Connection reset by peer)
[19:21:54] <nebiros> found this other answer: https://www.reddit.com/r/golang/comments/r92m5k/best_practices_with_pointers/hn9s9tv/?utm_source=share&utm_medium=ios_app&utm_name=iossmf&context=3
[19:23:49] *** Joins: pgloor (~petergloo@mix.cubus.space)
[19:29:37] *** Quits: arinov (~arinov@31.223.10.63) (Ping timeout: 240 seconds)
[19:31:02] *** Quits: pgloor (~petergloo@mix.cubus.space) (Quit: The Lounge - https://thelounge.chat)
[19:31:38] *** Joins: pgloor (~petergloo@mix.cubus.space)
[19:31:48] *** Joins: arinov (~arinov@176.89.29.127)
[19:33:29] *** Joins: andlabs_ (~andlabs@2604:ca00:140:2751:fd6d:a6b5:cc1b:48cf)
[19:34:08] *** Quits: pgloor (~petergloo@mix.cubus.space) (Client Quit)
[19:34:18] *** Joins: pgloor (~petergloo@mix.cubus.space)
[19:36:15] *** Quits: andlabs_ (~andlabs@2604:ca00:140:2751:fd6d:a6b5:cc1b:48cf) (Client Quit)
[19:36:57] *** Quits: andlabs (~andlabs@2604:ca00:140:2751:2883:a2a9:33ab:4031) (Ping timeout: 240 seconds)
[19:36:59] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:37:38] *** Joins: beholders_eye (~weechat@2804:1b3:70c2:d7e4:2dd:3e29:fd7e:314)
[19:38:36] *** Quits: phylaz (~phylaz@80.203.89.4) (Quit: The Lounge - https://thelounge.chat)
[19:40:27] *** Joins: mrig (~mrig@user/mrig)
[19:43:04] *** Joins: phylaz (~phylaz@80.203.89.4)
[19:47:40] *** Quits: pgloor (~petergloo@mix.cubus.space) (Quit: The Lounge - https://thelounge.chat)
[19:47:50] *** Joins: pgloor (~petergloo@mix.cubus.space)
[19:48:00] *** Quits: pgloor (~petergloo@mix.cubus.space) (Client Quit)
[19:49:30] *** Joins: pgloor (~petergloo@mix.cubus.space)
[19:50:10] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[19:50:43] *** Joins: andlabs (~andlabs@ool-457dd512.dyn.optonline.net)
[19:50:59] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[19:51:50] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[19:52:15] *** Joins: noonien (~noonien@user/noonien)
[19:52:23] *** Joins: lilgopher (~textual@2601:241:8000:38f0:8d58:daf:1eca:e9ec)
[19:54:38] <fikran> Anyone have an example of a working websocket example? The one here doesn't populate the "protocol" field. https://pkg.go.dev/golang.org/x/net/websocket#Dial
[19:54:45] <fikran> I haven't really been able to find ANY examples online :(
[20:01:37] <since_> Several years ago i used https://github.com/gorilla/websocket
[20:02:51] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[20:02:51] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[20:02:51] *** Joins: tane (~tane@user/tane)
[20:10:28] *** Joins: normen (~normen@pd9eeca92.dip0.t-ipconnect.de)
[20:12:49] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[20:14:11] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[20:14:36] *** Joins: noonien (~noonien@user/noonien)
[20:20:09] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[20:20:16] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[20:37:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-786b-4edf-d419-7d31.res6.spectrum.com)
[20:43:27] *** Quits: normen (~normen@pd9eeca92.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[20:43:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[20:48:49] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:53:25] *** Joins: Garb0 (~Garb0@user/garb0)
[20:55:12] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 268 seconds)
[20:55:41] *** Joins: jla (~jordi@64.225.79.195)
[20:59:03] <mrig> Hello, does anyone have any advice for how to unfreeze gopls with vim-go
[20:59:52] <mrig> I'm coming back to go having been coding in C, and am left wondering if ctags is not still the better option?
[21:01:37] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:02:36] <lungaro> is there a way to assemble commands with pipes, like in bash? ie, "cmd1 | cmd2 | cmd3 "
[21:02:43] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[21:02:50] <lungaro> i suppose I could do it myself, but lookking for a nice syntax and library
[21:03:02] <mrig> lungaro: there are pipes in the exec package.
[21:03:27] <lungaro> yeah, I guess I just need some helper functions which connect stdout of cmd1 to stdin of cmd2
[21:04:06] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 245 seconds)
[21:04:11] *** Joins: darkapex (~darkapex@user/darkapex)
[21:04:30] <lungaro> i need a bunch of provisioning scripts in bash and am trying to decide what parts to do in script vs go
[21:04:55] *** Quits: neverfindme (~hayden@158.123.160.43) (Client Quit)
[21:05:44] <mrig> there is a divide in that once inside of the go runtime you are no longer calling exec in a shell.
[21:05:52] <mrig> came across this the other day.
[21:06:58] <lungaro> yeah, in an ideal world, it'd all be in go, but i can save some time i think this way. haha
[21:07:08] <mrig> you can just use io streams inside the program though.
[21:07:23] <mrig> readers and writers
[21:08:00] <mrig> else write a few go programs and then use pipes in the shell.
[21:08:44] <mrig> but you can get pipes in the program, I'd be interested to know if you figure something out with those.
[21:08:53] <Garb0> lungaro, like mrig said  io.Pipe is a good option
[21:09:33] <lungaro> cheers
[21:10:33] <mrig> oh this is crazy, I have to run compile once to get the language server to wake up :|
[21:11:28] <mrig> well I'm glad to have spotted that anyhow, could save me time trying to get the thing to register when moving from one code baseto another.
[21:12:40] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:14:25] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[21:18:04] *** Joins: et_ (~et@user/et)
[21:19:09] *** Quits: et (~et@user/et) (Ping timeout: 256 seconds)
[21:19:09] *** et_ is now known as et
[21:25:39] <Garb0> lungaro, btw, if u don't mind me asking, what's wrong with using cmd1's .Output as an arg in cmd2 ?
[21:28:57] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[21:40:21] *** Joins: normen (~normen@p200300d7170316007c2b35ecd5d6dd1b.dip0.t-ipconnect.de)
[21:40:23] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[21:47:10] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Remote host closed the connection)
[21:50:37] *** Joins: jla (~jordi@64.225.79.195)
[21:51:20] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:51:23] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[21:52:51] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:53:55] *** Joins: internut (~internut@2601:280:4e00:7b70:6892:7b6b:de75:4f3b)
[21:58:14] <bpalmer> don't forget the option to exec.Command("bash", "-c", "foo | bar | baz")
[21:58:25] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:58:36] *** Joins: carlavilla (~carlavill@2a0c:5a84:3407:5100:221:6bff:fe3b:cee4)
[21:59:51] *** Quits: kulak (~kulak@user/kulak) (Quit: kulak)
[22:01:21] <since_> bpalmer: exploits incoming
[22:02:22] <since_> And why getting output or using pipes if you can just swap stdin to stdout
[22:07:43] *** Joins: girafe2 (~girafe@176-147-142-235.abo.bbox.fr)
[22:10:37] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 240 seconds)
[22:13:17] *** Quits: normen (~normen@p200300d7170316007c2b35ecd5d6dd1b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:14:04] <bpalmer> there are no inherent exploits in just letting the shell do what it's good at.
[22:18:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:20:22] <since_> Exactly. The shell is good at too many things. Like interpreting arguments of the programs to be piped and creating subshells
[22:27:12] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[22:28:47] *** Joins: mnx (marian@user/mnx)
[22:35:53] <b0nn> wut
[22:40:34] <seebs> the concern is basically that if you have any interpolated data in a command, going through the shell means that the shell will then do More with that.
[22:40:38] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[22:40:56] <seebs> so eventually you get a user named "$(cat /etc/passwd)" or something.
[23:03:19] *** Joins: moog (~moog@107.77.244.45)
[23:09:19] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[23:09:29] *** Joins: neurocyte0132889 (~neurocyte@45.131.37.166)
[23:09:29] *** Quits: neurocyte0132889 (~neurocyte@45.131.37.166) (Changing host)
[23:09:29] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[23:10:06] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[23:14:26] *** Joins: normen (~normen@p200300d7170316007c2b35ecd5d6dd1b.dip0.t-ipconnect.de)
[23:15:11] *** Quits: jkl1337 (~jkl@user/jkl) (Quit: Gone.)
[23:16:32] *** Joins: jkl (~jkl@user/jkl)
[23:17:57] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-786b-4edf-d419-7d31.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:24:57] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:cc32:6092:bdbf:ae3b) (Ping timeout: 240 seconds)
[23:25:40] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Ping timeout: 268 seconds)
[23:25:51] *** Quits: mobbi (~quassel@dfsm20yhfpcm49zm2byvy-3.rev.dnainternet.fi) (Read error: Connection reset by peer)
[23:34:51] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-555a-1142-3fc2-3a5f.res6.spectrum.com)
[23:34:56] <dostoyevsky2> does Go have good quoting mechanisms?  I tend to just do something like fmt.Sprintf("'%s'", string) ..
[23:37:31] <dostoyevsky2> I guess I mean string escapes
[23:43:04] <foobaz> sounds like a great way to suffer an injection attack
[23:43:33] *** Quits: normen (~normen@p200300d7170316007c2b35ecd5d6dd1b.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[23:43:45] <foobaz> i use encoding/json - quoted, err := json.Marshal(unquoted)
[23:51:48] <dostoyevsky2> foobaz: Ah, I remember doing something similar in my Python code...  Ok, just changed all my Go code to do proper quoting
[23:52:07] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[23:57:01] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-555a-1142-3fc2-3a5f.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:57:53] <j416> mrig: kill it, it'll reload
[23:58:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-60a6-7749-daab-1d70.res6.spectrum.com)
[23:58:14] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-60a6-7749-daab-1d70.res6.spectrum.com) (Client Quit)
[23:58:32] <j416> gopls is the worst thing; I kill it multiple times a day to get it to work properly
[23:58:40] <j416> dunno what they were smoking when they wrote it
[23:58:44] <j416> it works when it works, though
