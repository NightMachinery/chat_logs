[00:14:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:22:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:26:09] <[itchyjunk]> Hello
[00:28:10] <[itchyjunk]> i want to pass a list and a value to my function. the function then adds 2 elements of the list and checks if it matches this provided value
[00:28:37] <[itchyjunk]> my idea was to take the list and split it into first and rest elements. then add first with each element in rest and check. then take the rest, break it into first and rest
[00:28:39] <[itchyjunk]> and so on
[00:28:46] <[itchyjunk]> in theory, i think this would work
[00:28:53] <[itchyjunk]> https://bpa.st/7LFQ
[00:29:01] <[itchyjunk]> my second function is an attempt at this
[00:29:10] <[itchyjunk]> but it's royally screwed up i think
[00:31:52] <mfiano> If you want other people to read your code, you're going to have to format it correctly. That involves using Emacs and SLIME.
[00:32:24] <mfiano> I don't think anyone would try reading that as it is. Indentation and parentheis placement is important to those reading your code
[00:32:48] <[itchyjunk]> Format it correctly?
[00:33:02] <[itchyjunk]> I mean i understand there are standard formatting
[00:33:32] <[itchyjunk]> but saying you need to use X software and do Y or else sounds a bit too much
[00:33:52] <mfiano> The way you have written requires one to count parentheses, which is a waste of time, and error prone. That is not how you read Lisp
[00:33:55] <[itchyjunk]> maybe write a different interpreter that only runs if "format is correct"
[00:37:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:41:21] <mfiano> Fair enough. I mistakenly thought you were asking for help instead of showing off your unconventional way of writing Lisp.
[00:43:54] <[itchyjunk]> If your idea of help is telling people to learn X and do Y, i'll gladly pass on it.
[00:47:08] <edgar-rft> The problem is more that the code of the iseq2 function is invalid Lisp, even if it's correctly formatted. But mfiano is in so far right as that I would have noticed that at the very first view if the code *were* correctly formatted.
[00:47:08] <edgar-rft> Question: the value shall be checked against the sum of all possible combinations of two elements from the list?
[00:48:15] <edgar-rft> Because then the way how you want to solve it is correct, only the code is wrong :-)
[00:49:22] <[itchyjunk]> yes all possible combination
[00:49:48] <[itchyjunk]> the final goal is to find 2 pairs from the list that adds to some specific constant and return the product of those 2
[00:50:11] <[itchyjunk]> alright, i'll stare at my code then. if i know it's logically making sense, that's a good start
[00:50:48] <edgar-rft> check for the sum, but return the product, is that right?
[00:50:51] <[itchyjunk]> i'm also trying to learn code formatting and such. i was told the first function formatting is okay
[00:50:58] <[itchyjunk]> i was trying to mirror that formatting a bit
[00:51:03] <[itchyjunk]> yes, that is right
[00:51:24] <[itchyjunk]> i saw it as a challange in code advent website . its in of of the links i followed from the tutorial
[00:51:30] <edgar-rft> I'll try myself now, might take some minutes...
[00:52:14] <[itchyjunk]> https://adventofcode.com/2020/day/1
[00:52:15] <[itchyjunk]> this one
[00:54:38] <[itchyjunk]> oh right, = is checking if they are equal
[00:54:44] <[itchyjunk]> not setting it
[00:54:51] <[itchyjunk]> thats one error i suppose
[00:59:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:00:29] <edgar-rft> correct, the first two (= ...) forms of the iseq2 function are tests, they don't modify anything
[01:01:27] <edgar-rft> the tricky part is to get the nested iteration right, to test all possible combinations
[01:03:10] <[itchyjunk]> right, i am now trying to use `let ( (assign first element here ) ( assign rest of the list here) ) ) 
[01:03:14] <[itchyjunk]> `
[01:06:38] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:09:23] <[itchyjunk]> https://bpa.st/HIOQ
[01:28:05] <edgar-rft> I think what you want is -> https://bpa.st/CDXA - but it still only comares the sum of the first element + one (of all) elements of the rest but not *all* possible combinations
[01:29:41] <[itchyjunk]> right
[01:29:48] <[itchyjunk]> i would want recursion of some type
[01:30:18] <[itchyjunk]> ah so i was on the right track
[01:30:20] <[itchyjunk]> somewhat
[01:30:30] <[itchyjunk]> right?
[01:31:19] <edgar-rft> you think into the right direction, only the code is still somewhat messy, but that's normal at the beginning :-)
[01:32:15] <[itchyjunk]> my last attempt looks similar
[01:32:16] <[itchyjunk]> https://bpa.st/6LJQ
[01:32:25] <[itchyjunk]> but i still can't load it into sbcl
[01:35:53] <[itchyjunk]> https://bpa.st/OV6A
[01:37:13] *** Quits: sts-q (~sts-q@212.53.219.189) (Ping timeout: 248 seconds)
[01:40:28] <edgar-rft> because it's still the same mess in the "let" bindings like in your paste before :-) 
[01:40:42] <[itchyjunk]> hmmmmmmmm
[01:41:34] *** Joins: sts-q (~sts-q@212.53.219.189)
[01:41:37] <[itchyjunk]> (let ( (var value) (var value) ) ) is the format right?
[01:42:19] <edgar-rft> correct, and what did you write?
[01:43:16] <[itchyjunk]> oh i dont want the rest of the stuffi nside my (let () ) ?
[01:43:24] <[itchyjunk]> i thought i wanted it in there itself
[01:43:27] <[itchyjunk]> maybe that's the issue
[01:45:01] <edgar-rft> the bug is much simpler, you wrote (let ((value variable) (value variable)) ...) insted of (let ((variable value) (variable value)) ...)
[01:45:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:49:28] <[itchyjunk]> ohhhhhhhhhhh
[01:49:32] <[itchyjunk]> didn't even notice that
[01:50:16] *** Joins: ahc (~ahc@121.98.229.241)
[01:53:17] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 258 seconds)
[01:53:18] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:58:26] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:16:29] <[itchyjunk]> oh i works kinda sorts
[02:16:56] <[itchyjunk]> i want it to return 2 things and i need to somehow repeat the process with the shorter list that's missing the first element
[02:23:14] <pjb> [itchyjunk]: just don't put spaces after ( or before )
[02:23:33] <pjb> (let ((var value) (var value)) â€¦)
[02:24:18] <pjb> [itchyjunk]: "i want to pass a list and a value to my function. the function then adds 2 elements of the list and checks if it matches this provided value" which 2 elements of the list does it add?
[02:24:25] <[itchyjunk]> oh okay
[02:24:41] <pjb> (defun my-function (list value) (= value (+ (first list) (second list)))) ; is it good?
[02:24:57] <[itchyjunk]> it's supposed to add any 2 elements. but for now, i started with first element with any other element
[02:25:11] <pjb> ok so you want to test all the combinations.
[02:25:14] <[itchyjunk]> my idea was, if i can then call the function with the new list being the old list minus the first element
[02:25:16] <[itchyjunk]> yes
[02:26:27] <[itchyjunk]> https://adventofcode.com/2020/day/ what i am trying to do is described here in more detail
[02:26:48] <[itchyjunk]> oops
[02:26:59] <[itchyjunk]> https://adventofcode.com/2020/day/1
[02:28:35] <pjb> [itchyjunk]: https://termbin.com/ut7x
[02:30:13] <[itchyjunk]> hmmmmmmmmmmmm
[02:30:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:31:29] <pjb> [itchyjunk]: https://termbin.com/v4el
[02:32:35] <[itchyjunk]> hm why is it returning 36?
[02:38:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:39:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:40:38] <pjb> Yes, it should return (* 4 5) #| --> 20 |# 
[02:42:19] <[itchyjunk]> so is using nil the same as have no consequent?
[02:42:24] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 276 seconds)
[02:42:44] <[itchyjunk]> it says the syntax is (cond (test-1 consequent-1) (test-2) .. ) etc
[02:43:44] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[02:43:49] <[itchyjunk]> so would (cond (test-1 nil)) be the same as (cond (test-1)) ?
[02:44:04] <pjb> [itchyjunk]: correction: https://termbin.com/fq4a
[02:44:22] <pjb> [itchyjunk]: yes, I return nil when there's no solution.
[02:44:35] <pjb> eg no element, or only 1.
[02:44:55] <[itchyjunk]> ahhh
[02:45:09] <pjb> [itchyjunk]: try it: (cond (t nil)) #| --> nil |#    (cond (t)) #| --> t |# 
[02:45:27] <[itchyjunk]> ahh if list is empty or only has one element in it
[02:45:42] <pjb> (cond (42)) #| --> 42 |# 
[02:46:07] <pjb> [itchyjunk]: it's a recursive function and it's called on (rest list) so eventually there won't remain enough elements.
[02:46:52] <[itchyjunk]> when you said try it and wrote that stuff, is that formatted in a way where i read #| as a new line or somesuch?
[02:47:18] <pjb> #| is a comment |#  ; just like this
[02:47:30] <pjb> But #| comments #| can be nested |# and 
[02:47:34] <pjb> stand on several lines |#
[02:48:34] <pjb> (list #| the are also useful |# 'to #| comment stuff inside |# 'expressions) #| --> (to expressions) |# 
[02:56:31] <edgar-rft> Thank you very much, dear internet provider :-(
[02:56:31] <edgar-rft> I was only half an hour away and the french invasion already happened :-)
[02:56:31] <edgar-rft> pjb's code returns 36 because (* value (first list)) returns the *sum* multiplied by the first element, it must be -> https://bpa.st/WDBQ
[02:57:06] <pjb> Yep. as in https://termbin.com/fq4a  we agree.
[02:58:33] <edgar-rft> okay, my crappy internet connection messed everything up :-(
[02:58:55] <edgar-rft> nontheless, thanx to pjb :-)
[03:00:07] <pjb> I have to confess, I use newbies as canaries.  If I make mistakes here, it means it's time for be to go to bed ;-)  Good night!
[03:00:18] <pjb> s/for be/for me/
[03:00:36] <edgar-rft> for bees
[03:05:31] <edgar-rft> bees? honey! yummi...
[03:13:35] <[itchyjunk]> so (cond (test result) ). now where we have
[03:13:47] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:14:13] <[itchyjunk]> (cond ( (member ) ) (multiply stuff as result) )
[03:14:24] <[itchyjunk]> member itself seems to check if members of a list satisfy some conditions
[03:14:36] <[itchyjunk]> but
[03:14:43] <[itchyjunk]> you're using a - function there
[03:14:59] <[itchyjunk]> that part i dont think i understand
[03:16:57] <[itchyjunk]> (- value (first list)) would take the first element of the list and substract value from it right?
[03:17:03] <[itchyjunk]> oh
[03:17:20] <[itchyjunk]> a = b + c => a-b = c
[03:17:26] <[itchyjunk]> okay i think i understand that part
[03:17:58] <[itchyjunk]> value is just local variable 
[03:18:02] <[itchyjunk]> i googled this http://clhs.lisp.se/Body/f_values.htm
[03:18:04] <[itchyjunk]> and confused myself
[03:19:13] <[itchyjunk]> i almost understand it all other than the last part
[03:19:42] <[itchyjunk]> the (t ) part
[03:20:05] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[03:21:38] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:31:31] <edgar-rft> the "value" variable holds the sum, (- value (first list)) subtracts the value of the first list element from the sum
[03:31:32] <edgar-rft> t in the last cond clause is a test that matches everything, the code after t gets executed if no other tests before succeeded, it's like "else" in other programming languages
[03:36:21] <[itchyjunk]> oh so "t" is special as in always true?
[03:36:51] <[itchyjunk]> it checks all conditions before regardless if some matched or not right?
[03:42:10] <edgar-rft> yes, t = always true - the conditions are checked in the order that you write them, but in the last clause the test should be t to have a defined condition for the case that nothing else before matched. Some Common Lisp implementations complain if the last t clause is missing.
[03:51:10] *** Joins: tyson2 (~user@toroon12-3096782363.sdsl.bell.ca)
[03:58:13] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:58:16] <[itchyjunk]> ohhhhh
[03:58:21] <[itchyjunk]> makes sense
[03:58:26] <[itchyjunk]> recursion!
[03:58:46] <[itchyjunk]> i'll try to recreate this tomorrow and see if i can, to see if i understand this
[03:58:51] <[itchyjunk]> interesting stuff!
[04:03:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:21:04] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[04:21:57] *** Quits: tyson2 (~user@toroon12-3096782363.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[04:22:40] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 268 seconds)
[04:32:41] *** Quits: random-nick (~random-ni@87.116.182.190) (Ping timeout: 248 seconds)
[04:35:50] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:36:30] *** Joins: makomo (~makomo@user/makomo)
[04:53:49] *** Joins: derelict (~derelict@user/derelict)
[04:59:28] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[05:02:08] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 268 seconds)
[05:26:24] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 272 seconds)
[05:49:32] *** Quits: beach (~user@2a01:cb19:150:3400:bf91:f21a:87da:7f64) (Read error: Connection reset by peer)
[05:50:22] *** Joins: beach (~user@2a01:cb19:150:3400:2606:4cb6:32f2:ab73)
[05:50:22] *** ChanServ sets mode: +o beach
[06:42:39] *** Quits: sts-q (~sts-q@212.53.219.189) (Ping timeout: 268 seconds)
[06:58:11] *** Joins: sts-q (~sts-q@91.200.108.204)
[07:32:08] *** beach sets mode: -o beach
[08:22:49] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[10:01:23] *** Joins: shka (~herr@109.231.62.239)
[11:20:13] *** Joins: selwyn (~selwyn@user/selwyn)
[12:35:27] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:30] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:55:45] *** Joins: selwyn_ (~selwyn@user/selwyn)
[12:59:14] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 272 seconds)
[13:46:07] *** Joins: makomo (~makomo@user/makomo)
[13:49:08] *** Joins: silasfox (~silasfox@62.159.27.1)
[13:56:05] *** Quits: silasfox (~silasfox@62.159.27.1) (Quit: Connection closed)
[13:58:34] *** Joins: silasfox (~silasfox@62.159.27.1)
[14:04:32] *** Quits: silasfox (~silasfox@62.159.27.1) (Quit: Connection closed)
[14:07:19] *** Joins: silasfox (~silasfox@62.159.27.1)
[15:17:31] *** Joins: random-nick (~random-ni@87.116.177.228)
[15:25:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:36:26] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[16:04:29] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:04:51] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[16:05:15] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:25:40] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[16:49:08] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[17:03:12] *** Joins: selwyn (~selwyn@user/selwyn)
[17:28:56] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:29:37] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:39:21] <Harag> I am getting "internal error 185: NIL; args=NIL" loading quicklisp/setup.lisp
[17:39:40] <Harag> using latest sbcl
[17:40:31] <Harag> is that 185 error an sbcl thing?
[17:50:40] <beach> That looks bad.
[17:52:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:57:19] <Harag> its slowly coming back to me... I think
[17:58:05] <Harag> its google run service that is the culprit if I remember right
[17:59:25] <beach> How can that be?
[18:00:39] <Harag> in your dockerfile you have RUN commands that you use to install stuff etc 
[18:01:03] <Harag> then at the end of your dockerfile you have a CMD which is called when you run the docker
[18:01:19] <Harag> The RUN commands are used during the build phase
[18:02:06] <Harag> turns out the "context" used for RUN and CMD are different
[18:02:30] <Harag> you can see it in small things like the HOME directory is different
[18:02:46] <beach> I'll have to take your word for it.
[18:03:06] <Harag> the frustrating thing is the dockerfile works locally
[18:03:17] <Harag> and then on the google server it goes pair shaped
[18:03:55] <Harag> even more frustratingly the load of setup.lisp works when used in a RUN command but not the final CMD
[18:04:00] <Harag> pffft
[18:06:09] <Harag> that interal error is a posix error if I am right
[18:14:03] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:14:33] <pjb> Harag: any backtrace?
[18:17:57] <Harag> difficult to see from the cloud run logs
[18:18:03] <Harag> (SB-PCL::SORT-METHODS (#<STANDARD-METHOD SB-MOP:SLOT-VALUE-USING-CLASS (SB-PCL::STD-CLASS STANDARD-OBJECT SB-MOP:STANDARD-EFFECTIVE-SLOT-DEFINITION) {1000898663}>) (0 1 2) #<FUNCTION (LAMBDA (SB-PCL::CLASS1 SB-PCL::CLASS2 SB-INT:INDEX) :IN SB-PCL::SORT-APPLICABLE-METHODS) {1004ABFFDB}>)
[18:18:06] <Harag> that is about it
[18:20:32] <Harag> takes 20 minutes to build and deploy the bloody thing... so testing is slow
[18:21:54] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[18:25:35] <pjb> Harag: Try with: (handler-bind (error (lambda (condition) (format *error-output* "~%~A~%" condition) (uiop/image:print-backtrace :stream *error-output* ))) (load #P"~/quicklisp/setup.lisp"))   instead of just: (load #P"~/quicklisp/setup.lisp")
[18:26:15] *** Quits: silasfox (~silasfox@62.159.27.1) (Quit: Connection closed)
[18:50:35] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:03:24] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:04:05] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:11:41] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[19:15:52] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:19:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:41:25] *** Joins: thrig (~thrig@65.113.153.50)
[19:57:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:01:38] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[20:02:08] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:41:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:42:27] *** Joins: retropikel_ (~retropike@83-245-241-195-nat-p.elisa-mobile.fi)
[20:45:18] *** Quits: retropikel (~retropike@2001:999:200:1f35:f194:c1b5:4044:270e) (Ping timeout: 272 seconds)
[20:49:06] *** Quits: retropikel_ (~retropike@83-245-241-195-nat-p.elisa-mobile.fi) (Quit: Leaving)
[20:49:24] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:55:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:24:28] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:25:53] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[21:27:31] *** Joins: dlowe (~dlowe@user/dlowe)
[21:27:39] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Quit: Leaving)
[21:27:54] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[21:32:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:06:50] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:15:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:02:14] *** Joins: lisp123 (~lisp123@45.130.83.200)
[23:02:28] <lisp123> This is a terrible idea, yes: (reverse (cons 'f (reverse '(a b c d e))))?
[23:03:14] <lisp123> Also, us loop the most efficient to endcons non destructively?
[23:05:44] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:08:01] <thrig> seems a long way to write something like (append '(a b c d) '(f))
[23:10:26] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 256 seconds)
[23:10:31] <White_Flame> (sort (cons 'f '(a b c d e)) #"string<)
[23:10:39] <White_Flame> (sort (cons 'f '(a b c d e)) #'string<)
[23:10:39] <lotuseater> or depending what you're doing, then you can use an adjustable vector with vector-push-extend
[23:11:17] <thrig> could you tell me the way to the nuclear vector
[23:11:25] <lotuseater> White_Flame: oh #'string< automatically works with symbols too? :)
[23:11:37] <White_Flame> symbols are string designators, iirc
[23:11:44] <lotuseater> nuclear vector? o_O
[23:12:12] <lotuseater> so that's also why (string symbol) => "symbol" works?
[23:12:24] <White_Flame> yep
[23:12:39] <White_Flame> char, symbol, & string are string designators
[23:12:40] <lotuseater> oh great to know
[23:12:58] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:13:41] <lotuseater> and of course it would be (string 'symbol), the first just with defined (defvar symbol 'symbol)
[23:14:08] <White_Flame> oh wait, I forgot that SORT was destructive.
[23:14:22] <thrig> the leading n is silent
[23:14:24] <lotuseater> lisp123: try (reverse (reverse ...)) on an infinite list ^^
[23:14:31] <lisp123> lol
[23:14:47] <White_Flame> so (sort (copy-list (cons 'f '(a b c d e))) #'string<) for continued safe terrible ideaness
[23:14:49] <lisp123> One of my goals now is to find the most inefficient solutions to problems :)
[23:14:54] <lotuseater> lisp123: that's what compiler macros are for
[23:15:04] <lotuseater> oh hm
[23:16:46] <White_Flame> instructions unclear, made an infinitely nesting (reverse (reverse (reverse ...))) expression on an infinite list, too
[23:22:08] <lotuseater> was kind of a joke, but for serious thinking about :)
[23:22:49] <lotuseater> as reverse of a reverse gets identity
[23:23:17] <thrig> reversing an infinite list is what grad students are for
[23:25:09] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:30:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:42:25] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:43:19] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:50:41] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:56:13] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[23:57:34] *** Joins: dlowe (~dlowe@user/dlowe)
[23:57:54] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
