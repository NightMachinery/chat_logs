[00:02:26] *** Quits: raeda (~raeda@72.49.219.33) (Ping timeout: 256 seconds)
[00:05:54] *** Joins: raeda (~raeda@72.49.219.33)
[00:10:21] *** Quits: tyson2 (~user@70.54.112.49) (Quit: ERC (IRC client for Emacs 27.2))
[00:22:40] *** Joins: Guest57 (~Guest57@202.47.45.215)
[00:23:30] <Guest57> Anyone know a portable way to do C++-style RAII (automatically running some resource-management code of your own when the object is destroyed destroyed) in Common Lisp? A library I can use is fine. I know about finalisers, but afaik they're not in the standard and are an implementation dependent feature... I've also seen stuff using macros and
[00:23:31] <Guest57> unwind-protect, but they only work for "I want this resource to have its clean up code run at the end of the scope/end of the macro", and don't let me stick them in data structures access them from other scopes and have the code in the destructor then finally run when they are destroyed.
[00:25:09] *** Quits: baullrog (~baullrog@pool-96-237-166-123.bstnma.fios.verizon.net) (Quit: Leaving)
[00:26:41] <Guest57> Nevermind, I found this https://common-lisp.net/project/trivial-garbage/ which says it gives a portable way to use finalisers. Don't know how I missed it.
[00:27:29] *** Quits: Guest57 (~Guest57@202.47.45.215) (Quit: Client closed)
[00:34:38] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 272 seconds)
[00:36:48] *** Joins: selwyn (~selwyn@user/selwyn)
[00:37:06] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:5dd8:1cad:310e:98df) (Remote host closed the connection)
[00:42:26] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[00:54:56] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[00:55:46] <Bike> they're gone, but using finalizers for RAII seems wrong. destructors are run at well defined times, unlike finalizers
[01:03:45] <mfiano> and well defined threads :)
[01:04:12] <mfiano> usually resources need to be cleaned on the same thread they were initialized...at least in my limited experience
[01:04:17] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[01:12:29] *** Quits: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:18:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[01:20:39] *** Joins: dsk (~dsk@user/dsk)
[01:29:52] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net)
[01:32:35] <White_Flame> things like (with-open-file ...) are more akin to a RAII scope
[01:33:50] <White_Flame> hmm, but yeah sounds like they wanted a particular end of life handler for an object
[01:34:03] <White_Flame> on the heap
[01:35:24] <pve> I'm curious, can I test whether "pathname" is a directory like this: (string= (directory-namestring pathname) (namestring pathname))
[01:42:19] <White_Flame> uiop:directory-pathname-p
[01:42:53] <White_Flame> or you could check to see if the filename/extension/version is nil, but there might be other edge cases
[01:45:44] <pve> yeah, I'm looking at the uiop one.. was just wondering if comparing directory-namestring to namestring would also work (not going to do it like that though)
[01:46:50] *** Quits: amb007 (~a_bakic@251.107.23.93.rev.sfr.net) (Ping timeout: 272 seconds)
[01:47:41] *** Joins: amb007 (~a_bakic@196.107.23.93.rev.sfr.net)
[01:47:44] <etimmons> If the pathname had a device (as is common on Windows) it wouldn't work
[01:48:35] <pve> ah
[01:49:11] <pve> of course
[02:05:10] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net) (Ping timeout: 246 seconds)
[02:09:25] *** Quits: sp41 (~spal@64.253.214.14) (Quit: leaving)
[02:12:52] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:13:55] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:21:23] *** Joins: lad_ (~lad@user/lad)
[02:21:53] *** Quits: lad (~lad@user/lad) (Remote host closed the connection)
[02:25:57] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[02:27:59] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[02:32:12] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[02:37:55] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[02:38:09] *** Quits: frgo (~frgo@p200300deef181d00cc7de7cfc15bcb31.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:38:36] *** Joins: frgo (~frgo@p200300deef181d00cc7de7cfc15bcb31.dip0.t-ipconnect.de)
[02:41:15] *** Joins: JeromeLon (~JeromeLon@185.204.208.222)
[02:51:56] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[02:54:18] *** Joins: karlosz (~karlosz@router.cloyne.org)
[02:54:28] *** Quits: pve (~pve@87-93-162-91.bb.dnainternet.fi) (Quit: leaving)
[02:56:44] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[03:07:41] *** Quits: rgherdt_ (~rgherdt@ip5f5af43c.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[03:10:03] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 255 seconds)
[03:24:49] *** Joins: Oladon (~olad@98.43.81.226)
[03:25:44] *** Quits: amb007 (~a_bakic@196.107.23.93.rev.sfr.net) (Ping timeout: 265 seconds)
[03:26:01] *** Joins: amb007 (~a_bakic@196.107.23.93.rev.sfr.net)
[03:26:26] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[03:49:53] *** Quits: Alfr (~Alfr@user/alfr) (Killed (copper.libera.chat (Nickname regained by services)))
[03:49:57] *** Joins: Alfr (~Alfr@user/alfr)
[04:03:45] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[04:18:26] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-51.prtc.net)
[04:22:44] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 252 seconds)
[04:24:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[04:26:07] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:27:08] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[04:29:03] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[04:32:29] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:36:48] <aeth> define a with-foo, have the with-foo use an unwind-protect, have the unwind-protect call the method CLEANUP
[04:36:57] <aeth> run within the with-foo
[04:38:47] <moon-child> they said  'I've also seen stuff using macros and unwind-protect, but they only work for "I want this resource to have its clean up code run at the end of the scope/end of the macro", and don't let me stick them in data structures access them from other scopes and have the code in the destructor then finally run when they are destroyed'
[04:39:26] <moon-child> but honestly that just sounds like  'I want to use resources whose lifetimes _need_ to be managed explicitly, but I don't want to bother with managing them explicitly'
[04:39:59] <moon-child> you won't actually solve that problem with finalizers.  You can with with-macros
[04:41:02] <mfiano> Sounds like he was on the wrong path
[04:41:26] <mfiano> They specially wanted to perform resource management when an object was destroyed
[04:41:39] <mfiano> Which could be many cycles later with a finalizer (or not at all)
[04:41:49] <mfiano> specifically*
[04:42:47] * edgar-rft was going the wrong path, that's how he ended up here
[04:43:41] <aeth> moon-child: just move where you manage the lifetime, that's all
[04:44:10] <aeth> CLEANUP can recursively call CLEANUP until it exits the thread, and only the most relevant CLEANUP needs to directly be called inside of the WITH-FOO
[04:44:45] <aeth> and if it's a library instead of an application or framework with a clear object lifetime, then it's up to the caller to manage it correctly
[04:48:29] <aeth> What is important is that it's consistent, which is why I put CLEANUP in my utils, so (potentially) everything I write that needs that pattern can use it (since FOO:CLEANUP isn't BAR:CLEANUP).
[04:49:18] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[04:50:44] *** Joins: igemnace (~ian@user/igemnace)
[04:52:21] <aeth> moon-child: the key is that someone, somewhere has to explicitly call CLEANUP on every resource that defines it (ideally once, but you can guard against it by setting the relevant data to NIL and testing for NIL before continuing)
[05:02:27] <aeth> The key is UNWIND-PROTECT can't be placed into a data structure (which was the issue), so you must have a CLEANUP method that, by convention, is called by the most appropriate UNWIND-PROTECT
[05:03:31] <aeth> Oh, and it must be well-named. Tbh, there probably should be a trivial-cleanup that's literally just (defgeneric cleanup (object))
[05:03:46] <aeth> Because everyone must be using the same CLEANUP, ideally.
[05:07:37] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 245 seconds)
[05:20:44] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[05:22:42] *** Quits: random-nick (~random-ni@87.116.179.136) (Ping timeout: 265 seconds)
[05:30:33] *** Joins: derelict (~derelict@user/derelict)
[05:40:05] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-51.prtc.net) (Quit: Client closed)
[06:12:02] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 255 seconds)
[06:13:23] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 255 seconds)
[06:32:15] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[06:45:24] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net)
[06:48:14] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[06:59:05] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[06:59:50] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[07:10:18] *** Quits: Oladon (~olad@98.43.81.226) (Read error: Connection reset by peer)
[07:23:15] *** Joins: prxq (~quassel@x4db9d87a.dyn.telefonica.de)
[07:26:47] *** Quits: prxq_ (~quassel@x4dbdffbf.dyn.telefonica.de) (Ping timeout: 245 seconds)
[07:28:15] <raeda> Has anyone tried making a macro that produces the inverse of what you wrote? I'm trying to define serialization and deserialization methods at the same time
[07:29:28] <Bike> inverse how?
[07:30:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[07:31:08] <raeda> For serialization, I would encode a field and write n bytes, but for deserialization the method has to read n bytes first and then decode
[07:31:33] <raeda> Same for looking up data in a table and writing it vs reading data and adding it to a table
[07:33:44] <aeth> You could try writing a macro that does both at the same time, if that's what you mean
[07:34:05] <aeth> it'll probably wind up being larger than the rest of your program, though
[07:34:55] <beach> Good morning everyone!
[07:36:30] <raeda> Haha, that's another tradeoff I'm considering: I'm working with ~20 structures, so if the macro is too complex, I might be better off just writing everything manually
[07:37:53] *** Joins: Oladon (~olad@98.43.81.226)
[07:40:59] <moon-child> what's in your structures?  If it's just pod (symbols, lists, numbers, ...), then writing a macro to generate the structure, a serializer, and a deserializer should be pretty straightforward
[07:42:06] <moon-child> well, lists are problematic because of referential transparency, but if you wanted to serialize lists you were signed up for that anyway
[07:44:17] *** Joins: akoana (~ah@user/akoana)
[07:46:06] <aeth> serializing lists in general? not fun. serializing things via lists? just CONS on a tag in front saying what it is to disambiguate
[07:48:15] <beach> PRINT and READ work fine for serializing arbitrary cyclic structures.
[07:48:57] <moon-child> READ is not good for untrusted input
[07:49:37] <beach> Oh, was that part of the requirement?  I missed it.  Sorry.
[07:49:46] * beach is still working on his morning coffee. 
[07:50:18] <moon-child> not specified as such, but it's frequently desirable for (de)serializers, so I thought it was worth pointing out
[08:02:42] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[08:02:57] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[08:05:42] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 255 seconds)
[08:24:47] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[08:33:07] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:34:28] <peterhil> &j #tap
[08:34:33] <peterhil> oops...
[08:35:39] <edgar-rft> nice song
[08:41:56] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:42:09] <peterhil> I was trying to check if there is an active channel for node-tap or tap... But yeah, maybe works as a start for a song... :-)
[08:44:15] <peterhil> Out of curiosity – would :before, :after and :around work as a RAII pattern?
[08:45:28] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[08:49:34] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 265 seconds)
[09:07:52] <recordgroovy> What started the `trivial-genericname` convention?
[09:11:49] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net) (Ping timeout: 246 seconds)
[09:25:41] *** Joins: pve (~pve@37-136-162-70.rev.dnainternet.fi)
[09:34:15] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:47:51] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[09:50:26] *** Joins: treflip (~user@95.79.32.99)
[10:09:21] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net)
[10:10:05] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net) (Client Quit)
[10:10:44] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:13:05] *** Quits: JeromeLon (~JeromeLon@185.204.208.222) (Remote host closed the connection)
[10:14:46] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 272 seconds)
[10:18:28] <shka> peterhil: you can use :around for something like (bt:with-lock-held (lock) (call-next-method))
[10:18:45] <shka> dunno if this counts because you don't actually allocate resources
[10:32:10] *** Joins: rgherdt_ (~rgherdt@ip5f5af43c.dynamic.kabel-deutschland.de)
[10:38:25] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[10:38:41] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[10:42:12] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[10:55:38] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[11:15:06] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[11:17:04] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Remote host closed the connection)
[11:41:08] <pve> Good morning! Is 1 considered a designator for the list (1)?
[11:42:48] <pve> The hyperspec page for REQUIRE says that it takes an optional pathname-list argument, but the examples only use strings.
[11:43:24] <beach> Look in the glossary under "list designator"
[11:44:33] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[11:44:44] <beach> So, yes, a non-nil atom designates a singleton list with that atom as an element.
[11:44:53] *** Quits: frgo (~frgo@p200300deef181d00cc7de7cfc15bcb31.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:44:56] <pve> aha, found it
[11:45:01] <pve> beach: thanks
[11:45:05] <beach> Pleasure.
[11:45:28] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 246 seconds)
[11:59:28] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[12:00:22] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[12:01:14] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:02:50] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[12:03:04] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 272 seconds)
[12:03:13] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:04:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:11:00] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[12:11:12] <lisp123> What is a good data object to use for collecting a set of defstructs, where I want to index / search by one of the slots (a string), such that the strings can repeat themselves
[12:11:30] <lisp123> My mind drawing a blank
[12:11:35] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 255 seconds)
[12:16:09] <lisp123> Looks like lists are the best way?
[12:17:31] <lisp123> Or perhaps I could create a hash table and push duplicates as a list onto the hash table?
[12:29:37] *** Joins: cullsure (~cullsure@pool-96-237-166-123.bstnma.fios.verizon.net)
[12:42:16] <pjb> depending on the actual number of structures.
[12:42:23] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:42:34] <pjb> below about 5-30 structures, a simple list or a-list will be more efficient than a hash-table.
[12:42:40] *** Joins: kakuhen_ (~kakuhen@2600:6c50:103f:f86e:b53b:29a9:7fd:f589)
[12:42:46] *** Quits: kakuhen_ (~kakuhen@2600:6c50:103f:f86e:b53b:29a9:7fd:f589) (Client Quit)
[12:42:58] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 272 seconds)
[12:43:51] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:45:09] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 255 seconds)
[12:45:10] <lisp123> pjb: thanks, it will be in the 100s
[12:46:18] <pjb> then a hash-table should do.
[12:46:35] <lisp123> So my current plan is to build a hash table with the slot (that I will search on) as the key, and to then store all structures with that key as a list in the hash table against that key
[12:46:46] <lisp123> is that what you would do?
[12:49:49] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net)
[12:53:38] <pjb> Yes.
[12:54:13] <pjb> (push object (gethash (get-key object) table '()))
[12:55:09] <pjb> If the keys are string, use (make-hash-table :test 'equal) (or equalp for case insensitive).
[12:56:42] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:58:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 255 seconds)
[12:58:23] *** Lord_of_Life_ is now known as Lord_of_Life
[12:58:32] <lisp123> pjb: thanks <3 :)
[13:14:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:15:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:15:54] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[13:17:25] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:19:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[13:20:26] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[13:23:55] *** Quits: cullsure (~cullsure@pool-96-237-166-123.bstnma.fios.verizon.net) (Quit: Leaving)
[13:37:20] *** Joins: karlosz (~karlosz@router.cloyne.org)
[13:38:05] *** Joins: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it)
[13:39:53] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[13:41:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:44:12] *** Joins: cullsure (~cullsure@pool-96-237-166-123.bstnma.fios.verizon.net)
[13:46:21] *** Joins: Alfr (~Alfr@user/alfr)
[13:50:26] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[13:57:53] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[14:02:45] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[14:08:28] *** Joins: mrSpec (~mrSpec@user/spec)
[14:10:41] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[14:14:57] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:18:15] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[14:24:23] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Ping timeout: 258 seconds)
[14:26:57] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[14:27:12] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[14:28:45] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net) (Quit: Client closed)
[14:33:19] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net)
[14:37:42] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[14:50:10] *** mrSpec is now known as spec
[14:57:50] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[15:00:09] *** Quits: thonkpod (~thonkpod@user/thonkpod) (Ping timeout: 255 seconds)
[15:10:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:13:57] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[15:18:25] *** Joins: selwyn (~selwyn@user/selwyn)
[15:20:28] *** Joins: Th30n (~Th30n@cpe-94-253-167-200.zg.cable.xnet.hr)
[15:31:54] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 252 seconds)
[15:48:05] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[15:48:22] *** Joins: dsk (~dsk@user/dsk)
[15:48:43] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net) (Ping timeout: 246 seconds)
[15:52:24] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[16:00:28] *** Joins: lisp123_ (~lisp123@45.130.83.185)
[16:02:59] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:04:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[16:14:51] *** Joins: tyson2 (~user@70.54.112.49)
[16:18:49] *** Joins: tfb (~tfb@88.98.95.237)
[16:20:59] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[16:22:35] *** Joins: tfb (~tfb@88.98.95.237)
[16:29:12] *** Quits: rgherdt_ (~rgherdt@ip5f5af43c.dynamic.kabel-deutschland.de) (Quit: Leaving)
[16:29:27] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c0b2:37a5:b955:1d27)
[16:32:35] *** Joins: frgo (~frgo@p200300deef181d00c103409d9357a0fc.dip0.t-ipconnect.de)
[16:32:53] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[16:40:30] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[16:41:02] <jmercouris> how to get spinneret to make a closing tag?
[16:41:09] <jmercouris> (spinneret:with-html-string (:P "hello world")) -> "<p>hello world"
[16:41:19] <jmercouris> instead of "<p>hello world</p>"
[16:42:16] <jmercouris> nvm, found it in the issues
[16:42:24] <jmercouris> *close-or-tags-p*
[16:43:02] <jmercouris> sorry, spinneret:*html-style* needs to be tree
[16:44:05] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-21.prtc.net)
[16:44:34] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (#commonlisp)
[16:44:37] <jmercouris> s/tree/:tree
[16:48:33] <elf_fortrez> trie?
[16:49:53] <jmercouris> no, :tree
[16:50:04] <jmercouris> (let ((spinneret:*html-style* :tree)) (spinneret:with-html-string (:P "hello world")))
[16:57:49] <beach> Wow, this is going quite well: https://github.com/s-expressionists/wscl/tree/main/wscl-issues/proposed
[16:57:56] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[16:58:21] *** Joins: clintm (~user@c-73-83-222-156.hsd1.wa.comcast.net)
[17:00:08] <lisp123_> pjb: thanks again for your hash-table code from earlier today, worked a treat and much better than the one I had in mind (if gethash, setf ..., ...)
[17:01:26] <jmercouris> beach: sure looks it
[17:02:18] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c0b2:37a5:b955:1d27) (Ping timeout: 240 seconds)
[17:03:44] <jmercouris> anyone know how to do this transformation with paredit: http://dpaste.com/5MHBQDX3Q ?
[17:05:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:06:06] <pjb> jmercouris: with the cursor after str:concat M-<up>
[17:06:17] <pjb> paredit-splice-sexp-killing-backward
[17:06:24] <jmercouris> ah, I was trying M-r
[17:06:41] <jmercouris> thanks
[17:06:47] <jmercouris> it has been annoying me for a while that one
[17:06:52] <pjb> M-r works only on a number of sexps You could do C-u 2 M-r
[17:06:55] <jmercouris> never knew how to deal with it
[17:06:59] <pjb> But you need to count the sexps.
[17:07:09] <jmercouris> Right, I will just M-up on the parent
[17:07:24] <lisp123> nice
[17:08:51] *** Quits: lisp123_ (~lisp123@45.130.83.185) (Ping timeout: 265 seconds)
[17:09:28] <lisp123> Anyone seen this one before? https://jtra.cz/stuff/lisp/sclr/index.html
[17:09:35] <lisp123> seems cool
[17:16:58] <jmercouris> doesn't seem useful for anyone beyond a very beginner
[17:17:09] <jmercouris> most of us use the CLHS and have it integrated into our Emacs
[17:17:43] <tfb> jmercouris: I agree, but I also think that unless there are beginners there will eventually be no experienced people
[17:18:00] <tfb> and the CLHS is a bit imposing for beginners (I am told)
[17:18:30] <jmercouris> that's true
[17:20:13] <jmercouris> we'll get more beginners, no worries
[17:20:18] <jmercouris> we have them all the time on #nyxt
[17:20:32] <beach> I haven't looked at that link long enough to determine whether it is good or not, but the Common Lisp HyperSpec is not meant for users, but for implementors of Common Lisp systems.  So I have wanted a Common Lisp reference manual for a long time that fills this gap.
[17:20:51] <beach> So maybe the stuff at that link is a good start.
[17:21:04] <jmercouris> ah wait, I though the CLHS was for users
[17:21:13] <jmercouris> I thought the ANSI spec was for implementers
[17:21:22] <jmercouris> no wonder the CLHS appears so terse and features grammars etc
[17:21:28] <beach> jmercouris: Then you would not have inferred that DIGIT-CHAR-P returns NIL.
[17:21:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:21:45] <jmercouris> I see, yes
[17:21:50] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[17:21:56] <beach> jmercouris: the Common Lisp HyperSpec is a HTML version of the standard.
[17:22:09] <beach> s/a/an/ I guess.
[17:22:48] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[17:22:59] <beach> jmercouris: It would be very strange if the PDF version were for implementors and the HTML version of the same text were for users.
[17:24:53] <jmercouris> wait a second they are the /same/ document?
[17:24:55] <jmercouris> I did not know this!
[17:25:04] <jmercouris> AH THAT IS WHY IT IS THE HYPERSPEC
[17:25:09] <jmercouris> it is just the HTML "hypertext"
[17:25:15] <jmercouris> wow, wow...
[17:25:18] <jmercouris> that took a while to get
[17:27:37] *** Quits: tyson2 (~user@70.54.112.49) (Quit: ERC (IRC client for Emacs 27.2))
[17:27:47] <mfiano> beach: re: implementors, not users: not entirely true.
[17:28:09] <beach> OK.
[17:28:13] <mfiano> "It is a language specification aimed at an audience of implementors and knowledgeable programmers."
[17:28:26] <mfiano> clhs 1.1.1
[17:28:26] <specbot> Scope and Purpose: http://www.lispworks.com/reference/HyperSpec/Body/01_aa.htm
[17:28:30] <beach> Thanks.
[17:29:06] <jmercouris> that makes it super surprising then that nobody has written a documentation for users
[17:29:10] <jmercouris> well I guess good enough is, good enough
[17:29:27] <beach> But it is woefully inadequate for a large number of users.
[17:29:38] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[17:30:32] <jmercouris> agreed, but those with the knowhow don't need it
[17:30:35] <jmercouris> and those without the knowhow need it
[17:30:40] <jmercouris> there is a problem
[17:31:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:31:21] *** Joins: Bike (~Glossina@71.69.170.70)
[17:31:21] *** ChanServ sets mode: +o Bike
[17:32:01] <jmercouris> I would say that the cookbook partially fills this gap
[17:32:06] <jmercouris> I think the cookbook is a good resource
[17:33:02] <beach> There are several books meant for users, but there is not anything that I would call a reference manual, other than perhaps that link that I have not examined in detail yet.
[17:33:04] <lisp123> beach: yeah exactly, CLHS is good once you get past that initial learning hurdle, I haven't gone through this one in detail but it seems to be something that may help beginners at the initial stage
[17:33:18] <jmercouris> well, the cookbook is a /reference/ manual
[17:33:21] <jackdaniel> it is a good resource, but it is more a library catalogue (of things considered worth mentioning by the authors)
[17:33:28] <jmercouris> https://lispcookbook.github.io/cl-cookbook/
[17:33:36] <jackdaniel> it is linked in the topic
[17:33:47] <jmercouris> well, just trying to provide context...
[17:34:19] <jmercouris> the cookbook does not cover /everything/ though
[17:34:23] <jmercouris> as daniel pointed out
[17:34:53] <lisp123> jmercouris: cookbook is too detailed for quick questions, basically of the type "how to use _xxx_" - most of the time I google it and I end up either in CLHS, cookbook, tutorialpoint - for more complex items like CLOS, cookbook is great
[17:35:07] <jackdaniel> jmercouris: I believe that it is customary to refer to people on irc by their nicknames (i.e for highlight reasons)
[17:35:13] <mfiano> and some things it covers is wrong or silly.
[17:35:16] <jackdaniel> so please stick to that convention
[17:35:23] <lisp123> CLHS is pretty good too, but that's because I'm passed that beginner level
[17:35:45] <mfiano> For a good quality user reference, the only thing that I can recommend is CLR
[17:35:51] <jmercouris> CLR?
[17:35:53] <mfiano> (if you can't swallow CLHS)
[17:35:54] *** Quits: amk (~amk@176.61.106.150) (Ping timeout: 240 seconds)
[17:35:54] <eta> Common Lisp Recipes?
[17:35:56] <mfiano> Yes
[17:36:46] <jackdaniel> mfiano: fwiw Edmund Weitz was one of the early cl cookbook creators
[17:37:16] <mfiano> Good to know
[17:37:18] <jackdaniel> (and that would explain why the scope of this project and the book seems so similar)
[17:37:46] <jackdaniel> I'm not sure who maintains the project right now, but it certainly looks "fresh" web-wise
[17:37:50] <jackdaniel> and has new content
[17:38:32] <mfiano> I thought it was vindarel, but I could be mistaken.
[17:38:48] <jackdaniel> it is looking at commits
[17:39:32] <mfiano> I admire the effort, and it's something at least, but it could be more helpful I think.
[17:39:46] *** Joins: slyrus_ (~slyrus@135.180.166.51)
[17:39:50] <mfiano> But I should not speak. I do not have time to make it such
[17:40:01] *** Joins: cullsure_ (~cullsure@pool-96-237-166-123.bstnma.fios.verizon.net)
[17:40:02] *** Joins: raeda_ (~raeda@72.49.219.33)
[17:40:49] *** Joins: mercourisj (sid438340@id-438340.stonehaven.irccloud.com)
[17:40:52] <jackdaniel> I don't know this resource well enough to tell; but it looks well and is maintained and that's a good sign that things will likely improve
[17:40:57] <mfiano> Too busy looking for work and trying to take care of family. Haven't even been coding much lately :/
[17:40:57] *** Joins: selwyn_ (~selwyn@user/selwyn)
[17:41:31] <jackdaniel> mfiano: read beating the averages and write a web shop - you'll get rich according to the author :)
[17:41:58] <mercourisj> ...
[17:42:02] <mercourisj> don't do that
[17:42:17] <jackdaniel> speaking of work, I'll be back later (writing a web shop;)
[17:42:35] *** Joins: Th30n1 (~Th30n@cpe-94-253-167-200.zg.cable.xnet.hr)
[17:42:49] *** Joins: Lord_Nightmare2 (Lord_Night@user/lord-nightmare/x-3657113)
[17:43:18] <eta> the cookbook has some good bits, and some dodgy bits
[17:43:24] *** Joins: sndr (~sander@user/sander)
[17:43:30] *** Joins: ChibaPet (~mason@redhat/mason)
[17:43:35] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[17:43:36] <eta> the CLOS explanation (of how before/around/after methods are run) is still my go-to reference
[17:43:45] *** Joins: terrorjack2 (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[17:43:59] <lisp123> jackdaniel: good luck :)
[17:44:10] *** Joins: taichi (~mariari@user/mariari)
[17:44:42] *** Joins: AnimalCl1 (~AnimalCla@208.66.176.26)
[17:45:17] *** Joins: recordgr1ovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[17:45:39] *** Joins: SAL9000_ (~SAL9000@shirakumo/sal9000)
[17:47:21] *** Joins: aeth_ (~aeth@user/aeth)
[17:48:48] *** Quits: Th30n (~Th30n@cpe-94-253-167-200.zg.cable.xnet.hr) (*.net *.split)
[17:48:48] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[17:48:48] *** Quits: cullsure (~cullsure@pool-96-237-166-123.bstnma.fios.verizon.net) (*.net *.split)
[17:48:48] *** Quits: amb007 (~a_bakic@196.107.23.93.rev.sfr.net) (*.net *.split)
[17:48:48] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (*.net *.split)
[17:48:48] *** Quits: raeda (~raeda@72.49.219.33) (*.net *.split)
[17:48:48] *** Quits: shka (~herr@109.231.62.239) (*.net *.split)
[17:48:49] *** Quits: Krystof (~user@81.174.155.115) (*.net *.split)
[17:48:49] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (*.net *.split)
[17:48:49] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (*.net *.split)
[17:48:49] *** Quits: mason (~mason@redhat/mason) (*.net *.split)
[17:48:49] *** Quits: mariari (~mariari@user/mariari) (*.net *.split)
[17:48:49] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[17:48:49] *** Quits: sander (~sander@user/sander) (*.net *.split)
[17:48:49] *** Quits: AnimalClatter (~AnimalCla@208.66.176.26) (*.net *.split)
[17:48:49] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (*.net *.split)
[17:48:49] *** Quits: jmercouris (sid438340@stonehaven.irccloud.com) (*.net *.split)
[17:48:49] *** Quits: slyrus (~slyrus@135.180.166.51) (*.net *.split)
[17:48:49] *** Lord_Nightmare2 is now known as Lord_Nightmare
[17:48:49] *** terrorjack2 is now known as terrorjack
[17:48:50] *** mercourisj is now known as jmercouris
[17:48:52] *** sndr is now known as sander
[17:49:02] *** Joins: amb007 (~a_bakic@196.107.23.93.rev.sfr.net)
[17:51:40] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:54:06] *** Mandus_ is now known as Mandus
[17:55:12] <lisp123> This one always stumps me: Say I have a dotted list (cons 1 2), and then I want to cons ((3 . 4)  (5 . 6)) to it - how does one do it?
[17:55:30] <lisp123> I have been using merge, but its an annoying function to use everytime as I keep having revisit its syntax
[17:55:45] *** Joins: amk (~amk@176.61.106.150)
[17:56:05] <lisp123> ^^ in the above, I want ((3 . 4) (5 . 6) (1 . 2)) but typically I end up with ((3 . 4) (5 . 6) 1 2)
[17:56:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-06-50-101-155-191.dsl.bell.ca)
[17:56:48] <lisp123> I guess I could do 2x reversals, but wondering if there is a better way
[17:57:51] <beach> (append ... (list (cons 1 2)))
[17:58:25] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-21.prtc.net) (Quit: Client closed)
[17:58:58] <lisp123> beach: thanks! that worked
[17:59:25] <beach> But yes, if you are going to do that often, it is better to construct the list in reverse, and then reverse it once at the end.
[17:59:42] <beach> Otherwise you end up with a quadratic algorithm.
[18:00:21] <lisp123> like this? (reverse (acons key datum (reverse list-at-front)))
[18:01:27] <lisp123> or do you mean, earlier on in the code, to create it in the right way so that I don't keep reversing etc
[18:01:40] <pjb> lisp123: (let ((dotted-list '(1 . 2))) (cons '(5 . 6) dotted-list)) #| --> ((5 . 6) 1 . 2) |#
[18:01:43] <beach> Well, you wouldn't do it for a single addition, but if you have a loop where, in each iteration, you could cons to the front in the loop and then call REVERSE or NREVERSE at the end.
[18:02:11] *** Joins: Krystof (~user@81.174.155.115)
[18:02:13] <pjb> lisp123: probably you don't want to have a dotted list. but a list of cons, aka an a-list.
[18:02:25] <pjb> (let ((a-list '((1 . 2)))) (cons '(5 . 6) a-list)) #| --> ((5 . 6) (1 . 2)) |#
[18:02:38] <lisp123> beach: thanks, got it
[18:03:02] <lisp123> pjb: thanks for that one (second one) too
[18:06:21] <jackdaniel> lisp123: alternative is to have access to the last cons in the list and modify it destructively
[18:06:45] <jackdaniel> that's how the collect macro from cmu utils work (it is available in other utility libraries too, i.e cl-collections afair)
[18:07:10] <jackdaniel> (collect (foo) (foo 1) (foo 2) (foo 3)) ;-> (1 2 3)
[18:07:28] <jackdaniel> but the macro foo is dynamically scoped
[18:09:36] <lisp123> jackdaniel: thanks, thats a cool way to do it (incidentally this quesiton came up because I wanted to split up a loop macro and collect for all but the last and then do a custom treatment of the last item)
[18:14:27] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[18:23:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:23:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:28:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[18:31:35] *** Quits: andreyorst (~andreyors@2.92.127.122) (Ping timeout: 252 seconds)
[18:34:23] *** Joins: shka (~herr@109.231.62.239)
[18:38:30] *** Th30n1 is now known as Th30n
[18:40:32] *** Joins: andreyorst (~andreyors@2.92.126.37)
[18:49:54] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-06-50-101-155-191.dsl.bell.ca) (Ping timeout: 240 seconds)
[18:51:08] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[18:57:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:03:50] *** Quits: clintm (~user@c-73-83-222-156.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[19:08:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[19:09:17] *** taichi is now known as mariari
[19:15:57] *** Quits: amb007 (~a_bakic@196.107.23.93.rev.sfr.net) (Ping timeout: 245 seconds)
[19:19:32] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 255 seconds)
[19:21:59] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-4938-dynamic.midco.net)
[19:22:40] <nij-> Hy fellows :) I am compiling a CL system, but it fails when I quickloaded it.
[19:22:52] <nij-> SO it happened at --> (ql:quickload :nyxt)
[19:23:03] <nij-> Here's when the repl emits error: https://bpa.st/LIXA   --- And here is the debugger message: https://bpa.st/MA6A
[19:23:41] <nij-> The complaint is that I have `guix` is not found. But as nyxt should not depend on guix, this shouldn't happen.
[19:26:04] <jackdaniel> preasumbly a bug
[19:26:47] <jackdaniel> i.e someone have assumed that calling (uiop:lunch-program "guix --version") will return 0 when guix is found and errno otherwise
[19:26:54] <nij-> A bug of nyxt? I've searched around but didn't notice.
[19:26:54] <jackdaniel> I'd consult the offending code
[19:26:56] *** Quits: AnimalCl1 (~AnimalCla@208.66.176.26) (Ping timeout: 252 seconds)
[19:27:05] <nij-> Oh or perhaps every nyxt user has guix on their machines lol
[19:27:15] <jackdaniel> beats me
[19:27:28] <jackdaniel> either way source code is the ground truth ,)
[19:28:37] <Bike> https://github.com/atlas-engineer/nyxt/blob/master/source/global.lisp#L67-L75 nyxt is referring to guix, at least
[19:30:07] <jackdaniel> I'm guessing that (sera:resolve-executable …) is expected to return nil when the executable is not found
[19:32:00] <nij-> Oh. I had guix before but uninstalled it with bad practice.
[19:32:10] <jackdaniel> so there you have it
[19:32:18] <nij-> `whereis guix` returned a dead link.
[19:32:25] <nij-> Thanks.
[19:34:56] <nij-> Now this is a less noob issue .. compilation still fails -
[19:35:07] <nij-> ;     illegal terminating character after a colon: #\@ ;       Line: 84, Column: 20, File-Position: 3399 ;       Stream: #<SB-INT:FORM-TRACKING-STREAM for "file /home/jin/.+PLUGS/Local/stow/common-lisp/.quicklisp/local-projects/nyxt/source/renderer-script.lisp" {10044702B3}>
[19:35:24] <nij-> https://github.com/atlas-engineer/nyxt/blob/master/source/renderer-script.lisp#L84  <-- does this seem like a bug?
[19:36:16] *** Joins: amb007 (~a_bakic@162.196.23.93.rev.sfr.net)
[19:36:34] <Bike> seems fine to me
[19:36:39] <Bike> is there a weird readtable in effect?
[19:38:34] <nij-> Ah indeed.. @2020-01-01 ;;=> @2019-12-31T18:00:00.000000-06:00   Lemme see how to disable it (done it a few months ago). Thank you!
[19:39:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:40:36] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[19:44:43] *** Joins: AnimalCl1 (~AnimalCla@208.66.176.26)
[19:45:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:45:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:54:21] *** aeth_ is now known as aeth
[19:57:41] *** Quits: Th30n (~Th30n@cpe-94-253-167-200.zg.cable.xnet.hr) (Quit: WeeChat 3.2)
[19:59:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:59:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:00:44] *** Joins: dsk (~dsk@user/dsk)
[20:04:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[20:12:50] *** Quits: amb007 (~a_bakic@162.196.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[20:14:23] *** Joins: nature (~nature@mail.blazebone.com)
[20:21:52] *** Joins: amb007 (~a_bakic@161.40.205.77.rev.sfr.net)
[20:30:00] *** Quits: amb007 (~a_bakic@161.40.205.77.rev.sfr.net) (Ping timeout: 255 seconds)
[20:32:04] *** Joins: amb007 (~a_bakic@81.198.23.93.rev.sfr.net)
[20:50:05] *** Joins: rogersm (~rogersm@92.59.121.109)
[20:52:06] *** Joins: reb` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[20:55:30] *** Quits: rogersm (~rogersm@92.59.121.109) (Quit: Leaving...)
[20:56:02] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 252 seconds)
[20:59:13] *** Quits: amb007 (~a_bakic@81.198.23.93.rev.sfr.net) (Ping timeout: 258 seconds)
[20:59:52] *** Quits: reb` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 246 seconds)
[21:00:05] *** Joins: reb``` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[21:01:03] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 255 seconds)
[21:02:58] *** Joins: amb007 (~a_bakic@13.197.23.93.rev.sfr.net)
[21:05:02] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:05:09] *** Quits: slyrus_ (~slyrus@135.180.166.51) (Remote host closed the connection)
[21:05:15] *** Joins: tfb (~tfb@88.98.95.237)
[21:05:50] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:06:01] *** Joins: tfb (~tfb@88.98.95.237)
[21:06:37] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:06:50] *** Joins: tfb (~tfb@88.98.95.237)
[21:07:25] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:08:11] *** Joins: tfb (~tfb@88.98.95.237)
[21:08:12] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:08:24] *** Joins: tfb (~tfb@88.98.95.237)
[21:08:42] *** Quits: reb``` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 255 seconds)
[21:08:55] *** Joins: reb````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[21:09:00] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:09:12] *** Joins: tfb (~tfb@88.98.95.237)
[21:09:47] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:09:59] *** Joins: tfb (~tfb@88.98.95.237)
[21:10:19] *** Joins: lotuseater (~user@p200300e787091b00387e7f8a32e5e786.dip0.t-ipconnect.de)
[21:10:35] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:10:47] *** Joins: tfb (~tfb@88.98.95.237)
[21:11:22] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:11:34] *** Joins: tfb (~tfb@88.98.95.237)
[21:12:03] *** Joins: peterhil (~peterhil@mobile-access-bceec8-93.dhcp.inet.fi)
[21:12:10] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:12:22] *** Joins: tfb (~tfb@88.98.95.237)
[21:12:40] <lotuseater> Hi, what could be a good way when I now want beside my SBCL with all other tools (quicklisp, emacs, slime) also CCL parallel in the same way? Using roswell?
[21:12:57] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:13:09] *** Joins: tfb (~tfb@88.98.95.237)
[21:13:21] <jackdaniel> just install ccl, you don't need roswell
[21:13:30] <nij-> What do you mean parallel in the same way?
[21:13:31] <jackdaniel> add (load "~/quicklisp/setup.lisp") in your ~/.cclinit
[21:13:39] <jackdaniel> and you are set I suppose
[21:13:40] <lotuseater> okay I'll try (running still on NixOS)
[21:13:44] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:13:45] <pjb> lotuseater: I use a clall script to evaluate forms in various implementations when I want to compare them. https://github.com/informatimago/bin/blob/master/clall
[21:13:52] <jackdaniel> then in emacs: C-u M-x slime
[21:13:56] <jackdaniel> then you may pick the binary to start slime
[21:13:57] *** Joins: tfb (~tfb@88.98.95.237)
[21:14:15] <lotuseater> that would have been my next question ^^ thx
[21:14:17] <jackdaniel> C-x n in the slime repl switches you between different connections
[21:14:17] <pjb> lotuseater: otherwise, all my rc files just load ~/rc/common.lisp so I have always the same configuration in all the CL implementations I use.
[21:14:28] <pjb> lotuseater: https://github.com/informatimago/rc/
[21:14:32] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:14:32] <lotuseater> pjb: also interesting :)
[21:14:49] <pjb> lotuseater: but beyond that, I don't usually run different implementations in parallel.
[21:14:49] *** Joins: tfb (~tfb@88.98.95.237)
[21:14:53] <nij-> What is LE trying to achieve @@?
[21:14:56] *** Joins: derelict (~derelict@user/derelict)
[21:15:15] <pjb> lotuseater: sometimes you may launch several implementations with C-u M-x slime. That's all.
[21:15:20] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[21:15:33] <lotuseater> nij-: when I write a program and want to get it run in both implementations for sure
[21:16:01] <pjb> lotuseater: well, I use makefiles for that, and select there the implementation I want to use to compile the program.
[21:16:10] <pjb> lotuseater: https://github.com/informatimago/hw
[21:16:33] <lotuseater> okay that would be the step when building the final application
[21:16:39] <pjb> lotuseater: note: the generate.lisp script will call the specific save image function for each implementation.
[21:16:52] *** Quits: reb````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 256 seconds)
[21:16:58] *** Joins: tfb (~tfb@88.98.95.237)
[21:17:10] <pjb> lotuseater: there are also libraries to do that, like cl-launch or trivial-dump-core
[21:17:26] <lotuseater> hehe
[21:18:45] <lotuseater> pjb: Hello World in Haskell :D
[21:20:58] <lotuseater> I also thought about when "shipping out" a standalone application for also Debian or Windows, Docker could help. but I find it weird
[21:21:11] <lotuseater> and don't (want to) understand it
[21:21:14] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[21:21:50] *** Quits: tfb (~tfb@88.98.95.237) (Ping timeout: 258 seconds)
[21:23:28] <pjb> Well, it's based on a virtual machine engine, eg. Virtual Box, or other, so it's all good while it works.
[21:24:34] *** Joins: rogersm (~rogersm@92.59.121.109)
[21:24:38] *** ChibaPet is now known as mason
[21:25:56] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 256 seconds)
[21:26:09] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[21:27:35] <lotuseater> yeah Docker seems to work out for the world :D
[21:28:31] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-4938-dynamic.midco.net) (#commonlisp)
[21:28:57] <lotuseater> jackdaniel: ok I did the editing, and loaded also CCL in my environment and started a new emacs instance, doesn't ask me yet, but I think just a small piece is missing ...
[21:29:00] <shka> docker containers makes sense but there is way to much of extra auto-magic on top of that for my liking
[21:29:08] <shka> like docker compose
[21:30:27] <lotuseater> I think it's my fault now and we must stay offtopic :) shka if you like you can explain what you mean to me in query, would like to know
[21:30:43] <shka> eh, i would rather go offline
[21:30:55] <lotuseater> oh why that?
[21:31:12] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 255 seconds)
[21:31:17] <shka> long, hard working days today and yesterday
[21:31:18] *** Quits: rogersm (~rogersm@92.59.121.109) (Ping timeout: 265 seconds)
[21:31:24] <lotuseater> then ok :) I appreciate your opinion
[21:31:25] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[21:31:45] <lotuseater> then get some rest, food and sleep
[21:31:53] <shka> i will, thanks
[21:32:25] <lotuseater> "Eat, code, sleep, repeat" was on some CCC event on T-Shirts
[21:33:33] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[21:35:30] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 240 seconds)
[21:35:43] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[21:40:39] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 255 seconds)
[21:40:52] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[21:45:20] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 255 seconds)
[21:45:33] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[21:46:28] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-50.prtc.net)
[21:47:02] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-50.prtc.net) (Client Quit)
[21:48:45] *** Joins: tfb (~tfb@88.98.95.237)
[21:49:03] <lotuseater> see you later, thx
[21:49:07] *** Quits: lotuseater (~user@p200300e787091b00387e7f8a32e5e786.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[21:49:50] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 255 seconds)
[21:54:33] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[21:58:35] *** Quits: raeda_ (~raeda@72.49.219.33) (Read error: Connection reset by peer)
[21:58:47] *** Joins: raeda_ (~raeda@72.49.219.33)
[22:00:03] *** Joins: raeda__ (~raeda@72.49.219.33)
[22:00:46] *** Quits: raeda_ (~raeda@72.49.219.33) (Write error: Connection reset by peer)
[22:02:10] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 246 seconds)
[22:02:24] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[22:07:22] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 250 seconds)
[22:12:03] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[22:19:54] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 240 seconds)
[22:20:07] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[22:21:20] *** Joins: shka (~herr@109.231.62.239)
[22:22:30] *** Quits: amb007 (~a_bakic@13.197.23.93.rev.sfr.net) (Ping timeout: 255 seconds)
[22:22:32] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 250 seconds)
[22:22:44] *** Joins: amb007 (~a_bakic@192.105.23.93.rev.sfr.net)
[22:24:18] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 240 seconds)
[22:24:31] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[22:29:06] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 240 seconds)
[22:29:19] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[22:33:56] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 255 seconds)
[22:34:09] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[22:34:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:36:54] *** Quits: amb007 (~a_bakic@192.105.23.93.rev.sfr.net) (Ping timeout: 255 seconds)
[22:37:30] *** Quits: peterhil (~peterhil@mobile-access-bceec8-93.dhcp.inet.fi) (Ping timeout: 268 seconds)
[22:38:19] *** Joins: amb007 (~a_bakic@131.199.23.93.rev.sfr.net)
[22:38:53] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 255 seconds)
[22:39:06] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[22:43:28] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 246 seconds)
[22:43:41] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[22:44:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[22:45:15] *** Quits: amb007 (~a_bakic@131.199.23.93.rev.sfr.net) (Ping timeout: 265 seconds)
[22:45:25] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[22:45:56] *** Joins: amb007 (~a_bakic@172.104.23.93.rev.sfr.net)
[22:48:09] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 255 seconds)
[22:48:22] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[22:50:27] *** Quits: tfb (~tfb@88.98.95.237) (Ping timeout: 268 seconds)
[22:52:39] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 255 seconds)
[22:52:52] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[22:57:24] *** Joins: Oddity (Oddity@user/oddity)
[22:57:36] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 255 seconds)
[22:57:49] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[22:59:24] *** Quits: djuber` (~user@65.79.128.64) (Ping timeout: 255 seconds)
[23:02:18] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:02:31] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[23:07:06] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:07:19] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[23:11:54] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:12:07] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[23:12:12] *** Joins: tfb (~tfb@88.98.95.237)
[23:16:38] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[23:16:42] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:16:55] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[23:17:08] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[23:17:53] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[23:21:30] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:21:37] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:21:43] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[23:21:49] *** Joins: tfb (~tfb@88.98.95.237)
[23:22:24] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:22:37] *** Joins: tfb (~tfb@88.98.95.237)
[23:23:12] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:23:24] *** Joins: tfb (~tfb@88.98.95.237)
[23:23:59] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:24:11] *** Joins: tfb (~tfb@88.98.95.237)
[23:24:47] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:24:59] *** Joins: tfb (~tfb@88.98.95.237)
[23:25:34] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:25:46] *** Joins: tfb (~tfb@88.98.95.237)
[23:26:18] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:26:21] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:26:31] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[23:26:33] *** Joins: tfb (~tfb@88.98.95.237)
[23:27:09] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:27:21] *** Joins: tfb (~tfb@88.98.95.237)
[23:27:56] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:28:08] *** Joins: tfb (~tfb@88.98.95.237)
[23:28:44] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:28:56] *** Joins: tfb (~tfb@88.98.95.237)
[23:29:31] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:29:43] *** Joins: tfb (~tfb@88.98.95.237)
[23:30:18] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:30:31] *** Joins: tfb (~tfb@88.98.95.237)
[23:31:06] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:31:06] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:31:07] *** Joins: derelict (~derelict@user/derelict)
[23:31:18] *** Joins: tfb (~tfb@88.98.95.237)
[23:31:53] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:35:28] *** Joins: tfb (~tfb@88.98.95.237)
[23:35:50] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[23:36:01] *** Joins: cullsure__ (~cullsure@pool-96-237-166-123.bstnma.fios.verizon.net)
[23:36:05] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[23:37:19] *** Quits: amb007 (~a_bakic@172.104.23.93.rev.sfr.net) (Ping timeout: 268 seconds)
[23:38:02] *** Joins: amb007 (~a_bakic@195.106.23.93.rev.sfr.net)
[23:38:41] *** Quits: cullsure_ (~cullsure@pool-96-237-166-123.bstnma.fios.verizon.net) (Ping timeout: 258 seconds)
[23:40:13] *** Quits: tfb (~tfb@88.98.95.237) (Ping timeout: 258 seconds)
[23:40:18] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[23:43:41] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 255 seconds)
[23:43:54] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[23:48:54] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Ping timeout: 255 seconds)
[23:49:07] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com)
[23:50:22] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-1056-afe7-cc74-602c.res6.spectrum.com) (Remote host closed the connection)
[23:52:25] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:55:34] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 246 seconds)
