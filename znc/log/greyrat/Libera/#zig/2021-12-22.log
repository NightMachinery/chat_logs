[00:01:39] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:02:28] <Daimanta> Well, I am mostly printing to stdout so i cannot really use the superfluous characters.
[00:03:34] <Daimanta> I can image that the compiler will recognize that the statement only will be run once and optimize accordingly. In the end it´s only a couple of boolean checks but I don´t want to be chewed out for my choice in optimization.
[00:06:29] <ifreund> the only way to know if llvm does that 'optimization' is to check the output
[00:06:59] <ifreund> the CPU's branch predictor probably makes it not very necessary though
[00:07:13] *** Quits: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b) (Ping timeout: 250 seconds)
[00:12:29] <andrewrk> if you're writing to stdout you should probably be buffering
[00:13:36] <andrewrk> and in such case you should be able to call buffered_writer.ensureUnusedCapacity() to guarantee that a flush() does not happen when you write the ", "
[00:14:07] <andrewrk> maybe the buffered writer API is lacking support for this use case, but I think it should support this use case
[00:21:36] <Daimanta> Thanks for the tips :) Hopefully in a couple of months I will be able to deliver a version of coreutils that people can actually use
[00:25:55] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[00:26:25] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[00:27:46] *** Quits: witcher (~witcher@static.74.224.203.116.clients.your-server.de) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[00:29:14] <Arnavion> Daimanta: The other common approach is to prepend ", " for every element except the first
[00:29:53] <Arnavion> Comparison to 0 vs comparison to len - 1 doesn't make much of a difference to matter, but it can look cleaner to the human eye
[00:29:55] *** Joins: amk (~amk@109.255.169.126)
[00:31:50] <Arnavion> s/prepend ", " for/append ", " before/   to be precise
[00:33:29] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:34:55] <Daimanta> Ok, understood. I´ll keep my approach for now but the ideas are useful :)
[00:35:38] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[00:36:57] <pkap> In the Pointers Segment of the docs is the following: `[]T - pointer to runtime-known number of items. ` and it says that these are "closely related to slices". But what is the distinction to slices then? Looks like they are the same?
[00:37:58] <Arnavion> No, it's saying that the first two items are closely related to slices, and the one you quoted is the definition of slices
[00:39:11] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:39:47] <Arnavion> "The two types of pointers are *T that is a pointer to a single element, and [*]T that is a many-pointer to T, and they respectively behave like this. They're closely related to arrays and slices. *[N]T is a pointer to array and behaves like this, and []T is a slice and behaves like this."
[00:41:42] <pkap> Ah ok, thanks Arnavion.
[00:42:55] *** Joins: binarycat (~binarycat@35.24.192.117)
[00:42:57] <pkap> I didn't get this because there is a "Slices" section below and I just assumed that the slices are introduced over there and not in the Pointer section.
[00:43:06] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:43:19] <Arnavion> Yeah the documentation is very out of order in that regard. You can't learn from it by reading top-to-bottom
[00:44:11] <andrewrk> ah I see how that is confusing
[00:44:33] <Arnavion> When I was learning I started with   https://ziglearn.org/   and   https://github.com/ratfactor/ziglings   and just kept the master documentation as a reference on the side to clarify individual things
[00:46:52] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[00:50:12] <pkap> Arnavion: I also read ziglearn. It was a good start, but it didn't answer all the questions I had so I went on to the documentation.
[00:51:52] <pkap> The real problem is that all my dumb questions are not on Stackoverflow like other programming languages :D
[00:52:57] *** Quits: binarycat (~binarycat@35.24.192.117) (Quit: Quit)
[00:53:55] <Arnavion> Searching the internet for zig questions just yields outdated info anyway
[00:54:34] <Arnavion> It's probably better to ask live, in its current stage. And for libstd questions it's very easy to just read the source
[01:02:03] *** Quits: phaleth (~phaleth@user/phaleth) (Quit: phaleth)
[01:02:29] *** Quits: pkap (~pkap@193.32.127.232) (Ping timeout: 256 seconds)
[01:15:55] *** Joins: amk (~amk@109.255.169.126)
[01:16:43] *** Quits: Daimanta (~Daimanta@86-85-205-212.fixed.kpn.net) (Quit: Leaving)
[01:20:26] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[01:22:56] *** Joins: notapenguin (~ryu@179.222.242.20)
[01:26:39] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[01:27:08] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[01:27:24] *** Quits: tekk (~tekk@89.45.224.191) (Remote host closed the connection)
[01:31:02] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:b7fd:fa95:80d6:f41) (Ping timeout: 240 seconds)
[01:32:07] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[01:34:12] *** Quits: frett27 (~frett27@2a01:e0a:58a:6c00:17ac:ecf2:f3ae:7e09) (Ping timeout: 240 seconds)
[01:38:05] *** Quits: notapenguin (~ryu@179.222.242.20) (Quit: WeeChat 3.4)
[01:44:43] *** Quits: rgrinberg (~textual@2806:101e:1:83af:8095:9213:668b:97a8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:47:37] *** Joins: amk (~amk@109.255.169.126)
[01:55:34] *** Joins: notzmv (~zmv@user/notzmv)
[01:55:52] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 256 seconds)
[01:58:28] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[02:00:29] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[02:01:42] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:1bce:ba7c:3f01:c9f3)
[02:02:55] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[02:03:12] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[02:06:58] *** Joins: amk (~amk@109.255.169.126)
[02:12:14] *** Joins: rgrinberg (~textual@187.223.144.204)
[02:14:17] *** Joins: Kingsquee (~Kingsquee@node-1w7jr9pliwyyz961rgalap9wr.ipv6.telus.net)
[02:21:54] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[02:22:30] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 256 seconds)
[02:23:55] *** Joins: rgrinberg (~textual@187.223.248.37)
[02:29:37] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 240 seconds)
[02:29:41] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[02:32:37] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[02:34:57] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[02:41:32] *** Joins: rgrinberg (~textual@187.223.248.37)
[02:43:34] *** Joins: mikolajw (~mikolajtc@2001:470:69fc:105::3b02)
[02:46:18] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 256 seconds)
[02:52:44] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[02:53:14] *** Joins: Colt (~Colt@user/colt)
[02:58:18] *** Joins: rgrinberg (~textual@187.223.144.204)
[02:59:24] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[02:59:50] *** Joins: Colt (~Colt@user/colt)
[03:08:17] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 240 seconds)
[03:13:04] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[03:24:37] *** Quits: lumo_e (~enrico@93-40-14-151.ip36.fastwebnet.it) (Ping timeout: 240 seconds)
[03:35:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[03:36:22] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[03:36:49] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[03:44:17] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[03:46:12] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:1bce:ba7c:3f01:c9f3) (Ping timeout: 268 seconds)
[03:51:36] *** Joins: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com)
[04:14:43] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[04:19:17] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[04:21:44] *** Joins: livoreno (~livoreno@user/notzmv)
[04:31:07] *** Quits: lovekr08 (~lovekr08@171.144.93.209.dyn.plus.net) (Ping timeout: 250 seconds)
[04:34:04] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:157f:fad:702e:d7a)
[04:34:37] *** Quits: ur5us_ (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7) (Ping timeout: 240 seconds)
[04:37:03] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[04:37:33] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[04:57:45] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[04:58:11] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:07:29] *** Quits: boardwalk194 (~boardwalk@136.49.88.66) (Quit: The Lounge - https://thelounge.chat)
[05:13:53] *** Joins: boardwalk (~boardwalk@2605:a601:aac3:100:d79d:f26c:e1a4:eedd)
[05:19:33] *** Joins: ur5us_ (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7)
[05:37:47] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[05:38:18] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[05:45:48] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:56:33] <yrashk> are we far away from being able to get around " error: function prototype may not have inferred error set"? I am trying to declare a type like ` const RetFn = fn (*S) !Ret;`
[05:57:19] <yrashk> trying to fix an issue on my live coding session (https://twitter.com/yrashk/status/1473443875553705986)
[06:01:02] <andrewrk> you'll always need an explicit error set on function prototypes. only function definitions can have inferred error sets
[06:01:32] <andrewrk> you could consider using `anyerror` if it simplifies things
[06:02:39] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[06:03:06] <yrashk> @andrewrk yes, it does! thank you! livestream unstuck :)
[06:03:17] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[06:23:54] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[06:25:36] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[06:38:31] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[06:39:16] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[06:57:20] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[06:58:38] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[07:22:27] *** Quits: moog (~moog@107.126.53.64) (Remote host closed the connection)
[07:22:57] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[07:31:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:36:57] *** Quits: frmdstryr (~jrm@172.58.203.79) (Ping timeout: 240 seconds)
[07:39:30] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[07:39:48] *** Joins: xd1le (~xd1le@user/xd1le)
[07:40:03] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[07:44:37] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[07:45:09] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[07:47:47] *** Joins: notzmv (~zmv@user/notzmv)
[07:49:27] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:08:43] *** Joins: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe)
[08:25:57] *** Quits: ur5us_ (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7) (Ping timeout: 240 seconds)
[08:30:41] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[09:24:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[09:33:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[09:42:46] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[09:43:05] *** Joins: phaleth (~phaleth@user/phaleth)
[09:43:25] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[09:55:39] *** Parts: kandinski (~kandinski@li1061-11.members.linode.com) ()
[10:43:39] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[10:44:10] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[11:02:46] *** Joins: ur5us_ (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6)
[11:10:30] *** Joins: ewintr (~ewintr@46.23.91.175)
[11:44:23] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[11:44:50] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[12:05:57] *** Quits: ur5us_ (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6) (Ping timeout: 240 seconds)
[12:15:52] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:33:57] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[12:38:13] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:39:24] *** Quits: anthon (~Thunderbi@p2e52aa21.dip0.t-ipconnect.de) (Quit: anthon)
[12:45:04] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[12:45:28] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[13:01:45] *** Joins: anthon (~Thunderbi@p2e52aa21.dip0.t-ipconnect.de)
[13:18:56] *** Joins: pkap (~pkap@193.32.127.226)
[13:20:08] *** Quits: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:42:54] <motiejus> if I am bisecting a bug in zig compiler on a C++ codebase (protoc), do I have to fully rebuild the codebase (protoc) on every bisect of zig?
[13:43:15] <motiejus> i.e. is it OK if some of the files are used by the previous compiler version?
[13:43:39] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[13:43:49] <motiejus> (in case it's unclear, I am referring to `zig cc` and `zig c++`)
[13:43:59] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[13:45:41] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[13:46:05] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[13:48:02] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[13:48:22] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[13:50:03] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[13:50:22] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[13:52:03] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[13:52:15] <Franciman> motiejus: what if the bug is in zig cc/c++ ?
[13:52:22] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[13:52:23] <Franciman> is it possible?
[13:53:00] <motiejus> not sure if I understand the question; looks like 0.9.0-dev.1968+ff93486d0 is fine, but 0.9.0 is not, so I am bisecting
[13:54:40] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[13:55:00] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[13:58:48] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[13:59:08] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:01:45] <motiejus> the question is whether I should wipe the build cache of protoc; obviously the bisect step takes much longer than bisection step
[14:04:10] *** Quits: Kingsquee (~Kingsquee@node-1w7jr9pliwyyz961rgalap9wr.ipv6.telus.net) ()
[14:07:18] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:07:37] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:12:11] <motiejus> i.e. the bisect step takes much longer with a cold cache than with a warm one. I am doing full rebuilds of both zig and protoc just in case
[14:13:52] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:14:12] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:15:53] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:16:12] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:17:53] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:18:12] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:19:53] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:20:12] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:21:53] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:22:12] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:23:53] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:24:12] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:25:53] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:26:12] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:30:39] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[14:32:19] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:32:39] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:34:20] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:34:39] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:36:20] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:36:39] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:38:20] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:38:39] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:40:20] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:40:38] <Arnavion> Is there any way to known when a type's fields should be used vs not? Eg ArrayList users are expected to use .items to access it as a slice, BoundedArray users are expected to use .len to get its length, but PriorityQueue users should not access .items because it's not sorted like they might expect it to be
[14:40:39] <motiejus> here we go: https://github.com/ziglang/zig/issues/10386
[14:40:39] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:42:20] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:42:31] <Franciman> motiejus: so it was in zig cc lol
[14:42:34] <Franciman> nice catch
[14:42:39] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:42:44] <Franciman> Arnavion: not currently, afaik
[14:43:53] <Franciman> because there is not technology to hide fields
[14:44:00] <Franciman> so docs would be the only reference
[14:46:24] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[14:46:44] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[14:48:36] <Arnavion> Speaking of PriorityQueue, I'm not sure why its iterator() exists. The iterator yields the elements in the internal tree order rather than sorted order of calling remove(), because it's just a sequential iterator over the underlying slice. Blame says it's been like that since it was first checked in so I assume that is intentional
[14:49:31] <Arnavion> If it really was the intent, it seems to me it would be better off as an iterator for slices in general in std.mem (which is something I've wanted independently anyway) rather than inside PQ/PDQ. And if it was intended to be sorted, then it's definitely not doing that right now
[14:50:17] <Arnavion> Well, I guess I'll open an issue
[14:50:49] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[15:06:49] *** Joins: earnestly (~earnest@user/earnestly)
[15:15:47] <bw> How does zig achieve the “compile error if the function can’t be inlined” behavior, since it seems like llvm says it’s just best-effort? Also, what’s an example of something that can’t be inlined (and thus would emit an error)?
[15:42:49] *** Joins: arkurious (~arkurious@user/arkurious)
[15:48:59] *** Joins: lovekr08 (~lovekr08@195.213.139.6)
[15:54:37] *** Joins: nyah (~nyah@94.6.71.219)
[16:04:18] *** Quits: Bonstra (~Bonstra@val.bonstra.fr.eu.org) (Remote host closed the connection)
[16:14:21] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[16:15:39] *** Joins: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801)
[16:32:50] *** Quits: dbuckley (~dbuckley@2601:182:c77f:c13b:6a24:69d7:c054:80c3) (Read error: Connection reset by peer)
[16:33:04] *** Joins: dbuckley (~dbuckley@2601:182:c77f:c13b:ae1f:6bff:fe6c:d455)
[16:33:21] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:37:23] *** Quits: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566) (Quit: WeeChat 3.3)
[17:15:00] *** Joins: frmdstryr (~jrm@172.58.203.79)
[17:46:27] *** Joins: moog (~moog@107.126.53.224)
[17:51:38] *** Joins: breavyn_ (~breavyn@user/breavyn)
[17:52:36] *** Quits: breavyn (~breavyn@user/breavyn) (Ping timeout: 240 seconds)
[18:13:14] *** Quits: w1ke (~w1ke@user/w1ke) (Remote host closed the connection)
[18:15:02] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[18:16:43] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[18:23:13] <companion_cube> Franciman: why do fields not have a `pub` modifier?
[19:25:16] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[19:25:19] *** Quits: pkap (~pkap@193.32.127.226) (Quit: Client closed)
[19:34:36] *** Joins: pkap (~pkap@193.32.127.226)
[19:44:22] <ifreund> bw: the stage1 compiler doesn't implement that properly current because, as you say, llvm doesn't give a strong enough guarentee
[19:44:39] <ifreund> the stage2 zig compiler implements inlining itself however before passing IR to llvm
[19:45:46] <ifreund> one trivial example would be conflicting noinline/inline annotations
[19:52:10] *** Joins: terminalpusher (~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12)
[20:00:25] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[20:00:50] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[20:26:51] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[20:26:59] *** Joins: chexum_ (~quassel@gateway/tor-sasl/chexum)
[20:39:52] <Franciman> companion_cube: i think there is an open issue about it
[20:40:36] <ifreund> companion_cube, Franciman: they used to but it didn't ever do anything and was removed
[20:41:04] <companion_cube> wdym it didn't do anything?
[20:41:11] <Franciman> ^
[20:41:14] <ifreund> Arnavion: what would a "slice iterator" give you over a for loop?
[20:41:17] *** Quits: frmdstryr (~jrm@172.58.203.79) (Ping timeout: 240 seconds)
[20:41:28] <ifreund> companion_cube: It had 0 effect on the semantics of the language, the compiler ignored it
[20:41:42] <companion_cube> heh
[20:42:14] <ifreund> Arnavion: anyhow, the way to know whether a struct's fields should be directly accessed or not is to read that struct's documentation
[20:42:43] <companion_cube> still convinced  that's _bad_
[20:42:56] <companion_cube> throwing away a lot of safety introduced in other parts of the language
[20:43:02] <ifreund> that's not safety
[20:43:04] <ifreund> https://www.scattered-thoughts.net/writing/coding/
[20:43:04] <Franciman> ifreund: writing it in source code is a way of making sure you present a coherent interface that is enforced by the compiler
[20:43:46] <ifreund> I used to think the way you are thinking right now, but my thoughts on this have evolved over time through writing more and more C/Zig 
[20:44:12] *** Joins: xackus (~xackus@185.15.0.3)
[20:44:30] <companion_cube> if you have 0 abstraction it's a problem, imho
[20:45:11] <Franciman> i mean you can argue that yes, in order to learn and use an interface you have to read the documentation
[20:45:14] <ifreund> most recent rejected "private fields" proposal: https://github.com/ziglang/zig/issues/9909#issuecomment-942686366
[20:45:35] <companion_cube> if you have 0 encapsulation, there is no interface
[20:45:38] <companion_cube> only implementations :p
[20:45:41] <Franciman> but what about doing refactoring and changing things?
[20:45:54] <Franciman> in your experience, ifreund, is it irrelevant?
[20:46:27] <Franciman> sorry if this seems polemic, I just can't write in english xd. I want to ask opinions
[20:46:32] <Franciman> not arguing
[20:46:38] <ifreund> companion_cube: encapsulation doesn't need to be enforced by the compiler, just write code that makes sense
[20:46:48] <companion_cube> that's assuming programmers are infallible
[20:46:52] <companion_cube> why even warn on unused return values
[20:46:55] <companion_cube> just do the right thing
[20:47:03] <companion_cube> why have defer? just do the right thing
[20:47:04] <Franciman> yeah i kind of like the compiler to help me, too
[20:47:15] <companion_cube> why have `?`? just do the right thing
[20:47:33] <earnestly> This is ADa
[20:47:44] <ikskuh> companion_cube: "#define private public" is used for reasons
[20:48:10] <companion_cube> why even have the GPA try to find leaks? just do the right thing
[20:48:14] <ikskuh> hiding implementation is often doing more damage than it prevents to
[20:48:23] <companion_cube> citation needed
[20:48:30] <companion_cube> I disagree with that 100%
[20:48:31] <ikskuh> "my work life with C++Builder"
[20:48:44] <ikskuh> it has a Type
[20:48:44] <Franciman> i can see where it comes from
[20:48:49] <ikskuh> DynamicArray<T>
[20:48:51] <Franciman> when you screw your interfaces
[20:48:52] <ifreund> I highly suggest reading the post I linked: https://www.scattered-thoughts.net/writing/coding/
[20:48:57] <Franciman> you don't want them lol
[20:49:00] <Franciman> it happens to me a lot
[20:49:15] <ikskuh> DynamicArray<T> doesn't allow me to access the contents as a C array
[20:49:21] <ikskuh> i have to go index-by-index
[20:49:26] <ikskuh> i cannot get a pointer to the first element
[20:49:31] <ikskuh> now what do you do?
[20:49:38] <Franciman> this is just a bad interface
[20:49:40] <Franciman> hat's it
[20:49:42] <Franciman> that's it
[20:49:43] <ikskuh> yes, exactly
[20:49:48] <ikskuh> #define private public
[20:49:55] <ikskuh> foo(array.elements, array.Length);
[20:49:56] <ikskuh> done
[20:49:58] <ikskuh> works
[20:50:05] <companion_cube> ikskuh: now do a hashmap
[20:50:10] <Franciman> so like petite prince, just because one bee bite you, it doesn't mean you don't have to go out 
[20:50:10] <companion_cube> how do you iterate on a hashmap
[20:50:11] <ikskuh> i can suddenly use the thing as an array
[20:50:13] <ikskuh> because it is one
[20:50:21] <companion_cube> what if it's made of several arrays
[20:50:28] <companion_cube> what if it turns out to be faster (which it does)
[20:50:41] <companion_cube> if you have no encapsulation you can't evolve your implementations ever
[20:51:01] <ifreund> now that's just blatently false
[20:51:09] <Franciman> unfortunately i very much like the SICP ideas of wishful thinking, sorry T.T
[20:51:15] <Franciman> but I promise I read your link ifreund 
[20:51:34] <companion_cube> ifreund: well you can if you break user code, of course.
[20:51:51] <Franciman> companion_cube: it's false, indeed, as it's false that you can't get complex systems in assembly
[20:51:53] <ifreund> companion_cube: it all depends on how you define what is public and what isn't 
[20:51:56] <ikskuh> yep
[20:52:20] <ifreund> if I leave a doc comment on my struct's field saying // private API I don't consider changing that a breaking change
[20:52:23] <companion_cube> ifreund: if the compiler lets me access something (let's say, without comptime reflection) then it's public
[20:52:42] <ifreund> companion_cube: read the comment from andrew I linked
[20:52:43] <companion_cube> just like, if the compiler lets me assign `null` to something then it's nullable
[20:52:48] <ifreund> it explicates why that statement is false
[20:53:08] <Franciman> sorry ifreund what comment?
[20:53:12] <Franciman> https://www.scattered-thoughts.net/writing/coding/ <- this?
[20:53:24] <ifreund> https://github.com/ziglang/zig/issues/9909#issuecomment-942686366
[20:53:28] <Franciman> ah ty
[20:53:45] <companion_cube> I don't like the mutex example
[20:54:06] <companion_cube> but then I think it should be `fn with_mutex(…)` with the macro proposal, so…
[20:54:15] <Franciman> i think there is a misunderstanding here
[20:54:17] <ifreund> the compiler lets you write `assert(@sizeOf(Foo) == 42)`
[20:54:22] <companion_cube> any other solution means every single use of unprotected_field is a potential bug
[20:54:22] <Franciman> if you have public and private, it doesn't mean you HAVE TO
[20:54:25] <Franciman> use them
[20:54:35] <companion_cube> ifreund: sizeof is an implementation detail
[20:54:39] <companion_cube> if you rely on it, it's on you
[20:54:42] <ifreund> exactly
[20:54:52] <Franciman> and shooting yourself is possible with other tools too
[20:54:53] <ifreund> my "private" labled fields are the same
[20:54:55] <companion_cube> if it changes I don't think it's a semver breakage
[20:55:09] <Franciman> ifreund: with the difference that you could let the compiler help you enforce it
[20:55:13] <companion_cube> to me private fields are a much much more common occurrence
[20:55:33] <ifreund> Franciman: it's not worth the tradeoffs in language complexity though IMO
[20:55:47] <Franciman> i see
[20:56:01] <Franciman> so you are against PIMPL
[20:56:04] <Franciman> for example
[20:56:08] <companion_cube> `pub` on fields is not a huge complexity, is it?
[20:56:08] <Franciman> ?
[20:56:27] <ifreund> companion_cube: how do you initialize a struct with fields you cannot see?
[20:56:37] <Franciman> with a init
[20:56:38] <companion_cube> with a .init function?
[20:56:44] <Franciman> so you are forced to use a init
[20:56:48] <luuk> ew
[20:56:49] <Franciman> yes abstracting the interface
[20:56:57] <Franciman> requires using functions to access to it
[20:57:03] <companion_cube> I'm not saying every struct needs private fields
[20:57:05] <companion_cube> a lot won't
[20:57:12] <companion_cube> but some, like data structures, really should
[20:57:47] <Franciman> companion_cube: probably i would be ok and totally abstract the struct away
[20:57:50] <Franciman> if it has some private fields
[20:57:53] <Franciman> by not exposing it
[20:57:57] <Franciman> and returning pointers to it
[21:01:05] <companion_cube> is the only way to do that `anyopaque`, though?
[21:01:29] <ikskuh> opaque { } is a thing
[21:01:55] <ikskuh> but this forces you to do allocations 
[21:02:15] <companion_cube> and also loses a lot of type safety, doesn't it?
[21:02:18] <Franciman> when in atlanta, do as atlantans
[21:02:57] <Franciman> are we organizing a LeipZig 2022 in summer?
[21:03:18] <ikskuh> you mean in eastern germany? :D
[21:03:57] <Franciman> we have a lot of name jokes
[21:04:01] <Franciman> ZigQurat
[21:04:49] <Franciman> AmaZig
[21:13:35] *** Quits: moog (~moog@107.126.53.224) (Read error: Connection reset by peer)
[21:14:15] *** Joins: moog (~moog@107.126.53.224)
[21:18:58] <andrewrk> motiejus, re: bisecting. you don't need to wipe the cache as long as you touch CMakeLists.txt to make sure it re-runs the version detection logic (so that `zig version` is unique). you do need to rebuild the compiler in case the logic changes (e.g. glibc.zig)
[21:19:16] <andrewrk> thanks for the bug report btw
[21:22:26] <motiejus> Just touch to update mtime is enough?
[21:22:36] <andrewrk> yes
[21:23:08] <andrewrk> this will cause it to print i.e. "Configuring zig version 0.10.0-dev.36+6fdf7ce0a" which indicates the version was detected from the git revision
[21:23:14] <motiejus> Thanks, will know for my next bisect
[21:23:27] <andrewrk> this string is used as a namespace in the cache to isolate from other versions
[21:24:14] <motiejus> Hm, so that applies both to zig's and the target's (in this case, protoc) cmakelists?
[21:24:25] <motiejus> I assume only the former
[21:24:48] <andrewrk> only zig's
[21:25:18] <Franciman> oh, zig uses cmake?
[21:25:41] <ifreund> to build the stage1 compiler yes
[21:25:52] <Franciman> i handrolled my build system based on make
[21:25:57] <Franciman> and posix shell
[21:26:14] <Franciman> lol
[21:26:14] <ifreund> LLVM doesn't give us much choice wrt using cmake or not
[21:26:31] <Franciman> no sure
[21:26:37] <Franciman> i was just laughing at my stupidity
[21:29:38] * yrashk is trying to figure out an obscure panic (resumed an async function which already returned); I wish I was better equipped to understand where is it actually happening; not sure the stack trace provided is of much help.
[21:32:23] <ikskuh> https://mq32.de/public/80464e5a42554fe8d87bf275e8e8de43389f757e.png
[21:32:35] <ikskuh> li think my qoi encoder is not correct
[21:41:05] <yrashk> I think I was able to isolate the case with the panic. I get this error in  https://gist.github.com/yrashk/ec5edb82b7ee5caae5a5d74fe6143062#file-generator-zig-L341-L342 -- if this async code (lock) is removed, then the test works, otherwise, it crashes with `resumed an async function which already returned`. Would be very thankful for any pointers or ideas on how to figure where is the bug!
[21:41:46] *** Joins: Guest4 (~Guest4@24.98.91.31)
[21:41:55] *** Quits: Guest4 (~Guest4@24.98.91.31) (Client Quit)
[21:42:17] <yrashk> Alternatively, I can turn this hunt into another live coding stream where I will be mostly pulling my hair and staring into the screen :D
[21:54:42] <yrashk> also, running into a situation where compiler segfaults :)
[21:57:42] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[21:57:47] <Arnavion> <ifreund> Arnavion: what would a "slice iterator" give you over a for loop?   < for loops are push. Iterators are pull. Some algorithms are easier to implement with pulling, others with pushing
[21:58:02] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[21:58:49] <ifreund> Arnavion: hmm, in that case I'd just pass around a current index
[21:59:17] <ifreund> iterators only make sense when they do something non trivial IMO
[22:03:05] <Arnavion> Yes, or subslicing, which is how I'm doing it right now. I don't know if I agree with iterators needing to be complex, but in any case that disqualifies the current iterators of PQ and PDQ also
[22:05:40] <ifreund> Arnavion: there is bad code in the std currently. Lots of really good code as well of course, but there hasn't been any major attempt to clean things up yet
[22:05:48] <ifreund> and there won't be until the language is stable
[22:05:54] <Arnavion> Yeah, I know
[22:17:04] *** Joins: frett27 (~frett27@2a01:e0a:58a:6c00:7dff:7f53:c6e5:539)
[22:23:15] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[22:24:27] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:24:55] *** Quits: rb (~augh@theguntretort.com) (Read error: Connection reset by peer)
[22:25:06] *** Joins: rwb (~augh@theguntretort.com)
[22:27:00] *** rwb is now known as rb
[22:27:45] *** Quits: pkap (~pkap@193.32.127.226) (Quit: Client closed)
[22:38:44] *** Quits: terminalpusher (~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12) (Remote host closed the connection)
[22:39:18] *** Joins: terminalpusher (~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12)
[23:03:39] *** Quits: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801) (Quit: WeeChat 3.4)
[23:07:36] *** Joins: livoreno (~livoreno@user/notzmv)
[23:12:16] <terminalpusher> On the GitHub issue tracker, when will they accept new proposals to change the language?
[23:15:18] <ifreund> terminalpusher: when/if they decide that said proposals are a good idea
[23:15:56] <terminalpusher> but they are saying they don't accept new proposals in the first place so I can't even propose it
[23:16:18] <ifreund> terminalpusher: you're welcome to discuss what you think is missing here or in other zig communities
[23:18:23] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[23:18:23] <terminalpusher> Well, I think the octals need to be removed. They are ancient and we should remove them like C# did. We need to stop carrying the octal garbage into every new language.
[23:19:16] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[23:19:17] <terminalpusher> They are extremely niche and specific, niche enough that I don't think they warrant being supported.
[23:19:28] <ifreund> I don't think they're a very complex language feature, supporting them isn't a high cost
[23:19:53] <ifreund> though you're right that I've never used them outside of unix permissions
[23:20:21] <motiejus> Fire to the flame: how about base-any numbers, like in erlang? I've used hex, decimal, octal and binary
[23:20:58] <terminalpusher> ifreund: Yeah, just because the unix people and some other minor users thought it was smart to use them doesn't mean it needs to be a first-class thing in Zig.
[23:21:47] <ifreund> motiejus: hmm, std.fmt.parseInt() at comptime is basically that...
[23:22:02] <terminalpusher> motiejus: great idea. The octals should be removed and you should have to use them through a custom base thing like that
[23:22:53] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[23:23:02] <terminalpusher> Literally just replace the octal literals nobody ever uses with parseInt if you do need them once every 1000 years
[23:23:40] <motiejus> Erlang's syntax is 16#aa, 8#123, 2#1011, you may guess others
[23:23:54] <terminalpusher> great solution
[23:26:17] *** Joins: ur5us_ (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7)
[23:26:37] <terminalpusher> I do wonder what Andrew will have to say about this...
[23:32:15] <andrewrk> motiejus, zig has all 4 of the ones you mentioned: hex, decimal, octal, and binary
[23:32:21] *** Joins: frmdstryr (~jrm@172.58.206.168)
[23:32:58] <andrewrk> I'm pretty happy with status quo. I don't understand the argument against it
[23:33:15] <motiejus> Yeah, never had any use for base-3 or such :)
[23:33:18] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[23:33:40] <motiejus> And I appreciate octal. I type that in at least once every week, though in go
[23:33:41] <ifreund> yeah I'm content with the status quo as well
[23:33:44] <terminalpusher> My argument was that they're very niche and rarely ever used. Thus I don't think are worth supporting.
[23:34:19] <ifreund> terminalpusher: I think that they are used enough that the quite low cost of supporting them is worth it
[23:34:19] <terminalpusher> Especially because you can still have them with in an easy different way (parseInt)
[23:34:40] <terminalpusher> Well you are right, there isn't really a cost to it
[23:38:39] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[23:40:42] *** Joins: Guest3089 (~anon@iskon3223.duo.carnet.hr)
[23:41:58] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[23:50:34] *** Joins: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe)
