[00:00:50] *** Joins: rain3 (~rain3___@2a02:2f09:d10e:8f00:b6a6:e366:58c5:59f1)
[00:01:27] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[00:02:32] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[00:18:06] *** Joins: morganw (~user@80.225.24.132)
[00:21:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[00:36:16] *** Joins: Oddity (~Oddity@user/oddity)
[00:37:49] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:39:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[00:40:33] *** Lord_of_Life_ is now known as Lord_of_Life
[00:43:16] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[00:44:43] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[00:45:30] *** Joins: X-Scale` (~ARM@46.50.5.24)
[00:45:48] *** X-Scale` is now known as X-Scale
[00:49:27] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[00:51:02] *** Joins: aeth_ (~aeth@user/aeth)
[00:51:08] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[00:51:13] *** aeth_ is now known as aeth
[00:51:44] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:04:30] *** Quits: yewscion (~yewscion@72-21-196-66.amazon.com) (Ping timeout: 252 seconds)
[01:13:12] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:25:24] *** Quits: rain3 (~rain3___@2a02:2f09:d10e:8f00:b6a6:e366:58c5:59f1) (Ping timeout: 240 seconds)
[01:30:49] <Krystof> any language lawyers around?
[01:32:05] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 250 seconds)
[01:32:43] <pjb> Krystof: ask in #languagelawyersstatus
[01:32:45] <Bicyclidine> what's up
[01:33:57] <Krystof> I am intrigued by the `initial-final` grammar entry in loop's grammar
[01:34:20] <Krystof> specifically, that it is a production of `variable-clause`
[01:35:07] *** Joins: Bike61 (~Bike@152.7.255.196)
[01:35:08] <Krystof> as I read it, (let ((x 2)) (loop initially (setq x 3) with y = x repeat 1 sum y)) is well-defined but (I think surprisingly) returns 2
[01:36:22] <pjb> Yes.
[01:36:51] <pjb> Now of course, nothing prevents you to write (let ((x 2)) (loop with y = x initially (setq x 3) repeat 1 sum y)) #| --> 2 |#
[01:37:09] <Bike61> because initially clauses take place after initial with bindings... right
[01:37:25] *** Quits: Bicyclidine (~Bike@152.7.255.198) (Ping timeout: 240 seconds)
[01:37:25] <Krystof> as I read it, (let ((x 2)) (loop initially (Setq x 3) for y = x repeat 1 sum y)) is also well-defined but returns 3
[01:37:56] <Bike61> really?
[01:38:08] <Bike61> cos 6.1.7.2 says "The initially construct causes the supplied compound-forms to be evaluated in the loop prologue, which precedes all loop code except for initial settings supplied by constructs with, for, or as." which makes it sound like it should still be 2
[01:38:08] <pjb> Krystof: the syntax specifies at what position in what order you can write the clause. But the order in which the clauses are interpreted is specified elsewhere.
[01:38:54] *** Joins: igemnace (~ian@user/igemnace)
[01:39:09] <Krystof> Bike61: right!  But the initial binding of an iteration variable can't be the first value of that variable, because that first value might not exist
[01:39:59] <Krystof> pjb: yes, but I'm trying to figure out whether this free positioning of initially-finally clauses is intended, makes sense to anyone, is error-prone...
[01:40:17] <Bike61> i've never actually had occasion to use initially, so i don't have a good idea of where you'd want it
[01:41:10] <pjb> Well, it's better to order them as they are evaluated. But it's not always possible.
[01:41:21] <Krystof> Bike61: I am less certain about the well-definedness of the `for` variant, but implementations I just tried are surprisingly in agreement
[01:41:57] <Krystof> "Stepping assignments are made in the loop body before any other forms are evaluated in the body."
[01:42:32] <Bike61> I don't follow what you said about the initial binding. The initial binding of a "for" variable should only be able to refer to previous for/with clause bindings or outside bindings, so why couldn't the value exist
[01:42:39] *** Quits: cage (~cage@dynamic-adsl-94-34-56-60.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:42:56] <Krystof> so: in the `for` variant, y is initialized to something arbitrary, x is set to 3, y is stepped to x (as the earliest thing in the loop body)
[01:43:04] <Krystof> Bike61: for example `for x in nil`
[01:44:01] <Bike61> ah. hm.
[01:44:02] *** Quits: amb007 (~a_bakic@157.145.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[01:44:54] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[01:50:42] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[01:52:09] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:59:26] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[02:12:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:15:06] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[02:17:24] *** Joins: ebrasca (~user@librepanther.com)
[02:19:24] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:23:34] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:388a:204e:496c:c856)
[02:24:08] *** Joins: rgherdt__ (~rgherdt@port-92-195-30-153.dynamic.as20676.net)
[02:27:00] *** Quits: rgherdt_ (~rgherdt@port-92-195-30-153.dynamic.as20676.net) (Ping timeout: 252 seconds)
[02:30:54] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[02:31:16] *** Quits: Bike61 (~Bike@152.7.255.196) (Quit: Connection closed)
[02:33:45] <dbotton> Is there a known reason why handle-case doesn't have an implied progn instead of just an expression?
[02:38:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[02:40:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:42:22] *** Quits: rgherdt__ (~rgherdt@port-92-195-30-153.dynamic.as20676.net) (Quit: Leaving)
[02:42:36] *** Joins: rgherdt (~rgherdt@port-92-195-30-153.dynamic.as20676.net)
[02:44:18] *** Joins: unyu (~pyon@user/pyon)
[02:47:59] <Krystof> with an implicit progn, where would the handler clauses go?
[02:47:59] *** Quits: morganw (~user@80.225.24.132) (Read error: Connection reset by peer)
[02:55:09] <dbotton> ok, so I found the answer I believe and has to do with restarts, phoe if around perhaps could confirm
[02:55:20] <dbotton> using the following example
[02:55:29] <dbotton> https://www.irccloud.com/pastebin/t4AqLcpO/
[02:56:28] <dbotton> If I choose not to abort,  the entire expression is re-evaluated
[02:56:37] <dbotton> ie I choose "retry"
[02:57:52] <dbotton> ie from 0 not from where I left off
[02:57:53] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 256 seconds)
[03:03:20] <dbotton> an implied progn would certainly express the wrong idea, that the conditions are for each of the forms in the progn.
[03:06:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[03:08:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:12:35] <dbotton> Krystof the handler clauses would go where they are now, no change
[03:16:31] *** Quits: bru (~bru@static-176-185-142-75.ftth.abo.bbox.fr) (Ping timeout: 260 seconds)
[03:22:01] *** Quits: wacki (~wacki@87.122.82.122) (Quit: Leaving.)
[03:22:37] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[03:23:45] <Mrtn[m]> Some people still didn't make the transition from FreeNODE I guess.
[03:26:55] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[03:27:00] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 268 seconds)
[03:27:29] <Krystof> dbotton: how do you distinguish a handler clause from an expression to evaluate?  in `(handler-case (foo () "bar") (bar () "baz"))` with an implicit progn, how do you tell where the expressions stop and the handler clauses start?
[03:30:06] <dbotton> I see what you mean
[03:37:25] *** Joins: pillton (~user@14-203-196-37.static.tpgi.com.au)
[03:48:05] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:388a:204e:496c:c856) (Remote host closed the connection)
[03:53:24] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 240 seconds)
[03:56:17] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[03:56:22] <_death> dbotton: in your paste, if you wish to be able to retry a particular iteration, you need code that sets up a restart each time.. like (dotimes (i 10) (loop (restart-case (if (< (random 1.0) 0.5) (error "Iteration ~D failed" i) (return 'ok)) (try-again () :report "Try again"))))
[03:57:38] *** Quits: Jach (~Jach@2601:600:8600:94:feb2:bfe0:bb3a:ea8d) (Remote host closed the connection)
[03:57:56] *** Joins: Jach (~Jach@2601:600:8600:94:feb2:bfe0:bb3a:ea8d)
[03:57:56] <_death> of course, you can abstract this pattern into a with-retry-restart macro.. similarly, it may make sense to abstract a handler-case into a macro that does set up an implicit progn
[04:00:28] <_death> note to that invoke a restart you should use handler-bind, not handler-case
[04:02:59] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:14:08] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[04:15:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[04:15:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:16:37] *** Joins: Everything (~Everythin@37.115.210.35)
[04:19:46] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:23:05] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[04:23:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[04:24:50] *** Joins: igemnace (~ian@user/igemnace)
[04:25:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:27:20] <dbotton> Appreciated
[04:28:29] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[04:30:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[04:30:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[04:37:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[04:47:23] *** Joins: igemnace (~ian@user/igemnace)
[04:55:26] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[04:55:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[04:55:56] *** Joins: Alfr (~Alfr@user/alfr)
[04:57:29] *** Quits: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com) (Remote host closed the connection)
[05:24:13] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:31:19] *** Joins: zacque (~zacque@1.32.90.32)
[05:32:53] *** Joins: unixlisp (~unixlisp@111.37.114.195)
[05:34:17] *** Joins: epony (epony@user/epony)
[05:36:47] <unixlisp> scymtym: I checked the log, thanks for the reply. For me, the old beirc donot work (there is fatal bug).
[05:36:47] <Colleen> unixlisp: scymtym said 14 hours, 23 minutes ago: it is unfinished and unpublished. if you just want to get an idea of what it will be like, i can post a screenshot later
[05:40:31] <unixlisp> I hope the new beirc is stable and reliable, not necessary feature rich, but usable.
[05:40:45] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:45:23] *** Parts: Everything (~Everythin@37.115.210.35) ()
[05:47:52] <dbotton> I have neem trying different things, but can't figure how to access the report string from a define-condition in a handler-case
[05:48:12] <dbotton> https://www.irccloud.com/pastebin/hqQleRsR/
[05:48:47] <dbotton> it seems from clhs that this should do it
[05:49:15] <dbotton> but does not
[05:53:43] <pillton> Try binding *print-escape* to NIL.
[05:54:48] * pillton is now trying to figure out if T is a valid stream argument for PRINT-OBJECT.
[05:56:10] <_death> you shouldn't call print-object anyway.. instead you can princ or format
[05:56:29] *** Joins: akoana (~ah@user/akoana)
[05:56:36] <sm2n> is there a way to have a lexically scoped method a la flet?
[06:00:06] <_death> not in CL.. there was a WITH-ADDED-METHODS but it didn't survive
[06:03:23] *** Joins: brocolis (~chatzilla@user/brocc)
[06:07:28] <dbotton> so if you do a defmethod inside of a lexical scope, I know works, but those methods or top-level?
[06:09:38] <_death> according to http://clhs.lisp.se/Issues/iss181_w.htm with-added-methods didn't allow extending a global gf
[06:10:54] <_death> dbotton: defmethod affects the global gf.. that it can refer to some lexical environment is beside the point
[06:11:26] <dbotton> ok
[06:12:36] *** Quits: raeda (~raeda@74.215.153.92) (Ping timeout: 240 seconds)
[06:14:58] <_death> you could have some operator that does add-method/remove-method, I guess.. but it would affect other threads for instance
[06:17:16] *** Joins: raeda (~raeda@74.215.153.92)
[06:18:44] <dbotton> princ worked perfect (and so did *print-escape* if using (*standard-output*))
[06:21:02] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 240 seconds)
[06:21:28] <_death> sm2n: but maybe what you're really after can be found in, say, contextl
[06:26:37] <zacque> Hi, can `format` be used to pretty print a list recursively?
[06:27:49] <zacque> Erm... I meant whether the format directives powerful enough to pretty print an arbitrary nested list
[06:28:58] <zacque> E.g. print '(a b c) or '(a b (c d e) ((f))) into some format like back to itself "(a b c)" and "(a b (c d e) ((f)))".
[06:29:42] <zacque> Or do I need to define a custom function to traverse and print the list?
[06:30:05] <_death> (format t "~S" '(a b (c d e) ((f))))
[06:31:10] <zacque> _death: Lol, that only works for the very specific example given
[06:31:47] <zacque> What if I want something like "(a,b,c)" and "(a,b,(c,d,e),((f)))"?
[06:33:46] <_death> it supports iteration with ~{ and can interpret more control strings using ~? but it wouldn't be great to use it for that kind of job
[06:34:13] *** Joins: Posterdati (~posterdat@user/Posterdati)
[06:35:11] <_death> instead you can use pretty-printer operators (some of which are also available as format directives)
[06:37:14] <zacque> -? seems close but not quite
[06:38:13] <zacque> ~{ can handle a uniform structured list well, but what I've in mind is in fact a tree represented by a list
[06:39:37] <zacque> Oh, maybe my question should be: whether `format` can be used to print out an arbitrary tree represented by a list?
[06:39:38] *** Quits: brocolis (~chatzilla@user/brocc) (Quit: Quit)
[06:40:26] <_death> it probably can but you need to prepare your inputs accordingly, to the point where it's not worth it
[06:41:58] <_death> better to just use plain lisp.. or some operator that's more fit to purpose (as hinted by http://cs-www.cs.yale.edu/homes/dvm/format-stinks.html )
[06:51:04] *** Joins: notzmv (~zmv@user/notzmv)
[06:51:49] *** Joins: Tallund (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca)
[06:56:21] *** Parts: unixlisp (~unixlisp@111.37.114.195) ()
[06:56:47] *** Quits: raeda (~raeda@74.215.153.92) (Ping timeout: 260 seconds)
[07:03:54] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[07:03:54] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[07:04:54] *** Joins: minion (~minion@common-lisp.net)
[07:04:57] *** Joins: specbot (~specbot@common-lisp.net)
[07:05:21] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4.1)
[07:06:10] <zacque> _death: Thanks for the article, but I like the compactness of format's control-string at the moment
[07:07:22] <zacque> An interesting read: https://dl.acm.org/doi/abs/10.1145/1039991.1039996
[07:08:16] <zacque> It's about how one can "pretty-print" an S-exp into a Pascal code using the pretty-printing facilities + format
[07:09:39] <_death> right.. another example is http://norvig.com/ltd/doc/ltd.html
[07:13:13] *** Joins: jack_rabbit (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[07:13:14] *** Quits: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum) (Ping timeout: 260 seconds)
[07:13:31] <zacque> Ha! That's interesting to me
[07:15:38] *** Joins: Inline__ (~Inline@p200300cd470cc200742cdab66a29c7e1.dip0.t-ipconnect.de)
[07:17:49] *** Quits: Inline (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:29:35] *** Joins: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum)
[07:30:27] *** Quits: jack_rabbit (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Ping timeout: 256 seconds)
[07:45:43] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[07:46:58] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[07:51:46] <hashfunc569> is there a simple strategy/idiom for seeing if a hash table contains at least one specific element without having to use MAPHASH. like for example, in pseudo-code: (EXISTS-IN-HASH-TABLE :KEY 'ANY :VALUE #'EVENP MY-HASH-TABLE) => T OR => NIL
[07:56:31] *** Quits: Tallund (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca) (Quit: Client closed)
[07:56:46] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[07:57:33] <_death> you can iterate through a hash-table using loop as well, or with-hash-table-iterator.. but these are all linear scans
[07:58:33] <hashfunc569> _death: ok thanks. i'll probably have to use loop
[07:59:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:12:57] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[08:13:50] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[08:20:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:22:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:29:59] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[08:34:16] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:56:24] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2b3e:70f8:165f:be99) (Ping timeout: 252 seconds)
[08:59:48] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[09:23:05] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:16b7:58d0:d6fd:f99c)
[09:28:55] *** Joins: semz_ (~semz@user/semz)
[09:31:44] *** Quits: semz (~semz@user/semz) (Ping timeout: 260 seconds)
[09:36:53] *** semz_ is now known as semz
[09:41:14] *** Joins: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f)
[10:36:19] *** Joins: pve (~pve@37-136-92-136.rev.dnainternet.fi)
[10:42:32] <Josh_2> Good morning
[10:47:54] *** Joins: unixlisp (~unixlisp@111.37.114.195)
[11:13:17] *** Parts: unixlisp (~unixlisp@111.37.114.195) ()
[11:15:43] *** Joins: shka (~herr@109.231.3.55)
[11:27:01] *** Joins: bru (~bru@static-176-185-142-75.ftth.abo.bbox.fr)
[11:36:06] *** Joins: beach (~user@88.214.180.67)
[11:36:24] <beach> Good morning everyone!
[11:48:07] <zacque> Morning
[11:48:27] <zacque> Does anyone have success using trivia.quasiquote package?
[11:48:42] <zacque> Not sure why following the doc example doesn't work: https://paste.debian.net/1235417/
[12:02:05] *** Joins: lisp123 (~lisp123@143.238.164.103)
[12:15:08] <Josh_2> zacque: Match is part of the trivia package, try (ql:quickload :trivia) (trivia:match ..)
[12:15:39] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[12:22:18] <zacque> Josh_2: Ah, forgot about that :facepalm:
[12:22:23] *** Quits: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:22:51] <zacque> Thanks you
[12:23:07] <zacque> Didn't realise the error is about that as well
[12:23:22] *** Joins: igemnace (~ian@user/igemnace)
[12:26:35] <zacque> I meant using `trivia:match` solves the problem
[12:26:43] *** Quits: OlCe (~user@lfbn-nic-1-262-219.w90-116.abo.wanadoo.fr) (Remote host closed the connection)
[12:30:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[12:39:39] *** Quits: jmiven (~vpm@pham.algeb.re) (Quit: reboot)
[12:40:37] *** Joins: jmiven (~vpm@pham.algeb.re)
[12:43:08] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[12:43:44] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[12:45:02] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[12:46:08] *** Joins: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl)
[12:49:56] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 245 seconds)
[12:50:03] *** Quits: beach (~user@88.214.180.67) (Ping timeout: 260 seconds)
[12:50:03] *** Quits: Brucio-61 (~Brucio-80@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[12:50:31] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[12:56:00] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 272 seconds)
[12:56:55] *** Joins: OlCe (~user@lfbn-nic-1-262-219.w90-116.abo.wanadoo.fr)
[12:56:59] *** Joins: amb007 (~a_bakic@189.145.204.77.rev.sfr.net)
[13:12:33] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:13:14] *** Joins: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:27:53] *** Joins: lisp123 (~lisp123@143.238.164.103)
[13:28:17] *** Joins: s-liao (~s-liao@101.86.164.158)
[13:29:19] *** Joins: s-liao68 (~s-liao@101.86.164.158)
[13:33:07] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[13:34:15] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 256 seconds)
[13:34:36] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[13:36:51] <phoe> when uploading a file via clack, how does one force it to open a character stream rather than a byte stream?
[13:40:24] <stylewarning> are the els22 draft proceedings anywhere?
[13:41:32] <phoe> stylewarning: https://drive.google.com/file/d/1-eCXl56z_zIJE_0WTHStejgRup0ti9YM/view is a link from Jim, and these are preliminary
[13:45:54] <Josh_2> phoe: are you using clack alone or ningle?
[13:48:38] <Josh_2> With ningle you can override the http-body:parse function and that will disable parsing, then you can handle the raw-body yourself
[13:50:01] <stylewarning> phoe: thanks!
[13:51:49] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[13:53:23] <phoe> seems like clack alone
[14:09:28] *** Joins: lisp123 (~lisp123@143.238.164.103)
[14:19:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[14:21:23] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:22:16] *** Joins: nature (~nature@mail.blazebone.com)
[14:29:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:42:22] *** Quits: pillton (~user@14-203-196-37.static.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[14:47:16] *** Joins: notzmv (~zmv@user/notzmv)
[14:49:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[14:56:36] *** Joins: kevingal (~quassel@2001:770:c0:401:102f:4cf0:201c:974a)
[15:05:11] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:08:41] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[15:17:56] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:23:37] *** Quits: s-liao68 (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[15:33:24] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:36:40] *** Joins: razetime (~quassel@117.193.6.156)
[15:58:40] *** Joins: lisp123 (~lisp123@143.238.164.103)
[15:59:40] <antoszka> Guys, anybody bumped into `EFAULT OSICAT-POSIX::%IOCTL-WITH-ARG 14 :EFAULT "Bad address"` when running OSICAT on Apple M1 (trying to run LINEDIT)
[16:00:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:02:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[16:03:51] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 256 seconds)
[16:03:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:18:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[16:19:56] <sm2n> _death: context1? with-added-methods looks like what I wanted, or at least the original intent, apparently. "With-added-methods had the flaw that it did not allow one to extend a global generic function within its dynamic extent, which I believe was the intent of its proposer." <- this is exactly what I want to do
[16:20:16] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:22:04] *** Joins: Maxc4m (~Maxc4m@37.113.239.144)
[16:24:31] *** Quits: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl) (Ping timeout: 245 seconds)
[16:26:42] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:29:13] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[16:29:28] *** Joins: beach (~user@185.92.97.162)
[16:29:56] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[16:30:12] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:16b7:58d0:d6fd:f99c) (Ping timeout: 240 seconds)
[16:33:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[16:33:41] *** Joins: rain3 (~rain3___@2a02:2f09:d10e:8f00:b6a6:e366:58c5:59f1)
[16:35:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:38:33] *** Joins: unixlisp (~unixlisp@111.37.114.195)
[16:39:57] *** Quits: beach (~user@185.92.97.162) (Ping timeout: 240 seconds)
[16:47:47] *** Quits: wmblathe_ (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net) (Quit: Leaving...)
[16:51:56] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[16:53:07] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Client Quit)
[16:59:54] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Quit: Colleen)
[17:05:43] *** Joins: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff)
[17:14:20] *** Quits: Josh_2 (~user@197.185.99.223) (Remote host closed the connection)
[17:14:33] *** Joins: Josh_2 (~user@197.185.99.223)
[17:16:31] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 260 seconds)
[17:18:04] *** Joins: boigahs (~boigahs@167.172.20.249)
[17:18:26] *** Joins: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl)
[17:26:24] *** Joins: s-liao (~s-liao@101.86.164.158)
[17:26:36] *** Parts: unixlisp (~unixlisp@111.37.114.195) ()
[17:27:12] *** Joins: unixlisp (~unixlisp@111.37.114.195)
[17:29:30] *** Joins: Bike (~Glossina@71.69.170.70)
[17:31:29] <Bike> sm2n: https://github.com/pcostanza/contextl lets you give classes more slots and functions more methods within the dynamic extent of a "layer"
[17:32:51] *** Quits: kevingal (~quassel@2001:770:c0:401:102f:4cf0:201c:974a) (Ping timeout: 245 seconds)
[17:34:00] *** Joins: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net)
[17:34:49] *** Parts: unixlisp (~unixlisp@111.37.114.195) ()
[17:36:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:38:06] *** Joins: kevingal (~quassel@149.157.98.192)
[17:38:09] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[17:38:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:47:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:47:32] *** Joins: lisp123 (~lisp123@143.238.164.103)
[17:49:16] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:49:43] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[17:51:37] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 240 seconds)
[17:52:27] *** Quits: rain3 (~rain3___@2a02:2f09:d10e:8f00:b6a6:e366:58c5:59f1) (Ping timeout: 260 seconds)
[17:56:06] *** Quits: Maxc4m (~Maxc4m@37.113.239.144) (Quit: Maxc4m)
[18:24:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:25:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[18:27:07] *** Joins: aeth (~aeth@user/aeth)
[18:28:10] *** Quits: Josh_2 (~user@197.185.99.223) (Remote host closed the connection)
[18:28:26] *** Joins: jimka2001 (uid547915@id-547915.ilkley.irccloud.com)
[18:35:02] *** Quits: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl) (Ping timeout: 260 seconds)
[18:37:12] <dbotton> phoe I have a sample converts the stream to utf-8
[18:37:21] <dbotton> https://www.irccloud.com/pastebin/jlG0qfha/
[18:37:34] <dbotton> sorry wrong paste
[18:37:52] <dbotton> https://www.irccloud.com/pastebin/3KeIV2zh/
[18:40:37] <jimka2001> hey did anyone take a nice picture of porto that I can use (without giving anybody any credit) for the proceedings?   If you have a picture you can give me I just need one more.
[18:40:50] <dbotton> that is for the mutlipart item
[18:42:07] <phoe> dbotton: oh, using a flex stream
[18:42:09] <phoe> I guess that works!
[18:42:13] *** Joins: beach (~user@88.214.180.138)
[18:46:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:48:03] <jimka2001> BTW, I finally found a picture of my own I can use.  Thanks anyone who was trying to find me one.
[18:49:44] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[18:54:14] *** Quits: kevingal (~quassel@149.157.98.192) (Ping timeout: 252 seconds)
[19:01:32] *** Joins: kevingal (~quassel@2001:770:c0:401:c855:7ec4:d3b7:141e)
[19:05:44] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[19:07:12] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[19:07:29] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Quit: karlosz)
[19:08:06] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[19:10:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[19:13:41] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[19:29:31] *** Quits: amb007 (~a_bakic@189.145.204.77.rev.sfr.net) (Ping timeout: 245 seconds)
[19:35:46] *** Joins: lisp123 (~lisp123@143.238.164.103)
[19:36:41] *** Quits: kevingal (~quassel@2001:770:c0:401:c855:7ec4:d3b7:141e) (Ping timeout: 256 seconds)
[19:37:54] *** Joins: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04)
[19:38:27] *** Quits: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04) (Client Quit)
[19:40:26] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 252 seconds)
[19:42:14] *** Joins: cage (~cage@dynamic-adsl-94-34-56-60.clienti.tiscali.it)
[19:43:22] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:966d:f1e8:4bae:826f)
[19:45:57] *** Quits: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[19:46:28] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:48:36] *** Joins: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[19:51:02] *** Joins: trumae (~trumae@2804:431:c7c1:c8d4:ed4a:ec28:5174:c320)
[19:57:26] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:966d:f1e8:4bae:826f) (Ping timeout: 245 seconds)
[19:58:41] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:4042:4584:26e0:bc36)
[20:03:07] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 260 seconds)
[20:04:33] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:48f1:c1ea:bce4:b1d6)
[20:04:44] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[20:04:57] *** Joins: wacki (~wacki@87.122.82.122)
[20:14:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:25:19] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Remote host closed the connection)
[20:27:45] *** Joins: robin_ (~robin@user/terpri)
[20:30:12] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[20:32:48] *** Joins: attila_lendvai (~alendvai@2a02:ab88:7509:f780:ed82:a496:f55:e07b)
[20:34:10] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[20:40:32] *** Quits: trumae (~trumae@2804:431:c7c1:c8d4:ed4a:ec28:5174:c320) (Ping timeout: 268 seconds)
[20:40:42] *** Quits: razetime (~quassel@117.193.6.156) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:40:43] *** Joins: trumae (~trumae@2804:18:863:a2e5:1:0:df2:cd3f)
[20:42:49] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[20:44:58] *** Joins: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl)
[20:47:27] *** Quits: bru (~bru@static-176-185-142-75.ftth.abo.bbox.fr) (Ping timeout: 260 seconds)
[20:52:00] *** Inline__ is now known as Inline
[20:56:05] *** Joins: morganw (~user@80.225.24.132)
[20:56:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[20:57:36] *** Joins: Guest3 (~Guest3@185.145.245.102)
[20:58:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:59:33] *** Joins: kpoeck (~kpoeck@bl18-241-225.dsl.telepac.pt)
[20:59:42] *** Quits: Guest3 (~Guest3@185.145.245.102) (Client Quit)
[21:04:32] *** Joins: rain3 (~rain3___@2a02:2f09:d10e:8f00:b6a6:e366:58c5:59f1)
[21:05:01] *** Joins: jeosol (~jeosol@user/jeosol)
[21:05:39] *** Quits: trumae (~trumae@2804:18:863:a2e5:1:0:df2:cd3f) (Ping timeout: 256 seconds)
[21:06:39] *** Joins: trumae (~trumae@2804:18:84b:d5b:1:0:e27:c90d)
[21:08:05] <sm2n> Bike: thanks!
[21:10:45] *** Quits: Inline (~Inline@p200300cd470cc200742cdab66a29c7e1.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[21:13:54] *** Quits: trumae (~trumae@2804:18:84b:d5b:1:0:e27:c90d) (Read error: Connection reset by peer)
[21:14:48] *** Joins: trumae (~trumae@2804:431:c7c1:c8d4:5c89:60e9:da90:9648)
[21:15:02] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[21:15:03] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:48f1:c1ea:bce4:b1d6) (Ping timeout: 252 seconds)
[21:15:07] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[21:15:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:23:28] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[21:25:46] *** Joins: Inline (~Inline@p200300cd470cc200742cdab66a29c7e1.dip0.t-ipconnect.de)
[21:28:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:29:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:30:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[21:30:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:38:07] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Quit: karlosz)
[21:43:40] *** Joins: treflip (~user@user/treflip)
[21:53:54] *** Joins: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de)
[21:53:54] *** Quits: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de) (Changing host)
[21:53:54] *** Joins: tane (~tane@user/tane)
[22:03:27] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 252 seconds)
[22:03:36] *** Joins: hhdave_ (~hhdave@ip212.ip-193-70-71.eu)
[22:17:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[22:19:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:19:55] *** Quits: kpoeck (~kpoeck@bl18-241-225.dsl.telepac.pt) (Quit: Client closed)
[22:20:52] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[22:34:47] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:41:36] *** Joins: tyson2 (~user@bras-base-toroon0949w-grc-02-142-114-235-113.dsl.bell.ca)
[22:44:07] *** Quits: beach (~user@88.214.180.138) (Ping timeout: 260 seconds)
[22:57:49] *** Joins: kpoeck (~kpoeck@bl18-241-225.dsl.telepac.pt)
[23:00:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[23:02:49] *** Joins: aeth (~aeth@user/aeth)
[23:07:09] *** Quits: kpoeck (~kpoeck@bl18-241-225.dsl.telepac.pt) (Ping timeout: 256 seconds)
[23:07:57] *** Quits: trumae (~trumae@2804:431:c7c1:c8d4:5c89:60e9:da90:9648) (Ping timeout: 240 seconds)
[23:08:46] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[23:09:16] *** Joins: trumae (~trumae@2804:18:84b:d5b:1:0:e27:c90d)
[23:11:11] *** Quits: rain3 (~rain3___@2a02:2f09:d10e:8f00:b6a6:e366:58c5:59f1) (Ping timeout: 260 seconds)
[23:12:15] *** Joins: amb007 (~a_bakic@34.150.22.93.rev.sfr.net)
[23:13:37] *** Quits: trumae (~trumae@2804:18:84b:d5b:1:0:e27:c90d) (Read error: Connection reset by peer)
[23:14:04] *** Joins: trumae (~trumae@2804:431:c7c1:c8d4:5c89:60e9:da90:9648)
[23:23:51] *** Joins: kpoeck (~kpoeck@bl18-241-225.dsl.telepac.pt)
[23:24:37] *** Quits: hhdave_ (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 240 seconds)
[23:48:37] *** Quits: trumae (~trumae@2804:431:c7c1:c8d4:5c89:60e9:da90:9648) (Ping timeout: 268 seconds)
[23:55:37] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[23:59:52] *** Quits: amb007 (~a_bakic@34.150.22.93.rev.sfr.net) (Read error: Connection reset by peer)
