[00:00:05] *** Joins: grooverman_ (~grooverma@177.102.119.40)
[00:02:44] *** Quits: grooverman (~grooverma@177.102.117.95) (Ping timeout: 256 seconds)
[00:07:09] <jfcaron> I'm having trouble with this property-in-a-property question from earlier.  This simplified code has what I am trying: https://bpa.st/YN5Q But when I instantiate `o = OUTPut()` I get `_PULSe object has no attribute 'upper'`.  The upper() call should only happen when onoff is not None, right?
[00:07:41] <jfcaron> I guess the None is a red herring, it's complaining about _PULSe
[00:08:25] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:08:35] <Julian> jfcaron: In general, don't nest classes, there's no real reason to and it just makes things more confusing to interpret
[00:08:54] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:3961:4cf9:16b:5bf0) (Ping timeout: 256 seconds)
[00:09:21] <Julian> But yeah I'm not sure what you're expecting here
[00:09:24] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[00:09:39] <Julian> You're assinging self.PULSe to be an instance of your nested _PULSe class (what's with the bizarre naming?)
[00:09:39] <NeilRG> Can someone explain the right pattern for a library with optional dependencies?
[00:09:48] <Julian> That _PULSe class' instances have no .upper() method
[00:09:50] <NeilRG> try: import... ?
[00:09:57] <Julian> (So your onoff type annotation is a lie)
[00:10:03] <Julian> NeilRG: Are you using setuptools
[00:10:10] <NeilRG> Julian, no, poetry
[00:10:16] <NeilRG> but I mean in the code
[00:10:23] <Julian> NeilRG: Then use its mechanism for declaring them
[00:10:25] <jfcaron> I was expecting to make an object of type OUTPut, then be able to assign values to myoutput.PULSe and myoutput.PULSe.WIDTh
[00:10:25] <NeilRG> I think I know how to specify them in poetry
[00:10:26] <Julian> NeilRG: Oh -- in what sense?
[00:10:31] *** Joins: YoungPotato (~user@155.98.225.49)
[00:10:39] <Julian> NeilRG: Basically put their imports behind try/except ModuleNotFoundError
[00:10:44] <Julian> and then decide what to do when they're not present
[00:10:51] <NeilRG> Julian, like what's the most elegant way to condition on whether that dependency is present?
[00:11:24] <jfcaron> Why is the PULSe.setter receiving a _PULSe object?  I need to be able to set it using a string.
[00:11:28] <Julian> NeilRG: The above -- and then beyond that if that's what you're asking about, the null object pattern is sometimes another thing to know of
[00:11:28] <NeilRG> Julian, okay, and if not found, I define certain symbols.  What about __all__?  can I hide that behind the same try?
[00:11:38] <NeilRG> Julian, what's that?
[00:11:40] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[00:11:50] <Julian> jfcaron: What line do you expect would be the string?
[00:12:01] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Read error: Connection reset by peer)
[00:12:24] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:12:26] <jfcaron> Well in the user code using this class, you'd do myoutput = OUTPut(); myoutput.PULSe = "ON"
[00:12:27] <Julian> NeilRG: https://www.youtube.com/watch?v=9mLK_8hKii8 I think is a video -- but in brief -- what it means is...
[00:13:04] <Julian> NeilRG: If you have some object `Foo` that you use from optionaldependency1, you may find it useful in the case optionaldependency1 is not importable to signal that not by doing `optionaldependency1 = None` and sprinkling checks all over your code
[00:13:23] <NeilRG> Julian, yeah, I understand what you mean
[00:13:26] <NeilRG> I don't need that
[00:13:33] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[00:13:35] <Julian> but rather by defining a NullFoo type (/ object) which looks like a `optionaldependency1.Foo` object but which has methods that all somehow represent "yo I'm not what you think I am here's 0" or whatever the appropriate null object is
[00:13:42] <NeilRG> yup, yup, makes sense
[00:13:55] <NeilRG> I'd ideally like the library to simply not export certain symbols if, e.g., matplotlib isn't installed
[00:13:55] <Julian> Great, well does the previous help then? There's not much more to it than try/except
[00:14:19] <Julian> jfcaron: your line 7 assigns that variable to an instance of type _PULSe
[00:14:20] <NeilRG> my question is what is the right way to edit __all__ conditionally on try, except, or does it just work?
[00:14:23] <Julian> jfcaron: and not a string
[00:14:31] <Julian> NeilRG: Personally I don't bother with __all__.
[00:14:36] <Julian> But yes you can do it in the try/except.
[00:14:39] <NeilRG> Julian, ok, well, I do :)
[00:14:59] <Wooble> jfcaron: if you want a stringlike object that's also a property, you're going to need to implement or pass through the string methods.
[00:15:04] <Julian> jfcaron: Do you see that line 7 will invoke your setter?
[00:15:18] <jfcaron> Yes, but with no argument
[00:15:44] <jfcaron> Oh, should ine 7 just be self.PULSe = None?
[00:15:47] <Julian> jfcaron: What do you mean by with no argument? When you define a property's setter, it is invoked with what you put on the right side of the = sign
[00:16:35] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 268 seconds)
[00:17:12] *** Joins: greedom (~greedom@p200300de6709f9005cd0149c7f40ec82.dip0.t-ipconnect.de)
[00:17:16] <jfcaron> Ok putting None in the assignment on line 7 allows me to instantiate an OUTPut object
[00:17:26] <jfcaron> And I can it ON or OFF as I expect
[00:19:17] <jfcaron> But then myoutput.PULSe.WIDTh doesn't work because it thinks it's a string.
[00:19:35] <Wooble> jfcaron: it *is* a string.
[00:20:30] *** Joins: damonlynch (~ngaio@static-68-235-44-26.cust.tzulo.com)
[00:20:59] *** Joins: GadgetNerd (GadgetNerd@user/gadgetnerd)
[00:21:29] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:21:39] <jfcaron> I don't understand why the setter and getter work when it's a string
[00:21:43] *** Joins: xa0s (~xa0s@mab.sdf.org)
[00:21:54] <jfcaron> Because those user self.PULSe.onoff which shouldn't be defined then.
[00:21:57] <jfcaron> use*
[00:23:03] *** Joins: Nact (~l@2a02:2788:11c4:6e6:ede0:bbc0:a761:9e01)
[00:23:29] <c4017w_> Can someone with Tkinter experience take a look at this scenario? https://bpa.st/RQYA  It freezes when I run it in Python 2
[00:23:55] <grym> c4017w_: (why would you even bother?)
[00:23:55] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[00:24:14] <c4017w_> to work in Python 2? Not by choice
[00:24:33] <c4017w_> have to support old stuff for the time being
[00:25:00] <Yhg1s> c4017w_: it's because you're waiting for Tk events but not running the mainloop.
[00:25:44] <c4017w_> How should I change it? Basically I have multiple threads that might need to create a Tk window
[00:26:01] <c4017w_> I cant marshal them all to a main thread
[00:27:43] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:28:05] *** Joins: Macuser (~Macuser@2600:1003:b453:9b2c:313c:8a78:18dc:1ad9)
[00:30:25] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:3961:4cf9:16b:5bf0)
[00:30:31] *** Quits: VaniaPy (~VaniaPy@46.12.178.58.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[00:31:24] *** Parts: apteryx (~maxim@dsl-10-141-188.b2b2c.ca) ()
[00:31:28] *** Joins: rany_ (~rany@user/rany)
[00:32:15] *** Quits: philectro (~quassel@2a02:2788:1024:671:f437:b1d:594a:60ac) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:32:31] *** Joins: XV8 (~XV8@2601:5cb:c001:50:3422:70c3:45ca:a8b5)
[00:33:02] *** Joins: ericlee (~ericlee@2601:647:4681:3420::7)
[00:33:48] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:33:54] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[00:34:27] *** Quits: rany__ (~rany@user/rany) (Ping timeout: 276 seconds)
[00:35:04] *** Joins: cosimone (~user@93-47-228-207.ip115.fastwebnet.it)
[00:35:56] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[00:36:37] *** Quits: mfao (~Matheus@187.1.168.150) (Read error: Connection reset by peer)
[00:36:56] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 268 seconds)
[00:37:55] <c4017w_> It works fine in Python3 so I don't think I;m using it incorrectly. Just wish I had a way to debug why it was freezing inside of Tk()
[00:38:19] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[00:39:06] *** Quits: YoungPotato (~user@155.98.225.49) (Quit: ERC (IRC client for Emacs 27.2))
[00:40:25] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 250 seconds)
[00:41:05] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:42:35] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[00:42:38] *** Joins: ExpiredKebab (~sgreadly@2407:7000:a239:503:51ec:b340:e8ce:914d)
[00:42:56] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[00:43:00] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Read error: Connection reset by peer)
[00:43:15] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[00:43:50] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[00:43:59] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:44:05] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Read error: Connection reset by peer)
[00:44:16] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[00:44:44] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:45:26] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[00:45:52] <jfcaron> wtf, my test crashes the python interpreter with no message at all
[00:45:53] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Client Quit)
[00:46:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:46:31] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Client Quit)
[00:46:48] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:47:42] <jfcaron> Oh, ipython was eating the RecursionError maximum depth exceeded
[00:48:53] *** Joins: junebug (~junebug@2600:1700:3db0:2540:4dcf:ccf:63f0:7501)
[00:49:02] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Client Quit)
[00:49:17] *** Quits: sazawal (~sazawal@122.161.88.88) (Quit: Leaving)
[00:49:18] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:49:28] *** Joins: Betal (~Betal@user/betal)
[00:49:47] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[00:50:05] *** Quits: magga (magga@ti0036a400-1042.bb.online.no) (Remote host closed the connection)
[00:50:29] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[00:51:18] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[00:51:36] *** Joins: dablitz (~Username@dyn-pppoe-142-51-212-119.vianet.ca)
[00:51:42] <dablitz> i am a HAM operator and working alot witn GNU-Radio. I am trying to build a nice frontend for the output of my flow graph but it keep hanging. the flow grpah works perfectly as prescribed but the is a secondary process that has to run from the flow graph to provide me with the nessesary output. just running th subprocess in a terminal it works perfectly, but when I try and run it inside my QT5 frontend which is what I am trying to
[00:51:42] <dablitz> create the entire frontend just halts.
[00:52:00] <dablitz> could i get some assistance this is driving me nuts
[00:54:18] *** Quits: GadgetNerd (GadgetNerd@user/gadgetnerd) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[00:55:27] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:56:02] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:57:16] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[00:57:33] *** Joins: Auron (~Auron956@user/auron)
[00:58:52] *** Quits: Knaxius (~Knaxius@user/Knaxius) (Quit: bye)
[01:00:22] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 268 seconds)
[01:00:48] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[01:01:29] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:9563:3661:427a:9acd)
[01:03:08] *** Quits: Falconer (~ronnyma@227.84-48-191.nextgentel.com) (Remote host closed the connection)
[01:08:27] *** Quits: Cyp (~cyp@213.237.85.9) (Remote host closed the connection)
[01:08:54] *** Joins: Cyp (~cyp@213.237.85.9)
[01:09:53] <Yhg1s> dablitz: without seeing the code, I'll guess that you're using subprocess.run or one of the methods of the subprocess.Popen object which wait for the process to finish. That will block your UI, because you're not giving the UI loop a chance to run. Qt has its own subprocess interface (QProcess) which you could use instead, or you could change how you're using subprocess so it's not blocking your Qt main
[01:09:59] <Yhg1s> loop.
[01:10:34] *** Joins: cjb (~cjb@user/cjb)
[01:10:39] *** Parts: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Leaving)
[01:10:47] *** Quits: damonlynch (~ngaio@static-68-235-44-26.cust.tzulo.com) (Quit: Leaving)
[01:10:48] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (Quit: Reconnecting)
[01:10:50] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[01:11:02] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[01:11:10] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[01:11:15] *** Quits: Macuser (~Macuser@2600:1003:b453:9b2c:313c:8a78:18dc:1ad9) (Quit: Textual IRC Client: www.textualapp.com)
[01:11:30] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[01:11:33] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[01:11:50] *** Joins: buzzard (~quassel@83.136.182.27)
[01:12:49] *** Joins: qwert (~qwert@208.78.214.5)
[01:12:53] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.246)
[01:14:00] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.246) (Read error: Connection reset by peer)
[01:14:09] <jfcaron> I'm still struggling with this property-in-a-property thing.  I've minimized my code even more to remove distractions: https://bpa.st/EOVQ In the part at the bottom you can see what I would like to be able to do.  Currently I get infinite recursion on line 20. = (  I can also get it to make other non-recursive errors but I'm not sure what I need to do to accomplish what I want.
[01:14:38] <bjs> jfcaron: your prop1 returns self.prop1.onoff
[01:14:45] *** Joins: dmenz (~dmenz@2804:14d:5cd4:5e94::1)
[01:14:52] <bjs> but self.prop1 is a property that returns self.prop1.onoff ... etc
[01:15:14] <bjs> jfcaron: maybe you want to have a second attribute that actually contains the Prop1() object, e.g. called _prop1
[01:15:52] <jfcaron> I will try something based on that.  Thanks.
[01:16:28] <jfcaron> agh
[01:16:28] <bjs> jfcaron: but the problem is really that if self.prop1 returns a string, then self.prop1.prop2 cannot work
[01:16:33] <jfcaron> Right
[01:16:46] <bjs> so you have to decide which you want
[01:16:51] <jfcaron> So fundamentally I can't do a "property-in-a-property"
[01:17:07] <jfcaron> Not if I want the prop1 access to have the same name as in prop1.prop2
[01:17:12] <bjs> jfcaron: I mean you can, it's just that the first property needs to have the second property
[01:17:38] <bjs> obj.prop1.prop2 is the same as `tmp = obj.prop1; tmp.prop2`  if the tmp object doesn't have the property it doesn't work
[01:18:21] <jfcaron> Won't the user then need to do e.g. obj._prop1.prop2 to access prop2?
[01:18:41] <bjs> jfcaron: it depends what prop1 returns
[01:18:46] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:18:46] <jfcaron> Or when assigning to prop1 they'll have to do obj.prop1 = Prop1(prop2value) or something?
[01:18:54] <bjs> if prop1 returns an object that has a prop2 property, then they can just go obj.prop1.prop2
[01:19:09] <bjs> but a str does not have a prop2 property, so if obj.prop1 is a str, then obj.prop1.prop2 won't work
[01:19:19] *** Quits: junebug (~junebug@2600:1700:3db0:2540:4dcf:ccf:63f0:7501) (Quit: Leaving)
[01:19:21] <bjs> jfcaron: well obj.prop1 = ...  will call prop1's setter, which can do what it wants
[01:19:41] <jfcaron> But then I won't be able to retrieve prop1 as a string direvtly
[01:19:45] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[01:19:46] <jfcaron> I'll need to str() it.
[01:20:02] <bjs> jfcaron: well, prop1 can't be both a string and also not a string but something else that has a prop1
[01:20:18] <aphysically> jinsun: so pyright now has code for overload matching heuristics, and a heuristic was added to fix the case I reported https://github.com/microsoft/pyright/commit/c9647b9a03d6306c8b5a380fa97689da28165603
[01:20:22] *** Quits: remote (~self@user/hackers) (Ping timeout: 256 seconds)
[01:20:28] <jfcaron> I guess I want prop1 to be a custom extended string that also has prop2 in it.
[01:20:33] <jfcaron> s/want/need/
[01:20:45] <bjs> jfcaron: okay well now I should ask what it is you actually want/are trying to do
[01:21:05] <jfcaron> The lines 38-42
[01:21:17] *** Quits: Gerula (~Gerula@user/gerula) (Quit: Leaving)
[01:21:58] <nedbat> jfcaron: what else do you need to do with prop1 other than print it?
[01:22:33] <jfcaron> Well there are other methods that will print out a configuration string for the hardware whose interface this is emulating.
[01:23:04] <jfcaron> So I need to combine its value with other strings, like with + or f-strings.
[01:23:36] <bjs> jfcaron: you can make all those work without actually needing a string https://bpa.st/XYCQ
[01:23:38] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[01:23:40] <bjs> (well + won't work, but formats will)
[01:24:32] <aphysically> jinsun: I'm not sure where else you want want or need overload matching heuristics, but the infrastructure is there now I guess
[01:24:34] <jfcaron> You just added the __str__ method to Prop1?
[01:24:52] <MacGyver> Anybody decent with Python's type hinting? I've got a testcase where I don't quite understand what's tripping mypy up: http://ix.io/3Iim
[01:24:55] <bjs> jfcaron: I also added _prop1 and make the property return it
[01:25:01] <aphysically> and this change is good for everyone because it removes false positives in untyped code
[01:25:11] <jfcaron> right
[01:25:18] <bjs> MacGyver: what does mypy trip up on?
[01:25:18] <jfcaron> Thanks bjs, I will work with this.
[01:25:29] <bjs> MacGyver: looking at it, your `move` is annotated to return a tuple but it returns a dict, maybe that's it?
[01:25:40] <bjs> Oh no I misread, nvm :)
[01:25:42] <MacGyver> bjs: No, it returns a tuple from the dict ;)
[01:25:45] <MacGyver> testcase.py:21: error: Argument 1 to "reduce" has incompatible type "Callable[[Tuple[int, int, int], Tuple[str, int]], Tuple[int, int, int]]"; expected "Callable[[Iterable[int], Tuple[str, int]], Iterable[int]]"
[01:25:57] <MacGyver> It's caused by islice expecting an Iterable[int].
[01:26:15] <MacGyver> But it's totally capable of resolving that across lines, it seems, when doing it through the assignment to a.
[01:26:34] <MacGyver> But doing it on one line it needs an explicit cast of the tuple to an Iterable[int].
[01:27:09] <MacGyver> Is this a mypy limitation? A more general Python type checking limitation? Is it that tuples aren't actually defined as Iterable?
[01:27:48] <theseb> Why are microservices a new thing?  People knew 20 years ago that it is wise to break your monolithic app into separate pieces right?
[01:28:00] <theseb> The only new thing I see is using containers
[01:28:13] <jfcaron> GNU/Herd microkernel FTW
[01:28:18] *** Quits: junktext_ (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 260 seconds)
[01:28:21] <jfcaron> Hurd?
[01:30:15] *** Quits: magla (~gelignite@55d43df6.access.ecotel.net) (Quit: Stay safe!)
[01:30:26] <jfcaron> Thanks bjs, I think I got my minimal example working as I want it, now to port it back to the real ugly code.
[01:30:28] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl4880dj8lwlseuhn.ipv6.telus.net)
[01:30:41] *** Joins: Enitin (~Enitin@82.102.22.85)
[01:30:44] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[01:30:52] <bjs> MacGyver: there's a bit going on, you say it's to do with the islice, is the dict and the other islice/reduce calls and the file all irrelevant then?
[01:31:18] <MacGyver> bjs: No, those are all for demonstration purposes.
[01:31:19] *** Joins: vicfred (~vicfred@user/vicfred)
[01:31:27] <MacGyver> I can simplify move, sec.
[01:31:56] <bjs> by no you mean yes, they are irrelevant?
[01:32:06] <bjs> it's only the first islice+reduce call that's the issue?
[01:32:17] <MacGyver> bjs: http://ix.io/3Iiq
[01:32:36] <MacGyver> Yes, they're all irrelevant. This is purely a testcase showing what works and what doesn't.
[01:32:47] <MacGyver> Oh I should've also simplified the tee.
[01:33:08] *** Joins: vladoski (~foo@2001:b07:add:d406:b04e:170c:31a:c155)
[01:33:32] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[01:33:32] <MacGyver> Well, just ignore the tee.
[01:33:49] <MacGyver> You have several copies of the iterator, returning a finite sequence of tuples.
[01:33:54] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:34:05] *** Joins: eloy (~quassel@2001:bc8:182c:650::1)
[01:34:05] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[01:34:41] *** Quits: buzzard (~quassel@83.136.182.27) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:34:43] <MacGyver> *Only* running functools.reduce over it with that function, the type checker is happy because reduce needs its first and third argument to be the same type, and they are, they're tri-tuples of int, int, int.
[01:34:59] <aphysically> jinsun: do you still have that reduced version of the old AoC pyright problem where it couldn't figure out the type?
[01:35:02] <aphysically> I wanted to look at it again
[01:35:18] *** Joins: iflema_ (~ian@user/iflema)
[01:35:22] <MacGyver> But when trying to islice the *result* of that, a tri-tuple of tuple[int, int, int], I use islice, which is defined on an Iterable.
[01:36:05] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a239:503:51ec:b340:e8ce:914d) (Quit: Textual IRC Client: www.textualapp.com)
[01:36:08] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[01:36:13] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[01:36:14] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[01:36:22] <MacGyver> The type checker seems to infer that means that the type of the result of reduce has to be Iterable[int] from that fact, forcing the first argument of the callable and third argument of reduce into Iterable[int] as well.
[01:36:27] <MacGyver> Which is all pretty reasonable.
[01:36:46] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[01:36:47] <MacGyver> Bar for the fact that a tuple[int, int, int] *is* Iterable, in my mind.
[01:36:53] <MacGyver> So why does it complain?
[01:37:19] <MacGyver> The islice with the cast satisfies the type checker, because the cast causes some kind of inference disconnect.
[01:37:46] <MacGyver> And the variant assigning the result of the reduce to a, then islicing a, also satisfies the type checker -- I'm not quite certain why.
[01:38:16] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 245 seconds)
[01:39:55] <MacGyver> Even when explicitly type-hinting a to be tuple[int, int, int] it's satisfied.
[01:40:35] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[01:41:22] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 260 seconds)
[01:41:22] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 260 seconds)
[01:41:22] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 260 seconds)
[01:41:38] <bjs> MacGyver: I think it sees that islice is Iterable[_T] so it says that the reduce() result is an Iterable[int]
[01:41:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[01:42:01] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[01:42:03] *** Quits: Spaceflight (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:42:06] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[01:42:07] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[01:42:31] <MacGyver> Yeah. But it has no problem unifying islice's type with tuple[int, int, int] when doing it via a: tuple[int, int, int] = it.reduce(...
[01:42:54] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[01:43:09] <MacGyver> Which feels like either I'm missing something very obvious I should be doing, or it's a type checker limitation.
[01:43:21] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 276 seconds)
[01:43:35] <bjs> MacGyver: think about `r: Iterable[int] = reduce(move, ...)`
[01:43:39] *** Joins: fikran (~fikran@user/fikran)
[01:44:14] <MacGyver> That fails.
[01:44:15] <bjs> Mypy is being silly here and is saying that because you say it's an Iterable[int] that _T=Iterable[int] but you can't pass an Iterable[int] to a function that accepts tuple[int, int, int]
[01:44:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:44:26] <NeilRG> On my pull request, it says that the owner has "requested changes", but I can't click through to them: https://github.com/google/jax/pull/8890
[01:44:38] <NeilRG> is it just the code review, or am I missing something?
[01:44:39] *** Joins: spithash (~spithash@user/spithash)
[01:44:44] <MacGyver> Right, so it's a checker limitation.
[01:44:54] <MacGyver> Basically, for what I want it works in the wrong direction.
[01:45:14] <MacGyver> Which is fine -- then the cast or the intermediate variable is necessary.
[01:45:19] <MacGyver> But it's not me being dumb at least.
[01:46:01] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl4880dj8lwlseuhn.ipv6.telus.net) (Quit: Leaving)
[01:46:09] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:46:24] *** Joins: RubbishPubTomat_ (~RubbishPu@node-1w7jr9yhpl4880dj8lwlseuhn.ipv6.telus.net)
[01:47:50] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 268 seconds)
[01:50:34] <MacGyver> bjs: I'd *like* it to infer in the other direction, that because the reduce returns a tuple[int, int, int] it satisfies the Iterable[int] requirement.
[01:50:45] <MacGyver> But I'm aware that type inference is very much a non-trivial issue :P
[01:51:20] <MacGyver> And if it had to do that everywhere types don't exactly match the complexity explodes I guess.
[01:51:49] <stewie925> I am trying to send a date field as string to the URL query, and I am getting ` Start date contains a value that is not allowed. Expected format is YYYY-MM-DD `
[01:52:15] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[01:52:16] <stewie925> so I need to convert a string of '2021-12-13'  to its YYYY-MM-DD format
[01:53:01] <jmcantrell> I'm not sure why mypy is complaining here. It seems like I have all the cases covered before checking the object's property: https://mypy-play.net/?mypy=latest&python=3.10&gist=75fd61a0b1173fc6d69d733b10667ce6
[01:53:06] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[01:53:19] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[01:53:24] <bjs> MacGyver: well the problem is that as far as mypy is concerned `reduce : ((T, S) -> T, Iterable[S], T) -> T`  and then you pass this to islice : Iterable[E] -> Iterable[E] and so it goes "oh, so T must be Iterable[E]"
[01:53:44] <jmcantrell> stewie925: look at `time.strptime`
[01:53:48] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[01:53:48] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[01:53:48] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[01:54:08] <stewie925> thanks jmcantrell
[01:54:13] <stewie925> oh, I forgot to share this
[01:54:21] <bjs> MacGyver: and then when it sees tuple[int, int, int] it has a problem, because as far as it knows T is Iterable[T] and move does not accept Iterable[T]'s
[01:54:32] <MacGyver> Yes, exactly.
[01:54:38] <stewie925> here is my date format issue - https://bpa.st/XHCA
[01:54:51] *** Quits: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[01:55:06] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[01:55:29] *** Joins: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net)
[01:55:37] <stewie925> correction - here is my date format issue  -  https://bpa.st/DY7A
[01:55:45] <MacGyver> So it's working "in the wrong direction" -- it wouldn't be about move accepting Iterable[T]'s, it would need to check whether what move *does* accept (or rather, return, because that's how the inference runs) *happens to also be* Iterable[T].
[01:56:30] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[01:56:58] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[01:56:59] <bjs> jmcantrell: did you really mean "or" ?
[01:57:14] <MacGyver> bjs: Thanks for confirming this.
[01:57:27] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[01:57:28] <jmcantrell> stewie925: the server is saying it wants a string in that format, but you seem to be doing that. maybe the server isn't handling it correctly?
[01:57:37] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[01:58:21] <stewie925> jmcantrell: yeah, no idea... I am following an YouTube api exercise when I ran into this issue
[01:59:04] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[01:59:05] <jmcantrell> bjs: yes? i'm testing if the nodes are unequal, and they can't be all of those cases at once. am i missing something?
[01:59:23] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[01:59:36] <jmcantrell> stewie925: what's the api?
[01:59:44] <bjs> jmcantrell: i don't think so,  i wouldn't expect mypy to check all the cases
[02:00:07] <bjs> it has some very simple checks, but they're not very sophisticated
[02:00:10] <stewie925> jmcantrell: the URL you mean ?  its on my bpaste link- https://bpa.st/DY7A
[02:01:19] <bjs> jmcantrell: wait I'm still confused, what if a is b is None ?
[02:02:19] <bjs> jmcantrell: actually the code you pasted *is* the example that it fails on, did you try running it? :P
[02:02:20] <viaSanctus> learning python, i dont understand how  returnvalue[ (word, word2)] = integervalue is built up, its a dictionary containing a tuple, but what does that equalsign integer do?
[02:02:24] *** Quits: greedom (~greedom@p200300de6709f9005cd0149c7f40ec82.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:02:43] <viaSanctus> that implicity in contrast with c# drives me nuts sometimes
[02:02:48] <jmcantrell> bjs: since `a is b` evaluates to `True`, the conditional should short circuit on the first condition
[02:02:49] *** Quits: RubbishPubTomat_ (~RubbishPu@node-1w7jr9yhpl4880dj8lwlseuhn.ipv6.telus.net) (Quit: Leaving)
[02:02:54] <bjs> viaSanctus: `some_dict[key] = value`  is the Python syntax for setting an item
[02:03:03] <bjs> jmcantrell: you said `a is not b`
[02:03:07] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-6c52-46c4-6bfd-7e9f.res6.spectrum.com) (Read error: Connection reset by peer)
[02:03:09] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl4880dj8lwlseuhn.ipv6.telus.net)
[02:03:16] <viaSanctus> bjs, it translates to tuple : integer
[02:03:32] <MacGyver> jmcantrell: a is *not* b returns False if both are None.
[02:03:42] <viaSanctus> ok ok, ez, didnt make sense at sight
[02:03:53] <MacGyver> So no short-circuit, so you end up in a.val.
[02:04:15] <bjs> viaSanctus: something like a tutorial https://docs.python.org/3/tutorial/ will go over dicts and their syntax pretty comprehensively. It's written for C (rather than C#) programmers, but it should be insightful nonetheless
[02:04:26] <bjs> (see Section 5.5)
[02:04:32] <jmcantrell> ok, i'm not sure why such a seemingly trivial thing is hurting my brain this much
[02:04:37] <viaSanctus> thank you
[02:04:49] <MacGyver> jmcantrell: If both a and b are None, they're equal, right?
[02:04:51] <viaSanctus> jmcantrell, join the club bro
[02:04:53] <viaSanctus> having the sam
[02:04:59] <viaSanctus> simple things break my mind
[02:04:59] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[02:05:02] <jmcantrell> right
[02:05:08] *** Quits: gr1m (~gr1m@193.138.218.215) (Ping timeout: 256 seconds)
[02:05:15] <stewie925> my head hurts with this YYYY-MM-DD thing
[02:05:45] <MacGyver> jmcantrell: But you're doing the check there to see whether they're *not* equal. You have 4 checks, combined with or. Equal things will undergo all four checks.
[02:05:46] <stewie925> oh wait...
[02:05:47] *** Joins: gr1m (~gr1m@193.138.218.215)
[02:05:48] <jmcantrell> i tried to divide 80 by 3 in my head a few days ago and almost had a stroke
[02:05:48] <stewie925> brb
[02:06:06] <maplefinger> 8/3 is just 2.66666 etc
[02:06:07] <MacGyver> jmcantrell: If you want to avoid this, simply check for equality *first*.
[02:06:11] <jmcantrell> MacGyver: yeah, i see it now
[02:06:24] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:fff3:c59c:b8a9:6efa) (Quit: Konversation terminated!)
[02:06:27] <bjs> stewie925: did you mean to use url2 in the second example
[02:06:32] <bjs> not url again
[02:07:08] <stewie925> bjs - oh so sorry, yeah I wanted to use url2
[02:07:11] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:07:14] <stewie925> let me try again
[02:07:16] *** Quits: grooverman_ (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[02:07:24] <bjs> stewie925: did that solve your problem?
[02:07:25] <bjs> ah okay
[02:07:38] <doug16k> stewie925, url already has startdate= at the end
[02:07:51] <bjs> Looking at your code, I don't think the problem was with the API or the date format, but you just used the wrong variable :)
[02:07:55] *** Joins: velix (~velix@user/velix)
[02:08:02] <jmcantrell> MacGyver: i'm not sure checking for equality first makes this easier to read, but i'm trying it
[02:08:13] <MacGyver> jmcantrell: It's not about it being easier to read.
[02:08:20] <stewie925> hi bjs youre right. it actually worked with ` r = requests.get(f"{url2}start_date={start_date}") `
[02:08:21] <velix> Let's say I'm starting a WSGI server, say unicorn, with environment variables set. When those variables change, can I reload them somehow?
[02:08:22] <MacGyver> It's about catching the a is b and both are None case.
[02:08:45] <stewie925> so I was using the wrong variable url should be url2
[02:08:46] <stewie925> ugh
[02:08:48] <jmcantrell> ok
[02:08:48] <stewie925> thank you :)
[02:08:50] <grym> velix: if your server re-reads them, they'll be re-read
[02:09:00] <stewie925> bjs = thank you
[02:09:02] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[02:09:12] <bjs> jmcantrell: your code has a problem that if they are both None, then they are equal, so you will try check the .val
[02:09:13] <velix> grym: Sure. I think that works on reload/restart only :(
[02:09:16] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[02:09:28] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl4880dj8lwlseuhn.ipv6.telus.net) (Quit: Leaving)
[02:09:39] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[02:09:56] <grym> velix: you can make an endpoint that calls os.environ.get or something, but changing envvars underfoot feels dicey to me too
[02:10:01] <jmcantrell> bjs: yeah, i see it now. i'm just quietly crying to myself
[02:11:06] <doug16k> stewie925, :(
[02:11:19] <velix> grym: thanks.
[02:12:01] *** SallyAhaj_ is now known as SallyAhaj
[02:12:03] <stewie925> doug16k: sorry, I missed your message .... yeah I was using the wrong variable url should have used url2 - thank you :)
[02:12:23] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-800d-bd41-deec-376b.res6.spectrum.com)
[02:12:43] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:13:07] *** Joins: grooverman (~grooverma@177.95.12.14)
[02:13:09] *** Joins: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8)
[02:13:35] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[02:14:00] <doug16k> stewie925, you should use urllib.parse.quote to escape the values you concatenate into a url's query string
[02:14:22] <doug16k> even if you "know" certain ones don't need it
[02:14:41] <doug16k> to percent escape it
[02:14:45] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[02:15:08] <grym> oh man did i learn that one last week ^
[02:15:24] <grym> "why isn't this test passing?!" "oh because it's getting fed utter garbage..."
[02:15:41] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[02:15:54] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[02:16:22] <doug16k> yeah, it can be baffling when checking it, it looks so right
[02:16:23] <roxfan> GIGO
[02:16:28] <stewie925> doug16k: yeah I suppose...
[02:16:49] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 268 seconds)
[02:17:38] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[02:17:41] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:18:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[02:18:46] *** Joins: lethu (~lethu@user/lethu)
[02:20:25] *** Joins: junebug (~junebug@2600:1700:3db0:2540:5de2:338c:5115:bcfb)
[02:20:37] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:3b12:6706:4ee5:604d) (Quit: Leaving)
[02:21:12] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[02:22:49] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[02:22:54] *** Joins: sudomann (~sudomann@98.219.211.182)
[02:24:25] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 250 seconds)
[02:24:52] *** Joins: Myst6 (~Myst@user/myst)
[02:25:01] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[02:26:51] *** Quits: Myst (~Myst@user/myst) (Ping timeout: 252 seconds)
[02:26:51] *** Myst6 is now known as Myst
[02:27:00] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[02:27:57] *** Quits: emf (~emf@2620:10d:c091:480::1:cbc8) (Ping timeout: 252 seconds)
[02:29:42] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.3)
[02:30:36] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:30:46] *** Joins: arinov (~arinov@213.194.126.155)
[02:31:49] <velix> hrmpf ModuleNotFoundError: No module named 'pymemcache'
[02:32:15] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 268 seconds)
[02:32:25] *** Joins: techmaster (~Techmaste@S010600fc8dc657d3.ok.shawcable.net)
[02:32:28] <aphysically> it looks like github uses textmate syntax highlighting maybe?
[02:32:44] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:32:54] <aphysically> it looks like they try to some match/case syntax highlighting but it fails for a lot of the stdlib match/case test suite https://github.com/python/cpython/blob/main/Lib/test/test_patma.py
[02:33:10] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[02:33:22] <techmaster> hello im looking for a advanced coder in python who knows how to write a programe for Autonomous Vehicles
[02:33:50] <stella> say what
[02:33:59] <stella> this isnt a job fair, guy
[02:34:05] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[02:34:05] <techmaster> i know
[02:34:14] <stella> go recruit on linkedin or whatever
[02:34:19] <techmaster> its for a project that im stuck on
[02:34:21] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[02:34:49] *** Quits: junktext_ (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 250 seconds)
[02:34:49] *** Joins: Atque (~Atque@user/atque)
[02:35:05] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 256 seconds)
[02:35:28] <MacGyver> So basically, you're working on 2-ton death machines piloted by computers running python, and you're asking random IRC-people for help?
[02:35:40] <techmaster> no
[02:35:44] *** Quits: jfcaron (~jfcaron@192.252.229.166) (Quit: jfcaron)
[02:35:59] <phantomotap> MacGyver: well, when you put it that way it sounds silly
[02:36:05] <MacGyver> phantomotap: It does, doesn't it?
[02:36:12] <techmaster> im writing a program to make shopping carts return themselves to the stall after use
[02:36:21] *** Quits: Myst (~Myst@user/myst) (Read error: Connection reset by peer)
[02:36:23] <MacGyver> Context! That's more like it :P
[02:36:31] *** Joins: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[02:36:41] <MacGyver> Still not a job fair, but interesting problems...
[02:36:59] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[02:37:11] <techmaster> not trying to make a job fair . im a noob but i really want to build this
[02:37:13] <doug16k> techmaster, let me guess: for $100
[02:37:38] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[02:37:50] <techmaster> equal rights to the contract from safeway and saVE ON FOOD
[02:38:04] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[02:38:12] <techmaster> CURRENTLY $45,000 EACH
[02:38:37] <phantomotap> O_o no wonder you want to do it
[02:38:42] <techmaster> im looking for a partner not a employee
[02:39:14] <phantomotap> by your own estimation, you are a nooby?
[02:39:24] *** Quits: nomic (~nomic@51.52.78.152) (Quit: Leaving)
[02:39:40] <jmdaemon> I don't think you can find love on here techmaster
[02:39:48] <stella> jmdaemon: agreed
[02:39:50] <jmdaemon> maybe eharmony?
[02:39:50] <mefistofeles> hey! who knows
[02:39:51] <mefistofeles> :P
[02:39:53] <stella> LOL
[02:40:04] <jmdaemon> hehehe
[02:40:14] <doug16k> python is approximately right - you should be able to cobble together some machine vision stuff
[02:40:20] <kungp> i want to run a function on each element of a list, what's the standard way? just a loop? or map?
[02:40:21] <mefistofeles> yeah, true
[02:40:36] <techmaster> no this actually the amount aggreed upon from CEO of save on foods and penticton b.c safeway
[02:40:42] <kungp> or a list comprehension even though it has no return values?
[02:40:48] <mefistofeles> techmaster: https://www.kiwibot.com/
[02:40:50] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[02:40:53] <mefistofeles> I know they use python a lot
[02:41:00] <mefistofeles> might want to check what they use and such
[02:41:36] <jmdaemon> if you're around any unis you could also go and ask around, see if you can find anyone there
[02:42:00] *** Parts: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (WeeChat 3.3)
[02:42:01] <grym> kungp: a loop, unless you intend to use the list after
[02:42:27] <kungp> good, thanks!
[02:42:52] <velix> Anyone with an idea, why pymemcache can't be found from gunicorn inside venv, but from python3 inside the same venv? I don't have problems with other libraries, maybe pymemcache package has a problem? https://bpa.st/FNFQ
[02:43:52] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Quit: ZNC - https://znc.in)
[02:44:13] <doug16k> velix, and you run it as root?
[02:44:27] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl4880dj8lwlseuhn.ipv6.telus.net)
[02:44:35] *** Quits: dmenz (~dmenz@2804:14d:5cd4:5e94::1) (Ping timeout: 268 seconds)
[02:44:38] <velix> doug16k: It's inside a container ;) but wait. let me ... wait.
[02:45:09] <doug16k> it's in /root so that makes me suspect it is inaccessible if you aren't root
[02:45:21] *** Joins: emf (~emf@2600:1700:841:cc20:184c:c9e0:41bd:a50)
[02:45:50] <velix> I am root ;)
[02:45:53] <velix> groot and root
[02:46:22] <velix> but let me try as non-root. maybe the package doesn't like root
[02:47:02] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[02:47:17] <velix> but then, python3 also shouldn't work :p
[02:47:35] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[02:47:43] <doug16k> `which` python3 points to the one you think?
[02:48:14] <doug16k> sorry, `which python3`
[02:48:25] *** Joins: sudomann (~sudomann@98.219.211.182)
[02:48:33] <velix> /root/.local/pipx/venvs/mapproxy/bin/python3 -> /usr/bin/python3
[02:48:45] *** Joins: emf_ (~emf@2620:10d:c091:480::1:e5d2)
[02:49:35] *** Quits: emf (~emf@2600:1700:841:cc20:184c:c9e0:41bd:a50) (Ping timeout: 252 seconds)
[02:50:27] *** Quits: rany_ (~rany@user/rany) (Remote host closed the connection)
[02:51:33] *** Joins: vakera_pingveno_ (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[02:51:50] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 260 seconds)
[02:52:09] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Ping timeout: 252 seconds)
[02:53:49] *** Quits: darksun (~darksun@user/darksun) (Quit: g'night)
[02:53:58] *** Joins: traverseda (~traversed@47.55.112.225)
[02:55:37] *** Joins: rany_ (~rany@user/rany)
[02:55:42] <doug16k> I'd try removing and installing that library again in that venv, but this time, scrutinize the output
[02:56:00] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Quit: ZNC 1.8.2 - https://znc.in)
[02:56:19] <doug16k> small chance that tried to tell you something
[02:57:16] *** Joins: onichomp (~onichomp@2806:264:4404:801e:fc67:3ebb:1b8f:9ef6)
[02:58:20] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[02:58:39] <velix> lol, I got it :D
[02:58:47] <velix> Uninstall gunicorn, reinstall gunicorn
[02:58:49] <velix> interesting.
[02:59:02] <velix> The good old power off / power on.
[02:59:07] <velix> doug16k: thanks for your time!
[02:59:51] *** Joins: slavfox (~slavfox@93.158.232.111)
[03:00:03] *** Joins: cheater (~Username@user/cheater)
[03:01:08] *** Quits: DaNeenjah (~jake@adsl-74-230-7-13.hsv.bellsouth.net) (Quit: WeeChat 3.3)
[03:01:10] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:781:abb1:8fdf:7f2b) (Ping timeout: 260 seconds)
[03:01:13] *** Quits: kostkon_ (~androirc@ppp-94-66-131-50.home.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[03:01:14] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:02:00] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 276 seconds)
[03:02:26] *** Quits: iflema_ (~ian@user/iflema) (Ping timeout: 245 seconds)
[03:03:04] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 268 seconds)
[03:03:14] *** Joins: iflema (~ian@user/iflema)
[03:03:15] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[03:03:35] *** Joins: stavros (~stavros@pon1039.cpe.hcn.gr)
[03:03:38] <stavros> Hello
[03:03:53] *** Quits: cosimone (~user@93-47-228-207.ip115.fastwebnet.it) (Ping timeout: 252 seconds)
[03:03:55] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[03:03:56] <phantomotap> howdy
[03:04:12] <stavros> I wrote a long-running asyncio program that hangs every so often with an uncaught exception, and I can't for the life of me figure out how to see the exception. Is there anything obvious I'm missing?
[03:04:25] <stavros> In fact, even if I *cause* an exception, I still don't see it, it just hangs
[03:05:21] *** Joins: alzgh (alzgh@user/alzgh)
[03:05:21] <doug16k> you must be catching and throwing away the exception if it isn't dumping a stack trace, are you?
[03:06:16] <stavros> Hmm, I don't *think* so
[03:07:14] <stavros> Let me debug a big
[03:07:18] <stavros> Bit*
[03:07:35] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: ThePhilgrim)
[03:07:57] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:08:46] <stavros> I have this line: loop.run_until_complete(asyncio.wait([asyncio.ensure_future(MessageProcessor().run())]))
[03:08:59] <stavros> And then .run() raises an exception in its first line, and I never see it
[03:09:22] <doug16k> futures capture exceptions
[03:09:23] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[03:09:27] <bancroft> One of our packages (xmlsec), has this build-time dependency (setuptools_scm), which pip magically downloads and installs at install time, and all of that completely bypasses all of my efforts at freezing the dependencies and will happily install too-recent versions of dependencies.
[03:09:29] <bancroft> So when tomli released their 2.0.0 version a few hours ago (even though they properly marked it as only compatible with >=3.7), it magically broke my builds. How can I stop this garbage from ever happening?y
[03:09:38] <doug16k> hangs onto it so the code that wants .result() can check
[03:10:01] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[03:10:31] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: WeeChat 3.3)
[03:10:52] <stavros> doug16k, hmm, I wrote this code years ago, so I've forgotten all about how asyncio works... What do you mean "hang onto it"? I should keep a reference?
[03:11:12] *** Quits: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8) (Remote host closed the connection)
[03:11:16] *** Joins: Pandadub (~Barones@177.133.2.104)
[03:11:32] <stavros> bancroft, can you install it yourself before it tries? Hopefully it'll see it being there and not attempt installation
[03:11:39] <doug16k> a future remembers two things, one or the other. the target either ran to completion, and it saves the return value and None exception, or it raised, and there is no return value and it remembered the exception
[03:11:40] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[03:12:25] <stavros> doug16k, I see, and asyncio.wait() waits until all futures are fulfilled?
[03:12:42] <stavros> These tasks just run forever, they're never meant to exit
[03:12:43] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:13:16] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[03:13:38] *** Joins: kevr (~kevr@user/kevr)
[03:14:05] <doug16k> stavros, you can ask to see the exception with https://docs.python.org/3/library/asyncio-future.html#asyncio.Future.exception
[03:14:08] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[03:14:22] <bancroft> stavros: maybe? I'll try and see what happens
[03:14:36] <stavros> bancroft, yeah, give it a shot
[03:14:50] <stavros> doug16k, but they're in the loop and they're being waited on, so control never returns
[03:15:07] *** Joins: rany_ (~rany@user/rany)
[03:15:22] *** Joins: ThC27 (ThC27@gateway/vpn/protonvpn/thc27)
[03:15:24] <doug16k> then you are throwing away the exceptions
[03:15:37] <stavros> doug16k, how am I supposed to do it instead?
[03:15:42] <doug16k> the future is keeping them and you throw the future out the window right
[03:15:48] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[03:15:52] <stavros> I guess
[03:16:06] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[03:16:29] <doug16k> maybe I am confused about the symptoms. you said you don't get any crash dump or stack trace to output, right?
[03:16:49] <doug16k> how do you know there are exceptions
[03:16:50] <stavros> doug16k, yes, not even when I terminate the program with ctrl-c
[03:17:00] <stavros> doug16k, because I caused one to check and it didn't show up
[03:17:05] <doug16k> ah
[03:17:22] <doug16k> it probably shows up in the Future object(s)
[03:17:36] <stavros> Let me try something
[03:17:48] <doug16k> and real exception is being swallowed same way
[03:17:58] *** Joins: oriba (~oriba@dynamic-078-054-061-195.78.54.pool.telefonica.de)
[03:18:00] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[03:18:48] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[03:19:30] *** Quits: susam (~susam@user/susam) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[03:19:31] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[03:19:32] <stavros> Yeah, .run_until_complete() is just running forever and then getting a KeyboardInterrupt, and that's it
[03:19:34] <stavros> Let me try to catch it
[03:19:40] *** Joins: susam (~susam@user/susam)
[03:19:48] *** Joins: rvalue (~rvalue@user/rvalue)
[03:19:52] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[03:20:56] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[03:21:33] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Quit: Client closed)
[03:21:37] <stavros> Jeez, finally: https://www.pastery.net/cmqtbq/
[03:21:57] <stavros> Thanks, doug16k, hopefully I'll be able to see the exceptions now
[03:22:08] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[03:22:17] *** Quits: adeliktas (~adeliktas@2001:16b8:22c1:c800:fc6c:f5c3:4e96:ccc3) (Quit: Client closed)
[03:22:57] <doug16k> yeah, if it happens on this side of the future. if it happens inside the worker then the future is going to stash it for you
[03:23:14] <doug16k> unless there is a wait on this side and it rethrows for you in this thread
[03:23:14] *** Quits: imp (~imp@192-141-191-232.alternativaip.net.br) (Quit: imp)
[03:23:31] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: WeeChat 3.3)
[03:23:37] *** Joins: imp (~imp@192-141-191-232.alternativaip.net.br)
[03:24:30] <doug16k> getting the result throws if the future captured an exception
[03:24:55] <doug16k> .result() call throws I mean
[03:25:16] <doug16k> so it should propagate it into this thread
[03:25:54] <stavros> That sounds good, I'll monitor it and see, thanks
[03:26:20] *** Joins: adeliktas (~adeliktas@2001:16b8:22c1:c800:2c75:424f:b294:4ea4)
[03:26:24] <stavros> Let me make sure systemd sends it a SIGINT to restart it, just in case, too
[03:28:11] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl4880dj8lwlseuhn.ipv6.telus.net) (Quit: Leaving)
[03:28:23] <stavros> Looks great, thanks doug16k !
[03:29:23] *** Joins: Terexen (~terexen@user/terexen)
[03:30:04] *** Quits: alzgh (alzgh@user/alzgh) (Ping timeout: 256 seconds)
[03:30:11] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:30:26] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[03:32:23] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Quit: Leaving)
[03:32:42] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[03:33:13] *** Quits: junebug (~junebug@2600:1700:3db0:2540:5de2:338c:5115:bcfb) (Ping timeout: 252 seconds)
[03:33:16] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[03:33:53] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:34:11] <velix> Sorry for asking in here. How "good" is memcache in your opinion? I need to make several hundret connections to it. Is this fine? Would you go for redis?
[03:34:21] *** Parts: ErkiS (~opera@62.65.198.13.cable.starman.ee) ()
[03:34:27] *** Joins: alzgh (alzgh@user/alzgh)
[03:34:34] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-800d-bd41-deec-376b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:35:23] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:36:05] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:38:29] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Quit: beastDivision)
[03:39:03] <doug16k> hundreds of connections sounds pretty easy
[03:39:03] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 276 seconds)
[03:39:08] <velix> :D
[03:39:59] <doug16k> it's a memcache right? should run like lightning with 16GB/sec storage (RAM)
[03:40:03] <velix> yes.
[03:40:10] <velix> I've just set it up to use unix sockets. more power ;)
[03:40:13] *** Joins: rany_ (~rany@user/rany)
[03:43:11] *** Joins: stonkey (~stonkey@user/stonkey)
[03:43:38] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[03:44:34] *** Quits: Pandadub (~Barones@177.133.2.104) (Remote host closed the connection)
[03:44:52] *** Joins: Pandadub (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8)
[03:45:01] *** Joins: ArtfulDodger (~ArtfulDod@81.126.81.79.rev.sfr.net)
[03:45:01] *** Quits: Jong (~Jong@2620:10d:c090:400::5:d6f6) (Ping timeout: 240 seconds)
[03:45:11] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[03:45:40] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-800d-bd41-deec-376b.res6.spectrum.com)
[03:45:49] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-800d-bd41-deec-376b.res6.spectrum.com) (Client Quit)
[03:46:49] *** Joins: Wulf (~Wulf@user/wulf)
[03:46:59] *** Joins: nomic (~nomic@51.52.78.152)
[03:47:11] <stavros> velix, yeah it should be good for a lot more
[03:47:20] <stavros> But I generally use Redis nowadays
[03:47:33] <stavros> If memcached works for you, though, no need to switch
[03:47:40] <stavros> Ie if you don't need any of Redis' features
[03:47:46] <ArtfulDodger> Hey guys ; I read online the ABCs are semantic contracts enforcing the semantic behaviour of the class and methods, e.g. print() method has to print and cannot erase the hard drive... but how are we supposed to specify this info "must print something" in the ABC? In the docstring?
[03:48:23] <velix> stavros: I'm just storing a minimal set and this server has 64 GiB of RAM. But I'll also try redis.
[03:48:41] <Yhg1s> ArtfulDodger: yes. Or, documentation in general.
[03:49:36] <stavros> velix, I mean if you don't need disk persistence or the advanced data structured, you're good
[03:49:53] <velix> stavros: yeah, I don't need that
[03:49:53] *** Quits: BillyZane (~BillyZane@185.202.221.179) (Remote host closed the connection)
[03:50:10] <velix> now*
[03:50:44] *** Joins: BillyZane (~BillyZane@185.202.221.179)
[03:50:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:51:02] *** Quits: grimvar (~grimvar@i5C75F74F.versanet.de) (Ping timeout: 240 seconds)
[03:51:23] <stavros> Yep, you're all set then
[03:51:38] <ArtfulDodger> Yhg1s, OK. And is Foo.register(BarABC) equivalent to subclassing BarABC?
[03:53:00] *** Joins: fikran (~fikran@user/fikran)
[03:53:00] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[03:53:10] *** Joins: grimvar (~grimvar@i5C75F768.versanet.de)
[03:53:14] <Yhg1s> ArtfulDodger: no, it's equivalent to BarABC subclassing Foo.
[03:53:16] *** Joins: junebug (~junebug@2600:1700:3db0:2540:df08:dc56:f221:1f9e)
[03:53:16] *** Quits: stavros (~stavros@pon1039.cpe.hcn.gr) (Quit: Leaving)
[03:53:19] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[03:53:43] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[03:53:43] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:54:14] *** Quits: stonkey (~stonkey@user/stonkey) (Quit: Leaving)
[03:55:25] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 250 seconds)
[03:55:39] *** Quits: LimeOn (~user@user/limeon) (Quit: .)
[03:57:36] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[03:58:13] *** Quits: junebug (~junebug@2600:1700:3db0:2540:df08:dc56:f221:1f9e) (Ping timeout: 240 seconds)
[03:58:15] <bjs> ArtfulDodger: your call looks a bit confused, you call register on the ABC https://docs.python.org/3/library/abc.html#abc.ABCMeta.register
[03:59:15] *** Parts: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com) ()
[04:00:19] <ArtfulDodger> bjs, yes this is my mistake. But their example in the doc "MyABC.register(tuple)" is confuding me ... what does that mean in the end? "I state that tuple complies to my abc"?
[04:00:42] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[04:01:11] <bjs> ArtfulDodger: it means you're declaring that the `tuple` class is an implementation of this ABC
[04:02:53] <ArtfulDodger> bfs, OK. But then I am confused about the role of the protocols. I thought they were there for the situations for chich we cannot subclass because the implementation is too far in the code.
[04:04:49] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[04:05:17] <bjs> ArtfulDodger: do you mean typing.Protocol ?
[04:05:24] <ArtfulDodger> yes
[04:05:49] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[04:06:21] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[04:07:02] <bjs> ArtfulDodger: https://www.python.org/dev/peps/pep-0544/#rationale-and-goals gives a much better overview. But basically, ABCs are very old and you have to explicitly say you're implementing the ABC and the ABC does not involve any type information
[04:08:03] <bjs> (and ABCs have a small runtime overhead but I think that point is probably overblown because typing.Protocol's *are* ABCs)
[04:08:35] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-c025-4ecb-7d4d-0f1a.res6.spectrum.com) (Quit: jarthur)
[04:10:03] <ArtfulDodger> Can we say that Protocols may replace ABCs in the future?
[04:11:05] <bjs> ArtfulDodger: well a Protocol is an ABC, and ABCs aren't going away; so no?
[04:11:30] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[04:11:41] <ArtfulDodger> bjs, this is from that specific link that I read that Protocols are presented as a solution for ABCs that they must be explicity subclassed
[04:11:47] <bjs> but if you mean "will people write a Protocol instead of an ABC for their thing" the answer is maybe yes?  Mostly people use Protocol for their static type system inference power
[04:11:50] <bjs> not for their runtime ABC-ness
[04:14:17] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[04:14:40] <ArtfulDodger> OK so Protocol would mainly be used by the linter to check that the class that you are passing is correct but ABC is still the mechanism providing runtime answers to isinstance() or issubclass?
[04:14:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:15:09] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[04:15:22] <bjs> ArtfulDodger: yes, Protocol's can give isinstance() checks (with @runtime_checkable) without needing to subclass
[04:15:29] <bjs> but I think that's even less used
[04:15:56] *** Quits: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Remote host closed the connection)
[04:16:15] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[04:17:16] *** Joins: lowfi (~lowfi@user/lowfi)
[04:19:53] <ArtfulDodger> bjs, this was not really my question. I had the feeling that protocols where only made for type checking (by the linter) but that they do not play a role at runtime, is that correct?
[04:20:20] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:20:30] <bjs> ArtfulDodger: I don't understand how my answer doesn't answer that question.  Protocols indeed can give you runtime checks through @runtime_checkable
[04:20:35] <bjs> and through subclassing (since they are ABCs)
[04:21:01] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 240 seconds)
[04:21:24] <bjs> but they are *intended* for static type checking (at least, that's why they were added, because ABCs weren't really used widely enough nor had enough detail for the typechecker)
[04:23:16] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[04:23:59] <ArtfulDodger> bjs, if I use type annotations for all the parameters of methods, returned values, attributes... don't I have the same expression power as I would have in a protocol?
[04:24:08] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[04:24:09] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[04:24:11] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[04:24:25] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[04:24:27] *** Joins: theprophet (~theprophe@85.114.228.184)
[04:24:29] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[04:24:35] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[04:25:00] <bjs> ArtfulDodger: ABCs don't look at the type hints and I've never seen an ABC where someone had annotated things
[04:27:04] <bjs> ArtfulDodger: remember Protocol's aren't "throw away ABCs and do something new"; a Protocol *is* an ABC.  It's just "an ABC, but look at the types too"
[04:28:16] <ArtfulDodger> bfs, yeah, but I try to understand how it is different from an annotated ABC (expect that it doesn't look common).
[04:28:32] <bjs> ArtfulDodger: "an annotated ABC" is called a Protocol
[04:28:47] <bjs> traditional ABCs aren't annotated because the abc module does not look at the types
[04:28:48] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Ping timeout: 268 seconds)
[04:29:55] <ArtfulDodger> bjs, does it mean that if I made a mistake with the types of a Prototype I will get an expcetion at runtime?
[04:30:01] <bjs> ArtfulDodger: no.
[04:30:22] <bjs> Again a Protocol *is* an ABC.
[04:30:35] *** Joins: cliluw (~cliluw@47.147.73.223)
[04:30:50] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-35ba-b7a0-d966-f0ce.res6.spectrum.com)
[04:31:04] <ArtfulDodger> OK :D Just a matter of vocabulary then
[04:31:52] <bjs> ArtfulDodger: it's basically `class Protocol(abc.ABC): ` with its own isinstance check.  typecheckers treat Protocol ABCs differently (they look at the types)
[04:32:04] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:32:24] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[04:32:24] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:33:31] <ArtfulDodger> OK thank you :)
[04:33:32] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[04:33:33] <ArtfulDodger> bjs
[04:35:18] *** Joins: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[04:35:33] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[04:35:58] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:36:00] <bancroft> stavros: it didn't work
[04:37:27] *** Quits: iomari891 (~iomari891@102.91.5.185) (Ping timeout: 250 seconds)
[04:37:34] <bancroft> This package (xmlsec), has a build-time dependency (setuptools_scm), which pip magically downloads and installs at install time, and all of that completely bypasses all of my efforts at freezing the dependencies and will happily install too-recent versions of dependencies. How can I stop this nonsense from happening?
[04:37:35] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[04:37:39] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[04:38:01] <bancroft> installing it ahead of time didn't work
[04:38:22] <doug16k> I thought that would work too
[04:39:50] *** Joins: EdePopede (~ede@user/ede)
[04:40:09] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[04:40:23] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[04:40:23] *** Joins: Gerula (~Gerula@user/gerula)
[04:40:35] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:40:39] *** Joins: junebug (~junebug@2600:1700:3db0:2540:ecd1:179f:7aa:862b)
[04:40:40] *** Quits: ArtfulDodger (~ArtfulDod@81.126.81.79.rev.sfr.net) (Quit: Leaving)
[04:40:41] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 252 seconds)
[04:42:21] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[04:42:21] *** Quits: ede (~ede@user/ede) (Ping timeout: 268 seconds)
[04:43:54] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Quit: ZNC - http://znc.in)
[04:44:20] <jinsun> aphysically: great, yeah that change is good for everyone, opens up pyright supporting more magic in the future too, thanks to you
[04:45:24] <jinsun> aphysically: by the old pyright problem you mean the one with bingo boards with unpacking and zipping and reassigning?
[04:46:04] <aphysically> ye
[04:46:18] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[04:47:07] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (lithium.libera.chat (Nickname regained by services)))
[04:47:17] *** Joins: PJBoy (~PJBoy@user/pjboy)
[04:47:18] *** Quits: Nact (~l@2a02:2788:11c4:6e6:ede0:bbc0:a761:9e01) (Ping timeout: 268 seconds)
[04:48:04] *** PJBoy is now known as Guest7081
[04:48:12] *** Joins: PJBoy (~PJBoy@user/pjboy)
[04:48:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[04:50:36] <aphysically> jinsun: he also added documentation for the overload algorithm which is great https://github.com/microsoft/pyright/commit/2f616204d9d8db3ce9de2d7529893e3dc0539d07
[04:51:08] <aphysically> n.b. this *isn't* documented in PEP 484 (how a type checker should match overloads)
[04:52:14] *** Quits: Guest7081 (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[04:52:20] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[04:52:28] *** Quits: cjb (~cjb@user/cjb) (Read error: Connection reset by peer)
[04:52:53] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[04:53:09] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Ping timeout: 252 seconds)
[04:53:37] <jinsun> ah nice, maybe an overrsight in pep 484, or maybe it is just leaving it undefined and letting type checkers optimize
[04:54:12] *** Quits: oriba (~oriba@dynamic-078-054-061-195.78.54.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:54:27] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:54:54] <jinsun> aphysically: I have a version of that one, https://bpa.st/HK2Q, which pyright still complains about, dunno if I modified something or it is exactly your code
[04:55:19] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 268 seconds)
[04:55:53] *** Joins: cation21 (cation@user/cation)
[04:55:54] <jinsun> I wanted to simplify that (*b, *zip(*b)) and maybe reduce one dimension and still get it to break but no it managed to work fine in simpler cases
[04:57:12] *** Quits: cation (cation@user/cation) (Ping timeout: 265 seconds)
[04:57:12] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[04:57:36] *** Quits: onichomp (~onichomp@2806:264:4404:801e:fc67:3ebb:1b8f:9ef6) (Read error: Connection reset by peer)
[04:59:11] <aphysically> you can 'simplify' it to chain(b, zip(*b))
[04:59:17] *** cation21 is now known as cation
[05:01:48] <aphysically> enough of these AoC problems need point sets I went ahead and just made a plotter https://bpa.st/6IVQ
[05:02:12] <jinsun> ok yeah it breaks if you chain too (but well that is almost the same thing)
[05:02:32] *** Quits: portalrat (~portalrat@user/portalrat) (Remote host closed the connection)
[05:02:56] *** Joins: portalrat (~portalrat@user/portalrat)
[05:03:17] <aphysically> yeah, I mean technically the chain is a class that is iterable and the other is a tuple defined in-place but basically the same
[05:03:57] *** Quits: sliwkr (1aac56ad72@2604:bf00:561:2000::251) (Read error: Connection reset by peer)
[05:04:04] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:9563:3661:427a:9acd) (Quit: smeeagle)
[05:04:06] *** Joins: sliwkr (1aac56ad72@2604:bf00:561:2000::251)
[05:04:46] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[05:05:01] *** Joins: rye (~rye@magpie.trojka.no)
[05:05:37] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[05:05:37] *** Quits: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Ping timeout: 252 seconds)
[05:05:49] <doug16k> speed.python.org is tested on a DDR3 machine? bit odd
[05:06:07] *** Quits: onu (~onufn@gibbs.uberspace.de) (Quit: %...%)
[05:06:21] *** Quits: emf_ (~emf@2620:10d:c091:480::1:e5d2) (Ping timeout: 252 seconds)
[05:06:32] <doug16k> 2400 is "slow" today
[05:07:02] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[05:07:18] <aphysically> yeah I wouldn't expect dance dance revolution machines to have the necessary memory clock speed either, but what do you know
[05:07:35] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[05:07:39] <aphysically> jinsun: tree-sitter based editors are gonna get pattern matching syntax knowledge soon https://github.com/tree-sitter/tree-sitter-python/pull/140
[05:07:44] <doug16k> I have an old core2quad with ddr3
[05:07:50] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (Ping timeout: 265 seconds)
[05:08:21] *** Joins: onu (~onufn@gibbs.uberspace.de)
[05:08:26] <doug16k> it just barely supports the whole x86_64 instruction set
[05:09:16] <doug16k> fun to crash programs that just assume avx or something
[05:09:20] <jinsun> aphysically: nice, I need to look into the tree sitter thing, sounds cool
[05:09:28] <grym> tree-sitter is neat
[05:09:32] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 240 seconds)
[05:12:37] *** Joins: dibas (~dibas@user/dibas)
[05:13:19] *** Joins: onichomp (~onichomp@2806:264:4404:801e:9d51:5c79:9d03:13d2)
[05:13:30] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[05:13:42] *** Joins: jfcaron (~jfcaron@192.252.229.166)
[05:13:47] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[05:13:58] <jinsun> open issue with lots of 👍 for vscode https://github.com/Microsoft/vscode/issues/50140
[05:14:22] <grym> emacs has had it for a while now
[05:14:38] <jinsun> atom supports is apparently, so I need to switch to that, or figure out emacs
[05:14:46] <doug16k> what is up with their bot. it closes your thing as a duplicate and doesn't say what is the duplicate
[05:15:03] <grym> it was born in atom
[05:15:11] <grym> but atom's kind of senecent now
[05:15:11] <jinsun> ah
[05:15:34] <aphysically> neovim has experimental tree-sitter support (hoepfully first class in another release or two)
[05:15:46] <aphysically> Bram (vim BDFL) has said he is interested in it for vim in the future
[05:16:18] <doug16k> ah sorry, wrong language: moving a line up and down in a switch in js makes a total mess in vscode
[05:17:33] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Client Quit)
[05:19:41] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:19:56] <doug16k> I just want vscode to understand a one line if and not make me unindent the next line
[05:20:02] *** Quits: portalrat (~portalrat@user/portalrat) (Remote host closed the connection)
[05:20:04] *** Quits: onu (~onufn@gibbs.uberspace.de) (Ping timeout: 256 seconds)
[05:20:08] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:20:08] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[05:20:17] <doug16k> jinsun, your project wants space travel :)
[05:20:26] *** Joins: portalrat (~portalrat@user/portalrat)
[05:20:40] *** Quits: fstd (~fstd@xdsl-85-197-54-43.nc.de) (Read error: Connection reset by peer)
[05:21:10] *** Joins: onu (~onufn@gibbs.uberspace.de)
[05:21:12] *** Quits: schumaml (~schumaml@dslb-188-104-168-024.188.104.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[05:21:31] *** Joins: schumaml (~schumaml@dslb-188-104-168-024.188.104.pools.vodafone-ip.de)
[05:22:36] <jinsun> doug16k: my project? this tree-sitter thing?
[05:22:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:23:05] <doug16k> yeah, it is so weird how spectacularly good vscode is in some ways, yet blunders one line if autoindent
[05:24:05] <doug16k> (in c-like languages)
[05:25:06] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:3961:4cf9:16b:5bf0) (Ping timeout: 256 seconds)
[05:26:10] <jinsun> yeah I blame electron and javascript for this :D
[05:27:26] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[05:29:39] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[05:31:00] <doug16k> if I shift tab and I'm on a blank line and I hit enter, do I *really* mean to jump to the next tab because of the previous more-indented line above the blank one? that alone is the biggest source of grief
[05:31:00] *** Joins: wlemuel (~user@210.22.124.110)
[05:31:36] <Helion> doug16k: the machine that runs speed.python.org is also running an x5680 and ubuntu 14.04
[05:31:37] *** Quits: Pandadub (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8) (Remote host closed the connection)
[05:31:40] <Helion> its old
[05:32:01] *** Quits: flokuehn (~flokuehn@87.123.247.87) (Ping timeout: 252 seconds)
[05:33:21] <doug16k> I get all two-handed so I can fight back with shift tab on each enter
[05:33:56] *** Joins: flokuehn (~flokuehn@87.123.247.75)
[05:34:14] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[05:34:37] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-35ba-b7a0-d966-f0ce.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[05:35:10] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 260 seconds)
[05:35:40] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-35ba-b7a0-d966-f0ce.res6.spectrum.com)
[05:36:14] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[05:36:19] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[05:36:29] <doug16k> point is, it's weird to have indent have odd semantics and it does stuff like performing miracles inferring types of then callback parameters in promises
[05:36:40] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[05:39:11] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Quit: beastDivision)
[05:41:46] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:42:34] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[05:43:07] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[05:43:19] *** Quits: wlemuel (~user@210.22.124.110) (Remote host closed the connection)
[05:43:23] *** Joins: cation21 (cation@user/cation)
[05:43:45] *** Joins: wlemuel (~user@210.22.124.110)
[05:44:29] *** Quits: cation (cation@user/cation) (Ping timeout: 252 seconds)
[05:44:30] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[05:44:32] *** Quits: wlemuel (~user@210.22.124.110) (Remote host closed the connection)
[05:45:15] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 268 seconds)
[05:45:32] *** Quits: onu (~onufn@gibbs.uberspace.de) (Ping timeout: 240 seconds)
[05:45:39] *** Joins: wlemuel (~user@210.22.124.110)
[05:46:01] *** Joins: onu (~onufn@gibbs.uberspace.de)
[05:46:29] *** Quits: vladoski (~foo@2001:b07:add:d406:b04e:170c:31a:c155) (Quit: Textual IRC Client: www.textualapp.com)
[05:46:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[05:46:46] *** cation21 is now known as cation
[05:46:50] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[05:48:05] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:48:13] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[05:48:15] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[05:48:28] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[05:48:28] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Client Quit)
[05:48:29] *** Joins: portalrat_ (~portalrat@user/portalrat)
[05:48:32] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:48:36] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[05:48:42] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[05:49:45] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:49:57] *** Joins: PacKetIV (PacKetIV@user/packetiv)
[05:50:02] *** Quits: PocketKiller (PacKetIV@user/packetiv) (Ping timeout: 240 seconds)
[05:51:00] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[05:51:02] *** Quits: portalrat (~portalrat@user/portalrat) (Ping timeout: 240 seconds)
[05:51:02] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 240 seconds)
[05:51:13] *** Quits: XV8 (~XV8@2601:5cb:c001:50:3422:70c3:45ca:a8b5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:51:30] *** Joins: sudomann (~sudomann@98.219.211.182)
[05:52:26] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[05:52:26] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Client Quit)
[05:52:32] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[05:52:54] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[05:52:56] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[05:53:02] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[05:53:03] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[05:53:26] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[05:53:53] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 268 seconds)
[05:55:14] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[05:55:17] *** Joins: XV8 (~XV8@2601:5cb:c001:50:3422:70c3:45ca:a8b5)
[05:56:12] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[05:56:30] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[05:56:32] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Client Quit)
[05:58:28] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[05:58:33] *** Joins: Fiji (~Fiji@user/fiji)
[05:58:51] *** Quits: wlemuel (~user@210.22.124.110) (Remote host closed the connection)
[05:59:11] *** Joins: wlemuel (~user@210.22.124.110)
[05:59:17] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[05:59:52] *** Joins: ExpiredKebab (~sgreadly@2407:7000:a239:503:51ec:b340:e8ce:914d)
[06:00:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[06:00:37] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[06:01:29] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a239:503:51ec:b340:e8ce:914d) (Client Quit)
[06:01:52] *** Joins: parv (~quass@user/parv)
[06:01:59] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[06:02:20] *** Joins: fikran (~fikran@user/fikran)
[06:02:35] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[06:05:51] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Ping timeout: 250 seconds)
[06:05:55] *** Joins: vladoski (~foo@2001:b07:add:d406:31e5:1f6e:b162:e314)
[06:06:27] *** Joins: ubert1 (~Thunderbi@p200300ecdf1abbee60b6487a781d8af1.dip0.t-ipconnect.de)
[06:06:49] *** Quits: vladoski (~foo@2001:b07:add:d406:31e5:1f6e:b162:e314) (Client Quit)
[06:07:27] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 268 seconds)
[06:07:35] *** Quits: ubert (~Thunderbi@p200300ecdf1abbd3ca03b07f10ffc657.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:07:35] *** ubert1 is now known as ubert
[06:08:16] *** Quits: MercilessDeth (~brad@136.49.59.177) (Quit: Konversation terminated!)
[06:08:58] *** Joins: neverwas (jpneverwas@swissbox.unperson.link)
[06:11:04] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 256 seconds)
[06:11:49] *** Joins: brabrax (~brabrax@user/brabrax)
[06:13:02] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 240 seconds)
[06:13:39] *** Joins: vladoski (~foo@2001:b07:add:d406:31e5:1f6e:b162:e314)
[06:13:57] *** Quits: vladoski (~foo@2001:b07:add:d406:31e5:1f6e:b162:e314) (Client Quit)
[06:15:02] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[06:15:45] *** Quits: Sario (uid356235@fosshost/cdo/Sario) (Quit: Connection closed for inactivity)
[06:16:22] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (Quit: Ping timeout (120 seconds))
[06:16:36] *** Joins: Deaygo (~Deaygo@let.deaygo.in)
[06:17:01] *** Quits: Stefan26 (~Stefan26@78-67-218-242-no207.tbcn.telia.com) (Ping timeout: 245 seconds)
[06:18:30] *** Joins: djapo (~archangel@user/djapo)
[06:19:16] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[06:20:35] *** Joins: djapo (~archangel@user/djapo)
[06:21:43] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-35ba-b7a0-d966-f0ce.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:21:47] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[06:23:19] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:24:06] *** Quits: techmaster (~Techmaste@S010600fc8dc657d3.ok.shawcable.net) (Ping timeout: 256 seconds)
[06:24:14] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[06:24:31] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[06:24:51] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[06:25:34] *** Quits: qpdb (~qpdb@user/qpdb) (Ping timeout: 260 seconds)
[06:26:37] *** Quits: Andrynet (~Andrynet@186.46.205.112) (Ping timeout: 265 seconds)
[06:26:55] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[06:27:26] *** Quits: junebug (~junebug@2600:1700:3db0:2540:ecd1:179f:7aa:862b) (Ping timeout: 260 seconds)
[06:28:32] *** Joins: Andrynet (~Andrynet@186.46.205.112)
[06:30:00] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[06:32:07] *** Joins: spithash (~spithash@user/spithash)
[06:32:44] *** Joins: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net)
[06:34:32] *** Quits: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net) (Client Quit)
[06:34:49] *** Joins: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net)
[06:35:15] *** Joins: millido (~millido@84.210.150.128)
[06:38:53] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[06:38:59] *** Joins: qpdb (~qpdb@user/qpdb)
[06:40:28] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Ping timeout: 256 seconds)
[06:40:38] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Read error: Connection reset by peer)
[06:41:16] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[06:42:51] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:44:54] *** Joins: adeliktas5 (~adeliktas@2001:16b8:22fb:2900:ff0b:f7a9:2da3:70c4)
[06:45:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:45:56] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[06:46:00] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Read error: Connection reset by peer)
[06:47:50] *** Quits: adeliktas (~adeliktas@2001:16b8:22c1:c800:2c75:424f:b294:4ea4) (Ping timeout: 256 seconds)
[06:48:25] *** Joins: Wulf (~Wulf@user/wulf)
[06:49:23] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[06:49:36] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[06:52:11] *** Quits: foxbox (~cammy@user/cammy) (Quit: I'll see you in the future.)
[06:53:02] *** Joins: foxbox (~cammy@user/cammy)
[06:54:41] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:55:33] *** Joins: moog (~moog@107.77.244.121)
[06:58:04] <NeilRG> jmcantrell, break up the cases better so mypy can understand
[06:58:28] <NeilRG> oh nm
[06:58:32] <NeilRG> my screen was cfrozen lol
[06:59:02] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[06:59:11] <jmcantrell> heh, no problem. turned out mypy was understanding it fine, i didn't consider all the cases
[06:59:22] <jmcantrell> thanks for replying though :)
[06:59:40] <NeilRG> glad you figured it out
[06:59:48] *** Quits: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net) (Ping timeout: 256 seconds)
[07:01:09] *** Quits: wlemuel (~user@210.22.124.110) (Remote host closed the connection)
[07:01:31] *** Joins: wlemuel (~user@210.22.124.110)
[07:02:27] *** Joins: axisys_ (~axisys@ec2-52-207-123-244.compute-1.amazonaws.com)
[07:03:21] *** Quits: axisys_ (~axisys@ec2-52-207-123-244.compute-1.amazonaws.com) (Client Quit)
[07:03:46] *** Joins: axisys_ (~axisys@ec2-52-207-123-244.compute-1.amazonaws.com)
[07:04:46] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[07:08:20] *** Quits: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Remote host closed the connection)
[07:13:34] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:14:41] *** Joins: nomic2 (~nomic@85.203.34.145)
[07:17:01] *** Quits: nomic (~nomic@51.52.78.152) (Ping timeout: 240 seconds)
[07:17:12] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[07:17:59] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Quit: Client closed)
[07:19:25] <aphysically> man the weird cases of pattern matching are weird
[07:19:31] <aphysically> "match a, b:"
[07:19:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:20:07] <voldial> does pydantic.BaseModel have something like @attr.__attrs_post_init__()?
[07:21:24] <aphysically> jinsun: do you think this is valid? https://bpa.st/PWVA
[07:22:11] <doug16k> isn't there a paste site that runs it too for python?
[07:22:19] <aphysically> dunno
[07:22:23] <madduck> jupyter?
[07:23:53] <aphysically> (spoiler, it works like you were matching a tuple)
[07:24:03] *** Parts: velix (~velix@user/velix) (Leaving)
[07:27:05] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:27:13] *** nomic2 is now known as nomic
[07:28:05] *** Joins: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net)
[07:28:35] *** Quits: imp (~imp@192-141-191-232.alternativaip.net.br) (Quit: imp)
[07:28:54] *** Joins: imp (~imp@192-141-191-232.alternativaip.net.br)
[07:28:55] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[07:29:02] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[07:29:02] *** Quits: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net) (Client Quit)
[07:29:35] *** Joins: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:09] <jinsun> voldial: you can subclass BaseModel and define your own `__init__` that calls `super().__init__` and does stuff after that
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:11] *** Quits: moog (~moog@107.77.244.121) (Remote host closed the connection)
[07:37:36] <doug16k> let's say I created an object that connects to some TCP thing, and had that in a global to cache and reuse it. if I then created a multiprocessing.Process, would they get that socket too and potentially try to use it at the same time as the parent?
[07:37:46] <jinsun> aphysically: that is valid right?
[07:38:05] <jinsun> pyright and python both don't complain and it look valid to me
[07:40:36] <voldial> jinsun: ah, thx
[07:40:38] <doug16k> do things have to keep checking pid to see if they are forked and drop the thing and create their own?
[07:41:32] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[07:41:45] <doug16k> i.e. tag caches with a pid and consider it invalidated if pid is wrong in cache data
[07:42:18] *** Joins: MercilessDeth (~brad@136.49.59.177)
[07:42:44] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[07:43:15] <jinsun> multiprocessing will copy objects, and at least on windwos it will try to pickle from the parent process and unpickle in the child
[07:43:36] *** Quits: imp (~imp@192-141-191-232.alternativaip.net.br) (Quit: imp)
[07:43:39] <doug16k> I mean on linux
[07:43:50] <jinsun> so stuff like threads and sockets would throw errors becuase it is unpickleable
[07:43:59] <doug16k> the fork will dup all the sockets right over into the child no?
[07:44:24] *** adeliktas5 is now known as adeliktas
[07:44:41] <jinsun> yeah on linux with fork() things change, I have no idea what happens then, I don't need mutilprocessing that much
[07:44:45] <doug16k> I am not passing it as a parameter
[07:45:31] <doug16k> I am just wondering if my paranoia is getting the better of me or you really do need to drop process-wide cached things that have a socket when pid changed on you
[07:46:29] <doug16k> how does mysql not have two or three children using the same connection simultaneously when forked out? it checks pid?
[07:46:37] *** Joins: maryo_87 (~Maryo@user/maryo)
[07:47:03] <doug16k> the pool creates all the connections up front, so if you multiprocess.Process'd it, they would all get the same pool no?
[07:47:17] <doug16k> same sockets? and screw up all over eachother if used at same time?
[07:47:23] <doug16k> it doesn't so it must check pid
[07:48:01] *** Joins: kdc (~kdc@196.211.197.159)
[07:50:08] <doug16k> it would be forking on linux right? would it spawn without me forcing it on linux?
[07:50:41] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48bcyhdprg6j1z7.ipv6.telus.net)
[07:50:57] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48bcyhdprg6j1z7.ipv6.telus.net) (Remote host closed the connection)
[07:51:01] <doug16k> if it spawns then life is too easy and none of the problems are possible
[07:51:21] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48bcyhdprg6j1z7.ipv6.telus.net)
[07:52:20] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Read error: Connection reset by peer)
[07:52:32] <jinsun> https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods
[07:52:44] <jinsun> spawn is default on windows and macOS
[07:52:56] <jinsun> fork is default on linux
[07:53:03] <doug16k> thought so. that makes sense
[07:53:03] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[07:53:18] <jinsun> and not even availble for windows obviously
[07:53:34] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[07:54:07] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:54:34] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[07:54:46] <jinsun> but you can just force it to spawn and forget about the fork case
[07:54:58] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[07:55:33] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[07:55:49] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:56:08] *** Joins: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[07:57:13] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:59:27] *** portalrat_ is now known as portalrat
[07:59:32] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Quit: beastDivision)
[07:59:47] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[07:59:50] *** Quits: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net) (Ping timeout: 260 seconds)
[08:00:47] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-35ba-b7a0-d966-f0ce.res6.spectrum.com)
[08:01:00] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[08:02:02] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[08:03:01] *** Joins: xardas (~xardas@149.233.51.127)
[08:08:05] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[08:09:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[08:11:19] <doug16k> so not only does it need to be thread safe, libraries need even more stuff to be fork safe?
[08:11:40] *** Joins: fikran (~fikran@user/fikran)
[08:11:51] *** Joins: hardwire (sid415742@id-415742.uxbridge.irccloud.com)
[08:14:19] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[08:15:10] *** Quits: maryo_87 (~Maryo@user/maryo) (Ping timeout: 256 seconds)
[08:18:42] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[08:19:53] *** Joins: djapo (~archangel@user/djapo)
[08:21:34] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[08:21:42] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[08:21:47] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[08:22:07] *** Quits: sreve (~quassel@p4ff449b5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:22:46] *** Joins: sreve (~quassel@p4ff446c2.dip0.t-ipconnect.de)
[08:26:42] <aphysically> jinsun: yep, it's valid
[08:26:52] <aphysically> but - the tree-sitter parser didn't accept it (it's fixed now)
[08:27:08] <bancroft> This package (xmlsec), has a build-time dependency (setuptools_scm), which pip magically downloads and installs at install time, and all of that completely bypasses all of my efforts at freezing the dependencies and will happily install too-recent versions of dependencies. How can I stop this nonsense from happening?  Is there a better way? Would I still have the same problem with python poetry?
[08:27:26] *** Quits: Dotz0cat (~Dotz0cat@h236.192.186.173.dynamic.ip.windstream.net) (Ping timeout: 268 seconds)
[08:28:27] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48bcyhdprg6j1z7.ipv6.telus.net) (Quit: Leaving)
[08:28:56] <aphysically> jinsun: do tonight https://adventofcode.com/
[08:28:58] <aphysically> 1 minute
[08:29:02] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[08:29:15] <neverwas> doug16k, I've noticed some child procs manually closing whatever inherited open fd's they're not interested in immediately upon forking
[08:29:23] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 265 seconds)
[08:29:51] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[08:30:16] *** Quits: qwert (~qwert@208.78.214.5) (Quit: Client closed)
[08:30:23] <neverwas> Anyone been using the new pattern matching stuff for solving AoC puzzles?
[08:30:43] <doug16k> I think I'm going to make a little "ForkSafeCache" that holds a dict and remembers which process created it, and flushes it if pid changes
[08:30:48] *** Joins: rany__ (~rany@user/rany)
[08:31:07] <doug16k> going to hammer os.getpid() I guess
[08:31:40] <doug16k> that is probably mapped right into userspace and doesn't even do a syscall
[08:32:06] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[08:32:10] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[08:32:24] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[08:33:51] *** Joins: Dotz0cat (~Dotz0cat@h222.215.213.151.dynamic.ip.windstream.net)
[08:34:09] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 276 seconds)
[08:34:42] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:3961:4cf9:16b:5bf0)
[08:34:48] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[08:36:42] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[08:36:47] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[08:36:48] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[08:37:12] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[08:38:41] *** Joins: maryo_87 (~Maryo@user/maryo)
[08:39:07] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:3961:4cf9:16b:5bf0) (Client Quit)
[08:39:36] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:3961:4cf9:16b:5bf0)
[08:39:59] *** Quits: wlemuel (~user@210.22.124.110) (Remote host closed the connection)
[08:40:55] *** Joins: wlemuel (~user@210.22.124.110)
[08:41:31] <doug16k> database code is hilarious. you can take something that is 15 minutes down to 3 seconds
[08:42:08] <doug16k> the more mean and nasty the query, the more it loves it and it's done instantly
[08:42:42] <doug16k> whereas one at a time on a cursor "helping" the sql server is slow as molasses
[08:43:38] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[08:43:47] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 252 seconds)
[08:43:47] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 252 seconds)
[08:43:47] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 252 seconds)
[08:43:57] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:44:38] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[08:45:22] <jinsun> bancroft: you want pip to use your already installed packages for build instead of isolated build?
[08:46:05] <doug16k> bancroft has special version requirements for something I think
[08:46:14] <jinsun> if that then you can run `pip install --no-build-isolation` instead of `pip install`
[08:46:42] <doug16k> that would probably make his workaround attempt work
[08:46:47] <jinsun> and it can be set permanently in pip.conf too I think
[08:47:17] <doug16k> tried installing the funny version of the dependency first
[08:47:31] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[08:49:47] <jinsun> yeah you can set no-build-isolation = true in the [install] section of pip.conf https://pip.pypa.io/en/stable/topics/configuration/#boolean-options
[08:51:06] *** Quits: d00gy (~d00gy@user/d00gy) (Quit: WeeChat 2.3)
[08:52:15] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 250 seconds)
[08:52:23] *** Joins: Trashlord__ (~trash@user/trashlord)
[08:53:09] <bancroft> I get the sense that this won't work in local development inside a virtual environment?
[08:54:43] <jinsun> pip.conf will work in virtualenv, and you can put another pip.conf inside your venv to override the gloabal settings
[08:55:06] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:55:08] <jinsun> https://pip.pypa.io/en/stable/topics/configuration/#loading-order
[08:58:05] <bancroft> ok that sounds very promissing, thank you jinsun and doug16k
[09:00:14] *** Quits: ubert (~Thunderbi@p200300ecdf1abbee60b6487a781d8af1.dip0.t-ipconnect.de) (Remote host closed the connection)
[09:00:32] *** Joins: ubert (~Thunderbi@p200300ecdf1abbee60b6487a781d8af1.dip0.t-ipconnect.de)
[09:00:52] *** Joins: dvx (~dvx@5.181.92.64)
[09:01:26] *** Quits: nomic (~nomic@85.203.34.145) (Quit: Leaving)
[09:01:49] *** Joins: nomic (~nomic@85.203.34.145)
[09:05:02] *** Quits: humberto1 (~humbertow@187.202.244.149) (Ping timeout: 256 seconds)
[09:12:11] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[09:16:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:16:25] *** Joins: upsala (~zcb@185.213.155.232)
[09:16:50] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 260 seconds)
[09:17:21] *** Quits: thurs8060142105 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[09:18:31] <doug16k> so this isn't paranoia then, right? https://gist.github.com/doug65536/ca2540fed3d2ba10f528d57ef82b025f
[09:18:33] *** Joins: audiocat (~audio@user/audio)
[09:18:52] *** Joins: thurs8060142105 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[09:19:00] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-b1ee-87e3-1ad0-a6a9.res6.spectrum.com)
[09:19:13] *** EdePopede is now known as ede
[09:20:31] *** Quits: camelCase (~camelCase@user/camelCase) (Quit: Leaving)
[09:21:03] *** Quits: lowfi (~lowfi@user/lowfi) (Quit: Leaving)
[09:21:10] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:22:26] <doug16k> to cache something I wouldn't trust at all, like a boto client
[09:23:37] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[09:23:38] <doug16k> so if someone tries to get cached client, it "disappears" when they look from child
[09:24:30] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:24:33] <doug16k> not crazy, right?
[09:26:50] *** Quits: traverseda (~traversed@47.55.112.225) (Quit: Leaving)
[09:27:29] <doug16k> (if factory is provided, makes them a new one as if nothing happened)
[09:29:43] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 268 seconds)
[09:31:02] *** Joins: analoq (~yashi@user/dies)
[09:31:14] *** Joins: stranac (~stranac@195.29.239.126)
[09:31:15] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 265 seconds)
[09:31:18] *** Quits: hypoon (~hypoon@pool-108-31-49-4.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[09:34:33] *** Joins: humberto1 (~humbertow@187.202.244.149)
[09:34:34] *** Quits: onichomp (~onichomp@2806:264:4404:801e:9d51:5c79:9d03:13d2) (Read error: Connection reset by peer)
[09:34:58] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[09:35:13] *** Joins: onichomp (~onichomp@2806:264:4404:801e:9d51:5c79:9d03:13d2)
[09:39:09] *** Quits: humberto1 (~humbertow@187.202.244.149) (Ping timeout: 252 seconds)
[09:42:28] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[09:48:07] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[09:49:50] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[09:50:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[09:51:49] *** Quits: maryo_87 (~Maryo@user/maryo) (Quit: Leaving)
[09:54:45] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[09:55:31] *** Quits: nomic (~nomic@85.203.34.145) (Quit: Leaving)
[09:59:50] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:00:15] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 265 seconds)
[10:01:14] *** Quits: jfcaron (~jfcaron@192.252.229.166) (Quit: jfcaron)
[10:01:32] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Remote host closed the connection)
[10:01:44] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[10:01:48] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[10:02:21] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[10:03:43] *** Quits: zepolen (~zepolen@ppp-94-66-223-207.home.otenet.gr) (Ping timeout: 252 seconds)
[10:03:48] *** Joins: zepolen_ (~zepolen@2a02:1388:2092:e26c:e9f:25ed:d60c:8187)
[10:06:14] *** Joins: djapo (~archangel@user/djapo)
[10:07:11] *** Joins: nomic (~nomic@51.52.78.152)
[10:07:57] *** Quits: ThC27 (ThC27@gateway/vpn/protonvpn/thc27) (Ping timeout: 268 seconds)
[10:12:40] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:12:49] *** Joins: ThC27 (ThC27@gateway/vpn/protonvpn/thc27)
[10:12:57] *** Quits: naranja (~orange@user/orangeboxcutter) (Ping timeout: 276 seconds)
[10:13:03] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[10:15:58] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 268 seconds)
[10:16:27] *** Joins: Enitin (~Enitin@82.102.22.86)
[10:17:55] *** Joins: mrwick (~mrwick@user/mrwick)
[10:19:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[10:20:15] *** Quits: giusb (~giusb@137.146.155.242) (Read error: Connection reset by peer)
[10:21:00] *** Joins: fikran (~fikran@user/fikran)
[10:21:52] *** Joins: nomic2 (~nomic@85.203.34.35)
[10:22:05] *** Joins: hemstock (~hemstock@194.59.250.234)
[10:24:02] *** Quits: nomic (~nomic@51.52.78.152) (Ping timeout: 240 seconds)
[10:24:12] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:24:18] *** Joins: scruz (~scruz@41.58.251.179)
[10:24:58] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[10:25:48] *** Joins: dtux (~dtux@c-98-207-149-218.hsd1.ca.comcast.net)
[10:29:31] *** Joins: ingo (~ingo@user/ingo)
[10:30:59] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:31:03] *** nomic2 is now known as nomic
[10:32:22] *** Joins: giusb (~giusb@137.146.155.242)
[10:32:59] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[10:33:39] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 250 seconds)
[10:36:04] *** Quits: remexre (~remexre@user/remexre) (Remote host closed the connection)
[10:36:20] *** Quits: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[10:36:49] *** Joins: Knaxius (~Knaxius@user/Knaxius)
[10:36:57] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[10:37:42] *** Joins: chele (~chele@user/chele)
[10:37:56] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:38:01] *** Joins: MrAureliusR_ (~MrAureliu@user/mraureliusr)
[10:38:54] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Quit: ZZZzzz…)
[10:39:03] *** Joins: carl- (~carl-@185.103.188.131)
[10:39:07] *** Trashlord__ is now known as Trashlord
[10:39:24] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (Ping timeout: 268 seconds)
[10:39:53] *** Quits: scruz (~scruz@41.58.251.179) (Ping timeout: 265 seconds)
[10:41:04] *** Joins: carl-- (~carl-@185.103.188.130)
[10:41:09] *** Quits: grandrew (~grandrew@2600:1700:42f3:9180:f22f:74ff:feac:90a3) (Read error: Connection reset by peer)
[10:42:33] *** Quits: maplefinger (~maplefing@user/lindis) (Remote host closed the connection)
[10:42:46] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:43:34] *** Quits: nomic (~nomic@85.203.34.35) (Remote host closed the connection)
[10:43:38] *** Quits: carl- (~carl-@185.103.188.131) (Ping timeout: 256 seconds)
[10:44:48] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[10:45:27] *** Joins: luigibu (~luigi@80.30.201.209)
[10:45:37] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:5e02:45ca:1780:3df6)
[10:47:43] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 252 seconds)
[10:48:54] *** Joins: philectro (~quassel@2a02:2788:1024:671:8196:36b8:e616:1348)
[10:50:15] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:50:25] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[10:50:48] *** Joins: remexre (~remexre@user/remexre)
[10:50:55] *** Joins: seednode (~seednode@user/seednode)
[10:51:31] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[10:52:24] *** Joins: brabrax (~brabrax@user/brabrax)
[10:57:49] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:9563:3661:427a:9acd)
[10:59:33] *** Joins: aniketgm (~Aniket@49.36.107.79)
[11:01:39] *** Quits: aniketgm (~Aniket@49.36.107.79) (Read error: Connection reset by peer)
[11:02:51] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[11:03:12] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[11:04:00] *** Joins: brabrax (~brabrax@user/brabrax)
[11:04:28] *** Joins: Spaceflight (uid423739@id-423739.ilkley.irccloud.com)
[11:05:04] *** Joins: evocatus (~evocatus@91.211.251.87)
[11:06:30] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[11:09:37] *** Quits: ThC27 (ThC27@gateway/vpn/protonvpn/thc27) (Ping timeout: 268 seconds)
[11:10:23] *** Joins: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il)
[11:11:08] *** Joins: ThC27 (~ThC27@130.95.254.47)
[11:11:25] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[11:12:30] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:13:01] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Ping timeout: 252 seconds)
[11:13:05] *** Quits: wlemuel (~user@210.22.124.110) (Remote host closed the connection)
[11:13:40] *** Joins: wlemuel (~user@210.22.124.110)
[11:14:47] *** Joins: aniketgm (~Aniket@49.36.107.79)
[11:14:48] *** Joins: the_lanetly_052_ (~the_lanet@185.30.88.200)
[11:14:55] *** Quits: wlemuel (~user@210.22.124.110) (Remote host closed the connection)
[11:15:22] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 260 seconds)
[11:15:23] *** Joins: wlemuel (~user@210.22.124.110)
[11:17:47] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[11:18:17] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 250 seconds)
[11:19:40] *** Quits: Knaxius (~Knaxius@user/Knaxius) (Quit: bye)
[11:19:47] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[11:20:47] *** Joins: lethu (~lethu@user/lethu)
[11:21:02] *** Quits: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il) (Ping timeout: 256 seconds)
[11:21:21] *** Joins: slav0nic (slav0nic@python.su)
[11:21:36] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:21:57] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[11:22:25] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:22:28] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Remote host closed the connection)
[11:23:32] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[11:23:39] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[11:24:43] *** Joins: VaniaPy (~VaniaPy@46.12.178.58.dsl.dyn.forthnet.gr)
[11:24:54] *** Joins: Knaxius (~Knaxius@user/Knaxius)
[11:25:13] *** Joins: oldguy (~oldguy@user/oldguy)
[11:26:02] <azidhaka> Hi everyone, unix_ts = time.mktime().timetuple() returns the unix timestamp as a float (xxxxxxx.0), but i want to use it as string without the decimal .0 at the end, what is the best way?
[11:27:24] *** Joins: NeoCore (~neocore@195.200.221.87)
[11:27:56] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[11:29:08] <Affliction> something like "%i" % unix_ts
[11:29:10] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:245f:fa81:fe66:b6df)
[11:29:17] <azidhaka> str(int(timestamp)) looks bad to me
[11:29:30] <grawity> if you're formatting it as a string, you can specify the wanted precision, e.g. "%.0f" % the_float, or f"{the_float:.0f}"
[11:29:46] <grawity> or I guess even "%d" % the_float,
[11:29:53] <grawity> if you want an integer, then int() is the most obvious one (I think it always truncates), other options are round(), math.floor(), math.ceil(), math.trunc()
[11:29:53] *** Quits: audiocat (~audio@user/audio) (Ping timeout: 252 seconds)
[11:30:24] <grawity> nothing particularly wrong with str(int(x)) if it's a situation where you'd be using str() anyway
[11:30:40] <azidhaka> thank you
[11:30:48] <Affliction> yeah, and if you need both an int and a str, i = int(x); s = str)i) is fine
[11:31:14] <Repiphany> f'{unix_ts:.0f}' rounds
[11:31:27] <Repiphany> Oh, I'm slow
[11:31:59] <azidhaka> is there a way to get the unix timestamp as an int directly?
[11:32:19] *** Joins: grooverman_ (~grooverma@177.102.119.40)
[11:32:22] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 256 seconds)
[11:32:37] <doug16k> datetime.now().timestamp()
[11:32:42] <azidhaka> this conversion will be done hundreds of times per second, if i can simplify it somehow...
[11:32:47] <doug16k> or whatevertime.timestamp()
[11:33:17] *** Joins: sudomann (~sudomann@98.219.211.182)
[11:33:19] *** Joins: kosh (~kosh@user/kosh)
[11:34:03] <doug16k> azidhaka, it won't be an int, it would be float of seconds since unix epoch
[11:34:12] <doug16k> cast it and there you go
[11:34:23] *** Quits: wlemuel (~user@210.22.124.110) (Remote host closed the connection)
[11:34:29] <azidhaka> okay, thanks
[11:34:48] *** Joins: wlemuel (~user@210.22.124.110)
[11:35:02] *** Joins: tobybl (~tobybl@213.31.132.151)
[11:35:11] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 250 seconds)
[11:35:12] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:35:14] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[11:38:00] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[11:38:01] *** Quits: giusb (~giusb@137.146.155.242) (Quit: WeeChat 3.3)
[11:38:18] *** Joins: giusb (~giusb@137.146.155.242)
[11:38:36] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 268 seconds)
[11:40:10] <rakoon> How can i handle a never retrieved asyncio task when an exception occurs in an earlier coroutine?
[11:40:13] <doug16k> start worrying about precision in the year 144683000 or so
[11:41:05] <rakoon> correction: handle "task exception was never retrieved"
[11:42:49] *** Joins: grundrausch3n (~grundraus@p200300e9ef18ac00d5af2064097ce1bb.dip0.t-ipconnect.de)
[11:44:03] *** Quits: oldguy (~oldguy@user/oldguy) (Quit: WeeChat 2.3)
[11:44:09] *** Joins: palasso (~palasso@user/palasso)
[11:44:19] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:9563:3661:427a:9acd) (Quit: smeeagle)
[11:46:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:48:13] *** Joins: cosimone (~user@93-47-231-203.ip115.fastwebnet.it)
[11:51:22] *** Joins: sudomann (~sudomann@98.219.211.182)
[11:51:26] *** Quits: daex (~daex@user/daex) (Quit: /me 's znc kicks the bucket)
[11:51:46] *** Joins: daex (~daex@user/daex)
[11:52:12] <doug16k> rakoon, because it is swallowing them and you never see them and it's hiding bugs?
[11:52:15] *** Quits: Fozzworth (~Fozzworth@user/fozzworth) (Ping timeout: 252 seconds)
[11:54:18] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[11:54:50] *** Joins: simen (~simen@host-37-191-236-181.lynet.no)
[11:55:10] <doug16k> you can't fire and forget
[11:55:31] *** Quits: aniketgm (~Aniket@49.36.107.79) (Read error: Connection reset by peer)
[11:55:45] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 250 seconds)
[11:56:00] <simen> I see a lot of places that print(json.dumps(dictionary)) should pretty print in the terminal, but it doesn't on my system (linux with bash). Is the information correct, or is there anything else I should do?
[11:56:36] <doug16k> simen, what happens if you print(repr(json.dumps(dictionary)))
[11:56:54] *** Joins: SteveR (~SteveR@192.146.154.3)
[11:56:57] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:3961:4cf9:16b:5bf0) (Quit: Client closed)
[11:57:19] *** Joins: jazzy (~jaziz@user/jaziz)
[11:57:20] *** MrAureliusR_ is now known as MrAureliusR
[11:57:43] <simen> doug16k pretty much the same, but I see a lot of \n
[11:58:03] <doug16k> repr gives it to you as source code
[11:58:28] *** Joins: aniketgm (~Aniket@49.36.107.79)
[11:58:40] <doug16k> how pretty do you mean?
[11:58:42] <simen> I've resorted to pipe the output into `python -m json.tool`, which works fine. However I'd like to print non json things in between
[11:59:00] <doug16k> I haven't seen anything pretty in my ubuntu
[11:59:15] <simen> doug16k the output is just all in a single line
[11:59:24] <doug16k> dumps can format for you
[11:59:31] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[11:59:36] <doug16k> iirc
[11:59:54] <grawity> json.dumps() doesn't know that it is writing to terminal, and AFAIK, it has always used a compact format by default, maybe not equally compact across all versions
[12:00:11] <deniska> json.dumps(obj, indent=4)
[12:00:13] <doug16k> try adding intent=True
[12:00:21] <doug16k> sorry integer ya
[12:00:21] *** Joins: djapo (~archangel@user/djapo)
[12:00:33] <jinsun> True == 1 so it will work but weird
[12:00:36] <deniska> indent=True would technically work :D
[12:00:52] <rakoon> doug16k: sort of yes, and i just found out that in this case the set_exception_handler is being hit while in the past i couldnt see when that function was invoked
[12:01:14] <doug16k> rakoon, futures catch exceptions for you and squirrel them away
[12:01:22] <doug16k> when someone calls .result() it rethrows it
[12:01:34] <rakoon> doug16k: but it is hit when i Ctrl+C, i've read about it that when the future is released from the event loop goes there
[12:01:36] <doug16k> you are seeing it freak out when nobody looked
[12:02:04] <simen> deniska: great, thank you!
[12:02:10] *** Joins: manti7 (~manti7@176.10.104.94)
[12:02:24] <rakoon> doug16k: can i paste some code so u can see and tell me? im not sure i fully follow you
[12:02:39] *** Joins: phylaz (~phylaz@80.203.89.4)
[12:02:40] <doug16k> sure
[12:04:06] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 256 seconds)
[12:04:22] *** Quits: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[12:04:44] <doug16k> if it catches an exception and holds onto it for you until you get the future result, and nobody gets the future result, it never had a chance to rethrow and propagate it, so it freaks out
[12:04:46] *** Joins: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net)
[12:05:14] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:05:26] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 265 seconds)
[12:05:36] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:06:18] *** Joins: Naan` (~Naan@user/naan)
[12:06:23] <doug16k> which is great. futures would be unusable if they let that go without freaking out
[12:06:28] *** Joins: rendar (~rendar@user/rendar)
[12:06:33] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[12:07:01] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:08:28] *** Quits: ThC27 (~ThC27@130.95.254.47) (Quit: ThC27)
[12:08:54] *** Joins: evocatus_ (~evocatus@213.193.2.105)
[12:09:00] *** Joins: sudomann (~sudomann@98.219.211.182)
[12:09:23] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi)
[12:09:30] *** Quits: evocatus_ (~evocatus@213.193.2.105) (Remote host closed the connection)
[12:09:58] <braxas> hi, I'm looking for other things like this for python: https://snyk.io/advisor/python/structlog
[12:10:17] <braxas> I want a package health score shield
[12:10:38] <braxas> https://snyk.io/advisor/python/structlog/badge.svg
[12:11:24] <doug16k> haha I thought you were a bot for a second
[12:11:43] <doug16k> took a second for "health score shield" to sink in
[12:11:54] *** Quits: evocatus (~evocatus@91.211.251.87) (Ping timeout: 268 seconds)
[12:12:06] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[12:13:02] <petaflot> hello! I forked the qrcode library, symlinked my git repo in ~/.local/lib/python3.9/site-packages/ ; when I'm in my git repo I can do `import qrcode ; import qrcode.image` just as expected ; however when I'm in another dir `import qrcode` works ut `import qrcode.image` fails is there a way to check I'm really importing the file I expect? (ie. show the file path upon import)
[12:13:11] <braxas> I guess there are some options here: https://shields.io/category/analysis
[12:13:25] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[12:13:38] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[12:14:04] <braxas> and https://shields.io/category/rating
[12:14:10] <braxas> not sure if many of them work for python
[12:14:45] <rakoon> doug16k: https://paste.ee/p/IgBC3
[12:16:57] <doug16k> looks ok
[12:17:35] <doug16k> no futures escape - they are all awaited
[12:18:05] <doug16k> must be in other code not shown
[12:18:09] *** Joins: yourfate_ (~yourfate@cabal.yourfate.org)
[12:18:48] <petaflot> fixed. symlink was poiting one dir up
[12:19:08] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[12:19:35] *** Quits: yourfate (~yourfate@cabal.yourfate.org) (Ping timeout: 250 seconds)
[12:22:29] *** Joins: delvian (~delvian@41.13.196.166)
[12:23:11] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:23:13] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:24:00] *** Quits: giusb (~giusb@137.146.155.242) (Changing host)
[12:24:00] *** Joins: giusb (~giusb@user/giusb)
[12:24:12] <aphysically> jinsun: tonight AoC, the counting part for 10 and 40 case is a mess but whatever I'll clean it up tomorrow maybe https://bpa.st/RJUQ
[12:24:28] <aphysically> window(.., 2) is just a windowing function, you can replace with itertools.pairwise(...) in 3.10
[12:25:17] *** Quits: zepolen_ (~zepolen@2a02:1388:2092:e26c:e9f:25ed:d60c:8187) (Read error: Connection reset by peer)
[12:27:01] *** Joins: sudomann (~sudomann@98.219.211.182)
[12:27:31] *** Joins: ano (~ano@user/ano)
[12:28:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[12:28:48] *** Joins: zepolen_ (~zepolen@ppp-94-66-223-207.home.otenet.gr)
[12:30:20] *** Joins: fikran (~fikran@user/fikran)
[12:31:04] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[12:31:12] *** Quits: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de) (Remote host closed the connection)
[12:31:26] <rakoon> doug16k: the thing in the comment happens :/
[12:31:32] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 265 seconds)
[12:31:36] *** Joins: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de)
[12:32:09] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:32:44] <rakoon> doug16k: i mean i handle the t1 exception but t2 prints that exception as well and i would like if possible to not have it printed, handle it
[12:33:01] *** Quits: goutly (~gitly@185.69.144.142) (Ping timeout: 250 seconds)
[12:33:16] <doug16k> you have it on return_exceptions=True
[12:33:23] <rakoon> doug16k: no
[12:33:25] <doug16k> instead of rethrowing it on await, it returns it
[12:33:27] <rakoon> the t1 yes
[12:33:37] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: leaving)
[12:33:38] <doug16k> ah 16 doesn't
[12:33:53] <rakoon> 16?
[12:33:54] *** Joins: LimeOn (~user@user/limeon)
[12:33:57] <doug16k> line 16
[12:34:19] <doug16k> ah!
[12:34:26] <rakoon> the exception happens in 13
[12:34:35] <rakoon> which i get cause of return_exceptions
[12:34:35] <doug16k> line 29 needs to be (await result) right?
[12:35:03] *** Joins: goutly (~gitly@148.252.133.169)
[12:35:09] <doug16k> nobody awaits that
[12:35:16] <rakoon> yes sry i forgot to write " for result in await asyncio.gather(*coros, return_exceptions=True)"
[12:35:32] <rakoon> i await i just forgot it in the paste
[12:35:53] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 265 seconds)
[12:36:27] <rakoon> so the exception happens in 13 but since the task in 12 already started throws that t2 (line 12) exception was never retrieved
[12:36:44] <rakoon> so i sort of have 2 exceptions where i get 1 from gather which i handle
[12:36:54] <doug16k> sounds right
[12:37:10] <rakoon> im wondering if i can handle the other as well
[12:37:46] <doug16k> that's what return_exceptions is for
[12:37:56] <doug16k> here's them all. easy
[12:38:08] <rakoon> well it doesnt, it returns only 1
[12:38:23] <doug16k> line 16 doesn't say return_exceptions=True
[12:38:31] <rakoon> i guess it picks the first one and in the next millisecond the other happens
[12:38:39] <rakoon> oh
[12:39:17] <rakoon> wait in the 13 the exception happens i thought the code stops right there
[12:39:44] *** Joins: CyDefect (~troll@213.55.224.84)
[12:39:55] *** Quits: mat001 (~mat001@c-71-202-248-112.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[12:40:24] <doug16k> stops as in what? raises and gets caught by .gather at line 25 and continues loop?
[12:40:38] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[12:40:40] <rakoon> yes
[12:40:54] *** Joins: alzgh (~alzgh@user/alzgh)
[12:41:03] *** Joins: BlueSky (~BlueSky@user/bluesky)
[12:41:06] <rakoon> i mean this is what i understand
[12:41:10] <doug16k> same
[12:41:31] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:41:47] <rakoon> so i guess we dont have a solution right?
[12:41:54] <doug16k> to what
[12:41:59] <doug16k> to that exception?
[12:42:02] *** Quits: goutly (~gitly@148.252.133.169) (Ping timeout: 240 seconds)
[12:42:10] <rakoon> to catch/handle the line 12 exception
[12:42:27] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[12:42:42] <doug16k> oh if you must, then try: except around line 12 and in the catch, await the other one
[12:43:03] <doug16k> around line 13 sorry
[12:43:25] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[12:43:31] <rakoon> ok then ill ask this: i put loop.set_exception_handler and the line 12 exception goes there and i can handle it
[12:43:40] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:43:45] <doug16k> yuck but ok
[12:43:49] <rakoon> but it only goes there when i hit Ctrl+C
[12:43:59] <rakoon> yuck? why seems right
[12:44:23] <doug16k> depends
[12:44:27] *** Joins: goutly (~gitly@148.252.133.169)
[12:44:37] <doug16k> as long as you don't just stomp on the exceptions and ignore them
[12:44:39] *** Joins: sudomann (~sudomann@98.219.211.182)
[12:45:06] <doug16k> so now when you are debugging, it won't stop
[12:45:16] <doug16k> have to put it on drive-you-nuts mode and stop on handled exceptions
[12:45:50] <rakoon> i dont follow :D
[12:45:50] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Remote host closed the connection)
[12:46:07] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: WeeChat 3.3)
[12:46:13] <rakoon> so this main() runs in a thread spawned when a flask request happens
[12:46:14] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[12:46:16] <doug16k> it's okay - futures are already putting exception guards around everything like crazy
[12:46:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[12:46:49] <rakoon> i thought that when it finishes it would go to the exception handler but it doesnt
[12:46:57] <doug16k> I'm one of those weirdos that believe that you let it crash if it crashes
[12:47:09] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Client Quit)
[12:47:23] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:47:40] <doug16k> then it means something if it isn't crashing
[12:48:51] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 250 seconds)
[12:48:53] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Quit: guenhael)
[12:49:05] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[12:49:06] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[12:49:22] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Ping timeout: 256 seconds)
[12:49:40] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[12:50:09] <doug16k> ah then you can't really let it crash
[12:50:16] <doug16k> have to 500 or something
[12:50:34] *** Quits: cosimone (~user@93-47-231-203.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[12:51:23] *** Joins: guenhael1 (~Thunderbi@193.52.208.97)
[12:52:44] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Read error: Connection reset by peer)
[12:52:44] *** guenhael1 is now known as guenhael
[12:53:00] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:54:00] <doug16k> can't fork the paste? this should work: https://gist.github.com/doug65536/c59d64b339f5e3267ae988cd432983ee#file-gistfile1-txt-L13
[12:54:55] *** Joins: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-0134.v6.ethz.ch)
[12:54:56] <kek_> hi
[12:55:55] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[12:56:06] *** Quits: wlemuel (~user@210.22.124.110) (Remote host closed the connection)
[12:56:16] *** Joins: Portugol9 (~Portugol9@user/portugol9)
[12:56:16] *** Quits: aniketgm (~Aniket@49.36.107.79) (Quit: leaving)
[12:56:30] *** Joins: wlemuel (~user@210.22.124.110)
[12:56:47] *** Quits: l4yer (~l4yer@195.181.170.210) (Remote host closed the connection)
[12:56:53] <rakoon> doug16k: i changed it to start the t2 inside the if statements
[12:57:04] <doug16k> rakoon, or just realize that you have to gather t1 and t2 and just do that with return_exceptions
[12:57:41] <doug16k> why separately await t1 - it's just making it hard
[12:58:11] <doug16k> if you did something between, sure
[12:58:18] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[12:59:01] <rakoon> doug16k: i need t1 for sure for the if statement. Then the if stement will be: either gather(t2, t3) or await t2
[13:01:00] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:01:14] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 268 seconds)
[13:01:35] <rakoon> doug16k: https://paste.ee/p/9x5qo
[13:01:38] <doug16k> yeah, you have to do a bit of tedious work to make sure nothing escapes without awaiting it
[13:01:46] <rakoon> yeah
[13:01:51] *** yourfate_ is now known as yourfate
[13:02:10] <rakoon> doug16k: thanks for taking the time to help me
[13:02:13] <doug16k> that's better
[13:02:19] *** Joins: shad (~shad@user/shad)
[13:02:19] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[13:02:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[13:02:32] <doug16k> np
[13:02:39] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[13:02:41] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[13:02:53] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[13:03:33] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Client Quit)
[13:04:15] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[13:04:53] *** Joins: luigibu (~luigi@80.30.201.209)
[13:08:35] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[13:08:55] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[13:08:55] *** Joins: moldorcoder7_ (~moldorcod@37.120.143.28)
[13:09:01] *** Joins: drizztbsd (~timothy@redhat/timothy)
[13:09:02] *** Joins: wilk_ (~wilk@user/wilk)
[13:09:10] *** Joins: ThomasJ_ (~ThomasJ@user/thomasj)
[13:09:17] *** Joins: vbgunz_ (~vbgunz@35.141.71.47)
[13:09:18] *** Joins: rwb (~augh@theguntretort.com)
[13:09:20] *** Joins: deetwelv- (~deetwelve@user/deetwelve)
[13:09:23] *** Joins: amosbird- (~amosbird@13.75.119.182)
[13:09:25] *** Joins: waveclaw_ (~quassel@ip98-162-237-241.ok.ok.cox.net)
[13:09:27] *** Joins: Portugol9_ (~Portugol9@user/portugol9)
[13:09:30] *** Joins: notevil_ (~notevil@user/notevil)
[13:09:30] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[13:09:31] *** Quits: _0x5c (~\0x5c@miaow/nonantedeux) (Remote host closed the connection)
[13:09:33] *** Joins: abc_- (~abc@user/abc)
[13:09:35] *** Joins: dv2 (~dv2@eclipse.oxfordfun.com)
[13:09:40] *** Joins: kdas_ (~hopless@dgplug/kushal)
[13:09:49] *** Joins: hirish_ (~hirish@ip85.ip-137-74-20.eu)
[13:09:54] *** Joins: fflam_ (~mdt@ip72-220-60-77.sd.sd.cox.net)
[13:09:55] *** Joins: _0x5c (~\0x5c@miaow/nonantedeux)
[13:09:58] *** Joins: plastico (~plastico@neomutt/plastico)
[13:10:01] *** Joins: raukadah (~chandanku@51.159.58.174)
[13:10:10] *** Joins: trench_ (trench@user/trench)
[13:10:20] *** Joins: doc|home (~doc@user/doc)
[13:10:20] *** Joins: Techcable_ (~Techcable@168.235.93.147)
[13:10:20] *** Quits: AM (~techman@87-94-110-75.bb.dnainternet.fi) (Killed (NickServ (GHOST command used by AM_)))
[13:10:23] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[13:10:25] *** Joins: mjacob_ (~mjacob@adrastea.uberspace.de)
[13:10:28] *** Joins: AM (~techman@87-94-110-75.bb.dnainternet.fi)
[13:10:38] *** Joins: mdw (~root@159.65.86.163)
[13:10:46] *** Joins: Wulf4 (~Wulf@user/wulf)
[13:10:47] *** Joins: erry_ (~erry@errietta.me)
[13:10:57] *** Joins: SuperL4g (~akulbe@user/superlag)
[13:11:00] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:11:04] *** Joins: bluss_ (~bluss@user/bluss)
[13:11:04] *** Joins: chilvers1 (~chilversc@user/chilversc)
[13:11:07] *** Joins: jjhoo_ (~jahakala@user/jjhoo)
[13:11:07] *** Joins: vinnix_ (~vinnix@user/vinnix)
[13:11:13] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[13:11:14] *** Joins: BlessJah_ (~BlessJah@user/blessjah)
[13:11:15] *** Joins: fredrikh1 (~fhl@myrsnipa.uio.no)
[13:11:22] *** Joins: gdd1 (~gdd@129.199.146.230)
[13:11:26] *** Joins: d3x_ (michal@bielaw.ski)
[13:11:28] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[13:11:35] *** Joins: matrixis1 (~matrixise@python/psf/matrixise)
[13:11:40] *** Joins: OMGOMG_ (~bobrobert@poppy.ifi.uio.no)
[13:11:40] *** Joins: schumaml1 (~schumaml@dslb-188-104-168-024.188.104.pools.vodafone-ip.de)
[13:11:43] *** Joins: TDT_ (~TDT@20.118.225.139)
[13:11:47] *** Joins: ferros (~ferros@vps-eacaba1b.vps.ovh.net)
[13:12:10] *** Joins: nuala2 (~nuala@user/nuala)
[13:12:21] *** Quits: hemstock (~hemstock@194.59.250.234) (Ping timeout: 268 seconds)
[13:12:38] *** Server sets mode: +Ccnrtf #python-unregistered
[13:12:41] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[13:13:10] *** Joins: mikeputnam1 (~mikeputna@wilug/mikeputnam)
[13:13:23] *** Quits: _0x5c (~\0x5c@miaow/nonantedeux) (Remote host closed the connection)
[13:13:26] *** Joins: skreech1 (skreech@user/skreech)
[13:13:40] *** Joins: _0x5c (~\0x5c@miaow/nonantedeux)
[13:13:45] *** Joins: Scotteh_ (~Scotteh@user/scotteh)
[13:14:08] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:14:11] *** Joins: Henry_The_Longsh (~Henry@46.101.4.181)
[13:14:37] *** Joins: led_belly_ (~led_belly@196.240.57.117)
[13:14:42] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:14:42] *** Joins: CuriousErnestBri (~CuriousEr@user/curiousernestbro)
[13:14:52] *** Joins: cyphase_eviltwin (~cyphase@user/cyphase)
[13:14:52] *** Joins: luigibu (~luigi@80.30.201.209)
[13:15:03] *** Joins: tabakhase__ (tabakhase@user/tabakhase)
[13:15:32] *** Quits: \\ (~\0x5c@miaow/nonantedeux) (Killed (NickServ (GHOST command used by _0x5c)))
[13:15:43] *** _0x5c is now known as \\
[13:15:47] *** Joins: michaeli1 (~michaelis@193.183.209.17)
[13:15:52] *** Joins: Scarecr0- (scarecr0w@user/scarecr0w)
[13:16:13] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:16:43] *** Quits: Portugol9 (~Portugol9@user/portugol9) (*.net *.split)
[13:16:43] *** Quits: mozgalom (~mozgalom@194.144.47.113) (*.net *.split)
[13:16:44] *** Quits: VaniaPy (~VaniaPy@46.12.178.58.dsl.dyn.forthnet.gr) (*.net *.split)
[13:16:44] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (*.net *.split)
[13:16:44] *** Quits: the_lanetly_052_ (~the_lanet@185.30.88.200) (*.net *.split)
[13:16:44] *** Quits: carl-- (~carl-@185.103.188.130) (*.net *.split)
[13:16:44] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (*.net *.split)
[13:16:44] *** Quits: stranac (~stranac@195.29.239.126) (*.net *.split)
[13:16:44] *** Quits: Leonarbro (~Leonet@user/leonarbro) (*.net *.split)
[13:16:44] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[13:16:44] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (*.net *.split)
[13:16:44] *** Quits: foxbox (~cammy@user/cammy) (*.net *.split)
[13:16:44] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[13:16:44] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (*.net *.split)
[13:16:44] *** Quits: qpdb (~qpdb@user/qpdb) (*.net *.split)
[13:16:44] *** Quits: Andrynet (~Andrynet@186.46.205.112) (*.net *.split)
[13:16:44] *** Quits: schumaml (~schumaml@dslb-188-104-168-024.188.104.pools.vodafone-ip.de) (*.net *.split)
[13:16:44] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[13:16:44] *** Quits: Terexen (~terexen@user/terexen) (*.net *.split)
[13:16:44] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[13:16:44] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[13:16:44] *** Quits: rexbinary (~rexbinary@user/rexbinary) (*.net *.split)
[13:16:44] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (*.net *.split)
[13:16:44] *** Quits: arinov (~arinov@213.194.126.155) (*.net *.split)
[13:16:44] *** Quits: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net) (*.net *.split)
[13:16:44] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (*.net *.split)
[13:16:44] *** Quits: xa0s (~xa0s@mab.sdf.org) (*.net *.split)
[13:16:44] *** Quits: norwood (~mostlyhum@104-3-188-144.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[13:16:44] *** Quits: somlis (~somlis@user/somlis) (*.net *.split)
[13:16:44] *** Quits: Maikel (~Maikel@130.61.63.136) (*.net *.split)
[13:16:44] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[13:16:44] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (*.net *.split)
[13:16:44] *** Quits: DXR (~lyrical@193.92.178.179.dsl.dyn.forthnet.gr) (*.net *.split)
[13:16:44] *** Quits: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl) (*.net *.split)
[13:16:44] *** Quits: demophoon4 (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (*.net *.split)
[13:16:44] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (*.net *.split)
[13:16:44] *** Quits: luke-jr (~luke-jr@user/luke-jr) (*.net *.split)
[13:16:44] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[13:16:44] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (*.net *.split)
[13:16:44] *** Quits: mawk (~mawk@wireguard/contributor/mawk) (*.net *.split)
[13:16:44] *** Quits: led_belly (~led_belly@196.240.57.117) (*.net *.split)
[13:16:44] *** Quits: OPK (~OPK@user/opk) (*.net *.split)
[13:16:44] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (*.net *.split)
[13:16:44] *** Quits: txhc4life (~txhc4life@cpe-70-117-20-42.satx.res.rr.com) (*.net *.split)
[13:16:44] *** Quits: zaz\ (~zaz@poneybl.eu) (*.net *.split)
[13:16:44] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[13:16:44] *** Quits: Viewday11 (~Viewday@user/viewday) (*.net *.split)
[13:16:44] *** Quits: BlessJah (~BlessJah@user/blessjah) (*.net *.split)
[13:16:44] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[13:16:44] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[13:16:44] *** Quits: vbgunz (~vbgunz@35.141.71.47) (*.net *.split)
[13:16:44] *** Quits: Techcable (~Techcable@168.235.93.147) (*.net *.split)
[13:16:44] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (*.net *.split)
[13:16:44] *** Quits: darkstardevx (~darkstard@50.39.115.145) (*.net *.split)
[13:16:44] *** Quits: zlg (~zlg@user/zlg) (*.net *.split)
[13:16:44] *** Quits: Gamah (~quassel@gamah.net) (*.net *.split)
[13:16:44] *** Quits: spudpnds (~spud@eidolon.muppetlabs.com) (*.net *.split)
[13:16:44] *** Quits: grym (~grym@user/grym) (*.net *.split)
[13:16:44] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (*.net *.split)
[13:16:44] *** Quits: SuperLag (~akulbe@user/superlag) (*.net *.split)
[13:16:44] *** Quits: Kanjizai (~kanjizai@cpe-107-185-193-171.socal.res.rr.com) (*.net *.split)
[13:16:44] *** Quits: rya (~ry@user/rya) (*.net *.split)
[13:16:44] *** Quits: pigweed (~pigweed@184.97.131.31) (*.net *.split)
[13:16:44] *** Quits: Axy (~Axy@user/axy) (*.net *.split)
[13:16:44] *** Quits: nexgen2 (~nexgen@li614-178.members.linode.com) (*.net *.split)
[13:16:44] *** Quits: binary01 (~binary01@174.141.153.217) (*.net *.split)
[13:16:44] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (*.net *.split)
[13:16:44] *** Quits: PrinceMachiavell (~PrinceMac@c-174-63-6-58.hsd1.ma.comcast.net) (*.net *.split)
[13:16:44] *** Quits: mgedmin (~mg@user/mgedmin) (*.net *.split)
[13:16:44] *** Quits: esv (~esv@74.124.178.154) (*.net *.split)
[13:16:44] *** Quits: c4017w_ (~c4017@209.52.68.8) (*.net *.split)
[13:16:44] *** Quits: Forkk (~forkk@li926-228.members.linode.com) (*.net *.split)
[13:16:44] *** Quits: dcaro_away (~dcaro@user/dcaro) (*.net *.split)
[13:16:44] *** Quits: Allegretto (~allegrett@84-236-53-184.pool.digikabel.hu) (*.net *.split)
[13:16:44] *** Quits: chilversc (~chilversc@user/chilversc) (*.net *.split)
[13:16:44] *** Quits: bailsman (~Mm1@xls01.freecult.org) (*.net *.split)
[13:16:44] *** Quits: b_jonas (~x@catv-176-63-4-47.catv.broadband.hu) (*.net *.split)
[13:16:44] *** Quits: summonner (~summonner@188.26.74.156) (*.net *.split)
[13:16:44] *** Quits: michaelis (~michaelis@193.183.209.17) (*.net *.split)
[13:16:44] *** Quits: skreech (skreech@user/skreech) (*.net *.split)
[13:16:44] *** Quits: kushal (~hopless@dgplug/kushal) (*.net *.split)
[13:16:44] *** Quits: wilk (~wilk@user/wilk) (*.net *.split)
[13:16:44] *** Quits: dxrt (~dxrt@user/dxrt) (*.net *.split)
[13:16:44] *** Quits: Keira (~k@lulzsec.co.uk) (*.net *.split)
[13:16:44] *** Quits: cyphase (~cyphase@user/cyphase) (*.net *.split)
[13:16:44] *** Quits: ST47 (~ST47@wikimedia/st47) (*.net *.split)
[13:16:44] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[13:16:44] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[13:16:44] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (*.net *.split)
[13:16:44] *** Quits: dfch (~dfch@user/dfch) (*.net *.split)
[13:16:44] *** Quits: mdw_ (~root@159.65.86.163) (*.net *.split)
[13:16:44] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (*.net *.split)
[13:16:44] *** Quits: remedan (~remedan@balak.me) (*.net *.split)
[13:16:44] *** Quits: montpol (montpol@fine.mouses.xyz) (*.net *.split)
[13:16:45] *** Quits: goatish (~geclark@19.60.188.35.bc.googleusercontent.com) (*.net *.split)
[13:16:45] *** Quits: vinay (~Vinay@user/vinay-keshava) (*.net *.split)
[13:16:45] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[13:16:45] *** Quits: mtg (~mtg@209.250.241.226) (*.net *.split)
[13:16:45] *** Quits: Linkandzelda (~Linkandze@cloudirc.laz.li) (*.net *.split)
[13:16:45] *** Quits: delarge (~chamigo@ctm.linuxers.cl) (*.net *.split)
[13:16:45] *** Quits: {HD} (~{HD}@86.106.121.213) (*.net *.split)
[13:16:45] *** Quits: bluss (~bluss@user/bluss) (*.net *.split)
[13:16:45] *** Quits: daddy (~ryan@hashbang/bdfl) (*.net *.split)
[13:16:45] *** Quits: dude-x (~textual@72.76.74.165) (*.net *.split)
[13:16:45] *** Quits: chemsmith (~chemsmith@user/chemsmith) (*.net *.split)
[13:16:45] *** Quits: Raichvent (~Raichvent@193.123.33.210) (*.net *.split)
[13:16:45] *** Quits: jamwil (~jamwil@user/jamwil) (*.net *.split)
[13:16:45] *** Quits: doc (~doc@user/doc) (*.net *.split)
[13:16:45] *** Quits: nac (~nac@user/nac) (*.net *.split)
[13:16:45] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[13:16:45] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[13:16:45] *** Quits: deetwelve (~deetwelve@user/deetwelve) (*.net *.split)
[13:16:45] *** Quits: argoneus (~argoneus@argoneus.com) (*.net *.split)
[13:16:45] *** Quits: faceface (~faceface@user/faceface) (*.net *.split)
[13:16:45] *** Quits: vinnix (~vinnix@user/vinnix) (*.net *.split)
[13:16:45] *** Quits: foo (~foo@user/foo/x-8763512) (*.net *.split)
[13:16:45] *** Quits: nvz (~user@nvz.farted.online) (*.net *.split)
[13:16:45] *** Quits: sud (~sud@user/sud) (*.net *.split)
[13:16:45] *** Quits: jootoi (~jootoi@130.61.158.197) (*.net *.split)
[13:16:45] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[13:16:45] *** Quits: Nei (~ailin@user/nemui) (*.net *.split)
[13:16:45] *** Quits: Juhaz (juhaz@hilla.kapsi.fi) (*.net *.split)
[13:16:45] *** Quits: stoneware (~stoneware@user/stoneware) (*.net *.split)
[13:16:45] *** Quits: fabs (~fabs@wrls-249-137-11.wrls-client.fas.harvard.edu) (*.net *.split)
[13:16:45] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[13:16:45] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[13:16:45] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[13:16:45] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (*.net *.split)
[13:16:45] *** Quits: janemba (~janemba@94.204.254.193) (*.net *.split)
[13:16:45] *** Quits: kungp (~kungp@h-46-59-2-200.A230.priv.bahnhof.se) (*.net *.split)
[13:16:45] *** Quits: tabakhase (~tabakhase@user/tabakhase) (*.net *.split)
[13:16:45] *** Quits: Joel (~jjshoe@user/joel) (*.net *.split)
[13:16:45] *** Quits: pie__ (~pie_bnc@user/pie/x-2818909) (*.net *.split)
[13:16:45] *** Quits: bboles_ (~bboles@64.94.212.195) (*.net *.split)
[13:16:45] *** Quits: dodo (~dodo@user/dodo) (*.net *.split)
[13:16:45] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[13:16:45] *** Quits: amosbird (~amosbird@13.75.119.182) (*.net *.split)
[13:16:45] *** Quits: frrs (~ferros@vps-eacaba1b.vps.ovh.net) (*.net *.split)
[13:16:45] *** Quits: gerty (~gerty@user/gerty) (*.net *.split)
[13:16:45] *** Quits: chandankumar (~chandanku@51.159.58.174) (*.net *.split)
[13:16:45] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[13:16:45] *** Quits: nuala (~nuala@user/nuala) (*.net *.split)
[13:16:45] *** Quits: nawcom (~nawcom@bulldadachat.com) (*.net *.split)
[13:16:45] *** Quits: gizmo_ (~gizmo@45.91.125.2) (*.net *.split)
[13:16:45] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (*.net *.split)
[13:16:45] *** Quits: roppert (~roppert@inb4.se) (*.net *.split)
[13:16:45] *** Quits: d3x (~d3x@bielaw.ski) (*.net *.split)
[13:16:45] *** Quits: icy (~icy@user/icy) (*.net *.split)
[13:16:45] *** Quits: notevil (~notevil@user/notevil) (*.net *.split)
[13:16:45] *** Quits: timothy (~timothy@redhat/timothy) (*.net *.split)
[13:16:45] *** Quits: lifefir31 (~lifefir3@152.37.120.101) (*.net *.split)
[13:16:45] *** Quits: jjhoo (~jahakala@user/jjhoo) (*.net *.split)
[13:16:45] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[13:16:45] *** Quits: CrunchyChewie (~CrunchyCh@user/crunchychewie) (*.net *.split)
[13:16:45] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (*.net *.split)
[13:16:45] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[13:16:45] *** Quits: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net) (*.net *.split)
[13:16:45] *** Quits: mr_ab (~nobody@bnc.ab.hl9.net) (*.net *.split)
[13:16:45] *** Quits: ThomasJ (~ThomasJ@user/thomasj) (*.net *.split)
[13:16:45] *** Quits: trench (~trench@user/trench) (*.net *.split)
[13:16:45] *** Quits: OMGOMG (~bobrobert@poppy.ifi.uio.no) (*.net *.split)
[13:16:45] *** Quits: zoraj (~zoraj@209.126.81.159) (*.net *.split)
[13:16:45] *** Quits: benoliver999 (~benoliver@178.128.43.129) (*.net *.split)
[13:16:45] *** Quits: fredrikhl (~fhl@myrsnipa.uio.no) (*.net *.split)
[13:16:45] *** Quits: mikeputnam (~mikeputna@wilug/mikeputnam) (*.net *.split)
[13:16:45] *** Quits: TDT (~TDT@20.118.225.139) (*.net *.split)
[13:16:45] *** Quits: tetrahedron (~derelict@user/derelict) (*.net *.split)
[13:16:45] *** Quits: FLHerne (~flh@flherne.uk) (*.net *.split)
[13:16:45] *** Quits: yemel (~yemel@user/yemel) (*.net *.split)
[13:16:45] *** Quits: petemc (~pete@vps-80fad31a.vps.ovh.net) (*.net *.split)
[13:16:45] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[13:16:46] *** Quits: e-snail (~pete@user/e-snail) (*.net *.split)
[13:16:46] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[13:16:46] *** Quits: lxdr (~lxdr@user/lxdr) (*.net *.split)
[13:16:46] *** Quits: Brocker (~NoBody@user/brocker) (*.net *.split)
[13:16:46] *** Quits: nbin (~nbin@user/nbin) (*.net *.split)
[13:16:46] *** Quits: Scotteh (~Scotteh@user/scotteh) (*.net *.split)
[13:16:46] *** Quits: zwindl (~abc@user/abc) (*.net *.split)
[13:16:46] *** Quits: th0rne (~enomaae1@lyta.org.aalto.fi) (*.net *.split)
[13:16:46] *** Quits: HenryTheLongshot (~Henry@46.101.4.181) (*.net *.split)
[13:16:46] *** Wulf4 is now known as Wulf
[13:16:46] *** foxbox4 is now known as foxbox
[13:16:46] *** slavfox_ is now known as slavfox
[13:16:46] *** marduk8 is now known as marduk
[13:16:46] *** wilk_ is now known as wilk
[13:16:46] *** stoneware8 is now known as stoneware
[13:16:46] *** gerty9 is now known as gerty
[13:16:46] *** ThomasJ_ is now known as ThomasJ
[13:16:46] *** Maikel0 is now known as Maikel
[13:16:46] *** deetwelv- is now known as deetwelve
[13:16:46] *** polyrob_ is now known as polyrob
[13:16:46] *** mgedmin_ is now known as mgedmin
[13:16:46] *** ultera- is now known as ultera
[13:16:46] *** rexbinary_ is now known as rexbinary
[13:16:46] *** dxrt_ is now known as dxrt
[13:16:46] *** Scarecr0- is now known as Scarecr0w
[13:16:46] *** lxdr2 is now known as lxdr
[13:16:46] *** FLHerne_ is now known as FLHerne
[13:16:46] *** Raichvent_ is now known as Raichvent
[13:16:46] *** lifefir317 is now known as lifefir31
[13:16:46] *** mr_ab9 is now known as mr_ab
[13:16:50] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[13:16:54] *** lukedashjr is now known as luke-jr
[13:17:00] *** Portugol9_ is now known as Portugol9
[13:17:20] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[13:17:25] *** Joins: sudomann (~sudomann@98.219.211.182)
[13:17:32] *** Joins: benoliver999 (~benoliver@178.128.43.129)
[13:18:02] *** Joins: l4yer (~l4yer@195.181.170.210)
[13:18:36] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[13:18:47] *** tabakhase__ is now known as tabakhase
[13:18:55] *** Joins: alzgh (~alzgh@user/alzgh)
[13:19:53] *** Joins: dreamer (~dreamer@user/dreamer)
[13:21:25] *** Quits: Portugol9 (~Portugol9@user/portugol9) (Ping timeout: 240 seconds)
[13:21:26] *** Joins: janemba (~janemba@94.204.254.193)
[13:21:51] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:21:51] *** Joins: VaniaPy (~VaniaPy@46.12.178.58.dsl.dyn.forthnet.gr)
[13:21:51] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[13:21:51] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[13:21:51] *** Joins: qpdb (~qpdb@user/qpdb)
[13:21:51] *** Joins: cheater (~Username@user/cheater)
[13:21:51] *** Joins: arinov (~arinov@213.194.126.155)
[13:21:51] *** Joins: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net)
[13:21:51] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[13:21:51] *** Joins: DXR (~lyrical@193.92.178.179.dsl.dyn.forthnet.gr)
[13:21:51] *** Joins: demophoon4 (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[13:21:51] *** Joins: OPK (~OPK@user/opk)
[13:21:51] *** Joins: zaz\ (~zaz@poneybl.eu)
[13:21:51] *** Joins: Viewday11 (~Viewday@user/viewday)
[13:21:51] *** Joins: zlg (~zlg@user/zlg)
[13:21:51] *** Joins: Gamah (~quassel@gamah.net)
[13:21:51] *** Joins: grym (~grym@user/grym)
[13:21:51] *** Joins: Axy (~Axy@user/axy)
[13:21:51] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[13:21:51] *** Joins: PrinceMachiavell (~PrinceMac@c-174-63-6-58.hsd1.ma.comcast.net)
[13:21:51] *** Joins: Forkk (~forkk@li926-228.members.linode.com)
[13:21:51] *** Joins: dcaro (~dcaro@user/dcaro)
[13:21:51] *** Joins: Allegretto (~allegrett@84-236-53-184.pool.digikabel.hu)
[13:21:51] *** Joins: b_jonas (~x@catv-176-63-4-47.catv.broadband.hu)
[13:21:51] *** Joins: summonner (~summonner@188.26.74.156)
[13:21:51] *** Joins: Keira (~k@lulzsec.co.uk)
[13:21:51] *** Joins: ST47 (~ST47@wikimedia/st47)
[13:21:51] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[13:21:51] *** Joins: montpol (montpol@fine.mouses.xyz)
[13:21:51] *** Joins: goatish (~geclark@19.60.188.35.bc.googleusercontent.com)
[13:21:51] *** Joins: vinay (~Vinay@user/vinay-keshava)
[13:21:51] *** Joins: delarge (~chamigo@ctm.linuxers.cl)
[13:21:51] *** Joins: {HD} (~{HD}@86.106.121.213)
[13:21:51] *** Joins: daddy (~ryan@hashbang/bdfl)
[13:21:51] *** Joins: dude-x (~textual@72.76.74.165)
[13:21:51] *** Joins: nvz (~user@nvz.farted.online)
[13:21:51] *** Joins: jamwil (~jamwil@user/jamwil)
[13:21:51] *** Joins: nac (~nac@user/nac)
[13:21:51] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[13:21:51] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[13:21:51] *** Joins: argoneus (~argoneus@argoneus.com)
[13:21:51] *** Joins: faceface (~faceface@user/faceface)
[13:21:51] *** Joins: foo (~foo@user/foo/x-8763512)
[13:21:51] *** Joins: sud (~sud@user/sud)
[13:21:51] *** Joins: jootoi (~jootoi@130.61.158.197)
[13:21:51] *** Joins: Nei (~ailin@user/nemui)
[13:21:51] *** Joins: niko (~niko@libera/staff/niko)
[13:21:51] *** Joins: nisstyre (~wes@user/nisstyre)
[13:21:53] *** Joins: llanhmod (~personnel@user/domhnall/x-2887755)
[13:22:13] *** Joins: BlueSky_ (~BlueSky@user/bluesky)
[13:22:30] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[13:22:43] *** Joins: djapo (~archangel@user/djapo)
[13:22:57] *** Joins: Colt (~Colt@user/colt)
[13:23:15] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 265 seconds)
[13:23:20] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[13:23:48] *** Joins: nexgen2 (~nexgen@li614-178.members.linode.com)
[13:23:53] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[13:24:21] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:24:32] *** Quits: BlueSky (~BlueSky@user/bluesky) (Ping timeout: 240 seconds)
[13:24:33] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:24:37] *** Quits: Knaxius (~Knaxius@user/Knaxius) (Quit: bye)
[13:24:47] *** Quits: parv (~quass@user/parv) (Quit: parv)
[13:25:10] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[13:25:14] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[13:25:15] *** Joins: legola (~legola@46.235.101.65)
[13:25:18] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[13:26:22] *** Joins: e-snail (~pete@user/e-snail)
[13:27:25] *** dodo__ is now known as dodo
[13:28:40] *** Quits: dtux (~dtux@c-98-207-149-218.hsd1.ca.comcast.net) (Quit: dtux)
[13:29:06] *** Joins: Knaxius (~Knaxius@user/Knaxius)
[13:30:25] <cluelessperson> I'm confused by an Advent of Code problem
[13:30:37] <cluelessperson> I'm performing   flashed.add(xy)
[13:30:40] <cluelessperson> then
[13:30:42] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[13:30:43] *** Quits: adeliktas (~adeliktas@2001:16b8:22fb:2900:ff0b:f7a9:2da3:70c4) (Ping timeout: 256 seconds)
[13:30:54] <cluelessperson> if e > 9 and nxy not in flashed:  next_flash.add(nxy)
[13:31:06] <cluelessperson> it seems to be adding a coordinate to next_flash
[13:31:17] <cluelessperson> when it shouldn't be, it is in flashed ?
[13:31:34] <deniska> well, you add xy and check for nxy
[13:31:54] *** Joins: Payam (~Payam@138.106.57.131)
[13:32:00] <cluelessperson> xy = x, y;  nxy = x, y
[13:32:15] <cluelessperson>             xy
[13:32:17] <cluelessperson> ugh
[13:32:35] <cluelessperson> (1, 3)  is in both sets
[13:32:56] <cluelessperson> but it's not supposed to be added to next_flash if it's already in flash
[13:32:56] *** Joins: somlis (~somlis@user/somlis)
[13:34:14] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[13:34:33] *** Joins: adeliktas (~adeliktas@2001:16b8:22fb:2900:ff0b:f7a9:2da3:70c4)
[13:35:02] <canarts> cluelessperson: are you sure e > 9 when it's added?
[13:35:07] *** canarts is now known as stranac
[13:35:53] *** Joins: sudomann (~sudomann@98.219.211.182)
[13:36:12] <cluelessperson> canardo, its    if e > 9 and nxy not in flashed:
[13:37:09] <Repiphany> It's not much help if you don't post complete code segments
[13:37:32] <stranac> cluelessperson: sorry, misread that
[13:37:43] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:37:52] *** Joins: petemc (~pete@vps-80fad31a.vps.ovh.net)
[13:38:41] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 250 seconds)
[13:39:06] *** Joins: Nik (Nik@2001:7c0:31ff:3:84ea:e315:3316:7d62)
[13:39:59] *** Quits: onichomp (~onichomp@2806:264:4404:801e:9d51:5c79:9d03:13d2) (Ping timeout: 250 seconds)
[13:40:26] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[13:41:01] *** Joins: revilaika (~me@109.8.144.151)
[13:41:30] <Payam> Hi guys, I have a string like this 'https://google.se/artifactory/api/storage/conan_stuff/company/payam/Payam_is_good' I was thinking how I , using regular expressions can get conan_stuff/company/payam/Payam_is_good only. I mean from the 3th '/' to the end. format is always like this but the text may vary.
[13:42:13] *** Joins: gizmo_ (~gizmo@45.91.125.2)
[13:42:57] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:42:59] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 252 seconds)
[13:42:59] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 252 seconds)
[13:43:01] <deniska> Payam: s.split('/', 6)[6]
[13:43:18] *** Joins: BlueSky (~BlueSky@user/bluesky)
[13:43:41] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[13:43:46] *** Joins: rsx (~dummy@ppp-188-174-41-29.dynamic.mnet-online.de)
[13:43:56] *** Quits: BlueSky (~BlueSky@user/bluesky) (Read error: Connection reset by peer)
[13:43:58] *** Quits: BlueSky_ (~BlueSky@user/bluesky) (Read error: Connection reset by peer)
[13:44:03] <cluelessperson> stranac, canardo oh, well I've spotted it now
[13:44:14] <cluelessperson> mindtwist
[13:44:26] <deniska> Payam: ah, 3 from the end… well, str.rsplit may get you close :)
[13:44:46] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[13:44:52] *** Joins: BlueSky (~BlueSky@user/bluesky)
[13:45:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:45:06] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:45:20] *** Joins: magga (magga@ti0036a400-1042.bb.online.no)
[13:45:24] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[13:46:20] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:46:23] *** Quits: BlueSky (~BlueSky@user/bluesky) (Read error: Connection reset by peer)
[13:46:32] *** Joins: djapo (~archangel@user/djapo)
[13:46:49] *** Joins: BlueSky (~BlueSky@user/bluesky)
[13:47:14] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[13:47:23] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[13:47:56] *** Lord_of_Life_ is now known as Lord_of_Life
[13:48:55] *** Joins: get_turtle_back (~get_turtl@91.193.177.143)
[13:49:29] <sunny93> Hi guys, I have a question, do those database batch insert/update methods provided by database connection library e.g.`bulk_update xxxx`, `bulk_insert xxxx`, `executemany` eventually use this sql syntax to do a quick batch insert https://stackoverflow.com/a/5526937/5983841 ?
[13:50:10] <sunny93> I mean in the end it's all sql string concatenation
[13:50:19] *** Quits: Nik (Nik@2001:7c0:31ff:3:84ea:e315:3316:7d62) (Quit: Leaving)
[13:50:31] <doug16k> sunny93, if mysql you want https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html
[13:50:54] *** Joins: BlueSky_ (~BlueSky@user/bluesky)
[13:51:10] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Client Quit)
[13:51:53] <doug16k> a bunch of separate insert into separated by semicolons, then `for cursor in execute(multi=True):` is awesome
[13:51:59] *** Joins: Klinda (~superleag@user/klinda)
[13:52:06] <sunny93> ya I know that. If I understand correctly, `executemany` is a standard inteface of python dbapi, so every libaray should provide that at least?
[13:52:11] <doug16k> that's how you do it if you want all the insert ids
[13:52:38] *** Joins: sudomann (~sudomann@98.219.211.182)
[13:52:58] <sunny93> ok
[13:53:02] *** Quits: BlueSky (~BlueSky@user/bluesky) (Ping timeout: 240 seconds)
[13:54:22] <doug16k> in this you mean https://www.python.org/dev/peps/pep-0249/ I guess
[13:54:44] <doug16k> executemany is there yeah
[13:54:51] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[13:54:58] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[13:55:29] <doug16k> yeah ODBC and postgres etc do too
[13:55:30] <deniska> sunny93: the database may have its own custom method for bulk inserting data, a python library can provide interface for it
[13:55:44] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[13:56:19] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[13:56:22] <get_turtle_back> Hello, I cannot import turtle module with python3.9 and Linux https://bpa.st/RXPQ
[13:56:27] *** Joins: s1b1 (~s1b1@user/s1b1)
[13:57:44] <deniska> get_turtle_back: how did you install python?
[13:58:01] *** jjhoo_ is now known as jjhoo
[13:58:28] <sunny93> “the database may have its own custom method for bulk inserting data”, well I only know this syntax till now `insert (a,b,c) values (a1,b1,c1), (a2,b2,c3),( a3,b3,c3)`
[13:59:11] <sunny93> maybe some database would provide other sql syntax, i dont know
[13:59:21] <deniska> sunny93: sure, I mean, it may use some proprietary API and not go through sql at all
[13:59:55] <sunny93> ok
[14:00:06] <deniska> get_turtle_back: try installing python3-tk package
[14:00:06] <The-Compiler> get_turtle_back: you might need to install python3-tk separately, I think Ubuntu/Debian have that split off
[14:00:34] <doug16k> you still give executemany sql though. it doesn't have to insert
[14:00:54] <doug16k> it is just a "make it as if I repeated this with all these different bindings"
[14:00:56] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[14:01:22] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[14:01:29] <doug16k> mysql happens to special case insert into somehow to use the , separated multi insert
[14:02:25] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[14:02:51] <jmcantrell> Is there a way to do something like this, but that mypy doesn't have a problem with? https://mypy-play.net/?mypy=latest&python=3.10&gist=2f56b82c356fb480bc9a6261ca81dfe7
[14:02:52] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[14:03:04] <doug16k> it sounds so good but I want lastinsertid so often that it's useless
[14:03:07] <sunny93> ok thanks
[14:03:31] <doug16k> and in mysql just a bunch of inserts with multi=True is awesome
[14:05:48] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[14:05:56] <The-Compiler> jmcantrell: why not just min(values)
[14:06:07] *** Joins: nomic (~nomic@85.203.46.65)
[14:06:22] *** Joins: sucaiking (~DELL@49.74.124.184)
[14:06:29] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[14:06:50] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[14:06:59] <jmcantrell> that's fine for this example, but i'm traversing a tree, looking for a minimum
[14:07:37] *** Parts: sucaiking (~DELL@49.74.124.184) ()
[14:08:07] *** Quits: get_turtle_back (~get_turtl@91.193.177.143) (Ping timeout: 256 seconds)
[14:08:34] <doug16k> change line 8 to return int(min_value)
[14:08:39] <doug16k> you swore it returned int
[14:09:06] *** Quits: l4yer (~l4yer@195.181.170.210) (Remote host closed the connection)
[14:09:30] <Repiphany> min(traverse_tree())
[14:09:34] <jmcantrell> ok
[14:09:37] <doug16k> or change line 1 to -> float
[14:10:03] <jmcantrell> thanks
[14:11:32] *** Quits: iNKa (~NoBody@user/brocker) (Read error: Connection reset by peer)
[14:12:05] <wyre> hi guys, I've written this class https://bpa.st/5Q4A but apparently for the debug setter I need to define self._logfile before self.debug = debug because otherwise I have this traceback https://bpa.st/3Z7A
[14:12:06] *** Joins: RiFo (~RiFo@user/rifo)
[14:12:13] *** Quits: RiFo (~RiFo@user/rifo) (Client Quit)
[14:12:20] <wyre> why is this? Shouldn't be this independent of the order?
[14:12:29] *** Quits: ninjabreakbot (~ninjabrea@user/ninjabreakbot) (Ping timeout: 250 seconds)
[14:12:38] <wyre> upss, sorry, wrong traceback
[14:12:56] *** Joins: l4yer (~l4yer@195.181.170.210)
[14:13:24] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 268 seconds)
[14:13:25] <wyre> this one is the traceback I'm talking about https://bpa.st/BOGQ
[14:13:34] <Repiphany> wyre: The setter for debug accesses self._logfile (line 68) so it needs to be defined
[14:14:20] *** Joins: jazzy2 (~jaziz@user/jaziz)
[14:14:28] *** jazzy is now known as Guest8217
[14:14:39] *** jazzy2 is now known as jazzy
[14:14:59] *** Joins: darksun (~darksun@user/darksun)
[14:15:05] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[14:15:05] <wyre> Repiphany, but I didn't know that self.debug = debug was actually a call for the debug() setter
[14:15:19] *** Joins: lethu (~lethu@user/lethu)
[14:15:26] <Repiphany> That's what happens when you make a property and define a setter for it
[14:15:51] *** Quits: Guest8217 (~jaziz@user/jaziz) (Ping timeout: 268 seconds)
[14:16:54] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[14:17:02] *** Joins: ionelmc (uid20175@id-20175.helmsley.irccloud.com)
[14:17:10] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[14:17:19] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[14:18:32] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Client Quit)
[14:18:55] *** Joins: brabrax (~brabrax@user/brabrax)
[14:19:23] *** Quits: jpic (~jpic@82.142.28.30) (Remote host closed the connection)
[14:20:54] *** Joins: acresearch (~acresearc@user/acresearch)
[14:21:21] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[14:21:44] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[14:22:14] *** Joins: BlueSky__ (~BlueSky@user/bluesky)
[14:23:33] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[14:23:53] *** Joins: RiFo (~RiFo@user/rifo)
[14:23:57] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Ping timeout: 250 seconds)
[14:24:01] *** Joins: jim87 (~gfurlan@2001:b07:5d37:f91e:c08b:dbe4:b466:4b28)
[14:24:53] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:25:03] *** Quits: BlueSky_ (~BlueSky@user/bluesky) (Ping timeout: 250 seconds)
[14:27:07] *** Joins: beuys (~beuys@user/beuys)
[14:27:53] *** Quits: BlueSky__ (~BlueSky@user/bluesky) (Remote host closed the connection)
[14:28:16] <jim87> Hello! I want to build an object mapper, starting from a generic class. The idea is to have a MessageParser(Generic[T]) and use the inspect module to get the signature of T's __init__ function. The problem is that it's getting the TypeVar's signature and not the instanced T. Maybe I'm doing it the wrong way and I should specify the type not as a generic, but giving the type to the function which wants to get the signature?
[14:28:47] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:28:58] <beuys> jim87: If you make a minimal example on online-python.com, we can take it from there.
[14:29:07] *** Joins: BlueSky__ (~BlueSky@user/bluesky)
[14:29:23] *** Quits: BlueSky__ (~BlueSky@user/bluesky) (Remote host closed the connection)
[14:32:17] <jim87> beuys: https://bpa.st/DKHA
[14:32:50] *** Joins: Atque (~Atque@user/atque)
[14:32:55] <jim87> best would be a static method, but an instance one would be fine, too
[14:33:35] <jim87> pardon the M*e*rry typo :D
[14:33:52] <beuys> jim87: That is just static text. Give us something that we can execute and change :)
[14:34:40] <jim87> beuys: here it is :) https://www.online-python.com/ZvXTyFSVnN
[14:36:04] <beuys> jim87: Great. Next step would be to make it a real life example. What is it you want to achieve?
[14:37:00] <jim87> beuys: I want to have a 1-1 match between a JSON object's attributes (one level only) and the relative dataclass
[14:37:23] <jim87> so I can parse from raw string and back to JSON string
[14:37:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[14:38:02] <beuys> jim87: That is still abstract. I mean something like "I have a list of cars and I want to find out the number of cars that are red".
[14:38:30] *** Joins: Juhaz (~juhaz@hilla.kapsi.fi)
[14:39:05] <jim87> Ok, more precisely I'm building a socket protocol and I want to parse the payload depending on the type declared in the message itself, before the payload
[14:39:40] *** Joins: fikran (~fikran@user/fikran)
[14:39:59] <jim87> the message is composed by the following: [header bytes num][header containing message type][num of bytes of the payload][payload, encoded in JSON]
[14:40:20] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[14:40:21] <beuys> jim87: Then maybe put an example payload into the code?
[14:40:22] <jim87> I want to decode the payload and build an object on top of it, depending on the type
[14:40:32] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 240 seconds)
[14:41:09] *** Joins: ThC27 (ThC27@gateway/vpn/protonvpn/thc27)
[14:41:34] <molt> Does anyone know how to retrieve the width and height of an SVG file via Python?
[14:42:30] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[14:42:44] <beuys> molt: If you want to use naked Python, you would have to write an SVG parser. But usually one would check out what existing libraries there are.
[14:42:52] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[14:44:01] *** Joins: sucaiking (~DELL@49.74.124.184)
[14:44:09] *** Parts: sucaiking (~DELL@49.74.124.184) ()
[14:44:18] *** Joins: get_turtle_back (~get_turtl@91.193.177.143)
[14:44:40] <molt> Thanks. That is helpful. Much appreciated.
[14:45:07] <molt> Never thought of checking the existing libraries.
[14:47:22] <jim87> beuys: something like this: https://www.online-python.com/dUuKWQfy84
[14:48:05] <jim87> But really, I don't want actually to parse the JSON string right now, but to have the signature of MessageA.__init__, instead of TypeVar('T').__init__
[14:48:21] <beuys> jim87: The payload is '{"a": 27, "b": "string", "c": 1.0}' ?
[14:48:27] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[14:48:29] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[14:49:06] <jim87> beuys: in that example, yes
[14:49:22] <beuys> jim87: And you want to do what with it?
[14:50:04] *** Joins: luigibu (~luigi@80.30.201.209)
[14:50:10] <jim87> I want to call MessageA's __init__ with the values of the dictionary, only if the key of the dictionary matches any of the arguments of __init__
[14:50:13] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[14:50:49] <jim87> so for a more complete example, I'd say the payload should be something like '{"a": 27, "b": "string", "c": 1.0, "not_in_init": "whatever"}'
[14:51:25] <jim87> and call MessageA(a=payload['a'], ...)
[14:51:47] <beuys> jim87: I am getting the feeling your question is how to find out the arguments which MessageA::__init__() takes?
[14:52:20] <jim87> beuys: yes
[14:52:53] *** Quits: SteveR (~SteveR@192.146.154.3) (Ping timeout: 256 seconds)
[14:54:04] <bjs> jim87: inspect.signature(MessageA.__init__)
[14:54:47] <get_turtle_back> How to run turtledemo module? it says $ python3 -m turtledemo
[14:54:48] *** kdas_ is now known as kushal
[14:55:02] <get_turtle_back> usr/bin/python3: No module named turtledemo
[14:55:05] *** Quits: Payam (~Payam@138.106.57.131) (Quit: Client closed)
[14:55:49] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[14:55:58] <jim87> bjs: that would be simple if I only needed MessageA :D I need a generic type. My question was if I could get the signature from the generic type T, or if I had to specify the class in the function arguments
[14:56:07] <bjs> get_turtle_back: can you import turtle in a normal Python script?
[14:56:26] <bjs> jim87: you can't, you aren't allowed to use generic types at runtime (mostly)
[14:56:37] <bjs> and certainly not TypeVars because well... they're unbound variables!
[14:56:45] <get_turtle_back> bjs: yes, turtle imports fine, and with -m option too
[14:57:18] <bjs> jim87: but you can just pass the class to whomever wants it
[14:57:39] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[14:57:39] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:57:55] <bjs> jim87: `def encoder(cls): sig = inspect.signature(cls); ...`
[14:57:57] <jim87> bjs: I thought that I could instance something like MyObjectMapper[MessageA].functionWhichNeedsTheSignature, but I can call MyObjectMapper.functionWhichNeedsTheSignagure(cls=MessageA, rawMessage='whatever')
[14:58:14] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-301b-1107-2f4d-1a94.fixed6.kpn.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:58:23] <jim87> bjs: what's the type of a class? type? (myFunc(cls: type)?)
[14:58:39] <bjs> jim87: type or Type[C],  see PEP 484
[14:58:49] <jim87> thanks :)
[14:59:22] *** Parts: beuys (~beuys@user/beuys) ()
[14:59:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:59:45] <jim87> bjs: and what if I want to return the same class in the typed return type?
[15:00:02] <bjs> jim87: then you use a TypeVar, `def f(t: T) -> T`
[15:00:04] <bjs> see PEP 48
[15:00:07] <bjs> 4
[15:01:01] *** Joins: akrypha (~akrypha@user/akrypha)
[15:01:47] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[15:02:00] *** Joins: HurricaneHarry (~quassel@84-85-122-182.fixed.kpn.net)
[15:03:45] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[15:04:19] *** Parts: akrypha (~akrypha@user/akrypha) (WeeChat 3.3)
[15:04:42] *** Joins: kungp (~kungp@h-46-59-2-200.A230.priv.bahnhof.se)
[15:04:44] *** Joins: shad (~shad@user/shad)
[15:06:38] *** Joins: xkuru (~xkuru@user/xkuru)
[15:07:10] *** Joins: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net)
[15:07:16] *** Joins: arinov (~arinov@176.89.29.127)
[15:07:55] *** Quits: magga (magga@ti0036a400-1042.bb.online.no) (Remote host closed the connection)
[15:08:17] *** Joins: magla (~gelignite@55d41c14.access.ecotel.net)
[15:08:34] *** Joins: magga (magga@ti0036a400-1042.bb.online.no)
[15:09:43] *** Quits: xakan (~xakan@pnmx.zdx.fr) (Quit: The Lounge - https://thelounge.chat)
[15:10:49] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[15:11:06] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[15:12:06] *** Quits: LimeOn (~user@user/limeon) (Quit: .)
[15:12:29] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:245f:fa81:fe66:b6df) (Ping timeout: 265 seconds)
[15:14:26] *** Joins: thiras (~thiras@user/thiras)
[15:16:11] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[15:16:15] *** bluss_ is now known as bluss
[15:17:48] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[15:18:02] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi)
[15:18:40] *** Quits: pyfisch (~pyfisch@user/pyfisch) (Quit: Ping timeout (120 seconds))
[15:18:47] *** Joins: j`ey (~joey@user/jey/x-2681904)
[15:19:12] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[15:19:21] <j`ey> there's this __name__ == "main" trick, but it means I need to indent everything after that. I tried if __name__ != "main
[15:19:55] <j`ey> " \n exit, but that exits the program, is there a way to just early finish the current module
[15:20:07] <Yhg1s> j`ey: yes, but you already rejected it.
[15:20:35] <Yhg1s> j`ey: it would be using 'if __name__ == '__main__' thing, and indenting the one-line block that comes after it. (Why one line? It should just be calling a function, and all the code should be in the function.)
[15:20:37] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[15:21:12] <j`ey> Yhg1s: ok, I just wondered if there was an alternative solution
[15:21:58] <nedbat> j`ey: the other advantage to putting your main code into a main() function is that you can test main()
[15:22:03] <get_turtle_back> j`ey: try without \n
[15:22:21] *** Quits: aphysically (~aphysical@user/aphysically) (Ping timeout: 252 seconds)
[15:22:27] <Yhg1s> get_turtle_back: that wouldn't change anything.
[15:24:12] *** Joins: aphysically (~aphysical@user/aphysically)
[15:24:15] <j`ey> nedbat: thats also reasonable!
[15:24:50] <j`ey> this is just a little hacky script for automating some commands, so I wont write any tests, but i'll have to make a main to avoid all that indentation
[15:24:59] *** Joins: metus (~metus@186.67.158.250)
[15:25:12] <nedbat> j`ey: if it's a hacky script, where is it being imported?
[15:25:23] <jinsun> well you will have to indent after def main() too
[15:25:29] <j`ey> well I have a few hacky scripts, and they import each other
[15:25:31] <Yhg1s> you would still have indentation, though. It'd just be for the 'main' function instead of the 'if' block.
[15:25:33] <j`ey> jinsun: oh yeah, derp
[15:25:52] *** Quits: Knaxius (~Knaxius@user/Knaxius) (Quit: bye)
[15:26:02] <j`ey> nedbat: so for example I have a script which builds project A, and project B imports A to get the path to it etc
[15:26:08] <j`ey> (project B depends on A)
[15:26:21] *** Quits: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[15:26:47] *** Quits: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-0134.v6.ethz.ch) (Ping timeout: 250 seconds)
[15:26:59] *** BlessJah_ is now known as BlessJah
[15:27:50] *** Joins: mokulus (~mokulus@user/mokulus)
[15:28:14] <mokulus> hi, is there a more pythonic way for 'item["line_count"] = int(item["line_count"])'
[15:28:39] <nedbat> mokulus: it depends where that value came from in the first place
[15:28:41] <mokulus> csv.DictReader doesn't conver it automatically and i didnt find a way to make it
[15:28:53] *** Parts: j`ey (~joey@user/jey/x-2681904) ()
[15:28:57] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Remote host closed the connection)
[15:28:57] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[15:29:03] <Yhg1s> mokulus: it can't, no. You may want to consider pandas instead, though.
[15:29:40] *** Joins: reset (~reset@user/reset)
[15:29:52] <mokulus> ok, is there to avoid the item[key] repetition? some sort of update/transform?
[15:30:08] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:30:39] <Yhg1s> mokulus: again, not really. You could make it more complex, but it wouldn't avoid the separate lookup and store of item[key].
[15:31:09] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[15:31:10] <mokulus> ok, thanks
[15:31:13] <Yhg1s> mokulus: if you mean you're doing this multiple times, perhaps you want a function? The function would just do what you just showed, though.
[15:31:21] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[15:31:28] <get_turtle_back> mokulus: do you need to iteratate through key, or just convert exact key?
[15:31:43] <get_turtle_back> keys*
[15:31:51] <mokulus> just convert this exect key
[15:32:27] <jinsun> nedbat: I tried your nested venvs problem on both windows and wsl2 btw, works fine here on both a2 and a3, so maybe some macOS specific thing? or some config difference that we have somehow
[15:33:06] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[15:33:35] <nedbat> jinsun: it seems clear that the dev only uses windows, and it works on windows, so we are struggling to get him to take it seriously.
[15:33:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:33:55] <mokulus> get_turtle_back: it's like this now https://bpa.st/OGWQ
[15:34:01] *** Quits: get_turtle_back (~get_turtl@91.193.177.143) (Quit: Client closed)
[15:34:32] <mokulus> i hope it wasn't because of me
[15:34:39] <doug16k> the link is broken
[15:34:44] <doug16k> he maybe hit the wrong x?
[15:35:04] <doug16k> oh works now
[15:35:25] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[15:35:44] *** Joins: alzgh (~alzgh@user/alzgh)
[15:36:00] *** Joins: humanBird (~humanBird@2603-8001-7003-5966-55fc-484e-a347-decf.res6.spectrum.com)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:04] <doug16k> mokulus, keep what you have - it's crystal clear
[15:36:25] <doug16k> imho
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:31] <nedbat> mokulus: do you have other columns you need to convert?
[15:37:12] *** Joins: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8)
[15:38:03] <mokulus> no it's the only one. i guess for more complex class i'd need a proper converter anyways
[15:38:52] *** Joins: get_turtle_back (~get_turtl@91.193.177.143)
[15:39:13] *** Quits: NeoCore (~neocore@195.200.221.87) (Quit: Leaving)
[15:39:33] *** Joins: onichomp (~onichomp@2806:264:4404:8162:5572:b932:c212:681c)
[15:39:45] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[15:41:23] *** Quits: humanBird (~humanBird@2603-8001-7003-5966-55fc-484e-a347-decf.res6.spectrum.com) (Quit: Client closed)
[15:41:42] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:43:56] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[15:43:57] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[15:44:30] <mokulus> ok i've decided to keep it like that. no point in overengineering either
[15:45:51] *** Quits: get_turtle_back (~get_turtl@91.193.177.143) (Quit: Client closed)
[15:47:52] <doug16k> mokulus, I mangled it up a bit to test it, but you could pass a schema: https://gist.github.com/doug65536/f50db0eaae774d6a546281b82893dc5a
[15:48:37] <doug16k> it makes all the b bool and all the line_count int and leaves rest alone
[15:48:57] <doug16k> and insists that each converted key exists in source
[15:49:00] <Yhg1s> doug16k: I like how the original question was about avoiding 'item[key] = int(item[key])' and yet your code still contains pretty much that line ;P
[15:49:18] *** Quits: CyDefect (~troll@213.55.224.84) (Ping timeout: 260 seconds)
[15:49:41] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[15:49:54] <doug16k> reusability for other csv files is better than being a more pythonic foreach
[15:49:54] *** Quits: qpdb (~qpdb@user/qpdb) (Quit: WeeChat 3.3)
[15:50:02] *** Quits: mokulus (~mokulus@user/mokulus) (Ping timeout: 240 seconds)
[15:50:53] <doug16k> passing the constructor and calling it so easily is pretty pythonic
[15:51:23] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[15:51:46] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[15:52:13] <doug16k> Yhg1s, but yeah, it pretty much does what his thing does with table driven thing
[15:54:20] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:6676:4b8d:285c:1812)
[15:55:09] *** Joins: mokulus (~mokulus@user/mokulus)
[15:56:05] *** Quits: mokulus (~mokulus@user/mokulus) (Client Quit)
[15:57:52] *** Joins: llanhmod_ (~personnel@user/domhnall/x-2887755)
[15:57:56] *** Quits: llanhmod_ (~personnel@user/domhnall/x-2887755) (Client Quit)
[15:58:13] <doug16k> I wish there was a really contorted confusing way to do it, I'd love to suggest it just to see if someone would use it :)
[15:58:59] *** llanhmod is now known as Guest467
[15:58:59] *** Quits: Guest467 (~personnel@user/domhnall/x-2887755) (Killed (strontium.libera.chat (Nickname regained by services)))
[15:59:18] *** Joins: llanhmod (~personnel@user/domhnall/x-2887755)
[16:01:34] <wyre> os.system() apparently returns the status code of the command
[16:01:45] <wyre> but how could I store the output of the command actually?
[16:02:30] <Yhg1s> wyre: don't use os.system. Always use the subprocess module instead.
[16:03:09] *** Quits: carl--- (~carl-@185.103.188.130) (Ping timeout: 268 seconds)
[16:05:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:05:45] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:06:50] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[16:06:57] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[16:07:11] <doug16k> wyre popen lets you write data into its stdin and read from its stdout and stderr
[16:07:23] <Yhg1s> specifically, subprocess.Popen.
[16:07:39] <Yhg1s> (it has better interfaces for just getting the output of something, though.)
[16:08:12] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Remote host closed the connection)
[16:09:35] *** Quits: onichomp (~onichomp@2806:264:4404:8162:5572:b932:c212:681c) (Read error: Connection reset by peer)
[16:10:45] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[16:11:18] *** Quits: ThC27 (ThC27@gateway/vpn/protonvpn/thc27) (Quit: ThC27)
[16:12:05] *** Quits: shad (~shad@user/shad) (Ping timeout: 250 seconds)
[16:12:20] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[16:13:20] *** Quits: doug16k (~doug16k@172-97-197-97.cpe.distributel.net) (Quit: Leaving)
[16:15:20] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:6676:4b8d:285c:1812) (Ping timeout: 252 seconds)
[16:16:56] *** Joins: luigibu (~luigi@80.30.201.209)
[16:17:32] *** Quits: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8) (Ping timeout: 240 seconds)
[16:17:32] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 240 seconds)
[16:17:35] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[16:17:47] *** Joins: georgios (~georgios@user/georgios)
[16:17:48] *** Joins: bauripalash (~bauripala@2401:4900:382a:515c:1:2:a29c:7fac)
[16:18:27] *** Joins: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8)
[16:18:32] * CrtxReavr concurs about the suprocess module.
[16:19:11] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 268 seconds)
[16:19:56] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[16:20:01] <wyre> Yhg1s, but what I want is to store the output in an int
[16:20:07] <wyre> because it's a file that just contains an integer
[16:20:23] <Yhg1s> wyre: then you have to convert it to an int.
[16:20:26] <wyre> I was using subprocess.run(... capture_output=True).stdout
[16:20:43] <wyre> but I'm not sure if this is the more appropriate way
[16:20:49] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[16:21:12] <Yhg1s> it's fine, it'll just give you a string (or bytes, depending), because that's how processes produce output.
[16:21:50] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[16:21:50] *** Quits: bauripalash (~bauripala@2401:4900:382a:515c:1:2:a29c:7fac) (Client Quit)
[16:23:10] <wyre> Yhg1s, could I prevent the CompletedProcess return?
[16:23:10] *** Joins: xakan (~xakan@pnmx.zdx.fr)
[16:23:48] <Yhg1s> wyre: 'prevent' it?
[16:23:59] <Yhg1s> wyre: have you looked at the other functions in the subprocess module?
[16:24:12] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:24:16] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[16:24:25] <wyre> Yhg1s, well, I don't like that print in the stdout
[16:24:32] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[16:24:37] <Yhg1s> wyre: I don't understand, sorry. What print?
[16:24:37] <wyre> but I'm not sure if this is because the python shell
[16:24:51] <Yhg1s> wyre: perhaps you should show the code and the output.
[16:25:05] <wyre> Yhg1s, https://bpa.st/DU2A that CompletedProcess()
[16:25:32] <Yhg1s> That's because you're using the interactive interpeter and letting it print the result of subprocess.run(), yes.
[16:25:32] <bjs> wyre: the "python shell" prints out each line's value for you
[16:25:46] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[16:26:05] *** Joins: luigibu (~luigi@80.30.201.209)
[16:26:05] *** Joins: alzgh (~alzgh@user/alzgh)
[16:28:01] <wyre> bjs, is it not called "python shell"?
[16:28:32] *** Joins: water_27300935_ (~xe@182.90.96.187)
[16:28:46] *** Parts: water_27300935_ (~xe@182.90.96.187) ()
[16:28:48] <bjs> wyre: it's not really a shell, but it's often called the interactive interpreter, or REPL or "python console". There are lots of names and they all mean the same thing
[16:29:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:29:32] <VaniaPy> i'm trying to create a db and store some logs in a table but it's not getting created, is there an error in the configuration? https://dpaste.org/vihk
[16:29:33] <wyre> hmmm, I'm curious ... why it's not considered a shell?
[16:29:36] <bjs> but the point is, subprocess isn't printing out that CompletedProcess thing
[16:29:56] *** Joins: Sario (uid356235@fosshost/cdo/Sario)
[16:30:59] <Yhg1s> VaniaPy: accessing record.__dict__ directly is odd, and doing record.__init__['exc_info'] is doubly odd. Do you just mean to use 'record.exc_info' and 'record.timstamp' and such?
[16:31:18] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:31:18] *** Joins: guenhael (~Thunderbi@193.52.208.98)
[16:31:39] <Yhg1s> wyre: because it doesn't talk the same language as shells, which are what people use to launch programs.
[16:32:22] <Yhg1s> VaniaPy: of course, you're also not actually logging anything, so perhaps that's why you're not seeing any logging happening.
[16:32:36] <Yhg1s> (also you're not configuring logging.)
[16:33:26] *** Joins: esv (~esv@74.124.178.154)
[16:34:04] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[16:34:43] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[16:35:03] *** Joins: alzgh (~alzgh@user/alzgh)
[16:35:53] *** Joins: jmcb (~jmcb@nas47-67.york.ac.uk)
[16:36:53] *** Quits: jmcb (~jmcb@nas47-67.york.ac.uk) (Client Quit)
[16:37:07] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[16:38:29] *** Joins: mat001 (~mat001@c-73-189-86-20.hsd1.ca.comcast.net)
[16:39:10] *** Joins: luigibu (~luigi@80.30.201.209)
[16:39:46] *** Joins: remote (~self@user/hackers)
[16:40:22] *** Joins: white_shadow (~white_sha@user/white-shadow/x-1132694)
[16:40:47] *** Leonarbro_ is now known as Leonarbro
[16:40:49] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 252 seconds)
[16:43:42] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[16:45:49] <rakoon> Can I use logger.exception("message") outside a try/except block passing the exception object?
[16:46:44] <Yhg1s> rakoon: no, you should only call logging.exception() from an 'except' block.
[16:47:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[16:47:19] *** Quits: trace987 (~trace@ip5b429834.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[16:47:40] *** Joins: shad (~shad@user/shad)
[16:47:44] <Yhg1s> rakoon: you can, however, just call logger.error("message", exc_info=...)
[16:48:17] <rakoon> Yhg1s: thanks!
[16:49:00] *** Joins: fikran (~fikran@user/fikran)
[16:49:17] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[16:49:41] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:52:07] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:52:30] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[16:53:38] *** Quits: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net) (Quit: Leaving)
[16:57:43] *** Joins: stonkey (~stonkey@user/stonkey)
[16:58:50] <VaniaPy> Yhg1s hmm i tried to modify a bit the Handler https://dpaste.org/FoRb
[16:59:14] <VaniaPy> my plan is to log an event when an alert is getting triggered
[16:59:53] *** Quits: white_shadow (~white_sha@user/white-shadow/x-1132694) (Quit: Leaving)
[17:00:15] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[17:01:29] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:01:51] *** Joins: dez (uid92154@user/dez)
[17:02:44] *** Joins: theprophet (~theprophe@85.114.228.184)
[17:03:38] <theprophet> has any1 done this HackerRank test called BomberMan ?
[17:05:52] <bjs> theprophet: probably someone has,  but maybe people can help even if they haven't done it
[17:05:58] <bjs> theprophet: do you have a question?
[17:07:05] <theprophet> bjs well, i am in the second round of paid internship for one company and they are using this garbage test for interns from hacherrank and i need to this program to pass to aply for this paid interneship
[17:07:14] <theprophet> but i am having a hard time understanding it .
[17:07:34] <theprophet> and my question is if any1 has already done this to help me to understand how to finish this
[17:08:09] <bjs> theprophet: https://www.hackerrank.com/challenges/bomber-man/problem this?
[17:08:36] <theprophet> bjs yes , exactly that.
[17:08:36] <mrwick> two examples: https://bpa.st/XOYA
[17:09:10] <bjs> theprophet: it looks interesting,  what are you having trouble with?
[17:09:18] <mrwick> is it bad to have methods that return nothing and just manipulate class attributes?
[17:09:22] <bancroft> https://bpa.st/AYEQ xmlsec seems like a hot-piece of garbage right now. It uses setuptools_scm at build time which means even if you pin repos at specific versions a subdep will be updated to the latest like when tomli updated yesterday it suddenly broke everything. I tried writing a pip.conf file with no-build-isolation = true but the error still happens. Does anyone have any wisdom which isn't
[17:09:23] <bancroft> "update to python 3.7+" ?
[17:09:32] <bjs> mrwick: no
[17:09:51] <mrwick> bjs: so methods that do not return are ok?
[17:10:03] <bjs> mrwick: sure,  they're very common
[17:10:14] <theprophet> bjs well basicaly with everything. tbh.
[17:10:23] <grym> mrwick: strictly speaking, python methods are always fruitful, but "an implicit  return None" is very normal and it's fine to do
[17:10:52] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:11:03] <mrwick> right, but if I use a class simply the same way a regular module would be, is it considered `bad practice´?
[17:11:31] <mrwick> where class attributes are akin to module variables
[17:11:37] <grym> if you have a class full of static methods and nothing else, that's a little weird -- in that that's what a module of functions is
[17:11:43] <bjs> mrwick: well usually you expect to have multiple instances of a class
[17:11:49] *** Quits: llanhmod (~personnel@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[17:12:07] <bjs> and then those instances each their own attributes with possibly different values
[17:12:16] <Wooble> mrwick: a setter that doesn't return anything is probably not how you'd use a module :)
[17:12:36] <bjs> theprophet: okay, well, have you read the text?
[17:12:50] <bjs> theprophet: "everything" is quite broad...
[17:12:57] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:a38a:f44a:285:6416)
[17:13:02] <theprophet> bjs yes but my knowledge and experience is not enough to finish it. even to start.
[17:13:25] <mrwick> yes, without the need to have many objects, using a class just to pass self around is not necessary
[17:13:29] <bjs> theprophet: why do you say this test is garbage?  have you used list before?
[17:13:36] <bjs> mrwick: well "many" might be 2
[17:13:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[17:14:01] <bjs> mrwick: or even just 1 to be honest, a class is also about packaging related things together
[17:14:08] <theprophet> bjs i said garbage because, i am mad. not like objectivly.
[17:14:13] *** Joins: llanhmod (~personnel@user/domhnall/x-2887755)
[17:14:47] <bjs> theprophet: the test talks about a 2d grid, so I would say make a list like [[".", ".", "."], [".", "O", "."], etc]
[17:14:58] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:15:12] <bjs> then you can use `for` loops and indexing to do the things the task asks you to
[17:15:16] <theprophet> bjs yes but, thats not the only thing right?
[17:15:19] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:15:23] <theprophet> and thats where i get stuck
[17:15:40] <bjs> theprophet: well so you aren't stuck with "everything", you got at least to making a grid with some lists?
[17:15:46] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[17:16:57] <theprophet> bjs no i dont have anything, ive tried like 5 times and then erased the whole code i wrote, because it was wrong.
[17:17:26] <bjs> theprophet: you deleted it all instead of fixing it?
[17:17:38] *** Joins: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net)
[17:17:42] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[17:17:43] <theprophet> bjs it was not fixable, since it was all like radically wrong.
[17:17:55] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[17:17:57] <bjs> theprophet: well it's certainly less wrong than an empty file :)
[17:18:30] <theprophet> ill show you something, ive deen recently with help of google. but its still wrong.
[17:18:33] <bjs> theprophet: well, is my hint about using lists for the grid enough to give you a start?
[17:18:55] <theprophet> bjs https://dpaste.org/vooV
[17:21:08] <bjs> theprophet: okay... that's a bunch of code
[17:21:10] <bjs> what about it?
[17:21:11] <wyre> Yhg1s, will subprocess return always a byte string for stdout?
[17:21:27] <bjs> wyre: subprocess functions have an `encoding` argument
[17:21:33] <bjs> if you don't pass it an encoding, they will be bytes.
[17:22:12] *** Quits: pystardust (~pystardus@172-105-41-139.ip.linodeusercontent.com) (Quit: cya!)
[17:22:38] *** Quits: rubemlrm (~rubemlrm@user/rubemlrm) (Quit: The Lounge - https://thelounge.chat)
[17:23:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:23:06] <dablitz> good morning
[17:23:32] *** Joins: rubemlrm (~rubemlrm@user/rubemlrm)
[17:26:04] <theprophet> bjs i fixed couple of things there. can you test with me and tell me if it does what it suppose to for you too? https://dpaste.org/1hKo
[17:26:28] <bjs> theprophet: I mean there is a lot going on here,  are you saying it works?
[17:27:11] <theprophet> bjs yes i say it works but, i gotta feeling like i am making some fatal mistake ,and i need to be sure from the view of the pro.
[17:27:15] <bjs> theprophet: I'm confused why your code doesn't have a bomberMan function like the text says
[17:27:18] <theprophet> more xperience then me
[17:27:46] <bjs> theprophet: have you tried it on lots of different inputs (including the example one?)
[17:27:49] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:27:59] *** Joins: trace987 (~trace@ip5b429834.dynamic.kabel-deutschland.de)
[17:28:13] <theprophet> tbh, reason is cause, i was litteraly using lots of other tutorials and documentation to achieve this , and i forgot lots of things to do from the original request.
[17:28:29] <theprophet> not lots but many yes
[17:28:40] *** Quits: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net) (Quit: SCV ready!)
[17:29:17] *** CuriousErnestBri is now known as CuriousErnestBro
[17:29:24] <bjs> theprophet: ah
[17:29:33] <theprophet> i am getting ValueError: not enough values to unpack (expected 3, got 1)
[17:29:41] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Quit: mihaiadrian)
[17:29:41] <theprophet> whenever i am typing 3 for example
[17:30:13] <theprophet> and whenever i adress the exception., i see that i have a 3 values.
[17:30:22] <theprophet> not 1
[17:30:44] <bjs> theprophet: well Python won't be lying, maybe you're looking at the wrong line/value
[17:30:56] <theprophet> its a link. i am in pycharm
[17:31:11] <theprophet> and it litteraly sends you to where problems seems to ocur
[17:31:23] <bjs> theprophet: well if Python says there's only 1 value then there's only 1 value
[17:31:37] <theprophet> yes, its not lying it clear
[17:31:39] <bjs> Python literally cannot be wrong,  so you must be misunderstanding or reading the wrong value somewhere
[17:32:24] <bjs> theprophet: maybe you should try use the bomberMan setup code they tell you to use, and put your solve code in there (and get rid of the Reader class
[17:32:31] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 252 seconds)
[17:32:32] *** Joins: bloody (~bloody@user/bloody)
[17:32:37] <bjs> that might make the code simpler to follow
[17:33:16] *** Joins: odoood (~odoood@2601:c8:c003:a550::5)
[17:33:17] <theprophet> ill try
[17:33:25] <wyre> bjs, well, apparently even using an encoder it will return a string 🤔
[17:33:37] <bjs> wyre: what do you mean?
[17:33:46] <bjs> it's always going to return some kind of string, whether it be text or bytes
[17:33:57] *** Quits: XV8 (~XV8@2601:5cb:c001:50:3422:70c3:45ca:a8b5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:34:02] *** Joins: tobybl_ (~tobybl@213.31.132.151)
[17:34:05] <bjs> theprophet: also don't be afriad to use more than 1 letter for a variable name, or to make more `def`s if it makes it easier to read
[17:34:09] <dablitz> morning all. I have a python issue I cannot solve. I am a HAM operator working with GNU radio. the python flow grpah works perfectly. then there is a sub process shell program that recieves data from the flow graph. when I run it seperately it works perfectly. I am using QT5 and trying to make a nice front end. as soon as I run the sub process my entier flow graph freezes, like it is waiting for the back end to finish what it is
[17:34:09] <dablitz> doing. I can pastebin the python but for some reason when I try and put everything in a nice front end, the entire thing freezes. could someone give me a hand/
[17:34:11] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:34:19] <wyre> bjs, https://bpa.st/67OQ
[17:34:35] <wyre> but ok then 😊
[17:34:37] <theprophet> bjs thank you.
[17:34:43] <bjs> wyre: what?  I'm not sure what you're saying
[17:35:14] <wyre> bjs, yes, thank you because I just want to confirm that it's going to return always some kind of string
[17:35:18] *** Joins: XV8 (~XV8@2601:5cb:c001:50:3422:70c3:45ca:a8b5)
[17:35:37] <bjs> wyre: oh, yeah. stdout/stdin are just files full of bytes/text.
[17:35:41] <bjs> so you always get strings
[17:36:14] *** Joins: abelvesa (~abel@188.25.169.131)
[17:36:38] *** Quits: tobybl (~tobybl@213.31.132.151) (Ping timeout: 260 seconds)
[17:36:54] <bjs> if you know the string is a number you can create a number from it with the int() function: `status = int(subprocess.run(...).stdout)`
[17:37:00] <abelvesa> can anyone point me to some examples where Miniterm is used as a library ?
[17:37:18] <abelvesa> I'm talking about the one from pyserial
[17:37:19] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:37:26] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[17:38:11] <dablitz> https://pastebin.com/tGtFHThw <---- help
[17:38:27] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:39:27] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[17:39:32] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:9563:3661:427a:9acd)
[17:43:18] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:44:37] <montpol> When I do a.shape of a numpy array a , why is the result (3,)?
[17:45:01] <montpol> why does it give a blank for the columns?
[17:45:21] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:46:23] <phy1729> (3,) is a tuple with one element: 3. (3) is just 3
[17:46:36] *** Joins: ub (~Thunderbi@p200300ecdf1abbee153a2c4097e8e97e.dip0.t-ipconnect.de)
[17:47:58] <bjs> montpol: it means the array has one dimension, and that dimension is of length 3.
[17:48:17] <montpol> here is the array [ 15.43754925 676.08780002  93.23455418]
[17:48:30] *** Joins: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[17:48:33] <bjs> montpol: that makes sense, it's a 1-dimensional array with 3 things in it
[17:48:36] <bjs> just like the shape told you :)
[17:48:42] <montpol> why not just write it then (3,1)...
[17:48:52] <bjs> montpol: because that's a 2 dimensional shape where the second dimension has length 1
[17:48:59] <bjs> montpol: which would be [ [15 676 93] ]
[17:49:22] <montpol> shape should give the dimensions of the columns and rows, no?
[17:49:27] <montpol> size*
[17:49:54] <bjs> montpol: if your thing is 2 dimensional then yes, but you don't have "columns and rows" because well... it's only 1 dimensional
[17:50:13] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[17:50:24] <montpol> ah, i get it :D
[17:50:24] *** Joins: moog (~moog@107.126.53.25)
[17:50:26] <bjs> montpol: compare [1,2,3] with [[1,2,3]], the second is a matrix with one row and 3 columns
[17:50:38] <montpol> the idea of having a column is in 1D nonexistent
[17:50:39] <bjs> montpol: [1,2,3] is not the same as [[1,2,3]] which is not the same as [[1],[2],[3]]
[17:50:42] <bjs> montpol: right
[17:51:02] <montpol> thanks :)
[17:51:02] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[17:51:35] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[17:51:45] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:53:06] <lesshaste> I have a puzzle I would like to solve in python. But I am not sure how to do this. This is the puzzle https://bpa.st/64OQ
[17:53:13] <lesshaste> what is a sensible approach?
[17:53:22] <bjs> lesshaste: I recommend writing some Python code :P
[17:53:39] <lesshaste> bjs,  :) But what approach would you take algorithmically?
[17:54:13] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[17:54:13] *** Quits: theprophet (~theprophe@85.114.228.184) (Ping timeout: 256 seconds)
[17:54:22] <bjs> lesshaste: well something about this puzzle is weird, I assume there's more context
[17:54:29] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[17:54:32] <lesshaste> bjs, what is weird about it?
[17:54:47] <bjs> lesshaste: well it starts with the phrase "All digits" as if there's a previous paragraph explaining what digits
[17:55:17] <lesshaste> bjs, that's my fault :) I am just defining what is meant by a digit later on
[17:55:19] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[17:55:20] <bjs> then it says "in the second column" but ... what happened to the first column, and what columns exactly?
[17:55:27] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[17:55:50] <bjs> what's the difference between a "location" and a "column" ?
[17:56:05] <lesshaste> bjs, ah ok. Let me clarify the description. Thanks
[17:56:32] <phy1729> I think it's juat sum(a[0:4]) = 25   a[1] + sum(b[0:2]) = 16 and a[3] + sum(c[0:2]) = 9
[17:56:52] <montpol>  [[ 3.70553889e-01  8.49859427e-04 -1.85819348e+00]
[17:56:52] <montpol>  [ 8.49859427e-04  2.78924215e+01 -1.42250507e-02]
[17:56:52] <montpol>  [-1.85819348e+00 -1.42250507e-02  2.79314272e+01]]
[17:56:52] <montpol> the dimensions is 2 and the shape is (3,3). bjs what am I missing here that this is 2D?
[17:57:15] <bjs> montpol: I'm not sure what the question is
[17:57:27] <bjs> montpol: (3,3) means it's 2 dimensions, each of length 3. and that's what you showed me yes
[17:57:27] <montpol> how is this 2D
[17:57:37] <bjs> montpol: it has rows and columns, 3 rows each with 3 columns
[17:57:50] <bluss> montpol: if .ndim is 2, it's 2D? :)
[17:57:50] *** Joins: monkey_ (~user@181.114.17.106)
[17:58:07] <lesshaste> bjs, better? https://bpa.st/EDSA
[17:58:08] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[17:58:11] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[17:58:29] *** Quits: simen (~simen@host-37-191-236-181.lynet.no) (Ping timeout: 268 seconds)
[17:59:08] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[17:59:15] <grym> montpol: [[]]  sure is rank 2
[17:59:16] <lesshaste> bjs,  or https://bpa.st/NVXQ
[17:59:25] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[18:00:13] <bjs> lesshaste: where does the 3x5 part come into it?
[18:00:21] <bjs> lesshaste: do you mean each row is a 5-digit number?
[18:00:37] <lesshaste> bjs,  no! the elements of the matrix are digits.
[18:00:45] <bjs> lesshaste: ... so yes?
[18:00:47] <lesshaste> let me try again
[18:01:09] <bjs> lesshaste: if each element is a digit, then how can you add "2 more digits" to that column?
[18:01:18] <lesshaste> bjs,  https://bpa.st/MHAQ
[18:01:23] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[18:01:29] <phy1729> I think th matrix is sparse
[18:01:36] <lesshaste> bjs,  we set one row and now there are two more that have not been set yet
[18:01:40] <lesshaste> phy1729, yes
[18:01:49] *** Joins: Payam (~Payam@138.106.57.132)
[18:02:25] <bjs> lesshaste: why not just draw some example input/outputs? the puzzle is still confusingly worded
[18:02:37] <bjs> lesshaste: do you mean initially the matrix is empty?  or initially there is just one row that has numbers in?
[18:02:42] <bjs> or is it initially full?
[18:02:54] <lesshaste> bjs,  https://bpa.st/YH3A
[18:03:12] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi)
[18:03:17] <lesshaste> bjs,  initially is has exactly 9 of the 15 entries with a digit in it
[18:03:45] <lesshaste> actually what do you mean by initially?
[18:03:55] <lesshaste> it just has  9 of the 15 entries with a digit in it
[18:04:05] <phy1729> The raw brute force way would be forget the 2D stuff, iterate over permutations of range(1, 10), check if sum(result[0:5]) == 25; result[1] + result[5] + result[6] = 16 and result[3] + result[7] + result[8] == 9
[18:04:05] <bjs> lesshaste: what is the puzzle exactly?
[18:04:14] <bjs> you have to fill the other 6 entries?
[18:04:48] <lesshaste> bjs,  https://bpa.st/5HGA
[18:05:07] <lesshaste> bjs, you have to find a way of filling the 9 slots with digits
[18:05:36] <bjs> lesshaste: this isn't a very interesting puzzle, isn't it brute-forceable?
[18:06:10] <lesshaste> bjs, how? I suppose you could try all 9 factorial different ways?
[18:07:10] <lesshaste> and for each one check all the constraints
[18:07:22] <bjs> lesshaste: yes.
[18:07:34] <lesshaste> bjs, apparently you can do it in your head !
[18:07:39] <phy1729> Looks like there's 168 solutions and takes about half a second to brute force
[18:07:40] <lesshaste> somehow
[18:07:46] <bjs> lesshaste: no but I can write Python code to do it?
[18:07:47] <spaceone> a multiprocessing.Manager() always spawns a new process. When I fork another process - will it automaticlly also create a manager-server process?
[18:07:51] <bjs> I mean this is #python I assumed you'd use Python to solve it
[18:08:05] *** Joins: R035N3R (~phobos@user/r035n3r)
[18:08:07] <lesshaste> bjs, yes that would be cool. But the brute force I can do
[18:08:15] <lesshaste> I was assuming it had to be something cleverer
[18:08:21] <lesshaste> oh well
[18:08:24] <lesshaste> thanks anyway
[18:08:28] <bjs> lesshaste: I mean there's definitely cleverer ways
[18:08:37] <lesshaste> those I would love to hear about
[18:08:41] <phy1729> With brute force, you have you consider time to run plus time to write
[18:08:58] <phy1729> If the simple way is fast enough, programming time dominates
[18:09:18] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 260 seconds)
[18:09:26] *** Quits: Payam (~Payam@138.106.57.132) (Quit: Client closed)
[18:09:39] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[18:10:39] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[18:11:10] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 260 seconds)
[18:11:24] <bjs> lesshaste: why would we bother tho, when brute force is by far the quickest :s
[18:11:34] <lesshaste> bjs,  because clever is fun!
[18:11:49] <lesshaste> phy1729, that is 100% true
[18:12:13] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:12:44] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[18:13:05] <bjs> it takes my computer 0.01s to find all 168 solutions and about ~30s to have written the code to test it.
[18:13:25] <lesshaste> bjs, oh that's cool. Could you show me the code please?
[18:13:50] *** Joins: thevishy (~Nishant@2405:201:f005:c007:d93e:9746:14f0:2f69)
[18:14:18] <Wooble> is it fun to get someone else to be clever for you? :/
[18:14:20] <bjs> lesshaste: why? you write it? :P
[18:14:26] <phy1729> There's 7 solutions up to "isomorphism"
[18:14:47] <lesshaste> phy1729, could I see your code please?
[18:14:54] <lesshaste> bjs, that's cruel
[18:15:03] <bjs> lesshaste: is it? it's a brute force solution it's not clever
[18:15:11] <bjs> it's just looping over each permutation of 1..9 and checking if the sums add up
[18:15:34] <phy1729> I basically said what my code is above
[18:16:27] <bjs> phy1729: that's what I wrote too
[18:16:50] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:16:59] *** Quits: llanhmod (~personnel@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[18:17:26] <lesshaste> Wooble, yes if you are president :)
[18:17:37] <lesshaste> Wooble, but actually reading clever solutions is fun
[18:18:08] <phy1729> The solutions aren't clever in the slightest
[18:19:44] *** Quits: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8) (Remote host closed the connection)
[18:20:55] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[18:21:47] <lesshaste> I will be less shy
[18:21:49] <lesshaste> for tuple_of_digits in itertools.permutations(range(1,10)):
[18:21:49] <lesshaste>     if sum(tuple_of_digits[:5]) == 25 and sum(tuple_of_digits[5:7]) + tuple_of_digits[1] == 16 and sum(tuple_of_digits[8:10]) + tuple_of_digits[3] == 9:
[18:21:49] <lesshaste>             print(tuple_of_digits)
[18:22:06] <lesshaste> is that the same as yours?
[18:22:31] <lesshaste> https://bpa.st/ZZGQ
[18:22:43] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[18:22:53] <phy1729> basically yes, though I think that last one should be [7:9]
[18:23:02] *** Joins: georgios (~georgios@user/georgios)
[18:23:57] *** chilvers1 is now known as chilversc
[18:24:19] <lesshaste> phy1729,  yes, thanks
[18:24:47] <lesshaste> phy1729, hmm.. the second and fourth number always sum to 5
[18:24:50] <lesshaste> why is that?
[18:25:44] <lesshaste> I feel this must be the clue to how you are meant to solve it
[18:26:30] *** Joins: theprophet (~theprophe@85.114.228.184)
[18:26:34] <phy1729> That's more a ##math question, but 25+16+9 = 50 and sum(range(1.10)) = 45
[18:26:47] <phy1729> er with a comma of course
[18:26:58] <lesshaste> ah yes of course
[18:27:00] <lesshaste> thank you
[18:27:02] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 240 seconds)
[18:27:15] <lesshaste> ##math is a useless channel :)
[18:27:23] <bjs> for these kind of things probably
[18:27:29] *** Quits: whaley (~whaley@2603-6080-a301-33d1-6003-4db3-18f7-d344.res6.spectrum.com) (Ping timeout: 250 seconds)
[18:27:32] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[18:27:46] *** Joins: Fiji (~Fiji@user/fiji)
[18:29:15] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[18:29:26] *** Joins: Payam (~Payam@138.106.57.132)
[18:29:50] *** Quits: frost (~frost@user/frost) (Ping timeout: 260 seconds)
[18:30:22] <Payam> Hi I was thinking of using IsolatedAsyncioTestCase. When I try to varify with exception I have `with self.assertRaises..." But is it correct?
[18:30:58] <bjs> Payam: well that will assert that the block inside raises the exception
[18:31:00] *** Joins: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net)
[18:31:04] <bjs> if that sounds like what you wanted, then yes.
[18:31:12] *** Joins: Kanjizai (~kanjizai@cpe-107-185-193-171.socal.res.rr.com)
[18:31:40] <Payam> yes but shouldn't it be `async with´?
[18:31:53] <bjs> Payam: why?
[18:31:57] <Payam> i don't know
[18:32:17] <bjs> Payam: no it shouldn't be async with, Python exceptions aren't async
[18:32:19] <Payam> should the decorator still be @unittest.SkipUnless?
[18:33:10] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[18:33:19] *** Quits: bim9262 (~bim9262@user/bim9262) (Ping timeout: 256 seconds)
[18:33:45] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[18:33:49] <bjs> Payam: does it work?
[18:34:36] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[18:35:36] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[18:35:52] *** Joins: aniketgm (~Aniket@49.36.107.79)
[18:36:22] *** Joins: Babar (~Babar@171.226.230.141)
[18:37:10] *** Joins: luigibu (~luigi@80.30.201.209)
[18:37:16] *** Quits: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net) (Quit: SCV ready!)
[18:37:54] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[18:38:09] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[18:38:28] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-4546-0d46-660e-545c.res6.spectrum.com)
[18:39:48] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[18:42:29] *** Joins: humberto1 (~humbertow@187.202.244.149)
[18:44:03] *** Quits: Payam (~Payam@138.106.57.132) (Quit: Client closed)
[18:48:05] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 250 seconds)
[18:50:01] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[18:50:03] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[18:51:23] *** Joins: zebrag (~chris@user/zebrag)
[18:52:24] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[18:54:13] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[18:54:57] *** Joins: FluffyMask (~masque@user/fluffymask)
[18:55:31] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[18:55:51] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[18:55:52] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[18:56:44] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Remote host closed the connection)
[18:56:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:57:22] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[18:57:27] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[18:58:19] *** Joins: fikran (~fikran@user/fikran)
[18:58:42] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[18:58:43] *** Joins: benjwadams (~benjwadam@96.238.4.28)
[18:58:49] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[19:00:06] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[19:00:08] *** Quits: \mSg (~mSg@user/msg/x-0285936) (Ping timeout: 265 seconds)
[19:02:05] *** Joins: akk (~akk@75.161.146.115)
[19:03:50] *** Joins: ano (~ano@user/ano)
[19:03:53] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 250 seconds)
[19:04:56] *** Joins: Enitin (~Enitin@82.102.22.86)
[19:05:18] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[19:08:05] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189)
[19:08:12] *** Joins: jamiejackson (~jamiejack@207.172.87.34)
[19:08:53] *** Joins: LimeOn (~user@user/limeon)
[19:08:59] *** Joins: \mSg (mSg@user/msg/x-0285936)
[19:09:41] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 252 seconds)
[19:10:38] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 268 seconds)
[19:11:03] *** Quits: shad (~shad@user/shad) (Ping timeout: 250 seconds)
[19:12:31] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 256 seconds)
[19:15:19] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:15:56] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[19:17:42] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[19:17:49] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[19:18:55] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Remote host closed the connection)
[19:19:11] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[19:19:41] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[19:21:19] *** Joins: user51 (~user51@176.228.151.30)
[19:23:55] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[19:23:59] *** Quits: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net) (Remote host closed the connection)
[19:24:12] *** Quits: aniketgm (~Aniket@49.36.107.79) (Quit: leaving)
[19:26:43] *** Quits: delvian (~delvian@41.13.196.166) (Ping timeout: 265 seconds)
[19:26:46] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:27:56] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[19:28:41] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:29:09] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:29:20] *** Quits: nomic (~nomic@85.203.46.65) (Remote host closed the connection)
[19:29:27] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (Quit: Leaving)
[19:29:51] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Quit: Leaving...)
[19:29:51] *** Quits: chele (~chele@user/chele) (Ping timeout: 252 seconds)
[19:31:25] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:31:38] *** Joins: iomari891 (~iomari891@197.210.52.156)
[19:32:29] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[19:33:29] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[19:34:30] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[19:34:48] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:35:15] *** Joins: shad (~shad@user/shad)
[19:35:38] *** Joins: arinov (~arinov@176.89.29.127)
[19:36:17] *** Joins: jfcaron (~jfcaron@192.252.229.166)
[19:36:38] *** Joins: tg (~tg@rockylinux/infra/tg)
[19:37:20] *** Quits: R035N3R (~phobos@user/r035n3r) (Quit: WeeChat 3.3)
[19:37:40] *** Joins: zaquest (~notzaques@5.130.79.72)
[19:37:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[19:38:37] *** Joins: hypoon (~hypoon@pool-108-31-49-4.washdc.fios.verizon.net)
[19:38:57] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[19:39:40] *** Joins: fikran (~fikran@user/fikran)
[19:40:37] *** Joins: luigibu (~luigi@80.30.201.209)
[19:41:59] <Helenah> I'm not happy with what I'm doing, my application maps directory 'foo' to '/' within the application, thing is I'm sticking code here, there and everywhere to prevent things from being exposed, I noticed I can be at '/' and do '../' and escape that directory. Is there a better way of doing this than coding it all from scratch? It's becoming a nightmare in that I can't ensure security and things
[19:42:01] <Helenah> don't get exposed some place or another.
[19:43:28] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[19:45:09] *** Quits: luigibu (~luigi@80.30.201.209) (Client Quit)
[19:45:54] *** notevil_ is now known as notEVIL
[19:46:17] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[19:46:46] *** Joins: luigibu (~luigi@80.30.201.209)
[19:47:27] *** Quits: RiFo (~RiFo@user/rifo) (Ping timeout: 250 seconds)
[19:48:06] <grym> Helenah: chroot, perhaps
[19:48:11] <grym> make the OS do its job
[19:48:12] <CodeMouse92> Helenah: Define "exposed"
[19:48:29] <Helenah> grym, Is there no way to do it inside the application? What's the risk of using a chroot?
[19:48:37] *** Quits: magla (~gelignite@55d41c14.access.ecotel.net) (Read error: Connection reset by peer)
[19:48:41] <Helenah> CodeMouse92, I can expose '../'
[19:48:44] *** Joins: magla (~gelignite@55d41c14.access.ecotel.net)
[19:48:52] <CodeMouse92> Helenah: I mean, what are you hiding and why?
[19:49:01] <Helenah> CodeMouse92, Hiding? The OS FS.
[19:49:28] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[19:49:36] <CodeMouse92> I guess I should back way up. What is your overall goal?
[19:49:49] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[19:49:52] *** Quits: rsx (~dummy@ppp-188-174-41-29.dynamic.mnet-online.de) (Quit: rsx)
[19:50:01] *** magla is now known as gelignite
[19:50:15] <Helenah> I'm trying to provide a virtual file system '/' mapped to directory 'fs' present in the same directory as the application.
[19:51:03] <Helenah> I can expose the directories outside of fs, I don't want that.
[19:51:07] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[19:51:28] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[19:51:33] <Helenah> As for a chroot, I don't want that either because it means I've to have binaries inside it, for example sh.
[19:51:46] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[19:51:47] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:52:04] <Helenah> Looks like there is os.chroot
[19:52:05] *** Joins: aniketgm (~Aniket@49.36.107.79)
[19:52:06] * Helenah reads
[19:52:27] <CodeMouse92> Just trying to understand the problem better, why do you want to offer a virtual file system?
[19:52:33] <CodeMouse92> (Inquiry, not a challenge)
[19:53:05] <Helenah> CodeMouse92, I'm coding a BBS which I intend for users to have access to a common directory and a home directory within a root directory (not OS root).
[19:53:19] *** Quits: baltazar (~baltazar@188-143-71-34.pool.digikabel.hu) (Ping timeout: 252 seconds)
[19:53:20] <CodeMouse92> BBS! Woo! Throwback. :D
[19:53:28] *** Joins: llanhmod (~personnel@user/domhnall/x-2887755)
[19:53:34] <Helenah> :D
[19:53:50] *** Parts: user51 (~user51@176.228.151.30) ()
[19:53:55] <CodeMouse92> How will users interact with this filesystem? Is everything mediated by your Python code?
[19:54:00] <mefistofeles> Helenah: yeah, but I would do that at the OS level, as I think grym was suggesting. Rather, than trying to do it at the Python level
[19:54:05] <Helenah> I have actually coded an ls command, mostly works, just don't want to repeat all my security code. os.chroot() will probably work.
[19:54:28] <Helenah> mefistofeles, As long as it's not a unix chroot then that's fine.
[19:54:32] <mefistofeles> Helenah: containers are a good way for that (using linux cgroups, containerd, or even systemd containers capabilities)
[19:54:41] <Helenah> mefistofeles, No thanks.
[19:55:02] <Helenah> I'm not running all that for a simple task.
[19:55:09] *** Joins: baltazar (~baltazar@84-236-20-119.pool.digikabel.hu)
[19:55:17] <CodeMouse92> Helenah: Have you considered something simple like Docker at least?
[19:55:37] <Helenah> I want to use os.chroot()
[19:55:40] <CodeMouse92> kk
[19:56:09] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[19:56:20] <Helenah> Thank you guys.
[19:56:36] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:56:42] <CodeMouse92> Helenah: Side note, especially since security is so critical here, look into Bandit if you're not already using it.
[19:56:50] <CodeMouse92> It'll help you catch security vulnerabilities in your code.
[19:57:37] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[19:58:05] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[19:58:14] *** Quits: newbie|2 (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[19:59:19] *** Quits: jfcaron (~jfcaron@192.252.229.166) (Quit: jfcaron)
[19:59:37] <mefistofeles> Helenah: how about something like this https://www.stavros.io/posts/python-fuse-filesystem/ ?
[20:03:15] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[20:05:33] <apollo13> Helenah: most frameworks (for instance django) ship with a safe_join function that lets you join paths but not escape outside a predefined root folder
[20:05:38] <apollo13> a chroot seems overkill
[20:06:23] <montpol> I'm getting the error "if statements1 not enough values to unpack (expected 2, got 1)" from line 221 and "What too many indices for array: array is 1-dimensional, but 2 were indexed" from line 226 https://bpa.st/YUTQ
[20:06:45] <montpol> anyone know how I can fix these errors? Google helped a bit but am still getting the errors
[20:07:16] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[20:07:24] <bjs> montpol: did you include the actual tracebacks? I can't see them in your  paste
[20:07:47] <bjs> i'm not sure how line221 gives you that error (and are you sure you copied the error properly?)
[20:08:15] *** Joins: cosimone (~user@93-47-231-203.ip115.fastwebnet.it)
[20:08:17] <montpol> if statements1 not enough values to unpack (expected 2, got 1)
[20:08:17] <montpol> What too many indices for array: array is 1-dimensional, but 2 were indexed
[20:08:24] <montpol> thats from the terminal ^
[20:08:48] <bjs> montpol: can you just create a bpaste with the full errors+tracebacks
[20:08:50] <Helenah> CodeMouse92, Sounds like a good idea.
[20:08:52] *** Joins: luigibu (~luigi@80.30.201.209)
[20:09:08] <Helenah> Also: PermissionError: [Errno 1] Operation not permitted: 'fs'
[20:09:15] <Helenah> That's with trying to chroot to it.
[20:09:33] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[20:09:42] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 260 seconds)
[20:10:16] <montpol> bjs the tracebacks are not what causes the program to fail (there is another major problem that I have yet to fix -- this current problem is trying to solve that) and there are a lot of debugging prints that are within the traceback so its really a lot of unnecessary info
[20:10:30] <Helenah> apollo13, It does? I think docker seems overkill.
[20:10:50] <bjs> montpol: the traceback tells you why the error happened. if Python is saying "not enough values to unpack" it'll also print out the traceback
[20:10:53] <montpol> if I dont do the try except, no errors from this pop up for example
[20:10:58] *** Joins: Luke (~ldm@hacksoc/member)
[20:11:00] <bjs> montpol: can't you just pastebin it all?
[20:11:29] <apollo13> Helenah: you do realize though that chroot is not a security feature?
[20:11:58] <montpol> bjs ok one moment
[20:12:00] <bjs> montpol: if you *Dont* do the except no errors appear? isn't that backwards.
[20:12:19] <montpol> welcome to my life with this legacy code -_-
[20:12:33] <Helenah> What about pyfilesystem?
[20:12:41] <apollo13> Helenah: setting up a secure chroot is probably more work than setting up a secure docker container. That said, what kind of application are you writing?
[20:13:28] <Helenah> apollo13, I'm trying to create a BBS with a root directory '/' which maps to fs directory in the application directory.
[20:13:38] <apollo13> Helenah: what is a BBS?
[20:13:42] <bjs> montpol: well,  anytime there's an exception there is a traceback. If you remove the try/except you should see the traceback (unless there's another try/except also hiding it too).  You can also print out the traceback from the `except` with the "traceback" module
[20:13:45] <Helenah> bulletin board system.
[20:13:54] <apollo13> Helenah: ah forum, ie a webpage?
[20:13:58] <Helenah> No.
[20:14:00] <bjs> montpol: either way, Python gives you the traceback for a reason: it's what tells you what happened :P
[20:14:05] <Helenah> A BBS system, they're cli not web based.
[20:14:11] <montpol> bjs https://bpa.st/CDAQ
[20:14:34] <apollo13> Helenah: I see, well you will be in a world of pain
[20:14:35] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[20:14:41] <bjs> montpol: your try/except is hiding the traceback because you're not printing it out so you can't see where the unpacking error is coming from
[20:14:44] <Helenah> apollo13, Why?
[20:14:57] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 252 seconds)
[20:15:10] <apollo13> Helenah: well look at your current issues ;)
[20:15:14] <montpol> bjs so should I print parameters?
[20:15:33] <bjs> montpol: either don't catch the exceptions at all or also print out the traceback
[20:15:41] <apollo13> Helenah: although I do not get the point, you probably want to write your own shell etc anyways to get this "secure"
[20:15:41] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 252 seconds)
[20:15:45] <Helenah> apollo13, It's just an issue.
[20:15:50] *** Joins: AsenMx (~AsenMx@user/asenmx)
[20:15:51] <apollo13> one of many ;)
[20:15:55] <Helenah> apollo13, I've already wrote my own shell.
[20:15:57] *** Joins: cliluw (~cliluw@47.147.73.223)
[20:16:00] <Helenah> It works great.
[20:16:00] <montpol> how do I print out the traceback? bjs
[20:16:02] <apollo13> so you'd probably virtualize all "file system access" anyways
[20:16:12] <bjs> montpol: well presumably by just deleting the try/except part
[20:16:22] <bjs> montpol: I'd expect the program would just crash with an error if you did that
[20:16:26] <apollo13> Helenah: and you let the user execute arbritrary binaries in there?
[20:16:45] <montpol> i had that originally and I no errors were shown but ill do it again
[20:17:15] <bjs> montpol: well, where is fit() being called? maybe you have more try/excepts in other places that are also hiding the errors
[20:17:30] <Helenah> apollo13, Access the operating system? No.
[20:17:44] <bjs> montpol: basically you never want to write `except Exception as e:` or `except:` because these catch *everything*
[20:18:28] <Helenah> using subprocess? No.
[20:18:49] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[20:18:59] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Ping timeout: 252 seconds)
[20:20:14] <montpol> bjs https://bpa.st/7H5A
[20:20:16] <montpol> shows nothing
[20:20:53] * CodeMouse92 is stunned how many tests have been passing in this code, but actually should NOT have been by how they were written.
[20:20:54] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[20:20:55] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[20:21:35] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[20:21:36] <montpol> fit is being called in a file called observables.py
[20:21:38] <Helenah> pyfilesystem does what I want.
[20:21:58] <bjs> montpol: what is observables.py, did you write it? does it also have `except Exception` lines in it?
[20:21:59] <apollo13> Helenah: great, just make sure it does not touch the real filesystem
[20:22:06] <bjs> montpol: I'm not sure, this paste, the code is the same as before isn't it?
[20:22:14] <apollo13> simple putting files into your home dir can already cause problems
[20:22:22] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[20:22:32] <apollo13> ie there have been some vulns a few years back about locale files iirc
[20:22:36] <Helenah> apollo13, I was going to create an image for it if possible.
[20:22:44] <montpol> bjs yea i added just the new tracebacks: https://bpa.st/YKRQ
[20:22:48] <Helenah> I noticed it can read archives.
[20:22:57] <Helenah> But can it read an image, hmm.
[20:23:08] <montpol> CodeMouse92 is that a comment to the code I showed or from a previous comment?
[20:23:30] <CodeMouse92> montpol: Neither. It's from the code I'm working on my own
[20:23:38] <Helenah> Can it write, hmm.
[20:23:38] <bjs> montpol: what is this file you're showing me now?
[20:23:42] <CodeMouse92> Sorry, I could have been clearer.
[20:23:50] <apollo13> Helenah: what benefit would an image be? you cannot simply put binaries in that image and then execute it from pyfilesystem
[20:23:57] <bjs> montpol: it's neither the file you were showing me a minute ago nor the "observables.py" you just talked about?
[20:24:04] <bjs> is this a third different file?
[20:24:19] <montpol> bjs its the same file from before just without the tryexcept
[20:24:26] <montpol> i will add now observables
[20:24:35] <bjs> montpol: no it's not, the other file has a Fitter class, this has an Analyzer class?
[20:24:44] *** Joins: Fiji (~Fiji@user/fiji)
[20:24:51] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Ping timeout: 252 seconds)
[20:24:54] <Helenah> apollo13, Why do you think I want to use binaries?
[20:24:54] <montpol> my mistake, copied the wrong file
[20:25:05] <bjs> montpol: Okay Now I'm totally lost, how many files do you have ? :P
[20:25:09] *** Joins: emf (~emf@cpe-174-109-36-85.nc.res.rr.com)
[20:25:22] <bjs> montpol: this 3rd mysterious file *also* has lots of `except Exception as e` lines everywhere
[20:25:28] <bjs> every one of those could be hiding a bug somewhere :(
[20:25:35] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 252 seconds)
[20:25:41] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 265 seconds)
[20:25:45] <bjs> and it has `except:` too
[20:25:49] <apollo13> Helenah: I don't, I just want you to be sure that you don't want to use them ;)
[20:25:58] <bjs> montpol: and functions that have both!
[20:26:54] <Helenah> apollo13, I don't want to use them no.
[20:26:57] <Helenah> That would be silly.
[20:27:13] <montpol> bjs ok here is the first file and the observables.py file:https://bpa.st/AZWQ
[20:27:14] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[20:27:19] <montpol> https://bpa.st/AZWQ
[20:27:26] <apollo13> Helenah: what would the image contain? I mean I'd probably expect that fs to be baked by an sql database or so
[20:27:39] <apollo13> (I mean no idea what the users are supposed to do on that system anyways)
[20:27:41] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[20:27:52] <jiffe> whats a good well established async http/websocket library?
[20:27:53] <Helenah> apollo13, read, write and store files.
[20:28:02] <bjs> montpol: yeah this file *also* has `except Exception as e` in it. I see you put a `raise` in that one (why have it at all then?)
[20:28:10] *** Quits: grooverman_ (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[20:28:17] <montpol> in terms of total files: its a whole program but only 5-7 or so are important to me at the moment
[20:28:21] <jiffe> aiohttp still the goto?
[20:28:24] <montpol> bjs i didnt do that :D
[20:28:26] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[20:28:28] <apollo13> Helenah: what does that offer over simply mounting something via sshfs or so?
[20:28:30] <bjs> montpol: how many times does the line `except:` or `exception Exception as e:` appear?
[20:28:32] <bjs> in your files
[20:28:48] *** Quits: aniketgm (~Aniket@49.36.107.79) (Read error: Connection reset by peer)
[20:29:00] *** Joins: emf_ (~emf@2620:10d:c091:480::1:3f40)
[20:29:06] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[20:29:16] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:29:17] *** Joins: grooverman (~grooverma@177.102.117.95)
[20:29:38] <montpol> bjs 11 times 4 files
[20:29:44] <Helenah> apollo13, How can I do something on a BBS shell that I expect to read/write to a file if I purely use sshfs for everything?
[20:29:53] <montpol> 11 times for "except Exception as e"
[20:29:54] *** Joins: aniketgm (~Aniket@49.36.107.79)
[20:30:01] <Helenah> A database isn't everything and yes I use one.
[20:30:10] *** Quits: emf (~emf@cpe-174-109-36-85.nc.res.rr.com) (Ping timeout: 268 seconds)
[20:30:19] <bjs> montpol: I'm surprised you're really able to debug anything because of all these excepts hiding all the errors.  I'd really think about deleting them all (or at least making them more specific than `Exception`).  There is the "traceback" module that lets y ou print tracebacks from inside exception handlers
[20:30:43] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 256 seconds)
[20:30:47] <apollo13> Helenah: well you said the goal is to be able to "read/write/store files", you can do that via ftp ssh etc… I guess I still don't understand what such a BBS offers (nowadays?)
[20:30:51] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:30:56] <bjs> montpol: the problem with `except:` and `except Exception` is that they not only catch expected errors from the program but unexpected ones (e.g. bugs, typos, etc)
[20:31:10] <montpol> bjs 30 times for "except" (not inlcuding when it is except Exception as e)
[20:31:24] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:31:35] *** Quits: peterhil__ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[20:31:42] *** Joins: AsenMx (~AsenMx@user/asenmx)
[20:32:00] <Helenah> Also I like to "learn", I'm a systemiser, if I just have the attitude of "I'm not going to do this, I'm not going to try that" then what am I actually learning? Well first off I'd be learning nothing where as I need to be learning something. I'm fed up of this argument, if you're an NT and you feel you don't have to reinvent wheels, you don't have to tear everything apart to see how it works and
[20:32:02] *** Joins: gareppa (~gareppa@user/gareppa)
[20:32:02] <Helenah> then build it back up then be my guest but I've been the way I am my entire life.
[20:32:22] <montpol> bjs There is the "traceback" module that lets y ou print tracebacks from inside exception handlers. What do you mean by this? I just need to add a line or something?
[20:32:34] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[20:32:38] <bjs> montpol: I'm not sure how to make it more clear https://docs.python.org/3/library/traceback.html
[20:32:43] <Helenah> apollo13, It's a cli BBS, it's a server, the client logs in, they land on a custom shell, I still want to be able to manipulate data via that shell.
[20:32:47] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:32:59] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[20:33:15] <apollo13> Helenah: I all get the learning argument and support that. But what I don't get is why one would need a BBS nowadays (honestly curious)
[20:33:22] <bjs> montpol: traceback.print_exception can print things out nicely for you,  but the real solution to throw away all these overly broad exception handlers that are hiding all the errors
[20:33:32] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Read error: Connection reset by peer)
[20:33:51] <montpol> ok ill do that first namely delete all the excepts....
[20:33:54] <bjs> montpol: for example, a bare "except:" without naming an exception is bad. You have like 3 of them in one file.
[20:34:03] <Helenah> apollo13, Because I like them, I have friends who like them.
[20:34:04] <bjs> montpol: compare to how many bare "except:"s are in numpy itself, for example
[20:34:27] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[20:34:35] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[20:35:01] <montpol> bjs thats good to know. I didnt write this code but am trying to improve it.
[20:35:30] <montpol> so that means I need to remove also the try parts?
[20:36:15] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48b8r2los0o73ag.ipv6.telus.net)
[20:36:29] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48b8r2los0o73ag.ipv6.telus.net) (Remote host closed the connection)
[20:36:44] <bjs> montpol: yeah, there's no need for the try/except in these cases (at least the ones I saw); all they're doing is hiding the exception. IF they are there for a reason (to catch a specific exception) then they should catch just that exception
[20:36:54] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48b8r2los0o73ag.ipv6.telus.net)
[20:37:32] *** Quits: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca) (Remote host closed the connection)
[20:38:09] <montpol> I just added a main.py file to https://bpa.st/create. Do you think I need to remove the tryexcepts here too?
[20:38:36] *** Joins: maplefinger (~maplefing@user/lindis)
[20:38:44] *** Quits: nosoul (nosoul@gateway/vpn/protonvpn/nosoul) (Quit: Leaving)
[20:38:54] *** Quits: rany__ (~rany@user/rany) (Ping timeout: 276 seconds)
[20:40:30] <bjs> montpol: I cannot recommend enough not having exception handlers that catch *everything*.   Of course it's okay to have specific ones. `except KeyError as e:` when accessing a dictionary or `except IndexError:` when indexing a list, as those are expected
[20:40:49] *** Joins: rany_ (~rany@user/rany)
[20:40:58] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 260 seconds)
[20:41:13] <montpol> bjs ah ok so all of these expect: and expect as Exception as e: are just too general
[20:41:22] <montpol> thanks im going to remove them and see what happens
[20:41:49] *** Quits: tobybl_ (~tobybl@213.31.132.151) (Remote host closed the connection)
[20:42:37] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 256 seconds)
[20:42:37] <bjs> montpol: yes. Imagine you just mistyped a variable name. `mass = weihgt / g`  and your excepts will hide this typo and you won't see the bug
[20:42:40] <bjs> (as an example)
[20:42:56] <bjs> or here, if you try unpack the wrong number of things into a variable :)
[20:42:58] *** Joins: pikajude (~jude@2001:19f0:ac01:373:5400:2ff:fe86:3274)
[20:42:59] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[20:43:23] <pikajude> hi, i want to capture the stderr from a subprocess.run but also want the stderr to be output to the terminal while the process is running, how should i do this?
[20:43:47] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 250 seconds)
[20:43:50] *** Joins: tobybl (~tobybl@213.31.132.151)
[20:43:53] <bjs> pikajude: you have to pipe the stderr to somewhere, and then as you read it you can print it back out
[20:44:01] <pikajude> oh
[20:44:18] *** Joins: elias117 (~elias117@user/elias117)
[20:44:18] <bjs> this won't be exactly as if it went straight to the terminal, but there's no way to "split" the stream into two like that
[20:44:23] <pikajude> is there a package that already does this
[20:45:00] <elias117> hi Guys I have a weighted undirected graph with nodes and edges. I want to find the shortest path to visit all nodes in the graph only once
[20:45:10] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Quit: Leaving)
[20:45:16] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:3c37:87d4:4bc2:73ec)
[20:45:30] <elias117> what algo or method can I look up to start finding a solution?
[20:46:05] *** Quits: kdc (~kdc@196.211.197.159) (Remote host closed the connection)
[20:46:13] <pikajude> can i pass my own custom object for the `stderr` kwarg in subprocess.run?
[20:46:14] <bjs> elias117: have you heard of the travelling salesman problem?
[20:46:18] <bjs> pikajude: no
[20:46:33] <pikajude> i assume it's just using pipe2 and writing to a buffer
[20:46:38] <bjs> pikajude: pipes need descriptors, so it has to be a real file (std{out,err}, a file object or a pipe)
[20:46:38] <pikajude> man. ok
[20:46:41] <mefistofeles> elias117: that's a NP hard problem https://en.wikipedia.org/wiki/Hamiltonian_path
[20:46:53] <pikajude> sure, but it's not hard to create a pipe
[20:47:02] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Ping timeout: 260 seconds)
[20:47:03] *** Quits: tobybl (~tobybl@213.31.132.151) (Remote host closed the connection)
[20:47:16] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[20:47:26] <bjs> pikajude: sure, if you have an object that has a real descriptor then you can use that
[20:47:37] <bjs> what I mean is it doesn't accept Python "file-like" objects
[20:47:43] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[20:47:46] <pikajude> no i figured that much
[20:47:50] <pikajude> but subprocess.PIPE is just the int -1
[20:48:01] <pikajude> you're saying the stderr argument will accept a file descriptor?
[20:48:39] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[20:48:45] *** Joins: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-0280.v6.ethz.ch)
[20:48:45] <bjs> pikajude: https://docs.python.org/3/library/subprocess.html#frequently-used-arguments
[20:48:56] <pikajude> i'll be darned
[20:49:04] <pikajude> ok. thanks
[20:49:04] <bjs> pikajude: " Valid values are PIPE, DEVNULL, an existing file descriptor (a positive integer), an existing file object, and None."
[20:49:22] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (Ping timeout: 260 seconds)
[20:49:24] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[20:49:28] <elias117> im unfamiliar with the term np hard
[20:49:43] <bjs> elias117: it means, it's a hard problem to solve and there's no "fast" algorithm that we know of
[20:49:56] <elias117> so brute force eh?
[20:50:56] <jim87> I'm playing with the socket connections. So far I've built a server routine which does the following: http://pastie.org/p/0f2xi0OwclkbTxKLaSBlGI - after processing the first message, it continues spamming 'cycle', so it keeps listening. On the client side, I send a first message and I get a response. Then I send a second message which is though not received by the server (which is not logging the call). This is what the client does:
[20:50:58] <jim87> http://pastie.org/p/0Xc1qvPTFUhL7cJZxOY6wQ (if you need further code parts I can show you no problem)
[20:51:03] *** Joins: Fiji (~Fiji@user/fiji)
[20:51:28] <bjs> elias117: well you can do better, but if you know O-notation then we do not know of a solution that is O(n^k) for any k
[20:51:37] <jim87> maybe this is useful (send_message and read_message): http://pastie.org/p/2ch7ZWAVRJV5FkwRQP4Ke3
[20:51:54] <bjs> elias117: brute-force would be O(n!) but there are some "faster" exponential time things, the wikipedia page for TSP gives a good overview of this kind of problem
[20:52:39] *** Joins: Auron (~Auron956@user/auron)
[20:52:52] <pikajude> ok, so should i use threading or multiprocessing to spawn the subroutine that reads data from the file descriptor and puts it in the buffer
[20:52:56] <bjs> and of course if you give up on being the shortest and settle for "short", then you can do much better
[20:53:02] <bjs> pikajude: or some async thing, yes that's what I'd do
[20:53:11] <elias117> thanks a lot bjs
[20:53:11] <pikajude> "a or b?" "yes"
[20:53:17] <elias117> I just needed a start point
[20:53:23] <bjs> pikajude: yes.
[20:53:28] <elias117> and I like coming here to get that
[20:53:34] <pikajude> ok
[20:53:35] <bjs> pikajude: well, probably not multiprocessing just for this
[20:53:39] <bjs> async and/or threads.
[20:53:39] <pikajude> ok
[20:53:46] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[20:55:28] *** Joins: ano (~ano@user/ano)
[20:55:39] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[20:55:47] *** Joins: inomoz (~inomoz@85.26.235.86)
[20:56:19] *** Joins: xkuru (~xkuru@user/xkuru)
[20:56:21] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 250 seconds)
[20:57:51] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[20:59:04] *** Quits: kindablue (~kindablue@irc.tpurist.com) (Quit: System Rebooting..)
[20:59:15] *** Joins: sudomann (~sudomann@98.219.211.182)
[21:02:11] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 250 seconds)
[21:02:37] *** Quits: twobitsprite (~twobitspr@195.181.171.248) (Ping timeout: 250 seconds)
[21:02:57] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[21:04:05] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 252 seconds)
[21:04:26] *** Joins: twobitsprite (~twobitspr@195.181.171.237)
[21:05:10] <VaniaPy> i'm trying to display my db data to a html template but nothing seems to appear,am i doing something wrong? https://dpaste.org/zBjf
[21:05:34] <VaniaPy> the template as well https://dpaste.org/aV0R
[21:05:43] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[21:06:38] *** Joins: Julian (~tos9@python/site-packages/Julian)
[21:09:07] *** Quits: drwasabi (drwasabi@tilde.team) (Quit: WeeChat 3.2)
[21:10:58] <aniketgm> VaniaPy: is the db created ?
[21:11:19] <VaniaPy> aniketgm yes
[21:12:29] *** Joins: theprophet (~theprophe@85.114.228.184)
[21:13:22] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[21:13:54] *** Joins: kindablue (~kindablue@irc.tpurist.com)
[21:13:58] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[21:14:06] *** Joins: nosoul (nosoul@gateway/vpn/protonvpn/nosoul)
[21:15:18] <aniketgm> wait I don't see migrations ?
[21:15:30] <aniketgm> have you migrated the data ?
[21:15:57] <VaniaPy> hmm this is flask,do i need to?
[21:16:00] <aniketgm> https://flask-migrate.readthedocs.io/en/latest/
[21:16:05] <aniketgm> yes.
[21:16:54] *** Joins: djapo (~archangel@user/djapo)
[21:17:21] *** Quits: guenhael (~Thunderbi@193.52.208.98) (Ping timeout: 250 seconds)
[21:17:28] <VaniaPy> ok
[21:17:44] *** Quits: d3x_ (michal@bielaw.ski) (Quit: Reconnecting)
[21:17:52] *** Joins: d3x (michal@bielaw.ski)
[21:17:55] *** Joins: zeden (~zeden@user/zeden)
[21:18:07] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[21:18:37] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[21:18:56] *** Joins: faLUKE (~paolo@host-79-37-180-53.retail.telecomitalia.it)
[21:19:00] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[21:19:11] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[21:19:32] <faLUKE> hey: I how can I check which package installed with pip have installed lxml ?
[21:19:40] <faLUKE> (thanks)
[21:20:23] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 250 seconds)
[21:20:26] *** Joins: amanjhalmat12 (~amanjhalm@212.237.123.164)
[21:20:43] <Julian> faLUKE: Generally you cannot
[21:20:45] <SnoopJ> faLUKE, there isn't a feature like that in pip, but if you still have the logs from the installation that brought in lxml, it should be in that output.
[21:20:47] <Julian> pip does not maintain that information
[21:20:47] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[21:20:57] <Julian> (and indeed pip isn't even the only thing that could have installed it)
[21:21:30] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[21:21:41] *** Quits: grooverman (~grooverma@177.102.117.95) (Read error: Connection reset by peer)
[21:22:08] <faLUKE> SnoopJ: do you mean that it is in the log of pip install package_that_installed_lxml?
[21:22:24] <aniketgm> you can use importlib to check is a package exists in system/installed
[21:22:28] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Read error: Connection reset by peer)
[21:22:28] <SnoopJ> faLUKE, yes, the logs for whatever operation resulted in its installation
[21:22:36] <SnoopJ> aniketgm, that wasn't their question, though
[21:22:45] *** Joins: grooverman (~grooverma@177.102.117.95)
[21:22:58] <aniketgm> oh! I'm gonna be quiet now.
[21:23:23] <faLUKE> ok thanks!
[21:23:25] <SnoopJ> faLUKE, checking which packages depend on it with a grep would look something like: `grep -iIr "requires-dist.*lxml" /path/to/site-packages`
[21:23:27] <faLUKE> (found)
[21:23:34] <SnoopJ> the logs are a better solution though :)
[21:23:38] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[21:25:14] *** Joins: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[21:25:55] *** Joins: naan (~Naan@user/naan)
[21:26:17] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Quit: beastDivision)
[21:26:22] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[21:27:16] <Wooble> pipdeptree, although technically it won't tell you definitively which one wanted lxml first.
[21:27:39] <lericson> can you run a program and make it so it can't allocate more than say 24GiB
[21:27:42] <lericson> of memory
[21:27:56] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[21:28:15] <lericson> server is now completely unresponsive because of a rogue program allocating all its memory
[21:28:15] <grym> lericson: cgroups
[21:28:24] <grym> (this is an OS thing, most easily)
[21:28:30] <lericson> ssh _times out_ lol
[21:28:43] <lericson> oh i thought i was in #linux
[21:28:47] *** Quits: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca) (Remote host closed the connection)
[21:28:56] <lericson> otoh it /is/ a python program so
[21:29:01] <SnoopJ> If you're on POSIX, you can use resource.setrlimit() to set e.g. RLIMIT_RSS
[21:29:25] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 240 seconds)
[21:29:45] <SnoopJ> which should usually give you a MemoryError when some alloc fails because of that limit
[21:29:55] *** Quits: aniketgm (~Aniket@49.36.107.79) (Write error: Connection reset by peer)
[21:30:00] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:01] <SnoopJ> I dunno what cgroups does but it probably ends up the same way
[21:30:08] *** Joins: aniketgm (~Aniket@49.36.107.79)
[21:30:49] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[21:30:59] <VaniaPy> aniketgm Error: Could not locate a Flask application. You did not provide the "FLASK_APP" environment variable, and a "wsgi.py" or "app.py" module was not found in the current directory.
[21:31:08] <VaniaPy> when i'm trying to migrate the db
[21:31:47] *** naan is now known as Naan
[21:31:53] <SnoopJ> oh I guess cgroups will invoke the oom-killer sometimes if you hit the limit? I dunno, I've never really used it.
[21:31:55] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:32:13] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:32:38] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[21:32:52] *** Joins: nomic (~nomic@51.52.78.152)
[21:33:34] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[21:33:38] <aniketgm> set FLASK_APP=app.py Or whatever is your app name.
[21:33:42] <aniketgm> VaniaPy: ^^
[21:34:12] *** Joins: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[21:34:27] *** Joins: grandrew (~grandrew@2600:1700:42f3:9180:f22f:74ff:feac:90a3)
[21:34:56] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 268 seconds)
[21:35:16] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (Quit: Leaving)
[21:35:19] *** Quits: elias117 (~elias117@user/elias117) (Ping timeout: 256 seconds)
[21:35:39] *** Joins: Auron (Auron956@user/auron)
[21:35:46] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 265 seconds)
[21:35:57] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[21:36:31] *** Joins: badsektor (~badsektor@user/badsektor)
[21:36:58] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 260 seconds)
[21:37:16] *** dcaro is now known as dcaro_away
[21:37:17] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 250 seconds)
[21:37:26] *** Joins: djapo (~archangel@user/djapo)
[21:37:31] <badsektor> python is for pussies - rewal men use C
[21:37:51] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[21:38:41] <VaniaPy> aniketgm still the same error
[21:39:08] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[21:39:46] *** Quits: shad (~shad@user/shad) (Ping timeout: 260 seconds)
[21:40:26] *** Joins: d_rwin (~yashpal@106.211.153.223)
[21:40:52] *** Quits: rany_ (~rany@user/rany) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:41:11] *** Quits: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net) (Quit: Leaving)
[21:41:19] <d_rwin> how to import a filename with . or special character in python3?
[21:41:42] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[21:41:50] *** Quits: thurs8060142105 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[21:42:32] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[21:42:38] <d_rwin> works fine when I copy the file to a siimple case filename
[21:42:51] <Wooble> d_rwin: ideally, give up. alternatively, something truly awful with importlib
[21:42:59] *** Joins: nomic2 (~nomic@85.203.46.65)
[21:43:01] *** Quits: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-0280.v6.ethz.ch) (Ping timeout: 265 seconds)
[21:43:01] *** Joins: ErkiS (~opera@62.65.198.13.cable.starman.ee)
[21:43:02] <theprophet> bjs finally i did it.
[21:43:36] <SnoopJ> n.b. that if "special characters" means Unicode, you don't need to do anything special. For a filename with a dot, I'm not sure. Probably importlib and yes, probably awful.
[21:43:57] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[21:45:30] <ErkiS> for unittest, are startTestRun()/stopTestRun() the customary way of doing setUp() only once for all tests, where setUpClass() is not suitable?
[21:45:31] *** Quits: nomic (~nomic@51.52.78.152) (Ping timeout: 256 seconds)
[21:45:31] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[21:45:35] *** nomic2 is now known as nomic
[21:46:02] *** Quits: jpodivin (~jpodivin@cgnat44-pool3-71-92.poda.cz) (Ping timeout: 268 seconds)
[21:46:25] *** Quits: dskull (~dskull@user/dskull) (Quit: quit)
[21:46:28] *** Joins: dskullz (~dskull@user/dskull)
[21:46:29] <d_rwin> SnoopJ: Wooble: I am trying to parse webscrapping with a worktable, Can you suggest a solution for importing the file/lists manipulation?
[21:46:53] *** Joins: the_lanetly_052_ (~the_lanet@194.135.167.29)
[21:47:03] <SnoopJ> d_rwin, I have no idea what that means
[21:47:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:47:33] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[21:48:00] *** Quits: slav0nic (slav0nic@python.su) (Remote host closed the connection)
[21:48:01] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[21:48:02] *** dskullz is now known as dskull
[21:48:09] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[21:48:46] <d_rwin> SnoopJ: I am importing headers and lists from Base_file and usual bs4 parsing with same url?
[21:48:59] *** Joins: fikran (~fikran@user/fikran)
[21:49:01] *** Quits: the_lanetly_052 (~the_lanet@185.30.88.200) (Ping timeout: 240 seconds)
[21:50:10] <d_rwin> SnoopJ: just need a easier work setup to finalise my parse syntax before I edit my Scraping Configuration?
[21:50:59] <SnoopJ> d_rwin, sorry, I know what all of these words mean, but I don't see how they fit together with your question about importing a file with a dot in the filename.
[21:51:02] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:51:17] *** Quits: rubemlrm (~rubemlrm@user/rubemlrm) (Quit: The Lounge - https://thelounge.chat)
[21:51:36] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[21:51:57] *** Joins: rubemlrm (~rubemlrm@user/rubemlrm)
[21:52:14] <Wooble> if you accept that module names should be valid python identifiers instead of whatever felt like a good idea while making the files, your life will be a lot easier.
[21:52:56] *** Quits: Vision (~Vision@023-084-134-149.res.spectrum.com) (Remote host closed the connection)
[21:54:15] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:54:32] <aniketgm> what is the file name of this code snippet ? https://dpaste.org/zBjf
[21:54:48] <d_rwin> Wooble: SnoopJ: yes, yes.. dot is a terrible naming convention, but good for backup though!
[21:55:36] *** Joins: shad (~shad@user/shad)
[21:56:06] <bjs> aniketgm: what?
[21:56:25] <bjs> oh was that directed to VaniaPy ?
[21:56:30] <bjs> theprophet: congrats
[21:56:47] <theprophet> bjs thanks
[21:56:59] *** Quits: amanjhalmat12 (~amanjhalm@212.237.123.164) (Quit: Client closed)
[21:57:03] <VaniaPy> aniketgm yeah,that was the issue,it should be named app.py
[21:57:30] <VaniaPy> but still after the migrations can't see any results :P
[21:58:04] *** Joins: superboot (~agentgasm@user/superboot)
[21:58:09] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[21:58:42] <SnoopJ> d_rwin, Wooble here's how you can load a module defined in a dotted filename using importlib's SourceFileLoader (I don't know if there's a better way, there possibly is): https://bpa.st/JRBA
[21:58:45] *** Joins: lastshell (~lastshell@user/lastshell)
[21:58:54] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[21:59:20] *** Quits: Sario (uid356235@fosshost/cdo/Sario) (Quit: Connection closed for inactivity)
[21:59:24] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[21:59:54] *** Joins: Auron (Auron956@user/auron)
[22:00:15] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[22:00:20] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Client Quit)
[22:00:28] <SnoopJ> ah, there probably is, load_module() was deprecated in 3.6
[22:00:57] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[22:01:21] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[22:01:30] *** Joins: arinov (~arinov@176.89.29.127)
[22:02:51] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48b8r2los0o73ag.ipv6.telus.net) (Ping timeout: 250 seconds)
[22:02:53] <ErkiS> what is the idiomatic way of calling setUp/tearDown only once per unittest.TestCase?
[22:03:05] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Quit: Client closed)
[22:03:42] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[22:03:44] *** Joins: jfcaron (~jfcaron@192.252.229.166)
[22:03:44] <grym> @pytest.fixture(scope="session") :P
[22:05:14] <ErkiS> grym: what does the "session" stand for, exactly?
[22:05:15] <aniketgm> VaniaPy: I can't think of anything else right now. I recommend practicing with the Flask tutorial in the official Flask website.
[22:05:21] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[22:05:21] *** Quits: llanhmod (~personnel@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[22:05:22] *** Joins: delvian (~delvian@41.13.198.95)
[22:05:50] <aniketgm> It's a very very to follow and get some basic things going on.
[22:06:08] <aniketgm> *very easy to follow
[22:06:24] <ErkiS> grym: and does the decorator work for instance methods?
[22:06:37] *** CrunchyChewie_ is now known as CrunchyChewie
[22:06:47] <grym> ErkiS: i'm being somewhat glib, i apologize. i don't know how to do this in unittest, but pytest makes it easy
[22:07:34] <SnoopJ> hmm, `PathFinder.find_spec("..py")` gets most of the way there, but create_module() on the resulting loader returns None :(
[22:07:51] <ErkiS> grym: aha. I am already using pytest actually, as an underlying framework requires it, but I'd still prefer encapsulating test code in a standard unittest.TestCase
[22:07:57] *** Joins: constxd (~brad@192.75.101.164)
[22:08:01] <constxd> kings
[22:08:16] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[22:08:29] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:08:56] *** Joins: pepper (~pepper@user/pepper)
[22:09:02] <constxd> if you could change anything about python's implementation/syntax for optional/named function parameters or varargs what would it be
[22:09:18] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[22:09:39] *** Joins: parv (~quass@user/parv)
[22:09:48] <constxd> i mean constructs like def f(a, b=12), def g(a, b, *args, **kwargs), etc.
[22:09:50] *** Joins: sudomann (~sudomann@98.219.211.182)
[22:10:07] *** Joins: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net)
[22:11:09] <SnoopJ> deferred evaluation of defaults a la Mathematica
[22:11:59] <constxd> you mean so the default may depend upon the values of other parameters?
[22:12:12] <grym> so that f(x=[]) isn't a footgun
[22:12:23] <constxd> ah
[22:12:26] <constxd> right
[22:12:32] *** Quits: the_lanetly_052_ (~the_lanet@194.135.167.29) (Ping timeout: 240 seconds)
[22:12:54] <SnoopJ> If I was forced to change *something*, that is. I probably wouldn't even change that.
[22:14:11] <aniketgm> VaniaPy: that;s how I started with Flask.
[22:15:01] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[22:15:53] *** Joins: Warped (~Warped@user/warped)
[22:16:07] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Quit: Client closed)
[22:16:44] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[22:17:28] *** Quits: dablitz (~Username@dyn-pppoe-142-51-212-119.vianet.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[22:17:56] *** Joins: Sario (uid356235@fosshost/cdo/Sario)
[22:19:21] *** Quits: VaniaPy (~VaniaPy@46.12.178.58.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[22:20:19] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[22:20:26] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[22:21:49] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[22:22:11] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[22:23:07] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[22:23:24] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[22:23:25] *** Joins: Guest4 (~Guest4@71.169.151.98)
[22:23:49] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[22:24:19] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:24:31] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Client Quit)
[22:25:37] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:26:19] <jim87> Hello! I made a package -> https://github.com/elegos/wgstarman and I wanted to publish. I've noticed though that when I `pip install .` it, it will create two different packages in site-packages (cli, wgcli). I think I did something wrong in setup.cfg. May you please help me, also reviewing the setup to duoble-check everything in the setup chain is ok? Thanks :)
[22:26:38] *** Joins: amanjhalmat12 (~amanjhalm@212.237.123.164)
[22:26:45] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl489soz78gt5qcke.ipv6.telus.net)
[22:26:59] <d_rwin> how do we parse previous soup. sibling table td and tr in bs4?
[22:27:32] *** Joins: matsaman (~matsaman@user/matsaman)
[22:27:49] <grym> jim87: lines 20 and 21 of setup.cfg look weird
[22:28:32] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Ping timeout: 240 seconds)
[22:28:42] <jim87> grym: this is what I found reading https://packaging.python.org/en/latest/tutorials/packaging-projects/
[22:28:51] <jim87> how'd you write it?
[22:29:25] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[22:29:40] <grym> that = \n = thing is wild
[22:30:09] <grym> i guess it's legit but i've never seen that beefore
[22:30:22] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[22:30:23] <jim87> :D strange enough is on the official docs :D
[22:31:08] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:31:10] <aniketgm> grym: seems to me a bug in the docs. https://packaging.python.org/en/latest/tutorials/packaging-projects/
[22:32:09] *** Quits: wlemuel (~user@210.22.124.110) (Read error: Connection reset by peer)
[22:32:35] <aniketgm> jim87: try setup.py instead of setup.cfg, the example in the docs.
[22:32:48] <aniketgm> wait you already have a setup.py.
[22:32:59] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[22:33:11] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl489soz78gt5qcke.ipv6.telus.net) (Ping timeout: 252 seconds)
[22:33:59] *** Joins: BlueSky (~BlueSky@user/bluesky)
[22:34:03] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:a38a:f44a:285:6416) (Ping timeout: 250 seconds)
[22:35:16] *** Joins: Roey (~Roey@user/Roey)
[22:38:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:38:47] *** Quits: kmh (~kmh@2a00:6020:5004:6800:6500:bc30:b0fd:c100) (Quit: Leaving)
[22:39:20] *** Quits: magga (magga@ti0036a400-1042.bb.online.no) (Remote host closed the connection)
[22:39:21] *** Joins: slav0nic (slav0nic@python.su)
[22:39:29] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Quit: Client closed)
[22:39:41] *** Quits: d_rwin (~yashpal@106.211.153.223) (Remote host closed the connection)
[22:40:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:40:02] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 240 seconds)
[22:40:09] *** Joins: jeho2 (~jehoshaph@user/jehoshaphat)
[22:41:00] *** Parts: ErkiS (~opera@62.65.198.13.cable.starman.ee) ()
[22:42:18] <jim87> I think I resolved. I misunderstood how a single project could carry multiple packages. I've moved the sources under src/wgstarman and now it correctly installs the module :)
[22:42:25] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[22:42:58] *** Joins: sudorm (~sudorm@abordeaux-654-1-97-61.w92-162.abo.wanadoo.fr)
[22:43:07] *** Quits: Guest4 (~Guest4@71.169.151.98) (Quit: Client closed)
[22:43:42] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 260 seconds)
[22:44:23] *** Joins: Betal (~Betal@user/betal)
[22:45:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:45:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:47:06] *** Joins: Fiji (~Fiji@user/fiji)
[22:50:42] *** Joins: dangpzanco (~dangpzanc@2804:14d:baa1:a12d:7c5a:931c:6657:1fc0)
[22:51:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:51:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:52:26] <dangpzanco> hi, does anyone has been getting some bugs related to some interaction between the plot backend of matplotlib 3.5 and vscode?
[22:53:04] *** Joins: djapo (~archangel@user/djapo)
[22:53:06] *** Quits: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net) (Quit: Textual IRC Client: www.textualapp.com)
[22:53:25] *** Joins: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net)
[22:54:45] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[22:54:49] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 252 seconds)
[22:56:16] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[22:56:47] *** jeho2 is now known as jeho
[22:56:57] *** Joins: djhankb (~djhankb@208.113.164.68)
[22:58:36] *** Joins: pystardust (~pystardus@172-105-41-139.ip.linodeusercontent.com)
[22:58:36] *** Joins: georgios (~georgios@user/georgios)
[22:59:59] *** Quits: amanjhalmat12 (~amanjhalm@212.237.123.164) (Quit: Client closed)
[23:00:17] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[23:03:37] *** Joins: sazawal (~sazawal@122.161.88.88)
[23:03:54] <SnoopJ> dangpzanco, there are multiple matplotlib backends, so it's not clear which one you mean, but let's assume the answer to your question is "yes" and go from there. What kind of bugs are you seeing?
[23:05:25] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 256 seconds)
[23:05:34] <dangpzanco> my backend is QtAgg. basically I can open a figure [plt.figure()], but when I try to draw [plt.plot(something)] the window hangs up
[23:05:44] <dangpzanco> I'm on Windows 11, btw
[23:05:46] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl489gxz3zfaba8hf.ipv6.telus.net)
[23:06:15] <dangpzanco> this only happens when I run the code from inside VSCode
[23:06:16] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[23:06:52] <dangpzanco> it runs fine from python run_plot.py or ipython
[23:06:53] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[23:06:55] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[23:06:57] *** Joins: jethro_ (~jethro_@cpc147188-rdng25-2-0-cust423.15-3.cable.virginm.net)
[23:07:25] *** Quits: sudorm (~sudorm@abordeaux-654-1-97-61.w92-162.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[23:07:31] *** Joins: darksun (~darksun@user/darksun)
[23:07:46] *** Quits: benjwadams (~benjwadam@96.238.4.28) (Quit: Client closed)
[23:08:08] *** Joins: Forsaken87 (~quassel@2a02:908:1867:7d40:93ab:b917:6d2c:4af1)
[23:08:53] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[23:10:15] *** Quits: wovixo (~wovixo@128.104.205.49) (Ping timeout: 250 seconds)
[23:10:21] <dangpzanco> oh, and I'm using a conda environment
[23:10:35] *** Quits: jim87 (~gfurlan@2001:b07:5d37:f91e:c08b:dbe4:b466:4b28) (Ping timeout: 252 seconds)
[23:11:15] *** Joins: neachdainn (~nate@user/neachdainn)
[23:11:33] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[23:11:58] *** Quits: darksun (~darksun@user/darksun) (Client Quit)
[23:12:22] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 268 seconds)
[23:12:50] *** Joins: mokulus (~mokulus@user/mokulus)
[23:13:18] <neachdainn> Is there a document that explains the behavior of the interpreter when various values are passed into `PyErr_SetInterruptEx`?
[23:14:13] *** Joins: darksun (~darksun@user/darksun)
[23:14:29] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[23:14:29] <mokulus> in numpy how to copy array of size (16, 8, 3) into array of size (214, 246, 3)? It's a 2d array of colors, I want copy them at x, y; canvas[x:, y:, :] = img raises "could not broadcast"
[23:14:54] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[23:15:12] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl489gxz3zfaba8hf.ipv6.telus.net) (Remote host closed the connection)
[23:15:20] *** Quits: aniketgm (~Aniket@49.36.107.79) (Read error: No route to host)
[23:15:22] *** Joins: ExpiredKebab (~sgreadly@2407:7000:a239:503:c530:420:50bf:adf3)
[23:15:32] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[23:16:10] *** Joins: ano (~ano@user/ano)
[23:16:29] *** Joins: aniketgm (~Aniket@49.36.107.79)
[23:16:35] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[23:16:45] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 256 seconds)
[23:17:06] *** Quits: Nei (~ailin@user/nemui) (Changing host)
[23:17:06] *** Joins: Nei (~ailin@openSUSE/member/ailin-nemui)
[23:17:10] <dangpzanco> mokulus like this? https://bpa.st/E7AA
[23:17:11] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[23:17:16] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[23:17:43] <dangpzanco> oops, typo https://bpa.st/KHVA
[23:18:00] *** Joins: alzgh (alzgh@user/alzgh)
[23:18:48] *** Parts: dohtem (uid524096@user/dohtem) ()
[23:19:03] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[23:19:14] <SnoopJ> mokulus, what do you mean copy? 214*246 isn't divisible by 16*8
[23:19:15] *** Quits: aniketgm (~Aniket@49.36.107.79) (Read error: Connection reset by peer)
[23:19:27] *** Quits: jethro_ (~jethro_@cpc147188-rdng25-2-0-cust423.15-3.cable.virginm.net) (Quit: Leaving)
[23:19:53] *** Joins: jmd (~user@de.cellform.com)
[23:20:21] *** Quits: parv (~quass@user/parv) (Quit: parv)
[23:20:31] *** Joins: monkey_ (~user@181.114.17.106)
[23:20:54] *** Quits: dvx (~dvx@5.181.92.64) (Quit: dvx)
[23:20:59] <mokulus> dangpzanco: after fixing typos this works, i though it would get the end ranges on it's own
[23:21:34] *** Joins: sudorm (~sudorm@abordeaux-654-1-97-61.w92-162.abo.wanadoo.fr)
[23:21:34] <mokulus> i mean copy like blit, or like dangpzanco showed
[23:21:40] <dangpzanco> mokulus no no, when you don't specify the endings
[23:21:42] <SnoopJ> dangpzanco, not sure why QtAgg would hang with VSCode, but there are some issues on their GitHub that look somewhat similar.
[23:21:49] *** Joins: sudomann (~sudomann@98.219.211.182)
[23:21:49] <dangpzanco> it defaults to the end of the vector
[23:22:13] *** Joins: aniketgm (~Aniket@49.36.107.79)
[23:22:33] <SnoopJ> note: the paste isn't valid syntax because `in` is a keyword.
[23:23:24] <mokulus> dangpzanco: how would i change (16, 8) array into (16, 8, 3) so that it's 2d array of 3d vectors with all same values?
[23:23:38] <mokulus> i use np.dstack([img_np] * 3) is this ok?
[23:23:38] <SnoopJ> mokulus, you might want to look at numpy.tile() or numpy.repeat() depending on exactly what definition of "copy" you are working with here
[23:24:30] <dangpzanco> mokulus I think it should work, but it's no as efficient as SnoopJ's suggestion
[23:25:01] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[23:25:10] <SnoopJ> I wouldn't know which is more efficient without measuring it, but I don't know if what they want can be done with slice assignment since the destination shape isn't something you can broadcast to from the input
[23:25:37] <dangpzanco> SnoopJ I think I'll try switching the backend from PyQt to PySide... if this does not work then I'm downgrading back to 3.4.x
[23:26:59] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) ()
[23:27:23] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[23:27:34] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Remote host closed the connection)
[23:28:59] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[23:29:26] *** Joins: junebug (~junebug@2600:1700:3db0:2540:1742:fab7:61dd:4a6)
[23:29:32] *** Parts: aniketgm (~Aniket@49.36.107.79) ()
[23:30:44] *** Joins: mmercer (daemoen@2605:d100:0:2d:5054:ff:fef0:3953)
[23:30:45] <dangpzanco> SnoopJ thanks for the help
[23:31:47] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[23:32:11] <dangpzanco> I installed PySide2 via conda-forge and it also upgraded PyQt5, so I think the problem was related to conda as well, since matplotlib didn't even try to use pyside (as per https://matplotlib.org/stable/users/explain/backends.html#qt-api-usage)
[23:35:44] <drew> I have a list that looks like [[AB C], [DE F], ...] and I am trying to unpack each elements two parts with [for pair in mylist for a, b in pair.split(' ')], but the for a, b in pair.split(' ') actually iterates through the characters of each element in [AB C] (for example) and doesn't set a = AB and b = C like I want
[23:36:05] <mokulus> dangpzanco SnoopJ np.expand_dims(img, axis=2) turned (16, 8) into (16, 8, 1) and then it broadcasted to (16, 8, 3). thanks for information
[23:36:10] <drew> I tried doing for a, b in *pair.split(' ') but I got an error that I couldn't use a starred expression
[23:36:34] <drew> is there a way I can unpack this while still using list comprehension?
[23:37:58] <Wooble> drew: do you mean [["AB C"], ["DE F"]] ?
[23:38:07] <drew> Wooble: yes, sorry
[23:38:23] <dangpzanco> mokulus it's easier to just expand the dimensions with x[:, :, None], which creates a new unitary dimension
[23:38:26] <SnoopJ> mokulus, normally I'd just do `img[..., np.newaxis]` to get to (16, 8, 1) and stop there if the 16x8 are not varying per channel. If you want to do it all in one step: `np.repeat(img[..., np.newaxis], 3, axis=-1)
[23:38:38] <SnoopJ> (np.newaxis is an alias for None that is substantially more legible)
[23:38:49] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[23:39:04] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[23:39:07] <dangpzanco> yeah, basically what SnoopJ said
[23:39:29] <SnoopJ> yep, same answer more or less :)
[23:39:38] <Wooble> drew: your thing that you tried is also just a syntax error, but if you have a list of 1-length lists of strings, you'll need to reach into the inner lists to get something you can split.
[23:40:16] <SnoopJ> `...` is a numpy idiom for "I don't care how many axes are here" which is useful when you're augmenting with a new axis, but if the number of axes is known ahead of time it's just preference
[23:40:33] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[23:40:51] <pikajude> why is it not possible to subscript a map object?
[23:41:01] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[23:41:08] <SnoopJ> pikajude, because the underlying iterable may not be subscriptable
[23:41:33] <drew> I'm sorry again, my input data is actually just a list of strings: ['AB C', 'DE F', ...] I'm not sure what is going on with my typing
[23:41:33] <SnoopJ> well, and because map() is lazy
[23:41:33] <pikajude> does the concept of iterable not mandate that it *is* subscriptable?
[23:41:43] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:3c37:87d4:4bc2:73ec) (Quit: Client closed)
[23:41:44] <Wooble> pikajude: that would be a sequence.
[23:41:46] <pikajude> Iterator in rust has the nth() method
[23:41:46] <SnoopJ> pikajude, it does not. Sequences are subscriptable, but not all iterables are sequences.
[23:41:51] <mokulus> Finally i'ts:  arr[x : x + img_np.shape[0], y : y + img_np.shape[1], :] = img_np[..., np.newaxis]
[23:41:53] *** Joins: sudomann (~sudomann@98.219.211.182)
[23:42:00] <mokulus> anything to improve it?
[23:42:03] <SnoopJ> (referring to the glossary here may be helpful)
[23:42:59] <mokulus> pikajude: i guess in rust it has to walk through the whole iter for get to nth element. subscript iter[n] usually means constand access time, so it's not used un python for that
[23:43:02] <SnoopJ> pikajude, itertools.islice() can be useful when you know indices you're interested in, though.
[23:43:31] <SnoopJ> (but it consumes the iterable)
[23:43:33] <Wooble> drew: maybe you want something like [pair[0].split() for pair in mylist] although it's unclear the final output you're looking for.
[23:43:34] <pikajude> yeah, what i'm confused about is the lack of a method like nth()
[23:43:44] <drew> so for pair in mylist will iterate through 'AB C', 'DE F', ... and I want to do something like for a, b in pair.split(' ') to get a = 'AB', b = 'C' and end with a list of [('AB', 'C'), ...]
[23:43:55] *** Joins: ttys000 (~ttys000@user/ttys000)
[23:44:02] <drew> let me try to recollect myself Wooble lol
[23:44:10] *** Quits: Spaceflight (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:44:14] <pikajude> maybe itertools has it
[23:44:16] <drew> maybe I'll just paste what I'm looking at, which is a bit different
[23:44:38] <pikajude> looks like islice returns another iterable
[23:44:43] *** Joins: amanjhalmat12 (~amanjhalm@212.237.123.164)
[23:44:52] <SnoopJ> it does, because it's for slicing in general (you might want every other element in an iterable, say)
[23:45:35] <SnoopJ> perhaps this does what you want? `def nth(it, n): return next(islice(it, n, n+1))` ?
[23:45:41] <mokulus> drew: [tuple(str.split()) for str in mylist]
[23:45:43] <pikajude> wow
[23:46:00] *** Joins: maromau (~mauro@151.62.46.246)
[23:46:01] <Wooble> pikajude: (you can also get that recipe in more_itertools)
[23:46:06] <pikajude> i see
[23:46:09] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[23:46:18] <pikajude> can we rewind for a second? what did you mean by "not all iterables are sequences"?
[23:46:43] <Wooble> a set, for example, is unordered.
[23:46:52] <pikajude> the glossary says that an iterator has a __next__() method, which means that it produces items one at a time
[23:47:19] <pikajude> so i can't see how it is possibly the case that given a sequence of items from an iterator, you can't assign a number to each one
[23:47:22] <SnoopJ> pikajude, an iterable is any thing that can be iterated, an iterator does the iterating. A general iterable may not even have a start or end.
[23:47:38] <pikajude> can you explain what you mean by not having a start?
[23:47:46] <pikajude> what would happen if you called __next__ on such an object?
[23:47:46] *** Joins: phinxy (~phinxy@78-71-229-90-no500.tbcn.telia.com)
[23:47:46] <Wooble> pikajude: you can certainly fetch them one at a time and number them. :)
[23:47:50] <SnoopJ> hmm, I guess they do all have a meaningful start.
[23:48:03] <phinxy> Is it a temporary thing that waf.io is down?
[23:48:12] *** Quits: Saxtheowl (~roro@78.192.226.182) (Quit: leaving)
[23:48:14] <phinxy> A buildscript depends on https://waf.io/waf-2.0.22.tar.bz2
[23:48:19] <SnoopJ> pikajude, I was thinking of cyclic structures, but an iterable over one would still have a meaningful start point.
[23:48:22] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[23:48:25] <pikajude> right
[23:48:33] <Wooble> pikajude: for the finite ones that will fit in your RAM, you can even just list(it) and then index as much as you want
[23:48:35] <SnoopJ> pikajude, anyway, a sequence is a subtype of iterable that has this notion of mapping to the natural numbers, which is what makes them indexable.
[23:48:48] <bjs> pikajude: the issue is more that Python sequences have *arbtirary* index accessing
[23:48:58] *** Joins: Saxtheowl (~roro@78.192.226.182)
[23:49:03] <pikajude> but an iterator is logically the same as a list
[23:49:08] <bjs> pikajude: for an arbitrary iterable all you can do is get the "next" item, you can't go "give me the 7th item", "now give me the 1st item"
[23:49:13] <pikajude> is it to prevent confusion for people who don't understand what iterators are?
[23:49:17] <bjs> pikajude: not really, a list is a kind if iterable
[23:49:19] <bjs> pikajude: no.
[23:49:19] <SnoopJ> iterators are a third concept entirely
[23:49:29] <SnoopJ> an iterable can be walked; an iterator does the walking
[23:49:40] <bjs> pikajude: Python's core iteration concept is an "iterable". Iterables are things you can use `for` loops with.  If you can go `for x in y:` then "y" was an iterable.
[23:49:59] <bjs> pikajude: iterators are a related concept, those are the things you can ask for the "next" item from.
[23:50:04] <SnoopJ> or iter(iterable) (which produces an _iterator_)
[23:50:08] *** Quits: philectro (~quassel@2a02:2788:1024:671:8196:36b8:e616:1348) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:50:11] <pikajude> how is it not possible to "give me the 7th item" from an iterable? what if you call __next__ 7 times?
[23:50:22] <pikajude> wouldn't that then produce the 7th item?
[23:50:23] <SnoopJ> it's *possible*, but you can't go directly there
[23:50:28] <Wooble> pikajude: that's essentially what that itertools recipe does.
[23:50:29] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[23:50:32] <SnoopJ> you can't even guarantee that element exists ahead of time
[23:50:39] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-4546-0d46-660e-545c.res6.spectrum.com) (Read error: Connection reset by peer)
[23:50:47] <SnoopJ> (because you have to call next a bunch of times)
[23:50:51] <bjs> pikajude: in Python, a sequence is an iterable that has arbitrary indexing. So you can go x[i] for any index i and get the i'th thing, then `x` is a sequence.
[23:51:17] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[23:51:19] <odinsbane> ... or a dictionary
[23:51:37] <pikajude> but you could also do it with a dictionary, the ordering just wouldn't be useful in any way
[23:51:42] <bjs> pikajude: Just because the object lets you get the "next" does not mean you can go x[6] to get the 7th thing.  There are many objects where it makes sense to have both,  but there are also objects where once you've got the "Next" thing it doesn't really make sense to go backwards
[23:51:50] <Wooble> odinsbane: {1: 'foo', 0: 'bar}[0] won't give you the 0th item :)
[23:51:54] <bjs> dictionaries aren't sequences, because you're not getting the "i'th thing" like I described.
[23:52:04] <SnoopJ> (the analogous concept is Mapping)
[23:52:11] <drew> ok, this is what I am actually working with: https://bpa.st/HDOA
[23:52:24] <pikajude> > Just because the object lets you get the "next" does not mean you can go x[6] to get the 7th thing.
[23:52:30] <pikajude> ok, no, i still don't understand this
[23:52:43] <pikajude> take an iterator and call __next__ 6 times on it
[23:52:48] <odinsbane> isn't x[i] just a class with a __get__ or some such?
[23:52:49] <pikajude> now, if you call __next__ again, what item does it return?
[23:52:52] <bjs> pikajude: yes, but that doesn't magically make the Python x[i] syntax work
[23:53:03] <SnoopJ> pikajude, it might not return at all, it could be StopIteration
[23:53:09] <BrenBarn> pikajude: whatever it decides
[23:53:13] <SnoopJ> again, referring to the glossary might clear up confusion here: https://docs.python.org/3/glossary.html#term-sequence
[23:53:30] <bjs> pikajude: there are objects for which it makes sense for x[i] to work (and therefore for it to be a Sequence) and there are objects for which next() makes sense (and for it to be an iterator), some objects might even be both.  But there are objects where it makes less sense
[23:53:33] <pikajude> right, but my question isn't, "why can't i use subscript syntax for this", it's "why isn't there a method for this"
[23:53:40] <SnoopJ> probably a more helpful distinction between a Sequence and a general iterable: Sequences always define __len__()
[23:53:41] <bjs> pikajude: there is, it's called itertools.islice
[23:53:53] <BrenBarn> a method for what? calling next() 6 times?
[23:53:54] <drew> but I can see that k, v in pair.strip().split(' -> ') is actually looping through the two elements of pair.strip().split(' -> ') and k = 'O', v = 'N', k = 'S', and then v can't be set, which causes the Exception, whereas I want k = 'ON' and v = 'S'
[23:54:02] <SnoopJ> that's basically what islice does, yep
[23:54:07] <pikajude> or five times, or possibly even seven
[23:54:09] <Wooble> pikajude: why itertools put "nth()" in the docs instead of the module may be a better question :)
[23:54:15] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[23:54:22] <pikajude> i don't think itertools has nth()
[23:54:23] <mokulus> calling nth on iterator is a code smell
[23:54:24] <pikajude> unless i misread it
[23:54:31] <bjs> pikajude: it doesn't, but it has islice.
[23:54:31] <SnoopJ> mokulus, no it isn't
[23:54:32] <Wooble> pikajude: it's in the recipes section.
[23:54:48] <ammar2> indexing into arrays is a code smell
[23:54:50] <pikajude> oh, yeah, i see
[23:54:50] <ammar2> lol
[23:54:51] <bjs> Wooble: and one day Raymond will die and or retire and we can fix it
[23:54:57] <bjs> :P
[23:55:01] <SnoopJ> itertools does this obnoxious thing where half of the good parts are in the documentation :|
[23:55:07] <Wooble> bjs: i'm happy to just install more_itertools instead of copying and pasting
[23:55:15] *** Joins: Atque (~Atque@user/atque)
[23:55:33] <mokulus> pikajude: can you show what you're trying to achieve exactly?
[23:55:35] <bjs> Wooble: i know what you mean, but you're also just saying "I'm happy to install a third-party module to get access to a function that is in the standard library commented out"
[23:55:42] <bjs> which is crazy and/or stupid
[23:55:48] <SnoopJ> mokulus, they're trying to understand the distinction between these abstractions
[23:55:49] <pikajude> sure thing
[23:56:00] <pikajude> map(foo, myListOfData).nth(3)
[23:56:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[23:56:16] <pikajude> now, you might propose foo(myListOfData[3])
[23:56:17] <mokulus> ok so i was right it's a code smell
[23:56:17] *** Parts: phinxy (~phinxy@78-71-229-90-no500.tbcn.telia.com) ()
[23:56:22] <pikajude> but sometimes the entire iterator is used instead
[23:56:28] <pikajude> (this isn't my code lol)
[23:56:31] <SnoopJ> pikajude, it can't be an instance method because the underlying iterable will be advanced by any given call.
[23:56:37] <bjs> pikajude: I was merely explaining what the glossary was saying and why there are objects that don't have the subscript syntax.
[23:56:44] <pikajude> oh. i thought __next__ advanced the iterator too
[23:56:45] *** Quits: maromau (~mauro@151.62.46.246) (Quit: Konversation terminated!)
[23:56:47] <bjs> pikajude: you can use islice
[23:56:50] <SnoopJ> `mp = map(...);  mp.nth(3);  mp.nth(3)  # <--- what happens here?`
[23:56:59] <bjs> pikajude: it does, map is an iterator, it only has next
[23:57:11] <pikajude> SnoopJ said it can't be an instance method
[23:57:17] <pikajude> is __next__ not an instance method?
[23:57:24] <SnoopJ> I was talking about nth()
[23:57:31] <SnoopJ> __next__() is an instance method, yes
[23:57:44] <SnoopJ> but my point is that once you've advanced the map, you've...advanced the map
[23:57:48] <pikajude> there's nothing preventing instance methods from mutating the iterable
[23:57:54] <SnoopJ> iterables aren't "rewindable" in general
[23:58:04] <pikajude> okay, so it IS to prevent misunderstandings from people who don't understand iterators?
[23:58:12] <bjs> pikajude: what is "it" ?
[23:58:12] <SnoopJ> no, it is not
[23:58:19] *** Joins: fikran (~fikran@user/fikran)
[23:58:27] *** Joins: lbracher (~lucas@77.109.116.248)
[23:58:29] <pikajude> the lack of useful methods like nth() as instance methods on iterator
[23:58:33] <Wooble> just cache all of the state and hope no one does itertools.count().nth(really_big_number)
[23:58:45] <SnoopJ> pikajude, what you just shared isn't an iterator, it's an iterable.
[23:58:54] <pikajude> ooh, ok
[23:59:01] <SnoopJ> So maybe understanding "what" before "why" will be more useful to you here, because the distinction between these three concepts is creating a lot of fog.
[23:59:09] <SnoopJ> (and again, the glossary does a good job explaining all three)
[23:59:23] *** Quits: zegalch (~zegalch@178.128.75.133) (Remote host closed the connection)
[23:59:29] <bjs> pikajude: if you only have next, "nth" is a bit of an awkward thing to define as it probably doesn't do what you want
[23:59:34] <Wooble> pikajude: but sure, the iterator protocol is simple instead of complex; there are libraries to get the complexity
[23:59:44] <constxd> i would say that yes the primary motivation for not having iterators be subscriptable is that it would be confusing
[23:59:57] *** Joins: zegalch (~zegalch@178.128.75.133)
