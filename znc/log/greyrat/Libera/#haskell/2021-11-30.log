[00:02:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:02:39] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:03:29] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[00:04:02] *** Joins: wrengr (~wrengr@34.133.83.34.bc.googleusercontent.com)
[00:08:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:08:46] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:08:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:09:45] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[00:12:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:12:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:14:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:15:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:16:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:17:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:17:29] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:19:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:19:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:20:51] *** Joins: Pickchea (~private@user/pickchea)
[00:22:22] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Quit: Connection closed)
[00:22:37] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[00:24:55] *** Quits: michalz (~michalz@185.246.204.62) (Remote host closed the connection)
[00:25:15] *** Joins: jkoshy (99b9359beb@2604:bf00:561:2000::10f)
[00:25:37] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[00:26:53] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[00:29:25] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[00:30:43] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[00:30:55] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[00:34:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:34:56] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:36:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:37:17] *** Joins: eyJhb (~eyJhb@user/eyjhb)
[00:39:24] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:40:33] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[00:42:32] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[00:42:39] <eyJhb> Considering picking up Haskell, or learning some of the basics. Is there any recommendations beyound what is given an haskell.org? I have littel experience with functional programming (my only thing being nix)
[00:43:14] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e72fcf154b5eecf3df6.dip0.t-ipconnect.de)
[00:45:09] <sm> welcome. So many.. what kind of resource do you like ?
[00:45:48] <jle`> lhll
[00:46:00] <pragma-> eyJhb: I have been enjoying Real World Haskell recently.
[00:46:22] <pragma-> http://book.realworldhaskell.org/read/
[00:46:38] <dsal> I don't feel I learned much from RWH.  It felt more like a demonstration than educational material to me.
[00:46:49] <pragma-> interesting
[00:47:02] <jle`> whoops, sorry, that was a mis-click, not an acronym for a book :)
[00:47:05] <dsal> You're still allowed to like it.
[00:47:39] <dolio> Seems like it's probably not an ideal intro for someone with little functional programming experience, anyway.
[00:47:44] * sm randomly throws out https://www.stephendiehl.com/posts/docs.html
[00:47:54] <dsal> jle`: Heh.  I thought you were referring to the Hutton book somehow.
[00:48:03] <eyJhb> I am still reading haskell.org, so it might already be there. - I have mostly liked things such as, a tour of go ( https://go.dev/tour/welcome/1 ), ie. small guides that take you through the basics and advance up to the higher concepts in a semi consistent flow. Not sure how much sense I am making :)
[00:48:34] <sm> @where htac then, eyJhb 
[00:48:34] <lambdabot> "Haskell Tutorial and Cookbook" by Mark Watson in 2017-09-04 at <https://leanpub.com/haskell-cookbook>
[00:48:35] <dsal> "What I Wish I Knew" was completely insane.  It's a cool resource, but it seems to cover everything knowable, which, I mean, sure, I wish I knew everything at every step.  :)
[00:48:53] <dsal> Hutton isn't too bad.
[00:48:56] <Rembane> Covering everything is quite good for a good reference. :)
[00:49:02] <Rembane> But it's not a tutorial.
[00:49:40] *** Joins: lukec (9dfd4d094e@2604:bf00:561:2000::10e)
[00:50:15] <pragma-> "Learn You A Haskell" was recommended to me in the past. Upon reading it, it felt like a fast-paced introduction/tutorial, quickly getting to the point of things. But it's a bit rough around the edges with typoes and place-holders and &gt; instead of > in various spots. I don't know.
[00:50:18] <dsal> "What I Wish I Knew When Learning" makes me think of a small set of gotchas or something.  Not like, just everything possible.  I do wish I knew everything possible, but I'm OK not knowing it when I was learning.  :)
[00:51:00] <DigitalKiwi> +1 hutton
[00:51:05] *** Joins: cjb (~cjb@user/cjb)
[00:51:06] <eyJhb> I can see there is a lot to learn/know. :) Trying to compact all the info and will sort it for further investigation!
[00:51:24] <dsal> eyJhb: I still like haskellbook.com, but some people dislike it.  And there's a third category that's not important.  :)
[00:51:28] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[00:51:44] <eyJhb> third category?
[00:51:51] <sm> considering just books, there are what.. 50ish at this point ?
[00:51:54] <dsal> Some people don't like things about the book that aren't about the material itself.
[00:52:20] <DigitalKiwi> it's an ok book but it was too long for me to finish
[00:53:07] <dsal> Yeah, it's long which can be very good or not very good.
[00:53:07] <DigitalKiwi> programming in haskell was good and short enough i've read it at least twice
[00:53:07] <dsal> I think I did about half of it and got pretty proficient.  Then went back to finish it.
[00:53:08] <sm> I had better +1 Hutton, one of the best haskell teachers (it's also on youtube now)
[00:53:30] <dsal> Reading books on YT seems interesting.
[00:53:41] <dsal> Can I get the lens book in audible?
[00:54:02] <sm> not literally the book on youtube, but a course based on it, I assume quite similar
[00:54:25] <DigitalKiwi> only if you want to start a war about how to pronounce all of the symbols
[00:54:39] <dsal> Yeah, makes sense.  I like watching some of these videos, but I don't know that I learn as much from watching an hour long video.
[00:54:48] <eyJhb> Unsure if this is unpopular, but I am trying to learn/see what a functional programming language can give me. Currently I code a lot in Golang (and still quite enjoy it), but frameworks (for web however) such as Elm, has got my interest sparked some more. (as mentioned, only really done nix atm.)
[00:54:48] <sm> graham hutton is the latest guest on haskell interlude podcast by the way - recommended
[00:54:49] <dsal> Er, having my iPad play an hour long video while I get distracted and talk to people in irc
[00:54:57] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[00:55:04] <dsal> eyJhb: Have you programmed in elm?
[00:55:07] <DigitalKiwi> https://www.youtube.com/watch?v=NzIZzvbplSM&list=PLly9WMAVMrayYo2c-1E_rIRwBXG_FbLBW
[00:55:29] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[00:55:32] <dsal> elm is like a *super* stripped down haskell with a bunch of features missing.  By the time you get good at elm and go to haskell, you'll be starving for all the missing pieces.
[00:55:48] <pragma-> it's cute how http://dev.stephendiehl.com/hask/tutorial.pdf is named "tutorial" when it's so comprehensive
[00:56:04] <DigitalKiwi> i think it started off small
[00:56:05] <pragma-> 5th major edition too
[00:56:09] <dsal> It probably started out with a couple of important firsts and then it was just too late to rename it.
[00:56:17] <hpc> it'd be nice if that site had https
[00:56:27] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[00:56:49] <DigitalKiwi> wish he'd quit tweeting about crypto and finish http://dev.stephendiehl.com/fun/
[00:57:17] <DigitalKiwi> hpc: last time i suggested someone that they got mad lol
[00:57:20] <eyJhb> dsal: ONly read some of the tutorial/getting started, and then I was somewhat put off by what I have read about tho community (I have not confirmed anything, and I still not ruled out wanting to use Elm yet)
[00:57:48] <dsal> Yeah, so there are a couple of downsides of elm that aren't the language.  Kind of like haskellbook.com  :)
[00:58:04] <eyJhb> Really surprised by how welcoming this channel was upon my initial query in here. Not always you see that. 
[00:58:09] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Read error: Connection reset by peer)
[00:58:28] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[00:58:34] <eyJhb> dsal: That's what I gathered so far about Elm yes ... Kind of sad (if it is like I read)
[00:58:35] *** Joins: pavonia (~user@user/siracusa)
[00:58:37] <hpc> eyJhb: we draw people in with niceness and then corrupt them with our abstract mathematical ways
[00:58:44] <dsal> The language itself isn't that bad, though I do wish it were just a *little* more.  The closedness of Elm and lack of welcome input is unfortunate.
[00:58:44] <Rembane> +1
[00:58:51] <dsal> We also have ghcjs and purescript, though.
[00:58:55] <sm> #haskell is full of slackers, easiest place to get a conversation going :)
[00:59:06] <hpc> sm: technically it's full of irc-ers
[00:59:08] <Rembane> I'm really fond of Purescript, or was a couple of years ago, haven't used it since. 
[00:59:10] <dsal> I've had a pretty good experience with purescript.
[00:59:12] <eyJhb> dsal: I have looked at PureScript as well :p
[01:00:35] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:02:54] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[01:07:28] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 264 seconds)
[01:10:13] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[01:10:13] *** Quits: pavonia (~user@user/siracusa) (*.net *.split)
[01:10:13] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (*.net *.split)
[01:10:14] *** Quits: wrengr (~wrengr@34.133.83.34.bc.googleusercontent.com) (*.net *.split)
[01:10:14] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (*.net *.split)
[01:10:14] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (*.net *.split)
[01:10:14] *** Quits: moats (~oats@user/oats) (*.net *.split)
[01:10:14] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[01:10:14] *** Quits: Franciman (~Franciman@mx1.fracta.dev) (*.net *.split)
[01:10:14] *** Quits: cosimone (~user@93-47-231-139.ip115.fastwebnet.it) (*.net *.split)
[01:10:14] *** Quits: juhp (~juhp@128.106.188.82) (*.net *.split)
[01:10:14] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (*.net *.split)
[01:10:14] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c) (*.net *.split)
[01:10:14] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (*.net *.split)
[01:10:14] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (*.net *.split)
[01:10:14] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (*.net *.split)
[01:10:14] *** Quits: zebrag (~chris@user/zebrag) (*.net *.split)
[01:10:14] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (*.net *.split)
[01:10:14] *** Quits: kmein (~weechat@user/kmein) (*.net *.split)
[01:10:14] *** Quits: stefan-_ (~cri@42dots.de) (*.net *.split)
[01:10:14] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (*.net *.split)
[01:10:14] *** Quits: img (~img@user/img) (*.net *.split)
[01:10:14] *** Quits: dsrt^ (~dsrt@68.101.58.90) (*.net *.split)
[01:10:14] *** Quits: Megant (~kaitsu@user/megant) (*.net *.split)
[01:10:14] *** Quits: arkeet (~arkeet@moriya.ca) (*.net *.split)
[01:10:14] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (*.net *.split)
[01:10:14] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[01:10:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (*.net *.split)
[01:10:15] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (*.net *.split)
[01:10:15] *** Quits: Guest|70 (~Guest|70@c-65-50-165-29.hs.gigamonster.net) (*.net *.split)
[01:10:15] *** Quits: Erutuon (~Erutuon@user/erutuon) (*.net *.split)
[01:10:15] *** Quits: justache (~justache@user/justache) (*.net *.split)
[01:10:15] *** Quits: jlamothe (~jlamothe@198.251.61.229) (*.net *.split)
[01:10:15] *** Quits: slack1256 (~slack1256@191.126.99.210) (*.net *.split)
[01:10:15] *** Quits: ystael (~ystael@user/ystael) (*.net *.split)
[01:10:15] *** Quits: Topsi (~Tobias@dyndsl-095-033-088-116.ewe-ip-backbone.de) (*.net *.split)
[01:10:15] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[01:10:15] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (*.net *.split)
[01:10:15] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[01:10:15] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[01:10:15] *** Quits: machinedgod (~machinedg@24.105.81.50) (*.net *.split)
[01:10:15] *** Quits: spoonm (spoonm@inaba.spoonm.org) (*.net *.split)
[01:10:15] *** Quits: Ram-Z (~Ram-Z@li1814-254.members.linode.com) (*.net *.split)
[01:10:15] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[01:10:15] *** Quits: sajith (~sajith@user/sajith) (*.net *.split)
[01:10:15] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[01:10:15] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[01:10:15] *** Quits: noctux (~noctux@user/noctux) (*.net *.split)
[01:10:15] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[01:10:15] *** Quits: mniip (mniip@libera/staff/mniip) (*.net *.split)
[01:10:15] *** Quits: akspecs__ (~akspecs@user/akspecs) (*.net *.split)
[01:10:15] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[01:10:16] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (*.net *.split)
[01:10:16] *** Quits: alx741 (~alx741@181.196.69.176) (*.net *.split)
[01:10:16] *** Quits: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de) (*.net *.split)
[01:10:16] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[01:10:16] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (*.net *.split)
[01:10:16] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (*.net *.split)
[01:10:16] *** Quits: nahcetan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[01:10:16] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (*.net *.split)
[01:10:16] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (*.net *.split)
[01:10:16] *** Quits: fluxit (~fluxit@techsmix.net) (*.net *.split)
[01:10:16] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (*.net *.split)
[01:10:16] *** Quits: AkechiShiro (~licht@2a01:e0a:5f9:9681:1473:3dff:fe42:56a9) (*.net *.split)
[01:10:16] *** Quits: hubvu (sid495858@user/hubvu) (*.net *.split)
[01:10:16] *** Quits: vonfry (~user@116.236.75.238) (*.net *.split)
[01:10:16] *** Quits: koz (~koz@121.99.240.58) (*.net *.split)
[01:10:17] *** Quits: davean (~davean@davean.sciesnet.net) (*.net *.split)
[01:10:17] *** Quits: drdo (~drdo@roach0.drdo.eu) (*.net *.split)
[01:10:17] *** Quits: ishutin (~ishutin@87-97-82-128.pool.digikabel.hu) (*.net *.split)
[01:10:17] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (*.net *.split)
[01:10:17] *** Quits: matijja (~matijja@193.77.181.201) (*.net *.split)
[01:10:17] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: degraafk (sid71464@id-71464.lymington.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: tritlo (sid58727@user/tritlo) (*.net *.split)
[01:10:17] *** Quits: EvanR (~evan@user/evanr) (*.net *.split)
[01:10:17] *** Quits: srk (~sorki@user/srk) (*.net *.split)
[01:10:17] *** Quits: son0p (~ff@181.136.122.143) (*.net *.split)
[01:10:17] *** Quits: sayola (~vekto@dslb-092-072-095-186.092.072.pools.vodafone-ip.de) (*.net *.split)
[01:10:17] *** Quits: theproffesor (~theproffe@user/theproffesor) (*.net *.split)
[01:10:17] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[01:10:17] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (*.net *.split)
[01:10:17] *** Quits: iteratee_ (~kyle@162.218.222.107) (*.net *.split)
[01:10:17] *** Quits: Ranhir (~Ranhir@157.97.53.139) (*.net *.split)
[01:10:17] *** Quits: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net) (*.net *.split)
[01:10:17] *** Quits: pippijn (~pippijn@ra.xinutec.org) (*.net *.split)
[01:10:17] *** Quits: SIben (~SIben@ns3106586.ip-5-135-191.eu) (*.net *.split)
[01:10:17] *** Quits: shane (~shane@ana.rch.ist) (*.net *.split)
[01:10:17] *** Quits: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com) (*.net *.split)
[01:10:17] *** Quits: ridcully (~ridcully@p508ac9bf.dip0.t-ipconnect.de) (*.net *.split)
[01:10:17] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (*.net *.split)
[01:10:17] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (*.net *.split)
[01:10:17] *** Quits: idnar (sid12240@debian/mithrandi) (*.net *.split)
[01:10:17] *** Quits: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: sa1_ (sid7690@id-7690.ilkley.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: typetetris (sid275937@id-275937.tinside.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: glowcoil (sid3405@id-3405.tinside.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: ProofTechnique (sid79547@5.254.36.60) (*.net *.split)
[01:10:17] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[01:10:17] *** Quits: jackdk (sid373013@cssa/jackdk) (*.net *.split)
[01:10:17] *** Quits: sus (zero@user/zeromomentum) (*.net *.split)
[01:10:17] *** Quits: catern (~sbaugh@cpe-98-7-229-235.nyc.res.rr.com) (*.net *.split)
[01:10:17] *** Quits: gnyeki (~gnyeki@user/gnyeki) (*.net *.split)
[01:10:17] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[01:10:18] *** Quits: supersven (sid501114@id-501114.ilkley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: christiaanb (sid84827@id-84827.lymington.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: integral (sid296274@user/integral) (*.net *.split)
[01:10:18] *** Quits: aria (sid380617@lymington.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: systemfault (sid267009@uxbridge.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: truckasaurus (sid457088@helmsley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: jonrh (sid5185@ilkley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: gmc_ (sid58314@ilkley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: nrr__ (sid20938@lymington.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: cln (sid336875@ilkley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: pepeiborra (sid443799@ilkley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: bbhoss (sid18216@tinside.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: agander_m (sid407952@tinside.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: alinab (sid468903@helmsley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[01:10:18] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (*.net *.split)
[01:10:18] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (*.net *.split)
[01:10:18] *** Quits: maerwald (~maerwald@user/maerwald) (*.net *.split)
[01:10:18] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[01:10:18] *** Quits: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1) (*.net *.split)
[01:10:18] *** Quits: ddb (~ddb@ipv6two.tilde.club) (*.net *.split)
[01:10:18] *** Quits: spider__ (~spider@vps-951ce37a.vps.ovh.ca) (*.net *.split)
[01:10:18] *** Quits: ozzloy (~ozzloy@ozzloy.lifeafterking.org) (*.net *.split)
[01:10:18] *** Quits: c_wraith (~c_wraith@adjoint.us) (*.net *.split)
[01:10:18] *** Quits: drlkf (~drlkf@2001:41d0:a:62bb::1) (*.net *.split)
[01:10:18] *** Quits: xerox (~edi@user/edi) (*.net *.split)
[01:10:18] *** Quits: bwe (~bwe@2a01:4f8:1c1c:4878::2) (*.net *.split)
[01:10:18] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (*.net *.split)
[01:10:18] *** Quits: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5) (*.net *.split)
[01:10:18] *** Quits: alex[m]121 (~alexchete@2001:470:69fc:105::1:1001) (*.net *.split)
[01:10:18] *** Quits: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918) (*.net *.split)
[01:10:18] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (*.net *.split)
[01:10:18] *** Quits: ts2 (~ts@46.101.20.9) (*.net *.split)
[01:10:18] *** Quits: cjay- (cjay@nerdbox.nerd2nerd.org) (*.net *.split)
[01:10:18] *** Quits: Clint (~Clint@user/clint) (*.net *.split)
[01:10:18] *** Quits: ptrcmd (~ptrcmd@user/ptrcmd) (*.net *.split)
[01:10:18] *** Quits: sshine_ (~simon@hubris.eta.solutions) (*.net *.split)
[01:10:18] *** Quits: p3n (~p3n@217.198.124.246) (*.net *.split)
[01:10:18] *** Quits: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com) (*.net *.split)
[01:10:18] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[01:10:18] *** Quits: wagle (~wagle@quassel.wagle.io) (*.net *.split)
[01:10:18] *** Quits: forell (~forell@user/forell) (*.net *.split)
[01:10:18] *** Quits: puke (~puke@user/puke) (*.net *.split)
[01:10:18] *** Quits: zopsi_ (zopsi@2600:3c00::f03c:91ff:fe14:551f) (*.net *.split)
[01:10:18] *** Quits: dysfigured (~dfg@li490-89.members.linode.com) (*.net *.split)
[01:10:18] *** Quits: gabiruh_ (~gabiruh@vps19177.publiccloud.com.br) (*.net *.split)
[01:10:18] *** Quits: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at) (*.net *.split)
[01:10:18] *** Quits: cfebs (~cfebs@user/cfebs) (*.net *.split)
[01:10:18] *** Quits: ellie (~ellie@user/ellie) (*.net *.split)
[01:10:19] *** Quits: martin02 (~silas@141.84.69.76) (*.net *.split)
[01:10:19] *** Quits: lechner (~lechner@debian/lechner) (*.net *.split)
[01:10:19] *** Quits: robbert-vdh (~robbert@robbertvanderhelm.nl) (*.net *.split)
[01:10:19] *** Quits: blades (~blades@204.48.29.163) (*.net *.split)
[01:10:19] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (*.net *.split)
[01:10:19] *** Quits: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0) (*.net *.split)
[01:10:19] *** Quits: kosmikus (~kosmikus@nullzig.kosmikus.org) (*.net *.split)
[01:10:19] *** Quits: haritz (~hrtz@user/haritz) (*.net *.split)
[01:10:19] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (*.net *.split)
[01:10:19] *** Quits: PotatoHatsue (~berberman@2001:470:69fc:105::b488) (*.net *.split)
[01:10:19] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (*.net *.split)
[01:10:19] *** Quits: xosdy[m] (~xosdyalet@2001:470:69fc:105::31f7) (*.net *.split)
[01:10:19] *** Quits: anotherbruce[m] (~anotherbr@2001:470:69fc:105::1:2548) (*.net *.split)
[01:10:19] *** Quits: chizil[m] (~chizilmat@2001:470:69fc:105::1:34ab) (*.net *.split)
[01:10:19] *** Quits: gdhffd[m] (~gdhffdmat@2001:470:69fc:105::1:799) (*.net *.split)
[01:10:19] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (*.net *.split)
[01:10:19] *** Quits: Movedtosridoneem (~sridmatri@2001:470:69fc:105::1c2) (*.net *.split)
[01:10:19] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (*.net *.split)
[01:10:19] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (*.net *.split)
[01:10:19] *** Quits: barrucadu (~barrucadu@carcosa.barrucadu.co.uk) (*.net *.split)
[01:10:19] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[01:10:19] *** Quits: robertm (robertm@lattice.rojoma.com) (*.net *.split)
[01:10:19] *** Quits: _________ (~nobody@user/noodly) (*.net *.split)
[01:10:19] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (*.net *.split)
[01:10:19] *** Quits: dispater (~dispater@user/brprice) (*.net *.split)
[01:10:19] *** Quits: Trattue (~Trattue@152.70.182.158) (*.net *.split)
[01:10:19] *** Quits: DigitalKiwi (~kiwi@192.241.157.119) (*.net *.split)
[01:10:19] *** Quits: jrm (~jrm@156.34.187.65) (*.net *.split)
[01:10:19] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[01:10:19] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[01:10:19] *** Quits: _\_ (~o@user/ding) (*.net *.split)
[01:10:19] *** Quits: jeffz (~user@lambda.xen.prgmr.com) (*.net *.split)
[01:10:19] *** Quits: Rembane (~Rembane@li346-36.members.linode.com) (*.net *.split)
[01:10:19] *** Quits: kaol_ (~kaol@94-237-42-30.nl-ams1.upcloud.host) (*.net *.split)
[01:10:19] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[01:10:20] *** Quits: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com) (*.net *.split)
[01:10:20] *** Quits: adium (adium@user/adium) (*.net *.split)
[01:10:20] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (*.net *.split)
[01:10:20] *** Quits: n3t (n3t@user/n3t) (*.net *.split)
[01:10:20] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[01:10:20] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (*.net *.split)
[01:10:20] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[01:10:20] *** Quits: edwtjo (~edwtjo@user/edwtjo) (*.net *.split)
[01:10:20] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[01:10:20] *** Quits: Aleksejs (~Aleksejs@haskell.lv) (*.net *.split)
[01:10:20] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (*.net *.split)
[01:10:20] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (*.net *.split)
[01:10:20] *** Quits: orcus (~orcus@user/brprice) (*.net *.split)
[01:10:20] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (*.net *.split)
[01:10:20] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (*.net *.split)
[01:10:20] *** Quits: PHO` (~pho@akari.cielonegro.org) (*.net *.split)
[01:10:20] *** Quits: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962) (*.net *.split)
[01:10:20] *** Quits: zero (~z@user/zero) (*.net *.split)
[01:10:20] *** Quits: nonzen (~nonzen@user/nonzen) (*.net *.split)
[01:10:20] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[01:10:20] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[01:10:20] *** Quits: choucavalier (~choucaval@peanutbuttervibes.com) (*.net *.split)
[01:10:20] *** Quits: landonf (landonf@mac68k.info) (*.net *.split)
[01:10:20] *** Quits: sheb (~sheb@31.223.228.71) (*.net *.split)
[01:10:20] *** Quits: zaquest (~notzaques@5.130.79.72) (*.net *.split)
[01:10:20] *** Quits: Jing (~hedgehog@125.105.11.101) (*.net *.split)
[01:10:20] *** Quits: jespada (~jespada@87.74.37.56) (*.net *.split)
[01:10:20] *** Quits: synthmeat (~synthmeat@user/synthmeat) (*.net *.split)
[01:10:20] *** Quits: _xor (~xor@72.49.199.147) (*.net *.split)
[01:10:20] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (*.net *.split)
[01:10:20] *** Quits: smunix (~smunix@static.26.70.12.49.clients.your-server.de) (*.net *.split)
[01:10:20] *** Quits: benjamin[m]12 (~benjaminm@2001:470:69fc:105::1:3f2f) (*.net *.split)
[01:10:20] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[01:10:20] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (*.net *.split)
[01:10:20] *** Quits: mcfilib (sid302703@user/mcfilib) (*.net *.split)
[01:10:20] *** Quits: taktoa[c] (sid282096@id-282096.tinside.irccloud.com) (*.net *.split)
[01:10:21] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[01:10:21] *** Quits: tureba (~tureba@tureba.org) (*.net *.split)
[01:10:21] *** Quits: megaTherion (~therion@unix.io) (*.net *.split)
[01:10:21] *** Quits: berberman (~berberman@user/berberman) (*.net *.split)
[01:10:21] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (*.net *.split)
[01:10:21] *** Quits: sm (~sm@plaintextaccounting/sm) (*.net *.split)
[01:10:21] *** Quits: Tisoxin (~ikosit@user/ikosit) (*.net *.split)
[01:10:21] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[01:10:21] *** Quits: JoelMcCracken[m] (~joelmccra@2001:470:69fc:105::8405) (*.net *.split)
[01:10:21] *** Quits: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54) (*.net *.split)
[01:10:21] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (*.net *.split)
[01:10:21] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (*.net *.split)
[01:10:21] *** Quits: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg) (*.net *.split)
[01:10:21] *** Quits: jiribenes (~jiribenes@rosa.jiribenes.com) (*.net *.split)
[01:10:21] *** Quits: opqdonut (opqdonut@pseudo.fixme.fi) (*.net *.split)
[01:10:21] *** Quits: seanparsons (~seanparso@cpc158525-gill21-2-0-cust151.20-1.cable.virginm.net) (*.net *.split)
[01:10:21] *** Quits: jakalx (~jakalx@base.jakalx.net) (*.net *.split)
[01:10:21] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[01:10:21] *** Quits: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es) (*.net *.split)
[01:10:21] *** Quits: biberu (~biberu@user/biberu) (*.net *.split)
[01:10:21] *** Quits: canta (~canta@user/canta) (*.net *.split)
[01:10:21] *** Quits: bah (~bah@l1.tel) (*.net *.split)
[01:10:21] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (*.net *.split)
[01:10:21] *** Quits: feetwind (~mike@user/feetwind) (*.net *.split)
[01:10:21] *** Quits: alp (~alp@mail.fmap.fr) (*.net *.split)
[01:10:21] *** Quits: guibou (~guibou@mail.fmap.fr) (*.net *.split)
[01:10:21] *** Quits: lambdandy[m] (~lambdandy@2001:470:69fc:105::1:3045) (*.net *.split)
[01:10:21] *** Quits: Tavi[m] (~factoidde@2001:470:69fc:105::1:819) (*.net *.split)
[01:10:21] *** Quits: max22- (~maxime@2a01cb0883359800172da6e8deefe185.ipv6.abo.wanadoo.fr) (*.net *.split)
[01:10:21] *** Quits: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7) (*.net *.split)
[01:10:21] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (*.net *.split)
[01:10:21] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[01:10:21] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (*.net *.split)
[01:10:22] *** Quits: Igloo (~ian@matrix.chaos.earth.li) (*.net *.split)
[01:10:22] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[01:10:22] *** Quits: Unhammer (~Unhammer@user/unhammer) (*.net *.split)
[01:10:22] *** Quits: Flow (~none@gentoo/developer/flow) (*.net *.split)
[01:10:22] *** Quits: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d) (*.net *.split)
[01:10:22] *** Quits: aristid (sid1599@id-1599.uxbridge.irccloud.com) (*.net *.split)
[01:10:22] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[01:10:22] *** Quits: T_S_ (sid501726@id-501726.uxbridge.irccloud.com) (*.net *.split)
[01:10:22] *** Quits: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f) (*.net *.split)
[01:10:22] *** Quits: Philonous (~Philonous@user/philonous) (*.net *.split)
[01:10:22] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (*.net *.split)
[01:10:22] *** Quits: tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (*.net *.split)
[01:10:22] *** Quits: thedward[m] (~thedwardm@2001:470:69fc:105::f79) (*.net *.split)
[01:10:22] *** Quits: sky_lounge[m] (~skylounge@2001:470:69fc:105::efa6) (*.net *.split)
[01:10:22] *** Quits: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42) (*.net *.split)
[01:10:22] *** Quits: iammrinal0[m] (~iammrinal@2001:470:69fc:105::1:2248) (*.net *.split)
[01:10:22] *** Quits: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a) (*.net *.split)
[01:10:22] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (*.net *.split)
[01:10:22] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (*.net *.split)
[01:10:22] *** Quits: clever (~clever@99.192.114.98) (*.net *.split)
[01:10:22] *** Quits: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com) (*.net *.split)
[01:10:22] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (*.net *.split)
[01:10:22] *** Quits: APic (apic@apic.name) (*.net *.split)
[01:10:22] *** Quits: riatre (~quassel@2001:310:6000:f::5198:1) (*.net *.split)
[01:10:22] *** Quits: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c) (*.net *.split)
[01:10:22] *** Quits: nerdypepper (~nerdypepp@user/nerdypepper) (*.net *.split)
[01:10:22] *** Quits: andjjj23 (~irc@107.170.228.47) (*.net *.split)
[01:10:22] *** Quits: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (*.net *.split)
[01:10:22] *** Quits: noddy (~user@user/noddy) (*.net *.split)
[01:10:22] *** Quits: edr (~edr@user/edr) (*.net *.split)
[01:10:22] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[01:10:22] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (*.net *.split)
[01:10:22] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[01:10:22] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[01:10:22] *** Quits: polux (~polux@51.15.169.172) (*.net *.split)
[01:10:22] *** Quits: juri_ (~juri@178.63.35.222) (*.net *.split)
[01:10:22] *** Quits: dy (~dy@user/dy) (*.net *.split)
[01:10:22] *** Quits: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca) (*.net *.split)
[01:10:22] *** Quits: statusfailed (~statusfai@statusfailed.com) (*.net *.split)
[01:10:22] *** Quits: ajb (~ajb@cupid.whatbox.ca) (*.net *.split)
[01:10:22] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[01:10:22] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[01:10:23] *** Quits: auri (~quassel@fsf/member/auri) (*.net *.split)
[01:10:23] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[01:10:23] *** Quits: mstruebing (~maex@2001:41d0:8:93c7::1) (*.net *.split)
[01:10:23] *** Quits: lstor (~lstor@user/lstor) (*.net *.split)
[01:10:23] *** Quits: cigsender (~cigsender@74.124.58.162) (*.net *.split)
[01:10:23] *** Quits: enikar (~enikar@user/enikar) (*.net *.split)
[01:10:23] *** Quits: td_ (~td@94.134.91.97) (*.net *.split)
[01:10:23] *** Quits: Moyst_ (~moyst@user/moyst) (*.net *.split)
[01:10:23] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (*.net *.split)
[01:10:23] *** Quits: jmct_ (sid160793@id-160793.tinside.irccloud.com) (*.net *.split)
[01:10:23] *** Quits: hook54321 (sid149355@user/hook54321) (*.net *.split)
[01:10:23] *** Quits: astra` (sid289983@user/amish) (*.net *.split)
[01:10:23] *** Quits: amir (sid22336@user/amir) (*.net *.split)
[01:10:23] *** Quits: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com) (*.net *.split)
[01:10:23] *** Quits: parseval (sid239098@id-239098.helmsley.irccloud.com) (*.net *.split)
[01:10:23] *** Quits: bsdbandit (~bwell@users.757.org) (*.net *.split)
[01:10:23] *** Quits: gentauro (~gentauro@user/gentauro) (*.net *.split)
[01:10:23] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[01:10:23] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (*.net *.split)
[01:10:23] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[01:10:23] *** Quits: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec) (*.net *.split)
[01:10:23] *** Quits: xstill- (xstill@fimu/xstill) (*.net *.split)
[01:10:23] *** Quits: feliix42 (~felix@gibbs.uberspace.de) (*.net *.split)
[01:10:23] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (*.net *.split)
[01:10:23] *** Quits: Deide (~deide@user/deide) (*.net *.split)
[01:10:23] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (*.net *.split)
[01:10:23] *** Quits: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70) (*.net *.split)
[01:10:23] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (*.net *.split)
[01:10:23] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (*.net *.split)
[01:10:23] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (*.net *.split)
[01:10:23] *** Quits: meatfeather[m] (~meatfeath@2001:470:69fc:105::1:3311) (*.net *.split)
[01:10:23] *** Quits: ocramz[m] (~ocramzmat@2001:470:69fc:105::1:35b0) (*.net *.split)
[01:10:23] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (*.net *.split)
[01:10:23] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (*.net *.split)
[01:10:24] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (*.net *.split)
[01:10:24] *** Quits: OndejSkup[m] (~mimivxmat@2001:470:69fc:105::c300) (*.net *.split)
[01:10:24] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (*.net *.split)
[01:10:24] *** Quits: ringo__ (~ringo@157.230.117.128) (*.net *.split)
[01:10:24] *** Quits: oxytocat (~alloca@user/suppi) (*.net *.split)
[01:10:24] *** Quits: Ferdirand (~somebody@2001:4c78:2012:5000::2) (*.net *.split)
[01:10:24] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (*.net *.split)
[01:10:24] *** Quits: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34) (*.net *.split)
[01:10:24] *** Quits: hexagoxel (~hexagoxel@2a01:4f8:c0c:e::2) (*.net *.split)
[01:10:24] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[01:10:24] *** Quits: nshepperd2 (~nshepperd@li364-218.members.linode.com) (*.net *.split)
[01:10:24] *** Quits: deni (~deni@user/deni) (*.net *.split)
[01:10:24] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[01:10:24] *** Quits: jocke-l (jocke-l@a.x0.is) (*.net *.split)
[01:10:24] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (*.net *.split)
[01:10:24] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[01:10:24] *** Quits: L29Ah (~L29Ah@wikipedia/L29Ah) (*.net *.split)
[01:10:24] *** Quits: Deewiant (~deewiant@2001:470:69fc:105::2fd3) (*.net *.split)
[01:10:24] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (*.net *.split)
[01:10:24] *** Quits: Xe (~cadey@tailscale/xe) (*.net *.split)
[01:10:25] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[01:10:25] *** Quits: kristjansson_ (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: dpratt__ (sid193493@id-193493.helmsley.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: Adeon (sid418992@id-418992.lymington.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: rune (sid21167@id-21167.ilkley.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: grfn (sid449115@id-449115.helmsley.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl) (*.net *.split)
[01:10:25] *** Quits: platz (~platz@user/platz) (*.net *.split)
[01:10:25] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[01:10:25] *** Quits: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (*.net *.split)
[01:10:25] *** Quits: vito (sid1962@user/vito) (*.net *.split)
[01:10:25] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[01:10:25] *** Quits: mrckndt (~mrckndt@user/mrckndt) (*.net *.split)
[01:10:25] *** Quits: eyJhb (~eyJhb@user/eyjhb) (*.net *.split)
[01:10:25] *** Quits: pierrot (~pi@user/pierrot) (*.net *.split)
[01:10:25] *** Quits: tired (~tired@user/tired) (*.net *.split)
[01:10:25] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (*.net *.split)
[01:10:25] *** Quits: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da) (*.net *.split)
[01:10:25] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (*.net *.split)
[01:10:25] *** Quits: the-coot[m] (~the-cootm@2001:470:69fc:105::95f) (*.net *.split)
[01:10:25] *** Quits: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d) (*.net *.split)
[01:10:25] *** Quits: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb) (*.net *.split)
[01:10:25] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (*.net *.split)
[01:10:25] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (*.net *.split)
[01:10:26] *** Quits: jmtd (jon@dow.land) (*.net *.split)
[01:10:26] *** Quits: hiato (~op_4@user/op-4/x-9116473) (*.net *.split)
[01:10:26] *** Quits: df (~ben@justworks.xyz) (*.net *.split)
[01:10:26] *** Quits: w1gz (~do@159.89.11.133) (*.net *.split)
[01:10:26] *** Quits: acro (~acro@user/acro) (*.net *.split)
[01:10:26] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[01:10:26] *** Quits: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com) (*.net *.split)
[01:10:26] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[01:10:26] *** Quits: relrod (~relrod@redhat/ansible.staff.relrod) (*.net *.split)
[01:10:26] *** Quits: tito (tito@tilde.team) (*.net *.split)
[01:10:26] *** Quits: smorgasbord (buggy@user/smorgasbord) (*.net *.split)
[01:10:26] *** Quits: lisq (~quassel@lis.moe) (*.net *.split)
[01:10:26] *** Quits: tristanC (~tristanC@user/tristanc) (*.net *.split)
[01:10:26] *** Quits: exarkun (~exarkun@user/exarkun) (*.net *.split)
[01:10:26] *** Quits: Hafydd (~Hafydd@user/hafydd) (*.net *.split)
[01:10:26] *** Quits: xerxesphainon[m] (~artaxerxe@2001:470:69fc:105::f400) (*.net *.split)
[01:10:26] *** Quits: yaroot (~yaroot@52.102.13.160.dy.iij4u.or.jp) (*.net *.split)
[01:10:26] *** Quits: SquidDev (~SquidDev@autoclave.squiddev.cc) (*.net *.split)
[01:10:26] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (*.net *.split)
[01:10:26] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (*.net *.split)
[01:10:26] *** Quits: In0perable (~PLAYER_1@fancydata.science) (*.net *.split)
[01:10:26] *** Quits: Square (~a@user/square) (*.net *.split)
[01:10:26] *** Quits: mht-wtf (~mht@mht.wtf) (*.net *.split)
[01:10:26] *** Quits: connrs (~connrs@user/connrs) (*.net *.split)
[01:10:27] *** Quits: remedan (~remedan@balak.me) (*.net *.split)
[01:10:27] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[01:10:27] *** Quits: nf (~n@monade.li) (*.net *.split)
[01:10:27] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[01:10:27] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (*.net *.split)
[01:10:27] *** Quits: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5) (*.net *.split)
[01:10:27] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (*.net *.split)
[01:10:27] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[01:10:27] *** Quits: soft (~soft@2001:470:69fc:105::c75) (*.net *.split)
[01:10:27] *** Quits: asdofindia-m (~akshaymat@2001:470:69fc:105::831) (*.net *.split)
[01:10:27] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (*.net *.split)
[01:10:27] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (*.net *.split)
[01:10:27] *** Quits: utk (~utk@2001:470:69fc:105::1:2fe0) (*.net *.split)
[01:10:27] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[01:10:27] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (*.net *.split)
[01:10:27] *** Quits: Drew[m] (~drewefenw@2001:470:69fc:105::c8c4) (*.net *.split)
[01:10:27] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (*.net *.split)
[01:10:27] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (*.net *.split)
[01:10:27] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (*.net *.split)
[01:10:27] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (*.net *.split)
[01:10:27] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (*.net *.split)
[01:10:27] *** Quits: AWizzArd (~code@gehrels.uberspace.de) (*.net *.split)
[01:10:27] *** Quits: root1 (root@2600:3c02::f03c:92ff:fe1a:c779) (*.net *.split)
[01:10:27] *** Quits: ggVGc (~ggVGc@a.lowtech.earth) (*.net *.split)
[01:10:27] *** Quits: absence (~absence@hildring.pvv.ntnu.no) (*.net *.split)
[01:10:27] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[01:10:28] *** Quits: kawpuh (~kawpuh@66.42.81.80) (*.net *.split)
[01:10:28] *** Quits: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (*.net *.split)
[01:10:28] *** Quits: byorgey (~byorgey@155.138.238.211) (*.net *.split)
[01:10:28] *** Quits: int-e (~noone@int-e.eu) (*.net *.split)
[01:10:28] *** Quits: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net) (*.net *.split)
[01:10:28] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[01:10:28] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[01:10:28] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: obviyus (sid415299@user/obviyus) (*.net *.split)
[01:10:28] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (*.net *.split)
[01:10:28] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (*.net *.split)
[01:10:28] *** Quits: stilgart_ (~Christoph@chezlefab.net) (*.net *.split)
[01:10:28] *** Quits: carter (sid14827@id-14827.helmsley.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: a1paca_ (~a1paca@user/a1paca) (*.net *.split)
[01:10:28] *** Quits: raoul (~raoul@95.179.203.88) (*.net *.split)
[01:10:28] *** Quits: Firedancer (sid336191@id-336191.hampstead.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: scav (sid309693@id-309693.helmsley.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: teehemkay (sid14792@id-14792.lymington.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: bw (sid2730@user/betawaffle) (*.net *.split)
[01:10:28] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: gonz_____ (sid304396@id-304396.lymington.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: jassob1 (~jassob@h-98-128-166-172.NA.cust.bahnhof.se) (*.net *.split)
[01:10:29] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (*.net *.split)
[01:10:29] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (*.net *.split)
[01:10:29] *** Quits: quantum (~quantum@user/quantum/x-8556232) (*.net *.split)
[01:10:29] *** Quits: siraben (~siraben@user/siraben) (*.net *.split)
[01:10:29] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (*.net *.split)
[01:10:29] *** Quits: acco[m] (~accotedom@2001:470:69fc:105::1:3236) (*.net *.split)
[01:10:29] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (*.net *.split)
[01:10:29] *** Quits: jkachmar (~jkachmar@2001:470:69fc:105::c72d) (*.net *.split)
[01:10:29] *** Quits: kosmikus[m] (~andresloe@2001:470:69fc:105::95d) (*.net *.split)
[01:10:29] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (*.net *.split)
[01:10:29] *** Quits: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) (*.net *.split)
[01:10:29] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (*.net *.split)
[01:10:29] *** Quits: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b) (*.net *.split)
[01:10:29] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (*.net *.split)
[01:10:29] *** Quits: ouroboros (~ouroboros@user/ouroboros) (*.net *.split)
[01:10:29] *** Quits: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy) (*.net *.split)
[01:10:29] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[01:10:29] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[01:10:29] *** Quits: swistak (~swistak@185.21.216.141) (*.net *.split)
[01:10:29] *** Quits: noctuks (dzDZscEp9m@user/noctux) (*.net *.split)
[01:10:29] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (*.net *.split)
[01:10:29] *** Quits: elcaro (~anonymous@45.32.191.75) (*.net *.split)
[01:10:29] *** Quits: bsima (~bsima@2604:a880:400:d0::19f1:7001) (*.net *.split)
[01:10:29] *** Quits: Vq (~vq@90-227-195-41-no77.tbcn.telia.com) (*.net *.split)
[01:10:29] *** Quits: mrus (~mrus@149.28.224.172) (*.net *.split)
[01:10:30] *** Quits: wanko (~wanko@51.15.4.226) (*.net *.split)
[01:10:30] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[01:10:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (*.net *.split)
[01:10:30] *** Quits: alzgh (~alzgh@user/alzgh) (*.net *.split)
[01:10:30] *** Quits: Cajun (~Cajun@user/cajun) (*.net *.split)
[01:10:30] *** Quits: gehmehgeh (~user@user/gehmehgeh) (*.net *.split)
[01:10:30] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (*.net *.split)
[01:10:30] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (*.net *.split)
[01:10:30] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (*.net *.split)
[01:10:30] *** Quits: hololeap (~hololeap@user/hololeap) (*.net *.split)
[01:10:30] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (*.net *.split)
[01:10:30] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (*.net *.split)
[01:10:30] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (*.net *.split)
[01:10:30] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[01:10:30] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (*.net *.split)
[01:10:31] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:10:49] *** Joins: jbox (~jbox@2600:1700:2196:2060:75f5:b1ad:65ea:5c0a)
[01:12:52] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 264 seconds)
[01:13:51] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[01:14:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:14:23] *** Joins: hololeap (~hololeap@user/hololeap)
[01:14:23] *** Joins: favonia (~favonia@user/favonia)
[01:14:23] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[01:14:23] *** Joins: pavonia (~user@user/siracusa)
[01:14:23] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[01:14:23] *** Joins: eyJhb (~eyJhb@user/eyjhb)
[01:14:23] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[01:14:23] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[01:14:23] *** Joins: wrengr (~wrengr@34.133.83.34.bc.googleusercontent.com)
[01:14:23] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[01:14:23] *** Joins: lambdandy[m] (~lambdandy@2001:470:69fc:105::1:3045)
[01:14:23] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[01:14:23] *** Joins: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5)
[01:14:23] *** Joins: Tavi[m] (~factoidde@2001:470:69fc:105::1:819)
[01:14:23] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[01:14:23] *** Joins: Deewiant (~deewiant@2001:470:69fc:105::2fd3)
[01:14:23] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[01:14:23] *** Joins: alex[m]121 (~alexchete@2001:470:69fc:105::1:1001)
[01:14:23] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[01:14:23] *** Joins: moats (~oats@user/oats)
[01:14:23] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[01:14:23] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[01:14:23] *** Joins: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918)
[01:14:23] *** Joins: jinsun_ (~jinsun@user/jinsun)
[01:14:23] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[01:14:23] *** Joins: cosimone (~user@93-47-231-139.ip115.fastwebnet.it)
[01:14:23] *** Joins: juhp (~juhp@128.106.188.82)
[01:14:23] *** Joins: Guest|70 (~Guest|70@c-65-50-165-29.hs.gigamonster.net)
[01:14:23] *** Joins: max22- (~maxime@2a01cb0883359800172da6e8deefe185.ipv6.abo.wanadoo.fr)
[01:14:23] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:14:23] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c)
[01:14:23] *** Joins: jakalx (~jakalx@base.jakalx.net)
[01:14:23] *** Joins: alzgh (~alzgh@user/alzgh)
[01:14:23] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:14:23] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[01:14:23] *** Joins: justache (~justache@user/justache)
[01:14:23] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:14:23] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[01:14:23] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[01:14:23] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[01:14:23] *** Joins: zebrag (~chris@user/zebrag)
[01:14:23] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[01:14:23] *** Joins: kmein (~weechat@user/kmein)
[01:14:23] *** Joins: stefan-_ (~cri@42dots.de)
[01:14:23] *** Joins: slack1256 (~slack1256@191.126.99.210)
[01:14:23] *** Joins: ystael (~ystael@user/ystael)
[01:14:23] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[01:14:23] *** Joins: img (~img@user/img)
[01:14:23] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[01:14:23] *** Joins: Topsi (~Tobias@dyndsl-095-033-088-116.ewe-ip-backbone.de)
[01:14:23] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:14:23] *** Joins: Megant (~kaitsu@user/megant)
[01:14:23] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[01:14:23] *** Joins: cheater (~Username@user/cheater)
[01:14:23] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:14:23] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:14:23] *** Joins: arkeet (~arkeet@moriya.ca)
[01:14:23] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[01:14:23] *** Joins: machinedgod (~machinedg@24.105.81.50)
[01:14:23] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[01:14:23] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[01:14:23] *** Joins: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7)
[01:14:23] *** Joins: spoonm (spoonm@inaba.spoonm.org)
[01:14:23] *** Joins: auri (~quassel@fsf/member/auri)
[01:14:23] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[01:14:23] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[01:14:23] *** Joins: chronon (~chronon@user/chronon)
[01:14:23] *** Joins: Xe (~cadey@tailscale/xe)
[01:14:23] *** Joins: Ram-Z (~Ram-Z@li1814-254.members.linode.com)
[01:14:23] *** Joins: mstruebing (~maex@2001:41d0:8:93c7::1)
[01:14:23] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[01:14:23] *** Joins: lstor (~lstor@user/lstor)
[01:14:23] *** Joins: cigsender (~cigsender@74.124.58.162)
[01:14:23] *** Joins: enikar (~enikar@user/enikar)
[01:14:23] *** Joins: PHO` (~pho@akari.cielonegro.org)
[01:14:23] *** Joins: fluxit (~fluxit@techsmix.net)
[01:14:23] *** Joins: DigitalKiwi (~kiwi@192.241.157.119)
[01:14:23] *** Joins: sajith (~sajith@user/sajith)
[01:14:23] *** Joins: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962)
[01:14:23] *** Joins: zero (~z@user/zero)
[01:14:23] *** Joins: nonzen (~nonzen@user/nonzen)
[01:14:23] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[01:14:23] *** Joins: jrm (~jrm@156.34.187.65)
[01:14:23] *** Joins: dextaa (~DV@user/dextaa)
[01:14:23] *** Joins: _\_ (~o@user/ding)
[01:14:23] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[01:14:23] *** Joins: urdh (~urdh@user/urdh)
[01:14:23] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[01:14:23] *** Joins: AkechiShiro (~licht@2a01:e0a:5f9:9681:1473:3dff:fe42:56a9)
[01:14:23] *** Joins: noctux (~noctux@user/noctux)
[01:14:23] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[01:14:23] *** Joins: lieven (~mal@ns2.wyrd.be)
[01:14:23] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[01:14:23] *** Joins: mniip (mniip@libera/staff/mniip)
[01:14:23] *** Joins: akspecs__ (~akspecs@user/akspecs)
[01:14:23] *** Joins: meejah (~meejah@rutas.meejah.ca)
[01:14:23] *** Joins: choucavalier (~choucaval@peanutbuttervibes.com)
[01:14:23] *** Joins: Rembane (~Rembane@li346-36.members.linode.com)
[01:14:23] *** Joins: jeffz (~user@lambda.xen.prgmr.com)
[01:14:23] *** Joins: kaol_ (~kaol@94-237-42-30.nl-ams1.upcloud.host)
[01:14:23] *** Joins: landonf (landonf@mac68k.info)
[01:14:23] *** Joins: Hafydd (~Hafydd@user/hafydd)
[01:14:23] *** Joins: hubvu (sid495858@user/hubvu)
[01:14:23] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[01:14:23] *** Joins: xerxesphainon[m] (~artaxerxe@2001:470:69fc:105::f400)
[01:14:23] *** Joins: td_ (~td@94.134.91.97)
[01:14:23] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[01:14:23] *** Joins: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com)
[01:14:23] *** Joins: alx741 (~alx741@181.196.69.176)
[01:14:23] *** Joins: adium (adium@user/adium)
[01:14:23] *** Joins: vonfry (~user@116.236.75.238)
[01:14:23] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[01:14:23] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[01:14:23] *** Joins: n3t (n3t@user/n3t)
[01:14:23] *** Joins: nckx (~nckx@tobias.gr)
[01:14:23] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[01:14:23] *** Joins: sheb (~sheb@31.223.228.71)
[01:14:23] *** Joins: koz (~koz@121.99.240.58)
[01:14:23] *** Joins: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de)
[01:14:23] *** Joins: mcglk (~mcglk@131.191.49.120)
[01:14:23] *** Joins: benjamin[m]12 (~benjaminm@2001:470:69fc:105::1:3f2f)
[01:14:23] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[01:14:23] *** Joins: zaquest (~notzaques@5.130.79.72)
[01:14:23] *** Joins: davean (~davean@davean.sciesnet.net)
[01:14:23] *** Joins: yaroot (~yaroot@52.102.13.160.dy.iij4u.or.jp)
[01:14:23] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[01:14:23] *** Joins: nahcetan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[01:14:23] *** Joins: Jing (~hedgehog@125.105.11.101)
[01:14:23] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[01:14:23] *** Joins: jespada (~jespada@87.74.37.56)
[01:14:23] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[01:14:23] *** Joins: Cajun (~Cajun@user/cajun)
[01:14:23] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[01:14:23] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[01:14:23] *** Joins: SquidDev (~SquidDev@autoclave.squiddev.cc)
[01:14:23] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[01:14:23] *** Joins: Moyst_ (~moyst@user/moyst)
[01:14:23] *** Joins: xsperry (~xs@user/xsperry)
[01:14:23] *** Joins: _xor (~xor@72.49.199.147)
[01:14:23] *** Joins: lagash (lagash@lagash.shelltalk.net)
[01:14:23] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[01:14:23] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[01:14:23] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[01:14:23] *** Joins: smunix (~smunix@static.26.70.12.49.clients.your-server.de)
[01:14:23] *** Joins: drdo (~drdo@roach0.drdo.eu)
[01:14:23] *** Joins: ishutin (~ishutin@87-97-82-128.pool.digikabel.hu)
[01:14:23] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[01:14:23] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:14:23] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[01:14:23] *** Joins: matijja (~matijja@193.77.181.201)
[01:14:23] *** Joins: sudden (~cat@user/sudden)
[01:14:23] *** Joins: hook54321 (sid149355@user/hook54321)
[01:14:23] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[01:14:23] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[01:14:23] *** Joins: jmct_ (sid160793@id-160793.tinside.irccloud.com)
[01:14:23] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[01:14:23] *** Joins: mcfilib (sid302703@user/mcfilib)
[01:14:23] *** Joins: astra` (sid289983@user/amish)
[01:14:23] *** Joins: amir (sid22336@user/amir)
[01:14:23] *** Joins: obviyus (sid415299@user/obviyus)
[01:14:23] *** Joins: taktoa[c] (sid282096@id-282096.tinside.irccloud.com)
[01:14:23] *** Joins: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com)
[01:14:23] *** Joins: parseval (sid239098@id-239098.helmsley.irccloud.com)
[01:14:23] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[01:14:23] *** Joins: kristjansson_ (sid126207@id-126207.tinside.irccloud.com)
[01:14:23] *** Joins: dpratt__ (sid193493@id-193493.helmsley.irccloud.com)
[01:14:23] *** Joins: ehamberg (sid18208@id-18208.hampstead.irccloud.com)
[01:14:23] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[01:14:23] *** Joins: Adeon (sid418992@id-418992.lymington.irccloud.com)
[01:14:23] *** Joins: rune (sid21167@id-21167.ilkley.irccloud.com)
[01:14:23] *** Joins: grfn (sid449115@id-449115.helmsley.irccloud.com)
[01:14:23] *** Joins: tritlo (sid58727@user/tritlo)
[01:14:23] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[01:14:23] *** Joins: degraafk (sid71464@id-71464.lymington.irccloud.com)
[01:14:23] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[01:14:23] *** Joins: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl)
[01:14:23] *** Joins: son0p (~ff@181.136.122.143)
[01:14:23] *** Joins: EvanR (~evan@user/evanr)
[01:14:23] *** Joins: smorgasbord (buggy@user/smorgasbord)
[01:14:23] *** Joins: bsdbandit (~bwell@users.757.org)
[01:14:23] *** Joins: platz (~platz@user/platz)
[01:14:23] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[01:14:23] *** Joins: Square (~a@user/square)
[01:14:23] *** Joins: mht-wtf (~mht@mht.wtf)
[01:14:23] *** Joins: connrs (~connrs@user/connrs)
[01:14:23] *** Joins: ts2 (~ts@46.101.20.9)
[01:14:23] *** Joins: Igloo (~ian@matrix.chaos.earth.li)
[01:14:23] *** Joins: cjay- (cjay@nerdbox.nerd2nerd.org)
[01:14:23] *** Joins: Clint (~Clint@user/clint)
[01:14:23] *** Joins: ptrcmd (~ptrcmd@user/ptrcmd)
[01:14:23] *** Joins: sshine_ (~simon@hubris.eta.solutions)
[01:14:23] *** Joins: p3n (~p3n@217.198.124.246)
[01:14:23] *** Joins: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com)
[01:14:23] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[01:14:23] *** Joins: wagle (~wagle@quassel.wagle.io)
[01:14:23] *** Joins: forell (~forell@user/forell)
[01:14:23] *** Joins: puke (~puke@user/puke)
[01:14:23] *** Joins: zopsi_ (zopsi@2600:3c00::f03c:91ff:fe14:551f)
[01:14:23] *** Joins: dysfigured (~dfg@li490-89.members.linode.com)
[01:14:23] *** Joins: gabiruh_ (~gabiruh@vps19177.publiccloud.com.br)
[01:14:23] *** Joins: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at)
[01:14:23] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[01:14:23] *** Joins: cfebs (~cfebs@user/cfebs)
[01:14:23] *** Joins: ellie (~ellie@user/ellie)
[01:14:23] *** Joins: srk (~sorki@user/srk)
[01:14:23] *** Joins: sayola (~vekto@dslb-092-072-095-186.092.072.pools.vodafone-ip.de)
[01:14:23] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[01:14:23] *** Joins: remedan (~remedan@balak.me)
[01:14:23] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[01:14:23] *** Joins: gdd (~gdd@129.199.146.230)
[01:14:23] *** Joins: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net)
[01:14:23] *** Joins: gentauro (~gentauro@user/gentauro)
[01:14:23] *** Joins: martin02 (~silas@141.84.69.76)
[01:14:23] *** Joins: Unhammer (~Unhammer@user/unhammer)
[01:14:23] *** Joins: theproffesor (~theproffe@user/theproffesor)
[01:14:23] *** Joins: abraham (~abraham@143.244.185.86)
[01:14:23] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[01:14:23] *** Joins: vito (sid1962@user/vito)
[01:14:23] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[01:14:23] *** Joins: lechner (~lechner@debian/lechner)
[01:14:23] *** Joins: iteratee_ (~kyle@162.218.222.107)
[01:14:23] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[01:14:23] *** Joins: Flow (~none@gentoo/developer/flow)
[01:14:23] *** Joins: mrckndt (~mrckndt@user/mrckndt)
[01:14:23] *** Joins: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[01:14:23] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[01:14:23] *** Joins: carter (sid14827@id-14827.helmsley.irccloud.com)
[01:14:23] *** Joins: stilgart_ (~Christoph@chezlefab.net)
[01:14:23] *** Joins: a1paca_ (~a1paca@user/a1paca)
[01:14:23] *** Joins: raoul (~raoul@95.179.203.88)
[01:14:23] *** Joins: Firedancer (sid336191@id-336191.hampstead.irccloud.com)
[01:14:23] *** Joins: tafa (~tafa@user/tafa)
[01:14:23] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[01:14:23] *** Joins: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net)
[01:14:23] *** Joins: drewolson (~drewolson@user/drewolson)
[01:14:23] *** Joins: pippijn (~pippijn@ra.xinutec.org)
[01:14:23] *** Joins: SIben (~SIben@ns3106586.ip-5-135-191.eu)
[01:14:23] *** Joins: shane (~shane@ana.rch.ist)
[01:14:23] *** Joins: nf (~n@monade.li)
[01:14:23] *** Joins: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com)
[01:14:23] *** Joins: ridcully (~ridcully@p508ac9bf.dip0.t-ipconnect.de)
[01:14:23] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[01:14:23] *** Joins: aristid (sid1599@id-1599.uxbridge.irccloud.com)
[01:14:23] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[01:14:23] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[01:14:23] *** Joins: scav (sid309693@id-309693.helmsley.irccloud.com)
[01:14:23] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[01:14:23] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[01:14:23] *** Joins: idnar (sid12240@debian/mithrandi)
[01:14:23] *** Joins: teehemkay (sid14792@id-14792.lymington.irccloud.com)
[01:14:23] *** Joins: bw (sid2730@user/betawaffle)
[01:14:23] *** Joins: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com)
[01:14:23] *** Joins: sa1_ (sid7690@id-7690.ilkley.irccloud.com)
[01:14:23] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[01:14:23] *** Joins: typetetris (sid275937@id-275937.tinside.irccloud.com)
[01:14:23] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[01:14:23] *** Joins: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com)
[01:14:23] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[01:14:23] *** Joins: gonz_____ (sid304396@id-304396.lymington.irccloud.com)
[01:14:23] *** Joins: glowcoil (sid3405@id-3405.tinside.irccloud.com)
[01:14:23] *** Joins: ProofTechnique (sid79547@5.254.36.60)
[01:14:23] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[01:14:23] *** Joins: jackdk (sid373013@cssa/jackdk)
[01:14:23] *** Joins: sus (zero@user/zeromomentum)
[01:14:23] *** Joins: catern (~sbaugh@cpe-98-7-229-235.nyc.res.rr.com)
[01:14:23] *** Joins: gnyeki (~gnyeki@user/gnyeki)
[01:14:23] *** Joins: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f)
[01:14:23] *** Joins: T_S_ (sid501726@id-501726.uxbridge.irccloud.com)
[01:14:23] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[01:14:23] *** Joins: Philonous (~Philonous@user/philonous)
[01:14:23] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[01:14:23] *** Joins: sagax (~sagax_nb@user/sagax)
[01:14:23] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[01:14:23] *** Joins: christiaanb (sid84827@id-84827.lymington.irccloud.com)
[01:14:23] *** Joins: integral (sid296274@user/integral)
[01:14:23] *** Joins: aria (sid380617@lymington.irccloud.com)
[01:14:23] *** Joins: systemfault (sid267009@uxbridge.irccloud.com)
[01:14:23] *** Joins: truckasaurus (sid457088@helmsley.irccloud.com)
[01:14:23] *** Joins: jonrh (sid5185@ilkley.irccloud.com)
[01:14:23] *** Joins: gmc_ (sid58314@ilkley.irccloud.com)
[01:14:23] *** Joins: nrr__ (sid20938@lymington.irccloud.com)
[01:14:23] *** Joins: cln (sid336875@ilkley.irccloud.com)
[01:14:23] *** Joins: pepeiborra (sid443799@ilkley.irccloud.com)
[01:14:23] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[01:14:23] *** Joins: bbhoss (sid18216@tinside.irccloud.com)
[01:14:23] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[01:14:23] *** Joins: alinab (sid468903@helmsley.irccloud.com)
[01:14:23] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[01:14:23] *** Joins: tureba (~tureba@tureba.org)
[01:14:23] *** Joins: megaTherion (~therion@unix.io)
[01:14:23] *** Joins: robbert-vdh (~robbert@robbertvanderhelm.nl)
[01:14:23] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[01:14:23] *** Joins: blades (~blades@204.48.29.163)
[01:14:23] *** Joins: pierrot (~pi@user/pierrot)
[01:14:23] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[01:14:23] *** Joins: maerwald (~maerwald@user/maerwald)
[01:14:23] *** Joins: hexology (~hexology@user/hexology)
[01:14:23] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[01:14:23] *** Joins: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1)
[01:14:23] *** Joins: ddb (~ddb@ipv6two.tilde.club)
[01:14:23] *** Joins: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0)
[01:14:23] *** Joins: spider__ (~spider@vps-951ce37a.vps.ovh.ca)
[01:14:23] *** Joins: ozzloy (~ozzloy@ozzloy.lifeafterking.org)
[01:14:23] *** Joins: c_wraith (~c_wraith@adjoint.us)
[01:14:23] *** Joins: drlkf (~drlkf@2001:41d0:a:62bb::1)
[01:14:23] *** Joins: xerox (~edi@user/edi)
[01:14:23] *** Joins: kosmikus (~kosmikus@nullzig.kosmikus.org)
[01:14:23] *** Joins: bwe (~bwe@2a01:4f8:1c1c:4878::2)
[01:14:23] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[01:14:23] *** Joins: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec)
[01:14:23] *** Joins: xstill- (xstill@fimu/xstill)
[01:14:23] *** Joins: feliix42 (~felix@gibbs.uberspace.de)
[01:14:23] *** Joins: tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[01:14:23] *** Joins: haritz (~hrtz@user/haritz)
[01:14:23] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[01:14:23] *** Joins: jassob1 (~jassob@h-98-128-166-172.NA.cust.bahnhof.se)
[01:14:23] *** Joins: tired (~tired@user/tired)
[01:14:23] *** Joins: berberman (~berberman@user/berberman)
[01:14:23] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[01:14:23] *** Joins: Deide (~deide@user/deide)
[01:14:23] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[01:14:23] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[01:14:23] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[01:14:23] *** Joins: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da)
[01:14:23] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[01:14:23] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[01:14:23] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[01:14:23] *** Joins: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5)
[01:14:23] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[01:14:23] *** Joins: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70)
[01:14:23] *** Joins: the-coot[m] (~the-cootm@2001:470:69fc:105::95f)
[01:14:23] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[01:14:23] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[01:14:23] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[01:14:23] *** Joins: Tisoxin (~ikosit@user/ikosit)
[01:14:23] *** Joins: psydroid (~psydroid@user/psydroid)
[01:14:23] *** Joins: siraben (~siraben@user/siraben)
[01:14:23] *** Joins: sm (~sm@plaintextaccounting/sm)
[01:14:23] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[01:14:23] *** Joins: PotatoHatsue (~berberman@2001:470:69fc:105::b488)
[01:14:23] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[01:14:23] *** Joins: kadoban (~kadoban@user/kadoban)
[01:14:23] *** Joins: ServerStatsDisco (~serversta@2001:470:69fc:105::1a)
[01:14:23] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[01:14:23] *** Joins: meatfeather[m] (~meatfeath@2001:470:69fc:105::1:3311)
[01:14:23] *** Joins: thedward[m] (~thedwardm@2001:470:69fc:105::f79)
[01:14:23] *** Joins: utk (~utk@2001:470:69fc:105::1:2fe0)
[01:14:23] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[01:14:23] *** Joins: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb)
[01:14:23] *** Joins: acco[m] (~accotedom@2001:470:69fc:105::1:3236)
[01:14:23] *** Joins: sky_lounge[m] (~skylounge@2001:470:69fc:105::efa6)
[01:14:23] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[01:14:23] *** Joins: JoelMcCracken[m] (~joelmccra@2001:470:69fc:105::8405)
[01:14:23] *** Joins: jkachmar (~jkachmar@2001:470:69fc:105::c72d)
[01:14:23] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[01:14:23] *** Joins: xosdy[m] (~xosdyalet@2001:470:69fc:105::31f7)
[01:14:23] *** Joins: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b)
[01:14:23] *** Joins: kosmikus[m] (~andresloe@2001:470:69fc:105::95d)
[01:14:23] *** Joins: OndejSkup[m] (~mimivxmat@2001:470:69fc:105::c300)
[01:14:23] *** Joins: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42)
[01:14:23] *** Joins: ocramz[m] (~ocramzmat@2001:470:69fc:105::1:35b0)
[01:14:23] *** Joins: iammrinal0[m] (~iammrinal@2001:470:69fc:105::1:2248)
[01:14:23] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[01:14:23] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[01:14:23] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[01:14:23] *** Joins: anotherbruce[m] (~anotherbr@2001:470:69fc:105::1:2548)
[01:14:23] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[01:14:23] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[01:14:23] *** Joins: Movedtosridoneem (~sridmatri@2001:470:69fc:105::1c2)
[01:14:23] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[01:14:23] *** Joins: Drew[m] (~drewefenw@2001:470:69fc:105::c8c4)
[01:14:23] *** Joins: asdofindia-m (~akshaymat@2001:470:69fc:105::831)
[01:14:23] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[01:14:23] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[01:14:23] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[01:14:23] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[01:14:23] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[01:14:23] *** Joins: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d)
[01:14:23] *** Joins: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a)
[01:14:23] *** Joins: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54)
[01:14:23] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[01:14:23] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[01:14:23] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[01:14:23] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[01:14:23] *** Joins: chizil[m] (~chizilmat@2001:470:69fc:105::1:34ab)
[01:14:23] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[01:14:23] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[01:14:23] *** Joins: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8)
[01:14:23] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[01:14:23] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[01:14:23] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[01:14:23] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[01:14:23] *** Joins: gdhffd[m] (~gdhffdmat@2001:470:69fc:105::1:799)
[01:14:23] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[01:14:23] *** Joins: clever (~clever@99.192.114.98)
[01:14:23] *** Joins: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com)
[01:14:23] *** Joins: PigDude (~PigDude@159.203.16.199)
[01:14:23] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[01:14:23] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[01:14:23] *** Joins: barrucadu (~barrucadu@carcosa.barrucadu.co.uk)
[01:14:23] *** Joins: wolfshappen (~waff@irc.furworks.de)
[01:14:23] *** Joins: robertm (robertm@lattice.rojoma.com)
[01:14:23] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[01:14:23] *** Joins: edwtjo (~edwtjo@user/edwtjo)
[01:14:23] *** Joins: _________ (~nobody@user/noodly)
[01:14:23] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[01:14:23] *** Joins: Aleksejs (~Aleksejs@haskell.lv)
[01:14:23] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[01:14:23] *** Joins: litharge (litharge@libera/bot/litharge)
[01:14:23] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[01:14:23] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[01:14:23] *** Joins: dispater (~dispater@user/brprice)
[01:14:23] *** Joins: orcus (~orcus@user/brprice)
[01:14:23] *** Joins: Trattue (~Trattue@152.70.182.158)
[01:14:23] *** Joins: ChanServ (ChanServ@services.libera.chat)
[01:14:23] *** Joins: wanko (~wanko@51.15.4.226)
[01:14:23] *** Joins: mrus (~mrus@149.28.224.172)
[01:14:23] *** Joins: Vq (~vq@90-227-195-41-no77.tbcn.telia.com)
[01:14:23] *** Joins: bsima (~bsima@2604:a880:400:d0::19f1:7001)
[01:14:23] *** Joins: elcaro (~anonymous@45.32.191.75)
[01:14:23] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[01:14:23] *** strontium.libera.chat sets mode: +o ChanServ
[01:14:23] *** Joins: noctuks (dzDZscEp9m@user/noctux)
[01:14:23] *** Joins: swistak (~swistak@185.21.216.141)
[01:14:23] *** Joins: SoF (~skius@user/skius)
[01:14:23] *** Joins: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net)
[01:14:23] *** Joins: int-e (~noone@int-e.eu)
[01:14:23] *** Joins: byorgey (~byorgey@155.138.238.211)
[01:14:23] *** Joins: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com)
[01:14:23] *** Joins: kawpuh (~kawpuh@66.42.81.80)
[01:14:23] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[01:14:23] *** Joins: absence (~absence@hildring.pvv.ntnu.no)
[01:14:23] *** Joins: ggVGc (~ggVGc@a.lowtech.earth)
[01:14:23] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[01:14:23] *** Joins: root1 (root@2600:3c02::f03c:92ff:fe1a:c779)
[01:14:23] *** Joins: exarkun (~exarkun@user/exarkun)
[01:14:23] *** Joins: tristanC (~tristanC@user/tristanc)
[01:14:23] *** Joins: lisq (~quassel@lis.moe)
[01:14:23] *** Joins: tito (tito@tilde.team)
[01:14:23] *** Joins: relrod (~relrod@redhat/ansible.staff.relrod)
[01:14:23] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[01:14:23] *** Joins: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com)
[01:14:23] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[01:14:23] *** Joins: acro (~acro@user/acro)
[01:14:23] *** Joins: L29Ah (~L29Ah@wikipedia/L29Ah)
[01:14:23] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[01:14:23] *** Joins: w1gz (~do@159.89.11.133)
[01:14:23] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[01:14:23] *** Joins: jocke-l (jocke-l@a.x0.is)
[01:14:23] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[01:14:23] *** Joins: deni (~deni@user/deni)
[01:14:23] *** Joins: nshepperd2 (~nshepperd@li364-218.members.linode.com)
[01:14:23] *** Joins: df (~ben@justworks.xyz)
[01:14:23] *** Joins: hiato (~op_4@user/op-4/x-9116473)
[01:14:23] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[01:14:23] *** Joins: hexagoxel (~hexagoxel@2a01:4f8:c0c:e::2)
[01:14:23] *** Joins: jmtd (jon@dow.land)
[01:14:23] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[01:14:23] *** Joins: shachaf (~shachaf@user/shachaf)
[01:14:23] *** Joins: ajb (~ajb@cupid.whatbox.ca)
[01:14:23] *** Joins: statusfailed (~statusfai@statusfailed.com)
[01:14:23] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[01:14:23] *** Joins: dy (~dy@user/dy)
[01:14:23] *** Joins: guibou (~guibou@mail.fmap.fr)
[01:14:23] *** Joins: alp (~alp@mail.fmap.fr)
[01:14:23] *** Joins: feetwind (~mike@user/feetwind)
[01:14:23] *** Joins: juri_ (~juri@178.63.35.222)
[01:14:23] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[01:14:23] *** Joins: bah (~bah@l1.tel)
[01:14:23] *** Joins: polux (~polux@51.15.169.172)
[01:14:23] *** Joins: tomku (~tomku@user/tomku)
[01:14:23] *** Joins: reda_ (~reda@user/reda)
[01:14:23] *** Joins: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[01:14:23] *** Joins: ldlework (~hexeme@user/hexeme)
[01:14:23] *** Joins: edr (~edr@user/edr)
[01:14:23] *** Joins: canta (~canta@user/canta)
[01:14:23] *** Joins: biberu (~biberu@user/biberu)
[01:14:23] *** Joins: noddy (~user@user/noddy)
[01:14:23] *** Joins: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[01:14:23] *** Joins: andjjj23 (~irc@107.170.228.47)
[01:14:23] *** Joins: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es)
[01:14:23] *** Joins: AndrewYu (~andrew@user/andrewyu)
[01:14:23] *** Joins: opqdonut (opqdonut@pseudo.fixme.fi)
[01:14:23] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[01:14:23] *** Joins: nerdypepper (~nerdypepp@user/nerdypepper)
[01:14:23] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[01:14:23] *** Joins: riatre (~quassel@2001:310:6000:f::5198:1)
[01:14:23] *** Joins: APic (apic@apic.name)
[01:14:23] *** Joins: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg)
[01:14:23] *** Joins: seanparsons (~seanparso@cpc158525-gill21-2-0-cust151.20-1.cable.virginm.net)
[01:14:23] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[01:14:23] *** Joins: AWizzArd (~code@gehrels.uberspace.de)
[01:14:23] *** Joins: Ferdirand (~somebody@2001:4c78:2012:5000::2)
[01:14:23] *** Joins: samebchase (~thelounge@51.15.68.182)
[01:14:23] *** Joins: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy)
[01:14:23] *** Joins: oxytocat (~alloca@user/suppi)
[01:14:23] *** Joins: ringo__ (~ringo@157.230.117.128)
[01:14:23] *** Joins: ouroboros (~ouroboros@user/ouroboros)
[01:14:33] *** Quits: glider (~glider@user/glider) (Max SendQ exceeded)
[01:15:21] *** Joins: glider (~glider@user/glider)
[01:15:32] *** Quits: Topsi (~Tobias@dyndsl-095-033-088-116.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[01:15:48] *** Joins: Farzad (~FarzadBek@5.234.247.133)
[01:16:56] *** Quits: sunarch (uid526836@user/sunarch) (Ping timeout: 268 seconds)
[01:17:28] *** Joins: sunarch (uid526836@user/sunarch)
[01:19:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:19:42] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:20:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[01:21:00] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[01:27:27] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[01:35:52] *** Joins: poie (~poie@87.196.74.8)
[01:37:04] <poie> .
[01:37:13] *** Joins: Logio (em@kapsi.fi)
[01:39:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:40:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:41:41] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 252 seconds)
[01:43:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:44:04] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:44:12] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[01:44:45] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:45:49] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:45:56] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[01:46:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:47:29] <janus> DigitalKiwi: why do you wish he'd quit writing about crypto? i am happy somebody is speaking up
[01:48:12] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[01:48:36] <maerwald> Rembane: isn't that dead?
[01:49:10] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Client Quit)
[01:49:12] <janus> is what dead? purescript? no
[01:50:12] <DigitalKiwi> flow
[01:50:20] <Rembane> maerwald: Flow is dead, but it wasn't when Typescript was created
[01:50:40] <maerwald> ergonomics > properties
[01:50:58] <DigitalKiwi> good thing typescript was created then eh otherwise we'd have nothing ;D
[01:51:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[01:54:58] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:01:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:01:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:02:24] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[02:03:44] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Ping timeout: 265 seconds)
[02:04:41] *** Quits: poie (~poie@87.196.74.8) (Remote host closed the connection)
[02:07:28] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[02:10:25] <Axman6> janus: because a lot of his points are just wrong, and they are made in a pretty insulting way. He seems to have a particular hate for IOHK, who are one of the leaders in making crypto currency not need to boil the oceans to buy a bag of chips. he seems to have taken the stance that cryptocurrency is inherently evil and everyone should think it's bad, but really that's a difficult position to completely support
[02:11:52] *** Joins: xcmw (~textual@dyn-72-33-2-173.uwnet.wisc.edu)
[02:12:19] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[02:12:38] <janus> Axman6: i'd reply in #haskell-offtopic but it seems you're not there..
[02:14:35] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:14:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:16:18] <EvanR> for a minute I thought we were talking about cryptography oh well
[02:16:53] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Ping timeout: 252 seconds)
[02:17:17] <dsal> I'm too pedantic to call cryptocurrency "crypto"
[02:18:03] *** Quits: Farzad (~FarzadBek@5.234.247.133) (Quit: Leaving)
[02:19:35] <monochrom> No worries, I refuse to call web api "api", too. :)
[02:20:17] <EvanR> crypto by itself of course refers to the platonic ideal of all things with crypto as its prefix
[02:20:43] <dsal> monochrom: I have that problem, too, but I think I'm just slightly less pedantic there.
[02:20:55] <EvanR> anything greek necessarily does that
[02:22:03] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:22:21] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:22:33] *** Quits: xsperry (~xs@user/xsperry) ()
[02:22:56] <xcmw> Given a some representation of a String, what it is best way to apply a list of sorted non overlapping edits to a string where an edit has a start line, start col, end line, end col, and the new text for that range?
[02:23:29] <dsal> I'd start by adjusting my data structure to something nearer the thing you're trying to do.
[02:23:42] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:58c0:b83a:3eea:a1cf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:24:12] <xcmw> Do you mean the represent of the String or the edit?
[02:25:42] <dsal> Well, both.  A string doesn't have line numbers.
[02:25:58] <dsal> So at the very least, you'll want some kind of container of lines since that's the basic unit of your edit description.
[02:26:24] <EvanR> you're line editing? How about at least IntMap Line
[02:26:42] <EvanR> line number indexed set of Lines xD
[02:26:51] <dsal> The downside of that is that it gets weird when you delete lines.
[02:26:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[02:26:52] *** Quits: alx741 (~alx741@181.196.69.176) (Quit: alx741)
[02:26:57] <wz1000> xcmw: rope-utf16-splay might be what you are looking for. It gets used by the haskell lsp library to do something similar
[02:27:05] <EvanR> then it's not literally the line number
[02:27:08] <EvanR> it's just in order
[02:27:17] *** Quits: cosimone (~user@93-47-231-139.ip115.fastwebnet.it) (Remote host closed the connection)
[02:27:39] <dsal> Actually, doesn't the whole Map thing have a means of accessing things by position?
[02:27:48] <boxscape_> at that point I imagine a Seq makes more sense than an IntMap
[02:28:06] <xcmw> This is related to LSP's TextEdit so that may be what I need
[02:28:26] <dsal> :t M.elemAt
[02:28:27] *** Joins: alx741 (~alx741@181.196.69.176)
[02:28:27] <lambdabot> Int -> M.Map k a -> (k, a)
[02:28:42] <wz1000> ok, well there are implmentations for this in the lsp library
[02:29:02] <boxscape_> an IntMap gets especially awkward when you want to add lines
[02:29:12] <EvanR> ah
[02:29:26] <xcmw> I actually want to do this in Idris so it might a bit more difficult
[02:29:51] <dsal> I assume the line numbers were in 10s, so adding lines means you add, e.g. 15.  Solving the problem once and for all.
[02:30:18] <EvanR> "I don't often implement text editors, but when I do, I do it in Idris"
[02:30:20] <dsal> In any case, step one:  Figure out how to represent your data as lines.  Columns *may* be less of a pain, or worse.
[02:30:53] <monochrom> Ugh this brings back fond memories of BASIC and the "renumber" command.
[02:30:57] <xcmw> I'm not making a text editor, just working on an LSP server.
[02:31:45] <EvanR> clearly line numbers should be Rational
[02:31:48] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c) (Quit: gone to sleep. ZZZzzz…)
[02:32:50] <zero> can we easily create something like (IO "somestring") ?
[02:33:06] <EvanR> :k IO "somestring"
[02:33:07] <lambdabot> error:
[02:33:07] <lambdabot>     • Expected a type, but ‘"somestring"’ has kind ‘GHC.Types.Symbol’
[02:33:07] <lambdabot>     • In the first argument of ‘IO’, namely ‘"somestring"’
[02:33:15] <EvanR> :kk IO
[02:33:18] <EvanR> :k IO
[02:33:19] <lambdabot> * -> *
[02:33:31] <EvanR> "somestring" is not a *
[02:33:39] <monochrom> Is your  (IO "somestring") a type?  Is it a term?
[02:33:39] <geekosaur> % :set -XPolyKinds
[02:33:40] <Axman6> zero: what value has type "something"?
[02:33:41] <yahb> geekosaur: 
[02:33:47] <geekosaur> % :k IO
[02:33:47] <yahb> geekosaur: * -> *
[02:34:00] <Axman6> ?? :: "something"
[02:34:00] <lambdabot>  :: "something"
[02:34:07] <Axman6> o.O
[02:34:11] <zero> what?
[02:34:14] <EvanR> lol
[02:34:28] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 264 seconds)
[02:34:29] <EvanR> try again, what do you mean by IO "somestring"
[02:34:50] *** Joins: jeetelongname (~jeet@148.197.248.54)
[02:34:51] <zero> nvm, i was thinking badly
[02:34:51] <dsal> Wouldn't DataKinds work?
[02:35:17] <Axman6> "something" isn't a type level String though
[02:35:36] <zero> i'm so confused by that
[02:36:13] <xcmw> zero what are you actually trying to do?
[02:37:17] <Hecate> % :k "Hello"
[02:37:17] <yahb> Hecate: GHC.Types.Symbol
[02:37:20] <Hecate> % :k "Hello/32"
[02:37:20] <yahb> Hecate: GHC.Types.Symbol
[02:38:01] <xcmw> IO "somestring" doesn't mean anything
[02:38:10] <dsal> Surely it means something.
[02:38:26] <EvanR> not with that attitude
[02:38:47] <monochrom> Dead horse.
[02:39:01] <xcmw> zero do you want     pure "somestring"    ?
[02:39:23] <xcmw> or do you want    IO String    ?
[02:39:37] <jeetelongname> An IO Type is nothing but the potential for a certain type afik, there is nothing to unwrap as nothing has happened (yet)
[02:39:55] <xcmw> or are you trying to do something insane with types?
[02:42:42] *** Joins: xsperry (~xs@user/xsperry)
[02:43:17] <zero> i just needed pure
[02:43:56] <EvanR> :t pure "somestring"
[02:43:57] <lambdabot> Applicative f => f [Char]
[02:44:15] <EvanR> bollocks that didn't get clear anything up xD
[02:44:22] <EvanR> answer: IO String
[02:45:29] <zero> i was doing: do { x <- (smething :: IO String) ; ... pure r where r | null x = ... {{etcetera}} }
[02:47:43] *** Quits: jbox (~jbox@2600:1700:2196:2060:75f5:b1ad:65ea:5c0a) (Changing host)
[02:47:43] *** Joins: jbox (~jbox@user/jbox)
[02:48:23] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[02:50:53] <EvanR> variable naming question... you have IORefs holding your value. What do you call the ref variable
[02:51:15] <EvanR> what if you have multiple refs going on, what's the formula
[02:55:19] <monochrom> If there is only one, I use "v" for the ref, "x" for the value inside. This doesn't scale.
[02:56:09] <monochrom> Hrm let me find out what I did last time I had many of them.
[02:58:08] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[02:58:34] <jackdk> I usually stick an R on the end or an r at the beginning
[02:58:54] <jackdk> (similarly e/b/d when writing reflex-frp code dealing with Event/Behavior/Dynamic)
[02:59:02] <EvanR> sold
[02:59:48] <zero> can i use guards inside a do let?
[03:00:06] <xcmw> I'm not sure that using ropes or some better data structure helps since the string isn't persisted. I just want to apply a list of edits (sorted so it can be done it a single pass) to a file.
[03:00:18] <boxscape_> zero yes
[03:01:01] <zero> :)
[03:03:16] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (Ping timeout: 245 seconds)
[03:06:31] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3) (Remote host closed the connection)
[03:06:35] <xcmw> I was think about using a mealy machine or something similar.
[03:07:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:12:02] *** Joins: Lycurgus (~juan@98.4.112.204)
[03:12:44] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:58c0:b83a:3eea:a1cf)
[03:13:23] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[03:15:34] *** jeetelongname is now known as yeet
[03:18:02] *** Joins: Erutuon (~Erutuon@user/erutuon)
[03:18:56] *** yeet is now known as jeetelongname
[03:23:04] *** Quits: max22- (~maxime@2a01cb0883359800172da6e8deefe185.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:27:16] <wz1000> The rope just gives you an efficient way to split your input as lines. Otherwise you're going to have to iterate through the entire string to look for line boundaries after applying each edit
[03:30:41] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:34:45] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[03:35:04] *** Quits: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:35:21] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[03:35:28] *** Quits: matijja (~matijja@193.77.181.201) (Quit: ZNC 1.8.1 - https://znc.in)
[03:37:21] <EvanR> newtypes don't exist at runtime right, which means evaluating a newtype evaluates the contents right
[03:37:22] *** Joins: FragByte_ (~christian@user/fragbyte)
[03:37:32] *** Quits: FragByte (~christian@user/fragbyte) (Ping timeout: 268 seconds)
[03:37:50] *** FragByte_ is now known as FragByte
[03:38:08] <EvanR> evaluate :: a -> IO a
[03:38:14] *** Joins: matijja (~matijja@193.77.181.201)
[03:38:16] <monochrom> Yes.
[03:40:24] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[03:41:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[03:42:28] <xcmw> wz1000: the edits will be sorted so I can do all of the edits in one pass.
[03:43:30] <dsal> Unless you pre-merge all the edits, I'm not sure how much easier that'll make things.
[03:43:43] <xcmw> What does pre-merge mean?
[03:44:24] <xcmw> It isn't possible to merge two edits
[03:44:56] <xcmw> It is but I won't make sense to
[03:45:22] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3)
[03:46:53] <geekosaur> dsal, "non-overlapping" was part of the original question/spec
[03:47:00] <geekosaur> so merging won't make sense
[03:47:35] <xcmw> https://microsoft.github.io/language-server-protocol/specification#textEditArray
[03:48:03] <geekosaur> if it's going directly to output, this should be doable in a streaming fashion
[03:48:14] <xcmw> Yes
[03:49:01] <xcmw> What is the best way to go about that?
[03:49:01] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[03:49:09] <dsal> Oh, I missed that part.  The problem does sound a bit interesting.  One of the outputs of a patch application would need to renumber subsequent patches, right?
[03:49:34] <geekosaur> only if an edit can cause one line to become multiple, in this case
[03:49:57] <geekosaur> but that would make edits potentially overlapping so I'm assuming not
[03:50:11] <dsal> I'd think an edit could remove or add lines.
[03:50:21] <xcmw> All the positions are positions in the original file
[03:50:44] <geekosaur> that would be harder if the edits aren't one-for-one replacements
[03:51:07] <geekosaur> now you have to track what the position would have been without earlier edits
[03:51:22] <xcmw> The positions can be easily handled by making every position relative to previous one
[03:51:23] <geekosaur> instead of just streaming it as you go
[03:52:03] <xcmw> I think that would make it so you can still stream
[03:52:28] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[03:55:01] <awpr> if they're sorted and non-overlapping, there's no need to apply each one successively to the whole file; I expect you can progress through both the file and the edits jointly keeping track of the position.  the problem of line/column numbers being broken by past edits only exists if you start over from the beginning of the file for each edit
[03:55:20] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[03:55:27] <xcmw> Yes
[03:55:54] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c)
[03:55:55] <awpr> the other trick I've heard of for applying patches like this is to work in reverse: file positions don't change when you update things _after_ them
[03:56:05] <awpr> but that's probably more applicable to mutable, imperative data structures
[03:56:26] *** Quits: dawdler (~dawdler@user/dawdler) (Ping timeout: 256 seconds)
[03:57:25] <xcmw> No need to reverse anything
[03:58:02] <jeetelongname> :t ***
[03:58:04] <lambdabot> error: parse error on input ‘***’
[03:58:10] <jeetelongname> :t (***)
[03:58:11] <lambdabot> Arrow a => a b c -> a b' c' -> a (b, b') (c, c')
[03:58:28] <xcmw> So should I use a state monad? Or is there some better more functional way do it?
[03:59:31] *** Joins: wroathe (~wroathe@user/wroathe)
[04:00:00] *** Joins: slac11392 (~slack1256@191.125.99.65)
[04:00:17] *** Quits: jeetelongname (~jeet@148.197.248.54) (Remote host closed the connection)
[04:01:43] *** Quits: slack1256 (~slack1256@191.126.99.210) (Read error: Connection reset by peer)
[04:02:01] <awpr> `State` seems reasonable enough to me, at least.  `mapAccumL` is similar to `traverse`ing with `State`, too, if you prefer that sort of thing
[04:02:40] *** Quits: jkaye (~jkaye@2601:281:8300:7530:7309:f677:c771:6123) (Ping timeout: 264 seconds)
[04:03:21] *** Joins: dawdler (~dawdler@user/dawdler)
[04:03:28] <awpr> supposing you have the input as `Text`, maybe split it with `Data.Text.lines`, use `mapAccumL` over those consuming edits as long as they're on the current line, and use some manual recursion with `splitAt` to do each edit within the line?
[04:04:03] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[04:04:41] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[04:05:08] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[04:07:50] <EvanR> are you reading the whole file in as a chunk of Text
[04:08:07] <EvanR> or trying to stream it
[04:08:50] <EvanR> with Lazy Text perhaps
[04:08:51] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[04:10:18] <xcmw> Currently I am loading the file as chunk of Text but that might change.
[04:11:55] <xcmw> It may end up being List Text instead
[04:12:21] <EvanR> that's effectively what lazy text is
[04:12:30] <EvanR> just hidden
[04:14:25] <xcmw> The whole file will be read into memory (for other reasons) before this code runs so lazyness won't matter
[04:14:59] <awpr> "lazy Text" is a different type from from "Text" -- effectively `newtype LazyText = LazyText [Text]`
[04:15:03] <EvanR> ok. Though once it is in memory, laziness will still potentially matter as you write the output incrementally
[04:15:34] <EvanR> I was just curious about the loading par
[04:15:43] <awpr> along with a whole polished API for dealing with it as one long sequence of characters, so you don't have to think about the list aspect separately
[04:15:52] <xcmw> I am actually writing this in Idris so the details of Haskell's Text doesn't matter
[04:16:28] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[04:16:30] <EvanR> that's so annoying xD
[04:16:51] <EvanR> a lot of details of a lot of haskell don't matter in that case xD
[04:17:01] <awpr> seems like a good thing to mention early on.  I'm not sure I really understand what the overall question is, then
[04:17:39] <xcmw> I did mention it was in Idris earlier
[04:17:45] <EvanR> yeah I forgot lol
[04:18:21] <awpr> oh yeah, that is way up there in scrollback
[04:20:12] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[04:20:35] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:21:07] <xcmw> I think I will go with List Text with State, and splitAt if I can't think of anything more functional
[04:21:35] <EvanR> like, in idris, String is what Text is called right xD
[04:21:41] <xcmw> Yes
[04:21:47] <EvanR> which in retrospect, would be nice
[04:22:34] <awpr> the point of `splitAt` in what I wrote earlier was to take advantage of a fast implementation to skip straight to the next edit, instead of scanning over each character doing `0+1+1+1+1+1+1+...` until you reach the desired position
[04:23:42] <xcmw> The number of characters on a line is likely to be small so it won't matter.
[04:24:40] <EvanR> and that's why notepad.exe freezes up on some files xD
[04:25:07] <awpr> sure, if you don't care about the potential performance hit of visiting each character individually, then one giant `mapAccumL` can probably do it, with the accumulator being both the input file position (increasing) and the pending edits (being incrementally consumed)
[04:25:35] <awpr> assuming the string API has a `mapAccumL`, or a `traverse` that can be used with `State`
[04:26:02] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[04:28:07] <xcmw> I don't know how efficient Idris's splitAt is
[04:28:53] <EvanR> At least in older versions, even though strings are implemented as a buffer of chars
[04:29:32] <EvanR> all the support code for it operated on it as if it was [Char] and could only cons and uncons from the beginning. Reallocating everything if necessary xD
[04:30:03] <EvanR> splitAt would have been implemented in type safe code
[04:31:46] <xcmw> Idris just has drop and take
[04:31:48] <awpr> yeah, I don't even see an implementation of that or take/drop on GitHub.  if it exists, it may or may not be faster in practice, but the point is it has the opportunity to be faster
[04:32:21] <xcmw> I think Idris complied with the chez backend use code points
[04:33:05] <xcmw> Which likely means that it has to go character by character anyways.
[04:33:14] <xcmw> https://github.com/idris-lang/Idris2/blob/523c0a6d7823d2b9a614d4a30efb52da015f9367/src/Libraries/Data/String/Extra.idr#L51
[04:33:56] <xcmw> take and drop are in Extra. They both call substr which is a primitve.
[04:34:36] <EvanR> ah prim__strSubstr
[04:34:39] <EvanR> cool stuff
[04:34:53] *** Joins: ouro_boros (~ouroboros@2804:14c:65e4:93f6::1001)
[04:35:02] <dsal> I've never seen a substr I could use without the documentation open.
[04:35:26] *** Joins: pgib (~textual@173.38.117.87)
[04:35:45] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[04:35:51] <EvanR> substr : (index : Nat) -> (len : Nat) -> (subject : String) -> String
[04:35:55] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[04:35:57] <EvanR> docs xD
[04:35:57] <awpr> yeah, Text uses a variable length encoding too and can't do constant-time splitting.  but a hand-written FFI implementation of `splitAt` peeking at bits in a loop would certainly be faster than code that calls a higher-order function to visit each character and add 1 to a counter.
[04:36:41] <awpr> since `substr` is implemented by a primitive, it's probably a reasonably fast implementation
[04:37:13] <EvanR> yes but Nat is a list xD
[04:37:25] <EvanR> first it needs to fold that to an int
[04:38:08] <xcmw> Well it depends on the backend. String length in RefC, JS, and Chez are all different.
[04:38:52] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[04:39:54] <xcmw> I wonder if I could use something like parser combinators to do this in a functional way.
[04:40:09] <EvanR> hell yeah
[04:41:45] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Remote host closed the connection)
[04:41:46] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:50] <EvanR> the remainder of the file is like the parser context
[04:42:15] <EvanR> how much is split off depends on the edit
[04:45:51] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:46:35] <EvanR> a section that is not edited would be returned to you as is
[04:47:54] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:49:03] *** Joins: hololeap (~hololeap@user/hololeap)
[04:50:29] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:51:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[04:55:22] *** Quits: nautical (~nautical@2601:602:900:1630::396f) (Quit: WeeChat 3.3)
[04:57:24] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[04:58:15] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:02:01] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e72fcf154b5eecf3df6.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:03:28] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:58c0:b83a:3eea:a1cf) (Quit: Textual IRC Client: www.textualapp.com)
[05:04:34] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:07:38] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:07:38] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:07:38] *** Joins: wroathe (~wroathe@user/wroathe)
[05:11:26] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:12:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:13:22] *** Joins: Erutuon (~Erutuon@user/erutuon)
[05:16:09] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:17:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:17:16] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:17:16] *** Joins: wroathe (~wroathe@user/wroathe)
[05:17:27] *** hexology is now known as hexology_
[05:17:51] *** hexology_ is now known as hexology__
[05:18:03] *** Quits: Feuermagier_ (~Feuermagi@154.28.188.22) (Ping timeout: 268 seconds)
[05:18:08] *** hexology__ is now known as hexology`
[05:18:12] *** hexology` is now known as hexology_`
[05:18:23] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 252 seconds)
[05:18:51] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[05:18:57] *** hexology_` is now known as hexology
[05:23:54] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[05:33:54] <zero> i there a more alegant way to write this? https://paste.jrvieira.com/1638237824452
[05:37:10] <EvanR> honestly it looks good to me
[05:37:41] <dibblego> let z = x <|> y
[05:37:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:38:05] <EvanR> oh didn't see two x there
[05:38:20] <c_wraith> that... doesn't work
[05:38:56] <dibblego> oh yeah, wtf
[05:39:10] <c_wraith> I don't think there's an easy way to do that
[05:39:35] <c_wraith> You can have some sort of mess of newtype wrapping and unwrapping that will get you there, but it's not better than the if/then/else
[05:40:22] <boxscape_> :t \someIO y -> flip bool y <*> null =<< someIO -- arguably could be called elegant, but not a good idea
[05:40:23] <lambdabot> (Monad m, Foldable m) => m (m b) -> m b -> m b
[05:40:26] <dibblego> sorry was thinking of a different "base" library
[05:41:23] <c_wraith> boxscape_: that doesn't look right either.  that m (m b) seems wrong.
[05:41:30] <boxscape_> erm
[05:42:09] <EvanR> yeesh
[05:42:37] <EvanR> no, zero didn't ask for ways to make it worse xD
[05:42:50] <boxscape_> c_wraith I think that's because there's no return in front of the if statement in the paste
[05:43:18] <c_wraith> boxscape_: well, it's an incomplete do block
[05:43:25] <boxscape_> :t \someIO y -> someIO >>= \x -> bool x y (null x) -- AFAICT the same as the paste, and same type
[05:43:26] <lambdabot> (Monad m, Foldable m) => m (m b) -> m b -> m b
[05:43:34] <dibblego> don't think so
[05:44:39] <boxscape_> :t \someIO y -> do {x <- someIO; if null x then y else x}
[05:44:40] <lambdabot> (Monad m, Foldable m) => m (m b) -> m b -> m b
[05:44:42] <EvanR> zero, if you want a combinator that replaces empty list with something, you could write it separately
[05:44:46] <EvanR> but it looks fine as is
[05:45:08] <c_wraith> boxscape_: right, you're making the result of the if the result of the block, but that's not what the paste does
[05:45:27] <c_wraith> boxscape_: the paste uses a let to bind the result of the if for further use in the block
[05:45:46] <boxscape_> c_wraith I was looking at an old version of the paste
[05:46:20] <boxscape_> (allowing the contents of a paste URL to change seems an odd design choice)
[05:47:12] <jackdk> :t \someIO y -> fromMaybe y . view (from (anon [] null)) <$> someIO
[05:47:13] <lambdabot> Functor f => f [a] -> [a] -> f [a]
[05:48:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:52:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[05:56:16] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[05:57:54] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[05:58:26] *** Quits: mmhat (~mmh@55d431d8.access.ecotel.net) (Quit: WeeChat 3.3)
[06:02:51] <zero> thanks everyone! it' pretty clear i should leave it as is :)
[06:05:04] *** Quits: xff0x (~xff0x@2001:1a81:527f:8300:4a2b:7ccd:5352:f2b5) (Ping timeout: 264 seconds)
[06:05:51] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[06:05:55] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[06:06:27] <jackdk> While not literally what you asked for, parsing it into a Maybe (NonEmpty a) might be nicer
[06:06:27] *** Joins: xff0x (~xff0x@2001:1a81:52c5:f300:1fcf:1bc6:be0c:348e)
[06:10:38] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[06:12:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[06:12:50] <Square> Im exploring a bit here. I feel this example couldve worked, but it doesnt. Someone know if there is a way to make a type family work just as a parameterized type / a type function of one argument? https://paste.tomsmeding.com/ZQL8kHP6 
[06:14:50] <boxscape_> Can you encode a quote in a template haskell expression? I.e. [qq| foo |] would be encoded something like `QuoteQ "qq" (UnboundVarE "foo")`?
[06:14:58] <boxscape_> at first glance I'm not seeing anything allowing this
[06:15:01] <lyxia> no
[06:15:05] <boxscape_> okay, thanks
[06:15:13] <boxscape_> (I was secretly hoping that it's impossible, makes my life easier)
[06:15:44] <lyxia> Square: keyword is defunctionalization, the stuff first-class-families and singletons are made of
[06:16:31] <Square> lyxia, ok. Thanks, ill google that
[06:16:51] <Cajun> first class families are very fun, singletons seem scary
[06:16:56] <boxscape_> Square https://typesandkinds.wordpress.com/2013/04/01/defunctionalization-for-the-win/
[06:17:04] <lyxia> also this but it's not implemented https://www.microsoft.com/en-us/research/uploads/prod/2019/03/unsaturated-type-families-icfp-2019.pdf
[06:17:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:17:20] <lyxia> rather, not in GHC yet
[06:17:40] <Cajun> isnt there something about dependent haskell allowing for unsaturated type families?
[06:18:13] <lyxia> yes it will have to figure that out
[06:18:18] <boxscape_> Cajun yes, the paper lyxia linked is very much in line with dependent haskell
[06:18:36] <boxscape_> "in line" as in "a stepping stone towards"
[06:19:04] <Square> Are you guys saying this isnt something possible in now (im on ghc 8.6) or that it might be possible in the future? 
[06:19:17] <Square> -in
[06:20:09] <boxscape_> Square defunctionalization is possible now, but a bit annoying. Native unsaturated type families are only implemented in an experimental branch, and not currently accepted as coming into GHC, though they likely will at some point
[06:20:36] <Square> boxscape_, thanks
[06:37:10] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[06:37:59] *** Joins: jkaye (~jkaye@2601:281:8300:7530:a6c:9e86:10cd:6e96)
[06:40:35] <lyxia> Square: what your example would look like with fcf https://paste.tomsmeding.com/EPUcybwS
[06:41:13] *** Joins: iqubic (~user@2601:602:9502:c70:6765:a5f:e5b9:6c69)
[06:46:23] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 252 seconds)
[06:48:45] <iqubic> How many people here are doing Advent Of Code this year?
[06:49:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[06:50:25] <zero> me me me
[06:53:06] <iqubic> Nice!
[06:54:53] *** Quits: td_ (~td@94.134.91.97) (Ping timeout: 268 seconds)
[06:56:04] *** Joins: td_ (~td@muedsl-82-207-238-126.citykom.de)
[06:56:18] <boxscape_> I'm planning to do AoC
[06:57:13] <iqubic> Do you know if there's an IRC channel for discussing the event?
[06:59:12] <boxscape_> oh, right, the libera switch hadn't happened yet last time
[06:59:15] <boxscape_> I'm not aware of a channel
[06:59:34] <dsal> I see the same three channels as last year.
[06:59:47] *** Joins: namkeleser (~namkelese@101.175.102.188)
[06:59:58] <boxscape_> which are those?
[07:00:17] <dsal> #adventofcode #adventofcode-help #adventofcode-spoilers
[07:00:17] <boxscape_> ah, #adventofcode in one word
[07:00:21] <boxscape_> I tried dashes before
[07:00:28] <boxscape_> thanks
[07:00:50] <iqubic> And I tried two hashes because that's what it last year on the old server.
[07:04:26] *** Joins: hiruji (~hiruji@user/hiruji)
[07:05:20] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[07:06:00] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[07:06:00] *** Joins: hololeap_ (~hololeap@user/hololeap)
[07:07:27] *** Joins: fluffyballoon (~user@131.93.208.196)
[07:07:27] *** Quits: fluffyballoon (~user@131.93.208.196) (Read error: Connection reset by peer)
[07:07:49] *** Joins: nickdaly` (~user@131.93.208.196)
[07:08:34] <iqubic> Alright... so, Emacs' LSP mode has been working quite well for me, for the past while. But something seems to have updated and now it doesn't work anymore.
[07:10:08] <iqubic> No 'hie.yaml' found. Try to discover the project type!
[07:10:48] <dsal> I've never had it work.  Sounds like it might be pretty cool.  heh
[07:11:26] *** Joins: deadmarshal (~deadmarsh@95.38.228.153)
[07:11:32] *** Quits: jbox (~jbox@user/jbox) (Read error: Connection reset by peer)
[07:11:38] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:12:00] *** Joins: mbuf (~Shakthi@122.174.165.234)
[07:12:27] <iqubic> It is cool, when it works.
[07:12:28] <iqubic> haskell-language-server-wrapper: : changeWorkingDirectory: does not exist (No such file or directory)
[07:12:35] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[07:12:36] <iqubic> But something is wrong here and it isn't working.
[07:13:35] *** Quits: Guest|70 (~Guest|70@c-65-50-165-29.hs.gigamonster.net) (Ping timeout: 256 seconds)
[07:15:16] *** Quits: jkaye (~jkaye@2601:281:8300:7530:a6c:9e86:10cd:6e96) (Ping timeout: 264 seconds)
[07:17:44] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[07:18:33] *** Quits: nickdaly` (~user@131.93.208.196) (Quit: ERC (IRC client for Emacs 27.1))
[07:18:51] *** Joins: nickdaly` (~user@131.93.208.196)
[07:18:58] *** Quits: nickdaly` (~user@131.93.208.196) (Remote host closed the connection)
[07:22:39] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[07:24:59] *** Joins: nickdaly` (~user@131.93.208.196)
[07:27:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[07:27:31] *** Joins: nickdaly (45ce440a48@2604:bf00:561:2000::e2)
[07:27:45] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:30:09] *** Joins: concrete-houses (~g@209.6.150.53)
[07:30:19] *** Parts: nickdaly` (~user@131.93.208.196) (ERC (IRC client for Emacs 27.1))
[07:30:56] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[07:31:28] <concrete-houses> can haskell do nice business reports and big data? what about AI?  happstack.com looks impressive, but can it work bahind a load balancer? or does it even need to? it is better to have sperate data on sepaerate boxes?
[07:32:17] <concrete-houses> is there any haskell bittorrent client? something like qbittorrent?
[07:32:20] <dsal> Haskell is a programming language.
[07:32:48] <concrete-houses> I have little programming experience
[07:32:54] <concrete-houses> some shell some sql
[07:33:03] <concrete-houses> bit of tcl forth lisp
[07:33:27] <dsal> @hoogle torrent
[07:33:27] <lambdabot> package torrent
[07:33:27] <lambdabot> Distribution.SPDX BitTorrent_1_0 :: LicenseId
[07:33:27] <lambdabot> Distribution.SPDX BitTorrent_1_1 :: LicenseId
[07:33:35] <dsal> That's not very useful.
[07:33:38] <dsal> @hackage torrent
[07:33:38] <lambdabot> https://hackage.haskell.org/package/torrent
[07:34:11] *** Joins: Lycurgus (~juan@98.4.112.204)
[07:35:40] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[07:36:41] <concrete-houses> hmmm
[07:40:17] *** Quits: deadmarshal (~deadmarsh@95.38.228.153) (Ping timeout: 252 seconds)
[07:42:54] <EvanR> yeah what do you think haskell actually is here
[07:44:04] <EvanR> for the first few buzzwords you'd want some premium product that may possibly be written in haskell
[07:45:52] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 264 seconds)
[07:46:55] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[07:57:57] <monochrom> In retrospect, people don't go to a community of Japanese language speakers and learned to ask "can you write bestsellers and blockbusters in Japanese?".  Of course you can.
[07:58:16] <monochrom> s/learned/learners/
[08:00:46] *** Quits: iqubic (~user@2601:602:9502:c70:6765:a5f:e5b9:6c69) (Remote host closed the connection)
[08:06:36] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[08:07:40] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[08:08:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:11:05] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[08:11:49] <Square> lyxia, walked away a bit here. Thanks a bunch for your converted example. I feel im on new journey here. =D
[08:11:57] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[08:12:20] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[08:15:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[08:15:59] *** Joins: iqubic (~user@2601:602:9502:c70:6765:a5f:e5b9:6c69)
[08:16:46] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:17:19] <arahael> concrete-houses: That depends rather much on whether a business report can be nice, and wether AI is an oxymoron. :)
[08:18:14] *** Quits: slac11392 (~slack1256@191.125.99.65) (Ping timeout: 252 seconds)
[08:18:27] *** Joins: deadmarshal (~deadmarsh@95.38.228.153)
[08:18:47] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[08:20:28] *** Joins: LittleLemon (~AdiIRC@170.55.34.132)
[08:21:28] <zero> i cant't have guards in let bindings inside of a do block?
[08:21:52] <Square> lyxia, i noticed MyClz isnt part of it. Can this be done with class level type families too? 
[08:22:47] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:23:11] *** Quits: deadmarshal (~deadmarsh@95.38.228.153) (Ping timeout: 252 seconds)
[08:24:46] <Square> maybe non-class and class type families are just different ways of writing the same thing?
[08:24:50] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[08:25:15] <dsal> zero: Why not?  What have you tried?
[08:26:20] <Axman6> concrete-houses: to expand on what otyhers said above, Haskell can do all of those things, but so can pretty much any programming language. Languages aren't systems, which seems to be what you're describing. most of those things have been built in Haskell before, but whether it's the best choice for any of them depends on many, many factors.
[08:30:59] <zero> dsal: https://paste.jrvieira.com/1638248446308
[08:31:44] <zero> i'm getting a parse error on '|' on line 9
[08:31:54] *** Joins: deadmarshal (~deadmarsh@95.38.228.153)
[08:34:55] <dsal> zero: indent harder
[08:35:49] <zero> what?
[08:36:29] <dsal> zero:  https://www.irccloud.com/pastebin/1pEdvWox/zero.hs
[08:38:33] <zero> i don't get that
[08:39:17] <zero> why can't i do it the other way?
[08:39:23] <dsal> Because indentation matters.
[08:40:28] <dsal> As you can see, I used one `let` keywords for all the bindings because the indentation makes them all be the same statement.  If you don't indent it correctly, it can't tell that those guards are meant to be part of that function.
[08:42:08] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[08:42:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[08:44:04] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[08:44:27] <concrete-houses> how can I make a lot of money programming?
[08:45:12] <dsal> Make an NFT and scam people with it.
[08:46:53] <jle`> no programming required :)
[08:47:07] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Remote host closed the connection)
[08:47:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:47:08] <arahael> You find a job posting that requires programming, and early a salary.
[08:50:10] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[08:59:33] *** Quits: concrete-houses (~g@209.6.150.53) (Ping timeout: 256 seconds)
[09:01:06] *** Joins: concrete-houses (~g@209.6.150.53)
[09:01:25] *** Quits: puke (~puke@user/puke) (Quit: puke)
[09:02:43] *** Joins: reumeth (~reumeth@user/reumeth)
[09:04:56] *** Joins: fr33domlover (~fr33@2.53.150.205)
[09:04:56] *** Joins: nrl^ (~nrl@68.101.58.90)
[09:08:15] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[09:08:36] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[09:09:20] *** Joins: vonfry` (~user@116.236.75.238)
[09:09:43] *** Parts: vonfry` (~user@116.236.75.238) ()
[09:10:21] *** Quits: vonfry (~user@116.236.75.238) (Ping timeout: 245 seconds)
[09:11:01] <zero> dsal: i now see what you mean, thanks
[09:11:06] *** Joins: mario_ (~mario@31.147.205.13)
[09:11:26] <zero> i wasn't mentally desugaring it
[09:13:57] *** Quits: mario_ (~mario@31.147.205.13) (Client Quit)
[09:14:55] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:18:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[09:19:33] <EvanR> Axman6, re what haskell can and can't do: sounds like a job for lambdabot's old command xD
[09:20:04] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 264 seconds)
[09:21:28] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[09:21:48] <dsal> @undo do ()
[09:21:48] <lambdabot> ()
[09:21:55] <dsal> lambdabot cannot do, lambdabot can only undo
[09:22:15] <jle`> lambdabot, the great undo-er
[09:22:15] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[09:30:00] <EvanR> @botsnack Lambdabot can you do :)
[09:30:00] <lambdabot> :)
[09:30:23] <EvanR> ooooooooh
[09:39:58] <jle`> @undo do do do do ()
[09:39:58] <lambdabot> ()
[09:40:07] <jackdk> @botsnack
[09:40:07] <lambdabot> :)
[09:40:19] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[09:41:15] <dsal> @undo do do   do do   do do    do do     do do    do do    do do    do do    "UNDO"
[09:41:15] <lambdabot> "UNDO"
[09:41:42] <jle`> do or undo
[09:41:44] <jle`> there is no @try
[09:42:03] <jle`> @try
[09:42:03] <lambdabot> Maybe you meant: url thx src rc arr
[09:42:14] <dsal> lambdabot is the hero we deserve
[09:42:19] <jle`> @thx
[09:42:19] <lambdabot> you are welcome
[09:44:13] <Axman6> EvanR: yeah, what was that again?
[09:44:46] <Axman6> lambdabot: Can Haskell make me a millionaire?
[09:44:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[09:44:56] <EvanR> @faq Can Haskell make me a millionaire
[09:44:56] <lambdabot> https://wiki.haskell.org/FAQ
[09:45:15] <EvanR> in previous lifetimes it would say
[09:45:23] <EvanR> Yes! Haskell can! or something
[09:45:40] <Axman6> yeah, I remember that, NFI what command it was though
[09:45:46] <Axman6> @can Haskell do that?
[09:45:46] <lambdabot> Maybe you meant: wn run faq
[09:45:56] <EvanR> faq I think lol
[09:46:49] *** Quits: LittleLemon (~AdiIRC@170.55.34.132) (Quit: Going offline, see ya! (www.adiirc.com))
[09:46:52] *** Joins: alzgh (~alzgh@user/alzgh)
[09:47:26] *** Joins: xkuru (~xkuru@user/xkuru)
[09:47:29] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[09:48:40] <EvanR> it could be it's only crime was taking up a valuable command name
[09:49:18] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[09:49:46] <jle`> i think maybe the issue was people kept on believing it
[09:49:52] <sm> @where can haskell do that ?
[09:49:53] <lambdabot> Yes, it can!
[09:50:05] <jle`> got to temper expectations
[09:51:02] <EvanR> jle`, got any war stories to put some meat on the bones of your cold water? xD
[09:51:44] *** Quits: xff0x (~xff0x@2001:1a81:52c5:f300:1fcf:1bc6:be0c:348e) (Ping timeout: 252 seconds)
[09:52:39] *** Joins: xff0x (~xff0x@2001:1a81:52c5:f300:a883:120f:33bf:e74b)
[09:52:58] <EvanR> always interesting to hear about difficulties with IRL haskell
[09:53:30] <jle`> ah you mean since i've been actually using haskell for a full time job the past year and a half
[09:53:55] <EvanR> of course? I mean of course!
[09:54:01] <jle`> :)
[09:54:19] <jle`> honestly no horror stories really. even when you write spaghetti code with haskell it's fun to clean up
[09:55:12] <jle`> some of the issues you run into with small projects (like monad transformers vs mtl style etc) really just get scaled linearly i think, no major second order effects i've seen so far :)
[09:57:14] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[10:02:24] * xerxesphainon[m] uploaded an image: (682KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/pZkiixrFoRBTAhBfGnDIviTK/image.png >
[10:02:43] <xerxesphainon[m]> why is art valued so highly among humans on earth?
[10:03:25] <xerxesphainon[m]> in order from least to greatest. what rank would you asign the following?: Drawung, Acting, Music, Philosophy, Science. 
[10:03:32] <xerxesphainon[m]> 1-5
[10:03:38] <xerxesphainon[m]> 1 being minimum value
[10:03:59] <EvanR> dropping a serious profoundness bomb out of nowhere
[10:04:06] <xerxesphainon[m]> *con{ 1=(bullshit)}
[10:04:19] <xerxesphainon[m]> who did you thihnk i was?
[10:04:34] <xerxesphainon[m]> var 
[10:04:34] <xerxesphainon[m]> {exec}
[10:04:35] <jle`> hm, question is probably off-topic. unless this referring to haskell art specifically
[10:04:45] *** Joins: LittleLemon (~AdiIRC@170.55.34.132)
[10:04:51] <xerxesphainon[m]> 1 {
[10:04:51] <xerxesphainon[m]>    {11}
[10:04:51] <xerxesphainon[m]>       {1131}
[10:05:04] <xerxesphainon[m]> shall i leave?
[10:05:04] *** Quits: xff0x (~xff0x@2001:1a81:52c5:f300:a883:120f:33bf:e74b) (Ping timeout: 264 seconds)
[10:05:14] <Axman6> @where ops
[10:05:14] <lambdabot> byorgey Cale conal copumpkin dcoutts dibblego dolio edwardk geekosaur glguy jmcarthur johnw mniip monochrom quicksilver shachaf shapr ski
[10:05:18] <sm> picture needs haskellizing
[10:05:31] *** Parts: xerxesphainon[m] (~artaxerxe@2001:470:69fc:105::f400) ()
[10:05:56] <EvanR> lol, the ops extended justice league
[10:06:35] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Ping timeout: 252 seconds)
[10:07:02] <EvanR> haven't seen jmcarthur in a minute
[10:15:08] *** Joins: xff0x (~xff0x@2001:1a81:52c5:f300:d642:873:f292:9250)
[10:17:27] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:19:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:23:35] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[10:24:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[10:26:52] *** Joins: atlas (~jbox@user/jbox)
[10:29:35] *** Joins: vysn (~vysn@user/vysn)
[10:29:50] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[10:30:00] *** atlas is now known as jbox
[10:30:47] *** Quits: fr33domlover (~fr33@2.53.150.205) (Ping timeout: 256 seconds)
[10:35:48] *** Joins: chele (~chele@user/chele)
[10:36:52] *** Quits: xff0x (~xff0x@2001:1a81:52c5:f300:d642:873:f292:9250) (Ping timeout: 268 seconds)
[10:37:20] *** Joins: xff0x (~xff0x@2001:1a81:52c5:f300:6673:fb4d:a3aa:9d2)
[10:37:44] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[10:39:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:43:52] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[10:44:57] *** Quits: deadmarshal (~deadmarsh@95.38.228.153) (Ping timeout: 256 seconds)
[10:51:09] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:97df:ebe3:251c:f0f6)
[10:58:02] *** Joins: xerxesphainon[m] (~artaxerxe@2001:470:69fc:105::f400)
[10:58:14] <xerxesphainon[m]> hey yall that scared the shit out of me
[10:58:17] <xerxesphainon[m]> im sorry
[10:58:24] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:58:56] <xerxesphainon[m]> look
[10:59:04] <xerxesphainon[m]> ...................
[10:59:09] <xerxesphainon[m]> shit
[10:59:15] <xerxesphainon[m]> i dont have social skills
[10:59:19] <xerxesphainon[m]> uhhh
[11:00:24] <jle`> it's ok, you just have to try to constrain your questions to only questions related to haskell the programming language
[11:00:47] <jle`> anything else would be off-topic or belong in a different channel that is more suitable
[11:01:47] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[11:01:52] <xerxesphainon[m]> All my life. I mean. Since i was about 5. you know. i saw other kids......with the crowd.......bullying.......i made the decision right then and there. I want to be a good person. I like it when EVERYBODY is happy. and having fun. Im a musician. also from early age. And. 
[11:02:00] <xerxesphainon[m]> dude see that just fucked me upo
[11:02:52] <xerxesphainon[m]> truthfully , i was afraid i had stumbled into a shadow project under a CIA  proprietary organization involving bluetooth blockchain
[11:03:04] <xerxesphainon[m]> please do not treat me like im stupid
[11:03:18] <xerxesphainon[m]> hold on guys
[11:03:33] <xerxesphainon[m]> please bear with me im on the virge of suicide
[11:03:51] <xerxesphainon[m]> i cant get a response from ant other channel
[11:03:54] <xerxesphainon[m]> and you know it
[11:04:17] <xerxesphainon[m]> everybody just stop please. look at this situation.
[11:04:25] <xerxesphainon[m]> observe. what just happened/
[11:04:31] <xerxesphainon[m]> ???
[11:05:08] <xerxesphainon[m]> man i had a. best speech in your life ready to come out and i apreciate you being a dick
[11:05:16] <xerxesphainon[m]> WOW
[11:05:57] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[11:06:21] * xerxesphainon[m] uploaded an image: (72KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/bukgdbNKYYJNqXUTLDgcarQf/BRAVE-NEW-WORLD.jpg >
[11:06:25] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[11:06:43] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:07:09] *** Joins: deadmarshal (~deadmarsh@95.38.228.153)
[11:07:37] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[11:07:37] *** Quits: nahcetan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[11:08:04] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[11:11:10] <xerxesphainon[m]> <jle`> "it's ok, you just have to try to..." <- yes you are correct sir, however an inconsisency as minute as the such, must self evidently be known to any avid user of chat-rooms
[11:11:29] <xerxesphainon[m]> which i obviously am not
[11:11:43] <xerxesphainon[m]> man........
[11:11:46] <xerxesphainon[m]> oh my God
[11:13:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[11:13:34] *** Quits: yaroot (~yaroot@52.102.13.160.dy.iij4u.or.jp) (Quit: The Lounge - https://thelounge.chat)
[11:14:14] <xerxesphainon[m]> A Simple Error on my part actually. And all the more Clear Evidence, indicating the pre
[11:14:19] <xerxesphainon[m]> DDS attack really?
[11:14:28] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[11:15:03] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[11:15:17] <xerxesphainon[m]> aye man yall boys be safe out here. keep ya up G
[11:15:23] <xerxesphainon[m]> keep ya head up my G
[11:15:29] *** Parts: xerxesphainon[m] (~artaxerxe@2001:470:69fc:105::f400) ()
[11:16:18] *** Quits: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (Ping timeout: 260 seconds)
[11:18:12] *** Joins: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net)
[11:21:42] *** Joins: michalz (~michalz@185.246.204.62)
[11:23:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:25:29] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:25:41] *** Quits: sunarch (uid526836@user/sunarch) (Quit: Connection closed for inactivity)
[11:25:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:27:11] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:27:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:28:42] *** Joins: LittleLemon_2 (~AdiIRC@075-112-143-124.res.spectrum.com)
[11:28:49] *** Quits: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953) (Remote host closed the connection)
[11:29:03] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[11:29:57] *** Quits: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953) (Remote host closed the connection)
[11:30:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:30:11] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[11:30:36] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[11:30:45] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[11:32:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[11:32:04] *** Quits: LittleLemon (~AdiIRC@170.55.34.132) (Ping timeout: 264 seconds)
[11:32:09] *** LittleLemon_2 is now known as LittleLemon
[11:33:29] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[11:35:41] *** Quits: deadmarshal (~deadmarsh@95.38.228.153) (Ping timeout: 252 seconds)
[11:36:11] *** Joins: AndrejKarpathy (~AndrejKar@2409:4053:2203:902f:95e9:1dcc:9faf:e958)
[11:38:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:41:36] <AndrejKarpathy> Hi everyone.
[11:42:49] *** Quits: AndrejKarpathy (~AndrejKar@2409:4053:2203:902f:95e9:1dcc:9faf:e958) (Quit: Client closed)
[11:44:29] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:44:47] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:46:19] *** Joins: rkrishnan (~user@122.171.76.46)
[11:48:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:48:42] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:50:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:50:27] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:50:40] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:50:48] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[11:52:20] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[11:53:14] *** Quits: jbox (~jbox@user/jbox) (Read error: Connection reset by peer)
[11:53:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:56:40] *** Quits: LittleLemon (~AdiIRC@075-112-143-124.res.spectrum.com) (Ping timeout: 264 seconds)
[11:59:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:59:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:01:26] *** Joins: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[12:03:12] *** Joins: neurocyte0132889 (~neurocyte@94.46.74.167)
[12:03:12] *** Quits: neurocyte0132889 (~neurocyte@94.46.74.167) (Changing host)
[12:03:12] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:04:02] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[12:04:18] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[12:05:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:06:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:06:37] *** Joins: narendra (~user@2a02:8109:b63f:ff7c::56c2)
[12:07:16] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[12:12:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:12:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:13:19] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:14:03] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:f00d:18c8:3973:574b)
[12:16:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:16:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:18:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:18:16] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 264 seconds)
[12:18:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:19:29] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[12:21:10] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:22:19] *** Joins: deadmarshal (~deadmarsh@95.38.228.153)
[12:24:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:24:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:25:58] *** Joins: zaquest (~notzaques@5.130.79.72)
[12:26:26] *** ChanServ sets mode: +o dibblego
[12:26:53] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:27:18] *** dibblego sets mode: +b *!~artaxerxe@*
[12:27:27] *** dibblego sets mode: +b *!artaxerxe@*
[12:27:29] *** dibblego sets mode: -b *!~artaxerxe@*
[12:27:50] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[12:28:33] *** Joins: max22- (~maxime@2a01cb0883359800537b01ac6af61ec5.ipv6.abo.wanadoo.fr)
[12:29:40] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e72fcf154b5eecf3df6.dip0.t-ipconnect.de)
[12:31:06] *** Joins: _bo (~bo@217.18.216.247)
[12:32:37] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[12:33:37] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[12:34:09] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[12:35:49] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:36:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:38:16] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 245 seconds)
[12:38:26] *** Joins: james[m]12 (~jamesnina@2001:470:69fc:105::1:4203)
[12:40:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:40:24] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:41:42] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[12:43:15] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3) (Remote host closed the connection)
[12:44:55] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:45:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:45:21] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) ()
[12:47:11] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 252 seconds)
[12:47:36] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:36] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:39] *** allbery_b is now known as geekosaur
[12:50:31] *** Joins: boxscape (~boxscape@user/boxscape)
[12:51:02] *** Quits: deadmarshal (~deadmarsh@95.38.228.153) (Ping timeout: 252 seconds)
[12:51:36] *** Joins: ehamberg_ (sid18208@id-18208.hampstead.irccloud.com)
[12:52:11] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:53:04] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 264 seconds)
[12:55:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:56:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:56:34] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:57:52] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[12:59:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:00:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:00:06] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:00:10] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[13:01:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:02:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:02:35] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[13:03:15] *** Joins: deadmarshal (~deadmarsh@95.38.228.153)
[13:03:23] *** Quits: max22- (~maxime@2a01cb0883359800537b01ac6af61ec5.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[13:05:20] *** Joins: kuribas (~user@ptr-25vy0i8s19mxk1vvjxp.18120a2.ip6.access.telenet.be)
[13:05:23] *** Joins: cfricke (~cfricke@user/cfricke)
[13:10:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:10:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:14:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:14:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:15:37] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[13:19:47] *** Quits: xcmw (~textual@dyn-72-33-2-173.uwnet.wisc.edu) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:23:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:23:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:24:59] *** Joins: ubert (~Thunderbi@p200300ecdf0ba2aae6b318fffe838f33.dip0.t-ipconnect.de)
[13:26:19] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[13:27:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:29:17] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:29:35] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:29:36] *** Joins: MaybeJustJames (~jacol@2001:981:4ea3:1:a8b4:6ac6:c93b:9bcf)
[13:30:05] <MaybeJustJames> Hi all
[13:30:27] <boxscape> hi
[13:31:01] <MaybeJustJames> I'm a bit of a newb and have a cabal question. Is this a good place to ask?
[13:31:07] <boxscape_> yeah
[13:31:45] <MaybeJustJames> My app depends on a library. I would like to modify the library with some `traceIO` debugging though
[13:32:13] <MaybeJustJames> Is `cabal install --lib` from the library thr right way to build my app against the modified library?
[13:32:14] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:32:52] <boxscape_> no, you probably want a cabal.project file in which you specify the path of your modified library
[13:32:59] <boxscape_> let me look up the correct syntax...
[13:33:08] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:33:09] <MaybeJustJames> Ah ok! Excellent I was hoping for that
[13:33:17] <MaybeJustJames> Thankyou so much!
[13:33:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:34:28] *** Lord_of_Life_ is now known as Lord_of_Life
[13:34:37] <boxscape_> MaybeJustJames see this answer: https://stackoverflow.com/a/49418110/17327400
[13:34:49] <merijn> Or just the cabal.project reference here: https://cabal.readthedocs.io/en/latest/cabal-project.html
[13:34:49] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:34:56] <MaybeJustJames> Brilliant! Thankyou very much!
[13:34:57] <[exa]> the first example here pretty much sums up what I put almost everywhere https://cabal.readthedocs.io/en/3.4/cabal-project.html
[13:35:09] <merijn> [exa]: Too slow :p
[13:35:17] <[exa]> merijn: I'm ashamed
[13:35:54] *** Joins: mmhat (~mmh@55d4269f.access.ecotel.net)
[13:36:16] *** Quits: deadmarshal (~deadmarsh@95.38.228.153) (Ping timeout: 264 seconds)
[13:37:12] *** Joins: deadmarshal (~deadmarsh@95.38.228.153)
[13:38:41] *** Joins: max22- (~maxime@2a01cb08833598007acc2e8deff42dd7.ipv6.abo.wanadoo.fr)
[13:40:21] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:40:39] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:42:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[13:42:51] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:43:32] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:43:39] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[13:43:58] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:48:44] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[13:49:28] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Ping timeout: 264 seconds)
[13:51:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:51:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:51:44] *** Joins: nschoe (~quassel@178.251.84.79)
[13:52:08] <arahael> I've got two issues at the moment with my Haskell:
[13:53:05] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Ping timeout: 256 seconds)
[13:53:07] <arahael> 1) I can't get this line to compile: env <- newEnv Discover <&> set (field @"envLogger") lgr . set (field @"envRegion") NorthVirginia  -- It seems that I'm missing some sort of very complex type.  Actually I should pastebin that error.
[13:53:39] <arahael> https://gist.github.com/arafangion/82c31f1dfe01c9cc559bbc6abc0ce699
[13:54:12] <arahael> 2) And the other issue, is when I have this error, it seems to produce an 'invalid byte sequence' - I suspect because the error message has colours.  Can I disable colours from 'cabal build'?
[13:55:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:56:10] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:57:18] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:f00d:18c8:3973:574b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:57:32] <kuribas> arahael: seems pretty clear: The type Env' Identity does not contain a field named 'envRegion'
[13:57:54] <kuribas> arahael: you are setting a field on (Env' Identity), which doesn't have that field.
[13:58:12] <arahael> kuribas: That doesn't make sense to me, though.  Hmm, so I need to somehow make it not (Env' Identity)
[13:59:16] <kuribas> what's Env?
[13:59:36] <kuribas> maybe you miss another fmap?
[13:59:45] <arahael> kuribas: Possible, I'm trying to do this: https://github.com/brendanhay/amazonka/blob/develop/examples/src/Example/S3.hs#L49
[13:59:53] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[14:00:52] *** Quits: deadmarshal (~deadmarsh@95.38.228.153) (Ping timeout: 264 seconds)
[14:02:04] <kuribas> arahael: try these lenses? https://hackage.haskell.org/package/amazonka-1.6.1/docs/Network-AWS.html#t:HasEnv
[14:02:56] <arahael> kuribas: I'm using amazonka 2.0, though, I think they've changed the way they've done those lenses.
[14:04:24] <kuribas> arahael: link?
[14:06:01] <arahael> Should be this: https://github.com/brendanhay/amazonka/tree/main though I'm not on quite exactly that revision.
[14:06:28] *** Joins: cheater (~Username@user/cheater)
[14:08:17] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c) (Quit: gone to sleep. ZZZzzz…)
[14:09:18] <arahael> kuribas: I notice that Env is a type `Env' Identity', and yet, there is this line: https://github.com/brendanhay/amazonka/blob/aeecded1501510d607082bb9a65aa5086755251f/lib/amazonka/src/Amazonka/Env.hs#L91
[14:09:23] <jackdk> arahael: what are your imports? Do you have the bulk of the example somewhere?
[14:09:24] <arahael> Which clearly shows the envRegion I'm attempting to set.
[14:09:36] <arahael> jackdk: Let me push up my changes!
[14:10:41] <arahael> https://github.com/arafangion/auslansocial/blob/main/Main.hs#L211 <-- 211 there is the broken line.
[14:11:06] <arahael> jackdk: I've noticed your PR's are now merged in, but I'm still using your PR directly.
[14:12:35] <arahael> jackdk: It compiles if I remove everything to the right of (and including) the '<&>' bit on that line, though I doubt it runs. (Though, I notice NorthVirginia seems to be the default, so it might well run)
[14:12:41] <jackdk> arahael: field names in Env start with an underscore now
[14:13:00] <arahael> jackdk: Oh, and I have to put the underscore in that string?
[14:13:04] <jackdk> I think I had to do that to avoid a name clash.
[14:13:05] <jackdk> yeah
[14:13:42] <arahael> That compiles.
[14:14:06] <jackdk> yeah that's right I had to move the definition of the Env' type into Amazonka.Auth for annoying hs-boot related reasons to support certain STS operations, and that module already had an envRegion variable
[14:14:23] <arahael> hat's that syntax again?  I tried to look up type applications, but they were full of examples such as @Int, but didn't explain the @"foo" bit.
[14:14:55] <jackdk> "foo" there is a type of kind `Symbol` - the kind of type-level stirngs
[14:15:10] <jackdk> a "kind" is like the "type" of a type
[14:15:17] <jackdk> % :kind Maybe
[14:15:18] <yahb> jackdk: * -> *
[14:15:28] <arahael> % :kind @"foo"
[14:15:29] <yahb> arahael: ; <interactive>:1:2: error: Unexpected type application: "foo"
[14:15:43] <tomsmeding> % :set -XTypeApplications -XDataKinds
[14:15:43] <yahb> tomsmeding: 
[14:15:44] <jackdk> % :set -XTypeApplications -XDataKinds
[14:15:44] <yahb> jackdk: 
[14:15:49] <tomsmeding> :)
[14:15:53] <arahael> % :kind "foo"
[14:15:53] <yahb> arahael: GHC.Types.Symbol
[14:15:59] <arahael> Ooh, interesting.
[14:16:03] <jackdk> % :set -XNoStarIsType
[14:16:03] <yahb> jackdk: 
[14:16:08] <arahael> But "foo" and "bar" are the same kind, I guess?
[14:16:09] <jackdk> % :kind Maybe
[14:16:09] <yahb> jackdk: Type -> Type
[14:16:29] <jackdk> `Type` is the kind of types taht may have values: `Int`, `Bool`, `Maybe Char`, ...
[14:16:38] <tomsmeding> arahael: the types "foo" and "bar" are different, but have the same kind; just like the values "foo" and "bar" are different, but have the same type
[14:17:18] <tomsmeding> % :k Monad
[14:17:18] <yahb> tomsmeding: (Type -> Type) -> Constraint
[14:17:25] <tomsmeding> in case you hadn't seen that before
[14:18:03] <arahael> tomsmeding: I've seen that before, and I believe I understand it, but...  I'm a bit lost with https://gitlab.haskell.org/ghc/ghc/-/wikis/type-application
[14:18:41] <tomsmeding> where are you lost?
[14:19:26] <arahael> The syntax.
[14:19:46] <arahael> Consider `map @Int @Bool isEven xs`
[14:19:56] <tomsmeding> the part where it conflicts with as-patterns, like 'f list@(x:xs) = x : f list' ?
[14:19:58] <tomsmeding> or the rest :p
[14:20:00] <arahael> That reads like a four-argument function to me.
[14:20:02] <tomsmeding> ah
[14:20:08] <boxscape> % :set -fprint-explicit-foralls
[14:20:08] <yahb> boxscape: 
[14:20:11] <tomsmeding> % :t map
[14:20:12] <yahb> tomsmeding: forall {a} {b}. (a -> b) -> [a] -> [b]
[14:20:14] <boxscape> % :t +v map
[14:20:15] <yahb> boxscape: forall a b. (a -> b) -> [a] -> [b]
[14:20:18] <tomsmeding> there are your four arguments
[14:20:33] <arahael> Ah, I see.
[14:21:10] <tomsmeding> in fact there is a proposal floating around to create syntax for defining _explicit_ type arguments; something like 'forall a ->' instead of 'forall a.'
[14:21:19] <arahael> Now `field @"foo"` makes more sense. It's a single-argument 'field', which requires not a value, but an explicit type.
[14:21:29] <arahael> And the '@' allows me to specify a type.
[14:21:32] <tomsmeding> and then that argument wouldn't be passed using @, but as a normal argument
[14:21:41] <boxscape> toms not just floating around but accepted at this point
[14:21:42] <tomsmeding> yes
[14:21:48] <jackdk> link?
[14:21:49] <kuribas> tomsmeding: like dependent types?
[14:21:51] <tomsmeding> _accepted_?
[14:21:55] <boxscape> (whoops I failed to press tab)
[14:22:03] <tomsmeding> kuribas: it's a proposal by Richard Eisenberg on the road to dependent haskell, yes :p
[14:22:11] <boxscape> https://github.com/ghc-proposals/ghc-proposals/pull/281
[14:22:37] <tomsmeding> wow!
[14:22:40] <arahael> My other question was... 
[14:22:51] <arahael> How do I get 'cabal build' to stop prettifying my build errors?
[14:22:52] <tomsmeding> that's fresh off the press
[14:22:58] <tomsmeding> cabal build | cat
[14:23:39] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:f00d:18c8:3973:574b)
[14:24:01] <kuribas> In the beginning it felt weird to be able to pass types as argument, but it actually makes sense.  
[14:24:15] <kuribas> If you think of it as a function that generates another function.
[14:24:27] <arahael> tomsmeding: I can't use pipes like that in a shakefile - and it's the shakefile that's tripping over the colours.
[14:24:30] <kuribas> So you take a polymorphic function and generate a monomorphic function.
[14:24:46] <arahael> kuribas: It already makes sense to me, I think.
[14:24:59] <tomsmeding> kuribas: I still think of it as overriding type inference, in a way (as in: being there before type inference even starts, and fixing the type beforehand)
[14:25:03] <kuribas> Of course in haskell you cannot use the type in the function body, since the type is erased.
[14:25:56] <tomsmeding> arahael: the point of the pipe is to ensure that when cabal calls isatty(STDOUT_FILENO), that returns false
[14:26:03] <arahael> tomsmeding: Ie, I'm using this function: https://hackage.haskell.org/package/shake-0.19.6/docs/Development-Shake.html#v:cmd_ 
[14:26:04] <kuribas> tomsmeding: yeah, that's more technically correct.
[14:26:49] <tomsmeding> arahael: you might actually have success running your whole shake build with | cat after it
[14:26:54] <tomsmeding> but that's not a solution per se
[14:27:35] <arahael> tomsmeding: Nah, it doesn't work, just tried it.
[14:27:40] <tomsmeding> oh
[14:27:45] <arahael> I still get: fd:7: hGetContents: invalid argument (invalid byte sequence)
[14:28:08] <tomsmeding> oh cabal build seems to use colour always? that'a bug
[14:28:45] <arahael> Ah, and yeah, it does, even when you pass it through |cat.
[14:29:03] <kuribas> Will DH allow unlifing of DataKinds?
[14:30:04] <kuribas> DH looks to me like dependent types light...
[14:30:13] <kuribas> It doesn't really make haskell a dependently typed language.
[14:30:17] <boxscape> If understand correctly what you're asking, DH will have something like `foo :: foreach (x :: Nat) -> x + x :~: 2 x`, which would indicate that the `x` is not erased and can be used in the function body
[14:30:43] <tomsmeding> arahael: cabal --ghc-options=-fdiagnostics-color=never build
[14:30:45] <boxscape> s/2 x/2 * x
[14:30:59] <tomsmeding> except that will only work if you remove build caches beforehand (dist-newstyle in particular)
[14:31:02] <kuribas> boxscape: but that wouldn't work with Types?
[14:31:07] <tomsmeding> because https://github.com/haskell/cabal/issues/6177#issuecomment-518307005
[14:31:14] <kuribas> boxscape: foo :: foreach (x :: Type) -> ...
[14:31:21] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[14:31:26] <boxscape> kuribas: not by default but the idea is to make it work for types eventually
[14:31:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:32:10] <boxscape> one goal is to unify type families and term-level functions
[14:32:20] <kuribas> I feel conflicted about this.  It's nice to have more type system features, but couldn't that effort be better spend in making true dependently typed language better?
[14:32:23] <boxscape> so if you can write something as a type family, you should be able to write it as a regular function eventually
[14:32:32] <arahael> tomsmeding: Interesting.
[14:32:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:33:43] <boxscape> kuribas: Richard's thesis has some comments on this in section "3.3 Why Haskell?" https://richarde.dev/papers/2016/thesis/eisenberg-thesis.pdf#chapter.3
[14:33:46] <tomsmeding> ah, so it's a bug in ghc: ghc doesn't check isatty(1) before using colours
[14:34:28] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[14:34:35] <arahael> interesting.  Well, I'm happy with passing that flag explicitly, do you have the bug reference, incidentally?
[14:35:10] <arahael> I do notice that now it seems to be reinstalling and recompiling *everything*, I guess because I've changed a ghc-option, which is unfortunate.
[14:35:11] <tomsmeding> arahael: not yet besides https://github.com/haskell/cabal/issues/6177 and the linked #6147
[14:35:19] *** Quits: akspecs__ (~akspecs@user/akspecs) (Quit: WeeChat 3.2)
[14:36:02] <arahael> Thanks. :)
[14:36:29] *** Joins: jakalx (~jakalx@base.jakalx.net)
[14:37:14] <boxscape> > <kuribas> It doesn't really make haskell a dependently typed language. -- I think that's necessarily what it looks like while it's in the process of becoming a dependently typed language - I don't think the stated goal is to keep it at "dependent types light"
[14:37:16] <lambdabot>  <hint>:1:1: error: parse error on input ‘<’
[14:37:36] <boxscape_> sorry lambdabot
[14:37:54] <arahael> boxscape_: I keep running into that frequently, myself, - I frequently quote using >
[14:38:03] <kuribas> "Dependent Haskell emphatically does not strive to be a proof system" <= neither does idris.
[14:38:44] <boxscape> "Idris embraces partiality, but then refuses to evaluate partial functions during type-checking"
[14:39:28] <kuribas> boxscape: you can cheat with "believe_me" :)
[14:39:38] <boxscape> hm fair
[14:39:42] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[14:39:57] <kuribas> boxscape: but I think the idea is that if you allow partiality, then the whole proof system collapses.
[14:40:21] <boxscape> which is fine if your intention is not to make a proof system ;)
[14:40:43] <kuribas> I disagree, you still want your type level computations to be valid.
[14:41:04] <tomsmeding> arahael: _something_ in GHC responds to the GHC_COLORS environment variable, but I've been able to find exactly 0 documentation on it -- good luck :p https://gitlab.haskell.org/ghc/ghc/-/issues/13718 (and I have to go now)
[14:41:19] <kuribas> boxscape: If I put a constraint on a type, I want the type system to ensure it holds.
[14:42:23] <kuribas> boxscape: I mean, the only reason to have type level computations, is to improve the consistency of the program.
[14:42:31] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[14:42:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:43:18] <boxscape> kuribas: That is a decent argument but Haskell already has ways that allow you to violate that, e.g. Type :: Type, so arguably it doesn't make sense to strive for soundness in one area while other areas still make the type system unsound
[14:43:32] <arahael> tomsmeding: Thanks for your help! :D
[14:43:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:44:16] <kuribas> boxscape: well, I guess idris *is* a proof system, but it's not the primary purpose.
[14:47:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:47:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:49:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[14:49:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:50:10] <boxscape> apropos unsoundness - I always thought it was kind of funny that this works
[14:50:11] <boxscape> % undefined @_ @(Proxy (_ :: Void))
[14:50:11] <yahb> boxscape: Proxy
[14:50:53] <boxscape> % Proxy @_ @(Proxy (_ :: Void)) -- this might be less confusing
[14:50:54] <yahb> boxscape: ; <interactive>:24:1: error:; * Cannot apply expression of type `Proxy w0'; to a visible type argument `(Proxy (_ :: Void))'; * In the expression: Proxy @_ @(Proxy (_ :: Void)); In an equation for `it': it = Proxy @_ @(Proxy (_ :: Void))
[14:51:01] <boxscape> arg
[14:51:23] <boxscape> % Proxy @(Proxy (_ :: Void)) -- this might be less confusing
[14:51:23] <yahb> boxscape: Proxy
[14:51:37] *** Joins: deadmarshal (~deadmarsh@95.38.228.153)
[14:54:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:55:15] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[14:55:25] <arahael> Curious, even with --ghc-options=-fdiagnostics-color=never, my shakefile still stumbles over the invalid byte sequence.
[14:55:31] <arahael> Will figure it out another day.
[14:55:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:00:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:01:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:05:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:05:55] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:06:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:07:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:07:28] *** Quits: emf (~emf@2620:10d:c090:400::5:9a5b) (Ping timeout: 264 seconds)
[15:09:52] *** Joins: emf (~emf@2620:10d:c090:400::5:d28b)
[15:11:48] <jackdk> it's not a utf-8 thing?
[15:12:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:13:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:14:36] <arahael> It might well be.  I'll try it in binary mode - I can tell shake to use ByteStrings instead of trying to interpret whatever as whatever unicode.
[15:14:48] <arahael> (I think I can, anyway)
[15:14:56] <arahael> But not tonight. :(
[15:16:37] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:16:55] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:17:04] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 264 seconds)
[15:18:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:19:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:20:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:21:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:23:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:23:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:23:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:24:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:25:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:27:33] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:4c11:ba21:da7d:dd69)
[15:27:39] *** Quits: namkeleser (~namkelese@101.175.102.188) (Quit: Client closed)
[15:29:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:29:42] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:30:52] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:31:28] <kuribas> How do you handle non-local exits?
[15:31:36] <kuribas> error seems a bit harsh...
[15:31:59] <kuribas> I could use ExceptT, and catch the error at toplevel...
[15:32:42] <kuribas> Basically I have an IO function, and at an error I want to write an error message and exit the function
[15:33:14] <Rembane> :t throwIO -- maybe? 
[15:33:15] <lambdabot> Exception e => e -> IO a
[15:33:40] <kuribas> well, I already wrote the error message to stdout...
[15:33:56] <kuribas> Or use the exception to format it? hmm...
[15:34:35] <kuribas> eventually I'll process the errors, and put them back into the input file...
[15:35:18] <kuribas> maybe throwIO with a custom error is not such a bad idea...
[15:40:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:41:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:42:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:42:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:43:52] <zero> can i make a program where i run some stuff and then exit and run a terminal command?
[15:44:11] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[15:44:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[15:45:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:45:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[15:45:15] <boxscape> zero is it acceptable if the haskell program exits only after the terminal command has completed?
[15:45:39] <yushyin> execve?
[15:46:25] <zero> bad description, sorry. i want to make a program that takes some input, does some stuff and then "turn into" another program
[15:47:29] <zero> yushyin: i think that's it, thanks
[15:48:23] *** Joins: deadmarshal_ (~deadmarsh@95.38.229.118)
[15:48:45] <zero> https://hackage.haskell.org/package/procex
[15:49:08] <zero> boxscape: yes i think so
[15:49:42] <zero> that's even better
[15:49:49] *** Quits: deadmarshal (~deadmarsh@95.38.228.153) (Ping timeout: 256 seconds)
[15:49:51] <merijn> Why not just 
[15:49:54] <merijn> @hackage process
[15:49:54] <lambdabot> https://hackage.haskell.org/package/process
[15:49:59] <boxscape> from your initial question I would have suggested using something like System.Process.readProcess
[15:50:08] <boxscape> (in the package merijn linked)
[15:50:29] <merijn> tbh, the high level interface of process is kinda bad, imo
[15:50:38] <merijn> but that procex is linux only, so also terrible >.>
[15:50:50] <zero> can i for instance open vim with readProcess?
[15:51:11] <zero> let the user do some stuff, and then exit?
[15:52:19] <hpc> vim is trickier than say, curl
[15:52:23] <hpc> but it's doable
[15:52:57] <geekosaur> well. not trickier idf you're not feeding inpu tor catching output
[15:53:22] <geekosaur> depends on what exactly you're doing
[15:54:56] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[15:55:04] *** Quits: narendra (~user@2a02:8109:b63f:ff7c::56c2) (Ping timeout: 268 seconds)
[15:56:36] <[exa]> zero: might be useful to have a look at how others do it, e.g. git with EDITOR
[15:58:03] <zero> i was thinking of that example precisely
[15:58:55] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Read error: Connection reset by peer)
[15:59:29] <merijn> The trick is that git doesn't interact with your editor at all
[15:59:42] <boxscape> or ghci with :e
[15:59:44] <boxscape> % :e
[15:59:44] <yahb> boxscape: No files to edit.
[15:59:45] <merijn> It just starts the editor attached (and taking over) the terminal git runs in
[15:59:52] *** Joins: fr33domlover (~fr33@2.53.150.205)
[16:00:44] <merijn> tbh, if you want complex interactions with child programs and the user's terminal, what you should do is order a copy of "Advanced Programming in the UNIX Environment, 3rd edition" and ignore anything anybody on the internet says unless they cite that book >.>
[16:01:06] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:02:51] <merijn> in fact, if you even plan to do anything that interacts with other processes, terminals, network sockets or anything remotely system-y on a unix-like system you should just get that book and ignore the internet >.>
[16:05:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:05:24] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:05:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 268 seconds)
[16:07:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:07:20] <hpc> merijn: there's a who shaves the barber paradox in there somewhere :P
[16:07:33] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:09:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:09:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:11:21] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:11:28] <merijn> Possibly, but I'm 100% sure the average unix-y software I used would be less shitty if more people read that freaking book >.>
[16:11:39] <merijn> Hell, you don't even have to read it, just consult it as a reference
[16:11:40] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:11:45] *** Joins: mario (~mario@31.147.205.13)
[16:11:56] <merijn> Maybe then people will finally stop using fucking fork() >.<
[16:13:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:13:55] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:15:35] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:15:40] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[16:15:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:17:53] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[16:19:04] <maerwald> and use the more complicated posix_spawn?
[16:19:17] *** Quits: dawdler (~dawdler@user/dawdler) (Ping timeout: 256 seconds)
[16:19:26] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[16:19:30] <maerwald> even creating C ffi for that is hard, because there are 20 or so and they're all related
[16:20:40] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 264 seconds)
[16:22:47] *** Joins: dawdler (~dawdler@user/dawdler)
[16:26:00] <merijn> maerwald: posix_spawn has a non-zero chance of being correct
[16:26:29] <merijn> My reaction to people who say they can use fork safely is the same as to the people who claim they can safely use C or C++: "I don't believe you"
[16:27:11] <maerwald> start by implementing the C ffi in haskell then, because it doesn't exist
[16:27:19] <jonathanx> I'm struggling with persistent. I've added a custom PersistField instance for a type of mine, and I've just stricted it up a bit, which means that I have db data that fail deserialization. I use selectList (https://hackage.haskell.org/package/persistent-2.13.2.1/docs/Database-Persist-Class.html#v:selectList) to retrieve data. When the query matches db data that fail deserialization, an exception is thrown, and need to be 
[16:27:19] <jonathanx> caught. This makes me sad, since I would prefer if the sematics of selectList was akin to catMaybes, i.e. simply discard db data that fails serialization. Is there any way to configure this? Also, being able to hook up logging to failures would be nice, but I'd prefer it if the operation didn't error out completely just because the data of one of the matching rows are faulty.
[16:27:44] *** Quits: max22- (~maxime@2a01cb08833598007acc2e8deff42dd7.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[16:27:59] <merijn> maerwald: I don't need it at the moment and don't have the extra time
[16:28:08] <merijn> jonathanx: How come data is failing deserialisation?
[16:28:28] <maerwald> merijn: then I'm confused how you can reccomend it :p
[16:28:45] <merijn> jonathanx: persistent pretty much it assumes it is in control of the database and therefore erroneous data is a serious corruption
[16:28:58] <merijn> maerwald: process using posix_spawn and covers most usecases
[16:29:07] <maerwald> uhm... 
[16:29:10] <jonathanx> I'm working in an event sourced system, and we have decided to fail some old events due to them violating an invariant that we failed to enforce previously
[16:29:19] <kuribas> yikes, why do haskell DB libraries assume you only want to code in haskell...
[16:29:29] <merijn> maerwald: Also, as I never recommended "using posix_spawn" I said "You can't use fork"
[16:29:53] <merijn> jonathanx: You'd have to implement the persistent typeclasses manually to handle that scenario
[16:30:19] <merijn> jonathanx: Instead of relying on TH to generate the PersistField and PersistEntity classes
[16:30:22] *** mario is now known as spaceseller
[16:34:37] <merijn> maerwald: yeah, yeah, you don't like process "because you don't know what it does", but you're an outlier and I'm not gonna adjust my advice to account for your quirks :p
[16:34:58] <maerwald> merijn: process is also funny cross-platform
[16:35:09] <merijn> For 98.5% of all haskell users they're better off using process than anything else
[16:35:18] <geekosaur> everything is funny cross-platform
[16:35:21] <maerwald> stack even does some CPP, because process behaves different on windows and unix
[16:35:28] <merijn> maerwald: And if you truly wanna be pedantic even GHC is fucky
[16:35:35] <maerwald> absolutely
[16:35:43] <merijn> See the complete inability to specify a CLOEXEC flag for opening files
[16:36:49] *** Joins: narendra (~user@2a02:8109:b63f:ff7c::56c2)
[16:37:02] <maerwald> merijn: uh, I thought I had fixed that
[16:37:19] <merijn> maerwald: Who knows? I can't find the code in base and docs say nothing
[16:37:25] *** Quits: spaceseller (~mario@31.147.205.13) (Quit: Leaving)
[16:37:46] <maerwald> https://github.com/haskell/unix/commit/c7d88b3612fdf74a7964a670d6e79128f97f46b0
[16:37:57] <geekosaur> I'd expect that to be in unix, not base. it's kinda meaningless for windows
[16:38:13] <merijn> I don't want Dependent Haskell or LinearTypes, I want more predictable/transparent low level interfaces, exceptions, etc.
[16:38:17] <maerwald> it wasn't in unix for a long time
[16:38:34] <geekosaur> since windows has no sane way to do exec
[16:38:34] <maerwald> merijn: haskellers care very little about low level correctness
[16:38:39] <merijn> Right, so base and bytestring are still entirely broken in the presense of both fork and process due to lack of CLOEXEC
[16:38:55] <merijn> geekosaur: Rightfully so, because exec is dumb >.<
[16:39:21] <maerwald> it's more  "zomg, effects systems will save us"
[16:39:21] <merijn> maerwald: But I don't wanna redo all GHCs optimisations to make my own low-level Haskell :(
[16:40:47] <merijn> maerwald: to be fair, almost no other language does either :p
[16:40:51] <maerwald> the last time I dealt with effects systems I ended up debugging why the unit test effect interpreter and the actual effect interpreter have diverging behavior
[16:40:59] <merijn> Maybe Rust, but I haven't looked at it enough to say
[16:41:20] <maerwald> so my tests, passed, but everything collapsed against the real thing
[16:41:44] <merijn> I mean, don't go around expecting python to have any sane low level behaviour, it's nightmare fuel
[16:41:55] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[16:41:57] <maerwald> that's why I prototype in posix shell
[16:42:31] *** Quits: ystael (~ystael@user/ystael) (Ping timeout: 256 seconds)
[16:43:09] *** Joins: kadir (~kadir@88.251.54.110)
[16:44:03] *** Joins: fef (~thedawn@user/thedawn)
[16:45:25] <maerwald> I'd have switched to rust if it wasn't that verbose... not good for your RSI, too much typing
[16:46:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:49:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:49:37] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:49:51] *** Joins: viluon (uid453725@id-453725.helmsley.irccloud.com)
[16:51:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:51:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:52:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[16:52:53] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:53:16] *** Joins: ystael (~ystael@user/ystael)
[16:55:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:55:51] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:55:54] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[16:59:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:59:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:00:39] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:01:17] *** Quits: deadmarshal_ (~deadmarsh@95.38.229.118) (Ping timeout: 252 seconds)
[17:01:43] <boxscape> make a Haskell EDSL that allows you to generate rust code
[17:03:05] *** Joins: deadmarshal (~deadmarsh@95.38.229.118)
[17:05:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:06:03] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:09:43] *** Quits: deadmarshal (~deadmarsh@95.38.229.118) (Ping timeout: 256 seconds)
[17:10:13] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[17:12:09] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:12:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:13:43] *** Joins: max22- (~maxime@2a01cb08833598002b3ca9ff186b1f37.ipv6.abo.wanadoo.fr)
[17:15:12] <tomsmeding> haskell is exceedingly flexible for making edsl's, but I'm not sure it's quite flexible enough to make something that makes writing rust code less verbose
[17:16:26] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Read error: Connection reset by peer)
[17:17:17] *** Joins: slack1256 (~slack1256@191.126.99.89)
[17:18:26] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:18:51] *** Joins: cosimone (~user@93-47-231-3.ip115.fastwebnet.it)
[17:19:46] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:4c11:ba21:da7d:dd69) (Quit: gone to sleep. ZZZzzz…)
[17:21:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:21:45] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:21:58] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:23:08] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:23:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:25:20] *** Joins: __monty__ (~toonn@user/toonn)
[17:27:18] *** Joins: deadmarshal (~deadmarsh@95.38.229.118)
[17:28:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[17:30:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:30:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:31:11] *** Quits: max22- (~maxime@2a01cb08833598002b3ca9ff186b1f37.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[17:31:38] *** Joins: reumeth (~reumeth@user/reumeth)
[17:34:21] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Remote host closed the connection)
[17:34:45] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:35:51] *** Quits: narendra (~user@2a02:8109:b63f:ff7c::56c2) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[17:36:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[17:36:50] <EvanR> with enough template haskell, you can do anything xD
[17:37:33] <boxscape> you can even add CPP on top
[17:38:10] *** Joins: waleee (~waleee@h-82-196-111-63.na.cust.bahnhof.se)
[17:44:13] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[17:44:51] *** Quits: waleee (~waleee@h-82-196-111-63.na.cust.bahnhof.se) (Ping timeout: 256 seconds)
[17:46:37] *** Joins: Lycurgus (~juan@98.4.112.204)
[17:49:29] <tomsmeding> EvanR: at that point you're just writing a parser :p
[17:51:13] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[17:51:48] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:52:19] <tomsmeding> hm, with the right EDSL design, what you _might_ gain is using the haskell metalanguage in place of macro definitions. With sufficient type-safety, you aren't going to get any more hygienic macros
[17:55:14] <EvanR> it says here for ghc 9.2.1: Merging of ghc-exactprint into the GHC tree, providing infrastructure for source-to-source program rewriting out-of-the-box.
[17:55:27] <EvanR> I dunno what that means but uh
[17:55:46] <EvanR> sounds like DSL stuff
[17:56:24] *** Joins: lbseale_ (~ep1ctetus@user/ep1ctetus)
[17:57:03] *** Joins: slac11455 (~slack1256@191.125.99.65)
[17:57:43] *** Joins: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[17:57:47] <boxscape> there's a short talk on youtube about it https://www.youtube.com/watch?v=GkoQbJofm1A
[17:58:05] *** Quits: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[17:58:07] *** Quits: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[17:58:31] *** Joins: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[17:58:43] <lbseale_> I have a situation where I have a small number of objects (2 - 5 max), which have arbitrary (but guaranteed unique) labels. I want to put them in some data structure, where I can read / replace them. Is there a way to do this safely?
[17:58:49] <boxscape> I think it's mainly for tools that interact with Haskell source code, not DSLs
[17:59:01] *** Quits: slack1256 (~slack1256@191.126.99.89) (Ping timeout: 256 seconds)
[17:59:35] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 256 seconds)
[18:00:42] <geekosaur> yeh, I think it's for Haskell source plugins which previously were pretty limited
[18:00:54] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:00:55] <tomsmeding> EvanR: I think that is related to source-to-source _Haskell_ rewriting, where spacing, comments etc. are preserved. Not terribly relevant to EDSLs, I think -- though I don't really know for sure
[18:01:22] <tomsmeding> oh, as boxscape said
[18:01:29] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[18:01:32] <tomsmeding> and everyone else
[18:01:58] <tomsmeding> someone explain lenses to lbseale_, I don't know anything about them
[18:02:29] <lbseale_> tomsmeding, lol noooo I don't want that to be the answer
[18:02:46] <tomsmeding> lbseale_: would a simple record type be okay? data Thing = Thing { obj1 :: A, obj2 :: B, obj3 :: C }
[18:03:14] <EvanR> yes seems like a record question really
[18:03:16] <lbseale_> It would except I don't know how many objects there are or what their labels are at compile-time
[18:03:24] <tomsmeding> if 't :: Thing', then 'obj1 t' is the first object in it; 't { obj1 = s }' is a new thing with the first object replaced by s
[18:03:31] <EvanR> extensible records, or heterogeneous map
[18:03:54] <tomsmeding> lbseale_: https://hackage.haskell.org/package/dependent-map-0.4.0.0/docs/Data-Dependent-Map.html#t:DMap
[18:04:14] <tomsmeding> or, are those objects different types?
[18:04:32] <tomsmeding> if no, simple Data.Map
[18:04:35] <tomsmeding> if yes, DMAP
[18:04:37] <tomsmeding> * DMap
[18:04:53] <lbseale_> they're all the same type
[18:04:56] <EvanR> 2 to 5 max, hell use [(String,a)] xD
[18:05:09] <tomsmeding> % import qualified Data.Map.Strict as Map
[18:05:10] <yahb> tomsmeding: 
[18:05:27] <tomsmeding> % data Label = Lab1 | Lab2 | Lab3
[18:05:27] <yahb> tomsmeding: 
[18:05:31] <tomsmeding> % data Label = Lab1 | Lab2 | Lab3 deriving (Eq, Ord, Show)
[18:05:31] <yahb> tomsmeding: 
[18:05:48] <tomsmeding> % let mp = Map.fromList [(Lab1, 123), (Lab2, 456)]
[18:05:48] <yahb> tomsmeding: 
[18:05:52] <tomsmeding> % Map.lookup Lab1 mp
[18:05:52] <yahb> tomsmeding: Just 123
[18:05:54] <tomsmeding> % Map.lookup Lab3 mp
[18:05:54] <yahb> tomsmeding: Nothing
[18:06:08] <tomsmeding> % Map.insert Lab2 789 mp
[18:06:08] <yahb> tomsmeding: fromList [(Lab1,123),(Lab2,789)]
[18:06:14] <tomsmeding> lbseale_: seems like a simple map would do :p
[18:06:23] <lbseale_> yeah this is nice
[18:06:49] <tomsmeding> which is effectively [(Label, a)] except that it also scales to >5 things
[18:07:03] <lbseale_> I wish that I didn't have to handle the `Maybe` type from looking up values in the `Map`
[18:07:04] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[18:07:05] <tomsmeding> well, and also except that it doesn't allow duplicate labels
[18:07:18] <EvanR> you didn't say that all labels are occupied though?
[18:07:22] <lbseale_> because I pinky-promise my `Map` will always have the labels I want to look up
[18:07:28] <lbseale_> oh, my mistake, yes they are
[18:07:32] <tomsmeding> % :t (Map.!)
[18:07:32] <yahb> tomsmeding: forall {k} {a}. Ord k => M.Map k a -> k -> a
[18:07:42] <tomsmeding> % :set -fno-print-explicit-foralls
[18:07:42] <yahb> tomsmeding: 
[18:07:43] <tomsmeding> % :t (Map.!)
[18:07:43] <yahb> tomsmeding: Ord k => M.Map k a -> k -> a
[18:07:44] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Remote host closed the connection)
[18:07:53] <tomsmeding> that will `error` if the key doesn't exist :p
[18:07:56] <EvanR> wait wait... you don't know how many, but they are unique and you know they are always there?
[18:08:08] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:08:14] <tomsmeding> % mp Map.! Lab3
[18:08:15] <yahb> tomsmeding: *** Exception: Map.!: given key is not an element in the map; CallStack (from HasCallStack):; error, called at libraries/containers/containers/src/Data/Map/Internal.hs:633:17 in containers-0.6.4.1:Data.Map.Internal
[18:08:15] <EvanR> is this illogical
[18:08:19] <tomsmeding> % mp Map.! Lab2
[18:08:19] <yahb> tomsmeding: 456
[18:08:49] <tomsmeding> EvanR: external program properties that are not expressed in the type system. Welcome to reality :p
[18:09:03] <lbseale_> tomsmeding, yeah I thought this would be the answer
[18:09:06] <EvanR> but how do you not crash?
[18:10:03] <lbseale_> EvanR, it's a library being called by code that reads in the objects and guarantees that their labels are unique. There can be an arbitrary quantity of them, but in practice there won't be many
[18:10:39] <EvanR> so your key set is always coming from a place that built the map
[18:10:51] <lbseale_> yes
[18:11:05] <lbseale_> so I'll just do the unsafe lookups and handle them appropriately
[18:11:22] <tomsmeding> you can try to make this more type-safe, but for questionable benefit
[18:11:49] <EvanR> i'm curious how you will do lookups with keys when they're unknown xD
[18:11:50] <lbseale_> that's not appealing, I'd prefer my code be simple and a little unclean
[18:12:06] <EvanR> more realistically it seems like you'd just spell out the whole map and use the keys that are there
[18:12:16] <geekosaur> presumably the keys are transmitted separately?
[18:12:26] <EvanR> :thonk:
[18:12:39] <EvanR> keys have to be in the map...
[18:12:55] <geekosaur> % M.keys mp
[18:12:55] <yahb> geekosaur: [Lab1,Lab2]
[18:13:03] <lbseale_> EvanR, there are times when I want to make arbitrary subsets of these objects, then update just that subset
[18:13:13] <lbseale_> so like, I know what keys I took out
[18:13:27] <lbseale_> but there could be many of them, and I don't know what they are
[18:13:43] <EvanR> ok well I'm not sure we made this very safe xD
[18:14:54] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[18:15:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[18:15:49] <boxscape> seems like the sort of thing you can make type safe with existential types and Symbol. But yeah probably wouldn't result in simple code
[18:17:29] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:17:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:19:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:19:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:21:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:21:44] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:22:15] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:23:42] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:f00d:18c8:3973:574b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:24:27] <lbseale_> ok, thanks guys! I think I know what to do
[18:24:49] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:24:49] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:24:49] *** Joins: wroathe (~wroathe@user/wroathe)
[18:24:59] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[18:25:03] <lbseale_> I was gonig to use NonEmpty Map, since I can at least guarantee that
[18:25:29] <Hecate> hi lbseale_ :)
[18:25:36] <Hecate> how are you doing?
[18:25:59] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e72fcf154b5eecf3df6.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[18:27:21] <lbseale_> Hecate, I'm well! I was just looking at your suggestions. How are you?
[18:27:47] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:f00d:18c8:3973:574b)
[18:28:27] *** lbseale_ is now known as lbseale
[18:30:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:32:55] *** Joins: max22- (~maxime@2a01cb08833598007c2e741a7c59ca1a.ipv6.abo.wanadoo.fr)
[18:34:31] *** Joins: AlexZenon (~alzenon@178.34.160.14)
[18:34:59] *** Joins: Alex_test (~al_test@178.34.160.14)
[18:35:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:35:56] <boxscape> Is there an advent of code room specific to Haskell?
[18:36:09] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:36:27] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:38:07] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:39:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[18:40:54] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[18:41:01] <merijn> Not really?
[18:41:04] <merijn> Here :p
[18:41:22] <merijn> That reminds me, someone should update the topic to include the #haskell leaderboard
[18:42:20] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[18:42:50] *** ChanServ sets mode: +o geekosaur
[18:42:54] <geekosaur> point me to it?
[18:43:34] * geekosaur doesn't do AoC
[18:43:35] <merijn> I can't, glguy created it and I don't think I can see the code?
[18:43:44] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:4c11:ba21:da7d:dd69)
[18:44:07] <boxscape_> yep unless someone remembers it from last year (and glguy hasn't changed it) he will have to tell us
[18:44:59] *** Quits: xsperry (~xs@user/xsperry) (Killed (NickServ (GHOST command used by ahahaha!~xs@cpe-188-129-101-182.dynamic.amis.hr)))
[18:45:22] *** Joins: xsperry (~xs@user/xsperry)
[18:46:10] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:46:20] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[18:47:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:47:25] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:47:26] *** Joins: wroathe (~wroathe@user/wroathe)
[18:48:35] <geekosaur> bah, my logs don't include it (spent a couple years using webchat so no logs from then, sigh)
[18:48:42] *** geekosaur sets mode: -o geekosaur
[18:49:31] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[18:50:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[18:51:07] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[18:51:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:53:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:54:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Ping timeout: 264 seconds)
[18:55:00] <Hecate> lbseale: fairly good, thank you very much. :) Managed to get the Functions lesson merged after many months of review :')
[18:55:08] *** Quits: retro_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[18:55:45] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[18:56:27] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[18:56:46] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[18:57:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[19:00:28] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[19:01:46] *** Joins: jeetelongname (~jeet@eduroam-public-46.nat.port.ac.uk)
[19:02:26] *** Joins: xkuru (~xkuru@user/xkuru)
[19:06:41] <zincy> Can someone help me with this type error? https://gist.github.com/therewillbecode/34b38f409c8cdf2b92f4edc0a417c734
[19:07:00] <zincy> Ill kinded expression whilst playing with Hedgehog state machine testing
[19:09:02] <tomsmeding> zincy: does PSitDown take two arguments here? pure $ PSitDown (GNewPlayer (T.pack $ show $ length ps) cs)
[19:09:13] <tomsmeding> oh I'm blind
[19:09:36] <tomsmeding> zincy: what's the type of Command
[19:10:19] <tomsmeding> zincy: also, don't those Nothings in 'gen' need to be 'pure Nothing' or something?
[19:14:29] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[19:14:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[19:16:10] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[19:16:16] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:19:14] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:24:38] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:29:30] <EvanR> two lines of code that satisfy the type checker but are wildly different xD
[19:29:44] <EvanR> putC c 0 "" = [c]
[19:29:49] <EvanR> putC c 0 "" = "c"
[19:29:56] <EvanR> I guess that's why we need tests xD
[19:30:55] <boxscape> EvanR: or just turn on -Wall
[19:33:05] *** Quits: deadmarshal (~deadmarsh@95.38.229.118) (Ping timeout: 256 seconds)
[19:34:54] *** Quits: ouro_boros (~ouroboros@2804:14c:65e4:93f6::1001) (Remote host closed the connection)
[19:34:57] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:35:17] *** Joins: ouro_boros (~ouroboros@2804:14c:65e4:93f6:a589:7295:b475:5b03)
[19:35:49] <janus> does the version of ghc used imply which version of bytestring is used?
[19:36:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:38:14] <davean> janus: not past very vaguely
[19:40:20] <janus> ok so all this breakage is just happening because 0.10 was long-lived and isn't compatible with base 4.16. so almost noone has encountered the error because nobody uses ghc 9.2 yet
[19:40:26] *** Quits: slac11455 (~slack1256@191.125.99.65) (Remote host closed the connection)
[19:41:17] <davean> what breakage?
[19:41:39] <davean> 0.11 came out over a year ago
[19:42:05] <janus> i just had to send lots of patches for this. for tzdata, HaTeX, wuss
[19:42:26] <janus> and sendfile
[19:42:40] <davean> Huh, I've been on bytestring 0.11 for ages
[19:42:50] <davean> what caused the breaks?
[19:43:17] <janus> people have 'bytestring < 0.11' in their cabal files
[19:43:28] <EvanR> I'll get back to you when I figure out how to do that with cabal, for now moving on
[19:44:02] <janus> even ftp-client has bytestring < 0.11 even though its source repository doesn't have it. does it come from the trustees?
[19:44:02] <davean> EvanR: you need to know how to turn on -Wall with cabal? jsut --ghc-option=-Wall
[19:44:19] <janus> @package ftp-client
[19:44:19] <lambdabot> https://hackage.haskell.org/package/ftp-client
[19:44:56] <davean> no, but it would be bad if there wasn't such a requirement
[19:45:24] <janus> Megan Robinson must have uploaded a package with constraints that aren't in the source repo... how rare
[19:45:24] <EvanR> what... I turned on -Wall somehow... cool
[19:46:09] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[19:46:32] <sclv> janus are you aware of —allow-newer?
[19:46:49] <janus> sclv: yes :P but it's a hack. i shame myself for using it
[19:47:05] <davean> I shame you for using FTP, but here we are
[19:47:20] <janus> i usually just use source-repository-package because then i can send a PR once it compiles
[19:47:24] * shapr enables PASV
[19:47:34] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[19:47:44] <janus> except for sendfile, i had to learn to use darcs :P
[19:47:45] <zincy> tomsmeding: https://hackage.haskell.org/package/hedgehog-1.0.5/docs/Hedgehog.html#t:Command
[19:48:08] <zincy> tomsmeding: Don't think it needs to be pure Nothing according to the examples I have seen
[19:48:33] <tomsmeding> zincy: but gen returns something in the Gen monad, right?
[19:48:42] <tomsmeding> or otherwise that do block makes no sense
[19:49:26] <janus> davean: can't make the freight forwarders implement new stuff...
[19:49:57] <zincy> tomsmeding: Yeah you are right, https://github.com/hedgehogqa/haskell-hedgehog/blob/f8247c1519df37bc324caf8f8af8849816433332/hedgehog-example/src/Test/Example/Registry.hs#L145
[19:50:20] <zincy> look there in the examples I think for gen you need to put it in Var
[19:50:57] <davean> janus: just tell them sftp is super ftp
[19:51:55] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:52:02] <davean> janus: packages that just have constraints that turn out to be tighter than required can just do a revision though, no new version required.
[19:52:39] <janus> davean: but i am only supposed to ask for revisions if the maintainer isn't responding, right? i was thinking to wait 2 weeks
[19:53:07] <zincy> tomsmeding: I think var is for something else. Actually look at the command type again
[19:53:08] <zincy> Maybe (gen (input Symbolic))
[19:54:15] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:97df:ebe3:251c:f0f6) (Quit: WeeChat 2.8)
[19:54:32] *** ChanServ changes topic to 'https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell | AoC Leaderboard: 43100-84040706'
[19:55:12] <davean> janus: you can ask the maintainer to do a revision
[19:55:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:55:41] *** Quits: jeetelongname (~jeet@eduroam-public-46.nat.port.ac.uk) (Remote host closed the connection)
[19:55:50] <janus> aaah right. i just think it is so confusing when the repo is out of sync with hackage
[19:56:03] <janus> took me a long time to notice what was happening with ftp-client...
[19:56:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[19:56:21] <shapr> janus: darcs taught me about ControlMaster for ssh
[19:56:44] *** Quits: _bo (~bo@217.18.216.247) (Ping timeout: 252 seconds)
[19:57:49] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[20:00:10] *** Joins: ub (~Thunderbi@p200300ecdf0ba2aaa54fdd1e9768c0b5.dip0.t-ipconnect.de)
[20:02:06] <sclv> i think for stack repos sometimes they use stack to generate the bounds _on upload_
[20:02:33] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[20:03:58] <janus> oooh that explains it
[20:04:57] <janus> shapr: i wanna use darcs, it's just so few people using it
[20:05:07] <janus> if i had to choose between sourcehut and darcs, i'd choose sourcehut
[20:06:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:07:31] <Franciman> haskell has punished me
[20:07:41] <Franciman> the interpreter in haskell takes 1.9s to compute the sum of the first 10M numbers
[20:07:48] <Franciman> my zig version takes 3.1s
[20:08:01] <Franciman> I feel I can overperform haskell though
[20:08:07] <Franciman> I literally have no optimization
[20:08:16] <Franciman> and haskell is packed with strange quirks to make things super fast
[20:08:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[20:08:28] <boxscape> but not in the interpreter
[20:08:37] <boxscape> unless "the interpreter" does not refer to ghci
[20:08:46] <Franciman> it refers to my software
[20:08:46] *** Joins: jeetelongname (~jeet@eduroam-public-46.nat.port.ac.uk)
[20:08:51] <Franciman> my software in haskell is faster than my software in zig
[20:08:52] <boxscape> ah, I see
[20:09:07] <janus> Franciman: do you need bignum for that?
[20:09:15] <Franciman> nono, plain int64
[20:09:32] <davean> Why is your Haskell version so slow?
[20:09:43] <Franciman> it's an interpreter for my programming language
[20:09:52] <Franciman> so it's my language that is slow
[20:10:02] <davean> Ah, must be doing a lot of extra work
[20:10:08] <Franciman> https://github.com/Franciman/ellipse/blob/stable/src/Eval.hs
[20:10:28] <davean> Oh my yes it is
[20:11:08] <Franciman> like where?
[20:11:10] * Franciman wants to learn
[20:11:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:12:01] <[exa]> Franciman: what's the zig version out of curiosity?
[20:12:35] <Franciman> I want to make clear that it's Franciman's zig version, as that one is Franciman's haskell version
[20:12:36] <davean> well you seem to have no persistent property for your datastructure, from the evaluator's code, and you leave your valeus as references to thunks
[20:12:39] <Franciman> so this does not mean much
[20:12:45] <davean> you probably want to be leaf strict, spine lazy here
[20:12:50] *** Joins: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org)
[20:12:51] <Franciman> one sec [exa] 
[20:13:22] *** Quits: haskl (~haskl@user/haskl) (Ping timeout: 256 seconds)
[20:13:51] *** Joins: OscarH_ (~OscarH@90.201.86.195)
[20:13:52] *** Joins: codolio (~dolio@130.44.130.54)
[20:13:54] *** Joins: dwt__ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[20:13:55] *** Joins: haskl (~haskl@user/haskl)
[20:13:56] *** Joins: madnight (~madnight@static.59.103.201.195.clients.your-server.de)
[20:13:56] *** Quits: OscarH (~OscarH@90.201.86.195) (Ping timeout: 256 seconds)
[20:13:56] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Ping timeout: 256 seconds)
[20:14:01] *** Joins: bgamari_ (~bgamari@64.223.235.131)
[20:14:01] *** Joins: oats_ (~thomas@user/oats)
[20:14:25] *** Joins: aforemny_ (~aforemny@static.248.158.34.188.clients.your-server.de)
[20:14:30] *** Quits: bcoppens_ (~bartcopp@vpn2.bartcoppens.be) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: dolio (~dolio@130.44.130.54) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: hiredman (~hiredman@frontier1.downey.family) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: heath (~heath@user/heath) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (Ping timeout: 256 seconds)
[20:14:34] *** Joins: dtman34_ (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[20:14:57] <Franciman> oh btw, haskell version takes 0.9s
[20:15:01] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: piele (~piele@tbonesteak.creativeserver.net) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: ncopa (~ncopa@gbr2-dev1.alpinelinux.org) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: anderson (~ande@user/anderson) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: dminuoso (~dminuoso@user/dminuoso) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: Teacup (~teacup@user/teacup) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: nisstyre (~wes@user/nisstyre) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: bgamari (~bgamari@64.223.235.131) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: oats (~thomas@user/oats) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: caubert (~caubert@136.244.111.235) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: spoofer (~spoofer@64.185.111.205) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (Ping timeout: 256 seconds)
[20:15:08] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.3)
[20:15:13] *** Joins: Teacup_ (~teacup@user/teacup)
[20:15:17] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[20:15:19] <Franciman> just updating libraries
[20:15:21] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[20:15:24] <Franciman> lol
[20:15:24] *** Joins: piele (~piele@tbonesteak.creativeserver.net)
[20:15:36] *** oats_ is now known as oats
[20:16:09] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[20:16:11] *** Joins: bcoppens (~bartcopp@vpn2.bartcoppens.be)
[20:16:12] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[20:16:13] *** Joins: hiredman (~hiredman@frontier1.downey.family)
[20:16:20] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[20:16:22] *** Joins: heath (~heath@user/heath)
[20:16:35] *** Joins: spoofer (~spoofer@64.185.111.205)
[20:16:37] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[20:16:39] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[20:16:50] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[20:16:55] *** Joins: caubert (~caubert@136.244.111.235)
[20:17:05] *** Joins: anderson (~ande@user/anderson)
[20:17:43] <Franciman> [exa]: https://github.com/Franciman/telescope/blob/main/src/machine/machine.zig
[20:17:45] *** Joins: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de)
[20:17:47] *** Joins: bgamari (~bgamari@2001:470:e438::1)
[20:17:49] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[20:18:12] *** Quits: madnight (~madnight@static.59.103.201.195.clients.your-server.de) (Read error: Connection reset by peer)
[20:18:25] *** Quits: dwt__ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Ping timeout: 256 seconds)
[20:18:25] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[20:18:59] *** Quits: dtman34_ (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[20:18:59] *** Quits: bgamari_ (~bgamari@64.223.235.131) (Ping timeout: 256 seconds)
[20:20:44] *** Quits: niko (~niko@libera/staff/niko) (Ping timeout: 606 seconds)
[20:21:00] <Franciman> let's see how many cache misses I do
[20:21:02] <Franciman> that may be relevant
[20:21:11] <davean> Franciman: high - thats part of what I was refering to
[20:21:29] <davean> not as high as real code would see though because you have a tiny working set
[20:21:30] <Franciman> it's astonishing that in haskell I can do tree walking without getting infinitely many cache misses
[20:21:36] <davean> so whats really more relivent is the conditional branches
[20:22:22] <Franciman> uhm I understand
[20:22:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:23:33] *** codolio is now known as dolio
[20:23:48] <davean> Franciman: so in Haskell you're mostly doing a tree walk instead of a tree walk of a tree walk
[20:24:07] <Franciman> lol in zig I have 51% of cache misses
[20:24:17] <Franciman> I am sure I can get this under haskell
[20:24:25] <Franciman> well I am cheating hard, I have no memory management
[20:24:41] <Franciman> but that may cause cache misses T.T
[20:25:17] <Franciman> davean: I am not sure I understand what's slow with the environment, though
[20:25:33] <Franciman> you want me to have strict leaves in a lazy tree
[20:25:38] <Franciman> isn't that what is happening already?
[20:26:51] <[exa]> Franciman: is it allocating stuff?
[20:26:59] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[20:26:59] <Franciman> yep
[20:27:01] <Franciman> I use an arena allocator
[20:27:14] <Franciman> I first request a page of memory from the OS
[20:27:21] <[exa]> why do you need to allocate stuff for sum(1..10M) ?
[20:27:23] <Franciman> then fill it
[20:27:28] <Franciman> I need to allocate call frames
[20:27:35] <Franciman> which contain pointers and arguments
[20:27:38] <[exa]> oh is that recursive?
[20:27:41] <Franciman> yep
[20:27:49] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[20:28:18] *** Joins: nisstyre (~wes@user/nisstyre)
[20:28:21] *** Joins: niko (~niko@libera/staff/niko)
[20:28:44] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:28:49] <[exa]> so it basically makes some O(10M) of stack?
[20:29:13] <[exa]> that might just explain all of the cache misses.
[20:30:26] <davean> Franciman: how do you run your test in your repository?
[20:30:32] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[20:30:54] <Franciman> [exa]: in haskell it does very few cache misses though, ghc working its magic
[20:31:11] <Franciman> davean: cabal run ellipse tree
[20:31:14] <Franciman> ah wait
[20:31:20] <Franciman> I also have abenchmerak
[20:31:43] <Franciman> with criterion
[20:31:57] <Franciman> note that what you run dependds on the file example.ll
[20:32:05] <Franciman> so one sec, let me update with sum
[20:32:11] <Franciman> (now it computes fibonacci 40)
[20:33:37] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:33:55] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:34:01] <[exa]> Franciman: there's a nice GC trick with nursery
[20:36:49] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[20:38:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:38:22] *** Quits: dawdler (~dawdler@user/dawdler) (Remote host closed the connection)
[20:38:30] *** Joins: lbseale_ (~ep1ctetus@user/ep1ctetus)
[20:39:22] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[20:39:26] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[20:41:55] <Franciman> oh I see
[20:42:04] <Franciman> what does it do?
[20:42:26] <Franciman> davean: now if you run `cabal build ellipse && time cabal run ellipse tree`
[20:42:30] <Franciman> you get a timing
[20:42:30] <EvanR> why does hp2ps output for heap profiles (-hc) always show a time axis from 0 to 0.8 seconds regardless of how long the program runs
[20:42:52] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 264 seconds)
[20:42:58] <EvanR> the graph seems to look like a time graph
[20:43:42] <Franciman> if you want more precise measures there is the benchmark using criterion, 
[20:43:46] <Franciman> cabal bench bench
[20:43:50] <Franciman> but it takes a lot of time :P
[20:44:05] <Franciman> ah ok no, cool
[20:45:42] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:45:56] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:46:47] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 252 seconds)
[20:47:06] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[20:48:13] *** Quits: jeetelongname (~jeet@eduroam-public-46.nat.port.ac.uk) (Remote host closed the connection)
[20:48:16] *** Quits: Lycurgus (~juan@98.4.112.204) (Ping timeout: 264 seconds)
[20:48:53] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:53:32] *** Quits: xff0x (~xff0x@2001:1a81:52c5:f300:6673:fb4d:a3aa:9d2) (Remote host closed the connection)
[20:54:03] *** Joins: xff0x (~xff0x@2001:1a81:52c5:f300:8200:618:b8e3:ab90)
[20:54:23] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[20:54:58] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[20:55:16] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[20:55:25] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[20:57:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:01:59] *** Joins: cv (~cv@202.164.130.248)
[21:02:14] *** cv is now known as almight
[21:02:40] *** Quits: concrete-houses (~g@209.6.150.53) (Ping timeout: 264 seconds)
[21:03:14] <almight> Beginner here
[21:03:15] <almight> Why do most modules in haskell start with Data.Something is that a convention
[21:03:15] <almight> is this a practice for projects as well or just for libraries
[21:04:07] *** Joins: concrete-houses (~g@209.6.150.53)
[21:04:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:05:37] *** Joins: Erutuon (~Erutuon@user/erutuon)
[21:06:01] <davean> almight: Who said they did?
[21:06:14] <almight> I saw a lot many
[21:06:18] <almight> Data.Aeson
[21:06:19] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:4c11:ba21:da7d:dd69) (Quit: gone to sleep. ZZZzzz…)
[21:07:04] <lyxia> almight: it is an old convention, many modern packages don't follow it anymore.
[21:07:04] <maerwald> maybe it means "Datastructure"
[21:07:07] <maerwald> e.g. Data.List
[21:09:04] <almight> lyxia so what is the convention now
[21:09:05] <almight> is it to go package names similar to java
[21:09:05] <almight> like if I have a project haskell-api I go with Haskell.API. etc etc
[21:10:42] <davean> almight: module names are heirarchical (in practice), they categorize - packages categorized as Data related start with Data
[21:10:51] <davean> many start with other things
[21:11:27] <davean> I assure you you also saw Control.
[21:11:46] <almight> yeah you are right
[21:12:18] <davean> Network., HTTP., they start with what groups them
[21:15:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:15:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:15:45] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[21:17:02] *** Quits: fr33domlover (~fr33@2.53.150.205) (Ping timeout: 252 seconds)
[21:21:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:21:18] <geekosaur> whne hierarchical module names were introduced they went a bit wild with the hierarchies, and the result made little sense
[21:21:37] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:22:05] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[21:23:07] *** Joins: jeetelongname (~jeet@148.197.248.46)
[21:25:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:25:23] <boxscape> Is there a simple way to take an instance of Data.Data and produce a String similar to what a derived Show instance would produce?
[21:25:35] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:25:40] *** Quits: jeetelongname (~jeet@148.197.248.46) (Client Quit)
[21:27:21] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:27:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:27:50] *** Quits: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net) (Quit: ZNC - http://znc.in)
[21:28:22] *** Joins: jeetelongname (~jeet@148.197.248.46)
[21:29:22] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[21:29:52] *** Quits: jeetelongname (~jeet@148.197.248.46) (Read error: Connection reset by peer)
[21:29:58] <jle`> hm .. probably not
[21:30:08] <jle`> you can print the constructor easily though
[21:30:13] <jle`> but the contents are a different story
[21:30:45] <boxscape> hm, okay, thanks
[21:30:48] <jle`> hm, but i do wonder now how close you can get
[21:31:19] <jle`> hm...
[21:31:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:31:39] <jle`> if all of the contents have types that are ADT's
[21:31:47] <jle`> all the way down to the bottom
[21:31:55] <jle`> then you could probably get there
[21:32:26] <boxscape> (The type I'm interested in is HsExpr from ghc)
[21:32:54] *** Joins: jeetelongname (~jeet@eduroam-public-46.nat.port.ac.uk)
[21:33:19] <jle`> oh, you can also do it with Integer, Char, but not String
[21:33:27] <jle`> ooh, you can maybe special-case string
[21:33:40] <Tisoxin> or rather, expand it?
[21:33:41] <boxscape> yeah
[21:33:41] <Tisoxin> What utilities are there to test Template Haskell?
[21:34:13] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[21:34:35] <jle`> boxscape: so uh, there is a way for many cases, but not necessarily simple unless someone has already written out the library
[21:34:46] <boxscape> yeah, okay
[21:35:36] <boxscape> (showing just the constructor gets me about 80% of the value, so that's probably good enough for now)
[21:35:42] <jle`> this might be helpful for inspection, if it still builds https://hackage.haskell.org/package/data-tree-print
[21:35:53] <geekosaur> I thought HsExpr came with an instance of Pretty or whatever ghc calls it
[21:35:59] <boxscape> oh, neat
[21:36:16] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 264 seconds)
[21:36:33] <boxscape> geekosaur: yes but that just prints out Haskell source code, not very useful when what I'm interested in is the structure of the HsExpr
[21:36:43] <boxscape> as a Haskell type
[21:37:37] <jle`> if you're just doing it for debugging you can probably standlone deriving it
[21:38:10] *** Quits: almight (~cv@202.164.130.248) (Quit: Client closed)
[21:38:11] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:38:17] <boxscape> I tried, I spend 15 minutes adding ever more complex constraints ghc asked me to add to the derived instances before giving up
[21:38:42] <boxscape> the "Trees that grow" structure doesn't make it very obvious which types ultimately need an instance
[21:38:51] <boxscape> s/spend/spent
[21:38:53] *** Quits: nschoe (~quassel@178.251.84.79) (Ping timeout: 256 seconds)
[21:39:07] <jle`> fair enough
[21:39:16] *** Joins: pfurla (~pfurla@201.17.118.230)
[21:39:21] *** Parts: kadir (~kadir@88.251.54.110) (WeeChat 3.3)
[21:39:54] <boxscape> (on the other hand, adding adding a standalone derived Show instance to CoreExpr was pretty straightforward)
[21:39:57] <boxscape> s/adding//
[21:40:27] *** Joins: jakalx (~jakalx@base.jakalx.net)
[21:41:54] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:43:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:43:56] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:45:05] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[21:48:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[21:48:37] *** Quits: mbuf (~Shakthi@122.174.165.234) (Quit: Leaving)
[21:49:48] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Client Quit)
[21:51:36] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[21:56:43] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Quit: Leaving...)
[21:57:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Remote host closed the connection)
[21:59:04] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 264 seconds)
[21:59:56] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[22:04:26] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:04:28] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 264 seconds)
[22:10:23] *** Quits: rkrishnan (~user@122.171.76.46) (Ping timeout: 252 seconds)
[22:11:33] *** Quits: ub (~Thunderbi@p200300ecdf0ba2aaa54fdd1e9768c0b5.dip0.t-ipconnect.de) (Quit: ub)
[22:11:56] *** Joins: ub (~Thunderbi@p200300ecdf0ba2aaa54fdd1e9768c0b5.dip0.t-ipconnect.de)
[22:12:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[22:14:05] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[22:14:14] <Franciman> ok, I tried a sum 100
[22:14:22] <Franciman> and I crush, totally destroy the haskell implementation
[22:14:28] <Franciman> so it's all about memory management
[22:14:30] <Franciman> T.T
[22:14:33] *** Joins: zebrag (~chris@user/zebrag)
[22:14:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:15:10] <EvanR> @src 100
[22:15:10] <lambdabot> Source not found. You type like i drive.
[22:15:13] <EvanR> @src sum
[22:15:14] <lambdabot> sum = foldl (+) 0
[22:15:20] <EvanR> oof xD
[22:15:34] <EvanR> I hope you didn't beat that implementation
[22:15:44] <EvanR> it would be so sad
[22:16:07] <dsal> The real sum is similar.
[22:16:36] <dsal> Oh, maybe I'm thinking of an older one:      sum = getSum #. foldMap' Sum
[22:17:04] <dsal> This is why I get so annoyed when people are like, "OMG!  Don't use `sum` it's a very bad idea!"
[22:17:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:17:52] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:18:02] <dsal> Yeah, the previous release was:      sum = getSum #. foldMap Sum
[22:18:52] <EvanR> maybe there is magic strictness analysis 
[22:19:08] <dsal> They added a ' in the latest release.
[22:22:59] <EvanR> for all Foldables?
[22:23:19] <dsal> That's what sum says.
[22:23:40] *** Joins: _bo (~bo@217.18.216.247)
[22:23:41] <EvanR> o_O
[22:23:48] <dsal> product also uses foldMap'
[22:24:12] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[22:24:23] <oats> I was tweaking my advent of code framework project, and discovered a trick with GADTs that lets me put `Day` records with different "internal" types into the same list. I thought it would be cool if a Day were just a record with a day number, a parser, and the part1 & part2 functions, but quickly realized you couldn't put different `Day a` values in the same list.
[22:24:24] <oats> But GADTs let you hide the `a` somehow??? I'm not 100% sure why this is valid, any insight would be nice: https://github.com/oatberry/aoc2021-haskell/blob/main/src/Common.hs#L18
[22:24:32] *** Joins: zebrag (~chris@user/zebrag)
[22:25:16] <awpr> those are "existential types"
[22:25:35] <EvanR> GADTs + RankN = existential
[22:25:58] <dsal> Oh, I was just about to ask that question.
[22:26:07] <dsal> I don't know the weird dependency graph these extensions have.
[22:26:20] <dsal> I expected to see ExistentialQuantification turned on there.
[22:26:30] <oats> dsal, seems to work without that
[22:26:33] <EvanR> that's something else
[22:26:36] <oats> assuming you're responding to me :P
[22:26:44] <EvanR> data Foo = forall a . Bar a
[22:27:00] <EvanR> and is weird xD
[22:27:00] <awpr> when matching the `Day` constructor, type variables come into existence that can't be related to anything outside the GADT pattern match (except to the extent the other things in the GADT help you do that)
[22:27:12] * pragma- stares at "You type like i drive."
[22:27:39] <awpr> `data Foo = forall a. Bar a` that's just the non-GADT syntax for the same thing as `data Foo where Bar :: forall a. a -> Foo a`
[22:27:56] <awpr> GADTs the extension enables that by default IIRC
[22:28:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[22:28:57] <oats> so am I going to get a unique specialization of `runDay` for each of the different `Day` values it gets run on?
[22:29:08] <awpr> er, `forall a. a -> Foo` I mean
[22:29:12] <EvanR> I think you need rankN types too
[22:29:20] <oats> again, this compiles as is :P
[22:29:28] <EvanR> whu
[22:29:47] <EvanR> whatever I wish like 19 extensions were just always on xD
[22:29:58] <oats> haha
[22:30:16] <awpr> the file enables GADTs, that should be sufficient to allow this (and it seemingly is)
[22:31:15] <dsal> GADTs isn't documented to imply existential quantification.  I'm just going to be confused and try to see if I can get my package delivered.
[22:31:16] <EvanR> you can hide the different a, but then the burden is on you to figure out how to do anything with them after the type is forgotten
[22:31:20] <awpr> I'm not sure I'd call the `runDay`s applied to different records "specializations" exactly, but they do have "different" types internally for the parsed input and part1/part2 results
[22:31:22] <EvanR> you're right
[22:32:04] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[22:32:04] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[22:32:04] *** finn_elija is now known as FinnElija
[22:32:13] <dsal> How I haskell:  Write code I want.  Follow errors until GHC says my code is perfect.
[22:32:21] *** Quits: max22- (~maxime@2a01cb08833598007c2e741a7c59ca1a.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[22:32:58] <EvanR> gutter bumper programming
[22:33:41] <awpr> GHC user guide: "`ExistentialQuantification` |  Enables liberalized type synonyms"
[22:34:31] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:36:18] <awpr> okay from a quick experiment it looks like `GADTs` does not enable the non-GADT `ExistentialQuantification` syntax, but GADT constructors can still have existentials (by having a forall in their type).  so it seems like `ExistentialQuantification` is specifically about the non-GADT syntax for existentials
[22:36:38] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[22:38:44] <hololeap_> what was the CPP "macro" or whatever that checks to see if you're on linux or windows, and is there a reference somewhere for these?
[22:38:52] *** hololeap_ is now known as hololeap
[22:39:02] <tomsmeding> yeah, looking in compiler/GHC/Driver/Session.hs in the ghc source, ExistentialQuantification is really not implied by anything
[22:39:15] <tomsmeding> hololeap: there is no standard for that
[22:39:21] <tomsmeding> there is only convention
[22:39:29] <tomsmeding> __linux__ works IIRC
[22:40:00] <tomsmeding> hololeap: https://stackoverflow.com/questions/4605842/how-to-identify-platform-compiler-from-preprocessor-macros
[22:40:25] <tomsmeding> (see also the link for other windows compilers)
[22:41:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Remote host closed the connection)
[22:41:28] <monochrom> But it does on my GHC 8.10.7.  I have: {-# language GADTs #-} module N where data X = forall a. X a
[22:43:08] <monochrom> Also 9.2.1
[22:43:12] <hololeap> ok. I'm trying to patch a library so that it doesn't use the deprecated system-filepath package, and I _think_ they are trying to do some path manipulations in a portable way. it isn't entirely clear why they're still using that package
[22:44:21] <hololeap> https://github.com/hololeap/happstack-server/commit/4cd5dc843f300a8f0ef9eec42f347088141e121a
[22:45:08] <hololeap> so I was considering adding some check to import System.FilePath.Posix or System.FilePath.Windows
[22:45:49] <geekosaur> doesn't System.Filepath do that check?
[22:45:58] <awpr> hmm, indeed it does on 8.10.4.  replit.com has 8.6, so apparently it was changed between then
[22:46:07] <hololeap> oh, maybe it does
[22:46:31] <hololeap> it just says that it re-exports System.Filepath.Posix on my local docs, but that's probably because I'm on linux
[22:47:03] <hololeap> geekosaur: yeah it does. thanks for that info
[22:47:12] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[22:48:05] <hololeap> cool. that means my patch will be portable as-is
[22:49:38] <hololeap> I had to re-create the commonPrefix function because it doesn't have any equivalent in the filepath package that I can find
[22:49:39] <hololeap> https://github.com/hololeap/happstack-server/commit/4cd5dc843f300a8f0ef9eec42f347088141e121a#diff-1927ef8b0f037f9a41033f83ef3102f7bd49aced7564e17f7f4696b7e33378ffR393-R401
[22:50:33] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[22:52:02] <hololeap> just curious if anyone can find any improvements on that, or if it's premade somewhere I didn't notice. I don't want to add any new packages to the .cabal file, so no dlist or unordered-containers
[22:53:43] <hololeap> it doesn't seem like it's used anywhere but that one function, so it's probably fine
[22:56:58] *** Joins: MoC (~moc@user/moc)
[22:57:24] <zero> there is no better way to indent this? https://paste.jrvieira.com/1638300408372
[22:58:54] <monochrom> I put "let args" on the same line.
[22:58:58] <geekosaur> I'd probably "cuddle" `args` and the first following guard, and reindent the others accordingly
[22:59:15] <monochrom> Optionally, I put "let args | null d = Right (ny, nd)" on the same line.
[22:59:28] <geekosaur> are you using a formatter? I think this is one of the things people complain about with ormolu?
[22:59:42] <janus> hololeap: what's the point of `commonPrefix [a, b] == a`? couldn't you just have 'a `isPrefixOf` b'?
[23:00:04] <monochrom> <cynical>ormolu would also put "=" on its own line </cynical>
[23:00:12] *** Quits: viluon (uid453725@id-453725.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:00:28] <hololeap> janus: that's just what they had originally, and you're right
[23:00:35] <geekosaur> and I think it prefers 2 to 3
[23:00:46] <geekosaur> (spaces indentation that is)
[23:01:27] <janus> hololeap: well since we're touching the code we may as well simplify it... i can't see how commonPrefix could be superior in any sense, this is not even specific to paths
[23:02:46] <monochrom> This can go deep into algebra thinking (equations) vs analysis thinking (<='s).
[23:03:03] <hololeap> the system-filepath package doesn't treat FilePath as a type synonym for String, so I think they had to do things a little differently
[23:03:14] <monochrom> You are looking at "meet(a,b)=a iff a<=b".
[23:03:17] <zero> let args | ... works but let args\n | ... gives me a syntax errr
[23:04:26] <geekosaur> check your indentation
[23:04:32] <zero> https://paste.jrvieira.com/1638300858476
[23:04:36] <zero> ^ this errors
[23:04:36] <Franciman> I just need to understand haskell's memory tricks
[23:04:58] <geekosaur> right, it has to be indented past the start of `args` by at least one space
[23:05:12] <geekosaur> layout is a bit finicky
[23:05:54] <geekosaur> so if you have the | under the `r` or further right it'll work
[23:05:55] <janus> hololeap: btw will you be sending a PR? we also use happstack
[23:06:20] *** Joins: deadmarshal (~deadmarsh@95.38.229.118)
[23:06:34] <zero> geekosaur: hate layout -.-
[23:06:43] <Franciman> +1 zero 
[23:06:45] <Franciman> +1 zero 
[23:06:56] <monochrom> You can always use {;} to override layout.
[23:07:22] <hololeap> janus: yes, I will
[23:07:22] *** Joins: max22- (~maxime@2a01cb088335980070cf7b273a01dbc1.ipv6.abo.wanadoo.fr)
[23:07:24] <monochrom> do { ny <- ... ; nd <- ...; let {args | ... }; run args }
[23:07:32] <Franciman> ;)
[23:08:11] <hololeap> and I don't use it. I'm trying to get rid of system-file{io,path} from gentoo-haskell and there are a few packages that still use it
[23:08:23] <hololeap> so I've been doing some janitorial work ;)
[23:09:12] <yushyin> layout is fine, you just need to learn the rules
[23:09:17] <hololeap> volunteer janitorial work
[23:10:07] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[23:11:11] <janus> hololeap: oh nice, let's hope maintainers will be responsive! thanks for doing the work
[23:12:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:13:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:14:35] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[23:18:27] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[23:18:56] <zero> yushyin: the rules are not fine
[23:19:10] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:20:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:20:38] <zero> losing the indentation level context significance is a mistake from a visual interface design prespective. basic gestalt
[23:21:44] <zero> but that's a talk for another time
[23:22:45] <dsal> zero: if the compiler can't tell what you mean, would another programmer?
[23:23:40] <monochrom> dsal, I think that this is a lost cause because in zero's anecdotal example, yes I can.
[23:23:49] <zero> i'm not excusing my mistake, i'm criticizing layout rules
[23:24:09] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[23:24:36] <monochrom> Generally, if someone who doesn't know the whole picture argues from armchair high horse, don't engage.
[23:24:56] <monochrom> Recall my memoized randomization model!
[23:25:28] <monochrom> memoized randomization post-mortem rationalization
[23:26:10] <dolio> Every programming language has examples where a programmer can figure out what was meant, but the compiler can't because of its particular rules.
[23:26:11] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[23:26:39] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:26:44] <boxscape> that means it's time to replace parsers by neural networks :P
[23:26:45] <zero> i would argue that the inverse is also true
[23:26:50] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[23:26:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:27:02] <zero> monochrom: you've lost me there
[23:27:14] *** Joins: cheater (~Username@user/cheater)
[23:27:19] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[23:27:36] <monochrom> No, you lost me first with your "context" "significance" "visual" "design" high horse.
[23:28:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:29:22] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Client Quit)
[23:31:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:32:53] *** Joins: econo (uid147250@user/econo)
[23:33:52] <zero> ah
[23:34:22] <int-e> boxscape: that's okay if your model of programming is to write something and run it so that *something* happens.
[23:34:31] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[23:34:46] <int-e> personally I want to have more control than that
[23:35:05] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 252 seconds)
[23:35:11] <geekosaur> shades of watfiv
[23:37:02] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:15] <zero> monochrom: tldr having the level of indentation signify context (having similar contexts vertically align) is a powerful psychvisual tool. misalignment (as layout not only permits but incentivies) difficults interpretation
[23:37:27] <zero> (sorry if my english is too broken)
[23:38:29] <zero> *pychovisual *incentivizes
[23:38:42] <monochrom> But the Haskell layout rules does not encourage misalignment.
[23:39:04] <zero> i disagree
[23:39:08] <monochrom> It just doesn't accept certain alignments you think are "intuitive".
[23:40:03] <geekosaur> personally I think the alignment you wanted to use makes little sense
[23:40:12] <yushyin> layout enforces this even more, imo. if something is not further indented than the previous lexeme, why should it be part of it?
[23:40:18] <monochrom> And it has to reject them because the layout decoding algorithm is working under restrictions. It cannot afford to be smarter.
[23:40:26] <geekosaur> try adding a second binding after the first and see how much sense your indentation makes
[23:40:33] <yushyin> ^ this
[23:42:01] <zero> i'm not focused on my earlier example. i agree with you there
[23:42:21] <zero> again, i'm not defending my mistake
[23:42:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[23:43:25] *** Quits: kuribas (~user@ptr-25vy0i8s19mxk1vvjxp.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[23:44:23] <boxscape> zero do you have an example in mind of something that you are criticizing?
[23:45:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:45:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:46:04] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c)
[23:46:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[23:46:46] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:49:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:50:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:51:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[23:53:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:54:03] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:55:05] <Franciman> can I use cachegrind on an haskell executable?
[23:57:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:58:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:59:40] <Hecate> Franciman: I think you should be able to do so
