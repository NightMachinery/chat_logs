[00:00:02] <gilberth> * base
[00:00:17] <White_Flame> what do you mean by "entity"?  and yeah, facts are kind of just knowledge
[00:00:37] <White_Flame> I don't do direct foreign object instances as facts, as some try doing
[00:00:45] <White_Flame> especially as I"m not a big OO guy anymore
[00:00:56] <gilberth> Nah, this wikipedia link posting electrical horse.
[00:01:20] <White_Flame> heh
[00:01:36] <gilberth> Anyhow, so what's the knowledge? Idiomatic code sequences to recognize? This sort of things?
[00:01:58] <White_Flame> but I am kinda proud that I'm 20,000x faster than the prolog forward chainer, altough that one is known really, really slow ;)
[00:02:20] <White_Flame> applications in a rule engine have their entire state stored in facts
[00:03:05] <gilberth> So like Prolog only backwards?
[00:03:06] <White_Flame> and their entire core execution model is the firing of rules
[00:03:28] <White_Flame> well, prolog is backwards, and this is forwards ;)  (and soon both, hopefully)
[00:03:58] <gilberth> Yes, but backwards backwards is forwards, isn't it?
[00:04:16] <White_Flame> but yes, if you have prolog a(X) :- b(X)., then with forward cahining, asserting b(1) immeidately also creates a(1), and then a(1) can trigger other things etc
[00:04:35] <gilberth> Well, yes, you have fact that trigger new facts/insights, right?
[00:04:46] <White_Flame> so it works on "noticing" things based on its rules, rather than manual event handling & control flow
[00:05:00] <White_Flame> yep
[00:05:29] <White_Flame> but, making deep inferences about things are a pain in FC, while prolog-style BC is much better at that
[00:05:31] <gilberth> It's been some 30 years since I was into this kind of things.
[00:05:50] <White_Flame> and so having FC fire on BC query answers (which can change as facts change, too) is kind of the holy grail
[00:06:25] <White_Flame> I absolutely obliterated RETE already, so even just doing fake BC on top of FC would be better now, but that still would be a memory explosion
[00:06:32] <White_Flame> I need to scale to billions of facts
[00:06:44] <gilberth> So the idea is, you make a little change to the facts and the system would with minimal work adjust its world-view?
[00:06:56] <White_Flame> well, not absolutely minimal work
[00:07:14] <gilberth> Right. Is there even a minimum?
[00:07:15] <White_Flame> that's the thing, other FC systems maintain all their intermediate inferences and blow up memory
[00:07:29] <White_Flame> which techincallly tracks the minimal amount of change necessary for any given fact change
[00:07:44] <White_Flame> but, that's a monstrous space tradeoff
[00:08:12] <White_Flame> I eliminated the entire "beta network" of rete, while still having generally constant time inference regardless of number of facts
[00:08:48] <gilberth> Can I have that for a CL system. Suppose the whole system is compiled with type-inference. And I redefine a function FOO previously inferred to always return say a FIXNUM, to something which might also return an INTEGER?
[00:08:52] <White_Flame> by basically starting over from core principles and better ideas
[00:09:24] <White_Flame> yeah, I know that problem all too well :-P
[00:09:54] <White_Flame> there's nothing in the spec that prevents a lisp implementation from recompiling old assumptions when things change, but nobody has done he work
[00:10:15] <gilberth> How does that "starting over" work? Do you peek at your previous idea-of-the-world as cache or something?
[00:10:33] <White_Flame> "starting over" as in rederiving algorithms
[00:10:42] <gilberth> White_Flame: I am dreaming about such a CL for decades.
[00:11:36] <gilberth> Ok, you rederive. But can you reuse part of the previously done work?
[00:11:41] <White_Flame> but this CL issue is also why I constantly deride its "mutating the image" model instead of a more declarative approach
[00:11:46] <White_Flame> nope
[00:11:50] <White_Flame> the previous work sucks ;)
[00:12:03] <gilberth> I see.
[00:12:09] <White_Flame> I'm talking about clean sheet of paper creation of the software, not what hte thing does at runtime
[00:12:28] <White_Flame> I threw out all the old implementation ideas of what came before
[00:35:07] <random-nick> how is "mutating the image" different from a declarative approach?
[00:35:24] <White_Flame> because your mutations are one-and-done with no tracking
[00:35:40] <White_Flame> now you just have a mutated image with no record of how you got there, how to undo it, or how to change it
[00:50:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:00:54] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:a81a:aef8:4653:fe6c) (Ping timeout: 250 seconds)
[01:02:04] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e14b:875c:3570:34de)
[01:09:35] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[01:17:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:42:34] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:43:38] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:50:20] *** Quits: kevingal (~quassel@176.61.88.240) (Remote host closed the connection)
[02:54:24] *** Joins: lisp123 (~lisp123@120.154.103.52)
[02:59:19] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[03:00:15] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[03:00:33] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[03:37:51] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 245 seconds)
[03:43:33] <hayley> https://www.youtube.com/watch?v=laKt80x0E4k
[03:43:33] -ixelp- KING CRIMSON “Starless” (Live at Orchard Hall in Tokyo 8th December 2021) - YouTube
[03:55:03] *** Joins: lisp123 (~lisp123@120.154.103.52)
[03:59:48] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 272 seconds)
[04:04:42] <clothespin> arcball seems to be a popular camera paradigm
[04:05:03] <clothespin> but it seems so asymmetrical
[04:22:13] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:30:59] <moon-child> White_Flame: I don't see how a declarative approach works when you want to contradict statements you've made previously
[04:31:11] <moon-child> 'record of how you got there, how to undo it'  can be provided by snapshots
[04:31:34] <moon-child> as well as better infrastructure e.g. storing function source code inside the associated function object
[04:36:12] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 240 seconds)
[04:36:18] *** Joins: pjb (~pjb@user/pjb)
[04:38:20] <White_Flame> moon-child: if the declarations change, then the system that the declarations describe are brought into sync with it
[04:38:42] <White_Flame> "contradict statements you've made previously" == "change the declarations"
[04:39:38] <moon-child> oh, I see
[04:39:40] <White_Flame> as an example, renaming a function in CL sucks, as the old one lingers around, is statically referenced by some things, and you have to remember to fmakunbound it
[04:40:09] <kakuhen> <Lycurgus> "i rarely use /ignore but there..." <- he's an infamous troll who used to lurk around FSF and GNU channels on leenode
[04:40:18] <White_Flame> and yeah, you can see where that goes then, vs renaming a declaration of what function should exist
[04:40:34] <moon-child> I still think this is mostly a ui problem
[04:40:36] <moon-child> but the point is taken
[04:40:37] <White_Flame> kakuhen: and lisp channels, too
[04:40:47] <kakuhen> normally when they speak I just assume any interaction with them is playing with the demon core
[04:41:49] <kakuhen> but yeah i guess they are gone from here for now
[04:42:03] <pl> Wait, what, epony as advisor to Lee? 
[04:42:38] <moon-child> White_Flame: I was thinking about this problem in relation to my apl recently.  Though, apl is referentially transparent, which makes everything 10 times easier :P
[04:42:45] <White_Flame> I'm not sure if he knew lee beforehand, but was certainly prominent during the switchover
[04:43:13] <White_Flame> moon-child: yeah, most of the stuff I do is reftran 
[04:43:28] <White_Flame> or I should say, most of the stuff I build is
[04:43:28] <moon-child> reftran?
[04:43:33] <White_Flame> referentially transparent
[04:43:52] * moon-child nods
[04:44:29] <pl> White_Flame: I'm confused if that's surprising achievement for epony, or sign that Lee fell even lower than I thought 
[04:44:48] <White_Flame> certainly the latter
[04:44:59] <moon-child> yes definitely
[04:45:02] <moon-child> I think I will permit 'pods' (somewhere between modules and images) to refer to each other weakly, but not sure what the details will look like
[04:45:04] <White_Flame> lee has zero clue what he's doing
[04:46:10] <kakuhen> King Lee
[04:46:19] <kakuhen> respect your elders /s
[04:46:46] <White_Flame> he ain't my elder, not by a long shot ;)
[04:46:52] <kakuhen> i still have a copy of that "king lee" song somewhere, in case he'd ever remove it from youtube
[04:55:11] <pl> Heh, for me there's only one "King Lee" song 
[04:55:23] <pl> "King Bruce Lee Karate Master" 
[04:57:41] <drakonis> what's epony's deal?
[04:57:56] <White_Flame> a pair of 3s
[04:58:57] <White_Flame> but srsly he's a simple-minded person from some eastern european country with a failed economy who blames the west for everything
[04:59:22] <White_Flame> or "failed" to whatever his conspiracy tolerance is
[04:59:28] <phoe> drakonis: I have no idea what his deal is, but the answer this time is "русский военный корабль, иди нахуй"
[05:01:11] <drakonis> ha
[05:01:37] <drakonis> i see
[05:01:43] <drakonis> also i spotted fare on irc lol
[05:01:53] <drakonis> i thought he moved into scheme
[05:18:51] <hayley> We'll see how he fares.
[05:26:22] *** Joins: lisp123 (~lisp123@120.154.103.52)
[05:30:37] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[05:31:34] <neominimum> i see wat u did there
[05:41:09] <hayley> https://www.nbcnews.com/politics/politics-news/live-blog/russia-ukraine-conflict-live-updates-n1289655/ncrd1289789
[05:41:10] -ixelp- On TikTok, livestreams show protests — and attract scams
[06:00:00] <drakonis> hayley: hehehehe
[06:06:17] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[06:20:20] *** Joins: Posterdati (~posterdat@host-87-20-238-140.retail.telecomitalia.it)
[06:24:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[07:00:53] <moon-child> 'a high-performance, high-concurrency ECS implementation for Java'
[07:00:56] <moon-child> no pointer is safe!
[07:01:19] <drakonis> what, no clojure?
[07:03:22] *** Joins: Lycurgus (~juan@98.4.112.204)
[07:06:11] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:10:49] <hayley> https://www.youtube.com/watch?v=19bhY6xHqHo
[07:10:49] -ixelp- Careful With That Axe, Eugene (BBC Radio Session, 16 July 1970) - YouTube
[07:14:33] *** Joins: lisp123 (~lisp123@120.154.103.52)
[07:19:00] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[07:34:12] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[07:40:33] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[07:58:01] *** Joins: semz_ (~semz@user/semz)
[08:00:58] *** Quits: semz (~semz@user/semz) (Ping timeout: 260 seconds)
[08:10:05] *** Joins: lisp123 (~lisp123@120.154.103.52)
[08:20:34] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[08:36:11] *** Joins: lisp123 (~lisp123@120.154.103.52)
[08:41:19] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[09:37:46] *** Joins: lisp123 (~lisp123@120.154.103.52)
[09:53:09] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[09:58:24] *** Joins: lisp123 (~lisp123@120.154.103.52)
[10:44:55] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[10:46:21] *** Joins: lisp123 (~lisp123@120.154.103.52)
[11:05:45] <hayley> https://www.youtube.com/watch?v=2VAHnZ7fu_8
[11:05:45] -ixelp- VALVE'S NEW GAME - YouTube
[11:07:43] <aeth> Half-Life 3?
[11:07:54] <hayley> Yes, absolutely.
[11:08:52] <hayley> Apparently switch-case is also banned in C++ class. Lucky I dodged that one then.
[11:09:10] <moon-child> whut
[11:09:26] <moon-child> what _are_ you allowed to use?
[11:09:28] <hayley> So are break, continue, and using more than one return statement. Truly unhinged.
[11:09:34] <moon-child> are structs allowed?
[11:09:36] <moon-child> functions
[11:09:39] <moon-child> ?
[11:09:54] <hayley> goto is also banned, but I think that's expected for a "strict-ass teacher bans things" list.
[11:09:58] <hayley> I sure hope they are.
[11:13:53] <neominimum> moon-child: One must fight the rest of the class to scrabble up enough !'s and &&'s  together to create a turing machine which can be used to implement what ever functionality is desired. Simple really
[11:14:06] <hayley> OTOH disappointing that I can't do any fun algorithmic hacks with CPython. Yes, you can predict the runtime of an algorithm without having written it. It'll be slow.
[11:14:36] <hayley> But it does provide evidence for the idea that you can just watch your O() to get performance.
[11:15:18] <hayley> The lovely thing about compilers is that you can write slow code, and just not having interpreter overhead will let you get away with it for a bit longer than usual.
[11:16:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[11:31:24] <White_Flame> hayley: start using setjmp/longjmp just because ;)
[11:34:12] *** Joins: eugercek (~user@user/eugercek)
[11:40:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[12:59:42] *** Joins: kevingal (~quassel@176.61.88.240)
[13:00:32] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[13:23:37] <gilberth> *sigh* Do I have to borrow everything from ancient Closure? Most time eaten with Free-CLIM is in XLIB:TEXT-EXTENTS. I remember --- for different reasons --- having my own. Why is it so slow? Can it be fixed?
[13:24:59] <gilberth> BTW, getting text extents is slow with Cocoa, too. And both Chrome and Safari must have their very own routines as they render HTML faster than I can even query all needed text extents.
[13:26:43] *** Joins: notzmv (~zmv@user/notzmv)
[13:27:26] <moon-child> if it helps, direct2d is slow as shit too
[13:27:57] <gilberth> Terrific.
[13:28:44] <gilberth> I don't feel like having my own routine to turn Unicode into glyphs to render.
[13:28:58] <moon-child> yes, it is not so nice
[13:29:10] <moon-child> I don't want to write that routine either.  I just want to rasterize nice curves.  Alas
[13:30:18] *** Joins: sepanko (~sepanko@user/sepanko)
[13:30:19] <gilberth> Well, it was trivial in the 90s. A character code was a glyph. And the most difficult thing was a ligature and a kerning table, if at all.
[13:31:05] <moon-child> I mean, shaping and combining and rtl serve very valid use-cases
[13:31:38] <gilberth> Anyhow, I intend to implement a cache for the ASCII and monospace case.
[13:32:07] <gilberth> moon-child: Sure. But I really don't want to dig all the rules that there are. Must be a ton.
[13:32:11] <moon-child> NB. still have to deal w/double-width in monospace
[13:32:16] <moon-child> 'must be a ton'  yeeeep
[13:34:09] <gilberth> moon-child: I'll cover the ASCII or perhaps ISO-8859-1 range. That should catch 99% of all listener use cases. There should be no kerning, no ligatures. And when I face a different font or a different code point, I could as well punt.
[13:34:42] <moon-child> what happens somebody wants to write a bunch of cjk text?
[13:35:24] <gilberth> I punt and don't use my own cache.
[13:36:09] <moon-child> then it becomes slow?
[13:36:11] <hayley> Real Rust regex hours
[13:36:31] <moon-child> at least something like an lru cache for recently used glyphs would be good
[13:36:40] <moon-child> even if you don't do the actual annoying part yourself
[13:36:46] <gilberth> moon-child: Well, as slow as whatever ithe official platform API, yes.
[13:38:23] <gilberth> moon-child: In face of combining characters, kerning, ligatures and those final, initial and mid glyphs and bidi, I could have a cache only, if I actually implement all that, which I won't do.
[13:40:19] <gilberth> And to get at all that information I would need to dig the actual font files. So I would need to implement that too. Which defeats the whole intent that by backends just use what is regarded as native with the platform. I don't want that you need to tell CLIM where to find fonts e.g.
[13:42:37] <gilberth> As I do want to implement an "interface manager" and not a rasterizer. That would be another project and as thousand of people already hack on the latter, I don't see the point.
[13:44:08] <moon-child> there are only 2~3 with gpu acceleration, just sayin ... :)
[13:44:20] <moon-child> (but we've had this discussion before)
[13:44:40] <gilberth> I don't live forever.
[13:45:27] <moon-child> one thing you might do: implement in terms of qt
[13:45:37] <moon-child> if you really want your hands to be as clean as possible
[13:45:45] <moon-child> of course, that comes with its own problems
[13:46:26] <moon-child> but a middle ground: I think pango abstracts over macos/windows text rendering/shaping/layout functionality (and provides its own on linux)
[13:46:31] <moon-child> could be worth thinking about
[13:47:47] <gilberth> Well, for Linux I will perhaps resort to Pango. For Cocoa I don't need to. It would be another unneeded dependency.
[13:49:05] <gilberth> See, I am not there to fix graphics and text rendering.
[13:50:45] <moon-child> pango will punt to cocoa on macos, though, I am pretty sure
[13:52:18] <moon-child> so you would get the same result
[13:52:44] <moon-child> and if you must take the maintenance burden of pango anyway, then you do not need to expend so much effort if you only support it.  And abstract the protocol properly, and somebody else may make a pure-cocoa implementation
[13:54:48] <gilberth> Well, it's about two dozen lines to implement CLIM's medium-draw-text and text-size with Cocoa. It's there, it works fine. I see no point in replacing it.
[13:55:32] <moon-child> not if you need a cache
[13:55:40] <moon-child> and go slowly for non-ascii text
[13:56:00] <gilberth> I will use the cache for any port.
[13:56:54] <gilberth> I don't care if it is slow for non-ASCII cases for I don't use fancy characters.
[13:57:18] <moon-child> sure.  But somebody else may.  And they might prefer to use the pango rendering in that case
[13:58:37] <gilberth> Then they should either fix it or use the GTK port to come. My task is not to fix and/or replace whatever graphics/text library comes with the user's system.
[13:59:31] <moon-child> you do not _have_ to do anything.  But in general, your users will be happier if you deliver them a nicer experience rather than a less nice one
[13:59:37] <moon-child> You do not have to care about your users.  But you seem to
[14:00:15] <gilberth> Yes and I define nicer experience with "just works" and "blends well".
[14:00:40] <moon-child> you think pango will not work or blend less well with the system?
[14:01:05] <gilberth> And with "just works" I also mean that whatever fonts and keyboard layout is configured works with CLIM too. This implies that I'll use libX11 for X11.
[14:02:21] <gilberth> moon-child: As I said: For Linux I will perhaps use Pango. For macos I don't see the point in pulling in another dependency, which could fail to be found at run time and which could be misconfigured or which could have random bugs.
[14:05:37] <gilberth> I have the CLX backend there only because it is the most portable and Lisp-only fall back.
[14:16:15] *** Joins: treflip (~user@user/treflip)
[14:16:18] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[14:16:52] *** Joins: treflip (~user@user/treflip)
[14:17:44] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[14:41:08] * hayley still needs to design one damn feedback switch for one-more-re-nightmare.
[14:42:18] <hayley> I think (load-time-value (vector nil)) can be my state, but deciding when to flip the switch is hard.
[14:43:05] <hayley> If I updated on every loop, I could get in trouble if e.g. it's the initial tight loop and two threads are running the loop concurrently. That would make too much cache ping pong.
[14:44:36] <moon-child> can you make it thread-local?
[14:44:49] <hayley> But all I need is to see if recent loops are taken very few times, or very many. So I just need one bit of information, and I can avoid updating when the bit is set the right way. And I don't care for fixing the switch if SIMD would be about as fast as scalar, so I can make it like a Schmitt trigger, and only flip if the prediction was far off what we observed.
[14:45:01] <hayley> Not easily, I think.
[14:45:21] <moon-child> `(defvar ,(gensym))
[14:46:34] <hayley> Sure, that could work.
[14:47:08] <hayley> I don't have a policy on accumulating TLS, let alone on defining caching techniques, even after 1.5 years.
[14:49:47] <hayley> Oh, have you seen https://www.oilshell.org/blog/2022/02/diagrams.html? I'm sure both of us won't run out of things to complain about in that article.
[14:49:48] -ixelp- The Internet Was Designed With a Narrow Waist
[14:50:55] <moon-child> eh.  I argued with that guy a bunch in the past
[14:50:59] <moon-child> kinda burnt out at this point :P
[14:51:15] <hayley> "Byte streams and text are essential narrow waists in software, particularly in #distributed-systems." Say what? Netfarm actively tries to avoid exposing byte or character streams to the user.
[14:51:56] <hayley> That's why I stole "translators" from CLIM. We have object->data and data->object, in place of present and accept respectively.
[14:53:10] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[14:55:05] <hayley> An "object" is the form you want, and "data" is your binary or textual junk that you don't want. Then you can write RPC handlers (of sorts) that consume and generate objects.
[14:56:21] <hayley> https://cal-coop.gitlab.io/netfarm/documentation/decentralise2.html#%28part._.Translators%29 and also see define-special-block in 3.5.3
[14:56:22] -ixelp- 3 decentralise2
[14:58:16] <hayley> But I am aware that this sort of modularity and separation of concerns lead to a bloated mess, which is why I don't work on Netfarm. It's so bloated that it's 1/6 the code of a popular Gopher++ client written in C.
[15:02:25] <hayley> Though, the reason why that works is that one usually does not care for binary soup when reasoning about a distributed system. Sure, it's "essential" to have a wire format, cause you can't avoid flipping bits down a wire, or pushing a radio wave, or something like that. But you specify a system at a higher level in the end.
[15:03:09] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:36:21] <gilberth> I am always surprised how bad real CLIM2 really is.
[15:38:15] <gilberth> I open a window by OPEN-WINDOW-STREAM, say (WITH-INPUT-EDITING ..) and it complains that there is no pointer documentation pane. So either don't assume there is one, or make OPEN-WINDOW-STREAM make a frame which has one.
[15:38:24] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[15:40:46] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:43:50] * hayley also contemplates to find a sponsor for making parallel GC in SBCL work...somehow.
[16:00:57] <clothespin> it would be good then maybe my animations wont pause
[16:01:22] <gilberth> Well, my animations don't pause.
[16:03:37] <gilberth> Do you spot a pause here? <http://bauhh.de/free-clim/clim-animation-with-output-records.mp4>
[16:04:24] <gilberth> Or here <http://bauhh.de/free-clim/clim-animation.mp4> which is more boring.
[16:09:21] <gilberth> And I believe hayley is after a parallel GC to use with all her hundreds of cores, which is not necessarily a concurrent GC.
[16:20:07] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:20:36] <gilberth> lol. The rubout handler^W^Winput editor doesn't even know about c-p and c-n.
[16:21:40] *** Quits: kevingal (~quassel@176.61.88.240) (Remote host closed the connection)
[17:10:58] *** Joins: kevingal (~quassel@176.61.88.240)
[17:31:11] <ck_> "what even are lines?"
[17:35:26] <edgar-rft> whenever you're running out of cocaine then #\newline will save your day
[17:35:47] <ck_> you have to add carriage-return to put your nose in the right place, too
[17:36:15] <ck_> Ballmer never forget that. DEVELOPERS DEVELOPERS DEVELOPERS
[18:08:29] <ck_> pop quiz
[18:08:42] <ck_> in javascript, what is Math.min(Math.Infinity, 1) ?
[18:08:56] <selwyn> "1"?
[18:09:00] <phoe> what's the difference between a pop quiz and a push quiz
[18:09:53] <ck_> phoe: I pushed the question first so I could pop it. of course.
[18:10:05] <ck_> selwyn: close, but no. It is javascript after all so the answer is NaN
[18:10:12] <phoe> hmm, yes
[18:10:27] <selwyn> is it actually
[18:11:04] <phoe> probably because Math.Infinity is undefined
[18:11:11] <ck_> exactly
[18:12:39] <selwyn> oh
[18:13:31] <ck_> lame quiz for a lame language. still I tried to provide some entertainment
[18:13:42] <ck_> how is the authoring going, selwyn
[18:13:52] <selwyn> its ok
[18:13:57] <selwyn> i cant concentrate recently though
[18:14:28] <ck_> "long covid"?
[18:15:04] <selwyn> i am glued to the news
[18:15:35] <ck_> yeah I understand. Also I understand what Bezmenov meant by demoralization
[18:15:41] <selwyn> i feel better when i actually write though
[18:19:32] <ck_> even Temple Terry knew that
[18:19:37] <ck_> "when you do your work it's awesome"
[18:20:35] <selwyn> f
[18:20:42] <ck_> f
[19:29:59] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:42:37] *** Joins: shka (~herr@109.231.3.55)
[19:42:40] *** Joins: razetime (~quassel@117.254.34.170)
[19:51:35] <shka> https://old.reddit.com/r/worldnews/comments/t2mb9b/lukashenko_confirms_rockets_fired_at_ukraine_from/
[19:52:01] <shka> oh lukashenko apparently was not informed that Putin ordered his troops to attack 
[19:52:07] <shka> what a clown
[20:00:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:01:12] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:33:34] * gilberth is having fun with CLIM's idea of activation gestures and CLIM2 is of not much help.
[20:35:25] *** Quits: razetime (~quassel@117.254.34.170) (Ping timeout: 250 seconds)
[20:37:30] <gilberth> That are gestures which "activate" the input buffer. E.g. #\newline. This then is like in SLIME's REPL, where you could face (+ 1 <point> 2) and hit RET. The RET is not inserted but read after all other input has been read and in effect sends the whole form. But if you have "(+ 1 <point> 3" that is what is there plus #\newline doesn't satisfy the reader, the #\newline inserted where you are.
[20:38:00] <gilberth> How can I know? I have to "measure" this.
[20:38:34] *** Quits: kevingal (~quassel@176.61.88.240) (Ping timeout: 272 seconds)
[20:41:23] <gilberth> But CLIM is different here, as you don't need to type the RET, the form is accepted as soon as you hit ")". But "(+ 1 2)" could wind up in the input buffer by yanking. And just yanking it should not activate the input.
[20:47:27] *** Joins: kevingal (~quassel@176.61.88.240)
[20:55:23] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 268 seconds)
[20:56:24] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:22:11] <ck_> I have only very limited experience with clim and the command or input handling, but my conclusion is
[21:22:21] <ck_> "thats weird"
[21:41:19] <gilberth> Well, you certainly have experience with SLIME. Have you ever played with Genera?
[21:43:37] <ck_> no, I haven't
[21:44:24] <ck_> I meant the way the command parsing is done by "that's weird", just earlier this morning I was talking to loke about https://github.com/McCLIM/McCLIM/issues/791
[21:44:26] -ixelp- Unable to enter interactive command with a space if another command exists that starts with the same characters · Issue  [...]
[21:44:43] <gilberth> The difference is how input editing is implemented. It's not like there is a line editor which in a loop would allow you to edit a line and when done passed all to the stream buffer. It's rather that editing is interleaved with READ-CHAR. This has implications: (1) the input editor is aware what is about to be read and (2) there could be inline prompts.
[21:45:26] <gilberth> ck_: Well, being unable to enter a command with a space is the same issue as "cat foo bar" won't find a file called "foo bar".
[21:45:47] <ck_> while I haven't ever used genera, I watched for example Kalman Reti's videos
[21:46:57] <ck_> gilberth: I don't agree with that, the cat example doesn't mean you are "unable to enter" the command that cats the file with space in its name
[21:47:31] <gilberth> Anyhow, what I am referring to is not CLIM per se. It's not about presentations and inline prompts etc. But about the same thing as with SLIME: You have "(+ 1 <point-here>2)" and press RET and the whole form is "activated" and read. bash is the same btw.
[21:48:34] <gilberth> ck_: Syntax is none of input editor's concern.
[21:49:05] <ck_> I don't know what you mean by that
[21:49:46] <ck_> also I wasn't looking to start an argument; I'm sure you're right, continue having fun
[21:49:51] <gilberth> Well, it's not the input editor which parses a command.
[21:50:37] <gilberth> So, if you write a routine like (loop for c = (read-char) until (eql #\space c) ...) how would you make a #\space not leaving that loop?
[21:52:49] <ck_> ? that's not the issue I was talking about
[21:53:57] <gilberth> Yes, and that has nothing to do with the input editor. It's the command parser here which doesn't do whatever is expected.
[21:54:07] <ck_> where is 'here'
[21:54:09] <ck_> that issue?
[21:54:24] <gilberth> The #\space issue, yes.
[21:55:55] <ck_> I think we have a different view on what the problem was, but that's ok
[21:57:05] <gilberth> It says "Unable to enter interactive command with a space if another ...". Where is the input editor involved?
[21:57:28] <ck_> at the word "enter"
[21:58:23] <gilberth> Ah, so when I have a program having trouble with certain syntax the tty driver of UNIX is involved?
[21:58:42] <ck_> deliberate misunderstandings are fun! let's go shopping
[21:58:46] <ck_> -- marvel's teen barbie
[21:59:05] <ck_> or mattell :) same thing in a way
[22:00:25] <gilberth> It's a syntax issue. The input editor has nothing to do with syntax, its only task is to allow you to edit what you type. As the tty driver offers limited line editing.
[22:01:10] <ck_> you've opened my eyes, thank you
[22:04:59] <gilberth> And btw there is a READ-TOKEN standard function in CLIM to read a token. It is specified to allow for double quotes to quote. So it ought to work to say: "command with space" blah. I have no idea that is implemented with McCLIM for I was more concerned with backends and gadgets and panes.
[22:10:15] <ck_> well, I don't know anything about computers, but maybe there could be some mechanism that completes input that is not complete yet, let's call it a "completion mechanism"
[22:10:58] <ck_> sounds like this thing could be part of the module that edits input! and then if you depress buttons on your human interface device in the right order, at the right time, a user might be able to choose from a selection if this partial input is ambiguous
[22:11:57] <ck_> but this is of course crazy talk, after all it is a syntax issue like you said. I don't know why I let my mind stray like that
[22:11:59] <gilberth> Yes, but that completion also is not part of the input editor proper.
[22:12:28] *** Joins: lisp123 (~lisp123@120.154.103.52)
[22:13:22] <gilberth> I don't know how to cure that as I am not there yet with my CLIM. There being command line parsing and completion.
[22:14:41] <gilberth> Unfortunately CLIM2 isn't a very good implementation either. So at times I look at what Genera's Dynamic Windows does.
[22:15:20] <gilberth> But I could imagine that the completion facility will quote for you. As does completion with bash e.g.
[22:17:06] <gilberth> Speaking of which, I found it always a bit odd that you could type in a command named "FOO-BAR-BAZ" by "Foo Bar Baz". But so does ZWEI.
[22:30:50] *** Quits: kevingal (~quassel@176.61.88.240) (Remote host closed the connection)
[22:39:54] *** Joins: MetaYan (~MetaYan@c-1555235c.07-84-7462671.bbcust.telenor.se)
[22:42:11] *** Joins: tane (~tane@user/tane)
[23:11:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:11:25] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:21:48] <ck_> The Steiner patch will fix the whole thing
[23:23:30] *** Joins: rogersm (~rogersm@90.166.180.250)
[23:40:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 240 seconds)
