[04:57:41] *** Quits: gnugen-telegramb (~telegr_10@2001:470:69fc:105::f25) (Quit: Client limit exceeded: 20000)
[04:57:54] *** Quits: R[m]1234 (~pguillodg@2001:470:69fc:105::1:1604) (Quit: Client limit exceeded: 20000)
[05:30:14] *** Quits: NilsDmitriAlainA (~antonovig@2001:470:69fc:105::1:15d6) (Quit: Client limit exceeded: 20000)
[08:12:19] *** Quits: MisterMerlinGran (~telegra_9@2001:470:69fc:105::f1d) (Quit: Client limit exceeded: 20000)
[12:04:30] *** Quits: nu[m] (~nusynapse@2001:470:69fc:105::f19) (Quit: Client limit exceeded: 20000)
[14:26:29] <Notkea> https://flower.codes/2021/07/08/this-post-was-written-by-github-copilot
[14:30:56] <typedef[m]1> It's magic
[14:55:42] <artectrex[m]> _Note: The word "magic" is a bit of a misnomer. It's not magic if it doesn't do something_
[17:42:20] <artectrex[m]> https://blog.wesleyac.com/posts/the-curse-of-nixos
[18:13:25] <afontain[m]> 10/10 bait title
[18:16:39] <afontain[m]> after reading it, it seems the main pain points are Â« it can't run software straight from the internet Â» (no /bin/bash, patchelf), and Â« modifying it is hard because it's done in nix and I don't get it Â»
[18:17:15] <artectrex[m]> I think the main point that makes sense is that the documentation is bad, and that nix isn't trivial
[18:17:26] <artectrex[m]> and that those two don't go together well
[18:18:13] <afontain[m]> right, the documentation is definitely lacking tooo
[18:21:00] <afontain[m]> to have written packages for Debian, Alpine, Flatpak and NixOS, I'd say I'm not sure which is worse
[18:21:42] <afontain[m]> I would say the easiest to hardest hierarchy is something like Alpine>Flatpak>NixOS>Debian
[18:21:55] <afontain[m]> Flatpak being second because dependency management
[18:22:22] <afontain[m]> getting started with Alpine distro making was surprisingly simple
[18:23:42] <afontain[m]> and NixOS is 3rd because there can be subleties with say Python or GTK that are not straightforward to uncover
[18:25:09] <afontain[m]> and I did put Debian 4th because it's so hard getting a grasp of what does what
[18:28:15] <CedricHlzl[t][m]> what about using docker as package manager ? ðŸ˜‚ pulling images and running everything in sandboxes
[18:28:24] <CedricHlzl[t][m]> s/sandboxes/containers/
[18:53:52] <sparrowhawk[m]> <afontain[m]> "I would say the easiest to..." <- Arch is level with Alpine more or less.
[18:53:57] <sparrowhawk[m]> <CedricHlzl[t][m]> "what about using docker as..." <- Gods
[18:54:04] <sparrowhawk[m]> That would be seriously cursed
[18:55:13] <CedricHlzl[t][m]> (i do this for some apps that I dont trust or that might pollute my OS, like quartus, zoom, skype,...)
[19:03:09] <LucasCrijns[m]> <CedricHlzl[t][m]> "what about using docker as..." <- Maybe Fedora Silverblue? Run everything in podman containers
[19:05:59] <Orbstheorem> <artectrex[m]> "I think the main point that..." <- Sounds like haskell to me.
[19:10:23] <Orbstheorem> <CedricHlzl[t][m]> "what about using docker as..." <- Sounds like flatpak.
[23:04:23] <Notkea> <artectrex[m]> "https://blog.wesleyac.com/posts..." <- about the custom language rant, guix could be an alternative
[23:48:31] <typedef[m]1> Nix looks like a mix of some process calculus and an ugly javascript, but guix just looks like ((()()lisp)())
[23:49:05] <typedef[m]1> And I've seen somewhere that they now have # with parantheses too
