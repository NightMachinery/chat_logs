[00:06:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[00:07:25] *** Quits: Itaru (~Itaru@ro2.flokinet.is) (Quit: See Ya Later!)
[00:09:25] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[00:15:00] *** Joins: Leonard (~Administr@114.55.127.80)
[00:16:30] *** Joins: aqua (~aqua@user/aqua)
[00:17:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[00:20:00] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[00:20:22] *** Joins: Warped (~Warped@user/warped)
[00:20:59] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[00:21:44] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[00:23:01] *** Quits: WarpedAI (~Warped@user/warped) (Ping timeout: 240 seconds)
[00:34:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:44] *** Joins: machinedgod (~machinedg@24.105.81.50)
[00:35:22] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[00:35:35] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[00:35:35] *** Joins: menace (~someone@user/menace)
[00:35:39] *** menace is now known as Deknos
[00:37:18] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[00:37:22] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[00:48:24] *** Joins: Leonard (~Administr@114.55.127.80)
[00:50:13] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[01:07:03] *** Quits: Guyver2 (~Guyver@2001:985:f3f:1:ccad:a172:dbd3:d8fa) (Quit: Going offline, see ya! (www.adiirc.com))
[01:07:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[01:10:39] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[01:13:14] *** Joins: test__ (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[01:16:11] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[01:16:19] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[01:18:00] *** Joins: Leonard (~Administr@114.55.127.80)
[01:18:27] *** Quits: test__ (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[01:20:43] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[01:24:19] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[01:24:21] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[01:29:20] *** Quits: moose (~moose@user/moose) (Quit: Leaving)
[01:31:37] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[01:32:36] *** Joins: Leonard (~Administr@114.55.127.80)
[01:34:09] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[01:35:01] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[01:38:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[01:41:49] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[01:43:32] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[01:43:52] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[01:44:50] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[01:46:50] <maroon> for a block cipher, is it a bad idea to use random padding? that doesnt seem to be a popular choice
[01:54:41] <Alipha> maroon: how would you know what part is the padding? Have a padding byte count, but then fill the rest with randomness?
[01:55:14] *** Joins: d1cor (~diego@179.63.242.123)
[01:55:15] <maroon> right, the last byte tells how many other bytes are the random padding
[01:56:03] <Alipha> maroon: seems like more work than just 0 bytes.
[01:56:31] <Alipha> And if you're relying on the randomness for some kind of security, then you're doing it wrong, heh
[01:57:17] <MacGyver> (Oftentimes the non-randomness is relied on for security, which is arguably worse :P)
[01:57:26] <rk4> padding options are well documented, since we've been needing to do it since block ciphers were invented
[01:57:31] <maroon> if only the lowest 4 bits of the last byte contains the padding length, and the remaining 4of8 bits are also random, then a padding oracle is impossible because there's no impossible padding
[01:58:16] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:58:19] <maroon> and no padding oracle
[01:58:48] *** Quits: sec^nd (~sec^nd@gateway/tor-sasl/secnd/x-45171752) (Ping timeout: 276 seconds)
[01:58:56] <Alipha> So, not necessarily random, but the decryptor doesnt validate the padding to any expected value
[01:59:46] <maroon> yes, it's all random except 4 bits of the last byte
[02:00:03] *** Joins: Leonard (~Administr@114.55.127.80)
[02:00:45] *** Joins: sec^nd (~sec^nd@gateway/tor-sasl/secnd/x-45171752)
[02:01:01] <Alipha> That's am interesting proposal
[02:02:02] *** Joins: moose (~moose@user/moose)
[02:02:05] <rk4> https://en.wikipedia.org/wiki/Padding_(cryptography)#ISO_10126
[02:02:39] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[02:04:47] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: leaving)
[02:04:51] <rk4> hm, tiny discussion over in https://crypto.stackexchange.com/questions/1922/why-was-iso10126-padding-withdrawn
[02:08:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[02:08:21] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[02:08:53] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[02:09:50] <maroon> if they're paranoid about a subliminal channel, then we should ban random IV/salt, because that could be a secet channel too...
[02:11:26] <MacGyver> The thing is, it *shouldn't* matter.
[02:11:35] <MacGyver> If it does, your block cipher has problems.
[02:12:02] <MacGyver> You can choose not to validate any kind of padding.
[02:12:09] <MacGyver> There's not really a need to make it random.
[02:12:51] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 256 seconds)
[02:19:19] *** Quits: Narrat (~omnius@p200300df5f0aabe806ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:20:54] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[02:24:27] *** Joins: gabriel1_ (~gabriel1@host-82-49-95-90.retail.telecomitalia.it)
[02:27:09] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 256 seconds)
[02:33:57] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[02:40:25] *** Joins: Leonard (~Administr@114.55.127.80)
[02:42:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[02:47:15] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[02:47:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[02:47:59] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[02:50:36] <dostoyevsky2> Is there a general concepts of "rounds" and why they are useful?  Why would doing the same thing over and over again improve an algorithm?
[02:53:17] <Rutice_> random - any one working or developed a DES brute force for hexid for moto
[02:56:29] <halosghost> dostoyevsky2: I have no idea if what I'm about to say has any foundation, but I've always taken it to have two wanted properties: 1) much like shuffling a deck of cards, shuffling more (or a particular number of times depending on what you're hoping to achieve) may result in more apparent randomness
[02:56:58] <halosghost> dostoyevsky2: 2) it's one method of increasing the resource-hardness (by increasing the amount of resources necessary to use to brute-force)
[02:57:08] <TimMc> dostoyevsky2: If you're mixing something in a bowl, you don't just stir once and call it good.
[02:57:38] <halosghost> (I'm posting those not to suggest that they're correct, but instead to attempt to find the correct response by posting what may (likely) be incorrect ☺)
[03:00:10] <sonOfRa> TimMc: unless your name is veorq, then you shuffle once and call it good :P
[03:00:18] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:01:49] <TimMc> How so?
[03:02:49] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:07:32] <sonOfRa> It's a joke, jp aumasson (aka veorq) has been pushing for *fewer* rounds in a lot of crypto because he thinks the margins are overblown and hurting performance
[03:08:24] <dostoyevsky2> hurting performance == harder to brute force, more difficult to paralellize...
[03:10:33] <maroon> the idea of using rounds, is that it lets you put all your effort into making something with good strength-per-time characteristics, which makes it easier to validate the design as 'good'
[03:12:41] *** Joins: Leonard (~Administr@114.55.127.80)
[03:15:11] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[03:21:31] <TimMc> sonOfRa: Ah, got it. :-)
[03:22:19] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:25:41] *** Quits: Leonard (~Administr@114.55.127.80) (Remote host closed the connection)
[03:26:05] *** Joins: Leonard (~Administr@114.55.127.80)
[03:28:19] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:78c1:741e:24d7:1bb)
[03:32:22] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[03:32:26] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[03:32:58] *** Joins: Leonard (~Administr@114.55.127.80)
[03:39:46] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[03:39:48] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[03:40:24] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[03:42:14] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:44:17] *** Quits: d1cor (~diego@179.63.242.123) (Ping timeout: 240 seconds)
[03:53:07] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:54:30] <dostoyevsky2> so, without any additional shuffling: is sha256(sha256(string)) better than just one sha256(string) ?
[03:56:15] <moose> no
[03:57:09] <rk4> it might be better, it depends what our criteria are :>
[03:57:35] <dostoyevsky2> it definitely is slower
[03:57:44] <dostoyevsky2> rk4: more secure?
[03:58:13] <rk4> without context this means little
[03:58:28] <rk4> sometimes slower is more secure
[03:58:35] <moose> Double hashing a password provides no additional security, double hashing data provides no additional integrity
[03:58:38] <moose> So basically no.
[03:58:52] <moose> And "slower is more secure" is a bad argument here since double hashing is barely more expensive.
[03:59:07] <moose> You would want an actual KDF for that purpose, like PBKDF2 or Argon2i/d
[03:59:43] <rk4> how many passwords per second do you suppose you could attack with single hashing vs double hashing
[04:00:53] *** Quits: gabriel1_ (~gabriel1@host-82-49-95-90.retail.telecomitalia.it) (Remote host closed the connection)
[04:01:21] <iz> heh.. like pretty much half
[04:01:27] <moose> rk4: I'd say roughly half.
[04:02:30] <rk4> also a different angle, i'm wondering about resistence to length extension attacks...
[04:03:21] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:05:00] *** Joins: Wulf (~Wulf@user/wulf)
[04:05:10] <moose> rk4: What scenario is that a risk in?
[04:05:13] <amnrst> It takes the same amount of time to attack a double hashed password as it does for a single hashed password.  
[04:05:31] <moose> amnrst: Not practically speaking.
[04:05:41] *** Joins: Leonard (~Administr@114.55.127.80)
[04:05:52] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[04:06:05] <rk4> this is what i mean by context matters
[04:06:44] <moose> I agree
[04:06:51] <rk4> i'm not going to categorically state that H(x) is superior to H(H(x)) without any idea what dostoyevsky2 might go on to make of that statement
[04:07:01] <moose> Lets assume password hashing.
[04:07:12] <moose> I'd argue that both are stupid if `string` is a password.
[04:07:35] <moose> Use HMACSHA256(kx, salt || password) where kx is a user-specific key.
[04:07:45] <sarnold> that's still too fast
[04:07:47] <iz> as moose already said, for password hashing, that's what KDFs are for
[04:08:14] <moose> sarnold: How can you deduce the password if kx remains secret in reasonable time?
[04:08:27] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[04:08:29] <moose> Even if it's a known common password, it's not going to happen.
[04:09:36] <sarnold> moose: by checking billions of them per second https://gist.github.com/epixoip/a83d38f412b4737e99bbef804a270c40
[04:09:48] <moose> Billions of what?
[04:09:52] <sarnold> candidate passwords
[04:09:56] <moose> Against what?
[04:10:14] <sarnold> against the password database that someone absconded with
[04:10:17] <moose> Maybe you missed that I was saying HMACSHA256 with a user-specific secret key.
[04:10:18] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[04:10:26] <sarnold> where do you store that secret key?
[04:10:32] <moose> In an HSM.
[04:10:36] <sarnold> if that key can't be stolen, just store the password there in plaintext?
[04:10:36] <rk4> if we state that H(H(x)) provides no more security than H(x), it's not much of a leap to deduce H(H(H(...(x))) provides no more security over H(x), which i think we can agree isn't true, iterative hashing is useful
[04:10:37] <sarnold> heh
[04:10:52] <moose> HSMs are often slow for general user credential storage.
[04:11:01] <moose> And expensive via licenses to store large strings or many entries.
[04:11:02] <rk4> but yes, use scrypt and friends
[04:12:21] <moose> sarnold: Also consider that compromising the memory of an entire system is generally more difficult than dumping a database of creds
[04:12:31] <moose> In most implementations at least
[04:13:17] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[04:14:28] <dostoyevsky2> moose: Is there a general definition of what an HSM actually is?  I read that it could be an FPGA too, so that could be quite fast..  I guess being an HSM is mostly defined in its breakability, to protect the keys or physical security
[04:15:04] <moose> It's a physical key storage device that generally adheres to standards for data protection and goes through formal validation by a recognized body like UL.
[04:15:10] <TimMc> amnrst: Agreed, single vs double hashing does not matter for passwords.
[04:15:21] <TimMc> at least for SHA256
[04:15:22] <moose> There are variants that are as small as something like the YubiHSM and things as large as I dunno... a 4U rack mount
[04:16:13] * dostoyevsky2 imagines a 4u rack yubikey....
[04:16:16] <TimMc> because the attacker is probably already able to mount an exhaustive attack of the space the passwords are in :>
[04:17:01] <TimMc> Slowing down the attacker might lose them a single-digits percentage of passwords, but not 50%.
[04:17:18] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[04:18:18] <moose> dostoyevsky2: lol it's just a server
[04:18:27] *** Joins: Leonard (~Administr@114.55.127.80)
[04:18:38] <moose> Usually the larger HSMs are a minimal Linux server running some proprietary software and have super secure and hardened chassis.
[04:19:26] <moose> Like, the chassis may have high security dual-custody locks on the front, no interactive anything, no ports, no displays, not even buttons sometimes. The chassis could be wired up for intrusion detection (and automatic erasure of key encryption keys) via a conductive wire mesh
[04:19:38] * dostoyevsky2 googles for: "safe in the size of a rpi zero"
[04:19:42] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Read error: Connection reset by peer)
[04:19:52] *** Joins: Greenlight (~nobody@184.151.37.153)
[04:19:55] <moose> There are special safes for servers, too :)
[04:20:24] <moose> https://www.brownsafe.com/categories/institutional_gsa_files_and_safes/gsa_files_and_safes.htm
[04:20:25] <moose> For an example
[04:20:45] <dostoyevsky2> it would also contain explosives, right?  Like in mission impossible... when you open the safe it self-destructs
[04:21:28] <moose> There are some safes that are pressurized in a way that make the doors impossible to open unless you depressurize the atmosphere of the room first.
[04:21:29] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[04:21:45] <moose> That's about as close as you get to crazy stuff.
[04:22:04] <moose> And yes, they're used by the US government in unstaffed autonomous intelligence collection areas.
[04:22:56] <TimMc> Mmm, wonder how secure they are against side channel attacks... power consumption, EM emissions...
[04:23:16] <moose> Generally those buildings are air gapped themselves and internally air gapped.
[04:23:43] <moose> I can't go into specifics on how they do certain parts of that air gapping, but they're electrically isolated and you would need to be inside the inner spaces with access to protected areas to get power or EM
[04:23:53] *** Quits: joe7057 (~joseph@wnpgmb016qw-ds01-2-119.dynamic.bellmts.net) (Ping timeout: 256 seconds)
[04:24:11] <moose> You can also imagine in those buildings that anyone servicing things, does not do it alone.
[04:25:35] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:25:55] <sarnold> "call for price" pff they're no fun
[04:26:01] <moose> > $100k
[04:26:05] <sarnold> ouch
[04:26:07] <sarnold> thanks :)
[04:26:15] <dostoyevsky2> TimMc: also, if they are FPGAs which wouldn't be very hard to do for a cryptographic algorithm... I am not sure how valuable EM emissions are, unless you know the design of the chip... plus the safe would probably protect against EM too... and they could make the power consumption quite low too
[04:26:23] <moose> I own one of their non-GSA safes and it was $18k
[04:26:39] <moose> I can tell you it's very heavy lol
[04:27:01] <moose> It needed an equipment lift, the things that move heavy machinery (a forklift for forklifts) to put it inside.
[04:28:31] <moose> dostoyevsky2: EM emissions do not generally need the design of the chip to be known.
[04:29:04] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:29:21] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[04:29:38] <moose> For example, Intel CPU state for AES-NI instructions was discoverable at a good distance with fairly basic equipment because they knew the plaintext being fed in and could collect statistics over time. Then with unknown data at a later date and time, the attacker could determine key material.
[04:29:55] <moose> It was just a matter of lengthy observation
[04:30:39] <TimMc> moose: I wasn't imagining side-channels reachable from outside! I was thinking about physical-access situations where you would want an alternative to penetrating the box itself.
[04:30:56] <moose> TimMc: Oh so like, you're outside of the safe and you have infinite resources and time?
[04:31:26] <moose> I am sure you can fiddle then. Those safes do have PDUs which would make it annoying and probably enough machinery in them to prevent you from getting reliable data.
[04:31:31] <TimMc> Well... some hours, perhaps. Or 30 seconds to drop a little sniffer nearby and then pick it up again later. :-)
[04:31:39] <sarnold> pls sir can I have some of your resources and time? even 1% would be nice..
[04:32:01] <sarnold> you'd still have an infinite amount left over..
[04:32:01] <moose> TimMc: In those buildings, dropping anything is a problem :p
[04:32:02] <TimMc> moose: Specifically, this is in response to the physical hardening stuff like pressure and wire mesh.
[04:32:10] <moose> Yeah.
[04:32:26] <TimMc> which would *also* require bypassing other measures :-)
[04:32:27] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[04:32:32] <moose> So lets assume you can't break into the safe but you want data... you can tap the power lines.
[04:32:36] <moose> But there's 12 servers in there.
[04:32:54] <moose> They also will have a nice PDU that cleans up any line noise and feedback probably, a UPS inside the unit, etc.
[04:33:30] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[04:34:05] *** Quits: zro (~zro@user/zro) (Ping timeout: 256 seconds)
[04:34:10] <TimMc> It occurs to me that physical hardening is also a different kind of defense.
[04:34:27] <moose> Ah. I just checked as well.
[04:34:47] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[04:34:47] <moose> The federal specification in fact requires for class 5 security cabinets for COMSEC to be hardened against intentional and unintentional electromagnetic emissions
[04:34:48] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[04:34:54] <TimMc> If someone invades the building, cuts power, and captures the safe... they then are going to do an offline attack.
[04:35:12] <moose> All equipment is independently isolated using mesh wire shelving as well as a mesh wire interior latching door that is commonly grounded internally
[04:35:17] <TimMc> To do a side channel attack, you have to get in *without* being noticed, in order to do an online attack. :-)
[04:35:40] <TimMc> ok, cool
[04:35:42] <moose> Interesting that they say "intentional emissions"
[04:35:48] <TimMc> heh
[04:35:50] *** Joins: zro (zro@user/zro)
[04:35:53] <sarnold> :)
[04:35:55] <moose> I wonder if that's in response to like... cycling crap in a pattern and using it to defeat air gaps
[04:35:59] <moose> Fans and stuff
[04:36:43] <TimMc> Oh yeah, how does cooling work in one of those safes?
[04:36:48] <dostoyevsky2> TimMc: Just get yourself a vest which has an "HSM Inspector" sticker on it... Should get you inside any facility without being noticed
[04:36:54] <TimMc> lol
[04:37:18] *** Quits: kashire (~kashire@user/kashire) (Quit: leaving)
[04:37:19] <sarnold> bring your clipboard
[04:37:21] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:37:32] *** Joins: kashire (~kashire@c-76-31-172-90.hsd1.tx.comcast.net)
[04:37:33] *** Quits: kashire (~kashire@c-76-31-172-90.hsd1.tx.comcast.net) (Changing host)
[04:37:33] *** Joins: kashire (~kashire@user/kashire)
[04:37:36] <moose> TimMc: It looks like it's entirely front to back cooling and inside the safe there is an inner container that has gaps between the safe wall to allow for an air channel around the sides.
[04:37:54] <moose> Air is drawn through the front space and out the back.
[04:38:07] <moose> The cages for EM isolation are just fine mesh gates
[04:38:18] <moose> Kinda like on a microwave it looks like
[04:38:59] <dostoyevsky2> ok, so I put the safe with the rpi zero into my microwave... gotta tell my roomates about my HSM project
[04:39:17] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[04:39:32] <moose> dostoyevsky2: I worked at a financial related company that had lots of HSMs. They had people who would escort key custodians to a door, which would get unlocked, then separate people would enter who would "split the keys" on to smart cards and decryption of those keys was performed elsewhere by two different key custodians.
[04:39:35] <moose> This is how they did key rotations.
[04:40:00] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Remote host closed the connection)
[04:40:25] <moose> They used HSMs by a company called FutureX
[04:40:48] <moose> I audited those, actually. Was able to pick the front locks with a barrel key decoder.
[04:41:09] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[04:41:18] *** Joins: Leonard (~Administr@114.55.127.80)
[04:42:20] <dostoyevsky2> https://crypto-store.net/wp-content/uploads/2020/02/FuturexVectra1U13001300.png 
[04:42:33] <dostoyevsky2> found an image what a futurex HSM looks like
[04:42:59] <TimMc> lol, tubular locks
[04:43:23] <moose> Yep, they're bad.
[04:43:36] <moose> That one had the fancy mesh in the chassis and everything
[04:43:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[04:43:40] *** aqua is now known as kish`
[04:43:49] <moose> But those locks... they open up and you expose the serial ports and you can get command line access after that
[04:44:04] <TimMc> The ones that have pressure-differential-based hardening, though... they would need special cooling.
[04:44:10] <moose> I also had an injection attack for one of the commands... it was like "CKEKFT" or something you could write as a string in a password to be encrypted.
[04:44:12] <TimMc> Heat transfer pads and heat pipes, maybe.
[04:44:31] <sarnold> moose: cute
[04:44:32] <moose> That CKEKFT command was "Clear Key Encryption Keys - Full Table"
[04:44:40] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[04:44:47] <moose> So it would just brick it basically.
[04:45:03] <dostoyevsky2> TimMc: I think the lockpicking lawyer would open those with part of a ballpoint pen
[04:45:06] <moose> TimMc: I think the pressure differential thing is like an instapot :P
[04:45:43] <sarnold> or airliner
[04:45:58] <moose> TimMc: You have a door that once it's locked it does something that requires the room to be at a vacuum stronger than its internal component before a relocker-like design is released
[04:46:17] <moose> It was physical, not electronic, so I don't know off hand how it worked
[04:46:17] <sarnold> moose: but somehow you've got to cool the stuff inside
[04:46:33] <moose> No, the stuff inside will be fine because it will be at normal pressure.
[04:46:44] <moose> The door itself would just have some kind of mechanism inside that requires a vacuum before it will release.
[04:47:12] <moose> Doors are usually plate steel on both sides with the mechanism on the inside, boltwork, retractors, etc.
[04:48:16] <TimMc> Oh, so it's just the *door* that pulls a vacuum.
[04:48:33] <TimMc> computers are still at normal pressure and with air flow
[04:48:33] <moose> So you would need the door to be air tight except for a hole going to the outside. You could depressurize some little vacuum canister and drop a ball into a tube that would get stuck there and hold a pin out of the way and once it equalizes it releases the pin and a relocker comes open
[04:48:50] <moose> Something fancy
[04:48:51] <moose> I dunno
[04:49:01] <moose> Yeah, the computers are at normal pressure with air flow
[04:49:02] <dostoyevsky2> moose: I was told an HSM would self-destruct if you'd try to access the chip... I guess it would be simple to add something like a capsule containing some chemical substance which opens if the pressure is released
[04:49:03] <moose> It's a tricky door thing
[04:49:26] <moose> dostoyevsky2: Usually they self-destruct with electronic erasure. They have backup batteries and if the power is lost, they just get cleared.
[04:49:35] <moose> Keys are usually stored in volatile memory to prevent offline attacks
[04:50:01] <moose> The main CPU may be a single SoC dipped in epoxy
[04:50:17] <moose> They might also encapsulate all memory modules, capacitors, etc
[04:50:56] <iz> remember when those cold boot attacks were new and CCC made a linux kernel patch that made it store luks keys in CPU registers only
[04:51:17] <moose> lol
[04:51:33] <moose> It would still be in the L1D, L2D, etc caches :D
[04:52:02] <moose> There was a whole thing about that with L3 caches and cross-processor manipulation
[04:52:05] <moose> I can't remember the attack name
[04:52:25] <iz> heh yeah
[04:53:18] <moose> https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-yarom.pdf
[04:54:18] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[04:55:32] <dostoyevsky2> if HSMs only store the keys in non-volatile memory.. does that mean you always need several HSMs so they can backup each other's keys?
[04:55:46] <dostoyevsky2> s/non-//
[04:57:53] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[05:02:32] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[05:02:57] *** Joins: kish` (~aqua@user/aqua)
[05:04:08] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[05:04:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[05:08:56] *** Joins: joe7057 (~joseph@wnpgmb016qw-ds01-2-119.dynamic.bellmts.net)
[05:12:09] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[05:14:10] *** Joins: Leonard (~Administr@114.55.127.80)
[05:14:50] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[05:16:27] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[05:16:56] *** Quits: Greenlight (~nobody@184.151.37.153) (Quit: Leaving)
[05:20:17] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[05:20:26] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[05:26:40] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[05:29:22] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[05:32:27] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[05:48:15] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[05:51:03] *** Joins: jbis (~jbis@pool-108-6-219-196.nycmny.fios.verizon.net)
[05:51:30] <jbis> What is a distribution ensemble?
[05:54:13] *** Joins: igemnace (~ian@user/igemnace)
[05:56:56] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[06:07:49] *** Joins: Leonard (~Administr@114.55.127.80)
[06:10:25] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:17:52] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[06:21:03] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:25:23] *** Joins: d1cor (~diego@179.63.242.123)
[06:27:16] *** Joins: Leonard (~Administr@114.55.127.80)
[06:29:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:29:33] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:36:54] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[06:40:27] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:43:28] *** Joins: frost (~frost@user/frost)
[06:50:18] *** Quits: jbis (~jbis@pool-108-6-219-196.nycmny.fios.verizon.net) (Remote host closed the connection)
[07:02:20] *** Joins: Leonard (~Administr@114.55.127.80)
[07:04:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[07:04:58] *** Joins: arjun (~arjun@user/arjun)
[07:11:04] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[07:11:08] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[07:13:45] *** Quits: d1cor (~diego@179.63.242.123) (Ping timeout: 256 seconds)
[07:14:17] *** Quits: rardiol (~quassel@user/rardiol) (Ping timeout: 240 seconds)
[07:24:13] *** Joins: boxframes_ (~Saloframe@2607:9000:2000:15::a45d)
[07:24:37] *** Quits: boxframes_ (~Saloframe@2607:9000:2000:15::a45d) (Remote host closed the connection)
[07:25:40] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[07:36:38] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[07:38:34] *** Joins: kbdlnx123 (~kbdlnx123@190.167.8.123)
[07:38:52] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Changing host)
[07:38:52] *** Joins: hqdruxn08 (~hqdruxn08@user/hqdruxn08)
[07:42:04] *** Quits: kbdlnx123 (~kbdlnx123@190.167.8.123) (Client Quit)
[07:43:01] *** Joins: Leonard (~Administr@114.55.127.80)
[07:44:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[07:48:49] *** Joins: jihema (~jma@2404:440c:17da:2f00:510f:d809:3919:257c)
[07:50:35] *** Quits: zro (zro@user/zro) (Ping timeout: 256 seconds)
[07:53:26] *** Joins: zro (~zro@user/zro)
[07:59:45] *** Parts: jihema (~jma@2404:440c:17da:2f00:510f:d809:3919:257c) ()
[08:07:25] *** Quits: arjun (~arjun@user/arjun) (Quit: Leaving)
[08:08:33] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[08:10:57] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[08:22:18] *** Joins: Leonard (~Administr@114.55.127.80)
[08:24:43] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[08:24:49] *** Quits: jtgd (~jtgd@user/jtgd) (Quit: WeeChat 3.4)
[08:28:20] *** Joins: jtgd (~jtgd@user/jtgd)
[08:30:31] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:38:51] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[08:42:17] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[08:54:19] *** Joins: gproto23 (~gproto23@user/gproto23)
[08:57:26] *** Joins: Leonard (~Administr@114.55.127.80)
[08:58:23] *** Quits: hqdruxn08 (~hqdruxn08@user/hqdruxn08) (Read error: Connection reset by peer)
[08:59:43] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[09:07:19] *** Quits: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com) (Quit: jarthur)
[09:08:44] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[09:08:51] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[09:12:57] *** Joins: hqdruxn08 (~hqdruxn08@user/hqdruxn08)
[09:19:21] *** Joins: Leonard (~Administr@114.55.127.80)
[09:19:40] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[09:20:06] *** Joins: kish` (~aqua@user/aqua)
[09:21:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[09:31:52] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[09:34:57] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[09:37:45] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[09:38:09] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[09:40:20] *** Joins: Leonard (~Administr@114.55.127.80)
[09:41:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[09:41:50] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[09:42:57] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[09:51:49] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 240 seconds)
[10:01:53] *** Quits: JollyRoger (~JollyRoge@user/thejollyroger) (Quit: JollyRoger)
[10:06:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[10:09:59] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[10:14:34] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:30:02] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[10:35:28] *** Quits: kept (~kept@user/kept) (Quit: leaving)
[10:38:07] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:03:01] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 240 seconds)
[11:07:41] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:12:09] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[11:12:24] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:16:05] *** Joins: Leonard (~Administr@114.55.127.80)
[11:18:33] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[11:27:25] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[11:27:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[11:42:43] *** Joins: Leonard (~Administr@114.55.127.80)
[11:43:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[11:45:01] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[11:48:29] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[11:48:33] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[11:48:41] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:02:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[12:02:27] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[12:07:05] *** Joins: Leonard (~Administr@114.55.127.80)
[12:08:57] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[12:10:00] *** Quits: Rutice_ (~Rutice@216.131.105.52) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[12:11:57] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[12:12:34] *** Joins: andreasbuhr (~quassel@p549dbf2a.dip0.t-ipconnect.de)
[12:12:39] *** Quits: andreasbuhr (~quassel@p549dbf2a.dip0.t-ipconnect.de) (Client Quit)
[12:21:01] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:41:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[12:44:41] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[12:46:22] *** Joins: Leonard (~Administr@114.55.127.80)
[12:48:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[12:55:39] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Remote host closed the connection)
[13:03:29] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[13:05:42] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[13:06:55] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[13:10:19] *** Joins: Guest34 (~textual@2601:600:a27f:d92d:f82c:c2d7:e03b:c931)
[13:11:17] *** Joins: synaps3 (~void@user/synaps3)
[13:16:20] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[13:16:30] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[13:18:52] *** Quits: Deknos (~someone@user/menace) (Read error: Connection reset by peer)
[13:21:38] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:28:26] *** Quits: Guest34 (~textual@2601:600:a27f:d92d:f82c:c2d7:e03b:c931) (Quit: Textual IRC Client: www.textualapp.com)
[13:31:12] *** Joins: anandn (~anandn@2601:600:a27f:d92d:f82c:c2d7:e03b:c931)
[13:32:09] *** Joins: Everything (~Everythin@37.115.210.35)
[13:34:41] *** Quits: mikrosis (~mikrosis@dynamic-046-114-174-174.46.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[13:35:41] *** Joins: Leonard (~Administr@114.55.127.80)
[13:36:33] *** Joins: sqz1 (~sqz@178.62.201.14)
[13:37:01] *** Joins: aleck (~aleck@user/aleck)
[13:37:11] *** Parts: sqz1 (~sqz@178.62.201.14) (WeeChat 2.8)
[13:38:12] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[13:38:31] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[13:39:05] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 256 seconds)
[13:41:19] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[13:42:32] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[13:43:26] *** Joins: ravan (~ravan@user/ravan)
[13:44:12] *** Quits: anandn (~anandn@2601:600:a27f:d92d:f82c:c2d7:e03b:c931) (Quit: Textual IRC Client: www.textualapp.com)
[13:44:52] *** Joins: anandn (~anandn@2601:600:a27f:d92d:f82c:c2d7:e03b:c931)
[13:45:50] *** Quits: aleck (~aleck@user/aleck) (Remote host closed the connection)
[13:46:09] *** Joins: aleck (~aleck@user/aleck)
[13:49:40] *** Joins: aleck1 (~aleck@user/aleck)
[13:51:57] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 240 seconds)
[14:03:57] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:05:10] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:05:59] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[14:06:01] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[14:26:15] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 256 seconds)
[14:28:19] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[14:32:18] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[14:32:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[14:39:49] *** Joins: rardiol (~quassel@user/rardiol)
[14:42:57] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 240 seconds)
[14:43:29] *** Joins: Leonard (~Administr@114.55.127.80)
[14:45:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[14:56:21] *** Joins: mad_enz (~mad_enz@2605:8d80:681:dda0:ab90:af52:d0b2:1539)
[15:02:38] *** Joins: Major_Biscuit (~MajorBisc@c-001-029-007.client.tudelft.eduvpn.nl)
[15:04:32] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[15:05:37] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 240 seconds)
[15:08:03] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[15:21:29] *** Joins: d1cor (~diego@179.63.242.123)
[15:25:49] *** Quits: rardiol (~quassel@user/rardiol) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:27:27] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[15:38:04] <OverCoder> hi
[15:38:19] <OverCoder> I'd like to store a sensitive user file at an S3 bucket
[15:38:30] <OverCoder> What's a good way to encrypt the file at the user's computer before it gets uploaded to me?
[15:38:41] <OverCoder> The file would have a password specific to itself
[15:39:14] <Wulf> OverCoder: gpg, 7z or and other tool that can encrypt files
[15:39:39] <OverCoder> I think GPG is an asymmetric encryption thing?
[15:39:44] <OverCoder> I just want the user to use a password
[15:39:49] <Wulf> OverCoder: gpg can do both
[15:39:56] <OverCoder> hm
[15:40:28] *** Quits: curium (~curium@mail.clouded.monster) (Remote host closed the connection)
[15:40:47] *** Joins: curium (~curium@mail.clouded.monster)
[15:42:26] <rudi_s> age
[15:42:44] *** Quits: curium (~curium@mail.clouded.monster) (Remote host closed the connection)
[15:43:02] *** Joins: curium (~curium@mail.clouded.monster)
[15:46:29] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:47:43] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[15:52:46] <anandn> is it just a single file or will u need some blob storage service
[15:52:58] <anandn> *small, single file
[15:53:31] <anandn> a "good" way to do this would fit your use case 
[15:57:34] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:59:31] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[15:59:40] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[16:01:57] *** Quits: mad_enz (~mad_enz@2605:8d80:681:dda0:ab90:af52:d0b2:1539) (Ping timeout: 240 seconds)
[16:07:22] *** Joins: Leonard (~Administr@114.55.127.80)
[16:09:24] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[16:10:10] *** Quits: boxframes (~Saloframe@2607:9000:2000:15::a45d) (Remote host closed the connection)
[16:15:22] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[16:15:30] *** Quits: anandn (~anandn@2601:600:a27f:d92d:f82c:c2d7:e03b:c931) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:16:52] *** Joins: Rum (~bourbon@user/rum)
[16:22:39] *** Joins: boxframes (~Saloframe@2607:9000:2000:15::a45d)
[16:26:32] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[16:27:48] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:28:51] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[16:35:43] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[16:39:17] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[16:39:24] *** Joins: goodness (~goodness@46.23.89.12)
[16:58:30] *** Joins: AllMyNames (~AllMyName@user/allmynames)
[17:06:01] *** Joins: Leonard (~Administr@114.55.127.80)
[17:08:13] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[17:08:42] *** Quits: AllMyNames (~AllMyName@user/allmynames) (Quit: Leaving)
[17:08:48] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:08:49] *** Joins: AllMyNames_2 (~AllMyName@pool-71-186-156-227.bflony.east.verizon.net)
[17:08:49] *** Quits: AllMyNames_2 (~AllMyName@pool-71-186-156-227.bflony.east.verizon.net) (Client Quit)
[17:09:07] *** Joins: AllMyNames (~AllMyName@user/allmynames)
[17:12:43] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[17:13:50] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[17:15:48] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[17:17:46] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[17:24:20] *** Quits: AllMyNames (~AllMyName@user/allmynames) (Quit: Leaving)
[17:26:57] *** flooded is now known as _flood
[17:27:29] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[17:28:10] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[17:33:24] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:36:40] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[17:37:26] *** Joins: AllMyNames (~AllMyName@user/allmynames)
[17:39:37] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[17:49:02] *** Quits: MacGyver (~macgyver@user/macgyver) (Quit: WeeChat 3.3)
[17:49:14] *** Quits: dusk (~quassel@suki.ds7s.nl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:50:29] <TimMc> OverCoder: What's the context -- desktop app or web service?
[17:51:01] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:78c1:741e:24d7:1bb) (Ping timeout: 240 seconds)
[17:51:17] <OverCoder> oops anandn left
[17:51:31] <OverCoder> TimMc, It's just a JSON file containing some user data, the user would upload to the platform
[17:51:43] <OverCoder> I'd be compressing JSON before that, so the file can be assumed to be small
[17:51:59] <OverCoder> It's a desktop app that sends the file to the web service
[17:53:39] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[17:53:54] <TimMc> Hmm, I've used `gpg --symmetric --armor` to encrypt files with a passphrase before, but it looks like it uses a pretty low-quality approach to turning the passphrase into a key. :-/
[17:58:16] <TimMc> (iterated SHA1, rather than a more advanced KDF like argon)
[17:59:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[18:00:16] <TimMc> So you could add --s2k-count 65011712 to max out the iterations, but it's still blazing fast, which is not what you want
[18:01:59] *** Joins: Leonard (~Administr@114.55.127.80)
[18:03:32] <TimMc> OverCoder: If you've got a desktop app -- rather than relying on whatever CLI utilities the user might already have -- then I would recommend using NaCl (libsodium). Use argon2 to expand the password into a key in a computationally intensive way, then secretbox to encrypt the file using that key.
[18:04:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[18:09:37] <TimMc> OverCoder: Here's an example of doing this. Ignore the bit in the docstring about a Data-Encrypting Key; that's (probably) for a different use-case than what you're doing. https://gitlab.com/timmc/cavern/-/blob/master/spelunk/src/main/kotlin/org/timmc/spelunk/Crypto.kt#L284
[18:10:42] *** Joins: System_Error (~SystemErr@user/systemerror)
[18:15:23] *** Quits: joe7057 (~joseph@wnpgmb016qw-ds01-2-119.dynamic.bellmts.net) (Remote host closed the connection)
[18:17:33] *** Joins: joe7057 (~joseph@wnpgmb016qw-ds01-2-119.dynamic.bellmts.net)
[18:18:39] *** Joins: dusk (~quassel@suki.ds7s.nl)
[18:19:03] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[18:20:30] *** Joins: MacGyver (~macgyver@user/macgyver)
[18:21:21] *** Joins: biesbjerg (~biesbjerg@0x573e65fc.static.cust.fastspeed.dk)
[18:21:29] *** Quits: biesbjerg (~biesbjerg@0x573e65fc.static.cust.fastspeed.dk) (Client Quit)
[18:23:14] *** Joins: aqua (~aqua@user/aqua)
[18:23:33] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[18:23:46] <Alipha> OverCoder: TimMc: there's the scrypt command line utility
[18:24:38] <Alipha> https://www.tarsnap.com/scrypt.html
[18:26:11] *** aqua is now known as kish`
[18:36:06] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[18:42:17] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:43:12] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[18:43:19] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[18:44:02] *** Joins: Teth (~kvirc@cpe-71-79-34-84.cinci.res.rr.com)
[18:46:19] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:46:40] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[18:47:21] *** Quits: Teth|3 (~kvirc@cpe-71-79-34-84.cinci.res.rr.com) (Ping timeout: 256 seconds)
[18:56:38] *** Joins: gabriel1_ (~gabriel1@k2.ilion.info)
[18:56:49] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[19:05:51] *** Joins: Leonard (~Administr@114.55.127.80)
[19:08:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[19:10:33] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Remote host closed the connection)
[19:10:55] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[19:16:10] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[19:19:39] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[19:24:09] *** Joins: inlight (~inlight@157.35.46.171)
[19:24:09] *** Quits: inlight (~inlight@157.35.46.171) (Changing host)
[19:24:09] *** Joins: inlight (~inlight@user/inlight)
[19:30:59] *** Quits: d1cor (~diego@179.63.242.123) (Ping timeout: 256 seconds)
[19:35:19] *** Joins: shinto (~shinto@171.113.225.192)
[19:37:35] *** Joins: Leonard (~Administr@114.55.127.80)
[19:39:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[19:55:00] *** Quits: AllMyNames (~AllMyName@user/allmynames) (Quit: Leaving)
[20:03:56] *** Quits: gabriel1_ (~gabriel1@k2.ilion.info) (Remote host closed the connection)
[20:03:58] *** Joins: AllMyNames (~AllMyName@user/allmynames)
[20:07:12] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[20:09:26] <OverCoder> TimMc, NodeJS seems to have a NaCl so all good
[20:09:50] <OverCoder> I mean also scrypt is available as a lib for NodeJS
[20:09:54] * OverCoder is confused as for what to use
[20:10:18] <OverCoder> I think I'll be using argon2 at the web platform to hash passwords
[20:10:21] <OverCoder> not sure if this means anything
[20:10:39] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[20:12:06] *** Joins: smach (~savio@177.12.48.44)
[20:25:59] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[20:26:10] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[20:33:44] *** Quits: poopster (poopster@user/poopster) (Ping timeout: 268 seconds)
[20:38:29] *** Quits: smach (~savio@177.12.48.44) (Quit: Leaving)
[20:38:46] *** Joins: Core5549 (~shinto@171.113.225.192)
[20:38:56] *** Joins: xenoterracide_ (~xenoterra@2600:1700:71d4:810:101f:cf82:e73c:f52b)
[20:40:13] *** Joins: Leonard (~Administr@114.55.127.80)
[20:41:15] *** Quits: shinto (~shinto@171.113.225.192) (Ping timeout: 256 seconds)
[20:41:58] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[20:46:30] *** Joins: shinto (~shinto@171.113.225.192)
[20:46:33] *** Quits: Core5549 (~shinto@171.113.225.192) (Read error: Connection reset by peer)
[20:48:39] <Alipha> OverCoder: use argon2 as a KDF to hash the password into a key and then pass that key to crypto.secretBox
[20:48:47] *** Quits: shinto (~shinto@171.113.225.192) (Remote host closed the connection)
[20:48:56] <OverCoder> ok
[20:55:10] *** Joins: shinto (~shinto@171.113.225.192)
[20:57:24] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:58:42] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:58:55] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:59:16] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:00:50] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:03:42] <goodness> hello can I ask if in your opinion is that possible to make mitm attack to inject objects in a https stream ?
[21:04:30] <int-e> sure, just operate a CA that the browser trusts
[21:05:48] <goodness> int-e: you mean that the attacker should have the control over a CA ?
[21:06:23] <int-e> it may be easier to control the browser's cert store :P
[21:06:36] <goodness> for example I found the folliwng image "hardcoded" in the facebook website.. https://postimg.cc/HcngkKmr
[21:06:40] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[21:07:21] <goodness> I suspect that could be injected in the encrypted stream to exfiltrate the encryption key and then decrypt the traffic..
[21:07:35] <goodness> can be possible this scenario or it's just my fantasy ?
[21:07:46] *** Joins: poopster (poopster@shell.xshellz.com)
[21:08:36] <goodness> in the past I found mixed encrypted/unecrypted traffic in website like facebook google youtube and so on... pretty strange isn'it ?
[21:08:50] <int-e> well... that was inside the encrypted stream... so you wouldn't see it if you were not able to decrypt it already
[21:09:39] <int-e> data: URIs don't incur any network requests; they embed the whole resource directly
[21:09:49] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[21:09:54] <goodness> yep I know.. but the attacker has some kind of control over the isp.. then he is able to make mitm.. 
[21:09:57] <int-e> so I'd say this particular scenario is just fantasy
[21:10:11] <goodness> ok
[21:10:19] <aczid> goodness: there are numerous examples in web hacking where an insecure javascript resource can be hijacked to exfiltrate cookies etc
[21:10:38] <int-e> so is mine, except this is something "antivirus" software actually does to intercept https traffic before it hits the browser
[21:10:45] *** Quits: Major_Biscuit (~MajorBisc@c-001-029-007.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:10:51] <int-e> and probably some corporate firewalls too
[21:12:09] *** Quits: poopster (poopster@shell.xshellz.com) (Changing host)
[21:12:09] *** Joins: poopster (poopster@user/poopster)
[21:13:30] <goodness> aczid: yep but while sniffing the stream I haven't found any packets outside trusted destination.. it seems that the attacker can inject data and 0day in the browser take the ownership of the process and use it to exfiltrate data from the disk... the theory behing this sould be in teh following very old pdf (2009) 
[21:13:36] <goodness> https://www.slideshare.net/FabioGhioni/fabio-ghioni-asymmetric-warfare-and-interception-revealed
[21:14:05] <goodness> I know that in 2009 the traffic was for majority unencrypted... but the theory is still valid
[21:15:45] <goodness> the interesting pages are from 19 to 25
[21:15:58] *** Quits: joe7057 (~joseph@wnpgmb016qw-ds01-2-119.dynamic.bellmts.net) (Ping timeout: 256 seconds)
[21:16:42] <aczid> well tls is meant to fix exactly these kinds of hijacking possibilities. btw this presentation is crazy over the top lol
[21:17:20] <goodness> :-D
[21:17:34] <aczid> but yeah if you have insecure resources mixed in people can hijack them and still take over depending on the context. lots of malware has been spread through those sort of tricks in the past
[21:17:53] *** Joins: joe7057 (~joseph@wnpgmb016qw-ds01-2-119.dynamic.bellmts.net)
[21:18:52] <aczid> but it sounds like you're asking if you can just 'inject' unencrypted payload in a TLS wrapped tcp session, and I don't think the answer could ever be yes unless you own the cert store/ca like int-e explained
[21:19:30] <goodness> aczid: no, I'm asking because I'm the victim
[21:19:59] <aczid> I was trying to interpret the 'what' before the 'why'
[21:20:02] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Ping timeout: 240 seconds)
[21:20:42] <aczid> what kind of 'objects' are hypothetically being injected in the https stream?
[21:23:13] <goodness> well we have to split the past and nowadays. In the past I found embedded images with size of 1x1 pixel (then a tracking pixel) unencrypted that come from one of the sub-host of the main site. For example google or facebook. Firefox show me that with a warning message that unecrypted traffic is mixed with encrypted.
[21:23:53] <aczid> yes I'm with you so far :)
[21:24:14] <aczid> so I guess I would call them 'resources' but same idea
[21:25:07] <goodness> Nowadays I have the same embedded image a bit more bigger for examples 16x4 pixels but invisible and encrypted with the main stream so that firefox dont give me any warning because the stream is full encrypted. Sometimes there are other image that are encrypted embedded and visible... and they are the very well know smile of facebook..
[21:25:50] <int-e> Tracking pixel URLs can exfiltrate data accessible by Javascript... whether over HTTP or HTTPS doesn't really make a difference; the latter just limits the audience.
[21:26:41] <goodness> yep... but seems impossible to inject objects in https.. from outside... isn'it ?
[21:26:51] <aczid> https://coveryourtracks.eff.org/
[21:26:57] <aczid> this website might be useful for you
[21:29:37] *** Quits: The_Tablet (~tablet@user/the-tablet) (Quit: cya~ ❀ only time will tell if i make myself someday / the stage is mine, music is my destiny~ ☆💎✨)
[21:30:56] <goodness> it seems that it tell me some info about my browser and that my browser has finger print.. but nothing about encryption
[21:31:17] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[21:31:50] *** Joins: The_Tablet (~tablet@user/the-tablet)
[21:33:20] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[21:34:28] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[21:34:38] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[21:34:54] <aczid> I don't think the encryption part is really important, like int-e said it just limits the audience of what is tracked
[21:35:07] <aczid> maybe your question is still not clear after all
[21:39:22] <goodness> aczid: my idea is that the attacker injects encrypted object (embedded images) in the stream to steal the encryption key and then decrypt the traffic... then my question would be if this is theoretically possible.
[21:39:50] <goodness> and if it's possible how to prevent it
[21:40:12] <aczid> I don't see how it could work at all
[21:40:37] <aczid> oh I guess you are asking about an interactive attack?
[21:41:03] <goodness> interactive attack ? what is it ?
[21:41:19] <goodness> in my scenario the attacker is in the middle of the comunication..
[21:42:55] <ioxzev1z> goodness, how would embedded objects "steal the encryption key"? TLS works via wrapping HTTP traffic in encryption. I don't think the html requests can access encryption keys
[21:42:59] <halosghost> aczid: that test is why I'm slowly working towards browsing the internet almost exclusively in links
[21:44:11] <goodness> ioxzev1z: I know it
[21:44:26] <aczid> goodness: I was thinking of some attacks on TLS from the last decade where they force the client to send a lot of data over an encrypted connection to recover the rc4 or something 
[21:44:55] <aczid> maybe this is a good starting point for your research? https://www.win.tue.nl/applied_crypto/2015/20151126_TLS_Attacks.pdf
[21:45:11] <aczid> rc4 key*
[21:45:26] <goodness> thanks
[21:49:52] <aczid> ofcourse there is much more, and more up to date stuff, but this covers some of the ideas you are asking about, I think
[21:50:29] <aczid> attacking TLS would presume that there is a mitm :)
[21:59:02] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[22:03:40] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[22:07:01] *** Joins: Leonard (~Administr@114.55.127.80)
[22:09:39] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[22:18:12] *** Quits: xenoterracide_ (~xenoterra@2600:1700:71d4:810:101f:cf82:e73c:f52b) (Remote host closed the connection)
[22:18:31] *** Joins: xenoterracide_ (~xenoterra@2600:1700:71d4:810:101f:cf82:e73c:f52b)
[22:19:50] *** Joins: aleck (~aleck@user/aleck)
[22:21:08] *** Quits: aleck1 (~aleck@user/aleck) (Ping timeout: 256 seconds)
[22:27:17] *** Quits: xenoterracide_ (~xenoterra@2600:1700:71d4:810:101f:cf82:e73c:f52b) (Ping timeout: 240 seconds)
[22:34:59] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[22:37:49] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[22:41:19] *** Joins: Core6356 (~shinto@171.113.225.192)
[22:41:57] *** Quits: shinto (~shinto@171.113.225.192) (Ping timeout: 240 seconds)
[22:42:51] *** Joins: shinto (~shinto@171.113.225.192)
[22:44:07] *** Joins: Core2487 (~shinto@171.113.225.192)
[22:45:10] *** Joins: Core4335 (~shinto@171.113.225.192)
[22:45:17] *** Quits: Core6356 (~shinto@171.113.225.192) (Ping timeout: 240 seconds)
[22:46:28] *** Joins: Core9796 (~shinto@171.113.225.192)
[22:47:12] *** Quits: shinto (~shinto@171.113.225.192) (Ping timeout: 256 seconds)
[22:48:17] *** Quits: Core2487 (~shinto@171.113.225.192) (Ping timeout: 240 seconds)
[22:49:53] *** Quits: Core4335 (~shinto@171.113.225.192) (Ping timeout: 256 seconds)
[22:58:28] <Alipha> goodness: as a general rule, there's no way to read encrypted data or inject encrypted data into an https communication, even as a mitm. you would need one of the other things discussed to make that work: be a CA, have a root cert in the user's computer, or the communication is over an older version of SSL/TLS which has a vulnerability. there are potentially other ways to get access to secured information,
[22:58:30] <Alipha> such as arranging to have javascript run on the same page as the info/cookies you want stolen (eg, we've had issues with malicious ads injecting malware or such). but attacking the encryption itself probably isn't going to happen
[23:00:42] <int-e> browser plugins exist as well (havne't been mentioned yet)
[23:01:51] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[23:04:30] *** Joins: VarunAgw (~VarunAgw@103.158.148.26)
[23:06:17] *** Joins: Leonard (~Administr@114.55.127.80)
[23:07:03] <goodness> Alipha: compromised ads server is  pretty interesting...  but I don't think it's enough to identify a specific guy in the entire internet..especially if he doesn't make any logon
[23:08:35] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[23:21:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[23:24:36] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[23:35:47] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[23:36:43] *** Joins: Leonard (~Administr@114.55.127.80)
[23:38:16] *** Joins: d1cor (~diego@179.63.242.123)
[23:41:35] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[23:41:57] *** Joins: Leonard (~Administr@114.55.127.80)
[23:56:17] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[23:56:27] *** Joins: Leonard (~Administr@114.55.127.80)
[23:57:23] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:58:49] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:59:44] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
