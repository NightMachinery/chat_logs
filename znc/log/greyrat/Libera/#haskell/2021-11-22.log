[00:00:19] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Remote host closed the connection)
[00:01:31] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad) (Quit: gone to sleep. ZZZzzzâ€¦)
[00:01:48] <[exa]> nf: icompose (,) ?
[00:02:23] <[exa]> (wild guess)
[00:03:58] <nf> ah, that looks like what i want
[00:04:10] <nf> or <.>
[00:04:46] *** Joins: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net)
[00:04:50] <nf> yep, ifolded <.> ifolded
[00:04:55] <nf> thanks [exa] !
[00:05:39] <[exa]> oh wow, wild guess worked
[00:05:42] <[exa]> \o/
[00:08:10] *** Quits: burnside_ (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Remote host closed the connection)
[00:08:12] <nf> weirdly enough, folded <.> folded seems to work too
[00:08:41] *** Joins: cjb (~cjb@user/cjb)
[00:09:59] * [exa] stumped
[00:10:00] <nf> seems like folded indexes any foldable generically, whereas ifolded has a separate typeclass
[00:11:49] <[exa]> yeah possibly with better index types
[00:12:39] <[exa]> ooh yeah, `FoldableWithIndex k (Map k)`
[00:13:25] *** Joins: y04n45402 (~y04nn@nayon.fr)
[00:13:33] <[exa]> wuw, some useful stuff there, `FoldableWithIndex [Int] Tree`
[00:14:17] *** Joins: mimmy_ (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com)
[00:14:24] <nf> nice
[00:15:41] <nf> it gets weirder:  TraversableWithIndex i f => TraversableWithIndex [i] (Free f)
[00:15:54] *** Quits: y04nn (~y04nn@92.223.89.196) (Ping timeout: 260 seconds)
[00:15:57] *** Quits: quintasan (~quassel@quintasan.pl) (Remote host closed the connection)
[00:17:05] *** Joins: quintasan (~quassel@quintasan.pl)
[00:17:22] <[exa]> Free monads are basically trees with some piping around, so yeah, good :]
[00:17:56] <[exa]> the one for Compose is nice too
[00:18:23] <[exa]> I need some indexed bikeshedding project to play with all this stuff
[00:19:10] *** Quits: mimmy_ (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com) (Ping timeout: 260 seconds)
[00:19:13] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Remote host closed the connection)
[00:21:17] *** Joins: Sgeo (~Sgeo@user/sgeo)
[00:21:58] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[00:23:47] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 264 seconds)
[00:23:47] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 264 seconds)
[00:24:24] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[00:25:51] *** Quits: _ht_ (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:26:26] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[00:26:42] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[00:26:47] *** Joins: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net)
[00:26:50] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[00:29:32] *** Joins: kayvank15 (~kayvank@52-119-115-185.PUBLIC.monkeybrains.net)
[00:29:54] *** Quits: kayvank15 (~kayvank@52-119-115-185.PUBLIC.monkeybrains.net) (Client Quit)
[00:31:52] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2505:c76:f78:c1d6)
[00:36:53] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:37:18] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2505:c76:f78:c1d6) (Ping timeout: 260 seconds)
[00:38:11] *** Joins: Successus (~Successus@gateway/tor-sasl/successus)
[00:41:18] *** Quits: jjhoo (jahakala@user/jjhoo) (Remote host closed the connection)
[00:41:20] *** Joins: xsperry (~xs@user/xsperry)
[00:43:30] *** Joins: jjhoo (~jahakala@user/jjhoo)
[00:45:07] *** Quits: y04n45402 (~y04nn@nayon.fr) (Remote host closed the connection)
[00:45:38] *** Quits: Successus (~Successus@gateway/tor-sasl/successus) ()
[00:46:26] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:9487:a7c7:e639:ebc4)
[00:46:28] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[00:48:22] *** Quits: fendor (~fendor@178.165.196.64.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[00:49:17] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[00:49:31] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[00:50:24] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[00:51:07] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:9487:a7c7:e639:ebc4) (Ping timeout: 250 seconds)
[00:51:08] <euouae> I'm looking into the Alloy analyzer, https://alloytools.org/ does Haskell have any tools like this?
[00:52:03] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:52:13] *** Joins: jinsun (~quassel@user/jinsun)
[00:52:41] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[00:52:41] <dsal> euouae: That's kind of a different class of thing, but I guess you could write such a thing in Haskell.  I use TLA+ some which is written in Java, so if it can be done there, it can be done anywhere.
[00:53:59] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[00:54:36] <euouae> what do you use TLA+ for?
[00:55:02] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:55:11] <dsal> Describing whether a concept is even possible given known primitives.
[00:55:43] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:57:15] <dsal> Place I'm working has this thing written in some hacky node stuff with MongoDB.  I modeled it in TLA+ to prove that it's completely impossible to guarantee it can any of the things they'd expect it to do (except for special cases where everything goes perfect).
[00:57:35] <euouae> got'em
[00:58:21] <euouae> I am starting with Alloy to test a design of a backend thing I want to write
[00:58:32] <euouae> I don't know if this will be a waste of time or not but I'm giving it a shot
[00:58:37] <dsal> I started by modeling my idea, which was really boring because my idea was fairly simple and just kind of worked.  Makes that type of tool pretty confusing because like, yeah, the thing I thought works the way I think it might.
[01:00:35] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a)
[01:02:08] *** Quits: abhixec_ (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: leaving)
[01:03:00] <trcc> I am trying to write a simple CLI using optparse-applicative. The first argument has to be a string, without any option. I.e. ./program hello -arg1 -arg2 -arg3 where hello is the first argument and a string
[01:03:48] <dsal> trcc: you can build named subcommand parsers like that.
[01:04:19] <trcc> dsal: subcommand. That was the keyword I was after. Thank you, I will try and find it.
[01:04:20] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[01:04:38] <dsal> Yeah.  optparse-applicative does a lot of stuff.
[01:04:40] *** Joins: deadmarshal (~deadmarsh@95.38.116.117)
[01:05:10] <dsal> trcc, e.g.:  https://www.irccloud.com/pastebin/5MOYg4gI/sink.txt
[01:06:36] <trcc> dsal: ye makes sense. In this case I want to create a file. I.e. ./program hello creates a file called hello. ./program hello_world creates a file called hello_world etc
[01:06:54] <trcc> so it is not really fixed like in that exampe
[01:07:06] <dsal> Ah, then you probably don't want to do that.  heh
[01:07:50] <dsal> I do have a command to interact with s3 that works a bit like cp:
[01:07:52] <euouae> trcc you can leave the argumetns unparsed, pop one out and then parse them
[01:07:53] <dsal> dsmac:tesla dustin$ s3up create *.md blah
[01:07:53] <dsal> E: Invalid paths for create: final parameter must be an object ending in /
[01:08:27] <dsal> (i.e., if there are two arguments, the second can be anything, but if there are more than two, the last has to end in /)
[01:08:47] <trcc> euouae: can you elaborte?
[01:09:06] *** Quits: deadmarshal (~deadmarsh@95.38.116.117) (Ping timeout: 260 seconds)
[01:09:16] <trcc> dsal: something like that. I need the first argument to be a string and then whatever optional arguments are next
[01:10:41] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[01:14:03] *** Joins: mimmy_ (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com)
[01:15:24] <euouae> trcc https://blog.ocharles.org.uk/posts/2012-12-17-24-days-of-hackage-optparse-applicative.html
[01:15:36] <trcc> thanks
[01:15:59] <[itchyjunk]> Hi, i wanted to mod some number with %. i wrote a function and from what haskell told me realized that my signature should be (Integral a) => a -> String
[01:16:22] <trcc> ye exactly euouae. thanks
[01:16:39] <[itchyjunk]> Now i wanted to `iterate` this function on numbers 1 through 10. but `iterate f [1 .. 10]` doesn't work because i think these are Num and not Integrals
[01:16:43] <trcc> actually just found the argument parser here hehe https://hackage.haskell.org/package/optparse-applicative-0.16.1.0#builders
[01:17:02] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[01:18:25] <euouae> [itchyjunk], what do you mean by "iterate"?
[01:18:38] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[01:18:45] *** Joins: pavonia (~user@user/siracusa)
[01:18:48] <euouae> Because the iterate function will apply f multiple times, and the signature doesn't match
[01:18:53] <[itchyjunk]> i wanted to repeatedly apply function f to natural numbers between 1 and n. google recommended iterate :s maybe i misread
[01:18:54] *** Quits: mimmy_ (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com) (Ping timeout: 260 seconds)
[01:18:57] <[itchyjunk]> oh
[01:18:59] <geekosaur> this whole thing sounds confused. in particular % is not mod
[01:19:31] <[itchyjunk]> oops, right % is not mod, `mod` is mod. i've fixed that part already, sorry
[01:19:40] <[itchyjunk]> let me post the code as well
[01:19:47] <euouae> > take 10 $ iterate (*2) 1
[01:19:48] <lambdabot>  [1,2,4,8,16,32,64,128,256,512]
[01:20:09] <geekosaur> > take 10 $ iterate (*2) 1.0
[01:20:11] <lambdabot>  [1.0,2.0,4.0,8.0,16.0,32.0,64.0,128.0,256.0,512.0]
[01:20:12] <[itchyjunk]> https://bpa.st/QQSQ
[01:20:22] <[itchyjunk]> this is my helper function that i wanted to apply to a list of natural numbers
[01:21:04] <geekosaur> hm. is there a point to making it any Integral instead of just specializing to Int or Integer?
[01:21:27] <[itchyjunk]> i loaded the function without a signature and checked with :t
[01:21:37] <[itchyjunk]> i originally had (Num a) which gave me errors
[01:21:50] <[itchyjunk]> :t was using Integral so i used that 
[01:21:50] <lambdabot> error:
[01:21:50] <lambdabot>     â€¢ Variable not in scope:
[01:21:50] <lambdabot>         was :: t0 -> (a0 -> Integer) -> t1 -> Expr -> t2 -> t3 -> t
[01:21:59] <[itchyjunk]> oops sorry
[01:22:01] <geekosaur> usually you don't need or want the fully generalized type, to be honest
[01:22:09] <geekosaur> it just complicates things later
[01:23:02] <geekosaur> but, in any case, you misunderstand the problem. specifically, this is valid:
[01:23:11] <[itchyjunk]> changing it to Int and Integer both generate error
[01:23:32] *** Joins: shdw (~shdw@23-233-101-24.cpe.pppoe.ca)
[01:23:51] <geekosaur> :t [1 .. 10] :: Integral a => [a]
[01:23:52] <lambdabot> Integral a => [a]
[01:24:06] <geekosaur> maybe you should show the actual code and actual error
[01:24:09] <geekosaur> @where paste
[01:24:09] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[01:24:18] <[itchyjunk]> the code i posted is the actual error
[01:24:22] <[itchyjunk]> code*
[01:25:02] <[itchyjunk]> https://paste.tomsmeding.com/7hmCUEA6
[01:25:16] <[itchyjunk]> Int, Integer and Integral in signature respectively
[01:25:31] <geekosaur> ok, that one is because you misunderstand the difference between a type and a constraint
[01:25:47] <geekosaur> Int and Integer are types. Integral and Num are constraints
[01:26:08] <[itchyjunk]> oh i thought you contained it to a type
[01:26:27] <geekosaur> (Integral a => a) means "any type a which has an Integral instance"
[01:26:56] <geekosaur> if you wanted to use Int you'd just say Int instead of (Integral a) => â€¦ a â€¦
[01:27:47] <euouae> Integral can be thought of as an interface. It's the things that you can demand of a type
[01:28:30] <geekosaur> ^
[01:29:44] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[01:29:49] <EvanR> the implementation for that type is sitting in some pile somewhere, and putting the constraint lets you grab the right one without explicitly find it and passing it around
[01:30:03] <[itchyjunk]> hmmm
[01:30:16] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[01:30:31] <[itchyjunk]> So what does the Integral interface give me that Num interface doesn't? Because seems to not work with Num interface, right?
[01:30:36] <EvanR> division
[01:30:40] <[itchyjunk]> ahhh
[01:30:43] <geekosaur> :t mod
[01:30:44] <lambdabot> Integral a => a -> a -> a
[01:30:53] <geekosaur> :t divMod
[01:30:54] <lambdabot> Integral a => a -> a -> (a, a)
[01:31:30] <EvanR> > :t 0 `div` 0
[01:31:32] <lambdabot>  <hint>:1:1: error: parse error on input â€˜:â€™
[01:31:36] <EvanR> :t 0 `div` 0
[01:31:37] <lambdabot> Integral a => a
[01:31:38] <geekosaur> divMod is actually the more fundamental one on most CPUs including x86; you get division and remainder at the same time from a single machine opcode
[01:31:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:32:03] <EvanR> is divMod actually implemented that way? sounds too good to be true xD
[01:32:06] <geekosaur> so div and mod do divMod at machien level and throw halfd of it away
[01:32:11] <geekosaur> yes
[01:32:27] <geekosaur> there is no specific "div" or "mod" machine op iirc
[01:32:32] <geekosaur> just a div+mod op
[01:32:48] <geekosaur> which puts the div part in one register and the mod in another
[01:32:48] <[itchyjunk]> oh interesting
[01:32:53] <EvanR> how about multiply with the excess
[01:33:15] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[01:33:44] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[01:34:31] <EvanR> that gets throw away too I think
[01:34:39] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 250 seconds)
[01:34:45] <dsal> Yay, I finally used Finite for the first time in a real program.
[01:34:52] <geekosaur> anyway the machine op requires types that are Integral, so div, mod, and divMod have that constraint
[01:35:08] <EvanR> congratz, you're now a finitist
[01:35:12] <geekosaur> the Num constraint gives you (+), (-), and (*) but no division
[01:35:28] <geekosaur> Integral gives you divMod and friends; Fractional gives you (/) which is real division
[01:36:51] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:818b:d7ec:141a:89c5)
[01:37:14] <geekosaur> ("real" in the sense of (a simulation of) mathematical "real numbers" as distinct from mathematical integers)
[01:38:00] <EvanR> > (5 :+ 0) / (0 :+ 1)
[01:38:02] <lambdabot>  0.0 :+ (-5.0)
[01:38:26] <EvanR> unreal division
[01:38:37] <geekosaur> I was going to leave the complex plane out of it, this is already confusing enough :)
[01:39:23] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[01:39:46] <geekosaur> anyway haskell tends to get somewhat precise about these kinds of things (although not precise enough for some; revisions of the Num hierarchy are requested somewhat regularly and there are some implementations on Hackage)
[01:40:59] <geekosaur> â€¦ so enough with that diversion. you said even with the Integral constraint you were getting an error?
[01:41:26] <geekosaur> the only thing I see in your paste is a tabs warning
[01:41:35] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:818b:d7ec:141a:89c5) (Ping timeout: 250 seconds)
[01:41:59] <euouae> You also mentioned 'iterate' and I think you mean 'map'
[01:42:00] <geekosaur> much like python, haskell is indentation sensitive and editors don't always agree with each other or the compiler about what a tab means, so it's best to avoid them
[01:42:04] <geekosaur> yeh
[01:42:20] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a) (Quit: gone to sleep. ZZZzzzâ€¦)
[01:42:36] <[itchyjunk]> so Num is like natural numbers
[01:42:46] <[itchyjunk]> with no division
[01:42:57] <geekosaur> it's the set of operations that are meaningful on any kind of number
[01:43:01] <[itchyjunk]> so Integral must be like.. something else. Z ring?
[01:43:20] <geekosaur> remember, these are essentially interfaces
[01:43:47] <[itchyjunk]> right
[01:43:56] <geekosaur> so Num is the set of operations you can define on any kind of number (integers, reals, complex, quaternion, you name it)
[01:44:28] <geekosaur> Integral is the operations you can define on specifically integer-like numbers, namely integer division / modulus
[01:44:55] <geekosaur> Fractional is (floating point) division and related operations
[01:45:10] *** Joins: acidjnk (~acidjnk@2001:16b8:6774:9a00:69ab:ea7f:c2d0:49e0)
[01:45:25] <geekosaur> Floating is trigonometric operations and other things that can result in transcendental numbers
[01:45:49] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0) (Remote host closed the connection)
[01:46:17] <[itchyjunk]> hmm i've never come across Floating type data structure i think
[01:46:25] <geekosaur> :t sin
[01:46:26] <lambdabot> Floating a => a -> a
[01:46:26] *** Quits: Adeon (sid418992@id-418992.lymington.irccloud.com) ()
[01:46:38] <geekosaur> :t sqrt
[01:46:39] <lambdabot> Floating a => a -> a
[01:47:19] *** Joins: Adeon (sid418992@id-418992.lymington.irccloud.com)
[01:47:20] <geekosaur> usually this distinction doesn't mean much because you're almost always using Double or occasionally Complex Double, which is both Fractional and Floating
[01:47:35] *** Quits: shdw (~shdw@23-233-101-24.cpe.pppoe.ca) (Quit: Leaving)
[01:49:10] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[01:49:11] <[itchyjunk]> Ah, things can implement multiple interfaces
[01:49:18] <geekosaur> yep
[01:49:27] <geekosaur> % :info Int
[01:49:28] <yahb> geekosaur: type Int :: *; data Int = I# Int#; -- Defined in `GHC.Types'; instance Eq Int -- Defined in `GHC.Classes'; instance Ord Int -- Defined in `GHC.Classes'; instance Enum Int -- Defined in `GHC.Enum'; instance Num Int -- Defined in `GHC.Num'; instance Real Int -- Defined in `GHC.Real'; instance Show Int -- Defined in `GHC.Show'; instance [safe] PrintfArg Int -- Defined in `Text.Printf'; instance Data Int -- 
[01:49:48] <geekosaur> you can ask ghci for the full set
[01:50:32] *** Quits: acidjnk (~acidjnk@2001:16b8:6774:9a00:69ab:ea7f:c2d0:49e0) (Ping timeout: 240 seconds)
[01:50:54] *** Quits: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se) (Ping timeout: 268 seconds)
[01:51:03] <geekosaur> so as to your earlier comment about the Z ring, the standard Haskell numeric typeclasses don't really capture the notion of rings. there are alternative typeclasses that do
[01:51:27] <EvanR> Num isn't the same as a ring just because haskell likes to take laws seriously, which would make Double for instance not Nummable
[01:51:32] <geekosaur> although those have their own problems because Int, for example, doesn't fit them well because it's secretly a quotient type
[01:51:32] *** Joins: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se)
[01:52:00] <geekosaur> which you can't truly capture within Haskell
[01:52:24] <EvanR> Int is a cromulent ring though isn't it
[01:52:34] *** Joins: zebrag (~chris@user/zebrag)
[01:52:55] <geekosaur> Int is Z/2^64, which is a perfecly fine ring but not one you can describe in Haskell
[01:53:15] <EvanR> that's Word
[01:53:19] <[itchyjunk]> hmm
[01:53:39] <geekosaur> mm, yes, sorry
[01:54:07] <EvanR> if it obeys laws... to hell with describing it in haskell XD
[01:55:47] <[itchyjunk]> I thought math people liked haskell because of math axioms being carried over :D
[01:55:49] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[01:56:00] <EvanR> you can use other types that obey your laws if you want
[01:56:01] <[itchyjunk]> at least, proof assistance seems to be popularly written in FP
[01:56:18] <[itchyjunk]> ah true, i guess the laws don't generally matter
[01:56:19] *** Joins: hololeap_ (~hololeap@user/hololeap)
[01:56:35] <EvanR> haskell doesn't check your laws, unfortunately
[01:56:39] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[01:57:03] <EvanR> though it may rely on them sometimes
[01:57:15] <EvanR> Functor laws, Monad laws
[01:57:22] *** Quits: dolio (~dolio@130.44.130.54) (Quit: ZNC 1.8.2 - https://znc.in)
[02:00:10] <euouae> I like Haskell because I can very quickly dish out programs that do what I want :P 
[02:00:14] *** Parts: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) ()
[02:01:37] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[02:02:31] *** Joins: dolio (~dolio@130.44.130.54)
[02:02:40] <[itchyjunk]> People using Py say the same :D
[02:02:47] <[itchyjunk]> I wonder if people who use asm say the same also
[02:03:53] <EvanR> yeah, menuetOS (OS by/for asm programmers)
[02:06:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[02:08:30] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[02:12:07] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0)
[02:12:23] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[02:16:16] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[02:19:49] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[02:28:27] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[02:29:06] *** Joins: econo (uid147250@user/econo)
[02:33:03] *** Quits: bitdex_ (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[02:33:38] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[02:34:17] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[02:34:45] *** Joins: bitdex_ (~bitdex@gateway/tor-sasl/bitdex)
[02:36:13] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:38:27] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[02:38:57] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:44:07] *** Quits: haritz (~hrtz@user/haritz) (Ping timeout: 256 seconds)
[02:45:06] *** Quits: max22- (~maxime@2a01cb0883359800ebf1dbb598d360cc.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:45:10] <unit73e> did the SDL2 animation example base on time. next will do movement. proper movement, not that choppy lazyfoo example.
[02:45:32] <unit73e> with colision that's enough for a simple game
[02:46:03] *** Joins: Lycurgus (~juan@98.4.112.204)
[02:46:13] <unit73e> It's taking some time but I'll finish this
[02:46:19] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[02:46:23] *** Quits: alx741 (~alx741@186.178.108.219) (Ping timeout: 256 seconds)
[02:46:31] <unit73e> I mean this here: https://gitlab.com/unit73e/sdl2-examples
[02:46:43] <Lycurgus> what machine lang coders could/can say is that nothing is getting between them and the iron
[02:47:23] <unit73e> except what's between the chair and keyboard :p
[02:47:23] <dolio> They can't say that, though.
[02:47:45] <dolio> Unless they buy a CPU without microcode or something.
[02:48:15] <Lycurgus> in the day, microcoded arches weren't that common
[02:48:45] <dolio> I mean, people will still say it anyway.
[02:49:08] *** Joins: haritz (~hrtz@2a02:8010:65b5:0:6009:6384:e3cb:2220)
[02:49:08] *** Quits: haritz (~hrtz@2a02:8010:65b5:0:6009:6384:e3cb:2220) (Changing host)
[02:49:08] *** Joins: haritz (~hrtz@user/haritz)
[02:49:15] <unit73e> if you're talking about why you like Haskell that's because I don't like to do maintenance and Haskell encourages programmers do avoid doing some of the silly things that will later make the app unmaintainable
[02:49:36] <Lycurgus> also there were user microprogrammable archees
[02:49:51] <Lycurgus> only one major one though
[02:49:53] *** Parts: nitrix (~nitrix@user/nitrix) (Leaving)
[02:50:19] *** Quits: euouae (~euouae@user/euouae) (Quit:  )
[02:50:28] *** Joins: shailangsa (~shailangs@host86-186-133-114.range86-186.btcentralplus.com)
[02:51:46] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[02:51:49] <unit73e> and then java/c/python/c# devs say, oh muh mutable objects are so much easier to work with, yes but it's also a lot easier to mess your entire program with that
[02:52:50] <Lycurgus> also the biggest microcoded arch, 360/370 the instruction set in effect was the machine/iron
[02:54:34] <Lycurgus> there's a lot of free stuff from haskell but generally you have no idea how it actually at the lowest level works
[02:55:25] <Lycurgus> relatively speaking, it's a faith
[02:56:32] <unit73e> does a driver have to care how the gasoline electrons collide with each other when the engine starts?
[02:56:46] <unit73e> it's the same for high level languages
[02:57:49] <Lycurgus> what you actually have to be believer of though is the pure mathematics is the only right model of computation
[02:57:52] <geekosaur> I'm inclined to agree with that. Even for C I'm placing my faith in the compiler
[02:57:59] <geekosaur> enh
[02:58:05] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[02:58:10] <geekosaur> Haskell is rather far from pure maths
[02:58:21] <geekosaur> and I never use it as if it were
[02:59:09] <geekosaur> something loike numeric-prelude gets you much closer to pure mathematics as computing substrate. you can go count how many packages use it at packdeps.haskellers.com/reverse
[02:59:53] <Lycurgus> i said that was the notional conceit, not the claimed realization
[03:00:02] <geekosaur> Monad is *inspired by* category theory. it doesn't require you to know CT to use it, or even to develop your own monads
[03:00:13] <Lycurgus> like communicating objects before it
[03:01:34] <smunix> unit73e, nice! What would it take to add nix to it? It may help remove the `Requirements` section
[03:01:43] <Lycurgus> well they were coeval igess, but then OO got stale and corporatized
[03:03:55] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 250 seconds)
[03:04:30] <unit73e> smunix, nix as in nixos? I put SDL2 apps/plugins required to be generic for any OS. Should be easy enough for anyone to figure out, I think.
[03:04:43] <EvanR> unit73e, see also #haskell-game xD
[03:05:06] <unit73e> there's a specific haskell game server? lol
[03:05:07] <unit73e> thanks
[03:05:20] <EvanR> channel
[03:05:25] <EvanR> just a*
[03:05:28] <geekosaur> "room" if you prefer
[03:05:38] <unit73e> yes channel, I mix a lot because of discord and friends :\
[03:05:57] <EvanR> fr--- libera is the server lol
[03:06:02] <unit73e> yeah
[03:06:16] <EvanR> well, network I guess
[03:06:26] <unit73e> and hashtags used to mean channels but twitter ruined that lol
[03:06:46] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:7c3d:8173:a37e:d50a)
[03:06:51] <Sqaure> Is there some easy way to query Aeson "Value" type. Im thinking lens like getters if you will. 
[03:08:08] *** Joins: Topsi (~Tobias@dyndsl-037-138-064-016.ewe-ip-backbone.de)
[03:08:20] <unit73e> ? you have to give a type to Aeson, not the other way around, right?
[03:08:59] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[03:09:29] <Sqaure> Aeson is the lib that defines a tree like structure called Value. Basically just typed json. I see now there is lens-aeson
[03:10:05] <seanparsons> Sqaure: I can definitely recommend lens-aeson, I often use it to drill into instances of Value.
[03:10:30] <Sqaure> seanparsons, ah ok. I guess I'll roll with that then 
[03:11:31] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:7c3d:8173:a37e:d50a) (Ping timeout: 250 seconds)
[03:14:17] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad)
[03:16:41] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1094) (Remote host closed the connection)
[03:17:22] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[03:17:43] *** Joins: Jing (~hedgehog@2604:a840:3::1094)
[03:17:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[03:18:23] *** Joins: nautical (~nautical@2601:602:900:1630::396f)
[03:20:44] *** Joins: emf (~emf@2620:10d:c090:400::5:5322)
[03:20:54] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[03:23:31] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:25:23] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Ping timeout: 250 seconds)
[03:25:33] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Read error: Connection reset by peer)
[03:25:51] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[03:26:46] *** Quits: emf (~emf@2620:10d:c090:400::5:5322) (Quit: emf)
[03:30:59] *** Joins: alx741 (~alx741@186.178.108.219)
[03:31:09] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad) (Quit: gone to sleep. ZZZzzzâ€¦)
[03:31:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:31:55] *** Quits: mmhat (~mmh@55d438c0.access.ecotel.net) (Quit: WeeChat 3.3)
[03:32:24] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0) (Remote host closed the connection)
[03:34:19] *** Joins: Topsi1 (~Tobias@dyndsl-037-138-064-016.ewe-ip-backbone.de)
[03:34:25] <dibblego> or waargonaut, but it's not aeson
[03:34:31] <dibblego> also, g'day seanparsons 
[03:34:39] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[03:35:07] *** Quits: retro_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[03:35:19] *** Joins: Topsi2 (~Tobias@dyndsl-037-138-064-016.ewe-ip-backbone.de)
[03:35:34] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[03:36:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[03:37:58] *** Quits: Topsi (~Tobias@dyndsl-037-138-064-016.ewe-ip-backbone.de) (Ping timeout: 260 seconds)
[03:38:54] *** Quits: Topsi1 (~Tobias@dyndsl-037-138-064-016.ewe-ip-backbone.de) (Ping timeout: 260 seconds)
[03:40:34] <Axman6> lens-aeson plus the uniplate stuff in the lens library lets you do some super powerful stuff with aeson Values - need to find all the URLs in strings anywhere? Bam, it's like 100 characters to do that
[03:43:35] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 250 seconds)
[03:49:46] *** Joins: jakalx (~jakalx@base.jakalx.net)
[03:54:02] *** Quits: jess (~jess@libera/staff/jess) ()
[03:55:35] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[03:56:42] *** Quits: tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (Quit: Leaving)
[04:02:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:04:08] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[04:04:27] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:05:01] *** Joins: sub0 (~bc8165b6@217.29.117.252)
[04:07:09] <sub0> hi. what is the equivalent of this in haskell?  TYPE *p = malloc(sizeof *p); cfunc(p);
[04:08:03] <sub0> closest I could get is this, but what if it was a pointer to a type where I can't or don't want to specify some dummy value: withArray [1] $ \p -> cfunc( p)
[04:11:04] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[04:11:19] <geekosaur> @index alloca
[04:11:19] <lambdabot> Foreign.Marshal.Alloc, Foreign.Marshal, Foreign, Foreign.Safe, Foreign.Marshal.Safe
[04:12:07] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad)
[04:12:20] <geekosaur> there is also malloc but you'll really want to free it in a related value's finalizer
[04:15:38] <sub0> thanks, works nicely
[04:17:51] <sub0> alloca $ \p -> do cfunc p; peek p
[04:18:17] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:7c3d:8173:a37e:d50a)
[04:22:10] <jle`> any guide on how to migrate template haskell to the ghc 9.0 version that uses 'Code' for typed quotations?
[04:23:14] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:7c3d:8173:a37e:d50a) (Ping timeout: 268 seconds)
[04:23:58] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[04:24:58] *** Joins: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net)
[04:25:18] <jle`> oh i just needed to add a newtype wrapper in a careful place
[04:28:50] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[04:29:08] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:29:31] *** Quits: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[04:32:53] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0)
[04:37:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[04:37:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0) (Ping timeout: 260 seconds)
[04:40:17] <Axman6> Be wery wery careful, we're huntin' newtypes
[04:41:25] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:43:35] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0)
[04:45:53] *** Parts: helby (helby@alpine/moderator/helby) ()
[04:47:32] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:49:01] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[04:56:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[04:57:16] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[04:58:00] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[04:59:57] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:01:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0) (Remote host closed the connection)
[05:01:39] *** Joins: cjb (~cjb@user/cjb)
[05:07:20] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:14a5:84da:2caa:2854) (Quit: Textual IRC Client: www.textualapp.com)
[05:08:27] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Remote host closed the connection)
[05:09:17] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad) (Quit: gone to sleep. ZZZzzzâ€¦)
[05:11:59] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:d9be:afe3:4e5b:d63)
[05:17:19] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a)
[05:26:42] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:9c35:bed7:e2c:e900)
[05:26:45] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 268 seconds)
[05:26:53] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:9c35:bed7:e2c:e900) (Client Quit)
[05:28:13] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:d9be:afe3:4e5b:d63) (Ping timeout: 250 seconds)
[05:30:59] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[05:36:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0)
[05:38:27] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:46:39] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[05:50:56] <Axman6> @hoogle Lens s t a b -> (a -> m b) -> s -> m t
[05:50:57] <lambdabot> No results found
[05:52:37] *** Joins: tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[05:53:34] <Axman6> there's definitely a lensy thing for that right?
[05:54:19] <awpr> > _1 print (2, 4)
[05:54:20] <lambdabot>  <IO ((),Integer)>
[05:54:39] <awpr> the lens is already that result type to begin with (for any Functor m)
[05:55:01] <awpr> there might be a function `traverseOf` for that, but it's just `id`
[05:58:37] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[06:01:43] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[06:01:43] <Boarders_> do any of you know in brick how I can add a background colour behind each of the widgets (not changing any of the widget colours?
[06:01:58] <Boarders_> it seems like the drawApp thing should allow me to do it with layering but I can't figure it out
[06:03:09] <Boarders_> e.g. in this snake example: https://samtay.github.io/posts/introduction-to-brick how would one render the area outside of the boxes as another colour?
[06:04:03] *** jackhill is now known as KM4MBG
[06:04:33] *** Joins: ceedon (~ceedon@h224.77.91.75.dynamic.ip.windstream.net)
[06:07:08] <sm> Boarders_: do something with the outermost/largest widget
[06:07:45] <sm> there is a `margin` function that puts a margin of a certain colour
[06:08:15] <sm> I guess you want it over the full screen, showing through transparent foreground widgets ?
[06:08:45] <Boarders_> yes, exactly that last thing
[06:09:22] <Boarders_> by outermost/largest, do you mean the last widget returned in appDraw?
[06:11:11] <Boarders_> ah no, I think that is something to do with buffering
[06:12:11] <sm> Boarders_: I don't see anything about transparency in brick or vty, unfortunately
[06:12:39] *** Quits: ceedon (~ceedon@h224.77.91.75.dynamic.ip.windstream.net) (Ping timeout: 256 seconds)
[06:12:57] <sm> it might be in brick's issue tracker. If not I guess you have to implement it yourself (make a custom widget that combines your layers)
[06:13:35] *** Quits: xff0x (~xff0x@2001:1a81:526f:1d00:d375:c485:c62f:a6f6) (Ping timeout: 264 seconds)
[06:13:42] <Boarders_> with the last option, do you make the widget and then just give it an attribute with the relevant background colour?
[06:13:47] <sm> ansi-terminal-game is a brick-like thing where transparency is easy, just FYI
[06:14:22] <Boarders_> thanks, I'll give that a look
[06:14:42] <sm> Boarders_: a widget that fills the window and within itself implements the painter's algorithm or something
[06:15:04] *** Joins: xff0x (~xff0x@2001:1a81:52ae:a700:ef5b:bdbe:c8a4:8fd2)
[06:15:04] <sm> but I would ask jtdaugherty in the tracker, he is very responsive
[06:15:55] <sm> here's some discussion: https://github.com/jtdaugherty/brick/issues/74
[06:17:25] <sm> seems like you could make transparent edges (padding), but maybe holes are harder
[06:22:49] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 250 seconds)
[06:25:52] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[06:26:35] *** Joins: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net)
[06:31:32] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[06:31:34] *** Quits: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[06:33:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:34:40] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:38:02] <jackdk> I have a function where I'm accumulating a result backwards, then reversing it at the end (like lisp `PUSH`/`NREVERSE` idiom, I guess). Does this have a common name or combinator somewhere?
[06:41:12] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[06:41:17] <EvanR> no because if taken to extremes it can be pretty inefficient
[06:41:29] <EvanR> if you can, try to accumulate results forwards
[06:41:43] <EvanR> lazily
[06:42:08] *** Quits: shailangsa (~shailangs@host86-186-133-114.range86-186.btcentralplus.com) (Remote host closed the connection)
[06:45:45] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:48:14] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a) (Quit: gone to sleep. ZZZzzzâ€¦)
[06:51:31] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad)
[06:51:34] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad) (Client Quit)
[06:55:16] *** KM4MBG is now known as jackhill
[07:00:24] <dsal> Can someone make Num smaller for the next ghc release?
[07:00:40] <dsal> I'm not quite sure how to think about things like `negate` on types that be negative.
[07:00:43] <jackdk> thanks EvanR . it turned out my problem was compactly expressed as a Data.List.unfold anyway
[07:01:03] <EvanR> cool
[07:01:46] <dsal> Related:  ghci line editing is severely mangled on my machine.  Does this sound like a known issue?
[07:01:58] <dsal> 8.10.7 on M1
[07:02:08] *** Joins: mbuf (~Shakthi@223.178.114.167)
[07:03:00] <dsal> > negate (5 :: Word)
[07:03:01] <lambdabot>  18446744073709551611
[07:03:06] <dsal> I guess I can do something like that.
[07:03:22] <EvanR> > negate (5 :: Natural)
[07:03:23] <lambdabot>  error:
[07:03:23] <lambdabot>      Not in scope: type constructor or class â€˜Naturalâ€™
[07:03:54] <EvanR> > negate (5 :: Numeric.Natural)
[07:03:55] <lambdabot>  error:
[07:03:56] <lambdabot>      Not in scope: type constructor or class â€˜Numeric.Naturalâ€™
[07:04:16] <dsal> That's the other option.
[07:04:21] <EvanR> I guess Natural was voted off the island
[07:04:23] <dsal> I don't really like either.
[07:04:52] <dsal> I'm using Data.Fixed, so I can at least do something reasonable.
[07:05:29] <dsal> Er, Data.Finite
[07:06:01] <dsal> Î»> negate (5 :: Finite 11)
[07:06:01] <dsal> finite 6
[07:06:16] <dsal> I guess since it already does it for me, I can just generalizednewtypederiving it and call it a day.
[07:07:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[07:08:17] <dsal> Oh, well, fromInteger is partial.  I didn't expect that.
[07:11:04] <awpr> there's not really a good Num instance for the finite sets.  modular arithmetic is okay enough, but in the not-uncommon case where people do arithmetic assuming it won't be out-of-range, having it silently wrap can hide bugs, and it's extra unintuitive for `fromInteger`
[07:12:00] <awpr> do you want Num for anything other than supporting integral literals?
[07:13:05] <dsal> Heh, not *really*.  Maybe some addition or something.
[07:13:12] <dsal> I'm representing relative time as the number of minutes since midnight.
[07:13:28] <dsal> Yeah, addition might be nice, and them modulo is the right thing to do.
[07:13:56] <awpr> hmm, maybe.  seems like you'd want modular addition with an overflow flag
[07:14:14] <awpr> like you'd have in adding digits of a positional number system
[07:14:29] <dsal> This is the kind of thing that's not likely to be used incorrectly, but I decided not to make it super difficult to use for the normal case where someone wants to just stick a number in a piece of code.
[07:16:14] <awpr> yeah, my thinking is that literals should be separate from the other parts of `Num`, and along with some extra features for validating literal values, that's `dependent-literals-plugin`
[07:16:30] <awpr> it was actually created specifically to deal with the problem of literals for `Fin`s
[07:18:04] *** Joins: zhengcong (~zhengcong@113.140.11.120)
[07:19:36] <dsal> Yeah, I'd like to have just the representation thing, then maybe have + and * and abs/negate and - and stuff be all separate.
[07:20:02] <dsal> It's a small change, should be able to get in shortly.
[07:20:06] *** Quits: td_ (~td@muedsl-82-207-238-154.citykom.de) (Ping timeout: 260 seconds)
[07:21:22] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[07:21:51] <awpr> lol that's why I went for a syntax plugin.  very little chance for Num to grow a superclass or literals to move to another function, at least without some new typeclass features like implicit superclass impls
[07:21:58] *** Joins: td_ (~td@94.134.91.148)
[07:22:09] <awpr> but just rewriting literals to my own typeclass method is easy
[07:23:11] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[07:23:36] <dsal> For my use case, ~nobody's going to use this code and if I ever do, I'm just going to do a num literal probably.  Or conversion from int that *should* fit.
[07:23:47] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[07:24:39] <awpr> yeah, fair enough.  it was only worth it to me because there were Fin literals all over the place, and if literals or arithmetic was out of range, there was no stack trace
[07:25:11] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[07:25:47] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:30:43] *** Joins: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net)
[07:34:27] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[07:35:02] *** Quits: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[07:37:47] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 250 seconds)
[07:42:06] *** Quits: nautical (~nautical@2601:602:900:1630::396f) (Quit: WeeChat 3.3)
[07:49:33] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 256 seconds)
[07:51:25] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[07:59:57] *** Joins: jinsun (~quassel@user/jinsun)
[08:02:43] *** Quits: drdo (~drdo@roach0.drdo.eu) (Ping timeout: 250 seconds)
[08:03:54] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[08:05:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:10:05] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:15:25] *** Joins: deadmarshal (~deadmarsh@95.38.230.45)
[08:28:05] *** Quits: monochrom (~trebla@216.138.220.146) (Ping timeout: 256 seconds)
[08:30:34] *** Joins: alzgh (~alzgh@user/alzgh)
[08:30:50] *** Joins: monochrom (~trebla@216.138.220.146)
[08:32:37] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[08:37:59] *** Joins: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net)
[08:39:25] *** Quits: drdo (~drdo@roach0.drdo.eu) (Ping timeout: 256 seconds)
[08:45:06] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:49:02] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:51:20] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:52:21] *** Quits: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:57:56] *** Joins: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net)
[08:58:23] *** Joins: Topsi (~Tobias@dyndsl-095-033-023-020.ewe-ip-backbone.de)
[08:59:58] *** Quits: Topsi2 (~Tobias@dyndsl-037-138-064-016.ewe-ip-backbone.de) (Ping timeout: 260 seconds)
[09:01:20] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[09:01:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:01:42] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[09:02:05] *** Quits: drdo (~drdo@roach0.drdo.eu) (Ping timeout: 250 seconds)
[09:03:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:07:54] *** Quits: deadmarshal (~deadmarsh@95.38.230.45) (Ping timeout: 260 seconds)
[09:08:37] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[09:14:18] *** Joins: sagax (~sagax_nb@user/sagax)
[09:17:20] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[09:17:52] *** Quits: sub0 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Session timeout))
[09:18:48] *** Quits: qwedfg_ (~qwedfg@user/qwedfg) (*.net *.split)
[09:18:48] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[09:18:48] *** Quits: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec) (*.net *.split)
[09:18:48] *** Quits: feliix42 (~felix@gibbs.uberspace.de) (*.net *.split)
[09:18:48] *** Quits: siers69 (~ij@user/ij) (*.net *.split)
[09:18:48] *** Quits: bens (~bens@www.typius.com) (*.net *.split)
[09:18:48] *** Quits: xstill- (xstill@fimu/xstill) (*.net *.split)
[09:18:48] *** Quits: matijja (~matijja@193.77.181.201) (*.net *.split)
[09:18:48] *** Quits: megaTherion (~therion@unix.io) (*.net *.split)
[09:18:48] *** Quits: gabiruh (~gabiruh@vps19177.publiccloud.com.br) (*.net *.split)
[09:19:01] *** Joins: feliix42 (~felix@gibbs.uberspace.de)
[09:19:01] *** Joins: bens (~bens@www.typius.com)
[09:19:08] *** Joins: xstill- (xstill@fimu/xstill)
[09:19:16] *** Joins: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec)
[09:19:17] *** Joins: gabiruh (~gabiruh@vps19177.publiccloud.com.br)
[09:19:28] *** Joins: siers (~ij@user/ij)
[09:19:29] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[09:19:34] *** Joins: vysn (~vysn@user/vysn)
[09:19:34] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 260 seconds)
[09:20:21] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[09:23:04] *** Joins: matijja (~matijja@193.77.181.201)
[09:24:59] *** Quits: ircbrowse_tom (~ircbrowse@static.162.49.55.162.clients.your-server.de) (*.net *.split)
[09:24:59] *** Quits: kosmikus_ (~kosmikus@nullzig.kosmikus.org) (*.net *.split)
[09:24:59] *** Quits: mrckndt (~mrckndt@user/mrckndt) (*.net *.split)
[09:24:59] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[09:24:59] *** Quits: ddb (~ddb@ipv6two.tilde.club) (*.net *.split)
[09:24:59] *** Quits: c_wraith (~c_wraith@adjoint.us) (*.net *.split)
[09:24:59] *** Quits: drlkf (~drlkf@2001:41d0:a:62bb::1) (*.net *.split)
[09:24:59] *** Quits: mstruebing (~maex@2001:41d0:8:93c7::1) (*.net *.split)
[09:24:59] *** Quits: xerox (~edi@user/edi) (*.net *.split)
[09:24:59] *** Quits: bwe (~bwe@2a01:4f8:1c1c:4878::2) (*.net *.split)
[09:24:59] *** Quits: Athas (athas@sigkill.dk) (*.net *.split)
[09:24:59] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[09:24:59] *** Quits: incertia (~incertia@d4-50-26-103.nap.wideopenwest.com) (*.net *.split)
[09:25:00] *** Quits: maerwald (~maerwald@user/maerwald) (*.net *.split)
[09:25:00] *** Quits: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0) (*.net *.split)
[09:25:00] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[09:25:00] *** Quits: ikke (~kevin@alpine/developer/ikke) (*.net *.split)
[09:25:00] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[09:25:00] *** Quits: statusbot (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com) (*.net *.split)
[09:25:00] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (*.net *.split)
[09:25:00] *** Quits: robbert-vdh (~robbert@robbertvanderhelm.nl) (*.net *.split)
[09:25:00] *** Quits: ozzloy_ (~ozzloy@ozzloy.lifeafterking.org) (*.net *.split)
[09:25:00] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (*.net *.split)
[09:25:00] *** Quits: tureba (~tureba@tureba.org) (*.net *.split)
[09:25:00] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (*.net *.split)
[09:25:00] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[09:25:00] *** Quits: arkeet (arkeet@moriya.ca) (*.net *.split)
[09:25:00] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (*.net *.split)
[09:25:00] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[09:25:00] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[09:25:00] *** Quits: haveo (~haveo@sl35.iuwt.fr) (*.net *.split)
[09:25:00] *** Quits: heath (~heath@user/heath) (*.net *.split)
[09:25:00] *** Quits: blades (~blades@204.48.29.163) (*.net *.split)
[09:25:00] *** Quits: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net) (*.net *.split)
[09:25:00] *** Quits: Logio (em@kapsi.fi) (*.net *.split)
[09:25:00] *** Quits: spider (~spider@vps-951ce37a.vps.ovh.ca) (*.net *.split)
[09:25:00] *** Quits: \dev\ice (~benner@2a01:4f8:1c1c:2178::1) (*.net *.split)
[09:25:00] *** Quits: pierrot (~pi@user/pierrot) (*.net *.split)
[09:25:00] *** Quits: raoul (~raoul@95.179.203.88) (*.net *.split)
[09:25:07] *** Joins: bwe (~bwe@2a01:4f8:1c1c:4878::2)
[09:25:09] *** Joins: Logio (em@kapsi.fi)
[09:25:12] *** Joins: kosmikus (~kosmikus@nullzig.kosmikus.org)
[09:25:12] *** Joins: \dev\ice (~benner@2a01:4f8:1c1c:2178::1)
[09:25:12] *** Joins: xerox (~edi@user/edi)
[09:25:16] *** Joins: mstruebing (~maex@2001:41d0:8:93c7::1)
[09:25:16] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[09:25:16] *** Joins: drlkf (~drlkf@2001:41d0:a:62bb::1)
[09:25:16] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[09:25:19] *** Joins: c_wraith (~c_wraith@adjoint.us)
[09:25:19] *** Joins: ozzloy (~ozzloy@ozzloy.lifeafterking.org)
[09:25:20] *** Joins: haveo (~haveo@sl35.iuwt.fr)
[09:25:20] *** Joins: arkeet (~arkeet@moriya.ca)
[09:25:23] *** Joins: spider (~spider@vps-951ce37a.vps.ovh.ca)
[09:25:26] *** Joins: Athas (athas@sigkill.dk)
[09:25:30] *** Joins: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0)
[09:25:35] *** Joins: nisstyre (~wes@li798-187.members.linode.com)
[09:25:36] *** Joins: ddb (~ddb@ipv6two.tilde.club)
[09:25:37] *** Joins: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net)
[09:25:37] *** Joins: ikke (~kevin@delta.ikke.info)
[09:25:40] *** Joins: remexre (~remexre@user/remexre)
[09:25:55] *** Joins: statusbot (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com)
[09:26:18] *** spider is now known as Guest3953
[09:26:36] *** Joins: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1)
[09:26:41] *** Quits: ikke (~kevin@delta.ikke.info) (Changing host)
[09:26:41] *** Joins: ikke (~kevin@alpine/developer/ikke)
[09:26:42] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[09:26:42] *** Joins: hexology (~hexology@user/hexology)
[09:26:45] *** Joins: incertia (~incertia@d4-50-26-103.nap.wideopenwest.com)
[09:26:45] *** Joins: maerwald (~maerwald@mail.hasufell.de)
[09:26:48] *** Joins: arahael (~arahael@125-209-128-15.tpgi.com.au)
[09:26:50] *** Joins: heath (~heath@user/heath)
[09:26:53] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[09:26:53] *** Joins: pierrot (~pi@user/pierrot)
[09:26:57] *** Joins: blades (~blades@204.48.29.163)
[09:26:57] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[09:27:05] *** Joins: robbert-vdh (~robbert@robbertvanderhelm.nl)
[09:28:03] *** Joins: megaTherion (~therion@unix.io)
[09:28:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:30:17] *** Joins: tureba (~tureba@tureba.org)
[09:30:17] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[09:33:05] *** Joins: Ekho (~Ekho@user/ekho)
[09:38:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[09:39:47] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 250 seconds)
[09:41:07] *** Quits: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:41:42] *** Joins: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net)
[09:43:08] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:46:02] *** Quits: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[09:46:39] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:52:32] *** Quits: xff0x (~xff0x@2001:1a81:52ae:a700:ef5b:bdbe:c8a4:8fd2) (Ping timeout: 268 seconds)
[09:53:10] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[09:53:16] *** Joins: xff0x (~xff0x@2001:1a81:52ae:a700:d47e:fd11:5546:7b77)
[09:59:23] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[10:00:37] *** Joins: fef (~thedawn@user/thedawn)
[10:05:18] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[10:14:43] *** Joins: deadmarshal (~deadmarsh@95.38.230.45)
[10:17:44] <hololeap_> this might be a hard question to answer, but why does `cabal info` take so long to run?
[10:17:50] *** hololeap_ is now known as hololeap
[10:18:13] *** Joins: emf (~emf@2620:10d:c090:400::5:b07b)
[10:19:06] *** Quits: deadmarshal (~deadmarsh@95.38.230.45) (Ping timeout: 245 seconds)
[10:19:28] *** Quits: emf (~emf@2620:10d:c090:400::5:b07b) (Client Quit)
[10:23:42] *** Joins: deadmarshal (~deadmarsh@95.38.230.45)
[10:25:49] *** Joins: mamehiko (~robbie@140.254.77.249)
[10:29:44] *** Joins: drdo (~drdo@roach0.drdo.eu)
[10:33:31] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[10:33:52] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[10:34:51] *** Joins: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net)
[10:35:41] *** Quits: mamehiko (~robbie@140.254.77.249) (Quit: Leaving)
[10:37:40] *** Quits: xff0x (~xff0x@2001:1a81:52ae:a700:d47e:fd11:5546:7b77) (Ping timeout: 260 seconds)
[10:38:26] *** Joins: xff0x (~xff0x@2001:1a81:52ae:a700:2e71:8ba4:bf99:ed92)
[10:39:27] *** Quits: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[10:49:12] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[10:51:36] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[10:54:03] *** Quits: zhengcong (~zhengcong@113.140.11.120) (Remote host closed the connection)
[10:54:10] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:02:34] *** Joins: lechner (~lechner@debian/lechner)
[11:08:33] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[11:10:42] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[11:18:00] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[11:18:33] <sclv> hololeap: it runs pretty quick for me on the latest cabal. but in general its got to (i think) scan through the entire zipped collection of hackage cabal files to find the ones of interest
[11:19:56] *** Quits: deadmarshal (~deadmarsh@95.38.230.45) (Ping timeout: 245 seconds)
[11:20:36] <sclv> i.e. `cabal info bytestring` runs in 1.5 secs on my box
[11:21:57] *** Quits: phma (~phma@2001:5b0:211f:e738:5c4d:dbc4:3f14:dae2) (Read error: Connection reset by peer)
[11:22:23] *** Quits: Firedancer (sid336191@id-336191.hampstead.irccloud.com) (Ping timeout: 265 seconds)
[11:22:32] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[11:22:41] *** Quits: davetapley (sid666@id-666.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[11:22:52] *** Quits: nrr__ (sid20938@id-20938.lymington.irccloud.com) (Ping timeout: 265 seconds)
[11:23:01] *** Joins: phma (phma@2001:5b0:211b:e388:ee5a:511e:22c4:3b06)
[11:23:08] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[11:23:29] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[11:23:53] *** Joins: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net)
[11:24:17] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[11:24:33] *** Joins: nrr__ (sid20938@id-20938.lymington.irccloud.com)
[11:24:52] *** Quits: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:25:29] *** Joins: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net)
[11:25:35] *** Joins: Firedancer (sid336191@id-336191.hampstead.irccloud.com)
[11:25:35] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:25:55] *** Joins: davetapley (sid666@id-666.uxbridge.irccloud.com)
[11:26:23] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[11:27:30] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:28:18] *** Joins: deadmarshal (~deadmarsh@95.38.230.45)
[11:29:08] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:29:56] *** Quits: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[11:31:20] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:33:54] *** Joins: chele (~chele@user/chele)
[11:34:01] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:7c6d:4c33:f4a3:2a22)
[11:34:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:36:03] *** Joins: trcc (~trcc@users-5343.st.net.au.dk)
[11:36:05] *** Quits: trcc (~trcc@users-5343.st.net.au.dk) (Remote host closed the connection)
[11:36:56] *** Joins: trcc (~trcc@users-5343.st.net.au.dk)
[11:40:03] *** Joins: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net)
[11:40:09] *** Joins: trcc_ (~trcc@eduroam09.au.dk)
[11:40:13] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:42:26] *** Quits: trcc_ (~trcc@eduroam09.au.dk) (Read error: Connection reset by peer)
[11:42:36] *** Joins: trcc_ (~trcc@eduroam09.au.dk)
[11:43:28] *** Quits: trcc (~trcc@users-5343.st.net.au.dk) (Ping timeout: 260 seconds)
[11:44:47] *** Quits: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:44:51] *** Quits: deadmarshal (~deadmarsh@95.38.230.45) (Ping timeout: 264 seconds)
[11:45:21] *** Joins: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net)
[11:55:37] *** Joins: michalz (~michalz@185.246.204.33)
[12:00:33] *** Joins: deadmarshal (~deadmarsh@95.38.230.45)
[12:00:38] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.180)
[12:00:39] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.180) (Changing host)
[12:00:39] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:03:00] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Read error: Connection reset by peer)
[12:03:13] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[12:10:25] *** Quits: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:13:45] *** Joins: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net)
[12:18:41] *** Quits: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[12:20:24] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[12:21:34] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Remote host closed the connection)
[12:23:12] *** Joins: fendor (~fendor@178.165.196.64.wireless.dyn.drei.com)
[12:25:13] *** Joins: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net)
[12:28:16] *** Quits: deadmarshal (~deadmarsh@95.38.230.45) (Ping timeout: 260 seconds)
[12:32:41] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[12:32:41] *** Quits: yauhsien (~yauhsien@118-167-40-224.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[12:32:53] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[12:33:45] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[12:34:22] *** Joins: shailangsa (~shailangs@host86-186-133-114.range86-186.btcentralplus.com)
[12:41:37] *** Joins: kuribas (~user@ptr-25vy0i9f20n8puprvgm.18120a2.ip6.access.telenet.be)
[12:42:23] *** Quits: trcc_ (~trcc@eduroam09.au.dk) (Remote host closed the connection)
[12:46:09] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[12:46:38] *** Joins: trcc_ (~trcc@users-1190.st.net.au.dk)
[12:46:57] *** Joins: cfricke (~cfricke@user/cfricke)
[12:47:28] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:28] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:31] *** allbery_b is now known as geekosaur
[12:47:49] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:49:52] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[12:50:15] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 264 seconds)
[12:50:21] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[12:54:50] *** Joins: acidjnk (~acidjnk@2001:16b8:6720:5a00:f48d:53a:53a4:d2dc)
[12:57:40] *** Quits: edmundnoble (sid229620@id-229620.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[12:57:40] *** Quits: SethTisue__ (sid14912@id-14912.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:57:40] *** Quits: caasih (sid13241@id-13241.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:57:59] *** Quits: jackdk (sid373013@cssa/jackdk) (Ping timeout: 264 seconds)
[12:57:59] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:57:59] *** Quits: hongminhee (sid295@id-295.tinside.irccloud.com) (Ping timeout: 264 seconds)
[12:57:59] *** Quits: truckasaurus (sid457088@id-457088.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:58:08] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 268 seconds)
[12:58:09] *** Quits: christiaanb (sid84827@id-84827.lymington.irccloud.com) (Ping timeout: 268 seconds)
[12:58:14] *** Quits: dpratt__ (sid193493@id-193493.helmsley.irccloud.com) (Ping timeout: 246 seconds)
[12:58:14] *** Quits: mrianbloom (sid350277@id-350277.ilkley.irccloud.com) (Ping timeout: 246 seconds)
[12:58:14] *** Quits: AndreasK__ (sid320732@id-320732.uxbridge.irccloud.com) (Ping timeout: 246 seconds)
[12:58:14] *** Quits: sa1_ (sid7690@id-7690.ilkley.irccloud.com) (Ping timeout: 246 seconds)
[12:58:14] *** Quits: b20n (sid115913@id-115913.uxbridge.irccloud.com) (Ping timeout: 246 seconds)
[12:58:16] *** Quits: Firedancer (sid336191@id-336191.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[12:58:16] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[12:58:27] *** Quits: davetapley (sid666@id-666.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[12:58:27] *** Quits: Adeon (sid418992@id-418992.lymington.irccloud.com) (Ping timeout: 250 seconds)
[12:58:27] *** Quits: parseval (sid239098@id-239098.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[12:58:27] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 250 seconds)
[12:58:27] *** Quits: cln (sid336875@id-336875.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[12:58:28] *** Quits: ysh (sid6017@id-6017.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[12:58:28] *** Quits: aristid (sid1599@id-1599.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[12:58:32] *** Quits: whez (sid470288@id-470288.lymington.irccloud.com) (Ping timeout: 240 seconds)
[12:58:34] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 265 seconds)
[12:58:34] *** Quits: teehemkay (sid14792@id-14792.lymington.irccloud.com) (Ping timeout: 265 seconds)
[12:58:34] *** Quits: alinab (sid468903@id-468903.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[12:58:35] *** Quits: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com) (Ping timeout: 246 seconds)
[12:58:35] *** Quits: carter (sid14827@id-14827.helmsley.irccloud.com) (Ping timeout: 246 seconds)
[12:58:35] *** Quits: rune (sid21167@id-21167.ilkley.irccloud.com) (Ping timeout: 246 seconds)
[12:58:35] *** Quits: enemeth79 (sid309041@id-309041.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:58:35] *** Quits: taktoa[c] (sid282096@id-282096.tinside.irccloud.com) (Ping timeout: 264 seconds)
[12:58:35] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:58:35] *** Quits: supersven (sid501114@id-501114.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[12:58:36] *** Quits: rtpg (sid443069@id-443069.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:58:36] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 260 seconds)
[12:58:36] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 260 seconds)
[12:58:36] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[12:58:36] *** Quits: bw__ (sid2730@id-2730.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:58:36] *** Quits: systemfault (sid267009@id-267009.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[12:58:41] *** Quits: nrr__ (sid20938@id-20938.lymington.irccloud.com) (Ping timeout: 245 seconds)
[12:58:45] *** Quits: saolsen (sid26430@id-26430.lymington.irccloud.com) (Ping timeout: 268 seconds)
[12:58:53] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[12:58:54] *** Quits: T_S_ (sid501726@id-501726.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[12:58:54] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 250 seconds)
[12:58:56] *** Quits: angerman (sid209936@id-209936.ilkley.irccloud.com) (Ping timeout: 246 seconds)
[12:58:56] *** Quits: bradparker (sid262931@id-262931.uxbridge.irccloud.com) (Ping timeout: 246 seconds)
[12:58:56] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Ping timeout: 246 seconds)
[12:59:02] *** Quits: linkedlistist (uid528169@id-528169.lymington.irccloud.com) (Ping timeout: 240 seconds)
[12:59:03] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (Ping timeout: 265 seconds)
[12:59:03] *** Quits: integral (sid296274@user/integral) (Ping timeout: 265 seconds)
[12:59:03] *** Quits: bbhoss (sid18216@id-18216.tinside.irccloud.com) (Ping timeout: 265 seconds)
[12:59:03] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (Ping timeout: 265 seconds)
[12:59:03] *** Quits: teehemkay_ (sid14792@id-14792.lymington.irccloud.com) (Ping timeout: 265 seconds)
[12:59:03] *** Quits: kaizen (sid501599@id-501599.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[12:59:03] *** Quits: tnks (sid412124@id-412124.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[12:59:04] *** Quits: lightandlight (sid135476@id-135476.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[12:59:04] *** Quits: vito (sid1962@user/vito) (Ping timeout: 260 seconds)
[12:59:11] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (Ping timeout: 264 seconds)
[12:59:11] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (Ping timeout: 264 seconds)
[12:59:11] *** Quits: kristjansson_ (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 264 seconds)
[12:59:11] *** Quits: scav (sid309693@id-309693.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:59:11] *** Quits: degraafk (sid71464@id-71464.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:59:11] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:59:11] *** Quits: grfn (sid449115@id-449115.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:59:17] *** Quits: S11001001 (sid42510@id-42510.ilkley.irccloud.com) (Ping timeout: 246 seconds)
[12:59:18] *** Joins: linkedlistist (uid528169@lymington.irccloud.com)
[12:59:19] *** Quits: tapas (sid467876@id-467876.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[12:59:19] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[12:59:19] *** Quits: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[12:59:19] *** Quits: gmc_ (sid58314@id-58314.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[12:59:19] *** Quits: jonrh_ (sid5185@id-5185.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[12:59:20] *** Joins: rune (sid21167@ilkley.irccloud.com)
[12:59:21] *** Joins: whez (sid470288@lymington.irccloud.com)
[12:59:21] *** Joins: gregberns___ (sid315709@helmsley.irccloud.com)
[12:59:21] *** Joins: alinab (sid468903@helmsley.irccloud.com)
[12:59:22] *** Joins: tnks (sid412124@helmsley.irccloud.com)
[12:59:22] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[12:59:22] *** Quits: _0x47 (sid508683@id-508683.tinside.irccloud.com) (Ping timeout: 268 seconds)
[12:59:22] *** Quits: hamishmack (sid389057@id-389057.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[12:59:22] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[12:59:22] *** Quits: iphy (sid67735@id-67735.lymington.irccloud.com) (Ping timeout: 268 seconds)
[12:59:23] *** Quits: dmj` (sid72307@id-72307.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[12:59:23] *** Quits: tritlo (sid58727@user/tritlo) (Ping timeout: 268 seconds)
[12:59:23] *** Quits: gregberns__ (sid315709@id-315709.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[12:59:23] *** gregberns___ is now known as gregberns__
[12:59:23] *** Joins: teehemkay_ (sid14792@lymington.irccloud.com)
[12:59:23] *** Joins: degraafk (sid71464@lymington.irccloud.com)
[12:59:23] *** Joins: parseval (sid239098@helmsley.irccloud.com)
[12:59:23] *** Joins: amir_ (sid22336@user/amir)
[12:59:24] *** Joins: iphy_ (sid67735@lymington.irccloud.com)
[12:59:24] *** Joins: grfn (sid449115@helmsley.irccloud.com)
[12:59:24] *** Joins: hamishmack_ (sid389057@hampstead.irccloud.com)
[12:59:25] *** Joins: scav (sid309693@helmsley.irccloud.com)
[12:59:25] *** Joins: _0x47_ (sid508683@tinside.irccloud.com)
[12:59:25] *** Joins: bbhoss (sid18216@tinside.irccloud.com)
[12:59:27] *** Joins: T_S_ (sid501726@uxbridge.irccloud.com)
[12:59:27] *** Joins: gonz_____ (sid304396@lymington.irccloud.com)
[12:59:32] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Ping timeout: 240 seconds)
[12:59:32] *** Quits: gonz____ (sid304396@id-304396.lymington.irccloud.com) (Ping timeout: 265 seconds)
[12:59:32] *** Quits: sclv (sid39734@haskell/developer/sclv) (Ping timeout: 265 seconds)
[12:59:32] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (Ping timeout: 265 seconds)
[12:59:32] *** Quits: amir (sid22336@user/amir) (Ping timeout: 265 seconds)
[12:59:32] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[12:59:38] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[12:59:38] *** amir_ is now known as amir
[12:59:44] *** Joins: deadmarshal (~deadmarsh@95.38.230.45)
[12:59:47] *** Joins: angerman (sid209936@ilkley.irccloud.com)
[12:59:47] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 264 seconds)
[12:59:47] *** Quits: ephemient (uid407513@id-407513.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:59:47] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:59:47] *** Quits: Boarders_ (sid425905@id-425905.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:59:47] *** Quits: acertain (sid470584@id-470584.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[12:59:47] *** Quits: astra` (sid289983@user/amish) (Ping timeout: 264 seconds)
[12:59:47] *** Quits: idnar (sid12240@debian/mithrandi) (Ping timeout: 264 seconds)
[12:59:47] *** Quits: mcfilib (sid302703@user/mcfilib) (Ping timeout: 264 seconds)
[12:59:50] *** Joins: sclv (sid39734@haskell/developer/sclv)
[12:59:51] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:59:53] *** Joins: obviyus (sid415299@user/obviyus)
[12:59:59] *** Quits: typetetris (sid275937@id-275937.tinside.irccloud.com) (Ping timeout: 268 seconds)
[12:59:59] *** Quits: philpax_ (sid516926@id-516926.lymington.irccloud.com) (Ping timeout: 268 seconds)
[12:59:59] *** Quits: aria (sid380617@id-380617.lymington.irccloud.com) (Ping timeout: 268 seconds)
[12:59:59] *** Quits: jmct_ (sid160793@id-160793.tinside.irccloud.com) (Ping timeout: 268 seconds)
[12:59:59] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[12:59:59] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[13:00:01] *** Quits: glowcoil (sid3405@id-3405.tinside.irccloud.com) (Ping timeout: 265 seconds)
[13:00:01] *** Quits: jakesyl_ (sid56879@id-56879.hampstead.irccloud.com) (Ping timeout: 265 seconds)
[13:00:01] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[13:00:01] *** Quits: gaze___ (sid387101@id-387101.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[13:00:03] *** Joins: tritlo (sid58727@user/tritlo)
[13:00:04] *** Joins: rubin55 (sid175221@hampstead.irccloud.com)
[13:00:16] *** Joins: glowcoil (sid3405@tinside.irccloud.com)
[13:00:26] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[13:00:28] *** Joins: gaze___ (sid387101@helmsley.irccloud.com)
[13:00:33] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[13:00:36] *** Joins: taktoa[c] (sid282096@tinside.irccloud.com)
[13:00:38] *** Joins: Boarders_ (sid425905@lymington.irccloud.com)
[13:00:41] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[13:00:42] *** Joins: mcfilib (sid302703@user/mcfilib)
[13:00:47] *** Joins: pepeiborra (sid443799@ilkley.irccloud.com)
[13:00:48] *** Joins: ysh (sid6017@ilkley.irccloud.com)
[13:00:50] *** Joins: typetetris (sid275937@tinside.irccloud.com)
[13:00:50] *** Joins: cln (sid336875@ilkley.irccloud.com)
[13:01:02] *** Quits: acidjnk (~acidjnk@2001:16b8:6720:5a00:f48d:53a:53a4:d2dc) (Ping timeout: 240 seconds)
[13:01:06] *** Joins: joel135 (sid136450@hampstead.irccloud.com)
[13:01:14] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:01:25] *** Joins: ehamberg (sid18208@hampstead.irccloud.com)
[13:01:26] *** Joins: jmct_ (sid160793@tinside.irccloud.com)
[13:01:29] *** Joins: bjs (sid190364@user/bjs)
[13:01:35] *** Joins: hubvu (sid495858@user/hubvu)
[13:01:44] *** Joins: vito (sid1962@user/vito)
[13:01:46] *** Joins: carter (sid14827@helmsley.irccloud.com)
[13:01:48] *** Joins: nrr__ (sid20938@lymington.irccloud.com)
[13:01:48] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[13:01:48] *** Joins: kaizen (sid501599@helmsley.irccloud.com)
[13:01:48] *** Joins: conjunctive (sid433686@helmsley.irccloud.com)
[13:01:48] *** Joins: JSharp (sid4580@lymington.irccloud.com)
[13:01:49] *** Joins: meinside (uid24933@helmsley.irccloud.com)
[13:01:50] *** Joins: ProofTechnique (sid79547@ilkley.irccloud.com)
[13:01:51] *** Joins: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:01:52] *** Joins: dpratt__ (sid193493@helmsley.irccloud.com)
[13:01:56] *** Joins: gmc_ (sid58314@ilkley.irccloud.com)
[13:02:08] *** Joins: enemeth79 (sid309041@lymington.irccloud.com)
[13:02:08] *** Joins: saolsen (sid26430@lymington.irccloud.com)
[13:02:11] *** Joins: idnar (sid12240@debian/mithrandi)
[13:02:12] *** Joins: tapas (sid467876@ilkley.irccloud.com)
[13:02:16] *** Joins: ephemient (uid407513@lymington.irccloud.com)
[13:02:17] *** Joins: jonrh_ (sid5185@ilkley.irccloud.com)
[13:02:22] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[13:02:23] *** Joins: dsal (sid13060@lymington.irccloud.com)
[13:02:32] *** Joins: awpr (uid446117@lymington.irccloud.com)
[13:02:47] *** Joins: SanchayanMaity (sid478177@hampstead.irccloud.com)
[13:02:47] *** Joins: pjlsergeant (sid143467@hampstead.irccloud.com)
[13:02:49] *** Joins: astra` (sid289983@user/amish)
[13:02:54] *** Joins: dmj` (sid72307@hampstead.irccloud.com)
[13:03:03] *** Joins: hook54321 (sid149355@user/hook54321)
[13:03:05] *** Joins: truckasaurus (sid457088@helmsley.irccloud.com)
[13:03:07] *** Joins: elvishjerricco (sid237756@helmsley.irccloud.com)
[13:03:13] *** Joins: jakesyl_ (sid56879@hampstead.irccloud.com)
[13:03:16] *** Joins: NemesisD (sid24071@lymington.irccloud.com)
[13:03:17] *** Joins: hendi (sid489601@lymington.irccloud.com)
[13:03:19] *** Joins: philpax_ (sid516926@lymington.irccloud.com)
[13:03:21] *** Joins: Adeon (sid418992@lymington.irccloud.com)
[13:03:27] *** Joins: systemfault (sid267009@uxbridge.irccloud.com)
[13:03:39] *** Joins: SrPx (sid108780@uxbridge.irccloud.com)
[13:03:41] *** Joins: alzgh (alzgh@user/alzgh)
[13:03:41] *** Joins: bw__ (sid2730@ilkley.irccloud.com)
[13:03:57] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Client Quit)
[13:03:57] *** Joins: acertain (sid470584@hampstead.irccloud.com)
[13:03:58] *** Joins: aria (sid380617@lymington.irccloud.com)
[13:04:03] *** Joins: cbarrett (sid192934@helmsley.irccloud.com)
[13:04:06] *** Joins: Firedancer (sid336191@hampstead.irccloud.com)
[13:04:07] *** Joins: S11001001 (sid42510@ilkley.irccloud.com)
[13:04:39] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[13:04:51] *** Joins: Pent (sid313808@lymington.irccloud.com)
[13:04:59] *** Joins: integral (sid296274@user/integral)
[13:05:02] *** Joins: sa (sid1055@tinside.irccloud.com)
[13:05:04] *** Joins: aarchi (sid486183@uxbridge.irccloud.com)
[13:05:07] *** Joins: bradparker (sid262931@uxbridge.irccloud.com)
[13:05:08] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[13:05:12] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[13:06:54] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0) (Remote host closed the connection)
[13:07:32] *** Quits: ProofTechnique (sid79547@ilkley.irccloud.com) (Ping timeout: 240 seconds)
[13:07:54] *** Quits: Pent (sid313808@lymington.irccloud.com) (Max SendQ exceeded)
[13:07:55] *** Quits: jakesyl_ (sid56879@hampstead.irccloud.com) (Max SendQ exceeded)
[13:08:02] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (Ping timeout: 240 seconds)
[13:08:10] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[13:08:15] *** Quits: typetetris (sid275937@tinside.irccloud.com) (Ping timeout: 264 seconds)
[13:08:33] *** Joins: jakesyl_ (sid56879@id-56879.hampstead.irccloud.com)
[13:08:41] *** Quits: philpax_ (sid516926@lymington.irccloud.com) (Ping timeout: 245 seconds)
[13:08:52] *** Joins: philpax_ (sid516926@id-516926.lymington.irccloud.com)
[13:09:12] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[13:10:42] *** Joins: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com)
[13:11:26] *** Joins: typetetris (sid275937@id-275937.tinside.irccloud.com)
[13:12:17] *** Joins: jackdk (sid373013@cssa/jackdk)
[13:12:18] *** Joins: hongminhee (sid295@id-295.tinside.irccloud.com)
[13:12:21] *** Joins: christiaanb (sid84827@id-84827.lymington.irccloud.com)
[13:12:26] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[13:12:34] *** Joins: SethTisue__ (sid14912@id-14912.ilkley.irccloud.com)
[13:12:35] *** Joins: edmundnoble (sid229620@id-229620.helmsley.irccloud.com)
[13:12:41] *** Joins: caasih (sid13241@id-13241.ilkley.irccloud.com)
[13:12:51] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[13:13:05] *** Joins: lightandlight (sid135476@id-135476.helmsley.irccloud.com)
[13:13:35] *** Joins: AndreasK__ (sid320732@id-320732.uxbridge.irccloud.com)
[13:13:36] *** Joins: b20n (sid115913@id-115913.uxbridge.irccloud.com)
[13:13:37] *** Joins: rtpg (sid443069@id-443069.ilkley.irccloud.com)
[13:13:37] *** Joins: mrianbloom (sid350277@id-350277.ilkley.irccloud.com)
[13:13:41] *** Joins: sa1_ (sid7690@id-7690.ilkley.irccloud.com)
[13:13:45] *** Joins: aristid (sid1599@id-1599.uxbridge.irccloud.com)
[13:13:47] *** Joins: davetapley (sid666@id-666.uxbridge.irccloud.com)
[13:13:56] *** Joins: teehemkay (sid14792@id-14792.lymington.irccloud.com)
[13:17:12] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[13:19:30] *** Joins: jakalx (~jakalx@base.jakalx.net)
[13:26:16] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:64b0:a3f2:ec06:e597)
[13:29:33] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[13:30:17] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[13:31:54] *** Quits: fendor (~fendor@178.165.196.64.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[13:32:28] *** Joins: acidjnk (~acidjnk@p200300d0c7271e45b900d7f27b1ad71c.dip0.t-ipconnect.de)
[13:32:45] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:33:09] *** Joins: max1984 (~Massi@host-79-33-240-217.retail.telecomitalia.it)
[13:36:24] *** Parts: max1984 (~Massi@host-79-33-240-217.retail.telecomitalia.it) ()
[13:46:12] *** Joins: ph88 (~ph88@95.90.240.104)
[13:46:39] *** Quits: deadmarshal (~deadmarsh@95.38.230.45) (Ping timeout: 264 seconds)
[13:46:43] *** Quits: ph88 (~ph88@95.90.240.104) (Client Quit)
[13:47:17] *** Joins: ph88 (~ph88@95.90.240.104)
[13:48:29] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[13:48:38] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[13:50:21] *** Joins: rribeiro (~rodrigo@2804:5c:55cc:9e00:440a:f8e5:a6cd:124c)
[13:52:04] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:53:04] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[13:54:37] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[13:55:43] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:990:f1e:8987:d5f9)
[13:59:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7816:2c69:3dcc:933a) (Ping timeout: 264 seconds)
[13:59:51] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[14:02:04] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:e931:44b2:abc5:155b)
[14:03:46] *** Quits: sagax (~sagax_nb@user/sagax) (Excess Flood)
[14:03:52] *** Quits: maerwald (~maerwald@mail.hasufell.de) (Changing host)
[14:03:52] *** Joins: maerwald (~maerwald@user/maerwald)
[14:05:23] *** Joins: Axma55388 (~Axman6@user/axman6)
[14:05:51] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:990:f1e:8987:d5f9) (Ping timeout: 264 seconds)
[14:05:57] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[14:07:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[14:09:58] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[14:10:05] *** Joins: chele_ (~chele@user/chele)
[14:13:03] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Ping timeout: 264 seconds)
[14:13:55] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:29bf:5ae9:f17:83c0)
[14:13:58] *** chele_ is now known as chele
[14:17:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:e931:44b2:abc5:155b) (Ping timeout: 245 seconds)
[14:21:20] *** Joins: raoul (~raoul@95.179.203.88)
[14:28:11] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[14:30:20] *** Joins: deadmarshal (~deadmarsh@95.38.230.45)
[14:30:29] *** Joins: sagax (~sagax_nb@user/sagax)
[14:32:28] *** Quits: Topsi (~Tobias@dyndsl-095-033-023-020.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[14:33:50] *** Joins: __monty__ (~toonn@user/toonn)
[14:34:10] *** Quits: xsperry (~xs@user/xsperry) ()
[14:35:16] *** Quits: Axma55388 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[14:37:30] *** Joins: Axman6 (~Axman6@user/axman6)
[14:40:04] *** Quits: Unhammer (~Unhammer@user/unhammer) (Ping timeout: 265 seconds)
[14:40:05] *** Quits: blackcap (~blackcap@144.89-10-135.nextgentel.com) (Read error: Connection reset by peer)
[14:40:15] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[14:40:20] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[14:40:53] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.180)
[14:40:53] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.180) (Changing host)
[14:40:53] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:44:37] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[14:45:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[14:45:51] *** Joins: blackcap (~blackcap@144.89-10-135.nextgentel.com)
[14:47:22] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[14:47:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:48:54] *** Joins: Axman6 (~Axman6@user/axman6)
[14:52:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[14:53:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:58:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[14:58:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:59:22] *** Joins: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374)
[15:03:56] *** Joins: xsperry (~xs@user/xsperry)
[15:04:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[15:04:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:09:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[15:10:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:14:31] <Franciman> does haskell allow talking about propositional identity?
[15:14:42] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5cca:96d9:7234:6761)
[15:15:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[15:15:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:15:46] *** Quits: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[15:16:05] *** Quits: martin02 (~silas@141.84.69.76) (Ping timeout: 256 seconds)
[15:17:15] *** Quits: puke (~puke@user/puke) (Quit: puke)
[15:17:51] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:29bf:5ae9:f17:83c0) (Ping timeout: 245 seconds)
[15:20:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[15:21:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:22:29] *** Quits: rribeiro (~rodrigo@2804:5c:55cc:9e00:440a:f8e5:a6cd:124c) (Remote host closed the connection)
[15:22:31] *** Joins: trcc (~trcc@eduroam09.au.dk)
[15:26:11] *** Quits: trcc_ (~trcc@users-1190.st.net.au.dk) (Ping timeout: 245 seconds)
[15:27:54] *** Quits: trcc (~trcc@eduroam09.au.dk) (Remote host closed the connection)
[15:28:26] *** Joins: trcc (~trcc@users-5343.st.net.au.dk)
[15:31:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[15:32:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:42:49] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[15:43:39] *** Quits: deadmarshal (~deadmarsh@95.38.230.45) (Ping timeout: 264 seconds)
[15:45:23] *** Joins: jippiedoe (~david@2a02-a44c-e14e-1-c6ad-4343-92dc-4cb2.fixed6.kpn.net)
[15:47:01] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[15:56:20] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[16:01:03] *** Quits: jippiedoe (~david@2a02-a44c-e14e-1-c6ad-4343-92dc-4cb2.fixed6.kpn.net) (Ping timeout: 264 seconds)
[16:08:36] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[16:08:57] *** Joins: alzgh (alzgh@user/alzgh)
[16:19:32] *** Joins: jippiedoe (~david@2a02-a44c-e14e-1-c482-95c0-575a-83bc.fixed6.kpn.net)
[16:24:41] *** Joins: Cajun (~Cajun@user/cajun)
[16:24:42] *** Joins: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:31:08] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[16:40:48] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[16:41:39] *** Joins: deadmarshal (~deadmarsh@95.38.230.45)
[16:45:21] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[16:45:34] *** Quits: bw__ (sid2730@ilkley.irccloud.com) ()
[16:46:01] *** Joins: bw (sid2730@user/betawaffle)
[16:56:05] *** Quits: bitdex_ (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:58:07] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
[16:59:55] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[17:02:57] *** Quits: V (~v@anomalous.eu) (Remote host closed the connection)
[17:04:15] *** Joins: V (~v@anomalous.eu)
[17:06:48] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[17:15:18] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:18:58] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[17:20:12] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[17:22:22] <timCF> Hello! Are there any runtime perfornamce issues because using TypeApplications `@a` syntax instead of `Proxy :: Proxy a` in generic functions with `forall a.`? For me `@a` looks better, and I'll use it any day of the week instead of Proxy, but is it coming for free in terms of performance?
[17:22:48] <merijn> timCF: Performance: Probably. Maintenance: No
[17:22:56] <dminuoso> TypeApplication could probably be cheaper since there's no token that GHC must optimize away
[17:23:08] <dminuoso> But I call premature optimization
[17:24:02] <timCF> You mean TypeApplications might be even better in terms of performance?
[17:24:03] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:24:06] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[17:24:25] <merijn> TypeApplications may also break randomly when your dependencies *OR* compiler update, so...
[17:24:26] <dminuoso> timCF: Personally I prefer Proxy in most situations because a) it guarantees stable and communicatable API, b) doesn't demand yet-another extension from a user, and it's often easier to pass things around by binding a proxy pattern rather than introduce some forall at some outer level
[17:25:19] <merijn> TypeApplications is great, if you like things like "accidentall tying the stability of my API to implementation details of your specific compiler version"!
[17:25:20] <dminuoso> If both sides (the definition and call site) are under your full control, it probably doesn't matter
[17:25:34] <dminuoso> But be sure to introduce all variables explicitly via forall
[17:26:52] <timCF> merijn: dminuoso: thanks! 
[17:27:23] <timCF> merijn: you mean it might brake when I'm using some dependency, and then they switch order in forall expression for some reason?
[17:27:38] <dminuoso> Also, TypeApplications tends to be a bit brittle when since you cant apply polymorphic things to visible type arguments after inference has done its job
[17:27:48] <merijn> timCF: Yes. And also if they never used an explicit forall and the GHC infers a different order for implicit foralls
[17:27:49] <dminuoso> e.g.:
[17:27:52] <dminuoso> % f = id
[17:27:52] <yahb> dminuoso: 
[17:27:54] <dminuoso> % :t f
[17:27:55] <yahb> dminuoso: a -> a
[17:28:04] <dminuoso> % :t f @Int
[17:28:04] <yahb> dminuoso: ; <interactive>:1:1: error:; * Cannot apply expression of type `a0 -> a0'; to a visible type argument `Int'; * In the expression: f @Int
[17:28:06] <merijn> timCF: Which is not a hypothetical situation, because we've already had 1 GHC release that broke TypeApplications that way
[17:28:19] <merijn> (changed the order constraints were inferred in)
[17:28:22] <dminuoso> timCF: ^- Do instantly and intuitively know why this is?
[17:29:12] <timCF> dminuoso: AllowAmbiguousTypes or something like this?
[17:29:16] <dminuoso> Nope.
[17:29:31] <merijn> Is it...the monomorphism restriction? :D
[17:29:38] <dminuoso> Nope
[17:29:42] <merijn> aww
[17:29:43] <kuribas> merijn: solution: always use explicit forall.
[17:30:04] <dminuoso> timCF: You cant apply things with "invisible" type variables to visible type arguments.
[17:30:14] <dminuoso> There's subtle reasons for why all that is
[17:30:40] <dminuoso> But the consequence is that you cant use TypeApplications as freely because as soon as GHC does type inference, you cant use TypeApplications anymore
[17:30:51] <dminuoso> That is, if GHC repolymorphizes
[17:30:54] <merijn> kuribas: Do your dependencies do that, though?
[17:31:12] <dminuoso> timCF: Proxy is really much more solid and obvious. :)
[17:31:20] <timCF> merijn: who knows really :)
[17:31:22] <dminuoso> Albeit a bit noisy, but other than that it has mostly just benefits
[17:31:31] <merijn> kuribas: Also, I don't, because I dislike TypeApplications for reasons above
[17:31:32] <kuribas> merijn: I don't use TypeApplications if they don't.
[17:31:50] <dminuoso> timCF: Though you can do one interesting combination
[17:31:52] <dminuoso> That one I favor
[17:31:56] <dminuoso> Proxy *with* TypeApplications
[17:32:03] <kuribas> Just use a language where you can apply types as arguments.
[17:32:04] <dminuoso> f (Proxy @Int)
[17:32:12] <dminuoso> This is a nice middle ground
[17:32:16] <timCF> dminuoso: that's actually cool
[17:32:59] <timCF> kuribas: for example?
[17:33:05] <kuribas> timCF: idris
[17:33:07] <merijn> Idris :p
[17:33:10] <timCF> hmmm
[17:33:11] <merijn> Agda, Coq
[17:33:18] <merijn> timCF: He's mostly joking :p
[17:33:21] <merijn> (I assume)
[17:33:30] <timCF> Are they better version of Haskell then? :)
[17:33:42] <timCF> (probably not)
[17:33:52] <Hecate> Idris 2
[17:33:58] <kuribas> merijn: yes and no.  If you are doing extensive type level programming, you may be better of with idris than with haskell.
[17:34:12] <merijn> timCF: Define "beter", "version", and "haskell" :p
[17:34:25] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[17:35:34] <timCF> Prelude> better version haskell                          
[17:35:34] <timCF>                                                          
[17:35:34] <timCF> <interactive>:1:1: error:                                
[17:35:34] <timCF>     Variable not in scope: better :: t0 -> t1 -> t       
[17:35:34] <timCF>                                                          
[17:35:37] <timCF> <interactive>:1:8: error: Variable not in scope: version 
[17:35:39] <timCF>                                                          
[17:35:42] <timCF> <interactive>:1:16: error: Variable not in scope: haskell
[17:35:46] *** Joins: son0p (~ff@181.136.122.143)
[17:35:50] <timCF> :)
[17:37:31] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[17:39:23] <kuribas> merijn: idris is not production ready, but it will never be if people keep shoehorning type level stuff into haskell, instead of using a more appropriate language.
[17:39:37] <maerwald> kuribas++
[17:40:19] <merijn> Haskell won't be production ready if people keep doing that too :p
[17:40:31] <maerwald> but I want my toys!
[17:41:45] <kuribas> merijn: it has been for a long time.
[17:42:14] <kuribas> merijn: wait, you mean it will not be production ready if people keep adding on top of it?
[17:42:32] *** Quits: Philonous_ (~Philonous@user/philonous) (Quit: ZNC - https://znc.in)
[17:42:33] <timCF> merijn: I actually never tried any of them (Idris, Agda, Coq). Which of them is the most enterprise-oriented in your opinion? Toys are important, but I'm kinda doing web programming.. It will be hard without Persistent, Esqueleto, Yesod, Servant, Conduit and others 
[17:42:54] <kuribas> merijn: If so, I agree. I'd rather see other improvements than DH.
[17:43:02] *** Joins: Philonous (~Philonous@user/philonous)
[17:43:08] <kuribas> in particular tooling improvements.
[17:43:26] <merijn> kuribas: The latter, yes
[17:43:44] <dminuoso> Web development itself is a disgusting field honestly
[17:44:06] <kuribas> timCF: frankly none of them.
[17:44:11] <dminuoso> More so than other fields this requires good availability of libraries to help pull the weight.
[17:44:25] <kuribas> timCF: you may use them as a prototype, or for verifying parts of your program.
[17:44:29] <timCF> dminuoso: With Haskell not that disgusting actually. After switch from Erlang I'm sleeping much better at night.
[17:44:59] <dminuoso> We dont have a plethora of good options to generate HTML with
[17:45:10] <timCF> Yesod/Blaze?
[17:45:17] <dminuoso> Highly opinionated.
[17:45:24] <maerwald> dminuoso: because we're busy adding more complicated stuff to our toybelt
[17:45:30] <maerwald> that serves a few edge cases
[17:46:02] <dminuoso> There's also reflex-dom if you enjoy FRP 
[17:46:13] <dminuoso> But the toolstack you start accomulating gets unreal
[17:46:18] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[17:46:34] <kuribas> IMO Dependent Haskell makes even less sense for teaching.
[17:47:53] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[17:48:33] <dminuoso> timCF: Also yesod is becoming less and less relevant, there's not as many active contributions anymore
[17:48:50] <dminuoso> And it comes with a bus factor of 1.1
[17:48:54] <kuribas> dminuoso: as opposed to what?
[17:48:56] <maerwald> fpco seems to shift more into devops, rust and blockchain
[17:49:11] <dminuoso> kuribas: As opposed to the past.
[17:49:14] <dminuoso> https://github.com/yesodweb/yesod/graphs/contributors
[17:49:53] <kuribas> dminuoso: I meant, what are people using then?
[17:50:09] <dminuoso> No clue
[17:50:18] <kuribas> servant?
[17:50:26] <kuribas> spock, ...
[17:50:28] <dminuoso> Based on various factors Id assume web developers simply pick more suitable tools.
[17:50:36] <dminuoso> Based on surrounding technologies
[17:50:41] <maerwald> same for snap https://github.com/snapframework/snap/graphs/contributors
[17:50:41] <dminuoso> Say they might build the frontend in reactjs
[17:51:00] *** Joins: jkaye (~jkaye@2601:281:8300:7530:c25c:6460:bfbf:33d6)
[17:51:22] <dminuoso> maerwald: Yup.
[17:51:53] *** Joins: aliosablack (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374)
[17:52:09] *** Quits: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[17:52:42] <dminuoso> From a business point of view, deciding to simply do it in Django seems more worthwhile. You have to be fairly religious to do web development in Haskell.
[17:53:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:53:28] <merijn> dminuoso: The kinda religious that'd just switch to Ur/Web ;)
[17:53:47] <kuribas> dminuoso: or clojure?
[17:54:16] <timCF> dminuoso: Yesod is just enterprise web framework for Haskell, when I've started to use it - I had no idea how to write actual Haskell, but was already able to build websites with postgres storage. And then I've gradually learned about stuff like Functors, Applicatives, Monads, Alternatives (just new use cases when more complex web forms were needed)
[17:54:28] <dminuoso> timCF: What does "enterprise web framework" even mean?
[17:54:41] <maerwald> dminuoso: you start with no clue what you're doing
[17:54:47] <dminuoso> ah heh
[17:54:55] <timCF> dminuoso: maerwald: exactly
[17:55:36] <dminuoso> kuribas: Like I said, Id focus on picking a language that has rich tooling and active participation of wide industry. For web development, that's mostly JavaScript and some Python.
[17:55:43] <timCF> It's not the most efficient way of learning Haskell anyway. It's actually very inefficient, but works for some people
[17:55:53] <merijn> dminuoso: I have a better solution!
[17:55:58] <Franciman> dminuoso: I would choose a language which is not lazy
[17:55:59] <merijn> dminuoso: I just gave up on having a website! :p
[17:56:02] <dminuoso> merijn: Yup.
[17:56:19] <Franciman> default laziness is plain dumb, optimal evaluation is much better idea
[17:56:39] <kuribas> dminuoso: you might not use haskell at all!  Except for the blockchain!
[17:56:41] <timCF> Franciman: just use StrictData and you will be safe in most cases
[17:56:45] <merijn> Default lazy is still better than default strict
[17:56:59] <maerwald> merijn: that's hard to assess
[17:57:22] <Franciman> sure
[17:57:26] <Franciman> default lazy on the web
[17:57:30] <Franciman> so that chromium consumes 200GB
[17:57:32] <Franciman> instead of 32
[17:57:39] <Franciman> is awesome choice
[17:57:44] <maerwald> the only real argument pro default laziness is that GHC can optimize *some* stuff better
[17:57:47] <Franciman> web sucks :P
[17:57:52] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[17:58:01] <maerwald> but that's a brittle argument from a language perspective
[17:58:04] <merijn> maerwald: I have a better argument
[17:58:18] <merijn> maerwald: "too lazy" can always be solved locally. "too strict" cannot
[17:58:22] *** Joins: trcc_ (~trcc@eduroam09.au.dk)
[17:58:27] *** Quits: trcc_ (~trcc@eduroam09.au.dk) (Remote host closed the connection)
[17:58:29] <Franciman> I am speaking about web dev
[17:58:35] <maerwald> merijn: well, that's not true... I have a complicated example where that didn't work
[17:58:38] <merijn> Therefore it's easier to obtain the desired semantics by having default lazy
[17:58:43] <maerwald> but it's proprietary code
[17:58:44] <dminuoso> Third opinion: Both suck, a lazy-polymorphic like levity would be ideal.
[17:58:51] <dminuoso> Let the user pick what they want.
[17:58:53] <merijn> dminuoso: Yes, that's what I want
[17:59:04] <merijn> dminuoso: And well get started on, as soon as someone will pay me :p
[17:59:17] <Franciman> I also don't understand why you have to pick between a totally wrong solution (laziness) and a totally incorrect approximation (strictness)
[17:59:18] <merijn> dminuoso: Together with proper, pure, exceptions
[17:59:21] <Franciman> when you can choose optimal evaluation
[17:59:25] <maerwald> the final value was forced, but there was a huge intermediate thunk buildup, which caused immense performance regression in a hot loop... forcing the final value doesn't help you at all
[18:00:06] <maerwald> so we had to go through the entire codebase and identify the issues... most of them were in data constructors
[18:00:32] <maerwald> that's why some people say laziness is global state
[18:00:45] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:00:54] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[18:01:15] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[18:01:36] *** Quits: trcc (~trcc@users-5343.st.net.au.dk) (Ping timeout: 245 seconds)
[18:01:55] <Franciman> laziness is a bit of cargo cult, because optimal evaluation is not industry read yet
[18:02:00] <maerwald> and that issue was disrupting the business
[18:02:06] <maerwald> and cost money
[18:02:12] <Franciman> it's become axiomatic
[18:02:17] <Franciman> either laziness or strictness
[18:02:20] <Franciman> how about no?
[18:02:51] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[18:02:51] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 264 seconds)
[18:03:00] <maerwald> Franciman: by the time we have something better, I'll not be programming anymore :D
[18:03:02] <lortabac> Franciman: I guess you answered your own question. Optimal evaluation is not production-ready yet
[18:03:17] <lortabac> it's mostly a research topic AFAIK
[18:03:41] <Franciman> wasn't haskell the same?
[18:04:56] *** Quits: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[18:05:41] <lortabac> Franciman: yes, it took a long time to make laziness even remotely usable
[18:05:53] <merijn> Not really, there were a bunch of lazy languages. Haskell exists so that people could focus their work on one language instead of reinventing the wheel every time
[18:05:56] <lortabac> the first IO system in Haskell was not very ergonomic
[18:06:16] <Franciman> merijn: not really to what?
[18:06:20] <lortabac> merijn: did those languages have a usable IO system?
[18:06:30] <Franciman> not really to not being cargo cult of laziness?
[18:06:31] <merijn> lortabac: Some, ys
[18:06:42] <Franciman> laziness as the only truth?
[18:07:16] <merijn> Franciman: That Haskell wasn't the only lazy language
[18:07:23] <Franciman> lol
[18:07:25] <Franciman> ok
[18:07:47] <merijn> The Haskell committee was *explicitly* formed to unify efforts in several lazy languages
[18:07:57] <Franciman> btw, I think that we could benefit from some easy tutorials on the internal STG machine
[18:08:00] <merijn> The first Haskell compiler was implemented in Lazy ML
[18:08:10] <merijn> So, obviously Haskell wasn't the first lazy language
[18:08:13] <dminuoso> How can I easily share a bunch of common dependencies at preset verious in multiple components in a cabal file?
[18:08:13] <Franciman> so that people get more sense of how laziness works
[18:08:17] <Franciman> instead of pretending haskell is magic
[18:08:21] <merijn> dminuoso: common block
[18:08:39] <lortabac> merijn: do you know another sane IO mechanism before monads?
[18:08:40] <Franciman> do we have, as a community good tutorials on STG machine?
[18:08:41] <merijn> dminuoso: https://github.com/merijn/Belewitte/blob/master/benchmark-analysis/benchmark-analysis.cabal#L34-L62
[18:08:51] <merijn> lortabac: Uniqueness types
[18:08:53] <merijn> lortabac: See Clean
[18:08:56] <dminuoso> merijn: Spot on, thanks!
[18:09:10] <merijn> dminuoso: You can even import multiple common blocks into one component to compose them
[18:09:31] *** Quits: deadmarshal (~deadmarsh@95.38.230.45) (Ping timeout: 245 seconds)
[18:09:42] <maerwald> Franciman: I hate having to know internals of the compiler to understand how a language works (and behaves, operationally). The more important compiler knowledge becomes, the more broken I consider the language.
[18:10:03] <maerwald> which means C++ is utterly broken
[18:10:05] <Franciman> eh but then how do you understand haskell's computational model?
[18:10:08] <Franciman> if you want to optimize
[18:10:21] <Franciman> laziness is hard because you can't reason about it
[18:10:23] <Franciman> easily
[18:13:12] <Franciman> laziness requires graphs
[18:13:17] <Franciman> strictness is about trees
[18:13:33] <Franciman> I personally work better on trees, but just because I am more used to them
[18:13:43] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:13:53] <Franciman> if you teach me how laziness computationally behaves, I think I can understand haskell's computational model better
[18:14:01] <Franciman> and fix laziness bugs earlier
[18:14:05] *** Quits: nisstyre (~wes@li798-187.members.linode.com) (Changing host)
[18:14:05] *** Joins: nisstyre (~wes@user/nisstyre)
[18:15:24] <Franciman> imho laziness is the best default when you are coding on paper and don't expect your code to run anywhere
[18:15:40] <Franciman> otherwise you also need to, some extent, understand the computational model of the machine
[18:15:58] <Franciman> hence, if you are so fond of retaining laziness, you need a way to understand how the code runs
[18:16:20] <maerwald> Franciman: that's a moving target
[18:16:40] <maerwald> inlining behavior etc changes a LOT between GHC versions
[18:18:23] <Franciman> then we are doomed
[18:18:25] <Franciman> whant can I say
[18:18:28] <Franciman> what*
[18:18:34] <Franciman> I thought haskell standard gave a semantics
[18:18:42] <Franciman> I understand that ghc can have its quircks
[18:18:50] <Franciman> but if they compose the 98% of the semantics of haskell
[18:18:52] <Franciman> we are doomed
[18:18:56] <Franciman> you can't reason about anything
[18:19:35] <dminuoso> You need to understand how the code runs irrspective of the language if you want performing code. And the reality is, you're going to be sad if you write code with the assumption of an implementation.
[18:19:53] <dminuoso> v8 made a major reengineering, which caused a massive performance degradation of thousands of JS packages
[18:20:06] <lortabac> I found this tool very interesting for GHC, I haven't tried it yet though: https://youtu.be/I4lnCG18TaY
[18:24:32] <Franciman> dminuoso: ok, but I don't have a freaking clue about what happens in my code
[18:24:40] <Franciman> I can only use a very abstract substitution based semantics
[18:24:42] <Franciman> to understand what happens
[18:24:53] <Franciman> it's hard to understand laziness
[18:25:01] *** Joins: Lycurgus (~juan@98.4.112.204)
[18:25:01] <Franciman> that's why I said, probably we need to know better how ghc works 
[18:25:14] <Franciman> if the behaviour of haskell changes 98% at every ghc version
[18:25:17] <Franciman> then that's a problem
[18:25:36] <Franciman> but if there is a core semantics, that mostly gets you an idea, that's a better approximation of saying
[18:25:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:25:37] <maerwald> performance properties, not behaviour
[18:25:39] <Franciman> uhm laziness magic!
[18:26:04] <Franciman> if we want the cargo cult of laziness as the ultimate magic you don't have to think about 
[18:26:06] <Franciman> then ok
[18:26:16] *** Quits: acidjnk (~acidjnk@p200300d0c7271e45b900d7f27b1ad71c.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[18:26:24] <Franciman> but in practice i found myself wanting to understand what was going on
[18:27:35] <Franciman> imagine C++ with default lazy semantics
[18:27:43] <Franciman> that would be a nightmare
[18:27:45] *** Joins: benin6 (~benin@183.82.178.244)
[18:28:30] <Lycurgus> that's just like ur opinion man
[18:29:36] <Lycurgus> also a lot of people here think c/c++ are a nightmare regardless
[18:29:54] *** Quits: benin (~benin@183.82.178.244) (Ping timeout: 268 seconds)
[18:29:55] *** benin6 is now known as benin
[18:30:08] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4518:ab7b:975d:2f47)
[18:30:09] <Franciman> now imagine mutable state + laziness
[18:30:20] <Franciman> + c++ quirks
[18:30:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[18:31:26] <Lycurgus> a minority prolly recognize it as the defacto universal machine lang of this time
[18:32:23] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:34:01] <Lycurgus> ghc changing 98% even at every leading number change prolly wouldn work and i'm reasonably confident isn't in fact the case
[18:34:42] <Lycurgus> although it's rate of mutation is different than other comparable langs
[18:35:21] <Lycurgus> that would be like a complete rewrite on every major release
[18:35:56] <Lycurgus> 98% of something out the end of the thing maybe
[18:36:03] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[18:38:18] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4518:ab7b:975d:2f47) (Remote host closed the connection)
[18:38:45] <Lycurgus> *its rate
[18:41:06] <Franciman> Lycurgus: what I mean is probably best expressed by this meme
[18:41:20] <Franciman> this channel: laziness is godsent and is incredibly awesome for reasoning about code
[18:41:26] <Franciman> real world: *screams in all directions*
[18:41:34] <Franciman> so I suggested
[18:41:39] <Franciman> well I don't usggest
[18:41:49] <Lycurgus> turning it off?
[18:41:57] <Franciman> I suppose that if one learns a bit more about the internals of how laziness is used
[18:42:02] <Franciman> and executed
[18:42:05] <Franciman> i.e. the STG machine
[18:42:09] <Franciman> the screams get reduced
[18:43:41] <Lycurgus> telling a lisp audience that laziness sucks is like telling romance lang speakers their lang is effeminate or germans theirs is brutish
[18:43:51] <Lycurgus> *haskell audience
[18:44:42] <Franciman> I am not saying it sucks
[18:44:44] <Franciman> holy hell
[18:45:18] <lortabac> Lycurgus: they can say anything they want about my language, it's not me who invented it, I'm just a user :P
[18:45:25] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[18:45:39] <lortabac> (I mean natural language)
[18:45:46] *** Joins: alzgh (alzgh@user/alzgh)
[18:45:53] <Franciman> Lycurgus: I just said, maybe problems with laziness can be more easy to solve if we all learn about STG machine
[18:45:57] <Lycurgus> it's all perspective, a boon in the right mindset
[18:46:16] <geekosaur> not sure "the STG machine" is the right target here, either. STG is a way to efficiently do graph reduction. https://en.wikipedia.org/wiki/Graph_reduction may be more helpful
[18:46:22] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:46:38] <Franciman> I also said that I don't like the dychotomy `default laziness is of course better than strictness by default'
[18:46:43] <Franciman> because you have other solutions
[18:46:52] <geekosaur> that is, if you look for the details on STG you will find a lot of stuff on implementing it on hardware
[18:47:12] <geekosaur> because STG is about doing graph reduction on real hardware
[18:47:14] <Lycurgus> i don't wanna know about STG machine, just wanna be able to turn it off if it causes a problem I don't have time to fix right now
[18:48:34] <Lycurgus> in general I don't wanna know about anything internal any deeper than TH
[18:48:51] <geekosaur> and there is -XStrictData for that
[18:49:03] <Franciman> how often do you use it?
[18:49:11] <Franciman> rarely?
[18:49:20] <Lycurgus> i think people use it all the time
[18:49:25] <geekosaur> (-XStrict generally goes too far, you'd have to replace the Prelude and nobody has written a strict Prelude replacement yet)
[18:50:05] <maerwald> XStrict is also odd, I think it also depends on how you write down your functions
[18:50:09] <Franciman> it's been shown by maerwald that -XStrict can become dodgy
[18:50:14] <Franciman> oh well
[18:50:33] <maerwald> afair `foo x = id x` is not the same as `foo = id` under XStrict
[18:50:51] <merijn> Lycurgus: I'm pretty confident that the people using StrictData are the *vast* minority on hackage
[18:51:10] <Lycurgus> merijn, ack
[18:51:28] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a)
[18:51:30] <lortabac> merijn: I have worked in 3 different teams, and all of them had StrictData enabled at project-level
[18:52:44] <geekosaur> #ghc also strongly suggests that -XStrictData is pretty common in larger environments
[18:52:59] <lortabac> it's recommended by some popular blog post
[18:53:00] <Hecate> yeah, we do so in my team as well
[18:53:02] <Hecate> hi lortabac o/ :)
[18:53:15] <lortabac> Hecate: hello :)
[18:53:31] <merijn> lortabac: There's lots of popular blog posts that aren't necessarily, correct, though :p
[18:53:31] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[18:53:47] <merijn> tbh, StrictData project wide seems like a "Go-lang" solution
[18:53:57] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[18:55:02] <merijn> In the "we can't be arsed or don't trust our juniors to be trained adequately to think about what they're doing, so we just settle for a predictable/plannable form of mediocre"-sense
[18:55:16] <merijn> There's certainly a business argument for that
[18:56:12] <maerwald> nonsense... the cases where you really need lazy data constructors isn't hard to figure out
[18:56:15] <merijn> But I don't like it
[18:56:56] <Franciman> good
[18:57:16] <maerwald> StrictData isn't enabled to make juniors more comfortable
[18:57:48] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[18:57:53] *** Joins: learner-monad (~ehanneken@user/learner-monad)
[18:58:23] *** Joins: hololeap (~hololeap@user/hololeap)
[18:58:24] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[18:58:57] <maerwald> it's also enabled in network packages like warp... and Kazu isn't a junior
[18:59:37] <maerwald> https://github.com/yesodweb/wai/pull/752#issuecomment-501531386
[19:00:58] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[19:04:43] *** Quits: learner-monad (~ehanneken@user/learner-monad) (Quit: WeeChat 3.3)
[19:09:06] *** Quits: jippiedoe (~david@2a02-a44c-e14e-1-c482-95c0-575a-83bc.fixed6.kpn.net) (Ping timeout: 245 seconds)
[19:11:07] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[19:13:57] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Ping timeout: 250 seconds)
[19:21:31] *** Joins: learner-monad (~ehanneken@user/learner-monad)
[19:25:13] <vaibhavsagar[m]> we use -XStrict and -XStrictData in my work codebase
[19:25:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:26:56] <vaibhavsagar[m]> it's comforting to know other people do it too
[19:28:19] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[19:28:36] <Hecate> :)
[19:29:43] <Hecate> < merijn> tbh, StrictData project wide seems like a "Go-lang" solution // These are strong words from someone who doesn't do it :P
[19:29:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[19:30:08] <merijn> Hecate: How so?
[19:32:17] <Hecate> well, instead of being interested by the phenomenon and asking people *who actually do it at work all day long*, you go for statements like "Go-lang solution", "plannable form of mediocre", "we can't be arsed or don't trust our juniors"
[19:32:40] <Hecate> and the only valid argument that you allow is a business one even though you say that you dislike it
[19:33:21] <Hecate> Would you allow a valid technical argument for StrictData or shall I give the email of my senior colleagues so you can insult them directly? :)
[19:34:37] <hippoid> yeah, give us the emails
[19:34:53] *** Joins: jippiedoe (~david@2a02-a44c-e14e-1-2aad-d997-6734-70a6.fixed6.kpn.net)
[19:35:10] <merijn> Hecate: I prefer to only insult vague unspecified groups of people who disagree with me, because that makes it easier to have plausible deniability of my opinion of any actual specific person :p
[19:35:21] <Hecate> hahahaha
[19:35:39] <merijn> Because it turns out insulting individuals makes it really hard to work with them, even if you're right >.>
[19:35:56] <Hecate> no fucking shit
[19:35:59] <Hecate> :p
[19:37:02] <merijn> Hecate: In general, the technical arguments I've seen so far don't convince me. Now, maybe I've only seen terrible technical arguments (not unlikely). I could be convinced with proper empirical science, but let's be real the state of "proper" empirical science when it comes to things as "programming language usage" is so abysmal it might as well not exist
[19:39:15] *** deni_ is now known as deni
[19:40:02] <merijn> Besides, I don't expect anyone who likes StrictData to care about my opinion on it
[19:40:13] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 265 seconds)
[19:40:26] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Remote host closed the connection)
[19:40:46] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 245 seconds)
[19:42:17] <merijn> Hecate: The main technical arguments I've seen presented in favour of it have been, essentially, "I hate having to think whether this data should be strict". Which I just haven't found to be such a huge issue, so I'm curious what the technical argument of your colleagues is if it isn't that
[19:43:44] *** Joins: xsperry (~xs@user/xsperry)
[19:45:30] *** Joins: puke (~puke@user/puke)
[19:48:58] <Hecate> merijn: because we have 150k LOC in our project and 8 years of production experience that tell us that it is the best course of action
[19:48:59] <sclv> i don't think there's technical arguments because in both cases you have control over strictness, and the only question is what the better default is
[19:49:09] <Hecate> ^ +1
[19:51:29] <merijn> sclv: Right, which given my previous defense of laziness means I dislike StrictData
[19:52:13] *** Joins: nuh^ (~nuh@68.101.63.101)
[19:52:15] *** sajith_ is now known as sajith
[19:52:19] <sclv> in my experience, it depends on what data structures you're defining. for our autogenerated Big Records that match up to other stuff going over the wire, strict by default is right
[19:52:33] <sclv> for our embedded ASTs, strict by default is wrong
[19:52:39] *** Joins: mmhat (~mmh@55d44c37.access.ecotel.net)
[19:52:49] <merijn> Basically, there seems to have been a big influx of people into Haskell that seem like what they *really* want is SML. And it's kinda weird that they then keep complaining about Haskell all the time, instead of just, like, writing SML or Ocaml?
[19:53:09] <sclv> (i should add: strict and unpacked for those records!)
[19:53:12] <merijn> Like, it's fine to not like laziness
[19:53:28] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[19:53:31] <merijn> But why you gotta keep complaining about it in Haskell discussions?
[19:54:18] <merijn> Ask Lennart for the mail addresses of SBC lawyers and complain at them to open source Mu instead or something >.>
[19:54:25] <sclv> i don't find strict data helps much with thunk leaks -- that's about writing code carefully. i do find it helps when pared with unpacking for controlling memory usage in certain specialized situations
[19:54:36] <merijn> Maybe legal will agree if they get annoyed too much
[19:56:05] <merijn> sclv: I mean, the big record case also seems fairly obvious, so I fail to see how "project wide StrictData" improves that situation.
[19:56:36] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:56:44] <sclv> not projectwide -- modulewide. easier to stick a pragma on top than clutter each field quite as much
[19:56:55] <merijn> The weirdest thing to me is people arguing "oh, but I can still make things lazy!". Ok, but then you still gotta think about what you're doing and then there's literally no benefit from StrictData except maybe "less annotations if you've got a lot of strictness"
[19:57:02] <merijn> sclv: Right, but nobody ever argues that
[19:57:16] <sclv> i do :-P
[19:57:17] <merijn> sclv: See in the previous discussion everyone talking about enabling it project wide
[19:58:24] <merijn> All the pro-StrictData discourse presents it as a magical bullet that solves all your laziness problems. Which just strikes as a weird ass position to take
[19:58:36] <maerwald> no one said that
[19:58:59] <merijn> maerwald: Lots of people say that on Twitter/issue trackers/what not
[19:59:02] <sclv> i do agree that there's been some overhype of it
[19:59:04] <c_wraith> every time I say "I write code that uses laziness and I would appreciate it if you didn't break it" I get told I'm doing it wrong
[19:59:14] <sclv> there's a time and place for it, and we learned it wasn't as magic as we thought
[19:59:32] <sclv> like there was an experimental "strict everything" pragma too iirc and it just turned out... not that helpful
[19:59:48] <c_wraith> yeah, so that crowd is going to be all-in on UnliftedDataTypes soon
[19:59:55] <c_wraith> only making things worse
[20:00:27] *** Joins: fef (~thedawn@user/thedawn)
[20:00:48] <sclv> i mean performance is really 90% "find the tight inner loop" and 10% "do terrible things to that inner loop alone"
[20:00:50] <EvanR> nothing makes laziness more confusing than unexpected strictness xD
[20:00:54] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[20:00:54] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[20:00:57] *** allbery_b is now known as geekosaur
[20:01:23] <merijn> anyway
[20:01:34] <merijn> I gotta go dancing instead of arguing why people are wrong on the internet
[20:01:50] <maerwald> EvanR: yeah, like the `tar` package abusing lazy bytestring in ways that forces the entire file contents into memory
[20:01:55] <merijn> Before everything gets locked down again until, like, 2024 or something >.>
[20:02:25] <maralorn> I can contribute that I have been bitten by thinking StrictData works that way. I have a huge record, which really should be strict. But most fields are Maybes and Sets and when I disabled StrictData I wasnâ€˜t knowledgable enough to realize how little this helps me.
[20:02:29] <int-e> Why does the search term "thunk cost fallacy" produce hits that have nothing to do with laziness, sad :P
[20:03:06] <lortabac> :D
[20:03:06] <sclv> lmao
[20:03:26] *** Joins: cfricke (~cfricke@user/cfricke)
[20:03:31] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.180)
[20:03:31] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.180) (Changing host)
[20:03:31] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[20:03:46] <[exa]> int-e: maybe there's no fallacy! :D
[20:04:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Quit: leaving)
[20:04:27] *** Quits: cfricke (~cfricke@user/cfricke) (Client Quit)
[20:05:08] <[exa]> Hecate: sitting on 150kloc in haskell is one way to produce bias, honestly
[20:05:22] <int-e> [exa]: Tbf I'm not quite sure what that would be... but it could be a nice pun.
[20:09:27] <int-e> Maybe one should argue this way... Haskell is lazy by default... but that default can be changed with a pragma. So what that really means is that now there's another bit of information I need to track when reading code. :-/
[20:09:46] <dsal> I'm surprised again to not find an Alternative instance for Either.  I feel like that surprises me a lot.
[20:10:04] *** Joins: gustik (~gustik@2a01:c844:240a:de20:3606:7339:bc88:b5f5)
[20:10:09] <geekosaur> I feel like that's expected after Error went away?
[20:10:59] <dsal> I continue to not expect it.  :)
[20:11:05] <[exa]> dsal: you may want Validation
[20:11:15] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:64b0:a3f2:ec06:e597) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:11:22] <lortabac> dsal: what would 'empty' be for Either a?
[20:11:40] <lortabac> anyway, there is Alt in semigroupoids
[20:11:47] <dsal> Oh, I remember Alt.
[20:12:41] *** Joins: cfricke (~cfricke@user/cfricke)
[20:12:42] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[20:13:30] <int-e> dsal: I guess this happens because there are several equally plausible instances.
[20:14:00] <dsal> Yeah, I assume that's the case.  It should just default to whatever I'm thinking is a good idea at the moment.
[20:14:12] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[20:14:49] <c_wraith> that'd be the worst.  someone else looks at your code and your already-compiled program changes behavior.
[20:14:50] <int-e> dsal: So, it should roll a die at compile time and synthesize one of the instances accordingly?
[20:14:51] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[20:15:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[20:15:23] <dsal> I'm back into arguing that deeply nesting case statements isn't a good idea.  Alt makes a lot of sense for this type of use case.
[20:15:25] <int-e> (we need more random compiler errors (cf. INTERCAL))
[20:16:14] <monochrom> I support enforcing UB by runtime randomization too >:)
[20:16:14] <int-e> dsal: maybe whoever you're arguing with isn't worth arguing with
[20:17:06] <dsal> At least it's a softer argument:  "I really don't see the issue with code going to the right"
[20:17:21] <dsal> The last time it was that test code doesn't have to look like production code.  Now it's actually production code.  :/
[20:17:32] <monochrom> haha
[20:17:42] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:7c6d:4c33:f4a3:2a22) (Quit: WeeChat 2.8)
[20:17:51] <int-e> . o O ( 32:9 monitors for all programmers now! )
[20:17:59] <c_wraith> I agree that you should keep nested cases to less than 10 levels of nesting
[20:18:14] <int-e> (this ultra-wide monitor trend is weird)
[20:18:15] <monochrom> I think 32:9 is already realized as "dual head"
[20:18:26] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:18:30] <int-e> monochrom: you can now get it as a single monitor
[20:18:33] <[exa]> dsal: what's wrong with just putting First in Validation tho? :D
[20:18:42] <monochrom> Yikes.
[20:18:44] <dsal> It's also ormolu, so each line only has like one word and there's two space indentation.
[20:19:07] <c_wraith> Ormolu is its own set of bad choices...
[20:19:30] <monochrom> ormolu helps you make your code look like Sheet Music Boss youtube videos >:)
[20:23:16] <monochrom> Back in the good old days, I heard this probably wise thought: If you compose a face from the most beautiful eyes, the most beautiful nose, the most beautiful mouth, ... the face can be the most ugly.
[20:23:32] <Hecate> int-e: +1 for "thunk cost fallacy", love it
[20:24:03] <monochrom> Then, around the turn of the century, someone actually did that for programming practices, called it "extreme programming".
[20:24:10] <Hecate> [exa]: well, it's not my first Haskell rodeo, and we have people working on the performance of our monolith, it's not something that came yesterday :P
[20:24:14] <monochrom> perhaps s/for/to/
[20:24:36] <monochrom> And now, someone does that to code layout, calls it "ormulu".
[20:24:50] <dsal> What is "thunk cost fallacy?"
[20:25:04] <EvanR> a play on words
[20:25:12] <dsal> Sure, but I mean what's the context?
[20:25:34] <dsal> There's a lot of cargo culting around strict fields in areas like the one thing we look at the one time at startup before copying it to something else.
[20:25:36] <monochrom> unexpected laziness and unexpected strictness
[20:26:21] <monochrom> and presuming that laziness hurts, strictness helps, blindly unconditionally
[20:26:28] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[20:26:38] <dsal> Also:  That it matters at all, which is the thing I keep running into.
[20:26:46] <monochrom> Yeah, that too.
[20:27:00] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[20:27:03] <monochrom> premature optimization again
[20:27:25] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[20:27:54] <davean> Its not even an optimization
[20:27:59] <dsal> Why are all these types boxed?  Unboxed is even more strict!
[20:28:35] <EvanR> unboxed linked list when
[20:28:37] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[20:29:04] <monochrom> Why is the unboxing day called the boxing day? >:)
[20:29:39] <EvanR> the phenomenon of unboxing needs a less negative word
[20:29:54] <EvanR> not sure what
[20:30:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:31:00] <c_wraith> boxing day is usually the day after unboxing day.  Not that I know why
[20:31:07] <c_wraith> that seems to violate causality
[20:31:11] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 245 seconds)
[20:31:13] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:34:39] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[20:34:55] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:64b0:a3f2:ec06:e597)
[20:35:42] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[20:35:54] *** Joins: nschoe (~quassel@178.251.84.79)
[20:43:07] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[20:46:11] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[20:48:50] <int-e> dsal: I'm not sure yet... but something like the idea that thunks are expensive and therefore you should avoid them all by making everything strict.
[20:49:26] <dsal> That's what it sounded like.  I think it'd be a great blog post with the three main case:  True, False, Stop wasting your time.
[20:51:21] *** Quits: mbuf (~Shakthi@223.178.114.167) (Quit: Leaving)
[20:51:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:54:22] *** Quits: hueso (~root@user/hueso) (Quit: hueso)
[20:55:02] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[20:55:53] *** Parts: kuribas (~user@ptr-25vy0i9f20n8puprvgm.18120a2.ip6.access.telenet.be) (ERC (IRC client for Emacs 26.3))
[20:58:39] *** Quits: benin (~benin@183.82.178.244) (Ping timeout: 264 seconds)
[20:59:01] *** Joins: hueso (~root@user/hueso)
[20:59:27] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[21:02:17] <EvanR> True, False, FileNotFound
[21:02:47] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[21:08:02] *** Joins: benin (~benin@183.82.178.244)
[21:16:03] *** Quits: benin (~benin@183.82.178.244) (Ping timeout: 264 seconds)
[21:17:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:18:08] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[21:18:57] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 250 seconds)
[21:22:51] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 245 seconds)
[21:24:27] *** Quits: ph88 (~ph88@95.90.240.104) (Ping timeout: 264 seconds)
[21:24:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[21:24:56] <nf> int-e: how do i allow my own instance of lambdabot to import Control.Lens? should i add lens to trustedPackages? is that safe?
[21:26:44] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[21:26:58] <int-e> nf: Yes you need to trust lens to allow that. Is it safe? I don't know. Last I checked it looked like the worst thing it does is open access to `coerce`. But its huge and it's easy to miss something.
[21:28:39] <dsal> lens is bad because you can magnify things and start fires.
[21:28:43] <int-e> (Data.Coerce is unsafe... and indeed it was initially riddled with various type checking problems that allowed people to write `unsafeCoerce`. But I think they've been addressed.
[21:28:50] <int-e> )
[21:28:58] <dsal> Data.Coerce is unsafe?
[21:29:00] <int-e> sorry, "is unsafe" meaning it's declared as unsafe.
[21:29:18] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[21:29:21] <nf> by safety i really mean unability to run arbitrary IO
[21:29:31] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[21:29:37] <nf> that shouldn't be a problem, right?
[21:29:57] <int-e> https://gitlab.haskell.org/ghc/ghc/-/blob/master/libraries/base/Data/Coerce.hs#L1
[21:30:19] <dsal> Lame
[21:30:20] <int-e> nf: It *should*, yes.
[21:30:33] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[21:32:34] *** Joins: nvmd (~nvmd@user/nvmd)
[21:32:56] <nf> hm, i'm still getting "Control.Lens: Can't be safely imported! The module itself isn't safe."
[21:33:19] *** Joins: econo (uid147250@user/econo)
[21:33:26] <int-e> you need to trust some of lens's dependencies too; profunctors in particular.
[21:34:03] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[21:34:12] <int-e> wait
[21:34:28] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[21:34:36] *** Joins: cheater (~Username@user/cheater)
[21:34:49] <int-e> That actually sounds like safety support in Lens may have bitrotted a bit.
[21:35:08] <nf> still not
[21:35:31] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[21:36:48] <int-e> (this lambdabot is on lens-4.19.2, I have not tried lens-5.x)
[21:36:54] *** Quits: alx741 (~alx741@186.178.108.219) (Ping timeout: 260 seconds)
[21:38:37] <int-e> anyway, I usually try these things out with  ghci -XSafe  (invoking mueval directly is also an option, but lambdabot's truncated error messages aren't helpful for tracking these things down)
[21:39:51] <nf> how can i know which module is causing the unsafeness with ghci?
[21:39:59] <int-e> huh, actually 4.19.2 seems to require a patch too: https://github.com/lambdabot/lambdabot/blob/libera/patches/lens-4.19.2.patch
[21:41:20] <nf> :/
[21:41:29] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[21:41:52] <int-e> nf: well it alrady told you that Control.Lens isn't safe. Since Control.Lens isn't marked as Trustworthy, that is an inferred property. So you can import the modules it depends on to narrow things down.
[21:42:17] <nf> i see
[21:42:27] <int-e> It's no fun... there's no tooling (beyond ghci) around SafeHaskell as far as I know.
[21:42:45] <nf> disclaimer i have no idea what Trustworthy or even Safe mean
[21:43:37] <int-e> "Trustworthy" is how you override the inferred unsafety of a module: if the user trusts the package that contains a Trustworthy module, then that module can be imported from Safe modules.
[21:44:37] <int-e> So... "inferred safe" basically means that all imports are Safe or trusted and Trustworthy.
[21:44:57] <nf> ok
[21:46:11] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 245 seconds)
[21:46:30] *** Joins: xkuru (~xkuru@user/xkuru)
[21:46:42] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:64b0:a3f2:ec06:e597) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:47:01] <int-e> nf: Huh, apparently profunctors doesn't need to be trusted anymore. https://github.com/lambdabot/lambdabot/blob/libera/lambdabot/scripts/online/run.sh#L4-L15 is what lambdabot uses (with lens-4.19.2 plus the above patch)
[21:47:16] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:64b0:a3f2:ec06:e597)
[21:49:05] <nf> thanks
[21:50:39] <nf> so apparently Control.Lens.Equality imports GHC.Exts which is unsafe
[21:51:13] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[21:51:26] <nf> right, this is what your patch is about
[21:51:46] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a) (Quit: gone to sleep. ZZZzzzâ€¦)
[21:51:47] <nf> should that patch be upstreamed maybe?
[21:52:03] *** Quits: nschoe (~quassel@178.251.84.79) (Ping timeout: 264 seconds)
[21:52:16] <int-e> undoubtedly
[21:52:25] <int-e> I'd do it to if I wasn't so great at procrastination
[21:52:27] <nf> oh https://github.com/ekmett/lens/blob/master/src/Control/Lens/Equality.hs#L7
[21:52:42] <nf> you did it 2 years ago lmao
[21:52:47] <int-e> Ah.
[21:52:57] <nf> more like precrastination
[21:53:13] <int-e> well, one year ago
[21:53:14] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[21:53:40] <int-e> Let's meet in the middle, 1 1/2.
[21:53:47] <nf> right
[21:54:03] <nf> anyway, that's in v5 and i just realised i'm also on 4.19.2
[21:54:25] <nf> i think i will figure this out now
[21:54:27] <nf> thanks for your help
[21:55:50] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[22:01:47] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[22:01:55] *** Joins: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net)
[22:02:23] *** Joins: pavonia (~user@user/siracusa)
[22:04:25] <nf> it works with 5.0.1 :)
[22:04:28] *** Joins: deadmarshal (~deadmarsh@95.38.230.45)
[22:09:06] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[22:10:05] *** Joins: cosimone` (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[22:11:42] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Read error: Connection reset by peer)
[22:11:51] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[22:12:15] *** Quits: jippiedoe (~david@2a02-a44c-e14e-1-2aad-d997-6734-70a6.fixed6.kpn.net) (Ping timeout: 250 seconds)
[22:13:24] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:16:11] *** Joins: benin (~benin@183.82.179.164)
[22:18:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[22:19:19] *** Joins: alx741 (~alx741@186.178.108.219)
[22:21:36] *** Quits: cosimone` (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 245 seconds)
[22:22:51] <dsal> Does `T {..}` look better than `T{..}` to people?  That space always looks weird to me.
[22:23:42] <nf> definitely looks better
[22:24:10] <EvanR> T <backspace> { double strike would save space and still be recognizable xD
[22:25:37] <geekosaur> narrow space? :Ã¾
[22:29:15] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[22:31:00] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[22:31:30] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[22:34:05] <dsal> nf: space looks better you say?
[22:34:24] <dsal> It's not the space savings, it's' just that it ends up looking like a distinct argument.
[22:35:01] <EvanR> T {..} looks like application, T{..} looks like an atomic piece of syntax
[22:35:03] <dsal> So my brain has to compensate and think "no wait, this is part of the previous argument, it's just got a space in the middle for some reason"
[22:35:32] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[22:36:03] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:c8ff:e615:b6b0:62dc)
[22:36:03] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:c8ff:e615:b6b0:62dc) (Client Quit)
[22:36:08] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:36:22] <monochrom> "T {..}" has the benefit of being consistent with "Just 5".
[22:36:49] <monochrom> "T{..}" has the benefit of following the Python style guide that you don't need a space here.
[22:36:58] <dsal> But you can't write `f Just 5 = ...`
[22:38:24] <EvanR> record syntax shouldn't be confused for application
[22:38:51] <EvanR> it's hard enough to get people on board with f x xD
[22:39:07] <monochrom> That is orthogonal to coding style, IMO.
[22:39:10] <int-e> nf: good to know ("works with 5.0.1")
[22:39:23] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:39:26] *** Quits: deadmarshal (~deadmarsh@95.38.230.45) (Ping timeout: 260 seconds)
[22:40:00] <dsal> It doesn't *really*  matter, as ormolu's gonna ormolu.  I'm just surprised that it looks clear to people.
[22:40:06] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[22:40:43] <dsal> Speaking of things that look clear to people, inline per-character color coded diffs of expected vs. got output are hilarious.
[22:45:57] <tomsmeding> % import Control.Concurrent
[22:45:57] <yahb> tomsmeding: 
[22:45:59] <tomsmeding> % forkIO (putStrLn "hello") >> forkIO (putStrLn "goodbye")
[22:45:59] <yahb> tomsmeding: ThhgreoeloalddobI; yde ; 95
[22:46:05] <tomsmeding> dsal: does it look like that?
[22:46:12] <dsal> Yes, but in color!
[22:46:26] <dsal> I can kind of read it when I try hard.
[22:46:34] <tomsmeding> beautiful
[22:46:45] <dsal> It's beginning to look a lot like Christmas.
[22:46:55] <tomsmeding> maybe there's a reason then
[22:47:10] * dsal wages war on Christmas
[22:47:30] <tomsmeding> with ghc?
[22:48:09] <dsal> This is someone's test framework thing.
[22:48:23] <dsal> But I do have a ghc problem.  The line editing stuff is completely wrecked.
[22:48:33] <dsal> Has anyone heard of completely wrecked line editing stuff in ghc?
[22:49:10] <dsal> er ghci
[22:49:39] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 264 seconds)
[22:49:41] <tomsmeding> I've had it before, and I vaguely recall it having to do with changing the window size and then editing a multiline command
[22:49:54] <xerox> dsal: what os and versuon
[22:50:14] <geekosaur> there was also a report of it being broken in 9.0.1 on arm, iirc
[22:50:16] <xerox> that's what I get for trying to type with gloves on
[22:50:36] <geekosaur> which is probably what xerox is asking about :Ã¾
[22:50:44] <dsal> Yeah, it's that one.
[22:50:47] <xerox> yep! that one has been solved! :-)
[22:51:00] <xerox> an ffi mismatch with made wrong ioctls
[22:51:02] <dsal> Oh cool.  Actually, this one is 8.10.7
[22:51:29] <xerox> if you want a workaround you can do "TERM=dumb ghci"
[22:51:37] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:51:45] <xerox> till you get a fixed version
[22:51:54] <dsal> I don't want dumb ghci :(
[22:52:05] <dsal> dsmac:tesla dustin$ TERM=dumb stack ghci
[22:52:05] <dsal> Segmentation fault: 11
[22:52:08] <dsal> Oh good, I don't get one.
[22:52:15] <xerox> ooops
[22:52:31] <dsal> It *almost* works.
[22:52:32] <tomsmeding> terminal is too smart for you, rejects being made dumb
[22:52:38] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[22:53:42] <xerox> I ended up compiling a fixed ghc and that was that
[22:53:55] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a)
[22:53:59] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.180)
[22:53:59] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.180) (Changing host)
[22:53:59] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:54:16] *** Joins: jippiedoe (~david@2a02-a44c-e14e-1-3aa6-b22c-891-c248.fixed6.kpn.net)
[22:56:59] <monochrom> perhaps TERM=vt100 works a bit better
[22:57:53] <awpr> I've had broken line editing in ghci resulting from using color sequences without the appropriate width annotations
[22:58:05] <geekosaur> still runs into the terminal ioctls being wrong
[22:58:12] <monochrom> Ah OK.
[22:58:21] <awpr> does it go horribly wrong when line-wrapping a long line, and put the cursor in the wrong place?
[22:58:27] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[22:58:28] <geekosaur> this is an FFI issue, the only way TERM helps is TERM=dumb prevents them from being used at all
[22:59:30] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:03:27] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 264 seconds)
[23:03:49] <dsal> mine goes horribly wrong whenever I edit anything.  Trying to insert characters just mangles everything.
[23:04:45] <xerox> do you have haskeline customizations?
[23:05:07] <awpr> ok, probably a different issue then.  here's a reference for the ANSI escape sequence issue I had, though: https://github.com/judah/haskeline/wiki/ControlSequencesInPrompt
[23:08:48] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[23:09:32] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[23:11:36] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[23:12:01] *** Joins: max22- (~maxime@2a01cb0883359800a5783feecd0598ff.ipv6.abo.wanadoo.fr)
[23:17:44] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[23:18:05] *** Joins: alzgh (alzgh@user/alzgh)
[23:19:02] <dsal> xerox: I don't think I have anything fancy.  This is the only thing that's kind of broken when I switch to the native build.
[23:20:32] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:20:44] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[23:22:01] *** Quits: duckonomy (~duckonomy@177.ip-144-217-84.net) (*.net *.split)
[23:22:01] *** Quits: marienz (~marienz@libera/staff/marienz) (*.net *.split)
[23:22:01] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[23:22:01] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[23:22:13] *** Joins: marienz (~marienz@libera/staff/marienz)
[23:22:32] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[23:22:41] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[23:23:21] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[23:23:52] *** Joins: duckonomy (~duckonomy@177.ip-144-217-84.net)
[23:27:01] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[23:28:41] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 245 seconds)
[23:29:47] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Remote host closed the connection)
[23:30:18] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:30:20] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[23:30:34] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:34:43] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a) (Quit: gone to sleep. ZZZzzzâ€¦)
[23:34:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[23:35:25] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[23:35:26] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 260 seconds)
[23:36:00] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[23:36:22] *** Joins: hololeap (~hololeap@user/hololeap)
[23:36:24] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad)
[23:36:31] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[23:37:06] *** Joins: juhp (~juhp@128.106.188.82)
[23:41:33] *** Joins: deadmarshal (~deadmarsh@95.38.230.45)
[23:42:01] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 245 seconds)
[23:42:39] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[23:43:09] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[23:43:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:45:14] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:45:25] *** Joins: hololeap (~hololeap@user/hololeap)
[23:46:05] *** Quits: deadmarshal (~deadmarsh@95.38.230.45) (Ping timeout: 256 seconds)
[23:47:47] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[23:55:30] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[23:56:06] *** Joins: cjb (~cjb@user/cjb)
[23:56:31] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[23:57:03] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[23:57:37] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad) (Quit: gone to sleep. ZZZzzzâ€¦)
[23:58:43] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
