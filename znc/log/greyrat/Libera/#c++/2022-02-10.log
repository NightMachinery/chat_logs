[00:01:10] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[00:02:33] <evangeline> Alipha, is this safe https://godbolt.org/z/rTjKM16q3 assuming m_data = d; is only called once and I don't care how many times SuperSlowGetData() is called ?
[00:04:31] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[00:08:35] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[00:09:02] <Alipha> evangeline: i think so. i'm not sure if memory fences are needed to prevent the compiler from reordering accesses to m_data and d, or if simply accessing m_InitCounter implicitly creates those fences ( https://en.cppreference.com/w/cpp/atomic/atomic_thread_fence )
[00:10:31] <evangeline> Alipha, okay thank you
[00:10:44] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:11:07] <Alipha> e.g., i'm not sure if the compiler is allowed to reorder `m_data = d; m_InitCounter = 0;` to be `m_InitCounter = 0; m_data = d;`
[00:12:00] <evangeline> Alipha, I don't know about a whole lot about compiler optimizations
[00:12:18] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:12:48] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[00:13:01] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:13:57] <evangeline> Alipha, is there a way to check that somehow ?
[00:14:13] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[00:15:40] <evangeline> Alipha, Let's say that the compiler reorders it into  `m_InitCounter = 0; m_data = d;`, would this fail, because m_data hasn't yet been assigned by T1 and T2 will go into the else clause doing "d = m_data;", which will be empty at that time?
[00:15:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:16:38] <Alipha> evangeline: correct
[00:17:01] <evangeline> Alipha, thanks
[00:17:12] <Alipha> The "may" here isn't very definite :-/ "In addition, accesses to atomic objects may establish inter-thread synchronization and order non-atomic memory accesses as specified by std::memory_order." https://en.cppreference.com/w/cpp/atomic/atomic
[00:18:59] <evangeline> By inter-thread synchronization it's meant the reordering as you said: `m_InitCounter = 0; m_data = d;` ?
[00:20:42] <Alipha> oh, clicking on the std::memory_order link provides some clarification and confirmation that the compiler won't/can't reorder those assignments: "std::memory_order specifies how memory accesses, including regular, non-atomic memory accesses, are to be ordered around an atomic operation. ... The default behavior of all atomic operations in the library provides for sequentially consistent ordering."
[00:20:48] <Hello71> std::atomic should be considered an advanced technique. a first implementation should normally use mutexes, then profiled, then possibly replaced with atomics if appropriate
[00:21:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[00:21:33] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[00:21:56] <Hello71> especially if you're not very familiar with memory ordering
[00:22:09] <Hello71> in this case why don't you just use call_once
[00:22:31] <Alipha> evangeline was curious about a lock-free solution
[00:22:49] <evangeline> yeah, we did call_once before
[00:23:00] <evangeline> I'm trying to learn about lock-free stuff more in-depth
[00:23:31] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[00:24:09] <Alipha> my house is lock-free. don't rob me pls.
[00:24:21] <Hello71> if the database is really "super slow" then you should probably not be running multiple redundant queries, but since you're running redundant queries anyways then you don't need seq_cst ordering
[00:24:29] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[00:25:37] *** Quits: CalamityBlue (~CalamityB@2603-8000-d907-cec8-28af-d421-0a51-ca91.res6.spectrum.com) (Ping timeout: 240 seconds)
[00:26:23] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[00:29:18] <evangeline> Alipha, so because memory_order_seq_cst is used, it means that whatever comes before "m_InitCounter = 0;" in source code must be executed before this assignment (once this is actually done inside cpu/memory), meaning the _data = d; cannot be executed afterwards ?
[00:30:37] <Hello71> also this seems weirdly constrained to exactly two threads? like, if ProcessData is called more than twice, it will re-increment and re-initialize the data
[00:31:20] <Alipha> evangeline: yes
[00:31:37] <evangeline> Hello71, yeah it can happen multiple times, but I'm trying to learn here
[00:32:34] *** Joins: seninha (~seninha@user/seninha)
[00:32:55] <evangeline> Alipha, the order of lines in source code editor is therefore of utmost importance and based on memory fence can't be reordered (even with optimizations turned on)?
[00:32:57] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 240 seconds)
[00:33:01] <Hello71> what is the logic even supposed to be here
[00:33:35] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[00:33:39] <evangeline> Hello71, Ensure the cache (m_data) is only assigned once, regardless of how many times the slow function is called
[00:34:07] <evangeline> But after it's assigned, the cache is used by all subsequent threads
[00:34:10] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:35:54] <Hello71> but it's not. all threads started at the same time will initiate separate requests, and then the last thread which returns will set the cache; the other threads will use their own independently fetched value but not save it
[00:35:59] <Alipha> evangeline: can't be reordered across atomic accesses. that is: `non_atomic_a++; non_atomic_b++; atomic_c++; non_atomic_d++;` can be reordered to be `non_atomic_b++; non_atomic_a++; atomic_c++; non_atomic_d++;` but no other reordering is possible
[00:36:08] <Hello71> the next thread started will use the cache, and then further threads will re-initialize the cache?
[00:36:31] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[00:36:33] <Hello71> this caching policy doesn't make any sense
[00:36:50] *** Joins: ckdCreations (~ckdCreati@147.55.133.136)
[00:37:06] <Alipha> evangeline: seems that `if(1 <= m_InitCounter++) {` should be `if(1 <= m_InitCounter) { m_InitCounter++;`
[00:38:36] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34)
[00:39:16] <Hello71> that makes slightly more sense but is still highly dubious
[00:41:08] <evangeline> Alipha, thank you for explaining, in this case we have "non atomic m_data = d; atomic m_InitCounter = 0;" and since this is atomic vs non-atomic it can't be reordered right?
[00:42:03] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:42:18] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[00:42:25] <Alipha> evangeline: correct
[00:42:26] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Client Quit)
[00:42:35] <evangeline> Alipha, also for `if(1 <= m_InitCounter++) {` should be `if(1 <= m_InitCounter) { m_InitCounter++;` : This can fail if both T1 and T2 execute up until the m_InitCounter++; (not including) and then T1 executes the ++, does the work, does -- and stops inside the if clause ... T2 then does the same and both end up inside if(1 == m_InitCounter--)
[00:42:52] <evangeline> This is why I used `if(1 <= m_InitCounter++)`
[00:43:49] <Alipha> evangeline: and this is why we don't suggest lock-free. it's a pita to get correct ;-)
[00:44:19] <evangeline> Correct, I'm not actually going to use this code, just practicing :)
[00:44:40] <evangeline> But I think `if(1 <= m_InitCounter++)` is correct, Hello71 why do you think otherwise?
[00:44:54] <Hello71> well that's fine, you just get a different nonsense caching policy
[00:45:15] <evangeline> The data that is returned is the same for all threads
[00:45:20] <Hello71> if you call ProcessData in a single thread, every other invocation will refresh the cache
[00:45:36] *** Nnnavd is now known as Nnavd
[00:46:36] <evangeline> Hello71, you're right, even if m_InitCounter=0 (the cache is set), the `if(1 <= m_InitCounter++)` will still be true, maybe it should've been `if(2 <= m_InitCounter++)`
[00:46:52] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:46:52] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[00:46:57] <Alipha> evangeline: problem is, we don't want the ++ to happen at all if m_InitCounter==0
[00:47:21] *** Quits: magla (~gelignite@55d46452.access.ecotel.net) (Quit: Stay safe!)
[00:47:40] <evangeline> Is it possible that two threads execute only m_InitCounter++ part of the  `if(2 <= m_InitCounter++)` expression prior to making the <= check?
[00:48:02] *** Joins: CalamityBlue (~CalamityB@2603-8000-d907-cec8-dccd-8808-739a-455d.res6.spectrum.com)
[00:48:13] <Alipha> yes
[00:48:20] <evangeline> Thus setting m_InitCounter to 2 and therefore the if clause evaluates to true
[00:48:21] <evangeline> Okay
[00:48:25] <evangeline> So this is not a good solutio
[00:48:25] <evangeline> n
[00:51:02] *** Joins: blei (~blei@209.201.38.106)
[00:52:17] *** Quits: blei (~blei@209.201.38.106) (Client Quit)
[00:52:44] <evangeline> Alipha, I guess it's highly unlikely that an approach with a flag/counter + data actually works with lock-free. I guess you need to do it directly with the data pointer like Alipha showed earlier. As soon as you have more than one variable, it's too error-prone .
[00:54:17] <Alipha> evangeline: i think: https://godbolt.org/z/rMoqf3aE7
[00:54:39] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:57:49] <evangeline> Alipha, interesting, I need to process this
[00:58:31] <Alipha> `m_InitState.compare_exchange_strong(currentState, InitStateType::INITIALIZING);` tries to capture the flag and then `if(currentState == InitStateType::UNINITIALIZED)` checks if we were indeed the one to capture the flag
[00:59:02] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:01:10] <evangeline> Alipha, yeah it seems really really good, I can't think of a way to break it
[01:01:39] <evangeline> I guess this is it, Alipha Hello71 thank you for all your help, I sincerely appreciate it!
[01:02:51] <rb> what would be the best place to ask questions about TLS symbols?
[01:03:39] <Alipha> rb: not sure. maybe #crypto or #c++-general
[01:03:56] <rb> TLS as in thread-local storage :^)
[01:04:11] <Alipha> ... who calls it that?? :-P
[01:04:18] <rb> i know right
[01:04:38] <Alipha> rb: #c++-general then, i'd try
[01:04:43] <rb> thanks
[01:05:13] <Alipha> ... my work has a product that we abbreviate as "PHP", sighs.
[01:05:33] *** Quits: andreasbuhr (~quassel@p549dbbae.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:05:46] <Hello71> "Any person can invent a security system so clever that she or he can't think of how to break it."
[01:05:46] *** Joins: els12 (~els12@192.48.10.226)
[01:06:38] *** Quits: c4017w__ (~c4017@209.52.68.8) (Quit: Leaving)
[01:06:57] <Hello71> that said, i think this code has no obvious deficiencies except that the SuperSlowGetData function may be called more than once
[01:07:21] <Alipha> which is apparently intended behavior
[01:08:28] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:09:06] <Alipha> and if thread 1 already called SuperSlowGetData, then thread 2's fastest course of action is almost certainly to just wait for thread 1 to finish executing SuperSlowGetData, rather than calling it again
[01:11:55] *** Joins: PJBoy (~PJBoy@user/pjboy)
[01:12:32] <evangeline> Alipha, right, which is why I'll use a mutex not this ... this is for practice only, thank you Hello71 as well for looking at it and seeing no other deficiencies
[01:12:41] *** Joins: quartz (~user_name@user/quartz)
[01:13:04] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[01:13:18] <Hello71> oh, and also the memory orderings are unnecessarily strict
[01:14:02] <Alipha> that's outside of my knowledge
[01:14:31] <Hello71> making this quite possibly slower than a mutex, depending on architecture
[01:16:21] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[01:18:11] *** Joins: shewp (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[01:18:21] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 250 seconds)
[01:19:01] *** Quits: |` (~|`@178.159.129.50) (Ping timeout: 256 seconds)
[01:23:13] <Alipha> x86/x64 doesn't distinguish between memory orderings, right?
[01:25:46] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Remote host closed the connection)
[01:27:23] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[01:30:53] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[01:36:19] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 250 seconds)
[01:36:28] *** Joins: c4017w (~c4017@209.52.68.8)
[01:36:43] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:37:14] *** Joins: yashraj466 (~yashraj46@2401:4900:5137:848c:765a:7006:c1a1:8ed6)
[01:42:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:22] *** ChanServ sets mode: +v npaperbot
[01:44:21] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[01:47:11] <Hello71> the architecture (generally) doesn't but the compiler might
[01:47:34] <Hello71> although in this case the compiler can't do much useful reordering anyways, since it's so short
[01:47:40] <evangeline> Hello71, what a memory orderings?
[01:48:23] <evangeline> Alipha, are memory fences only used to restrict the compiler from optimizing where it shouldn't, meaning if we disable all compiler optimizations memory fences are no longer needed or are there some other use-cases?
[01:56:08] *** Quits: constxd (~brad@142.134.79.191) (Quit: WeeChat 2.8)
[01:56:09] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[01:59:20] *** Quits: cosimone (~user@93-34-133-254.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:00:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[02:00:24] *** Joins: karakedi (~eAC53C340@user/karakedi)
[02:01:22] <Alipha> evangeline: i'm not sure if this exists, but i could imagine a architecture where a cpu core has a dedicated L1 cache, and that if you want changes to memory to be visible to other cores, you have to emit an instruction to flush the cache to main memory
[02:01:50] <Alipha> so the memory fence would perform that flush
[02:02:50] <Hello71> the primary purpose of memory fences is to prevent out-of-order cpus from reordering instructions
[02:03:11] <evangeline> Hello71, what do you mean out-of-order cpus ?
[02:03:23] <Hello71> compiler barriers are still required, and are separate from memory barriers
[02:03:26] *** Quits: els12 (~els12@192.48.10.226) (Remote host closed the connection)
[02:03:45] *** Joins: els12 (~els12@192.48.10.226)
[02:06:26] *** Joins: bobb_ (~bobb_@ipservice-092-211-155-129.092.211.pools.vodafone-ip.de)
[02:06:56] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[02:09:00] <Alipha> cpus may reorder instructions on the fly if the data for a specific instruction isn't available yet
[02:09:37] <Alipha> the cpu pipeline is insanely complex :-)
[02:09:41] *** Joins: seninha (~seninha@user/seninha)
[02:11:25] <evangeline> Alipha, so a memory barrier ensures that CPU waits for data for instruction x in order to fully execute the instruction x, prior to even start executing instruction y (assuming there is a barrier between x and y)?
[02:11:59] <Alipha> i believe so
[02:12:07] <evangeline> Alipha, thank you
[02:12:51] <evangeline> is memory fence equal to memory barrier, a different term for the same thing
[02:13:00] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:13:55] <Alipha> yes
[02:14:55] *** Joins: seninha_ (~seninha@user/seninha)
[02:16:02] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[02:17:34] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:17:34] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[02:19:04] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[02:19:11] *** Joins: seninha (~seninha@user/seninha)
[02:19:59] *** Quits: jsbach (~jsbach@2a01:c22:34a5:b300:4809:4522:8fe1:70b0) (Ping timeout: 256 seconds)
[02:20:01] <zz> not only to reorder instructions, but to reorder data access (especially in the face of speculative execution which, could be argued, is separate from out-of-order execution of (unspeculated) insns.)
[02:20:42] <zz> on second though, spec exec would access illegal memory anyway and throw away the result. It's been used in cache attacks or something
[02:20:55] *** Joins: malloy (~jimery@116.30.220.175)
[02:22:45] <zz> good thing, as far as C++ is concerned "that's none of my business"
[02:24:24] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[02:25:19] *** Joins: foul_owl (~kerry@71.212.148.11)
[02:26:08] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:26:34] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:26:59] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[02:29:00] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 250 seconds)
[02:30:09] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:30:36] *** Quits: Dave_R_ (~Dave_R@home.amunra.co.uk) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:33:41] *** Quits: pizdets (~pizdets@183.182.114.142) (Ping timeout: 245 seconds)
[02:33:59] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:34:02] *** Joins: pizdets_ (~pizdets@183.182.115.213)
[02:34:27] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[02:35:17] *** Quits: hashfuncd0d (~user@162.254.115.155) (Ping timeout: 256 seconds)
[02:35:42] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[02:36:21] *** Quits: foul_owl (~kerry@71.212.148.11) (Ping timeout: 250 seconds)
[02:36:35] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[02:37:10] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:38:21] *** Quits: bobb_ (~bobb_@ipservice-092-211-155-129.092.211.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:40:52] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:43:58] *** Joins: ivii (~ivan@user/ivii)
[02:49:17] *** Joins: cmburn (~Charlie_B@2607:ea00:107:3c07:39a3:d617:ccf1:90ef)
[02:50:59] *** Joins: foul_owl (~kerry@94.140.8.52)
[02:52:28] *** Quits: ivii (~ivan@user/ivii) (Read error: Connection reset by peer)
[02:53:29] *** Quits: yashraj466 (~yashraj46@2401:4900:5137:848c:765a:7006:c1a1:8ed6) (Quit: Client closed)
[02:53:46] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:55:04] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[02:59:46] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:05:26] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:06:35] *** Joins: seninha (~seninha@user/seninha)
[03:06:41] *** Quits: rg (~r-g@163.172.90.106) (Ping timeout: 250 seconds)
[03:08:22] *** Joins: quartz (~user_name@user/quartz)
[03:10:09] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 250 seconds)
[03:12:15] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:13:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[03:13:54] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:16:00] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[03:18:21] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 256 seconds)
[03:19:07] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[03:19:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[03:20:08] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 250 seconds)
[03:22:41] *** Quits: jokoon2 (~eio@88.125.11.133) (Quit: Leaving)
[03:23:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 240 seconds)
[03:24:59] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[03:26:17] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[03:27:09] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:27:32] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[03:29:56] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 245 seconds)
[03:30:00] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[03:34:47] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[03:37:43] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:39:20] *** Quits: els12 (~els12@192.48.10.226) (Remote host closed the connection)
[03:39:23] <quartz> What are some things in C++ you wish you could change?
[03:39:53] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[03:40:56] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Ping timeout: 250 seconds)
[03:41:21] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[03:42:43] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[03:43:22] *** Joins: cheater (~Username@user/cheater)
[03:44:22] <PJBoy> integer promotion
[03:44:54] <quartz> PJBoy: What do you mean?
[03:45:19] <quartz> What is wrong with it
[03:45:43] <kalven> implicit conversions are annoying
[03:45:48] <PJBoy> C++ has integer promotion, whereby any integer value of type with size smaller than int or unsigned is promoted to int or unsigned (depending on implementation)
[03:46:25] <PJBoy> it usually lands up as unsigned values being promoted to int
[03:46:32] <PJBoy> changing the signedness
[03:46:50] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:46:59] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 250 seconds)
[03:47:28] *** Joins: CalamityToo (~CalamityB@2603-8000-d907-cec8-dccd-8808-739a-455d.res6.spectrum.com)
[03:48:00] <zz> worse than int promotion is int demotion. e.g. void f(int) {} f(0L);
[03:49:00] <ssbr> quartz: I've been on a kick with clang::trivial_abi lately. It would've been nice if C++ made unique_ptr have the same performance as equivalent code using raw pointers, in all cases. Can still do that with language extensions / unstable ABI stuff in libc++, or with a Sufficiently Smart Compiler, so it's mostly good though.
[03:49:01] *** Quits: CalamityBlue (~CalamityB@2603-8000-d907-cec8-dccd-8808-739a-455d.res6.spectrum.com) (Ping timeout: 240 seconds)
[03:49:31] <quartz> PJBoy: So why did they implement integer promotion in the first place?
[03:49:45] <PJBoy> well C has it
[03:49:48] <zz> likely because explicitly typing it is annoying
[03:50:10] <zz> f(static_cast<unsigned long long>(0))? Nah thanks I'll stick with f(0) and have it promote.
[03:50:13] <PJBoy> and C has it because it had bitwidth of registers in mind as its main computational model for integer operations
[03:50:20] <quartz> So you basically can't do any operation with small types in C/C++? Because it will convert it to unsigned int?
[03:50:25] <PJBoy> zz's talking about implicit conversion
[03:50:35] <PJBoy> integer promotion is basically useless for everyone
[03:50:40] <PJBoy> and causes problems for some
[03:51:07] <PJBoy> yeah the result of any binary operation on integers results in int or unsigned or larger
[03:51:12] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[03:51:17] <PJBoy> and you have to cast back to the smaller size if need be
[03:51:30] <zz> << TYPE((char)1 + (char)1); /* right, promo we should talk about */
[03:51:30] <geordi> prvalue int
[03:51:57] *** CalamityToo is now known as CalamityBlue
[03:52:17] <Alipha> we could have still had implicit conversions without integer promotion. that is, (char)1 + (char)1 could have been defined to result in a char
[03:53:13] <quartz> PJBoy: SO it's a problem when you are performing some arithemetic operation on two smaller ints and want to preserve the "signedness"?
[03:53:21] <PJBoy> yeah
[03:53:35] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[03:53:42] <zz> well, going with the small type isn't necessarily always efficient. atomic<bool> for example on riscv64 needs library support.
[03:54:44] <quartz> But I don't see how they could have changed this when teh language was being developed.
[03:54:58] <PJBoy> << (x << 31); unsigned char x = 1;
[03:54:58] <geordi> -2147483648
[03:55:02] <PJBoy> you got that for example
[03:55:04] <PJBoy> which is trash
[03:55:24] <PJBoy> << (x << 31); unsigned x = 1; // expected result
[03:55:25] <geordi> 2147483648
[03:55:37] <quartz> Ahh
[03:55:50] <PJBoy> and if you're using uintN_t, then whether you get signed or unsigned result is unknown to you
[03:55:52] <PJBoy> unless you check
[03:56:00] <Alipha> what's the type of `(uint32_t)3 + 5`?
[03:56:41] <Alipha> (it's either uint32_t or int, depending upon if int is larger than uint32_t or not)
[03:56:47] <zz> well, in all fairness,  (uint32_t)x + y, provided x+y does not overflow, gives you a type that can hold the result.
[03:57:11] <zz> feels like a tautology me saying that tho
[03:57:34] <Alipha> `(uint32_t)3 + INT_MAX` is either undefined behavior or well-defined :-)
[03:57:40] <PJBoy> I don't like how braces initialisation considers initializer_list overloads
[03:58:29] <PJBoy> I guess I wouldn't mind if braces init *only* did initializer_list
[03:58:45] <PJBoy> I dislike how const ref can bind to temporaries
[03:59:07] <PJBoy> I dislike forwarding references
[04:00:17] <PJBoy> I dislike how if consteval has mandatory braces
[04:00:21] <PJBoy> same with try and catch
[04:00:29] <zz> ssbr: unique_ptr does not specify performance, so it's a non-issue. Use a smart enough compiler.
[04:02:30] <PJBoy> I dislike how destructors in base classes with virtual methods are simultaneously non-virtual and public by default >_>
[04:03:25] <Alipha> i once heard that if Stroustrup had known about Java-like generics, then c++ would have had generics instead of templates :-)
[04:04:21] <ssbr> zz: The unfortunate thing is that the language does mandate observable behavior that is hard to optimize, so no compilers are smart enough. I remember reading e.g. http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1863r1.pdf which touched on this.
[04:04:37] <quartz> Java-like generics are so nice
[04:06:19] *** Joins: blei (~blei@209.201.38.106)
[04:07:05] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[04:07:33] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:08:42] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[04:08:57] *** Joins: spithash (~spithash@user/spithash)
[04:09:11] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34)
[04:10:39] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:10:49] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34) (Client Quit)
[04:16:39] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[04:20:24] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[04:21:07] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[04:21:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 240 seconds)
[04:22:23] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[04:22:45] *** Quits: cmburn (~Charlie_B@2607:ea00:107:3c07:39a3:d617:ccf1:90ef) (Quit: Leaving.)
[04:29:25] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[04:31:23] *** Quits: proller (~p@2a02:6b8:b081:17::1:38) (Ping timeout: 250 seconds)
[04:33:39] *** Joins: vicfred (~vicfred@user/vicfred)
[04:33:53] *** Quits: msk (~Thunderbi@89.205.124.19) (Quit: msk)
[04:35:07] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[04:35:30] <zz> << sizeof(unique_ptr<int>)
[04:35:31] <geordi> 8
[04:35:57] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:38:10] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:40:22] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:40:37] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[04:41:34] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:42:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:43:25] *** Joins: llh (~llh@user/llh)
[04:44:10] *** Quits: heiner_ (~heiner@94.31.81.196) (Remote host closed the connection)
[04:44:27] *** Joins: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[04:44:31] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[04:44:33] *** Joins: MoosieRachel (~Moosadee@136.32.155.193)
[04:45:22] *** Quits: caramel (~caramel@user/caramel) (Read error: Connection reset by peer)
[04:45:36] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[04:46:02] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[04:46:08] *** Joins: caramel (~caramel@user/caramel)
[04:46:28] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[04:46:43] *** Quits: exocom (~exocom4@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[04:46:53] *** Joins: teepee_ (~teepee@openscad/teepee)
[04:47:05] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[04:47:05] *** teepee_ is now known as teepee
[04:47:07] *** Joins: exocom (~exocom4@217-180-232-30.sycmilaa.metronetinc.net)
[04:47:36] *** Joins: fels (~fels@192.48.10.226)
[04:47:57] *** Quits: sam113101 (~sam@modemcable229.128-202-24.mc.videotron.ca) (Ping timeout: 240 seconds)
[04:50:09] *** Joins: sam113101 (~sam@modemcable229.128-202-24.mc.videotron.ca)
[04:54:32] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[04:55:43] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:56:02] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 268 seconds)
[04:58:30] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Ping timeout: 250 seconds)
[05:02:30] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[05:02:53] *** Joins: Viewday11 (~Viewday@user/viewday)
[05:04:33] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[05:06:50] *** vinleod is now known as vdamewood
[05:10:52] *** Quits: blei (~blei@209.201.38.106) (Quit: Client closed)
[05:11:02] *** Quits: exocom (~exocom4@217-180-232-30.sycmilaa.metronetinc.net) (Ping timeout: 256 seconds)
[05:12:32] *** Quits: vext01 (~edd@hudzen10.theunixzoo.co.uk) (Ping timeout: 240 seconds)
[05:12:56] *** Joins: vext01 (~edd@hudzen10.theunixzoo.co.uk)
[05:16:29] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:116f:8251:b1b1:3325) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:23:21] *** Joins: Tokamak (~Tokamak@172.58.188.176)
[05:24:28] *** Joins: walterwhip (~www@user/walterwhip)
[05:25:43] *** Quits: MoosieRachel (~Moosadee@136.32.155.193) (Quit: Leaving)
[05:28:41] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:230e:6411:bf4c:835d:709d)
[05:28:46] *** Quits: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Remote host closed the connection)
[05:30:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:32:13] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[05:33:09] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[05:34:12] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[05:35:02] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:35:12] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:38:41] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:39:45] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:41:27] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34)
[05:41:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[05:42:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:24] *** ChanServ sets mode: +v npaperbot
[05:45:51] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:46:12] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[05:48:16] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[05:52:39] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[05:52:40] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34) (Ping timeout: 250 seconds)
[05:54:57] *** Joins: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com)
[05:55:24] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[05:55:41] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[05:57:40] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[06:00:01] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[06:04:51] *** Quits: lockywolf_ (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:08:36] *** Joins: lockywolf_ (~lockywolf@public.lockywolf.net)
[06:17:20] *** Joins: quartz (~user_name@user/quartz)
[06:17:36] *** Quits: quartz (~user_name@user/quartz) (Client Quit)
[06:19:28] *** Joins: quartz (~user_name@user/quartz)
[06:21:38] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:23:57] *** Quits: TOB_CyxoB (~TOB_CyxoB@gateway/tor-sasl/tobcyxob/x-83841022) (Ping timeout: 276 seconds)
[06:24:56] *** Joins: TOB_CyxoB (~TOB_CyxoB@gateway/tor-sasl/tobcyxob/x-83841022)
[06:27:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:31:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:31:42] *** Joins: frost (~frost@user/frost)
[06:32:33] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[06:39:11] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:40:08] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[06:41:01] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:41:37] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e00d:69c0:db02:528b)
[06:42:35] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:45:30] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[06:47:32] *** Joins: cmburn (~Charlie_B@2601:441:4c00:67d:34c4:a993:d6b3:eab5)
[06:49:19] *** Quits: ed (~ed@2404:160:181:8fa4:bea2:187f:879a:b950) (Quit: Konversation terminated!)
[06:52:51] *** Parts: cmburn (~Charlie_B@2601:441:4c00:67d:34c4:a993:d6b3:eab5) ()
[06:53:40] *** Joins: CaCode (~CaCode@user/cacode)
[06:55:18] *** Joins: millido (~millido@84.210.150.128)
[06:56:28] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[06:57:17] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e00d:69c0:db02:528b) (Ping timeout: 240 seconds)
[07:00:17] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:230e:6411:bf4c:835d:709d) (Ping timeout: 240 seconds)
[07:01:03] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:03:58] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[07:07:13] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:07:17] *** Quits: foul_owl (~kerry@94.140.8.52) (Ping timeout: 256 seconds)
[07:09:57] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:10:44] *** Joins: xiongxin (~Thunderbi@117.136.79.118)
[07:10:58] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:ed3c:cb5a:50ec:f83d)
[07:11:15] *** Joins: nebu (~user@user/wavion)
[07:20:45] *** Joins: karakedi (~eAC53C340@user/karakedi)
[07:21:09] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:21:54] *** Joins: ferdna (~ferdna@user/ferdna)
[07:21:55] *** Joins: foul_owl (~kerry@94.140.8.25)
[07:25:33] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[07:33:37] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[07:34:36] *** Joins: Sadale (~Sadale@user/sadale)
[07:35:17] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[07:39:42] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:42:39] *** Quits: xiongxin (~Thunderbi@117.136.79.118) (Ping timeout: 256 seconds)
[07:43:01] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:43:01] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[07:43:35] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:47:09] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:54:46] <sam113101> are string literals \0-terminated?
[07:56:41] <leduyquang753> Yes.
[08:01:27] *** Quits: lockywolf_ (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:05:10] *** Joins: lockywolf_ (~lockywolf@public.lockywolf.net)
[08:05:19] <nebu> since C++11, yes.
[08:06:18] *** Joins: cheater (~Username@user/cheater)
[08:06:47] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 256 seconds)
[08:07:15] *** Joins: hinata (~hinata@2409:4042:2e08:3f67:39f1:cd12:5ec6:c7c1)
[08:07:32] <Hello71> wat
[08:11:06] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[08:12:33] *** Joins: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca)
[08:18:29] *** Joins: DavidMilestone (~DavidMile@182.64.6.188)
[08:18:55] *** Quits: N4buc0 (~N4buc0@177.16.170.138) (Ping timeout: 256 seconds)
[08:18:57] <DavidMilestone> Can I ask a question related to C in here?
[08:19:30] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[08:20:18] *** Quits: mgaunard (~mgaunard@80-42-109-100.dynamic.dsl.as9105.com) (Ping timeout: 256 seconds)
[08:20:25] <ville> i believe there is a c channel
[08:20:47] <DavidMilestone> I'm not able to join that channel
[08:22:15] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[08:23:49] <ville> possibly need to register your nickname and identify/login as it
[08:23:54] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 260 seconds)
[08:24:00] *** Quits: ville (~ville@user/ville) (Quit: kernel)
[08:25:15] *** Joins: ville (~ville@user/ville)
[08:26:20] <DavidMilestone> Ah
[08:27:19] *** Joins: mgaunard (~mgaunard@host-78-149-173-141.as13285.net)
[08:28:12] *** Joins: the_lanetly_052_ (~the_lanet@194.135.169.72)
[08:29:18] *** Quits: lockywolf_ (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:32:46] *** Quits: fels (~fels@192.48.10.226) (Quit: Client closed)
[08:32:57] *** Joins: lockywolf_ (~lockywolf@public.lockywolf.net)
[08:40:08] *** Quits: the_lanetly_052_ (~the_lanet@194.135.169.72) (Ping timeout: 256 seconds)
[08:40:11] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:43:25] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:45:13] *** Joins: ed (~ed@175.141.150.118)
[08:47:15] *** Quits: shewp (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[08:53:14] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:53:35] *** Joins: unixpro1970 (~unixpro19@2601:603:4e00:168:6600:6aff:fe50:e69c)
[08:55:57] *** Quits: ferdna (~ferdna@user/ferdna) (Ping timeout: 240 seconds)
[08:56:10] *** Joins: ironman_ (~ironman@152.57.241.86)
[08:56:49] *** Joins: ferdna (~ferdna@user/ferdna)
[08:58:17] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[08:58:26] *** ironman_ is now known as ironman
[09:00:17] *** Quits: unixpro1970 (~unixpro19@2601:603:4e00:168:6600:6aff:fe50:e69c) (Ping timeout: 240 seconds)
[09:02:33] *** Joins: savolla (~quassel@84.44.28.28)
[09:06:41] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:07:30] *** Quits: ironman (~ironman@152.57.241.86) (Quit: Leaving)
[09:07:45] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[09:08:06] *** Joins: ironman (~ironman@49.36.50.55)
[09:09:33] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[09:11:39] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[09:14:55] *** Joins: the_lanetly_052_ (~the_lanet@194.135.169.72)
[09:25:40] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:ed3c:cb5a:50ec:f83d) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:29:45] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[09:32:31] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:8ef:9383:e8bb:73b3:7c08)
[09:34:57] *** Quits: emerent (~quassel@p200300cd570443fbba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[09:35:09] *** Joins: emerent (~quassel@p200300cd5704436bba27ebfffed28a59.dip0.t-ipconnect.de)
[09:37:48] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[09:40:39] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:40:42] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:42:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:25] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:25] *** ChanServ sets mode: +v npaperbot
[09:43:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:47:05] *** Quits: ironman (~ironman@49.36.50.55) (Quit: Leaving)
[09:59:02] *** Quits: wolfman2000 (~wolfman20@2600:1700:3211:4140:acfb:1921:a97f:706c) (Read error: Connection reset by peer)
[09:59:10] *** Quits: wolf2k_ouch (~wolfman20@104-62-21-217.lightspeed.tukrga.sbcglobal.net) (Read error: Connection reset by peer)
[09:59:44] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Read error: Connection reset by peer)
[10:00:24] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[10:01:54] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[10:05:01] *** Quits: nebu (~user@user/wavion) (Ping timeout: 240 seconds)
[10:06:05] <sonny> The type of "foo" is const char[N], however when compiled with visualc++ it seems to think the type is const wchar_t[N]. Is this a bug?
[10:06:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[10:07:37] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:8ef:9383:e8bb:73b3:7c08) (Ping timeout: 240 seconds)
[10:08:25] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[10:10:33] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[10:12:26] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[10:14:09] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[10:15:58] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[10:17:34] *** Joins: cheater (~Username@user/cheater)
[10:18:01] <ville> sonny: it may be working exactly as designed. somewhat non-standard at least? all compilers enable bunch of extensions by default
[10:21:37] *** Quits: Tokamak (~Tokamak@172.58.188.176) (Ping timeout: 240 seconds)
[10:22:26] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:22:51] *** Joins: irrenhaus3 (~xenon@ip-046-005-003-235.um12.pools.vodafone-ip.de)
[10:24:57] *** Quits: callq (~callq@2409:4062:2296:71d:edc0:24f8:78e1:290e) (Ping timeout: 240 seconds)
[10:25:37] *** Joins: Tokamak (~Tokamak@172.58.191.51)
[10:27:17] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (Quit: WeeChat 2.8)
[10:29:37] *** Quits: foul_owl (~kerry@94.140.8.25) (Ping timeout: 240 seconds)
[10:30:12] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:31:55] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[10:33:54] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[10:35:47] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[10:40:34] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[10:40:37] *** Quits: FlannelKing (~flannel@cpe-76-175-193-181.socal.res.rr.com) (Changing host)
[10:40:37] *** Joins: FlannelKing (~flannel@user/flannel)
[10:40:42] *** FlannelKing is now known as Flannel
[10:41:10] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:44:00] *** Joins: foul_owl (~kerry@71.212.148.11)
[10:44:27] *** Joins: Xardas (~Xardas@149.233.51.127)
[10:44:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:44:37] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[10:46:35] <Xardas> Why does the while loop stops running ? https://wandbox.org/permlink/gvN69rF7l6jPXUP2
[10:46:59] *** Joins: xiongxin (~Thunderbi@117.136.39.240)
[10:47:07] <Xardas> As long as we haven't hit the null character, this should still keep iterating, right ? :D
[10:47:52] *** Joins: frost (~frost@user/frost)
[10:48:04] <AliceMeows> Xardas: ca is of const char array type and doesn't have null terminating character
[10:48:08] <leduyquang753> You got UB.
[10:49:18] <Xardas> AliceMeows : I purposefully removed the '\0' char from the array to make the loop not end
[10:49:36] <Xardas> leduyquang753 yes
[10:49:38] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:49:57] <Xardas> But we are not running out of stuff in the memory :p
[10:50:05] <Xardas> this should somehow give me some random stuff i mean
[10:50:05] <AliceMeows> That is still UB
[10:50:34] <leduyquang753> The compiler can straight up tell "ur mom" or order you a pizza.
[10:51:29] <AliceMeows> I'd like to see a compiler doing that
[10:51:34] <Xardas> Hahaha
[10:51:45] <Xardas> Well, I get it. it's UB
[10:52:19] <Xardas> thx guys
[10:54:16] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 250 seconds)
[10:58:48] *** Joins: walterwhip (~www@user/walterwhip)
[10:59:22] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:a89e:b347:cccb:c7e5) (Read error: Connection reset by peer)
[10:59:39] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3c9b:6dce:e374:3130)
[11:02:34] <ville> Xardas: the loop does go out-of-bounds, eventually hitting a byte looking like \0
[11:02:39] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:02:57] <Xardas> ville, that's what I thought too !!
[11:03:16] <Xardas> ville , it's UB :D
[11:03:24] <ville> Xardas: so what was the question then? i must have misunderstood
[11:03:47] <Xardas> It got answered
[11:04:04] <Xardas> thx anyway :D
[11:05:15] <ville> Xardas: i am not sure you're understanding the output from wandbox. you see those: ï¿½ in the output? those are your "random stuff" which incidentally may include bytes that look like \0
[11:06:04] *** Quits: ahlk` (~user@2600:1700:31c0:3a10::43) (Remote host closed the connection)
[11:06:43] <Xardas> You mean, we're eventually going to hit a \0 somewhere ?
[11:07:42] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[11:07:55] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[11:08:04] <ville> it's not a certaintity. it just happens that in that run on wandbox it occured pretty soon
[11:08:44] <Xardas> I'm reading c++ primer now, where it says that c-style strings are error prone and less secure due to this problem that i just mentioned.
[11:09:10] <Xardas> Which makes c++ strings better
[11:09:27] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[11:11:21] <leduyquang753> Outside from interfacing with C stuff there is hardly any reason to not use `std::string`.
[11:14:08] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:14:58] <ville> there's hardly a reason to use std::string specificlly. 0) use the std::pmr:: version 1) if you are just slinging the bytes around then vector and you're not tempted to do "string-like" actions on it 2) if you do care about the contents and it's actual text then you'll need something that does unicode anyway
[11:15:20] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[11:16:01] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[11:17:24] *** Joins: exocom (~exocom4@217-180-232-30.sycmilaa.metronetinc.net)
[11:20:58] *** Joins: rendar (~rendar@user/rendar)
[11:21:03] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:24:19] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:25:32] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4477:9d9a:1a21:9a92)
[11:26:17] *** Joins: cosimone (~user@93-47-228-191.ip115.fastwebnet.it)
[11:35:18] *** Joins: ironman_ (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[11:37:50] *** ironman_ is now known as ironman
[11:41:41] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:41:43] *** Joins: pingpongball (~pingpongb@43.228.192.100)
[11:41:59] <pingpongball> After c++ whats your fav programming langauge ?
[11:42:03] <pingpongball> perl
[11:42:25] <AliceMeows> !topic
[11:42:27] <nolyc> #C++ is strictly for Standard C++, including potential and future standardizations. Stay on topic in #C++. #C++-general is less strict, meant for libraries, projects, compilers, and tools in the wider C++ ecosystem, but still must pertain to C++ in some way.
[11:42:47] <pingpongball> sorry again
[11:42:59] <AliceMeows> Try c++social or something
[11:43:59] <pingpongball> i thought you are not social
[11:44:02] <pingpongball> ok :)
[11:44:07] <AliceMeows> Lol
[11:44:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:44:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:46:36] *** Joins: jsbach (~jsbach@2a01:c22:ac56:b500:f922:8290:56f5:4650)
[11:47:05] *** Joins: bobb_ (~bobb_@dslb-088-065-181-024.088.065.pools.vodafone-ip.de)
[11:49:23] *** Joins: frost (~frost@user/frost)
[11:52:19] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:56:26] *** Quits: cosimone (~user@93-47-228-191.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[11:57:11] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[11:59:35] <pingpongball> !topic
[11:59:36] <nolyc> #C++ is strictly for Standard C++, including potential and future standardizations. Stay on topic in #C++. #C++-general is less strict, meant for libraries, projects, compilers, and tools in the wider C++ ecosystem, but still must pertain to C++ in some way.
[11:59:42] *** Quits: xiongxin (~Thunderbi@117.136.39.240) (Read error: Connection reset by peer)
[11:59:48] <pingpongball> !pointers
[11:59:50] <nolyc> pingpongball: Error: "pointers" is not a valid command.
[12:00:00] <pingpongball> !pointer
[12:00:01] <nolyc> Pointers are evil. Restrict their usage to private non-aliasable implementation details with exclusive ownership whenever reasonable.
[12:00:36] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:00:40] <AliceMeows> Hardly evil, you can use them responsibly or be an idiot
[12:00:58] *** Joins: Electron (~ElectronA@user/electronapps)
[12:03:34] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Ping timeout: 256 seconds)
[12:05:24] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[12:07:51] *** Quits: pingpongball (~pingpongb@43.228.192.100) (Ping timeout: 256 seconds)
[12:09:18] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[12:12:03] *** Joins: cosimone (~user@93-47-228-191.ip115.fastwebnet.it)
[12:12:26] *** Joins: pingpongball (~pingpongb@43.228.192.104)
[12:13:24] *** Emet-Selch is now known as Azem
[12:18:42] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:93a:f816:bc7c:4b35:fc6b)
[12:25:46] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[12:27:49] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[12:29:16] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:30:56] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[12:31:03] *** Quits: highrate (~presonic@user/highrate) ()
[12:31:20] *** Quits: ckdCreations (~ckdCreati@147.55.133.136) (Read error: Connection reset by peer)
[12:31:42] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[12:32:37] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[12:35:01] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[12:35:26] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:36:11] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[12:37:31] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:42:10] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:45:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:46:44] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:46:58] *** Quits: hinata (~hinata@2409:4042:2e08:3f67:39f1:cd12:5ec6:c7c1) (Quit: Leaving)
[12:49:28] *** Quits: foul_owl (~kerry@71.212.148.11) (Ping timeout: 256 seconds)
[12:50:40] *** Joins: Dave_R (~Dave_R@home.amunra.co.uk)
[12:50:57] *** Joins: walterwhip (~www@user/walterwhip)
[12:51:09] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[12:51:18] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[12:51:32] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:52:27] *** Joins: msk (~Thunderbi@89.205.124.59)
[12:53:15] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[12:54:44] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[12:56:14] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[12:56:15] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[12:58:51] *** Quits: pingpongball (~pingpongb@43.228.192.104) (Ping timeout: 256 seconds)
[13:03:15] *** Joins: foul_owl (~kerry@94.140.8.194)
[13:08:06] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:93a:f816:bc7c:4b35:fc6b) (Ping timeout: 260 seconds)
[13:09:52] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[13:11:20] *** Joins: plastico (~plastico@neomutt/plastico)
[13:15:01] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[13:15:15] *** Joins: AlexisTP (~AlexisTP@92.57.44.63)
[13:16:49] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:17:37] *** Quits: cosimone (~user@93-47-228-191.ip115.fastwebnet.it) (Remote host closed the connection)
[13:21:05] *** Joins: pingpongball (~pingpongb@43.228.192.104)
[13:29:10] *** Joins: NEYi (~NEYi@109.251.216.38)
[13:32:51] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 256 seconds)
[13:33:29] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:33:36] *** Joins: Sadale (~Sadale@user/sadale)
[13:36:13] *** Quits: foul_owl (~kerry@94.140.8.194) (Ping timeout: 240 seconds)
[13:36:29] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:38:57] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[13:38:58] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[13:40:39] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:42:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:25] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:25] *** ChanServ sets mode: +v npaperbot
[13:42:41] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:43:14] *** Joins: hinata (~hinata@2409:4042:2e08:3f67:39f1:cd12:5ec6:c7c1)
[13:44:12] *** Joins: crankslider (~slidercra@user/slidercrank)
[13:46:13] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:49:03] *** Joins: foul_owl (~kerry@71.212.133.174)
[13:52:07] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 256 seconds)
[13:56:25] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[13:57:28] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[14:01:23] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:01:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:02:03] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[14:02:10] *** Joins: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[14:02:20] *** Joins: Sadale (~Sadale@user/sadale)
[14:03:24] *** Joins: gdarko (~me@dg.mk)
[14:03:25] *** Quits: MrC (~Ben@mrbenc.net) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[14:03:25] *** Joins: MrC (Ben@mrbenc.net)
[14:03:28] *** Joins: purplex_ (~purplex@user/purplex)
[14:03:34] *** Joins: zoraj_ (~zoraj@209.126.81.159)
[14:03:36] *** Joins: neirac_ (~neirac@pc-122-191-45-190.cm.vtr.net)
[14:03:37] *** Joins: samuelb (~samuelber@nata01.lip.pt)
[14:03:41] *** Joins: cursey_ (~cursey@user/cursey)
[14:03:59] *** Joins: Nnnavd (~Nnavd@ec2-34-220-224-214.us-west-2.compute.amazonaws.com)
[14:04:06] *** Joins: [RMS] (~rs@genoce.org)
[14:04:42] *** Joins: dansan_ (~daniel@75.81.148.51)
[14:05:13] *** Quits: Electron (~ElectronA@user/electronapps) (Remote host closed the connection)
[14:05:14] *** Joins: Dreg- (~Dreg@fr33project.org)
[14:05:26] *** Joins: Fleck (~fleck@user/fleck)
[14:05:51] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:06:04] *** Joins: gjvc_ (~gjvc@user/gjvc)
[14:06:05] *** Joins: vancz_ (~vancz@user/vancz)
[14:06:11] *** Joins: nickel84481 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[14:06:12] *** Joins: cnsunyour (~sunyour@129.226.182.99)
[14:06:23] *** Joins: martiert_ (~martiert@ti0185q160-2775.bb.online.no)
[14:06:35] *** Joins: ville_ (~ville@user/ville)
[14:06:47] *** Joins: karakedi (~eAC53C340@user/karakedi)
[14:06:53] *** Joins: callq (~callq@2409:4062:2296:71d:c827:aaf6:4fa7:dd61)
[14:07:15] *** Joins: Nitrousoxide_ (~msdos@user/nitrousoxide)
[14:08:48] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:08:52] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[14:09:07] *** Joins: elemongw_ (~elemongw@20.107.36.50)
[14:09:09] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[14:09:23] *** Joins: Sadale (~Sadale@user/sadale)
[14:10:02] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:2efb:49eb:5abc:71c2:a5ba)
[14:10:10] *** Joins: \o\ (~i.am@177.16.50.140)
[14:10:40] *** Joins: TheCoffeMaker_ (~TheCoffeM@200.126.129.149)
[14:11:02] *** Quits: foul_owl (~kerry@71.212.133.174) (*.net *.split)
[14:11:02] *** Quits: crankslider (~slidercra@user/slidercrank) (*.net *.split)
[14:11:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (*.net *.split)
[14:11:02] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (*.net *.split)
[14:11:02] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (*.net *.split)
[14:11:02] *** Quits: ville (~ville@user/ville) (*.net *.split)
[14:11:02] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (*.net *.split)
[14:11:02] *** Quits: ed (~ed@175.141.150.118) (*.net *.split)
[14:11:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (*.net *.split)
[14:11:02] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (*.net *.split)
[14:11:02] *** Quits: moose (~moose@user/moose) (*.net *.split)
[14:11:02] *** Quits: martiert (~martiert@ti0185q160-2775.bb.online.no) (*.net *.split)
[14:11:02] *** Quits: Dreadnaught (Kulrak@n122-109-158-59.rdl2.qld.optusnet.com.au) (*.net *.split)
[14:11:02] *** Quits: Flecks (~fleck@user/fleck) (*.net *.split)
[14:11:02] *** Quits: mrec (~markus@sundtek.de) (*.net *.split)
[14:11:02] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[14:11:02] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[14:11:02] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[14:11:02] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[14:11:02] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[14:11:02] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[14:11:02] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[14:11:02] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[14:11:02] *** Quits: zoraj (~zoraj@209.126.81.159) (*.net *.split)
[14:11:03] *** Quits: Dreg (~Dreg@fr33project.org) (*.net *.split)
[14:11:03] *** Quits: gdarko_ (~me@dg.mk) (*.net *.split)
[14:11:03] *** Quits: theglass (~glass@user/theglass) (*.net *.split)
[14:11:03] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (*.net *.split)
[14:11:03] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (*.net *.split)
[14:11:03] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (*.net *.split)
[14:11:03] *** Quits: neirac (~neirac@pc-122-191-45-190.cm.vtr.net) (*.net *.split)
[14:11:03] *** Quits: yates (~user@fv-nc-f7af8b91e1-234237-1.tingfiber.com) (*.net *.split)
[14:11:03] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (*.net *.split)
[14:11:03] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[14:11:03] *** Quits: drei (~drei@pool-72-89-86-28.nycmny.fios.verizon.net) (*.net *.split)
[14:11:03] *** Quits: dansan (~daniel@75.81.148.51) (*.net *.split)
[14:11:03] *** Quits: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net) (*.net *.split)
[14:11:03] *** Quits: russruss (~russruss@my.russellmcc.com) (*.net *.split)
[14:11:03] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (*.net *.split)
[14:11:03] *** Quits: Nnavd (~Nnavd@ec2-34-220-224-214.us-west-2.compute.amazonaws.com) (*.net *.split)
[14:11:03] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[14:11:03] *** Quits: Griwes (~griwes@znc.reaver-project.org) (*.net *.split)
[14:11:03] *** Quits: Aardwolf (~Aardwolf@77-56-208-202.dclient.hispeed.ch) (*.net *.split)
[14:11:03] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[14:11:03] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[14:11:03] *** Quits: webstran- (~webstrand@user/webstrand) (*.net *.split)
[14:11:03] *** Quits: purplex (~purplex@user/purplex) (*.net *.split)
[14:11:03] *** Quits: blinky42 (~quassel@user/blinky42) (*.net *.split)
[14:11:03] *** Quits: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net) (*.net *.split)
[14:11:03] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[14:11:03] *** Quits: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net) (*.net *.split)
[14:11:03] *** Quits: NOTevil (~notevil@user/notevil) (*.net *.split)
[14:11:03] *** Quits: les_ (~whome@user/les) (*.net *.split)
[14:11:03] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[14:11:03] *** Quits: Speakz (speakz@user/gadreel) (*.net *.split)
[14:11:03] *** Quits: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse) (*.net *.split)
[14:11:03] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[14:11:03] *** Quits: Soliton (~Soliton@wesnoth/developer/soliton) (*.net *.split)
[14:11:03] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[14:11:03] *** elemongw_ is now known as elemongw
[14:11:10] *** purplex_ is now known as purplex
[14:11:20] *** Joins: Griwes (~griwes@znc.reaver-project.org)
[14:12:24] *** Joins: DavidMilestone69 (~DavidMile@182.64.6.188)
[14:12:31] *** Joins: Aardwolf (~Aardwolf@77-56-208-202.dclient.hispeed.ch)
[14:14:13] *** Quits: AlexisTP (~AlexisTP@92.57.44.63) (Ping timeout: 256 seconds)
[14:14:27] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[14:16:12] *** Joins: ed (~ed@175.141.150.118)
[14:16:12] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[14:16:12] *** Joins: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net)
[14:16:12] *** Joins: moose (~moose@user/moose)
[14:16:12] *** Joins: Dreadnaught (Kulrak@n122-109-158-59.rdl2.qld.optusnet.com.au)
[14:16:12] *** Joins: mrec (~markus@sundtek.de)
[14:16:12] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[14:16:12] *** Joins: s1b1 (~s1b1@user/s1b1)
[14:16:12] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[14:16:12] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[14:16:12] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[14:16:12] *** Joins: drei (~drei@pool-72-89-86-28.nycmny.fios.verizon.net)
[14:16:12] *** Joins: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net)
[14:16:12] *** Joins: russruss (~russruss@my.russellmcc.com)
[14:16:12] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[14:16:12] *** Joins: webstran- (~webstrand@user/webstrand)
[14:16:12] *** Joins: blinky42 (~quassel@user/blinky42)
[14:16:12] *** Joins: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net)
[14:16:12] *** Joins: Spydar007 (~spydar007@user/spydar007)
[14:16:12] *** Joins: NOTevil (~notevil@user/notevil)
[14:16:12] *** Joins: les_ (~whome@user/les)
[14:16:12] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[14:16:12] *** Joins: Speakz (speakz@user/gadreel)
[14:16:12] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[14:16:12] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[14:16:12] *** Joins: Soliton (~Soliton@wesnoth/developer/soliton)
[14:16:12] *** Joins: flynn (~mcbloch@user/flynn)
[14:16:50] *** Joins: crankslider (~slidercra@user/slidercrank)
[14:17:04] *** DavidMilestone69 is now known as DavidMilestone-n
[14:17:10] *** ville_ is now known as ville
[14:17:49] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[14:18:09] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[14:18:18] *** Joins: foul_owl (~kerry@71.212.133.174)
[14:21:20] *** Joins: kimo (~kimo@183.253.114.100)
[14:21:28] <kimo> .
[14:22:42] <kimo> Anyone knows any product that use rasp tech to anti webshell?such as openrasp in china,except this,anyone knows more?
[14:22:58] <zz> how does that anything to do with C++
[14:24:11] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:25:44] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 250 seconds)
[14:26:11] <kimo> or anyone knows any channel can discus web security,thanks!
[14:27:40] <Xardas> kimo maybe try /list and search there
[14:27:51] <kimo> thanks!
[14:29:02] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[14:29:16] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:29:59] *** Joins: frost (~frost@user/frost)
[14:32:34] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 260 seconds)
[14:34:26] *** Joins: lxsameer (lxsameer@user/lxsameer)
[14:46:15] *** Joins: Emet-Selch (~haise01@user/haise01)
[14:46:31] *** Emet-Selch is now known as haise01
[14:47:35] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[14:49:47] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[14:49:49] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[14:52:08] *** haise01 is now known as Azem
[14:52:36] *** Joins: xkuru (~xkuru@user/xkuru)
[14:54:27] *** Quits: DavidMilestone-n (~DavidMile@182.64.6.188) (Ping timeout: 256 seconds)
[14:54:47] *** Joins: cosimone (~user@93-47-228-191.ip115.fastwebnet.it)
[14:55:01] *** Quits: DavidMilestone (~DavidMile@182.64.6.188) (Ping timeout: 256 seconds)
[14:55:02] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[14:57:02] *** Joins: DavidMilestone (~DavidMile@182.64.6.188)
[14:58:53] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:00:57] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:02:11] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:05:13] *** Quits: ville (~ville@user/ville) (Ping timeout: 256 seconds)
[15:05:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[15:06:21] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 256 seconds)
[15:07:37] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:08:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 260 seconds)
[15:13:14] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[15:17:53] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Remote host closed the connection)
[15:18:49] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[15:19:13] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[15:21:09] *** Joins: proller (~p@93.158.190.219)
[15:22:24] *** Joins: Tempesta (~Tempesta@user/tempesta)
[15:23:08] *** Joins: ville (~ville@user/ville)
[15:24:26] *** Quits: katsuragi (katsuragi@tilde.institute) (Ping timeout: 252 seconds)
[15:27:11] *** Quits: foul_owl (~kerry@71.212.133.174) (Ping timeout: 252 seconds)
[15:30:15] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:34:58] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[15:36:11] *** Quits: Dreadnaught (Kulrak@n122-109-158-59.rdl2.qld.optusnet.com.au) (Read error: Connection reset by peer)
[15:36:25] *** Joins: Dreadnaught (Kulrak@n122-109-158-59.rdl2.qld.optusnet.com.au)
[15:37:51] *** Quits: ed (~ed@175.141.150.118) (Quit: Konversation terminated!)
[15:38:06] *** Joins: walterwhip (~www@user/walterwhip)
[15:38:23] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:39:59] *** Joins: frost (~frost@user/frost)
[15:43:43] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:2efb:49eb:5abc:71c2:a5ba) (Ping timeout: 250 seconds)
[15:51:16] *** Quits: bobb_ (~bobb_@dslb-088-065-181-024.088.065.pools.vodafone-ip.de) (Quit: Ping timeout (120 seconds))
[15:51:53] *** Joins: katsuragi (katsuragi@tilde.institute)
[15:58:38] *** Joins: Leone (~Leo@108.175.224.215)
[15:58:49] *** Quits: pingpongball (~pingpongb@43.228.192.104) (Quit: "bye :* ")
[15:59:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[16:00:09] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:2a6:96e7:82a0:9aab:fe7f)
[16:00:50] *** Joins: AlexisTP (~AlexisTP@92.57.44.63)
[16:00:58] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:02:40] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:03:08] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[16:03:45] *** Quits: TOB_CyxoB (~TOB_CyxoB@gateway/tor-sasl/tobcyxob/x-83841022) (Ping timeout: 276 seconds)
[16:06:16] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[16:07:23] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Remote host closed the connection)
[16:09:10] *** Joins: ejjfunky (~ejjfunky@125.164.23.223)
[16:12:02] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:2a6:96e7:82a0:9aab:fe7f) (Ping timeout: 240 seconds)
[16:15:04] *** Quits: savolla (~quassel@84.44.28.28) (Remote host closed the connection)
[16:15:30] *** Joins: pulse (~pulse@user/pulse)
[16:18:37] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 240 seconds)
[16:21:39] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:29:11] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:33:39] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[16:37:09] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[16:37:25] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[16:38:09] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[16:38:21] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:cd96:474c:cc93:ce17)
[16:38:21] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:cd96:474c:cc93:ce17) (Changing host)
[16:38:21] *** Joins: skapata (~Skapata@user/skapata)
[16:38:51] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[16:39:00] *** Quits: kimo (~kimo@183.253.114.100) (Quit: Leaving)
[16:39:14] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 252 seconds)
[16:39:44] *** Quits: DavidMilestone (~DavidMile@182.64.6.188) (Quit: Client closed)
[16:40:53] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[16:41:37] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[16:41:43] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[16:41:44] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[16:46:56] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[16:47:12] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[16:47:32] *** Joins: spithash (~spithash@user/spithash)
[16:48:18] *** Parts: AliceMeows (~AliceMeow@user/alicemeows) ()
[16:51:39] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[16:54:01] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[16:55:44] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 252 seconds)
[16:55:47] <evangeline> Can WaitOnAddress (https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitonaddress) or futex in Linux be used to monitor any memory address inside of a process. Can we spawn another thread in the process monitoring certain ARBITRARY memory address inside the process and get a callback when some other thread inside the process tries to modify that memory address?
[16:56:30] *** Joins: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com)
[16:57:48] *** Joins: DavidMilestone (~DavidMile@182.64.6.188)
[16:57:49] *** Quits: DavidMilestone (~DavidMile@182.64.6.188) (Client Quit)
[17:01:35] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:03:11] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:05:38] *** Joins: szymon (~ugh@37.120.156.246)
[17:06:30] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[17:07:20] *** Joins: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:08:24] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (tantalum.libera.chat (Nickname regained by services)))
[17:08:27] *** Joins: PJBoy (~PJBoy@user/pjboy)
[17:09:26] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:09:30] *** Joins: sabry (~sabry@197.37.49.72)
[17:10:02] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[17:11:59] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[17:12:39] <ville> !give evangeline general
[17:12:40] <nolyc> evangeline: #C++-general for algorithms, libraries, practices, projects, tools etc.
[17:16:00] *** Quits: hinata (~hinata@2409:4042:2e08:3f67:39f1:cd12:5ec6:c7c1) (Quit: Leaving)
[17:17:30] *** Joins: bobb_ (~bobb_@dslb-088-065-181-024.088.065.pools.vodafone-ip.de)
[17:22:42] *** Quits: cosimone (~user@93-47-228-191.ip115.fastwebnet.it) (Remote host closed the connection)
[17:22:53] *** Joins: supernova (~AdminUser@ppp-58-11-158-192.revip2.asianet.co.th)
[17:24:20] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:24:46] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:25:10] *** Joins: cosimone (~user@93-47-228-191.ip115.fastwebnet.it)
[17:27:26] *** Quits: AlexisTP (~AlexisTP@92.57.44.63) (Remote host closed the connection)
[17:28:07] <supernova> is there apple channel?
[17:30:46] *** Quits: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Ping timeout: 245 seconds)
[17:37:36] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[17:38:32] *** Joins: hornbill (~hornbill0@111.92.77.217)
[17:40:16] *** Quits: Spydar007 (~spydar007@user/spydar007) (Quit: Quit)
[17:40:35] <zz> There probably is a fruits-and-vegetable channel, but this ain't the one.
[17:41:29] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[17:42:00] *** zz is now known as anyone
[17:42:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:26] *** ChanServ sets mode: +v npaperbot
[17:42:48] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:43:41] *** Joins: seninha (~seninha@user/seninha)
[17:44:38] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[17:46:05] *** Joins: Spydar007 (~spydar007@user/spydar007)
[17:49:00] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:51:34] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 250 seconds)
[17:53:17] *** Quits: supernova (~AdminUser@ppp-58-11-158-192.revip2.asianet.co.th) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:55:06] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[17:55:32] *** Joins: N4buc0 (~N4buc0@2804:7f4:348b:2121:7dc1:f932:cbd3:a24c)
[17:55:39] *** Joins: drbeco (~beco@2804:351c:dd00:9600:7e60:24d6:7e4a:7676)
[18:02:01] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[18:02:08] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[18:03:40] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:05:59] *** Quits: the_lanetly_052_ (~the_lanet@194.135.169.72) (Remote host closed the connection)
[18:07:07] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:08:35] *** Quits: cosimone (~user@93-47-228-191.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[18:09:21] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:09:35] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:13:03] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[18:13:13] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[18:16:06] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:17:00] *** Joins: pulse (~pulse@user/pulse)
[18:21:13] *** Quits: katsuragi (katsuragi@tilde.institute) (Ping timeout: 250 seconds)
[18:21:28] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3c9b:6dce:e374:3130) (Read error: Connection reset by peer)
[18:27:59] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:ed3c:cb5a:50ec:f83d)
[18:31:49] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[18:35:27] *** Quits: crm (~crm@70.120.0.94) (Ping timeout: 256 seconds)
[18:46:54] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:ed3c:cb5a:50ec:f83d) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:47:56] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[18:49:20] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:49:23] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 256 seconds)
[18:51:08] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[18:51:18] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[18:52:00] <AliceMeows> https://godbolt.org/z/8WEG5Y6hW this would be considered a bug in libc++, wouldn't it?
[18:56:07] *** Azem is now known as haise01
[18:56:26] *** Joins: ferdna (~ferdna@user/ferdna)
[19:00:36] <T`aZ> you cant use unique_ptr to manage non pointers by default. There is a trick (forgot, google) to use non pointer types though but its ugly iirc.
[19:03:25] <ville> AliceMeows: http://www.eelis.net/c++draft/smartptr#unique.ptr.single.general-1.sentence-2
[19:04:11] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:04:55] <ville> although the std::unique_ptr<>::pointer derives from the D::pointer, if available, i'd expect you get into trouble doing what you did
[19:07:11] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 256 seconds)
[19:07:13] *** Joins: clime (~clime@37-48-57-231.nat.epc.tmcz.cz)
[19:07:14] <AliceMeows> T`aZ: the trick is to wrap the type or provide a type that can compare against nullptr which is probably a really bad idea
[19:07:50] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[19:08:47] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Remote host closed the connection)
[19:09:06] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[19:10:00] <AliceMeows> ville: http://www.eelis.net/c++draft/smartptr#unique.ptr.single.general-3 doesn't that mean libc++ has a bug to compile with my code?
[19:10:00] <T`aZ> AliceMeows: exactly. I would just write a simple my_unique_nonptrthingy{}; and be done with it
[19:10:34] *** Joins: katsuragi (katsuragi@tilde.institute)
[19:13:05] <ville> AliceMeows: quickly looking at it, think it should probably compile
[19:14:03] <AliceMeows> Why should it? if T{} != nullptr should be valid and T is int then it shouldn't compile or am I missing something?
[19:14:10] <ville> even though they keep saying "pointer" i am not sure it's specified anywhere it absolutely has to be a pointer, or what requirements there even are for the type usable there
[19:14:30] <ville> AliceMeows: where does the specification say there is a comparison to nullptr?
[19:15:23] <AliceMeows> It says the type has to be nullable so I'd assume comparing to nullptr would be a requirement
[19:17:55] <T`aZ> AliceMeows: i misunderstood your question, so yes i think it should not compile
[19:18:06] <ville> oh right that: http://www.eelis.net/c++draft/nullablepointer.requirements#5 row 5
[19:18:25] <ville> a == np means "a == nullptr"
[19:18:45] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[19:19:29] <ville> well libc++ can always claim it as an extension
[19:19:50] <AliceMeows> msvc's stl compiles as well I just didn't add it
[19:20:19] <AliceMeows> Even if it is extension there should be a way to disable it
[19:20:35] <ville> if they wrote their comparion as: if(x == nullptr) but rather say: if(!x)
[19:20:53] <ville> err didn't
[19:21:14] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[19:21:27] <ville> why?
[19:22:23] <AliceMeows> So you could write portable code and not discover later on that something wrong is going on with your code when you compile it with another compiler/stl implementation
[19:22:36] <ville> welcome to c++
[19:23:02] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[19:23:10] <ville> all compilers enable extensions by default and probably all of them can't turn all of the off either
[19:23:23] <AliceMeows> What is even the point in having a standard if implementations wont bother following it?
[19:23:41] <ville> well it's better to be 95% there than to be 5% there?
[19:23:51] <AliceMeows> I suppose
[19:25:36] *** Joins: rvalue- (~rvalue@user/rvalue)
[19:26:26] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[19:26:50] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[19:27:41] *** Joins: rg (~r-g@51.15.187.53)
[19:28:03] *** rvalue- is now known as rvalue
[19:28:55] *** Quits: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca) (Quit: WeeChat 2.8)
[19:32:54] *** Quits: sabry (~sabry@197.37.49.72) (Quit: Client closed)
[19:33:05] *** Joins: MatSharrow (~matthew@89.102.9.51.dyn.plus.net)
[19:33:26] *** Joins: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net)
[19:35:46] <ville> AliceMeows: http://www.eelis.net/c++draft/library#res.on.functions-1.sentence-2 would suggest to me that there's no requirement to enforce that a concept is met
[19:36:08] <ville> AliceMeows: it's upto to the programmer to make sure this happens
[19:37:47] <AliceMeows> That is not very assuring
[19:38:33] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[19:38:55] *** Quits: bobb_ (~bobb_@dslb-088-065-181-024.088.065.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[19:38:58] <ville> i don't think that is its intent
[19:40:11] <ville> it's threre to give freedom to implementations more likely
[19:41:05] *** Joins: rgrinberg (~textual@187.223.115.137)
[19:41:17] <AliceMeows> It may give freedom but at the same time it restricts you from writing portable code and I would understand if some developers would decide not to touch the stl at all
[19:41:33] <ville> every sentence of the standard is meant to be used by the implementors to kill, maim, wound or injure the programmer
[19:41:55] <cheetahw26> Hello... I'm using gdiplus and trying to capture a screenshot from a window, and then crop a rectangle out of the image... I can get the screenshot fine, but having trouble cropping the image properly, it's coming out with a bunch of funny lines
[19:42:22] <AliceMeows> cheetahw26: try in c++general
[19:42:35] <cheetahw26> thanks
[19:42:48] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[19:43:02] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[19:44:54] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[19:46:15] *** Joins: epony (~epony@user/epony)
[19:53:54] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 268 seconds)
[19:55:57] *** Joins: GyrosGeier (~geier@185.27.255.155)
[19:55:59] <GyrosGeier> hi
[19:56:07] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[19:56:28] <BurumaSerafuku> !grab ville
[19:56:29] <nolyc> BurumaSerafuku: The operation succeeded.
[19:56:34] <BurumaSerafuku> I know that's what you wanted
[19:56:42] <BurumaSerafuku> you've earned it
[19:57:14] <GyrosGeier> is there a good pattern for testing that 0 <= x <= 5, if x can be signed or unsigned?
[19:57:30] <GyrosGeier> if it's unsigned, I get a warning for a tautological compare
[19:57:59] <AliceMeows> You could check if a type is signed or unsigned at compile time
[19:59:18] *** Joins: pingpongball (~pingpongb@43.228.192.121)
[19:59:57] <GyrosGeier> hmm
[20:00:37] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:04:40] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:08:23] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:08:44] *** Joins: ed (~ed@2404:160:181:9993:57fb:98d:9c92:2168)
[20:13:35] <PJBoy> if (unsigned(x) <= 5)
[20:15:49] *** Joins: magla (~gelignite@55d43657.access.ecotel.net)
[20:15:56] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[20:18:43] *** Quits: MatSharrow (~matthew@89.102.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[20:20:11] <AliceMeows> https://godbolt.org/z/fW371rWsq now that's funny clang with libc++ errors while gcc doesn't
[20:29:37] <anyone> that's becuase g++libc uses 'if (tmp != nullptr)' while clanglibc++ only 'if (__tmp)' when deciding whether to run the deleter
[20:30:16] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[20:31:13] <anyone> and compilers don't really like to do two conversions (from klass to nullptr and then to bool, in libc++'s case)
[20:32:32] <Alipha> << (unsigned(x) <= 5); auto x = 4294967297; // PJBoy
[20:32:32] <geordi> true
[20:32:45] *** Quits: rgrinberg (~textual@187.223.115.137) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:33:36] <Alipha> unfortunately, `unsigned(x)` is casting x to `unsigned int`, not `unsigned long`
[20:33:40] <Alipha> << ((std::make_unsigned_t<decltype(x)>)(x) <= 5); auto x = 4294967297;
[20:33:41] <geordi> false
[20:34:05] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:35:46] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 245 seconds)
[20:35:57] *** Quits: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com) (Remote host closed the connection)
[20:36:57] *** Joins: MatSharrow (~matthew@89.102.9.51.dyn.plus.net)
[20:38:49] <Alipha> << (to_unsigned(x) <= 5); auto x = 4294967297; template<typename T> auto to_unsigned(T value) { return std::make_unsigned_t<T>(value); }
[20:38:50] <geordi> false
[20:38:52] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:ed3c:cb5a:50ec:f83d)
[20:40:46] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[20:41:25] <GyrosGeier> hmmm
[20:41:38] <GyrosGeier> I mean, my goal is to avoid the compiler warning :>
[20:42:15] <GyrosGeier> not sure if the conversion is well-defined enough that I don't get another warning instead
[20:42:32] *** Joins: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com)
[20:43:23] *** Quits: MatSharrow (~matthew@89.102.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[20:44:27] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[20:44:55] <anyone> AliceMeows: and you really would not want implicit two-conversions-in-a-row either, because then an arbitrary type could add unwanted conversion functions
[20:45:28] <Alipha> GyrosGeier: signed to unsigned has always been well-defined: https://stackoverflow.com/a/18994637
[20:45:42] *** Joins: MatSharrow (~matthew@89.102.9.51.dyn.plus.net)
[20:46:12] <Alipha> c++20 makes unsigned to signed well-defined instead of implementation-defined
[20:46:43] <Alipha> (c++20 requires two's complement, finally)
[20:48:23] <Alipha> the more verbose solution would be: bool result; if constexpr(std::is_signed_v<decltype(x)>) { result = (0 <= x <= 5); } else { result = (x <= 5); }
[20:49:00] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[20:49:38] *** Quits: pingpongball (~pingpongb@43.228.192.121) (Quit: Client closed)
[20:50:19] *** Quits: MatSharrow (~matthew@89.102.9.51.dyn.plus.net) (Client Quit)
[20:55:55] *** Quits: ed (~ed@2404:160:181:9993:57fb:98d:9c92:2168) (Ping timeout: 250 seconds)
[21:01:47] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[21:03:28] *** Joins: linext (~linext@pool-100-1-124-107.nwrknj.fios.verizon.net)
[21:04:01] <linext> is there a way to remove the portion after the decimal point of a float using cout?
[21:05:05] <AliceMeows> You could cast to int
[21:05:11] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:05:14] <linext> no, it's a double to begine with
[21:05:20] <imMute> linext: std::setprecision()
[21:06:04] <imMute> << (int)3.14;
[21:06:04] <geordi> 3
[21:06:13] <imMute> linext: AliceMeows's suggestion also works.
[21:06:25] <AliceMeows> It works but it has a runtime cost
[21:06:46] <linext> the double will get lost if it's large and cast to an int
[21:07:06] <AliceMeows> std::setprecision is the real solution here
[21:07:16] <imMute> << (int)2222321235234651234213412512.123;
[21:07:17] <geordi> 2147483647
[21:07:18] <AliceMeows> std::format might have something too
[21:07:27] <imMute> << std::setprecision(0) << 2222321235234651234213412512.123;
[21:07:28] <geordi> 2e+27
[21:07:32] <linext> if i use setprecision then i can't convert to hex later on
[21:07:35] <Eelis> setprecision is useless here
[21:07:52] <linext>         cout << setw(0) << "0x" <<  nouppercase << hex << std::fixed << setprecision(0) << A << endl;
[21:08:01] <linext> where A is a double
[21:08:07] <imMute> Eelis: he wants to remove the decimal part of the float when output.  is that not exactly what setprecision(0) does?
[21:08:18] <Eelis> ah, together with std::fixed it might work
[21:08:28] <linext> so for A = 100, it should be 0x64, not 0x100
[21:08:48] <imMute> << setw(0) << "0x" <<  nouppercase << hex << std::fixed << setprecision(0) << 100.0
[21:08:49] <geordi> 0x100
[21:08:55] <linext> or A = 100.345, it should output 0x64
[21:09:01] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:09:14] <linext> not sure if the ordering for the cout command maters
[21:09:19] <AliceMeows> << std::noshowpoint << 1123123123123123.4444;
[21:09:25] <imMute> linext: it definitely does.
[21:09:28] <geordi> 1.12312e+15
[21:09:30] <Eelis> { double x = 0.9; cout << fixed << setprecision(0) << x; } // nope, fixed together with setprecision rounds rather than truncates
[21:09:30] <geordi> 1
[21:10:28] <imMute> << setw(0) << "0x" <<  nouppercase << hex << setprecision(0) << 100.0
[21:10:28] <geordi> 0x1e+02
[21:11:17] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:ed3c:cb5a:50ec:f83d) (Ping timeout: 240 seconds)
[21:11:19] <linext> i mean, is there a solution using cout to take a double like 100.345 and make it 0x64 ?
[21:11:53] <linext> i can cast the double to a (long long) A, but that's hacky
[21:12:01] *** Quits: hornbill (~hornbill0@111.92.77.217) (Remote host closed the connection)
[21:12:25] <Eelis> you want to discard the non-integral part of a number. how is converting to an integer type not 100% appropriate?
[21:12:36] <Eelis> you seem to be creating your own problem for no reason here
[21:12:39] <imMute> seems hex and fixed are exclusive.
[21:12:46] <linext> integer has a maximum of 32-bit
[21:12:56] <Eelis> maybe 30 years ago
[21:13:04] <imMute> Eelis: floats can store a larger range than long long ints
[21:13:06] <linext> i'm not creating the problem, i'm solving a problem
[21:13:11] <linext> https://www.hackerrank.com/challenges/prettyprint/problem?isFullScreen=true
[21:13:46] <linext> https://i.ibb.co/7txf4z6/image.png
[21:13:48] <Eelis> if the value is larger than what's representable in an int64_t, floating point types won't store decimals
[21:14:06] <Eelis> because they lack the precision
[21:14:22] <linext> yes, a double is way more precise that the integer, so a cast to int is no good
[21:14:28] <Eelis> lolwut?
[21:14:31] <imMute> Eelis: there are some (mathematical sense) integers that can be stored in floats that cannot be stored in 64-bit ints.
[21:14:42] <linext> the range of double is larger
[21:14:54] <ville> linext: if you're above 2^24, for float, it won't be able to hit all integer values anyway... so you need a bigger integer type
[21:15:05] <ville> (similar limit with double)
[21:15:10] <Eelis> imMute: yes, but if you get into that range, you won't be able to store any decimals
[21:15:38] <linext> i want to take a double, discard the decimal, and convert it into hex only by using cout modifier
[21:15:40] <imMute> Eelis: I have a feeling that doesn't matter for the hackerrank challenge.
[21:16:03] <linext> notice that i'm not allowed to import cmath for floor
[21:16:14] <Eelis> !restrict
[21:16:15] <nolyc> If you insist on using only a restricted subset of C++, then know that our interest in helping you is inversely proportional to the severity of the restrictions.
[21:16:29] <Eelis> "i can't use random stdlib parts" is definitely the kind of restriction that makes me uninterested
[21:16:50] <linext> sometimes they purposely restrict to show another way of doing it
[21:17:24] <ville> linext: what does "discard decimal" mean in the case that which ever floating point type you are using is not able to represent all the integer values in the range where you are operating?
[21:17:51] <linext> it means turn it into an integer by flooring the double
[21:18:34] <imMute> ville: it means print out the float, scan the string for the period and replace it with a NUL
[21:18:41] <AliceMeows> linext: https://stackoverflow.com/a/5123037
[21:18:43] <ville> linext: how exactly? for discussions sake let's say 15.4 is a so large value that the imaginary floating point is not able to represent 15.0...
[21:19:23] <ville> linext: what should the output be?
[21:20:00] <linext> 15 in hex, so 0xF
[21:20:16] <ville> but your datatype can't hit that value...
[21:20:32] *** Joins: Moosadee (~Moosadee@198.248.96.42)
[21:20:36] <AliceMeows> That'd be the moment you'll have to implement a custom floating type
[21:20:39] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:2121:7dc1:f932:cbd3:a24c) (Remote host closed the connection)
[21:20:44] <ville> a floating point type is able to only represent discrete points on the number line
[21:21:01] *** Joins: N4buc0 (~N4buc0@2804:7f4:348b:2121:7dc1:f932:cbd3:a24c)
[21:21:05] <Eelis> << fixed << setprecision(0) << 1e30 // you can stop printing at the . if you like, but if you use very large numbers, you're still just going to be printing random noise
[21:21:06] <geordi> 1000000000000000019884624838656
[21:21:50] <ville> so for example a float can hit all the integers upto 2^24, there's a similar limit for double
[21:22:44] *** Joins: sbrothy (~sbrothy@192038134254.mbb.telenor.dk)
[21:24:15] *** Joins: NEYi_ (~NEYi@109.251.216.38)
[21:24:19] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:25:06] <Eelis> bottom line is that non-scientific notation really doesn't work well for floats/doubles unless their values are small
[21:25:22] *** Quits: NEYi_ (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[21:25:24] <linext> https://ideone.com/Zow4Kt
[21:25:28] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[21:25:41] <linext> is there a way to output 0x64 by moving around the cout modifiers?
[21:25:47] *** Joins: NEYi_ (~NEYi@109.251.216.38)
[21:25:47] *** Quits: exocom (~exocom4@217-180-232-30.sycmilaa.metronetinc.net) (Quit: Leaving)
[21:26:25] <linext> or does hex not work on a double?
[21:26:43] <AliceMeows> You'll have to cast it to int/long long
[21:27:01] *** Quits: NEYi (~NEYi@109.251.216.38) (Ping timeout: 240 seconds)
[21:27:01] <linext> what's the range of long long compared to double?
[21:27:02] <Eelis> << std::hexfloat << 3.2
[21:27:03] <geordi> 0x1.999999999999ap+1
[21:30:04] <linext> oh well, i give up
[21:30:16] <linext> it'll be cast to (long long), which passes all test cases
[21:30:18] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Client Quit)
[21:30:25] <linext> even though i know it's not right for all cases
[21:30:28] <Hello71> !itworks
[21:30:29] <nolyc> Hello71: Error: "itworks" is not a valid command.
[21:30:34] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[21:30:40] <Alipha> !works
[21:30:41] <nolyc> It works it works! Omg omg omg! I mean it compiles. Now what's a segfault?
[21:30:48] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[21:31:38] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[21:32:21] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[21:32:32] <linext> https://i.ibb.co/ThzxSp2/image.png
[21:32:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:33:18] <linext> not so pretty print
[21:33:37] *** Quits: ejjfunky (~ejjfunky@125.164.23.223) (Quit: Leaving)
[21:34:17] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 256 seconds)
[21:34:43] <ville> linext: ceil/floor/round won't give you accurate* results either once you're in the range where the floating point type cannot represent the integer value
[21:35:13] <linext> ah, i didn't know that
[21:35:16] <ville> *) accurate meaning what real numbers would do, of course it's "accurate" in the way its specified
[21:35:41] <linext> is there a better way to truncate the decimal?
[21:35:52] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[21:36:30] <ville> if the act of ceil/floor/round being accurate at those value ranges is important it's probably "better" not use a floating point type then
[21:37:41] *** Joins: unyu (~pyon@user/pyon)
[21:37:57] *** Joins: Betal (~Betal@user/betal)
[21:39:18] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:41:52] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[21:42:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:25] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:25] *** ChanServ sets mode: +v npaperbot
[21:44:02] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[21:45:11] *** Joins: vicfred (~vicfred@user/vicfred)
[21:48:23] *** Joins: rgrinberg (~textual@187.223.115.137)
[21:51:02] *** Joins: N4buc0- (~N4buc0@177.16.170.138)
[21:51:57] *** Quits: Moosadee (~Moosadee@198.248.96.42) (Ping timeout: 240 seconds)
[21:52:09] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:2121:7dc1:f932:cbd3:a24c) (Remote host closed the connection)
[21:53:05] *** Joins: maxzor (~maxzor@2a01cb04054faa00de36cc5a8e915128.ipv6.abo.wanadoo.fr)
[21:53:32] <maxzor> Hello, do you have a good read to understand where include_next comes from?
[21:53:59] *** Quits: drbeco (~beco@2804:351c:dd00:9600:7e60:24d6:7e4a:7676) (Quit: Leaving)
[21:54:41] <imMute> maxzor: sounds like a GCC extension
[21:55:12] <maxzor> oh
[21:55:31] <imMute> https://gcc.gnu.org/onlinedocs/cpp/Wrapper-Headers.html says it is indeed a GNU extension
[21:56:29] <maxzor> clang also supports it, I'm having trouble with this preprocessor directive there
[21:57:08] *** Joins: Moosadee (~Moosadee@198.248.96.43)
[22:01:02] *** Quits: proller (~p@93.158.190.219) (Ping timeout: 240 seconds)
[22:01:06] *** Quits: sbrothy (~sbrothy@192038134254.mbb.telenor.dk) (Read error: No route to host)
[22:02:21] *** Joins: nebu (~user@user/wavion)
[22:05:40] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:09:26] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[22:11:40] *** Joins: drbeco (~beco@2804:351c:dd00:9600:7e60:24d6:7e4a:7676)
[22:17:12] <GyrosGeier> am I correct in assuming that "static void *operator new(std::size_t) = delete;" is the correct way these days to inhibit creation on the heap?
[22:17:21] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[22:18:47] <Alipha> GyrosGeier: seems like the "correct way" is to not bother and not care :-) why do you want to inhibit creation on the heap?
[22:20:14] <cbreak> GyrosGeier: I don't think that'll work
[22:20:17] <anyone> auto buf = new char[sizeof(yourtype)]; new(buf) yourtype(); // now I placed your type on the heap ANYWAY
[22:20:36] <cbreak> std::vector doesn't use new
[22:20:37] <GyrosGeier> it's a scoped_lock-like class
[22:20:59] <Alipha> anyone: that's what i thought, but i get an error: https://wandbox.org/permlink/YZpPfPh7AIJzRKP3
[22:21:00] <GyrosGeier> so if you new it, you're holding it wrong
[22:21:04] <cbreak> GyrosGeier: so?
[22:21:22] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:21:42] <anyone> Alipha: that would suck because it would mean one can't use an automatic variable then.
[22:21:43] <GyrosGeier> like, if you want to hold the lock beyond the current scope, then you call .lock() manually, instead of "new scoped_lock(&mutex);"
[22:22:20] <cbreak> if you call new directly, you should closely look at your code anyway
[22:22:25] <cbreak> but that's not really related to heap
[22:22:36] <cbreak> std::vector<Thing> // uses heap
[22:22:52] <cbreak> with struct Thing { GyrosLock lock; };
[22:23:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:23:55] <GyrosGeier> sure
[22:24:03] <anyone> as in, https://wandbox.org/permlink/ja7tIq85do49NcHE  I'm clearly avoiding "the heap"
[22:24:08] <GyrosGeier> but then lock ownership makes sense
[22:24:47] <cbreak> it's still heap based.
[22:25:01] <GyrosGeier> I mean, all these language features are there to avoid accidental footguns
[22:25:06] <cbreak> GyrosGeier: my tip is: don't try too hard to defend against malicious use
[22:25:14] <cbreak> rather, focus on making proper use easier
[22:25:20] *** Quits: drbeco (~beco@2804:351c:dd00:9600:7e60:24d6:7e4a:7676) (Quit: Leaving)
[22:25:20] <GyrosGeier> sure
[22:25:25] <cbreak> (unless you write security relevant code, which you obviously don't)
[22:25:32] <GyrosGeier> but a one-liner is not "too hard"
[22:25:49] <Alipha> i suppose that's a reasonable reason to prevent operator new. don't forget about `operator new[]` though?
[22:25:57] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[22:26:11] <GyrosGeier> heh
[22:26:15] <GyrosGeier> good point
[22:26:35] <GyrosGeier> otoh it's not a recursive lock
[22:26:58] <GyrosGeier> so unless you use [1], you will notice right away that you're doing it wrong here
[22:28:42] *** Joins: drbeco (~beco@2804:351c:dd00:9600:7e60:24d6:7e4a:7676)
[22:31:26] <anyone> why is the existing std::mutex and/or lock_guard/unique_lock not enough?
[22:31:34] <linext> can someone explain the preprocessor directive for "io"
[22:31:54] <anyone> linext: who is io
[22:31:54] <linext> i assume it's supposed to use cin to fill vector v
[22:31:57] <linext> https://i.ibb.co/tZWV5Qd/image.png
[22:32:12] <linext> line 27
[22:32:35] <cbreak> linext: that code is horrible.
[22:32:51] <linext> i'm responsible for the preprocessor directives to make the code work
[22:32:59] <anyone> then don't write it like that
[22:33:18] <cbreak> linext: then remove all the #define
[22:33:19] <linext> the gray box is not editable, only the top white part
[22:33:32] <kalven> solve your hackerrank problems on your own
[22:33:48] <cbreak> linext: if you're using macros for that, then you're clearly not good at C++
[22:33:57] <cbreak> INF should be a constant
[22:34:00] <linext> these are practice problems
[22:34:02] <imMute> cbreak: it's clearly part of the challenge.
[22:34:20] <cbreak> imMute: the challenge is to avoid macros :P
[22:34:33] <anyone> make io a function that returns a class object which has an operator[]
[22:34:40] <cbreak> linext: 1000000 is not infinite
[22:34:42] <kalven> the challenge is to change the macros to the make the code work.
[22:34:45] <kalven> jeez
[22:34:46] <imMute> #define io(v) v
[22:35:17] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[22:35:33] <anyone> the real challenge though, is to make the tests succeed whilst going against the stream as much as possible
[22:35:37] <cbreak> you could change the macros to constants and functions
[22:36:16] <cbreak> the only thing that I don't think can be done without macros is FUNCTION
[22:36:50] <anyone> if you #define FUNCTION(a,b), line 20/21 will "go away" and you're free to do something else :)
[22:37:18] <cbreak> hmm... and foreach
[22:37:19] <anyone> nobody ever said the macros have to expand to a non-zero string
[22:38:14] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[22:38:18] <cbreak> anyone: #define main _oldmain
[22:38:27] <cbreak> and write your own main function before
[22:40:49] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[22:41:37] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:43:32] <linext> why is this not working: #define io(a)[b] (int i; cin >> i; v.push_back(i);)
[22:44:47] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[22:45:48] <PJBoy> define not working
[22:46:17] <imMute> linext: because the [b] is part of what gets put in, not taken out.
[22:46:28] <imMute> you can only replace the "io(v)" part
[22:47:03] <linext> can i use cin in the #define?
[22:47:19] <imMute> it's basically a search and replace, so yeah.
[22:48:16] <linext> #define io(v)[i] (temp t; cin >> t; v[i] = t);
[22:49:00] <Alipha> GyrosGeier: anyone brings up a valid point. why do you need another "scope lock"?
[22:50:25] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:50:49] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:50:56] <imMute> linext: think of it like #define  io(v)      [i] (temp t; cin >> t; v[i] = t);
[22:51:12] <imMute> and replace the "io(v)" in their code with "[i] (temp t; cin >> t; v[i] = t);"
[22:51:46] <GyrosGeier> Alipha, it's not a std mutex, but a separate type
[22:52:12] <GyrosGeier> because inline asm
[22:52:29] <GyrosGeier> (needs platform specific bus access code)
[22:53:09] <anyone> https://wandbox.org/permlink/SUyDydCoUv5s0s0m good enough for haggerrang
[22:59:14] *** Joins: unyu (~pyon@user/pyon)
[22:59:19] *** Quits: Moosadee (~Moosadee@198.248.96.43) (Remote host closed the connection)
[22:59:37] *** Joins: Moosadee (~Moosadee@198.248.96.43)
[22:59:45] *** Quits: myon98 (~myon98@user/myon98) (Quit: Bouncer maintainance...)
[23:02:49] *** Joins: DavidMilestone (~DavidMile@182.64.6.188)
[23:04:03] <linext> here's a simplified example that i'm trying to get working: https://ideone.com/cyv4n2
[23:05:46] <cbreak> linext: what they told you is true: you can think of macros as search + replace
[23:06:02] <cbreak> you're replacing io with a string.
[23:06:12] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:06:16] <cbreak> linext: maybe it helps you to understand this when you compile with -E
[23:07:41] <cbreak> linext: here: https://godbolt.org/z/W9MePqsGe
[23:08:22] <linext> hmmm
[23:08:33] <linext> something about vector<int> v(n); is not what i'm expecting
[23:08:50] <cbreak> maybe. But that line is fine, other than missing std::
[23:09:04] <linext> vector<int> v(n); is different from vector<int> v;
[23:09:09] <cbreak> yes.
[23:09:10] <linext> when i try to output the value
[23:09:20] <cbreak> v has size n if you initialize it to size n
[23:09:28] <cbreak> if you just leave it empty, then it is empty
[23:10:03] <linext> how do i get the first element of the vector if "vector<int> v(n);" is used
[23:10:03] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:10:13] <linext> at(0) doesn't work
[23:10:39] <cbreak> v[0] will work
[23:10:43] <cbreak> v.at(0) too
[23:10:49] <cbreak> or v.front()
[23:11:06] <Alipha> presumably `io(v)[i];` should transform into `cin >> v[i];`
[23:11:21] <cbreak> { std::vector v(4); std::cout << v[0]; }
[23:11:21] <geordi> error: class template argument deduction failed:
[23:11:28] <cbreak> { std::vector<int> v(4); std::cout << v[0]; }
[23:11:28] <geordi> 0
[23:11:32] <linext> ah, v.at(i) = t; needs to be used instead of push_back
[23:11:50] <cbreak> depends on what you want
[23:12:00] <Alipha> linext: there's no reason to involve t. you can >> directly into the vector
[23:12:30] <linext> ah
[23:12:39] <cbreak> linext: look at the output of -E on the godbolt link I gave you
[23:12:53] <cbreak> if you experiment there, you'll see how simplistic the preprocessor is
[23:13:13] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[23:13:32] *** Joins: proller (~p@80.240.216.69)
[23:15:37] *** Quits: dld (~davidlowr@2601:197:600:1210:3c77:90a4:f938:18fe) (Ping timeout: 240 seconds)
[23:16:07] <linext> here we go: https://ideone.com/cyv4n2
[23:16:50] *** Joins: dld (~davidlowr@2601:197:600:1210:5c9e:f676:ddc7:b9f7)
[23:17:48] <linext> so i guess part of the lesson is that the vector needs to be accessed using subscript
[23:18:47] <Alipha> linext: if you scroll all the way to the bottom of the right pane (lines 32047+) you can see your preprocessor output: https://godbolt.org/z/cErM4zbsn
[23:19:57] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[23:20:30] <cbreak> Alipha: there's a reason I commented out the includes for the -E output on godbolt :D
[23:20:52] <svm_invictvs> reading preprocessor output, woof
[23:21:02] <svm_invictvs> You've gotta do it, but damn
[23:21:04] <cbreak> svm_invictvs: it's good for debugging that junk
[23:21:08] <svm_invictvs> Yeah
[23:21:16] <svm_invictvs> I still say "woof" to it.
[23:22:14] *** Joins: ferdna (~ferdna@user/ferdna)
[23:22:35] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[23:22:54] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[23:22:56] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[23:27:49] *** Quits: bionade24 (~bionade24@2a03:4000:33:45b::1) (Remote host closed the connection)
[23:28:11] *** Joins: quartz (~user_name@user/quartz)
[23:31:00] *** Quits: DavidMilestone (~DavidMile@182.64.6.188) (Quit: Client closed)
[23:31:54] <Alipha> now we just need something similar for template instantiations...
[23:31:56] *** Quits: rgrinberg (~textual@187.223.115.137) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:32:09] *** Quits: quartz (~user_name@user/quartz) (Client Quit)
[23:33:32] *** Joins: proller (~p@2a02:6b8:b081:8813::1:1)
[23:34:25] *** Joins: x_kuru (~xkuru@user/xkuru)
[23:35:25] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00)
[23:37:07] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[23:38:46] *** Joins: quartz (~user_name@user/quartz)
[23:41:16] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00) (Ping timeout: 250 seconds)
[23:42:13] *** Parts: quartz (~user_name@user/quartz) ()
[23:43:27] *** Joins: crankslider (~slidercra@user/slidercrank)
[23:43:28] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00)
[23:43:53] *** Joins: blei (~blei@209.201.38.106)
[23:47:33] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:48:44] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:48:44] <PJBoy> visual studio has template instantiation expansion
[23:50:54] <cbreak> heh
[23:51:13] <cbreak> so vs actually does instantiate templates nowadays? :)
[23:53:09] *** Quits: proller (~p@2a02:6b8:b081:8813::1:1) (Ping timeout: 250 seconds)
[23:54:31] *** Joins: bionade24 (~bionade24@2a03:4000:33:45b::1)
[23:57:51] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[23:58:16] *** Joins: noarb (~noarb@user/noarb)
