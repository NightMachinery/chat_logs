[00:00:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[01:56:38] *** Joins: notzmv (~zmv@user/notzmv)
[03:12:51] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[03:30:52] *** Joins: adigitoleo (~adigitole@115.69.38.75)
[06:02:06] *** Joins: notzmv (~zmv@user/notzmv)
[11:22:46] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:31:10] *** Joins: Major_Biscuit (~MajorBisc@c-001-018-027.client.tudelft.eduvpn.nl)
[11:33:48] *** Quits: ExpiredKebab (~sgreadly@2407:7000:89aa:b303:2476:a88:e6fd:962e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:34:06] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[11:37:01] *** Joins: ExpiredKebab (~sgreadly@2407:7000:89aa:b303:7cdd:7c94:794d:ed94)
[13:27:06] *** Quits: lunik1 (~lunik1@37.205.14.203) (Quit: :x)
[13:27:56] *** Joins: lunik1 (~lunik1@37.205.14.203)
[13:32:25] *** Quits: lunik1 (~lunik1@37.205.14.203) (Client Quit)
[13:34:50] *** Joins: lunik1 (~lunik1@37.205.14.203)
[13:47:30] *** Quits: lunik1 (~lunik1@37.205.14.203) (Ping timeout: 252 seconds)
[13:56:45] *** Joins: lunik1 (~lunik1@37.205.14.203)
[14:25:57] *** Quits: lunik1 (~lunik1@37.205.14.203) (Quit: :x)
[14:35:41] *** Joins: lunik1 (~lunik1@37.205.14.203)
[15:40:55] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[17:06:32] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[17:46:25] <mikko> i'm trying to get MLJFlux.jl's ImageClassifier (https://github.com/FluxML/MLJFlux.jl#training-on-a-gpu) working but i keep running into all kinds of errors: https://bpa.st/ZWPA
[17:46:44] <mikko> i think the main problem is this "scitype" nonsense
[17:49:51] <mikko> never thought i'd miss numpy but here we are...
[17:57:12] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[18:21:19] <adigitoleo> Tables.MatrixTable doesn't have a size method so you're going to have to convert out of that type before calling fit I guess
[18:22:44] <adigitoleo> This is what happens when machine learning people try to reinvent tensors
[18:23:24] <mikko> i also tried coercing to Vector{GrayImage} but just ran into different error
[18:23:55] <mikko> at this i'm just abandoning this library and going to plain old flux.ml
[18:24:00] <mikko> at this point*
[18:24:41] <adigitoleo> yeah It looks like the type system there is a bit iffy, not my are though so I can't tell much
[18:25:56] <adigitoleo> s/are/area
[18:27:39] <dTal> I wonder if this is a common problem in Julia - overuse of the type system
[18:28:45] <dTal> I hate hate hate the approach of the JuliaImages ecosystem, which is to simultaneously assert that images are just arrays, but also to attempt to "tag" all image data with some image type that more often than not causes things to choke
[18:29:21] <mikko> yeah i've also gotten quite angry with the image ecosystem types a few times
[18:31:01] <dTal> A major flaw with the Julia type system is the implicit duck typing
[18:31:24] <ninjin> MLJ and all kinds of “meta” libraries always terrify me. At first glance, they sem to solve problems. But I more often than not find that they obscure more than they help.
[18:31:41] <ninjin> s/sem/seem/
[18:32:45] <dTal> in theory you can implement a new type and have all functions just work, as long as you implement "all" methods. But there's nowhere you can check what methods need to implemented to make "everything" work, so if you use any slightly "weird" types (like images instead of plain arrays) you constantly live in fear that you'll try and do something and it'll all go bang with a super obscure error message
[18:33:29] <ninjin> Yes, something akin to interfaces will go a long way here.
[18:33:54] <adigitoleo> There are certainly problems with Julia's type system, unenforced interfaces are a pain point for many: https://viralinstruction.com/posts/badjulia/#the_type_system_works_poorly
[18:34:23] <adigitoleo> (in particular second subsection of that part)
[18:35:35] <dTal> Case in point, in Pluto, sometimes arrays of images display fine, and sometimes it goes bang with "UndefVarError: _restrict1 not defined"
[18:35:39] <adigitoleo> I don't think it's all that bad, but maybe people are still thinking it's Python or "mainstream" OOP, but Julia is quite (deceptively) different
[18:36:05] <dTal> What's "_restrict1"? Who the hell knows
[18:36:21] <ninjin> Not that I can elaborate on this all too well, but one problem is that Julia lies in a paradigm which is new and thus not fully understood.
[18:36:39] <adigitoleo> ^ that's what I meant, yeah
[18:36:43] <ninjin> I suspect this is one reason why it has not just “been fixed”.
[18:37:44] <ninjin> There is also a related phenomena that I call “Type Anarchy” that I really should write about some day.
[18:39:29] <dTal> Something that worries me about the Julia paradigm (that the designers are well aware of) is that the mechanism for selecting the "best method" to call for a given type signature is not well defined - they attempt to call the "most specific" method but there is not a well defined ordering, and so you have hacky heuristics built in to the core of the language
[18:40:30] <dTal> I don't *think* I've been bitten by this in practice yet, but on the other hand sometimes things just break and I have no idea why and I end up having to give up and try a different approach - so maybe I have
[18:41:00] <adigitoleo> meh, I've never ran into method ambiguity, and that seems like something that can be improved over time to catch edge cases if necessary
[18:41:36] <adigitoleo> most MethodErrors I come across are from people misunderstanding how abstract types work
[18:42:22] <adigitoleo> s/abstract/parametric
[18:47:41] <mikko> me neither, method ambiguity is more of a theoretical problem than something you'd actually run into
[18:49:28] <mikko> i think proper documentation would fix most of the issues i currently have with the language (like uncertainty about what methods are required to implement an interface)
[18:56:13] *** Joins: notzmv (~zmv@user/notzmv)
[19:29:36] *** Quits: Major_Biscuit (~MajorBisc@c-001-018-027.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[20:55:09] *** Parts: jdarnold (~jdarnold@static-98-118-34-170.bstnma.fios.verizon.net) ()
