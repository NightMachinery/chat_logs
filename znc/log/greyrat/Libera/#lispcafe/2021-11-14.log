[00:14:11] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 264 seconds)
[00:27:00] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[00:27:26] *** Quits: X-Scale (~ARM@46.50.4.208) (Ping timeout: 260 seconds)
[00:28:38] *** X-Scale` is now known as X-Scale
[01:03:22] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[01:05:29] <hayley> https://www.youtube.com/watch?v=N7rPFDxPTM8
[01:05:29] -ixelp- source physics in doom 2 - YouTube
[01:07:23] *** Joins: X-Scale (~ARM@83.223.243.66)
[01:32:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:58:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:03:22] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[04:10:48] *** Joins: Alfr (~Alfr@user/alfr)
[04:11:16] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[04:43:10] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 260 seconds)
[05:13:03] <hayley> https://twitter.com/pcwalton/status/1459686222914154496
[05:18:09] <Catie> They're so close to getting it
[05:20:13] * hayley mentions that data races in Java aren't exactly lethal, as there are no writes from nowhere, and no reading half-written values.
[05:25:17] <hayley> "Java didn't take the shortcut that Go did where races can corrupt memory." bruh wtf
[05:26:56] <hayley> But why would you even have that? It's not like any hardware you'd run Go programs on doesn't ensure that you don't read partial writes.
[05:33:42] <hayley> I guess that could happen if you only check bounds by the slice and not the backing vector, which is pretty dumb.
[05:34:52] <moon-child> i think there is no backing vector; it's just a pointer
[05:35:29] <hayley> Well, also dumb.
[05:35:39] <moon-child> though hmm, the mention of capacity implies it can be extended in-place?  So idk
[05:36:13] <hayley> IIRC slices keep the backing array alive, so either the GC has to handle interior pointers (it probably already does), or you keep a pointer to the start of the vector.
[05:36:41] <moon-child> yeah I was assuming they handled interior pointers transparently
[05:37:39] <hayley> This is so sad minion play https://www.youtube.com/watch?v=IEM8x4VFZB0
[05:37:40] -ixelp- The Aircrash Bureau - YouTube
[05:42:06] *** Joins: notzmv (~zmv@user/notzmv)
[06:00:29] *** Quits: Catie (~user@user/catie) (Quit: rcirc on GNU Emacs 29.0.50)
[06:12:27] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[06:12:33] <Jacobis9000> who
[06:22:31] *** Quits: raeda (~raeda@74.215.157.51) (Quit: Leaving)
[06:25:46] <Jacobis9000> Underlying our approach to this subject is our conviction "computer science" is not a science and that its significance has little to do with computers. The computer revolution is a revolution in the way we think and the way we express what we think. The essence of this change is what might best be called /procedural epistemology/ - the study of the structure of knowledge from an imperative point of 
[06:25:50] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[06:25:52] <Jacobis9000> view, as opposed to the more declarative point of view taken by the classical mathematical subjects.
[06:28:05] <mfiano> moon-child: Someone else convinced me to give FreeBSD another try, using the STABLE branch instead of RELEASE, and installing everything from ports. It is going much better so far :)
[06:28:38] <mfiano> Before I was installing mostly binary packages on the release branch, and it was pretty unstable for some packages I regularly use.
[06:50:41] <hayley> Those are a lot of words.
[06:51:51] <Jacobis9000> The preface to the first edition of the Structure and Interpretation of Computer Programs? 
[06:51:54] <hayley> I'm now itching to write an article about how both "parallelism" and "concurrency" have stuff running "concurrently" (as per Time Clocks and the Ordering of Events...) but the former has finer grained actions running concurrently.
[06:52:08] <hayley> Yes, last I checked there were a lot of words in SICP.
[06:52:22] <Jacobis9000> You should write your article!
[06:52:37] <Jacobis9000> I wish I had written all the articles I itched to write, but did not for some reason.
[06:53:16] <hayley> Implicit locking (event loops, cooperative async/await, whatever) gives you the latter but not the former, and there is no way to get to the former. Explicit locking can be dangerous, but you can play it safe and lock everything, then gradually break locks in order to achieve parallelism.
[06:53:44] <Jacobis9000> Interesting.
[06:54:59] *** Quits: Inline (~Inline@2a02:908:1252:7a80:22ee:92f9:2a07:2e7) (Ping timeout: 264 seconds)
[06:55:27] <hayley> There's also the problem that IO devices (disks, network) are getting faster these days, but single-core performance is not getting much faster, so IO-bound applications aren't a great excuse.
[06:56:49] <hayley> ...and this all means that anyone claiming to solve concurrency by implicit locking (e.g. <https://glyph.twistedmatrix.com/2014/02/unyielding.html>) is lying through their teeth.
[07:02:28] <hayley> The example article exhibits some of those things where you look at it, and you can't help but scream "HOLY SHIT USE A LOCK", even with the first "non-concurrent" program.
[07:03:31] <hayley> Oh, and if you don't allow preemption of tasks, then you can easily blow out any latency standards if one task decides it doesn't feel like yielding, because it's busy doing other fun stuff. So it's beyond dumb.
[07:04:22] <mfiano> hayley: I have a video for you to watch and I'd like your thoughts
[07:04:29] <hayley> This would either be called "Concurre-ncy is not concurren-tly, from what I've heard" or "I'll `yield` to none!"
[07:04:44] <hayley> mfiano: Sure, I wasn't enjoying the rest of the day anyway.
[07:05:51] <mfiano> https://www.gdcvault.com/play/1022186/Parallelizing-the-Naughty-Dog-Engine
[07:05:53] -ixelp- GDC Vault - Parallelizing the Naughty Dog Engine Using Fibers
[07:08:37] * hayley skims
[07:09:01] <hayley> So they rolled their own BEAM (kidding) to avoid context switching latency?
[07:11:05] <hayley> ...and there is also thread-local allocation? Well, sure. Generally I would not pin tasks to cores, but as they know how long each task should take to run (roughly), that shouldn't hurt.
[07:11:19] * hayley doesn't have the time to watch it right away.
[07:11:46] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 245 seconds)
[07:12:34] <mfiano> no rush. im geaded to bed anyway
[07:12:43] <mfiano> headed*
[07:13:04] <hayley> Take care.
[07:15:56] <hayley> Well, by the existence of ancient r/programming threads, debunking that article would be pretty cheap. But it makes a point, I guess.
[07:17:23] *** Joins: Alfr (~Alfr@user/alfr)
[07:49:47] <pl> hayley: Naughty Dog has a history of doing very... High end PL things within constraints forced on them, like C++
[07:50:10] <pl> Which results with stuff like custom OS written for PS3 SPEs
[07:51:23] <pl> That said, fibers are these days pretty common in game development, partially because you need peculiar scheduling behaviours 
[07:59:33] <hayley> pl: Naughty Dog had the GOAL people too, right?
[08:02:12] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:03:08] <dave0> maw
[08:04:11] <hayley> It's also funny that the article I linked doesn't fix the concurrency bug at all, and they only go to say that the logging mechanism is bad. To make it yield-safe (I refuse to say safe in the presence of concurrency), you would need a lock. Guess what you would need to fix the code if it was running on OS or green threads?
[08:04:23] <hayley> Clearly you would need a semaphore instead. /s
[08:08:14] <moon-child> 'cow boob juice is great; but you know what would make it even better?  If we let it mould in a cave!'
[08:08:53] <hayley> What a cheesy thing to say.
[08:28:05] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:41:04] *** Joins: semz (~none@user/semz)
[09:02:24] <contrapunctus> ololo
[09:07:03] <hayley> https://www.youtube.com/watch?v=B_xFcQqmTcU
[09:07:04] -ixelp- [YTP] Billy Mays Gives Away Some Humanitarian AIDS - YouTube
[10:27:27] <hayley> https://www.youtube.com/watch?v=7_kIjBaxhO0
[10:27:28] -ixelp- Conversation (Remastered 2009) - YouTube
[10:53:07] <pjb> hayley: moon-child should know! His mother is made of it!
[11:03:18] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:28:08] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4)
[11:28:40] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4) (Remote host closed the connection)
[11:30:14] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4)
[11:39:37] <hayley> https://www.reddit.com/r/TalkingHeadCircleJerk/comments/qtgytj/balls_under_punches/
[11:39:38] -ixelp- balls under punches : TalkingHeadCircleJerk
[12:03:04] <sham1> Good morning
[12:04:31] <hayley> https://www.youtube.com/watch?v=RZJQ-JBHxWA
[12:04:31] -ixelp- Dazzle Ships 1-7 - YouTube
[12:26:47] *** Quits: phantomics (~phantomic@71-218-252-43.hlrn.qwest.net) (Quit: Ex-Chat)
[12:30:15] <contrapunctus> hayley: this is top quality lol https://www.reddit.com/r/LispMemes/comments/qnlpt6/common_lisp_and_other_tongues/
[12:30:16] -ixelp- Common Lisp and other tongues : LispMemes
[12:53:38] <pl> hayley: yes, Naughty Dog is the GOOL/GOAL studio, and at least for PS3 games they still used lisp if in lesser way (more GOOL than GOAL) 
[13:04:26] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[13:08:18] <shka> pl: naughty dog scripts games in scheme-like language up to this day
[13:11:54] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4) (Quit: Leaving)
[13:13:20] <shka> https://www.youtube.com/watch?v=Y7-OoXqNYgY
[13:13:20] -ixelp- Programming Context-Aware Dialogue in The Last of Us - YouTube
[13:13:36] <shka> for instance
[13:35:33] * hayley has working LC-3 to Lisp JIT, but there are way too many tests for updating flags.
[13:36:02] <shka> hayley: sorry, for asking, it is a silly question
[13:36:04] <hayley> Why can't I write not compiler code without missing the optimisations I'm going to write? Oh, wait, that is a compiler...
[13:36:09] <shka> but what are you working on anyway?
[13:36:48] <hayley> shka: Trying to make a LC-3 VM which is faster so that I can slow it back down with nested https://github.com/no-defun-allowed/lc3-in-lc3 instances.
[13:36:48] -ixelp- GitHub - no-defun-allowed/lc3-in-lc3: A metacircular LC3 implementation
[13:37:33] <shka> ok
[13:39:16] <shka> anybody have idea how i can gather stack traces in portable way?
[13:39:18] <shka> https://gitlab.common-lisp.net/dkochmanski/metering/-/blob/master/metering.cl
[13:39:40] <shka> i want to teach metering to gather enough data so i can use it for flamegraph visualization
[13:39:41] <hayley> Shinmera's dissect library?
[13:40:03] <hayley> So far my dumb compiler is only like 50% faster than the interpreter in C++, which is annoying.
[13:40:52] <shka> hayley: great!
[13:41:05] <shka> hayley: do you happen to know how quick dissect is?
[13:41:30] <shka> adding to much overhead to the profile is a problem
[13:41:47] <shka> i think that i don't even need the full call stack honestly
[13:41:51] <hayley> (the-cost-of-nothing:bench (dissect:capture-environment)) => 102.76 microseconds
[13:41:59] <shka> thanks
[13:42:21] <hayley> DISSECT:STACK is a bit faster, but not by much.
[13:42:50] <hayley> Also n.b. that printing stack objects is slow, because it looks up source information or something.
[13:43:09] <shka> maybe it would be enough to establish special variable around benchmarked functions
[13:44:37] * hayley also wonders why the instruction counter is dropping instructions.
[13:44:53] <shka> at the end of the day i just need to know how much time of foo is spent during bar
[13:46:03] *** Joins: Inline (~Inline@2a02:908:1252:7a80:b442:91f8:4666:206e)
[13:46:11] <shka> so a special variable with list representing stack would be fine
[13:46:38] <shka> when traced function is called, just cons another cell
[13:47:40] <semz> 𝕊 isn't in the BMP
[13:47:49] <semz> wait what
[13:47:55] <hayley> Aha, I put the (INCF INSTRUCTIONS) after the code, when I want it before, since the code can jump or bail out or whatever.
[13:48:00] <semz> oh god i was scrolled up by several hours
[13:48:15] <semz> and because it was at the top new messages scrolled it further down so the chat looked active
[13:50:05] <hayley> I wonder if feeding this code to ECL would help, given that the C compiler probably does GVN.
[13:50:40] <hayley> There are "only" 43 functions to compile anyway.
[13:56:14] <hayley> ECL is slower ):
[14:23:22] <shka> https://www.youtube.com/watch?v=yWxym6TdK_o
[14:23:23] -ixelp- Ian Can't Othais: 002 - YouTube
[14:23:56] <hayley> Well, it only took 90 billion instructions to run a 10 instruction program in LC-3 in LC-3 in LC-3 in LC-3 in LC-3.
[14:24:38] <pl> shka: oh, shiny. Didn't know they continued in Last of Us, cause I did see mentions of starting completely afresh
[14:25:07] <pl> and no one is safe from Regression to the Mean
[14:26:50] <shka> yeah, but for scripting it is fine
[14:27:26] <shka> especially since it allows you to have those custom macros which save you a lot of time in the long run
[14:28:03] <shka> because, well there is a metric tonne of scripts in game such as this
[14:28:23] <shka> and they can have annoying bugs
[14:28:42] <shka> so if can even slightly optimize this part of development, that's great
[14:36:10] *** Joins: treflip (~user@95.79.32.99)
[14:37:44] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:45:38] <pl> In the PS3 era they also wrote a lot of tooling in Racket 
[14:45:48] <pl> As in, tools used by dev team 
[14:45:55] <pl> Not pieces of engine 
[14:54:48] <hayley> http://www.ai.sri.com/~delacaze/alu-site/alu/humor/alices-lispm.html
[14:54:49] -ixelp- The Association of Lisp Users -- MIT's AI Lab
[15:13:10] <pl> The last chorus gets s bit bittersweet funny around, hmm, 1995
[15:14:43] <pl> Apparently in quite many places you could pretty much waltz in, unchallenged, and boot a lispm to hack around 
[15:39:56] * hayley uploaded an image: (440KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/efNkfMqbQjEULKUfdEDwMmSB/rip-bozo2.png >
[15:42:58] *** Quits: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi) (Remote host closed the connection)
[15:43:24] *** Joins: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[15:54:33] *** Quits: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[15:56:15] <shka> https://i.imgur.com/GGeBGQo.png
[15:57:13] <shka> i finally have WORKING, PORTABLE flamegraphs
[15:57:16] <shka> god damnit
[15:58:17] <edgar-rft> CL vs Scheme would make an even better flamegraph :-)
[16:08:54] <shka> well, especially that this one is fucked
[16:08:56] <shka> :D
[16:09:22] <shka> this one is correct https://i.imgur.com/eumqVXz.png
[16:10:04] <shka> gilberth: as you can see, converting floats really is a the most time consuming part :P
[16:10:20] <shka> copying strings with subseq is significantly quicker
[16:11:00] <shka> also, i think that this has no correction for the profiling overhead applied
[16:28:38] *** Quits: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:28:59] *** Joins: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[16:30:56] *** Quits: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi) (Remote host closed the connection)
[16:31:08] *** Joins: retropikzel_ (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[16:47:27] *** Joins: retropikzel__ (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[16:47:37] *** Quits: retropikzel_ (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi) (Remote host closed the connection)
[16:57:45] *** Joins: Nselm (~Nselm@p200300d56f24d76e1321613e2c885dc5.dip0.t-ipconnect.de)
[17:03:36] *** Quits: retropikzel__ (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:06:26] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[17:08:50] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[18:09:02] *** Joins: makomo (~makomo@user/makomo)
[19:05:34] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[19:07:01] *** Joins: johnjay (~pi@192.142.100.50)
[19:22:21] *** Quits: Nselm (~Nselm@p200300d56f24d76e1321613e2c885dc5.dip0.t-ipconnect.de) (Quit: Client closed)
[19:26:44] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[19:30:29] *** Joins: johnjay (~pi@192.142.100.50)
[19:32:33] *** Joins: phantomics (~phantomic@71-218-252-43.hlrn.qwest.net)
[19:40:10] *** Joins: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de)
[19:42:35] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:45:24] *** Joins: robin__ (~robin@user/terpri)
[19:46:35] *** Quits: robin (~robin@user/terpri) (Ping timeout: 264 seconds)
[19:49:10] *** Quits: robin__ (~robin@user/terpri) (Client Quit)
[19:49:27] *** Joins: robin (~robin@user/terpri)
[19:58:01] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 245 seconds)
[20:00:13] *** Joins: johnjay (~pi@192.142.100.50)
[20:00:24] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[20:03:34] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[20:05:11] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 264 seconds)
[20:06:28] *** Joins: johnjay (~pi@192.142.100.50)
[20:41:47] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[20:49:10] <selwyn> https://nitter.net/pic/media%2FEGsnkzzX4AEjK68.png%3Fname%3Dorig
[20:55:46] <selwyn> just got a german ad in twitch for the first time ever
[20:58:51] <ck_> what did the ad know, and when did it know it
[21:01:02] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[21:02:24] <selwyn> it was for a game
[21:02:29] <selwyn> couldn't understand much
[21:02:54] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[21:19:06] <ck_> listening to advertisements in a foreign language can be pretty weird.. I noticed this with the asl starcraft streams and their korean ads
[21:19:17] <selwyn> the american ones are weird for me lol
[21:19:44] <ck_> don't know when I last saw one of those
[21:20:01] <ck_> ASK YOUR DOCTOR FOR *PRODUCT*
[21:20:05] <selwyn> i often watch them on soccer streams
[21:20:08] <selwyn> ck: indeed
[21:21:17] <selwyn> they also talk down to the audience a lot more imo
[21:37:13] <ck_> well it is always easier to spot pathologies in societies other than your own
[21:50:19] <selwyn> managed to break mingw64 smh
[21:51:26] <ck_> it's over, police are on their way now
[21:51:49] <ck_> you wouldn't download a compiler
[21:57:25] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[22:03:12] <copec> I want to make something flat like this as a portable device to program with when I'm just sitting thinking https://pocket.popcorncomputer.com/#products
[22:03:12] -ixelp- Pocket Popcorn Computer
[22:06:06] <mfiano> I need a GPT expert
[22:07:06] <sham1> selwyn: hoe
[22:07:07] <sham1> How
[22:07:33] <sham1> I love smartphones and touchscreen typing so much…
[22:07:42] <contrapunctus> lmao
[22:08:35] <contrapunctus> mfiano: partitioning a disk?
[22:08:41] <mfiano> Actually no
[22:09:16] <mfiano> I want to use `dd` to backup the first N bytes of my disk, where N is just the partition layout. I backed up my partitions themselves at the filesystem level with `tar`, and now want to backup the layout of the disk only.
[22:10:37] <copec> just use sgdisk
[22:10:53] <contrapunctus> Huh. I thought you meant OpenGPT and tried to make a funny. 😅
[22:11:45] <copec> ie sgdisk --backup=<file> <device>
[22:11:56] <selwyn> shaml: i tried to update pacman and then it didn't work anymore
[22:12:31] <selwyn> bitterly regret not following gilberth's advice to not update anything
[22:12:42] <selwyn> would have been totally the right call here, i knew things weren't that stable
[22:13:30] <mfiano> copec: Thanks. What is the way to restore?
[22:14:04] <selwyn> the shell won't open, nothing will
[22:16:58] <copec> sgdisk --load-backup=<backup file> <new device>
[22:18:04] <mfiano> copec: The manpage says recovery requires to know the distinction between the GPT headers and the partition tables. I am lost here...is it going to restore both?
[22:21:46] <copec> Yes, although I've only used it for GPT
[22:21:55] <copec> It restores the labels and partitions
[22:22:08] <copec> not the data, obviously
[22:22:30] <sham1> selwyn: well now you know for the future not to update
[22:22:47] <selwyn> i mean, i am not opposed to updating in general
[22:22:52] <selwyn> but perhaps i should be
[22:22:56] <mfiano> Ok. So I dd'd the EFI partition table, used tar to backup my root and home partitions, and sgdisk to backup the layout of a GPT disk. This should be all I need to do a full recovery yes?
[22:23:33] <gilberth> Good morning #lispcafe! Good morning selwyn!
[22:24:11] <selwyn> good morning gilberth
[22:24:26] <copec> mfiano, unless there is some variation I don't know about, that is everything
[22:24:32] <mfiano> Thank you!
[22:25:05] <gilberth> selwyn: So you were successful in breaking your system?
[22:25:10] <selwyn> very much so
[22:25:29] <selwyn> kind of have better things to do than to fix it right now
[22:25:40] <gilberth> And no way to restore the previous state?
[22:25:43] <selwyn> i wanted spacemacs on windows with native compilation and modules
[22:25:47] <selwyn> gilberth: not as far as i can see
[22:26:15] <gilberth> Bad. I pity you.
[22:26:16] <selwyn> honestly, this is the hardest part of development on windows
[22:26:41] <selwyn> you really can do quite a lot, but you run the risk of catastrophically breaking everything due to the various impedance mismatches
[22:26:47] <selwyn> you need to know when to stop
[22:26:56] <selwyn> i got greedy :D
[22:27:29] <gilberth> Which is why I steer clear of Windows. When I use Windows, it's (1) inside a VM and (2) Used to launch a game.
[22:27:56] <ck_> selwyn: can you log in in "safe mode"?
[22:28:00] <ck_> or as a different user
[22:28:36] <selwyn> probably but it won't help
[22:28:41] <selwyn> msys2 is broken
[22:29:08] <gilberth> What's with this Linux subsystem of Windows, I keep reading about? Is that any good or just as unusable as the POSIX subsystem, if it's still there. I'm a Windows noob.
[22:29:17] <selwyn> oh i could use that actually
[22:30:34] <sham1> WSL includes a proper Linux kernel under hypervision
[22:30:50] <selwyn> wsl is broken as well
[22:30:54] <selwyn> lol
[22:31:18] <copec> mfiano, you could dd the whole disk and compress with pigz or something for speed, and mounting it loopback can be made easy with kpartx
[22:31:32] <copec> (of course you have to uncompress it to do that)
[22:32:33] <mfiano> I considered that, but there are lots of directories within my partitions that I don't want backed up, as they are huge and cron job backs them up off-site
[22:33:33] <mfiano> Also, I may want to restore to a differently-sized disk later. I'm not sure yet
[22:34:29] <copec> ah, okay
[22:37:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:b442:91f8:4666:206e) (Ping timeout: 245 seconds)
[22:42:56] <shka> https://ambrevar.xyz/lisp-repl-shell/
[23:17:16] <selwyn> https://nitter.net/PoliticsForAlI/status/1459633343184654350#m
[23:18:10] <ck_> didn't work with the #m at the end for me
[23:18:50] <selwyn> horny posting day 2
[23:18:57] <contrapunctus> So I don't know a whole lot about web development, and am looking to make an offline-first web app (hopefully/eventually in Common Lisp, using Parenscript)...and I'm not sure what these frameworks do, or whether they are useful to this project. Any pointers? https://github.com/CodyReichert/awesome-cl#web-frameworks
[23:18:58] -ixelp- GitHub - CodyReichert/awesome-cl: A curated list of awesome Common Lisp frameworks, libraries and other shiny stuff.
[23:19:17] <selwyn> whats offline first? like electron?
[23:19:19] <ck_> selwyn: the quote reads like bad song lyrics. https://www.youtube.com/watch?v=9aofoBrFNdg
[23:19:19] -ixelp- Biz Markie - Just A Friend (Official Video) - YouTube
[23:20:08] <contrapunctus> selwyn: just that it should work offline as well as online. But it runs in any browser, rather than bundling Chromium.
[23:20:41] <selwyn> hm
[23:21:12] <selwyn> afaik offline-first is difficult without actually having common lisp in the web page
[23:21:17] <selwyn> which we can't do perfectly yet
[23:22:45] <contrapunctus> selwyn: "common lisp in the web page"?
[23:23:00] <selwyn> an implementation running in the browser
[23:23:03] <contrapunctus> huh
[23:23:17] <contrapunctus> not even with Parenscript?
[23:24:38] <selwyn> not sure how complete it is
[23:27:29] <contrapunctus> ah well, if it doesn't work out I'll try making clients using EQL5-Android.
[23:28:49] <contrapunctus> huh, hh-web generates JS too, apparently
[23:31:55] <shka> there was talk about doing web stuff in lisp...
[23:32:19] <selwyn> i like the idea of using scheme for this
[23:32:27] <selwyn> i don't think common lisp is ultimately that suitable for the browser
[23:32:42] <selwyn> beyond the various implementation issues
[23:32:43] <shka> https://www.youtube.com/watch?v=HGuTqsVh59w
[23:32:43] -ixelp- JACL: A Common Lisp for Developing Single Page Web Applications - YouTube
[23:33:06] <selwyn> jacl is good, but it gives up the numeric system in favour of javascript numbers
[23:33:09] <selwyn> which is a case in point
[23:33:15] <selwyn> it can't be compliant
[23:33:24] <shka> https://www.youtube.com/watch?v=rTlBua7mfao
[23:33:24] -ixelp- CORONER-Masked Jackal - YouTube
[23:38:27] <shka> it is perhaps of lesser concern sometimes
[23:39:03] <selwyn> i had some idea to make an online text based rpg
[23:39:34] <selwyn> it would probably use scheme on the client and common lisp in the server
[23:51:47] <random-nick> parenscript is just a sexp syntax for javascript
[23:52:17] <random-nick> jacl and jscl are actually cl on js
[23:52:30] <random-nick> but they're both partial
