[00:01:05] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:02:46] *** Quits: iomari891 (~iomari891@129.205.113.2) (Ping timeout: 268 seconds)
[00:06:42] *** Joins: stemid (~nocturnal@i-lands.anark.ist)
[00:09:20] *** Quits: op0x0f05 (uid512716@id-512716.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[00:09:43] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[00:11:10] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[00:11:24] *** Joins: yetoo__ (~yetoo@user/yetoo)
[00:14:55] *** Parts: stemid (~nocturnal@i-lands.anark.ist) ()
[00:16:51] *** Quits: totenkoph (~scythe@user/totenkoph) (Ping timeout: 276 seconds)
[00:19:07] <jetchisel> l
[00:19:21] <jetchisel> woops
[00:19:41] *** Joins: emanuele6 (~emanuele6@37.160.39.209)
[00:19:59] *** Quits: emanuele6 (~emanuele6@37.160.39.209) (Changing host)
[00:19:59] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[00:20:06] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 256 seconds)
[00:20:59] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Remote host closed the connection)
[00:23:07] *** Quits: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319) (Ping timeout: 268 seconds)
[00:23:36] <cryptonector> I wish this sort of thing worked: IFS=, s="${b[*]}"
[00:23:39] <cryptonector> but it doesn't
[00:23:40] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[00:23:45] <cryptonector> IFS is very finicky
[00:23:49] <cryptonector> is there a better way?
[00:23:49] <greycat> !faq 104
[00:23:49] <greybot> https://mywiki.wooledge.org/BashFAQ/104 -- Why doesn't foo=bar echo "$foo" print bar?
[00:24:16] <greycat> lambda() { local IFS=,; s=$"{b[*]}"; }; lambda
[00:24:17] <cryptonector> greycat: I don't think that FAQ matches
[00:24:30] <greycat> you read very quickly!  but not in depth.
[00:25:07] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[00:25:09] <cryptonector> I didn't read it at all :)
[00:25:12] <koala_man> # b=(a b c); IFS=, s="${b[*]}"; echo "$s"
[00:25:14] <shbot> koala_man: a,b,c
[00:25:18] <koala_man> what doesn't work about it?
[00:25:30] <greycat> as koala_man is demonstrating, it *does* work, but it also makes the assignment to IFS permanent
[00:26:07] <greycat> the function wrapper works around that; or you can assign IFS back to its default value at the end
[00:28:19] <thebombzen> bash inherits IFS from the environment, does it not?
[00:28:35] <thebombzen> could a malicious attacker export IFS=something_bad before calling your script?
[00:29:02] *** Joins: xiao (~xiao@37.171.44.22)
[00:29:51] <geirha> it doesn't
[00:30:05] <geirha> dash does though, or at least did
[00:30:27] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:30:29] <thebombzen> ah, so in that case a pure shell script cannot assume it does or doesn't, only a bash script?
[00:30:36] <geirha> # IFS=x dash -c 'echo "$IFS"'
[00:30:38] <shbot> geirha: x
[00:30:41] <geirha> # IFS=x bash -c 'echo "$IFS"'
[00:30:42] <shbot> geirha: no output
[00:30:51] <cryptonector> IFS is a lot more finicky that you seem to think, @greycat
[00:30:58] *** Quits: n4dir (~user@i577BC8D5.versanet.de) (Remote host closed the connection)
[00:31:14] <cryptonector> does not set IFS permanently: b=(a b c); IFS=, s="${b[*]}"; echo "$s"
[00:31:15] <geirha> you can start your script with  unset -v IFS  to be sure it has its default value
[00:31:15] <emanuele6> cryptonector: what are you talking about?
[00:31:29] <thebombzen> Is there a way to make this safe beyond putting "unset IFS" at the top of a #!/bin/sh script?
[00:31:31] <cryptonector> sets IFS permanently: b=(a b c); IFS=, s="${b[*]}"; echo "$s"; echo "IFS=$IFS"
[00:32:12] <thebombzen> or is a weird IFS something that is not a problem provided you properly quote things?
[00:32:32] *** Joins: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854)
[00:33:03] <emanuele6> everytime i need wordsplitting, i set IFS. it's weird not to do it.
[00:33:11] *** Joins: daidoji (~daidoji@104-52-250-5.lightspeed.gnvlsc.sbcglobal.net)
[00:33:15] *** Joins: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319)
[00:33:33] <emanuele6> when i need to use anything IFS-related i mean, i never use wordslitting
[00:33:42] <greycat> Most people just assume IFS has its default value unless they've set it themselves.
[00:33:58] <greycat> Therefore, changing IFS permanently can have unforeseen consequences.
[00:34:07] <e36freak> which is generally a fair/reasonable assumption
[00:34:11] <thebombzen> how often do you need to do wordsplitting in bash, rather than relying on "${my_array[@]}" constructs
[00:34:27] <greycat> As seldom as possible.  But other people may not follow best practices.
[00:34:28] *** Joins: mike18 (~geri@217-149-162-127.nat.highway.telekom.at)
[00:34:39] *** Joins: foo (~foo@user/foo/x-8763512)
[00:34:46] <foo> Can someone help with this Makefile recipe? https://bpa.st/QHJQ
[00:34:49] <foo> The variable replacement doesn't seem to work properly, hmm.
[00:34:51] <greycat> EVERY DAY in this channel we get someone who's got a "space-separated list of strings" in a string variable.
[00:35:14] <mike18> hi i have filenames in a directory which look like: api#v2.0#data#8769854.json     how can i extract the ids from all filenames? in this case 8769854
[00:35:41] <thebombzen> If you *don't* do any wordsplitting, and you always quote something, can a maliciously constructed IFS possibly break your script?
[00:35:46] <greycat> tmp=${filename##*#} output=${tmp%.json}
[00:35:46] <phy1729> !make > foo
[00:35:47] <greybot> foo: Make is not bash, and Makefiles are not scripts. Ask in ##workingset and read http://www.gnu.org/software/make/manual/ or the help documents of your version of make.
[00:35:56] <phy1729> But you probably just need to double the $
[00:36:03] <foo> phy1729: thank you, I wasn't sure where to ask this question.
[00:36:09] <thebombzen> like is there a reason to run unset IFS at the top of every #!/bin/sh script *just in case*
[00:36:16] <thebombzen> provided that you coded the rest of the script properly?
[00:36:31] <mike18> greycat: i currently call: ls | grep "api#v2.0#strat#" |
[00:36:32] <cryptonector> I mean, sometimes you need wordsplitting
[00:36:38] <greycat> mike18: ewwww.
[00:36:41] <thebombzen> in the event you don't need to do wordsplitting, I mean.
[00:36:44] <cryptonector> but in this case I'm joining
[00:36:50] *** Joins: pyeverything (~pyeveryth@goku.bu.edu)
[00:36:51] <thebombzen> If you ever *need* to you can set it explicitly
[00:37:15] <cryptonector> wordsplitting is such a rare thing that a very common complaint is that bash (and all sh derivatives) "do it by default"
[00:37:17] <earendel> since you can only pass strings between processes you're going to need to split quite often. no?
[00:37:22] <mike18> greycat: how to call it than?
[00:37:22] <pyeverything> hi do you know why the .bash script inside my .slurm script that I run it with $ sbatch myjob.slurm is not being run? https://pastebin.com/raw/EsLcBAf2
[00:37:28] <greycat> mike18: for f in api*.json; do id=${f##*#} id=${id%.json}; ...; done
[00:37:42] <mike18> and ls?
[00:37:48] <greycat> !ls
[00:37:48] <greybot> DO NOT USE ls' output for anything. ls is a tool for interactively looking at directory metadata. Any attempts at parsing ls' output with code are broken. Globs are much more simple AND correct: ''for file in *.txt''. Read http://mywiki.wooledge.org/ParsingLs
[00:37:51] <thebombzen> I mean, that's fine, but my question was if you *aren't* wordsplitting, and you code the rest of your script properly, can a maliciously-constructed IFS break it anyway?
[00:38:20] <cryptonector> it won't wordsplit
[00:38:39] <cryptonector> for f in "$prefix"-*; do ...; done
[00:38:40] <greycat> IFS is used by read, by word splitting, and by [*]
[00:38:42] <mike18> greycat: what other way to get filnames from dir?
[00:38:45] *** Quits: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319) (Ping timeout: 268 seconds)
[00:38:48] <greycat> mike18: for f in api*.json; do id=${f##*#} id=${id%.json}; ...; done
[00:38:54] <mike18> im on osx
[00:38:58] <mike18> seems to fail
[00:38:59] <thebombzen> mike18: well, what are you trying to do in this case? I figure you're not *just* printing the filenames
[00:39:09] <cryptonector> > im on osx
[00:39:13] <cryptonector> that's the failure
[00:39:18] * cryptonector ducks
[00:39:22] <greycat> # for f in /*; do printf '<%s> ' "$f"; done
[00:39:23] <shbot> greycat: </bin> </dev> </etc> </init> </lib> </lib64> </proc> </root> </tmp> </usr> </var>
[00:39:24] <earnestly> mike18: It's posix sh, certainly covered by bash
[00:39:34] <earnestly> certainly by the bash that comes with macos
[00:39:50] <earnestly> mike18: Unless you're doing this interactively where your shell is zsh (in which case it should still work)
[00:39:58] *** Joins: greta (uid516789@id-516789.lymington.irccloud.com)
[00:40:03] <thebombzen> you can use globs in a script like *.json, that's recommended since it expands the way you want
[00:40:08] <earnestly> (Although zsh might be treating the last # as a comment)
[00:40:10] <thebombzen> ls, by itself, produces relatively unreliable output
[00:40:19] <thebombzen> and as a result you should not rely on it
[00:41:12] <thebombzen> you can try something like: for my_file in "api#v2.0#strat#"*; do printf '%s\n' "$my_file; done
[00:41:15] <thebombzen> and see what happens
[00:41:32] <thebombzen> for my_file in "api#v2.0#strat#"*; do printf '%s\n' "$my_file"; done
[00:41:37] <thebombzen> er, made a typo, use this one ^
[00:42:29] *** Parts: foo (~foo@user/foo/x-8763512) ()
[00:42:37] <mike18> greycat: ok - how can i add the ids now to a csv list?
[00:42:49] <emanuele6> earnestly: it can be fixed by id=${f##*'#'}
[00:43:08] <emanuele6> or by not using zsh :)
[00:43:22] <thebombzen> mike18: what do you mean by "add the IDs to a list"
[00:43:31] <mike18> 123,22332,1223
[00:43:33] <earendel> # for f in (a b c); do printf '<%s> ' "$f"; done
[00:43:34] <shbot> earendel: bash: syntax error near unexpected token `('
[00:43:36] <mike18> some output like that
[00:43:38] *** Quits: magla (~gelignite@55d4261d.access.ecotel.net) (Quit: Stay safe!)
[00:43:47] <thebombzen> well CSV is just, everything separated by commas
[00:43:52] <emanuele6> # for f in a b c; do printf '<%s> ' "$f"; done # earendel
[00:43:53] <shbot> emanuele6: <a> <b> <c>
[00:43:55] <thebombzen> just print it with a comma at the end
[00:43:58] <earnestly> emanuele6: Or \#, yeah.  It's a bit annoying but it's a little more consistent
[00:44:21] <greycat> Fair, I wasn't sure if you needed to quote the final # in ##*#
[00:44:28] <thebombzen> $ for item in /*; do printf '%s,' "$item"; done; echo
[00:44:37] <thebombzen> #  for item in /*; do printf '%s,' "$item"; done; echo
[00:44:39] <shbot> thebombzen: /bin,/dev,/etc,/init,/lib,/lib64,/proc,/root,/tmp,/usr,/var,
[00:44:45] <thebombzen> for example
[00:44:46] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[00:44:48] <thebombzen> just print it with a comma
[00:45:12] <earendel> emanuele6: ok. thanks.  but for if won't use IFS for splitting right?
[00:45:39] <greycat> 'for' does not use iFS, but if you did   for f in $list   then $list would.
[00:45:58] <greycat> IFS is used by read, by word splitting, and by [*]
[00:46:04] <emanuele6> the only PE is $f and it quoted so there is nothing that uses IFS here
[00:46:21] <mike18> thebombzen: an output like that: 123,22332,1223
[00:46:23] *** Joins: yetoo__ (~yetoo@user/yetoo)
[00:46:40] <thebombzen> yes, so take the things you want and print them with a comma at the end, as I demonstrated
[00:46:43] <greycat> so store the IDs in an array, and then you can use [*] to join it up
[00:47:11] <greycat> or if you wish, you could keep appending id, to a string, and then remove , at the end
[00:47:30] <e36freak> or start with the first value as is, and addpend each with a comma in front of it
[00:47:38] <greycat> most people would use the array, on the basis that you are probably going to want the list of IDs in a usable form at some point
[00:47:58] <earendel> # if [[ "a" in a b c]]; do echo "OK"; done;
[00:47:59] <shbot> earendel: bash: conditional binary operator expected
[00:47:59] <shbot> earendel: bash: syntax error near `in'
[00:48:08] <greycat> earendel: you can't just make up operators
[00:48:32] <greycat> if [[ $a = [abc] ]]; then ...
[00:48:39] <greycat> since these are single characters
[00:48:41] <earendel> greycat: i thought it might be one, as you explicitely said "for" .. not "for in"
[00:49:00] <greycat> "in" is a special part of the syntax of 'for' and 'case'
[00:49:00] <earendel> hmhm
[00:49:09] <greycat> not an operator in the [[ command
[00:49:09] <earendel> okay.
[00:50:28] <earendel> ![[
[00:50:28] <greybot> [[ is a bash keyword similar to (but more powerful than) the [ command. See <http://mywiki.wooledge.org/BashFAQ/031> and <http://mywiki.wooledge.org/BashGuide/TestsAndConditionals>. Unless you're writing for POSIX sh, we recommend [[.
[00:51:43] *** Joins: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319)
[00:52:00] <mike18> thebombzen: an output like that: 123,22332,1223 how to get that?
[00:52:12] <thebombzen> I'm pretty sure I've explained it twice now
[00:52:22] <thebombzen> print each individual component abut with a comma at the end
[00:52:37] <mike18> in the same line
[00:52:48] <greycat> # touch api#123.json api#22332.json api#1223.json;  for f in api*.json; do id=${f##*\#} id=${id%.json}; ids+=("$id"); done; IFS=,; echo "${ids[*]}"
[00:52:49] <thebombzen> my answer is the same
[00:52:49] <mike18> right now the ids are printed line by line
[00:52:51] <shbot> greycat: 1223,123,22332
[00:52:54] <thebombzen> stop printing a newline then
[00:53:07] *** Quits: ninjabuffet (~ninjabuff@user/ninjabuffet) (Ping timeout: 252 seconds)
[00:53:14] <emanuele6> if (for el in "${arr[@]}"; do [[ $var == "$el" ]] && exit 0; done; exit 1); then ...
[00:53:41] <greycat> what
[00:53:55] <greycat> are you simply trying to do a membership test?
[00:54:23] <earendel> one can do several assignments in a line without separating each with a semicolon?
[00:54:28] <emanuele6> i'm guessing that was the intent of [[ "a" in a b c ]]
[00:54:34] <earendel> right. sure.
[00:54:35] <thebombzen> # touch api#123.json api#22332.json api#1223.json; for f in api*.json; do id=${f##*\#} id=${id%.json}; printf '%s,' "$id"; done
[00:54:36] <shbot> thebombzen: 1223,123,22332,
[00:54:39] <thebombzen> this would be one way to do it
[00:54:46] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[00:54:54] *** Joins: yetoo_ (~yetoo@user/yetoo)
[00:54:56] <earendel> i remember now. its like for passing vars to subscripts .. ok.
[00:55:10] <greycat> that has an extra , at the end which I'm sure will cause another 45 minutes of discussion, never mind that it was alerady discussed
[00:55:12] <earendel> subshells.
[00:55:49] <thebombzen> I guess I gotta handhold
[00:56:25] <greycat> earendel: that's why    IFS=, s="${join[*]}"     leaves IFS permanently set.
[00:56:40] <earendel> hm. ah.
[00:56:52] <greycat> it's a stream of simple string assignments with no command after them, so they all go into effect for the current shell, permanently
[00:57:04] *** Joins: zebrag (~chris@user/zebrag)
[00:57:08] <thebombzen> graycat only thing I'm not sure about your solution is using "echo"
[00:57:14] <earendel> i dig it.
[00:57:34] *** Quits: yetoo__ (~yetoo@user/yetoo) (Ping timeout: 260 seconds)
[00:57:39] <emanuele6> this can be used to temporarly set IFS in bash, but it has some problems: IFS=, eval 's="${join[*]}"'
[00:57:47] <greycat> yes, that's another variant
[00:57:47] <thebombzen> I was told here to use printf %s\n "$foo" instead to protect against the case when "$foo" might be something like "-e"
[00:58:14] <greycat> thebombzen: *sigh* yes, fine.  I was trying to NOT INTRODUCE THAT MANY FUCKING THINGS THAT WOULD NEED EXPLAINING ALL AT ONCE.
[00:58:22] <thebombzen> ah, good point
[00:58:37] <greycat> The guy asking the questions was already confused enough.
[00:58:47] <thebombzen> shrug, makes sense
[00:59:30] *** Quits: thebombzen (~thebombze@587232703.guest.umich.net) (Quit: Quit)
[01:02:24] <cryptonector> greycat: IFS=, s="${join[*]}"     does not leave IFS permanently set -- I just tried it.  However,  IFS=, s="${join[*]}"; echo "$s"   does
[01:03:19] <cryptonector> oh, wait, it does, but not to ,
[01:03:40] *** Quits: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319) (Ping timeout: 240 seconds)
[01:03:48] <geirha> # IFS=, s="${join[*]}"; declare -p IFS
[01:03:49] <shbot> geirha: declare -- IFS=","
[01:04:16] <geirha> I think your tests must be wrong
[01:04:35] <cryptonector> https://pastebin.com/TAVvGA2c
[01:04:35] <pasteban> Paste is available without ads on https://pastebin.com/raw/TAVvGA2c
[01:05:19] <emanuele6> IFS is "," and wordsplitting occurs
[01:05:23] <geirha> you forgot to quote "${IFS@Q}"
[01:05:33] <cryptonector> ah, d'oh
[01:05:51] <cryptonector> but still
[01:05:56] <emanuele6> still what?
[01:06:24] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[01:06:30] *** Joins: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319)
[01:06:39] <cryptonector> oh, I see
[01:06:40] <cryptonector> nvm
[01:06:49] <emanuele6> ${IFS@Q} is ',' and `echo ${IFS@Q}' expands to echo \' \'
[01:07:06] <cryptonector> yes, a very very funny interaction
[01:07:21] <emanuele6> !qefs
[01:07:22] <greybot> "$Quote" "$Every" "$Fucking" "$Substitution"
[01:07:47] <cryptonector> I normally do...
[01:10:25] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Client Quit)
[01:12:03] *** Quits: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319) (Ping timeout: 268 seconds)
[01:12:35] *** Quits: docmax (~docmax@dynamic-077-008-245-099.77.8.pool.telefonica.de) (Remote host closed the connection)
[01:12:55] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 252 seconds)
[01:17:56] *** Joins: Crescendo (~Crescendo@user/crescendo)
[01:19:45] <mike18> for f in api#v2.0#strat#[0-9]{7}.json; do ... how to write the correct regex?
[01:20:06] <earnestly> mike18: It's a glob, not regex
[01:20:44] <greycat> You can't do {7} in globs, not even in extglobs.
[01:21:01] <earnestly> You'd have to specify [0-9] 7 times
[01:21:04] <greycat> You're making it too complex for no reason.  Just use * there.
[01:21:13] <earnestly> Since [0-9] is a glob, but yes, too complex
[01:22:02] <greycat> If for some reason you have files where the ID would end up with the wrong number of digits, you can catch that at the end before you add that ID to the list.
[01:22:58] <cryptonector> you can use extglob for some things
[01:23:11] <cryptonector> !extglob
[01:23:12] <greybot> "Extended globs" (shopt -s extglob) allow you to say things like "all files that do not end in .jpg". See http://mywiki.wooledge.org/glob#extglob
[01:23:22] <cryptonector> which are very nice
[01:24:25] *** Joins: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319)
[01:25:35] *** Joins: besnn (~besnn@user/besnn)
[01:25:50] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[01:26:23] <greycat> They're quite useful, but they don't have {7} or similar syntax.
[01:26:48] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Read error: Connection reset by peer)
[01:28:41] *** Quits: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it) (Remote host closed the connection)
[01:29:18] *** Quits: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319) (Ping timeout: 260 seconds)
[01:30:33] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 268 seconds)
[01:30:35] *** Joins: timj1 (~timj@user/timj)
[01:31:07] *** Quits: timj (~timj@user/timj) (Quit: Leaving.)
[01:32:42] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[01:32:59] *** Joins: emanuele6 (~emanuele6@37.160.39.209)
[01:32:59] *** Quits: emanuele6 (~emanuele6@37.160.39.209) (Changing host)
[01:32:59] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[01:33:56] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:35:37] *** Quits: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9) (Ping timeout: 252 seconds)
[01:36:07] *** Joins: vysn (~vysn@user/vysn)
[01:36:09] *** Joins: ninjabuffet (~ninjabuff@user/ninjabuffet)
[01:36:44] <cryptonector> indeed
[01:37:44] *** Quits: chenxuezhao (~chenxuezh@120.244.238.69) (Ping timeout: 268 seconds)
[01:40:13] *** Joins: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319)
[01:42:47] *** Joins: zouhair (~zouhair@lnsm1-montreal02-142-119-22-97.internet.virginmobile.ca)
[01:44:19] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[01:45:11] *** Joins: alguien (~alguien@user/alguien)
[01:46:34] *** Joins: archer (~archer@141.226.61.61)
[01:46:46] <archer> so this is the new freenode
[01:47:31] *** Joins: zeedo (~zeedo@cpc157903-grth13-2-0-cust152.16-4.cable.virginm.net)
[01:48:13] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[01:48:43] *** Joins: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9)
[01:50:21] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[01:50:33] <jetchisel> This liberaaaaaahhhhh!
[01:51:06] <archer> i still muted on vim ? wtf
[01:51:12] <archer> dont even remember why
[01:51:53] *** Joins: Steeve (~steve@user/steeve)
[01:52:29] <emanuele6> !nabs
[01:52:33] <emanuele6> !nabq
[01:52:33] <greybot> Not a #bash question. We're no experts in that software or OS; consider asking the channel or mailing list with experts on that topic (eg. ##linux #openssh #ubuntu #zsh #systemd or PM alis with "list keyword" to search for channels).
[01:54:19] *** Quits: archer (~archer@141.226.61.61) (Quit: WeeChat 3.2)
[01:54:39] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[01:55:05] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[01:55:34] *** Joins: extern (~archer@141.226.61.61)
[01:57:47] *** Quits: extern (~archer@141.226.61.61) (Client Quit)
[01:57:55] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:58:06] *** Joins: extern (~archer@141.226.61.61)
[01:58:27] <alzgh> hello, I'm trying to create an alias for `dict` adding `more` to it so I can page on long outputs.
[01:58:39] <greycat> use a function, not an alias
[01:58:43] <alzgh> problem is that `dict` takes an argument.
[01:58:46] <alzgh> Oh
[01:58:50] <greycat> d() { dict "$@" | more; }
[01:58:55] <alzgh> that makes sense
[01:58:59] <yitz> more?
[01:59:29] <alzgh> God, you guys have done this stuff so many times I say 'a' and you know 'z' :D
[01:59:44] <alzgh> yitz: yes. For paging the output.
[01:59:51] <alzgh> Is there a better option?
[02:00:01] <yitz> "$PAGER" or less
[02:00:04] <greycat> most of us probably use less
[02:00:37] <alzgh> OK, thank you. Yeah, probably "$PAGER" is best, and going to see what that is.
[02:00:58] <greycat> ${PAGER:-more} or something might even be advisable
[02:01:10] *** Quits: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319) (Ping timeout: 268 seconds)
[02:01:14] <alzgh> Yes, to have a fallback for when it isn't set.
[02:01:23] <alzgh> I have seen this with EDITOR
[02:01:36] <alzgh> stuff is starting to make sense
[02:01:50] <alzgh> thanks again
[02:02:00] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[02:02:41] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:02:43] <cryptonector> ${PAGER:-less}
[02:03:01] <emanuele6> cryptonector: why?
[02:03:05] <mike18> earnestly: when i dont use [0-9] it would match some other files as well which should not be in
[02:03:12] <emanuele6> less(1) is not portable
[02:03:23] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[02:03:48] <djph> and more is?
[02:04:04] <yitz> Huh. POSIX spec lists more
[02:04:10] <yitz> TIL
[02:04:18] <djph> yitz: heh, me too
[02:04:24] <ede> some use most
[02:04:30] <cryptonector> emanuele6: strongly held preference; less is available everywhere I go
[02:04:52] <djph> ede: and some use emacs, but that doesn't mean one "should" :D
[02:05:00] <jetchisel> \0/
[02:05:10] <yitz> Many of us regularly depend on/assume standard GNU Linux setups
[02:05:25] <ede> djph: i just had to bring in most after more and less ;)
[02:05:49] <yitz> One should do what is right for the problem being solved
[02:06:06] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 268 seconds)
[02:06:58] *** Joins: mknod (~mknod@user/mknod)
[02:07:34] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 260 seconds)
[02:07:54] <extern> i need not much related but what is the official channel of the text editor "neovim" ?
[02:08:01] <djph> ede: hehehe
[02:08:05] <greycat> I'd start in #vim
[02:08:40] <emanuele6> extern: i think #nvim, but it's really a matrix channel
[02:09:01] <extern> 3 users ?
[02:09:11] *** Quits: adac (~adac@213-47-187-80.cable.dynamic.surfer.at) (Ping timeout: 268 seconds)
[02:09:14] <phy1729> #neovim
[02:09:41] <greycat> oh come on, there's a #neovim and they had to ASK US?!
[02:10:38] *** Quits: darkxploit (~jay@32.209.19.50) (Ping timeout: 268 seconds)
[02:10:55] <djph> greycat: I think there's a bashphorism about that
[02:11:15] <extern> phy1729: thanks
[02:12:36] <jetchisel> Neo is alive! ^^
[02:13:06] <extern> jetchisel: you remember me ?
[02:13:09] *** Joins: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319)
[02:13:23] *** Quits: zeedo (~zeedo@cpc157903-grth13-2-0-cust152.16-4.cable.virginm.net) (Quit: Leaving)
[02:13:43] <jetchisel> Sorry I don't
[02:13:54] *** Joins: zeedo (~zeedo@cpc157903-grth13-2-0-cust152.16-4.cable.virginm.net)
[02:13:54] <extern> then how do you know my name ?
[02:14:12] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:14:12] <cryptonector> back to splitting, is there a better idiom for this: function split { local IFS="$1"; shift; [[ $1 = a ]] || local -n a="$1"; shift; a=($1); }
[02:14:16] <jetchisel> right, you're the matrix!
[02:14:39] <cryptonector> declare -a path; split : path "$PATH"
[02:14:45] <greycat> cryptonector: you forgot set -f
[02:14:48] <cryptonector> seems... unidiomatic?
[02:14:59] <cryptonector> greycat: -f?
[02:15:03] <greycat> and yeah, it's horrible and should make you reconsider everything you are doing
[02:15:40] <cryptonector> -f for what builtin?
[02:15:44] <greycat> set -f
[02:15:49] <greycat> it is a command
[02:16:51] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.2)
[02:17:04] <cryptonector> right, I misread
[02:17:53] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:18:02] *** Quits: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319) (Ping timeout: 268 seconds)
[02:18:09] <cryptonector> yes, right, set -f, but is there something more idiomatic anyways?
[02:19:02] <jmcantrell> readarray?
[02:19:05] <greycat> IFS=: read -ra myarray <<< "$string:"
[02:19:12] <greycat> with caveats
[02:19:39] <greycat> because this is bash and everthing is exploding barbed wire
[02:19:49] <cryptonector> I guess that's idiomatic; being bash I probably shouldn't hope for elegant
[02:20:13] <emanuele6> greycat: why not this? mapfile -td: myarray < <(printf %s "$mystring")
[02:20:42] <cryptonector> I could also just use ${PATH#*:} and ${PATH%%:*} to parse it in a loop
[02:21:13] <emanuele6> cryptonector: why are you iterating PATH?
[02:21:44] <greycat> !b9
[02:21:44] <greybot> All examples given by the questioner will be broken, misleading, wrong, incomplete, and/or not representative of the actual question.
[02:21:58] <emanuele6> if you want to list the avalaible commands, you can use `compgen -c'
[02:22:21] *** Quits: sublim20 (~sublim20@user/sublim20) (Quit: Leaving)
[02:23:21] <cryptonector> no, I don't want to see a list of available commands; I want to know what directories are in the $PATH
[02:24:12] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[02:24:21] *** Joins: kuidos23 (~kuidos26@31-10-162-34.cgn.dynamic.upc.ch)
[02:24:33] <greycat> echo "$PATH"
[02:24:34] <mknod> emanuele6, compgen -c includes all builtins and keywords, not just commands found in $PATH
[02:25:04] <emanuele6> yes, they are "commands" in bash
[02:25:44] <cryptonector> greycat: lol, thanks; in conclusion, no, there's no nice idiomatic way to do that
[02:25:56] <mknod> emanuele6, but that doesn't match the example (as for keywords, I disagree but I already had this debate before - no thanks)
[02:26:03] *** Quits: kj (~kj@beta.aerisnetwork.net) (Ping timeout: 268 seconds)
[02:26:20] <emanuele6> [[ a = b ]] is a command
[02:26:29] <mknod> [[ isn't
[02:26:31] <cryptonector> BTW, the getopts_long() I posted yesterday... use of local -n... makes shellcheck sad, and that makes me sad
[02:26:35] <mknod> you see, useless debate.
[02:27:26] * greycat goes into red alert mode
[02:29:15] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[02:29:22] *** Quits: ninjabuffet (~ninjabuff@user/ninjabuffet) (Ping timeout: 252 seconds)
[02:29:45] *** Joins: tangy (~tangy@user/tangy)
[02:30:27] <emanuele6> greycat: does `mapfile -td: myarray < <(printf '%s:' "$string")' still have caveats like `IFS=: read -ra myarray <<< "$string:"'? i can't think of any?
[02:31:49] <cryptonector> looks like, indeed, shellcheck has no idea about local -n
[02:31:49] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[02:32:22] <koala_man> indirections like namerefs are hard to process statically
[02:33:19] *** Quits: guest734 (~guest@host102.186-109-243.telecom.net.ar) (Remote host closed the connection)
[02:34:04] <cryptonector> true; shell is just a terrible language
[02:34:38] *** Joins: shaggysi0 (~shaggysi0@31.127.133.132)
[02:35:10] *** Quits: Steeve (~steve@user/steeve) (Quit: end)
[02:35:18] <akoana> # IFS=: arr=($PATH); declare -p arr # is that bad?
[02:35:19] <shbot> akoana: declare -a arr=([0]="/usr/bin" [1]="/bin")
[02:35:23] *** Joins: ninjabuffet (~ninjabuff@user/ninjabuffet)
[02:35:23] <shush> When using SSH to remotely run a script like `ssh -t $HOST "$script"`, how do I control what output the ssh command gives per file descriptor?
[02:35:50] <mknod> akoana, with globbing enabled, yes
[02:35:59] <shush> I want to make sure all commands on the remote side that redirect to stderr will also direct to stderr on the local output
[02:36:06] <shush> Likewise for stdin
[02:36:09] <shush> stdout*
[02:36:12] <emanuele6> !-f > akoana
[02:36:13] <greybot> akoana: Do you actually need that -f in that command? If there a reason you are using it? Or is it just there because of habit? Do you actually know what the -f does and do you even want it there?
[02:36:21] <emanuele6> wrong factoid
[02:36:30] <emanuele6> !set-f > akoana
[02:36:30] <greybot> akoana: ''set -f'' disables glob expansion. You may need this in constructs like ''for w in $words'' or ''array=($words)'' just in case one of the words contains a * or ?.
[02:36:43] <izanurse> !meta -f
[02:36:43] <greybot> yitz_ 1430612710(2015-05-03) learn Do you actually need that -f in that command? If there a reason you are using it? Or is it just there because of habit? Do you actually know what the -f does and do you even want it there?
[02:36:53] <izanurse> what was that about?
[02:37:00] <izanurse> yitz do you remember?
[02:37:05] <emanuele6> probably rm
[02:37:30] <shush> The reason why I want this is so that way I can let user messages go to stderr or `>&2` while actual response to go to `>&1`. Then other scripts can filter out the stderr with `2>/dev/null`
[02:37:43] <cryptonector> I've a habit of starting scripts with set -euo pipefail; I should add -f to them too
[02:37:44] <izanurse> could use some better wording
[02:38:12] <izanurse> # set -euo pipefailf
[02:38:14] <shbot> izanurse: bash: set: pipefailf: invalid option name
[02:38:14] <shbot> izanurse: (shell exited with 2)
[02:38:22] <izanurse> cryptonector: not recommended, i think it kills your shell
[02:38:32] <akoana> # set -f; IFS=: arr=($PATH); declare -p arr # still bad?
[02:38:33] <shbot> akoana: declare -a arr=([0]="/usr/bin" [1]="/bin")
[02:38:51] <izanurse> akoana: that's good
[02:38:55] <mknod> akoana, it still is pretty much inelegant though
[02:39:01] <izanurse> it is not
[02:39:10] <mknod> yes it is
[02:39:18] *** Quits: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854) (Ping timeout: 260 seconds)
[02:39:35] <cryptonector> izanurse: funny
[02:39:42] <akoana> lol, didn't wan't to start beauty contests...
[02:39:53] <izanurse> akoana: don't listen to the haters, they want to make you write silly code like    IFS=: read -ra arr <<< "$PATH"    which is inefficient for 45236 different reasons
[02:39:58] *** Joins: Nact (~l@109.130.159.80)
[02:40:15] <mknod> izanurse, you don't know me
[02:40:21] <izanurse> i know you
[02:40:26] <izanurse> you're that guy
[02:40:39] <izanurse> the one with the funny hat
[02:40:39] <mknod> then you should know I don't use here-strings.
[02:41:17] <yitz> izanurse: probably rm  :)
[02:41:24] <izanurse> regardless, what akoana did is the RightWay™
[02:41:41] <akoana> I don't know what's inelegant with word splitting...
[02:41:41] <mknod> izanurse, no, it's a ugly hack that serves no purpose in most cases
[02:42:06] *** Quits: greta (uid516789@id-516789.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:43:10] <izanurse> akoana: i agree. most shells do it by default on everything, and people like mknod think it must be suppressed in every way possible, always fighting against their tools instead of learning how to use them properly
[02:43:24] <mknod> ahahaha
[02:43:33] <izanurse> i'm not even joking
[02:43:42] <mknod> i'm laughing for sure.
[02:43:49] <izanurse> well feel free i suppose
[02:43:58] <cryptonector> what is this, #perl5?
[02:44:44] <akoana> izanurse: thanks, I'll stop because "de gustibus non est disputandum" :)
[02:45:22] *** Quits: Nact (~l@109.130.159.80) (Ping timeout: 252 seconds)
[02:45:33] *** Joins: besnn (~besnn@user/besnn)
[02:45:34] <izanurse> it's not de gustibus, one is clearly provably better
[02:46:46] *** Joins: Voxel (~Voxel@173-46-68-178.baltnet.ru)
[02:48:04] *** Joins: n4dir (~user@i577BC8D5.versanet.de)
[02:48:28] * akoana nods
[02:48:48] <mknod> # var="foo:bar::qux"; set -f; IFS=: arr=($var); declare -p arr
[02:48:49] <shbot> mknod: declare -a arr=([0]="foo" [1]="bar" [2]="" [3]="qux")
[02:48:52] <mknod> # var="foo bar  qux"; set -f; IFS=" " arr=($var); declare -p arr
[02:48:53] <shbot> mknod: declare -a arr=([0]="foo" [1]="bar" [2]="qux")
[02:49:04] <mknod> I'm sure izanurse knew about this too.
[02:49:10] *** Quits: kuidos23 (~kuidos26@31-10-162-34.cgn.dynamic.upc.ch) (Ping timeout: 252 seconds)
[02:49:31] <mknod> and I'm sure akoana is skilled enough to build house of cards in Bash.
[02:49:45] *** Joins: Elodin (~weechat@user/elodin)
[02:50:37] <mknod> so all in all, I'm not expecting anything wrong (or potentially dramatic) to happen in a near future.
[02:50:58] *** Quits: moto (~moto@user/moto) (Ping timeout: 260 seconds)
[02:51:11] *** rinkydink is now known as tirnanog
[02:52:58] *** Quits: sinhue (~sinhue@stip-static-55.213-81-207.telecom.sk) (Ping timeout: 268 seconds)
[02:53:13] *** Joins: jkwnki (~jkwnki@p4fedb772.dip0.t-ipconnect.de)
[02:53:16] *** Quits: jkwnki (~jkwnki@p4fedb772.dip0.t-ipconnect.de) (Client Quit)
[02:53:40] <emanuele6> still, IFS=: read -ra arr <<< "$var:", would not be a good solution since it only works for one line
[02:54:13] <emanuele6> mapfile -td ':' arr < <(printf '%s:' "$var") would be better
[02:55:21] *** Quits: Krail (~Krail@user/alexdelarge) (Quit: Krail)
[02:55:29] *** Quits: chomwitt (~chomwitt@ppp-94-67-221-96.home.otenet.gr) (Remote host closed the connection)
[02:55:50] <mknod> emanuele6, -d "" would solve this, but yeah, that doesn't make this method any better
[02:56:36] <emanuele6> you mean any better performance-wise or am i missing some caveats?
[02:57:02] <mknod> it still sucks in every way possible, but ditching the here-string would make it less worse imho
[02:57:41] <emanuele6> is there a correctess problem with it?
[02:57:56] *** Quits: mike18 (~geri@217-149-162-127.nat.highway.telekom.at) (Remote host closed the connection)
[02:58:03] *** Joins: jkwnki (~jkwnki@p4fedb772.dip0.t-ipconnect.de)
[02:58:25] *** Quits: jkwnki (~jkwnki@p4fedb772.dip0.t-ipconnect.de) (Client Quit)
[02:58:40] <emanuele6> mknod: oh, you mean `-d ""' as an option for read?
[02:58:47] <mknod> yes
[02:58:56] <emanuele6> that wouldn't work, var may contain \0
[02:59:02] <mknod> no
[02:59:05] <tirnanog> it can't possibly.
[02:59:36] <tirnanog> # var=$'foo\0bar'; declare -p var
[02:59:38] <shbot> tirnanog: declare -- var="foo"
[02:59:48] *** Joins: Krail (~Krail@user/alexdelarge)
[02:59:56] <emanuele6> right, but if the input is not a variable, then it is possible
[03:00:07] <tirnanog> yes.
[03:00:22] <emanuele6> mapfile can handle that, so why not use mapfile?
[03:01:26] <mknod> clearly, using IOs for such a simple problem seems unacceptable to me, but well it's Bash. you can build a regex dynamically and use BASH_REMATCH too.
[03:02:00] <greycat> if it's such a "simple problem", offer a better answer
[03:02:03] <mknod> (assuming using a good old loop is out of the scope of this conversation)
[03:02:18] <mknod> I don't know any good answer!
[03:02:48] *** Joins: moto (~moto@user/moto)
[03:02:58] <mknod> I only know worse and worser answers
[03:03:22] <greycat> read <<<   does not suck in all the possible ways.  It doesn't fork().
[03:03:38] <greycat> < <()   forks.  So it's probably going to be slower.
[03:03:42] <mknod> and less worse answers too. :D
[03:04:38] <emanuele6> oh interesting
[03:05:20] <greycat> actually, I'm not sure if <<< is guaranteed not to fork in bash 5.1 ... I still need to wrap my head around the changes
[03:05:27] <emanuele6> # printf 'a\0b' > somefile; var=$(< somefile); declare -p var
[03:05:28] <shbot> emanuele6: bash: warning: command substitution: ignored null byte in input
[03:05:28] <shbot> emanuele6: declare -- var="ab"
[03:05:29] <greycat> but in bash 5.0 and earlier, it's always a temp file
[03:05:35] <mknod> greycat, <<< still uses temp files (at least it used to)
[03:05:43] *** Joins: jkwnki (~jkwnki@p4fedb772.dip0.t-ipconnect.de)
[03:05:47] <mknod> yeah, not sure which is better
[03:06:12] <emanuele6> bash removes the NUL bytes instead of stopping reading
[03:06:21] <emanuele6> and prints out a warning
[03:06:52] <greycat> the warning was added recently, and caused people to complain, because they wanted their code to fail *silently*
[03:07:20] <emanuele6> # printf 'a\0b' > somefile; var=$(< somefile); echo "$?"; declare -p var
[03:07:22] <shbot> emanuele6: bash: warning: command substitution: ignored null byte in input
[03:07:22] <shbot> emanuele6: 0
[03:07:22] <shbot> emanuele6: declare -- var="ab"
[03:07:25] <emanuele6> it doesn't even fail
[03:07:38] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[03:08:08] <greycat> I didn't say abort.  I said fail.
[03:08:09] <emanuele6> i would need to capture stderr to check if i get that warning
[03:08:25] <emanuele6> greycat: yeah, it wasn't related to your answer
[03:08:34] <emanuele6> i was just surprised
[03:10:04] <cryptonector> fork() does suck
[03:10:10] *** Joins: kj (~kj@kj.aerisnetwork.net)
[03:11:48] <cryptonector> vfork() forever, or better, posix_spawn()
[03:11:57] *** Quits: dub_a (~dub_a@2601:1c2:4e00:3b3::cb2) (Quit: WeeChat 3.2)
[03:13:44] <izanurse> do you even know what you're talking about or are you just saying things
[03:14:12] <izanurse> posix_spawn is comparable to fork+exec, what would you be execing here?
[03:16:08] *** Quits: gr33nR10t (~greenriot@user/gr33nr10t) (Ping timeout: 265 seconds)
[03:16:32] *** Quits: jkwnki (~jkwnki@p4fedb772.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:18:06] *** Quits: Palll (~Pall@cpc139184-sprt3-2-0-cust125.17-2.cable.virginm.net) (Read error: Connection reset by peer)
[03:18:50] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[03:19:38] *** Quits: Elodin (~weechat@user/elodin) (Read error: Connection reset by peer)
[03:20:01] *** Joins: Elodin (~weechat@user/elodin)
[03:22:51] <emanuele6> how would one even capture stderr to check for that?
[03:22:53] *** Joins: jkwnki (~jkwnki@p4fedb772.dip0.t-ipconnect.de)
[03:23:06] <emanuele6> if { var=$(< .bashrc) ;} |& read -rn1; [[ ${PIPESTATUS[0]} == 0 && ${PIPESTATUS[1]} != 0 ]]; then declare -p var; fi
[03:23:09] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[03:23:22] <emanuele6> would not work because the assignment happens in a subshell
[03:24:08] <emanuele6> { var=$(< .bashrc) ;} 2> >(read -rn1) -- the exit status cannot easily be retrieved
[03:24:11] *** Quits: jkwnki (~jkwnki@p4fedb772.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[03:24:13] <izanurse> { .... } 2>tmp
[03:24:23] <emanuele6> yeah
[03:24:56] <emanuele6> or even { var=$(< .bashrc) ;} 2> >(read -rn1; printf '%s\n' "$?" > tmp)
[03:25:10] <izanurse> just don't work with binary files
[03:25:26] <emanuele6> !graduated
[03:25:27] <greybot> Congratulations! You've graduated to needing to use a real language!
[03:26:10] *** Quits: marlinc (~marlinc@user/marlinc) (Ping timeout: 252 seconds)
[03:27:04] <cryptonector> izanurse: https://gist.github.com/nicowilliams/a8a07b0fc75df05f684c23c18d7db234
[03:28:58] <tirnanog> greybot: it appears to hold. I can observe no forking here, whether or not 5.1+ elects to use a pipe for <<<.
[03:31:41] *** XV8 is now known as xv8
[03:34:02] <izanurse> cryptonector: but what would you be execing here
[03:34:52] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[03:36:22] *** Joins: marlinc (~marlinc@user/marlinc)
[03:39:11] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[03:44:36] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[03:49:52] *** Quits: Elodin (~weechat@user/elodin) (Read error: Connection reset by peer)
[03:50:14] *** Joins: chenxuezhao (~chenxuezh@120.244.238.69)
[03:50:18] *** Quits: chenxuezhao (~chenxuezh@120.244.238.69) (Read error: Connection reset by peer)
[03:50:18] *** Joins: Elodin (~weechat@user/elodin)
[03:51:22] *** Quits: rigid (~rigid@user/rigid) (Ping timeout: 252 seconds)
[03:53:30] *** Quits: moto (~moto@user/moto) (Ping timeout: 260 seconds)
[03:53:30] *** Quits: junagu_ (~junagu@2a02:8010:6989:0:73bc:34ce:86c4:f8c1) (Ping timeout: 260 seconds)
[03:53:35] *** Joins: seninha (~seninha@user/seninha)
[03:54:42] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[03:54:50] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[03:55:10] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[03:57:08] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[03:57:32] *** Joins: alzgh (~alzgh@user/alzgh)
[03:58:14] *** Quits: extern (~archer@141.226.61.61) (Quit: Tah Tah)
[04:02:22] *** Quits: xx (~xx@user/xx) (Ping timeout: 260 seconds)
[04:02:32] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 265 seconds)
[04:02:32] *** Quits: sinaowolabi_ (~SinaOwola@102.134.114.1) (Ping timeout: 265 seconds)
[04:04:13] *** Quits: zro (~zro@user/zro) (Quit: WeeChat 3.2)
[04:06:50] *** Joins: mixfix41 (~homefame@user/mixfix41)
[04:10:47] *** Parts: greentree (~greentree@pool-100-2-24-182.nycmny.fios.verizon.net) (Closing Window)
[04:11:06] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:12:42] *** Quits: Elodin (~weechat@user/elodin) (Quit: WeeChat 3.2)
[04:13:50] *** Quits: lavaball (~Melissa@31.204.155.215) (Remote host closed the connection)
[04:13:55] *** Joins: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319)
[04:14:36] *** xv8 is now known as XV8
[04:14:52] *** Quits: tinytoast (~squeek@user/tinystoat) (Remote host closed the connection)
[04:14:54] *** Joins: sinaowolabi_ (~SinaOwola@102.134.114.1)
[04:15:01] *** Joins: tinystoat (~squeek@user/tinystoat)
[04:15:02] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[04:15:02] *** Quits: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[04:15:38] *** Joins: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com)
[04:19:38] *** Quits: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319) (Ping timeout: 260 seconds)
[04:20:01] *** Quits: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[04:20:37] *** Joins: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com)
[04:22:33] *** Quits: alguien (~alguien@user/alguien) (Quit: Leaving)
[04:22:40] *** Quits: kill (~killown@user/killown) (Remote host closed the connection)
[04:28:39] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[04:30:05] *** Quits: cdown (~cdown@194.207.141.245) (Ping timeout: 265 seconds)
[04:30:22] *** Joins: seninha (~seninha@user/seninha)
[04:30:46] *** Joins: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319)
[04:31:20] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:33:45] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[04:35:10] *** Quits: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319) (Ping timeout: 240 seconds)
[04:40:42] *** Quits: Caffeinated (~Caffeine@user/alexdelarge) (Quit: kernel update)
[04:41:22] *** Quits: zouhair (~zouhair@lnsm1-montreal02-142-119-22-97.internet.virginmobile.ca) (Ping timeout: 252 seconds)
[04:42:34] *** Joins: zouhair (~zouhair@lnsm1-montreal02-142-119-22-97.internet.virginmobile.ca)
[04:43:36] *** Quits: zouhair (~zouhair@lnsm1-montreal02-142-119-22-97.internet.virginmobile.ca) (Client Quit)
[04:44:55] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[04:45:23] *** Joins: zouhair (~zouhair@lnsm1-montreal02-142-119-22-97.internet.virginmobile.ca)
[04:45:43] *** Joins: Caffeinated (~Caffeine@user/alexdelarge)
[04:45:49] *** Joins: bolsonarogay (~bolsonaro@186.237.242.64)
[04:47:58] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 252 seconds)
[04:50:15] *** Joins: moto (~moto@user/moto)
[04:50:56] *** Joins: seninha_ (~seninha@user/seninha)
[04:51:37] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[04:52:05] *** Joins: seninha_ (~seninha@user/seninha)
[04:52:12] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 268 seconds)
[04:52:25] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Quit: Soupy Twist!)
[04:52:30] *** Joins: rigid (~rigid@user/rigid)
[04:55:37] *** Quits: yetoo_ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[04:55:59] *** Joins: yetoo_ (~yetoo@user/yetoo)
[04:56:13] *** Quits: moto (~moto@user/moto) (Ping timeout: 252 seconds)
[05:00:42] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[05:03:14] *** Quits: thyriaen (~thyriaen@dynamic-078-055-255-174.78.55.pool.telefonica.de) (Remote host closed the connection)
[05:03:39] *** Quits: Krail (~Krail@user/alexdelarge) (Quit: Krail)
[05:09:08] *** Quits: wizhurd (~cr6pt2r@147.253.130.182) (Remote host closed the connection)
[05:09:08] *** Quits: sourcecerer (~cr6pt2r@147.253.130.182) (Remote host closed the connection)
[05:10:22] *** Quits: xa_ (~NesLs@176.54.220.117) (Remote host closed the connection)
[05:12:14] *** TheArchitect is now known as GodMode
[05:12:50] *** Joins: wizhurd (~cr6pt2r@147.253.130.182)
[05:12:51] *** GodMode is now known as TheArchitect
[05:18:00] *** Joins: moto (~moto@user/moto)
[05:19:19] *** ^raz^ is now known as raz
[05:19:20] *** Quits: raz (~raz@2604:180:1::6193:c4c7) (Changing host)
[05:19:20] *** Joins: raz (~raz@user/raz)
[05:21:49] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[05:25:18] <mns> using getopts how do I ensure that a required option is provided on the command line ?
[05:25:54] <greycat> By checking for its variable *after* you're doing with the option loop.
[05:25:59] <greycat> done*
[05:26:52] <mns> ok so there isn't a way to do it in the option loop.
[05:27:00] <greycat> required=""; while getopts ...; done; if [[ ! $required ]]; then die "required option -r was not supplied"; fi
[05:27:37] <phy1729> How could it be done in the loop? Until the loop is over you don't know if the next iteration will handle the required opt
[05:30:24] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:31:17] <mns> phy1729: fair point.
[05:33:57] *** Quits: seninha_ (~seninha@user/seninha) (Quit: Leaving)
[05:35:30] *** Joins: vlm (~vlm@user/vlm)
[05:35:52] *** Quits: yetoo_ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[05:36:16] *** Joins: yetoo_ (~yetoo@user/yetoo)
[05:37:05] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[05:37:12] <ezzieyguywuf> how can I escape an @ in bash?
[05:37:37] <jetchisel> \@ ?
[05:37:48] <greycat> why do you think you need to?
[05:37:56] <greycat> # echo @
[05:37:57] <shbot> greycat: @
[05:38:45] <ezzieyguywuf> oh, I thought I needed to b/c I forgot the quotes
[05:38:48] <ezzieyguywuf> 🤦
[05:39:43] <llua> # typeset -A foo=([@]=foo [bar]=baz); echo "${foo[\@]}" -- "${foo[@]}"
[05:39:45] <shbot> llua: foo -- foo baz
[05:40:22] *** Quits: yetoo_ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[05:40:31] *** Joins: yetoo__ (~yetoo@user/yetoo)
[05:40:54] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[05:40:55] *** Quits: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se) (Ping timeout: 252 seconds)
[05:41:58] *** Joins: Krail (~Krail@user/alexdelarge)
[05:43:21] <greycat> using @ or * or "" as an associative array key is problematic, yes.
[05:43:54] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[05:44:56] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[05:46:31] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[05:46:45] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[05:47:33] *** Joins: seninha (~seninha@user/seninha)
[05:53:07] *** Quits: n4dir (~user@i577BC8D5.versanet.de) (Remote host closed the connection)
[05:54:39] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[05:54:55] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[05:55:04] *** Quits: yetoo__ (~yetoo@user/yetoo) (Remote host closed the connection)
[05:55:11] *** Joins: cuppajoe (~joe@ip174-68-20-166.no.no.cox.net)
[05:55:17] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[05:55:24] *** Joins: yetoo__ (~yetoo@user/yetoo)
[05:55:32] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[05:56:50] *** Joins: Kvothe (~weechat@user/elodin)
[05:58:01] *** Quits: Kvothe (~weechat@user/elodin) (Client Quit)
[05:58:40] *** Joins: Elodin (~weechat@user/elodin)
[06:00:04] *** Quits: zeedo (~zeedo@cpc157903-grth13-2-0-cust152.16-4.cable.virginm.net) (Ping timeout: 252 seconds)
[06:01:59] *** Quits: cuppajoe (~joe@ip174-68-20-166.no.no.cox.net) (Quit: WeeChat 3.2)
[06:02:23] *** Quits: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9) (Remote host closed the connection)
[06:03:27] *** Joins: N4buc0 (~N4buc0@2001:1284:f013:af60:4664:77ca:a745:8e99)
[06:06:01] *** Joins: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9)
[06:06:37] *** Quits: bolsonarogay (~bolsonaro@186.237.242.64) (Ping timeout: 252 seconds)
[06:06:59] *** Joins: bolsonarogay (~bolsonaro@186.237.242.64)
[06:13:24] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:18:25] *** Quits: N4buc0 (~N4buc0@2001:1284:f013:af60:4664:77ca:a745:8e99) (Quit: Leaving)
[06:19:33] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 268 seconds)
[06:21:24] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[06:24:39] *** Joins: gnoo (~gnoo@user/gnoo)
[06:26:06] *** Quits: alzgh (~alzgh@user/alzgh) (Quit: WeeChat 2.8)
[06:28:59] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 265 seconds)
[06:29:54] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:30:24] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:30:46] *** Quits: FoodMan (~glucose@user/foodman) (Ping timeout: 260 seconds)
[06:30:52] *** Quits: Baggypants (~baggypant@2001:470:1f09:349::baad:daad) (Ping timeout: 252 seconds)
[06:31:32] *** Joins: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319)
[06:32:26] *** Joins: Elodin (~weechat@user/elodin)
[06:33:47] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 240 seconds)
[06:37:02] *** Quits: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319) (Ping timeout: 268 seconds)
[06:37:31] *** Joins: hdb2 (~josh@user/hdb2)
[06:38:45] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[06:39:17] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[06:40:09] *** Joins: Baggypants (~baggypant@2001:470:1f09:349::baad:daad)
[06:40:32] *** XV8 is now known as xv8
[06:40:58] <hdb2> hello - I want to read lines in a file into an array. from googling, it seems readarray is the right way to do this. here is my script: https://termbin.com/63sn4 am I on the right path or do I need to do it a different way? the bashFAQ didn't mention readarray at all, which leads me to wonder if I'm doing things the wrong way.
[06:41:49] <litheum> hdb2: readarray is a synonym for mapfile, so look for that instead
[06:41:51] <hdb2> note: I have control over the input file, I won't be taking random input from unknown sources.
[06:41:54] <litheum> !mapfile
[06:41:54] <greybot> Read lines from a file/stream into an array: mapfile -t arrayname < file OR mapfile -t arrayname < <(some cmd); # In bash < 4, use a loop; see FAQ 5 or http://wiki.bash-hackers.org/commands/builtin/mapfile
[06:41:57] <hdb2> litheum: will do, thank you!
[06:42:16] *** Joins: Crescendo (~Crescendo@user/crescendo)
[06:42:17] <hdb2> this is great, I'll read up on this.  thanks again!
[06:42:23] *** Joins: semeion (~semeion@user/semeion)
[06:43:12] *** Quits: jos2 (~jos3@dyndsl-091-096-036-018.ewe-ip-backbone.de) (Ping timeout: 268 seconds)
[06:43:30] *** Joins: deltab (~deltab@user/deltab)
[06:48:19] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:49:19] *** semeion is now known as mnemonic
[06:53:29] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[06:55:45] *** Joins: jos2 (~jos3@dyndsl-091-248-054-026.ewe-ip-backbone.de)
[06:59:52] *** Quits: hdb2 (~josh@user/hdb2) (Quit: leaving)
[07:01:09] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[07:04:06] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:09:14] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: Ping timeout (120 seconds))
[07:10:33] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[07:11:07] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[07:11:11] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[07:11:14] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:11:29] *** Joins: yetoo__ (~yetoo@user/yetoo)
[07:11:40] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[07:12:00] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[07:12:03] *** Quits: greycat (~greg@209.142.155.49) (Quit: Bye)
[07:18:38] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[07:18:55] *** Joins: yetoo__ (~yetoo@user/yetoo)
[07:24:32] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[07:24:54] *** Joins: yetoo__ (~yetoo@user/yetoo)
[07:26:51] *** xv8 is now known as XV8
[07:30:23] *** Joins: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319)
[07:30:36] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[07:30:40] *** Joins: jonakeys_ (jonathan@gateway/vpn/airvpn/jonakeys)
[07:30:54] *** Joins: yetoo__ (~yetoo@user/yetoo)
[07:34:10] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[07:34:10] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Ping timeout: 268 seconds)
[07:34:29] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[07:36:10] *** Quits: kurahaupo (~kurahaupo@58.84.89.180) (Ping timeout: 265 seconds)
[07:37:39] *** Joins: kurahaupo (~kurahaupo@58.84.89.180)
[07:40:01] *** Quits: jonakeys_ (jonathan@gateway/vpn/airvpn/jonakeys) (Quit: WeeChat 3.2)
[07:40:19] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:41:25] *** Joins: et_ (~et@user/et)
[07:42:19] *** Quits: et (~et@user/et) (Ping timeout: 252 seconds)
[07:42:19] *** et_ is now known as et
[07:48:04] *** Joins: et_ (~et@user/et)
[07:48:59] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[07:49:11] *** Quits: et (~et@user/et) (Ping timeout: 268 seconds)
[07:49:11] *** et_ is now known as et
[07:49:23] *** Joins: yetoo__ (~yetoo@user/yetoo)
[07:55:21] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[07:55:51] *** Quits: timj1 (~timj@user/timj) (Remote host closed the connection)
[07:56:05] *** Quits: Krail (~Krail@user/alexdelarge) (Quit: Krail)
[07:58:44] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[08:01:00] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:01:50] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[08:02:42] *** Quits: Baggypants (~baggypant@2001:470:1f09:349::baad:daad) (Ping timeout: 260 seconds)
[08:02:43] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[08:03:36] *** Joins: Krail (~Krail@user/alexdelarge)
[08:06:45] *** Joins: Baggypants (~baggypant@cpc94362-ward12-2-0-cust376.10-2.cable.virginm.net)
[08:14:28] *** Quits: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319) (Ping timeout: 268 seconds)
[08:16:49] *** Joins: fdan (~fdan@192.146.154.3)
[08:20:48] *** Quits: xiao (~xiao@37.171.44.22) (Remote host closed the connection)
[08:23:06] *** Quits: yetoo__ (~yetoo@user/yetoo) (Remote host closed the connection)
[08:23:23] *** Joins: yetoo__ (~yetoo@user/yetoo)
[08:25:12] *** Joins: pinny (~pinny@2001:df2:7700:e0fe::8ae)
[08:26:38] *** Joins: totenkoph (~scythe@user/totenkoph)
[08:27:12] *** Quits: austin987 (~null@100.42.98.196) (Ping timeout: 268 seconds)
[08:32:36] *** Quits: Friithian (gunqqer@friithian.dev) (Remote host closed the connection)
[08:37:15] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[08:39:23] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[08:39:29] *** Parts: akoana (~ah@user/akoana) (Leaving)
[08:39:52] *** Joins: yetoo__ (~yetoo@user/yetoo)
[08:40:10] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[08:41:10] *** Joins: austin987 (~null@cpe-173-174-99-192.austin.res.rr.com)
[08:42:32] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:43:14] *** Quits: Baggypants (~baggypant@cpc94362-ward12-2-0-cust376.10-2.cable.virginm.net) (Ping timeout: 268 seconds)
[08:43:15] *** Joins: karstensrage (~karstensr@user/karstensrage)
[08:43:23] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[08:43:41] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[08:45:19] *** Quits: vishal (~vishal@fedora/vishal) (Quit: ZNC 1.8.2 - https://znc.in)
[08:45:42] *** Quits: LiftLeft (~LiftLeft@172.98.80.53) (Ping timeout: 268 seconds)
[08:45:46] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 265 seconds)
[08:47:08] *** Joins: vishal (~vishal@fedora/vishal)
[08:47:23] *** Joins: Baggypants (~baggypant@2001:470:1f09:349::baad:daad)
[08:48:07] *** Parts: karstensrage (~karstensr@user/karstensrage) (Leaving)
[08:51:39] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[08:53:03] *** Quits: Krail (~Krail@user/alexdelarge) (Quit: Krail)
[08:53:25] *** Joins: Atque (~Atque@user/atque)
[08:56:03] *** Joins: Krail (~Krail@user/alexdelarge)
[08:56:20] *** Joins: deltab (~deltab@user/deltab)
[09:00:35] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[09:02:30] *** Joins: russw (~russw@bras-base-otwaon0150w-grc-12-142-112-186-138.dsl.bell.ca)
[09:03:22] *** Quits: russw_ (~russw@bras-base-otwaon0150w-grc-05-184-147-145-168.dsl.bell.ca) (Ping timeout: 260 seconds)
[09:11:43] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:11:55] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[09:12:23] *** Joins: yetoo__ (~yetoo@user/yetoo)
[09:19:18] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:19:37] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[09:19:42] *** Quits: Baggypants (~baggypant@2001:470:1f09:349::baad:daad) (Ping timeout: 260 seconds)
[09:19:58] *** Joins: Baggypants (~baggypant@2001:470:1f09:349::baad:daad)
[09:20:59] *** Quits: cryptonector (~nico@24.28.108.183) (Remote host closed the connection)
[09:29:05] *** Quits: kurahaupo (~kurahaupo@58.84.89.180) (Ping timeout: 268 seconds)
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:30:10] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:31:01] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[09:31:16] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:31:57] *** Joins: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319)
[09:34:06] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 265 seconds)
[09:35:07] *** Joins: Mo (~Mo@dynamic-095-112-015-004.95.112.pool.telefonica.de)
[09:38:41] *** Joins: kurahaupo (~kurahaupo@58.84.89.180)
[09:39:11] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[09:39:32] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[09:41:35] *** Joins: yetoo (~yetoo@user/yetoo)
[09:41:37] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[09:45:48] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:46:29] *** Joins: mnemonic (~semeion@user/semeion)
[09:51:52] *** Joins: howdoi (uid224@id-224.lymington.irccloud.com)
[09:54:54] *** lockywolf is now known as locky
[09:56:00] *** Quits: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319) (Ping timeout: 268 seconds)
[09:56:49] *** Joins: cryptonector (~nico@24.28.108.183)
[09:58:28] *** Quits: yetoo (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[09:58:43] *** Joins: yetoo (~yetoo@user/yetoo)
[09:58:50] *** Joins: russw_ (~russw@bras-base-otwaon0150w-grc-05-184-147-145-97.dsl.bell.ca)
[09:59:47] *** Joins: dsrt^ (~dsrt@68.101.54.227)
[10:00:12] *** Quits: russw (~russw@bras-base-otwaon0150w-grc-12-142-112-186-138.dsl.bell.ca) (Ping timeout: 265 seconds)
[10:00:24] *** Joins: kurahaupo_ (~kurahaupo@pa49-179-197-108.pa.nsw.optusnet.com.au)
[10:01:40] *** Quits: yetoo (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[10:01:53] *** Joins: yetoo (~yetoo@user/yetoo)
[10:03:24] *** Quits: kurahaupo (~kurahaupo@58.84.89.180) (Ping timeout: 268 seconds)
[10:04:04] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 265 seconds)
[10:08:47] *** Joins: kurahaupo (~kurahaupo@58.84.89.180)
[10:11:22] *** Quits: kurahaupo_ (~kurahaupo@pa49-179-197-108.pa.nsw.optusnet.com.au) (Ping timeout: 252 seconds)
[10:11:58] *** Quits: eblip (~eb0t@90.209.54.144) (Ping timeout: 260 seconds)
[10:13:58] *** Joins: eblip (~eb0t@90.199.241.57)
[10:14:07] *** Quits: russw_ (~russw@bras-base-otwaon0150w-grc-05-184-147-145-97.dsl.bell.ca) (Read error: Connection reset by peer)
[10:16:07] *** Joins: mnemonic (~semeion@user/semeion)
[10:16:37] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[10:20:40] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[10:26:08] *** Quits: yetoo (~yetoo@user/yetoo) (Remote host closed the connection)
[10:26:25] *** Joins: yetoo (~yetoo@user/yetoo)
[10:35:21] *** Quits: redgloboli (~redglobol@user/redgloboli) (Quit: ...enter the matrix...)
[10:35:53] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (Quit: I Break D Ert)
[10:38:40] *** Quits: Inhonion (~uhhh3@user/tastywiener95) (Ping timeout: 240 seconds)
[10:40:05] *** Quits: Krail (~Krail@user/alexdelarge) (Quit: Krail)
[10:44:06] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[10:47:00] <snappy> hi, anyone know why i'm getting this error
[10:47:02] <snappy> $ sed -e 's#"github.foo.com/Bar#"github.com/BarQuux' <<</dev/null
[10:47:04] <snappy> sed: 1: "s#"github.foo.com/Bar#" ...": unescaped newline inside substitute pattern
[10:47:11] <snappy> This is with bsd sed
[10:47:59] <snappy> oh i forgot #g at the end
[10:49:14] *** Quits: marlinc (~marlinc@user/marlinc) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[10:51:28] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[10:51:56] *** Joins: greknod25 (~grek@114-198-46-246.dyn.iinet.net.au)
[10:53:58] *** Quits: greknod2 (~grek@114-198-44-89.dyn.iinet.net.au) (Ping timeout: 268 seconds)
[10:53:58] *** greknod25 is now known as greknod2
[10:54:25] *** Joins: brelod (~me@90.244.150.142)
[10:57:40] *** Joins: marlinc (~marlinc@user/marlinc)
[10:57:53] <geirha> TIL /dev/null is full of github urls
[10:57:53] *** Quits: bolsonarogay (~bolsonaro@186.237.242.64) (Quit: Quit)
[10:58:02] *** Joins: bolsonarogay (~bolsonaro@186.237.242.64)
[10:59:55] <llua> its not even /dev/null tho
[11:00:04] *** Joins: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[11:07:14] *** Joins: Pall (~Pall@cpc139184-sprt3-2-0-cust125.17-2.cable.virginm.net)
[11:08:50] *** Quits: coroner (~Jasper@ip70-190-125-167.ph.ph.cox.net) (Ping timeout: 265 seconds)
[11:10:00] *** Quits: reset (~reset@user/reset) (Quit: reset)
[11:13:53] *** Joins: tobybl (~tobybl@208.193.115.87.dyn.plus.net)
[11:16:03] *** Joins: Gege (Gege@118.100.120.240)
[11:16:03] *** Quits: Gege (Gege@118.100.120.240) (Changing host)
[11:16:03] *** Joins: Gege (Gege@user/gege)
[11:16:10] *** Joins: tobybl_ (~tobybl@208.193.115.87.dyn.plus.net)
[11:16:53] <Gege> Whats the difference without or without backtick `` in bash script executing a command e.g. `systemctl restart network`
[11:18:40] *** Quits: tobybl (~tobybl@208.193.115.87.dyn.plus.net) (Ping timeout: 240 seconds)
[11:18:48] <osse> Gege: backticks run the command, and are replaced by the output of that command
[11:19:06] <Gege> i dont put backticks and it runs the command too
[11:19:31] <osse> yes
[11:20:13] <osse> but if you use backticks you can use the command's output for something, such as running another command
[11:20:18] *** Quits: VoidNoir0 (~VoidNoir0@72.80.203.52) (Quit: Connection closed)
[11:20:25] <osse> # cat `echo .bashrc`
[11:20:31] <shbot> osse: # disable history expansion
[11:20:31] <shbot> osse: set +H
[11:20:31] <shbot> osse: etc... ( http://ix.io/2WQU )
[11:20:49] <Gege> #cat echo.bashrc
[11:20:54] <Gege> # cat echo.bashrc
[11:20:56] <shbot> Gege: cat: cannot open echo.bashrc: No such file or directory
[11:21:02] <Gege> # cat echo .bashrc
[11:21:03] <osse> with that said, prefer to use $( ) over backticks
[11:21:09] <shbot> Gege: cat: cannot open echo: No such file or directory
[11:21:09] <shbot> Gege: # disable history expansion
[11:21:10] <shbot> Gege: etc... ( http://ix.io/3yV5 )
[11:21:20] <osse> !`
[11:21:20] <greybot> The backquote (`) is used in the old-style command substitution, e.g. foo=`command`. The foo=$(command) syntax is recommended instead. Backslash handling inside $() is less surprising, and $() is easier to nest. See http://mywiki.wooledge.org/BashFAQ/082
[11:21:59] <Gege> ok can i assume among all ways, $() is counted as a recommended way of doing this?
[11:22:09] <osse> yes
[11:22:21] <Gege> thank you very much for the feedback, appreciate :)
[11:22:49] <osse> but it makes no sense to $(cmd) or `cmd` if all you wanna to is run the cmd
[11:23:00] <osse> its purpose is to be able to use the cmd's output for something.
[11:23:36] <Gege> i wanted to head and tail a content of a dynamically generated text file and send them via email using a script
[11:23:48] <Gege> i was wondering
[11:23:54] *** Joins: vysn (~vysn@user/vysn)
[11:24:11] <Gege> 1. `head test.txt' 2. head test.txt 3. $(head test.txt)
[11:24:24] <Gege> anyway content= at front
[11:24:41] <osse> I'd expect `systemctl restart network` to restart the network and then print something like "command not found: restarting"  or whatever the first word of the output is
[11:25:23] <Gege> but if it is via a script in cron, i will not be needing it to output to sdtout, will be writing to a log though
[11:27:12] <osse> the effect will be the same
[11:27:23] <Gege> yeah
[11:27:28] <osse> # `echo hello how are you`
[11:27:30] <shbot> osse: bash: hello: command not found
[11:28:15] <Gege> i am new to shell scripting... find it a bit annoying having several way to do the same thing, some obselete some are not :(
[11:28:29] <Gege> i think my script has a mixture of obselete and non obselete code
[11:29:51] *** Joins: fdan (~fdan@192.146.154.3)
[11:31:37] <osse> try shellcheck
[11:32:56] <Gege> cool, nice tool
[11:32:58] <Gege> thanks
[11:45:10] *** Quits: daidoji (~daidoji@104-52-250-5.lightspeed.gnvlsc.sbcglobal.net) (Ping timeout: 240 seconds)
[11:46:55] *** Joins: Night-Shade (~Tim@ip5b403d56.dynamic.kabel-deutschland.de)
[11:47:54] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[11:50:04] *** Quits: Night-Shade (~Tim@ip5b403d56.dynamic.kabel-deutschland.de) (Client Quit)
[11:51:42] *** Joins: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319)
[11:54:44] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[11:54:57] *** Joins: Night-Shade (~Tim@ip5b403d56.dynamic.kabel-deutschland.de)
[11:54:58] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[11:59:17] *** Quits: yitz (~yitz@exercism/yitz) (Ping timeout: 245 seconds)
[11:59:59] *** Quits: Gege (Gege@user/gege) (Remote host closed the connection)
[12:00:23] *** Quits: Lunatrius (~Lunatrius@77.38.92.228) (Ping timeout: 252 seconds)
[12:00:45] *** Joins: dob1_ (~dob1@user/dob1)
[12:01:02] *** Quits: dob1 (~dob1@user/dob1) (Ping timeout: 265 seconds)
[12:02:26] *** Joins: adac (~adac@clnet-b03-098.ikbnet.co.at)
[12:02:36] *** Joins: Weather7774 (~Weather77@124-170-121-245.dyn.iinet.net.au)
[12:02:42] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[12:03:02] *** Joins: yitz (~yitz@exercism/yitz)
[12:03:09] *** Joins: lavaball (felix@31.204.155.215)
[12:03:19] *** Quits: pinny (~pinny@2001:df2:7700:e0fe::8ae) (Ping timeout: 256 seconds)
[12:03:46] *** Joins: Lunatrius (~Lunatrius@77.38.92.228)
[12:06:53] *** Joins: UnnamedBeer (~UnnamedBe@225.red-79-152-222.dynamicip.rima-tde.net)
[12:07:55] *** Joins: yetoo_ (~yetoo@user/yetoo)
[12:08:05] *** Joins: pinny (~pinny@121-200-5-98.79c805.syd.nbn.aussiebb.net)
[12:08:19] *** Quits: yetoo (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[12:09:01] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[12:09:16] *** Quits: pinny (~pinny@121-200-5-98.79c805.syd.nbn.aussiebb.net) (Client Quit)
[12:11:27] <tsujp> Using `sudo install <(echo blahblah) ~/testing` is telling me it cannot find the file descriptor, without sudo it can. Why can sudo not find /dev/fd/63?
[12:11:54] *** Joins: Palll (~Pall@cpc139184-sprt3-2-0-cust125.17-2.cable.virginm.net)
[12:13:39] <tsujp> basically, I cannot use sudo with process substituion because I really want to write to /etc/nginx/test.conf but to do that I need sudo, and if I use sudo I install cannot read the fd...
[12:13:44] <tsujp> what's the solution here?
[12:15:43] *** Quits: Pall (~Pall@cpc139184-sprt3-2-0-cust125.17-2.cable.virginm.net) (Ping timeout: 252 seconds)
[12:18:35] *** Quits: Night-Shade (~Tim@ip5b403d56.dynamic.kabel-deutschland.de) (Quit: Textual IRC Client: www.textualapp.com)
[12:20:10] *** Quits: roadie` (~user@2a02:8108:ec0:1427:291c:12e4:39e6:6319) (Ping timeout: 240 seconds)
[12:22:58] *** Joins: jrofd (~test@cpc127052-lewi23-2-0-cust30.2-4.cable.virginm.net)
[12:23:29] *** Joins: yetoo__ (~yetoo@user/yetoo)
[12:23:36] *** Quits: yetoo_ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[12:26:48] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[12:26:52] <geirha> sudo probably closes all file descriptors except 0, 1 and 2 before running the install command as root
[12:27:14] <earnestly> (It does)
[12:27:23] <geirha> you could try with /dev/stdin << EOF instead
[12:27:45] <geirha> sudo install /dev/stdin target << EOF
[12:27:55] <tsujp> ah right gotcha, I'll try that otherwise it's `sudo -C` which is disabled by default.. I presume using -C is a security risk somehow?
[12:28:09] <earnestly> Yeah a common-ish usage is printf 'foobar\n' | install -Dm0644 /dev/stdin /etc/blah
[12:28:29] *** Joins: iomari891 (~iomari891@129.205.113.2)
[12:29:35] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:29:58] *** Joins: quazimodo (~quazimodo@n1-40-133-145.bla1.nsw.optusnet.com.au)
[12:30:00] <quazimodo> hi all
[12:30:13] <tsujp> hi
[12:30:17] <quazimodo> I have some output from awk that I am looping through, but occasionally it will be an empty string "", nothing to loop
[12:30:25] <quazimodo> however, i'm not a bash wiz; this surprised me:
[12:30:33] <quazimodo> for i in ""; do echo "this is $i"; done  =>  "this is "
[12:31:10] *** Joins: shad (~shad@user/shad)
[12:31:14] <quazimodo> do I rm -rf & sell the computer?
[12:32:51] <tsujp> null terminator in string perhaps?
[12:32:53] <tsujp> that'd be my guess
[12:33:58] <quazimodo> ... strings always kill me, is there a way to just take a string & print the character codes in it
[12:34:10] <quazimodo> I can never tell what kind of space/tab/newline/terminators a string has
[12:36:43] *** Joins: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net)
[12:37:10] *** Quits: ih8wndz (ih8wndz@mail.zero.svr.trnkmstr.com) (Ping timeout: 268 seconds)
[12:37:41] *** Joins: ih8wndz (ih8wndz@mail.zero.svr.trnkmstr.com)
[12:39:51] <quazimodo> ok, so for some reason `for i in "" ...` does include a terminator of some kind, using `for i in $(echo "" | tr -dc '[:print:]') ...` results in the behaviour I expected
[12:39:55] <tsujp> im pretty sure it is null im just playing around with some stuff now
[12:40:40] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[12:41:17] *** Joins: StyXman (~mdione@2a01:e0a:5e5:4790:20d:b9ff:fe52:1a0)
[12:41:22] <tsujp> how do you run commands in irc again
[12:41:38] <tsujp> !help
[12:41:38] <greybot> I can do: !faq {number|string}, !pf {number|string}, !learn key value, !meta key, !metaurl key, !forget key, !searchkeys string, !factstats, !faqstats, !faqpages, !date, !version. For help with Bash builtins, use "help command" in bash.
[12:41:56] <tsujp> greybot for i in "abc"; do printf '%d\n' "'$i"; done
[12:41:57] <StyXman> tsujp: those are bot commands, not irc commands
[12:42:09] <quazimodo> ha
[12:42:12] <tsujp> I mean there is a helper bot in this irc that runs bash, idk how to invoke it though
[12:42:20] <jetchisel> shbot not greybot
[12:42:24] <tsujp> shbot for i in "abc"; do printf '%d\n' "'$i"; done
[12:42:34] <quazimodo> i /think/ that "od -c" can be used to look at the characters
[12:42:37] <jetchisel> # for i in "abc"; do printf '%d\n' "'$i"; done
[12:42:39] <shbot> jetchisel: 97
[12:42:48] <StyXman> oh, this is one of those channels were there are more bots than people? :-P
[12:42:51] <tsujp> # for i in ""; do printf '%d\n' "'$i"; done
[12:42:52] <shbot> tsujp: 0
[12:42:58] <tsujp> yeah 0, that's NULL terminator
[12:43:00] <tsujp> my guess was right
[12:43:28] <tsujp> as for why it doesn't do all 4 in that loop with abc (and old mate \0) idk
[12:43:40] *** Joins: karakedi (~eAC53C340@user/karakedi)
[12:43:40] <quazimodo> you aussie?
[12:43:44] <tsujp> ye
[12:43:49] <quazimodo> fuckn ye you are
[12:43:56] <tsujp> struth cob
[12:44:23] <quazimodo> i'm surprised that 'printf "" | od -c' doesn't  show the null terminator
[12:44:29] <StyXman> tsujp: I would say the "" variant is wrong
[12:44:46] <StyXman> quazimodo: because there is none?
[12:45:02] <StyXman> you're confusing C internals to what really happens in the pipe
[12:45:03] <quazimodo> then why does 'for i in ""...' seem to invent one
[12:45:03] <geirha> # printf '\0' | od -An -c
[12:45:07] <shbot> geirha:   \0
[12:45:08] <tsujp> i wonder what -n with echo does
[12:45:27] <StyXman> tsujp: "don't add trailing \n"
[12:45:30] <tsujp> oh wait it's the for i that does it
[12:45:31] <StyXman> also man echo :)
[12:45:50] <tsujp> no I mean "i wonder what" as in "lets see what happens" but the input is a literal string, not from echo
[12:46:12] <tsujp> removing \n still doesn't do the entire list StyXman
[12:46:24] <tsujp> # for i in "abc"; do printf '%d' "'$i"; done
[12:46:25] <shbot> tsujp: 97
[12:46:26] <StyXman> tsujp: there is no NULL
[12:46:42] <StyXman> that's a C internal;
[12:46:47] <tsujp> oh.. well how in the doofus does `for i in ""` work then?
[12:47:06] <StyXman> wait
[12:47:07] <tsujp> that string is zero length yet it prints a space when looped like that
[12:47:12] <quazimodo> I love being a developer... except I dont and this sucks
[12:47:18] <geirha> it assigns the empty string to the variable i
[12:47:27] <StyXman> for i in "abc"; do printf '%d\n' "'$i"; done <-- has a typo
[12:47:28] <quazimodo> geirha: but whyyeeeeee
[12:47:40] <StyXman> see the lingering '
[12:47:41] <tsujp> # for i in ""; do echo "x$i y"; done
[12:47:42] <shbot> tsujp: x y
[12:47:50] <quazimodo> for i in "abc"; do ... done will do ... done with "a", "b" and "c"
[12:47:55] <geirha> why not?
[12:48:03] <StyXman> tsujp: yeah, I wouldn't call that abug, mostly a quirk
[12:48:04] <quazimodo> for i in ""; do ... done will do ... done with ""
[12:48:13] <geirha> no, for i in "abc" iterates ONCE with i=abc
[12:48:17] <quazimodo> geirha: sorry, yes
[12:48:43] *** Quits: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[12:48:52] <StyXman> # for i in "abc"; do echo $i; done
[12:48:54] <shbot> StyXman: abc
[12:48:55] <jetchisel> # printf '<%s>\n' "This is $i"
[12:48:56] <shbot> jetchisel: <This is >
[12:49:05] <tsujp> # for i in ""; do echo "asdsda $i x"; done
[12:49:06] <geirha> s=abc; for (( i = 0, n = ${#s}; i < n; ++i )); do printf '%d ' "'${s:i:1}"; done ; printf '\n'
[12:49:07] <shbot> tsujp: asdsda  x
[12:49:12] <geirha> # s=abc; for (( i = 0, n = ${#s}; i < n; ++i )); do printf '%d ' "'${s:i:1}"; done ; printf '\n'
[12:49:14] <shbot> geirha: 97 98 99
[12:49:34] <tsujp> oh it doesn't output the space
[12:49:41] <StyXman> tsujp: "" is a list with a single element that happens to be the empty string
[12:49:50] *** Joins: roadie` (~user@2a02:8108:ec0:1427:55d5:76bb:9585:9823)
[12:50:08] <tsujp> WAIT A MINUTE this is quazimodo 's fault, we've all been duped! (or at least I have)
[12:50:09] <StyXman> there is no iteration over strings
[12:50:11] <tsujp> for i in ""; do echo "this is $i"; done  =>  "this is "
[12:50:12] <StyXman> just lists
[12:50:24] <tsujp> of course there is a space, you put a space between `is` and `$i`
[12:50:24] <quazimodo> yes delicious
[12:50:28] <tsujp> idk why I read that as two spaces
[12:50:39] <tsujp> nothing to see here folks, we're literally all talkinng about nothing lmfao
[12:50:42] <tsujp> wow what an adventure that was
[12:50:44] <quazimodo> all your base are belong tome
[12:51:10] *** Quits: shad (~shad@user/shad) (Ping timeout: 240 seconds)
[12:51:25] <StyXman> https://en.wikipedia.org/wiki/Tomme ?
[12:51:29] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[12:52:22] <quazimodo> it's some gigantic nightmare that "" is a 'value' when iterated, but the string "abc<newline>def" is not a 'value' but a collection of values
[12:52:46] <StyXman> quazimodo: word splitting
[12:52:51] <quazimodo> probably because of some ghoulish old code that first takes the "" and runs it through a splitter
[12:53:00] <quazimodo> THIS IS HURTING ME
[12:53:01] *** Quits: Lunatrius (~Lunatrius@77.38.92.228) (Read error: Connection reset by peer)
[12:53:14] <tsujp> absolutely haram
[12:53:16] <StyXman> quazimodo: don't try to use bash for serious programming :)
[12:53:16] <quazimodo> it's got 2 very different behaviours that scare my pants off
[12:53:52] <StyXman> bash is quirky as folk :-P
[12:53:55] <geirha> printf '%d\n' "'x"  with this syntax, it uses only the first character after the ' and ignores the rest
[12:53:59] *** Quits: roadie` (~user@2a02:8108:ec0:1427:55d5:76bb:9585:9823) (Client Quit)
[12:54:00] <StyXman> bah, POSIX shell
[12:54:09] <tsujp> hold up
[12:54:12] <tsujp> "" is a value? what?
[12:54:17] <StyXman> geirha: yeah, what about THAT
[12:54:22] <StyXman> tsujp: it is
[12:54:30] <StyXman> an empty string
[12:54:49] <geirha> when you give it the empty string, that's  ' and NUL under the hood, because bash variables are stored as C strings and C strings use NUL as terminator
[12:54:53] <StyXman> # for i in "" a "" b; do echo -n ">$i< "; done
[12:54:54] <shbot> StyXman: >< >a< >< >b<
[12:55:09] <geirha> so you get the ascii value of \0
[12:55:21] <StyXman> geirha: yeah, but that's a implementation detail
[12:55:31] <StyXman> the language barely talks about NULLs
[12:55:35] <geirha> It has little to do with the loop
[12:55:50] <geirha> it's the same with read's -d
[12:56:01] *** Joins: Lunatrius (~Lunatrius@77.38.92.228)
[12:56:10] <StyXman> geirha: sorry, which command are you talking about?
[12:56:26] *** Joins: waxfire2 (~waxfire@65.119.2.240)
[12:56:31] <geirha> tsujp's loops
[12:56:41] <tsujp> yeah so by default if IFS is unchanged words are split at space, newline, and tab yeah
[12:56:45] <StyXman> ah
[12:56:57] <StyXman> # for i in ""; do printf '%d\n' "$i"; done
[12:56:58] <shbot> StyXman: 0
[12:56:59] <tsujp> # for i in "a b c"; do echo -n ">$i< "; done
[12:57:00] <shbot> tsujp: >a b c<
[12:57:20] <StyXman> tsujp: again, no string iteration like in Python
[12:57:39] <geirha> for i in a b c; do printf '%d ' "'$i"; done
[12:57:58] <StyXman> geirha: #
[12:58:03] <geirha> # for i in a b c; do printf '%d ' "'$i"; done
[12:58:05] <shbot> geirha: 97 98 99
[12:58:29] <StyXman> # printf '%d' "'"
[12:58:31] <shbot> StyXman: 0
[12:58:34] *** Quits: waxfire (~waxfire@65.119.2.240) (Ping timeout: 260 seconds)
[12:58:34] *** waxfire2 is now known as waxfire
[12:58:35] <StyXman> ffffffffffff.....
[12:58:40] <tsujp> LMFAO
[12:58:59] <StyXman> YGBFKM
[12:58:59] <jetchisel> # printf '%d' ""
[12:59:02] <shbot> jetchisel: 0
[12:59:02] <tsujp> im not intensively focusing on this right now, so ima uhh stop before I confuse myself to all heck
[12:59:14] <StyXman> hehehe
[12:59:24] <StyXman> tread lightly with bash
[12:59:36] <tsujp> how dare you give me sound advice!
[13:00:36] <StyXman> tsujp: because I'm maintaing a 26kLoC monster in bash and I know what lays ahead :)
[13:00:59] <tsujp> i was being sarcastic :(
[13:01:03] *** Joins: rendar (~rendar@user/rendar)
[13:01:41] *** Quits: mnemonic (~semeion@user/semeion) (Quit: WeeChat 3.2)
[13:02:12] <StyXman> tsujp: I'm not :)
[13:02:23] <tsujp> anyway good job bash gang another mystery for the odyssey solved
[13:02:42] <tsujp> i like bash, its kind of like a really esoteric and quirky "free" solution to stuff because its installed everywhere
[13:02:47] *** Quits: mcint (mcint@user/mcint) (Ping timeout: 240 seconds)
[13:03:08] <tsujp> im going to unironically try writing serious stuff in it and become one of those dark magicians that just knows how bash is going to behave without reference
[13:03:18] *** Joins: fdan (~fdan@192.146.154.3)
[13:03:27] <StyXman> I seriously don't, it's a bad-terrible language for most stuff
[13:04:00] <StyXman> tsujp: like that's going to help you gatting a job anywhere
[13:04:08] <tsujp> why? the esoteric-acy of it?
[13:04:20] <StyXman> tsujp: no, the quirkyness of it
[13:04:33] <StyXman> integer support is basic
[13:04:36] <StyXman> no floats
[13:04:43] <StyXman> -eq vs ==
[13:05:20] <StyXman> no nested data structures
[13:05:21] *** Quits: tccki (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795) (Quit: tccki)
[13:05:41] <StyXman> for 'advanced' stuff requires binaries that are NOT everywhere
[13:06:03] <StyXman> relying on other ugly languages like awk, sed
[13:06:45] <StyXman> and bc for serious math
[13:07:14] <StyXman> and so many pitfalls the'res a whole site about it
[13:07:20] <fdan> what is the difference between myvar=hello and export myvar=hello
[13:07:27] <Soliton> !export
[13:07:27] <greybot> The environment comprises the subset of variables that are exported, either permanently by the "export" statement or temporarily by prefix assignment. All variables are copied to subshells, but only exported variables are received by other programs; that is the ONLY effect of "export". It's intentionally not possible to modify variables in another process. http://mywiki.wooledge.org/Environment
[13:07:29] <StyXman> https://mywiki.wooledge.org/BashPitfalls
[13:07:36] <tsujp> export is available to subprocesses iirc
[13:07:36] *** Joins: tccki (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795)
[13:07:40] *** Joins: Night-Shade (~Tim@ip5b403d56.dynamic.kabel-deutschland.de)
[13:07:50] <StyXman> fdan: the second is seens by commands run, the former is only seen by the current script
[13:08:02] <StyXman> tsujp: all variables are global unless local'ized
[13:08:10] <quazimodo> i still cant believe that bash takes 'for i in whatever' bash first takes the whatever & runs it through a splitter without first checking if it's empty or not
[13:08:13] <quazimodo> i am a very sad panda
[13:08:14] <fdan> StyXman: can you brief me more..
[13:08:21] *** Joins: Bhavuk (~BTaneja@103.132.28.33)
[13:08:22] *** Quits: k-man (~jason@user/k-man) (Ping timeout: 260 seconds)
[13:08:24] <fdan> when we use export myvar=hello,
[13:08:27] <StyXman> fdan: read greybot's answer
[13:08:47] *** Joins: k-man (~jason@user/k-man)
[13:08:51] <StyXman> tsujp: and I could go on and on but I have a job
[13:09:03] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[13:09:13] <StyXman> fdan: when you need subprocesses to see that envvar
[13:09:39] <Soliton> usually env variables are upper case, btw.
[13:09:46] <fdan> got it
[13:10:13] <StyXman> usually, yes
[13:10:19] <StyXman> I should go
[13:10:23] *** Parts: StyXman (~mdione@2a01:e0a:5e5:4790:20d:b9ff:fe52:1a0) (cheers!)
[13:10:25] <tsujp> ive seen bash codecases where everything is uppercase
[13:10:28] <tsujp> env var or not
[13:10:33] <Soliton> !crap
[13:10:33] <greybot> The overwhelming majority of bash scripts, code, tutorials, and guides on the Internet are crap. Sturgeon was an optimist.
[13:10:46] <tsujp> who is Sturgeon?
[13:10:52] <Soliton> an optimist.
[13:11:01] <tsujp> When was Sturgeon?
[13:11:03] <geirha> !sturgeon
[13:11:04] <greybot> "90% of everything on the Internet is CRUD." https://en.wikipedia.org/wiki/Sturgeon%27s_law
[13:11:50] <tsujp> What do you lot think of dylanaraps? That bash lord who wrote an irc client, fff, and maintains the pure bash bible
[13:14:00] <Soliton> looks like they suggest to trim whitesapce with ''set -- $*''.
[13:14:58] <Soliton> anyway, no clue never heard of.
[13:16:20] <tsujp> I have one more question before I must get back to productive work; how many ! commands for greybot are there
[13:16:38] <tsujp> As in, how many scenarios like export, etc have you lot covered hahaha
[13:16:43] <tsujp> I've seen quite a few used
[13:16:56] <Soliton> !factoids
[13:16:56] <greybot> My factoid database, and other things, are available at http://wooledge.org/~greybot/
[13:17:11] <tsujp> of course there's a command for my question, how meta
[13:17:41] <geirha> !searchkeys foo
[13:17:41] <greybot> geirha: 4 matches found: foo, foobar, foot, type-foo
[13:18:11] *** Joins: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854)
[13:18:28] *** Joins: shad (~shad@user/shad)
[13:19:39] *** Quits: howdoi (uid224@id-224.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[13:19:57] <quazimodo> how do i 'od -c' the _true value_ of an env var?
[13:20:32] <Soliton> printf %s "$VAR" | od -c
[13:20:33] <quazimodo> echo "$myvar" | od c vs echo $myvar | od -c vs echo ${myvar} | od -c vs printf "%s" "$myvar" and so on
[13:20:38] <quazimodo> ok
[13:20:45] <tsujp> if FOO="test" is $FOO not "test"? What does _true value_ here mean?
[13:20:49] <quazimodo> "$VAR" < that doesn't wrap it somehow?
[13:21:07] <quazimodo> my true value i mean the bits in memory
[13:21:17] <quazimodo> i just want to know what the hell the bits/bytes/characters are
[13:22:01] <geirha> if in doubt, use printf
[13:22:15] <quazimodo> ok
[13:22:48] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[13:23:05] <geirha> though printf %s "$VAR" only works for the environment variables that happen to have a valid shell variable name
[13:23:09] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[13:23:24] <geirha> the non-standard printenv command can be used for those weird vars
[13:23:35] <quazimodo> ok
[13:26:58] <Soliton> the environment of a process are just a list of strings. those strings don't even have to take the form of key=value.
[13:27:12] <quazimodo> so this should give me the true value of an env var in hex format? printf %s ${foo} | hexdump -Cv
[13:27:27] <Soliton> !quotes
[13:27:27] <greybot> https://mywiki.wooledge.org/Quotes
[13:28:12] <quazimodo> I was under the impression that ${...} was kosher
[13:28:24] <Soliton> it has nothing to do with quoting.
[13:28:47] <Soliton> quoting prevents word splitting and pathname expansion.
[13:29:08] <quazimodo> ok so here's where i've ben lead astray
[13:29:21] <geirha> !${
[13:29:21] <greybot> Without curly braces parameter expansions refer to the longest valid variable name or shortest positional parameter. "${var}bar" expands the parameter named "var" while "$varbar" expands "varbar". "$123" references argv[1] and "${123}" references argv[123]. Braces are requried for parameters > 9, special PEs, and array expansions: ${10}, ${var##pat}, ${arr[5]}. BRACES AREN'T A SUBSTITUTE FOR QUOTES!
[13:29:39] <geirha> Another case of Sturgeon
[13:29:50] <quazimodo> quoting in bash is not like in other languages wheer it declars the beginning & end of a string, but actually it means don't split or expand, then?
[13:30:18] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[13:30:20] <Soliton> well, both
[13:30:27] <quazimodo> <3
[13:30:30] <quazimodo> just loving this
[13:30:43] <Soliton> you do use quotes so that "foo bar" is one string.
[13:30:57] <geirha> yes, it prevents word splitting and pathname expansion, and escapes some meta characters from being from being treated specially
[13:31:10] <quazimodo> oh god
[13:31:18] <Soliton> (however "foo bar"baz is also a single string)
[13:31:27] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:31:30] <quazimodo> for i in $var splits, for i in "$var" doesn't split
[13:31:33] <quazimodo> and i want to die
[13:31:39] <Soliton> !qefs
[13:31:39] <quazimodo> my life is already so hard
[13:31:39] <greybot> "$Quote" "$Every" "$Fucking" "$Substitution"
[13:31:59] *** Joins: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se)
[13:32:09] <quazimodo> yeah but quoting in for i in "$foo" doesn't split with IFS so it's useless?
[13:32:20] <Soliton> !drlwf
[13:32:20] <greybot> https://mywiki.wooledge.org/DontReadLinesWithFor ... "for" is for iterating arguments/arrays, not strings. Never do: for x in $(cat file), or for x in $var; instead, use a glob (*.txt), an array ("${hosts[@]}") or a while-read loop. See also https://mywiki.wooledge.org/BashPitfalls#pf1
[13:32:56] <Soliton> if foo is supposed to be a list it should be an array.
[13:34:22] <quazimodo> ok so then I guess I need to split my string into an array
[13:35:04] <Soliton> yes. if it comes from a stream you can use mapfile or read -a to do that.
[13:35:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Read error: Connection reset by peer)
[13:36:46] <quazimodo> in this case from awk
[13:39:39] <quazimodo> wowweee the behaviour is so weird, i'm coming to terms with it but so unexpected
[13:44:58] *** Quits: Night-Shade (~Tim@ip5b403d56.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:46:03] *** Quits: iomari891 (~iomari891@129.205.113.2) (Read error: Connection reset by peer)
[13:46:31] *** Joins: iomari891 (~iomari891@129.205.113.2)
[13:51:57] *** Joins: diamondbond (~diamondbo@175.157.245.77)
[13:53:08] *** Quits: winstonsmith (~winstonsm@109.201.152.161) (Remote host closed the connection)
[13:53:28] *** Joins: winstonsmith (~winstonsm@109.201.152.164)
[13:54:37] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[13:55:05] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[13:55:29] *** Joins: cdown (~cdown@194.207.141.245)
[13:58:45] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[13:59:12] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[14:07:11] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[14:11:40] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[14:16:53] *** Quits: diamondbond (~diamondbo@175.157.245.77) (Read error: No route to host)
[14:19:47] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[14:20:17] *** Joins: yetoo__ (~yetoo@user/yetoo)
[14:20:25] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (Quit: I Break D Ert)
[14:20:44] *** Joins: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[14:23:31] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[14:23:49] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[14:25:07] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[14:25:23] *** Joins: yetoo__ (~yetoo@user/yetoo)
[14:27:37] *** Joins: akhenaton (~akhenaton@185.169.233.38)
[14:28:25] *** Joins: tobybl (~tobybl@198.202.200.146.dyn.plus.net)
[14:29:48] *** Quits: cdown (~cdown@194.207.141.245) (Ping timeout: 268 seconds)
[14:29:54] *** Quits: tobybl_ (~tobybl@208.193.115.87.dyn.plus.net) (Ping timeout: 265 seconds)
[14:33:47] *** Quits: _val_ (~valentin@82-169-14-137.biz.kpn.net) (Ping timeout: 240 seconds)
[14:34:39] *** Quits: akhenaton (~akhenaton@185.169.233.38) (Quit: leaving)
[14:39:49] *** Joins: redgloboli (~redglobol@user/redgloboli)
[14:40:40] *** Quits: mknod (~mknod@user/mknod) (Quit: mknod)
[14:43:43] *** Joins: tobybl_ (~tobybl@198.202.200.146.dyn.plus.net)
[14:44:02] *** Quits: tobybl (~tobybl@198.202.200.146.dyn.plus.net) (Ping timeout: 260 seconds)
[14:44:33] *** Joins: andril (~andril@2601:586:8400:e4::1006)
[14:45:16] *** Quits: kurahaupo (~kurahaupo@58.84.89.180) (Ping timeout: 252 seconds)
[14:49:22] *** Quits: klys (~mdasoh@show.op8.us) (Remote host closed the connection)
[14:50:57] *** Quits: wisefriday (wisefriday@sempiternity.club) (Ping timeout: 245 seconds)
[14:54:19] *** Joins: zeedo (~zeedo@cpc157903-grth13-2-0-cust152.16-4.cable.virginm.net)
[14:54:28] *** Joins: kurahaupo (~kurahaupo@58.84.89.180)
[14:54:31] *** Joins: klys (~mdasoh@show.op8.us)
[14:56:25] *** Quits: iomari891 (~iomari891@129.205.113.2) (Ping timeout: 252 seconds)
[14:57:25] *** Quits: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854) (Ping timeout: 252 seconds)
[14:57:50] *** Joins: junagu_ (~junagu@2a02:8010:6989:0:d6cc:2cc9:dc0f:bcf2)
[14:57:57] *** Joins: yetoo_ (~yetoo@user/yetoo)
[14:58:34] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[15:00:21] *** Quits: tobybl_ (~tobybl@198.202.200.146.dyn.plus.net) (Ping timeout: 265 seconds)
[15:01:11] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[15:01:18] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:02:02] *** Joins: testuser321 (~wandering@115.187.42.167)
[15:03:05] *** Quits: yetoo_ (~yetoo@user/yetoo) (Remote host closed the connection)
[15:03:24] *** Joins: yetoo_ (~yetoo@user/yetoo)
[15:05:47] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:17:58] *** Joins: wisefriday (wisefriday@sempiternity.club)
[15:23:35] *** Joins: tobybl (~tobybl@210.242.200.146.dyn.plus.net)
[15:25:04] *** Quits: tobybl (~tobybl@210.242.200.146.dyn.plus.net) (Client Quit)
[15:26:38] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.2)
[15:26:56] *** Joins: vysn (~vysn@user/vysn)
[15:28:02] *** Quits: yetoo_ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[15:28:20] *** Joins: tobybl (~tobybl@210.242.200.146.dyn.plus.net)
[15:28:24] *** Joins: yetoo_ (~yetoo@user/yetoo)
[15:30:19] *** Joins: Ders (MrA@user/ders)
[15:33:04] <tsujp> idk qefs isn't a tautology, what if you need that expansion to be used as args
[15:33:13] <tsujp> it'll treat the entire expansion as a single arg instead of N
[15:33:19] <tsujp> assuming whitespace delimited
[15:33:26] <tsujp> inb4 xargs
[15:34:31] <geirha> no, because if it contains multiple arguments, you use an array, not a string
[15:36:25] *** Quits: kurahaupo (~kurahaupo@58.84.89.180) (Ping timeout: 252 seconds)
[15:36:46] <geirha> e.g.  args=( foo "bar baz" ); cmd "${args[@]}"   is equivalent to   cmd foo "bar baz"
[15:37:56] <tsujp> good point
[15:38:31] *** Joins: Krail (~Krail@user/alexdelarge)
[15:39:37] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[15:39:57] *** Joins: Everything (~Everythin@37.115.210.35)
[15:39:57] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:40:53] *** Joins: kurahaupo (~kurahaupo@58.84.89.180)
[15:43:01] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[15:48:57] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 268 seconds)
[15:49:10] *** Quits: sinaowolabi_ (~SinaOwola@102.134.114.1) (Ping timeout: 265 seconds)
[15:49:40] *** Quits: zeedo (~zeedo@cpc157903-grth13-2-0-cust152.16-4.cable.virginm.net) (Ping timeout: 252 seconds)
[15:50:55] *** Joins: seninha (~seninha@user/seninha)
[15:51:43] *** Joins: p3rL (~uid0@user/p3rl)
[15:51:46] <p3rL> hello
[15:51:50] *** Joins: [twisti] (~twisti@toadwater.com)
[15:52:19] <p3rL> anyone
[15:52:36] <ormaaj> everyone
[15:52:49] <p3rL> i want to move line 3rd into last line in bash
[15:53:01] <p3rL> how to do with sed/awk
[15:53:53] <[twisti]> we have code like this: `mountpoint -q ${MOUNT_POINT} || err=$? \n if [ $err -eq 0 ]` which results in a sadly german error message that i would translate as 'One-digit (unary) operator expected'. but how can $err be anything else than an integer here ?
[15:54:20] <Soliton> you're missing quotes.
[15:54:22] *** Joins: besnn (~besnn@user/besnn)
[15:54:40] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[15:54:41] <Soliton> you can just write  if mountpoint ...  anyway
[15:55:12] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[15:55:37] <pj> if mountpoint -q "$MOUNT_POINT"; then ...
[15:56:15] <[twisti]> where am i missing the quote ? err is used later to log error details
[15:56:24] <Soliton> !qefs
[15:56:24] <greybot> "$Quote" "$Every" "$Fucking" "$Substitution"
[15:56:31] <[twisti]> :D
[15:56:46] <Soliton> ![$?
[15:56:46] <greybot> Don't do this: ``mycommand; if [ $? -eq 0 ]'' -- You're running the [ command and checking its exit code to test whether "mycommand"'s exit code is 0. That's a pointless operation, test mycommand directly: ``if mycommand''
[15:57:02] *** Quits: Voxel (~Voxel@173-46-68-178.baltnet.ru) (Quit: Client closed)
[15:57:33] <[twisti]> so `mountpoint -q "${MOUNT_POINT}" || err="$?" \n if [ "$err" -eq 0 ]` ?
[15:57:35] <pj> you're missing quotes in two different places, you're doing the pointless test mentioned above, you should be using [[ ]] instead of [ ] (although to use either in this case is still pointless)
[15:57:55] <pj> [twisti]: are you seriously not paying attention?
[15:57:59] *** Joins: wstrnr (~wstrnr@user/wstrnr)
[15:58:11] <p3rL> hello ?
[15:58:14] <Soliton> if mountpoint -q "$MOUNT_POINT"; then ...; else err=$?; fi
[15:58:18] <wstrnr> hi, p3rL
[15:58:34] <p3rL> i want to move 3rd line into last line in bash
[15:58:41] <p3rL> with sed or awk .. anything
[15:58:41] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:58:52] <[twisti]> ah, i wasnt aware i could still get the return code if i embedded the command directly in the if condition
[15:59:09] <pj> yes, as long as you don't run anotehr command first.
[15:59:25] <wstrnr> # printf %s\\n {1..4} | awk 'NR == 3 { remember=$0; next } 1; END { print remember }' | tr '\n' ' '
[15:59:26] <shbot> wstrnr: 1 2 4 3
[15:59:31] <wstrnr> works.
[15:59:44] <p3rL> letme try
[16:00:28] <wstrnr> the | tr '\n' ' '   was done only for the sake of the bot, to avoid printing 4 separate lines...
[16:00:46] <p3rL> get it
[16:01:05] *** Quits: yetoo_ (~yetoo@user/yetoo) (Remote host closed the connection)
[16:01:25] *** Joins: yetoo_ (~yetoo@user/yetoo)
[16:02:19] <p3rL> what does NR means number of Row
[16:02:30] <wstrnr> "number of record"
[16:02:33] *** Joins: sinaowolabi (~SinaOwola@169.159.82.148)
[16:02:45] <p3rL> ok thanks wstrnr
[16:04:18] <wstrnr> info gawk says in the "(gawk)Records" node, that NR is "total number of input records read so far from all data files"
[16:04:50] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[16:05:35] <p3rL> blessed Unix
[16:05:40] *** Quits: sinaowolabi (~SinaOwola@169.159.82.148) (Remote host closed the connection)
[16:08:36] *** Quits: yetoo_ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[16:09:01] *** Joins: yetoo_ (~yetoo@user/yetoo)
[16:09:35] <wstrnr> [twisti]: if you want to add additional handling to normal process of running a program, you can create a wrapper for the command that runs the program. in your case it could be something like,
[16:09:37] <wstrnr> [twisti]: mount_save_status() { mountpoint -q "$MOUNT_POINT"; mp_status=$?; return "$mp_status"; }  this will set the variable mp_status for later use in the script as a side-effect
[16:10:00] <wstrnr> making wrappers for various commands is what bash is most often used for
[16:11:28] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[16:11:48] <[twisti]> there is something more fucky going on, im still debugging, but $? (and also "$?") is empty, not 0, but just nothing at all, echo "'$?'" prints out ''
[16:12:19] <Soliton> prove it.
[16:12:29] <[twisti]> i dont know how
[16:12:42] <Soliton> show code that does what you say.
[16:14:00] <wstrnr> # echo() { if [[ $1 == \'0\' ]]; then command echo "''"; else command echo "$@"; };   echo "'$?'";  echo something else
[16:14:01] <shbot> wstrnr: bash: syntax error near unexpected token `}'
[16:14:21] <wstrnr> # echo() { if [[ $1 == \'0\' ]]; then command echo "''"; else command echo "$@"; fi; };   echo "'$?'";  echo stupid joke is spoiled by now
[16:14:23] <shbot> wstrnr: ''
[16:14:23] <shbot> wstrnr: stupid joke is spoiled by now
[16:14:59] <[twisti]> https://textbin.net/uvccwjxgzc
[16:15:28] *** Quits: andril (~andril@2601:586:8400:e4::1006) (Ping timeout: 268 seconds)
[16:15:35] <[twisti]> i understand that you recommended not to do it that way, and im working towards the suggestion, but im at step one of that
[16:16:06] <wstrnr> it shows "Loading Please wait..."
[16:16:09] <Soliton> you're not setting err if mountpoint succeeds...
[16:16:23] <[twisti]> d'oh
[16:16:46] <wstrnr> [twisti]: you should replace '||' to ';'
[16:16:48] <Soliton> if you always want to set err then don't put it after ||.
[16:17:11] <wstrnr> [twisti]: otherwise err will not be set if "mountpoint" program will return with exit status of success
[16:17:44] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[16:17:57] <[twisti]> yeah, that makes sense. i suppose i should have just outright skipped step one and just went straight to the proposed solutions from earlier
[16:20:19] <wstrnr> [twisti]: also see pitfall "cmd; ((!$?)) || die", it may make sense in your case
[16:20:33] <wstrnr> !pf 44 >[twisti]
[16:20:33] <greybot> [twisti]: https://mywiki.wooledge.org/BashPitfalls#pf44 -- Don't do this! -- cmd; (( ! $? )) || die
[16:21:38] <pj> # true || err=$?; echo "$err"
[16:21:39] <shbot> pj: no output
[16:21:43] <pj> # true ; err=$?; echo "$err"
[16:21:45] <shbot> pj: 0
[16:22:23] <wstrnr> there is a factoid about || and && short-cirquit operators
[16:22:33] <pj> !||
[16:22:33] <greybot> Short-circuit control operators <http://mywiki.wooledge.org/BashSheet#Tests> A || B means "Run A. If A fails, run B." A && B means "Run A. If A succeeds, run B." Example: foobar || { echo "error" >&2; exit 1; }
[16:23:08] *** Joins: legola (~legola@46.235.100.27)
[16:24:04] *** Quits: Krail (~Krail@user/alexdelarge) (Quit: Krail)
[16:24:16] <[twisti]> thanks
[16:24:26] <p3rL> wstrnr https://termbin.com/xy6c
[16:25:19] <ormaaj> # printf '%s\n' {0..9} | sed -r '3{h;d};${p;x}' | tr \\n ' '; echo p3rl
[16:25:20] <wstrnr> p3rL: you know, you can just save the lines into a text file and edit it in your favorite text editor
[16:25:21] <shbot> ormaaj: 0 1 3 4 5 6 7 8 9 2 p3rl
[16:25:35] <p3rL> letme try
[16:26:34] <Soliton> -r does nothing there.
[16:26:46] <p3rL> ormaaj its not working
[16:26:52] <ormaaj> yeah I always use -r
[16:27:09] <Soliton> perhaps switch to -E that's going to be POSIX.
[16:27:40] <p3rL> ori https://termbin.com/e8krs
[16:27:43] <p3rL> ormaaj*
[16:27:48] <p3rL> it did nothing i think
[16:28:40] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 252 seconds)
[16:28:45] <wstrnr> if you want to "overwrite" a file you have to   sed '...' file >file2 && mv file2 file
[16:29:00] <geirha> yes
[16:29:14] <Soliton> often times a file editor is useful in editing files.
[16:29:24] <pj> there is sed -i
[16:29:45] <p3rL> yes but the output its give its not the same i want
[16:30:06] <p3rL> i want to cut first 2 lines ... and print the rest lines and in the end print those 2 lines
[16:30:07] *** Joins: Crescendo (~Crescendo@user/crescendo)
[16:30:08] <Soliton> probably because you didn't manage to change a 3 into a 2.
[16:30:25] <Soliton> ah, the task keeps on changing.
[16:30:40] *** Quits: ninjabuffet (~ninjabuff@user/ninjabuffet) (Ping timeout: 268 seconds)
[16:30:41] <wstrnr> p3rL: do lines come from a file or from a pipe?
[16:30:41] <p3rL> Soliton no if u see the output https://termbin.com/xy6c
[16:30:55] <pj> talk about moving targets ... you can do that with pure bash, or even with bash and head if you want.
[16:31:12] <Soliton> i see the output fine and it's all trivial. just communication with you is impossible so i don't try.
[16:31:16] <p3rL> wstrnr lines are came from
[16:31:16] <p3rL> ~$ cat playlist.lst  | nc termbin.com 9999
[16:31:16] <p3rL> https://termbin.com/0n44
[16:31:22] <p3rL> playlist.lst
[16:31:44] <wstrnr> p3rL: if the lines are in the file playlist.lst, then ed is probably a better tool for reordering lines "automatically"
[16:31:57] <wstrnr> !ed
[16:31:58] <greybot> ed is a command-based file editor. See http://wiki.bash-hackers.org/howto/edit-ed - http://sdf.lonestar.org/index.cgi?tutorials/ed - http://wolfram.schneider.org/bsd/7thEdManVol2/edtut/edtut.pdf
[16:32:11] <Soliton> there wasn't even any suggestion so far that an automatism is wanted.
[16:32:35] <wstrnr> ed also can be used interactively...
[16:32:50] <p3rL> but i didn't get it how to cut first two lines and print the rest lines and then append those 2 cutted line in the last
[16:33:09] <Soliton> are you able to operate any file editor?
[16:33:41] <p3rL> i dont want to do it manually i want to put this code in bot
[16:33:50] <p3rL> !skip 3
[16:33:54] <p3rL> so it will skip line 3
[16:34:23] <Soliton> so script the file editor of your choice.
[16:34:30] <Soliton> ed was already mentioned.
[16:34:39] <p3rL> but how to do with ed
[16:34:43] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 252 seconds)
[16:34:44] <p3rL> can u please give command
[16:34:51] <Soliton> without any clue? yeah right.
[16:35:12] <Soliton> why do you code a bot when you don't want to learn anything?
[16:35:21] * ormaaj finds something better to do.
[16:35:32] <p3rL> cat playlist.lst | ed "cut first two lines & print the rest lines & in the end append those 2 cutted lines"
[16:35:50] <Soliton> always with the useless cat.
[16:35:57] <Soliton> well, good luck.
[16:35:57] <p3rL> lol
[16:36:03] <p3rL> skip cat
[16:36:05] <wstrnr> it's more like   ed file <<<"commands here"
[16:36:27] <p3rL> ed playlist.lst <<< "cut first two lines & print the rest lines & in the end append those 2 cutted lines"
[16:36:48] <tsujp> old mate Dennis Ritchie wrote UNIX with ed didn't he?
[16:36:51] *** Joins: iomari891 (~iomari891@197.210.53.202)
[16:36:52] <tsujp> What an absolute unit
[16:36:56] <geirha> man ed   and find the move command (hint: it's m)
[16:37:27] <wstrnr> it's going to be 1,2m$
[16:37:42] <wstrnr> !ed >see the links, p3rL
[16:37:42] <greybot> see the links, p3rL: ed is a command-based file editor. See http://wiki.bash-hackers.org/howto/edit-ed - http://sdf.lonestar.org/index.cgi?tutorials/ed - http://wolfram.schneider.org/bsd/7thEdManVol2/edtut/edtut.pdf
[16:37:47] <p3rL> i want output like [ 04:55:21 ] <shbot> ormaaj: 3 4 5 6 7 8 9 0 1 2 p3rl
[16:38:17] <ormaaj> rofl
[16:38:37] *** Joins: Krail (~Krail@user/alexdelarge)
[16:40:10] <wstrnr> # printf %s\\n {1..9} >playlist.lst;  ed playlist.lst <<<$'1,2m$\nwq' >/dev/null;  tr '\n' ' ' <playlist.lst; echo
[16:40:12] <shbot> wstrnr: 18
[16:40:12] <shbot> wstrnr: 18
[16:40:12] <shbot> wstrnr: 3 4 5 6 7 8 9 1 2
[16:40:47] <p3rL> nice
[16:40:49] <p3rL> letme try
[16:40:49] <p3rL> D:
[16:40:59] <geirha> mapfile -t playlist < playlist.lst; printf '%s\n' "${playlist[@]:skip-1}" "${playlist[@]::skip-1}"
[16:41:15] <wstrnr> # printf %s\\n {1..9} >playlist.lst;  ed -s playlist.lst <<<$'1,2m$\nwq';  tr '\n' ' ' <playlist.lst; echo
[16:41:17] <shbot> wstrnr: 3 4 5 6 7 8 9 1 2
[16:41:25] <wstrnr> the -s option is for "silent" mode
[16:41:29] <p3rL> finally wstrnr did it
[16:42:29] <wstrnr> p3rL: you probably can do    info '(ed)Commands'   in your shell to see info page with list of commands of ed
[16:42:49] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[16:42:59] <p3rL> yeah i will read about it, i know little much about sed & awk
[16:43:03] <p3rL> now i need to learn ed also
[16:43:15] <wstrnr> many commands are like, move lines from one place to another, or delete lines, or add lines...
[16:43:28] <wstrnr> the previous bash command uses $'...' quoting syntax
[16:43:28] *** Joins: ninjabuffet (~ninjabuff@user/ninjabuffet)
[16:43:28] <p3rL> i was able to do this thing with 3 commands
[16:43:31] <wstrnr> !$''
[16:43:31] <greybot> bash has a special form of quoting, $'string' in which backslash-character combinations are expanded. For example, IFS=$' \t\n' or echo $'It\'s embedded!' http://mywiki.wooledge.org/Quotes
[16:44:01] <wstrnr> you should also understand how it works to really understand that ed <<<$'...' command.  also the <<< here-string redirect
[16:44:03] <wstrnr> !<<<
[16:44:03] <greybot> Here strings. Similar to here documents: The word after <<< is passed to the standard input of a command, with a newline appended. Syntax: ''command <<< "some sentence"'' (Like ''echo "some sentence" | command'', but without the overhead of the subshell)
[16:44:32] <wstrnr> man bash   and   man 1p ed   are your friends
[16:44:51] <p3rL> my friend is #bash :D
[16:45:15] <p3rL> this channel helps alot
[16:47:05] <geirha> !alot
[16:47:06] <greybot> http://hyperboleandahalf.blogspot.no/2010/04/alot-is-better-than-you-at-everything.html
[16:47:20] <geirha> # seq 10 | awk -v skip=3 'NR < skip { buf[++n] = $0; next } {print} END { for (i=1;i<=n;++i) print buf[i] }' | paste -s
[16:47:22] <shbot> geirha: three   four    five    six     seven   eight   nine    ten     one     two
[16:47:52] *** Joins: Count0 (~Anonymous@178.238.11.104)
[16:48:05] <p3rL> geirha wow
[16:48:43] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[16:49:03] <wstrnr> greybot has an angry factoid that is related to the ongoing discussion, i think
[16:49:10] <wstrnr> !raft
[16:49:10] <greybot> Read A Fucking Tutorial! We are NOT here to teach you the very basic beginner steps of bash scripting. You are expected to know basic stuff like "how do I redirect a command's output to a file" and "what's a glob" before you come here. There are links in the channel /topic. Use them BEFORE asking anything!
[16:49:56] <Count0> heh
[16:51:10] *** Quits: iconoclasthero (~quassel@pool-68-238-241-198.phlapa.fios.verizon.net) (Read error: Connection reset by peer)
[16:53:14] <hyper_ch> if someone asked me what a glob is I couldn't really define it except a glob is a glob
[16:53:22] <Soliton> !glob
[16:53:22] <greybot> Globs are shell patterns that can be used for matching strings or expanding pathnames: [[ $name = Bob* ]]; rm -- *.txt; see http://mywiki.wooledge.org/glob
[16:54:07] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 252 seconds)
[16:54:14] <hyper_ch> see, I could never define it like that
[16:55:39] *** Quits: Ylli[m] (~yllimatri@2001:470:69fc:105::dea8) (Changing host)
[16:55:39] *** Joins: Ylli[m] (~yllimatri@user/yllim/x-5230757)
[16:55:55] *** Joins: iconoclasthero (~quassel@pool-68-238-241-198.phlapa.fios.verizon.net)
[16:56:07] <wstrnr> idk, it seems that greybot has no meaningful "rtfm" factoid
[16:56:11] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[16:56:42] *** Joins: shad (~shad@user/shad)
[17:00:27] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.2.1)
[17:02:23] *** Quits: iconoclasthero (~quassel@pool-68-238-241-198.phlapa.fios.verizon.net) (Remote host closed the connection)
[17:03:55] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Ping timeout: 252 seconds)
[17:06:17] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:08:18] *** Quits: Count0 (~Anonymous@178.238.11.104) (Quit: Leaving)
[17:08:19] *** Joins: vmeson (~rmacleod@198-48-226-187.cpe.pppoe.ca)
[17:09:44] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[17:09:49] *** Quits: yetoo_ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[17:10:24] *** Joins: yetoo_ (~yetoo@user/yetoo)
[17:11:50] <p3rL> wstrnr there is a little issue ed -s playlist.lst <<<$'1,$NOm$\nwq'  < 1,3 works fine but 1,$NO not working bcz $no is input
[17:12:57] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 245 seconds)
[17:13:22] <wstrnr> you really have to read a tutorial or something to learn the fundamentals
[17:13:42] <p3rL> yeah thats what i am doing
[17:14:00] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[17:14:14] *** Joins: n4dir (~user@i577BC876.versanet.de)
[17:14:49] <wstrnr> also, the idea of putting a variable expansion similar to what you are trying to do in ed commands is dangerous.  because it's a code injection vulnerability
[17:15:31] <p3rL> user cant input anything it will get number by grep -n
[17:16:05] <p3rL> !skip will get the number of current song by grep -n {CUR_SONG_NAME} then it will do ed
[17:17:17] <wstrnr> if somebody asks, i didn't freaking tell you this:  ed -s playlist.lst <<<$'1,'"$NO"$'m$\nwq'
[17:17:45] <ormaaj> glob(7) is a good read.
[17:18:11] <geirha> -bash: /etc/glob: No such file or directory
[17:18:15] <geirha> doesn't work :(
[17:18:47] <p3rL> wstrnr <3 thanks
[17:20:00] <p3rL> finally now i can implement it into code :D and test the skip thingy
[17:20:46] <geirha> poor wstrnr; cursed to be constantly less than three
[17:23:57] *** Quits: Administratorte (~sq@tempest.math.colostate.edu) (Quit: WeeChat 3.1)
[17:24:15] *** Joins: Administratorte (~sq@tempest.math.colostate.edu)
[17:25:10] *** Quits: yetoo_ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[17:25:23] *** Joins: yetoo_ (~yetoo@user/yetoo)
[17:26:27] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[17:27:33] *** Joins: lavaball (felix@31.204.155.215)
[17:27:56] *** Joins: daidoji (~daidoji@104-52-250-5.lightspeed.gnvlsc.sbcglobal.net)
[17:29:03] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[17:31:09] *** Quits: wizhurd (~cr6pt2r@147.253.130.182) (Ping timeout: 265 seconds)
[17:35:30] *** Quits: iomari891 (~iomari891@197.210.53.202) (Ping timeout: 265 seconds)
[17:35:31] *** Quits: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se) (Quit: The Lounge - https://thelounge.chat)
[17:36:40] *** Joins: aramtsamtsam (~Thunderbi@2001:861:388a:5600:a00:5cff:ee34:76b)
[17:37:06] *** Joins: iomari891 (~iomari891@105.112.138.38)
[17:37:21] *** Joins: JanC_ (~janc@user/janc)
[17:38:34] *** Quits: JanC (~janc@user/janc) (Ping timeout: 252 seconds)
[17:40:29] *** Quits: yetoo_ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[17:40:54] *** Joins: yetoo_ (~yetoo@user/yetoo)
[17:43:08] *** Joins: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se)
[17:43:18] *** Quits: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se) (Client Quit)
[17:44:05] <ormaaj> # printf '%s\n' {0..9} | sed -r '1,3{H;d};${p;x;s/.//}' | tr \\n ' '; echo # sheesh had to remind myself... there's a few years gap between each time I use the hold buffer.
[17:44:07] <shbot> ormaaj: 3 4 5 6 7 8 9 0 1 2
[17:44:09] *** Quits: lonewulf` (~lonewulf@user/lonewulf) (Quit: leaving)
[17:46:57] <CrtxReavr> Is there a good in a crontab vs. not in a crontab indicator for a script on RHEL8?
[17:48:28] *** Quits: kj (~kj@kj.aerisnetwork.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:50:07] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Ping timeout: 240 seconds)
[17:50:11] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:51:10] <wstrnr> you can set variables in crontab
[17:51:32] <wstrnr> just   var=value  line sets an environment variable for all jobs
[17:52:07] <wstrnr> maybe not in every implementation of cron, but this should be a common feature
[17:52:17] <CrtxReavr> Hmmm
[17:52:32] <CrtxReavr> Not sure that helps me situation.
[17:53:11] <CrtxReavr> I was tasked with writing a script that would run as a crontab on a set interval of X hours.
[17:53:42] <CrtxReavr> But now I've written it, tested, it demo'd it, they're saying they don't wan to run it in a crontab, they want to run it manaully for now.
[17:54:16] <CrtxReavr> But since it was written to run in a crontab, it has no output. . . it just does notifications via E-mail and log events.
[17:54:19] *** Quits: yetoo_ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[17:54:26] *** Joins: yetoo__ (~yetoo@user/yetoo)
[17:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[17:55:04] <CrtxReavr> I was hoping there was some easy indicator I could find to print some output if not run in a crontab.
[17:55:05] <wstrnr> maybe it tests whether or not the script is running in a tty?
[17:55:17] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[17:58:14] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[17:59:33] <CrtxReavr> That would work. . ..but what would that test be?
[17:59:41] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[17:59:49] <CrtxReavr> date
[17:59:53] <CrtxReavr> whoops
[17:59:58] *** Joins: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se)
[18:00:34] *** Joins: Nintendo (~smb3@user/great)
[18:01:07] *** Quits: af (~af@awalgarg.me) (Ping timeout: 265 seconds)
[18:01:49] <CrtxReavr> XDG_SESSION_TYPE=tty vs. XDG_SESSION_TYPE=unspecified
[18:02:07] <Nintendo> To be perfect, a script should prefix every command assumed to be a standard utility with "command", e.g. "command find".
[18:02:16] *** Quits: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se) (Client Quit)
[18:02:18] *** Joins: uzee (~uzee@86.36.37.198)
[18:02:19] <wstrnr> actually,   test -t 0
[18:02:27] <CrtxReavr> I see that on this Fedora34 install, which is all I have access to at the moment.
[18:02:34] <wstrnr> if stdin is tty, this will exit with success, otherwise with failure
[18:02:48] <wstrnr> # help test | grep -- -t' FD'
[18:02:49] <shbot> wstrnr:       -t FD          True if FD is opened on a terminal.
[18:02:51] <Nintendo> Yet nobody ever mentions this.
[18:03:46] <Nintendo> It's a no-brainer.  From an execution standpoint, there are no downsides--only benefits.
[18:03:51] <wstrnr> the command is just a built-in, so it can be overriden by a shell subroutine of the same name too.
[18:03:52] *** Quits: ih8wndz (ih8wndz@mail.zero.svr.trnkmstr.com) (Quit: WeeChat 3.2)
[18:04:10] *** Joins: ih8wndz (ih8wndz@mail.zero.svr.trnkmstr.com)
[18:04:11] <wstrnr> # command() { echo dud.; };  command find anybody
[18:04:13] <shbot> wstrnr: dud.
[18:04:25] <Nintendo> True, but one is better than every in this case.
[18:05:01] <Nintendo> That said, do you know of a foolproof way?
[18:05:25] <wstrnr> write it in other programming language where this kind of "cracking" is not possible
[18:05:28] *** Quits: Weather7774 (~Weather77@124-170-121-245.dyn.iinet.net.au) (Read error: Connection reset by peer)
[18:06:27] *** Joins: sinaowolabi (~SinaOwola@169.159.82.148)
[18:06:31] <wstrnr> producing some kind of static-compiled executable (so that tooling with runtime linker won't be possible to change behavior of system functions and such)
[18:06:41] *** Joins: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se)
[18:07:05] *** Quits: bolsonarogay (~bolsonaro@186.237.242.64) (Ping timeout: 268 seconds)
[18:07:22] *** Joins: bolsonarogay (~bolsonaro@186.237.242.64)
[18:07:39] <Nintendo> That would make a good command-line option for bash.
[18:08:14] <wstrnr> env utility can run "subordinate" program in clean environment, but this is an overkill
[18:08:37] <wstrnr> # env --help | grep -A1 -- -i
[18:08:44] <shbot> wstrnr:   -i, --ignore-environment  start with an empty environment
[18:08:44] <shbot> wstrnr:   -0, --null           end each output line with NUL, not newline
[18:08:44] <shbot> wstrnr: etc... ( http://ix.io/3yY4 )
[18:08:56] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (Ping timeout: 268 seconds)
[18:08:59] <Nintendo> Interesting!  That had yet to occur to me.
[18:09:01] <CrtxReavr> Yikes.
[18:09:08] <wstrnr> sorry, just the -i line was intended to be displayed...
[18:09:11] *** Joins: howdoi (uid224@id-224.lymington.irccloud.com)
[18:09:16] <CrtxReavr> what sick bastard defaults $EDITOR to nano?
[18:09:31] <Nintendo> I agree it's overkill, but it is foolproof.
[18:10:22] <depesz> export EDITOR=/usr/bin/lowriter
[18:10:56] <Nintendo> All my friends drive one.
[18:11:02] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[18:11:28] *** Quits: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se) (Client Quit)
[18:12:26] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[18:12:55] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:12:59] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[18:13:33] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[18:14:13] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[18:14:33] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[18:15:54] *** Joins: togusaa (~togusa@user/togusa)
[18:16:33] *** Quits: togusaa (~togusa@user/togusa) (Quit: Leaving)
[18:18:03] *** Joins: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se)
[18:18:18] <CrtxReavr> wstrnr, I'm seeing no difference with ``test -t 0`` or ``test -t FD`` in or out of a crontab.
[18:18:28] *** JanC_ is now known as JanC
[18:18:38] <CrtxReavr> Or am I missunderstanding what you were getting at?
[18:19:06] <wstrnr> FD is "file descriptor", it has to be a number.
[18:19:33] <CrtxReavr> File descriptor of what?
[18:19:40] *** Joins: thyriaen (~thyriaen@dynamic-078-054-146-050.78.54.pool.telefonica.de)
[18:19:46] <wstrnr> 0 = stdin (standard input stream), 1 = stdout, 2 = stderr, 3 etc. - you can open files with arbitrary file descriptors using redirects
[18:21:09] <wstrnr> test -t 0   will be true (will terminate with success) when script runs in interactive terminal
[18:21:36] <CrtxReavr> Okay, but none of those ``fd -t X`` has any ouput, nor to they affect the exit code.
[18:22:33] <CrtxReavr> test -t 0 | echo $? <==== exit code of zero, every time.
[18:22:37] <wstrnr> "test" is built-in command in bash.  another way to write the same command is [ -t 0 ]    or   [[ -t 0 ]]
[18:22:53] *** Quits: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se) (Client Quit)
[18:22:59] <wstrnr> you are using the wrong |
[18:23:01] <wstrnr> !||
[18:23:02] <greybot> Short-circuit control operators <http://mywiki.wooledge.org/BashSheet#Tests> A || B means "Run A. If A fails, run B." A && B means "Run A. If A succeeds, run B." Example: foobar || { echo "error" >&2; exit 1; }
[18:23:06] *** Joins: af (~af@awalgarg.me)
[18:23:12] <wstrnr> !|
[18:23:12] <greybot> Pipes are used to send the (standard) output of one process to the (standard) input of another. foo | bar runs a process foo, sends its output on FD 1 to a process bar's input on FD 0. Note that foo and bar are executed in subshells; so changing variables inside pipes will have no effect on the variables in your main script.
[18:24:45] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 268 seconds)
[18:27:43] *** Joins: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se)
[18:27:56] *** Joins: iomari891 (~iomari891@197.210.53.101)
[18:29:09] *** Joins: kj (~kj@beta.aerisnetwork.net)
[18:30:55] *** Joins: xx (~xx@user/xx)
[18:31:23] *** Parts: [twisti] (~twisti@toadwater.com) ()
[18:33:26] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[18:34:00] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[18:34:33] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Quit: ZNC 1.8.2 - https://znc.in)
[18:34:59] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[18:36:19] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[18:36:35] *** Quits: yetoo__ (~yetoo@user/yetoo) (Remote host closed the connection)
[18:36:54] *** Joins: yetoo__ (~yetoo@user/yetoo)
[18:43:43] *** Joins: legola (~legola@46.235.100.27)
[18:45:06] *** Quits: iomari891 (~iomari891@197.210.53.101) (Ping timeout: 268 seconds)
[18:46:43] *** Joins: ChmEarl (~chmearl@user/chmearl)
[18:49:05] *** Joins: iomari891 (~iomari891@197.210.77.160)
[18:52:09] *** Quits: Krail (~Krail@user/alexdelarge) (Quit: Krail)
[18:55:34] *** Quits: iomari891 (~iomari891@197.210.77.160) (Ping timeout: 252 seconds)
[18:58:05] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[19:00:37] *** Parts: justanotheruser (~justanoth@gateway/tor-sasl/justanotheruser) ()
[19:00:42] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[19:01:02] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[19:02:06] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[19:08:13] *** Joins: iomari891 (~iomari891@197.210.52.221)
[19:10:30] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Ping timeout: 260 seconds)
[19:13:41] *** Quits: sinaowolabi (~SinaOwola@169.159.82.148) (Ping timeout: 268 seconds)
[19:16:02] *** Quits: iomari891 (~iomari891@197.210.52.221) (Ping timeout: 265 seconds)
[19:18:10] *** Joins: at_work (~at_work@user/at-work/x-5282331)
[19:19:24] *** Joins: iomari891 (~iomari891@197.210.52.221)
[19:22:48] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[19:25:11] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[19:25:20] *** Quits: iomari891 (~iomari891@197.210.52.221) (Remote host closed the connection)
[19:25:48] *** Joins: iomari891 (~iomari891@197.210.53.58)
[19:26:57] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[19:27:44] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[19:27:52] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 268 seconds)
[19:27:54] *** Joins: yetoo__ (~yetoo@user/yetoo)
[19:29:05] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 265 seconds)
[19:30:43] *** Quits: iomari891 (~iomari891@197.210.53.58) (Ping timeout: 252 seconds)
[19:31:00] *** Joins: Elodin (~weechat@user/elodin)
[19:32:15] *** Joins: iomari891 (~iomari891@197.210.53.58)
[19:32:51] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:34:36] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[19:35:15] <N0ZYC> https://hastebin.com/uqatayagil.bash
[19:35:15] <pasteban> Paste is available without javascript on https://hastebin.com/raw/uqatayagil
[19:35:38] <N0ZYC> shellcheck should given an error on both echo lines?
[19:35:50] <phy1729> !check
[19:35:50] <checkbot> N0ZYC: Line 11: m is referenced but not assigned. See https://shellcheck.net/?id=cb18350
[19:35:58] <phy1729> koala_man: he's right
[19:36:54] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 268 seconds)
[19:37:16] <N0ZYC> I was just debugging a script that I'd renamed a loop var from i to j, and missed one of the accesses to it, and it didn't error out in shellcheck, took me awhile to find
[19:37:32] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[19:37:32] <N0ZYC> all because a function elsewhere in the script had a local i in it
[19:38:06] <Soliton> perhaps use more descriptive variable names.
[19:38:27] <N0ZYC> I assume this is either a shellcheck bug or oversight?
[19:39:24] *** Joins: Atque (~Atque@user/atque)
[19:40:45] <N0ZYC> https://hastebin.com/ujeroyuban.bash
[19:40:45] <pasteban> Paste is available without javascript on https://hastebin.com/raw/ujeroyuban
[19:40:49] <N0ZYC> !check
[19:40:49] <checkbot> N0ZYC: Line 16: m is referenced but not assigned. See https://shellcheck.net/?id=cb18649
[19:41:02] <N0ZYC> it even happens when the reference is in a sub, where the var is local'd
[19:41:20] <wstrnr> oh god.  it took you some time to find a typo in a script... it's not a tragedy, man.  just get used to it and concentrate harder when writing shell scripts.  shellcheck will not always save you, don't depend on it.
[19:41:41] <phy1729> The linter could be improved though
[19:42:12] <wstrnr> any way, expecting perfect output from shellcheck is asking for too much
[19:42:34] <N0ZYC> I'm not expecting perfection, I'm just pointing out areas that could be improved
[19:42:48] <N0ZYC> overall it does a very good job
[19:44:28] *** Quits: iomari891 (~iomari891@197.210.53.58) (Ping timeout: 252 seconds)
[19:45:42] <OMGOMG> N0ZYC: looks like it's working fine in the examples you've pasted here?
[19:47:14] *** Quits: UnnamedBeer (~UnnamedBe@225.red-79-152-222.dynamicip.rima-tde.net) (Quit: WeeChat 2.3)
[19:48:56] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:49:15] <N0ZYC> it should produce two errors, not one
[19:49:32] <N0ZYC> the one error it's producing is a demo to show how the other line should also error
[19:50:07] *** Joins: emanuele6 (~emanuele6@37.160.47.148)
[19:50:07] *** Quits: emanuele6 (~emanuele6@37.160.47.148) (Changing host)
[19:50:07] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[19:50:21] <N0ZYC> for some reason, shellcheck appears to be placing vars inside subs, protected with LOCAL, as globals
[19:51:20] <N0ZYC> and while shellcheck can't easily tell what functions get called when, and thus not know if an assignment inside a function affects global scope, it SHOULD know that protected (local'd) vars cannot affect global scope
[19:51:25] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[19:52:30] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[19:53:28] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[19:53:38] <N0ZYC> in my specific case, I have a large common bit of script with dozens of functions and a few config assignments in it that is sourced by over 100 scripts here.  and it uses i as a loop var in over a dozen functions.  all local'd.  and that is preventing shellcheck from catching unassigned i's in any of those scripts that source it
[19:54:13] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[19:54:18] *** Quits: wwilliam (~Wiilliam@user/wwilliam) (Quit: Konversation terminated!)
[19:54:39] *** Quits: yetoo__ (~yetoo@user/yetoo) (Remote host closed the connection)
[19:54:54] *** Joins: yetoo__ (~yetoo@user/yetoo)
[19:55:35] *** Joins: wwilliam (~Wiilliam@user/wwilliam)
[19:56:33] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[19:56:39] *** Joins: zeedo (~zeedo@cpc157903-grth13-2-0-cust152.16-4.cable.virginm.net)
[19:56:55] *** Joins: LiftLeft (~LiftLeft@172.98.92.110)
[19:59:33] *** Quits: zeraphel (~daddy@2a00:a040:196:56d::1) (Quit: zeraphel)
[20:00:05] *** Quits: yetoo__ (~yetoo@user/yetoo) (Remote host closed the connection)
[20:00:23] *** Joins: yetoo__ (~yetoo@user/yetoo)
[20:02:50] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[20:03:11] *** Joins: iomari891 (~iomari891@197.210.77.124)
[20:06:55] *** Joins: greycat (~greg@209.142.155.49)
[20:08:05] *** Quits: yetoo__ (~yetoo@user/yetoo) (Remote host closed the connection)
[20:08:24] *** Joins: yetoo__ (~yetoo@user/yetoo)
[20:08:40] *** Quits: iomari891 (~iomari891@197.210.77.124) (Ping timeout: 240 seconds)
[20:09:38] *** Joins: iomari891 (~iomari891@197.210.52.221)
[20:10:42] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 260 seconds)
[20:10:42] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:15:34] *** Joins: yetoo (~yetoo@user/yetoo)
[20:15:56] *** Quits: blackbart (~sv@pool-173-63-184-70.nwrknj.fios.verizon.net) (Ping timeout: 252 seconds)
[20:16:40] *** Quits: yetoo__ (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[20:17:10] *** Quits: shad (~shad@user/shad) (Ping timeout: 240 seconds)
[20:17:25] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 265 seconds)
[20:18:20] *** Joins: blackbart (~sv@pool-173-63-184-70.nwrknj.fios.verizon.net)
[20:19:32] *** Joins: shad (~shad@user/shad)
[20:19:32] *** Quits: n4dir (~user@i577BC876.versanet.de) (Remote host closed the connection)
[20:19:34] <N0ZYC> ls *.command > "$temp_file"     ^-- SC2035: Use ./*glob* or -- *glob* so names with dashes won't become options.
[20:19:55] <N0ZYC> ls *glob*.command     ls: *glob*.command: No such file or directory
[20:19:55] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[20:20:00] <greycat> what are you trying to do?
[20:20:04] <N0ZYC> am I using that wrong?
[20:20:07] <greycat> Yes.
[20:20:14] <greycat> *.command is your glob
[20:20:15] <N0ZYC> what's the proper way?
[20:20:21] <greycat> What are you trying to DO?
[20:20:37] <N0ZYC> build a text file that contains a list of the .command files in cwd
[20:20:46] <greycat> printf %s\\n *.command > file
[20:21:02] <greycat> this will of course break if any of the filenames contain newlines
[20:21:20] <N0ZYC> i need to get to know printf better
[20:21:21] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[20:21:28] *** Quits: joo (~joo@fsf/member/joo--) (Ping timeout: 252 seconds)
[20:21:45] <Soliton> why do you need that file at all?
[20:21:45] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[20:21:55] <N0ZYC> syncing files
[20:22:07] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[20:22:20] <N0ZYC> need a list of what to sync ;)
[20:22:38] <Soliton> sync_cmd *.command
[20:22:42] *** Joins: justache (~justache@user/justache)
[20:22:47] <N0ZYC> heh, of only it were that easy
[20:22:56] <grondilu> Is \x00 inside a $'' supposed to cause the string to end?
[20:23:01] <greycat> Yes.
[20:23:09] <grondilu> ok
[20:23:24] <greycat> You CANNOT store a NUL byte in a shell variable, nor pass it as part of an argument to an external command.  Full stop.
[20:23:38] <grondilu> noted
[20:23:52] <earnestly> grondilu: (Anywhere, unix uses \0 to delimite them)
[20:24:27] <phy1729> external commands are started via the syscall execve(2) or spawn(2) both of which have C string APIs because C is the lingua franca of *nix
[20:25:33] <grondilu> I vaguely remember Perl being able to avoid this so I thought bash could too
[20:25:57] <Soliton> it is not a limitation of the shell.
[20:26:06] <N0ZYC> I hex things I need to pass that might contain a null
[20:26:07] *** Quits: adac (~adac@clnet-b03-098.ikbnet.co.at) (Ping timeout: 265 seconds)
[20:26:08] <Soliton> i mean the variable part is but no the rest.
[20:26:49] <N0ZYC> was just dealing with that issue with sqlilte, it has a built in ability to hexify and de-hexify strings
[20:27:05] <greycat> Other languages may allow the storing of NUL bytes in string variables, because they use different means of storing string variables.
[20:27:21] <N0ZYC> see also "pstring vs cstring"
[20:27:24] <earnestly> Notably scheme
[20:27:26] <greycat> In such languages, the raw contents of a string variable then have to be transformed before you can pass them to external commands or write them to files, etc.
[20:27:36] <earnestly> Or DJB's netstrings
[20:27:49] *** Quits: yetoo (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[20:28:04] <Soliton> you can also pass data on stdin or so. don't have to use arguments.
[20:28:24] *** Joins: yetoo (~yetoo@user/yetoo)
[20:28:47] <N0ZYC> printf %s\\n *.command > "$temp_file"   v
[20:28:49] <N0ZYC> ^-- SC2035: Use ./*glob* or -- *glob* so names with dashes won't become options.
[20:28:57] <greycat> Ignore it, then.
[20:29:04] <N0ZYC> works the same, but warns the same :(
[20:29:09] <Soliton> # printf %s\\n --foo
[20:29:11] <shbot> Soliton: --foo
[20:29:20] <Soliton> it does not work the same.
[20:29:22] <greycat> No, it works better, because if you actually *did* have a filename beginning with - you would have seen a difference.
[20:29:43] *** Joins: fdan (~fdan@192.146.154.3)
[20:29:49] <N0ZYC> so, printf %s\\n *.command --"$temp_file"   ?
[20:29:53] <greycat> NO
[20:29:56] <greycat> jesus fucking christ
[20:29:58] <grondilu> thing is, I want to echo a nul byte if a variable is not defined, so I wrote `printf "${foo:-\x00}"` and it works but shellcheck shames me for using a variable inside a printf format string.
[20:30:03] <OMGOMG> N0ZYC: so the missing error was not using i unassigned? (after renaming to j)
[20:30:09] <Soliton> shellcheck is simply wrong for printf.
[20:30:12] <earnestly> printf %s -is -fine, ^
[20:30:29] <N0ZYC> ok
[20:30:33] <earnestly> It's only if the formatter itself started with -, such as printf '-- %s --\n' header
[20:30:42] <earnestly> printf -- '-- %s --\n' instead
[20:30:58] <phy1729> grondilu: what is the variable otherwise? user input?
[20:31:00] <Soliton> !check printf %s\\n *.command > foo
[20:31:00] <checkbot> Soliton: Looks good to me
[20:31:12] <Soliton> perhaps you have an old shellcheck or something.
[20:31:14] *** Quits: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net) (Ping timeout: 260 seconds)
[20:31:15] <CrtxReavr> How would that work? printf would write mis-spelled words to sdterr and terminate?
[20:31:18] <greycat> so N0ZYC is running a local version of shellcheck with more bugs
[20:31:23] <N0ZYC> yes
[20:31:33] <grondilu> phy1729: not user input, rather a non-zero byte
[20:31:42] <grondilu> a literal one
[20:31:42] <N0ZYC> its not that old though, maybe a year
[20:31:49] <earnestly> lol
[20:32:17] <N0ZYC> though that may be ancient by shellcheck tandards
[20:32:53] *** Quits: iomari891 (~iomari891@197.210.52.221) (Ping timeout: 265 seconds)
[20:33:00] <grondilu> foo is either a non-zero constant byte, or the null one.
[20:33:04] <phy1729> grondilu: it sounds a lot like whatever you're doing isn't a good fit for shell
[20:33:07] *** Joins: Atque (~Atque@user/atque)
[20:34:20] <Soliton> printf %b "${foo:-\x00}"
[20:34:29] <N0ZYC> updating my brew...
[20:34:38] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[20:34:48] *** Joins: iomari891 (~iomari891@105.112.138.38)
[20:34:53] <Soliton> grondilu: what you have will not work if foo contains %.
[20:35:25] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[20:35:28] <wstrnr> shell can print NUL-byte using printf '\0'.  if test -v x; then printf %s "$x"; else printf '\0'; fi.  it's not very long, just a couple of lines.
[20:35:48] <N0ZYC> resumer_label="auto.resumer_$(echo "$app" | sed 's/[^A-Za-z0-9]/_/g')"      ^-- SC2001: See if you can use ${variable//search/replace} instead.
[20:35:59] <wstrnr> imho, this thing is too easy to put in script directly, without of resorting to obscure magic
[20:36:08] <N0ZYC> from what I've found online, this is just one of those warnings I have to ignor?
[20:36:08] <grondilu> Soliton: I know that's why it's bad practice to put a variable in a printf format, and that's why I'm asking for an alternative here.
[20:36:27] <Soliton> well, see above.
[20:36:36] *** Quits: yetoo (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[20:36:42] <grondilu> oh yeah I can do that indeed
[20:36:54] *** Joins: yetoo (~yetoo@user/yetoo)
[20:36:59] <grondilu> it's a bit verbose but not too much
[20:37:33] <Soliton> N0ZYC: ${app//[![:alnum:]]/_}
[20:37:35] *** Joins: Lunatrius` (~Lunatrius@77.38.92.228)
[20:37:43] *** Quits: Lunatrius (~Lunatrius@77.38.92.228) (Ping timeout: 265 seconds)
[20:37:53] *** Lunatrius` is now known as Lunatrius
[20:39:17] <N0ZYC> oh ok I didn't think you could do 'not' in there
[20:39:34] <N0ZYC> thx
[20:39:35] *** Quits: Lunatrius (~Lunatrius@77.38.92.228) (Read error: Connection reset by peer)
[20:40:13] <Soliton> !glob
[20:40:13] <greybot> Globs are shell patterns that can be used for matching strings or expanding pathnames: [[ $name = Bob* ]]; rm -- *.txt; see http://mywiki.wooledge.org/glob
[20:41:57] <Soliton> grondilu: it's 3 characters more. if you want it shorter write \0 instead of \x00.
[20:42:01] *** Joins: Lunatrius (~Lunatrius@77.38.92.228)
[20:43:05] *** Joins: Friithian (gunqqer@friithian.dev)
[20:43:16] <grondilu> well you still used a variable inside a printf format, though
[20:43:45] *** Joins: INeedAHandle (~INeedAHan@192.111.134.213)
[20:43:52] <grondilu> so shellcheck will still complain
[20:44:12] <Soliton> !check printf %b "${foo:-\x00}"
[20:44:12] <checkbot> Soliton: Looks good to me
[20:44:14] *** Joins: YaoNai (~YaoNai@user/yaonai)
[20:44:35] <grondilu> wth
[20:44:43] <grondilu> what is this %b?
[20:45:02] <Soliton> # help printf | grep %b
[20:45:04] <shbot> Soliton:       %b        expand backslash escape sequences in the corresponding argument
[20:45:32] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[20:46:04] *** Joins: Inhonion (~uhhh3@user/tastywiener95)
[20:46:14] <wstrnr> you can put a comment in your script to clarify what %b is
[20:46:43] <wstrnr> if you feel like it.
[20:46:50] <grondilu> fnny thing is I looked at this earlier but I didn't understand the purpose
[20:47:17] <Soliton> i'd rather document that foo cannot contain a backslash escape sequence unless that is somehow obvious from context.
[20:47:43] <grondilu> I'm still net quite sure how that works but that's okay I will someday lol
[20:47:45] <wstrnr> heh.  it even comes with a landmine...
[20:48:50] <Soliton> %b means \x00 is interpreted. what is there not to get?
[20:49:42] <wstrnr> printf as a dilligent computer program goes on and decodes the argument
[20:50:21] <wstrnr> when you put %b in format string, you ask printf to do this kind of processing of an argument
[20:50:25] <grondilu> yeah for a moment I thought bash was already interpreting them, but not unless it's inside $'' right?
[20:50:34] <Soliton> yes.
[20:51:36] *** Quits: wstrnr (~wstrnr@user/wstrnr) (Quit: .)
[20:51:42] <grondilu> that %b seems like simple way to implement chr, simpler than what was recommended here the other day anyway.
[20:52:07] *** Quits: tobybl (~tobybl@210.242.200.146.dyn.plus.net) (Remote host closed the connection)
[20:52:44] <Soliton> feel free to show that simpler implementation.
[20:53:47] <grondilu> nevermind I tried and failed
[20:54:57] <rendar> why do i get this? https://bpa.st/N72A
[20:55:47] <grondilu> because you didn't install the locale?
[20:55:54] <Soliton> # export LC_TIME=foo
[20:55:55] <shbot> Soliton: bash: warning: setlocale: LC_TIME: cannot change locale (foo): No such file or directory
[20:56:23] <Soliton> locale -a lists available locales.
[20:57:21] <rendar> ok, i get this https://bpa.st/SDFQ -- i just want that 'date' program to print 24h format
[20:57:29] <rendar> so i don't really need en_GB locale, or do i?
[20:57:53] <twkm> probably hurts to read date's documentation.
[20:58:08] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[20:58:57] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[20:59:05] <rendar> twkm, i don't want to get that with some date's flag
[21:00:07] <grondilu> rendar: why not?  it's probably the simplest and most portable way
[21:00:58] <rendar> grondilu, because i want my entire system to represent time in 24h
[21:01:02] <rendar> not only date
[21:01:21] <rendar> the fact that date prints time in am/pm is just a cause of that
[21:01:28] * greycat tries to understand the question ... do you simply want the *formerly standard* output from "date" with no arguments, after your operating system has switched out the en_US locale to this new bullshit one?  we can address that.
[21:01:30] <Soliton> so install a locale that works like you want.
[21:01:47] <grondilu> ok, so probably has to change the locale indeed then
[21:01:57] <rendar> ok
[21:02:09] <greycat> Just override LC_TIME.  I use LC_TIME=C personally.
[21:02:29] <greycat> unicorn:~$ LC_TIME=en_US.utf8 date; LC_TIME=C date
[21:02:29] <greycat> Wed 15 Sep 2021 12:32:26 PM EDT
[21:02:29] <greycat> Wed Sep 15 12:32:26 EDT 2021
[21:02:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c0c:2027:33cc:a810)
[21:02:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c0c:2027:33cc:a810) (Changing host)
[21:02:46] *** Joins: skapata (~Skapata@user/skapata)
[21:02:48] <rendar> thanks!
[21:02:56] <rendar> that was i wanted to know LC_TIME=C
[21:03:09] <rendar> it sounded strange that i'd need LC_TIME=en_GB
[21:03:39] <greycat> Who knows what they'll do to en_GB next year or next month ....
[21:03:42] <grondilu> what does C stand for btw?
[21:03:54] <phy1729> The language C
[21:04:21] <grondilu> ok but what does it have to do with date format?
[21:04:39] <rendar> i should store that in /etc/locale.conf right?
[21:04:49] <rendar> to make it permanent
[21:04:56] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[21:05:03] <Soliton> !os
[21:05:03] <greybot> Take it to your OS channel. Your issue is specific to your Operating System or Distribution.
[21:05:05] <greycat> The "C" or "POSIX" locale tells your system not to do *any* localization stuff at all.  Pretend you're using a Unix computer from 1981.
[21:05:12] <rendar> ok, sorry
[21:05:55] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[21:06:11] <greycat> rendar: I'm not sure what /etc/locale.conf does on your system, but that sounds ABSOLUTELY wrong.  You set your LC_* variables in your login configuration, which may be a shell's dot file, or may be some X11 session's startup file, or some Wayland session startup file, etc.
[21:06:15] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 260 seconds)
[21:06:22] <grondilu> I see, makes sense I guess.
[21:06:33] <rendar> ok, good point, thanks greycat
[21:07:03] <greycat> And if you're using GNOME it might not be possible by any means known to man.
[21:07:20] <greycat> GNOME overrides everything and makes it impossible to customize your own session.
[21:07:28] <rendar> yes
[21:07:42] <rendar> does make it any sense to set LC_COLLATE=C for everything?
[21:07:56] <greycat> that has a different effect
[21:08:26] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[21:08:27] <rendar> yes i know, it's unrelated with date/time
[21:08:40] <rendar> but i was wondering if it could make any sense doing that
[21:09:04] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[21:12:53] *** Joins: seninha (~seninha@user/seninha)
[21:14:46] *** Parts: lorimark (~lorimark_@static-47-190-7-163.dlls.tx.frontiernet.net) (Leaving)
[21:17:04] *** Joins: clarkk (~clarkk@host86-164-233-103.range86-164.btcentralplus.com)
[21:17:18] *** Quits: Friithian (gunqqer@friithian.dev) (Remote host closed the connection)
[21:17:58] <clarkk> I want to find out everything possible about the "paste" shell command from my local help files. Is there any more info than what's shown in "man paste"?
[21:18:16] *** Joins: Friithian (gunqqer@friithian.dev)
[21:18:34] <greycat> we have no idea what your operating system offers in the way of documentation, in part because you haven't told us what your operating system is
[21:19:07] <clarkk> sorry, greycat - I just wanted the general process.  But my OS is Ubuntu 20.04
[21:19:31] <greycat> That's a GNU/Linux system, so you are probably using the paste implementation from GNU coreutils, which means the primary documentation is GNU's (tex)info pages.
[21:19:41] <mixfix41> paste is part of coreutisl so info coreutils
[21:19:48] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Remote host closed the connection)
[21:20:00] <mixfix41> good to look at the whole package of coreutils while at that
[21:20:06] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[21:20:13] <emanuele6> info coreutils paste
[21:20:32] <clarkk> OK, I see coretools is written in the man page. I see at the top of the man page, "PASTE (1)". Does the 1 mean anything?
[21:20:38] <emanuele6> if you don't want to go insane: info coreutils paste --vi-keys
[21:20:41] <greycat> "man 1 intro"
[21:21:02] <greycat> PASTE(1) means it's in section 1 of the manual, and "man 1 intro" reads the documentation of that whole section.
[21:21:12] <clarkk> how do you see all the parts?  And how many parts are available? Sorry I'm asking silly questions
[21:21:18] <greycat> man man
[21:21:44] <greycat> Of course this only covers man pages, which are *not* all of the documentation.  Because GNU.
[21:25:24] *** Joins: timj (~timj@user/timj)
[21:25:29] <clarkk> thank you greycat, emanuele6 - I'd never used info.  It looks useful
[21:25:59] <timj> how do I compare floating point values? test expects integers, so errors out here:   test 0.3 -lt 0.2 ; echo $?
[21:26:09] <greycat> awk or bc
[21:26:17] <greycat> !faq float
[21:26:17] <greybot> https://mywiki.wooledge.org/BashFAQ/022 -- How can I calculate with floating point numbers instead of just integers?
[21:26:26] <grondilu> texinfo is not really standard documentation anymore, is it?  I mean it's not even installed by default on my system (Fedora)
[21:26:56] <greycat> grondilu: *most* of the people who come here are running some form of GNU/Linux, so it's popular here.  Standard?  No.  Wouldn't call it that.
[21:27:43] <greycat> "info" should be installed by default on most GNU/Linuxes, even if the tools to generate *.info files are not
[21:29:22] *** Quits: Friithian (gunqqer@friithian.dev) (Quit: Please Hold.)
[21:29:35] <grondilu> from what I recall, they are usually more like tutorials and guides, which is nice don't get me wrong, but they are less convenient to search or to get a quick explanation about something specific.
[21:29:37] *** Joins: Friithian (gunqqer@friithian.dev)
[21:29:38] <greycat> there's also an alternative texinfo reader program called "pinfo" which some people may prefer
[21:31:11] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Remote host closed the connection)
[21:31:55] <grondilu> btw bash has a fantastic man page.  All programming languages should make that good of a documentation effort.
[21:32:21] <greycat> Bash's man page is above average, yeah.
[21:32:26] <Friithian> c++ is very well documented :P just read the standard
[21:33:41] <greycat> Perl and Tcl both offer documentation in the form of many smaller man pages.
[21:33:53] <greycat> Bash's gigantic bash(1) page is pretty unique.
[21:34:14] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[21:34:48] *** Joins: kapil (~kapil@o-k.website)
[21:35:56] *** Joins: tobybl (~tobybl@210.242.200.146.dyn.plus.net)
[21:36:04] *** Quits: humky (~humky@user/humky) (Read error: Connection reset by peer)
[21:36:18] *** Joins: mr-red (~drd@93-42-69-115.ip85.fastwebnet.it)
[21:36:18] *** Joins: humky (~humky@user/humky)
[21:38:23] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 268 seconds)
[21:40:09] <ormaaj> pinfo is nice. I can figure out how to use it without an info page.
[21:41:58] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[21:43:11] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[21:43:35] *** Quits: yetoo (~yetoo@user/yetoo) (Read error: Connection reset by peer)
[21:43:54] *** Joins: yetoo (~yetoo@user/yetoo)
[21:44:29] *** Quits: Distemper (harry@2a01:7e00::f03c:91ff:fe6c:8379) (Quit: WeeChat 3.1)
[21:47:50] *** Quits: Bhavuk (~BTaneja@103.132.28.33) (Quit: Leaving)
[21:50:30] <greycat> pinfo has its share of unintuitive behaviors.  For example, there are *two* different search commands, one for the current page only, and one for the whole flock of pages.
[21:50:59] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[21:51:13] *** Joins: zebrag (~chris@user/zebrag)
[21:51:37] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Remote host closed the connection)
[21:54:40] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[21:54:55] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[21:55:01] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[21:55:02] *** Quits: Mo (~Mo@dynamic-095-112-015-004.95.112.pool.telefonica.de) (Ping timeout: 268 seconds)
[21:56:51] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[22:00:11] *** Quits: bolsonarogay (~bolsonaro@186.237.242.64) (Ping timeout: 268 seconds)
[22:02:31] *** Quits: loworder1it (~dave@s0106e81cba1736ea.ss.shawcable.net) (Ping timeout: 252 seconds)
[22:03:35] *** Quits: gnoo (~gnoo@user/gnoo) (Quit: gnoo)
[22:04:16] *** Joins: drd (~drd@93-42-69-115.ip85.fastwebnet.it)
[22:05:10] *** Quits: mr-red (~drd@93-42-69-115.ip85.fastwebnet.it) (Ping timeout: 240 seconds)
[22:05:46] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:05:48] *** Joins: bolsonarogay (~bolsonaro@186.237.242.64)
[22:07:58] *** Quits: tobybl (~tobybl@210.242.200.146.dyn.plus.net) (Remote host closed the connection)
[22:08:18] *** Joins: reset (~reset@user/reset)
[22:11:41] *** Quits: aramtsamtsam (~Thunderbi@2001:861:388a:5600:a00:5cff:ee34:76b) (Ping timeout: 268 seconds)
[22:11:51] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[22:13:59] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[22:18:10] *** mozgalom is now known as bomb-on
[22:20:11] *** Quits: austin987 (~null@cpe-173-174-99-192.austin.res.rr.com) (Ping timeout: 265 seconds)
[22:23:13] *** Joins: greta (uid516789@id-516789.lymington.irccloud.com)
[22:24:24] *** Joins: alguien (~alguien@user/alguien)
[22:24:32] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 265 seconds)
[22:26:01] *** Joins: adac (~adac@213-47-187-80.cable.dynamic.surfer.at)
[22:26:40] *** Joins: mike18 (~geri@217-149-162-127.nat.highway.telekom.at)
[22:26:46] *** Joins: ALowther_ (~igloo@96.59.76.156)
[22:27:35] *** Joins: feara (~that@70.184.205.166)
[22:27:58] <ALowther_> I'm trying to pipe to gpg --import but it's saying no valid data found. I don't think it's taking the output of the pipe as input. Is there a variable syntax that I can use to reference the output of a previous pipe command?
[22:27:59] *** Parts: feara (~that@70.184.205.166) (she dipped out)
[22:28:24] <greycat> "man gpg" or ask #gnupg how to use the program
[22:29:31] <ALowther_> Okay, I will do that. Is there a variable syntax that I can use to reference the output of a previous pipe command? Ie `echo "text" | command ${output}`
[22:29:42] <LuksNuke> ALowther_, often you can specify "-" as file (without quotes) to make the program read from stdin. it's worth a try
[22:30:02] *** bomb-on is now known as le_koober
[22:30:25] <ormaaj> probably just want to add a `tee` to see what's going through the pipe
[22:30:36] *** Joins: kyr (~kyr@167.71.50.12)
[22:30:42] <koala_man> ALowther_: I'm guessing it's taking the data, but it's invalid
[22:30:45] *** Joins: Elodin (~weechat@user/elodin)
[22:31:39] <mike18> any better way to write the command? git rm api#v2.0#data#[0-9][0-9][0-9][0-9][0-9][0-9][0-9].json
[22:32:13] <greycat> As we told you yesterday, there is no {7} equivalent for globs.
[22:32:18] <yitz> git rm api#v2.0#data#*json
[22:32:26] <greycat> yitz: they were told that one as well.
[22:32:29] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Quit: Leaving)
[22:32:44] <mike18> yitz: cant do that --- what would match other things too
[22:32:46] <greycat> apparently they have OTHER files that fit the api#v2.0#data#*json glob that they do not want to match
[22:33:04] *** Quits: useretail (~useretail@185.132.19.151) (Remote host closed the connection)
[22:33:10] <koala_man> is +([0-9]) also too broad?
[22:33:21] *** Joins: useretail (~useretail@185.132.19.151)
[22:33:26] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[22:33:28] <mike18> i only want remove 7 digits
[22:33:35] *** Joins: austin987 (~null@100.42.98.196)
[22:33:40] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[22:33:44] <koala_man> then no, there is no better way
[22:33:48] <mike18> hm
[22:34:02] <greycat> (bash did not gain any new features since yesterdaY)
[22:34:22] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[22:34:36] *** Quits: drd (~drd@93-42-69-115.ip85.fastwebnet.it) (Quit: ZNC 1.8.2 - https://znc.in)
[22:34:55] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[22:35:14] <yitz> You can dump the filenames, apply a regex with another tool to filter then use that filtered output to delete
[22:35:20] *** Quits: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9) (Ping timeout: 268 seconds)
[22:35:49] *** Quits: ALowther_ (~igloo@96.59.76.156) (Remote host closed the connection)
[22:36:16] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[22:36:16] <koala_man> find .. -regex .. -exec git rm {} \; but I don't see how that's better
[22:36:46] *** Quits: bolsonarogay (~bolsonaro@186.237.242.64) (Ping timeout: 260 seconds)
[22:36:51] *** Quits: barjac (~quassel@92.41.66.239.threembb.co.uk) (Quit: barjac)
[22:36:58] *** Joins: bolsonarogay (~bolsonaro@186.237.242.64)
[22:37:22] <yitz> Just write it in Python. It'll be much cleaner.
[22:38:10] *** Joins: Betal (~Betal@user/betal)
[22:39:22] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[22:41:36] *** Joins: barjac (~quassel@92.41.66.239.threembb.co.uk)
[22:42:04] <llua> zsh --extendedglob -c 'echo git rm api\#v2.0\#data\#[0-9](#c7).json'
[22:42:07] *** Joins: Atque (~Atque@user/atque)
[22:43:23] <Friithian> >python >clean
[22:45:01] *** Joins: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net)
[22:49:38] *** Joins: cdown (~cdown@194.207.141.245)
[22:54:29] *** Quits: junagu_ (~junagu@2a02:8010:6989:0:d6cc:2cc9:dc0f:bcf2) (Remote host closed the connection)
[22:57:19] *** Joins: zro (~zro@user/zro)
[22:59:49] *** Joins: wolfgang (~wolfgang@101.174.6.197)
[23:01:01] *** Quits: le_koober (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[23:01:48] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[23:02:43] *** Joins: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9)
[23:02:53] *** Joins: magla (~gelignite@55d43f3e.access.ecotel.net)
[23:04:05] *** Joins: locrian9_ (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[23:05:37] *** Quits: cdown (~cdown@194.207.141.245) (Ping timeout: 265 seconds)
[23:06:35] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 265 seconds)
[23:07:32] *** Joins: n4dir (~user@i577BC876.versanet.de)
[23:09:32] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:09:49] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:13:34] *** Quits: locrian9_ (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 268 seconds)
[23:13:58] *** Joins: darkxploit (~jay@32.209.19.50)
[23:20:31] *** Joins: sandb0y (pirate@user/sandb0y)
[23:21:27] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:23:45] *** Quits: barjac (~quassel@92.41.66.239.threembb.co.uk) (Quit: No Ping reply in 180 seconds.)
[23:25:00] *** Joins: barjac (~quassel@92.41.66.239.threembb.co.uk)
[23:26:33] *** Quits: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se) (Quit: The Lounge - https://thelounge.chat)
[23:27:32] *** Quits: testuser321 (~wandering@115.187.42.167) (Quit: Leaving)
[23:30:14] *** XV8 is now known as xv8
[23:31:19] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[23:31:47] *** Joins: robobo (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se)
[23:32:36] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[23:33:17] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Goodbye)
[23:39:04] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Remote host closed the connection)
[23:39:38] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.2)
[23:39:51] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[23:40:45] *** Joins: Crescendo (~Crescendo@user/crescendo)
[23:40:54] *** Quits: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3) (Read error: Connection reset by peer)
[23:46:25] *** xv8 is now known as XV8
[23:48:10] *** Quits: bolsonarogay (~bolsonaro@186.237.242.64) (Ping timeout: 260 seconds)
[23:48:23] *** Joins: bolsonarogay (~bolsonaro@186.237.242.64)
[23:51:33] *** Joins: Atque (~Atque@user/atque)
[23:53:02] *** Quits: bolsonarogay (~bolsonaro@186.237.242.64) (Ping timeout: 268 seconds)
[23:54:10] *** Joins: bolsonarogay (~bolsonaro@186.237.242.64)
[23:54:44] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[23:54:46] *** Joins: Voxel (~Voxel@173-46-68-178.baltnet.ru)
[23:54:58] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[23:55:35] <Voxel> Is it just 3 ways to declare a standard variable? "a=1; declare a=1; local a=1;". The last is in function, though
[23:56:18] <lopid> printf -v
[23:57:08] <Voxel> Thank you! What about "set"?
[23:57:22] <lopid> for options
[23:58:24] <Voxel> Oh. Of course!
[23:58:26] *** Joins: guest734 (~guest@host61.181-14-187.telecom.net.ar)
[23:58:29] <Voxel> set --help helped
[23:58:40] <Voxel> Only these 4?
[23:59:04] <emanuele6> read -rd ''a  <<< 1
[23:59:07] <emanuele6> oops
[23:59:09] <emanuele6> read -rd '' a  <<< 1
[23:59:27] <lopid> i suppose you could heinously use eval
[23:59:42] <emanuele6> (( a = 1 ))
[23:59:44] <emanuele6> let a=1
