[01:01:47] <headius> ok back... switching cell providers is not fun
[01:58:09] <headius> ok demon36 I can merge this in but I'm thinking I should put out a release first that either uses just your previous PR or doesn't fix that issue
[01:58:54] <headius> because once we start adding new JNI endpoints we are going to need to be able to fall back to old binary on platforms that don't have the new stuff, which probably means fixing the version number in the binary so we can detect features
[01:59:48] <headius> this step has been a long time coming so perhaps now is the time to do it
[01:59:49] <headius> and then we can upgrade platforms a bit at a time
[02:16:06] <headius> enebo ahorek : I merged in mrnoname's pure-sh basename/dirname stuff
[02:16:24] <headius> so that avoids the original -- issue and we aren't depending on basename or dirname commands
[02:16:37] <headius> script's getting pretty big but more compatible
[04:15:30] <headius> ok M1 mac is up and running, so we can look into GHA builds or whatevs
[05:31:33] <basshelal[m]> demon36: Actually please do write how you got the build running on Windows if you can, ideally in a github repo or gist, so that if we have to do it later and run into problems we at least know how to get something working.
[05:31:33] <basshelal[m]> I know from experience that getting a GNU/Unix environment on Windows can either be really easy or really goddamn convoluted
[06:22:00] <basshelal[m]> <headius> "ok M1 mac is up and running, so..." <- headius: Can aarch64 darwin build for x86_64 darwin or do you have to do that whole fat binary nonsense?
[07:25:06] *** Quits: sagax (~sagax@213.138.71.146) (Excess Flood)
[12:50:16] *** Quits: RobertNicholas[m (~nicholasr@2001:470:69fc:105::3167) (Quit: You have been idle for 30+ days)
[12:50:16] *** Quits: GGibson[m] (~mistergib@2001:470:69fc:105::8ddc) (Quit: You have been idle for 30+ days)
[16:12:24] <demon36[m]> sure will do that
[16:18:23] <demon36[m]> headius PR tests pass in my local env but fail in CI, guessing its caused by using system provided libjffi which lack the recently added methods, log does not seem to be available
[17:12:04] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: lopex[m] (~lopexm]@2001:470:69fc:105::3158) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: enebo[m] (~enebo@2001:470:69fc:105::e6) (Quit: Bridge terminating on SIGTERM)
[17:12:07] *** Quits: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140) (Quit: Bridge terminating on SIGTERM)
[17:12:07] *** Quits: liamwhiteGitter[ (~gitterlia@2001:470:69fc:105::312d) (Quit: Bridge terminating on SIGTERM)
[17:12:07] *** Quits: MattPattersonGit (~gitterfid@2001:470:69fc:105::3105) (Quit: Bridge terminating on SIGTERM)
[17:12:07] *** Quits: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba) (Quit: Bridge terminating on SIGTERM)
[17:12:07] *** Quits: byteit101[m] (~byteit101@2001:470:69fc:105::30ec) (Quit: Bridge terminating on SIGTERM)
[17:12:07] *** Quits: TimGitter[m] (~gittertim@2001:470:69fc:105::314b) (Quit: Bridge terminating on SIGTERM)
[17:12:07] *** Quits: OlleJonssonGitte (~gitteroll@2001:470:69fc:105::313b) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: headius (~headius@2001:470:69fc:105::3027) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: ChrisSeatonGitte (~gitterchr@2001:470:69fc:105::30fb) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: XavierNoriaGitte (~gitterfxn@2001:470:69fc:105::3111) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: JulesIvanicGitte (~gittergui@2001:470:69fc:105::3118) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: JesseChavezGitte (~gitterjes@2001:470:69fc:105::3122) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: fzakaria[m] (~fzakariam@2001:470:69fc:105::30f6) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: MarcinMielyskiGi (~gitterlop@2001:470:69fc:105::3134) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: danieljrubyquest (~danieljru@2001:470:69fc:105::d505) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: kares[m] (~karesmatr@2001:470:69fc:105::30d1) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: TimGitter[m]1 (~gittertir@2001:470:69fc:105::314f) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: CharlesOliverNut (~gitterhea@2001:470:69fc:105::311e) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: jrgriffiniii[m] (~jrgriffin@2001:470:69fc:105::e105) (Quit: Bridge terminating on SIGTERM)
[17:12:12] *** Quits: JasonvanZyl[m] (~jasonvanz@2001:470:69fc:105::dbb4) (Quit: Bridge terminating on SIGTERM)
[17:12:12] *** Quits: basshelal[m] (~basshelal@2001:470:69fc:105::30e7) (Quit: Bridge terminating on SIGTERM)
[17:12:12] *** Quits: kalenp[m] (~kalenpmat@2001:470:69fc:105::3153) (Quit: Bridge terminating on SIGTERM)
[17:12:12] *** Quits: FlorianDoubletGi (~gitterflo@2001:470:69fc:105::310c) (Quit: Bridge terminating on SIGTERM)
[17:12:12] *** Quits: KarolBucekGitter (~gitterkar@2001:470:69fc:105::3127) (Quit: Bridge terminating on SIGTERM)
[17:12:12] *** Quits: kai[m]1 (~kaikdeorg@2001:470:69fc:105::c43) (Quit: Bridge terminating on SIGTERM)
[17:12:12] *** Quits: demon36[m] (~demon36ma@2001:470:69fc:105::dc32) (Quit: Bridge terminating on SIGTERM)
[17:12:30] *** Joins: lopex (uid4272@id-4272.tooting.irccloud.com)
[17:15:31] *** Joins: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2)
[17:27:12] *** Joins: enebo[m] (~enebo@2001:470:69fc:105::e6)
[17:27:13] *** Joins: kai[m]1 (~kaikdeorg@2001:470:69fc:105::c43)
[17:27:13] *** Joins: lopex[m] (~lopexm]@2001:470:69fc:105::3158)
[17:27:13] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[17:27:25] *** Joins: jrgriffiniii[m] (~jrgriffin@2001:470:69fc:105::e105)
[17:27:25] *** Joins: KarolBucekGitter (~gitterkar@2001:470:69fc:105::3127)
[17:27:25] *** Joins: JesseChavezGitte (~gitterjes@2001:470:69fc:105::3122)
[17:27:25] *** Joins: CharlesOliverNut (~gitterhea@2001:470:69fc:105::311e)
[17:27:25] *** Joins: MattPattersonGit (~gitterfid@2001:470:69fc:105::3105)
[17:27:25] *** Joins: XavierNoriaGitte (~gitterfxn@2001:470:69fc:105::3111)
[17:27:25] *** Joins: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140)
[17:27:25] *** Joins: OlleJonssonGitte (~gitteroll@2001:470:69fc:105::313b)
[17:27:25] *** Joins: JulesIvanicGitte (~gittergui@2001:470:69fc:105::3118)
[17:27:25] *** Joins: liamwhiteGitter[ (~gitterlia@2001:470:69fc:105::312d)
[17:27:25] *** Joins: FlorianDoubletGi (~gitterflo@2001:470:69fc:105::310c)
[17:27:25] *** Joins: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba)
[17:27:25] *** Joins: MarcinMielyskiGi (~gitterlop@2001:470:69fc:105::3134)
[17:27:25] *** Joins: kalenp[m] (~kalenpmat@2001:470:69fc:105::3153)
[17:27:25] *** Joins: fzakaria[m] (~fzakariam@2001:470:69fc:105::30f6)
[17:27:25] *** Joins: byteit101[m] (~byteit101@2001:470:69fc:105::30ec)
[17:27:25] *** Joins: JasonvanZyl[m] (~jasonvanz@2001:470:69fc:105::dbb4)
[17:27:25] *** Joins: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146)
[17:27:25] *** Joins: kares[m] (~karesmatr@2001:470:69fc:105::30d1)
[17:27:25] *** Joins: demon36[m] (~demon36ma@2001:470:69fc:105::dc32)
[17:27:25] *** Joins: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100)
[17:27:25] *** Joins: TimGitter[m] (~gittertim@2001:470:69fc:105::314b)
[17:27:25] *** Joins: basshelal[m] (~basshelal@2001:470:69fc:105::30e7)
[17:27:25] *** Joins: ChrisSeatonGitte (~gitterchr@2001:470:69fc:105::30fb)
[17:27:25] *** Joins: danieljrubyquest (~danieljru@2001:470:69fc:105::d505)
[17:27:27] *** Joins: headius (~headius@2001:470:69fc:105::3027)
[17:27:32] *** Joins: TimGitter[m]1 (~gittertir@2001:470:69fc:105::314f)
[20:15:15] <headius> Yeah that is what I figured too. Will look into it today
[21:08:23] <headius> basshelal: I believe it is possible to build for either aarch64 or x86_64 but jffi currently is shipping a fat binary that does both and I don't see an issue with that
[21:24:12] <headius> demon36: I need to spin some releases of jnr stuff in advance of the JRuby 9.3 release... I think it would be best to branch off before your jni-heavy null-terminator code since that is not critical for JRuby and then we can focus efforts on master toward improving the native build situation
[21:24:18] <headius> enebo: seem reasonable to you as well?
[21:24:51] <enebo[m]> headius: yeah
[21:24:58] <headius> the fire will be lit to get the jffi native build more manageable but we will have a branch for the 1.3 series that is not too different from what we have in JRuby now
[21:25:52] <enebo[m]> headius: so you also mean main branch will end up being a new major since it may make larger changes
[21:26:32] <headius> actually I misspoke, this will affect jnr-ffi because demon36 original fix was to do everything for null terminators from java
[21:26:51] <headius> the problem with that logic is that it calls out to jni once to get strlen and then calls again to get the contents plus appropriate length null terminator
[21:27:21] <headius> the binary changes coming in jffi will do that in one shot but we need to be able to evolve the binary more easily
[21:27:47] <headius> so jnr-ffi could be released with or without that fix since I don't think it affects JRuby
[21:28:16] <enebo[m]> so that is better I guess than branching if it really doesn't affect us
[21:28:38] <headius> I will confirm that and ship with demon36 change if it is benign to us
[21:29:22] <enebo[m]> I guess ultimately if this change is really just a fix then branching perhaps only makes sense in if it affects us (maybe) right before a release
[21:29:42] <headius> it is a fix but adds overhead to string-reading operations due to the extra call
[21:30:05] <headius> but I am unsure if we use this call the way that is affected... that's what I will check
[21:30:10] <enebo[m]> ok
[21:30:13] <enebo[m]> lunch
[21:31:51] <headius> hah ok, it never merged anyway... I forgot the PR was never green because of a missing import and then demon36 discovered the overhead
[21:32:03] <headius> so this is a non-issue for update releases today
[21:32:12] <headius> I will review issues and PRs for all jnr and push updates
[21:34:35] <headius> basshelal: you seem to have concerns like I do about fzakaria removal of the default paths... where do we stand on this?
[21:34:50] <headius> perhaps it is safest to release without that PR while we discuss
[21:35:00] <headius> re https://github.com/jnr/jnr-ffi/pull/264
[21:37:56] <headius> if any JNR interested folks have thoughts on this PR let me know, but with no follow-up I am inclined to close it
[21:37:57] <headius> https://github.com/jnr/jffi/pull/96
[21:38:45] <basshelal[m]> I agree with fzakaria but I hate that Darwin doesn't have any way to configure lib paths in an elegant way like GNU/Linux does with `/etc/ld.so.conf`
[21:42:22] <basshelal[m]> I was thinking of something else though that kind of keeps both, kind of like soft coded values.
[21:42:23] <basshelal[m]> Basically have a `Unix` platform and add a method there like `traditionalLibPaths()` or something of the sort that will return a list of these paths, subclasses like `Darwin` or `BSD` can choose to reimplement.
[21:42:23] <basshelal[m]> In the path searching code we remove the hardcoding, so keep fzakaria 's change, but now user's can access these Unix paths when they load or search for libraries by adding that list in the additional paths.
[21:42:23] <basshelal[m]> This keeps the purity while also keeping a sane fallback
[21:43:14] <basshelal[m]> These paths are  `/usr/local/lib` `/usr/lib` `/lib/` and some other friends I think
[21:43:47] <headius> so what I am getting is that we still have a bit of discussion before we nuke the hardcoded paths
[21:44:01] <headius> I did have concerns about wiping them out with zero fallback
[21:44:37] <headius> having some Platform-level traditional default paths seems like a good idea, and perhaps an option that can be set to ignore all default paths
[21:45:03] <headius> fzakaria: when you are around ping us so we can chat a bit more... I will proceed with a 1.3.5 release that does not include your change but I think we are close
[21:45:40] <basshelal[m]> Yeah I was thinking of an option or something like that
[21:45:56] <basshelal[m]> Oh, do try running 
[21:45:56] <basshelal[m]> ```
[21:45:56] <basshelal[m]> ```
[21:45:59] <basshelal[m]> oops
[21:46:08] <basshelal[m]> java -XshowSettings:properties
[21:46:42] <headius> you are right I do not see traditional paths
[21:46:42] <basshelal[m]> on your macOS and show us what you get, I'm still wary I'm doing something wrong
[21:46:44] * headius sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/a3dce8fb04d02d329e55157019cc4517d51bf981
[21:46:52] <basshelal[m]> Oh damn ok, yep same
[21:47:03] <basshelal[m]> wow that's annoying and weird
[21:47:03] <headius> so that is no good as a fallback pathspec
[21:47:21] <basshelal[m]> Was really hoping I was wrong
[21:47:41] <headius> same on 11 and 17
[21:48:09] <headius> different on J9
[21:48:22] <headius>     java.library.path = /Library/Java/JavaVirtualMachines/adoptopenjdk-11-openj9.jdk/Contents/Home/lib/compressedrefs
[21:48:22] <headius>         /Library/Java/JavaVirtualMachines/adoptopenjdk-11-openj9.jdk/Contents/Home/lib
[21:48:22] <headius>         /usr/lib
[21:48:34] <headius> 🤷‍♂️
[21:48:48] <basshelal[m]> there's one 🤔
[21:48:59] <headius> yeah pretty weird
[21:49:12] <basshelal[m]> well it's not reliable that's for sure
[21:50:01] <basshelal[m]> if you even install any dylibs from homebrew chances are they'll go into one of the traditional unix paths
[21:50:02] <basshelal[m]> That's why I did this, because libjack wasn't being detected
[21:50:18] <headius> so we know at least openjdk/hotspot on Darwin does not include traditional paths, that is reason enough for me to reexamine the removal
[21:50:58] <headius> I could be convinced that the remaining library-search logic is rock solid but I am not there yet
[21:51:12] <basshelal[m]> Well let's wait to see what fzakaria has to say, don't merge for now, but the final call is always yours
[21:52:02] <headius> yeah no merge, I will spin 1.3.5 without it
[21:52:19] <headius> if we sort this out it could go into JRuby 9.3.1, that's not a big issue
[21:52:24] <fzakaria[m]> hi.
[21:52:28] <fzakaria[m]> I added some more comments to the PR
[21:52:30] <headius> fzakaria: darwin is dumb
[21:52:37] <basshelal[m]> hello 😊
[21:52:48] <headius> looking at your comments
[21:53:26] <fzakaria[m]> tbh -- I don't think I ever see a case for something being hardcoded when Java itself is configured through system properties already with sane defaults.
[21:53:32] <headius> ok I think we are on the same page... just needs more hardening before we merge but only because Darwin (that we know of) is kinda goofy
[21:53:54] <headius> yeah but just running java without extra properties it is not giving any standard paths
[21:54:03] <fzakaria[m]> This also seems to be tailoring to something maybe Homebrew is doing.
[21:54:03] <headius> arguably it should, but there may be a reason they do not
[21:56:10] <headius> basshelal: does your java.library.path also include `.`?
[21:56:16] <headius> that seems wrong to me
[21:56:37] <fzakaria[m]> FWIW: 
[21:56:37] <fzakaria[m]> https://github.com/AdoptOpenJDK/openjdk-jdk11u/blob/master/src/hotspot/os/bsd/os_bsd.cpp#L349
[21:56:47] <fzakaria[m]> (OpenJDK11 source for BSD)
[21:56:58] <basshelal[m]> headius: yes on both JVMs, I didn't think too much of it
[21:58:31] <headius> basshelal: seems like having `.` in PATH which is generally not a good (i.e. insecure) thing to do
[21:58:58] <headius> someone just has to drop a malicious library in . and then you might load something you didn't expect
[21:59:24] <headius> fzakaria: yeah I can't explain that
[21:59:53] <headius> that clearly is not the only source for `java.library.path` but in this case it doesn't seem to be observed at all
[22:00:24] <fzakaria[m]> I'm not sure how you both got your JDK or who built it --
[22:00:32] <fzakaria[m]> AdoptOpenJDK offers prebuilt binaries you can download and try.
[22:00:40] <basshelal[m]> headius: `.` being like the current dir where the jvm is located right?
[22:00:43] <fzakaria[m]> (I would offer to help but I don't have MacOS)
[22:01:39] <headius> FWIW my `man ld` does not include the list in that comment, but it does mention that it will default to trying /usr/lib and /usr/local/lib
[22:01:42] <fzakaria[m]> it's a macro so conceivably someone could have set it on the g++ arg
[22:02:02] <headius>    Search paths
[22:02:02] <headius>      ld maintains a list of directories to search for a library or framework to use.  The default library search path is /usr/lib then /usr/local/lib.
[22:02:14] <headius> I do not know whether this is at play here or not
[22:02:43] <headius> basshelal: `.` as in `user.dir`
[22:02:43] <basshelal[m]> So theoretically `dlopen` does go through those 2?
[22:02:44] <headius> so whereever you are running from it might search that dir for libraries when loading
[22:02:54] <headius> basshelal: yeah that is what I am wondering
[22:03:10] <headius> if they did this because dlopen will check those paths anyway on Darwin this may be a non-issue (but still weird)
[22:03:43] <headius> not sure it helps us though because we want to find the actual path to libraries and would need our own (i.e. hardcoded) /usr/lib and /usr/local/lib to do it
[22:03:58] <headius> we don't just defer to dlopen to do the search
[22:04:04] <fzakaria[m]> To move this forward -- should i just change the `if condition` to Darwin and open a new issue?
[22:05:33] <basshelal[m]> To quickly solve your issue yeah I'd say that would work, but we need to properly tackle this
[22:05:52] <headius> agreed
[22:06:23] <headius> I would be fine merging this if we excluded Darwin for now, but it seems like a half-measure
[22:06:58] <basshelal[m]> It is, but if it helps NixOS and doesn't harm GNU/Linux now we can merge it and then continue on a better fix
[22:07:31] <basshelal[m]> Is my proposed fix not viable? headius 
[22:08:10] <headius> I tweeted a question about this and can escalate to openjdk folks at Red Hat but I do not know who maintains the Darwin port right now
[22:08:47] <headius> basshelal: no I meant I agree your proposed fix would be fine if it works for fzakaria 
[22:09:11] <headius> fzakaria: if we shipped 9.3 without changing this at all does that impact you?
[22:09:18] <fzakaria[m]> (afk 5 mins)
[22:19:40] <fzakaria[m]> (back)
[22:20:16] <fzakaria[m]> I'm in no rush to merge it for this release as long as there's an opportunity within something reasonable to get another chance to merge.
[22:20:24] <fzakaria[m]> (not 1+ year out between releases)
[22:20:25] <headius> ooo RHEL folks finally reviewed my posix_spawn PR
[22:20:44] <headius> fzakaria: we expect 9.3.1 will be needed **very** soon after 9.3
[22:20:45] <fzakaria[m]> Shouldnt you have priority for RHEL review being a RH employee ? O.o
[22:20:47] <headius> we just want to get it out the door
[22:21:09] <headius> hah well RHEL is pretty tightly controlled and I am just a lowly JVM language guy 😀
[22:26:17] <headius> fzakaria basshelal: then for simplicity I will not merge this until we agree on a good answer for the Darwin problem and we will ship 9.3 without it
[22:31:20] <fzakaria[m]> Good luck with the release :)
[22:32:29] <headius> thanks! need to address these few posix_spawn comments and then I think everything is up to date
