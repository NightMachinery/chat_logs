[00:01:39] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:29:55] *** Joins: amk (~amk@109.255.169.126)
[00:39:11] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:47:18] *** Quits: xyh (~xyh@113.92.73.207) (Ping timeout: 256 seconds)
[00:48:47] *** Joins: klovett (~klovett@107.127.24.145)
[00:48:55] *** Joins: xyh (~xyh@113.92.75.80)
[00:49:07] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[00:57:50] *** Quits: xyh (~xyh@113.92.75.80) (Quit: WeeChat 3.4)
[01:15:55] *** Joins: amk (~amk@109.255.169.126)
[01:20:26] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[01:30:41] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[01:45:10] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:4888:3355:3c57:4437)
[01:47:37] *** Joins: amk (~amk@109.255.169.126)
[01:52:27] *** Joins: skapata (~Skapata@user/skapata)
[01:55:19] *** Joins: notzmv (~zmv@user/notzmv)
[02:00:29] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[02:06:58] *** Joins: amk (~amk@109.255.169.126)
[02:08:47] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:4888:3355:3c57:4437) (Ping timeout: 256 seconds)
[02:15:50] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[02:16:48] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[02:19:17] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[02:19:17] *** karlosz_ is now known as karlosz
[02:24:46] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[02:53:40] *** Joins: karlosz (~karlosz@47.151.136.69)
[03:03:09] *** Quits: yewscion (~yewscion@52.94.133.129) (Ping timeout: 250 seconds)
[03:07:57] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[03:15:58] *** Quits: klovett (~klovett@107.127.24.145) (Ping timeout: 268 seconds)
[03:24:11] <kori> what's the recommended setup for writing scheme on a mac? (chez, specifically)
[03:24:15] <kori> homebrew or something or other?
[03:29:57] <Zipheir> mdhughes is the one to ask about that.
[03:30:15] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:31:31] <Zipheir> kori: https://formulae.brew.sh/formula/chezscheme
[03:39:30] <kori> Zipheir: thanks
[03:42:27] <jcowan> Even Guy Steele can't get it all correct in 2 weeks.
[03:49:02] *** Quits: tripfandango (~tripfanda@77.137.162.21) (Ping timeout: 240 seconds)
[04:18:21] *** Joins: sonny (~sonny@8.6.144.252)
[04:21:44] *** Joins: livoreno (~livoreno@user/notzmv)
[04:26:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:27:07] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Remote host closed the connection)
[04:27:31] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[04:33:51] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:37:12] *** Joins: klovett (~klovett@107.127.24.145)
[04:40:57] *** Quits: em-bee (~eMBee@realss.com) (Quit: Lost terminal)
[04:41:41] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 268 seconds)
[04:43:06] *** Joins: grettke (~grettke@184.62.226.206)
[04:45:32] *** Joins: karlosz (~karlosz@47.151.136.69)
[04:51:57] *** Quits: sonny (~sonny@8.6.144.252) (Ping timeout: 240 seconds)
[04:58:15] *** Quits: grettke (~grettke@184.62.226.206) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:27:26] *** Joins: grettke (~grettke@184.62.226.206)
[05:52:57] *** Quits: schulze (~schulze@dynamic-077-008-025-234.77.8.pool.telefonica.de) (Ping timeout: 240 seconds)
[05:55:06] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:56:10] *** Joins: sonny (~sonny@8.6.144.252)
[06:06:01] *** Joins: genieliu (~genieliu@103.37.140.24)
[06:12:12] <mdhughes> kori: I've got it installed by brew, currently. Anytime it falls behind head I just get that and rebuild locally.
[06:20:04] <mdhughes> I do some FP-ish coding in JS, but only Safari is reliably TCO, so you can't recurse on big data sets.
[06:20:35] <sonny> oh, that's a surprise
[06:20:53] <mdhughes> Troll Chrome users by making everything recursive and destroying their machine. Only Macs can see the site.
[06:21:01] <sonny> lol
[06:34:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[06:37:00] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 268 seconds)
[06:49:14] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:50:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:02:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:ab00:3631:96fa:4872) (Ping timeout: 268 seconds)
[07:02:30] *** Joins: zwr (~zwr@2804:d45:b966:fb00:5e95:5d3f:af2c:e213)
[07:05:55] *** Quits: klovett (~klovett@107.127.24.145) (Quit: ZZZzzz…)
[07:14:54] *** Joins: arbn (~user@047-132-108-226.res.spectrum.com)
[07:26:38] *** Quits: genieliu (~genieliu@103.37.140.24) (Quit: Lost terminal)
[07:29:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:31:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:34:20] *** Quits: sonny (~sonny@8.6.144.252) (Read error: Connection reset by peer)
[07:34:39] *** Joins: sonny (~sonny@8.6.144.252)
[07:34:44] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[07:35:35] *** Quits: arbn (~user@047-132-108-226.res.spectrum.com) (Ping timeout: 268 seconds)
[07:42:37] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[07:46:58] *** Joins: arbn` (~user@047-132-108-226.res.spectrum.com)
[07:47:02] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:47:32] *** Joins: notzmv (~zmv@user/notzmv)
[07:48:29] *** Quits: arbn` (~user@047-132-108-226.res.spectrum.com) (Quit: ERC (IRC client for Emacs 27.2))
[07:49:30] *** Joins: arbn (~user@047-132-108-226.res.spectrum.com)
[07:53:25] *** Joins: karlosz (~karlosz@47.151.136.69)
[08:02:46] *** Quits: sonny (~sonny@8.6.144.252) (Ping timeout: 260 seconds)
[08:07:28] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[08:16:14] *** Joins: sonny (~sonny@2a09:bac0:14::806:90fc)
[08:30:41] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[08:31:17] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 240 seconds)
[08:48:25] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[08:50:12] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[08:52:11] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Remote host closed the connection)
[08:53:17] *** Quits: sonny (~sonny@2a09:bac0:14::806:90fc) (Ping timeout: 268 seconds)
[08:53:58] *** Joins: klovett (~klovett@107.127.24.145)
[08:54:47] *** Quits: grettke (~grettke@184.62.226.206) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:00:07] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[09:05:04] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[09:09:17] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[09:12:52] *** Joins: grettke (~grettke@184.62.226.206)
[09:13:08] *** Quits: grettke (~grettke@184.62.226.206) (Client Quit)
[09:17:58] *** Joins: torbo (~user@72.15.63.17)
[09:20:00] *** Parts: torbo (~user@72.15.63.17) ()
[09:32:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:34:36] *** Joins: frost (~frost@user/frost)
[09:42:11] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[09:43:19] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:56:17] *** Quits: Lysandros (~Lysandros@user/lysandros) (Quit: merry xmas and happy covid-22)
[09:57:38] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:00:54] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[10:19:40] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:19:02] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:43:19] *** Joins: schulze (~schulze@dynamic-095-112-247-150.95.112.pool.telefonica.de)
[11:49:55] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:c02b:79b9:5751:e33a:ea81)
[11:50:45] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:58:54] *** Quits: arbn (~user@047-132-108-226.res.spectrum.com) (Ping timeout: 260 seconds)
[12:02:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[12:04:38] *** Joins: aeth (~aeth@user/aeth)
[12:05:09] *** Joins: Darkcoal (~user@143.92.183.183)
[12:32:39] *** Joins: klovett_ (~klovett@107.127.24.145)
[12:35:17] *** Quits: klovett (~klovett@107.127.24.145) (Ping timeout: 268 seconds)
[12:40:50] *** Joins: grettke (~grettke@184.62.226.206)
[12:41:15] *** Quits: grettke (~grettke@184.62.226.206) (Client Quit)
[12:44:34] <amazigh> hello all
[12:47:15] <sham1> Hello
[12:55:19] <amazigh> wasamasa: tx, my plan is to port https://github.com/idlesign/srptools rfc-5054
[12:55:30] <amazigh> at some point...
[12:58:13] <amazigh> Today, if everything goes according to plan, I will put together the basis for ruse scheme v0.4 release, that will be similar in terms of libraries to v0.2, that is R7RS-large libraries, but instead I will bundle it with a fork of Racket's Chez fork.
[13:06:46] *** nckx is now known as nckxmas
[13:21:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:37:06] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:48:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:48:54] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:09:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:26:32] *** Joins: civodul (~user@guix/contributor/civodul)
[14:33:18] *** Quits: m1dnight (~christoph@christophe.dev) (Quit: WeeChat 3.1)
[14:34:37] *** Joins: m1dnight (~christoph@christophe.dev)
[14:44:45] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[15:01:07] *** Quits: Darkcoal (~user@143.92.183.183) (Quit: Darkcoal)
[15:01:18] *** Joins: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8)
[15:06:22] *** Quits: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8) (Ping timeout: 268 seconds)
[15:06:39] *** Joins: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8)
[15:30:10] *** Joins: seninha (~seninha@user/seninha)
[15:36:03] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[15:50:44] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[16:05:34] *** Quits: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8) (Ping timeout: 268 seconds)
[16:05:57] *** Joins: Darkcoal (~user@143.92.183.183)
[16:09:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:09:15] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[16:09:41] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3457:f613:6c02:3d9f)
[16:09:41] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3457:f613:6c02:3d9f) (Changing host)
[16:09:41] *** Joins: skapata (~Skapata@user/skapata)
[16:25:15] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:c02b:79b9:5751:e33a:ea81) (Read error: Connection reset by peer)
[16:26:44] *** Joins: tripfandango (~tripfanda@5.29.40.38)
[16:29:05] *** Joins: seninha (~seninha@user/seninha)
[16:33:51] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:36:37] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:57:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[16:58:41] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:59:27] *** Joins: libfud (~libfud@2600:1700:48e8:d1cf:aaa1:59ff:fe53:95b8)
[17:00:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[17:21:18] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:71e0:c4bf:d866:f951)
[17:22:32] *** Joins: ManDay (~manday@user/manday)
[17:31:02] <lottaquestions> Hi all, I am currently reading "The Reasoned Schemer", and was wondering about the functioning of letcc. The authors seem to suggest that there is no cost to using letcc to discard the pending operations in a recursion
[17:31:06] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[17:31:24] *** Joins: madage (~madage@user/madage)
[17:31:42] <lottaquestions> But I was thinking that there should be a cost due to still having to undwind the stack. 
[17:31:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:32:57] <lottaquestions> Unless of course I am completely wrong and scheme doesn't actually create a stack for named lambdas (using letrec)
[17:33:26] <lottaquestions> Anyone know?
[17:39:54] *** Joins: yewscion (~yewscion@52.94.133.128)
[17:40:30] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:42:40] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:50:45] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:58:21] <amazigh> lottaquestions: what edition of the reasoned schemers is that?
[17:58:49] <lottaquestions> Oops, meant "The Seasoned Schemer"
[17:59:24] <lottaquestions> The "Hop, Skip and Jump" chapter
[18:01:25] <amazigh> what page?
[18:03:21] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Remote host closed the connection)
[18:04:21] <lottaquestions> amazigh: Page 40 onwards
[18:04:22] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[18:05:55] <amazigh> it does not matter whether it is a recursion or not
[18:06:19] <amazigh> letcc will unwind whatever is on the stack.
[18:07:04] <amazigh> yes for named lambda if used in tail call position, it won't grow the stack, hence the unwinding operation is less costly
[18:07:32] <amazigh> named lambda or else, that's the point of tail recurse
[18:08:35] <lottaquestions> Ahh got it
[18:09:15] <amazigh> re unwinding, it depends how call/cc is implemented, in that particular case, calling hop will climb the stack, hence there is no need to copy, and unwiding is discarding some frames in the current callstack
[18:09:57] <amazigh> climb ~ it is some sort of exception, like `raise` does
[18:10:39] <amazigh> anyway, I did not read seasoned schemer, stay a while, someone else will chime in
[18:12:15] <lottaquestions> Thanks. Will hang around to see what else others have to offer
[18:12:20] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[18:13:49] <amazigh> I saw particular use of call/cc many times, e.g. to return something from a for-each like (define (list-find p? objs) (call/cc (lambda (return) (for-each (lambda (x) (if (predicate? x) (return x)))))
[18:14:22] <amazigh> in the previous example, there is no apparant named-let.
[18:15:32] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Client Quit)
[18:16:34] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[18:17:27] <sjamaan> lottaquestions: In some implementations, there's no traditional stack but rather a continuation object representing where to go next is passed along to the callee.  This can be garbage collected when nothing is hanging on to the "history" as such
[18:17:52] <sjamaan> So a "stack unwind" is basically free
[18:19:07] <amazigh> In some and many cases, it easier to implement *things* in terms of call/cc, but call/cc remains costly in most implementations, so in second step you *could* re-implement it without call/cc
[18:19:43] <amazigh> the example of list-find is trivial to re-implement without call/cc, but they are more complex situation where what is implemented with call/cc takes weeks to re-implement without
[18:20:09] <amazigh> (and leads to code that is difficult to read, hence fast call/cc is great)
[18:21:28] <lottaquestions> sjamaan: Thanks for that. I come from the stack based world, and I am still struggling to understand program flow without it. So anytime I see a function call, I instantly think "new stack frame"
[18:25:08] <amazigh> what does "new stack frame" does mean according to you? potential stackoverflow?
[18:31:39] <lottaquestions> Yes, stack overflow and and of course the cost of unwinding the stack if say you are doing the equivalent of an exception. I do understand though that letcc is not really a throw but a more sophisticated way of controlling program flow
[18:34:45] <amazigh> It is too early to over think optimizations, let/cc (or call/cc) are very handy, it is another tool in the belt, but not a silver bullet.
[18:35:03] <amazigh> Look into delimited continuations.
[18:41:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[18:49:37] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[18:50:22] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:52:03] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[18:52:18] *** Joins: weinholt (weinholt@h-37-123-132-162.A785.priv.bahnhof.se)
[18:56:20] <Zipheir> lottaquestions: Whether or not reifying the current continuation is efficient seems to be mostly implementation-dependent.  Traditionally, Schemes use CPS (https://matt.might.net/articles/cps-conversion/) to compile programs, which makes getting the current cont. very fast indeed.  Another example is SICP's compiler, which has a continuation register; there, letcc or call/cc would just pass the contents 
[18:56:26] <Zipheir> of that register.
[18:57:16] <Zipheir> lottaquestions: Probably the best source to go to for all of this is Steele & Sussman's original papers on Scheme and RABBIT https://en.wikisource.org/wiki/Lambda_Papers
[18:59:36] <Zipheir> Oleg Kiselyov raised some serious general concerns with undelimited continuations, however http://okmij.org/ftp/continuations/against-callcc.html  Indeed, I believe they may be one of the kludgier and more historical features of Scheme.
[19:04:49] <Zipheir> As amazigh says, I think delimited continuations are the way forward.
[19:16:51] *** Quits: tripfandango (~tripfanda@5.29.40.38) (Ping timeout: 256 seconds)
[19:39:19] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:40:48] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:695d:6a31:89e1:c265)
[19:43:22] *** Joins: grettke (~grettke@184.62.226.206)
[19:44:31] *** Quits: grettke (~grettke@184.62.226.206) (Read error: Connection reset by peer)
[19:54:37] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Ping timeout: 240 seconds)
[19:57:30] *** Quits: ManDay (~manday@user/manday) (Quit: TURBOquit (tm) - the fastest way to get out of an awkward situation)
[20:01:10] *** Joins: grettke (~grettke@184.62.226.206)
[20:01:55] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[20:02:21] *** Quits: grettke (~grettke@184.62.226.206) (Read error: Connection reset by peer)
[20:02:59] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:a7a4:1832:6110:e8fa)
[20:14:37] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[20:15:43] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[20:24:37] *** Joins: sonny (~sonny@8.6.144.252)
[20:32:35] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[20:36:17] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[20:40:12] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:52:23] *** Joins: karlosz (~karlosz@47.151.136.69)
[20:52:38] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[20:53:54] <sham1> RE: let/cc not necessarily incuring a cost: one thing to also consider is that if there are no parameters set or anything like that, that is, you don't call parameterize anywhere between your let/cc and the call to the continuation thunk, an implementation could just... jump back there
[20:54:14] <sham1> Set the registers properly and recreate the stack environment
[20:54:40] <sonny> What would I use to compare boolean values? eq? or eqv?
[20:55:05] <sham1> If you really have to compare them, eqv?
[20:55:35] <sham1> Anyway, the "optimal" continuation restoration also is like this for delimited continuations since you can't go deeper in the program state with a delimited continuation
[20:56:40] <sham1> Although you'd still need to call the appropriate dynamic-wind exit thunks
[21:09:24] *** Quits: madage (~madage@user/madage) (Ping timeout: 276 seconds)
[21:12:03] *** Joins: madage (~madage@user/madage)
[21:29:38] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Ping timeout: 260 seconds)
[21:29:45] *** Joins: aeth_ (~aeth@user/aeth)
[21:29:45] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[21:29:48] *** aeth_ is now known as aeth
[21:32:59] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 252 seconds)
[21:33:39] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[21:36:54] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[21:47:45] *** Quits: klovett_ (~klovett@107.127.24.145) (Quit: ZZZzzz…)
[22:08:17] *** Quits: sonny (~sonny@8.6.144.252) (Ping timeout: 240 seconds)
[22:18:11] <amazigh> I always forget about parametrize
[22:18:20] <amazigh> and how it relates to call/cc
[22:19:20] <sham1> Many people probably do
[22:20:23] <sham1> But it is relevant especially when one talks about switching between two continuation hunks, like an implementation of coroutines in call/cc
[22:20:27] *** Joins: sonny (~sonny@8.6.144.252)
[22:20:35] <sham1> Although one would rather do them in delimited continuations
[22:24:34] <amazigh> According to wall-clock time benchmarks, I did not find better coroutines than using call/cc and call/1cc of Chez
[22:24:54] <amazigh> by significant even if undocumented margin
[22:25:10] <amazigh> but again, it is comparing apples and oranges
[22:25:20] <amazigh> resp. gambit and chez
[22:25:49] <amazigh> I should also compare memory use I guess.
[22:26:56] <amazigh> gwatt: I am reading again Chez code (I do not know why)
[22:27:06] *** Spawns is now known as Spawns_Carpeting
[22:27:20] <amazigh> it seems indeed it is not possible to start a scheme program passed as bytevector from C
[22:27:44] <amazigh> without adding a procedure Scheme side
[22:28:28] <amazigh> reading through scheme.h it might be clear it is not possible
[22:28:33] <amazigh> but I had to look around
[22:29:17] <amazigh> the bootfiles are not optimized for standalone executable binaries, they are meant for reuse.
[22:31:05] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:a7a4:1832:6110:e8fa) (Ping timeout: 256 seconds)
[22:33:47] <amazigh> I am impatient to see MNW's new Scheme implementation.
[22:34:16] <amazigh> (and still wondering why they unsyntax does not produce a standlone program)
[22:37:45] *** Joins: yewscion (~yewscion@52.94.133.129)
[22:38:38] *** Joins: klovett (~klovett@107.127.24.145)
[22:43:57] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Ping timeout: 240 seconds)
[22:47:14] *** Quits: sonny (~sonny@8.6.144.252) (Ping timeout: 252 seconds)
[22:55:57] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[23:03:31] *** Quits: klovett (~klovett@107.127.24.145) (Ping timeout: 256 seconds)
[23:07:36] *** Joins: livoreno (~livoreno@user/notzmv)
[23:08:47] <sham1> Probably hasn't gotten that far
[23:08:56] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:10:35] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[23:11:03] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:13:02] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[23:15:24] *** Joins: sonny (~sonny@8.6.144.252)
[23:15:51] *** Quits: sonny (~sonny@8.6.144.252) (Client Quit)
[23:21:16] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[23:22:13] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[23:22:31] *** Joins: trip_fandango (~tripfanda@2a00:a040:19e:72a1:b082:226a:860:9aa3)
[23:22:53] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[23:24:01] *** Joins: aeth (~aeth@user/aeth)
[23:24:39] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:695d:6a31:89e1:c265) (Ping timeout: 268 seconds)
[23:31:00] *** Quits: Darkcoal (~user@143.92.183.183) (Quit: Darkcoal)
[23:33:18] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[23:59:25] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
