[00:00:33] <edgar-rft> I was deeply disappointed about german bureaucracy when I discovered that there is no DIN standard for the size of my penis.
[00:03:37] <pjb> edgar-rft: are you sure? I remember some DIN norm number on the condoms.
[00:10:45] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[00:11:18] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[00:12:31] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[00:30:57] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[00:32:06] <Alfr> gilberth, I wouldn't place the address field somewhere obscure. But I really don't like it also prescribing that paragraphs are to be separated by one line spacing in the body, what's wrong with newline, indentation and no additional vertical spacing?!
[00:42:26] *** Quits: clothespin (~awolven@2601:246:4000:1030:9ce6:79ce:dd91:9642) (Remote host closed the connection)
[00:44:50] <pl> hayley: https://twitter.com/pawel_lasek/status/1441872867356987397?s=19
[00:45:07] <pl> Have one for the anti-crab and GC brigade 
[00:52:21] <Gnuxie> lel
[00:52:56] <gilberth> Alfr: A letter is not a novel. BTW you recognize letters by lawyers by them using sans-serif an 1.5 line-height.
[00:54:40] <Alfr> gilberth, depends. In some letters I do narrate, and that's the main reason I sometimes choose to ignore certain parts of it.
[00:55:09] <gilberth> Then I suppose that is not a business letter.
[00:56:14] <Alfr> gilberth, it doesn't only cover business letters.
[00:56:19] <gilberth> And what is an obscure place for an address field? It's right there where the transparent window in your envelope is.
[00:56:51] <gilberth> Alfr: It certainly doesn't cover love letters.
[00:57:22] <Alfr> gilberth, fine.
[00:58:28] <Alfr> gilberth, you could file a complaint that it's under specified.
[00:59:49] <gilberth> Why should I care? I usually don't write love letters. Besides there is no one I could send one to anyway.
[01:01:11] <gilberth> Otherwise for e.g. invoices it makes sense and leaves a professional look, when you stick to the rules.
[01:02:27] <gilberth> What I however hate when people write their IBAN number without blanks every four digits.
[01:02:35] <gilberth> * hate is
[01:02:42] <pl> Ugh 
[01:03:19] <pl> Have an extra fuckiness for that - applications that count the blanks as part of IBAN length
[01:03:42] <gilberth> You then face a lot of zeros in a row. And btw why isn't there some QR-Code I could just scan to have all the details I need to make a bank transfer for a given invoice. That would save at lot of time.
[01:03:46] <pl> So if you have standard-format IBAN with blanks every 4 digits, it gets truncated 
[01:03:51] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:04:42] <gilberth> pl: Indeed, the online banking of my bank used to strip the blanks right away when input. It doesn't do that anymore.
[01:05:17] <gilberth> And same applies to phone numbers at times.
[01:05:38] <pl> gilberth: btw, there's an URL scheme that allows IBAN (and thus is trivially encodable in QR code) 
[01:06:13] <gilberth> Also all the other details, like invoice number and due date etc.? I doubt it.
[01:07:15] <gilberth> Anyhow, this is an idea I had some 25 years ago already.
[01:07:53] <gilberth> When doing your books just *beep* *beep* *beep* the invoices you got.
[01:07:56] <pl> payto://iban/IBAN_ACCOUNT_NUMBER?amount=CURRENCY:AMOUNT&message=MESSAGE&sender-name=SENDER&receiver-name=RECEIVER&instruction=SPECIAL_INSTRUCTIONS 
[01:08:12] <gilberth> Ah.
[01:08:24] <pl> gilberth: there are standards for this, but unfortunately only big enterprises and specific areas seem to support them 
[01:08:38] <pl> That is, pretty much all EDI systems have invoice datatype 
[01:08:43] <pl> And PO datatype etc 
[01:09:20] <gilberth> Due? And skonto? (what's the english term?)
[01:09:39] <pl> Hell, EDI-style interactions where what I learnt SOAP with (and why I'm much happier about SOAP than most) 
[01:09:40] <gilberth> Anyhow, nobody uses that.
[01:10:01] <pl> gilberth: this is scheme for directing payment itself, for example as link on invoice 
[01:10:18] <gilberth> Still, nobody uses that.
[01:10:41] *** Quits: dra (~dra@2a04:4540:640c:f100:8881:b96:6405:a162) (Ping timeout: 250 seconds)
[01:11:22] <pl> Nobody in the markets you deal with, I guess 
[01:11:42] <pl> EDI tends to show up in markets like B2B automotive and so on 
[01:12:06] <pl> There's some push for eInvoicing by EU 
[01:12:10] <gilberth> No. And my private invoices, I get also don't feature that.
[01:12:35] <pl> I think it involves embeddable metadata in cases of invoices sent as PDF, among other formats 
[01:13:00] <gilberth> I mean it could have been so incredible easy with just a bar code^W^WQR-code.
[01:14:03] <gilberth> pl: A QR-code would work on paper. Also for the small repair shop around the corner.
[01:14:17] <pl> gilberth: the problem is the data on it 
[01:14:36] <gilberth> It's the same data as the invoice states already.
[01:14:50] <pl> Technically, one could use EDIFACT standards, their proiblem is that you need to somehow push for them to be made by shops 
[01:15:06] <pl> gilberth: machine-readable format that your software will understand 
[01:15:21] <pl> Large logistical operations already use those kind of things 
[01:15:32] <pl> (unless you're a British port) 
[01:15:54] <pl> UN EDIFACT has a whole lot of definitions that can be used 
[01:16:04] <gilberth> You are thinking too complicated. In the olde days some "Überweisungsträger", a paper form for a bank transfer, was attached to an invoice. Put the very same damn data into a QR-code. Set.
[01:16:25] <pl> But you need to get one syntax into QRcode that will be accepted by software 
[01:16:41] <gilberth> pl: Yes, I know, that large companies use that already. Doesn't help me, I am not a large company.
[01:16:44] <pl> For *just* the payment, the payto schemes quick and easy solution 
[01:17:13] <gilberth> pl: All those bank transfer forms looked exactly the same. So there already is a standard.
[01:18:07] <pl> gilberth: for humans, not for machine to read 
[01:18:32] <gilberth> pl: Yes, but the just-for-payment information would already be a huge time saver. Both for payment and for accounting. Only thing missing would be the due date and the invoice date.
[01:19:02] <gilberth> pl: Those bank transfer forms are read by a machine. Since decades.
[01:19:24] <gilberth> This is why they look all alike. Banks have a standard for that.
[01:19:31] <pl> Hmm. Not here, so couldn't get that link 
[01:19:59] <pl> (you're liable to have people scrambling like headless chicken if you ask for paper bank transfer form) 
[01:20:20] <gilberth> How so?
[01:20:20] <pl> There's standard one for transfers done through post office, and those are read manually 
[01:20:37] <pl> gilberth: nobody uses paper forms for transfers in Poland 
[01:21:54] <gilberth> Manually? Are you sure? Computers not yet available in Poland?
[01:22:13] <gilberth> Even addresses on letters are read by machines since decades.
[01:24:39] <pl> gilberth: I found the standardised form, but it's pretty much not used outside of very small percentage of population (mostly old pensioners with no Internet access) 
[01:24:52] <gilberth> Anyhow, what I tried to say is that there was already a [paper] standard you just would need to pour into a QR-code automatically be added by whatever accounting software you use to write the invoice with. Using that could be big time saver for all businesses, not just a few large ones. And it also would work on paper.
[01:25:21] <pl> It's rare enough that automating it costs more than doing it manually, especially since computer lacks the scope of error handling and support that a human can provide 
[01:25:44] <gilberth> pl: What did you use before the internet. And, yes, they are not commonly used anymore.
[01:26:45] <gilberth> pl: Those forms were read by machine even in the 80s.
[01:26:47] <pl> gilberth: before the Internet bank branches would have lacked the OCR capability to parse the forms 
[01:27:14] <pl> The switch to majorly bank-transfer based payment system coincided with increased Internet banking 
[01:27:17] <gilberth> branches? A few central places would have been enough.
[01:28:20] <gilberth> BTW, companies used to carry their bank transfers on a floppy disk to their bank also in the 80s. Call it sneaker net.
[01:28:30] <pl> gilberth: essentially, we seem to have jumped across that. Also, smaller banks would already have to locally write transactions to floppies to execute the transfers 
[01:28:51] <pl> (assuming lowest-end tech in a bank) 
[01:29:18] <gilberth> I see. So a bit like you don't find land lines in some countries as they jumped to mobile right away.
[01:29:45] *** Joins: shka (~herr@109.231.62.239)
[01:31:06] <pl> somewhat
[01:31:17] <gilberth> Still, every time I copy an IBAN and an invoice number from paper into my machine, I think "Gosh! How primitive and superfluous."
[01:31:24] <pl> I think prefilled postal transfer forms are still included in many places
[01:32:00] <pl> gilberth: I think in some cases my software automatically imports them from PDF, but I think that's for those that (possibly unknowingly!) generated PDF with EU eInvoicing metadata
[01:32:14] <gilberth> Useless for me, as I don't use those. And some banks charge extra for paper bank transfer forms.
[01:33:00] <gilberth> pl: Often I don't even have a PDF. Heck, for PDF even cut and paste would already work. At least.
[01:33:33] <pl> I think paper invoices tend to cost more for me, and it's mostly low-end purchases where I get them, like buying pizza as company
[01:34:41] <gilberth> And since business like phone companies don't trust email I refuse to get electronic invoices. Because they then assume you login to their online portal to download these. How many online portals I am supposed to check each day? Seriously?
[01:36:02] <gilberth> Imagine snail mail working that way. You run around all of town to pick up your letters?!
[01:36:24] <pl> ... wat
[01:36:47] <pl> I just get PDF attachments from, hmmm, 99.9% of companies in poland
[01:36:57] <pl> the outliers are usually ones from outside poland
[01:37:03] <gilberth> As I wrote. I could get my phone bill in electronic form. But not by email, but by download from their site.
[01:37:42] <gilberth> Or my electricity bill or whatever.
[01:38:01] <gilberth> Thanks. I take paper then.
[01:38:38] <pl> yeah, that's what surprised me. Most places in Poland will simply let you specify email to receive the invoice
[01:39:39] <gilberth> Nah, not here. Unless you already order online. Germany is a third world country wrt to the internet.
[01:41:29] <pl> (regular reminder that "3rd world" doesn't refer to development level /s )\
[01:41:37] <pl> still better than USA
[01:42:16] <hayley> pl: Brings a new meaning to "on the fly" garbage collection
[01:45:11] <gilberth> pl: Well as my wife and me where looking for a new house, we rejected some really nice ones, because there would internet at the fast speed of up to 0.384Mbps on a dry day, only.
[01:45:58] <pl> that's still two orders of magnitude faster than rural USA
[01:46:14] <gilberth> When it rains, there would be no internet, because the land line gets wet. My sister has such a line.
[01:46:36] <hayley> https://old.reddit.com/r/GCSolidarity/comments/nx80sj/who_would_win_crab_propaganda_or_on_the_fly_gc/
[01:46:37] -ixelp- who would win: crab propaganda or on the fly GC : GCSolidarity
[01:48:14] <gilberth> pl: Magnitudes? Modem speed? Nah, an analogue modem is at 0.038Mbps, that is only one magnitude slower.
[01:48:14] <pl> hayley: also, I find it very funny that Rust has unpredictable pauses /AND/ a bow-before-me borrow checker because it misses the 2/3rds of the paper that introduced its own style of memory management
[01:48:53] <hayley> pl: "haha regions go brrr"
[01:49:38] <gilberth> hayley: Why are you so obsessed with Rust? Still.
[01:49:50] <pl> then you find out that regions are essentially malloc()/free() on each individual resource with maybe some grouping and it's naively translated into equivalent of manually coded malloc()/free() :(
[01:50:09] <manicennui> https://www.youtube.com/watch?v=QTiAWZ1YfzI
[01:50:10] -ixelp- THEY HAVE PLAYED US PROGRAMMERS FOR ABSOLUTE FOOLS - YouTube
[01:50:21] <hayley> gilberth: pl started it
[01:50:48] <kakuhen> crabs win; it's over
[01:50:49] <gilberth> hayley: Yeah, yeah, sure. Blame someone else.
[01:51:32] <gilberth> kakuhen: Win what exactly? Have we lost? And when, what have we lost?
[01:52:11] <hayley> gilberth: You may be onto something. With your test I take 136ms compiling with no submatches and 56ms with submatches.
[01:52:58] <gilberth> hayley: Heh? You're faster with submatch addressing?
[01:53:10] <hayley> Wrong way around, oops.
[01:54:08] <gilberth> And, what I am onto? A silly speed hack for silly online use?
[01:54:09] <hayley> And the compile time grows much faster going from 3 groups to 5, 8x for no submatches and 32x with submatches.
[01:55:10] <hayley> That perhaps doing copy propagation before makes type inference faster, as SBCL does type inference then copy propagation?
[01:55:52] <gilberth> hayley: Have you tried CCL? As I see a 2.5 increase from 3 to 5 dyslexia groups.
[01:56:07] <gilberth> hayley: Ok. I see. Thanks.
[01:56:18] <hayley> No, but the Clozure compiler was still pretty slow. 
[01:56:56] <gilberth> Really? It is not doing anything.
[01:59:40] <moon-child> gilberth: you would be surprised at how slowly a lot of modern software which manages to do nothing
[01:59:48] <moon-child> s/which//
[02:00:24] * hayley takes some statistics.
[02:00:57] <hayley> Apparently, at most 29 variables are live at one state. On average, only 16.2 are live. 
[02:01:01] <kakuhen> gilberth: idk i just glanced at my irc client and saw something about crabs vs something
[02:01:34] <gilberth> kakuhen: Fair enough.
[02:03:19] <gilberth> moon-child: CCL isn't modern and has a reputation for a fast yet dumb compiler.
[02:04:24] <hayley> OTOH when I had a broken copy propagation pass, the Lisp compiler didn't run go faster .
[02:05:36] <gilberth> We need better compilers. /me looks at hayley.
[02:06:18] * hayley hides
[02:06:30] * gilberth seeks
[02:06:41] <semz> The reputation sadly isn't undeserved
[02:06:57] * gilberth spots
[02:07:16] <gilberth> hayley: There you are! Got you.
[02:08:30] <gilberth> semz: A quick compiler isn't that a bad thing. What I like most about CCL is that doesn't want to be a batch compiler.
[02:10:43] <semz> I'm not saying it's bad, but I've been feeling it lately because I ran into a really silly bottleneck recently (XORing buffers, lol) and was forced to go on a microoptimization bender
[02:10:46] * hayley now wonders why the copy deletion pass didn't work.
[02:11:34] <semz> thankfully not really relevant in day to day use
[02:12:33] <hayley> gilberth: So my copy propagation pass checked if there were different assignments to variables and both are still live <https://github.com/telekons/one-more-re-nightmare/commit/cd524b4c9aa39e73ef648ef35681774b26818cc0>
[02:12:33] -ixelp- Attempt to implement alias removal · telekons/one-more-re-nightmare@cd524b4 · GitHub
[02:15:37] <gilberth> hayley: Heh, you want qualify yourself as a compiler writer? Good. We have a winner then.
[02:15:56] <hayley> No, the pass didn't work for some reason.
[02:16:20] <gilberth> Practice, hayley, practice. :-p
[02:16:34] <hayley> Cool, so what's wrong with it?
[02:16:39] <gilberth> Anyhow, you care for liveliness?
[02:17:01] <gilberth> hayley: You expect me to fix your code?
[02:18:00] <hayley> I probably won't do liveness, because then I'd need (virtual) register allocation which gets NP quickly.
[02:18:38] <gilberth> You wrote "and both are still live"
[02:18:58] <hayley> Oh yeah, I already track liveness in the REs.
[02:19:25] <hayley> d_a [t <- P]a = [t <- t]
[02:19:59] <gilberth> Your linear assignments?
[02:20:28] <hayley> Yes.
[02:20:55] <hayley> Rather than gensym'ing I try to emit [t <- t] where possible. 
[02:21:18] <gilberth> Ok. I don't have that. Have you proven your approach correct?
[02:22:28] <hayley> Only informally. But I don't think the proof is too hard.
[02:23:22] <gilberth> Good. So what is not working with your copy propagation?
[02:25:16] <hayley> (Think that if we have [t0 <- p]abc wherein t0 is definitely consumed, then reusing the tag a la [t0 <- t0]bc is equivalent to [t1 <- t0]bc)
[02:27:54] <hayley> It appears to have false positives, because I get wrong results. That's all I know so far.
[02:29:04] <gilberth> Then you might happen to exit the analysis loop prematurely. Or miss kills.
[02:30:14] <gilberth> What happens, when you turn off that linear assignment optimization, which I presume, you do on the RE level.
[02:31:45] <hayley> Then I get 384 variables. Not kidding.
[02:31:59] <gilberth> A round figure at least.
[02:32:16] <hayley> And I had 144 with linearity?
[02:32:33] <gilberth> Also a curious figure.
[02:33:14] <hayley> So my linearity does work, thanks.
[02:33:37] <gilberth> At least it's not the obvious culprit.
[02:33:57] <hayley> Eliminating nearly two thirds of the variables is pretty good to me.
[02:34:12] <gilberth> Yep.
[02:34:48] <gilberth> This is three-fold dyslexia?
[02:34:59] <hayley> Yes.
[02:35:18] * hayley has to get up now.
[02:35:22] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[02:41:59] <gilberth> Up?
[02:48:35] <semz> I wanted to post https://cr.yp.to/talks.html#2015.04.16 earlier during the CCL talk; ended up looking over the slides and only now noticed that he's basically describing a Lisp at the end.
[02:48:36] -ixelp- D. J. Bernstein / Talks
[02:49:36] <moon-child> what in the world
[02:49:56] <moon-child> today I learned: 1) there are horizontal format slides for djb's talks, and 2) they're somehow even uglier than the vertical format ones
[02:50:08] <semz> lol
[02:50:13] <semz> his slides are something else alright
[02:50:51] <gilberth> hayley: Before data flow: <https://termbin.com/rr8u>, after: <https://termbin.com/rhg2> Where do you pull that many registers from?
[03:10:31] <gilberth> The CADR software helpfully moves your the mouse pointer into pop up menus and the CADR emulator then tries to move the mouse pointer back to where the host system has the mouse pointer. This makes menus hard to operate, as, when the emulator is doing it the virtual CADR mouse moves out of the menu, which then vanishes again. And it's distracting because both the emulator and you control the mouse pointer.
[03:11:35] <gilberth> When the simulator is trying to match the CADR's mouse pointer position with the host mouse pointer position this isn't done with a jump, but incrementally and rather slowly.
[03:13:12] <gilberth> It should be the reverse: When the CADR updates the mouse pointer position, the emulator should update the host's mouse pointer. Or I just grab the mouse and let it go with say Meta-Super depressed as many VMs do.
[03:16:32] <gilberth> And BTW why is my Backspace key mapped to <OVERSTRIKE> and not <RUBOUT>? Technically that is correct, but you expect the Backspace key to behave like <RUBOUT>, that is delete the last [mis]typed key. Delete is bound to <RUBOUT> and I don't even know how to type that on my laptop.
[03:17:59] <gilberth> Ok. Time to figure how how the CADR keyboard I/O interface is supposed to work.
[03:32:41] *** Quits: random-nick (~random-ni@87.116.183.216) (Ping timeout: 252 seconds)
[04:04:23] <hayley> Is this scanning or grep?
[04:04:42] <hayley> IIRC the scanner was 15 states, and the grep more like 35.
[04:05:08] <hayley> Also IIRC Fn+Backspace is del on a macbook.
[04:05:29] <kakuhen> gilberth: 2 hour old topic, i know, but i just saw it: "fast yet dumb compiler" is a nice description
[04:05:50] <kakuhen> one of my friend's first complaints about CCL is how the compiler fails to optimize many things he thought were obvious 
[04:06:01] <kakuhen> and these optimizations do occur with other implementations (e.g. SBCL)
[04:06:07] <kakuhen> I don't have an immediate example rn but I can find it soon
[04:10:50] <hayley> Come to think of it, I think I miss some uses while doing the juggling involved in reusing states, and I overestimate uses in e.g. alpha[{A}, {B}] wherein only B is really live.
[04:10:55] <hayley> Er, only A is live.
[04:16:34] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[04:19:23] <gilberth> hayley: grep.
[04:57:19] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[04:57:41] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[04:58:29] <gilberth> And the CADR simulator assumes an QWERTY keyboard, which I have, but others might not. I believe for a good experience it would be nice, when the simulator would translate whatever keystrokes come in according to the keymap the user happens to use to the LISPM keyboard. That is: Press an 'a' and get an 'a'.
[04:59:36] <gilberth> And actually I use a modified keymap personally, with parens and brackets swaped. It would be lovely, when this would just work.
[05:04:19] <gilberth> This is tricky, as when I would see a '(' on my keyboard, I would need to feed a shift-down, 9-down to the CADR. Hmm. As what usually is the '[' key is my '('.
[05:06:38] <gilberth> BTW Didn't the CADR have an RTC?
[05:08:01] <hayley> Well, then I also have the problem of having twice as many states.
[05:12:08] <hayley> Maybe I need to find another not-duplicating optimisation for grep, but I don't think there are any.
[05:13:40] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-104D-static.midco.net) (Ping timeout: 250 seconds)
[05:17:38] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[05:19:23] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[06:16:10] <hayley> gilberth: So, you have n-ary + right? One object with all the alternations?
[06:16:25] <hayley> I spotted I have some redundancy as I only have binary +, which looks like a bad idea now.
[06:18:58] * hayley writes rewrite rules and gets more states. Good start.
[06:24:47] <gilberth> hayley: My + is binary.
[06:25:25] <gilberth> But why would that matter?
[06:26:28] <hayley> I'm starting to think I missed some rewrite rules.
[06:26:30] <gilberth> I mean, a cons is binary too, isn't it.
[06:29:23] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[06:29:48] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:31:42] <gilberth> hayley: Yes, for alternations I have code that kills a latter occurring redundant term. This is even in mandatory because otherwise the algorithm is not guaranteed to terminate. cf my paper or Brzozowski. <https://termbin.com/e9m0>
[06:32:28] * hayley uploaded an image: (199KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/gHCDjUtcjhmyyhtswlsYMcUM/dfa.png >
[06:34:30] <gilberth> I count 13 states.
[06:34:58] <hayley> Close enough. But this is for a scanner and not grep.
[06:35:43] * hayley decides to normalize all EITHERs to (either A (either B (either ...))) i.e. no EITHER on the LHS
[06:36:11] <gilberth> Ouch! DON'T!!!! PLEASE NOT!
[06:36:35] <hayley> + isn't associative?
[06:36:41] <hayley> You kidding?
[06:36:46] <gilberth> No, it's not.
[06:37:36] <hayley> p. 3 "Our alternation operation [...] is still idempotent and associative."
[06:38:19] <gilberth> Sorry.
[06:38:49] <hayley> Are you sure you're not thinking of JOIN, which you said was not associative?
[06:39:38] <gilberth> Perhaps. I just recalled being badly biden by assuming associativity.
[06:40:03] <gilberth> And it was concatenation, indeed. Sorry, hayley.
[06:40:08] <hayley> I admit I don't see the problem with saying + is associative. We still preserve the order here.
[06:40:12] <hayley> Okay, no stress.
[06:41:41] <gilberth> In fact I do the same to + but leftish.
[06:43:17] <hayley> OTOH I could believe that I'm not doing + elimination properly with the huge grep vectors.
[06:44:09] <gilberth> To my defense, recall that POSIX rules wrt to empty matches could be very surprising.
[06:45:37] <gilberth> hayley: Yes, I was playing with CADR simulator all night and have not in invested my time to figure the problems that I see when plugging in your definition.
[06:46:03] <gilberth> Anyhow, my grep uses a vector and cancels explicitly.
[06:46:33] * hayley decides to give the not hash-consing functions a proper interned name, so she can write (reduce #'%either (remove-duplicates ...)) or something.
[06:55:34] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[06:56:09] * hayley runs again and gets 46 states now?
[06:56:40] <gilberth> You like states, don't you? Lots of them.
[06:56:46] <hayley> Not really.
[06:57:40] <gilberth> Well, you shouldn't have called it a night mare. Nomen est omen.
[06:58:10] <hayley> It's called One More RE Nightmare cause cl-ppcre was the former RE nightmare.
[06:58:44] <gilberth> Yes? Did Edi called it that way?
[06:58:49] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[06:59:17] <hayley> Nope.
[06:59:24] <gilberth> You did?
[06:59:49] <hayley> Yes.
[06:59:55] <gilberth> See.
[07:00:43] <gilberth> You should have called it "Yet another sweet dream" instead.
[07:01:56] <gilberth> https://www.youtube.com/watch?v=qeMFqkcPYcg
[07:01:57] -ixelp- Eurythmics, Annie Lennox, Dave Stewart - Sweet Dreams (Are
[07:05:39] <gilberth> Notice the guy at the computer keyboard, that's me hacking along.
[07:07:07] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:20:26] *** Joins: semz (~none@user/semz)
[07:26:24] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:29:40] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[07:34:46] <hayley> https://www.youtube.com/watch?v=c29jLuCyBG8
[07:34:47] -ixelp- Gary Numan Remind Me To Smile Hammersmith 1980 - YouTube
[07:35:00] <hayley> Alternately, the guy at https://www.youtube.com/watch?v=OddgsPyCJmU
[07:35:00] -ixelp- Orchestral Manoeuvres In The Dark - Genetic Engineering -
[07:44:05] <hayley> https://twitter.com/zachary_allard/status/1441878824510103554/photo/1 hamster stonks
[07:48:02] <hayley> gilberth: a[something nullable, tags] == a[same something, other tags]. No?
[07:50:11] <hayley> The old tags are overriden by nullable of the current RE, so they could be eliminated and have the same effect.
[07:52:50] <gilberth> In what context?
[07:53:31] <hayley> We only use alpha to get a "history" using nullable, and for some alpha[R, H] if R is nullable then H is not used.
[07:54:39] <gilberth> Sounds about correct.
[07:55:14] <hayley> So I could kill off some states by replacing the history with ø.
[07:56:26] <gilberth> What exactly is it that you use \alpha here for?
[07:57:09] <hayley> I use it for marking the start and end of REs like (ab)*.
[07:57:22] <gilberth> Oh.
[07:58:14] <gilberth> Why the hassle?
[07:58:49] <gilberth> I mean I need no extra device for iterations.
[07:59:29] <hayley> I couldn't figure it out without alpha.
[07:59:50] <gilberth> You're kidding me again, lady.
[08:00:10] <hayley> Not kidding.
[08:00:50] <gilberth> Let me see.
[08:02:59] <gilberth> You handle r* in the surface syntax as \nu(z) + z* with z= [t_1<-UNDEFINED, .., t_n<-UNDEFINED]r, for all t_i appearing in r.
[08:03:01] * hayley goes from 6 to 4 states for grepping (a)*
[08:03:53] <gilberth> The \nu(z) is for POSIX's rule "no match longer than no match"
[08:03:54] <hayley> Right, I have not been doing that.
[08:04:15] <gilberth> I told you, milady. You were not listening.
[08:04:34] <hayley> I remember \nu(r) + r* but not the tags and all...
[08:05:26] <hayley> 2.1.2 Iteration only says \nu(r) + r*
[08:06:26] <gilberth> Yep, I am not telling all the obvious tricks in that draft.
[08:07:53] <hayley> From 45 to 38 states for my grepping (aba|ab|a){3} machine. Not bad, but still shit.
[08:08:49] <hayley> Without submatches it's down to 13 states from 14, which also is not significant.
[08:09:26] <gilberth> Unless you fear the number 13, that is.
[08:10:38] <hayley> It also made graphviz make more spaghetti.
[08:10:48] * hayley uploaded an image: (174KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/dFKsnASBpTXFVfqvjfwLjKjg/dfa.png >
[08:11:55] <gilberth> I was once travelling by plane with my wife, who is mildly afraid of flying, us seated at row 14. After we landed safely I told her, that there is no row labeled 13, and thus we were sitting in row 13 technically. I barely survived her response.
[08:12:26] <hayley> She wanted to avoid having one more red nightmare.
[08:12:38] <hayley> (The song is about having a nightmare about a plane crash.)
[08:13:42] <gilberth> Ah, ok. I am afraid of traveling by ship though.
[08:14:05] <gilberth> hayley: I don't spot a greper.
[08:14:22] <hayley> You want to see the grep machine?
[08:14:47] <gilberth> Not when it has too many states. No.
[08:15:04] <hayley> The correct answer.
[08:15:06] * hayley uploaded an image: (1221KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/AcInmlqYHunExwrGrnYbvRnk/dfa.png >
[08:15:33] <gilberth> All the labels are so tiny, I can't read them.
[08:27:39] <hayley> Hm, I also don't "reduce to the old state by doing {t^m_i ← undefined}" either.
[08:34:22] <gilberth> Yes, actually my prepending of t_i<-UNDEF has sth to do with the reducible predicate.
[08:35:51] <gilberth> But when you feel more comfortable: I had my share fun with all that kind problems you face.
[08:36:50] <hayley> Apparently, after stripping tags, there are only 29 unique states, which is again a bit better. So I need a better reducible function.
[08:37:50] <gilberth> Maybe or maybe not, who knows.
[08:39:40] <gilberth> The mouse interface of the CADR is curious has the hardware maintains some absolute or accumulated position. Which makes sense, the interrupt is then just a motion hint and the machine could take all its time to look.
[08:40:47] <moon-child> hmm, I don't like that
[08:40:55] <moon-child> it's misrepresenting the underlying signal, which is relative
[08:41:28] <gilberth> Yes, but you can't miss a thing and won't be drowned in interrupts.
[08:42:00] <moon-child> then make the hardware instead keep a ring buffer of past n deltas
[08:42:10] <moon-child> absolute 'curs position' should be a representation which is projected onto the deltas, not the other way around
[08:42:18] <gilberth> And again, it's of no use to update the mouse pointer on the screen more often than one could even see that.
[08:43:09] <gilberth> moon-child: Still better than you have the speed of motion of the mouse pointer depending on the work load of the machine.
[08:44:11] <moon-child> hehe, reminds me of: in win95, if you wiggled the mouse, the installation would go quicker.  Because the interrupts made it poll i/o more frequently
[08:44:13] <gilberth> I mean, typeahead is considered a win, isn't it?
[08:44:29] <kakuhen> offtopic, but, I'm using NSNotificationCenter for the first time in my life and this feels awfully familiar to the object-oriented events API that me and a friend made months ago for some lisp game we have stopped working on
[08:44:44] <kakuhen> it also seems to offer an interesting way to solve a problem we encountered with our own events API
[08:44:49] <gilberth> moon-child: Is that actually true or a myth?
[08:45:11] <moon-child> no idea.  But it's a good story either way
[08:45:47] <hayley> Well shit, the guy who is making the video for my assignment group actually set it to the Grand Designs theme.
[08:45:59] <gilberth> It'll crash after 48 days nevertheless, Win95 that is.
[08:48:34] <gilberth> Anyhow, wrt to the mouse pointer. Both macOS and me compress the motions events you see, so that even when the machine not responsive it won't be drowned in say presentation high and unhightlig hopelessly behind to where the mouse is now. Samething with configuration (resize) events.
[08:50:01] <gilberth> And remember that the CADR has a 200ns cycle time. That's 5MHz. For the microcode, not the macro code.
[08:50:44] <moon-child> yeah; slow hw, is ok to compromimse on the software side a bit for its sake
[08:51:53] <gilberth> I still don't consider motion event compression a compromise. Or vsync, which is a similar thing.
[08:52:30] <gilberth> After all it's only 60 frames per seconds to the screen, why update it more frequently?
[08:53:57] <gilberth> Text editors on slow serial lines had the feature to stop doing redisplay altogether or doing only for the current line when key strokes come in faster than it would take to send all the updates down the wire.
[08:56:10] <gilberth> I just happen to have a completly different philosophy here. There is things happening internally, and what is send to the screen is just an as up to date as possible view of the internals with as less as possible slowdown on the internal workings.
[08:56:34] <gilberth> The speed of your display should not govern the speed of your program doing things.
[08:57:11] <moon-child> that's a very video-game-oriented approach to gui
[08:57:12] <gilberth> Not like with Excel, where macros could be executed faster with a faster graphics card. I remember reading such benchmarks.
[08:57:26] <hayley> gilberth: Do you have numbers on how important {t <- undefined} is?
[08:57:41] <gilberth> moon-child: It is. Or OpenGLish.
[08:58:13] <gilberth> hayley: At the Kleene star it is an issue about correctness in my implementation.
[09:01:10] <hayley> I see.
[09:01:12] <gilberth> moon-child: Free-CLIM at a 100km distance via DSL land lines, 30ms latency. <http://bauhh.de/free-clim/free-clim-remote.mov>
[09:03:46] <gilberth> hayley: I needed to explicitly set the registers to UNDEF because otherwise some would have stuck values when the answer should say "not-matched".
[09:08:49] <gilberth> moon-child: BTW I am currently applying the same principle to the CADR simulator GUI and it already feels way snappier. You Select-E and Select-L and the flip is almost instantly between ZWEI and the Listener.
[09:15:00] <gilberth> And the simulated cycle time dropped by like 50%. I am steady at 30ns now. And I haven't even started to tune the CPU simulator.
[09:16:02] <hayley> Tracing CADR JIT?
[09:16:41] <gilberth> On that note I rather do want to slow the CPU down to its original speed.
[09:17:42] <gilberth> hayley: Why trace? I suppose almost all the CPU is hot.
[09:19:36] <kakuhen> i just made the ugliest way to separate timeline updates in instances of audio "documents"
[09:20:00] <gilberth> I assume the code of the simulator was written for correctness and to figure out what the machine does, rather than speed.
[09:20:33] <kakuhen> every time the audio queue callback is invoked, a notification gets posted and passes the memory address of the audio file instance, then the documents respond if their own audio file's location matches the one of the notification, and if it does, compute the timestamp -- I'm definitely not keeping this code around, but it works lol
[09:22:32] <gilberth> kakuhen: While you're here. Do you know whether I could with Cocoa use a random font file I happen to get hold of?
[09:27:06] <kakuhen> depends on the type of font
[09:27:59] <gilberth> Ok. Are there different ways, or must it be a specific format?
[09:29:24] <kakuhen> Well, there are different ways, but you want to make sure Core Text can recognize the font file type
[09:29:58] <kakuhen> check out this info.plist key https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/GeneralPurposeKeys.html#//apple_ref/doc/uid/TP40009253-SW8
[09:29:59] -ixelp- macOS Keys
[09:30:07] <gilberth> Sure, that is sth I could live with. I just found nothing while staring at the docs.
[09:30:17] <kakuhen> and, assuming your font file is in the right formatting and everything
[09:30:27] <kakuhen> you should be fine with an [NSFont fontWithName:@"yourfont"]
[09:31:17] <kakuhen> oh also make sure you add the font file in the xcode build phase "Copy Resources" or whatever
[09:31:29] <gilberth> This is talking about a bundle, right? Nah, I want to do it at run time.
[09:31:38] <kakuhen> then you have to manually register the font yourself.
[09:32:06] <gilberth> Where? I don't want to touch the system wide registry.
[09:33:05] <kakuhen> It shouldn't mess with your font registry
[09:33:19] <kakuhen> But this is going to be pretty tough to do unfortunately. A quick search online is giving me examples involving Carbon!
[09:33:40] <kakuhen> So bye bye 64-bit builds and support past OS X v10.14, assuming you use the Font Manager stuff people online suggest.
[09:34:22] <gilberth> But you say, it's possible, in principle?
[09:35:30] <gilberth> And I just have to dig harder. As I found no obvious way, I was wondering if that is possible at all.
[09:38:19] <kakuhen> yeah you should be able to do it
[09:38:29] <kakuhen> I just don't know how, and I won't be surprised if it involves use of undocumented functions
[09:38:56] <gilberth> Good. I'll find a way then.
[09:39:12] <gilberth> Thanks!
[09:39:15] <kakuhen> np
[09:41:00] <hayley> gilberth: The microcode perhaps, but you could compile macrocode traces.
[09:41:17] <gilberth> .oO(When a font could be pulled from a bundle, I could to it too)
[09:43:00] <gilberth> hayley: The CADR, no surprise here, suffers from RMSiness putting a lot of routines which otherwise could have been written in Lisp into the microcode.
[09:44:15] <gilberth> It's a rather elaborated microcode, looking more like what we would call a strange instruction set.
[09:45:28] <hayley> https://plover.com/~mjd/misc/hbaker-archive/Micro-SPL.txt High level programs run ten times faster in microcode.
[09:45:37] <gilberth> And I am not after speed here, not with the CADR, which is not particular useful.
[09:48:14] <gilberth> hayley: Sad.
[09:48:54] <gilberth> Heh, and the CADR like elisp has no characters.
[09:49:14] <hayley> "We think that this compiler re-emphasizes what has always been true; that a computer is just a pile of copper and sand without proper software to support it."
[09:50:58] <gilberth> You still could use a computer as a heater.
[09:51:27] <hayley> Yes, it happened in class. "My frame rate is shit now; I have shaders on because my feet got cold."
[09:51:45] <gilberth> Heh.
[09:51:47] * hayley is usually barefoot.
[09:52:43] <kakuhen> are you the type to wear ankle scarves in the winter
[09:53:14] <hayley> Nope.
[09:53:44] * hayley has had foot pains for nearly 10 years now.
[09:56:08] <hayley> One cool thing heisig did in the-cost-of-nothing is that you can issue (the-cost-of-nothing:funcall-cost :mandatory-arguments 3) and it'll tell you how long it takes to call a 3-argument function.
[09:56:51] <gilberth> Anyhow, what have as RISC instructions now is more like the mircrocode of ancient machines. It never was about speed with those, but about RAM size.
[09:58:02] <hayley> 2.3ns, or about 6.5\tau. So if I issue a function call per character, I suspect I'd "only" lose 3/4 of the throughput.
[09:58:04] <gilberth> And thus costs.
[10:01:04] <gilberth> On that note I find it extremly silly that Emacs still does so much in C because that toy Lisp is so slow.
[10:01:49] <gilberth> Ironically the shear volume of all the C makes it very expensive to port Emacs to CL.
[10:03:27] <gilberth> This might have been the right thing to do an Emacs 30 years ago, but it isn't anymore.
[10:05:22] <gilberth> OTOH this saves us from bad CL code.
[10:09:00] <gilberth> Anyhow, I still would bet that with tech from the time of the CADR a RISC approach would have been faster.
[10:09:15] <hayley> You read Smalltalk on a RISC?
[10:09:35] <gilberth> No.
[10:12:58] <gilberth> The interesting thing also is that RISC machines need fewer transistors. So some of the money safed could have been used for yet more RAM.
[10:18:24] <gilberth> But would need to experiment with that. But given as many registers as your largest stack frame and a three address architecture, you do in one instruction as much as you do in three or four with a stack based approach.
[10:21:46] <gilberth> And when you allow for that many registers the argument that a compiler for a stack machine is trivial compared to one for a register machine becomes mood.
[10:32:16] * hayley writes a RE to better match emails (still wrong but less wrong) and it takes 11.3ms to compile.
[10:32:49] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:33:38] <hayley> «¬( |@)+»@«¬( |@)+» The joys of o-m-r-n syntax.
[10:33:53] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[10:33:54] <dave0> maw
[10:34:27] <contrapunctus> "o-m-r-n syntax"?
[10:34:44] <hayley> one-more-re-nightmare syntax. https://github.com/telekons/one-more-re-nightmare#language
[10:34:45] -ixelp- GitHub - telekons/one-more-re-nightmare: A fast-ish regular expression compiler in Common Lisp
[10:34:55] <contrapunctus> Ah
[10:37:01] * edgar-rft  prefers %$&#§$!!! syntax :-)
[10:56:34] *** Joins: shka (~herr@109.231.62.239)
[11:05:39] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[11:07:57] * hayley finds a bug. 
[11:09:41] <hayley> (all-string-matches "aa*" "a") diverges and (all-string-matches "a¬b*" "a") produces invalid bounds.
[12:04:55] *** Joins: selwyn (~selwyn@user/selwyn)
[12:07:41] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[12:08:05] *** Joins: selwyn (~selwyn@user/selwyn)
[12:11:24] <hayley> Well, normalizing EITHER didn't help with compile times, and it hurt my head to figure if bad bounds checking or normalization broke things.
[12:39:53] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[13:04:55] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:08:25] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[13:45:40] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Quit: WeeChat 3.1)
[13:45:56] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[14:03:03] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:17:46] <Gnuxie> gilberth: What do you think of Scheme's define?
[14:24:58] <Gnuxie> he must be asleep
[15:11:24] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[15:22:38] <edgar-rft> gilberth can't think while sleeping?
[16:52:10] <hayley> So, maybe the user facing COMPILE-REGULAR-EXPRESSION should return an object with a result buffer and function somehow. Then I could avoid looking up the function in the hash table (and locking)  in a loop.
[17:30:39] <gilberth> Good morning #lispcafe!
[17:31:26] <gilberth> edgar-rft: I can and do think while asleep, I just cannot see what Gnuxie writes while sleeping.
[17:35:12] <gilberth> Gnuxie: Syntax-wise? In fact, IMO DEFINE is the only thing that Scheme does better than CL. I like the idea that it says: (define <whatever> ..) and meaning to define whatever <whatever> evaluates to. E.g. for SETF it would be nice to be able to say e.g. (define (setf (foo a) (values nx ny)) ...)
[17:49:33] <Gnuxie> Hmm oki
[17:58:34] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[17:59:05] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[18:08:35] *** Joins: treflip (~user@95.79.32.99)
[18:08:42] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[18:08:45] <dave0> nite all
[18:08:52] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:09:14] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[18:09:33] *** Quits: X-Scale (~ARM@83.223.233.176) (Ping timeout: 265 seconds)
[18:10:13] *** X-Scale` is now known as X-Scale
[18:41:43] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[18:42:14] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:25:23] <selwyn> https://www.youtube.com/watch?v=JurplDfPi3U
[19:25:23] -ixelp- Former fusion scientist on why we won't have fusion p
[19:26:45] <gilberth> tl;dw?
[19:26:55] <selwyn> um
[19:26:59] <selwyn> am still watching
[19:27:50] <gilberth> ok. I am eager to see first [predicted] results for our poll today, anyhow.
[19:29:01] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[19:29:40] <selwyn> in order to break even, you need to take into account inherent inefficiencies in generating electricity, which means you have to generate even more than you use
[19:31:00] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:31:08] <pl> selwyn: that's why prototype ratios are for 100:1 or more 
[19:31:20] <pl> To start making power commercially, iirc 
[19:32:24] <selwyn> video claims that the fusion startups are deliberately obfuscating this issue
[19:33:31] <gilberth> Hmm? So we don't have it because you need more energy to keep the fusion up than the fusion generates?
[19:35:16] <selwyn> that is one of the reasons yes?
[19:35:46] <gilberth> ok. But that isn't news.
[19:38:12] <selwyn> what are your poll predictions
[19:39:24] <gilberth> Strange. CDU (conversative) 25%, SPD (social-democratic) 25%, Green party 15%, FDP (liberal) 11%, AfD (right-wing) 11%, and Linke (left-wing) 6%
[19:41:08] <gilberth> Completely open who gets chancellor and what would be the government. But it seems like it won't work without the Green party.
[19:42:15] <gilberth> The surprising result is that of the CDU as previous predictions saw it at a way lower result.
[19:43:42] <gilberth> The current government is CDU and SPD, which nobody wants to see again, although the now current prediction say it would be suffice. We'll see.
[19:44:18] <semz> watch it be another four years of CDU/SPD
[19:44:21] <selwyn> must be nice to have a new government
[19:44:27] <semz> this is the government that never ends
[19:44:31] <gilberth> It might still happen that the "Linke" won't make it, as we have a 5% barrier.
[19:45:13] <gilberth> selwyn: Actually, I am not looking forward for a new government.
[19:45:37] <gilberth> semz: Unlikely, but who knows.
[19:46:59] <gilberth> I have mixed feelings. Personally I am delighted that the liberals (FDP) have a pretty good result, while I really cannot stand the Green party.
[19:52:46] <edgar-rft> gilberth: herewith I predict that there will be a result 
[19:53:54] <edgar-rft> I apoligize for interrupting your READ-EVAL-SLEEP loop.
[19:54:15] <gilberth> The fun part is that the CDU candidate was too stupid to vote, as he revealed his vote while voting, which is forbidden.
[19:54:41] <edgar-rft> oh, I already missed the most funny part?
[19:55:37] <gilberth> edgar-rft: In Berlin there were a shortage of ballot forms, so that people needed to wait for hours to vote.
[19:55:46] <edgar-rft> I read something that making selfies with your filled-out vote paper invalidates the vote.
[19:56:17] <gilberth> That's no news as Berlin isn't a city, but only a provisional.
[19:57:05] <gilberth> edgar-rft: Yes, it does. This is the fun part. A future want-to-be chancellor, who does the break the voting law.
[19:57:38] <gilberth> s/the//
[19:57:58] <edgar-rft> Did you know that Bonn was choosen after WW2 as the provisional capital because it was Adenauer's favourite vacation resort?
[19:58:32] <gilberth> No. So he was on vacation all the time?
[19:58:53] <gilberth> And who want to take vacation in Bonn?
[20:00:27] <edgar-rft> Konrad Adenauer obviously. He was from the CDU so he might have had a somewhat confused mental state :-)
[20:00:35] <gilberth> Curious, no updated predictions yet. Hmm.
[20:01:00] <gilberth> edgar-rft: Perhaps, comes with age.
[20:02:18] <edgar-rft> I don't care about the predictions, Im curious about the first results, but that still needs a few hours.
[20:04:33] <gilberth> The todays CDU really wants more internet and camera surveillance to fight child abuse. Terrorism seems to be out of fashion. This is why I believe the CDU is an unconstitutional party actually. I mean, proposing laws all the time that are unconstitutional and will be ruled against by the high court? If that isn't that unconstitutional, what is?
[20:05:32] <gilberth> edgar-rft: Yes. Let's wait and see, final results may still look different. I wonder if Merkel will still be chancellor by new years eve.
[20:06:34] * gilberth continues on hacking the CADR simulator.
[20:07:16] <edgar-rft> It's the job of politicians to break the law if I'm not totally wrong.
[20:12:27] <selwyn> apparently australian prime ministers often choose to not live in their capital city
[20:13:47] <selwyn> perhaps they should just move the capital city around to solve the problem
[20:13:53] <edgar-rft> I've heard aussies have a queen who doen't even live in the county :-)
[20:14:10] <edgar-rft> *country of course
[20:14:44] <selwyn> royal county of australia
[20:15:18] <edgar-rft> I nthe middle ages the capital castle was where the king was just at the moment (no joke).
[20:15:25] <selwyn> oh
[20:16:07] <gilberth> The CADR simulator's console is fubar. When the [host] window is selected, it slows down. But it is constantly polling the mouse pointer position and modifier states instead of just listening to events.
[20:16:44] <edgar-rft> selwyn: and because it was expensive to feed the king and his people the favourite activity was to get rid of the king as soon as possible
[20:16:54] <gilberth> Yes, before the telegraph, kings where practically homeless and travelled from castle to castle all the time.
[20:18:33] <gilberth> And the kings of the Holy Roman Empire were elected.
[20:19:07] <gilberth> But this was more a defense union than a nation. An early EU ;)
[20:25:57] <gilberth> The CADR itself is writing one word in the frame buffer below the wholine really often and all the time. Seems to be some busy/idle/interrupt indicator "light", sort of. The former code sent the changes to the display server with 60ms latency right away. No wonder the simulator felt slow.
[20:28:00] <gilberth> The interesting question about the vote tonight is whether the "Linke" will make it into the parliament.
[20:31:37] <pjb> New Laser Zaps Mosquitoes in SlowMotion (2010) <https://www.youtube.com/watch?v=BKm8FolQ7jw>
[20:31:37] -ixelp- New Laser Zaps Mosquitoes in SlowMotion | National Geograp
[20:31:57] <pjb> Note: in 2021 we still don't have that!  In Summer it would be quite useful…
[20:38:15] <gilberth> Mosquitoes don't like me and thus I am never bitten.
[20:40:06] <shka> https://markets.businessinsider.com/news/currencies/hamster-trading-cryptocurrencies-rigged-cage-goxx-bitcoin-price-ether-doge-2021-9
[20:40:06] -ixelp- A hamster has been trading cryptocurrencies in a cage rigged to automatically buy and sell tokens since June - and it's  [...]
[20:40:35] <shka> witness the wonder of the XXI century 
[20:40:40] <shka> cyberunk now
[20:42:53] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:48:19] *** Joins: Jacobis9000 (~josephash@host86-144-136-140.range86-144.btcentralplus.com)
[20:52:58] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:21f8:1bca:b298:4ac4)
[20:58:09] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:21f8:1bca:b298:4ac4) (Remote host closed the connection)
[21:20:22] <selwyn> local petrol station has run out of petrol (not diesel)
[21:20:38] <amirouche>  /o\
[21:20:56] <pjb> selwyn: where?
[21:20:57] <selwyn> but they have not put any signs up, so there is a queue of cars driving onto the station forecourt only to find out that they can´t get any, and immediately leaving
[21:21:10] <selwyn> pjb: south london
[21:21:39] <pjb> Where does England get its petrol from? Saudi Arabia?
[21:21:45] <selwyn> idk
[21:21:52] <pjb> You should do like France, get it from Qatar. ;-)
[21:21:55] <Jacobis9000> I find LISP is hard to get into
[21:22:14] <amirouche> LISP IS GREAT
[21:22:16] * amirouche hides
[21:22:20] <pjb> I'm sure you could get Qatar to switch of customer…
[21:22:21] * amirouche hides himself.
[21:22:30] <Jacobis9000> I am not saying it is bad
[21:22:33] <mfiano> Well LISP is ancient. Try Common Lisp.
[21:22:38] <pjb> Jacobis9000: what is hard?
[21:22:55] <Jacobis9000> but I just typed code from Land of Lisp in the emacs slime REPL, and it went berzerk
[21:23:03] <selwyn> issue is not supplier side but with (supposedly) distribution locally/panic buying
[21:23:13] <Jacobis9000> I had to quit out of emacs because I didn't know what to do
[21:23:19] <selwyn> which code?
[21:23:29] <pjb> Jacobis9000: there may be some small discrepancies.  Land of Lisp is not necessarily of the highest lisp quality.
[21:23:34] <Jacobis9000> defparameter (*small* 1)
[21:23:46] <Jacobis9000> ah that is what I did wrong
[21:24:10] <pjb> Jacobis9000: in general, books may use implementation idiosyncraties.  You have to learn about them and correct them.
[21:24:17] <Jacobis9000> no I typed (deparamater *small* 1)
[21:24:34] <pjb> Jacobis9000: in lisp, forms are lists; the operator is the first element INSIDE the list: (defparameter *small* 1)
[21:24:40] <mfiano> deparameter is not a valid operator in the COMMON-LISP package
[21:24:51] <pjb> and spelling matters. it's not deparamater but defparameter
[21:24:51] <selwyn> i suspect the code samples themselves are fine
[21:24:58] <selwyn> (defparameter *small* 1)
[21:25:07] <pjb> Jacobis9000: note that in InterLisp, there was a DWIM module that would autocorrect spelling errors.
[21:25:16] <Jacobis9000> no I typed defparameter
[21:25:31] <mfiano> Then you are likely in a package that doesn't :USE COMMON-LISP
[21:26:05] <pjb> Jacobis9000: what is your prompt in the slime REPL?
[21:26:10] <Jacobis9000> CL-USER
[21:26:13] <Jacobis9000> it's common lisp
[21:26:19] <mfiano> THis berzerkness you speak of is one of the main benefits of Common Lisp. The interactive debugger. I suggest reading a good book, like PCL
[21:26:21] <Jacobis9000> I'll just used defvar
[21:26:23] <pjb> Then the current package is COMMON-LISP-USER ; this is correct.
[21:26:36] <mfiano> DEFVAR has different semantics!
[21:26:43] <selwyn> try again in a fresh emacs session
[21:27:00] <pjb> Jacobis9000: https://termbin.com/no35
[21:27:02] <Jacobis9000> yeah it doesn't like defparameter, it says it's unbound
[21:27:18] <selwyn> it has to be inside the brackets
[21:27:33] <Jacobis9000> yep it is all correct, it was what I typed here that was incorrect
[21:27:51] <Jacobis9000> ah I see
[21:27:58] <pjb> image paste a screen shot.
[21:27:59] <Jacobis9000> I pressed return inside the brackets
[21:28:10] <pjb> you can do that.
[21:28:20] <Jacobis9000> well it's working now
[21:28:53] <Jacobis9000> ok thanks guys
[21:28:57] <selwyn> any time
[21:28:59] <Jacobis9000> must have been doing something wrong
[21:29:03] <selwyn> enjoy exploring lisp!
[21:29:12] <Jacobis9000> but I don't know what I double and triple checked it was input correctly
[21:29:28] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:29:30] <selwyn> emacs can take some time getting used to
[21:29:44] <selwyn> but it is hard to say what went wrong, unless you are willing to share a screenshot
[21:30:05] <Jacobis9000> I don't have the error now, as I restarted emacs
[21:30:33] <selwyn> oh ok
[21:31:06] <pjb> https://pasteboard.co/aIZ5ll4icm4k.png
[21:31:07] -ixelp- Pasteboard - Uploaded Image
[21:31:36] <shka> anybody using the atom/other main stream editor with lisp?
[21:31:54] <shka> i know that there was slime for atom (or something like that)
[21:31:59] <Jacobis9000> ah how do I enter multiple lines of code in the REPL?
[21:32:17] <pjb> type RET
[21:32:21] <selwyn> shka: no, but i know someone (not a lisp user) who switched from atom to emacs and never looked back
[21:32:24] <selwyn> which surprised me a lot
[21:32:43] <shka> it doesn't surprise me
[21:32:46] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[21:32:54] <shka> i mean, editors
[21:32:59] <selwyn> shka: i think michael raskin uses vim?
[21:33:05] <Jacobis9000> return submits the line of code, I want to enter multiple lines of code, as per the book
[21:33:15] <shka> as far as editor go, emacs is really good
[21:33:21] <selwyn> well, yes
[21:33:35] <selwyn> but one of the reasons this guy doesn´t like lisp is because it is old and lispy
[21:33:41] <selwyn> but emacs is old and lispy
[21:33:48] <shka> for IDEs, situation becomes more complicated
[21:33:59] <shka> anyway, i would rather keep using emacs over atom
[21:34:01] <shka> or 
[21:34:06] <shka> VS code
[21:34:09] <shka> that shit
[21:34:40] <selwyn> my memory of java ides is that they would probably stand up very well against emacs
[21:35:21] <shka> yeah, but those are IDEs
[21:35:27] <shka> not just editors
[21:35:47] <shka> but i don't even like IDEs
[21:37:05] <Jacobis9000> so how do you define a function, if you can't enter multiple lines of code? All on one line?
[21:37:17] <selwyn> you can enter multiple lines
[21:37:19] <shka> Jacobis9000: you can 
[21:38:13] <shka> Jacobis9000: so there is a little bit of issue for new programmers because some of the lisp forms introduce implicit progn and some not
[21:38:15] <Jacobis9000> how though? I am reading the slime user manual but I cannot find the relevant information
[21:38:25] <shka> but it all makes sense in the long run
[21:38:37] <shka> Jacobis9000: try that
[21:38:52] <shka> (defun hello-world () 
[21:38:55] <shka> press enter
[21:39:01] <shka> (print "hello")
[21:39:04] <shka> press enter
[21:39:09] <shka> (print "world")
[21:39:09] <selwyn> but if paredit is on
[21:39:14] <shka> press enter
[21:39:18] <shka> )
[21:40:11] <Jacobis9000> it won't let me type only the parentheses I want, it has inserted some which I cannot delete
[21:40:18] <shka> riiight
[21:40:28] <shka> but it is not slime doing it
[21:40:37] <shka> it is paredit/smartparens
[21:40:56] <shka> Jacobis9000: i advice you to disable those, better get used to lisp first
[21:41:10] <Jacobis9000> I would rather it disabled yes
[21:41:19] <Jacobis9000> how do you do that?
[21:41:36] <shka> and there are at least 4 different approaches for managing parenthesis in emacs alone
[21:41:57] <shka> selwyn: will you help Jacobis9000?
[21:42:39] <selwyn> am happy to give advice but i don´t actually know how to turn off paredit, i always have it on
[21:43:20] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[21:43:24] <selwyn> uh
[21:43:30] <shka> well, maybe simply uninstall the fucker?
[21:43:34] <selwyn> jacobis9000: are you using portacle?
[21:43:40] <semz> M-x paredit-mode (probably, i haven't disabled it in years)
[21:43:41] <gilberth> I wonder how it got turned on in the first place, because I don't have nor use it. And sorry, I have no idea how to get rid of it.
[21:43:54] <selwyn> M-x disable-paredit-mode
[21:44:39] <selwyn> are you familiar with what M-x means?
[21:44:51] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[21:44:53] <Jacobis9000> yep
[21:44:54] <gilberth> [I fear there would be some mode-hook for Jacobis9000 which would turn in on with the next session / lisp buffer.]
[21:45:07] <shka> gilberth: very likely
[21:45:16] <selwyn> yes, well that will only disable it this session
[21:46:00] <selwyn> but good enough for now
[21:46:08] <mfiano> How do you even know he doesn't have the superior smartparens active?
[21:46:28] <shka> selwyn: have you seen the recent CS patch?
[21:46:40] <selwyn> no
[21:47:20] <selwyn> mfiano: i am guessing that portacle is being used
[21:47:55] <Jacobis9000> ok cool thanks, I'm using emacs and slime and SBCL via the DIY setup, and the above command has disabled paredit for now
[21:47:55] <selwyn> https://www.youtube.com/watch?v=np2QptmbvxQ this thing?
[21:47:56] -ixelp- CS:GO Operation Riptide - BIG GAMEPLAY UPDATES! - YouTube
[21:48:27] <selwyn> jacobis9000: great, you should get the desired behaviour now
[21:49:14] <selwyn> a lot of the time, we like to edit definitions of functions in their own files/buffers and then evaluate them at the repl using slime commands
[21:49:19] <selwyn> so you don´t have to do everything at the repl
[21:52:18] <selwyn> m4 silencer buff
[21:52:24] <selwyn> well its one of my favourite weapons
[21:52:59] <selwyn> damn i should play again, exciting new maps
[21:53:08] <Jacobis9000> the error is happening again: https://pasteboard.co/FKr9MNmQHPan.png
[21:53:09] -ixelp- defparamter error - Image on Pasteboard
[21:53:10] <shka> my personal solution to the SLIME shortcuts https://i.imgur.com/8vgpnLM.jpg
[21:53:22] <Jacobis9000> oh I'm spelling it wrong
[21:53:24] <Jacobis9000> I see
[21:53:48] <shka> Jacobis9000: you can use cl:defparameter instead of defparameter to avoid such errors
[21:53:54] <selwyn> return to space cadet keyboard
[21:54:31] <shka> haha, no
[21:54:37] <shka> but my setup is crazy now
[21:54:40] <selwyn> grumble
[21:54:44] <shka> let me make a photo
[21:54:45] <selwyn> dust 2 t side nerf
[21:56:35] <Jacobis9000> ok it's all working, cheers for your help guys!
[21:56:56] <selwyn> any time
[21:56:59] <Jacobis9000> I was reading Common Lisp A Gentle Intro and Land of Lisp but I just wanted to get started entering some code
[21:57:16] <shka> selwyn: https://i.imgur.com/5rRBcf5.jpg :P
[21:57:17] <Jacobis9000> I am also watching the MIT lectures on scheme
[21:57:26] <shka> full hipster mode 
[21:57:30] <selwyn> you may reassess your view of paredit one day, so i would not recommend uninstalling it outright
[21:57:45] <selwyn> nice
[21:57:53] <pjb> Jacobis9000: if you have problem typing stuff, you can use + ++ +++ * ** *** and edit the expressions with lisp: https://termbin.com/zrvo
[21:58:03] <shka> paredit is a little bit confusing until you grew accustomed to sexps
[21:58:04] <selwyn> i actually noticed some hand pain today :/ but that did not come from hours of coding
[21:59:42] <selwyn> i do hundreds of flash card reviews a day, which involve left hand fingers resting on the number row and left thumb on the space bar
[21:59:47] <selwyn> very straining position
[22:00:26] <Jacobis9000> that's a bit advanced for me pjb
[22:00:38] *** Parts: mfiano (~mfiano@li1282-157.members.linode.com) (WeeChat 3.2)
[22:01:33] <pjb> *  returns the previous primary value ;   /  returns the previous list of valuels
[22:01:55] <pjb> ** and ***,  and / and /// the n-2 and n-3
[22:02:08] <pjb> + return the previous expression, ++ and +++ the n-2 and n-3
[22:02:26] <pjb> - returns the current expression; try: (print -)
[22:02:31] <pjb> (it's a repl quine).
[22:03:06] <pjb> So if you type something in a REPL in a terminal and there's an error, you can call an editor on + to correct it.
[22:03:22] <pjb> Of course, with slime you can just M-p and edit with emacs.
[22:03:54] <pjb> But as you've noticed, in the repl it's preferable to disable paredit.
[22:03:57] <selwyn> didn´t someone make a quine generator at els?
[22:04:47] <pjb> So you may want to use (cl:ed `',+)  to edit the previous form in an emacs .lisp buffer, with all the amenities, including paredit.
[22:05:10] <pjb> Of course, for this you need to have configured your implementation to defer to emacsclient.
[22:05:28] <shka> selwyn: you could technically use duckypad to program yourself small keyboard for cards
[22:05:49] <selwyn> some recommend a controller but i don´t have one unfortunately
[22:06:21] <shka> it has up to 32 layers so for instance if i would go to do some work with inkscape i would make inkscape layer
[22:06:22] * selwyn remembers he has vr controllers
[22:08:18] <shka> if you have some money to waste https://www.tindie.com/products/dekuNukem/duckypad-do-it-all-mechanical-macropad/
[22:08:20] -ixelp- duckyPad: Do-It-All Mechanical Macropad from dekuNukem on Tindie
[22:09:11] <shka> don't grab the switches, order your own
[22:09:20] <shka> gatreon greens suuuuuuuuuuuck :(
[22:10:13] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[22:10:53] <shka> embrace the clickbar https://www.aliexpress.com/item/32879369291.html?spm=a2g0s.9042311.0.0.3b0f4c4dP3ZJQR
[22:10:53] -ixelp- Novelkey Kailh Box Switch Cream Navy Jade Crystal Royal White Red Brown Black Pink RGB SMD Switch For Mechanical keyboar [...]
[22:11:15] <selwyn> meh
[22:11:24] <selwyn> will probably reconfigure the input keys
[22:11:47] <shka> well, that is probably a better solution
[22:11:50] <selwyn> clickbar? isn´t it just a switch?
[22:12:11] <shka> it uses different style of clicker from the MX design
[22:12:38] <shka> and that clicker is a clickbar
[22:12:47] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[22:13:03] <ck_> so the sound is an epiphenomenon
[22:13:21] <shka> https://www.youtube.com/watch?v=b1C50QV4xiM
[22:13:21] -ixelp- Teardown - New Kailh switches! - YouTube
[22:13:35] <shka> i really don't like the click jacket of the mx design
[22:13:40] <shka> it feels wrong
[22:15:46] <ck_> have you ever tried silent reds?
[22:15:53] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[22:16:53] <shka> no, i used only normal reds
[22:17:00] <shka> silence is not my thing 
[22:17:07] <shka> or linear switches actually 
[22:30:27] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:32:23] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[22:32:45] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[22:33:56] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[22:35:02] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[22:35:49] <pjb> Jacobis9000: for example, with ccl, you can put this in your ~/ccl-init.lisp https://termbin.com/c5e5
[22:36:37] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[22:36:42] <pjb> Jacobis9000: then (defparmeter *small* 42)  then (cl:ed `,+)  to edit it and replace small by big and 42 by 4242
[22:38:12] <selwyn> app needs an add-on to customise key bindings sigh
[22:52:04] <gilberth> Since when are network volumes seriously broken with macOS? I edit a fine on one host and the other host won't see the changes. Is that a feature?
[22:52:49] <gilberth> But I guess Apple doesn't care as phones have no network volumes mounted.
[22:52:59] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[22:53:39] <mfiano> shka: Yes, your way of thinking about layers last week helped me.
[22:53:52] <mfiano> (am just now getting back to working on design)
[22:54:16] <shka> happy to hlp
[22:54:18] <shka> *help
[22:54:23] <mfiano> I am stumped on something though.
[22:55:02] <mfiano> (unrelated)
[22:55:11] <shka> well, you can pour it out, but i will be able to answer tomorrow
[22:55:46] <mfiano> Decided to continue designing my renderer this weekend so I can get to working on some of my algorithms that need to be visualized/interactive and other math papers again soon. I'm doing some light maintenance coding today, and trying to choose a good name for something.
[22:56:20] <mfiano> Decided that my "modules" (separate packages for fairly isolated concepts like the clock, texture loading, etc), should be named something else besides "module", but I'm not sure what. This is because "module" sort of connotes being modular/independent, but some of them are not and depend on other modules.
[22:56:29] <mfiano> These "modules" are mixins with some light MOP trickery that does CHANGE-CLASS on the toplevel context object to be a class that contains a new superclass, perhaps with added slots, and is an additional progn-combination method in various generic protocols.
[22:56:52] <mfiano> Amazing how I can just crank out complex protocols and implementations for complex algorithms, but it's the naming things that always gets me stumped. Something about 3 hard things in CS :)
[22:57:43] <pjb> gilberth: when were network volumes working correct in macOS?
[22:58:07] <pjb> gilberth: on the other hand, Dropbox and similar work surprisingly well.
[22:58:22] <pjb> (I include iCloud drive, despite its problems).
[22:59:00] <shka> mfiano: my trick is to pick a word and boldly use it 
[22:59:26] <gilberth> pjb: I don't know. At the house that wants to kill me, I use NFS, which works just fine. Here I use the Apple protocol, what ever it is called.
[22:59:39] <shka> ok, got to go
[22:59:43] <shka> good night all
[22:59:54] <gilberth> take care!
[22:59:58] <mfiano> "module" for a piece that depends on other "modules" is sort of an oxymoron though.
[23:00:13] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 250 seconds)
[23:00:18] *** Joins: X-Scale` (~ARM@92.250.96.13)
[23:01:54] *** X-Scale` is now known as X-Scale
[23:02:21] <mfiano> "component" is better, but still sort of has the same problem.
[23:02:26] <mfiano> maybe "unit"?
[23:04:46] <selwyn> goodnight shka
[23:25:24] <shka> mfiano: well, if you wanna distinguish just modules having dependencies from those which don't you can use something like "fundamental module" or "primary module" as opposed to dependent/derived module
[23:26:42] <mfiano> shka: I suppose so. I'll let it simmer for a while. Thanks for your input.
[23:26:52] <mfiano> Also good night, unless you are mumbling in your sleep :)
[23:27:17] <shka> just shutting down machine
[23:27:59] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[23:28:25] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:34:52] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[23:35:19] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[23:37:12] <Jacobis9000> I am getting errors when I try (car ('one 'two 'three)) or (car 'one 'two 'three) it is saying illegal function call, but it is not clear what I am doing wrong
[23:37:33] <Jacobis9000> in another language I would have assigned the list to a variable first
[23:38:06] <selwyn> ' is not meant to be used like that
[23:38:26] <selwyn> try (car '(one two three))
[23:39:29] <Jacobis9000> ok thanks it's working now
[23:39:53] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[23:40:00] <Jacobis9000> can I assign a list to a variable?
[23:40:02] <selwyn> as an alternative, you could do (defparameter *list* '(one two three)) and then (car *list*)
[23:41:08] <selwyn> this establishes *list* as a dynamic variable, and assigns (one two three) to it, as we would say in lisp
[23:41:32] <Jacobis9000> I got there just before you :D
[23:41:34] <selwyn> variables in lisp are their own topic in themselves that require some care
[23:41:55] <selwyn> :)
[23:46:14] <Jacobis9000> so I have my *list* (one two three), now I try (cdr (car *list*)) which in my head returns three, but I get an error?
[23:47:19] <Jacobis9000> ONE is not of type list
[23:49:13] <selwyn> (car (cdr (cdr *list*)))
[23:50:09] <Jacobis9000> ah yeah
[23:50:12] <selwyn> there exist functions that mean you don´t have to write out long chains like that: (caddr *list*) == (car (cdr (cdr *list*)))
[23:50:33] <selwyn> or you can simply do (third *list*), which some prefer on stylistic grounds
[23:50:54] <Jacobis9000> yes I am trying to get my head around car and cdr and all the functions with names like caddr right now
[23:51:20] <selwyn> idea is that if you mean the third element, you should say that instead of constructing some combination of car and cdr yourself
[23:52:04] <Jacobis9000> I would prefer to just say third, trying to grasp nested car and cdr is difficult
[23:52:39] <selwyn> no-one will expect you to be able to reason about deep chains of them, i know i can´t
[23:52:48] <selwyn> it´s not the most important thing to learn imo
[23:53:43] <selwyn> it´s important to learn how linked lists work, and what a cons cell is, and at least be able to figure out how you could define e.g. fourth in terms of car and cdr
[23:57:24] <Jacobis9000> yeah I'm having trouble figuring out these functions
[23:57:48] <Jacobis9000> ((one two three) (four five six)) I thought caaddr should give three, but it gives NIL
[23:58:56] <Jacobis9000> ok wait
[23:59:01] <Jacobis9000> I am getting there
[23:59:53] <selwyn> try building them up incrementally
