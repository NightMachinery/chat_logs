[00:04:11] *** Quits: karlosz (~karlosz@47.151.152.149) (Quit: Client closed)
[00:12:46] *** Joins: ted_wroclaw (~ted_wrocl@2a02:a317:e143:7b00:609f:6362:3ce:dbd0)
[00:18:14] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:18:29] *** Quits: Psybur (~Psybur@2600:1003:b12f:917d:c456:4602:f034:984a) (Read error: Connection reset by peer)
[00:18:49] *** Joins: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net)
[00:27:53] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[00:30:16] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:31:17] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[00:36:19] *** Joins: Brucio-61 (~Brucio-70@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[00:36:43] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[00:37:23] *** Joins: Volt_ (~Volt_@c-73-161-53-6.hsd1.mi.comcast.net)
[00:44:36] *** Quits: ted_wroclaw (~ted_wrocl@2a02:a317:e143:7b00:609f:6362:3ce:dbd0) (Ping timeout: 240 seconds)
[00:45:37] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[00:46:32] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:47:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[00:49:19] *** Lord_of_Life_ is now known as Lord_of_Life
[00:56:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[01:02:59] *** Joins: dudek (~dudek@185.150.236.127)
[01:06:01] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:08:17] *** Joins: morganw (~user@80.225.24.132)
[01:13:43] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[01:16:51] *** Joins: jeko (~user@ool-457a8fe6.dyn.optonline.net)
[01:21:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[01:21:44] *** Quits: jeko (~user@ool-457a8fe6.dyn.optonline.net) (Remote host closed the connection)
[01:23:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:24:32] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 260 seconds)
[01:27:37] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Quit: triffid)
[01:27:41] *** Quits: artchad (~user@public-gprs225418.centertel.pl) (Read error: Connection reset by peer)
[01:28:48] *** Joins: jeko (~user@user/jeko)
[01:34:05] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[01:35:59] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 246 seconds)
[01:36:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:39:43] *** Quits: jeko (~user@user/jeko) (Ping timeout: 256 seconds)
[01:43:48] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[01:44:56] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[01:49:04] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:49:56] *** Joins: jeko (~user@user/jeko)
[01:58:32] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[02:04:43] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[02:05:15] *** Joins: dstein64- (~dstein64@dannyadam.com)
[02:05:45] *** Joins: karlosz (~karlosz@47.151.152.149)
[02:07:17] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 240 seconds)
[02:07:17] *** dstein64- is now known as dstein64
[02:09:23] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:16:07] *** Quits: karlosz (~karlosz@47.151.152.149) (Quit: karlosz)
[02:19:54] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:40:57] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 260 seconds)
[02:44:02] *** Joins: pillton (~user@220.240.224.251)
[02:45:19] *** Quits: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net) (Ping timeout: 260 seconds)
[02:45:38] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[02:54:02] *** Joins: jeko (~user@user/jeko)
[03:10:43] *** Quits: occ (~occ@user/occ) (Ping timeout: 260 seconds)
[03:13:32] *** Quits: dudek (~dudek@185.150.236.127) (Quit: Leaving)
[03:14:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[03:21:54] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[03:22:16] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Remote host closed the connection)
[03:22:44] *** Quits: jeko (~user@user/jeko) (Ping timeout: 246 seconds)
[03:26:54] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[03:27:12] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:31:43] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 260 seconds)
[03:45:55] <hayley> Does anyone use, say, more than 1024 return values?
[03:47:35] <pjb> hayley: you never know what may happen, but it wouldn't make sense to have more than call-arguments-limit return values.
[03:47:54] <pjb> note: it may be big, eg. #+ccl 65536
[03:48:08] <hayley> Interesting. I don't know what call-argument-limit will be on SICL. But SBCL is quite bold with those limits.
[03:48:09] <mfiano> No multiple-values-limit
[03:48:13] <mfiano> Which iirc is 20
[03:48:19] <mfiano> (at least)
[03:48:36] <mfiano> Using less than that is implementation-dependent
[03:48:38] <hayley> Right. Can anyone imagine using more than 1024?
[03:48:44] <pjb> 50
[03:48:51] <pjb> hayley: I can.
[03:49:12] <hayley> Another data point is that the Glorious Glasgow Haskell Compilation System only allows 62 elements in a tuple, which can be used like multiple values.
[03:49:25] <hayley> pjb: Would you really use more than 1024?
[03:49:43] <pjb> hayley: those cases occur often in generated code.
[03:50:20] <hayley> How often is "often"?
[03:50:39] <pjb> more often in generated code than in code written by hand.
[03:50:58] <pjb> Can you write even more than 20 return values by hand? You'll start writting macros long before that!
[03:51:03] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[03:51:07] <hayley> Sure.
[03:52:28] <pjb> hayley: but again, why do you ask? If you're writting an implementation, you just set cal-argument-limit to the value you want, as low as you wish (but no lower than 50), and that's it.
[03:52:42] <hayley> Because I want to know what a good value would be.
[03:52:50] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 246 seconds)
[03:53:13] <pjb> hayley: also, you have at your disposal a big body of code, in quicklisp, so you can easy grep or progress the source sexps to do statistics.
[03:53:19] <hayley> I could set the value to 50, but it might hinder use. I believe McCLIM uses more than 50 arguments, due to all the default initargs.
[03:53:21] <pjb> 50 is a good value!
[03:54:00] *** Joins: aeth (~aeth@user/aeth)
[03:54:06] <pjb> Honestly, if it wasn't such a high value, we could expect a smaller limit, adjusted to the number of registers…  50 is optimistic in this respect.
[03:54:36] <hayley> And my current idea is to set aside a few pages for extra return values. The least I can set aside (well, I can use fractions of a page, to be fair) would be 1 page * 4096 bytes/page / 8 bytes/word = 512 values.
[03:55:05] <pjb> So, once you go over the number of registers, you may reserve a page for that, and hence, 1024 or 512 can be good values.  Or you can do it purely dynamically, and then have a call-argument-limit = most-positive-fixnum as in sbcl.
[03:55:49] <pjb> hayley: note that: (values (values 1 2 3) (values 4 5 6) (f) …) so a single page may not be enough: you need a stack of them.
[03:57:37] <hayley> VALUES only consumes the primary values of each argument, since it is a normal function.
[03:58:05] <pjb> yes, but think about: (values … (500 values) (foo) …)
[03:58:13] <hayley> Another option would be to heap allocate and store additional return values in a simple vector, but that adds indirection.
[03:58:25] <pjb> what if foo calls functions using values and use them?
[03:58:26] <saturn2> mapping pages that never get used should be very cheap on a 64 bit machine
[03:58:57] <hayley> What about it? The multiple values are only materialised after FOO returns.
[03:59:15] <pjb> You need a stack of multiple value registers.
[03:59:30] <hayley> saturn2: Yes, it should. But I'd still like to make a fair few threads, and I could run out of virtual memory.
[04:02:26] *** Joins: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df)
[04:02:50] <hayley> I'm pretty sure only one set of multiple values is produced and consumed at a time, still. VALUES is only called after FOO returns, so no need for multiple sets of multiple values.
[04:04:37] <hayley> n.b. Cleavir has SAVE-VALUES and RESTORE-VALUES, but they will stash the multiple values elsewhere. Which, I guess, is like a stack of multiple values, but not really.
[04:12:14] *** Joins: occ (~occ@user/occ)
[04:19:36] <pjb> hayley: Again: (values ((lambda () (values 1 2 3))) ((lambda () (multiple-value-bind (a b c) (values 4 5 6) (+ a b c))))  (values  7 8 9))
[04:19:57] <pjb> hayley: stashing 1024 values can be costly…
[04:20:28] <hayley> You have a count too, no? You'd only stash 1024 if there were 1024 to stash.
[04:20:44] <pjb> hayley: depends on how you implement them.
[04:22:59] <hayley> The only hard one here is desugaring MULTIPLE-VALUE-BIND to MULTIPLE-VALUE-CALL. Yet I can still show that none of the lifetimes of the multiple value buffers will overlap.
[04:45:02] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[04:45:22] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[04:47:55] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[04:48:32] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[04:49:26] *** Joins: igemnace (~ian@user/igemnace)
[04:50:14] <Nilby> Is there some reason that loop doesn't do full destructuring, e.g. &rest, aside from historical compatibility?
[04:57:44] *** Quits: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:02:38] *** Joins: zacque (~zacque@1.32.90.32)
[05:08:25] *** Joins: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df)
[05:17:56] *** Joins: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[05:34:00] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[05:34:57] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:38:55] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[06:07:25] *** Joins: s-liao (~s-liao@101.86.164.158)
[06:17:38] *** Joins: Inline__ (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de)
[06:20:27] *** Quits: Inline (~Inline@p200300cd473cee00b1553510cacfa527.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:33:03] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[06:34:53] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 246 seconds)
[06:36:48] *** Joins: aeth (~aeth@user/aeth)
[06:43:05] <unixlisp> hayley: (array-performance:run-benchmark 100) for float sequenced iteration, the performance of adjustable vector is worst.  ref: https://github.com/svetlyak40wt/array-performance
[06:44:21] <hayley> Thanks, I guess.
[06:44:55] <unixlisp> we really need many benchmark.
[06:47:43] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[07:27:53] *** Joins: yosef` (~yosef`@45.32.73.39)
[07:30:14] <beach> Good morning everyone!
[07:39:14] *** Parts: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) ()
[07:44:17] *** Joins: asarch (~asarch@2806:10ae:7:23bc:8bd1:89cf:5203:5f1b)
[07:44:22] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[07:46:11] *** Joins: semz_ (~semz@user/semz)
[07:48:46] *** Quits: semz (~semz@user/semz) (Ping timeout: 260 seconds)
[07:55:39] *** Joins: s-liao (~s-liao@101.86.164.158)
[07:55:45] *** Quits: asarch (~asarch@2806:10ae:7:23bc:8bd1:89cf:5203:5f1b) (Quit: Leaving)
[08:02:39] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[08:03:18] *** Quits: yosef` (~yosef`@45.32.73.39) (Quit: yosef`)
[08:05:54] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[08:08:04] *** Joins: yosef` (~user@223.73.113.250)
[08:12:42] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[08:13:50] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 272 seconds)
[08:20:01] *** Quits: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:21:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:33:37] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Ping timeout (120 seconds))
[08:37:51] *** Quits: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:37:51] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:37:58] *** Quits: yosef` (~user@223.73.113.250) (Quit: ERC (IRC client for Emacs 28.0.50))
[08:39:24] *** Joins: s-liao (~s-liao@101.86.164.158)
[08:39:31] *** Joins: yosef` (~user@223.73.113.250)
[08:52:42] *** Quits: jgart (16dd2205e4@irc.cheogram.com) (Ping timeout: 260 seconds)
[08:53:39] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[09:06:06] *** semz_ is now known as semz
[09:11:02] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[09:19:39] *** Quits: Inline__ (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:54:54] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[09:55:49] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:56:26] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[10:00:03] *** Joins: spiaggia (~user@2a01:cb19:150:3400:7d1a:c251:efeb:785c)
[10:01:30] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[10:02:26] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[10:07:32] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[10:30:50] *** Joins: nubi (~user@187.84-234-202.customer.lyse.net)
[10:38:14] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[10:38:38] *** Quits: frgo (~frgo@p548a3b78.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[10:39:20] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:40:01] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[10:40:38] *** Quits: Volt_ (~Volt_@c-73-161-53-6.hsd1.mi.comcast.net) (Quit:  )
[10:41:37] *** Quits: pok (~pok@user/pok) (Ping timeout: 250 seconds)
[10:41:45] *** Joins: pok (~pok@s17612523434.blix.com)
[10:41:45] *** Quits: pok (~pok@s17612523434.blix.com) (Changing host)
[10:41:45] *** Joins: pok (~pok@user/pok)
[10:45:12] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[11:00:33] *** Quits: nubi (~user@187.84-234-202.customer.lyse.net) (Quit: ERC (IRC client for Emacs 27.2))
[11:09:27] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (*.net *.split)
[11:09:27] *** Quits: prokhor__ (~prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net) (*.net *.split)
[11:09:27] *** Quits: theBlackDragon (~dragon@fvwm/admin) (*.net *.split)
[11:09:27] *** Quits: Fade (fade@outrider.deepsky.com) (*.net *.split)
[11:09:27] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (*.net *.split)
[11:09:27] *** Quits: mgxm (~mgxm@user/mgxm) (*.net *.split)
[11:09:27] *** Quits: Common-Lisp (~Common-Li@104-58-112-202.lightspeed.bcvloh.sbcglobal.net) (*.net *.split)
[11:09:27] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (*.net *.split)
[11:09:27] *** Quits: opcode (~opcode@user/opcode) (*.net *.split)
[11:09:27] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (*.net *.split)
[11:09:27] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (*.net *.split)
[11:09:28] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (*.net *.split)
[11:09:28] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[11:09:28] *** Quits: phadthai (~mmondor@user/phadthai) (*.net *.split)
[11:09:36] *** Joins: Fade (fade@outrider.deepsky.com)
[11:09:38] *** Joins: phadthai (mmondor@user/phadthai)
[11:09:42] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[11:09:45] *** Joins: prokhor__ (~prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net)
[11:09:56] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[11:10:04] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[11:10:11] *** Joins: opcode (~opcode@2604:5800:0:1f::2)
[11:10:22] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[11:10:36] *** Joins: antoszka (sid528518@2a03:5180:f:5::8:1086)
[11:11:13] *** Joins: mgxm (~mgxm@user/mgxm)
[11:11:25] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[11:11:47] *** Joins: borodust (~irc@user/borodust)
[11:13:11] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (*.net *.split)
[11:13:11] *** Quits: MetaYan (~MetaYan@c-1555235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[11:13:12] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[11:13:12] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[11:13:12] *** Quits: dale (~dale@user/dale) (*.net *.split)
[11:13:12] *** Quits: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com) (*.net *.split)
[11:13:12] *** Quits: samebchase (~samebchas@51.15.68.182) (*.net *.split)
[11:13:12] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (*.net *.split)
[11:13:20] *** Joins: dale (dale@user/dale)
[11:13:22] *** Joins: MetaYan (~MetaYan@c-1555235c.07-84-7462671.bbcust.telenor.se)
[11:13:29] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[11:13:51] *** Joins: remexre (~remexre@user/remexre)
[11:13:52] *** Joins: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com)
[11:14:00] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[11:14:31] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[11:14:32] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[11:16:03] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[11:16:25] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[11:16:27] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[11:23:38] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 246 seconds)
[11:31:34] <pjb> hayley: you're right, indeed. Since the values are accumulated on the stack as parameter for the VALUES function.
[11:31:46] <pjb> So we need only one multiple value register per thread.
[11:33:58] *** Quits: spiaggia (~user@2a01:cb19:150:3400:7d1a:c251:efeb:785c) (Quit: ERC (IRC client for Emacs 26.3))
[11:41:51] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[11:47:16] *** Joins: shka (~herr@109.231.3.55)
[11:48:41] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[11:48:51] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.5)
[11:55:03] *** Joins: karlosz (~karlosz@47.151.152.149)
[11:59:18] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[12:10:49] *** Quits: karlosz (~karlosz@47.151.152.149) (Quit: karlosz)
[12:33:59] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 256 seconds)
[12:44:25] *** Quits: micro (~micro@user/micro) (Ping timeout: 256 seconds)
[12:44:55] *** Joins: igemnace (~ian@user/igemnace)
[12:45:09] *** Quits: OlCe (~user@lfbn-nic-1-449-48.w90-116.abo.wanadoo.fr) (Remote host closed the connection)
[12:49:54] *** Joins: occ (~occ@user/occ)
[12:49:55] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[12:54:00] *** Joins: MajorBiscuit (~MajorBisc@c-001-003-047.client.tudelft.eduvpn.nl)
[12:54:47] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[12:55:48] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 260 seconds)
[12:58:45] *** Joins: random-nick (~random-ni@87.116.167.125)
[13:07:17] *** Joins: s-liao (~s-liao@101.86.164.158)
[13:11:57] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:16:48] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[13:16:52] *** Joins: OlCe (~user@lfbn-nic-1-449-48.w90-116.abo.wanadoo.fr)
[13:17:04] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:17:29] *** Joins: asarch (~asarch@2806:10ae:7:23bc:8bd1:89cf:5203:5f1b)
[13:26:05] *** Joins: livoreno (~livoreno@user/notzmv)
[14:00:42] *** Joins: s-liao63 (~s-liao@101.86.164.158)
[14:03:46] *** Joins: s-liao96 (~s-liao@101.86.164.158)
[14:04:50] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[14:05:16] *** Quits: s-liao63 (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[14:11:31] *** Joins: lisp123 (~lisp123@143.238.171.43)
[14:19:16] <lisp123> lisptips.com is one of my favourite websites
[14:19:45] *** Quits: asarch (~asarch@2806:10ae:7:23bc:8bd1:89cf:5203:5f1b) (Quit: Leaving)
[14:30:06] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[14:56:00] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 272 seconds)
[15:03:06] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[15:07:25] *** Joins: notzmv (~zmv@user/notzmv)
[15:15:12] *** Quits: pillton (~user@220.240.224.251) (Quit: ERC (IRC client for Emacs 27.2))
[15:16:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 248 seconds)
[15:21:58] *** Quits: s-liao96 (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[15:24:28] *** Joins: s-liao (~s-liao@101.86.164.158)
[15:30:49] *** Joins: [deleted] (~livoreno@user/notzmv)
[15:33:53] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 248 seconds)
[15:42:47] *** Joins: lisp123 (~lisp123@143.238.171.43)
[15:53:43] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 260 seconds)
[15:57:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:03:38] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 260 seconds)
[16:05:13] *** Joins: livoreno (~livoreno@user/notzmv)
[16:15:02] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[16:15:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:16:35] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:17:26] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[16:17:37] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:17:37] *** Joins: jeko (~user@user/jeko)
[16:18:40] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[16:22:06] *** Quits: yosef` (~user@223.73.113.250) (Remote host closed the connection)
[16:23:29] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 248 seconds)
[16:23:35] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[16:28:19] *** Joins: trumae (~trumae@2804:18:86e:cd79:1:0:4570:9f01)
[16:28:43] *** Joins: heisig (~heisig@p579c8d35.dip0.t-ipconnect.de)
[16:44:27] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[16:45:00] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 240 seconds)
[16:45:24] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:40b6:f130:dc39:e36c)
[16:48:07] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[16:56:15] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:40b6:f130:dc39:e36c) (Ping timeout: 250 seconds)
[16:56:25] *** Joins: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba)
[16:59:16] *** Joins: Bike (~Bike@71.69.170.70)
[17:00:56] *** Joins: micro (~micro@user/micro)
[17:08:08] *** Quits: rgherdt (~rgherdt@port-92-195-125-72.dynamic.as20676.net) (Remote host closed the connection)
[17:11:36] *** Joins: notzmv (~zmv@user/notzmv)
[17:18:52] *** Quits: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba) (Ping timeout: 260 seconds)
[17:19:05] <zacque> Is there a function that append to a list if the argument is non-nil, and don't append if is nil?
[17:19:45] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:bc18:8fba:1417:6198)
[17:20:05] <zacque> I feel like there is a clever way to achieve this with some built-in function
[17:20:33] *** Quits: heisig (~heisig@p579c8d35.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[17:20:46] <Xach> zacque: it is never clever to append to the end of a list
[17:21:23] <zacque> E.g. (foo 1 2) => '(1 2), (foo 1 2 3) => '(1 2 3), but the thing is parameter of 3 is &optional, not of &rest
[17:21:35] <zacque> Xach: Oh, okay...
[17:21:54] <Xach> singly-linked lists aren't good at adding to the end, unless you do some bookkeeping to track the end in some other way
[17:22:18] <Xach> Sometimes it must be done anyway
[17:22:27] <Xach> There isn't a clever function for what you describe, though.
[17:22:54] <zacque> Xach: I see, thanks for informing
[17:23:18] <zacque> Xach: What is the bookkeeping method you meant for tracking the end?
[17:23:31] <zacque> Like storing (last <list>) to a variable?
[17:23:40] <zacque> Or storing `cdr` of a list?
[17:23:57] <zacque> Or something index variable?
[17:24:24] <Xach> zacque: always keeping track of the last cons of the list, and updating whenever appending. so instead of just storing the head cons, you store both the head and tail. then you have to use new functions to work with those two conses sensibly.
[17:24:48] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:25:03] <Xach> I think there are simple queue examples to be found for this idea
[17:25:40] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[17:25:47] <zacque> Ah, make sense, it's like having a pointer pointing to the end of the linked list
[17:25:53] <Xach> it's exactly that
[17:25:58] <hayley> Something like the COLLECT macro in https://github.com/telekons/one-more-re-nightmare/blob/master/Code/Interface/interface.lisp
[17:26:33] <Xach> that name is so hard to read and say
[17:27:14] <zacque> Hmmm, what the COLLECT macro does is not obvious to me
[17:27:50] <hayley> It maintains a pointer to the end of the linked list, and "appending" modifies the end, and the pointer.
[17:28:34] <hayley> Doing destructive operations on linked lists hurts my head, honestly. But collecting like this is bearable.
[17:29:19] <jeko> zacque: what are you ultimately trying to do? There may be other ways to achieve your goal that don't involve keeping pointers around
[17:30:10] <zacque> hayley: Oh, so every calls to the `function` in the `body` will append to the end of the list?
[17:30:20] <hayley> Right.
[17:30:35] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:30:55] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:bc18:8fba:1417:6198) (Ping timeout: 250 seconds)
[17:31:06] <zacque> jeko: Let me see, I want to build a funcall form dynamically
[17:31:10] *** Joins: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba)
[17:31:52] <zacque> The problem is that the function has some optional parameter, but I can't just pass nil as an argument, cause you won't know whether the default value is nil
[17:32:07] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[17:32:26] <zacque> So I think it's best to build a shorter list when there is no optional argument
[17:32:47] <Xach> well, you may be able to use the suppliedp feature
[17:33:03] <Xach> Oh, I think probably not, sorry.
[17:33:11] <zacque> No, cause the interface is fixed
[17:34:57] <zacque> So, given that the function "signature" is (defun foo (a b &optional c d e)), I want (foo 1 2) => '(1 2), (foo 1 2 3) => '(1 2 3), (foo 1 2 3 4 5) => '(1 2 3 4 5)
[17:36:23] <zacque> It looks simple, but I couldn't think of a simple way to do that
[17:38:24] <zacque> Nvm, I should have come up with a working solution first, then ask for a simpler approach.
[17:42:05] <zacque> A naive approach: https://paste.debian.net/1236754/
[17:44:51] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Quit: Leaving)
[17:45:12] <Xach> It can't be called as (foo 1 2 nil)?
[17:47:18] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[17:47:36] <zacque> Xach: No...
[17:48:04] <Xach> What you have looks pretty reasonable to me, then.
[17:50:08] <zacque> Xach: Ya...
[17:50:17] <zacque> But not quite good yet, cause the number of optional arguments may varies from functions to functions
[17:51:22] <zacque> I could generate the `cond` form programmatically though
[17:51:28] <zacque> I'll think about that
[17:51:34] <zacque> Xach: Thanks
[17:54:13] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[17:58:58] *** Quits: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba) (Read error: Connection reset by peer)
[17:59:17] *** Joins: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba)
[18:01:05] *** Joins: s-liao22 (~s-liao@101.86.164.158)
[18:01:12] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[18:05:52] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[18:06:14] *** Joins: Bike (~Glossina@71.69.170.70)
[18:06:16] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Read error: Connection reset by peer)
[18:06:26] *** Quits: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba) (Ping timeout: 268 seconds)
[18:06:29] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:09:00] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:b416:f658:9e23:6472)
[18:09:14] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:b416:f658:9e23:6472) (Read error: Connection reset by peer)
[18:09:26] *** Joins: Psybur (~Psybur@35.sub-174-244-245.myvzw.com)
[18:17:28] *** Quits: s-liao22 (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[18:26:05] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[18:27:03] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Remote host closed the connection)
[18:27:50] *** Joins: treflip (~user@user/treflip)
[18:33:13] *** Joins: s-liao (~s-liao@101.86.164.158)
[18:33:45] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[18:34:38] *** Quits: s-liao (~s-liao@101.86.164.158) (Client Quit)
[18:37:20] *** Joins: heisig (~heisig@p579c8d35.dip0.t-ipconnect.de)
[18:38:18] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 272 seconds)
[18:44:00] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[18:55:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[18:58:26] *** Joins: v88m (~Xiro@213.87.155.26)
[19:05:28] *** Quits: Psybur (~Psybur@35.sub-174-244-245.myvzw.com) (Remote host closed the connection)
[19:05:54] *** Joins: Psybur (~Psybur@75.145.205.201)
[19:05:59] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Read error: Connection reset by peer)
[19:06:09] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:09:20] *** Joins: admich (~user@ip-156-96.sn-213-198.clouditalia.com)
[19:09:23] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[19:10:56] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[19:22:00] *** Joins: Inline (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de)
[19:30:34] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:32:27] *** Quits: occ (~occ@user/occ) (Ping timeout: 260 seconds)
[19:37:16] *** Joins: occ (~occ@user/occ)
[19:40:51] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[19:42:35] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:49:11] *** Joins: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df)
[20:09:40] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[20:13:30] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[20:14:26] *** Joins: ebrasca (~user@librepanther.com)
[20:15:52] *** Quits: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:20:38] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[20:21:39] *** Joins: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df)
[20:27:43] *** Quits: heisig (~heisig@p579c8d35.dip0.t-ipconnect.de) (Quit: Leaving)
[20:34:01] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:34:47] <prokhor__> beach: I've got some questons about your CLOSOS if you don't mind:
[20:35:20] <beach> I don't mind at all.
[20:35:36] <prokhor__> 1: Concenrning the object store: Did you consider reusing ideas & conde from the statice object store?
[20:35:45] *** Quits: Psybur (~Psybur@75.145.205.201) (Ping timeout: 248 seconds)
[20:35:51] *** Joins: cage (~cage@dynamic-adsl-78-13-243-253.clienti.tiscali.it)
[20:36:20] <beach> I have not considered that because I am unaware of it.  Either way, the object store is the part that I am the least certain about.
[20:36:29] <prokhor__> 2: are you familiar with Open Geneera or the VLM: would you say it could be worth to revive some components of it
[20:36:50] *** Joins: Catie (~user@user/catie)
[20:37:18] <beach> Genera is proprietary software, so it can't be used legally.
[20:37:27] <prokhor__> https://www.ifis.uni-luebeck.de/~moeller/symbolics-info/statice.html
[20:37:40] *** Joins: frgo (~frgo@p548a3b78.dip0.t-ipconnect.de)
[20:37:49] <prokhor__> they intend to release it for non-commercial use soon
[20:38:12] <prokhor__> (at least thats what some guy on #symbolics told me...
[20:38:20] <beach> Oh, Statice stores the data in a file, so that's not an option.
[20:38:31] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:a90a:7e3:97e4:e639)
[20:38:42] <beach> I think it was made for a system that is not already university persistent.
[20:38:43] <White_Flame> prokhor__: it's a desire, not a plan, to release it as such
[20:39:04] <White_Flame> (as far as I've heard)
[20:40:25] <prokhor__> 3: woould you consider building sth like http://pyke.sourceforge.net/PyCon2008-paper.html on top of your system for code reusability?
[20:41:33] <beach> I would not consider doing that myself, but people are of course free to use the system as they please.  I am more interested in the properties of the system itself, and I have plenty of work with just that.
[20:41:35] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[20:41:36] <prokhor__> White_Flame: I dont want to argue about mere rumors, but my info was, that the owners finally decided to sell theyr tagged architecture patents & release the rest...
[20:41:48] <_death> there are other object stores like pclos and metastore.. that, too, seem not to be publicly available (code-wise)
[20:41:50] <White_Flame> ah, cool then
[20:42:13] <White_Flame> what I heard was quite a few months ago by now
[20:43:38] <beach> Every time I hear "object store", I think of a system that is meant to be used in order to store objects from a non-persistent image to secondary memory.  None of that stuff is needed on a system with universal persistence.
[20:43:59] <prokhor__> did you use the vlm - or even the original Genera?
[20:44:25] <prokhor__> @ White_Flame
[20:44:56] <White_Flame> I read everything there is about genera/opengenera, and tinkered with VLM a bit, and wrote an Ivory emulator
[20:45:10] <White_Flame> but not a serious user of it in any capacity, just interested in what the tech is
[20:46:01] <prokhor__> I am thinking of simply "reusing" the source code for at least statice & joshua for some time now...
[20:46:18] <White_Flame> that should just be all "userspace" as far as I'm aware
[20:46:25] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 248 seconds)
[20:46:41] <prokhor__> I even had in mind reviving SCL, like there are efforts for interlisp..
[20:47:01] <prokhor__> yeah, i am analyzing the code for some time now...
[20:47:22] <White_Flame> all the stuff for using local heap regions can be discarded, as they're just GC optimization.  not sure what other genera specifics there are in there
[20:47:53] <White_Flame> (unless there's quota limits involved, I guess)
[20:48:23] <White_Flame> s/genera specifics/genera low-level stuff/
[20:48:28] <prokhor__> do you know what exactly the VLM200 file does? does it give an initial lisp system? is it parts of the sys/sys2 modules compiled?
[20:49:07] <White_Flame> I don't know, I deal with booting from VLM-style images which don't hit lisp system files yet
[20:49:19] <prokhor__> k...
[20:50:59] <prokhor__> do you think theres potential in the idea of reviving it as soon as it will be possible? eg. with some new compiler & some multicore kernel?
[20:51:49] <White_Flame> I don't think so.  I think a workalike on top of CL with a compatibility lib would be a better option
[20:51:51] <prokhor__> like: developing acual code with a new version of genera, not mere retrocomputing
[20:52:18] <prokhor__> how about porting the code, say, to sbcl?
[20:52:24] <White_Flame> my ivory emulator compiles ivory functions in to native common lisp functions
[20:52:34] <White_Flame> (which twiddle a bunch of emulated state)
[20:52:55] <prokhor__> is it on github? link? (pls ;) )
[20:53:59] <White_Flame> hmm, no only on my local repos right now.  It hangs after executing a few hundred thousand boot instructions currently
[20:54:20] <prokhor__> i figured out that at least a lot of the macro definitions from genera also work on modern common lisps...
[20:54:24] <beach> prokhor__: How would this "new version of genera" happen?
[20:54:45] <prokhor__> you mean my plan/ agenda?
[20:54:49] <White_Flame> my desire is actually just to glean ideas from it, not reimplement it
[20:54:58] <beach> prokhor__: I guess so, yes.
[20:55:25] <prokhor__> beach: 1. write a new compiler & gc
[20:55:27] *** Joins: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9)
[20:55:32] <random-nick> wasn't there some talk about a official-ish modern release of genera?
[20:55:57] <White_Flame> yes, but the "current" genera is still only for VLM, and VLM is now for x86 & mac m1
[20:56:02] <prokhor__> 2. rewriting the kernel, mimicking the symbols the original scheduler package exports
[20:56:04] <White_Flame> (still not open source either)
[20:56:44] <beach> prokhor__: I see.
[20:57:12] <prokhor__> 3. (?) write some translator form original clim to clim2 or even mcclim
[20:57:36] * White_Flame is afk
[20:57:50] <prokhor__> 4. trying to reuse as much as possible, until somebody changes it..
[20:57:59] <prokhor__> thats as far as i got...
[20:58:14] <beach> prokhor__: What about the legal aspect of it?
[20:58:30] <beach> prokhor__: Your plan sounds very illegal to me.
[20:58:39] <prokhor__> i'd be happy to get any feedback from you
[20:58:58] <prokhor__> well... thats why i am waiting atm...
[20:59:09] <beach> OK.
[20:59:19] <White_Flame> no need to wait, fiddle now, release later
[20:59:28] <beach> So I personally don't think genera is good enough for modern needs.
[20:59:48] <beach> It did not take into account attacks from the Internet.
[20:59:59] <beach> And I don't think it had universal persistence.
[21:00:04] <prokhor__> but yes: even if i could manage to make 1-3 happen alone, i couldnt even put it on github to attract a community..
[21:00:49] *** Quits: v88m (~Xiro@213.87.155.26) (Ping timeout: 248 seconds)
[21:01:19] <prokhor__> beach: at least i was considering to use a rewrite of its mail client for you CLOSOS :D
[21:01:20] *** Joins: v88m (~Xiro@213.87.135.102)
[21:01:36] <beach> Heh, OK.
[21:01:50] <prokhor__> yeas, there is a lot to be done.. on the other side theres sth to build on...
[21:02:00] <beach> I understand your point.
[21:02:25] <prokhor__> in 300k LOC there should be at least some stuff, which hasnt to be reinvented..
[21:02:38] <prokhor__> also:
[21:03:07] <prokhor__> vlm runs as a linux-process, so protection could come from linux
[21:03:29] <prokhor__> (you have to disable SELinux to use it though)
[21:04:04] <Guest74> lots of code dealing with 1bit graphics to be saved.
[21:04:28] <prokhor__> also: everything in genera is already written in clos or flavor plus well documented..
[21:05:30] <prokhor__> i think its not that hard to write some transalator from flavor to clos, allegro even still has some support for flavors..
[21:07:16] <beach> prokhor__: If you want a system that has all the nice software that Genera does, I think your idea is fine, modulo the legal aspect of it.  Any translation of existing software would be derived work.  However, my goal is to try to prove that we can do better, not to have something complete from the start.
[21:08:03] <prokhor__> beach: LispWorks' knowledgeworks subsystem implements nameless classes for its object system (AMOP) do you think that a prerequisite for a oodb?
[21:08:38] <prokhor__> i see...
[21:08:49] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[21:08:51] <prokhor__> a concept car like oberon...
[21:09:00] <beach> prokhor__: Again, I am not thinking in terms of an object-oriented data base.  I am considering universal persistence which will make such things unnecessary.
[21:09:33] <prokhor__> could you point me to sth explaining universal persistence? link?
[21:10:02] <prokhor__> i only just read the first 3 chapters of you CLOSOS specs..
[21:10:54] <beach> prokhor__: Dinner is imminent here, so I may not have the time.  But it basically means that there is no distinction between primary and secondary memory.  All is just primary as far as the user is concerned.  When you turn the system on, it is in the state it was in when you turned it off.
[21:11:40] <prokhor__> *primary memory serving as cache for secondary*
[21:12:02] <beach> You can view it that way if you like.  But the operations are those of the primary memory.
[21:12:47] <prokhor__> how do you intend to save the image between boots?
[21:13:18] <beach> That is documented in a specific chapter.  Techniques are known.  I think I invented the second one.
[21:13:52] <prokhor__> *enjoy your dinner* :)
[21:13:58] <beach> It is saved as snap shots, so even a crash will have the image saved.
[21:14:00] <beach> Thanks.
[21:14:13] <prokhor__> thx for the answers & feedback...
[21:14:18] <beach> Pleasure.
[21:14:32] <beach> Feel free to ask again.  I'll be back tomorrow morning (UTC+2).
[21:19:29] *** Quits: MajorBiscuit (~MajorBisc@c-001-003-047.client.tudelft.eduvpn.nl) (Ping timeout: 248 seconds)
[21:28:08] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:a90a:7e3:97e4:e639) (Read error: Connection reset by peer)
[21:29:12] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:e08e:f00b:6e6c:53d5)
[21:32:29] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[21:36:13] *** Joins: karlosz (~karlosz@47.151.152.149)
[21:37:16] *** Joins: Oddity (~Oddity@user/oddity)
[21:49:34] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 272 seconds)
[22:00:12] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[22:04:28] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[22:07:17] *** Quits: v88m (~Xiro@213.87.135.102) (Read error: Connection reset by peer)
[22:08:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:09:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:18:13] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:e08e:f00b:6e6c:53d5) (Ping timeout: 250 seconds)
[22:20:39] *** Joins: Psybur (~Psybur@75.145.205.201)
[22:23:03] *** Joins: Oddity (~Oddity@user/oddity)
[22:23:24] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[22:25:15] *** Quits: Psybur (~Psybur@75.145.205.201) (Ping timeout: 256 seconds)
[22:28:48] *** Joins: sander (~sander@user/sander)
[22:35:25] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[22:36:33] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Read error: Connection reset by peer)
[22:36:54] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:38:04] *** Joins: simendsjo (~user@84.211.91.241)
[22:40:28] *** Joins: Psybur (~Psybur@75.145.205.201)
[22:41:28] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[22:42:14] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[22:43:24] *** Quits: admich (~user@ip-156-96.sn-213-198.clouditalia.com) (Ping timeout: 272 seconds)
[22:43:48] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[22:47:50] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[22:47:54] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:50:46] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[22:51:48] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[22:52:54] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[22:53:10] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:56:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:57:40] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[22:59:16] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:02:58] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[23:04:56] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[23:05:44] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 246 seconds)
[23:06:09] *** Joins: aeth (~aeth@user/aeth)
[23:18:16] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Read error: Connection reset by peer)
[23:19:19] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:24:50] *** Quits: karlosz (~karlosz@47.151.152.149) (Quit: karlosz)
[23:38:12] *** Joins: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de)
[23:38:12] *** Quits: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de) (Changing host)
[23:38:12] *** Joins: tane (~tane@user/tane)
[23:55:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[23:57:19] *** Quits: Psybur (~Psybur@75.145.205.201) (Ping timeout: 268 seconds)
[23:57:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:58:57] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:f1fc:41cc:1190:cfb8)
