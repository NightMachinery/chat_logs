[00:19:02] *** Quits: jao (~jao@79.red-79-159-137.dynamicip.rima-tde.net) (Ping timeout: 250 seconds)
[00:31:27] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:43:18] *** Quits: rgherdt (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[00:44:50] *** Joins: gproto23_ (~gproto23@user/gproto23)
[00:45:03] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[01:15:31] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[01:20:41] *** Joins: amerigo (~amerigo@89-75-36-150.dynamic.chello.pl)
[01:40:01] *** Joins: jao (~jao@84.red-176-83-203.dynamicip.rima-tde.net)
[01:42:40] *** Joins: rudybot (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com)
[01:46:44] *** Joins: sonny (~user@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[01:47:05] <sonny> can you put an if epression inside a case result?
[01:47:52] <gwatt> sonny: like this: (case expr ((symbol)) (if ...)) ?
[01:48:05] <gwatt> Oops, too many parens
[01:48:19] <gwatt> (case expr [(symbol) (if ...)])
[01:48:19] <sonny> yeah, trying to think about how it will work
[01:49:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:49:32] <sonny> ok, pretty sure it will evaluate the if expression, must be overthinking it
[01:49:33] <gwatt> what do you mean? it will work like an if expression in any other context, just the case statement needs to match the symbol literal
[01:50:01] <sonny> yeah, for some reason I thought the if could be delayed
[02:01:29] <elly> define "delayed"?
[02:02:28] <sonny> elly: dw, I was just confused. if doesn't work like lambda
[02:03:31] <elly> (if a b c) is a normal expression, basically, except that whichever branch isn't taken isn't evaluated at all
[02:03:50] <elly> case has that behavior too, the then-clauses for branches that aren't taken aren't evaluated
[02:04:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:07:11] <sonny> ok
[02:20:13] <sonny> do most schemes have an eof object that is distinct from numbers?
[02:21:57] <elly> r5rs says: "The precise set of end of file objects will vary among implementations, but in any case no end of file object will ever be an object that can be read in using `read'."
[02:23:52] <tokie> i'm implementing r5rs if and it's unspecified what to do for an if that doesn't have an else expression (lol?)
[02:24:02] <Zipheir> That's ancient history.
[02:24:18] <tokie> i'll probably just do the same thing i do for define, which is an internal #<void> type
[02:24:39] <Zipheir> R7 includes eof-object? in the list of "disjoint" type predicates.
[02:26:33] <Zipheir> So you can assume that an object that satisfies eof-object? will *not* satisfy number?, boolean?, etc.
[02:26:47] <Zipheir> Assuming R7RS.
[02:28:41] <Zipheir> tokie: Yes, it returns an unspecified value.
[02:30:58] <tokie> ah yeah, chezscheme uses void
[02:31:08] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[02:31:38] *** Quits: confuzius (~h_m@186-149-117-154.bitcointernet.co.za) (Ping timeout: 250 seconds)
[02:33:06] <sonny> Zipheir: yeah, that is kinda making stuff a little "clunky" when doing my scanner. When I get it done I will see if I can figure out a general way 
[02:33:20] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[02:59:15] *** Quits: jao (~jao@84.red-176-83-203.dynamicip.rima-tde.net) (Remote host closed the connection)
[03:00:55] *** Joins: jao (~jao@84.red-176-83-203.dynamicip.rima-tde.net)
[03:02:24] *** Quits: gproto23_ (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[03:06:17] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[03:10:07] *** Parts: sonny (~user@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (ERC (IRC client for Emacs 27.1))
[03:25:18] *** Joins: karlosz (~karlosz@47.151.136.69)
[03:27:30] *** Quits: jao (~jao@84.red-176-83-203.dynamicip.rima-tde.net) (Read error: Connection reset by peer)
[03:33:04] *** Joins: jao (~jao@84.red-176-83-203.dynamicip.rima-tde.net)
[03:34:29] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[03:38:00] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:44:50] *** Joins: livoreno (~livoreno@user/notzmv)
[03:46:07] <Spawns> anybody else have issues with the new version of alacritty?
[03:46:15] <Spawns> it panics on me as soon as it opens
[03:49:54] *** Quits: amerigo (~amerigo@89-75-36-150.dynamic.chello.pl) (Quit: Client closed)
[04:00:52] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:02:42] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 260 seconds)
[04:02:50] <aeth> Zipheir: a successful OS runs the software you want to run, well.
[04:03:10] <aeth> That was a problem with the Lisp Machines... when you could just take an x86 Lisp and run the same code, faster.
[04:03:20] <aeth> well, eventually, anyway
[04:04:28] <aeth> any modern Lisp-or-Scheme OS would have to face that same problem (it would need to be better for running that language), even if you don't care about, say, porting a web browser to make it generally useful as your main OS
[04:05:44] *** Joins: amk (~amk@109.255.169.126)
[04:08:19] <aeth> fortunately, it's just a software problem, not a software+hardware problem
[04:16:17] <Spawns> whoops wrong channel
[04:31:45] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[04:38:26] *** Quits: flatwhatson (~flatwhats@118-208-220-160.tpgi.com.au) (Remote host closed the connection)
[04:57:30] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[05:08:23] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[05:10:16] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[05:15:54] *** Joins: frost (~frost@user/frost)
[05:21:54] *** Quits: johnjaye (~pi@154.6.152.74) (Quit: WeeChat 3.3)
[06:03:58] *** Quits: taylan2 (~taylan@user/taylan) (Ping timeout: 250 seconds)
[06:04:05] *** Joins: taylan (~taylan@user/taylan)
[06:06:45] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:07:53] <drakonis> they raelly werent kidding about how massive r7rs-large is
[06:08:06] <drakonis> very much werent joking about the whole thing
[06:09:59] <drakonis> there's even restarts, sheesh.
[06:10:01] <drakonis> i like this.
[06:19:40] *** Joins: frost (~frost@user/frost)
[06:26:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:43:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:03:35] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:05:36] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:11:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[07:14:37] <Spawns> is it correct that quasiquote can be implemented with just quote, lambda, set and define?
[07:15:00] <Spawns> i am curious what that would look like roughly if it is possible
[07:16:29] <ns12> Spawns: Don't you need "cond" or "if"?
[07:16:40] <Spawns> oh yeah if as well
[07:17:43] <Spawns> my interpreter has working lambdas, proc calls, define, set! and some other stuff right now, and one of the first things I want to do is implement quasiquote so I can have a simple macro system
[07:17:53] <ns12> "cond" or "if" is unavoidable because you need to detect the presence/absence of "unquote" and "unquote-splicing", and do something accordingly.
[07:18:31] <Spawns> my plan is to pass in a list data structure to a scheme program, and use quasiquoting to return a modified version
[07:18:40] <ns12> Look up "Quasiquotation in Lisp" by Alan Bawden.
[07:23:03] <ns12> Spawns: That paper contains Scheme code that does exactly what you want.
[07:23:15] *** Quits: jao (~jao@84.red-176-83-203.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[07:25:52] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[07:35:25] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 240 seconds)
[07:39:45] *** Joins: frost (~frost@user/frost)
[07:40:37] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:42:57] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:48:24] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[07:49:40] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[07:50:10] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:53:18] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:55:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:11:39] *** Quits: teiresias (~chris@blvuug/founder/teiresias) (Read error: Connection reset by peer)
[08:11:51] *** Joins: teiresias (~chris@blvuug/founder/teiresias)
[08:16:41] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:17:31] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:18:51] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[08:19:42] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Client Quit)
[08:20:12] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[08:36:48] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[08:38:03] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:19:01] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:20:57] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:36:18] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[09:38:18] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:42:57] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[09:43:10] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:47:38] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab)
[09:49:39] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[10:21:58] <dpk> you can implement if as a macro in terms of lambda and a procedure fwiw
[10:30:17] *** Quits: klovett (~klovett@166.205.110.2) (Quit: ZZZzzz…)
[10:43:34] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:49:17] *** Joins: megane_ (~megane@chicken/developer/megane)
[10:55:31] <ns12> dpk: How?
[10:56:04] <dpk> (if a b c) => (if-proc a (lambda () b) (lambda () c))
[10:56:38] <dpk> the T compiler did this transformation, at least, because it's natural if your compiler is CPS-based
[11:00:56] <ns12> dpk: So the primitives if Scheme are "define", "set!", "lambda", and a macro system?
[11:01:10] <ns12> s/if/of/
[11:02:50] <dpk> well, the Scheme standard doesn't define what's primitive
[11:03:40] <dpk> Alonzo Church would like you to know that the only primitive of Scheme is lambda
[11:04:59] <ecraven> ns12: also `if' and `quote'
[11:05:27] <dpk> quote is not primitive either, as Kiselyov has shown ;-)
[11:08:53] <ns12> ecraven: Doesn't the example given by dpk show that "if" is not necessary?
[11:11:30] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[11:12:38] <ecraven> you don't *need* set! or define either...
[11:17:57] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:23:56] *** Joins: civodul (~user@guix/contributor/civodul)
[11:29:55] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[11:31:33] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:32:29] <ecraven> ;)
[11:39:15] <dpk> drakonis: we don't have restarts yet, but they'll be on the ballot ;-) i hope they get in — in my increasingly-extensive list of notes on issues to be resolved for R7RS, i already have one use case for them
[11:39:35] <dpk> (customizing the error handling of the UTF decoders)
[11:40:15] <drakonis> so many features
[11:40:19] *** Joins: jdevoo (~jdevoo@109.136.191.26)
[11:40:29] <drakonis> no delimited conditions tho?
[11:40:34] <dpk> doch
[11:40:41] <drakonis> also clos ripoff idk??
[11:40:46] <dpk> https://srfi.schemers.org/srfi-226/srfi-226.html is the most advanced concrete proposal in that area
[11:40:51] <drakonis> oh
[11:41:08] <dpk> no CLOS-like system on the dockets so far, and i would vote against it at every stage
[11:41:20] <dpk> i mean, we're going to have enough arguments about *record-types*
[11:41:28] <drakonis> lol
[11:41:31] <dpk> never mind multi dispatch ;-)
[11:41:50] <dpk> but it's Scheme, write your own object system if you want one
[11:41:52] <drakonis> it's going to be a wild ride
[11:42:27] <drakonis> how long would it take for r7rs to be finalized? another couple years?
[11:42:30] <wasamasa> lol
[11:42:35] <amazigh> :)
[11:42:38] <Franciman> are delimited continuations part of the standard?
[11:42:43] <wasamasa> if you extrapolate by the previous speed, it could be 50 years
[11:42:49] <amazigh> Franciman: no, not yet
[11:43:05] <Franciman> oh i see
[11:43:07] <dpk> yes, i'm hoping to get things sped up
[11:43:46] <Franciman> while continuations do, am i right?
[11:44:21] *** Joins: frost (~frost@user/frost)
[11:44:27] <amazigh> yes
[11:44:41] <Franciman> can I implment delconts in terms of continuations?
[11:45:08] <dpk> Franciman: jein, see the sample implementation of SRFI 226
[11:45:48] <dpk> tl;dr: you can implement them in terms of undelimited continuations provided they can be compared for equality
[11:46:30] <Franciman> TIL jein
[11:46:30] <dpk> oh, and you need procedures to have identity too, i think (which they do according to R5 and R7 but not according to R6)
[11:47:03] <dpk> i hope to see R7RS finished in my lifetime, and indeed in jcowan's lifetime, despite his previously-expressed pessimism in that regard
[11:47:28] <amazigh> :/
[11:48:08] <Franciman> thank you
[11:48:18] <dpk> but it will need fairly major procedural changes to achieve that, which i intend to formally propose soon (having badgered jcowan about it for months now ;-) )
[11:49:11] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:49:53] *** Joins: h_m (~h_m@186-149-117-154.bitcointernet.co.za)
[11:49:53] *** Quits: h_m (~h_m@186-149-117-154.bitcointernet.co.za) (Client Quit)
[11:50:48] *** Quits: jdevoo (~jdevoo@109.136.191.26) (Quit: leaving)
[11:53:02] *** Joins: confuzius (~h_m@186-149-117-154.bitcointernet.co.za)
[11:55:20] *** Joins: frost (~frost@user/frost)
[11:59:26] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[12:04:56] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[12:07:10] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:15:30] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[12:21:30] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[12:29:46] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:285e:465c:39b2:6c4b)
[12:41:51] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[13:09:45] *** Joins: gproto23_ (~gproto23@user/gproto23)
[13:20:15] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[13:39:16] * dpk idly wonders if the people who object to identifier macros also object to doesNotUnderstand:/method_missing/__getattr__ etc
[13:40:35] <dpk> if anything, identifier macros are *more* disciplined than those, as they are analysed statically
[13:41:26] <ecraven> can identifier macros expand "outside", or only in the place where the identifier is?
[13:41:46] <dpk> what do you mean by ‘outside’?
[13:41:57] <ecraven> (foo bar baz), if bar is an identifier macro, can it change what foo or baz mean, or just what the position of bar expands to?
[13:42:02] <ecraven> sorry if I'm not explaining this well :-/
[13:42:05] <dpk> the latter
[13:42:23] <ecraven> then I'm not very opposed to them ;)
[13:42:43] <ecraven> what's a good use for identifier macros that can't be solved well in any other way?
[13:42:56] <dpk> if it were invoked as (bar foo baz) it could change foo and baz, but that’s because in that case it’s not an identifier macro
[13:43:06] <ecraven> yes, that's just a normal macro
[13:43:55] <dpk> M N-W and I came up with a list of use cases here https://github.com/ashinn/chibi-scheme/pull/805#issuecomment-1003320393
[13:44:27] <ecraven> thanks!
[13:45:38] <ecraven> is there a proposal on identifier macros for r7rs-large?
[13:46:01] <dpk> it’s on the current ballot listed in the channel topic :-)
[13:46:38] <ecraven> ah, so "just" copy r6rs identifier macros?
[13:47:07] *** Joins: Oshawott (~archenoth@2604:3d09:681:f00:3863:cfe8:507d:8d05)
[13:48:17] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:cb2:cb45:7a07:3d72) (Ping timeout: 240 seconds)
[13:48:47] <ecraven> hm.. the example in r6rs *does* show the identifier macro modifying "outside" context... ((set! _ e) (set-car! p e))  means that I don't know what set! means any longer, since *any* identifier-syntax could change the meaning, right?
[13:48:54] <ecraven> (nor what e means ;)
[13:49:23] <ecraven> *that's* the part I dislike... nothing else in Scheme (that I know of) can modify the meaning of things that aren't "inside" it.
[13:49:55] <ecraven> or is this incorrect?
[13:58:57] *** Quits: confuzius (~h_m@186-149-117-154.bitcointernet.co.za) (Ping timeout: 256 seconds)
[14:14:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[14:22:53] <megane_> dpk: if bar is an identifier macro, and foo a normal macro, is bar expanded before foo in (foo bar baz)? i'm guessing after foo, like with normal macros.
[14:23:21] <dpk> yes, foo is expanded first
[14:23:33] <megane_> ty
[14:24:15] <dpk> otherwise this wouldn't work, of course,: (let-syntax ((my-id (identifier-syntax #f))) (let ((my-id #t)) my-id)) ;;=> should be #t
[14:29:31] <dpk> ecraven: if the identifier macro is defined with make-variable-transformer or the longer form of identifier-syntax, then yes, it can change the meaning of set!
[14:29:37] <dpk> but not of anything else
[14:32:04] <dpk> i.e. (identifier-syntax (_ foo) ((something-other-than-set! _ bar) baz)) won't work
[14:33:17] <dpk> otherwise identifier macros couldn't be defined that work exactly like variables (in being able to be both referenced and also set)
[14:34:17] <dpk> also, identifier-syntax/make-variable-transformer alone doesn't introduce any SRFI 17-like ability to have the first argument to set! be something other than just an identifier: it has to be a variable name or the name of an identifier macro
[14:34:52] <dpk> in other words, (identifier-syntax (_ foo) ((set! (_ bar ...) baz) frob)) is also meaningless
[14:38:10] <dpk> if one happens to think my analogy to doesNotUnderstand: is relevant, then it can also be extended to the set! case, because Ruby's version, method_missing, can do that too: if i call foo.bar = baz and it doesn't know of a way to set the bar property on foo, it gets turned into foo.method_missing(:bar=, baz) (where :bar= is a Symbol)
[14:53:15] <ecraven> ah, ok, if it's only restricted to set!, that might be ok ;)
[15:10:20] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[15:19:16] *** Quits: zwr (~zwr@2804:d45:b966:fb00:ed56:14ca:4cf:c0ab) (Ping timeout: 268 seconds)
[15:19:44] *** Joins: zwr (~zwr@2804:d45:b966:fb00:1d:7713:457:353)
[15:38:32] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[15:49:46] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[15:50:05] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[15:56:16] *** Joins: Techcable (~Techcable@168.235.93.147)
[16:10:34] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:19:56] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[16:58:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:03:41] *** Joins: ManDay (~manday@user/manday)
[17:05:42] *** Joins: livoreno (~livoreno@user/notzmv)
[17:12:45] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 256 seconds)
[17:14:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[17:16:18] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:24:44] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:27:46] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[17:29:48] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:31:08] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:285e:465c:39b2:6c4b) (Quit: Client closed)
[17:38:10] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[17:40:10] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:52:01] *** Joins: casmajavi (~casmajavi@181.194.51.163)
[17:52:28] *** Quits: casmajavi (~casmajavi@181.194.51.163) (Client Quit)
[17:53:52] *** Joins: casmajavi (~casmajavi@user/casmajavi)
[17:55:49] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:57:31] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:58:37] *** Joins: klovett (~klovett@166.205.110.2)
[18:01:34] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[18:04:19] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:07:43] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:08:53] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:11:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:13:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:20:49] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[18:22:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:35:38] *** Quits: ManDay (~manday@user/manday) (Quit: TURBOquit (tm) - the fastest way to get out of an awkward situation)
[18:44:55] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:749d:daa8:d51c:47ce)
[18:44:55] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:749d:daa8:d51c:47ce) (Changing host)
[18:44:55] *** Joins: skapata (~Skapata@user/skapata)
[18:45:51] *** Joins: klovett_ (~klovett@166.205.90.163)
[18:48:22] *** Quits: klovett (~klovett@166.205.110.2) (Ping timeout: 250 seconds)
[18:59:17] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:00:57] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[19:01:06] *** Joins: Techcable (~Techcable@168.235.93.147)
[19:01:10] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:04:13] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[19:05:10] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[19:15:40] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[19:23:50] *** Quits: topoi (~topoi@user/topoi) (Quit: leaving)
[19:29:17] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[19:31:38] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:38:17] *** Joins: livoreno (~livoreno@user/notzmv)
[19:41:40] *** Quits: casmajavi (~casmajavi@user/casmajavi) (Quit: Client closed)
[20:12:21] *** Joins: notzmv (~zmv@user/notzmv)
[20:30:21] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:38:02] *** Joins: johnjaye (~pi@154.6.152.74)
[20:43:56] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 252 seconds)
[20:55:11] *** Joins: jao (~jao@88.red-37-10-167.dynamicip.rima-tde.net)
[21:05:29] *** Joins: aeka (~aeka@user/hiruji)
[21:07:30] <elly> I'm very glad that chibi development is still afoot :)
[21:07:35] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[21:07:37] <elly> it is my favorite scheme implementation
[21:11:24] *** Joins: daviid (~user@179.210.52.91)
[21:13:44] <Oxyd> What makes it your favourite implementation?
[21:13:52] <elly> I'm not sure actually
[21:14:04] <elly> it became my default a while ago and I've just used it for a long time now
[21:16:13] <dpk> it's very nicely designed, even if underperformant by its small and simple nature
[21:16:20] <dpk> it compiles in like 10 seconds flat
[21:16:41] <dpk> and it supports all of R7RS Large so far
[21:17:08] <elly> underperformant generally doesn't matter for the sort of stuff that I do
[21:23:08] *** Quits: klovett_ (~klovett@166.205.90.163) (Quit: ZZZzzz…)
[21:23:13] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[21:28:37] *** Joins: klovett (~klovett@166.205.90.163)
[21:33:36] *** Quits: jao (~jao@88.red-37-10-167.dynamicip.rima-tde.net) (Remote host closed the connection)
[21:39:29] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[21:45:44] <Zipheir> Opinions welcome on yet another flavor of currying in Scheme: https://srfi.schemers.org/srfi-232/srfi-232.html
[21:46:25] <aeth> chibi's nice if you want to see what r7rs is
[21:46:33] <aeth> as opposed to what someone else's views of random stuff to add to Scheme are
[21:48:01] <dpk> gosh, we're up to 232
[21:48:04] <aeth> but if the "random stuff" is useful to you...
[21:48:16] <dpk> this calls for a relevant BWV https://www.youtube.com/watch?v=3FLbiDrn8IE
[21:49:37] <dpk> ah, 231 is a do-over on Lucier's multi-dimensional arrays
[21:51:28] <Zipheir> aeth: And what Scheme is like if you go full Unicode from the start.
[21:51:44] <aeth> not quite
[21:52:00] <aeth> R7RS has some... weird edge cases with unicode
[21:52:10] <aeth> like assuming that you can even upcase things
[21:52:37] <dpk> Chibi has full Unicode though, which is impressive given its small size
[21:52:42] <gwatt> Is that an edgecase in r7rs or an edgecase in libiconv
[21:53:09] <dpk> aeth: what do you mean?
[21:53:13] <aeth> My point is, that upper case and lower case characters don't even make sense in the context of unicode
[21:53:22] <dpk> they certainly do
[21:54:09] <dpk> Unicode defines locale-dependent as well as local-independent upcase, downcase, and casefold operations. and indeed a title case operation, which got rejected from both small and Large for probably bad reasons
[21:54:11] <aeth> In Turkish it's İi Iı, but everywhere else, it's Ii. So it's locale-dependent.
[21:54:25] <dpk> of course the locale-independent ones won't be right for every language, no
[21:54:46] <aeth> And then you have iirc ß whose upper case is... "SS"
[21:55:03] <aeth> Well, if you do "ß"
[21:55:13] <aeth> But trying to upper case #\ß is... kind of nonsensical
[21:56:07] <aeth> and then there's the final sigma which is... the final sigma in a word. Otherwise, lower casing sigma will just produce sigma.
[21:58:23] <dpk> upper casing ß makes sense if you're printing in all caps
[21:58:46] <dpk> which is why, after much umming and erring, we got a capital ẞ
[21:59:19] <aeth> what about smallcaps? Seems more unambiguously good there, if German has that convention like in English.
[21:59:38] <aeth> (I think it's just using a smaller font size's upper case)
[22:02:31] <nytpu> aeth: it shouldn't use a scaled down upper case if you have a real small caps font: https://practicaltypography.com/small-caps.html
[22:04:06] <aeth> I don't really see the difference? Or, at least, how one is objectively better than the other.
[22:04:19] <aeth> Lots of people want narrow/thin
[22:04:34] <aeth> if anything, that's more in style these days
[22:04:56] <Zipheir> Oy veh.
[22:05:29] <dpk> yes, German also uses small caps, with the adorable name Kapitälchen
[22:05:52] <aeth> font snobbery is about nitpicking the littlest things and the more you nitpick, the less happy you are with everything because nobody is a font snob... speaking a bit from experience.
[22:06:20] <dpk> quite extensively in the past, although less so now. it used to be common for academic works to print the names of every author they cited, in running text or in footnotes or wherever, in small caps
[22:06:23] <aeth> I do understand why "true" small caps would have a uniform thickness, though
[22:06:57] <Zipheir> dpk: I've seen that.
[22:07:05] <aeth> I would wager that 99.99% of small caps in the English language is LORD in most English Bible translations.
[22:07:29] <aeth> rare convention outside of Bibles and there are a lot of Bibles.
[22:07:46] <Zipheir> I don't know what small caps are supposed to be, functionally speaking.
[22:08:13] <aeth> Small caps can look nice on poster designs where you want caps, but you don't want caps
[22:08:24] <Zipheir> But natural language probably frustrates functionalist anthropologists to no end.
[22:08:50] <Zipheir> "Small caps: When you want caps, but you don't want caps."
[22:09:00] <aeth> yes
[22:09:06] <aeth> which is perfectly valid when you're doing design rather than prose
[22:09:13] <aeth> and you just keep adjusting it until it looks nice
[22:09:34] <aeth> I wouldn't be surprised if movie posters, ads, product packaging, etc., are full of small caps that we don't even notice
[22:10:12] <aeth> looking around my room randomly, they mostly just prefer adding a lot of plain CAPS though
[22:10:17] <gwatt> I just went looking around my house, and almost none of the board games I have use small caps
[22:10:32] <gwatt> or books I can see
[22:10:42] <nytpu> i've only ever seen it used in fancy typesetting/designing where there naturally would be font snobbery, i've personally never used it, certainly not in regular writing
[22:10:51] <dpk> Death in the Terry Pratchett books speaks in small caps, i believe
[22:11:03] <aeth> I really wouldn't be surprised if some caps on packaging are small caps without any contrasting large caps (i.e. all "lower case" but with small caps on) because designers are weird
[22:11:13] <gwatt> I've only read the ebook discworlds, but I though death spoke in normal caps
[22:11:25] <aeth> I see some "all caps" on some packaging that looks short and wide
[22:11:53] <dpk> at least in the German versions. it's been too long since i've seen an English copy
[22:12:50] <nytpu> gwatt: that's weird, because i see small caps used all the time in ebooks.  i think stephen king used small caps for emphasis a lot
[22:13:16] <gwatt> dpk: nope, you're right. Death speak in small caps
[22:14:08] <gwatt> if there are small caps are there large lowers?
[22:14:14] <aeth> an author/publisher that writes with "coöperation" or "naïve" is probably the kind of author that would use small caps
[22:14:36] <aeth> another rare modern convention
[22:14:41] <Zipheir> Hah.
[22:14:54] <gwatt> I've never seen "coöperation". only "co-operation" and "cooperation"
[22:14:54] <aeth> when you have to consecutive vowels and you want to distinguish between "o-o" and "oo"
[22:15:04] <aeth> and, yes, "o-o" is more common now
[22:15:18] <Zipheir> "No more buttered scones for me, mater, I'm off to play the grahnd piahno.  Excuse me while I fly my aeroplane!"
[22:15:34] <dpk> in OpenType you can turn on c2sc (use small capitals for capital letters) without turning on smcp (use small capitals for small letters) and it will usually give you a somewhat ugly thing where only the caps are small caps, and everything else is normal lower case
[22:15:38] <gwatt> is your aeroplane made of aluminium?
[22:16:03] <aeth> the ö/ï definitely seems like a thing that snobby Brits or New Englanders would do
[22:16:16] <aeth> especially if they went to Harvard or Oxbridge
[22:16:17] <dpk> it's a New Yorker house style, and used by roughly nobody else
[22:16:22] <dpk> i think they might have invented it, even
[22:16:39] <Zipheir> Very interesting.
[22:17:00] <Zipheir> gwatt: I can't believe Monty Python didn't use that word in that sketch.
[22:17:18] <Zipheir> But then, "aluminium" would only be funny to Americans.
[22:17:34] <dpk> as would aeroplane
[22:17:41] <aeth> aluminium is the official name afaik
[22:17:58] <gwatt> aeth: I did just see that umlaut style in a book I read, but it was "elvish" and only for names, so I didn't think of it as snobbery
[22:18:01] <dpk> it is. i think you let us have that one in exchange for imposing sulfur on us
[22:18:08] <aeth> gwatt: but Elves are snobbery
[22:18:11] <aeth> gwatt: so it would make sense
[22:18:35] <gwatt> in this work, yes, they are pretty snobbish.
[22:18:54] <gwatt> though that might have less to do with being elves than following around members of the emperors court
[22:19:10] <aeth> in general, elves in fiction tend to either be very long-lived or biologically immortal (wouldn't be a fun story/game if they were 100% immortal)
[22:19:18] <aeth> so they can just... ignore anything that isn't world-ending and wait it out
[22:19:40] <aeth> just like you would if an evil empire only lasted the duration of a Tuesday
[22:19:43] <dpk> but then you also imposed short-scale billions on us, causing no end of confusion especially here in the former Holy Roman Empire, where eine Billion is still a million million, and eine Milliarde is a thousand million, as god intended
[22:20:04] <aeth> short scale makes more sense
[22:20:18] <aeth> at least, on the number scale that anyone cares about
[22:20:28] <gwatt> I think that long scale makes more sense
[22:20:34] <aeth> "billion" and "trillion" are really common so saying it in short form saves time and is easily understood
[22:21:05] <aeth> you only get into numbers were the long scale starts making sense if you play Cookie Clicker
[22:21:07] <Zipheir> dpk: The "air-o-plane" pronunciation is what sets off Graham Chapman's tirade, so it must have been identifiable as posh to audiences at the time?
[22:27:12] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Quit: ZNC 1.8.2 - https://znc.in)
[22:31:06] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[22:33:56] <Franciman> hi Zipheir are you involved in writing the r7rs large ?
[22:35:57] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[22:36:12] *** Joins: madage (~madage@user/madage)
[22:36:32] <Zipheir> Franciman: No, but I've helped jcowan write implementations of various parts of it.
[22:36:51] <Zipheir> Well, everyone who votes on the dockets is, I guess.
[22:40:08] <Franciman> :O
[22:40:10] <Franciman> awesome!
[22:40:39] * Zipheir waits for dpk to explain why she thinks it's not awesome.
[22:41:24] <Zipheir> Franciman: https://tinyurl.com/yellow-ballot  https://tinyurl.com/urania-straw-poll
[22:41:43] <Zipheir> The Yellow ballot has been really interesting.
[22:42:22] <Franciman> ahah
[22:42:34] * Franciman had read Ukraine
[22:43:24] <Zipheir> Ukraine would have to be in R7RS-huge.
[22:43:27] <Zipheir> :)
[22:44:20] <Franciman> :D
[22:45:36] <dpk> Zipheir: i'm moderately happy with R7RS Large so far. i think we should nix (scheme generator) or at least put big flashing warning lights around it, and (scheme hash-table) should be nixed now we have (scheme mapping hash), and various other small complaints. also the results of Yellow so far are looking promising, my only concern being that we do, actually, have to choose between syntax-case and er-macro-transformer, because you can only 
[22:45:36] <dpk> support one without fatally compromising the implementation of the other
[22:46:02] <aeth> Zipheir: imagine adding 603,628 km² to R7RS
[22:46:37] <dpk> my main concern is (a) the speed of the process so far and (b) the number of issues still outstanding which there appears to be no productive way to resolve
[22:47:01] <dpk> i've come up with about 38 of them in the last three days alone
[22:49:56] <dpk> for one thing, the security issues in R7RS small need to be resolved. for example, small doesn't mandate bounds checking when accessing vectors, bytevectors, etc. — we should probably change that, but that's nowhere to be found on the current ballot
[22:50:53] <gwatt> I assume the magical constraint-freeing phrase "it is an error ..." occurs instead?
[22:51:24] <dpk> and considering the number of such 'it is an error' conditions (many of them only implied by the spec, not explicitly stated), and the sometimes subtle security implications they could have, and the fact each one may need to be resolved in its own special way, simply waiting for the next <del>peanut gallery</del> ballot of the whole of WG2 (aka everyone) to come along is not an option 
[22:51:31] <dpk> yep
[22:52:26] <Zipheir> dpk: I would love to get rid of hash-tables in Scheme.
[22:52:39] <Zipheir> But so many people love them.
[22:53:35] <dpk> oh, another one is that (scheme set) makes a useless guarantee to users that an implementation won't require the comparator for the set to have both a hash function *and* an ordering predicate. but since it's not specified which one is used, if you want your set to work across implementations, you have to use a comparator with both anyway
[22:53:41] *** Joins: ouestbillie (~gallup@142.169.82.16)
[22:54:11] <dpk> fortunately (scheme mapping) and (scheme mapping hash) shows us the way: split (scheme set) in two, with (scheme set) using the ordering predicate and (scheme set hash) using the hash function
[22:56:43] <Oxyd> What would you do about bounds checking? Go from “it is an error” to “an error is signalled”?
[22:58:32] <dpk> yes, but then we need to talk about condition types, and specifically built-in condition types for errors which the spec requires to be signalled. this whole subject is still embarrassingly far down the apparent priority list, perhaps for the (arguably good) reason that it's a touchy subject and we probably can't adopt any one standard system without alienating some implementers with their existing error type hierarchies
[22:59:29] <gwatt> interestingly, r6rs doesn't seem to specify these kinds of errors. All I can see is "must be a valid index of vector"
[22:59:52] <Zipheir> One reason why I think r7rs-large starting from r6rs would have been a Good Thing.
[23:00:01] <Zipheir> gwatt: Surprising!
[23:00:08] <dpk> doesn't "must" in r6rs-speak mean it's an assertion error if it isn't the case?
[23:01:52] <Oxyd> Not sure why a talk about condition types would be necessary. Just raising an exception ought to be enough.
[23:01:55] <Zipheir> Probably.  I'm not sure where that's stated.
[23:02:09] <gwatt> dpk: ah yes, you are correct
[23:02:09] <dpk> hmm, not here anyway http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-5.html#node_chap_2
[23:02:25] <gwatt> http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-8.html#node_sec_5.4
[23:02:32] <johnjaye> Zipheir: i'm surprised to hear it didn't. was the design goal not the same?
[23:02:39] <dpk> ah, thanks
[23:02:42] <johnjaye> i know the dispute in 6 was over "large" vs "small" language
[23:03:31] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 256 seconds)
[23:03:35] <Zipheir> johnjaye: That's the tip of the iceberg.
[23:04:15] <Zipheir> johnjaye: But yeah, the R7RS-large steerers decided it should not be based on r6.  IMO this deepens the divide.
[23:04:20] *** Joins: daviid (~user@179.210.52.91)
[23:04:32] <amazigh> +1
[23:04:37] <johnjaye> yes it does sound like a large iceberg
[23:04:40] <Zipheir> So I guess we have to wait for R8RS for Vulcan-Romulan reunification.
[23:04:51] <Zipheir> Er.. yes.
[23:04:54] <gwatt> R+Inf.0RS
[23:05:14] <Zipheir> RNaNRS
[23:05:51] <Zipheir> (pronounced "nanners")
[23:08:01] <Oxyd> R+inf.0+nan.0iRS
[23:08:07] <johnjaye> Zipheir: ironically when i google for r6rs vs r7rs i get a blog post referring to this very channel by the author of akku and the second point is about errors and conditions
[23:09:11] *** Quits: ouestbillie (~gallup@142.169.82.16) (Ping timeout: 256 seconds)
[23:11:04] <Zipheir> johnjaye: You'll find a lot of people arguing very hard for one or the other and perhaps not doing justice to both.
[23:12:01] <Zipheir> johnjaye: weinholt's article?
[23:12:45] <johnjaye> yes
[23:13:52] <johnjaye> interesting that it mentions unicode give our discussion before
[23:17:37] *** Quits: klovett (~klovett@166.205.90.163) (Ping timeout: 240 seconds)
[23:18:00] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:20:42] *** Joins: ouestbillie (~gallup@142.169.82.16)
[23:23:18] <aeth> Zipheir: a scripting language is a language with hash tables, vectors, and strings.
[23:23:22] <aeth> you need 'em
[23:23:38] <aeth> anything that's loosely JSON-like in its data structures... e.g. Python
[23:23:52] <dpk> even if you have immutable mappings, you need hash tables too?
[23:24:54] <Zipheir> aeth: That's an interesting definition of "scripting".  Larry might want a word with you https://www.perl.com/pub/2007/12/06/soto-11.html/
[23:27:10] <Zipheir> Hash-tables are crazy to me, because it's extremely hard to show that a *simple* implementation is correct and obeys important properties.  And they're incredibly popular in incredibly-optimized-and-thus-probably-totally-bonkers implementations.
[23:30:08] <aeth> Zipheir: I mean there are two different types of scripting language depending on what you mean by "scripting": application scripting (e.g. elisp) or Unix scripting (e.g. bash) or potentially both (e.g. Python)
[23:30:08] <gwatt> I think scheme's hashtables have an interesting property over other languages in that you specify the hashing and equality checking procedures. I wish more languages had soemthing like that
[23:30:18] <aeth> Zipheir: I'm just adding a third definition, which is the user's expectation of data types
[23:31:00] <aeth> Zipheir: Perl is very much in the Unix scripting sort of approach, but it has been used for application scripting, in fact, even in the IRC client (irssi) that I'm using right now
[23:31:01] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[23:32:19] <aeth> but the roughly common feature set of JavaScript, Lua, Python, and (I'm guessing) Ruby is what people think of.
[23:32:44] <Zipheir> aeth: It's interesting and strange that "scripting" has spread to "application scripting".
[23:33:18] <wasamasa> there's this attempt at making CHICKEN more amendable for scripting purposes: https://idiomdrottning.org/brev
[23:33:19] <Zipheir> I guess the common thread is "lots of statements glued together."
[23:33:50] <wasamasa> just optimize all the pain points that are typed out over and over again
[23:34:22] <gwatt> What I've usually seen described as scripting is: dynamic types, no compile step
[23:35:34] <Zipheir> I again recommend that Larry Wall article, which is a funny discussion of all of this.
[23:35:58] <wasamasa> https://idiomdrottning.org/brev-separate
[23:36:07] <Zipheir> "I think, to most people, scripting is a lot like obscenity. I can’t define it, but I’ll know it when I see it."
[23:37:54] <aeth> gwatt: you can script with a compilation step, it just needs to be "instant"
[23:38:05] <aeth> gwatt: which means that the application or the shell can do it transparently
[23:38:47] <aeth> e.g. most Common Lisps do native (rather than bytecode) compilation, but are still usable as scripting, especially after the first run caches the FASLs
[23:39:06] <aeth> s/usable as/usable for/
[23:39:12] <gwatt> aeth: no manual compilation step
[23:39:31] <Zipheir> I've read a ton of definitions and I still don't understand the distinction between "programming" and "scripting".
[23:39:40] <elly> yeah, "no separate compilation step" is a reasonable working definition
[23:39:51] <elly> there is no precise distinction though, just a difference of connotation I think
[23:40:33] <aeth> gwatt: you can have an automatic compilation that takes forever, though
[23:40:47] <Zipheir> Guile and Chez auto-compile Scheme source, so I guess R6RS is a "scripting language".
[23:40:51] <aeth> gwatt: so it needs to be automatic and fast
[23:41:06] <aeth> Zipheir: it's about where it's used, though
[23:41:19] <aeth> Zipheir: write an OS in it and it's a systems language; use it for application scripting and it's a scripting language
[23:41:23] <Zipheir> ... and raku's autocompilation is very slow, so it's not?!
[23:41:32] <aeth> afaik, C# has been used in both roles (MS OS experiments, and Unity game engine scripting)
[23:41:55] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[23:43:48] <aeth> Zipheir: If that's the case, that would help explain its lack of popularity... doesn't fit expectations
[23:44:34] <Zipheir> Hah, accurate.
[23:44:41] <gwatt> I think raku is a victim of being perl
[23:45:10] <Zipheir> And also of *not* being perl (5).
[23:45:16] <gwatt> but not being perl 5 enough. It managed to alienate a large amount of everyone
[23:45:36] <aeth> Perl 5 doesn't really fit modern expectations of a scripting language, either. It's very, very powerful for text processing. Almost like awk++
[23:45:37] *** Quits: johnjaye (~pi@154.6.152.74) (Quit: WeeChat 3.3)
[23:45:50] <aeth> But can you 1:1 translate some common JSON into Perl?
[23:46:10] <gwatt> what are "modern expectations of scripting languages" ?
[23:46:42] <aeth> gwatt: { "foo" : [1, 2, 3, 4, 5], "bar" : [5, 10, 15, 20, 25] }
[23:46:48] <aeth> obviously, the syntax will vary
[23:47:06] <gwatt> you can, provided you don't necessarily care about string / numbers actually being disjoint
[23:47:14] <aeth> but with Perl it ime (not much) varies too much from expectations
[23:48:03] <aeth> and in Scheme, you'd probably want your implementation to have something like {foo: #(1 2 3 4 5) bar: #(5 10 15 20 25)}
[23:48:17] <aeth> that should be close-enough to the JSON-ish expectations that the modern programmer has
[23:49:10] <aeth> you could also do {foo: [1 2 3 4 5] bar: [5 10 15 20 25]} or #h(foo: #(1 2 3 4 5) bar: #(5 10 15 20 25)) etc.
[23:49:13] <gwatt> If you want your script to orchestrate a bunch of json http apis, sure. That's hardly the entirety of scripting
[23:50:05] <aeth> gwatt: no, but transferable knowledge in scripting starts with the assumption of something like that
[23:50:08] <Zipheir> To paraphrase Lena Lamont, the modern programmer is a dope.
[23:50:31] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[23:51:28] <aeth> gwatt: meanwhile Lisps, especially Schemes, usually start with esoteric linked list processing as if it's a 1980s comp sci class
[23:53:08] <Zipheir> Lists are brilliant for some uses and brilliant for prototyping when they aren't the right thing.
[23:55:01] <Zipheir> In particular, a list is the functional equivalent of a stack.
[23:55:33] <aeth> a vector also is
[23:55:43] <aeth> an adjustable one, anyway
[23:55:51] <gwatt> vectors aren't growable, at least not scheme's vectors
[23:56:16] <aeth> CL has both adjustable vectors and lists as stacks in the built-in standard library
[23:56:17] <Zipheir> If you're avoiding side-effects, a self-adjusting vector is not a good structure.
[23:56:42] <aeth> if
[23:57:06] <Zipheir> But that's in the weeds.  My point was that the O(1) left-access and O(1) "push" of lists are simply ideal for a stack type in a non-mutative style.
[23:57:45] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[23:57:57] <Zipheir> In that or a similar role, lists show up in tons of data structures (see Okasaki's book).
[23:58:47] <aeth> if you have lists, vectors (optionally adjustable), and hash tables, you can implement just about anything
[23:59:10] <aeth> (e.g. sets from hash tables)
[23:59:22] <Zipheir> Or sets from trees.
[23:59:31] <aeth> right, usually more than one
[23:59:36] <aeth> with different big-O
