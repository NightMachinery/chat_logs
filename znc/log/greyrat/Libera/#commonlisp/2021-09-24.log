[00:00:39] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:61ba:b577:79b9:2407)
[00:08:50] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 252 seconds)
[00:09:20] *** Quits: eddof13 (~textual@200.52.90.50) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:17:43] *** Parts: akoana (~ah@user/akoana) ()
[00:30:53] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[00:31:12] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Client Quit)
[00:37:26] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[00:38:56] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:39:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[00:40:16] *** Lord_of_Life_ is now known as Lord_of_Life
[00:44:22] *** Joins: nature (~nature@mail.blazebone.com)
[00:58:53] *** Quits: cosimone (~user@93-47-229-220.ip115.fastwebnet.it) (Ping timeout: 252 seconds)
[00:59:26] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[01:02:08] <Josh_2> etimmons: are the docs generated by 40ants/doc able to be hosted by a webserver like nginx straight away?
[01:04:06] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:61ba:b577:79b9:2407) (Ping timeout: 260 seconds)
[01:07:55] <etimmons> Josh_2: yep! For instance, cl-tar publishes through Gitlab pages (which is just a static webserver under the hood)
[01:08:32] <Josh_2> Okay very cool
[01:09:07] <etimmons> Any time I tag a commit in cl-tar or cl-tar-file, it triggers a new pipeline in cl-tar-site which downloads the documentation for the tag, shoves it in the correct folder, and then does the magic Gitlab pages dance to tell it there's a new set of files ready to be served
[01:10:55] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:a123:232c:fae5:3bd8)
[01:11:26] <Josh_2> cl-tar-site is a separate cl package right?
[01:14:09] <etimmons> Separate repo: <https://gitlab.common-lisp.net/cl-tar/cl-tar-site> it has some CL code in it, but I have zero plans to add it to QL since it's only used to build the project website
[01:15:17] <etimmons> It's also kind of an artifact of how c-l.net does its project pages. In order to get a site to show up under c-l.net/project/X/ using Gitlab pages, you need to use a repo named X/X-site
[01:15:19] *** Quits: amb007 (~a_bakic@236.135.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[01:16:05] *** Joins: amb007 (~a_bakic@235.39.22.93.rev.sfr.net)
[01:16:09] <Josh_2> Okay thanks
[01:16:19] <Josh_2> Guess I can get started on writing the docs for my primary project then
[01:16:59] <etimmons> Have fun and good luck :)
[01:23:14] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 260 seconds)
[01:24:26] *** Quits: jkordani (~Guest17@c-69-255-2-251.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[01:28:46] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:34:04] *** Quits: hayley (~theemacss@2001:470:69fc:105::234) (Changing host)
[01:34:04] *** Joins: hayley (~theemacss@user/hayley)
[01:34:54] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:a123:232c:fae5:3bd8) (Ping timeout: 260 seconds)
[01:35:07] *** Quits: john__ (~john@dynamic-077-009-117-135.77.9.pool.telefonica.de) (Ping timeout: 252 seconds)
[01:40:00] *** Quits: amb007 (~a_bakic@235.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[01:40:57] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:42:46] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 252 seconds)
[01:45:06] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[01:47:13] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:49:19] *** Joins: nature (~nature@mail.blazebone.com)
[02:00:04] *** Quits: pve (~pve@178-55-33-119.bb.dnainternet.fi) (Quit: leaving)
[02:16:26] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[02:26:05] *** Quits: frgo (~frgo@p200300deef0cee00a9623ade2171aa79.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:26:33] *** Joins: frgo (~frgo@p200300deef0cee00a9623ade2171aa79.dip0.t-ipconnect.de)
[02:35:33] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[02:35:52] *** Joins: robin (~robin@user/terpri)
[02:43:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:50:23] *** Joins: beach` (~user@2a01:cb19:150:3400:2a6:806:3923:229)
[02:54:19] *** Quits: beach (~user@2a01:cb19:150:3400:893d:92a4:273f:ff45) (Ping timeout: 252 seconds)
[02:57:19] *** Quits: random-nick (~random-ni@87.116.178.231) (Ping timeout: 265 seconds)
[03:07:31] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[03:08:44] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[03:16:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:24:32] *** Quits: khrbt_ (~znc@user/khrbt) (Ping timeout: 246 seconds)
[03:24:58] *** Joins: khrbt (~znc@user/khrbt)
[03:25:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:25:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[03:30:46] *** Parts: Arcsech (~user@c-98-245-9-17.hsd1.co.comcast.net) (ERC (IRC client for Emacs 28.0.50))
[03:32:10] *** Joins: dstein64- (~dstein64@dannyadam.com)
[03:35:18] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 260 seconds)
[03:35:18] *** dstein64- is now known as dstein64
[03:42:47] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 252 seconds)
[03:42:50] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:45:32] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[03:48:05] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:19:59] *** Quits: karlosz (~karlosz@47.180.55.252) (Quit: karlosz)
[04:28:12] <hayley> FWIW Bike's definition of parallel (w.r.t parallel assignment) is the undisputed definition of concurrent at least, that there are no happens-before relations that would order one before the other.
[04:28:15] <hayley> Good to see that the bridge works again.
[04:45:44] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[04:46:04] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[04:54:17] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:56:13] <hayley> Can I do anything to make the SBCL compiler do less optimization somehow? It doesn't appear that the code I generate would benefit from much more type inference, for example.
[04:59:24] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:26:22] <hayley> Huh, optimizing for (speed 0) actually affected compile time (which went from 450ms to 250ms), and the drop in execution performance isn't that bad. Somehow I don't seem to write code where it usually does much.
[05:29:29] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[05:31:23] *** Joins: sander (~sander@user/sander)
[05:31:54] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:33:05] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[05:34:52] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[05:38:56] *** Joins: karlosz (~karlosz@12.196.174.98)
[05:44:18] *** Joins: Everything (~Everythin@37.115.210.35)
[05:46:26] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[06:15:46] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[06:16:16] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:34:30] <beach`> Good morning everyone!
[06:46:52] *** beach` is now known as beach
[06:47:07] *** ChanServ sets mode: +o beach
[06:47:38] *** beach sets mode: -o beach
[06:48:06] *** nature is now known as nature2
[06:48:35] <lotuseater> Good morning beach :)
[06:48:51] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:01:03] *** Quits: jealousmonk (~user@2804:431:e7c4:4247:75cd:c27b:296a:fb0f) (Remote host closed the connection)
[07:04:47] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 265 seconds)
[07:06:51] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[07:07:34] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:08:32] *** Quits: semz (~none@user/semz) (Ping timeout: 246 seconds)
[07:13:12] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[07:21:37] *** Joins: semz (~none@user/semz)
[07:22:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:27:59] *** Quits: nature2 (~nature@mail.blazebone.com) (Ping timeout: 265 seconds)
[07:31:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[08:05:56] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[08:12:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:13:40] *** Quits: Oddity (Oddity@user/oddity) (Remote host closed the connection)
[08:31:47] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 265 seconds)
[09:06:24] <lisp123> Is there a solution to long (character count) expressions?
[09:07:04] <hayley> Don't write them?
[09:07:35] <lisp123> Usually its a trade-off between abbreviations vs. longer names, e.g. ((find (cadr function-definition) *cl-symbols* :test #'symbol-name-equalp)
[09:08:28] <lisp123> I put that into a COND as a test and now its hard to indent the body of the form since its already so long
[09:09:55] <moon-child> (find \n (cadr ...) \n *cl-symbols* \n ;test #'...)
[09:10:37] <moon-child> I tend to use short names.  But lisp does not favour them
[09:10:40] <flip214> lisp123: or make it a new function
[09:11:54] <lisp123> moon-child: Hmm that might be the best way
[09:12:12] <lisp123> It leads to a lot of whitespace, but I'll experiment to see how it reads
[09:12:35] <lisp123> flip214: Yes, perhaps I should use anaphoric macros (seems a bit too much to define a wrapper around find)
[09:15:17] <lisp123> moon-child: Thanks, so what seems to look good is (find ....
[09:15:35] <lisp123> \n :test ) --> Since the test is optional, it flows better having that on a new line
[09:15:49] <beach> lisp123: Please don't use anaphoric macros.  They tend to violate the rules of page 13 of the LUV slides.
[09:17:10] <lisp123> beach: Got it. Thanks
[09:17:41] <beach> The best solution is to have lots of small functions, and occasional macros, so that the total code size is still limited.
[09:18:46] <lisp123> The trade off I am having with small functions is that one has to make an extra step to read what they do, whereas writing in terms of the standard function "inlines" it
[09:19:57] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:20:46] <lisp123> In this case, I think it might be a good idea, (defun IS-CL-SYMBOL (sym)), so I will do that -> But I used to have a lot of smaller functions and it felt like I was going through 5 functions to get to the final code
[09:23:07] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[09:24:29] <flip214> lisp123: right. but these additional small functions are a kind of documentation - one that (hopefully) better reflects what happens than comments that are outdated
[09:28:21] <lisp123> As in adding doc strings to these functions vs. writing comments? That sounds interesting
[09:28:40] <lisp123> (have to go afk for bit - thanks all)
[09:30:40] <flip214> lisp123: yes. Small function tend to not change so much, so the docstrings stay current... they might not be used anymore, but that you can find out via xrefs and then delete them.
[09:33:15] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[09:35:09] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[09:35:46] *** Quits: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[09:38:08] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:40:43] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[09:43:08] *** Joins: shka (~herr@109.231.62.239)
[09:47:32] *** Quits: cognemo (~cognemo@cpe-46-164-17-185.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:48:18] *** Joins: cognemo (~cognemo@cpe-46-164-17-185.dynamic.amis.net)
[10:11:39] <beach> lisp123: I agree with flip214.  Small functions with relevant long names are self documenting, so they save effort to understand.
[10:12:42] <beach> Plus, if those small functions reflect useful abstractions, they can be reused in several places.
[10:20:26] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[10:21:18] *** Joins: amb007 (~a_bakic@235.39.22.93.rev.sfr.net)
[10:21:40] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[10:23:54] *** Joins: john__ (~john@dynamic-077-002-034-127.77.2.pool.telefonica.de)
[10:28:56] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[10:32:25] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[10:46:44] *** Joins: pve (~pve@178-55-155-251.bb.dnainternet.fi)
[10:48:10] <lisp123> Thanks flip214 & beach, I will try that approach now
[10:54:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[10:55:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:05:04] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Quit: Leaving...)
[11:12:15] *** Quits: amb007 (~a_bakic@235.39.22.93.rev.sfr.net) (Ping timeout: 265 seconds)
[11:14:02] *** Joins: amb007 (~a_bakic@76.15.23.93.rev.sfr.net)
[11:20:23] *** Quits: john__ (~john@dynamic-077-002-034-127.77.2.pool.telefonica.de) (Ping timeout: 252 seconds)
[11:24:43] <pjb> saturn2: strings in python are actuall utf-8 octet sequences…
[11:24:52] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[11:24:53] <pjb> saturn2: strings in CL are real vectors of characters.
[11:25:47] *** Quits: amb007 (~a_bakic@76.15.23.93.rev.sfr.net) (Ping timeout: 265 seconds)
[11:25:54] <pjb> saturn2: as I said, if you want the performance of C (or python), then do what C (or python) does.  Don't parse and convert octet sequences into strings. Process the octets directly.
[11:26:25] *** Joins: amb007 (~a_bakic@101.135.22.93.rev.sfr.net)
[11:26:59] <saturn2> i see
[11:27:30] <lotuseater> pjb: i hope you mean numpy ^^
[11:29:00] <pjb> or indeed, you may also just ffi out to the same libraries :-)
[11:33:03] *** Quits: amb007 (~a_bakic@101.135.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:33:31] *** Joins: amb007 (~a_bakic@101.135.22.93.rev.sfr.net)
[11:33:31] *** Quits: amb007 (~a_bakic@101.135.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:33:56] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:34:53] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:35:19] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:37:07] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:38:51] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:46:09] <lisp123> Thoughts of using newlines to break up code blocks? e.g. https://plaster.tymoon.eu/view/2643#2643
[11:46:17] <lisp123> s/of/on
[11:46:57] <jackdaniel> the progn is silly itself
[11:47:07] <moon-child> lisp123: it is not normally done
[11:47:08] <jackdaniel> and blank lines bring nothing except of noise
[11:47:36] <jackdaniel> if you have long blocks of code you want to "separate" you probably should think about defining a function (i.e in flet, or toplevel)
[11:48:18] <lisp123> jackdaniel: Thanks, the progn was a leftover from a previous code, so I will adjust that. Here I need to keep the parts together due to lexical scoping
[11:48:40] <jackdaniel> your indentation is all bad too
[11:48:51] <lisp123> That was plaster
[11:49:17] * jackdaniel shrugs and gets back to other things
[11:49:17] <lisp123> Ok, looks like the consensus is no line breaks
[11:49:49] *** Joins: X-Scale` (~ARM@31.22.200.105)
[11:49:55] <moon-child> lisp123: (list ',name is not aligned with (vector-to-list
[11:49:55] <jackdaniel> using spaces instead of tabs seems to be a consensus since 2010 or so ,)
[11:50:26] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[11:50:43] <lisp123> moon-child: Yeah, ignore the indenting :) Question was on line breaks (obviously indenting I can do ;)
[11:51:34] *** X-Scale` is now known as X-Scale
[11:52:46] <pjb> lisp123: you can factorize locally; using flet/labels and macrolet, you can design a local mini-dsl that allows you to express your function code more concisely.
[11:53:50] <pjb> lisp123: (flet ((find-function-name (function-definition) (find (cadr function-definition) *cl-symbols* :test #'symbol-name-equalp)))  … (cond ((find-function-name function-definition) …)) …)
[11:54:05] <pjb> lisp123: you can't deny that ((find-function-name function-definition) …) is clearer and shorter than  (find (cadr function-definition) *cl-symbols* :test #'symbol-name-equalp)
[11:54:11] <pjb> lisp123: what's this meaningless cadr???
[11:54:24] <pjb> lisp123: have you seen my mention of defstruct :type list?
[11:54:36] <lisp123> pjb: I agree, so I am redoing that part
[11:54:40] <lisp123> Into smaller functions
[11:54:48] <lisp123> No I haven't
[11:55:10] <pjb> lisp123: similarly, you can use LET to give short aliases locally.
[11:55:38] <lisp123> Yes :)
[11:56:05] <lotuseater> or if needful with symbol-macrolet too
[11:56:34] <lotuseater> is this what others call "private state"? ^^
[11:56:50] <pjb> (let ((v (velocity thrown-weapon)) (dt (game-time-step game)) (x (player-position player)))    (+ x (* v dt)))  instead of  (+ (player-position player) (*   (velocity thrown-weapon) (game-time-step game)))
[11:57:09] <pjb> ie what you've been doing for more than ten years in your physics courses!!!
[11:57:46] <pjb> write down the formula (+ x (* v dt)), then assign the value (describe what each variable is), the compute the result.
[11:58:08] <lotuseater> oh pjb, so when you play DOOM or such you fight the demons by throwing the weapons rather than shooting? ^^
[11:58:12] <pjb> Note that there are with-slots and with-accessors to deal with length accessor names too.
[11:58:22] <jackdaniel> (setf v (/ d t)) ; oops, can't bind t :)
[11:58:43] <pjb> lotuseater: when you're out of munitions.
[11:59:12] <moon-child> some-random-package:t
[11:59:13] *** Joins: treflip (~user@95.79.32.99)
[11:59:17] <lotuseater> then the game provides me one free using the chainsaw :P
[11:59:23] <jackdaniel> (cl:setf v (/ d t))
[11:59:31] <pjb> jackdaniel: 𝗍 or 𝚝 for example.
[11:59:58] <lotuseater> (symbol-macrolet ((d/dt (/ d dt))) ...) okay not really :D
[12:00:19] <pjb> or (shadow t) (let ((t 24)) (cond ((< t 42) 'ok) (cl:t 'ko)))
[12:00:47] <lotuseater> oh I remember some funny situations when classmates had expressions like log(10)/log(2) and they "canceled" it to 10/2 = 5 ...
[12:01:12] <hayley> "Yeah, this is big brain time"
[12:01:44] <jackdaniel> sin x = n ;; six = 1 ;; math is incomplete
[12:02:11] <pve> lisp123: instead of using blank lines, why don't you separate stuff with cute comments instead ;)
[12:02:26] <hayley> where x ≠ 0
[12:02:28] * hayley docks marks from jackdaniel
[12:02:28] <lotuseater> pjb: most times when i translated some algorithm from TAoCP and Knuth uses t i used c for that instead if it was free. also when parameters are in small and big form like n and N, so I used %N for the big one
[12:02:36] <moon-child> ;; this comment intentionally left blank
[12:02:43] <lotuseater> hayley: indeed very big
[12:02:50] <lisp123> pve & moon-child: Don't give me any ideas ;) :D
[12:03:04] <lotuseater> jackdaniel: okay that got me laughing now
[12:03:08] <pve> moon-child: not what I had in mind, but I'll allow it :)
[12:03:55] <lotuseater> pve: like "this is a really interesting comment"? lines that speak about themselves
[12:03:59] <pjb> lotuseater: do you know HAL/S?
[12:04:08] <lotuseater> pjb: yes and no
[12:04:13] <pjb> https://en.wikipedia.org/wiki/HAL/S
[12:04:22] <lotuseater> it's the assembler for the guidance computer of apollo
[12:04:50] <pjb> the idea is to use a DSL that allows you to transcribe maths and physics formalae as-is to avoid errors, and let the DSL make the formula translation.
[12:05:07] <pjb> They did that with HAL/S for the Shuttle software.
[12:05:13] <lotuseater> some years ago NASA hired again people who have knowledge of special assemblers
[12:05:34] <pjb> lotuseater: if there's n and N, I'd use a reader macro to activate a case sensitive mode and write down the formula as-is.
[12:05:38] <lotuseater> that's very cool and interesting to me :) thanks
[12:05:45] <pve> lotuseater: Well, I was actually being half-serious. Like if you need to separate code blocks, at least explain why.
[12:06:18] <lotuseater> or some comment like "You seriously read our comments?"
[12:07:12] <lotuseater> pjb: with interesting I surely meant the HAL/S thing
[12:11:50] <pjb> lotuseater: a reader macros can also let you input 2D code like HAL/S
[12:12:14] <pjb> I don't remember, I may have done a POC a few decades ago…
[12:12:18] <lotuseater> yes I thought now from reading the examples that a programmable reader comes in well for that
[12:12:57] <lotuseater> i could set it on my list of my potential experimentation projects
[12:14:41] <pjb> another related funny thing, is that in early computer vision, they used a parser to analyse 2D pictures of 3D scenes, and construct the 3D objects seen.
[12:14:49] <lotuseater> and i bet you have :)
[12:15:21] <lotuseater> sounds exhausting
[12:15:56] <pjb> IIRC, there's an emacs equation editor that let you edit (or at least generate) an ASCII art representation of equations.  We'd just need to be able to parse them back.
[12:16:34] <pjb> HAL/S is quite restricted, it just deals with exponents and subscripts (but with several levels, you can write x_k_i^a^b
[12:16:44] <lotuseater> stylewarn⍳ng has such a repo, i like what comes out
[12:17:06] <pjb> E      b
[12:17:06] <pjb> E     a
[12:17:06] <pjb> B  x
[12:17:06] <pjb> S   k
[12:17:06] <pjb> S    i
[12:17:49] <pjb> would read as (expt (expt (aref x (aref k i)) a) b)
[12:18:22] <lotuseater> i think it must be restrictive, for safety is highest priority and efficiency hopefully the second. and ok, the guidance computer also had few resources
[12:19:26] <lotuseater> wouldn't also be trivial parsing 2D svg math expressions made by TeX
[12:30:38] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[12:46:49] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:48:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:48:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:53:31] *** Joins: notzmv (~zmv@user/notzmv)
[12:55:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[12:58:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:05:20] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[13:17:03] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (Quit: !)
[13:20:32] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[13:21:01] *** Joins: srhm (~srhm@user/srhm)
[13:21:37] *** Joins: moon-child (~moon-chil@cardinal.elronnd.net)
[13:35:21] <mfiano> Is the only difference between #'symbol-function and #'fdefinition that the latter is more general in that it also works with '(setf name)? If so, is there any use for the former?
[13:37:03] * mfiano has always used fdefinition. Not sure what symbol-function can do that it can't
[13:39:42] *** Joins: rain3 (~rain3___@2a02:2f09:d100:8700:1ae4:6be9:2a58:7de6)
[13:43:15] <mfiano> Ah I suppose symbol-function works for functions not bound in the global environment.
[13:45:38] *** Joins: cosimone (~user@93-47-228-91.ip115.fastwebnet.it)
[13:45:54] *** Joins: random-nick (~random-ni@87.116.178.231)
[13:46:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[13:46:53] <Xach> how could it?
[13:47:13] <mfiano> Yes, I was wrong. I would have to use FUNCTION for that
[13:50:22] <mfiano> So it seems fdefinition can be used in place of symbol-function everywhere
[13:57:03] <pjb> lotuseater: it would be dangerous to try to parse svg, if you expect a certain form of svg (eg. as generated  by TeX), because other svg could be parsed giving one expression, but rendered showing another expression.
[13:57:27] <pjb> lotuseater: you'd want to analyze the pixel image instead.
[13:57:40] <pjb> (post-rendering)
[14:17:43] *** Joins: selwyn (~selwyn@user/selwyn)
[14:17:59] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[14:18:24] *** Joins: selwyn (~selwyn@user/selwyn)
[14:18:44] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:18:55] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:22:48] <lotuseater> okay yes i wasn't explicit enough
[14:23:25] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[14:23:48] *** Joins: amb007 (~a_bakic@85.135.22.93.rev.sfr.net)
[14:25:06] *** Quits: frgo (~frgo@p200300deef0cee00a9623ade2171aa79.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:25:37] *** Joins: frgo (~frgo@p200300deef0cee00a1e1a53ca91ae2c8.dip0.t-ipconnect.de)
[14:29:03] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:38:59] *** Quits: amb007 (~a_bakic@85.135.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:40:39] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:49:10] *** Joins: selwyn (~selwyn@user/selwyn)
[14:49:56] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[14:50:20] *** Joins: selwyn (~selwyn@user/selwyn)
[14:53:13] <jackdaniel> mfiano: basically fdefinition was introduced /after/ cltl2 to allow accessing functions like (setf foo), symbol-function was left for backward-compatibility
[14:53:44] <jackdaniel> (afair)
[15:00:22] *** Quits: cosimone (~user@93-47-228-91.ip115.fastwebnet.it) (Ping timeout: 260 seconds)
[15:01:31] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[15:02:14] *** Quits: rain3 (~rain3___@2a02:2f09:d100:8700:1ae4:6be9:2a58:7de6) (Ping timeout: 260 seconds)
[15:04:48] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:05:10] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:06:19] *** Quits: pve (~pve@178-55-155-251.bb.dnainternet.fi) (Ping timeout: 252 seconds)
[15:16:11] *** Joins: pve (~pve@87-93-185-174.bb.dnainternet.fi)
[15:19:06] *** Joins: Lycurgus (~juan@98.4.112.204)
[15:26:44] *** Quits: treflip (~user@95.79.32.99) (Quit: ERC (IRC client for Emacs 27.2))
[15:28:35] <mfiano> You mean CLtL1
[15:32:22] <scymtym> http://www.lispworks.com/documentation/HyperSpec/Issues/iss174_w.htm
[15:34:59] <mfiano> Yes that is what I read. Voted and passed just before CLtL2
[15:36:51] *** Quits: dre (~dre@2001:8003:c932:c301:a33d:f011:dc0c:a672) (Remote host closed the connection)
[15:45:04] *** Joins: Bike (~Glossina@71.69.170.70)
[15:45:04] *** ChanServ sets mode: +o Bike
[15:50:20] *** ChanServ sets mode: -o Bike
[15:56:59] <jackdaniel> indeed, it is already present in cltl2 (being nitpicky as I am - what I've _meant_ was CLtL2 because I've remembered wrong) ; thanks for correction
[16:00:09] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[16:00:15] *** Joins: rain3 (~rain3___@2a02:2f09:d100:8700:1ae4:6be9:2a58:7de6)
[16:23:14] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:c447:6440:aae4:7a3e)
[16:23:57] *** Joins: Josh_2 (~user@37.25.47.130)
[16:29:02] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 260 seconds)
[16:31:08] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[16:32:34] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[16:33:25] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[16:34:22] <pve> I'm having great fun writing cute reader hacks with eclector, but are there any reader hacks that would be genuinely useful?
[16:34:44] <pve> I understand it's not the main point of eclector, but it just makes it so convenient.
[16:35:14] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[16:41:39] *** Joins: tyson2 (~user@70.31.33.162)
[16:47:49] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:59:40] *** Quits: rain3 (~rain3___@2a02:2f09:d100:8700:1ae4:6be9:2a58:7de6) (Ping timeout: 252 seconds)
[17:00:44] *** Joins: jealousmonk (~user@2804:431:e7c4:4247:75cd:c27b:296a:fb0f)
[17:06:38] *** Joins: cosimone (~user@93-47-228-91.ip115.fastwebnet.it)
[17:17:27] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[17:17:56] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[17:18:09] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[17:23:04] *** Joins: Josh_2 (~user@37.25.47.130)
[17:26:30] <Josh_2> Hey
[17:26:41] <Josh_2> If I want to catch all conditions should I use condition or error?
[17:27:59] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[17:28:19] <jackdaniel> Josh_2: all conditions including style-warning and such?
[17:28:23] <Bike> does that question not answer itself? what are you concerned about?
[17:28:28] <Josh_2> Well
[17:28:57] <Josh_2> I was originally using condition and then pjb mentioned something about how I should use error or serious-condition etc and so I swapped to error
[17:29:02] <beach> pve: We use it to read comments and other skipped material in the editor.
[17:29:04] <Josh_2> needless to say it doesn't work properly now
[17:29:39] <jackdaniel> serious-condition along with errors should catch as well timeouts and storage exhaustion conditions
[17:29:45] <beach> pve: And it is also used to avoid interning symbols arbitrarily, and to avoid errors due to package prefixes of packages that don't exist.
[17:29:48] <jackdaniel> (and other inheriting from it)
[17:30:08] <Bike> Josh_2: well, the question is what exactly you are doing
[17:30:23] <Bike> but most of the time you don't want to handle everything, like jackdaniel said
[17:30:38] <Josh_2> well currently I keep getting an problem where I'm running out of fd's because I have a background thread that is supposed to catch all errors
[17:31:06] <beach> Josh_2: But "all errors" is very different from "all conditions".
[17:31:17] <Josh_2> sure
[17:31:56] <Josh_2> WHy isn't storage condition a subclass of error :angry:
[17:32:15] <Josh_2> that is probably what is causing this, I'll just swap to serious-condition rather than error, that'll probably fix it
[17:32:42] <hayley> A storage-condition is also signalled when you run out of memory.
[17:32:53] <Josh_2> Sounds serious to me
[17:33:03] <Josh_2> I'll try it and see
[17:33:07] <hayley> Do you think any ole error handler will work if you run out of memory?
[17:33:35] <Bike> i don't understand how what fd exhaustion has to do with handling errors
[17:33:44] <Bike> do you open a new fd for everything you handle and then never close it?
[17:35:59] <Josh_2> Bike: What I assume is happening is a condition is sneaking passed my handler-case and causing and its being handled by a restart much higher up, this restart tries to get it to reconnect to the server, this is then done thousands of times and bang broke
[17:36:21] <Josh_2> or the restart isn't happening and its just trying to make thousands of connections which achieves the same thing
[17:37:57] <Josh_2> I've swapped to serious-condition now, hopefully that'll sort it out
[17:38:24] <pve> beach: thanks, those sound totally necessary, more than just useful
[17:38:38] <pve> or I mean nice to have
[17:42:31] <beach> pve: Absolutely.  I designed the embryonic version (as the SICL reader) in order to use it to parse Common Lisp code in Second Climacs buffers, but then scymtym took over and made it as great as it is today.
[17:42:34] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:44:55] <Josh_2> etimmons: I've been playing with 40ants/doc, its very nice.
[17:45:39] <Josh_2> Although I have found the (<name> (method ..)) form to be exceptionally annoying
[17:57:50] <etimmons> Josh_2: the method locative in particular? What about it?
[17:58:03] *** Joins: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com)
[17:58:23] <Josh_2> Yes the method locative, I just find it to be exceptionally finicky, although I should probably put that down to inexperience more than anything
[17:58:43] <Josh_2> I would copy the examples for say a method like (on-save (method () t)) and I would get an error saying that this method cannot be found
[17:58:58] <Josh_2> despite on-save taking a single argument and being exported
[18:01:49] *** Quits: raeda (~raeda@72.49.219.33) (Read error: Connection reset by peer)
[18:01:49] *** Joins: raeda_ (~raeda@72.49.219.33)
[18:01:59] <etimmons> Huh. It should be (t) instead of t, but maybe that's a transcription error
[18:02:25] <etimmons> And does on-save specialize on t? Or some class?
[18:04:52] *** Quits: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[18:05:42] *** Quits: xsperry (~as@user/xsperry) ()
[18:08:34] <etimmons> Xach: I'd love to have a gray stream extension to salza2 that mirrors chipz's make-decompressing-stream. Is that something you'd like to see added to salza2 or should I make a new project to wrap it?
[18:10:56] <Xach> etimmons: hmm, i think that would be fine in salza2 - using trivial-gray-streams or similar?
[18:11:10] <etimmons> Exactly
[18:11:25] <Xach> if you update the code and docs i would merge something like that.
[18:11:50] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:12:15] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:13:18] <etimmons> Awesome! :)
[18:18:23] *** Joins: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com)
[18:27:14] *** Joins: Guest1788 (~Guest17@c-69-255-2-251.hsd1.md.comcast.net)
[18:27:24] *** Guest1788 is now known as jkordani
[18:30:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:32:22] *** Quits: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[18:32:43] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:35:32] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[18:36:19] *** Joins: nature2 (~nature@mail.blazebone.com)
[18:37:42] *** Joins: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com)
[18:39:20] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[18:40:00] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:c447:6440:aae4:7a3e) (Remote host closed the connection)
[18:53:12] *** Quits: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[18:53:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:54:22] *** Joins: eddof13 (~textual@187.213.150.124)
[18:54:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:54:41] *** Joins: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com)
[18:55:29] *** Quits: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com) (Client Quit)
[18:56:44] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 265 seconds)
[18:57:11] *** Joins: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com)
[18:59:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[19:00:00] *** Quits: Fade (fade@outrider.deepsky.com) (Quit: leaving)
[19:01:29] *** Joins: fade (fade@outrider.deepsky.com)
[19:01:50] *** fade is now known as Fade
[19:03:32] *** Joins: prxq (~quassel@x4dbd3860.dyn.telefonica.de)
[19:09:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:13:38] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:dd05:5816:a203:9234)
[19:31:31] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[20:08:30] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 260 seconds)
[20:09:41] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:14:47] *** Quits: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[20:16:38] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[20:17:49] *** Joins: amb007 (~a_bakic@117.135.22.93.rev.sfr.net)
[20:32:18] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[20:32:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[20:33:42] *** Joins: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com)
[20:41:56] *** Quits: amb007 (~a_bakic@117.135.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[20:42:23] *** Joins: amb007 (~a_bakic@186.133.22.93.rev.sfr.net)
[20:44:19] *** Quits: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[20:51:17] *** Quits: amb007 (~a_bakic@186.133.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[20:52:19] *** Joins: amb007 (~a_bakic@142.37.22.93.rev.sfr.net)
[20:55:31] *** Joins: tfeb (~tfb@88.98.95.237)
[20:55:45] *** Joins: hhdave (~hhdave@ip168.ip-178-32-56.eu)
[21:03:26] *** Quits: hhdave (~hhdave@ip168.ip-178-32-56.eu) (Ping timeout: 260 seconds)
[21:04:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:04:11] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[21:12:12] *** Joins: rain3 (~rain3___@86.127.200.187)
[21:12:51] *** Joins: Aksej (~Aksej@picard.host.weltraumschlangen.de)
[21:17:06] *** Joins: john__ (~john@dynamic-077-002-034-127.77.2.pool.telefonica.de)
[21:19:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:25:49] *** Quits: amb007 (~a_bakic@142.37.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:28:03] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:40:01] *** Joins: akoana (~ah@user/akoana)
[21:40:30] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.2.1)
[21:40:45] *** Joins: mariari (~mariari@user/mariari)
[21:49:43] *** nature2 is now known as nature_
[21:53:39] *** Quits: eddof13 (~textual@187.213.150.124) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:58:17] *** Quits: Fade (fade@outrider.deepsky.com) (Remote host closed the connection)
[22:12:21] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (Quit: leaving)
[22:19:43] *** Quits: cosimone (~user@93-47-228-91.ip115.fastwebnet.it) (Ping timeout: 252 seconds)
[22:33:28] *** Quits: rain3 (~rain3___@86.127.200.187) (Ping timeout: 252 seconds)
[22:38:26] *** Joins: Fade (fade@outrider.deepsky.com)
[22:46:23] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502)
[22:47:47] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[22:54:02] *** Joins: selwyn (~selwyn@user/selwyn)
[23:04:01] <etimmons> salt rock lamp: I promised you a link to my work in progress on libgit2. Sorry it took so long: <https://gitlab.common-lisp.net/etimmons/cl-libgit2>
[23:04:41] <etimmons> salt rock lamp: The lispified wrappers are very much in the experimentation phase, so I can't really recommend using it.
[23:05:50] <jcowan> The modern view seems to mean that "parallel" does mean" "at the same time", in which case let-bindings are better described as concurrent.  This view goes back to at least 1968.
[23:06:51] <White_Flame> I always think in terms of dataflow parallelism, not timing parallelism
[23:07:12] <White_Flame> I guess I'm not modern
[23:08:26] <jcowan> Throwing up and catching two balls with two hands is a parallel operation.  Juggling three balls with two hands is a concurrent operation.
[23:08:50] *** Quits: tyson2 (~user@70.31.33.162) (Quit: ERC (IRC client for Emacs 27.2))
[23:09:09] <jcowan> s/"at the same time"/"using more than one execution unit simultaneously"/
[23:11:59] *** Joins: didi (~user@user/didi)
[23:16:53] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[23:17:11] *** Joins: khrbt (~znc@user/khrbt)
[23:21:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:26:27] <pjb> Josh_2: if you get storage-condition, and know what to do about them (eg. free some memory), then catch it. Explicitely, and precisely it.  But don't catch other non-error conditions  that you don't know, and that other parts of the system may rely catching.
[23:27:02] <pjb> Josh_2: catch storage-condition with handler-bind, it makes no sense catching it with handler-case…
[23:37:50] *** john__ is now known as gaqwas
