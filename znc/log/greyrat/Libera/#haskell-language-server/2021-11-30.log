[00:40:56] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[00:49:41] *** Quits: arrowd (~arr@2.93.55.66) ()
[00:56:11] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[01:10:14] *** Quits: juhp (~juhp@128.106.188.82) (*.net *.split)
[01:10:14] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (*.net *.split)
[01:10:15] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[01:10:17] *** Quits: mpickering (sid78412@id-78412.hampstead.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: idnar (sid12240@debian/mithrandi) (*.net *.split)
[01:10:18] *** Quits: pepeiborra (sid443799@ilkley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: agander_m (sid407952@tinside.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: alinab (sid468903@helmsley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: maerwald (~maerwald@user/maerwald) (*.net *.split)
[01:10:18] *** Quits: drlkf (~drlkf@2001:41d0:a:62bb::1) (*.net *.split)
[01:10:18] *** Quits: ts2 (~ts@46.101.20.9) (*.net *.split)
[01:10:18] *** Quits: sshine_ (~simon@hubris.eta.solutions) (*.net *.split)
[01:10:19] *** Quits: nh2[m] (~nh2matrix@2001:470:69fc:105::3ae7) (*.net *.split)
[01:10:19] *** Quits: kosmikus (~kosmikus@nullzig.kosmikus.org) (*.net *.split)
[01:10:19] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (*.net *.split)
[01:10:19] *** Quits: PotatoHatsue (~berberman@2001:470:69fc:105::b488) (*.net *.split)
[01:10:19] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (*.net *.split)
[01:10:19] *** Quits: dxld[m] (~dxldit-sy@2001:470:69fc:105::978) (*.net *.split)
[01:10:21] *** Quits: berberman (~berberman@user/berberman) (*.net *.split)
[01:10:21] *** Quits: sm (~sm@plaintextaccounting/sm) (*.net *.split)
[01:10:21] *** Quits: jiribenes (~jiribenes@rosa.jiribenes.com) (*.net *.split)
[01:10:21] *** Quits: alp (~alp@mail.fmap.fr) (*.net *.split)
[01:10:21] *** Quits: guibou (~guibou@mail.fmap.fr) (*.net *.split)
[01:10:22] *** Quits: Philonous (~Philonous@user/philonous) (*.net *.split)
[01:10:22] *** Quits: expipiplus1 (~expipiplu@2001:470:69fc:105::d713) (*.net *.split)
[01:10:23] *** Quits: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com) (*.net *.split)
[01:10:23] *** Quits: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec) (*.net *.split)
[01:10:23] *** Quits: michaelpj[m] (~michaelpj@2001:470:69fc:105::86e) (*.net *.split)
[01:10:23] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (*.net *.split)
[01:10:24] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (*.net *.split)
[01:10:24] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (*.net *.split)
[01:10:25] *** Quits: rune (sid21167@id-21167.ilkley.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[01:10:25] *** Quits: eddiemundo (~eddiemund@2001:470:69fc:105::a80) (*.net *.split)
[01:10:25] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (*.net *.split)
[01:10:26] *** Quits: w1gz (~do@159.89.11.133) (*.net *.split)
[01:10:27] *** Quits: hpd_ (~hpdhpdeif@2001:470:69fc:105::230) (*.net *.split)
[01:10:27] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (*.net *.split)
[01:10:27] *** Quits: teto[m] (~keiichima@2001:470:69fc:105::3a35) (*.net *.split)
[01:10:27] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (*.net *.split)
[01:10:28] *** Quits: jade (jade@lfcode.ca) (*.net *.split)
[01:10:29] *** Quits: elonsroadster[m] (~elonsroad@2001:470:69fc:105::d121) (*.net *.split)
[01:10:29] *** Quits: anton-latukha[m] (~anton-lat@2001:470:69fc:105::fe99) (*.net *.split)
[01:10:30] *** Quits: hololeap (~hololeap@user/hololeap) (*.net *.split)
[01:14:15] *** Joins: hololeap (~hololeap@user/hololeap)
[01:14:15] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[01:14:15] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[01:14:15] *** Joins: juhp (~juhp@128.106.188.82)
[01:14:15] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[01:14:15] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[01:14:15] *** Joins: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com)
[01:14:15] *** Joins: rune (sid21167@id-21167.ilkley.irccloud.com)
[01:14:15] *** Joins: mpickering (sid78412@id-78412.hampstead.irccloud.com)
[01:14:15] *** Joins: ts2 (~ts@46.101.20.9)
[01:14:15] *** Joins: sshine_ (~simon@hubris.eta.solutions)
[01:14:15] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[01:14:15] *** Joins: idnar (sid12240@debian/mithrandi)
[01:14:15] *** Joins: elonsroadster[m] (~elonsroad@2001:470:69fc:105::d121)
[01:14:15] *** Joins: michaelpj[m] (~michaelpj@2001:470:69fc:105::86e)
[01:14:15] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[01:14:15] *** Joins: PotatoHatsue (~berberman@2001:470:69fc:105::b488)
[01:14:15] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[01:14:15] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[01:14:15] *** Joins: hpd_ (~hpdhpdeif@2001:470:69fc:105::230)
[01:14:15] *** Joins: sm (~sm@plaintextaccounting/sm)
[01:14:15] *** Joins: nh2[m] (~nh2matrix@2001:470:69fc:105::3ae7)
[01:14:15] *** Joins: Philonous (~Philonous@user/philonous)
[01:14:15] *** Joins: pepeiborra (sid443799@ilkley.irccloud.com)
[01:14:15] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[01:14:15] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[01:14:15] *** Joins: alinab (sid468903@helmsley.irccloud.com)
[01:14:15] *** Joins: maerwald (~maerwald@user/maerwald)
[01:14:15] *** Joins: drlkf (~drlkf@2001:41d0:a:62bb::1)
[01:14:15] *** Joins: kosmikus (~kosmikus@nullzig.kosmikus.org)
[01:14:15] *** Joins: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec)
[01:14:15] *** Joins: berberman (~berberman@user/berberman)
[01:14:15] *** Joins: teto[m] (~keiichima@2001:470:69fc:105::3a35)
[01:14:15] *** Joins: eddiemundo (~eddiemund@2001:470:69fc:105::a80)
[01:14:15] *** Joins: anton-latukha[m] (~anton-lat@2001:470:69fc:105::fe99)
[01:14:15] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[01:14:15] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[01:14:15] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[01:14:15] *** Joins: dxld[m] (~dxldit-sy@2001:470:69fc:105::978)
[01:14:15] *** Joins: expipiplus1 (~expipiplu@2001:470:69fc:105::d713)
[01:14:15] *** Joins: jade (jade@lfcode.ca)
[01:14:15] *** Joins: w1gz (~do@159.89.11.133)
[01:14:15] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[01:14:15] *** Joins: guibou (~guibou@mail.fmap.fr)
[01:14:15] *** Joins: alp (~alp@mail.fmap.fr)
[01:14:15] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[03:34:45] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[03:39:23] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Ping timeout: 252 seconds)
[03:56:08] *** Joins: libertyprime (~libertypr@125.70.69.111.dynamic.snap.net.nz)
[04:03:52] *** Quits: libertyprime (~libertypr@125.70.69.111.dynamic.snap.net.nz) (Ping timeout: 264 seconds)
[04:49:03] *** Joins: hololeap (~hololeap@user/hololeap)
[04:58:16] *** Joins: libertyprime (~libertypr@203.211.73.21)
[05:17:04] *** Quits: libertyprime (~libertypr@203.211.73.21) (Ping timeout: 264 seconds)
[06:33:34] *** Joins: libertyprime (~libertypr@203.96.201.69)
[07:06:00] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[07:06:00] *** Joins: hololeap_ (~hololeap@user/hololeap)
[07:11:38] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:12:50] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[08:44:04] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[10:10:28] *** Quits: libertyprime (~libertypr@203.96.201.69) (Ping timeout: 264 seconds)
[10:32:01] *** Joins: libertyprime (~libertypr@151.210.172.92)
[11:43:21] *** Joins: arrowd (~arr@2.93.55.66)
[12:31:14] *** Quits: libertyprime (~libertypr@151.210.172.92) (Ping timeout: 252 seconds)
[12:45:59] *** Joins: libertyprime (~libertypr@151.210.172.92)
[12:50:58] *** Joins: boxscape (~boxscape@user/boxscape)
[12:58:21] *** Quits: libertyprime (~libertypr@151.210.172.92) (Quit: leaving)
[13:37:48] *** Joins: libertyprime (~libertypr@203.211.73.21)
[14:00:05] *** Joins: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at)
[14:21:59] *** Quits: libertyprime (~libertypr@203.211.73.21) (Ping timeout: 256 seconds)
[14:58:04] *** Joins: libertyprime (~libertypr@203.211.73.21)
[16:14:49] *** Quits: libertyprime (~libertypr@203.211.73.21) (Quit: leaving)
[17:07:14] <anton-latukha[m]> +====... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/faa3c23523d9a47ce57440f1d1cc0b5720354ab1)
[17:10:32] <anton-latukha[m]> Basically doing the `test.yml` matrix but only with `cabal --dependencies-only` would ensure the build passes easily & dependencies get cached regularly.
[17:13:03] <jneira[m]> hmm i think maybe only separating the main job between build and test could work
[17:13:23] <jneira[m]> the cache will be saved on a succesful build
[17:14:11] <jneira[m]> cacheis only should be invalidated if pr changes the build files btw
[17:17:00] <anton-latukha[m]> Caching is mainly happening for dependencies.
[17:17:00] <anton-latukha[m]> Project rebuild on top of them is the other thing.
[17:17:00] <anton-latukha[m]> Does PR successfully builds its Haskell code - is unrelated to building dependencies.
[17:18:23] <jneira[m]> oh yeah, so the extracted job could only build deps
[17:19:30] <anton-latukha[m]> Or, yes - you are right - the building of dependencies can be a stage in the CI pipeline, that is basically what I propose but done in an easy way first.
[17:29:00] <jneira[m]> üëç
[17:29:05] <anton-latukha[m]> That any failure in CI build - aborts the caching completely - is the culprit here. Since Cabal builts deps from sources & stores them - the main agenda of caching in Cabal - is to keep relevant Cabal store freshly built & so the success of to do cache of dependencies or not - would depend only on return code are dependencies built successfully or not.
[17:29:05] <anton-latukha[m]> The plus of doing it as a separate scheduled workflow - is that it can work runs only centrally for the main branch & share everything through the key, & PRs do not run it & only reuse the fresh cache, & cache that is protected from bleeding-in & invalidate the cache for everyone if someone does `.cabal` changes inside the PR which passes succesfuly but not yet merged into main branch.
[17:29:56] <anton-latukha[m]> s/can/run/, s/work runs//
[17:30:26] <anton-latukha[m]> s/The plus of doing it as a separate scheduled workflow - is that it can work runs only centrally for the main branch & share everything through the key, & PRs do not run it & only reuse the fresh cache, & cache that is protected from bleeding-in & invalidate the cache for everyone if someone does `.cabal` changes inside the PR which passes succesfuly but not yet merged into main branch./The plus of doing it as a
[17:30:27] <anton-latukha[m]> separate scheduled workflow - is that it run only centrally for the main branch & share everything through the key, & PRs do not run it & only reuse the fresh cache, & cache gets protected from bleeding-in & invalidation of the cache for everyone if someone does `.cabal` changes inside the PR which passes succesfuly but not yet merged into main branch./
[17:31:09] <jneira[m]> hmm makes sense, maybe a workflow triggered by commits on master?
[17:31:39] <jneira[m]> they are already safe due to protection branch rules
[17:32:48] <anton-latukha[m]> jneira[m]: Yes, that also. But there are times whem main branch got merge 3 days ago & Hackage obviously progressed & CI builds actualize Hackage every time - so build once a day would also help.
[17:33:36] <jneira[m]> we have hackage index pinned in cabal.project
[17:34:40] <anton-latukha[m]> Ok. Understood. Then I would try to submit work.
[17:35:26] <jneira[m]> sounds good
[17:36:49] <jneira[m]> I tried to reuse test results between attempts of the same run to alliviate flakyness, the big problem right now, but it is not working
[17:37:22] <jneira[m]> I have to analyze the behaviour of . tasty-test-log
[17:37:47] <jneira[m]> or whatever is named
[17:41:21] <anton-latukha[m]> The second thing, that may be looked further is `cabal freeze` in https://markkarpov.com/post/github-actions-for-haskell-ci.html, I remember why it is needed vaguely & it needs a look if it is needed for HLS.... seems like current `cabal.project` `index-state: 2021-11-29T08:11:07Z` ensures the same thing & cache ID derives from it.
[17:42:43] <anton-latukha[m]> So HLS already does Hackage snapshotting through `cabal-9.x.x.project`
[17:48:57] <jneira[m]> yeah, cabal freeze has to be regenerated and it includes flag constraints, the main problem is they are or can be heavily influenced by the os where they are generated
[17:50:24] <jneira[m]> so you end needing one additional file for ghc*os
[17:51:28] <jneira[m]> and you need pin the index anyways for max reproducibility
[17:52:53] <jneira[m]> as revisions are not included in the freeze file
[17:54:38] <anton-latukha[m]> The `cabal freeze` runs inside CI for CI purposes - it is not stored into source. So `freeze` environment should be exactly the same for particular CI build profiles.
[17:56:45] <anton-latukha[m]> `cabal freeze` process would anyway be transparent step for cases when `cabal-9.x.x.project` & their `index-state:` are provided & would do what `freeze` is for in change for all other cases where snapshot was not established.
[17:56:58] <jneira[m]> hmm and cached themselves to be shared? could work, but not sure if the will save us build time, giving the fixed index
[17:57:10] <anton-latukha[m]> But it is not what I currently do - it is the next thing I know.
[17:59:16] <jneira[m]> in any case the help with CI will be much appreciated üôÇ
[18:00:50] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:05:49] <anton-latukha[m]> Yeah. CI & testing is the most important thing for maintaining projects long term, as I see it. I dedicated like a half of a year of my life to make `hnix` CI properly (spawning several subprojects) aiming for a long-term maintenance. I know & see you did much more work & appreciate that, you have quite a setup there.
[18:06:29] <anton-latukha[m]> * properly (& spawning several, * several subprojects in the process) aiming
[18:08:30] <adamCS> In basically all versions of HLS I have the situation where things work for a few minutes--sometimes longer--and then HLS quits (exit -11).  This includes 1.5.1 and compiled (via ghcup) with "enable-executable-dynamic).  I'm using emacs but it happens if I just run the wrapper from the terminal as well.  I'm on macOS (Big Sur but happened on earlier versions as well).  What's the best way to put useful info
[18:08:30] <adamCS>  into an issue?
[18:08:51] <adamCS> HLS is awesome!  And I so appreciate the work and I don't want to spam the issues with something useless.
[18:09:50] <anton-latukha[m]> adamCS: It probably happens most often in particular project, on particular code?
[18:10:26] <adamCS> Yes.  A particular project.  And, I think, only in some code.  But that's not as clear.
[18:11:55] <adamCS> It's a project with a few libraries and it seems to work fine in some of them.  but then I inevitably load a file from the larger lib that uses the smaller ones and then it crashes.
[18:12:02] <anton-latukha[m]> With the amount of Haskell dimentions of code & the GHC differences - I am not really surprised HLS fails & needs to be restarted from time to time, the main question is what is so frequently & heavily used in that code that makes HLS flip the table.
[18:12:43] <adamCS> When I restart, it crashes again immediately.  But right.  No messages in stderr, log or on terminal make it clear what is causing it.
[18:13:28] <adamCS> If it's not worth an issue, I won't submit.  I just thought maybe it was useful.  Otherwise I'll just keep trying new versions until this goes away.  It's so excellent when it works for me!
[18:13:42] <anton-latukha[m]> (to be clear - I am new here) - other people probably would help more with debugging it.
[18:15:14] <anton-latukha[m]> adamCS: Immediate crash is very clear & useful thing to debug.
[18:15:21] <adamCS> I have to go for a few but if there's a good place to go for instructions to post the crucial information, I'd be happy to. And I'll see any posts here when I get back.    
[20:14:01] *** Joins: bgamari_ (~bgamari@64.223.235.131)
[20:15:04] *** Quits: dminuoso (~dminuoso@user/dminuoso) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: bgamari (~bgamari@64.223.235.131) (Ping timeout: 256 seconds)
[20:15:21] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[20:17:47] *** Joins: bgamari (~bgamari@2001:470:e438::1)
[20:18:59] *** Quits: bgamari_ (~bgamari@64.223.235.131) (Ping timeout: 256 seconds)
[20:20:55] <anton-latukha[m]> You probably seen: https://haskell-language-server.readthedocs.io/en/latest/troubleshooting.html
[20:21:31] <anton-latukha[m]> Note it does have logging & `--debug`.
[20:25:27] <anton-latukha[m]> +====... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/ce36863d1a1eee160842c7df8b8c32c9b2efeb23)
[20:28:25] <anton-latukha[m]> Due to `cabal v2-build` being a tree of projects - most of HLS parts get built anyway, because all plugins include projects into `--only-dependencies`. But if it would be on `master` - it would mostly successfully built `master` & so save the cache pretty reliably.
[20:29:58] <wz1000> anton-latukha[m]: matrix multiline messages are quite hard to read with an IRC client. 
[20:31:18] <anton-latukha[m]> Tests run ~20 builds, which estimate caching artifacts to ~300MB each, which would be 6000Mb, which is roughly the half of what GitHub provides normally for caching.
[20:39:53] <anton-latukha[m]> Well, I can not convey details of information using 1 line restriction. Language generally always have paragraphs & the structure to convey the meaning & semantics of what where what goes. & IRC protocol was not accounting for that. In Telecommunications that is called by the term "message" of a protocol & its format is 1-line in IRC. & I do not like to broadcast spam the chatroom with 20 message notifications per
[20:39:53] <anton-latukha[m]> semantic I want to convey.
[20:43:48] <anton-latukha[m]> I would try to use line messages more frequently. But as you see - that is not mine, but an IRC technical difficulty. Situation around IRC is complex. How Matrix bot (bridge) works. What IRC server supports & how bot works with that server. IRC has a number of clients & I know some support multiline messages. There is also https://github.com/ircv3/ircv3-specifications/issues/208, which means if pipeline would support
[20:43:48] <anton-latukha[m]> this specification.
[21:06:04] <anton-latukha[m]> I am generally surprised Matrix translates messages to IRC as a URL or image. As just parsing the message & doing N sequential messages would been an easy approach. But probably some IRC servers get configured against rapid message posting.
[21:07:02] <anton-latukha[m]> Adding `\n` escaping & representation would've been enough to solve this, It is strange IRC clients/protocols generally still do not support it.
[21:15:03] <anton-latukha[m]> Also IRC protocol message design goes against main thing IT dialogs are about, as code sharing.
[21:16:20] <anton-latukha[m]> +====... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/741ee9220ccc00d281176a8eaa4c0a439e3c91a8)
[21:17:34] <anton-latukha[m]> At configuration as it currently is - GitHub would refer to the "last" by time `v2-${{ runner.os }}-${{ matrix.ghc }}-build-*`.
[21:25:50] *** Quits: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at) (Ping timeout: 252 seconds)
[21:26:48] <anton-latukha[m]> Oh. `bench.yml` has:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/653e1df75e3a5b344c46ced723344059ad026742)
[21:27:06] <anton-latukha[m]> Well, Ok then 8)
[22:38:52] *** hololeap_ is now known as hololeap
[22:40:36] *** Quits: arrowd (~arr@2.93.55.66) ()
[23:24:09] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[23:35:05] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 252 seconds)
[23:35:57] *** Joins: nf (~n@monade.li)
[23:37:21] <nf> i've added -Wno-incomplete-patterns to my ghc options but i still get those warnings, any idea why?
[23:37:32] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:01] <nf> tried with the cabal, direct and bios cradles
[23:53:55] <anton-latukha[m]> <nf> "tried with the cabal, direct and..." <- If options are added directly to ghc options, afaik - they could get overwritten, as it is icludded even in the basic `-W`:
[23:53:55] <anton-latukha[m]> https://ghc.gitlab.haskell.org/ghc/doc/users_guide/using-warnings.html#ghc-flag--W
[23:53:55] <anton-latukha[m]> Does directly declaring it in `{-# OPTIONS_GHC -Wno-incomplete-patterns #-}` works? Is `{-# COMPLETE con_1, ..., con_n #-}` is not an option? Does declaring projectwide through Cabal configuration works?
[23:54:40] *** Parts: sshine_ (~simon@hubris.eta.solutions) ()
[23:58:24] <nf> OPTIONS_GHC works
[23:58:57] <nf> not sure what you mean by projectwide
[23:59:08] <nf> i don't have a cabal.project
