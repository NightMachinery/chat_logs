[00:14:31] <headius> ahorek: I just ran into the strscan etc deps when trying to update the net libraries
[00:15:05] <headius> and digest
[00:15:09] <headius> so we'll need to get those resolved soon
[00:15:53] <headius> io-wait will be needed for net-protocol as well
[00:16:03] <headius> we have our own version of that but it needs to get into the gem
[00:17:45] <headius> and timeout
[00:23:24] <ahorek[m]> hey headius  the cgi lib also have extensions?
[00:23:44] <headius> the gem doesn't seem to
[00:24:11] <headius> or at least it doesn't publish those exts in the gem or in a dependency
[00:24:20] <ahorek[m]> I'm going to rebase digest, so it can be merged cleanly
[00:26:54] <headius> ahorek: the cgi/escape extension exists only in CRuby repo and they silently fail if it doesn't load
[00:27:07] <headius> so the published gem works without it
[00:27:16] <ahorek[m]> ok
[00:37:38] <ahorek[m]> this lib loader file is actually missing https://github.com/jruby/jruby/blob/master/lib/ruby/stdlib/cgi/escape.rb 
[00:38:24] <headius> ah yes we would need that to go with the escape ext
[00:38:35] <headius> maybe moved to jruby/cgi/escape.rb
[00:38:54] <headius> unsure though, the require would have to be different then ðŸ¤”
[00:39:11] <headius> hmm yeah
[00:39:14] <ahorek[m]> the ruby version is compatible, but it has perf impact
[00:39:34] <headius> so we either add that file and version it in a dir we don't normally version (stdlib/cgi all comes from gem) or we push a tweak to the gem to try to load either cruby ext or our ext
[00:40:11] <headius> the former is simple enough short term
[00:40:24] <headius> CRuby should address that there's an ext though
[01:00:49] <headius> we will want to get our readline ext into the readline-ext gem probably: https://github.com/ruby/readline-ext
[01:12:57] <ahorek[m]> https://github.com/rvm/rvm/pull/5130
[01:33:12] <headius> woot
[01:43:44] <headius> enebo: you spent any time looking into this: https://github.com/ruby/rbs
[01:52:40] *** Quits: nirvdrum (~nirvdrum@pool-108-20-224-24.bstnma.fios.verizon.net) (Ping timeout: 252 seconds)
[02:30:22] <headius> enebo: all gems are in my PR
[02:30:31] <ahorek[m]> btw https://github.com/ruby/prime/commit/36e9914d86390d8c2b2126a4542099a8aa8ceac2 optimization hurts perf on JRuby because BigDecimal#pow is much slower than CRuby :)
[02:31:16] <headius> huh, I wonder if newer JDK is better
[02:33:30] <ahorek[m]> no much difference, but maybe Graal could do better
[02:33:47] <headius> oh, wait, what pow is this?
[02:36:32] <headius> Bignum?
[02:37:44] <headius> ok this is Integer#pow
[02:41:18] <headius> if it's a fixnum-ranged value it falls into this nasty logic: https://github.com/jruby/jruby/blob/f1ec1569017973f49165a525a22ecd78a09f1f13/core/src/main/java/org/jruby/util/Numeric.java#L709
[02:41:32] <headius> if it's a bignum it will just end up using JDK BitInteger.pow
[03:04:42] <headius> ahorek: looks like the cgi ext will be in the gem soon: https://github.com/ruby/cgi
[03:05:13] <headius> "CGI is a large class, providing several categories of methods, many of which are mixed in from other modules"
[03:05:23] <headius> does that strike anyone else as pretty much useless as a description?
[03:05:42] <headius> other than the letters CGI that tells me absolutely nothing useful about the library
[03:07:01] <headius> oh I see you discovered this ðŸ˜€
[03:14:18] <headius> I also just saw https://github.com/ruby/cgi/pull/4 and your PR that initiated it, but they have not released that in a gem yet ðŸ˜©
[03:16:18] <ahorek[m]> huh, CGI doesn't compile on ruby < 2.7, but I don't think it's my fault
[03:16:51] <headius> https://github.com/ruby/cgi/issues/10
[03:17:16] <headius> pretty sure I could look at half of the gemified stdlibs in Ruby 3.0.2 and they would not match the gem version they claim to be
[03:24:01] <ahorek[m]> yeah, many of them are synchronized manually to /ruby/ruby but never released
[03:27:01] <headius> https://bugs.ruby-lang.org/issues/18169
[03:27:10] <headius> this is the second such bug in the past year or so
[03:27:32] <headius> in my case I don't care how they manage the sources... it seems really error-prone to do it in two places, but that's their funeral
[03:27:58] <headius> if they simply will not remove the sources, then they need to put some workflow in place that prevents them from getting out of sync, and definitely prevent unreleased sources from getting into CRuby releases
[03:40:28] <ahorek[m]> I agree, but I don't really believe they'll change their workflow. I hope that hsbt will help at least release appropriate versions. It's frustrating to compare each library...
[03:40:53] <headius> all I want is for them to guarantee they never release without aligning the gem versions
[03:49:01] <ahorek[m]> they should ensure that all gems are released it before each ruby release, but each gem has a different maintainer. So the question is, who should be responsible to do it.
[03:58:59] <headius> Yeah, they want the gems to have maintainers, but then they want everybody that's not a maintainer to also be able to make changes to the gem. I don't see how that's supposed to work
[03:59:36] <headius> I still don't understand why they make changes to the gyms directly in that repository. If it's easier to keep a local copy for testing, so be it, but why do they make the changes there?
[03:59:37] <headius> Gems
[04:08:51] *** Joins: nirvdrum (~nirvdrum@pool-108-20-224-24.bstnma.fios.verizon.net)
[06:00:43] *** Quits: nirvdrum (~nirvdrum@pool-108-20-224-24.bstnma.fios.verizon.net) (Ping timeout: 252 seconds)
[07:19:44] *** Joins: nirvdrum (~nirvdrum@pool-108-20-224-24.bstnma.fios.verizon.net)
[08:21:48] <headius> well, made some progress on test suite for stringio: https://github.com/ruby/stringio/pull/21
[08:21:53] <headius> still a bunch of minor failures
[08:22:02] <headius> needs a re-port of some methods I think
[08:23:46] <headius> pushed this for io-wait support: https://github.com/ruby/io-wait/pull/2
[08:25:08] <headius> enebo: I have been using 3.0.2 as my standard for stdlib updates. Most libs are updated via gems. sync_ruby will update others but they are out of sync and need to be addressed
[08:29:18] <headius> sigh https://github.com/ruby/pp/pull/4
[08:37:51] <headius> ok, I think I'm done for tonight
[08:40:06] <headius> may not be around tomorrow... anyone who wants to help with these ext gems, please do ðŸ˜€
[09:46:13] *** Quits: nirvdrum (~nirvdrum@pool-108-20-224-24.bstnma.fios.verizon.net) (Ping timeout: 252 seconds)
[14:46:02] *** Joins: AnilJaiswal[m] (~aniljaisw@2001:470:69fc:105::1:aa)
[14:48:29] <rebelwarrior[m]> Question: Has the 9.3 release been tested on Mac's M1 computers? I've been using the nightly builds on my M1 and they work but when I want to `bundle install` a rails5 project I get errors involving the `waitpid`. Could be that my java version is M1-native so just wanted to check with you guys first. 
[15:50:50] *** Joins: meckispaghetti[m (~meckispag@2001:470:69fc:105::f2c5)
[16:08:20] *** Joins: nirvdrum (~nirvdrum@pool-108-20-224-24.bstnma.fios.verizon.net)
[18:03:01] <meckispaghetti[m> <rebelwarrior[m]> "Question: Has the 9.3 release..." <- I wish I could test this, unfortunately I have no M1 machine in reach at the moment. 
[18:33:54] *** Quits: fidothe (sid1130@id-1130.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[18:34:27] *** Joins: fidothe (sid1130@id-1130.uxbridge.irccloud.com)
[19:29:58] <headius> rebelwarrior  m1 is only partially supported right now but I hope to get it fully supported in a point release
[19:30:39] <headius> If you use an x86 jdk it will be fine although that's obviously not ideal
[20:44:52] <enebo[m]> https://bugs.ruby-lang.org/issues/18169#note-14
[20:45:31] <enebo[m]> headius: not sure this will help but it feels like the workflow could be fairly easy for everyone but the release manager with my suggestion
[20:46:21] <enebo[m]> but to me the big problem is I do not think there is any motivation for them to keep this stuff synced.  If nobu makes a fix for someone elses gem he probably looks at the syncing as not his problem
[20:48:05] <enebo[m]> There are also multiple ways they could detect version conflicts with an automated script but that is asking someone to do a bunch of work
[20:52:13] <enebo[m]> headius: to answer your other question I have not looked at rbs at all (until now)
[20:53:41] <enebo[m]> We may not be releasing rbs support initially since it means porting ~4000 lines of C (lexer at least uses a tool but parser is hand-written)
[20:56:10] <meckispaghetti[m> Hey folks, can you guide me into a direction? I'd like to package a JRuby program including gems to a self containing executable for machines that donâ€™t have Java installed. What is the easiest tool for such a thing?
[21:03:42] <headius> Probably warbler still but not sure how well it is being maintained
[21:04:23] <headius> enebo yeah it is pretty clear they want the gems to have maintainers but they also want everybody else to be able to make changes too
[21:04:53] <headius> It makes very little sense to me since it makes it impossible for those maintainers and I think that's why hsbt has been getting irritated by these issues
[21:05:39] <headius> I do feel like if someone were to fix their CI to pull head of the gems or a specific tag, maybe they would see it's not that bad
[21:05:57] <headius> Everyone who has commit rights on Ruby has commit rights on the GitHub repos for the gems anyway
[21:06:39] <headius> Another problem with their current system is that we can't test against the real head of the gems
[21:07:20] <headius> I almost want to set up a job that pulls the version of gem they report on master and compares the contents with what they have in the repo
[21:07:32] <headius> I would not be surprised if 50% or more are out of sync at any moment
[21:22:57] <meckispaghetti[m> <headius> "Probably warbler still but not..." <- Thanks, I'll look into it
[21:36:33] <headius> If it is not working let me know because I have wanted to clean it up and update it for a while
