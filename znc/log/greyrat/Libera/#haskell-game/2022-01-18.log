[00:23:22] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[00:40:04] <EvanR> MSFs can be used to implement many FRP variants, including Arrowized FRP, Classic FRP, and plain reactive programming. Arrowized and applicative syntax are both supported.
[00:40:10] <EvanR> (from dunai readme)
[00:40:31] <EvanR> I'm following along until "plain reactive programming", wth is that
[00:41:34] <sm> I fell at "MSFs"
[00:42:06] <EvanR> I had watched a conference video about that so I know what that is
[00:43:10] <sm> plain reactive programming I imagine is anything "reactive", ie things that update automatically when other things change, whether functional, principled or not
[00:47:51] <EvanR> I mean... any game written any old way?
[00:48:01] <EvanR> since that happens
[00:48:05] <EvanR> somehow
[00:48:16] <f-a> boy if I check the games I have written years ago
[00:48:23] <f-a> what a bag full of cringe
[00:49:06] <EvanR> the spreadsheet allegory really spread like wildfire
[00:55:03] <ManofLetters[m]> everybody loves Excell
[00:55:20] <EvanR> any idea how dunai helps with plain reactive programming
[00:55:51] <EvanR> is it literally like excel
[00:57:01] <ManofLetters[m]> yet another corporate ploy to entice functional game programmers
[00:57:46] <ManofLetters[m]> come to our company, you will all day be doing Ex^H^H FRP!
[02:13:28] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[02:33:25] <EvanR> after reading a paper this morning about stream processing, I made this backward time stream that goes to minus infinity, somehow might match up with a forward facing stream, and if they agree at -inf and +inf we have a causal but infinite loop
[02:33:34] <EvanR> what if that's how it is
[02:41:40] *** Quits: chomwitt (~chomwitt@2a02:587:dc0b:200:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[02:51:22] <EvanR> if a forward time stream is called TS, and you you put a backward time stream before it to get a zipper, what letters do you pick to spell something funny
[02:51:34] <EvanR> PO TS...
[02:51:40] <EvanR> NA TS..
[02:52:40] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:53:14] <EvanR> ZO TS is a cool coffee shop down the street
[02:53:28] <ManofLetters[m]> ST TS?
[02:53:39] <EvanR> too bad ST exists
[04:04:55] *** Quits: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: jakub[m] (~jakubfami@2001:470:69fc:105::a43) (Ping timeout: 268 seconds)
[04:06:57] *** Joins: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com)
[04:20:22] *** Joins: jakub[m] (~jakubfami@2001:470:69fc:105::a43)
[07:17:18] *** Joins: knack[m] (~knackkdeo@2001:470:69fc:105::1:6c9f)
[10:45:09] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:01:46] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[15:01:03] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[15:04:49] *** Joins: __monty__ (~toonn@user/toonn)
[15:27:18] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[20:03:55] <sm> https://f4.bcbits.com/img/a1948390270_10.jpg
[20:04:10] <sm> I get a kick every time I see this again :)
[20:04:57] <sm> can I use it in all corporate communications
[20:05:58] <f-a> haha
[20:13:31] <ManofLetters[m]> heh, the universal bar chart; just paste messily over the bar labels, depending on what the presentation is about ;)
[20:21:47] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[20:50:21] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:31:40] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[21:46:15] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[21:54:57] <EvanR> I know, that aesthetic is so great
[22:25:18] <sm> woah, rabbit hole ðŸ•³!
[22:25:46] <sm> https://amp.knowyourmeme.com/memes/michaelsoft-binbows
[22:25:46] <sm> https://www.reddit.com/r/crappyoffbrands/comments/79bue9/michaelsoft_binbows/
[22:26:41] <sm> "the Katakana on the bottom is a misspelled Microsoft (maikerusofuto; "Michaelsoft")"
[22:27:08] <sm> "Maikerusofuto, as in Michael (Maikeru)"
[22:28:16] <EvanR> ahahaha
[22:31:22] <sm> aah! volume up!!
[22:31:22] <sm> https://klassewrecks.bandcamp.com/album/michaelsoft
[22:32:01] <EvanR> that's where I got the album cover originally
[22:33:56] <sm> nice. Released dec 3, from hong kong
[22:34:24] <EvanR> the "dithering" is great
[22:34:31] <EvanR> the font for y axis, great
[22:34:50] <EvanR> they don't make GUIs like they used to
[22:41:08] <sm> album purchased , compliments sent to Mr Ho.
[22:42:12] <f-a> =D
[22:42:34] <sm> i wonder if they got it from
[22:42:35] <sm> somewhere 
[22:42:38] <f-a> 2022/01/18 Michelsoft Album
[22:42:50] <f-a>     Expenses:Music   USD 10
[22:42:58] <f-a>     Assets:Bank account
[22:43:37] <EvanR> damn the 18th already
[22:43:47] <EvanR> f time
[22:43:56] <sm> GBP 10
[22:44:27] <f-a> f-a time indeed
[22:58:15] <EvanR> I went looking for ways to benchmark FRP, and found this github repo that said "create 1000 event nodes and send 1000 such and such events through the network, measure how long it takes", and it has the benchmark written for a few libs
[22:58:55] <EvanR> and I'm having trouble understanding how to do that test in my own program, since in all the iterations I don't have event nodes or an event network
[23:00:10] <EvanR> it's really all I could find on benchmarks
[23:00:43] <ManofLetters[m]> did you set up a spreadsheet?
[23:00:56] <EvanR> nnnnno
[23:02:18] <ManofLetters[m]> remember, it's all about Michelsoft Excel really
[23:02:29] <EvanR> it suggests a way to bend over backwards to do these tests in netwire which apparently is different
[23:02:51] <EvanR> but I understand netwire even less
[23:03:02] <EvanR> good effort, community
[23:06:53] <sm> I will sell you an enterprise solution with bar charts!
[23:08:22] <EvanR> of all the procrastinating strategies, "first I will need a startup to support the thing I just made before I have the resources to use it for anything", seems not as terrible as some others
