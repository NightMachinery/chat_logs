[00:04:17] *** Joins: Guest70 (~Guest70@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[00:05:34] *** Joins: Turingtoast (~Tino@200116b8607c7b00203f0e7b88dbdbdb.dip.versatel-1u1.de)
[00:06:37] <libsys> cherim: works beautifully, here proof: https://freedombox.hacktivista.org/bepasty/ft6F2zuy/+inline thanks!
[00:07:24] <cherim> I can explain the logic if you want, but it's simple enough not to be necessary
[00:10:44] *** Quits: Null_A (~null_a@2601:645:8700:2290:6cb0:bf84:22bf:3285) (Remote host closed the connection)
[00:12:32] *** aaaaaaaaaa is now known as madprops
[00:12:32] *** Quits: madprops (~hj8oijo@li628-159.members.linode.com) (Changing host)
[00:12:32] *** Joins: madprops (~hj8oijo@user/madprops)
[00:12:35] *** Quits: Europa (~Europa@user/europa) (Remote host closed the connection)
[00:13:33] *** Quits: fiberizone_ (~fiberizon@48.74.117.78.rev.sfr.net) (Remote host closed the connection)
[00:13:49] *** Joins: fiberizone_ (~fiberizon@48.74.117.78.rev.sfr.net)
[00:14:30] *** Joins: Europa (~Europa@user/europa)
[00:15:56] <libsys> cherim: please go ahead
[00:16:44] <cherim> For a fixed s, break integers into blocks of s. For s=3 we have : 1,2,3;  4,5,6;  7,8,9; ...
[00:16:59] <cherim> First thing we do is going back to the start of the current block
[00:17:33] <cherim> For 1,2,3 we have to jump back by 0,1,2 respectively. For 4,5,6 again by 0,1,2. In general, by (n-1)%s.
[00:17:52] <cherim> Then +s moves us to the start of the next block. If c=1, this is the final answer.
[00:18:05] <cherim> If c>1, we advance by c-1 steps to reach channel c.
[00:18:20] <cherim> n - (n-1)%s + s + (c-1)
[00:19:22] <cherim> It all looks trivial if you use base=0 numbering instead of base=1, but easy as is
[00:20:47] <libsys> yup, thanks a lot man :)
[00:24:02] *** Quits: fiberizone_ (~fiberizon@48.74.117.78.rev.sfr.net) (Ping timeout: 260 seconds)
[00:25:21] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[00:28:00] *** Quits: connrs (~connrs@conners.plus.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:28:07] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:28:20] *** Joins: connrs (~connrs@user/connrs)
[00:29:24] *** Joins: AviKav (~AviKav@pool-71-191-176-243.washdc.fios.verizon.net)
[00:34:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[00:36:23] *** Quits: dld (~davidlowr@2620:6e:6000:2900:5db6:6f5a:3b6e:25f9) (Ping timeout: 264 seconds)
[00:37:13] *** Quits: Jordy (~jordy@user/jordy) (Read error: Connection reset by peer)
[00:37:47] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:40:20] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 260 seconds)
[00:41:13] *** Joins: brownorange (~brownoran@user/brownorange)
[00:41:17] *** Quits: Guest19 (~Guest19@2601:c9:8000:14b8:79a9:8f1f:aead:70da) (Ping timeout: 256 seconds)
[00:42:05] *** Joins: Nact (~l@host-85-27-120-251.dynamic.voo.be)
[00:46:55] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:d0b2:4012:3b33:93d5) (Quit: Textual IRC Client: www.textualapp.com)
[00:51:23] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[00:51:25] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 260 seconds)
[00:52:24] *** Joins: Guest19 (~Guest19@2601:c9:8000:14b8:79a9:8f1f:aead:70da)
[00:52:59] *** Quits: magla (~gelignite@55d4ee8d.access.ecotel.net) (Quit: Stay safe!)
[00:55:00] *** Quits: orbyt (~textual@172.92.4.78) (Quit: Textual IRC Client: www.textualapp.com)
[00:57:15] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 260 seconds)
[00:57:36] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[01:00:11] *** Quits: karios_fox (~kariosfox@176.221.125.192) (Quit: Leaving)
[01:01:25] *** Quits: fentanyl (~ryan@user/sapi01) (*.net *.split)
[01:01:25] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: msch (sid28472@tinside.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: c4s1 (sid519549@hampstead.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[01:01:26] *** Quits: nrr_ (sid20938@lymington.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: Z-module (~user@aero-astro-estates.mit.edu) (*.net *.split)
[01:01:26] *** Quits: jinsun (~quassel@user/jinsun) (*.net *.split)
[01:01:26] *** Quits: SJrX (~sjr@s0106302303dfb018.vf.shawcable.net) (*.net *.split)
[01:01:26] *** Quits: ryt (~ryt@precari.at) (*.net *.split)
[01:01:26] *** Quits: traxex (traxex@user/traxex) (*.net *.split)
[01:01:26] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (*.net *.split)
[01:01:26] *** Quits: niston (~gridrun@user/niston) (*.net *.split)
[01:01:26] *** Quits: cynicalcats (~cynicalca@user/cynicalcats) (*.net *.split)
[01:01:26] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[01:01:26] *** Quits: geonic (~geonic@user/geonic) (*.net *.split)
[01:01:26] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[01:01:26] *** Quits: mnhrdt (~Enric@fsf/member/mnhrdt) (*.net *.split)
[01:01:26] *** Quits: berber (~berber@v2202101107577140883.nicesrv.de) (*.net *.split)
[01:01:26] *** Quits: webstrand (~webstrand@user/webstrand) (*.net *.split)
[01:01:26] *** Quits: paruh (~paruh@92.60.39.18) (*.net *.split)
[01:01:26] *** Quits: voiceofreason (~voiceofre@207.148.10.181) (*.net *.split)
[01:01:26] *** Quits: det (~det@23.96.202.209) (*.net *.split)
[01:01:26] *** Quits: dangrenier83 (~pi@user/dangrenier83) (*.net *.split)
[01:01:26] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[01:01:26] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (*.net *.split)
[01:01:26] *** Quits: jwpapi (sid502614@uxbridge.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: Forty-Bot (~kvirc@pool-108-45-127-224.washdc.fios.verizon.net) (*.net *.split)
[01:01:26] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[01:01:26] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[01:01:26] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[01:01:26] *** Quits: ozarker (~ozarker@172-15-173-110.lightspeed.mssnks.sbcglobal.net) (*.net *.split)
[01:01:26] *** Quits: sqrt2 (~ben@80-108-18-7.cable.dynamic.surfer.at) (*.net *.split)
[01:01:26] *** Quits: KotH (~attila@erica.kinali.ch) (*.net *.split)
[01:01:26] *** Quits: szdani10 (~szdani10@unix-comp-airnet.net) (*.net *.split)
[01:01:26] *** Quits: stux|away (~stux@82.192.81.143) (*.net *.split)
[01:01:26] *** Quits: Cyp (~cyp@213.237.87.7) (*.net *.split)
[01:01:26] *** Quits: TheLinuxNerd (~tux@user/thelinuxnerd) (*.net *.split)
[01:01:33] *** Joins: traxex (~traxex@sdf.org)
[01:01:34] *** Joins: mnhrdt (~Enric@boucantrin.ovh.hw.ipol.im)
[01:01:36] *** Joins: KotH (~attila@erica.kinali.ch)
[01:01:37] *** Joins: sqrt2 (~ben@80-108-18-7.cable.dynamic.surfer.at)
[01:01:38] *** Joins: c4s1 (sid519549@id-519549.hampstead.irccloud.com)
[01:01:39] *** Joins: ryt (~ryt@precari.at)
[01:01:41] *** Joins: voiceofreason (~voiceofre@207.148.10.181)
[01:01:41] *** Joins: cynicalcats (~cynicalca@c-24-8-58-78.hsd1.co.comcast.net)
[01:01:43] *** Joins: fentanyl (~ryan@45.159.14.242)
[01:01:44] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[01:01:48] *** Joins: stux|away (~stux@82.192.81.143)
[01:01:50] *** Joins: Z-module (~user@aero-astro-estates.mit.edu)
[01:01:57] *** Joins: nisstyre (~wes@li798-187.members.linode.com)
[01:02:03] *** Joins: jwpapi (sid502614@id-502614.uxbridge.irccloud.com)
[01:02:04] *** Joins: dangrenier83 (~pi@modemcable059.178-59-74.mc.videotron.ca)
[01:02:07] *** Joins: paruh (~paruh@92.60.39.18)
[01:02:16] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[01:02:23] *** Quits: fentanyl (~ryan@45.159.14.242) (Client Quit)
[01:02:24] *** Joins: msch (sid28472@id-28472.tinside.irccloud.com)
[01:02:25] *** Joins: bjs (sid190364@id-190364.helmsley.irccloud.com)
[01:02:30] *** Quits: cynicalcats (~cynicalca@c-24-8-58-78.hsd1.co.comcast.net) (Changing host)
[01:02:30] *** Joins: cynicalcats (~cynicalca@user/cynicalcats)
[01:02:34] *** Quits: nisstyre (~wes@li798-187.members.linode.com) (Signing in (nisstyre))
[01:02:34] *** Joins: nisstyre (~wes@user/nisstyre)
[01:02:40] *** Joins: nrr_ (sid20938@id-20938.lymington.irccloud.com)
[01:02:42] *** Quits: bjs (sid190364@id-190364.helmsley.irccloud.com) (Changing host)
[01:02:42] *** Joins: bjs (sid190364@user/bjs)
[01:03:06] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[01:03:07] *** Joins: niston (~gridrun@user/niston)
[01:03:15] *** Joins: det (~det@23.96.202.209)
[01:03:27] *** Joins: jinsun (~quassel@user/jinsun)
[01:03:27] *** Joins: Oxyd (~oxyd@user/oxyd)
[01:03:32] *** Joins: Cyp (~cyp@213.237.87.7)
[01:03:33] *** Joins: SJrX (~sjr@S0106302303dfb018.vf.shawcable.net)
[01:03:33] *** Joins: Trashlord (~trash@user/trashlord)
[01:03:34] *** Joins: sm2n (~sm2n@user/sm2n)
[01:03:37] *** Joins: TheLinuxNerd (~tux@user/thelinuxnerd)
[01:03:42] *** Joins: szdani10 (~szdani10@unix-comp-airnet.net)
[01:03:45] *** Joins: webstrand (~webstrand@user/webstrand)
[01:03:52] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[01:04:10] *** Quits: bosspotato (~bosspotat@user/bosspotato) (Ping timeout: 260 seconds)
[01:07:40] *** Parts: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com) ()
[01:08:45] <Z-module> test
[01:08:46] *** Joins: p0indexter (~alpha@user/p0indexter)
[01:09:50] *** Joins: bosspotato (~bosspotat@142.184.100.116)
[01:09:50] *** Quits: bosspotato (~bosspotat@142.184.100.116) (Changing host)
[01:09:50] *** Joins: bosspotato (~bosspotat@user/bosspotato)
[01:10:25] <joel135> success
[01:12:07] <brownorange> Assemble the set of formulas that are not provable and true. This set's existence must be provable and true. If it is then from what?
[01:12:19] *** Joins: _hm_ (~h_m@186-149-117-154.bitcointernet.co.za)
[01:12:31] *** Quits: h_m (~h_m@186-149-117-154.bitcointernet.co.za) (Read error: Connection reset by peer)
[01:14:21] *** Quits: brownorange (~brownoran@user/brownorange) (Read error: Connection reset by peer)
[01:14:22] *** Joins: brownorange2 (~brownoran@user/brownorange)
[01:14:48] <brownorange2> uh
[01:14:53] *** Quits: brownorange2 (~brownoran@user/brownorange) (Client Quit)
[01:16:30] <joel135> i wonder the notion of syzygy module comes with some tangible geometric intuition, such that the usual maps between iterated syzygy modules are indeed boundary maps
[01:22:05] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 258 seconds)
[01:22:11] <joel135> if*
[01:23:13] *** Quits: Guest19 (~Guest19@2601:c9:8000:14b8:79a9:8f1f:aead:70da) (Quit: Client closed)
[01:25:33] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[01:26:41] <joel135> maybe a syzygy is in a way a "corner case" of a system of equations, and a "corner" is like a "boundary" ...
[01:30:11] *** Quits: src (~src@user/src) (Quit: Leaving)
[01:30:41] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[01:31:11] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[01:34:58] *** Quits: vaporatorius__ (~vaporator@135.red-95-122-12.staticip.rima-tde.net) (Ping timeout: 260 seconds)
[01:36:22] *** Joins: dutch (~DutchIngr@user/dutch)
[01:36:29] <[itchyjunk]> https://imgur.com/a/66Ftd1i
[01:36:48] <[itchyjunk]> for b), i tried squaring aboth sides, then i can get LHS=RHS = ie
[01:37:00] <[itchyjunk]> but initially, i was trying without squaring and was a bit stuck.
[01:37:29] <[itchyjunk]> I get LHS to exp(1/2) (1/sqrt(2) + i 1/sqrt(2)) and can't do much
[01:38:16] <[itchyjunk]> is there some trick to manupulate that into RHS?
[01:38:25] <[itchyjunk]> or is squaring both sides my best bet?
[01:38:37] <Z-module> So you know why both sides have angle pi/4, right?
[01:38:50] <[itchyjunk]> hmm no
[01:40:00] <[itchyjunk]> well, i guess if they didn't both have the same Arg, they wouldn't be equal?
[01:40:20] <Z-module> right, they're equal    iff   they ahve the same length and the same arg
[01:40:24] <[itchyjunk]> i guess i didn't think of them as 2 complex numbers, so their Arg and magnitude need to match
[01:40:26] <[itchyjunk]> right
[01:40:51] *** Joins: bobb_ (~bobb_@dslb-088-065-178-228.088.065.pools.vodafone-ip.de)
[01:40:55] *** Parts: bobb_ (~bobb_@dslb-088-065-178-228.088.065.pools.vodafone-ip.de) ()
[01:42:36] <Z-module> the LHS is   exp(1/2) * exp(i pi/4)
[01:43:07] <[itchyjunk]> for the RHS, |z| = sqrt(e) since sqrt((sqrt(e/2))^2 + (sqrt(e/2))^2 ) = sqrt(e)
[01:43:19] <[itchyjunk]> LHS, my r is exp(1/2)
[01:43:25] <Z-module> so its length is exp(1/2) = sqrt(e)
[01:43:28] <Z-module> right
[01:43:32] <Z-module> and its angle is pi/4
[01:43:40] <Z-module> so now see taht those same things are true about the RHS
[01:43:46] <[itchyjunk]> ohhhh poo exp(1/2) = sqrt(e) missed that part
[01:43:48] <Z-module> you'll first need to know the length of (1 + i)
[01:43:55] <[itchyjunk]> nice!
[01:44:04] *** Quits: traxex (~traxex@sdf.org) (Changing host)
[01:44:04] *** Joins: traxex (~traxex@user/traxex)
[01:44:10] <[itchyjunk]> sqrt(2) is the length
[01:44:48] *** Quits: Oli (~Unknown@user/oli) (Quit: leaving)
[01:44:58] *** Joins: Oli (~Unknown@user/oli)
[01:45:06] <Z-module> yes, so that times sqrt(e/2) gives....
[01:45:26] <[itchyjunk]> right sqrt(e).
[01:45:59] <Z-module> so there you go, as long as you know the arg of (1 + i) is pi/4
[01:47:09] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[01:49:17] *** Quits: LuKaRo (~LuKaRo@p4fc32951.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[01:50:38] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[01:51:46] *** Joins: notzmv (~zmv@user/notzmv)
[01:52:48] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[02:01:52] *** Quits: p0indexter (~alpha@user/p0indexter) (Quit: ars longa vita brevis)
[02:06:14] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[02:07:15] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:07:38] *** Quits: b93 (~I@87.196.81.64) (Ping timeout: 260 seconds)
[02:16:35] *** Quits: daoudr (~daoudr@161.12.105.92.dynamic.wline.res.cust.swisscom.ch) (Ping timeout: 260 seconds)
[02:17:08] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:205d:b36:d1bc:fd5e)
[02:18:49] <[itchyjunk]> Prove |exp(-2x)|<1 iff Re(z) > 0. Assume |exp(-2z)| < 1 and z = x + iy. |exp(-2x)exp(-2iy)| < 1 => exp(-2x) < 1. So i can try out some values of x and see that if x <= 0, exp(-2x) >= 1.
[02:19:00] <[itchyjunk]> But i am not sure how to write that out cleanly
[02:19:08] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[02:20:27] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-6189-ef5f-444a-ddff.res6.spectrum.com)
[02:20:34] <Z-module> you mean prove |exp(-2z)| < 1 ?
[02:21:06] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:21:19] <Z-module> Hopefully you know that exp(r) < 1 iff r < 0,  when r is real
[02:22:55] <[itchyjunk]> no i am assuming that to prove Re(z) > 0
[02:22:57] <[itchyjunk]> doing the => first
[02:23:06] <[itchyjunk]> oh
[02:23:12] <Z-module> you will need the fact I just said
[02:23:17] <[itchyjunk]> hmm
[02:23:31] <[itchyjunk]> does that come from some theorem? it seems to make sense
[02:23:41] <[itchyjunk]> but how would one convience someone else of that?
[02:24:30] *** Joins: emerent_ (~quassel@p200300cd574855daba27ebfffed28a59.dip0.t-ipconnect.de)
[02:24:30] *** emerent is now known as Guest7256
[02:24:30] *** emerent_ is now known as emerent
[02:24:34] *** Quits: Guest7256 (~quassel@p200300cd574855c8ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[02:24:36] <Z-module> exp on R is a strictly increasing function, and exp(0) = 1
[02:25:05] <cherim> There was a detailed discussion on proving e^x>=1+x in the chat 3.5 hours ago
[02:25:27] <Z-module> exp(x) = 1 + x + x^2/2! + ...  is clearly > 1 for all real x > 0, so exp(x < 0) = 1/exp(|x|)  which is < 1 since the denominator is > 1
[02:26:03] *** Quits: horseface (~horseface@user/horseface) (Quit: STOP, DROP, AND ROLL. IT IS HAMMER TIME!!!)
[02:27:05] <[itchyjunk]> ah, taylor expansion of e makes it clear
[02:27:59] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 264 seconds)
[02:29:11] <PlanckWalk> So if x = Re(z), then "|exp(-2x)|<1 iff Re(z) > 0" just means "|exp(-2x)|<1 iff x > 0".
[02:29:12] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:29:45] <PlanckWalk> (and you can drop the || since x is real)
[02:30:27] *** Joins: magic_ninja_work (~sparkie1@4.4.16.52)
[02:30:31] <[itchyjunk]> well the || already got dropped i think |exp(-2x)exp(i(-2y))| = exp(-2x) < 1
[02:30:51] *** Joins: horseface (~horseface@user/horseface)
[02:32:55] *** Mondenkind is now known as moon-child
[02:37:07] <Z-module> right, exp(anything real) is > 0
[02:37:11] *** Quits: det (~det@23.96.202.209) (Ping timeout: 245 seconds)
[02:37:38] <Z-module> oh, sorry, there's an i in there, but that's okay since  |exp(i * (anything real))| = 1
[02:38:38] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:40:40] *** Quits: horseface (~horseface@user/horseface) (Ping timeout: 244 seconds)
[02:42:42] *** Joins: det (~det@23.96.202.209)
[02:45:41] *** Joins: horseface (~horseface@user/horseface)
[02:47:11] <[itchyjunk]> heh right, took me a minute. sin^2(x) + cos^2(x) = 1
[02:47:33] *** Joins: Guest2618 (~Guest26@port-92-195-152-239.dynamic.as20676.net)
[02:48:16] *** Quits: Guest2618 (~Guest26@port-92-195-152-239.dynamic.as20676.net) (Client Quit)
[02:50:56] *** Joins: Arcorann (~A@user/arcorann)
[02:51:20] *** Joins: aaii__ (~aaii@user/aaii)
[02:53:04] *** aaii__ is now known as aaii
[02:53:55] *** Quits: aaii_ (~aaii@user/aaii) (Ping timeout: 260 seconds)
[02:57:34] *** Joins: Guest3788 (~Guest37@port-92-195-152-239.dynamic.as20676.net)
[02:58:15] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-6189-ef5f-444a-ddff.res6.spectrum.com) (Quit: Leaving.)
[02:59:39] *** Quits: horseface (~horseface@user/horseface) (Quit: STOP, DROP, AND ROLL. IT IS HAMMER TIME!!!)
[02:59:54] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[03:00:29] *** Joins: Crescendo (~Crescendo@user/crescendo)
[03:01:49] *** Quits: Guest3788 (~Guest37@port-92-195-152-239.dynamic.as20676.net) (Client Quit)
[03:05:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[03:06:24] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:07:25] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[03:11:40] *** Quits: magic_ninja_work (~sparkie1@4.4.16.52) (Ping timeout: 244 seconds)
[03:14:24] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[03:15:12] *** Joins: sheepduck (~sheepduck@user/sheepduck)
[03:15:16] *** Joins: Crescendo (~Crescendo@user/crescendo)
[03:16:42] *** Quits: qeed_ (~qeed@072-190-106-143.res.spectrum.com) (Ping timeout: 260 seconds)
[03:17:30] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:20:10] *** Joins: leonardus (sid358597@tinside.irccloud.com)
[03:25:13] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[03:25:37] *** Quits: sheepduck (~sheepduck@user/sheepduck) (Ping timeout: 244 seconds)
[03:25:37] *** Joins: sheepduck_ (~sheepduck@user/sheepduck)
[03:26:56] *** Joins: johnkeats6 (~johnkeats@2804:14c:32:a0cc:ee:5075:9596:3cb8)
[03:30:36] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Read error: Connection reset by peer)
[03:31:40] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[03:34:04] *** Quits: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:37:05] <isekaijin> Consider a parametrized rational curve f : P^1 -> P^n given by f([x : y]) = [f0(x, y) : ... : fn(x, y)], where f0, ...,  fn are homogeneous polynomials of the same degree d. Is the image of f always a curve of degree d? (If f is not injective, consider its image with the appropriate multiplicity, of course.)
[03:44:52] *** Joins: Kaylah (~Kaylah@ptr-eit6u3gc37tjuo1lee2.18120a2.ip6.access.telenet.be)
[03:45:28] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:45:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:45:54] *** Joins: ferdna (~ferdna@user/ferdna)
[03:46:49] *** Lord_of_Life_ is now known as Lord_of_Life
[04:00:10] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[04:00:24] *** Quits: audiobirb (~audio@2603-8081-1800-1546-0d8f-fc32-e8a3-87bf.res6.spectrum.com) (Ping timeout: 258 seconds)
[04:02:55] *** Quits: traxex (~traxex@user/traxex) (Remote host closed the connection)
[04:06:21] *** Quits: Player001 (~Player001@user/player001) (Quit: Quitting)
[04:10:29] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: what if I am turning narcissist? pretentious, asocial, inpromptu squabbles, easily become childishness from the slightest emotional distress.. i feel like I've only truly grown up on the outside, and it's painful to remain this way, but it's far from the)
[04:16:20] *** Joins: nayfie (~nayfie@159.196.54.128)
[04:18:02] *** Quits: Turingtoast (~Tino@200116b8607c7b00203f0e7b88dbdbdb.dip.versatel-1u1.de) (Ping timeout: 258 seconds)
[04:18:46] *** Joins: Turingtoast (~Tino@200116b86092c70035ff99991c1366c3.dip.versatel-1u1.de)
[04:22:14] *** Quits: Turingtoast (~Tino@200116b86092c70035ff99991c1366c3.dip.versatel-1u1.de) (Client Quit)
[04:28:06] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:28:55] *** Joins: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com)
[04:31:37] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[04:31:39] <cloudcell> Hello, can anyone explain why in group theory this problem has a solution with 90 degree and 270 degree rotations and not 180 degree rotation?
[04:31:42] <cloudcell> https://usercontent.irccloud-cdn.com/file/ur4Z5riS/image.png
[04:31:45] *** Joins: traxex (traxex@user/traxex)
[04:32:50] <cloudcell> so b is supposed to be a generator of the group
[04:33:02] *** Joins: Player001 (~Player001@user/player001)
[04:33:15] <cloudcell> but it is not listed as one of the answers :(
[04:33:49] <qergle> they want generators
[04:34:08] <cloudcell> yes, why is b not a generator?
[04:35:19] <qergle> because b doesn't generate
[04:35:29] <qergle> what do you get if you keep rotating 180 degrees over and over?
[04:35:59] *** Joins: quartz (~quartz@user/quartz)
[04:36:23] <cloudcell> oh, i see
[04:36:26] <quartz> Can someone help explain the solution to this proof (#4): https://i.ibb.co/vY7BBjX/image.png    Solution: https://i.ibb.co/jrQgSFR/image.png
[04:36:32] <cloudcell> thank you qergle
[04:36:49] <qergle> you would never have D (top left) and A (bottom left) left for example
[04:36:51] <cloudcell> I get only two points
[04:36:54] *** Joins: frelleck (~frelleck@user/frelleck)
[04:36:55] <cloudcell> yes
[04:37:06] <Z-module> Notice the stupid typo: they swapped 180 and 90 deg., in the list of what e,a,b,c are
[04:37:14] <qergle> yes, you only get the initial square the one rotated 180, back and forth, those 2
[04:37:15] <quartz> I understand everything up until where they use the pumping lemma.
[04:37:41] <Z-module> presumably they wanted the values of e,a,b,c in the same order. They goofed.
[04:37:49] <qergle> the initial square *and* the one rotated 180 (typo fix), back and forth, those 2.
[04:38:44] <qergle> cloudcell: welcome
[04:38:48] <cloudcell> yes, I understood
[04:38:50] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[04:38:58] <cloudcell> thank you everyone
[04:41:18] <quartz> I thought if you used the pumping lemma for context free languages, you had to assign the individual letters in the string to u, v, x, y, z. How can they "pump down" and the string not contain a, when a is not a variable they are pumping?
[04:43:35] *** Quits: johnkeats6 (~johnkeats@2804:14c:32:a0cc:ee:5075:9596:3cb8) (Ping timeout: 264 seconds)
[04:45:57] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[04:46:12] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[04:49:28] *** Quits: bowlofeggs (~bowlofegg@fedora/bowlofeggs) (Ping timeout: 258 seconds)
[04:51:16] *** Joins: bowlofeggs (~bowlofegg@fedora/bowlofeggs)
[04:59:20] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[05:03:45] *** Joins: newpy (~newpy@206.168.231.90)
[05:04:09] <int-e> quartz: there's only one a, so if vy contains a then uv^0xy^0z doesn't contain a anymore.
[05:04:18] *** Parts: YellowSuB (~YellowSuB@user/yellowsub) (WeeChat 3.2)
[05:04:20] <newpy> if I have a1+a2+a3=1 and b1+b2+b3=1, then can I say that a1*b1 + a2*b2 + a3*b3 = 1?
[05:04:36] <qergle> newpy: doubt it
[05:04:50] <qergle> what if they are all 1/3?
[05:04:52] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:05:27] <newpy> qergle, yea good point, I'm watching a video that has a product of two convex combinations and says the result is a convex combination
[05:05:53] <newpy> oh wait nevermind, there's an extra summation operation going on, hmm
[05:06:13] <newpy> ohhh, I see
[05:06:22] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[05:06:24] <newpy> each a_i multiplied by each b_i
[05:06:28] <newpy> that = 1
[05:06:53] <quartz> int-e: Oh yeah :)
[05:06:54] <qergle> that's just expanding the product
[05:07:04] <qergle> (a1+a2+a3)(b1+b2+b3)
[05:07:19] <quartz> int-e: So what was the whole point of them doing w = a b^p c^p d^p ?
[05:07:49] <quartz> When they only really use the the partitioning rule u v^i x y^i z
[05:07:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:08:08] <int-e> quartz: it's an element of the intersection of L and M
[05:08:13] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[05:08:51] <int-e> quartz: you need a string to partition
[05:09:11] <quartz> int-e: Yeah, but they showed that earlier in the proof quite explicitly. I don't understand how w = a b^p c^p d^p does anything here or how it factors into the proof
[05:09:30] <quartz> int-e: yeah... so why add the p's?
[05:09:37] <quartz> Sorry I'm slow.
[05:09:59] <quartz> LIke what good are the p's here?
[05:10:07] <switchnode> quartz: they're used to get the string long enough to restrict the characters that can appear in vxy
[05:10:08] <int-e> quartz: it's the usual pumping lemma proof; you pick an element of the language; you pump it, and the result is no longer in the language, so it doesn't have the pumping property
[05:10:18] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:11:43] <quartz> Uhhh
[05:11:44] <int-e> quartz: p comes from the pumping property; only strings of at least length p are subject to pumping. Note that |vxy| <= p is actually used as well.
[05:12:09] <quartz> int-e: But how do you know what p is? You can't assign p a number....
[05:12:46] <quartz> switchnode: sorry I don't understand. How does p restrict the character that can appear in vxy?
[05:12:53] <int-e> quartz: The proof has an implicit step: Assume that L n M is context free. Then it has the pumping property for /some/ valuye p.
[05:14:08] <quartz> Yeah, but how do you know what p is?
[05:14:26] <switchnode> quartz: it doesn't matter what p is; the pumping lemma says that such a p exists, you take that as a premise, and then you use the existence of _some_ p to generate a contradiction
[05:14:30] <quartz> If you can't assign p a number, than how will you know |vxy| < p
[05:14:31] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[05:14:40] <int-e> quartz: It exists. You don't need a concrete value.
[05:15:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:15:55] <int-e> quartz: You get a value for p from the pumping lemma for CFGs.
[05:17:11] <quartz> Uhhh
[05:18:30] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:18:46] <quartz> Going off what switchnode said, I'm not sure how |vxy|<= p means that vy cannot contain the symbols b, c , d
[05:19:26] <switchnode> try sliding a window of length p along the string ab^pc^pd^p.
[05:19:31] <int-e> because b^pc^pd^p has length 3p
[05:19:55] <switchnode> you can fit at most two different characters at once
[05:20:28] <int-e> actually you can just focus on the c^p part
[05:21:01] *** Quits: xff0x (~xff0x@2001:1a81:5287:aa00:fcfc:7af3:e2b:ab16) (Ping timeout: 252 seconds)
[05:21:32] <quartz> Uhhhh.
[05:21:37] <int-e> the only way to get all of b, c, and d, would be for bc^pd to be a substring of vxy
[05:21:43] *** Joins: Kaylah32 (~Kaylah@ptr-eit6u3hdllrcqjwgwel.18120a2.ip6.access.telenet.be)
[05:21:44] <int-e> but bc^pd has length p+2.
[05:21:51] <quartz> Sorry I'm REALLY slow.
[05:21:58] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-f4ff-b696-f747-db95.res6.spectrum.com)
[05:22:58] *** Joins: xff0x (~xff0x@2001:1a81:52c0:f300:645b:c6c7:cd20:13be)
[05:23:29] *** Quits: Kaylah (~Kaylah@ptr-eit6u3gc37tjuo1lee2.18120a2.ip6.access.telenet.be) (Ping timeout: 256 seconds)
[05:25:09] <quartz> Wow I still don't get the last part
[05:25:14] <quartz> LIke... this isnt' that hard
[05:26:51] <switchnode> uh, i think it's not entirely your fault: they have "a, b, c" where they should have "b, c, d".
[05:28:09] *** Joins: b93 (~I@a89-152-175-20.cpe.netcabo.pt)
[05:28:20] *** Joins: seninha (~seninha@user/seninha)
[05:28:37] *** Quits: CryptoDavid (uid14990@id-14990.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:29:45] <quartz> switchnode: Where
[05:30:01] *** Quits: deavmi (~tbk@user/deavmi) (Read error: Connection reset by peer)
[05:30:15] *** Joins: deavmi (~tbk@user/deavmi)
[05:30:15] <quartz> I still don't get how the variables vxy cannot contain the three symbols b,c and d
[05:30:19] <switchnode> "at least one of the three symbols a, b, c [sic] appears more than p times"
[05:30:36] <switchnode> vxy is a contiguous substring of w. right?
[05:30:58] <int-e> quartz: just look at the string... if you have b and d you need to have *all* the c-s as well.
[05:31:16] <int-e> but that results in a string longer than p.
[05:31:42] *** Quits: BUSY (~BUSY@user/busy) (Remote host closed the connection)
[05:32:09] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[05:32:45] <int-e> yeah "contiguous" is the key
[05:32:57] <quartz> int-e: How, if you don't know what p is?
[05:33:03] <quartz> LIke this makes no sense without knowing p
[05:33:11] *** Joins: KevinX (~KevinX@94.140.8.84)
[05:33:12] <quartz> Yeah the contiguous part makes sense.
[05:33:24] <quartz> BUt I feel like I'm goign around in a circle with "so... what is P?"
[05:33:25] <int-e> you have p
[05:33:28] <quartz> "well you don't know what p is"
[05:33:39] <quartz> "There is no way to know p"
[05:34:02] <int-e> if you have a concrete CFG for your language you can compute p from that
[05:34:53] <int-e> (it's not nice. If the CFG is in Chomsky normal form it's something like 2^N or 2^(N+1) where N is the number of non-terminals in the grammar)
[05:35:15] <int-e> (you're *better off* not worrying about what exactly p is)
[05:35:27] <quartz> I mean, I feel I don't have to do that to understand this simple problem
[05:35:31] <quartz> Yeah exactly
[05:36:49] <int-e> As I wrote previously, the proof is by contradiction, assuming the language is context-free; therefore it has the pumping propert, therefore, you get some natural number p for which the pumping property holds. And that's the p you use in the proof from that point onwards.
[05:36:52] *** Joins: BUSY (~BUSY@user/busy)
[05:37:21] <int-e> Hrm.
[05:37:53] *** Quits: KevinX (~KevinX@94.140.8.84) (Ping timeout: 244 seconds)
[05:38:07] <int-e> There's no good terminology to distinguish the pumping property (there exists a p for which we can pump strings of length p or greater) and just the latter part with p already known, is there...
[05:38:13] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Ping timeout: 256 seconds)
[05:39:18] <quartz> Why is this so hard for me lol
[05:39:38] <switchnode> quartz: are you familiar with euclid's proof of the irrationality of sqrt(2)?
[05:39:52] <quartz> switchnode: I've no idea
[05:40:01] <quartz> I'm just trying to focus on understanding this proof
[05:40:08] <quartz> Because it's honeslty not that hard
[05:40:17] <switchnode> https://www.mathsisfun.com/numbers/euclid-square-root-2-irrational.html
[05:41:22] *** Quits: mawk (~mawk@wireguard/contributor/mawk) (Ping timeout: 252 seconds)
[05:41:41] <quartz> Why not just assign v = b, x = c y = d
[05:41:47] <quartz> There, they contain the symbols
[05:41:53] <int-e> quartz: So the pumping property is an existential statement... "there exists a p such that [...]". The way you use such properties in proofs is to obtain a witness for the existential... a concrete (but unknown) value p for which the "[...]" part holds.
[05:41:59] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 246 seconds)
[05:42:17] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[05:43:00] <switchnode> to reason by analogy from the (much simpler) euclid proof, you assume _some_ p and q exist such that p/2 = sqrt(2)... then you use that to generate a contradiction. it doesn't matter what p and q "are" (since they can't even exist!)
[05:43:14] *** Quits: causative (~halberd@user/causative) (Remote host closed the connection)
[05:43:40] *** Quits: CCFL_Man (6cba11e9b3@c-73-64-119-64.hsd1.pa.comcast.net) (Ping timeout: 252 seconds)
[05:44:15] *** Joins: causative (~halberd@user/causative)
[05:44:40] *** Joins: mawk (~mawk@serveur.io)
[05:44:41] *** Quits: mawk (~mawk@serveur.io) (Changing host)
[05:44:41] *** Joins: mawk (~mawk@wireguard/contributor/mawk)
[05:44:59] *** Joins: KevinX (~KevinX@94.140.8.81)
[05:45:20] <switchnode> you cannot assign vxy = bcd. |vxy| <= p and therefore p >= 3, but 'bcd' does not appear anywhere in in abbbcccddd (or abbbbccccdddd, or etc etc).
[05:45:36] *** Joins: qeed (~qeed@072-190-106-143.res.spectrum.com)
[05:47:50] <quartz> switchnode: But how did you get those strings?
[05:48:07] <quartz> And i thought p does not exist.
[05:48:49] <int-e> quartz: your assignment makes vxy = bcd. so bcd must be a substring of ab^pc^pd^p, so p = 1 (there can only be one c), but your vxy is too long for that p.
[05:48:50] <switchnode> ab^pc^pd^p
[05:49:02] <int-e> contiguous substring
[05:49:04] *** Quits: econo (uid147250@user/econo) (Ping timeout: 252 seconds)
[05:49:36] *** Quits: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com) (Read error: Connection reset by peer)
[05:49:39] *** Quits: bjs (sid190364@user/bjs) (Read error: Connection reset by peer)
[05:49:48] <switchnode> (we're currently in the hypothetical where p does exist)
[05:49:51] <int-e> always keep in mind that uvxyz = w = a b^p c^p d^p
[05:50:05] *** Quits: msch (sid28472@id-28472.tinside.irccloud.com) (Ping timeout: 260 seconds)
[05:50:10] *** Joins: nullcone_ (uid11626@helmsley.irccloud.com)
[05:50:11] *** Quits: nullcone (uid11626@id-11626.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[05:50:11] *** Quits: cuppajoeman (sid521943@id-521943.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[05:50:11] *** nullcone_ is now known as nullcone
[05:50:17] *** Joins: msch (sid28472@tinside.irccloud.com)
[05:50:23] *** Joins: econo (uid147250@user/econo)
[05:50:38] <int-e> so u is a prefix of w, z is a suffix, and vxy is the substring between those tow.
[05:50:49] <int-e> *two
[05:50:52] *** Quits: jyc (sid40911@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:51:04] *** Quits: itok_ (sid418430@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:51:04] *** Quits: redlegion (sid429547@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:51:08] *** Joins: lind{at}yahoo (uid486956@tinside.irccloud.com)
[05:51:09] *** Joins: bjs (sid190364@user/bjs)
[05:51:29] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[05:51:34] *** Quits: jwpapi (sid502614@id-502614.uxbridge.irccloud.com) (Ping timeout: 258 seconds)
[05:51:49] *** Quits: xihr (uid524153@id-524153.lymington.irccloud.com) (Ping timeout: 252 seconds)
[05:51:49] *** Quits: dez (uid92154@user/dez) (Ping timeout: 252 seconds)
[05:51:50] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[05:52:24] *** Joins: cuppajoeman (sid521943@id-521943.hampstead.irccloud.com)
[05:52:27] *** Joins: xihr (sid524153@id-524153.lymington.irccloud.com)
[05:52:32] *** Joins: jwpapi (sid502614@id-502614.uxbridge.irccloud.com)
[05:52:50] *** Joins: dez (uid92154@user/dez)
[05:53:02] *** Joins: jyc (sid40911@id-40911.ilkley.irccloud.com)
[05:53:10] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[05:53:16] *** Joins: redlegion (sid429547@id-429547.ilkley.irccloud.com)
[05:53:50] *** Joins: itok_ (sid418430@id-418430.ilkley.irccloud.com)
[05:53:59] <quartz> Sorry this makes no sense
[05:54:03] <quartz> FIrst p exists.
[05:54:05] <quartz> Now it does not
[05:54:07] <quartz> Than it does
[05:54:16] <int-e> ...
[05:54:17] <quartz> What is P? I dunno, make up a number
[05:54:34] <int-e> You are in the middly of a proof by contradiction.
[05:54:38] <quartz> What is p? a^pb^pc^p so p = 3?
[05:54:42] <int-e> *middle, can't type
[05:55:13] <int-e> But I've already spelled that out two times, not going to do it again.
[05:55:26] <quartz> I'm going to try and read and re read it again
[05:55:30] <quartz> Sorry I"m just frustrated.
[05:55:39] <switchnode> do you understand the meaning of the notation ^p here?
[05:56:08] *** Joins: magic_ninja_work (~sparkie1@4.4.16.52)
[05:57:55] <quartz> switchnode: ^p means "to the power of p". a^p means: a repeated p times
[05:58:56] <switchnode> okay. your last question made me think that perhaps you didn't.
[05:58:58] <int-e> This happens in natural languages too... "if I had a million dollars I would buy a house" -- so this is talking about a million dollars, and a house, neither of which exists. It's working with a hypothesis that's turns out to be false.
[06:01:09] *** Quits: jyc (sid40911@id-40911.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:01:09] *** Quits: jwpapi (sid502614@id-502614.uxbridge.irccloud.com) (Ping timeout: 258 seconds)
[06:01:35] *** Quits: cuppajoeman (sid521943@id-521943.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[06:02:16] *** Quits: redlegion (sid429547@id-429547.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[06:02:16] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Ping timeout: 252 seconds)
[06:02:18] *** Quits: c4s1 (sid519549@id-519549.hampstead.irccloud.com) (Ping timeout: 258 seconds)
[06:02:20] *** Quits: nrr_ (sid20938@id-20938.lymington.irccloud.com) (Ping timeout: 260 seconds)
[06:02:41] *** Quits: itok_ (sid418430@id-418430.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:02:47] *** Quits: dez (uid92154@user/dez) (Ping timeout: 264 seconds)
[06:02:47] *** Quits: xihr (sid524153@id-524153.lymington.irccloud.com) (Ping timeout: 264 seconds)
[06:03:02] *** Joins: jyc (sid40911@ilkley.irccloud.com)
[06:03:03] *** Joins: cuppajoeman (sid521943@hampstead.irccloud.com)
[06:03:11] *** Joins: jwpapi (sid502614@uxbridge.irccloud.com)
[06:03:11] *** Joins: c4s1 (sid519549@hampstead.irccloud.com)
[06:03:45] *** Joins: nrr_ (sid20938@lymington.irccloud.com)
[06:03:46] *** Joins: xihr (sid524153@lymington.irccloud.com)
[06:04:03] <quartz> Uhh
[06:04:08] *** Joins: dez (uid92154@user/dez)
[06:05:23] <quartz> So v and y are the only two variables that we can pump right? So, the first step is to get a string with p in it, such as a b^ p c^p d^p and THEN partition it using u v^i x y^i z
[06:06:04] <int-e> there's no ^i in the partitioning step
[06:08:14] <quartz> i is used in the pumping lemma for context free languages u v^i x y^i z
[06:08:34] <quartz> I think the i exponent means you can pump on any letter you assign to v and y
[06:09:20] <int-e> note that after you partition w as uvxyz, the variables uvxyz have a similar role as p... these substrings exist, you know that w = uvxyz and that |vy| >= 1, |vxy| <= p. But you don't know what those substrings actually are, so you get to do some fun case analysis next, covering all possibilities.
[06:10:23] <switchnode> you can pump the _entire_ v, and the _entire_ y. it may be possible for v to be, say, 'efg', so that v^i would be 'efgefgefg...'
[06:11:42] <biberao> where can i get a graphical calculator emulator freebie?
[06:11:43] <biberao> :X
[06:14:17] <quartz> I keep rereading this over and over
[06:14:33] <decker> desmos?
[06:14:53] <quartz> I won't rest until I understand why |vxy| <= p and vy cannot contain all three symbols b,c and d.
[06:16:17] <biberao> gn
[06:16:23] *** Joins: redlegion (sid429547@ilkley.irccloud.com)
[06:16:36] <int-e> quartz: tbf, this may be the first time ever that you've worked with a forall-exists-forall-exists-forall statement... (forall CFLs, there exists a p such that for all w with |w| >= p there exists u,v,x,y,z, with [...] such that for all i, u v^i x y^i z is in the language.
[06:17:01] *** Quits: jero98772 (~jero98772@2800:484:1d80:d8ce:3490:26c5:1782:da8c) (Remote host closed the connection)
[06:17:07] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[06:18:19] *** Joins: itok_ (sid418430@ilkley.irccloud.com)
[06:18:22] <quartz> ONLY strings of length p can be pumped right?
[06:18:32] <switchnode> strings of _at least_ length p.
[06:18:34] <int-e> no, they can be longer as well
[06:18:54] <int-e> (but w should be in L, where L is the language in question; I abridged a bit too much there)
[06:19:08] <switchnode> that's why we can use ab^pc^pd^p, with length 3p+1
[06:20:21] *** Quits: aaii (~aaii@user/aaii) (Remote host closed the connection)
[06:24:14] <switchnode> as for why |vxy| <= p, that's one of the conditions in the pumping lemma. if a language is context-free, then if a string in that language is longer than p, then you can always partition it such that |vy| >= 1 AND |vxy| <= p AND all strings uv^ixy^iz are in the language.
[06:24:35] *** Quits: biberao (~m@user/biberao) (Quit: WeeChat 2.3)
[06:25:16] *** Quits: Kaylah32 (~Kaylah@ptr-eit6u3hdllrcqjwgwel.18120a2.ip6.access.telenet.be) (Quit: Client closed)
[06:25:41] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[06:26:29] <quartz> switchnode: When they say "vy cannot contain all three symbols b,c and d." why don't they include x in vy?
[06:26:45] <quartz> So it would ready "vxy cannot contain all three symbols, b, c, d
[06:26:58] *** Quits: magic_ninja_work (~sparkie1@4.4.16.52) (Ping timeout: 244 seconds)
[06:26:59] <quartz> Because you're only allowed to pump v and y?
[06:27:23] <quartz> Uhhhh never mind
[06:27:40] <quartz> We first partition the string, than pump according to what variables we assigned each letter to.
[06:28:28] <switchnode> yes; it's true that vxy also cannot contain all three symbols, but their point is that when you pump v and y, you have to increase the number of at least one of, but not all of, bs, cs, and ds
[06:29:25] <switchnode> (and so they'll no longer have equal counts and the resulting string won't be in L cap M.)
[06:33:02] <quartz> OK, so in the pumping lemma for context free languages, when they say: uv^ixy^iz, the i is there to denote what exactly?
[06:33:15] <quartz> I thought that meant you can pump only those variables, which is not true.
[06:33:40] <quartz> You can only pump the variables that you assign p to for some string. w = ab^pc^pd^p, which means you can only pump on b c d
[06:33:56] <switchnode> no, you're mistaken.
[06:34:22] <quartz> Oh :(
[06:34:25] <quartz> I"ll never get this lol
[06:35:16] <switchnode> you can pump just v and y: so uxz, uvxyz, uvvxyyz, ... all must be in L to satisfy the third condition.
[06:36:48] <switchnode> in _this particular problem_, vy can't contain a, but that's because if it did then uxz wouldn't be in the language (so the third condition wouldn't be satisfied).
[06:37:04] <quartz> I just don't get how ab^pc^pd^p and uv^ixy^iz are related
[06:37:22] <quartz> one is used for pumping, like a string to be partitioned, and the other does the partitioning
[06:37:44] <quartz> Yeah, I understand why a needs to be in the langauge.
[06:38:23] <int-e> a isn't in the language.
[06:43:15] <quartz> uhhhhh
[06:43:27] *** Joins: diogenesnuts (~diogenesn@143.200.125.106)
[06:44:31] *** Quits: diogenesnuts (~diogenesn@143.200.125.106) (Remote host closed the connection)
[06:44:51] <quartz> So, my understanding that first we need to get a string w, assign some p's to it, like ab^pc^pd^d and THEN use uvxyzto partition it is wrong?
[06:45:09] <quartz> Because I don't understand how the two relate
[06:45:12] <int-e> "assign some p's to it" makes no sens
[06:45:13] <int-e> e
[06:45:46] <switchnode> we don't "assign some p's"; we start with some hypothetical p, and use it to generate a bad example, a string which can't be partitioned in a way which satisfies all three conditions.
[06:47:16] <int-e> Once you've got p, you pick a string in the language in a clever way; that string is a b^p c^p d^p. There are no p-s in the string, these are p-fold repetitions of a single letter.
[06:48:13] <quartz> SOrry for the bad wording
[06:48:28] <int-e> So that's your w. And then you go back to the pumping property and because w is in L n M, and |w| >= p, it splits w into some u,v,x,y,z for you.
[06:48:43] <int-e> such that u v^i x y^i z is in L n M for all i >= 0.
[06:48:59] <int-e> And |vy| >= 1 and |vxy| <= p.
[06:49:26] <int-e> Hmm, apparently the text uses vy != epsilon rather than |vy| >= 1. It's equivalent.
[06:49:32] *** Joins: Carbonflux (~Carbonflu@c-24-56-228-141.customer.broadstripe.net)
[06:53:43] <quartz> Uhh
[06:54:35] *** Joins: riotQontrol (~quassel@177-205-58-66.gci.net)
[06:56:29] <quartz> So... p is used to show that we can simply pump whatever letters we've assigned p to
[06:57:08] <quartz> Than, we have to divide w into the requirements of the context free pumping lemma
[06:57:41] *** Joins: magic_ninja_work (~sparkie1@4.4.16.52)
[06:58:14] <quartz> If we can do so, than the string is in the langauge
[06:59:25] <switchnode> no and no
[06:59:42] <quartz> omg
[06:59:49] <quartz> I'm beating myself literally because I can't get this
[07:00:38] <switchnode> second of all, you've got your implication backwards: if the string is in the language (and the language is context-free and the string is longer than p), then we can partition w according to the conditions
[07:01:08] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:02:08] <quartz> omg
[07:02:22] *** Joins: nayfie_ (~nayfie@159.196.54.128)
[07:02:33] <quartz> I just don't get how the two are related.
[07:02:48] <quartz> By the two, I mean, p and the partitioning part.
[07:03:08] *** Quits: magic_ninja_work (~sparkie1@4.4.16.52) (Ping timeout: 244 seconds)
[07:03:08] <quartz> p is basically used to determine the LENGTH
[07:03:14] <quartz> that's it, it has nothing to do with pumping
[07:03:23] <quartz> Because we can only pump on v and y
[07:04:03] <switchnode> yes!
[07:04:10] <switchnode> it's related in two ways:
[07:05:12] *** Quits: nayfie (~nayfie@159.196.54.128) (Ping timeout: 244 seconds)
[07:05:48] *** Quits: nayfie_ (~nayfie@159.196.54.128) (Client Quit)
[07:06:14] *** Joins: ysftaha (~ysftaha@d24-57-234-201.home.cgocable.net)
[07:08:50] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[07:13:44] <quartz> So in the solution, they say: |vxy| <= p, they are taking p to = 3 because there are 3 p's in ab^pc^pd^p?
[07:14:23] <int-e> no
[07:14:25] <switchnode> no. we do not know what p is, and it doesn't matter.
[07:14:52] <int-e> p = 3 may have come up as an example in the discussion here. the value of p in the proof is unknown.
[07:15:00] <int-e> And that's *fine*.
[07:15:18] <quartz> So how do they know if something is less than p?
[07:15:20] <quartz> Ahhh
[07:15:59] *** Quits: specing (~specing@user/specing) (Ping timeout: 264 seconds)
[07:15:59] *** Joins: specing_ (~specing@user/specing)
[07:17:51] *** specing_ is now known as specing
[07:17:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:22:00] *** Joins: savask (~savask@Powder/Developer/savask)
[07:24:18] <quartz> So, why does ab^pc^pd^p have three p's? how does p have to do with length?
[07:24:41] <int-e> do you know what b^p means?
[07:24:42] *** Quits: firewyre- (~firewyre@pool-71-184-153-62.bstnma.fios.verizon.net) (Quit: ZNC - https://znc.in)
[07:25:00] <int-e> (I know switchnode asked that before but I'm not sure it got answered)
[07:25:12] <quartz> b^p means b repeated p times
[07:25:24] <int-e> if you do know, what is the length of b^p?
[07:25:44] <quartz> p is unspecified in this context, so I don't know
[07:25:52] <int-e> ...
[07:25:54] <int-e> it's p
[07:26:10] <ysftaha> how do you guys deal with a petty professor with a stick up his behind?
[07:26:20] <quartz> ysftaha: pull out the stick
[07:26:33] <quartz> int-e: a^3 is a repeated 3 times
[07:26:49] <switchnode> well, as i was going to say: the proof of the pumping lemma itself gives us the relationship between p and the pumping property (specifically, the requirement that a pumpable string must be at least p in length, and the requirement that |vwx| <= p)
[07:27:23] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:27:30] <switchnode> (the rigorous proof isn't important, but you may find the diagram in https://en.wikipedia.org/wiki/Pumping_lemma_for_context-free_languages illuminating)
[07:27:31] <int-e> a^p has length p. We don't have to know the value of p to know that this is true.
[07:27:43] <ysftaha> quartz: lol, too late. Integrated into it, he effectively morphed into a creater where the stick is part of him
[07:28:05] <ysftaha> creature*
[07:28:14] *** Joins: llh (~llh@user/llh)
[07:28:25] <int-e> (Sigh. One level deeper into the rabbits' den... pumping lemma. working with quantifiers. Working with variables...)
[07:28:59] <int-e> quartz: More relevantly, what's the length of a b^p c^p d^p? No "I don't know", use p as a variable to express it.
[07:29:06] *** Joins: firewyre (~firewyre@pool-71-184-153-62.bstnma.fios.verizon.net)
[07:29:27] <quartz> int-e: 3p?
[07:29:36] <int-e> Close?
[07:29:37] <quartz> 3p+1
[07:29:39] <int-e> It's relevant because we need that length to be at least p.
[07:29:45] <int-e> So is 3p+1 >= p?
[07:29:53] <quartz> Yes
[07:30:28] <int-e> Good. So we /can/ use the pumping property to split up w = a b^p c^p d^p.
[07:30:56] <int-e> |w| >= p is true. Note that we didn't have to know p's value to figure that out.
[07:32:21] <switchnode> and when we're actually doing pumping lemma proofs, we care about p because it helps us choose our bad string, the one we can't partition properly. we can use it to abuse the |vxy| <= p condition, often to force parts of the string that 'should care' about each other (like the number of bs and the number of ds in this example) too far apart to 'communicate'
[07:33:19] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-793f-39d2-9560-b7d9.res6.spectrum.com) (Read error: Connection reset by peer)
[07:33:40] <quartz> switchnode: but how does p help us choose bad strings?
[07:33:54] <int-e> We used p to pick a b^p c^p d^p
[07:34:11] <int-e> out of all the a b^k c^k d^k with k>=1 that we could have picked.
[07:36:07] <switchnode> right, and as a result the bs and the ds are now too far apart to keep in sync, so we can't satisfy the last condition (that uv^ixy^iz is in L for all natural numbers i).
[07:37:26] <int-e> quartz: btw have you covered the pumping lemma for regular languages?
[07:38:32] <quartz> int-e: Yes
[07:38:43] <quartz> I'm still trying to get this last part of the proof so it makes sense
[07:39:29] <int-e> So you should have seen the basic proof setup before... assume a language is regular, obtain the corresponding pumping length, then work out a counterexample to the pumping property from there.
[07:40:32] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 265 seconds)
[07:40:39] <quartz> Yes, but the length of p is what bothers me,
[07:40:45] <quartz> I still can't get it
[07:40:56] <quartz> I'm not sure I ever will at this point because it's been like 2 hours of htis
[07:40:57] <int-e> "length of p" is a type mismatch, p is a natural number, not a string
[07:41:06] <quartz> Ok
[07:41:15] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[07:41:49] <quartz> In this video at 4:50, he assigns p a number: https://www.youtube.com/watch?v=eQ0XkUk3qGk
[07:42:08] <int-e> The most relevant bit for the last part is that c^p has length p, |c^p| = p.
[07:42:17] <int-e> I'm not going to look at videos.
[07:44:29] <|smlckz|> you won't look at pdfs as well, I think?
[07:44:38] <int-e> I'm fine with pdfs
[07:44:51] <int-e> I can skim pdfs, can't skim videos.
[07:45:25] <switchnode> amen
[07:45:37] <|smlckz|> ~12 h ago, i posted 1 page pdf, none bothered to look..
[07:46:00] <switchnode> you didn't ask a specific question
[07:46:33] *** Quits: jj5 (~jj5@111-220-243-3.dyn.dodo.net.au) (Quit: Konversation terminated!)
[07:47:58] <switchnode> if you say 'is this wrong' and link to a document, i don't know whether it's going to be 1 page or 1000, much less whether it concerns something i could be of any use on
[07:48:42] *** Quits: Europa (~Europa@user/europa) (Remote host closed the connection)
[07:49:05] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 260 seconds)
[07:49:27] <quartz> Ok, so I think I may get it
[07:50:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:51:07] *** Joins: Europa (~Europa@user/europa)
[07:51:12] <quartz> We use ab^pc^pd^p to determine the length of a string that SHOULD be within the substring |vxy| <= p where vxy are assigned letters within string w of our choosing.
[07:51:59] <quartz> If we can find a partition of string w into vxy so that |vxy| <= p, than that condition is satisified
[07:52:36] <switchnode> not quite sure what you mean by "determine the length of a string that SHOULD be within the substring"; can you rephrase?
[07:52:48] <|smlckz|> here it is, for the last time.. https://ttm.sh/eI4.pdf i won't bother you any more
[07:52:49] <int-e> |smlckz|: it's okay to ask a question multiple times btw, especially at different times of the day... you'll get different audiences that way. (guideline... maybe once per hour at most? people will tell you if they think you're spamming).
[07:53:22] <|smlckz|> int-e: ah
[07:53:56] <switchnode> i highly recommend stating the problem directly in the channel, or at least describing the subject area
[07:55:31] <|smlckz|> subject area: functions and their inverses, in R; differentiability
[07:56:39] <|smlckz|> and a little bit of chain rule
[07:56:42] <cherim> Actual subject area is "full A4 page of chain rule computations for h(g(g(x)) from JEE"
[07:57:08] <quartz> I'm sorry I still don't get how using p can allow us to exploit the |vxy| >= p rule, if we can never truely know what p is
[07:57:19] <quartz> I'm just too hung up on assigning p an integer.
[07:57:22] *** Quits: tacegory (~tacegory@user/tacegory) (Remote host closed the connection)
[07:57:25] <quartz> I can't get that out of my damn mind
[07:59:02] <quartz> Like... where does the length come from? It must come from
[07:59:05] <quartz> p
[07:59:06] <switchnode> if we make part of the string, say, k times p long, then |vxy| can be at most one kth of the string, no mattter what p is. does that help?
[07:59:13] *** Joins: Guest8086 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[07:59:21] <switchnode> *matter
[07:59:56] <qergle> maybe asking someone to spend the time to proof an entire page of computations is a bit much, try asking a specific part you're unsure of
[08:00:07] <cherim> I read it the first time it was posted, even checked almost everything (by reflex), but it was so repulsive I couldn't make myself talk about it (still can't)
[08:00:31] <cherim> The problem, not the pdf. Pdf is actually well-written
[08:00:46] *** Joins: jj5 (~jj5@111-220-243-3.dyn.dodo.net.au)
[08:01:00] <int-e> Hmm, what is the question though?
[08:01:14] <cherim> qergle: You didn't answer last time, is Colbourn the book with random papers from 1987?
[08:01:26] *** Quits: Oli (~Unknown@user/oli) (Quit: leaving)
[08:01:35] <qergle> i didn't see any response. the one i mean is his "handbook"
[08:01:40] <int-e> and why wouldn't you derive h(x) = f(f(x)) before delving into the derivative stuff
[08:02:26] <cherim> "Handbook of combinatorial designs" is not really for reading
[08:02:28] <Guest8086> int-e: that's recursive
[08:02:38] <Guest8086> recursive definitions are meaningless without an initial condition
[08:02:45] <qergle> i am not reading it as a text, it's a reference that i'm referring to for specific things
[08:03:12] <cherim> http://www.maths.qmw.ac.uk/~pjc/design/resources.html is a good collection
[08:03:27] <int-e> Guest8086: what was the point of that? you don't have enough context to make a meaningful contribution.
[08:04:06] <qergle> thanks, i think i had seen that before. it looks good.
[08:04:19] <Guest8086> int-e: My IQ is over 170. I can infer things without context to the point of near telepathy. You'll understand when the problem is solved or maybe in a few days ;)
[08:04:21] <cherim> If you are new to designs, my favorite intro text is Anderson-Honkala http://www.maths.qmw.ac.uk/~pjc/design/notes.html#ah
[08:04:29] <Guest8086> when it occurs to you
[08:04:41] <Guest8086> over a morning coffee or something
[08:04:41] *** ChanServ sets mode: +q *!*@S01069050ca4e3573.cg.shawcable.net
[08:04:47] <cherim> It can still be found through archives
[08:04:48] <int-e> what-ever.
[08:05:14] <cherim> Works great as a pre-reading for any more extensive book
[08:05:49] <cherim> At least I found Cameron's texts on designs almost unreadable without such start
[08:06:05] *** Quits: riotQontrol (~quassel@177-205-58-66.gci.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:06:50] <qergle> i've not seen a .ps document in a long time
[08:07:07] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 252 seconds)
[08:08:29] <int-e> Oh so the question was whether the pdf is correct? Looks good to me, if a bit clumsy (because g(f(x)) = x can be used in better ways.)
[08:08:36] *** ChanServ sets mode: -q *!*@S01069050ca4e3573.cg.shawcable.net
[08:09:12] *** Quits: b93 (~I@a89-152-175-20.cpe.netcabo.pt) (Remote host closed the connection)
[08:09:13] <int-e> Guest8086: context is this pdf, btw, https://ttm.sh/eI4.pdf. There's no way you could infer that from what you saw between joining and chiming in.
[08:09:42] <quartz> God I hate myself so much
[08:10:01] <quartz> I can't get very simple concepts. I think I'm done. Sorry to waste everyone's time.
[08:10:11] *** Quits: Europa (~Europa@user/europa) (Remote host closed the connection)
[08:10:12] <quartz> int-e: switchnode thanks for your help
[08:10:16] <|smlckz|> int-e: tell me how can i make it better ;) that was the point of my query.. suggestions for improvements
[08:10:49] *** Quits: Echoz (~chris@user/echoz) (Quit: WeeChat 3.0.1)
[08:11:08] *** Joins: Europa (~Europa@user/europa)
[08:11:10] <qergle> cherim: found it circa 2006
[08:11:20] <int-e> |smlckz|: Well, see what happens if you plug in f(f(x)) for x in h(g(g(x))) = x.
[08:11:28] <switchnode> quartz: no worries. sleep on it, usually helps
[08:11:30] *** Joins: pluri_ (~pluri@user/pluri)
[08:12:21] *** Joins: Echoz (~chris@user/echoz)
[08:12:29] <|smlckz|> ah h o g o g = I => h o g o g o f = f => h o g o I = f => h o g o f = f o f => h o I = f o f => h = f o f
[08:12:55] <qergle> found 2012 version, with different md5 fingerprint
[08:12:59] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 264 seconds)
[08:13:17] <int-e> |smlckz|: right and computing the derivative of that is less tedious than what you have for part B
[08:13:25] <int-e> the other parts look fine.
[08:13:40] <cherim> Well, (2) looks weird after (1)
[08:14:04] <qergle> modern ghostscript isn't liking the file (for conversion to pdf)
[08:14:08] <cherim> Even if you need to prove that left inverse is a right inverse, doing it once is enough
[08:14:31] <int-e> Hmm I ignored (1) and (2)... is (1) actually needed anywhere?
[08:15:03] <cherim> (3) uses it
[08:15:04] <|smlckz|> From (1), we get:
[08:15:14] <int-e> Oh, wait.
[08:15:28] <qergle> never mind, user error
[08:15:42] <int-e> you used it, but you could do part A as g'(f(0)) instead.
[08:16:02] <qergle> cherim: thanks for comments. how much have you read on designs, a lot?
[08:16:46] <int-e> (which features in the derivative of g(f(x)) at 0)
[08:16:46] <|smlckz|> the only thing i am a little bit unsure about differentiable => inverse exists
[08:17:07] <cherim> Existence of inverses is the only nontrivial thing here
[08:17:30] <cherim> But f'(x)=3x^2+3 is strictly increasing
[08:17:57] <cherim> So g(x) exists and is strictly increasing, hence g(g(x)) is also strictly increasing, and has an inverse
[08:18:50] <cherim> *But f'(x)=3x^2+3>0 so f is strictly increasing
[08:18:58] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[08:19:37] <|smlckz|> ah
[08:22:06] <|smlckz|> so (1) is not needed at all!
[08:24:42] *** Joins: i0e (~is0ke3@user/is0ke3)
[08:26:08] <|smlckz|> because f is strictly increasing in its whole range, it covers it's whole range [ bijection? ] and thus it's inverse exists, hmm
[08:27:09] *** Quits: join_subline (~join_subl@135-23-248-194.cpe.pppoe.ca) (Ping timeout: 268 seconds)
[08:27:14] <int-e> well, it's also unbounded both ways
[08:27:37] <int-e> (unlike, say, atan(x) which is strictly increasing but bounded, and not bijective as a function from R to R)
[08:29:58] *** Joins: brbblnch (~brbblnch@user/brbblnch)
[08:30:13] <int-e> and of course you need continuity for this, but you get that from differentiability.
[08:30:18] *** Quits: bosspotato (~bosspotat@user/bosspotato) (Ping timeout: 260 seconds)
[08:35:41] <qergle> so pdf question was answered after all. only needed squeaky wheel.
[08:44:48] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[08:45:16] <|smlckz|> qergle: phew :)
[08:47:09] *** Quits: madage (~madage@user/madage) (Ping timeout: 276 seconds)
[08:51:12] *** Quits: lakitu (~lakitu@192-198-3-9.dhcp.radiolinkinternet.com) (Read error: Connection reset by peer)
[08:55:29] *** Joins: lakitu (~lakitu@192-198-3-9.dhcp.radiolinkinternet.com)
[08:57:19] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 244 seconds)
[08:57:24] *** Joins: segnior (segnior@user/segnior)
[08:58:43] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[09:09:58] *** Quits: ksft (~k@pool-173-76-14-211.bstnma.fios.verizon.net) (Ping timeout: 260 seconds)
[09:11:45] *** Joins: ksft (~k@pool-173-76-14-211.bstnma.fios.verizon.net)
[09:11:46] *** Quits: frelleck (~frelleck@user/frelleck) (Quit: FrellNotWeak)
[09:15:03] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:21:33] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[09:24:10] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 260 seconds)
[09:24:53] *** Joins: NEYi_ (~NEYi@109.251.216.38)
[09:27:46] *** Quits: NEYi (~NEYi@109.251.216.38) (Ping timeout: 258 seconds)
[09:28:26] *** Joins: fiberizone_ (~fiberizon@48.74.117.78.rev.sfr.net)
[09:28:44] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:30:10] *** Quits: brbblnch (~brbblnch@user/brbblnch) (Ping timeout: 252 seconds)
[09:34:26] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[09:34:26] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-f4ff-b696-f747-db95.res6.spectrum.com) (Quit: Leaving.)
[09:35:56] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[09:36:02] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-60aa-0f20-5949-7c58.res6.spectrum.com)
[09:40:09] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[09:41:04] *** Joins: daoudr (~daoudr@2a02:1205:c690:ca10:1f8f:22dc:9967:691a)
[09:52:23] *** Joins: ertiportline (~ertiportl@user/ertiportline)
[09:54:12] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:57:14] *** Quits: fiberizone_ (~fiberizon@48.74.117.78.rev.sfr.net) (Ping timeout: 244 seconds)
[09:59:19] *** Quits: Nact (~l@host-85-27-120-251.dynamic.voo.be) (Quit: Konversation terminated!)
[10:00:36] *** Joins: fiberizone_ (~fiberizon@48.74.117.78.rev.sfr.net)
[10:05:35] *** Quits: fiberizone_ (~fiberizon@48.74.117.78.rev.sfr.net) (Ping timeout: 260 seconds)
[10:06:30] *** Quits: emf (~emf@2620:10d:c090:400::5:bb17) (Quit: emf)
[10:06:44] *** Joins: tizef (~tizef@202.153.80.26)
[10:08:51] *** Joins: fiberizone_ (~fiberizon@48.74.117.78.rev.sfr.net)
[10:18:09] *** Quits: Guest8086 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[10:20:32] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:25:35] *** Quits: tizef (~tizef@202.153.80.26) (Quit: tizef)
[10:26:56] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:29:31] *** Joins: brbblnch (~brbblnch@user/brbblnch)
[10:36:04] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[10:36:17] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-60aa-0f20-5949-7c58.res6.spectrum.com) (Quit: Leaving.)
[10:36:23] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:40:40] *** Joins: palasso (~palasso@user/palasso)
[10:43:44] *** Joins: andreasbuhr (~quassel@p548dd64d.dip0.t-ipconnect.de)
[10:43:47] *** Quits: andreasbuhr (~quassel@p548dd64d.dip0.t-ipconnect.de) (Client Quit)
[10:47:15] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:49:02] *** Quits: fiberizone_ (~fiberizon@48.74.117.78.rev.sfr.net) (Ping timeout: 258 seconds)
[10:49:53] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[10:51:14] *** Quits: pluri_ (~pluri@user/pluri) (Ping timeout: 260 seconds)
[10:54:43] *** Joins: pluri (~pluri@user/pluri)
[10:58:05] *** Quits: ertiportline (~ertiportl@user/ertiportline) (Ping timeout: 260 seconds)
[10:59:11] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 264 seconds)
[10:59:15] *** Joins: alzgh (~alzgh@user/alzgh)
[10:59:40] *** Joins: fiberizone_ (~fiberizon@48.74.117.78.rev.sfr.net)
[11:04:06] *** Joins: ExeciN (~ExeciN@user/nicexe)
[11:04:11] *** Joins: NEYi (~NEYi@109.251.216.38)
[11:05:57] *** Quits: NEYi_ (~NEYi@109.251.216.38) (Ping timeout: 265 seconds)
[11:06:38] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[11:07:25] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 260 seconds)
[11:09:37] *** Quits: stipa (~stipa@user/stipa) (Quit: i leave this place forever)
[11:09:56] *** Joins: src (~src@user/src)
[11:10:35] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[11:13:04] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:21:16] *** Joins: rubiksdream (~rubiksdre@1-64-46-156.static.netvigator.com)
[11:21:32] *** Quits: rubiksdream (~rubiksdre@1-64-46-156.static.netvigator.com) (Changing host)
[11:21:32] *** Joins: rubiksdream (~rubiksdre@user/rubiksdream)
[11:22:19] <nicoty> Is there a simple formula to calculate the sum of the infinite series `a + sqrt(a) + sqrt(sqrt(a)) + sqrt(sqrt(sqrt(a))) + ...` ? I want to use it to calculate `a / (a + sqrt(a) + sqrt(sqrt(a)) + sqrt(sqrt(sqrt(a))) + ...)`.
[11:23:37] <riv> i guess it's    a + a^1/2 + a^1/4 + a^1/8 + ...
[11:24:06] <greenbagels> doesn't that not converge
[11:24:23] <riv> which is a^1/8 (a^8 + a^4 + a^2 + a + ...)
[11:24:25] <nicoty> greenbagels: What does that mean?
[11:24:38] <greenbagels> a^1/n converges to 1 for any a > 0 doesn't it
[11:25:59] <rubiksdream> does anyone know why if $f : (a,b) \rightarrow [0,k)$ for some $k > 0$ is log-concave, i.e. log(f) is concave, then f is unimodal? That is , f is increasing on (a,m] and decreasing on [m,b)
[11:26:14] <rubiksdream> we can say nonstrictly increasing/decreasing by the way
[11:26:30] <greenbagels> nicoty: you want the sum of the series a^(-2^n) from n=0 to infinity
[11:26:35] <rubiksdream> the answer to this https://mathoverflow.net/questions/64099/the-maximum-of-a-polynomial-on-the-unit-circle uses this fact, im guessing there must be a easy proof of it
[11:26:46] <greenbagels> for this sum to converge to a finite value the underlying sequence has to converge to 0
[11:26:56] <greenbagels> but im pretty sure this seqeuence converges to 1 for any nonzero (positive) a
[11:27:03] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:27:44] <riv> oh damn, what i wrote is wrong
[11:27:48] <nicoty> greenbagels: Yeah, in my use case, a is always a positive integer.
[11:28:05] <riv> it is a^(1/2^n) though right?
[11:29:04] <qergle> a+a^(1/2)+a^(1/4)+a^(1/8)+... is?
[11:29:04] <greenbagels> yeah I meant a^(2^-n) not a^(-2^n)
[11:29:06] <nicoty> greenbagels: What's the corollary of that?
[11:29:29] <greenbagels> nicoty: it means you can't try to calculate a value for the denominator of your expression
[11:30:04] *** Quits: brbblnch (~brbblnch@user/brbblnch) (Ping timeout: 252 seconds)
[11:30:26] *** Quits: jthancoc (~jthancoc@c-73-179-2-115.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[11:30:32] <nicoty> Even if I'm only going to use it for a that are positive integers?
[11:30:37] *** Joins: jthancoc (~jthancoc@c-73-179-2-115.hsd1.fl.comcast.net)
[11:30:38] *** Joins: fiberizone__ (~fiberizon@153.76.117.78.rev.sfr.net)
[11:30:41] <riv> aha
[11:30:49] <riv> nicoty: let's try it out
[11:30:53] <qergle> what does repeatedly square rooting converge to?
[11:31:15] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[11:31:16] <qergle> say you take some number, 42, and repeatedly square root it, where do you go?
[11:31:28] <nicoty> If it's a positive number, then I guess 0?
[11:31:32] <riv> https://bpa.st/QDWA
[11:31:32] <greenbagels> no
[11:31:36] <qergle> nicoty: why 0?
[11:31:40] <riv> this is the calculation done for 10 terms, 100 terms, 1000 terms
[11:31:46] <riv> see the number just gets bigger and bigger
[11:31:48] <nicoty> So then the answer is 1?
[11:31:56] <qergle> yes, you will go to 1
[11:32:01] <riv> as greenbagels said, the terms tend to 1, so the sum of N terms is roughly (some constant +) N
[11:32:25] <nicoty> The exponents will converge to zero which means the result is 1 I mean
[11:32:55] <qergle> one way to see this non-rigorously is that let x=sqrt(sqrt(sqrt(...))) then x^2=sqrt(sqrt(sqrt(...)))
[11:33:22] *** Quits: fiberizone_ (~fiberizon@48.74.117.78.rev.sfr.net) (Ping timeout: 252 seconds)
[11:33:27] <qergle> that has two solutions: 0 and 1
[11:34:04] <qergle> so if you start at 0, you stay at 0, else you go towards the sink of 1
[11:35:23] <greenbagels> nicoty: recall that for a series to converge, a necessary condition is that the corresponding sequence converges to 0
[11:35:38] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:20] <nicoty> But the powers converge to 0 don't they? Doesn't it work in that case too?
[11:36:30] <greenbagels> no
[11:36:46] <qergle> the terms in the series don't go to 0
[11:36:55] <greenbagels> the powers in teh sequence x^0, x^0, x^0, ... surely converge to 0
[11:37:05] <qergle> they go to 1, so if you keep adding 1+1+1+... in extermis, how can you converge?
[11:38:04] <qergle> even if the terms did go to 0 you wouldn't be guaranteed series convergence but if you don't have it you're guaranteed failure.
[11:38:07] *** Joins: ExeciN (~ExeciN@user/nicexe)
[11:38:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:38:50] <nicoty> greenbagels: No they turn into 1s like qergle said
[11:39:17] <greenbagels> they turn into 1s, but im trying to show that the powers don't matter
[11:39:27] <greenbagels> you can rewrite expressions to have any power you want really
[11:39:39] <greenbagels> whats important is the value of the terms
[11:39:54] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[11:40:18] <riv> did you see my link
[11:40:22] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:40:22] <riv> i got the computer to calculate the sum
[11:41:38] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[11:41:44] <qergle> so, back to your question. a/(a+sqrt(a)+sqrt(sqrt(a))+...) is?
[11:42:48] <nicoty> riv: Ah thanks. So it seems to be roughly a + 1.335...?
[11:42:57] <greenbagels> no
[11:43:02] <qergle> huh?
[11:43:06] <riv> nicoty: a=3 is my example
[11:43:13] <riv> the thing is, the more terms we add, the bigger the values gets
[11:43:21] <riv> so it doesn't actually converge to a value
[11:43:24] <riv> it goes off to infinity
[11:43:40] <nicoty> Oh
[11:44:18] <qergle> nicoty: you now have all the information you need to tell us what a/(a+sqrt(a)+sqrt(sqrt(a))+...) equals, regardless of a's value.
[11:44:52] <qergle> making sure a makes sense, i.e. a≥0
[11:45:40] <nicoty> 0 I guess, as the series seems to converge to infinity.
[11:45:54] <qergle> it is said to diverge to infinity, and yes, 0
[11:46:09] <nicoty> Ah right, thanks
[11:48:29] <qergle> excuse, a>0, we can't have a=0
[11:50:08] *** Joins: Guest40 (~Guest40@dyx0pyyd17s38nhmyj26t-3.rev.dnainternet.fi)
[11:53:55] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[11:57:47] *** Joins: ionface (~ionface@user/ionface)
[12:00:07] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:07:51] <qergle> someone linked me an old ps (from jurassic period). uses ugly fonts that look like turd shit in pdf
[12:07:56] <qergle> how to make 2021 version?
[12:08:40] *** Quits: ua_ (~ua@public-gprs229857.centertel.pl) (Ping timeout: 260 seconds)
[12:09:17] <greenbagels> ps?
[12:09:21] <greenbagels> postscript?
[12:09:24] <qergle> yes
[12:09:31] <qergle> the stuff the ancients used to post
[12:10:00] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:10:04] <qergle> the bitmapped fonts hurts my eyes worse than covid
[12:10:11] <greenbagels> covid hurt your eyes?
[12:10:29] <qergle> not as bad as bad fonts
[12:11:45] <qergle> any way to recreate ps with type 1?
[12:14:14] *** Joins: ua_ (~ua@public-gprs224058.centertel.pl)
[12:14:31] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:16:30] <qergle> interest in covid but not help with type 3 fonts. moldy bagel.
[12:16:47] <greenbagels> :~)
[12:16:52] <greenbagels> i dont know jack about postscript, sry
[12:17:02] <qergle> jack know?
[12:17:05] *** Joins: ExeciN (~ExeciN@user/nicexe)
[12:17:20] <greenbagels> all i know is that typesetting figures in eps and tex files makes me want to die
[12:18:05] <qergle> if tex file available qergle would not have problem
[12:18:20] <qergle> problem is dinosaurs post only their ps
[12:19:20] *** Joins: vaporatorius (~vaporator@135.red-95-122-12.staticip.rima-tde.net)
[12:19:21] *** Quits: vaporatorius (~vaporator@135.red-95-122-12.staticip.rima-tde.net) (Changing host)
[12:19:21] *** Joins: vaporatorius (~vaporator@user/vaporatorius)
[12:19:41] <PlanckWalk> Postscript is basically "a program that renders something"
[12:19:55] <PlanckWalk> Converting PS files to anything else in general is painful.
[12:20:54] <PlanckWalk> (It's not too hard to write a ray tracer in Postscript)
[12:21:21] <qergle> ray tracing bitmapped fonts is ugly solution
[12:21:33] <qergle> in place replacement with otf or ttf better
[12:21:41] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[12:23:14] <Guest40> you could try save it as .pdf
[12:23:23] <Guest40> and conver it with math pix to .tex https://mathpix.com/
[12:23:32] <qergle> i get it into pdf and have a ton of embedded custom type 1's
[12:24:06] <qergle> maybe that's the solution? replace the embedded fonts with my own ttfs?
[12:26:10] <qergle> https://www.iceni.com/blog/how-to-change-a-pdf-font-quickly/
[12:26:26] <qergle> maybe linux open source solution to this?
[12:27:23] <greenbagels> qergle: does qpdf support it
[12:27:26] <greenbagels> changing fonts
[12:27:31] *** Joins: ExeciN (~ExeciN@user/nicexe)
[12:28:03] <qergle> i don't know qpdf api, i know it's cli to do basic things like uncompress stream
[12:29:02] <qergle> maybe only option is full "pdf editor" solution
[12:29:57] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:31:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:31:24] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:31:58] <qergle> qergle found easier solution: rm dinosaur.ps
[12:33:11] <PlanckWalk> Ah, the good old "lossy compression to zero bytes"
[12:37:46] *** Joins: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[12:37:48] <lesshaste> how can you do this?
[12:37:49] <lesshaste> find four integer values a, b, c, d not equal to zero so that a+2*b+3*c+4*d = 0
[12:38:38] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:38:45] <riv> 4+2*3+3*-2+4*-1
[12:38:49] *** Joins: join_subline (~join_subl@135-23-248-194.cpe.pppoe.ca)
[12:39:03] <greenbagels> alternatively, set all but two of them equal to 0
[12:39:06] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:40:35] *** Quits: lilgopher (~textual@2601:241:8000:38f0:8d2b:81a9:aa03:d249) (Ping timeout: 264 seconds)
[12:41:35] <greenbagels> lesshaste: the general way to do this is to write one variable in terms of the others
[12:41:47] <greenbagels> a + 2b + 3c + 4d = 0 means a = -2b - 3c - 4d
[12:41:57] <greenbagels> so if you pick any b, c, d, you get a resulting a that satisfies the equation
[12:42:12] <lesshaste> tanks
[12:42:15] <lesshaste> thanks
[12:42:48] <ysftaha> (α ⇒ (β ⇒ γ)) ⇒ ((α ⇒ β) ⇒ (α ⇒ γ))
[12:42:52] <ysftaha> to prove this ^
[12:43:09] <ysftaha> how would I state that it is just the definition of direct proof?
[12:43:29] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:43:32] <lesshaste> in general if I have aw + bx + cy + dz == 0 and for known integer w,x,y,z is it easy?
[12:43:47] <ysftaha> ski: Any idea?
[12:44:13] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[12:44:34] <riv> you have two assumptions that you can use to prove a => y
[12:44:43] <riv> H1 : α ⇒ (β ⇒ γ), H2: (α ⇒ β) |- (α ⇒ γ)
[12:44:55] <riv> you can take a in as an assumption also
[12:45:12] <riv> H1 : α ⇒ (β ⇒ γ), H2: (α ⇒ β), A: α |- γ
[12:45:48] <riv> together H and H2 implies β
[12:45:58] <ysftaha> wait. But they are not grouped like that.
[12:47:21] <ysftaha> oh....I see this is called deduction theorem? riv
[12:48:01] <riv> https://bpa.st/6KHA
[12:48:07] <riv> here is the steps
[12:48:39] <W> lesshaste, there is a general way to solve it, yes, though "easy" is subjective; a=xyz, b=wyz, c=-wxz, d=-wxy for instance; each of the four terms then are simply wxyz or its negative, two of each so they cancel out
[12:49:39] <riv> nice W
[12:50:01] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[12:51:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:51:39] <Guest40> Saw this in my lecture notes... could someone explain how this harmonic oscillator becomes a sin function?
[12:51:40] <Guest40> http://mathb.in/66638
[12:51:53] <Guest40> while the general guess is cos()
[12:52:11] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[12:52:22] *** Joins: cadmio (~cadmio@151.25.149.251)
[12:52:27] <cadmio> Hello
[12:52:35] <riv> Guest40: strange you have 2 equations there
[12:52:40] <riv> but they don't relate or interact in any way
[12:52:53] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[12:53:11] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 264 seconds)
[12:53:15] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:53:19] <ysftaha> riv, why is alpha an assumption and not H3?
[12:53:26] <riv> anyway it is the case that sin(a x)'' = (a cos(a x))' = - a^2 sin(a x)
[12:53:29] <riv> similary with cos
[12:53:42] <riv> so these solutions work
[12:54:02] <ysftaha> same for Beta? what is the difference between an assumption and hypothesis?
[12:54:11] <riv> ysftaha: yes probably should have called it H3 instead of A, that would be more consistent
[12:54:42] <riv> ysftaha: beta is not an hypothesis though, it's a consequence of our hypothesis
[12:54:46] <W> lesshaste, for the even more general equation(s), the term is "Diophantine equations", for which there is a great many techniques and subcategories of equation sets to match
[12:54:48] <riv> assumption and hypothesis are synonyms
[12:54:50] <ysftaha> ok, and what allows us to do this is the deduction theorem?
[12:54:57] <Guest40> riv I dont understand how the sin() is pulled... weve been taught the general sol for harmonic oscillator is cos()
[12:55:04] <Guest40> o_O
[12:55:14] <ysftaha> yeah, modes ponens of h2 and h3 (alpha)
[12:55:15] <riv> Guest40: sin and cos are both valid here aren't they?
[12:55:26] <riv> Guest40: the only thing that distinguishes them is their value at 0
[12:55:47] <riv> you could actually use any phase wave, sin(a x + 3 pi/7) would work too
[12:57:03] <Guest40> riv thats is my problem, they seem to have same phase?
[12:57:10] <Guest40> what am I not understanding
[12:57:11] <Guest40> :D
[12:57:12] <riv> sin and cos are out of phase
[12:57:23] <riv> they have the same frequency though
[12:57:52] <Guest40> okay i see what you mean
[12:57:59] <Guest40> I just dont get how I can simply pick it like that
[12:58:26] <riv> its just one solution
[12:58:37] <riv> you could equally well say w1 = cos, w1 = sin, or make them both sin
[12:58:41] <Guest40> okay
[12:58:52] <riv> you would need more context, more conditions to pin it down
[13:00:02] <cadmio> what's the coefficient of x^p^k on the left https://imgur.com/jm5HSLL.png ?
[13:01:51] <riv> I suppose itw ould be 0 on the left, if m > 1
[13:02:06] <riv> im a bit confused about that though
[13:02:07] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:04:44] <Guest40> Is this correct notation, or can I write it cooler? http://mathb.in/66639
[13:05:14] <rubiksdream> if p_j>=0 are such that p_1 + ... + p_n = n, n is a positive integer, and z_j are n distinct points on the unit circle, why is f(z) = prod_{j=1}^n (1 + z/z_j)^{p_j} analytic?
[13:05:35] *** Joins: ExeciN (~ExeciN@user/nicexe)
[13:06:11] <rubiksdream> i can see that it is analytic on the unit disk, but i dont understand why this breaks down at the boundary since the (1 + z / z_j) terms vanish at -z_j, so we can't define log(1 + z/z_j) holomorphically in a nbhood of each -z_j, so i dont see how we can define (1 + z / z_j)^p_j in such a nbhood
[13:06:41] <rubiksdream> *why this doesn't break down on the boundary
[13:07:02] *** Quits: Stalevar (~stalevar@user/stalevar) (Ping timeout: 260 seconds)
[13:07:25] <riv> rubiksdream: it's a finite product? trivially analytic
[13:07:34] <riv> oh sorry, p_j
[13:07:37] <riv> ignore that
[13:07:45] <rubiksdream> no worries
[13:09:38] <cadmio> m is not divisible by p and p is prime
[13:09:51] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[13:10:03] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[13:13:00] <riv> I guess the branch cut for log can go outwards in any direction, so you can choose each log to have its branch cut going outwards through -z_j perhaps?
[13:13:40] <lesshaste> W Thanks
[13:15:22] <rubiksdream> yeah but in that case you wont be holomorphic outside the disk
[13:15:28] <rubiksdream> the branch cut starts at the boundary
[13:17:26] <riv> well I suppose any valid argument will involve the summation being an integer (what I said did not involve that)
[13:18:41] <rubiksdream> yes definitely
[13:18:47] <riv> prod_{j=1}^n exp(p_j log(1 + z/z_j)) = exp(sum_{j=1}^n p_j log(1 + z/z_j))
[13:18:49] <riv> maybe this will be useful
[13:19:22] *** Joins: ExeciN (~ExeciN@user/nicexe)
[13:19:27] *** Joins: Stalevar (~stalevar@user/stalevar)
[13:20:10] <riv> = exp(log(prod_{j=1}^n (1 + z/z_j)^p_j))
[13:20:16] <riv> ugh
[13:20:20] <riv> that brought us back to the start
[13:26:25] <rubiksdream> basically, we can definitely arrange so that at each -z_j, every product besides the one that includes z_j is holomorphic in a neighbourhood of -z_j
[13:26:40] <rubiksdream> *every factor
[13:29:31] *** Quits: Carbonflux (~Carbonflu@c-24-56-228-141.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[13:29:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[13:32:45] <Guest40> Is this correct notation, or can I write it cooler? http://mathb.in/66639
[13:32:54] <[itchyjunk]> So the idea is i want some f(x) = a + ax + ax^2 + ... + ax^n. f(0) = a, f'(0) = a, f''(0) = 2a , ..
[13:32:58] <[itchyjunk]> Nope, lost it
[13:33:13] <[itchyjunk]> thought i understood someting there but it gone
[13:38:08] <greenbagels> Guest40: looks fine to me
[13:38:15] *** Joins: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[13:38:16] *** Parts: cadmio (~cadmio@151.25.149.251) (WeeChat 3.0)
[13:41:26] <riv> rubiksdream: is there anything about n being even or odd?
[13:41:42] *** Joins: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il)
[13:41:47] <riv> also I just realized that the p_1 + ... + p_n number of terms is the same as the number n
[13:42:23] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Ping timeout: 264 seconds)
[13:42:47] <rubiksdream> there isn't any constraint on even/oddness of n
[13:42:55] <rubiksdream> yes p_1 + ... + p_n = n
[13:44:25] *** Quits: Guest70 (~Guest70@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 256 seconds)
[13:47:18] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[13:47:34] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[13:49:01] *** Quits: Pi-sistance (~kvirc@cpc94050-newt37-2-0-cust176.19-3.cable.virginm.net) (Quit: happy math or coding)
[13:52:52] <rubiksdream> okay, so i have proved that it is actually continuous everywhere
[13:53:09] <rubiksdream> i.e. the discrepancy of 2pi at the branch cuts become annihalated
[13:53:20] <rubiksdream> (here the p_1 + ... + p_n = n) thing is key
[13:53:34] <rubiksdream> we need p_1 + ... + p_n to be an integer for this (doesnt need to be n though i think)
[13:53:45] <riv> hmm does this function rapidly converge to 1 outside the unit circle?
[13:54:27] <rubiksdream> you mean as z -> 0?
[13:54:32] <riv> z -> inf
[13:54:47] <rubiksdream> the factors are ( 1 + z/z_j)^{p_j}
[13:55:13] <riv> im looking at the log expansion, f(z) = exp(-(sum[n] 1/n ( a (z/A)^n + b (z/B)^n ) ))  for just 2 points to keep it simple
[13:55:44] <riv> converge to 0 * oops
[13:57:48] <riv> I suppose that log expansion does not apply for large z
[13:58:19] <riv> if each z_j is equal we easily get f(z) = prod (1 + z/z_j)^n which is holomorphic
[13:59:00] <riv> -prod
[13:59:52] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:00:19] <rubiksdream> yeah, the annoying thing is the branch cuts, which I can show aren't really branch cuts at all, because our function is continuous on them
[14:00:26] <rubiksdream> but im not sure how to go from this to its actually holomorphic on them
[14:01:30] <riv> was wondering fi you could do branch cuts around the unit cricle
[14:01:38] <riv> but then you have issues on the boundary
[14:01:43] <riv> i wish i was more helpful
[14:02:07] <riv> if you can show continuity I think you are done
[14:02:15] <rubiksdream> i can show continuity
[14:02:23] <riv> since the function is holomorphic outside the branch cuts
[14:02:31] <riv> and continuous across them, it's holomorphic across them
[14:02:37] <rubiksdream> ahhh
[14:02:42] <rubiksdream> indeed
[14:02:50] <rubiksdream> by the reflection principle i guess
[14:03:15] <rubiksdream> oh nice
[14:03:16] <rubiksdream> yes that works
[14:03:22] <rubiksdream> so its actually bonafide analytic
[14:03:35] <riv> very surprising. what an interesting function
[14:03:48] *** Joins: haasn (~nand@haasn.dev)
[14:03:59] <riv> where did it come up?
[14:06:24] <haasn> I have a statistics question. I have a population of wombats and gerbils. Say I find that, in one year, it's 83% wombats and 17% gerbils. The next year it's 86% wombats and 14% gerbils. The year after it's 89% wombats and 11% gerbils. I suspect that the ratio of wombats to gerbils is increasing because of some mechanism. However, the null hypothesis is that each year's wombat/gerbil readings
[14:06:25] <rubiksdream> oh yeah, the way to show the branch cuts is not an issue is as follows: write exp( p_1Log(1 + z/z_1))* exp(sum_{j=2}^n p_j log(1 + z/z_j)) = exp(A + iB) where log is the principal branch say, now the branch cut of the first factor is the line radially emitting from -z_1, near the left of this line we get -pi*p_1 + (something)(p_2+...+p_n) = B where this something is equal to pi mod 2pi , but then this whole thing is the same as
[14:06:25] <rubiksdream> pi*p_1 + (something)*(p_2 + ... + p_n) mod 2pi!
[14:06:26] <haasn> fluctuate at random around the true value, say 86% wombats. What statistical question do I want to ask in order to figure out whether my observed increase is statistically significant?
[14:06:34] <rubiksdream> so there is no ambiguity once we exponentiate
[14:06:36] <haasn> If the question is "not enough data to answer", what data would I need to know?
[14:07:11] <rubiksdream> riv came from this question https://mathoverflow.net/questions/64099/the-maximum-of-a-polynomial-on-the-unit-circle , i need to understand the argument of the accepted answer for a presentation im giving
[14:07:35] *** Quits: xff0x (~xff0x@2001:1a81:52c0:f300:645b:c6c7:cd20:13be) (Ping timeout: 264 seconds)
[14:08:09] *** Joins: xff0x (~xff0x@2001:1a81:52c0:f300:1be9:ff56:80a8:5503)
[14:11:17] *** Joins: ertiportline (~ertiportl@user/ertiportline)
[14:12:24] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:13:22] <ysftaha> so I want to prove
[14:13:23] <ysftaha> (alpha conj beta Rightarrow gamma) leftrightarrow (alpha Rightarrow (~ beta leftrightarrow ~ gamma ))
[14:13:29] <ysftaha> (α conj β ⇒ γ) ↔ (α ⇒ (~ β ↔ ~ γ ))
[14:13:53] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[14:14:00] <ysftaha> can I just do a bidirectional. then for the first part have
[14:14:19] <ysftaha> (α conj β ⇒ γ)
[14:14:25] <ysftaha> and assume alpha?
[14:15:12] <ysftaha> so the first wff is hypothesis then the premis of the second is another hypothesis?
[14:16:25] <haasn> ysftaha: not sure I understand your question but "assuming alpha and proving P" is literally what a proof of "alpha => P" is
[14:17:08] <ysftaha> haasn: ok, nvm my question. how would you prove the proposition?
[14:17:11] <haasn> so to prove (α conj β ⇒ γ) ⇒ (α ⇒ P) you'd assume (α conj β ⇒ γ) and α
[14:17:28] <ysftaha> yeah, I assume a?
[14:17:39] *** Joins: dimi1947 (~dimi1947@2a02:1388:83:f1e0:7133:f5a8:83e5:18c)
[14:18:03] <haasn> if it helps you could think of (X ⇒ α ⇒ P) as (X conj α) ⇒ P
[14:18:13] <ysftaha> cool
[14:18:18] <ysftaha> thanks
[14:18:20] <haasn> (or just logically transform it into that)
[14:18:23] <rubiksdream> oh wait, i jumped the gun, my 'proof' for why those are equivalent mod 2pi isnt correct
[14:22:31] <Franciman> studying some functional analysis. This is going to be nea-do!
[14:22:34] <haasn> ysftaha: I'd probably start by simplifying (~ β ↔ ~ γ ) to the logically equivalent β ↔ γ, which makes it easier to think about
[14:23:20] <haasn> and then splitting the central ⇔ into two ⇒ directions as you proposed
[14:23:26] *** Quits: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[14:24:08] <ysftaha> haasn. yeah, I did that but I dont see how I could get the other part of the iff
[14:24:17] <haasn> which part?
[14:24:19] <ysftaha> one way (an implication) is obvious
[14:24:22] <ysftaha> buyt havin
[14:24:34] <ysftaha> (γ ⇒ β)
[14:24:54] <ysftaha> I dont think I can get to that conclusion from the given premises
[14:25:19] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:26:17] <ysftaha> oh, nvm. I wrote the question wrong
[14:26:19] <ysftaha> lol!
[14:27:21] <haasn> oh, yes, I see the issue - the statement a you wrote it isn't a tautology
[14:27:47] <haasn> there's no way to exclude γ in the ~ β case
[14:28:34] <haasn> (raining & outside -> wet) is not the same thing as (raining -> (inside ⇔ dry)), because you could be standing inside a shower
[14:28:52] <haasn> which would be the combination (raining, not outside, wet)
[14:28:58] *** Quits: nullcone (uid11626@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:30:03] <ysftaha> makes sense. this gets me to my general question thou. if I have to prove something of the form
[14:30:06] <ysftaha> (α ⇒ (β ⇒ (β ⇒ α)))
[14:30:19] <ysftaha> do I just start assuming until I hit the last implication?
[14:30:34] <haasn> that would work, yes
[14:30:53] <ysftaha> so I assume alpha, beta, and try to assume
[14:31:02] <ysftaha> β ⇒ α
[14:31:05] <ysftaha> and that is it?
[14:31:20] <haasn> you could also rewrite (α ⇒ β) into (~a or β)
[14:31:27] <haasn> and prove it using other logical transformations
[14:32:56] <haasn> for example in this case that simplifies to (α ⇒ (β ⇒ (β ⇒ α))) = (α ⇒ (β ⇒ (~β or α))) = (α ⇒ (~β or (~β or α))) = (~α or (~β or (~β or α))) = ~α or ~β or α = ~α or α = true
[14:33:27] <haasn> or rather, the last step should have been = (~α or α) or β = true or β = true
[14:33:32] <haasn> to be rigorous
[14:33:39] *** Joins: cadmio (~cadmio@151.25.149.251)
[14:33:59] *** Joins: johnkeats6 (~johnkeats@2804:14c:32:a0cc:ee:5075:9596:3cb8)
[14:35:09] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[14:36:01] *** Quits: dimi1947 (~dimi1947@2a02:1388:83:f1e0:7133:f5a8:83e5:18c) (Quit: Leaving)
[14:36:25] <ysftaha> oh.
[14:36:28] <ysftaha> a trivial proof
[14:38:02] <haasn> but yes, the other way of proving that would be to assume α, β, β and conclude that α. (trivially by assumption)
[14:38:18] <cadmio> I'm not sure what the coefficient of the x^p^a term is here (1 + x)^p^a^m
[14:39:33] <ysftaha> haasn: pretty cool. thanks!
[14:39:38] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[14:40:05] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:40:22] *** Quits: X-Scale (~ARM@83.223.233.104) (Ping timeout: 260 seconds)
[14:44:06] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[14:47:11] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[14:52:08] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (Remote host closed the connection)
[14:53:24] *** Joins: Sofia (~sofia@gateway/tor-sasl/sofia)
[14:54:45] *** Joins: madage (~madage@user/madage)
[14:59:52] <greenbagels> cadmio: use the binomial theorem?
[15:01:03] <greenbagels> it should be (p^a^m choose p^a)
[15:01:24] <cadmio> yes sure (n k) for (a + b)^n the last term b^n has 1=binom (n n)  so traslating here it should be (p^a^m p^a^m) ?
[15:01:59] <greenbagels> to keep it simple you can use the known formula for (1+x)^n
[15:02:19] <greenbagels> which is that the coefficient of x^k is (n k)
[15:02:20] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:02:34] <cadmio> (n k) with k=0, .., n
[15:02:36] *** Joins: notzmv (~zmv@user/notzmv)
[15:02:42] <greenbagels> yes
[15:02:52] <greenbagels> so your k is p^a, and your n is p^a^m
[15:03:15] <cadmio> why is k, p^a?
[15:03:41] <greenbagels> because you want the coefficeint of x^p^a
[15:04:40] *** Quits: Guest40 (~Guest40@dyx0pyyd17s38nhmyj26t-3.rev.dnainternet.fi) (Quit: Client closed)
[15:04:54] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[15:06:11] <cadmio> I don't understand this fact. I got that n=p^a^m and should go from k=0, .., p^a^m
[15:07:23] <cadmio> *k
[15:12:11] <greenbagels> (1+x)^n is the sum from k=0 to k=n of (n k) x^k
[15:12:14] <greenbagels> do you agree
[15:12:29] *** Quits: Gestotterd (~Stotteren@pool-108-20-79-41.bstnma.fios.verizon.net) (Quit: Leaving)
[15:12:41] <cadmio> yes
[15:14:38] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[15:15:03] *** Joins: ExeciN (~ExeciN@user/nicexe)
[15:15:27] *** Joins: Ginalo (uid502518@id-502518.tinside.irccloud.com)
[15:16:31] <cadmio> (1+x)^p^a^m is the sum from k=0 to k=p^a^n of (p^a^n k) x^k
[15:19:46] <greenbagels> and you want the coefficient of x^p^a, right
[15:20:44] <cadmio> ah right so I've to consider k=p^a and the coeff. (p^a^m p^a)
[15:20:49] <greenbagels> right
[15:22:24] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[15:22:44] *** Joins: ExeciN (~ExeciN@user/nicexe)
[15:24:00] <cadmio> thanks you!
[15:24:07] <cadmio> *thank
[15:24:09] <cadmio> see you
[15:24:14] *** Quits: cadmio (~cadmio@151.25.149.251) (Quit: WeeChat 3.0)
[15:33:43] *** Joins: stipa (~stipa@user/stipa)
[15:42:49] *** Quits: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[15:44:26] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 244 seconds)
[15:46:15] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[15:51:28] <rubiksdream> riv hey btw it may be the case that this thing is just not analytic everywhere..
[15:52:04] <rubiksdream> the overflow post I sent you (where the question originates) does say 'analytic' but the answered may have meant only on the unit disk or the closed unit disk minus finitely many points (the -z_j)
[15:52:36] <rubiksdream> answerer(
[15:52:37] <rubiksdream> *
[15:53:28] *** Quits: ysftaha (~ysftaha@d24-57-234-201.home.cgocable.net) (Quit: Lost terminal)
[15:55:34] <johnkeats6> hi
[15:58:26] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[16:03:13] *** Joins: Oli (~Unknown@user/oli)
[16:03:44] *** Quits: ertiportline (~ertiportl@user/ertiportline) (Quit: Leaving)
[16:13:20] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[16:20:03] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:21:34] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 252 seconds)
[16:24:57] *** Quits: rubiksdream (~rubiksdre@user/rubiksdream) (Ping timeout: 265 seconds)
[16:27:18] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[16:33:16] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Quit:  HydraIRC -> http://www.hydrairc.com <- Nine out of ten l33t h4x0rz prefer it)
[16:42:13] *** Quits: lakitu (~lakitu@192-198-3-9.dhcp.radiolinkinternet.com) (Read error: Connection reset by peer)
[16:43:06] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 260 seconds)
[16:45:18] *** Quits: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[16:46:07] *** Joins: lakitu (~lakitu@192-198-3-9.dhcp.radiolinkinternet.com)
[16:51:22] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:52:48] *** Joins: DPA (~DPA@2a05:41c0:e:a704::a3c:10d)
[16:53:49] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[17:03:37] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:07:07] <riv> hi
[17:07:36] <|smlckz|> hi riv
[17:07:52] <riv> hello
[17:16:10] <Franciman> 'sup riv
[17:17:44] *** Quits: bonte (~bonte@slartibartfast.lysator.liu.se) (Ping timeout: 258 seconds)
[17:18:37] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[17:19:06] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:26:07] *** Joins: fiberizone_ (~fiberizon@185.255.119.78.rev.sfr.net)
[17:26:46] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:28:51] *** Quits: fiberizone__ (~fiberizon@153.76.117.78.rev.sfr.net) (Ping timeout: 258 seconds)
[17:31:03] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:34:27] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:205d:b36:d1bc:fd5e) (Quit: Quit)
[17:35:46] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[17:38:55] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[17:40:00] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:40:43] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[17:41:11] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 264 seconds)
[17:41:36] *** Joins: Crescendo (~Crescendo@user/crescendo)
[17:43:24] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-4c3f-03f6-4a4f-4ab9.res6.spectrum.com)
[17:44:34] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 258 seconds)
[17:48:16] *** Joins: audiobirb (~audio@2603-8081-1800-1546-2a4e-13bb-e70f-f3f7.res6.spectrum.com)
[17:50:01] *** Joins: hanif (~hanif@gateway/tor-sasl/hanif)
[17:51:05] *** Quits: Arcorann (~A@user/arcorann) (Ping timeout: 258 seconds)
[17:51:06] *** Joins: jero98772 (~jero98772@2800:484:1d80:d8ce:3490:26c5:1782:da8c)
[17:54:44] <[itchyjunk]> argh
[17:54:45] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[17:55:02] *** Joins: seninha (~seninha@user/seninha)
[17:55:49] <[itchyjunk]> wth is he saying?
[17:55:49] <[itchyjunk]> https://imgur.com/a/4XQu77E
[17:56:07] *** Joins: Crescendo (~Crescendo@user/crescendo)
[17:57:13] <[itchyjunk]> so ln(y) = 1/2 => y = e^(1/2) or -e^(1/2) ?
[17:57:16] <[itchyjunk]> why?
[17:58:16] <mh_le> eh?
[17:58:29] <mh_le> that makes no sense
[17:58:46] <[itchyjunk]> so what is he saying? i can't make sense of that paragraph
[17:58:47] <mh_le> ln and exp are inverses of eachother
[17:59:44] *** Joins: rubiksdream (~rubiksdre@1-64-46-156.static.netvigator.com)
[18:00:28] <mh_le> that's... wrong
[18:01:20] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[18:01:54] <mh_le> ln : (o, oo) -> R and exp : R -> (0, oo)
[18:02:38] <riv> [itchyjunk]: consider e^x on reals
[18:02:51] <[itchyjunk]> okay, considering
[18:02:52] <riv> it goes from 0 to infinity, as you go from -inf to inf
[18:03:09] <[itchyjunk]> okay
[18:03:35] <riv> and it is injective
[18:03:42] <riv> so log is well defined for positive values
[18:03:53] <[itchyjunk]> okay
[18:04:20] <riv> now when you have complex numbers, you can get negative values from logarithms
[18:05:26] <[itchyjunk]> so that if the logarithm x is 1/2 , the number y whose logarithm is 1/2 may equally-√e as √e
[18:05:33] <[itchyjunk]> what's that part talking about?
[18:06:11] <riv> log(x) = 1/2 is completely uniquely solved by exp(1/2) = 1.6487212707001281468486507878141635717
[18:06:47] <riv> log(-exp(1/2)) = 1/2 + i pi
[18:07:51] <[itchyjunk]> hmm how do you get that + i pi ?
[18:08:01] <riv> pari gp
[18:08:06] <riv> ? log(-1.6487212707001281468486507878141635717)
[18:08:08] <riv> %3 = 0.50000000000000000000000000000000000003 + 3.1415926535897932384626433832795028842*I
[18:08:45] <riv> from the graph of exp(x) it should be clear why negative values do not occur as logs of real numbers
[18:09:00] <riv> wait that's wrong
[18:09:22] <riv> exp(x) is always positive, so log(y) always takes positive values as input
[18:09:32] <riv> at least when you are getting real number results
[18:09:46] <riv> if you put a negative into log you should get a complex number result
[18:10:31] <[itchyjunk]> I am trying to understand what is being talked about in the picture
[18:11:17] <Z-module> log(z) = w   means    exp(w) = z   where this is the complex exp function
[18:11:48] <[itchyjunk]> I think he is building up to complex log, not sure if he's already considering complex log there..
[18:11:48] <Z-module> and thus if this w works, so do  w + i 2pi n   for all n in Z -- exp of all of those are the same.
[18:12:07] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[18:12:28] <[itchyjunk]> "But this ambiguity is encountered only in the case where
[18:12:28] <[itchyjunk]> x is a fraction whose denominator is an even number, and if the logarithm x were 2"
[18:12:54] <[itchyjunk]> he's saying if x is even denominator fraction something happens and doesn't in other cases
[18:13:01] <[itchyjunk]> or something like that.. i think
[18:13:21] <Z-module> That link is utterly bogus
[18:14:08] <[itchyjunk]> :< the homework is to sumamrize that paper
[18:14:14] <Z-module>   e^x  is UNAMBIGUOUSLY AND UNIQUELY  the real or complex number  1 + x^1/1! + x^2/2! + ...   and you do NOT treat e^(1/2)  as "either of the two possible square roots of e"
[18:14:24] <riv> just write that he said some stuff that's totally wrong
[18:14:29] <Z-module> It's turbo-bogus.
[18:14:32] <[itchyjunk]> this is euler..
[18:15:31] *** Quits: sheepduck_ (~sheepduck@user/sheepduck) (Remote host closed the connection)
[18:15:37] <[itchyjunk]> http://eulerarchive.maa.org/docs/translations/E807en.pdf
[18:15:47] <[itchyjunk]> he's working his way to defining log for complex numbers i think
[18:15:49] <Z-module> even so, by modern standards it's bogus
[18:16:28] <[itchyjunk]> probably is, but they didn't even have complex field at that point
[18:16:32] <isekaijin> It seems like he is starting from a point where e^x is not even defined, and is analyzing his desiderata for the function e^x which he is about to construct.
[18:16:59] <isekaijin> If not, then it is just bogus as Z-module says.
[18:17:02] *** Joins: sheepduck (~sheepduck@user/sheepduck)
[18:17:12] <[itchyjunk]> Isn't he the one who defines it at some point?
[18:17:24] <[itchyjunk]> maybe this is the correspondence before he does so
[18:17:29] <Z-module> this is so ironic since the whole reason we even use the notation  e^x   is for Euler
[18:18:16] <[itchyjunk]> he's trying to settle the argument between bernoulli and leibnitz
[18:18:28] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[18:18:31] <[itchyjunk]> i think this is before he formally defines stuff later on
[18:18:31] *** Joins: sedeki (~textual@user/sedeki)
[18:19:01] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[18:19:16] <riv> ah
[18:19:34] <riv> he is exploring some ideas that turned out incorrect
[18:20:39] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[18:21:53] <[itchyjunk]> i am tempted to just talk about how e gets defined in C and skip all this.. but the hw says to summarize how the 3 of them discusses this.. sigh
[18:22:45] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[18:24:52] <isekaijin> Is math history that interesting anyway? If you want to study history, you could study the Middle Ages, the Christianization of the Germanic and then Slavic tribes, etc. That sounds a lot more fascinating.
[18:24:53] *** Joins: bosspotato (~bosspotat@user/bosspotato)
[18:25:26] <isekaijin> (Not saying that math itself is uninteresting, of course. Only math *history*.)
[18:25:55] <[itchyjunk]> We started pre babilonian times.
[18:25:58] <dude12312414> i guess it might be interesting to know how we came to the current concepts
[18:26:11] <[itchyjunk]> The lectures are not too bad, it's just the homeworks i hate
[18:26:57] *** Quits: hanif (~hanif@gateway/tor-sasl/hanif) (Ping timeout: 276 seconds)
[18:27:16] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[18:27:39] *** Quits: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[18:27:47] *** Joins: NEYi (~NEYi@109.251.216.38)
[18:29:24] <[itchyjunk]> Look at bernoullis proof. he uses his calims to prove him claim and euler catches it. i think professor wanted us exposed to this type of shady math
[18:30:33] <HenryTheLongshot> Hey, so for finite state space markov chains which are irredducible, is the only stationary distribution 1/|S|? Since if it's irreducible, then it has a unique stationary distribution, and all finite space markov chains have 1/|S| as a stationary distribution, does that mean it's the only one?
[18:30:48] *** Quits: rubiksdream (~rubiksdre@1-64-46-156.static.netvigator.com) (Ping timeout: 244 seconds)
[18:30:49] <HenryTheLongshot> It seems too simple to be true but I can't see any logical flaws in that reasoning
[18:31:19] <[itchyjunk]> libtnez was basically complaining that 1:-1 and -1:1 should be equal or somesuch
[18:31:19] <[itchyjunk]> https://imgur.com/a/JpY1ow4
[18:31:32] *** Joins: ysftaha (~ysftaha@d24-57-234-201.home.cgocable.net)
[18:32:33] <[itchyjunk]> shouldn't
[18:33:14] <[itchyjunk]> "The ratios 1:-1 and -1:1 were problematic. If the two ratios were the same, then the greater would be to the less the same as the less is to the greater."
[18:33:30] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[18:34:27] <riv> this is the law log(a b) = log(a) + log(b)
[18:34:30] <riv> log(1 * -1) = log(1) + log(-1)
[18:34:42] <riv> it can't be applied inthis case, because the rule needs a,b > 0
[18:34:50] *** Joins: src_ (~src@user/src)
[18:36:06] *** Quits: xeno (~xeno@user/xeno) (Quit: Textual IRC Client: www.textualapp.com)
[18:37:38] <[itchyjunk]> what's the issue there? don't you just get log(1 * -1) = log(-1) since log(1) is 0?
[18:38:21] *** Quits: bildramer (~bildramer@2a02:587:620e:c00:ec0f:9f01:1ad6:9330) (Quit: alway rember happy day)
[18:38:26] *** Quits: DPA (~DPA@2a05:41c0:e:a704::a3c:10d) (Ping timeout: 245 seconds)
[18:38:55] *** Quits: src (~src@user/src) (Ping timeout: 260 seconds)
[18:41:08] <johnkeats6>  theres no log(-1)
[18:42:08] *** Joins: bildramer (~bildramer@2a02:587:620e:c00:ec0f:9f01:1ad6:9330)
[18:42:33] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[18:42:54] *** Quits: fstd (~fstd@xdsl-81-173-175-11.nc.de) (Read error: Connection reset by peer)
[18:43:07] *** Quits: bildramer (~bildramer@2a02:587:620e:c00:ec0f:9f01:1ad6:9330) (Read error: Connection reset by peer)
[18:43:39] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[18:43:58] *** Joins: src (~src@user/src)
[18:46:00] <isekaijin> Okay, I am having a REALLY dumb moment today.
[18:46:26] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[18:46:36] <isekaijin> I want to show that the surface xy = z^2 in A^3 is normal, but my proof only works when the ground field is not of characteristic 2.
[18:47:30] *** Joins: tacegory (~tacegory@user/tacegory)
[18:49:13] <isekaijin> Namely, if the ground field is not of characteristic 2, then this surface is isomorphic to C^2 / G, where G = {1,-1} acts on C^2 by scalar multiplication.
[18:49:18] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[18:49:31] <isekaijin> But if the ground field is of characteristic 2, then 1 = -1, so everything breaks.
[18:49:33] <int-e> [itchyjunk]: log(-1 * -1) = log(-1) + log(-1) causes trouble
[18:49:54] <[itchyjunk]> other than log(-1) not existing, what is the trouble?
[18:50:14] <[itchyjunk]> because bernoulii is claiming log(-x) = log(x) or somesuch so saying it's not defined doesn't work for me
[18:50:24] <int-e> (in the complex numbers, using principal values for the log)
[18:50:33] <isekaijin> [itchyjunk]: Suppose it existed. Then 0 = log(1) = log( (-1)^2 ) = 2 log(-1), hence log(-1) = 0, irght?
[18:51:04] <isekaijin> [itchyjunk]: You would be forced to conclude that log(-1) = 0, which is bogus, because e^0 is not -1.
[18:51:58] <int-e> [itchyjunk]: I was just correcting riv's example, really.
[18:52:16] <[itchyjunk]> isekaijin, how fortunate you say that
[18:52:20] <isekaijin> [itchyjunk]: The conclusion here is that, if you want to find a definition of log that works on a larger domain than the positive reals, then you must sacrifice some of the properties of log that you know and love.
[18:52:22] <[itchyjunk]> i was about to ask this ; https://imgur.com/a/1Yrpztg
[18:53:02] <isekaijin> Now, the question is - which properties do you want to sacrifice? There is no objectively “best” choice as far as I can tell.
[18:53:25] <isekaijin> It is very situational. Some choices might be better in some situations than others.
[18:55:04] <[itchyjunk]> the choice that e^0 = -1 ? would that ever be a real choice?
[18:55:23] <isekaijin> No, you cannot make a choice that implies e^0 = -1.
[18:55:56] <isekaijin> This is the one thing that you cannot sacrifice. If w = log(z), then e^w = z.
[18:56:32] <isekaijin> The main things that we usually sacrifice are...
[18:57:06] <isekaijin> (a) It is “okay” if you log function is discontinuous. But try to keep the set of points of discontinuity as small as possible.
[18:57:44] <isekaijin> (b) It is “okay” if your log function does not validate some properties like log(a^b) = b log(a).
[18:57:49] *** Joins: tizef (~tizef@202.153.80.26)
[19:00:01] <Z-module> the thing that prevents log(ab) = log(a) + log(b)  from always working out, on a larger domain, is imply that  arg(z + w) = arg(z) + arg(w)  isn't always right for single-valued args. It's only right mod 2pi Z.
[19:00:15] <Z-module> sorry, arg(zw) = arg(z) + arg(w)
[19:00:59] <isekaijin> I want to say something here about Lie group homomorphisms without saying “Lie group homomorphism”, let alone “Lie algebra homomorphism” or “exponential map”.
[19:03:22] <dude12312414> also it's okay if log is not a function anymore, and you allow log(z) to refer to a set
[19:03:26] <isekaijin> Something like “log(ab) = log(a) Log(b)” [notice the capital L in Log(b)!], where Log is defined on a neighborhood of 1 and satisfies Log(1) = 0.
[19:03:32] *** Joins: bildramer (~bildramer@2a02:587:620e:c00:ec0f:9f01:1ad6:9330)
[19:03:40] <dude12312414> well, not a function C -> C at least
[19:03:52] <isekaijin> C\{0} -> C
[19:04:08] <dude12312414> right
[19:04:13] *** Quits: bildramer (~bildramer@2a02:587:620e:c00:ec0f:9f01:1ad6:9330) (Read error: Connection reset by peer)
[19:05:19] *** Joins: fstd (~fstd@xdsl-89-0-79-89.nc.de)
[19:07:08] *** Joins: bildramer (~bildramer@2a02:587:620e:c00:ec0f:9f01:1ad6:9330)
[19:10:15] <ski> (.. not a "set-valued function", but rather a "multi-valued function" (indeed, "not a function" .. similarly to how programming "functions" would usually be "not a function" in a math sense, due to side-effects))
[19:11:32] *** Joins: ferdna (~ferdna@user/ferdna)
[19:11:41] <ski> (you wouldn't write ⌜w ∈ Log(z)⌝, although you could write ⌜w ∈ {Log(z)}⌝)
[19:12:49] <isekaijin> And that is why computer scientists are the only ones who play games with the meaning of equality that would be considered borderline foundational terrorism elsewhere in math.
[19:15:12] *** Quits: Ginalo (uid502518@id-502518.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[19:15:41] <ski> i suppose you could say ⌜Log⌝ is a morphism in ⌜Rel⌝, seen as the Kleisli category over the (covariant) powerset functor, and then notation like ⌜Log(z)⌝ is in an internal language there
[19:16:25] *** Joins: specing_ (~specing@user/specing)
[19:16:25] *** Quits: specing (~specing@user/specing) (Killed (NickServ (GHOST command used by specing_)))
[19:16:39] <[itchyjunk]> if you use Log, it's a normal function isn't it? w = Log(z) and w \in log(z)
[19:16:44] <[itchyjunk]> since log(z) would be a set
[19:17:20] <ski> huh ?
[19:17:51] <ski> why would you write ⌜w ∈ log(z)⌝ ?
[19:18:12] *** specing_ is now known as specing
[19:18:19] *** Quits: fstd (~fstd@xdsl-89-0-79-89.nc.de) (Read error: Connection reset by peer)
[19:18:42] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[19:19:13] <[itchyjunk]> log(z) is a set of values and Log(z) is the branch cut thing that makes it a function
[19:19:25] *** Joins: fstd (~fstd@xdsl-89-0-79-89.nc.de)
[19:20:03] <ski> i think normally people don't use ⌜log(z)⌝ to represent a set of possible logarithms, but just a single one
[19:20:24] *** Quits: mawk (~mawk@wireguard/contributor/mawk) (Ping timeout: 265 seconds)
[19:20:45] <isekaijin> I do not think there is any need to bring in any categorical nonsense in this simple situation. I would look at what the graph of w = log(z) is supposed to look like.
[19:21:02] <[itchyjunk]> oh, i think in my class, we went for log(z) to mean set of values and Log(z) to be "principle log"
[19:21:07] <ski> (and then use ⌜Log(z)⌝ to stand for possibly multiple ones ("one at a time") .. *not* to stand for the set of them(
[19:21:13] <[itchyjunk]> in spirit of arg(z) being a set and Arg(z) being a value
[19:21:35] <ski> ok, that sounds weird
[19:21:48] <[itchyjunk]> well Arg(z) is a single value
[19:22:00] <[itchyjunk]> made sense to me when Log(z) was a single value
[19:22:00] <ski> (i don't agree with ⌜arg(z)⌝ being a set of angles, either)
[19:22:16] <[itchyjunk]> Arg being the principle argument seems pretty common though
[19:22:25] <[itchyjunk]> based on random google notes i've come across at least
[19:22:31] <ski> yea
[19:23:04] *** Joins: mawk (mawk@serveur.io)
[19:23:04] *** Quits: mawk (mawk@serveur.io) (Changing host)
[19:23:04] *** Joins: mawk (mawk@wireguard/contributor/mawk)
[19:25:30] *** Quits: wwilly (~wwilly@217.140.106.13) (Ping timeout: 260 seconds)
[19:25:43] <[itchyjunk]> and that's why mawk is a set of value and Mawk is a single value
[19:26:19] *** Joins: wwilly (~wwilly@217.140.106.13)
[19:26:46] *** Quits: tizef (~tizef@202.153.80.26) (Remote host closed the connection)
[19:26:49] <mawk> :(
[19:26:55] <mawk> what did I do
[19:26:57] <Franciman> having troublez proving the open mapping theorem in banach spaces
[19:27:08] <Franciman> I don't quite get what the proof wants to do
[19:27:19] <Franciman> I am reading it on rudin's real and complex analysis
[19:27:53] <ski> anyway, (multi-valued) notation like ⌜Log(z)⌝,⌜Arg(z)⌝ are awkward to work with (since you can't "substitute equals for equals" as usual) .. but, imho, if you must do this, then either fix a branch cut (and beware passing over it), or else let ⌜Log(z)⌝ stand for "multiple values" (not a set of them) (and please keep ⌜log⌝ for the normal single-valued case)
[19:28:07] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Remote host closed the connection)
[19:28:34] <dude12312414> ski: what does "multiple values" mean vs "a set of values"?
[19:28:38] <ski> (and one reasonable way to conceptualize it would be as a kind of internal language)
[19:29:23] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[19:29:40] <isekaijin> Franciman: What proof are you reading?
[19:29:55] <isekaijin> Disclaimer: I have never taken a functional analysis course.
[19:31:47] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 244 seconds)
[19:31:51] <ski> dude12312414 : it means that ⌜w ∈ Log(z)⌝ would be nonsense, since ⌜Log(z)⌝ is not a set of values. write instead either ⌜w ∈ {Log(z)}⌝ (⌜{Log(z)}⌝ then being the set of all possible choices of logarithms of ⌜z⌝), or ⌜w = Log(z)⌝ (being aware that you have to beware manipulating ⌜Log(z)⌝ as you're used to, since it doesn't stand for a single value). of course you can then also
[19:31:57] <ski> say ⌜f(Log(z))⌝,⌜Log(z)²⌝,&c. to transform each possible value into a new one, by the function ⌜f⌝, by squaring, &c.
[19:32:57] <isekaijin> Franciman: Errr. stupid on my part. You said you are reading it from Rudin, but could you take a photo or screenshot of the relevant parts of the proof?
[19:33:49] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:34:16] <Franciman> isekaijin: s-sure
[19:34:22] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 244 seconds)
[19:34:34] *** Joins: econo (uid147250@user/econo)
[19:35:04] <mawk> ski: why not just denote the index of the value in the notation?
[19:35:09] <mawk> Log_0 for the principal branch
[19:35:10] <Franciman> wait maybe I got this
[19:35:13] <Franciman> isekaijin: thanks anyways!
[19:35:18] <Franciman> I am starting to understand
[19:35:42] *** Joins: Simplar (~Simplar@188.163.92.225)
[19:36:17] <isekaijin> Nice!
[19:36:22] <Simplar> https://prnt.sc/1x6igjz if this function is determined as y = a*tan(x) + b, how do I find b?
[19:37:03] <mawk> at x = 0
[19:37:09] <ski> (example of what you have to beware : if ⌜w₀ = Log(z)⌝ and ⌜w₁ = Log(z)⌝, it does not follow that ⌜w₀ = w₁⌝, since those could be different choices of logarithms. also, if ⌜f(w) = w² = w⋅w⌝ (for all complex numbers ⌜f(w)⌝), then ⌜f(Log(z)) = Log(z)²⌝, but ⌜Log(z)²⌝ is not ⌜Log(z)⋅Log(z)⌝. we have ⌜{Log(z)²} ⊆ {Log(z)⋅Log(z)}⌝. if one wanted to, one could
[19:37:15] <ski> use notation like ⌜Log(z)² ⊑ Log(z)⋅Log(z)⌝ to indicate that the possible values of the former is included among the possible values of the latter)
[19:37:20] <mawk> at x = kπ in general, Simplar
[19:37:21] <ski> mawk : you could do that, sure
[19:37:30] <Simplar> b = -3 then?
[19:37:40] <mawk> yes Simplar
[19:37:47] <Simplar> Wow, simple
[19:37:50] <Simplar> Thanks mawk
[19:37:54] <Simplar> I understand
[19:37:56] <mawk> because tan(kπ) = 0, Simplar
[19:38:01] <Simplar> y
[19:38:01] <mawk> that's why it's true
[19:38:03] <ski> except you have to beware of crossing branch cuts
[19:38:03] <Simplar> gotcha :)
[19:38:05] <isekaijin> I would have assumed that b = -3/2 from the picture.
[19:38:16] <Simplar> isekaijin: why?
[19:38:26] <mawk> ah yes you're right isekaijin
[19:38:31] <mawk> I didn't look close enough to where the 1 was
[19:38:46] <mawk> each grid line is 0.5 units, not 1 unit, Simplar
[19:38:46] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 265 seconds)
[19:38:51] <Simplar> *confused noises*
[19:38:57] <Simplar> OH
[19:39:01] <mawk> look better at the picture, where the 1 is
[19:39:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:6cb0:bf84:22bf:3285)
[19:39:03] <isekaijin> What I am actually trying to say is that the picture is bad.
[19:39:29] <isekaijin> The point intended to be 1 should have been highlighted in a better way.
[19:39:35] <mawk> there like a mini point at 2 grid lines above 0
[19:39:35] <mawk> or maybe it's an optical illusion
[19:39:55] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[19:40:20] <mawk> if we assume they always write the label below the point then it's less ambiguous
[19:40:34] <isekaijin> So, if this were an exam, I would begin my answer with “The picture is unclear and you should feel ashamed for it. But I will make the following assumptions: (...)”
[19:41:24] <mawk> and the abcissa axis seems to be in steps of π/4
[19:41:25] *** Quits: ysftaha (~ysftaha@d24-57-234-201.home.cgocable.net) (Quit: Lost terminal)
[19:42:34] <isekaijin> mawk: The reason why I assumed that b = -3/2 is this: The number 1 is literally written two blocks above 0, so the vertical size of a block must be 1/2.
[19:42:46] <isekaijin> But it was just a guess.
[19:42:57] <mawk> yeah
[19:43:03] <isekaijin> The moral of the whole thing here is that the picture is bad, period.
[19:43:09] *** Quits: fiberizone_ (~fiberizon@185.255.119.78.rev.sfr.net) (Ping timeout: 244 seconds)
[19:43:54] <isekaijin> It is the mathematical analogue of being unclear in writing. Understandable in a real-time conversation, but not in a book or exam that you had a lot of time to prepare.
[19:47:21] *** Joins: magic_ninja_work (~sparkie1@4.4.16.52)
[19:48:20] *** Joins: seninha (~seninha@user/seninha)
[19:49:18] *** Quits: bosspotato (~bosspotat@user/bosspotato) (Ping timeout: 260 seconds)
[19:55:01] *** Joins: quartz (~quartz@user/quartz)
[19:55:02] *** Quits: stipa (~stipa@user/stipa) (Remote host closed the connection)
[19:55:19] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[19:55:26] *** Joins: stipa (~stipa@user/stipa)
[19:56:41] <quartz> Can someone explain to me what "pumping length" means in this proof? https://i.ibb.co/wsS7pW3/image.png They say: "Clearly s is a member of B and of length at least p". How do they know s is of length p without p being known?
[19:56:52] <dostoyevsky2> Could I think of a manifold as a set of curves?
[19:57:18] <qergle> quartz: what is "pumping length"?
[19:58:59] <Z-module> THe pumping lemma just says that some such positive p exists; this proof doesn't need to know it numerically.
[19:59:10] <Z-module> They call it p, and reason from there.
[19:59:16] <qergle> ok socratic process sabotaged
[19:59:29] <Franciman> loool
[20:00:26] <quartz> qergle: I don't know what "pumping length" means, that was my question
[20:00:36] <Z-module>  a^p b^p c^p  is a string of length 3p -- they only bring in "at least p" to explicitly give why the Pumping Lemma is applicable
[20:00:44] <qergle> quartz: ok, can you state the pumping lemma for cfl?
[20:00:46] <quartz> Z-module: So if you don't know it exists, than how do you know the length of the string is at least p
[20:01:19] <quartz> Z-module: It's 3p because there are literally 3p's (exponents) in the equation?
[20:01:22] <Z-module> You're assuming this is a CFL, thus the Pumping Lemma does apply.
[20:01:36] <quartz> qergle: I've read it a dozen times
[20:01:49] <Z-module> yes,  a^p  means the string consisting of p copies of  a  concatenated
[20:01:51] <qergle> quartz: inherent in the lemma is a statement about when it applies
[20:02:08] <Z-module> so  a^p b^p c^p  is a concatenation of three strings each of length p
[20:02:17] <qergle> can you tell me for which string l in a CFL L, does it apply?
[20:02:20] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 260 seconds)
[20:02:57] <isekaijin> Are mathematicians colorblind or what?
[20:03:11] <quartz> qergle: I'm aware of when the lemma applies, I'm just not sure how p is relevant.
[20:03:18] <isekaijin> I looked for Mumford's “Red Book” on Google... and the cover is yellow.
[20:03:28] <qergle> how can you know when it applies and not know what "pumping length" means?
[20:03:30] <quartz> For example, one condition in the lemma is |vxy| <= p
[20:03:39] <qergle> yes, and what is p, in that condition?
[20:03:52] <quartz> Well, how can you know if |vxy| <= p without KNOWING WHAT P IS???
[20:04:02] <quartz> the damn pumping lenght? Whatever tha tmeans
[20:04:04] <qergle> that's a different question
[20:04:11] <riv> p is a number
[20:04:26] <qergle> initially you asked what pumping length MEANS
[20:04:29] <Z-module> quartz: a thing you might not be aware of here is the typographical meanings. Those a, b, c  there are in a dark courier type, and those are actualy members of the language's alphabet.  The u,v,x,y,z things are in an italic proportional font, and those are meta-variables for this proof, just standing for certain finite strings, to be reasoned about.
[20:05:02] <qergle> Z-module read the pumping lemma wiki last night!
[20:05:11] <qergle> ok, bbl. time for combinatorics.
[20:05:33] <Z-module> the p here is simply a positive integer, whose existence (with various properties spelled out) is guaranteed for the CFL by the Pumping Lemma
[20:05:55] *** Joins: expix (~1@amontpellier-652-1-3-93.w90-57.abo.wanadoo.fr)
[20:06:14] <Z-module> We are reasoning about strings and their lengths and the number p without having to know what specific number p is.  Many math proofs are in this form.
[20:07:00] *** Quits: johnkeats6 (~johnkeats@2804:14c:32:a0cc:ee:5075:9596:3cb8) (Ping timeout: 260 seconds)
[20:08:49] <quartz> God this makes no sense lol
[20:09:13] <quartz> I've spent like 3 days trying to understand this damn lemma
[20:09:25] <riv> quartz: have you heard about the version for regular expressions?
[20:09:33] <riv> it's pretty simple to understand as a first step
[20:09:35] <quartz> riv: Yes
[20:10:03] <riv> so in the regular version, say you have the language a(bc)*d
[20:10:13] <riv> abcd, abcbcd, abcbcbcd, ...
[20:10:17] <riv> are strings in the language
[20:10:21] <riv> the 'bd' bit can be pumped
[20:11:03] <riv> the shortest string in the language is ad, which can't be pumped (you can't repeat a substring of it)
[20:11:19] <riv> so our pumping limit for this language is p = 4
[20:11:30] <riv> every string with length 4 or more can be pumped, right?
[20:11:56] <quartz> uhhh
[20:12:04] <quartz> I'm slow sorry, I'm reading what you wrote
[20:12:09] <riv> that's fine
[20:12:38] *** Joins: newpy (~newpy@206.168.231.90)
[20:12:44] <quartz> Why can't you pump ad, but you CAN pump bd
[20:12:47] <quartz> Did you mean bc?
[20:12:51] <quartz> bc can be pumped
[20:12:58] <riv> by 'pump' i mean grab a substring of a word, and repeat that substring
[20:13:22] <riv> e.g. I can take "foobars"  and pump "bar" to get foobarbars, foobarbarbars, ...
[20:13:36] <quartz> Yeah...
[20:13:42] <ski> (the substring has to be non-empty ?)
[20:13:44] <newpy> I have a question about williams percent range (only sort of math-related)
[20:13:58] <quartz> So why can't ad be pumped????
[20:14:07] <quartz> Just do a^p(bc)*d^p
[20:14:12] <newpy> the formula is (high-current)/(high-low) and it's supposed to return a value between 0 and -100, but I don't see how it can be negative
[20:14:14] <quartz> you pump the p's right?
[20:14:16] <riv> if i pump the "a" substring of "ad" I get aaaaad
[20:14:23] <riv> if i pump the "d" substring of "ad" I get addd
[20:14:26] <quartz> so p = 2  you get aa(bc)*dd
[20:14:29] <riv> if i pump the "ad" substring of "ad" I get adadadadad
[20:14:37] <riv> none of these are words in the language
[20:14:59] <riv> I am not sure what you mean with a^p(bc)*d^p
[20:15:05] <riv> a(bc)*d is the language in this example
[20:15:50] <riv> the language is made up of the words { '', 'abcd', 'abcbcd', 'abcbcbcd', ... }
[20:15:51] <quartz> If you pump "a" substring of "ad" why do you get aaaad and not aaaddd
[20:15:55] <quartz> Yeah
[20:16:09] <riv> because we only pump the a
[20:16:17] <quartz> but you said you'd pump ad
[20:16:26] <riv> when we pump ad we get adadad
[20:16:36] <quartz> Oh nevermind
[20:16:38] <quartz> I'm dumb
[20:16:45] <riv> look at this example again: e.g. I can take "foobars"  and pump "bar" to get foobarbars, foobarbarbars, ...
[20:17:00] <quartz> Yeah
[20:17:03] <riv> i replace bar with 2 or more copies of bar
[20:17:09] <riv> so anyway, this is the regular pumping lemma
[20:17:49] <riv> a regular expression is a finite expression, but it can describe arbitrarily long strings
[20:17:55] <quartz> uhhh
[20:18:02] <riv> the way it does that is via the kleene star
[20:18:22] <riv> which is just the repetition of a substring
[20:18:35] <quartz> in a(bc)*d , how is the pumping lengh 4?
[20:18:38] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[20:18:41] <quartz> Yeah I get the foobar example
[20:18:47] <riv> it's 4 because that's the smallest string that I can pump
[20:18:53] <riv> and still get words in the language
[20:19:00] <quartz> BUt how did you get 4
[20:19:08] <riv> 'abcd' is length 4
[20:19:33] <riv> and i can pump that middle 'bd' part to get more strings in this language
[20:19:45] <riv> 'abcbcd', 'abcbcbcbcbcbcbcd', and so on
[20:19:54] <quartz> OK...
[20:20:17] <quartz> It should be 2 though
[20:20:24] <quartz> Because you can only pump (bd)
[20:20:29] <quartz> taht is the smallest string you can pump
[20:20:35] *** Joins: Guest58 (~Guest58@dhcp168-032.wadham.ox.ac.uk)
[20:20:35] *** Guest58 is now known as jthistle
[20:20:37] <quartz> you can't pump ad
[20:20:42] <quartz> So why is it not 2?
[20:20:52] <riv> did you make a typo
[20:21:00] <quartz> god this makes no sense
[20:21:02] <quartz> no
[20:21:11] <quartz> The PUMPING LENGTH is the smallest string that can be pumped yes?
[20:21:14] *** Quits: jthistle (~Guest58@dhcp168-032.wadham.ox.ac.uk) (Changing host)
[20:21:14] *** Joins: jthistle (~Guest58@user/jthistle)
[20:21:23] <riv> not quite
[20:21:24] *** Quits: stipa (~stipa@user/stipa) (Remote host closed the connection)
[20:21:26] <qergle> maybe time to revisit regular languages if cfl is too difficult
[20:21:43] <riv> p is the number such that every string at least that length, can be pumped
[20:21:49] *** Joins: stipa (~stipa@user/stipa)
[20:22:01] *** Joins: dez (uid92154@user/dez)
[20:22:18] <jthistle> Hi, how can the sine Fourier series be said to converge to any function in L^2([0, pi]) space if it can only equal zero at x = 0?
[20:22:36] <quartz> riv: But there is no way to know what p is?
[20:22:38] <quartz> so.
[20:22:44] <quartz> Why even have a p at all?
[20:22:45] *** Quits: robin (~robin@user/terpri) (Ping timeout: 260 seconds)
[20:22:45] <riv> there is a way to know, it's 4
[20:22:51] <quartz> lol
[20:22:57] *** Joins: robin (~robin@user/terpri)
[20:23:01] <quartz> "there's no way to know what it is, but there is a way"
[20:23:09] <quartz> I know p is derived from the CFG
[20:23:12] <riv> I didn't say that there is no way to know what it is
[20:23:16] <jthistle> ^ Curious because since it's constructed from the orthogonal bases of a L2, which is Hilbert space, it should be able to converge to any member of L2
[20:23:16] <riv> so who are you quoting?
[20:23:32] <quartz> riv: THe stupid instructor from this class
[20:23:36] <quartz> and the text book
[20:23:40] *** Quits: daoudr (~daoudr@2a02:1205:c690:ca10:1f8f:22dc:9967:691a) (Quit: Leaving)
[20:23:46] <quartz> and like other people I've asked about this stpud concenpt
[20:23:47] <riv> ok well let's not get distracted
[20:23:48] <quartz> concept*
[20:23:54] <riv> currently we are discussing the pumping lemma for regular expressions
[20:24:01] <quartz> They all say: "DONT ASSIGN A NUMBER TO P"
[20:24:04] <quartz> Yeah
[20:24:08] <riv> because it's simpler, and if you understand it. it will be easy to understand the CFG version too
[20:24:31] <riv> are you familiar with DFAs of regular languages?
[20:24:59] *** Joins: ionface_ (~ionface@user/ionface)
[20:24:59] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 264 seconds)
[20:25:01] <quartz> riv: Yeah
[20:25:06] <quartz> I just want to understand p
[20:25:10] <quartz> how to get the damn length
[20:25:12] <riv> yes this is related to p
[20:25:30] <quartz> |xy| <= p how can you ever know if |xy| is <= p without knowing p?
[20:25:38] *** Joins: rubiksdream (~rubiksdre@1-64-46-156.static.netvigator.com)
[20:25:49] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:26:01] <isekaijin> By finding some abstract property that implies that |xy| <= p?
[20:26:01] <riv> consider a path from the start state to the accept state of a regex DFA
[20:26:22] <riv> in particular the shortest path that does this and goes in a loop
[20:26:27] <riv> the length of this is p
[20:26:49] <riv> the loop part is the part that you can pump, because you can go around the loop as many times as you want - and this string will be accepted
[20:26:58] <quartz> uhhh
[20:27:00] <quartz> OK
[20:27:09] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[20:27:12] <riv> https://neuraldump.net/wp-content/uploads/2017/12/pumping_lemma.png
[20:27:15] <riv> diagram in case that helps
[20:27:34] *** Joins: fiberizone_ (~fiberizon@175.130.82.79.rev.sfr.net)
[20:28:00] <quartz> uhhhh OK
[20:29:01] *** Quits: emerent (~quassel@p200300cd574855daba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[20:29:28] *** Joins: emanuele6 (~emanuele6@net-2-36-101-242.cust.vodafonedsl.it)
[20:29:40] *** Joins: emerent (~quassel@p200300cd5748559eba27ebfffed28a59.dip0.t-ipconnect.de)
[20:29:46] *** Quits: emanuele6 (~emanuele6@net-2-36-101-242.cust.vodafonedsl.it) (Changing host)
[20:29:46] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[20:29:47] <mawk> that depends on the dimension I guess dostoyevsky2
[20:29:54] <riv> so the RE pumping lemma says there's a limit p, where every string at least length p can be broken down into 3 parts X Y Z such that X Y Y Z, X Y Y Y Z etc. are all in the language too
[20:30:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[20:30:49] <riv> in our example a(bc)*d the length is 4 and if we take a string say abcd of length 4, we can break it down into parts X = a, Y = bc, Z = d
[20:30:50] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:31:30] *** Joins: DPA (~DPA@2a05:41c0:b:db04::a3c:10d)
[20:31:43] *** Quits: jthistle (~Guest58@user/jthistle) (Quit: Connection closed)
[20:32:01] *** Joins: Guest58 (~Guest58@dhcp168-032.wadham.ox.ac.uk)
[20:32:08] *** Guest58 is now known as jthistle
[20:32:16] *** Quits: jthistle (~Guest58@dhcp168-032.wadham.ox.ac.uk) (Changing host)
[20:32:16] *** Joins: jthistle (~Guest58@user/jthistle)
[20:32:37] *** Joins: hyiltiz (~quassel@31.220.5.250)
[20:32:38] *** Quits: jthistle (~Guest58@user/jthistle) (Client Quit)
[20:32:42] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[20:33:00] *** Joins: jthistle (~jthistle@user/jthistle)
[20:33:05] <quartz> uhhhh
[20:34:45] *** Joins: bonte (~bonte@slartibartfast.lysator.liu.se)
[20:35:56] <riv> another example, foo|bar|(repeat)* this language has the strings {'foo', 'bar', '', 'repeat', 'repeatrepeat', 'repeatrepeatrepeat', ...} in it the pumping length p = 6. A string of length >= 65 say 'repeatrepeat' could be broken down as X = 'repeat', Y = 'repeat' and Z = ''. and this can be pumped
[20:36:12] <riv> see how the short strings like 'foo' and 'bar' cannot be pumped
[20:36:46] *** Quits: DPA (~DPA@2a05:41c0:b:db04::a3c:10d) (Ping timeout: 245 seconds)
[20:37:08] <Z-module> For the CFL version, I do think  https://en.wikipedia.org/wiki/Pumping_lemma_for_context-free_languages#Formal_statement   is pretty clear. I would clarify property (1) as simply that at least one of the strings v, x is non-null. Any of u, w, y can be null, as can one of v, x.
[20:38:22] *** Quits: rubiksdream (~rubiksdre@1-64-46-156.static.netvigator.com) (Remote host closed the connection)
[20:38:47] <quartz> Uhhh
[20:38:52] <quartz> I'm slow sorry
[20:39:01] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[20:39:02] <mh_le> hey Z-module
[20:39:03] <riv> that's totally fine, just ask me if something i said is unclear
[20:39:04] <quartz> Wish there was a way to increase my intelligence or IQ
[20:39:15] <quartz> I've probably got a sub 100 IQ sadly haha
[20:39:22] <quartz> OK enough griefing
[20:40:00] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:40:13] *** Quits: sheepduck (~sheepduck@user/sheepduck) (Quit: Konversation terminated!)
[20:41:26] <quartz> riv: OK that kinda makes sense
[20:41:31] <riv> ok great!
[20:41:34] <quartz> Z-module: Yes I understand that much, surprisingly
[20:41:57] <riv> so the CFG is basically the same, except that instead of breaking the strings into X Y Z they get broken into U V W X Y
[20:42:22] <riv> and instead of X Y^n Z, it's U V^n W X^n Y
[20:42:31] <Z-module> the U and Y parts just sit there unchanged for the entire statement
[20:42:43] *** Joins: sheepduck (~sheepduck@user/sheepduck)
[20:42:54] <Z-module> hi mh_le
[20:43:02] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[20:43:10] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 260 seconds)
[20:43:43] <quartz> BUt how does setting exponents = p work into this? Like most proofs will say: prove this language a^j b^k c^k d^k satisifies the pumping lemma for context free langauges
[20:43:54] <quartz> They pick a string s = a b^p c^p d^p
[20:43:56] <quartz> What is p?
[20:44:07] <quartz> That is the minimum length needed
[20:44:08] <mh_le> Z-module: I'm having a late dinner so I'm hungry
[20:44:16] <quartz> to pump the string and still keep it in the language
[20:44:32] <quartz> so they are saying, basically, that if you pump b, c, d, than you will always get a string in th elanguage
[20:44:44] *** Quits: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d) (Quit: WeeChat 2.3)
[20:44:58] <quartz> No sorry that's wrong
[20:45:03] *** Joins: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d)
[20:45:34] *** Joins: nullcone (uid11626@id-11626.helmsley.irccloud.com)
[20:45:40] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[20:45:53] <quartz> p is the SMALLEST string that is able to be pumped and still get a string in the language.
[20:46:03] <quartz> SO what is the point of assiging the exponent p?
[20:46:19] <riv> quartz: wait a sec, the exponent is not p
[20:46:22] <riv> the length of the string is p
[20:46:36] *** Parts: savask (~savask@Powder/Developer/savask) ()
[20:46:51] <riv> oh ok
[20:46:54] <quartz> For this practice question: https://i.ibb.co/SBhLHbJ/image.png    The answer is: https://i.ibb.co/wc6kYmV/image.png
[20:47:02] <quartz> Notice how they change the variable k for p?
[20:47:04] <riv> so if someone describes a language that may or may not be context free
[20:47:05] <quartz> in string w
[20:47:09] <Z-module> They are taking your language consisting of  a^n b^n c^n   for all naturals n, and then setting n to = the pumping length for this language, call it p.  Then using the pumping properties to show that the lanuage is also forced to contain some things not of the form  a^n b^n c^n   which gives the contradiciton.
[20:47:27] <riv> you can assume for a contradiction that the language is context free
[20:47:35] <riv> apply the pumping lemma, to get a contradiction
[20:47:44] <riv> and then conclude that the language was not context free
[20:47:52] <quartz> Yeah I get the contradiction part
[20:47:59] <riv> does this proof strategy make sense? in this case there is no 'p' because the language is not actually context free
[20:48:45] *** Quits: magic_ninja_work (~sparkie1@4.4.16.52) (Ping timeout: 244 seconds)
[20:49:24] <quartz> Yes
[20:49:47] <quartz> But I just don't get why they replace the exponent k with p
[20:49:52] <quartz> In the answer
[20:50:22] <quartz> p is just length... so they are saying that all variables with exponent p can be pumped and stILL GET A STRING IN THE LANGAUGE?
[20:51:00] *** Joins: DPA (~DPA@2a05:41c0:b:db04::a3c:10d)
[20:51:10] <riv> suppose the pumping length is p
[20:51:21] <riv> consider the string w = a b^p c^p d^p
[20:51:31] <riv> that has length 1 + 3p
[20:51:33] <riv> which is >= p
[20:51:38] <riv> so we can apply pumping lemma to w
[20:52:09] <riv> then the pumping lemma breaks w down into U V W X Y
[20:52:26] <riv> s.t. all U V^n W X^n Y are also in the language
[20:54:16] <quartz> Yeah...
[20:54:18] <quartz> Uhhh
[20:54:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[20:55:31] <quartz> I think I'll take a break. THis still does not make sense. I can't understand the relationship between setting the exponents of a language like ab^kc^kd^k with p, THAN applying the partitioning aspect of the lemma
[20:55:50] <quartz> I've never been so confused in my life. '
[20:55:55] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[20:55:58] <quartz> 3 days of trying to understand this. I'ts like literally not that hard
[20:57:08] <riv> it is very abstract
[20:57:29] <riv> it's helpful when you can do concrete examples, but when proving negatives like this its hard to make things concrete
[20:57:29] *** Joins: slidercrank (~slidercra@user/slidercrank)
[20:58:25] <Z-module> They're only saying that eventually all of the strings  abc, aabbc,  aaabbbccc,  aaaabbbbcccc, ... are long enough (total length at least p) that the pumping lemma applies, so take *any* one of those, call it s, and apply the lemma, and with enough pumping up (high enough n) on that s we produce a new string that must be in L according to the lemma, yet is no longer of the form a^n b^n c^n
[20:58:37] <quartz> So in the expression a b^p c^p d^p, p has nothing to do with actually PUMPING b c d?
[20:58:41] <Z-module> my second one up there should have been  aabbcc
[20:58:55] <riv> correct
[20:59:12] <riv> we don;'t know how the pumping lemma will break down that string
[20:59:20] <riv> it wont necessarily group all the b's into one grup
[21:00:13] <quartz> SO, again, what is the point of showing that w = a b^p c^p d^p?
[21:00:23] <riv> no they are not showing w = a b^p c^p d^p
[21:00:29] <riv> they have defined w to be a b^p c^p d^p
[21:00:47] <Z-module> oh, I was still talking about the first problem (the a^n b^n c^n  language), sorry
[21:00:50] <quartz> OK, how does defining w = to that string mean anything?
[21:01:00] <quartz> Z-module: Its OK
[21:01:05] <riv> it's just a name for a string
[21:01:24] <quartz> So what is the significance of p in a b^p c^p d^p?
[21:01:28] <riv> instead of writing a b^p c^p d^p every time we can just write w now
[21:01:41] <riv> as i said earlier, using p here ensures that w has length >= p
[21:01:42] <quartz> Yeah but what is the significace of p in that string?
[21:01:44] <Z-module> The point of this new exercise is to show why being a CFL is not *equivalent* to satisfying the pumping lemma.  Merely that CFL => pumping.
[21:01:55] <riv> specifically, w has length 1 + 3p
[21:02:08] *** Joins: Guest70 (~Guest70@cpe-173-174-25-173.stx.res.rr.com)
[21:02:35] <Z-module> In other words, CFL => pumping  holds (this is exactly the pumping lemma for CFLs), but  pumping => CFL  does not hold because of this example.
[21:02:38] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[21:02:49] <quartz> Uhhh
[21:02:53] <Z-module> This example has pumping true but CFL not true.
[21:04:43] <Guest70> I want to compute taylor expansion of f(x-h,y). I wrote initially: f(x-h,y) = f(x,y) - f_x * h + (1/2) * f_xx h^2 + O(h^3), but now I think it should be  - O(h^3). Is that correct?
[21:06:48] *** Joins: fiberizone__ (~fiberizon@28.255.119.78.rev.sfr.net)
[21:07:26] <mawk> that depends on the continuity class of f(·, y) Guest70
[21:07:31] <Guest70> uh
[21:07:44] <mawk> if the third derivative of f(·, y) is continuous then yes
[21:07:50] <mawk> otherwise it's just a o(h²) and not a O(h³)
[21:08:06] <mawk> I think that's the condition, I might be wrong; maybe it's just differentiability
[21:08:10] <Guest70> yeah of course cause then we wouldn't even be able to write the third derivative of f wrt y :P
[21:08:13] <Guest70> x
[21:08:23] <mawk> well there's no third derivative of f in the taylor expansion
[21:08:24] <Guest70> but my concern is with the sign.
[21:08:30] <mawk> the sign doesn't matter
[21:08:33] <Guest70> wait what
[21:08:35] <mawk> -O(h³) is O(h³)
[21:08:35] <mawk> just make it +
[21:08:38] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[21:09:12] <mawk> O is not like a regular function, it's a notation
[21:09:36] *** Quits: kmh (~kmh@2a00:6020:5004:6800:40d4:385e:7145:a7a7) (Quit: Leaving)
[21:09:38] *** Quits: fiberizone_ (~fiberizon@175.130.82.79.rev.sfr.net) (Ping timeout: 265 seconds)
[21:10:27] *** Joins: Brainium (~brainium@user/brainium)
[21:11:18] *** fiberizone__ is now known as fiberizone_
[21:12:21] *** Quits: jthistle (~jthistle@user/jthistle) (Quit: Connection closed)
[21:15:39] *** Joins: X-Scale (~ARM@31.22.163.11)
[21:16:52] <Guest70> can you tell me the definition of the 2d taylor series?
[21:20:32] *** Joins: bosspotato (~bosspotat@142.184.100.116)
[21:20:32] *** Quits: bosspotato (~bosspotat@142.184.100.116) (Changing host)
[21:20:32] *** Joins: bosspotato (~bosspotat@user/bosspotato)
[21:23:04] *** Joins: Crescendo (~Crescendo@user/crescendo)
[21:25:06] *** Quits: DPA (~DPA@2a05:41c0:b:db04::a3c:10d) (Ping timeout: 245 seconds)
[21:26:53] *** Joins: loller_ (uid358106@id-358106.uxbridge.irccloud.com)
[21:27:52] *** Joins: DPA (~DPA@2a05:41c0:b:db04::a3c:10d)
[21:28:34] *** Joins: anovick (~anovick@IGLD-83-130-138-203.inter.net.il)
[21:29:40] *** Joins: jthistle (~jthistle@user/jthistle)
[21:30:27] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:31:14] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[21:31:32] *** Joins: ppw (~quassel@user/ppw)
[21:31:55] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:32:07] *** Parts: ppw (~quassel@user/ppw) ()
[21:33:25] *** Quits: DPA (~DPA@2a05:41c0:b:db04::a3c:10d) (Ping timeout: 252 seconds)
[21:33:59] *** Joins: DPA (~DPA@2a05:41c0:b:db04::a3c:10d)
[21:34:09] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:34:54] <[itchyjunk]> mawk, we were discussing how some of eulers original ideas of logs aren't relevant anymore. and the difference between Log and log in C
[21:35:04] <[itchyjunk]> so the joke about your nick with small can capital letter
[21:35:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:35:50] *** Joins: molten (~molt@178-222-245-206.static.isp.telekom.rs)
[21:36:47] <isekaijin> Some people use Log to denote the so-called “principal branch” of the logarithm.
[21:37:49] <isekaijin> This branch is defined on C minus the nonnegative real axis, and satisfies Log(1) = 0.
[21:38:15] <isekaijin> It turns out, these two properties completely determine Log.
[21:39:10] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 260 seconds)
[21:39:17] *** Quits: Guest70 (~Guest70@cpe-173-174-25-173.stx.res.rr.com) (Ping timeout: 256 seconds)
[21:40:09] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[21:42:23] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[21:42:46] *** Quits: molten (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 252 seconds)
[21:43:01] <Z-module> you mean minus the non-positive axis, surely
[21:43:11] <Z-module> (that is, with 0 and all negative reals removed)
[21:44:23] <loller_> I have a problem where I am asked to expand in Taylor series (all terms) the expression e^i*k*r around r=0, where k is a constant vector and r is the position vector
[21:44:37] <loller_> if this had been e^ix I would have known how to do it obviously
[21:44:55] <loller_> but now that I have a scalar product of two vectors as the variable I'm not sure how to approach the problem at all
[21:45:39] <loller_> e^i*k*r is meant to represent a plane wave I guess
[21:47:13] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:47:22] <loller_> no wait a spherical wave
[21:47:26] <loller_> now I am just confusing myself
[21:47:28] <loller_> hm
[21:47:42] <loller_> there actually is an expansion presented here: https://en.wikipedia.org/wiki/Plane-wave_expansion
[21:47:43] *** Joins: kmh (~kmh@2a00:6020:5004:6800:9e65:c160:9d26:6a17)
[21:47:55] <loller_> but that's way more complicated than what we're supposed to arrive at
[21:48:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[21:49:28] *** Joins: notzmv (~zmv@user/notzmv)
[21:50:28] *** Quits: jthistle (~jthistle@user/jthistle) (Ping timeout: 252 seconds)
[21:51:24] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[21:52:57] *** Joins: candyman (~candyman@user/candyman)
[21:53:56] *** Quits: candyman (~candyman@user/candyman) (Client Quit)
[21:54:00] <quartz> Can someone help me understand what they mean by if two context free langauges are closed under the complement, than they are closed under the intersection?
[21:54:22] <quartz> They state it here: https://i.ibb.co/cD70pfR/image.png   I'm trying to prove that context-free languages are NOT closed under the complement operation
[21:55:15] <switchnode> this is just an application of de morgan's law
[21:55:20] *** Joins: average (uid473595@user/average)
[21:55:35] *** Joins: arseniiv (~arseniiv@136.169.235.33)
[21:56:22] <switchnode> not ((not L1) or (not L2)) = L1 and L2
[21:56:59] *** Quits: stipa (~stipa@user/stipa) (Remote host closed the connection)
[21:57:00] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:57:23] *** Joins: stipa (~stipa@user/stipa)
[21:59:28] *** Joins: b93 (~I@a89-152-175-20.cpe.netcabo.pt)
[21:59:32] *** Joins: geonic (~geonic@user/geonic)
[22:00:55] *** Joins: inomoz (~inomoz@176.59.118.101)
[22:01:15] <quartz> switchnode: When you mean "not" do you mean the complement?
[22:01:51] <switchnode> yes
[22:02:20] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:02:37] <quartz> But how can you take the complement of an individual language? I thought the complement had to be in relation between two languages
[22:02:43] <quartz> "Everything not in A, but in B"
[22:02:55] <switchnode> no, you're thinking of the difference
[22:02:57] <Z-module> The universe is all possible finite strings using any letters of the given alphabet
[22:03:03] <Z-module> you take the complement relative to that
[22:03:23] <switchnode> right, it's every string over the alphabet _not_ in the language
[22:03:40] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 252 seconds)
[22:08:17] <Z-module> So if U is some universe set (very general now, forget strings and languages), and if L, K are any two subsets of U, then the intersection   L cap K = U \ ((U\L) cup (U\K))  -- the complement of the union of the complements of the two given sets. You might be more familiar with the notation  (L cap K)^c = L^c cup K^c
[22:08:55] <Z-module> That's what they are using here.
[22:09:02] <Z-module> for L_1, L_2  as the two sets
[22:09:07] *** Joins: alex6 (~alex@t98d5.wpa.dal.ca)
[22:11:45] *** Joins: Crescendo (~Crescendo@user/crescendo)
[22:12:31] *** Quits: DPA (~DPA@2a05:41c0:b:db04::a3c:10d) (Ping timeout: 258 seconds)
[22:12:42] <quartz> Why do they do the individual complement of L_1 and L_2, than take the complement of that set?
[22:12:59] <quartz> Uhhh
[22:13:22] *** Joins: constxd (~brad@ta947.wpa.dal.ca)
[22:13:26] <quartz> To show that it is equal to the intersection of two context free languages?
[22:13:32] <switchnode> correct
[22:13:33] *** Joins: DPA- (~DPA@2a05:41c0:b:db04::a3c:10d)
[22:14:30] *** Joins: biberao (~m@user/biberao)
[22:14:32] <biberao> hi
[22:14:33] <switchnode> they are showing that _if_ context-free languages are closed under complement, _then_ they are closed under intersection
[22:14:57] <Z-module> But by a separate argument entirely, we know they are not actually closed under intersection.
[22:14:57] <switchnode> but we already know (from outside this proof) that context-free languages are not closed under intersection
[22:15:03] <switchnode> jinx
[22:15:16] <switchnode> therefore, they must not be closed under complement
[22:16:26] *** Quits: ionface_ (~ionface@user/ionface) (Read error: Connection reset by peer)
[22:16:41] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:17:08] *** Joins: ionface (~ionface@user/ionface)
[22:17:22] <quartz> laptop battery is going to die. BRB
[22:17:22] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:17:42] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[22:18:43] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[22:18:54] *** Joins: Crescendo (~Crescendo@user/crescendo)
[22:19:14] *** Quits: DPA- (~DPA@2a05:41c0:b:db04::a3c:10d) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[22:21:11] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[22:21:26] *** Quits: shikhin (~shikhin@ahti.space) (Changing host)
[22:21:26] *** Joins: shikhin (~shikhin@offtopia/offtopian)
[22:23:33] *** Joins: quartz (~quartz@user/quartz)
[22:26:16] *** Quits: Null_A (~null_a@2601:645:8700:2290:6cb0:bf84:22bf:3285) (Remote host closed the connection)
[22:26:19] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[22:30:09] <biberao> h/query rex-
[22:30:12] <biberao> shoot
[22:30:14] <biberao> :D
[22:32:18] <[itchyjunk]> Say e^z = w then i would want to define log as z = ln(x) + iyn , n in Z or somesuch? ln just means log for Reals and log mean a function being defined in C
[22:33:13] <riv> lot z = r e^(i t)
[22:33:26] <riv> log(z) = log(r e^(i t)) = log(r) + i t
[22:33:58] <[itchyjunk]> hmm but why just it ?
[22:34:07] <[itchyjunk]> i am wondering about arg(z)
[22:34:29] <[itchyjunk]> t + 2pi n all wuold be valid right?
[22:34:52] <[itchyjunk]> My problem says find all values of z such that : e^z = -2
[22:35:11] <[itchyjunk]> so z = ln(2) + i (pi + 2 pi n) , n in Z ?
[22:35:35] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: WeeChat 3.3)
[22:35:56] <riv> log(z) = log(r e^(i t)) = log(r) + log(exp(i t)) = log(r) + i t
[22:36:17] <[itchyjunk]> that's "all possible values" ?
[22:36:35] <riv> z = r e^(i t) <-- notiec that z is the same even if we add 2 pi to t
[22:36:46] <riv> but this isn't true of the expression log(r) + i t
[22:37:40] *** Quits: lakitu (~lakitu@192-198-3-9.dhcp.radiolinkinternet.com) (Read error: Connection reset by peer)
[22:38:23] <quartz> switchnode: If I have not(not(L_1 n L_2)) than that should be the same as L_1 n L_2 right?
[22:38:38] <switchnode> yep
[22:39:13] <[itchyjunk]> there is infinitly many z that satisfy e^z = -2 though. z = ln(2) + i pi is just one such z. where did the rest of them go?
[22:39:52] *** Joins: lakitu (~lakitu@192-198-3-9.dhcp.radiolinkinternet.com)
[22:40:30] <quartz> switchnode: I'm having trouble understanding how they went from not(not(L_1) U not(L_2)) = L_1 n L_2 can you explain it please?
[22:41:28] <switchnode> quartz: sure. do you agree that not (A or B) = (not A) and (not B)?
[22:41:53] *** Joins: son0p (~ff@181.136.122.143)
[22:44:07] <quartz> Uhh
[22:45:29] <switchnode> would it help if i drew the tables
[22:45:39] <quartz> I'm not sure how you'd get the result of (A or B)
[22:46:49] <switchnode> the expressions are equivalent, so they both have the same value _no matter what_ the values of A and B are.
[22:46:57] <switchnode> suppose A and B are both false.
[22:47:07] <switchnode> then what's not (A or B)?
[22:48:07] <quartz> False
[22:48:18] <quartz> Uh
[22:48:20] <quartz> True
[22:48:22] <quartz> sorry
[22:48:24] <quartz> Didn't see the not
[22:48:28] <switchnode> yes, true.
[22:48:33] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[22:48:38] <switchnode> and what's (not A) and (not B)?
[22:48:46] *** Quits: anovick (~anovick@IGLD-83-130-138-203.inter.net.il) (Ping timeout: 252 seconds)
[22:48:48] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[22:48:51] <quartz> It depends on the values of A and B right?
[22:49:03] <quartz> Otherwise how can you evaluate it?
[22:49:04] <switchnode> right, but we're still supposing they're both false.
[22:49:08] <quartz> OK
[22:49:15] <quartz> True
[22:49:35] <switchnode> same answer, right?
[22:50:12] <switchnode> now suppose A is false and B is true.
[22:50:20] <switchnode> _then_ what's not (A or B)?
[22:51:20] <[itchyjunk]> it is what my professor wants -,- e^z = -2 , z = ln(2) + i(pi + 2pin) n \in Z
[22:51:47] <quartz> switchnode: false
[22:51:55] *** Joins: Guest17 (~Guest17@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[22:52:10] <switchnode> correct. and what's (not A) and (not B)?
[22:54:23] <quartz> False
[22:54:33] <switchnode> same answer again.
[22:54:42] <switchnode> now suppose A is true and B is false.
[22:54:55] <switchnode> what's not (A or B) this time?
[22:55:19] <quartz> True
[22:56:03] <switchnode> try again
[22:56:59] <quartz> Oh false
[22:57:02] <quartz> lol the not
[22:57:12] *** Joins: ferdna (~ferdna@user/ferdna)
[22:57:17] <switchnode> and (not A) and (not B)?
[22:58:15] <DPA> false
[22:58:25] <quartz> I'm sorry I'm kinda lost as to where this is going
[22:58:34] <switchnode> i'm getting there
[22:58:41] <switchnode> same answer again. okay, last one: suppose A and B are both true.
[22:58:41] <qergle> proving demorgan via truth tables
[22:58:56] <switchnode> now what's not (A or B)?
[22:59:14] <DPA> false
[22:59:40] <switchnode> thank you, but i'm asking quartz. quartz, do you agree?
[23:00:10] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Remote host closed the connection)
[23:00:11] <quartz> Yes
[23:00:25] <switchnode> good. and (not A) and (not B)?
[23:00:40] <quartz> True
[23:00:42] *** Joins: yotsuba420 (~yotsuba@93-172-241-53.bb.netvision.net.il)
[23:00:49] <switchnode> try again
[23:00:57] <quartz> false :P
[23:01:05] <quartz> Wow i'm dumb sorry haha
[23:01:06] <somiaj> [itchyjunk]: looks correct.
[23:01:39] <switchnode> np. okay, we've checked every possible combination of values of A and B, right?
[23:01:54] <quartz> Sure
[23:02:37] <biberao> quartz: he's trying to confuse you and spill your bank account code
[23:02:39] <switchnode> and for every single one of those cases, the value of "not (A or B)" was equal to the value of "(not A) and (not B)", right?
[23:02:44] <biberao> qergle: i mean
[23:02:54] *** Quits: yotsuba420 (~yotsuba@93-172-241-53.bb.netvision.net.il) (Client Quit)
[23:03:01] <[itchyjunk]> nice
[23:03:06] *** Quits: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il) (Ping timeout: 244 seconds)
[23:03:11] *** Joins: oxide (~lambda@user/oxide)
[23:03:15] <somiaj> [itchyjunk]: oops you have a small error
[23:03:19] <biberao> switchnode: those are equivalent
[23:03:30] <somiaj> [itchyjunk]: you have an extra 'n'
[23:03:35] <switchnode> biberao: yes, that's what i'm explaining to quartz
[23:03:47] <biberao> switchnode: ive been studying logic lately
[23:03:48] <quartz> SUre
[23:03:58] <somiaj> [itchyjunk]: oh nevermind, you are just missing a , so I thought you had ln(2) + i(pi + 2n ip)n
[23:04:33] <qergle> biberao unless biberao
[23:04:45] <[itchyjunk]> ah yes ", n in Z"
[23:04:49] <biberao> qergle: <3
[23:05:02] <switchnode> quartz: right! so "not (A or B)" is ALWAYS equal to "(not A) and (not B)", no matter what the values of A and B are
[23:05:09] <switchnode> just like 2(x + 1) is always equal to 2x + 2 no matter what x is.
[23:05:19] *** Quits: Oli (~Unknown@user/oli) (Quit: Lost terminal)
[23:05:30] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[23:05:58] *** Joins: kariosfox (~kariosfox@176.221.125.192)
[23:06:06] *** Joins: Oli (~Unknown@user/oli)
[23:06:21] <switchnode> does that make sense?
[23:06:56] *** Joins: martin[15 (~martingab@2001:470:69fc:105::1:2192)
[23:07:12] <somiaj> yes, De'Morgan's laws are an identity that work for any statements A,B
[23:07:32] <somiaj> which then have a set theory equivlant using unions/intersections/complements
[23:07:50] *** Quits: kariosfox (~kariosfox@176.221.125.192) (Remote host closed the connection)
[23:08:06] *** Joins: kariosfox (~kariosfox@176.221.125.192)
[23:08:26] *** Joins: daoudr (~daoudr@2a02:1205:c690:ca10:1f8f:22dc:9967:691a)
[23:08:34] *** Quits: constxd (~brad@ta947.wpa.dal.ca) (Ping timeout: 260 seconds)
[23:09:00] <quartz> switchnode: I'm trying to reread what you wrote
[23:10:46] <switchnode> i really have to go pretty soon, so if you still have any questions you had better ask them now
[23:11:03] <somiaj> oh wait I lost who was asking the question / giving the explaination.
[23:11:06] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:11:07] <switchnode> lol
[23:11:32] <quartz> I think I"m going to take a break now anyway. But thank you so much for your help!
[23:12:44] <qergle> there are gaps in the learning process
[23:13:11] <quartz> I just learn to slowly
[23:13:20] <quartz> It taken me days to understand the pumping lemma
[23:13:22] <quartz> so sad
[23:13:31] <qergle> trying to find contradictions using cfl pumping lemma without knowing demorgan is not standard progression
[23:13:58] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[23:14:07] <quartz> I've heard of demorgan's but forgot about it.
[23:14:09] <switchnode> ok, you're welcome. once you're comfortable with de morgan's law, you can simply perform the substitution used in the proof (with A = not L1 and B = not L2). bye now
[23:14:29] <quartz> switchnode: Bye
[23:14:47] *** Quits: Guest17 (~Guest17@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Quit: Client closed)
[23:15:50] *** Joins: Guest2990 (~Guest29@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[23:16:01] <qergle> before getting into automata you need to have at least a noob-understanding of some basic math objects: sets, functions then some layers above that, boolean logic, etc.
[23:16:30] <qergle> and if you don't then you should be learning that, not trying to figure out what a pumping length is.
[23:17:10] <qergle> do you put on your pants before your underwear?
[23:18:08] *** Parts: martin[15 (~martingab@2001:470:69fc:105::1:2192) ()
[23:19:42] <qergle> what next, learning complexity without understanding limits?
[23:20:10] *** Joins: constxd (~brad@TA947.WPA.Dal.Ca)
[23:21:26] <Guest2990> hey everyone, I am confused about the 2d taylor expansion. Everything I see never goes beyond the quadratic term. Is there a third term?
[23:21:36] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[23:21:39] <qergle> does it have an error term?
[23:21:51] <[itchyjunk]> e^(2z-1) = 1 => z = ln(1) + 1/2 + i(pi n) , n \in Z ?
[23:22:19] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[23:22:28] <Guest2990> I don't really know the definition of the expansion, qergle
[23:22:28] <somiaj> 2nd degree/order taylor expansion/polynoimal, means quadratic polynomial approximation
[23:22:40] <qergle> Guest2990: generalization of 1d
[23:22:51] <Guest2990> yeah but the 1d one you can have a lot of terms
[23:22:59] <qergle> same here
[23:23:14] <Guest2990> but what would be the third term
[23:23:29] <somiaj> The full expansion is a series, and contains all terms, but if it the degree is specified, that is the max term you include
[23:23:46] <qergle> the third term would be all the third partials
[23:23:48] <qergle> all combos
[23:23:51] <qergle> pain the ASS
[23:23:54] <somiaj> oh sorry, 2d, nevermind
[23:24:41] *** Gustavo6046_ is now known as Gustavo6046
[23:24:42] <qergle> how did you calculate 2nd term?
[23:24:47] <Guest2990> can i show some writing?
[23:25:37] <qergle> 2nd term looks like 2nd row of pascal's
[23:25:42] <qergle> 1 - 2 - 1
[23:25:47] <qergle> then you go down one
[23:26:24] <somiaj> in general the n-th degree terms are all thigns of the form c x^a y^b where a+b = n
[23:26:34] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[23:26:47] <Guest2990> this is too general for me to understand without actually seeing the equation
[23:27:44] <qergle> just don't stop at 2
[23:28:25] *** Quits: oxide (~lambda@user/oxide) (Quit: oxide)
[23:28:44] <qergle> the 1st order has the two partials (wrt x & y)
[23:29:14] <qergle> 2nd order has those and the three cross partials (but xy and yx are equal) so you get 1-2-1
[23:29:42] <qergle> 3rd order has all those and the third partials xxx, xxy, ...
[23:30:04] <qergle> ad nauseum, and i say nauseum with emphasis.
[23:30:31] <Guest2990> oooh
[23:31:59] <qergle> then you get 1-3-3-1 (from pascal)
[23:32:13] <qergle> because xxy, xyx, yxx are all the same (first 3)
[23:32:29] <qergle> and yyx, yxy, xyy are all the same (second 3)
[23:32:56] <qergle> first 1 is xxx and last 1 is yyy. the end.
[23:33:05] <Guest2990> right
[23:33:06] *** Joins: Guest8099 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[23:33:48] <qergle> now for extra credit please write up orders 4 through 100 in latex by tomorrow.
[23:34:25] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[23:36:26] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[23:36:50] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:db7:a2d6:e7e0:dacc)
[23:38:54] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[23:38:54] *** Quits: stipa (~stipa@user/stipa) (Remote host closed the connection)
[23:39:19] *** Joins: stipa (~stipa@user/stipa)
[23:39:26] *** Joins: magla (~gelignite@55d43ee1.access.ecotel.net)
[23:40:28] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Client Quit)
[23:44:31] <Guest2990> so i found this https://math.stackexchange.com/questions/3464125/how-was-the-2d-discrete-laplacian-matrix-calculated/3942736#3942736 since they divide by h^2 to get the Laplacian on the left alone, does that mean the truncation error is of order h? O(h).
[23:48:20] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-bd47-4550-fa06-7a02.res6.spectrum.com)
[23:51:57] <Guest2990> i dont think they can truncate like that..
[23:52:05] <Guest2990> but whatever. I understand
[23:52:46] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[23:57:19] *** Quits: jk8h (~jk@user/jk8h) (Quit: WeeChat 3.2)
