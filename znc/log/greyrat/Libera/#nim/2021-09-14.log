[00:22:57] <FromDiscord> <jakkn> sent a code paste, see https://play.nim-lang.org/#ix=3yMI
[00:26:17] <NimEventer> New thread by Elcritch: How to create C defines from Nim?, see https://forum.nim-lang.org/t/8423
[00:29:36] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Read error: Connection reset by peer)
[00:44:32] *** Joins: Guest16 (~Guest16@93-34-90-198.ip49.fastwebnet.it)
[00:44:57] *** Parts: Guest16 (~Guest16@93-34-90-198.ip49.fastwebnet.it) ()
[01:00:46] *** Quits: maxime__ (~maxime@2a01cb0883359800e03cdee15bbb1cbf.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[01:08:18] *** Joins: max22- (~maxime@2a01cb0883359800c3e0f756754ec9b4.ipv6.abo.wanadoo.fr)
[01:15:18] <FromDiscord> <Recruit_main707> @jakkn cstring is bascially a `char`, i assume c#'s string is a class which will have more stuff and you cant just pass it like that, try to find a way to turn c#'s strings into a `char`
[01:24:26] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[01:24:50] *** Joins: supakeen (~user@python/site-packages/supakeen)
[01:25:36] <FromDiscord> <Varriount> Zevv: Just an FYI, the bulk of the time spent compiling my SQL grammar isn't spent by NPeg, it's spent by the Nim compiler and C compiler.
[01:34:07] <FromDiscord> <tandy> when using var objects, do you need to return a var object?
[01:37:00] <FromDiscord> <Recruit_main707> you cant return var objects, var means the argument is variable, (implicitly a pointer) and you can edit it
[01:37:19] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[01:37:28] <FromDiscord> <tandy> oh cool
[01:42:27] <FromDiscord> <Varriount> In reply to @Recruit_main707 "you cant return var": Well, you can have a "var" return type, but it isn't quite the same thing.
[02:01:46] <FromDiscord> <Varriount> sent a long message, see http://ix.io/3yN3
[02:03:10] <FromDiscord> <tandy> dam \:(↵`Error: 'user' is of type <var User> which cannot be captured as it would violate memory safety, declared here:`
[02:03:43] <nrds> <06Prestige99> I'm attempting to get this rendering example working for sdl2: https://github.com/treeform/pixie/blob/master/examples/realtime_sdl.nim but the screen doesn't seem to clear between frames. Anyone have experience with this lib?
[02:04:27] <FromDiscord> <Elegantbeef> I think the issue is that your textture isnt cleared every frame
[02:04:38] <nrds> <06Prestige99> Ah good point
[02:04:39] <FromDiscord> <Varriount> In reply to @jakkn "hi, I'm a nim": Oh, and one that trips up people quite often: the Nim compiler automatically determines whether a procedure's parameter will be passed by pointer or by copy (by value). This is true even for procedures marked with a calling convention (`cdecl`, etc.). If you need a custom type to be passed a certain way, use the `byref` or `bycopy` pragmas.
[02:06:24] *** Quits: tdc (~tdc@217.61.224.137) (Ping timeout: 268 seconds)
[02:07:44] <FromDiscord> <tandy> oo nice↵(@Varriount)
[02:08:38] <FromDiscord> <tandy> where is the documentation for this?
[02:10:01] <FromDiscord> <tandy> also how do u use multiple pragma at once?
[02:13:37] <FromDiscord> <tandy> this is it right?
[02:13:42] <FromDiscord> <tandy> sent a code paste, see https://paste.rs/4ka
[02:13:45] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[02:14:09] *** Joins: supakeen (~user@python/site-packages/supakeen)
[02:16:39] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3yNc
[02:17:11] <FromDiscord> <Recruit_main707> `{.pragma, anotherpragma.}`
[02:17:36] <FromDiscord> <tandy> ahh yes↵(@Recruit_main707)
[02:31:08] <FromDiscord> <tandy> hmm okay
[02:31:37] <FromDiscord> <tandy> so the issue occurs when the object is instantiated in one module, but edited in another
[02:44:25] *** Quits: max22- (~maxime@2a01cb0883359800c3e0f756754ec9b4.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:45:22] <FromDiscord> <fae> whats the best way to disambiguate operators? e.g. I'm importing vmath, but i want to do just normal division between two floats using system./
[02:48:48] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3yNl
[02:50:41] <FromDiscord> <Elegantbeef> But afaik vmath doesnt override `float / float`
[02:54:06] <FromDiscord> <fae> ah i was actually trying to divide a float by an int, but i just realized that system doesnt even support that either
[02:54:17] <FromDiscord> <fae> if i use two floats then vmaths generic procs dont interfere, thanks
[02:54:31] <FromDiscord> <Elegantbeef> If you want to support that `import std/leniantops`
[02:54:36] <FromDiscord> <Elegantbeef> Of spelled correctly 😛
[02:55:15] <FromDiscord> <fae> but `system.\`/`\(a,b)` also works nicely
[02:55:28] <FromDiscord> <fae> (edit) "`system.\`/`\(a,b)`" => "`system./(a,b)`"
[02:55:54] <FromDiscord> <fae> i guess you cant escape backticks in single line code snippets huh
[02:56:10] <FromDiscord> <Elegantbeef> I think you can but idk how
[02:56:19] <FromDiscord> <Elegantbeef> Might be two graves
[03:08:18] *** Joins: PersonMcGuy (~PersonMcG@2603-8080-700a-3700-63e6-820b-5e81-cd4c.res6.spectrum.com)
[03:12:23] <PersonMcGuy> Hello all, has anyone ever got the error: "cannot 'importc' variable at compile time; c_memmove"
[03:12:52] <PersonMcGuy> I was using the base58 library under stew and it was working fine, then all of sudden it started throwing this error
[03:12:55] <FromDiscord> <Elegantbeef> You're attempting to use a procedure which require C interop at compile time
[03:13:30] <FromDiscord> <Elegantbeef> You're attempting to use apart of it at compile time, so assigning a const or inside a `static:`
[03:14:14] <PersonMcGuy> But I had been using it fine with no problems with interop at all
[03:14:32] <FromDiscord> <Elegantbeef> Any link to your code?
[03:14:49] <PersonMcGuy> And I guess technically the errors is coming out of system.nim: 2232
[03:15:52] <PersonMcGuy> Ah. Nevermind I just realized where I goofed.
[03:15:59] <FromDiscord> <Elegantbeef> you're building for JS?
[03:16:15] <FromDiscord> <Elegantbeef> Ah nvm that's not js
[03:16:15] <FromDiscord> <Elegantbeef> I've got superb reading skills
[03:16:26] <PersonMcGuy> I had it working with a var and I guess I copy and pasted the call on to a const
[03:18:01] <PersonMcGuy> Thanks again for the help as always. How have you been? I hope you're doing okay
[03:18:22] <FromDiscord> <Elegantbeef> Bashing my head into jsgen, so take that as my present state
[03:20:07] <PersonMcGuy> Huh, never seen that area before. Looks... involved. lol
[03:21:37] <FromDiscord> <Elegantbeef> Well it's taking Nim and ouputting it into a language with different semantics so it's "fun" to say the least
[03:22:08] <FromDiscord> <Elegantbeef> One of my bug fixes made an issue evident in the js gen so i have to fix that before making a PR
[03:22:43] <PersonMcGuy> How does it even handle dynamic typing?
[03:22:59] <FromDiscord> <Elegantbeef> It doesnt handle it
[03:23:02] <FromDiscord> <Elegantbeef> It handles it on the nim side and lets js do what it will
[03:23:45] <FromDiscord> <tandy> [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org)\: since ur doing javascript stuff do u kno if its possible to pass a var object to a proc to update its values with js?
[03:23:58] <FromDiscord> <tandy> im going slightly mad with this issue
[03:24:07] <FromDiscord> <Elegantbeef> Why wouldnt it be
[03:24:15] <FromDiscord> <tandy> yeah..
[03:24:19] <FromDiscord> <Elegantbeef> You were attempting to use a closure with a `var object`
[03:24:31] <FromDiscord> <Elegantbeef> As such nim's safety said "No" since the reference can outlive the closure
[03:24:54] <FromDiscord> <Elegantbeef> you can use a `ptr object` instead for the closure which should work on JS
[03:25:13] <FromDiscord> <Elegantbeef> But on C/C++ it might be unsafe as the closure can outlive the place of "borrowing"
[03:25:47] <FromDiscord> <tandy> hmmm
[03:26:09] <FromDiscord> <tandy> maybe that will fix it
[03:26:20] <FromDiscord> <Elegantbeef> Well it'll fix it but it's unsafe
[03:27:14] <FromDiscord> <tandy> i considered just using indexedDB to store the data that im passing around
[03:27:29] <FromDiscord> <tandy> is that the wiser approach?
[03:28:38] <FromDiscord> <Elegantbeef> you could also just use an `ref object` if you wanted
[03:28:50] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3yNr here's that unsafe behaviour
[03:29:45] <FromDiscord> <tandy> thats what i was doing before, but when i run `discard updateObject(object)` it doesnt actually store anything in `object`
[03:31:41] <FromDiscord> <tandy> scary
[03:46:26] *** Quits: PersonMcGuy (~PersonMcG@2603-8080-700a-3700-63e6-820b-5e81-cd4c.res6.spectrum.com) (Quit: Client closed)
[04:12:30] *** Quits: leth (~user@h-37-123-182-177.A328.priv.bahnhof.se) (Quit: no reason)
[04:35:24] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:41:30] <FromDiscord> <impbox [ftsf]> I'm pretty sure there's a way to do it but I can't find the syntax for a for loop that's expanded at compile time
[05:42:26] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3yNJ
[05:49:49] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[05:56:52] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[06:00:07] *** Quits: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (Ping timeout: 240 seconds)
[06:00:13] *** Joins: neurocyte0 (~neurocyte@45.14.191.55)
[06:00:13] *** Quits: neurocyte0 (~neurocyte@45.14.191.55) (Changing host)
[06:00:13] *** Joins: neurocyte0 (~neurocyte@user/neurocyte)
[06:00:46] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[06:02:10] *** Joins: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[06:02:35] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[06:02:35] *** neurocyte0 is now known as neurocyte
[06:09:28] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 252 seconds)
[06:10:44] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[06:31:01] *** Joins: pch (~pch@66.49.131.33)
[06:41:41] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[06:46:22] *** Quits: pch (~pch@66.49.131.33) (Ping timeout: 268 seconds)
[06:50:56] *** Joins: pch (~pch@66.49.131.33)
[07:41:59] <FromDiscord> <leorize> tag your proc with compileTime
[07:42:10] <FromDiscord> <leorize> or are you looking for loop unrolling?
[07:43:04] <FromDiscord> <impbox [ftsf]> loop unrolling since N is known at compile time as it's a generic param
[07:44:17] <FromDiscord> <leorize> pray really hard that the compiler will do it for you, or ask in #science
[07:44:43] <FromDiscord> <leorize> I'm pretty sure mratsim made an unroller, couldn't find it though
[07:45:07] <FromDiscord> <Elegantbeef> https://github.com/schneiderfelipe/unrolled archived but yea
[07:45:09] <nrds> <12R2D299> 4GitHub: 7"🧻 Unroll for-loops at compile-time."
[07:48:55] <FromDiscord> <impbox [ftsf]> oh ok, i thought it was a built-in nim feature i couldn't find
[07:49:11] <FromDiscord> <leorize> i think it was removed because it wasn't implemented
[07:49:21] <FromDiscord> <impbox [ftsf]> but yeah maybe compiler will do it for me anyway
[08:30:45] <FromDiscord> <xflywind> see also https://github.com/nim-lang/Nim/pull/18038/files
[08:32:02] <FromDiscord> <xflywind> https://github.com/mratsim/constantine/blob/c2d716b0/helpers/static_for.nim
[08:35:57] <FromDiscord> <impbox [ftsf]> Thanks
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[08:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:37:00] <FromDiscord> <xflywind> there is also a hole in Nim compiler, so you can also use #pragma directives.
[08:37:11] <FromDiscord> <xflywind> sent a code paste, see https://play.nim-lang.org/#ix=3yOe
[08:38:20] <FromDiscord> <xflywind> generates
[08:38:29] <FromDiscord> <xflywind> sent a code paste, see https://play.nim-lang.org/#ix=3yOf
[08:56:48] <Zevv> Varriount: yes, I know. but that's of course caused by the fact that npeg generates a 17k case statement full with stuff from your grammar
[08:56:56] <Zevv> it's something to chew on for the compiler
[08:57:12] <Zevv> you're boldly pushing npeg where noone has pushed it before
[08:57:26] <Zevv> I'd like to call it insanity, but hey, I'm not stopping you from testing my code, right
[09:33:38] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[09:34:04] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:49:50] <FromDiscord> <Varriount> Zevv: My end goal here is to create an actually usable SQL formatter. So far every formatter I've used has either had... highly questionable code quality, cost money, or been too buggy to use.
[09:50:06] <nrds> <06Prestige99> impbox: Are you using sdl2_nim? Curious if we can easily target wasm
[09:50:10] <FromDiscord> <Varriount> (or been fairly inflexible, configuration-wise)
[09:50:52] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[09:51:05] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:51:27] <FromDiscord> <impbox [ftsf]> @prestige, yep
[09:51:31] <FromDiscord> <impbox [ftsf]> it works well
[09:51:36] <FromDiscord> <Varriount> In reply to @Zevv "<@169336940846514176>: yes, I know.": Bison (another parser generator for C) appears to generate jump tables. I'm guessing the compiler doesn't choke on that because it doesn't even attempt to optimize the jumps. What I'd like to know is what Clang is actually spending all its time doing.
[09:52:12] *** Joins: max22- (~maxime@2a01cb08833598009b3393ce9ac42685.ipv6.abo.wanadoo.fr)
[09:52:27] <nrds> <06Prestige99> impbox: How do you compile for that target?
[09:53:01] <FromDiscord> <impbox [ftsf]> emscripten
[09:53:14] <FromDiscord> <impbox [ftsf]> check out nico's exampleApp
[09:53:27] <nrds> <06Prestige99> Thanks I'll take a look
[09:53:31] <FromDiscord> <impbox [ftsf]> https://github.com/ftsf/nico/tree/main/exampleApp
[09:53:46] <FromDiscord> <impbox [ftsf]> https://github.com/treeform/nim_emscripten_tutorial based off this
[09:53:48] <nrds> <12R2D299> 4GitHub: 7"Nim emscripten tutorial."
[09:53:58] <nrds> <06Prestige99> Sweet :D
[09:54:42] <FromDiscord> <impbox [ftsf]> i just do `nimble webr` and it builds a wasm, js, data and html via empscripten
[10:04:10] <arfy> hi. is there plans for, or does an REPL for nim exist?
[10:04:19] <FromDiscord> <impbox [ftsf]> inim exists
[10:04:31] <FromDiscord> <Elegantbeef> `inim` and `nim secret`
[10:04:51] <FromDiscord> <impbox [ftsf]> whoa a secret repl
[10:05:05] <FromDiscord> <impbox [ftsf]> now i don't need to run a calculator
[10:05:08] <FromDiscord> <Elegantbeef> Well nimsecret is the VM iirc so it's not as feature filled
[10:05:21] <arfy> hahaha. i use python as a calculator all the time. :D
[10:18:45] <FromDiscord> <Varriount> Anyone know of a way to get an output of what the Nim compiler is allocating memory for?
[10:20:24] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[10:21:04] <arfy> excellent. inim installed. very cool
[10:26:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:30:17] *** Quits: eph (~eph@cpe-74-138-155-69.kya.res.rr.com) (Remote host closed the connection)
[10:32:56] <Zevv> Varriount: by "stack trace", do you mean a nim-level stack trace or a peg-level stack trace?
[10:33:37] <Zevv> i've been trying to propagate my original peg nimnode lineinfo through into the npeg IR and generated code, but stuff is buggy - I get nonsense output every now and then and I'm having troubles to isolate and minimize the problem
[10:34:07] <Zevv> for now I'm blaming myself, but i wouldn't be suprised if it's a nim bug
[10:34:22] <FromDiscord> <Varriount> Zevv: In the issue I just posted? Ideally both, but a peg-level stacktrace at minimum (the sequence representing the return stack).
[10:34:47] <Zevv> hmm that should be doable, I'll have to check if I have all the state present in the backframes
[10:35:19] <FromDiscord> <Varriount> Otherwise, you know that you have a recursive loop somewhere, but not where.
[10:35:27] <Zevv> true, that
[10:35:34] <Zevv> is the closure allocation really a problem for you?
[10:35:50] <Zevv> I did this on purpose for sake of code simplicity, but if it booms on you I might have to change that somehow
[10:37:44] <FromDiscord> <Varriount> Zevv: Yes. It causes the program to immediately crash half the time. I was able to fix it by making `doTrace` a procedure, and passing in all the state through parameters.
[10:38:22] <FromDiscord> <Varriount> Zevv: https://gist.github.com/Varriount/bc815b21ca6df742b19f22e8f8844b59
[10:39:15] <FromDiscord> <Varriount> Feel free to clean it up. I'm just hacking onto things, trying to make the output C file palatable for Clang
[11:14:53] <Zevv> well, something like that might work just fine, this was not designed to scale up this far
[11:14:55] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[11:15:20] <Zevv> altough i am surprised by things crashing on a stack oveflow; this is 2021
[11:15:25] <Zevv> what os are you runing on?
[11:30:59] *** Joins: tdc (~tdc@217.61.224.137)
[11:35:45] <FromDiscord> <gogolxdong (liuxiaodong)> How to solve `No 'Access-Control-Allow-Origin' header is present on the requested resource.` with jester?
[11:51:42] <FromDiscord> <gogolxdong (liuxiaodong)> sent a code paste, see https://play.nim-lang.org/#ix=3yOH
[11:51:53] *** Joins: Vladar (~Vladar@46.162.2.53)
[11:59:21] <FromDiscord> <Varriount> In reply to @Zevv "what os are you": Windows. To be honest, it's only my guess that it's a stack overflow. All I know is that the changes I've made to NPeg appear to make the crash go away.
[12:05:51] <FromDiscord> <linux user> i found out that you cna only use 1 space for indentation :V
[12:06:17] <FromDiscord> <linux user> manual said it was 2 spaces minimum
[12:09:11] <FromDiscord> <Yardanico> In reply to @richard stallmen(crazy GNU guy) "manual said it was": it didn't
[12:09:15] <FromDiscord> <Yardanico> (edit) "didn't" => "doesn't"
[12:10:06] <FromDiscord> <Yardanico> manual has no mention of "2 spaces" at all, maybe you're referring to NEP-1 which is a code style you might or might not want to follow and not the language spec
[12:11:01] <Zevv> Varriount: why the sleep in the dotrace? :)
[12:12:29] <FromDiscord> <Varriount> In reply to @Zevv "<@169336940846514176>: why the sleep": Oh! Sorry about that. I was trying to debug an infinite loop
[12:12:59] <Zevv> haha, np
[12:15:37] <FromDiscord> <Varriount> In reply to @Zevv "haha, np": Looks like there might be some backend optimizations I can disable to prevent Clang from consuming all memory: https://stackoverflow.com/questions/59041227/any-tips-for-compiling-huge-code-generated-source-files
[12:16:21] <FromDiscord> <Varriount> Right now a -O2 build is taking 15 minutes and counting.
[12:16:22] <Zevv> well, i guess optimizing these things in npeg makes sense right, it'll likely reduce memory and improve speed in any case
[12:16:27] <Zevv> wait what
[12:16:35] <Zevv> that's horrific. why the hell are you doing this
[12:16:54] <FromDiscord> <Varriount> Do you have any alternative options?
[12:17:04] <Zevv> just write a parser by hand?
[12:17:11] <Zevv> top down, classical
[12:18:03] <FromDiscord> <linux user> oh sorry
[12:18:55] <FromDiscord> <Varriount> In reply to @Zevv "just write a parser": There's a reason PostgreSQL's grammar is generated via a parser generator.
[12:19:06] <Zevv> hmm. fair enough
[12:19:58] <Zevv> Varriount: master is updated, now uses a nimCall proc instead of a closure for trace
[12:20:04] <FromDiscord> <Varriount> It's definitely past the "too complex to write by hand without going insane" mark.
[12:20:36] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[12:21:25] <FromDiscord> <Varriount> I'll muddle along. Hopefully simplifying the grammar will help.
[12:23:41] *** Joins: neurocyte (~neurocyte@45.14.191.55)
[12:23:41] *** Quits: neurocyte (~neurocyte@45.14.191.55) (Changing host)
[12:23:41] *** Joins: neurocyte (~neurocyte@user/neurocyte)
[12:23:56] <FromDiscord> <Varriount> In reply to @Zevv "<@169336940846514176>: master is updated,": Any idea if a table-based approach is comparable in runtime performance to a case-based approach?
[12:24:25] <Zevv> what goes in the the table then, functions?
[12:25:01] <Zevv> i haven't tried for a long time, but when developing this i looked at a number of different implementations and this one was about 1.5 times faster then second place
[12:25:14] <FromDiscord> <Varriount> I don't know yet. I'm still looking through Bison's output.
[12:25:18] <Zevv> the good thing about the computed goto is that the C compiler can optimize way deeper
[12:25:22] <Zevv> it throws away half of the states
[12:25:28] <Zevv> or the jumps, anyway
[12:25:53] <Zevv> in the olden days npeg did not compile to nim but simply had a VM running the IR
[12:26:26] <Zevv> instead of compiling every IR instruction into a nim snippet
[12:26:54] <FromDiscord> <Varriount> Hm, could you have a double-case statement, to expand the maximum number of states a computed goto could handle?
[12:27:08] <Zevv> probably
[12:27:27] <Zevv> but the non-goto case works well enough, albeit it has a somewhat lower performance
[12:27:42] <Zevv> nesting the gotos will require 2 jumps per instruction
[12:27:45] * arfy thinks he needs to learn more about compiler construction to answer this, but what's the process for getting nim onto a new system, if it's needed to compile itself? cross-compile from another system?
[12:28:02] <Zevv> arfy: typically you generate the C code somewhere
[12:28:06] <Zevv> and compile it on your target
[12:28:32] <Zevv> but cross compiling might work as well, if you have that all setup
[12:28:51] <FromDiscord> <Varriount> In reply to @arfy "thinks he needs to": You generally need a C compiler capable of generating executables for an architecture other than the one the compiler is running on.
[12:28:56] <arfy> ah yes, nim essentially transpiles to C.
[12:29:19] <FromDiscord> <Varriount> It's very handy like that.
[12:29:39] <FromDiscord> <Elegantbeef> Plus as it generates C you can always output C that fits a niche and it just works
[12:29:57] <arfy> C: the modern assembler. 
[12:30:02] <FromDiscord> <Elegantbeef> It's how i've compiled Nim for the rpi-pico, emit C into the directory then call Cmake
[12:31:11] * arfy now giggles at the thought of... wait for it, nim for dos.
[12:31:17] <arfy> someone's probably done it.
[12:35:37] <PMunch> @arfy, Nim compiles to C, not transpiles. It drops a level of abstraction when it goes from Nim to C, in the same way that C drops a level of abstraction when it compiles to assembly
[12:37:14] <FromDiscord> <Elegantbeef> Pmunch on a battle he'll never win
[12:37:26] * PMunch picks up pitchfork
[12:41:38] <FromDiscord> <Yardanico> @arfy why giggle at dos? https://github.com/nim-lang/Nim/blob/devel/compiler/platform.nim#L42
[12:41:43] <FromDiscord> <Yardanico> that said, I'm not sure it works with latest nim
[12:41:53] <FromDiscord> <impbox [ftsf]> what, no dos CI?
[12:42:04] <FromDiscord> <Yardanico> https://github.com/nim-lang/Nim/blob/devel/compiler/options.nim#L587
[12:56:23] <FromDiscord> <Varriount> Zevv: So, what it looks like Bison does (and this is just from skimming through the generated C code) is something similar to NPeg, except that it extracts the information that makes each state unique (token to match, next state, etc.) to global tables. The core "loop" consists of generic logic that looks up all the information about the current state, and then acts on it.
[12:56:23] <PMunch> Damn it, I've been trying to write this module without using macroutils. But now I need it and know I could've made some better patterns around the code..
[12:57:53] <FromDiscord> <Varriount> Zevv: It looks like a shift-reduce parser (https://en.wikipedia.org/wiki/Shift-reduce_parser), based on the terminology used in the source code. (note, I don't actually understand what a shift-reduce parser is)
[13:02:50] <Zevv> Varriount: well, I don't understand any of this as well. I'm blisfully oblivious of all other parser types then peg and top-down-recursive
[13:26:07] *** Quits: sagax (~sagax_nb@user/sagax) (Read error: Connection reset by peer)
[13:26:43] <FromDiscord> <Varriount> Zevv: Well, I'm going to head off to bed. I really appreciate your help with this.
[13:48:36] <Zevv> nighty
[13:55:51] *** Joins: hmmm (~hmmm@res-anet67627d.ppp.twt.it)
[13:55:51] <Yardanico> @federico3 you around? Can you please resolve some of my doubts about licenses? So far I thought that LGPL-3 is not suitable for languages where all modules are compiled into a single binary since one of the points of LGPL is the ability to swap the library after compilation so there won't be any difference between GPL and LGPL, but you use LGPL in some of your Nim projects - so with e.g. https://github.com/FedericoCeratto/nim-httpauth my whole Nim 
[13:55:51] <Yardanico> project has to be LGPL-3, right?
[13:56:18] <hmmm> hooooy
[13:56:28] <hmmm> long time no see folks nimions
[13:58:26] <FromDiscord> <Elegantbeef> Hello
[13:58:38] <Yardanico> *correction - I know that I don't need my whole project to be LGPL or GPL in this case, but it needs to have a GPL-compatible license and I still should ship the source with the binaries, right?
[13:59:50] <hmmm> beefy bro! what happened to this place we used to be so many
[14:03:23] <FromDiscord> <Elegantbeef> uhh people leave over time it seems
[14:03:35] <hmmm> those damn people
[14:03:44] <FromDiscord> <Elegantbeef> Though i think the discord server has had growth
[14:03:51] <hmmm> it's also irc that is now unmanagable, I'm downloading discord client rn
[14:03:52] <hmmm> yea
[14:04:08] <FromDiscord> <Yardanico> you can also use matrix
[14:04:15] <FromDiscord> <Yardanico> like beef does :)
[14:04:21] <hmmm> what's the handle of my boi xflywind I need to bother for my personal gain
[14:04:27] <FromDiscord> <Elegantbeef> Wait this is matrix, where's keanu?!
[14:04:29] <hmmm> [him]
[14:04:48] <FromDiscord> <cabboose> So… matrix resurrection
[14:05:12] <hmmm> yard I'm too low tech for matrix I think
[14:05:38] <hmmm> is my man disruptek still around?
[14:05:55] <FromDiscord> <Elegantbeef> Not here but in other places he is
[14:06:29] <FromDiscord> <cabboose> Like a bdsm ninja?
[14:06:43] <FromDiscord> <Elegantbeef> You'd know wouldnt you
[14:06:51] <FromDiscord> <cabboose> I learnt watching you
[14:08:38] <FromDiscord> <hmmm> jeez discord looks like it was made by a trippy 6 yo on pills
[14:09:46] <FromDiscord> <hmmm> I think @xflywind is a cute looking boi, also he might tell me why his xlxs lib hello world example complains about lacking zlib.h
[14:11:39] <FromDiscord> <Rika> The files likely use compression from zlib
[14:12:12] <FromDiscord> <hmmm> Rika! weren't you my bro from jp?
[14:12:30] <supakeen> xlsx is a zipfile with some xml in them ;)
[14:12:38] <FromDiscord> <hmmm> installing zlib on windows turned out to be a huge nightmare
[14:13:40] <FromDiscord> <hmmm> like: install 8gb o VisualStudio, then install CMake, then run this weird powershell script and it will still not work
[14:13:54] <FromDiscord> <Rika> In reply to @hmmm "Rika! weren't you my": My memory is exceptionally bad. I do not recall who you are
[14:14:08] <FromDiscord> <hmmm> Rika I might get hurt by this comment
[14:14:22] <FromDiscord> <hmmm> delete it since it's discord and they probably have the babby features
[14:14:29] <FromDiscord> <Rika> I understand. It has happened with multiple people before
[14:14:37] <FromDiscord> <hmmm> but I still love u
[14:14:44] <FromDiscord> <Rika> But I’m not in control of my memory
[14:14:57] <FromDiscord> <hmmm> if I choose a cute discord icon you might like me again
[14:15:01] <FromDiscord> <hmmm> or even remember about me
[14:15:32] <FromDiscord> <cabboose> This sounds like a priest at a school joke gone wrong
[14:15:34] <FromDiscord> <Rika> I legitimately do not recall you
[14:16:29] <FromDiscord> <Rika> In reply to @hmmm "like: install 8gb o": Nim does not use mvsc, so you will need to install it for the compiler it does use
[14:16:34] <FromDiscord> <Rika> Which I have forgotten as well
[14:16:47] <FromDiscord> <hmmm> hmmm
[14:16:50] *** Joins: arkurious (~arkurious@user/arkurious)
[14:16:54] <FromDiscord> <Rika> In reply to @Rika "Nim does not use": Does not use mvsc by default
[14:16:56] <FromDiscord> <Rika> In reply to @hmmm "hmmm": Ah
[14:16:59] <FromDiscord> <Rika> You’re that guy
[14:17:10] <FromDiscord> <hmmm> 😄
[14:17:14] <FromDiscord> <Rika> You’re /hm+/
[14:17:35] <FromDiscord> <hmmm> ❤️
[14:17:35] <FromDiscord> <Rika> The man with ever changing m counts
[14:17:59] <FromDiscord> <hmmm> you see Rika that you couldn't forget me even with your memory
[14:18:07] <FromDiscord> <Rika> It takes a while
[14:23:32] *** Quits: hmmm (~hmmm@res-anet67627d.ppp.twt.it) (Quit: WeeChat 3.2)
[14:24:33] <FromDiscord> <PsychoClay> anyone have some threading code i can look at?
[14:25:08] <FromDiscord> <cabboose> Theres some in the manual/gc/threads section I tink
[14:25:29] <FromDiscord> <PsychoClay> yea but i need some more
[14:25:41] <FromDiscord> <cabboose> MOAR
[14:26:03] <FromDiscord> <Rika> What in particular is stumping you?
[14:26:10] <FromDiscord> <cabboose> What trouble do you have with threading
[14:26:21] <FromDiscord> <PsychoClay> everything just segfaults :Sadge:
[14:26:54] <FromDiscord> <cabboose> Do you have some example code?
[14:27:17] <FromDiscord> <Rika> I am betting that you are passing a reference around
[14:27:21] <FromDiscord> <PsychoClay> well its kind of hard to show because it involved multiple files and templates
[14:27:27] <FromDiscord> <Rika> Or a wrongly allocated pointer
[14:27:29] <FromDiscord> <PsychoClay> (edit) "involved" => "involves"
[14:27:41] <FromDiscord> <hmmm> icon test
[14:27:49] <FromDiscord> <cabboose> are you using refc or arc/orc
[14:27:51] <FromDiscord> <hmmm> perfect
[14:27:51] <FromDiscord> <cabboose> but as rika says
[14:27:53] <FromDiscord> <Rika> Oh wow you actually took what I wrote
[14:27:54] <FromDiscord> <PsychoClay> orc
[14:28:11] <FromDiscord> <Rika> Okay it’s a bit harder to wrongly allocate on orc so
[14:28:24] <FromDiscord> <Rika> Now it’s odd that you’re getting issues
[14:28:33] <FromDiscord> <Rika> Do you not have code even if it is long
[14:28:36] <FromDiscord> <cabboose> Are you dealing with IO?
[14:28:37] <FromDiscord> <PsychoClay> sent a code paste, see https://play.nim-lang.org/#ix=3yPf
[14:29:07] <FromDiscord> <cabboose> I dont know what I’m looking at; I defer to master rika
[14:29:38] <FromDiscord> <PsychoClay> i think im trying to copy a Table
[14:30:31] <FromDiscord> <Rika> In reply to @cabboose "I dont know what": I could understand it but I am not really in the mood to read such a long stack trace
[14:30:44] <FromDiscord> <cabboose> It also looks like theres some IO in there
[14:31:01] <FromDiscord> <cabboose> are you doing async naughty things?
[14:31:03] <FromDiscord> <Rika> It says thread local storage there so are you sure you’re using orc?
[14:31:12] <FromDiscord> <PsychoClay> ye
[14:31:14] <FromDiscord> <Rika> Or maybe orc still has thread local heap
[14:31:20] <FromDiscord> <Rika> Are you using ref or pointer
[14:31:28] <FromDiscord> <PsychoClay> just object
[14:31:36] <FromDiscord> <Rika> How do you initialise the table
[14:31:41] <FromDiscord> <Rika> With new or init
[14:31:44] <FromDiscord> <PsychoClay> initTable
[14:31:58] <FromDiscord> <PsychoClay> i was using ref but that gave me other issues
[14:32:00] <FromDiscord> <Rika> How is it passed to the thread
[14:32:34] <FromDiscord> <PsychoClay> its the ArgStore
[14:32:37] <FromDiscord> <cabboose> There shouldn’t be that much issues using thread on ORC
[14:32:40] <FromDiscord> <PsychoClay> sent a code paste, see https://play.nim-lang.org/#ix=3yPk
[14:32:45] <FromDiscord> <Rika> How are you allocating these pointers
[14:32:46] <FromDiscord> <cabboose> o yummy pres
[14:32:50] <FromDiscord> <cabboose> ptrs
[14:33:05] <FromDiscord> <PsychoClay> allocShared0
[14:33:39] <FromDiscord> <Rika> I assume all of these pointers are allocated with that
[14:33:43] <FromDiscord> <PsychoClay> ye
[14:33:57] <FromDiscord> <Rika> Definitely strange
[14:34:20] <FromDiscord> <cabboose> well if you don’t initialise the objects correctly after using allocShared0 won’t it be nil?
[14:34:26] <FromDiscord> <Rika> Uh?
[14:34:31] <FromDiscord> <Rika> Objects are never nil
[14:34:36] <FromDiscord> <Rika> Ah
[14:34:41] <FromDiscord> <Rika> Wait no
[14:34:49] <FromDiscord> <Rika> Objects are never nil indeed
[14:35:02] <FromDiscord> <Rika> After calling allocation you have a zeroed object
[14:35:13] <FromDiscord> <cabboose> I thought thats createShared
[14:35:14] <FromDiscord> <Rika> It should be fine once you []=
[14:36:00] <FromDiscord> <PsychoClay> but dont u guys have some example code somewhere
[14:36:09] <FromDiscord> <cabboose> I’m probably wrong but I thought you just give allocShared0 a size while createShared gets a type
[14:36:27] <FromDiscord> <cabboose> so I thought only createShared actually knows what to do with it in terms of object in it
[14:36:51] <FromDiscord> <Rika> Create shared is basically just alloc shared with size of type as the argument
[14:36:53] <FromDiscord> <Rika> I believe
[14:37:15] <FromDiscord> <cabboose> But why use pointers when you’re using orc \:’)
[14:37:25] <FromDiscord> <PsychoClay> dude i have no idea what im doing
[14:37:42] <FromDiscord> <Rika> Is there a reason you use threading
[14:37:52] <FromDiscord> <PsychoClay> fast
[14:37:58] <FromDiscord> <Rika> Not necessarily
[14:38:00] <FromDiscord> <cabboose> Fast to die
[14:38:04] <FromDiscord> <PsychoClay> async doesnt work fast
[14:38:07] <FromDiscord> <cabboose> 🤣
[14:38:07] <FromDiscord> <PsychoClay> i tried
[14:38:07] <FromDiscord> <Rika> Fast to lose mind
[14:38:15] <FromDiscord> <Rika> You probably tried wrong then
[14:38:21] <FromDiscord> <PsychoClay> yea :Sadge:
[14:38:27] <FromDiscord> <Rika> Or you have some crazy performance goals
[14:38:27] <FromDiscord> <cabboose> Async can be pretty fast
[14:38:56] <FromDiscord> <PsychoClay> i wanted to try something like 10 threads each with 10 async workers
[14:38:59] <FromDiscord> <cabboose> It’s hard to give you example code because if you’re doing manual memory allocation it’s up to you to be safe about it
[14:39:08] <FromDiscord> <Rika> That sounds like a quick way to get rate limited
[14:39:20] <FromDiscord> <PsychoClay> nah its for a web crawler
[14:39:38] <FromDiscord> <Rika> That sounds like a quick way to get rate limited (1)
[14:39:40] <FromDiscord> <cabboose> have you tried using `MyType = ref object` instead of `MyType = ptr object`
[14:39:55] <FromDiscord> <Rika> He did as he said
[14:39:57] <FromDiscord> <PsychoClay> il try that
[14:40:01] <FromDiscord> <Rika> Oh?
[14:40:04] <FromDiscord> <Rika> You liar
[14:40:09] <FromDiscord> <PsychoClay> no i was talkin about the table
[14:40:14] <FromDiscord> <PsychoClay> no the udata object
[14:40:21] <FromDiscord> <PsychoClay> (edit) "no" => "not"
[14:40:22] <FromDiscord> <Rika> Rude
[14:40:26] <FromDiscord> <Rika> Smh
[14:40:32] <FromDiscord> <cabboose> Hahahaha fair
[14:40:45] <FromDiscord> <cabboose> If you don’t know what you’re doing with manual memory allocs just do ref pointers
[14:40:47] <FromDiscord> <PsychoClay> well i was using refc before thats why it was a ptr
[14:40:47] <FromDiscord> <cabboose> orc has a shared heap
[14:41:01] <FromDiscord> <cabboose> fair
[14:41:15] <FromDiscord> <PsychoClay> so if u use orc i dont have to use any pointers
[14:41:20] <FromDiscord> <PsychoClay> every thing can just be ref?
[14:41:25] <FromDiscord> <Rika> Supposedly
[14:41:28] <FromDiscord> <cabboose> Well in a way
[14:41:53] <FromDiscord> <Rika> I’ve had issues with putting locks in objects before so maybe that contributes to the issue but it doesn’t seem so
[14:42:19] <FromDiscord> <cabboose> For most use cases refs work good
[14:42:55] <FromDiscord> <PsychoClay> sent a long message, see http://ix.io/3yPo
[14:43:00] <FromDiscord> <cabboose> and I also found manual memory allocations had to be handled differently if they can also contain referenced objects in ORC compared to RefC
[14:43:47] <FromDiscord> <cabboose> I actually don’t know about channel
[14:43:49] <FromDiscord> <cabboose> I mean
[14:43:51] <FromDiscord> <cabboose> again
[14:43:53] <FromDiscord> <cabboose> you have a shared heap
[14:44:05] <FromDiscord> <PsychoClay> so?
[14:44:20] <FromDiscord> <cabboose> Why bother with channel
[14:44:36] <FromDiscord> <PsychoClay> how else do i pass msgs between threads? deque maybe
[14:44:41] <FromDiscord> <cabboose> That’s mostly for interthread communication in pre-orc world AFAIK
[14:44:50] <FromDiscord> <cabboose> yeah
[14:44:55] <FromDiscord> <PsychoClay> hmm ok
[14:45:09] <FromDiscord> <cabboose> Deque and locks will do swimmingly
[14:45:57] <FromDiscord> <cabboose> If you’re doing async and threading make sure your asyncs are poll’d only on the thread they were dispatched from
[14:46:09] <FromDiscord> <cabboose> else shit blows
[14:46:11] <FromDiscord> <PsychoClay> ofc
[14:47:09] <FromDiscord> <PsychoClay> should i lock when writing to int?
[14:47:09] <FromDiscord> <cabboose> I could show sample code of multi threading and CPS but that’s all i’ve got on a public repo
[14:47:28] <FromDiscord> <Rika> Personally I’d just recommend going with one or the other
[14:47:40] <FromDiscord> <Rika> In reply to @PsychoClay "should i lock when": Unless the operation explicitly says it is atomic, use the lock
[14:50:31] <FromDiscord> <cabboose> Or as I like to say, always lock and \\\\
[14:55:06] <FromDiscord> <Rika> Sorry but this isn’t exactly on topic but seems extremely important to spread
[14:55:07] <FromDiscord> <Rika> https://twitter.com/peter_szilagyi/status/1437646118700175360?s=21
[14:55:51] <FromDiscord> <Rika> “Between the 3 Sept and 10 Sept, secure env vars of all public @travisci repositories were injected into PR builds. Signing keys, access creds, API tokens. ↵↵Anyone could exfiltrate these and gain lateral movement into 1000s of orgs. “
[14:56:50] <FromDiscord> <PsychoClay> who is travis :thonk3d:
[14:57:21] <FromDiscord> <Rika> Name of CI service
[14:58:30] <PMunch> Damn, that is baaaad
[14:59:16] <FromDiscord> <Rika> Yes it’s pretty bad, and that’s not the end of it
[14:59:39] <FromDiscord> <Rika> “Felix Lange found this on the 7th and we've notified @travisci within the hour. Their only response being "Oops, please rotate the keys", ignoring that all their infra was leaking.↵↵Not getting through, we've started reaching out to @github to have Travis blacklisted.”
[14:59:54] <FromDiscord> <Rika> “After 3 days of pressure from multiple projects, @travisci silently patched the issue on the 10th.↵↵No analysis, no security report, no post mortem, not warning any of their users that their secrets might have been stolen.”
[15:00:07] <FromDiscord> <Rika> “Finally after multiple ultimatums from multiple projects @travisci posted this lame ass post hidden deep where nobody will read it: travis-ci.community/t/security-bul… ↵↵Not even a single "thank you". Not acknowledgment of responsible disclosure. Not even admitting the gravity of it all.”
[15:00:25] <FromDiscord> <Rika> The link that I copied incorrectly
[15:00:27] <FromDiscord> <Rika> https://travis-ci.community/t/security-bulletin/12081
[15:00:47] <PMunch> Yeah I saw that
[15:02:16] <NimEventer> New thread by Kiloneie: Looking for feedback on my latest video before it goes live: Nim for Beginners #26 Reference Objects, see https://forum.nim-lang.org/t/8425
[15:02:26] <FromDiscord> <Rika> Secrets are not plaintext but nonetheless
[15:02:35] <FromDiscord> <Rika> It is not safe to keep them unchanged
[15:11:00] <FromDiscord> <enthus1ast> does one know if its possible in ormin to specify the result type in a select?↵I want to query the db like this\:↵`select checkruns(id, exitcode, output, startedat, stoppedat, !!"stoppedat::timestamp - startedat::timestamp")`
[15:11:31] <FromDiscord> <enthus1ast> but obviously it knows nothing about this calculated column
[15:19:16] <FromDiscord> <fwsgonzo> Hey all, is there a 128-bit integer type in Nim?
[15:19:40] <FromDiscord> <fwsgonzo> all C, C++ compilers of note support `uint128_t` and `int128_t`  and I need it specifically for my project
[15:20:12] <FromDiscord> <Rika> There is none
[15:20:15] <FromDiscord> <Rika> You can make it so
[15:20:21] <FromDiscord> <Rika> With importc
[15:20:51] <FromDiscord> <Rika> But you will need to create the procedures (probably with importc as well)
[15:21:03] <FromDiscord> <xflywind> there is a rfc
[15:21:09] <FromDiscord> <xflywind> https://github.com/nim-lang/RFCs/issues/399
[15:21:30] <FromDiscord> <xflywind> and a package
[15:21:32] <FromDiscord> <xflywind> https://github.com/rockcavera/nim-nint128
[15:21:35] <nrds> <12R2D299> 4GitHub: 7"128-bit integers"
[15:22:00] <FromDiscord> <fwsgonzo> the problem for me is that while uint64 works most of the time, I am building an assembler for a 128-bit achitecture, so it's going to be a PITA without it
[15:22:15] <FromDiscord> <hmmm> xxxxxflywind my favourite boi
[15:22:34] <FromDiscord> <hmmm> what incantation I have to spend to install zlib on windows
[15:22:48] <FromDiscord> <Rika> The package does not use C’s 128-bit integers
[15:23:03] <FromDiscord> <enthus1ast> can you not just download the dll?↵(@hmmm)
[15:23:10] <FromDiscord> <enthus1ast> or the lib?
[15:23:31] <FromDiscord> <hmmm> I have no idea how to get the dll, the official site just spits the sources
[15:23:54] <FromDiscord> <fwsgonzo> In reply to @flywind "https://github.com/rockcavera/nim-nint128": That might be just what I needed 👍
[15:23:54] <FromDiscord> <Rika> He needs the header
[15:23:56] <FromDiscord> <hmmm> I suspect zlib dudes hate windows
[15:23:57] <FromDiscord> <enthus1ast> https://github.com/kiyolee/zlib-win-build
[15:23:59] <nrds> <12R2D299> 4GitHub: 7"zlib Windows build with Visual Studio."
[15:24:30] <FromDiscord> <enthus1ast> i can remember that building it was quite a pain
[15:24:37] <FromDiscord> <enthus1ast> but with msys it was okisch
[15:24:59] <FromDiscord> <enthus1ast> building withouth msys on windows is always a pain ;D
[15:25:03] <FromDiscord> <enthus1ast> except nim
[15:26:02] <FromDiscord> <hmmm> hmm
[15:26:10] <FromDiscord> <hmmm> I should try msys
[15:26:46] <FromDiscord> <hmmm> the other github link has the very helpful "To build, simply open the required solution file, and you know how to use Visual Studio, right?"
[15:26:52] <FromDiscord> <hmmm> jeez
[15:27:01] <FromDiscord> <hmmm> who uses visual studio in this day and age ffs
[15:30:07] <PMunch> Hmm, this is annoying: http://ix.io/3yPx/nim, http://ix.io/3yPy/nim
[15:30:41] <PMunch> For some reason One, Two, and Three aren't declared as they would otherwise be when they are part of a generated symbol..
[15:30:50] <FromDiscord> <hmmm> munchie you old fox
[15:31:07] <PMunch> Huh?
[15:31:26] <FromDiscord> <hmmm> jesus I stay away some months and everyone forgets about lowly me
[15:31:47] <PMunch> Haha, I haven't forgotten you
[15:31:50] <PMunch> Where did you go?
[15:31:53] <FromDiscord> <hmmm> ❤️
[15:32:09] <FromDiscord> <Rika> In reply to @hmmm "jesus I stay away": I apologise
[15:33:01] <FromDiscord> <hmmm> I had some real life spells, frightening stuff being exposed to irl tbh, but now I'm back with my stupid nim questions
[15:33:15] <FromDiscord> <cabboose> @PsychoClay\:  are you still having issues or all good
[15:33:37] <FromDiscord> <PsychoClay> im converting from ptr to ref
[15:33:58] <FromDiscord> <cabboose> You mad man; you were just choc full of ptrs werent you
[15:33:59] <FromDiscord> <PsychoClay> do have some weird deque issue where elemtns dont get removed
[15:34:22] <FromDiscord> <PsychoClay> In reply to @cabboose "You mad man; you": yea it was pretty bad
[15:34:24] <FromDiscord> <cabboose> That is... odd.
[15:34:38] <FromDiscord> <cabboose> Even with a lock?
[15:34:47] <FromDiscord> <PsychoClay> yea
[15:35:06] <FromDiscord> <PsychoClay> but only the first time each thread acceses the que
[15:35:42] <FromDiscord> <cabboose> I'd be interested to help but it's becoming more abstract without seeing the code
[15:35:59] <FromDiscord> <cabboose> And my code is all CPS so it's not very helpful to share unless you're interested in going down that rabbithole
[15:36:07] <FromDiscord> <cabboose> (worth it)
[15:36:46] <FromDiscord> <PsychoClay> heres the file if u want to take a look https://github.com/PsychoClay/aberrant/blob/master/src/scrapers/mcrawl.nim
[15:38:57] <FromDiscord> <cabboose> `# threading in nim is hell`
[15:38:58] <FromDiscord> <cabboose> woke
[15:39:15] <FromDiscord> <PsychoClay> i spent like a month trying to figure it out
[15:39:55] <FromDiscord> <cabboose> Your name is truly fitting for the sites you are scraping friend
[15:40:05] <FromDiscord> <PsychoClay> wha t??
[15:40:12] <FromDiscord> <PsychoClay> im scraping all the sites
[15:40:23] <FromDiscord> <PsychoClay> downloading all the files
[15:40:42] <FromDiscord> <cabboose> maybe i just didn't read further pass the files called onlyfans.nim etc hahahaa
[15:40:48] <FromDiscord> <PsychoClay> lol
[15:41:10] <FromDiscord> <cabboose> I'll have a looksy
[15:42:40] <FromDiscord> <PsychoClay> i think maybe i was copying the que with `var targets = udata.targets`
[15:42:56] <FromDiscord> <fwsgonzo> how do i capture variables in an inline function like C++ lambdas?
[15:44:04] <FromDiscord> <Rika> In reply to @fwsgonzo "how do i capture": You should be able to, what error are you getting
[15:44:21] <FromDiscord> <fwsgonzo> does it work like in javascript where you "inherit" the larger scope?
[15:44:35] <FromDiscord> <Rika> What do you mean?
[15:44:39] <FromDiscord> <Rika> I am unfamiliar
[15:45:18] <FromDiscord> <fwsgonzo> well, in C++ I would do: `auto x =  [captured_var] (int arg) {  function; goes; here; }`
[15:45:34] <FromDiscord> <fwsgonzo> and then I can invoke it, `x(myint)`  later.
[15:46:14] <FromDiscord> <fwsgonzo> in javascript you inherit the scope you are in when the function is created, so you can bring with you locals
[15:46:40] <FromDiscord> <fwsgonzo> either is fine with me, I just need inline functions with capture storage
[15:48:09] <FromDiscord> <Rika> You don’t need any extra special syntax
[15:48:21] <FromDiscord> <Rika> You just use the variable and it should work
[15:48:54] <FromDiscord> <fwsgonzo> Yes, I see that's very simple
[15:49:04] <FromDiscord> <fwsgonzo> In C++ everything has to be rocket theory
[15:50:30] <FromDiscord> <tandy> is there a way to force nimble to install from the latest commit and not the latest tag / release?
[15:50:43] <FromDiscord> <impbox [ftsf]> there is... i forget the syntax
[15:50:49] <FromDiscord> <impbox [ftsf]> nimble install foo@#head maybe
[15:50:51] <FromDiscord> <impbox [ftsf]> (edit) "nimble" => "`nimble"
[15:50:55] <FromDiscord> <impbox [ftsf]> (edit) "foo@#head" => "foo@#head`"
[15:51:33] <FromDiscord> <tandy> yee i got it
[15:51:39] <FromDiscord> <tandy> repo@#head
[15:53:43] <FromDiscord> <cabboose> my friend, you have a lot here to be refactored hahahaha
[15:53:45] <FromDiscord> <cabboose> so many ptrs
[15:53:47] <FromDiscord> <cabboose> so so many
[15:53:52] <FromDiscord> <PsychoClay> yea iknow
[15:54:33] <FromDiscord> <cabboose> For starters don't pass your udata as a pointer to the threads, it'll bring up issues with the reference counting
[15:54:43] <FromDiscord> <cabboose> make an arbitrary object to contain the references and pass that to the thread
[15:55:08] <FromDiscord> <cabboose> but pass that I got scared by all the pointers
[15:55:20] <FromDiscord> <PsychoClay> i tried to pass it directly but it didnt work
[15:55:57] <FromDiscord> <cabboose> that should work no?
[15:56:01] <FromDiscord> <cabboose> sent a code paste, see https://play.nim-lang.org/#ix=3yPI
[15:56:04] <FromDiscord> <PsychoClay> oh like that
[15:56:21] <FromDiscord> <cabboose> ye
[15:57:01] <FromDiscord> <cabboose> anytime you pass things around in pointers you risk them not being reference counted correctly; and since you are using orc it's really unnecessary to risk that unless you really have to
[15:57:23] <FromDiscord> <cabboose> I mean it would be more manageable if things weren't so nested
[15:57:26] <FromDiscord> <cabboose> this looks like a hell of a project
[15:57:34] <FromDiscord> <cabboose> Kudoes
[15:57:36] <FromDiscord> <PsychoClay> its fun
[15:57:51] <FromDiscord> <PsychoClay> except for the threading part lol
[15:58:05] <FromDiscord> <PsychoClay> well it should be better now
[15:58:21] <FromDiscord> <cabboose> I haven't had so much trouble with threading, but I could see how it could get chaotic trying to refactor all this into a multithreaded model
[15:58:43] <FromDiscord> <cabboose> Have you tried turning it off and on again? 🤣
[15:59:01] <FromDiscord> <PsychoClay> bruh
[15:59:34] <FromDiscord> <Rika> I’m gonna assume your model is messy
[15:59:45] <FromDiscord> <cabboose> \:')
[15:59:48] <FromDiscord> <Rika> In which case it might be easier to refactor the whole thing before threading
[16:00:06] <FromDiscord> <cabboose> That would be a painful experience
[16:00:09] <FromDiscord> <PsychoClay> its not messy i think?
[16:00:38] <FromDiscord> <Rika> Less painful than fixing the current I would assume, can
[16:00:39] <FromDiscord> <cabboose> \:')
[16:00:42] <FromDiscord> <Rika> Cab
[16:00:56] <FromDiscord> <Rika> I don’t know for sure, I can’t look at the code on my mobile
[16:01:06] <FromDiscord> <Rika> I mean I can but I will cry
[16:01:08] <FromDiscord> <cabboose> Definitely easier to just refactor it all
[16:01:12] <FromDiscord> <cabboose> but
[16:01:13] <FromDiscord> <PsychoClay> what part is messy?
[16:01:17] <FromDiscord> <cabboose> it looks painful
[16:01:18] *** Joins: leth (~user@h-37-123-182-177.a328.priv.bahnhof.se)
[16:02:00] <FromDiscord> <cabboose> well; I would suggest strongly against mixing camelCase and\_this\_stuff
[16:02:16] <FromDiscord> <PsychoClay> right
[16:02:49] <FromDiscord> <PsychoClay> its becuase autocomplete gives camelcase
[16:02:54] <FromDiscord> <cabboose> but it's whether it makes sense to you or not; the issue is making it all multithreaded friendly while tracking errors might be a pain in the ass
[16:03:06] <FromDiscord> <cabboose> it's no issue, just difficult for someone outside to come into it \:)
[16:05:04] <FromDiscord> <cabboose> I still think its a cool project and I'm all for it
[16:05:04] <FromDiscord> <cabboose> I am maybe too used to a certain style
[16:05:11] <FromDiscord> <Rika> Jesus this is messy code
[16:05:40] <FromDiscord> <PsychoClay> guys its not that bad :copege:
[16:06:10] <FromDiscord> <cabboose> 🤣 Rika be nice hahahaha
[16:07:06] <FromDiscord> <Rika> Well there’s no separation of logic I think
[16:07:39] <FromDiscord> <PsychoClay> you mean too much in 1 func?
[16:07:57] <FromDiscord> <Rika> Yeah
[16:08:08] <FromDiscord> <Rika> Handling too many different things in one proc
[16:08:21] <FromDiscord> <cabboose> 🍝
[16:08:54] <FromDiscord> <Rika> Also why pass a pointer? You’re not required to
[16:09:15] <FromDiscord> <Rika> What do these names mean? Too short to be descriptive
[16:12:23] <FromDiscord> <PsychoClay> sent a code paste, see https://play.nim-lang.org/#ix=3yPN
[16:12:55] <FromDiscord> <cabboose> image.png https://media.discordapp.net/attachments/371759389889003532/887302387738497024/image.png
[16:13:21] <FromDiscord> <PsychoClay> sent a code paste, see https://play.nim-lang.org/#ix=3yPO
[16:13:21] <FromDiscord> <PsychoClay> should be fine right?
[16:13:52] <FromDiscord> <Rika> Kinda
[16:13:54] <FromDiscord> <cabboose> what
[16:13:55] <FromDiscord> <cabboose> nein
[16:14:02] <FromDiscord> <Rika> Wait
[16:14:09] <FromDiscord> <Rika> Why the fuck do you need to set length all the time
[16:14:12] <FromDiscord> <PsychoClay> ehhhh
[16:14:26] <FromDiscord> <PsychoClay> because var in llop make thread go dissapear
[16:14:27] <FromDiscord> <Rika> Just do it once to the thread count
[16:14:33] <FromDiscord> <cabboose> hahahahahaha someone hold him down
[16:14:35] <FromDiscord> <PsychoClay> oh right
[16:14:37] <FromDiscord> <Rika> What
[16:14:48] <FromDiscord> <Rika> Did you get enough sleep today
[16:14:58] <FromDiscord> <Rika> Did you forget your morning coffee
[16:15:02] <FromDiscord> <cabboose> ITS FINE
[16:15:03] <FromDiscord> <cabboose> okay
[16:15:03] <FromDiscord> <Rika> Are you eating properly
[16:15:07] <FromDiscord> <PsychoClay> im vibreaigng
[16:15:08] <FromDiscord> <cabboose> also
[16:15:09] <FromDiscord> <cabboose> don't do that
[16:15:21] <FromDiscord> <cabboose> Tdata(udata\: udata) will sink the udata
[16:15:21] <FromDiscord> <cabboose> make a Tdata()
[16:15:35] <FromDiscord> <cabboose> and then assign udata to the udata field
[16:15:37] <FromDiscord> <cabboose> that's safer
[16:15:40] <FromDiscord> <cabboose> AFAIK
[16:15:43] <FromDiscord> <PsychoClay> whats the difference
[16:15:48] <FromDiscord> <Rika> semantics
[16:15:53] *** Joins: pro (~pro@user/pro)
[16:15:58] <FromDiscord> <cabboose> if you sink it; it makes your program sad
[16:16:00] <FromDiscord> <Rika> Can’t you force a copy without doing that though
[16:16:12] <FromDiscord> <Rika> Prolly with .copy or so
[16:16:55] <FromDiscord> <PsychoClay> sent a code paste, see https://play.nim-lang.org/#ix=3yPQ
[16:17:02] <FromDiscord> <PsychoClay> good?
[16:17:15] <FromDiscord> <cabboose> I reckon
[16:17:51] <FromDiscord> <Rika> Might still sink
[16:18:04] <FromDiscord> <Rika> Is there no explicit copy
[16:18:07] <FromDiscord> <Rika> Like I’ve said
[16:18:28] <FromDiscord> <PsychoClay> but its a ref?
[16:18:50] <FromDiscord> <PsychoClay> it seems to work
[16:19:03] <FromDiscord> <Rika> Well why would constructor syntax sink then
[16:19:29] <FromDiscord> <cabboose> I remember seeing it somewhere
[16:19:30] <FromDiscord> <cabboose> I can't remember
[16:19:44] <FromDiscord> <cabboose> but pretty sure constructor syntax is automatically sunk
[16:20:01] <FromDiscord> <cabboose> otherwise the compiler will determine if it's safe to do so?
[16:20:09] <FromDiscord> <cabboose> I'm sure I remember seeing it somewhere
[16:20:18] <FromDiscord> <cabboose> I've definitely run into the problem before
[16:20:38] <FromDiscord> <PsychoClay> sent a code paste, see https://play.nim-lang.org/#ix=3yPR
[16:20:55] <FromDiscord> <cabboose> oh dear
[16:21:01] <FromDiscord> <cabboose> cyclic structures
[16:21:06] <FromDiscord> <PsychoClay> (edit) "https://play.nim-lang.org/#ix=3yPR" => "https://play.nim-lang.org/#ix=3yPS"
[16:21:24] <FromDiscord> <cabboose> wait
[16:21:48] <FromDiscord> <rb3.nim> Hey guys, is there some trick to figure out if a variable is a `let` or `var` in variable declaration macro pragmas? I saw this RFC https://github.com/nim-lang/RFCs/issues/220, but I was hoping there was an existing solution
[16:22:24] <FromDiscord> <cabboose> Does that occur when you try to access the field in your thread psychoclay?
[16:22:45] <FromDiscord> <cabboose> Also; why are you creating a new Tdata for every thread
[16:22:47] <FromDiscord> <cabboose> you only need 1
[16:22:53] <FromDiscord> <PsychoClay> oh right
[16:22:57] <FromDiscord> <xflywind> it seems like a known issue
[16:22:59] <FromDiscord> <xflywind> https://github.com/nim-lang/Nim/issues/14901
[16:22:59] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[16:23:27] <FromDiscord> <cabboose> But would the same behaviour occur with manual thread creation?
[16:23:30] <FromDiscord> <cabboose> fak
[16:24:37] <FromDiscord> <PsychoClay> hm it doesnt error anymore
[16:24:51] <FromDiscord> <cabboose> `nim`
[16:25:10] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[16:25:48] <FromDiscord> <cabboose> There was a pragma for stopping ORC from collecting your cycles wasn't there?
[16:25:50] <FromDiscord> <cabboose> or was it the opposite
[16:25:56] <FromDiscord> <cabboose> I think it was the opposite
[16:26:15] <FromDiscord> <Rika> In reply to @rb3.nim "Hey guys, is there": I recall someone asking about the same thing
[16:26:22] *** Joins: rockcavera (~rc@192.12.112.202)
[16:26:22] *** Quits: rockcavera (~rc@192.12.112.202) (Changing host)
[16:26:22] *** Joins: rockcavera (~rc@user/rockcavera)
[16:26:49] <FromDiscord> <cabboose> Too much effort; goodluck psychoclay friend 🤣
[16:27:01] <FromDiscord> <PsychoClay> thanks :))
[16:28:28] <FromDiscord> <Rika> I’d like to help but I ain’t at my PC so lol
[16:29:10] <FromDiscord> <Goel> sent a code paste, see https://play.nim-lang.org/#ix=3yPT
[16:30:00] <FromDiscord> <Rika> @PsychoClay by the way in the async portion of your code instead of awaiting everything one by one in the sequence you can just “await all ts”
[16:30:10] <FromDiscord> <PsychoClay> oh nice
[16:30:29] <FromDiscord> <Goel> (edit) "https://play.nim-lang.org/#ix=3yPT" => "https://play.nim-lang.org/#ix=3yPU"
[16:30:34] <FromDiscord> <cabboose> Oh yeah if you await everything one by one youre in for a bad time
[16:30:41] <FromDiscord> <Rika> Not really
[16:30:51] <FromDiscord> <Rika> It wouldn’t be much slower I don’t think
[16:31:12] <FromDiscord> <Rika> Actually I don’t think it would be slower at all
[16:31:22] <leth> Goel: you could also check for gap.len - 1.
[16:31:32] <FromDiscord> <Rika> Smh use high please
[16:31:46] <FromDiscord> <cabboose> wait is it in the same async pragma proc?
[16:31:58] <FromDiscord> <cabboose> because then it would have to await the first result before itll fetch the next no?
[16:32:08] <FromDiscord> <Rika> No
[16:32:11] <FromDiscord> <Rika> That’s not how that works
[16:32:26] <FromDiscord> <cabboose> D\:
[16:32:38] <FromDiscord> <Rika> When you call the proc that’s when each thing runs until the first await part of such called proc, then it’s waiting for data
[16:32:56] <FromDiscord> <cabboose> Ye
[16:33:11] <leth> Goel: either start at 1 and do - 1 on operations, or start at 0 and do -1 when checking when to stop.
[16:33:14] <FromDiscord> <Rika> When you await the first future you wait for it to finish (but every proc is fetching data I believe)
[16:33:18] <FromDiscord> <Goel> @leth but my problem is not with out of bound for the last, but for the first pass
[16:33:38] <FromDiscord> <cabboose> I think I misunderstood what you were referencing then, I thought he was awaiting independent things within a single async proc
[16:33:50] <FromDiscord> <Rika> https://github.com/PsychoClay/aberrant/blob/master/src/scrapers/mcrawl.nim#L159
[16:33:53] <FromDiscord> <Rika> I mean this line
[16:34:16] <FromDiscord> <cabboose> Ohhhh
[16:35:32] <FromDiscord> <cabboose> Yeah I getchya
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:37] *** Quits: max22- (~maxime@2a01cb08833598009b3393ce9ac42685.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[16:37:14] <FromDiscord> <cabboose> I can hear my neighbour diarrhoeaing in the toilet
[16:37:24] <FromDiscord> <cabboose> send help
[16:37:39] <FromDiscord> <Rika> That’s TMI
[16:38:34] <FromDiscord> <cabboose> I don’t think he has an issue with throughput at least
[16:38:38] <FromDiscord> <cabboose> no awaiting there
[16:38:51] <leth> Goel: 0 - 1 is expected to be out of bound because it's -1.
[16:40:11] <FromDiscord> <Goel> I found a way, even if not optimal, just added a different indexer for the `texture`, not the same of the `gap`
[16:40:26] <FromDiscord> <Goel> (edit) 04removed "the"
[16:47:28] <PMunch> Hmm, damn it
[16:47:38] <PMunch> I think my C wrapping is breaking the Nim compiler..
[16:47:49] <PMunch> It outputs the output of the macro, and then it just sets there
[16:48:13] <PMunch> One core pegged
[16:48:22] <PMunch> But doesn't seem to ever progress..
[16:49:10] <PMunch> I guess having a bunch of "when declared" and types pointing to other types just somehow breaks things..
[17:15:51] <PMunch> If someone wants to try and help figure out what is wrong: http://ix.io/3yQ2
[17:15:57] <PMunch> Warning, it's a massive file..
[17:16:14] <PMunch> Well, not that massive, only 2.5K lines
[17:16:25] <PMunch> But compiling it causes the compiler to just freeze up
[17:16:39] <PMunch> I'm guessing it might be a circular type definition there or something
[17:29:59] <PMunch> Hmm, removed all of the when stuff and weird alias names from the generation but it still won't build
[17:30:11] <PMunch> http://ix.io/3yQ5 <- new file, only 1.2k lines
[17:30:52] <PMunch> TBH no idea why this one fails..
[17:32:45] <PMunch> Fails on devel as well..
[17:35:43] <leth> Having some troubles with understanding scope in nested templates.
[17:36:09] <leth> how would I make something like this work for instance? https://play.nim-lang.org/#ix=3yQ7
[17:41:08] <PMunch> https://play.nim-lang.org/#ix=3yQ9
[17:41:15] <PMunch> Something like that works leth ^
[17:44:37] <PMunch> Okay, built a debug compiler build and got this: http://ix.io/3yQc
[17:45:02] <PMunch> Now to figure out where that recursion is..
[17:52:15] <leth> PMunch: Thanks, I see i made some mistakes in my example. I wanted to do something like this rather https://play.nim-lang.org/#ix=3yQd
[17:52:56] *** Joins: max22- (~maxime@2a01cb08833598006be6953efce46753.ipv6.abo.wanadoo.fr)
[17:56:00] <leth> But if i understand correctly the template content: string you added works in a way to make it work on that defined variable in the nested templates, on some sort of implied definition that is done in the templates? I'm not sure I understand how it works.
[18:05:20] <PMunch> That `template content: string = message.content` simply rewrites every instance of `content` in your `body` to a `message.content`
[18:06:26] <leth> Oh, thank you, good explanation, and handy syntax.
[18:17:54] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[18:18:12] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:22:23] *** Joins: Vladar (~Vladar@46.162.2.53)
[18:34:20] <leth> I also need to add the string in the template and then apply that to the object, would that be possible?
[18:38:10] <arfy> Just refreshing my syntax. this is a function that's going to take a variable number of directory paths, and return a single list of files. is this correct? 
[18:38:12] <arfy> proc getFileList(files: vararg[string]): seq[string] =
[18:54:08] <PMunch> Holy shit, it actually builds!
[18:55:07] <PMunch> Not to hype this up too much, but I've got libclang wrapping a massive C project by only telling it what I want to include, where it can find the C sources, and a couple type rewrites just because I want it more type safe
[18:55:18] <PMunch> Hopefully I can release this soon! :D
[18:55:19] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[20:17:18] <arkanoid> PMunch: whaat?
[20:17:41] <arkanoid> wait a moment, are you and haxscramper working on same tool?
[20:21:50] <FromDiscord> <haxscramper> No, pmunch is working on the C conversion tool
[20:22:27] <arkanoid> but he said wrapping, not converting
[20:22:27] <FromDiscord> <haxscramper> So he avoided this abyss of fuck-you language design choices and edge cases that libclang dumps on you
[20:22:40] <FromDiscord> <haxscramper> Well, wrapping
[20:23:19] <FromDiscord> <gerwy> Hi, is there any good Javascript FFI tutorial for Nim? i have one library i want to use but im not sure how i should translate the code for it↵also idk if i need to locally have those .js files for library or i can have it installed via npm i have both to be sure
[20:23:20] <FromDiscord> <haxscramper> But anyway, c2nim v2 using libclang
[20:24:45] <arkanoid> And aren't you doing same but with C++ and preprocessing included?
[20:26:11] <arkanoid> gerwy, I've learn how to do that myself in an afternoon. Is quite easy, just follow https://github.com/nim-lang/Nim/wiki/Nim-for-TypeScript-Programmers#javascript-interoperability and jsffi module docs/tests/examples
[20:27:15] <FromDiscord> <haxscramper> Technically yes↵(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[20:27:51] <FromDiscord> <haxscramper> Practically "with c++ and preprocessor included" makes it not "the same"
[20:27:56] <FromDiscord> <gerwy> In reply to @arkanoid "And aren't you doing": i mean kinda, but there is some async going on in the example code for the lib↵i could use nim's async module do i?
[20:28:14] <FromDiscord> <gerwy> In reply to @arkanoid "<@347345994217816066>, I've learn how": ooooh i forgot about this thank youuu
[20:28:17] <FromDiscord> <haxscramper> Well, maybe pmunch just was smart enough to avoid all walls, while I repeatedly managed to hit them for a year
[20:28:51] <FromDiscord> <haxscramper> But I'm pretty sure his tool would be more usable than what I have right now
[20:29:21] <arkanoid> haxscramper, sure, I was not trying to underestimate. I know how C++ is massively more complex and generally bad than C, that's why I tend to avoid it
[20:30:32] <arkanoid> gerwy: https://nim-lang.org/docs/asyncjs.html
[20:30:38] <arkanoid> never used it myself
[20:32:43] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[20:33:14] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:36:51] <FromDiscord> <gerwy> In reply to @arkanoid "<@347345994217816066>: https://nim-lang.org/docs/as": :😳
[20:36:53] <FromDiscord> <gerwy> (edit) ":😳" => "😳"
[20:39:06] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:47:54] *** Quits: rockcavera (~rc@user/rockcavera) (Read error: Connection reset by peer)
[20:48:19] *** Joins: rockcavera (~rc@192.12.112.202)
[20:48:19] *** Quits: rockcavera (~rc@192.12.112.202) (Changing host)
[20:48:19] *** Joins: rockcavera (~rc@user/rockcavera)
[20:49:16] <FromDiscord> <gerwy> ugh i think i need some examples on how its done, i will look more into it later
[20:55:21] <FromDiscord> <fwsgonzo> what is the sanest way to check if a string is a number vs a hex string?
[20:55:42] <FromDiscord> <fwsgonzo> (edit) "a" => "an integral" | "string?" => "string vs a floating-point constant?"
[20:56:10] <FromDiscord> <cabboose> check if it's all numerical characters?
[20:59:54] <FromDiscord> <cabboose> https://nim-lang.org/docs/strutils.html#allCharsInSet%2Cstring%2Cset%5Bchar%5D
[21:00:19] <FromDiscord> <cabboose> I guess use that against `Digits`
[21:00:45] <FromDiscord> <cabboose> if you get `false` then it's not an int
[21:00:54] <FromDiscord> <dain> im trying to get my head around writing macros
[21:01:04] <FromDiscord> <dain> this is so much fun :)
[21:01:06] <FromDiscord> <cabboose> can then test it against `HexDigits`?
[21:01:49] <FromDiscord> <fwsgonzo> yeah, but I think to make it easier for myself I will just enforce 0x, 0b and all digits = integral
[21:02:23] <FromDiscord> <fwsgonzo> that leaves floating points but I will handle that later
[21:02:30] <FromDiscord> <cabboose> so you specifically want to know if its a hex/integer vs a float?
[21:03:46] <FromDiscord> <fwsgonzo> yes I'm actually parsing assembly instructions
[21:04:17] <FromDiscord> <cabboose> well the fastest thing then might just be an iteration over the characters. return a val of 0 while the characters are integers, and then return a val of 1 if you hit a hex, and a 2 if you hit a period?
[21:04:28] <FromDiscord> <cabboose> oh shiet
[21:04:34] <FromDiscord> <cabboose> byelolnope
[21:07:06] <FromDiscord> <fwsgonzo> I think the only sane way is to enforce 0x and 0b to avoid confusion
[21:18:56] <FromDiscord> <gerwy> actually it might be my lib that doesn't work not nim hmm
[21:19:27] <FromDiscord> <fwsgonzo> sent a code paste, see https://play.nim-lang.org/#ix=3yRv
[21:19:35] <FromDiscord> <fwsgonzo> (edit) 
[21:19:40] <FromDiscord> <Rika> you cannot have sets of strings
[21:19:43] <FromDiscord> <Rika> use hashset
[21:19:50] <FromDiscord> <cabboose> You cant do dat
[21:20:11] <FromDiscord> <Rika> cabby my man you're a bit too late ain't ya :PP
[21:20:18] <FromDiscord> <Rika> i kid
[21:20:24] <FromDiscord> <cabboose> it's getting too late for me
[21:20:26] <FromDiscord> <cabboose> leave me behind
[21:20:32] <FromDiscord> <cabboose> let me die
[21:20:37] <FromDiscord> <Rika> you cant
[21:20:42] <FromDiscord> <Rika> you still have responsibilities
[21:20:49] <FromDiscord> <cabboose> hahahahahahahahahahaha
[21:20:52] <FromDiscord> <cabboose> hahahahahahahhahahahahhahahahahhaa
[21:20:56] <FromDiscord> <cabboose> dead
[21:20:58] <FromDiscord> <Rika> oh no
[21:21:15] <FromDiscord> <Rika> this will really impact your relationships with your employer...
[21:21:16] <FromDiscord> <Rika> x d
[21:21:20] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[21:21:39] <FromDiscord> <cabboose> you heartless bastard hahahaha
[21:21:57] <FromDiscord> <cabboose> I won't die so long as I can still pester you and beef
[21:22:02] <FromDiscord> <Rika> poggers
[21:22:05] <FromDiscord> <Rika> one more in the group
[21:22:13] <FromDiscord> <Rika> pestering triad
[21:22:28] <FromDiscord> <fwsgonzo> sent a code paste, see https://play.nim-lang.org/#ix=3yRw
[21:22:35] <FromDiscord> <fwsgonzo> (edit) "https://play.nim-lang.org/#ix=3yRw" => "https://play.nim-lang.org/#ix=3yRx"
[21:22:40] <FromDiscord> <Rika> the generic is not needed
[21:22:42] <FromDiscord> <cabboose> aiyaaaaa
[21:22:43] <FromDiscord> <Rika> that isnt a type
[21:22:46] <FromDiscord> <Rika> here is the correct:
[21:22:55] <FromDiscord> <Rika> `let opcodes = toHashSet([""])`
[21:23:10] <FromDiscord> <Rika> but you can make it empty, empty string != no string
[21:23:17] <FromDiscord> <Rika> if it were empty, you'd use the generic
[21:23:28] <FromDiscord> <Rika> `let opcodes = toHashSet[string]([])` i think will work
[21:23:29] <FromDiscord> <cabboose> or just do a nice `let opcodes = initHashSet[string]()` if you want to use the generic
[21:23:34] <FromDiscord> <Rika> oh yeah
[21:23:35] <FromDiscord> <Rika> init
[21:23:42] <FromDiscord> <Rika> it's 2 am and i wake up early forgive me
[21:23:43] <FromDiscord> <cabboose> you need tea
[21:23:48] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[21:23:49] <FromDiscord> <cabboose> hahahahahaha
[21:25:17] <FromDiscord> <fwsgonzo> thanks
[21:28:00] *** Joins: neurocyte (~neurocyte@45.14.191.55)
[21:28:00] *** Quits: neurocyte (~neurocyte@45.14.191.55) (Changing host)
[21:28:00] *** Joins: neurocyte (~neurocyte@user/neurocyte)
[21:45:44] *** Joins: arfy8820 (~arfy@1.126.104.139)
[21:48:04] <arfy8820> ok... help? I'm trying to call a function that requires a pointer. I have this, but can't remember how to create a pointer in the function call.
[21:48:06] <arfy8820> var info: BASS_DEVICEINFO
[21:48:06] <arfy8820> discard BASS_GetDeviceInfo(1, info)
[21:52:37] <FromDiscord> <Rika> pointers can be retrieved from variables by `addr`
[21:52:53] <arfy8820> aha. thanks. 
[21:53:04] *** Quits: arfy8820 (~arfy@1.126.104.139) (Quit: Reality intrudes...)
[21:53:20] <FromDiscord> <Rika> letiables will need `unsafeAddr` for reference
[21:53:28] <FromDiscord> <Rika> ~~sorry not sorry for the bad joke~~
[22:17:36] <FromDiscord> <dain> is it possible to attach an else clause to a macro
[22:18:19] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3yRP
[22:18:34] <FromDiscord> <haxscramper> it should be possible
[22:19:39] <FromDiscord> <dain> but isn't the else syntactically outside of the macro so it wouldn't get passed in?
[22:20:00] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3yRQ
[22:20:26] <FromDiscord> <haxscramper> `else/elif/of/finally/except/do` are passed in the same block↵(@dain)
[22:20:35] <FromDiscord> <dain> oooh cool
[22:20:42] <FromDiscord> <dain> that's good
[22:20:43] <FromDiscord> <haxscramper> https://github.com/nim-lang/RFCs/issues/420#issuecomment-917476330
[22:31:29] <FromDiscord> <tandy> i wish the compiler would tell me where im using native sockets
[22:31:44] <FromDiscord> <tandy> instead of just warning me \>\:o
[22:33:17] <FromDiscord> <exelotl> ohhh wow else block actually landed?
[22:33:30] <FromDiscord> <exelotl> that's super cool I always wanted that to be a thing
[22:35:30] <FromDiscord> <exelotl> actually maybe it didn't, I can't tell from the convo 😅
[22:36:52] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[22:37:24] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:48:55] <FromDiscord> <haxscramper> In reply to @exelotl "ohhh wow else block": They have been available for the last five years at least
[22:49:13] <FromDiscord> <tandy> is there any serialisation library that supports the JS backend?
[22:49:28] <FromDiscord> <haxscramper> serialization to what? jsony would probably work
[22:50:45] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3yRW
[22:51:16] <FromDiscord> <haxscramper> seems to be fixed now
[22:51:18] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3yRZ
[23:07:27] <FromDiscord> <tandy> string, jsony had some sort of parsehook error for my enum↵(@haxscramper)
[23:08:25] <FromDiscord> <tandy> \`jsony/objvar.nim(53, 16) Error\: the field 'service' is not accessible.\`
[23:13:44] <NimEventer> New Nimble package! nimcrypt - Implementation of Unix crypt with support for Crypt-MD5, Crypt-SHA256 and Crypt-SHA512, see https://github.com/napalu/nimcrypt
[23:13:46] <nrds> <12R2D299> 4GitHub: 7"Nim implementation of Unix crypt"
[23:15:13] <FromDiscord> <ynfle (ynfle)> Is there anyway to skip a certain routine for stack traces?
[23:16:10] <FromDiscord> <ynfle (ynfle)> Meaning that if a calls b and b calls c, the if there is an error in be, it will only report a and b
[23:17:19] <FromDiscord> <haxscramper> `getStackTraceEntries` and write your own pretty-printer
[23:19:03] <FromDiscord> <ynfle (ynfle)> Wrap everything in a try catch block and call it?
[23:19:47] <FromDiscord> <exelotl> In reply to @haxscramper "They have been available": wtf
[23:19:54] <FromDiscord> <exelotl> I could've sworn I tried this before
[23:20:08] <FromDiscord> <exelotl> or maybe I just assumed it wouldn't work since it's not documented anywhere?
[23:20:15] <FromDiscord> <haxscramper> yes
[23:20:34] <FromDiscord> <haxscramper> there is no built-in hook for exception message printouts
[23:20:47] <FromDiscord> <ynfle (ynfle)> That wouldn't work for compile-time crashes though
[23:21:05] <FromDiscord> <haxscramper> well, compiler-time crashes are not exceptions
[23:21:18] <FromDiscord> <ynfle (ynfle)> Not a hook per se, but even using lineinfo from macros
[23:21:27] <FromDiscord> <haxscramper> they are just bugs in compiler
[23:22:22] <FromDiscord> <haxscramper> What are you trying to do? Get better stacktraces when compiler crahes?
[23:22:33] <FromDiscord> <haxscramper> Or when `.error.` is called
[23:22:47] <FromDiscord> <haxscramper> Or when your own exception is raised?
[23:24:58] <FromDiscord> <ynfle (ynfle)> Not compiler crashes but when there are compilation issues
[23:25:27] <FromDiscord> <ynfle (ynfle)> I want to pretend that a template isn't there
[23:25:40] <FromDiscord> <haxscramper> not possible
[23:25:59] <FromDiscord> <haxscramper> right now you can just wrap everything in `compiles()`
[23:26:23] <FromDiscord> <haxscramper> nkError would supposedly might allow this
[23:26:33] <FromDiscord> <haxscramper> But generally speaking invalid code means invalid code
[23:27:52] <FromDiscord> <ynfle (ynfle)> Can this not be acheived with manipulating lineinfo for the nodes
[23:28:50] <FromDiscord> <ynfle (ynfle)> ?
[23:31:13] <FromDiscord> <haxscramper> Can you describe what you want to do?
[23:31:32] <FromDiscord> <haxscramper> You jumped from stacktraces to compilation errors and then to node lineinfo
[23:31:39] <FromDiscord> <haxscramper> Being a bit more concrete will help
[23:31:42] <FromDiscord> <ynfle (ynfle)> Hah lol
[23:32:02] <FromDiscord> <dain> i like this stuff
[23:32:05] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3ySe
[23:32:19] <FromDiscord> <Rika> congrats looks nice
[23:32:42] <FromDiscord> <ynfle (ynfle)> I want to pretend that calling an intemediate template or macro didn't happen
[23:33:28] <FromDiscord> <haxscramper> So you want to reduce number of "template instantiation of" in errors?
[23:34:29] <FromDiscord> <ynfle (ynfle)> Yup
[23:35:23] <FromDiscord> <haxscramper> not possible, or at least highly unlikely this can be done in a sane manner
[23:35:37] <FromDiscord> <haxscramper> Template/macro instantiation context is tracked by compiler
[23:35:57] <FromDiscord> <haxscramper> Not exposed to user code in any way
[23:40:48] *** Quits: ozzz (~oz@46.49.41.80) (Quit: Bye)
[23:41:04] *** Joins: ozzz (~oz@46.49.41.80)
[23:46:23] <FromDiscord> <ynfle (ynfle)> Hmmm
[23:46:54] <FromDiscord> <Goel> How can i use `echo` to print an adress/pointer of a field of an object?
[23:47:10] <FromDiscord> <ynfle (ynfle)> I have user code. I'm running it in a subprocess and modifying it. That's why I want to change the stacktraces
[23:47:23] <FromDiscord> <ynfle (ynfle)> `echo someVar.addr`
[23:47:26] <FromDiscord> <haxscramper> `echo addr object.field`?↵(@Goel)
[23:47:35] <FromDiscord> <haxscramper> Or you mean `field: ptr T` being printed as `...`
[23:47:39] <FromDiscord> <Goel> That's what i tried but doesn't work
[23:47:39] <FromDiscord> <haxscramper> Overload `$` for your pointer
[23:49:06] <FromDiscord> <Goel> sent a code paste, see https://play.nim-lang.org/#ix=3ySm
[23:49:17] <FromDiscord> <Rika> .data is already a pointer?
[23:49:19] <FromDiscord> <haxscramper> `cast[int](addr text.data)`
[23:49:37] <FromDiscord> <Goel> yes
[23:49:40] <FromDiscord> <haxscramper> Or better do `repr` on the thing
[23:49:53] <FromDiscord> <Goel> But only data is a pointer the other fields are not
[23:49:56] <FromDiscord> <ynfle (ynfle)> Try type conversion to int
[23:51:14] <FromDiscord> <dain> hmm im trying to do a more sophisticated version of the above "assuming" thing, that can handle `assuming expr() as name: ...` . im trying to use the fusion/matching and im getting a weird error just trying to define it
[23:51:28] <FromDiscord> <dain> sent a code paste, see https://paste.rs/zzw
[23:51:45] <FromDiscord> <Goel> In reply to @haxscramper "Or better do `repr`": Thanks
[23:51:56] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3ySo
[23:52:09] <FromDiscord> <dain> but when I delete the `is Ident()` part at the end, the error goes away. why is that?
[23:53:27] <FromDiscord> <dain> it works inside the square brackets
[23:53:58] <FromDiscord> <haxscramper> Wrap `@name is Ident()` in pars
[23:54:15] <FromDiscord> <haxscramper> I'm not sure but `|` might bind closer
[23:54:28] <FromDiscord> <dain> ah thanks, that works
[23:54:44] <FromDiscord> <haxscramper> The error message is shit though
[23:54:50] <FromDiscord> <dain> that's strange, though, in the tutorial I was following you don't need parentheses
[23:54:59] <FromDiscord> <haxscramper> You can report it on fusion issue, I will look into it
[23:55:23] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3ySp
[23:56:59] *** Quits: ozzz (~oz@46.49.41.80) (Quit: Bye)
[23:57:05] <FromDiscord> <haxscramper> Can you show how you use this `assuming_v2` macro?
[23:57:45] *** Joins: ozzz (~oz@46.49.41.80)
[23:58:04] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=
[23:58:06] <FromDiscord> <dain> i havent written it yet
[23:58:09] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3ySq
[23:58:15] <FromDiscord> <dain> im just trying to figure out how macros and stuff work
