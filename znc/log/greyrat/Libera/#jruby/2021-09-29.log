[00:44:42] <lopex[m]> could this be useful https://github.com/wildfly-security/wildfly-openssl ?
[00:48:47] <headius> lopex: I would be willing to try this or the netty wrapper as a more compatible option
[00:49:11] <headius> it's pretty clear we can't maintain jruby-openssl with current resources
[00:56:01] <headius> Hell, we might even be able to write the Ruby wrapper entirely in Ruby as a first attempt
[01:20:48] <headius> it's also possible that modern JSSE provides the features we were missing that prompted us to use BC back in the day
[01:21:08] <headius> nobody has gone back to try to remove more of BC
[01:44:47] <lopex[m]> is bc obsolete now just like joda kind of is ?
[01:45:25] <headius> I don't think it's obsolete but I don't know how c
[01:45:54] <headius> How well it is maintained
[01:46:42] <lopex[m]> headius: btw, I'm working part-time at my old job and we had this lately:
[01:46:47] <lopex[m]> Job 779337/QUSER/QZDASOINIT started on 21-08-26 at 02:59:57 in subsystem QUSRWRK in QSYS. Job entered system on 21-08-26 at 02:59:57... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/e88db13a9ebad9142b59ced2ec4c6c6f99109793)
[01:47:13] <lopex[m]> the only workaround for now: -Xjit:exclude={java/util/GregorianCalendar.computeTime()V}
[01:47:29] <lopex[m]> lol huh ?
[01:47:42] <headius> Wow that's a mess
[01:47:52] <lopex[m]> AS/400 J9
[01:48:34] <lopex[m]> it's from kotlin codebase, so I wonder if that makes any difference wrt inlinin schemes etc
[01:48:48] <lopex[m]> kotlin inline/crossinline makes some weird bytecode
[01:49:47] <lopex[m]> also I wonder why https://developer.ibm.com/blogs/introducing-the-ibm-semeru-runtimes/ is not available on AS/400
[03:52:12] <headius> I am sure the Kotlin folks have hit on some JIT bugs like we did years ago
[04:10:10] <lopex[m]> but mostly wrt method size isnt it ?
[04:10:19] <lopex[m]> or complexity
[04:11:54] <lopex[m]> I guess it's all about patterns generated
[04:12:29] <lopex[m]> if so java standard is not what it claims to be
[04:13:19] <lopex[m]> or at least native compilers
[06:10:46] *** Joins: Cameronian (~cameronia@202.188.208.156)
[06:13:48] *** Quits: Cameronian (~cameronia@202.188.208.156) (Quit: Leaving)
[06:50:20] *** Joins: Cameronian (~Cameronia@202.188.208.156)
[11:52:17] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: enebo[m] (~enebo@2001:470:69fc:105::e6) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: lopex[m] (~lopexm]@2001:470:69fc:105::3158) (Quit: Bridge terminating on SIGTERM)
[11:52:20] *** Quits: basshelal[m] (~basshelal@2001:470:69fc:105::30e7) (Quit: Bridge terminating on SIGTERM)
[11:52:20] *** Quits: demon36[m] (~demon36ma@2001:470:69fc:105::dc32) (Quit: Bridge terminating on SIGTERM)
[11:52:20] *** Quits: byteit101[m] (~byteit101@2001:470:69fc:105::30ec) (Quit: Bridge terminating on SIGTERM)
[11:52:20] *** Quits: XavierNoriaGitte (~gitterfxn@2001:470:69fc:105::3111) (Quit: Bridge terminating on SIGTERM)
[11:52:20] *** Quits: KarolBucekGitter (~gitterkar@2001:470:69fc:105::3127) (Quit: Bridge terminating on SIGTERM)
[11:52:21] *** Quits: kares[m] (~karesmatr@2001:470:69fc:105::30d1) (Quit: Bridge terminating on SIGTERM)
[11:52:21] *** Quits: headius (~headius@2001:470:69fc:105::3027) (Quit: Bridge terminating on SIGTERM)
[11:52:21] *** Quits: MarcinMielyskiGi (~gitterlop@2001:470:69fc:105::3134) (Quit: Bridge terminating on SIGTERM)
[11:52:21] *** Quits: MattPattersonGit (~gitterfid@2001:470:69fc:105::3105) (Quit: Bridge terminating on SIGTERM)
[11:52:21] *** Quits: TimGitter[m] (~gittertim@2001:470:69fc:105::314b) (Quit: Bridge terminating on SIGTERM)
[11:52:24] *** Quits: AnilJaiswal[m] (~aniljaisw@2001:470:69fc:105::1:aa) (Quit: Bridge terminating on SIGTERM)
[11:52:25] *** Quits: CharlesOliverNut (~gitterhea@2001:470:69fc:105::311e) (Quit: Bridge terminating on SIGTERM)
[11:52:25] *** Quits: fzakaria[m] (~fzakariam@2001:470:69fc:105::30f6) (Quit: Bridge terminating on SIGTERM)
[11:52:25] *** Quits: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140) (Quit: Bridge terminating on SIGTERM)
[11:52:25] *** Quits: OlleJonssonGitte (~gitteroll@2001:470:69fc:105::313b) (Quit: Bridge terminating on SIGTERM)
[11:52:26] *** Quits: CrisShupp[m] (~cshupp1ma@2001:470:69fc:105::1:374) (Quit: Bridge terminating on SIGTERM)
[11:52:27] *** Quits: ChrisSeatonGitte (~gitterchr@2001:470:69fc:105::30fb) (Quit: Bridge terminating on SIGTERM)
[11:52:27] *** Quits: mattpatt[m] (~mattpattm@2001:470:69fc:105::315d) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: jswenson[m] (~jswensonm@2001:470:69fc:105::fd45) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: TimGitter[m]1 (~gittertir@2001:470:69fc:105::314f) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: JesseChavezGitte (~gitterjes@2001:470:69fc:105::3122) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: kai[m]1 (~kaikdeorg@2001:470:69fc:105::c43) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: FlorianDoubletGi (~gitterflo@2001:470:69fc:105::310c) (Quit: Bridge terminating on SIGTERM)
[11:52:29] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Quit: Bridge terminating on SIGTERM)
[11:52:30] *** Quits: liamwhiteGitter[ (~gitterlia@2001:470:69fc:105::312d) (Quit: Bridge terminating on SIGTERM)
[11:52:33] *** Quits: JulesIvanicGitte (~gittergui@2001:470:69fc:105::3118) (Quit: Bridge terminating on SIGTERM)
[11:52:33] *** Quits: klobuczek[m] (~klobuczek@2001:470:69fc:105::1:24c) (Quit: Bridge terminating on SIGTERM)
[11:52:33] *** Quits: Leonardomejiabus (~thebiglor@2001:470:69fc:105::1:3a2) (Quit: Bridge terminating on SIGTERM)
[11:52:33] *** Quits: meckispaghetti[m (~meckispag@2001:470:69fc:105::f2c5) (Quit: Bridge terminating on SIGTERM)
[11:52:33] *** Quits: NoraHoward[m] (~baroquebo@2001:470:69fc:105::f6ff) (Quit: Bridge terminating on SIGTERM)
[11:52:34] *** Quits: JasonvanZyl[m] (~jasonvanz@2001:470:69fc:105::dbb4) (Quit: Bridge terminating on SIGTERM)
[11:55:25] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[11:55:58] *** Joins: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2)
[12:10:01] *** Joins: enebo[m] (~enebo@2001:470:69fc:105::e6)
[12:10:02] *** Joins: kai[m] (~kaikdeorg@2001:470:69fc:105::c43)
[12:10:02] *** Joins: lopex[m] (~lopexm]@2001:470:69fc:105::3158)
[12:10:02] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[12:10:02] *** Joins: JasonvanZyl[m] (~jasonvanz@2001:470:69fc:105::dbb4)
[12:10:13] *** Joins: ChrisSeatonGitte (~gitterchr@2001:470:69fc:105::30fb)
[12:10:13] *** Joins: JulesIvanicGitte (~gittergui@2001:470:69fc:105::3118)
[12:10:13] *** Joins: MattPattersonGit (~gitterfid@2001:470:69fc:105::3105)
[12:10:13] *** Joins: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100)
[12:10:13] *** Joins: basshelal[m] (~basshelal@2001:470:69fc:105::30e7)
[12:10:13] *** Joins: liamwhiteGitter[ (~gitterlia@2001:470:69fc:105::312d)
[12:10:13] *** Joins: CharlesOliverNut (~gitterhea@2001:470:69fc:105::311e)
[12:10:13] *** Joins: FlorianDoubletGi (~gitterflo@2001:470:69fc:105::310c)
[12:10:13] *** Joins: JesseChavezGitte (~gitterjes@2001:470:69fc:105::3122)
[12:10:13] *** Joins: byteit101[m] (~byteit101@2001:470:69fc:105::30ec)
[12:10:13] *** Joins: KarolBucekGitter (~gitterkar@2001:470:69fc:105::3127)
[12:10:13] *** Joins: OlleJonssonGitte (~gitteroll@2001:470:69fc:105::313b)
[12:10:14] *** Joins: fzakaria[m] (~fzakariam@2001:470:69fc:105::30f6)
[12:10:14] *** Joins: XavierNoriaGitte (~gitterfxn@2001:470:69fc:105::3111)
[12:10:14] *** Joins: MarcinMielyskiGi (~gitterlop@2001:470:69fc:105::3134)
[12:10:14] *** Joins: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140)
[12:10:14] *** Joins: klobuczek[m] (~klobuczek@2001:470:69fc:105::1:24c)
[12:10:14] *** Joins: NoraHoward[m] (~baroquebo@2001:470:69fc:105::f6ff)
[12:10:14] *** Joins: mattpatt[m] (~mattpattm@2001:470:69fc:105::315d)
[12:10:14] *** Joins: TimGitter[m] (~gittertim@2001:470:69fc:105::314b)
[12:10:14] *** Joins: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146)
[12:10:14] *** Joins: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba)
[12:10:14] *** Joins: demon36[m] (~demon36ma@2001:470:69fc:105::dc32)
[12:10:14] *** Joins: CrisShupp[m] (~cshupp1ma@2001:470:69fc:105::1:374)
[12:10:14] *** Joins: Leonardomejiabus (~thebiglor@2001:470:69fc:105::1:3a2)
[12:10:14] *** Joins: kares[m] (~karesmatr@2001:470:69fc:105::30d1)
[12:10:14] *** Joins: jswenson[m] (~jswensonm@2001:470:69fc:105::fd45)
[12:10:14] *** Joins: meckispaghetti[m (~meckispag@2001:470:69fc:105::f2c5)
[12:10:15] *** Joins: TimGitter[m]1 (~gittertir@2001:470:69fc:105::314f)
[12:10:15] *** Joins: AnilJaiswal[m] (~aniljaisw@2001:470:69fc:105::1:aa)
[12:10:16] *** Joins: headius (~headius@2001:470:69fc:105::3027)
[15:00:49] <headius> I see
[15:06:32] <headius> Weird, I did not send that
[16:41:02] *** Quits: byteit101[m] (~byteit101@2001:470:69fc:105::30ec) (Ping timeout: 268 seconds)
[17:37:10] *** Quits: Cameronian (~Cameronia@202.188.208.156) (Remote host closed the connection)
[17:38:29] *** Joins: Cameronian (~Cameronia@202.188.208.156)
[17:45:35] *** Quits: Cameronian (~Cameronia@202.188.208.156) (Quit: Leaving)
[17:45:58] *** Joins: Cameronian (~Cameronia@202.188.208.156)
[17:47:30] *** Quits: Cameronian (~Cameronia@202.188.208.156) (Client Quit)
[20:24:10] <headius> enebo: I will finish stdlib update today but there are obviously a number of gems out there that need to be finished and released
[20:24:21] <headius> with jruby support I mean
[20:24:25] <headius> strscan and stringio both need work to pass tests
[20:24:43] <headius> pp has rubyvm stuff in it and I have a PR to fix that plus backport to work on 2.6
[20:25:02] <headius> digest is almost done
[20:25:37] <headius> I have been updating the comment here and will make it into a new issue after this merges: https://github.com/enebo/jrubyish/pull/3#issuecomment-926235545
[20:26:38] <headius> most of the ext gems have JRuby equivalents but they would have to be removed from our codebase
[20:27:35] <enebo[m]> with these updates can you get a completing test run of spec:ruby:fast and/or test:mri?
[20:27:44] <headius> sure
[20:27:46] <enebo[m]> I am not saying passing just running to completion results
[20:28:03] <enebo[m]> merge what you have and let's chip as new gems are finished
[20:28:15] <headius> yeah will see how it goes... some of the gems like pp have breaking issues on load (accessing RubyVM)
[20:28:49] <enebo[m]> yeah there I believe is something using AST now ... maybe it is a external gem and not stdlib.  I remember being annoyed at it :)
[20:29:07] <headius> pp uses iseq at least
[20:29:07] <enebo[m]> I think 9.4 punts on rbs too
[20:29:23] <headius> we have no Ractor defined so none of those tests are running either
[20:30:00] <enebo[m]> I do not think anyone uses Ractor but I am curious on amount of work since I have not looked into it yet.  I suspect it will not be as difficult workwise as rbs
[20:30:16] <enebo[m]> It may have big ramifications though since it means migrating objects between runtimes
[20:30:25] <enebo[m]> That I think might be a big issue
[20:30:39] <headius> yeah unsure how visibility across runtimes works but it might half work just using the same runtime 😀
[20:30:52] <enebo[m]> hahah
[20:31:00] <headius> migrating will require work but it'
[20:31:04] <headius> it's fixable
[20:31:27] <headius> migrating guts or making shim types that can wrap an object passed between runtimes
[20:31:27] <enebo[m]> yeah I was thinking of this more purely from us having multi-runtimes but I don't know how a ractor starts...is it a clone of existing or a full bootstrap
[20:32:04] <headius> like the specialized Array objects, there could be another one that is RactorArray that maintains a reference to a single array object across runtimes
[20:32:07] <enebo[m]> I thought bootstrap but it has been a long time since I saw a talk
[20:32:12] <headius> need more info
[20:32:23] <enebo[m]> yeah I thought of that as well since he limits which types are allowed
[20:32:42] <enebo[m]> too bad we save runtime in every object :P
[20:33:31] <headius> my worry is less about the runtime reference and more about how do you handle object references to the migrated object
[20:33:39] <enebo[m]> I think indirecting through a wrapper will be only hope for shared instances rooted to "something"
[20:33:40] <headius> or does it just exist in both runtimes then? (frozen)
[20:33:58] <enebo[m]> yeah this is what I don't know
[20:34:18] <enebo[m]> if I have main instance and ractor and return an instance from that ractor and it goes away
[20:34:59] <enebo[m]> anyways ractor I think is also debatable for 9.4 at .0 time since I don't think anyone uses them
[20:35:39] <headius> true
[20:35:45] <enebo[m]> I asked on twitter about rbs and got no replies but I guess that may not mean much
[20:36:13] <enebo[m]> I have seen at least one post about how difficult it would be to integrate ractor into existing libs about a year back
[20:37:08] <headius> I have only seen posts showing how it's slower than just using a single runtime
[20:37:29] <enebo[m]> https://rubytalk.org/t/acess-gems-from-within-ractor/75510
[20:37:33] <enebo[m]> so someone asks a question and it gets no replies
[20:37:36] <enebo[m]> so I don't know
[20:37:41] <enebo[m]> lunch bbsoon
[20:42:51] <headius> coffee
[20:46:38] <headius> grr
[20:46:45] * headius sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/c4b59b7278acca29e2269b8be36f135a274bbdcf
[20:46:59] <headius> we pass open3 tests otherwise
[21:12:24] <enebo[m]> lol
[21:12:38] <headius> https://github.com/ruby/open3/pull/3
[21:12:52] <headius> at least all this pain of getting JRuby support in place means we'll keep these libraries working from now on
[21:13:50] <headius> hah the longest CRuby CI run was 30s
[21:13:59] <headius> I'll put my money on 5min for JRuby
[21:14:17] <enebo[m]> so I wonder what the JIT support is for open3?
[21:14:34] <headius> you can see the commit there... it clears some JIT logs?
[21:14:48] <headius> it seems like something that might have been applicable when mjit was earlier but maybe not necessary
[21:15:01] <headius> I filed #2 to ask how to handle it, but here I just mask it out
[21:15:06] <enebo[m]> yeah that is not too informative
[21:15:33] <enebo[m]> I am not asking you to tell me just wondering :)
[21:15:40] <headius> oh, jruby + macos green in 2min
[21:15:43] <headius> I lose
[21:15:53] <headius> linux is slower though
[21:16:10] <enebo[m]> yeah I would have bet on minutes but it is going to just be a function of process spawns
[21:16:18] <enebo[m]> using --dev?
[21:16:33] <headius> no I did not add that because I wasn't sure how to do it just for JRuby
[21:17:00] <headius> and wanted to see how long it is
[21:17:01] <headius> 2+3=5
[21:17:01] <headius> 3m on linux
[21:17:04] <enebo[m]> I think I did it for some gem in the last year but I don't recall what
[21:17:26] <headius> pretty nice that we are green on this library after all these years
[21:17:41] <headius> windows is still using JDK logic but windows is stupid
[21:17:46] <enebo[m]> I have been fixing reported issues for 9.3.1.0
[21:17:53] <headius> ahh nice
[21:17:55] <headius> I have not looked
[21:18:10] <enebo[m]> I was leaving the backtrace ones for you though 🤑
[21:22:10] <headius> but they're so fun
[21:23:11] <enebo[m]> Is ivoanjo here?
[21:35:39] <enebo[m]> headius: I am thinking of re-adding java_kind_of?
[21:36:31] <enebo[m]> It has been marked as deprecated since 2016 but two people seem to still be using it and without replicating this method I am unsure how they do this since kind_of? does not work itself
[21:38:43] <headius> can we make kind_of? work right?
[21:40:20] *** Parts: meckispaghetti[m (~meckispag@2001:470:69fc:105::f2c5) ()
[21:48:18] <enebo[m]> headius: yeah that is the question...
[21:48:24] <enebo[m]> jruby -e 'a = java.util.ArrayList; p a.kind_of?(java.util.ArrayList)'
[21:48:44] <enebo[m]> Seems unintuive to not work 
[21:49:20] <headius> right
[21:49:31] <headius> well you need to .new that, does it work then?
[21:49:42] <enebo[m]> doh :)
[21:50:00] <enebo[m]> HAHAHA thanks for seeing that.  It does work
[21:50:11] <enebo[m]> I wonder if it will work with java subtypes/interfaces
[21:50:25] <enebo[m]> jruby -e 'a = java.util.ArrayList.new; p a.kind_of?(java.util.List)'
[21:50:34] <enebo[m]> cool
[21:50:48] <enebo[m]> So I think I will point this out and see if that works for people
[22:00:26] <headius> ok
[22:00:51] <headius> all the normal java classes and interfaces should work properly in kind_of, but the java.lang.Class instances will not
[22:01:17] <headius> like kind_of?(java.lang.Class.forName("java.util.List"))
[22:01:24] <headius> not sure what java_kind_of? supports that kind_of? does not
[22:01:47] <enebo[m]> yeah the reported issue is doing an instanceof check so it should be fine for that gem
[22:02:07] <enebo[m]> don't know about the second person but I suspect class type checks are going to be pretty uncommon
[22:35:08] <headius> enebo: I think I have changes working to get test:mri running again
[22:35:18] <headius> they restructured the runner and support libraries
[22:36:46] <headius> once I can run these to completion I'll push these changes
[22:37:44] <headius> after [3150/4468] (unit tests) there's 247 errors or failures (test methods)
[22:37:58] <headius> heh
[22:38:06] <headius>  /Users/headius/projects/jruby/test/mri/ruby/test_literal.rb:581: warning: ... at EOL, should be parenthesized?
[22:38:15] <headius> lots of new and interesting warnings
[22:39:14] <headius> woot 3897 tests, 1726159 assertions, 151 failures, 144 errors, 12 skips
[22:39:15] <enebo[m]> It was about that without any of the gem changes you made but I also find it likely some stuff maybe was not running
[22:39:23] <headius> not too bad for test:mri:core at this stage
[22:39:53] <enebo[m]> I was doing test:mri but it was ~244 F/E total for whole run
[22:40:01] <headius> yeah I'm not sure how you were running it because the runner.rb was not working after your 3.0 update
[22:40:08] <enebo[m]> but that also was before the last merge I did
[22:40:30] <headius> aha, ok
[22:40:30] <headius> I do not know when these tests were updated either but maybe you did that already?
[22:40:45] <enebo[m]> yeah things broke and I had local changes as well for at least one unparsable and on never ending test
[22:40:58] <headius> runner.rb was updated in your "update for 3.0 stdlib" commit so perhaps you updated everything there
[22:41:09] <enebo[m]> Yeah they are definitely 3.0 tests
[22:41:23] <enebo[m]> it is possible they are not 3.0.1 but I think they are
[22:41:42] <headius> pushed my changes to update_stdlib since at least test:mri:core completes again
[22:41:50] <enebo[m]> great
[22:41:58] <headius> I have been doing 3.0.2 so that will need another small update
[22:43:45] <headius> enebo: I had to disable test_refinement for https://github.com/jruby/jruby/issues/6867
[22:44:06] <enebo[m]> 3.0 does prepend differently as well
[22:44:23] <enebo[m]> It maintains all prepend targets so anything added later gets seen by everything
[22:44:44] <enebo[m]> but likely that has nothing to do with this 
[22:47:18] <headius> open3 support is basically ready: https://github.com/ruby/open3/pull/3
[22:47:35] <headius> I tried to run tests with the ProcessBuilder logic but it hangs (after several tests run, though)
[23:09:05] <headius> oh and I forgot tests won't run because it loads pp and that tries to access rubyvm (pr is still unmerged unreleased)
[23:09:18] <headius> you can just delete that from local pp.rb if you want to try runs
[23:17:57] <enebo[m]> headius: yeah kill the line and we will get it whenever it is updated
[23:32:43] <headius> I can't kill it... it's coming from gem now
[23:35:29] <enebo[m]> oh hahah postprocess script
[23:38:48] <headius> yeah submit a feature request
