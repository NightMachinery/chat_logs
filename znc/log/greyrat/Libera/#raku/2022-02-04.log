[00:33:41] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[00:39:25] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:03:53] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[01:15:21] *** Joins: libbits (~gll@50-254-60-169-static.hfc.comcastbusiness.net)
[01:21:39] *** Parts: libbits (~gll@50-254-60-169-static.hfc.comcastbusiness.net) ()
[01:23:43] <Xliff> m: class A { method a { 1 }; method b { 2 }; method c { 3 }; }; class B { has A $!a handles /\
[01:23:44] <camelia> rakudo-moar a35a77913: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter \ (must be quoted to match literally)␤at <tmp>:1␤------> 3{ 3 }; }; class B { has A $!a handles /\7⏏5<EOL>␤Regex not terminated.␤at <tmp>:1␤------> 3{ 3 }; }; class B { has A $!a h…»
[01:24:47] <Xliff> m: class A { method a { 1 }; method b { 2 }; method c { 3 }; }; class B { has A $!a handles /\w+<?{ $/.Str ne 'c' }>/ = A.new; method a { 'a' }; method b { 'b' }; }; 
[01:24:48] <camelia> rakudo-moar a35a77913: ( no output )
[01:25:07] <Xliff> m: class A { method a { 1 }; method b { 2 }; method c { 3 }; }; class B { has A $!a handles /\w+<?{ $/.Str ne 'c' }>/ = A.new; method a { 'a' }; method b { 'b' }; }; A.new.c.say; B.new.a.say; B.new.c.say;
[01:25:08] <camelia> rakudo-moar a35a77913: OUTPUT: «3␤No such method 'c' for invocant of type 'B'.  Did you mean any of␤these: 'a', 'b'?␤  in block <unit> at <tmp> line 1␤␤a␤»
[01:25:29] <Xliff> m: class A { method a { 1 }; method b { 2 }; method c { 3 }; }; class B { has A $!a handles /\w+<?{ $/.Str ne 'c' }>/ = A.new; method c { 'c' }; }; A.new.c.say; B.new.a.say; B.new.c.say;
[01:25:29] <camelia> rakudo-moar a35a77913: OUTPUT: «3␤1␤c␤»
[01:25:42] <Xliff> Nice!
[01:25:57] <Xliff> Is there a faster way to do that bit of delegation without the regex?
[01:37:07] <vrurg> Xliff: pre-build a list of methods at compile time?
[01:42:20] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[01:43:03] <Util> m: class A { method a { 1 }; method b { 2 }; method c { 3 }; }; class B { has A $!a handles * = A.new; method c { 'c' }; };
[01:43:04] <camelia> rakudo-moar a35a77913: ( no output )
[01:43:22] <Util> m: class A { method a { 1 }; method b { 2 }; method c { 3 }; }; class B { has A $!a handles * = A.new; method c { 'c' }; }; A.new.c.say; B.new.a.say; B.new.c.say;
[01:43:23] <camelia> rakudo-moar a35a77913: OUTPUT: «3␤1␤c␤»
[01:43:26] <Util> Xliff: Delegate everything, and any explicit methods of the B class override the delegation.
[01:49:00] <Xliff> Util: Ah. OK.
[01:49:44] <Util> m: my @subs = sub {$^a + $^b}, (* + *), &[+], sub {$^a ~ $^b}, (* ~ *), &[~]; for @subs -> &s { say (0, 1, &s ... *).head(5) }
[01:49:44] <camelia> rakudo-moar a35a77913: OUTPUT: «(0 1 1 2 3)␤(0 1 1 2 3)␤(0 1 1 2 3)␤(0 1 01 101 01101)␤(0 1 01 101 01101)␤(0 1 01 0101 01010101)␤»
[01:49:47] <Util> I expect output lines 1,2,3 to be identical, which they are.
[01:49:51] <Util> I expect output lines 4,5,6 to be identical, but 6 differs from 4&5. Why?
[01:59:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:17:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[02:17:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Client Quit)
[02:31:35] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[02:36:58] <elcaro> Util: my instinct is it would be some kind of confusion with arity/count
[02:38:30] <elcaro> just had a quick look, `&[+].count ~~ 2`, but `&[~].count ~~ Inf`... so that's odd
[02:38:40] <elcaro> maybe something to do with it
[02:40:16] <elcaro> m: say (sub {$^a + $^b}, (* + *), &[+], sub {$^a ~ $^b}, (* ~ *), &[~])».count
[02:40:17] <camelia> rakudo-moar a35a77913: OUTPUT: «(2 2 2 2 2 Inf)␤»
[02:42:34] <elcaro> dunno why the concat infix needs infinite arity
[02:42:49] <elcaro> m: say &infix:<~>(< foo bar baz >)
[02:42:50] <camelia> rakudo-moar a35a77913: OUTPUT: «foobarbaz␤»
[02:45:15] * [Coke] waves
[02:45:19] <elcaro> so your sequence with &[~] is actually slurping all previous vals.
[02:45:33] <elcaro> m: (0, 1, -> *@a { [~] @a } ... *).head(5) # essentially
[02:45:33] <camelia> rakudo-moar a35a77913: ( no output )
[02:45:37] <elcaro> m: say (0, 1, -> *@a { [~] @a } ... *).head(5) # essentially
[02:45:37] <camelia> rakudo-moar a35a77913: OUTPUT: «(0 1 01 0101 01010101)␤»
[02:45:59] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 256 seconds)
[02:46:15] <elcaro> I've used a slurpy param on a sequence before to do dynamic programming... been meaning to write a post on it.
[02:58:41] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[03:38:10] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:40:03] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:03:36] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:05:09] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[04:08:03] <Util> elcaro: thanks for looking. The .count == Inf gives me a bit more insight.
[04:10:00] <Util> BTW, my example of -> *@a on a Seq: http://rosettacode.org/wiki/Bell_numbers#via_Recurrence_relation_2
[04:10:15] * Util waves back at Coke
[04:58:41] *** Quits: Merfont (~Kaiepi@156.34.47.253) (Ping timeout: 245 seconds)
[05:41:16] *** Joins: melezhik (~melezhik@c-98-198-217-77.hsd1.tx.comcast.net)
[05:41:16] <melezhik> .
[05:41:21] <melezhik> hi folks!
[05:47:55] *** Quits: melezhik (~melezhik@c-98-198-217-77.hsd1.tx.comcast.net) (Quit: Connection closed)
[05:48:12] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[05:48:12] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[05:53:26] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[05:55:57] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[06:13:43] *** Joins: razetime (~quassel@49.207.209.26)
[06:25:27] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::46)
[07:25:27] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:25:27] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:27] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:25:28] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:25:28] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:26:03] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[07:26:09] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[07:26:12] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[07:26:16] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[07:26:45] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[07:26:57] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[07:27:10] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[07:27:21] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[07:27:56] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[07:28:08] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[07:28:12] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[07:28:14] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[07:57:30] <guifa> meh, just when I think I figured out how to handle blocks in slangs, I'm stimied by a crashing optimize bug with RAKUDO_RAKUAST=1  =\ (and with it = 0, I can only obtain a QAST which won't integrate with my RAST code)
[07:57:40] * guifa waves at all
[08:26:01] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[08:26:06] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[08:26:46] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[08:37:23] <razetime> is this the correct place to ask beginner questions?
[08:59:59] <elcaro> razetime: yes it's fine
[09:00:50] <elcaro> StackOverflow is also good. the IRC channel gets quiet sometimes so you may not always get an immediate answer.
[09:14:00] <razetime> i see. I got my answer in #raku-beginner, thanks for the advice
[09:26:46] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:27:03] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[09:27:43] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[09:28:34] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[09:49:37] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[10:41:54] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[11:05:47] *** Joins: mahafyi (~mahafyi@49.205.83.53)
[11:07:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[11:11:10] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:16:08] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:16:37] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 240 seconds)
[11:16:56] *** Joins: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at)
[11:18:46] <El_Che> I even didn't know that channel existed :)
[11:30:38] *** merpader1 is now known as merpaderp
[11:36:44] *** Quits: razetime (~quassel@49.207.209.26) (Remote host closed the connection)
[12:00:55] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:27:43] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[12:37:11] *** Joins: razetime (~quassel@49.207.209.26)
[12:56:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:18:43] *** Quits: mahafyi (~mahafyi@49.205.83.53) (Ping timeout: 256 seconds)
[13:26:26] *** Quits: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at) (Read error: Connection reset by peer)
[13:27:42] *** Joins: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at)
[14:02:00] *** Quits: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at) (Remote host closed the connection)
[14:07:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[14:09:25] *** Joins: younder (~younder@33.51-174-155.customer.lyse.net)
[14:10:25] <younder> https://github.com/Microsoft/language-server-protocol/
[14:10:27] <tellable6> 2022-01-24T23:49:07Z #raku <elcaro> younder Phasers are contructs than can "fire" (get triggered) outside of the standard flow control. The ALLCAPS are to make them stand out because of this
[14:10:27] <tellable6> 2022-01-24T23:50:06Z #raku <elcaro> younder eg. and INIT block at the bottom of your script doesn't happen last... or you could have a single CATCH block handle _all_ exceptions in a script.
[14:13:43] *** Joins: Merfont (~Kaiepi@156.34.47.253)
[14:13:50] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[14:13:56] <younder> Seems to me to get the most out of raku in editors like VS Code, Atom and Emacs you need to implement an interface to the LSP protocol. That allows things like intellisence, and errors marked in the text to work.
[14:53:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:54:39] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[15:16:46] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[15:25:49] *** Joins: MoC (~moc@user/moc)
[15:38:17] *** Joins: TheAthlete (~TheAthlet@176.96.230.125)
[15:38:41] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:58:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:16:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[16:16:49] <leont> Yeah, a good LSP implementation would be useful
[16:17:58] <leont> Having something that can quicky almost-parse raku would be useful to have first though
[16:18:14] <leont> Raku's dynamic nature makes this quite difficult, AFAICT
[16:18:38] <El_Che> are you stuck with "only perl can parse perl" scenario, here?
[16:19:05] <leont> Kind of
[16:19:18] <leont> But gor both, a mostly accurate parse is much easier
[16:19:23] <El_Che> s/you/we/
[16:23:48] *** Quits: sjn (sjn@sprocket.nvg.ntnu.no) (Ping timeout: 250 seconds)
[16:24:43] *** Quits: younder (~younder@33.51-174-155.customer.lyse.net) (Quit: Connection closed)
[16:28:43] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:31:01] <El_Che> leont: I saw you release a threading module for perl. Nice!
[16:35:44] <leont> :-)
[16:39:22] *** Joins: Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[16:39:38] <El_Che> +d
[16:39:54] <El_Che> otherwise is sound creepy real-time :)
[16:41:37] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Ping timeout: 240 seconds)
[16:42:37] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 240 seconds)
[16:43:17] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[16:48:31] *** Joins: sjn (sjn@sprocket.nvg.ntnu.no)
[17:28:06] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[17:28:35] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[17:30:15] *** Joins: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com)
[17:41:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[18:03:07] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[18:03:28] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[18:15:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:23:31] *** Quits: razetime (~quassel@49.207.209.26) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:40:44] *** Joins: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de)
[18:42:13] <whatnext> Hello all :)  I have this error: `Missing serialize REPR function for REPR MVMContext (BOOTContext)` when trying to use `Cache::Memcached` - doesn't happen in development but annoyingly decides to appear in production. Can anyone shed any light?
[18:44:47] *** Joins: immediate (~immediate@46.155.210.40)
[19:01:34] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[19:06:15] *** Quits: immediate (~immediate@46.155.210.40) (Quit: Connection closed)
[19:11:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[19:17:47] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:22:29] <guifa> lizmat: is there a PARSE function equivalent to RakuAST::Node's DEPARSE?
[19:23:30] <guifa> (with RAKUDO_RAKUAST=1 I'm getting an error mixing in the language in a module, so I figured maybe I could just capture the string and doing a parse on it to get the tree in some way)
[19:32:10] <lizmat> guifa: that'd be Str.EVAL, and that's one of the things jnthn is working on
[19:33:12] <guifa> ah okay.  At first I figured I'd could just grab a reference to the language grammar and use RakuGrammar.parse( :actions(RakuActions) ) but then I remembered that'd get me the same QAST tree that is incompatible with my RAST tree haha
[19:33:36] <lizmat> yup
[19:34:36] <guifa> I think I can just leave that spot open in the grammar for now.  Should be a one line fix once the RAST branch is ready 
[19:35:59] <guifa> main thing right now is to convert all of my Binex nodes to produce RAST
[20:09:18] *** Quits: TheAthlete (~TheAthlet@176.96.230.125) (Quit: Client closed)
[20:19:21] *** Joins: sena_kun_ (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[20:19:54] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Remote host closed the connection)
[20:36:01] <leont> They're not really the same, are they? PARSE is just the first step of EVAL
[20:39:10] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[20:44:01] <japhb> leont: The stages interleave, because BEGIN.
[20:44:22] <leont> True
[20:45:28] <lizmat> also: EVAL  :-)
[20:56:05] <leont> codesections: I'm very much looking forward to your presentation tomorrow, I rather enjoy that sort of philosophical content
[21:01:27] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:06:20] *** Quits: sena_kun_ (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[21:20:23] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[21:34:08] *** Quits: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com) (Quit: Connection closed)
[21:37:51] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:41:55] *** Quits: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de) (Quit: Ping timeout (120 seconds))
[21:50:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[22:01:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:14:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[22:17:51] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 256 seconds)
[22:18:10] *** Joins: MoC (~moc@user/moc)
[22:19:30] *** Joins: Darkcoal (~user@user/Darkcoal)
[22:33:15] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[22:35:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:40:28] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[23:04:55] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[23:06:45] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[23:18:03] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[23:26:45] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[23:26:58] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[23:40:07] *** Quits: MasterDuke (~MasterDuk@94.0.188.131) (Ping timeout: 256 seconds)
[23:48:51] <patrickb> Will `done`s ripple through cascaded supply blocks? Or do the blocks have to do something like `LAST { done }`?
