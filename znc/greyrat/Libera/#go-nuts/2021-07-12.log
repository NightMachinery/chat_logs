[00:00:39] <dante443> Gotcha, ok
[00:07:35] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[00:07:52] *** DaftMonk is now known as freespirit
[00:12:56] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[00:12:57] *** Joins: independent56 (~independe@95.144.68.40)
[00:13:11] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[00:13:22] *** Joins: Garb0 (~Garb0@user/garb0)
[00:13:39] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Client Quit)
[00:13:47] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Quit: Client closed)
[00:17:27] <Rudde> Trying to use reflect.New or reflect.Zero to get a blank struct of an object I've created with reflect.StructOf, but it always becomes nil when running .Interface() on it, how do I get it to be the type but just with all default values of their given kinds?
[00:21:21] <b0nn> Rudde: Sorry, why are you using reflect to /create/ a struct?
[00:21:24] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[00:22:50] <Rudde> Because the struct is created by the problam
[00:22:55] <Rudde> program*
[00:23:34] *** Joins: gggp_ (~gggp@60.10.23.164)
[00:23:39] <b0nn> I doubt I'm going to be much help; Maybe, though, you can help things by fleshing out what you are doing
[00:25:26] <Tv_> Rudde: reflect v.Interface() shouldn't be returning a nil interface in correct use. sounds like you're looking at an interface{} storing a nil pointer, perhaps, and confusing the nil pointer with the nil interface. also, StructOf is highly non-typical and if manipulating interfaces is confusing to you, you should probably steer well clear of that.
[00:26:14] *** Quits: gggp__offline (~gggp@60.10.194.47) (Ping timeout: 272 seconds)
[00:26:26] <Tv_> Rudde: for example, how did you determine "becomes nil"
[00:27:22] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 252 seconds)
[00:29:32] *** Quits: V (~v@anomalous.eu) (Ping timeout: 268 seconds)
[00:34:03] *** Joins: hikhvar796 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de)
[00:36:35] <Rudde> Hmm
[00:36:38] <Rudde> It seems it doesn
[00:36:44] <Rudde> even tho vscode reports it as it
[00:37:33] <Rudde> however, json.Unmarshal seems to convert it to a map[string]interface when it does unmarshaling, which really isn't desierd, and with no errors to tell me why it's doing it :S
[00:37:44] *** Quits: usr123 (~usr123@49.156.64.137) (Quit: Leaving)
[00:38:14] <Tv_> observe the actual type, not some far-removed consequence of the type
[00:44:16] *** Joins: jjonah (~jjonah@p200300d5d72a9300dea632fffeb3342f.dip0.t-ipconnect.de)
[00:46:21] <Rudde> Here
[00:46:22] <Rudde> https://play.golang.org/p/cfcNXbeW9np
[00:46:28] <Rudde> I find this behavior kinda strange
[00:48:17] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Ping timeout: 265 seconds)
[00:48:38] <jemaclus> This feels like when you go to the doctor and say "It hurts when I twist my elbow behind my head and point to my left toe," and the doctor says "then don't do that"
[00:49:00] <Rudde> It's just an example
[00:49:01] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[00:50:29] *** Joins: Garb00 (~Garb0@user/garb0)
[00:50:51] <Tv_> reflect.New().Elem() is just weird
[00:51:11] <Rudde> is it broken or weird?
[00:51:22] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 258 seconds)
[00:51:48] <Rudde> using newPerson := reflect.Zero(newType).Interface() will grant the same result
[00:51:49] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[00:53:16] <Tv_> as for the encoding/json part, you're giving it a *interface{} to fill, and the only way it knows to fill interfaces is with the "basic types" such as map[string]interface{}
[00:53:49] <Tv_> Rudde: slow down and understand interfaces and pointers better; you're leaning into your xyproblem *way* too hard
[00:54:12] <Tv_> none of this work is "typical Go", and you're just gonna burn yourself if you try to force it without understanding
[00:54:51] <Rudde> I do these extreme examples in an attempt to understand go
[00:55:07] <Tv_> this level of understanding is typically not called for in the first 3 years of using Go
[00:55:16] <fizzie> Rudde: Does https://play.golang.org/p/6ROrFoDuixG clear it up any?
[00:55:27] <b0nn> Find the happy path first, then learn what happens when you fall off it (and how to get back on)
[00:56:02] <Rudde> I cannot use go if it cannot replace the langauges it's suppose to replace
[00:56:39] <Rudde> fizzie: :o what does running .interface twice do?
[00:57:03] <fizzie> The key difference there is, providing a pointer to your struct type instead of a pointer to an interface{} to json.Unmarshal().
[00:58:01] <Tv_> calling it twice is a red herring, the result is the same on each call
[00:58:28] <Tv_> but it's an interface{} to a *struct{blah}, not an *interface{} to value that stores something
[01:00:55] <fizzie> To be clear, there's three calls to .Interface() there. The one in the json.Unmarshal call does that (returns that *struct{...} in an interface). The two calls to .Elem().Interface return the struct{...} before and after, and are just used to print what's in it.
[01:02:59] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[01:03:17] *** Joins: independent56 (~independe@95.144.68.40)
[01:03:21] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:ecf0:1da:e848:6cd3) (Quit: Leaving)
[01:04:22] <Rudde> Usually when I use unmarshal, I need to give it a pointer for it to full my struct, right?
[01:05:34] <b0nn> Just to be pedantic, you give it the address fo a structure
[01:05:40] <b0nn> of
[01:08:07] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[01:08:21] <fizzie> Rudde: Also maybe helpful -- here's the reflection-free version of what's going on in your initial aleegedly-weird case: https://play.golang.org/p/eOKkfQHVvFs
[01:09:29] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[01:09:33] <Rudde> But this wouldn't work it the type change slitly like a tag edit, while the kind remains the same
[01:09:46] *** Joins: independent56 (~independe@95.144.68.40)
[01:09:52] *** Joins: jinie (~jimmy@188.114.173.37)
[01:10:05] <fizzie> The point was more that there's no difference in how that behaves.
[01:10:13] <Rudde> right
[01:10:52] <fizzie> In both cases: you construct a pointer to your new struct (new vs. reflect.New), dereference it to get that struct value (the * operator vs. .Elem()), convert the result to an interface (assigning to an interface{} variable vs. .Interface()) and finally pass the address of that interface{} value to json.Unmarshal.
[01:12:23] <Rudde> but here you use address again &newPerson
[01:12:29] <Rudde> to json.unmarshal
[01:14:25] *** Joins: absc (~absc@37.163.3.47)
[01:14:31] *** Quits: absc (~absc@37.163.3.47) (Client Quit)
[01:18:15] *** Quits: Garb00 (~Garb0@user/garb0) (Ping timeout: 268 seconds)
[01:20:35] *** Joins: gggp__offline (~gggp@60.10.194.47)
[01:21:06] <Rudde> Ah I missted that p := newPerson.Elem().Interface() was seperate in the original example
[01:21:36] <Rudde> So, can it be done using .Zero insted of .New?
[01:22:01] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[01:22:32] *** Joins: Garb00 (~Garb0@user/garb0)
[01:23:09] *** Joins: jinie (~jimmy@188.114.173.37)
[01:23:48] *** Quits: gggp_ (~gggp@60.10.23.164) (Ping timeout: 268 seconds)
[01:23:57] *** Quits: Garb00 (~Garb0@user/garb0) (Read error: Connection reset by peer)
[01:25:05] *** Joins: Garb00 (~Garb0@user/garb0)
[01:26:19] *** Joins: gggp_ (~gggp@60.10.194.47)
[01:29:34] *** Quits: gggp__offline (~gggp@60.10.194.47) (Ping timeout: 272 seconds)
[01:31:45] *** Joins: menace (~someone@2001:a61:35bf:bb01:8dc3:30c3:7488:eca4)
[01:32:54] *** Quits: menace (~someone@2001:a61:35bf:bb01:8dc3:30c3:7488:eca4) (Changing host)
[01:32:54] *** Joins: menace (~someone@user/menace)
[01:41:04] *** Joins: Garb000 (~Garb0@user/garb0)
[01:43:52] *** Quits: Garb00 (~Garb0@user/garb0) (Ping timeout: 265 seconds)
[01:44:55] <Tv_> they do different things
[01:45:07] <Tv_> the answer depends on your definition of "it"
[01:45:48] <Tv_> T{} vs new(T)
[01:45:56] <Rudde> Like in my original goplayground example
[01:46:00] <Rudde> but with using .Zero?
[01:46:05] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d) (Ping timeout: 255 seconds)
[01:46:48] <A_Dragon> I think you should give the go tour a run though
[01:46:54] <A_Dragon> and get some of the concepts et al down
[01:47:19] <Tv_> Rudde: you can get the effect of one with the other in all cases, it's just roundabout vs direct for whatever the desired effect is
[01:47:33] <Tv_> *new(T) is just silly
[01:47:56] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Ping timeout: 272 seconds)
[01:54:05] <Rudde> That is not the example tho, we used reflection
[01:55:33] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[01:56:43] *** Quits: menace (~someone@user/menace) (Quit: menace)
[01:57:07] <Tv_> same thing, more awkwardly
[01:58:41] *** Quits: independent56 (~independe@95.144.68.40) (Ping timeout: 255 seconds)
[01:59:39] <b0nn> Rudde: If I'm reading this correctly, you have some code that unmarshals to a map[string]interface{} and you're trying to coerce that map into the (correct?) struct?
[02:00:06] <b0nn> If so, How /dynamic/ is the incoming data?
[02:00:33] <Rudde> No, I have the correct struct, but it's generated from reflection, but when I send it to json.Unmarshal to use, it just makes it a map
[02:01:03] <b0nn> So, you have a struct and you want to unmarshal it?
[02:01:27] <Rudde> yeah
[02:01:41] <Rudde> or I want to unmarshal the json into that struct yes
[02:02:03] <b0nn> ok, is there anything dynamic about the json at all?
[02:02:22] <b0nn> as in, different structs apply to different json loads?
[02:02:53] <A_Dragon> okay, you need to slow down I really agree with Tv_ here
[02:03:06] <Tv_> b0nn: he gave json.Unmarshal an *interface{}, Unmarshal proceeded to put a map[string]interface{} there, ignoring his fancy types
[02:03:21] <A_Dragon> because, thats exactly what it should do -_-
[02:03:22] <Rudde> Eh no, not really, but I'm more intrested in the technical limitations than and alternative way of doing my go playground example.
[02:03:42] <Tv_> Rudde: you have misunderstood most of the technical limitations so far...
[02:03:48] <A_Dragon> its not a limit. You've missed something fundemental that Tv_ has been attempting to explain to you
[02:03:53] <Rudde> Well yes, that's why I ask
[02:04:01] <A_Dragon> I can look at what Tv_ just said and know EXACTLY what happened
[02:04:07] <A_Dragon> and why things arent working
[02:04:25] <b0nn> Ok, the three paths you need to investigate : unmarshal to a struct, unmarshal to json.RawMessage, and screwing with the (painful) map[string]interface{}
[02:04:35] <Rudde> I know why the orignal happen A_Dragon
[02:04:40] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:04:50] *** Quits: Asgaroth (~Asgaroth@93.107.191.92) (Remote host closed the connection)
[02:04:50] <Rudde> I asked if there is any way to do it using .Zero, like I don't want it to be a pointer
[02:05:02] <A_Dragon> one moment
[02:05:53] <A_Dragon> https://pkg.go.dev/encoding/json#Unmarshal
[02:05:56] <A_Dragon> give that a read.
[02:06:03] <b0nn> Unmarshalling to an interface, you're saying "This could any of a number of concrete structs" so, of course, the unmarshaller is going to be as liberal as possible
[02:06:18] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 272 seconds)
[02:09:01] <Tv_> b0nn: sorry but you're talking about something else than Rudde's current xyproblem
[02:09:07] <Rudde> A_Dragon: This example https://play.golang.org/p/6MqWfnvjMwc
[02:09:25] <Rudde> You will not be able to unmarshal to newPerson if you send a pointer or not
[02:09:38] <Tv_> Rudde: you do want it to be a pointer...
[02:09:52] <Rudde> Then it converts it to a map
[02:09:54] <Tv_> *struct{blah} in an interface{}
[02:09:58] <Tv_> not *interface{} pointing to whatever
[02:10:12] <Tv_> Rudde: once again, slow down and understand pointers and interfaces
[02:10:17] <Tv_> and, frankly, just write those json tags
[02:10:21] <A_Dragon> w^
[02:10:28] <A_Dragon> what you're doing here will not help you
[02:10:30] <A_Dragon> but Rudde
[02:10:40] <A_Dragon> you've misunderstood what interface{} and *interface{} are and do
[02:10:53] <A_Dragon> and you're banging your head against the wall of a concept you have misunderstood.
[02:11:04] <Rudde> How can I tell it is a struct, when that's what the interface is?
[02:11:29] <A_Dragon> that sentence alone tells me you dont understand interface{}
[02:11:34] <A_Dragon> please read the docs about them
[02:11:35] *** Joins: gggp__offline (~gggp@60.10.194.47)
[02:13:41] *** Quits: Garb000 (~Garb0@user/garb0) (Read error: Connection reset by peer)
[02:14:48] *** Quits: gggp_ (~gggp@60.10.194.47) (Ping timeout: 265 seconds)
[02:14:48] *** Joins: Garb000 (~Garb0@user/garb0)
[02:15:32] <Tv_> https://research.swtch.com/interfaces might help, ignore the optimization about storing small values directly in the value slot that is no longer true
[02:15:57] <Rudde> Is it still implemented like this more than 10 years later?
[02:16:05] <b0nn> RTFM isn't flash - Rudde an interface is an abstract, a struct is a concrete; an interface carries some information with it (and that is what the reflect package uses to discover what the concrete implementation it is dealing with is
[02:20:28] *** cold__ is now known as Lost
[02:21:33] *** Quits: Lost (cold@user/lost) (Quit: .)
[02:23:59] *** Quits: jackneilll (~jackneill@20014C4E180C43002B61853A958C1A1A.dsl.pool.telekom.hu) (Ping timeout: 252 seconds)
[02:25:34] <Rudde> Why does go have goto?
[02:25:46] <Rudde> Seems like a strange ting to priorotize in a slim language?
[02:27:10] <Tv_> why do you describe it as "prioritized"?
[02:27:43] <Rudde> Since it exist? In a relativly new language that was released after goto's peak and death
[02:27:46] *** Quits: rgl (~rgl@bl12-47-147.dsl.telepac.pt) (Remote host closed the connection)
[02:27:50] <Tv_> goto has uses that are awkward to write without it, e.g. a simple retry loop that creates a value you want to use later
[02:29:06] <A_Dragon> gotos are also exceedingly simple for compilers
[02:29:08] *** Joins: Lost (cold@user/lost)
[02:29:16] <A_Dragon> in fact your ifs and switches are reduced to the equiv anyway
[02:29:40] <Rudde> Well yeah, gernerics are usually easy for compilers too
[02:29:51] <Tv_> uhh, definitely not
[02:31:20] <Rudde> Well I've never written a language so I don't really KNOW, but Andrew Kelley seems to disagree
[02:32:12] *** Quits: hikhvar796 (~thelounge@ipservice-092-211-108-043.092.211.pools.vodafone-ip.de) (Quit: The Lounge - https://thelounge.chat)
[02:34:23] <A_Dragon> ...compared to gotos
[02:34:36] <A_Dragon> generics are like multi variable calculus
[02:34:37] *** Joins: gggp_ (~gggp@60.10.194.47)
[02:34:41] <A_Dragon> where gotos are addition
[02:34:58] <b0nn> A_Dragon: Strictly speaking, ifs, loops, and breaks are syntactic sugar for gotos
[02:35:15] <A_Dragon> b0nn: see above :D
[02:35:31] <A_Dragon> everything is a JMP or branching jump eventually
[02:35:37] <b0nn> I had, you had it kinds backwars so I clarified.
[02:35:51] <A_Dragon> ah okay
[02:35:54] <A_Dragon> sorry badly worded
[02:36:27] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[02:36:39] <b0nn> FTR Djikstra's "Gotos are evil" was effectively saying, eveil except in those cases
[02:37:03] <b0nn> jesus my keeb drops keystrokes in unfortunate places
[02:37:31] <b0nn> gotos are evil except in the places that everyone still has them..
[02:37:41] <A_Dragon> like all things
[02:37:44] <A_Dragon> gotos are a tool
[02:37:52] <A_Dragon> and must be used carefully, as they break downwards flow
[02:38:00] *** Quits: gggp__offline (~gggp@60.10.194.47) (Ping timeout: 265 seconds)
[02:40:40] *** Joins: gggp__offline (~gggp@60.10.194.47)
[02:40:48] <rannnn8888> https://dpaste.org/h7ci I do not have much experience in the language: D
[02:40:49] <rannnn8888> I try I send requests through a proxy and sometimes the proxy is not good ,
[02:40:49] <rannnn8888> I want make a 15 loop that if it fails will try to run another proxy,
[02:40:50] <rannnn8888> and after 15 attempts if it did not work then stop where i worng here ?
[02:41:18] <rannnn8888> i get when i add the loop try here  undefined: response
[02:41:43] <Tv_> ah, yes, nice demonstration of what i was saying earlier about retry loops ;)
[02:41:55] <Tv_> rannnn8888: your response variable only exists inside your retry loop
[02:42:36] <rannnn8888> Tv_ it not like in other script python,save the varible out from the loop ?
[02:42:53] <Tv_> rannnn8888: the easiest thing would be to move that to a function that returns (*http.Response, error)
[02:43:12] <Tv_> rannnn8888: you'd encounter the exact same problem in python
[02:44:18] *** Quits: gggp_ (~gggp@60.10.194.47) (Ping timeout: 272 seconds)
[02:44:49] *** Quits: gggp__offline (~gggp@60.10.194.47) (Remote host closed the connection)
[02:45:18] *** Joins: gggp__offline (~gggp@60.10.194.47)
[02:45:26] <rannnn8888> Tv_ response, err := client.Do(resp)
[02:45:27] <rannnn8888>     if err != nil {
[02:45:34] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 272 seconds)
[02:45:36] <rannnn8888> you talk about this ?
[02:45:45] <rannnn8888> move its from the loop ?
[02:45:47] <Tv_> put the whole retry loop inside a new function
[02:46:02] <Tv_> from that function, return resp, nil when an attempt works
[02:46:12] *** Joins: gggp_ (~gggp@221.219.77.87)
[02:46:49] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:47:43] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:49:38] *** Quits: gggp__offline (~gggp@60.10.194.47) (Ping timeout: 252 seconds)
[02:50:09] *** Joins: Necoro (~Necoro@user/necoro)
[02:50:53] *** Quits: Necoro (~Necoro@user/necoro) (Client Quit)
[02:52:01] <rannnn8888> Tv_ you mean this one func ? https://dpaste.org/YzMr
[02:53:52] <Tv_> sorta. it's obviously broken, you're not returning anything on success
[02:54:16] <Tv_> and the magic numbers 10, 20, 15 are just weird
[02:56:16] <rewt> are people really not bothered by the lack of clarity when code isn't indented properly?
[02:57:48] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[02:58:19] *** Joins: jinie (~jimmy@188.114.173.37)
[03:01:09] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:01:22] *** Joins: independent56 (~independe@95.144.68.40)
[03:03:02] <KirkMcDonald> rewt: I frequently use Python.
[03:04:50] *** Quits: Garb000 (~Garb0@user/garb0) (Ping timeout: 255 seconds)
[03:06:01] <rewt> i'm sorry :(
[03:06:22] <b0nn> rewt: gofmt indents fine (although some paste bins refuse to follow the policy)
[03:07:31] <rewt> shouldn't really be up to the paste bin... that just means the code you're actually working with isn't properly indented
[03:08:16] <b0nn> It /shouldn't/ be, but, unfortunately. a few /do/ impose their opinion on indentation
[03:09:07] <rewt> i doubt there's any that actually mess up the indentation
[03:09:38] <rewt> as in mix spaces and tabs, use different number of spaces for different lines at the same indentation level, etc
[03:10:04] <b0nn> dear javascript: stop effing with stuff plskthx
[03:10:07] <b0nn> fixed
[03:10:54] <b0nn> My pet hate (atm) is the reddit fancy editor, damned if that thing can handle a paste properly
[03:11:16] <Tv_> it's just markdown
[03:11:21] <b0nn> If there's a linebreak in the paste, it will only capture everything /after/ the linebreak
[03:11:55] <Tv_> avoiding the fancy editor is simple. for a real rant, how about that "old reddit" still doesn't handle ```
[03:11:57] <b0nn> It's got to the point that I switch between editors when I'm pasting stuff in
[03:13:53] <rannnn8888> https://dpaste.org/xkp1  I do not have much experience in the language: I try I send requests through a proxy and sometimes the proxy is not good ,
[03:14:16] <rannnn8888> I want make a 15 loop that if it fails will try to run another proxy,  and after 15 attempts if it did not work then stop where i worng here ?
[03:14:46] *** Quits: jjonah (~jjonah@p200300d5d72a9300dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:19:49] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[03:22:38] *** Joins: nef (~nef@user/nef)
[03:22:38] *** Joins: hexfive (~eric@50.35.83.177)
[03:23:43] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[03:24:23] *** Joins: jinie (~jimmy@188.114.173.37)
[03:24:42] *** Quits: nef (~nef@user/nef) (Client Quit)
[03:28:31] *** Quits: ninjin (~ninjin@user/ninjin) (Remote host closed the connection)
[03:28:47] *** Joins: ninjin (~ninjin@user/ninjin)
[03:29:54] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 272 seconds)
[03:31:14] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:45] *** Joins: jsrnop (~mark@user/jsrnop)
[03:32:09] *** Quits: hexfive (~eric@50.35.83.177) (Quit: WeeChat 3.0)
[03:32:15] <Tv_> rannnn8888: have you read the compiler errors?
[03:32:41] <Tv_> and that loop is still really weird, why do you need all of the number 10, 15 and 20
[03:33:51] *** Joins: _mrc0 (~mrc_@89.46.62.157)
[03:34:17] <rannnn8888> Tv_ i try more way https://dpaste.org/xmvU
[03:34:41] <Tv_> rannnn8888: https://play.golang.org
[03:35:36] *** Quits: independent56 (~independe@95.144.68.40) (Ping timeout: 272 seconds)
[03:35:50] <rannnn8888> Tv_ but need my proxy to cheack this in play.
[03:36:09] <Tv_> you need no such thing to observe the compiler errors it's giving you
[03:36:41] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:36:58] *** Quits: __mrc (~mrc_@86.106.121.209) (Ping timeout: 258 seconds)
[03:39:31] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[03:42:24] <rannnn8888> Tv_ https://play.golang.org/p/G4A3sYSzl1k
[03:42:55] <A_Dragon> `./prog.go:22:17: too many errors`
[03:43:45] <Tv_> rannnn8888: click format, click run, read
[03:44:08] <Tv_> also what happened to the new function, that's just main
[03:44:43] <rannnn8888> C:\1\tcpr\baba.go:93:1: missing return at end of function
[03:45:26] <rannnn8888> why its not return if the brak its after the return
[03:45:26] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Read error: Connection reset by peer)
[03:47:20] <Tv_> i think what you think break means is not what break means
[03:54:04] <rannnn8888> Tv_ but what i want ? no break get same error https://play.golang.org/p/xqNvO1BoTUx
[03:54:08] <rannnn8888>  missing return at end of function
[03:54:30] <Tv_> yes, you have an unhandled scenario in your code. handle it.
[03:54:50] <Tv_> also putting all that code in main is the wrong direction to go
[03:55:01] <Tv_> you had it in a different function already
[03:56:59] <rannnn8888> Tv_ :X  It's hard: X There's no simple way to do this proxy treatment?
[03:57:17] <Tv_> rannnn8888: you're struggling with programming in general, the proxy problem is simple
[03:57:27] <b0nn> It's only hard because you're unfamiliar with it
[03:57:33] <Tv_> rannnn8888: maybe take some time to learn about loops, functions and such?
[03:58:30] <rannnn8888> Tv_ i make its in python easy but i dont uderstent how its work here my code i edit here work nice but the cheack proxy i want add not work
[04:03:28] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 272 seconds)
[04:04:34] *** Quits: burningserenity (~burningse@102.129.152.58) (Ping timeout: 258 seconds)
[04:08:15] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[04:10:04] *** Joins: boromil (594050ca@67.205.143.82)
[04:14:01] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[04:14:35] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[04:16:24] *** Quits: _mrc0 (~mrc_@89.46.62.157) (Quit: Leaving)
[04:19:06] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[04:20:15] *** Quits: boromil (594050ca@67.205.143.82) (Quit: The Lounge - https://thelounge.chat)
[04:26:20] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:29:10] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:34] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:30] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 265 seconds)
[05:18:07] *** Joins: fef (~thedawn@user/thedawn)
[05:36:39] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[05:44:18] *** Joins: fef (~thedawn@user/thedawn)
[05:48:08] *** Quits: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: Konversation terminated!)
[05:52:37] *** Joins: gggp__offline (~gggp@60.10.194.47)
[05:54:58] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:55:25] *** gggp__offline is now known as gggp
[05:55:44] *** Quits: gggp_ (~gggp@221.219.77.87) (Ping timeout: 258 seconds)
[06:04:23] *** Quits: foobaz (~oofabz@199.58.97.156) (Quit: ZNC 1.8.2 - https://znc.in)
[06:07:12] *** Joins: gggp_ (~gggp@60.10.194.47)
[06:10:40] *** Quits: gggp (~gggp@60.10.194.47) (Ping timeout: 265 seconds)
[06:13:19] *** Joins: gggp__offline (~gggp@60.10.194.47)
[06:15:42] *** Quits: gggp_ (~gggp@60.10.194.47) (Ping timeout: 252 seconds)
[06:18:00] *** Joins: ofh (~felix@193-119-114-166.tpgi.com.au)
[06:19:14] *** Quits: yelnah (~felix@2001:44b8:308c:9a:6f0:21ff:fe3c:d4d7) (Ping timeout: 255 seconds)
[06:20:44] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:27:47] *** Joins: gggp_ (~gggp@123.113.191.251)
[06:30:44] *** Quits: gggp__offline (~gggp@60.10.194.47) (Ping timeout: 252 seconds)
[06:39:35] *** Joins: ikeaviking (~ikeavikin@198.98.50.70)
[06:39:51] *** Joins: yelnah (~felix@14-200-21-102.static.tpgi.com.au)
[06:39:54] *** Quits: ofh (~felix@193-119-114-166.tpgi.com.au) (Ping timeout: 272 seconds)
[06:40:58] *** gggp_ is now known as gggp
[06:41:55] *** Quits: averell (~averell@irc.nf3.eu) (Quit: .)
[06:42:12] *** Joins: averell (~averell@user/averell)
[06:42:56] *** Joins: andlabs (~andlabs@71.190.119.164)
[06:44:01] *** Quits: cmagina (sid286142@user/cmagina) (Read error: Connection reset by peer)
[06:44:10] *** Joins: cmagina (sid286142@user/cmagina)
[06:46:58] *** Joins: Dime (~Berger_Ma@2601:642:4102:b1e0:ddc7:5311:d2e5:4c40)
[06:48:44] *** Joins: foobaz (~oofabz@199.58.97.156)
[06:53:09] *** Quits: amigan (dramoray@dtvax.dynatron.me) (Quit: WeeChat 3.2)
[06:58:10] *** Quits: steve__ (~steve@ool-18b99d28.dyn.optonline.net) (Ping timeout: 246 seconds)
[06:58:20] *** Joins: LKY (~Burger@76.102.85.231)
[07:01:06] *** Quits: Dime (~Berger_Ma@2601:642:4102:b1e0:ddc7:5311:d2e5:4c40) (Ping timeout: 240 seconds)
[07:01:10] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[07:06:10] *** Joins: gggp_ (~gggp@221.219.77.87)
[07:09:20] *** Quits: gggp (~gggp@123.113.191.251) (Ping timeout: 258 seconds)
[07:12:01] *** Quits: JPT (~jpt@classified.name) (Quit: Hoppla!)
[07:13:07] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[07:15:52] *** gggp_ is now known as gggp
[07:19:32] *** Quits: ikeaviking (~ikeavikin@198.98.50.70) (Quit: The Lounge - https://thelounge.chat)
[07:19:35] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[07:20:07] *** Joins: ikeaviking (~ikeavikin@198.98.50.70)
[07:20:54] *** Joins: JPT (~jpt@classified.name)
[07:29:29] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[07:33:43] *** Joins: Maxxed (~Maxxed@c-98-200-183-67.hsd1.tx.comcast.net)
[07:35:45] *** Joins: gggp_ (~gggp@60.10.194.47)
[07:38:28] *** Quits: gggp (~gggp@221.219.77.87) (Ping timeout: 258 seconds)
[07:40:14] *** Quits: gggp_ (~gggp@60.10.194.47) (Ping timeout: 255 seconds)
[07:45:22] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[07:47:22] *** Quits: edr (~edr@user/edr) (Ping timeout: 252 seconds)
[07:49:03] *** Joins: edr (~edr@enlo.co)
[07:49:03] *** Quits: edr (~edr@enlo.co) (Changing host)
[07:49:03] *** Joins: edr (~edr@user/edr)
[07:52:26] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[07:54:35] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[08:13:03] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[08:14:54] *** Quits: yelnah (~felix@14-200-21-102.static.tpgi.com.au) (Ping timeout: 272 seconds)
[08:18:03] *** Joins: yelnah (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7)
[08:19:43] *** Quits: LiftLeft (~LiftLeft@154.21.23.6) (Ping timeout: 265 seconds)
[08:22:24] *** Joins: iateadonut (~dan@121.177.17.154)
[08:22:28] *** Parts: iateadonut (~dan@121.177.17.154) ()
[08:22:45] *** Joins: iateadonut (~dan@121.177.17.154)
[08:24:47] *** Joins: reedrichards (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[08:26:35] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 255 seconds)
[08:26:35] *** reedrichards is now known as MrFantastik
[08:34:04] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Remote host closed the connection)
[08:34:50] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[08:36:14] *** Joins: darkapex (~darkapex@user/darkapex)
[08:40:56] *** Quits: LKY (~Burger@76.102.85.231) (Quit: Leaving)
[08:41:05] *** Joins: LKY (~Burger@76.102.85.231)
[08:44:28] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[08:44:44] *** Quits: LKY (~Burger@76.102.85.231) (Read error: Connection reset by peer)
[08:48:38] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Read error: Connection reset by peer)
[08:49:07] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[08:51:18] *** Joins: astropirate (~astropira@pool-108-48-24-121.washdc.fios.verizon.net)
[08:55:20] *** Parts: astropirate (~astropira@pool-108-48-24-121.washdc.fios.verizon.net) ()
[08:55:25] *** Joins: astropirate (~astropira@pool-108-48-24-121.washdc.fios.verizon.net)
[08:55:30] <astropirate> test
[08:55:37] <astropirate> What interface do I need to implement in my struct so that I can pass in my struct to a %f field in fmt.Fprintln()
[08:56:34] *** Quits: oxum (~oxum@136.185.133.224) (Remote host closed the connection)
[08:56:42] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 272 seconds)
[08:59:21] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[08:59:52] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Ping timeout: 272 seconds)
[09:01:11] *** Joins: gzj (~GZJ0X@199.193.127.73.16clouds.com)
[09:01:23] *** Quits: Maxxed (~Maxxed@c-98-200-183-67.hsd1.tx.comcast.net) (Quit: Client closed)
[09:03:27] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:03:36] *** Joins: oxum (~oxum@136.185.133.224)
[09:04:57] *** Joins: andlabs (~andlabs@71.190.119.164)
[09:08:24] *** Quits: oxum (~oxum@136.185.133.224) (Ping timeout: 252 seconds)
[09:09:29] *** Joins: oxum (~oxum@136.185.133.224)
[09:11:47] *** Quits: oxum (~oxum@136.185.133.224) (Remote host closed the connection)
[09:12:19] *** Joins: oxum (~oxum@136.185.133.224)
[09:14:17] *** Quits: oxum (~oxum@136.185.133.224) (Remote host closed the connection)
[09:18:24] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[09:19:14] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[09:19:28] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[09:24:01] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[09:25:02] *** Quits: vitalius (~vitaliy@97-115-83-213.ptld.qwest.net) (Ping timeout: 258 seconds)
[09:29:20] *** Quits: LtHummus_ (~lthummus@97-126-113-251.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:31:07] *** Quits: gzj (~GZJ0X@199.193.127.73.16clouds.com) (Remote host closed the connection)
[09:31:18] *** Joins: independent56 (~independe@95.144.68.40)
[09:31:21] *** Quits: jdrab (~jdrab@user/jdrab) (*.net *.split)
[09:31:21] *** Quits: popey (~popey@ubuntu/member/popey) (*.net *.split)
[09:31:21] *** Quits: pztrn (~pztrn@user/pztrn) (*.net *.split)
[09:31:21] *** Quits: jaguar (jag@maddshark.com) (*.net *.split)
[09:31:21] *** Quits: explodes (~explodes@user/explodes) (*.net *.split)
[09:31:21] *** Quits: diff (~diff@tilde.town) (*.net *.split)
[09:31:21] *** Quits: aarchi (sid486183@id-486183.highgate.irccloud.com) (*.net *.split)
[09:31:21] *** Quits: rudi_s (~simon@user/rudi-s/x-7673890) (*.net *.split)
[09:31:25] *** Joins: gzj (~GZJ0X@199.193.127.73.16clouds.com)
[09:31:29] *** Joins: pztrn_ (~pztrn@188.226.125.64)
[09:31:33] *** Joins: jdrab (~jdrab@2a03:4000:48:1a8:44c5:2fff:fe15:f20d)
[09:31:33] *** Joins: rudi_s_ (~simon@user/rudi-s/x-7673890)
[09:31:36] *** Joins: popey (~popey@ubuntu/member/popey)
[09:31:38] *** Quits: jdrab (~jdrab@2a03:4000:48:1a8:44c5:2fff:fe15:f20d) (Changing host)
[09:31:38] *** Joins: jdrab (~jdrab@user/jdrab)
[09:31:41] *** Joins: vitalius (~vitaliy@97-115-109-58.ptld.qwest.net)
[09:31:42] *** Joins: diff (~diff@tilde.town)
[09:31:45] *** Joins: aarchi (sid486183@id-486183.highgate.irccloud.com)
[09:31:45] *** Joins: explodes (~explodes@user/explodes)
[09:31:53] *** Quits: pztrn_ (~pztrn@188.226.125.64) (Client Quit)
[09:32:29] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[09:32:37] *** Joins: LtHummus (~lthummus@97-126-113-251.tukw.qwest.net)
[09:32:47] *** Joins: independent56 (~independe@95.144.68.40)
[09:33:00] *** Joins: jaguar (jag@maddshark.com)
[09:33:08] *** Joins: pztrn (~pztrn@user/pztrn)
[09:36:05] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Quit: Leaving)
[09:36:12] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (*.net *.split)
[09:36:12] *** Quits: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75) (*.net *.split)
[09:36:12] *** Quits: m-kad (~quassel@2a02:c207:2043:4525::1) (*.net *.split)
[09:36:12] *** Quits: devx (~devx@151.233.209.35.bc.googleusercontent.com) (*.net *.split)
[09:36:12] *** Quits: erri (~meow@52.8.199.178) (*.net *.split)
[09:36:12] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (*.net *.split)
[09:36:12] *** Quits: davzie (sid504337@id-504337.charlton.irccloud.com) (*.net *.split)
[09:36:12] *** Quits: yama_ (~yama@097-090-153-102.biz.spectrum.com) (*.net *.split)
[09:36:12] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[09:36:12] *** Quits: kzrl (~kzrl@149.28.171.210) (*.net *.split)
[09:36:12] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[09:36:12] *** Quits: chilversc (~chilversc@user/chilversc) (*.net *.split)
[09:36:12] *** Quits: sshow (~sshow@seven.hackeriet.no) (*.net *.split)
[09:36:12] *** Quits: bougyman (~bougyman@user/bougyman) (*.net *.split)
[09:36:12] *** Quits: hgl (hgl@67.230.181.248.16clouds.com) (*.net *.split)
[09:36:12] *** Quits: 074AABZX6 (Rhys@help.lux.melted.me) (*.net *.split)
[09:36:12] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[09:36:12] *** Quits: redlegion (sid429547@id-429547.charlton.irccloud.com) (*.net *.split)
[09:36:12] *** Quits: obviyus (sid415299@user/obviyus) (*.net *.split)
[09:36:12] *** Quits: telemachus (sid2004@id-2004.brockwell.irccloud.com) (*.net *.split)
[09:36:12] *** Quits: frobnitz (~ian@photon.remmler.org) (*.net *.split)
[09:36:12] *** Quits: lvlinux (~ruel@falcon.ruhnet.net) (*.net *.split)
[09:36:12] *** Quits: A_Dragon (A_D@doom-tower.awesome-dragon.science) (*.net *.split)
[09:36:12] *** Quits: sgarciapdx (~serge@irc.shork.io) (*.net *.split)
[09:36:12] *** Quits: danderson (~dave@tailscale/danderson) (*.net *.split)
[09:36:17] *** Joins: m-kad_ (~quassel@2a02:c207:2043:4525::1)
[09:36:19] *** Joins: Rhvs (Rhys@help.lux.melted.me)
[09:36:21] *** Joins: hgl- (hgl@67.230.181.248.16clouds.com)
[09:36:22] *** Joins: reenix- (~reenix@h2924837.stratoserver.net)
[09:36:22] *** Joins: davzie_ (sid504337@id-504337.charlton.irccloud.com)
[09:36:23] *** Joins: frobnitz_ (~ian@photon.remmler.org)
[09:36:23] *** Joins: ruel (~ruel@falcon.ruhnet.net)
[09:36:23] *** Joins: strudl (~strudl@tvarohova.strud.la)
[09:36:23] *** Quits: strudl (~strudl@tvarohova.strud.la) (Excess Flood)
[09:36:24] *** Joins: yama_ (~yama@097-090-153-102.biz.spectrum.com)
[09:36:26] *** Joins: redlegion (sid429547@id-429547.charlton.irccloud.com)
[09:36:27] *** Joins: devx (~devx@151.233.209.35.bc.googleusercontent.com)
[09:36:33] *** Joins: A_D (A_D@doom-tower.awesome-dragon.science)
[09:36:35] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[09:36:36] *** Joins: telemachus (sid2004@id-2004.brockwell.irccloud.com)
[09:36:36] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[09:36:43] *** Joins: chilversc (~chilversc@user/chilversc)
[09:36:47] *** Joins: danderson (~dave@63.81.90.235)
[09:36:48] *** Joins: kzrl (~kzrl@149.28.171.210)
[09:36:48] *** Joins: n1000 (~n1000@c-71-198-186-244.hsd1.ca.comcast.net)
[09:36:52] *** Joins: strudl (~strudl@tvarohova.strud.la)
[09:36:52] *** Joins: sshow (~sshow@seven.hackeriet.no)
[09:36:52] *** Quits: strudl (~strudl@tvarohova.strud.la) (Excess Flood)
[09:36:52] *** Joins: bougyman_ (~bougyman@user/bougyman)
[09:36:56] *** Joins: erri (~meow@52.8.199.178)
[09:36:56] *** Quits: n1000 (~n1000@c-71-198-186-244.hsd1.ca.comcast.net) (Changing host)
[09:36:56] *** Joins: n1000 (~n1000@user/n1000)
[09:36:58] *** Joins: sgarciapdx (~serge@irc.shork.io)
[09:37:03] *** Joins: obviyus (sid415299@user/obviyus)
[09:37:03] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:37:22] *** Joins: strudl (~strudl@user/strudl)
[09:37:22] *** Quits: strudl (~strudl@user/strudl) (Excess Flood)
[09:38:04] *** Joins: strudl (~strudl@user/strudl)
[09:38:05] *** Quits: strudl (~strudl@user/strudl) (Excess Flood)
[09:38:24] *** Joins: strudl (~strudl@user/strudl)
[09:38:24] *** Quits: strudl (~strudl@user/strudl) (Excess Flood)
[09:38:54] *** Joins: strudl (~strudl@user/strudl)
[09:38:54] *** Quits: strudl (~strudl@user/strudl) (Excess Flood)
[09:39:16] *** Joins: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net)
[09:39:22] *** Joins: strudl (~strudl@user/strudl)
[09:39:22] *** Quits: strudl (~strudl@user/strudl) (Excess Flood)
[09:39:52] *** Joins: strudl (~strudl@user/strudl)
[09:39:52] *** Quits: strudl (~strudl@user/strudl) (Excess Flood)
[09:40:24] *** Joins: strudl (~strudl@user/strudl)
[09:40:25] *** Quits: strudl (~strudl@user/strudl) (Excess Flood)
[09:40:51] *** Joins: oxum (~oxum@136.185.133.224)
[09:40:56] *** Joins: strudl (~strudl@user/strudl)
[09:41:25] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[09:41:25] *** Quits: avery (sid501608@2001:67c:2f08:1::7:a768) (*.net *.split)
[09:41:25] *** Quits: stigz (sid371747@id-371747.tinside.irccloud.com) (*.net *.split)
[09:41:25] *** Quits: theckman (sid295081@user/theckman) (*.net *.split)
[09:41:25] *** Quits: erani (erani@kapsi.fi) (*.net *.split)
[09:41:25] *** Quits: pulec (~pulec@user/pulec) (*.net *.split)
[09:41:25] *** Quits: jsvcycling (sid369784@id-369784.highgate.irccloud.com) (*.net *.split)
[09:41:25] *** Quits: pl (sid98063@id-98063.brockwell.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: jimcroft_____ (sid148498@id-148498.highgate.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: derfj (sid19429@id-19429.tinside.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: nescafe1001 (sid211018@id-211018.tinside.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: Anderson-D (sid146635@id-146635.tinside.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: shrub (sid500598@user/psb) (*.net *.split)
[09:41:26] *** Quits: feuerrot (~feuerrot@shells.chaosdorf.de) (*.net *.split)
[09:41:26] *** Quits: vds (sid12483@id-12483.brockwell.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: meinside (uid24933@id-24933.brockwell.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (*.net *.split)
[09:41:26] *** Quits: jakesyl (sid56879@id-56879.stonehaven.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: merpnderp (sid16744@id-16744.stonehaven.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: jzelinskie (sid17772@id-17772.stonehaven.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: cespare (sid330206@stonehaven.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: dan- (~d@ircdocs/dan-) (*.net *.split)
[09:41:26] *** Quits: witcher (~witcher@static.74.224.203.116.clients.your-server.de) (*.net *.split)
[09:41:26] *** Quits: jiqiren (~jiqiren@oh-hi.org) (*.net *.split)
[09:41:26] *** Quits: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f) (*.net *.split)
[09:41:26] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[09:41:26] *** Quits: tristero (~nobody@user/tristero) (*.net *.split)
[09:41:26] *** Quits: twaapo (~twaapo@91-152-242-177.elisa-laajakaista.fi) (*.net *.split)
[09:41:26] *** Quits: itok (sid418430@id-418430.charlton.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: dozn (uid249292@user/dozn) (*.net *.split)
[09:41:26] *** Quits: koolazer (~koo@212.47.237.37) (*.net *.split)
[09:41:26] *** Quits: seds (sid492514@user/seds) (*.net *.split)
[09:41:26] *** Quits: CrunchyChewie (~CrunchyCh@user/crunchychewie) (*.net *.split)
[09:41:31] *** Joins: jimcroft______ (sid148498@id-148498.highgate.irccloud.com)
[09:41:34] *** Joins: theckman_ (sid295081@user/theckman)
[09:41:34] *** Joins: meinside_ (uid24933@id-24933.brockwell.irccloud.com)
[09:41:34] *** Joins: zopsi_ (~zopsi@irc.dir.ac)
[09:41:34] *** Joins: pulec_ (~pulec@37-97-160-172.colo.transip.net)
[09:41:35] *** Joins: feuerrot (~feuerrot@shells.chaosdorf.de)
[09:41:39] *** Joins: erani (erani@kapsi.fi)
[09:41:40] *** Joins: koolazer (~koo@user/koolazer)
[09:41:48] *** Joins: avery (sid501608@id-501608.highgate.irccloud.com)
[09:41:48] *** Joins: jiqiren (~jiqiren@oh-hi.org)
[09:41:52] *** Joins: pl (sid98063@id-98063.brockwell.irccloud.com)
[09:41:56] *** Joins: twaapo (glxblt@91-152-242-177.elisa-laajakaista.fi)
[09:41:59] *** Joins: vds (sid12483@2001:67c:2f08:5::30c3)
[09:42:00] *** Joins: tristero (~nobody@pool-71-112-165-78.pitbpa.fios.verizon.net)
[09:42:14] *** Joins: Anderson-D (sid146635@id-146635.tinside.irccloud.com)
[09:42:20] *** Quits: tristero (~nobody@pool-71-112-165-78.pitbpa.fios.verizon.net) (Changing host)
[09:42:20] *** Joins: tristero (~nobody@user/tristero)
[09:42:21] *** Joins: itok (sid418430@2001:67c:2f08:3::6:627e)
[09:42:21] *** Joins: dozn (uid249292@2001:67c:2f08:5::3:cdcc)
[09:42:23] *** Joins: shrub (sid500598@id-500598.charlton.irccloud.com)
[09:42:25] *** Joins: stigz (sid371747@id-371747.tinside.irccloud.com)
[09:42:27] *** Joins: jzelinskie (sid17772@id-17772.stonehaven.irccloud.com)
[09:42:29] *** Joins: nescafe1001 (sid211018@id-211018.tinside.irccloud.com)
[09:42:29] *** Joins: derfj (sid19429@id-19429.tinside.irccloud.com)
[09:42:29] *** Joins: sa (sid1055@2a03:5180:f::41f)
[09:42:29] *** Quits: shrub (sid500598@id-500598.charlton.irccloud.com) (Changing host)
[09:42:29] *** Joins: shrub (sid500598@user/psb)
[09:42:30] *** Joins: merpnderp (sid16744@id-16744.stonehaven.irccloud.com)
[09:42:32] *** Quits: dozn (uid249292@2001:67c:2f08:5::3:cdcc) (Changing host)
[09:42:32] *** Joins: dozn (uid249292@user/dozn)
[09:42:33] *** Joins: jsvcycling (sid369784@id-369784.highgate.irccloud.com)
[09:42:35] *** Joins: seds (sid492514@2001:67c:2f08:5::7:83e2)
[09:42:42] *** Joins: alip (~alip@chesswob.org)
[09:42:46] *** Quits: seds (sid492514@2001:67c:2f08:5::7:83e2) (Changing host)
[09:42:46] *** Joins: seds (sid492514@user/seds)
[09:42:47] *** Joins: cespare (sid330206@stonehaven.irccloud.com)
[09:42:51] *** Joins: mustafa (sid502723@stonehaven.irccloud.com)
[09:42:53] *** Quits: alip (~alip@chesswob.org) (Changing host)
[09:42:53] *** Joins: alip (~alip@exherbo/developer/alip)
[09:42:54] *** Quits: oxum (~oxum@136.185.133.224) (Remote host closed the connection)
[09:42:55] *** Quits: mustafa (sid502723@stonehaven.irccloud.com) (Changing host)
[09:42:55] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[09:43:01] *** Joins: jakesyl (sid56879@stonehaven.irccloud.com)
[09:43:04] *** Joins: CrunchyChewie (~CrunchyCh@user/crunchychewie)
[09:43:05] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[09:43:05] *** Joins: dan- (~d@ircdocs/dan-)
[09:43:07] *** Joins: witcher (~witcher@2a01:4f8:c2c:711c::1)
[09:43:40] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (Client Quit)
[09:43:51] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[09:44:37] *** Joins: Ekho (~Ekho@user/ekho)
[09:44:57] *** Quits: Patater (~patater@patater.com) (*.net *.split)
[09:44:57] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[09:44:58] *** Quits: thinkofher (uid503725@user/thinkofher) (*.net *.split)
[09:44:58] *** Quits: Schoentoon (~Schoentoo@schoentoon.com) (*.net *.split)
[09:44:58] *** Quits: Xu_R (~dev-dsk-x@user/xu-r/x-9187770) (*.net *.split)
[09:44:58] *** Quits: michele (~eraser@user/michele) (*.net *.split)
[09:44:58] *** Quits: Shrike (sid305680@id-305680.brockwell.irccloud.com) (*.net *.split)
[09:44:58] *** Quits: kori (kori@user/kori) (*.net *.split)
[09:44:58] *** Quits: dkeohane (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[09:44:58] *** Quits: dale (dale@user/dale) (*.net *.split)
[09:44:58] *** Quits: r0bby (r0bby@user/r0bby) (*.net *.split)
[09:44:58] *** Quits: nj (nicholas@stop.disconnecting.me) (*.net *.split)
[09:44:58] *** Quits: tnez (~el@user/tnez) (*.net *.split)
[09:44:58] *** Quits: KBme (~KBme@ra.ndom.dev) (*.net *.split)
[09:44:58] *** Quits: Fossil (~Fossil@95.85.23.165) (*.net *.split)
[09:44:58] *** Quits: wnd (wnd@extirc.katei.fi) (*.net *.split)
[09:44:58] *** Quits: qzio (~qzio@198.167.223.200) (*.net *.split)
[09:44:58] *** Quits: SmokedCheese (nyoroon@2a01:7e01::f03c:91ff:fed1:d9ef) (*.net *.split)
[09:44:58] *** Quits: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) (*.net *.split)
[09:44:58] *** Quits: pjs (~pjs@user/pjs) (*.net *.split)
[09:44:58] *** Quits: qaisjp (sid26374@user/qaisjp) (*.net *.split)
[09:44:58] *** Quits: cooper (~mitchell@user/cooper) (*.net *.split)
[09:44:58] *** Rhvs is now known as Rhys
[09:45:07] *** Joins: lithamme- (~lithammer@2a02:2770::21a:4aff:fe88:c18d)
[09:45:08] *** Joins: pjs (~pjs@user/pjs)
[09:45:09] *** Joins: qzio (~qzio@198.167.223.200)
[09:45:11] *** Joins: wnd (wnd@extirc.katei.fi)
[09:45:11] *** Joins: SmokedCheese (~nyoroon@li1825-72.members.linode.com)
[09:45:12] *** Joins: kori (kori@2600:3c00::f03c:92ff:feb4:be75)
[09:45:27] *** Joins: cooper (~mitchell@205.185.116.128)
[09:45:31] *** Joins: r0bby (r0bby@id-699.highgate.irccloud.com)
[09:45:35] *** Joins: tnez (~el@51.158.161.58)
[09:45:39] *** Quits: r0bby (r0bby@id-699.highgate.irccloud.com) (Changing host)
[09:45:39] *** Joins: r0bby (r0bby@user/r0bby)
[09:45:45] *** Quits: cooper (~mitchell@205.185.116.128) (Signing in (cooper))
[09:45:45] *** Joins: cooper (~mitchell@user/cooper)
[09:45:48] *** Quits: tnez (~el@51.158.161.58) (Changing host)
[09:45:48] *** Joins: tnez (~el@user/tnez)
[09:45:49] *** Joins: qaisjp (sid26374@id-26374.tooting.irccloud.com)
[09:45:51] *** Joins: Shrike (sid305680@id-305680.brockwell.irccloud.com)
[09:45:55] *** Quits: qaisjp (sid26374@id-26374.tooting.irccloud.com) (Changing host)
[09:45:55] *** Joins: qaisjp (sid26374@user/qaisjp)
[09:46:00] *** Joins: Schoentoon (~Schoentoo@schoentoon.com)
[09:46:02] *** Joins: dale (dale@2600:3c02::f03c:92ff:feb4:61d1)
[09:46:04] *** Quits: dale (dale@2600:3c02::f03c:92ff:feb4:61d1) (Changing host)
[09:46:04] *** Joins: dale (dale@user/dale)
[09:46:12] *** Joins: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001)
[09:46:14] *** Joins: Patater (~patater@patater.com)
[09:46:17] *** Joins: thinkofher (sid503725@user/thinkofher)
[09:46:21] *** Joins: KBme (~KBme@ra.ndom.dev)
[09:46:23] *** Joins: michele (~eraser@user/michele)
[09:46:23] *** Joins: southey (~foxtrot@user/foxtrot)
[09:47:01] *** Joins: dkeohane (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[09:47:03] *** Joins: nj (nicholas@stop.disconnecting.me)
[09:47:16] *** Quits: vitalius (~vitaliy@97-115-109-58.ptld.qwest.net) (Quit: leaving)
[09:51:50] *** rudi_s_ is now known as rudi_s
[09:54:09] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[10:00:59] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[10:01:18] *** Joins: independent56 (~independe@95.144.68.40)
[10:02:29] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[10:03:00] <sztanpet> astropirate if there is such an interface, it will be documented on https://golang.org/pkg/fmt/
[10:05:08] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 255 seconds)
[10:07:07] *** Quits: gzj (~GZJ0X@199.193.127.73.16clouds.com) (Remote host closed the connection)
[10:07:26] *** Joins: gzj (~GZJ0X@199.193.127.73.16clouds.com)
[10:14:06] <b0nn> does an interface get satisfied for %f?
[10:14:11] <b0nn> https://github.com/golang/go/blob/ab4085ce84f8378b4ec2dfdbbc44c98cb92debe5/src/fmt/format.go#L490
[10:14:16] *** Quits: iateadonut (~dan@121.177.17.154) (Quit: Leaving.)
[10:15:59] *** Joins: shka (~herr@109.231.62.239)
[10:22:33] *** Joins: newbie (~kvirc@94.41.39.59.dynamic.ufanet.ru)
[10:22:53] *** Joins: oxum (~oxum@136.185.133.224)
[10:24:52] *** Quits: oxum (~oxum@136.185.133.224) (Remote host closed the connection)
[10:25:06] *** Joins: oxum (~oxum@136.185.133.224)
[10:25:56] *** Quits: oxum (~oxum@136.185.133.224) (Remote host closed the connection)
[10:26:37] *** Quits: newbie (~kvirc@94.41.39.59.dynamic.ufanet.ru) (Read error: Connection reset by peer)
[10:29:05] *** Joins: oxum (~oxum@136.185.133.224)
[10:30:44] *** Quits: oxum (~oxum@136.185.133.224) (Remote host closed the connection)
[10:31:52] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:43:23] *** Joins: steve__ (~steve@ool-18b99d28.dyn.optonline.net)
[10:43:24] *** Joins: oxum (~oxum@136.185.133.224)
[10:44:03] *** Joins: hikhvar796 (~thelounge@x4db53d66.dyn.telefonica.de)
[10:46:40] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 252 seconds)
[10:48:09] *** Quits: oxum (~oxum@136.185.133.224) (Ping timeout: 255 seconds)
[10:49:33] *** Quits: alyx (alyx@atheme/alyx) (Quit: Ping timeout (120 seconds))
[10:50:06] *** Joins: alyx (alyx@atheme/alyx)
[10:50:09] *** Quits: gzj (~GZJ0X@199.193.127.73.16clouds.com) (Remote host closed the connection)
[10:50:28] *** Joins: gzj (~GZJ0X@199.193.127.73.16clouds.com)
[10:50:35] *** Quits: dove (~jordan@li1158-85.members.linode.com) (Quit: bye o/)
[10:50:44] *** Joins: dove (~jordan@li1158-85.members.linode.com)
[10:51:09] *** Quits: gzj (~GZJ0X@199.193.127.73.16clouds.com) (Remote host closed the connection)
[10:51:28] *** Joins: gzj (~GZJ0X@199.193.127.73.16clouds.com)
[10:51:36] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[10:58:38] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[11:00:41] *** Joins: cnf3 (~cnf@d5152daf0.static.telenet.be)
[11:01:37] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Read error: Connection reset by peer)
[11:01:37] *** cnf3 is now known as cnf
[11:03:47] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[11:11:05] *** Joins: arinov (~arinov@213.194.126.155)
[11:13:54] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[11:16:31] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[11:17:25] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[11:18:56] *** Quits: g2anj (~v@221.142.186.101) (Ping timeout: 252 seconds)
[11:20:46] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[11:21:36] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:26:22] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:4084:53c5:5722:97ae) (Ping timeout: 246 seconds)
[11:34:41] *** Joins: josta (~josta@68.235.36.104)
[11:34:47] *** Quits: josta (~josta@68.235.36.104) (Client Quit)
[11:35:00] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:35:08] *** Joins: josta (~josta@23.226.133.88)
[11:37:36] *** Joins: g2anj (~v@221.142.186.101)
[11:37:48] <sztanpet> no
[11:38:09] *** Quits: josta (~josta@23.226.133.88) (Client Quit)
[11:40:37] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:4084:53c5:5722:97ae)
[11:41:00] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.1)
[11:45:01] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[11:48:09] *** Joins: lehmrob (~rd7@p54be8dfe.dip0.t-ipconnect.de)
[11:51:10] *** Quits: gzj (~GZJ0X@199.193.127.73.16clouds.com) (Read error: Connection reset by peer)
[11:51:29] *** Joins: gzj (~GZJ0X@199.193.127.73.16clouds.com)
[11:51:53] *** Joins: mrig (~mrig@user/mrig)
[11:54:08] *** Quits: morgan (~morgan@user/morgan) (Ping timeout: 252 seconds)
[11:57:34] *** Joins: Garb0 (~Garb0@user/garb0)
[12:05:30] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:06:34] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Remote host closed the connection)
[12:10:30] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 255 seconds)
[12:16:36] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[12:21:00] *** Quits: Garb0 (~Garb0@user/garb0) (Read error: Connection reset by peer)
[12:21:13] *** Joins: Garb0 (~Garb0@user/garb0)
[12:23:09] *** Joins: arthur (~arthur@91.135.14.14)
[12:23:57] *** Joins: goldfish (~goldfish@user/goldfish)
[12:24:23] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[12:24:29] *** Joins: arinov (~arinov@213.194.126.155)
[12:25:23] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[12:28:34] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[12:33:31] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Remote host closed the connection)
[12:38:30] *** Quits: gwd (~gwd@xenbits.xenproject.org) (Read error: Connection reset by peer)
[12:40:12] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 255 seconds)
[12:41:07] *** Joins: tsv (~tsv@host-176-37-170-44.b025.la.net.ua)
[12:41:17] *** Quits: tsv (~tsv@host-176-37-170-44.b025.la.net.ua) (Remote host closed the connection)
[12:41:53] *** Joins: tsv (~stsimbaly@host-176-37-170-44.b025.la.net.ua)
[12:42:01] *** Quits: tsv (~stsimbaly@host-176-37-170-44.b025.la.net.ua) (Remote host closed the connection)
[12:42:10] *** Quits: jespada (~jespada@90.254.247.46) (Ping timeout: 272 seconds)
[12:44:09] *** Joins: jespada (~jespada@90.254.247.46)
[12:46:11] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[12:46:41] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[12:50:01] *** Joins: sizeof_void34 (~Thunderbi@109-252-76-37.nat.spd-mgts.ru)
[13:01:08] *** Quits: gzj (~GZJ0X@199.193.127.73.16clouds.com) (Remote host closed the connection)
[13:01:27] *** Joins: gzj (~GZJ0X@199.193.127.73.16clouds.com)
[13:03:54] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[13:04:40] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[13:12:54] *** Quits: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net) (Quit: Connection closed)
[13:16:50] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 255 seconds)
[13:17:20] *** Joins: Giedrius (~giedrius@5.133.65.65)
[13:37:37] *** Parts: pulec_ (~pulec@37-97-160-172.colo.transip.net) ()
[13:38:27] *** Quits: gpeskens[w] (~gpeskens@94-209-53-75.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[13:38:44] *** Joins: gpeskens[w] (~gpeskens@94-209-53-75.cable.dynamic.v4.ziggo.nl)
[13:39:01] *** Joins: pulec (~pulec@user/pulec)
[13:39:56] *** Quits: a1paca (~a1paca@user/a1paca) (Quit: ZNC 1.8.2 - https://znc.in)
[13:40:15] *** Joins: a1paca (~a1paca@user/a1paca)
[13:53:55] <rannnn8888> how i can keep if return error and not stop the srcript ? https://dpaste.org/oik3#L120
[13:56:22] <Cork> rannnn8888: you mean not exit the function?
[13:57:02] <Cork> also what return are you having problem with?
[13:57:58] *** Joins: astropirate_ (~astropira@86.106.143.190)
[13:58:11] <rannnn8888> Cork now if have a error example "connection failed because connected host has failed to respond." it return the error i want
[13:58:23] <rannnn8888> Ignore it and return the page it was successful
[14:00:39] *** Quits: astropirate (~astropira@pool-108-48-24-121.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[14:02:06] *** Quits: gpeskens[w] (~gpeskens@94-209-53-75.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[14:02:23] *** Joins: gpeskens[w] (~gpeskens@94-209-53-75.cable.dynamic.v4.ziggo.nl)
[14:04:09] <Cork> so just check the error state and ignore it in the function getting it (i'm guessing sendUser)
[14:04:28] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[14:06:21] *** Joins: Ohlov31153402 (~Ohlov3@dyndsl-085-016-153-105.ewe-ip-backbone.de)
[14:07:48] *** Joins: jjonah (~jjonah@p200300d5d72a9300dea632fffeb3342f.dip0.t-ipconnect.de)
[14:09:48] *** Quits: Ohlov3115340 (~Ohlov3@dyndsl-091-248-238-014.ewe-ip-backbone.de) (Ping timeout: 252 seconds)
[14:12:45] <rannnn8888>  if result.err != nil {
[14:12:45] <rannnn8888>             // return early. done channel is closed, thus input channel is also closed.
[14:12:46] <rannnn8888>             // all worker goroutines stop working (because input channel is closed)
[14:12:46] <rannnn8888>             return nil, result.err
[14:12:47] <rannnn8888>         }
[14:13:01] <rannnn8888> Cork or its remove this ?
[14:13:45] <Cork> rannnn8888: you have to check where you return the error your after, can't help you with the limited information you've given
[14:14:30] <Cork> and you prob don't want to skip checking for errors completely, and instead just whitelist the errors you find ok
[14:14:45] <Cork> but again, just guessing
[14:17:04] <rannnn8888> Cork ok i only want cheack the the time take him to return 3000 site , i make same script in python and here i take me 2 min
[14:17:38] <rannnn8888> in python 45 sec It should not be faster than a python ?
[14:18:09] *** Quits: gzj (~GZJ0X@199.193.127.73.16clouds.com) (Remote host closed the connection)
[14:18:28] *** Joins: gzj (~GZJ0X@199.193.127.73.16clouds.com)
[14:18:43] *** Joins: torin (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net)
[14:18:44] *** Joins: Garb0 (~Garb0@user/garb0)
[14:19:09] *** Quits: gzj (~GZJ0X@199.193.127.73.16clouds.com) (Remote host closed the connection)
[14:19:28] *** Joins: gzj (~GZJ0X@199.193.127.73.16clouds.com)
[14:22:32] <torin> hey guys, quick question. got this code for small echo udp server: https://paste.rs/br4.go - i was wondering if there's a way to close the connection for the client as it doesn't do that after doing: echo x | nc -u server 9300
[14:23:35] *** Joins: josta (~josta@68.235.36.110)
[14:24:53] <b0nn> Sorry, does a UDP service manage the session on a client?
[14:25:52] <torin> i don't think so :) and that's what i was afraid of, thought maybe there would be 'a way' to hack it somehow maybe. the only thing that comes to my mind, literally just close the connection for that milisecond and restart server.
[14:26:44] <b0nn> UDP is a simple transport-layer protocol. ... Each UDP datagram is characterized by a length. The length of a datagram is passed to the receiving application along with the data. No connection is established between the client and the server and, for this reason, we say that UDP provides a connection-less service.
[14:27:22] *** Joins: Garb00 (~Garb0@user/garb0)
[14:30:04] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 272 seconds)
[14:30:10] <torin> So pretty much no :)
[14:30:49] <siXy> torin: What are you _really_ trying to do?
[14:31:44] *** Quits: DM43078 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[14:32:33] <torin> siXy: pretty much, i'm annoyed that i have to cltr+c with nc example and wanted to avoid that so it would close automatically.
[14:33:32] *** Quits: josta (~josta@68.235.36.110) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:34:41] *** Quits: Garb00 (~Garb0@user/garb0) (Read error: Connection reset by peer)
[14:36:39] <siXy> torin: -q 0
[14:36:43] *** Joins: josta (~josta@68.235.36.108)
[14:36:59] <siXy> add that to your nc options - it means wait 0 seconds after sending then quit.
[14:37:17] <torin> oh! duh! thanks dude :)
[14:37:29] <siXy> np :)
[14:38:25] *** Quits: josta (~josta@68.235.36.108) (Client Quit)
[14:39:42] *** Joins: josta (~josta@23.226.133.69)
[14:41:27] *** Quits: josta (~josta@23.226.133.69) (Client Quit)
[14:44:50] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Read error: Connection reset by peer)
[14:45:08] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[14:48:39] *** harley_l is now known as losinggeneration
[14:49:19] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[15:00:16] *** Joins: DM430784 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[15:02:28] <torin> ah right, so gave it a go. the problem with -q it won't display the message udp server gives back
[15:03:09] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:04:49] <siXy> well you can set it to 1 then if your server is close enough
[15:05:00] <siXy> there's probably an option to quit after first reply too, check man nc
[15:05:25] <siXy> I have never bothered to memorise nc's manpage :)
[15:07:29] <torin> ah, just got it. -W 1
[15:08:04] *** Quits: lehmrob (~rd7@p54be8dfe.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[15:08:08] <torin> thanks.
[15:12:18] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 255 seconds)
[15:12:20] *** Quits: gzj (~GZJ0X@199.193.127.73.16clouds.com) (Remote host closed the connection)
[15:15:56] *** Joins: gzj (~GZJ0X@199.193.127.73.16clouds.com)
[15:17:59] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[15:27:12] *** Quits: gst (~gst@gateway/tor-sasl/gst) (Remote host closed the connection)
[15:27:32] *** Joins: gst (~gst@gateway/tor-sasl/gst)
[15:33:58] *** A_D is now known as A_Dragon
[15:42:53] *** Joins: frost (~frost@59.71.241.179)
[15:48:18] *** Joins: andlabs (~andlabs@71.190.119.164)
[15:50:52] *** Joins: lehmrob (~rd7@p54be8dfe.dip0.t-ipconnect.de)
[15:56:58] *** Joins: Crassus (~Crassus@user/crassus)
[16:02:15] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 255 seconds)
[16:09:31] *** Joins: gggp (~gggp@123.113.178.134)
[16:17:33] *** Joins: cassio (~cassio@189.112.88.20)
[16:17:59] *** Joins: yoonkn (~user@175.197.208.79)
[16:20:11] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1005.inf6.spectrum.com)
[16:22:30] *** Joins: arinov (~arinov@213.194.126.155)
[16:22:49] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[16:31:13] <cp-> is anyone using the https://pkg.go.dev/golang.org/x/crypto/ssh and https://github.com/google/goexpect
[16:32:30] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 244 seconds)
[16:32:40] *** Joins: Torr (~Torr@user/torr)
[16:32:47] <cp-> I got a strange problem where sometimes I do not get the output of a command
[16:32:48] *** Joins: teasea6 (~teasea@user/teasea)
[16:32:52] <cp-> in full
[16:33:17] <cp-> probably me doing something wrong, and I wonder if there is a need for wait() somewhere ?
[16:33:32] *** Quits: ninjin (~ninjin@user/ninjin) (Ping timeout: 244 seconds)
[16:33:40] *** Quits: teasea (~teasea@user/teasea) (Read error: Connection reset by peer)
[16:33:40] *** teasea6 is now known as teasea
[16:34:03] *** Quits: gst (~gst@gateway/tor-sasl/gst) (Ping timeout: 244 seconds)
[16:34:03] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 244 seconds)
[16:34:03] *** Quits: thing (~thing@user/thing) (Ping timeout: 244 seconds)
[16:34:12] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[16:35:07] *** Joins: mickey (~user@user/mickey)
[16:35:09] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[16:35:13] *** Joins: ninjin (~ninjin@user/ninjin)
[16:35:22] *** Joins: thing (~thing@user/thing)
[16:36:15] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:37:18] *** Joins: gst (~gst@gateway/tor-sasl/gst)
[16:38:35] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[16:38:48] *** Joins: tg (~tg@rockylinux/infra/tg)
[16:40:46] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 244 seconds)
[16:41:49] *** Joins: mrig (~mrig@user/mrig)
[16:42:03] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:45:05] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Quit: WeeChat 3.1)
[16:49:04] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:50:49] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[16:54:06] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[16:56:42] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Ping timeout: 255 seconds)
[16:57:10] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 256 seconds)
[16:57:19] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:58:19] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[16:58:53] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[17:02:18] *** Joins: eduardas (~eduardas@93.93.57.5)
[17:05:01] *** Quits: src (~src@user/src) (Quit: leaving)
[17:05:15] *** Quits: gzj (~GZJ0X@199.193.127.73.16clouds.com) (Ping timeout: 255 seconds)
[17:05:52] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 246 seconds)
[17:07:06] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[17:07:19] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[17:18:08] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 256 seconds)
[17:20:01] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[17:31:06] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:31:34] *** Joins: andlabs (~andlabs@71.190.119.164)
[17:38:15] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[17:42:30] *** Quits: hikhvar796 (~thelounge@x4db53d66.dyn.telefonica.de) (Ping timeout: 256 seconds)
[17:42:35] *** Quits: jjonah (~jjonah@p200300d5d72a9300dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:43:57] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:4084:53c5:5722:97ae) (Ping timeout: 255 seconds)
[17:49:42] *** Joins: iateadonut (~dan@121.177.17.154)
[17:49:44] *** Parts: iateadonut (~dan@121.177.17.154) ()
[17:51:12] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:53:54] *** Quits: gggp (~gggp@123.113.178.134) (Read error: Connection reset by peer)
[17:54:24] *** Quits: ikke (~kevin@alpine/developer/ikke) (Ping timeout: 265 seconds)
[17:56:10] *** Quits: Xjs (~jannis@user/xjs) (Quit: Bye.)
[17:56:34] *** Joins: Xjs (~jannis@user/xjs)
[17:56:40] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 256 seconds)
[17:58:22] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 256 seconds)
[17:58:28] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[18:03:20] *** Joins: oxum (~oxum@136.185.133.224)
[18:08:00] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 256 seconds)
[18:09:25] *** Joins: gggpkm (~gggpkm@123.113.178.134)
[18:12:02] *** Joins: jackneill (~jackneill@20014C4E1823FF0045F2A0A60407A58E.unconfigured.pool.telekom.hu)
[18:12:10] <jackneill> hey
[18:12:32] *** Quits: oxum (~oxum@136.185.133.224) (Ping timeout: 256 seconds)
[18:12:39] <jackneill> is there a lib/how woudl you architect an 1 Send() N Receive() object/type?
[18:12:58] <jackneill> idiomatically
[18:13:38] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 272 seconds)
[18:13:57] <mikoto-chan> why can I print the type url.URL but not concatenate it with another string?
[18:14:49] <mikoto-chan> https://play.golang.org/p/cim6i3z1tGg
[18:15:38] <mikoto-chan> my bad, there is a method to convert this thing
[18:15:51] <siXy> jackneill: Have you read https://blog.golang.org/pipelines ?
[18:15:51] *** Joins: josta (~josta@23.226.133.90)
[18:16:27] <jackneill> siXy, i have not
[18:16:30] *** Joins: arinov (~arinov@213.194.126.155)
[18:17:10] <siXy> mikoto-chan: u.String() + "otherstring"
[18:17:14] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[18:17:27] *** Quits: cassio (~cassio@189.112.88.20) (Ping timeout: 276 seconds)
[18:18:38] <jackneill> thank you
[18:18:55] *** Joins: skeels (~singurty@103.10.28.141)
[18:19:03] <mikoto-chan> siXy: I have to stop asking questions without reading the documentation first :P
[18:19:22] *** Joins: edrocks (~Ed@user/edrocks)
[18:21:03] *** Joins: ikke (~kevin@alpine/developer/ikke)
[18:21:55] *** Joins: gggpkm_ (~gggpkm@221.219.76.239)
[18:24:10] *** Quits: gggpkm_ (~gggpkm@221.219.76.239) (Remote host closed the connection)
[18:24:26] *** Quits: gggpkm (~gggpkm@123.113.178.134) (Ping timeout: 256 seconds)
[18:26:02] *** Joins: iateadonut (~dan@99.136.252.138)
[18:31:05] *** Joins: andlabs (~andlabs@71.190.119.164)
[18:31:45] *** Quits: iateadonut (~dan@99.136.252.138) (Ping timeout: 276 seconds)
[18:34:11] *** Joins: gggp (~gggp@60.10.23.164)
[18:37:43] *** Joins: glennzw (~glennzw@212.187.183.33)
[18:38:23] *** Joins: gzj (~GZJ0X@199.193.127.73.16clouds.com)
[18:38:29] *** Quits: josta (~josta@23.226.133.90) (Quit: Textual IRC Client: www.textualapp.com)
[18:40:46] <glennzw> Hi all. This isn't really a go specific question, but I'm coding in Go and you're all smart people here. I have .docx word files with {{.Variables}} in them like {{.this}}. The problem is that when saving the document Word (sometimes) decides to insert proofing elements for spelling and grammar. Does anyone have experience programatically removing
[18:40:46] <glennzw> these? I'm playing whack-a-mole at the moment with search and replace.
[18:42:00] <glennzw> Here's an example file: https://bpa.st/YOYA  (search for FirstName, LastName, Email, TrackingURL to see the various combinations of the proofing being included)
[18:42:33] <glennzw> Sometimes the {{. is allowed, sometimes the junk gets inserted between the braces. Sometimes it's both spellStart and gramStart, sometimes just one.
[18:42:53] <glennzw> I feel like there's a big regex I could make... but getting a bit stuck
[18:46:21] <edrocks> glennzw https://stackoverflow.com/questions/387453/how-do-you-display-code-snippets-in-ms-word-preserving-format-and-syntax-highlig
[18:46:39] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[18:47:13] <edrocks> also if you are trying to merge the template variables in a word doc rather than just write them I believe word has some kind of merge variable/template system
[18:47:14] *** Joins: gggp_ (~gggp@60.10.23.164)
[18:47:44] *** Quits: gggp_ (~gggp@60.10.23.164) (Read error: Connection reset by peer)
[18:47:58] *** Joins: iateadonut (~dan@121.177.17.154)
[18:48:07] *** Joins: gggp_ (~gggp@221.219.79.180)
[18:48:42] *** Quits: gggp_ (~gggp@221.219.79.180) (Read error: Connection reset by peer)
[18:49:07] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 246 seconds)
[18:49:15] <glennzw> edrocks: Thanks that's very useful, and I'll encourage users to take that approach, but I'm sure some won't - I'd like to make this as fool proof as possible
[18:50:26] *** Joins: Jigsy (~Jigsy@user/jigsy)
[18:50:32] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:50:33] *** Quits: gggp (~gggp@60.10.23.164) (Ping timeout: 255 seconds)
[18:54:09] *** Joins: gggpkm (~gggpkm@60.10.23.164)
[18:56:26] *** Quits: gggpkm (~gggpkm@60.10.23.164) (Remote host closed the connection)
[18:58:13] *** Quits: gzj (~GZJ0X@199.193.127.73.16clouds.com) (Remote host closed the connection)
[18:58:25] *** Joins: gggpkm (~gggpkm@60.10.23.164)
[18:58:32] *** Joins: gzj (~GZJ0X@199.193.127.73.16clouds.com)
[19:00:53] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:02:53] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[19:04:19] *** Joins: cassio (~cassio@189.112.88.20)
[19:05:48] *** Joins: kulak (~kulak@user/kulak)
[19:05:52] *** Quits: gggpkm (~gggpkm@60.10.23.164) (Remote host closed the connection)
[19:06:50] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Ping timeout: 272 seconds)
[19:07:35] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[19:07:38] *** Joins: arcatech (~arcatech@user/arcatech)
[19:09:29] *** Quits: lehmrob (~rd7@p54be8dfe.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[19:10:38] *** Quits: skeels (~singurty@103.10.28.141) (Ping timeout: 272 seconds)
[19:10:51] *** Joins: gggp (~gggp@111.63.14.117)
[19:11:39] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[19:12:11] *** Quits: glennzw (~glennzw@212.187.183.33) (Quit: Client closed)
[19:12:19] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[19:16:36] *** Parts: iateadonut (~dan@121.177.17.154) ()
[19:16:40] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Quit: Client closed)
[19:17:06] *** Joins: morgan (~morgan@user/morgan)
[19:17:09] *** Joins: nef (~nef@user/nef)
[19:18:54] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 255 seconds)
[19:18:55] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:19:32] *** Joins: LiftLeft (~LiftLeft@154.21.28.20)
[19:22:12] *** Quits: gzj (~GZJ0X@199.193.127.73.16clouds.com) (Remote host closed the connection)
[19:22:31] *** Joins: gzj (~GZJ0X@199.193.127.73.16clouds.com)
[19:30:54] *** Quits: cassio (~cassio@189.112.88.20) (Ping timeout: 276 seconds)
[19:37:20] *** Joins: oxum (~oxum@136.185.133.224)
[19:39:56] *** Quits: nef (~nef@user/nef) (Quit: Leaving)
[19:41:29] <mikoto-chan> can I unmarshal JSON without declaring new structs to hold everything?
[19:41:53] <ikke> mikoto-chan: you can unmarshal it in to map[string]interface{}
[19:41:59] <ikke> or []interface{}
[19:42:05] <CommunistWolf> you might get some surprises though
[19:42:19] <CommunistWolf> especially with the numbers :S
[19:42:36] *** Quits: oxum (~oxum@136.185.133.224) (Ping timeout: 276 seconds)
[19:44:17] <siXy> mikoto-chan: yes but really really don't. Declare structs. Have real types. Doing otherwise leads to madness
[19:44:36] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:44:56] <CommunistWolf> you can do clever things with pre-initialized map[string]interface{} or []interface{}, mind
[19:45:07] <mikoto-chan> siXy: I just want to test something, anyway what's the correct declaration for map[string]interface{}?
[19:45:18] *** Joins: pepee (~user@user/pepee)
[19:45:22] <CommunistWolf> e.g. if you create a map[string]interface{}{"foo": int(0)}, it'll be more like you expect
[19:45:35] <CommunistWolf> anonymous structs are less trouble
[19:45:39] <mikoto-chan> I have json.Unmarshal(bytes, &"what do I enter here?")
[19:46:24] <siXy> mikoto-chan: Have you gone through tour.golang.org yet?
[19:46:40] <mikoto-chan> siXy: yes. 5 times by now.
[19:46:50] *** Quits: samf (~root@159.65.228.88) (Quit: WeeChat 1.9.1)
[19:47:53] *** Joins: samf (~root@159.65.228.88)
[19:48:12] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[19:48:44] <siXy> mikoto-chan: Then hopefully https://blog.golang.org/json should get you where you need
[19:51:55] *** Joins: gggp_ (~gggp@60.10.194.47)
[19:53:06] *** Quits: gggp_ (~gggp@60.10.194.47) (Remote host closed the connection)
[19:53:30] *** Joins: gggp_ (~gggp@60.10.23.164)
[19:54:27] *** A_Dragon is now known as ADragonIsDoing
[19:54:54] *** Quits: gzj (~GZJ0X@199.193.127.73.16clouds.com) (Ping timeout: 255 seconds)
[19:55:22] *** Quits: gggp_ (~gggp@60.10.23.164) (Read error: Connection reset by peer)
[19:55:36] *** Quits: gggp (~gggp@111.63.14.117) (Ping timeout: 276 seconds)
[19:59:03] *** ADragonIsDoing is now known as A_Dragon
[20:01:21] *** Joins: gggpkm (~gggpkm@60.10.23.164)
[20:01:33] *** Quits: gggpkm (~gggpkm@60.10.23.164) (Read error: Connection reset by peer)
[20:02:05] *** Joins: Xu_R (~dev-dsk-x@user/xu-r/x-9187770)
[20:02:06] *** Quits: arthur (~arthur@91.135.14.14) (Ping timeout: 255 seconds)
[20:02:36] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:02:52] *** Quits: arinov (~arinov@213.194.126.155) (Quit: Konversation terminated!)
[20:02:53] *** Joins: hposca (~hposca@node-1w7jr9phoke2ssp3k5wcuo3j9.ipv6.telus.net)
[20:03:10] *** Joins: arinov (~arinov@213.194.126.155)
[20:03:47] <mikoto-chan> CommunistWolf: I still don't understand map[string]interface{}{"foo": int(0)} after going through the gotour for the sixth time, making my own struct takes a pretty long time and it'd be a waste of your method would provide me with the correct values.
[20:06:14] <CommunistWolf>  map[string]interface{} is the type definition, {"foo": int(0)} is the initialization
[20:06:31] <CommunistWolf> i'm not going to break it down any further than that
[20:07:00] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Ping timeout: 256 seconds)
[20:07:52] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[20:15:27] *** Joins: independent56 (~independe@95.144.68.40)
[20:18:33] *** Joins: Snyp (~rksht@49.207.198.113)
[20:19:41] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:19:52] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[20:20:09] *** Joins: independent56 (~independe@95.144.68.40)
[20:20:11] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:9586:e553:1b49:b585)
[20:25:22] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[20:25:50] *** Quits: eduardas (~eduardas@93.93.57.5) (Quit: Konversation terminated!)
[20:27:15] *** Joins: Kane (~Kane@home.yarg.fr)
[20:30:18] *** Quits: Snyp (~rksht@49.207.198.113) (Quit: WeeChat 3.2)
[20:30:46] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[20:30:50] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[20:31:09] *** Joins: independent56 (~independe@95.144.68.40)
[20:31:18] *** Quits: Giedrius (~giedrius@5.133.65.65) (Remote host closed the connection)
[20:31:25] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 268 seconds)
[20:32:20] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[20:32:38] *** Joins: independent56 (~independe@95.144.68.40)
[20:41:24] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[20:41:34] *** Quits: LiftLeft (~LiftLeft@154.21.28.20) (Ping timeout: 256 seconds)
[20:47:38] *** Joins: nef (~nef@user/nef)
[20:47:47] <dostoyevsky2> If I am planning to keep a lot of struct in-memory, will go use memory as efficiently as C?  Or will go generally add a lot of internal data structures to each struct, so e.g. a struct with two int64 will use up a lot more than just 16 bytes
[20:53:57] <Tv_> dostoyevsky2: int64 is exactly 8 bytes, in general sanity prevails and it's incredibly easy to look at Go types and understand how they'll be laid out in memory
[20:55:07] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Quit: Leaving.)
[20:55:24] *** Joins: LiftLeft (~LiftLeft@154.21.114.70)
[20:55:29] <Tv_> dostoyevsky2: coming from a C background, you can really think of Go as a "modern C with good libraries, garbage collection and green threads", most of the assumptions coming from that will hold just fine
[20:56:50] <CommunistWolf> except for the bit where it eats your face without warning, anyway
[20:56:50] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:9586:e553:1b49:b585) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:58:22] <Tv_> dostoyevsky2: some things are just elevated to language constructs with internals protected to make them less footgun-like, e.g. slices are just a struct of {data pointer, len, cap}; interfaces are just a struct of two pointers {type, data} (where value behind type is constructed by compiler for every type as needed), maps are just a hash table
[21:02:00] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:04:20] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[21:04:39] *** Joins: independent56 (~independe@95.144.68.40)
[21:16:39] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d)
[21:17:19] <mikoto-chan> CommunistWolf: I still don't get it but I figured out how to (un)marshal JSON so I doubt it really matters
[21:17:40] <mikoto-chan> Python got Selenium and Beautifulsoup, what do we have for Go?
[21:18:15] <jemaclus> encoding/json
[21:18:54] *** Quits: qrpnxz (~qrpnxz@user/qrpnxz) (Quit: Gateway shutdown)
[21:19:01] <mikoto-chan> really?
[21:19:08] <rewt> selenium isn't python
[21:19:11] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[21:19:43] <mikoto-chan> my bad
[21:20:20] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[21:20:22] <rewt> for go things, you can usually google search "golang thing" and get good results, for example html parser: https://pkg.go.dev/golang.org/x/net/html
[21:20:39] *** Joins: independent56 (~independe@95.144.68.40)
[21:21:03] *** Joins: benoitj (~benoitj@user/benoitj)
[21:21:39] <mikoto-chan> oh, you can do webscraping with the stdlib
[21:21:42] <mikoto-chan> interesting
[21:22:42] <jemaclus> oh, for web scraping. thought you were asking about json encoding. for web scraping, i've used colly in the past. http://go-colly.org. I thought it was clunky, but web scraping kind of always is.
[21:23:14] <CommunistWolf> all's well that ends well
[21:23:34] <mikoto-chan> I'm using the API with JSON actually but it's laking so I need to do some stuff manually
[21:24:44] <independent56> What's the difference between gotk, and go-gtk? Are they linux-only?
[21:24:51] <mikoto-chan> s/laking/lacking/
[21:26:20] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[21:26:22] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[21:26:53] *** Joins: independent56 (~independe@95.144.68.40)
[21:30:26] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[21:30:48] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[21:31:56] <independent56> is the import statement like rusts cargo.toml? can i just type the name of a package and it finds it? Do i need to make some form of link to the package repo? Do i need to downlaod the package?
[21:32:34] *** Joins: gggpkm (~gggpkm@123.113.183.29)
[21:33:36] <rewt> add the required line as an import line, then run `go mod tidy` to update go.mod, go.sum, and download the package
[21:34:50] *** Quits: gggpkm (~gggpkm@123.113.183.29) (Remote host closed the connection)
[21:34:55] <independent56> https://github.com/gotk3/gotk3#sample-use like this here?
[21:34:56] *** Joins: arcatech (~arcatech@user/arcatech)
[21:35:29] <rewt> yes
[21:35:45] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[21:36:05] <independent56> yay!
[21:36:33] <independent56> the best part? the version numbers dont even have to be update like in cargo.toml!
[21:37:46] *** Joins: gggpkm (~gggpkm@123.113.184.120)
[21:40:24] *** Quits: gggpkm (~gggpkm@123.113.184.120) (Remote host closed the connection)
[21:40:46] *** Quits: chder (~chder@user/chder) (Quit: chder)
[21:41:03] *** Joins: chder (~chder@chder.net)
[21:41:22] *** Quits: chder (~chder@chder.net) (Client Quit)
[21:41:40] *** Joins: chder (~chder@chder.net)
[21:41:52] *** Quits: chder (~chder@chder.net) (Client Quit)
[21:43:06] *** Joins: chder (~chder@user/chder)
[21:44:37] *** Joins: gggpkm (~gggpkm@60.10.23.164)
[21:45:43] *** Joins: oxum (~oxum@136.185.133.224)
[21:47:35] *** Joins: fef (~thedawn@user/thedawn)
[21:48:04] *** Quits: oxum (~oxum@136.185.133.224) (Remote host closed the connection)
[21:52:57] *** Joins: oxum (~oxum@136.185.133.224)
[21:52:58] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 256 seconds)
[21:55:51] *** Quits: oxum (~oxum@136.185.133.224) (Remote host closed the connection)
[21:57:18] *** Quits: nef (~nef@user/nef) (Ping timeout: 255 seconds)
[21:57:42] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[21:58:01] *** Joins: independent56 (~independe@95.144.68.40)
[21:59:42] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[22:00:01] *** Joins: independent56 (~independe@95.144.68.40)
[22:03:25] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[22:05:12] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[22:05:31] *** Joins: independent56 (~independe@95.144.68.40)
[22:06:42] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[22:07:44] *** Joins: goldfish (~goldfish@user/goldfish)
[22:08:53] *** Joins: arcatech (~arcatech@user/arcatech)
[22:12:35] *** Joins: independent56 (~independe@95.144.68.40)
[22:15:48] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:21:37] <torin> is there a way to dump on screen what type of character it is? so i'm struggling with some stupid character that's a newline but it is not catched by \n, and is there a way to display what it would be on terminal?
[22:22:12] <ikke> torin: what is the source of this character?
[22:23:00] *** eric_hill_ is now known as eric_hill
[22:23:08] <torin> it's a simple tcp echo server. pretty much it's echo 'multiline string' | nc server, and then in  the code i'm just doing conn.read() and do string(buf)
[22:23:39] <ikke> One thing you could do is to encode it to hexadecimal, then you can easily see what it is
[22:24:11] *** Joins: hexfive (~eric@50.35.83.177)
[22:24:17] <torin> so pretty much i tried and when i did %x it was one big mess :/
[22:24:21] <torin> let me show you
[22:24:40] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[22:26:09] <torin> https://i.imgur.com/UCIvDha.png
[22:27:12] <ikke> null bytes
[22:27:21] <ikke> 0a is a \n
[22:27:29] <ikke> after that just null bytes
[22:27:32] <torin> oh
[22:28:03] <torin> that's new to me, ta for pointer :)
[22:28:25] <rewt> why ignore the first return value of conn.Read()? that tells you how many were read
[22:28:55] <rewt> so you can ignore everything after that many
[22:29:05] <torin> yeah, that worked :)
[22:29:34] <torin> 	message := strings.TrimRight(string(buf), "\x00")
[22:29:34] <torin> 	message = strings.TrimRight(message, "\n")
[22:29:41] <torin> pretty much that sorted it out :) thanks
[22:30:25] <torin> rewt: what do you mean?
[22:31:09] <rewt> line 60
[22:31:30] <Tv_> torin: TrimRight is 100% wrong for sure
[22:31:36] <rewt> should be something like:  n, err := conn.Read()   then you can do message := string(buf[:n])
[22:31:46] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:31:57] <Tv_> torin: also, don't assume you get a complete line from a single Read. You probably want to use https://golang.org/pkg/bufio/#Scanner
[22:32:51] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[22:33:58] <torin> rewt: ah, ta
[22:34:28] <torin> will check it, ta.
[22:37:01] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[22:37:10] <LambdaComplex> couldn't you just do io.Copy to write back everything you read?
[22:37:42] <LambdaComplex> RFC 862 does not say anything about buffering until a newline character!
[22:37:51] <LambdaComplex> if you feel like complying with an RFC from 1982 :^)
[22:38:17] <LambdaComplex> "A server listens for TCP connections on TCP port 7.  Once a connection is established any data received is sent back."
[22:41:51] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Ping timeout: 255 seconds)
[22:43:18] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[22:45:15] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[22:45:34] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[22:46:25] <independent56> Where is the documentation on using multiple go files together? I'm really struggling to RTM when i dont even know where it is.
[22:46:54] <ikke> independent56: don't use `go run`
[22:47:32] <independent56> I mean, i have a weird directory structure, and i have no idea how to import other files.
[22:47:41] <ikke> https://golang.org/ref/mod
[22:47:57] <ikke> What version of go do you use?
[22:48:46] <independent56> 1 13
[22:48:53] <independent56> *1.13.8
[22:49:15] <ikke> read a bit up on go modules
[22:49:57] <rewt> 1.13 is a bit old
[22:50:35] <independent56> i just did "sudo apt install go".
[22:51:03] <rewt> https://golang.org/dl/
[22:51:32] <rewt> https://endoflife.date/go
[22:51:43] <independent56> i dont want to go to the bother of downloading and installing a  tar.gz
[22:53:17] <rewt> installing is literally just an untar
[22:55:03] <nahamu> Are you on Ubuntu? Is using snap an option?
[22:55:04] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[22:55:50] <nahamu> From https://github.com/golang/go/wiki/Ubuntu : "sudo snap install --classic go"
[22:56:01] <independent56> Oh yeah... snap XD.
[22:57:43] <A_Dragon> snap -_-
[22:59:24] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 255 seconds)
[23:00:24] <nahamu> It's not ideal, but it's a tool provided by the operating system if someone doesn't want to install from a tarball...
[23:03:43] <A_Dragon> I just have a (rational) hatred of snap, dont mind me
[23:04:19] *** Joins: gggpkm_ (~gggpkm@60.10.23.164)
[23:06:10] <independent56> what's wrong with it?
[23:06:36] *** Quits: gggpkm (~gggpkm@60.10.23.164) (Ping timeout: 255 seconds)
[23:06:44] <rewt> i've had issues with it;  don't recall the details, but bad enough to stay far away from it
[23:09:03] <siXy> independent56: it's an RCE in a box.
[23:09:20] <siXy> Gives canonical root access to anything you use snaps on, permanently.
[23:09:35] <siXy> No way to opt out or disable that behaviour.
[23:09:54] <Gnuman> will snap Go link binaries against its own env or the local system env?
[23:10:11] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[23:11:13] <siXy> Snaps will always automatically download and install any "newer" version of anything you install. Which means that anyone with access to publish to any snap channel you install can install and run any code they want on your machine.
[23:11:45] <siXy> There are other problems with them too - the FS implementation is atrocious and slow, numerous other issues etc etc, but they all pale in comparison to that IMO
[23:12:20] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Quit: Izem)
[23:12:50] <siXy> Gnuman: Gotta run now, but your question doesn't make a whole lotta sense - go binaries are generally statically linked, and it's not clear what "local env" you're talking about.
[23:13:23] * siXy &
[23:13:43] <Gnuman> siXy, np
[23:14:44] <Gnuman> I was just curious for what they link against when cgo is enabled. I generally compile everything to CGO_ENABLED=false so I can deploy to scratch docker containers.
[23:15:39] <Gnuman> as for environment, I meant the snap environment and the operating system's environment
[23:16:05] <Gnuman> maybe I can't communicate well because I got the Mondays =(
[23:20:00] <independent56> snap is a risk i am willing to take. it is useful. and if it breaks my computer, that's the point of backups.
[23:37:40] *** Joins: gggpkm (~gggpkm@60.10.23.164)
[23:37:59] *** Quits: gggpkm_ (~gggpkm@60.10.23.164) (Read error: Connection reset by peer)
[23:39:54] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 255 seconds)
[23:40:22] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 255 seconds)
[23:41:48] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Ping timeout: 276 seconds)
[23:42:06] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 272 seconds)
[23:43:13] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[23:43:23] *** Joins: nef (~nef@user/nef)
[23:44:18] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[23:47:50] *** Quits: sizeof_void34 (~Thunderbi@109-252-76-37.nat.spd-mgts.ru) (Quit: sizeof_void34)
[23:49:33] *** Joins: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net)
[23:57:52] *** Joins: emptyleg (~emptyleg@c-73-221-4-252.hsd1.wa.comcast.net)
[23:59:11] *** frobnitz_ is now known as frobnitz
[23:59:27] *** Quits: emptyleg (~emptyleg@c-73-221-4-252.hsd1.wa.comcast.net) (Remote host closed the connection)
