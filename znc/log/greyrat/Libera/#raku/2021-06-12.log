[00:00:03] *** Joins: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net)
[00:00:23] <m6locks> in java it's merely new boolean[rows][cols];
[00:01:08] <guifa> m6locks: what code do you have right now?
[00:01:22] <m6locks> nothing
[00:02:05] <m6locks> I tried my Bool @matrix = <False xx $rows*$cols>.rotor($rows);
[00:02:14] <guifa> aaaah
[00:02:24] <guifa> okay so it's making an array BUT
[00:02:42] <guifa> you've typed it, and rotor doesn't return it typed 
[00:02:59] <m6locks> ah
[00:03:21] <guifa> my ($rows, $cols) = 3, 3; my @matrix = <False xx $rows*$cols>.rotor($rows); say @matrix[1][2];
[00:03:21] <evalable6> guifa, rakudo-moar 16eaa0693: OUTPUT: «(Any)␤»
[00:03:24] <guifa> err
[00:03:29] <m6locks> aye it works if I remove the Bool
[00:03:33] <m6locks> thx
[00:03:59] <guifa> well, it almost does.  You need () not < >
[00:05:04] <guifa> <False xx $rows*$cols> produces a list of string elements, "False", "xx", and "$rows*$cols"
[00:05:33] <m6locks> my @matrix = [False xx 3*3].rotor(3); say @matrix[1][2];
[00:05:33] <evalable6> m6locks, rakudo-moar 16eaa0693: OUTPUT: «False␤»
[00:06:13] <m6locks> I'll use that one
[00:09:42] <guifa> if you want to type: 
[00:09:49] <guifa> my Array[Bool] @matrix = Array[Array[Bool]].new(Array[Bool].new(False xx $cols) xx $rows); say @matrix[1][2]
[00:09:58] <guifa> m: my Array[Bool] @matrix = Array[Array[Bool]].new(Array[Bool].new(False xx $cols) xx $rows); say @matrix[1][2]
[00:09:59] <camelia> rakudo-moar 16eaa0693: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$cols' is not declared.  Did you mean '&cos'?␤at <tmp>:1␤------> 3ray[Bool]].new(Array[Bool].new(False xx 7⏏5$cols) xx $rows); say @matrix[1][2]␤»
[00:10:09] <guifa> err duh I'd need to define the cols and rows ha
[00:13:03] <m6locks> aye that's consistent with other constructs being typed
[00:17:57] <raydiak> there's also shaped arrays
[00:18:05] <raydiak> m: my Bool @a[3;3]; @a = False xx 3 xx 3; say @a.raku
[00:18:05] <camelia> rakudo-moar 16eaa0693: OUTPUT: «Array[Bool].new(:shape(3, 3), [Bool::False, Bool::False, Bool::False], [Bool::False, Bool::False, Bool::False], [Bool::False, Bool::False, Bool::False])␤»
[00:18:10] *** Joins: MoC (~moc@user/moc)
[00:20:21] *** Joins: MoC_ (~moc@user/moc)
[00:23:01] *** Quits: MoC (~moc@user/moc) (Ping timeout: 244 seconds)
[00:24:20] *** MoC_ is now known as MoC
[00:27:38] *** Quits: holly_ (~goon@109.136.39.83) (Quit:  CUL)
[00:28:42] *** Quits: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[00:29:16] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[00:32:02] *** Quits: stoned75 (~seb@78.203.129.116) (Ping timeout: 272 seconds)
[00:34:18] *** Quits: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Ping timeout: 252 seconds)
[00:39:08] *** Joins: yewscion (~yewscion@2601:547:a01:2900::89ff)
[00:42:11] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[00:57:02] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[00:57:10] <Xliff> \o
[00:57:32] <Xliff> Is there a way to find proto methods in a list of Method objects?
[00:57:46] <Xliff> I would have thought that would have been a method on Routine.
[00:57:50] <Xliff> Or Method itself.
[01:03:18] <codesections> does this do what you want? (I'm not quite sure I know what you're looking for)
[01:03:20] <codesections> m: my class C { proto method foo(|) {*}; multi method foo(Str) { 'str'}; multi method foo(Int) {42}}; say C.^methods.grep({.candidates».multi})
[01:03:20] <camelia> rakudo-moar 16eaa0693: OUTPUT: «(foo BUILDALL)␤»
[01:10:05] <[Coke]> (mac) I'm on 10.15.7, which isn't ancient, but is a major rev back.
[01:10:32] *** Quits: kylese (~kylese@p5dd8b8c2.dip0.t-ipconnect.de) (Quit: Leaving)
[01:12:05] <Xliff> codesections: How many times is foo mentioned in .^methods?
[01:13:45] <codesections> foo is mentioned once, which referees to the proto (e.g., it has a .signature of (|)).  foo.candidates returns 2 foo (multi) methods 
[01:19:42] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[01:19:47] <Xliff> Ah! OK. I found repeat methods in my .^methods output. Turns out those were put there by Method::Also.
[01:19:54] <Xliff> Just hacked in a way to identify these. 
[01:29:02] *** Quits: yewscion (~yewscion@2601:547:a01:2900::89ff) (Remote host closed the connection)
[01:29:26] *** Joins: yewscion (~yewscion@2601:547:a01:2900::89ff)
[01:33:21] <codesections> interesting.  I don't think I've ever used Method::Also.  I take it that's what you get from the `also is` declarator?
[01:34:03] <Xliff> 'is also', yes
[01:36:01] <codesections> ? so not https://docs.raku.org/language/classtut#The_also_declarator
[01:36:19] <codesections> m: my class C { also is Int }
[01:36:19] <camelia> rakudo-moar 16eaa0693: ( no output )
[01:38:20] <raydiak> no, not that (though I like that syntax)
[01:38:28] <raydiak> Xliff is using https://modules.raku.org/dist/Method::Also:cpan:ELIZABETH
[01:39:29] <codesections> ahhh, I see!
[01:43:37] *** Quits: Shaeto (~Shaeto@94.25.234.158) (Quit: WeeChat 3.1)
[01:47:37] <raydiak> personally quite fond of 'also is/does' though. looks cleaner to me a lot of the time. nice to have the traits and inheritance/composition stuff inside the curly braces instead of tacked on to the name, imo
[01:48:09] <codesections> m: my class C { method raku {note '.raku called' ''}}; C.new eqv C.new
[01:48:09] <camelia> rakudo-moar 16eaa0693: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3ass C { method raku {note '.raku called'7⏏5 ''}}; C.new eqv C.new␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤   …»
[01:48:22] <codesections> m: my class C { method raku {note '.raku called'; ''}}; C.new eqv C.new
[01:48:22] <camelia> rakudo-moar 16eaa0693: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "eqv" in expression ".new eqv C.new" in sink context (line 1)␤.raku called␤.raku called␤»
[01:49:48] <codesections> wait, ??? why is eqv calling .raku?  I thought (and the docs indicate) it was for structural equivalence, not string comparison 
[01:51:56] <codesections> I guess that's from https://github.com/rakudo/rakudo/blob/master/src/core.c/Mu.pm6#L1204-L1209
[01:52:21] <codesections> but strikes me as very odd
[01:53:09] *** Quits: yewscion (~yewscion@2601:547:a01:2900::89ff) (Ping timeout: 272 seconds)
[01:56:09] <codesections> m: my class C { has $.a; method raku {note '.raku called'; ''}}; say C.new(:a<Yes>) eqv C.new(:a<No!>)
[01:56:09] <camelia> rakudo-moar 16eaa0693: OUTPUT: «.raku called␤True␤.raku called␤»
[02:04:23] <raydiak> that is kinda interesting. it's comparing .raku output instead of inspecting the objects with the MOP
[02:05:14] <guifa> raydiak: I prefer the also is/does when I have unit scoped things, and when the role/class applied needn't pollute the outer symbol table
[02:05:29] <guifa> codesections:  basically, it's the fallback for comparison.  The idea is that .raku should have the information needed to reconstruct an object, hence being an adequate (if potentially imperfect) fallback
[02:07:41] <codesections> Yeah, I *guess* I get that.  (Though, as shown above, it can break if uses don't realize that and do something they shouldn't with .raku output (tempting for people who want more readable .raku/dd output)). And it means we *really* need things to round trip correctly (which is spec, but there are a lot of open bugs)
[02:08:16] <raydiak> it does feel a touch unexpected. otoh, no more unexpected than a raku method having side-effects like printing output
[02:09:05] <codesections> But, more to the point, *why*?  Why are we falling back on .raku comparisons so early?  It seems like we're not trying something like .^attributes recursively 
[02:10:19] <guifa> .^attributes could potentially catch things that are unnecessary, e.g., an internal-use-only UUID, that would autofail the eqv.  I think that's the point of .raku, since it's only the relevant bits of data
[02:11:31] <guifa> my only issue with eqv is that it's very hard to create custom eqv methods
[02:12:11] <codesections> hmmm, I *think* I disagree.  If two objects have a different UUID, it seems like they shouldn't be eqv (though they could compare equal in other ways)
[02:12:19] <guifa> note I said internal uuid
[02:12:38] <raydiak> my main concern would be that someone might make a custom .raku with non-deterministic output. e.g. iterating over an internal hash without sorting the keys
[02:12:52] <guifa> raydiak: that's something that should be noted for developers, absolutely
[02:13:17] <guifa> class A { }; my $a = A.new; my $b = A.new; say $a.WHERE == $b.WHERE
[02:13:18] <evalable6> guifa, rakudo-moar 16eaa0693: OUTPUT: «False␤»
[02:13:32] <guifa> WHERE or WHICH are basically UUIDs, but irrelevant for comparison
[02:13:37] <codesections> Yeah.  But a u_u_id seems like it's there precisely to be able to tell objects apart, no?
[02:14:08] <codesections> but not attributes 
[02:14:33] *** lizmat_ is now known as lizmat
[02:15:53] <raydiak> eqv isn't supposed to tell objects apart. it's supposed to tell the value of objects apart. and what constitutes the "value" of an object depends on what it is and how it's meant to be used. === tells objects apart
[02:16:26] <codesections> right, I get that; sorry for the sloppy terminology :)
[02:16:37] <guifa> raydiak: exactly.  And .raku isn't supposed to create the identical object, just an identically valued object.  The internal attributes may or may not contribute to that, though.
[02:16:52] <guifa> but the .raku output, properly created, should
[02:17:40] <codesections> Maybe my fundamental issue is expressed by the comment above the code I linked: «# Last ditch snapshot semantics.  We shouldn't come here too often» Right now, we come there by default for pretty much every user-created type
[02:18:50] <guifa> codesections: I wouldn't disagree about that.  We just don't have a great equivalency protocol, but I'm also not sure how to create one
[02:19:27] <guifa> Right now the options are: (a) creative a custom infix:<eqv>($a, $b) for the types, or (b) ensure .raku output is identical
[02:20:02] <guifa> (a) will only work when you can have the module in scope, which is to say you can never rely on outside code to properly calculate the equivalency
[02:20:28] <guifa> (b) well, you've already seen the potential downsides to that one
[02:21:10] * guifa . o O are my language tags getting too crazy?  new sample lol: es-ES-t-ca-gregory-co-trad-cu-eur-fw-sun-ms-metric-tz-usnyc )
[02:21:45] <raydiak> maybe a trait to flag an attribute for exclusion from eqv and .raku?
[02:21:55] <codesections> Maybe we should make `is implementation detail` be applicable to attributes
[02:22:10] <guifa> d
[02:22:24] <codesections> raydiak: we're thinking along the same lines, clearly :D
[02:23:07] <raydiak> great minds and all that, right? :D
[02:23:55] <guifa> So .... how do we properly do eqv for this one? :-)  class Length { has $.unit; has $.quantity } 
[02:24:18] <guifa> This is a case where you'd even want the unit and quantity in the .raku output, but you'd want two things to be found potentially eqv.
[02:24:36] * guifa figures if we're gonna muck with eqv, we probably should look at all angles
[02:25:23] <vrurg> It worth a problem-solving. What if eqv optionally bypasses to object's 'EQUALS' method, similar to how smarmatch uses ACCEPTS? I already see a problem here, but still think it's worthful to consider.
[02:25:27] <codesections> is that a trick question? Length $a and Length $b are eqv iff $a.unit eqv $b.unit && $a.quantity eqv $b.quantity 
[02:25:45] <guifa> codesections: I don't think it is
[02:26:21] <guifa> Length.new( :unit<meter>, :1quantity ) should be equivalent to Length.new( :unit<centimeter>, :100quantity )
[02:26:57] <raydiak> hrm. make both implementation-detail, and add $.value = $!length * $!quantity ? idk, good example
[02:27:39] <vrurg> Two objects are not necessarily to be of the same type of be equivalent. Think of a point in Polar and Cartesian representations.
[02:27:48] <moon-child> I think you want to map :unit<centix> :quantity(y) to :unit<x> :quantity(y/100)
[02:27:56] <codesections> Hmm, I'd actually say those shouldn't be eqv, but should be ==
[02:28:02] <moon-child> or possibly to :unit<x> :quantity(y) :ratio(1/100)
[02:29:17] <codesections> m: my Num $a = 1.Num; my Int $b = 1; say $a eqv $b; say $a == $b
[02:29:18] <camelia> rakudo-moar 16eaa0693: OUTPUT: «False␤True␤»
[02:29:45] <vrurg> codesections: I had to refresh my memory and you're right. eqv is first of all about type equivalency.
[02:31:33] <codesections> guifa's Length example is trickier, in that both are Lengths.  But I'd still say they're not eqv
[02:32:30] <codesections> (Though I freely admit that's pushing against the meaning of the English word 'equivalent' a bit!)
[02:32:53] <guifa> and regardless, the inability to specify a custom eqv except in specific, non-dynamic scopes, is problematic
[02:33:05] <codesections> Agreed. 
[02:34:25] <codesections> vrurg's .EQUALS idea (.EQUIVALENT ?) would be one way to get at that
[02:34:49] *** Quits: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net) (Read error: Connection reset by peer)
[02:35:14] *** Joins: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net)
[02:35:15] <guifa> Since the type equivalency is required, it actually shouldn't be as problematic
[02:35:54] *** Quits: patrickb (~quassel@55d4877c.access.ecotel.net) (Quit: Quit.)
[02:37:34] * guifa was thinking something like == or cmp or eq need symmetry, but that's hard to define if the types can be different
[02:38:24] <moon-child> m: my \*x
[02:38:25] <camelia> rakudo-moar 16eaa0693: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed my␤at <tmp>:1␤------> 3my7⏏5 \*x␤»
[02:38:35] <moon-child> why not?  Syntactic ambiguity with *x?
[02:38:36] <vrurg> There is one thing to keep in mind though. ~~ is asymmetric. But eqv is commutative. So, if a method is used we must ensure that both side methods are giving True
[02:40:37] <guifa> vrurg: yeah, but since eqv requires type equivalency, then a type can ensure that its method EQUIV() is symmetric, since it would only be passed its own type
[02:44:50] <codesections> guifa: and I guess as a corollary to the point you made re: custom eqv, Test::is-deeply will never use a custom eqv with the current system, right?
[02:44:54] <vrurg> guifa: Likely so. Apparently, one can always break the rule, but then it'd be up to him to take the responsibility for such design.
[02:45:58] <guifa> codesections: correct.  No way to force your eqv method into Test's is-deeply
[02:46:22] <codesections> There is cmp-ok, but yeah...
[02:47:02] <guifa> Cmp lets you specify the method… but if you compare two lists of objects, they won't know to use your special method in comparing their contents
[02:47:09] <guifa> they = the lists
[02:47:49] <guifa> you'd have to write a full comparison function, but then you could just do 'ok myspecialmethod($a, $b)'
[02:48:18] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[02:49:24] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[02:50:21] <codesections> yeah.  I guess you could do  `all .map({cmp-ok($a, &[eqv], $b)})`.  But that's just a short/inline comparison function 
[02:51:02] <guifa> (this is, incidentally, an issue with most operators, and I'm not sure a great design solution.  If I have a custom infix:<+> for my type, there's no way to have it propogate)
[02:53:12] *** Quits: sena_kun (~sena_kun_@94.142.239.45) (Quit: Leaving)
[02:53:50] <codesections> yeah.  Many languages solve that by having $a + $b compile to $a.infix_plus_operator($b), but that makes the order of the operands determinate 
[02:54:22] <guifa> I mean, technically it's determinate for infix:<+>($a, $b) too
[02:55:09] <codesections> True enough
[02:55:18] <guifa> m: class A {}; class B {}; multi sub infix:<+>(A $, B $) { say "a plus b" }; B + A
[02:55:18] <camelia> rakudo-moar 16eaa0693: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "+" in expression "B + A" in sink context (line 1)␤Use of uninitialized value of type B in numeric context␤  in block <unit> at <tmp> line 1␤Use of uninitialized value of type A in numeric context␤  in bloc…»
[02:56:24] <guifa> I think you could just wrap it to try to get first dibs on the operators, but that'd be an extra check at runtime
[02:57:36] <codesections> I guess my point was that Raku lets you do something like sub infix:<+>(Int $a, MyType $b) {...} and have 1 + MyType.new work, which isn't true for languages where that'd call Int.infix_plus
[02:58:08] <codesections> But only if you're in the right scope to define _any_ infix:<+>
[02:58:40] <moon-child> some languages will let you instead call MyType.opposite_size_infix_plus
[02:58:46] <moon-child> ...but that's even worse, because you can have multiple candidates
[02:59:34] <codesections> was that a typo for opposite_sides?  
[02:59:43] <codesections> if not, I don't get it
[02:59:46] <moon-child> yeah
[03:02:34] <guifa> So I wonder
[03:02:55] <guifa> multi sub infix:<+>($a, $b) is dynamic { … } ? 
[03:03:16] <guifa> nope, doesn't work
[03:03:32] <codesections> some of these solutions seem like they'd fit a lot better if we're talking about what gets called by the infix:<OPERATOR> in Mu.  If there's an infix in the calling scope above that, it could still  overide it lexically
[03:04:55] <guifa> but dynamic is specifically called out as being unknown for subs.  Maybe that could be enabled.  After all, I can probably much more easily ensure a custom operator is in my call chain 
[03:05:52] <codesections> What about ~ ?
[03:06:39] <moon-child> guifa: if you could do that optimization would suffer a lot
[03:14:16] <guifa> moon-child: yeah, no doubt
[03:19:05] <moon-child> thoughts on adding an  is assoc<ambivalent>  or similar?  It would allow .race.reduce to work in parallel, as well as allowing for potentially better register allocation
[03:21:18] <codesections> hmm, the docs call out assoc<non> as illegal.  Was this discussed before?
[03:22:38] <codesections> (I like the idea in general, though -- .race.reduce _should_ be able to work in parallel for associative ops)
[03:22:50] <codesections> (and does in many languages)
[03:23:47] <codesections> er, maybe assoc<non> was the opposite?  Would this be more like assoc<yes> :D?
[03:23:48] <moon-child> no assoc<non> is different.  if O is assoc<non>, then a O b O c is illegal.  if O is assoc<ambivalent>, then (a O b) O c is the same as a O (b O c)
[03:23:51] <moon-child> yeah
[03:25:11] <codesections> ok, yeah, I like the idea and can't think of any immediate issues (though I'm hardly an expert in the related areas!)
[03:26:41] <m6locks> m: my $precision = 9; my $a = '%0' ~ $precision ~ 'd'; say $a.printf(35.base(2)).comb;
[03:26:41] <camelia> rakudo-moar 16eaa0693: OUTPUT: «000100011(T r u e)␤»
[03:26:46] <m6locks> m: my $precision = 9; my $a = '%0' ~ $precision ~ 'd'; say $a.printf(35.base(2));
[03:26:46] <camelia> rakudo-moar 16eaa0693: OUTPUT: «000100011True␤»
[03:27:07] <m6locks> where's the True coming from?
[03:27:43] <m6locks> I'd just like to have leading zeros in a binary number
[03:28:29] <moon-child> m: my $precision = 9; my $a = '%0' ~ $precision ~ 'd'; $a.printf(35.base(2));
[03:28:29] <camelia> rakudo-moar 16eaa0693: OUTPUT: «000100011»
[03:28:35] <moon-child> m: my $precision = 9; my $a = '%0' ~ $precision ~ 'd'; say $a.sprintf(35.base(2));
[03:28:35] <camelia> rakudo-moar 16eaa0693: OUTPUT: «000100011␤»
[03:28:37] <codesections> you probably want sprintf: https://docs.raku.org/language/independent-routines#routine_sprintf
[03:28:45] <m6locks> ah, ok. thanks
[03:28:46] <moon-child> ^^ two ways to do it
[03:28:50] *** Joins: japhb (~geoff@mugs/japhb)
[03:29:16] <m6locks> yes, now it works
[03:56:05] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Quit: Leaving)
[04:15:51] <SmokeMachine> Does anyone know where in Documentable it does test the =code snippets from the documentation?
[04:33:06] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[04:33:45] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:34:17] *** Joins: yewscion (~yewscion@2601:547:a00:7720::c63e)
[04:49:50] *** Quits: leah2 (~leah@vuxu.org) (Read error: Connection reset by peer)
[04:54:28] <jdv> if someone is doing something funky with their .raku then its likely on them
[04:54:35] <jdv> that's what .gist is for iirc
[04:54:49] <jdv> the 2 have distinct purposes, right?
[04:57:00] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:58:31] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[05:06:57] *** Quits: Doc_Holliwould (~holli@ipservice-092-218-232-179.092.218.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[05:07:16] <guifa> jdv: .gist = human readable, .raku = recreate raku object, .put = computer readable
[05:08:05] <guifa> err
[05:08:34] <guifa> .gist = human readable (used by say), .raku = recreate raku object, .Str = computer readable (used by put and print)
[05:41:05] <codesections> But in many cases, the .raku doesn't recreate the raku object, and there's no real path getting it to (other than implementing it manually)
[05:41:08] <codesections> m:                      |     ~'' 
[05:41:08] <camelia> rakudo-moar 16eaa0693: ( no output )
[05:41:43] <codesections> m: my class Foo { has $!bar; submethod BUILD(:$!bar) {}}; say Foo.new(:bar<baz>) eqv Foo.new(:bar<qux>)
[05:41:43] <camelia> rakudo-moar 16eaa0693: OUTPUT: «True␤»
[06:05:42] *** Quits: yewscion (~yewscion@2601:547:a00:7720::c63e) (Ping timeout: 264 seconds)
[06:17:00] <guifa> codesections: I think that goes back to the private attributes being like implementatino details 
[06:42:58] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[06:42:58] *** Joins: greaser|q (greaser@user/greasemonkey)
[06:43:00] *** greaser|q is now known as GreaseMonkey
[07:43:00] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[07:43:00] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:45:10] *** Joins: evalable6 (~eva-able@ns306169.ip-94-23-219.eu)
[07:46:04] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[07:49:20] <avuserow> if I have a hash with an key that is either a list or not present in the hash, is there an easy way to iterate over it with a for loop? for example:
[07:49:23] <avuserow> m: my %a = :a[1, 2, 3]; .say for %a<a>; .say for %a<b> # wrong
[07:49:23] <camelia> rakudo-moar 16eaa0693: OUTPUT: «[1 2 3]␤(Any)␤»
[07:49:48] <avuserow> m: my %a = :a[1, 2, 3]; .say for @(%a<a> // []); .say for @(%a<b> // []) # best I've found so far
[07:49:48] <camelia> rakudo-moar 16eaa0693: OUTPUT: «1␤2␤3␤»
[07:52:08] <avuserow> fwiw, in python I would write `for x in a.get("a", []): print(x)`
[08:01:08] <raydiak> not sure if this is better for your use case, but you could also do:
[08:01:10] <raydiak> m: my %a is default([]) = :a[1, 2, 3]; .say for |%a<a>; .say for |%a<b>
[08:01:11] <camelia> rakudo-moar 16eaa0693: OUTPUT: «1␤2␤3␤»
[08:05:51] <avuserow> oh nice, I was wondering if we had a defaultdict equivalent somewhere
[08:06:00] <avuserow> that definitely helps some of the time
[08:06:40] <avuserow> usually when this frustrates me, I'm delving into data that came from json, so that's not an option unfortunately
[08:07:12] <raydiak> ah, I could see that
[08:19:46] <avuserow> m: my %a = :a[1, 2, 3]; .say for %a<a> andthen .list; .say for %a<b> andthen .list # also works, not sure if it's an improvement
[08:19:46] <camelia> rakudo-moar 16eaa0693: OUTPUT: «1␤2␤3␤»
[08:22:00] <raydiak> oh, here's a neat trick I hadn't thought of before now...
[08:22:10] <raydiak> m: my %a = :a[1, 2, 3]; .say for %a<a>:v; .say for %a<b>:v
[08:22:10] <camelia> rakudo-moar 16eaa0693: OUTPUT: «1␤2␤3␤»
[08:30:38] *** Parts: ^[ (~user@user//x-8473491) ()
[08:36:13] <avuserow> raydiak++ nice
[09:30:38] *** Quits: evalable6 (~eva-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[09:30:38] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[09:31:25] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[09:33:29] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[10:03:21] *** Quits: colomon (~colomon@097-095-165-088.res.spectrum.com) (Ping timeout: 272 seconds)
[10:06:24] *** Joins: colomon (~colomon@097-095-165-088.res.spectrum.com)
[10:29:21] *** Joins: emperor_time (~kurapika@117.222.64.84)
[10:32:53] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:34:55] *** Quits: emperor_time (~kurapika@117.222.64.84) (Quit: leaving)
[10:35:23] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[10:55:48] *** Quits: xinming (~xinming@115.219.35.110) (Ping timeout: 252 seconds)
[11:03:53] *** Joins: Doc_Holliwould (~holli@dslb-084-059-122-200.084.059.pools.vodafone-ip.de)
[11:05:16] *** Quits: guifa (~guifa@host-68-169-135-99.MIDOLT1.epbfi.com) (Quit: guifa)
[11:49:36] *** Quits: Doc_Holliwould (~holli@dslb-084-059-122-200.084.059.pools.vodafone-ip.de) (Remote host closed the connection)
[11:50:15] *** Joins: Doc_Holliwould (~holli@dslb-084-059-122-200.084.059.pools.vodafone-ip.de)
[11:51:18] *** Quits: japhb (~geoff@mugs/japhb) (Quit: leaving)
[11:51:49] *** Quits: Doc_Holliwould (~holli@dslb-084-059-122-200.084.059.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[12:11:11] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:11:11] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[13:11:11] *** Quits: squashable6 (~squ-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[13:11:11] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[13:11:11] *** Quits: greppable6 (~gre-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[13:11:11] *** Quits: coverable6 (~cov-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[13:11:11] *** Quits: unicodable6 (~uni-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[13:11:11] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:11:11] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:11:11] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:11:11] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:11:11] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:11:11] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[13:11:11] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[13:11:11] *** Quits: releasable6 (~rel-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[13:11:11] *** Quits: benchable6 (~ben-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[13:11:11] *** Quits: nativecallable6 (~nat-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[13:11:11] *** Quits: tellable6 (~tel-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[13:11:12] *** Quits: committable6 (~com-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[13:11:12] *** Quits: sourceable6 (~sou-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[13:11:26] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[13:11:36] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[13:11:39] *** Joins: releasable6 (~rel-able@ns306169.ip-94-23-219.eu)
[13:12:04] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[13:12:14] *** Joins: nativecallable6 (~nat-able@ns306169.ip-94-23-219.eu)
[13:12:19] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[13:12:24] *** Joins: squashable6 (~squ-able@ns306169.ip-94-23-219.eu)
[13:12:28] *** Joins: statisfiable6 (~sta-able@ns306169.ip-94-23-219.eu)
[13:12:29] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[13:12:44] *** Joins: greppable6 (~gre-able@ns306169.ip-94-23-219.eu)
[13:13:01] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[13:13:06] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[13:13:08] *** Joins: tellable6 (~tel-able@ns306169.ip-94-23-219.eu)
[13:13:11] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[13:13:12] *** Joins: benchable6 (~ben-able@ns306169.ip-94-23-219.eu)
[13:13:31] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[13:13:44] *** Joins: bloatable6 (~blo-able@ns306169.ip-94-23-219.eu)
[13:13:45] *** Joins: bisectable6 (~bis-able@ns306169.ip-94-23-219.eu)
[13:13:54] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[13:44:14] *** Quits: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net) (Quit: Leaving.)
[14:03:32] *** Joins: leah2 (~leah@vuxu.org)
[14:14:37] *** Quits: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[14:18:50] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[14:27:25] *** Joins: sena_kun (~sena_kun_@94.142.239.45)
[15:12:31] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[16:12:31] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[16:12:31] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:12:54] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[16:13:48] *** Joins: evalable6 (~eva-able@ns306169.ip-94-23-219.eu)
[16:32:43] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[16:35:43] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[17:15:28] *** Joins: yewscion (~yewscion@2601:547:a00:7720::c63e)
[17:37:37] *** Joins: Guest92 (~Guest92@78.107.92.110)
[17:39:04] *** Joins: Altai-man (~sena_kun_@94.142.239.45)
[17:46:10] *** Quits: b2gills (~brad@64.191.7.0) (Ping timeout: 244 seconds)
[17:48:14] *** Quits: yewscion (~yewscion@2601:547:a00:7720::c63e) (*.net *.split)
[17:48:14] *** Quits: sena_kun (~sena_kun_@94.142.239.45) (*.net *.split)
[17:48:14] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[17:55:32] *** Joins: leah2 (~leah@vuxu.org)
[18:01:02] *** Joins: b2gills (~brad@64.191.7.0)
[18:07:38] *** Quits: Guest92 (~Guest92@78.107.92.110) (Quit: Connection closed)
[19:07:38] *** Quits: evalable6 (~eva-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[19:07:38] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:10:10] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[19:10:36] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[19:13:50] *** Joins: guifa (~guifa@host-68-169-135-99.MIDOLT1.epbfi.com)
[19:15:22] *** Joins: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net)
[19:53:13] *** Quits: guifa (~guifa@host-68-169-135-99.MIDOLT1.epbfi.com) (Quit: guifa)
[19:59:45] *** Quits: corwin (someone@fosshost/director/corwin) (Quit: gone)
[20:43:11] *** Quits: jess (~jess@libera/staff/jess) ()
[20:43:25] *** Joins: guifa (~guifa@host-68-169-135-99.MIDOLT1.epbfi.com)
[20:52:34] *** Joins: kylese (~kylese@p548355d1.dip0.t-ipconnect.de)
[21:12:36] *** Joins: corwin (someone@fosshost/director/corwin)
[21:31:47] *** Quits: guifa (~guifa@host-68-169-135-99.MIDOLT1.epbfi.com) (Quit: guifa)
[21:37:42] *** Joins: guifa (~guifa@host-68-169-135-99.MIDOLT1.epbfi.com)
[21:41:44] *** Joins: Sgeo (~Sgeo@user/sgeo)
[21:47:48] *** Joins: MrFantastik (~user@2603-7080-ae03-948a-d12e-ff24-d6cd-c14a.res6.spectrum.com)
[21:48:02] <MrFantastik> junctions are cool
[21:55:43] *** Joins: xinming (~xinming@115.219.32.39)
[22:09:39] <guifa> my $junctions = 'cool' & 'awesome' & 'fun'; 
[22:15:33] *** Quits: MrFantastik (~user@2603-7080-ae03-948a-d12e-ff24-d6cd-c14a.res6.spectrum.com) (Remote host closed the connection)
[22:23:55] *** Joins: jmask (~jmask@c-73-158-206-248.hsd1.ca.comcast.net)
[22:32:47] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[22:34:54] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[23:17:15] *** Quits: jmask (~jmask@c-73-158-206-248.hsd1.ca.comcast.net) (Quit: Connection closed)
[23:22:02] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[23:28:12] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 252 seconds)
