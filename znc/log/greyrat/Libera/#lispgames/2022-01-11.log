[00:02:00] <artchad> stronk C++ libraries
[00:02:44] <borodust> yes, exactly that
[00:08:13] *** Quits: dre (~dre@2001:8003:c932:c301:50d2:4546:b9eb:e49) (Ping timeout: 240 seconds)
[00:11:24] <drakonis> on android you say?
[00:13:04] <borodust> yup
[00:13:13] <borodust> android, no typos
[00:13:42] <borodust> probably would work on ios too, but i don't have access to their hardware and software
[00:15:26] <drakonis> neat.
[00:15:31] <drakonis> ECL?
[00:15:36] <borodust> lispworks
[00:15:38] <drakonis> oh
[00:15:40] <drakonis> huh.
[00:15:43] <drakonis> neat though.
[00:15:43] <borodust> ecl works too, but super slow
[00:15:59] <drakonis> maybe clasp's nicer
[00:16:05] <borodust> loading all bindings on android with ECL takes smth like 8-10 minutes
[00:16:14] <borodust> with lispworks - about 2 seconds
[00:16:45] <borodust> difference between image-based and relead-upon-start approach
[00:16:55] <borodust> *reload
[00:19:21] <borodust> not sure about clasp, i only hope one day i just dump all my contraptions and just switch into clasp infrastructure
[00:19:53] <borodust> but until that day comes, i'm using :claw to interface with C++ libraries
[00:21:48] <jstoddard> Silly question, maybe, but what is :claw?
[00:22:30] <borodust> it is CL bindings generator to C and C++ libraries
[00:23:32] <artchad> *for C and C++ libraries
[00:24:29] <borodust> i always confused which one is correct
[00:24:42] <borodust> basically, bindings, well, bind to something
[00:24:50] <jstoddard> Neat, thanks. I just noticed the blog post linked above, which would have clued me in.
[00:25:18] <mfiano> borodust: I have a question about sdl2.
[00:25:42] *** Joins: dre (~dre@2001:8003:c932:c301:2a8:19cc:bc04:bd69)
[00:25:53] <borodust> mfiano: shoot, i might have answers this time around, cuz i have switched to it too :D
[00:25:56] <borodust> from glfw
[00:26:58] <mfiano> If I were to write my own raw bindings, would I need to wrap some of libc too, or does it abstract away all the OS details. I'm just wondering if I can wrap a few sdl2 functions I need, and have them work on linux and freebsd without special hacks. I ask because of all the spec files for different OS/architectures in cl-sdl2
[00:28:48] <borodust> mfiano: should be a safe bet - SDL even has its own memset
[00:29:02] <mfiano> Why then are there spec files for different target triplets?
[00:29:39] <mfiano> I never understood autowrap/claw internals :)
[00:29:43] <borodust> you might have ints mean different things on different platforms
[00:29:51] <borodust> int as in integer
[00:30:10] <borodust> so SDL needs to get this information from platform it is compiled in
[00:30:10] <mfiano> Oh right. So writing raw bindings might be hard to make portable then
[00:30:48] <borodust> SDL2 is somewhat bearable in that regard, it mostly should work
[00:30:56] <borodust> not gonna bet on that though ;p
[00:31:17] <mfiano> I am way too familiar with all the undefined behavior in C
[00:31:28] <mfiano> I recently wrapped a few FreeBSD syscalls
[00:32:02] <mfiano> Can I just say that errno is the worst invention ever?
[00:32:08] <borodust> ;p
[00:32:39] <borodust> to be perfectly correct, you probably would need to define some type primitives for particular platforms
[00:32:45] <borodust> many are done by CFFI already
[00:33:05] <mfiano> How would I get such a list?
[00:33:21] *** Quits: dre (~dre@2001:8003:c932:c301:2a8:19cc:bc04:bd69) (Ping timeout: 268 seconds)
[00:33:48] <borodust> when you would go with raw-bindings-by-hand you will stumble upon base definitions where SDL types are mapped to platform types
[00:34:00] <borodust> btw, zulu has raw bindings to SDL2
[00:34:09] <mfiano> I don't like his approach
[00:34:10] <borodust> which are seems to be hand crafted, not sure
[00:34:13] <borodust> i see
[00:34:33] <borodust> i also have raw bindings that are generated by claw
[00:34:53] <borodust> but they are per platform
[00:34:55] <mfiano> I only want raw bindings for stuff I need, with plenty of tests written for them.
[00:35:20] <TMA> mfiano: the sad thing is that the OS kernel does not deal with errno nowadays, it just the libc that does int _read(...) { int x = syscall_read(...); if (x < 0) {errno=-x;return -1;} else return x; }
[00:35:27] <borodust> mfiano: i see
[00:36:10] <borodust> some stuff in SDL2 is unfortunate though
[00:36:33] <borodust> like, some important functions taking structs as values
[00:37:07] <mfiano> there's only a couple of them. iirc, syswm stuff and rwops
[00:37:08] <borodust> you would need to use libffi for them
[00:37:32] <borodust> if only that was syswm
[00:37:45] <borodust> joystick stuff affected
[00:37:57] <borodust> here's the wrappers for those functions: https://github.com/borodust/aw-sdl/blob/master/src/lib/adapter.x86_64-pc-linux-gnu.c
[00:38:06] <mfiano> i use the higher level game-controller api, not joystick
[00:38:19] <borodust> not very important probably
[00:38:31] <borodust> i think we can live w/o guid and bind stuff
[00:38:49] <borodust> well, gamecontroller slightly affected too
[00:39:17] <borodust> hopefully, claw catched everything and those are all the functions that need special attention
[00:39:47] <mfiano> Well fuck me sideways. I might have to use claw
[00:40:24] <borodust> no, you don't do take that decision lightly xD
[00:40:37] <borodust> not these days
[00:41:10] <borodust> i mention it all the time (really a huge progress, no shame here) but i'm not advertising yet
[00:41:58] <borodust> three very important steps before i get it to the public need to be done, and i'm not doing any of them yet ;p
[00:42:01] <mfiano> i see. well I use only a handful of functions from cl-sdl2, and not even the public stuff...all raw stuff. the public stuff does this weird, and often buggy threading nonsense
[00:42:26] <mfiano> the thread stuff rpav wrote for cl-sdl2 is seriously bad
[00:42:32] <borodust> i can recommend stealing from generated bindings
[00:42:37] <borodust> adapting to your tastes
[00:42:59] <borodust> take what's needed from here: https://github.com/borodust/aw-sdl/blob/master/bindings/x86_64-pc-linux-gnu.lisp
[00:43:18] <mfiano> I'm not on linux :p
[00:43:21] <borodust> should save you some hours vs writing from scarch
[00:43:29] <borodust> it shouldn't matter too much
[00:43:58] <borodust> you only would need to pay attention to mapping to base types
[00:44:03] <borodust> lemme grab an example
[00:44:24] <borodust> like this (cffi:defctype %sdl::timer-id :int)
[00:44:50] <mfiano> anything else besides defctype forms?
[00:45:11] <borodust> claw-utils:claw-pointer can be safely replaced with :pointer
[00:45:16] <borodust> hmm, what else..
[00:45:57] <mfiano> I know it was very unportable to get stdin file descriptor which i needed last time i used cffi
[00:46:06] <borodust> claw-utils:claw-string can be replaced with :string
[00:46:30] <borodust> mfiano: SDL has its own api to work with files
[00:46:44] <borodust> not sure what it has for stdin 
[00:47:06] <mfiano> Yeah I use stdin for other things, like getting chars in rows/columns of terminal apps
[00:49:21] <mfiano> welp. i'll keep all this in mind. i havent done graphics in some months and thinking of starting up again, but not gamedev
[00:49:41] <borodust> well, SDL2 API quite carefully crafted (not sure why the mishap with joystick and controllers), should be okay, files for different platforms claw analyzed are pretty much almost the same minus platform depndent stuff ;p
[00:50:06] <borodust> wrapping libc raw is ofc the epitome of portability issues
[00:50:29] <mfiano> Luckily I only had to do it for select stuff from freebsd
[00:50:30] <borodust> it's mostly okay for functions, but types are tricky part
[00:50:42] *** Joins: dre (~dre@2001:8003:c932:c301:c69e:ead4:d381:5280)
[00:50:54] <mfiano> https://gitlab.com/axion/common-lisp/-/tree/master/ffi/freebsd/src
[00:51:14] <borodust> noice!
[00:52:11] <borodust> but i'm in much pain looking at hand-crafted cffi forms, gives me flashbacks
[00:53:05] <borodust> it's a good approach for well designed C api especially crafted for FFI, but once structures and enums kick in, i...
[00:53:11] <mfiano> borodust: I wrote some freebsd cli apps in CL: https://i.lisp.cl/temp/progress.ogv
[00:53:57] <borodust> looks good!
[00:54:04] <borodust> i mean, really
[00:54:11] <mfiano> thx
[00:55:38] <mfiano> kernel/syscall manpages/source code are easy to navigate on freebsd. i did this never using cffi before in just a couple days :)
[00:56:35] <mfiano> and of course, lispy wrappers on top of raw bindings
[00:57:02] <borodust> yup, cffi is really nice, it has almost everything to conveniently wrap C stuff by hand incrementally
[00:57:08] <borodust> very cool stuff
[00:57:13] <artchad> mfiano: How did you record that video?
[00:57:20] <artchad> what ffmpeg command?
[00:57:27] <mfiano> thinking of doing the same for the bits of sdl2 i need. i don't even think minor version has been regenerated in a few years for cl-sdl2 because i cant get c2ffi to work anymore
[00:57:33] <artchad> the file size is small and the quality is great
[00:57:40] <mfiano> artchad: recordmydesktop i think
[00:58:38] <artchad> I didn't know that one. I played around with obs, simplescreenrecorder, and ffmpeg.
[00:58:58] <artchad> Linux audio is weird. I just can't manage to record desktop audio.
[01:02:04] <artchad> recordmydesktop is a cool tool.
[01:04:13] *** Quits: yewscion (~yewscion@72-21-196-65.amazon.com) (Ping timeout: 240 seconds)
[02:07:50] <artchad> I've got an OpenGL window running inside SDL. I kind of know how SDL2 works with the surfaces and textures. Are there tutorials on how to use textures in cl-opengl? Obviously there are a million C++ tutorials for that, but I'm wondering wether there is a beginner friendly starting point for Lisp. I'm confident in calculus and linear algebra. Do you have any recommendations?
[02:17:20] <borodust> cl-opengl has very thin convenience layer
[02:17:30] <borodust> any opengl guide can do
[02:18:26] <borodust> many recommend learnopengl.com
[02:18:46] <artchad> Is this http://www.opengl-redbook.com/ the "redbook"?
[02:19:01] <artchad> cl-opengl has examples inside a "redbook" directory
[02:19:28] <borodust> it could be it, yes
[02:19:33] <borodust> seems very likelt
[02:19:40] <borodust> *likely
[02:19:42] * artchad proceeds to 100% legally get his hands on that book.
[02:22:31] <borodust> beware: chopping your hands off considered cheating
[02:23:07] <artchad> what are opengl 4 killer features compared to opengl 3?
[02:23:33] <artchad> I know that opengl 3 has things like bloom and smooth stuff compared to opengl 2
[02:24:08] <artchad> I'll probably just learn opengl 3.0 3.1
[02:24:52] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.3)
[02:26:40] <borodust> 3.3 would be the way then
[02:27:09] <borodust> 4 brings many convenience features, new types of shaders
[02:27:25] <borodust> some more enhancements for performance
[02:28:16] <artchad> It seems that the site I linked indeed is the infamous "redbook" of OpenGL.
[02:28:30] <artchad> their github account is called "openglredbook"
[02:28:52] <artchad> then, I guess the examples from https://github.com/openglredbook/examples are similar to the ones in side the examples folder of cl-opengl.
[02:28:59] <artchad> good to know
[02:29:46] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:4856:a4ca:ca7b:cdae) (Remote host closed the connection)
[02:31:10] <artchad> I'm hyped.
[02:31:40] <artchad> but first sleep. Good night.
[02:32:01] *** Joins: phantomics (~phantomic@97-118-136-125.hlrn.qwest.net)
[02:32:04] *** Quits: artchad (~user@public-gprs230031.centertel.pl) (Read error: Connection reset by peer)
[02:39:01] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[04:06:04] *** Joins: notzmv (~zmv@user/notzmv)
[04:07:30] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: ERC (IRC client for Emacs 27.2))
[05:02:02] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 256 seconds)
[10:31:41] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[12:19:21] *** Joins: artchad (~user@public-gprs230031.centertel.pl)
[13:15:26] <artchad> http://www.glprogramming.com/red/chapter01.html explains everything and uses the examples in cl-opengl/examples/redbook.
[13:19:01] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[13:22:05] <artchad> So as I see it, we use (gl:with-primitives <insert-primitve-keyword> <define-vertices>) instead of glBegin() and glEnd()?
[13:25:46] <borodust> artchad: we don't generally use glBegin and glEnd - it's opengl 1.1 technique that was removed since OpenGL 3.3
[13:25:55] <borodust> or earlier
[13:26:26] <borodust> i mean, opengl 1 tech, not particular to 1.1
[13:26:45] <artchad> I just started to learn somewhere. I want to learn OpenGLES 2 to be compatible with a lot of hardware while writing simple games.
[13:27:02] <borodust> you are on a much bigger ride then
[13:27:12] <artchad> eventually when I feel like OpenGLES 2 is limited I might move to OpenGLES 3 or so.
[13:27:24] <borodust> also, does gles2 actually have glbegin?
[13:27:35] * artchad has no clue.
[13:27:54] * artchad just reads random articles and books until he understands the ecosystem
[13:28:26] <borodust> yep, seems like gles2 has deprecated opengl 1 tech removed (glBegin/glEnd)
[13:28:55] <artchad> it seems very error prone. It's easy to forget a call to glEnd()
[13:30:25] <borodust> you really will only get more confused if you start reading random things on the internet regarding opengl
[13:30:39] <borodust> pick a standard as a starting point, then progress from there
[13:31:02] <borodust> GL 3.3 Core Profile is a good and most compatible way these days
[13:31:38] <borodust> if you want gles2, sure, start with it and don't look anywhere else ;p
[13:31:49] <artchad> ok, I trust your expertise.
[13:32:14] <artchad> but I wanted to use the book which uses the same examples as the cl-opengl library.
[13:32:29] <borodust> link me to an example
[13:32:42] <artchad> http://www.glprogramming.com/red/chapter01.html
[13:32:58] <artchad> quicklisp/dists/quicklisp/software/cl-opengl-20191130-git/examples/redbook
[13:33:08] <artchad> it's the hello.lisp
[13:33:17] <artchad> it uses OpenGL 1.1 though as it seems
[13:34:33] <borodust> okay, to the bin it goes! 
[13:34:41] <borodust> unless you want to learn something heavily outdated
[13:34:59] <artchad> > . < ok sensei
[13:35:11] <artchad> what now?
[13:35:50] <artchad> It explains OpenGL in a nice straight forward manner though. And I can learn cl-opengl trouugh comparing the examples and noticing the differences.
[13:35:56] <borodust> for the explanation of what i diverted you from https://learnopengl.com/Getting-started/OpenGL
[13:36:02] <borodust> see Core-profile vs Immediate mode
[13:36:17] <borodust> what you attempted to do, is immediate mode of opengl operation
[13:37:14] * artchad reads that page. brb in 5-10minutes
[13:38:27] <borodust> I guess, if you already have a window, good starting point would be to transcribe https://learnopengl.com/Getting-started/Hello-Triangle
[13:40:03] <borodust> that would be a breaking point, you either continue learning opengl or wish to have much higher level api to work with ;p
[13:40:13] <borodust> *turning point
[13:41:27] <artchad> "breaking point" sounds more honest
[13:41:32] <artchad> xD
[13:42:16] <artchad> btw. I've already used up all my prepaid internet for the month. But because IRC is so light weight I only feel it in the web browser that the internet has gotten a lot slower.
[13:43:26] <artchad> regarding the hell-trianlgle: I guess I will see wether cl-opengl calls map in a consistent fashion to the associated C function calls.
[13:53:55] <borodust> %gl package is what closely resembles C opengl
[13:54:00] <borodust> API
[13:54:37] <borodust> gl package is a lightly lispified layer over straight opengl C API
[13:55:28] <borodust> and, yes, same here, on 2g network IRC pretty much works, while everything else is struggling
[13:55:39] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:dc6a:cea3:1af:140f)
[13:55:58] <borodust> i mean, i'm not on 2g network atm, but when i was, that was my experience :D
[13:58:54] * artchad nuzzles around in %gl
[14:03:10] <borodust> you need to know cffi well too
[14:03:20] <artchad> rip
[14:03:26] <artchad> but using %gl isn't that hard
[14:03:38] <artchad> I can integrate it inside the cl-opengl redbook examples.
[14:05:12] <artchad> I think I might actually start with the website using OpenGL 1.1, because it's more about understanding cl-opengl through that than learning modern OpenGL. I first need to be comfortable. After that I can scrap all the deprecated stuff and learn the newer cool stuff with an appreciation for it's flexibility.
[14:09:31] *** Joins: rtypo (~alex@user/rtypo)
[14:10:49] <borodust> just a warning, that you would also need to scrap really hard, because some functions do slightly different thing and applied in slightly different order in modern opengl
[14:11:55] <borodust> i admire your resolve, but learning several complex things at once is gonna be a tough ride
[14:12:04] <artchad> I appreciate the warning, but at my current stage of understanding it's more important to understand the examles in the cl-opengl repo.
[14:12:33] <artchad> it doesn't use certain OpenGL 1 concepts, so I just ignore those.
[14:13:47] <borodust> good luck then! (no sarcasm)
[14:13:50] <artchad> I just noticed that instead of glBegin() and glEnd() there was a with-primitives context. That's already an important thing I've learned. "Ok, to define objects I'll use a gl:with-primitves context and define vertices.
[14:14:19] <artchad> isn't that the way it's done in OpenGL 3.3 Core?
[14:14:37] <borodust>  when you hit the point when nothing is displayed but the code seems correct, we all have been there, so no worries, ask questions, split the code by concepts for better understanding
[14:14:45] <borodust> althout getting gl1 to work is much easier
[14:15:08] <borodust> artchad: no, there's no such concept in gl3
[14:15:12] <borodust> gl3.3
[14:15:12] <artchad> oh
[14:15:27] <artchad> I'll still learn it. :p
[14:15:46] <borodust> i can't stop you now ;p
[14:17:03] <borodust> inb4 "why did they make modern api so much more complicated than gl1 days" 
[14:17:51] <artchad> I've read the article.
[14:18:26] <artchad> gl1 wil be easier to learn, but it's apparently a lot less flexible, as well as inefficient.
[14:19:04] <borodust> it is much more impactful when you actually see gl1 vs gl3.3 by getting your hands dirty ;p
[14:37:04] <artchad> "(The alternative to retaining data in a display list is processing the data immediately - also known as immediate mode.)"
[14:37:12] <artchad> 1.1 has a display list
[14:37:39] <artchad> "When a display list is executed, the retained data is sent from the display list just as if it were sent by the application in immediate mode. "
[14:40:22] <borodust> display lists is a way to optimize immediate mode calls
[14:40:47] <borodust> display lists are not used in gl3.3
[14:41:58] <borodust> yep, think of opengl 1.1 as something completely different
[14:42:16] <borodust> 99% of the knowledge won't transfer to gl3.3
[14:43:05] <borodust> i think, it's akin to calling Vulkan OpenGL 5
[14:43:14] <borodust> which authors considered
[14:43:32] <borodust> hopefully, they didn't ;p
[14:44:51] <borodust> ah, i didn't mention that before am i, modern opengl (3.3+) is also slowly fading away too
[14:45:24] <borodust> there unlikely to be opengl 5 or 4.7 for that matter
[14:46:00] <artchad> I'm mainly concerned about supporting old thinkpads and raspberry pis
[14:47:28] <borodust> makes sense
[14:47:47] <borodust> maybe gl1 would be just enough for your particular case
[14:48:57] <borodust> but no shaders with immediate mode iirc
[14:49:38] <artchad> there are "per fragment operations" sounds like shader suff to me.
[14:50:35] <artchad> I'm intrigued by the idea of creating the best possible game with such limited tools.
[14:50:48] <artchad> it makes you creative and also forces you to think about performance.
[14:51:20] <artchad> In the end this whole thing is just for me to learn how to write better software and deepen my understanding of the universe. (very esoteric)
[14:51:40] <artchad> lisp is the perfect language for that
[14:54:05] <borodust> per fragment operations does not necessarily involve shaders
[14:54:39] <borodust> shaders are programs you run on gpu, but you can control gpu output through different means
[14:55:51] <borodust> e.g. by flipping some flags in a driver state by invoking some function on client side
[16:05:35] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[16:05:56] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[16:10:18] *** Quits: artchad (~user@public-gprs230031.centertel.pl) (Read error: Connection reset by peer)
[16:23:17] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:dc6a:cea3:1af:140f) (Ping timeout: 240 seconds)
[16:50:02] *** Joins: dthompson (~user@pool-72-74-40-206.bstnma.fios.verizon.net)
[16:50:02] *** ChanServ sets mode: +o dthompson
[16:58:58] *** Joins: artchad (~user@public-gprs230031.centertel.pl)
[16:59:20] <artchad> Did someone write something interesting while I was disconnected?
[16:59:35] <artchad> the last thing I have is "e.g. by flipping some flags in a driver [...]"
[17:15:30] <pjb> Nothing else.
[17:15:41] <pjb> artchad: are you using inferior tools?
[17:29:19] <artchad> pjb: I'm not quite sure.
[17:29:24] <artchad> inferior compared to what?
[17:30:08] <artchad> The only thing I know is that SLIME > sly
[17:30:15] <artchad> huehuehuehue
[17:39:51] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[18:26:37] <pjb> :-)
[18:55:24] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:18e:85f:67dd:e924)
[19:13:27] *** Joins: treflip (~user@user/treflip)
[19:27:57] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:18e:85f:67dd:e924) (Ping timeout: 240 seconds)
[19:36:02] *** Joins: yewscion (~yewscion@72-21-196-65.amazon.com)
[19:41:03] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Quit: WeeChat 3.4)
[19:41:20] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[20:01:44] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[20:27:01] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[20:28:18] *** Joins: domovod (~domovod@176.196.122.197)
[20:32:01] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:18e:85f:67dd:e924)
[20:58:33] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[21:16:01] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[21:33:49] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[21:42:40] <jstoddard> So I just quickloaded trivial-gamekit, and I am more excited than is reasonable to see the "Hello, Gamedev!" example from the README working.
[21:43:58] <artchad> jstoddard: That's how I feel right now while seeing a few simple OpenGL inside my window.
[21:48:33] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:18e:85f:67dd:e924) (Remote host closed the connection)
[21:49:24] <jstoddard> Hahah, yeah, when I got two triangles up in the same window last weekend.
[21:49:40] <borodust> jstoddard: noice! that was an intention :D glad it works for you
[21:49:53] <borodust> *_the_ intention
[21:50:23] <borodust> even more exciting stuff is currently in the works, stay tuned! XD
[21:52:06] <jstoddard> Yeah, thanks for putting it together borodust. I'm looking forward to putting together a tile-based dungeon game to keep me entertained until I can actually do something with OpenGL.
[21:54:45] <jstoddard> Maybe then I'll "graduate" to cl-bodge, haha.
[22:17:01] *** Joins: pjb (~pjb@user/pjb)
[22:26:57] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[22:27:40] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[22:34:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[22:34:46] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[22:35:21] <borodust> jstoddard: nah, cl-bodge is too experimental, you can safely avoid getting into it
[22:36:15] <borodust> it is much more capable than gamekit, but that comes with a great cost
[22:36:41] <borodust> of having no documentation with weirdest API decisions human could have went with
[22:37:09] <borodust> you better wait for more conventional (API wise) alien-works :)
[22:38:14] <jstoddard> Sounds good to me. I'm looking through the trivial-gamekit manual, and it looks plenty sufficient for the 2D stuff I'm capable of writing at the moment.
[22:39:51] <borodust> gamekit is good and mostly conventional
[22:39:52] <jstoddard> Is there anything other than deliver that's definitely specific to CCL and SBCL? That is, is there any reason I shouldn't bother at least trying to load trivial-gamekit in LispWorks when I get home this evening?
[22:40:17] <borodust> mostly because that's what i tried to work with
[22:40:41] <borodust> and also delivery system being specific to implementations
[22:40:58] <borodust> btw, alien-works was tested on lispworks and works no probs
[22:41:28] <borodust> alien-works works on lispworks
[22:41:29] <borodust> okay
[22:44:12] <jstoddard> Cool. I'll look forward to alien-works. I really appreciate the effort that went into trivial-gamekit. The getting started guide and manual are very helpful. I'm used to documentation being hit or miss, so that's really nice.
[22:44:24] <borodust> thanks!
[22:49:55] <borodust> heh, the me speaking in the video linked in the getting started page is so bad i can't barely understand myself there xD
[22:49:59] <borodust> jeez
[22:50:50] <borodust> i should have prepared better rather than doing whatever i was doing
[23:01:23] *** Quits: Kooda (~kooda@natsu.upyum.com) (Ping timeout: 268 seconds)
[23:01:48] *** Joins: Kooda (~kooda@natsu.upyum.com)
