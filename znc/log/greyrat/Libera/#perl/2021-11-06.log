[00:00:01] *** Quits: zhmylove (~zhmylove@146.120.76.72) (Ping timeout: 268 seconds)
[00:03:29] *** Joins: zhmylove (~zhmylove@178.67.194.238)
[00:04:31] *** Joins: jabberwok (~wlindley@75.105.20.104)
[00:10:52] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:11:19] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:14:57] *** Joins: xenial-user5 (~androirc@20014C4C17E1D20061877CC2937EFACE.catv.pool.telekom.hu)
[00:24:51] *** Quits: pizdets (~pizdets@183.182.111.233) (Ping timeout: 250 seconds)
[00:25:09] *** Joins: pizdets_ (~pizdets@183.182.111.212)
[00:29:25] *** Joins: deadmarshal (~deadmarsh@95.38.115.180)
[00:29:34] *** Quits: xenial-user5 (~androirc@20014C4C17E1D20061877CC2937EFACE.catv.pool.telekom.hu) (Ping timeout: 260 seconds)
[00:32:13] *** Quits: bmeneg (~bmeneg@2804:828:f233:5075:e23e:22bf:327a:21ed) (Remote host closed the connection)
[00:35:32] *** Joins: xenial-user5 (~androirc@3EC97C6F.catv.pool.telekom.hu)
[00:37:43] *** Joins: philipp64 (~philipp64@174.27.90.67)
[00:43:11] <philipp64> Hi. I'm using Mimedefang on Fedora 33, and I recently updated... I had been running 2.84 but went to 2.85... which shouldn't have any major changes.  Fedora ships with Perl 5.32.  Anyway, the /usr/bin/mimedefang.pl does a "require" of /etc/mail/mimedefang-filter which is the part that's "site configurable", and indeed I've done a lot of modification.
[00:45:02] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[00:45:16] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[00:45:18] <philipp64> But now it doesn't want to work, and indeed variables that I've defined globally such as "my $gi = Geo::IP->new(GEOIP_STANDARD);"  aren't visible in the filter_functions() that then try to access them.  Not sure why.  It worked for years.  How would I go about figuring out why my global definitions are no longer happening?
[00:50:48] <philipp64> This might be why:
[00:50:49] <philipp64> Variable "$gi" will not stay shared at /etc/mail/mimedefang-filter line 2871.
[00:53:20] *** Quits: EGD (~egd@user/egd) ()
[00:55:33] *** Joins: daex_ (~daex@user/daex)
[00:55:36] *** Joins: rba_ (~rba@2a01:4f8:c2c:7a41::1)
[00:55:37] *** Joins: angryfrosku (~frosku@user/frosku)
[00:56:03] *** Joins: starz_ (starz@2001:41d0:8:4bd3::1)
[00:56:12] *** Joins: pb_ (~pb@polemon.org)
[00:56:13] *** Joins: Aniar_ (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net)
[00:56:14] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:56:18] *** Joins: _koolazer (~koo@user/koolazer)
[00:56:22] *** Joins: ndorf_ (~nd@ob.noxio.us)
[00:56:25] *** Joins: rjsalts_ (~rjsalts@green.spectralmud.org)
[00:56:31] *** Joins: mst_ (~matthewt@vps-6c71e929.vps.ovh.net)
[00:56:37] *** Joins: rozie_ (~rozie@2001:15e8:110:2913:1:1:1:2)
[00:56:39] *** Joins: depesz_ (~quassel@lana.depesz.com)
[00:56:39] *** Joins: FuraiTHD (~Furai@cookiehoster.furai.pl)
[00:56:41] *** Joins: sgrs (~sgrs@185.112.146.78)
[00:56:44] *** Quits: proller (~p@2002:50f0:d845:10:41a5:ca2e:e623:f4b4) (Ping timeout: 268 seconds)
[00:56:48] *** Quits: mcint (mcint@user/mcint) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: pb (~pb@polemon.org) (Ping timeout: 246 seconds)
[00:57:09] *** Joins: taeaad_ (~taeaad@user/taeaad)
[00:57:09] *** Joins: mjh4386_ (~mjh4386@165.22.53.231)
[00:57:10] *** Quits: mst_ (~matthewt@vps-6c71e929.vps.ovh.net) (Changing host)
[00:57:10] *** Joins: mst_ (~matthewt@perl/shadowcat-mst/chainsaw-wielder)
[00:57:15] *** Quits: ndorf (~nd@ob.noxio.us) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: ehuelsmann[m] (~ehuelsman@2001:470:69fc:105::169a) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: rjsalts (~rjsalts@green.spectralmud.org) (Ping timeout: 268 seconds)
[00:57:20] *** Joins: berndj-blackout (~berndj@ns1.linksynergy.co.za)
[00:57:27] *** Quits: tyldis (~vidar@tyldum.com) (Ping timeout: 268 seconds)
[00:57:29] *** Quits: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder) (Killed (sodium.libera.chat (Nickname regained by services)))
[00:57:29] *** mst_ is now known as mst
[00:57:45] *** Joins: tyldis (~vidar@2a03:b0c0:2:d0::80c:c001)
[00:57:46] *** Quits: depesz (~quassel@lana.depesz.com) (Ping timeout: 246 seconds)
[00:57:47] *** Quits: taeaad (~taeaad@user/taeaad) (Ping timeout: 246 seconds)
[00:58:04] *** Quits: prime (~prime@user/prime) (Ping timeout: 268 seconds)
[00:58:04] *** Joins: kensanata (~user@user/kensanata)
[00:58:17] *** Joins: tomaw_ (~tom@libera/staff/tomaw)
[00:58:18] *** Joins: mcint1 (mcint@pox.ocf.berkeley.edu)
[00:58:23] *** Quits: Frosku (~frosku@user/frosku) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: daex (~daex@user/daex) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: rba (~rba@2a01:4f8:c2c:7a41::1) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: Aniar (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: Michael[m]123 (~mbuddemat@2001:470:69fc:105::1:16a9) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: starz (~starz@2001:41d0:8:4bd3::1) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: rozie (~rozie@2001:15e8:110:2913:1:1:1:2) (Ping timeout: 264 seconds)
[00:58:23] *** rba_ is now known as rba
[00:58:23] *** Quits: latk (~latk@2001:470:69fc:105::255) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: sgrs_ (~sgrs@185.112.146.78) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: glider_ (~glider@user/glider) (Ping timeout: 264 seconds)
[00:58:24] *** Quits: berndj (~berndj@ns1.linksynergy.co.za) (Ping timeout: 264 seconds)
[00:59:12] <mst> mmm ... li'l bit of turbulence apparently
[00:59:20] *** Quits: xenial-user5 (~androirc@3EC97C6F.catv.pool.telekom.hu) (Read error: Connection reset by peer)
[00:59:38] *** Joins: prime (~prime@user/prime)
[00:59:49] *** Joins: xenial-user5 (~androirc@20014C4C17E1D20061877CC2937EFACE.catv.pool.telekom.hu)
[01:00:49] *** Quits: tomaw (tom@libera/staff/tomaw) (Killed (tungsten.libera.chat (Nickname regained by services)))
[01:00:49] *** tomaw_ is now known as tomaw
[01:01:03] *** Joins: Michael[m]123 (~mbuddemat@2001:470:69fc:105::1:16a9)
[01:01:04] *** Quits: zhmylove (~zhmylove@178.67.194.238) (Read error: Connection reset by peer)
[01:01:46] *** berndj-blackout is now known as berndj
[01:02:45] *** Joins: zhmylove (~zhmylove@178.252.127.211)
[01:03:27] *** Joins: glider (~glider@user/glider)
[01:03:38] *** Quits: mcint1 (mcint@pox.ocf.berkeley.edu) (Changing host)
[01:03:38] *** Joins: mcint1 (mcint@user/mcint)
[01:03:39] *** Quits: mns` (~fu@186.231.92.60) (Ping timeout: 256 seconds)
[01:03:46] *** Quits: tomaw (~tom@libera/staff/tomaw) (Quit: Quitting)
[01:04:38] *** Joins: tomaw (~tom@libera/staff/tomaw)
[01:05:17] *** Joins: mns` (~fu@191.253.157.69)
[01:05:30] *** Joins: ehuelsmann[m] (~ehuelsman@2001:470:69fc:105::169a)
[01:05:58] *** mcint1 is now known as mcint
[01:06:48] *** Quits: tomaw (~tom@libera/staff/tomaw) (Client Quit)
[01:07:30] *** Quits: ndorf_ (~nd@ob.noxio.us) (Quit: libera sucks)
[01:07:38] *** Joins: ndorf (~nd@ob.noxio.us)
[01:07:51] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[01:08:20] <philipp64> I've tried changing "my" to "our", I've tried "use vars qw($gi);" and "$gi = Geo::IP->new(GEOIP_STANDARD);" and that doesn't work either...
[01:09:04] *** Joins: tomaw (tom@libera/staff/tomaw)
[01:09:31] *** Joins: proller (~p@2a02:6b8:b081:8812::1:1b)
[01:09:37] <mst> philipp64: 'will not stay shared' means you're defining a function inside a function which never worked right
[01:10:10] <philipp64> no, these are scalars, hashes, and arrays.
[01:10:56] <mst> philipp64: look, I'm telling you what that warning *means*
[01:11:35] <mst> you can say "no" all you like, perl will not work any differently
[01:12:03] <mst> if you want to give me more details about what your code does and what goes wrong I might have more ideas
[01:12:07] <choroba> See "perldiag" for an explanation
[01:12:31] <choroba> perlbot: perldiag
[01:12:31] <perlbot> choroba: various Perl diagnostics - https://perldoc.pl/perldiag
[01:12:33] <mst> but I don't yet even know what a filter_functions() *is*
[01:13:36] *** Joins: latk (~latk@2001:470:69fc:105::255)
[01:15:43] *** Joins: pizdets (~pizdets@183.182.114.21)
[01:16:18] *** Quits: pizdets_ (~pizdets@183.182.111.212) (Ping timeout: 260 seconds)
[01:17:12] * GumbyPAN CPAN Upload: Net-RFC3161-Timestamp-0.020 by AKHUETTEL https://metacpan.org/release/AKHUETTEL/Net-RFC3161-Timestamp-0.020
[01:17:39] <mst> philipp64: can haz more information please?
[01:19:55] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[01:21:15] *** Quits: xenial-user5 (~androirc@20014C4C17E1D20061877CC2937EFACE.catv.pool.telekom.hu) (Read error: Connection reset by peer)
[01:22:00] *** Quits: haj1 (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[01:22:23] *** Joins: R2robot (~R2robot@user/r2robot)
[01:27:26] *** Quits: mns` (~fu@191.253.157.69) (Ping timeout: 260 seconds)
[01:35:10] *** Quits: murrayn (~murray@static.38.4.181.135.clients.your-server.de) (Changing host)
[01:35:10] *** Joins: murrayn (~murray@user/murrayn)
[01:41:29] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[01:41:49] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[01:46:53] *** Quits: edef (~edef@user/edef) (Ping timeout: 264 seconds)
[01:47:18] *** Quits: Su-Shee (~Susanne@p4ffc7162.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[01:47:47] *** Joins: edef (~edef@user/edef)
[01:48:56] *** Joins: Su-Shee (~Susanne@p4ff49bd9.dip0.t-ipconnect.de)
[01:49:27] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[01:49:30] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[01:49:30] *** finn_elija is now known as FinnElija
[01:50:46] *** Quits: deadmarshal (~deadmarsh@95.38.115.180) (Ping timeout: 260 seconds)
[01:56:42] *** Joins: monkey_ (~user@190.104.116.153)
[02:02:26] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 260 seconds)
[02:05:48] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[02:06:23] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[02:10:18] *** Joins: whynot (~whynot@37.73.136.76)
[02:16:33] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[02:17:32] *** Quits: eblip (~eb0t@90.202.252.138) (Ping timeout: 268 seconds)
[02:19:00] *** Joins: eblip (~eb0t@90.202.254.138)
[02:20:23] *** Joins: xenial-user5 (~androirc@20014C4C17E1D20061877CC2937EFACE.catv.pool.telekom.hu)
[02:22:34] *** Parts: jabberwok (~wlindley@75.105.20.104) ()
[02:28:58] *** Quits: xenial-user5 (~androirc@20014C4C17E1D20061877CC2937EFACE.catv.pool.telekom.hu) (Read error: Connection reset by peer)
[02:33:11] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 256 seconds)
[02:33:59] *** Quits: pizdets (~pizdets@183.182.114.21) (Ping timeout: 250 seconds)
[02:34:03] *** Joins: pizdets_ (~pizdets@183.182.110.19)
[02:38:30] *** Quits: proller (~p@2a02:6b8:b081:8812::1:1b) (Ping timeout: 268 seconds)
[02:39:06] *** Quits: hyperreal (hyperreal@fedora/hyperreal) (Quit: the lounge - https://webirc.envs.net)
[02:48:51] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[02:49:32] *** Joins: monkey_ (~user@190.104.116.153)
[02:51:02] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[02:51:16] *** Joins: gast0n (~g4570n@user/gast0n)
[03:00:13] *** Joins: tomys_ (~tomys@c188-149-14-10.bredband.tele2.se)
[03:02:17] *** Joins: deadmarshal (~deadmarsh@95.38.112.23)
[03:03:47] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 268 seconds)
[03:04:20] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[03:06:37] *** Quits: deadmarshal (~deadmarsh@95.38.112.23) (Ping timeout: 256 seconds)
[03:20:54] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[03:32:09] *** Quits: zkrd (~xdg@2a02:587:de06:100:b5ad:8f13:9734:dacb) (Ping timeout: 268 seconds)
[03:34:14] <SergeiZhmylev> Is there any way to read perldoc.pl/modules on the system w/o internet, with regular perldoc installed? It's the only page I for which need to start web browser and it's annoying
[03:40:44] <choroba> it's part of perldoc perlmodlib
[03:43:00] <daemon> SergeiZhmylev, might be perldoc -m you are looking for
[03:43:30] <daemon> oh the entire list
[03:43:31] <daemon> never mind
[03:43:51] <zhmylove> 10q pals
[03:45:15] <Grinnz> all pages on there are extracted from some existing perldoc, except for the list of functions by name which is generated from Pod::Functions
[03:47:59] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[03:51:28] * GumbyPAN CPAN Upload: App-Dex-0.002002 by SYMKAT https://metacpan.org/release/SYMKAT/App-Dex-0.002002
[03:53:32] *** Quits: gloin (~gloin@user/gloin) (Remote host closed the connection)
[03:56:11] *** Quits: magla (~gelignite@55d469ae.access.ecotel.net) (Quit: Stay safe!)
[04:16:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[04:17:35] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:23:02] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[04:27:59] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:37:09] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[04:51:28] <philipp64> mst: here's a sanitized version of my filter... https://paste.centos.org/view/046e4258
[04:51:30] <Paperbot> Link title(s): [ UNTITLED - Pastebin Service ]
[04:51:47] <philipp64> it gets require'd by mimedefang.pl
[04:52:29] <philipp64> one of the problems I'm having has to do with declaring: our $gi = Geo::IP->new(GEOIP_STANDARD);
[04:52:45] <philipp64> as I said, but then when it actually gets used, it's unset.
[04:55:00] <philipp64> similarly, I'm seeing errors when I do: my $ref = $bad_net->match_string($hostip);
[04:55:17] <philipp64> even though globally I've had: our $bad_net = Net::Patricia->new();
[04:58:43] *** Quits: zhmylove (~zhmylove@178.252.127.211) (Remote host closed the connection)
[04:58:56] *** Joins: zhmylove (~zhmylove@178.252.127.211)
[05:01:35] *** Quits: CycoCid (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au) (Ping timeout: 264 seconds)
[05:04:48] <philipp64> mst: does that help any?
[05:08:58] *** Quits: Pali (~pali@user/pali) (Ping timeout: 268 seconds)
[05:14:43] <mst> philipp64: sorry, I was out at the pub
[05:16:26] <mst> > sub filter_relay($$$$$$$) {
[05:16:34] <mst> that's a footgun
[05:16:45] <mst> but probably not the problem
[05:17:19] <xenu> how come this code isn't strict compliant and yet it has "use v5.16" which enables strict?
[05:17:32] <xenu> anyway my money is on mismatched { } somewhere
[05:17:36] <mst> philipp64: nothing in that code -uses- $gi
[05:17:47] <mst> philipp64: the only line that would is commented out
[05:18:04] <mst> philipp64: so, uh, maybe that's the problem?
[05:25:29] <mst> xenu: I'm assuming the stripping down made it non-strict
[05:25:58] <mst> and since this code has clearly been cared for even if we might not agree with every choice made, I'm not going to get mad about that
[05:39:58] *** Quits: Su-Shee (~Susanne@p4ff49bd9.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:41:45] *** Joins: Su-Shee (~Susanne@p4ff4961a.dip0.t-ipconnect.de)
[05:44:58] <aquanight> perlbot: eval use v5.16; print $x;
[05:45:00] <perlbot> aquanight: 1
[05:45:18] <aquanight> are we sure use v5.16 enables strict?
[05:45:25] <aquanight> perlbot: eval BEGIN { $^H = 0; } use v5.16; print $x;
[05:45:26] <perlbot> aquanight: ERROR: Global symbol "$x" requires explicit package name (did you forget to declare "my $x"?) at (IRC) line 1. 
[05:45:31] <aquanight> oh it does
[05:45:59] <aquanight> perlbot: eval BEGIN { $^H = 0; } use POSIX 'uname'; use Time::HiRes qw(gettimeofday tv_interval); use v5.16; print $x;
[05:46:01] <perlbot> aquanight: ERROR: Global symbol "$x" requires explicit package name (did you forget to declare "my $x"?) at (IRC) line 1. 
[05:46:40] * GumbyPAN CPAN Upload: PDL-2.057_05 by ETJ https://metacpan.org/release/ETJ/PDL-2.057_05
[06:00:05] <daemon> eval5.16: use v5.16; $^V
[06:00:10] <perlbot> daemon: bless( {original => "v5.16.3",qv => 1,version => [5,16,3]}, 'version' )
[06:00:24] <daemon> to use the binary from that version
[06:00:35] <daemon> I think it supports minor versions too
[06:17:48] *** Joins: Kulrak (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au)
[06:20:51] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[06:23:22] <sivoais> ugh, so I'm updating an Perl interface for SWI-Prolog. Turns out in SWI-Prolog V8.1.30, they added a symbol PL_version. And Perl also has a PL_version symbol.
[06:23:30] <philipp64> mst: footgun?
[06:23:55] <mst> philipp64: things that let you shoot yourself in the foot
[06:24:06] <mst> philipp64: I'm trying to help but I don't know enough to yet, sorry
[06:24:13] <mst> philipp64: http://trout.me.uk/data.jpg
[06:24:39] <mst> philipp64: but given your code never uses $gi - maybe that's why it isn't helping?
[06:25:20] <philipp64> no, I commented it out because it was failing when it hit that line...
[06:26:21] <mst> philipp64: if you show me code that's commented out, I can only assume
[06:26:43] <philipp64> yes, of course.
[06:27:03] <mst> philipp64: I'm sorry, but if you show me code that *doesn't* throw an error, it's hard for me to know that *does* throw an error
[06:27:34] <philipp64> wait... what about line 2865?
[06:28:35] <philipp64> I removed the: use 5.16;
[06:28:37] <philipp64> no joy.
[06:29:09] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[06:29:19] <mst> philipp64: what did that log? you never told me
[06:29:26] *** Quits: tomys_ (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 260 seconds)
[06:29:39] <philipp64> what did which log?  the md_syslog() line?
[06:29:50] <philipp64> Nov  5 20:59:22 localhost mimedefang.pl[14041]: 1A62xM3q014049: gi=(undef)
[06:30:12] <mst> philipp64: so the variable *did* exist but was undef
[06:31:05] <mst> philipp64: your Geo::IP->open call is returning undef
[06:31:12] <mst> philipp64: that's what you need to debug
[06:32:22] <philipp64> no, look at lines 2850-2851
[06:32:37] <mst> philipp64: or it's throwing an error and something is eating it
[06:33:06] <philipp64> It's like the "sub xxx()" definitions are happening, but that's all... none of the inline statements at the global scope seem to be executed.
[06:33:22] <mst> 'sub foo { ...' happens at compile time
[06:33:43] <mst> our $gi = Geo::IP->new(GEOIP_STANDARD); is throwing an error and somebody else's code is hiding it
[06:33:47] <mst> change it to
[06:34:20] <mst> our $gi = eval { Geo::IP->new(GEOIP_STANDARD) } || die "Error creating GeoIP object: $@";
[06:34:29] <mst> and see if *that* gives you an error
[06:34:40] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 268 seconds)
[06:34:45] <mst> line 2851 likely doesn't help at all, sorry
[06:36:37] <philipp64> no joy... still undef.
[06:37:01] <mst> philipp64: if $gi was undef the die would've fired
[06:37:21] <mst> philipp64: look at logs or something
[06:40:04] <mst> philipp64: I can help with perl problems, but "something I have no idea about eating the error message" isn't a perl problem :(
[06:43:52] <ology> Looks like I use my $gi = Geo::IP::PurePerl->new( $GEODAT, GEOIP_STANDARD ); # With a $GEODAT db file. That's kind of old now though...
[06:44:52] <ology> Oh. *::PurePerl. Didn't notice that bit.
[06:45:43] <aquanight> what is even running this thing
[06:45:50] <aquanight> like what's the execution context
[06:46:34] <mst> aquanight: this:
[06:46:36] <mst> 21:13 < philipp64> Hi. I'm using Mimedefang on Fedora 33, and I recently updated... I had been running 2.84 but went to 2.85... which shouldn't have any major changes.  Fedora ships with Perl 5.32.  Anyway, the /usr/bin/mimedefang.pl does a "require" of /etc/mail/mimedefang-filter which is the part that's "site configurable", and indeed I've done a lot of modification.
[06:46:40] <aquanight> because I'm still baffled how it can have $var = "stuff"; after a use v5.16;
[06:46:49] <mst> aquanight: ^^
[06:48:45] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[06:49:35] <aquanight> mst: right but
[06:49:45] <aquanight> looking at the version of his config that was linked
[06:49:56] <aquanight> how does it go from use v5.16; which should enable strict
[06:50:04] <mst> aquanight: he's given us half of it, let's assume the 'strict errors' aren't actually there
[06:50:07] <aquanight> to $ClamdSock = "..."; with no prior decl and not die right there?
[06:50:28] <mst> philipp64 still didn't show us nearly enough information but we'll see
[06:50:52] <aquanight> see what that tells me is that it's possible there was a block or something that's swallowing the code
[06:51:02] <mst> duh
[06:51:41] <mst> the code is a lie, and philipp64 has probably made it impossible for us to help, but I'm bored so I'm trying anyway
[06:58:17] <ology> Happy Friday/Saturday
[06:59:26] <philipp64> aquanight: I took out the "use 5.16;" but no difference.
[06:59:48] <mst> philipp64: I have aksed for six hours for actual details but no details
[06:59:56] <mst> philipp64: you are making it impossible for us to help.
[07:00:11] <philipp64> mst: sorry, was feeding/showering my kids, etc.
[07:00:24] <mst> philipp64: no.
[07:00:40] <mst> philipp64: you came back from that and still didn't give us details.
[07:00:52] <mst> philipp64: right now we need to see -all- the code and -all- the errors
[07:01:15] <mst> philipp64: that original warning was a problem and you tried to argue with me about how perl works rather than letting me help
[07:02:02] <mst> philipp64: I want to help you but making it impossible for me to do that is, at this point, a choice -you- have made, sorry.
[07:02:09] <ology> 20:02:22 philipp64> no, look at lines 2850-2851 <- Where is the paste? I have missed it in scrollback.
[07:02:11] <philipp64> The wrapper that brings this in is here: https://github.com/The-McGrail-Foundation/MIMEDefang/blob/master/mimedefang.pl.in#L5313
[07:02:14] <Paperbot> Link title(s): [ MIMEDefang/mimedefang.pl.in at master · The-McGrail-Foundation/MIMEDefang · GitHub ]
[07:02:23] <ology> Ah
[07:02:38] <mst> philipp64: if you add 'die "fuck";' to your code, do you know how to see that error?
[07:02:49] <philipp64> ology: paste is here: https://paste.centos.org/view/046e4258
[07:02:50] <Paperbot> Link title(s): [ UNTITLED - Pastebin Service ]
[07:02:53] <mst> philipp64: because I already showed you how to use die to debug the undef problem
[07:03:02] <mst> philipp64: until you can actually find errors
[07:03:13] <mst> philipp64: telling me "no error" is basically a lie.
[07:03:27] <aquanight> I will say one thing
[07:03:40] <aquanight> if the idea is that something is eating exceptions from some call foo()
[07:03:49] <mst> it might be
[07:03:51] <aquanight> replacing it with do { foo() || die } doesn't really avoid that
[07:03:56] <mst> yes
[07:04:01] <mst> that's my point
[07:04:05] <aquanight> if the theory is that it's something above the calling code that's eating the error
[07:04:12] <mst> philipp64 refusing to try and find the problem is why I don't know
[07:04:29] <mst> this is why I am sad
[07:04:30] <aquanight> but
[07:04:49] <aquanight> the only thing above this is that mimedefang plate or whatever it is
[07:07:03] * ology holds up his Woodford Reserve shot - Salut!
[07:07:34] <mst> ology: hah, I had woodford in the bar as my last drink before coming home :D
[07:07:40] <ology> nice
[07:07:44] <philipp64> how would I find what's catching the error?
[07:08:05] <ology> philipp64: How do you run the program?
[07:08:21] <mst> philipp64: where is your standlone script creating a Geo::IP object?
[07:08:22] <philipp64> it's run from inside a systemd .service wrapper
[07:08:52] <aquanight> doesn't stderr in a systemd unit get shoved into the journal?
[07:08:55] <mst> philipp64: you've not showed us that yet
[07:09:03] <philipp64> mst: it's not standalone... as I said, mimedefang.pl does a "require 'mimedefang-filter';"
[07:09:05] <daemon> can't you tell systemd to shove stderr/stdout to a log file?
[07:09:17] <mst> philipp64: you're not listening
[07:09:23] <mst> philipp64: do you want help or not?
[07:09:30] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:09:30] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:09:30] *** finn_elija is now known as FinnElija
[07:09:56] <philipp64> it does by default... https://paste.centos.org/view/0d5ae647
[07:09:57] <Paperbot> Link title(s): [ UNTITLED - Pastebin Service ]
[07:10:11] <mst> philipp64: you can *test* parts of this code by running all the not-mimedefang-specific parts separately
[07:10:21] <mst> philipp64: until you do that, you aren't debugging anything
[07:10:38] <philipp64> mst: I added: die "fuck"; 
[07:10:43] <philipp64> and it changed nothing...
[07:10:48] <daemon> as you are capturing stderr/stdout you could just bonk a load of prints all over the place and get them to spit out values so you can figure out what is wrong
[07:10:57] <mst> philipp64: so your entire system is broken and this isn't a perl problem
[07:11:13] <philipp64> right above the: use Geo::IP;
[07:11:24] <mst> philipp64: if that doesn't change anything, this is a centos bug
[07:11:29] <mason> philipp64: https://yewtu.be/watch?v=RnZ1MN16Yvw
[07:11:30] <Paperbot> Link title(s): [ Quick Impression - Invidious ]
[07:11:38] <mst> philipp64: and perl knowledge won't actually help here, sorry
[07:11:42] <daemon> mst, you mean its a victim of the bug known as centos :D
[07:12:15] <aquanight> philipp64: ok crazy thought here
[07:12:23] <aquanight> in your 'use' block add use Carp;
[07:12:40] <mst> I might try opening a filehandle onto a tempfile
[07:12:43] <aquanight> then start peppering Carp::cluck "something"; calls everywhere
[07:12:54] *** Quits: Somni (insomnia@77-88-237-24.gci.net) (Quit: leaving)
[07:12:56] <aquanight> until you find isolate the part where it stops existing
[07:13:15] <philipp64> I'm running Fedora 33:
[07:13:25] <mst> philipp64: you should have tried that die() I suggested first
[07:13:33] <mst> philipp64: your perl code isn't even the problem
[07:13:51] <philipp64> sorry, which die?  You suggested a couple?
[07:13:54] <aquanight> I think it might be worth asking *where* he added the 'die "fuck"'
[07:14:04] <aquanight> because if something is causing a premature exit it'll never get there
[07:14:06] <mst> if that die doesn't produce an error
[07:14:12] <mst> philipp64's setup is eating errors
[07:14:19] <mst> and the /etc file doesn't even matter yet
[07:14:27] *** Joins: Somni (~insomnia@77-88-237-24.gci.net)
[07:14:45] <mst> I just spent hours debugging the wrong thing because of lack of information :(
[07:15:47] <daemon> mst, could be worse you could actually work in customer support
[07:15:52] <mst> philipp64: if the die before the 'use GEO::IP' isn't showing up in your logs
[07:16:02] <mst> philipp64: your code isn't getting loaded properly at all
[07:16:11] <mst> philipp64: so all the effort we spent trying to debug it was asted
[07:16:24] <aquanight> wouldn't you need to possibly do BEGIN { die "fuck"; }
[07:16:43] <mst> aquanight: I wanted to see if executiuon of the file even got that far
[07:16:46] <mst> evidently not
[07:16:50] <mst> hence why $gi is undef
[07:16:53] <mst> it's all broken
[07:17:25] <daemon> you could gethim to swap the perl script target with a custom small perl script with something that just echo time to /tmp/did_it_work
[07:17:32] <daemon> if you wanted to check the execution chain
[07:18:09] <aquanight> the fuck is this line
[07:18:11] <aquanight> { $white_ips{$_} = 1; } map qw(40.107.237.41 40.107.237.57 40.107.95.70);
[07:18:23] <aquanight> I think you got the map and block backward there
[07:18:35] <daemon> eval: { $white_ips{$_} = 1; } map qw(40.107.237.41 40.107.237.57 40.107.95.70); Dumper $white_ips
[07:18:37] <perlbot> daemon: $VAR1 = undef; 
[07:18:51] <philipp64> aquanight: sorry, which 'use' block?
[07:18:57] <mst> daemon: last time I did customer support it was because of sony europe's SCEE sysadmins raging out that my mail servers wouldn't accept their email
[07:19:12] <daemon> mst, I did it when I was 17 and got hired in 18 minutes
[07:19:14] <mst> daemon: I replied with "yes, you've failed the open relay checker"
[07:19:15] <daemon> fired*
[07:19:25] <daemon> for dixons store group
[07:19:37] <mst> daemon: they raged out some more about how they'd tried like twelve online relay checkers and it was fine
[07:20:03] <mst> daemon: I replied with a port 25 telnet session that showed their mail servers accepting an email to test@reayl-test.invalid and giving me back a queue id
[07:20:21] <philipp64> mst: sorry, "isn't getting loaded properly".. okay, but it is getting loaded, if we're seeing the output of some of my md_syslog()'s... right?
[07:20:27] <daemon> mst, I had to deal with a guy who bought a printer and wanted to edit pictures ... on the printer, because it came with some photo editing software.
[07:20:33] <mst> philipp64: you can't show me any error output
[07:20:39] <mst> philipp64: so I've no idea
[07:21:01] <mst> daemon: sony went silent after that, but I noted that after 48h or so their mail servers were fixed and we were accepting messages from them again
[07:21:13] <mst> philipp64: you could replace die()s with your md_syslog() and see if that helps
[07:21:31] <mst> philipp64: I don't know, I know perl, md_syslog() is *your* thing and not something we know anything about, sorry
[07:21:41] <philipp64> okay, fixed the broken map { } line...
[07:22:35] <aquanight> HOLY SHIT FOUND IT
[07:22:38] <philipp64> mst: error output was already pasted here... https://paste.centos.org/view/0d5ae647
[07:22:39] <Paperbot> Link title(s): [ UNTITLED - Pastebin Service ]
[07:22:41] <philipp64> see above.
[07:22:44] <aquanight> philipp64: your filter_begin sub has a runaway {
[07:23:14] <mst> hah, so my original 'you have nested subs' from six hours ago that philipp64 argued with was right!
[07:23:17] <mst> aweomse
[07:23:29] *** Quits: whynot (~whynot@37.73.136.76) (Quit: leaving)
[07:23:41] <aquanight> and the fact that it *SOMEHOW* matched the } at the END of your file means you either blindly slapped a } to quiet a parse error of that type
[07:23:46] <aquanight> or you somehow managed to miss a { also
[07:23:57] <daemon> philipp64, if you have a working system you want to change and you do not have git or svn or w/e always take a backup, at the very least a diff of what you changed to make it broken is very handy for people who might want to help you
[07:24:33] <mst> philipp64: so you never got an error from the $gi constructions because you ignored the very first thing I told you.
[07:24:48] <aquanight> philipp64: find your filter_begin and check that if block right at the end. The bracketing of that block is not correct.
[07:25:04] <mst> 21:20 < philipp64> Variable "$gi" will not stay shared at /etc/mail/mimedefang-filter line 2871.
[07:25:23] <mst> 21:39 < mst> philipp64: 'will not stay shared' means you're defining a function inside a function which never worked right
[07:25:26] <mst> 21:40 < philipp64> no, these are scalars, hashes, and arrays.
[07:25:39] <philipp64> aquanight: no, it was probably a patch issue where I generated diffs and then applied them with patch but they took to the wrong context...
[07:25:51] <mst> philipp64: it's now 03:55 and aquanight just proved it was the problem I told you about six hours ago
[07:25:54] <mst> philipp64: fix that.
[07:26:04] <aquanight> philipp64: I only have the version you pasted to look at
[07:26:13] <mst> and don't tell aquanight 'no' when this is clearly the problem
[07:26:13] <aquanight> philipp64: I could quote a line number from that version
[07:26:17] <philipp64> mst: sorry, I misunderstood what you were saying.
[07:26:27] <mst> philipp64: and now you're arguing with aquanight
[07:26:29] <aquanight> philipp64: but since it's obviously a stripped version to begin with all I can say is
[07:26:31] <mst> philipp64: stop it and let us help.
[07:26:33] <aquanight> go look at that sub
[07:26:38] <aquanight> look at your brackets
[07:26:41] <aquanight> count them
[07:26:49] <philipp64> aquanight: I'm saying "no" to slapping a "}" on to quiet warnings... not what I did.
[07:26:49] <aquanight> if your editor has it, use the "jump to matching brace" function
[07:27:13] <philipp64> my editor is vim and it gets confused by braces in comments.  sigh.
[07:27:14] <mst> philipp64: if you say 'no' to somebody who is telling you the truth about your problem a third time, you will be banned.
[07:27:18] <daemon> philipp64, eh everyone messes up at some point, but yeah even a cp -R of what is going to be changed can be a god send
[07:27:40] <aquanight> is vim not smart enough to skip comments?
[07:27:42] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Ping timeout: 268 seconds)
[07:27:44] <mst> philipp64: either let us help or don't. but if you won't let us help, expect us to clear the channel for people who actually -do- want help.
[07:27:56] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[07:28:02] <aquanight> then again I don't know if N++ is either
[07:28:04] <philipp64> I was saying no to "and the fact that it *SOMEHOW* matched the } at the END of your file means you either blindly slapped a } to quiet a parse error of that type"
[07:28:26] <mst> philipp64: and I told you six hours ago this was the syntax problem and you refused to look
[07:28:32] <philipp64> aquanight: vim is a little stupid.
[07:28:34] <mst> philipp64: stop arguing and go and actually look please.
[07:28:42] <philipp64> looking now.
[07:30:08] <aquanight> I mean I pretty much found it by starting from the 'our $gi =' and going backward with the notepad++'s bracejump
[07:30:13] <aquanight> I doubt it's *that* much smarter than vim
[07:30:59] <aquanight> if there's something like a prettyprinter/reformatter for perl, it might be worth using
[07:31:09] <daemon> pertidy would likely have made it blatently obvious as well
[07:31:14] <aquanight> perltidy that's what I was thinking of
[07:33:26] <philipp64> I ran "perl -wc mimedefang.pl" and it never complained...
[07:33:48] <aquanight> when I checked filter_begin's { it matched it to the } at the end of your file
[07:34:03] <aquanight> that *could* be notepad++ being stupid
[07:34:15] <aquanight> but it could also mean it's possible you have a 2nd error later missing a {
[07:34:47] <aquanight> and the collision of these two syntax oopsies conspired to create a "technically correct" code that put all your toplevel code inside filter_begin
[07:35:08] *** Joins: deadmarshal (~deadmarsh@95.38.112.23)
[07:36:16] <aquanight> ok so not quite the end
[07:36:19] <aquanight> but very close to it
[07:36:40] <aquanight> but basically this if block was not properly terminated:     if ($serverport == 25) {
[07:37:32] <aquanight> and every sub from filter to filter_helo got swallowed up in it
[07:37:53] <aquanight> plus all the toplevel code in between those points
[07:38:24] <aquanight> hmm
[07:38:27] <aquanight> this gives me an idea
[07:38:54] <aquanight> we need like an EXEC {} phaser which runs the code during "toplevel execution" regardless of what it's lexically inside of
[07:39:01] <aquanight> like after UNITCHECK
[07:39:14] <mst> given he didn't change his file but did change his fedora (i.e, experimental redhat with free compat breakage) install
[07:39:36] <mst> especially given the direct 'perl -wc' being fine
[07:39:47] <mst> I bet the problem was prototype changes in the outside script
[07:39:50] <philipp64> aquanight: "but it could also mean it's possible you have a 2nd error later missing a {" -- yeah, seems like that was exactly it...
[07:39:54] *** Quits: deadmarshal (~deadmarsh@95.38.112.23) (Ping timeout: 260 seconds)
[07:40:09] <aquanight> I'm not sure about the "didn't change his file" part
[07:40:15] <aquanight> 21:55:37/E9E39 < philipp64> aquanight: no, it was probably a patch issue where I generated diffs and then applied them with patch but they took to the wrong context...
[07:40:28] <mst> ohhh fuck sorry missed that part
[07:40:30] <mst> so yes
[07:40:32] <aquanight> this sounds like the answer was diff'ing the file against the unmodified config and reapplying it as a patch against an updated version
[07:40:42] <aquanight> which seems like a reasonable thing to do with *most* config files
[07:41:08] <aquanight> but is, obviously, an unmitigated disaster with perl
[07:41:15] <aquanight> only perl can parse perl :P
[07:41:29] <daemon> aquanight, not true, ORK can to :) 
[07:41:32] <mst> would've been reasonable this time if philipp64 hadn't spent six hours not believing I was right the first time
[07:41:51] <aquanight> to be fair, if I wasn't on a crusade looking for lost {}
[07:41:56] <aquanight> I can't be sure I would've seen it
[07:42:07] <daemon> aquanight, but you would if you thrown perltidy against it
[07:42:22] <aquanight> daemon: to be fair I've literally never used perltidy
[07:42:23] <aquanight> ever
[07:42:29] <mst> aquanight: to be fair, I realised that was the problem six hours ago and was told I was wrong
[07:42:40] <daemon> aquanight, oh you should its kind of handy
[07:42:50] <daemon> aquanight, there is another thing as well .. perlcritic I believe its
[07:43:02] <daemon> that looks up common problems and stuff, it can be integrated with vscode
[07:43:13] <aquanight> mst: what I mean is I can see how it's easy to get all gloss-eye and "see" all the {/} in the right place when some of them aren't really there
[07:43:24] <aquanight> daemon: perlcritic I have used
[07:43:47] <aquanight> mst: I know it's a mistake I've likely made more than a few times
[07:43:52] <aquanight> and would swear up and down it's all there
[07:44:06] <mst> aquanight: he had a "variable will not stay shared" warning
[07:44:13] <aquanight> until something prompts me to look at something else forever. Then come back and. Um. Why is there no } here.
[07:44:20] <daemon> its why I write all my perl scripts with exit main(@ARGV); as an entry point and effectively everything is a function like it would be in c
[07:44:21] *** Joins: grys (~gry@botters/gry)
[07:44:22] <mst> aquanight: you don't need to be gloss-eyed, you just have to listen to perl
[07:44:34] <daemon> if there is any problems with braces matching its immediately clear 
[07:44:53] <aquanight> mst: which I maintain is the most badly worded warning in terms of what it's actually warning you about.
[07:44:59] *** Quits: gry (~gry@botters/gry) (Ping timeout: 268 seconds)
[07:45:09] <mst> aquanight: sure, that's why I told him
[07:45:17] <mst> then got told I was wrong
[07:45:22] <mst> hours later ... well
[07:45:50] <aquanight> mst: guess my point is I could see myself making that same mistake. Especially before I really understood what closure warnings *are*.
[07:46:13] <mst> my point is I don't mind what mistake you've made
[07:46:24] <mst> i just expect you to listen to me when I try to help you
[07:47:27] <mst> philipp64 has been otherwise lovely and I think next time will try and understand the help rather than ignoring it, so it'll all be good :)
[07:48:02] <daemon> a happy ending
[07:49:40] <aquanight> mst: I suppose it helps I don't think I've ever built up a big giant monolith .pl (srsly how many thousands of lines was that) like that
[07:49:56] *** starz_ is now known as starz
[07:50:01] <aquanight> it only didn't take for-fucking-ever to find where the } was missed because N++ bracejumping
[07:50:03] <mst> aquanight: the way mimedefang is set up encourages that
[07:50:12] <aquanight> it's perl
[07:50:22] <aquanight> mkdir /etc/whatever/mimedefang.d/
[07:50:39] <mst> to the users, it's a config file that's incidentally written in perl
[07:50:50] <aquanight> -> do $_ for </etc/watever/mimedefang.d/*.pl>
[07:50:51] <mst> same as expect scripts are only incidentally tcl to most users
[07:51:00] <mst> oh, quit it
[07:51:09] <mst> welcome to the real world, aquanight 
[07:51:09] <philipp64> mst: you're close... the base mimedefang-filter changed, so I diff'd against the original version, saved the patches, copied the new base mimedefang-filter over, and reapplied my diff's... but they most not have taken correctly.
[07:51:29] <mst> philipp64: you did your best, mate
[07:51:34] <aquanight> ... isn't that what I said? :)
[07:51:53] <aquanight> mst: ... I've seen more than a few things start doing that more and more.
[07:52:10] <philipp64> aquanight: "this sounds like the answer was diff'ing the file against the unmodified config and reapplying it as a patch against an updated version" -- yes, exactly what happened.
[07:52:11] <mst> philipp64: your only mistake here was losing hours because you argued with me instead of believing me in the first place, which I'm guessing next time something breaks is a mistake you won't make again :)
[07:52:29] <mst> aquanight: no, really, it isn't
[07:52:35] <mst> aquanight: go file a bug against fedora
[07:52:42] <mst> aquanight: otherwise, not the user's fault
[07:53:19] <philipp64> mst: I misunderstood what you were saying early on.
[07:53:20] <aquanight> actually the 'do' methodology would be the worst possible idea.
[07:53:30] <aquanight> 'require' would work better I suppose.
[07:53:48] <mst> philipp64: right, so, point is: next time if you don't understand what we've suggested
[07:53:58] <mst> philipp64: don't say 'no'. ask questions instead please.
[07:54:06] <mst> philipp64: it'll work out better for everybody :)
[07:54:12] <aquanight> wait a fuckin minute
[07:54:28] <aquanight> what's the active package at the start of a .pl pulled by require "path"
[07:54:31] <aquanight> I bet it's main isn't it
[07:54:51] <aquanight> *that's* why the variable assignments were passing strict
[07:54:53] <aquanight> they already existed
[07:54:55] <mst> aquanight: it's whatever the current package of the require statement is
[07:55:01] <philipp64> aquanight: https://github.com/The-McGrail-Foundation/MIMEDefang/blob/master/mimedefang.pl.in#L29
[07:55:04] <mst> aquanight: but that's only dynamic stuff
[07:55:05] <Paperbot> Link title(s): [ MIMEDefang/mimedefang.pl.in at master · The-McGrail-Foundation/MIMEDefang · GitHub ]
[07:55:18] <aquanight> mst: well... in this particular use case, it's main I think.
[07:55:20] <mst> aquanight: lexical pragmata like strict don't cross that barrier
[07:55:30] <aquanight> mst: I know
[07:55:35] <aquanight> but
[07:55:41] <aquanight> hmm. Not sure if I can demonstrate it with perlbot
[07:55:58] <mst> aquanight: basheval and here docs
[07:56:08] <aquanight> a.pl: $::x = 42; require "b.pl"; b.pl : use strict; print $x; # I would bet it works
[07:56:28] <daemon> aquanight, mst actually just for curiosity really this is my template.perl, I find this a very useful design for new projects and prototypes for forcing separation and such https://dpaste.org/7SBz what do you think?
[07:56:29] <Paperbot> Link title(s): [ dpaste/7SBz (Perl) ]
[07:57:00] *** Joins: gry (~gry@botters/gry)
[07:57:03] <aquanight> oh I know
[07:57:10] <aquanight> sweval: $::x = 42; eval '$x';
[07:57:12] <perlbot> aquanight: Variable "$x" is not imported at (eval 7) line 1. 
[07:57:19] *** Quits: grys (~gry@botters/gry) (Ping timeout: 256 seconds)
[07:57:26] <aquanight> seval: $::x = 42; eval '$x';
[07:57:27] <perlbot> aquanight: No output.
[07:57:37] <aquanight> hm.
[07:57:59] <aquanight> wait really
[07:58:18] <aquanight> unless of course mimedefang.pl "declared" them with use vars
[07:58:22] <mst> daemon: awful
[07:58:27] <daemon> mst, why so
[07:58:45] <aquanight> yup it did
[07:58:47] <mst> daemon: creates bollocks global variables and violates the perlstyle rule by not even naming them correctly
[07:58:58] <mst> daemon: that would fail code review anywhere I was involved
[07:59:05] <aquanight> that's why they worked even with strict
[07:59:11] <mst> *lolsob*
[07:59:14] <aquanight> they were already part of main:: as imported variables
[07:59:16] <daemon> mst, @args seems reasonable
[07:59:35] <mst> daemon: I saw the %global and cried
[07:59:52] <mst> arguments to main() you can call what you like
[07:59:56] <daemon> its needed for prototyping sometimes
[08:00:02] <mst> no it isn't
[08:00:13] <daemon> ok so what do you do with your json::maybexs object
[08:00:31] <daemon> no point initilizing it all the time in multiple functions
[08:00:53] <daemon> same as your db handle for that matter
[08:01:17] <mst> making a db handle a global is a bug
[08:01:34] <mst> you should store a DBIx::Connector or DBIx::Handler object in a correctly scoped variable
[08:01:36] <daemon> so just keep smacking it and re-establishing it in every scope you need it
[08:01:40] <mst> no
[08:01:44] <mst> do it properly
[08:01:45] <aquanight> globals are one thing. Making it a hash and thus losing 'use strict' checking is a silly idea.
[08:02:12] <mst> if you need a JSON::MaybeXS *object* you store it in 'our $JSON'
[08:02:21] <daemon> how is that better
[08:02:24] <mst> since the capital letters indicate it's a constant
[08:02:38] <mst> a lower case variable is neither global nor constant
[08:02:51] <aquanight> personally I'd use my $_JSON
[08:02:54] <daemon> ok if that template did not have $global
[08:02:58] <daemon> any problems then?
[08:03:20] <mst> I'd finish it with
[08:03:28] <mst> caller() ? 1 : main(@ARGV);
[08:03:37] <daemon> ooh interesting
[08:03:42] <mst> then it can be require()ed for unit tests
[08:03:49] <daemon> yeah that is a good call
[08:04:00] <mst> and perl handles exit() status on its own for main()
[08:04:14] <aquanight> daemon: 'use strict' is redundant under use v5.28.1
[08:04:23] <mst> exit main unless caller;
[08:04:24] <mst> 1;
[08:04:30] <mst> is the other way to write such a thing
[08:05:00] <daemon> aquanight, I would rather it be there wether redundant or not - I mean thank you for that but yeah I just kinda well like it being there :)
[08:05:04] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:05:17] <mst> also I usually have a per-project exporter
[08:05:39] <mst> e.g. https://github.com/shadowcat-mst/nxcl/blob/master/lib/NXCL/Package.pm
[08:05:41] <Paperbot> Link title(s): [ nxcl/Package.pm at master · shadowcat-mst/nxcl · GitHub ]
[08:06:04] <aquanight> I think the only thing I might add to a template like that is to add boilerplate GetOpt stuff
[08:06:14] <daemon> I know what all of those are except the last one
[08:06:16] <daemon> NXCL?
[08:06:20] *** Joins: Martchus (~martchus@dynamic-077-009-069-171.77.9.pool.telefonica.de)
[08:06:20] <daemon> perlbot NXCL
[08:06:21] <perlbot> daemon: No factoid found. Did you mean one of these: [.nc] [.ng] [.nz] [nge] [nms] [nsa] [tcl] [news] [next] [nice]
[08:06:23] *** Quits: Martchus_ (~martchus@dynamic-095-118-056-157.95.118.pool.telefonica.de) (Ping timeout: 256 seconds)
[08:06:29] <aquanight> instead of passing @ARGV to main
[08:06:45] <aquanight> just do GetOpt calls in main
[08:06:55] <aquanight> and then if you want to have 'shift' and friends do @_ = @ARGV after
[08:06:56] <daemon> aquanight, oh indeed I generally always do and then use the _process_it_from_array thing it has
[08:07:02] <daemon> but some scripts do not even read cmd line args
[08:07:31] <aquanight> also if it's a dual-life file (.pl and .pm in one), main would be _main
[08:07:51] <aquanight> with possible BEGIN { caller and undef *_main }
[08:07:59] <daemon> .perl in my case, but I tend not to mix that way really, I tend to just create a module and farpack the resultant if I have to
[08:08:08] <daemon> fatpack*
[08:08:32] <mst> daemon: NXCL is the project and it's not yet released
[08:08:43] <mst> daemon: point was the pattern
[08:09:01] <daemon> mst, yep very strict, I like it
[08:09:13] <aquanight> I should dual-life my irssi scripts as directly runnable.
[08:09:30] <aquanight> of course doing so they would would just 'exec irssi' because lol
[08:09:30] <mst> daemon: sure, freebsd ports including .packlist so -they- fatpack happened because I advoacted for it :)
[08:10:02] <daemon> aquanight, I have seen a few people crying about irssi and dealing with its script stuff recently, perhaps a post with a modern interface for it would be a good call if you have the time and inclination, could do hexchat while you are at it :P
[08:10:18] <mst> daemon: on linux you usually have to build a local::lib of everything instead because the system packages don't bother including it
[08:10:36] <philipp64> aquanight mst et al... email is back up. thanks.
[08:10:45] <mst> but for a CLI script I'd likely use CLI::Osprey
[08:10:50] <mst> philipp64: awesome!
[08:11:03] <mst> philipp64: I might be grumpy but I -am- glad we got things sorted out :D
[08:11:07] <daemon> philipp64, time to ask for a promotion :)
[08:11:34] <mst> daemon: if email is on a fedora machine I doubt anybody's getting paid
[08:11:58] <daemon> perbot core Import::Into
[08:12:04] <daemon> perlbot core Import::Into
[08:12:04] <perlbot> daemon: Module Import::Into does not appear to be in core. Perhaps capitalization matters or try using the 'cpan' command to search for it.
[08:12:27] <daemon> mst, haha yes indeed
[08:14:24] <mst> daemon: read the docs for Import::Into and you'll understand from how much I had to write for how little code it actually is why it exists :)
[08:15:40] <daemon> https://github.com/shadowcat-mst/nxcl/blob/master/lib/NXCL/Package.pm
[08:15:41] <Paperbot> Link title(s): [ nxcl/Package.pm at master · shadowcat-mst/nxcl · GitHub ]
[08:15:42] <daemon> already am
[08:15:50] <daemon> very little code
[08:15:51] <daemon> wait wrong link
[08:15:58] <daemon> https://fastapi.metacpan.org/source/HAARG/Import-Into-1.002005/lib/Import/Into.pm
[08:16:58] *** Joins: deadmarshal (~deadmarsh@95.38.112.23)
[08:17:38] <daemon> love the ternaries 
[08:18:13] <daemon> im not sure I would have it in my main prototype template though
[08:18:17] <daemon> maybe production template
[08:18:45] <daemon> prototype template is quite literally for 'bang it together and just make sure everything can talk to everything from wherever it is run'
[08:21:45] <mst> daemon: I like specifying my imports once for a multi file project
[08:22:40] <mst> daemon: you know how Moo and Mojo::Base copied 'use Moose' adding strict and warnings for you/
[08:23:00] <mst> daemon: I invetned that concept, and then it was borrowed and popularised by Moose
[08:23:12] <mst> daemon: this is just the logical descendant of my earlier work :)
[08:23:18] <daemon> I see, I actually did not I have never not used strit or warnings lol
[08:23:26] <mst> (as is 'use v5.28' really)
[08:24:08] <mst> for really strict, there's p3rl.org/strictures
[08:24:18] <daemon> actually I may be wrong I think freebsd 4.x had some ancient version of perl that either could not use strict/warnings or if you used them the kernel build failed
[08:24:24] <mst> however, off to bed now &
[08:24:26] <daemon> its in to distant memory to remember clearlt
[08:24:30] <daemon> night dood sleep well
[08:25:38] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 260 seconds)
[08:37:33] *** Quits: gry (~gry@botters/gry) (Ping timeout: 256 seconds)
[08:48:26] *** Quits: timeless (sid4015@id-4015.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[08:48:43] *** Quits: genio (sid223130@id-223130.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[08:48:51] *** Quits: neilb___ (sid492745@id-492745.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[08:49:08] *** Quits: toddr (sid457681@id-457681.tinside.irccloud.com) (Ping timeout: 260 seconds)
[08:49:08] *** Quits: mjones (sid6844@id-6844.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:49:08] *** Quits: TBSliver (sid321952@id-321952.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:49:08] *** Quits: nrr_ (sid20938@id-20938.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:49:10] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 260 seconds)
[08:49:16] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (Ping timeout: 245 seconds)
[08:49:16] *** Quits: leont (sid489095@id-489095.uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[08:49:16] *** Quits: mruszczyk (sid160336@id-160336.tinside.irccloud.com) (Ping timeout: 245 seconds)
[08:49:35] *** Quits: karjala (sid176588@id-176588.lymington.irccloud.com) (Ping timeout: 264 seconds)
[08:49:41] *** Quits: patterner_ (sid212303@id-212303.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[08:49:51] *** Quits: mstevens (sid285816@id-285816.tinside.irccloud.com) (Ping timeout: 260 seconds)
[08:50:04] *** Quits: pwillard (sid136981@id-136981.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:50:06] *** Quits: rjbs (sid498898@id-498898.uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[08:50:07] *** Quits: odc (sid197788@id-197788.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[08:50:11] *** Quits: kawaii_ (sid345572@id-345572.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[08:50:18] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:50:20] *** Quits: davebaker_ (sid143727@id-143727.lymington.irccloud.com) (Ping timeout: 268 seconds)
[08:50:32] *** Quits: Yaakov (sid19863@user/Yaakov) (Ping timeout: 260 seconds)
[08:50:39] *** Quits: jakesyl_ (sid56879@id-56879.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[08:50:40] *** Joins: TBSliver (sid321952@hampstead.irccloud.com)
[08:50:48] *** Joins: skaji_ (sid178483@tinside.irccloud.com)
[08:50:51] *** Joins: ranguard___ (sid496095@lymington.irccloud.com)
[08:50:55] *** Quits: skaji (sid178483@id-178483.tinside.irccloud.com) (Ping timeout: 260 seconds)
[08:50:55] *** Quits: integral (sid296274@user/integral) (Ping timeout: 260 seconds)
[08:50:55] *** Quits: ranguard__ (sid496095@id-496095.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:50:56] *** skaji_ is now known as skaji
[08:50:56] *** ranguard___ is now known as ranguard__
[08:50:57] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 268 seconds)
[08:51:13] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[08:51:23] *** Joins: patterner_ (sid212303@2a03:5180:f:3::3:3d4f)
[08:51:42] *** Joins: mruszczyk (sid160336@tinside.irccloud.com)
[08:51:44] *** Joins: odc (sid197788@helmsley.irccloud.com)
[08:51:44] *** Joins: mstevens (sid285816@2a03:5180:f::4:5c78)
[08:51:51] *** Joins: Yaakov (sid19863@id-19863.tinside.irccloud.com)
[08:51:54] *** Joins: karjala (sid176588@2a03:5180:f:2::2:b1cc)
[08:51:58] *** Quits: Yaakov (sid19863@id-19863.tinside.irccloud.com) (Changing host)
[08:51:58] *** Joins: Yaakov (sid19863@user/Yaakov)
[08:51:59] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[08:52:01] *** Joins: leont (sid489095@2a03:5180:f:5::7:7687)
[08:52:04] *** Joins: nrr_ (sid20938@id-20938.lymington.irccloud.com)
[08:52:12] *** Joins: kawaii_ (sid345572@2a03:5180:f:4::5:45e4)
[08:52:18] *** Joins: integral (sid296274@user/integral)
[08:52:25] *** Joins: BlueShark (sid10311@user/blueshark)
[08:52:26] *** Joins: davebaker_ (sid143727@id-143727.lymington.irccloud.com)
[08:52:28] *** Joins: pjlsergeant (sid143467@2a03:5180:f:4::2:306b)
[08:52:31] *** Joins: rjbs (sid498898@id-498898.uxbridge.irccloud.com)
[08:52:35] *** Joins: jakesyl_ (sid56879@2a03:5180:f:4::de2f)
[08:52:43] *** Joins: pwillard (sid136981@2a03:5180:f:4::2:1715)
[08:54:51] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[09:02:55] *** Joins: timeless (sid4015@id-4015.ilkley.irccloud.com)
[09:03:17] *** Joins: neilb___ (sid492745@id-492745.ilkley.irccloud.com)
[09:03:43] *** Joins: genio (sid223130@id-223130.ilkley.irccloud.com)
[09:04:07] *** Joins: toddr (sid457681@id-457681.tinside.irccloud.com)
[09:04:08] *** Joins: mjones (sid6844@id-6844.helmsley.irccloud.com)
[09:12:12] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[09:29:47] *** Quits: deadmarshal (~deadmarsh@95.38.112.23) (Ping timeout: 264 seconds)
[09:30:15] *** Quits: willthechill (~willthech@107-217-160-207.lightspeed.austtx.sbcglobal.net) (Ping timeout: 256 seconds)
[09:30:45] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:44:49] *** Joins: deadmarshal (~deadmarsh@95.38.112.23)
[10:15:57] *** Joins: zkrd (~xdg@2a02:587:de06:100:b5ad:8f13:9734:dacb)
[10:31:28] *** Quits: eblip (~eb0t@90.202.254.138) (Ping timeout: 268 seconds)
[10:33:19] *** Joins: eblip (~eb0t@90.209.247.46)
[10:37:02] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[10:40:19] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[10:44:42] *** Quits: deadmarshal (~deadmarsh@95.38.112.23) (Ping timeout: 260 seconds)
[10:54:11] *** Joins: deadmarshal (~deadmarsh@95.38.112.23)
[11:17:29] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Read error: Connection reset by peer)
[11:29:15] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:31:30] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[11:34:21] *** Quits: deadmarshal (~deadmarsh@95.38.112.23) (Ping timeout: 256 seconds)
[11:34:21] *** Quits: __Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 256 seconds)
[11:37:56] *** Joins: deadmarshal (~deadmarsh@95.38.113.102)
[11:55:04] *** Joins: EGD (~egd@user/egd)
[11:58:51] *** Quits: deadmarshal (~deadmarsh@95.38.113.102) (Ping timeout: 245 seconds)
[12:02:35] *** Quits: KnoP (~KnoP@p57b21d87.dip0.t-ipconnect.de) (Quit: ChatZilla 0.9.99 [SeaMonkey 2.53.9.1/20210921115122])
[12:04:55] *** Joins: deadmarshal (~deadmarsh@95.38.118.197)
[12:06:25] *** Joins: tobybl (~tobybl@213.31.135.91)
[12:21:09] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[12:21:34] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:29:27] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[12:31:54] *** Joins: tomys_ (~tomys@c188-149-14-10.bredband.tele2.se)
[12:33:23] *** tomys_ is now known as kevin-oculus
[12:33:51] *** Quits: deadmarshal (~deadmarsh@95.38.118.197) (Ping timeout: 245 seconds)
[12:42:19] *** Joins: deadmarshal (~deadmarsh@95.38.118.197)
[12:54:42] *** Joins: Dreadnaught (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au)
[12:57:23] *** Quits: Kulrak (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au) (Ping timeout: 264 seconds)
[13:01:23] * GumbyPAN CPAN Upload: CryptX-0.074 by MIK https://metacpan.org/release/MIK/CryptX-0.074
[13:05:34] *** Quits: deadmarshal (~deadmarsh@95.38.118.197) (Ping timeout: 260 seconds)
[13:05:38] <Mandevil> Good morning everyone. Where can I read what version of perl enables what feature by default?
[13:09:04] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 260 seconds)
[13:09:52] *** Joins: deadmarshal (~deadmarsh@95.38.118.197)
[13:11:08] *** Joins: WinterStar (~IceLight@user/icelight)
[13:20:23] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[13:37:14] *** Joins: Pali (~pali@user/pali)
[13:37:54] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[13:40:48] *** Joins: gry (~gry@botters/gry)
[13:41:48] <vague> perldelta?
[13:42:58] <Mandevil>        This document describes differences between the 5.24.0 release and the
[13:42:58] <Mandevil>        5.24.1 release.
[13:42:58] *** Joins: furrymcgee (~devuan@cgn-213-196-210-222.nc.de)
[13:43:01] <Mandevil> Not very useful.
[13:45:46] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[13:51:43] <vague> Found it, https://perldoc.pl/feature#FEATURE-BUNDLES
[13:51:44] <Paperbot> Link title(s): [ feature - Perl pragma to enable new features - Perldoc Browser ]
[13:53:33] <Mandevil> vague: Ah, thanks
[14:14:56] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:24:16] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[14:24:43] *** Joins: CycoCid (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au)
[14:27:11] *** Quits: Dreadnaught (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:02] *** Joins: csrf (~csrf@user/csrf)
[15:05:31] *** Quits: deadmarshal (~deadmarsh@95.38.118.197) (Ping timeout: 245 seconds)
[15:29:16] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[15:29:47] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[15:41:42] *** Joins: tobybl (~tobybl@213.31.135.91)
[15:44:15] *** Quits: Walex (~Walex@SMTP.sabi.co.UK) (Ping timeout: 256 seconds)
[15:44:49] *** Quits: Pali (~pali@user/pali) (Ping timeout: 256 seconds)
[15:45:05] *** Joins: Pali (~pali@user/pali)
[15:45:59] *** Joins: Walex (~Walex@SMTP.sabi.co.UK)
[15:56:26] *** Quits: zenfold (~zenfold@user/zenfold) (Ping timeout: 260 seconds)
[15:59:27] *** Joins: jess (~jess@libera/staff/jess)
[16:02:30] *** Quits: Su-Shee (~Susanne@p4ff4961a.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:04:07] *** Joins: Su-Shee (~Susanne@p50894d7b.dip0.t-ipconnect.de)
[16:05:56] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:10:52] *** Joins: kensanata (~user@user/kensanata)
[16:14:23] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[16:14:51] *** Quits: zhmylove (~zhmylove@178.252.127.211) (Ping timeout: 256 seconds)
[16:15:01] *** Joins: kylese (~kylese@p548352b2.dip0.t-ipconnect.de)
[16:16:27] *** Joins: deadmarshal (~deadmarsh@95.38.118.197)
[16:17:36] *** Joins: zhmylove (~zhmylove@178.67.195.132)
[16:20:32] *** Quits: alex11 (~alex11@user/alex11) (Quit: Leaving)
[16:44:36] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[16:45:11] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 268 seconds)
[16:49:07] *** Joins: woei (~woei@cust-245-64-110-94.dyn.as47377.net)
[16:56:13] *** Quits: deadmarshal (~deadmarsh@95.38.118.197) (Ping timeout: 256 seconds)
[16:58:23] *** Joins: deadmarshal (~deadmarsh@95.38.118.197)
[16:59:50] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 260 seconds)
[17:06:32] *** Joins: brunoramoslu (~brunoramo@94.252.121.131)
[17:08:38] *** Quits: brunoramoslu (~brunoramo@94.252.121.131) (Remote host closed the connection)
[17:08:56] *** Joins: brunoramoslu (~brunoramo@94.252.121.131)
[17:14:31] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[17:14:55] *** Quits: zhmylove (~zhmylove@178.67.195.132) (Ping timeout: 256 seconds)
[17:17:38] *** Joins: zhmylove (~zhmylove@178.67.192.238)
[17:23:02] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[17:24:14] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:28:21] *** Quits: X-Scale (~ARM@83.223.240.168) (Ping timeout: 268 seconds)
[17:28:55] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[17:29:50] *** X-Scale` is now known as X-Scale
[17:30:22] *** Quits: deadmarshal (~deadmarsh@95.38.118.197) (Quit: ZNC 1.8.2 - https://znc.in)
[17:30:45] *** Joins: deadmarshal (~deadmarsh@95.38.118.197)
[17:32:54] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[17:33:01] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[17:52:37] *** Quits: kylese (~kylese@p548352b2.dip0.t-ipconnect.de) (Quit: Leaving)
[17:53:51] *** Quits: zhmylove (~zhmylove@178.67.192.238) (Ping timeout: 245 seconds)
[17:57:16] *** Joins: zhmylove (~zhmylove@5.142.44.76)
[18:01:24] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[18:07:12] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 268 seconds)
[18:07:53] *** Joins: X-Scale` (~ARM@31.22.160.27)
[18:08:52] *** X-Scale` is now known as X-Scale
[18:11:18] *** Quits: zhmylove (~zhmylove@5.142.44.76) (Ping timeout: 260 seconds)
[18:12:59] *** Joins: zhmylove (~zhmylove@5.142.44.76)
[18:17:22] *** Quits: zhmylove (~zhmylove@5.142.44.76) (Ping timeout: 260 seconds)
[18:22:19] *** Joins: zhmylove (~zhmylove@178.67.195.72)
[18:25:11] *** Quits: deadmarshal (~deadmarsh@95.38.118.197) (Ping timeout: 256 seconds)
[18:29:02] *** Quits: zhmylove (~zhmylove@178.67.195.72) (Ping timeout: 260 seconds)
[18:31:32] *** Quits: ueberall (ueberall_l@user/ueberall) (Ping timeout: 260 seconds)
[18:37:00] * GumbyPAN CPAN Upload: Bitcoin-Crypto-1.005 by BRTASTIC https://metacpan.org/release/BRTASTIC/Bitcoin-Crypto-1.005
[18:40:38] *** Quits: enyc (~enyc@user/enyc) (Ping timeout: 260 seconds)
[18:41:11] *** Joins: ueberall (ueberall_l@user/ueberall)
[18:41:33] *** Joins: enyc (~enyc@user/enyc)
[18:42:27] *** Joins: deadmarshal (~deadmarsh@95.38.118.197)
[18:50:31] *** Joins: willthechill (~willthech@107-217-160-207.lightspeed.austtx.sbcglobal.net)
[18:56:30] *** Joins: proller (~p@80.240.216.69)
[19:06:13] *** Joins: Dreadnaught (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au)
[19:06:46] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Ping timeout: 260 seconds)
[19:09:23] *** Quits: CycoCid (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au) (Ping timeout: 264 seconds)
[19:12:13] *** Quits: deadmarshal (~deadmarsh@95.38.118.197) (Ping timeout: 256 seconds)
[19:15:24] *** Joins: cek (uid23454@id-23454.tinside.irccloud.com)
[19:15:41] <cek> $ perl -MData::Dumper -e '@z =[{a=>1, b=>2},{c=>3, d=>4}]; grep { print Dumper($_->{a}); } @z'
[19:15:58] <cek> how can I select elements based on key name?
[19:16:12] <cek> perl is showing its age
[19:16:46] <Grinnz> not sure that not understanding deref syntax has to do with age
[19:16:51] <cek> it looks like $_ isn't set to its element
[19:17:10] <Grinnz> print in grep is awful weird
[19:17:10] <mst> cek: this isn't perl showing it's age, that's completely wrong
[19:17:19] <cek> no, it shows its age
[19:17:23] <mst> cek: please explain what you're actually trying to do because that code doesn't make any sense
[19:17:24] <cek> it's conterintuitive
[19:17:29] <Grinnz> if you're going to troll, you can just leave now
[19:17:30] <cek> how can I select elements based on key name?
[19:17:56] <mst> cek: you care if a particular key exists in a hashref?
[19:18:04] <mst> cek: if so ... you would use 'exists'
[19:18:13] <mst> grep exists($_->{a}), @z;
[19:18:18] <lopid> maybe the actual key value is "age"
[19:18:18] <Grinnz> your data structure is wrong. you've assigned an arrayref to an array
[19:18:32] <mst> oh, right, yes, @z is broken as well
[19:18:44] <mst> I hadn't noticed because of how the grep wasn't even a grep
[19:19:08] <mst> eval: my @z = ({a=>1,b=>2}, {c=>3,d=>4}); grep exists($_->{a}), @z;
[19:19:10] <perlbot> mst: 1
[19:19:27] <mst> eval: my @z = ({a=>1,b=>2}, {c=>3,d=>4}); my @found = grep exists($_->{a}), @z; \@found
[19:19:29] <perlbot> mst: [{b => 2,a => 1}]
[19:19:39] <mst> cek: simples!
[19:20:14] <mst> I'm sorry you found using 'exists' to check if something exists to be counterintuitive but I'm not sure that really says anything about perl.
[19:20:35] <cek> why `@z =[{a=>1, b=>2},{c=>3, d=>4}]; grep { print Dumper($_); true } @z`  is it printing entire array instead of each hash?
[19:20:45] <Grinnz> your data structure is wrong. you've assigned an arrayref to an array
[19:20:53] <mst> cek: because you created an array of one element
[19:21:04] <lopid> perhaps cek is showing its age…?
[19:21:10] <mst> cek: where that element was itself a two element arrayref
[19:21:15] <mst> cek: then you printed the two element arrayref
[19:21:19] <cek> yes, correct
[19:21:25] <mst> cek: so perl printed the two element arrayref, as you asked it to
[19:21:43] <mst> cek: notice my code used () not []
[19:21:45] <cek> I was confused by Dumper printing original array which never contained any `(`, only `[`
[19:21:51] *** Joins: mns` (~fu@191.253.157.69)
[19:22:05] *** Joins: zhmylove (~zhmylove@178.67.196.130)
[19:22:23] <mst> I recommend re-reading https://qntm.org/perl_en before carrying on
[19:22:24] <Paperbot> Link title(s): [ Learn Perl in about 2 hours 30 minutes @ Things Of Interest ]
[19:22:29] <Grinnz> [] creates an arrayref. see https://perldoc.perl.org/perlreftut
[19:22:30] <Paperbot> Link title(s): [ perlreftut - Mark's very short tutorial about references - Perldoc Browser ]
[19:22:42] <mst> you've clearly forgotten half of the basics and it's only going to annoy you if you keep trying things at random rather than refreshing your memory
[19:23:17] <cek> I think Dumper will never print `(`
[19:23:23] <Grinnz> () isn't a thing.
[19:23:31] <Grinnz> i have no idea what you're trying to say
[19:23:34] <cek> well it's an array , not an array ref
[19:23:40] <Grinnz> no, @z is an array
[19:23:51] <Grinnz> you assign a list to it. () is just for precedence
[19:23:56] <mst> cek: you made an array containing a single entry that was an array ref, then you Dumper()ed the array ref
[19:24:00] <mst> cek: so yes, it was an array ref
[19:24:13] <mst> this is why you need to refresh your memory
[19:24:16] <Grinnz> [] is one list element which is an arrayref
[19:24:48] * mst has been known to re-read the 'perlre' docs when he hasn't done anything serious with regexps for a while
[19:24:51] <mst> same principle
[19:25:01] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[19:25:02] <cek> Dumper(@z) won't print parentheses
[19:25:05] <mst> best to refresh your memory than end up annoyed and blaming the language because you're doing it wrong
[19:25:10] <Grinnz> parentheses do not exist in the data structure
[19:25:14] <Grinnz> nothing to do with Dumper
[19:25:28] <cek> that's exactly what confused me
[19:25:38] <Grinnz> right, basic part of perl syntax
[19:25:43] <cek> becasue I was basing my conslusions on Dumper's output
[19:25:50] <Grinnz> foo, (foo), ((foo)) are all exactly the same list
[19:25:58] <mst> cek: it's kinda like the way in javascript (...x, y) flattens x
[19:26:01] <mst> python has ** or something
[19:26:08] <cek> yes, js is nice
[19:26:26] <mst> cek: you're welcome
[19:26:32] <cek> js is intuitive.
[19:26:52] <mst> you mean "I'm more used to JS than perl"
[19:26:57] *** Joins: monkey_ (~user@190.104.116.153)
[19:27:02] <mst> they both have about the same amount of weird shit IME
[19:27:04] * GumbyPAN CPAN Upload: Math-Sidef-0.05 by TRIZEN https://metacpan.org/release/TRIZEN/Math-Sidef-0.05
[19:27:13] <mst> happily, JS keeps stealing things from perl which is helping
[19:27:16] <cek> the more I forget perl the more I get back my sanity
[19:27:25] <mst> https://qntm.org/perl_en
[19:27:26] <Paperbot> Link title(s): [ Learn Perl in about 2 hours 30 minutes @ Things Of Interest ]
[19:27:41] <mst> ^^ less insulting the people helping you, more reading so you're not doing stupid shit, please
[19:28:02] <mst> I mention JS to try and be helpful and you use it as an excuse to be a dick again
[19:28:04] <mst> no bueno
[19:29:26] <cek> cek> how can I select elements based on key name?
[19:29:32] <cek> I haven't got answer to this q
[19:29:43] <mst> cek: grep exists($_->{a}, @z
[19:29:49] <mst> like I told you ages ago
[19:29:51] <cek> you've mentioned exists(), which isn't something I wanted
[19:30:00] <Grinnz> then you'll need to be more specific
[19:30:05] <mst> well yes because I had to guess
[19:30:06] <Grinnz> because your question is vague and we're guessing
[19:30:06] <cek> I want to regexp match on element's value
[19:30:11] <mst> ...
[19:30:11] <_73> How can I get the char at the current cursor position from a file handle? Something like `while ($fh) { if ('z' eq cur_char($fh)) ... }`. I have read the documentation on `tell` but I am not sure how to use the cursor's position to get the char.
[19:30:18] <mst> cek: you said 'key name' not value
[19:30:21] <mst> cek: PLEASE be specific!
[19:30:30] <cek> calm down
[19:31:17] <mst> I am perfectly calm, I am using capitals for emphasis because you are ignoring my requests and making it impossible to help you so I was hoping maybe if I said please more loudly you might pay attention this time
[19:31:30] <cek> will `grep { $_->{a} =~ /blah/ } @z` work?
[19:31:36] <Grinnz> sure
[19:31:54] <Grinnz> but you'll want to check if $_->{a} is defined first
[19:31:55] <cek> ` icontact/class error: Not a HASH reference at`
[19:32:03] <mst> cek: then you've done something else wrong.
[19:32:03] <Grinnz> you haven't fixed @z yet, then
[19:32:25] <cek> oh actually @z is a hash ref over here
[19:32:26] <_73> err `while (<$fh>)` ...
[19:32:34] <cek> oops, arr ref that is
[19:32:43] <mst> _73: I'm not sure exactly what you're trying to do here
[19:32:52] <Grinnz> it's an array containing a single array ref, as you originally showed
[19:33:16] <daemon> _73, there is probably an easier way than what I am about to say, but you could use seek to set the position in the file handle so that you knew where you was 
[19:33:32] <Grinnz> _73: there is no way to read what's at the current position other than to use read or readline
[19:33:35] <_73> mst: when I am done looping through the file I need to make sure that the last char in the file is a newline.
[19:33:49] <cek>  error: Not an ARRAY reference at 
[19:33:59] <Grinnz> _73: check the last character of $_ which you've assigned to?
[19:34:01] <mst> cek: please use the paste site in /topic to show us your actual code.
[19:34:15] <mst> _73: my $last_line; while (my $line = $<fh>) { $last_line = $line; .,.. }
[19:34:16] <cek> how do I see the type of that var?
[19:34:30] <mst> cek: please use the paste site in /topic to show us your actual code.
[19:34:37] <Adura> This seems like a hard question, how do you suppress the ^C from showing up on the terminal when you kill 'INT' a child process?
[19:34:45] <_73> ok now I see thanks
[19:34:48] <mst> _73: then you can simply check $last_line =~ /\n$/
[19:34:49] <Grinnz> Adura: probably entirely depends on your terminal and shell
[19:34:57] <mst> _73: to ensure the last line isn't a partial one
[19:35:14] <Grinnz> cek: when we said you are assigning an array reference to an array, we were saying this is *incorrect*, and you need to fix it
[19:35:15] <mst> _73: "turn the problem upside down and shake it until an easier problem falls out" is often a good approach :D
[19:35:19] <daemon> open my $fh,'<',FILE; seek $fh,-2,SEEK_END
[19:35:20] <Adura> Grinnz, in this specific case, cmd.exe.
[19:35:24] <daemon> would put you 2 chars from hte end
[19:35:30] <daemon> if its a monster file or something
[19:35:42] * _73 over complicated it
[19:36:00] <Adura> Grinnz, but, I'll take the bash answer too. ;p
[19:36:01] <mst> _73: yeah, well, I got most of my practice de-over-complicating things on my own code :D
[19:36:18] <Grinnz> Adura: i didn't say i knew any way to do it, just that's where a potential answer would be :P
[19:36:25] <Adura> Eheh...
[19:37:03] *** Joins: deadmarshal (~deadmarsh@95.38.118.197)
[19:37:26] <tkr> cek: It's a bit confusing. But you can have hashes (dictionaries) with %hash = (...). Like here: perl -MData::Dumper -e '%z = ( a => 1, b => 2 ); print Dumper(\%z)' (note backslacsh for creating a "reference"). This is equivalent to: perl -MData::Dumper -e '$z = { a => 1, b => 2 }; print Dumper($z)'.
[19:38:23] <Adura> Time to screw around with \cH print timing.
[19:38:25] <ether> perldoc perlreftut
[19:38:25] <perlbot> ether: Your documentation is available at: https://perldoc.perl.org/perlreftut
[19:38:29] <tkr> cek, But you can only store references (\%hash and $hash) of variables to an array.
[19:38:39] <cek> yes I know that
[19:38:46] <mst> cek still needs to show us the code like I asked :(
[19:38:55] <cek> i can't show the damn code, its cpanel
[19:39:08] <cek> it;'s suppliying me with crap , i have to process and spit out back
[19:39:14] <mst> the bit you're writing that doesn't work
[19:39:20] <mst> not the whole underlying framework
[19:39:24] <cek> `    my @orig_atts = grep { $_->{'name'} =~ /^email-/ } $self->{'_opts'}{'attach_files'};      `
[19:39:29] <cek> this is the damn bit that doesn't work
[19:39:35] <tkr> cek: Ok. Sorry for wasting your time :)
[19:39:39] <mst> cek: @{$self->{'_opts'}{'attach_files'}}
[19:39:42] <Grinnz> right, so grep takes a list, not an arrayref
[19:39:48] <Grinnz> this is the opposite of your original problem
[19:39:56] <Grinnz> deref it like mst said
[19:39:58] <cek> i've tried `@$self->{'_opts'}{'attach_files'}` , it doesn't work
[19:40:02] <mst> cek: stop passing the unexpanded structure
[19:40:04] <mst> cek: @{$self->{'_opts'}{'attach_files'}}
[19:40:06] <Grinnz> that's the wrong syntax, use the one mst showed
[19:40:16] <cek> goddamn stupid lang
[19:40:21] <mst> cek: yeah, you made something up that isn't perl because you refuse to read documentation
[19:40:39] <Grinnz> most languages won't work well if you smash random syntax together
[19:40:48] <mst> "refused to read even though we linked you several documents that explained it" is not actually perl's fault
[19:40:51] <cek> it's interpreted , why care of pointers, just make everythign a damn pointer like in js or any other sane lang
[19:41:07] <mst> pointers aren't involved anywhere in perl *or* javascript
[19:41:08] <Grinnz> sure, that's reasonable for languages to do, but it isn't perl
[19:41:18] <Grinnz> complaining about it will only make it less likely you'll get any help
[19:41:20] <cek> pointer === reference
[19:41:23] <tkr> cek: You can make it more concise. $attached_files = $self->{'_opts'}{'attach_files'} and then just use @$attached_files. It makes the code more readable :)
[19:41:35] <tkr> s/concise/verbose/
[19:42:02] <mst> cek: look at the @{} as like JS' ... like I said.
[19:42:23] <mst> cek: it's really not that big a difference, just different syntax, hence why you need to actually read the fine manual if you've forgotten
[19:43:00] <mst> we're doing our best to help you here but you seem to be trying very hard to have the worst possible time.
[19:43:02] <cek> nah, don't want to remember. thanks, it worked.
[19:43:34] <mst> cek: if only you'd shown me the real problem after the very first comment I made which was to point out your original question wasn't clear :P
[19:43:50] <mst> could've been done in 2 minutes instead of 30
[19:44:08] <mst> at least try and remember that for next time
[19:44:33] <mst> and bookmark qntm.org/perl_en so you don't -have- to remember perl, just where to go to remind yourself
[19:44:37] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[19:45:41] <cek> is there a "forget perl in 5 mins" guide?
[19:45:54] <Grinnz> whining is off topic
[19:45:55] *** Joins: sKep (~raah@user/skep)
[19:47:06] <mst> cek: yes, but it's my bourbon, and you've been rude so I'm not giving you any.
[19:47:43] <mst> especially since the time spent here was 2 minutes on perl problems, and 25 minutes on cek problems
[19:47:51] <mst> so the bourbon is dedicated to people who're going to need to forget cek :P
[19:48:05] <cek> my pleasure
[19:48:32] <ology> I drank all my Woodford last night...
[19:49:06] <mst> ology: happily the big sainsbury's here (a) stocks it (b) is open until 10pm (c) is immediately opposite the bar I was walking to anyway
[19:49:39] <ology> I'm going to walk to the store and get some exercise for once.
[19:50:12] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[19:54:23] <mst> my basic plan involves hitting the supermarket at about 9.30, buying more food plus a bottle of woodford, then going and settling in a corner of the beer garden with a fun design problem and a good book
[19:56:30] *** sKep is now known as skep
[20:04:28] <ology> It's like 4 or 5 state run liquor stores in this town. Although a private one recently opened up. Not sure who they are paying off. Wish it was just in grocery stores like normal places.
[20:06:06] *** Quits: zhmylove (~zhmylove@178.67.196.130) (Ping timeout: 260 seconds)
[20:06:08] <mst> it definitely makes american visitors blink when I order a bottle off amazon to be delivered to the office ;)
[20:06:58] <ology> <BLINK>
[20:07:50] *** Joins: zhmylove (~zhmylove@178.67.195.61)
[20:07:50] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[20:08:57] *** Parts: skep (~raah@user/skep) ()
[20:09:18] <mst> that's generally how I get hold of Eagle Rare when I want a change
[20:12:10] *** Quits: deadmarshal (~deadmarsh@95.38.118.197) (Ping timeout: 260 seconds)
[20:13:36] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[20:16:15] *** Joins: deadmarshal (~deadmarsh@95.38.118.197)
[20:18:21] <manjaroi3> .
[20:19:10] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 268 seconds)
[20:19:10] *** Joins: kensanata (~user@user/kensanata)
[20:32:07] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 256 seconds)
[20:33:52] <rindolf> mst: heh, nice sarcasm in the back log
[20:36:53] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[20:37:35] *** Quits: deadmarshal (~deadmarsh@95.38.118.197) (Ping timeout: 264 seconds)
[20:39:47] *** Joins: deadmarshal (~deadmarsh@95.38.118.197)
[20:41:45] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[20:49:09] *** Quits: furrymcgee (~devuan@cgn-213-196-210-222.nc.de) (Quit: leaving)
[20:52:27] *** Joins: haj1 (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[20:53:01] *** Quits: deadmarshal (~deadmarsh@95.38.118.197) (Ping timeout: 245 seconds)
[21:04:10] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[21:06:26] *** Joins: JustMe (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[21:06:41] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[21:06:47] *** Joins: deadmarshal (~deadmarsh@95.38.118.197)
[21:09:31] *** Quits: japh (~scp1@user/japh) (Ping timeout: 256 seconds)
[21:10:57] *** Joins: japh (~scp1@host-95-197-1-21.mobileonline.telia.com)
[21:10:57] *** Quits: japh (~scp1@host-95-197-1-21.mobileonline.telia.com) (Changing host)
[21:10:57] *** Joins: japh (~scp1@user/japh)
[21:16:39] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[21:20:09] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[21:20:25] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[21:20:42] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 260 seconds)
[21:30:32] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[21:36:27] *** Quits: jess (~jess@libera/staff/jess) ()
[21:42:14] *** Quits: mns` (~fu@191.253.157.69) (Ping timeout: 260 seconds)
[21:43:53] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[21:46:35] *** Quits: zhmylove (~zhmylove@178.67.195.61) (Read error: Connection reset by peer)
[21:46:52] *** Joins: zhmylove (~zhmylove@146.120.76.72)
[21:48:48] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[21:55:09] *** Quits: cek (uid23454@id-23454.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[21:56:19] * GumbyPAN CPAN Upload: Config-Model-2.145 by DDUMONT https://metacpan.org/release/DDUMONT/Config-Model-2.145
[22:20:00] *** Quits: ksham (Kays@user/kays) (Remote host closed the connection)
[22:21:19] *** Joins: Kays (Kays@user/kays)
[22:34:31] *** Quits: deadmarshal (~deadmarsh@95.38.118.197) (Ping timeout: 256 seconds)
[22:38:26] *** Joins: llh (~llh@user/llh)
[22:50:15] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[22:56:26] * GumbyPAN CPAN Upload: PDL-2.058 by ETJ https://metacpan.org/release/ETJ/PDL-2.058
[22:59:00] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[23:15:29] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:16:09] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[23:17:41] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[23:27:08] <gordonfish> Re: <ology> <BLINK>
[23:27:26] <gordonfish> I find it interesting that both Firefox and Chrome ditched <BLINK> some time ago but <MARQUEE> still works...
[23:34:42] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[23:39:06] *** Joins: deadmarshal (~deadmarsh@95.38.118.197)
[23:39:59] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 264 seconds)
[23:43:34] *** Quits: deadmarshal (~deadmarsh@95.38.118.197) (Ping timeout: 260 seconds)
[23:45:22] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:49:21] <xenu> it was the marquee feature of those browsers after all
[23:50:55] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[23:54:25] *** Quits: zhmylove (~zhmylove@146.120.76.72) (Ping timeout: 256 seconds)
[23:54:46] *** Quits: phenom (~primus@user/phenom) (Ping timeout: 260 seconds)
[23:56:14] *** Joins: zhmylove (~zhmylove@178.67.192.109)
[23:57:02] *** Joins: phenom (~primus@user/phenom)
