[00:11:03] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[00:13:31] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Quit: Client limit exceeded: 20000)
[00:27:41] <FromDiscord> <lakmatiol> which vscode should I use, the one written in nim or the one written in JS?
[00:27:46] <FromDiscord> <lakmatiol> (edit) "which vscode ... should" 03added "extension"
[00:27:55] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[00:30:32] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 240 seconds)
[00:32:17] <FromDiscord> <konsumlamm> the one written by saem
[00:33:08] <FromDiscord> <lakmatiol> ok
[00:33:10] <FromDiscord> <lakmatiol> (edit) "ok" => "ok, ty"
[00:34:21] <FromDiscord> <konsumlamm> how exactly does one use `--expandArc`? in particular, where is the output supposed to be?
[00:37:09] <FromDiscord> <leorize> it will expand a proc and show you all the copy/destructors calls
[00:37:37] <FromDiscord> <konsumlamm> yeah, but where?
[00:37:53] <FromDiscord> <konsumlamm> does it print it to stdout? because i don't see anything
[00:46:13] <FromDiscord> <leorize> yea, stdout
[00:48:11] <FromDiscord> <Vindaar> In reply to @konsumlamm "how exactly does one": but you have to tell it the proc you want expanded. So `--expeandArc:foo`
[00:49:03] <FromDiscord> <konsumlamm> i did that
[00:49:59] <FromDiscord> <konsumlamm> or does that mean that there's no destructor calls etc?
[00:52:03] <FromDiscord> <Vindaar> sent a code paste, see https://play.nim-lang.org/#ix=3NCy
[00:52:10] <FromDiscord> <Vindaar> In reply to @konsumlamm "or does that mean": not sure, if that could explain it
[00:52:30] <FromDiscord> <Vindaar> ah
[00:52:33] <FromDiscord> <Vindaar> apparently
[00:54:04] <FromDiscord> <konsumlamm> huh, i think it's only when it gets used
[00:54:14] <FromDiscord> <konsumlamm> because otherwise it probably gets dead code eliminated?
[01:03:20] <FromDiscord> <Vindaar> sent a code paste, see https://play.nim-lang.org/#ix=3NCG
[01:04:51] <FromDiscord> <konsumlamm> it works for me, perhaps you forgot to add `--gc:arc`
[01:05:42] <FromDiscord> <Elegantbeef> I mean `"bla"` isnt gc'd
[01:06:01] <FromDiscord> <Elegantbeef> It's a constant array `['b', 'l', 'a']` in C
[01:07:17] <FromDiscord> <Elegantbeef> Although i guess it does get converted to a Nim string to echo
[01:08:16] <FromDiscord> <Vindaar> In reply to @konsumlamm "it works for me,": indeed. I first tried the above example without arc and it shows there. but not for the `blub` case. with arc it shows it
[01:08:35] <FromDiscord> <Vindaar> there being the `Foo` using code
[01:10:33] <FromDiscord> <Elegantbeef> If you make the `echo` print a constant foo it also doesnt have destructors
[01:11:27] *** Joins: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk)
[01:11:59] <FromDiscord> <Michal Maršálek> In reply to @haakon "is there a `contains`": any from sequtils
[01:12:54] <FromDiscord> <Elegantbeef> also `anyit`
[01:13:37] <FromDiscord> <Phil> can you... catch a defect at compile time to throw a better, more descriptive defect?
[01:13:59] <FromDiscord> <Elegantbeef> No defects are not to be caught
[01:14:22] <FromDiscord> <Elegantbeef> And you cant inject code into other libraries
[01:15:04] <FromDiscord> <konsumlamm> i created an issue: https://github.com/nim-lang/Nim/issues/19459
[01:19:15] <FromDiscord> <Phil> In reply to @Elegantbeef "No defects are not": ... So the answer is to check for what will raise the defect and raise your own defect before they can raise theirs, for their error message is non-descriptive and I need a more specific one for my own usecase
[01:20:46] <FromDiscord> <Elegantbeef> Pretty much
[01:21:32] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:22:33] <FromDiscord> <Phil> Can you... test for defects?
[01:22:56] <FromDiscord> <Phil> I know `expect`exists... well, might as well try it whether that can "catch" a defect
[01:23:16] <FromDiscord> <Elegantbeef> It can in certain dialects
[01:23:18] <FromDiscord> <Elegantbeef> In tests you can
[01:23:25] <FromDiscord> <Elegantbeef> You should never rely on catching defects in actual code
[01:23:43] <FromDiscord> <Elegantbeef> defects are logical issues that can be fixed, not exceptional
[01:23:58] <FromDiscord> <Phil> I never intend to catch defects in actual code
[01:24:01] <FromDiscord> <Phil> This is more a testing issue
[01:24:08] <FromDiscord> <Phil> I'm turning my database connection thing into a package
[01:24:25] <FromDiscord> <Phil> And I want to have it explode into somebody's face if they forget to initialize the pool and try to use it anyway
[01:24:32] <FromDiscord> <Phil> But I'd also like to test that that happens when I do it
[01:24:43] <FromDiscord> <Phil> (edit) "I do" => "somebody does"
[01:25:12] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NCN
[01:25:34] <FromDiscord> <Elegantbeef> Ah then yes feel free to catch a defect and raise your own
[01:28:21] <FromDiscord> <that_dude> In reply to @Elegantbeef "And you cant inject": >:)
[01:29:25] <FromDiscord> <Elegantbeef> Get outta here you nerd
[01:29:35] <FromDiscord> <that_dude> >:D
[01:30:51] <FromDiscord> <that_dude> I think that could count as 2 people now lol
[01:31:03] <FromDiscord> <that_dude> ish
[01:31:27] <FromDiscord> <Elegantbeef> Not really
[01:32:04] <FromDiscord> <that_dude> yeah :(
[01:32:12] <FromDiscord> <that_dude> You're right
[01:32:29] <FromDiscord> <Elegantbeef> Most people are sane and dont want to inject  code into libraries 😛
[01:33:19] <FromDiscord> <that_dude> I just want to make more things possible. Including being able to split up my libs
[01:33:41] <FromDiscord> <that_dude> Any way lol
[01:34:10] <FromDiscord> <Elegantbeef> Perhaps design the code that way
[01:34:40] <FromDiscord> <that_dude> I was actually wondering, it's cool that there is a vm to do compile time calculations, but why not just run the more powerfully main compiler twice instead?
[01:35:24] <FromDiscord> <Elegantbeef> Cause that makes no sense the VM is apart of the compiler
[01:36:12] <FromDiscord> <that_dude> I thought that you can just use the vm on it's own. I also thought that it's used to do it's compile time evaluations for const and stuff like that
[01:36:17] <FromDiscord> <Elegantbeef> The VM does application of logic, the Compiler just mutates AST
[01:36:35] <FromDiscord> <that_dude> Oh so all logic goes into the vm then?
[01:36:57] <FromDiscord> <Elegantbeef> Well the compiler semantically checks the constant expressions then passes them to the VM to evaluate
[01:37:06] <FromDiscord> <Elegantbeef> You can use the VM on it's own
[01:37:13] <FromDiscord> <Elegantbeef> But the compiler also ships with it for CTE
[01:38:28] <FromDiscord> <that_dude> ok
[01:38:29] <FromDiscord> <Elegantbeef> Macros and static scopes require evaluation, running the compiler twice doesnt give you evaluation without a computational unit
[01:39:37] <FromDiscord> <that_dude> I think I'm tired rn lol
[01:39:45] <FromDiscord> <that_dude> It's mid day and I'm losing it
[02:04:03] <FromDiscord> <Phil> ... I do not comprehend why I'm not getting shown my defect error message
[02:04:20] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3NCW
[02:04:46] <FromDiscord> <Phil> Much, much simplified. I intentionally want to forget to call "initConnectionPool", which means the attributes of the global var "Pool" never get set
[02:05:06] <FromDiscord> <Phil> And then, if you call the template it's supposed to explode with the PoolDefect error message shown in borrowConnection
[02:05:32] <FromDiscord> <Phil> Instead if just shows you the file and the line where the error occurs, which is correct, but where's my error message
[02:06:25] <FromDiscord> <Elegantbeef> What does the actually compiler show?
[02:06:36] <FromDiscord> <Elegantbeef> well an actual binary\
[02:06:54] <FromDiscord> <Phil> Errr that is a very good question, I've only imported it in inim
[02:07:04] <FromDiscord> <Phil> I do have a binary from compiling it
[02:07:50] <FromDiscord> <Phil> a `pool` binary from the `pool.nim` module (the only module) in the `tinypool`package.↵I've also got a `tinypool.out`
[02:08:13] <FromDiscord> <Elegantbeef> Well compile it and run it outside inim
[02:08:20] <FromDiscord> <Elegantbeef> It might not be playing nice with the output
[02:19:54] <FromDiscord> <Phil> ... yeh, inim wasn't playing nice, in my tests I got it to print out correctly
[02:20:47] <FromDiscord> <Elegantbeef> `nvim /tmp/test.nim` goes brr 😜
[02:27:42] <FromDiscord> <Phil> Alright, got the basics down, strictly speaking I should still throw in a couple more unit tests but
[02:27:43] <FromDiscord> <Phil> eh
[02:27:51] <FromDiscord> <Phil> That's for tomorrow
[02:28:03] <FromDiscord> <Phil> Now to figure out how to actually publish sth to nimble
[02:28:23] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/packages
[02:29:09] <FromDiscord> <Phil> Huh, thanks!
[02:31:50] <FromDiscord> <Phil> sent a long message, see http://ix.io/3ND4
[02:33:21] <FromDiscord> <Elegantbeef> You dont need to post on nimble, it doesnt mean much aside people can do `nimble install`
[02:33:30] <FromDiscord> <Elegantbeef> Nimble supports packages on git
[02:36:23] *** Quits: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk) (Ping timeout: 250 seconds)
[02:49:03] <FromDiscord> <congusbongus> maybe tiny means things like leftpad
[02:50:41] <FromDiscord> <congusbongus> or anything made by jonschlinkert
[02:56:30] <FromDiscord> <pruno> Hello, i'm having an issue with a little project. What i want to do is the following :↵After some calculation, i get a memory address in a variable. At that memory address, the following value is present : A008, is there any way to get the value at that memory address ? (Something like, myvariable.value)
[02:57:01] <FromDiscord> <Elegantbeef> `cast[ptr YourType](yourPointer)[].value`?
[02:59:59] <FromDiscord> <pruno> What do you mean by "YourType" for the cast ?
[03:00:25] <FromDiscord> <Elegantbeef> Well your object that has the `value` field
[03:00:51] <FromDiscord> <Elegantbeef> If you just want to get the value of a specific type from a pointer you'd just do `cast[ptr T](yourPointer)[]`
[03:04:26] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:12:43] <FromDiscord> <mratsim> In reply to @haakon "<@570268431522201601>: have you implemented": https://github.com/mratsim/constantine/blob/50717d8de6715647320fb69935bf8926b5769f95/constantine/config/curves_declaration.nim#L174
[03:13:50] <FromDiscord> <pruno> sent a code paste, see https://paste.rs/twc
[03:15:55] <FromDiscord> <Elegantbeef> You have a pointer you want to offset by 9 bytes?
[03:16:12] <FromDiscord> <Elegantbeef> and then you want to get the data there was a 64bit int?
[03:19:22] <FromDiscord> <pruno> I just want to be able to print the A008 at the memory location 0x1e5bbdf6a09 (not sure i understood your questions)
[03:19:56] <FromDiscord> <leorize> a 9 bytes offset is suspicious is what he meant
[03:19:58] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NDa
[03:21:53] <FromDiscord> <leorize> it really depends on how your debugger interprets that data
[03:22:03] <FromDiscord> <pruno> Oh, it's just the calculation, p_reloc is at specific point and i need the data 9 bytes after that
[03:22:18] <FromDiscord> <Elegantbeef> Well then my code gives you that
[03:22:35] <FromDiscord> <Elegantbeef> you get the address of 9 bytes after the first byte of `pReloc`
[03:22:58] <FromDiscord> <Elegantbeef> So in theory the second byte of an int coming after pReloc
[03:24:10] <FromDiscord> <leorize> fwiw, A008 is 40968, Nim prints number in decimal
[03:24:13] <FromDiscord> <pruno> Mmh, i still get 2208 and not A008, weird
[03:24:42] <FromDiscord> <leorize> 2208 is 0x8A0
[03:25:18] <FromDiscord> <pruno> Oh, yeah, makes sense lol
[03:25:47] <FromDiscord> <Elegantbeef> Yea you're not going to get hex output
[03:25:47] <FromDiscord> <Elegantbeef> echo prints decimal as leorize pointed out
[03:25:47] <FromDiscord> <Elegantbeef> You're looking at BE and getting LE
[03:25:51] <FromDiscord> <Elegantbeef> I think that's BE... i've been known to being wrong
[03:26:02] <FromDiscord> <leorize> it's the opposite of whatever they are using \:p
[03:26:08] <FromDiscord> <Elegantbeef> Indeed
[03:26:40] <FromDiscord> <leorize> seems like it's just endian so it's an easy fix
[03:26:46] <FromDiscord> <pruno> Yes indeed
[03:27:18] <FromDiscord> <leorize> this is why you should always add `0x` to hex numbers so you don't mess them up in your head \:p
[03:28:21] <FromDiscord> <pruno> Good tip :)
[03:33:15] <FromDiscord> <pruno> Well, gonna fix that, for the help guys :)
[03:38:01] *** Joins: Guest6683 (~Guest66@c-98-249-79-241.hsd1.nm.comcast.net)
[03:38:24] <Guest6683> Hello
[03:38:45] <FromDiscord> <Elegantbeef> Hello
[03:41:01] <Guest6683> I am getting a somewhat rare error or at least nothing hits on google.  I am trying to use the pegs module.  I am a total beginner with Nim, and have no experience with PEGs, but I am trying to parse lines like `1997 <-> 1645, 1746` and am trying to compile a program with a peg `const line_expr = peg"""{\d+} \s* '<' '-' '>' \s* { \d+ ( ',' \s*
[03:41:01] <Guest6683> \d+ )*}"""` and I am getting an error `pegs.nim(1863, 28) Error: {} must have the set type`
[03:41:38] <Guest6683> I have absolutely no clue what I am doing wrong there, if anyone can help
[03:41:44] <FromDiscord> <Elegantbeef> Are you trying to learn PEG or do you just want to parse that line?
[03:42:23] <Guest6683> I am trying to learn how to use the peg module. I would otherwise just split(", ") and such
[03:42:35] <FromDiscord> <Elegantbeef> Psh you disappoint me
[03:42:55] <FromDiscord> <Elegantbeef> `line.scanf("$i <-> $i, $i", a, b, c)` 😛
[03:43:30] <FromDiscord> <Elegantbeef> I dont know much of PEG syntax, I do know the NPeg package is fancier
[03:43:35] <Guest6683> lol, that would work too, but in general the right hand side will have a comma seperated list, so maybe a more involved scanf
[03:43:47] <FromDiscord> <Elegantbeef> Ah
[03:44:04] <Guest6683> I am just confused as to what is wrong with my peg
[03:45:03] <Guest6683> The full program would be `import pegs
[03:45:03] <Guest6683> const line_expr = peg"""{\d+} \s* '<' '-' '>' \s* { \d+ ( ',' \s* \d+ )*}"""
[03:45:04] <Guest6683> proc partOne(x:string):int=
[03:45:04] <Guest6683>     for line in x.splitLines():
[03:45:05] <Guest6683>         var matches = newSeq[string](0)
[03:45:05] <Guest6683>         let t = match(line,line_expr,matches)
[03:45:06] <Guest6683>         echo matches
[03:45:06] <Guest6683>     return 0
[03:45:07] <Guest6683> doAssert(partOne("""0 <-> 2
[03:45:07] <Guest6683> 1 <-> 1
[03:45:08] <Guest6683> 2 <-> 0, 3, 4
[03:45:08] <Guest6683> 3 <-> 2, 4
[03:45:09] <Guest6683> 4 <-> 2, 3, 6
[03:45:09] <Guest6683> 5 <-> 6
[03:45:10] <Guest6683> 6 <-> 4, 5""")==6)` which of course will fail the assert, but I will fix that later
[03:45:18] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/
[03:45:42] <Guest6683> https://play.nim-lang.org/#ix=3NDh
[03:45:42] <FromDiscord> <Elegantbeef> IRC doesnt support code blocks as you probably know so that's horrendeous 😛
[03:45:52] <Guest6683> I just found out, thank you
[03:47:14] <FromDiscord> <Elegantbeef> The error is due to https://github.com/nim-lang/Nim/blob/version-1-6/lib/pure/pegs.nim#L1863 so i dont know why
[03:47:27] <Guest6683> I am doing the advent of code to learn nim and am trying to use different parts of the language, and thought this would be a good time to try the pegs module
[03:47:34] <Guest6683> https://adventofcode.com/2017/day/12
[03:47:58] <Guest6683> I saw that and thought the error made no sense
[03:47:58] <FromDiscord> <Elegantbeef> I'd love to help but yea i know nothing of PEG
[03:48:06] <Guest6683> Thanks for looking at least
[03:48:28] <FromDiscord> <Elegantbeef> Quite possible the library has a bug and no one has hit it?
[03:48:58] <FromDiscord> <Elegantbeef> That error goes away with `let` instead of const
[03:49:07] <FromDiscord> <Elegantbeef> So perhaps `pegs` doesnt work at CT?
[03:50:29] <Guest6683> Ah, thanks! I just assumed it would be fine with const
[03:50:34] <Guest6683> thank you very much
[03:51:19] <FromDiscord> <Elegantbeef> I just took a guess, dont know if it's supposed to work at CT
[03:54:03] *** Quits: Guest6683 (~Guest66@c-98-249-79-241.hsd1.nm.comcast.net) (Quit: Client closed)
[04:25:35] <NimEventer> New Nimble package! lrparser - A SLR parser written in Nim with compile-time and run-time grammar generation., see https://github.com/vanyle/lrparser/
[04:29:17] *** Quits: cyraxjoe (~joe@2806:109f:13:9f03:201:2eff:fe80:7df4) (Ping timeout: 240 seconds)
[04:30:11] *** Joins: cyraxjoe (~joe@2806:109f:13:81b1:201:2eff:fe80:7df4)
[04:37:39] <FromDiscord> <sharpcdf> is there a way to make only one c file when running `nim cc main.nim`?
[04:51:03] <FromDiscord> <leorize> nope
[04:59:58] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[05:00:19] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[05:00:28] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[05:02:18] *** Joins: xet7 (~xet7@user/xet7)
[05:03:22] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 268 seconds)
[05:06:17] <FromDiscord> <sharpcdf> rip
[05:07:39] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:19:30] <FromDiscord> <Tetralux> Is it considered correct that `0..-1` tries to do `(0)..-(1)` rather than `(0)..(-1)` ?
[05:21:34] <FromDiscord> <Elegantbeef> yes
[05:21:49] <FromDiscord> <Elegantbeef> Nim allows user defined operators so `..-` could be declared
[05:22:52] <FromDiscord> <Elegantbeef> `0 .. -1` solves it
[05:23:35] <FromDiscord> <Tetralux> In reply to @Elegantbeef "`0 .. -1` solves": This is true, but that seems a bit odd that you need a space there _for that case only_.↵If you always needed that space for that syntax to work, then sure.↵Dunno - Not sure how I feel about that 😄
[05:23:59] <FromDiscord> <Tetralux> Just something surprising that I came across.
[05:26:19] <FromDiscord> <leorize> it happens more than one would expect tbf
[05:27:03] <FromDiscord> <leorize> nim tries to group as many continuous characters as possible into an operator
[05:29:04] <FromDiscord> <Elegantbeef> It's any case with contiguous operators
[05:29:20] <FromDiscord> <leorize> an example that sometimes bites me\: `%` is the toJson operator and `$` can be used to stringify a json node, so you'd expect to write `$%obj` and get json as a string. But that would become the `$%` operator which doesn't exist and will raise an error. Instead you'd have to use `$ %obj`
[05:29:20] <FromDiscord> <Elegantbeef> `echo 1 -3`
[05:29:44] <FromDiscord> <Tetralux> In reply to @leorize "an example that sometimes": Oh wow. That's... kinda icky 🤣
[05:30:18] <FromDiscord> <Elegantbeef> I mean `%` was a mistake imo 😛
[05:30:26] <FromDiscord> <Elegantbeef> But since Nim has macros there are valid operators that might not be considered valid in other scopes
[05:30:45] <FromDiscord> <Elegantbeef> Take https://github.com/CosmicToast/pipe for instance
[05:30:52] <FromDiscord> <Tetralux> Yeah - That particular example may be better with an explicit call to `toJson` or whatever-it's-called, rather than relying on operators like `%` (wut), but yeah - that is still a good example of the problem you can run into.
[05:31:31] <FromDiscord> <Elegantbeef> There's  not really a good solution though
[05:32:01] <FromDiscord> <Elegantbeef> If you dont have a `..-` operator are you supposed to start randomly chunking the operator to find one that compiles 😀
[05:32:27] <FromDiscord> <leorize> I mean that is certainly possible
[05:32:32] <FromDiscord> <Tetralux> To be fair, who said anyone wanted a `..-` operator? 😄
[05:32:37] <FromDiscord> <Rika> Is it a good idea though
[05:32:53] <FromDiscord> <leorize> we actually have `..^` as an operator because people so often write it like that
[05:32:56] <FromDiscord> <Rika> You cannot assume no one would want any arbitrary operator
[05:33:35] <FromDiscord> <leorize> the actual stuff is `a .. ^b`, but people writes it as `a..^b` so often that it grew into an operator on its own
[05:34:09] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:34:23] <FromDiscord> <Elegantbeef> To me having user defined operators when you have macros is a no brainer
[05:34:27] <FromDiscord> <Tetralux> In reply to @Rika "You cannot assume no": While that is indeed true, I can very much have an opinion on whether an operator makes sense in any given situation, obviously.↵Like - I could use `%%=` (assuming that's a valid operator to overload) to mean `multiply by two and add one`, but I wouldn't, because I want to be able to understand my code. 😄
[05:34:31] <FromDiscord> <Elegantbeef> It allows you to extend the language in an expressive matter
[05:34:52] <FromDiscord> <Elegantbeef> I mean i agree your operator should make sense
[05:34:54] <FromDiscord> <Tetralux> In reply to @leorize "the actual stuff is": Huh. Yeah, that's definitely the same problem as I had 😄
[05:34:57] <FromDiscord> <Elegantbeef> Which is why i dislike the json operators
[05:35:22] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 250 seconds)
[05:35:25] <FromDiscord> <Elegantbeef> There isnt an empirical rule of "operators that makes sense" 😀
[05:35:53] <FromDiscord> <leorize> obviously we just need "smart" operator grouping \:P
[05:35:57] <FromDiscord> <Elegantbeef> Lol
[05:36:02] <FromDiscord> <Tetralux> In reply to @Elegantbeef "There isnt an empirical": You could maybe make one 😏 😛
[05:36:10] <FromDiscord> <Elegantbeef> Just need people to understand operators grouped together are considered one
[05:36:24] <FromDiscord> <Elegantbeef> You cant make one since user operators can be for specific domains and make sense only there
[05:36:26] <FromDiscord> <Tetralux> Like...↵`..` => range↵`^` => xor (for example)↵`..^` => nonsensical, so cannot be overloaded
[05:36:31] <FromDiscord> <Elegantbeef> For instance unicode operators
[05:36:36] <FromDiscord> <Elegantbeef> But it's not nonsensical
[05:36:48] <FromDiscord> <Elegantbeef> Nim doesnt use `^` for xor
[05:37:13] <FromDiscord> <Elegantbeef> Nim uses `^` for `BackwardsIndex` and in urnary  raising to power
[05:37:14] <FromDiscord> <Elegantbeef> in binary\
[05:37:18] <FromDiscord> <Tetralux> Alright - but let's assume that it was XOR for a moment...↵To that, I could just ask, "In what situation does it make sense to have a 'ranged-xor'?"
[05:37:34] <FromDiscord> <Elegantbeef> But that disregards any case where it might make sense
[05:37:40] <FromDiscord> <Tetralux> Name one.
[05:37:46] <FromDiscord> <Elegantbeef> And in the case of Nim it makes sense as an iterator
[05:37:57] <FromDiscord> <Rika> That's the issue, what people seem as sensible differs a lot across people
[05:38:04] <FromDiscord> <Rika> Deem, not seem
[05:38:06] <FromDiscord> <leorize> https://github.com/zevv/npeg
[05:38:21] <FromDiscord> <leorize> ^ look at that for the biggest collection of operators in a special habitat
[05:38:25] <FromDiscord> <Elegantbeef> Nim has macros which means operators can be used for a ton of power
[05:38:37] <FromDiscord> <Elegantbeef> And they can make sense
[05:38:48] <FromDiscord> <Elegantbeef> Take `-->`
[05:38:54] <FromDiscord> <Elegantbeef> negative less than?
[05:39:09] <FromDiscord> <Elegantbeef> Greater than \
[05:39:20] <FromDiscord> <Elegantbeef> https://github.com/zero-functional/zero-functional
[05:39:24] <FromDiscord> <Elegantbeef> It uses it for chaining
[05:39:39] <FromDiscord> <Elegantbeef> It's the same with `|>` or greater doesnt make any sense
[05:39:46] <FromDiscord> <Elegantbeef> But pipe uses it
[05:40:01] <FromDiscord> <Tetralux> In reply to @leorize "https://github.com/zevv/npeg": Oh man... I feel like I'd have to learn a whole new language just to read that 😄
[05:40:12] <FromDiscord> <Elegantbeef> You kinda do
[05:40:27] <FromDiscord> <Elegantbeef> But you need to learn a new language for any pattern matching logic
[05:41:12] <FromDiscord> <Tetralux> In reply to @Elegantbeef "It's the same with": One could make an argument that one is more easily recognised, in fairness, since that's actually well-known operator already.
[05:41:35] <FromDiscord> <Elegantbeef> Sure but the point is the language doesnt define what is acceptable and things can grow naturally
[05:41:49] <FromDiscord> <Elegantbeef> Nim is a relatively small language that is implemented mostly in libraries
[05:42:35] <FromDiscord> <Tetralux> I think there's some merit to that -- though, I could see that leading to ungrokkable code pretty easily, which is a touch concerning. 🤔
[05:42:49] <FromDiscord> <Elegantbeef> Sure, shun bad use of operators
[05:42:55] <FromDiscord> <Elegantbeef> Join me and my quest to shunning them
[05:43:07] <FromDiscord> <Tetralux> I won't hesitate in doing so 😄
[05:43:18] <FromDiscord> <Elegantbeef> Hell 1.6.0 introduced unicode operators for those science nerds
[05:43:35] <FromDiscord> <Rika> Well choose, strange operators or Java level verbosity
[05:43:37] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NDF
[05:43:48] <FromDiscord> <Elegantbeef> And it's a lovely sensible solution
[05:44:01] <FromDiscord> <Tetralux> In reply to @Elegantbeef "So the following is": That's more grounded though, since those symbols really do have an actual meaning, which I'm guessing is what they're used for there.
[05:44:24] <FromDiscord> <Elegantbeef> Indeed, but in other places that have locked off operators that's n ot allowed
[05:44:32] <FromDiscord> <Tetralux> I wonder how viable it would be to have it fall back to parsing it as `(0)..(-1)` if no `..-` was defined for the type combination 🤔
[05:44:34] <FromDiscord> <Rika> I'd say it's just as bad since now I need to figure out how to type them
[05:44:36] <FromDiscord> <Elegantbeef> Bad operators are bad regardless
[05:44:48] <FromDiscord> <Elegantbeef> well what if you have a `.-` operator?
[05:45:03] <FromDiscord> <Tetralux> `..-` you mean?
[05:45:05] <FromDiscord> <Elegantbeef> I dont think a fallback makes sense
[05:45:07] <FromDiscord> <Rika> No
[05:45:12] <FromDiscord> <Elegantbeef> No just `.-`
[05:45:19] <FromDiscord> <Elegantbeef> Take the ZF example
[05:45:36] <FromDiscord> <Tetralux> `0 . .- 1` -> is this valid syntax?
[05:45:43] <FromDiscord> <Elegantbeef> `->` exists in sugar `-->` is what ZF uses
[05:46:01] <FromDiscord> <Tetralux> (edit) "syntax?" => "syntax?↵Because if not, I'm not sure how that would affect this case."
[05:46:16] <FromDiscord> <Elegantbeef> No, but i think trying to reason what operators are valid in a case is fruitless
[05:46:39] <FromDiscord> <Elegantbeef> It requires a bunch of recursive checking and enables hidden behaviour
[05:47:14] <FromDiscord> <Tetralux> One could argue that doing a bunch of logic to "smartly" figure out what operator was meant, when there's only one that compiles, is in line with Nim's wish to be maximally 'useful', in that sense.
[05:47:33] <FromDiscord> <Tetralux> Not that I'm necessarily seriously suggesting it.
[05:47:58] <FromDiscord> <Elegantbeef> I think it's a relatively complex thing to manage and to do it properly
[05:48:00] <FromDiscord> <Elegantbeef> The compiler doesnt compile in the case it's confuse instead of attempting to be right
[05:48:55] <FromDiscord> <Tetralux> Sure - but one could argue that negative numbers aren't exactly a hidden technology from the moon, exactly. 😛
[05:49:01] <FromDiscord> <Tetralux> (edit) "Sure - but one could argue that negative numbers aren't exactly a hidden technology ... from" 03added "that comes"
[05:49:08] <FromDiscord> <Elegantbeef> Sure but that's a hard coded solution
[05:49:16] <FromDiscord> <Elegantbeef> You dont do hard code logic in a compiler
[05:49:31] <FromDiscord> <Elegantbeef> Atleast not generally
[05:49:52] <FromDiscord> <Elegantbeef> unary `-` is not any more special than unary anything
[05:49:56] <FromDiscord> <Tetralux> I mean, yeah - you actually _have to_ hardcode some logic into the compiler - but I get what you're meaning.
[05:50:35] <FromDiscord> <Elegantbeef> Yea you ideally do things as general as possible and everything falls into rules, stuff does need to be hardcoded but it's best to cast a wide net
[05:51:14] <FromDiscord> <Tetralux> Let us test that logic: "Why is the JSON operator still `%` ?"
[05:51:18] <FromDiscord> <Elegantbeef> `10 --+ 11` falls into the "what's right" to me
[05:51:50] <FromDiscord> <Elegantbeef> Not many appreciate that as an operator and i think it wont be coming with the json rewrite
[05:51:58] <FromDiscord> <Tetralux> (edit) "?"" => "?"↵"Why--in spite of seemingly not being a good operator for that--has it not been changed?""
[05:53:52] <FromDiscord> <Tetralux> Ah - so it's just an obscure thing that's not been addressed because nobody cares enough about it?
[05:53:56] <FromDiscord> <Rika> backwards compatibility and not breaking old code
[05:54:17] <FromDiscord> <Elegantbeef> Nim 2.0 is coming which means we can break libraries
[05:54:27] <FromDiscord> <Elegantbeef> Either performance or ugly code is getting addressed
[05:54:55] <FromDiscord> <Rika> or both xd
[05:55:02] <FromDiscord> <Tetralux> In reply to @Rika "backwards compatibility and not": Right - Though, one could make a case that's a point against having arbitrary operators, since bad ones will stick around. 🤔
[05:55:18] <FromDiscord> <Rika> it is indeed
[05:55:32] <FromDiscord> <Rika> i just mean it cannot be changed because
[05:55:49] <FromDiscord> <Rika> once its in stable theres no going back pretty much
[05:56:19] <FromDiscord> <Tetralux> It's an interesting problem. 🤔
[05:56:58] <FromDiscord> <Elegantbeef> You want to support arbitrary operators cause they enable expressive code, but dont want them to be used cause someone was having a laugh 😛
[05:57:15] <FromDiscord> <Tetralux> 😄
[05:57:20] <FromDiscord> <Tetralux> I'm all for people having a laugh!
[05:57:34] <FromDiscord> <Elegantbeef> I'm not for it when it makes my code ugly 😛
[05:58:00] <FromDiscord> <Elegantbeef> `%` should've been `toJson` and if you wanted a unary operator you could alias it or the package could've provided it
[05:58:05] <FromDiscord> <Tetralux> Maybe people should be able to vote on Nimble packages, and downvote those with bad operators. 😄 ↵Then 'bad' packages become advised against by the package system when you try to install it. 😏😛
[05:58:23] <FromDiscord> <Rika> that is complicated
[05:58:24] <FromDiscord> <Tetralux> In reply to @Elegantbeef "`%` should've been `toJson`": That's probably what I would have done, if that had been my decision.
[05:58:33] <FromDiscord> <Elegantbeef> Eh we already have that if the repo includes "beef331" it's probably a bad package
[05:58:55] <FromDiscord> <Tetralux> Beef331? 🧐
[05:59:03] <FromDiscord> <Elegantbeef> That's my github
[05:59:07] <FromDiscord> <Elegantbeef> I'm saying i'm a shit programmer
[05:59:11] <FromDiscord> <Tetralux> Ah!
[05:59:12] <FromDiscord> <Rika> xd
[05:59:12] <FromDiscord> <Tetralux> Gotcha!
[05:59:18] <FromDiscord> <Rika> imagine needing to explain a joke
[05:59:25] <FromDiscord> <Tetralux> HEY
[05:59:37] <FromDiscord> <Tetralux> I CANNOT BE IN ON LITERALLY EVERY JOKE
[05:59:39] <FromDiscord> <Tetralux> I'M SORRY
[05:59:41] <FromDiscord> <Tetralux> 😛
[06:00:09] <FromDiscord> <Elegantbeef> Also to make it even more complicated for "sensible operators" `/../` exists 😛
[06:00:28] <FromDiscord> <Tetralux> Also - sidenote - this is a fairly good first impression of this community.
[06:00:32] <FromDiscord> <Tetralux> So kudos
[06:00:36] <FromDiscord> <Tetralux> 👍😄
[06:00:37] <FromDiscord> <Elegantbeef> Fuck we were too nice
[06:00:42] <FromDiscord> <Elegantbeef> Now they'll never leave
[06:00:44] <FromDiscord> <Rika> fuck you beef
[06:00:48] <FromDiscord> <Tetralux> 😈
[06:00:51] <FromDiscord> <Elegantbeef> Do it yourself coward
[06:00:54] <FromDiscord> <Rika> beef is dumb
[06:01:05] <FromDiscord> <Rika> i cant believe youre still here beef smh
[06:01:12] <FromDiscord> <Elegantbeef> Same
[06:01:25] <FromDiscord> <Rika> In reply to @Elegantbeef "Do it yourself coward": 😳
[06:01:43] <FromDiscord> <Elegantbeef> I'm surprised my rambling didnt result in tetra being annoyed by this community
[06:01:48] <FromDiscord> <Rika> xd
[06:01:54] <FromDiscord> <Rika> your assumptions are strange
[06:02:11] <FromDiscord> <Elegantbeef> Speaking of the subreddit doesnt link to any of the realtime chats
[06:02:23] <FromDiscord> <Elegantbeef> Who wants to yell at one of the subreddit mods
[06:06:45] <FromDiscord> <Tetralux> In reply to @Elegantbeef "I'm surprised my rambling": More people need to have the "Don't take yourself too seriously + sense of humour" attitude. 😄👍
[06:07:11] <FromDiscord> <Elegantbeef> Well i just accepted i'm a joke
[06:07:23] <FromDiscord> <Tetralux> Don't kid yourself - we all are 😈
[06:07:24] <FromDiscord> <Tetralux> 😄
[06:11:21] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[06:11:50] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:13:44] <FromDiscord> <Elegantbeef> But hey atleast i'm actually working on my game so... take that!
[06:17:29] <FromDiscord> <impbox [ftsf]> omg
[06:17:56] <FromDiscord> <Elegantbeef> Damn it i broke git again
[06:18:03] <FromDiscord> <impbox [ftsf]> the whole thing?
[06:18:10] <FromDiscord> <Rika> git gud
[06:18:11] <FromDiscord> <Elegantbeef> Well for my project
[06:18:23] <FromDiscord> <impbox [ftsf]> you ruined the whole decentralised network
[06:18:35] <FromDiscord> <Elegantbeef> every time i commit it's outputting the output of a command i ran
[06:18:36] <FromDiscord> <impbox [ftsf]> guess no more work for me today
[06:18:40] <FromDiscord> <Elegantbeef> This happenedbefore
[06:18:49] <FromDiscord> <impbox [ftsf]> feature!
[06:19:46] <FromDiscord> <Rika> poggers no more programming
[06:20:57] <NimEventer> New thread by Tsojtsoj: Macro question: "undeclared identifier", but identifier is declared?, see https://forum.nim-lang.org/t/8847
[06:21:02] <FromDiscord> <Elegantbeef> Good thing i borked it after all my refactoring/implementing
[06:43:39] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:51:42] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:59:27] <FromDiscord> <Tetralux> Does defining a `iterator items(x: MyType)` just allow `for e in x` to work?
[06:59:40] <FromDiscord> <Tetralux> (edit) "Does defining" => "Just to confirm:" | "just allow" => "allows" | "work?" => "work, right?"
[06:59:47] <FromDiscord> <Tetralux> (edit) "Just to confirm: ... a" 03added "declaring"
[07:00:22] <FromDiscord> <Elegantbeef> Yes but using implicit `items` will result in bugs with generics
[07:01:06] <FromDiscord> <Tetralux> As in `iterator items[T]` + `for e in x` ?
[07:01:11] <FromDiscord> <Elegantbeef> Nah
[07:01:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NDX
[07:01:56] <FromDiscord> <Tetralux> Is the workaround to just do `for x in a.items:` there then?
[07:02:03] <FromDiscord> <Elegantbeef> `.items` isnt properly used in this case, I'm going to try to fix it but need to put fresh eyes on it
[07:02:06] <FromDiscord> <Elegantbeef> Yes
[07:02:16] <FromDiscord> <Tetralux> Gotcha. Cheers for the heads up.
[07:02:18] <FromDiscord> <Tetralux> 👍
[07:02:24] <FromDiscord> <Elegantbeef> it doesn know it's supposed to mixin `items` and explicitly mixing it in doesnt work
[07:02:38] <FromDiscord> <Tetralux> I haven't got to mixins yet 😄
[07:03:11] <FromDiscord> <Elegantbeef> They're just a part of generics saying "for this symbol add the scope of instantiation"
[07:03:50] <FromDiscord> <Tetralux> Hmmm. I'll have to look more into that to see how they work.
[07:04:00] <FromDiscord> <Tetralux> Oh - also - `for i, e in x` is enabled by `iterator enumerate(x: MyType): tuple[IntType, ElType]` ?
[07:04:12] *** Quits: rienske (~rie@185.254.75.31) (Ping timeout: 250 seconds)
[07:04:16] <FromDiscord> <Elegantbeef> `pairs`
[07:04:19] <FromDiscord> <Tetralux> Ah!
[07:04:21] <FromDiscord> <Tetralux> Gotcha.
[07:04:23] <FromDiscord> <Elegantbeef> there is `std/enumerate`
[07:04:34] <FromDiscord> <Elegantbeef> which lets you do `for x, y in enumerate myType.items`
[07:04:47] <FromDiscord> <Elegantbeef> Allows you to enumerate any iterator
[07:05:28] <FromDiscord> <Elegantbeef> And if you want more iterator examples or utillities https://github.com/beef331/slicerator/blob/master/src/slicerator.nim is full of them 😛
[07:09:15] <FromDiscord> <Tetralux> sent a code paste, see https://play.nim-lang.org/#ix=3NDZ
[07:09:25] <FromDiscord> <Elegantbeef> `for x in a[10]`  works
[07:09:26] <FromDiscord> <Tetralux> (edit) "https://play.nim-lang.org/#ix=3NDZ" => "https://play.nim-lang.org/#ix=3NE0"
[07:09:27] <FromDiscord> <Tetralux> (edit) "https://play.nim-lang.org/#ix=3NE0" => "https://paste.rs/A4J"
[07:09:44] <FromDiscord> <Elegantbeef> well in the example it's `for x in a[1..3]`
[07:09:47] <FromDiscord> <Elegantbeef> Nim slices presently copy
[07:10:23] <FromDiscord> <Tetralux> `for x in arr_val[1..3]` iterates over a copy of a range of the array?
[07:10:34] <FromDiscord> <Elegantbeef> In default Nim yes
[07:10:54] <FromDiscord> <Tetralux> sent a code paste, see https://play.nim-lang.org/#ix=3NE1
[07:10:56] <FromDiscord> <Tetralux> (edit) "https://play.nim-lang.org/#ix=3NE1" => "https://paste.rs/0fb"
[07:11:03] <FromDiscord> <Elegantbeef> Yes it does a non copy iteration of the slice
[07:11:10] <FromDiscord> <Tetralux> (edit) "https://paste.rs/UIl" => "https://play.nim-lang.org/#ix=3NE2"
[07:11:34] <FromDiscord> <Tetralux> And that's only resolved to in the target of a for loop, correcT?
[07:11:35] <FromDiscord> <Tetralux> (edit) "correcT?" => "correct?"
[07:11:38] <FromDiscord> <Tetralux> (edit) "resolved to" => "resolved-to"
[07:11:43] <FromDiscord> <Tetralux> Since it's an iterator?
[07:11:51] <FromDiscord> <Elegantbeef> Yep
[07:11:56] <FromDiscord> <Tetralux> Right. Huh. Interesting.
[07:12:02] <FromDiscord> <Elegantbeef> It's only invoked in the case the compiler wants the iterators
[07:12:07] <FromDiscord> <Tetralux> That's gonna take some grokking 😄
[07:12:15] <FromDiscord> <Elegantbeef> which is `for x in y` or when you have a template that has `t: iterable`
[07:12:57] <FromDiscord> <Tetralux> Going back to `for i, e in x`, how does one make `e` a `var ElType` ?
[07:13:04] <FromDiscord> <Tetralux> So that `e = ...` works in the loop?
[07:13:46] *** Joins: rie (~rie@185.254.75.31)
[07:13:54] <FromDiscord> <Tetralux> Do you just define an iterator that returns `: var T` instead?
[07:14:06] <FromDiscord> <Elegantbeef> enumerate might work, but nim doesnt have an abillity to safely capture `var T` so `(int, var T)` doesnt work
[07:14:19] <FromDiscord> <Elegantbeef> `mitems` is defined for collections, and yes that does work
[07:14:29] <FromDiscord> <Tetralux> In reply to @Elegantbeef "`mitems` is defined for": That I saw, yeah.
[07:14:35] <FromDiscord> <Tetralux> Hmm. That's unfortunate.
[07:14:54] <FromDiscord> <Tetralux> Though, you could do it for `for e in x` presumably?
[07:15:01] <FromDiscord> <Elegantbeef> Yea
[07:15:08] <FromDiscord> <Tetralux> Gotcha. Cheers. 👍
[07:15:30] <FromDiscord> <Elegantbeef> https://github.com/beef331/slicerator/blob/master/src/slicerator.nim#L76-L82 is an example at how you might emulate this
[07:16:12] <FromDiscord> <Tetralux> Here's another: How about slices with no end-bounds?↵So a way to write `thing[0..]` or `thing[0..end]` instead of `thing[0..thing.len-1]` - etc?
[07:16:21] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NE3
[07:16:24] <FromDiscord> <Elegantbeef> `thing[0..^1]`
[07:16:40] <FromDiscord> <Tetralux> In reply to @Elegantbeef "`thing[0..^1]`": What's the type of `0..^1` ?
[07:16:41] <FromDiscord> <Elegantbeef> And we go full circle
[07:16:51] <FromDiscord> <Elegantbeef> `HSlice[int, BackwardsIndex]`
[07:17:27] <FromDiscord> <Tetralux> What type should one use to define `[]` on a custom type which you want to be able to slice with either a forward, or backwards, slice?
[07:17:45] <FromDiscord> <Tetralux> Or is it a case of defining two overloads: `Slice[T]` and `HSlice[T, BackwardsIndex]` ?
[07:17:56] <FromDiscord> <Elegantbeef> https://github.com/beef331/slicerator/blob/master/src/slicerator.nim#L5-L13
[07:18:18] <FromDiscord> <Tetralux> Ah, so two overloads it is then 😄
[07:19:16] <FromDiscord> <Elegantbeef> You can also defined `a[10, 20]` by doing `(a: T, b: Y,  c: Z)`
[07:19:45] <FromDiscord> <Tetralux> Gotcha 👍
[07:20:42] <FromDiscord> <Elegantbeef> The same rules apply to the `{}` operator
[07:22:02] <FromDiscord> <evoalg> I read somewhere that `x .. y` is preferred style over `x..y` ... so I've been using `x ... y` ever since?
[07:22:29] <FromDiscord> <Elegantbeef> I mean i do `x..y` but if there are expressions i do `x + 1 .. y - 1`
[07:23:20] <FromDiscord> <Elegantbeef> `x..y` reads nicer to me and `x + 1 .. y - 1` is easier to see the logic
[07:24:25] <FromDiscord> <evoalg> I used to think `x+1` was easier too but I changed to `x + 1` ... eg if I'm doing `y = x + 1`
[07:25:18] <FromDiscord> <evoalg> :w
[07:25:25] <FromDiscord> <evoalg> gosh
[07:25:54] <FromDiscord> <evoalg> I was just updating my "where beefy is wrong" notes ... it's very short
[07:27:17] <FromDiscord> <Elegantbeef> Lol
[07:27:55] <FromDiscord> <evoalg> it only has that and how you think that -20 degree celsius isn't that cold
[07:28:10] <FromDiscord> <Elegantbeef> Well it's not
[07:28:48] <FromDiscord> <congusbongus> doesn't it depend on what you're wearing
[07:30:20] <FromDiscord> <Tetralux> If you have your own string type (`str`), and want to be able to do `str"some text"`, but manually manage the memory of the resulting `str`, do you need to copy the `string`'s data, or is there a way to avoid ever creating the `string` at all there?
[07:30:43] <FromDiscord> <Tetralux> (edit) "manually manage" => "have `str` be non-owning on" | "memory of the resulting `str`," => "bytes,"
[07:30:58] <FromDiscord> <Elegantbeef> The string lit is a constant in the case there
[07:31:06] <FromDiscord> <Tetralux> (edit) "If you have your own string type (`str`), and want to be able to do `str"some text"`, but have `str` be non-owning on the bytes, ... do" 03added "and be manually-managed memory,"
[07:31:27] <FromDiscord> <Rika> strings are never manually managed as well no?
[07:31:38] <FromDiscord> <Elegantbeef> Well their string is
[07:31:39] <FromDiscord> <Tetralux> In reply to @Elegantbeef "The string lit is": Does that mean that the string's data points into RODATA, and so there's no need to copy the bytes?
[07:31:57] <FromDiscord> <leorize> pretty much
[07:32:02] <FromDiscord> <Tetralux> Cool 👍
[07:32:22] <FromDiscord> <Tetralux> Relatedly, does `str("some text")` work the same way in this case?
[07:32:38] <FromDiscord> <Elegantbeef> Same thing just one is a raw lit
[07:32:42] <FromDiscord> <Elegantbeef> The first is a raw lit
[07:33:52] <FromDiscord> <Elegantbeef> `echo"hello\nworld"` vs `echo "hello\nworld"`
[07:33:59] <FromDiscord> <Tetralux> Hmm.
[07:34:02] <FromDiscord> <Rika> i assume str is the type and not a conversion proc
[07:34:32] <FromDiscord> <Elegantbeef> I assumed it was a conversion procedure
[07:37:51] <FromDiscord> <Tetralux> `str` is the type, but I assume I couldn't do `str("some text")` anyway in that case.
[07:37:54] <FromDiscord> <Tetralux> (edit) "assume" => "imagine"
[07:38:20] <FromDiscord> <Tetralux> (edit) "`str` is ... thetype" 03added "actually" | "type," => "type in realitry,"
[07:38:23] <FromDiscord> <Tetralux> (edit) "realitry," => "reality,"
[07:40:04] <FromDiscord> <Tetralux> I _wouldn't_ want to define a `converter` procedure for this, since Nim will let me use a runtime-known string, or a constant string, but the GC won't know if I'm still using the string data, correct?
[07:40:43] <FromDiscord> <Elegantbeef> `convert toMyStr(aStr: static string): MyStr` could work, i dont recall though
[07:40:48] <FromDiscord> <Elegantbeef> converter\
[07:41:02] <FromDiscord> <Tetralux> Ahhh. Interesting, yeah.
[07:41:03] <FromDiscord> <Elegantbeef> Nim does allow you to have procedures that only work on compile constants
[07:41:13] <FromDiscord> <Tetralux> `static[string]`, eh?
[07:41:34] <FromDiscord> <Rika> not a converter, a conversion proc
[07:41:57] <FromDiscord> <Rika> toJson is a conversion proc
[07:42:04] <FromDiscord> <Rika> if it existed
[07:43:16] <FromDiscord> <Tetralux> In reply to @Elegantbeef "`convert toMyStr(aStr: static string):": This makes progress, but it doesn't want to work here, it seems - since `str` takes the address of the data. 🤔
[07:43:20] <FromDiscord> <Elegantbeef> I'd argue having `MyStr` and a `myStr` proc
[07:43:20] <FromDiscord> <Tetralux> (edit) "the" => "its"
[07:44:08] <FromDiscord> <Elegantbeef> Yea i dont know
[07:44:14] <FromDiscord> <Tetralux> Hmm.
[07:44:37] <FromDiscord> <Elegantbeef> My view is just use `string` you arent really going to need a different type of string in 99% of use cases
[07:45:24] <FromDiscord> <Tetralux> I'm exploring just how well supported manual memory management is in Nim by seeing how far I get without it 😛
[07:46:10] <FromDiscord> <Tetralux> I made custom allocators, dynamic arrays, slices (like Go's) work already - and a stringview too - but string literals was a detail I hadn't totally worked out yet.
[07:46:12] <FromDiscord> <Elegantbeef> Well you can make macros or procedures that do what you need
[07:46:42] <FromDiscord> <Elegantbeef> a macro that takes a `static string` iterates over it and allocates your string isnt too hard
[07:47:40] <FromDiscord> <Tetralux> In reply to @Elegantbeef "a macro that takes": Ideally though, I'd avoid allocation and just use the pointer into RODATA. 🤔
[07:47:48] <FromDiscord> <Tetralux> I'm just not sure how to get at that 😄
[07:48:29] <FromDiscord> <Elegantbeef> You'd need the constant to be compiled so i dont see how you'd do it
[07:49:05] <FromDiscord> <Elegantbeef> Aside from using the codegendecl pragma
[07:49:12] <FromDiscord> <Tetralux> Compiled
[07:49:13] <FromDiscord> <Tetralux> (edit) "Compiled" => "Compiled?"
[07:50:04] <FromDiscord> <Elegantbeef> Well to use the RODATA it needs to be compiled into the program, but you want to only reuse the pointer if it's in the RODATA
[07:50:38] <FromDiscord> <Elegantbeef> so `proc toMyStr(s: static string): MyStr` doesnt work since it's not given to C
[07:50:47] <FromDiscord> <Elegantbeef> Or atleast it might not be
[07:51:59] <FromDiscord> <Tetralux> sent a code paste, see https://play.nim-lang.org/#ix=3NE8
[07:52:10] <FromDiscord> <Elegantbeef> Templates exist
[07:52:26] <FromDiscord> <Tetralux> Whatcha thinking? 😄
[07:53:17] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NE9
[07:53:22] <FromDiscord> <Elegantbeef> dont need the backticks
[07:53:49] <FromDiscord> <Tetralux> sent a code paste, see https://play.nim-lang.org/#ix=3NEa
[07:54:06] <FromDiscord> <Elegantbeef> Yes
[07:54:22] <FromDiscord> <Elegantbeef> Just making the point to use a template before a macro 😛
[07:54:57] <FromDiscord> <Tetralux> Presumably because a template basically just does the `quote do:` thing anyway - whereas macros are more about building up an expr from AST procs?
[07:55:16] <FromDiscord> <Elegantbeef> Yes and templates dont use the VM so are slightly faster
[07:55:24] <FromDiscord> <Tetralux> Ah, interesting. Cheers.
[07:55:48] <FromDiscord> <Elegantbeef> Faster to compile\
[07:56:19] <FromDiscord> <Tetralux> sent a code paste, see https://play.nim-lang.org/#ix=3NEb
[07:56:26] <FromDiscord> <Elegantbeef> yes
[07:56:33] <FromDiscord> <Elegantbeef> cause templates replace any instance of their fields
[07:56:38] <FromDiscord> <Tetralux> (edit) "https://play.nim-lang.org/#ix=3NEb" => "https://play.nim-lang.org/#ix=3NEc"
[07:56:41] <FromDiscord> <Elegantbeef> you dont need to backtick the symbols in templates
[07:57:05] <FromDiscord> <Elegantbeef> That behaviour catches a lot of people
[07:57:20] <FromDiscord> <Elegantbeef> If any identifier matches the name of a parameter it's getting replaced
[07:57:27] <FromDiscord> <Tetralux> Ah! So in a template, any mention of `s` just becomes the value `s` has as-passed to it --- whereas, in a macro, you have to use backticks to escape the params to get the same behavior?
[07:57:42] <FromDiscord> <Elegantbeef> Well inside `quote do`
[07:58:06] <FromDiscord> <Elegantbeef> macros are not quote do, quote do is a special tool that allows quasi quoting like in macros
[07:58:11] <FromDiscord> <Elegantbeef> like in templates\
[07:58:59] <FromDiscord> <Elegantbeef> `genasts` is a module with an alternative quasi quote that doesnt rely on backtick replaces
[07:59:00] <FromDiscord> <Tetralux> Right, right - yeah.
[07:59:32] <FromDiscord> <Tetralux> So the backticks are part of the implementation of `quote`, rather than of `macro`s, then.
[07:59:40] <FromDiscord> <Elegantbeef> Yep
[07:59:43] <FromDiscord> <Tetralux> Gotcha.
[07:59:59] <FromDiscord> <Elegantbeef> Macros are really just interpreted user defined compiler passes
[08:00:18] <FromDiscord> <Tetralux> Interesting 😄
[08:01:05] <FromDiscord> <Elegantbeef> Generally you use genast/quote as a tool to make specific AST inside a larger macro
[08:01:19] <FromDiscord> <Tetralux> Right.
[08:01:21] <FromDiscord> <Elegantbeef> What language do you come from btw?
[08:01:42] <FromDiscord> <Tetralux> Everything, basically 😄 ↵Everything from VB.NET to Odin 🤣
[08:01:56] <FromDiscord> <Tetralux> (edit) "↵Everything" => "↵Everything"
[08:01:57] <FromDiscord> <Elegantbeef> Lol
[08:02:05] <FromDiscord> <Elegantbeef> Hey the odin has to make you feel at home somewhat
[08:02:09] <FromDiscord> <Elegantbeef> Both Nim and Odin are pascally
[08:02:41] <FromDiscord> <Rika> pascallian
[08:02:45] <FromDiscord> <Elegantbeef> Though i know odin is much more magic free
[08:02:50] <FromDiscord> <Elegantbeef> Wirthian
[08:02:52] <FromDiscord> <Tetralux> That it is 😄
[08:03:03] <FromDiscord> <Elegantbeef> Wirth using
[08:04:43] <FromDiscord> <Tetralux> I take there's no way to make `str"some text"` work?↵Closest I can get is `toStr"some text"` where `toStr` is the name of the proc?↵Unless I define a `converter`, but then it's implicitly converted _everywhere_, right?
[08:05:39] <FromDiscord> <Elegantbeef> No you'd have ambiguity
[08:05:49] <FromDiscord> <Elegantbeef> You could do `Str` as the type then use `str`
[08:06:00] <FromDiscord> <Rika> LIKE NIM TELLS YOU TO xdddd
[08:06:04] <FromDiscord> <Rika> well, nep
[08:06:06] <FromDiscord> <Tetralux> 😄
[08:06:13] <FromDiscord> <Elegantbeef> And if you want to reduce allocations you'll want a macro
[08:06:38] <FromDiscord> <Elegantbeef> Since right now you're allocating a Nim string to make your string
[08:06:45] <FromDiscord> <Tetralux> Oh yeah. Good point 🤔
[08:08:14] <FromDiscord> <Tetralux> But can you get the address into RODATA from a string literal 🤔
[08:08:49] <FromDiscord> <Elegantbeef> Probably
[08:08:58] <FromDiscord> <Tetralux> Alas, I'm not sure how 😄
[08:09:15] <FromDiscord> <Elegantbeef> You'd need `str(input: string)` to do that but i dont know if it'd be wise
[08:09:57] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[08:13:25] <FromDiscord> <Tetralux> Hmm.
[08:13:33] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3NEe
[08:13:38] <FromDiscord> <Elegantbeef> There's how you'd use a macro here
[08:14:42] *** Joins: k0mpjut0r (~k0mpjut0r@ip-46.34.235.32.o2inet.sk)
[08:14:43] <FromDiscord> <Elegantbeef> You could make a `proc asgn(a: var MyStr, data: openArray[char])` which  does the same as this
[08:14:58] <FromDiscord> <Elegantbeef> Allocate and copy mem over
[08:15:26] <FromDiscord> <Tetralux> That seems like there's no way to avoid the allocation 🤔
[08:18:35] <FromDiscord> <Elegantbeef> I havent looked at the C code for a `str(myStr: openArray[char]`
[08:19:14] *** Quits: k0mpjut0r (~k0mpjut0r@ip-46.34.235.32.o2inet.sk) (Ping timeout: 260 seconds)
[08:21:01] *** Joins: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk)
[08:22:07] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NEg
[08:22:07] <FromDiscord> <Elegantbeef> Hmmm
[08:25:37] <FromDiscord> <Tetralux> Interesting.
[08:26:07] <FromDiscord> <Elegantbeef> Stringlits are stack allocated and copied to a string heap when
[08:26:15] <FromDiscord> <Elegantbeef> So i think you can do it using a bit of stack 😀
[08:27:59] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NEi
[08:28:10] <FromDiscord> <Tetralux> Hmm.
[08:28:46] <FromDiscord> <Elegantbeef> Basically if it's a lit you can safely point to the data, otherwise you'd need to alloc
[08:31:24] <FromDiscord> <Tetralux> sent a code paste, see https://play.nim-lang.org/#ix=3NEk
[08:31:41] <FromDiscord> <Tetralux> (My Str type doesn't allow you to mutate the elements currently.)
[08:33:08] <FromDiscord> <Elegantbeef> If you wanted to you could make `MyStrConst` as a distinct `MyStr` with a small subsection of `MyStr` functionality
[08:33:58] <FromDiscord> <Tetralux> I could, but mutate the elems of a Str isn't really something I need to do.
[08:34:11] <FromDiscord> <Elegantbeef> Ah
[08:35:18] <FromDiscord> <Tetralux> (edit) "mutate" => "mutating"
[09:04:07] <FromDiscord> <demotomohiro> sent a long message, see http://ix.io/3NEp
[09:04:41] <FromDiscord> <Elegantbeef> I do not know i assumed it was stack 😀
[09:09:41] <FromDiscord> <demotomohiro> Stack is allocated when a function is called and dellocated when returning. Memory locations global variables are placed is different from stack in C. It always exists while a program is running
[09:11:50] *** Quits: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk) (Quit: Quit)
[09:12:34] *** Joins: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk)
[09:16:30] *** Quits: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk) (Client Quit)
[09:16:44] *** Joins: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk)
[09:47:40] <NimEventer> New thread by Niminem: Generating javascript from nim code evaluation at runtime, see https://forum.nim-lang.org/t/8848
[10:00:53] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[10:05:48] <FromDiscord> <Tetralux> sent a code paste, see https://play.nim-lang.org/#ix=3NEA
[10:17:02] <FromDiscord> <Elegantbeef> I'd look at the C gen to be certain but probably not
[10:18:47] <FromDiscord> <demotomohiro> let s = "Hello" copies "Hello" but let p = s[0].unsafeAddr doesn't copy.
[10:19:16] <Zevv> Tetralux: well it *is* a whole new language
[10:19:28] <Zevv> but a language that is much closed to your problem domain then the Nim programming language is
[10:19:51] <Zevv> than
[10:21:30] *** Joins: Nuc1eoN (~Nuc1eoN@odin.csportal.net)
[10:24:37] <FromDiscord> <Tetralux> In reply to @demotomohiro "let s = "Hello"": Huh. It appears so, since it seems to crash upon mutation. 🤔
[10:24:46] <FromDiscord> <Tetralux> (edit) "so," => "that it might in fact be in RODATA,"
[10:29:06] <FromDiscord> <Tetralux> Yeah - Just checked the C code - no copy anywhere.
[10:29:11] <FromDiscord> <Tetralux> That's useful to know!
[10:29:25] <FromDiscord> <Elegantbeef> Well there you go
[10:29:42] <FromDiscord> <Tetralux> There I do, indeed 😄
[10:31:03] <FromDiscord> <Tetralux> Oh wait - nope I'm an idiot 🤣
[10:41:34] *** Quits: xiamx (~xiamx@2001:470:69fc:105::1:5692) (Quit: Client limit exceeded: 20000)
[10:54:04] *** Quits: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk) (Quit: Quit)
[10:54:18] *** Joins: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk)
[10:58:02] *** Quits: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk) (Client Quit)
[10:58:16] *** Joins: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk)
[11:05:22] *** Quits: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk) (Read error: Connection reset by peer)
[11:05:37] *** Joins: k0mpjut0r (~k0mpjut0r@143.244.56.134)
[11:10:05] *** Quits: k0mpjut0r (~k0mpjut0r@143.244.56.134) (Ping timeout: 252 seconds)
[11:11:06] *** Joins: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk)
[11:19:18] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[11:19:52] <Amun-Ra> can allocCStringArray (alloc0) return nil or is the error handled by nim itself?
[11:20:06] *** Joins: xiamx (~xiamx@2001:470:69fc:105::1:5692)
[11:22:57] <FromDiscord> <Elegantbeef> The error being what?
[11:24:37] <FromDiscord> <Elegantbeef> I didnt even know C's malloc could return null
[11:25:16] <FromDiscord> <konsumlamm> it returns null if no memory could be allocated
[11:25:48] <FromDiscord> <Elegantbeef> Yea i got that
[11:26:54] <FromDiscord> <Elegantbeef> Just didnt expect it cause in modern times not being able to allocate your data seems absurd
[11:28:36] <FromDiscord> <Rika> ? malloc isnt a modern thing though
[11:28:58] <FromDiscord> <Elegantbeef> I know
[11:29:07] <FromDiscord> <demotomohiro> C's malloc returns null when it failed to allocate heap. But alloc0 in Nim doesn't throw exception when it failed?
[11:29:19] <FromDiscord> <Elegantbeef> It's just I didnt think about actually not being able to allocate
[11:29:47] <FromDiscord> <Tetralux> If your PC has 4GB of RAM, you'd better believe it. 😄
[11:29:53] <FromDiscord> <Tetralux> ... or if you have enough tabs open.
[11:29:55] <FromDiscord> <Tetralux> Like I do.
[11:30:09] <FromDiscord> <Tetralux> Memory allocation failure is really not an unexpected condition.
[11:30:17] <FromDiscord> <Rika> i have a lot of tabs open too, on 32gb 😛
[11:30:25] <FromDiscord> <Elegantbeef> I almost always sit a 4gb used
[11:30:31] <FromDiscord> <Elegantbeef> So i have like 12gb just sitting there
[11:30:32] <FromDiscord> <Tetralux> In reply to @Rika "i have a lot": Likewise 😛
[11:30:53] <FromDiscord> <Rika> ~~over 4000 from what i recall~~
[11:31:07] <FromDiscord> <Elegantbeef> I have one tab open
[11:31:08] <FromDiscord> <Elegantbeef> Take that
[11:31:15] <FromDiscord> <Rika> damn thats a lot
[11:31:17] <FromDiscord> <Rika> is it matrix?
[11:32:10] <FromDiscord> <Elegantbeef> Nah i just mean in my browser
[11:32:16] <FromDiscord> <Elegantbeef> I use an application
[11:32:25] <FromDiscord> <Rika> i mean you could have been using matrix on the browsere
[11:33:02] <FromDiscord> <Elegantbeef> Yea i dont do webapps i close my browser when i'm not using it
[11:33:07] <FromDiscord> <Rika> i think i currently have under 30 on my alt browser (i really need to fix the situ on my main, but i dont have time rn)
[11:36:48] <FromDiscord> <Elegantbeef> "alt browser" jesus
[11:43:35] <FromDiscord> <Rika> well i only installed it because it got out of hand on the other one
[11:43:44] <FromDiscord> <Rika> for now im on here
[11:43:53] <FromDiscord> <Rika> i'll fix it once i have time AKA february
[11:45:31] <Amun-Ra> Elegantbeef: I have ~20GB taken by the firefox only
[11:47:08] <FromDiscord> <Rika> LOL
[11:47:36] <FromDiscord> <Rika> yeah same here but more like 26 in my case i think
[11:48:24] <emery> I have one tab open, but just to keep firefox from closing 
[11:48:27] <FromDiscord> <Tetralux> Hmmm. That's odd. I just wrote a quick test program where I allocate more than I have, then iterate through it, writing to every last byte.↵It never dies, and exits normally, despite accessing more RAM than I have... 🤔
[11:48:56] <FromDiscord> <Elegantbeef> Did you go into swap?
[11:49:05] <FromDiscord> <Tetralux> I'm on Windows. 😄
[11:49:42] <FromDiscord> <Tetralux> It must be paging some of it out - I'm just curious how.↵I'm guessing that Nim's allocation setup is doing that.
[11:49:54] <FromDiscord> <Tetralux> Because I can tell you right now that malloc _doesn't_ do that 😄
[11:50:17] <FromDiscord> <Tetralux> Or at least it didn't last I experimented with this stuff.
[11:51:28] *** rie is now known as rienske
[11:58:14] <FromDiscord> <Elegantbeef> Does "3 messages deleted" mean that you tested and it did work in C?
[12:00:28] <FromDiscord> <Tetralux> It means that I wrote the equivalent Odin program, and it made it further than I thought it would. 😄
[12:00:30] <FromDiscord> <Tetralux> However
[12:00:34] <FromDiscord> <Tetralux> It ultimately didn't make it.
[12:00:42] <FromDiscord> <Tetralux> Which makes me wonder what sorcery is going on here.
[12:02:28] <FromDiscord> <Tetralux> Oh wait, no.
[12:02:33] <FromDiscord> <Tetralux> I was just fucking up the code 🤣
[12:02:35] <FromDiscord> <Tetralux> Both make it.
[12:02:45] <FromDiscord> <Tetralux> Huh. That's very interesting.
[12:03:00] <FromDiscord> <Tetralux> I guess it must be doing the equivalent of swapping on Windows, eh.
[12:03:17] <FromDiscord> <Elegantbeef> Probably
[12:03:22] <FromDiscord> <Elegantbeef> Go to something like 1 bazillion GB
[12:03:23] <FromDiscord> <Elegantbeef> 😛
[12:03:48] <FromDiscord> <Tetralux> I would like to still have a functioning computer afterwards 😆
[12:06:18] <FromDiscord> <Elegantbeef> I mean the allocation will fail
[12:07:16] *** Joins: PMunch (~PMunch@user/pmunch)
[12:07:38] <FromDiscord> <Elegantbeef> Yea i just tried allocatin `int 1e30` and it instantly said "out of memory"
[12:07:43] <FromDiscord> <Elegantbeef> It's a hard crash
[12:07:53] <FromDiscord> <Tetralux> Nope
[12:07:58] <FromDiscord> <Tetralux> Nim just works anyway
[12:08:10] <FromDiscord> <Elegantbeef> I just tried it
[12:08:24] <FromDiscord> <Tetralux> I tried 80GB 😄
[12:08:39] <FromDiscord> <Elegantbeef> `discard create(byte, int 1e30)`
[12:08:39] <FromDiscord> <Tetralux> How are you allocating?
[12:08:46] <FromDiscord> <Tetralux> Ah
[12:09:08] <FromDiscord> <Tetralux> I did `system.alloc(80  1024  1024  1024)`
[12:09:51] <FromDiscord> <Tetralux> Ah-ha! It does immediately exit when I ask for 120GB 🤣
[12:10:34] <FromDiscord> <demotomohiro> Maybe Nim or backend compiler removed iteration code as it doesn't affect output of your program.
[12:14:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:15:48] <FromDiscord> <Tetralux> It was doing it in debug mode too.
[12:15:54] <FromDiscord> <Tetralux> Interesting thought though 😄
[12:17:08] <FromDiscord> <Rika> Integer can hold 1e30?
[12:17:13] <FromDiscord> <eyecon> Doesn't Windows just lie to you and say "suure, I just did"
[12:17:17] <FromDiscord> <Elegantbeef> No
[12:17:21] <FromDiscord> <eyecon> I thought I read something like that
[12:17:32] <FromDiscord> <Elegantbeef> My no was to rika
[12:17:36] <FromDiscord> <eyecon> Ah
[12:17:38] <FromDiscord> <Tetralux> That's Linux you're thinking of @eyecon 😜
[12:17:40] <FromDiscord> <Rika> Then why are you doing it
[12:17:51] <FromDiscord> <eyecon> In reply to @Tetralux "That's Linux you're thinking": Yeah
[12:17:56] <FromDiscord> <Elegantbeef> `echo int 1e30`outputs a big number of `5076964154930102272`
[12:18:09] <FromDiscord> <Elegantbeef> I could do `int.high` of course
[12:18:09] <FromDiscord> <eyecon> I mean, it does kinda make sense in a modern system with swap
[12:18:15] <FromDiscord> <Rika> Was going to say
[12:18:47] <FromDiscord> <Tetralux> While that's true - overcommitting memory can easily make your system all but unusable if you start paging.
[12:18:57] <FromDiscord> <Tetralux> You really don't want that to happen.
[12:19:16] <FromDiscord> <Forest> sent a code paste, see https://play.nim-lang.org/#ix=3NEV
[12:19:16] <FromDiscord> <Elegantbeef> Sure but you also dont want your program to crash!
[12:19:36] <FromDiscord> <eyecon> All hail the OOM killer mechanism
[12:19:49] <FromDiscord> <Rika> OOM has reaped my Firefox before hahaha
[12:19:56] *** Quits: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk) (Ping timeout: 252 seconds)
[12:19:58] <FromDiscord> <eyecon> In reply to @Rika "OOM has reaped my": Ooof
[12:20:12] *** Joins: k0mpjut0r (~k0mpjut0r@ip-46.34.241.1.o2inet.sk)
[12:20:22] <FromDiscord> <Forest> The config https://www.toptal.com/developers/hastebin/agobapeyoq.nim↵↵The main.nim https://www.toptal.com/developers/hastebin/acoxinoyun.nim
[12:20:48] <FromDiscord> <Forest> (edit) "config" => "config.nims"
[12:20:51] <FromDiscord> <Rika> No problem, I have redundant backup systems in case my absurd number of tabs are lost
[12:22:30] <FromDiscord> <Rika> I’m not joking though
[12:24:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[12:28:59] <FromDiscord> <Forest> :p
[12:33:05] *** Quits: k0mpjut0r (~k0mpjut0r@ip-46.34.241.1.o2inet.sk) (Ping timeout: 250 seconds)
[12:33:27] <FromDiscord> <demotomohiro> @Forest That error message looks like you don't have `shell_minimal.html` in current directory.
[12:34:22] *** Joins: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk)
[12:35:05] <FromDiscord> <Phil> In reply to @Rika "No problem, I have": It's so damn tempting to have hundreds of tabs, I've gotten into the habit of "cleaning" them up on the regular in order to keep the number to a manageable 20-50
[12:36:04] *** Joins: szahid| (~szahid@user/szahid)
[12:36:42] <FromDiscord> <Rika> I already do that, I just haven’t had the time for my old tab count
[12:37:52] <PMunch> I set my Firefox to start afresh whenever I open it
[12:37:55] <FromDiscord> <Phil> You have a... backlog of tabs to clean up? 😄 I'll admit that sounds funny
[12:38:07] <FromDiscord> <Phil> In reply to @PMunch "I set my Firefox": The absolute madman!
[12:38:12] <PMunch> I have a few tabs which are "pinned", my email, some work stuff, etc.
[12:38:28] <PMunch> And then I can bookmark or temporarily pin anything I might want to read later
[12:38:41] <PMunch> It has really saved my from the tab mess I was dealing with before
[12:38:52] <PMunch> I think I had almost 200 tabs at one point
[12:39:12] <FromDiscord> <Rika> Bookmarks don’t work for me
[12:39:43] *** Quits: szahid (~szahid@user/szahid) (Quit: WeeChat 3.4)
[12:41:21] <jmdaemon> I should really make a habit of cleaning out my tabs more frequently so they don't pile up
[12:41:40] <FromDiscord> <Elegantbeef> Ah this is how we awaken the nim community talk about browser tahbs
[12:41:47] <FromDiscord> <Elegantbeef> Nice typo, but still makes sense
[12:42:05] <FromDiscord> <Elegantbeef> Also pmunch fix the subreddit description, add the real time chats!
[12:42:08] <jmdaemon> nim browser when
[12:43:22] <PMunch> jmdaemon, I was actually trying to make one at one point
[12:43:31] <PMunch> By using the Chromium embedded framework
[12:43:40] <PMunch> @Elegantbeef, fix it?
[12:44:05] <jmdaemon> how far were you able to get PMunch ?
[12:44:23] <PMunch> I got CEF working and opened a window :P
[12:44:27] <FromDiscord> <BhamidipatiNikhil> You guys won't believe what i tried today....↵today i tried implementing to find the number with the  largest Collatz sequence in all numbers less than 10 million....↵This was the code i tried
[12:44:46] <FromDiscord> <BhamidipatiNikhil> sent a long message, see http://ix.io/3NF0
[12:44:47] <PMunch> But by that time I had spent so much time just trying to get CEF to work I was tired of the whole project..
[12:44:52] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/936187493081022464/image.png
[12:44:56] <FromDiscord> <Rika> Lol
[12:45:00] <FromDiscord> <Elegantbeef> It's not properly linked
[12:45:06] <FromDiscord> <Elegantbeef> New reddit
[12:45:37] <FromDiscord> <BhamidipatiNikhil> sent a code paste, see https://play.nim-lang.org/#ix=3NF1
[12:45:41] <jmdaemon> ah what was so difficult about making it work? What problems were you having PMunch ?
[12:46:15] <FromDiscord> <Rika> Someone’s gonna get mad at you for using epoch time instead of mono time for benchmarking
[12:46:53] <FromDiscord> <BhamidipatiNikhil> and i was able to get the answer in 5.5 secs
[12:46:56] <FromDiscord> <BhamidipatiNikhil> Image
[12:47:10] <FromDiscord> <Rika> Now is it correct
[12:47:11] <FromDiscord> <BhamidipatiNikhil>  https://media.discordapp.net/attachments/371759389889003532/936188075778904074/unknown.png
[12:47:12] <PMunch> @Elegantbeef, it's not my problem your client doesn't properly do styling: https://uploads.peterme.net/redditsidebar.png
[12:47:50] <FromDiscord> <BhamidipatiNikhil> The same program took 9 secs in c++
[12:47:52] <FromDiscord> <BhamidipatiNikhil>  https://media.discordapp.net/attachments/371759389889003532/936188247502110800/unknown.png
[12:47:57] <PMunch> jmdaemon, the wrapper was just outdated, and not lot of people are using CEF so it's not exactly easy to find help for random issue
[12:49:09] <FromDiscord> <Elegantbeef> Pmunch you're on old reddit!
[12:49:10] <FromDiscord> <BhamidipatiNikhil> I was so shell shocked.... freaking c++ took 9 secs and nim took 5.5 secs.... it was basically the same logic, but nim outshined c++ left and right....
[12:49:35] <FromDiscord> <Phil> In the "About Community" section it does not display as well from the official reddit page (new reddit design)
[12:49:45] <FromDiscord> <Phil> (edit) "In the "About Community" section it does not display ... as" 03added "correctly"
[12:49:48] <PMunch> @Elegantbeef, of course I am, what kind of maniac uses new reddit?
[12:50:21] <FromDiscord> <Elegantbeef> BuT NiM is GceD
[12:50:27] <FromDiscord> <Elegantbeef> Uhh
[12:50:28] <FromDiscord> <Phil>  https://media.discordapp.net/attachments/371759389889003532/936188897841516564/Screenshot_from_2022-01-27_10-20-01.png
[12:50:38] <FromDiscord> <BhamidipatiNikhil> In reply to @Rika "Someone’s gonna get mad": should i use mono time ??
[12:50:46] <FromDiscord> <Phil> Not that I actually use new reddit, just not logged in on this laptop
[12:51:01] <FromDiscord> <Elegantbeef> You should use monotime
[12:51:06] <FromDiscord> <Phil> In reply to @BhamidipatiNikhil "should i use mono": Do you care about the actual point in time or the difference between two points in time?
[12:51:22] <FromDiscord> <BhamidipatiNikhil> the difference between 2 points in time...
[12:51:26] <FromDiscord> <Phil> monotime it is
[12:51:44] <FromDiscord> <Elegantbeef> Also what are the compiler flags?
[12:52:12] <FromDiscord> <BhamidipatiNikhil> nim c -d:release -r CollatzInNim.nim
[12:52:20] <FromDiscord> <Forest> In reply to @demotomohiro "<@909883978717204561> That error message": Oh i forgot about that rip
[12:52:29] <FromDiscord> <Elegantbeef> cmon do `-d:danger --gc:arc` 😀
[12:52:39] *** Quits: k0mpjut0r (~k0mpjut0r@adsl-dyn52.78-99-32.t-com.sk) (Read error: Connection reset by peer)
[12:53:01] <FromDiscord> <Elegantbeef> oh i forgot `--passL:"-flto" `
[12:53:12] <FromDiscord> <Elegantbeef> does that need the `--passC:"-flto"` aswell?
[12:53:38] *** szahid| is now known as szahid
[12:54:00] <FromDiscord> <Elegantbeef> Not that the GC matters much here
[12:54:09] <FromDiscord> <Elegantbeef> Arc might even make it slower
[12:54:37] <PMunch> So does new reddit not support styling in those messages?
[12:55:22] <FromDiscord> <Elegantbeef> I think it does but I do not know
[12:56:05] <FromDiscord> <Elegantbeef> I think it doesnt
[12:56:10] <FromDiscord> <Elegantbeef> Fucking silly then
[12:56:44] <FromDiscord> <Elegantbeef> It does support things like
[12:56:51] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/936190510916337694/image.png
[12:57:12] <FromDiscord> <Elegantbeef> I dont see why it'd not allow linking from descriptions
[12:57:13] <PMunch> Best performance I got was with -d:danger, but without -flto and arc
[12:57:58] <PMunch> Ah well, maybe slightly better actually with -flto and arc
[12:58:09] <PMunch> I didn't run it a lot of times to test, but now I did three runs and it was faster
[12:59:21] <FromDiscord> <Elegantbeef> Hey we're code golf those flags generally
[12:59:27] <PMunch> @Elegantbeef, better?
[12:59:30] <FromDiscord> <Elegantbeef> Though in this program arc might do more harm than good since there arent any allocations
[12:59:46] <PMunch> If there aren't any allocations it shouldn't do anything
[13:00:01] <PMunch> Although this prints a lot of stuff, so it has to allocate strings and deallocate them again
[13:00:27] <PMunch> By the way @BhamidipatiNikhil printing is super slow, if you want speed you should remove those echos
[13:00:49] <FromDiscord> <Elegantbeef> Well by "any" i mean few
[13:01:11] <FromDiscord> <BhamidipatiNikhil> In reply to @PMunch "By the way <@764483963422375946>": Then how should i print?
[13:02:11] <PMunch> Just don't print :P
[13:02:20] <FromDiscord> <Rika> Print after the benchmark
[13:02:28] <PMunch> It's not `echo` in Nim which is slow, it's just printing in general which is slow
[13:03:31] <FromDiscord> <BhamidipatiNikhil> In reply to @Elegantbeef "cmon do `-d:danger --gc:arc`": After trying what the bot wanted me to do... i optimised my code by 1 more second... https://media.discordapp.net/attachments/371759389889003532/936192187346071582/unknown.png
[13:03:55] <FromDiscord> <Elegantbeef> Make a large memfile and write then instead, then close it 😛 (I'm kidding dont print in benchmarks other than results)
[13:03:55] <FromDiscord> <Elegantbeef> I'm not a bot
[13:04:03] <FromDiscord> <Elegantbeef> I'm a human with... ok i dont have feelings but i'm not a bot!
[13:04:09] <FromDiscord> <BhamidipatiNikhil> 😑
[13:04:39] <FromDiscord> <Elegantbeef> And yea pmunch it's better
[13:04:41] <FromDiscord> <Rika> Shut up bot
[13:04:47] <FromDiscord> <demotomohiro> @BhamidipatiNikhil Said it took 5.5 seconds, so I think slowness of echo is small enough in this case
[13:04:48] <FromDiscord> <Elegantbeef> Ok
[13:04:55] <FromDiscord> <Elegantbeef> No more compiler bug fixes from me now
[13:05:00] <FromDiscord> <Elegantbeef> Thank rika
[13:05:40] <FromDiscord> <BhamidipatiNikhil> What the hell? Are these above bots written in nim??
[13:05:51] <PMunch> We're not bots -_-
[13:06:11] <PMunch> We're users on different platforms, all the live chats are bridged together
[13:06:12] <FromDiscord> <Rika> In all seriousness they’re just using different chat systems
[13:06:17] <PMunch> So in Discord it shows us as bots
[13:06:17] <FromDiscord> <Elegantbeef> No we're humans using chat  bridges to talk to people in discord
[13:06:17] <FromDiscord> <Elegantbeef> I swear people dont believe us when we say that
[13:06:41] <FromDiscord> <Phil> I wonder how many times a week you guys have to deal with this debate
[13:06:49] <FromDiscord> <Rika> Once a day I believe
[13:06:52] <FromDiscord> <Elegantbeef> Discord users dont  show as a bot to us though comically enough 😀
[13:06:52] <FromDiscord> <Phil> The answer is definitely also too many times
[13:07:01] <PMunch> I guess we should take it as a compliment that people think the Nim community casually writes bots that pass the Touring test (apart from having "bot" right next to their name)
[13:07:22] <FromDiscord> <Elegantbeef> Nim's sitting on super intelligence
[13:07:24] <PMunch> Wait, it's Turing test..
[13:07:24] <FromDiscord> <Phil> I do it every tuesday after sport
[13:07:26] <FromDiscord> <Phil> Easy peasy
[13:07:44] <FromDiscord> <Phil> Well those bots I write every Saturday morning after breakfast
[13:07:57] <FromDiscord> <Rika> I failed the Turing test
[13:07:59] <FromDiscord> <Elegantbeef> Yea after Alana touring
[13:08:03] <PMunch> Each member of the Nim community has written a bot that answers like the user itself would, that way we can always be online!
[13:08:27] <FromDiscord> <Elegantbeef> I didnt study for it myself
[13:08:32] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:08:42] <FromDiscord> <Elegantbeef> I havent said enough swears recently for that to be true
[13:09:20] <FromDiscord> <BhamidipatiNikhil> I am not finding any information about these bots even on googling https://media.discordapp.net/attachments/371759389889003532/936193652085125150/unknown.png
[13:09:58] <FromDiscord> <Elegantbeef> Is this a joke?
[13:10:25] <FromDiscord> <Clonkk> We're just some of @mratsim experiment in data science that became self aware↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[13:11:54] <FromDiscord> <Rika> In reply to @Elegantbeef "Is this a joke?": I can’t tell anymore tbh
[13:12:20] <FromDiscord> <Clonkk> Error\: module humour not found↵(@Rika)
[13:12:51] <FromDiscord> <Rika> In reply to @Clonkk "Error\: module humour not": Did you miss the part where everyone else stopped joking about it
[13:13:03] <FromDiscord> <Elegantbeef> I swear people are just joking, between the frontend gdb programmer and this one i just dont believe people think we're bots
[13:13:41] <FromDiscord> <Clonkk> Maybe we are bots who have been programmed to believe otherwise
[13:13:59] <FromDiscord> <Clonkk> After all, the evidence is plain \: there is a "bot" right next to our name. Would discord lie to you ?
[13:15:07] <FromDiscord> <Rika> They have plenty of times hahaha
[13:16:07] <PMunch> I'm actually surprised by how many of you are on IRC. After I set up the plug-in to extract the names from FromDiscord and replace them I can't tell the difference anymore and just assumed you where all Discord people
[13:16:37] <PMunch> @Elegantbeef, and I'm pretty sure he's just messing with you at this point
[13:16:51] <PMunch> @Clonkk, frond-end GDB programmer?
[13:17:19] <FromDiscord> <Elegantbeef> The person that made gdb frontend
[13:17:29] <FromDiscord> <Elegantbeef> They were certain i was a bot or joking for minutes
[13:17:41] <FromDiscord> <Elegantbeef> I'm on matrix like you should be!
[13:18:47] <FromDiscord> <eyecon> The quality of these bots are truly exceptional, they sound even self-aware and making meta-jokes
[13:19:13] <FromDiscord> <Elegantbeef> Maybe you're the bot and we're humans!
[13:19:36] <PMunch> Aah, right :P
[13:19:43] <FromDiscord> <eyecon> Never thought of that possibility, can't be sure that it isn't the case
[13:19:49] <PMunch> But I like IRC :(
[13:20:00] <FromDiscord> <eyecon> If there's no one to call out a bot, is it still a bot
[13:20:16] <FromDiscord> <Elegantbeef> If the bot falls in the forest does it make a "beep boop"?
[13:21:24] <FromDiscord> <Rika> Is life raycasted
[13:21:27] <FromDiscord> <eyecon> Let's try it with a sacrificial bot and a recorder
[13:21:48] <FromDiscord> <Elegantbeef> Where's all the fun Nim code?
[13:21:52] <FromDiscord> <NicoIas> sent a code paste, see https://play.nim-lang.org/#ix=3NF3
[13:21:57] <FromDiscord> <Elegantbeef> Damn
[13:21:58] <FromDiscord> <Elegantbeef> I ask and it comes in
[13:22:16] <FromDiscord> <Elegantbeef> `+textPadding` is a unary operator
[13:22:16] <FromDiscord> <Rika> Spacing is important in Nim
[13:22:16] <FromDiscord> <eyecon> The fun Nim code, at your service
[13:22:29] <FromDiscord> <Elegantbeef> operators touching identifiers are taken as unary
[13:22:41] <FromDiscord> <Rika> In reply to @Elegantbeef "operators touching identifiers are": Touching one identifier
[13:22:44] <FromDiscord> <Elegantbeef> Second operator question in one day
[13:22:52] <FromDiscord> <Elegantbeef> Ah yes sorry
[13:23:19] <FromDiscord> <Elegantbeef> `a+b` == `a + b` `a +b` == `a +(b)`
[13:23:35] <FromDiscord> <Rika> ?
[13:23:47] <FromDiscord> <Rika> Or `a(+b)`
[13:23:53] <FromDiscord> <eyecon> In reply to @NicoIas "what is going on": In short: `textEnd.x += hours.width +textPadding` is `textEnd.x += hours.width(+textpadding)`
[13:23:58] <FromDiscord> <Rika> Yes
[13:24:39] <FromDiscord> <eyecon> If it is a function at least
[13:24:47] <FromDiscord> <NicoIas> oh I get it! Took me a solid 2 minutes to understand what you guys meant ahah
[13:24:55] <FromDiscord> <NicoIas> I see, that's a bit unexpected
[13:25:03] <FromDiscord> <Rika> Well it will be like that regardless since it’s a syntax thing and not a semantic thing
[13:25:15] <FromDiscord> <Elegantbeef> unary is an operator that has a single parameter, binary is an operator with two ...
[13:26:01] <PMunch> @NicoIas, if you want to be properly confused turn on whitespace math ordering :P
[13:26:06] <FromDiscord> <Elegantbeef> Nim binds unary operators regardless of context in the case, if `+textPadding` was invalid you would have got a "unknown `+` operator"
[13:26:11] <PMunch> Or has that feature been removed?
[13:26:25] <FromDiscord> <Elegantbeef> I've never heard of it
[13:26:31] <FromDiscord> <eyecon> In reply to @PMunch "<@179174721764458496>, if you want": Do we beginners want to know what that is
[13:26:53] <FromDiscord> <Rika> In reply to @PMunch "Or has that feature": I don’t think it was ever added?
[13:26:58] <FromDiscord> <Elegantbeef> I think it's either removed or not documented anymore
[13:27:10] <PMunch> @eyecon, definitely not :P
[13:27:22] <PMunch> I'm pretty sure it was an experimental feature at some point
[13:27:54] <FromDiscord> <Tetralux> I'm gonna take a wild guess: `3+2  8` == `(3+2)  8`
[13:28:12] <FromDiscord> <Elegantbeef> Yes
[13:28:13] <FromDiscord> <eyecon> I see, shutting off my senses now
[13:28:20] <FromDiscord> <eyecon> Too late 😦
[13:28:21] <FromDiscord> <Tetralux> 🤣
[13:28:31] <FromDiscord> <eyecon> Nooo
[13:28:38] <FromDiscord> <Elegantbeef> unary biinding is only if there isnt a space proceding the operator
[13:29:05] <FromDiscord> <Elegantbeef> Otherwise it's a binary operator
[13:29:32] <FromDiscord> <demotomohiro> !eval echo 3+2  8
[13:29:34] <NimBot> Compile failed: /usercode/in.nim(1, 10) Error: invalid token:  (\29)
[13:29:48] <FromDiscord> <eyecon> Wut
[13:30:13] <FromDiscord> <eyecon> !eval echo (3+2  8)
[13:30:15] <NimBot> Compile failed: /usercode/in.nim(1, 11) Error: invalid token:  (\29)
[13:30:17] <PMunch> Duscard for some reason converts * to a dot, which breaks all code pastes and NimBot interaction :P
[13:30:26] <FromDiscord> <demotomohiro> !eval echo 3+2 \ 8
[13:30:26] <PMunch> !eval echo 3+2 * 8
[13:30:29] <NimBot> Compile failed: /usercode/in.nim(1, 11) Error: invalid token:  (\29)
[13:30:30] <FromDiscord> <Rika> It’s likely the bridge actually
[13:30:31] <NimBot> 19
[13:30:46] <PMunch> See, mine works fine from IRC
[13:30:49] <FromDiscord> <Elegantbeef> It's 100% the bridge `` as pmunch said isnt ever right
[13:30:55] <FromDiscord> <eyecon> In reply to @PMunch "Duscard for some reason": Ah, surprises do not cease here
[13:31:07] <PMunch> Wait, it's the bridge which does that?
[13:31:10] <PMunch> Why?!
[13:31:29] <FromDiscord> <Elegantbeef> Well it's not discord doing it
[13:31:31] <FromDiscord> <Rika> Lol don’t ask me
[13:31:42] <FromDiscord> <Rika> Yardanico made it so ask them
[13:31:42] <PMunch> Oh wait, maybe it's trying to do *bold* or something
[13:31:46] <FromDiscord> <Elegantbeef> The client properly shows `` 😛
[13:32:01] <FromDiscord> <eyecon> !eval echo 3+2 \ 8
[13:32:05] <NimBot> Compile failed: /usercode/in.nim(1, 11) Error: invalid token:  (\29)
[13:32:15] <FromDiscord> <demotomohiro> `\` doesn't fix the problem?
[13:32:16] <PMunch> !eval echo 3+2  8
[13:32:19] <NimBot> Compile failed: /usercode/in.nim(1, 10) Error: invalid token:  (\2)
[13:32:22] <FromDiscord> <eyecon> It doesn't make a difference if a backspace is in front of it
[13:32:27] <FromDiscord> <Elegantbeef> https://github.com/Yardanico/ircord/issues/19
[13:32:30] <FromDiscord> <eyecon> I just tried
[13:32:57] <PMunch> It was apparently called "strong spaces"
[13:33:23] <FromDiscord> <Rika> Make it weak then
[13:33:32] <FromDiscord> <Elegantbeef> I think i seen some conversations about it but never really seen it in action
[13:34:18] <FromDiscord> <eyecon> In reply to @PMunch "It was apparently called": Why... the..
[13:34:38] <FromDiscord> <eyecon> What converts it in the first place
[13:34:40] <FromDiscord> <Elegantbeef> Where are the newer Nim queries?!
[13:34:43] <FromDiscord> <Elegantbeef> It worked last time
[13:34:48] <FromDiscord> <Elegantbeef> Should work again!
[13:35:44] <PMunch> Run this snippet: https://play.nim-lang.org/#ix=3NF7
[13:35:51] <PMunch> And then change the version to 0.19.6
[13:36:13] <FromDiscord> <Elegantbeef> Ah yes i remember now
[13:36:21] <PMunch> @Elegantbeef, what are you talking about?
[13:36:33] <FromDiscord> <Elegantbeef> tighly bound binary operators overrides precedence
[13:36:57] <FromDiscord> <Elegantbeef> The last time i said "what about Nim code" someone asked a question 😛
[13:37:19] <PMunch> Oh, haha :P
[13:42:30] <PMunch> You can work on this if you want @Elegantbeef: https://github.com/nim-lang/Nim/issues/19449
[13:43:28] <FromDiscord> <Elegantbeef> But but i've been working on my game again
[14:00:28] <PMunch> Oooh, gotten any further?
[14:00:42] <PMunch> This is still Linerino right?
[14:01:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[14:06:36] <FromDiscord> <Rika> Wait you’re making a game again? What’s it about
[14:07:22] <FromDiscord> <Goel> sent a code paste, see https://play.nim-lang.org/#ix=3NFd
[14:08:15] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Ping timeout: 256 seconds)
[14:08:15] *** Quits: NimBot (~NimBot@mail.nim-lang.org) (Ping timeout: 256 seconds)
[14:08:26] <FromDiscord> <Rika> You have to state it as well in the right hand side
[14:08:41] <FromDiscord> <Rika> 0.int32 on the first element should suffice
[14:09:03] *** Joins: NimBot (~NimBot@mail.nim-lang.org)
[14:09:05] <FromDiscord> <Elegantbeef> Nim doesnt have left to right inference do `[0u32 ,2, 4, 6]`
[14:09:07] <FromDiscord> <Goel> But why if is in the same line of the declaration?
[14:10:03] <FromDiscord> <Elegantbeef> Do you want the technical reason or are you ok with me just repeating what i said? 😀
[14:10:49] <FromDiscord> <Rika> I’m at least interested in the technical reason
[14:10:50] <FromDiscord> <Rika> Unless I already know
[14:11:16] <FromDiscord> <Elegantbeef> Nim's array semantic check does not take in an assumed type, and as such sem's it as an `array[4, int]` which does not convert implicitly to `array[4, uint32]`
[14:11:42] <FromDiscord> <konsumlamm> ~~the technical reason is that Nim doesn't have left to right inference~~
[14:12:15] <FromDiscord> <Elegantbeef> Matrix bridge made it seem like I waited until rika asked 😀
[14:13:02] <FromDiscord> <Rika> Good enough though
[14:13:15] <FromDiscord> <Rika> Could have just not said that and none of us here woulda known
[14:15:35] <FromDiscord> <konsumlamm> i'm really losing motivation to work with Nim rn, this is the 3rd bug in 5 days
[14:15:40] <FromDiscord> <konsumlamm> maybe it's all the same bug
[14:16:10] <FromDiscord> <konsumlamm> but something is going on with variables being incorrectly moved or something
[14:16:27] <FromDiscord> <konsumlamm> does moving/destructor stuff also happen for refc?
[14:17:40] <arkanoid> konsumlamm, what's the problem? do you have a minimal example?
[14:18:22] <FromDiscord> <konsumlamm> this is part of it: https://github.com/nim-lang/Nim/issues/19457
[14:18:27] <arkanoid> I'm also finding some bugs when dealing with OOP + destructors + ARC, but so far seems that there are workarounds for every situation
[14:18:53] <FromDiscord> <konsumlamm> there are workarounds
[14:19:05] <FromDiscord> <Elegantbeef> move semantics shouldnt be used for refc
[14:19:28] <FromDiscord> <konsumlamm> but... i don't want to use workarounds when it's for compiler bugs
[14:20:22] <FromDiscord> <konsumlamm> i wouldn't trust a language where i constantly need to work around compiler bugs
[14:20:40] <arkanoid> sure, I mean, for example here I have to use code reordering otherwise my destructors are not called: https://github.com/nim-lang/Nim/issues/19402#issuecomment-1022921122
[14:21:09] <FromDiscord> <konsumlamm> i don't even use destructors (just the default ones)
[14:21:17] <arkanoid> konsumlamm, you have to weight these with issue you'd have with other system programming languages
[14:21:40] <FromDiscord> <konsumlamm> in Rust i encountered exactly zero bugs so far ¯\_(ツ)_/¯
[14:23:20] <FromDiscord> <konsumlamm> anyway, i have some code that works fine as is, but if i insert `echo`s, it fails... (using refc too)
[14:23:57] <arkanoid> yes, but you have to write your code how rust likes, and you have to bend the patterns you know to fit the patterns enforced by rust. It is ok given the fact that those patterns are *safer*, but yet is turning human into machine
[14:24:01] <FromDiscord> <xflywind> Rust is already a mature and successful language with massive supports and developers. Nim should be compared to Crystal or Vlang which also has many compiler bugs.
[14:24:38] <FromDiscord> <konsumlamm> i'd never touch V ever
[14:25:44] <arkanoid> I feel nim is still the sweet spot
[14:26:06] <arkanoid> but yes, there are severe compiler bugs
[14:26:07] <FromDiscord> <konsumlamm> Crystal and D are fair comparisons, i just mentioned Rust because arkanoid was talking about other system languages and that's the only system language i really know
[14:26:28] <FromDiscord> <konsumlamm> i mean, there's a reason i'm not using crystal or D instead, but it's still pretty annoying
[14:26:41] <FromDiscord> <konsumlamm> idk how common compiler bugs are for those
[14:26:50] <arkanoid> me neither
[14:28:18] <arkanoid> but with rust you cannot implement new language features using language itself, and that makes things easier for compiler devs
[14:28:55] <FromDiscord> <konsumlamm> ~~you can if you're fine with wrapping everything in a macro~~
[14:29:05] <arkanoid> also you don't have to rely on multiple backends that spits out code in different languages, but just LLVM IR
[14:29:24] <FromDiscord> <konsumlamm> i mean attribute macros can be used to make new language features sort of
[14:29:33] <arkanoid> are you saying that rust macros are 1:1 with nim macros? I don't feel that
[14:29:50] <FromDiscord> <konsumlamm> no, i'm saying that you can use them to implement new "language features"
[14:33:31] <FromDiscord> <konsumlamm> In reply to @konsumlamm "anyway, i have some": it also only happens when run in the VM
[14:34:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:37:20] <FromDiscord> <konsumlamm> but not when i extract the call that fails...
[14:40:03] <PMunch> Do we know who created the original Nim badger?
[14:40:08] <PMunch> I think I've asked this before..
[14:40:36] <arkanoid> the point that keeps me from using nim (that I do anyway) is that there are advanced features that you want to use, but then the same features are the source of wrong behaviours and so general guidelines want you sto stick with easier code
[14:41:01] <arkanoid> so you end up doing things in defensive mode
[14:46:23] <PMunch> The problem is that the advanced features aren't used as often, so you might just do something that has never been tried before, and which no-one anticipated during the design of that feature
[14:47:01] <PMunch> Most workarounds seems to be just doing it the way the feature was designed to work
[14:47:50] <PMunch> Which is still bad though
[14:48:24] <arkanoid> yes
[14:48:53] <PMunch> To be fair, after having used Nim for quite a while I tend to run into fewer and fewer bugs
[14:49:17] <PMunch> Probably because I program more the way Nim was intended to be programmed, but still
[14:49:58] <arkanoid> if foo.nim is a nim file that doesn't compile, but it is `include`d in bar.nim that compiles correctly, is foo.nim still considered a "module" according to docs? or just bar.nim is?
[14:51:58] <PMunch> Good question
[14:52:12] <PMunch> Depends on what you mean by "according to docs"
[14:52:31] <FromDiscord> <hmmm> meh the comparisons with rust are always unfair they have 10x-100x times the eyeballs and possibly 100x - 1000x funding, wtf are we talking about 🧐
[14:53:38] <PMunch> I mean it's still fair to critique Nim for having unstable features
[14:54:13] <PMunch> ARC is still a bit experimental, which is why it isn't the default
[14:55:36] <PMunch> I ran --expandArc on @konsumlamm's example
[14:55:37] <PMunch> http://ix.io/3NFk
[14:55:39] <FromDiscord> <hmmm> meh, if you use incredibly niche comfy lang, you should calibrate your expectations accordingly. It's obvious nim can't have the battle testing and mileage to iron the rough edges
[14:56:02] <PMunch> It looks like b is turned into a cursor, then it is assigned to c and c is promptly destroyed
[14:56:28] *** Quits: adigitoleo (~adigitole@1.157.55.206) (Quit: adigitoleo)
[14:57:04] <PMunch> If you scope 'c' to be outside the loop it works fine
[14:57:22] <PMunch> Like so: http://ix.io/3NFl
[14:57:26] <arkanoid> hmmm, yes, but no. There's line between experimental and not experimental, and nim does have this line, but silent bugs on simple tests are also before this line
[14:57:34] <PMunch> But this is of course a bug
[14:58:07] <arkanoid> btw: I still consider nim the best language ever
[14:58:39] <FromDiscord> <Rika> Y’all let’s all become rich and fund Nim to explosion
[15:01:33] <PMunch> Didn't Nim recently get a huge chunk of donations?
[15:04:15] <arkanoid> PMunch: are you referring to the 100K in bitcoin?
[15:06:19] <PMunch> Yup
[15:07:02] <PMunch> I guess those depreciated massively recently..
[15:07:15] <PMunch> Hopefully they took my advice and invested some
[15:07:26] <FromDiscord> <Rika> Well if it wasn’t converted
[15:07:38] <FromDiscord> <Rika> Though USD has been dropping too I assume
[15:10:36] <FromDiscord> <Rika> I assume?? I mean I think
[15:12:25] <FromDiscord> <Tanguy> Seems to be sitting here https://www.blockchain.com/btc/address/1BXfuKM2uvoD6mbx4g5xM3eQhLzkCK77tJ
[15:13:34] <FromDiscord> <Tanguy> Seems to be sitting here https://www.blockchain.com/btc/address/bc1qzgw3vsppsa9gu53qyecyu063jfajmjpye3r2h4
[15:15:10] <FromDiscord> <Rika> F
[15:16:42] <FromDiscord> <Forest> In reply to @Forest "Oh i forgot about": Added the shell_minimal.html file, but got this error: https://www.toptal.com/developers/hastebin/wunokirihe.nim
[15:17:12] <FromDiscord> <Forest> I don't know how to fix the android-glob error but i don't have any other device with emscripten
[15:17:37] <szahid> Do you know some good CMS for documentation?
[15:19:15] *** Joins: k0mpjut0r (~k0mpjut0r@79.124.7.34)
[15:26:58] <PMunch> szahid, I use CouchCMS for my website, it's pretty neat
[15:27:08] <PMunch> But I'm going to try out HTMX for some stuff soon
[15:30:32] *** Quits: k0mpjut0r (~k0mpjut0r@79.124.7.34) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:49] *** Joins: k0mpjut0r (~k0mpjut0r@2a01:8740:1:706::2)
[16:12:31] <FromDiscord> <Forest> Anyone? :p
[16:27:28] <Amun-Ra> nope
[16:28:49] <FromDiscord> <Forest> Rip
[16:31:15] <PMunch> @Forest, well you need that library in a path where wasm-ld can find it
[16:35:13] <FromDiscord> <Forest> Does it not use my normal library path?
[16:35:27] <FromDiscord> <Forest> How would i allow emscripten to see it?
[16:37:59] <PMunch> I've got no idea what wasm-ld uses
[16:38:12] <PMunch> I assume it uses the normal library path
[16:38:32] <FromDiscord> <Forest> Hm then there should be no issue :/
[17:08:36] *** Joins: rockcavera (~rc@192.12.114.201)
[17:08:36] *** Quits: rockcavera (~rc@192.12.114.201) (Changing host)
[17:08:36] *** Joins: rockcavera (~rc@user/rockcavera)
[17:22:06] <l1x> is there a https library / option for import asynchttpserver, asyncdispatch
[17:48:05] <FromDiscord> <mratsim> In reply to @Rika "F": Araq had the key on a discarded disk and is now looking for it in a dump.
[17:48:14] <FromDiscord> <Rika> oh god
[17:48:28] <FromDiscord> <Rika> i feel like ive heard this before but forgot
[17:49:28] <FromDiscord> <mratsim> posting in #offtopic
[18:14:58] *** Joins: arkurious (~arkurious@user/arkurious)
[18:24:37] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3NG7
[18:27:49] <FromDiscord> <Clonkk> I think `collect` does something like this ?↵(@Tanguy)
[18:28:32] <FromDiscord> <Clonkk> https://nim-lang.org/docs/sugar.html#collect.m%2Cuntyped
[18:30:51] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[18:47:22] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (Remote host closed the connection)
[18:59:20] <arkanoid> which options do I have to solve the circular dependency problem in nim? I know: A) bundle everything in single module B) forward declarations, else?
[18:59:48] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[19:00:17] <FromDiscord> <dom96> put all your types in a types.nim file
[19:01:23] <FromDiscord> <mratsim> In reply to @arkanoid "which options do I": mixin
[19:02:05] <FromDiscord> <mratsim> sometimes you can put your imports after the proc needed for the dependency in the other module are defined.
[19:03:15] <arkanoid> mratsim, mixin as in C++ mixin?
[19:03:56] <FromDiscord> <mratsim> Nim mixin
[19:04:18] <FromDiscord> <mratsim> only works in generics or templates though
[19:04:42] <FromDiscord> <mratsim> basically it tells the compiler "don't try to look for this symbol now, the caller will have it in its scope"
[19:10:18] <FromDiscord> <Phil> Is there a way to get nim to shut up about circular dependencies every time I import db_sqlite >_> ?
[19:10:27] <FromDiscord> <Phil> (edit) ">_>" => ">\_>"
[19:10:42] <arkanoid> mmmm ok
[19:22:59] <Zevv> arkanoid: the ciruclar dependency problem has been my main issue with nim for a long time - every time I try to make a decent sized project in Nim, I run into this. It's hard to keep modules decoupled end you do end up with one single file with dozens of type definitions.
[19:23:19] <Zevv> I've heard rumours that there is work done on this, but I'm not aware of any other solutions yet
[19:23:45] <Zevv> People usally say my code is bad if I need circular types
[19:23:56] <Zevv> so it must be me.
[19:25:00] <arkanoid> yeah, it's bad design usually, but here I'm trying to refactor a nim library that is done in the "one huge module with dozen of forward declarations"
[19:26:13] <Zevv> I'd even argue against the bad design - it's pretty common to have things pointing at each other. I have a thing containing things, and I want the individual things to be able to point to the thing they're in. It's a pretty common pattern. C offers simple opaque types for that, but in Nim this is a pita
[19:26:52] <Zevv> for the forward declarations, you might get away with enabling code reordering, experimental feature. Usually works just fine for me
[19:27:00] <Zevv> but not with types, only with functions
[19:27:38] <Amun-Ra> you can have forward-alike type declarations in the same type block
[19:27:47] <arkanoid> yes but code reordering seems to not work between nim modules "include"'ing each other "not import"
[19:27:51] <Zevv> yes, that's the restriction. The same type block
[19:28:16] <arkanoid> I already have all types in single `type` bock, problem are procs
[19:30:16] <Zevv> anyway, this is an old problem that keeps coming up every so often. iirc there's an rfc somewhere about it, you might want to poke that
[19:30:50] <Zevv> https://github.com/nim-lang/RFCs/issues/6 2016
[19:30:57] <Amun-Ra> #6
[19:34:17] <arkanoid> yeah, been there in the last months, yet there's no solutions
[19:34:25] <FromDiscord> <hmmm> I thought the general solution people used was matrioska boxes? A is the boss and imports whatever it wants, B is miniboss, imports whatever except from A, C is working class, no A and B but can import D and D is peon and cannot import from anyone 🤔
[19:34:44] <Zevv> software architecture is not always a nice tree
[19:34:49] <FromDiscord> <hmmm> hmm
[19:34:51] <Zevv> sometimes it's a graph. bidirectional
[19:36:28] <FromDiscord> <hmmm> the last time I had the problem I tried to make a module just for the imports but it didn't work so I had to change a bunch of code to fit the matrioska model
[19:37:36] <Zevv> the last time I had the problem I decided to drop nim for a while
[19:37:41] <FromDiscord> <hmmm> haha
[19:38:10] <arkanoid> The extreme case I'm dealing with sees a single main .nim file doing "include" of a dozen others, and one is "types.nim". Code is full or forwarding declarations. I'm trying to make things better, but apparently this is the only solution
[19:38:24] <Zevv> yes
[19:39:02] <arkanoid> and this sucks
[19:39:08] <FromDiscord> <hmmm> yea honestly it's probably the worst thing happened to me in my smol nim experience. Since nim usually gets nicely out of the way it was strange I had to change a bunch of code to fit nim
[19:41:32] <arkanoid> sigh, this means that I'm doomed to fail in my effor to make things better
[19:42:36] <FromDiscord> <enthus1ast> i had good experience with splitting everything even more
[19:42:49] <FromDiscord> <enthus1ast> so for every module i also created a types file
[19:43:01] <FromDiscord> <enthus1ast> foo.nim ;  typesFoo.nim
[19:43:22] <FromDiscord> <enthus1ast> that whay you can use typesFoo.nim where you just need the typdefs from this module
[19:43:37] <arkanoid> enthus1ast: you do import or include?
[19:43:46] <FromDiscord> <enthus1ast> and i made it so that importing foo.nim also exports typesFoo.nim for convenience
[19:43:47] <FromDiscord> <enthus1ast> import
[19:44:22] <arkanoid> I don't see how this can fix the circular depedency problem
[19:45:01] <FromDiscord> <enthus1ast> what are you circular dependencies=
[19:45:02] <FromDiscord> <enthus1ast> ?
[19:46:24] <arkanoid> module foo has "proc fooProc = barProc()" and module bar has "proc barProc = fooProc()" 
[19:46:49] <arkanoid> if you import bar in foo, and foo in bar, you end up with something that won't compile
[19:47:35] <FromDiscord> <enthus1ast> if these modules are so intertwinded, maybe they are no different modules but belong to one?
[19:48:35] <FromDiscord> <enthus1ast> or maybe you could have them import a non intertwined "implementation" module
[19:52:05] <arkanoid> also, the "one file with all types" solution is not possible if you're using finalizers: "Error: type bound operation `delete` can be defined only in the same module with its type"
[19:53:42] <arkanoid> it's a chain reaction that drives to not use import at all
[19:56:25] <Zevv> your code is bad and you should feel bad
[19:59:02] <arkanoid> I do
[20:10:41] <FromDiscord> <mratsim> finalizers?
[20:10:53] <FromDiscord> <mratsim> with ref objects?
[20:11:11] <FromDiscord> <mratsim> one file with many types isn't too bad.
[20:12:01] <FromDiscord> <mratsim> @Zevv agree on the cyclic import part. Sometimes you refactor and it rears its ugly head and then what you thought was a nice evening now becomes just painful copy-pasta night
[20:17:33] <Zevv> right. it kind of ruined the fun of programming Nim for me on the last largish project I did, so for the thing after I moved back to C++
[20:33:50] <FromDiscord> <Phil> Say I want to express in a proc that if you pass it a given variable as parameter, that memory is now owned by the proc, you don't get to have access to it anymore. How do I annotate this?↵Connection shall now be owned by recycleConnection if it is being used↵`proc recycleConnection(connection: DbConn) {.gcsafe.} =`
[20:34:12] <FromDiscord> <Phil> DbConn is a pointer of the Sqlite3 type
[20:34:48] <FromDiscord> <Phil> (edit) "anymore." => "anymore outside of the proc." | "anymore outside of the proc.How do I annotate ... this?↵Connection" 03added "this? Can I even do"
[20:44:27] <FromDiscord> <Phil> I found "https://nim-lang.org/docs/destructors.html"↵Which says to use `sink` to ↵`proc recycleConnection(connection: sink DbConn) {.gcsafe.} =`↵I mostly want to be on the safe side that I'm understanding this correctly
[20:53:05] <arkanoid> what's the meaning of "type Bar" in "proc test(foo: type Bar)"? I know "proc test[T]" and "proc test(foo: typedesc)"
[20:54:44] <FromDiscord> <michaelb> In reply to @arkanoid "what's the meaning of": might more often be expressed like `proc test(T: type Bar)`, and you can invoke it with `Bar.test`
[20:56:27] <FromDiscord> <michaelb> a use case is defining init proc for a type, involving logic and default param values that you don't get by calling `Bar()` directly
[20:56:47] <FromDiscord> <michaelb> `proc init(T: type Bar, ...): T`
[20:56:54] <FromDiscord> <Rika> same as typedesc[Bar] i believ
[20:56:55] <FromDiscord> <Rika> (edit) "believ" => "believe"
[20:57:03] <FromDiscord> <Rika> in this case
[20:57:34] <FromDiscord> <Rika> type in proc signature -> typedesc↵type in proc body -> typeof
[20:58:24] <FromDiscord> <michaelb> (edit) "...): T`" => "a = 123, b = "stuff"): T = Bar(a: a, b: b)`"
[20:59:41] <arkanoid> ok, thanks. I do know the init based on typedesc[MyType] so I'm ok with it. the problem with "type Bar" in my context is that I'm getting a circular dependency warning in the code I'm trying to refactor, here: https://play.nim-lang.org/#ix=3NH9
[21:00:20] <arkanoid> I don't see where the circular dependency is, basically
[21:00:35] <FromDiscord> <michaelb> if I'm wrapping a C lib with a function with a parameter of type `wchar_t`, what's the best thing to do? Nim's system lib doesn't have an alias for `wchar_t` and it's not cleary to me if I std/widestrs provides a way to deal with it
[21:00:52] <FromDiscord> <michaelb> (edit) "cleary" => "clear"
[21:01:00] <FromDiscord> <michaelb> (edit) 04removed "I"
[21:14:40] <FromDiscord> <Shiba> why does nim generates those .o files https://media.discordapp.net/attachments/371759389889003532/936315788237897728/Capture.PNG
[21:15:04] <FromDiscord> <Rika> ? because C generates them
[21:15:39] <FromDiscord> <Shiba> the c compiler ?
[21:16:13] <FromDiscord> <Rika> yeah
[21:18:52] <FromDiscord> <Shiba> why?
[21:18:56] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3NHk
[21:19:41] <FromDiscord> <Phil> (edit) "https://play.nim-lang.org/#ix=3NHk" => "https://play.nim-lang.org/#ix=3NHl"
[21:22:15] <FromDiscord> <Shiba> In reply to @Rika "yeah": is there a configuration to stop generating those object files
[21:22:22] <FromDiscord> <Rika> uh no
[21:22:27] <FromDiscord> <Rika> well maybe
[21:22:29] <FromDiscord> <Rika> but why?
[21:23:25] <FromDiscord> <tandy> is a `var object` allowed?
[21:26:13] <FromDiscord> <konsumlamm> did you try it?
[21:26:41] <FromDiscord> <tandy> im geting this error↵`Error: invalid type: 'MatrixClient' for var`
[21:27:54] <FromDiscord> <mratsim> In reply to @Isofruit "Hmmm my test fails": I think sink is a type-bound operation, you need to create your own type that wraps int in that case if you want destructors to work.
[21:28:29] <FromDiscord> <Phil> In reply to @mratsim "I think sink is": Wouldn't my second example with `myType` qualify for that?
[21:32:02] <FromDiscord> <tandy> hmm nvm
[21:42:08] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[21:52:18] *** Joins: wsantos (~wsantos@127.241.71.148.rev.vodafone.pt)
[21:55:31] *** Quits: wsantos (~wsantos@127.241.71.148.rev.vodafone.pt) (Client Quit)
[21:56:11] <FromDiscord> <Goel> Does the compiler doesn't warn anymore in case of unused variables?
[22:00:44] <FromDiscord> <Phil> It still warns you, believe me, it very much still does
[22:01:46] <FromDiscord> <Goel> Uhm no doesn't (in case of a global var i mean)
[22:02:04] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 250 seconds)
[22:03:48] <FromDiscord> <Phil> Ah, for a global variable, hmm
[22:04:08] <FromDiscord> <Goel> sent a code paste, see https://play.nim-lang.org/#ix=3NHA
[22:04:25] <FromDiscord> <Phil> complain = error for you?
[22:04:36] <FromDiscord> <Goel> (edit) "https://play.nim-lang.org/#ix=3NHA" => "https://play.nim-lang.org/#ix=3NHB"
[22:05:04] <FromDiscord> <Goel> Yeah i suppose in past that was a Warning, not a soft Hint, but i may be wrong
[22:06:13] <FromDiscord> <Phil> I'd count the hint as complaining, different terminology then↵`/home/isofruit/dev/tinypool/src/tinypool/pool.nim(176, 7) Hint: 'a' is declared but not used [XDeclaredButNotUsed]`
[22:06:31] <FromDiscord> <Phil> (edit) "I'd count the hint as complaining, different terminology ... then↵`/home/isofruit/dev/tinypool/src/tinypool/pool.nim(176," 03added "usage"
[22:10:00] <arkanoid> how can I get more info on this error? it points to internal code. " Error: cannot bind another '=destroy' to: QObject:ObjectType; previous declaration was constructed here implicitly: /home/jack/.choosenim/toolchains/nim-1.6.0/lib/system/arc.nim(210, 7)"
[22:11:01] *** Joins: jjido (~Denis@94.0.244.224)
[22:22:51] *** Joins: neceve (~quassel@2.26.93.228)
[22:27:23] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 268 seconds)
[22:28:18] <FromDiscord> <Yardanico> some code is defining a destructor for that type after it was initialized in code
[22:28:28] <FromDiscord> <Yardanico> so that custom destructor conflicts with the default Nim one
[22:29:13] <FromDiscord> <Yardanico> you should place the destructor declaration for that type right after it is declared before it's used
[22:34:59] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[22:40:52] <NimEventer> New Nimble package! tinypool - A minimalistic connection pooling package, see https://github.com/PhilippMDoerner/TinyPool
[22:48:20] <FromDiscord> <Phil> Pool, I can finally... install my own package!
[22:48:26] <FromDiscord> <Phil> (edit) "Pool," => "Cool,"
[22:52:47] *** Joins: vicfred (~vicfred@user/vicfred)
[22:58:18] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[22:59:16] <FromDiscord> <Forest> Anyone know of a wasmtime binding for Nim?
[23:01:14] <NimEventer> New post on r/nim by DrSalewski: First draft of the async/await chapter is now finally available, see https://reddit.com/r/nim/comments/se6h0x/first_draft_of_the_asyncawait_chapter_is_now/
[23:02:20] <FromDiscord> <Forest> Also why does Nim not use the C types? Why does it provide it's own layer over it?
[23:02:45] <FromDiscord> <Forest> (`cint` vs `int`, `cstring` vs `string`)
[23:09:07] <FromDiscord> <mratsim> In reply to @Forest "Also why does Nim": cint are int32, we use the machine pointer size.
[23:09:18] <FromDiscord> <mratsim> cstring are slow because they don't have the length.
[23:24:09] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:30:16] *** Quits: jjido (~Denis@94.0.244.224) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:38:17] *** Joins: PMunch (~PMunch@user/pmunch)
[23:41:48] <FromDiscord> <no name fits> So I was trying to make a program that could calculate the probability of getting m unique faces with n amount of dice that has k number of faces. Someone told me the formula for it would be something like↵`1/k^n  k!/(k-m)!  S(n,m)` where S is the Stirling partition of the second degree, and I'm completely lost on how to approach this
[23:42:53] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:43:08] <FromDiscord> <Forest> In reply to @mratsim "cint are int32, we": Ah okay
[23:45:56] <NimEventer> New thread by Leccine: Is there a HTTPS enabled HTTP server in Nim?, see https://forum.nim-lang.org/t/8849
[23:48:10] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[23:57:44] <FromDiscord> <xx_ns> huh
[23:58:15] <FromDiscord> <xx_ns> the nim forum told me "You can change anyone's rank! With great power comes great responsibility" or something like that
[23:58:18] <FromDiscord> <xx_ns> even though i just registered
[23:58:40] <FromDiscord> <xx_ns> could set my rank to be Troll, Admin, whatever
[23:58:46] <FromDiscord> <xx_ns> disappeared when i refreshed the page
[23:58:51] <FromDiscord> <xx_ns> should probably get that looked at
