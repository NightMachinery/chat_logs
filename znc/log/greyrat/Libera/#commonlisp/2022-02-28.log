[00:02:29] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[00:04:24] *** semz_ is now known as semz
[00:05:49] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:15:59] *** Quits: yewscion (~yewscion@ec2-34-234-185-163.compute-1.amazonaws.com) (Ping timeout: 250 seconds)
[00:19:00] *** Quits: amb007 (~a_bakic@127.246.204.77.rev.sfr.net) (Ping timeout: 240 seconds)
[00:19:29] *** Joins: amb007 (~a_bakic@204.146.204.77.rev.sfr.net)
[00:26:55] *** Joins: Catie (~user@user/catie)
[00:44:53] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:45:32] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:53:54] *** Quits: recordgroovy (~recordgro@50.35.20.8) (Remote host closed the connection)
[00:55:23] *** Quits: rotateq (~user@p200300e787279e0062e42ec032d1bffb.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[00:55:23] *** Quits: amb007 (~a_bakic@204.146.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:55:38] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:56:18] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:03:37] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[01:03:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[01:07:15] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:07:15] *** Joins: kevingal (~quassel@176.61.88.240)
[01:29:41] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 256 seconds)
[01:46:56] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e14b:875c:3570:34de) (Quit: WeeChat 3.3)
[01:51:47] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:57:50] *** Joins: akoana (~ah@user/akoana)
[02:01:24] *** Quits: Inline (~Inline@2a02:908:1252:7a80::175) (Ping timeout: 240 seconds)
[02:05:50] *** Joins: hashfunc1fa5 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[02:11:48] *** Quits: rtoy (~Thunderbi@98.51.32.60) (Ping timeout: 240 seconds)
[02:14:32] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 250 seconds)
[02:15:23] *** Joins: Bike (~Bike@71.69.170.70)
[02:39:04] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[02:39:23] *** Joins: eugercek (~user@user/eugercek)
[02:39:41] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[02:39:55] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 240 seconds)
[02:40:29] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[02:45:43] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[03:00:05] *** Quits: kevingal (~quassel@176.61.88.240) (Remote host closed the connection)
[03:15:09] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:17:33] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 250 seconds)
[03:21:54] *** Joins: hashfunc1818 (~user@2601:5c0:c280:7090:8c1e:afa3:b36b:39be)
[03:25:07] *** Quits: hashfunc1fa5 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[03:26:35] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[03:28:09] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[03:30:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:37:03] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 250 seconds)
[03:38:28] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 272 seconds)
[03:46:37] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[03:50:32] *** Quits: jmes (~james@216.154.22.238) (Remote host closed the connection)
[04:07:52] *** Joins: dirtcastle (~dirtcastl@2409:4072:98a:fdb8:c869:cbff:fe1c:849a)
[04:10:46] *** Quits: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[04:20:00] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:21:33] *** Joins: zacque (~zacque@175.140.124.235)
[04:24:15] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:25:00] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[04:27:12] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[04:31:59] *** Joins: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net)
[04:44:56] *** Quits: zacque (~zacque@175.140.124.235) (Remote host closed the connection)
[04:45:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:45:37] *** Joins: zacque (~zacque@175.140.124.235)
[04:49:20] *** Joins: robin_ (~robin@user/terpri)
[04:51:48] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[04:58:47] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 256 seconds)
[05:11:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:11:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:27:44] *** Joins: phantomics (~phantomic@97-118-157-121.hlrn.qwest.net)
[05:29:28] *** robin_ is now known as robin
[05:33:47] <hashfunc1818> is there a built-in hash function in common lisp? like sha1 or sha256?
[05:35:53] <yitzi> Some implementations include their own extensions for sha256, etc. If you need implementation independent support see ironclad.
[05:36:01] <semz> There is sxhash, but Common Lisp doesn't have cryptographic hashes.
[05:36:11] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:37:02] <hashfunc1818> yitzi: ok thanks.
[05:37:10] <hashfunc1818> semz: yup that'll do for the time being
[05:37:15] <hashfunc1818> semz: thanks
[05:37:20] *** Joins: epony (epony@user/epony)
[05:37:48] *** Quits: Volt_ (~Volt_@c-73-145-161-51.hsd1.mi.comcast.net) (Quit:  )
[05:40:58] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:47:13] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[05:48:13] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[05:57:43] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:59:39] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[06:00:05] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[06:07:16] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[06:08:16] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[06:18:57] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[06:19:21] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[06:29:45] *** Quits: NotThatRPG_away (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Ping timeout: 256 seconds)
[06:36:57] *** Joins: wmblathe_ (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net)
[06:36:57] *** Quits: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net) (Read error: Connection reset by peer)
[06:37:12] *** wmblathe_ is now known as wmblathers
[06:45:31] *** Joins: Oladon (~olad@98.43.81.226)
[06:49:11] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[07:00:52] *** Quits: dirtcastle (~dirtcastl@2409:4072:98a:fdb8:c869:cbff:fe1c:849a) (Read error: Connection reset by peer)
[07:00:53] *** Quits: ym (~ym@95.106.33.191) (Remote host closed the connection)
[07:01:07] *** Joins: dirtcastle (~dirtcastl@103.43.203.229)
[07:05:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[07:10:32] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[07:17:39] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[07:30:19] <beach> Good morning everyone!
[07:31:37] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:47:32] <hashfunc1818> is there a standard idiom for a loop with a trivial test condition?
[07:48:24] <beach> (loop until <test> ...) or (loop while <test> ...)
[07:48:46] <hashfunc1818> ah ok thanks
[07:49:05] <hashfunc1818> i'm always not-to-eager to use the loop functionality tho
[07:49:18] <beach> I am sorry to hear that.
[07:50:10] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[07:50:16] <hashfunc1818> it's almost like whenever i use it, i feel like i'm doing something wrong
[07:50:22] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:50:30] <beach> I am very sorry to hear that.
[07:50:44] <beach> Maybe the best solution here is to change the way you feel when you use it.
[07:50:44] <hashfunc1818> hahah
[07:51:11] <hashfunc1818> by feeling, i mean an intuition that i can't quite put a finger on, that's telling me that i should be using recursion?
[07:51:16] <hashfunc1818> idk
[07:52:20] <beach> In Common Lisp, recursion is mainly used for tree-like structures where it would be very messy to iterate and where the depth of the recursion is limited, typically to log(n).
[07:53:14] <beach> Recursion is also good for macro functions where performance impacts compile time only and where the structure (i.e., code) is naturally recursive.
[07:56:51] *** Joins: semz_ (~semz@user/semz)
[07:56:52] <beach> Recursion could also be used for numeric intervals where you need to divide it in two halves in each recursive call.  The call structure is then tree-like even though there is no data structure.
[07:59:31] *** Quits: semz (~semz@user/semz) (Ping timeout: 245 seconds)
[08:05:46] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:10:10] *** Joins: SR-71 (~user@user/SR-71)
[08:10:34] <hashfunc1818> read a joke about recursion https://www.reddit.com/r/dadjokes/comments/aqdrws/read_a_joke_about_recursion_that_was_so_bad_i_had/
[08:12:24] *** Parts: hashfunc1818 (~user@2601:5c0:c280:7090:8c1e:afa3:b36b:39be) (ERC (IRC client for Emacs 25.2.2))
[08:12:34] <SR-71> Seriously
[08:20:39] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[08:21:09] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[08:21:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[08:22:05] <beach> "Seriously" what?
[08:22:46] <SR-71> The recursion joke
[08:28:02] *** semz_ is now known as semz
[08:34:18] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:37:03] *** Quits: Catie (~user@user/catie) (Quit: sQuit)
[08:38:39] *** Quits: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[08:49:31] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[08:50:27] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[08:50:47] <epony> the recursion joke is that recursion jokes are implementing in recursion jokes, cause that's easy to optimise
[08:51:04] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[08:51:27] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[08:58:26] *** Joins: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net)
[08:58:49] <White_Flame> I was just about to complain about posting a reddit link which is just a link to the content, instead of the content itself ;)
[08:59:26] <beach> That must be why I didn't see the joke, and what the link pointed to gave me no desire to continue.
[09:01:34] *** anticomputer_ is now known as anticomputer
[09:04:52] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[09:06:41] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:07:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[09:07:48] *** Quits: zacque (~zacque@175.140.124.235) (Ping timeout: 272 seconds)
[09:12:14] <SR-71> How do you guys stay motivated throughout your personal projects?
[09:20:10] <White_Flame> constantly move to another project :-P
[09:22:51] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[09:25:54] <SR-71> That would be a lot of dead projects.
[09:26:55] <kakuhen> i have plenty of dead projects... but this time I will surely finish one of them....
[09:27:07] <beach> SR-71: Personally, I am guilt-driven and it works great for me.  I announce a project to the world, and then I am too ashamed to abandon it, so I keep going.
[09:27:17] <White_Flame> SR-71: you just have to revisit them, not always cycle to _new_ projects
[09:27:19] <SR-71> beach: lol
[09:27:20] <neominimum> I try to let go of the tension caused by attending to the end goal too much. I find I have more focus and enjoyment when I'm not looking too far into the path ahead. You can only think about one thing at a time so don't spend impractical amounts of time thinking about things that aren't immediately actionable.
[09:28:24] <beach> SR-71: Actually, that's not so much "motivated" as "forced to continue".
[09:29:22] <neominimum> I'm just coding to code, so I'm not ashamed about how many past projects I have (incomplete or not) I don't even keep count.
[09:29:23] <SR-71> beach: Oh, I might just try that.
[09:29:40] <beach> It doesn't work for everyone, but it does for me.
[09:31:27] <White_Flame> yeah, slot yourself in a conference to present a project, then you'll get it done :)
[09:32:13] <SR-71> White_Flame: That would be too embarrassing..lol
[09:33:00] <SR-71> beach: I usually spend a lot of time reading code than actually writing code.
[09:34:31] <White_Flame> the majority of time in coding is not spent writing code
[09:35:03] <White_Flame> thinking, designing, reading, debugging...
[09:35:47] <SR-71> White_Flame: Majority of the time is spent staring at the ceiling thinking.
[09:36:15] <SR-71> And the rest reading.
[09:36:38] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[09:36:44] <SR-71> And a small fraction actually writing code.
[09:37:04] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[09:39:38] <SR-71> It's just, I want to actually complete one of my projects. And motivation is hard to come by lately.
[09:42:31] <White_Flame> then replace motivation with discipline ;)
[09:44:14] <SR-71> That's true.
[09:44:39] *** Joins: shka (~herr@109.231.3.55)
[09:49:36] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 272 seconds)
[09:50:30] <SR-71> So, what are you guys working on lately?
[09:51:00] *** Joins: treflip (~user@user/treflip)
[09:51:42] <White_Flame> personally, my forward chaining algo has cracked the nut of linear memory usage, and I'm figuring out how to integrate real backchaining into it
[09:52:00] *** Joins: zacque (~zacque@1.32.81.194)
[09:52:23] <beach> minion: Please tell SR-71 about SICL.
[09:52:24] <minion> SR-71: SICL: SICL is a (perhaps futile) attempt to re-implement Common Lisp from scratch, hopefully using improved programming and bootstrapping techniques. See https://github.com/robert-strandh/SICL
[09:52:56] <White_Flame> (that, and I'm doing a bunch of data movement/transformation stuff for "real work")
[09:53:23] <SR-71> minion: That's cooool
[09:53:28] <minion> what is?
[09:53:34] <SR-71> SICL
[09:53:54] <White_Flame> (shh, nobody tell SR-71 that minion is a bot)
[09:54:01] <SR-71> lol
[09:56:03] <beach> minion: Thanks!
[09:56:04] <minion> np
[09:56:31] <beach> minion: Are you a bot?
[09:56:38] <minion> Are you a bot: I can't be expected to work when CLiki doesn't respond to me, can I?
[09:56:44] <beach> Aww!
[09:57:02] <neominimum> SR-71: Last couple of days I have been rewriting parts of my primitive asynchronous message passing  runtime to make it non consing.
[10:01:00] <SR-71> neominimum: Did you publish your code on github?
[10:05:44] <neominimum> I have nothing published as of yet, but I have been considering it for this project as I'd like to get some feedback from anyone interested about the implementation. Although there is no time frame currently as I need to get it where I'm happy to release the code.
[10:07:10] <neominimum> *get it to a stage
[10:11:24] *** Quits: mepy (~mepy@37.100.156.164) (Ping timeout: 240 seconds)
[10:21:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:22:12] *** Joins: spiaggia (~user@2a01:cb19:150:3400:f060:2580:60f8:2f7b)
[10:24:59] <SR-71> White_Flame: You seems to be well versed on AI, Can you recommend a good resource for learning NLP?
[10:25:29] <White_Flame> no, I've not really found a NP architecture or technique that I'm happy with yet
[10:25:40] <White_Flame> *NLP
[10:26:13] <White_Flame> but prolog had tons of the basics
[10:27:08] <SR-71> White_Flame: I was just interested in writing my own chat bot.
[10:27:09] <spiaggia> A grammar checker would be good to have.  For English and French to start with.
[10:31:35] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[10:31:40] *** Quits: Brucio-61 (~Brucio-35@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[10:33:47] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[10:50:07] *** Quits: treflip (~user@user/treflip) (Ping timeout: 256 seconds)
[10:57:37] *** Joins: hashfunc50e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[11:05:59] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[11:07:09] <edgar-rft> natural languages need new grammars to simplify things
[11:14:45] <spiaggia> I agree.  Some grammars are made to get a complete structure of a sentence, but that's often overkill for grammar checking.  For instance.
[11:18:55] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:19:34] *** Joins: Josh_2 (~user@197.185.100.162)
[11:20:12] <hashfunc50e> how can i make this custom _absolute_ sort by its position in the cond, and not by its position in the list?
[11:20:18] <hashfunc50e> (sort '(howdy yo hi sup) (lambda (x y) (declare (ignore y)) (cond ((eq x 'yo) x) ((eq  x 'hi) x)))) => (HI YO HOWDY SUP)
[11:20:23] <hashfunc50e> (sort '(howdy hi yo sup) (lambda (x y) (declare (ignore y)) (cond ((eq x 'yo) x) ((eq  x 'hi) x)))) => (YO HI HOWDY SUP)
[11:23:57] <spiaggia> I have no idea what that means and I don't understand the examples
[11:25:35] <White_Flame> you have equal elements according to your predicate, there's no absolute order between those
[11:26:38] <White_Flame> also, I don't think yuo can know which is going to be X vs Y
[11:26:57] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[11:28:18] *** Joins: amb007 (~a_bakic@156.12.23.93.rev.sfr.net)
[11:29:11] <spiaggia> And of course, SORT is destructive so should not be used on literal data.
[11:34:16] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[11:35:10] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[11:35:24] *** Joins: lisp123 (~lisp123@120.154.103.52)
[11:37:52] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[11:39:23] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[11:44:24] *** Quits: spiaggia (~user@2a01:cb19:150:3400:f060:2580:60f8:2f7b) (Quit: ERC (IRC client for Emacs 26.3))
[11:44:28] <lisp123> Is there a implementation of CL on Windows (excluding Portacle's genius) that I can run without installation and unlikely to be detected by Corporate IT
[11:44:55] <lisp123> Not sure if I should risk silently installing CL at work (it will never get approved since I'm not in the IT dept)
[11:46:29] <hashfunc50e> White_Flame: how do i specify absolute ordering in CL?
[11:46:40] <White_Flame> with your predicate
[11:47:45] <White_Flame> your current one returns the same boolean result for HI/YO and HOWDY/SUP
[11:47:48] <White_Flame> making those equivalent
[11:47:57] <White_Flame> and you have no idea what's in Y
[11:48:08] <White_Flame> HI or YO could be in htere
[11:48:41] <hashfunc50e> White_Flame: i see
[11:49:00] <White_Flame> the whole thing is pretty whacked, to be honest.  I don't think my assessment is even correct, given that Y is ignored
[11:49:22] <pjb> lisp123: do you have access to ssh?  or to http?
[11:49:30] <pjb> lisp123: there's no need to run locally.
[11:49:37] <hashfunc50e> White_Flame: you don't like the idea?
[11:49:38] <pjb> lisp123: or you can run it in the browser.
[11:49:54] <White_Flame> hashfunc50e: I don't really know what your idea is.
[11:50:10] <White_Flame> but using that lambda  as a sort predicate really doesn't make sense
[11:50:18] *** Joins: Inline (~Inline@p200300cd470c79003cbee1ceac867d03.dip0.t-ipconnect.de)
[11:50:47] <lisp123> http / ssh, I'm worried they will catch on at some point if they monitor traffic. I already got pulled up once before for a security breach (to be fair, I was 100% at fault)
[11:51:19] <hashfunc50e> White_Flame: the lambda is just temporary until more complex logic is needed
[11:51:23] <White_Flame> because parameters of (HI LO), (LO HI), (HI SUP), etc are all indistinguishable
[11:52:30] <White_Flame> and it's blind luck that it even puts those 2 in front, as it could just have easily had YO, HI as only ever appearing in Y
[11:52:55] <White_Flame> you need to actually, you know, _compare_ the two arguments ;)
[11:53:01] <hashfunc50e> White_Flame: essentially i'm trying to convey that YO always has a higher precedence than any other symbol
[11:53:10] <lisp123> portacle technically works, I have ways to get it into my computer, but I heard somewhere SBCL might get flagged for executable memory
[11:53:13] <White_Flame> but you don't compare it against the other symbols
[11:53:16] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[11:53:25] <hashfunc50e> White_Flame: i see, yes. i understand. thanks for the help
[11:53:33] <White_Flame> and it has the same precedence as HI
[11:53:37] <pjb> lisp123: https and ssh are encrypted. They won't know what you do, only with what host you do it, and how big it is.
[11:54:13] <pjb> lisp123: there are things like https://codeanywhere.com that let you run CL code.
[11:54:20] <lisp123> pjb: I see. Hmmm I could host my own lisp
[11:54:27] <pjb> lisp123: or that, indeed.
[11:54:32] <pjb> You can ssh home.
[11:54:39] <lisp123> pjb: thanks, thats some food for thought
[11:54:52] <pjb> or you can run in a docker on your windows host.
[11:55:02] <pjb> or some VM
[11:55:34] <lisp123> yeah unfortunately, I doubt they will give me that. But one day I might ask, after I butter up the IT team and make friends with them ;)
[11:58:02] *** Joins: random-nick (~random-ni@87.116.167.125)
[11:59:52] <pjb> lisp123: You could try installing a CL on linux: https://bellard.org/jslinux/
[12:01:01] <pjb> lisp123: I'd try ecl or clisp first.
[12:04:20] <lisp123> pjb: Thanks
[12:04:57] <lisp123> I will try clisp first, but that cl on linux idea seems like it could also work pretty well, since its all in the browser
[12:05:25] <lisp123> cant imagine anyone detecting js running a lisp
[12:05:38] <pjb> It's just some javascript in your browser.
[12:05:44] <lisp123> exactly
[12:06:36] <random-nick> wouldn't it be better to use sbcl since it's faster and so more efficient?
[12:06:46] *** Joins: rotateq (~rotateq@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[12:07:20] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:07:27] <hashfunc50e> White_Flame: i suppose this will have to do for now:
[12:07:28] <hashfunc50e> (sort '(sup yo hi) (lambda (x y) (cond ((eq x 'yo) x) ((eq  x 'hi) (unless (eq y 'YO) x))))) => (YO HI SUP)
[12:07:32] <hashfunc50e> (sort '(sup hi yo) (lambda (x y) (cond ((eq x 'yo) x) ((eq  x 'hi) (unless (eq y 'YO) x))))) => (YO HI SUP)
[12:07:44] <lisp123> random-nick: I work in a bank now, so if I ever get caught I could get fired
[12:08:00] <White_Flame> hashfunc50e: I still don't really get the strategy
[12:08:28] <beach> hashfunc50e: Please do not sort literal data.
[12:08:40] <White_Flame> (that, too)
[12:09:19] <rotateq> beach: You mean cause SORT is destructive?
[12:09:26] <beach> Yes.
[12:09:42] <beach> hashfunc50e: Also, the predicate is supposed to return a generalized Boolean, so why do you return an element instead.  You might as well just return T.
[12:10:05] <White_Flame> or chain an OR clause together, since it's all boolean
[12:10:13] <hashfunc50e> White_Flame: i can't find/think of the mathematical concept. but i guess the closest thing i can relate to it is essentially assigning an absolute value to a symbol
[12:10:22] <White_Flame> right
[12:10:37] <White_Flame> or position within a refernce list
[12:10:57] <White_Flame> (which is just a computed version of the same thing)
[12:11:00] <rotateq> There was once a time I thought there is also NSORT, like REVERSE vs NREVERSE, maybe due to hysterical raisins.
[12:12:17] *** Quits: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[12:13:03] <edgar-rft> CL needs NSETF
[12:13:24] *** Quits: amb007 (~a_bakic@156.12.23.93.rev.sfr.net) (Ping timeout: 240 seconds)
[12:13:44] *** Joins: amb007 (~a_bakic@156.12.23.93.rev.sfr.net)
[12:18:22] <hashfunc50e> White_Flame: beach: alright thanks for the help
[12:19:07] <beach> Good luck.
[12:19:14] *** Quits: hashfunc50e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[12:19:45] *** Joins: admich (~user@ip-146-12.sn-213-198.clouditalia.com)
[12:25:06] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:32:01] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[12:42:37] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[12:42:57] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:47:19] <mfiano> Hmm, I need a bit of help with the 'graph' graph theory library: https://eschulte.github.io/graph/ and graph theory in general.
[12:48:32] <jackdaniel> graph theory is full of interesting problems and clever solutions to them :)
[12:49:12] <mfiano> I have a directed graph with edges A->B and B->A, and I want to find the shortest path from A to A, which is obviously NIL because you are already there, and using the SHORTEST-PATH function returns that indeed, however, I want to find an actual path, even if it means leaving the node and coming back to it.
[12:49:57] *** Joins: igemnace (~ian@user/igemnace)
[12:50:36] <beach> So you mean the shortest path of length at least 1.
[12:50:39] <beach> ?
[12:51:16] <mfiano> Yes, I am wondering if this library has something of the sort. This is the only library I know of that has other functions I need. cl-graph does not, and is also buggy/unmaintained.
[12:52:19] <beach> For every successor of A, compute the shortest path to A.  Take the shortest of them all and add 1.
[12:53:04] <mfiano> I got everything except the "add 1" part.
[12:53:19] <beach> To the length of the shortest of them all.
[12:53:31] <beach> But maybe you don't need the length.  Just the path.
[12:53:42] <mfiano> I need the path A->B->A
[12:53:44] <beach> Then prefix the path from X to A by A -> X.
[12:53:49] <mfiano> That is all
[12:54:07] <beach> Then B is a successor of A, so compute the shortest path from B to A.  That is B -> A.
[12:54:18] <beach> Then add the prefix A -> B, and you have A -> B -> A.
[12:54:29] <mfiano> Ok that makes sense. Thank you.
[12:54:34] <beach> Sure.
[12:56:08] <mfiano> Now I have a real problem.
[12:56:18] <beach> I figured as much.
[12:56:35] <mfiano> As part of my test suite I am ensuring that the graph has a single component; that is, the graph is strongly-connected.
[12:57:06] <mfiano> But I need to ensure it is connected with this new constraint.
[12:57:24] <mfiano> So graph:strongly-connected-components is not going to do anymore.
[12:57:24] <beach> What new constraint is that?
[12:58:46] <mfiano> well graph:strongly-connected-components returns a list of lists. If that list is of length 1, the graph is strongly-connected, which I am using to test if my algorithm has all of the direct paths needed.
[12:59:35] <mfiano> Well maybe it is okay, actually.
[12:59:41] <mfiano> I need to think a bit more.
[12:59:48] <mfiano> Thanks for your help.
[12:59:55] <beach> I see neither a constraint nor a change of the connectedness.
[13:01:46] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[13:03:05] <mfiano> You are correct. I was confusing myself with another problem I have.
[13:03:16] <mfiano> As long as the graph is strongly connected, your solution will work.
[13:03:33] <beach> It will work even if it is not.
[13:03:34] <mfiano> Perfect, thank you.
[13:03:37] <beach> Sure.
[13:03:39] <mfiano> How so?
[13:03:53] <mfiano> There must be a path from B to A.
[13:04:03] <mfiano> IF it is not strongly connected, there may not be.
[13:04:13] <beach> If there isn't then it will return no result with is correct.
[13:04:57] <mfiano> Ok sure, the constraint I have is that it must always return a result, so I must have a strongly connected graph.
[13:05:02] <beach> Whether the graph is strongly connected or not, my technique will return a path of length  at least 1 from A to A if such a path exists.
[13:05:21] <beach> That is just not true.
[13:05:50] <beach> You can have a vertex D with no successors, but still have a path A -> B -> C -> A.
[13:06:02] <mfiano> I must have a path from every node to every other node. That is one of the constraints in my underlying algorithm.
[13:06:31] <beach> That is the very definition of strongly connected.
[13:08:27] <mfiano> Right. So given two nodes A and A. I require that it returns a path of at least length 1. I think we are saying the same thing though. You said your algorithm will return a path "if such a path exists". I am saying, it will always exist because of the strong connectedness.
[13:15:48] *** Quits: Inline (~Inline@p200300cd470c79003cbee1ceac867d03.dip0.t-ipconnect.de) (Quit: Leaving)
[13:22:27] <mfiano> I will say, that this library seems very wrong, at least at its documentation level.
[13:22:52] *** Joins: treflip (~user@user/treflip)
[13:23:49] <mfiano> There are no successors or predecessors functions. There is a "neighbors" function, that is documented as "Return all nodes which share an edge with NODE in GRAPH.". This seems to behave like a successors function when the graph is directed...it never returns predecessors.
[13:32:11] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:36:12] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[13:40:17] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[13:41:12] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[13:41:35] *** Joins: morganw (~user@80.225.24.132)
[13:41:44] *** Joins: Brucio-61 (~Brucio-93@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[13:45:59] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[13:46:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[13:47:05] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[13:48:37] *** Quits: admich (~user@ip-146-12.sn-213-198.clouditalia.com) (Ping timeout: 256 seconds)
[13:48:42] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:58:33] *** Quits: semz (~semz@user/semz) (Remote host closed the connection)
[13:58:47] *** Joins: semz (~semz@user/semz)
[14:07:10] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:11:18] *** Joins: admich (~user@ip-136-205.sn-213-198.clouditalia.com)
[14:15:49] *** Quits: amb007 (~a_bakic@156.12.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[14:15:59] *** Joins: amb007 (~a_bakic@156.12.23.93.rev.sfr.net)
[14:27:39] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:34:10] *** Joins: cosimone (~user@93-47-229-38.ip115.fastwebnet.it)
[14:34:36] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:37:21] *** Joins: razetime (~quassel@117.254.35.156)
[14:39:24] *** Joins: kevingal (~quassel@149.157.121.115)
[14:43:37] *** Quits: kevingal (~quassel@149.157.121.115) (Ping timeout: 240 seconds)
[14:44:28] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[14:54:16] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:37ab:3c6c:a9ec:c971) (Quit: Konversation terminated!)
[14:56:26] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Remote host closed the connection)
[14:56:49] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[14:57:50] *** Quits: amb007 (~a_bakic@156.12.23.93.rev.sfr.net) (Ping timeout: 260 seconds)
[14:59:21] *** Joins: amb007 (~a_bakic@212.150.22.93.rev.sfr.net)
[15:08:54] *** Quits: dirtcastle (~dirtcastl@103.43.203.229) (Remote host closed the connection)
[15:10:42] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 272 seconds)
[15:42:03] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[15:43:03] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[15:51:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:00:16] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[16:03:46] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: Leaving)
[16:11:40] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[16:21:10] *** Joins: eugercek (~user@user/eugercek)
[16:24:41] *** Joins: Bike (~Glossina@71.69.170.70)
[16:25:30] *** Joins: dirtcastle (~dirtcastl@103.43.203.225)
[16:29:51] *** Joins: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl)
[16:39:17] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:52:47] *** Quits: razetime (~quassel@117.254.35.156) (Ping timeout: 256 seconds)
[16:53:06] *** Joins: razetime (~quassel@117.254.35.156)
[17:01:51] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:03:46] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[17:32:11] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[17:41:54] *** Quits: zacque (~zacque@1.32.81.194) (Quit: Goodbye :D)
[17:44:41] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[17:50:56] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 272 seconds)
[17:56:20] *** Quits: form_fee- (~form_feed@nixon.einval.eu) (Quit: ZNC 1.8.2 - https://znc.in)
[18:03:54] *** Joins: waleee (~waleee@h-178-174-193-77.NA.cust.bahnhof.se)
[18:08:38] <etimmons> mfiano: If your graph has negative edge weights the shortest path from A to A may not be NIL :P
[18:09:16] <mfiano> :)
[18:12:30] <beach> Sometimes you may want to find the longest path as my friend Dan Barrett sings about in this song: https://www.youtube.com/watch?v=a3ww0gwEszo
[18:23:37] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Ping timeout: 240 seconds)
[18:23:44] *** Joins: kevingal (~quassel@2001:770:c0:401:14f0:8884:d7c5:adc9)
[18:24:00] *** Joins: Oladon (~olad@98.43.81.226)
[18:24:01] *** Quits: dirtcastle (~dirtcastl@103.43.203.225) (Ping timeout: 256 seconds)
[18:24:21] *** Joins: nature (~nature@45.32.235.173)
[18:26:01] *** Quits: eugercek (~user@user/eugercek) (Ping timeout: 256 seconds)
[18:26:11] *** Quits: rotateq (~rotateq@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Quit: Client closed)
[18:27:39] *** Joins: dirtcastle (~dirtcastl@2409:4072:6e8a:8540:bc65:a5ff:fe2f:9bfb)
[18:28:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[18:33:18] *** Joins: servytor (uid525486@id-525486.hampstead.irccloud.com)
[18:37:38] *** Joins: servytor1 (~kseitz@h104.118.128.40.static.ip.windstream.net)
[18:42:39] *** Joins: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu)
[18:42:59] *** Quits: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[18:43:20] *** Joins: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu)
[18:43:45] *** Joins: Psybur (~Psybur@mobile-166-170-32-247.mycingular.net)
[18:49:32] *** Quits: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu) (Remote host closed the connection)
[18:49:46] *** Joins: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu)
[19:03:30] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Ping timeout (120 seconds))
[19:10:50] *** Quits: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu) (Remote host closed the connection)
[19:11:06] *** Joins: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu)
[19:11:58] *** Quits: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl) (Quit: Client quit)
[19:15:53] *** Quits: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[19:16:22] *** Joins: ebrasca (~user@librepanther.com)
[19:16:43] <ebrasca> Is there some library for rollback code?
[19:17:10] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:17:59] <jackdaniel> what is a rollback code?
[19:18:10] <jackdaniel> do you want to implement transactional memory?
[19:24:17] <phoe> alexandria:unwind-protect-case
[19:24:40] <ebrasca> https://ki.infil.net/w02-netcode.html
[19:25:02] <ebrasca> In this guide they call it rollback netcode!
[19:25:49] <phoe> oh, it's in context of rolling back game state
[19:28:27] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[19:39:08] *** Joins: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net)
[19:39:10] *** Quits: razetime (~quassel@117.254.35.156) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:52:23] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[20:06:01] *** Quits: pdo (~user@194.12.6.234) (Ping timeout: 256 seconds)
[20:14:30] *** Joins: rtoy (~Thunderbi@98.51.32.60)
[20:19:21] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 256 seconds)
[20:22:10] *** Joins: eugercek (~user@user/eugercek)
[20:28:18] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[20:28:21] *** Quits: SR-71 (~user@user/SR-71) (Remote host closed the connection)
[20:41:50] *** Joins: Catie (~user@user/catie)
[20:42:14] *** Quits: servytor (uid525486@id-525486.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:45:56] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:48:23] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[20:50:29] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[21:01:22] *** Quits: amb007 (~a_bakic@212.150.22.93.rev.sfr.net) (Ping timeout: 260 seconds)
[21:01:30] *** Joins: amb007 (~a_bakic@28.148.22.93.rev.sfr.net)
[21:02:16] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[21:15:52] <mgl> Redoing from certain states may work.
[21:16:32] <mgl> (that is, from states that are certain)
[21:18:40] *** Quits: amb007 (~a_bakic@28.148.22.93.rev.sfr.net) (Ping timeout: 272 seconds)
[21:19:29] *** Joins: amb007 (~a_bakic@227.105.204.77.rev.sfr.net)
[21:27:25] <ebrasca> I am interested if there is a library for it.
[21:35:21] *** Quits: kevingal (~quassel@2001:770:c0:401:14f0:8884:d7c5:adc9) (Remote host closed the connection)
[21:35:42] *** Joins: Inline (~Inline@p200300cd47142200d42e13192b15e793.dip0.t-ipconnect.de)
[21:36:06] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[21:36:25] *** Joins: eugercek (~user@user/eugercek)
[21:37:24] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[21:38:29] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[21:38:29] *** Quits: amb007 (~a_bakic@227.105.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[21:38:39] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[21:41:39] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[21:45:46] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[21:46:14] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:47:38] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[21:52:05] <mgl> For redoing, there is Journal (https://github.com/melisgl/journal). Whether this approach works depends on the details, I guess.
[21:57:39] *** Quits: admich (~user@ip-136-205.sn-213-198.clouditalia.com) (Ping timeout: 256 seconds)
[22:01:58] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[22:01:58] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[22:01:58] *** Joins: tane (~tane@user/tane)
[22:03:24] *** Joins: Inline__ (~Inline@p200300cd4715f5002bb20ed77dab6816.dip0.t-ipconnect.de)
[22:05:10] *** Quits: Inline (~Inline@p200300cd47142200d42e13192b15e793.dip0.t-ipconnect.de) (Killed (zirconium.libera.chat (Nickname regained by services)))
[22:05:10] *** Inline__ is now known as Inline
[22:06:28] *** Joins: sloanr (~user@97-127-41-123.mpls.qwest.net)
[22:13:08] *** Quits: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[22:17:37] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[22:19:02] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[22:20:23] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[22:25:54] *** Joins: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net)
[22:29:09] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[22:30:21] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[22:30:42] *** Joins: eugercek (~user@user/eugercek)
[22:30:54] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[22:33:00] *** Quits: ebrasca (~user@librepanther.com) (Ping timeout: 240 seconds)
[22:40:36] *** Quits: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[22:53:21] *** Joins: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net)
[22:54:47] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[23:13:48] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[23:14:33] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:19:01] *** Joins: cjb (~cjb@user/cjb)
[23:20:11] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[23:20:56] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:21:33] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[23:23:41] *** Lord_of_Life_ is now known as Lord_of_Life
[23:24:24] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:24:36] *** Quits: dirtcastle (~dirtcastl@2409:4072:6e8a:8540:bc65:a5ff:fe2f:9bfb) (Ping timeout: 240 seconds)
[23:24:51] *** Joins: dirtcastle (~dirtcastl@103.43.203.230)
[23:27:49] *** Joins: eugercek (~user@user/eugercek)
[23:31:35] *** Joins: eugercek` (~user@31.223.43.20)
[23:32:15] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[23:35:13] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[23:55:53] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:58:28] *** Joins: patrice (~patrice@user/patrice)
