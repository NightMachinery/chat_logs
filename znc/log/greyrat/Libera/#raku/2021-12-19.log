[00:43:00] *** Quits: kjp (~kevin@n175-36-89-183.mrk2.qld.optusnet.com.au) (Quit: WeeChat 2.8)
[00:47:07] *** Quits: mcmillhj (~mcmillhj@c-va-bf0f2b8e02-14356-1.tingfiber.com) (Quit: Connection closed)
[01:17:56] *** Joins: kjp (~kevin@n175-36-89-183.mrk2.qld.optusnet.com.au)
[01:18:51] *** Joins: lichtkind_ (~lichtkind@p200300d0a722726779347d929697d081.dip0.t-ipconnect.de)
[01:21:30] *** Quits: lichtkind (~lichtkind@p200300d0a722729c79347d929697d081.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[01:27:16] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[01:40:35] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[01:51:20] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[02:41:03] *** Quits: mscha (~mscha@logger.mscha.org) (Quit: Connection closed)
[02:47:50] *** Joins: monkey_ (~user@190.104.116.153)
[02:49:05] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[02:49:11] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[02:58:46] *** Joins: RandalSchwartz (~Adium@2601:1c0:6a00:71d0::5997)
[03:02:24] *** Quits: RandalSchwartz (~Adium@2601:1c0:6a00:71d0::5997) (Client Quit)
[03:27:56] *** Quits: lichtkind_ (~lichtkind@p200300d0a722726779347d929697d081.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:36:28] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[03:37:24] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:40:24] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[03:42:45] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[03:44:24] *** Joins: tejr (~tejr@user/tejr)
[03:48:37] *** Joins: monkey_ (~user@190.104.116.153)
[03:57:59] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:05:03] *** Joins: Guest768 (~Guest7@76-14-105-39.rk.wavecable.com)
[04:13:03] *** Quits: Guest768 (~Guest7@76-14-105-39.rk.wavecable.com) (Quit: Ping timeout (120 seconds))
[04:20:26] *** Joins: Guest72 (~Guest7@76-14-105-39.rk.wavecable.com)
[04:20:29] <Guest72> Searching for a way to generate password suggestions from the entire set of printable letters, numbers, and punctuation characters that does _not_ enforce that not character appears more than once. So far, I'm striking out.
[04:24:14] <japhb> Guest72: `pwgen` on Linux systems
[04:36:47] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[04:37:13] *** Joins: discord-raku-bot (~RakuIRC@95.90.183.75)
[05:06:50] *** Joins: holyghost (~holyghost@2a02:a03f:64c8:9200:7d56:46d3:2b1d:99cb)
[05:21:21] <ggoebel> Guest72: is your set of printable letters numbers, and punctuation the subset available in ascii or utf8?
[05:23:21] *** Quits: holyghost (~holyghost@2a02:a03f:64c8:9200:7d56:46d3:2b1d:99cb) (Quit: Leaving)
[05:25:53] <ggoebel> m: (0..15).map({ ('0'..'z').pick }).join.say
[05:25:54] <camelia> rakudo-moar b5fb3628b: OUTPUT: «lSJbg0T<uF6mP3G2␤»
[05:30:11] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[05:34:00] <moon-child> hmm, I find the map kinda obfuscatory
[05:34:21] <moon-child> in that I usually expect the verb of a map to be pure or pure-ish
[05:34:28] <moon-child> probably prefer do-for or gather-for
[05:38:27] <Voldenet> m: (^32).roll(15).map(*.base(36)).join.say
[05:38:28] <camelia> rakudo-moar b5fb3628b: OUTPUT: «VKFN75FV7E5GU5O␤»
[05:39:42] <Voldenet> `from 32 numbers roll 15 times and use their base36 representation`
[05:41:13] <ggoebel> m: ('0'..'z').roll(15).join.say
[05:41:13] <camelia> rakudo-moar b5fb3628b: OUTPUT: «3IP_4WyX_?WK?du␤»
[05:41:25] <moon-child> all of this discussion aside, I would not generate passwords using raku
[05:41:32] <moon-child> I do not think its rng is cryptographic
[05:41:40] <moon-child> I generally use  dd /dev/urandom|base64
[05:41:44] <Voldenet> you don't need crypto rng for password
[05:42:10] <moon-child> specifically  dd if=/dev/random bs=1 count=12 2>/dev/null | base64
[05:42:45] <moon-child> Voldenet: sure, and if somebody figures out what raku script you were using to generate your password, they throw some seeds at the rng and crack it
[05:43:16] <moon-child> esp.: you used unique passwords, but you generated them in batch; so an attacker figures out one password, and has a pretty good idea of the rest
[05:43:35] <moon-child> is it a _likely_ attack vector?  No, not particularly; but it's very cheap and easy to avoid it, so why not?
[05:43:48] <Voldenet> `cat /dev/random | head -c12 | base64` is something i use tho
[05:44:19] <Voldenet> or echo $(cat /dev/random | tr -dc '[:graph:]' | head -c15)
[05:45:00] <Voldenet> or just use firefox which does this for you
[05:47:08] <moon-child> generating passwords with your browser is _probably_ fine (though I wouldn't do it anyway), but sounds dangerously close to _storing_ passwords with your browser, which is a god-awful idea
[05:50:47] <Voldenet> Why is it awful?
[05:51:18] <moon-child> because they're stored in plain text
[05:51:28] <Voldenet> are you from the past?
[05:52:21] <Voldenet> firefox for example stores passwords encrypted
[05:54:04] <Voldenet> https://hacks.mozilla.org/2018/11/firefox-sync-privacy/
[05:55:19] <moon-child> I see.  The encryption is off by default; and the passwords are kept in memory--in the same address space as a live javascript vm
[05:58:43] *** Joins: Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[06:01:32] *** Quits: Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Client Quit)
[06:01:48] <Voldenet> I'm not sure if that's the case
[06:01:56] *** Joins: Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[06:03:01] <Xliff_> \o
[06:03:10] <Xliff_> Are there nightlies of Rakudo for windows?
[06:03:26] <Xliff_> I can't seem to get rakubrew working under Cygwin. It used to work perfectly.
[06:04:35] <lucs> Encrypted or hashed>
[06:04:38] <lucs> ?
[06:08:52] <Voldenet> while I'm not sure if firefox even stores passwords in the same address space, I'm sure they can be extracted somehow
[06:09:03] <Voldenet> in that case, the safest way to store passwords would be outside of the computer
[06:09:14] <ggoebel> moon-child: change the random seed...
[06:09:18] <ggoebel> my Int $seed = qqx{od -An -N3 -i /dev/random}.Int; srand($seed); ("0".."z").roll(15).join.say
[06:09:19] <evalable6> ggoebel, rakudo-moar efbf8ea4f: OUTPUT: «EsOLCAYl^nBB3Dk␤»
[06:10:01] <moon-child> ggoebel: seed is irrelevant; what matters is the rng
[06:10:35] <ggoebel> surprised that worked... figured shell quoting would be disabled
[06:10:55] <moon-child> i think it runs in a sandbox
[06:11:22] <moon-child> you can do this anyway
[06:11:25] <moon-child> m: use NativeCall; sub system(Str) is native {*}; system "echo hi"
[06:11:26] <camelia> rakudo-moar b5fb3628b: OUTPUT: «hi␤»
[06:13:36] <moon-child> and I think there are cpu time limits too, so good luck mining bitcoin
[06:14:48] <Voldenet> m: "/proc/1/cgroup".IO.slurp.say
[06:14:48] <camelia> rakudo-moar b5fb3628b: OUTPUT: «12:blkio:/␤11:rdma:/␤10:devices:/init.scope␤9:cpuset:/␤8:memory:/␤7:hugetlb:/␤6:freezer:/␤5:pids:/init.scope␤4:perf_event:/␤3:cpu,cpuacct:/␤2:net_cls,net_prio:/␤1:name=systemd:/init.scope␤0::/init.scope␤␤»
[06:16:53] <Voldenet> lucs: obviously encrypted, hashes are not very usable in password manager
[06:19:38] *** Joins: lukey (~lukey@bb119-74-231-40.singnet.com.sg)
[06:24:44] *** Quits: lukey (~lukey@bb119-74-231-40.singnet.com.sg) (Quit: Connection closed)
[07:24:44] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:24:44] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:24:44] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:24:44] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:24:44] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:24:44] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:24:44] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:24:44] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:24:44] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:24:44] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:24:44] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:24:45] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:24:45] *** Quits: vrurg_ (~vrurg@45.74.95.181) (Read error: Connection reset by peer)
[07:24:45] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:24:45] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:24:45] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:24:45] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:24:45] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:24:45] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:24:45] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:24:58] *** Joins: vrurg (~vrurg@45.74.95.181)
[07:25:13] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[07:25:22] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[07:26:31] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[07:26:32] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[07:26:33] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[07:26:41] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[07:26:46] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[07:26:48] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[07:26:57] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[07:27:18] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[07:27:45] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[07:27:47] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[08:25:32] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[08:25:40] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[08:26:46] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[08:27:13] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[08:27:40] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[08:56:54] *** Joins: epony (epony@user/epony)
[09:07:32] *** Quits: p6steve (~stephenro@host81-157-30-219.range81-157.btcentralplus.com) (Ping timeout: 240 seconds)
[09:10:03] *** Joins: p6steve (~stephenro@host81-157-30-219.range81-157.btcentralplus.com)
[09:24:23] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 268 seconds)
[09:25:45] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[09:26:22] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[09:35:57] *** Quits: Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Ping timeout: 240 seconds)
[09:37:31] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:42:29] *** Joins: Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[09:44:47] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[09:45:58] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 260 seconds)
[09:46:38] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[10:11:53] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[10:53:08] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:53:56] *** Joins: seednode (~seednode@user/seednode)
[11:46:31] *** Joins: stoned75 (~seb@78.203.129.116)
[12:05:57] *** Quits: Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Ping timeout: 240 seconds)
[12:20:44] *** Quits: xinming (~xinming@115.219.38.26) (Ping timeout: 268 seconds)
[12:22:27] *** Joins: xinming (~xinming@115.219.33.162)
[12:29:42] *** Quits: xinming (~xinming@115.219.33.162) (Ping timeout: 256 seconds)
[12:30:04] *** Joins: xinming (~xinming@115.219.33.162)
[12:38:43] <Geth> ¦ doc: 487b278bfe | (JJ Merelo)++ | doc/Type/Match.pod6
[12:38:43] <Geth> ¦ doc: Fixes :bug: describing correctly how to works. Closes #4000
[12:38:43] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/487b278bfe
[12:38:46] <linkable6> Link: https://docs.raku.org/type/Match
[12:39:31] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[12:39:44] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[13:17:18] *** Quits: xinming (~xinming@115.219.33.162) (Ping timeout: 256 seconds)
[13:17:41] *** Joins: xinming (~xinming@115.219.33.162)
[13:46:46] *** Quits: xinming (~xinming@115.219.33.162) (Ping timeout: 256 seconds)
[13:47:09] *** Joins: xinming (~xinming@115.219.33.162)
[14:01:34] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:02:06] *** Joins: holyghost (~holyghost@2a02:a03f:64c8:9200:7d56:46d3:2b1d:99cb)
[14:36:47] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:44:09] *** Joins: lichtkind_ (~lichtkind@p200300d0a722726779347d929697d081.dip0.t-ipconnect.de)
[15:18:56] *** Joins: frost (~frost@user/frost)
[15:38:23] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:40:45] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:41:15] *** Joins: fgmachado (~fgmachado@179.152.96.194)
[15:42:22] *** Quits: fgmachado (~fgmachado@179.152.96.194) (Client Quit)
[16:26:14] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[16:44:53] *** Joins: getimiskon (~getimisko@2a02:587:a024:7200:32d1:6bff:fe91:3cc9)
[17:03:16] *** Quits: frost (~frost@user/frost) (Ping timeout: 245 seconds)
[17:09:17] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[17:10:46] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 256 seconds)
[17:22:27] *** Quits: discord-raku-bot (~RakuIRC@95.90.183.75) (Remote host closed the connection)
[17:22:33] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[17:28:08] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[17:46:22] <Juerd> I'm not going to renew the domain name perl6.nl - someone once provided an IP to keep it active, but there's no longer any perl6/raku site configured on that IP and I forgot who it was. I don't think anyone uses this domain for anything anymore.
[17:46:43] <Juerd> If anyone wants to "rescue" this domain, contact me please :)
[17:46:53] <Juerd> It will expire in March
[17:47:28] <Juerd> (The domain name has been used for feather.perl6.nl back in the pugs days)
[18:06:50] *** Joins: Darkcoal (~user@139.64.29.83)
[18:07:04] *** Quits: Darkcoal (~user@139.64.29.83) (Client Quit)
[18:10:00] *** Joins: Darkcoal (~user@2001:16a2:7709:f400:846d:c7d1:8468:2ddd)
[18:14:02] *** Joins: Darkcoal_ (~user@139.64.29.83)
[18:14:19] *** Quits: Darkcoal_ (~user@139.64.29.83) (Client Quit)
[18:14:50] *** Quits: Darkcoal (~user@2001:16a2:7709:f400:846d:c7d1:8468:2ddd) (Client Quit)
[18:15:56] <SmokeMachine> .tell patrick sorry I haven’t seen your issue before, but I’ve just answered: https://github.com/FCO/Red/issues/539#issuecomment-997403720
[18:15:58] <tellable6> SmokeMachine, I haven't seen patrick around, did you mean patrickb?
[18:16:25] <SmokeMachine> tellable6: yes
[18:16:26] <tellable6> SmokeMachine, I haven't seen yes around, did you mean ens?
[18:16:33] <SmokeMachine> :(
[18:16:50] <SmokeMachine> .tell patrickb sorry I haven’t seen your issue before, but I’ve just answered: https://github.com/FCO/Red/issues/539#issuecomment-997403720
[18:16:51] <tellable6> SmokeMachine, I'll pass your message to patrickb
[18:18:25] *** Quits: holyghost (~holyghost@2a02:a03f:64c8:9200:7d56:46d3:2b1d:99cb) (Quit: This computer has gone to sleep)
[18:26:26] <SmokeMachine> .tell patrickb also this one: https://github.com/FCO/Red/issues/538#issuecomment-997405831
[18:26:28] <tellable6> SmokeMachine, I'll pass your message to patrickb
[18:26:36] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[18:55:33] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[19:19:39] *** Quits: leah2 (~leah@vuxu.org) (Remote host closed the connection)
[19:21:55] *** Joins: leah2 (~leah@vuxu.org)
[19:42:18] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[20:06:49] *** Joins: holyghost (~holyghost@2a02:a03f:64c8:9200:7d56:46d3:2b1d:99cb)
[20:14:39] *** Joins: mexen (uid495612@user/mexen)
[20:19:36] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[21:05:17] *** Quits: Guest72 (~Guest7@76-14-105-39.rk.wavecable.com) (Quit: Ping timeout (120 seconds))
[21:30:48] *** Quits: stoned75 (~seb@78.203.129.116) (Quit: leaving)
[21:34:48] *** Joins: ab5tract (~ab5tract@ip-213-127-116-109.ip.prioritytelecom.net)
[21:34:58] <ab5tract> good *, all
[21:35:12] <ab5tract> quick question: what is the Texas version of https://docs.raku.org/language/setbagmix#infix_%E2%89%A2
[21:37:20] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:41:09] <lizmat> !(>)
[21:41:15] <lizmat> ab5tract ^^
[21:41:27] <lizmat> there is no specific one, just the negation of (>)
[21:41:45] <ab5tract> negation of (==), right?
[21:42:33] <ab5tract> I can't seem to get my version of Comma to accept that syntax, or the unicode version. though the code runs fine
[21:42:35] <lizmat> ah, oops, not enough on that page...  yes   :-)
[21:42:47] <lizmat> then time to make a Comma issue ?
[21:52:43] <thowe> does someone here edit "Learn Raku in Y minutes"?  I've found a minor mistake.
[21:53:58] <thowe> nm, looks like I should report on github
[22:01:35] <ab5tract> lizmat : I should update to the latest version first. been a bit lazy about it :0
[22:02:29] <ab5tract> lizmat : are object hashes still a separate thingy? I was expecting %hash-int-to-sets.invert to DWIM
[22:03:05] <lizmat> code?
[22:04:12] <ab5tract> https://gist.github.com/ab5tract/dec2907ba2db4157c50a2dc1b1614b74
[22:06:19] <ab5tract> lizmat ^^ (just bumping in case you didn't see already)
[22:06:36] <ab5tract> brb, switching OS
[22:07:12] *** Quits: ab5tract (~ab5tract@ip-213-127-116-109.ip.prioritytelecom.net) (Quit: Connection closed)
[22:17:14] *** Joins: ab5tract (~ab5tract@ip-213-127-116-109.ip.prioritytelecom.net)
[22:18:02] <ab5tract> hmm.. no link to the IRC chat logs on https://raku.org/community/
[22:18:46] <ab5tract> lizmat I'm unable to check whether you already responded :/
[22:20:01] <lizmat> https://logs.liz.nl/raku/live.html
[22:21:19] <lizmat> I didn't respond yet, as I'm not sure what you're trying to achieve?
[22:22:14] <lizmat> so you're splitting on single space, and then combing on word characters and then combing again?
[22:22:23] <lizmat> sorry, now my time to be afk, dinner&
[22:26:55] <ab5tract> lizmat: ignore those things. I had to put the extra comb in there because i was getting sets with "" as an element. very bizarre and it definitely felt like a hack
[22:27:23] <ab5tract> what I am trying to achieve is having a lookup hash with Sets as keys
[22:28:21] <ab5tract> hence what I meant when expecting `%hash-of-int-to-set.invert` DWIM -- I am expecting to have a hash with sets as the keys, not a stringified version of the set
[22:36:50] <guifa> ab5tract: by default, my %foo is basically my Any %foo{Str}
[22:37:12] <guifa> my Any %foo{Set} 
[22:37:29] <guifa> if I'm getting what you're trying to do 
[22:37:39] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:38:58] <ab5tract> guifa it's more about a feeling that .invert should preserve the type of values
[22:39:18] <guifa> ab5tract: that's fair
[22:39:38] <ab5tract> it would break the ecosystem, I'm sure
[22:40:30] <guifa> actually
[22:40:33] <guifa> .invert does
[22:40:40] <guifa> It's the storing into the hash that coerces
[22:40:54] <guifa> m: my Int %foo = a => 1, b => 2; say %foo.invert.keys.head.WHAT;
[22:40:54] <camelia> rakudo-moar b5fb3628b: OUTPUT: «(Int)␤»
[22:41:25] <guifa> my Int %foo = a => 1, b => 2;  my %bar = %foo.invert; say %bar.keys.head.WHAT;
[22:41:26] <evalable6> guifa, rakudo-moar efbf8ea4f: OUTPUT: «(Str)␤»
[22:41:46] <ab5tract> m: my %h = 0 => Set.new(4, 5); dd %h.invert
[22:41:47] <camelia> rakudo-moar b5fb3628b: OUTPUT: «(Set.new(5,4) => "0",).Seq␤»
[22:42:11] <ab5tract> m: my %h = 0 => Set.new(4, 5); my %oh = %h.invert; dd %oh
[22:42:11] <camelia> rakudo-moar b5fb3628b: OUTPUT: «Hash %oh = {"4 5" => "0"}␤»
[22:43:21] <ab5tract> guifa nice to see that! however, I would still consider the above a bit of a WAT.
[22:43:58] <ab5tract> m: my %h = 0 => Set.new(4, 5); my Int %oh{Set} = %h.invert; dd %oh
[22:43:58] <camelia> rakudo-moar b5fb3628b: OUTPUT: «Type check failed in assignment to %oh; expected Int but got Str ("0")␤  in block <unit> at <tmp> line 1␤␤»
[22:44:08] <ab5tract> m: my %h = 0 => Set.new(4, 5); my Any %oh{Set} = %h.invert; dd %oh
[22:44:08] <camelia> rakudo-moar b5fb3628b: OUTPUT: «Hash[Any,Set] %oh = (my Any %{Set} = Set.new(4,5) => "0")␤»
[22:44:39] <ab5tract> still, this does resolve my current issue :)
[22:55:37] <ab5tract>  m: dd "acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab | cdfeb fcadb cdfeb cdbaf".split(" | ")[0].split(' ').map: *.comb(/(\w+)/).split('').grep(* ~~ /\w/).Set
[22:55:38] <camelia> rakudo-moar b5fb3628b: OUTPUT: «(Set.new("d","c","e","g","f","a","b"), Set.new("b","e","d","c","f"), Set.new("a","g","d","f","c"), Set.new("c","f","a","d","b"), Set.new("d","b","a"), Set.new("d","a","b","e","f","c"), Set.new("f","b","d","c","e","g"), Set.new("e","b","f","a"), Set.ne…»
[22:56:02] <ab5tract>  m: dd "acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab | cdfeb fcadb cdfeb cdbaf".split(" | ")[1].split(' ').map: *.comb(/(\w+)/).split('').Set
[22:56:02] <camelia> rakudo-moar b5fb3628b: OUTPUT: «(Set.new("d","e","b","","f","c"), Set.new("c","b","","a","d","f"), Set.new("d","b","c","","f","e"), Set.new("b","","f","c","d","a")).Seq␤»
[22:57:18] <ab5tract> lizmat ^^ here you can see the issue with unexpected "" s in the sets
[22:58:15] <lizmat> m: dd "foo".split("") 
[22:58:16] <camelia> rakudo-moar b5fb3628b: OUTPUT: «("", "f", "o", "o", "").Seq␤»
[22:58:22] <lizmat> isn't that the issue ^^  ?
[23:19:20] <ggoebel> m: dd 'acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab | cdfeb fcadb cdfeb cdbaf'.split(' | ')[0].comb(/\w+/).map: *.comb.Set
[23:19:20] <camelia> rakudo-moar b5fb3628b: OUTPUT: «(Set.new("g","d","b","f","a","c","e"), Set.new("c","f","b","d","e"), Set.new("d","f","g","c","a"), Set.new("f","b","c","d","a"), Set.new("d","b","a"), Set.new("e","a","c","b","d","f"), Set.new("b","d","f","g","c","e"), Set.new("b","f","e","a"), Set.ne…»
[23:22:51] <ggoebel> m:  dd "foo".split("", skip-empty)
[23:22:52] <camelia> rakudo-moar b5fb3628b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    skip-empty used at line 1␤␤»
[23:22:58] <ggoebel> m:  dd "foo".split("", :skip-empty)
[23:22:59] <camelia> rakudo-moar b5fb3628b: OUTPUT: «("f", "o", "o").Seq␤»
[23:30:09] <ab5tract> ggoebel, lizmat : uff.. yes that is exactly the issue. no idea why I didn't remember that .comb is what I wanted, not split('')
[23:30:29] <ab5tract> thanks for the reminder of :skip-empty ggoebel
[23:33:17] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[23:37:18] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[23:39:06] *** Joins: Sgeo (~Sgeo@user/sgeo)
