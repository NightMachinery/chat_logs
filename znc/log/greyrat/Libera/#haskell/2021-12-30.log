[00:00:15] <int-e> > last [ 0.01, 0.02 .. 0.1 ]
[00:00:17] <lambdabot>  9.999999999999999e-2
[00:00:51] <int-e> > last [ 0.01, 0.03 .. 0.1 ]
[00:00:52] <lambdabot>  0.10999999999999997
[00:01:01] <EvanR> > showFFloat (Just 3) 9.999999999999999e-2 ""
[00:01:03] <lambdabot>  "0.100"
[00:01:11] <EvanR> > showFFloat (Just 33) 9.999999999999999e-2 ""
[00:01:13] <lambdabot>  "0.099999999999999990000000000000000"
[00:01:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:01:50] <EvanR> well that's basically 0.1
[00:02:03] <EvanR> ship it
[00:03:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[00:04:59] <g> int-e: thinking in terms of lattice points makes sense to me for the size of a 0D box being 1. What's the interpretation for coordinates?
[00:05:37] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:06:15] <int-e> @check \a b -> let a' = fromIntegral (getPositive a); b' = fromIntegral (getPositive b) in last [0,a'/b'..a'] <= a'
[00:06:16] *** Joins: alx741 (~alx741@157.100.93.160)
[00:06:17] <lambdabot>  *** Failed! Falsifiable (after 50 tests and 2 shrinks):
[00:06:17] <lambdabot>  Positive {getPositive = 29} Positive {getPositive = 27}
[00:06:41] <int-e> g: product [] = 1
[00:06:57] <EvanR> for the 0D box of 1 you'd need the coordinates of both ends
[00:07:08] <EvanR> instead of coordinate of center
[00:07:24] <g> 0D boxes don't have coordinates
[00:07:25] <int-e> there are no coordinates
[00:07:33] <EvanR> oh, I mixed it up with 1D
[00:07:52] <g> int-e: I agree that it "is" 1. I'm trying to think of what that"means"
[00:08:16] <int-e> g: well, your measure is discrete here; the set containing the sole point has measure 1
[00:08:18] <g> The best I can do is that 1 is the identify element?
[00:08:24] <int-e> the empty set has measure 0
[00:08:25] <EvanR> it's because our cuboids of whatever dimension are all slices of an infinite dimensional space of hypercuboids
[00:08:26] * int-e shrugs
[00:08:49] <EvanR> and the smallest of any of them has size 1
[00:09:21] <EvanR> flatland
[00:09:41] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Ping timeout: 268 seconds)
[00:10:49] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:11:17] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 240 seconds)
[00:11:39] <int-e> g: it really comes down to the same thing that motivates product [] = 1: we want product (xs ++ ys) = product xs * product ys, and we want the same thing when we split the dimensions of a cuboid into two independent parts (ala R^(n+m) = R^n x R^m).
[00:11:55] *** Joins: pavonia (~user@user/siracusa)
[00:12:18] <int-e> Counting is a bit easier for 0D, I agree.
[00:12:31] <int-e> (as intuition)
[00:15:38] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0::7e04)
[00:15:55] *** Quits: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com) (Ping timeout: 256 seconds)
[00:17:17] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:18:26] <EvanR> given n D set of (size 1) cuboids, there's an n-1 D slice one for each 'i', each one still has size 1. The zero D slice ends up being like Bool, size 1 or size 0 (outside a cuboid)
[00:19:18] <EvanR> screw R^n xD
[00:19:48] <EvanR> banach tarski paradox not invited
[00:20:56] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[00:21:59] <g> I guess part of the confusion is that with counting the unit is the same; you're counting points
[00:22:47] <g> But under the other interpretation its lengths, areas, volumes, etc
[00:23:27] <g> So then with 0D it's not just 1, but it's 1 unit^0
[00:23:31] <int-e> yes, you get n-dimensional measures for various n
[00:24:16] <int-e> I feel it helps.
[00:24:19] * int-e shrugs
[00:26:02] <int-e> (As usual the thing about intuitions is that there's no right one... whatever works for you is best for you.)
[00:26:06] <g> So it's very literally a dimensionless number :)
[00:27:03] <EvanR> 3 m^2, 3 m^1, 3 xD
[00:27:37] <int-e> 3 rad, almost half a circle
[00:31:08] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:31:16] <InternetCitizen> ,lambda 1
[00:31:33] <InternetCitizen> how do I use the bot?
[00:32:07] <geekosaur> what are you trying to do with it?
[00:32:29] <InternetCitizen> write an example for my question :)
[00:33:04] <geekosaur> > (\x -> x+1) 3
[00:33:05] <lambdabot>  4
[00:33:26] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[00:33:45] <int-e> (you can test these in private chat (/query lambdabot  in a typical irc client))
[00:33:52] <ProfSimm> Consider how we humans interact with one another. We more often than not don't have clear input and output. We have a partially abstract input (i.e. with placeholders) and we're told to solve and fill-in the placeholders. We do this when given a paper form, or a test.
[00:34:05] <ProfSimm> Is this more fundamental than a function with input and output I wonder?
[00:34:13] <InternetCitizen>  let lengthl' xs = foldl (const (+ 1)) 0 xs in lengthl' [1, 2, 3]
[00:34:27] <InternetCitizen> let lengthr' xs = foldr (const (+ 1)) 0 xs in lengthr' [1, 2, 3]
[00:34:44] <int-e> InternetCitizen: the prefix is '> '
[00:34:51] <geekosaur> more abstract, I'd say. humans are abstraction machines
[00:34:57] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[00:34:57] <InternetCitizen> >let lengthl' xs = foldl (const (+ 1)) 0 xs in lengthl' [1, 2, 3]
[00:35:06] <geekosaur> the space was not there for show
[00:35:06] <pragma-> I'm just a walking Chinese Room.
[00:35:07] <InternetCitizen> > let lengthl' xs = foldl (const (+ 1)) 0 xs in lengthl' [1, 2, 3]
[00:35:09] <lambdabot>  4
[00:35:14] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[00:35:17] <InternetCitizen> > let lengthr' xs = foldr (const (+ 1)) 0 xs in lengthr' [1, 2, 3]
[00:35:19] <lambdabot>  3
[00:35:46] <InternetCitizen> I guess you know what my question is, why does one work and the other doesn't?
[00:35:50] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[00:35:51] *** Joins: alx741 (~alx741@181.199.42.79)
[00:36:01] <int-e> InternetCitizen: look at the types?
[00:36:08] <InternetCitizen> the elements in the list shouldn't matter, let alone their order
[00:36:24] <int-e> well, one of the functions violates that expectations
[00:36:26] <int-e> -s
[00:36:45] <EvanR> that order matters is what distinguishes a list from a set
[00:37:07] <int-e> :t foldl (const (+ 1)) 0
[00:37:09] <lambdabot> (Foldable t, Num b) => t b -> b
[00:37:11] <int-e> :t foldr (const (+ 1)) 0
[00:37:12] <lambdabot> (Foldable t, Num b1) => t b2 -> b1
[00:37:14] <EvanR> that's not what causes the type error though
[00:37:32] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[00:37:46] <int-e> (oops... the former restricts the list type... that's a strong hint as to what's going on)
[00:38:28] <InternetCitizen> it's somehow adding the elements of the list into the acc
[00:38:41] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 268 seconds)
[00:38:45] <int-e> :t foldl
[00:38:45] <InternetCitizen> oh wait!
[00:38:46] <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
[00:38:47] <int-e> :t foldr
[00:38:48] <lambdabot> Foldable t => (a -> b -> b) -> b -> t a -> b
[00:39:03] <InternetCitizen> I just typed the same thing into my GHCi ...
[00:39:06] <int-e> note also that those two types are different, which provides further clues.
[00:39:23] <InternetCitizen> I thought the two were different in their order of traversal!
[00:39:28] <geekosaur> nope
[00:39:42] <geekosaur> common misapprehension
[00:39:51] <geekosaur> they're different in their order of *association*
[00:40:03] <geekosaur> a list can only be traversed in one direction
[00:40:21] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[00:40:41] <geekosaur> > foldl f z [a,b,c]
[00:40:41] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[00:40:43] <lambdabot>  f (f (f z a) b) c
[00:40:45] <InternetCitizen> this makes more sense now, I was mistaken to think one of them use tail recursion or some black magic
[00:40:47] <geekosaur> > foldr f z [a,b,c]
[00:40:49] <lambdabot>  f a (f b (f c z))
[00:41:03] <EvanR> one of them does use tail recursion 
[00:41:08] <EvanR> @src foldl
[00:41:08] <lambdabot> foldl f z []     = z
[00:41:08] <lambdabot> foldl f z (x:xs) = foldl f (f z x) xs
[00:41:21] *** Joins: alx741 (~alx741@157.100.93.160)
[00:41:57] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[00:42:00] <EvanR> make sure you use lazy evaluation to understand that
[00:44:17] <InternetCitizen> well in `f (f (f z a) b) c` `f z a` is evaluated first, I'm just not sure if it's evaluated before or after building the whole expression
[00:44:29] <InternetCitizen> after probably
[00:44:36] <InternetCitizen> @src foldr
[00:44:36] <lambdabot> foldr f z []     = z
[00:44:36] <lambdabot> foldr f z (x:xs) = f x (foldr f z xs)
[00:44:53] <EvanR> f z a may not even be evaluated, it depends
[00:45:16] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:45:31] <g> InternetCitizen: no, f z a isn't evaluated first in that expression
[00:46:05] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:46:36] <g> It's only evaluated if f (f z a) b needs to evaluate it
[00:47:06] <geekosaur> note that f may be lazy in its first parameter
[00:47:10] <EvanR> that expression by itself doesn't reflect foldl's limitation, that you even if you don't look at c, you can't do f _ c until going to the end of the list
[00:51:14] <EvanR> and the nested stuff in the first parameter has to be prepared in case you look at it, unlike foldr which can bypass all that
[00:51:35] <jackdk> http://data.tmorris.net/talks/list-folds/b30aa0fdff296c731bc5b1c824adf1d02b3b69d9/list-folds.pdf foldr performs constructor replacement, foldl is basically a loop
[00:51:49] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[00:52:33] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[00:55:06] <EvanR> after internalizing lazy evaluation you can tell from the code there for foldr that you can get instant gratification, since it applies your f immediately, and you're free to ignore or not the "accumulator" (is there a better name for that thing)
[00:55:26] *** Joins: shailangsa_ (~shailangs@host86-186-142-101.range86-186.btcentralplus.com)
[00:55:37] <EvanR> foldl is frustrated by looping to the end of the list first
[00:55:38] <geekosaur> I think of it as state, not an accumulator
[00:56:37] <InternetCitizen> > myFoldr f acc (x:xs) = myFoldr f (f x acc) xs
[00:56:39] <lambdabot>  <hint>:1:22: error: parse error on input ‘=’
[00:56:49] *** Quits: rito_ (~rito_gh@45.112.243.151) (Quit: Leaving)
[00:56:56] <InternetCitizen> > let myFoldr f acc (x:xs) = myFoldr f (f x acc) xs
[00:56:58] <lambdabot>  <no location info>: error:
[00:56:58] <lambdabot>      not an expression: ‘let myFoldr f acc (x:xs) = myFoldr f (f x acc) xs’
[00:56:59] <EvanR> @let doesThisWork = 3
[00:57:00] <lambdabot>  Defined.
[00:57:04] <EvanR> > doesThisWork
[00:57:06] <lambdabot>  3
[00:57:20] <InternetCitizen> @let myFoldr f acc (x:xs) = myFoldr f (f x acc) xs
[00:57:21] <lambdabot>  Defined.
[00:57:29] <InternetCitizen> @let my_foldr f acc [] = acc
[00:57:30] <lambdabot>  Defined.
[00:57:44] <InternetCitizen> couldn't foldr be implemented this way too?
[00:57:53] <EvanR> that's foldl
[00:58:40] <InternetCitizen> but f takes x first and acc second
[00:58:41] <EvanR> in myFoldr f (f x acc) xs, the f x acc is not evaluated first (potentially not at all)
[00:59:17] <EvanR> the order of arguments doesn't matter as much as your recursion
[00:59:35] *** Quits: hololeap (~hololeap@user/hololeap) (Quit: Bye)
[01:03:37] <InternetCitizen> @let myFoldr f acc (x:xs) = f (myFoldr f acc xs) x
[01:03:38] <lambdabot>  /sandbox/tmp/.L.hs:159:1: error: [-Woverlapping-patterns, -Werror=overlappin...
[01:03:38] <lambdabot>      Pattern match is redundant
[01:03:38] <lambdabot>      In an equation for ‘myFoldr’: myFoldr f acc (x : xs) = ...
[01:03:50] *** Joins: alx741 (~alx741@157.100.93.160)
[01:03:59] <EvanR> @undefine
[01:03:59] <lambdabot> Undefined.
[01:04:03] <EvanR> try again
[01:04:14] <InternetCitizen> @let myFoldr f acc (x:xs) = f (myFoldr f acc xs) x
[01:04:15] <lambdabot>  Defined.
[01:04:23] <InternetCitizen> @let myFoldr f acc [] = []
[01:04:24] <lambdabot>  Defined.
[01:04:53] <InternetCitizen> so we can define them both in both orders of f's arguments
[01:04:56] <EvanR> that doesn't seem right
[01:05:19] <InternetCitizen> > myFoldr (+) 0 [1, 2, 3]
[01:05:20] <EvanR> use ; to put both cases in the def at the same time
[01:05:21] <lambdabot>  error:
[01:05:21] <lambdabot>      • No instance for (Num [()]) arising from a use of ‘e_10123’
[01:05:21] <lambdabot>      • In the expression: e_10123
[01:05:48] <InternetCitizen> @let myFoldr f acc [] = []; let myFoldr f acc (x:xs) = f (myFoldr f acc xs) x
[01:05:49] <lambdabot>  Parse failed: Parse error: EOF
[01:05:54] <EvanR> i.e. foo 0 = 1; foo i = i + 1
[01:05:55] <InternetCitizen> @let myFoldr f acc [] = []; let myFoldr f acc (x:xs) = f (myFoldr f acc xs) x;
[01:05:55] <lambdabot>  Parse failed: Parse error: EOF
[01:06:16] <EvanR> @undefine
[01:06:16] <lambdabot> Undefined.
[01:06:40] <EvanR> maybe try this in a source file first and get the bugs out
[01:07:37] <geekosaur> well, some of this is just not using the bot right. @let is not the same as "let", it just defines styuff at "top level" for lambdabot instead of being an expression. note that you never use "let" at top level in a file
[01:08:23] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[01:08:32] <InternetCitizen> > @let ah well it's `myFoldr :: ([a] -> t1 -> [a]) -> t2 -> [t1] -> [a]`
[01:08:34] <lambdabot>  <hint>:1:1: error: parse error on input ‘@’
[01:08:46] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:08:50] <int-e> :t let myFoldr f acc [] = []; myFoldr f acc (x:xs) = f (myFoldr f acc xs) x in myFoldr
[01:08:51] <lambdabot> ([a] -> t1 -> [a]) -> t2 -> [t1] -> [a]
[01:09:13] <geekosaur> now it may be time to switch to /query until you figure out how the bot works
[01:09:21] <int-e> yeah that looks suspicious.
[01:09:41] <int-e> (the type, that is)
[01:09:49] <geekosaur> (and yet again I want to finish the documentation I wrote a decade ago minus the haskell plugins, but I still have nowhere to host it except maybe dropbox)
[01:10:25] <EvanR> InternetCitizen, foldr ought to return various types, not just lists
[01:10:26] <int-e> (note how there's a t2 in just one place... hmm...)
[01:10:26] <geekosaur> of course I could contribute it back and see if it ever shows up in a release…
[01:10:46] <InternetCitizen> :t let myFoldr f acc [] = acc; myFoldr f acc (x:xs) = f (myFoldr f acc xs) x in myFoldr
[01:10:47] <lambdabot> (t1 -> t2 -> t1) -> t1 -> [t2] -> t1
[01:10:53] <EvanR> better
[01:11:47] <InternetCitizen> > let myFoldr f acc [] = acc; myFoldr f acc (x:xs) = f (myFoldr f acc xs) x in myFoldr (+) 0 [1..3]
[01:11:49] <lambdabot>  6
[01:11:53] <int-e> :t foldr . flip
[01:11:54] <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
[01:12:16] <int-e> (it's not quite the standard foldr)
[01:12:33] <EvanR> same thing but takes arguments in another order
[01:12:44] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[01:13:05] <InternetCitizen> yes my question is why does prelude flip the arguments for foldr
[01:13:13] <InternetCitizen> or foldl depending on how you see it
[01:13:38] <int-e> > foldr f z [a,b,c] -- note how the order of the list is preserved in the expression
[01:13:40] <InternetCitizen> it's clearly just as easy to do it this way
[01:13:40] <lambdabot>  f a (f b (f c z))
[01:13:46] <InternetCitizen> ah
[01:13:47] <int-e> > foldl f z [a,b,c] -- ditto
[01:13:49] <lambdabot>  f (f (f z a) b) c
[01:14:41] <EvanR> in the foldr "callback" you can think of "the rest of the fold" being to the right, so it's second
[01:15:04] <EvanR> in foldl it's the opposite
[01:15:05] <_73> could the argument order have to do with making it easier to partially apply foldr?
[01:16:37] <EvanR> yeah it often is easier
[01:16:46] <int-e> _73: for the second and third argument you mean? yes, (a -> b -> b) -> [a] -> b -> b would be harder to partially apply when you want a function from lists
[01:16:50] <EvanR> but just as often my functions are backward xD
[01:17:39] <InternetCitizen> oh so the order the argument reflects the order of evaluation, it's genius
[01:17:41] <int-e> There's also  foldr (:) [] = id  to consider, I guess.
[01:18:07] <EvanR> I'm not sure about that theory
[01:18:50] <EvanR> it's more about which way the associativity leans than order of evaluation
[01:19:15] <EvanR> you should know, laziness lets you play around with evaluation order
[01:21:10] <InternetCitizen> oh right, well the associativity makes for a good mnemonic too
[01:21:14] *** Quits: shailangsa_ (~shailangs@host86-186-142-101.range86-186.btcentralplus.com) (Ping timeout: 268 seconds)
[01:22:09] *** Quits: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net) (Remote host closed the connection)
[01:22:33] *** Joins: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net)
[01:22:51] <EvanR> that slide show linked earlier by jackdk is really good for getting to the practical difference between them, carefully not mentioning any weirdness caused by haskell, and still being technically right xD
[01:25:54] *** Joins: alx741 (~alx741@181.199.42.79)
[01:33:46] <InternetCitizen> the order of the args makes it awkaward to define `reverse` using foldl and it's impossible to do it with foldr
[01:34:18] <EvanR> you should be able to do anything you can do with foldl with foldr
[01:34:22] <InternetCitizen> I consider `reverse = foldl (:) []` a missed opportunity
[01:34:40] <EvanR> > foldl (:) [] [1,2,3,4,5]
[01:34:41] <lambdabot>  error:
[01:34:41] <lambdabot>      • Occurs check: cannot construct the infinite type: a ~ [a]
[01:34:41] <lambdabot>        Expected type: [a] -> [a] -> [a]
[01:35:00] <InternetCitizen> it needs a flipped cons
[01:35:00] <EvanR> > foldl (flip (:)) [] [1,2,3,4,5]
[01:35:03] <lambdabot>  [5,4,3,2,1]
[01:35:17] <EvanR> honestly not a big deal
[01:35:41] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[01:35:49] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[01:35:55] <geekosaur> it could have been defined that way, but keeping the order of parameters makes more sense (see earlier examples)
[01:35:59] <InternetCitizen> I'm joking :^)
[01:36:09] <geekosaur> I mena, it's not a real big opportunity to be missed
[01:36:25] *** Joins: alx741 (~alx741@181.199.42.79)
[01:37:03] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[01:38:00] *** Joins: acidjnk (~acidjnk@pd9e0bdc0.dip0.t-ipconnect.de)
[01:38:19] *** Quits: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com) (Quit: ZNC 1.8.2 - https://znc.in)
[01:41:56] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[01:42:13] <InternetCitizen> > let k x y = 0 in foldl k 0 [1..]
[01:42:19] <lambdabot>  mueval-core: Time limit exceeded
[01:42:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:42:45] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:43:06] <InternetCitizen> hah well clearly I don't understand lazy evaluation
[01:43:24] <EvanR> that one doesn't depend on lazy evaluation actually
[01:43:40] <EvanR> > foldl' (\x y -> 0) 0 [1..]
[01:43:46] <lambdabot>  mueval-core: Time limit exceeded
[01:44:08] <InternetCitizen> > let k x y = 0 in foldr k 0 [1..]
[01:44:10] <lambdabot>  0
[01:44:21] <EvanR> "foldl loops through the list" theory explains why it doesn't work on infinite lists
[01:44:53] <InternetCitizen> > let k x y = 0 in foldr' k 0 [1..]
[01:45:02] <lambdabot>  mueval.real: ExitFailure 1
[01:45:22] <EvanR> i'll let someone else explain that one xD
[01:45:55] <InternetCitizen> I expect foldr to reach in for the end of the list and find nothing
[01:46:06] <InternetCitizen> s,foldr,foldr'
[01:46:27] <EvanR> at least understand foldr first, for real. Since it's way more important
[01:47:12] <geekosaur> foldr may never reach the end of the list
[01:48:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:51:03] <InternetCitizen> > foldr (&&) True ([False] ++ repeat True)
[01:51:05] <lambdabot>  False
[01:51:09] <InternetCitizen> like this?
[01:53:05] <EvanR> > False && (error "bomb")
[01:53:07] <lambdabot>  False
[01:53:20] <EvanR> > False && (let x = x in x)
[01:53:21] <lambdabot>  False
[01:53:52] *** Joins: otherwise (~otherwise@c-73-221-44-172.hsd1.wa.comcast.net)
[01:54:19] <EvanR> that actually works in a lot of languages xD
[01:54:28] <EvanR> in haskell it's just lazy evaluation
[01:56:32] *** Joins: ankhers (e99e97ef8e@2604:bf00:561:2000::2a2)
[01:57:43] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Remote host closed the connection)
[01:58:50] *** Joins: alx741 (~alx741@157.100.93.160)
[01:59:17] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[01:59:17] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[01:59:17] *** finn_elija is now known as FinnElija
[02:00:25] *** Joins: shailangsa (~shailangs@host86-162-150-202.range86-162.btcentralplus.com)
[02:00:46] <dsal> It works in Haskell without having a special case in the language.  :)
[02:00:56] <dsal> You can define your own booleans with your own `and` operator and do the same thing.
[02:01:03] <geekosaur> @src (&&)
[02:01:04] <lambdabot> True  && x = x
[02:01:04] <lambdabot> False && _ = False
[02:05:55] * geekosaur wonders why the second case isn't _ && _ = False
[02:05:59] *** Joins: deadmarshal (~deadmarsh@95.38.115.121)
[02:09:37] <monochrom> That's the religious war between two opposite interpretations of "future-proof".
[02:10:35] *** Quits: deadmarshal (~deadmarsh@95.38.115.121) (Ping timeout: 252 seconds)
[02:10:35] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:11:35] <monochrom> Both camps begin with the premise "if, one day, we add one more constructor to Bool..."  (OK Bool is a silly example but there are real examples.)
[02:11:51] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[02:11:58] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:12:45] <monochrom> One camp concludes "the patterns list all known constructors, so that when I turn on -Wall -Werror, I now receive a full list of functions that have not handled the additional constructor".
[02:13:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:13:11] <geekosaur> ob FileNotFound
[02:13:50] <monochrom> The other camp concludes "there is always a wildcard pattern, so that there is always a fall-through case, the function is total forever and ever".
[02:15:22] <EvanR> putting False explicitly expresses the behavior of && as equational laws and doesn't rely on "case checking order"
[02:15:31] <EvanR> for what that's worth
[02:16:17] *** Quits: zer0bitz (~zer0bitz@196.244.192.57) (Ping timeout: 250 seconds)
[02:17:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[02:17:26] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:21:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[02:22:02] *** Quits: otherwise (~otherwise@c-73-221-44-172.hsd1.wa.comcast.net) (Remote host closed the connection)
[02:24:21] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:26:17] *** Quits: xff0x (~xff0x@2001:1a81:5243:1200:68a2:b42f:5a9a:d157) (Ping timeout: 240 seconds)
[02:26:38] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:26:52] *** Joins: alx741 (~alx741@157.100.93.160)
[02:27:34] *** Joins: xff0x (~xff0x@port-92-193-205-13.dynamic.as20676.net)
[02:31:45] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:35:21] *** Quits: jumper149 (~jumper149@static.6.71.203.116.clients.your-server.de) (Quit: WeeChat 3.3)
[02:36:22] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:45:15] *** Joins: otherwise (~otherwise@c-71-231-39-206.hsd1.wa.comcast.net)
[02:45:55] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:49:25] *** Joins: alx741 (~alx741@157.100.93.160)
[02:50:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[02:51:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:51:16] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[02:51:25] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:51:42] *** Joins: incertia_ (~incertia@24.42.241.219)
[02:52:19] *** Quits: incertia (~incertia@d4-50-26-103.nap.wideopenwest.com) (Ping timeout: 256 seconds)
[02:52:19] *** incertia_ is now known as incertia
[02:54:02] <glguy> int-e: is this the kind of solution you found for 21 using the independence of the two players? https://gist.github.com/glguy/f0352539902343a616663f61b4684f57#file-21-hs-L60
[02:54:29] <glguy> doing that runs in   Time (mean ± σ):      20.7 ms ±   1.5 ms    [User: 3.2 ms, System: 5.2 ms] -- which is a few ms off the RTS startup time
[02:55:58] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[02:55:59] <mjrosenb> ooh, replicateM, I'll need to remember that.
[02:57:19] <mjrosenb> glguy: that looks about like my solution
[02:58:39] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 268 seconds)
[03:00:40] *** Joins: AlexNoo_ (~AlexNoo@94.233.241.181)
[03:00:40] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:03:05] *** Quits: Alex_test (~al_test@178.34.163.120) (Ping timeout: 256 seconds)
[03:03:17] *** Quits: AlexZenon (~alzenon@178.34.163.120) (Ping timeout: 240 seconds)
[03:04:02] *** Quits: AlexNoo (~AlexNoo@178.34.163.120) (Ping timeout: 240 seconds)
[03:05:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:07:03] *** Joins: Alex_test (~al_test@94.233.241.181)
[03:07:43] *** Joins: AlexZenon (~alzenon@94.233.241.181)
[03:08:19] <otherwise> it seems like type signature for length should show a list as the input. but it does not. I think this has to do with the nature of a foldable being applied one element at a time, but regardless of that it still takes a list as the input, right?
[03:08:28] <otherwise> :t length
[03:08:30] <lambdabot> Foldable t => t a -> Int
[03:08:37] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[03:08:47] <otherwise> length 3
[03:08:52] <otherwise> > length 3
[03:08:54] <lambdabot>  error:
[03:08:54] <lambdabot>      • No instance for (Num [a0]) arising from the literal ‘3’
[03:08:54] <lambdabot>      • In the first argument of ‘length’, namely ‘3’
[03:09:17] <otherwise> > length 3:[]
[03:09:19] <lambdabot>  error:
[03:09:19] <lambdabot>      • No instance for (Num [a0]) arising from the literal ‘3’
[03:09:19] <lambdabot>      • In the first argument of ‘length’, namely ‘3’
[03:09:26] <geekosaur> parentheses
[03:09:26] <otherwise> > length (3:[])
[03:09:28] <lambdabot>  1
[03:09:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[03:09:53] <geekosaur> what it shows is "t a", where t is any Foldable. Lists are just one type of Foldable
[03:10:11] <geekosaur> you can, btw, write list types that way as well
[03:10:21] <geekosaur> :t [] Int
[03:10:22] <lambdabot> error:
[03:10:22] <lambdabot>     • Data constructor not in scope: Int
[03:10:22] <lambdabot>     • Perhaps you meant variable ‘int’ (imported from Text.PrettyPrint.HughesPJ)
[03:10:30] <geekosaur> right, duh
[03:10:51] <_73> > length (Just 7)
[03:10:53] <lambdabot>  1
[03:10:56] *** Quits: Bartol_ (~Bartol@user/Bartol) (Remote host closed the connection)
[03:11:06] <geekosaur> anyway `[] Int` is a valid way to write `[Int]` and looks more like the definition using Foldable
[03:11:25] <geekosaur> with t ~ [] (you can think of ~ as equality for types)
[03:11:57] <geekosaur> > length Nothing
[03:11:59] <lambdabot>  0
[03:13:26] <otherwise> okay that is making more sense.
[03:13:34] <EvanR> otherwise, at some point length only worked on lists. Now it's more general. Same as sort works on list of anything with an Ord instance, not just [Int] or [Float]
[03:13:43] <EvanR> :t sort
[03:13:45] <lambdabot> Ord a => [a] -> [a]
[03:14:41] <EvanR> just that t in Foldable t is a type constructor so it's applied to something
[03:15:10] <otherwise> I struggle with the dissparate documentation. If I want to find the type for foldl, I type :t foldl in ghci, then I can type :doc foldl to get more valuable information, but then there is a schism. How do I find out what foldable t is? there is no command for pulling up documentation on that.
[03:15:29] <geekosaur> t is whatever Foldable you choose
[03:15:40] <EvanR> :i Foldable
[03:15:44] <geekosaur> you can use :info Foldable to find types with Foldable instances
[03:15:58] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[03:16:43] <EvanR> :doc Foldable
[03:16:47] <EvanR> cool beans
[03:16:52] <geekosaur> also that list will get longer as you import more things
[03:18:20] <otherwise> oh, I just didnt capitalize foldable ('smacks forhead')
[03:18:48] <otherwise> also I forgot about :i
[03:18:57] <geekosaur> conceptually, a Foldable type is any type that can be flattened to a list
[03:19:00] *** Joins: alx741 (~alx741@181.199.42.79)
[03:19:01] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7898:e7cb:a448:daff) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:19:59] <monochrom> Eventually you need to migrate to the web browser and read the HTML doc version. There is an online copy and there is also a copy on your disk.
[03:20:42] <mjrosenb> I don't think I've ever looked at the copy on my disk
[03:20:47] <monochrom> Doing everything at the REPL is self-defeating, given that "REPL" in this case means not exceeding a VT100 via a 300-baud modem.
[03:20:54] <EvanR> > toList ('a','b') -- horrible example of Foldable converting something to a list xD
[03:20:55] <lambdabot>  "b"
[03:21:10] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7898:e7cb:a448:daff)
[03:21:14] <mjrosenb> although, that would probably solve the problem of "the thing I get when I search for Data.Map is the docs for containers-0.4.0.0"
[03:21:20] <geekosaur> the instance everyone loves to hate
[03:21:32] <monochrom> I mean, it's not like ghci is equivalent to DrRacket or Mathematica notebooks.
[03:21:39] <geekosaur> mjrosenb, there's usually a link at the top that will take you to the latest version
[03:21:57] *** Quits: max22- (~maxime@2a01cb0883359800f9d8f30ac05a4f67.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:22:03] <geekosaur> although if what it shows you is old enough there won't be. but you can take that itself as a warning
[03:22:40] *** Quits: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net) (Remote host closed the connection)
[03:22:50] <geekosaur> also, try searching hoogle instead of a general search engine
[03:24:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 268 seconds)
[03:24:33] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[03:27:38] <Henson> ok, I figured some things out with the problem I was having.  I got rid of TVars and used MVars, and the same problems happens, so it's not the TVars or MVars that's the problem.  It's also not the TVar doubly-linked list either.  I have a thread that captures images from the cameras and puts them into the captured images list (either in an MVar, TVar, or TVar linked list).  I thought...
[03:28:48] <Henson> that the problem was with laziness and the camera images not being evaluated.  When printing out the image size everything worked perfectly.  However, it doesn't have to print anything related to the image, just printing /something/ from the thread is enough to make it work.  If the thread doesn't print anything, it's like it doesn't even run properly and gets all jammed up.  Is there anything...
[03:29:09] <Henson> I thought investigate with this threading problem (using the async library) where it doesn't seem like the thread loop is running reliably?
[03:29:22] <Henson> I thought investigate -> I should investigate
[03:29:32] <geekosaur> if the thread is defined incorrectly, all it may do is create a thunk that gets forced later
[03:30:03] <geekosaur> this is a common mistake with concurrency in Haskell
[03:30:16] <Henson> how would a thread be defined incorrectly?
[03:30:33] <geekosaur> generally its operations are too lazy
[03:31:17] <Henson> would doing a single putStr "." to fix the problem be something that would be a hallmark of this kind of problem?
[03:31:33] <geekosaur> it can be, yes
[03:31:36] *** Quits: vglfr (~vglfr@88.155.24.19) (Ping timeout: 245 seconds)
[03:31:39] <Henson> ok, that might be what's going on
[03:31:58] <geekosaur> if that forces everything else to happen instead of being passed back as one big unevaluated thunk
[03:32:10] *** Joins: vglfr (~vglfr@88.155.24.19)
[03:32:45] <geekosaur> at this point, since we can't see the code, it might be best to point you to
[03:32:50] <geekosaur> @where parconc
[03:32:50] <lambdabot> https://www.safaribooksonline.com/library/view/parallel-and-concurrent/9781449335939/
[03:34:10] <EvanR> Henson, btw, are you using unsafePerformIO anywhere?
[03:34:11] <Henson> the thread is just a function that calls a C function to get an image from the camera, then puts that image onto the end of a list in an MVar.  I just call "handle <- async functionName" to get it rolling, then later "cancel handle" it.
[03:34:37] <EvanR> or unsafeInterleaveIO
[03:35:04] <geekosaur> use $! whenh setting the MVar, maybe
[03:35:17] <glguy> mjrosenb: I cleaned up that solution to deal with the off-by-one-turn "error" I introduced and worked around :) now it probably looks even more like yours https://glguy.net/advent/sln_2021_21/Main.html
[03:35:18] <EvanR> because normally when you fork a thread, it definitely runs
[03:35:25] <Henson> EvanR: no, all of the functions calling the camera functions happen in IO.  They're also defined as "foreign import ccall unsafe" which apparently can block the calling thread until the function returns, which I think is resonable.  I don't know if it block the entire runtime, or just the thread calling it.  Each camera has these functions called by a separate Haskell thread.
[03:35:27] <geekosaur> otherwise the MVar ends up a list of thunks to be evaluated later
[03:35:30] <EvanR> regardless of whether someone evaluates something somewhere
[03:35:57] <EvanR> are you using the -threaded flag
[03:36:05] <Henson> EvanR: yeah, even without the printing, the thread does run, but very unreliably and sporadically
[03:36:08] <Henson> EvanR: yes
[03:36:28] <geekosaur> unsafe has a number of side effects, some of which may be unexpected (like preventing garbage collection)
[03:37:11] <geekosaur> and will blokc the runtime if not -threaded and possibly even with -threaded (moral: never use unsafe if it blocks. really.)
[03:37:20] <Henson> geekosaur: should I be using "safe" instead?
[03:38:29] <Henson> geekosaur: setting the MVar like this: putMVar $! mvarName mvarContents
[03:38:56] <EvanR> that definitely evaluates mvarName
[03:39:07] <EvanR> maybe that's the problem, you missed
[03:39:08] <geekosaur> putMVar mvarName $! mvarContents
[03:39:28] <geekosaur> the other would be a type error because it treats mvarName as a function
[03:40:04] <geekosaur> and yes, "safe" is preferable. it's slightly slower with respect to Haskell but avoids a lot of problems and won't break unexpectedly
[03:40:19] <hpc> generally you don't want to "unsafe" unless you know what you're doing
[03:41:13] <hpc> it's not one of those goofy keywords that doesn't have a human-interpretable meaning, it's there to make you look at it
[03:41:18] *** Joins: alx741 (~alx741@157.100.93.160)
[03:44:08] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[03:44:08] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[03:44:11] *** allbery_b is now known as geekosaur
[03:47:13] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7898:e7cb:a448:daff) (Quit: Textual IRC Client: www.textualapp.com)
[03:47:45] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:47:45] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:47:45] *** Joins: wroathe (~wroathe@user/wroathe)
[03:48:45] <Henson> hpc: well, it looks like changing "unsafe" to "safe" makes it work now.  I wrote the FFI part of the code several years ago, and at the time I guess I thought "unsafe" was the right choice.  You're right about the name implying that it's not safe to use, but for some reason I've since forgotten I chose to use it.  Obviously I chose poorly :-)
[03:49:25] <Henson> geekosaur: does the $! for setting the MVar also apply to TVars?  Can I do something like "atomically $ writeTVar tvarName $! contents" ?
[03:50:19] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:50:56] *** Joins: Omen (~Omen@2600:1702:2e30:1a40:8511:a2a3:f354:5a5e)
[03:51:03] <EvanR> unsafe comes with extra caveats and requirements to satisfy, things the compiler can't check
[03:51:27] *** Joins: desantra (~skykanin@user/skykanin)
[03:51:31] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[03:51:54] <Henson> EvanR: is "safe" the call that blocks Haskell?  Does it only block the thread that is calling it, or the whole runtime?
[03:52:00] <hpc> if that's just strict ($) i don't see why not
[03:52:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[03:52:18] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:53:29] <EvanR> your thread blocks until the call returns regardless. Blocking the whole runtime is a function of -threaded or not, number of capabilities, I'm not sure what the interactions are
[03:53:42] <Henson> ok, I've got some directions to investigate.  It seems to work now with "safe" and MVars, so I'll go back to the TVar code add switch to "safe" and see if that works, and add "$!" if it doesn't help.
[03:56:03] <EvanR> you can also do
[03:56:07] <EvanR>   evaluate contents
[03:56:21] <EvanR>   atomically (writeTVar tv contents)
[03:56:50] <Henson> EvanR: so with "-threaded" it should be similar to calling the image capture functions from C threads, right?  Haskell doesn't have something like the GIL in Python where it doesn't do concurrency well.  From what I've read, Haskell should have excellent concurrency and multi-processing abilities, right?
[03:56:57] <geekosaur> it's just strict $ and yes that should also work
[03:57:13] <geekosaur> as long as you use -threaded, yes
[03:57:45] <geekosaur> note that not using -threaded can lead to some not well tested areas of the runtime, although it's also more debuggable for non-RTS-related stuff
[03:58:06] <geekosaur> but if you're using threads like this you *really* want -threaded
[03:58:52] <geekosaur> this said, iirc even without -threaded a call like that will be run separately in an RTS-owned thread and let the rest of the program run normally
[03:59:44] <geekosaur> (unless you use "unsafe", in which case on your own head be it)
[04:01:20] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[04:01:49] <Henson> geekosaur: haha, "on your own head be it" :-)
[04:01:53] <monochrom> Haha would be funny if it's just a matter of -threaded all along.
[04:01:59] <Henson> hahaha
[04:02:10] <EvanR> yeah I asked that almost first thing
[04:02:22] <EvanR> when I saw unsafe
[04:02:40] <Henson> geekosaur: this will be running on a multi-core system, and the plan is to make liberal use of threads and all the system's cores
[04:02:48] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[04:04:07] <monochrom> You should default to "safe" until you have hard proof that performance matters to the point you need "unsafe", and even then you pay a price somewhere else and you need to decide if it's worth it.
[04:04:20] *** Joins: zaquest (~notzaques@5.130.79.72)
[04:04:33] <Henson> monochrom: ok
[04:04:51] <monochrom> And it is a trivally easy default. If you don't say "unsafe" then it's "safe". Yes, one of those nice times when it takes effort to add a bug.
[04:05:15] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[04:05:24] <hpc> once you're using -threaded there's various things you can try to make sure your ffi stays on one capability and the rest of the code stays well away from it
[04:05:45] <hpc> that might minimize the "ffi halting other threads" thing
[04:06:39] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[04:07:07] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[04:07:50] <Henson> hpc: what kinds of things?
[04:08:50] *** Joins: alx741 (~alx741@157.100.93.160)
[04:10:47] <hpc> forkOS, and a thing i don't remember the name for that decides what capabilities a forkIO thread can live on
[04:10:49] <Henson> by the way, everyone, thanks so much for all your advice.  I've got several avenues to pursue to try to resolve the problem.
[04:11:14] <Henson> hpc: something about pinned OS threads, right?
[04:11:43] <hpc> something like that? i have never had a use case for it so it was always "oh that's neat" whenever i scroll through haddock
[04:18:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:21:34] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[04:21:58] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[04:22:28] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[04:23:56] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:23:56] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:24:25] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:25:27] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:25:33] *** Joins: AlexNoo__ (~AlexNoo@94.233.241.181)
[04:25:43] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[04:26:07] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[04:28:32] *** Quits: AlexNoo_ (~AlexNoo@94.233.241.181) (Ping timeout: 240 seconds)
[04:32:24] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 268 seconds)
[04:34:53] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:41:16] *** Quits: phma (~phma@2001:5b0:211f:d0f8:a0d5:904f:4002:7904) (Read error: Connection reset by peer)
[04:41:44] *** Joins: phma (phma@2001:5b0:211f:d0f8:a0d5:904f:4002:7904)
[04:42:05] *** Joins: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net)
[04:42:17] *** Joins: alx741 (~alx741@157.100.93.160)
[04:44:34] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 260 seconds)
[04:44:46] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[04:46:47] *** Quits: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[04:49:32] *** Quits: otherwise (~otherwise@c-71-231-39-206.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[04:53:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[05:00:53] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:06:42] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[05:10:37] *** Quits: acidjnk (~acidjnk@pd9e0bdc0.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[05:11:30] *** Joins: kmein (~weechat@user/kmein)
[05:12:49] *** Quits: kmein (~weechat@user/kmein) (Client Quit)
[05:13:05] *** Joins: kmein (~weechat@user/kmein)
[05:16:24] *** Quits: kmein (~weechat@user/kmein) (Client Quit)
[05:16:42] *** Joins: kmein (~weechat@user/kmein)
[05:18:42] *** Joins: alx741 (~alx741@157.100.93.160)
[05:20:29] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 268 seconds)
[05:21:55] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:21:55] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:21:55] *** Joins: wroathe (~wroathe@user/wroathe)
[05:22:20] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[05:23:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:24:09] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:24:13] *** Joins: gcdotdev (~gcdotdev@user/gcdotdev)
[05:24:32] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:26:39] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[05:26:57] *** Joins: kmein (~weechat@user/kmein)
[05:27:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[05:29:03] *** Quits: gcdotdev (~gcdotdev@user/gcdotdev) (Quit: Client closed)
[05:35:22] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[05:36:18] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[05:36:33] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[05:37:08] *** Joins: otherwise (~otherwise@c-73-221-44-172.hsd1.wa.comcast.net)
[05:40:27] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[05:41:00] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[05:41:45] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 256 seconds)
[05:42:08] *** Joins: alx741 (~alx741@157.100.93.160)
[05:44:31] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-90.elisa-laajakaista.fi) (Quit: Leaving.)
[05:48:15] *** Joins: moonlighter69 (~moonlight@47.146.14.64)
[05:48:41] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:56:23] *** Quits: ajb (~ajb@cupid.whatbox.ca) (Remote host closed the connection)
[05:58:14] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[05:58:33] *** Joins: kmein (~weechat@user/kmein)
[05:59:04] *** Quits: moonlighter69 (~moonlight@47.146.14.64) (Remote host closed the connection)
[06:01:36] *** Quits: kmein (~weechat@user/kmein) (Client Quit)
[06:01:51] *** Joins: kmein (~weechat@user/kmein)
[06:03:01] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 240 seconds)
[06:03:48] *** Quits: kmein (~weechat@user/kmein) (Client Quit)
[06:04:06] *** Joins: kmein (~weechat@user/kmein)
[06:04:21] *** Joins: ajb (~ajb@cupid.whatbox.ca)
[06:04:27] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[06:05:19] *** Quits: kmein (~weechat@user/kmein) (Client Quit)
[06:05:37] *** Joins: kmein (~weechat@user/kmein)
[06:06:43] *** Joins: alx741 (~alx741@157.100.93.160)
[06:07:15] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[06:08:48] *** Quits: kmein (~weechat@user/kmein) (Client Quit)
[06:08:57] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:09:06] *** Joins: kmein (~weechat@user/kmein)
[06:11:13] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (Quit: Client limit exceeded: 20000)
[06:13:54] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[06:15:45] *** Quits: xff0x (~xff0x@port-92-193-205-13.dynamic.as20676.net) (Ping timeout: 256 seconds)
[06:16:48] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[06:17:46] *** Joins: xff0x (~xff0x@2001:1a81:527e:7f00:c95b:8db9:d638:e5ae)
[06:20:51] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[06:24:36] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[06:28:36] *** Quits: Movedtosridoneem (~sridmatri@2001:470:69fc:105::1c2) (Quit: Client limit exceeded: 20000)
[06:29:14] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[06:37:42] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Remote host closed the connection)
[06:42:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:42:12] *** Joins: alx741 (~alx741@157.100.93.160)
[06:42:30] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[06:42:34] *** Joins: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net)
[06:49:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:53:07] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:53:32] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Ping timeout: 240 seconds)
[06:53:32] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[06:54:46] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[06:55:28] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[07:07:17] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Ping timeout: 240 seconds)
[07:09:16] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:10:12] *** Joins: alx741 (~alx741@157.100.93.160)
[07:14:16] *** Joins: danso (~danso@d67-193-121-2.home3.cgocable.net)
[07:17:49] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:17:56] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:17:56] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:17:56] *** finn_elija is now known as FinnElija
[07:22:39] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[07:23:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[07:26:01] *** Quits: td_ (~td@muedsl-82-207-238-009.citykom.de) (Ping timeout: 256 seconds)
[07:27:30] *** Joins: td_ (~td@94.134.91.217)
[07:37:39] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:38:34] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[07:38:50] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[07:40:13] <InternetCitizen> why is Text so much faster than [Char] ?
[07:40:23] <InternetCitizen> is it some sort of Array Char?
[07:40:25] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[07:40:39] *** Joins: SridharRatnakum4 (~sridmatri@2001:470:69fc:105::1c2)
[07:40:41] *** Joins: alx741 (~alx741@157.100.93.160)
[07:44:57] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[07:45:37] *** Quits: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[07:48:19] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:48:21] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[07:50:30] <InternetCitizen> it comes down to an Internal `!Array` where `data Array = ByteArray ByteArray#`
[07:51:08] <InternetCitizen> what do the ! and # mean?
[07:52:16] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[07:59:23] *** Joins: mbuf (~Shakthi@122.162.67.169)
[07:59:25] <EvanR> strict Text is implemented as an array, while [Char] is a linked list
[07:59:31] <EvanR> of individual Chars
[08:00:02] <EvanR> ! in data types indicates a strict field
[08:00:21] <EvanR> # is found in primitives
[08:00:26] *** Joins: deadmarshal (~deadmarsh@95.38.115.121)
[08:07:39] *** Quits: dsrt^ (~dsrt@207.5.54.6) (Remote host closed the connection)
[08:10:16] *** Joins: alx741 (~alx741@157.100.93.160)
[08:14:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[08:22:35] <InternetCitizen> EvanR: what does it mean for ByteArray to be a primitive? could I expect it to be a u8* in LLVM?
[08:24:15] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[08:28:55] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[08:30:26] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:31:20] <catern> what do you call a language which distinguishes pure and impure functions? (the obvious answer is "functional" but making such a distinction doesn't require you to have first-class functions)
[08:32:28] *** Joins: alfonsox (~quassel@103.92.42.182)
[08:32:37] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[08:37:54] <maerwald[m]> catern: huh?
[08:38:06] <maerwald[m]> That somehow makes no sense
[08:38:49] <remexre> catern: "effect typed" maybe?
[08:39:34] <maerwald[m]> 1. there are pure and non-pure functional languages, 2. Haskell does NOT distinguish between pure and impure functions (which is why unsafeperformIO is so dangerous)
[08:40:26] *** Quits: phma (phma@2001:5b0:211f:d0f8:a0d5:904f:4002:7904) (Read error: Connection reset by peer)
[08:41:53] *** Joins: phma (phma@2001:5b0:211f:42c8:a947:49ab:30cf:8035)
[08:42:14] <int-e> glguy: yeah, that's the kind of code I got, though it's more, uhm, monolithic (and handles the alternation between players differently): https://paste.tomsmeding.com/7eezQWz5
[08:42:15] <catern> maerwald[m]: re 1, yes that's another great reason why "functional" is the wrong answer. re 2, it does if you ignore unsafePerformIO and friends
[08:42:26] <int-e> (slightly cleaned up from my previous paste)
[08:42:30] <catern> remexre: maybe but that's a little verbose...
[08:42:33] <maerwald[m]> catern: 2. No, it doesn't 
[08:42:45] <catern> remexre: and you wouldn't usually say that about Haskell
[08:42:46] <maerwald[m]> Then you have a misconception of what purity is
[08:42:49] *** Joins: alx741 (~alx741@181.199.42.79)
[08:42:51] <int-e> (still uncommented though)
[08:43:17] <maerwald[m]> all functions in Haskell are pure to the compiler
[08:43:38] <maerwald[m]> The compiler knows nothing about IO and it isn't treated special 
[08:43:53] <remexre> catern: I wouldn't b/c haskell doesn't make that distinction; I would agree with maerwald; (a -> m b) is a pure function in the absence of shenanigans
[08:44:06] <catern> fine, fine
[08:44:21] <catern> what do you call a language which distinguishes pure and impure expressions?
[08:44:37] <maerwald[m]> I'm not sure such a language exists even
[08:44:43] <remexre> Koka does, doesn't it?
[08:44:53] <catern> (haskell clearly does...)
[08:44:58] *** Joins: notzmv (~zmv@user/notzmv)
[08:45:51] <maerwald[m]> remexre: does the compiler know about purity and automatically distinguish that, regardless of types?
[08:46:01] <remexre> catern: is `Reader (\x -> x)` a pure or impure expression
[08:46:33] <int-e> glguy: oh and I didn't do anything clever (\live wins -> 27*live - wins) for the accounting the number of positions since the main point for me was asymptotic performance
[08:46:50] <remexre> maerwald[m]: I believe so
[08:47:19] <maerwald[m]> Even C compilers have a concept of pure functions, but you annotate them as such and the compiler will make no effort to prove it
[08:47:31] <glguy> int-e: I don't know if that was clever or not... I was torn between computing that directly and indirection as in my solution so taht I could have a simpler unfoldr generated list
[08:47:34] <maerwald[m]> So if you mess up, you get optimization dependent bugs
[08:48:02] <remexre> ig I should amend, "I believe so, but in the same way Rust lifetime analysis is separate from typechecking"
[08:48:12] <glguy> int-e: It's fun seeing the very similar structure in an almost completely different presentation :)
[08:48:24] <glguy> you're really enjoying pattern synonyms!
[08:48:25] <catern> remexre: impure, of course
[08:48:30] <glguy> guard patterns*
[08:48:33] <int-e> I really am
[08:48:45] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[08:49:02] <int-e> a large part of the joy is that they're not recursive
[08:49:06] <remexre> catern: are datatype constructors pure functions?
[08:49:20] <glguy> int-e: yeah, I guess for non-recursive bindings they replace let
[08:49:29] <glguy> remexre: only the ones that are functions
[08:49:46] *** Joins: theproffesor_ (~theproffe@2601:282:847f:8010::5fff)
[08:49:53] <glguy> True and False aren't functions and are datatype constructors
[08:49:55] *** Quits: the_proffesor (~theproffe@user/theproffesor) (Remote host closed the connection)
[08:49:58] <remexre> ah, fair
[08:50:02] <remexre> I'll amend that too
[08:50:42] <int-e> glguy: but they don't work nicely with `where` so there is a downside when code becomes more complex
[08:51:13] <remexre> catern: if you agree that the Reader constructor is a pure function and the expression (\x -> x) is pure, `Reader (\x -> x)' has to be pure as well
[08:51:21] <glguy> int-e: I haven't decided if it's *better* but it is faster and I like the change. I updated day 18; exploding snailfish arithmetic; such that it does all the explodes in one "pass" walking up and down the tree, tracking where it is with zippers https://glguy.net/advent/sln_2021_18/src/Main.html#explode
[08:52:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:53:07] *** Quits: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net) (Quit: sirlensalot)
[08:55:16] <glguy> now I'm wondering if the (Maybe Int, Tree, Maybe Int) version works just as well for the single pass; need to give that a stab next
[08:55:17] <catern> remexre: I don't think so; I can transform any impure program into a collection of pure components, but that doesn't make it pure
[08:55:59] <remexre> catern: the description of an impure program may be pure
[08:56:38] <catern> I disagree that there's a meaningful distinction between an impure program and its description
[08:57:02] <remexre> would you say that `"putStrLn \"hello\""' is a description of an impure program
[08:57:11] <catern> sure
[08:57:23] <maerwald[m]> putStrLn is a pure function 
[08:57:27] <remexre> like, that being a string literal
[08:57:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[08:57:50] <int-e> glguy: it's a zipper!
[08:57:58] <remexre> maerwald[m]: pretend I wrote `"System.out.println(\"hello\")"' if you want :P
[08:58:07] <maerwald[m]> remexre: ?
[08:58:09] *** Joins: nuh^ (~nuh@207.5.54.6)
[08:58:10] <glguy> pure/impure describe /functions/
[08:58:22] <remexre> a string literal containing the source of a program describes the program
[08:58:40] <remexre> but I don't think there's a reasonable definition of impure that counts a string literal as impure
[08:59:01] <glguy> string literals aren't functions, so they can't be pure or impure
[08:59:12] <remexre> an expression could be impure, no?
[08:59:37] <maerwald[m]> https://www.semanticscholar.org/paper/What-is-a-Purely-Functional-Language-Sabry/63c46be541fa2f18022d00c3cf15eb5342b00b01
[08:59:43] <maerwald[m]> Check that out
[09:00:14] <maerwald[m]> This discussion is semantically too vague 
[09:01:10] <otherwise> is machine code pure or impure? 
[09:01:20] <remexre> pdf link there gives me a cloudflare error 1020 >_>
[09:01:22] <otherwise> disregard, I don't even know what that question means
[09:01:23] <catern> remexre: oh - well, if you partner that with the type that the program evaluates to, yes, I'd say that's a description of an impure program
[09:01:34] <remexre> catern: why does the type matter?
[09:01:55] <catern> remexre: and to evalute that impure program to get its result, is an impure operation
[09:02:18] <catern> hence: it's an impure expression that gives you ()
[09:02:20] <remexre> right, but the expression containing the _description itself_ is pure
[09:02:47] <catern> I mean, I agree with glguy, it's better to talk about pure/impure in terms of functions
[09:03:13] <catern> anyway, I don't think it's constructive to discuss whether Haskell distinguishes pure and impure functions
[09:03:41] <maerwald[m]> Try this link then https://www.cambridge.org/core/journals/journal-of-functional-programming/article/what-is-a-purely-functional-language/3A39D50DA48F628D17D9A768A1FA39C3
[09:03:55] <maerwald[m]> catern: it doesn't distinguish them
[09:04:59] <remexre> I think you need some notion of an expression having an effect to talk about languages in general; in my mind, "an impure function" is shorthand for "a function f such that for some x, (f x) is an impure expression"
[09:06:15] *** Joins: alx741 (~alx741@157.100.93.160)
[09:08:54] <remexre> maerwald[m]: I'm unconvinced por is a pure operator :P
[09:09:18] <catern> ultimately, I think any argument you could use to argue that Haskell doesn't have some kind of distinction between pure and impure, would also apply to any language with an effect system
[09:10:05] <catern> in languages with an effect system you can also pass around things which you can impurely evaluate to get some value
[09:10:25] <otherwise> catern, do you have a line of code in mind that would illuminate your case?
[09:11:09] <maerwald[m]> Purity is about equivalence of evaluation strategies, not about types or execution of a program. If changing the evaluation strategy doesn't change the semantics of your program, it's "pure". That's an oversimplification, but yeah
[09:12:20] <catern> then all languages with effect systems are pure, because effect handling is not part of the evaluation strategy
[09:12:31] <catern> er, rather, isn't changed if you change the evaluation,
[09:12:32] <maerwald[m]> Even effects systems are mostly orthogonal 
[09:12:33] <catern> strategy
[09:13:40] <maerwald[m]> You don't need an effects system for your language to be pure. And the existence of one doesn't magically make your language pure
[09:14:40] <catern> okay so do you know of any language which has a (statically checked) distinction between pure and impure in any way?
[09:15:01] <catern> i'd say that "languages with an effect system" are a clear example of such a language
[09:15:06] <catern> (as is Haskell)
[09:15:41] <maerwald[m]> I'm giving up. I think you still have a misconception of purity.
[09:16:21] <remexre> catern: okay, I'll go with a modification of the above; does the `Monad ((->) r)' instance imply that `(\x -> x)' is an impure function
[09:16:30] <remexre> the existence of that instance*
[09:17:39] <catern> remexre: no, I suppose not
[09:18:52] <remexre> then since Reader is just a newtype around that, `Reader (\x -> x)' ought to also be pure
[09:19:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:19:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[09:20:56] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:21:57] *** Joins: antony (~The_viole@203.77.49.232)
[09:25:33] <maerwald[m]> An example of a language that can distinguish between purity and impurity would e.g. be a language that allows global mutable variables, but has knowledge about where these are used in the entire callstack and then choose different evaluation strategies based on that knowledge. I don't even think that's a good thing, because it would make reasoning very hard.
[09:27:51] *** Quits: vglfr (~vglfr@88.155.24.19) (Ping timeout: 256 seconds)
[09:34:26] <catern> remexre: sorry, what exactly is `Reader (\x -> x)'? is that just ask?
[09:34:31] <remexre> yeah
[09:35:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:37:04] <catern> okay, I grant that "pure" and "impure" are fuzzy concepts... it's hard to claim "something which is parameterized over some functions and a type" is always impure... it's possible that it's a detail of *what* concrete instance it's applied to, but then that would rather weaken my argument...
[09:37:53] <catern> I mean, I suppose a pure implementation for State is to just throw away the puts and return a constant for the gets
[09:37:53] *** Joins: alx741 (~alx741@157.100.93.160)
[09:38:32] <maerwald[m]> purely functional isn't a fuzzy concept, but it's often used in a fuzzy way
[09:38:38] <remexre> I'd argue rather strongly that the existing implementation is pure too...
[09:40:17] <catern> remexre: that's true too
[09:41:30] <catern> but so is the implementation of Cont, and in some sense, so is the implementation of IO, if you run your program in a VM without access to external state/randomness
[09:41:49] <c_wraith> "pure" is a weird term to apply to types other than (->)
[09:42:05] <c_wraith> purity is a property of functions
[09:42:55] <remexre> c_wraith: if my language had a primitive expression (printHelloWorldAndYield42 : Nat), it would make sense to call that expression impure, no?
[09:43:50] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:43:50] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:43:50] *** Joins: wroathe (~wroathe@user/wroathe)
[09:44:20] <maerwald[m]> c_wraith: anything that can be evaluated can be pure or impure
[09:44:20] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[09:44:52] *** Quits: antony (~The_viole@203.77.49.232) (Quit: Leaving)
[09:46:00] <remexre> catern: if you were to implement the Haskell RTS in a pure language, I'd agree with that
[09:46:04] <catern> okay, so then what even is an effect? is callCC an effect? are put/get effects? how is an effect distinguished from just any random function that is an input to another function?
[09:47:52] <c_wraith> maerwald[m]: and in Haskell, only functions have non-trivial evaluation. Anything else is just a data constructor.
[09:47:59] <remexre> I feel like I've seen a proper definition somewhere, but my loose definition is, "something you can't implement via a definitional interpreter in the untyped lambda calculus"
[09:47:59] <catern> remexre: I don't that's necessary :) C is monadic, everything is monadic as oleg says https://okmij.org/ftp/Computation/monadic-shell.html#All%20i/o%20is%20monadic :)
[09:48:46] <catern> remexre: well, so are functions which use effects "impure"?
[09:49:36] <remexre> catern: remembering that e.g. `Reader (\x -> x)' is a pure description of an effect, not an impure expression itself; yes
[09:49:38] <c_wraith> catern: depends on if the effect is the result of calling the function or not.  In haskell, only a very small number of functions like unsafePerformIO, unsafeInterleaveIO, unsafeInterleaveST, etc, are doing things that are impure
[09:49:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:50:22] *** Joins: jco (~jco@90-228-194-139-no542.tbcn.telia.com)
[09:51:33] <c_wraith> in *most* cases, what's being done is a pure calculation that results in some sort of description of an effect. This is distinguishable from actually running the effect.
[09:52:32] <maerwald[m]> I tried to explain that an hour ago :)
[09:53:07] <catern> okay, sure, but I have to go back to: does a language with an effect system distinguish pure and impure functions? an effect system also lets me compose together impure functions to produce another impure function without actually "running the effect"
[09:53:15] <c_wraith> man, unsafeInterleaveST hits that awkward combination of really broken when misused and really helpful when used properly.
[09:54:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[09:54:07] <remexre> catern: I mean, I'd say `traceShowId . traceShowId' is a pure expression that yields an impure function
[09:54:45] <remexre> traceShowId being an impure function in Haskell
[09:55:09] <catern> Haskell lets me create descriptions of a big chain of effects, but so do many languages - heck, even C! "printf" is a description of a bunch of effects, if I write a function "print_hello" which calls printf, then print_hello is also just a description of some effects, it's not actually run until I type ./a.out in my terminal...
[09:55:45] <c_wraith> catern: a language like haskell *doesn't* distinguish between pure and impure functions.  That's why impure functions are so dangerous.
[09:55:48] <catern> but I still think there is some difference between Haskell and C here, even though they both let me make functions which describe a bunch of effects!
[09:55:54] <catern> make values*
[09:56:40] *** Joins: seer (~delicacie@2601:6c4:4080:3f80:452b:5b2:a00e:7e62)
[09:56:44] <seer> @[exa]
[09:56:44] <lambdabot> Unknown command, try @list
[09:56:47] <maerwald[m]> c_wraith: I also explained that an hour ago ^^
[09:56:48] <catern> (although see the oleg link I just linked)
[09:56:53] <seer> can you help me out?
[09:56:56] *** seer is now known as Inst
[09:57:07] <Inst> I need to find a professor willing to supervise a course / seminar course I want to teach
[09:57:21] <Inst> what I'm trying to do is to bribe people with MMO gold equivalent of $4
[09:57:35] <Inst> for non-programmers etc to learn Haskell
[09:57:40] <remexre> catern: I think that Oleg post isn't quite unconfusing enough
[09:57:46] <Inst> targeted courseload is 72-144 hours
[09:57:56] <remexre> I think it is valid to say (and possibly valid to interpret that post as saying),
[09:57:59] <Inst> since this is an online course
[09:58:03] <Inst> taught on Twitch.tv
[09:58:26] *** Parts: Omen (~Omen@2600:1702:2e30:1a40:8511:a2a3:f354:5a5e) (Leaving)
[09:58:41] <remexre> you can treat a string of bytes as a pure description of an impure program, and the string of bytes remains pure
[09:58:55] <Inst> instead of having grading, altohugh we'll have proper problem sets (which are divided into review of current lesson, spaced repetition review of previous lessons, extension of current lesson, and preview of future concepts)
[09:59:11] <Inst> we'll give a prize for best haskell program
[09:59:18] <Inst> would be $80 in MMO gold
[09:59:25] <Inst> $40 for second prize, $20 for third prize
[09:59:35] <Inst> ideal is that their stuff can be contributed to Hackage
[09:59:55] <remexre> and a reasonable followup might be, you could argue that an interpreter for the strings of bytes might not have to be impure, even if the language the string-of-bytes is describing is e.g. machine code
[10:00:01] <Inst> long-term, I want to extend that to steam and steam gift cards, with a $20 entry prize, and a $500 first prize, $250 second prize, and $125 third prize
[10:00:59] <Inst> interests: #1, scamming people into providing a good Windows API UI framework for Haskell
[10:01:14] <Inst> #2, producing a genericized Haskell course that professors can adapt to their needs
[10:01:37] <remexre> this argument could be made more concrete by thinking of the amd64 syscall instruction as your single effect added to http://wall.org/~lewis/2013/10/15/asm-monad.html
[10:01:45] <Inst> i ideally would like to produce "Accelerated Intro Computer Science in Haskell and C"
[10:01:48] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:01:50] *** Joins: ensyde (~Omen@2600:1702:2e30:1a40:8511:a2a3:f354:5a5e)
[10:01:54] <Inst> which gives you data structures and algorithms baked in
[10:01:55] <remexre> and imagining an implementation of that effect that e.g. sets rax to -EAGAIN
[10:02:27] *** Joins: alx741 (~alx741@157.100.93.160)
[10:02:58] *** Joins: vglfr (~vglfr@88.155.6.191)
[10:03:02] <Inst> /s/in/with
[10:03:16] <remexre> (okay, I think more nuance is needed abt interrupts, but we could pretend for the sake of argument that we're interpreting in Maybe and synchronous interrupts result in our interpreter yielding Nothing)
[10:03:37] <remexre> er wait, that's not the right post
[10:04:16] <c_wraith> yeah, watch out for Oleg's site - everything is anchors into one giant page
[10:04:18] <catern> remexre: I dunno, so I think pure and impure is fuzzy, but I still think there's something inherently impure about, e.g., the IO monad even with a really simple implementation like always EAGAIN
[10:05:02] <catern> remexre: and I'm willing to bite the bullet on reader if that's necessary :)
[10:05:19] <c_wraith> catern: if you were to accept "Haskell doesn't treat pure and impure functions differently" as simple truth, would it require you to stop and rethink your starting point?
[10:06:42] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:06:42] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:06:42] *** Joins: wroathe (~wroathe@user/wroathe)
[10:07:45] <maerwald[m]> xD
[10:09:27] *** Joins: analognoise (~analognoi@185.216.74.46)
[10:11:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:18:15] <catern> okay, wait, what if there was a language where every function ended with return? every function is something like Foo -> IO Bar
[10:19:01] <catern> is there some concise way you would describe the difference between this language and Haskell?
[10:19:39] <remexre> does "everything" include (>>=)? or is bind a builtin to the language too?
[10:19:39] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[10:19:52] <remexre> and is it IO's return, or just "some" return
[10:20:28] <maerwald[m]> I have the feeling these type of questions don't lead anywhere 
[10:22:56] <catern> remexre: yeah that was a poor description, let me just leave it at "every function has to return an IO T" and the programmer has to implement that appropriately
[10:23:51] <remexre> "the programmer has to implement that appropriately" -- in a separate metalanguage?
[10:24:20] <catern> remexre: no, by inserting appropriate calls to return and bind as appropriate
[10:25:21] <remexre> catern: can you give an example?
[10:25:39] *** Quits: vglfr (~vglfr@88.155.6.191) (Ping timeout: 256 seconds)
[10:26:46] *** Joins: asco2 (~asco2@c-73-202-117-7.hsd1.ca.comcast.net)
[10:27:26] <catern> add x y : Int -> Int -> IO Int = return (x + y)
[10:27:45] <remexre> er, an example of the implementation
[10:27:55] <catern> not sure what you mean
[10:28:02] <catern> implementation of what?
[10:28:11] *** Joins: spaceseller (~spacesell@31.147.205.13)
[10:28:23] <catern> that was an example of the code a programmer would have to write
[10:28:29] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[10:28:40] <catern> the implementation... of the typechecker which requires every return type to be an IO t?
[10:28:41] <remexre> oh, in "the programmer has to implement that appropriately," was that =/= IO ?
[10:28:55] <remexre> well, currying gets in your way in your example :P
[10:29:07] <catern> ah
[10:30:00] <remexre> though, does that mean one can't write the identity function in that language?
[10:30:29] <catern> correct
[10:31:03] <remexre> can I take apart IO in the same way I can in Haskell?
[10:31:24] <catern> in what way do you mean?
[10:31:44] <remexre> like, IO in GHC is just a datatype
[10:33:13] <remexre> https://hackage.haskell.org/package/base-4.16.0.0/docs/GHC-IO.html#t:IO
[10:33:51] <catern> sure, you can take IO apart as much as you can in Haskell code that doesn't have access to the IO constructor
[10:34:17] <remexre> does unsafePerformIO exist, then?
[10:34:48] <catern> sure, I don't think unsafePerformIO harms the analgoy
[10:35:12] <remexre> okay, then I'd say that language allows impure expressions
[10:37:57] *** Joins: alx741 (~alx741@157.100.93.160)
[10:38:00] *** Joins: vglfr (~vglfr@88.155.6.191)
[10:38:28] <catern> er, so is that the distinction between that language and Haskell? IOLang allows impure expressions and Haskell doesn't? or if not, what's the difference between IOLang and Haskell?
[10:39:02] <remexre> haskell allows impure programming all day long, you just find yourself wrapping a ton of stuff in unsafePerformIO and having a terrible awful time because of laziness
[10:42:13] *** Quits: vglfr (~vglfr@88.155.6.191) (Ping timeout: 240 seconds)
[10:42:31] *** Joins: vglfr (~vglfr@88.155.6.191)
[10:42:48] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[10:43:08] *** Joins: falafel (~falafel@2603-8000-d800-688c-6db4-c125-f693-41cb.res6.spectrum.com)
[10:43:43] *** Joins: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net)
[10:45:14] <maerwald[m]> catern: we answered your question multiple times in the last 2 hours: 1. Haskell doesn't distinguish between pure and impure (everything is considered pure) and 2. you can write impure expressions, but the compiler won't know and you can pick up the pieces (that's why you need NOINLINE on global IORefs)
[10:46:17] <int-e> . o O ( making sure there's onle a single piece to pick up )
[10:47:07] <catern> maerwald[m]: what's that a response to? I asked a specific question, what's the difference between IOLang which I just described, and Haskell?
[10:47:11] *** Quits: vglfr (~vglfr@88.155.6.191) (Ping timeout: 256 seconds)
[10:47:48] *** Joins: vglfr (~vglfr@88.155.6.191)
[10:47:55] <maerwald[m]> catern: "IOLang allows impure expressions and Haskell doesn't"
[10:48:13] *** Quits: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[10:48:28] <maerwald[m]> Please read the paper by Amr Sabry I linked twice
[10:49:17] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[10:50:18] <remexre> I kinda wanna write an ACME.Impure module now, that's a copy of System.IO but with unsafePerformIO composed onto everything
[10:54:56] <int-e> remexre: try https://hackage.haskell.org/package/bytestring-0.11.2.0/docs/Data-ByteString-Internal.html#v:accursedUnutterablePerformIO for extra foot-shooting power
[10:55:27] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Remote host closed the connection)
[10:55:38] <int-e> (can you believe that this was called `inlinePerformIO` at some point... such an innocent name)
[10:55:52] *** Quits: asco2 (~asco2@c-73-202-117-7.hsd1.ca.comcast.net) (Quit: Client closed)
[10:55:59] *** Joins: burnsidesLlama (~burnsides@client-8-79.eduroam.oxuni.org.uk)
[10:56:35] <catern> remexre: just to be clear, what part if any was an answer to "what's the difference between IOLang which I just described, and Haskell?"? not that you're required to answer my questions, but if you did I didn't understand
[10:57:02] <remexre> there isn't a technical difference
[10:57:08] <remexre> the difference is a matter of convenience
[10:57:28] <int-e> no, it's so much worse than that
[10:57:54] <int-e> `IO a` imposes an order on effects
[10:58:19] <remexre> hm? unsafePerformIO removes it; I think IOLang is "macro-equivalent" to Haskell
[10:58:51] <int-e> (and from the glance I had, there's nothing in "IOLang" that relaxes that order)
[10:59:57] *** Quits: burnsidesLlama (~burnsides@client-8-79.eduroam.oxuni.org.uk) (Ping timeout: 240 seconds)
[11:00:07] <remexre> int-e: unsafePerformIO relaxes it, dunnit?
[11:00:29] *** Joins: alx741 (~alx741@157.100.93.160)
[11:00:32] <int-e> remexre: of course, horribly so
[11:00:48] <remexre> so that's the thing in IOLang that relaxes the order
[11:05:16] <EvanR> at some point the jargon for pure/impure functions escaped from functions and random stuff in haskell can be called pure and impure, pure expressions, pure values, pure data...
[11:06:26] <EvanR> I'm always suspicious about whether it makes sense xD
[11:07:08] <int-e> sometimes it makes sense through pure luck
[11:07:24] <int-e> (that's a real world phenomenon)
[11:07:39] <EvanR> oooooh
[11:08:33] <remexre> imo: pure expressions are the primitive concept (scroll up ~2hrs); a pure value is a WHNF value with pure subterms or a thunk of a pure expression; and pure data isn't pure/impure, it refers (afaik) to whether something is (forceable to) a tree of constructors or not
[11:08:33] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:10:07] <EvanR> even if some of that made sense I'm not sure how good it is, jargonwise
[11:10:39] <EvanR> why have a word for a WHNF value, that conflicts with established usage, when we already have that
[11:10:58] <remexre> uh the "or a thunk" part is relevant to that
[11:11:24] <EvanR> anyway
[11:21:13] *** Joins: Jing (~hedgehog@2604:a840:3::1067)
[11:27:06] *** Joins: alx741 (~alx741@157.100.93.160)
[11:27:16] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[11:28:01] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[11:28:10] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[11:30:30] *** Joins: nschoe (~quassel@178.251.84.79)
[11:31:47] *** Quits: nschoe (~quassel@178.251.84.79) (Client Quit)
[11:32:53] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:34:17] *** Quits: falafel (~falafel@2603-8000-d800-688c-6db4-c125-f693-41cb.res6.spectrum.com) (Ping timeout: 240 seconds)
[11:34:19] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[11:40:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:41:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:45:19] *** Joins: coolnickname (uid531864@user/coolnickname)
[11:46:13] <otherwise> > let test key xs = foldl (\acc (x,y)-> if key == x then Just y else acc) Nothing xs in test "foo" [("foo", "1234"), ("flub","4321"), ("bar","987"),("blurp","344")]
[11:46:14] <lambdabot>  Just "1234"
[11:46:17] <otherwise> > let test key xs = foldl (\(x,y) acc-> if key == x then Just y else acc) xs Nothing in test "foo" [("foo", "1234"), ("flub","4321"), ("bar","987"),("blurp","344")]
[11:46:18] <lambdabot>  error:
[11:46:18] <lambdabot>      • Couldn't match expected type ‘(a1, a2)’
[11:46:18] <lambdabot>                    with actual type ‘Maybe a2’
[11:46:53] <otherwise>  why does the second case fail? I switch (x,y) , acc, xs and Nothing, respectively
[11:47:40] *** Quits: xff0x (~xff0x@2001:1a81:527e:7f00:c95b:8db9:d638:e5ae) (Remote host closed the connection)
[11:47:59] *** Joins: xff0x (~xff0x@2001:1a81:527e:7f00:b856:ac3b:a520:4a41)
[11:50:34] *** Joins: alx741 (~alx741@181.199.42.79)
[11:50:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:51:14] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[11:51:56] *** Quits: foul_owl (~kerry@212.102.47.57) (Ping timeout: 252 seconds)
[11:52:14] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[11:52:24] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[11:52:27] *** allbery_b is now known as geekosaur
[11:56:11] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[11:57:26] *** Joins: foul_owl (~kerry@212.102.47.57)
[11:58:38] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:00:16] *** Quits: alfonsox (~quassel@103.92.42.182) (Remote host closed the connection)
[12:00:40] *** Joins: KvL (~KvL@user/KvL)
[12:09:39] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:09:41] <otherwise> okay I think i figured it out. it's in the type signature
[12:09:52] *** Joins: ksqsf (~user@134.209.106.31)
[12:10:02] *** Quits: analognoise (~analognoi@185.216.74.46) (Read error: Connection reset by peer)
[12:10:28] <otherwise> :t foldr
[12:10:29] <lambdabot> Foldable t => (a -> b -> b) -> b -> t a -> b
[12:12:51] *** Joins: alx741 (~alx741@157.100.93.160)
[12:13:00] <otherwise> the a in (a -> b -> b) corresponds to the 't a', which is the last input to the foldr function, which needs to be a foldable (like a list)
[12:13:36] <otherwise> I'm just explaining things to myself here, dont mind me.
[12:18:46] *** Quits: nuh^ (~nuh@207.5.54.6) (Remote host closed the connection)
[12:20:04] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[12:25:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[12:25:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[12:25:59] *** Joins: wroathe (~wroathe@user/wroathe)
[12:26:51] *** Joins: nhatanh02 (~satori@123.24.172.30)
[12:30:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:34:18] *** Joins: cfricke (~cfricke@user/cfricke)
[12:38:21] *** Joins: alx741 (~alx741@157.100.93.160)
[12:38:22] *** Joins: acidjnk (~acidjnk@p200300d0c7271e9910698cbf36694c68.dip0.t-ipconnect.de)
[12:41:39] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[12:43:20] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[12:47:42] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:45] *** allbery_b is now known as geekosaur
[12:48:57] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:49:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[12:52:42] <Nate[m]12> does anyone know some good examples of accounting softwares with haskell?
[12:52:50] *** Joins: nhatanh02 (~satori@123.24.172.30)
[12:52:59] <Nate[m]12> s/softwares/software/
[12:54:07] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[12:56:26] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:00:16] <tomsmeding> Nate[m]12: not sure if it's precisely what you're looking for, but hledger exists
[13:00:39] *** Joins: alx741 (~alx741@157.100.93.160)
[13:00:41] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:04:40] <Nate[m]12> tomsmeding: thanks, it looks like a personal accounting software, but I was looking for software that is distributed over multiple companies for verification purposes etc.
[13:04:56] *** AlexNoo__ is now known as AlexNoo
[13:05:00] <Nate[m]12> does cardano offer such services?
[13:05:05] <tomsmeding> I would find it unlikely that exists, to be honest :p
[13:07:43] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[13:10:08] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:10:31] *** Joins: cosimone (~user@93-34-133-35.ip49.fastwebnet.it)
[13:13:57] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:14:43] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[13:15:09] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[13:15:54] *** Joins: hyiltiz (~quassel@31.220.5.250)
[13:17:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[13:18:08] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[13:20:17] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 240 seconds)
[13:21:26] *** Quits: jco (~jco@90-228-194-139-no542.tbcn.telia.com) (Remote host closed the connection)
[13:21:37] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:452b:5b2:a00e:7e62) (Ping timeout: 240 seconds)
[13:23:35] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[13:24:46] *** Joins: hyiltiz (~quassel@31.220.5.250)
[13:29:41] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[13:34:03] *** Joins: jinsun (~quassel@user/jinsun)
[13:34:47] *** Joins: alx741 (~alx741@181.199.42.79)
[13:36:11] *** Joins: chomwitt (~chomwitt@2a02:587:dc1e:c100:12c3:7bff:fe6d:d374)
[13:39:57] *** Quits: vglfr (~vglfr@88.155.6.191) (Ping timeout: 240 seconds)
[13:42:39] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[13:46:57] *** Quits: ensyde (~Omen@2600:1702:2e30:1a40:8511:a2a3:f354:5a5e) (Ping timeout: 240 seconds)
[13:50:28] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:51:28] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-90.elisa-laajakaista.fi)
[13:52:19] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[13:55:43] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[13:57:25] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:57:55] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:00:38] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[14:05:15] *** Joins: mastarija (~mastarija@2a05:4f46:e0e:5000:d11e:1641:cfb6:79c3)
[14:09:09] *** Joins: alx741 (~alx741@157.100.93.160)
[14:12:17] *** Quits: spaceseller (~spacesell@31.147.205.13) (Quit: Leaving)
[14:16:24] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[14:16:57] *** Quits: xff0x (~xff0x@2001:1a81:527e:7f00:b856:ac3b:a520:4a41) (Ping timeout: 240 seconds)
[14:18:11] *** Joins: xff0x (~xff0x@2001:1a81:527e:7f00:c538:8d07:2658:ecf)
[14:18:53] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[14:19:50] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[14:23:19] *** Joins: vglfr (~vglfr@88.155.12.39)
[14:23:30] *** Joins: max22- (~maxime@2a01cb088335980042a847f93091dac4.ipv6.abo.wanadoo.fr)
[14:23:48] *** Joins: DNH (~DNH@ip5f5abb04.dynamic.kabel-deutschland.de)
[14:24:44] *** Quits: mastarija (~mastarija@2a05:4f46:e0e:5000:d11e:1641:cfb6:79c3) (Quit: Leaving)
[14:26:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:26:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:26:46] *** Joins: wroathe (~wroathe@user/wroathe)
[14:29:39] *** Quits: vglfr (~vglfr@88.155.12.39) (Read error: Connection reset by peer)
[14:30:17] *** Joins: vglfr (~vglfr@88.155.12.39)
[14:31:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[14:33:41] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[14:37:35] *** Joins: alx741 (~alx741@157.100.93.160)
[14:42:17] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[14:46:43] *** Quits: DNH (~DNH@ip5f5abb04.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:51:24] *** Joins: __monty__ (~toonn@user/toonn)
[14:54:14] <otherwise> i'm trying to compare runtime differences between two definitions of factorial, but it appears I need to force strict evaluation (not lazy) to maximize efficiency for one of the definitions. Only problem is, the syntax for applying BangPatterns is not working for me...
[14:55:08] <int-e> @where paste
[14:55:08] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[14:57:33] <otherwise> https://paste.tomsmeding.com/EWFX3Ar1
[14:58:09] <otherwise> thanks, I put the cart in front of the horse, I didnt have a paste prepped
[14:58:45] *** Joins: alx741 (~alx741@157.100.93.160)
[15:01:28] <int-e> otherwise: the last attempt looks correct; did you actually enable the extension? You need  {-# LANGUAGE BangPatterns #-}  or invoke ghc[i] with -XBangPatterns
[15:02:23] <int-e> ghc actually tried to be helpful and say "Did you forget to enable BangPatterns?"
[15:02:49] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[15:03:11] <otherwise> oh
[15:03:16] <otherwise> no I didnt do that
[15:03:32] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:03:38] <otherwise> I've never invoked anything, so I'm not how I would, honestly
[15:04:02] *** Quits: acidjnk (~acidjnk@p200300d0c7271e9910698cbf36694c68.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:04:13] <otherwise> import Data.-XBangPatterns or something like that?
[15:04:23] <int-e> ?
[15:04:33] <albet70> why the fish operator >=> called Kleisli composition?
[15:04:50] <albet70> any special used?
[15:04:55] <int-e> otherwise: No, the LANGUAGE pragma is what you'd use in a source file.
[15:05:24] <int-e> otherwise: -XBangPatterns is a command line option for ghc or ghci; in ghci, you can also use :set -XBangPatterns
[15:05:32] * int-e would recommend the pragma actually
[15:06:42] <int-e> LANGUAGE pragmas got at the very beginning of a module's source code, btw, even before the `module` keyword (if you have that)
[15:08:05] <otherwise> oh okay, nested in the {#    #} ?
[15:09:50] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[15:10:07] *** Quits: deadmarshal (~deadmarsh@95.38.115.121) (Ping timeout: 256 seconds)
[15:12:26] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[15:12:29] <otherwise> definitely not in the {# #}, okay I think I'm slowly weeding out the errors, thanks! :) 
[15:12:32] *** Quits: KvL (~KvL@user/KvL) (Quit: KvL)
[15:13:54] *** Joins: KvL (~KvL@user/KvL)
[15:14:57] <fendor[m]> otherwise, you put it in {-# #-}, e.g. `{-# LANGUAGE BangPatterns #-}`
[15:15:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:16:18] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7457:6675:c5ec:bb4b)
[15:16:55] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[15:17:25] *** Quits: foul_owl (~kerry@212.102.47.57) (Ping timeout: 240 seconds)
[15:19:17] <otherwise> https://paste.tomsmeding.com/EfSiXa4b
[15:19:55] *** Joins: alx741 (~alx741@157.100.93.160)
[15:20:19] *** Quits: KvL (~KvL@user/KvL) (Ping timeout: 256 seconds)
[15:21:49] <fendor[m]> well, you have a typo
[15:22:17] <fendor[m]> `-#}` vs `#-}`
[15:22:36] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:23:47] <otherwise> Thats why the code was golden!
[15:23:51] <otherwise> haha
[15:24:01] *** Joins: Rum (~bourbon@user/rum)
[15:24:10] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[15:24:27] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[15:25:12] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:25:13] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[15:26:50] *** Joins: antony (~The_viole@203.77.49.232)
[15:27:37] *** Joins: KvL (~KvL@user/KvL)
[15:27:46] <otherwise> thanks Int-e and fendor
[15:30:18] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:31:24] *** Joins: foul_owl (~kerry@94.140.8.106)
[15:43:01] *** Quits: antony (~The_viole@203.77.49.232) (Quit: Leaving)
[15:43:21] *** Joins: antony (~The_viole@203.77.49.232)
[15:43:22] *** Joins: alx741 (~alx741@157.100.93.160)
[15:43:23] *** Quits: antony (~The_viole@203.77.49.232) (Remote host closed the connection)
[15:43:29] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[15:43:50] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[15:46:16] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Client Quit)
[15:46:34] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[15:46:51] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Client Quit)
[15:47:01] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[15:47:07] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[15:47:34] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Client Quit)
[15:47:50] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[15:48:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:48:52] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:53:58] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[15:56:17] *** Quits: ishutin (~ishutin@80-95-82-198.pool.digikabel.hu) (Ping timeout: 240 seconds)
[15:58:12] *** Joins: ishutin (~ishutin@92-249-182-7.pool.digikabel.hu)
[16:01:04] *** Joins: _ht_ (~quassel@37.120.218.158)
[16:01:12] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Ping timeout: 268 seconds)
[16:03:03] *** Quits: xff0x (~xff0x@2001:1a81:527e:7f00:c538:8d07:2658:ecf) (Ping timeout: 268 seconds)
[16:03:22] *** Joins: xff0x (~xff0x@2001:1a81:527e:7f00:128f:5c47:b7cd:f118)
[16:04:25] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[16:05:25] *** Joins: alx741 (~alx741@157.100.93.160)
[16:06:26] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:07:22] *** Joins: deadmarshal (~deadmarsh@95.38.115.121)
[16:09:15] *** Quits: Jing (~hedgehog@2604:a840:3::1067) (Remote host closed the connection)
[16:09:54] *** Joins: Jing (~hedgehog@2604:a840:3::1067)
[16:10:46] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:14:13] *** Quits: Kaiepi (~Kaiepi@216.208.243.198) (Ping timeout: 240 seconds)
[16:23:25] *** Joins: Kaiepi (~Kaiepi@216.208.243.103)
[16:28:52] *** Joins: alx741 (~alx741@157.100.93.160)
[16:29:30] *** Joins: raehik (~raehik@2a00:23c6:4c83:a901:95bf:f7ec:7b7d:c21e)
[16:30:37] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[16:32:59] *** Quits: max22- (~maxime@2a01cb088335980042a847f93091dac4.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[16:33:36] *** Quits: KvL (~KvL@user/KvL) (Quit: KvL)
[16:33:45] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:33:45] *** Quits: otherwise (~otherwise@c-73-221-44-172.hsd1.wa.comcast.net) ()
[16:34:37] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:34:45] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[16:43:32] *** Quits: raehik (~raehik@2a00:23c6:4c83:a901:95bf:f7ec:7b7d:c21e) (Ping timeout: 240 seconds)
[16:46:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:49:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:49:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[16:49:00] *** Joins: wroathe (~wroathe@user/wroathe)
[16:50:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[16:50:56] *** Joins: alx741 (~alx741@157.100.93.160)
[16:53:10] *** Joins: nhatanh02 (~satori@123.24.172.30)
[16:53:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[16:56:23] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:57:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:03:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:03:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:03:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:04:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:04:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:04:20] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[17:04:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:04:34] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:04:47] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[17:04:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:04:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:05:09] *** Joins: spaceseller (~spacesell@31.147.205.13)
[17:05:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:05:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:05:23] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:05:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:05:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:05:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:06:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:06:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:06:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:06:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:06:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:06:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:07:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:07:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:07:23] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:07:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:07:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:07:52] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:08:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:08:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:08:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:08:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:08:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:08:58] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:09:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:09:12] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[17:09:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:09:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:09:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:09:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:10:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:10:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:10:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:10:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:10:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:10:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:11:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:11:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:11:29] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:11:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:11:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:12:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:12:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:12:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:12:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:12:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:12:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:13:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:13:20] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:13:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:13:42] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:13:56] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:14:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:14:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:14:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:14:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:14:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:15:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:15:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:15:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:15:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:15:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:15:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:22:20] *** Joins: desantra (~skykanin@user/skykanin)
[17:22:52] *** Quits: desantra (~skykanin@user/skykanin) (Client Quit)
[17:23:09] *** Joins: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[17:24:22] *** Joins: desantra (~skykanin@user/skykanin)
[17:25:31] *** Joins: alx741 (~alx741@157.100.93.160)
[17:32:01] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:32:17] *** Quits: spaceseller (~spacesell@31.147.205.13) (Quit: Leaving)
[17:32:40] *** Joins: spaceseller (~spacesell@31.147.205.13)
[17:35:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:35:20] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Read error: Connection reset by peer)
[17:35:33] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[17:40:20] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[17:46:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:48:58] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[17:49:21] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[17:49:49] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:50:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[17:53:21] *** Joins: max22- (~maxime@2a01cb0883359800fd0e15f8c1058ba6.ipv6.abo.wanadoo.fr)
[17:54:02] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:54:10] *** Joins: _73` (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[17:54:21] *** Quits: _73` (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[17:55:37] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[17:55:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[17:57:44] *** Quits: spaceseller (~spacesell@31.147.205.13) (Quit: Leaving)
[17:57:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:06:19] *** Joins: zebrag (~chris@user/zebrag)
[18:08:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:08:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:08:24] *** Joins: wroathe (~wroathe@user/wroathe)
[18:12:24] *** Joins: alx741 (~alx741@157.100.93.160)
[18:14:40] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[18:15:24] *** Joins: kalxd[m]1 (~kalxdmatr@2001:470:69fc:105::1:576e)
[18:17:16] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:18:43] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[18:19:18] *** Joins: cheater (~Username@user/cheater)
[18:19:23] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[18:21:16] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[18:23:44] <InternetCitizen> How does haskell having a definition for every function `t0 -> ... -> tn -> (t0, ... tn)`?
[18:24:22] <InternetCitizen> i.e how does it define all the functions `(,), (,,), (,,,) ...`?
[18:24:54] *** Quits: tafa (~tafa@user/tafa) (Quit: ZNC - https://znc.in)
[18:24:55] <InternetCitizen> I opened GHCi and typed 39 commas and got a bit scared tbh
[18:25:01] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[18:26:20] <[exa]> InternetCitizen: if you overdo it a bit you might get an error saying that maximum tuple size is 62
[18:26:33] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[18:26:35] *** Joins: tafa (~tafa@user/tafa)
[18:26:53] <InternetCitizen> hahaha but how does it work? does the parser generate a constructor on the fly?
[18:27:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:27:26] <InternetCitizen> or are all 63 of them put into scope of every haskell program
[18:27:35] <[exa]> not sure, the tuple handling is a bit special, but generating the constructor name on the fly during parsing would make sense to me
[18:27:45] <[exa]> ie not sure if there's even a better way
[18:28:45] <[exa]> OTOH you may have a look at instances of the (,,,,,,,,,)'s, the useful ones (Show,Read,Bounded,...) usually end at like 16-tuples
[18:29:07] <[exa]> IIRC these are defined manually in base
[18:31:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[18:32:20] *** Quits: _ht_ (~quassel@37.120.218.158) (Ping timeout: 252 seconds)
[18:32:49] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[18:32:57] <geekosaur> the instances are manual, tuples themselves are wired-in
[18:34:56] *** Joins: alx741 (~alx741@157.100.93.160)
[18:36:40] <InternetCitizen> I tried the same thing in Rust and I was able to make a 1000-element tuple ... sheesh!
[18:37:07] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[18:37:07] <InternetCitizen> at this point I don't think the madlads even put a limit
[18:37:15] *** Joins: acidjnk (~acidjnk@p200300d0c7271e9910698cbf36694c68.dip0.t-ipconnect.de)
[18:37:43] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:38:06] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[18:39:31] <geekosaur> I think ghc wouldn't have one except at some point they discovered the compiler dumped core with 63-tuples. I'm not sure anyone ever tested to see if it was fixed
[18:39:54] <geekosaur> mostly because we discourage tuples that big anyway
[18:40:30] <geekosaur> given how we do argument passing and the like, the main place to use tuples is as function return values, and a 1000-tuple there is kinda wtf
[18:41:11] <geekosaur> also at some point we start preferring ADTs/records so you can get values by name instead of hoping you counted right
[18:41:39] <InternetCitizen> I totally agree, anything larger than 2 looses any semantics for me
[18:41:47] <InternetCitizen> 5000 and counting
[18:42:21] <InternetCitizen> I'm inclinding to make a small program to see at which point does the rust compiler break
[18:42:32] <InternetCitizen> or if my memory will run out before
[18:43:22] * geekosaur bets 32768 or some other power of 2 matching a native (sub)word size
[18:43:35] <geekosaur> could take a while if that's 2^63
[18:43:41] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[18:44:49] <[exa]> InternetCitizen: in rust it's limited by source filesize!!1
[18:45:13] <InternetCitizen> how big is that?
[18:45:43] <[exa]> well, a lot
[18:46:09] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:46:56] <InternetCitizen> 500MB ...
[18:47:04] <[exa]> anyway tuples for rust are afaik basically the same as structs, I guess the real technical limit there is when LLVM breaks
[18:47:58] <InternetCitizen> "rustc_driver dll on Windows bundles the whole compiler and LLVM into one file"
[18:48:07] <[exa]> it might get pretty quick if they try to pass that stuff through stack
[18:48:33] <[exa]> now that's a library. :D
[18:49:13] <InternetCitizen> https://github.com/rust-lang/rustup/issues/2490
[18:49:36] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[18:50:03] <[exa]> ;_;
[18:55:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:00:28] <geekosaur> nice to know we're not the only ones who have the "suck everything into a single strict ByteString" issue
[19:01:17] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[19:01:38] <Rembane> Different types of strings are an issue everywhere imo, they just pop up in different ways.
[19:03:19] <geekosaur> that wasn't really the aspect I was reaching for
[19:03:30] <geekosaur> more the thought process that "of course it'll always fit"
[19:03:49] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Remote host closed the connection)
[19:04:26] <Rembane> Got it. I think I might've internalized a bit too much muttering about strings. 
[19:04:31] *** Joins: alx741 (~alx741@157.100.93.160)
[19:06:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:07:34] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[19:11:08] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:11:21] *** Joins: shapr` (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[19:11:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:11:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:11:46] *** Joins: wroathe (~wroathe@user/wroathe)
[19:12:31] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[19:12:37] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[19:12:57] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 240 seconds)
[19:13:04] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[19:16:17] *** Quits: shapr` (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[19:16:17] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[19:16:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:19:08] *** Joins: neurocyte0132889 (~neurocyte@94.46.76.127)
[19:19:08] *** Quits: neurocyte0132889 (~neurocyte@94.46.76.127) (Changing host)
[19:19:08] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[19:21:03] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[19:21:35] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[19:24:50] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:29:05] *** Joins: alx741 (~alx741@157.100.93.160)
[19:30:08] *** Quits: utk (~utk@2001:470:69fc:105::1:2fe0) (Quit: You have been kicked for being idle)
[19:30:19] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:30:19] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:30:19] *** Joins: wroathe (~wroathe@user/wroathe)
[19:34:09] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[19:34:50] *** Joins: kmein (~weechat@user/kmein)
[19:35:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[19:35:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:39:05] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:39:05] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:39:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[19:43:16] *** Joins: thevishy (~Nishant@2405:201:f005:c007:2dcc:1488:1871:6935)
[19:43:46] *** Joins: gaff (~gaff@49.207.212.166)
[19:44:54] <gaff> in quickcheck, is it possible to put in multiple assertions in a property, a === b; c === d?
[19:46:13] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[19:47:08] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:47:58] <gaff> for example, prop_1 x y = x ===2; y === 3
[19:53:12] *** Quits: cosimone (~user@93-34-133-35.ip49.fastwebnet.it) (Remote host closed the connection)
[19:53:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:54:38] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:56:10] *** Joins: alx741 (~alx741@157.100.93.160)
[19:59:35] <lyxia> @check \x y -> (x === 2) .&&. (y === 3)
[19:59:37] <lambdabot>  *** Failed! Falsifiable (after 1 test):
[19:59:37] <lambdabot>  0 0 LHS 0 /= 2
[20:00:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:03:37] *** Joins: machined1od (~machinedg@24.105.81.50)
[20:03:45] *** Quits: machined1od (~machinedg@24.105.81.50) (Client Quit)
[20:05:05] *** Joins: raehik (~raehik@2a00:23c6:4c83:a901:95bf:f7ec:7b7d:c21e)
[20:07:36] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[20:08:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:08:25] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:08:25] *** Joins: wroathe (~wroathe@user/wroathe)
[20:08:38] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Read error: No route to host)
[20:09:14] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[20:12:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:12:19] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[20:14:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[20:15:56] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[20:18:42] *** Joins: alx741 (~alx741@157.100.93.160)
[20:23:04] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:24:06] *** Joins: mastarija (~mastarija@2a05:4f46:e0e:5000:d11e:1641:cfb6:79c3)
[20:24:32] *** Quits: raehik (~raehik@2a00:23c6:4c83:a901:95bf:f7ec:7b7d:c21e) (Ping timeout: 268 seconds)
[20:33:18] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Remote host closed the connection)
[20:33:39] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:35:06] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[20:35:59] *** Joins: shapr (~user@pool-108-28-144-11.washdc.fios.verizon.net)
[20:36:01] <gaff> lyxia: `&&` takes boolean, but `===` returns `Property`, so how does that work?
[20:36:54] <monochrom> .&&. is not &&
[20:37:09] <gaff> ok
[20:38:27] <gaff> thanks
[20:39:10] <gaff> i suppose likewise there is something like .||. as well
[20:39:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:39:31] <int-e> :t (.||.)
[20:39:32] <lambdabot> (STestable prop2, STestable prop1) => prop1 -> prop2 -> Test.QuickCheck.Safe.SProperty
[20:39:43] <gaff> yeah
[20:39:48] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[20:39:58] <monochrom> In retrospect I'm a bit surprised that === was not named .==.
[20:40:05] <gaff> love quickcheck
[20:40:35] <gaff> but coming with properties is quite an art
[20:40:53] <int-e> :t (==>)
[20:40:54] <lambdabot> STestable prop => Bool -> prop -> Test.QuickCheck.Safe.SProperty
[20:41:02] <int-e> (that one has no dots either)
[20:41:11] <gaff> yeah
[20:41:13] *** Joins: alx741 (~alx741@157.100.93.160)
[20:41:24] <geekosaur> proper testing is always an art
[20:42:12] <int-e> (You can ignore the `S` in `STestable`, there's no huge difference, except that `Testable`s embed IO and this doesn't)
[20:43:02] *** Joins: machined1od (~machinedg@24.105.81.50)
[20:43:04] <gaff> geekosaur: no i mean coming up with properties that do not duplicate source code -- that's something tricky -- i didn't know about it until i read hughes' paper.
[20:43:28] *** Joins: machined2od (~machinedg@24.105.81.50)
[20:43:37] *** Quits: machined2od (~machinedg@24.105.81.50) (Client Quit)
[20:43:41] *** Quits: machined1od (~machinedg@24.105.81.50) (Client Quit)
[20:43:45] *** Quits: machinedgod (~machinedg@24.105.81.50) (Quit: leaving)
[20:43:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[20:44:05] *** Joins: machinedgod (~machinedg@24.105.81.50)
[20:44:05] <monochrom> Oh there is still some value in properties that duplicate source code. It's called "white-box testing" and "path coverage" in some circles. >:)
[20:44:27] * monochrom disbelieve in those, that's right.
[20:46:15] <gaff> i love the idea of random test data generation ... it is amazing what bugs you can catch
[20:46:15] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:46:39] *** Joins: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net)
[20:46:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:47:15] <gaff> and quickcheck design -- those guys can really do some great stuff with types
[20:47:41] <gaff> thanks
[20:47:48] *** Quits: gaff (~gaff@49.207.212.166) ()
[20:50:27] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[20:51:05] *** Joins: machined1od (~machinedg@24.105.81.50)
[20:51:19] *** Quits: machinedgod (~machinedg@24.105.81.50) (Quit: leaving)
[20:51:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[20:53:05] *** Quits: mbuf (~Shakthi@122.162.67.169) (Quit: Leaving)
[20:55:22] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 268 seconds)
[20:57:25] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[20:58:06] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[20:59:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:59:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:59:53] *** Joins: wroathe (~wroathe@user/wroathe)
[21:00:29] *** Joins: econo (uid147250@user/econo)
[21:01:37] *** Quits: vglfr (~vglfr@88.155.12.39) (Ping timeout: 240 seconds)
[21:04:40] *** Joins: alx741 (~alx741@157.100.93.160)
[21:04:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[21:05:14] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[21:05:24] *** Joins: cheater (~Username@user/cheater)
[21:07:20] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7457:6675:c5ec:bb4b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:08:32] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[21:09:19] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:17:26] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:18:41] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7457:6675:c5ec:bb4b)
[21:21:19] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:21:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:22:29] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[21:26:02] *** Quits: acidjnk (~acidjnk@p200300d0c7271e9910698cbf36694c68.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:27:01] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 250 seconds)
[21:27:11] *** Joins: alx741 (~alx741@157.100.93.160)
[21:29:54] *** Joins: dignissimus (~dignissim@88-104-68-62.dynamic.dsl.as9105.com)
[21:30:01] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[21:32:00] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:33:28] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[21:34:04] <dignissimus> Can I use record syntac with GADTs? If so, have I made a mistake here? https://paste.tomsmeding.com/aeKbFFLr
[21:35:55] <geekosaur> I think the syntax is: data Foo where {fields} -> Constructor
[21:36:15] <monochrom> Heh, the correct syntax is e.g. LambdaExpression :: { lambdaVariable :: Variable, ... } -> Expression
[21:36:28] *** Joins: coot_ (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[21:37:05] <dignissimus> Thank you! 
[21:37:09] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 256 seconds)
[21:37:57] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[21:41:01] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[21:41:55] *** Joins: zmt01 (~zmt00@user/zmt00)
[21:41:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[21:45:42] *** Joins: spaceseller_ (~spacesell@31.147.205.13)
[21:48:07] *** Joins: alx741 (~alx741@157.100.93.160)
[21:48:34] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:52:35] *** Joins: neurocyte0132889 (~neurocyte@94.46.76.127)
[21:52:35] *** Quits: neurocyte0132889 (~neurocyte@94.46.76.127) (Changing host)
[21:52:35] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:52:56] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:52:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:53:15] *** Quits: spaceseller_ (~spacesell@31.147.205.13) (Quit: Leaving)
[21:54:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[21:55:18] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:55:47] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[21:57:42] *** Quits: tomku (~tomku@user/tomku) (Read error: Connection reset by peer)
[22:00:02] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:03:52] *** Joins: tomku (~tomku@user/tomku)
[22:07:56] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[22:08:20] *** Quits: thevishy (~Nishant@2405:201:f005:c007:2dcc:1488:1871:6935) (Quit: Leaving)
[22:10:39] *** Joins: alx741 (~alx741@157.100.93.160)
[22:11:03] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:11:03] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:11:03] *** Joins: wroathe (~wroathe@user/wroathe)
[22:12:34] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:14:03] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[22:14:58] *** Quits: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net) (Quit: ZNC - http://znc.in)
[22:16:30] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:18:41] *** Joins: learner-monad (~ehanneken@user/learner-monad)
[22:18:59] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[22:21:47] *** Joins: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net)
[22:23:30] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:24:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[22:27:35] *** Quits: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:28:09] *** Joins: coolnickname (uid531864@user/coolnickname)
[22:30:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:32:43] *** Joins: alx741 (~alx741@157.100.93.160)
[22:34:02] *** Quits: max22- (~maxime@2a01cb0883359800fd0e15f8c1058ba6.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:34:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[22:35:49] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[22:38:13] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Read error: No route to host)
[22:39:55] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[22:41:43] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:41:43] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:41:43] *** Joins: wroathe (~wroathe@user/wroathe)
[22:44:47] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:45:21] *** Joins: ensyde (~ensyde@2600:1702:2e30:1a40:d506:18a6:e0ef:8a3a)
[22:45:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[22:46:00] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Read error: No route to host)
[22:48:00] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[22:49:31] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[22:49:55] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:50:45] <dignissimus> I have `data Entails a b = Entails a b`, I have `type (:-) = Entails` which works fine but `(:-) = Entails` doesn't work as a synonym for the constructor, is it possible to do what I want to do? 
[22:50:52] *** Joins: travv0 (sid293381@user/travv0)
[22:51:57] <tomsmeding> dignissimus: what about `data a :- b = a :- b`?
[22:53:07] <tomsmeding> but if you don't want that: `(:-) = Entails` doesn't work for the same reason that `Something = Entails` doesn't work; you want to define a variable, but variables must be lowercase. And "uppercase symbols" in Haskell are symbols starting with : -- except for (:) itself, that is
[22:53:35] <tomsmeding> but if you want to define a "fake constructor", you can use pattern synonyms :)
[22:54:20] <tomsmeding> (low-tech alternative: try |- )
[22:56:07] <dignissimus> tomsmeding: Thank you!
[22:56:19] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[22:56:34] <dignissimus> I'll have to look into pattern synonyms, I just searched it but it wasn't making intuitive sense
[22:56:57] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:57:01] <dignissimus> I think I like `data a :- b = a :- b` with `type Entails = (:-)` and `entails = (:-)`
[22:57:42] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:01:32] *** Joins: zer0bitz (~zer0bitz@194.34.133.91)
[23:02:52] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[23:03:40] <tomsmeding> dignissimus: pattern (:-) :: a -> b -> Entails a b ; pattern (:-) = Entails
[23:03:54] <tomsmeding> but preferably understand what they do first :)
[23:04:00] <tomsmeding> I like your suggestion as well, more idiomatic
[23:04:10] <tomsmeding> (in a way)
[23:07:00] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[23:07:21] * tomsmeding is still amused that Haskell has a concept of an uppercase symbol
[23:08:00] *** Joins: alx741 (~alx741@157.100.93.160)
[23:09:31] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[23:09:50] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:10:05] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[23:10:14] *** Joins: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net)
[23:12:57] <Henson> for those interested in a follow up from yesterday's conversation, changing "unsafe" to "safe" fixed my problem.  I thought that term applied to the kind of function that was being called, and not the method by which Haskell called the functions.  I thought all of my functions were "unsafe" because they were in IO, not that Haskell was using an "unsafe" method of calling them.
[23:12:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:13:36] <geekosaur> yeh, I had that confusion at first as well. wish there were a better way to get that across
[23:14:02] <EvanR> using an IO type or not is how the "is IO" is expressed in the ffi
[23:14:14] <geekosaur> ironically it's almost the opposite: functions that do no IO, blocking, or memory allocation can be called "unsafe" for the most part
[23:14:30] <EvanR> if you don't put IO, you're promising the other end of this ffi call is pure
[23:14:46] <geekosaur> I think you always have to put IO
[23:14:55] <EvanR> for ffi bindings? no
[23:15:02] *** Quits: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[23:15:02] <geekosaur> you're just allows to use unsafeLocalState around the call if it isn't actually in IO
[23:15:08] <geekosaur> *allowed
[23:15:19] <EvanR> i.e. the C math library (if you're careful) can be not IO
[23:21:09] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[23:21:38] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 252 seconds)
[23:21:49] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Client Quit)
[23:21:58] *** Joins: max22- (~maxime@2a01cb08833598003c7cbbeb6c92ab00.ipv6.abo.wanadoo.fr)
[23:22:02] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[23:24:13] *** Joins: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net)
[23:25:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:29:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[23:29:20] *** Joins: wroathe (~wroathe@user/wroathe)
[23:30:01] <dignissimus> Which is preferred? `sort ctx _ = ...` or `sort ctx = const $ ...`?
[23:30:29] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:30:29] <dignissimus> As an example: sort ctx = const $ ctx :- Judgement (TypeExpression (Kind KindType)) TypeOfKin
[23:31:26] *** Joins: alx741 (~alx741@157.100.93.160)
[23:33:36] *** Joins: Feuermagier_ (~Feuermagi@84.17.49.78)
[23:35:01] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:35:46] <hpc> what is that extra parameter normally?
[23:35:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[23:35:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:36:20] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[23:36:21] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[23:36:25] <dignissimus> hpc: List of "entailments"
[23:36:25] <tomsmeding> why make a distinction between the first and second parameter?
[23:36:45] <dignissimus> tomsmeding: What do you mean by that?
[23:36:49] <EvanR> the one with const $ is longer for no reason
[23:36:52] <hpc> tomsmeding: it could be like lens where you want to think of the partially applied function as a full object in and of itself
[23:36:57] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:02] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[23:37:09] <hpc> when in doubt i would definitely go with sort ctx _ though
[23:37:27] <tomsmeding> dignissimus: why would you even consider writing one with a normal argument ("ctx") and one with a pointfree function ("const") -- not saying it's not a good idea, just asking what the difference is
[23:38:14] <EvanR> maybe the sort is the second case in a list of equations
[23:40:37] *** Quits: Vajb (~Vajb@nabiicwveotvxswi5-2.v6.elisa-mobile.fi) (Ping timeout: 268 seconds)
[23:40:46] *** Joins: Vajb (~Vajb@2001:999:230:a44e:bc17:5155:7945:add1)
[23:41:14] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[23:41:35] <dignissimus> tomsmeding: I don't think there's a specific reason. I have `sort :: InferenceRule` and `type InferenceRule = Context -> [Entailment] -> Entailment`
[23:41:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:41:58] <dignissimus> These are the rules https://i.imgur.com/EfeOygF.png
[23:42:18] <tomsmeding> dignissimus: then I'd just go with sort ctx _ =
[23:42:27] <dignissimus> Thank you everyone
[23:42:34] <dignissimus> When would const be preferred?
[23:42:37] <tomsmeding> that, or sort = \ctx _ -> ..., if you feel like they shouldn't be proper arguments
[23:43:23] <tomsmeding> if there was a meaningful difference between the first and the second argument, like if it was 'sort :: A -> Rule' where 'type Rule = B -> C', then perhaps const -- but even then I'd probably just go with 'sort ctx _ ='
[23:43:35] <tomsmeding> or even 'sort ctx = \_ -> ...' :)
[23:44:27] <EvanR> const can make passing arguments to a higher order function more convenient, similar to partialling, flip, etc
[23:44:47] <EvanR> or section involving $
[23:47:06] <EvanR> e.g. you wrote sort ctx = assuming 1 arg, then later when something wants a 2 arg function you pass (const sort)
[23:48:39] *** Quits: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net) (Remote host closed the connection)
[23:49:29] *** Joins: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net)
[23:49:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:50:08] *** Quits: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d) (Quit: Client limit exceeded: 20000)
[23:52:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:53:58] *** Joins: alx741 (~alx741@181.199.42.79)
[23:54:49] *** Quits: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[23:57:03] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[23:58:08] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[23:58:08] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[23:58:11] *** allbery_b is now known as geekosaur
[23:59:06] *** Quits: euandreh (~euandreh@191.181.59.160) (Ping timeout: 245 seconds)
[23:59:13] *** Joins: otherwise (~otherwise@2601:602:880:90f0:9dc:9663:8c4e:291b)
[23:59:59] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
