[01:00:48] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Remote host closed the connection)
[01:03:56] <sham1> What ambiguity do you see coming from cdr?
[01:10:40] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[01:11:00] <theseb>  This simple 2 liner prints (2 3) ... (define (get_rest l) (cdr l))    (display (get_rest (list 1 2 3))) 
[01:11:11] <theseb> However, the list (list 1 2 3) is ephemeral and only exists in the function call stack
[01:11:25] <theseb> So seems it should be garbage collected and be missing when display looks for it?
[01:11:37] <theseb> (Yes I'm thinking too hard about lisp implementation)
[01:18:33] <Duns_Scrotus> The car will get garbage collected
[01:18:48] <Duns_Scrotus> The other two nodes still are retained
[01:20:06] <Duns_Scrotus> Each node in a list is a separate allocation
[01:32:05] <theseb> Duns_Scrotus: so the function stack is NOT nuked if parts are needed later? so you have to be SMART about whether you erase the ephemeral func call stack!
[01:32:36] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[01:35:43] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[01:42:41] *** Joins: TCZ (~tcz@91.150.178.124)
[01:51:43] <Duns_Scrotus> I mean, the call stack is still there, display’s stack frame is still there while display is running
[01:52:20] <Duns_Scrotus> And in that stack frame is a pointer to its argument, the cdr of our original list
[01:58:12] *** Joins: irontom (~user@2607:fcd0:aa80:1304::b42e)
[01:59:32] *** Joins: seninha (~seninha@user/seninha)
[02:01:11] <theseb> Duns_Scrotus: wait but you agree in general have function calls you need to nuke the function call stack?
[02:02:17] <Duns_Scrotus> I don’t know what you mean and I don’t agree with any interpretation I can think of for what you just said
[02:02:54] *** Joins: blake2b (~user@42.113.205.217)
[02:03:08] <blake2b> hiya schemers
[02:03:28] <blake2b> does anyone know of scheme startup benchmarks?
[02:05:44] <blake2b> sorry, I meant where I might find*
[02:12:32] *** ec_ is now known as ec
[02:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:13:15] <theseb> Duns_Scrotus: when you invoke a function...the parameters get set to arguments...after the function call that little bit of environment gets erased right?
[02:13:32] <theseb> Duns_Scrotus: sorry...different people use different jargon
[02:14:00] *** Quits: apg (~apg@71-34-103-243.ptld.qwest.net) (Ping timeout: 252 seconds)
[02:35:07] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:39:29] <wasamasa> blake2b: if jcowan doesn't have them, you'll have to make your own (and share with the world)
[02:55:26] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[03:00:58] <blake2b> wasamasa: inshallah
[03:02:24] <Zipheir> ecraven might know something about startup times.
[03:08:11] <dpk> i'm not sure how you'd sensibly measure that for AOT compilers?
[03:08:48] <dpk> how fast csi gives me a prompt isn't relevant; what matters is what comes out of csc
[03:09:02] <Zipheir> True.
[03:12:25] <weinholt> you can measure startup time with hyperfine: https://github.com/sharkdp/hyperfine
[03:14:26] <weinholt> some quick numbers from my computer: 249ms for chibi, 39.5ms for chez, 16.6ms for guile, 1ms for loko
[03:27:08] *** Quits: irontom (~user@2607:fcd0:aa80:1304::b42e) (Ping timeout: 252 seconds)
[03:37:47] <blake2b> weinholt: thanks! I will check out hypefine
[03:37:57] <blake2b> and woooooweee, loko is smokin'
[03:40:35] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[03:49:53] *** Joins: irontom (~user@69.174.103.168)
[03:52:43] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[03:53:09] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[03:58:34] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:19:48] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:964:33b9:5b34:486d)
[04:19:48] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:964:33b9:5b34:486d) (Changing host)
[04:19:48] *** Joins: skapata (~Skapata@user/skapata)
[04:35:48] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[04:35:48] *** Quits: irontom (~user@69.174.103.168) (Ping timeout: 240 seconds)
[04:38:58] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[04:52:20] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[04:58:33] *** Joins: zacque (~zacque@1.32.90.32)
[05:22:43] *** Joins: irontom (~user@69.174.103.168)
[05:28:39] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[05:29:57] *** Quits: X-Scale (~ARM@46.50.5.55) (Ping timeout: 256 seconds)
[05:29:57] *** X-Scale` is now known as X-Scale
[05:33:20] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:33:39] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[05:35:34] *** Joins: aeth (~aeth@user/aeth)
[05:39:51] <nulluint> does scheme have anything equivalent to clojure's keywords?
[05:41:26] *** Quits: Techcable (~Techcable@168.235.93.147) (Changing host)
[05:41:26] *** Joins: Techcable (~Techcable@user/Techcable)
[05:44:51] <Zipheir> nulluint: Many Scheme implementations provide keywords of some sort.
[05:44:58] *** Joins: X-Scale` (~ARM@89.214.146.25)
[05:45:25] <nulluint> Zipheir: could you point me at something? I was trying to google it
[05:45:34] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 272 seconds)
[05:45:50] *** X-Scale` is now known as X-Scale
[05:46:31] <Zipheir> nulluint: This is CHICKEN's version of keywords https://wiki.call-cc.org/man/5/Module%20(chicken%20keyword)
[05:47:09] <Zipheir> There have been SRFIs https://srfi.schemers.org/srfi-177/srfi-177.html, https://srfi.schemers.org/srfi-88/
[05:47:20] <nulluint> Zipheir: does Guile have anything like that?
[05:47:28] <Zipheir> I think only Racket has really gotten them right, though.
[05:47:32] <Zipheir> nulluint: No idea.
[05:47:59] <nulluint> Zipheir: on the srfi page it says Guile does
[05:48:13] <nulluint> thank you for those links
[05:49:33] <Zipheir> yw!
[05:52:03] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Ping timeout: 256 seconds)
[05:58:45] <daviid> nulluint: guile core supports keywords, no need to use srfi-88 (unless you'd really want to)
[05:58:47] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:02:04] *** Joins: seninha (~seninha@user/seninha)
[06:04:55] *** Joins: seninha_ (~seninha@user/seninha)
[06:07:18] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[06:07:32] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[06:07:51] *** Joins: seninha_ (~seninha@user/seninha)
[06:10:13] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[06:11:42] *** Joins: seninha (~seninha@user/seninha)
[06:12:52] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:22:27] *** Joins: seninha (~seninha@user/seninha)
[06:24:11] *** Quits: evdubs_ (~evdubs@user/evdubs) (Read error: Connection reset by peer)
[06:24:51] *** Joins: evdubs_ (~evdubs@user/evdubs)
[06:24:55] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[06:29:47] *** Quits: evdubs_ (~evdubs@user/evdubs) (Ping timeout: 256 seconds)
[06:34:00] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:34:04] *** Quits: irontom (~user@69.174.103.168) (Remote host closed the connection)
[06:37:21] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[06:38:55] *** Joins: mala (~mala@user/malaclyps)
[06:40:48] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: WeeChat 3.4)
[06:47:36] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[06:51:33] *** Quits: daviid (~user@179.210.58.162) (Ping timeout: 256 seconds)
[06:56:53] <ns12> Hello, can someone tell me what "(let ((x 1)) (letrec ((x 2) (y x)) x))" is supposed to return?
[06:57:49] <ns12> Is it supposed to produce an error, or is it supposed to return `2`?
[06:58:08] <Zipheir> ns12: Why would it signal an error?
[06:58:22] <ns12> Zipheir: That's what happens in MIT Scheme.
[06:58:29] <Zipheir> Really.
[06:58:47] <Zipheir> Well, it should be 2, since the inner binding shadows.
[06:59:06] <ns12> Zipheir: In version 11.2, the error is ";Unassigned variable: x".
[06:59:19] <Zipheir> Weird.
[06:59:46] <ns12> Zipheir: The error is caused by the x in the (y x).
[07:00:28] <ns12> "(let ((x 1)) (letrec ((x 2) (y x)) 'foobar))" will cause ";Unassigned variable: x".
[07:00:46] <Zipheir> CHICKEN produces an unspecified value for (let ((x 1)) (letrec ((x 2) (y x)) y)), incidentally.
[07:01:09] <Zipheir> ns12: It's due to the implementation of letrec.
[07:01:38] <Zipheir> CHICKEN does something like (let ((x <unspecified>)) (set! x ...) (set! y x)), I guess.
[07:01:46] <Zipheir> MIT just doesn't allow it.
[07:02:06] <Zipheir> But clearly y should be bound to 1 ...
[07:02:21] <Zipheir> No, sorry.
[07:02:28] <ns12> Which one is the correct behavior? From my (uneducated) reading of R7RS-small, I would say that the MIT Scheme behavior is correct.
[07:02:47] <ns12> "But clearly y should be bound to 1 ..." - I don't think so. y should be undefined.
[07:03:40] *** Quits: bacteriummourner (~bacterium@static-198-54-135-88.cust.tzulo.com) (Remote host closed the connection)
[07:04:32] <Zipheir> ns12: Not really.  It's an invalid letrec form, since the initial binding for y references x.
[07:04:32] <ns12> But I could be wrong because in Guile 3.0.8, "(let ((x 1)) (letrec ((x 2) (y x)) y))" returns 2. It appears that Guile makes letrec and letrec* the same.
[07:04:44] <Zipheir> Interesting.
[07:05:18] <Zipheir> I think MIT does the Right Thing here in raising an error.  CHICKEN silently gives you a bogus value for y.
[07:05:51] <ns12> Zipheir: "It's an invalid letrec form, since the initial binding for y references x" - Does this mean that the behavior for "(let ((x 1)) (letrec ((x 2) (y x)) ...))" is undefined in Scheme?
[07:06:10] <Zipheir> In R5RS where "it is an error" can mean many things, yes.
[07:06:17] <Zipheir> In R6 and R7, "it is an error".
[07:07:33] <Zipheir> ns12: R5RS errors: https://schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-2.html#%_toc_%_sec_1.3.2
[07:08:23] <Zipheir> Since letrec just says "it is an error" in R5, implementations don't have to signal it, so what CHICKEN does is just fine.
[07:08:38] <Zipheir> But Guile, being mostly R6-compliant, should definitely catch that.
[07:08:53] <ns12> Does this mean that Guile is not compliant with R6RS?
[07:10:42] <gwatt> Last I read, guile is taking the approach that correct r6rs programs will work in guile's r6rs mode, but invalid r6rs programs may also work
[07:10:47] <Zipheir> I don't think it is, in this case.  Take a look at the letrec spec..
[07:10:54] <Zipheir> *the R6 letrec spec
[07:11:32] <Zipheir> http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-2.html#node_toc_node_sec_11.4.6
[07:12:04] <Zipheir> "Implementations must detect references to a <variable> during the evaluation of the <init> expressions ... If an implementation detects such a violation of the restriction, it must raise an exception with condition type &assertion."
[07:12:10] <ns12> Zipheir: "Can letrec be the same as letrec*?" https://stackoverflow.com/questions/70108371/can-letrec-be-the-same-as-letrec
[07:12:26] *** Joins: daviid (~user@2804:18:582b:8506:f678:ce40:2ebe:b375)
[07:12:50] <Zipheir> IIUC that would not be valid, since the scoping is different.
[07:12:50] <ns12> Zipheir: Thank you for the reference. I am assuming that R7RS says similar things.
[07:13:11] <Zipheir> ns12: Hah, you would think!  R7RS-small did not adopt that language.
[07:13:36] <Zipheir> It's just "it is an error", as in R5RS.
[07:13:56] <ns12> 😢
[07:14:21] <ns12> I think MIT Scheme's behavior is good.
[07:14:41] <Zipheir> This is the kind of thing dpk and mnieper are trying to fix in R7RS.
[07:14:50] <Zipheir> ns12: Agreed.
[07:15:35] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[07:20:15] <ns12> Zipheir: From my understanding, the implementation of letrec* is something like this: (letrec* ((x a) (y b)) ...)  ->  (let ((x #<unspecified>) (y #<unspecified>)) (set! x a) (set! y b) ...)
[07:20:15] <ns12> Correct?
[07:23:03] <ns12> Zipheir: But I am having difficulties in finding the transformation of letrec that gives the MIT Scheme behavior.
[07:25:21] *** Joins: badkins (~badkins@136.56.92.199)
[07:28:16] <Zipheir> ns12: Maybe it's the Dybvig "letrec reloaded" implementation, or something else entirely.
[07:28:29] <Zipheir> (Too bad Riastradh isn't here, he'd probably know.)
[07:29:42] <ns12> Zipheir: MIT Scheme's transformation feels something like this: (letrec ((x a) (y b)) ...) -> (let () (define x) (define x-temp) (define y) (define y-temp) (set! x-temp a) (set! y-temp b) (set! x x-temp) (set! y y-temp) ...)
[07:29:43] <ns12> Where "x-temp" and "y-temp" are unique gensymed variable names.
[07:31:12] <Zipheir> Could be!
[07:32:31] <ns12> Zipheir: However, this looks like more work than the letrec* transformation. I am surprised that letrec could be more complex than letrec* ...
[07:33:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[07:40:51] *** Joins: ramrunne1 (~dsp@78.141.218.152)
[07:41:00] *** Joins: chris2 (cky@meredith.poweredbytaylor.com)
[07:41:04] *** Joins: light_ (~light@user/light)
[07:41:06] *** Joins: elflng_ (~elflng@5.28.137.182)
[07:41:29] *** Quits: cky (cky@meredith.poweredbytaylor.com) (*.net *.split)
[07:41:29] *** Quits: light (~light@user/light) (*.net *.split)
[07:41:29] *** Quits: elflng (~elflng@5.28.137.182) (*.net *.split)
[07:41:29] *** Quits: ramrunner (~dsp@78.141.218.152) (*.net *.split)
[07:44:11] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[07:44:40] *** Joins: m455 (~m455@user/m455)
[07:49:19] *** Joins: irontom (~user@69.174.103.168)
[07:57:03] *** Quits: irontom (~user@69.174.103.168) (Ping timeout: 256 seconds)
[07:57:20] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[08:04:06] *** Joins: badkins (~badkins@136.56.92.199)
[08:07:25] *** Quits: Techcable (~Techcable@user/Techcable) (Ping timeout: 240 seconds)
[08:08:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[08:17:47] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[08:20:03] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[08:32:09] *** light_ is now known as light
[08:45:27] *** Quits: klovett (~klovett@107.116.92.97) (Quit: ZZZzzz…)
[09:07:34] *** Quits: daviid (~user@2804:18:582b:8506:f678:ce40:2ebe:b375) (Ping timeout: 268 seconds)
[09:08:14] *** Quits: blake2b (~user@42.113.205.217) (Ping timeout: 260 seconds)
[09:09:21] *** Joins: Techcable (~Techcable@user/Techcable)
[09:25:00] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[09:25:38] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[09:57:59] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[09:58:37] *** Joins: klovett (~klovett@107.116.92.97)
[10:01:20] *** Quits: klovett (~klovett@107.116.92.97) (Client Quit)
[10:11:36] *** Quits: zacque (~zacque@1.32.90.32) (Remote host closed the connection)
[10:25:01] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[10:25:17] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[10:32:16] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:33:27] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[11:02:24] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[11:04:37] *** Joins: Techcable (~Techcable@user/Techcable)
[11:10:48] *** alMalsamo is now known as lumberjack123
[11:13:41] *** Quits: zwr (~zwr@2804:d45:b966:fb00:2034:c204:70d1:cb4e) (Ping timeout: 256 seconds)
[11:32:31] *** Joins: zacque (~zacque@1.32.90.32)
[11:43:02] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: WeeChat 3.4)
[11:58:35] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[12:05:57] *** Joins: badkins (~badkins@136.56.92.199)
[12:10:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[12:11:58] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[12:20:35] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[12:26:09] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[13:00:51] *** Joins: s-liao (~s-liao@101.86.164.158)
[13:07:24] *** Joins: daviid (~user@179.210.58.162)
[13:11:34] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:5e66:8d:7679:aecb)
[13:21:31] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:5e66:8d:7679:aecb) (Quit: Client closed)
[13:24:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:26:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:28:58] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[14:04:24] *** Joins: amoe (~amoe@visarend.solasistim.net)
[14:18:07] *** Quits: lwhjp` (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Remote host closed the connection)
[14:39:01] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[14:47:07] *** Joins: notzmv (~zmv@user/notzmv)
[14:53:15] *** Joins: Darkcoal (~user@user/Darkcoal)
[14:54:45] *** Joins: civodul (~user@guix/contributor/civodul)
[15:10:47] *** Joins: s-liao (~s-liao@101.86.164.158)
[15:22:50] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[15:26:57] *** Joins: seninha (~seninha@user/seninha)
[15:32:39] *** Joins: TCZ (~tcz@91.150.178.124)
[15:43:09] *** Joins: s-liao (~s-liao@101.86.164.158)
[15:49:34] *** Joins: badkins (~badkins@136.56.92.199)
[15:53:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[16:06:34] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:33:43] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[16:35:36] *** Joins: aeth (~aeth@user/aeth)
[16:36:30] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[16:39:16] *** Joins: puts (~tcz@91.150.178.124)
[16:40:44] *** Quits: TCZ (~tcz@91.150.178.124) (Read error: Connection reset by peer)
[16:44:46] *** Joins: badkins (~badkins@136.56.92.199)
[16:45:48] *** Quits: puts (~tcz@91.150.178.124) (Ping timeout: 240 seconds)
[16:49:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[16:55:19] *** Joins: badkins (~badkins@136.56.92.199)
[16:55:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[16:59:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[17:20:07] *** Joins: zwr (~zwr@2804:d45:b966:fb00:77fe:55bd:621e:2223)
[17:25:07] *** Joins: livoreno (~livoreno@user/notzmv)
[17:32:13] *** Joins: klovett (~klovett@107.116.92.97)
[17:38:59] *** Joins: lispy (~lispy@user/lispy)
[17:50:08] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[17:50:15] *** Joins: robin_ (~robin@user/terpri)
[17:53:44] *** Joins: s-liao (~s-liao@101.86.164.158)
[17:57:54] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 268 seconds)
[17:59:43] *** Joins: Darkcoal (~user@user/Darkcoal)
[18:01:35] *** Quits: sjamaan (~sjamaan@chicken/developer/sjamaan) (Quit: brb)
[18:02:14] *** Quits: Darkcoal (~user@user/Darkcoal) (Read error: Connection reset by peer)
[18:02:20] *** Joins: sjamaan (~sjamaan@chicken/developer/sjamaan)
[18:07:58] *** Joins: Darkcoal (~user@user/Darkcoal)
[18:17:50] *** Joins: badkins (~badkins@136.56.92.199)
[18:18:14] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[18:18:57] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[18:21:16] *** Joins: Darkcoal (~user@user/Darkcoal)
[18:24:37] *** Joins: zacque (~zacque@1.32.90.32)
[18:26:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:29:15] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[18:34:25] *** Joins: TCZ (~tcz@91.150.178.124)
[18:59:34] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 268 seconds)
[19:00:55] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[19:01:01] *** Joins: Darkcoal (~user@user/Darkcoal)
[19:01:14] *** Joins: robin_ (~robin@user/terpri)
[19:13:52] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[19:24:25] *** Quits: TCZ (~tcz@91.150.178.124) (Ping timeout: 256 seconds)
[19:27:16] *** Joins: TCZ (~tcz@91.150.178.124)
[19:31:40] *** Parts: TCZ (~tcz@91.150.178.124) ()
[19:41:11] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[19:58:58] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[20:00:21] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[20:00:58] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[20:01:23] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:09:57] *** Joins: karlosz (~karlosz@193.137.37.182)
[20:18:07] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:f52e:1e16:af5a:322a)
[20:18:07] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:f52e:1e16:af5a:322a) (Changing host)
[20:18:07] *** Joins: skapata (~Skapata@user/skapata)
[20:20:33] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:5e66:8d:7679:aecb)
[20:40:53] *** Quits: karlosz (~karlosz@193.137.37.182) (Quit: karlosz)
[20:44:52] *** Joins: karlosz (~karlosz@193.137.37.182)
[20:46:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:59:44] *** Quits: karlosz (~karlosz@193.137.37.182) (Quit: karlosz)
[21:12:11] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:12:42] *** Joins: karlosz (~karlosz@193.137.37.182)
[21:17:52] *** Quits: karlosz (~karlosz@193.137.37.182) (Quit: karlosz)
[21:44:19] *** Joins: badkins (~badkins@136.56.92.199)
[21:51:25] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[21:52:15] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:52:23] *** Joins: badkins (~badkins@136.56.92.199)
[22:04:40] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:05:30] *** Joins: badkins (~badkins@136.56.92.199)
[22:07:50] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:07:59] *** Joins: badkins (~badkins@136.56.92.199)
[22:30:00] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[22:31:11] *** Joins: ns12 (~ns12@user/ns12)
[22:56:14] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:5e66:8d:7679:aecb) (Quit: Client closed)
[22:56:51] *** Joins: lispy (~lispy@user/lispy)
[23:07:14] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:07:38] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:24:56] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[23:29:41] *** Joins: badkins (~badkins@136.56.92.199)
[23:37:09] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 252 seconds)
[23:37:22] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[23:39:11] *** Joins: jao (~jao@45.152.183.53)
