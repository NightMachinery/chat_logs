[00:00:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:07:10] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:11:52] *** Quits: pve (~pve@37-136-64-105.rev.dnainternet.fi) (Quit: leaving)
[00:16:16] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:19:47] <Arcsech> <patrice> "salt rock lamp: that talk..." <- If you like this talk, check out his new book, "Software Design for Flexibility". I'm not very far in yet, but this talk seems to stem from many of the ideas discussed in the book.
[00:25:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:25:16] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:e8a4:9c79:a421:d583)
[00:27:58] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:28:19] <patrice> Arcsech: yes, I have it, started reading it a couple of weeks ago (after watching the video I linked), screamer seems to be embodiment of the ideas in the book.
[00:28:44] <patrice> or is it the other way around, based on the dates...
[00:30:44] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[00:33:28] <greyrat> `(time (load quicklisp-init))` takes from 0.6 seconds to 1.2 for me. Is this normal? I don't think it used to get this much time.
[00:34:16] <greyrat> (Does it change depending on what packages are installed?!)
[00:34:26] *** Quits: zazzerino (~user@2600:1700:6004:8470::49) (Remote host closed the connection)
[00:40:32] <Arcsech> Looks like Screamer had its roots at MIT, so I wouldn't be surprised if there was direct cross-pollenation between screamer and GJS
[00:41:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:45:53] <saltrocklamp[m]> <Arcsech> "If you like this talk, check out..." <- i willl, thank you!
[00:46:30] <patrice> yes indeed. I'm curious to read the book further now, see if they use CPS in GJS at all.
[00:47:42] <patrice> but just like SICP it's very dense book
[00:50:30] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[00:50:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[00:52:27] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 265 seconds)
[00:52:57] *** Quits: travv0 (sid293381@user/travv0) (Ping timeout: 250 seconds)
[00:53:01] *** Quits: dbotton (sid492350@id-492350.lymington.irccloud.com) (Ping timeout: 245 seconds)
[00:53:08] *** Quits: splittist (sid17737@id-17737.tinside.irccloud.com) (Ping timeout: 252 seconds)
[00:53:23] *** Quits: jsatk (sid304796@id-304796.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[00:53:25] <lisp123> patrice: Which book is GJS?
[00:53:36] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:53:41] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (Ping timeout: 246 seconds)
[00:53:42] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[00:53:49] *** Quits: stylewarning (sid241636@id-241636.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[00:53:49] *** Quits: sgithens (sid10659@id-10659.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[00:53:51] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[00:53:55] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[00:53:55] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[00:54:05] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[00:54:07] *** Quits: victor (sid208353@user/victor) (Ping timeout: 240 seconds)
[00:54:08] *** Quits: griffinmb (sid410590@id-410590.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[00:54:08] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[00:54:15] *** Quits: jhi (sid81469@id-81469.lymington.irccloud.com) (Ping timeout: 250 seconds)
[00:54:18] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 260 seconds)
[00:54:32] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[00:54:34] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 250 seconds)
[00:54:46] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[00:54:54] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[00:54:56] *** Quits: jmercouris (sid438340@id-438340.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[00:55:00] *** Joins: jhi (sid81469@lymington.irccloud.com)
[00:55:14] *** Quits: d_run (sid83858@id-83858.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[00:55:25] *** Joins: gendl (sid100083@hampstead.irccloud.com)
[00:55:44] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:55:49] <patrice> lisp123: Gerald Jay Sussman - Software Design for Flexibility
[00:55:49] *** Joins: hubvu (sid495858@user/hubvu)
[00:56:01] <lisp123> patrice: Cheers
[00:56:12] *** Joins: d_run (sid83858@hampstead.irccloud.com)
[00:56:19] *** Joins: iisi (sid19824@hampstead.irccloud.com)
[00:56:20] *** Joins: jmercouris (sid438340@hampstead.irccloud.com)
[00:56:23] *** Joins: griffinmb (sid410590@helmsley.irccloud.com)
[00:56:36] *** Joins: IUSR (sid348938@hampstead.irccloud.com)
[00:57:16] *** Joins: pl (sid98063@helmsley.irccloud.com)
[00:57:16] *** ChanServ sets mode: +o pl
[00:57:41] *** Joins: conjunctive (sid433686@helmsley.irccloud.com)
[00:58:24] <pjb> "Software Design for Flexibility -- How to avoid Programming Yourself in a Corner" is co-authored by Chris Hanson & Gerarld Jay Sussman.
[00:58:42] <pjb> SDF-HTAPYINAC
[00:58:46] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[00:58:48] *** Joins: jsatk (sid304796@helmsley.irccloud.com)
[00:58:54] *** Joins: victor (sid208353@user/victor)
[00:59:04] <pjb> SDF-HTAPYIAC
[00:59:12] *** Joins: elderK (uid205007@helmsley.irccloud.com)
[01:00:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[01:03:51] *** Quits: patrice (~patrice@2603:301c:604:2a00:978:548c:bb05:9859) (Changing host)
[01:03:51] *** Joins: patrice (~patrice@user/patrice)
[01:04:46] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[01:04:57] *** Joins: patrice (~patrice@user/patrice)
[01:05:28] *** Joins: scymtym (~user@ip6-2001-638-504-20d0-1000-0-0-3.VPN.Dyn.CIT-EC.NET)
[01:07:08] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[01:07:08] *** Joins: ullbeking (sid5364@user/ullbeking)
[01:07:27] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[01:08:08] *** Joins: travv0 (sid293381@user/travv0)
[01:08:12] *** Joins: splittist (sid17737@id-17737.tinside.irccloud.com)
[01:08:22] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[01:09:00] *** Joins: stylewarning (sid241636@id-241636.helmsley.irccloud.com)
[01:09:00] *** Joins: sgithens (sid10659@id-10659.helmsley.irccloud.com)
[01:12:01] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[01:12:38] *** Joins: dra (~dra@2a04:4540:6401:bd00:3877:c19a:a252:523a)
[01:13:17] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:16:20] <_death> here's how perl programmers avoid corners: on one side of a string, they tie themselves; on the other, a stick or a tree.. then they start walking
[01:26:19] *** Quits: hayley (~theemacss@2001:470:69fc:105::234) (Changing host)
[01:26:19] *** Joins: hayley (~theemacss@user/hayley)
[01:27:29] <greyrat> _death: Coincidentally, today I wrote my first non-one-liner perl script. It was pretty great! Rather arcane and some rough edges, but I did what I wanted surprisingly easily.
[01:28:14] <greyrat> How do I dump a lisp image using `sb-ext:save-lisp-and-die` with all my dependencies loaded, and then load scripts using this image as a base? 
[01:28:49] <pjb> By dumping a lisp image using `sb-ext:save-lisp-and-die` with all my dependencies loaded, and then load scripts using this image as a base.
[01:30:30] *** Joins: akoana (~ah@user/akoana)
[01:32:31] <greyrat> pjb: I can dump, but I have no idea how to load a script file `a.lisp` using this image.
[01:38:29] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[01:42:47] *** Joins: beach` (~user@2a01:cb19:150:3400:c969:654c:71df:64a7)
[01:44:49] <_death> I have a shell script (say called 'mysbcl') that passes --core and a final "$@" to sbcl, and then in a script I can have #!/path/to/mysbcl --script
[01:45:09] <_death> check the manpage for more info.. night
[01:47:02] *** Quits: beach (~user@2a01:cb19:150:3400:34da:254c:9f5b:12b2) (Ping timeout: 260 seconds)
[01:47:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[01:48:16] *** Joins: patrice (~patrice@2603:301c:604:2a00:5001:ba27:89a4:25e1)
[01:48:26] *** Quits: gaqwas (~john@dynamic-077-009-090-094.77.9.pool.telefonica.de) (Ping timeout: 245 seconds)
[01:49:15] *** Joins: selwyn (~selwyn@user/selwyn)
[01:50:12] *** Quits: patrice (~patrice@2603:301c:604:2a00:5001:ba27:89a4:25e1) (Client Quit)
[01:50:19] *** Joins: patrice (~patrice@user/patrice)
[01:51:44] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:55:48] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:57:15] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[02:05:57] <greyrat> Thanks, I'll check it out.
[02:11:06] *** Quits: frgo (~frgo@p200300deef0cee00d17979c22d881345.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:11:34] *** Joins: frgo (~frgo@p200300deef0cee00d17979c22d881345.dip0.t-ipconnect.de)
[02:12:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:18:48] <pjb> greyrat: dump an executable image. Then use that executable as interpret of your script.
[02:19:29] <greyrat> Dump it without specifying a `:toplevel`?
[02:20:25] <greyrat> (sb-ext:save-lisp-and-die "batteryful-sbcl" :executable t)
[02:20:27] <greyrat> ?
[02:20:51] <pjb> Yes.
[02:24:19] *** Quits: loskutak (~loskutak@gw.mecom.cz) (Ping timeout: 252 seconds)
[02:24:36] *** Joins: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net)
[02:27:48] *** Quits: patrice (~patrice@user/patrice) (Ping timeout: 265 seconds)
[02:29:01] *** Quits: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net) (Client Quit)
[02:55:33] *** Quits: dra (~dra@2a04:4540:6401:bd00:3877:c19a:a252:523a) (Remote host closed the connection)
[02:57:02] *** Quits: mortemeur (~mortemeur@pool-173-76-107-201.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[03:03:05] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Ping timeout: 265 seconds)
[03:05:10] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[03:11:46] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 245 seconds)
[03:12:07] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[03:19:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:23:12] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:26:17] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[03:28:26] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[03:28:50] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[03:29:09] *** Joins: igemnace (~ian@user/igemnace)
[03:33:10] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:39:04] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[03:41:09] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[03:46:54] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[03:47:13] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[03:47:59] *** Joins: patrice (~patrice@user/patrice)
[03:49:21] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 265 seconds)
[03:50:40] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[03:51:22] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[03:58:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[03:58:45] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:00:27] *** Quits: NeoCron (~NeoCron@p200300c4cf18cd00433f901d5cf4f3d0.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:02:03] *** Quits: patrice (~patrice@user/patrice) (Ping timeout: 265 seconds)
[04:03:05] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 260 seconds)
[04:05:53] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[04:10:16] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Ping timeout: 265 seconds)
[04:26:34] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[04:34:56] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:36:52] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:e8a4:9c79:a421:d583) (Remote host closed the connection)
[04:38:26] *** Quits: JeromeLon (~jerome@2a00:23c7:99da:6600:ea86:291:a20e:c7f3) (Ping timeout: 245 seconds)
[04:38:50] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:45:39] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[04:46:09] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:47:37] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:47:44] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[04:49:14] *** Joins: srhm (~srhm@user/srhm)
[04:50:34] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:50:44] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 265 seconds)
[04:53:32] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[04:53:34] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Remote host closed the connection)
[05:00:56] *** Joins: JeromeLon (~jerome@2a00:23c7:999f:3700:d5b:5351:c18d:a667)
[05:28:55] *** Joins: Alfr (~Alfr@user/alfr)
[05:30:14] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[05:32:40] *** Joins: patrice (~patrice@user/patrice)
[05:39:25] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[05:55:59] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[05:59:24] *** Joins: prxq_ (~quassel@x4db690f5.dyn.telefonica.de)
[05:59:30] *** Quits: prxq (~quassel@x4db5b5a2.dyn.telefonica.de) (Ping timeout: 265 seconds)
[06:02:19] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[06:06:52] *** Joins: _abrantesasf_ (~abrantesa@187.36.170.211)
[06:07:14] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Ping timeout: 265 seconds)
[06:12:05] *** Quits: _abrantesasf_ (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:15:00] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:16:31] *** Parts: akoana (~ah@user/akoana) ()
[06:25:32] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[06:26:01] *** beach` is now known as beach
[06:26:08] *** ChanServ sets mode: +o beach
[06:26:34] *** beach sets mode: -o beach
[06:29:49] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[06:30:24] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[06:31:28] <beach> Good morning everyone!
[06:34:18] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[06:58:15] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:09:10] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[07:09:35] *** Quits: semz (~none@user/semz) (Ping timeout: 265 seconds)
[07:10:04] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 265 seconds)
[07:11:14] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[07:12:29] *** Quits: utis (~utis@84.208.165.160) (Ping timeout: 265 seconds)
[07:15:50] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:22:30] *** Joins: semz (~none@user/semz)
[07:29:05] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[07:39:29] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Quit: Quit)
[07:46:59] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 245 seconds)
[07:55:09] *** Quits: jealousmonk (~user@2804:431:e7c4:cbd0:ae30:e39b:f4a:15d4) (Quit: ERC (IRC client for Emacs 27.1))
[07:59:50] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Remote host closed the connection)
[08:00:19] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[08:09:15] <bitspook[m]>  Good morning!
[08:24:44] <beach> Hello bitspook[m].
[08:30:04] *** Quits: xaotuk (~sasha@89.110.231.41) (Ping timeout: 252 seconds)
[08:30:26] *** Joins: xaotuk (~sasha@109.245.227.247)
[08:32:29] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[08:39:00] *** Quits: xaotuk (~sasha@109.245.227.247) (Ping timeout: 265 seconds)
[08:39:23] *** Joins: xaotuk (~sasha@89.110.231.41)
[08:42:24] <dre> I need a good project to work with to help me learn CL
[08:42:42] <dre> all the projects I come up with are like mini python startup things
[08:42:45] <beach> Sounds good.  What are you interested in?
[08:43:25] <dre> not sure, startups really
[08:43:44] <beach> Information systems, games, web stuff, compilers, programming tools?
[08:44:25] <dre> I'm learning a bit of C# for game dev, (unity) - and both my job and (interest?) are in web and web-systems (crud etc)
[08:44:34] <dre> I love programming tools, that's a good shot
[08:44:43] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[08:45:00] <beach> http://metamodular.com/Common-Lisp/suggested-projects.html
[08:45:09] <dre> I'd learn emacs if I wasn't so involved in vim
[08:45:35] <dre> interesting, thanks
[08:46:01] <beach> Sure.  Feel free to ask questions if you want.
[08:46:36] *** Quits: charles__ (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 265 seconds)
[08:46:59] <dre> is there any good videos about the "philosophy" of lisp?
[08:47:45] <beach> Hard to say.  But you can ask here or in #clschool.  It depends a bit on what you mean by that word.
[08:48:20] <dre> oh coo, interesting, thanks. I'll stop wasting time :P
[08:48:35] <dre> I'll hope to ramp up my CL usage in the new year.
[08:49:06] <beach> You are wasting people's time only if you don't improve despite the information you are give. :)
[08:49:15] <dre> :P good point
[08:52:40] <beach> For starters, Common Lisp is not considered a "functional programming language" but a "multi-paradigm language", so you will see pure functional style in Common Lisp perhaps less often than many people expect.
[08:53:19] <beach> A lot of modern Common Lisp code uses the Common Lisp Object System, which is totally different from more traditional object-oriented languages (luckily).
[08:54:40] *** Joins: igemnace (~ian@user/igemnace)
[08:56:03] <hayley> I could provide my own "philosophy of Lisp", but it wouldn't be the philosophy of Lisp, as many people have come to drastically different conclusions than I have. So I suspect there isn't one.
[08:56:31] <dre> yeah I get you
[08:56:51] <dre> can't gasp water, etc :P
[08:57:24] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[09:00:11] <hayley> While beach provides good advice, I suspect you are looking for some deep meaning with a "philosophy", and I don't think there is any.
[09:08:53] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 268 seconds)
[09:10:30] *** Joins: amk (~amk@109.255.169.126)
[09:13:11] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[09:18:14] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[09:28:36] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[09:41:25] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 260 seconds)
[09:46:14] *** Joins: pve (~pve@37-136-238-169.rev.dnainternet.fi)
[09:46:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:48:40] <lisp123> Is there a way for ASDF to load all files in a directory?
[09:50:22] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[09:53:18] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[09:53:44] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[09:53:59] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[09:54:10] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[09:54:14] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[09:54:22] <pve> lisp123: https://github.com/pve1/alphabetical-asdf
[09:58:30] <lisp123> pve: That's a great tool!
[09:58:52] <pve> lisp123: Thanks, I'm still on the fence :)
[10:00:04] <lisp123> Do I just need to do (asdf:defsystem #:my-stem :defsystem-depends-on ("alphabetical-asdf") :class "alphabetical-asdf:system" :dependencies (...)) and no :file or any other commands?
[10:00:33] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[10:00:43] <pve> lisp123: yep, that should work
[10:01:39] *** Joins: amb007 (~a_bakic@185.36.22.93.rev.sfr.net)
[10:01:56] <lisp123> pve: Thanks. IMO this is great for utilities :) The future me thanks you again :D
[10:06:00] <pve> lisp123: no problem, I have another one I call "lexicographic-loader" that does the same thing but without ASDF
[10:07:17] <pve> which lets you "require directories", though I haven't uploaded that one yet
[10:07:17] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:08:46] <pve> (I must credit jackdaniel for "lexicographic", don't think I would have come up with it myself :)
[10:14:16] <lisp123> Nice, will check it out too
[10:14:38] <lisp123> (If you upload it, no rush - I think the ASDF one is just what I'm after)
[10:17:32] <pve> lisp123: If you're into small utilities and stuff like that, you might check out:
[10:17:37] <pve> https://github.com/pve1/make-system-loader
[10:17:54] <pve> I just uploaded it yesterday, so it's a work in progress
[10:19:32] <pve> It takes an asdf system, and creates a file containing a bunch of LOAD forms that can load the system using e.g. sbcl --script
[10:20:25] <pve> or load the files of that system and its dependencies without asdf, rather
[10:21:40] *** Quits: amb007 (~a_bakic@185.36.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[10:21:59] *** Joins: amb007 (~a_bakic@203.149.22.93.rev.sfr.net)
[10:22:06] *** Joins: cosimone (~user@93-44-187-179.ip98.fastwebnet.it)
[10:22:09] <lisp123> pve: Sounds interesting
[10:23:59] <lisp123> Will try and use it when setting up web servers
[10:25:53] <pve> lisp123: well I guess it depends a lot on your workflow, saving a core could work just as well, if not better
[10:26:11] <pve> I'm still experimenting
[10:26:45] <lisp123> That's true
[10:28:14] *** Quits: amb007 (~a_bakic@203.149.22.93.rev.sfr.net) (Ping timeout: 245 seconds)
[10:29:23] *** Joins: amb007 (~a_bakic@198.150.22.93.rev.sfr.net)
[10:33:02] <pve> lisp123: I'm mostly thinking of the situation where you work a lot in the shell (like a remote server) and want, say 10, command line utils and don't feel like saving a separate core for each util
[10:33:25] <pve> there are of course other solutions, like packing all of them into the same core
[10:34:35] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:35:14] <lisp123> That makes sense
[10:36:06] *** Joins: gaqwas (~john@dynamic-077-004-112-242.77.4.pool.telefonica.de)
[10:36:25] <lisp123> Sometimes having too much in one program can make it confusing for users, although its likely the same number of commands whether one splits it up into separate utilities or keeps them together
[10:37:24] <lisp123> There's also a counterpoint, so no real right answer
[10:37:27] <pve> I still don't know if there are situations where this "loader" business can beat saving a core, but as I said, I'm experimenting
[10:38:35] <lisp123> pve: Good luck, will be curious to listen to your conclusions at a later stage
[10:39:19] <pve> SBCL fasls can be executed directly from the shell, so there's a tiny convenience factor too
[10:39:28] <pve> thanks
[10:40:06] *** Quits: amb007 (~a_bakic@198.150.22.93.rev.sfr.net) (Ping timeout: 245 seconds)
[10:40:31] *** Joins: amb007 (~a_bakic@132.38.22.93.rev.sfr.net)
[10:46:34] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[10:47:17] *** Quits: amb007 (~a_bakic@132.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[10:47:24] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 245 seconds)
[10:47:28] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[10:47:54] *** Joins: cranium (~cranium@user/cranium)
[10:55:34] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:58:34] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[11:02:47] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[11:06:00] <pjb> dre: https://gitlab.com/informatimago/cl-suggested-projects
[11:06:44] <mfiano> I decided to take a break this week from regular coding and dive into the classic PAIP. I must say it really is a wonderful book that opened up my mind on a few topics.
[11:07:34] *** Joins: selwyn (~selwyn@user/selwyn)
[11:08:01] <mfiano> The one thing to keep in mind is being nearly 30 years old, some of the code is dated. For example, structs are used everywhere instead of classes. CLtL2 was published in two years prior, but CLOS must not have been popular yet.
[11:08:29] <mfiano> He does write good code though, so it's not bad to read!
[11:10:02] <mfiano> Next up is going to be AIAMA which I expect to take _much_ longer to work through.
[11:11:08] <jackdaniel> AIAMA?
[11:11:14] <jackdaniel> minion: what is AIAMA?
[11:11:18] <minion> maybe you need to ask my master, chandler - he knows a lot
[11:11:29] <jackdaniel> minion: tell me about AIAMA
[11:11:29] <minion> Sorry, I couldn't find anything in the database for ``AIAMA''.
[11:11:33] <pve> AIMA?
[11:11:46] <mfiano> His other book. Artificial Intelligence - A Modern Approach
[11:11:57] <jackdaniel> ah, this one - thanks
[11:12:18] <pve> did that one cover deep learning?
[11:12:38] <mfiano> The 4th edition adds a lot of ML/DL
[11:12:44] <mfiano> Which was released very recently
[11:12:44] <pve> right
[11:12:56] <mfiano> Prior to that not really from what I could tell
[11:13:11] <mfiano> 4e also replaced all the Lisp with pesudocode
[11:15:31] *** Joins: makomo_ (~makomo@user/makomo)
[11:15:41] <pve> I think the one we used in school had pseudo code too, about 15 years ago. But I could be remembering this wrong..
[11:20:51] <mfiano> Ah I am misremembering, not you.
[11:21:58] <mfiano> Ok here's the deal:
[11:22:31] <mfiano> 1e had an online code repository offering CL versions of the algorithms
[11:22:42] <mfiano> 2 and 3 had Lisp, Java, and Python
[11:22:48] <mfiano> 4 Has only Java and Python
[11:23:15] <jackdaniel> 5 Will have JavaPythscript
[11:23:20] <pve> a sad trend indeed
[11:23:39] <mfiano> https://github.com/aimacode/aima-lisp
[11:23:49] <mfiano> As you can see, last update to the lisp material was 6 years ago
[11:24:11] <mfiano> Well besides readme changes
[11:24:44] <pve> It would be cool to compare the code between the three languages
[11:27:25] <lisp123> mfiano: Take it as a positive, lack of code means one has to write it themselves
[11:27:43] <mfiano> Looks like the text of 4e lies. I see only the Python repository has been updated for 4e, not Java
[11:27:51] <lisp123> Guy Steele ported TeX from WAITS to ITS
[11:28:17] <mfiano> ITS, the language that gave us GPS?
[11:29:07] <lisp123> something Time Share (brb)
[11:29:16] <mfiano> PAIP introduces GPS in chapter 4. It was marketed as the AI program that could solve any problem (General Problem Solver)
[11:29:17] <hayley> The Incompatible Timesharing System?
[11:30:44] <lisp123> yep thats the one
[11:31:50] <mfiano> Looks like I got my acronyms wrong. Not ITS
[11:35:16] <mfiano> IPL, the language that inspired McCarthy to create Lisp.
[11:35:31] <mfiano> Pioneered list manipulation and a few other lispy things
[11:36:11] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[11:38:26] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:39:24] <pjb> IPL and FLPL http://informatimago.com/articles/flpl/index.html
[11:41:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:50:04] *** Quits: xaotuk (~sasha@89.110.231.41) (Quit: xaotuk)
[11:51:54] *** Joins: selwyn_ (~selwyn@user/selwyn)
[11:54:04] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 245 seconds)
[12:04:13] *** Joins: loskutak (~loskutak@gw.mecom.cz)
[12:05:22] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:07:15] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[12:07:19] *** Quits: scymtym (~user@ip6-2001-638-504-20d0-1000-0-0-3.VPN.Dyn.CIT-EC.NET) (Ping timeout: 252 seconds)
[12:08:38] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[12:09:09] *** Joins: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net)
[12:23:49] *** Quits: gaqwas (~john@dynamic-077-004-112-242.77.4.pool.telefonica.de) (Ping timeout: 252 seconds)
[12:26:49] *** Quits: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net) (Quit: karlosz)
[12:36:45] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[12:40:00] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:01:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[13:12:49] *** Joins: donovanquixote (~Donovan@c-98-246-129-179.hsd1.or.comcast.net)
[13:29:41] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[13:30:18] *** Quits: ahlk (~user@2600:1700:31c0:3a10::48) (Ping timeout: 260 seconds)
[13:32:32] *** Joins: random-nick (~random-ni@87.116.183.117)
[13:37:55] <greyrat> pjb: Using the dumped executor to run scripts worked so well I couldn't even dream of it :)) I am now tempted to go take a look at Julia's image dumper again. Though Julia is slow to start even with no deps ... What other languages have you seen with such a capibility?
[13:39:29] *** Quits: loskutak (~loskutak@gw.mecom.cz) (Ping timeout: 246 seconds)
[13:39:39] <greyrat> What is so sad is that I had researched the startup costs of CL the first thing when I was deciding to start learning/using it. I found the image dumping thing, but only as a way to dump each individual script, which, with the images huge sizes, was not all too sustainable. I still went with CL because my next best option was Golang, which, *ughh*.
[13:42:32] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 265 seconds)
[13:42:44] *** Joins: amb007 (~a_bakic@148.38.22.93.rev.sfr.net)
[13:43:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:43:55] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 268 seconds)
[13:52:13] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[13:56:06] *** Quits: amb007 (~a_bakic@148.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[13:56:33] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:01:45] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:11:23] *** Quits: frgo (~frgo@p200300deef0cee00d17979c22d881345.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:11:34] *** Joins: frgo (~frgo@p200300deef0cee00d17979c22d881345.dip0.t-ipconnect.de)
[14:16:36] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:18:02] *** Joins: loskutak (~loskutak@2001:718:2:1672::38c)
[14:18:07] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Remote host closed the connection)
[14:19:21] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:21:17] *** Joins: scymtym (~user@2001:638:504:20e0:a511:8858:bc9:9aae)
[14:41:12] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[14:41:38] *** Joins: srhm (~srhm@user/srhm)
[14:49:00] *** Joins: raeda_ (~raeda@72.49.219.33)
[14:50:29] *** Quits: raeda (~raeda@72.49.219.33) (Remote host closed the connection)
[14:58:37] *** Joins: makomo_ (~makomo@user/makomo)
[15:03:03] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[15:04:11] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[15:06:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:11:23] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[15:11:32] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[15:37:52] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[15:44:30] <pjb> greyrat: any image-based language. Smalltalk, Logo. Of course, they're all derived from lisp that was image based from the start…
[15:45:11] <pjb> greyrat: it's easy to use the pname in the image to dispatch to one function or the other. https://github.com/informatimago/commands
[15:45:55] <jackdaniel> pjb: was lisp really image-based from the start? didn't it pick it up from smalltalk?
[15:46:13] <pjb> LISP 1.5 is an image-based environment, even if it uses punched cards and line printers…
[15:46:29] <pjb> only LISP 1.5 didn't have save-lisp-image yet ;-)
[15:46:58] *** Joins: kpoeck (~kpoeck@80.149.96.222)
[15:47:12] <pjb> Good question, which was the first lisp with a save-image function?
[15:47:22] <pjb> interlisp came in the 80s, so after Smalltalk…
[15:47:35] <pjb> lisp machines had such a feature IIRC.
[15:48:03] <jackdaniel> I see, thanks
[16:02:53] <greyrat> Is the new Smalltalk dialect, Pharo, any good? It's a GUI lang and it doesn't play nice with emacs, so I haven't yet tried it. 
[16:03:11] *** Quits: loskutak (~loskutak@2001:718:2:1672::38c) (Ping timeout: 265 seconds)
[16:05:24] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[16:06:31] <srji> using sbcl on windows10 and try to (load "sdraw.generic") or (load "sdraw.gui") and get file not found
[16:09:37] <greyrat> srji: (Not an expert, but how have you "installed" these deps? Are they in your load path?)
[16:09:51] <greyrat> Perhaps try using quicklisp?
[16:10:09] <srji> i couldnt find sdraw using quicklisp
[16:10:27] <srji> i was just beeing naive and intended sdraw is part of sbcl distribution
[16:10:40] <greyrat> I have no idea, it might be.
[16:11:14] <random-nick> LOAD is used to load a .lisp file, not to load a system
[16:11:31] <srji> i found the sdraw repo on github
[16:12:09] <random-nick> you could try cloning it into your quicklisp installation's local-projects folder
[16:12:22] *** Joins: loskutak (~loskutak@2001:718:2:1672::38c)
[16:13:22] *** Quits: totoro (~totoro@user/totoro) (Read error: Connection reset by peer)
[16:13:27] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[16:14:12] <srji> i did. it is working now, ty
[16:17:26] *** Joins: Bike (~Glossina@71.69.170.70)
[16:17:26] *** ChanServ sets mode: +o Bike
[16:19:05] *** Joins: Michal (~user@5.30.23.247)
[16:19:41] *** Quits: loskutak (~loskutak@2001:718:2:1672::38c) (Ping timeout: 245 seconds)
[16:20:09] <Michal> Hi, does anybody know how to create local versions of special variables (i.e. they "die" after the function completes)?
[16:21:55] <lisp123> (let ((*test* asdf)) (declare (special *test*)) ....)?
[16:22:55] <random-nick> what do you mean by local versions of special variables?
[16:23:16] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:23:39] <Michal> Does that work?
[16:23:50] <Michal> Will *test* die after the let form finishes?
[16:25:06] <Michal> If I use defparameter, then it always exists, I just want it to exist for the length of time of the enclosing function (but then refer to it in other functions called within that enclosing function)
[16:25:47] <random-nick> why not just have the global value be a dummy value like nil?
[16:26:40] <Michal> Would I need to reset it to nil at the end of the function then? To be safe
[16:26:47] <random-nick> if you do it like this then all functions which use it will have to have a (declare (special *test*))
[16:27:10] <Xach> Michal: no. special variables "reset" automatically. that makes them very nice.
[16:27:16] <random-nick> LET and PROGV don't change the global value/binding of a special variable
[16:27:30] <Xach> another option is defining it unbound.
[16:27:31] <random-nick> they create a new binding within their dynamic extent
[16:29:19] <Michal> Oh so I could do like (defvar *x*) .... (let ((*x* "value")) .... ) and *x* will resort to unbound after the let form finishes?
[16:30:17] <beach> Michal: yes, but it will still be globally special.  Declare it special locally as some people suggested, and it will "disappear".
[16:31:01] <Michal> Oh I see. That's cool.
[16:31:19] <random-nick> Michal: you could look at it that way, but *x* will never be "value" globally
[16:32:23] <Michal> Thanks Xach, random-nick Beach. I think I get it
[16:32:26] <random-nick> this makes a difference since most implementations make sure that a let from one thread doesn't change the binding in another thread
[16:32:40] <random-nick> also makes a difference for SYMBOL-VALUE
[16:32:48] <Michal> Is there any other gotchas to be aware of?
[16:35:35] *** Joins: jealousmonk (~user@2804:431:e7c4:cbd0:ae30:e39b:f4a:15d4)
[16:36:43] <jackdaniel> name your special variables *with-earmuffs* to not confuse them
[16:37:20] <jackdaniel> otherwise say you have a variable car and in entirely unrelated function you type (let ((car :some-car)) …) -- you will dynamically shadow the original value then
[16:41:23] <Michal> Gotcha
[16:41:28] <Michal> I will do that
[16:50:06] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Write error: Connection reset by peer)
[16:50:06] *** Quits: MatrixTravelerb4 (~voyagert2@2001:470:69fc:105::22) (Write error: Connection reset by peer)
[16:50:06] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Read error: Connection reset by peer)
[16:50:06] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Read error: Connection reset by peer)
[16:50:06] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Write error: Connection reset by peer)
[16:50:06] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Read error: Connection reset by peer)
[16:50:06] *** Quits: hayley (~theemacss@user/hayley) (Read error: Connection reset by peer)
[16:50:07] *** Quits: bitspook[m] (~bitspookm@2001:470:69fc:105::fcd4) (Remote host closed the connection)
[16:50:07] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (Write error: Connection reset by peer)
[16:50:08] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Write error: Connection reset by peer)
[16:50:08] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Read error: Connection reset by peer)
[16:50:08] *** Quits: saltrocklamp[m] (~elementio@2001:470:69fc:105::5065) (Read error: Connection reset by peer)
[16:50:08] *** Quits: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d) (Read error: Connection reset by peer)
[16:50:09] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Write error: Connection reset by peer)
[16:50:09] *** Quits: bhyde[m] (~bhydematr@2001:470:69fc:105::70e) (Write error: Connection reset by peer)
[16:50:09] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Write error: Connection reset by peer)
[16:50:10] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Write error: Connection reset by peer)
[16:50:10] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Write error: Connection reset by peer)
[16:50:11] *** Quits: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7) (Write error: Connection reset by peer)
[16:50:11] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (Remote host closed the connection)
[16:50:11] *** Quits: dualinverter[m] (~dualinver@2001:470:69fc:105::16a7) (Write error: Connection reset by peer)
[16:50:11] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Write error: Connection reset by peer)
[16:50:12] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Remote host closed the connection)
[16:50:12] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Remote host closed the connection)
[16:51:54] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[16:55:18] *** Parts: Michal (~user@5.30.23.247) (ERC (IRC client for Emacs 27.1))
[16:58:38] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 246 seconds)
[17:00:21] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[17:00:21] *** Joins: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7)
[17:00:21] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[17:00:21] *** Joins: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d)
[17:00:21] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[17:00:21] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[17:00:22] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[17:00:22] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[17:00:23] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[17:00:23] *** Joins: saltrocklamp[m] (~elementio@2001:470:69fc:105::5065)
[17:00:23] *** Joins: hayley (~theemacss@2001:470:69fc:105::234)
[17:00:23] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[17:00:23] *** Joins: dualinverter[m] (~dualinver@2001:470:69fc:105::16a7)
[17:00:23] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[17:00:23] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[17:00:23] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[17:00:23] *** Joins: bhyde[m] (~bhydematr@2001:470:69fc:105::70e)
[17:00:23] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[17:00:23] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[17:00:23] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[17:00:34] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[17:00:34] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[17:00:34] *** Joins: bitspook[m] (~bitspookm@2001:470:69fc:105::fcd4)
[17:09:26] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[17:11:18] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:17:41] *** Joins: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc)
[17:17:59] <rain3> how to set the documentation string for a symbol-macro?
[17:22:36] <jackdaniel> rain3: (setf (documentation 'foo 'symbol-macro) "bla bla") but it doesn't work on sbcl (ccl accepts that without fail)
[17:24:23] <jackdaniel> but it doesn't have a specialization for the symbol-macro, it just have "accepting" default method, unlike sbcl -- you may want to define methods for the accessor documentation
[17:24:36] <jackdaniel> specialized on (eql 'symbol-macro)
[17:26:24] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[17:34:20] <pjb> (defmethod documentation ((symbol symbol) (kind (eql 'symbol-macro))) (getf symbol 'symbol-macro-documentation))
[17:34:20] <pjb> (defmethod (setf documentation) (new-doc (symbol symbol) (kind (eql 'symbol-macro))) (setf (getf symbol 'symbol-macro-documentation) new-doc))
[17:34:53] *** Joins: scymtym_ (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[17:34:54] <pjb> (defmethod documentation ((symbol symbol) (kind (eql 'symbol-macro))) (get symbol 'symbol-macro-documentation))
[17:34:54] <pjb> (defmethod (setf documentation) (new-doc (symbol symbol) (kind (eql 'symbol-macro))) (setf (get symbol 'symbol-macro-documentation) new-doc))
[17:35:01] <pjb> (setf (documentation 'foo 'symbol-macro) "bla bla")  (documentation 'foo 'symbol-macro) #| --> "bla bla" |#
[17:35:46] <pjb> rain3: of course, you have to choose where to store that documentation.  Also, when and how to store it and retrieve it from a fasl file.
[17:36:57] *** Quits: scymtym (~user@2001:638:504:20e0:a511:8858:bc9:9aae) (Ping timeout: 265 seconds)
[17:39:05] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[17:40:29] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:41:10] *** Quits: scymtym_ (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[17:41:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:45:10] <rain3> jackdaniel, pjb: thanks
[17:47:56] *** Joins: selwyn (~selwyn@user/selwyn)
[17:48:10] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[17:48:35] *** Joins: selwyn (~selwyn@user/selwyn)
[17:51:42] *** Quits: raeda_ (~raeda@72.49.219.33) (Quit: Leaving)
[17:52:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:54:12] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[17:55:09] *** Joins: srhm (~srhm@user/srhm)
[17:56:39] *** Joins: danirukun[m] (~dpetrovsm@2001:470:69fc:105::7911)
[17:56:51] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[18:01:04] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 268 seconds)
[18:01:17] *** Joins: khrbt (~znc@user/khrbt)
[18:07:24] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 245 seconds)
[18:19:05] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Read error: Connection reset by peer)
[18:19:19] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[18:27:03] <beach> ELS has been announced.  Porto, March 21-22.
[18:28:07] *** Joins: loskutak (~loskutak@gw.mecom.cz)
[18:38:04] *** Joins: rogersm (~rogersm@90.166.177.48)
[18:40:10] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[18:42:17] <JeromeLon> Is it typical for a common lisp implementation to use generic functions to implement features that have to deal with subclasses? For example Stream has several subclasses, is read-byte a generic function?
[18:43:05] <beach> JeromeLon: I suspect not.  Simply because most implementations began life before CLOS was part of the standard.
[18:43:29] <beach> JeromeLon: Also, because of that, most implementations include CLOS last in the build process, or at least very late.
[18:43:30] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[18:44:18] <beach> JeromeLon: That's why I designed SICL bootstrapping from scratch.  We boot CLOS first.  This makes it possible for many more functions to be generic.
[18:45:31] <JeromeLon> beach: interesting, thanks!
[18:45:38] <beach> Another reason would be performance.  Most implementations implement generic dispatch in a not very optimal way.
[18:45:49] <beach> We fixed that one too. :)
[18:47:37] *** Joins: molson__ (~molson@2001-48F8-704A-CA1-0-0-75F-1013-static.midco.net)
[18:50:31] *** Joins: makomo (~makomo@user/makomo)
[18:50:54] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-100E-static.midco.net) (Ping timeout: 265 seconds)
[18:51:40] *** Joins: makomo_ (~makomo@user/makomo)
[18:53:13] <johnjay> beach: CLOS was bolted on to lisp later?
[18:53:16] <johnjay> er common lisp
[18:53:31] *** Quits: kpoeck (~kpoeck@80.149.96.222) (Quit: Client closed)
[18:54:04] <beach> Well, it's part of the standard, but there was a language named Common Lisp before the standard, and it is documented in the first edition of "Common Lisp, the Language".
[18:54:27] <beach> And most Common Lisp implementations started life before the standard was created.
[18:54:56] <beach> Like SBCL came from CMUCL which came from Spice Lisp.
[18:55:40] <gin> (print *list* f) prints the entire list into a file after a blank line? why does it insert a blank line at the top of the file?
[18:55:40] <johnjay> right. there's always an interplay between practice and the standards that codify them
[18:56:29] <beach> Like, KCL first came out in 1984, 10 years before the standard.  And KCL is an ancestor of ECL, just to name one more example.
[18:57:42] <gin> one more question. is there a pretty print alternative to (print *list* f) that neatly formats and indents nested items of the list while writing to the file?
[18:57:50] <beach> And Spice Lisp is from 1980.
[18:57:53] <johnjay> so I git cloned SICL repo and looked for build instructions. but the FAQ helpfully informs that SICL cannot be run at all
[18:58:19] <beach> johnjay: Correct.  It is not ready to be used.
[18:58:44] <johnjay> but the readme says i can get a repl
[18:59:04] <johnjay> I don't understand step 3: "Make sure the top-level directory can be found by ASDF"
[18:59:36] <beach> johnjay: It's a bit hard to explain.  Most SICL code can be executed, but it runs inside a host Common Lisp implementation used for bootstrapping.  But th code that runs has been compiled with the SICL compiler.
[18:59:59] <johnjay> so i need to startup sbcl and use it to load something with asdf?
[19:00:09] * johnjay used asdf like one time
[19:00:47] <beach> johnjay: I wouldn't bother if I were you.  It is not terribly interesting.  Look at the code instead.  Grep for `defgeneric' for instance.
[19:01:50] <gin> johnjay: do you not need to use asdf for packaging? if not asdf what else do you use?
[19:02:43] <JeromeLon> gin: that's the definition of print: "just like prin1 except that the printed representation of object is preceded by a newline and followed by a space."
[19:03:37] <johnjay> i don't use anything. i'm still learning how to use CL
[19:03:47] <gin> JeromeLon: yes, but why so? what was the reason that someone thought print should insert a newline?
[19:03:49] <johnjay> right now it looks like on debian I need.... cl-asdf from the repo
[19:04:36] <beach> gin: In a distant past, the convention was to start a fresh line rather than end with a newline.
[19:04:39] <johnjay> the alternative is to download asdf.lisp and put it... somewhere?
[19:05:00] <beach> johnjay: It is included in all Common Lisp implementations.
[19:05:21] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:ecc2:b934:94eb:5773)
[19:05:26] <JeromeLon> gin: for pretty printing, you want each object on a new line, which can be achieved by either adding a newline after or before each expression
[19:05:33] <gin> beach: wow! I had no idea. is there anything on the internet where I can read more about this or see examples?
[19:06:12] <beach> gin: I suspect it is an oral tradition.
[19:06:31] <johnjay> ah so I was supposed to do (require "asdf")
[19:06:33] <johnjay> that worked in sbcl
[19:06:35] <gin> JeromeLon: need to add spaces too for indentation after each newline. if there is something in the standard lib that would be very nice.
[19:07:18] <gin> and the right number of spaces too based on nesting level. before I write code for it want to be sure this is something that does not exist in the standard lib.
[19:07:28] <beach> gin: Did you try the pretty printer?
[19:07:36] <johnjay> i was trying to load something into sbcl before but it wasn't in quicklisp
[19:07:49] <johnjay> so i ended up installing CCL in a folder lol but dunno how to install it system wide
[19:08:14] <gin> beach: I didn't. let me look it up
[19:08:17] <johnjay> beach: i wonder what the cl-asdf package does on debian then if sbcl already has its own
[19:08:25] <johnjay> it apparently has *a lot* of .lisp files
[19:08:26] <beach> johnjay: Maybe read the install instructions?
[19:09:24] <beach> clhs *print-pretty*
[19:09:24] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/v_pr_pre.htm
[19:09:30] <beach> gin: ^
[19:09:41] <gin> thanks
[19:10:58] <johnjay> beach: i imagine i'm missing obvious stuff. I went to the sicl dir, started, sbcl, typed (require "asdf") and then (asdf:load-system :sicl-boot) but get error
[19:11:03] <JeromeLon> gin:when printing B after A, only the function printing B has all the information in hand to determine whether a newline should be inserted (as it could depend on the length of the representation of B), so this could be a possible rationale?
[19:11:06] <johnjay> well it's fine... at least i know asdf is loaded!
[19:11:49] <JeromeLon> (when A and B are sub-expressions)
[19:13:56] <beach> johnjay: It has to do with the first instruction, i.e. "make sure ...".  I think you are better off trying something simpler than booting SICL at this point.
[19:14:47] <johnjay> probably true
[19:15:16] <Josh_2> When using (ps:lisp <js generating fun>)  parenscript has a real issue with getting the nesting correct, is this just me?
[19:17:36] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 245 seconds)
[19:21:21] <gin> (substitute #\o #\x "foo") => "foo". why isnt the result "fxx"? what i did wrong?
[19:21:53] <gin> oh I got the order of arguments wrong
[19:22:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[19:22:21] <gin> this works (substitute #\x #\o "foo") => "fxx"
[19:27:30] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[19:28:16] *** Joins: srhm (~srhm@user/srhm)
[19:30:19] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 245 seconds)
[19:31:10] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[19:31:40] <beach> So either everybody already knew about the ELS dates, or nobody understood what I was referring to.  So anyway, I hope many of you show up in Porto, March 21-22, 2022 for the European Lisp Symposium.  Even better, submit an article.
[19:32:11] <beach> ... Porto being a city in Portugal, for those who don't know.
[19:34:37] <greyrat> How do I replace the char 'U+00A0' with ' ' in a string?
[19:35:25] <beach> Do you not know what the character is?  That looks like a code point.
[19:35:45] <beach> You could try (code-char <code-point>) to turn it into a character.
[19:37:38] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:37:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:40:14] <edgar-rft> greyrat: I think most modern CL implementations will support something like (setf my-string (substitute #\Space (code-char ##a0) my-string))
[19:40:49] <edgar-rft> argh, (code-char #xa0) of course
[19:40:55] <greyrat> edgar-rft: Can't I just use #\NO-BREAK_SPACE ?
[19:41:25] <Bike> you probably can, or #\u+a0
[19:41:35] <edgar-rft> greyrat: yes, but you asked for 'U+00A0' :-)
[19:41:40] <JeromeLon> greyrat: yes, I am assuming that people were using code-char to teach you
[19:42:14] <greyrat> No, I found it manually, then converted it to decimal manually, then found out it was #\NO-BREAK_SPACE :)))
[19:42:38] <greyrat> (pandoc inserts it in orgmode files)
[19:42:57] <greyrat> Bike: this is the easiest by far :thumbs-up:
[19:48:25] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Client closed)
[19:49:58] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[19:56:58] <beach> greyrat: You converted it to "decimal"?  That's strange.
[19:57:37] <greyrat> I didn't know how to write hex literals, so I naturally had to convert it to decimal
[19:57:50] <beach> Hmm, OK.
[19:57:53] *** Joins: ebrasca (~user@librepanther.com)
[19:59:25] *** Joins: xsperry (~xs@user/xsperry)
[20:02:18] <greyrat> Is there a reader macro to write regexes? (basically it shouldn't treat '\' as special)
[20:03:19] <Bike> http://edicl.github.io/cl-interpol/#regular
[20:15:07] <greyrat> Bike: It errors on    #?/(?:\n|\A)\h*(?:(?::PROPERTIES:(?:.\n)*?:END:|(?:<<.*?>>))\h*/
[20:15:30] <greyrat> `illegal terminating character after a colon: #\(`
[20:15:55] <greyrat> I guess it wants to be too smart. Anything 'dumber'?
[20:18:12] <semz> I'm not sure how reliable Unicode character names are across implementations
[20:18:14] <Bike> error when? on my system that reads fine, but doesn't work as a regex because the >: parent groups are mismatched
[20:18:30] <Bike> though this isn't something i usually deal with, so i could be missing something obvious
[20:19:14] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:19:36] <semz> might be safer to go with (char-code ...) if portability is a concern, every implementation worth its salt will constant fold that
[20:19:45] <semz> uh, code-char i mean
[20:20:23] <Bike> the ?: groups are mismatched, i meant
[20:20:27] <greyrat> semz: have you seen any examples of unicode names being different?
[20:20:32] <Bike> typing is hard
[20:22:22] <semz> greyrat: #\HIRAGANA_LETTER_O is accepted by SBCL but not CCL
[20:23:09] <greyrat> Bike: They weren't mismatched in my actual code, I don't know why they pasted like that
[20:23:16] <greyrat> (?:\n|\A)\h*(?:(?::PROPERTIES:(?:.|\n)*?:END:)|(?:<<.*?>>))\h*
[20:23:34] <semz> The less "obscure" ones will probably be more reliable, and at least CCL and SBCL both accept #\No-Break_Space
[20:24:01] <Bike> i don't get an error from that either
[20:24:37] <Bike> either in reading in as a string or using as a regex
[20:26:19] <greyrat> (BTW the paste was probably corrupted by Lispy's "safe paste".)
[20:31:34] <greyrat> Bike: I can't read it at all. It also makes my emacs go crazy: https://files.lilf.ir/tmp/tmp.qcSVmq8jdB.png
[20:35:23] <Bike> and this is a read error? like you see it if you enter it at the repl or something?
[20:36:01] *** Joins: aksej[m] (~aksejwelt@2001:470:69fc:105::1:1175)
[20:39:22] <ebrasca> Do someone here uses bknr?
[20:41:29] <lisp123> ebrasca: Yes
[20:42:03] <lisp123> I wrote a guide on it --> https://ashok-khanna.medium.com/persistent-in-memory-data-storage-in-common-lisp-b-k-n-r-37f8ae76042f
[20:42:23] <ebrasca> How to deal with deletings thinks if they are referenced from more than one place?
[20:42:34] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[20:43:08] *** Joins: amb007 (~a_bakic@164.38.22.93.rev.sfr.net)
[20:43:23] <lisp123> What do you mean by referenced from more than one place?
[20:43:36] <ebrasca> lisp123: I have read the ones inside the source code, the tutorials.lisp !
[20:44:08] <ebrasca> lisp123: I have tags , a image may have many tags!
[20:44:12] <lisp123> ebrasca: Yes they are very good. It had an issue with some un-updated code which took me ages to figure out :(
[20:44:48] *** Parts: aksej[m] (~aksejwelt@2001:470:69fc:105::1:1175) ()
[20:45:33] <lisp123> So do you want to delete a certain tag from all images?
[20:45:44] <ebrasca> Yes
[20:46:15] <ebrasca> It leaves things like #<TAG DESTROYED> !
[20:46:23] <ebrasca> I don't like them
[20:48:18] <lisp123> Hmmm I'd have to look into it further. I'll do a mock example when I have some time. I am thinking to look at clear-class-indices
[20:48:56] <lisp123> Are your tags stored as classes or are they simply values within a list that is stored in a slot for the image class?
[20:50:42] <ebrasca> They are classes managed by bknr!
[20:50:52] <lisp123> (If tags stored as values within a list in a slot), I was thinking of doing image-with-tags to get all images with the tag you want to delete, then update each image my removing tag from the tag list and updating the slot of the image
[20:51:16] <lisp123> Yes, I suspect you have to have a look at clearing the indices for the tag class then
[20:51:33] <lisp123> And re-building it
[20:52:06] <lisp123> That should solve it (I remember doing that before)
[20:53:30] <lisp123> You are aware that you can have hash-list-index? A slot with a hash-list index can have a list of keys for its value, and you can filter by any of the keys. This is analagous to the concept of adding tags to your data
[20:54:31] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[20:54:54] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 245 seconds)
[20:56:33] <lisp123> ebrasca: Check out pages 25 & 26 of the pdf
[20:56:44] <lisp123> You will have to play around with that to get what you are after
[20:57:38] <Shinmera> etimmons: what would your preferred interface for hooking into Forge to provide missing libraries look like? Currently I have a warning condition on an unsatisfied dependency with a restart to either retry finding a match or using a provided one.
[21:02:44] *** Joins: khrbt (~znc@user/khrbt)
[21:05:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[21:07:05] <ebrasca> lisp123: Can hash-list-index work with strings?
[21:07:17] <lisp123> That's what I do :)
[21:07:28] <ebrasca> It can't find my alias...
[21:07:39] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[21:07:59] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:08:41] <lisp123> https://pastebin.com/upBDcAZR
[21:08:46] <lisp123> Example of hash-list-index
[21:08:58] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:ecc2:b934:94eb:5773) (Remote host closed the connection)
[21:10:04] *** Quits: nature (~nature@146.115.43.132) (Ping timeout: 250 seconds)
[21:10:41] <lisp123> Now the issue I face is that you cannot have a hash table with a class as the key (without a custom hash table, which isn't too hard in and of itself), so if you are storing your tags as classes, you need to account for that. But tags as plain strings should work out the box
[21:12:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:15:56] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 245 seconds)
[21:19:54] *** Quits: cosimone (~user@93-44-187-179.ip98.fastwebnet.it) (Ping timeout: 245 seconds)
[21:21:05] <ebrasca> tags can have aliases and implications!
[21:21:35] <ebrasca> They can't be just strings!
[21:22:31] <Josh_2> I think you can use something like (class-of ..) as the key?
[21:22:38] <Josh_2> Or class name
[21:22:43] <Josh_2> or type-of
[21:23:10] <Josh_2> (class-name (class-of ..))
[21:23:30] <lisp123> Try defining tags as a list of attributes vs. a class & also add some logic outside of bknr to do lookups against aliases (e.g. an alias table to collect a list of tags that have the same alias)
[21:24:57] <lisp123> Josh_2: Actually, I should retract my comment partially. As long as there are unique instances for each class and not duplicates, one can use them as hash-keys....problem is when one generates two classes separately that are the same content-wise but are stored as separate objects
[21:27:47] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:29:14] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[21:30:09] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[21:44:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[21:44:53] *** Quits: amb007 (~a_bakic@164.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:45:39] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[21:46:18] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:47:52] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:53:28] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[21:53:37] *** Quits: molson__ (~molson@2001-48F8-704A-CA1-0-0-75F-1013-static.midco.net) (Quit: Leaving)
[21:54:11] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:00:07] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[22:05:45] *** Quits: seere (~seere@user/seere) (Read error: Connection reset by peer)
[22:06:18] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:07:49] *** Joins: klm2is (~klm2is@mail.2is-inc.com)
[22:11:55] *** Joins: selwyn (~selwyn@user/selwyn)
[22:13:38] *** Quits: klm2is (~klm2is@mail.2is-inc.com) (Quit: Leaving)
[22:20:25] *** Joins: selwyn_ (~selwyn@user/selwyn)
[22:23:14] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[22:23:24] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:23:49] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 252 seconds)
[22:24:11] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:29:40] *** Quits: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc) (Read error: Connection reset by peer)
[22:29:52] *** Joins: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc)
[22:34:54] *** Quits: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc) (Ping timeout: 260 seconds)
[22:45:23] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:49:45] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[22:55:57] *** Joins: djuber (~user@65.79.128.64)
[23:01:46] *** Quits: katya (~mariari@user/mariari) (Ping timeout: 252 seconds)
[23:15:47] *** Joins: katya (~mariari@user/mariari)
[23:16:36] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 265 seconds)
[23:22:36] *** Joins: akoana (~ah@user/akoana)
[23:26:39] <greyrat> When a value is shown as (:OBJ ("key" value) ...), what data structure it is? Can it be automatically turned into a hash table?
[23:28:02] <White_Flame> what's the "..."?  More (key val) pairs, or more :OBJ keywords in there, too?
[23:28:13] <greyrat> More key-value pairs
[23:28:24] <greyrat> I get from a JSON parser
[23:28:25] *** Joins: Alfr (~Alfr@user/alfr)
[23:28:27] <White_Flame> technically, the CDR of that list is an alist
[23:28:44] <White_Flame> and the CAR is just an indicator of what "type" of alist it is, a json object in this case
[23:29:02] <greyrat> Is it a "real object"? Or just a normal list?
[23:29:07] <White_Flame> it's a normal list
[23:29:21] <greyrat> What's the use of indicating its type then?
[23:29:30] <greyrat> A poor man's type checking?
[23:29:39] <White_Flame> there's probably (:OBJ (k v) (k v)...), (:ARRAY val val val ...), etc
[23:30:22] <greyrat> Is there a JSON parser that just gives me CL datastructures? A hashmap with lists?
[23:30:45] <Bike> cl-json can be configured to do that
[23:31:03] <White_Flame> not sure, I haven't used them much.  However, some let you configure how obj/array are accumulated
[23:31:17] <White_Flame> the simple list structure is so that you can consume it and create your own desired datastructures
[23:31:59] <Bike> yason parses json objects as hash tables by default, looks like
[23:32:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:32:28] *** Quits: JeromeLon (~jerome@2a00:23c7:999f:3700:d5b:5351:c18d:a667) (Quit: WeeChat 3.0.1)
[23:32:31] <greyrat> Thanks, I will check them out. 
[23:32:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:37:02] <greyrat> How do you inspect long string output in emacs slime/sly? sly elides them for me.
[23:37:16] <greyrat> I am now writing them to temp files, but that is so cumbersome.
[23:38:10] <Bike> well, slime doesn't elide anything by default. i'm kind of surprised sly does. are you sure it's not *print-length* or something?
[23:38:30] <greyrat> Bike: It says: [sly-elided string of length 2643]
[23:38:36] <Bike> huh.
[23:38:57] <pve> An old codebase I used to work on used lists like that pervasively, and called them "attribute lists" or "ATLs", i.e. (person name "John" age 30 ...) where the car indicated the "type" of object the list represented
[23:39:30] <pve> I always found them curious and wondered if it was a common thing back the 80's or 90's or so
[23:39:52] <Bike> greyrat: ah, if you check the sly manual, you want slynk:*string-elision-length* and slynk:*slynk-pprint-bindings*
[23:40:30] *** Joins: tfeb (~tfb@88.98.95.237)
[23:40:42] <akater[m]> pve: defstruct can implement structures this way if you ask for it.
[23:40:52] <Bike> the example even shows how to make sly stop binding *print-length*
[23:42:57] <pve> akater[m]: (:type list) gives me a list but it doesn't store the type anywhere..
[23:43:34] <pve> if that's what you meant
[23:44:07] <White_Flame> easily faked with (defstruct (foo (:type list)) (%type :foo) a b c)
[23:44:34] <White_Flame> no type checking on struct accessors, but at least a type indicator is there
[23:44:36] <greyrat> Bike: thanks, `(setf (cdr (assoc 'slynk:*string-elision-length* slynk:*slynk-pprint-bindings*)) nil)` worked.
[23:44:38] <akater[m]> pve: Search clhs defstruct for “binop”
[23:45:15] <pve> White_Flame: oh, that looks right
[23:46:21] <pve> akater[m]: ok I see it now
[23:46:30] <White_Flame> oh, :named
[23:46:36] <White_Flame> no need to "fake" it
[23:47:28] <pve> that's a new one for me :)
[23:47:50] <White_Flame> still no typechecking on accessors, though
[23:48:08] <White_Flame> (for the :named field, that is.  still obv typechecks for it being a list)
[23:48:37] <pve> I sometimes feel the clhs is a fractal of information
[23:51:05] *** Quits: donovanquixote (~Donovan@c-98-246-129-179.hsd1.or.comcast.net) (Remote host closed the connection)
[23:51:38] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
