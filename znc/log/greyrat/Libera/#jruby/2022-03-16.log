[18:11:02] <headius> good morning
[18:22:29] <headius> kares: I cleaned out stdlib and I'm trying again... perhaps a later jossl got unpacked over an earlier one and caused some loading oddities?
[18:59:26] <headius> kares: still seeing it ü§î
[19:09:13] <kares[m]> headius: if you have 0.11.0 as well as 0.12.1 around that might cause loading issues
[19:09:28] <kares[m]> having 0.12.2 along side 0.11 or anything older should not cause them
[19:09:55] <headius> jruby-openssl (0.12.2 java, default: 0.11.0 java)
[19:10:09] <kares[m]> hmm that should work
[19:10:18] <headius> I will uninstall 0.12.2 and run it again
[19:10:36] <headius> any reason we shouldn't update 9.3.4 to 0.12.2 default though?
[19:10:55] <headius> enebo and I were chatting about a 9.3.4 release next week or so
[19:11:16] <headius> enebo: we could chat about that now... not sure what other things should go in that release
[19:11:49] <enebo[m]> I will look at issues but I think we have been good in only targetting what we think we will work on
[19:12:33] <enebo[m]> wow 11 opens (1 never counts)
[19:13:02] <headius> I think I tagged a couple things I thought were quick fixes
[19:13:12] <headius> that range one seemed easy but I botched something
[19:14:33] <enebo[m]> yeah I think it is likely we call the method from Java and assume the behavior
[19:14:57] <headius> I thought I lined up the calls right but it broke a bunch of stuff
[19:17:02] <enebo[m]> https://github.com/jruby/jruby/pull/7012
[19:17:11] <enebo[m]> I just tagged this for 9.3.4.0
[19:21:48] <enebo[m]> At some time today I will look at https://github.com/jruby/jruby/issues/7102
[19:22:31] <enebo[m]> It seems there are some PRs for some of this and some dependent actions (like a release of logger?)
[19:26:41] <headius> I believe the ivar stuff is ready to go
[19:26:56] <headius> and again it is new functionality so should not affect much existing code
[19:27:50] <headius> enebo: I am testing some jcodings updates but will look at 9.3.4 tags after that
[19:28:28] <enebo[m]> ok
[19:35:05] <kares[m]> oh 9.3.4 next week would be great - I'll look into updating jossl to have latest in release
[19:35:42] <kares[m]> https://github.com/jruby/jruby/pull/7071 is smt partially blockinf 9.3 adoption in Logstash, but it's tagged for 9.3.4 so it will hopefully get in ...
[19:37:15] <enebo[m]> I just pinged reporter to hopefully get them to do a clean build
[19:37:31] <headius> I"m fine with merging it in any case
[19:39:30] <headius> I think I'm going to try to set up JRuby as a jcodings CI test... the tests in there are very limited but the CRuby encoding-related tests are pretty extensive
[19:39:59] <headius> currently bisecting to find a recent PR or commit that broke some CRuby tests
[19:40:53] <headius> probably would be wise to do this for other upstream projects like joni
[19:45:25] *** Quits: _whitelogger_ (~whitelogg@uruz.whitequark.org) (Remote host closed the connection)
[19:45:35] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[19:55:12] <headius> ahorek: I went ahead and merged your jcodings CESU PR but it broke some tests in JRuby 9.3 (which I was testing with a jcodings snapshot for my toUnsigned PR)
[19:55:38] <headius> Added a comment here with the failures: https://github.com/jruby/jcodings/pull/44
[19:55:51] <headius>  and added an issue for us to add JRuby encoding tests to jcodings CI: https://github.com/jruby/jcodings/issues/56
[19:56:23] <headius> not important for 9.3.4 but we should revert the PR and try again unless you can look at it soon
[20:13:03] <headius> https://github.com/jruby/jruby/issues/7030 requires the rework of framing and non-local jumps that is in progress for master and that would definitely not be cool to land in 9.3.4
[20:13:19] <headius> we could potentially fix it in the short term with a stack search but do we want to do that?
[20:13:49] <headius> it would mean all non-local breaks have to search scope stack for a target before raising, where they currently can just go for it
[20:14:21] <headius> granted that search may be quick in simple cases like ary.each {|x| break if x is what I want }
[20:21:20] <ahorek[m]> headius: MRI tests are outdated, we need these https://github.com/ruby/ruby/pull/3177/files
[20:22:50] <headius> aha so this should be ok on master
[20:22:59] <headius> we will need to patch the test on 9.3 when we update jcodings there
[20:24:00] <ahorek[m]> btw there're many new tests in ruby 2.6.9 vs jruby 9.3 branch https://github.com/jruby/jruby/tree/jruby-9.3/test/mri
[20:24:48] <headius> need to update 9.3 to 2.6.9 stuff ... not sure if that should happen in 9.3.4 or not
[20:25:12] <headius> I suppose it is better to do now than wait another several weeks to do 9.3.5
[20:25:38] <headius> enebo: thoughts?
[20:28:34] <headius> kares: removing 0.12.2 fixed my local issue so something is up with that
[20:28:42] <headius> I can reproduce the same error they see now
[20:31:02] <ahorek[m]> headius: https://github.com/jruby/jcodings/pull/57 a small fix for MAC issues
[20:31:44] <ahorek[m]> + after updating tests from https://github.com/ruby/ruby/pull/3177 jcodings should be green
[20:32:05] <headius> kares: https://github.com/jruby/jruby-openssl/issues/251
[20:34:09] <headius> ahorek: looks like those test fixes have not been backported to ruby_2_6 branch so I will request that
[20:36:00] <headius> and I will apply that patch directly for now
[20:42:18] <enebo[m]>   ahorek headius I think we should have up to date 2.6 tests which is totally fine so long as failures are excluded
[20:42:58] <headius> I can check stdlib, probably won't be many changes
[20:43:10] <ahorek[m]> aha, &apos; change is since ruby 3.0, so these tests won't match 2.6. Not sure if it's a problem to include more recent unicode in jruby 9.3 branch?
[20:43:17] <enebo[m]> I personally only see it as release work if you or me are doing that exclusion.  If ahorek is doing it then üëçÔ∏è
[20:43:40] <headius> ahorek: we ain't gonna branch jcodings so probably just have to accept any behavioral difference
[20:43:51] <headius> or not update jcodings anymore in 9.3
[20:44:43] <headius> of course sonatype does maintenance in the middle of me trying to sort this all out
[20:44:47] <enebo[m]> heh
[20:45:11] <headius> back now üëç
[20:45:38] <enebo[m]> Should we ask what the real negative consequence of having newer data will have in an older Ruby?
[20:45:51] <headius> I'll push a PR that updates these tests and uses jcodings snapshot and we will see how it looks
[20:45:57] <enebo[m]> I presume in most cases these are effectively fixes or new stuff 
[20:46:28] <enebo[m]> I guess if we see specific errors from it then it may answer that question.
[20:47:29] <enebo[m]> Some amount of MRI tests just exercise all the cases in some mongo loop.  I imagine anything with encodings probably has this somewhere.  
[20:50:33] <headius> ahorek: confirmed that test patch runs green on these tests with jcodings master
[20:50:43] <enebo[m]> sweet
[20:52:04] <ahorek[m]> I don't think it's a big deal, but for instance new encodings like CESU8 shouldn't be suddenly available in 2.6.x
[20:52:31] <enebo[m]> ahorek: yeah I knew that was going to show up but what is the actual ramifications there?
[20:53:03] <headius> https://github.com/jruby/jruby/pull/7142
[20:53:55] <enebo[m]> If we are running a Ruby program which was originally running on MRI 2.6.9 it would complain if it found that but if we work then the error would be that we should reject it.  Seems pretty inconsequential.  Perhaps this is too simplistic
[20:54:06] <enebo[m]> simplistic being my thinking here
[20:54:28] <headius> if nothing fails with updated jcodings I would say it is pretty safe... new encodings shouldn't break anyone
[20:54:42] <ahorek[m]> if you want to keep compatibility, even encoding bugs are "features", you don't want to change behavior in bugfix releases (except security fixes)
[20:55:21] <enebo[m]> ahorek: I think that is generally true but .3 or .4 for us is so early that we tend to be a bit more forgiving
[20:55:58] <enebo[m]> It also is a tradeoff.  Should we be spending times branching jcodings and making this totally compatible vs working on 9.4?
[20:56:21] <enebo[m]> and I realize you may be saying you might be willing to do this...
[20:57:53] <ahorek[m]> yes if we accept these small changes (mostly bugs, but changes), it shouln't be a problem to include the new version in 9.3
[20:57:53] <headius> the alternative is explicitly avoiding adding the new encoding in JRuby because we add them programmatically right now
[20:58:36] <enebo[m]> I think we just accept this risk.  I just don't see anyone caring
[20:58:47] <ahorek[m]> agreed
[20:59:01] <enebo[m]> I think about the universe of programs which would expect CESU8 to not exist and I think that is 0
[20:59:03] <enebo[m]> ok
[21:00:41] <enebo[m]> this seems like we are done but I am trying to think of a time we have added something additive during a release series and ended up having a problem.  By that I mean like actual new methods or a new type.
[21:01:12] <headius> I think we have come up with some theoretical cases but no real ones emerged
[21:01:14] <enebo[m]> headius: can you think of a single example?  I am thinking maybe something like someone expects from reflective method results and we provided a new method unexepcted
[21:01:43] <headius> like respond_to? X and using that to detect ruby version
[21:01:59] <headius> but that is more obvious than this, adding methods that don't exist in that version
[21:02:02] <enebo[m]> I remember in the older days doing some workshops and someone would complain he had methods like 'java' when asking for instance_methods on something
[21:02:20] <headius> this is largely just adding more encodings to the database
[21:02:27] <enebo[m]> That was not us adding a feature but it is the general pattern
[21:02:29] <enebo[m]> ueaj
[21:02:33] <enebo[m]> that == yeah
[21:06:05] <headius> something's screwy with GHA today... it is not submitting PR jobs until much later
[21:06:32] <enebo[m]> the tubes are clogged
[21:07:12] <enebo[m]> MRI tests looks like it took 5 minutes to start
[21:07:26] <enebo[m]> I am pretty sure no other org work is running right now
[21:07:40] <enebo[m]> We may be sharing some queue of sorts across all of jruby
[21:09:32] <headius> enebo: I retargeted https://github.com/jruby/jruby/issues/7030 at 9.4 but I'm on the fence about adding the stack search
[21:09:55] <headius> it would fix it for 9.3 but slow down non-local breaks some amount
[21:12:03] <enebo[m]> So we know one gem which uses this
[21:12:13] <enebo[m]> I don't know how important that gem is 'in_threads'
[21:12:26] <enebo[m]> It is also likely they worked around this by now too
[21:12:46] <headius> it is only so they can catch an error condition and do something else, where what we have now just bubbles out the error
[21:12:53] <headius> I'm not sure how critical it is
[21:13:00] <enebo[m]> yeah
[21:13:23] <enebo[m]> master is a safe bet for the PR and 9.3 becomes more important if we see this as needed
[21:13:34] <enebo[m]> but I don't know either on the needed part
[21:15:00] <headius> I asked reporter how critical it is
[21:15:34] <headius> here's another one to discuss: https://github.com/jruby/jruby/pull/7055
[21:16:22] <headius> by the nature of how it is implemented, define_singleton_method almost always uses public visibility, but there's a single stupid edge case that will honor the frame visibility
[21:18:54] <headius> jeremyevans agrees that edge case is a bug and apparently it was introduced in 2.1
[21:18:55] <enebo[m]> oh yeah this one
[21:19:12] <headius> this is the last item for eliminating ostruct warnings on its shadowing of core methods
[21:19:20] <headius> if we mark this as always public then it doesn't need frame
[21:19:57] <headius> and so we don't warn when it is shadowed by ostruct
[21:19:57] <enebo[m]> I think the other part of jeremy's response is even more important.  It no longer behaves this way
[21:20:11] <enebo[m]> So between 2.1 and 3?  it flipped
[21:21:06] <headius> he was referring to using def
[21:21:13] <enebo[m]> This gives us a little cover to point out the behavior is a) inconsistent depending on scope which is weird in this case b) MRI realized they had this inconsistency and fixed it
[21:21:14] <headius> but since def does not do non-public the argument is that define_singleton_method shouldn't either
[21:21:40] <headius> MRI does honor frame visibility for that one edge case he shows since 2.1
[21:21:53] <headius> and still does
[21:22:08] <enebo[m]> Ah well I guess we wait on: https://github.com/ruby/ruby/pull/5636
[21:22:25] <enebo[m]> Then what I said will be trusih :)
[21:22:27] <headius> $ rvm ruby-3.1 do ruby -ve 'class Foo; class << Foo; private; Foo.define_singleton_method(:foo){}; end; end; Foo.foo'
[21:22:27] <headius> ruby 3.1.0p0 (2021-12-25 revision fb4df44d16) [x86_64-darwin20]
[21:22:27] <headius> -e:1:in `<main>': private method `foo' called for Foo:Class (NoMethodError)
[21:22:42] <headius> ok let's punt to 9.3.5 then
[21:22:55] <headius> or just do it?
[21:22:59] <headius> I dunno
[21:23:00] <headius> it doesn't break anything
[21:23:11] <enebo[m]> Let's talk through this from a what could happen 
[21:23:23] <headius> so someone does that weird pattern and their method ends up public
[21:23:32] <enebo[m]> Do people expect methods defined to not have public in those cases?
[21:23:58] <headius> it would not work that was in 2.0 or earlier and may not work that way in 3.2+ if jeremyevans PR is merged and my issue is accepted
[21:24:06] <enebo[m]> Reflective methods would start showing them
[21:24:11] <headius> yes
[21:24:18] <headius> that would be the most visible result
[21:24:18] <enebo[m]> well the public ones
[21:24:32] <enebo[m]> callers via send would start working
[21:24:33] <headius> it does not change anything about the behavior of the method
[21:24:43] <headius> and calls that succeeded before still succeed
[21:24:47] <headius> calls that failed before failed before
[21:24:50] <enebo[m]> in cases where it wouldn't as private
[21:24:53] <headius> so probably don't exist
[21:25:04] <enebo[m]> So it would be an error case there which is rare for working code to hit
[21:25:04] <headius> send always can call private though, you mean public_send
[21:25:15] <enebo[m]> yeah I do
[21:25:28] <headius> so how much risk does that equate
[21:25:28] <enebo[m]> which I wonder how many people really even bother there
[21:25:34] <headius> seems like not much
[21:25:47] <enebo[m]> I think it showing up in reflective calls is the biggest possible issue
[21:25:58] <headius> yeah
[21:25:58] <enebo[m]> but ostruct will work nicely and we remove a frame
[21:26:34] <headius> we have been dragging that ostruct issue along for quite a while
[21:26:42] <headius> it seems likely this behavior was introduced accidentally
[21:27:01] <enebo[m]> I don't want to sound cavalier but this is 9.3.4.0 and this seems like if people have this issue they may end up being forced to deal with in 3.1.x or 3.2
[21:27:21] <headius> full speed ahead
[21:27:23] <enebo[m]> yeah
[21:27:33] <headius> ok let's do it
[21:27:44] <headius> we can always release 9.3.5 a week later if it breaks everyone
[21:27:49] <enebo[m]> yep
[21:31:23] <headius> 0.12.2 upgrade is green, merging
[21:31:26] <headius> er jruby-openssl 0.12.2
[21:33:44] <headius> enebo: I'm going to merge byteit101 ivar PR
[21:35:34] <headius> I have no idea what is up with that person's environment on ahorek PR: https://github.com/jruby/jruby/pull/7071#issuecomment-1069402886
[21:36:01] <enebo[m]> cool
[21:36:33] <byteit101[m]> :-)
[21:37:03] <headius> I think we should merge ahorek PR and get a snapshot for that guy to test
[21:37:09] <headius> his build env seems completely hosed
[21:39:30] <enebo[m]> yeah
[21:44:05] <headius> ah he was testing master
[21:44:20] <headius> so that's not great for master but he tested against 9.3 and it is working correclty
[21:44:36] <headius> master works better than that though so I'm still unsure what's up with his env
[21:46:53] <headius> enebo: I'm moving https://github.com/jruby/jruby/issues/7032 and the related PR to 9.4
[21:47:02] <headius> I'm not comfortable changing how we calculate thread status in 9.3
[21:47:13] <headius> and this is a very new case to try to cover
[21:47:19] <enebo[m]> ok
[21:50:05] <headius> for https://github.com/jruby/jruby/issues/6976 I vote we change warning in 9.3.x and remove all aliases and bad defines of java import stuff in 9.4
[21:56:24] <enebo[m]> yeah sounds reasonable
[21:57:14] <enebo[m]> so we get some IR which will splat rest arg and merge kwargs then build compound array of those two things before splatting that compound array
[21:58:35] <enebo[m]> building compound array will args push which will then make [{}] which is passed as *[{}] to the method which accepts nothing.  That in turn has no kwargs so it sees a single empty hash as an arg
[21:58:59] <enebo[m]> The good news I think this is just an error in what we emit as IR
[21:59:18] <enebo[m]> The bad news is digging around in that to see how this should actually work
[21:59:49] <enebo[m]> In 3.0 I think the fix could be different since we can just pass the {} so long as we mark it as a kwarg
[22:00:02] <headius> hah yeah you are likely to be eaten by a grue
[22:00:44] <enebo[m]> but optimally passing nothing as kwargs is not really a useful thing
[22:01:26] <enebo[m]> with that said I don't want to emit a branch/jump to not pass empty kwargs either :)
[22:01:50] <enebo[m]> 3.0 does definitely help since they mark kwargs
[22:12:02] <enebo[m]> MRI optimizes **{} specifically in the parser
[22:12:16] <enebo[m]> I wonder if they continue to do that when they have their experimental AST API
[22:12:31] <headius> ah that makes sense
[22:12:38] <headius> or explains how they handle it anywa
[22:12:54] <enebo[m]> but it doesn't solve the original reporters issue
[22:13:10] <enebo[m]> just me reduced case
[22:13:16] <enebo[m]> theirs is **kwargs where kwargs is {}
[22:14:48] <enebo[m]> HEH just checked 3.0 parser.  The put it back
[22:16:08] <enebo[m]> They still have the conditional but they make an empty frozen hash at that moment and pass it as a literal node
[22:16:33] * headius sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/acf5af126c95943bca33d49ac88729d788107546
[22:17:03] <headius> and using warn with `uplevel: 1` to get the caller line number
[22:18:12] <enebo[m]> and you removed the odd definition?
[22:18:13] <enebo[m]> err old
[22:19:36] <enebo[m]> I guess you would have to since you have 'import'
[22:19:42] <headius> I removed nothing for 9.3
[22:19:50] <headius> well I made import into a full definition so the warning could be specific
[22:19:50] <enebo[m]> I should have also said changed
[22:19:56] <headius> ok yeah
[22:20:08] <headius> I'll push a PR and you cansee
[22:20:16] <enebo[m]> My mind just wants to remove it which you will on master right?
[22:20:40] <headius> yeah I will remove the two deprecated forms on master
[22:20:55] <enebo[m]> cool...does that kill that kernal file as well?
[22:21:04] <headius> not yet... still defining the toplevel version there
[22:21:09] <headius> that could be moved into java though
[22:21:10] <enebo[m]> ah ok
[22:21:13] <headius> where we define the other special toplevel methods
[22:21:25] <enebo[m]> It is some overhead to be in Ruby for that when nothing else is at this point for JI
[22:21:32] <enebo[m]> err not much anyways
[22:21:38] <headius> yeah one less file
[22:21:48] <enebo[m]> one drop in the ocean
[22:22:04] <headius> https://github.com/jruby/jruby/pull/7143
[22:22:28] <enebo[m]> we really need to experiment with "sealed" builtin library path
[22:22:39] <headius> the toplevel java_import was actually getting defined on Object so it overwrote the one with the deprecation warning
[22:23:00] <headius> toplevel method definition is weird
[22:23:08] <enebo[m]> not for gems or lib code but just so long as we know order of loading of builtin files never change we can calc the names ahead of time
[22:23:28] <headius> hmm
[22:23:34] <enebo[m]> gemification makes that more difficult
[22:23:43] <headius> this will now warn for `java_import` inside another method, where it did not warn before
[22:24:03] <headius> er, I mean inside a method in a normal object
[22:24:10] <enebo[m]> I have used that
[22:24:11] <headius> a method where self is class or module should be fine
[22:24:26] <enebo[m]> I only import the java if I call a method which may not be called
[22:24:51] <headius> hmm maybe that form should not be deprecated, but it means all objects currently have a private `java_import`
[22:24:56] <enebo[m]> I don't recall where but it was something where the Java feature was not normally used
[22:25:16] <enebo[m]> There are other ways of doing that
[22:25:17] <headius> yeah that pattern is similar to lazy require only if you use the library
[22:25:25] <enebo[m]> yeah
[22:25:36] <enebo[m]> In that sense it feels like something normal
[22:25:59] <enebo[m]> but it is defining a constant somewhere
[22:26:14] <enebo[m]> and methods can also do that but only once
[22:55:53] <headius> enebo: so maybe we remove that deprecation since it has not actually been active until my PR
[23:04:08] <headius> yeah this seems better
[23:04:11] <headius> I will repush
[23:08:20] <headius> and master will just remove the deprecated `import`
[23:50:44] <enebo[m]> ok
