[00:03:17] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[00:03:36] <sadiq> I see
[00:06:36] <companion_cube> also, tbh, the closing mechanism is ugly
[00:06:50] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:07:07] <companion_cube> if it was to be done from scratch, I'd definitely go with a `Subprocess.t` type, and accessorss for pid, channels, exit status (blocking and non blocking), etc.
[00:07:12] <companion_cube> instead of tuples :)
[00:09:43] <sadiq> I think it's possible to add support for Unix.fork from multi-Domain, it's just a lot of (potentially invasive) work.
[00:09:50] <energizer> i'm not an ocamler but i'm trying to read a bit of ocaml code. `| Indexed of 'e * 'e index list` is that `| Indexed of (('e) * ('e index list))`?
[00:10:11] <sadiq> It's also going to introduce some codepaths that are rarely if ever going to get exercised.
[00:10:23] <energizer> in terms of how the syntactic grouping works
[00:10:32] <companion_cube> yes
[00:10:44] <companion_cube> it's a pair, the second element is a list of 'e index list
[00:10:46] <d_bot_> <NULL> energizer: `Indexed of ('e) * (('e) index) list`
[00:11:12] <companion_cube> sadiq: a real problem, of course, is that fork is indeed bad
[00:11:12] <d_bot_> <NULL> Not exactly a pair, it's a constructor with two arguments
[00:11:26] <companion_cube> what's good is fork+exec or the better APIs (?)
[00:11:51] <energizer> d_bot_: can you add another set of () to that so i can see where `list` goes
[00:12:02] *** Quits: gravicappa (~gravicapp@145.255.1.142) (Ping timeout: 256 seconds)
[00:12:30] <d_bot_> <NULL> Oh yeah I forgot some `Indexed of ('e) * ((('e) index) list)`
[00:13:00] <d_bot_> <NULL> The main thing I wanted to highlight is that having parentheses around the whole product changes stuff slightly
[00:13:15] <d_bot_> <NULL> Also, d_bot_ is the bridging bot
[00:13:24] <energizer> oh you are NULL
[00:13:30] <d_bot_> <NULL> Yes
[00:13:44] <companion_cube> the obsolete version of nullptr?
[00:14:21] <energizer> `(Indexed of ('e)) * ((('e) index) list)` or `Indexed of (('e) * ((('e) index) list))` ?
[00:14:37] <d_bot_> <NULL> companion_cube: A representation of my inspiration on creating a username
[00:14:56] <companion_cube> apparently you could have used some pointers for inspiration
[00:15:16] <companion_cube> energizer: the first 'e is not in the list.
[00:16:46] <d_bot_> <NULL> Think of `Indexed of ('e) * ((('e) index) list)` as `{constructor_id=INDEXED; field_1: 'e; field_2: ('e index) list}`
[00:17:51] <d_bot_> <NULL> If you are more familiar with C, that's pretty much what it translates to
[00:18:18] <energizer> ok i think i get it. thanks.
[00:42:40] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:43:25] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[00:48:18] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 260 seconds)
[01:10:41] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[01:13:36] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[01:24:30] *** Joins: zebrag (~chris@user/zebrag)
[01:27:21] *** Quits: zebrag (~chris@user/zebrag) (Client Quit)
[02:24:40] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:50:27] *** Joins: spip (~bobo@37.165.145.33)
[02:50:42] *** Quits: bobo_ (~bobo@37.170.231.47) (Ping timeout: 256 seconds)
[02:52:43] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:6467:c9ec:5037:de45) (Quit: Konversation terminated!)
[03:22:08] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 250 seconds)
[03:54:45] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[04:16:15] *** Quits: wagle (~wagle@quassel.wagle.io) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[04:16:46] *** Joins: wagle (~wagle@quassel.wagle.io)
[04:25:15] *** Quits: olle (~olle@i5E866D9A.versanet.de) (Ping timeout: 268 seconds)
[04:32:41] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[04:45:18] <d_bot_> <Boby> is there a way to put type in function declaration without using tuples ?
[04:45:51] <d_bot_> <Boby> for example let f a b = a + b could be let f (a, b : int * int) : int = a + b, but it use tuples right ?
[04:46:08] <d_bot_> <Boby> how can I put paramter types without using tuples ?
[04:46:32] <d_bot_> <NULL> `let f : int -> int -> int = fun a b -> a + b` or `let f (a: int) (b: int) : int = a + b`
[04:49:25] <d_bot_> <Boby> Yes thanks !
[04:49:59] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[04:52:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:52:23] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[05:02:24] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[05:34:35] <companion_cube> hum, did statmemprof disappear??
[05:39:51] <companion_cube> I don't even see it in ocaml-variants :(
[05:59:02] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:01:27] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[07:44:18] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 250 seconds)
[07:47:54] <rgrinberg> i don't think you need special compiler for statmemprof anymore
[07:48:53] <companion_cube> yeah, it seems not
[07:48:57] <companion_cube> that's quite cool
[07:49:12] <companion_cube> also, memtrace is nicer than expected (there's useful CLI tools alongside the core library)
[07:49:53] <rgrinberg> yeah, it's not too bad
[07:49:58] <rgrinberg> kind of a pain to install the viewer
[07:50:11] <companion_cube> that's the point: you don't really need the viewer
[07:50:20] <companion_cube> memtrace_hotspots and memtrace_flamegraph are already quite nice
[07:55:05] *** sleepydog_ is now known as sleepydog
[08:06:00] <d_bot_> <Anurag> thanks to the cli tools I haven't needed to install the viewer in a long time.
[08:06:40] <d_bot_> <Anurag> I stopped using the viewer when I upgraded to ocaml 4.12 as the current version of the viewer on opam only works on ocaml 4.11.x
[08:07:18] <d_bot_> <Anurag> and I couldn't be bothered to maintain a separate 4.11 switch just to compile the viewer..
[08:08:22] *** Joins: mbuf (~Shakthi@171.61.247.107)
[08:16:36] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 245 seconds)
[08:20:19] <companion_cube> well it's good to know that there's a lean solution now
[08:27:17] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[08:32:10] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 260 seconds)
[09:08:12] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (*.net *.split)
[09:08:12] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (*.net *.split)
[09:08:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[09:08:12] *** Quits: towel (~towel@user/towel) (*.net *.split)
[09:08:12] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca) (*.net *.split)
[09:08:13] *** Quits: mmalter (~mmalter@88.126.10.237) (*.net *.split)
[09:08:13] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (*.net *.split)
[09:08:13] *** Quits: andreypopp (~andreypop@94.188.42.16) (*.net *.split)
[09:08:13] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[09:08:13] *** Quits: williewillus (~williewil@user/williewillus) (*.net *.split)
[09:08:13] *** Quits: xenu (~xenu@carychium-tridentatum.xenu.pl) (*.net *.split)
[09:08:13] *** Quits: Geekingfrog (~geekingfr@li2156-64.members.linode.com) (*.net *.split)
[09:08:13] *** Quits: beise (~beise@85.17.52.17) (*.net *.split)
[09:08:13] *** Quits: afrosenpai (~afrosenpa@li642-224.members.linode.com) (*.net *.split)
[09:08:13] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (*.net *.split)
[09:08:14] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[09:08:14] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (*.net *.split)
[09:08:14] *** Quits: ado (sid462155@id-462155.uxbridge.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: haesbaert (~haesbaert@195.95.187.184) (*.net *.split)
[09:08:14] *** Quits: gentauro (~gentauro@user/gentauro) (*.net *.split)
[09:08:14] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[09:08:15] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[09:08:15] *** Quits: nfc_ (nfc@tilde.institute) (*.net *.split)
[09:08:15] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (*.net *.split)
[09:08:15] *** Quits: reynir (root@user/reynir) (*.net *.split)
[09:08:15] *** Quits: slothby (~JoshAshby@irc.isin.space) (*.net *.split)
[09:08:15] *** Quits: jyc (sid40911@id-40911.ilkley.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[09:08:15] *** Quits: LACampbell (~lewis@granite-phrase.bnr.la) (*.net *.split)
[09:08:15] *** Quits: riverdc (~river@li1196-30.members.linode.com) (*.net *.split)
[09:08:16] *** Quits: dwt__ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (*.net *.split)
[09:08:16] *** Quits: landonf (landonf@mac68k.info) (*.net *.split)
[09:08:16] *** Quits: Armael (~Armael@macaron.isomorphis.me) (*.net *.split)
[09:08:16] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[09:08:16] *** Quits: sleepydog (~sleepydog@pool-100-33-241-236.nycmny.fios.verizon.net) (*.net *.split)
[09:08:16] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:08:17] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (*.net *.split)
[09:08:17] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[09:08:17] *** Quits: Boarders_ (sid425905@id-425905.lymington.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: Fardale (~Fardale@fuyukaidesu.fardale.eu) (*.net *.split)
[09:08:17] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (*.net *.split)
[09:11:56] *** Joins: bobo (~bobo@37.165.145.33)
[09:12:25] *** Quits: spip (~bobo@37.165.145.33) (Ping timeout: 256 seconds)
[09:12:59] *** Quits: mbuf (~Shakthi@171.61.247.107) (Ping timeout: 256 seconds)
[09:21:14] *** Joins: landonf (landonf@mac68k.info)
[09:21:14] *** Joins: Armael (~Armael@macaron.isomorphis.me)
[09:21:14] *** Joins: dstein64 (~dstein64@dannyadam.com)
[09:21:14] *** Joins: sleepydog (~sleepydog@pool-100-33-241-236.nycmny.fios.verizon.net)
[09:21:14] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[09:21:14] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[09:21:14] *** Joins: ns12 (~ns12@user/ns12)
[09:22:44] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[09:22:44] *** Joins: mbuf (~Shakthi@171.61.247.107)
[09:22:44] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[09:22:44] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[09:22:44] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[09:22:44] *** Joins: ado (sid462155@id-462155.uxbridge.irccloud.com)
[09:22:44] *** Joins: haesbaert (~haesbaert@195.95.187.184)
[09:22:44] *** Joins: gentauro (~gentauro@user/gentauro)
[09:22:44] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[09:22:44] *** Joins: unyu (~pyon@user/pyon)
[09:22:44] *** Joins: nfc_ (nfc@tilde.institute)
[09:22:44] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[09:22:44] *** Joins: reynir (root@user/reynir)
[09:22:44] *** Joins: slothby (~JoshAshby@irc.isin.space)
[09:22:44] *** Joins: jyc (sid40911@id-40911.ilkley.irccloud.com)
[09:22:44] *** Joins: drewolson (~drewolson@user/drewolson)
[09:22:44] *** Joins: LACampbell (~lewis@granite-phrase.bnr.la)
[09:22:44] *** Joins: riverdc (~river@li1196-30.members.linode.com)
[09:22:44] *** Joins: dwt__ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[09:23:32] *** bobo is now known as 073AAMPK3
[09:23:35] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[09:23:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:23:35] *** Joins: towel (~towel@user/towel)
[09:23:35] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca)
[09:23:35] *** Joins: mmalter (~mmalter@88.126.10.237)
[09:23:35] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[09:23:35] *** Joins: andreypopp (~andreypop@94.188.42.16)
[09:23:35] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[09:23:35] *** Joins: williewillus (~williewil@user/williewillus)
[09:23:35] *** Joins: xenu (~xenu@carychium-tridentatum.xenu.pl)
[09:23:35] *** Joins: Geekingfrog (~geekingfr@li2156-64.members.linode.com)
[09:23:35] *** Joins: beise (~beise@85.17.52.17)
[09:23:35] *** Joins: afrosenpai (~afrosenpa@li642-224.members.linode.com)
[09:24:51] *** Joins: Boarders_ (sid425905@id-425905.lymington.irccloud.com)
[09:24:51] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[09:24:51] *** Joins: Fardale (~Fardale@fuyukaidesu.fardale.eu)
[09:24:51] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[09:30:25] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:32:43] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[09:35:32] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Client Quit)
[09:53:04] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:07:09] *** Joins: jlrnick (~josephler@2a01cb040a159400dd01031c9715ebd1.ipv6.abo.wanadoo.fr)
[10:12:51] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:16:11] *** Quits: jlrnick (~josephler@2a01cb040a159400dd01031c9715ebd1.ipv6.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[10:17:18] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[10:17:43] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:18:11] *** Joins: gravicappa (~gravicapp@145.255.1.142)
[11:00:52] *** Quits: gravicappa (~gravicapp@145.255.1.142) (Ping timeout: 256 seconds)
[11:39:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[11:46:33] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:54:44] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:9b95:f42d:983f:2e82)
[13:04:53] *** Quits: 073AAMPK3 (~bobo@37.165.145.33) (Quit: Konversation terminated!)
[13:16:36] <d_bot_> <undu> I'm just updating the ocaml used for xapi to 4.13 just for the profiler
[13:22:00] *** Joins: spip (~bobo@37.165.160.25)
[13:26:46] <d_bot_> <myrkraverk> Thanks, I'll look into that.
[13:38:55] <d_bot_> <orbitz> 4.13 looks like it has a lot of goodies in it
[13:45:41] <d_bot_> <DepartureAM> I was gonna follow "White you a Scheme" in Haskell but reading through the intro it looks like they use a lib Parsec that does most of the work lmao. Anyone know of any decent tutorials which build a simple language implementation without delegating most of the work to a library?
[13:47:28] <Armael> I assume Parsec only handles parsing? There are many other interesting things to tackle to implement a scheme-like language
[13:49:02] <d_bot_> <octachron> Parsing is not really most of the work, and it is mostly tedious without a library or a parser generator. You can replace `parsec` by a hand-written recursive descent parser or write your own version of `parsec`.
[13:49:11] <d_bot_> <DepartureAM> why tf is a bot speaking to me
[13:49:19] <Armael> :| rude
[13:49:49] <d_bot_> <DepartureAM> I don't know haskell nearlyyy well enough to write my own lol. I just saw in the book it says
[13:49:49] <d_bot_> <DepartureAM> > The lexer and parser are contained in a single library, Parsec, which does most of the work for us
[13:50:05] <d_bot_> <NULL> Read the channel description and be more respectful please
[13:50:34] <Armael> "most of the work" for parsing
[13:51:50] <d_bot_> <octachron> in other words, you can let `parsec` handles the parsing if you are not particularly interested by this part.
[13:51:55] <d_bot_> <DepartureAM> I didn't know "Bridged to IRC" meant "IRC users will appear as bots." That should probably me made clearer, but thanks.
[13:51:59] <d_bot_> <DepartureAM> ahh ok
[13:52:20] <d_bot_> <DepartureAM> I'm interested in it, but I don't know haskell well enough to take that part of the book and handle it one my own.
[13:53:37] <Armael> I'd just follow the book then, you can still come back later and implement a hand-rolled parser if you want
[13:53:38] <d_bot_> <NULL> I'm pretty sure Discord does no bridging natively, so it's always a bot doing it (hence the tag)
[13:54:06] <d_bot_> <DepartureAM> Yeah makes sense, thanks for the suggestions 🙂
[14:21:03] *** Joins: olle (~olle@i5E866D87.versanet.de)
[14:31:12] <theblatte> a
[14:43:59] *** Joins: bartholin (~bartholin@158.110.70.210)
[14:47:19] *** Joins: bobo_ (~bobo@37.170.37.174)
[14:47:32] *** Quits: spip (~bobo@37.165.160.25) (Ping timeout: 256 seconds)
[14:48:46] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 260 seconds)
[14:49:43] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[15:15:03] <d_bot_> <darrenldl> @DepartureAM you can always make learning parsing a separate project, but as others suggest it's not the most substantial part of making a language
[15:28:24] <mbuf> OCaml Mach IR refers to the Intermediate Representation format?
[16:13:46] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:39:25] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[16:40:26] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[16:40:50] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[17:08:44] *** Joins: sagax (~sagax_nb@user/sagax)
[17:12:15] *** Joins: gravicappa (~gravicapp@145.255.1.142)
[17:17:54] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:24:17] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[17:36:56] *** Quits: bartholin (~bartholin@158.110.70.210) (Quit: Leaving)
[17:38:25] *** Joins: bartholin (~bartholin@158.110.70.210)
[17:44:02] *** Quits: kakadu (~kakadu@195.19.236.234) (Ping timeout: 240 seconds)
[17:47:55] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[18:00:33] *** Quits: kurfen_ (~kurfen@176.119.195.10) (Ping timeout: 256 seconds)
[18:02:30] *** Joins: kurfen (~kurfen@213.152.188.7)
[18:06:58] *** Joins: romildo (~Romildo@191.5.84.202)
[18:09:06] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[18:12:06] *** Quits: bartholin (~bartholin@158.110.70.210) (Ping timeout: 256 seconds)
[18:18:56] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:9b95:f42d:983f:2e82) (Quit: Konversation terminated!)
[18:22:03] *** Joins: Haudegen (~quassel@91.114.49.10)
[18:22:10] *** Quits: olle (~olle@i5E866D87.versanet.de) (Ping timeout: 250 seconds)
[18:24:30] *** Joins: bartholin (~bartholin@158.110.70.210)
[18:24:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca) (Ping timeout: 256 seconds)
[18:34:29] *** Joins: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-206.dsl.bell.ca)
[18:49:38] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[18:51:12] *** Quits: bartholin (~bartholin@158.110.70.210) (Ping timeout: 256 seconds)
[18:55:19] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[18:59:58] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[19:02:28] *** Quits: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-206.dsl.bell.ca) (Ping timeout: 250 seconds)
[19:03:23] *** Quits: caasih (sid13241@id-13241.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[19:03:53] *** Joins: bartholin (~bartholin@158.110.70.210)
[19:10:54] *** Joins: caasih (sid13241@ilkley.irccloud.com)
[19:11:36] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-199.dsl.bell.ca)
[19:24:33] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:24:36] <d_bot_> <d4hines> Yesterday I mentioned I'm trying to use `Lwt_domain.detch` and `Lwt_process.pmap` together but it fails because you can't create a Unix fork after you've already created a domain. @octachron 's suggestion was to use `Unix.create_process` and friends instead. We tried doing that here: https://github.com/d4hines/multicore-with-lwt/tree/with-nodejs, but our external program fails with an `EAGAIN` error. Basically I think we're not 
[19:31:48] *** Quits: mbuf (~Shakthi@171.61.247.107) (Quit: Leaving)
[19:34:16] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-199.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:37:49] *** SoniEx2 is now known as Soni
[19:40:53] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-105.dsl.bell.ca)
[19:45:57] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:48:36] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-50-65-93-192-46.dsl.bell.ca)
[19:49:44] <d_bot_> <cemerick> my kingdom for something like erlang's `spawn_opt` for OCaml domains 😅  https://discuss.ocaml.org/t/per-domain-memory-allocation-limits/9265
[19:55:34] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[19:57:51] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[19:59:33] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-50-65-93-192-46.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:10:47] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-112.dsl.bell.ca)
[20:12:50] <sadiq> unfortunately this post mis-interprets that paper
[20:13:21] <sadiq> I'll follow up on the discuss so there's a bit more of a public record
[20:13:36] <d_bot_> <cemerick> sadiq: greatly appreciated 🙂
[20:14:05] <sadiq> but TL;DR there's two GCs in OCaml and just because you allocated in one doesn't necessarily mean you allocated in the other
[20:15:26] <sadiq> also only one domain takes _responsibility_ for managing a certain pool. Pools can be orphaned and they can move to other domains.
[20:16:00] <sadiq> oh lol I wrote that documentation.
[20:17:07] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[20:17:28] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[20:23:16] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-112.dsl.bell.ca) (Ping timeout: 245 seconds)
[20:27:18] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:31:51] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-151.dsl.bell.ca)
[20:32:50] *** Joins: mro (~mro@port-92-195-233-163.dynamic.as20676.net)
[20:40:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-151.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:42:14] *** Parts: beise (~beise@85.17.52.17) (Leaving)
[20:45:44] *** Quits: mro (~mro@port-92-195-233-163.dynamic.as20676.net) (Remote host closed the connection)
[20:51:06] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-115.dsl.bell.ca)
[20:59:38] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-115.dsl.bell.ca) (Ping timeout: 252 seconds)
[21:01:47] *** Joins: mro (~mro@port-92-195-233-163.dynamic.as20676.net)
[21:01:59] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:05:09] <companion_cube> I'm so tired of trying to add common sense stuff to the stdlib
[21:05:30] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Remote host closed the connection)
[21:05:55] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[21:06:24] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[21:06:24] *** Quits: mro (~mro@port-92-195-233-163.dynamic.as20676.net) (Ping timeout: 250 seconds)
[21:07:47] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 256 seconds)
[21:08:39] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-175.dsl.bell.ca)
[21:15:29] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-175.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:20:47] *** Joins: mro (~mro@2002:5cc3:e9a3:0:ac3f:5320:4b3b:208c)
[21:21:21] <sadiq> companion_cube, what happened this time?
[21:21:41] <zozozo> sadiq: see https://github.com/ocaml/ocaml/pull/10982
[21:24:04] <sadiq> that last comment seems like an argument for the PR.
[21:24:13] <zozozo> agreed
[21:25:29] <Corbin> Ugh, I recognize this mindset. It's the same POV that eventually leads to Elm's stagnation. "Things must stay; there must be no change."
[21:26:16] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-195.dsl.bell.ca)
[21:26:26] <companion_cube> here it's the opposite, in a way, from Alain
[21:26:37] <companion_cube> "things might change, don't leak this obvious part of the implementation"
[21:27:44] <Corbin> Yep. Your reply is sometimes called Hbomberguy's argument; you are pointing out that a buffer of bytes more-or-less *must* have a sequence of bytes somewhere in its implementation.
[21:29:07] <d_bot_> <Et7f3> So now we will have CCBuffer ?
[21:29:16] *** Joins: olle (~olle@i5e866d87.versanet.de)
[21:30:34] <companion_cube> Corbin: yes, because it does, and is used by people knowing that it does
[21:30:43] <companion_cube> if you want something different, go for it, just in a different module.
[21:31:11] <companion_cube> it's basic performance retrocompatibility.
[21:32:52] <companion_cube> (you could also replace Map.Make with an association list, and it'd be breaking as well)
[21:32:58] <olle> My new colleague is advocating for TypeScript for the static typing.
[21:33:03] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-195.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:33:19] <olle> "Can you tell you about my friend, ReactML/ReScript/OCaml??"
[21:35:49] *** Quits: mro (~mro@2002:5cc3:e9a3:0:ac3f:5320:4b3b:208c) (Ping timeout: 240 seconds)
[21:36:52] <companion_cube> Corbin: why "hbomberguy's argument" btw? to which video does it refer to?
[21:39:26] <Corbin> companion_cube: It refers to a viral moment from https://www.youtube.com/watch?v=RLqXkYrdmjY in which it is pointed out that, definitionally, an occupied house must have occupants, as an argument against paying lip-service to an unchanging facade. They're talking about a beach, you're talking about an API, but it's definitely an instance.
[21:39:46] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-53-65-93-195-206.dsl.bell.ca)
[21:40:11] <companion_cube> ok
[21:40:16] <companion_cube> but here we do have some constraints
[21:40:24] <companion_cube> the API can change, but only in non breaking ways, for example
[21:40:29] <companion_cube> that's no up to discussion
[21:42:16] <Corbin> Is there a process for introducing new facades on an existing API? Or is it only done on an ad-hoc basis, in times of emergency?
[21:43:53] <companion_cube> wdym "facades"
[21:45:44] <Corbin> It's a design pattern: https://en.wikipedia.org/wiki/Facade_pattern It shows up in http://laputan.org/mud/mud.html#SweepingItUnderTheRug
[21:46:38] <d_bot_> <darrenldl> ah design pattern, my favourite topic in uni
[21:46:39] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-53-65-93-195-206.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:46:39] <Corbin> "One frequently constructs a facade to put a congenial 'pretty face' on the unpleasantness that is swept under the rug. Once these messy chunks of code have been quarantined, you can expose their functionality using intention-revealing selectors."
[21:47:48] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:49:36] <Corbin> Yeah, it sucks to deal with this stuff, but it's obligatory for managing decades-long software projects. APIs have to be introduced and removed somehow. It can get worse: Some large corporations have New Product Introduction APIs, and you call an API to declare that you're creating a new API.
[21:53:24] <d_bot_> <VPhantom> @companion_cube This is how I ended up with my own `Buffer`-like personal buffer module, so I could have better reading operations on extensible buffers. (Under the hood, I implemented it wrapped around Bigstring, Buffer and Bytes to accommodate various needs.)
[21:56:10] *** Quits: bartholin (~bartholin@158.110.70.210) (Quit: Leaving)
[21:57:59] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[22:08:09] <companion_cube> Corbin: that sounds like GoF gloubiboulga indeed
[22:08:16] <companion_cube> here we're talking about a freaking byte buffer
[22:08:35] <companion_cube> something where it's important that some functions take literally a few instructions
[22:08:40] <companion_cube> (like `add_char` in the happy path)
[22:08:52] <companion_cube> there's no facading that shit
[22:10:16] <Corbin> companion_cube: I've worked on and seen runtimes where even byte buffers might have underlying optimized representations. Short buffers, uninitialized buffers, buffers with just a few bytes repeated over and over in a pattern, etc.
[22:10:47] <Corbin> I agree that, in this case, there's no such excuse. Too much is already promised in the docs.
[22:10:49] <companion_cube> I could imagine a `Buffer.create` that doesn't initialize the content
[22:11:03] <companion_cube> in the docs, and in 23 years of code using the thing and observing its behavior, too.
[22:11:13] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[22:15:03] <d_bot_> <blub> -"Can we have a List.take/drop in stdlib?"
[22:15:04] <d_bot_> <blub> - "What are the usecases for such functions?"
[22:15:40] *** Joins: mro (~mro@port-92-195-233-163.dynamic.as20676.net)
[22:20:36] <d_bot_> <hcarty> Asking for use cases makes sense - if a function isn't general purpose it probably shouldn't be added to the standard library. The buffer issue is more nuanced since it's not possible to match on a buffer's representation
[22:29:20] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[22:30:34] *** Quits: mro (~mro@port-92-195-233-163.dynamic.as20676.net) (Remote host closed the connection)
[22:33:25] *** Joins: mro (~mro@port-92-195-233-163.dynamic.as20676.net)
[22:38:20] <companion_cube> yeah, List.drop is doable (and done) in an external library
[22:40:36] <d_bot_> <blub> Vector to stdlib proposal anyone?
[22:40:58] <companion_cube> there's one already
[22:41:02] <companion_cube> I mean there's an issue.
[22:41:03] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:41:15] <companion_cube> I think I'd explode if I tried to propose a PR on that one
[22:41:26] <d_bot_> <darrenldl> : D
[22:41:51] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[22:41:52] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[22:42:11] *** Quits: kurfen (~kurfen@213.152.188.7) (Ping timeout: 256 seconds)
[22:42:16] <d_bot_> <darrenldl> though if a good implementation of things is in containers etc, does it matter too much?
[22:42:25] <d_bot_> <blub> Yeah, I'm talking about that one
[22:44:10] <companion_cube> I'm fine with using my vector, although it's a pity there isn't one to serve as a common vocabulary
[22:45:12] <d_bot_> <blub> I kinda like the approach of ocaml wrt that language/stdlib changes should be properly reviewed thought out, but
[22:45:43] <d_bot_> <blub> Is there a list.map that doesn't stack overflow?
[22:45:43] <d_bot_> <blub> - what would be your usecase for that?
[22:46:17] <GreaseMonkey> i confess i'm quite new to OCaml and also only somewhat experienced with the functional programming stuff, but i'm actually quite curious as to why List.take/drop aren't in the stdlib
[22:46:21] <d_bot_> <blub> But then again it's finally solved
[22:46:36] <d_bot_> <blub> What are your usecases for that?
[22:47:21] <d_bot_> <Et7f3> list.rev_map |> list.rev
[22:47:22] <d_bot_> <undu> take and drop are actually useful, I don't understand the resistance to add them
[22:47:33] <d_bot_> <darrenldl> ill say those happen more often in seq
[22:47:38] <d_bot_> <Et7f3> maybe exception handling
[22:47:49] <d_bot_> <darrenldl> which Seq does not contain : D
[22:48:00] <d_bot_> <Et7f3> because drop/take is pattern matching
[22:48:21] <d_bot_> <Et7f3> so do you want to call a function for a if ?
[22:48:28] <d_bot_> <darrenldl> idk about matching 70 things : D
[22:48:48] *** ouestbillie is now known as cedb
[22:49:07] *** cedb is now known as ouestbillie
[22:50:09] <d_bot_> <blub> traversing the list twice
[22:50:16] <GreaseMonkey> ...i'm now wondering how many use cases would be of the form `take e (drop b l)` and how many would be of the form `((take n l), (drop n l))`
[22:50:26] <d_bot_> <blub> But yeah it's not hard to write the function yourself
[22:50:39] <d_bot_> <blub> Or just use containers/base
[22:54:37] *** Quits: mro (~mro@port-92-195-233-163.dynamic.as20676.net) (Remote host closed the connection)
[22:55:05] *** Joins: mro (~mro@port-92-195-233-163.dynamic.as20676.net)
[22:56:23] *** Joins: vicfred (~vicfred@user/vicfred)
[22:56:47] <companion_cube> oh right, I'll have to optimize it to use TRMC :D
[22:59:11] *** Quits: olle (~olle@i5e866d87.versanet.de) (Ping timeout: 256 seconds)
[22:59:11] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Ping timeout: 256 seconds)
[22:59:23] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[22:59:25] *** Joins: olle (~olle@i5E866D87.versanet.de)
[22:59:32] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[23:15:23] <d_bot_> <Et7f3> You asked that doesn't stack overflow. With new ocaml naive list.map and TRMC attribute it won't stack overflow. IIRC it is not activated by default
[23:17:16] <companion_cube> yep
[23:17:27] <companion_cube> but it can help implementing a stack safe version
[23:22:15] *** Parts: travv0 (sid293381@user/travv0) ()
[23:34:12] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[23:50:19] *** Joins: hornhack (~hackingho@user/hackinghorn)
