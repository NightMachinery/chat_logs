[00:08:20] *** Quits: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at) (Quit: WeeChat 3.2)
[00:10:04] *** Joins: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at)
[00:11:45] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[00:11:52] *** Joins: z147 (~z147@gateway/tor-sasl/z147)
[00:12:16] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[00:20:48] <White_Flame> Bike: neat!
[00:26:10] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Remote host closed the connection)
[00:26:27] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502)
[00:27:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:30:48] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:31:51] *** Joins: Alfr (~Alfr@user/alfr)
[00:32:13] *** Joins: attila_lendvai_ (~alendvai@2a02:ab88:370d:c380:8b18:524c:aaba:f9ba)
[00:32:29] *** Quits: attila_lendvai_ (~alendvai@2a02:ab88:370d:c380:8b18:524c:aaba:f9ba) (Remote host closed the connection)
[00:32:52] *** Joins: attila_lendvai_ (~alendvai@2a02:ab88:370d:c380:6105:f41c:7cdd:ae7a)
[00:34:39] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[00:36:40] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502) (Quit: Leaving)
[00:37:03] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-45.prtc.net)
[00:37:19] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502)
[00:40:41] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[00:41:38] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:42:53] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[00:46:03] *** Joins: z147_ (~z147@gateway/tor-sasl/z147)
[00:46:21] *** Quits: attila_lendvai_ (~alendvai@2a02:ab88:370d:c380:6105:f41c:7cdd:ae7a) (Ping timeout: 250 seconds)
[00:46:23] *** Quits: bothillinois (~twi@154.21.216.146) (Changing host)
[00:46:23] *** Joins: bothillinois (~twi@user/bothillinois)
[00:46:38] *** Quits: bothillinois (~twi@user/bothillinois) (Quit: leaving)
[00:46:47] *** Joins: twi (~twi@154.21.216.146)
[00:48:22] *** Quits: z147 (~z147@gateway/tor-sasl/z147) (Ping timeout: 244 seconds)
[00:49:04] *** Joins: andreyorst[erc] (~andreyors@2.92.124.61)
[00:49:17] *** Quits: andreyorst[erc] (~andreyors@2.92.124.61) (Remote host closed the connection)
[00:50:42] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[00:54:18] *** Joins: andreyorst[erc] (~andreyors@2.92.124.61)
[01:05:56] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-45.prtc.net) (Quit: Client closed)
[01:10:04] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 250 seconds)
[01:11:52] *** Joins: lisp123_ (~lisp123@194.5.53.25)
[01:13:10] *** Quits: andreyorst[erc] (~andreyors@2.92.124.61) (Ping timeout: 240 seconds)
[01:13:43] *** Joins: lisp123__ (~lisp123@45.130.83.195)
[01:14:12] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:14:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[01:16:14] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[01:17:07] *** Quits: lisp123_ (~lisp123@194.5.53.25) (Ping timeout: 252 seconds)
[01:22:21] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:25:16] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:29:28] *** Quits: lisp123__ (~lisp123@45.130.83.195) (Remote host closed the connection)
[01:35:38] *** Joins: lisp123 (~lisp123@45.130.83.195)
[01:39:01] *** Joins: akoana (~ah@user/akoana)
[01:40:03] *** Joins: lisp123_ (~lisp123@45.130.83.195)
[01:40:07] *** Quits: lisp123 (~lisp123@45.130.83.195) (Ping timeout: 240 seconds)
[01:43:09] *** Joins: lisp123 (~lisp123@45.130.83.195)
[01:44:37] *** Quits: lisp123_ (~lisp123@45.130.83.195) (Ping timeout: 252 seconds)
[01:46:21] *** Quits: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at) (Quit: WeeChat 3.2)
[01:46:30] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[01:46:53] *** Joins: lisp123_ (~lisp123@45.130.83.195)
[01:47:53] *** Quits: lisp123 (~lisp123@45.130.83.195) (Ping timeout: 250 seconds)
[01:59:09] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:08:16] *** Quits: gaqwas (~john@dynamic-095-115-118-051.95.115.pool.telefonica.de) (Ping timeout: 252 seconds)
[02:08:30] *** Joins: vats (~vats@180.149.226.8)
[02:10:05] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[02:20:27] *** Quits: psycomic (~psycomic@2a01:e0a:18:d0a0:6d97:c96:241a:4569) (Ping timeout: 240 seconds)
[02:22:58] *** Quits: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com) (Quit: bye)
[02:23:55] *** Quits: lisp123_ (~lisp123@45.130.83.195) (Remote host closed the connection)
[02:24:49] *** Joins: lisp123 (~lisp123@45.130.83.195)
[02:25:28] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 250 seconds)
[02:29:29] *** Quits: lisp123 (~lisp123@45.130.83.195) (Ping timeout: 250 seconds)
[02:30:55] *** mrSpec is now known as spec
[02:32:31] *** Joins: z147__ (~z147@gateway/tor-sasl/z147)
[02:35:19] *** Quits: z147_ (~z147@gateway/tor-sasl/z147) (Ping timeout: 244 seconds)
[02:40:15] *** Quits: z147__ (~z147@gateway/tor-sasl/z147) (Quit: z147__)
[02:43:35] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:46:46] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 252 seconds)
[02:54:50] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[03:00:47] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[03:01:07] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 250 seconds)
[03:01:54] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[03:02:45] *** Joins: lisp123 (~lisp123@45.130.83.195)
[03:12:23] *** Quits: lisp123 (~lisp123@45.130.83.195) (Ping timeout: 250 seconds)
[03:14:37] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[03:18:30] *** Joins: zuckonit (~user@2603-6011-2303-6613-a0c3-919d-5674-1142.res6.spectrum.com)
[03:18:45] <zuckonit> sup
[03:19:06] <zuckonit> i got emacs on my fucking phone lol
[03:22:51] *** Quits: asarch (~asarch@2806:10ae:7:afc6:cfb6:d543:1add:2626) (Quit: Leaving)
[03:24:10] *** Joins: Alfr (~Alfr@user/alfr)
[03:25:00] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[03:26:55] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[03:27:30] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:31:19] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[03:31:45] *** Joins: Alfr (~Alfr@user/alfr)
[03:32:58] *** Quits: cosimone (~user@93-44-187-127.ip98.fastwebnet.it) (Ping timeout: 252 seconds)
[03:35:44] <lotuseater> zuckonit: cool
[03:36:13] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 250 seconds)
[03:36:20] <lotuseater> But when I once used vim on a terminal app I missed the ESC key. :)
[03:38:19] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[03:38:19] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[03:38:23] <lotuseater> There is an Android App names "CL REPL" to have that on your phone. It uses ECL under the hood and QML for the graphical interface.
[03:41:15] <moon-child> in my implementation of 'loop', 'select' will be a version of collect that makes a string instead of a list, and 'volita' will make a vector.  It remains to be seen how bad of an idea this is
[03:41:45] <moon-child> I'm also tempted to make 'volitas' collect major cells of a higher-rank array
[03:42:40] <lotuseater> moon-child: ah yes, sometimes I had this situation where I wanted to directly collect into a vector. but ok, some various ways are possible
[03:43:15] <lotuseater> where does the word "volita" come from?
[03:45:39] *** Joins: lisp123 (~lisp123@45.130.83.195)
[03:46:10] <moon-child> imperative form of the latin root for 'volition'
[03:46:40] <moon-child> but chosen mainly for mnemonic resemblance to 'vector'
[03:46:42] * lotuseater tries to remember that from back of his latin classes
[03:47:31] <lotuseater> ah it's the word for will power
[03:52:42] <lotuseater> now I remember, "velle" was one of those unregular verbs like "ire"
[03:53:13] *** Quits: lisp123 (~lisp123@45.130.83.195) (Ping timeout: 248 seconds)
[03:57:01] *** Quits: zuckonit (~user@2603-6011-2303-6613-a0c3-919d-5674-1142.res6.spectrum.com) (Read error: Connection reset by peer)
[03:59:58] *** Joins: zuckonit (~user@2603-6011-2303-6613-a0c3-919d-5674-1142.res6.spectrum.com)
[04:00:34] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[04:10:53] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[04:11:39] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[04:15:13] <jcowan> Latin vector = carrier, passenger, somewhat surprisingly
[04:18:10] <moon-child> 'vector for disease' ~~ 'carrier of disease'--it makes perfect sense
[04:25:49] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Quit: ec_)
[04:28:50] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[04:29:34] *** Joins: elderK (uid205007@id-205007.brockwell.irccloud.com)
[04:36:39] *** Quits: zuckonit (~user@2603-6011-2303-6613-a0c3-919d-5674-1142.res6.spectrum.com) (Read error: Connection reset by peer)
[04:36:52] *** Joins: zuckonit (~user@154.6.18.37)
[04:37:27] *** Quits: Alfr (~Alfr@user/alfr) (Killed (copper.libera.chat (Nickname regained by services)))
[04:37:31] *** Joins: Alfr (~Alfr@user/alfr)
[04:38:41] <zuckonit> lotuseater:)
[04:39:10] *** Joins: attila_lendvai_ (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502)
[04:39:18] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Read error: Connection reset by peer)
[04:39:27] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502) (Ping timeout: 240 seconds)
[04:39:27] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 240 seconds)
[04:39:27] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 240 seconds)
[04:39:33] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[04:39:37] <lotuseater> zuckonit: when I'm anytime once again forced to use windows for work it's good there runs Emacs too
[04:40:04] <zuckonit> very true lol
[04:40:23] <zuckonit> i try to ssh off my mac to run emacs in terminal
[04:40:27] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[04:40:33] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[04:40:34] <zuckonit> i really hate using windows
[04:41:34] <zuckonit> at least now i can stay logged in irc through termux on my android lol
[04:41:56] <zuckonit> it also runs emacs which is so nice
[04:42:42] <zuckonit> similar to brew install
[04:42:47] <zuckonit> pkg install
[04:43:17] <zuckonit> i might go back on tripsit for a bit though
[04:44:51] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[04:50:00] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[04:56:27] *** Quits: zuckonit (~user@154.6.18.37) (Ping timeout: 240 seconds)
[04:59:10] *** Joins: zuckonit (~user@154.6.18.37)
[05:06:21] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[05:07:34] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[05:12:58] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Quit: leaving)
[05:16:36] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[05:27:39] *** Quits: zuckonit (~user@154.6.18.37) (Read error: Connection reset by peer)
[05:28:19] *** Joins: zuckonit (~user@154.6.18.37)
[05:28:53] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 250 seconds)
[05:37:56] *** Joins: srhm (~srhm@user/srhm)
[05:42:49] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:47:43] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[05:48:07] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[05:48:32] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[05:49:27] *** Quits: d4ryus1 (~d4ryus@ppp-188-174-25-87.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[05:50:04] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[05:51:45] *** Joins: khrbt (~znc@user/khrbt)
[05:52:43] *** Quits: zuckonit (~user@154.6.18.37) (Ping timeout: 250 seconds)
[05:53:24] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:54:03] *** Joins: srhm (~srhm@user/srhm)
[05:58:43] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:59:36] *** Joins: srhm (~srhm@user/srhm)
[05:59:39] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[06:00:25] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[06:00:49] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[06:02:55] *** Joins: d4ryus1 (~d4ryus@ppp-188-174-85-130.dynamic.mnet-online.de)
[06:09:45] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:10:30] *** Joins: srhm (~srhm@user/srhm)
[06:12:30] *** Joins: zuckonit (~user@154.6.18.37)
[06:13:29] *** Quits: twi (~twi@154.21.216.146) (Ping timeout: 248 seconds)
[06:14:58] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:15:27] *** Joins: srhm (~srhm@user/srhm)
[06:20:12] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:20:49] *** Joins: srhm (~srhm@user/srhm)
[06:25:39] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:26:19] *** Joins: srhm (~srhm@user/srhm)
[06:30:58] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:31:25] *** Joins: srhm (~srhm@user/srhm)
[06:31:43] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[06:36:13] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:36:42] *** Joins: srhm (~srhm@user/srhm)
[06:37:21] *** Quits: prxq (~quassel@x4db96c01.dyn.telefonica.de) (Ping timeout: 250 seconds)
[06:37:31] *** Joins: prxq (~quassel@x4db350b5.dyn.telefonica.de)
[06:40:33] *** Joins: lisp123 (~lisp123@45.130.83.195)
[06:41:24] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:41:51] *** Joins: srhm (~srhm@user/srhm)
[06:48:00] *** Joins: semz (~none@user/semz)
[06:50:59] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[06:51:13] *** Quits: lisp123 (~lisp123@45.130.83.195) (Ping timeout: 250 seconds)
[06:56:31] *** Joins: Oladon (~olad@98.43.81.226)
[07:06:42] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 250 seconds)
[07:07:16] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[07:14:02] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[07:14:28] *** Joins: srhm (~srhm@user/srhm)
[07:24:59] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[07:25:25] *** Joins: srhm (~srhm@user/srhm)
[07:31:21] <hexology> does anyone know what might cause this error when i run `qlot install`? https://bpa.st/ZW7Q the core of the error seems to be: Symbol "SYSTEM-AREA-UB8-FILL" not found in the SB-KERNEL package. the qlfile contains: `ql st-json`. did if find a bug in qlot? some change in backward compatibility in sbcl?
[07:32:08] <Bike> sb-kernel is an internal and unstable sbcl package. if qlot is referring to it, it may be out of step with your sbcl version. or rather static vectors is, looks like it
[07:32:25] <beach> Good morning everyone!
[07:34:55] <hexology> Bike: thanks, sounds like maybe i should file a bug report. i'm not entirely sure how to control which version/implementation to run qlot with
[07:34:59] <hexology> good morning beach
[07:35:20] <Bike> hexology: https://github.com/sionescu/static-vectors/commit/811fd2e52f916cd3951e68629a1d7e8fcddb3976#diff-bd5155b7890f72bcfe814f078eeab2b30989559ed9e9a78c298f33f2675fb800 looks like it was changed in static vectors a few months ago
[07:35:36] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[07:35:48] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[07:37:22] <hexology> hmm
[07:41:02] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[07:42:33] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 248 seconds)
[07:52:23] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:57:48] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Remote host closed the connection)
[07:59:48] <hexology> what's a roswell "env"? i don't see any references to it in the docs, nor do i see a way to create or manage envs
[08:00:00] <hexology> an unfinished feature?
[08:02:10] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[08:07:21] <lotuseater> maybe government hides the knowledge about it in another X-File
[08:07:31] <lotuseater> sorry, I couldn't resist
[08:08:16] *** Joins: srhm (~srhm@user/srhm)
[08:08:47] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 250 seconds)
[08:09:55] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[08:13:05] <hexology> sometimes i feel like i'm investigating an x-file when trying to learn how to use this stuff
[08:13:52] <lotuseater> :D
[08:14:58] *** Joins: semz (~none@user/semz)
[08:17:25] <hexology> it looks like my issue with qlot has been resolved by nuking both qlot and roswell and starting over
[08:19:30] <lotuseater> sorry I never used any of the two
[08:23:22] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[08:23:44] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[08:30:00] *** Joins: asarch (~asarch@2806:10ae:7:afc6:cfb6:d543:1add:2626)
[08:30:53] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[08:31:59] <asarch> How do you increase the heap size?
[08:32:15] <White_Flame> in SBCL, it's a cmdline option
[08:32:24] <White_Flame> can't change it at runtime
[08:32:29] <asarch> "Heap exhausted during allocation: 172654592 bytes available, 376885056 requested."
[08:32:31] <asarch> How?
[08:32:46] <White_Flame> I could check the manual, if you're not ;-P
[08:32:47] <lotuseater> hm what are you doing? ^^
[08:33:16] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[08:33:20] <asarch> I have a small web application written with Caveman2 and I tried to upload the classic Quake II tarball to the server
[08:33:21] <White_Flame> --dynamic-space-size <number of megabytes>
[08:33:38] <lotuseater> uii Quake :)
[08:33:48] <hayley> sbcl --dynamic-space-size 12345
[08:34:01] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[08:34:16] <hayley> If you are going to handle big uploads, you probably want to stream to disk rather than make a copy in memory. But I don't know how you do that.
[08:34:34] *** Joins: srhm (~srhm@user/srhm)
[08:34:52] <asarch> This is the error log: https://pastebin.com/vUpqR947
[08:35:38] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[08:35:40] <lotuseater> something like (make-array '#.(loop :for i :from 3 :to 20 :collect i)) is also a good candidate to exhaust the heap :P
[08:36:08] <hayley> (loop collect 1) ; and wait
[08:36:45] <lotuseater> haha, this also
[08:37:19] <lotuseater> such a loop construct should be declined at compilation
[08:37:30] <asarch> This is the controller code: https://pastebin.com/Y80JhxqU
[08:37:39] <hayley> Good luck with that.
[08:38:29] <lotuseater> you think so?
[08:38:37] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:39:07] <hayley> Hm, you only get a vector input stream? That is strange.
[08:39:55] <hayley> Hunchentoot writes out a temporary file at least.
[08:40:35] <asarch> The POST value _parsed has: (("nombre" #<FLEXI-STREAMS::VECTOR-INPUT-STREAM {1005996113}> "Screenshot_2021-02-02-00-01-21.jpeg" "image/jpeg"))
[08:45:35] *** Joins: lisp123 (~lisp123@45.130.83.195)
[08:53:30] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[08:54:07] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[09:05:26] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[09:05:56] *** Joins: srhm (~srhm@user/srhm)
[09:14:36] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[09:23:19] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[09:23:28] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[09:23:47] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[09:26:38] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (*.net *.split)
[09:26:38] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[09:26:38] *** Quits: hendursaga (~weechat@user/hendursaga) (*.net *.split)
[09:26:38] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[09:30:00] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:33:00] *** Quits: elderK (uid205007@id-205007.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[09:34:03] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:37:20] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[09:37:33] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[09:37:35] *** Joins: hendursaga (~weechat@user/hendursaga)
[09:40:16] *** Quits: lisp123 (~lisp123@45.130.83.195) (Remote host closed the connection)
[09:40:25] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 248 seconds)
[09:40:28] *** Joins: lisp123 (~lisp123@45.130.83.195)
[09:40:41] *** Quits: lisp123 (~lisp123@45.130.83.195) (Client Quit)
[10:19:47] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[10:22:09] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[10:25:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:31:23] *** Joins: shka (~herr@109.231.62.239)
[10:31:45] *** Quits: shka (~herr@109.231.62.239) (Client Quit)
[10:31:58] *** Joins: shka (~herr@109.231.62.239)
[10:36:07] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[10:37:02] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[10:37:26] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[10:47:40] *** Joins: gaqwas (~john@dynamic-095-117-013-199.95.117.pool.telefonica.de)
[10:47:43] *** Quits: hexology (~hexology@user/hexology) (Ping timeout: 258 seconds)
[10:56:44] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[10:59:07] <flip214> hunchentoot will write files to disk already, and pass a stream to the handler.
[11:07:34] <flip214> are the ELS 2020 videos no longer available on twitch?
[11:07:54] <hayley> I don't think Twitch caches videos for very long. Or YouTube?
[11:08:45] <moon-child> I think I
[11:08:50] <moon-child> may have downloaded a copy
[11:08:55] <moon-child> one sec, I'll check
[11:08:59] <hayley> https://www.youtube.com/playlist?list=PLA66mD-6yK8yjlJCI0Ay2f2IvvmB9Ktga loads here.
[11:11:54] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:12:08] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[11:12:31] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 250 seconds)
[11:16:46] <flip214> thanks a lot!!
[11:19:25] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[11:22:41] *** Joins: silasfox11 (~silasfox@xdsl-195-14-217-183.nc.de)
[11:23:17] *** Joins: Cymew (~ante@host-78-79-173-169.mobileonline.telia.com)
[11:23:33] *** Quits: silasfox11 (~silasfox@xdsl-195-14-217-183.nc.de) (Client Quit)
[11:23:53] *** Joins: silasfox9 (~silasfox@xdsl-195-14-217-183.nc.de)
[11:24:26] *** Quits: silasfox9 (~silasfox@xdsl-195-14-217-183.nc.de) (Client Quit)
[11:27:41] *** Quits: v88m (~Xiro@109.252.61.156) (Ping timeout: 250 seconds)
[11:28:07] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 250 seconds)
[11:28:31] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[11:28:53] *** Joins: makomo (~makomo@user/makomo)
[11:31:55] <asarch> It tool
[11:32:36] <asarch> I mean, it took ~6 min to transfer the 380 MB of the tarball
[11:34:56] <asarch> And with FiSH with Gnome's Files, only ~2 min
[11:35:39] <asarch> Omoshiroi desu ne
[11:36:30] <hayley> Well, what do you expect by introducing more indirection while copying? I guess 6 minutes is a lot, sure.
[11:36:41] <flip214> asarch: HTTP or HTTPS?
[11:37:05] <asarch> HTTP on the Caveman2 app and SSH with Gnome's File
[11:39:21] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Read error: Connection reset by peer)
[11:39:39] <flip214> asarch: SBCL?
[11:40:09] <asarch> Yeah, "This is SBCL 2.1.7, an implementation of ANSI Common Lisp."
[11:40:24] <asarch> On Debian Bullseye for AMD64
[11:41:44] <flip214> asarch: https://github.com/phmarek/sbcl/tree/stream-buffer-size has two patches on top that allow you to change the default buffer size via a special variable.
[11:41:47] <moon-child> 3x difference is suspiciously long
[11:41:56] <flip214> You could try to set eg. (* 128 1024) instead of the default 4KB.
[11:42:12] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[11:43:10] <asarch> I did (from White_Flame and hayley suggestion): sbcl --dynamic-space-size 567890
[11:43:39] <saturn2> how much CPU is being used by sbcl during the transfer?
[11:43:52] <hayley> You have 568GB of RAM?
[11:44:35] <asarch> Wow! That's a lot of RAM!
[11:44:44] <asarch> No, I only have 3.5 GB :'-(
[11:45:05] <asarch> CPU: Intel® Pentium(R) CPU N3540 @ 2.16GHz × 4
[11:45:47] <flip214> asarch: well, the heap size isn't related to the stream buffer size in any way. The latter being small might be part of the slowdown.
[11:47:27] <flip214> hayley: searching for els2021 on youtube gives ... interesting results.
[11:47:51] <asarch> The 256.3 MB of the Unreal tarball consumes about ~7.7% of the CPU
[11:48:08] <hayley> Right, those would not be on Twitch, and I don't think they have been uploaded elsewhere.
[11:49:09] <flip214> ah, thanks again
[11:50:58] <lotuseater> No minimum 1TB RAM? :(
[11:51:24] <lotuseater> or having some Spintronics RAM on top :3
[11:54:11] *** Joins: pve (~pve@178-55-199-122.bb.dnainternet.fi)
[11:54:39] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 268 seconds)
[11:56:46] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[11:58:21] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[12:00:04] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[12:08:56] *** Joins: v88m (~Xiro@213.87.128.15)
[12:12:50] *** Joins: psycomic (~psycomic@2a01:e0a:18:d0a0:636d:e696:1499:4314)
[12:13:15] *** Joins: Th30n (~Th30n@cpe-188-252-156-32.zg5.cable.xnet.hr)
[12:20:30] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[12:21:48] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-60.prtc.net)
[12:23:05] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 248 seconds)
[12:28:17] *** Joins: asarch_ (~asarch@2806:10ae:7:6db5:c7f8:e5f6:a000:ef81)
[12:29:13] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 252 seconds)
[12:29:53] *** Joins: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at)
[12:29:53] *** Quits: asarch_ (~asarch@2806:10ae:7:6db5:c7f8:e5f6:a000:ef81) (Client Quit)
[12:30:27] *** Quits: asarch (~asarch@2806:10ae:7:afc6:cfb6:d543:1add:2626) (Ping timeout: 240 seconds)
[12:35:10] *** Quits: gaqwas (~john@dynamic-095-117-013-199.95.117.pool.telefonica.de) (Ping timeout: 250 seconds)
[12:35:22] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:57] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:39:48] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[12:40:40] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[12:46:40] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 240 seconds)
[12:48:09] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[12:48:53] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[12:51:34] *** Joins: cosimone` (~user@93-47-230-235.ip115.fastwebnet.it)
[12:52:23] *** Quits: cosimone` (~user@93-47-230-235.ip115.fastwebnet.it) (Remote host closed the connection)
[12:52:49] *** Joins: cosimone` (~user@93-47-230-235.ip115.fastwebnet.it)
[12:53:29] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 250 seconds)
[12:55:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[12:56:43] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[12:57:13] *** Quits: phantomics (~phantomic@97-118-239-225.hlrn.qwest.net) (Ping timeout: 248 seconds)
[12:59:47] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:02:40] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 240 seconds)
[13:03:02] *** Joins: phantomics (~phantomic@71-33-131-32.hlrn.qwest.net)
[13:09:41] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[13:10:28] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[13:11:03] *** Joins: selwyn (~selwyn@user/selwyn)
[13:15:31] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[13:25:37] *** Joins: vats (~vats@180.149.226.8)
[13:37:47] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[13:42:25] *** Quits: cosimone` (~user@93-47-230-235.ip115.fastwebnet.it) (Remote host closed the connection)
[14:01:27] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:03:41] *** Quits: v88m (~Xiro@213.87.128.15) (Ping timeout: 250 seconds)
[14:08:55] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[14:11:53] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 248 seconds)
[14:15:31] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[14:16:28] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[14:26:08] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[14:33:20] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[14:33:45] *** Quits: Cymew (~ante@host-78-79-173-169.mobileonline.telia.com) (Ping timeout: 248 seconds)
[14:33:54] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 250 seconds)
[14:45:02] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[14:48:22] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:50:22] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-60.prtc.net) (Ping timeout: 246 seconds)
[14:53:23] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:53:47] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[14:54:27] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[15:01:57] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Quit: WeeChat 3.2)
[15:02:07] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[15:02:09] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[15:07:07] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[15:09:36] *** Joins: livoreno (~livoreno@user/notzmv)
[15:10:46] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[15:21:55] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[15:29:33] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[15:35:07] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[15:43:48] <flip214> With SBCL's "Control stack exhausted", the backtrace command only shows 5 frames - none of lisp code. How can I find out what the problem is?
[16:02:02] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[16:05:50] *** Joins: dlowe (~dlowe@user/dlowe)
[16:06:14] *** Joins: Cymew (~ante@host-78-79-172-145.mobileonline.telia.com)
[16:06:35] *** Joins: engblom (~foo@user/engblom)
[16:08:02] <engblom> What is the most elegant way to create a list of length n where each element is (random 10)?
[16:08:39] <engblom> (dotimes ...) feels like overkill.
[16:08:59] <Xach> (map-into (make-list 10) (lambda () (random 10)))
[16:09:13] <_death> or (loop repeat 10 collect (random 10))
[16:09:24] <Xach> this received the P**l Gr***m excellence in elegance award in 2004
[16:09:34] <Xach> loop cannot be elegant
[16:09:50] <_death> it doesn't have to be elegant, just "most elegant" :)
[16:10:28] <Xach> (mapcar #'random (make-list 10 :initial-element 10))
[16:10:56] <hayley> Xach: If one uses SICL LOOP, macroexpansion will necessarily use CLOS and so P**l Gr***m will not come within a 10 mile radius of your computer
[16:12:57] <lotuseater> hayley: xD
[16:17:48] <lotuseater> so it's like a magical wall
[16:18:06] <engblom> From where is (random ...) pulling the value if you use sbcl? From /dev/random?
[16:18:19] <lotuseater> how does Arc handle those things asked by engblom?
[16:18:38] <lotuseater> I think it has its own seed.
[16:19:20] <lotuseater> or wait what was the other word i mean ...
[16:19:35] <lotuseater> cycle length? for a Mersenne twister
[16:19:47] <_death> engblom: sbcl contains an implementation of a pseudo random number generator called mersenne twister 19937
[16:19:48] <lotuseater> or maybe period length
[16:20:43] <flip214> Ain't there no MAP* equivalent for (apply #'append (mapcar ...)?? MAPCAN does NCONC and so modifies the lists... should I use that and have a MAPCAR #'COPY-SEQ inbetween?
[16:21:20] <_death> alexandria:mappend
[16:22:50] <lotuseater> engblom: maybe in the future SICL will use Hadamard gates for generating real random numbers ^^
[16:23:12] <engblom> :)
[16:23:21] <hayley> We do need a RANDOM implementation eventually.
[16:23:43] <engblom> You think you will use lisp on quantum computers :)
[16:23:54] <lotuseater> or Lava lamps
[16:24:05] <lotuseater> engblom: why just think that?
[16:24:12] <_death> engblom: with this https://gist.github.com/death/ba34a87cd43fc041215f36c735e0fe13 you can cheat at sbcl
[16:24:25] <hayley> I know stylewarning thinks he does, probably because he does.
[16:24:28] <lotuseater> it's the only natural option for that
[16:24:35] <engblom> lotuseater: Hadamard gate is something in quantum computers.
[16:24:54] <lotuseater> engblom: I know? why do you think I mentioned that ^^
[16:25:28] <lotuseater> look for Rigetti and their Quil compiler
[16:27:02] <lotuseater> and they were founded by someone who worked at DWave before that, which programs their QCs also with CL
[16:27:36] * engblom wrote his Batchelor's Thesis about quantum computers... 
[16:27:47] <lotuseater> and now?
[16:28:58] <engblom> It was just a trivial thesis where I explained everything needed in order to understand the Deutsch–Jozsa algorithm.
[16:29:14] <lotuseater> but cool indeed
[16:29:16] <engblom> That is why I happened to know what Hadamard gates are
[16:30:02] <lotuseater> okay and now you know what's also a good fit for programming them, not just simulating :)
[16:30:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:31:05] <lotuseater> and you can load the QVM for trying things out
[16:31:31] <lotuseater> https://github.com/quil-lang/qvm
[16:31:42] <flip214> _death: ah, thanks
[16:38:23] *** Quits: attila_lendvai_ (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502) (Ping timeout: 250 seconds)
[16:43:10] *** Joins: Josh_2 (~user@37.25.47.130)
[16:43:44] <Josh_2> Hi, who has seen the project to create a working version of Interlisp on modern systems?
[16:43:52] <Josh_2> I tried it out last night, certainly interesting
[16:46:30] <lotuseater> oh do you have a link?
[16:47:38] <_death> https://interlisp.org/
[16:57:47] <Josh_2> If I release a private project under gpl3 does that mean I have to already have instructions on how to install/modify?
[16:58:15] <flip214> Josh_2: no. Documentation is not required.
[16:58:46] <Josh_2> okay thanks, guess I'll use gpl3
[16:59:04] <flip214> But perhaps you might want to use LLGPL3 (Lisp-Lesser GPL), to clear up minor details about using your library in an image.
[17:01:28] *** Joins: Bike (~Glossina@71.69.170.70)
[17:01:28] *** ChanServ sets mode: +o Bike
[17:01:47] * lotuseater wondered some time how it fits together if a non GPL project uses gcc for compiling
[17:02:11] <Josh_2> I looked into LLGPL and on the cliki it says just to use GPL3
[17:02:33] <Josh_2> https://www.cliki.net/LLGPL
[17:02:58] <Josh_2> contrapunctus: you here?
[17:07:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[17:09:45] <contrapunctus> Josh_2: where else do I know you? O.o
[17:10:00] <Josh_2> idk
[17:10:03] <Josh_2> probably just here
[17:10:04] <contrapunctus> Hehe
[17:10:13] <Josh_2> I made my matrix bot open source
[17:10:16] <lotuseater> or from #lispcafe :)
[17:10:21] <contrapunctus> Nice
[17:10:23] <Josh_2> Nah I'm not in #lispcafe
[17:10:27] <Josh_2> https://github.com/K1D77A/LunaMech contrapunctus
[17:10:52] <Josh_2> it does not build right now because of the defmodule macro... but I am going away for the weekend
[17:11:07] <Josh_2> plus all the documentation I had written was on a taiga instance which has been shutdown...
[17:11:48] <Josh_2> going away for the weekend so thought I'd make it opensource now and deal with the problems later :O
[17:12:06] <contrapunctus> Josh_2: thanks for making it FOSS and for sharing it with me.
[17:12:51] <contrapunctus> I'm busy with CLIM these days, but if I get back to the XMPP-Matrix bridge project, this will be a big help.
[17:13:08] <Josh_2> Well its got an implementation of the matrix API in src/api, but its so intertwined with the bots code that I dont know if I can be bothered to untangle it all and create a library
[17:14:58] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[17:18:15] <hayley> How many matrix(-the-messaging-protocol) libraries do we need?
[17:22:39] <flip214> Josh_2: ah, so LGPL is good enough. thanks for the link!
[17:23:19] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[17:24:23] <Josh_2> hayley: another reason why I didn't bother separating them
[17:24:38] *** Parts: engblom (~foo@user/engblom) ()
[17:30:31] <Josh_2> Altho tbf pretty sure there is only 1 other matrix api, and when I started mine Gnuxie's was totally unreadable sooo
[17:30:33] <Josh_2> can't really blame me
[17:32:30] <hayley> Where did you learn to read?
[17:32:42] <Josh_2> Clearly I haven't
[17:36:51] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:37:16] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:38:26] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:49:11] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[17:52:03] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[17:55:18] <Gnuxie> You were probably reading the generator output, which was written to files because at the time I didn't realise I could just leave it in a macroexpansion
[17:55:35] <Gnuxie> The files did say that though
[18:04:15] <Gnuxie> But as I have said many times, if we ever do this again it will be better to have some model of http apis in CLOS that can be used to generate much richer libraries
[18:04:16] <Gnuxie> Like open api 2 except not quite so constrained by YAML or some other thing
[18:09:42] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:10:45] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[18:17:56] <Josh_2> Lots of the api is hidden away in random MSC's
[18:18:10] <Josh_2> not sure if an auto generator is all that useful beyond a point
[18:18:23] <Josh_2> not that I dont appreciate the efforts ofc
[18:18:50] *** Quits: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at) (Quit: WeeChat 3.2)
[18:19:19] *** Joins: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at)
[18:24:28] *** Joins: Oladon (~olad@98.43.81.226)
[18:26:17] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 248 seconds)
[18:26:27] *** Joins: Alfr (~Alfr@user/alfr)
[18:28:07] *** Joins: hexology (~hexology@user/hexology)
[18:29:21] *** Quits: Th30n (~Th30n@cpe-188-252-156-32.zg5.cable.xnet.hr) (Quit: WeeChat 3.2)
[18:31:02] *** Alfr is now known as Guest7145
[18:31:02] *** Quits: Guest7145 (~Alfr@user/alfr) (Killed (silver.libera.chat (Nickname regained by services)))
[18:31:07] *** Joins: Alfr (~Alfr@user/alfr)
[18:33:13] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:34:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:34:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[18:36:10] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 240 seconds)
[18:37:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:47:57] *** Joins: Alfr (~Alfr@user/alfr)
[19:01:11] *** Joins: francogrex (~user@2a02:a03f:60c9:7d00:c87f:1a2a:9b9d:4f9)
[19:02:12] <francogrex> Hi, does anyone use linj or jnil, the lisp <-> java translators? I show an example of what jnil can do here: https://pastebin.com/kMx0QneB
[19:04:36] <francogrex> But I am looking for partnership on a project related to that: the "linj" programs are not executable by themselves unless translated to java, I would like to change that.
[19:05:15] <raeda> Why don't you just use ABCL and interop directly with Java?
[19:07:12] <francogrex> I get that reflection often but you can see the advantage of using jnil at least, it does the work automatically for you
[19:07:59] <francogrex> maybe if someone works with me on this we might find a way to use ABCL to execute the resultant linj program
[19:08:35] <raeda> What's your end goal? To run Java code in a Lisp image?
[19:09:12] <raeda> I'm currently working on a CL library that generates JVM bytecode, but I'm not sure that's what you want
[19:10:57] <francogrex> raeda: good for the lib/jvm bytecode. I am interested of course. yes my end goal would be to run Java code in a Lisp image, but "interactively"
[19:11:38] <francogrex> (i.e. not to compile a java class and load it into lisp, that can be done too but not my interest particularly here)
[19:12:17] <raeda> So you want to be able to redefine Java methods and stuff?
[19:13:58] <francogrex> there are some incomplete CL libs that do that (like cl+j and one other I have been using as well)
[19:14:25] <francogrex> raeda: I was thinking about linj methods and stuff rather
[19:15:41] <francogrex> I forgot the name of that other lib was good, it was working through reflection as well
[19:16:03] <francogrex> foam? maybe
[19:19:03] <raeda> What people have historically done before is to build a translation layer between Lisp and Java, and then build the rest of the application in Lisp
[19:20:06] <lisp123> Is there a command to suppress printing the return value of a function in REPL?
[19:20:42] <raeda> Since the JVM is so strict and since it's hard to translate Java semantics to Lisp, reflection is pretty much the only choice
[19:21:50] <francogrex> found it: http://foil.sourceforge.net
[19:22:11] <francogrex> raeda: yes indeed
[19:22:44] <francogrex> how far along are you with your project lisp 2 jvm?
[19:23:04] <raeda> Well, the creator of Foil went on to make Clojure, if that says anything
[19:23:47] <francogrex> raeda: I ddn't know. sometimes I see libraries and believe they are "abandonware"
[19:23:50] <francogrex> sadly
[19:23:53] <beach> lisp123: The value of a function?  Do you mean the value of a form that you type?
[19:24:25] <beach> lisp123: Why would you want to do such a thing?  I mean what is your use case?
[19:24:26] <raeda> francogrex: My project doesn't convert Lisp, it only generates class files
[19:24:42] <lisp123> beach: Yes, of a function. Its a very large list (240+). Because I do a lot of programming in the REPL itself
[19:24:58] <lisp123> run the program, then manually take CAR or LENGTH etc, do other stuff to it
[19:25:12] <lisp123> btw I think this answer is wrong: https://stackoverflow.com/questions/16369474/prevent-terminal-output-in-lisp - can anyone confirm?
[19:25:16] <lisp123> looks like terrible advice...
[19:25:20] <beach> lisp123: Then it's not the value of a function.  It's the value of a form.
[19:25:31] <beach> lisp123: (progn <form> (values))
[19:26:01] <beach> lisp123: And that's not a "command", it's a special form PROGN and a function VALUES.
[19:26:45] <francogrex> lisp123: a lot of "accepted" or upvoted answers on stackoverflow are bad/horribly bad
[19:27:31] <lisp123> beach: https://plaster.tymoon.eu/view/2610#2610
[19:27:45] <lisp123> Am I doing something wrong there?
[19:28:00] <francogrex> that site is highly visible (thanks to google search engine) but in general it's pretty bad, I would avoid it as much as possible
[19:28:00] <_death> lisp123: you may add such a "switch" to the slime repl, if you're not afraid of a little bit of elisp
[19:28:12] <beach> lisp123: You said you wanted no value.
[19:28:36] <lisp123> Suppress printing the value
[19:28:38] <lisp123> I still want the value
[19:28:46] <beach> *sigh*
[19:29:16] <lisp123> "Is there a command to suppress printing the return value of a function in REPL?"
[19:29:25] <beach> Got it.
[19:30:09] <lisp123> I think this stack overflow is just plain wrong - https://stackoverflow.com/questions/16369474/prevent-terminal-output-in-lisp , I want to change it but just checking if I'm mistaken
[19:30:21] <francogrex> though that answer isn't wrong this time in SO
[19:30:38] <francogrex> lisp123: why do you think that?
[19:31:17] <lisp123> francogrex: Actually you are right, the second sentence mentions not returning anything. The first sentence got me (run a function but not have output)
[19:32:02] *** Joins: selwyn (~selwyn@user/selwyn)
[19:32:03] <lisp123> _death: How would you do that? Something that prevents printing after amount of lines?
[19:32:18] *** Joins: selwyn_ (~selwyn@user/selwyn)
[19:32:39] <lisp123> certain amount*
[19:35:10] <_death> lisp123: well, I have this patch: https://github.com/death/slime/commit/8ebaf6f8fada68b5c55dae1b18e33f44f8a50d07 so I could set a new pprint dispatch entry for type LIST, for example
[19:36:22] <francogrex> (defparameter *test* 3) ... (defun addtotest () (incf *test*) (values)) ... (addtotest)
[19:36:34] <francogrex> what's wrong with that?
[19:36:50] <lisp123> _death: Great, thanks for sharing the code.
[19:38:40] <lisp123> francogrex: I am thinking of going down that path...what I may do use either _death 's version or a macro which sets the value of some symbol lets say $, similar to what you have. That way I can keep using stuff like (+ * $) (and similarly do $$, $$$ etc)
[19:39:13] <Alfr> francogrex, you could play with *print-length*, *print-level* .
[19:40:07] <raeda> francogrex: there's also jfli http://jfli.sourceforge.net/ but that requires Lisp Works
[19:40:51] <francogrex> it's ok, raeda jnil also requires a specific implementation (acl)
[19:41:31] <francogrex> is clojure still getting enough love these days?
[19:42:36] <lisp123> I was looking yesterday, and most of the functional progrmaming jobs listed were in Clojure
[19:42:40] *** Quits: Cymew (~ante@host-78-79-172-145.mobileonline.telia.com) (Ping timeout: 240 seconds)
[19:43:08] <francogrex> oh well
[19:43:29] <Alfr> francogrex, sorry, that was for lisp123: ^
[19:43:51] <francogrex> Alfr: yes I guessed
[19:44:09] <francogrex> I measure love by the github meter
[19:45:12] <_death> Alfr: oh right.. I thought about *print-length*, but I didn't recall if it works for lists
[19:45:48] <raeda> francogrex: Here's my project for reference: https://github.com/davidsun0/jclass Maybe you could translate bytecode into Lisp?
[19:47:35] <lisp123> Alfr: Thanks, unfortunately that is just for printing and not the return value. But it will prove helpful elsewhere for sure! Thanks for the tip
[19:48:13] <francogrex> raeda: good work. thumbs up!
[19:49:02] <raeda> Thanks!
[19:49:08] <francogrex> did you create that only yesterday or just pushed it yesterday
[19:49:51] <raeda> Started in June, been working on it a lot this week
[19:49:59] <francogrex> great
[19:52:19] <Alfr> lisp123, I thought you were complaining about the REPL's verbose output and still want to use *, **, ***; recall that the P stands for PRINT.
[19:53:49] <lisp123> Alfr: Ah, print I have been controlling with all my hacks onto print-object (and these days just rolling out more custom print functions), it was the return value that got me
[19:54:52] <beach> lisp123: By the way, why are you writing code at the REPL, rather than in one or more files?
[19:55:14] <beach> lisp123: You would have to move the code to a file eventually anyway, no?
[19:56:43] <lisp123> beach: Ah no, so I write most of my code in files, maybe 10% in repl but those are 2-3 lines max. I am doing calculations / introspection etc in the REPL. I'm 'trying' to build some math software, so hence a lot of work is in the REPL doing calcs etc
[19:57:12] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:57:23] <beach> I see.
[19:58:01] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[20:01:48] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:01:55] *** Quits: phantomics (~phantomic@71-33-131-32.hlrn.qwest.net) (Quit: Ex-Chat)
[20:09:48] <Josh_2> Who maintains planet lisp rss aggregator?
[20:12:11] *** Joins: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net)
[20:14:04] <sm2n> Josh_2, Xach
[20:16:37] <Josh_2> thanks sm2n
[20:24:28] *** Parts: francogrex (~user@2a02:a03f:60c9:7d00:c87f:1a2a:9b9d:4f9) (ERC (IRC client for Emacs 24.5.1))
[20:24:50] <vats> I wonder why a function name is allowed to be a list of the form (setf symbol), as per CLHS (http://clhs.lisp.se/Body/26_glo_f.htm#function_name), and how that affects function definitions.
[20:25:45] <beach> vats: Function definitions allow function names like that: (defun (setf bla) (...) ...)
[20:26:35] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-5-235.prtc.net)
[20:26:41] <vats> beach: I understand, but how is that different from just using the symbol name?
[20:27:15] <beach> vats: I can see two reasons for the existence.  1. A form such as (setf (foo x) ...) expands to (funcall #'(setf foo) ... x) by default.  It can't very well expand to (funcall #'foo...)
[20:28:10] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Read error: error:1408F10B:SSL routines:ssl3_get_record:wrong version number)
[20:28:12] <beach> 2. In DEFCLASS, you can type :accessor foo, and that defines two methods, namely (equivalent to) (defmethod foo (...)...) and (defmethod (setf foo) (...) ...)
[20:28:33] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[20:28:57] <beach> vats: In those two cases there must be a way to generate two separate function names.  One could generate a new symbol name and INTERN it, but that would be very ugly.
[20:29:02] <anddam> while building 2.49.92 I got   [OS-ERROR]: OS-ERROR(25): Not a tty   , how do I go in order to figure what is wrong?
[20:29:35] <beach> anddam: What is 2.49.92?
[20:29:46] <anddam> sorry, I meant clisp 2.49.92
[20:30:25] <beach> anddam: Not many people here use CLISP.  Do you have any particular reason for choosing it over more popular Common Lisp implementations?
[20:30:55] <beach> vats: Does that make sense to you?
[20:31:17] <anddam> beach: nothing more that "I have Land of Lisp"
[20:31:40] <beach> Oh, I am sorry to hear that.  That book is awfully written.
[20:31:59] <anddam> but it has got comics
[20:32:52] <vats> beach: Not yet. I don't understand the first statement.
[20:33:11] <anddam> beach: but I am right now reading a chapter from Practical Common Lisp as a reference on a topic
[20:33:49] <anddam> beach: I understand that has more following
[20:34:19] <beach> vats: When you type (setf (foo x) <some-form>), SETF is a macro that checks whether FOO has a SETF expander defined.  If it doesn't, it expands to (funcall #'(setf foo) <some-form> x).
[20:35:14] <beach> vats: By doing it that way, you can type (defclass bar () ((... :accessor foo))) and then (setf (foo (make-instance 'bar)) <some-form>)
[20:36:38] <beach> anddam: Most code from Land of Lisp works in any conforming Common Lisp implementations.  There are a few exceptions, though.
[20:38:40] <beach> "exceptions", meaning, some code in Land of Lisp uses CLISP-specific constructs, or otherwise constructs that are not conforming.
[20:40:05] <vats> beach: Thanks. I need to try some things before I would get it. Can I get back to you on this?
[20:40:40] <beach> vats: Sure, but in 20 minutes or so I am off to fix dinner for my (admittedly small) family.  But many others here can help you.
[20:41:53] <beach> vats: You can try the DEFCLASS form I showed, and then inspect the functions #'foo and #'(setf foo) and you will see that each one has one method.
[20:42:19] <beach> vats: And you can check that (macroexpand-1 '(setf (foo x) y)) expands to what I said.
[20:44:59] <vats> beach: Yeah. I also found the relevant CLHS page: http://www.lispworks.com/documentation/HyperSpec/Body/05_abi.htm
[20:45:07] <vats> >  A function named (setf f) must return its first argument as its only value in order to preserve the semantics of setf.
[20:45:10] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 240 seconds)
[20:45:29] <_death> vats: suppose you have a function CAR, that returns the value in the car position of a cons.. (car (cons 'x 'y)) => X.. you can also have a function to replace the contents with some other value, RPLACA.. (rplaca (cons 'x 'y) 'z).. SETF lets you write something more "intuitive", like (setf (car (cons 'x 'y)) 'z).. simplifying a bit, the way it works is that it calls the rplaca-like function that's named (setf car)... it could be defined
[20:45:31] <_death> like (defun (setf car) (new-value the-cons) (rplaca the-cons new-value) new-value) .. it could work otherwise, say by telling SETF that the setf function for CAR is SET-CAR, or say the value of (GET 'CAR 'SETF-FUNCTION), but a function with the name (setf car) seems clear enough and opens up the way for other "list names" for functions
[20:49:26] *** Joins: nature_ (~nature@mail.blazebone.com)
[20:53:10] <vats> I see. That makes more sense.
[21:08:14] <_death> in sbcl, for example, you can define a (cas car) that compares-and-swaps with the value.. note, though, that since CL doesn't have a way for the programmer to define his own "namespace" like that, we often resort to the (get 'car 'my-function) or using a hash-table and such
[21:12:08] <vats> _death: Do you mean you can write something like (defun (cas car) (cell) ...) in SBCL?
[21:12:36] <_death> http://www.sbcl.org/manual/#CAS-Protocol
[21:17:41] <vats> _death: Somehow the example in that link doesn't work on SBCL 2.1.6. I get the error:
[21:17:41] <vats> The NAME argument to DEFUN, (CAS FOO), is not a function name. Same happens when I try to use (cas car) as a function name in a defun form.
[21:18:20] <_death> vats: the symbol is sb-ext:cas
[21:19:37] <vats> I see. Thanks
[21:38:57] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:43:07] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-5-235.prtc.net) (Quit: Client closed)
[21:43:59] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Read error: error:1408F10B:SSL routines:ssl3_get_record:wrong version number)
[21:53:25] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 250 seconds)
[21:53:41] *** Joins: Alfr (~Alfr@user/alfr)
[21:54:23] <Oladon> Hrm. I've got a list of lowercase tokens and am trying to figure out how to match any case combination of them with https://github.com/Ramarren/cl-parser-combinators using the choices1 function... but I can't seem to wrap my head around how to do it. Any ideas?
[21:55:08] <Oladon> E.g. I'd call (apply #'choices1 '("foo" "bar" "baz")) to match any of those three tokens, but now I want to change it to match "Foo" or "fOo" or "FOO" as well.
[22:00:07] *** Joins: saltrocklamp[m] (~elementio@user/hexology)
[22:05:13] *** Joins: gaqwas (~john@dynamic-095-117-013-199.95.117.pool.telefonica.de)
[22:06:10] *** Quits: zuckonit (~user@154.6.18.37) (Ping timeout: 240 seconds)
[22:08:07] *** Quits: silasfox (~sbv@xdsl-87-78-57-101.nc.de) (Ping timeout: 240 seconds)
[22:10:13] *** Joins: silasfox (~sbv@xdsl-78-35-202-189.nc.de)
[22:20:40] *** Quits: silasfox (~sbv@xdsl-78-35-202-189.nc.de) (Ping timeout: 240 seconds)
[22:21:11] <Bike> Oladon: i don't see any case insensitivity operators in the documentation. you could do it the dumb way by listing each case in the choices.
[22:23:06] *** Joins: silasfox (~sbv@xdsl-87-78-57-101.nc.de)
[22:24:40] <Oladon> Aha... apparently the built-in (string?) takes an optional :test, so I can do (apply #'choices1 (mapcar (lambda (x) (string? x :test #'string-equal)) '("foo" "bar" "baz")))
[22:26:46] <Bike> oh, well, there you go then
[22:26:53] <Oladon> :)
[22:26:58] <Oladon> Thanks!
[22:27:11] <Oladon> One of those "you'll only find the answer right after you ask" situations.
[22:33:14] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:39:57] <lisp123> Anybody using Graphviz?
[22:40:09] <lisp123> Very useful tool to visualise lists
[22:43:01] *** Quits: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net) (Quit: Leaving)
[22:43:45] *** Joins: lisp123_ (~lisp123@45.86.202.65)
[22:46:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[22:56:34] *** Quits: nature_ (~nature@mail.blazebone.com) (Ping timeout: 250 seconds)
[23:02:06] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[23:03:05] *** Quits: silasfox (~sbv@xdsl-87-78-57-101.nc.de) (Ping timeout: 248 seconds)
[23:09:15] *** Quits: Oladon (~olad@98.43.81.226) (Ping timeout: 250 seconds)
[23:11:44] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[23:14:53] *** Joins: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com)
[23:14:57] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[23:16:04] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 250 seconds)
[23:16:50] *** Joins: silasfox (~sbv@xdsl-78-35-202-189.nc.de)
[23:18:00] *** Quits: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com) (Read error: Connection reset by peer)
[23:18:12] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[23:22:04] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[23:23:23] *** Joins: Oladon (~olad@98.43.81.226)
[23:25:55] *** Joins: Alfr (~Alfr@user/alfr)
[23:31:15] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[23:31:32] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[23:32:53] <lotuseater> lisp123_: https://github.com/michaelw/cl-dot
[23:34:10] *** Quits: silasfox (~sbv@xdsl-78-35-202-189.nc.de) (Ping timeout: 252 seconds)
[23:34:44] <lisp123_> lotuseater: Thanks!
[23:37:21] <lotuseater> there's also cl-graphviz in a darcs repository
[23:37:23] *** Joins: silasfox (~sbv@xdsl-87-78-57-101.nc.de)
[23:38:12] <lisp123_> Yeah, I saw that one. This one looks a bit easier
[23:39:09] <lotuseater> and I like darcs :)
[23:39:22] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[23:39:39] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[23:42:53] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[23:43:10] *** Joins: Alfr (~Alfr@user/alfr)
[23:43:55] *** Quits: silasfox (~sbv@xdsl-87-78-57-101.nc.de) (Ping timeout: 250 seconds)
[23:45:52] *** Joins: silasfox (~sbv@xdsl-78-35-202-189.nc.de)
[23:47:26] *** Joins: nature_ (~nature@mail.blazebone.com)
[23:50:07] <lisp123_> :)
[23:50:26] *** Quits: lisp123_ (~lisp123@45.86.202.65) (Remote host closed the connection)
[23:51:07] *** Joins: lisp123 (~lisp123@45.86.202.65)
[23:52:27] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 240 seconds)
[23:54:21] *** Quits: lisp123 (~lisp123@45.86.202.65) (Read error: Connection reset by peer)
[23:56:22] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[23:57:31] *** Joins: cosimone (~user@93-47-230-235.ip115.fastwebnet.it)
