[00:00:33] *** Quits: Guest59 (~Guest59@host-79-27-95-23.retail.telecomitalia.it) (Client Quit)
[00:01:50] *** Joins: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke)
[00:01:58] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[00:03:54] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[00:08:59] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:10:05] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[00:11:55] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[00:15:33] *** Joins: joilerv (~joilerv@135.129.250.144)
[00:16:11] *** Quits: jsbach (~jsbach@2a01:c23:5cca:cf00:d5a:9b23:2dbc:fe19) (Ping timeout: 256 seconds)
[00:16:36] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:21:30] *** Joins: joilerv_ (~joilerv@135.129.250.144)
[00:22:46] *** Joins: jsbach (~jsbach@2a01:c23:5cca:cf00:d5a:9b23:2dbc:fe19)
[00:23:25] *** Quits: joilerv (~joilerv@135.129.250.144) (Ping timeout: 250 seconds)
[00:26:25] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:28:39] *** malinus_ is now known as malinus
[00:28:47] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[00:29:10] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Client Quit)
[00:29:20] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 252 seconds)
[00:30:01] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:34:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:59] *** Quits: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[00:41:28] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[00:42:42] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[00:42:53] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Quit: Hello71)
[00:44:00] *** beco is now known as drbeco
[00:44:48] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:46:05] *** Joins: Tom^-laptop (~Tom^@user/tom/x-0773808)
[00:46:45] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[00:46:47] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[00:46:49] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Remote host closed the connection)
[00:46:52] *** Quits: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[00:47:11] *** Joins: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[00:47:47] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[00:47:53] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:48:42] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[00:49:30] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[00:49:30] *** Quits: magla (~gelignite@55d4c694.access.ecotel.net) (Quit: Stay safe!)
[00:51:12] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:55:38] *** Quits: skeev (~skeev@92.86.110.192) (Remote host closed the connection)
[00:56:03] *** Joins: skeev (~skeev@92.86.110.192)
[00:57:35] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[00:59:27] *** Joins: proller (~p@80.240.216.69)
[00:59:44] *** Quits: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217) (Remote host closed the connection)
[01:00:51] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[01:00:59] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Client Quit)
[01:04:35] *** Quits: skeev (~skeev@92.86.110.192) (Ping timeout: 256 seconds)
[01:06:34] *** Joins: roan (~roan@user/roan)
[01:06:47] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[01:06:49] *** Joins: sheb (~sheb@31.223.228.71)
[01:08:49] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Quit: varioust)
[01:09:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:12:35] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:90d6:f3c8:741b:677a) (Ping timeout: 250 seconds)
[01:13:34] *** Quits: joilerv_ (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:17:48] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:18:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:23:50] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:25:39] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:26:55] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:30:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:30:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[01:31:42] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:32:51] *** Quits: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[01:33:39] *** Quits: sbrothy (~sbrothy@213.83.133.231) (Read error: Connection reset by peer)
[01:35:29] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Read error: Connection reset by peer)
[01:36:21] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[01:37:29] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[01:38:07] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:38:20] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:39:19] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[01:42:06] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:14] *** ChanServ sets mode: +v npaperbot
[01:43:26] *** Quits: jokoon (~eio@2a01:e0a:542:e160:91df:1b1:2212:3eac) (Quit: Leaving)
[01:46:00] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[01:46:25] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[01:46:56] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:71fb:7a3d:845d:425d)
[01:46:56] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:71fb:7a3d:845d:425d) (Changing host)
[01:46:56] *** Joins: skapata (~Skapata@user/skapata)
[01:47:34] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:49:06] *** Quits: slidercrank (~slidercra@user/slidercrank) (Remote host closed the connection)
[01:55:13] *** Joins: Betal (~Betal@user/betal)
[01:55:28] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:55:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:56:50] *** Joins: arch_angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[01:59:25] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:06:17] *** Joins: tesuji (~quassel@2a02:908:180:9500:7dfb:8bc4:47fe:281d)
[02:07:29] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Ping timeout: 256 seconds)
[02:08:00] *** Quits: rtrs (~apoim@m77-219-4-174.cust.tele2.lv) (Read error: Connection reset by peer)
[02:10:23] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:11:19] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:12:30] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[02:16:42] *** Joins: llh (~llh@user/llh)
[02:19:01] *** Quits: manx (xuew@p200300e18f239d00022215fffe03cf97.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[02:20:40] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[02:22:26] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[02:26:38] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:27:26] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:31:07] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:31:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:31:31] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[02:33:33] *** Quits: pizdets (~pizdets@183.182.111.45) (Ping timeout: 256 seconds)
[02:34:16] *** Joins: pizdets (~pizdets@183.182.110.149)
[02:34:59] *** Quits: toadtoad (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) (Quit: toadtoad)
[02:38:08] *** Joins: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[02:38:39] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[02:39:17] *** Quits: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) (Client Quit)
[02:40:12] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:41:17] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:42:28] <pa> let's say that FooType is the type of a function, is there a way to extract the return value type from FooType inside a template?
[02:44:37] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[02:44:55] *** Quits: proller (~p@80.240.216.69) (Quit: Leaving)
[02:45:08] *** Joins: proller (~p@80.240.216.69)
[02:46:05] <Oxyd> You have to make your own template to do that. I don't think there's anything in the standard library for that – not sure why.
[02:46:55] <Oxyd> (There's std::invoke_result, but that's not *quite* the same.)
[02:47:26] *** Joins: crm (~crm@70.120.0.94)
[02:47:29] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 256 seconds)
[02:47:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Quit: varioust)
[02:47:55] <Oxyd> geordi: template <typename F> struct return_type; template <typename R, typename... Args> struct return_type<R(Args...)> { using type = R; }; template <typename F> using return_type_t = typename return_type<F>::type; int main() { using F = int(double, string); cout << TYPE<return_type_t<F>>; }
[02:47:56] <geordi> int
[02:51:29] <Alipha> pa: https://godbolt.org/z/x8MrP9f4v works for lambdas (as long as you don't use `auto` for lambda parameters) and functors too
[02:52:17] <Alipha> (and member functions)
[02:52:30] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:52:39] *** Joins: abf (~abf@user/abf)
[02:53:13] <pa> thanks for the tips! i'll try these!
[02:53:37] *** Joins: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217)
[02:54:13] <pa> sounds weird stl doesn't have anything tho..
[02:54:27] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Remote host closed the connection)
[02:57:50] <pa> Oxyd: i'm having problems with template <typename F> using return_type_t = typename return_type<F>::type;  can it be because of only Cpp14?
[02:58:35] <Oxyd> That's not preprocessor code. Did you mean C++14? If so, then no, that should work just fine in C++14.
[02:58:53] <Oxyd> geordi: use --2014
[02:58:54] <geordi> int
[03:01:23] *** Joins: N4buc0- (~N4buc0@2804:7f4:348a:fff2:86e5:3ec1:2264:dc1)
[03:01:49] <pa> gotcha, thanks. Perhaps because it's a lambda then.. i shall try Alipha header, to see if that can help
[03:02:42] <Oxyd> Well lambda closures are not functions; they are classes. So your premise of “FooType is the type of a function” doesn't hold in that case.
[03:03:54] <pa> ah i see..
[03:04:06] <pa> in fact i'm getting invalid use of incomplete type
[03:05:03] *** Quits: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217) (Remote host closed the connection)
[03:06:21] <Alipha> pa: my header is c++17. i removed the c++17-specific stuff here to make it c++14-compatible: https://godbolt.org/z/roc4brcbh
[03:06:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[03:07:30] <pa> thanks, that's very kind!
[03:08:30] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:09:18] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:09:53] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[03:15:37] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:17:00] <RandomReader> note that if you just want to know is what type you get from actually calling it, decltype covers that
[03:17:25] <pa> well i want to use it to declare a variable
[03:17:33] <RandomReader> auto would cover that :P
[03:18:07] <pa> ah right, i also need it as a tuple type
[03:18:16] <pa> like template arugment
[03:18:22] <RandomReader> so back to decltype
[03:18:46] <pa> i also found std::result_of, does that help?
[03:18:56] <RandomReader> extracting the return type via a template is fine, I'm just pointing out that when things are concrete, there are simpler approaches
[03:19:24] *** Joins: CaCode (~CaCode@user/cacode)
[03:20:19] <RandomReader> result_of is for invocable expressions, meaning if you're going to use std::invoke to call it
[03:20:26] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:20:47] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:20:52] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[03:20:56] <RandomReader> it handles a variety of things that don't use operator()
[03:20:57] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[03:20:57] *** Quits: roan (~roan@user/roan) (Quit: Lost terminal)
[03:21:48] <RandomReader> << TYPE< decltype(foo()) >;  int foo() { return 0; }   // this is what I mean by decltype
[03:21:49] <geordi> int
[03:22:48] <RandomReader> that form will match the function's return type, including reference types .. if you use auto to declare a variable, that's always an object type (non-reference), and you could decltype(variable) if you wanted to retrieve that same non-reference type later
[03:22:58] <RandomReader> all depends on what you're doing of course, just options
[03:23:03] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:23:42] <Alipha> << TYPE< decltype(foo(3.5, "hi")) >;  int foo(double, const char*) { return 0; }   // if it takes parameters, just provide arbitrary values of the appropriate type for the parameters
[03:23:43] <geordi> int
[03:25:20] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[03:27:19] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[03:27:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:28:39] *** Quits: callq_ (~callq@2409:4062:202:fb53:35cf:a4ba:9e6b:cada) (Ping timeout: 250 seconds)
[03:30:20] <pa> auto foo = [](int) -> double { return .0 }; int main() { using T = decltype(foo); cout << TYPE<T>; }
[03:30:24] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:28] <pa> geordi: auto foo = [](int) -> double { return .0 }; int main() { using T = decltype(foo); cout << TYPE<T>; }
[03:30:28] <geordi> error: expected ';' before '}' token (fix known)
[03:30:49] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:30:56] <pa> geordi: auto foo = [](int) -> double { return .0; }; int main() { using T = decltype(foo); cout << TYPE<T>; }
[03:30:57] <geordi> <lambda(int)>
[03:31:35] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:31:59] <pa> RandomReader: i must have misunderstood how to use it
[03:34:18] <Alipha> geordi: auto foo = [](int) -> double { return .0; }; int main() { using T = decltype(foo(3)); cout << TYPE<T>; }
[03:34:19] <geordi> double
[03:34:24] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:35:42] <pa> ah, so i have to call that first
[03:35:56] <pa> not a compile time thing?
[03:36:14] <RandomReader> right, it's about getting the result type of the expression, which is a function call -> return type in this case
[03:36:16] <Alipha> pa: eh, the function isn't actually called
[03:36:34] <pa> ah so it is a compile time thing
[03:36:34] <RandomReader> it's compile time
[03:36:41] <pa> so weird lol
[03:36:43] <pa> let me try
[03:37:08] <Alipha> decltype just gives you the type of any arbitrary expression
[03:37:22] <Alipha> << decltype(3 + 5.4)
[03:37:22] <geordi> error: expected primary-expression before 'decltype'
[03:37:37] <Alipha> << TYPE<decltype(3 + 5.4)>
[03:37:38] <geordi> double
[03:38:27] <pa> i think i finally got it compiling
[03:38:29] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 256 seconds)
[03:38:32] <pa> thanks!
[03:38:36] <pa> (still so weird..)
[03:43:49] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[03:48:00] <TonyStone> Would you guys recomend using CodeBlocks for learning C and C++ programming?
[03:51:55] *** Joins: rgrinberg (~textual@187.223.115.137)
[03:52:04] <RandomReader> #c++-general is the better channel to ask about tools, but in broad strokes, I'd recommend two things: pick either C or C++ to learn, they're both very different languages (it's a common misconception that one is a superset of the other -- not how good code works in practice) .. and probably not CodeBlocks, it's too old to match the most popular effective tooling out there
[03:52:18] <RandomReader> !basics
[03:52:19] <nolyc> Books, references, tutorials, for all levels of learning: https://isocpp.org/get-started ; https://isocpp.org/faq ; https://learncpp.com/ ; http://stackoverflow.com/q/388242 ; https://github.com/isocpp/CppCoreGuidelines ; https://cppreference.com/
[03:52:29] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[03:52:32] <RandomReader> for C++, the above are resources, the stackoverflow link in particular has some recommended books
[03:54:08] <TonyStone> ill take a look at the link.  I have been learning Pascal for the past year or so... and I am very happy with it.... but there is a project I found on GitHub that I want to modify... and it seems to be written in C or C++... i actually dont know which... there is some ASM included also... so...
[03:54:39] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[03:55:35] <cbreak> TonyStone: take a look at the file extension.
[03:55:41] <cbreak> it might indicate what it is
[03:56:03] <cbreak> also, if it contains namespaces, classes, lambdas, or C++ stdlib includes, it's probably C++
[03:56:09] <TonyStone> most are .c and .h
[03:56:17] <cbreak> then it's probably C.
[03:56:22] <TonyStone> .h i assume are header files... some are .as
[03:56:42] <cbreak> .h is for headers, yes. Often C headers. Sometimes badly named C++ headers.
[03:57:07] <TonyStone> lol @ badly names C++ headers  :)
[03:58:22] *** Quits: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:58:24] <TonyStone> I looked through the code to see if i saw any meta files from a particular IDE that the original developer may have used but I dont see anything... nothing stands out at me anyway
[03:58:48] *** Quits: AmR (~AmREiSa@156.207.136.200) (Quit: Konversation terminated!)
[03:58:51] <cbreak> in a C++ project, you might find CMakeLists.txt files from CMake
[03:59:07] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 256 seconds)
[03:59:08] <TonyStone> It does use have a make file
[03:59:08] <cbreak> in C, you might find Makefile, configure, config.am or similar
[03:59:38] <TonyStone> also some .o files... what would those be?
[04:00:58] <TonyStone> actually i am wrong.... there is a line in make file that that rm -f *.o files...
[04:01:21] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:04:04] <RandomReader> they're intermediate files during the build process
[04:04:55] <RandomReader> for C, the folks in the #C channel will probably have recommendations on learning material and popular tools
[04:06:32] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[04:06:39] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:06:54] *** Parts: Joanna (uid57472@id-57472.lymington.irccloud.com) ()
[04:07:10] <TonyStone> Yeah I am gonna go pestor in the #c channel a little bit as well.  :)  thanks guys
[04:07:35] <RandomReader> welcome, have fun!
[04:09:49] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[04:10:06] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[04:10:23] *** Joins: Soni (~quassel@autistic.space)
[04:12:03] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[04:12:15] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[04:18:30] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[04:19:09] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[04:20:12] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[04:20:25] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 256 seconds)
[04:20:46] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4d74:be9c:8758:8859) (Ping timeout: 245 seconds)
[04:24:06] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 245 seconds)
[04:24:41] *** Joins: Soni (~quassel@autistic.space)
[04:28:07] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[04:28:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:29:39] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[04:31:59] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:38:16] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[04:39:02] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[04:41:04] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:45:59] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[04:53:25] *** Joins: N4buc0 (~N4buc0@189.58.131.84)
[04:53:31] *** Quits: N4buc0- (~N4buc0@2804:7f4:348a:fff2:86e5:3ec1:2264:dc1) (Remote host closed the connection)
[04:57:49] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:00:17] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[05:02:48] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:03:29] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:13:01] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[05:16:43] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[05:21:17] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[05:25:18] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[05:28:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:28:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:30:51] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:32:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:34:41] *** Quits: dgdg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Remote host closed the connection)
[05:35:29] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:36:53] *** Quits: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[05:42:07] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:15] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:15] *** ChanServ sets mode: +v npaperbot
[05:43:17] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:47:07] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[05:51:01] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[05:52:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217)
[05:53:02] *** Quits: abf (~abf@user/abf) (Quit: Leaving)
[05:56:50] *** Quits: pulse (~pulse@user/pulse) (Quit: Visit https://indiedevs.net/ we have cookies)
[05:57:53] *** Quits: foul_owl (~kerry@94.140.8.107) (Ping timeout: 256 seconds)
[05:59:49] *** Quits: Tom^-laptop (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4)
[06:02:03] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[06:02:23] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:03:31] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[06:09:02] *** Joins: ferdna (~ferdna@user/ferdna)
[06:09:13] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 256 seconds)
[06:12:19] *** Joins: foul_owl (~kerry@23.82.193.178)
[06:14:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:14:23] *** Quits: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217) (Remote host closed the connection)
[06:14:39] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[06:18:24] *** Joins: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217)
[06:19:24] *** Quits: arch_angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Remote host closed the connection)
[06:19:41] *** Joins: arch_angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[06:27:18] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:27:34] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[06:27:42] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:27:43] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac) (Quit: Leaving)
[06:29:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:33:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:42:19] *** Quits: foul_owl (~kerry@23.82.193.178) (Ping timeout: 256 seconds)
[06:42:39] *** Quits: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217) (Remote host closed the connection)
[06:44:08] *** Joins: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217)
[06:44:21] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 256 seconds)
[06:49:18] *** Joins: Rynn (~rynn@216.30.158.198)
[06:51:54] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[06:52:00] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[06:53:20] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Remote host closed the connection)
[06:54:56] *** Joins: cheater (~Username@user/cheater)
[06:55:00] <cheater> hi
[06:55:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:55:18] *** Xark_ is now known as Xark
[06:55:35] <cheater> i'm having trouble understanding this code. can someone help me figure out what's going on here? what does "aux" refer to?  https://github.com/arvidn/libtorrent/blob/57955b93e69023f3cd21dbd9e5c4ac15eaff264e/src/posix_storage.cpp#L348
[06:57:06] *** Joins: foul_owl (~kerry@23.82.193.176)
[06:58:24] <tesuji> a namespace
[06:58:47] <cheater> hmm ok, how would i find the code being called here?
[06:58:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:01:13] *** Quits: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217) (Remote host closed the connection)
[07:02:43] <tesuji> cheater: Uh, looking?
[07:02:55] <tesuji> cheater: Its probably easiest to check out the repo and use an ide
[07:02:57] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[07:03:16] <tesuji> vscode or anything that can do "jump to symbol"
[07:03:25] *** Joins: cheater (~Username@user/cheater)
[07:03:29] <cheater> sorry, i got disconnected. tesuji, how would i find the code being called from the aux namespace? i don't know how that's set up.
[07:03:30] <tesuji> vscode or anything that can do "jump to symbol"
[07:03:42] <cheater> thanks
[07:03:46] <tesuji> <tesuji> cheater: Its probably easiest to check out the repo and use an ide
[07:04:07] <cheater> right. how does the ide know where to look?
[07:04:17] <tesuji> the same way your compiler does
[07:04:22] <cheater> :(
[07:04:44] <tesuji> It has include paths and such
[07:07:03] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:10:05] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:11:24] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:13:02] *** Quits: rgrinberg (~textual@187.223.115.137) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:18:57] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[07:20:17] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[07:25:48] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:29:55] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:31:10] *** Joins: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217)
[07:32:44] *** Joins: gauss (~gauss@136.53.92.204)
[07:33:33] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:33:49] *** Quits: gauss (~gauss@136.53.92.204) (Client Quit)
[07:36:09] *** Quits: foul_owl (~kerry@23.82.193.176) (Ping timeout: 256 seconds)
[07:39:22] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[07:39:39] *** Joins: callq (~callq@157.41.72.120)
[07:41:02] *** Quits: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217) (Remote host closed the connection)
[07:41:51] <cheater> tesuji: so it's probably from another lib?
[07:50:54] *** Joins: foul_owl (~kerry@192.145.116.101)
[07:53:44] *** Joins: Null_A (~null_a@2601:645:8700:2290:4c47:2f1b:c09c:dc10)
[07:54:50] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[07:56:21] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[07:57:17] *** Joins: hinata (~hinata@2409:4042:48b:bdda:d12b:9728:1f6e:1537)
[08:02:08] <smallville7123> who has a lot of experience with C++ iterators
[08:02:51] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:540b:bd79:8d25:836)
[08:03:18] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:05:39] <smallville7123> ughhhhhhh why is this so difficult for people ;-;
[08:09:59] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[08:10:09] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Ping timeout: 256 seconds)
[08:10:22] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[08:11:28] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[08:14:11] <AliceMeows> o_O
[08:19:35] *** Quits: jsbach (~jsbach@2a01:c23:5cca:cf00:d5a:9b23:2dbc:fe19) (Ping timeout: 252 seconds)
[08:20:44] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[08:23:18] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[08:26:43] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[08:27:31] *** Quits: Null_A (~null_a@2601:645:8700:2290:4c47:2f1b:c09c:dc10) (Remote host closed the connection)
[08:30:25] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:31:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:4c47:2f1b:c09c:dc10)
[08:33:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:34:47] *** Joins: bindu (~bindu@user/bindu)
[08:37:23] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[08:41:28] *** Quits: Null_A (~null_a@2601:645:8700:2290:4c47:2f1b:c09c:dc10) (Remote host closed the connection)
[08:42:29] *** Joins: Null_A (~null_a@2601:645:8700:2290:4c47:2f1b:c09c:dc10)
[08:45:13] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[08:48:46] <AliceMeows> Were all the unique_resource papers dropped?
[08:49:19] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[08:49:49] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[08:52:15] *** Quits: Null_A (~null_a@2601:645:8700:2290:4c47:2f1b:c09c:dc10) (Remote host closed the connection)
[08:55:24] *** Joins: Null_A (~null_a@2601:645:8700:2290:7c2a:bca9:fa46:3105)
[09:04:10] *** Joins: savolla (~quassel@84.44.28.28)
[09:04:59] *** Quits: Null_A (~null_a@2601:645:8700:2290:7c2a:bca9:fa46:3105) (Remote host closed the connection)
[09:06:00] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:10:33] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[09:10:38] <AliceMeows> Does if constexpr prevent RVO/NRVO?
[09:10:57] *** Joins: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[09:11:21] *** Quits: foul_owl (~kerry@192.145.116.101) (Ping timeout: 256 seconds)
[09:11:23] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[09:11:46] <ville> no?
[09:11:49] <InPhase> AliceMeows: It shouldn't.  That should get processed before that is evaluated.
[09:12:26] <AliceMeows> Oh good, I was a little worried that it might be since regular ifs already do and I wasn't sure if it was including constexpr ifs or not
[09:12:28] <ville> i am sure you can write something that will then appear not to optimize out
[09:12:54] *** Joins: ketiv (~ketiv@cpc148896-sgyl44-2-0-cust233.18-2.cable.virginm.net)
[09:12:57] <InPhase> AliceMeows: I can't promise no compiler gets it wrong.  You can always check.
[09:13:00] <AliceMeows> The idea is to guarantee RVO but I'm not sure how doable it is
[09:13:20] <ville> optimizers are fickle...
[09:13:26] <AliceMeows> Yeah...
[09:14:45] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[09:24:06] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[09:25:43] *** Joins: foul_owl (~kerry@23.82.194.141)
[09:28:53] <InPhase> AliceMeows: If you really don't trust if constexpr, or you test it and it fails, SFINAE can (as far as I'm aware) do all of the same things, just sometimes with extra ugliness.  And then you know for sure it reduces down to a simple function.
[09:29:24] <InPhase> AliceMeows: But generally you should prefer if constexpr if that's the cleaner approach, and just test out some compiles of testcases.
[09:29:44] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[09:29:55] <InPhase> AliceMeows: It's important to be able to read assembly output when you're struggling with difficult optimization questions or needs.
[09:30:21] *** Joins: letto (~letto@86.120.81.105)
[09:30:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:31:11] <AliceMeows> Oh I very much intend to use SFINAE
[09:31:17] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:33:47] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:34:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:35:57] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Ping timeout: 240 seconds)
[09:39:21] <AliceMeows> I just want my code to be portable and behave the same as closely as possible with various compilers
[09:40:01] *** Quits: emerent (~quassel@p200300cd57044377ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[09:40:04] *** Joins: emerent_ (~quassel@p200300cd5704433fba27ebfffed28a59.dip0.t-ipconnect.de)
[09:40:04] *** emerent_ is now known as emerent
[09:42:07] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:14] *** ChanServ sets mode: +v npaperbot
[09:45:48] <RandomReader> what used to be RVO is intrinsically part of the language as of C++17, so the only consideration should be NRVO
[09:47:17] <RandomReader> NRVO I'm not sure can be reasonably guaranteed, since it's opportunistic
[09:50:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:7c2a:bca9:fa46:3105)
[10:00:34] *** Quits: Null_A (~null_a@2601:645:8700:2290:7c2a:bca9:fa46:3105) (Remote host closed the connection)
[10:01:46] <AliceMeows> NRVO isn't guaranteed
[10:06:37] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:07:12] *** Quits: hinata (~hinata@2409:4042:48b:bdda:d12b:9728:1f6e:1537) (Remote host closed the connection)
[10:07:29] *** Joins: hinata (~hinata@2409:4042:48b:bdda:919:6e9d:34aa:5735)
[10:15:11] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[10:20:11] *** Quits: dfkfs (~dfkfs@178.49.152.151) (Quit: Client closed)
[10:22:57] *** Quits: hinata (~hinata@2409:4042:48b:bdda:919:6e9d:34aa:5735) (Ping timeout: 240 seconds)
[10:27:09] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[10:31:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:33:08] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:7d5c:9df3:79fe:43ff)
[10:34:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:35:47] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[10:40:12] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:540b:bd79:8d25:836) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:43:59] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:48:50] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[10:50:32] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[11:00:39] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[11:05:35] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Ping timeout: 256 seconds)
[11:09:56] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[11:13:04] *** Joins: Null_A (~null_a@2601:645:8700:2290:7c2a:bca9:fa46:3105)
[11:13:55] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:18:51] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[11:21:48] *** Joins: andreasbuhr (~quassel@p549db796.dip0.t-ipconnect.de)
[11:22:50] *** Quits: Null_A (~null_a@2601:645:8700:2290:7c2a:bca9:fa46:3105) (Remote host closed the connection)
[11:30:55] *** Quits: andreasbuhr (~quassel@p549db796.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:31:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:34:33] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:35:23] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[11:35:49] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[11:37:27] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[11:37:57] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[11:40:33] *** Joins: jsbach (~jsbach@2a01:c22:35dd:4000:2a8e:b1bb:9c1c:b6f2)
[11:41:57] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[11:44:20] *** gentooclimax is now known as climax
[11:44:28] *** climax is now known as gentooclimax
[11:44:39] *** Joins: rendar (~rendar@user/rendar)
[11:45:20] *** Joins: cosimone (~user@93-47-231-87.ip115.fastwebnet.it)
[11:52:47] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:57:02] *** Quits: elemongw (~elemongw@20.107.36.50) (Quit: ZNC 1.6.5+deb1+deb9u2 - http://znc.in)
[11:57:36] *** Joins: elemongw (~elemongw@20.107.36.50)
[11:57:45] *** Quits: elemongw (~elemongw@20.107.36.50) (Client Quit)
[11:58:05] *** Joins: elemongw (~elemongw@20.107.36.50)
[12:00:27] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:02:11] *** Joins: elemongw_ (~Thunderbi@2a02:85f:1508:1a00:55ae:e868:e754:fa1b)
[12:02:51] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 245 seconds)
[12:04:47] *** Joins: MajorBiscuit (~MajorBisc@c-001-017-058.client.tudelft.eduvpn.nl)
[12:08:30] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:09:48] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5321)))
[12:09:49] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[12:10:56] *** Quits: foul_owl (~kerry@23.82.194.141) (Read error: Connection reset by peer)
[12:14:14] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:14:46] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:20:20] *** Joins: skeev (~skeev@92.86.110.192)
[12:21:11] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[12:24:04] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[12:25:21] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:25:22] *** Quits: elemongw_ (~Thunderbi@2a02:85f:1508:1a00:55ae:e868:e754:fa1b) (Quit: elemongw_)
[12:27:10] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[12:27:11] *** Joins: bindu_ (~bindu@user/bindu)
[12:28:14] *** Joins: limubs (~limubs@cgn-89-0-49-98.nc.de)
[12:28:44] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Ping timeout: 252 seconds)
[12:28:49] *** Joins: foul_owl (~kerry@192.145.116.33)
[12:29:09] *** bindu_ is now known as bindu
[12:29:32] *** Joins: Uswald (~leandre@37.35.6.200)
[12:29:32] *** Quits: Uswald (~leandre@37.35.6.200) (Changing host)
[12:29:32] *** Joins: Uswald (~leandre@user/Uswald)
[12:31:03] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[12:31:42] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[12:32:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:35:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[12:47:29] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[12:47:57] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[12:51:08] *** Joins: xkuru (~xkuru@user/xkuru)
[12:52:26] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:53:54] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4d74:be9c:8758:8859)
[12:55:36] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:482f:4cea:4482:ea3a)
[13:03:30] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[13:05:06] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:06:08] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[13:06:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:08:50] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[13:09:19] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:09:34] *** Quits: savolla (~quassel@84.44.28.28) (Ping timeout: 260 seconds)
[13:15:38] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[13:16:55] *** Joins: andreasbuhr (~quassel@p549db796.dip0.t-ipconnect.de)
[13:18:47] *** Quits: arch_angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Quit: Leaving)
[13:19:09] *** Joins: savolla (~quassel@84.44.28.28)
[13:20:23] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[13:22:16] *** Joins: lockywolf_ (~lockywolf@public.lockywolf.net)
[13:23:23] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:23:24] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:24:06] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 245 seconds)
[13:24:09] *** Joins: jsbach_ (~jsbach@2a01:c22:35dd:4000:8ce2:86f8:3e06:da68)
[13:26:02] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:26:13] *** Quits: jsbach (~jsbach@2a01:c22:35dd:4000:2a8e:b1bb:9c1c:b6f2) (Ping timeout: 250 seconds)
[13:26:45] *** Joins: plastico (~plastico@neomutt/plastico)
[13:30:50] *** Joins: oakyy (~oaky@m90-129-219-19.cust.tele2.se)
[13:31:09] *** Quits: oakyy (~oaky@m90-129-219-19.cust.tele2.se) (Client Quit)
[13:31:37] *** Joins: oakyy (~oaky@m90-129-219-19.cust.tele2.se)
[13:32:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:36:47] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:37:23] *** Parts: Zweimer (~Zweimer@2a02:908:d20:26e0:482f:4cea:4482:ea3a) ()
[13:39:51] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[13:42:08] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:16] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:16] *** ChanServ sets mode: +v npaperbot
[13:44:13] *** Quits: rg (~r-g@163.172.90.106) (Read error: Connection reset by peer)
[13:46:55] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4d74:be9c:8758:8859) (Remote host closed the connection)
[13:47:20] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102)
[13:47:33] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[13:48:05] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[13:48:09] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[13:49:03] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:52:10] *** Joins: manx (xuew@p57b5c4bf.dip0.t-ipconnect.de)
[13:52:18] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[13:52:53] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:52:59] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[13:55:41] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[13:55:50] *** Joins: ko (~i.am@user/marlboro)
[13:55:59] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:59:09] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 250 seconds)
[14:05:35] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:07:23] *** Joins: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt)
[14:07:30] *** Joins: Markow (~Markow@176.122.215.103)
[14:09:22] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[14:13:30] *** Quits: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt) (Ping timeout: 260 seconds)
[14:21:26] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:22:39] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:22:42] *** Quits: joilerv (~joilerv@80.169.238.242) (Client Quit)
[14:24:54] *** Joins: Jaydayal (~Jaydayal@user/jaydayal)
[14:25:54] *** Quits: skeev (~skeev@92.86.110.192) (Quit: Leaving)
[14:25:57] *** Quits: Jaydayal (~Jaydayal@user/jaydayal) (Client Quit)
[14:32:05] *** Quits: foul_owl (~kerry@192.145.116.33) (Ping timeout: 256 seconds)
[14:32:44] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:33:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:34:26] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:35:09] *** Quits: oakyy (~oaky@m90-129-219-19.cust.tele2.se) (Ping timeout: 256 seconds)
[14:35:38] *** Quits: joilerv (~joilerv@80.169.238.242) (Client Quit)
[14:36:51] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:39:59] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:40:47] *** Joins: oakyy (~oaky@m90-129-219-19.cust.tele2.se)
[14:41:15] *** Quits: joilerv (~joilerv@80.169.238.242) (Client Quit)
[14:41:41] *** Joins: seninha (~seninha@user/seninha)
[14:42:32] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:43:10] *** Quits: joilerv (~joilerv@80.169.238.242) (Client Quit)
[14:45:38] *** Joins: cursey (~cursey@user/cursey)
[14:46:43] *** Joins: foul_owl (~kerry@23.82.194.143)
[14:49:36] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[14:50:39] *** Joins: slidercrank (~slidercra@user/slidercrank)
[14:55:08] *** Joins: Null_A (~null_a@2601:645:8700:2290:7c2a:bca9:fa46:3105)
[14:57:03] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:58:17] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc2-git-9f7fb8d-Pogorze-Karpackie-CUSTOM-KERNEL)
[15:03:04] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:04:55] *** Quits: Null_A (~null_a@2601:645:8700:2290:7c2a:bca9:fa46:3105) (Remote host closed the connection)
[15:17:13] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[15:17:27] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[15:17:56] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:21:40] *** Joins: pulse (~pulse@user/pulse)
[15:29:42] *** Quits: oakyy (~oaky@m90-129-219-19.cust.tele2.se) (Read error: Connection reset by peer)
[15:30:05] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[15:31:20] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[15:31:24] *** Joins: oakyy (~oaky@host-60.lidingo.se)
[15:32:06] *** Joins: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[15:32:17] *** Joins: CalamityToo (~CalamityB@2603-8000-d907-cec8-205e-a251-a079-a4d7.res6.spectrum.com)
[15:33:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:35:10] *** Quits: CalamityBlue (~CalamityB@2603-8000-d907-cec8-414b-3d39-bc9b-3dcb.res6.spectrum.com) (Ping timeout: 260 seconds)
[15:36:07] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[15:37:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:38:33] *** Joins: msfninja (~kali@user/msfninja)
[15:39:51] <msfninja> i'm trying to make analogical connections between c++ and javascript regarding arrays, but honestly i'm quite confused with all of c++'s syntax for vectors, "char* []" et cetera
[15:39:56] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:40:29] <msfninja> if i want to pass an array as an argument in a function that contains 1 variables that has just been defined, how can i do that. in javascript i would simply do `func([var]);`
[15:40:49] <PJBoy> javascript arrays are more like std::unordered_map
[15:41:08] <PJBoy> with key type std::string
[15:42:00] <ville> msfninja: you can't
[15:42:27] <PJBoy> sure you can
[15:42:39] *** Joins: evangeline (~Eleanor@178.79.105.181)
[15:42:52] <evangeline> Why can't I use static_cast here: https://godbolt.org/z/GTfvjqfMc
[15:42:57] *** Quits: callq (~callq@157.41.72.120) (Ping timeout: 240 seconds)
[15:43:06] <ville> msfninja: c++ arrays, as in the built-in ones, are rather basic. they've don't behave quite like other built-in types in lot of ways
[15:43:10] <evangeline> In this line: ::wstring sw(reinterpret_cast<PWCHAR>(s));
[15:43:43] <ville> evangeline: unrelated pointer types?
[15:43:46] <evangeline> Because unsigned short* is not relted to wchar_t?
[15:44:06] *** Quits: Linux77 (~LinuMage@186.233.179.225) (Read error: Connection reset by peer)
[15:44:33] <ville> msfninja: so if you are looking for nice usability, such as copying and assigning arrays you should be looking for something else besides the built-in arrays
[15:44:51] <evangeline> ville, does static_cast ever call a constructor of some type (during compilation)?
[15:45:13] <ville> sure
[15:46:07] <ville> but mind you "ever" is a heck of a qualifier
[15:46:55] <msfninja> ville: idk if this helps but this is the original context i was posing my question from: https://gist.github.com/msfninja/f0e4836c06ded8f4f3a46c13ec7eec97 (line 16)
[15:47:23] <evangeline> ville, if I modified "typedef wchar_t WCHAR;" into "typedef unsigned short WCHAR;" then I would have related pointer types and I could use static_cast right?
[15:47:37] <anyone> of course not.
[15:47:49] <ville> those wouldn't be pointer typs?
[15:47:54] <leduyquang753> msfninja Firstly `char *argv[] = {0}` does not mean what you think it is, and those two arguments are always passed anyway.
[15:48:06] <PJBoy> you're thinking of `main`
[15:48:14] <anyone> (fucking typedefs). first of all, don't assume wchar_t is equal to short (because here it's not)
[15:48:45] <leduyquang753> PJBoy Oh wow the arguments much more easily caught my attention LUL.
[15:48:57] <leduyquang753> Well the first point still remains.
[15:48:58] <msfninja> leduyquang753: well, those 2 arguments that are "from main()" are passed to the input() function in my case
[15:49:11] <anyone> second get rid of the typedefs and you'll see that you don't even need most of the casts to begin with
[15:49:17] <PJBoy> msfninja, I propose changing the function to `void input(std::vector<std::string> argv)`, any thoughts on that?
[15:49:19] <ville> msfninja: c++ does something funny when you stick something that looks like: "T xs[]" as a function parameter which kind of looks like array-of-T. it gets adjusted to be pointer-to-T
[15:49:23] <evangeline> anyone, this is what win32 is using
[15:49:30] <leduyquang753> msfninja `{0}` in a pointer context means null pointer.
[15:49:45] <anyone> evangeline: good for them. Still, L"" produces a wchar_t (line 11), so there is absolutely no fucking need to reinterpret_cast it to WCHAR again
[15:49:58] <ville> msfninja: even if the textual representation there suggest an array, the parameter really is not an array type
[15:50:09] <PJBoy> leduyquang753, me too, then I saw the `void` return type haha
[15:50:32] <leduyquang753> The closest thing you have to JavaScript's array is either `std::vector` or `std::deque`.
[15:50:53] <ville> http://www.eelis.net/c++draft/dcl.fct#5.sentence-3
[15:51:08] <anyone> apart perhaps from the unsigned parts.. which oh fuck Win32
[15:51:19] *** Joins: msk (~Thunderbi@89.205.124.40)
[15:51:25] <anyone> still, that's "just" signed-vs-unsigned
[15:51:28] *** Joins: Linux77 (~LinuMage@186.233.179.225)
[15:51:50] <PJBoy> where did signed unsigned come from?
[15:52:24] <ville> msfninja: so your void f(char* xs[]) gets adjusted by the compiler into: void f(char** xs)
[15:52:50] <msfninja> ville: hm
[15:52:55] <anyone> Win32 has "typedef unsigned short wchar_t;" and Win32 has "typedef unsigned short *RPC_WSTR". All fine.
[15:53:09] <anyone> Really, bool win32internalfunc(RPC_WSTR *s) { *s = const_cast<wchar_t *>(L"whatever"); } is enough
[15:53:56] <anyone> not even wstring is needed because wcout can just deal with wchar_t*
[15:54:28] <ville> msfninja: you see c++ arrays, the built-in ones, can't* be copied in like: x = y; you have to manually copy element at a time x[i] = y[i];
[15:54:33] <evangeline> anyone, sure I can use this: https://godbolt.org/z/593Tffx6e to get rid of reinterpret_cast like you said
[15:54:47] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[15:55:18] *** Quits: msk (~Thunderbi@89.205.124.40) (Quit: msk)
[15:55:19] <evangeline> anyone, ah your example is even better
[15:55:34] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:55:36] <ville> msfninja: so if the arrays can't be copied "automagically" then it also makes no sense to have them as by-value function parameter type. so they ended up with the "let's adjust it" idea
[15:55:39] <anyone> evangeline: more like https://godbolt.org/z/GPovrhKee
[15:55:40] *** Joins: msk (~Thunderbi@89.205.124.40)
[15:56:44] <evangeline> anyone, I get this compilation error in your example: <source>:9:10: error: incompatible pointer types assigning to 'RPC_WSTR' (aka 'unsigned short *') from 'wchar_t *'
[15:56:54] <anyone> evangeline: that's because godbolt isn't Win32
[15:56:56] <msfninja> ville: i see now
[15:57:01] <anyone> like I said.
[15:58:00] <evangeline> anyone, I get the same error on https://www.godbolt.ms/
[15:58:31] *** Quits: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Quit: Leaving)
[15:59:16] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[16:00:01] *** Joins: callq (~callq@2409:4062:2d8d:345f:158c:2117:eab6:8c14)
[16:03:17] <evangeline> anyone, in order to get a std::wstring (after a call to Win32InternalFunc) inside main, there is no way to avoid reinterpret_cast right: only because the types are not part of the same hierarchy tree?
[16:04:07] *** Joins: mgaunard (~mgaunard@host-92-7-151-63.as13285.net)
[16:05:58] <AliceMeows> evangeline: what are you trying to do?
[16:07:13] <evangeline> AliceMeows, I'm trying to replace reinterpret_cast with static_cast ... but it doesn't seem possible to do it here.
[16:07:37] <evangeline> It seems that static_casts only limits the compiler in what it can do.
[16:07:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[16:07:57] <anyone> turns out in mingw64-gcc,  typeid(wchar).name() produces "w" and typeid(RPC_WSTR) is "Pt" (i.e. short=t). That might explain why short is not the same as wchar, even though they're... the same in Win32 in terms of size and use.
[16:07:58] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:08:32] <anyone> gee win32 *is* stupid
[16:11:54] <anyone> https://www.godbolt.ms/z/F1vsBw
[16:11:58] <AliceMeows> evangeline: in some cases you can create a long sequence of static_cast(s) to avoid reinterpret_cast
[16:12:17] <AliceMeows> anyone: your link is broken
[16:13:38] <evangeline> AliceMeows, how can I do that, and is it recomended?
[16:14:13] <AliceMeows> I highly suspect that in some cases it might break something so reinterpret_cast is probably a better choice
[16:15:19] <anyone> https://wandbox.org/permlink/kbmzVPcb7QpfPFyV
[16:19:07] <evangeline> https://godbolt.org/z/19bPr6Wd7 how can I know which types are related without knowing (looking) at the entire codebase, it is possible with typeid: for example class A is represented as 1A and class B is 1B and those are related
[16:19:28] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:20:43] <anyone> depends on the relationship
[16:21:21] <evangeline> anyone, so without looking at the code I can't know, there is no way for the compiler to print "some ID" (like in the typeid case) that would give me this information?
[16:23:02] <AliceMeows> evangeline: https://godbolt.org/z/4ahW14WMz is that what you wanted?
[16:24:13] <evangeline> AliceMeows, I wanted static_cast on line 18, but I guess it's not possible
[16:24:23] <anyone> well there is std::is_same_v, std::is_base_of, etc
[16:25:13] <AliceMeows> evangeline: https://godbolt.org/z/E4fzc5zfr better now?
[16:25:23] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[16:26:23] <evangeline> AliceMeows, nice trick ... thank you, I didn't know this is possible
[16:26:38] <evangeline> Not sure if this is preferred over reinterpret_cast, like you said
[16:28:01] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[16:28:22] <evangeline> AliceMeows, basically void* is related to any other pointer type
[16:28:23] <evangeline> ?
[16:28:27] *** Joins: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[16:28:36] <evangeline> It is a pointer to anything, so this makes sense
[16:28:42] <AliceMeows> Yes
[16:28:50] <AliceMeows> Its typeless pointer
[16:30:33] <evangeline> Thank you AliceMeows anyone
[16:31:18] <AliceMeows> Np :)
[16:33:33] <anyone> nah, static_cast<some_T *>(static_cast<void *>(some_S)) is a particularly bad way of saying reinterpret_cast<some_T *>(some_S).
[16:33:34] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:34:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:35:21] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[16:37:26] <anyone> I would make the case that, conversion to void* usually only happens because one has to satisfy some API and that there is an implicit "promise" by you to only ever convert void*<->some_S*.
[16:37:42] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[16:37:53] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:37:55] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:38:13] *** Quits: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Ping timeout: 240 seconds)
[16:38:27] <AliceMeows> Another option would be to wrap the type and provide operator T()
[16:38:45] <msfninja> i hope i got it right... but this works
[16:38:47] <msfninja> https://gist.github.com/msfninja/f0e4836c06ded8f4f3a46c13ec7eec97
[16:39:08] <AliceMeows> No need in argc
[16:39:24] <AliceMeows> vector already has internal length which you could check by calling size()
[16:39:35] <msfninja> indeed
[16:40:37] <AliceMeows> I'd drop that at() call since the size is checked so its safe to use [] instead
[16:40:53] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:40:54] <msfninja> i used a tutorial where .at() was used
[16:41:04] *** Joins: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[16:41:15] <AliceMeows> Whoever wrote it must suffer from safetism
[16:41:22] <msfninja> i should probably refer to the documentation first
[16:42:08] <anyone> AliceMeows: whoever wrote it must be suffering some C(++)-phobia
[16:45:18] <msfninja> if i want to pass a vector as an argument, do i just pass `{item}` or do i need to specify something else
[16:45:42] <AliceMeows> Just {item} would do
[16:45:50] <msfninja> i can't figure out why i'm getting a segmentation fault
[16:46:10] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[16:46:29] <AliceMeows> Write testcase
[16:46:51] <leduyquang753> msfninja In contexts where it's known for sure to be `std::vector` you can write an `{}` initalizer list in place.
[16:47:26] <leduyquang753> Otherwise you need to write a proper constructor call like `std::vector{}`.
[16:47:40] <leduyquang753> (With the template argument.)
[16:47:51] <msfninja> leduyquang753: i see
[16:47:58] <msfninja> AliceMeows: already figure it out
[16:50:51] *** Joins: proller (~p@2a02:6b8:0:40c:5c0b:5f0f:95f3:a200)
[16:51:03] <mgaunard> in general I find that a lot of people are allergic to narrow contracts
[16:51:39] <mgaunard> I'm hoping that once we get contracts in the language people will start to learn how to use contracts more systematically
[16:53:29] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[16:56:12] *** Joins: Null_A (~null_a@2601:645:8700:2290:7c2a:bca9:fa46:3105)
[16:56:15] <AliceMeows> I don't see what makes them so special
[16:59:36] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[17:01:08] *** Quits: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[17:08:23] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (tantalum.libera.chat (Nickname regained by services)))
[17:08:26] *** Joins: PJBoy (~PJBoy@user/pjboy)
[17:08:48] *** Joins: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com)
[17:11:53] *** Quits: Null_A (~null_a@2601:645:8700:2290:7c2a:bca9:fa46:3105) (Remote host closed the connection)
[17:18:12] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:18:45] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[17:19:45] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[17:19:59] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[17:21:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[17:21:31] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[17:21:47] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:25:53] *** Joins: skeev (~skeev@92.86.110.192)
[17:26:30] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[17:30:25] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[17:31:43] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[17:31:45] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Read error: Connection reset by peer)
[17:31:58] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:32:51] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[17:32:52] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:33:11] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[17:34:24] *** Joins: Rynn_ (~rynn@216.30.158.198)
[17:34:50] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[17:34:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:38:31] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:38:37] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:39:56] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:40:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[17:40:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:55] *** ChanServ sets mode: +v npaperbot
[17:41:19] *** Quits: Rynn_ (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:42:08] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:17] *** ChanServ sets mode: +v npaperbot
[17:43:21] *** Quits: Chaser (~Chaser@user/chaser) (Quit: WeeChat 2.8)
[17:45:14] *** Joins: N4buc0- (~N4buc0@189.26.23.153.dynamic.adsl.gvt.net.br)
[17:45:21] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:45:55] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d091:25a9:e1c5:1d46)
[17:45:55] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d091:25a9:e1c5:1d46) (Changing host)
[17:45:55] *** Joins: skapata (~Skapata@user/skapata)
[17:46:13] *** Joins: jokoon (~eio@2a01:e0a:542:e160:f8f0:2d11:8195:8750)
[17:46:27] *** Quits: N4buc0 (~N4buc0@189.58.131.84) (Ping timeout: 250 seconds)
[17:48:35] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:fff2:86e5:3ec1:2264:dc1)
[17:49:51] *** Quits: N4buc0- (~N4buc0@189.26.23.153.dynamic.adsl.gvt.net.br) (Ping timeout: 256 seconds)
[17:54:35] *** Joins: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[17:55:03] *** Quits: manx (xuew@p57b5c4bf.dip0.t-ipconnect.de) (Quit: manx)
[17:57:17] *** Joins: manx (xuew@p200300e18f0e0800022215fffe03cf97.dip0.t-ipconnect.de)
[18:02:38] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[18:02:56] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[18:03:25] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:05:41] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[18:06:50] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[18:10:46] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[18:11:06] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[18:13:32] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:16:08] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:23:02] *** gentooclimax is now known as climax
[18:26:41] *** climax is now known as gentooclimax
[18:30:11] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[18:30:46] *** Quits: savolla (~quassel@84.44.28.28) (Ping timeout: 245 seconds)
[18:30:53] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:31:13] *** Quits: constxd (~brad@142.167.170.88) (Ping timeout: 256 seconds)
[18:33:02] <Alipha> evangeline: do NOT static_cast through void* just to avoid reinterpret_cast. The whole point of reinterpret_cast is to document that you're doing a cast to unrelated types. So hiding the fact you're doing that by using tricky static_casts simply make your code harder to read. (cc: AliceMeows)
[18:35:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:36:01] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[18:37:12] *** Quits: Uswald (~leandre@user/Uswald) (Quit: WeeChat 2.8)
[18:39:09] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:45:23] *** Quits: oakyy (~oaky@host-60.lidingo.se) (Ping timeout: 256 seconds)
[18:49:19] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:51:37] <PJBoy> yeah I agree with that
[18:53:25] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:54:13] *** Quits: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Ping timeout: 256 seconds)
[18:57:31] *** Quits: beagles (~beagles@142.162.188.116) (Quit: WeeChat 3.3)
[18:57:56] *** Joins: beagles (~beagles@142.162.188.116)
[19:04:54] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[19:05:27] *** Quits: limubs (~limubs@cgn-89-0-49-98.nc.de) (Ping timeout: 256 seconds)
[19:05:52] <AliceMeows> I do know that, but this what they wanted so I've provided that reinterpret_cast free casting
[19:08:16] *** Joins: netpipe (~netpipe@user/netpipe)
[19:10:38] <Alipha> (T*)
[19:10:40] <Alipha> :-)
[19:11:10] <netpipe> anyone interested in making 50 CAD ? https://github.com/netpipe/Luna/blob/master/makefile i would like this to work, it only needs one library Irrlicht for -DMINIMAL compile   the cbp files compile easily already
[19:11:37] <netpipe> i just jammed all the file names and objects in there
[19:16:21] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[19:17:33] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[19:17:39] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 250 seconds)
[19:18:29] *** Joins: savolla (~quassel@88.227.92.215)
[19:18:59] *** Quits: ko (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[19:20:43] *** Quits: myon98 (~myon98@user/myon98) (Quit: Bouncer maintainance...)
[19:20:50] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[19:25:55] *** Joins: oakyy (~oaky@h-155-4-161-203.A518.priv.bahnhof.se)
[19:27:54] *** Joins: grafikrobot (~grafikrob@208.59.79.14)
[19:30:59] *** Joins: constxd (~brad@142.167.170.88)
[19:32:49] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[19:32:59] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[19:34:13] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac)
[19:34:48] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 250 seconds)
[19:35:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:37:04] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:540b:bd79:8d25:836)
[19:39:19] *** Joins: retux (~user@dyndsl-188-118-188-235.ewe-ip-backbone.de)
[19:39:30] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[19:39:33] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[19:40:00] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:40:25] <AliceMeows> Is there any reliable way to get the type of a member function that is overloaded?
[19:40:56] <retux> Is it necessary to implement the move contructor and move assignment operator such that it leaves the object from which the data is moved in some sort of valid state?
[19:41:18] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[19:42:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:42:26] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:43:03] <anyone> AliceMeows: "which one"
[19:43:32] <AliceMeows> Sorry?
[19:43:36] <anyone> retux: just valid enough so it can be destructed
[19:43:59] <anyone> AliceMeows: if you overload X::f to e.g. X::f(int) and X::f(void*), which one do you want the type of
[19:44:25] <AliceMeows> X::f(int) then
[19:44:54] <anyone> AliceMeows: if you know you want specifically X::f(int), you already know the type, I'd argue
[19:46:10] <AliceMeows> Its a little bit more complicated than that, I need it for some function traits I use so I could extract argument types so I don't really know the type and the problem is that casting to the type I want isn't reliable enough
[19:46:56] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[19:47:09] <Alipha> AliceMeows: you're kinda stuck. in order to select the overload you want, you have to know the type of the overload
[19:47:12] <retux> anyone: Thanks
[19:47:28] <Alipha> catch 22!
[19:48:29] <anyone> retux: and-or reinitialized
[19:48:33] *** Joins: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke)
[19:49:05] <Alipha> auto mp = static_cast<void (X::*)(int)>(&X::f);  // gets you a pointer to X::f.
[19:49:10] <anyone> e.g. { std::string a; auto b = std::move(a); a = std::move(std::string("anotherone")); }
[19:50:04] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:50:25] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[19:50:31] <AliceMeows> https://godbolt.org/z/M6cvjMovr I suppose this will have to do but I'm open for suggestions
[19:50:41] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[19:51:39] *** Joins: Telvana (~capo@user/telvana)
[19:53:39] <Alipha> that seems weird that it doesn't compile
[19:54:35] <Alipha> oh, float vs double
[19:54:52] <AliceMeows> It was intentional
[19:55:23] <anyone> that's the incantation from https://stackoverflow.com/questions/40135561/ , innit
[19:57:42] <anyone> still, you need to know the types (you chose "float") beforehand, at which point you could just  cast<void (X::*)(float)>(&X::f) as mentioned above
[19:58:38] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[19:58:53] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:00:17] <AliceMeows> That is perfectly fine, I just had some strange error about ambiguity so it probably was a typo or something
[20:01:26] <Alipha> AliceMeows: what's your actual problem? can you just completely avoid knowing the type of the member function by using lambdas instead? e.g., if you want to call S::func with an S* and a float, then you'd just use `[](S *s, float f) { return s->func(f); }`
[20:01:32] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:fff2:86e5:3ec1:2264:dc1) (Remote host closed the connection)
[20:01:54] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:fff2:86e5:3ec1:2264:dc1)
[20:04:14] <AliceMeows> I just needed to make sure a type has a member function with specific signature, I could've used concepts but I want C++17 compatibility for now so I'm using templates to implement it
[20:05:27] <Alipha> does it need a _specific signature_, or does it just need to be callable with the specified types? (e.g., calling a function that accepts a double with a float is fine)
[20:05:47] <AliceMeows> It has to be specific
[20:08:36] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:540b:bd79:8d25:836) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:08:43] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:09:37] *** Quits: linext (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[20:11:31] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[20:13:07] *** Joins: Uswald (~leandre@2a01cb040075f90081b4f6c36d1b3763.ipv6.abo.wanadoo.fr)
[20:13:07] *** Quits: Uswald (~leandre@2a01cb040075f90081b4f6c36d1b3763.ipv6.abo.wanadoo.fr) (Changing host)
[20:13:07] *** Joins: Uswald (~leandre@user/Uswald)
[20:20:53] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[20:20:55] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[20:24:08] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:26:29] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 256 seconds)
[20:26:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[20:27:23] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:28:56] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[20:32:54] *** Joins: rgrinberg (~textual@187.223.115.137)
[20:34:39] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:bc81:ba25:7a70:67f2)
[20:36:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:37:04] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:37:54] <AliceMeows> https://godbolt.org/z/E9Ed3n6Ed is there any better way to write this other than concepts?
[20:39:13] <mgaunard> AliceMeows: some people are not comfortable with the idea of narrow contracts at all, they think it's unsafe and that all code should have a wide contracts instead. These sort of things is actually big enough of an opinion even in the C++ standards committee that there are large sections in some papers to convince people otherwise.
[20:40:11] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:40:46] <AliceMeows> What do I suggest that I'll do? its meant to be pretty narrow
[20:41:17] <cbreak> AliceMeows: you can just call the function
[20:41:25] <cbreak> if someone passes something wrong, it'll give a compiler error
[20:41:28] <AliceMeows> And let it error?
[20:41:31] <cbreak> sure.
[20:41:45] *** Joins: neure (~tksuoran@dzpbp58tyyyyyyyyyyyyt-3.rev.dnainternet.fi)
[20:41:49] <cbreak> you can document somewhere that you want a "foo-callable type"
[20:42:05] <cbreak> and if you're feeling generous, document what that means too
[20:43:12] <cbreak> if you want to write your own enable_if thing, you could use https://en.cppreference.com/w/cpp/types/result_of to help with that
[20:44:01] <AliceMeows> In my case I only need to make sure get() returns something
[20:44:11] <cbreak> yes.
[20:44:15] <cbreak> that's what this does
[20:44:22] <cbreak> it also gives you that something, but you can ignore it.
[20:44:34] <cbreak> if it gives you something (= it doesn't fail), then it's callable
[20:44:38] <cbreak> otherwise it's not callable
[20:45:00] <cbreak> you can then for example use old-school enable_if to only make your function overload work for those types where it doesn't fail
[20:45:32] <cbreak> or... just let it compile-error :D
[20:48:25] <AliceMeows> I suppose 20 pages of errors isn't too bad after all lol
[20:48:55] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[20:48:57] *** Quits: netpipe (~netpipe@user/netpipe) (Quit: Client closed)
[20:50:13] <AliceMeows> I initially wanted to add a bunch of static_assert but I guess not
[20:54:06] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[20:56:10] *** Quits: cosimone (~user@93-47-231-87.ip115.fastwebnet.it) (Remote host closed the connection)
[21:00:15] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[21:02:44] *** Joins: cosimone (~user@93-47-231-87.ip115.fastwebnet.it)
[21:08:44] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[21:09:08] *** Quits: MajorBiscuit (~MajorBisc@c-001-017-058.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:10:28] *** Joins: tforever (~Terabyte@78.174.124.72)
[21:14:03] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[21:24:14] *** Joins: dgdg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[21:25:45] *** Quits: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Ping timeout: 256 seconds)
[21:28:19] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[21:29:09] *** Quits: dgdg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Ping timeout: 256 seconds)
[21:29:19] *** Quits: skeev (~skeev@92.86.110.192) (Remote host closed the connection)
[21:31:01] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: Textual IRC Client: www.textualapp.com)
[21:35:52] *** Quits: tforever (~Terabyte@78.174.124.72) (Quit: Segmentation fault (core dumped))
[21:35:57] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:36:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:38:13] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 240 seconds)
[21:39:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:40:28] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[21:42:09] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:17] *** ChanServ sets mode: +v npaperbot
[21:47:21] *** Joins: fldme (~fldme@178.49.152.151)
[21:51:03] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[21:51:55] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:6114:c56c:8a91:41ae)
[21:51:55] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:6114:c56c:8a91:41ae) (Changing host)
[21:51:55] *** Joins: skapata (~Skapata@user/skapata)
[21:55:57] *** Joins: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[21:59:37] *** Joins: blei (~blei@209.201.38.106)
[22:00:21] <blei> is there an idiom for a pointer that waits to return until the value is not null?
[22:00:25] *** Joins: Uswald (~leandre@2a01cb040075f90081b4f6c36d1b3763.ipv6.abo.wanadoo.fr)
[22:00:25] *** Quits: Uswald (~leandre@2a01cb040075f90081b4f6c36d1b3763.ipv6.abo.wanadoo.fr) (Changing host)
[22:00:25] *** Joins: Uswald (~leandre@user/Uswald)
[22:01:47] *** Quits: proller (~p@2a02:6b8:0:40c:5c0b:5f0f:95f3:a200) (Ping timeout: 256 seconds)
[22:02:15] *** Joins: Chaser (~Chaser@user/chaser)
[22:02:48] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:02:57] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 240 seconds)
[22:04:58] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[22:05:11] *** Quits: neure (~tksuoran@dzpbp58tyyyyyyyyyyyyt-3.rev.dnainternet.fi) (Quit: Leaving)
[22:09:32] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 252 seconds)
[22:09:45] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:11:03] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[22:11:44] *** Quits: cosimone (~user@93-47-231-87.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[22:12:44] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[22:18:10] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[22:19:12] <Hello71> wat
[22:21:26] <ville> waits to return sounds like there's some sort of concurrency going on?
[22:21:51] <AliceMeows> Sound like std::future to me
[22:22:03] *** Quits: rgrinberg (~textual@187.223.115.137) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:25:37] <Alipha> blei: are you talking about threading?
[22:25:58] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 250 seconds)
[22:26:02] <blei> yes
[22:26:25] <blei> thinking about avoiding spinlocking by, essentially, deferring computation until the result is available
[22:26:57] <AliceMeows> std::future is your friend
[22:27:57] <blei> thanks
[22:27:59] <Alipha> https://en.cppreference.com/w/cpp/thread/future
[22:29:21] <Alipha> so you can begin the computation in another thread, then when you actually need the result, use std::future::get which will wait until the result is available if it's not already available
[22:29:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:30:50] <AliceMeows> inout_ptr_t is absolute hazard when combined with the latest unique_resource proposal
[22:32:23] <AliceMeows> It better not go into the standard
[22:32:54] *** Joins: skapata (~Skapata@user/skapata)
[22:33:47] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[22:33:59] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[22:35:43] *** Joins: jokoon2 (~eio@2a01:e0a:542:e160:b5ef:78c0:d3be:544c)
[22:37:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:37:42] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[22:37:49] *** Quits: jokoon (~eio@2a01:e0a:542:e160:f8f0:2d11:8195:8750) (Ping timeout: 240 seconds)
[22:38:09] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[22:38:34] *** Joins: peacefulman (~paul@141.217.247.9)
[22:40:19] *** Quits: peacefulman (~paul@141.217.247.9) (Client Quit)
[22:40:53] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[22:41:27] *** Quits: BurritoBob (~paul@107-190-110-80.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[22:41:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[22:41:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:43:26] *** Joins: rg (~r-g@163.172.90.106)
[22:44:28] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[22:45:38] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:51:11] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[22:52:48] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:55:36] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:57:09] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:57:19] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Ping timeout: 256 seconds)
[22:57:24] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:58:07] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[22:58:57] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:02:36] *** Quits: andreasbuhr (~quassel@p549db796.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:03:57] *** Joins: mrec (~markus@sundtek.de)
[23:04:14] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:05:11] *** Joins: Flecks (~fleck@user/fleck)
[23:06:46] *** Quits: blei (~blei@209.201.38.106) (Quit: Client closed)
[23:07:52] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:fff2:86e5:3ec1:2264:dc1) (*.net *.split)
[23:07:52] *** Quits: AssKoala (~asskoala@user/asskoala) (*.net *.split)
[23:07:52] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (*.net *.split)
[23:07:52] *** Quits: blueminder_ (sid143388@id-143388.tinside.irccloud.com) (*.net *.split)
[23:07:52] *** Quits: Fleck (~fleck@user/fleck) (*.net *.split)
[23:07:52] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (*.net *.split)
[23:07:52] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[23:07:52] *** Quits: traxex (traxex@user/traxex) (*.net *.split)
[23:07:52] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[23:07:52] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[23:07:52] *** Quits: mrec_ (~markus@user/mrec) (*.net *.split)
[23:07:52] *** Quits: imMute (~immute@user/immute) (*.net *.split)
[23:07:52] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[23:07:52] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[23:07:52] *** Quits: ws2k3 (znc@vps.freegamehosting.eu) (*.net *.split)
[23:07:53] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[23:07:53] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (*.net *.split)
[23:07:53] *** Quits: shenghi (~shenghi@chrysocolla.mutablevoid.org) (*.net *.split)
[23:07:57] *** Joins: traxex_ (traxex@sdf.org)
[23:09:56] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[23:12:25] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:fff2:86e5:3ec1:2264:dc1)
[23:12:25] *** Joins: AssKoala (~asskoala@user/asskoala)
[23:12:25] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[23:12:25] *** Joins: blueminder_ (sid143388@id-143388.tinside.irccloud.com)
[23:12:25] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[23:12:25] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[23:12:25] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[23:12:25] *** Joins: imMute (~immute@user/immute)
[23:12:25] *** Joins: xisop (~xisop@bnull.net)
[23:12:25] *** Joins: urdh (~urdh@user/urdh)
[23:12:25] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[23:12:25] *** Joins: computerquip (sid423484@user/computerquip)
[23:12:25] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[23:12:25] *** Joins: shenghi (~shenghi@chrysocolla.mutablevoid.org)
[23:13:11] *** Emet-Selch is now known as Azem
[23:16:12] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: writeback[m] (~writeback@2001:470:69fc:105::1:6118) (Ping timeout: 245 seconds)
[23:16:13] *** Quits: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc) (Ping timeout: 240 seconds)
[23:16:26] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Ping timeout: 250 seconds)
[23:16:26] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Ping timeout: 250 seconds)
[23:16:32] *** Quits: equinox[m] (~momoshiki@2001:470:69fc:105::fe92) (Ping timeout: 240 seconds)
[23:16:36] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Ping timeout: 256 seconds)
[23:16:36] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Ping timeout: 256 seconds)
[23:16:38] *** Quits: nlatp[m] (~nlatpmatr@2001:470:69fc:105::1:4d1f) (Ping timeout: 252 seconds)
[23:16:38] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Ping timeout: 252 seconds)
[23:16:39] *** Quits: wielding (~wielding@user/wielding) (Ping timeout: 250 seconds)
[23:16:39] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (Ping timeout: 250 seconds)
[23:16:42] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Ping timeout: 260 seconds)
[23:21:02] *** Quits: tenbitcomb[m] (~tenbitcom@2001:470:69fc:105::1:a8da) (Ping timeout: 252 seconds)
[23:21:07] *** Quits: treeshateorcs[m] (~treeshate@2001:470:69fc:105::1:41c4) (Ping timeout: 256 seconds)
[23:21:10] *** traxex_ is now known as traxex
[23:21:14] *** Quits: traxex (traxex@sdf.org) (Changing host)
[23:21:14] *** Joins: traxex (traxex@user/traxex)
[23:22:06] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:22:33] *** Quits: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) (Quit: macbook)
[23:24:31] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[23:24:34] *** Joins: Atque (~Atque@user/atque)
[23:26:30] <senoraraton> I have a function that returns a struct:  winInfo{SDL_Window* win, SDL_Renderer* rend}.  In my return statement I have 'return (new winInfo{win,renderer});'  It compiles, but when I run it, the renderer value is not getting passed out of the function.  win is though.  Why?
[23:27:09] <mgaunard> well apart from the bad idea of using new it looks correct
[23:27:33] <mgaunard> also that's a pretty terrible naming convention
[23:27:48] <senoraraton> I honestly don't want to instantiate the object, I just need it as a container to pass the two data values out of the function.
[23:28:04] <AliceMeows> Use std::pair/std::tuple
[23:28:21] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[23:28:22] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[23:28:36] <senoraraton> I tried std::pair but then in my main code base I end up with winInfo.1 && winInfo.2 which looks terrible.  The struct allows me to name the variable types, and is much easier to parse.
[23:28:37] <ville> senoraraton: rend vs renderer?
[23:28:45] <senoraraton> ville typo, its consitent in the codebase
[23:28:47] *** Quits: retux (~user@dyndsl-188-118-188-235.ewe-ip-backbone.de) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[23:28:49] <ville> never use std::pair/std::tuple
[23:29:02] <AliceMeows> What's wrong with those?
[23:29:14] <ville> the future you, or anyone else reading the code, will hate you for it
[23:29:39] <senoraraton> Because they aren't explicit enough, and I end up reffering to 1 and 2 in my code a lot(This is the main window/renderer) and who knows what winInfo.2 is?  winInfo->renderer is much clearer.
[23:29:52] *** Joins: magla (~gelignite@d5366c9a.access.ecotel.net)
[23:30:19] <AliceMeows> Then in this case pair/tuple are the wrong choice
[23:30:31] <mgaunard> you realize you can just write return winInfo{win, renderer}; right
[23:31:05] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:31:19] <ville> the greatest examples are some research/scientific code bases where you might see "systems" returned as tuples. "yeah the float at index 4 is lift coefficient"
[23:33:56] <mgaunard> there are libraries that allow you to assign labels to dimensions
[23:34:38] <senoraraton> Lets bring in more dependencies to fix our poorly designed code, that will work out WONDERFUL.
[23:34:45] *** Joins: proller (~p@80.240.216.69)
[23:35:05] <mgaunard> well people who are using tuple do it because of the genericity it enables
[23:35:19] <mgaunard> you can iterate over the member of a tuple, transform tuples, etc.
[23:35:49] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[23:35:57] <ville> mgaunard: if only. they are using it because the paper they wrote of course just has system of matrices and vectors with no names on the elements. so the code must look like it as well
[23:37:26] <ville> mgaunard: and yes you can do all that to tuples, but no one on earth wants to read code like that.
[23:37:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:38:21] <senoraraton> That did not fix my problem, it still only returns the first element of winInfo
[23:38:46] <ville> !give senoraraton testcase
[23:38:47] <nolyc> senoraraton: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[23:39:57] *** Joins: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[23:41:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:42:49] *** macbook is now known as toadtoad
[23:43:40] *** Quits: toadtoad (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) (Client Quit)
[23:43:46] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[23:43:57] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[23:44:14] *** Joins: Uswald (~leandre@2a01cb040075f90081b4f6c36d1b3763.ipv6.abo.wanadoo.fr)
[23:44:14] *** Quits: Uswald (~leandre@2a01cb040075f90081b4f6c36d1b3763.ipv6.abo.wanadoo.fr) (Changing host)
[23:44:14] *** Joins: Uswald (~leandre@user/Uswald)
[23:45:09] <senoraraton> Let me see if I can replicate it, this feels like bug behavior though
[23:46:04] <senoraraton> Also its not going to compile because wandbox doesn't have the SDL libraries
[23:46:56] <Alipha> senoraraton: your problem has nothing to do with SDL. so, your testcase can just define `struct SDL_Window {};` and such
[23:47:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:6473:b18:2fbd:1123)
[23:47:23] <Alipha> how do you know "the renderer value is not getting passed out of the function"?
[23:47:40] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[23:50:29] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[23:50:58] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[23:51:36] <senoraraton> I have test cases. I test the values are properly assigned before the return, and immediately after the return.
[23:52:57] *** Joins: ivii (~ivan@user/ivii)
[23:54:41] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[23:55:45] <Alipha> if you pastebin the relevant code, you *may* get an answer if the problem is obvious enough. however, you very well may get slapped with another "!give senoraraton testcase"
[23:56:05] *** Joins: mintograde (~mintograd@47.201.5.61)
[23:56:14] <Alipha> i probably shouldn't promote laziness though on your part
[23:56:42] *** Joins: proller (~p@2a02:6b8:b081:a414::1:36)
[23:58:37] *** Quits: minto (~mintograd@47.201.5.61) (Ping timeout: 240 seconds)
[23:59:12] <senoraraton> https://wandbox.org/permlink/4gK25KfRJU7hO57p
[23:59:17] <senoraraton> My test case works, my code does not.
[23:59:29] <mgaunard> that means it's not a testcase
[23:59:45] <senoraraton> If I knew why, I wouldn't have to write a testcase.
[23:59:57] <RandomReader> that's .. full of UB
[23:59:59] *** Joins: nlatp[m] (~nlatpmatr@2001:470:69fc:105::1:4d1f)
