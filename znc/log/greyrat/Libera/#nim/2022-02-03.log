[00:00:22] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[00:03:38] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:04:54] <FromDiscord> <oldteen> Hello, what tool do you use to edit your code and is there a recommended server language?
[00:05:17] <FromDiscord> <kaddkaka> In reply to @oldteen "Hello, what tool do": I use Neovim with pylsp language server
[00:05:36] <FromDiscord> <kaddkaka> In reply to @oldteen "Hello, what tool do": Or what do you mean by "server language"?
[00:09:41] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 250 seconds)
[00:10:53] *** Joins: cyraxjoe (~joe@189.158.2.104)
[00:12:52] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:16:32] <FromDiscord> <tandy> i see, thank youâ†µ(@mratsim)
[00:16:32] <PMunch> Maybe they meant library?
[00:16:56] <PMunch> Anyways, I use Vim to edit Nim, but I think most people use VSCode
[00:17:22] <FromDiscord> <Josef> sent a code paste, see https://paste.rs/U6S
[00:18:36] <PMunch> Ah, try changing those variables around
[00:18:48] <PMunch> deepCopy is (to, from)
[00:19:25] <FromDiscord> <Josef> Is `v2.deepCopy v1` not "copy v1 into v2"?
[00:19:36] <PMunch> Oh wait, yeah you're right
[00:19:51] <PMunch> Hmm, that's strange
[00:27:37] <PMunch> Very strange indeed
[00:30:41] <PMunch> That's definitely a bug, but why are you trying to use deepCopy anyways?
[00:30:49] <PMunch> You can just `var v2 = v1`
[00:41:32] *** Quits: oz (~oz@crystal/user/oz) (*.net *.split)
[00:41:33] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (*.net *.split)
[00:41:33] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (*.net *.split)
[00:41:33] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (*.net *.split)
[00:41:33] *** Quits: mahlon (~mahlon@martini.nu) (*.net *.split)
[00:41:33] *** Quits: syl (~z@user/syl) (*.net *.split)
[00:41:34] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[00:41:34] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[00:41:34] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (*.net *.split)
[00:41:34] *** Quits: tinystoat (~squeek@user/tinystoat) (*.net *.split)
[00:41:34] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[00:41:34] *** Quits: rp1 (~rp@cpc77299-basf12-2-0-cust609.12-3.cable.virginm.net) (*.net *.split)
[00:41:35] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[00:41:35] *** Quits: oprypin (~irc@pryp.in) (*.net *.split)
[00:41:35] *** Quits: notchris (sid181145@id-181145.hampstead.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: NimEventer (~NimBot@78.47.140.224) (*.net *.split)
[00:41:35] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[00:41:35] *** Quits: lain (~lain@172.16.254.xxx) (*.net *.split)
[00:41:35] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (*.net *.split)
[00:41:36] *** Quits: toothlessgear (2c15493d69@user/toothlessgear) (*.net *.split)
[00:41:36] *** Quits: ormiret (sid314108@id-314108.lymington.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[00:41:36] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[00:41:36] *** Quits: ssiyad (~ssiyad@user/ssiyad) (*.net *.split)
[00:41:37] *** Quits: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733) (*.net *.split)
[00:41:37] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (*.net *.split)
[00:41:37] *** Quits: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com) (*.net *.split)
[00:41:37] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (*.net *.split)
[00:41:37] *** Quits: haakon (~haakonn@82.196.8.209) (*.net *.split)
[00:41:37] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[00:41:37] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (*.net *.split)
[00:41:37] *** Quits: cyraxjoe (~joe@189.158.2.104) (*.net *.split)
[00:41:37] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (*.net *.split)
[00:41:37] *** Quits: fowl (~fowlmouth@user/fowl) (*.net *.split)
[00:41:37] *** Quits: arkurious (~arkurious@user/arkurious) (*.net *.split)
[00:41:37] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (*.net *.split)
[00:41:37] *** Quits: xiamx (~xiamx@2001:470:69fc:105::1:5692) (*.net *.split)
[00:41:38] *** Quits: crem1 (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (*.net *.split)
[00:41:38] *** Quits: GnuYawk (~GnuYawk@user/gnuyawk) (*.net *.split)
[00:41:39] *** Quits: l1x (uid1954@id-1954.tinside.irccloud.com) (*.net *.split)
[00:41:39] *** Quits: Yardanico_ (~quassel@2a01:4f8:c2c:df22::2) (*.net *.split)
[00:41:40] *** Quits: robertmeta (sid514@user/robertmeta) (*.net *.split)
[00:41:40] *** Quits: rockcavera (~rc@user/rockcavera) (*.net *.split)
[00:41:40] *** Quits: vicfred (~vicfred@user/vicfred) (*.net *.split)
[00:41:40] *** Quits: m5zs7k (aquares@web10.mydevil.net) (*.net *.split)
[00:41:40] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[00:41:40] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (*.net *.split)
[00:41:40] *** Quits: jkl (~jkl@user/jkl) (*.net *.split)
[00:41:41] *** Quits: PMunch (~PMunch@user/pmunch) (*.net *.split)
[00:41:41] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (*.net *.split)
[00:41:41] *** Quits: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com) (*.net *.split)
[00:41:41] *** Quits: ehmry (~quassel@2a03:3b40:fe:ab::1) (*.net *.split)
[00:41:41] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[00:41:42] *** Quits: averell (~averell@user/averell) (*.net *.split)
[00:41:42] *** Quits: meowray (MaskRay@user/meowray) (*.net *.split)
[00:41:42] *** Quits: NimBot (~NimBot@mail.nim-lang.org) (*.net *.split)
[00:41:42] *** Quits: dom96 (~dom@mail.nim-lang.org) (*.net *.split)
[00:41:42] *** Quits: adium (adium@user/adium) (*.net *.split)
[00:41:42] *** Quits: cheer[m] (~cheertchn@2001:470:69fc:105::39de) (*.net *.split)
[00:41:43] *** Quits: ecs (~ecs@user/ecs) (*.net *.split)
[00:41:43] *** Quits: xet7 (~xet7@user/xet7) (*.net *.split)
[00:41:43] *** Quits: tk (~tk@ircpuzzles/staff/tk) (*.net *.split)
[00:41:43] *** Quits: szahid (~szahid@user/szahid) (*.net *.split)
[00:41:43] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[00:41:43] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[00:41:44] *** Quits: Amun-Ra (~amun-ra@retro.rocks) (*.net *.split)
[00:41:44] *** Quits: Zevv (~Zevvvvv@185.238.131.12) (*.net *.split)
[00:41:44] *** Quits: gshumway (~gshumway@user/gshumway) (*.net *.split)
[00:41:44] *** Quits: madprops (hj8oijo@user/madprops) (*.net *.split)
[00:41:44] *** Quits: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca) (*.net *.split)
[00:41:45] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[00:41:45] *** Quits: termer (termer@2600:3c02::f03c:91ff:fe1c:eca1) (*.net *.split)
[00:41:45] *** Quits: euantorano (sid180289@id-180289.helmsley.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: oisota (~oisota@user/oisota) (*.net *.split)
[00:41:45] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[00:41:45] *** Quits: Nuc1eoN (~Nuc1eoN@odin.csportal.net) (*.net *.split)
[00:41:46] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[00:41:46] *** Quits: om3ga (~oz@46.49.41.80) (*.net *.split)
[00:44:11] *** Joins: flynn (~mcbloch@user/flynn)
[00:44:11] *** Joins: tinystoat (~squeek@user/tinystoat)
[00:44:11] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[00:44:11] *** Joins: [R] (~rs@genoce.org)
[00:44:11] *** Joins: drewr (~drew@user/drewr)
[00:44:11] *** Joins: syl (~z@user/syl)
[00:44:11] *** Joins: mahlon (~mahlon@martini.nu)
[00:44:11] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[00:44:11] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[00:44:11] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[00:44:11] *** Joins: GnuYawk (~GnuYawk@user/gnuyawk)
[00:44:11] *** Joins: crem1 (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[00:44:11] *** Joins: xiamx (~xiamx@2001:470:69fc:105::1:5692)
[00:44:11] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[00:44:11] *** Joins: arkurious (~arkurious@user/arkurious)
[00:44:11] *** Joins: fowl (~fowlmouth@user/fowl)
[00:44:11] *** Joins: om3ga (~oz@46.49.41.80)
[00:44:11] *** Joins: anddam (~anddam@user/anddam)
[00:44:11] *** Joins: oisota (~oisota@user/oisota)
[00:44:11] *** Joins: euantorano (sid180289@id-180289.helmsley.irccloud.com)
[00:44:11] *** Joins: termer (termer@2600:3c02::f03c:91ff:fe1c:eca1)
[00:44:11] *** Joins: ldlework (~hexeme@user/hexeme)
[00:44:11] *** Joins: Nuc1eoN (~Nuc1eoN@odin.csportal.net)
[00:44:11] *** Joins: enyc (~enyc@user/enyc)
[00:44:11] *** Joins: meowray (MaskRay@user/meowray)
[00:44:11] *** Joins: averell (~averell@user/averell)
[00:44:11] *** Joins: mjsir911 (~bnc@user/mjsir911)
[00:44:11] *** Joins: ehmry (~quassel@2a03:3b40:fe:ab::1)
[00:44:11] *** Joins: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com)
[00:44:11] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[00:44:11] *** Joins: PMunch (~PMunch@user/pmunch)
[00:44:11] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[00:44:11] *** Joins: haakon (~haakonn@82.196.8.209)
[00:44:11] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[00:44:11] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[00:44:11] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[00:44:11] *** Joins: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733)
[00:44:11] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[00:44:11] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[00:44:11] *** Joins: madprops (hj8oijo@user/madprops)
[00:44:11] *** Joins: gshumway (~gshumway@user/gshumway)
[00:44:11] *** Joins: Zevv (~Zevvvvv@185.238.131.12)
[00:44:11] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[00:44:11] *** Joins: sagax (~sagax_nb@user/sagax)
[00:44:11] *** Joins: NimBot (~NimBot@mail.nim-lang.org)
[00:44:11] *** Joins: jkl (~jkl@user/jkl)
[00:44:11] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[00:44:11] *** Joins: Ekho (~Ekho@user/ekho)
[00:44:11] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[00:44:11] *** Joins: vicfred (~vicfred@user/vicfred)
[00:44:11] *** Joins: rockcavera (~rc@user/rockcavera)
[00:44:11] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:44:11] *** Joins: cyraxjoe (~joe@189.158.2.104)
[00:44:11] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[00:44:32] *** Joins: rp1 (~rp@cpc77299-basf12-2-0-cust609.12-3.cable.virginm.net)
[00:44:32] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[00:44:32] *** Joins: oprypin (~irc@pryp.in)
[00:44:32] *** Joins: notchris (sid181145@id-181145.hampstead.irccloud.com)
[00:44:32] *** Joins: NimEventer (~NimBot@78.47.140.224)
[00:44:32] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[00:44:32] *** Joins: lain (~lain@172.16.254.xxx)
[00:44:32] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[00:44:32] *** Joins: toothlessgear (2c15493d69@user/toothlessgear)
[00:44:32] *** Joins: ormiret (sid314108@id-314108.lymington.irccloud.com)
[00:44:32] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[00:44:32] *** Joins: rb (~augh@theguntretort.com)
[00:44:49] *** Joins: l1x (uid1954@id-1954.tinside.irccloud.com)
[00:44:49] *** Joins: Yardanico_ (~quassel@2a01:4f8:c2c:df22::2)
[00:44:49] *** Joins: robertmeta (sid514@user/robertmeta)
[00:45:01] *** Joins: dom96 (~dom@mail.nim-lang.org)
[00:45:01] *** Joins: adium (adium@user/adium)
[00:45:02] *** Joins: oz (~oz@crystal/user/oz)
[00:45:02] *** Quits: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1) (Ping timeout: 240 seconds)
[00:45:08] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Ping timeout: 252 seconds)
[00:45:17] *** Joins: cheer[m] (~cheertchn@2001:470:69fc:105::39de)
[00:45:17] *** Joins: ecs (~ecs@user/ecs)
[00:45:17] *** Joins: xet7 (~xet7@user/xet7)
[00:45:17] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[00:45:17] *** Joins: szahid (~szahid@user/szahid)
[00:45:17] *** Joins: nisstyre (~wes@user/nisstyre)
[00:45:18] *** Quits: cheer[m] (~cheertchn@2001:470:69fc:105::39de) (Ping timeout: 245 seconds)
[00:45:29] <FromDiscord> <Josef> In reply to @PMunch "<@385801366779723786>, created an issue": Ah, thank you - I didn't realize you meant a language error I thought maybe there was something wrong with the wrapper
[00:45:57] <PMunch> Nah, that should work. I mean you don't have to deepCopy, but it seems like an issue that it doesn't work
[00:46:18] <PMunch> For your case you can just assign it to a new variable and that makes a copy
[00:48:54] *** Quits: xiamx (~xiamx@2001:470:69fc:105::1:5692) (Ping timeout: 260 seconds)
[00:48:59] <FromDiscord> <Josef> My vectors are a few object ref's away from where I need to do the copy though (ie I have a Object, which has a Renderable field, which has a path field, which is a sequence of vectors). Is the solution for me to write a copy method for every object that has vectors or other imported structs in it somewhere?
[00:52:32] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[00:53:56] <PMunch> Hmm, that makes it a bit trickier
[00:54:22] <PMunch> Do you absolutely need to deepCopy it?
[00:57:40] <FromDiscord> <Josef> Yeah, or do if by copying all the fields over individually
[01:02:55] *** Joins: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1)
[01:03:25] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 250 seconds)
[01:03:37] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[01:09:36] *** Joins: xiamx (~xiamx@2001:470:69fc:105::1:5692)
[01:18:44] <FromDiscord> <Elegantbeef> Does nigui have any API for dragging, looked into it and seems no, but might've missed it?
[01:19:02] <FromDiscord> <michaelb> sent a code paste, see https://play.nim-lang.org/#ix=3Otq
[01:19:53] <FromDiscord> <Elegantbeef> `bars: ptr UncheckedArray[Bar]`
[01:20:31] <FromDiscord> <Elegantbeef> `Foo(bars: bars.addr`
[01:20:39] <FromDiscord> <Elegantbeef> Also what's with the lowercase type names ðŸ˜€
[01:20:55] <FromDiscord> <michaelb> thanks
[01:22:09] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:23:23] <FromDiscord> <michaelb> In reply to @Elegantbeef "Also what's with the": in the module directly wrapping the C stuff, I tend to use names that are an exact match for what's being wrappedâ†µâ†µin the module/s providing a nicer (or "higher level", or however you want to describe it) I follow the usual conventions and Status Nim style guid
[01:23:28] <FromDiscord> <michaelb> (edit) "guid" => "guide"
[01:23:51] <FromDiscord> <michaelb> (edit) "In reply to @Elegantbeef "Also what's with the": in the module directly wrapping the C stuff, I tend to use names that are an exact match for what's being wrappedâ†µâ†µin the module/s providing a nicer (or "higher level", or however you want to describe it) ... I" 03added "Nim API"
[01:24:01] <FromDiscord> <michaelb> (edit) "API" => "API,"
[01:31:00] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[01:41:55] <FromDiscord> <michaelb> sent a code paste, see https://play.nim-lang.org/#ix=3Otx
[01:41:58] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[01:42:33] <FromDiscord> <Elegantbeef> Make a proc or template
[01:54:17] <FromDiscord> <Phil> Beef, question, if you wanted to store procs with completely different signatures in a seq, would it be possible to store their pointers as a `seq[pointer]` ?
[01:54:37] <FromDiscord> <Phil> And then somehow dereference those pointers to get the actual proc back?
[01:55:11] <FromDiscord> <Phil> I'm asking to see whether I'm understanding the idea behind an implementation of an event system
[01:55:25] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[01:56:22] <FromDiscord> <Elegantbeef> You could but it makes more sense to use an object variant so there is no guessing
[01:57:02] <FromDiscord> <Phil> an object variant?
[01:57:16] <FromDiscord> <Phil> Employing google fu
[01:57:20] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#types-object-variants
[01:58:10] <FromDiscord> <Phil> That would be in case I know all variations of procs ahead of time
[01:58:15] <FromDiscord> <Phil> Which strictly speaking I do
[01:58:43] <FromDiscord> <Elegantbeef> Well you cannot call a procedure you dont know ðŸ˜›
[01:58:48] <FromDiscord> <Phil> But it would also be a massive PITA
[01:59:18] <FromDiscord> <Elegantbeef> You could also do `proc(data: string)` which calls the internal procedure
[01:59:20] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:59:22] <FromDiscord> <Elegantbeef> It's what I do for an RPC
[02:00:00] <FromDiscord> <Phil> With converting data back to the type you'd actually want and going from there? Hmmm
[02:00:12] *** Joins: cheer[m] (~cheertchn@2001:470:69fc:105::39de)
[02:00:47] <FromDiscord> <Elegantbeef> Yes using a macro to emit the inbetween
[02:01:06] <FromDiscord> <Elegantbeef> Nim being static meaning arbitrary stuff isnt fun
[02:01:29] <FromDiscord> <Phil> Wouldn't JsonNode be the somewhat perfect type for this given that converting to and from it is literally built into stdlib?
[02:01:45] <FromDiscord> <Phil> Or am I overlooking a caveat somewhere?
[02:01:51] <FromDiscord> <Elegantbeef> It's slow and not binary
[02:02:00] <FromDiscord> <Phil> The worst caveat
[02:02:16] <FromDiscord> <Waldecir Santos> How can a singleton be implemented in nim in a thread safe mannar ?
[02:02:20] <FromDiscord> <Waldecir Santos> (edit) "mannar" => "maner"
[02:02:34] <FromDiscord> <Elegantbeef> global variables with properties that use locks
[02:04:13] <FromDiscord> <Waldecir Santos> Like sharedtables ?
[02:04:35] <FromDiscord> <Elegantbeef> I dont think anyone suggests those they're pretty deprecated iirc
[02:04:54] <FromDiscord> <Phil> sent a code paste, see https://paste.rs/N5B
[02:05:04] <FromDiscord> <Elegantbeef> Indeed
[02:05:12] <FromDiscord> <Elegantbeef> I mean you can do `typeOf(globalMyType)()`
[02:05:20] <FromDiscord> <Elegantbeef> But yea generally speaking you cannot
[02:06:56] <FromDiscord> <Elegantbeef> Pmunch you still about?
[02:07:50] <FromDiscord> <Elegantbeef> Just wanted to show him my level editor since he thought i was crazy at first!
[02:12:29] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[02:16:48] <FromDiscord> <Phil> sent a long message, see http://ix.io/3OtG
[02:16:50] <FromDiscord> <Phil> But also the most amount of code maintenance
[02:17:01] <FromDiscord> <Phil> Hmmmm
[02:17:17] <FromDiscord> <Phil> Any other pros/cons you see between those two?
[02:17:40] <FromDiscord> <Elegantbeef> You can always use macros to do everything automated so not really
[02:20:34] <FromDiscord> <Phil> I wish I could just have a macro that automatically scanned my entire project and gave me an enum that always have an enumType for all types that inherit from `Model`
[02:21:03] <FromDiscord> <Waldecir Santos> AST magic
[02:21:05] <FromDiscord> <Phil> (edit) "always have" => "has" | "all types" => "every type" | "inherit" => "inherits"
[02:21:17] <FromDiscord> <Phil> That's AST magic so deep I think it might be unmaintainable
[02:21:23] <FromDiscord> <Elegantbeef> Wait until you learn you can do it somewhatâ†µ(@Phil)
[02:21:24] <FromDiscord> <Elegantbeef> ðŸ˜›
[02:21:30] <FromDiscord> <Phil> If it's even possible without
[02:21:34] <FromDiscord> <Phil> squints
[02:21:45] <FromDiscord> <Phil> Is this some sort of usecase for nimscript or sth?
[02:21:50] <FromDiscord> <Elegantbeef> You'd need manually subscribe it but yea it'd be possible to do stuff with
[02:22:01] <FromDiscord> <Elegantbeef> Nope
[02:22:20] <FromDiscord> <Elegantbeef> I only condone using nimscript for when you want a scriptable environment
[02:22:43] <FromDiscord> <Phil> I'm not even sure what exactly nimscript is, I'll be honest
[02:22:50] <FromDiscord> <Phil> It was a scripting language to manipulate code I think?
[02:23:00] <FromDiscord> <Elegantbeef> It's a subset of Nim
[02:23:07] <FromDiscord> <Elegantbeef> An interpreted scripting language
[02:23:23] <FromDiscord> <Elegantbeef> Mainly used for static evaluation and macros
[02:25:24] <FromDiscord> <Phil> I think I'll, for the sake of maintainability unless there's a package for it, do my "ModelEnum" by hand and maintain it by hand. Not that I think it'll actually change
[02:29:11] <FromDiscord> <keks> Is there a way in NIM to iterate over an array at compile time - something like a static for loop in D? This should be possible because the length of an array is known at compile time.
[02:29:44] <FromDiscord> <Elegantbeef> Do you mean loop unrolling or running a static expression?
[02:30:47] <FromDiscord> <Elegantbeef> Also it's "Nim" ðŸ˜›
[02:34:16] <FromDiscord> <keks> In reply to @Elegantbeef "Do you mean loop": Yes, loop unrolling at compile time. I'm still trying to do this automatic conversion of various array expressions at compile time
[02:34:57] <FromDiscord> <keks> sent a code paste, see https://play.nim-lang.org/#ix=3OtR
[02:35:48] <FromDiscord> <keks> I'm trying to convert float64 arrays to float32 arrays. I could do it for array literals, but this won't generalise to general variables of type array[N, float64].
[02:36:12] <FromDiscord> <keks> And I'm too lazy to implement the entire for loop as a macro.
[02:36:59] <FromDiscord> <Elegantbeef> you can use `static` if you want to run code at compile time, other wise you'll need a macro to unroll the loop
[02:37:55] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[02:39:29] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3OtS
[02:39:57] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.4)
[02:40:47] <FromDiscord> <Elegantbeef> If you want it unrolled for runtime it can also be done with a macro of course
[02:43:45] <FromDiscord> <keks> that works, but this is with the use of const. I want a generic solution that can work both on array literals of type float64 as well as any variable of type array[N, float64]
[02:43:53] *** Joins: anddam (~anddam@user/anddam)
[02:44:17] <FromDiscord> <Elegantbeef> I'm writing as fast as i can!
[02:48:34] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3OtX
[02:48:43] <FromDiscord> <Elegantbeef> There you go loop unrolled float64 -\> float32
[02:48:55] <FromDiscord> <Phil> ... a casual 29 models, all of which need to go into the enum, all of which I need to consider for the object variant
[02:49:00] <FromDiscord> <Phil> God, life is pain and a typi mess
[02:49:21] <FromDiscord> <Elegantbeef> What are these procedures like?
[02:49:31] <FromDiscord> <Elegantbeef> Are they all the same but different first parameter?
[02:49:38] <FromDiscord> <Elegantbeef> If so, use dynamic dispatch you drongo
[02:50:01] <FromDiscord> <Phil> Essentially it's all proc[T: Model](connection: DbConn, modelInstance: T)
[02:50:19] <FromDiscord> <Phil> If I could store generics anyway
[02:50:36] <FromDiscord> <Elegantbeef> So basically you're saying `method doThing(myInstance: Model, conn: DbConn)`
[02:50:41] <FromDiscord> <Phil> There are some bits and bobs that differ for some of the 29
[02:50:45] <FromDiscord> <Phil> But the general proc signature is the above
[02:51:04] <FromDiscord> <Elegantbeef> Use dynamic dispatch and solve your problem simpler
[02:51:22] <FromDiscord> <keks> In reply to @Elegantbeef "I'm writing as fast": woow, I need time to process this.. Thanks a lot!
[02:51:51] <FromDiscord> <Phil> I think I've been through so many different solution iterations I actually need to get my head out of the entire event system thinky and try to think on how I could apply dynamic dispatch to it
[02:52:16] <FromDiscord> <Phil> Which... okay no idea, I've really not used and thus not thought in dynamically dispatched functions in nim yet
[02:52:27] <FromDiscord> <Phil> I've seen them used in norm though
[02:52:34] <FromDiscord> <Elegantbeef> They work like normal OOP functions
[02:52:42] <FromDiscord> <Elegantbeef> You define a base then override it for all your inheriting children
[02:53:26] <FromDiscord> <Phil> Is that also possible when I don't own the code that defines the Model type?
[02:54:11] <FromDiscord> <Phil> What am I talking about, I can just define that... I think `func` was the keyword? Where I need it
[02:54:35] <FromDiscord> <Elegantbeef> I think so
[02:54:56] <FromDiscord> <Elegantbeef> As long as the type is in the scope and you define a base method that the other methods can see and the call site can see
[02:55:27] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3OtZ
[02:55:28] <FromDiscord> <Elegantbeef> `method` is the keyword
[02:55:28] <FromDiscord> <Elegantbeef> `func` is a pure function like in FP
[02:55:34] <FromDiscord> <Phil> Ah, check
[03:00:10] <FromDiscord> <Phil> Then I can just do a `type TableModel = <List of 29 models separated with '|'>` and use that as parameter in my `sendSignal(signal: SignalType, modelInstance: TableModel)` proc.
[03:00:48] <FromDiscord> <Elegantbeef> Why would you need to make a typedesc
[03:01:00] <FromDiscord> <Elegantbeef> `[T: Model]` is  composite typeclass that is all inheriting children
[03:01:49] <FromDiscord> <Phil> Still too mentally trapped in previous approaches I think and its late
[03:03:04] <FromDiscord> <Phil> I'll go to sleep I think and look at this with fresh eyes
[03:03:19] <FromDiscord> <Phil> And see whether that way I can implement an event system and at the same time get rid of a circular dependency I'm running into
[03:03:47] <FromDiscord> <Phil> Well, less event system
[03:03:55] <FromDiscord> <Phil> More something that works akin to Django's Signal system
[03:04:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:04:44] <FromDiscord> <Phil> Oh wait, no I don't think that approach works, I have to store seq[proc]!
[03:04:58] <FromDiscord> <Phil> Because one event can have trigger multiple follow up actions
[03:05:31] <FromDiscord> <Phil> Like deleting an image can trigger as a follow up action that its contents from the search table are removed as well as deleting the actual image file
[03:06:19] <FromDiscord> <Phil> Boah screw my brain, tomorrow is also time
[03:06:54] <FromDiscord> <Phil> (edit) 04removed "have"
[03:34:25] *** Quits: l1x (uid1954@id-1954.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:53:24] <FromDiscord> <ajusa> what's the one package that has metaprogramming through interpolation? I remember seeing it somewhere here...
[03:54:29] <FromDiscord> <Elegantbeef> What?
[03:55:47] <FromDiscord> <Elegantbeef> https://github.com/geekrelief/genit perhaps?
[03:56:41] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[03:57:25] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Ou8
[03:58:38] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Ou9
[03:59:05] <FromDiscord> <Elegantbeef> A template wont be able to do this, a macro can
[03:59:05] <FromDiscord> <ajusa> can this be done with varargs[typed], as I expect everything to be strings? Or would it have to be varargs[untyped] and using a macro
[04:02:16] <FromDiscord> <Elegantbeef> Well the template cant do much with that ast
[04:02:41] <FromDiscord> <Elegantbeef> Remember templates dont have introspective capabillities they are 100% take this AST and paste it here
[04:03:24] <FromDiscord> <ajusa> right, I was hoping that they could iterate over the arguments that were passed in somehow
[04:03:38] <FromDiscord> <Elegantbeef> They are not that smart
[04:03:47] <FromDiscord> <Elegantbeef> They legitimately are just code subsitution
[04:05:46] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[04:06:06] <FromDiscord> <Elegantbeef> It's not that complicated
[04:06:07] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Oub
[04:06:16] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:06:51] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[04:12:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[04:33:45] <FromDiscord> <ajusa> thanks for the code sample! I'll build off of this ðŸ˜„
[04:34:20] <FromDiscord> <ajusa> also beef do you prefer old concepts or new concepts, I remember you had an opinion
[04:34:47] <FromDiscord> <Elegantbeef> Old concepts are more flexible but rely on "does compile" so are slower
[04:56:14] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:58:27] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[05:00:22] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:11:17] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[05:14:03] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:15:57] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[05:18:57] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[05:29:13] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:29:21] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:37:17] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[05:51:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[06:11:02] <NimEventer> New Nimble package! tradingview - TradingView client, see https://github.com/juancarlospaco/tradingview
[06:18:14] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:36:29] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[06:38:06] <FromDiscord> <gcao> hi, if in my main thread, I call runForever(), and then I receive some message which trigger a callback. From my callback is there a grace way to end runForever()?
[06:40:57] <FromDiscord> <jsef5> ok, going to write a compression alg in nim
[06:49:20] <FromDiscord> <michaelb> In reply to @gcao "hi, if in my": are you using std/asyncdispatch or nim-chronos?
[06:50:54] <FromDiscord> <gcao> asyncdispatch
[06:56:49] <FromDiscord> <michaelb> I'm not sure if it works the same or as well with asyncdispatch vs. chronos, but you could have a threadvar or maybe a global atomic, and do `while foo: poll()`
[06:57:09] <FromDiscord> <michaelb> in chronos that works well, i.e. doesn't turn into a hot loop driving up cpu usage
[06:57:54] <FromDiscord> <michaelb> I did something like that here: https://github.com/status-im/nim-status/blob/master/examples/client.nim#L22-L23
[06:57:59] <FromDiscord> <michaelb> (with chronos)
[06:59:59] <FromDiscord> <michaelb> eh, `poll` in asyncdispatch does seem to work differently, e.g. in the docs says `Raises ValueError if there are no pending operations`
[07:03:07] <FromDiscord> <evoalg> if I have a file "myfile.json" that contains `{"foo": [[1, 2, 3], [4, 5, 6]]}` I know how to read this in as a "dict" in python, ie I'd do `import json; d = json.loads(open("myfile.json").read())`, but in Nim to read it into a table, would I just use `parseJson` from std/json?
[07:03:40] <FromDiscord> <Elegantbeef> if you just want to use it as a table yes you would
[07:04:09] <FromDiscord> <evoalg> yea I don't want to do anything else with json at the moment ... thank you beefy!
[07:05:34] <FromDiscord> <gcao> In reply to @brainproxy "(with chronos)": Thank you. I'll take a look at your code and also see how runForever is implemented. maybe I can write a custom runForever which can exit on demand
[07:05:59] <FromDiscord> <ajusa> is there a way to distinguish between when a template/proc is called for assignment or for something else? Eg
[07:06:18] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3OuE
[07:11:04] <FromDiscord> <ajusa> you know the more I think about it the more I feel like replicating Karax using mostly templates is probably near impossible, the existing macro just does a lot for code gen
[07:13:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[07:14:47] <FromDiscord> <Elegantbeef> I mean you can do similar stuff i think
[07:15:03] <FromDiscord> <Elegantbeef> But nothing will be as nice as a macro i think
[07:16:54] <FromDiscord> <ajusa> can you expand a little on the similar stuff? just want to figure out how doable it would be before I decide what I want to do
[07:17:21] <FromDiscord> <Elegantbeef> Well what are you after the `call(a = b, = c)`?
[07:17:38] <FromDiscord> <Elegantbeef> `call({"a": "b", "c" : "d"}` could work
[07:17:45] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[07:18:37] <FromDiscord> <ajusa> I'm asking about the assignment thing here -> can I run different code for when a proc is used and assigned to a variable vs when it isn't
[07:18:55] <FromDiscord> <ajusa> I was seeing how doable it would be to create an HTML DSL using something like https://github.com/treeform/fidget/blob/master/src/fidget.nim#L85-L133
[07:20:35] <FromDiscord> <Elegantbeef> You dont know if you're in a proc or not
[07:20:41] <FromDiscord> <Elegantbeef> I mean in assignment or not
[07:21:57] <FromDiscord> <ajusa> yeah I thought maybe I could try and distinguish based on whether the proc is returning, like if it returns a string vs when it isn't returning a string. that doesn't work though, the Nim compiler warns about it
[07:22:18] <FromDiscord> <ajusa> really what I want to do is run one bit of code when the value I return is being discarded, and a different bit of code when it isn't
[07:22:22] <FromDiscord> <Elegantbeef> you could make an `asgnTemplateName(a, args)`
[07:23:33] <FromDiscord> <ajusa> In reply to @Elegantbeef "you could make an": oh, that's a pretty good idea actually
[07:29:22] <FromDiscord> <evoalg> Sorry I'm a bit confused ... so when I do `var t = parseJson(readFile("myfile.json"))` it's a "JsonNode" type, and I'm wondering how it'd get it into a table (eg Table[string, seq[seq[int], seq[int]]] ... or arrays instead of seqs)?
[07:29:41] <FromDiscord> <Elegantbeef> there is `to` you can give it a type
[07:30:59] <FromDiscord> <evoalg> thank you! - I've now found `to` is the docs
[07:33:07] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3OuH
[07:36:23] <FromDiscord> <evoalg> ohhh lol thank you beefy \:D \:D
[07:38:32] <FromDiscord> <evoalg> gosh that's more simple and clean than I thought
[07:39:24] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3OuI
[07:41:11] <FromDiscord> <evoalg> ahhh nice ... but `foo: seq[seq[int]]` \<\< it doesn't know that foo is "foo" does it??
[07:42:40] <FromDiscord> <Elegantbeef> It knows it's `foo`
[07:43:14] <FromDiscord> <evoalg> even though the string might be "bar" it'll still grab mySeq?
[07:43:28] <FromDiscord> <Elegantbeef> well`"foo" -> foo`
[07:43:36] <FromDiscord> <Elegantbeef> It'll only grab it if the name is the same
[07:45:01] <FromDiscord> <evoalg> then I'm missing something with types ... I suppose I've been avoiding using them ... so the `foo` in `foo: seq[seq[int]]` really means `"foo"` ie a string ?
[07:46:00] <FromDiscord> <Elegantbeef> nah it's a field name
[07:46:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[07:46:22] <FromDiscord> <Elegantbeef> the json just uses field names on parse
[07:46:22] <FromDiscord> <Elegantbeef> the field name needs to match the json data or a hook is needed
[07:46:23] <FromDiscord> <evoalg> so that fieldname might have been called `bar` for a laugh and it'd still work?
[07:46:23] <FromDiscord> <Elegantbeef> Nope
[07:46:32] <FromDiscord> <Elegantbeef> Dont recall if it has custom name support
[07:47:25] <FromDiscord> <evoalg> ohhh so the field name has to match the json stringy thing?
[07:47:56] <FromDiscord> <evoalg> (it looks like a string, but it might be a json thing that looks like a string?)
[07:48:25] <FromDiscord> <Elegantbeef> It's a string
[07:48:35] <FromDiscord> <evoalg> ok
[07:48:43] <FromDiscord> <Elegantbeef> In this case yes the field needs to match the key in the json
[07:49:29] <FromDiscord> <evoalg> I know the field name so that will work ... I'll have a play ... thank you for teaching me so patiently beefy
[07:51:18] <FromDiscord> <Elegantbeef> No problem
[07:58:34] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:04:19] *** Quits: rockcavera (~rc@user/rockcavera) (Ping timeout: 256 seconds)
[10:31:47] <FromDiscord> <mratsim> In reply to @keks "Is there a way": https://github.com/mratsim/constantine/blob/50717d8de6715647320fb69935bf8926b5769f95/helpers/static_for.nim#L22
[10:34:15] <FromDiscord> <Elegantbeef> Guess that'd be a more general solution
[10:34:31] <FromDiscord> <Elegantbeef> Any reason you didnt use `range: static Slice[int]`
[10:35:18] <NimEventer> New Nimble package! sbttl - read & write subtitle files with sbttl, see https://github.com/hamidb80/sbttl
[10:52:32] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[10:55:52] *** Quits: oz (~oz@crystal/user/oz) (*.net *.split)
[10:55:52] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (*.net *.split)
[10:55:52] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (*.net *.split)
[10:55:52] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (*.net *.split)
[10:55:52] *** Quits: mahlon (~mahlon@martini.nu) (*.net *.split)
[10:55:52] *** Quits: syl (~z@user/syl) (*.net *.split)
[10:55:52] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[10:55:52] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[10:55:53] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (*.net *.split)
[10:55:53] *** Quits: tinystoat (~squeek@user/tinystoat) (*.net *.split)
[10:55:53] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[10:56:31] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:58:06] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[10:58:06] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[10:58:06] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[10:58:06] *** Joins: mahlon (~mahlon@martini.nu)
[10:58:06] *** Joins: syl (~z@user/syl)
[10:58:06] *** Joins: drewr (~drew@user/drewr)
[10:58:06] *** Joins: [R] (~rs@genoce.org)
[10:58:06] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[10:58:06] *** Joins: tinystoat (~squeek@user/tinystoat)
[10:58:06] *** Joins: flynn (~mcbloch@user/flynn)
[10:58:06] *** Joins: oz (~oz@crystal/user/oz)
[11:11:02] <FromDiscord> <mratsim> In reply to @Elegantbeef "Any reason you didnt": range is a reserved keyword ðŸ˜‰
[11:20:32] <FromDiscord> <Elegantbeef> sure but i more meant instead of two ints
[11:22:56] <nrds> <06Prestige99>  
[11:23:21] <FromDiscord> <Elegantbeef> I was thinking the same thing
[11:26:56] <FromDiscord> <mratsim> In reply to @Elegantbeef "sure but i more": because it's an internal proc and Slice introduces extra overhead on an already compile-time heavy library
[11:54:54] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[11:57:32] *** Joins: Vladar (~Vladar@46.162.2.53)
[12:16:56] <FromDiscord> <Evrensel KiÅŸilik> i received my 2K monitor
[12:17:00] <FromDiscord> <Evrensel KiÅŸilik> yay
[12:17:01] <FromDiscord> <Evrensel KiÅŸilik> buuuuuuuuut
[12:17:30] <FromDiscord> <Evrensel KiÅŸilik> i can't use 144Hz and G-Sync with damn HDMI cable
[12:17:31] <FromDiscord> <Evrensel KiÅŸilik> ðŸ˜¦
[12:18:11] <FromDiscord> <Evrensel KiÅŸilik> and my GPU is not good for playing games in 2K
[12:18:23] <FromDiscord> <Evrensel KiÅŸilik> damn RTX 2060 is poor xD
[12:18:34] <FromDiscord> <enthus1ast> good more time for hacking \:)
[12:19:00] <FromDiscord> <Evrensel KiÅŸilik> In reply to @enthus1ast "good more time for": let's hack the monitor
[12:20:29] <FromDiscord> <Phil> Okay, fresh day, I'm fresh attempt to think about my circular dependency problem and if I can solve it with an event system
[12:20:37] <FromDiscord> <Phil> (edit) 04removed "I'm"
[12:21:06] <FromDiscord> <enthus1ast> must work ;\_;
[12:21:14] <FromDiscord> <Elegantbeef> What's the circular dependency?
[12:21:26] *** Joins: PMunch (~PMunch@user/pmunch)
[12:21:28] <FromDiscord> <Phil> sent a long message, see http://ix.io/3Ovs
[12:21:45] <FromDiscord> <Phil> That is the entire reason I went on this verbal vomit last time I wrote
[12:21:50] <FromDiscord> <Elegantbeef> Could delay imports work?
[12:22:07] <FromDiscord> <Elegantbeef> Is the code hosted somewhere?
[12:22:24] <FromDiscord> <Phil> It is, but not in the simplified version I described here
[12:23:29] <FromDiscord> <Elegantbeef> Well you might be able to delay imports for this
[12:23:56] <FromDiscord> <Elegantbeef> Do any of the procs that signal calls from generic repository go back to signal?
[12:24:03] <FromDiscord> <Phil> One sec, hosted as in you wanted to take a look at it on github, not hosted as in there's some strange way to async import code over the internet
[12:24:13] <FromDiscord> <Phil> right?
[12:24:27] <FromDiscord> <Elegantbeef> Yes
[12:24:33] <FromDiscord> <Phil> Phew
[12:24:43] <FromDiscord> <Phil> Okay, and yes some of them do
[12:24:50] <FromDiscord> <Phil> Example, I have a search table and a creature table
[12:25:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[12:25:06] <FromDiscord> <Phil> if you create a creature, that shall cause a follow up action of creating an entry in the search table
[12:25:41] <FromDiscord> <Phil> creating both of those entries uses the same `createEntry` proc
[12:26:13] <FromDiscord> <Elegantbeef> Give me the code and i'll give you the world
[12:26:20] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OvE
[12:26:52] <FromDiscord> <Phil> The general repo:â†µhttps://github.com/PhilippMDoerner/NimStoryFontâ†µGive me a second and I'll get the link for the specific files
[12:27:35] <FromDiscord> <Elegantbeef> Just tell me how i get the circlular error
[12:28:16] <NimEventer> New thread by Drkameleon: Weird issue with ints in web (js) builds, see https://forum.nim-lang.org/t/8862
[12:31:09] <FromDiscord> <Phil> sent a long message, see https://paste.rs/5wC
[12:31:36] <FromDiscord> <Phil> (edit) "https://paste.rs/fTE" => "http://ix.io/3OvG"
[12:32:59] <FromDiscord> <Phil> Didn't even write any code yet into searchSignals, just the import since that'll be needed
[12:33:46] <FromDiscord> <Phil> (edit) "needed" => "needed. Actually, searchSignals as well will have an import of genericArticleRepository as the procs in there need to write to a table in the database"
[12:35:45] <FromDiscord> <Elegantbeef> So basically if you remove the import of `genericAriticleRepository` you dont get the issue
[12:36:15] <FromDiscord> <Elegantbeef> line 1 of `campaignRepository` = `import ../core/databaseRead`
[12:37:16] <FromDiscord> <Phil> You can view databaseRead, databaseWrite and genericArticleRepository as one unit really. GenericArticleRepository is currently just a convenience module so you only have to import one thing instead of two
[12:37:30] <FromDiscord> <Phil> (edit) "one thing instead of two" => "that as opposed to databaseRead and databaseWrite"
[12:37:43] <FromDiscord> <Elegantbeef> > You can view databaseRead, databaseWrite and genericArticleRepository as one unit
[12:37:57] <FromDiscord> <Elegantbeef> If they're considered a single unit why are they seperated
[12:38:22] <FromDiscord> <Phil> That was one approach I tried out yesterday, because I believed I might only need read access
[12:38:50] <FromDiscord> <Elegantbeef> I mean eitherway, just dont use the `genericArticleRepository` in your project
[12:39:35] <FromDiscord> <Phil> You mean no central "one module defines all procs that access the database" approach?
[12:39:50] <FromDiscord> <Elegantbeef> I mean you can use that for others just not your internal stuff
[12:40:41] <FromDiscord> <Phil> But that means code duplication since I don't really need anything outside of what's in genericArticleRepository
[12:41:18] <FromDiscord> <Elegantbeef> I dont know what you mean
[12:42:19] <FromDiscord> <Elegantbeef> To solve your issue with `typetraits` add `bind genericParams` into `getRelatedFieldNameOn`
[12:43:22] <FromDiscord> <Phil> one sec, I restored the project to the way it was before I did the split.
[12:44:12] <FromDiscord> <Elegantbeef> I dont know it's hard to say what to fix with this stuff
[12:44:23] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[12:45:19] <FromDiscord> <Phil> In reply to @Elegantbeef "I mean you can": I think my main issue is that my procs that insert/update/create are coupled to my "signal" procs
[12:46:20] <FromDiscord> <Phil> Which starts what fundamentally is a "createEntry" --> "preCreateSignal" --> (possibly) "createEntry" call stuff
[12:46:32] <FromDiscord> <Phil> (edit) "Which starts what fundamentally is a "createEntry" --> "preCreateSignal" --> (possibly) "createEntry" ... call" 03added "--> "preCreateSignal""
[12:47:11] <FromDiscord> <Phil> Where creating an entry triggers a signal proc that might be creating another entry which again triggers a signal proc that again might be creating/updating/deleting another entry etc. etc.
[12:48:08] <FromDiscord> <Phil> In a proper event system my insert/update/create procs (and the entire module) would have no knowledge of any of that, they'd just push events to a queue somewhere that is accessed from independent modules... I think that's how it works anyway
[12:48:21] <FromDiscord> <Phil> (edit) "In a proper event system my insert/update/create procs (and the entire module) would have no knowledge of any of that, they'd just push events to a ... queue" 03added "global"
[12:49:20] <FromDiscord> <Elegantbeef> I cannot say much aside from i can remove the recursive dependency easily
[12:50:10] <FromDiscord> <Phil> Yeah but then the signal procs I'll write in the future will need their on procs to insert stuff into the database when I already have procs that do that for me
[12:50:25] <FromDiscord> <Phil> (edit) "Yeah but then the signal procs I'll write in the future will need their on procs to insert stuff into the database when I already have procs that ... do" 03added "could"
[12:51:29] <FromDiscord> <Phil> (edit) "Yeah but then the signal procs I'll write in the future will need their on procs to insert stuff into the database when I already have procs that could do that for me ... " 03added "(in genericArticleRepository)"
[12:52:11] <FromDiscord> <enthus1ast> you could maybe add callbacks to the database procs
[12:52:11] <FromDiscord> <Elegantbeef> Give me some actual code that shows the issue, and i'll happily help try to make it work, afaict right now the issue is purely you wanting a specific file
[12:52:11] <FromDiscord> <Elegantbeef> Removing that intermediate file and fixing the other code means it presently imports like 5 modules and exports them
[12:52:47] <FromDiscord> <Elegantbeef> Ok here we go you plan on calling procedures inside of the generic article
[12:53:08] <FromDiscord> <Elegantbeef> Can you write some place holders and pipe them so i can actually see the problem and not the "problem" ðŸ˜€
[12:53:50] <FromDiscord> <Phil> Yeah, I think calling the procs inside of the generic article might be the bad idea that's killing me.
[12:54:02] <FromDiscord> <Phil> But on it, just give me a couple minutes to revert my prior bad attempts
[12:54:44] <FromDiscord> <Elegantbeef> Here is my diff if curious
[12:54:45] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3OvJ
[12:55:22] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[12:56:13] <FromDiscord> <Phil> I think I really have to apologize for not having cleared up that entire mess that was the split of genericArticleRepository into databaseRead and databaseWrite
[12:56:21] <FromDiscord> <Phil> (edit) "I think I really have to apologize for not having cleared up that entire mess that was the split of genericArticleRepository into databaseRead and databaseWrite ... " 03added "before asking my question"
[12:56:39] <FromDiscord> <Elegantbeef> Eh more important is just an example of the actual code and not this inane issue ðŸ˜€
[12:57:25] <FromDiscord> <Elegantbeef> Like yes this causes a circ dep, but my fix works and the code still compiles so it's very difficult to give any suggestion
[12:57:45] <FromDiscord> <Elegantbeef> I say it compiles but there is a sqlite issue
[13:00:17] <FromDiscord> <Elegantbeef> Oh wait fixing those does present a proper circ issue it seems
[13:01:20] <FromDiscord> <Phil> I'm not that fast at writing the proper example XD
[13:04:43] <FromDiscord> <Elegantbeef> Which procedure would call a signal inside `dataBaseWrite`?
[13:08:35] <FromDiscord> <Phil> All procs call a signal inside database write. Effectively, the second you see a "when compiles", that's my hook for calling stuff
[13:08:53] <FromDiscord> <Phil> (edit) "stuff" => "a signal proc"
[13:09:53] <FromDiscord> <Elegantbeef> Ok so then this is a proper unsolvable circular dependancy without the abillity to use delayed imports to get around it
[13:10:40] <FromDiscord> <Phil> Okay, pushed the example
[13:10:49] <FromDiscord> <Phil> In the current version of the repo I rolled back around 3-4 commits
[13:11:04] <FromDiscord> <Phil> Because those were the ones where I split genericArticleRepository into databaseRead and databaseWrite
[13:11:09] <FromDiscord> <Phil> It's all just in genericArticleRepository now
[13:12:33] <FromDiscord> <Phil> The example goes:â†µgenericArticleRepository imports searchSignals (add a search entry after an article type model, e.g. Creature or Character, were created)â†µsearchSignals imports searchRepository (has the actual proc to enter a search entry into the search table)â†µsearchRepository imports genericArticleRepository (has the helper procs for the db interaction)
[13:13:11] <FromDiscord> <Clonkk> Is initializing a string with `collect(newSeq)` valid for non-orc gc ?
[13:14:57] <FromDiscord> <Elegantbeef> If it compiles it's valid ðŸ˜€
[13:15:31] <FromDiscord> <Clonkk> I thought so, but I get a weird segmentation faults without --gc\:orc that seems to be cause by a string allocation according to the stacktrace
[13:15:49] <FromDiscord> <Elegantbeef> Using `newSeq` is a bit weird, cant you use `newString`?
[13:16:12] <FromDiscord> <Clonkk> Not my code \:), there's some string interpolation shenanigans going on
[13:16:47] <FromDiscord> <Elegantbeef> This is proper recursive so yea i'll say you need to change how this works sadly
[13:17:53] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3NJg i was thinking the issue was more like this
[13:18:39] <FromDiscord> <Phil> It's a mystery to me on how on earth Django does it
[13:21:32] <FromDiscord> <Phil> Because in Django signals happen in sync, an HTTP call just does not get a response until the original "insert"-call has finished AND all of that signals that insert call triggers
[13:21:49] <FromDiscord> <Phil> (edit) "that" => "the"
[13:26:22] <FromDiscord> <Phil> In reply to @Elegantbeef "https://play.nim-lang.org/#ix=3NJg i was thinking": I I think this way I might solve some of my issues
[13:26:37] <FromDiscord> <Phil> But only special cases, not all of them
[13:26:56] <FromDiscord> <Phil> (edit) "cases," => "cases where I actually have to circumvent the genericArticleRepository (e.g. when inserting into a view),"
[13:28:00] <FromDiscord> <Elegantbeef> Well the procedure you're calling from a module relies on the module calling it
[13:28:07] <FromDiscord> <Elegantbeef> That's just a no go in NIm
[13:28:22] <FromDiscord> <Elegantbeef> You either need to make the type in a different file, or change the logic
[13:29:27] <FromDiscord> <Elegantbeef> Atleast it seemed the imports were purely do to types, i could be wrong
[13:30:22] <FromDiscord> <Phil> Nah, the logic is the actual problem as you said
[13:30:45] <FromDiscord> <Phil> I can't have a createEntry proc call a signal proc that in turn calls the createEntry proc again, that's just circular dependency
[13:34:10] <FromDiscord> <Phil> I think an event system would be the solution simply because the way Django calls its crap (dispatcher, receiver etc.) is very much reminiscent of a pub-sub event thing.â†µBut how that solves this type of circular dependency I don't know
[13:35:21] <FromDiscord> <Elegantbeef> Well you subscribe events so there is no recursive you call an event which then calls the procedure you subscribed
[13:49:45] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[13:51:46] <FromDiscord> <yumi> hmmm how can I include some variables from a config file?
[13:51:49] <FromDiscord> <yumi> in a script
[13:53:45] <FromDiscord> <yumi> without compiling the file
[13:54:34] <FromDiscord> <yumi> lemme try parsecfg
[14:07:51] <FromDiscord> <Phil> Sidenote, PR is open
[14:11:41] <FromDiscord> <haolian9 (é«˜æµ©äº®)> hi all, is there a function equivalent to `sendfile(2)` in nim? i even tried to grep in source of nim, but no lucky
[14:14:40] <FromDiscord> <Clonkk> Not that I know of, but there is FileStream  (https://nim-lang.org/docs/streams.html#openFileStream%2Cstring%2CFileMode%2Cint) that should make it to implement I guess
[14:18:45] <FromDiscord> <haolian9 (é«˜æµ©äº®)> thanks, the `stream` keyword inspired me, and then i found this project\: https://github.com/status-im/nim-faststreams
[14:54:21] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3Owc
[14:56:00] <FromDiscord> <Phil> Is pp an on the fly defined proc signature that you then cast a proc pointer `pcb` to?
[14:59:46] <FromDiscord> <Rika> Yes then it calls that proc with ev
[15:00:10] <FromDiscord> <Phil> What is the {.nimcall.} pragma doing there? Is that for readability purposes or does that actually do something?
[15:01:13] <FromDiscord> <Rika> I don't recall what exactly it does but otherwise it would error
[15:02:13] <FromDiscord> <Phil> In the docs it just says:â†µ> is the default convention used for a Nim proc. It is the same as fastcall, but only for C compilers that support fastcall.â†µBut that look more like something for decorative purposes
[15:02:37] <FromDiscord> <Rika> No, calling conventions are important
[15:03:14] <FromDiscord> <Rika> I don't remember what it defaults to if the pragma was not there but I think it mismatches with the stored proc calling convention
[15:10:23] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3Owg
[15:11:05] <FromDiscord> <Phil> (edit) "https://play.nim-lang.org/#ix=3Owg" => "https://play.nim-lang.org/#ix=3Owh"
[15:11:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[15:11:58] <FromDiscord> <Rika> Yeah
[15:38:14] <FromDiscord> <planetis> nimcall means it's not a closure
[15:38:23] <FromDiscord> <planetis> which is the default
[16:04:44] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[16:21:14] <NimEventer> New thread by Xigoi: Weird issue with Nimble installation, see https://forum.nim-lang.org/t/8864
[16:25:53] <FromDiscord> <rishavs (Rishav Sharan)> sent a code paste, see https://play.nim-lang.org/#ix=3Owu
[16:25:54] <FromDiscord> <Rika> Oh yeah that's true I don't know why I thought it was a closure and dismissed the idea that it isn't ("since it is")
[16:26:19] <FromDiscord> <Rika> In reply to @rishavs (Rishav Sharan) "What is a simple": Do you really want it to be "nilable" or do you want option types
[16:26:39] <FromDiscord> <rishav> nilable is better. I don't want to use Options for this
[16:26:41] <FromDiscord> <Rika> There are option types in Nim that don't lead to segfaults like nil could
[16:27:02] <FromDiscord> <Rika> Why? Nonetheless if you want nil it has to be either a ref or a ptr type
[16:27:50] <FromDiscord> <rishav> Hmm... Essentially this is an object I will be using in a lot of functionas. I want to start with a nil value in the attgribute. and as I finish coding, change it all to duration type
[16:28:36] <FromDiscord> <Rika> Use options. There's no real reason to not from what I can see...
[16:29:36] <FromDiscord> <mratsim> In reply to @rishavs (Rishav Sharan) "What is a simple": Option
[16:30:19] <FromDiscord> <mratsim> In reply to @rishav "nilable is better. I": You can't nil a value type, they don't have pointer indirection
[16:41:34] <FromDiscord> <rishav> Thanks
[16:48:17] *** Joins: rockcavera (~rc@192.12.112.99)
[16:48:17] *** Quits: rockcavera (~rc@192.12.112.99) (Changing host)
[16:48:17] *** Joins: rockcavera (~rc@user/rockcavera)
[16:55:22] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OwE
[17:27:43] <FromDiscord> <eyecon> @KatrinaKitten is there a way in honeycomb to indicate "the parsing must end here"? I am currently checking if the tail is empty.
[17:43:44] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[17:44:24] <FromDiscord> <Phil> Can you do sort of a compile time switch case?
[17:46:03] <PMunch> Yes
[17:53:26] <FromDiscord> <Phil> sent a long message, see http://ix.io/3OwU
[17:53:49] <FromDiscord> <Phil> I'd just like switch case because it forces you to cover all variations of an enum, it enforces "correctness" a bit better
[17:57:21] <FromDiscord> <hethir> What's the nim way to store a `void` for user data? Is there a "safe" way to do that?
[17:58:06] <FromDiscord> <enthus1ast> just pointer
[18:01:32] <Amun-Ra> Phil: when + if(s) + else
[18:02:47] <FromDiscord> <Phil> In reply to @Amun-Ra "<@180601887916163073>: when + if(s)": So the "when" way is the only way to to that sort of template? ðŸ˜¢
[18:03:17] <FromDiscord> <Phil> Well, when + elif
[18:03:59] <FromDiscord> <Phil> (edit) "to" => "do"
[18:05:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[18:08:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[18:14:06] *** Joins: arkurious (~arkurious@user/arkurious)
[18:14:19] <PMunch> @hethir, store `void` for user data?
[18:14:24] <PMunch> What does that even mean
[18:15:26] <FromDiscord> <hethir> like glfw does with `glfwSetWindowUserPointer` and `glfwGetWindowUserPointer`
[18:16:49] <PMunch> I still have no idea what you're trying to do
[18:17:56] <Amun-Ra> the equivalent of (void *userdata)
[18:24:51] <PMunch> Ah `var userdata: pointer`
[18:24:55] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:57:22] <FromDiscord> <demotomohiro> sent a code paste, see https://play.nim-lang.org/#ix=3Oxy
[19:32:11] <FromDiscord> <tandy> is there  away to deal with type recursion in nim?
[19:32:32] <FromDiscord> <tandy> sent a long message, see http://ix.io/3OxL
[19:32:50] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3OxM
[19:34:28] <FromDiscord> <tandy> huh, changing `UnsignedData` to a ref object helped
[19:43:53] <FromDiscord> <konsumlamm> objects sre value types, they can't be recursive (since then their size would be infinite)
[19:44:14] <FromDiscord> <konsumlamm> do you need some indirection, which can be introduced by making a ref object
[20:28:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[20:31:39] <FromDiscord> <Phil> I shall perform a minor celebration
[20:31:57] <FromDiscord> <Phil> For I've got the basics of that effing signal system down and can finally have a starting point for a refactor
[20:35:04] <FromDiscord> <KatrinaKitten> In reply to @eyecon "<@!204718116020682753> is there a": If you're guaranteed to be at the end of the input when you do that, you can use the built in parser `eof` which does essentially what you're doing now.
[20:35:16] <FromDiscord> <KatrinaKitten> Otherwise, not so easily.
[20:36:54] <FromDiscord> <eyecon> In reply to @KatrinaKitten "If you're guaranteed to": There's an `eof`? I missed that in the documentation, thanks!
[20:37:52] <FromDiscord> <eyecon> I don't know how I didn't see that
[20:38:34] <FromDiscord> <eyecon> It doesn't affect the parse result, right?
[20:46:09] <FromDiscord> <mratsim> In reply to @eyecon "There's an `eof`? I": https://nim-lang.org/docs/io.html#endOfFile%2CFile
[20:46:34] <FromDiscord> <mratsim> In general you have everything here: https://nim-lang.org/docs/theindex.html
[20:46:36] <FromDiscord> <eyecon> In reply to @mratsim "https://nim-lang.org/docs/io.html#endOfFile%2CFile": Not that, the honeycomb one: https://katrinakitten.github.io/honeycomb/honeycomb.html#eof
[20:46:39] <FromDiscord> <mratsim> ah
[20:46:56] <FromDiscord> <eyecon> But thanks anyway!
[20:56:34] <FromDiscord> <KatrinaKitten> In reply to @eyecon "It doesn't affect the": It will generate an empty string in the result, but you can use `skip` (the `<<` operator) to discard it.
[20:56:58] <FromDiscord> <KatrinaKitten> (edit) "it." => "it like any other parser."
[20:57:23] <FromDiscord> <KatrinaKitten> (edit) "In reply to @eyecon "It doesn't affect the": It will generate an empty string in the result, but you can use `skip` (the `<<` operator) ... to" 03added "instead of `&`"
[21:09:01] <FromDiscord> <eyecon> In reply to @KatrinaKitten "It will generate an": Thanks a lot!
[21:36:52] <FromDiscord> <Nycto> Is there a way to exclude some source files when calling â€˜nim doc â€”projectâ€™ ? Iâ€™ve got some private APIs that consumers donâ€™t need to worry about
[21:38:27] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[21:44:41] *** Parts: haakon (~haakonn@82.196.8.209) ()
[22:28:38] *** Joins: vicfred (~vicfred@user/vicfred)
[22:59:17] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[23:03:45] *** Joins: tiorock (~rc@192.12.112.99)
[23:03:45] *** Quits: tiorock (~rc@192.12.112.99) (Changing host)
[23:03:45] *** Joins: tiorock (~rc@user/rockcavera)
[23:03:45] *** rockcavera is now known as Guest2347
[23:03:45] *** tiorock is now known as rockcavera
[23:06:37] *** Quits: Guest2347 (~rc@user/rockcavera) (Ping timeout: 240 seconds)
[23:07:17] <nrds> <07testtor/freenode99> <wolfy1339> just like Trump said, we need to drain the swamp
[23:07:17] <nrds> <07testtor/freenode99> <bin_bash> rasengan: so youre going to force people to move to annother irc network even if they like the modes and features in the current freenode with ircd-seven and atheme?
[23:07:20] <nrds> <07testtor/freenode99> rasengan places a new sign in #freenode: THE SWAMP WILL BE DRAINED TODAY!
[23:07:23] <nrds> <07testtor/freenode99> <rasengan> Decision has been made.
[23:07:26] <nrds> <07testtor/freenode99> <rasengan> We have to drain this swamp.
[23:07:28] <nrds> <07testtor/freenode99> * mlu disapproves
[23:07:30] <nrds> <07testtor/freenode99> rasengan sets #freenode +m moderated
[23:07:33] <nrds> <07testtor/freenode99> rasengan unsets #freenode -z
[23:07:36] <nrds> <07testtor/freenode99> <rasengan> We are draining the swamp.
[23:07:38] <nrds> <07testtor/freenode99> <Foxy> #MFGA
[23:07:40] <nrds> <07testtor/freenode99> <rasengan> Classic tried to go on for the sake of the community, but the community has made it loud and clear - they want freenode classic to end, today!
[23:07:43] <nrds> <07testtor/freenode99> <rasengan> #MFGA
[23:09:00] <FromDiscord> <leorize> uhmm, what is this spam from freenode?
[23:11:39] <FromDiscord> <Phil> I have no idea what all this <> prefixing stuff is even supposed to mean
[23:14:28] <nrds> <06Prestige99> Someone from libera mad about freenode
[23:14:33] <nrds> <06Prestige99> going around spamming
[23:15:34] <FromDiscord> <Phil> Okay is nrds essentially some sort of shared gateway for folks from IRC to post messages here?
[23:16:02] <FromDiscord> <Phil> so does <Prestige> mean the IRC user "Prestige" posted from an IRC client?
[23:16:26] <nrds> <06Prestige99> yep
[23:17:19] <FromDiscord> <Phil> That makes so much more sense, I was so confused as to why somebody with the matrix client would go through the effort of manually typing <Prestige> all the time
[23:26:31] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OyW
[23:27:40] <FromDiscord> <Phil> That is particularly confusing as that issue does not pop up when there's no `parseEnum` call, only when ... wait a second
[23:28:44] <FromDiscord> <Phil> That's just my god damn parseEnum bug from last week again!
[23:35:46] <FromDiscord> <Phil> Different question
[23:46:00] <FromDiscord> <Phil> I have a bunch of proc-calls distributed over a bunch of modules that, on application startup, shall get called to set up a sort of event system. â†µNow what would be the least involved way to make sure these procs get called?â†µInclude all those proc files into one core module and import that at the root module from which everything gets compiled from?
[23:47:09] <FromDiscord> <rishav> how can I denote a slice till the end of the string?â†µI want to do something like; `echo someString[5..last]`
[23:47:50] <FromDiscord> <Tetralux> In reply to @rishav "how can I denote": `5..^1`
[23:48:40] <FromDiscord> <rishav> In reply to @Tetralux "`5..^1`": Thanks!
[23:48:50] <FromDiscord> <Tetralux> In reply to @rishav "Thanks!": o7
[23:49:13] <FromDiscord> <Tetralux> (edit) "In reply to @rishav "how can I denote": `5..^1` ... " 03added "(meaning `5..end-1`)"
[23:56:45] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[23:58:03] <FromDiscord> <Phil> In reply to @Isofruit "I have a bunch": I guess to answer my own question: That would be a bad idea, if you accidentally imported the same thing twice you'd get the same proc thrown in multiple times into your HashSet
