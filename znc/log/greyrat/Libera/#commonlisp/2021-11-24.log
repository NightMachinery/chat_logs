[00:06:28] *** Quits: pve (~pve@37-136-133-125.rev.dnainternet.fi) (Quit: leaving)
[00:07:01] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 245 seconds)
[00:08:31] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[00:12:27] <scymtym> shka: you should obviously make a new one
[00:12:50] <shka> mmmmm... no
[00:13:44] *** Quits: Nselm (~Nselm@p200300d56f0dd2fd651ddbefc8f50dfa.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[00:17:34] <Nilby> Yeah, always make a new one and through it away, like the big software companies. I made the curses interface then stopped using it when I made my own curses. The explains how the Lisp landscape it littered with ancient refuse.
[00:18:55] *** pjb is now known as ogamita
[00:19:27] <Nilby> of course it happens with  non-lisp software, but non-lisp software probably just won't work after a few years
[00:20:20] *** Joins: pjb (~pjb@user/pjb)
[00:21:00] <Guest74> Nilby: you got your own terminal stuff?
[00:21:05] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[00:22:54] <lotuseater> so not only crafting spells but curses too ^^
[00:24:17] <Guest74> probably lots of curses going on when crafting those spells.
[00:24:20] <Nilby> yes, it works so poorly that I wouldn't recommend it anyone
[00:25:17] <Nilby> if sbcl weren't so fast, I couldn't ignore my bad design
[00:25:19] <Guest74> I'd like to be able to have a lisp terminal emulator so can run terminal stuff on graphics surfaces.
[00:26:23] <Guest74> I wish their hash tables were faster, can't ignore my bad design in those cases.
[00:26:59] <Xach> Guest74: mezzano has one
[00:27:38] <Nilby> Guest74: I wrote one of those too, but it's far from being done, and only handle my terminal protocol
[00:27:41] <Guest74> i'll have to take a look. Last I looked their graphic stuff is pretty tied to everything else.
[00:30:53] <Nilby> Xach: Do you know off the top of your head, if there's a quicklisp function to download a system, but not load it? If not I can look myself.
[00:41:15] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Ping timeout: 264 seconds)
[00:42:30] <Guest74> I just wish there was a library that did both parsing and printing for terminal stuff.  Noticed a lot of libraries are only one way.
[00:43:08] <Duuqnd> Nilby: ql-dist:install
[00:43:27] <Duuqnd> Although it only takes a ql-dist:system object
[00:43:44] <Nilby> Duuqnd: Thanks! I'll try it out.
[00:44:30] <Duuqnd> I used find with :key 'ql-dist:name to get the system object I wanted but it's probably not the best solution
[00:45:31] <Duuqnd> (find system-name-string (ql:system-list) :test #'string= :key #'ql-dist:name) to be precise but whatever
[00:46:13] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[00:46:34] <Nilby> I already have a whole package cache thingy, just trying to update it
[00:47:03] <Nilby> or rather system cache
[00:50:43] <random-nick> Guest74: what do you mean by running terminal stuff on graphics surfaces?
[00:51:21] <Guest74> either x11 windows, framebuffer, wayland surfaces
[00:51:52] <Guest74> hell, opengl textures if you want.
[00:52:07] <scymtym> Guest74: are you the person working on the ffi-based wayland client?
[00:52:16] <Nilby> probably something like this from 3b https://www.youtube.com/watch?v=DS_cwQJc8HY
[00:52:18] <Guest74> no, I don't touch ffi
[00:52:39] <scymtym> Guest74: i see, thanks
[00:53:29] <Guest74> although i have written some stuff for ioctl.
[00:53:50] <random-nick> Guest74: do you mean running existing TUI applications in a lisp terminal emulator?
[00:53:58] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[00:54:02] <random-nick> or writing lisp applications with a terminal-like interface
[00:54:43] <Guest74> both, if you have a library that goes both ways you can do both.
[00:55:07] <Guest74> 3b's stuff looks cool.
[00:56:47] <Guest74> oh, but it's just redirecting.
[00:57:10] <random-nick> writing lisp applications with a terminal-like interface that way would be pretty convoluted and inefficient
[00:58:03] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 264 seconds)
[00:58:07] <Guest74> what?  You're just using lisp to write a terminal program.
[00:59:43] <random-nick> yes, but if it doesn't have to actually run on a terminal (emulator) but just display it in a graphical window, it would be much simpler to just use a GUI solution
[01:02:08] <Guest74> that's not what I'm talking about at all. Being able to use lisp to write a terminal program, with things like colour, cursor control, etc.. and being able to parse those types of control sequences to be used to display terminal stuff on a raster surface.
[01:02:14] <Nilby> But it's nice to have it run both in an external terminal emulator or (without terminal escape code junk, show up in window.
[01:03:13] <random-nick> as for terminal emulators written in lisp, emacs has one written in elisp
[01:03:30] <random-nick> I don't know if it would be feasible to adapt it into common lisp
[01:04:14] <Guest74> are you talking about eshell?  because that can't do much.  Or something else?
[01:04:15] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 250 seconds)
[01:04:16] <Nilby> the elisp is a completely different architecture than you'd have to do
[01:04:58] <random-nick> I'm talking about term.el
[01:05:10] <random-nick> more specifically, it's ansi-term command
[01:05:28] <random-nick> but yes, it probably uses buffers extensively
[01:07:12] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[01:07:30] <Guest74> i just want something that will give me something like .. blah blah blah(:cursor :down)(:colour #xFFaa00)she said  from a stream.
[01:08:01] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[01:08:10] <Guest74> something easy to parse where it's simple to tell what the commands are and what's plain text.
[01:08:16] <Nilby> I do it in the same image so it just uses function calls
[01:09:29] <Guest74> yeah I don't know why I'm obsessed with modular development. It seems to be hard.
[01:10:52] <Guest74> Ideally I'd just have a TRANSLATOR that would provide arbitrary transformations from one input to another.
[01:14:14] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:14:15] <Nilby> i was working on a translator from the ansi codes to a terminal prototcol, which is a CLOS protocol, and then it can drive the lisp terminal emultor back end or the curses wrapper or other lisp only wrappers
[01:16:12] *** Joins: nature (~nature@45.32.235.173)
[01:16:47] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:17:10] <Guest74> I envision a translation system where individuals can write translations from a file/stream format to an intermediate representation and then someone else could add an output from that IR to whatever format they want.
[01:17:58] <Guest74> thought that almost depends on having a platform for sharing snippets of code that aren't complete packages/systems.
[01:19:56] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[01:20:39] *** Joins: yewscion (~yewscion@52.94.133.128)
[01:21:30] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[01:21:42] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[01:24:06] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[01:27:53] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[01:30:09] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:37:23] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[01:41:39] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[02:07:39] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 264 seconds)
[02:08:37] *** Quits: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[02:12:22] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 260 seconds)
[02:23:51] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 264 seconds)
[02:29:47] *** Joins: Oladon (~olad@98.43.81.226)
[02:38:01] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[02:38:22] *** Joins: akoana (~ah@user/akoana)
[02:43:46] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[02:44:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:46:05] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[02:47:12] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[02:47:24] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[02:47:55] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:53:12] *** Joins: igemnace (~ian@user/igemnace)
[02:55:08] *** Joins: pillton (~user@193-116-201-198.tpgi.com.au)
[02:55:18] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[02:58:05] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 256 seconds)
[03:01:57] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[03:09:27] *** Quits: gaqwas (~john@dynamic-095-114-087-063.95.114.pool.telefonica.de) (Ping timeout: 264 seconds)
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::105f) (Remote host closed the connection)
[03:17:40] *** Joins: Jing (~hedgehog@2604:a840:3::105f)
[03:22:30] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[03:26:16] *** Joins: aeth_ (~aeth@user/aeth)
[03:26:19] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[03:26:22] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[03:26:24] *** aeth_ is now known as aeth
[03:27:31] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[03:31:20] *** Joins: s-liao (~s-liao@101.86.101.64)
[03:39:51] *** Joins: phossil (~tophullyt@162.213.177.125)
[03:42:58] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 268 seconds)
[03:44:26] *** Quits: z3t0 (~z3t0@146.71.14.98) (Read error: Connection reset by peer)
[03:44:47] *** Joins: z3t0 (~z3t0@146.71.14.98)
[03:47:58] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[03:53:40] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[03:55:55] *** Quits: phossil (~tophullyt@162.213.177.125) (Ping timeout: 268 seconds)
[04:02:07] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[04:02:37] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[04:02:52] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[04:04:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[04:04:31] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Ping timeout: 250 seconds)
[04:05:40] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:06:22] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[04:09:32] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[04:15:15] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[04:20:47] *** Quits: servytor (uid525486@id-525486.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:21:57] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[04:26:57] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[04:28:57] *** Joins: nature (~nature@45.32.235.173)
[04:29:47] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[04:41:59] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[04:47:06] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[04:47:06] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 268 seconds)
[04:48:36] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:59:55] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[05:09:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:13:09] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Remote host closed the connection)
[05:13:57] *** Quits: Catie (~user@user/catie) (Quit: going home)
[05:14:10] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[05:16:25] *** Joins: nature (~nature@45.32.235.173)
[05:19:36] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[05:21:51] *** Joins: phossil (~tophullyt@162.213.177.125)
[05:24:06] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 245 seconds)
[05:41:22] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:42:51] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 245 seconds)
[05:46:30] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[05:49:07] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[05:56:57] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[05:57:21] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[05:57:35] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[05:57:36] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[05:59:08] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (Client Quit)
[06:00:10] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[06:00:58] *** Joins: dre (~dre@2001:8003:c932:c301:6392:af25:80a5:9caa)
[06:03:09] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[06:17:35] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Remote host closed the connection)
[06:18:49] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[06:28:39] *** Quits: no-output-detect (~user@024-231-140-187.res.spectrum.com) (Ping timeout: 264 seconds)
[06:35:40] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[06:40:51] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[06:47:31] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:54:02] *** Joins: Bike (~Bike@c-76-106-35-111.hsd1.md.comcast.net)
[06:54:02] *** ChanServ sets mode: +o Bike
[06:59:41] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 268 seconds)
[06:59:46] *** Joins: Catie (~user@user/catie)
[07:02:38] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:03:07] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[07:04:14] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:05:13] *** Joins: Guest7430 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[07:06:54] *** Joins: Alfr (~Alfr@user/alfr)
[07:19:29] *** Quits: Bike (~Bike@c-76-106-35-111.hsd1.md.comcast.net) (Quit: Connection closed)
[07:19:56] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 245 seconds)
[07:25:11] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[07:26:18] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:30:26] *** Joins: Bike (~Bike@c-76-106-35-111.hsd1.md.comcast.net)
[07:30:26] *** ChanServ sets mode: +o Bike
[07:30:59] <beach> Good morning everyone!
[07:33:15] <lisp123> Good morning Beach
[07:36:21] *** Joins: s-liao (~s-liao@101.86.101.64)
[07:42:13] *** Joins: Inline (~Inline@2a02:908:1252:7a80:24d7:18e7:aec6:a72d)
[07:59:42] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[08:00:46] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[08:01:03] *** Quits: Bike (~Bike@c-76-106-35-111.hsd1.md.comcast.net) (Quit: Connection closed)
[08:04:22] *** Joins: s-liao (~s-liao@101.86.101.64)
[08:06:39] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[08:17:35] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[08:20:24] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[08:22:54] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[08:26:26] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[08:27:38] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[08:34:37] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[08:39:49] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[08:42:57] *** Joins: rain3 (~rain3___@79.115.252.154)
[08:49:57] *** Quits: phossil (~tophullyt@162.213.177.125) (Quit: Leaving)
[08:50:14] *** Joins: phossil (~tophullyt@162.213.177.125)
[08:51:51] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[08:55:03] *** Quits: phossil (~tophullyt@162.213.177.125) (Ping timeout: 264 seconds)
[08:56:04] *** Quits: Catie (~user@user/catie) (Quit: "good)
[08:58:24] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[09:02:33] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:13:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:17:37] *** Joins: asarch (~asarch@2806:10ae:7:2a90:e4bd:2f97:9b68:ba28)
[09:26:11] *** Quits: asarch (~asarch@2806:10ae:7:2a90:e4bd:2f97:9b68:ba28) (Ping timeout: 245 seconds)
[09:40:11] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[09:43:22] *** Joins: no-output-detect (~user@024-231-140-187.res.spectrum.com)
[09:56:35] *** Joins: fbmnds (~fbmnds@dyndsl-037-138-129-136.ewe-ip-backbone.de)
[09:58:17] *** Quits: fbmnds (~fbmnds@dyndsl-037-138-129-136.ewe-ip-backbone.de) (Quit: Client closed)
[10:03:38] *** Joins: frgo_ (~frgo@p548a30d7.dip0.t-ipconnect.de)
[10:07:26] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[10:08:11] *** Quits: frgo_ (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[10:14:13] *** Quits: pillton (~user@193-116-201-198.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[10:18:57] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 256 seconds)
[10:27:24] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[10:30:45] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:40:22] *** Joins: gaqwas (~john@dynamic-095-118-059-001.95.118.pool.telefonica.de)
[10:43:53] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[10:44:04] *** Quits: karlosz_ (~karlosz@47.151.136.69) (Quit: karlosz_)
[10:46:48] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.3)
[10:48:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[10:48:51] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[10:50:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[10:51:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:05:25] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[11:07:44] *** Joins: pve (~pve@37-136-119-92.rev.dnainternet.fi)
[11:11:51] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 264 seconds)
[11:12:42] *** Joins: amb007 (~a_bakic@42.247.204.77.rev.sfr.net)
[11:15:24] *** Joins: VincentVega (~user@212.241.24.232)
[11:19:40] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Quit: Konversation terminated!)
[11:21:17] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[11:21:37] <VincentVega> I just thought, if we could specify the library version for asdf's :use, then adding new symbols to API wouldn't be a problem - it would only import the symbols from the specified version (if those can be accessed somehow). Because I do end up importing whole packages symbol-by-symbol anyway, like iterate, just carrying the whole thing around from project to project. Be nicer if I didn't have to.
[11:23:02] *** Joins: s-liao (~s-liao@101.86.101.64)
[11:23:06] <beach> It is a much better idea not to import at all, but to use explicit package prefixes, possibly with package-local nicknames.
[11:23:41] <beach> To a person reading the code, it is then much more obvious where each symbol comes from.
[11:23:54] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:24:00] <VincentVega> Yes, but for some ever-used things like iterate, I do use imports anyway, because it ends up being so much shorter.
[11:24:29] <VincentVega> Most libraries - not, I agree, but not all.
[11:24:44] <beach> That sounds to me like a reason not to use ITERATE.
[11:24:50] <VincentVega> : D
[11:28:09] <flip214> VincentVega: for ALEXANDRIA, I ended up with the usual ALEXANDRIA package, and then an ALEXANDRIA-1 (only the old API, like with the legacy name) and a ALEXANDRIA-2 package with more stuff.
[11:28:27] <flip214> so it's then just a matter of changing the :USE clause to get the newer functionality.
[11:28:38] *** Quits: amb007 (~a_bakic@42.247.204.77.rev.sfr.net) (Ping timeout: 260 seconds)
[11:29:03] *** Joins: amb007 (~a_bakic@71.244.204.77.rev.sfr.net)
[11:30:21] <VincentVega> flip214: that's an interesting approach, but that's ends up being up to the maintainer (if I understood you correctly), but the version control would give a guarantee without much fuss
[11:32:43] <flip214> VincentVega: well, but having multiple different versions of a software means to me that common code and data should be shared... and that ends up not so easy
[11:33:07] <flip214> with one software and multiple packages each other package can choose what to import
[11:34:05] <VincentVega> flip214: I didn't mean keeping multiple versions. It's just one version, but defsystem has a field called :version, so I meant just picking up those symbols which were relevant for that particular version.
[11:34:24] *** Joins: Nselm (~Nselm@p200300d56f0dd2fd651ddbefc8f50dfa.dip0.t-ipconnect.de)
[11:35:07] <VincentVega> This wouldn't require multiple packages, just some way to look up the specified set of exported symbols.
[11:35:46] <flip214> ah, okay
[11:36:23] *** Quits: stacksmith (~stack@ctrl-c.club) (Ping timeout: 264 seconds)
[11:36:41] *** Joins: stacksmith (~stack@ctrl-c.club)
[11:47:28] *** Quits: amb007 (~a_bakic@71.244.204.77.rev.sfr.net) (Ping timeout: 260 seconds)
[11:48:28] *** Joins: amb007 (~a_bakic@176.196.204.77.rev.sfr.net)
[11:52:27] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[11:53:50] *** Quits: dre (~dre@2001:8003:c932:c301:6392:af25:80a5:9caa) (Ping timeout: 268 seconds)
[11:55:53] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:56:14] <Nilby> The view that you should never use ‘use’ or ‘import’ seems extreme.
[12:00:26] *** Joins: nature (~nature@45.32.235.173)
[12:02:10] <beach> Luckily, very few people hold that view.
[12:02:11] *** Quits: amb007 (~a_bakic@176.196.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[12:02:56] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:04:10] *** Quits: rain3 (~rain3___@79.115.252.154) (Read error: Connection reset by peer)
[12:04:57] <hayley> (cl:defpackage #:blah (:use)) (cl:in-package #:blah) (cl:defun so-what (cl:&optional (who "me")) (cl:format cl:t "Looks okay to ~A" who))
[12:06:47] <jackdaniel> a plus benefit is that you may use finally t for time
[12:07:46] <jackdaniel> arguably most annoying symbol name conflict in cl package
[12:09:43] <Nilby> like a Malkovichian dream where everything starts with cl
[12:11:51] <jdz> VincentVega: Even if _you_ load a particular version of a system with ASDF, some other dependency may load a different version, and we're back to square 1.
[12:12:04] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[12:16:21] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[12:17:22] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[12:27:42] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[12:30:34] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[12:31:06] <VincentVega> jdz: That's not what I meant. You load all the same (latest) version of a system. However, only the symbols exported for the specified (earlier) version of that system are :used. E.g. if package (version 1.0) exports A and B, and package (version 1.1) exports C (additionally), and the package you are writing does something like (:use (#:some-system :version 1.0)), then it will only import symbols A and B, even though version of the
[12:31:07] <VincentVega> library you are loading is 1.1 and also exports C.
[12:34:17] <jdz> VincentVega: So you're suggesting adding versioning to Common Lisp packages?
[12:34:43] <lisp123> Can't you just use shadowing-import (forget the exact clause, might be :shadowing-import-from)
[12:35:22] <lisp123> It was :shadow, it doesn't work?
[12:35:52] <jdz> VincentVega: It looks you're confusing ASDF systems and packages.
[12:35:58] <VincentVega> jdz: No, to imports of :use. Systems are already versioned, and that's what's looked up I guess.
[12:36:29] <lisp123> VincentVega: Try :use ITERATATE and then shadow the symbols you want to re-define?
[12:36:37] <jdz> Packages already support your use case: (:use #:some-system-version-1.0).
[12:37:28] <jdz> The only part missing is system authors to start using versioned package names.
[12:37:38] <VincentVega> lisp123: It's not quite about redefinition. It's about the case when iterate adds a new symbol and causes a conflict in your package, which makes you manually deal with the problem. The reason why :use isn't used.
[12:37:54] <VincentVega> jdz: they do?
[12:38:03] <VincentVega> jdz: cool, I didn't know that.
[12:38:29] <lisp123> VincentVega: Oh okay. One alternative is to programatically make al ist of all the symbols and then shadow everything in ITERATE that is not there
[12:38:36] <jdz> Looks like we're talking past each other.
[12:38:58] <lisp123> so (:shadow (any-new-symbols "ITERATE" *pre-existing-list*)
[12:39:09] <jdz> As cute as Iterate is, it introduces more problems than it solves.
[12:40:57] <lisp123> VincentVega: You can create a "package-snapshot" file where you store all the symbols at a particular snapshot, and then do a lookup against that in all your projects
[12:41:59] <VincentVega> jdz: this doesn't seems to work (defpackage #:my-package (:use #:iterate-1.5.2)), what am I missing?
[12:42:11] <VincentVega> jdz: what problems does it introduce?
[12:42:32] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[12:42:58] <jdz> VincentVega: How does it not seem to work exactly?  Is there a package named "ITERATE-1.5.2"?
[12:42:59] <VincentVega> lisp123: A lookup sounds like an interesting solution, but you would have to carry that snapshot if you were to publish some package as a seperate entity, right?
[12:44:05] <VincentVega> jdz: You said "(:use #:some-system-version-1.0)", so I am just trying to understand what that means exactly.
[12:44:29] <jdz> It means that package authors have to start using versioned packages.
[12:44:30] <lisp123> I usually have a large personal utilities file in all my projects, which I put inside a :depends-on within an ASDF. If you are doing the same, just create a file called snapshot.lisp and have it part of your utils system definition
[12:44:51] *** Joins: prxq (~quassel@x4db6f614.dyn.telefonica.de)
[12:44:53] <pve> VincentVega: It's just the name of a package that happens to end with "1.0"
[12:45:16] <VincentVega> pve: I see.
[12:45:19] <lisp123> If you are not already doing it, IMHO make a utils.asdf for your utils.lisp or equivalent
[12:45:20] <jdz> Versioned systems without versioned packages don't really solve any problems.
[12:45:52] <jdz> Maybe even introduce some.
[12:45:55] <VincentVega> lisp123: I gotcha. That sounds workable, yeah. Not ideal, but workable.
[12:46:01] <pve> VincentVega: so somebody has to make that package, like the author of some-system
[12:46:42] <VincentVega> jdz: Why, I don't understand why you would version a package if you are already versioning a system, of which part that package is.
[12:47:12] <VincentVega> Just assume package version = system version, no?
[12:47:15] <jdz> VincentVega: How do you use a particular _system_ version, then?
[12:47:48] <jdz> And if there is only a single _package_ name, then loading two different versions of the same system will not work.
[12:48:49] <lisp123> VincentVega: The initial setup is a pain (if you struggle, let me know, I'll write something for you), but afterwards, as long as you are importing your utils file in every project, you just need to change your :shadow in your defpackage, so very straightforward
[12:49:55] <VincentVega> lisp123: Thanks, man : ) I already have a util library, but some libraries are so small and self-sufficient, that making them rely on my util packack isn't so authetically pleasing, especially that my util library also loads a bunch of stuff.
[12:50:38] <lisp123> Ah gotcha. That makes sense
[12:52:03] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 264 seconds)
[12:53:06] <VincentVega> jdz: But, bruh, loading two different versions of the same system is not what I had in mind. It maybe anything, it's only the exports which are looked up differently. Could you please explain what I missed here, if I did, step by step?
[12:54:36] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[12:55:01] <VincentVega> * looked up differently according to the system version
[12:55:52] <jdz> VincentVega: Maybe _you_ do not load different versions, but some dependency might.
[12:56:49] *** Joins: s-liao (~s-liao@101.86.101.64)
[12:58:06] <beach> And this is why we need first-class global environments.
[12:59:15] <VincentVega> jdz: I don't see how that's a problem. I don't specify which system version I want to _load_, only what exports I want to pull (from such and such version, which doesn't imply loading it, but rather looking it up somewhere. Where? Dunno, seems like a job at the level of ql).
[12:59:29] <jdz> VincentVega: So if you stick to a particular version of a _system_ (e.g., ITERATE, version 1.5.2), and that system only has an "ITERATE" package, and some library you depend on also uses Iterate _system_, but without specifying version number (which defaults to newest; or maybe it also specifies a version, but different from _your_ version), then that other version of the _system_ will have the same _package_ name: "ITERATE", but with
[12:59:29] <jdz> different exports.  So, trouble.
[13:00:05] <lisp123> beach: It would be one of the most significant improvements in CL. Wish it was there to begin with :(
[13:01:10] <lisp123> VincentVega: I thought of a better way - write some elisp that handles the calculation and then inserts the relevant symbols to shadow from (I assume you are using Emacs). You would need to use both Elisp & CL (via swank/slime) to do it
[13:01:21] <beach> There is no great point in wishing there were different from what they are.  But we could figure out a strategy for improving things.
[13:01:26] <VincentVega> jdz: I also _load_ the latest version of iterate, even though I specify that I want the exports of version 1.5.2.
[13:01:45] <VincentVega> jdz: or whatever the loaded version of iterate there is
[13:02:31] <VincentVega> lisp123: i will that right to my emacs checklist
[13:02:38] <VincentVega> * add
[13:04:22] <jdz> VincentVega: Exports are part of package, version is part of system.  If packages are not versioned, package exports will depend on what order two different versions of systems are loaded.
[13:05:29] <jdz> VincentVega: So in your case it seems the only way is to use a manually curated list of imports.
[13:05:41] <lisp123> beach: Will a "portability layer" similar to Closer-MOP need to be developed to export this feature from SICL to other implementations?
[13:05:57] <VincentVega> jdz: It doesn't matter what package is loaded / active and to what system it belong. All that matters is the list of the actual symbols that I want to import.
[13:06:12] <hayley> The problem is that other implementations would have to implement first class global environments too.
[13:06:33] <jdz> VincentVega: Yes, so it is about imports, not exports.
[13:06:56] * hayley hides
[13:06:57] <hayley> Hm, there's a Common Lisp implemented on Prolog, and Lispkit in Squeak. Perhaps you'd consider implementing CL in Newspeak?
[13:07:09] <jdz> VincentVega: So what is the problem, again?
[13:07:12] <VincentVega> jdz: sorry if I messed up my wording that could've made that confusing
[13:07:31] <beach> lisp123: What hayley says.  It is not generally possible to emulate this feature in implementations that don't have it.
[13:07:57] *** Quits: kuao (uid504326@id-504326.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[13:08:20] <beach> lisp123: You could go with the AST evaluator of SICL, but you then take a significant performance penalty.  But perhaps that penalty could be minimized.
[13:10:17] <VincentVega> jdz: The problem is that you can't use :use for the same reasons as always - packages of newer systems might start exporting symbols that might cause a conflict within your package. So you just say, well, import whatever was exported in system of _that_ particular version. That doesn't require loading the system of that version, only looking up the exports that a particular package had and using those exclusively.
[13:11:26] <jdz> VincentVega: Yes, and this could be made more convenient if systems had versioned packages.
[13:12:58] <jdz> Or, as beach said, using explicit package qualifiers, which does not really work in case of Iterate.
[13:13:29] <VincentVega> jdz: Maybe? But I don't see how you would update the version of a package, but not the version of a system, though. AFAIS system version would be enough.
[13:13:58] <jdz> Different set of exports are introduced in different versions of the system, right?
[13:14:23] <VincentVega> I am pretty sure that's how it is.
[13:14:27] <lisp123> beach & hayley: Thanks understood. What if there was 1 global environment that had a global variable which was an a-list of other global environments and their special variables and a lookup was done against that at compile-time?
[13:15:19] <lisp123> And to the extent possible, one could could transcribe environment:symbol to environment-symbol
[13:15:29] <Nilby> Old lisp machines had a various things like global environments, as well as hierarchical packages, I'm pretty sure you can simulate f-c-g-e with the normal CL package system (and maybe some symbol macros).
[13:16:24] <VincentVega> jdz: One problem with that though is the maintainer might add a new export, but forget to bump the version. So, maybe, don't specify a system version, but rather a date/time and let the system figure out what exports were relevant to that date.
[13:16:35] <jdz> So, if the set of exports system provided package changes, a new package is defined within the system, with the new set of exports.  So, in case of Iterate, package "ITERATE-1.5.2" would have one set of exports, and package "ITERATE-1.6.0" would have a different set.  And the latest version of the system might have a package nickname "ITERATE" assigned to the latest package.  So if you previously had (defsystem ... (:use
[13:16:35] <jdz> #:iterate-1.5.2) ...), everything would still work once Iterate-1.6.0 system is released.
[13:16:42] * hayley presses X to doubt
[13:17:25] <hayley> lisp123: It would suffice to just lookup against a constant environment object. I _think_ the AST evaluator in SICL does what you describe, more or less.
[13:17:45] <hayley> ...except that, again, lookup is done against the global environment object, and no alist of anything is necessary.
[13:17:56] <beach> lisp123: That's basically what we do.  But consider a reference such as (F ...) in code to be compiled.  Currently, in most implementations, when you compile this code, lookup is going to be through the symbol object for F.
[13:18:44] <lisp123> If the other implementations repalce their READER with yours (or a modified version), would that work?
[13:18:58] <beach> lisp123: So what we do is we basically modify such calls to (funcall (car (load-time-value (find-function-cell 'F))) ...) and then compile that instead.
[13:19:14] <beach> I don't think renaming is a good idea.
[13:19:45] <lisp123> Got it, thanks
[13:20:13] <beach> But since the native compiler may no longer be able to optimize such code, there is a performance penalty.
[13:21:15] <VincentVega> jdz: Sounds reasonable, as long as the programmer doesn't have to do bumps himself. Make it all rely on dates, or some sort of autogenerared tags maybe?
[13:22:45] <lisp123> beach: So the approach just noted does sound much better. Renaming for other non-SICL compilers may be a way to let them continue to optimize the code?
[13:23:33] <beach> lisp123: I think you are going to get into all kinds of trouble with that approach.
[13:23:56] <flip214> jackdaniel: you can easily use one of ţťƫțᵗṫṭṯṱẗₜｔ for time... the last one being FULLWIDTH LATIN SMALL LETTER T
[13:23:56] <jdz> VincentVega: Then there would have to be a package for each date?
[13:24:25] <lisp123> Got it (yeah wasn't even sure if its possible when coming to non-trivial things like CLOS and packages)
[13:25:15] <jdz> VincentVega: System build scripts may have code to check if package exports have changed, and not allow to create a release without creating a new package.  But in the end it is the responsibility of the system author to decide what packages the system defines.
[13:25:51] <flip214> jdz: ALEXANDRIA-1 vs. ALEXANDRIA-2 uses that already.... the latter one might still be expanded.
[13:26:23] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[13:26:27] <jdz> flip214: As long as the documentation says so.
[13:26:31] <VincentVega> jdz: Not necessarily, just choose the latest system up to that date. Or rely on the system's version indeed, just add a modifier when the programmer forgets to bump it. Like iterate-1.5.2/1 or smth. It could be reasoned through.
[13:26:37] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:26:44] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[13:27:24] <lisp123> It would be good to have the ability to specify versioning within ASDF tbh
[13:28:06] <VincentVega> jdz: dates are better because defsystem doesn't require :version to be specified, so that's to be considered as well for the existing packages
[13:28:09] <jdz> lisp123: What I'm trying to argue is that ASDF versioning does not work without the cooperation of system authors (and versioning packages defined within the systems).
[13:29:24] <lisp123> jdz: Yes, I agree. But if the feature was there, I would use it if I ever wrote decent packages. Perhaps it there and nobody uses it (sorry for bringing it up in that case)
[13:30:29] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[13:30:52] <jdz> Together with package local nicknames, versioned packages would (as soon as authors start making them) work wonderfully, in my opinion.
[13:31:02] *** Quits: Nselm (~Nselm@p200300d56f0dd2fd651ddbefc8f50dfa.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[13:32:13] <pve> VincentVega: it may have already been mentioned, but you're free to create the package "vincent-vega-iterate" yourself that exports exactly what you need.
[13:32:18] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[13:32:26] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[13:32:29] <jdz> Versioned packages is also the only way to use different _incompatible_ versions of the same system.
[13:32:54] <jdz> Well, not necessarily versioned, but differently named.
[13:33:08] *** Joins: s-liao (~s-liao@101.86.101.64)
[13:33:20] <VincentVega> pve: yeah, but that's kind of a pain and requires typing and stuff. we are here for the cool or what?
[13:33:27] <jdz> Besides first-class global environments.
[13:34:49] <lisp123> jdz: Got it, and agree now (took me a while to get my head around)
[13:35:28] <pve> VincentVega: nah, just print all external symbols in the repl and copy them into the defpackage form, and edit as needed.. not a lot of typing really
[13:38:46] <VincentVega> pve: sure, I already have an item waiting on my emacs todo list, #207 or smth
[13:38:49] <lisp123> Nilby: Do you recall how the Lisp Machines of Lore did it?
[13:40:48] <VincentVega> jdz: but how are you to load different versions of the same system since you can load just one system? that would require first class environments to begin with
[13:41:05] <lisp123> VincentVega: You can load 100s of systems :)
[13:41:11] <VincentVega> * of the same designation
[13:41:18] <lisp123> As long as they have different package names
[13:41:53] <Nilby> in one implemtation there was a "global" package and hierarchical packages, in another there were different "users", but that shared the system packages
[13:42:08] <VincentVega> lisp123: ah, yees
[13:42:30] <jdz> VincentVega: In ASDF system dependencies can specify version numbers.
[13:42:48] <VincentVega> jdz: I see
[13:42:51] <lisp123> jdz: Can I specify them as well during a :depends-on?
[13:42:53] <Nilby> before CL, the way packaging worked seemed to be constantly chaning
[13:43:01] <Nilby> changing
[13:43:02] <jdz> lisp123: That's exactly where you specify them.
[13:43:32] <pve> VincentVega: M-x slime-eval-print-last-expression is an easy way to get started on that.
[13:43:44] <lisp123> jdz: well I didn't know :-/ That's very useful - do you know how it is done (otherwise I will read through the ASDF manual)
[13:44:15] <lisp123> Nilby: I see - thanks for that color!
[13:44:44] <jdz> lisp123: https://www.common-lisp.net/project/asdf/asdf.html#The-defsystem-grammar, dependency-def.
[13:44:58] <jdz> Oh, that can be linked: https://www.common-lisp.net/project/asdf/asdf.html#rule_002ddependency_002ddef
[13:45:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 268 seconds)
[13:45:42] <Nilby> A late enought version of the "CHINE UAL", and a late enough version of the Genera documentation might explain them.
[13:46:09] <lisp123> jdz: Thanks!
[13:46:36] <lisp123> Nilby: Thanks, will add to my read list :)
[13:46:44] <jdz> lisp123: But again, there's not much point in asking for particular versions, if two different versions define the same packages (hence loading both systems in the same image will overwrite each other).
[13:46:54] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[13:49:16] <lisp123> VincentVega: while we are it ("Build Your Own Lisp because the IDE doesn't do what you need it to"), you can use this to get all the exported symbols in a package. Then you just need a set-difference form somewhere to compare two sets of symbol lists, (defun all-external-symbols (package) (let ((all-external-symbols nil)) (do-external-symbols (s (find-package package)) (push s all-external-symbols)) all-external-symbols))
[13:49:51] <lisp123> jdz: Thanks, but for me its still useful because I will never use two different versions of the same system
[13:49:59] <jdz> lisp123: How do you know?
[13:51:24] <jdz> lisp123: Well, you can, if you specify versions for all of your dependencies, and check that those dependencies (recursively) do not depend on different versions of _any_ of the systems loaded.
[13:51:28] <lisp123> jdz: I try to minimise dependencies as it is. CL-PPCRE, CMU-INFIX and soon to be MCCLIM will hopefully be the extent of what I need. But I guess if one of your dependencies uses the latest version of a package, then you are in trouble
[13:51:41] <jdz> Right.
[13:52:35] *** Joins: s-liao (~s-liao@101.86.101.64)
[13:53:54] <lisp123> Oh and PARACHUTE and IBCL + STEPPER. I guess the list starts to get large eventually
[13:58:48] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[14:01:44] <VincentVega> lisp123: I see, but why limit yourself to a few libraries? I often time notice folks don't like extra dependencies, but better use someone elses code than your own the way I see it.
[14:03:13] <hayley> At least it's not npm(tm)
[14:07:20] <lisp123> VincentVega: I just wrote my own unit test framework, so I'm not a good example tbh. A week's worth of work without any notable improvement apart from doing it myself. Unfortunately quite a few lisp programmers have this mindset - I think the language encourages it implicitly :-/
[14:08:42] <lisp123> hayley: When the Lisp takeover is complete, QuickLisp will become the new NPM
[14:09:13] <lisp123> But the good thing about QL is that its somewhat tested each month
[14:10:03] <jdz> VincentVega: Supply chain attacks are real.  Common Lisp community is small, but it's only a matter of time till something bad happens.
[14:10:20] <Nilby> (ql:quickload :left-pad)
[14:11:30] <jdz> VincentVega: For instance, all of this is not exclusive to Rust, and since CL can also run code during compilation, most of this applies to CL https://kerkour.com/rust-crate-backdoor/.
[14:13:37] <hayley> It's 2021, can we have object capabilities already?
[14:13:56] <jdz> Almost 2022!
[14:14:25] <hayley> Even worse!
[14:14:46] <flip214> jdz: well, one advantage of CL is that there are much fewer LOC, and so there's less to check.
[14:15:25] <flip214> and since a lot of (older) libraries don't change that often, the diff for a newer version is very small, typically...
[14:15:26] <jdz> flip214: I agree.  Now let's count the people who actually _do_ check?
[14:15:28] <Nilby> but for real, a bunch of people mildly audit new quicklisp packages
[14:15:51] * hayley continues grumbling about ambient authority.
[14:16:07] <jdz> I would look at the diffs if it was easy enough to do, though.
[14:16:10] <flip214> jdz: yeah, of course. perhaps there should be something done by the CL foundation??
[14:16:30] <flip214> jdz: well, if you get your QL stuff directly from a git repo, it's easy ;)
[14:16:55] <jdz> I'd volunteer my time to review changes to QL dist updates.
[14:17:02] <lisp123> jdz: I don't use quickload (just at the start to get the files), and then I skim through most of the code
[14:17:30] <lisp123> (and recommend others to do the same / similar, or operate in a sandbox evnironment)
[14:17:54] <hayley> I couldn't be bothered to audit every library that I transitively use. Hence, I'd rather just make it impossible for libraries to do Bad Things.
[14:18:29] <jdz> hayley: But how?
[14:19:14] <hayley> Don't give libraries unnecessary capabilites. How many actually have to touch the filesystem? How many actually have to use networking?
[14:19:59] <jdz> Heh, just this morning I was thinking of running my everyday development SBCL in a sandbox.
[14:20:24] <jdz> With unexpected events logged.
[14:20:57] <Nilby> But I have to put some things on a quicklisp excluded list.
[14:21:11] *** Quits: no-output-detect (~user@024-231-140-187.res.spectrum.com) (Ping timeout: 245 seconds)
[14:21:48] <hayley> I guess logging is nice after things go wrong, but they aren't a security mechanism; they don't stop bad things from happening.
[14:21:57] <hayley> s/they aren't/logging isn't/
[14:23:49] <hayley> (Never got the cyber-security class. Between showing the class how to use single DES, that flow analysis doesn't exist, and putting time into fancy logging rather than even a hand-wavy proof that any code is secure...)
[14:24:00] <Nilby> But I've also loaded everything in QL in a sandbox, so I've seen most of what can happen at least on loading. Actully trying to use something is whole different story.
[14:24:09] <jdz> Well, by logging I mean disabling, and logging attempts to do the bad thing.
[14:24:18] <hayley> Oh, okay.
[14:26:31] <hayley> (FWIW, it was only worse that the semester before was solely teaching students how to write SQL injections. "Don't write your database code like this." "But that's harder than using prepared statements, why would you write it like that?" "It's more common, that's just how it is." "Cause you teach students that?" "..." I'll stop complaining.)
[14:26:52] <jdz> Ouch.
[14:28:48] <Nilby> sql injections & xss are like 90% of worldwide security issue, very few people can do actually hard hacks
[14:28:56] *** Joins: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de)
[14:31:24] <flip214> jdz: hayley: you can use (sb-perf:write-perfmap) to export your address/symbol map, and then use BPF to filter which call chains may use which syscalls...
[14:31:42] <flip214> filter and/or log, that is
[14:32:11] <flip214> so the next thing to worry about is a kind of RET-in-CL-based attach that fakes a callstack ;)
[14:34:03] <jdz> flip214: That's probably for production deployment.  For the first cut it would be enough for me limit the process to a single directory for file access, and remove all internet access (probably with some whitelisting), and know if those constraints are tried to be violated.
[14:34:06] <Nilby> Just don't make CL popular or any easier to use and we'll be safe.
[14:34:40] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[14:35:07] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[14:35:25] <hayley> Capabilities are literally right there.
[14:35:34] <jdz> Should be easy enough to do by starting a SWANK server in a sandbox, but that means I myself must do stuff.
[14:35:57] <jdz> hayley: I know, that's part of the problem.
[14:36:16] <hayley> I can understand that they are non-trivial to implement (as you want first class global environments, if you want to preserve CL semantics), but hampering oneself to avoid the problem is stupid.
[14:37:48] <Nilby> But for capabilities to be useful first you have to bloack off everything fun in CL.
[14:38:24] <Nilby> Of course another thing my precious one ring of *read-intern* can do.
[14:39:04] <hayley> Not even close. You just need to make sure untrusted code can't "jump" to environments with capabilities, which is not hard.
[14:43:30] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[14:46:45] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:47:27] *** Joins: amb007 (~a_bakic@144.196.204.77.rev.sfr.net)
[14:48:31] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:52:40] <Nilby> I'm pretty sure I shouldn't let untrusted code run. I'd like to prevent dangerous code from being compiled.
[14:54:00] <hayley> Good luck with that.
[14:55:43] <flip214> jdz: Nilby: blocking off via CL sounds less secure than using the BPF kernel facilities. But of course, then you're restricted to Linux.
[14:56:48] <flip214> I wrote a short white-paper once that describes that (unexpected) ENOENT should make a process (or the whole container) freeze immediately (via SIGSTOP, for example), so that it can be analyzed
[14:56:49] *** Quits: amb007 (~a_bakic@144.196.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[14:57:18] <flip214> or do a full container process-dump to disk or so
[14:57:20] * hayley uploaded an image: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/RjGZVGZRHdACaOKBuqwJKEsi/bruhcha.jpg >
[14:57:24] *** Joins: amb007 (~a_bakic@144.196.204.77.rev.sfr.net)
[15:00:07] *** Quits: amb007 (~a_bakic@144.196.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:00:24] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:03:23] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:05:57] <Nilby> https://www.graplsecurity.com/post/kernel-pwning-with-ebpf-a-love-story
[15:06:06] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:06:46] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:08:41] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:09:23] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:21:25] <flip214> Nilby: well, if it's in the kernel (and so available for an attacker) anyway, you can just as well use it for your purposes also.
[15:21:49] <flip214> as long as it needs uid 0 and your CL process is less-priviledged...
[15:21:56] <flip214> but there will always be bugs, right
[15:23:25] <Nilby> At this point I don't consider anything close to arbitrary machine code can be secure.
[15:23:55] <Nilby> Too bad nothing useful is secure, since I imagine a secure lisp compiler proof of concept using something the simplicity like brainfuck or similar as a target, even with just input and output bytes, unfortunately if the i/o is in a terminal, I already know a few escape hatches.
[15:24:10] <flip214> well, even javascript was used to exfiltrate data (spectre etc.)
[15:25:49] *** Joins: s-liao (~s-liao@101.86.101.64)
[15:26:46] <Nilby> and even with the kernel mitigations turned on, 1 byte echoed to a "file", can turn them off.
[15:28:28] *** Joins: heisig (~heisig@p508b527e.dip0.t-ipconnect.de)
[15:29:59] <Nilby> But I've actually been thinking about a cffi interface to EBPF, Unfortunately every time I just think a technique like Varjo for shaders.
[15:34:02] *** Joins: sixtyfour (~user@2405:201:6:a099:5b10:d7ae:3c05:33e)
[15:34:36] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[15:35:03] *** Quits: sixtyfour (~user@2405:201:6:a099:5b10:d7ae:3c05:33e) (Remote host closed the connection)
[15:40:16] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:40:55] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:42:57] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:45:46] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 260 seconds)
[15:46:06] *** Joins: notzmv (~zmv@user/notzmv)
[15:49:16] <hayley> Does FFI count as ambient authority? If so, it would be somewhat ironic.
[15:49:32] *** Quits: hhdave_ (~hhdave@cpc95050-newt40-2-0-cust471.19-3.cable.virginm.net) (Ping timeout: 240 seconds)
[15:57:36] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[16:04:13] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[16:09:58] *** Quits: heisig (~heisig@p508b527e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:14:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:25:08] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[16:52:58] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[16:53:33] *** Joins: aartaka (~aartaka@5.1.53.225)
[17:00:50] *** Quits: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de) (Quit: Client closed)
[17:17:57] *** Joins: random-nick (~random-ni@87.116.180.220)
[17:19:39] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 264 seconds)
[17:19:54] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:28:31] *** Joins: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de)
[17:35:19] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[17:43:52] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[17:44:30] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[17:46:59] *** Joins: igemnace (~ian@user/igemnace)
[17:55:31] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[17:59:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:06:19] *** Joins: kuao (uid504326@id-504326.helmsley.irccloud.com)
[18:15:18] *** Joins: yewscion (~yewscion@52.94.133.129)
[18:18:19] *** Joins: Bike (~Bike@c-76-106-35-111.hsd1.md.comcast.net)
[18:18:19] *** ChanServ sets mode: +o Bike
[18:20:37] *** Quits: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de) (Quit: Client closed)
[18:21:01] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[18:26:44] <etimmons> jdz lisp123 VincentVega: I'm sad I missed the versioning discussion! A quick clarification: specifying a version in an ASDF dependency does not request that specific version. It requests a minimum version of that dep.
[18:27:39] <etimmons> And request may still be a string word there since ASDF does not search for a dep that satisfies the version constraint
[18:27:45] <etimmons> s/string/strong/
[18:28:25] <jdz> etimmons: Thanks for clarification!
[18:28:34] <etimmons> ASDF only evaluates those constraints. So if the first instance of a system it finds does not meet the version constraints, it signals an error
[18:30:34] <etimmons> There is actually an ongoing discussion about more expressive version strings and version constraints for ASDF 3.4. If you're interested, see asdf-devel or MR !169 on ASDF's Gitlab
[18:30:38] <jdz> etimmons: So, as I understand it, there is currently no way to load two different versions of a system with ASDF?
[18:32:02] <jdz> That kind of makes sens in the absence of first class global environments.
[18:33:22] <etimmons> jdz: Correct, depending on exactly what you mean. You can load v1 of foo, then mess with ASDF's registry so that it finds v2 of foo and then load foo again. In ASDF's mind, only one version of a system is ever loaded (the last one loaded).
[18:33:26] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[18:34:05] <etimmons> But the global effects of loading v1 are still around, unless v2 cleans them up. As far as I know, UIOP/ASDF are the only libraries that go through great pains to clean up after previous versions of themselves because it's quite painful
[18:36:00] <Guest7430> I find it strange that version and feature have reversed semantics.
[18:37:05] <etimmons> Guest7430: Not sure what you mean
[18:37:57] <Guest7430> :feature feature-expression dependency-def  :version simple-component-name version-specifier
[18:38:12] <etimmons> Oh, reversed syntax you mean ?
[18:38:39] <etimmons> I'm not sure why that is
[18:38:58] *** Quits: Inline (~Inline@2a02:908:1252:7a80:24d7:18e7:aec6:a72d) (Remote host closed the connection)
[18:39:19] *** Joins: Inline (~Inline@2a02:908:1252:7a80:7363:e82d:2c27:f888)
[18:39:22] <Guest7430> good thing is that since almost no one uses it, and it doesn't really work as people expect, it should be open to being changed.
[18:39:53] <lisp123> etimmons: Thanks!
[18:39:58] <Guest7430> I definitely prefer the :feature feature object.
[18:40:58] <lisp123> I will read up on the ongoing discussion on Gitlab. Its good that there is a minimum version requirement
[18:40:58] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7363:e82d:2c27:f888) (Remote host closed the connection)
[18:41:19] *** Joins: Inline (~Inline@2a02:908:1252:7a80:3233:dedc:9ad8:36c3)
[18:41:21] <etimmons> That's quite a bold statement. I know of systems that use both. There's about zero chance that the order of arguments in :version will be changed.
[18:41:56] <Guest7430> well, it SHOULD be changed to at least :minimum-version if that's what it is.
[18:42:10] <Guest7430> that's just bad naming.
[18:44:01] <etimmons> lisp123: Great! You should mostly look at the texinfo changes at the moment. The other changes are a bit old and will be made to match what the texinfo says it should be.
[18:44:39] <etimmons> Guest7430: For ASDF 3.4, we want to extend the language of :version so you can provide more than a minimum version
[18:44:42] <Guest7430> I wonder why asdf complains about leading zeros in version numbers.
[18:44:51] <lisp123> etimmons: Thanks! Will do
[18:45:22] <Guest7430> minimum version and version are two separate things, most likely used for two separate reasons.  They probably shouldn't be conflated.
[18:45:25] <etimmons> Although, we won't recommend that most people use that extended grammar!
[18:46:40] <etimmons> Ideally, providing a minimum version is all that folks should need to do. Because developers should always maintain backward compatibility :)
[18:46:51] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[18:47:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:3233:dedc:9ad8:36c3) (Ping timeout: 268 seconds)
[18:47:15] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[18:47:45] <etimmons> But this is the real world, so a big motivation for adding more than a minimum version is so that you can state known incompatibilities and ASDF can provide useful errors when that happens
[18:48:39] <etimmons> Guest7430: I could see adding another keyword in parallel, but :version and its syntax are here to stay for a while
[18:48:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:51:31] <Guest7430> why is "0.03" and invalid version specifier?
[18:51:38] <Guest7430> s/and/an
[18:53:51] <etimmons> Guest7430: I don't think that it's invalid, per se. ASDF just parses it the same as "0.3" And may yell at you for using a non-canonical way of writing it
[18:54:27] <jackdaniel> it is good that if it yells, I'd be surprised if it had considered 0.03 and 0.3 as the same version :)
[18:54:35] <Guest7430> WARNING: Invalid :version specifier "0.03" for component "cl-svg"
[18:54:50] <Guest7430> using NIL instead
[18:56:22] <etimmons> I stand corrected. The manual should probably be updated then. Because it currently reads as if that's valid and a warning may be issued
[18:57:09] <Guest7430> It seems weird to warn on leading zeros as well.
[18:57:50] <etimmons> ASDF's current version scheme treats everything between dots as integers, because most people agree that 0.9 comes before 0.10.
[18:57:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:59:01] <etimmons> So the theory behind the warning is that 0.03 is parsed the same as 0.3 and we should make sure the user realizes that. Well, that's what I would assume the theory is if it didn't decide to just treat it as invalid
[19:00:20] <etimmons> But if you really want 0.03 to be distinct from 0.3, ASDF 3.4 should also let you do that by providing a custom version parser and orderer
[19:00:39] <Guest7430> huh, I thought they meant the first 0 before the period by that warning.
[19:01:09] <etimmons> oh, no! a 0 by itself is fine
[19:01:28] <etimmons> (it's not "leading" as it has no other numbers following it)
[19:02:20] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4ac:ef70:daee:408f)
[19:02:41] <Guest7430> leading zeros can be before the decimal point, which isn't a decimal point in this case, at least from what you said.
[19:04:41] <etimmons> It is not a decimal point. You can have any number of period characters. Everything between each period is parsed as a non-negative integer.
[19:06:02] <etimmons> https://common-lisp.net/project/asdf/asdf.html#Version-specifiers-1
[19:08:26] <Guest7430> welp, now I know how to use a feature that isn't useful for me since it's not an actual version :)
[19:15:43] *** Joins: Josh_2 (~user@37.25.47.130)
[19:18:17] <Josh_2> 'ello 'ello
[19:20:22] <jackdaniel> versioning usually goes without floats and dots indeed separate integers, see i.e semantic versioning or how other software is versioned
[19:23:01] <jackdaniel> s/floats/ratios/ for all practical purposes
[19:30:08] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4ac:ef70:daee:408f) (Remote host closed the connection)
[19:30:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:17ed:d02:7ca7:bad1)
[19:33:35] <Josh_2> give it cool names
[19:35:24] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:37:41] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[19:44:44] <lisp123> Hey, quick question. Does anybody know how to "request" data from Hunchentoot (e.g. receiving JSON from a third party API)?
[19:45:06] <Josh_2> Use dex or drakma
[19:45:25] <lisp123> Josh_2: Hunchentoot :) Unless not possible by HT
[19:45:39] <Josh_2> Well its a HTTP server
[19:45:57] <Josh_2> if you want to make HTTP requests then use Dex (with the use-connection-pool key as nil) or drakma
[19:46:12] <lisp123> So HT can't do it?
[19:46:31] <Josh_2> Not that I'm aware of
[19:47:07] <lisp123> Josh_2: Thanks! That will save me an hour of searching. Seems strange it doesn't have it but I'm no expert on web technologies
[19:47:13] *** Quits: Inline (~Inline@2a02:908:1252:7a80:17ed:d02:7ca7:bad1) (Quit: Leaving)
[19:47:35] <Josh_2> Well the author of Hunchentoot also wrote Drakma
[19:47:54] <lisp123> I just saw :) I'm a lot happier now haha. Ediware is premium stuff ;)
[19:47:59] <jackdaniel> and both have cool names that relate to each other
[19:48:20] <Josh_2> There is Dexador, but you have to use to :use-connection-pool nil or you will occasionally get odd errors
[19:48:27] <jackdaniel> I have a clim application (not published) for managing my hunchentoot acceptors and I've called it Durk :-)
[19:48:28] <etimmons> Josh_2: 'tis sad that Dexador's connection pool is badly broken.
[19:49:15] <etimmons> jackdaniel: nice!
[19:49:43] <Josh_2> I've started using Ningle again
[19:50:57] <Josh_2> Gotta go fast like sanic
[19:51:58] <Josh_2> Its always a wild ride reading through Fukamachiware source code, could really do with heavy use of inlining so that the mammoth functions can be broken up
[19:52:20] <etimmons> That reminds me... I should bug the schannel author about its stability/why it's not on QL.
[19:52:41] <etimmons> The only reason I use Dexador is on Windows.
[19:53:20] <etimmons> If Drakma's Windows story could be improved by using schannel instead of cl+ssl there, it would make my life a lot easier
[19:53:28] *** Joins: cage (~cage@dynamic-adsl-94-34-16-50.clienti.tiscali.it)
[19:54:22] <Josh_2> What is schannel?
[19:54:29] <jackdaniel> https://imgur.com/CI91WXG.png (regarding durk)
[19:54:36] <etimmons> https://github.com/fjames86/schannel
[19:54:53] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:55:43] <etimmons> At a high-level, it's kind of equivalent to cl+ssl, but uses Windows provided .dlls
[19:56:00] <Josh_2> Nice
[19:56:06] <Josh_2> I wonder if a wrapper over the two could be written
[19:56:37] <jackdaniel> trivial(-haha)-ssl
[19:56:43] <Josh_2> xD
[19:57:30] <Josh_2> I wish all this stuff was in a single library honestly
[19:57:33] <Josh_2> like Ironclad
[19:58:11] <etimmons> That's the "kind of" part. I think cl+ssl provides *a lot* more than schannel. But it does look fairly easy to use if all you want is a TLS enabled socket.
[19:58:18] <jackdaniel> I'm waiting for a sane crypto standard for masses (without corpofeatures)
[20:00:07] <Josh_2> ironclad.ssl :(
[20:00:15] <jackdaniel> https://csrc.nist.gov/Projects/Lightweight-Cryptography ftr
[20:01:43] <Josh_2> jackdaniel: on name alone i'm going with PHOTON-Beetle and TinyJAMBU
[20:02:18] <jackdaniel> Elephant Delirium for me :)
[20:05:43] *** Joins: Oladon (~olad@98.43.81.226)
[20:08:30] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[20:08:35] <lisp123> Any libraries to convert JSON to a CLOS object?
[20:08:48] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[20:08:58] <jackdaniel> I think that yason may be specialized for various encoders and decoders
[20:09:04] <jackdaniel> but I may remember wr ong
[20:09:17] <Josh_2> lisp123: https://common-lisp.net/project/cl-json/cl-json.html#CLOS-DECODER
[20:09:25] <lisp123> jackdaniel: Thanks. I used yason well in the past, I will revisit
[20:09:26] <jackdaniel> alternatively oyou could write a cl-store backend for json ,)
[20:09:35] <lisp123> Josh_2: Thanks
[20:09:59] <lisp123> jackdaniel: Haha wouldn't be suprised if I end up re creating the wheel..
[20:10:10] <Josh_2> Personally for my json needs I use jonathan to parse to a hash table
[20:10:20] <Josh_2> lisp123: dont do that
[20:11:58] <Guest7430> how would you use typecase to choose any struct?
[20:12:23] <lisp123> Josh_2: Yeah good idea, I should parse it to a hash table
[20:12:32] <jackdaniel> for struct structure-class, for struct instance structure-object
[20:13:08] <Josh_2> lisp123: you can write a really simple macro that will let you bind keywords to hashtable values
[20:13:09] <Guest7430> ok, thanks.  do you know where that's mentionned in clhs?
[20:13:21] <jackdaniel> ::clhs structure-object
[20:13:21] <Colleen> Clhs: class structure-object http://www.lispworks.com/documentation/HyperSpec/Body/t_stu_ob.htm
[20:13:59] <Guest7430> thanks.  need to memorize that double colon stuff.
[20:14:18] <jackdaniel> l1sp.org is my goto search engine for clhs and clim symbols
[20:15:33] <lisp123> Josh_2: Hmmm don't quite follow, but don't mind me, its been a while since I looked at JSON
[20:16:29] <Josh_2> You could write a macro like (destructure-hash (|json1| |json2|) <my hash> <body>) which would bind the string values of "json1" and "json2" to those keywords
[20:17:18] <lisp123> Josh_2: Ah! Thanks for sharing, that's a pretty cool idea
[20:20:32] *** Joins: vats (~vats@103.158.91.216)
[20:21:02] <Guest7430> jackdaniel yeah, i've supposedly written a search for that somewhere that i always forget about. :)
[20:28:20] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[20:28:20] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[20:28:40] *** Joins: minion (~minion@common-lisp.net)
[20:29:21] *** Joins: specbot (~specbot@common-lisp.net)
[20:30:25] *** Joins: paule32_ (~paule32@user/paule32)
[20:30:56] <Guest7430> oh right, I need something to extract text from websites.
[20:31:19] *** Joins: Catie (~user@user/catie)
[20:32:20] <jackdaniel> do you mean that you need a web scrapper? https://lispcookbook.github.io/cl-cookbook/web-scraping.html has some information about it
[20:32:57] <jackdaniel> Guest7430: you've mentioned a few times about the gui library you are working on - do you have screenshots?
[20:33:16] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 245 seconds)
[20:33:31] <Guest7430> yeah, i was going to write one that didn't parse to structs or classes first but got distracted by other stuff.
[20:34:12] <Guest7430> jd: not yet. Still working on cleaning up all the supporting libraries.
[20:34:42] <jackdaniel> I see
[20:37:22] *** Joins: frgo_ (~frgo@p548a30d7.dip0.t-ipconnect.de)
[20:37:24] *** Joins: john__ (~john@dynamic-095-118-059-001.95.118.pool.telefonica.de)
[20:37:47] *** Joins: sm2n_ (~sm2n@user/sm2n)
[20:37:59] <Guest7430> but it's themable.  so it should look like whatever you want, with a very simple clean default.  I'm not sure if I should change the theming though. right now it uses drawing functions, like squircle, rectangle, and not sure if those should all be under the same thing?
[20:38:24] *** Joins: JoshYoshi (~user@37.25.47.130)
[20:38:27] *** Quits: JoshYoshi (~user@37.25.47.130) (Remote host closed the connection)
[20:39:20] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[20:39:21] *** Joins: X-Scale` (~ARM@92.250.97.112)
[20:40:27] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[20:40:28] *** Joins: djuber`` (~user@65.79.128.64)
[20:40:39] *** Joins: scymtym_ (~user@ip-94-114-248-79.unity-media.net)
[20:40:41] *** Joins: JoshYoshi (~user@37.25.47.130)
[20:40:47] <Guest7430> e.g. https://plaster.tymoon.eu/view/2721#2721
[20:41:16] *** Joins: zagura__ (~zagura@user/zagura)
[20:41:24] *** Quits: djuber`` (~user@65.79.128.64) (Client Quit)
[20:41:40] <jackdaniel> beats me. by themable you mean that you may locally declare a shape or that you may declare a default shape for all buttons?
[20:41:44] *** Joins: djuber (~user@65.79.128.64)
[20:42:01] *** Quits: stylewarning (sid241636@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[20:42:09] <jackdaniel> (and, i.e, change it as an afterthought without recompiling things)
[20:42:16] <Guest7430> shape for all buttons, or any subclass of button.
[20:42:26] <jackdaniel> I see
[20:42:52] <Guest7430> no recompiling, just everytime it rerenders something.
[20:43:35] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[20:45:47] <JoshYoshi> Use clim ;)
[20:46:38] <JoshYoshi> rip this name when am I gonna timeout
[20:46:43] *** Quits: Catie (~user@user/catie) (*.net *.split)
[20:46:43] *** Quits: cage (~cage@dynamic-adsl-94-34-16-50.clienti.tiscali.it) (*.net *.split)
[20:46:43] *** Quits: Josh_2 (~user@37.25.47.130) (*.net *.split)
[20:46:43] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (*.net *.split)
[20:46:43] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (*.net *.split)
[20:46:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (*.net *.split)
[20:46:43] *** Quits: gaqwas (~john@dynamic-095-118-059-001.95.118.pool.telefonica.de) (*.net *.split)
[20:46:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[20:46:44] *** Quits: Jing (~hedgehog@2604:a840:3::105f) (*.net *.split)
[20:46:44] *** Quits: X-Scale (~ARM@92.250.97.112) (*.net *.split)
[20:46:44] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[20:46:44] *** Quits: djuber` (~user@65.79.128.64) (*.net *.split)
[20:46:44] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[20:46:44] *** Quits: dale (dale@user/dale) (*.net *.split)
[20:46:44] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (*.net *.split)
[20:46:44] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[20:46:44] *** Quits: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff) (*.net *.split)
[20:46:45] *** Quits: jcowan (sid325434@ilkley.irccloud.com) (*.net *.split)
[20:46:45] *** Lord_of_Life_ is now known as Lord_of_Life
[20:46:58] *** X-Scale` is now known as X-Scale
[20:48:24] *** zagura__ is now known as zagura
[20:49:06] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 245 seconds)
[20:49:31] *** Quits: drmeister (sid45147@ilkley.irccloud.com) (Ping timeout: 245 seconds)
[20:50:35] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[20:50:39] *** Joins: cage (~cage@dynamic-adsl-94-34-16-50.clienti.tiscali.it)
[20:51:24] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[20:52:04] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:52:55] *** Joins: stylewarning (sid241636@id-241636.helmsley.irccloud.com)
[20:52:55] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[20:52:55] *** Joins: Catie (~user@user/catie)
[20:52:55] *** Joins: Jing (~hedgehog@2604:a840:3::105f)
[20:52:55] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:52:55] *** Joins: dale (dale@user/dale)
[20:52:55] *** Joins: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff)
[20:53:20] *** Quits: lagash (lagash@lagash.shelltalk.net) (Max SendQ exceeded)
[20:53:35] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:54:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:55:05] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:56:34] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[21:02:41] *** Quits: vats (~vats@103.158.91.216) (Ping timeout: 256 seconds)
[21:03:18] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[21:03:23] *** JoshYoshi is now known as Josh_2
[21:03:37] <Josh_2> I am back, stronger than ever
[21:04:41] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:05:03] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[21:05:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:05:46] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:06:00] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:08:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:09:06] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 245 seconds)
[21:09:50] *** Joins: amb007 (~a_bakic@176.196.204.77.rev.sfr.net)
[21:13:55] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[21:16:06] *** Quits: X-Scale (~ARM@92.250.97.112) (Ping timeout: 265 seconds)
[21:17:32] *** X-Scale` is now known as X-Scale
[21:20:21] *** Quits: amb007 (~a_bakic@176.196.204.77.rev.sfr.net) (Ping timeout: 245 seconds)
[21:23:13] *** Joins: amb007 (~a_bakic@238.144.204.77.rev.sfr.net)
[21:24:38] *** Joins: phireh (~user@2.59.233.131)
[21:26:52] <Guest7430> what are peoples thoughts on the different connotations of name and id?
[21:31:34] *** Joins: jealousmonk (~user@2804:431:e7c5:a365:cf0:d781:d307:9a26)
[21:38:39] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[21:40:10] *** Joins: Catie (~user@user/catie)
[21:40:38] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:43:10] *** paule32_ is now known as paule32
[21:43:57] *** Joins: Colt (~Colt@user/colt)
[21:46:34] *** Joins: dre (~dre@2001:8003:c932:c301:5609:7507:d2a0:8e2b)
[22:00:55] *** Quits: Guest7430 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:01:28] <VincentVega> Is there no way to see current element index/position of any of the cl-containers iterators?
[22:04:14] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[22:06:36] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:07:53] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[22:07:54] *** Quits: amb007 (~a_bakic@238.144.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:08:42] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:09:01] *** Quits: Bike (~Bike@c-76-106-35-111.hsd1.md.comcast.net) (Quit: Connection closed)
[22:12:49] *** Joins: no-output (~user@024-231-140-187.res.spectrum.com)
[22:14:15] <Josh_2> I have never used cl-containers
[22:14:17] <Josh_2> do you find it useful?
[22:16:21] <VincentVega> Sure, for data structures. I have already used it for a red black tree. Now I am needing an iterator and it gives me the closest thing to what I need as far as I am aware.
[22:17:20] <VincentVega> Eh, I figured I am going to subclass and keep track of the index myself.
[22:18:16] *** Joins: beach` (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr)
[22:18:20] *** Joins: leef1 (~leef@98.37.218.113)
[22:18:40] <Josh_2> VincentVega: does cl-containers allow you to abstract away distinctions between various datastructures?
[22:19:45] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[22:20:21] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 245 seconds)
[22:20:22] *** Quits: beach (~user@2a01:cb19:150:3400:185d:876f:56db:5be9) (Ping timeout: 268 seconds)
[22:20:52] <VincentVega> Josh_2: Yeah, it does that. There was this one diagram depicting the hierarchy. It's pretty extensive, let me see if I can find it.
[22:26:36] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[22:27:14] *** Joins: Colt (~Colt@user/colt)
[22:27:15] <VincentVega> Josh_2: Hmm dunno where it is now. Let's just say I am not crazy about its documentation. It was online, but all I can find now is this and I don't know how to open it https://github.com/gwkkwg/cl-containers/blob/master/doc/containers-hierarchy.graffle
[22:27:25] *** Joins: X-Scale` (~ARM@31.22.167.95)
[22:27:41] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[22:28:57] <VincentVega>  Josh_2: Ah, there it is https://common-lisp.net/project/cl-containers/images/containers.pdf
[22:29:15] *** X-Scale` is now known as X-Scale
[22:31:51] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[22:32:20] *** Joins: Colt (~Colt@user/colt)
[22:33:17] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[22:33:27] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[22:33:29] *** Joins: Colt1 (~Colt@user/colt)
[22:33:42] *** Quits: Colt1 (~Colt@user/colt) (Remote host closed the connection)
[22:34:23] <Josh_2> Thanks
[22:36:37] *** Joins: Colt (~Colt@user/colt)
[22:37:05] *** Joins: akoana (~ah@user/akoana)
[22:45:53] <VincentVega> np
[22:47:23] <jackdaniel> if there are bag-containers then I want bug-containers
[22:48:49] <_death> (defclass lisp-image (bug-container) ())
[22:55:21] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[22:56:38] <jackdaniel> :)
[22:57:25] *** Joins: aeth (~aeth@user/aeth)
[22:57:38] *** Quits: jealousmonk (~user@2804:431:e7c5:a365:cf0:d781:d307:9a26) (Quit: ERC (IRC client for Emacs 27.1))
[22:58:04] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[23:00:00] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[23:09:21] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:09:31] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 245 seconds)
[23:10:10] *** Joins: amb007 (~a_bakic@206.144.204.77.rev.sfr.net)
[23:11:57] *** Joins: vats (~vats@103.158.91.123)
[23:18:57] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[23:23:07] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:25:53] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[23:30:49] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:34:33] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:36:10] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:36:18] *** Joins: nature (~nature@45.32.235.173)
[23:38:00] *** Quits: cage (~cage@dynamic-adsl-94-34-16-50.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:39:22] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Ping timeout: 260 seconds)
[23:39:37] *** Joins: tyson2`` (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:44:17] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 250 seconds)
[23:44:59] *** Joins: nature (~nature@45.32.235.173)
[23:48:23] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 250 seconds)
[23:48:24] *** Quits: amb007 (~a_bakic@206.144.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[23:48:32] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[23:48:34] *** Quits: tyson2`` (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Ping timeout: 268 seconds)
[23:48:49] *** Joins: cosimone (~user@93-47-230-47.ip115.fastwebnet.it)
[23:50:06] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
