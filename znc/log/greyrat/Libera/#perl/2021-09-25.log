[00:05:49] *** Joins: humky (~humky@user/humky)
[00:08:42] *** Quits: batman (~batman@50.31.137.146) (Ping timeout: 260 seconds)
[00:09:10] *** Quits: marcus (~marcus@mojo/viking/marcus) (Ping timeout: 260 seconds)
[00:10:32] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.2.1)
[00:12:29] *** Joins: marcus (~marcus@mojo/viking/marcus)
[00:12:34] *** Joins: batman (~batman@50.31.137.146)
[00:16:49] *** Joins: jbarton (~tmtowtdi@pool-108-48-30-133.washdc.fios.verizon.net)
[00:20:38] *** Parts: SKYDAD (~NwApSlLeH@user/skydad) ()
[00:20:43] *** Quits: jdbarton (~tmtowtdi@pool-108-48-30-133.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[00:22:29] *** Quits: dev_ (~moo@ppp-94-67-198-74.home.otenet.gr) (Ping timeout: 252 seconds)
[00:29:23] *** Joins: kensanata (~user@user/kensanata)
[00:37:02] * GumbyPAN CPAN Upload: PDL-2.057_01 by ETJ https://metacpan.org/release/ETJ/PDL-2.057_01
[00:38:17] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[00:38:34] *** Joins: miojo41 (~miojo@191.253.157.192)
[00:38:53] *** Quits: miojo (~miojo@191.253.152.1) (Killed (NickServ (GHOST command used by miojo41!~miojo@191.253.157.192)))
[00:38:58] *** miojo41 is now known as miojo
[00:49:59] *** Quits: Darkcoal (~user@51.15.9.205) (Read error: Connection reset by peer)
[00:52:01] *** Joins: proller (~p@80.240.216.69)
[00:52:06] <gordonfish> I just love it when someone asks me to debug an old web app (running on windows IIS) that turns out to be compiled (csharp) and no source code available and the original dev is long gone and inaccessible...
[00:52:27] <jaytee80> It's not hard to say "NO"
[00:52:55] <gordonfish> A path that it accessed had changed and I was able to hexedit it but what I want to know, why do people used compiled lang for bloody web apps??
[00:53:24] <gordonfish> jaytee80: I know, but I tend to want to at least take a crack at it first.
[00:53:43] *** Joins: Shells (~michelle@2407:8800:bc20:200a:90a6:8c65:5834:95d9)
[00:54:06] <xq> when all you have is a hammer
[00:54:12] *** Joins: Darkcoal (~user@2001:16a2:777f:9b00:1331:29ab:2fd7:aedc)
[00:55:20] <xq> nowadays some people develop web applications in golang
[00:55:47] <xq> one of the primary reasons is ease of deployment of a single statically-linked file
[00:55:48] <jaytee80> I wonder what the perl job market is  like lately. Our new corp overlords are really getting on my nerves.
[00:55:51] *** Quits: Michelle (~michelle@203.206.128.220) (Ping timeout: 265 seconds)
[00:56:28] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[00:56:36] <jaytee80> they're making it so you could almost maybe get things done, but 10x slower. 
[00:57:08] <gordonfish> xq: But a massive PITA down the road when something needs to be updated that would take a few min in something like perl, php, ruby, hell even asp
[00:57:51] <jaytee80> Only a massive pain if you don't have the source code and build environment. That's a different issue, though.
[00:58:00] <xq> jaytee80: https://jobs.perl.org/
[00:58:01] <Paperbot> Link title(s): [ The Perl Job Site (Perl Jobs) ]
[00:58:34] <gordonfish> I'd even say JSP is a tad better, at least in my experience, the .java files are all stored on the server and can be edited and rebuilt on a whim (not as nice as perl/php/ror/asp/etc, but better than something like CS or a .dll where source code is almost never stored on the server.)
[00:58:43] <gordonfish> (JSP/tomcat)
[01:01:26] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 260 seconds)
[01:07:05] * GumbyPAN CPAN Upload: App-ElasticSearch-Utilities-8.2 by BLHOTSKY https://metacpan.org/release/BLHOTSKY/App-ElasticSearch-Utilities-8.2
[01:08:53] *** Joins: proller (~p@80.240.216.69)
[01:13:33] *** Joins: Newbie (~Newbie@108.61.176.5)
[01:14:11] *** Quits: Darkcoal (~user@2001:16a2:777f:9b00:1331:29ab:2fd7:aedc) (Ping timeout: 250 seconds)
[01:14:33] *** Joins: Darkcoal (~user@139.64.17.159)
[01:14:47] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9971-ce5a-c805-3e08.res6.spectrum.com)
[01:17:06] * GumbyPAN CPAN Upload: App-GhostWork-0.05 by INA https://metacpan.org/release/INA/App-GhostWork-0.05
[01:20:12] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[01:24:28] *** Joins: whynot (~whynot@37.73.61.241)
[01:27:09] *** Quits: Newbie (~Newbie@108.61.176.5) (K-Lined)
[01:28:59] *** Joins: Tob1 (~Newbie@62-210-99-213.rev.poneytelecom.eu)
[01:30:06] *** Quits: zgu (~zgu@2603-7080-b704-0800-e4e2-df43-fd5d-e657.res6.spectrum.com) (Quit: Leaving)
[01:30:33] *** Quits: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net) (Quit: ChatZilla 0.9.99 [SeaMonkey 2.53.9/20210823155652])
[01:32:42] *** Joins: zgu (~zgu@2603-7080-b704-0800-e4e2-df43-fd5d-e657.res6.spectrum.com)
[01:33:39] <simcop2387> whoa, https://www.reddit.com/r/doctorwho/comments/pukqae/russell_t_davies_to_return_as_doctor_who
[01:33:42] <Paperbot> Link title(s): [ Russell T Davies to return as Doctor Who showrunner : doctorwho ]
[01:35:53] *** Quits: Tob1 (~Newbie@62-210-99-213.rev.poneytelecom.eu) (Quit: - nbs-irc 2.39 - www.nbs-irc.net -)
[01:41:14] *** Quits: kensanata (~user@user/kensanata) (Remote host closed the connection)
[01:44:16] *** Quits: normskal (~normskal@101.175.64.73) (Quit: Client closed)
[01:46:26] *** Quits: miojo (~miojo@191.253.157.192) (Ping timeout: 256 seconds)
[01:46:57] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[01:49:04] <genio> man. why do people continue with this /msg spam shit?
[01:58:42] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[02:03:43] *** Joins: semeion (~semeion@user/semeion)
[02:10:50] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[02:11:06] *** Quits: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net) (Remote host closed the connection)
[02:18:21] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Changing host)
[02:18:21] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[02:22:13] * GumbyPAN CPAN Upload: Bot-IRC-1.38 by GRYPHON https://metacpan.org/release/GRYPHON/Bot-IRC-1.38
[02:24:43] *** Joins: normskal (~normskal@101.175.64.73)
[02:25:18] *** Joins: aspic (~shifty~~~@ppp121-44-103-145.syd-gls-har-bras38.tpg.internode.on.net)
[02:25:22] *** Joins: ritsch_master (~user@77.119.204.17.wireless.dyn.drei.com)
[02:31:40] *** Quits: aspic (~shifty~~~@ppp121-44-103-145.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[02:32:59] *** Quits: jaytee80 (~jaytee80@47.190.14.171) (Quit: Client closed)
[02:35:19] *** Quits: JustMe (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[02:44:21] *** Quits: ritsch_master (~user@77.119.204.17.wireless.dyn.drei.com) (Remote host closed the connection)
[02:44:50] *** Quits: bmeneg (~bmeneg@2804:828:f232:1c6c:1056:f77d:9322:a90b) (Remote host closed the connection)
[02:47:05] *** Joins: pizdets (~pizdets@183.182.110.56)
[02:52:11] *** Quits: smitop (~smitop@user/smitop) (Remote host closed the connection)
[02:54:06] *** Joins: smitop (~smitop@user/smitop)
[02:57:28] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[03:09:17] *** Joins: proller (~p@2a02:6b8:b081:6402::1:e)
[03:10:08] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[03:14:06] *** Quits: Darkcoal (~user@139.64.17.159) (Quit: Darkcoal)
[03:16:46] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 260 seconds)
[03:29:03] *** Joins: pj (~pj@ghettoforge/pj)
[03:31:08] *** Joins: aspic (~shifty~~~@ppp121-44-103-145.syd-gls-har-bras38.tpg.internode.on.net)
[03:40:18] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[03:41:15] *** Joins: txtsd (~txtsd@user/txtsd)
[03:46:26] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:50:23] *** Quits: anthk_ (~anthk_@106.83-213-54.dynamic.clientes.euskaltel.es) (Ping timeout: 252 seconds)
[03:54:12] *** Quits: Pali (~pali@user/pali) (Ping timeout: 265 seconds)
[04:14:47] *** Quits: bit4bit (~bit4bit@181.49.102.14) (Quit: Leaving)
[04:19:21] <unixcat647> is irc.perl.org dead?
[04:20:03] <Grinnz> nope
[04:21:07] *** Quits: proller (~p@2a02:6b8:b081:6402::1:e) (Ping timeout: 252 seconds)
[04:28:36] *** Joins: YaoNai (~YaoNai@user/yaonai)
[04:30:34] <gordonfish> Definitely not
[04:39:44] *** Joins: gggpkm (~gggpkm@111-251-148-94.dynamic-ip.hinet.net)
[04:41:28] * GumbyPAN CPAN Upload: Time-OlsonTZ-Data-0.202102 by ZEFRAM https://metacpan.org/release/ZEFRAM/Time-OlsonTZ-Data-0.202102
[04:44:57] *** Joins: prime (~prime@173.213.88.248)
[04:45:50] <unixcat647> Grinnz gordonfish do I need special privileges to see the channels? from what my client is showing the most popular channel has 4 users 
[04:46:45] <Grinnz> the channel list feature is disabled for spam reasons
[04:46:53] <unixcat647> ohh, I see
[04:46:56] <Grinnz> see https://www.irc.perl.org/channels.html for a list
[04:46:57] <Paperbot> Link title(s): [ irc.perl.org - Channels ]
[04:47:05] <unixcat647> cool, thanks
[04:47:43] <Grinnz> there's also #perl for general chat and #p5p for development of perl itself
[04:47:55] *** Joins: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617)
[04:56:30] * GumbyPAN CPAN Upload: DateTime-TimeZone-2.48 by DROLSKY https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.48
[05:02:52] *** Quits: Su-Shee (~Susanne@p4ffc7d33.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:04:42] *** Joins: Su-Shee (~Susanne@p4ff49b58.dip0.t-ipconnect.de)
[05:08:12] *** Quits: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617) (Quit: Leaving)
[05:11:52] *** Quits: prime (~prime@173.213.88.248) (Quit: and then my friend you die)
[05:12:59] *** Quits: travaldo (~travaldo@159.203.88.148) (Quit: travaldo)
[05:14:43] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:14:58] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[05:42:28] *** Joins: willthechill (~willthech@24-117-199-150.cpe.sparklight.net)
[06:03:58] *** Quits: lllh (~llh@198.48.244.21) (Ping timeout: 252 seconds)
[06:11:37] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:13:30] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:16:08] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[06:27:19] *** Joins: krismatrix (~krismatri@38.80.149.51)
[06:38:45] *** Quits: whynot (~whynot@37.73.61.241) (Quit: leaving)
[06:44:40] *** Joins: holyghost (~Adium@2a02:a03f:64c8:9200:d0c2:c3e9:ad52:7749)
[06:51:42] * GumbyPAN CPAN Upload: Dist-Zilla-PluginBundle-DROLSKY-1.20 by DROLSKY https://metacpan.org/release/DROLSKY/Dist-Zilla-PluginBundle-DROLSKY-1.20
[06:56:42] * GumbyPAN CPAN Upload: Alien-PGPLOT-0.01 by DJERIUS https://metacpan.org/release/DJERIUS/Alien-PGPLOT-0.01
[07:09:53] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[07:14:08] *** Quits: holyghost (~Adium@2a02:a03f:64c8:9200:d0c2:c3e9:ad52:7749) (Quit: Leaving.)
[07:16:14] *** Joins: Martchus (~martchus@2a01:c23:bdfb:1b00:d250:99ff:fe49:3cce)
[07:17:06] *** Quits: Martchus_ (~martchus@2a01:c22:7a76:9800:d250:99ff:fe49:3cce) (Ping timeout: 260 seconds)
[07:20:27] *** Joins: rindolf (~shlomif@87.68.240.138.adsl.012.net.il)
[07:21:47] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[07:23:30] *** Joins: dansan (~daniel@75.81.148.51)
[07:23:47] *** Joins: Pny (pny1312@2605:6400:c847:1985::5891)
[07:23:57] *** Joins: PonyBlocks-_- (ponyblocks@2605:6400:c847:1478::8741)
[07:26:17] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Remote host closed the connection)
[07:30:44] *** Joins: holyghost (~Adium@2a02:a03f:64c8:9200:d0c2:c3e9:ad52:7749)
[07:36:26] *** Joins: Trigon (~reuben@144.39.114.115)
[07:37:02] <dansan> Hello!  I'm new to perl and I'm stuck on this one.  I have a function that reads a binary file and returns $data and $n -- the bytes read and the count.  I log it before returning from the subroutine.  But at the call site, the first variable gets the value of $n and the second is undefined. https://pastebin.mozilla.org/2kf4uY3v
[07:37:03] <Paperbot> Link title(s): [ Mozilla Community Pastebin/2kf4uY3v (Perl) ]
[07:37:05] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[07:37:56] <dansan> The data is two bytes of binary data that I later try to unpack (as a big endian 16 bit number).  Is there some special way I should be returning it since it's binary?
[07:38:33] <dansan> Oh, and the variable is only called '$len' because it's the length of the rest of this packet I'm reading.
[07:40:19] *** Shells is now known as Michelle
[07:40:37] <rindolf> dansan: hi
[07:41:25] <rindolf> perlbot: prototypes
[07:41:25] <perlbot> rindolf: please don't write sub name_of_sub (...) { - it's almost certainly not what you want, just do sub name_of_sub { ... } - see http://ow.ly/RknZs for a detailed explanation of why. To do it properly see "Signatures" in perlsub. If you're on an older perl you can do it with "signatures", "Function::Parameters" from CPAN.
[07:43:01] <dansan> hello!
[07:43:09] <Grinnz> dansan: || die causes it to call the function in scalar context
[07:43:18] <dansan> Oh, please explain that!
[07:43:21] <dansan> Or link
[07:44:24] <dansan> Oh, "in a scalar context, it returns the number of elements in the array"
[07:44:58] <rindolf> Grinnz: good catch
[07:45:06] <Grinnz> no, it causes the return value to be evaluated in scalar context
[07:45:11] <dansan> I only added that || die because I'm confused by what the previous programmer was doing with the eval blocks.
[07:45:13] <Grinnz> in scalar context, the comma operator returns its second value
[07:45:25] <dansan> ah hah! just like in C :)
[07:45:30] <Grinnz> yup
[07:46:01] <dansan> So if my_read_fn 
[07:46:04] <dansan> oops
[07:46:44] <dansan> So if my_read_fn dies -- that is essentially throwing an exception right?  That failure will propagate up the call stack until somebody either uses an eval to catch it or the default exception handler does?
[07:46:50] <Grinnz> correct
[07:46:54] <dansan> Oh, good!
[07:47:00] <Grinnz> || won't interact with that in any way
[07:47:01] <dansan> So I don't need all of that || die crap everywhere
[07:47:10] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[07:47:26] <Grinnz> and if you want ot check what's returned from a list-returning function you're going to want to check the two variables that you assigned to
[07:48:05] <dansan> But if that function "die"s, then it won't return?
[07:48:12] <Grinnz> also, consider Syntax::Keyword::Try or Feature::Compat::Try which is a backported version of the upcoming try/catch feature
[07:48:21] <Grinnz> right
[07:48:27] <dansan> oh good
[07:49:02] <dansan> Oh, interesting!  Well I'm under tight time constraints to make this old perl script work, so trying to make as few changes as possible.  But I'll check that out.
[07:49:35] <dansan> This is in OpenWRT running on a tiny board. :)
[07:50:55] <Grinnz> sure
[07:51:17] <Grinnz> once you have it available try/catch makes exception based control flow pretty nice though
[07:51:20] <dansan> So this is an opinion question.  If the use of an eval block without ever checking "$!" evil?
[07:51:38] <Grinnz> well, eval sets $@ not $! firstly :P
[07:51:43] <dansan> OH!
[07:51:55] <Grinnz> secondly, the correct way to tell if eval succeeded is by checking its return value, you can't rely on $@
[07:52:11] <Grinnz> it will always return undef if it caught an exception
[07:52:12] <dansan> How do I check the return value?
[07:52:29] <Grinnz> unless (eval { do_stuff; 1 }) { do stuff with $@ }
[07:52:38] <dansan> oh, ok
[07:52:53] <dansan> There's not a "$?" like in shell scripts?
[07:52:54] <Grinnz> (the 1 to make sure you don't accidentally return false from it yourself)
[07:53:00] <Grinnz> there is, but it isn't for that
[07:53:04] <dansan> ok
[07:53:29] <dansan> So let me rephrase the question.  Is it generally considered evil to use an eval block and never check the return value?
[07:53:45] <Grinnz> generally it's a mistake, but it may be useful to do so for certain things
[07:54:07] <dansan> Because I may have called "die" thinking that the fking thing is supposed to stop the goddamn world, only to discover that it ate the error and ignored it. :(
[07:54:08] <Grinnz> intentional ignoring of exceptions can be useful if you know you're doing it
[07:54:11] <dansan> Ok, thanks :)
[07:54:31] <dansan> Well, perhaps I simply broke from the original programmer's particular scheme.
[07:55:13] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[07:55:26] <dansan> Grinnz: thank you SO very much! <3
[08:04:49] <dansan> Oh, so $! is essentially the result of C "strerror(errno);" while $@ is an error from the Perl interpreter then
[08:05:59] <Grinnz> $@ is specifically used by eval, $! is used by failed syscalls, $? is the return value of the most recent exec
[08:06:39] <Grinnz> i should say, the wait status
[08:06:53] <Grinnz> the docs explain more https://perldoc.perl.org/variables/$@ etc
[08:06:53] <Paperbot> Link title(s): [ $@ - Perldoc Browser ]
[08:10:02] <dansan> Ah, I see
[08:17:43] <dansan> woo hoo!  I sent Vogon poetry into space and it was sent back to me! :)
[08:18:13] <dansan> OK, well I sent it to an Iridium satellite in space, and *it* sent it back.
[08:20:31] <dansan> Oh freddled gruntbuggly, Thy micturations are to me, As plurdled gabbleblotchits, in midsummer morning On a lurgid bee.
[08:22:04] <Grinnz> nice
[08:23:28] <dansan> Well once it's working I have to put together a little test suite to spam it and make sure it works.  Going to run up my boss' Iridium bill/
[08:23:54] <dansan> I should probably find some other literature.  I need to verify that I always get the same data back.
[08:25:26] <dansan> Does eval actually spawn a new process?
[08:26:43] <Grinnz> no
[08:27:12] <dansan> Ok, good
[08:27:19] <Grinnz> only fork, system, or readpipe (backticks)
[08:27:29] <Grinnz> or pipe open
[08:29:35] <dansan> Ok, thanks.  That's helpful to know.
[08:29:49] <dansan> Perl is a strange mix of C-like capabilities with shell-like syntax.
[08:30:55] <Grinnz> pretty much its origin yep
[08:35:25] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:36:16] <dansan> Damn, now to comment out the 80-odd lines of logging crap I added!
[08:39:13] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.2.1)
[08:41:34] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 260 seconds)
[08:47:23] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Ping timeout: 252 seconds)
[08:47:23] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Ping timeout: 252 seconds)
[08:47:38] *** Quits: perldoc (~perldoc@2603-6080-3108-088d-18fc-1230-0f1a-2f6b.res6.spectrum.com) (Ping timeout: 260 seconds)
[08:48:29] *** Quits: kaitlyn (~kaitlyn@user/kaitlyn) (Ping timeout: 252 seconds)
[08:48:34] *** Joins: kaitlyn0 (~kaitlyn@user/kaitlyn)
[08:49:01] *** Joins: perldoc (~perldoc@71.76.76.1)
[08:49:01] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Read error: Connection reset by peer)
[08:49:02] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 260 seconds)
[08:50:32] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[08:52:03] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[08:52:33] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[08:52:33] *** ChanServ sets mode: +v perlbot
[08:53:03] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[08:53:23] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[08:55:19] <simcop2387> perldoc: hi
[08:55:23] <simcop2387> perlbot: hello?
[08:55:29] <simcop2387> perlbot: hi
[08:55:33] <simcop2387> will check back if it still doesn't work shortly after restarting it there
[08:57:22] <perlbot> simcop2387: Your documentation is available at: https://perldoc.perl.org/hi
[08:57:24] <perlbot> simcop2387: Hi :) Have a look around!
[08:57:26] <perlbot> simcop2387: E̵̖̼͕̰̤͕͐͋͞L̛̥̤̙̬̯̜̏̇ͤ͛ͦͬͤ͘M̩̦͓̬̃̈́͗͐͟Ö͉̫́ ̵̢̗͖̫̭ͤL̞̄ͭ͗͑͌̕Ơ̶͔̱̌͑̀͘V͙̖̪ͣͮ̓̆ͦ͋̐̎ͩ̀ͅË̪̟̖̣̄̈̅̔͊̈̀̚͘S̺̈́̉́ͩ̾̋̆͐͘ ̺̼͕̗̜̣̯̗̣̒͛̏ͦ̃͊̎Ỷ̼̬͈̞̌͗͊͌͑ͨ́͘Ọ̻̟̠̦̈́̀̍͞Ų̖̰̥̝̩͐̓ͨ͜
[08:57:34] <simcop2387> figures
[09:03:41] *** Quits: PonyBlocks-_- (ponyblocks@2605:6400:c847:1478::8741) (Quit: Stay Gold Pony Boy Stay Gold)
[09:03:41] *** Quits: Pny (pny1312@2605:6400:c847:1985::5891) (Quit: ZNC - https://znc.in)
[09:20:11] *** Joins: Voxel (~Voxel@173-46-68-178.baltnet.ru)
[09:20:16] *** Parts: Voxel (~Voxel@173-46-68-178.baltnet.ru) ()
[09:24:14] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 252 seconds)
[09:24:32] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[09:31:42] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:34:20] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[09:42:36] *** Joins: EGD (~egd@user/egd)
[09:46:40] *** Quits: gggpkm (~gggpkm@111-251-148-94.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[09:48:02] *** Joins: Pny (pny1312@2605:6400:c847:1985::5891)
[09:48:12] *** Joins: Pony (ponyblocks@2605:6400:c847:1478::8741)
[09:48:36] *** Pony is now known as Guest3120
[09:49:11] *** Quits: Pny (pny1312@2605:6400:c847:1985::5891) (Changing host)
[09:49:11] *** Joins: Pny (pny1312@user/pny)
[09:52:42] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Remote host closed the connection)
[10:01:14] *** Joins: diskin (~diskin@176.106.23.15)
[10:04:19] *** Quits: holyghost (~Adium@2a02:a03f:64c8:9200:d0c2:c3e9:ad52:7749) (Quit: Leaving.)
[10:12:23] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[10:17:55] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[10:19:01] *** Joins: holyghost (~holyghost@2a02:a03f:64c8:9200:d0c2:c3e9:ad52:7749)
[10:23:20] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[10:23:36] *** Quits: holyghost (~holyghost@2a02:a03f:64c8:9200:d0c2:c3e9:ad52:7749) (Client Quit)
[10:24:13] *** Quits: rindolf (~shlomif@87.68.240.138.adsl.012.net.il) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[10:24:27] *** Joins: holyghost (~holly@109.136.39.83)
[10:28:29] *** Joins: anthk_ (~anthk_@106.83-213-54.dynamic.clientes.euskaltel.es)
[10:52:44] *** Joins: horsepatat (~horsepata@212.3.197.33)
[10:55:17] *** Quits: aspic (~shifty~~~@ppp121-44-103-145.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[10:57:24] *** Joins: tobybl (~tobybl@31.111.35.255)
[11:01:01] *** Quits: horsepatat (~horsepata@212.3.197.33) (Read error: Connection reset by peer)
[11:10:00] *** Quits: EGD (~egd@user/egd) ()
[11:16:22] *** Quits: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[11:16:59] *** Joins: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[11:22:38] *** diskin is now known as Guest9127
[11:22:38] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[11:22:38] *** Quits: Guest9127 (~diskin@176.106.23.15) (Killed (cadmium.libera.chat (Nickname regained by services)))
[11:22:38] *** diskin_ is now known as diskin
[11:22:56] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[11:25:47] *** Quits: anthk_ (~anthk_@106.83-213-54.dynamic.clientes.euskaltel.es) (Ping timeout: 252 seconds)
[11:34:07] *** Quits: willthechill (~willthech@24-117-199-150.cpe.sparklight.net) (Read error: Connection reset by peer)
[11:34:20] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 265 seconds)
[11:35:13] *** Joins: willthechill (~willthech@24-117-199-150.cpe.sparklight.net)
[11:35:41] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 252 seconds)
[11:37:58] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 260 seconds)
[11:43:07] *** Joins: rindolf (~shlomif@87.68.240.138.adsl.012.net.il)
[11:47:58] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:49:55] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[11:50:25] *** Quits: X-Scale (~ARM@31.22.200.105) (Ping timeout: 252 seconds)
[11:51:08] *** X-Scale` is now known as X-Scale
[11:57:08] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[12:07:16] * GumbyPAN CPAN Upload: Evo-Inference-0.1.12 by KOBOLDWIZ https://metacpan.org/release/KOBOLDWIZ/Evo-Inference-0.1.12
[12:09:45] *** Quits: nrl^ (~nrl@12.203.127.82) (Remote host closed the connection)
[12:32:09] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[12:39:52] *** Joins: slu (uid501941@id-501941.helmsley.irccloud.com)
[12:46:38] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 252 seconds)
[12:47:00] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[12:49:09] *** Quits: Adura (~Adura@user/adura) (Quit: Quit)
[12:55:35] *** Joins: Adoi (~Adoi@user/adoi)
[13:02:08] *** Quits: willthechill (~willthech@24-117-199-150.cpe.sparklight.net) (Remote host closed the connection)
[13:03:55] *** Joins: aspic (~shifty~~~@ppp121-44-120-81.syd-gls-har-bras39.tpg.internode.on.net)
[13:05:05] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[13:11:37] *** Quits: batman (~batman@50.31.137.146) (Remote host closed the connection)
[13:11:37] *** Quits: marcus (~marcus@mojo/viking/marcus) (Remote host closed the connection)
[13:12:01] *** Joins: batman (~batman@50.31.137.146)
[13:12:03] *** Joins: marcus (~marcus@mojo/viking/marcus)
[13:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:31:01] *** Joins: csrf (~csrf@user/csrf)
[13:46:29] <ehuelsmann[m]> Morning. I've got a question with respect to exceptions and error handling: In the past, I generally used string-based exceptions or `undef` return values and an out-of-band method for access to the error condition (much like DBI seems to). Now that Syntax::Keyword::Try has the ability to match exceptions by class name, I'm thinking it'd be better if my libraries throw exceptions with accessors to consult error state. 
[13:47:05] <ehuelsmann[m]> It'd be nice if - much like `croak` - the exception object would record the caller location. Is there anything you'd recommend for this use-case? Does every library grow its own exception throwing mechanisms? Or is there a widely used library for that?
[13:52:53] <ehuelsmann[m]> Looking at IO::Async, I see lots of croak and carp's. (So no exception objects.) In my case, I want to convey the exception condition from my application (a webapp) to a client (the SPA) and allow the client to show a meaningful error. Yet I do *not* want to teach the library about that goal. Normally, I'd say I should send a "500 - Internal server error" on internal failure, but this error is about being able to connect to a secondary
[13:52:53] <ehuelsmann[m]> service using credentials supplied by the user. 
[13:53:25] <LeoNerd> I don't have an overly good answer to that
[13:53:25] <LeoNerd> yet
[13:53:49] <ehuelsmann[m]> :-) I like the "yet".
[13:55:16] <ehuelsmann[m]> So for now, any "exception class" library on CPAN would be as good as any other? (Or I could reinvent the wheel and implement my own)
[13:55:42] <ehuelsmann[m]> that's fine. I just wanted to be sure I hadn't missed anything.
[13:56:21] *** Quits: tobybl (~tobybl@31.111.35.255) (Remote host closed the connection)
[14:07:11] <ehuelsmann[m]> For a library which doesn't depend on Moo(se) and is very limited of scope, I guess Exception::Class is quite ok, but it doesn't seem to have the carp/croak functionality of reporting the caller of the caller (instead of the direct caller of "throw()")
[14:08:02] <xq> ehuelsmann[m]: there are some things
[14:08:43] <xq> I researched this topic quite a while ago, the most advanced thing that I was able to find is: https://metacpan.org/pod/Throwable::SugarFactory
[14:08:43] <Paperbot> Link title(s): [ Throwable::SugarFactory - build a library of syntax-sugared Throwable-based exceptions - metacpan... ]
[14:09:21] <xq> this integrates with StackTrace::Auto to provide automatic stack traces, like this:
[14:10:29] <xq> package MyApp::Exceptions; use Throwable::SugarFactory; exception MyCustomError  => 'some description' => with => 'StackTrace::Auto';
[14:11:12] <xq> after this, in your application code, you can do: `die my_custom_error;` and after catching it, you can call ->stack_trace on that exception object to get a stack trace
[14:12:07] <xq> of course quite some time has passed since then so there might be even more advanced things on CPAN right now
[14:15:34] *** Joins: Pali (~pali@user/pali)
[14:16:52] * ehuelsmann[m] reads up on Throwable::SugarFactory -- had assumed it would depend on Moo/Moose too, before
[14:17:25] <xq> it depends on Throwable which depends on Moo
[14:24:14] <ehuelsmann[m]> there's a lot with respect to exceptions on CPAN;it's hard to wade through all the modules (I've done this several times before).
[14:25:28] <ehuelsmann[m]> the leanest is probably Exception::Class, although I would have loved to have it "croak" next to "throw"; that way I don't need the entire call-chain.
[14:27:33] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:32:40] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[14:50:15] *** Quits: WinterStar (~IceLight@user/icelight) (Quit: WeeChat 3.2.1)
[14:51:55] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[15:06:06] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:06:32] *** Joins: proller (~p@80.240.216.69)
[15:06:36] * GumbyPAN CPAN Upload: Mojolicious-Command-generate-lexicon-0.998 by UNDEF https://metacpan.org/release/UNDEF/Mojolicious-Command-generate-lexicon-0.998
[15:13:30] *** Joins: WinterStar (~IceLight@user/icelight)
[15:16:31] *** Joins: ritsch_master (~user@178.165.205.148.wireless.dyn.drei.com)
[15:26:43] *** Joins: tobybl (~tobybl@31.111.35.255)
[15:43:44] *** Quits: tobybl (~tobybl@31.111.35.255) (Remote host closed the connection)
[15:46:03] *** Quits: ritsch_master (~user@178.165.205.148.wireless.dyn.drei.com) (Ping timeout: 250 seconds)
[15:50:44] *** Quits: tomaw (tom@libera/staff/tomaw) (Remote host closed the connection)
[15:56:33] *** Joins: tomaw (tom@libera/staff/tomaw)
[16:07:43] *** Joins: Maaaanu (~manuel@ip5b41c183.dynamic.kabel-deutschland.de)
[16:08:11] *** Quits: holyghost (~holly@109.136.39.83) (Quit: gratin dauphinoise time !)
[16:08:29] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[16:29:15] *** Joins: chenxuezhao (~chenxuezh@120.244.238.3)
[16:30:50] <unixcat647> what perlcritic options do I use to disable the "found use of die. use an exception instead."
[16:30:55] <unixcat647> ^ ?
[16:31:31] <unixcat647> it's just a perl script; exceptions seem like overkill
[16:31:45] * GumbyPAN CPAN Upload: DateTime-Calendar-Julian-0.106 by WYANT https://metacpan.org/release/WYANT/DateTime-Calendar-Julian-0.106
[16:31:45] * GumbyPAN CPAN Upload: DateTime-Calendar-Christian-0.12 by WYANT https://metacpan.org/release/WYANT/DateTime-Calendar-Christian-0.12
[16:32:12] <lopid> https://metacpan.org/pod/Perl::Critic::Policy::ErrorHandling::RequireUseOfExceptions ?
[16:32:12] <Paperbot> Link title(s): [ Perl::Critic::Policy::ErrorHandling::RequireUseOfExceptions - Use exceptions instead of die, croa... ]
[16:32:51] <unixcat647> ah okay, so it's part of Perl-Critic-More
[16:42:39] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[16:44:09] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 265 seconds)
[16:46:34] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 265 seconds)
[16:50:52] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[16:51:14] *** Joins: tobybl (~tobybl@31.111.35.255)
[16:58:13] *** Joins: gggpkm (~gggpkm@111-251-148-94.dynamic-ip.hinet.net)
[17:00:04] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[17:11:42] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[17:14:03] *** Joins: Adura (~Adura@user/adura)
[17:15:48] *** Quits: tejr (~tejr@user/tejr) (Quit: reboot)
[17:16:39] *** Quits: tobybl (~tobybl@31.111.35.255) (Remote host closed the connection)
[17:17:23] *** Quits: chenxuezhao (~chenxuezh@120.244.238.3) (Remote host closed the connection)
[17:17:56] *** Joins: chenxuezhao (~chenxuezh@120.244.238.3)
[17:18:31] *** Quits: chenxuezhao (~chenxuezh@120.244.238.3) (Remote host closed the connection)
[17:18:43] *** Joins: chenxuezhao (~chenxuezh@120.244.238.3)
[17:36:30] *** Joins: tejr (~tejr@user/tejr)
[17:39:15] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 265 seconds)
[17:50:37] *** Quits: aspic (~shifty~~~@ppp121-44-120-81.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[17:55:11] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[18:04:29] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[18:09:13] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[18:09:36] *** Joins: X-Scale` (~ARM@83.223.233.176)
[18:10:23] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[18:10:38] *** X-Scale` is now known as X-Scale
[18:15:07] *** Joins: kensanata (~user@user/kensanata)
[18:18:50] *** Joins: thrig (~thrig@70.97.65.251)
[18:19:07] *** Quits: kensanata (~user@user/kensanata) (Remote host closed the connection)
[18:26:17] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Remote host closed the connection)
[18:26:40] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[18:41:50] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[18:50:50] *** Joins: holyghost (~holly@109.136.39.83)
[19:04:00] *** Quits: normskal (~normskal@101.175.64.73) (Ping timeout: 256 seconds)
[19:06:01] *** Quits: chenxuezhao (~chenxuezh@120.244.238.3) (Remote host closed the connection)
[19:06:37] *** Joins: chenxuezhao (~chenxuezh@120.244.238.3)
[19:10:22] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[19:11:34] *** Quits: chenxuezhao (~chenxuezh@120.244.238.3) (Ping timeout: 265 seconds)
[19:19:29] *** Joins: diskin (~diskin@176.106.23.15)
[19:20:04] <Grinnz> i assume that policy means "exception objects", because as written it makes no sense - die, croak, and confess are functions that throw exceptions
[19:20:26] <Grinnz> but yeah, that would definitely be a personal choice whether to use that policy, not a recommendation
[19:21:45] <aquanight> what about exceptions now?
[19:23:46] <thrig> they lead to exceptional programming
[19:24:38] <aquanight> I actually had a thought earlier this morning about if something like a :throw attribute would be useful
[19:25:09] <aquanight> like :throw() -> if an exception escapes this function it's a full exit, even if inside eval {}
[19:25:09] *** Joins: krismatrix (~krismatri@38.80.149.51)
[19:26:03] <thrig> next you'll be wanting unwind-protect and conditional restarts
[19:27:00] <aquanight> eh?
[19:27:50] <aquanight> C++ has something like this I think
[19:28:47] <thrig> https://gigamonkeys.com/book/beyond-exception-handling-conditions-and-restarts.html
[19:28:48] <Paperbot> Link title(s): [ Beyond Exception Handling: Conditions and Restarts ]
[19:28:50] <aquanight> I mean they had the throw() specifications that trigger std::unexpected (which I think could be escaped with a longjmp but otherwise a forced exit) but I think the newer C++ just has that noexcept junk that just says it's "unspecified behavior" if you somehow let an exception escape
[19:29:10] *** Quits: thrig (~thrig@70.97.65.251) (Remote host closed the connection)
[19:29:14] <aquanight> ok it's lisp so you already lost me
[19:29:56] *** Quits: gggpkm (~gggpkm@111-251-148-94.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[19:30:06] <mst> the Worlolog:: modules on cpan demonstrate the principle in perl
[19:32:10] <aquanight> ok
[19:32:15] <LeoNerd> Presuming that @x is a normal lexical variable, can anyone think of any reason why generated code that looks like  @{ \@x }  shouldn't be simplified to simply  @x  ?
[19:32:32] <LeoNerd> I.e. taking a ref to it then derefing it again.. that should be a noöp, right?
[19:32:54] <aquanight> does it matter if @x is tied?
[19:32:55] <mst> LeoNerd: so long as nobody blessed it
[19:33:08] <aquanight> indeed or blessed
[19:33:40] <LeoNerd> I don't think they'd have the opportunity to.. it's literally  @{ \@x }  not just some  @{ $var }  where var happens to have been \@x
[19:33:44] <mst> I think tie would still be fine, but bless allows @{} overloads
[19:33:46] <aquanight> mst: so if I'm following correctly: the exception is more like a signal sent back up the call stack, with possibility of a response coming back down and returning to the throwing function?
[19:33:56] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[19:34:32] <aquanight> LeoNerd: my @x; my $x = \@x; bless $x, "Thing"; what is Scalar::Util::blessed(\@x) ?
[19:34:46] <LeoNerd> Ohgod those.. :/ bah
[19:34:55] <aquanight> or more simply, is ref(\@x) now "ARRAY" or "Thing"
[19:35:08] <aquanight> (answer: for some dumb reason it's "Thing")
[19:35:18] <aquanight> ... I think.
[19:35:23] <mst> LeoNerd: https://f.perl.bot/p/7m3kku
[19:35:23] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[19:35:31] <aquanight> perlbot: sweval my @x; my $x = \@x; bless $x, "Thing"; ref(\@x);
[19:35:32] <perlbot> aquanight: Thing
[19:35:46] <aquanight> oh good I'm not crazy. Why do I always second-guess these things.
[19:35:47] <LeoNerd> Yeah.. ugh :/
[19:36:04] <aquanight> also what mst said
[19:36:19] <mst> aquanight: because you *are* crazy
[19:36:23] <mst> albeit not wrong in this case
[19:36:25] <aquanight> well yes
[19:36:36] <LeoNerd> That's annoying. OK what about  @{[ THINGS ]}
[19:36:49] <LeoNerd> Should that just yield  THINGS  in list context?
[19:37:03] <aquanight> well at least you specified list context
[19:37:21] <aquanight> actually no
[19:37:27] <aquanight> it's still not a no-op
[19:37:32] <aquanight> depending on what "THINGS" contains
[19:37:35] * mst can't immediately think of a way to sabotage that one
[19:37:48] <aquanight> consider someproc THINGS; vs someproc @{[ THINGS ]}
[19:38:07] <aquanight> if THINGS contains something that's not an lvalue (or has weird ties), the first call receives said thing directly
[19:38:15] <aquanight> while the second will make a copy and put it into a modifiable temporary array
[19:38:40] <aquanight> aka it's relevant in the binding of @_
[19:38:55] <mst> or indeed any aliasing context
[19:39:12] <LeoNerd> Hrm... that's all rather annoying
[19:39:20] <aquanight> sub fuckery { $_ *= 2 for @_; }; fuckery 1, 2, 3 fails (non-modifiable) but fuckery @{[ 1, 2, 3 ]} is ok
[19:39:22] <mst> that's what we're here for?
[19:39:51] <LeoNerd> I was hoping to be able to elide the various ops in   zip( \@xs, \@ys )  or  zip( [XS], [YS] )
[19:40:11] <LeoNerd> By just generating the same optree as I would for  @xs Z @ys
[19:40:20] <aquanight> perlbot: sweval sub fuckery { $_ *= 2 for @_; } fuckery 1, 2, 3;
[19:40:21] <perlbot> aquanight: ERROR: Modification of a read-only value attempted at (IRC) line 1. 
[19:40:27] <aquanight> perlbot: sweval sub fuckery { $_ *= 2 for @_; } fuckery @{[ 1, 2, 3]};
[19:40:29] <perlbot> aquanight: No output.
[19:40:52] <aquanight> there are probably more specific cases where you could peephole it
[19:40:57] <LeoNerd> Currently I'm generating the optree for  @{ \@xs ) Z @{ \@ys }  or similar with the anon arrays... since I'm just immediately unpacking them again I thought it'd be nice to elide those
[19:41:01] <aquanight> like for certain builtin operators
[19:41:16] <LeoNerd> In the case of zip *specifically*, I think that should be safe, because zip doesn't try to modify its args
[19:41:25] <LeoNerd> But yes I suppose more in general that wouldn't necessarily apply
[19:41:48] <mst> LeoNerd: could always go with a \@\@;\@\@\@\@\@\@\@\@ proto ?
[19:41:56] <mst> List::MoreScreaming
[19:42:24] <aquanight> mst actually suggesting a prototype? *gasp*
[19:42:59] <mst> aquanight: I do, indeed, sometimes troll?
[19:43:04] <aquanight> but honestly if you're making custom syntax then targeting your specific scenario might be okay but in that case why can people not write @x Z @y in the first place?
[19:43:21] <aquanight> mst: but of course
[19:43:47] <LeoNerd> aquanight: Only perl with PL_infix_plugin can parse that; most of the infix operators also register a wrapper function to let "lesser perls" still have access to i
[19:43:49] <LeoNerd> *it
[19:44:19] <LeoNerd> In the case of scalar/scalar ops (e.g. equ) that wrapper func has a callchecker on it that can optimize out most of the actual calls
[19:44:47] <LeoNerd> I'm attempting to do the same for list/list ops
[19:44:48] <mst> aquanight: prior "art"; https://metacpan.org/dist/List-MoreUtils/source/lib/List/MoreUtils/PP.pm#L520
[19:44:48] <Paperbot> Link title(s): [ lib/List/MoreUtils/PP.pm - metacpan.org ]
[19:44:52] *** Joins: thrig (~thrig@65.113.153.50)
[19:45:07] <aquanight> mst: jesus christ
[19:45:35] <mst> aquanight: look, it's been years since people have made that mistake, and I'm not even wearing sandals today, come the fuck on
[19:46:58] <aquanight> mst: needs more \@s tho
[19:47:04] <aquanight> what if I have a hundred arrays to zip?
[19:47:45] <thrig> List::EvenMoreUtils::ElectricBoogaloo
[19:47:53] <aquanight> anyway
[19:47:56] <mst> aquanight: &zip(...)
[19:48:22] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[19:49:23] <LeoNerd> Hmm. On further thought: I think the \@x one is pretty obscure, and perhaps I might just implement it anyway and document "hey, so this is a bit weird we suggest not doing that"
[19:50:03] <LeoNerd> For [@x] though, it's quite a common technique to want to wrap args in another arrayref, to indeed make a (shallow) copy of them for .. whatever reason. It would be kinda rude to appear to break that
[19:50:30] <LeoNerd> But maybe some flag on the operator registration that says "I promise not to mutate my arguments, so you can safely unwrap an OP_ANONLIST if you want"
[19:51:24] *** Quits: darxun (sid504814@id-504814.tinside.irccloud.com) ()
[19:51:40] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[19:52:20] <thrig> usually so you don't need to chase down horrible bugs because @x got changed somewhere
[19:52:39] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 265 seconds)
[19:53:38] <LeoNerd> It does mean if you did actually want to do that you'd have to double-wrap it in what looked like terrible code of  zip( [ [ @copy_of_xs ]->@* ], ... )
[19:54:36] <mst> LeoNerd: honestly, I was thinking the \@x one was valid to document
[19:55:05] <mst> LeoNerd: and, I mean, when it's *me* saying "honestly, sure, you can take that piece of pure perl crack away and I won't mind" ... :D
[19:55:47] *** Quits: holyghost (~holly@109.136.39.83) (Quit: bbl)
[19:58:48] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[19:59:29] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[19:59:59] <LeoNerd> Mmm :)
[20:01:38] <LeoNerd> Oooh thinking of lvalues, aliasing, and so on... should mesh/M actually do that?
[20:01:55] <mst> personally I despise that map/grep alias
[20:01:57] <LeoNerd> Since M is just a reärrangement of its input arguments
[20:02:15] <mst> so I would tend to default to "NO! NO! NO! NO! NO!"
[20:02:17] <LeoNerd> $_++ for @x M @y;   # have we just mutated all the values in @x and @y ?
[20:02:21] <mst> actually, more importantly
[20:02:41] <mst> I would default to "don't do that to begin with, because you can add it but you can't remove it"
[20:03:06] <LeoNerd> Imean,... it -happens- to do that now but only accidentally because I forgot
[20:03:20] <LeoNerd> and actually zip does too; I think if you mutate values inside the returned arrayrefs it mutates the original
[20:03:30] *** Joins: magla (~gelignite@55d42346.access.ecotel.net)
[20:04:25] <LeoNerd> $ bleadperl -Mblib -MSyntax::Operator::Zip -E 'my @n = (1..3); $_++ for @n M (4..6); say @n'
[20:04:25] <LeoNerd> 234
[20:04:27] <LeoNerd> oops
[20:04:44] <LeoNerd> Same if you   $_->[0]++ for @n Z (4..6);
[20:05:37] <mst> I would tend to say "release with that disabled, add it back later if people think it's worth it'
[20:05:56] <LeoNerd> Z:alias  M:alias  if you really wanted that
[20:05:59] <LeoNerd> (I really want adverbs)
[20:06:09] <mst> I mean, that's cute, but it's not a priori clearly "I want that footgun and to break those optimisation possibilities" cute
[20:06:36] *** Quits: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[20:06:53] *** Joins: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[20:13:10] * LeoNerd -> shopping bikeride, to think further
[20:13:14] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[20:16:19] <The_Blode> Good evening all. I know someone explained this to me the other day...but could I have a dumbed down explanation of $| = 1;
[20:16:27] <The_Blode> What is Perl doing with this line buffering?
[20:16:45] <The_Blode> Is the line buffering useful with Perl scripts?
[20:16:52] <thrig> generally one uses $fh->autoflush(1) these days
[20:17:14] <The_Blode> What are we accomplishing with flushing / disabling the buffering?
[20:17:17] <huf> you only use $| when you want your pipes pipin' hot
[20:17:19] <huf> IIRC
[20:18:05] <huf> The_Blode: turning on autoflush makes the bytes go out of your process as soon as you write them
[20:18:18] <huf> instead of sitting around in a buffer in your process until the time is right
[20:18:47] <The_Blode> I see. Could leftover data in the buffer cause issues with new data I'm working with later in the script's processing?
[20:18:55] <huf> no
[20:19:21] <The_Blode> Is there any reason why leaving the data in the buffer could be a problem?
[20:19:42] <thrig> it goes poof if the process goes poof
[20:19:56] <thrig> for some reason standard error is unbuffered by default
[20:20:04] <Grinnz> the only time you need autoflush is if what you're sending the data to needs it immediately
[20:20:11] <Grinnz> otherwise, just let the buffer do its thing
[20:20:37] <The_Blode> Ok thank you guys for helping. I think I've got more understanding. So in one of my Perl scripts, I'm reading from STDIN
[20:20:41] <Grinnz> you can also use ->printflush($data) or ->flush to do it manually
[20:20:52] *** Joins: gast0n (~g4570n@user/gast0n)
[20:20:53] <The_Blode> And I'm also using STDERR
[20:21:09] <The_Blode> And printing to the console too.
[20:21:55] <thrig> (buffering doesn't do much if you're emitting, say, big JSON blobs)
[20:22:40] *** Joins: Trigon (~reuben@144.39.114.115)
[20:22:46] <The_Blode> I don't know if this is the right place to ask. I'm not the best programmer, far from it but I have heard the term BLOB before but don't quite know what it is. Is it JavaScript stuff? Should I ask there?
[20:23:03] <The_Blode> Is BLOB general programming concept?
[20:23:16] <huf> this wasnt that though
[20:23:18] <LeoNerd> buffering simply delays the eventual output of data. It doesn't otherwise change -what- data is printed
[20:23:19] <huf> this was just "blob"
[20:23:27] <El_Che> blob has many meanings
[20:23:47] <thrig> (at the C level on unix all sorts of horrible buffering things can happen. but Perl hides those pretty well)
[20:23:48] <LeoNerd> It's only really of interest for things like interactive progress-reporting, or if you're outputting incremental search results and someone might pipe it through grep, or somesuch similar situation
[20:24:01] <El_Che> in a db it's a Binary Large Object
[20:24:21] <The_Blode> So I could store binary data in my MariaDB db?
[20:24:25] <El_Che> yes
[20:24:28] <The_Blode> Like say, a sound file?
[20:24:31] <El_Che> yes
[20:24:34] <The_Blode> Interesting.
[20:24:45] <The_Blode> I've learned something very new today thank you.
[20:24:49] <mst> The_Blode: in Olde mysqls TEXT and BLOB were the same thing
[20:24:55] <El_Che> or something encoded in something non native, or something big, etc
[20:25:08] <huf> or text that you dont want fucked with
[20:25:12] <The_Blode> I could upload files to my DB...as binary. This could have interesting usecases.
[20:25:16] <mst> The_Blode: I still remember when they changed that, because some people were using TEXT fields to store their web app session data
[20:25:49] <mst> and then they upgraded mysql and of course since mysql is terrible it silently truncated the data at the first not-TEXT-anymore character and completely destroyed their applications
[20:25:50] <The_Blode> Also, I've heard on another channel that Perl is officially dead. The project is now known as Rast (or RAST) is this true?
[20:26:07] <mst> there is a spinoff from perl called Raku
[20:26:13] <The_Blode> My bad
[20:26:15] <mst> which is another language in the same family
[20:26:20] <The_Blode> I meant Raku but got the name wrong
[20:26:31] <The_Blode> So it's a spinoff not a replacement
[20:26:38] <mst> perl is very much alive, raku is very definitely *a* perl and worth looking into if you're curious
[20:26:39] <El_Che> it's not because you could, you should though
[20:26:49] <El_Che> bbl
[20:26:55] <The_Blode> Later El Che
[20:27:00] <The_Blode> I'm using Perl 5 still
[20:27:08] *** Joins: EGD (~egd@user/egd)
[20:27:09] <mst> perl5 is the name of the language
[20:27:13] <mst> the current major version is 34
[20:27:27] <The_Blode> I believe Perl 5 was released in the early 2000s
[20:27:32] *** Joins: diskin_ (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[20:27:33] *** Quits: diskin (~diskin@176.106.23.15) (Killed (sodium.libera.chat (Nickname regained by services)))
[20:27:33] *** diskin_ is now known as diskin
[20:27:34] <mst> we've been putting out a major version annually for years now
[20:27:59] <mst> there was a period where raku was expected to become perl6 and replace perl but that's not going to happen, hence them renaming to raku to make that clear
[20:28:16] <mst> but there's lots of people who use both and participate in both communities
[20:28:21] <mst> and we steal ideas in both directions
[20:28:37] <thrig> 1994 is pretty close to the early 2000s
[20:29:05] <mst> but perl5 version 34 is a substantially more awesome language than the first release was
[20:30:13] *** Joins: proller (~p@80.240.216.69)
[20:31:10] <Grinnz> feel free to inform whatever channel told you that that they're either 20 years out of date or misinformed
[20:31:25] <Grinnz> and not listen to them about perl information anymore
[20:33:05] <The_Blode> Perl 5 was released in 1994??
[20:33:19] <The_Blode> I appreciate everything you and the council are doing to keep this language alive.
[20:33:27] <The_Blode> And Larry's invention lives on
[20:33:39] <mst> he's cool
[20:33:46] <mst> I get on better in person with his wife though
[20:33:50] <mst> cos she's also a sarcastic bastard
[20:34:01] <huf> yes, the children of the night make beautiful music :D
[20:34:01] <The_Blode> I read something online this year about "Top 5 Dead Languages in 2021" and I hate to say it but Perl was on it. But a language can never truly die anyways aslong as people are using it.
[20:34:15] <Grinnz> perl is on many such ignorant lists
[20:34:19] <huf> The_Blode: stop reading stuff with "top x" in it
[20:34:20] <mst> The_Blode: people have been calling perl 'dying' for 20 years
[20:34:22] <mst> and yet :D
[20:34:31] <thrig> BSD, also dying, etc
[20:34:37] <The_Blode> I was trying to search for "What employers are looking for"
[20:34:53] <Grinnz> people who make those lists are generally only motivated by pushing whatever their favorite language is
[20:35:09] <The_Blode> Got it
[20:35:21] <thrig> and getting ad revenue from clickbait articles, maybe
[20:35:37] <huf> yeah, some of them just repackage that famous ranking site
[20:35:39] <huf> what's it called
[20:35:39] <The_Blode> And to be honest with you, this whole Python craze...I just don't get it personally...I like Perl over Python personally.
[20:35:43] <mst> The_Blode: that's a fair thing to search for, and perl jobs aren't (for example) as easy to find as python jobs
[20:35:45] <huf> tiobe? something of that sort
[20:35:53] <mst> but I like perl way better so I keep doing that
[20:35:59] <huf> isnt the python craze long over now?
[20:36:09] <huf> it's dead! :D
[20:36:14] <Grinnz> people are trying very hard to keep it from being over
[20:36:19] <The_Blode> Only problem is, am I limiting myself by choosing Perl over Python since the vast majority of projects are writing in Python not Perl.
[20:36:22] <Grinnz> and so it isn't yet
[20:36:23] <huf> Grinnz: so it is over then.
[20:36:25] <The_Blode> Although the CPAN is still going strong it seems
[20:36:27] <mst> thrig: my favourite period was back in ... '03 or '04? when I kept reading 'perl is dying' and 'BSD is dying' articles on slashdot, based on netcraft data
[20:36:35] <huf> Grinnz: you dont have to actively try to keep it from being over while it's on
[20:36:49] <Grinnz> i'm sure there are plenty of python is dead articles out there too, and i'd not care about them much either
[20:36:57] <huf> me neither, obviously
[20:37:07] <mst> thrig: and slashdot ran using perl on FreeBSD, and netcraft ran using perl on FreeBSD and debian, and I was working for netcraft running the web server survey ;)
[20:37:14] <Grinnz> now if someone wrote a js is dead article, then i'd laugh in their face
[20:37:33] <thrig> but they'd probably get lots of clicks!
[20:37:53] <huf> and questions about their time machine and how it works
[20:38:12] <mst> Grinnz: I've definitely seen 'ruby is dying' articles
[20:38:20] <thrig> because xkcd://386
[20:38:26] * leont is working on a blogpost on just that, actually
[20:38:27] <Grinnz> i've seen those yes
[20:38:44] <huf> all languages are dead or dying except the ones that are at their peak at this very moment, and the ones that havent exploded yet (or never will)
[20:38:54] <huf> that's how this stupid category works
[20:38:57] <thrig> the sun is dying!
[20:38:57] <huf> it's why it's stupid
[20:39:48] <huf> in reality, it's a slow gradual process
[20:39:57] <huf> the flowers wilt in their crown first
[20:40:09] <huf> their seat becomes uncomfortable
[20:40:30] <huf> eventually it gets to misplacing hammers their fathers had put just there the other day
[20:41:05] <mst> The_Blode: anyway, I will happily admit that in terms of 'percentage of jobs to apply for' other languages do better than perl, but equally many of the people in this channel, myself included, still do write perl for a living, and in terms of your own projects, "so long as you're enjoying yourself, keep doing that" applies
[20:42:56] <The_Blode> Thank you mst 
[20:43:22] <The_Blode> I'm working on an open source project which has Perl at it's core and is so symbiotic, it would cease to exist without it.
[20:43:35] <mst> oooh, which one?
[20:43:38] <The_Blode> ViCiDial
[20:43:56] <The_Blode> It's an open source dialler
[20:44:31] <mst> damnit, where's the repository
[20:44:41] <mst> (he says after clicking around the website a bit)
[20:44:55] <The_Blode> One moment I'll link it
[20:45:14] <mst> my team at shadow.cat wrote an incoming call routing system for a rent-a-receptionist type service a couple years back
[20:45:19] <The_Blode> svn://svn.eflo.net:3690/agc_2-X/
[20:45:23] <mst> and work quite a bit with VOIP people
[20:45:25] <The_Blode> It's Subversion
[20:45:31] <mst> that's fine, I recognise
[20:45:33] <The_Blode> Nice
[20:45:44] <The_Blode> Yeah, the magic here is with Perl
[20:46:04] <The_Blode> It's how I learned Perl
[20:46:11] <mst> I first joined the perl community managing subversion repositories for things I wasn't actually a committer to yet
[20:46:19] <The_Blode> I still have yet to go through the Llama bookk
[20:46:40] <The_Blode> 4 years later and I'm still learning new things all the time.
[20:46:53] <mst> don't bother
[20:47:08] <mst> read ovid's 'beginning perl' (it's not just a beginner book) then chromatic's 'modern perl'
[20:47:11] <The_Blode> One word to describe Perl; "quirky" is the one I would choose.
[20:47:12] <mst> and you'll learn way more
[20:47:19] <mst> yes, I'll go with that :D
[20:47:24] <The_Blode> Thank you man I'll amazon them
[20:48:00] <mst> amusingly, both the authors have fallen out with me since I first started recommending them, but that's because I'm an asshole and the books are still awesome :D
[20:48:32] <The_Blode> Ovid?
[20:48:37] <The_Blode> Is this the author?
[20:48:50] <huf> yeah he's an immortal
[20:48:57] <leont> XD
[20:49:14] <The_Blode> He comes up as Curtis Poe
[20:49:31] <thrig> rumor has it Ovid is good at Metamorphoses
[20:50:04] <The_Blode> Thanks for the book recommendations.
[20:50:17] <huf> there's also Ov if you dont need the meta
[20:50:22] * mst facepalms
[20:51:03] <mst> The_Blode: btw, I actually figured out how to rebase an svn repository back in the day
[20:51:19] <The_Blode> Nice
[20:51:24] <mst> The_Blode: all you need is direct access to the fsfs store, a knowledge of the format, shell and some perl one liners
[20:51:27] <mst> I don't -recommend- it
[20:51:33] <mst> but it was occasionally really useful
[20:51:40] <The_Blode> Also, is it a far assumption to say that PHP is a bustardization of the Perl programming language and C programming language?
[20:51:52] <huf> no
[20:52:09] <mst> the original PHP definitely had some 'simplified C/perl' vibes
[20:52:10] <The_Blode> There are some Perl like elements I found in PHP
[20:52:25] <huf> yeah, but its nature is all its own
[20:52:39] <mst> meh
[20:52:45] <mst> PHP is easy
[20:52:47] <The_Blode> Ok cool thanks huf I wasn't around during the early days of PHP
[20:52:57] <mst> just take everything you know about programming, then smash it against child pornography
[20:52:59] <The_Blode> PHP came in the mid 90s
[20:53:10] <The_Blode> PHP is rather forgiving I would say
[20:53:11] <huf> yeah, it's not a nice nature
[20:53:42] <The_Blode> Perl is also forgiving for bad programmings with the absence of strict mode.
[20:53:42] <mst> personally, I seriously dislike PHP the language, but I am -very- impressed with that PHP the community has achieved with it in spite of the language
[20:54:10] <mst> then again the last time I, personally, wrote PHP in anger, was during the 3.x or 5.x days
[20:54:19] <mst> and believe me there was *lots* of anger
[20:55:03] <mst> The_Blode: aha, this project is asterisk integrated right? (I just saw an agc copy go past in my git-svn clone)
[20:55:07] <The_Blode> Someone on here told me about Mojolicious and I excitedly told my colleague at work and he just flatout told me "Don't bother Perl is dead"
[20:55:13] <The_Blode> But Mojo seems promising
[20:55:20] <mst> mojo is awesome
[20:55:24] <The_Blode> Yes it's Asterisk integrated
[20:55:47] <The_Blode> So I am somewhat active in #asterisk too
[20:55:50] <mst> your colleague is ignorant, albeit understandably so
[20:55:56] <The_Blode> That is a whole other ballpark too
[20:56:34] <mst> there's a VOIP provider somewhere whose webhook and event tracking system is handled by a mojo websocket server backed by zeromq that shadow.cat wrote for them
[20:57:01] <mst> (being slightly vague because I forget what set of NDAs are involved in the contract ;)
[21:00:24] <mst> The_Blode: btw, there is now also a mojo.js - maybe you could use that as a gateway drug for your colleagues :D
[21:04:40] * mst really should have just done a plain svn co rather than a git-svn clone but I'm way too addicted to git now I don't manage svn repos anymore
[21:05:30] <thrig> SVN ate my files so I went back to CVS
[21:06:46] <mst> thrig: the old bdb based storage had a tendency to do that - fsfs I never had a problem with - but I didn't honestly mind CVS either
[21:07:21] * mst remembers maintaining a CVS repository on a solaris 2.6 box because the alternative was Visual SourceUnsafe and. just. no.
[21:08:53] <thrig> one must perforce do what is necessary
[21:09:41] <mst> prior to that my approach was "check it into VSS but also maintain at least two backups on different machines so I could recover it when VSS ate my files"
[21:14:20] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[21:15:10] <rbraun> i'll just leave this here https://www.sfwmd.gov/our-work/python-program
[21:15:10] <Paperbot> Link title(s): [ Python Elimination Program | South Florida Water Management District ]
[21:18:24] <mst> LOL
[21:21:35] *** Quits: Su-Shee (~Susanne@p4ff49b58.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[21:22:51] *** Joins: Su-Shee (~Susanne@p50894ee3.dip0.t-ipconnect.de)
[21:23:32] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:24:28] <veesh> i did a mojo project with asterisk not too long ago
[21:24:38] <veesh> was underwhelmed by the REST API it exposed
[21:36:17] * GumbyPAN CPAN Upload: Geonode-Free-ProxyList-0.0.1 by JULIODCS https://metacpan.org/release/JULIODCS/Geonode-Free-ProxyList-0.0.1
[21:37:28] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[21:39:55] *** Quits: ether (~karene@user/ether) (Changing host)
[21:39:55] *** Joins: ether (~karene@perl/cpan-druid/ether)
[21:44:54] *** Joins: horsepatat (~horsepata@80.89.79.255)
[21:49:53] <mst> heh, now I want to try and get PSC members marked as @perl/coxswain and 'core team' members marked as @perl/oarsman
[21:50:17] <thrig> but you can't have everyone with a beard on the same side of the boat
[21:54:28] <krismatrix> Anybody here use OpenCV either with python or with the Cv perl module?
[21:55:02] <krismatrix> I am more interested in the perl module...and I am not sure I understand to how connect the equivalent python method to the perl method.
[21:55:38] *** Joins: Ben10 (~Ben10@37.120.130.28)
[21:56:19] * GumbyPAN CPAN Upload: Net-Async-Redis-3.016 by TEAM https://metacpan.org/release/TEAM/Net-Async-Redis-3.016
[21:59:16] <mst> krismatrix: I don't know it at all but I would note that if Cv is annoying you, using FFI::Platypus to bind directly to libopencv would also be an option
[22:00:44] <krismatrix> Not annoying me exactly. The metacpan module doesn't tell you (i think) all the methods that are available to you with opencv. Opencv has a lot...so I am guessing either the perl Cv is very limited OR the author is assuming that one can 'somehow' figure out the equivalent perl method names from C++ or Python.
[22:01:14] <krismatrix> As for FFI::Platypus...i would very much like to take some time to learn it. I just don't know what or where to start.
[22:06:41] <Grinnz> i would start by making bindings to some simple stdlib functions like i did
[22:07:06] <Grinnz> https://metacpan.org/dist/Unix-Groups-FFI/source/lib/Unix/Groups/FFI.pm
[22:07:06] <Paperbot> Link title(s): [ lib/Unix/Groups/FFI.pm - metacpan.org ]
[22:07:32] <Grinnz> when it's not stdlib, you have to set up the appropriate alien dependency and that's complex
[22:07:38] <Grinnz> but the ffi interface is the same
[22:07:41] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:09:31] <krismatrix> ah...an example. Thanks Grinnz...I'll take a look. I have wanted to learn aout bindings for a while, but no foundation. Let me see if I follow your code.
[22:12:01] <Grinnz> most of the complexity is that i wrote wrappers to make the interface more perlish, like throwing exceptions for errors
[22:12:14] <Grinnz> and working around the terrible interface of getgrouplist
[22:12:47] *** Joins: ZZzz (~ZZzz@213.57.70.61)
[22:13:03] <Grinnz> the hardest part (for me) is thinking in C again, as to how to call these functions and deal with their args/results
[22:13:41] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[22:16:57] *** Joins: anthk_ (~anthk_@106.83-213-54.dynamic.clientes.euskaltel.es)
[22:19:51] <krismatrix> right.
[22:19:59] *** Quits: horsepatat (~horsepata@80.89.79.255) (Read error: Connection reset by peer)
[22:20:43] <krismatrix> what i don't know now is...getops, puts...the examples I am seeing, are things that I can do a man page on in linux.
[22:20:55] <krismatrix> I don't know how to do the same with opencv or libopencv.
[22:21:22] * GumbyPAN CPAN Upload: Mock-Data-0.03 by NERDVANA https://metacpan.org/release/NERDVANA/Mock-Data-0.03
[22:21:51] <Grinnz> you'll need some sort of documentation as to the functions to attach, yeah
[22:22:33] <thrig> (which in the case of SDL2 can be "read the headers, lol!")
[22:22:44] <thrig> I guess they have a wiki somewhere, too
[22:22:51] <mst> krismatrix: so, generally, this stuff involves reading the docs and/or source code
[22:23:10] <krismatrix> shoot..the opencv documentation are terrible. Maybe I need to find something easier to poke around platypus.
[22:23:23] <mst> thrig: I'd say "you can't scare me, I've written Inline::C bindings to OpenSSL" but honestly the thought of doing that again absolutely *does* scare me
[22:26:21] *** Parts: Ben10 (~Ben10@37.120.130.28) ()
[22:26:22] * GumbyPAN CPAN Upload: PDL-LinearAlgebra-0.23 by ETJ https://metacpan.org/release/ETJ/PDL-LinearAlgebra-0.23
[22:30:22] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 260 seconds)
[22:33:56] <Grinnz> oh god
[22:34:26] <Grinnz> that made me consider FFI ssleay bindings and also that i might do that someday
[22:36:10] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Ping timeout: 252 seconds)
[22:37:13] <mst> Grinnz: I would actually help. I'll never get rid of the trauma anyway so I may's well get some use out of it.
[22:44:43] *** Joins: semeion (~semeion@user/semeion)
[22:56:54] *** Joins: ThrashCardiom (~tich@202.137.243.7)
[22:57:03] <thrig> refactor to cleanup! 483 lines -> 440 lines. moar features -> 536 lines, and counting
[23:06:44] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:14:44] *** Quits: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[23:14:54] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[23:15:21] *** Joins: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[23:17:53] *** Quits: EGD (~egd@user/egd) ()
[23:18:33] <rbraun> "ssleay" is a series of 6 letters i haven't seen in a long time
[23:19:03] <mst> rbraun: a more inelegant weapon, for a less civilised age
[23:19:42] <rbraun> lol
[23:19:45] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[23:20:05] <rbraun> why would anyone use it... onw
[23:20:07] <rbraun> why would anyone use it... now
[23:20:16] <rbraun> or write bindings for it, or
[23:20:27] <mst> rbraun: Net::SSLeay is still part of the usual perl SSL stack
[23:20:28] <Grinnz> because it's still a library name
[23:20:38] <Grinnz> it was just renamed to openssl in common parlance
[23:20:44] <rbraun> oh hm
[23:21:04] <mst> so if we're thinking in perl more than in C that's the name that will often come to mind
[23:21:12] * rbraun nod
[23:22:19] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 252 seconds)
[23:24:47] *** Quits: ZZzz (~ZZzz@213.57.70.61) (Quit: ZZzz)
[23:25:17] *** Joins: ZZzz (~ZZzz@213.57.70.61)
[23:27:57] *** Quits: proller (~p@80.240.216.69) (Read error: Connection reset by peer)
[23:29:40] *** Joins: emanuele6 (~emanuele6@net-2-36-148-164.cust.vodafonedsl.it)
[23:29:44] *** Quits: emanuele6 (~emanuele6@net-2-36-148-164.cust.vodafonedsl.it) (Changing host)
[23:29:44] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[23:29:48] *** Joins: zyweo (~Svew@user/zyweo)
[23:29:53] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:31:03] *** Joins: krismatrix (~krismatri@38.80.149.51)
[23:31:29] * GumbyPAN CPAN Upload: App-Music-ChordPro-5.984 by JV https://metacpan.org/release/JV/App-Music-ChordPro-5.984
[23:34:25] *** Quits: ZZzz (~ZZzz@213.57.70.61) (Ping timeout: 252 seconds)
[23:39:59] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[23:41:08] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[23:41:55] *** Joins: kensanata (~user@user/kensanata)
[23:45:45] *** Joins: ZZzz (~ZZzz@213.57.70.61)
[23:50:12] *** Joins: proller (~p@80.240.216.69)
[23:50:27] *** Quits: ZZzz (~ZZzz@213.57.70.61) (Client Quit)
[23:52:30] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 260 seconds)
