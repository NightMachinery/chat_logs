[00:02:08] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[00:04:13] *** Joins: matty_ma1 (~matt@129.222.239.110)
[00:07:34] *** Joins: matty_matt (~matt@129.222.239.110)
[00:08:38] *** Quits: struchu (~struchu@staticline-31-183-169-189.toya.net.pl) (Quit: WeeChat 3.3)
[00:10:18] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[00:14:10] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[00:16:51] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[00:18:10] *** Joins: matty_ma1 (~matt@129.222.239.110)
[00:21:19] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:22:37] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[00:26:37] *** Joins: matty_matt (~matt@129.222.239.110)
[00:26:57] *** Joins: matty_ma1 (~matt@129.222.239.110)
[00:30:37] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[00:34:00] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[00:40:14] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[00:41:34] *** Quits: egli (~user@193-47-178-139.dyn.fiber.qlnet.ch) (Remote host closed the connection)
[00:42:22] *** Joins: matty_ma1 (~matt@129.222.239.110)
[01:00:29] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[01:01:31] *** Joins: matty_ma1 (~matt@129.222.239.110)
[01:12:53] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Remote host closed the connection)
[01:13:31] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[01:21:21] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[01:22:10] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[01:23:17] *** Joins: matty_ma1 (~matt@129.222.239.110)
[01:28:43] <aphyr> nivekuil: Yeah, there are generally performance costs for functional versions of things. Sometimes the functional version is dramatically faster, but I think it's probably 5/6th of the time the mutable implementation is faster.
[01:29:57] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[01:30:32] <aphyr> I've done a fair bit of Gnarly Perf Work in Clojure--it's absolutely possible, but sometimes it's a bit of a pain to go As Fast As You Know The Runtime Can Go.
[01:30:42] *** Joins: matty_ma1 (~matt@129.222.239.110)
[01:32:56] <aphyr> I'd say about 2/3rds of my perf bottlenecks are "algorithmic" in nature, and I can change the shape of the code without really abandoning Clojure's forms. For instance, this is a faster implementation of a java PriorityQueue which reduces contention by striping across multiple underlying queues: https://github.com/jepsen-io/knossos/blob/master/src/knossos/prioqueue.clj
[01:34:41] <aphyr> A lot of perf stuff is just like "oh, it needed reflection here" and adding a type hint buys you a 10x speedup
[01:35:01] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[01:35:47] *** Joins: matty_ma1 (~matt@129.222.239.110)
[01:35:56] <aphyr> Then there's the really rare cases where like, oh, no, just looking up `(:type operation)` is costing me a ton and I need to write my own version of a Clojure map with very particular performance characteristics. https://github.com/jepsen-io/knossos/blob/master/src/knossos/wgl.clj#L31-L190
[01:36:32] <aphyr> Down this path lies madness, BTW. You should not, as a beginner, ever care about this. ;-)
[01:40:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:41:15] <aphyr> About a third of the time it's stuff like "oh, I needed to back off to using a raw array and writing my own binary search instead of a hashmap", and that code is A Little Weird but not super scary.
[01:41:49] *** Joins: joe_colben (~joe____co@185.190.112.211)
[01:43:49] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[01:43:54] <aphyr> As an example, take a look through https://github.com/jepsen-io/knossos/blob/master/src/knossos/linear/config.clj, which shows a simple "idiomatic clojure" version of a map, then one with a little memoization, then one which does a bunch of Weird Array Tricks. Might be a good way to get a feel for the continuum of performance optimization.
[01:44:35] *** Joins: matty_ma1 (~matt@129.222.239.110)
[01:46:32] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Ping timeout: 256 seconds)
[01:48:59] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:53:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:57:22] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[01:57:45] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[02:00:08] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[02:08:52] *** Joins: matty_ma1 (~matt@129.222.239.110)
[02:09:30] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:26:37] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[02:27:03] *** Joins: matty_ma1 (~matt@129.222.239.110)
[02:27:25] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Ping timeout: 240 seconds)
[02:28:41] *** Quits: seabass (~seabass@user/seabass) (Quit: leaving)
[02:34:31] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[02:35:25] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[02:35:30] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[02:36:41] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:36:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[02:36:57] *** Joins: matty_ma1 (~matt@129.222.239.110)
[02:38:17] *** Joins: matty_matt (~matt@129.222.239.110)
[02:42:20] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:3765:ef25:7a58:da66)
[02:42:29] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[02:44:37] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[02:49:29] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:50:27] *** Joins: matty_ma1 (~matt@129.222.239.110)
[02:55:11] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:3765:ef25:7a58:da66) (Ping timeout: 268 seconds)
[02:58:17] <jeaye> aphyr: Writing your own map to optimize `(:foo bar)` is likely overkill. Type hinting and calling the Java method on the map will be a huge win: https://tech.redplanetlabs.com/2020/09/02/clojure-faster/#dramatic-gains-with-type-hinting
[02:58:37] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[02:59:49] <aphyr> jeaye: oh, I tried. This is the result of many, many hours with Yourkit. :-)
[03:01:22] <aphyr> (.get m :foo) doesn't really handle this. What's happening here is that Clojure maintains a monomorphic cache at each keyword callsite, and we're allowing that to resolve into code that does a direct field access instead of a linear scan through map keys
[03:02:22] <jeaye> (.valAt ^clojure.lang.PersistentArrayMap m :foo) more likely.
[03:03:29] <jeaye> I've optimized ~90% off some functions by using .valAt on maps, .equals to compare, and adding type hints to everything.
[03:03:44] <jeaye> Could be that wasn't enough for you; it's enough in the vast majority of cases, though.
[03:03:52] <aphyr> Agreed, this is the extreme case.
[03:04:00] <aphyr> Here, let me double-check
[03:04:40] <jeaye> Would be interested in the criterium numbers between the type-hinted version and your version.
[03:07:32] <nij-> Hello! (doc nth) returns the docstring for nth (https://github.com/clojure/clojure/blob/clojure-1.10.1/src/clj/clojure/core.clj#L889). How about the "doc map" of nth? (line 894~896)
[03:09:21] <jeaye> That's the metadata map, nij-, not the doc map.
[03:09:29] <ridcully> nij-: (meta #'nth)
[03:09:41] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[03:10:24] <jeaye> Though the docstring will end up being in the `:doc` key of the meta map.
[03:11:06] *** Joins: matty_ma1 (~matt@129.222.239.110)
[03:11:24] <aphyr> jeaye: Custom map looks roughly 10x faster.
[03:12:19] <aphyr> https://gist.github.com/aphyr/9f9c560e15ca6fc96bb5e467950d3ebe
[03:14:10] <aphyr> And if you think about what the compiler's doing here, it should make sense. The type-hinted valAt call dispatches directly to the valAt implementation of arraymap, sure, but that implementation is still doing a linear scan over the array and comparing keyword equality at each point
[03:16:17] <aphyr> Whereas once the :foo callsite's been invoked, it's got the ILookupThunk cached. It does a single comparison on the class of the map to double-check it's still a wgl.Op, which is pretty cheap, and if it is, jumps into... I think an invokeVirtual on the ILookupThunk, which should also be fairly JIT-friendly. That ILookupThunk#get does a single class identical? comparison and if it passes, immediately jumps 
[03:16:23] <aphyr> to a field access on the object. Waaay friendlier to branch prediction.
[03:16:50] <aphyr> invokeInterface, maybe? Not sure, I haven't been into the compiler's guts in a while
[03:17:09] <aphyr> Either way, it's in practice monomorphic here, and hotspot is *real* good at that
[03:19:03] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Remote host closed the connection)
[03:19:06] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[03:20:36] <nij-> Oh Thanks!... what's the difference between `nth` and `#'nth`?
[03:25:33] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[03:25:40] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[03:29:01] *** Joins: matty_ma1 (~matt@129.222.239.110)
[03:29:53] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[03:33:38] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[03:35:49] *** Joins: matty_ma1 (~matt@129.222.239.110)
[03:36:03] <jeaye> nij-: #'nth gets the var of nth. nth alone implicitly derefs the var to get the value.
[03:39:19] <jeaye> aphyr: Neat.
[03:40:01] <jeaye> Not generic, though.
[03:40:13] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:cb46:c04b:665a:c687) (Ping timeout: 240 seconds)
[03:42:27] <jeaye> aphyr: Also, that's not doing a single identical? check; it's doing a linear scan as well, since it's using condp with identical?
[03:42:57] <jeaye> Still faster than a linear equality check though, we can assume.
[03:44:02] <aphyr> jeaye: nope
[03:44:48] <aphyr> The point of the keyword callsites is that you can cache them! After the first use, getLookupThunk doesn't have to be invoked again
[03:45:13] <aphyr> So that condp happens once, on first invocation, as and long as subsequent invocations of the same callsite have the same first arg, they dispatch immediately to the cached ILookupThunk
[03:45:44] <jeaye> I see.
[03:45:51] <jeaye> Very neat.
[03:46:09] <aphyr> It's a little weird, and one of the reasons why (:foo bar) can be faster than (get bar :foo)
[03:46:10] <jeaye> I'm correct that it's limited to hard-coded keywords, though, yes?
[03:46:33] <aphyr> Bingo, yeah. Keyword callsites have special compiler handling.
[03:46:43] <jeaye> Yep, gotcha.
[03:47:15] <jeaye> Seems like that could be lifted into a macro to generate superfast maps for a specific set of known keys.
[03:47:28] <aphyr> That's defrecord!
[03:47:39] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[03:47:40] <jeaye> Does it implement the same approach?
[03:48:00] <aphyr> It does exactly! Take a look at the source and you'll see my getLookupThunk is lifted directly from there :)
[03:48:01] <jeaye> I know it makes map lookups faster; wasn't sure how.
[03:48:22] <jeaye> I skimmed the source. Got work stuff going on, too, though. :)
[03:48:36] <aphyr> Yeah, it's by no means obvious haha. I spent like... multiple days on this problem
[03:48:55] *** Joins: matty_ma1 (~matt@129.222.239.110)
[03:49:04] <aphyr> Still couldn't tell you exactly what the bytecode is here. Should point no.disassemble at it sometime
[03:53:42] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[03:54:27] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[04:08:08] *** Joins: matty_ma1 (~matt@129.222.239.110)
[04:12:37] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[04:12:44] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[04:21:16] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[04:22:53] *** Joins: matty_ma1 (~matt@129.222.239.110)
[04:24:47] <nij-> What's the difference betweein (binding [x 2 y 3] (+ x y)) and (let [x 2 y 3] (+ x y))? (I'm trying to understand Vars.)
[04:25:27] <technomancy> it's just lexical vs dynamic scope
[04:25:53] <technomancy> CL uses let for both but clojure uses separate forms
[04:28:43] <jeaye> nij-: You can bind a global value to a new value within the body of the `binding` form, if it's dynamic.
[04:28:51] <jeaye> Whereas let is just for locals.
[04:29:09] <jeaye> Saying the same thing as technomancy without using the programming language design parlance.
[04:29:32] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Read error: Connection reset by peer)
[04:30:14] <jeaye> nij-: (def ^:dynamic *current-transaction* nil) ... later on ... (binding [some.ns/*current-transaction* (create-transaction!)] ... code which uses transaction)
[04:30:31] <jeaye> That way you don't need to pass the transaction into every fn you call.
[04:30:54] <nij-> Gotcha :)
[04:31:36] <jeaye> bindings are thread-local, too.
[04:32:55] <nij-> Hm.. what is thread isolation then? (https://clojure.org/reference/vars)
[04:33:24] <nij-> Vars, refs, atom seem to be fundamental ideas. Yet, I found it not so easy to understand.
[04:33:25] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[04:34:17] *** Joins: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz)
[04:34:26] <technomancy> vars are *mostly* about reloading
[04:34:50] <technomancy> you can use dynamic binding on them but it's almost always not a good idea
[04:35:16] <technomancy> (def ^:dynamic *foo* 1) is similar to defvar in CL if you've used that
[04:35:41] *** Joins: matty_ma1 (~matt@129.222.239.110)
[04:35:41] <nij-> Yep. Unless I need global state, otherwise I should avoid it.
[04:38:11] <technomancy> atoms are much more important to understand. refs and agents are neat but almost never used.
[04:39:09] <technomancy> the way vars allow for reloading is really cool and IMO one of the best features of clojure, but you can easily just use it without appreciating how it works.
[04:41:38] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:87d8:fa0a:4d3d:df57)
[04:44:14] <nij-> Pratically, what should I care about atom and deref when I have vars @@?
[04:44:25] <nij-> Coming from CL it feels like vars are enough..
[04:44:54] <technomancy> vars only change at compile time
[04:44:58] <technomancy> atoms change at runtime
[04:45:14] <technomancy> (vars can temporarily change at runtime with binding but don't do that)
[04:47:22] *** Joins: matty_matt (~matt@129.222.239.110)
[04:50:37] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[04:51:12] *** Joins: matty_ma1 (~matt@129.222.239.110)
[04:58:15] <nij-> What then do we need atoms given dynamic vars?
[04:58:19] <nij-> Why&
[04:59:57] <technomancy> vars aren't storage locations
[05:00:24] <technomancy> plus they're tied to namespaces
[05:00:37] <technomancy> plus they don't have good concurrency semantics around changing them
[05:00:53] <technomancy> (I mean fine, vars are storage locations but only for the purposes of compile-time)
[05:01:49] <technomancy> binding only gives the var a new value until the binding block exits, and even then it's only visible to the current thread
[05:03:01] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[05:08:22] <jeaye> nij-: dynamic vars only change within a scope, then they go back to the original value.
[05:09:04] <jeaye> nij-: (def ^:dynamic *foo* 1) (println *foo*) (binding [*foo* 2] (println *foo*)) (println *foo*)
[05:09:23] <jeaye> will print 1, then 2, then 1 again, since the binding is only around the second println
[05:09:58] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[05:12:18] <nij-> jeaye: How about - (def ^:dynamic *foo* 1) (println *foo*) (def ^:dynamic *foo* 2) (println *foo*) ;==> 1 2  ??
[05:19:57] *** Quits: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz) (Ping timeout: 240 seconds)
[05:23:59] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[05:33:03] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[05:36:57] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:48:28] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:87d8:fa0a:4d3d:df57) (Ping timeout: 268 seconds)
[06:02:13] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Ping timeout: 240 seconds)
[06:07:11] *** Joins: libertyprime (~libertypr@182.54.160.198)
[06:13:24] *** Joins: xsperry (~xs@user/xsperry)
[06:22:47] <technomancy> nij-: it's not thread safe
[06:22:53] <technomancy> oh they left
[06:42:58] <jeaye> Yeah, don't ever do that.
[06:43:13] <jeaye> That's not what def is for (for anyone else here who's wondering).
[06:54:07] *** Quits: henry40408 (~henry4040@175.181.188.127) (Remote host closed the connection)
[06:54:32] *** Joins: henry40408 (~henry4040@175.181.188.127)
[07:01:36] *** Quits: libertyprime (~libertypr@182.54.160.198) (Ping timeout: 256 seconds)
[07:03:09] *** Joins: libertyprime (~libertypr@182.54.160.198)
[07:04:49] *** Quits: libertyprime (~libertypr@182.54.160.198) (Client Quit)
[07:42:47] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[07:44:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[07:45:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:55:46] *** Joins: mbuf (~Shakthi@122.178.183.53)
[08:09:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[08:11:36] *** Quits: tuborgman (~tuborgman@pool-108-16-29-206.phlapa.fios.verizon.net) (Quit: WeeChat 2.8)
[08:18:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:20:36] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:51:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[08:54:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:06:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[09:12:36] *** Joins: puchka (~marius@165.73.240.182)
[09:28:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[09:30:10] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:35:11] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[09:37:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:56:08] *** Quits: op2 (~op2@user/op2) (Ping timeout: 256 seconds)
[09:57:14] *** Joins: shiranaihito (~textual@61-64-209-28-adsl-tpe.dynamic.so-net.net.tw)
[10:19:13] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[10:37:17] *** Joins: matty_ma1 (~matt@129.222.239.110)
[10:44:07] *** Quits: shiranaihito (~textual@61-64-209-28-adsl-tpe.dynamic.so-net.net.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[10:44:41] *** Joins: struchu (~struchu@staticline-31-183-183-32.toya.net.pl)
[11:03:36] *** Joins: libertyprime (~libertypr@203.211.106.46)
[11:06:41] *** Joins: shiranaihito (~textual@2001-b011-4000-3a1a-fc5f-402b-c5f9-ab03.dynamic-ip6.hinet.net)
[11:10:03] *** Joins: Lycurgus (~juan@98.4.112.204)
[11:17:10] *** Quits: libertyprime (~libertypr@203.211.106.46) (Ping timeout: 256 seconds)
[11:54:11] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[11:58:16] *** Joins: dsdolzhenko_ (~dsdolzhen@ip-213-127-111-129.ip.prioritytelecom.net)
[11:59:49] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Ping timeout: 240 seconds)
[12:00:35] *** Joins: MajorBiscuit (~MajorBisc@c-001-007-038.client.tudelft.eduvpn.nl)
[12:01:17] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[12:17:25] *** Quits: puchka (~marius@165.73.240.182) (Ping timeout: 240 seconds)
[12:19:12] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[12:19:24] *** Joins: puchka (~marius@165.73.240.182)
[12:33:01] *** Quits: puchka (~marius@165.73.240.182) (Ping timeout: 240 seconds)
[12:35:17] *** Joins: puchka (~marius@165.73.240.181)
[12:38:35] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[12:44:34] *** Quits: dsdolzhenko_ (~dsdolzhen@ip-213-127-111-129.ip.prioritytelecom.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:09:11] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:ed97:d5f:3e36:f734)
[13:15:02] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:19:51] *** Joins: dadinn (~dadinn@host86-134-44-43.range86-134.btcentralplus.com)
[13:25:42] *** Joins: Afroboy (~afroboy@105.107.173.220)
[13:32:29] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:cbfc:49c1:28df:8b50)
[13:55:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:4f29:e68c:50c9:fe2)
[14:17:16] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[15:08:05] *** Quits: struchu (~struchu@staticline-31-183-183-32.toya.net.pl) (Quit: WeeChat 3.3)
[15:08:22] *** Joins: struchu (~struchu@staticline-31-183-183-32.toya.net.pl)
[15:09:10] *** Quits: struchu (~struchu@staticline-31-183-183-32.toya.net.pl) (Client Quit)
[15:10:28] *** Joins: struchu (~struchu@staticline-31-183-183-32.toya.net.pl)
[15:11:15] *** Joins: yoonkn (~user@175.197.208.79)
[15:12:11] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[15:25:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:25:42] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (Quit: ZNC 1.8.2 - https://znc.in)
[15:29:57] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[15:48:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:55:47] *** Quits: unyu (~pyon@user/pyon) (Quit: Reboot.)
[16:00:37] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:cbfc:49c1:28df:8b50) (Ping timeout: 240 seconds)
[16:05:08] *** Joins: op2 (~op2@user/op2)
[16:06:44] *** Quits: puchka (~marius@165.73.240.181) (Ping timeout: 256 seconds)
[16:11:57] <nij-> Hi! I'm a bit confused why we need atoms, given that we have dynamic vars: (def ^:dynamic *foo* 1) (println *foo*) (def ^:dynamic *foo* 2) (println *foo*) ;==> 1 2  ??
[16:14:06] <ridcully> those are different usecases
[16:14:35] <ridcully> dynvars are meant to be overridden temporarily (to whatever degree)
[16:15:02] <ridcully> atoms store global state and allow threadsafe internal modification
[16:15:49] *** Quits: dadinn (~dadinn@host86-134-44-43.range86-134.btcentralplus.com) (Ping timeout: 240 seconds)
[16:16:01] <ridcully> if you want to change a def you could also use alter-var-root
[16:16:18] <ridcully> s/store global state/can be used to &/
[16:16:49] <ridcully> you can use atoms like anything else and pass them around
[16:17:12] *** Quits: struchu (~struchu@staticline-31-183-183-32.toya.net.pl) (Quit: WeeChat 3.3)
[16:17:35] <nij-> I see. Can I understand it as: thought effectively they are the same, but we have them separated for different usecases?
[16:19:08] <ridcully> an atom is just a datatype.  (dny) vars have a very narrow use case
[16:20:58] *** Joins: puchka (~marius@196.240.128.22)
[16:22:27] <ridcully> defs store things by name in the namespace (changing them is a global lock, afaik).  dynvars allow for temporal change (thread local, afaik).  atoms are a storage that allows concurrent reset!ing and swap!ing their content
[16:27:00] *** Joins: dadinn (~dadinn@host86-134-44-43.range86-134.btcentralplus.com)
[16:32:48] *** Quits: dadinn (~dadinn@host86-134-44-43.range86-134.btcentralplus.com) (Ping timeout: 256 seconds)
[16:38:15] *** Joins: dadinn (~dadinn@host86-134-44-43.range86-134.btcentralplus.com)
[16:39:02] *** Quits: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net) (Ping timeout: 256 seconds)
[16:42:11] *** Joins: Guest17 (~Guest17@200.168.210.66)
[16:54:31] *** Joins: unyu (~pyon@user/pyon)
[17:10:00] *** Quits: Guest17 (~Guest17@200.168.210.66) (Quit: Client closed)
[17:14:03] *** Joins: schmudde (~schmudde@93-35-145-125.ip55.fastwebnet.it)
[17:15:00] <nij-> What is "thread local"? 
[17:16:19] <nij-> Back to the difference between dynvars and atoms.. I guess what I don't understand is the term "concurrent". I haven't programmed as if there are many cores competing the resources before, so maybe that's why I don't get the point..
[17:19:38] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:19:54] <ridcully> thread local -> the change is only visible in the same thread
[17:22:39] *** Joins: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net)
[17:23:41] <ridcully> oh and another neat thing: you can add a watch on an atom
[17:40:33] <nij-> Oh yes, the "super creepy feature" as put in the brave.
[17:40:53] <nij-> What's the meaning of a thread here? Does it refer to the threads in JVM/
[17:44:58] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[17:46:18] *** Joins: struchu (~struchu@staticline-31-183-183-32.toya.net.pl)
[17:46:37] *** Quits: shiranaihito (~textual@2001-b011-4000-3a1a-fc5f-402b-c5f9-ab03.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[17:52:17] *** Quits: dadinn (~dadinn@host86-134-44-43.range86-134.btcentralplus.com) (Ping timeout: 240 seconds)
[17:58:14] *** Joins: joe_colben (~joe____co@185.190.112.211)
[18:03:16] *** Joins: dadinn (~dadinn@host86-134-44-43.range86-134.btcentralplus.com)
[18:19:52] <aphyr> nij-: yup!
[18:20:16] <aphyr> which are baaasically posix threads, if you're on a *nix platform
[18:51:46] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[19:11:35] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[19:14:27] *** Quits: dfreeman (~dfreeman@user/dfreeman) (Remote host closed the connection)
[19:22:14] *** Quits: Afroboy (~afroboy@105.107.173.220) (Ping timeout: 256 seconds)
[19:23:04] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[19:24:12] *** Quits: Harlin_ (~DonQixote@63-230-76-242.clsp.qwest.net) (Quit: Leaving)
[19:24:29] *** Joins: Harlin (~DonQixote@63-230-76-242.clsp.qwest.net)
[19:29:26] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[19:31:18] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[19:43:51] *** Joins: seschwar (~seschwar@user/seschwar)
[19:45:53] *** Joins: unyu (~pyon@user/pyon)
[19:59:27] *** Quits: struchu (~struchu@staticline-31-183-183-32.toya.net.pl) (Quit: WeeChat 3.3)
[20:28:39] *** Quits: MajorBiscuit (~MajorBisc@c-001-007-038.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[20:34:41] <Solid> I now feel at a point where I'm comfortable with the basics of the language.  experience tells me that the best way to dive deeper into things is to find FLOSS projects to contribute to (bonus, I get to share the love :); do people here have any recommendations for this?
[20:39:28] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[21:12:28] *** Joins: cmiles74 (~miles@172.58.235.252)
[21:19:16] <nij-> I'm looking for similar opportunities too @@
[21:22:18] <nij-> Solid: Are you familiar with SLIME (common lisp)? It provides common lispers a great repl experience in that they can inspect the returned objects by clicking. It'd be nice if we can have that for clojurians.
[21:22:26] <technomancy> hehe
[21:22:35] <technomancy> https://github.com/technomancy/swank-clojure yo
[21:22:52] <drakonis> nice.
[21:22:54] <drakonis> no slynk tho?
[21:23:13] <technomancy> I don't know what that is
[21:23:21] <drakonis> its swank but sly :V
[21:23:25] <drakonis> its a fork of swank
[21:23:28] <technomancy> I don't know what that is
[21:23:45] <drakonis> https://github.com/joaotavora/sly its this
[21:23:58] <technomancy> like a kind of slime-ng?
[21:24:08] <drakonis> yeah
[21:24:20] <technomancy> IMO doing this in a language-specific way is a dead-end; that's why swank-clojure is deprecated in favor of nrepl
[21:24:42] <technomancy> oh nice it still assumes your gender same as it did in 2009
[21:24:45] <drakonis> which is why conjure exists, yes?
[21:25:00] <technomancy> conjure is one client for the protocol, yeah
[21:25:06] <drakonis> does it?
[21:25:09] <drakonis> sly that is
[21:25:16] <technomancy> "take this repl, brother"
[21:25:49] <nij-> technomancy:  SERIOUSLY? Why is it deprecated?
[21:25:50] <drakonis> still does.
[21:25:57] <ToxicFrog> Conjure exists to generalize sly to arbitrary genders?
[21:25:58] <nij-> oh
[21:26:09] <drakonis> https://github.com/joaotavora/sly/blob/master/sly.el#L1479
[21:26:12] <technomancy> I modified my nrepl client to give me quotes from "a whole new world" from the disney aladdin adaptation
[21:26:19] <technomancy> normally I hate disney but I made an exception for this
[21:26:19] <drakonis> i mean
[21:26:20] <nij-> technomancy:  So what's a lang-agnostic way to deal with this?
[21:26:23] <drakonis> its words of encouragement.
[21:26:33] <technomancy> nij-: the nrepl protocol
[21:26:42] <drakonis> conjure is nrepl based iirc
[21:26:44] <technomancy> https://p.hagelb.org/nrepl-words.el.html
[21:27:02] <technomancy> this one assumes your gender too; it calls the user "princess"
[21:27:28] <drakonis> hah
[21:27:49] <ToxicFrog> According to my daughter, what makes someone a princess is not their gender, but the fact that they ride a dragon
[21:27:51] <ToxicFrog> Where's my dragon, nrepl
[21:28:25] <drakonis> https://github.com/Olical/conjure
[21:28:33] <technomancy> ToxicFrog: I'm on board with that
[21:28:39] <drakonis> oh conjure is for neovim
[21:28:40] <drakonis> neat.
[21:29:04] <drakonis> give me dragons, ty
[21:29:06] <logiz> ToxicFrog: that's awesome
[21:29:14] <drakonis> or ride me, idk.
[21:29:17] <drakonis> im a dragon.
[21:30:17] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[21:30:37] *** Quits: henry40408 (~henry4040@175.181.188.127) (Remote host closed the connection)
[21:31:03] *** Joins: henry40408 (~henry4040@175.181.188.127)
[21:31:07] <technomancy> nij-: the slime devs refused to standardize the protocol; they would just make breaking changes without warning and didn't really care about connecting to servers other than the reference implementation.
[21:31:13] <technomancy> that was a big part of why we quit using slime for clojure
[21:31:41] <drakonis> slime has finally stabilized
[21:32:00] <technomancy> in 2009 they were still telling everyone "run from CVS"
[21:32:50] <drakonis> fun.
[21:33:45] <drakonis> but that's long ago at this point
[21:34:13] <technomancy> granted, but not long enough for CVS to have been a reasonable thing to use =)
[21:35:29] <technomancy> someone could certainly bring back slime+clojure if they were so inclined
[21:35:49] <technomancy> but the best features of slime rely on the condition system and restarts, so it'd be not as cool as slime+cl
[21:35:54] <drakonis> yes.
[21:36:00] <nij-> yes.
[21:36:05] <drakonis> you could certainly bolt something like farolero in it
[21:36:12] <drakonis> but you don't get the debugging experience
[21:37:14] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:ed97:d5f:3e36:f734) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:39:54] <drakonis> clojure has a bunch of neat libraries that provide impressive features that nobody uses
[21:40:37] *** Quits: cmiles74 (~miles@172.58.235.252) (Ping timeout: 240 seconds)
[21:40:58] *** Quits: mbuf (~Shakthi@122.178.183.53) (Quit: Leaving)
[21:41:05] <drakonis> yesterday i saw meta circular clojure
[21:41:22] <drakonis> plus something called extensible clojure
[21:41:48] <drakonis> too bad nobody's ever going to use that in clojure :|
[21:42:00] <drakonis> https://github.com/IGJoshua/farolero
[21:43:20] *** Quits: puchka (~marius@196.240.128.22) (Ping timeout: 256 seconds)
[21:44:28] <technomancy> if you can't restart from an exception thrown by a 3rd-party library it's gonna be a hard sell
[21:45:04] *** Joins: puchka (~marius@196.240.128.20)
[21:46:30] <aphyr> I'm trying to imagine a JVM which would let you do that
[21:46:48] <technomancy> aaand that's why I don't use conditions =)
[21:46:53] <aphyr> I mean I want this but uh... throw-catch can compile to a longjump
[21:47:50] <drakonis> yes.
[21:48:29] <aphyr> I wind up using slingshot for most of my error handling, but I honestly kinda want something that compiles better to the class-based dispatch JVM catch is optimized for
[21:48:30] <technomancy> changing what throw emits would require recompiling all your 3rd-party stuff from scratch, no?
[21:48:45] <technomancy> I'm still super mad about not having pattern matching in try/catch I mean COME ON
[21:49:45] <aphyr> yoooo this
[21:50:02] <drakonis> rich hickey does not like pattern matching and static typing
[21:50:08] <aphyr> (try+ (net-http-call) (catch [:status 400] {:keys [body]} ...) is super nice
[21:50:42] <technomancy> I had to make my own language to work around the fact that Rich has incorrect opinions
[21:51:12] <drakonis> https://gist.github.com/reborg/dc8b0c96c397a56668905e2767fd697f#why-no-pattern-matching how infuriating
[21:53:28] <aphyr> I do read this more as an argument against sequential matching rather than name based matching, and I think that's quite valid
[21:56:05] <technomancy> the argument that it's not open to extension also applies to `cond`
[21:56:17] <technomancy> like .. yeah. not everything has to be polymorphic dude
[21:56:39] <technomancy> sometimes a branch is just a branch
[22:00:44] *** Joins: cmiles74 (~miles@172.58.235.252)
[22:07:58] *** Joins: victor (uid208353@user/victor)
[22:09:19] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[22:11:05] <andreyorst> do each agent has its own task queue or there's a single queue for all agents?
[22:11:58] <andreyorst> I think I've seen a visualisation of what happens with agents tasks when we send them, but I can't find it
[22:12:27] <technomancy> single queue per agent with a shared thread pool IIRC
[22:12:33] <technomancy> well, two shared thread pools
[22:14:43] <andreyorst> and thread pool runs each agent's queue in separate threads I presume
[22:17:28] *** Quits: puchka (~marius@196.240.128.20) (Quit: leaving)
[22:19:35] *** Joins: to-hu (~Thunderbi@p200300e9af441c002e7e76ece58cc859.dip0.t-ipconnect.de)
[22:20:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[22:26:24] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:30:54] <Para> ToxicFrog: Do you think the Queen of England has outlived her dragon?
[22:31:04] <Para> (this was an interesting backlog to scroll through)
[22:34:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[22:35:57] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:36:57] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 240 seconds)
[22:46:39] *** Quits: schmudde (~schmudde@93-35-145-125.ip55.fastwebnet.it) (Ping timeout: 256 seconds)
[23:27:03] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[23:27:27] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:f03c:12b3:d3b0:b61f)
[23:34:31] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[23:39:00] <nij-> People who had past experience with other lisps: have you found yourself confused between different lisps and need to spend much time on looking up what's the correct way to do in the currently used lisp? How did you get pass (if ever did) this stage?
[23:39:27] <technomancy> just don't use the hyperpolyglot cheat sheet
[23:39:32] <technomancy> it's really misleading
[23:43:17] <nij-> what is that sheet @@? haven't used it..
[23:44:48] *** Quits: to-hu (~Thunderbi@p200300e9af441c002e7e76ece58cc859.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:46:13] <technomancy> it's something that looks like it answers your question but actually doesn't
[23:51:58] *** lockdown_ is now known as lockdown
[23:59:24] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
