[01:16:39] <NimEventer> New thread by Didlybom: Plotting library, see https://forum.nim-lang.org/t/8569
[01:53:21] *** Joins: krux02 (~krux02@p200300ca8f00b9007f473b6073e7a3c7.dip0.t-ipconnect.de)
[02:02:15] <FromDiscord> <retkid> @treeform https://media.discordapp.net/attachments/371759389889003532/904135637635051540/unknown.png
[02:02:20] <FromDiscord> <retkid> this should work?
[02:02:40] <FromDiscord> <retkid> In reply to @Goat "Any good tutorials on": its pretty straight forward just read about sql
[02:28:51] *** Joins: cjkim (~cjkim@122-252-159-252.dyn.inspire.net.nz)
[02:29:02] <cjkim> Howdy nimions
[02:34:13] <cjkim> What advantages does Nim have over Rust in terms of concurrency?
[02:35:18] <cjkim> Dear GOD/GODS and/or anyone else who can HELP ME (e.g. MEMBERS OF SUPER-INTELLIGENT ALIEN CIVILIZATIONS):
[02:35:18] <cjkim> The next time I wake up, please change my physical form to that of FINN MCMILLAN formerly of SOUTH NEW BRIGHTON at 8 YEARS OLD and keep it that way FOREVER.
[02:35:19] <cjkim> I am so sick of this chubby Asian man body!
[02:35:19] <cjkim> Thank you!
[02:35:20] <cjkim> - CHAUL JHIN KIM (aka. A DESPERATE SOUL)
[02:35:20] *** Parts: cjkim (~cjkim@122-252-159-252.dyn.inspire.net.nz) ()
[03:14:07] <FromDiscord> <sealmove> Hello, i am looking at 1.6.0 release notes. What are private imports?
[03:15:35] <FromDiscord> <geekrelief> When you import a module everything marked with the export marker `` is imported.  With `{.all.}` everything is imported except for the modules dependencies.
[03:16:47] <FromDiscord> <sealmove> so the new thing is the `{.all.}` pragma?
[03:16:55] <FromDiscord> <exelotl> I'm surprised that that was added lol, but I guess it makes sense as a "trust me, I know what I'm doing" feature
[03:17:17] <FromDiscord> <sealmove> or a way to segment your modules?
[03:17:30] <FromDiscord> <geekrelief> In reply to @exelotl "I'm surprised that that": I used it immediately when it came out to debug a nim module. üôÇ
[03:17:44] <FromDiscord> <sealmove> ah right it could help when debugging
[03:18:44] <FromDiscord> <sealmove> ah in the release notes if you scroll, it explains the new features
[03:18:50] <FromDiscord> <geekrelief> yes üôÇ
[04:10:22] *** Quits: krux02 (~krux02@p200300ca8f00b9007f473b6073e7a3c7.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:29:46] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[06:07:09] <FromDiscord> <RattleyCooper> Anybody have any luck cross compiling for windows from a raspberry pi?
[06:08:00] <FromDiscord> <RattleyCooper> I'm getting an unrecognized command line option `-mno-ms-bitfields` when I use `-d:mingw`:
[06:08:06] <FromDiscord> <RattleyCooper> (edit) "`-d:mingw`:" => "`-d:mingw`"
[06:09:39] <FromDiscord> <RattleyCooper> scratch that, I just forgot the `--cpu`
[06:10:19] <FromDiscord> <IsaacPaul> yea nim still thought it was building for windows
[06:33:38] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[06:34:27] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:33:18] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:57:09] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:45:55] <FromDiscord> <evoalg> I was looking at "swap" and from my tests doing "swap(a, b)" is the same as doing "(a, b) = (b, a)" and from my time tests they are just as fast as each other. Is it ok for me to use either, or are there reasons I might want to use swap sometimes?
[08:46:29] <FromDiscord> <Rika> personal choice
[08:46:32] <FromDiscord> <Rika> less to type?
[08:46:38] <FromDiscord> <Rika> more explicit? idk
[08:47:11] <FromDiscord> <evoalg> gotcha ok thank you ... I just wanted to make sure I wasn't missing some point behind it ... all good!
[08:47:16] <FromDiscord> <Elegantbeef> Did you test with a release or debu build?
[08:47:39] <FromDiscord> <evoalg> I did -d:release ... what is "debu"?
[08:47:43] <FromDiscord> <Rika> debug
[08:47:53] <FromDiscord> <Elegantbeef> me fucking up
[08:47:59] <FromDiscord> <Rika> haha beef is chubby
[08:48:08] <FromDiscord> <evoalg> hehe
[08:48:26] <FromDiscord> <Rika> ~~debu is chubby in an unspecified language i know of~~
[09:06:21] <FromDiscord> <evoalg> I know the release does more checks than danger, but being the noob I am, I'm assuming that debug mode does more checks then "-d:release" ?  ... but I'm not sure?
[09:07:33] <FromDiscord> <evoalg> actually I seem to remember someone saying a stacktrace will be printed out for debug mode whereas it might not be for release ... ok!
[09:08:12] <FromDiscord> <evoalg> In reply to @Rika "ah, run without -d:release": Thank you
[09:08:32] <FromDiscord> <Rika> lol
[09:08:57] <FromDiscord> <Rika> if you want some speed with stacktraces you can just use --opt:speed instead of -d:release
[09:09:51] <FromDiscord> <evoalg> ahhh nice ... that isn't on by default because maybe it slows compilation time I guess
[09:10:19] <FromDiscord> <Rika> yes
[09:19:26] <FromDiscord> <huantian> what does the `-g` flag do for the nim compiler? I couldn't find it on the docs
[09:23:09] <FromDiscord> <huantian> also, what are the "active boot switches" that show up when I do `nim -v`?
[09:38:36] <FromDiscord> <Elegantbeef> -v shows what it was built with
[09:39:29] <FromDiscord> <Rika> -g is probably a switch for --debugger:native
[09:40:17] <FromDiscord> <Rika> it is undocumented though
[09:56:48] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[10:35:09] <FromDiscord> <baalajimaestro> Hi, is shell dsl the only way for executing shell commands?
[10:36:15] <FromDiscord> <Elegantbeef> `std/os` and `std/osproc` also allows you to
[10:36:39] <FromDiscord> <baalajimaestro> hmm, okay
[10:38:02] <FromDiscord> <baalajimaestro> is there some package that can handle git? Like gitpython
[10:38:30] <FromDiscord> <baalajimaestro> I tried googling each of these and mostly land on `vim` suggestions without being a vim user
[10:38:41] <FromDiscord> <Elegantbeef> I dont know if there is a high level package but there is libgit bindings
[10:40:16] <FromDiscord> <baalajimaestro> ah nimgit2 seems like enough, i can figure out how to work with it
[12:16:03] <FromDiscord> <sealmove> How does `nim e` work? Does it compile Nim into some kind of bytecode?
[12:18:17] <FromDiscord> <haxscramper> Yes, it runs nim in the VM
[12:18:19] <FromDiscord> <haxscramper> Register-based VM
[12:18:32] <FromDiscord> <haxscramper> Same one that is used for the macro evaluation and other things
[12:24:08] <FromDiscord> <sealmove> Can I see the bytecode somehow?
[12:24:47] <FromDiscord> <Elegantbeef> Well the compiler is open source so yea, hook up vmgen to poop out the bytecode into a file
[12:37:49] <FromDiscord> <sealmove> and remind me what's wrong with `nim secret` üòÖ  looks fine
[12:38:45] <FromDiscord> <Yardanico> In reply to @‡∏£—î‡∏Ñ…≠‡πì‡πè◊©—î "and remind me what's": ffi
[12:38:54] <FromDiscord> <Yardanico> and other limitations that apply to nimscript
[12:40:11] <FromDiscord> <haxscramper> There were some issues with it for incorrect clde
[12:40:20] <FromDiscord> <haxscramper> So if you type in wrong line of code
[12:40:29] <FromDiscord> <haxscramper> It then starts to behave weirdly
[12:43:26] <FromDiscord> <sealmove> Of course a nim repl works with nimscript, not nim, personally I don't expect more
[12:43:45] <FromDiscord> <sealmove> In reply to @haxscramper "It then starts to": This should be easily fixable then
[12:46:10] <FromDiscord> <Rika> How so
[12:47:52] <FromDiscord> <sealmove> It just needs polishing
[12:48:04] <FromDiscord> <haxscramper> Well, if I run VM manually it works better
[12:48:09] <FromDiscord> <Elegantbeef> Get the turd polish out!
[12:48:31] <FromDiscord> <Elegantbeef> yea joke aside you probably can do it better just using the VM directly
[12:48:48] <FromDiscord> <Elegantbeef> Destroying interpreter inbetween runs
[12:49:08] <FromDiscord> <haxscramper> https://github.com/haxscramper/hack/blob/master/testing/nim/compilerapi/test6.nim
[12:49:14] <FromDiscord> <sealmove> and what about set variables?
[12:49:38] <FromDiscord> <Elegantbeef> This is where i say to use nimscripter üòõ
[12:51:04] *** Joins: kenran (~kenran@200116b82b0d0a00e98487ecbf918c70.dip.versatel-1u1.de)
[12:51:35] <FromDiscord> <Elegantbeef> Dont know if my string operations would make a good repl back bone, probably would get annoying fast
[12:53:20] <FromDiscord> <sealmove> github has halloween theme :D
[12:55:13] <FromDiscord> <haxscramper> automatically applied to all c++ projects
[12:55:14] <FromDiscord> <haxscramper> very scary
[12:56:17] <FromDiscord> <sealmove> xD
[12:56:33] <FromDiscord> <sealmove> The contribution panel is orange
[12:59:05] <kenran> If there's a `func foo(): string = ...` that basically only does a for loop mutating a string var, but then I forget to return the string, then IIUC the empty string is returned (as it's the default string). Can I somehow "make this into an error"?
[12:59:58] <FromDiscord> <Elegantbeef> use the result?
[13:00:34] <kenran> I use the result (it's show in the output, but the empty string just works there, too, ofc)
[13:01:10] <FromDiscord> <Rika> You can‚Äôt make it an error
[13:01:12] <kenran> Maybe it's just because it's a string, thinking about it I'd hope that I wouldn't have the same "problem" with custom types. Let me check
[13:01:18] <FromDiscord> <Elegantbeef> You can
[13:01:18] <FromDiscord> <Rika> Not without a check at the end
[13:01:22] <FromDiscord> <Rika> I mean
[13:01:26] <FromDiscord> <Yardanico> In reply to @kenran "If there's a `func": there were some discussions about that before too, but no, AFAIK there's no warning/error currently that will trigger if you haven't used `result` in a proc
[13:02:02] <FromDiscord> <Rika> If you want it to be an error then use either end of expression returning or explicit returns
[13:02:16] <FromDiscord> <sealmove> when should it be triggered though? it sounds a little vague
[13:02:18] <kenran> @Elegantbeef Oh, I totally forgot about Nim's `result` and thought you meant something else. Now it's come back to me :)
[13:02:37] <FromDiscord> <Yardanico> ah i misunderstood kenran
[13:03:07] <FromDiscord> <Rika> I don‚Äôt know what I don‚Äôt understand
[13:04:05] <FromDiscord> <sealmove> maybe it could be a warning/error if the result variable is not used and there is no explicit `return`
[13:04:32] <FromDiscord> <Rika> No, some people intentionally do not use result in some branches of their code
[13:04:40] <kenran> I just forgot about `result` existing at all, and was wondering why my func still returned anything, thinking it would take the "default string value".
[13:04:45] <FromDiscord> <Rika> And that would need control flow analysis would it?
[13:05:18] <FromDiscord> <Elegantbeef> Not strictly speaking
[13:05:24] <kenran> What I learned (again) is that in my func I actually *should* use result, as then the problem can't even appear. Right now I'm initializing `var s = ""` and mutate that
[13:05:27] <FromDiscord> <Elegantbeef> You can do it easily with just `return` and `result` checks
[13:05:57] <FromDiscord> <Rika> Would that not give false positives
[13:05:57] <kenran> Thanks everyone!
[13:06:05] <FromDiscord> <Elegantbeef> It would
[13:06:18] <FromDiscord> <Rika> Would or would not
[13:06:23] <FromDiscord> <Rika> Fuck English
[13:06:28] <FromDiscord> <Elegantbeef> It would
[13:06:32] <FromDiscord> <Rika> Okay
[13:06:35] <FromDiscord> <Elegantbeef> for instance a proc inside a proc
[13:06:40] <FromDiscord> <Rika> Yes
[13:08:09] <kenran> Nim is something else entirely. Even though it looks pretty simple on the surface to me, it's just a whole other world from what I'm usually doing (mostly Haskell, sometimes Clojure and F#). But I've missed it! Especially the compile times!
[13:09:14] <FromDiscord> <Elegantbeef> Can get pretty fancy quickly with a macro for this rika https://play.nim-lang.org/#ix=3Ds5
[13:11:36] <FromDiscord> <Rika> Result behind an if statement with no accompanying else or anything after?
[13:12:08] <FromDiscord> <Elegantbeef> Hhmm?
[13:12:32] <FromDiscord> <Rika> When the if is fulfilled result is used, otherwise it is not
[13:12:46] <FromDiscord> <Elegantbeef> I mean that requires flow like i said
[13:12:51] <FromDiscord> <Rika> Same issue with for loops I guess, if the for loop is never entered then you have no set result
[13:12:55] <FromDiscord> <Rika> Yes I know
[13:12:58] <FromDiscord> <Rika> That‚Äôs what I meant
[13:13:08] <FromDiscord> <Rika> Of course you can just see if you used result or not in a body
[13:13:14] <FromDiscord> <Rika> That‚Äôs literally just grep
[13:13:35] <FromDiscord> <Rika> You would be pretty crazy to have to write a macro for just that
[13:14:37] <FromDiscord> <Elegantbeef> I mean you could have a `{.ensureResult.}` which you apply to all your procs to ensure you actually touch result be it through return(implict/explict), or directly
[13:14:49] <FromDiscord> <Elegantbeef> You dont always want to set result
[13:15:18] <FromDiscord> <Elegantbeef> But it'd not be too difficult to mark branches where you dont touch the result and release a warning
[13:15:50] <FromDiscord> <Elegantbeef> Applying the logic i already showed would work for branches you'd just need to take that consideration into account
[13:16:02] <FromDiscord> <Elegantbeef> But anyway my stupidity aside, i sleep
[13:17:56] <FromDiscord> <Rika> Okay, it makes sense as a building block
[13:25:32] <FromDiscord> <sealmove> Where are we at 'Go to Definition'? (Sorry for the stupid questions, I haven't touched Nim for a while)
[13:26:58] <FromDiscord> <haxscramper> technically supported, in reality nimsuggest is ...
[13:27:07] <FromDiscord> <haxscramper> well, it works techically
[13:27:08] <FromDiscord> <haxscramper> sometimes
[13:27:17] <FromDiscord> <haxscramper> at least I've seen someone do it once
[13:27:41] <FromDiscord> <sealmove> with a vscode plugin?
[13:27:48] <FromDiscord> <haxscramper> yes
[13:55:44] <FromDiscord> <shirleyquirk> does anyone know a way to get the path to a module's .nim file, from the modulename?
[13:56:31] <FromDiscord> <haxscramper> From module name alone?
[13:56:54] <FromDiscord> <haxscramper> There are hacks, but no concrete way IIRC
[13:57:00] <FromDiscord> <shirleyquirk> i can only think of getting searchPaths from std/compilesettings and walking them, but surely the compiler knows, somewhere
[13:57:35] <FromDiscord> <haxscramper> You can try to get path from module symbol in that case
[13:58:03] <FromDiscord> <haxscramper> Pass module name to a typed macro, then maybe get lineInfoObj or something
[13:58:13] <FromDiscord> <shirleyquirk> lineInfo! great shout
[13:58:20] <FromDiscord> <haxscramper> Otherwise compiler setting is the only way
[13:59:22] *** Quits: kenran (~kenran@200116b82b0d0a00e98487ecbf918c70.dip.versatel-1u1.de) (Ping timeout: 260 seconds)
[14:00:19] *** Joins: kenran (~kenran@200116b82b0d0a0094e57a89e1053ea4.dip.versatel-1u1.de)
[14:03:37] *** Quits: kenran (~kenran@200116b82b0d0a0094e57a89e1053ea4.dip.versatel-1u1.de) (Client Quit)
[14:11:19] <FromDiscord> <evoalg> Is "for i, x in e: e[i] = 2  x - 1" considered dangerous as I'm changing the thing I'm looping over? My first reaction is that it's a dangerous, but I'm thinking it might be actually ok? I'm thinking that "apply" and "applyIt" might be doing it that way anyway?
[14:13:44] <FromDiscord> <haxscramper> define "dangerous"
[14:14:03] <FromDiscord> <haxscramper> I would assume it is not dangerous
[14:14:05] <FromDiscord> <haxscramper> I mean
[14:14:08] <FromDiscord> <haxscramper> `a = a + 1`
[14:14:11] <FromDiscord> <haxscramper> basically
[14:14:19] <FromDiscord> <haxscramper> just `a` is taken and put into array
[14:14:47] <FromDiscord> <evoalg> ok if you put it that way, it seems perfectly fine - thank you!
[14:16:20] <FromDiscord> <shirleyquirk> what would be dangerous would be mutating e while iterating over it, but `for x in e.mitems: x = 2x-1` is fine
[14:17:16] <FromDiscord> <haxscramper> it is not "dangerous" - `e.add` or `e.pop` is disallowed and lead to explicit exception
[14:17:22] <FromDiscord> <haxscramper> in the loop body
[14:17:42] <FromDiscord> <haxscramper> and yes, `for x in mitems(e): x = 2  x - 1` is probably even better than indexing, because that's what `mitems` is for anywya
[14:19:34] <FromDiscord> <shirleyquirk> made safe by the language. best kind of safe.
[14:20:03] <FromDiscord> <evoalg> oooo I didn't know about mitems ... nice
[14:24:24] <FromDiscord> <sealmove> hmm the intellij plugin works great
[14:24:38] <FromDiscord> <Yardanico> except when you want autocompletion :P
[14:25:12] <FromDiscord> <Yardanico> also seems like the author haven't got back to its development (he said he'll continue in september), guess he's busy
[14:27:51] <FromDiscord> <sealmove> hmm it shows an error "can't find nim executable" or something, but everything works fine
[14:45:43] *** Joins: krux02 (~krux02@p200300ca8f00b9007f473b6073e7a3c7.dip0.t-ipconnect.de)
[15:05:24] *** Joins: Vladar (~Vladar@46.162.2.53)
[15:24:10] <FromDiscord> <Schelz> How to get a specific value from a tuple or a list ?
[15:24:28] <FromDiscord> <Schelz> like ex in python:   tuple = (1, 4, 5)
[15:24:36] <FromDiscord> <Schelz> tuple[0]
[15:24:56] <krux02> you should be able to index the tuple, but only with a constant index
[15:25:01] <FromDiscord> <haxscramper> `let a = (1, 4, 5)`
[15:25:06] <FromDiscord> <haxscramper> `a[0]`
[15:25:16] <FromDiscord> <haxscramper> note that nim tuples and lists are different
[15:25:32] <FromDiscord> <Schelz> a ok thx
[15:25:42] <FromDiscord> <haxscramper> tuple's types and size are fixed at compile-time
[15:25:51] <krux02> Schelz, better said python tuples an nim tuples are different
[15:25:57] <FromDiscord> <haxscramper> and list (`seq`) can only hold one type
[15:26:43] <FromDiscord> <Schelz> i know the difference between tuple and list but the method to get a value from them is the same in python
[15:27:32] <FromDiscord> <Schelz> and that was the misunderstanding in nim
[15:32:09] <krux02> tuples in Nim are basically just to return multiple values from a function
[15:32:29] <krux02> I couldn't find another good usage for them yet.
[15:32:45] <FromDiscord> <Rika> Temporary objects that don‚Äôt deserve a real type yet
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:06:14] <FromDiscord> <evoalg> I managed to so something with what I believe is bad practice: https://play.nim-lang.org/#ix=3Dtr ... but I don't know enough to get it to work with good practice - how would I do that?‚ÜµI'm trying to use "newSeqWith" to get a sequence initialized with an incrementing int value, eg: @[1, 2, 3, 4, 5]
[16:06:44] <FromDiscord> <Rika> Use a closure iterator instead I guess
[16:07:00] <FromDiscord> <Rika> Can‚Äôt demonstrate right now, I‚Äôm not at a computer
[16:07:52] <FromDiscord> <evoalg> ok thanks ... over my head so I think I'd need an example ideally, but that gives me something to investigate!
[16:07:54] <FromDiscord> <Recruit_main707> id pass i as an argument, and then its not that bad i guess
[16:08:14] <FromDiscord> <Recruit_main707> nvm
[16:08:22] <FromDiscord> <evoalg> I couldn't get that to work
[16:11:07] <FromDiscord> <Rika> How about using collect?
[16:12:03] <FromDiscord> <evoalg> you're right, I should just use collect, so simple!
[16:27:20] <FromDiscord> <evoalg> Oh just for fun I modified a closure iterator and got it to work (but I will use collect instead, that closure iterator is weird!)
[16:35:13] *** Joins: rockcavera (~rc@192.12.114.204)
[16:35:13] *** Quits: rockcavera (~rc@192.12.114.204) (Changing host)
[16:35:13] *** Joins: rockcavera (~rc@user/rockcavera)
[16:56:09] <FromDiscord> <dom96> 1.85 million QPS üî•
[17:05:10] <FromDiscord> <willyboar> In reply to @dom96 "1.85 million QPS üî•": where?
[17:06:00] <FromDiscord> <Yardanico> i guess dom is talking about httpbeast
[17:07:07] <FromDiscord> <willyboar> I know but where that happened? techempower?
[17:08:20] <FromDiscord> <Yardanico> in his tests
[17:09:36] <FromDiscord> <dom96> https://github.com/dom96/httpbeast/pull/65
[17:11:24] <FromDiscord> <dom96> In techempower httpbeast is at 5.8 million, but they've got completely different hardware of course
[17:11:53] <FromDiscord> <Yardanico> what command were you testing with btw?
[17:12:00] <FromDiscord> <Yardanico> and what file
[17:12:02] <FromDiscord> <Yardanico> helloworld.nim ?
[17:12:07] <FromDiscord> <dom96> benchmark.nim
[17:12:13] <FromDiscord> <Yardanico> ah
[17:12:34] <FromDiscord> <dom96> with --gc:markandsweep as well which improves performance a lot
[17:12:59] <FromDiscord> <tandy> if you take a `seq1` as proc parameter, does `var x = seq1` copy the values or reference?
[17:14:08] <FromDiscord> <Yardanico> it depends :P
[17:14:28] <FromDiscord> <SC> is orc works with the Nim web frameworks (e.g, Jester?)
[17:14:33] <FromDiscord> <Yardanico> orc generally does, yes
[17:15:10] <FromDiscord> <dom96> yep, it should be compatible with everything
[17:16:01] <FromDiscord> <SC> Ok thank you.
[17:16:41] <FromDiscord> <dom96> orc QPS: 1.5 million, default gc: 1.6 million and m&s: 1.85 million
[17:18:16] <FromDiscord> <Rika> what about boehm? or is that unsupported
[17:18:26] <FromDiscord> <SC> wow. I guess m&s is a stop the world gc. but still quite a result!
[17:18:35] <FromDiscord> <Rika> it is not
[17:18:47] <FromDiscord> <SC> m&s is not the stop the world gc? really?
[17:18:50] <FromDiscord> <SC> oh...
[17:19:18] <FromDiscord> <dom96> hm, boehm crashes.
[17:19:33] <FromDiscord> <dom96> I just get a segfault during startup
[17:19:51] <FromDiscord> <Rika> In reply to @SC "m&s is not the": well i know it is one but apparently the nim docs say it is not
[17:19:59] <FromDiscord> <Rika> might be to do with the implementation in nim
[17:20:18] <FromDiscord> <dom96> if it was stop the world then I would expect it to do far worse
[17:20:29] <FromDiscord> <SC> oh... sounds interesting...
[17:20:49] <FromDiscord> <Rika> In reply to @dom96 "if it was stop": thats okay i was just asking out of interest
[17:20:56] <FromDiscord> <Rika> boehm is stop the world so i assume it would be slower
[17:22:48] <FromDiscord> <Yardanico> @dom96 and what wrk command were you testing the benchmark with?
[17:22:56] <FromDiscord> <Yardanico> i just want to play around with it a bit too
[17:23:11] <FromDiscord> <dom96> I'm using the techempower commands, so you need to have a look at how they do it
[17:25:23] <FromDiscord> <Yardanico> the benchmark.nim is a bit wrong though, techempower fixed it - https://github.com/TechEmpower/FrameworkBenchmarks/commit/e2838399f590c656310133311cf12027684d1792#diff-e08d8fe907c238b949215cf77996d97c264a1c492e9978507a216e532b039332
[17:25:31] <FromDiscord> <Yardanico> it can't be "const" because it measures json serialization time as well
[17:25:56] <FromDiscord> <Yardanico> but for purely httpbeast benchmarks it's fine
[17:26:31] <FromDiscord> <Yardanico> https://github.com/TechEmpower/FrameworkBenchmarks/issues/4794
[17:27:46] <FromDiscord> <dom96> sure
[17:27:51] <FromDiscord> <dom96> I'm testing plaintext anyway
[17:39:46] *** Joins: arkurious (~arkurious@user/arkurious)
[18:07:06] <FromDiscord> <dom96> huh, turns out SO_REUSEPORT is not supported on WSL
[18:12:03] <FromDiscord> <dom96> So I've been benchmarking on a single thread this whole time lol
[18:21:43] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[18:22:21] *** Joins: neurocyte0132889 (~neurocyte@45.93.111.195)
[18:22:21] *** Quits: neurocyte0132889 (~neurocyte@45.93.111.195) (Changing host)
[18:22:21] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:23:34] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[18:35:30] <FromDiscord> <dom96> half tempted to grab a Ubuntu live usb and run it on my desktop, see what Ryzen is capable of
[19:15:50] *** Joins: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net)
[19:19:40] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[19:20:42] *** Joins: xet7 (~xet7@user/xet7)
[19:36:45] *** Quits: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net) (Quit: leaving)
[20:05:30] <FromDiscord> <ajusa> In reply to @Yardanico "the benchmark.nim is a": I wonder if a different JSON library would be faster/allowed
[20:17:37] <FromDiscord> <dom96> definitely would be üôÇ
[20:32:32] <FromDiscord> <Bung> plaintext is good target
[22:26:17] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[22:26:49] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[22:38:43] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[22:39:13] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[22:48:04] *** Joins: beeswax (~knightshr@mue-88-130-54-189.dsl.tropolys.de)
[22:48:32] <beeswax> is there an easy way to write floats in binary format to stdout for piping into paplay?
[22:50:52] <FromDiscord> <Elegantbeef> `stdout.writeBuffer(yourFloat.addr, sizeof(yourFloat)`
[22:51:12] <beeswax> thank you!
[22:55:35] <Amun-Ra> mind it depends on endianness
[22:55:44] <Amun-Ra> it (the result)
[22:57:51] <FromDiscord> <Elegantbeef> Sure but given both programs are running locally
[22:58:36] <FromDiscord> <Elegantbeef> I guess unless one is written with a VM'd language or expects a different endianess it can be an issue
[23:12:43] *** Quits: beeswax (~knightshr@mue-88-130-54-189.dsl.tropolys.de) (Quit: leaving)
[23:27:51] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[23:32:24] *** Joins: neurocyte0132889 (~neurocyte@45.93.111.195)
[23:32:24] *** Quits: neurocyte0132889 (~neurocyte@45.93.111.195) (Changing host)
[23:32:24] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
