[00:00:08] *** Joins: jimklimov (~jimklimov@ip-86-49-254-149.net.upcbroadband.cz)
[00:00:19] <lastgitget> So far I can only think to change the date and see which folks fall in a closer time threshold...but that's pretty cumbersome
[00:01:28] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[00:02:07] *** Joins: lightstalker (~BT@user/lightstalker)
[00:04:52] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[00:05:11] <sangy> lastgitget: you may want to use something like libgit2 for this. You can get away with some very minimal repository-walk with something like a dict with developer as key and latest commit as value
[00:05:20] <sangy> probably ~10 lines total really
[00:06:18] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[00:06:29] *** Quits: SuperLag (~akulbe@user/superlag) (Quit: leaving)
[00:06:46] <osse> piping to awk should make this easier
[00:06:48] <lastgitget> thanks sangy will check it out!
[00:06:54] *** Joins: SuperLag (~akulbe@user/superlag)
[00:07:12] <sangy> could also do what osse said. I'm just more comfortable with libgit2 as it's easier to maintain things around :)
[00:07:20] <lastgitget> osse -- not sure how to use awk in this case
[00:07:40] <sangy> lastgitget: np! feel free to send scripts over here if you need a second pair of eyes
[00:07:50] *** Joins: Crassus (~Crassus@user/crassus)
[00:08:06] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[00:10:24] <sangy> and for osse's suggestion I would assume you could use git log with a custom format (e.g., committer email\t commit date) or so, then take it from there. My awk fu is very lacking so I can't do much more guidance :)
[00:10:53] *** Quits: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1) (Remote host closed the connection)
[00:11:51] *** Quits: natrys (~natrys@user/natrys) (Quit: natrys)
[00:11:53] *** Joins: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com)
[00:13:17] *** Parts: janemba (~janemba@94.204.254.193) (WeeChat 3.1)
[00:14:42] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 252 seconds)
[00:14:53] <osse> git log --since=whatever --date-order --pretty='%an %ad' | awk 'authors[$1] == 0 { authors[$1]++; dates[$1] = $2 } END { for (i in authors) { print author[i], dates[i] } }'
[00:14:56] <osse> something like that perhaps
[00:15:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1)
[00:15:20] <osse> git log --since=whatever --date-order --pretty='%an%09%ad' | awk -F '\t' 'authors[$1] == 0 { authors[$1]++; dates[$1] = $2 } END { for (i in authors) { print author[i], dates[i] } }'
[00:15:26] *** Joins: roadie (~user@2a02:8108:ec0:1427:75b6:5415:a6a4:79d2)
[00:16:15] *** Quits: Crassus (~Crassus@user/crassus) (Ping timeout: 265 seconds)
[00:18:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[00:18:11] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 265 seconds)
[00:18:34] <osse> git log --since=2020-01-01 --date-order --pretty='%an%x09%ad' | awk -F '\t' 'authors[$1] == 0 { authors[$1]++; dates[$1] = $2 } END { for (i in authors) { print i, dates[i] } }'
[00:18:35] <osse> there
[00:18:57] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[00:19:51] *** Quits: Guest9 (~Guest9@43.241.144.38) (Quit: Connection closed)
[00:21:54] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[00:23:07] *** Quits: tolot_ (~tolot@dynamic-093-132-038-055.93.132.pool.telefonica.de) (Quit: Leaving)
[00:25:44] *** Joins: SuperL4g (~akulbe@user/superlag)
[00:31:06] *** Quits: atharvaraykar (~Thunderbi@user/atharvaraykar) (Ping timeout: 240 seconds)
[00:31:09] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[00:33:35] *** Joins: dibber (~dibber@c-73-14-187-235.hsd1.co.comcast.net)
[00:33:38] <osse> lastgitget: http://sprunge.us/RnXmMo
[00:34:07] <nedbat> I have a patch file that won't apply because it has \r\n line endings, and I am on a Mac. If I edit the file to change the line endings, it applies cleanly.  Is there some way to tell "git apply" to not care about this?
[00:34:37] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[00:34:52] <imMute> nedbat: the --whitespace option seems promising.
[00:35:19] <nedbat> imMute: ah! thanks
[00:38:53] *** Joins: jlc (~jlc@cpe-107-15-173-212.nc.res.rr.com)
[00:38:54] *** Quits: DoofusCanadensis (~DoofusCan@2604:3d09:47c:f970:912d:2cfe:e641:8268) (Quit: So long, suckers)
[00:39:33] <nedbat> imMute: no, that doesn't make the patch apply, though --ignore-whitespace does, but it puts \r\n into my file.  I want the patch's line endings to be ignored
[00:40:39] <imMute> could you run the patch file through dos2unix (or any number of other ways to achieve the same) first?
[00:41:05] <nedbat> imMute: that seems to be the only option here.  the real fix is to get my team to stop making patch files with \r\n
[00:41:27] *** Joins: rahl- (~rahl@102.114.123.208)
[00:42:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[00:43:18] <imMute> also a good idea
[00:43:59] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[00:44:04] *** Joins: Guest59 (~Guest59@2a02:8388:1809:3d80:abae:3d0c:f00e:1d2)
[00:44:17] *** Quits: roadie (~user@2a02:8108:ec0:1427:75b6:5415:a6a4:79d2) (Ping timeout: 250 seconds)
[00:44:31] *** Quits: rahl (~rahl@102.114.88.46) (Ping timeout: 258 seconds)
[00:46:50] *** Joins: Samian (~Sami@2600:380:b465:6128:1458:53c1:b364:7ef9)
[00:48:24] <osse> i thought they were supposed to be cuz HTTP, but I see git format-patch doesn't do that by default
[00:48:56] <osse> maybe i'm just stupid for thinking http and emails are the same
[00:49:05] *** Parts: digdilem (~digdilem@rolf.yuss.org) (Leaving)
[00:49:32] <imMute> both of them spec \r\n for protocol line endings (like headers) but the payloads are whatever the payload format wants (in this case it should be \n)
[00:50:00] <nedbat> osse: in this case, it's a file attachment delivered in email
[00:50:07] <osse> ah
[00:50:24] <osse> imMute: doesn't that mean git-format-patch should generate files with \r\n ?
[00:50:24] <nedbat> osse: but it does seem like git should have an option to ignore the line endings in the patch
[00:50:38] <imMute> osse: for the headers part, yeah.  not for the payloads
[00:50:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[00:51:50] *** Joins: srinidhi (~srinidhi@49.206.4.186)
[00:52:02] *** Quits: Samian (~Sami@2600:380:b465:6128:1458:53c1:b364:7ef9) (Ping timeout: 272 seconds)
[00:52:04] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[00:53:47] <nedbat> is there a way to use "git diff -p" on windows and get \n instead of \r\n ?
[00:55:04] *** Quits: Guest59 (~Guest59@2a02:8388:1809:3d80:abae:3d0c:f00e:1d2) (Quit: Client closed)
[00:57:09] *** Quits: hbautista (~hbautista@187.171.91.115) (Quit: Leaving)
[00:58:17] <anddam> howdy, can you recommend a compact automation server? I'd like to setup some CI, possibly CD and I'd like to start with something "minimal"
[00:58:38] *** Joins: humanface (~humanface@20014C4E1C542F009880DA0B227EC187.dsl.pool.telekom.hu)
[00:58:49] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[01:01:27] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 252 seconds)
[01:01:54] <imMute> gitlab seems like a good choice.
[01:03:21] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 250 seconds)
[01:04:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[01:05:00] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[01:07:44] *** Quits: ThorMojito (~Adium@166.62.248.233) (Quit: Leaving.)
[01:09:04] <anddam> imMute: looked like a big beast
[01:09:32] <imMute> well do you want "minimal" or do you want a functional CI/CD ?
[01:10:58] *** Joins: Samian (~Sami@2620:10d:c091:480::1:1aba)
[01:11:30] *** Joins: hubble (~hubble@69.160.255.217)
[01:12:09] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[01:13:53] <nedbat> anddam: what did you mean by minimal?
[01:14:37] <imMute> nedbat: "doesn't have anything I don't think I need"
[01:14:38] *** Quits: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1) (Remote host closed the connection)
[01:14:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[01:15:12] *** Joins: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1)
[01:15:53] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[01:16:14] <anddam> or "simple enough that even I can understand the overview"
[01:16:20] <anddam> I am looking at buildbot
[01:16:47] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 245 seconds)
[01:19:04] <imMute> buildbot was okay.  I much prefer the configuration style of Azure Dev Ops or GitLab though.
[01:19:27] <imMute> and I like it when issue tracking, source code tracking, and build infra is all contained in the same system.  makes it easier to connect between those systems
[01:19:50] *** kevr is now known as kevr[m]
[01:20:17] *** kevr[m] is now known as kevr
[01:20:40] <anddam> nedbat, imMute: on a more serious level, I cannot exactly define my usage of "minimal", but given that buildbot wheel is ~2 MB while gitlab's docker image is ~1 GB the former is more fit to my intended meaning
[01:21:01] <anddam> imMute: I see the point there
[01:21:13] <imMute> comparing size of python wheels to docker images is non sensical
[01:21:20] <imMute> how big is the buildbot docker image?
[01:21:54] <anddam> let's see if I find one
[01:22:47] <anddam> ah right, a master comes at ~280 MB and a worker image at ~170 MB
[01:23:07] <anddam> x/80/ c/60/
[01:23:39] <imMute> okay that's a bit better.  the gitlab image seems a little high, but it might be built on a general purpose base (like ubuntu) instead of a barely-anything base.
[01:23:40] <anddam> so maybe half the (docker) space taken, without the additional feature
[01:24:02] <imMute> but if it works, it works and you can get a gitlab instance up and running quickly.   and if it's too big, you can install gitlab natively and manage the space yourself.
[01:24:09] <imMute> that's the tradeoff with Docker.
[01:24:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1) (Remote host closed the connection)
[01:25:22] *** Parts: fnurkla (~fnurkla@h-98-128-211-79.A357.priv.bahnhof.se) (WeeChat 3.2)
[01:27:06] *** Joins: hbautista (~hbautista@2806:10a6:e:5be6::1)
[01:28:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[01:28:44] <anddam> thanks for the hint
[01:28:59] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[01:29:40] <nedbat> anddam: are you running low on disk space?
[01:30:30] <anddam> nedbat: no, it was just an unnecessary reaction to disk usage
[01:30:40] <nedbat> anddam: i understand. 1Gb seems like a lot
[01:30:57] <anddam> yep, I only have 640 kB of RAM
[01:31:49] <imMute> O.o   and it's capable of even starting Docker??
[01:31:50] <anddam> I know that "minimal" would strictly call for small feature set, OTOH I see the convenience in having the issue tracker and code tracking integrated
[01:32:04] *** Quits: canton7 (canton7@about/csharp/canton7) (Quit: ZNC - http://znc.in)
[01:34:30] *** Joins: canton7 (canton7@about/csharp/canton7)
[01:35:06] <anddam> imMute: that was a joke from the (in)famous quote
[01:35:34] <imMute> ah.  I was very young at the time, so it's not as ingrained in my head.
[01:38:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1)
[01:38:32] *** Quits: humanface (~humanface@20014C4E1C542F009880DA0B227EC187.dsl.pool.telekom.hu) (Quit: Client closed)
[01:39:42] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) ()
[01:39:43] <hubble> ear
[01:42:12] <birkoff> i have accidentally amend-committed unnecessary hunks. How can I either selectively remove them or get back to the state before the last amend ?
[01:42:48] <osse> birkoff: git checkout -p HEAD~1
[01:42:54] <osse> followed by git commit --amend
[01:43:10] <imMute> osse: that works for an amended commit?
[01:43:14] <osse> then you can (if you wish) retrieve them again with git checkout -p HEAD@{1}
[01:44:39] *** Quits: madewokherd (~urk@comcast.codeweavers.com) (Quit: If your computer stops responding for a long time, turn it off and then back on.)
[01:45:09] <osse> imMute:I don't see why not
[01:45:16] <birkoff> that shows me other changes in the tree that I have not committed
[01:45:31] <imMute> osse: I read it as he wants to go back to the commit as it was just before it was amended.  not remove the latest commit alltogether.
[01:46:22] <osse> ooooh
[01:46:35] <osse> birkoff: git checkout -p HEAD@{1}
[01:51:30] *** Quits: orbyt (~textual@172.92.4.78) (Quit: Textual IRC Client: www.textualapp.com)
[01:51:50] <anddam> wouldn't HEAD^ work as well there?
[01:52:10] <anddam> oh no, HEAD^ would point to the parent, where HEAD@{1} to "what HEAD was before it was moved last time" right?
[01:52:29] <anddam> btw is the latter syntax properly called "a reflog"?
[01:52:45] <ikke> yit refers to the reflog
[01:52:55] <ikke> it's itself just a way to specify revisions
[01:53:01] <ikke> man gitrevisions
[01:53:01] <gitinfo> the gitrevisions manpage is available at https://gitirc.eu/gitrevisions.html
[01:53:27] <anddam> I see, thx
[01:55:12] <birkoff> can I see removed commits ids / description before a git reset --hard HEAD^2
[01:55:32] <ikke> git log -g
[01:55:45] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[01:55:49] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 258 seconds)
[01:56:47] <osse> *before* ? that's just git log HEAD^2..HEAD
[01:59:21] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:00:30] *** Joins: Raguile (~Raguile@user/raguile)
[02:01:43] *** Joins: orbyt (~textual@172.92.4.78)
[02:02:20] *** Quits: bongobrown (~omary@cpe-76-185-215-2.satx.res.rr.com) (Ping timeout: 258 seconds)
[02:08:29] *** Joins: zeenk (~zeenk@2a02:2f04:a008:d600:18f2:3421:bac6:8f38)
[02:10:18] *** Joins: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net)
[02:11:24] <disi> i have 2 local clones (say, dirA/ and dirB/). I'm 99% sure they are the same. I want to deduplicate these into a single repo without losing anything (commits, tags, branches, etc) if there are differences. How should I do this?
[02:11:30] <birkoff> is there a way to restore changes that were dropped in a reset --hard ?
[02:13:08] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[02:15:46] *** Quits: hubble (~hubble@69.160.255.217) (Ping timeout: 246 seconds)
[02:18:16] *** Quits: lastgitget (~lastgitge@gw.vfc.com) (Quit: Client closed)
[02:19:12] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[02:19:34] <osse> yes
[02:19:55] <osse> use the reflog
[02:21:11] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[02:21:28] *** Quits: Samian (~Sami@2620:10d:c091:480::1:1aba) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:22:41] <birkoff> i mean uncommitted changes
[02:23:12] *** Joins: madewokherd (~urk@65-128-171-161.mpls.qwest.net)
[02:23:40] *** Joins: jazzy (~jaziz@2600:380:8644:8168:f908:1770:b71c:1691)
[02:24:05] <imMute> those are gone for good.
[02:24:06] *** Joins: vysn (~vysn@user/vysn)
[02:31:41] <Walex> disi: you can make one repository a remote for the other and then pull everthing.
[02:32:15] <imMute> s/pull/fetch/
[02:32:24] <Walex> yes sorry...
[02:32:50] <Walex> disi: --tags --all (I may be forgetting something).
[02:34:03] <Walex> disi: you may have to copy manually settings in .git/config if they have diverged enough.
[02:34:43] <Walex> disi: maybe the reflog too, if you are interested in that.
[02:38:42] <disi> Walex: ok, i'll check that... probably not tho because i havent done much dev in these at all
[02:40:34] *** Joins: roadie (~user@2a02:8108:ec0:1427:75b6:5415:a6a4:79d2)
[02:45:24] *** Quits: roadie (~user@2a02:8108:ec0:1427:75b6:5415:a6a4:79d2) (Ping timeout: 252 seconds)
[02:45:51] *** Quits: epolanski (uid312403@id-312403.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[02:54:36] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[02:57:01] *** Quits: SuperL4g (~akulbe@user/superlag) (Quit: leaving)
[02:59:50] *** Quits: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1) ()
[03:05:25] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[03:06:14] <disi> I have an automated `git fetch` in my crontab... For one project, though, that asks for a user/password. I don't want it to ask, I just want it to skip that remote. Is this possible (basically non-interactive fetch)?
[03:09:38] <disi> `yes | git fetch` does not seem to work
[03:12:27] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[03:13:26] <osse> disi: the config supports the concept of remote groups, so you can make a group containing all the ones you want to fetch
[03:15:10] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[03:15:21] <osse> maybe this is better:  git config remote.badUrl.skipDefaultUpdate true in that repo
[03:17:42] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 272 seconds)
[03:18:10] <disi> hmmm not sure that works
[03:18:42] <disi> i dont understand why `yes | get fetch` or `git fetch </dev/null` don't work
[03:19:55] <osse> git probably reads directly from the terminal instead of stdin
[03:20:53] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 265 seconds)
[03:22:22] <disi> i wonder if there is a terminal when crontab runs it... if not, maybe this isn't a problem
[03:24:29] <disi> hmm `setsid git fetch` might work
[03:25:36] <disi> `git config remote.teh_remote.skipDefaultUpdate true` pretty much works (omits from `git fetch --all` but not `git fetch teh_remote`)
[03:28:02] *** Joins: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730)
[03:28:08] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[03:28:49] *** Quits: ferdna (~ferdna@user/ferdna) (Remote host closed the connection)
[03:29:30] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[03:30:29] <osse> man gitcredentials might also be interesting
[03:30:29] <gitinfo> the gitcredentials manpage is available at https://gitirc.eu/gitcredentials.html
[03:30:39] <osse> it's Git's version of the "remember me" checkbox on the web
[03:32:58] *** Quits: Natrick (~thelounge@vmd42932.contaboserver.net) (Ping timeout: 240 seconds)
[03:34:00] *** Quits: SuperLag (~akulbe@user/superlag) (Quit: leaving)
[03:37:18] *** Joins: SuperLag (~akulbe@user/superlag)
[03:45:11] *** Quits: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net) (Quit: Client closed)
[03:46:12] *** Quits: hbautista (~hbautista@2806:10a6:e:5be6::1) (Remote host closed the connection)
[03:47:23] *** Joins: hbautista (~hbautista@187.171.91.115)
[03:48:39] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[03:48:51] *** Quits: hbautista (~hbautista@187.171.91.115) (Remote host closed the connection)
[03:49:59] *** Joins: hbautista (~hbautista@187.171.91.115)
[03:51:28] *** Quits: hbautista (~hbautista@187.171.91.115) (Remote host closed the connection)
[03:51:44] *** Quits: batrick (batrick@2600:3c00::f03c:91ff:fe96:477b) (Quit: WeeChat 3.2)
[03:52:38] *** Joins: hbautista (~hbautista@187.171.91.115)
[03:54:02] *** Joins: nate3 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[03:55:00] *** Joins: batrick (batrick@2600:3c00::f03c:91ff:fe96:477b)
[03:57:29] *** Quits: hbautista (~hbautista@187.171.91.115) (Client Quit)
[04:00:24] *** Quits: nate3 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 258 seconds)
[04:08:51] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Quit: rewrit3)
[04:14:36] *** Quits: zeenk (~zeenk@2a02:2f04:a008:d600:18f2:3421:bac6:8f38) (Quit: Konversation terminated!)
[04:39:11] *** Joins: nate3 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[04:39:12] *** Quits: orbyt (~textual@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:40:09] *** Quits: austin987 (~null@cpe-173-174-99-192.austin.res.rr.com) (Ping timeout: 265 seconds)
[04:40:21] *** Quits: dibber (~dibber@c-73-14-187-235.hsd1.co.comcast.net) (Ping timeout: 252 seconds)
[04:41:36] *** Joins: roadie (~user@2a02:8108:ec0:1427:75b6:5415:a6a4:79d2)
[04:42:55] *** Joins: dibber (~dibber@c-73-14-187-235.hsd1.co.comcast.net)
[04:43:27] *** Quits: nate3 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 245 seconds)
[04:46:06] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[04:46:10] *** Joins: fructose (~fructose@user/fructose)
[04:46:22] *** Quits: roadie (~user@2a02:8108:ec0:1427:75b6:5415:a6a4:79d2) (Ping timeout: 245 seconds)
[04:50:11] *** Joins: orbyt (~textual@172.92.4.78)
[04:55:50] *** Quits: orbyt (~textual@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:57:37] *** Joins: adl_ (~adl@117.32.216.79)
[04:58:13] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[05:03:12] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:03:22] *** Joins: austin987 (~null@cpe-70-114-220-15.austin.res.rr.com)
[05:08:29] *** Joins: roadie (~user@2a02:8108:ec0:1427:6536:69ec:4611:4fd2)
[05:13:23] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[05:13:55] *** Quits: roadie (~user@2a02:8108:ec0:1427:6536:69ec:4611:4fd2) (Ping timeout: 268 seconds)
[05:14:14] *** Joins: Xenguy (~Xenguy@devuan/developer/Xenguy)
[05:14:34] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[05:16:06] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[05:17:11] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:19:02] *** Quits: austin987 (~null@cpe-70-114-220-15.austin.res.rr.com) (Ping timeout: 256 seconds)
[05:29:40] *** Joins: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[05:30:55] *** Joins: austin987 (~null@172.58.99.95)
[05:31:07] <ryzenda> How can I use `git add` in an X desktop GUI environment from a xterm GUI window that is executing the command as a different user, not the same user that is logged in to X desktop environment?
[05:31:16] <ryzenda> I see this -->  warning: unable to access '/home/otheruser/.config/git/ignore': Permission denied
[05:31:51] <ryzenda> the user I switched to has a ~/.comnfig/git directory also.
[05:35:11] *** Joins: austin_laptop (~null@100.42.98.196)
[05:35:51] *** Quits: austin987 (~null@172.58.99.95) (Ping timeout: 258 seconds)
[05:36:08] <ryzenda> Oh maybe there is a bug? https://pastebin.com/raw/52fSsHXn  I used `strace git add file` and see this snippet: Line 2 tries to access file from user1's directory,and then the next line,for a different next file,proceeds to access from user2's path
[05:36:57] <ryzenda> Shouldn't line two appear as: "access("/home/usertwo/.config/git/config", R_OK) = ..." ?
[05:37:58] <ryzenda> Again, userone is the user I am logged in to X GU desktop environment as, and user2 is a user on this same computer,that I switched to for handling the git repository files.
[05:38:04] <ryzenda> GUI*
[05:39:04] *** Joins: nate3 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[05:52:20] *** Quits: nate3 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 258 seconds)
[05:58:33] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[06:01:51] *** Joins: fstd_ (~fstd@xdsl-78-34-189-238.nc.de)
[06:06:08] *** Quits: fstd (~fstd@xdsl-85-197-59-162.nc.de) (Ping timeout: 258 seconds)
[06:20:35] *** Quits: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730) (Remote host closed the connection)
[06:21:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730)
[06:24:03] *** Quits: rahl- (~rahl@102.114.123.208) (Ping timeout: 276 seconds)
[06:25:22] *** Quits: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730) (Ping timeout: 240 seconds)
[06:35:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730)
[06:39:11] *** Joins: nate3 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[06:42:58] *** Quits: thiago (~thiago@2601:1c0:4501:635c:a497:34ac:84c:cb98) (Ping timeout: 240 seconds)
[06:43:05] *** Joins: gnoo (~gnoo@user/gnoo)
[06:46:34] *** Quits: adl_ (~adl@117.32.216.79) (Quit: Konversation terminated!)
[06:46:45] *** Parts: PendulumSwinger (~PendulumS@user/pendulumswinger) (The Lounge - https://thelounge.chat)
[06:47:45] *** Joins: adlternative (~adl@117.32.216.71)
[06:48:18] *** Quits: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com) (Ping timeout: 240 seconds)
[06:53:30] *** Quits: gnoo (~gnoo@user/gnoo) (Ping timeout: 244 seconds)
[06:58:44] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:58:44] *** FinnElija is now known as Guest8697
[06:58:44] *** Quits: Guest8697 (~finn_elij@user/finn-elija/x-0085643) (Killed (tungsten.libera.chat (Nickname regained by services)))
[06:58:44] *** finn_elija is now known as FinnElija
[07:00:28] *** Joins: yuckey2d (~yuckey2d@209.181.233.16)
[07:06:06] *** Quits: yuckey2d (~yuckey2d@209.181.233.16) (Quit: The Lounge - https://thelounge.chat)
[07:06:59] *** Joins: yuckey2d (~yuckey2d@46.246.3.212)
[07:09:23] *** Joins: roadie (~user@2a02:8108:ec0:1427:6536:69ec:4611:4fd2)
[07:09:30] *** Quits: austin_laptop (~null@100.42.98.196) (Ping timeout: 265 seconds)
[07:09:57] <birkoff> i've learned the hard way that files that are untracked can get erased or reverted on rebases and resets
[07:12:16] *** Quits: adlternative (~adl@117.32.216.71) (Remote host closed the connection)
[07:12:45] *** Joins: adlternative (~adl@117.32.216.12)
[07:14:13] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[07:14:18] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[07:18:49] *** Joins: hubble (~hubble@69.160.252.247)
[07:19:10] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 265 seconds)
[07:24:08] *** Quits: roadie (~user@2a02:8108:ec0:1427:6536:69ec:4611:4fd2) (Ping timeout: 252 seconds)
[07:24:10] *** Joins: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com)
[07:24:24] *** Joins: saroy (~sanroy@45.249.73.214)
[07:26:22] *** Joins: Samian (~Sami@2620:10d:c091:480::1:933)
[07:27:11] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[07:31:07] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:35:48] *** Quits: nate3 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 252 seconds)
[07:35:48] *** Joins: atrigent_ (~atrigent@130.44.130.244)
[07:38:13] *** Quits: atrigent (~atrigent@130.44.130.244) (Ping timeout: 268 seconds)
[07:42:07] *** Xenguy is now known as BoatyMcBoatface
[07:42:21] *** BoatyMcBoatface is now known as Xenguy
[07:49:02] *** nevyn_ is now known as nevyn
[07:51:04] *** Joins: austin987 (~null@cpe-173-174-99-192.austin.res.rr.com)
[07:55:11] *** Quits: atrigent_ (~atrigent@130.44.130.244) (Read error: Connection reset by peer)
[07:55:54] *** Joins: atrigent (~atrigent@130.44.130.244)
[07:58:18] *** Quits: dibber (~dibber@c-73-14-187-235.hsd1.co.comcast.net) (Ping timeout: 240 seconds)
[08:00:31] *** Quits: hubble (~hubble@69.160.252.247) (Ping timeout: 246 seconds)
[08:00:57] *** Joins: ishutin_ (~ishutin@92-249-150-169.static.digikabel.hu)
[08:04:44] *** Quits: ishutin (~ishutin@193-110-63-61.cable-modem.hdsnet.hu) (Ping timeout: 268 seconds)
[08:06:46] *** Joins: durham (~durham@2620:10d:c091:480::1:972c)
[08:06:46] *** Quits: durham_ (~durham@2620:10d:c091:480::1:972c) (Read error: Connection reset by peer)
[08:07:21] *** Joins: PaMeDa (~apauli@dynamic-077-006-158-054.77.6.pool.telefonica.de)
[08:08:58] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[08:10:20] *** Quits: apauli (~apauli@dynamic-077-003-243-092.77.3.pool.telefonica.de) (Ping timeout: 258 seconds)
[08:11:55] *** Quits: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730) (Remote host closed the connection)
[08:12:51] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[08:13:02] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[08:14:08] *** Joins: thiago (~thiago@2601:1c0:4501:635c:f184:9b5:13de:3e70)
[08:16:55] *** Joins: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730)
[08:20:25] *** Quits: ueberall (ueberall_l@user/ueberall) (Quit: ZNC)
[08:21:27] *** Joins: ueberall (ueberall_l@user/ueberall)
[08:21:38] *** Joins: roadie (~user@2a02:8108:ec0:1427:6536:69ec:4611:4fd2)
[08:22:03] *** Quits: roadie (~user@2a02:8108:ec0:1427:6536:69ec:4611:4fd2) (Client Quit)
[08:23:56] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:31:05] *** Joins: nate3 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[08:38:26] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 265 seconds)
[08:39:30] *** Quits: Samian (~Sami@2620:10d:c091:480::1:933) (Ping timeout: 240 seconds)
[08:45:27] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:48:13] *** Quits: adlternative (~adl@117.32.216.12) (Quit: Konversation terminated!)
[08:51:37] *** Quits: lgc (~lgc@user/lgc) (Quit: WeeChat 3.2-dev)
[08:52:12] *** Joins: adl_ (~adl@117.32.216.12)
[09:03:37] *** Quits: nate3 (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 258 seconds)
[09:09:38] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:11:00] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:19:49] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:24:00] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:24:14] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[09:29:11] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 265 seconds)
[09:31:22] *** Quits: thiago (~thiago@2601:1c0:4501:635c:f184:9b5:13de:3e70) (Ping timeout: 245 seconds)
[09:32:25] *** Joins: atharvaraykar (~Thunderbi@user/atharvaraykar)
[09:35:23] *** Quits: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730) (Remote host closed the connection)
[09:36:43] *** Joins: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730)
[09:37:01] *** Quits: reset (~reset@user/reset) (Quit: reset)
[09:38:19] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 244 seconds)
[09:39:11] *** Joins: reset (~reset@user/reset)
[09:42:05] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[09:42:16] *** Joins: beepbooptheory (~mik@37.19.211.136)
[09:45:41] *** Joins: Natrick (~thelounge@vmd42932.contaboserver.net)
[09:46:29] *** Quits: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730) (Remote host closed the connection)
[09:50:11] *** Quits: beepbooptheory (~mik@37.19.211.136) (Ping timeout: 268 seconds)
[09:55:00] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:57:10] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:05:37] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[10:06:08] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[10:06:14] *** Joins: malteger_ (~malteger@user/malteger)
[10:06:50] *** Quits: malteger (~malteger@user/malteger) (Ping timeout: 268 seconds)
[10:07:12] *** Parts: Raguile (~Raguile@user/raguile) ()
[10:08:50] *** Joins: gnoo (~gnoo@user/gnoo)
[10:14:09] *** Parts: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (WeeChat 2.7)
[10:17:40] *** Quits: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com) (Ping timeout: 256 seconds)
[10:26:27] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[10:30:55] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:31:30] *** Joins: gnooooo (~gnoo@user/gnoo)
[10:35:09] *** Quits: gnoo (~gnoo@user/gnoo) (Ping timeout: 244 seconds)
[10:36:22] *** gnooooo is now known as gnoo
[10:40:25] *** Joins: palasso (~palasso@user/palasso)
[10:49:58] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:50:34] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:51:12] *** Lord_of_Life_ is now known as Lord_of_Life
[10:52:27] *** Joins: digdilem (~digdilem@rolf.yuss.org)
[10:56:21] *** Quits: bin101 (~bin101@user/bin101) (Quit: goodbye)
[10:56:32] *** Joins: bin101 (~bin101@user/bin101)
[10:58:36] *** Quits: treefrob (~robx@p57a969ef.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[11:03:56] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Quit: Lost terminal)
[11:12:38] *** Joins: treefrob (~robx@p57a969ef.dip0.t-ipconnect.de)
[11:14:49] *** Joins: gnooooo (~gnoo@user/gnoo)
[11:14:56] *** Quits: gnoo (~gnoo@user/gnoo) (Ping timeout: 244 seconds)
[11:15:01] *** Joins: junktext (~junktext@109.201.152.162)
[11:16:45] *** Joins: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr)
[11:17:50] *** Quits: reset (~reset@user/reset) (Quit: reset)
[11:21:51] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[11:21:58] <foo> I might be missing something but I set up a bare repo with git init --bare . on a remote server... then I do git remote add origin mysshhost:/the/path/on/remote/system.git ... then I do git push --set-upstream origin master
[11:22:11] <foo> It's failing, times out and says fatal: Could not read from remote repository.
[11:22:17] <foo> But I can clearly ssh mysshhost
[11:22:27] <foo> and get in, and perms are as my user on remote host. /me scratches head
[11:22:58] <foo> Oh, unless ssh + git isn't just a path? Hmm. something odd is happening.
[11:23:04] *** Joins: filePeter (~filePeter@user/filepeter)
[11:23:32] *** Quits: austin987 (~null@cpe-173-174-99-192.austin.res.rr.com) (Ping timeout: 258 seconds)
[11:26:12] <foo> I thought I needed a bare repo since this is the main repo we'll push to between systems... even without --bare it still doesn't seem to work. Hmph.
[11:28:22] <geirha> does scp work?
[11:30:15] <geirha> e.g. scp dummyfile mysshhost:/the/path/on/remote/system.git
[11:31:25] <geirha> Thinking it may be a misbehaving .bashrc on the remote end. If it is, scp will also fail
[11:32:05] *** Joins: DevAntoine (~DevAntoin@78.196.234.32)
[11:33:24] *** Quits: Quietus (~quietus@larch.ratcliffefamily.uk) (Ping timeout: 252 seconds)
[11:34:37] <foo> geirha: that's a great logical next-step. Doing that now.
[11:34:52] *** Quits: unluckyshrubbery (~unluckysh@097-069-164-025.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[11:34:59] <foo> geirha: this is a newer install so perhaps I missed a configuration
[11:35:12] <foo> geirha: yeah also not responding
[11:35:55] *** Joins: vysn (~vysn@user/vysn)
[11:36:21] <foo> geirha: ubuntu. Wondering if something in sshd_ is not set up properly.
[11:36:34] *** Joins: austin987 (~null@100.42.98.196)
[11:37:08] <foo> geirha: I do see Subsystem       sftp    /usr/lib/openssh/sftp-server fwiw
[11:37:14] <geirha> ok, so bash has this rather stupid feature that some distros like to enable for unexplainable reasons. Normally .bashrc is only read when you start an interactive bash, but this feature also reads .bashrc if the shell is started via ssh, even when non-interactive
[11:37:33] <geirha> and if the .bashrc produces any output, that output will interfere with scp's protocol, or git's
[11:37:52] <foo> geirha: how do I know if it's a .bashrc issue?
[11:38:24] <geirha> ssh into the remote, then run   bash -ic ''   does it produce any output?
[11:38:34] *** Joins: Quietus (~quietus@larch.ratcliffefamily.uk)
[11:38:42] <foo> geirha: negative.
[11:39:59] * foo checks system logs
[11:40:14] <geirha> ok, how about   ssh mysshhost true    any output from that?
[11:42:29] *** Joins: furrymcgee (~devuan@31.179.186.66)
[11:42:41] <foo> geirha: so odd, that just throws a timeout, not responding
[11:42:49] <foo> geirha: but ssh mysshhost works fine ...
[11:43:13] <foo> I don't think there is any firewall in place.. /me checks
[11:44:34] <geirha> I'd check what .bashrc is doing. Try temporarily putting  set -x  at the top of .bashrc, then run   ssh mysshhost true  again
[11:44:49] <geirha> or show your .bashrc
[11:45:04] <foo> geirha: really appreciate the help, not sure I've ever seen a .bashrc issue causing this - that seems so dumb. Not doubting you, but I can't say I've seen that one before.
[11:45:19] <foo> If it's timing out, it seems like it'd be an issue before .bashrc even gets ran?
[11:45:45] <foo> No firewalls, digital ocean
[11:46:05] <geirha> perhaps, but it could be the .bashrc has some flawed logic that causes it to start a new bash, so you get infinite recursion
[11:48:02] <foo> geirha: here's what you're suggesting is the issue, https://superuser.com/a/396667 - so odd.
[11:48:06] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[11:48:07] <foo> I wonder if a banner could cause this?
[11:48:10] * foo checks sshd config for banner
[11:49:17] <geirha> if you mean ssh banner, I doubt it. ssh should be clever enough to know not to print the banner when it's not used interactively
[11:49:57] <foo> geirha: I tried to wipe .bashrc entirely, same thing.
[11:50:16] <foo> wtf is going on here, I've done this process like 30 times over the past decades.
[11:50:30] <geirha> Hm. Ok. Could be /etc/bash.bashrc too, but less likely, as most people never edit that one
[11:50:58] *** Quits: jazzy (~jaziz@2600:380:8644:8168:f908:1770:b71c:1691) (Ping timeout: 240 seconds)
[11:51:27] <geirha> anyway, when you do   ssh mysshhost true   it should be running bash -c true  on the remote end. Check with ps what the child process of the sshd is, if any
[11:51:42] <foo> geirha: not seeing anything in logs which isn't helping here
[11:52:11] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[11:52:24] <lpapp> hi, worktrees keep up to date with submodule checkouts, too?
[11:53:29] <ikke> To be honest, I'm not sure how they interact
[11:53:52] <ikke> But as each worktree has it's own index, I suppose you need to run git submodule update in each worktree
[11:54:39] <foo> https://bpa.st/5JOQ - in case anything here is helpful.
[11:54:44] * foo baffled.
[11:55:19] <geirha> foo: run  ps -efH   or   pstree   on the remote before and after doing ssh myhost true  to see what processes it spawns
[11:59:20] <geirha> you should at least see a new sshd pop up, but what process does it have as child
[11:59:30] *** Quits: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se) (Quit: Bye)
[11:59:42] *** Joins: epolanski (uid312403@id-312403.brockwell.irccloud.com)
[11:59:46] *** Joins: jazzy (~jaziz@2600:380:8577:4a6c:39b4:468b:5d5a:f419)
[12:00:38] <foo> geirha: /w 21
[12:00:39] <foo> whoops
[12:01:13] <foo> geirha: I'm using host keys, password auth disabled... but I doubt that should matter
[12:01:43] <geirha> yeah, shouldn't matter
[12:02:36] *** Joins: zeenk (~zeenk@2a02:2f04:a008:d600:18f2:3421:bac6:8f38)
[12:04:35] *** Quits: celphi (sid97751@user/celphi) (Quit: Connection closed for inactivity)
[12:05:22] *** Quits: jimklimov (~jimklimov@ip-86-49-254-149.net.upcbroadband.cz) (Read error: Connection reset by peer)
[12:07:14] <foo> this is scp -vvv file.conf myhost:/home/path/here : https://bpa.st/HUFA
[12:07:17] <foo> in case anyone see's anything weird
[12:07:44] <ikke> Timeout, server .. not responding?
[12:08:02] <foo> ikke: that is correct. ... but I can ssh myhost and it works just fine. sigh.
[12:08:09] <foo> No firewall
[12:08:12] <foo> Brand new ubuntu set up
[12:08:19] <geirha> the remote shell never executes the scp -t command it's supposed to
[12:08:34] <foo> I can't scp file myhost:/home/path
[12:08:35] *** Joins: jimklimov (~jimklimov@ip-86-49-254-149.net.upcbroadband.cz)
[12:08:37] <foo> or git push
[12:08:44] <foo> in both situations, Timeout and lost connection
[12:08:51] <osse> lpapp: other worktrees behave the same way as the main worktree
[12:08:54] <foo> (end goal is to git push
[12:09:22] <lpapp> osse: what do you mena by same way in case of subdirectories?
[12:10:10] <osse> lpapp: I mean that in worktress the hassle with submodules is no more or less than usual
[12:10:13] <geirha> foo: another thing you could try is to change the remote shell to dash; chsh -s /bin/dash
[12:10:30] <osse> lpapp: it can get out of date, so you run 'git submodule update' and so on
[12:10:34] <osse> same as it ever was
[12:10:39] <lpapp> ah, shame.
[12:11:06] <lpapp> I was hoping that it would pick up the right submodule from the reference in that branch.
[12:11:10] <lpapp> automatically.
[12:11:19] *** Joins: malteger (~malteger@user/malteger)
[12:11:20] <lpapp> if that is happening, great, if not, shame.
[12:11:41] <osse> does/did it happen in the regular dir before you made worktrees?
[12:12:01] <lpapp> no, but that is different
[12:12:09] <lpapp> I thought worktree behaves like git switch branch
[12:12:21] <lpapp> just into a copy, not local.
[12:12:21] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[12:12:36] <geirha> dash doesn't have the broken ssh-feature bash has, so that should at least be a work around
[12:12:43] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[12:12:44] <Industrial[m]> Hello. I have installed git on windows. I want to check out a branch that contains files with a `:`. This is not possible on windows. I get the error `error: invalid path 'bin/compile:watch'`. What now?
[12:12:51] <osse> I didn't know switch updated submodules by default
[12:13:09] <lpapp> not the files, but reference, maybe
[12:13:29] <lpapp> I guess that is alright then
[12:13:39] <lpapp> I must have misunderstood
[12:13:48] <lpapp> thanks
[12:13:50] *** Quits: malteger_ (~malteger@user/malteger) (Ping timeout: 256 seconds)
[12:14:59] <foo> just tried with another host, scp worked fine... so it's not my network
[12:15:07] <foo> this. is. so. odd.
[12:15:35] <osse> Industrial[m]: you can try  git config core.protectNTFS false  and try checking out the file again
[12:15:52] <geirha> did you try with dash?
[12:16:27] *** gnooooo is now known as gnoo
[12:16:51] <j416> Industrial[m]: is renaming the file an option?
[12:17:18] <lpapp> osse: fresh main build is 5540 build steps, I believe you asked me this yesterday. I could not give an exact number at that point, only a rough estimation.
[12:17:30] <foo> geirha: if I cleared my .bashrc entirely, shouldn't that suffice? Hmmm
[12:18:35] <Industrial[m]> osse: Thanks.
[12:18:54] <Industrial[m]> j416: I will try that. `bin/compile:watch` => `bin/compile-watch`
[12:19:11] *** Joins: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se)
[12:19:23] <geirha> unless /etc/bash.bashrc contains the bad code
[12:20:49] <foo> geirha: tried to wipe that, no fix.
[12:21:06] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[12:21:09] <foo> geirha: It's 1am, this is annoying and makes no sense. I'm going to get some sleep and try tomorrow. Really appreciate your suggestions. If I get it I'll let you know .
[12:22:54] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[12:23:25] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[12:24:00] *** Joins: junktext_ (~junktext@109.201.152.164)
[12:25:27] *** Quits: junktext (~junktext@109.201.152.162) (Ping timeout: 276 seconds)
[12:26:17] <Industrial[m]> j416: got it working by renaming the files from github
[12:28:09] *** Joins: oxymoron93 (~oxymoron9@212.62.38.106)
[12:45:34] *** Quits: malteger (~malteger@user/malteger) (Ping timeout: 258 seconds)
[12:49:13] *** Joins: malteger (~malteger@user/malteger)
[12:52:11] *** Quits: junktext_ (~junktext@109.201.152.164) (Ping timeout: 265 seconds)
[12:55:56] *** Quits: atharvaraykar (~Thunderbi@user/atharvaraykar) (Ping timeout: 272 seconds)
[13:03:43] *** Quits: furrymcgee (~devuan@31.179.186.66) (Quit: leaving)
[13:06:52] *** Joins: natrys (~natrys@user/natrys)
[13:09:20] *** Quits: saroy (~sanroy@45.249.73.214) (Ping timeout: 258 seconds)
[13:11:59] <j416> Industrial[m]: nice. could have probably also done it in a bare repo (clone --bare).
[13:13:30] <j416> someone remind me, how would I create a git alias that is a series of shell commands? foo = !/bin/sh something something
[13:14:25] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:14:40] *** Joins: saroy (~sanroy@45.249.73.224)
[13:14:53] <osse> start the value with ! and the rest is a shell command line
[13:15:18] <j416> yeah, thanks for confirming that part. I'm probably struggling with the quoting.
[13:15:21] <osse> git config alias.rofl '!echo j416 is noob && ls'
[13:15:33] <j416> handy alias that
[13:16:17] <j416> here's what I'm trying to do
[13:16:39] <j416> directly from config:
[13:16:45] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:16:48] <j416> wip = !/bin/sh -c 'git commit -am "[wip] $(git diff --name-only | xargs -n1 basename | xargs echo)"'
[13:17:30] <j416> seems the issue is that it eats the quoting -> fatal: paths 'main.go ...' with -a does not make sense
[13:17:47] <osse> j416: https://www.youtube.com/watch?v=dpLNA1Dk68M&t=16s
[13:17:56] <j416> oh hey,
[13:17:58] <j416> wip = !/bin/sh -c 'git commit -am \"[wip] $(git diff --name-only | xargs -n1 basename | xargs echo)\"'
[13:18:00] <j416> thanks. works now.
[13:18:10] <osse> next step: remove the sh -c
[13:18:23] <j416> osse: lol what @ video
[13:18:51] <osse> I was just trying to link to the "it's my favorite" part of it, but specifying and end timestamp doesn't work anymore apparently
[13:19:10] <osse> it's my favorite way of saying "it's my favorite"
[13:19:28] <oxymoron93> it does link to particular part
[13:19:35] <j416> osse: haha.
[13:19:41] <j416> ooh, nice.
[13:19:43] <j416> wip = !git commit -am \"[wip] $(git diff --name-only | xargs -n1 basename | xargs echo)\"
[13:19:47] <j416> osse: next step please
[13:19:55] <oxymoron93> and thanks for clarification, had no idea what he was sayin
[13:21:03] *** Joins: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com)
[13:21:15] <osse> j416: add '&& :' at the end to consume the args (if any)
[13:21:33] <j416> o_O
[13:22:07] <j416> cool.
[13:22:11] <j416> $ git wip bananas
[13:22:12] <j416> fatal: paths 'bananas ...' with -a does not make sense
[13:22:20] <j416> solves this problem then!
[13:23:34] <j416> osse: where can I learn more about this && : sorcery?
[13:28:41] <davve> man bash
[13:28:46] <j416> ooh, it's just true
[13:29:03] <osse> j416: 'ere's de ting, mon
[13:29:26] <j416> ya man, thanks broda'
[13:29:38] <osse> git config alias.kek '!echo'
[13:29:46] <osse> then do:  git kek foo bar baz
[13:30:01] <osse> notice that it prints 'foo bar baz'.
[13:30:05] <j416> is that a fork bomb
[13:30:21] <j416> sans fork
[13:30:45] <osse> that means that any extra args you provide get appended to the command line. depending on the situation that's not desired, so the && : at the end slurps them up and does nothing with them
[13:30:46] <j416> ah wait. read that as just alias.
[13:30:52] <j416> right
[13:30:54] <j416> thanks.
[13:31:11] <osse> the args are *also* available as $1 and $2 and so on.
[13:31:20] <j416> ty
[13:31:40] <osse> git config alias.printsecondarg '!echo "$2"'  won't work, since it effectively does echo "$2" "$@"
[13:32:14] <osse> your sh -c '...' thing also solves this problem since the extra args become args to sh which also does nothing with them
[13:32:21] <osse> that's why you often see git aliases like:
[13:32:25] <osse> sh -c '...'
[13:32:29] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[13:32:32] <osse> f() { ...; }; f
[13:33:42] *** Joins: atharvaraykar (~Thunderbi@user/atharvaraykar)
[13:33:43] <osse> git already runs a shell (that's the whole point of '!') so using sh -c feels a bit icky. the f() approach is functional (kek), but && : is imho neater
[13:33:47] *** Quits: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se) (Quit: Bye)
[13:34:13] <osse> Thanks for coming to my KEK talk
[13:35:33] *** Joins: unluckyshrubbery (~unluckysh@097-069-164-025.res.spectrum.com)
[13:37:01] *** Joins: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se)
[13:38:05] *** Joins: celphi (uid97751@id-97751.brockwell.irccloud.com)
[13:38:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[13:38:42] *** Quits: celphi (uid97751@id-97751.brockwell.irccloud.com) (Changing host)
[13:38:42] *** Joins: celphi (uid97751@user/celphi)
[13:39:33] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:39:54] *** Quits: celphi (uid97751@user/celphi) (Client Quit)
[13:40:06] *** Joins: celphi (uid97751@user/celphi)
[13:40:12] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 268 seconds)
[13:40:38] *** Joins: Anticom (~Anticom@87.190.49.75)
[13:43:18] *** Joins: roadie (~user@2a02:8108:ec0:1427:6536:69ec:4611:4fd2)
[13:43:44] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[13:46:18] *** Quits: malteger (~malteger@user/malteger) (Ping timeout: 240 seconds)
[13:48:27] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 245 seconds)
[13:49:00] *** Joins: fandre1986 (~fandre198@78.10.133.217)
[13:50:08] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[13:54:34] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 258 seconds)
[13:56:12] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[13:58:24] *** Joins: goldfish (~goldfish@user/goldfish)
[14:01:39] *** Quits: shabius_ (~shabius@2a0e:1c80:2:1022::1003) (Ping timeout: 276 seconds)
[14:02:54] *** Joins: shabius (~shabius@45.15.19.229)
[14:10:58] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[14:12:35] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[14:12:49] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[14:13:54] *** Quits: milosz_ (~milosz@user/milosz) (Read error: Connection reset by peer)
[14:14:13] *** Joins: milosz_ (~milosz@user/milosz)
[14:14:18] *** Quits: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com) (Ping timeout: 240 seconds)
[14:18:48] *** Joins: rahl (~rahl@102.114.123.208)
[14:20:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[14:20:53] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[14:22:49] *** Joins: furrymcgee (~devuan@31.179.186.66)
[14:34:24] *** Joins: malteger (~malteger@user/malteger)
[14:35:47] <nedbat> continuing from yesterday, if i make a patch with "git diff -p", I get a file with \n line endings. I attach it to an email and send it. The recipient detaches it, it has \r\n line endings, and "git apply" won't apply it.  What is the right way to send the patch?
[14:37:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[14:39:29] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 265 seconds)
[14:41:29] *** Quits: mweckbecker (~matthias@weckbecker.name) (Quit: leaving)
[14:42:02] *** Joins: mweckbecker (~matthias@weckbecker.name)
[14:49:13] <osse> nedbat: if you make a commit, use format-patch to produce a file, and the other person applies that with git am then it seems to work fine regardless of the line endings of the file
[14:56:56] *** Parts: Ulli[m] (~chrismat_@2001:470:69fc:105::c837) ()
[14:58:00] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 252 seconds)
[14:58:39] <osse> I don't know enough about e-mail to know whether your or their client is misbehaving, or whether this is expected
[14:59:31] <nedbat> osse: thanks, i'll look into switching
[14:59:36] *** Joins: randomuser (~randomuse@user/randomuser)
[15:00:44] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[15:01:06] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[15:06:40] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[15:06:40] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (Quit: Bridge terminating on SIGTERM)
[15:06:40] *** Quits: AnisBarghouthi[m (~anis-barg@2001:470:69fc:105::6ebb) (Quit: Bridge terminating on SIGTERM)
[15:06:40] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (Quit: Bridge terminating on SIGTERM)
[15:06:40] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: Rubin (~rubin@2001:470:69fc:105::17e) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: Vipulk (~vipulk@user/vipulk) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: cpackham[m] (~cpackhamm@2001:470:69fc:105::927) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: pinage404 (~pinage404@2001:470:69fc:105::25c) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: Kamui (~kamui-ren@2001:470:69fc:105::f74) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: Helmholtz (~leibnizma@2001:470:69fc:105::3124) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: tuxayo (~tuxayomat@2001:470:69fc:105::5bf) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: Guest7982 (~bluepenqu@2001:470:69fc:105::829) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: elemongw[m] (~elemongwk@2001:470:69fc:105::34ee) (Quit: Bridge terminating on SIGTERM)
[15:06:43] *** Quits: Ody[m] (~odyinthes@2001:470:69fc:105::bfdf) (Quit: Bridge terminating on SIGTERM)
[15:06:43] *** Quits: Industrial[m] (~industria@2001:470:69fc:105::eb9) (Quit: Bridge terminating on SIGTERM)
[15:06:43] *** Quits: silvio[m] (~silv-ioma@2001:470:69fc:105::2f06) (Quit: Bridge terminating on SIGTERM)
[15:06:45] *** Quits: zfnmxt (~zfnmxtzfn@user/zfnmxt) (Quit: Bridge terminating on SIGTERM)
[15:06:46] *** Quits: novasharper (~novasharp@2001:470:69fc:105::b4a) (Quit: Bridge terminating on SIGTERM)
[15:06:46] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (Quit: Bridge terminating on SIGTERM)
[15:06:46] *** Quits: heftig[m] (~heftig@archlinux/developer/heftig) (Quit: Bridge terminating on SIGTERM)
[15:06:46] *** Quits: lasr[m] (~lasrhalog@2001:470:69fc:105::c875) (Quit: Bridge terminating on SIGTERM)
[15:06:48] *** Quits: smuise[m] (~smuisemat@2001:470:69fc:105::c5de) (Quit: Bridge terminating on SIGTERM)
[15:06:50] *** Quits: viral_mutant[m] (~viralmuta@2001:470:69fc:105::3905) (Quit: Bridge terminating on SIGTERM)
[15:06:50] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[15:09:34] *** Joins: AnisBarghouthi[m (~anis-barg@2001:470:69fc:105::6ebb)
[15:12:23] *** Quits: travisghansen (~travisgha@192.74.130.86) (Ping timeout: 258 seconds)
[15:13:59] *** Quits: gnoo (~gnoo@user/gnoo) (Remote host closed the connection)
[15:14:20] *** Joins: gnoo (~gnoo@user/gnoo)
[15:14:27] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: The Lounge - https://thelounge.chat)
[15:14:41] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[15:17:00] *** Joins: Rubin (~rubin@2001:470:69fc:105::17e)
[15:17:00] *** Joins: pinage404 (~pinage404@2001:470:69fc:105::25c)
[15:17:00] *** Joins: psydroid (~psydroid@user/psydroid)
[15:17:00] *** Joins: cpackham[m] (~cpackhamm@2001:470:69fc:105::927)
[15:17:00] *** Joins: tuxayo (~tuxayomat@2001:470:69fc:105::5bf)
[15:17:00] *** Joins: Industrial[m] (~industria@2001:470:69fc:105::eb9)
[15:17:00] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[15:17:01] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[15:17:01] *** Joins: lasr[m] (~lasrhalog@2001:470:69fc:105::c875)
[15:17:01] *** Joins: kadoban (~kadoban@user/kadoban)
[15:17:01] *** Joins: Kamui (~kamui-ren@2001:470:69fc:105::f74)
[15:17:01] *** Joins: ServerStatsDisco (~serversta@2001:470:69fc:105::1a)
[15:17:01] *** Joins: Guest5898 (~bluepenqu@2001:470:69fc:105::829)
[15:17:01] *** Joins: novasharper (~novasharp@2001:470:69fc:105::b4a)
[15:17:01] *** Joins: Vipulk (~vipulk@user/vipulk)
[15:17:01] *** Joins: elemongw[m] (~elemongwk@2001:470:69fc:105::34ee)
[15:17:01] *** Joins: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5)
[15:17:01] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[15:17:01] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[15:17:01] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[15:17:01] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[15:17:01] *** Joins: heftig[m] (~heftig@archlinux/developer/heftig)
[15:17:01] *** Joins: Helmholtz (~leibnizma@2001:470:69fc:105::3124)
[15:17:12] *** Joins: Ody[m] (~odyinthes@2001:470:69fc:105::bfdf)
[15:17:12] *** Joins: smuise[m] (~smuisemat@2001:470:69fc:105::c5de)
[15:17:12] *** Joins: viral_mutant[m] (~viralmuta@2001:470:69fc:105::3905)
[15:17:14] *** Joins: silvio[m] (~silv-ioma@2001:470:69fc:105::2f06)
[15:20:07] *** Joins: xkuru (~xkuru@user/xkuru)
[15:21:26] *** Quits: xkuru (~xkuru@user/xkuru) (Client Quit)
[15:27:09] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[15:31:36] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 256 seconds)
[15:34:17] *** Joins: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com)
[15:34:58] *** Quits: Strom (strom@fedora/strom) ()
[15:35:13] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[15:35:58] <j416> osse: thanks; til. useful.
[15:37:00] *** Joins: Strom (strom@fedora/strom)
[15:37:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[15:37:32] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[15:58:51] *** Joins: reillybrogan_ (~reillybro@2602:ae:1470:6400:7285:c2ff:fedb:5004)
[16:00:10] *** Quits: reillybrogan (~reillybro@174-20-118-40.mpls.qwest.net) (Ping timeout: 240 seconds)
[16:00:22] *** reillybrogan_ is now known as reillybrogan
[16:01:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[16:02:15] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[16:03:20] *** Quits: randomuser (~randomuse@user/randomuser) (Read error: Connection reset by peer)
[16:03:30] *** Joins: randomuser (~randomuse@user/randomuser)
[16:09:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[16:10:34] *** Quits: malteger (~malteger@user/malteger) (Ping timeout: 240 seconds)
[16:10:50] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[16:11:52] *** Joins: malteger (~malteger@user/malteger)
[16:16:52] *** Quits: dcpc007 (~dcpc007@lfbn-idf2-1-152-89.w83-202.abo.wanadoo.fr) (Quit: Leaving)
[16:25:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[16:26:00] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[16:28:19] *** Quits: adl_ (~adl@117.32.216.12) (Quit: Konversation terminated!)
[16:40:21] *** Joins: onizu (uid373383@id-373383.highgate.irccloud.com)
[16:40:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[16:40:59] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[16:42:07] <Gurkenglas> i don't think catching up is supposed to make a giant commit with all the changes that happened on master in the meantime, how do make my merge commit be just the way i resolved the conflicts? https://github.com/Gurkenglas/tgstation/commit/4bd1ce9812acaaf943a1c2a3195ea8c779b04522
[16:43:10] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[16:43:28] <lpapp> osse: does the git worktree maintain a merged stash still, or does it keep one stash per worktree
[16:43:31] <lpapp> (i.e. branch)
[16:43:48] <osse> Gurkenglas: merge commits are huge by nature.
[16:43:55] <lpapp> a colleague was asking me if worktree helps with stashing, too?
[16:44:01] <lpapp> as he does not like that the stash is global
[16:44:44] <osse> Gurkenglas: commits are complete snapshots, not diffs. so what you're seeing there is the computed diffs between the merge commit and the two prior commits
[16:45:04] <Gurkenglas> osse, the way i'd imagine it is that merging changes that happened while my PR was waiting would look like a commit to my sequence-of-twelve-commits that says "modify commit 3/12 with *this* conflict resolution, modify commit 8/12 with *this* conflict resolution"
[16:46:33] <osse> Gurkenglas: git show --cc {hashhere} is probably what you're after
[16:46:45] <Gurkenglas> i'd like it to remain possible to apply some prefix of my commit sequence and compile the result
[16:46:47] <osse> Gurkenglas: that'll compress the output to just the "interesting" bits
[16:47:08] <osse> lpapp: Honestly I don't know, but I suspect it's shared
[16:47:20] <osse> since the .git dir is shared
[16:47:33] <Gurkenglas> ideally such that if the merge metacommit is applied it works with the new master and if it isn't it works with the old master
[16:48:18] <Gurkenglas> fatal: unrecognized argument: -cc
[16:48:40] * osse gives Gurkenglas an extra -
[16:48:47] <Gurkenglas> dangit :D
[16:49:21] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:49:48] <osse> the default merge message mentions the files that had conflicts, no?
[16:50:45] <Gurkenglas> https://github.com/Gurkenglas/tgstation/commit/4bd1ce9812acaaf943a1c2a3195ea8c779b04522 doesn't look like it
[16:51:31] <Gurkenglas> i told vscode to merge and then it said to fix the conflicts and commit the result, the message in the commit textbox was just "Merge branch 'master' into n-to-n-wirestest"
[16:52:01] <osse> Ahh, the conflicts are commented out
[16:52:30] <osse> http://sprunge.us/3dvtdo
[16:53:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[16:53:40] <Gurkenglas> will the maintainers be able to merge my PR with this giant merge commit while preserving my sequence-of-12-commits?
[16:54:15] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[16:54:18] *** Quits: fandre1986 (~fandre198@78.10.133.217) (Quit: Connection closed)
[16:55:26] <osse> if you mean 17, then yes
[16:55:39] <osse> or maybe I don't fully understand the question. a merge commit doesn't reorder anything
[16:56:07] <Gurkenglas> i suppose it's 17, i was just pulling some number out of nowhere :)
[16:56:22] <Gurkenglas> suppose master has commit history a,b,c
[16:56:36] *** Joins: adlternative (~adl@117.32.216.12)
[16:56:49] <Gurkenglas> then i make a branch with total history a,b,c,A,B,C and make a PR
[16:56:57] <Gurkenglas> while it's waiting, master becomes a,b,c,d,e,f
[16:57:24] <Gurkenglas> leading to conflicts, I make my branch a,b,c,A,B,C,def
[16:57:37] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[16:57:57] <Gurkenglas> can they merge it so tha afterwards, master is something like a,b,c,d,e,f,A,B,C?
[16:58:27] *** Quits: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com) (Ping timeout: 252 seconds)
[16:58:50] <osse> writing it out like this misses the parallel aspect of it
[16:59:13] <Gurkenglas> i suppose it's also fine if it ends up a,b,c,d,A,B,e,f,C
[16:59:14] <osse> you can easily make your branch a,b,c,d,e,f,A,B,C  by rebasing your branch onto master
[16:59:22] <Gurkenglas> what i would like to have is that each prefix of the history compiles.
[17:00:17] <Gurkenglas> ah. can i use the output of git show --cc to tell git rebase how to resolve the conflicts? :)
[17:01:16] <Gurkenglas> will "a,b,c,A,B,C" -> "a,b,c,d,e,f,A,B,C" be visible as some sort of metacommit from which the same git show --cc can be extracted?
[17:02:04] <osse> with rebase, no
[17:02:21] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[17:02:23] <osse> rebase hides the fact that stuff happened in parallel. when the dust settles the history will look like one straight line
[17:02:52] <Gurkenglas> i think i get now what you mean by parallel. is there a way to have non-linear histories?
[17:02:59] <osse> yes
[17:03:05] <osse> you already have one
[17:03:42] *** Quits: dviola (~diego@user/dviola) (Ping timeout: 268 seconds)
[17:04:04] <Gurkenglas> so that in the end, the things that should compile are a, ab, abc, abcd, abcde, abcdef, abcA, abcAB, abcABC, abc(def+ABC) (where + is commutative), where the conflict resultion in the last case is a first-class citizen comparable to a commit
[17:04:06] <osse> try this:  git log --decorate --oneline --graph n-to-n-wirestest
[17:04:46] <Gurkenglas> category theory probably has jargon for this
[17:05:08] *** Joins: ds0ap (~ds0ap@lns5-pool6-232.adsl.user.start.ca)
[17:05:08] <osse> Dunno about that, but graph theory does. Git history is a DAG
[17:05:32] <Gurkenglas> and merge commits are nodes with more than one parent. aight
[17:05:38] <osse> yep
[17:06:03] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Read error: Connection reset by peer)
[17:06:21] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[17:06:27] *** Joins: Guest64 (~Guest64@46.8.48.86)
[17:07:32] <Guest64> Hello. I found one bug can anyone help me?
[17:07:37] <Gurkenglas> uhh is there a variant of that which contracts paths without branching? there's rather a lot of nodes
[17:08:09] *** Joins: TomyWork (~TomyLobo@p200300e80f133c006404b90521ff8120.dip0.t-ipconnect.de)
[17:08:13] <osse> Gurkenglas: http://sprunge.us/j5KzA1
[17:08:20] <osse> "feature" here is your branch
[17:08:28] <osse> you have done the bottom version ("MERGE")
[17:08:41] *** Joins: dviola (~diego@187.39.20.53)
[17:09:01] <Gurkenglas> wait why is the behavior of merge asymmetric
[17:09:21] <Gurkenglas> shouldnt "git checkout master; git merge feature:" also make a diamond
[17:09:43] <osse> a design decision done in 2005, for some reason
[17:09:56] <osse> I see your point, but that would mean that merge affects both branches
[17:09:57] <Gurkenglas> also is there a way to include in this git log the information about which commits commute with one another?
[17:10:18] <osse> if you do a subseqent merge the other way you will get your diamond
[17:10:26] <osse> but in the merge commit the parents still have an order to them
[17:10:33] <Gurkenglas> how do you mean it would affect both branches?
[17:10:34] <osse> hence the assymetry
[17:11:56] <Gurkenglas> <osse> but in the merge commit the parents still have an order to them <- that much asymmetry does not imply that they can't both have diamonds
[17:12:07] <osse> Gurkenglas: you mean this, right? http://sprunge.us/M7Ws9X
[17:12:19] <Gurkenglas> yes
[17:12:35] <Gurkenglas> actually
[17:12:43] <Gurkenglas> well, that would be nice to have but what i meant was
[17:13:15] <Gurkenglas> "After git checkout master; git merge feature:" should look just like "MERGE: After git checkout feature; git merge master:
[17:13:15] <Gurkenglas> " except that the M is in the top row
[17:14:11] <osse> that is exactly what will happen
[17:14:28] <osse> this diagram shows what would happen if you did a rebase in the middle
[17:14:53] <osse> the bottom diagram shows merging master into feature, but you can of course merge feature into master, and M will be on the top row
[17:15:10] <Gurkenglas> <Gurkenglas> well, that would be nice to have <- scratch that
[17:15:49] <Gurkenglas> <osse> that is exactly what will happen <- but "After git checkout master; git merge feature:" on http://sprunge.us/j5KzA1 shows no diamond, just one path
[17:15:49] <osse> and that is what *will* happen if they accept your pull request
[17:16:02] <osse> Gurkenglas: because of the intervening rebase
[17:16:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[17:16:29] <Gurkenglas> ohh, makes sense. only the last diagram has no rebase in between?
[17:16:40] <osse> yes
[17:16:44] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[17:17:55] <osse> Gurkenglas: http://sprunge.us/p3cOhK
[17:18:09] <Gurkenglas> okay so it's all sane, only the https://github.com/Gurkenglas/tgstation/commit/4bd1ce9812acaaf943a1c2a3195ea8c779b04522?branch=4bd1ce9812acaaf943a1c2a3195ea8c779b04522 visualization was confusing me
[17:18:19] <osse> the first I did was to illustrate the difference between merging and rebasing as workflows.
[17:18:35] <Gurkenglas> is there a way to show the --cc info on there?
[17:18:48] <osse> I don't know
[17:19:03] *** Joins: lgc (~lgc@user/lgc)
[17:19:10] <osse> would be nice.
[17:21:02] <Gurkenglas> hmm maybe i could have a merge commit which resolves no conflicts at all and does not compile, and then an extra commit that resolves em
[17:21:23] <Gurkenglas> should be deducible from an existing merge commit, even
[17:22:06] <Gurkenglas> by the way is there tooling that does all the cool things you can do with a git history where every prefix is supposed to compile?
[17:23:12] <osse> are you describing a build server?
[17:23:19] <osse> what do you mean by prefix?
[17:23:42] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:24:07] <Gurkenglas> example prefixes of the history abc(def+ABC)M are ab,abcde,abcAB and abc(def+ABC)M
[17:25:17] *** Quits: malteger (~malteger@user/malteger) (Ping timeout: 252 seconds)
[17:25:23] <osse> ah, so basically you mean the history up to a certain point
[17:25:46] <osse> you can checkout any of the commits and compile it if you want
[17:26:04] <osse> git checkout f56ab34; make; echo looks good; git checkout master
[17:26:22] *** Quits: dviola (~diego@187.39.20.53) (Ping timeout: 272 seconds)
[17:26:33] <Gurkenglas> i mean cool things such as "run this test with every commit and show me where in the DAG the behavior changes"
[17:26:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[17:26:46] <osse> man git-bisect
[17:26:46] <gitinfo> the git-bisect manpage is available at https://gitirc.eu/git-bisect.html
[17:26:48] <osse> BOOM
[17:27:06] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[17:27:10] *** Joins: malteger (~malteger@user/malteger)
[17:27:32] <Gurkenglas> binary search in a dag?
[17:29:08] <osse> binary search in a dag.
[17:32:11] *** Joins: travisghansen (~travisgha@192.74.130.86)
[17:32:24] <Gurkenglas> hmm good start. is that known to capture all the cool things you can do with such a history? can you tell it how to tell whether a commit is good or bad or to-be-skipped so you don't need to actively participate, or would the interface for that be complicated enough that one is expected to just write a script that calls git good/bad/skip?
[17:32:35] <osse> This is the closest to what you're asking for that is bundled with Git itself. But it's fairly easy to loop over a range of commits and do stuff to each one. There are probably several such tools available, but I don't know of any off the top of my head
[17:33:27] <osse> you can automate it by providing it a command to run whose exit code determines what to do next
[17:34:34] <osse> to be "known to capture all the cool things" sounds like an impossible goal
[17:35:42] <Gurkenglas> spoken like an applied computer scientist
[17:35:53] <Gurkenglas> theoretical computer science is all about knowing what's impossible :3
[17:36:22] <osse> Git cannot now whether a commit is inherently good or bad. You can though, but to automate it you must formulate it as a command
[17:37:11] <mackerman> And use your  good or bad  test script  with something liike   git bisect
[17:37:36] <osse> For example, if you're looking for the commit that introduced swear words in the README (and you know version1 didn't have it) you can do: git bisect start HEAD v1.0; git bisect run 'grep -q "fuck\|shit" README'
[17:37:49] <Gurkenglas> oh, i thought https://gitirc.eu/git-bisect.html would document all the features, git bisect run does sound like what i was talking about
[17:38:11] <osse> it does document it
[17:38:23] <Gurkenglas> silly me
[17:38:56] <Gurkenglas> are natural language interfaces far enough along that we can feed one with a manual and it'll answer my questions as long as they're stupid enough to be answered with RTFM?
[17:39:31] <Gurkenglas> GPT sounds like it should be able to do that except the context window is small, maybe one could fine-tune it on a particular manual
[17:39:40] <osse> jast: how is this documentation generated? The official one has anchors and stuff:  https://git-scm.com/docs/git-bisect#_bisect_run
[17:40:15] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 265 seconds)
[17:40:16] *** Joins: dviola (~diego@187.39.20.53)
[17:41:30] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[17:42:12] *** Joins: nyah (~nyah@90.221.186.180)
[17:42:18] *** Quits: Xenguy (~Xenguy@devuan/developer/Xenguy) (Quit: Leaving)
[17:42:34] <Gurkenglas> is there a git command that takes a command such as compilation which exits with 0 or 1 and squashes away all the commits that don't compile?
[17:43:20] <Gurkenglas> (ideally such that one can switch back and forth, and update this with new commits, without redoing everything)
[17:44:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[17:44:14] <osse> hmm, I guess git-rebase -i (-x) and git-filter-branch can be used for such a purpose
[17:44:26] <osse> but there exists no "git squash-bad-commits" command
[17:44:28] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[17:45:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:44f7:81a6:341:7abe)
[17:48:46] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[17:49:52] *** Quits: Null_A (~null_a@2601:645:8700:2290:44f7:81a6:341:7abe) (Ping timeout: 256 seconds)
[17:53:52] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[17:53:57] <bremner> squash sounds like the wrong concept here
[17:54:02] <bremner> delete?
[17:54:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[17:54:22] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[17:55:41] *** Quits: Rhonda (~rhonda@wesnoth/developer/rhonda) (Quit: Going down the drain....)
[17:56:03] *** Joins: Rhonda (~rhonda@wesnoth/developer/rhonda)
[17:56:52] *** Quits: dviola (~diego@187.39.20.53) (Changing host)
[17:56:52] *** Joins: dviola (~diego@user/dviola)
[17:59:15] <osse> bremner: my thought was that they are "partial commits", so squashing them up to the next one that does compile would make sense
[18:00:18] <bremner> ok.
[18:00:34] *** Quits: pflanze (~pflanze@2001:1a88:19e:4500:a:13dd:7c09:9436) (Ping timeout: 240 seconds)
[18:00:52] <osse> but there exists no "git delete-bad-commits" command either :p
[18:02:11] <ikke> there is no delete-commit command in general
[18:03:22] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[18:03:36] <osse> hmm
[18:03:39] <osse> git: 'kitchen-sink' is not a git command. See 'git --help'.
[18:04:25] <furrymcgee> GIT_EDITOR="sed -e '/^pick/aexec make check || { git reset --soft HEAD^ && git commit --amend ; } ' -i" git rebase -i HEAD~2
[18:05:17] <osse> furrymcgee: FYI look into git rebase -x
[18:07:40] <furrymcgee> yes I will add it to my todo list
[18:14:43] <osse> furrymcgee: TL;DR: git rebase -x 'foo bar' inserts 'exec foo bar' for each line :-)
[18:15:16] <osse> but using GIT_EDITOR looks cooler
[18:16:06] <furrymcgee> the command keeps the failing commit ...
[18:16:45] *** Joins: Camusensei (~Camusense@megaman.thican.net)
[18:16:49] <Camusensei> Hello.
[18:17:44] <Camusensei> On git 2.1.4, it seems that http.sslCAPath and GIT_SSL_CAPATH are ignored, could that be possible or may I be missing something?
[18:19:11] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 252 seconds)
[18:21:06] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[18:22:29] *** Joins: arcatech (~arcatech@user/arcatech)
[18:24:08] *** Quits: beshr (~beshr@user/beshr) (Remote host closed the connection)
[18:26:07] *** Joins: larry__ (~larry@host86-131-214-48.range86-131.btcentralplus.com)
[18:29:04] *** Quits: larrys (~larry@host86-185-165-98.range86-185.btcentralplus.com) (Ping timeout: 272 seconds)
[18:29:13] <furrymcgee> may be better with git commit --fixup HEAD not amend
[18:29:57] <furrymcgee> how to autosquash with the next commit not the previous?
[18:30:52] *** Joins: beshr (~beshr@user/beshr)
[18:31:24] *** Joins: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net)
[18:31:26] <osse> there is no direct way. either reorder (which of course may lead to conflicts) or mark the next commit squash
[18:32:51] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[18:33:09] *** Joins: thiago (~thiago@2601:1c0:4501:635c:f184:9b5:13de:3e70)
[18:34:19] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[18:34:47] *** Quits: PaMeDa (~apauli@dynamic-077-006-158-054.77.6.pool.telefonica.de) (Ping timeout: 258 seconds)
[18:39:46] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:40:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[18:40:22] *** Joins: r1ch (~r1ch@user/r1ch)
[18:40:24] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[18:41:50] *** jmft2_ is now known as jmft2
[18:41:57] *** Quits: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net) (Quit: Client closed)
[18:44:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[18:45:24] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[18:45:33] *** Joins: zebrag (~chris@user/zebrag)
[18:45:55] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[18:48:44] *** Quits: oxymoron93 (~oxymoron9@212.62.38.106) (Quit: Client closed)
[18:50:28] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[18:50:56] *** Joins: sgn (~sgn@user/sgn)
[18:50:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[18:51:17] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[18:52:38] *** Joins: fnurkla (~fnurkla@h-98-128-211-79.A357.priv.bahnhof.se)
[18:53:52] *** Joins: christall (~christall@24.235.88.243)
[18:55:36] *** Quits: adlternative (~adl@117.32.216.12) (Ping timeout: 256 seconds)
[19:00:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[19:01:53] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[19:04:29] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a01b:4fd:a402:83e9)
[19:04:29] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a01b:4fd:a402:83e9) (Changing host)
[19:04:29] *** Joins: skapata (~Skapata@user/skapata)
[19:08:23] *** Quits: Strom (strom@fedora/strom) ()
[19:09:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[19:09:55] *** Joins: Strom (strom@fedora/strom)
[19:10:18] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[19:10:28] *** Joins: darkbit (~db@152.32.99.67)
[19:13:22] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:16:18] *** Quits: theoceaniscool (~theoceani@119.12.233.178) (Ping timeout: 240 seconds)
[19:17:58] *** Quits: tonitch (~tonitch@user/tonitch) (Quit: ZNC 1.8.2 - https://znc.in)
[19:19:39] *** Joins: pulse (~pulse@user/pulse)
[19:19:58] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[19:21:22] *** Quits: jazzy (~jaziz@2600:380:8577:4a6c:39b4:468b:5d5a:f419) (Ping timeout: 240 seconds)
[19:21:33] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 258 seconds)
[19:21:37] *** Joins: tonitch (~tonitch@user/tonitch)
[19:23:30] *** Joins: ferdna (~ferdna@user/ferdna)
[19:23:43] *** Joins: DoofusCanadensis (~DoofusCan@208.38.34.74)
[19:24:06] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[19:24:29] *** Joins: Crassus (~Crassus@user/crassus)
[19:28:35] *** Quits: Crassus (~Crassus@user/crassus) (Client Quit)
[19:28:36] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 272 seconds)
[19:31:08] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[19:32:10] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a01b:4fd:a402:83e9)
[19:32:10] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a01b:4fd:a402:83e9) (Changing host)
[19:32:10] *** Joins: skapata (~Skapata@user/skapata)
[19:32:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[19:32:51] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[19:33:34] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 256 seconds)
[19:35:14] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[19:43:28] *** Quits: filePeter (~filePeter@user/filepeter) (Quit: leaving)
[19:46:06] *** Quits: madewokherd (~urk@65-128-171-161.mpls.qwest.net) (Quit: If your computer stops responding for a long time, turn it off and then back on.)
[19:50:12] *** Quits: atharvaraykar (~Thunderbi@user/atharvaraykar) (Ping timeout: 268 seconds)
[19:53:29] *** Quits: roadie (~user@2a02:8108:ec0:1427:6536:69ec:4611:4fd2) (Quit: ERC (IRC client for Emacs 25.3.50.1))
[19:54:08] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (Ping timeout: 265 seconds)
[19:54:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[19:55:07] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[19:56:04] *** Joins: pncl (~pncl___@128.127.222.154)
[20:00:37] *** Joins: durham_ (~durham@2620:10d:c092:400::5:f20c)
[20:01:24] *** Quits: durham (~durham@2620:10d:c091:480::1:972c) (Read error: Connection reset by peer)
[20:01:45] *** Joins: durham (~durham@2601:cb:8200:840:1c0e:1ef2:1798:7be)
[20:01:51] *** Quits: durham (~durham@2601:cb:8200:840:1c0e:1ef2:1798:7be) (Remote host closed the connection)
[20:02:23] *** Joins: durham (~durham@2620:10d:c090:400::5:1ac5)
[20:02:43] *** Quits: durham (~durham@2620:10d:c090:400::5:1ac5) (Read error: Connection reset by peer)
[20:02:55] *** Joins: durham (~durham@2620:10d:c091:480::1:eba2)
[20:03:09] *** Joins: Crassus (~Crassus@user/crassus)
[20:05:20] *** Quits: durham_ (~durham@2620:10d:c092:400::5:f20c) (Ping timeout: 252 seconds)
[20:05:43] *** Joins: durham_ (~durham@163.114.132.1)
[20:06:08] *** Quits: durham (~durham@2620:10d:c091:480::1:eba2) (Read error: Connection reset by peer)
[20:06:30] *** Joins: durham (~durham@163.114.131.129)
[20:07:13] *** Joins: durham__ (~durham@2620:10d:c091:480::1:6819)
[20:09:25] *** Joins: durham___ (~durham@2620:10d:c090:400::5:2e9f)
[20:10:16] *** Joins: durha____ (~durham@2620:10d:c092:400::5:a16e)
[20:10:17] *** Quits: durham_ (~durham@163.114.132.1) (Ping timeout: 252 seconds)
[20:10:23] *** Quits: durham___ (~durham@2620:10d:c090:400::5:2e9f) (Read error: Connection reset by peer)
[20:10:34] *** Quits: durham (~durham@163.114.131.129) (Ping timeout: 240 seconds)
[20:10:56] *** Joins: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net)
[20:11:40] *** Quits: pncl (~pncl___@128.127.222.154) (Remote host closed the connection)
[20:12:31] *** Quits: durham__ (~durham@2620:10d:c091:480::1:6819) (Read error: Connection reset by peer)
[20:14:02] *** Joins: masber (~masber@178.197.197.167)
[20:15:24] *** Quits: milosz_ (~milosz@user/milosz) (Ping timeout: 265 seconds)
[20:15:59] *** Joins: madewokherd (~urk@comcast.codeweavers.com)
[20:19:44] *** Joins: durham (~durham@2620:10d:c091:480::1:3c33)
[20:19:44] *** Quits: durha____ (~durham@2620:10d:c092:400::5:a16e) (Read error: Connection reset by peer)
[20:20:13] *** Quits: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr) (Remote host closed the connection)
[20:22:57] *** Quits: dviola (~diego@user/dviola) (Quit: WeeChat 3.2)
[20:23:13] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[20:27:14] *** Joins: Guest88 (~Guest88@69.160.255.216)
[20:28:26] *** Joins: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com)
[20:31:34] *** Joins: Guest16 (~textual@83.97.23.44)
[20:31:40] *** Guest16 is now known as Thomas25
[20:31:49] <Thomas25> hello, can i copy an asset from another branch?
[20:32:12] <DoofusCanadensis> sure
[20:32:27] <canton7> Thomas25, git checkout branch -- path/to/file
[20:32:29] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[20:33:10] <canton7> Looks like the equivalent using 'git restore' is 'git restore --source=branch path/to/file'
[20:33:45] <DoofusCanadensis> first matches the description for !copy
[20:33:45] <gitinfo> Git does not support copying (or moving) *files* between branches *with history*. It only merges entire branches. You can, however, copy over the *contents* of a file from another branch/commit using: git checkout <commit> -- <file>
[20:34:20] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[20:34:40] <Thomas25> hmm and how can i ls that branch's that folder?
[20:34:46] *** Quits: Guest88 (~Guest88@69.160.255.216) (Ping timeout: 246 seconds)
[20:35:01] <Thomas25> in this case, i don't need the history of the file
[20:35:05] <Thomas25> it's just an asset
[20:35:07] <canton7> git ls-tree branch path/to/dir
[20:35:30] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:35:31] *** Joins: reset (~reset@user/reset)
[20:36:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[20:37:09] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[20:37:25] <Thomas25> perfect, thanks.
[20:38:04] <Thomas25> some branches have origin/ in front of them, some don't. how come?
[20:38:29] <canton7> !remote_tracking_branch
[20:38:29] <gitinfo> Remote-tracking branches (branches which start with e.g. 'origin/', listed by 'git branch -r') are read-only mirrors of the branches in another repository. They're updated by 'git fetch'. You can't edit them directly (trying to check them out results in a !detached HEAD), but you can create a local branch based on a remote-tracking branch using e.g. 'git checkout -b <branch> <remote>/<branch>'
[20:38:38] *** Quits: DoofusCanadensis (~DoofusCan@208.38.34.74) (Quit: So as you can see from this flowchSQUIRREL!!)
[20:38:51] *** Joins: atharvaraykar (~Thunderbi@user/atharvaraykar)
[20:41:08] *** Quits: TomyWork (~TomyLobo@p200300e80f133c006404b90521ff8120.dip0.t-ipconnect.de) (Quit: Leaving)
[20:41:12] *** Joins: pncl (~pncl___@128.127.222.154)
[20:54:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[20:54:59] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[20:55:13] *** Quits: masber (~masber@178.197.197.167) (Quit: Client closed)
[20:55:40] *** Joins: Betal (~Beta@user/betal)
[20:56:49] <foo> Ok, on a new system I did git init --bare . ... then I tried to set it as origin and push to it. When I do this, I get Timeout, server not responding. fatal: Could not read from remote repository.
[21:00:57] *** Quits: Anticom (~Anticom@87.190.49.75) (Quit: Leaving)
[21:02:23] *** Quits: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com) (Ping timeout: 250 seconds)
[21:02:25] <j416> foo: ssh?
[21:02:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[21:02:58] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[21:04:32] <foo> j416: I can ssh just fine.
[21:05:21] <ikke> deja-vu
[21:05:37] <foo> someone is suggesting an MTU issue.
[21:05:38] <ikke> oh, same user
[21:05:40] <foo> can that affect the git repo?
[21:05:45] <ikke> Yes
[21:05:51] <ikke> that affacts any traffic
[21:05:58] <ikke> affects*
[21:06:03] *** Joins: rsx (~dummy@ppp-188-174-145-96.dynamic.mnet-online.de)
[21:06:44] <ikke> an you try ping -Mdont -s 1500 <server>
[21:06:47] <ikke> can*
[21:07:50] <foo> ikke: thanks, ping: invalid message: `d' - currently on os x
[21:09:35] <ikke> can you check if your version of ping has an option to disable fragmentation?
[21:09:40] <ikke> or pmtu discovery?
[21:10:16] *** Quits: rektide (~rektide@eldergods.com) (Remote host closed the connection)
[21:10:40] <foo> ikke: nothing in the man page for PMTU
[21:10:42] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 240 seconds)
[21:10:42] <foo> or pmtu
[21:11:00] <foo> -D      Set the Don't Fragment bit.
[21:11:02] <foo> oh capital D
[21:11:24] <ikke> ah
[21:11:46] <ikke> so ping -D -s 1500 <server>
[21:15:20] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[21:17:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[21:17:51] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[21:20:04] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[21:25:02] <foo> ikke: thank you. ping: sendto: Message too long
[21:25:37] <ikke> Hmm, it probably doesnt count the header in the size
[21:26:38] <ikke> try 1480
[21:26:54] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 256 seconds)
[21:27:52] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[21:28:48] <foo> ikke: ikke same
[21:29:43] <foo> ikke: although, I just switched to my hotspot and I think this is working
[21:30:31] <foo> ikke: ok, got it. So, this is an issue with the network here... somehow.
[21:30:40] <foo> ikke: well, not somehow, it sounds like it is an MTU issue
[21:31:54] <foo> ok, update: I switched to my verizon hotspot, it works fine. I'm in an area with non-traditional internet, there is repeaters on homes and things are being bounced. So I wonder if the ISP here is doing something that is causing issues. Although I still find this odd because with 2 systems both MTU 1500... I can scp/git push to one but not the other.
[21:32:29] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[21:32:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[21:32:53] <svm_invictvs> SO I have two remotes origin master and github main
[21:33:02] <svm_invictvs> I want to push what's in my local master to github main
[21:33:14] <svm_invictvs> That ought to be git push -f github main right?
[21:33:23] <svm_invictvs> But I get this ...
[21:33:25] <svm_invictvs> error: src refspec main does not match any
[21:33:25] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[21:33:47] <cbreak> svm_invictvs: it'd be git push github master:main
[21:34:14] <cbreak> svm_invictvs: the syntax is git push <remote> <srcref>:<dstref>
[21:34:21] <j416> man git-push
[21:34:21] <gitinfo> the git-push manpage is available at https://gitirc.eu/git-push.html
[21:34:22] <svm_invictvs> aaaaaah okay
[21:34:38] <svm_invictvs> cbreak, Yeah I read the man page a few times. Somethign wasn't clicking for me. I don't know how I missed that.
[21:34:39] <j416> main would work as a shorthand refspec if the branch names matched
[21:36:04] *** Joins: roadie (~user@2a02:8108:ec0:1427:bc83:2697:52bf:1ef4)
[21:37:19] <anddam> what is the syntax of a gitfile?
[21:37:33] <bremner> what is a gitfile?
[21:37:47] <anddam> """A plain file .git at the root of a working tree that points at the directory that is the real repository."""
[21:37:52] <svm_invictvs> oh
[21:37:56] <svm_invictvs> FOr submodules?
[21:37:58] <ikke> just a path
[21:38:13] <anddam> ikke: jeez, I somehow thought it had a key:value format and was going mad
[21:38:30] *** Joins: Narrat (~omnius@p200300df5f15d87906ea56fffe2e7cdc.dip0.t-ipconnect.de)
[21:39:03] <anddam> ikke: no that's """fatal: invalid gitfile format:"""
[21:39:28] <j416> keyvalue.
[21:39:44] <anddam> ikke: I looked at one on my home computer yesteday,  *think* it was "path: therealpath"
[21:39:44] <j416> assuming workdir?
[21:40:18] <j416> gitdir: /path/to/worktree/file
[21:40:45] <j416> (/foo/bar/.git/worktrees/foo-tree)
[21:40:57] <anddam> ding ding ding!! we have a winner
[21:41:02] <anddam> j416: thanks
[21:41:29] <j416> you can also set it up using, y'know, man git-worktree :P
[21:41:29] <gitinfo> the git-worktree manpage is available at https://gitirc.eu/git-worktree.html
[21:41:45] *** Joins: orbyt (~textual@172.92.4.78)
[21:42:37] <j416> is there a case where .git is a regular file and it's _not_ a git-worktree thing?
[21:43:04] <anddam> j416: I don't even know what git-worktree is
[21:43:50] *** Quits: rsx (~dummy@ppp-188-174-145-96.dynamic.mnet-online.de) (Quit: rsx)
[21:44:13] <anddam> "Manage multiple working trees attached to the same repository." wow, that sounds like a level of madness I am not read to descend into
[21:44:21] <anddam> x/read/ a/y/
[21:45:34] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[21:48:06] <j416> anddam: what is it that you have?
[21:48:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[21:48:17] <j416> anddam: why do you have a .git regular file?
[21:48:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:44f7:81a6:341:7abe)
[21:48:23] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[21:48:26] *** Joins: Guest9 (~Guest9@103.240.170.208)
[21:49:25] *** Joins: ThorMojito (~Adium@166.62.248.233)
[21:50:06] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[21:50:22] *** Quits: ferdna (~ferdna@user/ferdna) (Remote host closed the connection)
[21:53:17] <foo> Ok, let's recap - for anyone with WISP understanding/networking understanding: I deployed a new ubuntu server, I could ssh to it, but I could not scp files to it or git push a repo to it. It is an issue with my local network which is on a WISP. When I was doing scp or git push, they were seeing a spike in my network which they described as a "broadcast storm" which forced them to shut down the network... they
[21:53:23] <foo> cannot explain what happened, and I don't know enough to understand this. Can anyone explain what might have happened here? (They're a small WISP, I'm remote)
[21:53:26] <foo> ikke: ^
[21:54:22] <ikke> A broadcast storm sounds like a loop
[21:54:35] <ikke> but that's not something caused by just using the netowr
[21:54:37] <ikke> network
[21:54:47] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[21:55:15] *** Quits: gnoo (~gnoo@user/gnoo) (Quit: gnoo)
[21:55:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[21:56:18] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[21:58:31] <Gurkenglas> When a server tells me it's on revision ^37b10f61ef4654c097185a7d2599528ed84a1d23 of a repository, how do I find out what commits are in use?
[21:59:12] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[21:59:14] <ikke> What do you mean, are in use?
[21:59:18] <rewt> that probably is the commit
[21:59:37] <Gurkenglas> searching the github repository for that string doesnt find anything, though
[22:01:12] <Gurkenglas> https://github.com/tgstation/tgstation/commit/8e19204697dc7926e762fb8b332230fa23ac4d68 is a file of changes, but https://github.com/tgstation/tgstation/commit/37b10f61ef4654c097185a7d2599528ed84a1d23 and https://github.com/tgstation/tgstation/commit/%5E37b10f61ef4654c097185a7d2599528ed84a1d23 both 404
[22:01:33] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[22:03:15] <foo> ikke: yeah, it sounds like some sort of loop. so odd.
[22:07:00] *** Quits: saroy (~sanroy@45.249.73.224) (Quit: Leaving)
[22:10:34] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:11:22] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 258 seconds)
[22:11:54] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[22:11:54] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[22:12:13] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[22:12:18] *** Joins: junktext_ (~junktext@109.201.152.167)
[22:12:58] <Gurkenglas> why isn't there a theirs merge strategy? I want to produce a commit that sets the state of the working tree to their state of the working tree.
[22:15:52] <j416> Gurkenglas: I've seen a thread about this somehwere, possibly mailing list. might find info there.
[22:16:47] *** Quits: rhe (~rhe@labyrinth.rhe.jp) (Ping timeout: 245 seconds)
[22:17:21] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[22:18:24] *** Quits: junktext_ (~junktext@109.201.152.167) (Quit: Goodbye. If you love F/LOSS, find me on Twitter: @junktext)
[22:18:39] <Gurkenglas> ah, "git merge -X theirs"
[22:19:17] <Gurkenglas> which is not generally what i asked for but does the same in this case.
[22:19:34] <j416> that's not a strategy, but a strategy option
[22:20:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[22:21:00] <Gurkenglas> j416, you mean this? https://marc.info/?l=git&m=121637513604413&w=2
[22:21:05] <j416> and so it only applies to conflicts
[22:21:08] <Gurkenglas> yeah what he argues against is what i want
[22:21:16] <j416> Gurkenglas: I don't remember. could be.
[22:21:42] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[22:23:30] *** Quits: corelax (~corelax@pl37038.ag2525.nttpc.ne.jp) (Quit: ZNC - https://znc.in)
[22:24:21] *** Joins: corelax (~corelax@user/corelax)
[22:34:33] *** Joins: rhe (~rhe@labyrinth.rhe.jp)
[22:35:05] *** Quits: ykrons (~guillaume@62.192.23.101) (Ping timeout: 265 seconds)
[22:35:44] *** Joins: ykrons (~guillaume@62.192.23.101)
[22:38:52] *** Quits: jmft2 (~JMFT@82.3.54.26) (Ping timeout: 256 seconds)
[22:41:26] *** Quits: Null_A (~null_a@2601:645:8700:2290:44f7:81a6:341:7abe) (Remote host closed the connection)
[22:42:12] <Gustavo6046> git clone stalled for a few dozen seconds because of an internet connectivity issue. I restarted iwd, the connection is good again, but it's still not going
[22:42:18] <Gustavo6046> Oh
[22:42:22] <Gustavo6046> It went .... and died.
[22:42:27] <Gustavo6046> :(
[22:43:05] <thiago> timeouts are git
[22:43:05] <thiago> stalling and resuming are regular TCP
[22:44:18] *** Joins: goldfish (~goldfish@user/goldfish)
[22:51:27] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[22:51:53] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[22:54:01] *** Joins: Samian (~Sami@2620:10d:c091:480::1:63c7)
[22:57:46] *** Quits: durham (~durham@2620:10d:c091:480::1:3c33) (Ping timeout: 240 seconds)
[22:58:27] *** Joins: durham (~durham@2620:10d:c091:480::1:3c33)
[23:00:50] *** Joins: PaMeDa (~apauli@dynamic-077-006-158-054.77.6.pool.telefonica.de)
[23:01:29] *** Joins: cek (uid23454@id-23454.tinside.irccloud.com)
[23:02:40] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[23:04:57] <Guest64> Can anyone help me guys?
[23:05:47] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[23:06:09] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:07:20] <ikke> If you ask an actual question
[23:07:30] <Guest64> C:\Projects\test>git ls-tree cd4efa48be9c2f2602f305484005c73be93622e4
[23:07:31] <Guest64> 100644 blob e40fd988170f1bace96b582db3fd80013db70614    README.md
[23:07:31] <Guest64> 100644 blob c63225d6c0bb40de9eb9309790997bd1de55a207    build.gradle
[23:07:32] <Guest64> 040000 tree f61a1cc06fce76eb5d1fc3f059807f3a978de58c    gradle
[23:07:32] <Guest64> 100644 blob 4453ccea33d960069d9137ee65f6b21fc65e7e92    gradlew
[23:07:33] <Guest64> 100644 blob e95643d6a2ca62258464e83c72f5156dc941c609    gradlew.bat
[23:07:33] <Guest64> 100644 blob 2714e7495fa236940b889121af75b4479667cac2    settings.gradle
[23:07:34] <Guest64> 040000 tree 4038c9573e806a46c18f071f918672aa22e3c98b    src
[23:07:34] <Guest64> C:\Projects\test>git hash-object gradlew.bat
[23:07:35] <Guest64> f9553162f122c71b34635112e717c3e733b5b212
[23:07:35] <Guest64> C:\Projects\test>git cat-file  -p e95643d6a2ca62258464e83c72f5156dc941c609 >12345
[23:07:36] <Guest64> C:\Projects\test>git hash-object 12345
[23:07:36] <Guest64> f9553162f122c71b34635112e717c3e733b5b212
[23:07:46] <ikke> Please use a paste service next time
[23:08:17] <Guest64> Why hash of file e95643d6a2ca62258464e83c72f5156dc941c609 if it's f9553162f122c71b34635112e717c3e733b5b212
[23:08:32] <Guest64> Sorry
[23:09:21] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[23:11:57] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[23:11:57] *** Gustavo6046_ is now known as Gustavo6046
[23:13:31] <j416> !next
[23:13:32] <gitinfo> Another satisfied customer. NEXT!
[23:13:46] <ikke> ?
[23:13:57] <j416> he left.
[23:13:59] <ikke> oh
[23:14:03] <j416> :D
[23:14:12] <j416> ooh, he's back!
[23:14:14] <j416> sorry. XD
[23:14:17] <ikke> never left
[23:14:22] <j416> did too
[23:14:27] <ikke> did not
[23:14:53] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 255 seconds)
[23:15:12] <geirha> the one who left had the first two letters in common at least
[23:15:41] <j416> and then renamed to the first
[23:15:59] <j416> anyway,
[23:16:18] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[23:16:55] <ikke> gustavo6046 != Guest64
[23:16:59] <j416> ikke: yep
[23:17:23] <ikke> Guest64: any case, there is probably a reason, but not directly clear to me from what you pasted
[23:17:29] <ikke> I suspect some kind of normalization
[23:17:37] <j416> Guest64 != Gustavo6046
[23:17:38] <j416> :P
[23:17:41] <j416> (also https://x0.at/-tmw.txt)
[23:17:54] <Gustavo6046> I'm not invited? :P
[23:18:01] <Gustavo6046> Anyway, thanks
[23:18:04] *** Quits: qsx (qsx@shell.chaotikum.eu) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:18:10] <j416> I'm so confused now. :D
[23:18:29] <ikke> j416: We're talking about 2 different conversations
[23:18:30] <Gustavo6046> Well, so, the TCP conenction was closed
[23:18:34] <Gustavo6046> Could it be retried?
[23:18:40] *** Joins: qsx (qsx@shell.chaotikum.eu)
[23:18:44] <j416> ikke: we are?
[23:18:46] <Gustavo6046> If not, could there be a ccache kind of thing for downloaded Git objects?
[23:18:55] <j416> oh. we are. duh.
[23:18:56] *** Quits: darkbit (~db@152.32.99.67) (Ping timeout: 252 seconds)
[23:18:58] <j416> kek
[23:19:02] <Guest64> I know that the reason is line breaks, but I don’t understand why it calculates the hash differently in two different cases.
[23:19:15] <j416> my apologies. I need coffee and new brain.
[23:19:26] * Gustavo6046 is not a power of 2
[23:19:31] *** Joins: jinsun (~quassel@user/jinsun)
[23:19:34] <j416> Guest64: I'm as confused; I don't get why the hash differs.
[23:20:09] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[23:20:18] <Guest64> Me too
[23:20:19] <ikke> probably because cat-file does line-ending normalization
[23:20:38] <ikke> ie, applies the smudge filter
[23:20:48] <j416> ah. or, could be that the checked-out version has some smudge-filter applied or auto newline filter.
[23:20:52] <j416> yeah
[23:21:22] <ikke> Guest64: can you try cat-file --raw?
[23:21:29] <Guest64> If I now add the same file and commit, then its hash will be normal
[23:21:32] <j416> I thought cat-file didn't do that. til.
[23:21:48] <ikke> sorry, --raw does not exist
[23:21:59] <j416> > If <type> is specified, the raw (though uncompressed) contents of the <object> will be returned.
[23:22:00] <j416> maybe.
[23:22:10] <ikke> yeah
[23:22:14] <j416> git cat-file -p blob <hash>
[23:22:18] <ikke> not -p
[23:22:23] <j416> ah.
[23:22:26] <j416> yes not -p.
[23:22:27] <ikke> git cat-file blob <hash>
[23:23:25] *** Quits: austin987 (~null@100.42.98.196) (Ping timeout: 265 seconds)
[23:23:41] <Guest64>  cat-file blob e95643d6a2ca62258464e83c72f5156dc941c609 > 123456
[23:23:42] *** Quits: randomuser (~randomuse@user/randomuser) (Quit: Leaving)
[23:23:59] <Guest64> C:\Projects\test>git hash-object 123456
[23:24:00] <Guest64> f9553162f122c71b34635112e717c3e733b5b212
[23:24:15] <ikke> There is an explicit '--filters' paramter
[23:24:18] <ikke> parameter
[23:24:25] <ikke> which implies it should not do it by default
[23:24:55] <j416> you could print both those objects and diff them perhaps
[23:25:03] <j416> hash-object with -w to write it
[23:25:17] <j416> should be the same but then why differing hash
[23:25:28] *** Quits: furrymcgee (~devuan@31.179.186.66) (Quit: leaving)
[23:26:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[23:26:26] <Guest64> The files are the same
[23:26:51] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:28:40] <j416> I read the whole man page now except the part on batching, and can't find anything more than what was already written above.
[23:28:54] <j416> as I understand it, specifying type should print the raw object as-is.
[23:29:00] <Guest64> Maybe the file was saved a long time ago in the old version in which the hash is considered differently?
[23:29:10] <j416> the hash shouldn't change.
[23:30:57] <j416> I ran the same commands as you; works as expected with the same object hash both when I specify type (git cat-object blob <hash>) and when I run it with -p (git cat-object -p <hash>).
[23:31:10] <j416> although, I have no filters set-up. pretty bare-bones repo.
[23:31:23] <j416> set up*.
[23:31:25] *** Joins: vicfred (~vicfred@user/vicfred)
[23:31:45] <Guest64> https://github.com/Petersoj/alpaca-java.git
[23:31:46] <j416> I'm out of ideas. Disk issue?
[23:31:58] <Guest64> You can clone
[23:32:24] <j416> Guest64: I can reproduce this.
[23:32:25] <j416> weird.
[23:32:47] <j416> https://x0.at/O4q3.txt
[23:32:58] <Guest64> cd4efa48be9c2f2602f305484005c73be93622e4 this commit
[23:32:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[23:33:11] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:33:51] <j416> ah, unix vs dos
[23:34:17] <Gustavo6046> Yeah DOS, step up your game
[23:34:41] <j416> Gustavo6046: remove the line that says "* text=auto" in .gitattributes.
[23:34:52] <Gustavo6046> Nono
[23:34:55] <ikke> Guest64* :P
[23:34:55] <j416> otherwise it'll normalise it.
[23:34:56] <Gustavo6046> that's Guest64, not me
[23:35:01] <Guest64> One second, I'll check in unix
[23:35:03] <j416> aagh
[23:35:06] <j416> also change your nicks :P
[23:35:14] <Gustavo6046> I was talking about connectivity earlier, and the question I posited after that (after I reconnected) hasn't been answered yet.
[23:35:20] <j416> Gustavo6046: apologies.
[23:35:24] <Gustavo6046> Guest46: consider /nick
[23:35:28] <Gustavo6046> j416: it's fine :)
[23:35:43] <j416> to be fair, if you hadn't jumped in I wouldn't have tab-completed to the wrogn nick :P
[23:35:59] <Gustavo6046> j416: no, that's the good ending
[23:36:07] <Gustavo6046> Activity completion vs alphabetic completion
[23:36:15] <j416> Guest64: your OS doesn't matter, the .gitattributes does.
[23:36:42] <j416> Guest64: the line I mentioned above is what is causing this behaviour.
[23:36:44] <Guest64> I check
[23:36:55] <j416> it maybe what you want, though.
[23:37:04] <j416> supposedly it's there for a reason.
[23:37:13] *** Joins: pulse (~pulse@user/pulse)
[23:37:14] <Gustavo6046> Guest64: Git is meant to make the development collaboration seamlessly accessible for everyone; it is cleverer than to differ in such a fundamental way between different OSes
[23:37:46] <j416> now he's talking to himself
[23:37:46] *** Joins: austin987 (~null@cpe-173-174-99-192.austin.res.rr.com)
[23:38:01] <Guest64> I'm checking
[23:38:16] <Gustavo6046> j416: hahaha!
[23:38:21] <j416> weechat colouring the nicks the same colour doesn't help either >.>
[23:38:27] <Gustavo6046> well
[23:38:33] <Gustavo6046> you both have green nicks in MY weechat!
[23:38:42] <j416> everyone is green here
[23:38:43] <Gustavo6046> ikke is also dark .. green
[23:38:46] <j416> yes
[23:38:49] <Gustavo6046> oh my
[23:38:52] <Gustavo6046> lots of green
[23:38:57] <Gustavo6046> but geirha is blue
[23:39:06] <ikke> For me it's purple, green and teal
[23:39:07] <Gustavo6046> they probably go dabadee dabadaa every morning
[23:39:11] <Gustavo6046> :P
[23:39:41] <j416> yes. everything is blue for him.
[23:39:58] <Gustavo6046> :p
[23:39:59] <Gustavo6046> yes
[23:40:02] <j416> ikke: lucky you
[23:40:21] <geirha> I'm blue ♪♫ da ba di da ba da
[23:40:29] <j416> your orange, fwiw.
[23:40:40] <j416> anyway while Guest64 (not Gustavo6046) I'll be off. :P  o/
[23:40:53] <j416> +is checking
[23:41:06] <Gustavo6046> Aight! \o
[23:41:08] * Gustavo6046 waves at j416
[23:44:05] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[23:44:58] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 240 seconds)
[23:44:58] <Guest64> To no avail
[23:45:12] <ikke> git config core.autocrlf
[23:45:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[23:45:43] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:46:01] <Guest64> true
[23:46:07] <ikke> set it to false
[23:46:22] <ikke> git config --global core.autocrlf false
[23:46:55] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[23:48:13] <Guest64> now the hash is considered correct
[23:49:05] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[23:53:06] <Guest64> Now I need to get jgit to do the same. )
[23:53:27] *** Quits: Helmholtz (~leibnizma@2001:470:69fc:105::3124) (Quit: Reconnecting)
[23:53:52] *** Joins: Helmholtz (~leibnizma@2001:470:69fc:105::3124)
[23:54:06] *** Joins: _banana_ (~banana_@cpe-24-208-69-88.new.res.rr.com)
[23:54:14] *** Quits: Helmholtz (~leibnizma@2001:470:69fc:105::3124) (Changing host)
[23:54:14] *** Joins: Helmholtz (~leibnizma@user/helmholtz)
[23:55:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[23:55:53] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
