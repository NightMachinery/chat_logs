[00:05:31] *** Quits: ASau (~user@lmpc.drb.insel.de) (Read error: Connection reset by peer)
[00:08:32] *** Joins: ASau (~user@lmpc.drb.insel.de)
[00:18:42] *** Quits: ASau (~user@lmpc.drb.insel.de) (Read error: Connection reset by peer)
[00:29:38] *** Quits: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at) (Ping timeout: 260 seconds)
[00:31:01] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 240 seconds)
[00:45:17] *** Quits: nikola2 (~nikola2@93-87-191-240.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[01:03:43] *** Joins: elflng (~elflng@5.28.137.182)
[01:56:12] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Remote host closed the connection)
[03:33:57] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[03:36:58] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:85f4:5f76:4849:adb1)
[03:36:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:85f4:5f76:4849:adb1) (Changing host)
[03:36:58] *** Joins: skapata (~Skapata@user/skapata)
[03:57:48] *** Joins: m455 (~m455@user/m455)
[04:28:57] *** Quits: klovett (~klovett@107.115.32.130) (Ping timeout: 240 seconds)
[04:41:08] *** Quits: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net) (Read error: Connection reset by peer)
[04:46:21] *** Joins: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net)
[04:52:08] *** Quits: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net) (Remote host closed the connection)
[04:52:40] *** Joins: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net)
[05:42:51] *** Quits: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:30fe:eea7:a0bb:e650) (Ping timeout: 245 seconds)
[06:02:11] *** Joins: klovett (~klovett@107.115.32.130)
[07:19:20] *** Quits: klovett (~klovett@107.115.32.130) (Quit: ZZZzzzâ€¦)
[08:06:10] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:09:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:27:25] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 268 seconds)
[10:29:40] *** Joins: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at)
[10:40:40] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:54:40] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[11:04:09] <vandusen> SPAM! SPAM! SPAM! by free
[11:07:22] *** Quits: ecloud (~quassel@192.89.120.58) (Remote host closed the connection)
[11:09:35] *** Joins: ecloud (~quassel@192.89.120.58)
[11:11:17] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[11:21:40] <vandusen> SPAM! SPAM! SPAM! by freee
[11:49:24] *** Joins: rgherdt_ (~rgherdt@ip5f5af447.dynamic.kabel-deutschland.de)
[12:28:29] *** Joins: tooDumbToFleng (~alexshend@pd9f03d60.dip0.t-ipconnect.de)
[12:29:03] *** Joins: tooDumb91 (~alexshend@ip-109-43-176-123.web.vodafone.de)
[12:32:07] *** Quits: tooDumb67 (~alexshend@pd9f03d60.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[12:33:15] *** Quits: tooDumbToFleng (~alexshend@pd9f03d60.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[12:46:08] *** Quits: tooDumb91 (~alexshend@ip-109-43-176-123.web.vodafone.de) (Read error: Connection reset by peer)
[13:11:55] *** Joins: tooDumbToFleng (~alexshend@pd9f03d60.dip0.t-ipconnect.de)
[13:13:11] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:31:45] *** Joins: tooDumb87 (~alexshend@pd9f03d60.dip0.t-ipconnect.de)
[13:31:45] *** Quits: tooDumbToFleng (~alexshend@pd9f03d60.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[13:34:55] <wasamasa> mario-goulart: any idea why judybot caught the one other case?
[13:35:05] <wasamasa> mario-goulart: could be the lack of regex support, huh
[13:50:26] <s-liao> Is the source code of Judybot on the Github?
[13:50:49] <wasamasa> judybot: source
[13:50:49] <judybot> https://depp.brause.cc/sandbox/judybot.rb
[13:50:57] <wasamasa> no need for github
[13:51:13] <s-liao> Okay
[13:52:13] <s-liao> Only 273 lines.
[13:52:34] <wasamasa> the power of ruby
[13:55:21] <s-liao> I have not tried ruby yet. Ten years ago, I randomly saw the book of the ruby in the library. Read for a while, Then brought it. Thought it deserve to spend time on it.
[13:57:55] <wasamasa> it's basically a more modern take on perl
[13:58:34] <s-liao> But maybe that time I was a quite young programmer.And watched the p*on online and work. Then put the book in the shelf for ever.
[13:58:46] <s-liao> Really?
[13:59:54] <wasamasa> yeah, it feels a lot like perl, but with OOP
[14:06:23] <s-liao> Cool. How many programming language have you been try?
[14:07:16] <s-liao> Perl is like make the bash programming better?
[14:08:21] <mario-goulart> wasamasa: the akyyy one?
[14:08:28] <wasamasa> yes
[14:09:14] <wasamasa> s-liao: quite a bit, but I've only deeply dug into lisp stuff
[14:09:47] <mario-goulart> wasamasa: I don't know.  I'm using the regexen you gave me, but those were not enough to catch freee, so I added freee to bad-words.  I've also added akyyy.
[14:10:02] <wasamasa> hm
[14:10:14] <wasamasa> I thought bad-words is a regex containing a list of plain words
[14:10:28] <wasamasa> but one of the entries I've made is a regex for shortened URLs
[14:10:38] <wasamasa> which wouldn't match because it's not a plain word
[14:11:21] <mario-goulart> IIRC lines are broken into words and regex-or'ed.  I might be wrong, though.
[14:13:47] *** Quits: tooDumb87 (~alexshend@pd9f03d60.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[14:16:27] *** Joins: tooDumbToFleng (~alexshend@pd9f03d60.dip0.t-ipconnect.de)
[14:46:27] *** Joins: ublx (~ublx@user/ublx)
[14:56:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:11:01] *** Joins: nikola2 (~nikola2@93-87-191-240.dynamic.isp.telekom.rs)
[16:21:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:03:56] *** Joins: klovett (~klovett@107.115.32.130)
[17:12:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:90de:bade:1639:c5d2)
[17:12:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:90de:bade:1639:c5d2) (Changing host)
[17:12:46] *** Joins: skapata (~Skapata@user/skapata)
[17:53:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:30:15] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:30:58] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (Quit: ZNC - https://znc.in)
[18:31:25] *** Joins: wasamasa (~wasamasa@chicken/contributor/wasamasa)
[18:32:35] *** Joins: klovett_ (~klovett@107.115.32.130)
[18:34:47] *** Quits: klovett (~klovett@107.115.32.130) (Ping timeout: 256 seconds)
[18:35:19] *** Quits: judybot (~judybot@user/wasamasa/bot/judybot) (Remote host closed the connection)
[18:35:29] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (Client Quit)
[18:36:38] *** Joins: wasamasa (~wasamasa@chicken/contributor/wasamasa)
[18:38:18] *** Joins: judybot (~judybot@user/wasamasa/bot/judybot)
[21:47:30] <Zipheir> I've never seen why adding (more) OOP to Perl 5 was an improvement.
[21:47:56] <Zipheir> Though I'm sure Ruby is more than that.
[22:16:36] <Zipheir> What's the exact significance of the "pure procedure type" notation --> in (chicken type)?  If I have a procedure foo of type ((a -> b) a --> b), is it a violation of --> if someone passes foo a side-effecting procedure?
[22:17:16] <Zipheir> I'm assuming that it is and using -> for all higher-order procedures.
[22:17:17] <fantazo> Zipheir: is just Smalltalk with a different syntax and class library.
[22:17:20] <wasamasa> that's not how the type information is used
[22:17:30] <Zipheir> fantazo: wat
[22:17:30] <wasamasa> instead the data is used to optimize harder
[22:19:10] <Zipheir> Fine, I'm aware that this is not something the type checker is going to catch.  So will this compile to unstable code?
[22:20:41] <Zipheir> If I'm reading the Types wiki page correctly, it should be fine, so long as local variables of foo can't be side-effected.
[22:20:45] <jcroisant> I don't know if this is how it actually works, but I would expect that the compiler might optimize out calls to the outer function (the pure one), if the results are not used.
[22:21:56] <Zipheir> jcroisant: Yes, I'd assume that's at least one way in which the information is used.
[22:23:12] <jcroisant> I don't know if the type system is smart enough to tell whether the non-pure function is actually called. The type declaration alone doesn't imply that it is called. Maybe that argument is ignored, or maybe b is a container type that could hold the function.
[22:23:30] <Zipheir> wasamasa: In a nutshell, what I mean is, --> is a promise to the compiler about a procedure; can that promise be broken by an argument?
[22:23:51] <Zipheir> My thought is probably not.
[22:24:38] <wasamasa> if the promise is broken, I expect breakage
[22:24:53] <Zipheir> Very helpful :)
[22:25:25] <Zipheir> Presumably the current continuation is not considered local state...
[22:25:52] <Zipheir> Nah, that would be silly.  I guess I'll have to look at the (chicken type) source and see what it's doing.
[22:28:52] <Zipheir> For now, I'm declaring all non-side-effecting higher-order functions with -->, but their procedure arguments with ->.  Thus map would be ((a -> b) (list-of a) --> (list-of b)).  Hopefully that's sane.
[22:29:50] <Zipheir> (A simple one-list `map`, you get the idea.)
[22:30:14] <jcroisant> Sounds dodgy to me, tbh
[22:30:43] <Zipheir> I know, right?
[22:31:21] <Zipheir> I'd like some typing rules about how -> propagates.
[22:31:52] *** Quits: tooDumbToFleng (~alexshend@pd9f03d60.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[22:33:32] <Zipheir> Maybe it's best to just avoid the feature entirely.
[22:34:14] <jcroisant> If the inner function might have side effects, and the outer function calls the inner function, then you're basically lying to the type checker by saying that the outer function is pure, so you're now in unspecified behavior land. I'd either declare both as pure or neither as pure.
[22:35:19] <Zipheir> It's not quite "pure" vs. "impure".  The types wiki page says that declaring foo with --> is promising that *the local variables of foo will not be mutated*.
[22:35:37] <Zipheir> Assignment can happen, IIUC, just not to foo's local state.
[22:35:49] <Zipheir> But that's not exactly airtight.
[22:36:33] <Zipheir> Gah, I can't even find the type checker in the compiler sources.
[22:36:55] *** Joins: tooDumb16 (~alexshend@pd9f03d60.dip0.t-ipconnect.de)
[22:36:57] <jcroisant> I'm not sure I would bank on that exact wording on the wiki, regarding local variables
[22:37:04] <Zipheir> Yeah.
[22:37:31] <Zipheir> Underspecified features are worse than non-existant ones.
[22:38:09] <jcroisant> This is a useful feature, I think you're just trying too hard to avoid the obvious ;)
[22:38:47] <Zipheir> Is it obvious?  The interactions between "pure" and effectful code are very subtle.
[22:39:13] <Zipheir> A significant chunk of current type theory research is about trying to resolve those interactions.
[22:39:45] <Zipheir> OK, I'll be puritanical about -->.
[22:39:51] <Zipheir> jcroisant: Thanks for the input.
[22:40:02] <jcroisant> If it might have side effects, just use "->" and you're safe. If you're sure it won't, then use "-->" and you might get better optimization.
[22:42:55] <Zipheir> Grumble.
[22:45:08] <jcroisant> What counts as a "side effect" can indeed be subtle, but in practice most cases are clear. And if you're not sure, there is no harm in using "->".
[22:46:24] <Zipheir> Especially since --> is just for optimization.
[22:49:24] <jcroisant> If you really think about it, even (+ x y) can be said to have side effects because it might modify some registers on the CPU or something. But you will go insane thinking that way. :D
[22:51:52] <Zipheir> I guess that explains Oleg. :)  See his "Having an Effect" video.
[22:52:40] <Zipheir> Memory accesses, in particular, may be effectful on distributed systems.
[22:52:53] <Zipheir> *thought of as effectful
[22:54:16] <jcroisant> By the way, I think the type checker code is mostly in scrutinizer.scm, and some in lfa2.scm
[22:55:14] <Zipheir> Thanks.
[22:57:09] <jcroisant> Also, I'm pretty sure --> is shorthand for doing -> but also (declare (pure foo)) -- http://wiki.call-cc.org/man/5/Declarations#pure
[22:57:29] <jcroisant> "Declares the procedures with the names IDENTIFIER ... as referentially transparent, that is, as not having any side effects. This can help the compiler to remove non-side-effecting expressions."
[22:57:51] <Zipheir> Aha.
[22:58:12] <Zipheir> So the wiki seems to be wrong.  It's any side-effecting behavior.
[22:58:59] <jcroisant> Yeah, I would agree the wiki description of --> is inaccurate
[23:12:22] *** Quits: tooDumb16 (~alexshend@pd9f03d60.dip0.t-ipconnect.de) (Quit: -a- Connection Timed Out)
[23:12:34] *** Joins: tooDumbToFleng (~alexshend@pd9f03d60.dip0.t-ipconnect.de)
[23:15:33] *** tooDumbToFleng is now known as alexshendi
[23:15:46] <Bunny351> "locally held state" is indeed ambiguous, it should mean that this procedure doesn't change surrounding lexical bindings
[23:16:38] <Bunny351> "pure" declaration is different: it means that such a procedure doesn't cause _any_ side effects
[23:54:30] *** Joins: tooDumbToFleng (~alexshend@pd9f03d60.dip0.t-ipconnect.de)
[23:55:38] *** Joins: tooDumb51 (~alexshend@pd9f03d60.dip0.t-ipconnect.de)
[23:57:47] *** Quits: alexshendi (~alexshend@pd9f03d60.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[23:58:55] *** Quits: tooDumbToFleng (~alexshend@pd9f03d60.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
