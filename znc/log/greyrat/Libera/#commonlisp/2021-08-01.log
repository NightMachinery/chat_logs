[00:05:43] *** Joins: selwyn (~selwyn@user/selwyn)
[00:09:03] <nirnam> I think latex is another layer of complication peoples added into thing (but look, pretty formular!), whatever happened to plain old document :<
[00:09:53] <nirnam> I really love pod in Perl, you can embeded your document into your scirpt, and it had to tool to translate it to anything under the sun
[00:10:58] *** Joins: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se)
[00:12:37] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[00:21:14] *** Joins: zacts (~zacts@user/zacts)
[00:24:33] *** Joins: selwyn (~selwyn@user/selwyn)
[00:33:08] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Ping timeout: 256 seconds)
[00:39:59] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[00:40:44] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Remote host closed the connection)
[00:53:06] *** Joins: meraz_1 (~meraz_1@190.92.33.253)
[00:59:39] *** Quits: pve (~pve@188-67-251-199.bb.dnainternet.fi) (Quit: leaving)
[01:06:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:07:43] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[01:12:12] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[01:18:56] *** Joins: psycomic (~psycomic@2a01cb0588c5e400ab74f68b8d01aaf3.ipv6.abo.wanadoo.fr)
[01:19:07] *** Quits: psycomic (~psycomic@2a01cb0588c5e400ab74f68b8d01aaf3.ipv6.abo.wanadoo.fr) (Client Quit)
[01:23:14] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net)
[01:23:41] <nij-> Hi, I'm wondering if I can make sbcl into a daemon. Something like
[01:24:02] <nij-> $ cat data-for-cl.txt | sbcl --daemon-pid 1234
[01:24:37] <nij-> Should feed the text into a running sbcl instance, invokes a sb-thread in that sbcl which handles the text.
[01:25:44] <lotuseater> you could have a running swank instance and connect to that
[01:25:45] <nij-> And the following
[01:25:45] <nij-> $ cat data-for-cl.txt | sbcl --daemon-pid 1234 (lambda () (transform-text *input*))
[01:25:45] <nij-> should do the same thing, but let the function transform the text, with the result output back to the shell.
[01:26:18] <nij-> lotuseater: Connect only using emacs? Can I fit the swank instance into a shell pipe line?
[01:33:52] *** Quits: silasfox (~sbv@xdsl-87-78-183-74.nc.de) (Ping timeout: 272 seconds)
[01:43:47] <nirnam> didn't know the first thing about sbcl, but that sounded like you could make a server and a client to sent text into the server?
[01:45:14] <nij-> Yeah, and the server should send things back to the source.
[01:45:42] <nij-> clojure has things similar - babashka. Eg.
[01:45:49] <nij-> ls | bb -i '(filter #(-> % io/file .isDirectory) *input*)'    ## => ("doc" "resources" "sci" "script" "src" "target" "test")
[01:46:08] <nij-> However, it's achieved by taking many things from clojure, to make `bb` start up very fast.
[01:46:30] <nij-> If I have a running repl that will handle the input at any time, I can make use of the full force of CL.
[01:46:51] <nij-> s/taking many things/taking many things away/
[01:47:55] <nirnam> yeah that is what server were for, you can imagine that bb is a client that send thing into already running server, process it then send it back
[01:48:39] <nij-> IIRC `bb` does it by launching it every time...
[01:54:16] <Josh_2> nij-: if you look into scripting in CL this is how its done
[01:54:31] <Josh_2> http://web.archive.org/web/20201107230350/https://ebzzry.io/en/script-lisp/
[01:54:38] <Josh_2> Maybe this is what you want?
[01:57:17] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[02:06:48] *** Quits: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se) (Ping timeout: 272 seconds)
[02:09:36] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[02:10:08] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:16:26] *** Joins: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se)
[02:17:43] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:27:42] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[02:28:29] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net) (Ping timeout: 252 seconds)
[02:28:44] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net)
[02:29:45] *** Quits: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se) (Remote host closed the connection)
[02:30:05] <mrcom> nij-: Clozure CL (CCL) is a download-and-run Lisp w/ built-in editor and REPL window. Runs on Mac & Windows. Current version (1.12) seems a bit fragile, though. https://ccl.clozure.com/
[02:30:06] *** Joins: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se)
[02:31:00] <kakuhen>  1.12.1 is released on most platforms btw, and if there isn't a binary for your platform you can bootstrap 1.12.1 from 1.12
[02:31:33] <kakuhen> i successfully did this on freebsd/amd64 but became too lazy to edit the portfile and try to convince the maintainer it's a good idea to bootstrap ccl (even though they already do this for sbcl)
[02:31:39] <mrcom> 1.12.1 is the version I'm actually running.
[02:31:41] <kakuhen> linux/amd64 gave me strange lisp kernel errors on fedora
[02:32:38] <mrcom> I'm getting strange errors on Mac, too.
[02:32:40] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[02:32:55] <kakuhen> interesting -- my mac hasn't given any problems so far, but I guess I'm not using it too much
[02:33:26] <kakuhen> the most problems i've had with 1.12.1 so far is trying to get a bootstrap working on fedora; it can compile itself just fine, but then loading the bootstrap image will randomly fail when loading some fasl
[02:39:08] <mrcom> I had the same kind of issue (official binary).
[02:40:34] <pjb> Currently, I can't save images with ccl on macOS.  No deployment!  I'm looking into Lispworks…
[02:41:15] <pjb> Currently, and since a few macOS releases…
[02:43:12] *** Quits: Melantha (~pyon@user/pyon) (Ping timeout: 268 seconds)
[02:43:41] *** Joins: Melantha (~pyon@user/pyon)
[02:44:16] <kakuhen> huh that's funny, I was able to successfully save a lisp image recently and prepend kernel on some project I'm working on that uses cl-sdl2
[02:44:49] <kakuhen> my only gripe with ccl is that cl-sdl2 will activate my macbook's graphics card even if I specifically ask for software rendering and no hardware acceleration
[02:45:19] <moon-child> no magic envvar?  On mesa: LIBGL_ALWAYS_SOFTWARE=1
[02:45:28] <kakuhen> I can "solve" this problem by creating an app bundle and setting NSSupportsAutomaticGraphicsSwitching to YES in the Info.plist file, but that's not a quick solution, or one I can easily automate, yet.
[02:46:25] *** Joins: pillton (~user@2405:b000:600:b0::36a)
[02:47:41] <mrcom> pjb: Maybe https://github.com/Clozure/ccl/issues/344 - no saved image on Mojave, Big Sur. SAVE-APPLICATOIN bugging out; TOPLEVEL not reached in PROCESS-EXIT-APPLICATION.
[02:50:05] <pjb> (eq 'pjb 'informatimago) ;-)
[02:50:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[02:51:25] <kakuhen> ok im on catalina and decided to try saving the heap image of this game
[02:51:30] <kakuhen> it "just works"
[02:51:43] <kakuhen> the command in particular I used was  (ccl:save-application "a.out" :toplevel-function #'main :prepend-kernel t)
[02:51:53] <pjb> kakuhen: ccl 1.11 or ccl 1.12?
[02:52:02] <kakuhen> CCL 1.12.1 on OS X v10.15
[02:52:09] <kakuhen> It also worked on CCL 1.12
[02:53:03] <pjb> there's something strange happening.  I put traces and break and the toplevel form is not reached when it should save the image; only the prepended kernel is saved, but not the image.
[02:53:40] <kakuhen> i will note my program acts funny on mac os when you try to close it the usual way, but that's because cl-sdl2 itself has an issue on mac
[02:54:31] <kakuhen> so on mac your graphics stuff--especially Cocoa-related--needs to be on the main thread (or else the operating system will crash your entire application)
[02:54:52] <kakuhen> but for some reason when you invoke the function to quit sdl, you get stuck on a syscall
[02:55:13] <kakuhen> when I test this game on a REPL I usually run the game in a separate thread with bordeaux threads and kill the thread once I'm done; very gross workaround, but it works.
[02:57:01] <kakuhen> the cl-sdl2 maintainers claim this issue only exists on SBCL, but CCL has the same problem; and I'm not sure how I'd go about collecting information to file an issue
[02:57:14] <pjb> kakuhen: when you quit, ccl uses process-interrupt to terminate the various threads.  This may be the source of the problem.
[02:59:10] <kakuhen> i see
[02:59:40] <kakuhen> does it behave differently on freebsd or linux then? because the game quits normally there
[03:00:10] <kakuhen> it's literally just mac os that has this issue, regardless of the implementation I tested it on
[03:00:32] <pjb> I've not posted it to linux yet. It uses mclgui, which implement the GUI classes of MCL on Cocoa (MCL implemented them on the Mac OS Toolbox and Quickdraw).
[03:00:37] <pjb> s/posted/ported/
[03:00:53] <pjb> https://gitlab.com/patchwork
[03:02:59] <lotuseater> kakuhen: https://www.youtube.com/watch?v=YPN0qhSyWy8
[03:03:13] <lotuseater> for the "just works" ^^
[03:19:44] <mrcom> I'm getting random SIGSEGVs on main thread when choosing menu items. Usually they work, sometimes they don't.
[03:23:02] *** Quits: frgo (~frgo@p200300deef181d002c171766ea2b531d.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:23:29] *** Joins: frgo (~frgo@p200300deef181d002c171766ea2b531d.dip0.t-ipconnect.de)
[03:25:53] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[03:37:30] *** Joins: beach` (~user@2a01:cb19:150:3400:ab61:96c6:c18c:396a)
[03:39:42] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[03:41:25] *** Quits: beach (~user@2a01:cb19:150:3400:741:ed06:84e2:cb5f) (Ping timeout: 250 seconds)
[03:54:58] *** Quits: gaqwas (~john@dynamic-095-115-081-228.95.115.pool.telefonica.de) (Ping timeout: 240 seconds)
[04:01:01] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:05:01] <nij-> Thanks Josh_2. I've been looking into options of CL scripting. But I haven't tested the start-time. I'd still think the fastest way is to have a running CL daemon.
[04:27:11] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:31:26] *** Quits: meraz_1 (~meraz_1@190.92.33.253) (Remote host closed the connection)
[04:31:35] <Josh_2> I think this is a CL daemon
[04:31:38] <Josh_2> thats why I suggested it
[04:37:11] <akater[m]> <nirnam> "have anyone created gnu info..." <- There's an info version of the standard draft.  Two of them, actually.  A `.tex` copy of a standard can be converted to texi, then to info, pdf, html.  I did build it recently.  clhs is still more convenient.
[04:40:15] <akater[m]> I probably should not have used the “reply” feature of Matrix in an IRC channel.
[04:41:47] *** Quits: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se) (Remote host closed the connection)
[04:42:04] <akater[m]> Unlike CLHS, the draft of the standard is very likely in public domain.
[04:42:08] *** Quits: tux0r (~tux0r@rosaelefanten.org) (Ping timeout: 252 seconds)
[04:45:40] <Xach> akater[m]: that is what i was assured by kent pitman
[05:04:08] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 272 seconds)
[05:19:18] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[05:24:45] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[05:39:18] *** Quits: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net) (Quit: bbiab)
[06:00:18] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[06:06:14] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[06:07:45] *** Joins: zacts (~zacts@user/zacts)
[06:10:21] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[06:14:38] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[06:15:26] *** Joins: zacts (~zacts@user/zacts)
[06:18:45] *** Joins: zacts47 (~zacts@user/zacts)
[06:20:31] *** Quits: zacts (~zacts@user/zacts) (Killed (NickServ (GHOST command used by zacts47)))
[06:20:42] *** zacts47 is now known as zacts
[06:31:09] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[06:31:32] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[06:31:50] *** Joins: zacts (~zacts@user/zacts)
[06:33:21] *** Parts: zacts (~zacts@user/zacts) ()
[06:46:18] *** Joins: Guest8213 (~Guest82@190.218.237.48)
[06:55:42] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[06:57:28] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Client Quit)
[06:57:41] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[07:01:53] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Client Quit)
[07:02:06] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[07:05:27] *** Joins: prxq (~quassel@x4db90c59.dyn.telefonica.de)
[07:09:10] *** Quits: prxq_ (~quassel@x4dbdadd8.dyn.telefonica.de) (Ping timeout: 258 seconds)
[07:12:26] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[07:29:42] *** beach` is now known as beach
[07:29:53] *** ChanServ sets mode: +o beach
[07:33:11] <beach> Good morning everyone!
[07:33:47] *** beach sets mode: -o beach
[07:34:34] <etimmons> Josh_2: that link does not describe scripting with a CL daemon. cl-launch can make startup time fast by dumping your script as an image
[07:35:11] <etimmons> Good night, beach. I'm always getting in bed when I see your greeting
[07:35:38] <beach> 'night etimmons.
[07:44:22] *** Quits: lad (~lad@user/lad) (Ping timeout: 272 seconds)
[07:59:05] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[08:12:09] <kakuhen> what are the chances of another common lisp spec happening
[08:12:35] <kakuhen> i notice a lot of people saying it will basically never happen again, but why? are the maintainers of major implementations too stubborn to get together for a week and agree on some changes?
[08:12:46] <kakuhen> like how did bordeaux threads go so well but everything afterwards didn't
[08:13:43] <beach> kakuhen: The cost of something like what the ANSI committee did was estimated to about a million USD as I recall.
[08:14:25] <beach> There may be less prestigious specifications like WSCL, but probably not by any major standardization organization.
[08:15:09] <beach> And if you think it is a matter of "getting together for a week", you seriously underestimate the issues of programming-language design.
[08:16:01] <kakuhen> well i dont mean literally a week
[08:16:05] <beach> kakuhen: But don't worry.  You are not alone.  We regularly have people come here and suggest "improvements" to the standard, while being clueless about the implications in terms of what the compiler can do.
[08:16:05] <kakuhen> but some span of time
[08:16:27] <kakuhen> i know the original CL spec didnt happen overnight, and if i had to guess the time it took to even get a draft, probably years
[08:16:32] <beach> kakuhen: Yes, it is more a matter of a year for a dozen people or so.
[08:17:25] <beach> kakuhen: A more important question is: why do you care?  People use languages without an independent standard every day.
[08:17:47] <beach> Like Python, Java.
[08:18:21] <kakuhen> Right, but in the case for Python, there almost a "canonical" implementation people flock to (CPython). Is that true for Common Lisp?
[08:18:30] <moon-child> beach: does  https://docs.oracle.com/javase/specs/  not constitute a standard?
[08:18:38] <beach> I wrote something about this.  Let me see whether I can find it.
[08:18:48] <kakuhen> When the standard marks something as deprecated, and the standard never changes, then isn't it meaningless to consider it deprecated?
[08:19:08] <beach> moon-child: Correct, it does not.  If it is published by the same people who supply the implementation.  Hence "independent".
[08:19:36] <kakuhen> my issue isn't with the standard never changing, but if the standard implies something is prone to change, then I think it's reasonable that some people ask "when will that happen? if at all?"
[08:19:42] <beach> kakuhen: The solution is simple.  Pick an implementation and forget the others exist.   Then you have the same situation as Python.
[08:19:46] <beach> Problem solved.
[08:22:02] <beach> kakuhen: http://metamodular.com/Common-Lisp/updating-the-standard.html
[08:24:48] <beach> kakuhen: I find it fascinating that people are willing to use something like Python which does not have an independent standard, but which is mainly defined by a "canonical implementation", but then, when it comes to Common Lisp, suddenly, they are worried about the standard not being updated, even though they could just forget about all but one implementation, and be in the exact same situation as with Python.
[08:26:13] <kakuhen> Because CPython dominates all of the other Python implementations. Usage statistics from Quicklisp suggest SBCL is very close to a "canonical" implementation, but it's nowhere near the situation of say CPython vs. Jython
[08:26:54] <kakuhen> and often times I find myself having to worry how other implementations may handle some aspects of the standard that let them do pretty much whatever they want
[08:26:58] <kakuhen> e.g. RANDOM
[08:27:48] <kakuhen> granted, there is probably a random number library out there that works fabulously across implementations, but the closest I've got to one gives looots of style warnings from SBCL
[08:28:55] <kakuhen> with that said, common lisp seems to be in a great position where you can simply load the relevant libraries for what you want that isn't covered well enough by the standard, but this still doesn't satisfy my point earlier regarding deprecations
[08:29:11] <beach> kakuhen: If you give it some thought, I think you will see that the situation is much worse with something like Python, all aspects of which can change overnight at the whim of some maintainer.
[08:29:25] <kakuhen> i.e. if the standard declares something as deprecated, then should I look for a library or risk using what's marked deprecated by the standard and assuming it will never change?
[08:29:38] <beach> kakuhen: I suggest you read that page I gave a link to.
[08:29:46] <kakuhen> I am currently reading it, yes.
[08:30:41] <beach> Also, look at the channel logs.  This question comes up several times a year. You won't add anything to the existing information.
[08:35:39] <lisp-newbie> List question: I have a list where every car is itself a cons which is a key value pair, I want to get the value for a certain key, but it's not a plist because each car is not a key, it's another cons which is a key/value cons. Does anyone know how can I do this?
[08:36:31] <lotuseater> lisp-newbie: maybe an example to see it would help
[08:36:42] <beach> I was about to say the same.
[08:36:45] <lisp-newbie> (("askdj" . 190238) ("asd" . 12) ("id" . 24)
[08:36:45] <lisp-newbie>                                ("name" . "sample - 24, 712"))
[08:36:55] <hayley> So, it looks something like ((key1 . value1) (key2 . value2) ...)?
[08:36:55] <hayley> clhs assoc
[08:36:55] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_assocc.htm
[08:36:56] <lisp-newbie> That's the log output
[08:37:02] <lisp-newbie> yeah
[08:37:13] <lotuseater> cause i realize that I'm tired but the description is hard to catch
[08:37:34] <lotuseater> hayley: yeah also thought of assoc
[08:37:54] <beach> lisp-newbie: It is an "association list" as hayley says.
[08:38:00] <lisp-newbie> Thanks
[08:38:05] <lisp-newbie> Reading the link now
[08:38:16] <hayley> If your keys are strings, you should provide :KEY #'STRING= too.
[08:38:33] <lisp-newbie> I'm trying to parse json
[08:38:35] <beach> :TEST?
[08:38:45] <hayley> Right, :TEST rather. Whoops.
[08:38:49] <lisp-newbie> I thought there would be an out-of-the box method for just getting a key
[08:39:01] <beach> lisp-newbie: There is.
[08:39:15] <lisp-newbie> Oh, which one beach?
[08:39:16] <lotuseater> lisp-newbie: and if you "know" all keys will be of type string you can provide ":test #'string=" to ASSOC
[08:39:33] <lotuseater> damn hayley you typed faster than me :)
[08:39:45] <lisp-newbie> Trying now
[08:39:46] <lisp-newbie> Thanks
[08:39:52] <beach> lisp-newbie: (assoc <the-list> <key> :test #'string=)
[08:39:57] <lotuseater> I should sleep. See you later.
[08:40:08] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Read error: Connection reset by peer)
[08:40:44] <hayley> Take care.
[08:40:59] <lisp-newbie> Oh haha beach you are saying that is the default way of doing such a thing? the framework I'm using just turns it into an assoc list and that's how to do it.
[08:41:07] <lisp-newbie> Thanks guys!
[08:41:11] <lisp-newbie> I debugged for 2 hours
[08:41:12] <lotuseater> but I wonder what ":key #'string=" will signal ...
[08:41:15] <lisp-newbie> Should have just asked...
[08:42:20] <lotuseater> lisp-newbie: assoc-lists are useful when dealing with small amounts of key-value pairs. anything beyond that is better to handle with hash tables
[08:43:05] <lisp-newbie> Thanks lotuseater
[08:43:42] <lisp-newbie> (assoc (lack.request:request-body-parameters *request*) "id" :test #'string=) this gave me an error: Constant "id" conflicts with its asserted type LIST.
[08:43:51] <lotuseater> but I don't have a clue yet where this breaking line is
[08:44:16] <lisp-newbie> Beach I was trying to follow your formula
[08:44:25] <lisp-newbie> I probably misunderstood something
[08:44:30] <beach> lisp-newbie: I may have gotten the argument order wrong.
[08:44:37] <beach> lisp-newbie: You need to look at the Common Lisp HyperSpec page.
[08:44:38] <lotuseater> I think the first two arguments must be the other way around.
[08:44:59] <lisp-newbie> Looking at the spec now
[08:45:04] <lisp-newbie> Thanks
[08:46:40] <lotuseater> this is one of the good things when using SLIME or friends, typing a known symbol as operator and it shows you good named arguments and possible keywords etc in the bottom bar
[08:46:58] <lotuseater> *well named
[08:48:00] <beach> lotuseater: I use that feature all the time, which is why I don't have to remember this information myself.
[08:48:49] <lisp-newbie> Yeah, will learn slime soon
[08:49:25] *** Joins: pillton` (~user@60-241-26-40.tpgi.com.au)
[08:49:33] <lisp-newbie> How about embedded keys?? Do I have to do the same assoc twice? Or is there a direct way to do it? Say:
[08:49:50] <lisp-newbie> (("hello" ("world" . 26))
[08:49:50] <lisp-newbie>                                                  ("askdj" . 190238)
[08:49:50] <lisp-newbie>                                                  ("asd" . 12) ("id" . 24)
[08:49:50] <lisp-newbie>                                                  ("name" . "sample - 24, 712"))
[08:49:54] <lotuseater> yes it's a lifesaver feature. I remember a time where I didn't use it and thought "oh noez what did this had as keywords?"
[08:49:56] <lisp-newbie> Has "world"
[08:50:11] <lotuseater> lisp-newbie: better use a paste site for that
[08:50:29] <lisp-newbie> Sorry, thought it was short enough, you are right
[08:50:37] <lotuseater> ah no problem :)
[08:51:20] <lotuseater> with the ":KEY" keyword in assoc you an specify a place where to look
[08:51:47] <lotuseater> but that isn't of much use for your question
[08:52:28] *** Quits: pillton` (~user@60-241-26-40.tpgi.com.au) (Client Quit)
[08:53:13] <lisp-newbie> Ok, thanks so much guys
[08:53:13] *** Quits: pillton (~user@2405:b000:600:b0::36a) (Ping timeout: 256 seconds)
[08:53:24] <lisp-newbie> Calling it a night
[08:53:42] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Quit: Leaving)
[09:00:06] *** Quits: Guest8213 (~Guest82@190.218.237.48) (Quit: Client closed)
[09:02:16] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 272 seconds)
[09:02:28] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[09:03:41] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[09:03:44] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:04:05] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[09:04:13] *** Parts: akoana (~ah@user/akoana) (Leaving)
[09:04:29] *** Joins: Mandus (~aasmundo@85.112.154.250)
[09:18:06] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 265 seconds)
[09:19:48] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[09:35:25] *** Joins: meraz_1 (~meraz_1@190.92.33.253)
[09:43:04] *** Quits: meraz_1 (~meraz_1@190.92.33.253) (Remote host closed the connection)
[10:00:58] <kakuhen> Is there a neat way to "cast" the type of a bignum to, say, (unsigned-byte 64)? Right now I am simply taking the integer modulo 2^64 to achieve this.
[10:03:19] <beach> So you just want to ignore upper bits, even if that means returning a different value than that of the original number?
[10:03:33] <kakuhen> Yes
[10:04:05] <kakuhen> The context of this problem is an implementation of a circular shift
[10:04:25] <beach> Modulo is fine then.  Or you can use a masking operation.
[10:04:25] <kakuhen> As of now, my expression is (mod (logior (ash value count) (ash value (- 64 count))) #.(expt 2 64))
[10:12:19] <moon-child> I think that will not behave correctly if your input is greater than 64 bits; you should mask before shifting
[10:13:57] <moon-child> (let ((mask #.(1- (expt 2 64)))) (logand mask (logior (ash value count) (ash (logand value mask) (- 64 count)))))
[10:16:45] <hayley> I typically write (ldb (byte 64 0) value) to get the lower 64 bits of VALUE.
[10:17:35] <hayley> If you use SBCL then you could use SB-ROTATE-BYTE to generate the right machine instruction for a circular shift, and then use a portable implementation for other Lisp implementations.
[10:42:52] *** Quits: nirnam (~nirnam@1.46.144.168) (Read error: Connection reset by peer)
[10:44:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[10:47:30] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[10:50:11] <kakuhen> I see. I'm using CCL so I decided to just write the usual C version "directly," without considering the fact it's non-portable across architectures :x
[10:52:31] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:52:53] *** Joins: nirnam (~nirnam@1.46.144.168)
[10:53:06] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[10:53:25] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:53:45] *** Lord_of_Life_ is now known as Lord_of_Life
[10:59:24] *** Joins: selwyn (~selwyn@user/selwyn)
[11:05:24] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 265 seconds)
[11:06:21] <hayley> I don't see why it would be non-portable, assuming you wrote it in Common Lisp. Then it would merely go slower if the implementation requires bignums to work.
[11:11:56] *** Quits: nirnam (~nirnam@1.46.144.168) (Quit: leaving)
[11:12:05] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:16:57] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[11:21:16] *** Joins: psycomic (~psycomic@2a01cb0588c5e4009135c9a7fd9986ce.ipv6.abo.wanadoo.fr)
[11:37:08] *** Joins: rt (~robin@user/terpri)
[11:37:37] *** Quits: robin (~robin@user/terpri) (Ping timeout: 245 seconds)
[11:49:56] <kakuhen> Is there something like #'float but for double-float? My implementation only seems to offer double-float as a class and type
[11:50:07] *** Joins: pve (~pve@87-93-136-138.bb.dnainternet.fi)
[11:50:12] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[11:50:21] <beach> clhs float
[11:50:21] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/a_float.htm
[11:50:47] <beach> Do you see the optional parameter PROTOTYPE?
[11:57:41] *** Joins: lad (~lad@user/lad)
[12:00:03] <kakuhen> Yes
[12:00:49] <kakuhen> So presumably my prototype is 1.0d0
[12:01:23] <kakuhen> Just to be sure, I am comparing the results to (coerce <expression> 'double-float)
[12:02:04] <kakuhen> Ok cool this works -- thank you so much, beach.
[12:02:34] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[12:02:57] <beach> Sure.
[12:05:44] *** Joins: gaqwas (~john@dynamic-095-115-067-118.95.115.pool.telefonica.de)
[12:06:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[12:19:09] *** Joins: nirnam (~nirnam@1.46.144.168)
[12:22:54] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Remote host closed the connection)
[12:23:27] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[12:29:08] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[12:32:14] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 256 seconds)
[12:38:10] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:41:04] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:55:24] *** Quits: flip214 (~marek@h081217094109.dyn.cm.kabsi.at) (Changing host)
[12:55:24] *** Joins: flip214 (~marek@user/flip214)
[13:05:23] *** Joins: tfeb (~tfb@88.98.95.237)
[13:08:37] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:09:37] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Read error: Connection reset by peer)
[13:10:26] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[13:12:22] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[13:21:18] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Ping timeout: 272 seconds)
[13:24:27] <beach> We now have 35 WSCL issues defined: https://github.com/s-expressionists/wscl/tree/main/wscl-issues/proposed and, as before, help would be appreciated where these issues need to be checked on more implementations.
[13:35:14] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[13:35:25] *** Joins: kpoeck (~kpoeck@87.140.195.0)
[13:55:49] *** Quits: kpoeck (~kpoeck@87.140.195.0) (Ping timeout: 246 seconds)
[14:08:10] *** Quits: lad (~lad@user/lad) (Ping timeout: 272 seconds)
[14:16:06] <contrapunctus> nirnam: why not use Emacs? With Evil you have a complete implementation of Vim editing. You can use TRAMP to access remote machines. The Lisp tooling, I hear, is unparalleled in Emacs. So...why not? 🤔 (also, EWW is a great browser for documentation - mostly textual, but can also display images.)
[14:29:42] <nij-> Emacs takes times to learn. It'd be a slightly painful learning process who has settled in their systems that fulfill most of their needs.. or at least it was how it felt for me before I switched to emacs ;)
[14:31:21] <nij-> But really.. I think the fundamental difference between emacs and vim is that emacs is lisp, but vim is not. That lisp is better could be obvious to lispers, but I find it hard to explain to those who aren't.
[14:36:06] <phoe> What is the currently recommended CL setup for vim?
[14:37:41] *** Joins: nature (~nature@mail.blazebone.com)
[14:37:59] *** Joins: kpoeck (~kpoeck@87.140.193.0)
[14:42:19] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[14:46:01] <pjb> beach: I've posted my comments in a PR https://github.com/s-expressionists/wscl/pull/1  Feel free to integrate them as you wish and reject the PR, it's not to be taken literally.
[14:47:16] *** Quits: kpoeck (~kpoeck@87.140.193.0) (Ping timeout: 246 seconds)
[14:51:27] *** Joins: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5)
[14:57:05] *** Quits: nature (~nature@mail.blazebone.com) (Quit: Lost terminal)
[15:01:43] <lotuseater> Has anyone advise or sources to fully understand continuations? I think I don't up till now. I know and worked through the chapter in "On Lisp" by Paul Graham some times, knowing how to define the needed macros is indispensable.
[15:05:00] <MichaelRaskin> For continuations I would recommend _Scheme_ explanations of things like amb macro
[15:05:04] <hayley> A continuation is "merely" the rest of the computation. If you reify a continuation as a function, then calling the function will run the rest of the computation.
[15:06:54] <lotuseater> thx you two :) I got it like it's some sort of runtime goto and then "all you need is call/cc"
[15:07:47] <nirnam> contrapunctus: tho I understand why emacs is a superior lisp IDE, vim is much more fitting in my environment
[15:08:05] <beach> pjb: Thanks.
[15:08:13] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:08:38] <lotuseater> hayley: isn't it also aware of what happened before?
[15:08:49] <hayley> No.
[15:09:02] <contrapunctus> nirnam: hm...how's that?
[15:09:05] <lotuseater> so this was a lie they told me
[15:09:15] <hayley> Who are "they"?
[15:09:16] <lotuseater> nirnam: so what's your environment
[15:09:29] <lotuseater> hayley: authors of articles about the topic
[15:09:49] <lotuseater> there's also a book "Compiling with continuations"
[15:10:04] <nirnam> it system adminstrator setting, I only doing lisp for curiocity, most of the time I have to ssh to a machine, get in, get out, go home
[15:10:19] <lotuseater> okay that seems reasonable
[15:10:37] <lotuseater> you could also have a SLIME clone for vim
[15:10:49] <nirnam> I was using vlime at the moment
[15:10:54] <nirnam> been serving me well
[15:10:59] <lotuseater> nice
[15:14:22] <akater[m]> I have to say, there is at least one use case for the Info version of ANSI standard: full-text search is faster than in CLHS.
[15:23:05] *** Quits: frgo (~frgo@p200300deef181d002c171766ea2b531d.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:23:33] *** Joins: frgo (~frgo@p200300deef181d00cc23846459d9cafd.dip0.t-ipconnect.de)
[15:24:03] *** Joins: random-nick (~random-ni@87.116.182.181)
[15:24:47] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[15:25:07] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:29:09] *** rt is now known as robin
[15:30:40] *** Joins: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se)
[15:40:09] <susam> Hello! Is hunchentoot a good choice for web server? I need something simple that can accept an HTTP request, parse its GET or POST parameters, send back a response, etc.
[15:40:56] <pjb> Hunchetoot can do that.
[15:41:24] <susam> pjb: Thanks!
[15:43:54] *** Quits: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5) (Ping timeout: 240 seconds)
[15:46:31] <lotuseater> susam: https://edicl.github.io/hunchentoot/
[15:47:43] <susam> lotuseater: Thanks. I have the documentation. It does seem to have what I need. My reason for asking here was to check if Hunchentoot is still a good recommendation or if the community recomends something else.
[15:52:00] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[15:52:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[15:52:26] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[15:54:02] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[15:54:48] *** Joins: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5)
[15:55:41] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[16:05:21] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[16:05:33] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[16:07:22] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40)
[16:21:28] <lotuseater> How can one class inherit all but one slot from another?
[16:21:46] <phoe> lotuseater: what are you trying to do?
[16:22:06] <lotuseater> or I make the content (just a boolean) of this slot static to T or NIL
[16:22:09] <beach> lotuseater: That sounds completely contrary to the very idea of inheritance.
[16:22:23] <phoe> due to Liskov substitution principle, if you have FOO that is a superclass of BAR, then every BAR is a FOO
[16:22:30] <lotuseater> yes it does and I don't need it necessarily ^^ sry
[16:22:39] <phoe> so every BAR should function in a context where a FOO is needed
[16:22:42] <lotuseater> yes of course I know that
[16:23:16] <phoe> so (slot-value bar 'some-slot) should function if (slot-value foo 'some-slot) is a part of your documented interface
[16:23:30] <phoe> so, in other words, you can't do that and if you could then you shouldn't so that because you break LSP
[16:23:38] <phoe> s/so that/do that/
[16:23:43] <phoe> what are you trying to do?
[16:23:55] <lotuseater> it's not of importance
[16:23:59] <hayley> .oO( Maybe lotuseater wants to do Self-esque protocols where methods can override slots, but this is Common Lisp, so we are doing generic function oriented programming... )
[16:24:20] <phoe> well, that's possible, yes
[16:26:33] <hayley> That kind of overriding is also done in Brachaware like Newspeak and Dart and I think it's almost doable in Lisp, if you think of the interface being generic functions and initargs for MAKE-INSTANCE.
[16:27:19] <lotuseater> I just have a class VERTEX (for graphs) with a slot DIRECTED of type boolean, so when T at inizialization it will be changed to class DIRECTED-VERTEX which should inherit from VERTEX but doesn't need the DIRECTED slot anymore necessarily.
[16:27:52] <lotuseater> it was just a thought that came to my mind
[16:30:20] <hayley> Then the slot is unnecessary, and you could have a method like (defmethod initialize-instance :after ((v vertex) &key directed) (when directed (change-class v 'directed-vertex))) if I recall correctly.
[16:30:42] <lotuseater> ah indeed that would be better :)
[16:31:14] <lotuseater> I wasn't sure if I can provide to that a new key.
[16:32:23] <phoe> I have been wondering if a CHANGE-CLASS is allowed to occur there
[16:33:01] <phoe> which is, whether (make-instance 'verteX ...) is required to return something whose CLASS-OF is VERTEX and not a subclass
[16:33:47] <lotuseater> would also be enough with class VERTEX
[16:34:09] <hayley> "The generic function make-instance creates and returns a new instance of the given class."
[16:34:17] <hayley> Too vague to tell.
[16:35:43] <phoe> "the given class" though
[16:35:53] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:c0b9:5f24:4f26:4ca7)
[16:36:00] <phoe> it's "the class VERTEX", which suggests EQ rather than SUBTYPEP
[16:36:07] <phoe> s/SUBTYPEP/SUBCLASSP/
[16:40:36] <_death> or you can not abuse change-class and just create an instance of the right class
[16:41:25] <hayley> Or does directed-ness need to be stored in the class?
[16:41:44] <phoe> depends on the approach one takes
[16:41:56] <phoe> can be composition over inheritance, at which point a DIRECTEDP slot can work just fine
[16:42:38] <phoe> but I'd actually make a DIRECTED-MIXIN and UNDIRECTED-MIXIN and define DIRECTED-SLOT to have superclasses (DIRECTED-MIXIN VECTOR) because why not
[16:43:58] <phoe> s/DIRECTED-SLOT/DIRECTED-VECTOR/
[16:45:26] <hayley> Someone told me the origins of "composition over inheritance" were in mixins.
[16:46:16] <phoe> that works too, but note that a lot of OO systems out there either do not have multiple inheritance or do but shun it
[16:46:40] <phoe> so in their context composition is storing stuff in slots, rather than mixing in flavors
[16:49:05] <hayley> Seems it would be Bracha-ware again as http://www.bracha.org/oopsla90.pdf talks about "inheritance mechanisms [being] subsumed in a new inheritance model based on composition of mixins".
[17:00:15] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[17:01:22] <akater[m]> lotuseater: “inherit all but one slot” sounds like you simply need to invert one link in the inheritance lattice.  If you want a to inherit all but one slot of b, it should rather b inherit from a and add the slot in question.
[17:06:42] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Remote host closed the connection)
[17:07:31] <pjb> Or you may neutralize a slot by overriding its accessor, as long as you do it preserving the Liskov Substitution Principle.
[17:07:46] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[17:08:09] <hayley> That would be the .oO( Self ) style, but you still have to kill the slot.
[17:08:27] <phoe> or simply not export it
[17:08:38] <phoe> if the slot is an implementation detail then not using it is wasteful, but fine
[17:09:41] <pjb> (defclass colored-square () ((color :initform 'red :accessor color) (side :initarg :side :accessor side))) (defclass square () ((color :initform 'nil))) (defmethod (setf color) (new-color (square square)) (error "a square cannot be colored"))
[17:09:59] <pjb> But you need to update your pre- and post-conditions for color and (setf color)!
[17:10:42] <pjb> To do it cleanly, ie. as akater[m] said, you can also use mixins thanks to multiple-inheritance.
[17:11:18] <pjb> (defclass colored-square (square colored-object) ()) (defclass uncolored-square (square) ())
[17:11:20] <lotuseater> yeah okay or just staying with VERTEX could also be enough
[17:13:13] <pjb> Most often, classes are defined without expliciting their invariants, and the pre- and post-conditions of their methods.  Therefore the LSP is trivially ensured by assuming the trivial conditions and invariants (NIL and T).
[17:13:47] <pjb> ie. you use the object only to store data, and you can call the methods in any order whatever the state of the object.
[17:16:08] *** Joins: tfeb (~tfb@88.98.95.237)
[17:18:43] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[17:33:31] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 265 seconds)
[17:34:33] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:c0b9:5f24:4f26:4ca7) (Remote host closed the connection)
[17:39:45] *** Joins: tfeb (~tfb@88.98.95.237)
[17:42:45] <nij-> Hello, if I understand correctly, when I run (ql:quickload :slynk), this line will be evaluated: https://github.com/joaotavora/sly/blob/master/slynk/slynk.asd#L112
[17:43:31] <nij-> This will in turn evaluate the file slynk-retro, which defines a package "slynk-retro" and some functions under that package.
[17:43:55] <nij-> However, I the package isn't defined and the functions aren't defined either. Something must be wrong..
[17:44:26] <tfeb> Yes, the system is defined, no the system is not loaded
[17:44:26] <pjb> nij-: no, this line is purely declarative.  It doesn't do anything that drastic.
[17:45:11] <tfeb> so no code in the system is compiled or executed
[17:45:14] <pjb> nij-: quickload does several things.  including asdf-load'ing the asd file, which evaluates that form, and this will only record the data structure for the system and its dependencies and components.
[17:45:18] <nij-> Now, in my $QUICKLISP/dists/quicklisp/installed/systems/slynk.txt , it does tell quicklisp to look at "dists/quicklisp/software/sly-20210630-git/slynk/slynk.asd"
[17:45:20] <nij-> OH.
[17:46:08] <pjb> nij-: it's when quickload then tries to compile and load the system that the data structure created by that form will be used by asdf to compile and load the files of its dependencies and its components.
[17:46:45] <pjb> nij-: https://common-lisp.net/project/asdf/asdf.html
[17:47:23] <nij-> How do I ask quickload to enforce loading the file "../contrib/slynk-retro" then?
[17:47:37] <pjb> Good question.
[17:48:01] <pjb> (ql:quickload :slynk/retro)  should have that effect.
[17:48:27] <nij-> YES!
[17:48:31] <tfeb> does (ql: quickload "slink/retro") work?  My guess is not but it might
[17:48:37] <tfeb> ... ah
[17:48:37] <nij-> YES!!
[17:49:23] <pjb> Note that the system "slynk/retro"  :depends-on (:slynk) so the system "slynk" will be loaded first.
[17:49:45] <nij-> It's weird cuz another system :slynk/mrepl is loaded automatically - https://github.com/joaotavora/sly/blob/master/slynk/slynk.asd#L92
[17:50:22] <pjb> The system is _defined_ by loading the asd file, but the system is not _loaded_.
[17:50:24] <nij-> And you can see, both systems are defined similarly. Why did :slynk/mrepl get loaded automatically, while :slynk/retro didn't?
[17:51:28] <tfeb> some initialization form in slynk (aren't there options saying what extras you want?)
[17:51:42] <pjb> not until you ask to load it either thru quicklisp or with (asdf:operate 'asdf:load-op :slynk/mrepl)
[17:51:42] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Remote host closed the connection)
[17:52:07] <tfeb> whic, if there are, would be how to get slynk/retro loaded btw
[17:52:17] <pjb> You may indeed ask it indirectly by initializing slynk if such a thing is programmed.
[17:52:22] *** Quits: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se) (Ping timeout: 265 seconds)
[17:53:11] <pjb> nij-: for this, you would have to read the user manual of slynk.
[17:53:39] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[17:53:39] <nij-> Opening a fresh-new repl => (ql:quickload :slynk) => (in-package :slynk-mrepl) #|succeed|# => (in-package :slynk-retro) #|error|#.
[17:54:15] <hayley> Yes, note you never loaded slynk-retro.
[17:54:41] <nij-> But I didn't load slynk-mrepl either.
[17:54:46] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:55:01] <hayley> Maybe there is some other dependency then.
[17:55:03] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[17:55:04] <nij-> I've searched over the repl, there does not seem to be a form that load slynk-retro for me either.
[17:55:05] <pjb> nij-: you're confusing systems and packages.
[17:55:39] <pjb> nij-: note that systems are named with lowercase strings "slynk".  Packages are named by strings, usually upper-case "SLYNK-MREPL".
[17:55:59] <pjb> nij-: it is totally unrelated what package is defined or mutated by loading a system.
[17:56:05] <pjb> anything goes.
[17:56:31] <nij-> In the repo the package SLYNK-MREPL is given in slynk-mrepl.lisp, which is only pointed by the system :slynk/mrepl.
[17:56:54] <nij-> But I have never loaded the system :slynk/mrepl.
[17:57:14] <nij-> So the fact that the package SLYNK-MREPL is automatically defined seems weird to me.
[17:57:14] <pjb> nij-: for me, (ql:quickload "slynk") (find-package "SLYNK-MREPL") --> NIL
[17:57:39] <pjb> nij-: it whatever the slynk system does.
[17:57:44] <nij-> That is very very weird.
[17:58:05] <pjb> anything can happen, it could as well define a package named "SANTA-CLAUS" or define no package at all.
[17:58:21] <pjb> Just look at the sources of slynk!
[17:58:30] <pjb> or read the user manual of slynk.
[17:58:41] <tfeb> what configuration do you have, because it will be that.  I have
[17:58:51] <nij-> I'm digging the src of slynk indeed. And cannot see why.
[17:59:40] <nij-> tfeb: which config?
[17:59:44] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:00:34] <nij-> AH turns out that without quickload-ing slynk gives me the package slynk-mrepl already.
[18:01:02] <pjb> I don't observe your behavior, and there's nothing in my slynk sources refering the slynk-mrepl pacakge.
[18:01:38] <nij-> I see. It must be that when I loaded sly from emacs, it loaded the mrepl config for me automatically.
[18:01:49] <nij-> When I run an sbcl in terminal, it doesn't have that effect.
[18:01:57] <tfeb> nij: right: that config
[18:02:00] <nij-> It's clear now. Thanks for helping me to clarify.
[18:02:17] <pjb> A different one, indeed.
[18:02:32] <nij-> :))
[18:02:56] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:03:10] <tfeb> Or ~/.slynkrc
[18:03:56] <nij-> tfeb I think it's sly.el that's doing the magic xD
[18:04:05] <nij-> They want to have mrepl autoloaded I suppose.
[18:05:32] <tfeb> Yes, I set up sly and slime to do that but I forget how (but it's not in any lisp-side inits I have in git, and I can't see my emacs-side inits from here)
[18:06:45] <nij-> And I'm being extremely lazy on my emacs config.. currently using doom, which automatically does many magics tooo..
[18:06:56] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[18:07:03] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[18:08:36] *** Joins: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se)
[18:09:38] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:10:02] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:19:06] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[18:19:54] *** Quits: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se) (Remote host closed the connection)
[18:20:16] *** Joins: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se)
[18:27:16] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:29:23] *** Joins: Bike (~Bike@71.69.170.70)
[18:29:23] *** ChanServ sets mode: +o Bike
[18:29:51] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[18:33:09] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:35:55] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[18:38:36] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 272 seconds)
[18:40:14] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 26.1))
[18:40:17] <lisp123_> Is there a way to test if a value is a gensym?
[18:40:46] <beach> lisp123_: You can check whether the home package is NIL.
[18:40:55] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:41:02] <beach> lisp123_: But you can't make sure it was created using GENSYM.
[18:41:15] <lisp123_> beach: thanks
[18:41:34] <beach> It could have been created using MAKE-SYMBOL, or from UNINTERN of a previously interned symbol.
[18:41:47] <beach> Sure.
[18:41:55] <lisp123_> Perhaps I should then store gensyms into a global list upon creation and then check against that?
[18:41:59] <beach> clhs symbol-package
[18:41:59] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_symb_3.htm
[18:42:30] <beach> That all depends on your reason for wanting such a test.
[18:42:48] *** Joins: ldb (~user@user/ldb)
[18:43:44] <lisp123_> In 'On Lisp', PG suggests one could use genysm as a value for failing a test, if I were to go down that route, I would need to be able to check that the return value was a gensym created during the process and hence a failure
[18:44:59] <beach> That's a strange thing to suggest though.  Why not signal a condition?
[18:45:35] <ldb> "plain lisp" doesn't have condition
[18:45:39] <lisp123_>  Yeah it seemed strange to me as well. A condition may work, I will have to play around with it
[18:45:53] <beach> ldb: What is "plain lisp"?
[18:46:57] <ldb> there is a nonexists common subset between LISP1.5, MacLisp, Scheme, Arc...
[18:47:27] <beach> And why is that information important to the question from lisp123_?
[18:47:47] <ldb> I guess PG trys to avoid features not present in other lisp variants
[18:48:57] <pjb> lisp123_: you would keep the reference to the guard value!
[18:49:31] <pjb> lisp123_: (let ((eof (gensym)))  (eql eof (with-input-from-string (input "") (read input nil eof)))) #| --> t |#
[18:49:55] <pjb> lisp123_: you cannot expect some random uninterned symbol!
[18:50:07] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[18:50:19] <ldb> pjb: I don't get why need gensym for eof here
[18:50:31] <pjb> lisp123_: (let ((eof (gensym)))  (with-input-from-string (input "#:foo") (let ((foo (read input nil eof))) (list (eql foo eof) (symbol-package foo))))) #| --> (nil nil) |#
[18:50:39] <pjb> ldb: because most other values can be read!
[18:51:06] <pjb> lisp123_: (let ((eof 42))  (with-input-from-string (input "42") (eql eof (read input nil eof)))) #| --> t |# WRONG!
[18:51:12] <ldb> oh, I see, it is read
[18:51:24] <pjb> or stored in a data structure etc,.
[18:51:45] <pjb> the point of the guard value is to make sure it cannot have been used in the data structure for anything else.
[18:51:59] <pjb> Often NIL is enough for this. But sometimes you want something more unique.
[18:52:26] <lisp123_> pjb: Oh I see. So we can use gensym to avoid it being read for something else?
[18:52:39] <pjb> Yes.
[18:53:00] <pjb> We could as well use (let ((eof (cons nil nil))) …) or any other unique object identity.
[18:53:15] <lisp123_> And would this be most useful when saving to file and reading it back in?
[18:53:36] <pjb> You couldn't read back the same uninterned symbol.
[18:53:57] <ldb> you could write it into a fasl file
[18:54:22] <lisp123_> pjb: thanks I think I get it
[18:54:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:54:33] <pjb> (let ((eof (gensym))) (let ((data (with-output-to-string (out) (prin1 eof out)))) (print data) (let ((obj (with-input-from-string (inp data) (read inp nil eof)))) (list obj (eql eof obj))))) #| "#:g12402"  --> (#:g12402 nil) |#
[18:55:01] <ldb> but can't guarantee that would have same reference between sessions
[18:55:24] *** Joins: cosimone (~user@93-47-231-40.ip115.fastwebnet.it)
[18:55:30] <pjb> ldb: you wouldn't write an eof guard, you would just truncate the file. But you could write another guard object in some data structure, as long as you keep a reference to it, and ensure its identity is not lost by the serialisation/deserialisation.
[18:57:04] <pjb> (let ((empty (gensym)))  (let ((data (list 'foo empty 'bar empty)))   (let ((*print-circle* t))  (prin1-to-string (cons empty data))))) #| --> "(#1=#:g12410 foo #1# bar #1#)" |#
[18:57:20] <pjb> then the empty is serialized here as #1#.
[18:58:24] <lisp123_> Do you mean #1#=#:G12410?
[18:58:54] <pjb> this is only the initial one, to know which ## is empty. There could be other shared references.
[18:59:05] <pjb>  (cons empty data)
[18:59:11] <pjb> The data is just data.
[18:59:50] <lisp123_> Understood
[19:01:39] <lisp123_> And the next one would be with #2# etc (just tested)
[19:01:43] <lisp123_> Thanks pjb
[19:02:27] *** Quits: ldb (~user@user/ldb) (Ping timeout: 265 seconds)
[19:07:22] *** Joins: ldb (~user@user/ldb)
[19:12:40] <jcowan> When I need a unique object, I usually use (copy-seq "End of file object"), which is self-documenting but guaranteed unique, even if the compiler merges identical string literals.
[19:13:53] *** Quits: sander (~sander@user/sander) (Ping timeout: 252 seconds)
[19:15:16] *** Joins: sander (~sander@user/sander)
[19:15:34] <loke[m]> jcowan: Why not #:EOF ?
[19:16:58] <jcowan> Less portable to othter Lisps, not all of which have uninterned symbols.
[19:18:13] <loke[m]> jcowan: What Lisp is similar enough to CL so as to make it worth it?
[19:18:40] <jcowan> You can program in Lisp in any Lisp.
[19:19:00] <jcowan> Only the details differ.  It's not about portability of code but of my brain.
[19:19:04] <loke[m]> Right, but you were talking about compatibility.
[19:19:28] <jcowan> Mental compatibility.  In Scheme it would be spelled with "string-copy".
[19:20:10] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:21:26] <jcowan> This actually isn'tt realistic in Scheme, because Scheme has a distinguished eof-object which you can gett a hold of by calling (eof-object) and can be tested for with (eof-object? obj).
[19:22:18] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[19:22:43] <jcowan> It has the advantage of being of a distinguished type.  So you could in CL declare a struct and call itts constructor once.
[19:28:00] *** Quits: cosimone (~user@93-47-231-40.ip115.fastwebnet.it) (Remote host closed the connection)
[19:34:08] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[19:35:49] *** Joins: shka (~herr@109.231.62.239)
[19:36:02] *** Joins: voltron (~voltrin_@ip5f5993ed.dynamic.kabel-deutschland.de)
[19:40:26] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[19:50:42] *** Quits: voltron (~voltrin_@ip5f5993ed.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[20:10:03] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[20:16:02] *** Joins: lisp123__ (~lisp123@45.130.83.208)
[20:16:11] *** Quits: lisp123__ (~lisp123@45.130.83.208) (Client Quit)
[20:19:47] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[20:22:58] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[20:30:36] *** Joins: lad (~lad@user/lad)
[20:37:32] <phoe> TIL that the reader macro for #\( cannot call READ-DELIMITED-LIST directly but must instead call something that handles the consing dot properly
[20:37:41] <phoe> s/directly//
[20:42:19] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[20:43:10] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Killed (NickServ (GHOST command used by Inline_)))
[20:43:22] *** Inline_ is now known as Inline
[20:43:27] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[20:43:35] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[20:43:46] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[20:49:04] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 272 seconds)
[21:02:40] *** Quits: jgkamat (~jay@user/jay) (Quit: ZNC - https://znc.in)
[21:04:01] *** Joins: voltron (~voltrin_@ip5f5993ed.dynamic.kabel-deutschland.de)
[21:04:56] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[21:08:03] <pjb> jcowan: copy-seq is also suspicious. Try: (cons 'eof nil)  or (list 'eof) as unique tokens.
[21:08:06] *** Joins: Bike (~Bike@71.69.170.70)
[21:08:06] *** ChanServ sets mode: +o Bike
[21:08:23] <jcowan> What makes it suspicious?
[21:09:20] <pjb> I don't remember it in scheme.  It's called copy-sequence in emacs lisp. (if you don't require 'cl)
[21:10:44] <pjb> nothing in r5rs ressembling copy-seq: https://groups.csail.mit.edu/mac/ftpdir/scheme-reports/r5rs-html/r5rs_14.html#SEC88  there's only string-copy.
[21:10:53] <jcowan> String-copy, as I posted above
[21:11:14] <pjb> oh right.
[21:11:24] <pjb> Have a look at (intersection common-lisp emacs-lisp scheme) http://www.informatimago.com/develop/lisp/com/informatimago/small-cl-pgms/intersection-r5rs-common-lisp-emacs-lisp/
[21:14:28] *** Joins: jgkamat (~jay@user/jay)
[21:14:44] *** Joins: pegaso (~reis-r@131.72.121.30)
[21:14:51] *** Joins: dsk (~dsk@user/dsk)
[21:22:18] *** Joins: frgo_ (~frgo@p200300deef181d00a166054f1275918f.dip0.t-ipconnect.de)
[21:23:57] *** Quits: voltron (~voltrin_@ip5f5993ed.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[21:25:41] *** Quits: frgo (~frgo@p200300deef181d00cc23846459d9cafd.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[21:27:32] *** Joins: kpoeck (~kpoeck@87.140.195.0)
[21:28:55] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[21:56:30] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[22:01:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[22:03:48] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 272 seconds)
[22:10:08] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 272 seconds)
[22:12:20] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[22:12:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[22:13:15] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[22:20:43] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[22:40:47] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[22:47:09] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[22:47:28] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[22:53:21] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[22:56:32] *** Joins: zos (~zos@ool-457a8044.dyn.optonline.net)
[23:11:48] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[23:16:37] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Remote host closed the connection)
[23:17:15] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[23:31:08] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[23:35:00] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40) (Ping timeout: 272 seconds)
[23:47:50] *** Quits: kpoeck (~kpoeck@87.140.195.0) (Quit: Client closed)
[23:50:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:56:52] *** Joins: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu)
