[00:08:33] *** Quits: Nselm (~Nselm@p200300d56f4b3f232fdd2f2b08ee3842.dip0.t-ipconnect.de) (Quit: Client closed)
[00:08:56] *** Joins: kevingal (~quassel@37.228.202.92)
[00:11:36] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[00:26:04] * epony can't be bothered with bench markings
[01:18:18] * hayley watches the Coffee Compiler Club meeting video
[01:18:33] *** Parts: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[01:18:50] <hayley> "You could write a compiler in Java, but the GC would have to be C?" O RLY?
[01:18:52] *** Joins: jklsemicolon (~jklsemico@pool-108-45-87-170.washdc.fios.verizon.net)
[01:19:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[01:19:34] *** Quits: jklsemicolon (~jklsemico@pool-108-45-87-170.washdc.fios.verizon.net) (Quit: rcirc on GNU Emacs 27.1)
[01:21:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:21:38] <epony> oh noes
[01:21:56] <epony> all your lisps are s-expressions in c
[01:22:11] * epony collapses on the floor, not.
[01:23:45] *** Joins: jklsemicolon (~jklsemico@pool-108-45-87-170.washdc.fios.verizon.net)
[01:35:32] <hayley> The quality has gone down since I showed up /j
[01:35:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[01:35:59] <epony> /part "not my terroar"
[01:37:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:51:12] *** Parts: jklsemicolon (~jklsemico@pool-108-45-87-170.washdc.fios.verizon.net) (rcirc on GNU Emacs 27.1)
[02:16:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:16:17] *** Quits: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 240 seconds)
[02:17:32] *** Joins: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[02:18:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:47:58] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[02:48:39] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[02:48:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:49:02] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[02:49:06] <moon-child> a-ha!
[02:49:17] <moon-child> we can define shallow copies wrt an equality predicate
[02:49:47] <moon-child> a shallow copy of object X wrt predicate E is an object Y which shares as little structure with X as possible while still maintaining that (E X Y)
[02:49:55] <moon-child> (with the stipulation that the unshared parts are fresh, of course)
[02:50:13] <moon-child> this has some surprising consequences, like that "abc" is a copy of "ABC" wrt EQUALP, but I think it is coherent
[02:54:41] <sm2n> What does "shares as little structure as possible" mean?
[02:54:42] <Alfr> moon-child, what would it do for (E x y) => T ?
[02:54:44] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:55:49] <Alfr> moon-child, and for E being eq ?
[02:56:13] <moon-child> if E is eq, then 'copy' is the identity
[02:56:42] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:56:55] <moon-child> (ignoring shenanigans wrt fixnums and characters.  I don't think you even count on (eq x x) for those, soo technically it is not a real equality predicate)
[02:57:06] <sm2n> so, X is a "copy" of Y if it's in the same equivalence class?
[02:57:19] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Remote host closed the connection)
[02:57:22] <sm2n> s/if/if and only if/
[02:57:43] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[02:57:51] <moon-child> only if, not necessarily if
[02:58:16] <moon-child> sm2n: 'shares as little structure'  let's say, has as few slots as possible which are EQ
[02:58:58] <sm2n> so, if (E X Y) => T, X isn't necessarily a "copy" of Y?
[02:59:09] <moon-child> well, for instance, x should not be considered a copy of x, except under eq/eql
[02:59:37] *** Quits: cosimone (~user@93-44-184-23.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:59:53] <sm2n> I don't understand
[03:00:00] <sm2n> Why not?
[03:00:07] <moon-child> (let ((x (cons 2 3)) (y x)) (equal x y)), but y shares structure with x that it would not need to in order to still be EQUAL to it
[03:00:18] <Alfr> sm2n, it would be under that indiscriminate E.
[03:00:27] <gilberth> It makes sense. Just copy as much as you can.
[03:01:05] <sm2n> I think you mean let*?
[03:01:08] <moon-child> yeah
[03:01:26] <moon-child> (one issue is what happens if you have multiple choices about what to copy.  In that case, I say: your equality predicate sucks)
[03:01:31] <hayley> "The SICL project is slowly forming up" "With focus on slowly? :-)" I'd like to see how quickly this person can invent their own bootstrapping technique and compiler framework, among other things.
[03:02:09] <sm2n> I still don't understand, I think I am missing something fundamental here
[03:03:07] <gilberth> Under EQUAL you may copy a cons as (EQUAL (CONS (CAR x) (CDR x)) x) holds. Under EQL you may not.
[03:03:54] <sm2n> Yes, and why does that matter for the earlier definition?
[03:04:39] <sm2n> oh, I think I see now
[03:04:40] <gilberth> You mean "a shallow copy of ..."?
[03:04:47] <moon-child> sm2n: to 'copy x', you make an object which is not x, but which is like x in some way.  For instance, (let ((x '(1 2 3))) (copy-list x)) returns an object which is not x, but is like x in that it has the same list structure and elements
[03:05:08] <moon-child> what I realised is that you can formalise 'not x' and 'like x' as 'shares as few slots as possible' and a specific equality predicate
[03:05:28] * gilberth nods.
[03:05:46] <sm2n> moon-child: I think what confused me was you saying under EQ "copy" is the identity. Shouldn't it be that under EQ, you have no notion of shallow copy?
[03:06:32] <gilberth> You copy the bits that constitute the pointer :-p
[03:06:36] <moon-child> ^
[03:06:39] <moon-child> I mean, you could say that.  But I see no reason to add a special case
[03:07:36] <moon-child> sm2n: consider: what is the copy wrt EQUAL of a standard object?  It is also the identity.  So clearly it is not incoherent for the copy to be an identity some of the time
[03:07:53] <moon-child> it just happens that, for EQ, the copy is the identity for all cases
[03:08:13] <gilberth> "identity under EQ"
[03:08:33] <sm2n> right, because the identity is defined to be EQ to begin with
[03:08:55] * Alfr still likes the case where is the (constantly t) function.
[03:09:10] <Alfr> s/where/where E/
[03:09:12] * moon-child hands sm2n a number
[03:09:14] <moon-child> Alfr: :D
[03:09:25] <sm2n> it's probably best to not use the word "identity" at all in this context for clarity
[03:09:30] <moon-child> (defun copy (x) (gensym))
[03:09:39] <gilberth> Alfr: That is called fork(2).
[03:10:15] <gilberth> Nah, that is (constantly nil) My bad.
[03:10:27] <Alfr> gilberth, yeah, the other end.
[03:14:59] <Alfr> gilberth, also (constantly nil) isn't an equivalence relation, it's not reflexive.
[03:15:20] <moon-child> neither is EQ! :)
[03:15:49] <Alfr> moon-child, true. But who needs numbers and characters anyway?
[03:16:52] <moon-child> symbols: the _real_ man's weapon
[03:16:57] <moon-child> a more elegant tool for a more civilized age
[03:17:38] <sm2n> (+. '2 '3)
[03:18:08] <gilberth> Yeah, do BCD arithmetic on the symbol name.
[03:18:41] <Alfr> moon-child, are you gifting me stacks of parens?
[03:18:43] * hayley wonders how to get data out of Garry's Mod.
[03:18:55] <gilberth> BTW before characters it was custom to use symbols with a name of length 1 in place of characters. See EXPLODE and IMPLODE.
[03:19:02] <moon-child> sm2n: you mean '|2| '|3|?
[03:19:47] <hayley> I want to log some sensor readings in-game, so that I may train a neural network, and then write a plugin to run the neural network. Probably some way to dump out the data as text...
[03:19:47] <gilberth> Hmm. (setq *read-base* 0) ?
[03:20:42] <hayley> Try that in ccl for a surprise.
[03:21:18] <Alfr> gilberth, I don't think 0 is in 2..36.
[03:21:32] <gilberth> I get an error, when I try type a number.
[03:21:50] <hayley> Hm, I could probably encode my data with log and not lose much information.
[03:21:53] <moon-child> whaaat
[03:22:08] <moon-child> I tried to fix it with (setf *read-base* (+ (*) (* (+ (*)(*)(*)) (+ (*)(*)(*)))
[03:22:14] <moon-child> no dice
[03:22:22] <gilberth> #xa ?
[03:22:33] <moon-child> nope
[03:22:35] * moon-child wonders if read-base affects #n=
[03:23:23] <gilberth> Try (|SETQ| |*READ-BASE*| #xa)
[03:23:26] <moon-child> hmm, I guess the only way you would be able to tell is errors on larger numbers.  Which would be dump to emit
[03:24:00] <moon-child> *dumb
[03:24:02] <moon-child> ah, that works!
[03:26:36] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[03:47:51] *** Quits: kevingal (~quassel@37.228.202.92) (Remote host closed the connection)
[04:02:08] <gilberth> Oh dear. As I said: Polygon clipping is not trivial. For my example I need 5ms and cons 480k octets. You find a ton of papers about how to get away without rationals. But then I also don't have optimal data structures yet. Somewhere I have a version which works a little different being tuned for polygon clipping as Bentley-Ottmann is for finding intersections of a bunch a lines not taking into account that they are all connected.
[04:04:35] <gilberth> It's also the output stage of the algorithm, I first threat the input polygons as a bunch of segments only to later recognize that two parts I collect share segments.
[04:25:44] *** Joins: dre (~dre@2001:8003:c932:c301:65d5:9857:1e2b:4377)
[04:26:45] *** Quits: dre (~dre@2001:8003:c932:c301:65d5:9857:1e2b:4377) (Client Quit)
[04:33:39] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[04:45:52] <gilberth> Ok. Cairo itself also needs like 300us. So that isn't a lost cause. OTOH I would consider 300us for a single line still being a lot. And further, given that we have idle cores, can't we build a pipeline?
[04:47:17] <hayley> "A parallel interpreter probably would not achieve speedup over serial compiled code, even with the many cores that we get today." "That is my thought too; but it may depend on the task."
[04:47:28] <hayley> I wouldn't hold my breath. Unless anyone has any ideas somehow?
[04:48:05] <moon-child> interpretation was good enough for erlang until, like, last year
[04:48:22] <hayley> I don't think anyone expects Erlang to be fast.
[05:02:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:07:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[05:23:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Read error: Connection reset by peer)
[05:27:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:51:32] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[05:54:03] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[06:15:51] <hayley> Hm, I swear I saw Gil Tene saying something like "our LLVM-backed JIT can do the read barrier on however many pointer loads at once with AVX-512".
[06:20:44] <hayley> Here: https://twitter.com/giltene/status/1345795304088457216 Finally a use for AVX-512
[06:26:27] <moon-child> there is already gather in avx2
[06:30:08] <hayley> Yeah, AIUI it's rather loading a vector of pointers from somewhere, and then doing the pointer colour test vectorised.
[06:32:10] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[06:33:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:35:27] <hayley> Is AVX2 gather any faster than scalar loads and packing the vector yourself?
[06:36:33] <moon-child> gpr<->simd regs is not too fast
[06:36:45] <hayley> But the effects of vectorisation on GC barriers are interesting.
[06:40:16] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[06:41:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:42:34] *** Quits: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 260 seconds)
[06:42:59] *** Joins: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[06:46:37] *** Joins: ln43 (~ln43@user/ln43)
[06:53:42] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[06:55:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:02:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:02:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:04:47] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:06:54] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[07:07:57] <White_Flame> gilberth: if I were to work on such things, I'd go for full geometric correctness with complete disregard for speed :)
[07:11:11] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:13:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:25:21] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[07:58:08] <gilberth> White_Flame: I could be way more speedy, if I wish. The sweep-line algorithm also could do with edges that are not lines, but monotone curves. I ponder, if that wouldn't be more suitable for round cap and joint shapes.
[07:58:51] <gilberth> And when I could have an arc in my "polygon" that would reduce the number of vertexes by a large margin alone.
[08:02:08] <gilberth> On the note of correctnes, I count 191 instances of "XXX" in the Cairo sources.
[08:02:28] <gilberth> Often concerned about overflow :-p
[08:06:01] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[08:13:15] *** Joins: semz_ (~semz@user/semz)
[08:15:12] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:15:54] *** Quits: semz (~semz@user/semz) (Ping timeout: 260 seconds)
[08:17:10] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:19:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:20:10] *** semz_ is now known as semz
[08:24:43] * hayley wonders what to do next.
[08:25:38] <dave0> hayley: you could take a 5 minute break
[08:25:42] <hayley> I've ruined regular expressions, failed at parallel GC, and I can't be bothered to make the APL to Garry's Mod script compiler for that self driving car.
[08:26:11] <hayley> Well, for the next week.
[08:26:32] <hayley> There is also the question of specifying how inheritance works in that virtual machine, but I can't work out the algorithm I want to write.
[08:29:33] *** Joins: notzmv (~zmv@user/notzmv)
[08:38:12] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[08:40:20] <masinter> mrd\\
[08:40:33] <masinter> sorry
[08:49:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:51:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:22:19] <hayley> https://scalpcoin.xyz/
[09:22:20] -ixelp- Scalpcoin
[09:31:44] <hayley> "The BEAM's execution model (pre-emptive concurrency rather than cooperative) is what gives it the impressive resilience under high load, but it's also what makes it so poor at going the absolute fastest your hardware can manage when you're looking at the level of individual tasks. Every body of userland code other than NIFs are interrupted periodically and forced to yield execution to other Elixir processes for a time before they can continue."
[09:31:50] <hayley> Let's not tell this person about preemptive OSes.
[09:42:17] <mfiano> math wizards, a friend of mine contributed a color space conversion routine, and it is giving incorrect results for some inputs. Would anyone be willing to cross-check the equation with the code to see if they can spot the error? I've been bug-eyed for an hour :/
[09:52:31] * gilberth for he being bad at math hides.
[09:52:54] <mfiano> I think everyone is :)
[09:53:00] <mfiano> well, hiding at least.
[09:53:30] <gilberth> Well, how do you know if your code is correct or not? And what conversion is that?
[09:54:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:54:18] * moon-child pokes his head out
[09:54:22] <mfiano> I know because the equation is from a very reputable source with a calculator in JavaScript right on the page
[09:54:28] <moon-child> don't know jack about math, but I'll take a look
[09:54:29] <mfiano> My code does not match the calculator
[09:54:33] <mfiano> Oh thanks...
[09:54:38] <mfiano> equation: http://www.brucelindbloom.com/index.html?Eqn_XYZ_to_Luv.html
[09:54:39] -ixelp- Welcome to Bruce Lindbloom's Web Site
[09:54:47] <mfiano> code: https://gist.github.com/mfiano/3a4a325746256984c1e3e8b8494e4212#file-luv-lisp-L57
[09:54:48] -ixelp- luv.lisp · GitHub
[09:54:53] <gilberth> moon-child: Your math is better than mine.
[09:55:01] <mfiano> calculator: http://www.brucelindbloom.com/index.html?ColorCalculator.html
[09:55:02] -ixelp- Welcome to Bruce Lindbloom's Web Site
[09:55:13] <mfiano> type in 0.1, 0.2, 0.3 for the XYZ row, and click the XYZ button
[09:55:25] <mfiano> The values in the Luv row are what we are interested in
[09:55:25] <kakuhen> what is the recommend json library for CL
[09:55:29] <moon-child> gilberth: I am sceptical of that
[09:55:39] <kakuhen> i need to be able to not only parse json but also map between json objects and clos objects
[09:55:40] <moon-child> gilberth: I have picked up a couple of things that you may not have, but I am not at all well-roudnded
[09:55:46] <moon-child> kakuhen: phoe has strong opinions, I think
[09:55:53] <mfiano> kakuhen: none, see https://sabracrolleton.github.io/json-review
[09:55:54] -ixelp- Review of CL Json Libraries UPDATED 19 Jan 2022
[09:56:02] <kakuhen> yeah so im communicating with a server that will take in json and spit back json
[09:56:09] <kakuhen> and i want to be able to send/recv json messages
[09:57:05] <mfiano> moon-child: if you get the results from that calculator for the Luv row, compare it to the above code and I get:
[09:57:07] <mfiano> #<COLOR (model: MFIANO.GRAPHICS.TOOLS.IMAGE.COLOR:LUV, space: MFIANO.GRAPHICS.TOOLS.IMAGE.COLOR:LUV)
[09:57:09] <mfiano>   L: 51.83721
[09:57:11] <mfiano>   U: -74.48189
[09:57:13] <mfiano>   V: -15.960406>
[09:57:22] <mfiano> The L seems correct anyway...
[09:57:29] <kakuhen> hmm based on the quick summary, yason seems to do what i want and support unicode, so i guess i'll stick with it
[09:57:29] <gilberth> mfiano: Ok. I'll have a look.
[09:58:40] <moon-child> mfiano: test-case?
[09:58:43] <mfiano> I did not write the above code, but I haven't been able to eyeball anything wrong with it yet
[09:58:53] <mfiano> moon-child: The test case is what I just provided
[09:58:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[09:59:34] <moon-child> oh, I see
[09:59:38] <mfiano> Use the calculator by the color expert the equation was written by.
[10:00:02] <mfiano> This guy is cited in nearly every paper. He knows his stuff
[10:00:41] <gilberth> What is the illumninant, where does it come from, and have you checked with the formulae given?
[10:01:40] <mfiano> gilberth: !
[10:02:07] <mfiano> I can't believe I was that dumb. The calculator needs to be switched to Ref. White: E
[10:02:24] <mfiano> XYZ's standard illuminant is E, and the calculator defaults to D50
[10:03:07] <gilberth> So the white point was wrong?
[10:03:33] <mfiano> Nothing was wrong with the code. The inputs to the calculator were wrong.
[10:03:43] <mfiano> Thanks for the slap
[10:03:55] <gilberth> I didn't do anything.
[10:10:47] <mfiano> You asked the right question
[10:11:15] <mfiano> I guess it was a common sense problem and not a math problem. I should take a break from staring at code once in a while.
[10:11:55] <gilberth> As we say here, at times you don't see the forest because of all the trees.
[10:16:16] <moon-child> we say that here too
[10:16:36] <moon-child> (or, rather, similar: 'don't see the forest for the trees' or 'miss the forest for the trees')
[10:17:17] <gilberth> Never heard that in English. (I already used the fancy 'for' for 'because', I didn't want to inflate the use. :-)
[10:22:08] <masinter> not an apt metaphor in this case
[10:22:34] <masinter> it was a detail that was wrong
[10:23:15] <masinter> "Can't see the leaf on a branch for the forest"
[10:24:30] <gilberth> Doesn't fit either. mfiano was not missing a flipped sign or sth, but a parameter to the calculator. I'd say that is less detail than looking for typos.
[10:25:52] <gilberth> Anyhow, this kind of things happen to me often. Missing the obvious. Taking a break or better yet doing something mundane like chores, helps.
[10:26:02] <masinter> cant see the tree for the forest, then
[10:27:09] <gilberth> The sun for all the leaves? As the sun sets the white point.
[10:30:22] <masinter> cant see the text on a high-res monitor for the font size
[10:30:43] <moon-child> masinter: those who live glass houses should not throw stones
[10:30:47] <moon-child> nor masturbate in the daytime
[10:32:05] <gilberth> Hmm, when you have lights on at night?
[10:32:58] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[11:19:11] <kakuhen> dumb question but uh
[11:19:19] <kakuhen> say I have package foo and foo/bar
[11:19:49] <kakuhen> when i am in package foo, and I want to access an exported symbol like foo/bar:baz, how do i set up asdf so that I can simply call bar:baz in the package foo? or is that not possible?
[11:20:16] <moon-child> package-local nicknames?
[11:20:54] <moon-child> (defpackage foo ... (:local-nicknames (#:bar #:foo/bar)))
[11:21:19] <kakuhen> ah there we go; i swore it was possible but it's seen so long ive used this stuff that i forgot the names
[11:21:21] <kakuhen> thank you so much
[11:26:05] <mfiano> Does anyone know the behavior of JS when taking raising a negative float to a floating point power?
[11:26:17] <mfiano> I'm guessing it doesn't have complex numbers, but what does it do?
[11:26:22] <ck_> ?
[11:26:30] <ck_> you mean raise it to a fraction
[11:26:34] <hayley> Random guess: NaN
[11:26:59] <mfiano> Yeah, like the equivalent of this is what is JS? (expt -0.234 (/ 2.2))
[11:27:20] <ck_> "Math.pow(-0.234, 1/2.2)"
[11:27:28] <ck_> look for yourself, you have all these browsers available
[11:27:37] <mfiano> I find that hard to believe unless this calculator is special casing that. I am definitely getting a floating point return value
[11:27:40] <kakuhen> i loev chormium
[11:31:36] <moon-child> mfiano: for me, that produces nan
[11:31:41] <ck_> mfiano: special casing what exactly?
[11:31:49] <mfiano> Yeah, then can you explain what is going on here...
[11:32:03] <ck_> where would negative values come into play with a color space?
[11:32:07] <mfiano> http://www.brucelindbloom.com/index.html?ColorCalculator.html
[11:32:08] -ixelp- Welcome to Bruce Lindbloom's Web Site
[11:32:13] <mfiano> For the XYZ row, type in:
[11:32:26] <mfiano> 0.3, 0.5, 0.9, then click the XYZ button
[11:32:39] <mfiano> How does it come up with that negative value for the RGB row?
[11:33:17] <moon-child> ¯\_(ツ)_/¯
[11:33:23] <mfiano> The input should be about -0.24 multiplied by 12.92...
[11:33:28] <moon-child> read http://www.brucelindbloom.com/javascript/ColorConv.js ?
[11:33:33] <mfiano> I did
[11:36:10] <gilberth> What would be so strange about negative RGB values?
[11:37:37] <ck_> here are these photons I accidentally received from you back, sir. sorry for the trouble.
[11:37:57] <mfiano> Nothing is strange. I get much more negative values
[11:39:33] <gilberth> Are you calculating gamma corrupted RGB values?
[11:40:51] <hayley> https://www.reddit.com/r/disneyvacation/comments/sqvq4h/how_to_know_if_youve_been_catfished_by_a_furry/
[11:40:53] -ixelp- How to know if you’ve been Catfished by a Furry : disneyvacation
[11:41:17] <mfiano> The JS does: companded = (linear <= 0.0031308) ? (linear * 12.92) : (1.055 * Math.pow(linear, 1.0 / 2.4) - 0.055);
[11:41:30] <ck_> "if the fish has fur, it's no fish. thanks for coming to my ted talk"
[11:41:53] <mfiano> and the values are this, along with my result: https://gist.github.com/mfiano/d9082d409350e73e81595e989485fde3
[11:41:54] -ixelp- *sly-mrepl for sbcl*.txt · GitHub
[11:41:55] <gilberth> That's sRGB, isn't it?
[11:42:17] <mfiano> Yes
[11:42:39] <gilberth> Anyhow IIRC values outside [0,1] are not defined for sRGB, are they?
[11:42:53] <mfiano> The algorithm is correct until it hits the grafted segment
[11:42:59] <mfiano> Mine that is
[11:43:32] <gilberth> With grafted the mean the linear part below 0.00313?
[11:43:37] <mfiano> Yes
[11:43:39] <mfiano> Well, the calculator produces a different result, and I'm trying to figure out why
[11:44:10] <gilberth> Do the linear RGB results match?
[11:44:14] <mfiano> Yes
[11:44:57] <gilberth> Ah, and you get sth different from 12.92*L?
[11:45:40] <mfiano> I don't know anymore. I'm going insane.
[11:46:12] <gilberth> Have you taken your break?
[11:46:51] * hayley put on One More Red Nightmare on a jukebox outside #lispcafe and someone found it to be jumbled noise.
[11:47:05] <mfiano> gilberth: I have!
[11:47:20] <mfiano> gilberth: I added a comment to the gist with the JS version: https://gist.github.com/mfiano/d9082d409350e73e81595e989485fde3
[11:47:20] -ixelp- *sly-mrepl for sbcl*.txt · GitHub
[11:47:39] <mfiano> It seems like a lot more code, branching on negative, than mine...unlike his equation
[11:47:40] <gilberth> mfiano: Then, ask for a refund, your break must have been defect.
[11:47:58] <mfiano> http://www.brucelindbloom.com/index.html?Eqn_XYZ_to_RGB.html
[11:47:59] -ixelp- Welcome to Bruce Lindbloom's Web Site
[11:48:02] <hayley> Kinda funny, because most electronic music I've heard just sounds like aimless noise. idk, I sound like a boomer, but it comes off totally meaningless.
[11:48:34] <ck_> have you looked at the actual inverted matrix already
[11:48:46] <mfiano> See sRGB Companding
[11:48:55] <mfiano> Yes
[11:49:28] *** Joins: cosimone (~user@93-34-133-235.ip49.fastwebnet.it)
[11:49:45] <gilberth> I still believe sRGB isn't defined outside [0,1] anyway.
[11:49:52] <mfiano> The inverted matrix is a constant given on another page of his, and it matches mine. Like I said, it works until it hits the small linear segment at the bottom
[11:50:35] <mfiano> gilberth: No it is not, but I still need to detect out of gamut conditions, with the _correct_ deviation.
[11:52:14] <gilberth> Now, what is wrong? The calculator or your code? You said the linear R, G, B components agree. Can't be too hard to multiply by 12.92 when below 0.003something.
[11:52:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[11:52:49] <mfiano> The calculators code is doing much more than the equation
[11:52:54] <mfiano> I translated the equation
[11:53:00] <mfiano> And since I have a hard time reading JS...
[11:53:23] <ck_> that line is doing what sRGB Companding describes, I can tell you that
[11:53:32] <gilberth> Well, have you looked at the sRGB spec?
[11:53:34] <mfiano> Which "line"?
[11:53:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:54:18] <ck_> "this" ""''line''"" companded = (linear <= 0.0031308) ? (linear * 12.92) : (1.055 * Math.pow(linear, 1.0 / 2.4) - 0.055);
[11:54:31] <mfiano> ck_: That is a subset of the full function: See gist: https://gist.github.com/mfiano/d9082d409350e73e81595e989485fde3
[11:54:31] -ixelp- *sly-mrepl for sbcl*.txt · GitHub
[11:54:46] <ck_> Yes, I am aware of that
[11:55:04] <mfiano> I'm not sure what they are doing with sign, etc
[11:55:14] <mfiano> I don't see that in the equation
[11:55:31] <ck_> well, I suggest you step through the js code
[11:56:06] <ck_> a browser's debugging facilities are much better than they used to be today. it can't hurt your understanding to do that
[11:56:51] <mfiano> I don't know how to do that. I get lost in a browser's inspector.
[11:57:39] <ck_> nothing I can say except "ok"
[11:58:08] <mfiano> :shrug: I guess i'm old
[11:59:25] <ck_> how old?
[12:00:16] <gilberth> I don't understand the calculator. I type "0.001" to R and say it's L*, click RGB, switch to sRGB click XYZ again to get sRGB and get R=0.0014 which is not 12.92 * 0.001.
[12:01:24] <gilberth> Or is L* /= linear?
[12:01:29] <mfiano> I went to school for web development 20 years ago and gave up when I saw what it was becoming shortly thereafter
[12:01:54] <mfiano> That's a good enough answer to "how old"
[12:01:59] <gilberth> No, gamma=1.0 seems to be linear.
[12:03:31] <gilberth> That seems to work. /me shrugs and wonders what L* is.
[12:03:48] <mfiano> L* is used only for a handful of RGB color spaces, not sRGB
[12:04:21] <gilberth> So, is gamma=1.0 then linear? If so, I see the 12.92 applied fine.
[12:04:22] <ck_> mfiano: here's my last contribution to this scintillating conversation then. https://imgur.com/a/7382VpB
[12:04:22] -ixelp- the magical world of de buggers - Album on Imgur
[12:06:27] <mfiano> I guess I need to learn how to do that ^
[12:12:56] * mfiano looks up what watch expressions and breakpoints are
[12:12:56] <ck_> okay, what browser are you using?
[12:13:02] <mfiano> Firefox
[12:13:49] <ck_> if you press F12, select the "debugger" tab, and navigate to "colorConv.js", you should see the source code
[12:13:58] <mfiano> Yes I got that far
[12:14:03] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[12:14:17] <ck_> then if you click on the "210" on line 210 it should create one breakpoint on line 210
[12:14:52] <mfiano> ok
[12:15:20] <ck_> then if you fill in your values and click the button the execution should go on to be interrupted for the code on line 210
[12:15:24] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[12:16:20] <mfiano> yes it says paused
[12:16:22] <ck_> now you could click the "step in" button on the upper right to advance to the XYZ2RGB function, and then you can "step over" the following line
[12:16:28] <ck_> lines*
[12:17:08] <ck_> and the local variables' values should be shown on screen like in my screenshot by default, no need to configure anything
[12:17:38] <mfiano> the locals dont seem to be annotated...hm
[12:18:04] <ck_> you should be able to inspect them anyway, try the context menu. or enter the names in the local console on the bottom
[12:18:08] <ck_> I'm using firefox version ..
[12:18:22] <ck_> 96.0b6 (64-bit)
[12:19:17] <mfiano> After I click step over, it jumps back to 211
[12:19:24] <mfiano> is that correct?
[12:20:06] <ck_> if you're talking about line 881 for example, that's not what happens with my browser, no
[12:20:45] <ck_> maybe you triggered "step out" by mistake?
[12:21:04] <mfiano> I set a break point for 210, enter my values and click the XYZ button, the debugger says "Paused while stepping", I click "Step in" and it jumps to 881.
[12:21:19] <ck_> ok, so far so good
[12:21:21] <mfiano> I see no locals up to that point. But then you said to click Step out
[12:21:25] <mfiano> and that goes to 211
[12:21:32] <ck_> no, step in is what I said
[12:22:17] <mfiano> Oh you said "Step over"
[12:22:22] <mfiano> I just read it wrong
[12:22:48] <ck_> "step in" to the XYZ2RGB function, then step over the next lines, yes
[12:23:23] <mfiano> Ok is there a way to automatically step over all lines in a range, or in a function, without clicking manually a bunch of times?
[12:23:41] <ck_> set breakpoints, and use "continue execution"
[12:23:57] <ck_> or "resume" firefox calls it
[12:24:01] <mfiano> Ok great. Thanks for the tutorial. THat should get me going somewhere.
[12:24:20] <mfiano> I'm sorry for being so dense. Web tech is so foreign to me.
[12:24:30] <mfiano> Actually anything but CL is :)
[12:25:01] <ck_> I used to be like that too, but learning a little bit about it is really helpful, it's everywhere
[12:25:44] <ck_> the facilities for debugging have really improved a lot in the last 20 years, I find this experience to be almost pleasant now. It's not too different from a slime debugger for these simple tasks
[12:26:14] <ck_> and I was serious when I asked about your age, don't need an exact figure, but what's your closest decade? 40? 50? 60?
[12:27:01] <moon-child> ck_: I tried a browser debugger recently, and had a very poor experience
[12:27:07] <moon-child> gdb is better
[12:27:37] <mfiano> 40
[12:27:38] <ck_> I'm not saying its rainbows and butterflies. but it used to be much much worse
[12:28:16] <ck_> mfiano: then we're "the same age". I learned this in the last few years. you can do it.
[12:29:08] <mfiano> Hmm your browser is better
[12:29:15] <moon-child> just saying, if it can't do better than gdb, it's hardly praiseworthy
[12:29:19] <moon-child> granted I know gdb better
[12:29:29] <moon-child> but as I recall it was also behaving unpredictably
[12:29:41] <mfiano> ck_: What browser is that in the screenshot?
[12:29:56] <ck_> that's chrome in the screenshot
[12:29:59] <mfiano> ck_: Interesting, I don't get the LHS values like you do here: https://i.lisp.cl/nqgORd.png
[12:31:16] <ck_> what are X, Y, and Z? I used 0.3, 0.5, 0.9 like I think you posted earlier
[12:31:33] <mfiano> I did as well
[12:33:10] <ck_> with ffox, I get the lhs values too https://imgur.com/a/oZLMUjq
[12:33:10] -ixelp- ffox debugger - Album on Imgur
[12:33:46] <mfiano> Try for 899-901
[12:34:07] <mfiano> That was what I screenshotted to diff with yours
[12:34:40] <gilberth> There must be an abs(x) somewhere.
[12:34:49] * moon-child still wants a debugger which will associate a runtime value (or runtime values) with every parse element
[12:35:01] <ck_> right, mfiano, the left-hand side doesn't show up for those lines in ffox
[12:35:37] <mfiano> Even in chrome they are the previous values and not the mutated ones anyway, so not like it matters
[12:36:43] <gilberth> I get [gamma=1.0] R -0.24155 and sRGB R -0.533, that is not in the linear part. So I guess the linear part of the transfer function is chosen on the absolute value.
[12:37:04] <mfiano> ...
[12:38:08] <gilberth> It's perhaps R = signum(R') * (|R'| < 0.003whatever ? 12.29 |R'| : expt (|R'|...)).
[12:38:30] *** Joins: treflip (~user@user/treflip)
[12:39:40] <gilberth> This also would get around exponentiation of negative numbers. /me shrugs.
[12:40:56] <mfiano> gilberth: This is how I translated the equation for sRGB compansion: https://gist.github.com/mfiano/836ade1f60bc1b02909a0a48dad22de2
[12:40:57] -ixelp- rgb.lisp · GitHub
[12:42:44] <gilberth> It says to right in the Compand function.
[12:43:28] <gilberth> And where is the sign part? You need to copy the (gamma < 0.0) branch.
[12:44:31] <mfiano> That is another defmethod.
[12:44:41] <mfiano> He encoded all 3 compansions into the same function
[12:45:02] <mfiano> I translated the equation, not the code
[12:45:23] <hayley> Hm. Apparently I can use tools in GitHub to find security vulnerabilities, but none support Common Lisp code. So CL code has no security bugs?
[12:46:50] <semz> So that's what the parentheses are for. Can't get hacked when the hackers don't want to learn your language.
[12:46:54] * semz taps head
[12:48:13] <gilberth> mfiano: It's not even defined what should happen for values < 0, so why bother?
[12:49:03] <gilberth> The calculator thinks that being symmetric here around zero would be nice. Somehow.
[12:49:06] <mfiano> Sure it is
[12:49:30] <gilberth> sRGB is defined outside [0,1]?
[12:50:28] <hayley> One of the tools detects fuzz testing, but it won't detect my dear REGRIND, just boring stuff blike AFL.
[12:50:35] <mfiano> No, these functions are for _any_ RGB space
[12:50:43] <mfiano> There is much more than sRGB
[12:50:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:51:16] <mfiano> It is only undefined when the base is negative and power is not integral
[12:51:28] <gilberth> Even if it is, my copy of the sRGB said nothing of applying signum(x) * compand(x).
[12:51:31] <mfiano> That's the only way you can get NaN because JS doesn't have a complex type
[12:51:53] <gilberth> It says, if x <= 0.003something return 12.92 * x. Nothing more.
[12:52:12] <mfiano> That's because that function is avoiding complex numbers for other RGB spaces, and then correcting for it at the end
[12:52:56] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:53:03] <gilberth> No, it's a linear part for other reason.
[12:53:15] <mfiano> I don't understand you.
[12:53:57] <mfiano> This function is written very generically to deal with many RGB color spaces which could be using any of 3 different transfer functions.
[12:54:13] <mfiano> And as such, has to avoid complex intermediary values
[12:54:50] <hayley> http://cs.brown.edu/research/plt/LispM/Campaign/
[12:54:51] -ixelp- Lisp Machine in '96!
[12:55:05] <gilberth> I am talking about sRGB only. The linear part there is for resolution reasons.
[12:56:04] <mfiano> It's not for resolution reasons. It's for perception reasons to avoid posterization.
[12:56:31] <mfiano> Dark values are much more easily discernable than light values.
[12:56:57] <mfiano> Leading to posterization, aka banding. in darker areas.
[12:57:08] <hayley> gilberth: When are you going to publish on Mealy machines?
[12:57:13] <gilberth> Which is the same. Any the sRGB spec I have doesn't talk about |r| <= 0.00304, but about r <= 0.00304.
[12:57:31] <gilberth> * And
[12:57:36] <gilberth> hayley: When I'm done.
[12:57:58] *** Joins: Alfr (~Alfr@user/alfr)
[12:58:04] * hayley contemplates writing up a presentation, perhaps for the Online Lisp Meeting, but notes she didn't make everything she'd present for the first time.
[12:58:49] * moon-child idly wonders why no one does e.g. 2.30 fixedpoint (or even 0.32) (or with a signbit maybe)
[12:59:58] <moon-child> https://twitter.com/rianflo/status/1072922367741976576  hmm
[13:00:47] <hayley> (Tangetically related: someone asked "That benchmark site says 'If they are manually vectorized SIMD, does the host language matter'; OMRN has SIMD analysis, so where do you draw the line?" Well, it's a compiler, even if it is merely a library, and so 1. the programmer is not manually vectorising and 2. if you are going to grep stuff and you don't abuse prefixes, shame on you. No?)
[13:02:00] <moon-child> it is literally impossible to manually simd-optimize apl
[13:02:10] <moon-child> it is also literally impossible to write apl which does not use simd
[13:02:25] <moon-child> (ok, if you try hard enough and put everything in boxes, but ...)
[13:07:00] <hayley> .oO(Isn't GitHub sucking at analysis of stuff that isn't C, Go, Ruby, or Python like reverse security theatre - it actively makes your project look worse, while barely doing anything?)
[13:08:39] <hayley> 1 + 1 NB look ma no SIMD
[13:08:44] <hayley> :^)
[13:15:06] <mfiano> ck_: How do I modify the JS source in the debugger?
[13:15:21] <mfiano> It seems to be immutable currently
[13:24:53] <mfiano> Oh looks like you can't and you have to overwrite the function in the console. Lame...then I can't step through it.
[13:27:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[13:28:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:28:45] <mfiano> I must say I'm not impressed with firefox debugging capabilities.
[13:28:53] <mfiano> I'll take SLY anyday
[13:39:29] <ck_> ok
[13:39:44] <selwyn> good morning everyone
[13:39:44] <mfiano> Ok i finally figured out the error
[13:39:52] <mfiano> It's that signum stuff it's doing
[13:39:58] <mfiano> It changes the result
[13:40:28] <mfiano> Oddly, I don't see this in the equation
[13:40:38] <mfiano> Or in any other resource
[13:41:44] <mfiano> My code behaves as if 965-969 isn't there, just like all equations
[13:41:49] <mfiano> I wonder why it's there then
[13:42:41] * mfiano raises fist at lack of comments
[13:47:48] <mfiano> It looks like their code is actually wrong!
[13:48:21] <mfiano> By trying to avoid complex numbers, they are jumping out of the path that would be hit for the small line segment part of the curve!
[13:48:37] <selwyn> why would you avoid complex numbers
[13:48:57] <moon-child> javascript
[13:50:09] <mfiano> They are only hitting the line segment part when (<= 0 x 0.003) when it should be (<= x 0.003)
[13:50:42] <mfiano> What a disaster (not like it matters, the result is negative in either case, which is out of gamut, but still very wrong)
[13:51:30] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Remote host closed the connection)
[14:04:47] <gilberth> mfinao: Look at the JS code. It does the companding on |x|.
[14:06:18] <gilberth> It says { var sign = 1; if (linear < 0 ) { linear = -linear; sign = -1; } ...; compand *= sign; }
[14:06:20] <mfiano> I know.
[14:06:54] <selwyn> is source a good game engine?
[14:13:01] <moon-child> good for what?
[14:13:54] <hayley> selwyn: https://www.youtube.com/watch?v=jFYi1ugN1f8
[14:13:54] -ixelp- Source makes me Cry - YouTube
[14:22:57] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[14:22:58] <selwyn> hayley: lol
[14:23:26] <hayley> Repeat after me: I am not smarter than Robert Strandhed at the beach, I am not smarter than Jimmy Neutron with regular type expressions, I am not smarter than SBCL src/compiler/control.lisp, I am not smarter than objtool -d, but if I stand back and listen, I'll be smarter than I was
[14:30:51] <mfiano> Well I didn't get any code done today, but I understand a lot more.
[14:31:04] <mfiano> This project is moving at a snail's pace.
[14:31:27] <mfiano> Luckily I have other people working on it with me :)
[14:31:54] <mfiano> Sleepy time
[14:32:12] <moon-child> night
[14:32:49] <hayley> I'm half a year late, as always, but I finally got around to writing https://twitter.com/nodefunallowed/status/1492816439220137985
[14:33:55] * hayley is a compiler writer, for loops are scary to her
[14:34:06] <moon-child> ⎕io delenda est!
[14:34:57] <hayley> Yeah, I forgot APL starts at 1.
[14:36:08] <hayley> ...by default due to ⎕io
[14:36:31] <hayley> Arrays in Smalltalk start at 1, but they fixed that in Self.
[14:39:27] <moon-child> ._.
[14:40:00] <hayley> +/3×⍳4 and ×/2×⍳4 then. (Amusingly the example of a summation does useless work as 0 is the identity of +, which I also "fixed".)
[14:41:58] <hayley> "Or in J: +/3*i.5 and */2*1+i.4" Someone also beat me to it half a year ago.
[14:43:56] <hayley> But the joke about flow analysis is surely new. GVN is all fine until someone makes a damn loop, and you have to merge pools, and lose information there.
[14:46:29] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[14:54:08] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:20:22] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[15:21:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:34:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:36:05] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:19:43] *** Quits: cosimone (~user@93-34-133-235.ip49.fastwebnet.it) (Remote host closed the connection)
[16:22:14] *** Joins: cosimone (~user@93-34-133-235.ip49.fastwebnet.it)
[16:31:52] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[16:33:46] *** Joins: aeth (~aeth@user/aeth)
[16:38:54] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Quit: Leaving)
[16:59:57] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Quit: leaving)
[17:00:32] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[17:09:21] *** Joins: prite (~pritam@user/pritambaral)
[17:10:03] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:20:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[17:31:47] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:38:58] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[17:56:01] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[18:34:52] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[18:51:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[18:52:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:13:13] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[19:16:46] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[19:21:08] *** Joins: treflip (~user@user/treflip)
[19:26:30] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[19:29:49] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[19:34:12] *** Joins: shka (~herr@109.231.0.226)
[19:45:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[19:46:42] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:47:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:54:32] <shka> https://www.youtube.com/watch?v=GR3rUlDiMxY
[19:54:33] -ixelp- Married Couple Steals $4.5 Billion in Bitcoin Heist [Bitfinex] - YouTube
[20:10:26] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[20:12:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:50:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[20:52:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:53:43] *** Quits: cosimone (~user@93-34-133-235.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[21:01:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[21:02:06] *** Joins: cosimone (~user@93-34-133-235.ip49.fastwebnet.it)
[21:04:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[21:06:44] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:18:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[21:19:12] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[21:20:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:21:36] <selwyn> importance of money laundering
[21:21:50] <selwyn> if you steal that much you might not be able to use it
[21:23:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:30:08] * edgar-rft sells you washing powder for money loundering
[21:36:09] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[22:00:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:02:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:03:41] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[22:05:31] *** Joins: aeth (~aeth@user/aeth)
[22:10:45] <ck_> tell me the brand name
[22:11:08] <ck_> "simple green laundry" ?
[22:15:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:16:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:17:17] <ck_> https://www.youtube.com/watch?v=RCbNZMxKQaI
[22:17:18] -ixelp- Bitconnect, but everytime he lies it gets 100% faster - YouTube
[22:30:10] *** Joins: jeosol (~jeosol@user/jeosol)
[22:39:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:08:51] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[23:10:51] *** Joins: aeth (~aeth@user/aeth)
[23:21:08] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[23:30:35] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[23:52:59] *** Quits: aeth (~aeth@user/aeth) (Quit: Reconnecting)
[23:53:12] *** Joins: aeth (~aeth@user/aeth)
[23:53:42] <mfiano> ck_: THanks for your help again. I verified that the JavaScript is very wrong, and pushes what should be a very negative value to almost positive, due to it trying to avoid complex numbers incorrectly. My code is a direct translation of the equation and compares to other calculators I found online.
