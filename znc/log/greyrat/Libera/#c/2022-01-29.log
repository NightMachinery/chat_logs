[00:01:18] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[00:04:59] *** Joins: crashrep (~crashrep@user/crashrep)
[00:04:59] *** Hexmind_ is now known as Hexmind
[00:05:16] *** Joins: cousteau (~cousteau@user/cousteau)
[00:05:41] *** Joins: piku (~piku@47.202.113.8)
[00:11:56] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[00:12:37] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[00:13:27] *** lukedashjr is now known as luke-jr
[00:14:16] *** Joins: lightningwright (~lightning@user/lightningwright)
[00:17:03] <pragma-> no-n: hook this up to /dev/dice-o-matic: http://gamesbyemail.com/news/diceomatic
[00:17:04] <candide> Title of pragma-'s link: Dice-O-Matic hopper and elevator - GamesByEmail
[00:17:51] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.4)
[00:19:03] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 276 seconds)
[00:21:38] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[00:25:20] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[00:26:44] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:7c68:228:b173:b6f7)
[00:26:57] *** Joins: jx0 (~jx0@199.229.250.133)
[00:27:10] *** Quits: constxd_ (~brad@142.167.170.88) (Ping timeout: 256 seconds)
[00:31:18] *** Quits: joomla5 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:32:03] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 276 seconds)
[00:33:04] *** Quits: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6) (Quit: Disconnected)
[00:34:27] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[00:34:53] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[00:35:31] *** Joins: bnchs__ (~bnchs@41.251.61.78)
[00:35:56] *** Joins: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6)
[00:36:13] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[00:36:15] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[00:36:50] <bnchs__> is there a function that checks if a number of bytes is an ASCII digit (like isndigits)
[00:38:03] <van3ll0pe> bnchs__: the function isascii(int c); in the include ctype.h
[00:38:17] <bnchs__> read my message again
[00:38:33] <bnchs__> checks if a number of bytes
[00:38:38] <CodeAgain> I think you can check if it's <= 255
[00:38:40] <bnchs__> is an ASCII digit
[00:38:48] <sham1> Well only one byte can be an ASCII digit
[00:39:17] <fizzie> A bunch of bytes could several ASCII digits, though.
[00:39:22] <van3ll0pe> my bad, the char is only on 1 byte for every machine
[00:39:34] <sham1> That's not an ASCII digit, but a number made of ASCII digits
[00:39:37] <van3ll0pe> char and unsigned char
[00:39:46] <CodeAgain> sham1 what?
[00:39:52] <CodeAgain> I'm not getting it
[00:40:19] <sham1> The question was basically, given n chars, is there a function to check that all of them are ASCII digits
[00:40:25] <sham1> And no, there's no ready-made function for that
[00:40:27] <sham1> But
[00:40:30] <CodeAgain> Ohhhh, sorry, I've mistaken you and bnchs__
[00:40:34] <fizzie> But there's no built-in "does a string contain any digits" or "does a string contain only digits" functions. You could kind of press one of the integer conversion functions (strtoul and such) to such a use, but it would also limit the range.
[00:40:35] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[00:40:45] <van3ll0pe> so if you use char to stock ascii value, you can know the number of byte, but if you stock ascci value with a integer you can do sizeof(int)
[00:40:57] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:7ce8:3fb1:9da3:a544) (Ping timeout: 240 seconds)
[00:41:23] <van3ll0pe> to know the number of byte of integer
[00:41:44] <sham1> bool isAsciiDigits(size_t n, char chars[static n]) { bool ret = true; for (size_t i = 0; i < n; ++i) { if (!(isascii(chars[i]) && isdigit(chars[i]))) { ret = false; break; } } return ret; }
[00:41:48] <CodeAgain> van3ll0pe but what if it's ascii but 4 bytes?
[00:42:01] <CodeAgain> i.e. 65
[00:42:14] <fizzie> sham1: `isdigit((unsigned char) chars[i])` hth
[00:42:16] <CodeAgain> It might be stored on a 1-byte integer or in a 8-bytes too
[00:42:24] <sham1> Fair enough
[00:43:01] <sham1> The cast is indeed important, althogh the "isascii" is also important because isdigit could also technically return true for non-ASCII digits depending on locale, although it probably won't
[00:43:10] <sham1> (It could also cause a segfault)
[00:43:20] <van3ll0pe> CodeAgain: if you have the variable char *str = "hello" -> 5 bytes (because 1 char is 1byte)
[00:43:22] <fizzie> `isascii` is also not one of the standard C ones.
[00:43:32] <sham1> Oh. Well then
[00:43:44] <CodeAgain> van3ll0pe in ascii 1 char is 1 byte
[00:43:46] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[00:43:47] <SamuelMarks> hi
[00:43:47] <bnchs__> int is_ascii_digits(char *string, size_t n) { while (n--, string++) { if (!isdigit(*string)) return 0; } }
[00:43:49] <SamuelMarks> macro hack time
[00:44:07] <SamuelMarks> bnchs__ - You want a `return 1` also
[00:44:10] *** Quits: r1d1 (~tom@0543dbad.skybroadband.com) (Ping timeout: 256 seconds)
[00:44:13] <bnchs__> yeah i forgot that
[00:44:25] <sham1> > returning int from a predicate function
[00:44:31] <van3ll0pe> CodeAgain: that's what I said. "Hello" is 5 char so 5 bytes
[00:44:40] <sham1> van3ll0pe: 6 bytes
[00:44:41] <CodeAgain> van3ll0pe but if they're non-ascii?
[00:44:42] *** Quits: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6) (Quit: Disconnected)
[00:44:57] <CodeAgain> Then they might be more than 1-byte
[00:45:01] <bnchs__> sham1: yeah and?
[00:45:14] <sham1> Although it's a very interesting philosophical discussion to think if the NULL-byte is part of the string or not, no matter what the standard says
[00:45:32] *** Joins: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6)
[00:45:32] <van3ll0pe> sham1: you right with the '\0'
[00:45:33] <sham1> bnchs__: _Bool, my boy
[00:46:16] <SamuelMarks> hey so can I create a macro that creates a function with a name and a value? - Like `MK_FUNC("sum",SUM)`? - I'm thinking `#define MK_FUNC(name,enum_val)(int (name)({return SUM;})
[00:46:28] <bnchs__> sham1: tell me why?
[00:47:04] <fizzie> SamuelMarks: Not if it's called with a string literal token like "sum". The preprocessor can't pull that apart.
[00:47:11] <SamuelMarks> darn
[00:47:23] <CodeAgain> My point is, if you use a DBCS
[00:47:28] <sham1> You can have it be MK_FUNC(sum, SUM)
[00:47:36] <van3ll0pe> CodeAgain : if you stock the sentence in integer (because char is a very small number value) you can have an iterator to count the number of caracter and after do sizeof(int) * the number of caracter
[00:47:38] <SamuelMarks> fizzie - Is there any other way of doing this? - I've got an enum of stuff and I want to create a function for each
[00:48:16] <sham1> SamuelMarks: https://en.wikipedia.org/wiki/X_Macro
[00:48:33] <fizzie> There's usually some way of redefining the problem that allows the preprocessor to manage something along the lines of what you wanted.
[00:49:04] <sham1> You can have the X macros such that you generate your enumeration constants and also your functions
[00:49:18] <fizzie> As mentioned, MK_FUNC(sum, SUM) could definitely expand into a function definition for the identifier `sum`. And if you need it as a string literal for some other purpose, there's the # preprocessor operator.
[00:50:03] <CodeAgain> van3ll0pe you're assuming the op knows, for instance, the character set
[00:50:12] <CodeAgain> But if he's asking it he might not know
[00:51:06] <CodeAgain> If it's extended ascii a binary or with the first bit would do the trick with a char or an 1byte int
[00:51:32] <CodeAgain> But if the character is something else, like in chinese character set this approach wouldn't work
[00:51:41] <SamuelMarks> sham1 - Thanks looking into that - fizzie & fst - Trying to generate one of these https://github.com/offscale/libacquire/blob/92f6921/libacquire/acquire_librhash.h#L53-L56 for each of these https://github.com/rhash/RHash/blob/23b71fd/librhash/rhash.h#L25-L55
[00:51:59] *** Quits: jx0 (~jx0@199.229.250.133) (Quit: poof!)
[00:52:22] *** Quits: bnchs__ (~bnchs@41.251.61.78) (Remote host closed the connection)
[00:52:29] *** Joins: bnchs (~bnchs@41.251.61.78)
[00:53:16] *** Joins: van3ll0pe_ (~van3ll0pe@37.166.209.253)
[00:54:08] <fizzie> Yeah, that should be doable. You may want something like https://ideone.com/OlwhKT for example.
[00:54:09] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[00:54:41] <SamuelMarks> Sweet, thanks (was just reading through the wikipedia-linked wikibook)
[00:54:47] *** Quits: van3ll0pe_ (~van3ll0pe@37.166.209.253) (Client Quit)
[00:55:17] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[00:55:22] <SamuelMarks> I might send the librhash maintainer a PR to add a smaller enum one that the macro can traverse… actually can macros traverse enums?
[00:55:37] *** Quits: van3ll0pe (~van3ll0pe@37.166.209.253) (Ping timeout: 240 seconds)
[00:55:40] <sham1> The C preprocessor is more powerful than I think it has any right to be considering how constrained it is in many ways
[00:56:09] <fizzie> They can't really "traverse" anything. But the same `HASHES` macro could generate that enum definition as well.
[00:56:11] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 245 seconds)
[00:56:33] <SamuelMarks> fizzie - Ah, so the reverse… hmm
[00:56:53] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:57:37] *** Quits: diophantoz (~diophanto@user/diophantoz) (Ping timeout: 240 seconds)
[00:57:59] <fizzie> SamuelMarks: Here's an example of that sort of thing: https://ideone.com/anhKVQ
[00:59:09] <fizzie> The same `HASHES` list is used to first generate `enum hash_bits { FOO_bit, BAR_bit, BAZ_bit };`, then `enum hash_ids { FOO = 1 << FOO_bit, BAR = 1 << BAR_bit, BAZ = 1 << BAZ_bit };` and then all the three functions of the form `int foo(void) { return FOO; }`.
[00:59:21] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:7c68:228:b173:b6f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:59:23] <fizzie> Though FWIW, it's not usually common to export X-Macros "outside" library internals.
[00:59:56] <fizzie> And that trick to generate the ids is probably overly cute, and it'd be better to just have them as explicit constants.
[01:00:55] <clarity> Is there any trick to force gcc to keep a value in a register?
[01:01:13] <SamuelMarks> Hmm… "Commas at the end of enumerator lists are a C99-specific feature"
[01:02:00] <SamuelMarks> clarity `register` keyword hints at it, but maybe inline asm is what you're looking for?
[01:02:03] <sham1> clarity: I mean… there's `register`, but not really no
[01:03:17] <SamuelMarks> clarity - If you know the name of the register then sure: https://gcc.gnu.org/onlinedocs/gcc-4.6.1/gcc/Explicit-Reg-Vars.html#Explicit-Reg-Vars
[01:03:38] <clarity> "This option does not guarantee that GCC will generate code that has this variable in the register you specify at all times"
[01:04:34] *** Quits: mahmutov (~mahmutov@5.176.60.245) (Ping timeout: 256 seconds)
[01:04:52] <clarity> I guess I'll try the global one
[01:05:09] <SamuelMarks> old gcc doc so try and see, not sure if still present
[01:05:09] <clarity> Except that.. no, I can't
[01:05:12] <clarity> Hmm
[01:05:16] <sham1> May I ask why
[01:05:22] <sham1> Outta curiosity
[01:05:24] <clarity> No I've tried the local one already but it didn't help
[01:05:53] <clarity> sham1: I'd like to avoid wasting bytes
[01:06:08] <sham1> aha
[01:06:51] <ravella> Wasting bytes in the codegen? Or on the stack?
[01:06:56] <clarity> code
[01:08:06] <sham1> -Os?
[01:08:08] <ravella> I'd try seeing what -Os does
[01:08:15] <clarity> It does dumb things :)
[01:08:28] <sham1> Or -Oz
[01:08:28] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Read error: Connection reset by peer)
[01:09:02] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[01:10:21] <fizzie> If you want to avoid the trailing comma in an X-Macros context, the usual workaround is to add a dummy enumerator at the end.
[01:12:30] *** Quits: j-james (~apropos@dhcp-206-87-156-58.ubcsecure.wireless.ubc.ca) (Quit: leaving)
[01:12:39] <sham1> Or one could have something like FIRST_MACRO(params) and then TRAILING_MACRO(params) where TRAILING_MACRO expands to something like `, FIRST_MACRO(params)`
[01:12:41] <SamuelMarks> hmm
[01:12:44] <sham1> As in, prepending the comma
[01:12:48] *** Joins: j-james (~apropos@dhcp-206-87-156-58.ubcsecure.wireless.ubc.ca)
[01:13:00] <SamuelMarks> So much indirection
[01:13:43] <sham1> Yes. Thus is the way of the C preprocessor macro
[01:14:36] <SamuelMarks> Hmmmmmm - is there any neater way of doing it or is macros and this approach the only way? - I'm thinking macros is the only way
[01:14:59] <sham1> Well you can have an external program generate code… but yeah, in practice you just want to macroize
[01:15:17] *** Quits: myth (~myth@173.233.125.203) (Remote host closed the connection)
[01:15:21] <SamuelMarks> yep macros it is then, time to hack hack hack
[01:15:30] *** Joins: myth (~myth@173.233.125.203)
[01:15:44] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 250 seconds)
[01:15:45] <sham1> As I said, C Preprocessor macros are way more powerful than they have any right to be, and part of that comes down to how hacky it can get
[01:16:02] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[01:16:06] <fizzie> Re trailing comma, well, there's also: https://ideone.com/YF8bti ;)
[01:16:15] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[01:16:50] <sham1> Eugh
[01:17:03] <sham1> Rather just do the thing of prepending the comma
[01:17:16] <fizzie> Personally I can't help but smile tolerantly at `#define comma ,` for some reason.
[01:17:48] *** Joins: gdd (~gdd@129.199.146.230)
[01:21:18] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Read error: Connection reset by peer)
[01:22:09] <oldlaptop> fizzie: Maybe that would be a nice way to fight confusion between , as an argument separator and , as the comma operator
[01:22:54] <oldlaptop> (that is, all intended instances of the comma operator are really the comma operator, not the , operator - could enforce that statically too!)
[01:23:03] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:23:06] <SamuelMarks> fizzie - ARghhh to much hand typing I should've seen if macros can split and lowercase things - https://ideone.com/wM1Uti
[01:23:40] <clarity> Lol.. register volatile struct ssi * restrict ssi asm("r4");
[01:23:45] <fizzie> Sadly, they can't change the case. And they can't split tokens... but they can merge them.
[01:24:03] <clarity> Alright, it keeps it in the register.  And decides to randomly copy it into a different register because why not
[01:24:06] <clarity> :3
[01:24:10] <fizzie> So you could have saved the typing of `RHASH_` since it's the same for all of them.
[01:25:24] <fizzie> And if you're not generating any enums (but just using ones from the library), you don't really need the comma trick -- there's no equivalent for the function definitions, since they don't need a separator.
[01:25:26] *** bnchs is now known as video
[01:25:31] *** video is now known as bnchs
[01:26:19] *** Joins: |darc| (~darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[01:26:20] <fizzie> Re using a macro to indicate a comma is meant to be the comma operator: `#define and_then ,` + `x() and_then y();`
[01:26:35] <fizzie> Kind of like the `#define ever (;;)` thing.
[01:26:53] <fizzie> Making C more like COBOL, one macro at a time.
[01:26:54] <sham1> Could also just have the commas in the X macro data itself
[01:27:26] <fizzie> They *are* in the macro data in that scheme.
[01:27:27] <sham1> Although thinking about it, it wouldn't actually work
[01:27:47] <sham1> I meant like #define STUFF X(A), X(B), X(C)
[01:27:53] <fizzie> Oh, right, outside the X.
[01:28:02] <fizzie> Yeah, that has problems if you want to use them in a non-comma context.
[01:28:06] <sham1> Exactly
[01:28:15] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[01:28:19] <sham1> I realised the probelm
[01:28:25] <oldlaptop> fizzie: Yeah, that's nice too. (Advantage: clarity, disadvantage: doesn't retain the reminder that it's actually a comma anymore)
[01:29:20] <sham1> Another advantage: Could be something else than a comma without dissonance
[01:29:31] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[01:29:37] <SamuelMarks> fizzie - Yeah but I will generate an `enum`… probably. About to create an issue on rhash with this proposal
[01:30:09] <oldlaptop> sham1: in the context of my tangent, why would you want "and_then" to be something other than ,?
[01:30:40] <sham1> Condition expressions?
[01:30:49] <sham1> Could be useful in some circumstances
[01:33:01] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[01:34:22] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[01:35:16] <oldlaptop> You mean ?: ?
[01:35:21] <oldlaptop> (this is getting awkward)
[01:35:31] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[01:35:55] <SamuelMarks> lol I crashed CLion with this fancy macro stuff
[01:36:01] <oldlaptop> That would make more sense as (condition) iftrue (expr) iffalse (expr) or so
[01:38:41] <sham1> oldlaptop: do you know of any other condition expressions in C ;)
[01:38:53] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[01:38:59] <oldlaptop> but it doesn't have the unique value I'm suggesting for "comma" as , in any case (which is that it's easy to confuse , as the comma operator, in which (foo(), bar()) is an expression that evaluates foo() and bar() in that order and evaluates to the value of bar(), and , as the function argument separator, in which foo(bar(), baz()) does *not* evaluate bar() and baz() in any particular order)
[01:39:00] <SamuelMarks> https://intellij-support.jetbrains.com/hc/en-us/community/posts/4416727107218-CLion-crashes-when-multi-line-pasting-into-multi-line-C-macro
[01:39:07] <SamuelMarks> :P
[01:40:50] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[01:41:50] *** Joins: tosemusername (~tosemuser@user/nvmd)
[01:41:51] *** Quits: |darc| (~darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Read error: Connection reset by peer)
[01:44:29] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[01:46:35] <SamuelMarks> Ohhh so close, I got it working but now I want to hide it behind a param
[01:47:04] *** Quits: bnchs (~bnchs@41.251.61.78) (Ping timeout: 256 seconds)
[01:47:12] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[01:48:17] <SamuelMarks> fizzie / sham1 : Can I guard it with an `#define X(name, hash, unused) \ \n #if !defined(IMPL_ name) \ \n int name(){return hash} \n #endif /* IMPL_ name */ \n HASHES \n #undef X`
[01:49:53] <fizzie> That's harder. A macro can't expand into a preprocessing directive.
[01:50:33] <fizzie> For the separate-file X-macros approach, you can use #if / #endif in the list itself, though.
[01:51:34] <SamuelMarks> Hmm so the replacement looks perfect but the "Empty macro arguments are a C99 feature" is given
[01:51:39] *** Joins: Torr (~Torr@user/torr)
[01:51:42] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[01:52:19] <fizzie> That's probably from the comma thing.
[01:52:25] <SamuelMarks> fizzie - Hmm, actually within the list might work, but that wouldn't do anything for the rhash lib as this is too simple
[01:52:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[01:53:00] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[01:53:01] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: leaving)
[01:53:11] <fizzie> You could switch to one of the other comma workarounds (differently named first or last macro, or an extra dummy item in the enumeration).
[01:54:29] <SamuelMarks> But the macro expansion debug-view shows everything expanding correct
[01:54:39] *** Parts: tosemusername (~tosemuser@user/nvmd) ()
[01:55:18] <fizzie> That warning is from the finla `X(foo, FOO, )` one that doesn't have the comma.
[01:55:30] <fizzie> ...well, you can fix it with `#define blank /* nothing */` too just to be consistent. :)
[01:56:45] <SamuelMarks> I'm pretty excited that this is all working :D
[01:59:02] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[01:59:56] <phryk_> Are ntohl and htonl the same function? Getting the same result from both – which kinda makes sense because both reverse the order (or not, depending on system-endianness or whatever) but I'm at a bit of a loss as to why this is available through two names then…
[02:01:33] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[02:01:42] <sham1> Because they do different things
[02:01:49] <sham1> It just happens that the different things look like the same thing
[02:02:30] <phryk_> sham1: on every piece of hardware they will always return the same results for the same input, won't they?
[02:03:02] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:7c68:228:b173:b6f7)
[02:03:04] <fizzie> On every existing piece, perhaps, but not on every possible piece.
[02:03:22] <fizzie> It's also more self-documenting of what's going on and how the arguments and/or the results should be interpreted, when the functions are called "host to network" and "network to host".
[02:03:44] <phryk_> fizzie: yes, declaration of intent is currently the only difference i see.
[02:04:43] *** phryk_ is now known as phryk
[02:05:54] <fizzie> Entirely hypothetically, if your network byte order is 1234 and your host byte order is 2341, then `htonl` and `ntohl` aren't the same function.
[02:07:10] <phryk> Yes, but you need some middle endian weirdness like that, right? As soon as bytes are ordered by significance, they will behave identically.
[02:07:40] <LeoNerd> Mmmm PDP endian
[02:07:57] <sham1> Sure. But with portable code you *cannot* assume that
[02:08:27] <phryk> Aye, just wanted to make sure I grok this. :)
[02:11:18] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:11:50] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:7c68:228:b173:b6f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:12:25] *** Joins: |darc|- (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[02:12:25] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Killed (NickServ (GHOST command used by |darc|-)))
[02:15:21] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:15:34] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:15:50] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f444:a000:4917:bc56:f54d:812b) (Ping timeout: 252 seconds)
[02:18:35] *** Joins: jx0 (~jx0@199.229.250.133)
[02:21:32] *** Joins: nvmd (~nvmd@user/nvmd)
[02:21:37] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::4) (Ping timeout: 240 seconds)
[02:22:59] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 252 seconds)
[02:23:01] *** Quits: nvmd (~nvmd@user/nvmd) (Client Quit)
[02:23:16] *** Joins: nvmd (~weechat@user/nvmd)
[02:25:13] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:25:58] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[02:26:59] *** Quits: |darc|- (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Ping timeout: 250 seconds)
[02:31:08] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:31:16] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[02:31:41] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Client Quit)
[02:32:14] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[02:32:52] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[02:32:57] *** Quits: pizdets (~pizdets@183.182.110.173) (Ping timeout: 240 seconds)
[02:33:15] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[02:33:51] *** Joins: pizdets (~pizdets@183.182.114.249)
[02:36:20] *** Quits: lightningwright (~lightning@user/lightningwright) (Quit: Leaving)
[02:37:55] *** Joins: crashrep (~crashrep@user/crashrep)
[02:41:29] *** Joins: soapsudsxx (~soapsudsx@209.221.40.147)
[02:44:07] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:44:26] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[02:49:21] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:61c2:2519:9983:2238)
[02:50:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[02:52:34] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[02:53:12] *** Joins: serbest (~ike@user/serbest)
[02:54:26] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_1)
[02:54:40] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:55:53] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[02:58:44] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 252 seconds)
[02:58:45] *** Quits: alch (~alch@151.46.74.127) (Read error: Connection reset by peer)
[03:00:36] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 250 seconds)
[03:02:14] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[03:02:18] *** Quits: Akuli (~Akuli@213.216.210.211) (Quit: Akuli)
[03:02:42] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Read error: Connection reset by peer)
[03:02:57] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[03:02:59] *** Joins: alch (~alch@151.44.29.237)
[03:03:49] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[03:04:45] *** Joins: Trashlord (~trash@user/trashlord)
[03:05:30] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[03:05:57] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Read error: Connection reset by peer)
[03:06:15] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[03:07:13] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Read error: Connection reset by peer)
[03:08:52] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:13:08] *** Joins: vysn (~vysn@user/vysn)
[03:15:26] *** Joins: ferdna (~ferdna@user/ferdna)
[03:19:26] *** Quits: serbest (~ike@user/serbest) (Quit: Konversation terminated!)
[03:23:34] *** cryptone1tor is now known as cryptonector
[03:23:39] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[03:24:05] *** Joins: Betal (~Betal@user/betal)
[03:25:59] *** Joins: |darc|- (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[03:25:59] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Killed (NickServ (GHOST command used by |darc|-)))
[03:28:34] *** Joins: manj-gnome (~manjaro-g@2600:8805:d80c:500::ca2)
[03:28:58] *** Quits: Kerr (~AdminUser@2601:602:ce01:1f0:2e92:133b:16d9:1409) (Remote host closed the connection)
[03:30:04] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 250 seconds)
[03:32:30] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 260 seconds)
[03:37:49] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[03:37:55] *** Joins: Alhazred (~Alhazred@86.106.74.41)
[03:40:06] *** Joins: ski (~ski@remote12.chalmers.se)
[03:40:11] *** caze` is now known as caze
[03:40:26] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 260 seconds)
[03:43:34] *** Joins: ickk (~ickk@user/ickk)
[03:47:02] *** Joins: symb0l_ (~symb0l@user/symb0l)
[03:49:12] *** Quits: nvmd (~weechat@user/nvmd) (Quit: WeeChat 3.4)
[03:49:24] *** Joins: nvmd (~weechat@user/nvmd)
[03:49:44] *** Quits: symb0l_ (~symb0l@user/symb0l) (Client Quit)
[03:50:06] *** Quits: nvmd (~weechat@user/nvmd) (Client Quit)
[03:55:37] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[03:56:23] *** Joins: Torr (~Torr@user/torr)
[03:56:29] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[03:57:01] *** Joins: oxfuxxx (~oxfuxxx@103.137.12.253)
[03:57:01] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:57:01] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:57:01] *** Joins: wroathe (~wroathe@user/wroathe)
[03:59:17] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:00:48] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[04:03:59] *** Joins: seninha (~seninha@user/seninha)
[04:04:00] *** Quits: oxfuxxx (~oxfuxxx@103.137.12.253) (Ping timeout: 268 seconds)
[04:04:28] *** Joins: crashrep (~crashrep@user/crashrep)
[04:05:18] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[04:05:33] *** Joins: oxfuxxx (~oxfuxxx@131.255.4.84)
[04:05:38] *** Joins: seninha (~seninha@user/seninha)
[04:07:33] *** Quits: magla (~gelignite@55d49292.access.ecotel.net) (Quit: Stay safe!)
[04:08:12] *** Quits: Geezabiscuit (~Geezabisc@user/geezabiscuit) (Ping timeout: 250 seconds)
[04:08:50] *** Joins: Everything (~Everythin@37.115.210.35)
[04:09:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:12:26] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:12:57] *** Quits: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[04:13:45] *** Joins: freakazoid343 (~matt@2603:9000:cf03:86c3:142e:beda:d724:cf20)
[04:14:04] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[04:15:01] *** Quits: dsrt^ (~dsrt@75-147-197-198-Atlanta.hfc.comcastbusiness.net) (Remote host closed the connection)
[04:16:29] *** Joins: mahmutov (~mahmutov@5.176.60.245)
[04:17:02] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:60a2:ba13:41c5:d22f) (Ping timeout: 240 seconds)
[04:17:38] *** Joins: pnbeast (~pnbeast@2601:140:4280:6ce0::1)
[04:19:17] *** Quits: oxfuxxx (~oxfuxxx@131.255.4.84) (Ping timeout: 240 seconds)
[04:20:53] *** Joins: Satin (uid193953@user/Seten)
[04:24:28] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[04:27:25] *** Quits: manj-gnome (~manjaro-g@2600:8805:d80c:500::ca2) (Quit: Leaving)
[04:30:55] *** Joins: r1d1 (~tom@0543dbad.skybroadband.com)
[04:33:50] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[04:36:11] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 245 seconds)
[04:40:19] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[04:40:35] *** Quits: Torr (~Torr@user/torr) ()
[04:41:49] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[04:43:16] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[04:43:31] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[04:43:48] *** Joins: zmt01 (~zmt00@user/zmt00)
[04:44:21] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (Quit: quit)
[04:44:54] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[04:46:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[04:47:04] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[04:47:19] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[04:48:34] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 260 seconds)
[04:49:27] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:49:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[04:50:36] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[04:51:20] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:53:58] *** Joins: mali (~malina@user/malina)
[04:54:19] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Ping timeout: 250 seconds)
[04:54:48] *** Joins: fwg (~fwg@user/fwg)
[04:56:06] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[04:56:19] *** Joins: De4nWhit360 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[04:56:29] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[04:56:36] <De4nWhit360> Hello everyone.
[04:58:42] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[04:58:57] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 240 seconds)
[04:59:16] <twkm> moo.
[05:02:41] *** Joins: dsrt^ (~dsrt@75-147-197-198-Atlanta.hfc.comcastbusiness.net)
[05:02:57] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[05:06:32] *** Joins: Lazenca (~lazenca@user/lazenca)
[05:09:03] *** Quits: r1d1 (~tom@0543dbad.skybroadband.com) (Quit: r1d1)
[05:14:55] *** Quits: fwg (~fwg@user/fwg) (Quit: so long and thanks for all the fish.)
[05:18:02] *** Quits: scaramanga (~scara@1.239.35.120) (Ping timeout: 240 seconds)
[05:20:12] *** Quits: mali (~malina@user/malina) (Quit: mali)
[05:22:57] *** Quits: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-202.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:25:12] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[05:26:58] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:27:30] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[05:27:45] *** Quits: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740) (Quit: Leaving)
[05:28:39] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:32:56] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-178.dsl.bell.ca)
[05:34:48] *** Quits: Neutron7 (~stillnoob@96.73.191.185) (Quit: Leaving)
[05:35:43] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:7c68:228:b173:b6f7)
[05:37:56] *** Joins: fwg (~fwg@user/fwg)
[05:40:24] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:41:24] *** Quits: AmR (~AmREiSa@156.207.146.251) (Quit: Konversation terminated!)
[05:43:20] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:43:34] *** Quits: uskerine (uskerine@186.189.78.188.dynamic.jazztel.es) (Remote host closed the connection)
[05:45:07] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[05:49:02] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (Ping timeout: 256 seconds)
[05:49:49] *** Joins: asdflkj_sh (~asdflkj@bsdforall.org)
[05:50:10] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[05:51:49] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:56:37] *** Joins: Fl0pFl1p (~FlipFlop@user/fl1pfl0p)
[05:57:05] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.4)
[05:59:38] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[05:59:56] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[05:59:57] *** Quits: Fl1pFl0p (~FlipFlop@user/fl1pfl0p) (Ping timeout: 240 seconds)
[06:08:17] *** Joins: Kerr (~quassel@2601:602:ce01:1f0:f230:d70f:f8db:83c0)
[06:15:35] *** Quits: De4nWhit360 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[06:15:40] *** Quits: mahmutov (~mahmutov@5.176.60.245) (Ping timeout: 256 seconds)
[06:21:50] *** Quits: asdflkj_sh (~asdflkj@bsdforall.org) (Quit: WeeChat 3.1)
[06:26:13] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[06:27:57] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[06:31:24] *** Joins: p0g0_ (~p0g0@23.252.179.5)
[06:32:43] *** Joins: guest23 (~stillnoob@96.73.191.185)
[06:33:22] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 250 seconds)
[06:33:48] *** Quits: p0g0 (~p0g0@216.211.153.38) (Ping timeout: 250 seconds)
[06:33:59] *** guest23 is now known as Neutron7
[06:34:44] *** Joins: Techcable (~Techcable@168.235.93.147)
[06:36:58] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[06:37:17] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Quit: leaving)
[06:37:39] *** Joins: Maxdamantus (~Maxdamant@124.197.32.108)
[06:40:07] *** Quits: Maxdamantus (~Maxdamant@124.197.32.108) (Client Quit)
[06:40:13] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[06:40:52] *** Quits: ickk (~ickk@user/ickk) (Ping timeout: 260 seconds)
[06:42:18] *** Quits: j-james (~apropos@dhcp-206-87-156-58.ubcsecure.wireless.ubc.ca) (Ping timeout: 256 seconds)
[06:43:34] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[06:53:23] *** Quits: Alhazred (~Alhazred@86.106.74.41) (Quit: leaving)
[06:54:33] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:36] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:56:10] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:56:25] *** Quits: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com) (Quit: WeeChat 2.8)
[07:00:25] *** Quits: alch (~alch@151.44.29.237) (Read error: Connection reset by peer)
[07:03:19] *** Joins: alch (~alch@151.46.16.154)
[07:03:48] *** Joins: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch)
[07:04:19] *** Joins: scaramanga (~scara@1.239.35.120)
[07:07:59] *** Joins: Alhazred (~Alhazred@86.106.74.42)
[07:11:46] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[07:13:22] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:7c68:228:b173:b6f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:17:33] *** Joins: johnnyreb (~tth@user/johnnyreb)
[07:18:18] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:606b:5910:1e37:5939) (Quit: Quit)
[07:19:21] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[07:19:52] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[07:20:53] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Changing host)
[07:20:53] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[07:22:07] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:24:14] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[07:32:36] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:41] *** Joins: kish` (~aqua@user/aqua)
[07:37:00] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[07:37:20] *** Joins: kish` (~aqua@user/aqua)
[07:38:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[07:42:00] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:7c68:228:b173:b6f7)
[07:46:43] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:47:21] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[07:56:14] *** Joins: ic3blx_ (~ic3blx___@87.116.166.116)
[07:56:14] *** Quits: ic3blx_ (~ic3blx___@87.116.166.116) (Changing host)
[07:56:14] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[07:56:54] *** Joins: Oddity (~Oddity@user/oddity)
[08:01:26] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[08:02:50] *** Joins: quartz (~quartz@user/quartz)
[08:03:37] *** Quits: myth (~myth@173.233.125.203) (Remote host closed the connection)
[08:11:18] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[08:15:32] *** Joins: savanz (~savanz@1.157.231.3)
[08:17:13] <savanz> Am I just retarded or is trying to do the exercises in K&R C as an absolute beginner damn near impossible
[08:17:44] <caze> savanz: The chapter 1 exercises from 1-17 on are trickier than they first appear.
[08:18:31] <savanz> They first appear to be something I don't know how to do, lmao. I don't see how I'm meant to accomplish them without looking up exactly how to do it
[08:18:53] *** Quits: cehteh (~ct@git.pipapo.org) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[08:19:25] <caze> savanz: What exercise are you attempting?
[08:22:36] <savanz> Frankly anything past 1-2 is pretty hard for me, I got up to like 1.6 at some point but I realized I wasn't actually understanding how to do any of it nor could I complete it independently.
[08:22:46] *** Joins: cehteh (~ct@git.pipapo.org)
[08:23:02] <caze> ,kr1-6
[08:23:02] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-6. Verify that the expression getchar() != EOF is 0 or 1.
[08:23:10] <caze> That's a silly one.
[08:23:45] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[08:24:31] <savanz> e.g. I was basically just looking up on github how to do the exercises for pretty much all of them
[08:24:42] <caze> Don't.
[08:24:43] <savanz> I think I did a couple independently but :/
[08:24:53] <savanz> haha yeah I know
[08:29:51] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:30:10] <savanz> But like is it meant to be so difficult for someone new to C/programming to finish the exercises?
[08:34:06] *** Quits: Electric_Sheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net) (Quit: ZNC - http://znc.in)
[08:34:59] *** Quits: jx0 (~jx0@199.229.250.133) (Quit: poof!)
[08:37:12] *** Joins: ferdna (~ferdna@user/ferdna)
[08:39:16] <caze> You're expected to have some experience with general programming/algorithms.
[08:39:42] <caze> ,kr1-7
[08:39:42] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-7. Write a program to print the value of EOF.
[08:39:51] <caze> savanz: You can't do 1-7?
[08:40:55] *** Quits: moog (~moog@107.77.244.129) (Remote host closed the connection)
[08:41:41] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:7c68:228:b173:b6f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:42:36] <savanz> not really no
[08:43:09] <savanz> caze: I guess that makes sense, just thought I'd be able to work it out with not thaaaaaat much trouble
[08:43:17] <caze> savanz: Did you read the chapter?
[08:43:52] <caze> savanz: Maybe your problem is with reading.
[08:43:54] <savanz> ofc
[08:44:03] <savanz> lmao that classic irc rtfm
[08:44:10] <caze> savanz: Do you know what EOF is?
[08:44:52] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[08:44:52] <savanz> I know it basically terminates a program
[08:45:09] <caze> savanz: No, it does not.
[08:45:40] <caze> savanz: It is explained on page 16.
[08:46:38] <savanz> Yeah I read most of it like a month ago and was just rereading it to see if I could get the earlier parts, I could not
[08:47:52] *** Quits: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740) (Quit: Leaving)
[08:47:56] <caze> Do you know how to print?
[08:48:25] <savanz> printf("Thing you want to print");
[08:49:26] <caze> savanz: So how do you print the value of EOF?
[08:50:35] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[08:51:07] *** ChanServ sets mode: +o candide
[08:51:07] *** candide sets mode: -b $a:autopsy
[08:51:08] <savanz> Uh I would say printf(EOF); or something but that would be way to straightforward probably
[08:51:21] *** Joins: jx0 (~jx0@199.229.250.133)
[08:51:24] <caze> Read page 11.
[08:52:47] <caze> I think you just need to reread the chapter.
[08:53:57] <savanz> Yeah I probably should
[08:54:00] <savanz> printf("%i\n", EOF); tho
[08:55:01] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:55:28] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[08:56:18] *** Joins: eeee (~eeee@user/eeee)
[09:02:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:02:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:02:42] *** Joins: wroathe (~wroathe@user/wroathe)
[09:05:44] *** Quits: raym (~raym@user/raym) (Quit: kernel update, rebooting...)
[09:09:14] *** Joins: Viewday11 (~Viewday@user/viewday)
[09:12:17] *** Joins: raym (~raym@user/raym)
[09:16:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:22:03] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[09:25:09] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[09:26:09] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:26:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:26:09] *** Joins: wroathe (~wroathe@user/wroathe)
[09:28:02] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:28:26] *** Joins: sonde (~sonde@user/sonde)
[09:30:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[09:31:10] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:31:54] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:34:17] *** Joins: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com)
[09:37:13] <ChoHag> savanz: What do you hope to learn by having others do your thinking for you?
[09:38:03] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[09:38:11] <ChoHag> By copying code from someone website instead of doing the exercises yourself you're neither learning how to code nor learning how to wrangle coding out of developers desperate to prove their mettle.
[09:39:56] <ChoHag> You won't get a job in development *or* management that way; the best you can hope for is tech support.
[09:43:50] *** Joins: ben_ (~ben@host-204-118-069-229.dhcp.fewpb.net)
[09:44:13] *** Quits: sonde (~sonde@user/sonde) (Quit: nyaa~)
[09:45:48] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[09:46:05] *** Joins: sebag (~guest@91.245.82.2)
[09:49:12] *** Joins: Rounin (~david@84.212.130.215)
[09:51:21] *** Joins: sonde (~sonde@user/sonde)
[09:54:53] *** Quits: eeee (~eeee@user/eeee) (Remote host closed the connection)
[09:58:22] *** Joins: duds-_ (~duds-@gateway/tor-sasl/duds)
[09:59:32] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Remote host closed the connection)
[10:01:44] *** duds-_ is now known as duds-
[10:06:34] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[10:09:58] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[10:10:08] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[10:11:05] *** Joins: koo5_ (~quassel@51.140.155.227)
[10:11:08] *** Joins: mahmutov (~mahmutov@37.155.41.218)
[10:14:18] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Ping timeout: 260 seconds)
[10:14:41] *** Quits: ben_ (~ben@host-204-118-069-229.dhcp.fewpb.net) (Quit: ben_)
[10:15:13] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[10:18:12] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[10:19:54] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Ping timeout: 256 seconds)
[10:20:38] *** Joins: Nutte35 (~Nutte@202.153.81.202)
[10:21:33] *** Joins: Satin (uid193953@user/Seten)
[10:38:26] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.202)
[10:38:42] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.202) (Max SendQ exceeded)
[10:39:10] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.202)
[10:39:43] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.202) (Max SendQ exceeded)
[10:40:11] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.202)
[10:42:52] *** Quits: soapsudsxx (~soapsudsx@209.221.40.147) (Remote host closed the connection)
[10:45:11] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[10:49:02] *** Quits: zwr (~zwr@2804:d45:b966:fb00:1493:7e75:a195:6d65) (Ping timeout: 240 seconds)
[10:49:13] <savanz> ChoHag: I know, why do you think I stopped doing it? I'm not learning to get a job either I just enjoy learning new things and sometimes find reading examples to be helpful, this time... it was not.
[10:50:04] *** Joins: KBar (~KBar@213.230.118.8)
[10:50:09] *** Quits: sonde (~sonde@user/sonde) (Quit: nyaa~)
[10:50:33] <savanz> Do most people learning C of all languages even care about jobs that aren't embedded systems engineers or backend engineers anyways?
[10:50:56] *** Quits: Alhazred (~Alhazred@86.106.74.42) (Read error: Connection reset by peer)
[10:51:16] *** candide sets mode: -o candide
[10:51:57] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:54:46] <KBar> hello everyone. not a programmer by any means so apologies for my ignorance. just a quick question. why are some environment variables wrapped in-between @'s? for example, in Makefile.in or configure: @INSTALL@, @srcdir@, etc. what does it mean?
[10:55:17] <ChoHag> If you're not after a job there's even more incentive to do the learning yourself, that being the whole point.
[10:55:58] <ChoHag> They're not environment variables.
[10:56:14] <ChoHag> Those a variables to the automake template parser.
[10:57:43] <ChoHag> savanz: If someone is learning programming to make a career of it they should learn C for the sake of knowing C even if they're unlikely to write anything in it for their job.
[10:57:45] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[10:58:33] *** Joins: cpuid (~cpuid@co5.at)
[10:58:33] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[10:58:33] *** Joins: cpuid (~cpuid@user/cpuid)
[10:58:48] *** Quits: cpuid (~cpuid@user/cpuid) (Client Quit)
[11:00:44] *** Joins: wootz (~wootz@89.46.114.151)
[11:01:16] *** Quits: alch (~alch@151.46.16.154) (Ping timeout: 256 seconds)
[11:02:43] *** Joins: alch (~alch@151.44.27.193)
[11:02:58] <KBar> ChoHag: ah, i see. info autoconf explains that. thanks
[11:02:58] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[11:04:21] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:05:29] *** Quits: |darc|- (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Quit: later)
[11:05:37] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:05:41] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[11:06:22] <Feuermagier> Can I somehow run the C preprocessor on only one dubious #define statement?
[11:07:37] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[11:08:36] <NRK[m]> Feuermagier: what's dubious about it?
[11:08:56] <Feuermagier> I'm trying to figure that out
[11:09:20] <Feuermagier> it's a really fishy custom implementation of "read()"
[11:10:01] <NRK[m]> you can use `gcc -E`
[11:11:04] *** Quits: Nutte35 (~Nutte@202.153.81.202) (Remote host closed the connection)
[11:12:28] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[11:13:23] *** Joins: cpuid (~cpuid@static.0.241.21.65.clients.your-server.de)
[11:13:23] *** Quits: cpuid (~cpuid@static.0.241.21.65.clients.your-server.de) (Changing host)
[11:13:23] *** Joins: cpuid (~cpuid@user/cpuid)
[11:14:33] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[11:14:44] <savanz> ChoHag: I did explain why I was looking at examples early before, regardless that is what I am going to be doing anyways
[11:17:10] *** Quits: cpuid (~cpuid@user/cpuid) (Client Quit)
[11:17:58] *** Joins: boB_K7IQ (~boB_K7IQ@ip68-109-146-217.ph.ph.cox.net)
[11:17:58] *** Joins: cpuid (~cpuid@static.0.241.21.65.clients.your-server.de)
[11:17:58] *** Quits: cpuid (~cpuid@static.0.241.21.65.clients.your-server.de) (Changing host)
[11:17:58] *** Joins: cpuid (~cpuid@user/cpuid)
[11:18:39] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[11:20:16] *** Joins: diophantoz (~diophanto@user/diophantoz)
[11:22:24] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[11:23:37] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:27:13] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[11:27:28] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[11:27:36] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[11:31:20] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[11:31:52] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[11:32:37] *** Parts: KBar (~KBar@213.230.118.8) ()
[11:33:09] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:34:19] *** Parts: SymbioticFemale (~Symbiotic@user/SymbioticFemale) ()
[11:35:25] *** Quits: savanz (~savanz@1.157.231.3) (Quit: Leaving)
[11:35:44] *** Joins: pyook (~pyook@user/puke)
[11:36:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[11:36:43] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[11:37:11] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[11:38:08] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:38:09] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:38:47] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:39:28] *** Joins: Wulf (~Wulf@user/wulf)
[11:42:30] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:44:19] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:44:19] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[11:44:35] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[11:45:59] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:46:25] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:51:33] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:52:35] <caze> read implemented as a macro.
[11:53:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[11:55:30] *** Quits: jx0 (~jx0@199.229.250.133) (Quit: poof!)
[11:57:22] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:59:46] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:02:41] *** Joins: vysn (~vysn@user/vysn)
[12:05:25] *** Quits: vysn (~vysn@user/vysn) (Client Quit)
[12:06:43] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[12:10:29] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[12:15:29] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[12:19:48] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Client Quit)
[12:23:13] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:28:58] *** Joins: ickk (~ickk@user/ickk)
[12:30:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[12:32:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:34:42] *** Quits: megaTherion (~therion@unix.io) (Read error: Connection reset by peer)
[12:39:17] *** Quits: mahmutov (~mahmutov@37.155.41.218) (Ping timeout: 240 seconds)
[12:44:07] *** Quits: ZedHedTe1 (~ZedHedTed@pool-173-76-96-161.bstnma.fios.verizon.net) (Quit: Lost terminal)
[12:44:09] *** Joins: aradesh (~aradesh@user/aradesh)
[12:45:16] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:46:41] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[12:51:17] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 240 seconds)
[12:52:22] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[12:57:41] *** Quits: wootz (~wootz@89.46.114.151) (Read error: Connection reset by peer)
[13:01:21] *** immibis_ is now known as immibis
[13:01:56] *** Joins: noarb (~noarb@user/noarb)
[13:03:16] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:04:16] *** Joins: traveller3141 (~chatzilla@95-165-108-8.static.spd-mgts.ru)
[13:05:55] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[13:06:42] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:06:55] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:10:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[13:10:31] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:16:33] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:19:24] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[13:22:08] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[13:23:29] *** Quits: vboykox (~user@234-57-134-95.pool.ukrtel.net) (Ping timeout: 250 seconds)
[13:25:15] *** Joins: vboykox (~user@95.134.24.13)
[13:26:04] *** Joins: random-nick (~random-ni@87.116.167.125)
[13:28:49] *** Joins: xa0s (~xa0s@mab.sdf.org)
[13:31:03] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:34:21] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:35:26] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[13:36:46] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[13:45:58] *** Joins: magla (~gelignite@55d45b98.access.ecotel.net)
[13:46:55] *** Joins: sokan_ (~sokan@2a02:587:9e0a:f500:227:eff:fe16:865d)
[13:47:01] *** Quits: sokan (~sokan@85.73.227.185) (Ping timeout: 245 seconds)
[13:47:18] *** sokan_ is now known as sokan
[13:49:41] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:50:12] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[13:51:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:52:15] *** Joins: Atque (~Atque@user/atque)
[13:53:05] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:03:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[14:03:45] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[14:03:53] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[14:05:12] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:07:15] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[14:09:22] *** Joins: missogra (~missogra@dynamic-077-001-217-168.77.1.pool.telefonica.de)
[14:11:13] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:1181:18a7:7b4:f540)
[14:18:09] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.4)
[14:20:26] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:21:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:23:18] *** Lord_of_Life_ is now known as Lord_of_Life
[14:25:49] *** Quits: missogra (~missogra@dynamic-077-001-217-168.77.1.pool.telefonica.de) (Quit: Leaving)
[14:30:37] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[14:34:42] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[14:34:51] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:35:29] *** Joins: nightbreak (~nightbrea@victors-mbp.dyndns.rice.edu)
[14:38:45] *** Joins: Klinda (~superleag@user/klinda)
[14:39:11] *** Joins: jellie (~luv_panda@user/jellie)
[14:44:45] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[14:45:23] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Read error: Connection reset by peer)
[14:45:32] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[14:45:45] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[14:46:24] <the_lanetly_052> e
[14:46:57] <dave0> eeeeeee
[14:47:59] <ChoHag> 2ish.
[14:48:09] *** Joins: apestoso (~apestoso@host-pool2-13-dynamic.airteknet.com)
[14:51:36] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.4) (Quit: can you please adjust your IRC quit message to be less transphobic?)
[14:54:18] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Ping timeout: 250 seconds)
[14:56:06] *** Quits: Lazenca (~lazenca@user/lazenca) (Remote host closed the connection)
[14:58:46] *** Joins: pert (~pert@fsf/member/pert)
[14:58:47] *** Quits: alch (~alch@151.44.27.193) (Read error: Connection reset by peer)
[14:59:26] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
[14:59:35] *** Joins: bebyx1 (~Thunderbi@user/bebyx)
[15:00:50] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:3db3:b1d2:4da9:9983)
[15:01:53] *** bebyx1 is now known as bebyx
[15:02:47] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:03:09] *** Joins: alch (~alch@151.46.43.206)
[15:03:13] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[15:05:26] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[15:08:08] *** Quits: nightbreak (~nightbrea@victors-mbp.dyndns.rice.edu) (Quit: Signing off for now...)
[15:09:20] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:11:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[15:12:33] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[15:19:35] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[15:20:29] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[15:21:43] *** Quits: magla (~gelignite@55d45b98.access.ecotel.net) (Read error: Connection reset by peer)
[15:21:55] *** Joins: magla (~gelignite@55d45b98.access.ecotel.net)
[15:22:07] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[15:27:03] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.4)
[15:27:17] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[15:28:28] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[15:32:12] *** Joins: pert (~pert@2603-900a-ff00-001c-5de7-3403-ec7b-d597.inf6.spectrum.com)
[15:32:12] *** Quits: pert (~pert@2603-900a-ff00-001c-5de7-3403-ec7b-d597.inf6.spectrum.com) (Changing host)
[15:32:12] *** Joins: pert (~pert@fsf/member/pert)
[15:32:30] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:32:44] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:33:16] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[15:33:29] *** Joins: csrf (~csrf@user/csrf)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:47] *** Joins: pingpongball (~pingpongb@43.228.192.105)
[15:38:59] <pingpongball> New Lisp programmers often describe the language as an eye-opening experience and claim to be substantially more productive than in other languages =$ =$
[15:39:39] <NRK[m]> yes, productively ricing their emacs setup.
[15:40:13] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 250 seconds)
[15:40:26] *** Quits: traveller3141 (~chatzilla@95-165-108-8.static.spd-mgts.ru) (Quit: ChatZilla 0.10 [SeaMonkey 2.53.10.2/20211220132845])
[15:40:34] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.4) (Read error: Connection reset by peer)
[15:40:37] *** Joins: constxd_ (~brad@142.167.170.88)
[15:40:38] *** Joins: Burgundy (~NA@86.121.143.206)
[15:40:46] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.4)
[15:41:27] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 268 seconds)
[15:41:53] <constxd_> happy saturday kings
[15:42:21] *** Joins: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[15:42:56] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[15:44:02] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (Ping timeout: 256 seconds)
[15:46:31] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[15:47:08] <cassepipe> Hi ! Is pthread_mutex_lock on NULL a No-op or will it crash ?
[15:47:22] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[15:48:22] <pert> cassepipe: I'm 99% sure it's undefined behavior since the POSIX doesn't specify the behavior on NULL, but I'll take a peek at the standard to double-check
[15:48:47] <scaramanga> glibc's implementation dereferences it without checking
[15:49:53] <scaramanga> https://code.woboq.org/userspace/glibc/nptl/pthread_mutex_lock.c.html#63
[15:49:55] <candide> Title of scaramanga's link: pthread_mutex_lock.c source code [glibc/nptl/pthread_mutex_lock.c] - Woboq Code Browser
[15:53:59] *** Quits: pingpongball (~pingpongb@43.228.192.105) (Quit: Client closed)
[15:54:47] <cassepipe> So can I expect a no-op ?
[15:56:15] *** Quits: useretail_ (~useretail@185.132.19.151) (Ping timeout: 268 seconds)
[15:57:27] *** Joins: nyjets (~zz@2001:8003:1612:d500:5f6:b6e1:9280:2a52)
[15:57:49] <constxd_> cassepipe: no
[15:59:06] *** Joins: slidercrank (~slidercra@user/slidercrank)
[15:59:21] <cassepipe> cassepipe: I guess I'll just make a wrapper function that checks for NULL then
[16:00:33] <constxd_> but why
[16:01:10] <cassepipe> Sorry I misunderstood. I just thought it was a piece of code that did not check for NULL in glibc but now I get that it is the actual implementation of lock() is glibc that does not check
[16:01:31] <constxd_> right
[16:01:35] <cassepipe> I wonder why do they have their own implementation btw
[16:01:42] <scaramanga> bingo
[16:01:52] <scaramanga> glibc provides libpthread
[16:02:09] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[16:02:09] *** Joins: useretail (~useretail@185.132.19.151)
[16:02:15] <constxd_> but why do you want this wrapper? it sounds like it would be difficult to use correctly
[16:02:23] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[16:02:33] <cassepipe> constxd_: Because I have to make an exercise which is more or less the dining philosophers problem
[16:02:51] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[16:02:57] <cassepipe> constxd_: And it says threads can't talk to each other
[16:03:26] <cassepipe> So to me the waiter solution amounts to an exchange of information between threads, albeit indirect
[16:03:40] *** Quits: ickk (~ickk@user/ickk) (Ping timeout: 260 seconds)
[16:04:02] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Client Quit)
[16:04:04] <cassepipe> What they want from me if I understood correctly is to synchronize the threads so that no ones starves
[16:04:45] <constxd_> lmao
[16:04:49] <cassepipe> So I thouht I can make all the pair numbered philosophers start at some time and all the impair ones start after the pair ones have eaten
[16:05:19] <constxd_> are you french?
[16:05:20] <cassepipe> s/pair/even
[16:05:27] <cassepipe> s/impair/uneven
[16:05:36] * cassepipe blew his cover
[16:06:59] <cassepipe> So if there are an uneven number of philosophers, I noticed that for each turn there will be one that is punished : He can't eat a turn n nor turn n+1
[16:08:15] <cassepipe> I thought a good way of implementing that would be to trigger a no-op, the one that is punished does not try to grab a chopstick every nb_philo turn
[16:08:42] *** Joins: bnchs (~bnchs@41.251.61.78)
[16:09:17] <cassepipe> A way I thought of doing that is to set the one his chopstick pointer to NULL.
[16:09:30] <cassepipe> Can't use trylock btw
[16:09:56] <cassepipe> jsut create, init, destroy, join, detach, lock, unlock
[16:12:39] *** Quits: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[16:15:14] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[16:15:22] <constxd_> cassepipe: so how does he ever eat?
[16:16:28] <cassepipe> At turn n+2
[16:17:41] <cassepipe> One gets "grounded" at each turn
[16:18:21] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (Read error: Connection reset by peer)
[16:18:38] <constxd_> how do the threads know which turn it is?
[16:20:59] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[16:21:57] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[16:25:41] <NRK[m]> constxd_: how did u know he's french?
[16:26:12] <NRK[m]> .oO( or was that supposed to be a joke )
[16:34:13] *** Quits: satanist (~satanist@bureaucracy.bureaucracy.de) (Remote host closed the connection)
[16:36:19] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 250 seconds)
[16:37:41] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (Ping timeout: 252 seconds)
[16:38:15] *** Joins: satanist (~satanist@bureaucracy.bureaucracy.de)
[16:41:18] *** Joins: Sco-Ross (~Sco-Ross3@2a02:c7f:d049:600:303a:9b89:27a0:1e9d)
[16:45:29] *** Joins: bnchs__ (~bnchs@196.89.12.154)
[16:46:49] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 268 seconds)
[16:46:49] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[16:47:35] <cassepipe> constxd_: They don't
[16:47:37] *** Quits: bnchs (~bnchs@41.251.61.78) (Ping timeout: 240 seconds)
[16:47:57] <cassepipe> constxd_: The idea to is to make it time-based
[16:48:09] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[16:48:09] <cassepipe> They all have to spend the same time eating and sleeping
[16:48:53] <cassepipe> NRK[m]: Because I used frenchisms : pair/impair instead of even/uneven
[16:49:38] <cassepipe> constxd_: With a bunch of usleep() calls
[16:50:30] *** Quits: Sco-Ross (~Sco-Ross3@2a02:c7f:d049:600:303a:9b89:27a0:1e9d) (Read error: Connection reset by peer)
[16:50:58] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:61c2:2519:9983:2238) (Quit: Leaving)
[16:51:56] *** Parts: apestoso (~apestoso@host-pool2-13-dynamic.airteknet.com) ()
[16:52:38] <dave0> cassepipe: this mentions sleeping but it says there's no deadlock but possibly livelock... https://en.wikipedia.org/wiki/Dining_philosophers
[16:52:50] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[16:53:56] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[16:54:18] <cassepipe> dave0: If some are sleeping while other are eating I don't think it will livelock
[16:54:59] <cassepipe> I mean the idea is to arrange them so that those who are eating are not in competition for chopsticks with those who are sleepin
[16:55:05] <dave0> i think that's what it means.. if everyone goes to eat at the same time
[16:55:52] <cassepipe> My idea is to start the uneven numbered philosphers at some time and the even ones after they have eateb
[16:56:41] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 250 seconds)
[17:09:04] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[17:09:31] *** Joins: v8IbXNTl (~v8IbXNTl@host-204-118-069-229.dhcp.fewpb.net)
[17:09:37] *** Quits: constxd_ (~brad@142.167.170.88) (Ping timeout: 240 seconds)
[17:10:00] *** Joins: mahmutov (~mahmutov@37.155.41.218)
[17:10:37] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 240 seconds)
[17:14:19] *** Quits: nyjets (~zz@2001:8003:1612:d500:5f6:b6e1:9280:2a52) (Quit: WeeChat 1.1.1)
[17:21:08] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[17:21:31] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:25:43] *** Joins: ic3blx_ (~ic3blx___@87.116.163.2)
[17:25:43] *** Quits: ic3blx_ (~ic3blx___@87.116.163.2) (Changing host)
[17:25:43] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[17:30:10] *** Joins: Sco-Ross (~Sco-Ross3@2a02:c7f:d049:600:ed46:17b6:d1c7:531d)
[17:31:16] *** Joins: Charadon (~Charadon@155.138.164.183)
[17:32:04] *** Joins: sebag (~guest@91.245.82.2)
[17:32:17] *** Joins: plastico (~plastico@neomutt/plastico)
[17:36:17] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:1181:18a7:7b4:f540) (Ping timeout: 240 seconds)
[17:37:39] *** Joins: ferdna (~ferdna@user/ferdna)
[17:39:11] *** Joins: strajder (~strajder@user/strajder)
[17:39:57] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[17:40:57] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[17:41:08] <bnchs__> my vector implementation works, but the memory allocation is fluctuating (130-155~ kb)
[17:41:59] * NRK[m] takes notes
[17:42:18] <NRK[m]> any other frenchismm i need to be aware of?
[17:42:37] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (Quit: WeeChat 3.1)
[17:43:06] <bnchs__> yes, that if you don't care, don't respond
[17:44:03] <NRK[m]> wasn't talking to you
[17:44:19] <NRK[m]> unless you're cassepipe's alt...
[17:44:32] <bnchs__> ping who you're talking to
[17:44:59] <cassepipe> a suit of numbers
[17:45:06] <cassepipe> Is a recent one
[17:45:29] <cassepipe> I'll leave that one for  you to guess
[17:46:02] *** Joins: pingpongball (~pingpongb@43.228.192.105)
[17:55:32] *** Quits: rany (~rany@user/rany) (Quit: The Lounge - https://thelounge.chat)
[17:55:41] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[17:55:46] *** Joins: rany (~rany@user/rany)
[17:56:33] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:ec86:7a91:dddd:e8c7)
[17:56:47] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[17:56:52] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[18:02:27] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[18:04:34] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[18:07:38] *** Joins: graywolf (~wolf@user/graywolf)
[18:10:50] *** Joins: zwr (~zwr@2804:d45:b966:fb00:d3a7:44f8:3616:d9d)
[18:11:51] *** Joins: seninha (~seninha@user/seninha)
[18:13:08] *** Quits: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740) (Quit: Leaving)
[18:15:49] *** Joins: bnchs (~bnchs@196.89.12.154)
[18:16:53] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Remote host closed the connection)
[18:18:10] *** Quits: bnchs__ (~bnchs@196.89.12.154) (Ping timeout: 256 seconds)
[18:19:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:21:05] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:22:11] *** Quits: pingpongball (~pingpongb@43.228.192.105) (Quit: pingpongball)
[18:22:22] *** Quits: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:23:55] <sham1> bnchs: ironic considering that you didn't do it
[18:24:23] <bnchs> didn't what?
[18:25:40] <sham1> bnchs: Ping  who was being talked to
[18:25:55] <bnchs> sham1: ok
[18:26:42] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[18:26:52] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Read error: Connection reset by peer)
[18:28:33] *** Joins: Atque (~Atque@user/atque)
[18:30:49] *** Joins: meator (~meator@user/meator)
[18:33:12] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:36:51] <bnchs> how do i optimize a vector implementation
[18:37:05] <bnchs> vector string
[18:37:14] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[18:39:46] *** Joins: pulse (~pulse@user/pulse)
[18:40:45] *** Quits: v8IbXNTl (~v8IbXNTl@host-204-118-069-229.dhcp.fewpb.net) (Quit: v8IbXNTl)
[18:43:17] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[18:44:24] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 250 seconds)
[18:45:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:1181:18a7:7b4:f540)
[18:45:23] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[18:45:39] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[18:47:47] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[18:48:27] *** Joins: zmt01 (~zmt00@user/zmt00)
[18:51:10] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[18:52:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[18:56:11] *** Joins: ic3blx_ (~ic3blx___@87.116.178.2)
[18:56:11] *** Quits: ic3blx_ (~ic3blx___@87.116.178.2) (Changing host)
[18:56:11] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[18:56:37] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:57:36] *** Quits: piku (~piku@47.202.113.8) (Quit: Leaving)
[19:00:17] *** Quits: alch (~alch@151.46.43.206) (Ping timeout: 240 seconds)
[19:02:33] *** Joins: alch (~alch@151.46.18.38)
[19:08:46] *** Joins: manjaroi3 (~manjaro-i@218.233.99.3)
[19:08:54] *** Quits: Red (~Red@97.109-247-81.customer.lyse.net) (Read error: Connection reset by peer)
[19:12:36] <NRK[m]> optimize in what sense?
[19:13:04] <bnchs> memory?
[19:13:49] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.4) (Ping timeout: 240 seconds)
[19:15:55] *** Joins: j-james (~apropos@dhcp-206-87-158-226.ubcsecure.wireless.ubc.ca)
[19:19:56] *** Joins: Ecophobia (~Ecophobia@kpl223.kuuskaista.fi)
[19:22:50] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 268 seconds)
[19:24:05] *** Quits: pyook (~pyook@user/puke) ()
[19:25:28] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[19:26:37] *** Joins: the_lanetly_052_ (~the_lanet@185.30.90.57)
[19:27:41] *** Joins: Red (~Red@97.109-247-81.customer.lyse.net)
[19:28:57] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.202) (Ping timeout: 240 seconds)
[19:29:10] <Inline> mmx, simd, avx....
[19:30:51] <bnchs> Inline i think i didn't explain it right, it's not a vector kind of vector, but a expanable string kind of vector
[19:33:12] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you later)
[19:37:14] *** Quits: Ecophobia (~Ecophobia@kpl223.kuuskaista.fi) (Quit: WeeChat 3.4)
[19:38:55] <bnchs> like a std::string implementation
[19:39:01] *** Quits: j-james (~apropos@dhcp-206-87-158-226.ubcsecure.wireless.ubc.ca) (Ping timeout: 240 seconds)
[19:41:39] *** Joins: moog (~moog@107.126.53.129)
[19:42:02] *** Quits: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi) (Ping timeout: 240 seconds)
[19:45:22] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[19:46:00] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[19:50:28] <pert> it not being specified is one thing, but I wonder how come the most prominent compilers don't support initialization of automatically-allocated structs' flexible array members? I might turn this paste into a blog post if I feel like it, but I've found some hacks to work around that when it's desirable https://paste.debian.net/1228809
[19:50:32] *** Quits: Red (~Red@97.109-247-81.customer.lyse.net) (Ping timeout: 256 seconds)
[19:51:08] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f444:a000:319a:8ff4:9a9c:6a36)
[19:52:26] <pert> bnchs: it probably won't make a difference unless your buffer is very large or you access it very frequently, but if you don't mind POSIX or Cygwin you could look into posix_madvise which advises the system on the pattern in which you access memory so it can anticipate your usage and try to speed it up https://pubs.opengroup.org/onlinepubs/9699919799/functions/posix_madvise.html
[19:53:03] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[19:53:18] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:ec86:7a91:dddd:e8c7) (Ping timeout: 250 seconds)
[19:53:20] <bnchs> i write more often to it (one character at a time), if i don't know the size
[19:55:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:55:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:55:55] *** Joins: wroathe (~wroathe@user/wroathe)
[19:57:27] <pert> bnchs: unless you know it's a performance bottleneck I wouldn't worry about it then. by writing directly to memory as opposed to something like a file or device, your performance will probaably be blazing anyway. it doesn't pertain to your question, and I don't know what you're trying to do, but are you familiar with the open_memstream() function? it creates a buffered stream (FILE*) you can write to. it takes care of alloc
[19:57:29] <pert> ating memory for the string automatically, and when you flush or close the stream, it gives you an updated pointer to the string you constructed
[19:57:43] *** Joins: myth (~myth@173.233.125.203)
[19:58:02] <pert> *it dynamically allocates the string
[19:58:05] <bnchs> no?
[19:58:09] *** Joins: zmt01 (~zmt00@user/zmt00)
[19:59:03] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[20:00:03] <bnchs> what about memory usage aswell
[20:00:24] <pert> it is a POSIX function, although it's also specified by a little-known ISO C Technical Report as well. it was invented by the GNU Project; they love their dynamic allocation. the man page is pretty good https://www.man7.org/linux/man-pages/man3/open_memstream.3.html
[20:01:53] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:01:57] <pert> by optimize memory usage, I assume you mean you don't want to hog too much memory. open_memstream makes that an implementation detail; in general, it only grows the buffer as needed, but typically does so in a way to maximize performance
[20:02:15] <bnchs> yes
[20:02:50] *** Quits: moog (~moog@107.126.53.129) (Ping timeout: 250 seconds)
[20:02:50] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Ping timeout: 250 seconds)
[20:06:50] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:07:05] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:07:19] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:08:25] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[20:08:31] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[20:08:42] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[20:09:16] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[20:10:35] *** Quits: Sco-Ross (~Sco-Ross3@2a02:c7f:d049:600:ed46:17b6:d1c7:531d) (Quit: Leaving)
[20:16:58] *** Joins: soapsudsxx (~soapsudsx@209.221.40.147)
[20:18:20] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Quit: WeeChat 3.3)
[20:19:08] *** Quits: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740) (Remote host closed the connection)
[20:21:26] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:21:26] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[20:26:47] *** Joins: joilerv (~joilerv@135.129.250.144)
[20:27:03] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:28:11] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[20:28:40] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[20:30:35] *** Joins: crashrep (~crashrep@user/crashrep)
[20:32:17] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Ping timeout: 240 seconds)
[20:33:45] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 268 seconds)
[20:38:08] *** Quits: the_lanetly_052_ (~the_lanet@185.30.90.57) (Ping timeout: 256 seconds)
[20:38:55] *** Quits: nuxil (~nuxil@141.195.51.213) (Remote host closed the connection)
[20:39:15] *** Joins: nuxil (~nuxil@141.195.51.213)
[20:40:25] *** Quits: nuxil (~nuxil@141.195.51.213) (Remote host closed the connection)
[20:41:02] *** Joins: korg815 (~korg815@user/korg815)
[20:41:18] *** Quits: korg815 (~korg815@user/korg815) (Client Quit)
[20:41:33] *** Joins: korg815 (~korg815@user/korg815)
[20:42:20] *** Joins: ic3blx_ (~ic3blx___@87.116.178.2)
[20:42:20] *** Quits: ic3blx_ (~ic3blx___@87.116.178.2) (Changing host)
[20:42:20] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[20:42:40] *** Quits: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se) (Read error: Connection reset by peer)
[20:43:04] *** Joins: j-james (~apropos@dhcp-206-87-158-226.ubcsecure.wireless.ubc.ca)
[20:43:48] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[20:48:40] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[20:48:52] *** Joins: bebyx (~Thunderbi@user/bebyx)
[20:48:57] *** Quits: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740) (Quit: Leaving)
[20:50:33] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Changing host)
[20:50:33] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[20:55:23] *** Joins: Akuli (~Akuli@82-203-163-88.bb.dnainternet.fi)
[20:57:12] *** Joins: seninha_ (~seninha@user/seninha)
[20:57:58] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[20:59:39] *** Quits: Echoz (~chris@user/echoz) (Ping timeout: 268 seconds)
[21:01:05] *** Joins: luckyxxl (~luckyxxl@185.209.196.143)
[21:04:57] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[21:05:39] *** Joins: soupladler (~soupladle@ip2504fb93.dynamic.kabel-deutschland.de)
[21:05:46] *** Quits: seninha_ (~seninha@user/seninha) (Ping timeout: 245 seconds)
[21:06:47] <soupladler> hey, so if you have a pointer returned from bsearch, is it legit to use that to iterate over the region of the array you got it from?
[21:07:04] <soupladler> is it also legit to do so with a stride of 2? So like, ptr += 2?
[21:08:03] <soupladler> then to make sure you're not going over the end by doing something like if ptr < array_end_ptr?
[21:08:17] *** Quits: pert (~pert@fsf/member/pert) (Ping timeout: 240 seconds)
[21:08:36] *** Quits: soupladler (~soupladle@ip2504fb93.dynamic.kabel-deutschland.de) (Client Quit)
[21:08:51] *** Joins: AmR (~AmREiSa@156.207.146.251)
[21:08:57] *** Joins: soupladler (~soupladle@ip2504fb93.dynamic.kabel-deutschland.de)
[21:10:03] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[21:10:24] *** Quits: frostygoth (~frostygot@li1566-163.members.linode.com) (Quit: Leaving)
[21:10:28] <fizzie> To iterate over the array, yes; with a stride of >1 though, strictly speaking it's undefined to even construct a pointer more than one element past the end, so in a strictly conforming program you'd need to switch to using indices instead.
[21:10:52] <fizzie> You can always turn the pointer returned by bsearch back to an index by subtracting the address of the 0th element.
[21:11:44] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 250 seconds)
[21:12:04] <soupladler> OK, I was worried about the undefined-2-over issue, and the subtracting-address approach was the first one I tried. It was just a bit more messy.
[21:12:44] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:f8f2:a6ee:f8f:27a0)
[21:12:48] <soupladler> In general, should I prefer to use indexes? I'm new to C and it just seems like you can make some super elegant programs just with pointer math
[21:13:01] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[21:13:06] <ChoHag> Avoid pointer maths until you know why you should.
[21:13:22] <ChoHag> But yes, very nifty tricks.
[21:13:35] <soupladler> too many undefined edge cases to do so without memorizing the standard?
[21:14:00] <ChoHag> Not just undefined. It's packed with gotchas.
[21:15:30] *** Joins: bebyx (~Thunderbi@user/bebyx)
[21:15:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:15:52] <soupladler> Ok, cool. Thanks! Another question is, is there like a standard set of headers for stuff like hashmaps or commonly used datastructures? I heard about glib, but it seemed kinda complicated
[21:15:59] *** Quits: joilerv (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:16:00] <ChoHag> Lots.
[21:16:14] <soupladler> Any reccomendations?
[21:16:27] <ChoHag> Think smaller?
[21:16:43] <ChoHag> Pick one and follow its documentation until the documentation fails to work or the program works.
[21:16:58] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f444:a000:319a:8ff4:9a9c:6a36) (Ping timeout: 260 seconds)
[21:17:22] <ChoHag> glib is at least established but I don't like it, and not only because it's from gnu.
[21:17:28] *** Joins: joilerv (~joilerv@135.129.250.144)
[21:18:23] <soupladler> It's just very hard to judge because I'm not a c guy. I'm writing programs predominantly in lua then writing stuff in C when I care about stuff lua gives you little control over.
[21:18:36] <soupladler> So my ability to judge the quality of code is minimal.
[21:18:45] *** Joins: hanzo (uid532183@user/hanzo)
[21:19:07] <ChoHag> That's alright. It's all awful.
[21:19:31] <ChoHag> So you can't do worse until you know enough to do better.
[21:19:34] *** pflanze_ is now known as pflanze
[21:19:37] *** Joins: meator (~meator@user/meator)
[21:20:23] <ChoHag> Generally if you want to use more complex data structures you'd use a higher-level language like lua.
[21:20:41] <pflanze> Is there any way to move `var` and `_vec_for_each_tst` here into the scope surrounded by the for?: https://bpa.st/SQIQ
[21:21:22] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[21:21:22] <ChoHag> pflanze: Add braces?
[21:21:25] <pflanze> I've tried moving it inside the A and B fields in `for (A; B; C)` using the comma operator but that seems not allowed by C.
[21:21:40] <pflanze> ChoHag, but the user is meant to write the braces.
[21:21:52] <ChoHag> Oh that's just the opener. Jeez that's big.
[21:22:24] <pflanze> It's big because it's contorted, because I couldn't put `var` inside the scope.
[21:22:55] <ChoHag> Can you use commas? for (T var, bool _vec_thing, size_t _other_thing = 0; ...)?
[21:23:09] <pflanze> That's what I tried but gcc didn't accept it.
[21:23:17] *** Quits: bnchs (~bnchs@196.89.12.154) (Ping timeout: 240 seconds)
[21:23:17] <ChoHag> Or braces: for ({ T var; bool _foo; size_t _bar}; ...)
[21:23:24] <fizzie> You can only have a single initial declaration in a `for` statement.
[21:23:25] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[21:23:32] <fizzie> And a single declaration -> single type specifier.
[21:24:03] <fizzie> You can have a lot of *declarators*, so you can declare an `int` and an `int *` and an `int (*)(char)` and an `int[4]`, but not an `int` and a `bool`.
[21:24:04] <ChoHag> Or add braces and #define VEC_END_FOR_EACH }
[21:24:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:24:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:24:07] *** Joins: wroathe (~wroathe@user/wroathe)
[21:24:18] <ChoHag> Or use a struct.
[21:24:42] <pflanze> VEC_END_FOR_EACH, sure, but that's bad visually and for jumping in editors.
[21:24:48] <pflanze> How do you mean use a struct?
[21:24:53] <fizzie> The struct is an option, yes.
[21:24:54] <ChoHag> Well what using the c preprocessor isn't ugly?
[21:25:12] <fizzie> It just doesn't let you use plain `var` inside the loop to refer to it.
[21:25:19] *** Joins: moog (~moog@107.126.53.88)
[21:25:37] <ChoHag> for (struct { T var; bool _foo; size_t _bar } iter = { ._bar = 0}; ...)
[21:25:40] <ChoHag> Or something like that.
[21:25:52] <pflanze> Aha, wow.
[21:26:13] <fizzie> The "problem" is that you need to use `iter.var` inside the body then.
[21:26:18] <fizzie> If you're okay with that, it's fine.
[21:26:27] <pflanze> Ah yes; hm.
[21:26:33] <ChoHag> Or var.iter
[21:26:40] <ChoHag> struct { T iter; ... } var
[21:26:47] *** Quits: joilerv (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:26:53] <fizzie> Or that.
[21:27:04] <fizzie> There's also another *terrible* workaround (that I've actually seen someone here use) that involves nested for loops and an extra dummy flag to make the outer loops only execute once.
[21:27:12] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[21:27:12] <ChoHag> I'd argue that's at least the cleaner of the two suboptimal solutions.
[21:28:02] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[21:28:30] <ChoHag> Oh hmm ... for (int i = 1; i; ) for (T var; i--; ) for (j = 1; j; ); for (bool _foo; j--; ) etc.
[21:28:31] <fizzie> #define VEC_FOR_EACH(T, var, vec) for (struct { bool done, test; size_t i; } vec_data = { false, false, 0 }; !done; vec_data.done = true) for (T var; ...)
[21:28:35] <ChoHag> I might have my off-by-ones off by one.
[21:28:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[21:28:39] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:b145:6efe:44b7:516c)
[21:29:09] <pflanze> Interesting, outer for loop just for the variable, without braces.
[21:29:15] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[21:29:21] * pflanze away for a bit
[21:29:31] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[21:29:33] <ChoHag> Don't do that.
[21:29:48] <ChoHag> That's exactly how you tell whoever reads the code that you hate them.
[21:30:19] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[21:30:57] <ChoHag> How do you define a for loop which executes exactly once without declaring an iterator?
[21:31:15] <ChoHag> ie. the wrong(er) way to do do { ... } while (0).
[21:31:25] <Rounin> I mean, you could break; inside it :P
[21:32:10] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[21:32:16] <Rounin> Maybe you could #define for 1;
[21:32:30] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[21:32:44] *** Joins: meator (~meator@user/meator)
[21:32:59] <Rounin> or like... #define for(x) if(true)
[21:33:08] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:33:13] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[21:33:38] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[21:33:40] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[21:33:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:34:16] *** Quits: moog (~moog@107.126.53.88) (Ping timeout: 250 seconds)
[21:35:04] *** Joins: moog (~moog@107.126.53.88)
[21:35:19] <ChoHag> #define once(t, s, v) for (int i = 1; i; ) for (t a = (v); i; i--)
[21:35:26] <fizzie> If C ever picks up the C++ feature of `if` statement initial declarations, you could use `if (<extra declarations>; true) for (T var; ...; ...)` for that, without having to worry about how to make the outer loop stop.
[21:35:51] <sham1> That'd be lovely
[21:37:57] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[21:38:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[21:39:54] *** Quits: soupladler (~soupladle@ip2504fb93.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[21:40:34] <fizzie> FWIW, the pasted example already *has* a flag (`_vec_for_each_tst`) that could be directly used in the outer loop, if (and only if) you don't care about `break;` in the inner loop working properly. Other than that, I don't think there's a way to do it without introducing an extra bit of state for the outer loop.
[21:41:46] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[21:43:08] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[21:46:25] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[21:46:49] <Rounin> fizzie: Hmm... Doesn't C have labeled breaks?
[21:46:59] <Rounin> So basically goto by another name
[21:47:15] <Rounin> I must have missed the description of why one would do this though
[21:47:22] <fizzie> It doesn't.
[21:47:33] <Rounin> Ah... Well, there's still goto of course
[21:47:44] <ChoHag> There is of course goto or breaks can be numbered.
[21:48:07] <fizzie> Yes, but you can't add a label after the loop when the goal is to make a macro that can make `VEC_FOR_EACH(...) { ... }` act like a built-in looping construct.
[21:48:15] <ChoHag> while (1) while (1) break ... 2? Maybe 1. I prefer goto.
[21:48:37] <ChoHag> Yeah but to be honest that's basically macro abuse.
[21:48:58] <fizzie> Sure, but it's a free country.
[21:49:23] <ChoHag> So they say.
[21:49:33] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[21:49:40] <Rounin> Hm... Where would the length of the vector be stored anyway, if it's plain C? Would it be null-terminated?
[21:49:43] <fizzie> C doesn't have multi-level breaks with numbers either. Which I'm happy about; I've always found them pretty terrible compared to labeled breaks.
[21:50:02] <ChoHag> Wherever you choose.
[21:50:07] *** Joins: piotr (~piotr@user/filystyn)
[21:50:14] <piotr> so back to my question from yesterday
[21:50:17] <fizzie> "The vector" in the contextual case here is a struct with a data pointer and a length field.
[21:50:18] *** piotr is now known as Filystyn
[21:50:40] <fizzie> I seem to recall someone told me PHP no longer allows `break $n;` where the number of levels to break is not a constant.
[21:51:10] <fizzie> (PHP *does* have multi-level breaks of that kind.)
[21:51:14] *** Joins: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi)
[21:52:30] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:cdc3:ec29:d616:f18b)
[21:52:30] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:cdc3:ec29:d616:f18b) (Changing host)
[21:52:30] *** Joins: skapata (~Skapata@user/skapata)
[21:53:55] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 268 seconds)
[21:54:25] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[21:54:46] *** Joins: meator (~meator@user/meator)
[21:56:04] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[21:57:40] <Rounin> I mean... I made this in like 2 minutes
[21:57:42] <Rounin> #define foreach(x) for(int i=0;i<x;++i)
[21:57:42] <Rounin> int main(int* argc, char** argv) {
[21:57:42] <Rounin> foreach(10) { printf("!\n"); }
[21:57:42] <Rounin> }
[21:57:43] *** ChanServ sets mode: +o candide
[21:57:43] *** candide sets mode: +b *!~david@84.*
[21:57:51] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[21:58:44] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:1181:18a7:7b4:f540) (Quit: Quit)
[21:58:47] <ChoHag> ... and now I wish I didn't.
[21:58:57] <ChoHag> Besides that's more forupto than foreach.
[21:58:58] *** candide sets mode: -b *!~david@84.*
[21:59:17] <Rounin> Yeah, but obviously you'd make it take the length from your struct and not from x
[21:59:29] <ChoHag> I'd expect foreach to iterate over an array.
[21:59:35] *** Quits: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com) (Ping timeout: 250 seconds)
[21:59:45] <ChoHag> Or some other kind of set but arrays is basically what C has.
[21:59:50] <Rounin> In that case, you'd use sizeof, I suppose?
[22:00:02] <ChoHag> I'd just write it out without CPP wizardry.
[22:00:15] <ChoHag> for (p = start; p < end; p++)
[22:00:45] <Rounin> Yeah... It's kind of a niche use... How often do you even have an array with a known length
[22:01:05] <ChoHag> for (p = start; !delimited(p); p++)
[22:01:33] *** Joins: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com)
[22:02:06] <ChoHag> #define delimited(c) ((c) == '\0') /* For ``strings''. */
[22:02:09] <Rounin> But either way, it seems more simple to me than the nested loop discussion above made it seem
[22:02:43] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[22:02:55] <ChoHag> Yeah that was all about reductio the ad absurdam.
[22:03:04] <ChoHag> s/reductio the/the reductio/
[22:03:16] <ChoHag> Fingers...
[22:04:14] <ChoHag> Generally in C if you think you might be doing something too magical, you are.
[22:05:11] <Rounin> I can see a use for a foreach if you have a clear idea of what you want, though... Like if you know that all your collections will have a length field at exactly x or always be null/terminated or whatever
[22:05:21] <Rounin> But it'll become kind of your personal programming language at that point
[22:06:19] <ChoHag> To properly implement a general foreach operator you'd need the concept of a range which C doesn't have.
[22:06:29] <Rounin> Hmm... Then again, for the latter case, there's "while"
[22:06:53] <Rounin> Yeah... You'd kind of be reinventing D or C++
[22:06:57] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[22:07:09] <ChoHag> for (X; Y; Z) { ... } == X; while (Y) { ...; Z; }
[22:07:42] *** Joins: bnchs (~bnchs@196.89.12.154)
[22:07:43] <ChoHag> for is basically syntactic sugar.
[22:08:27] <ChoHag> I might need a do in there to put the test at the end but you get the idea.
[22:09:05] <ski> it's at the beginning
[22:09:43] <Rounin> It might make for a fun coding competition, though... Like, how much syntactic sugar can you add without doing a pre-pass of any kind... Just by using the preprocessor and standard-compliant C
[22:10:02] <nomagno> In the end it all reduces to while, yes
[22:10:16] <ChoHag> while is just goto in a dress.
[22:10:30] *** Joins: pyook (~pyook@user/puke)
[22:10:38] <ChoHag> Good timing that man.
[22:10:39] <ski> it's worth your while
[22:10:56] <fizzie> Rounin: The difficulty in the original question (and the reason it needs the nested loops, or something similar) is in allowing the `foreach(T, var, vec) { ... }` syntax to declare both `var` (the *value* at each position, of type T; not the index) and an iterator (your `i`) when they have different types. It becomes a lot simpler if you relax those constraints.
[22:11:00] <no-n> so is if :P
[22:11:08] <nomagno> "While" reduces to the typical "LOOP" instruction, which is a dressed up JZ
[22:11:15] <no-n> hmm, not really actually
[22:11:29] <ChoHag> fizzie: I balk at macros which take a type. They're bad enough handling expressions.
[22:11:33] <Filystyn> So my question: If I have in my program #include "../otherlib/src/function.c"  compilation cc program.c -o program simply  works like the included.c stuff gets compiled in the shadows and statically linked
[22:11:42] <Filystyn> Is this like lol, normal behavior
[22:11:51] <Filystyn> I discovered it by mistake tbh
[22:12:00] <Filystyn> note .c
[22:12:01] <Rounin> fizzie: Ah, right, that looks more challenging indeed
[22:12:06] <bnchs> #include includes the file in your file
[22:12:09] <CodeAgain> Fl0pFl1p if you #include it it's like having it all in the same file, isn't?
[22:12:21] <ChoHag> Filystyn: A line ``#include "foo"'' is like going to an editor, opening the file "foo" and replacing the ``#include "foo"'' line with its contents verbatim.
[22:13:06] <ChoHag> No magic is done to do the including once the file is found, then preprocessing continues as normal.
[22:13:06] <Filystyn> I thught there is more magic to it ;-)
[22:13:14] <CodeAgain> Nope
[22:13:17] <ski> just make sure you don't include a `.c' file into multiple files, and then link those together
[22:13:36] <ChoHag> No magic.
[22:13:37] <CodeAgain> Fl0pFl1p everything in the macro preprocessor (#include, #define, etc) replaces something into your original code
[22:13:49] <no-n> I don't think there's ever a situation in which you should include a .c
[22:13:53] <Filystyn> Ok, that .c was a mistake on my side nayway, I wanted .h ;-)
[22:13:58] <no-n> oh
[22:14:07] <bnchs> a.c: you suck | b.c: #include "a.c" and swallow | you suck and swallow
[22:14:10] <Filystyn> just was suprised code compiled
[22:14:20] <no-n> charming
[22:14:30] <ChoHag> Cheap.
[22:14:32] <bnchs> good for templates
[22:14:35] *** Joins: constxd_ (~brad@142.167.170.88)
[22:15:02] <ski> i guess one could treat a `.c' like a "macro", passing parameters to it by using `#define'
[22:15:03] <nomagno> I'm still looking for ways to simplify my instruction set... Current state: {HALT, NOP, JMP, JCZ, JCNZ, SET, SUB, ADD, CMP, OR, AND, XOR, ROT, SUBS, SUBE, CALL}
[22:15:06] <Filystyn> thx for help guys
[22:15:18] *** Quits: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:15:23] <ChoHag> nomagno: Write me a generational garbage collector and I'll tell you.
[22:15:25] <nomagno> Since the VM is fully address-based, there are no registers so no need for load/store
[22:15:25] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[22:15:26] <CodeAgain> I've heard c++ recently adopted or is adopting something different from the include now, modules or something
[22:15:34] <no-n> yes
[22:15:38] <CodeAgain> In that case it might be different
[22:15:43] <bnchs> momagno: no registers? how do you do functions
[22:15:43] <Rounin> Hmmm... Well, it's kind of subjective, nomagno... Turing had like 4-5 instructions... Someone made an isntruction set with just one instruction... Subnleq or something like that
[22:15:44] *** Joins: meator (~meator@user/meator)
[22:15:54] <bnchs> yo uneed stack registers
[22:16:13] <ski> no-n : what's `SUBS' and `SUBE' ?
[22:16:17] <ski> er, nomagno ^
[22:16:19] <nomagno> I'm trying to fit as much functionality as possible into 16 instructions
[22:16:21] <no-n> :^)
[22:16:38] <Rounin> Ah, right... So it's a matter of which ones are the most powerful... That makes sense
[22:16:39] <nomagno> ski: That's for subroutines.
[22:16:46] <nomagno> yeah
[22:16:47] <ski> oh, i thought `CALL' was
[22:17:04] <Rounin> Hmm... Isn't "Call" kind of syntactic sugar, though? It might be faster to have it, but still
[22:17:04] <ski> where's `RTS' ?
[22:17:11] <Rounin> You could just push things onto the stack
[22:17:11] <nomagno> Well, SUBS -> SUBROUTINE START, SUBE -> RETURN
[22:17:18] <bnchs> nomagno: how do you execute functions with arguments
[22:17:22] <supakeen> ttps://github.com/xoreaxeaxeax/movfuscator
[22:17:30] <nomagno> Then CALL->CALL
[22:17:30] <ski> hm, so what's `SUBS' for, then ?
[22:17:33] <nomagno> no callstack
[22:17:33] <bnchs> do you push it in the stack or use registers
[22:17:39] <ski> (why have an instruction for where it starts ?)
[22:17:41] <Rounin> And there seem to be three different jumps
[22:17:44] *** Joins: Alhazred (~Alhazred@86.106.74.37)
[22:18:14] <nomagno> bnchs: Well you don't
[22:18:19] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:18:23] <nomagno> https://halfworld.nomagno.xyz/specs/HWVM_SPEC.html
[22:18:25] <candide> Title of nomagno's link: Half-World Virtual Machine
[22:18:26] <nomagno> All defined here
[22:18:32] <nomagno> Uh
[22:18:34] <nomagno> Wait
[22:18:43] <nomagno> This is the wrong channel
[22:18:46] <nomagno> I just realized this is #c
[22:18:47] <nomagno> Sorry.
[22:18:51] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[22:19:07] <no-n> what channel was it meant for? I'm interested now.
[22:19:11] <Rounin> Same :D
[22:19:40] <bnchs> c is simply a low-level language, next to assembly
[22:19:53] <no-n> ok
[22:19:54] <ChoHag> assembly++
[22:19:57] <CodeAgain> Heyy, I'm having a weird behavior on a code using the non-POSIX getopt_long... The output shows that some options called only once are getting called, like, multiple times, and running GDB it seems like it's returning the same option over and over again (but it's like the 4th argument, the first 3 are okay)
[22:20:14] <CodeAgain> Any common beginner's mistake you might think of?
[22:20:17] <ski> nomagno : wait .. no recursion ?
[22:20:26] <nomagno> Hm, well probably ##programming/#osdev
[22:20:28] *** Joins: aradesh (~aradesh@user/aradesh)
[22:20:29] <nomagno> ski: You use iteration, yes
[22:20:33] <ChoHag> CodeAgain: Using a weird implementation of getopt_long rather than the standard.
[22:21:09] <CodeAgain> ChoHag is there a standard getopt_long? I thought it was a GNU thing
[22:21:18] <ChoHag> POSIX would be a start.
[22:21:24] <ski> nomagno : what about coroutines ?
[22:21:31] <nomagno> It's a pure Harvard architecture, register-less Minimal Instruction Set Computing arch
[22:21:37] <CodeAgain> POSIX just have the short options
[22:21:55] <ski> yea, i was just wondering if it wasn't von Neumann
[22:21:57] <ChoHag> Didn't GNU get their fingers into that?
[22:22:00] <Rounin> nomagno: I wonder, though... Having JMP, CMP, and two jumps wich seem to do some kind of comparison might present an opportunity for simplification
[22:22:03] <ChoHag> Well long options suck anyway.
[22:22:20] <Rounin> nomagno: Technically it might only need one or two of those
[22:22:24] <nomagno> Rounin: CMP is substraction without saving the result
[22:22:29] <ChoHag> Definite sign of a design failure.
[22:22:35] <pragma-> long options are great when you have to read someone else's script and you have no clue what -c or -x or -e does.
[22:22:41] <nomagno> The jmps are JMP, JCZ, JCNZ
[22:22:41] <ChoHag> Like a function taking 100 arguments.
[22:22:44] <Rounin> nomagno: And I wonder if RISC-V XORs something with 0 to implement a NOOP rather than having an actual instruction
[22:23:08] <CodeAgain> ChoHag LOL I think they're not bad, specially when you have to implement security unwise options, i.e. --ignore-certificate
[22:23:14] <ChoHag> pragma-: Not the user's fault the developer didn't document their code, although it is their fault they used it.
[22:23:19] <CodeAgain> They make the user think about that twice
[22:23:26] <nomagno> I found these three JMPs vastly increased code density
[22:23:33] <ChoHag> CodeAgain: That's what the shift key is for.
[22:23:45] <ChoHag> -F for --really-force-no-I-mean-it
[22:23:49] <ski> syntactic salt can be useful
[22:24:09] <nomagno> JMP -> just move program counter
[22:24:09] <nomagno> JCZ -> move PC if zero flag is zero
[22:24:09] <nomagno> JCNZ -> move PC if zero flag is nonzero
[22:24:10] <Rounin> nomagno: Ah... If they're backed by actual empirical observation, it's probably a good idea
[22:24:16] <ChoHag> The command line was not meant for people who don't read manpages.
[22:24:19] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[22:24:23] <nomagno> Rounin: yeah
[22:24:27] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[22:24:36] <ski> nomagno : hm, zero flag is cleared when result becomes zero ?
[22:24:48] <CodeAgain> Well, then someday you wanna use -f but you just woke up and your arm pressed the shift key by accident in your new and small keyboard LOL
[22:24:58] <nomagno> ski: Yeah
[22:25:07] <ChoHag> If your arm can fat-finger shift you have bigger problems.
[22:25:18] <ski> i guess that's .. untraditional
[22:25:29] <ChoHag> After solving that worry about why you don't review what you typed before hitting enter.
[22:25:32] <nomagno> ROT is essentially a fancy bitshift
[22:25:41] * ski . o O ( cat-finger )
[22:25:50] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Remote host closed the connection)
[22:26:05] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[22:26:10] <nomagno> Bitshift left if bitshift value is less than 8, else bitshit by (value-8)
[22:26:16] <CodeAgain> That's why the "you just woke up" part
[22:26:23] <nomagno> If it is more than 16, just don't do anything, that's definitely an error
[22:26:23] <ChoHag> Nope.
[22:26:31] <nomagno> 15*
[22:26:37] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[22:26:42] <CodeAgain> Anyway, I think long options became like very popular
[22:26:45] <ChoHag> With the right coffee machine you don't need to worry about pre-post-wake-up-mistypes.
[22:27:03] <CodeAgain> Besides, you're limited to a finite number of options with the standard getopt
[22:27:25] <ChoHag> If you proposed a function with >= 512 arguments you would be justly mocked.
[22:27:38] <ChoHag> Sorry 52.
[22:28:09] <nomagno> I did recently move away from a three-operand model for the big instruction (operand 1, operand2, dest) to a two-operand model (operand1/dest, operand2)
[22:28:19] <ChoHag> Main with long arguments is just such a thing.
[22:28:23] <nomagno> Which reduces code density but makes everything much less cumbersome
[22:28:32] <nomagno> And performant
[22:28:37] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 250 seconds)
[22:28:46] <ski> nomagno : why not `value - 16' ?
[22:29:06] <CodeAgain> Okay, you convinced me that getopt_long is not strictly necessary, but I still prefer long options LOL
[22:29:15] <ChoHag> They're pretty.
[22:29:18] <nomagno> ski: Addresses are 8-bits wide
[22:29:44] <CodeAgain> And they are supposed to work, like, a lot of stuff uses it and they manage to make it work somehow
[22:30:08] <nomagno> And the code memory, which does have 16-bit words, is read-only/non-memory-mapped
[22:30:08] <ChoHag> I'm pretty sure getopt_long supports both long and short options in-place.
[22:30:38] <ChoHag> Not having single-character options is the CLI equivalent of a GUI without shortcut keys.
[22:30:46] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Remote host closed the connection)
[22:31:04] <CodeAgain> ChoHag yes, it does and I am using both on my tests
[22:31:13] <ski> nomagno : hm, it looked like `16' bits, from a glance at that page
[22:31:22] <ski> hm
[22:31:53] <nomagno> ski: Well the address space is 16 bits... So yeah there's a lot of ways to handle two words at once
[22:32:21] <bnchs> nomagno: is there an emulated video I/O
[22:32:24] <ski> addressing modes ?
[22:32:31] <nomagno> Since you need to be able to refer to 64K different addresses
[22:32:35] <bnchs> like video memory map
[22:32:36] *** Quits: Alhazred (~Alhazred@86.106.74.37) (Ping timeout: 256 seconds)
[22:33:15] *** Quits: baltazar (~baltazar@84-236-21-114.pool.digikabel.hu) (Quit: reboot: system upgrade)
[22:33:29] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[22:33:33] <nomagno> bnchs: Well no, I leave around 16KBs unmapped to add precisely that in the future. But it would be as part of the game it's used for
[22:33:39] <nomagno> Not as part or the main implementation
[22:34:23] <nomagno> ski: Well, you have literal/immediate value, address, and pointer. Pointers essentially take two words at once and interpret them as a single address
[22:34:54] <ski> indirect, iow
[22:34:57] <nomagno> And I also include a preprocessor script with the VM source
[22:35:30] <bnchs> and sound?
[22:35:34] <nomagno> So you can do fun things like #d IMPORTANT_CODE, INST1 INSERT_NEWLINE INST2
[22:36:09] <nomagno> bnchs: That's just something the extensor's going to need to handle themselves
[22:36:38] <nomagno> In theory there's only three small functions and a struct you need to modify to add memory mappings for different stuff
[22:37:00] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[22:37:44] *** Joins: meator (~meator@user/meator)
[22:37:47] <nomagno> You have 16KBs (- 16 bytes for the flag section of memofy) to map by default, if you want to keep compatibility with existing programs
[22:39:39] <nomagno> This CPU is around the boxing class of the 6502, save for being almost impossible to implement in bare metal
[22:39:51] <nomagno> It does hold its own.
[22:40:21] <bnchs> i wonder if you can write a NES emulator in the VM
[22:41:05] * ski . o O ( <https://www.retrosummit.com/2019/09/24/project-commander-x16/>,<https://www.c64-wiki.com/wiki/Commander_X16> )
[22:41:32] <nomagno> bnchs: The NES is about as capable as this VM, save for having a radically different memory mapping
[22:41:54] <nomagno> So it's probably a thankless, painful, almost-impossible job
[22:42:36] <nomagno> Unless you implement ROM bank switching and shrink the 32KBs of data memory
[22:42:45] <bnchs> your VM can handle 16-bit data
[22:42:49] <nomagno> Then it's... Only slightly better
[22:42:59] <nomagno> bnchs: Just as the NES can.
[22:43:04] <nomagno> Doesn't mean it does it natively
[22:43:28] <nomagno> Or, well, MORE naively
[22:43:30] <nomagno> Rather
[22:43:38] <nomagno> Natively*
[22:43:40] <bnchs> nes could only handle 8-bit data
[22:46:08] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (Read error: Connection reset by peer)
[22:46:21] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[22:48:08] *** Joins: bnchs__ (~bnchs@196.65.45.53)
[22:49:00] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[22:49:15] *** Joins: meator (~meator@user/meator)
[22:50:32] *** Joins: soupladler (~soupladle@ip2504fb93.dynamic.kabel-deutschland.de)
[22:50:32] *** Quits: bnchs (~bnchs@196.89.12.154) (Ping timeout: 250 seconds)
[22:55:03] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 250 seconds)
[22:56:24] *** Quits: bnchs__ (~bnchs@196.65.45.53) (Ping timeout: 256 seconds)
[22:57:12] <apotheon> "native" is "naïve", perhaps
[22:57:54] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[22:58:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:58:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:58:25] *** Joins: wroathe (~wroathe@user/wroathe)
[22:58:31] *** Quits: alch (~alch@151.46.18.38) (Read error: Connection reset by peer)
[22:58:40] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 256 seconds)
[22:59:21] *** Joins: baltazar (~baltazar@84-236-21-114.pool.digikabel.hu)
[23:00:14] *** Joins: digilink (~digilink@user/digilink)
[23:02:40] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[23:02:54] *** Joins: alch (~alch@151.38.56.177)
[23:03:05] *** Joins: Alhazred (~Alhazred@86.106.74.43)
[23:03:10] *** Joins: korg815 (~korg815@user/korg815)
[23:05:27] *** Quits: soupladler (~soupladle@ip2504fb93.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[23:08:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[23:10:58] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[23:11:12] *** Joins: bnchs (~bnchs@160.177.187.182)
[23:11:16] *** Joins: meator (~meator@user/meator)
[23:14:26] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[23:20:46] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[23:21:41] *** Joins: Betal (~Betal@user/betal)
[23:22:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[23:26:27] *** Joins: jx0 (~jx0@199.229.250.145)
[23:27:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[23:28:25] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[23:29:12] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[23:30:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:31:16] *** Quits: Lyude (~lyudess@pool-98-118-105-43.bstnma.ftas.verizon.net) (Ping timeout: 250 seconds)
[23:32:08] *** Quits: nicode (~nic@45.72.226.166) (Ping timeout: 250 seconds)
[23:32:30] *** Joins: vicfred (~vicfred@user/vicfred)
[23:38:25] *** Quits: cust (amaama@2607:f2c0:f00f:2500::3) (Remote host closed the connection)
[23:39:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:39:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:39:16] *** Joins: wroathe (~wroathe@user/wroathe)
[23:41:29] *** Joins: bnchs__ (~bnchs@160.177.187.182)
[23:41:55] *** Quits: bnchs (~bnchs@160.177.187.182) (Remote host closed the connection)
[23:42:14] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
[23:42:14] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:b145:6efe:44b7:516c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:42:49] *** Joins: Guest51 (~Guest51@187.65.10.78)
[23:42:50] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[23:44:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:44:21] *** Joins: Lyude (~lyudess@pool-96-230-100-15.bstnma.fios.verizon.net)
[23:46:14] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[23:47:00] *** Joins: bnchs___ (~bnchs@105.157.163.28)
[23:47:35] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[23:48:11] *** Parts: Guest51 (~Guest51@187.65.10.78) ()
[23:49:28] *** Quits: bnchs__ (~bnchs@160.177.187.182) (Ping timeout: 250 seconds)
[23:49:42] *** Joins: sebag (~guest@91.245.82.2)
[23:50:15] *** Joins: ic3blx_ (~ic3blx___@87.116.178.2)
[23:50:15] *** Quits: ic3blx_ (~ic3blx___@87.116.178.2) (Changing host)
[23:50:15] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[23:50:17] *** Quits: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740) (Read error: Connection reset by peer)
[23:50:19] *** Joins: G001 (~G001@ti0111q160-4567.bb.online.no)
[23:50:53] *** Joins: ic3blx_ (~ic3blx___@87.116.178.2)
[23:50:53] *** Quits: ic3blx_ (~ic3blx___@87.116.178.2) (Changing host)
[23:50:53] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[23:52:00] <G001> Hey there. Trying to figure out a good way to make a packed int array. Meaning, say, 3-bit integers packed in a big byte array. Does endianess come into play here, or does that depend on the approach taken? Thanks for any insights.
[23:52:43] <G001> I only need to support setting and getting values at given indices.
[23:53:44] <sham1> Endianness shouldn't matter since you'd be accessing your bits by accessing individual bytes
[23:54:10] <G001> Even if the ints packed are larger than bytes, say 17 bits?
[23:54:18] <sham1> Yes
[23:54:22] <G001> I see
[23:54:52] <fizzie> You'll have to decide if you are okay with some loss in efficiency. Because it's a lot easier to pack (for example) 3*5 bits in elements of an array of 16-bit units, and waste every 16th bit, than dealing with 3-bit chunks that cross a unit boudnary.
[23:55:26] <sham1> Also modifying your packed integers might become annoying because you get RMW stuff
[23:55:31] <G001> Yeah it's imperative that the packing is as space efficient as possible.
[23:55:42] *** Joins: joilerv (~joilerv@135.129.250.144)
[23:55:44] <G001> RMW?
[23:55:51] <sham1> Read-Modify-Write
[23:56:01] <G001> yeah, but how is that an issue?
[23:56:14] *** Joins: v8IbXNTl (~v8IbXNTl@host-204-118-069-229.dhcp.fewpb.net)
[23:56:23] <sham1> Efficiency
[23:56:39] <sham1> Or rather, you lose some efficiency
[23:56:44] <G001> I see. That's ok, this is about saving space.
[23:57:45] *** candide sets mode: -o candide
[23:57:54] *** Joins: strajder (~strajder@user/strajder)
[23:58:25] <G001> Will RMW really be an issue? I assume the bytes involves will all fall on the same cacheline generally
[23:58:33] <G001> involved*
[23:58:45] *** Quits: constxd_ (~brad@142.167.170.88) (Ping timeout: 250 seconds)
[23:59:55] <sham1> Sure, but you still need (complex) instructions to modify your individual packed bits. Now, if this is only for transmitting the integers then it doesn't matter as much because you'd unpack them when you want to process them anyhow
[23:59:59] *** Joins: bnchs__ (~bnchs@41.143.76.120)
