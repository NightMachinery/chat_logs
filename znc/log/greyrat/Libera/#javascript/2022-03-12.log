[00:00:16] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[00:00:23] <x86> Mac, see previous message :)
[00:00:27] <quartz> https://jsfiddle.net/d2cxfghL/1/
[00:00:31] <quartz> It still doe snot work :(
[00:00:41] <KevinX> Try going to  `chrome://net-internals/#dns`
[00:00:50] <msfninja> quartz: i'm reading through the jquery docs, https://jqueryui.com/dialog/
[00:01:28] <KevinX> Can also try: `sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder` from the terminal
[00:01:52] <KevinX> source: https://mackeeper.com/blog/flush-dns-cache-on-mac/
[00:01:54] <x86> doing the net-internals thing doesn't seem to have had an impact
[00:02:04] <nuclearg1> hey, i'm cross posting this from #node.js. I'm looking to build a module that can be shared between frontend and backend code bases. Part of the modules responsibility is making a 3rd party HTTP request to send analytics data. In the frontend I want to use the built in fetch to avoid any external dependencies and on the backend I don't care so much. Is there a strategy for this pattern that I
[00:02:06] <nuclearg1> can use so that the module doesn't bloat the frontend with an extra dependency? I was hoping to dynamically import the dependency only if the runtime is node.js, not browser.
[00:02:17] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[00:02:20] <KevinX> x86 another option is to just wait
[00:02:31] <x86> it's been fubar for 45 mins now
[00:02:43] *** Joins: nucleargrave (~nucleargr@user/nuclearg1)
[00:02:45] <quartz> Ahhhh
[00:02:53] <quartz> msfninja: OK thanks sorry about the dumb question
[00:02:55] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[00:02:57] <x86> I did the system-wide DNS cache flush / mDNSResponder HUP, doesn't seem to have had an impact
[00:03:13] <KevinX> x86 could be related to your router too. Can you flush the cache there?
[00:03:29] <x86> also when I do a new tab, I used to have it come up with a blank page, but now it's coming up with chrome://new-tab-page-third-party
[00:03:33] <msfninja> quartz: as a general rule, there are no dumb questions, only dumb answers
[00:03:58] <msfninja> but i guess that's subjective
[00:04:03] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 252 seconds)
[00:04:30] <x86> KevinX: my router isn't in the DNS path (I'm overriding with 4.2.2.2, 4.2.2.1, and 8.8.8.8)
[00:04:33] <lf94> Starting to think v8 is doing some sort of heap compression
[00:04:38] <lf94> Hiding the strings
[00:04:45] <x86> I'm gonna restart the whole mac and see what she do :)
[00:04:50] *** Quits: x86 (~x86@173-165-70-17-Illinois.hfc.comcastbusiness.net) (Quit: leaving)
[00:05:18] *** Joins: keypusher (keypusher@user/keypusher)
[00:05:43] <KevinX> good luck :)
[00:06:45] <KevinX> msfninja lots of dumb questions, but they should be treated with care
[00:07:24] <systemfault> The "there's no dumb question" rule was created in a time where trolls and help leeches were not existing.
[00:07:31] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:07:46] <systemfault> It assumes the question was asked in good faith
[00:07:53] <KevinX> heh right
[00:08:27] *** Quits: Junxter (~Junxter@121.237.63.222) (Ping timeout: 252 seconds)
[00:08:29] <msfninja> hm
[00:08:54] <systemfault> msfninja: No worries, I've just been on IRC for too long... have seen it all
[00:09:33] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:14ca:e3f3:4023:5c06) (Ping timeout: 252 seconds)
[00:09:37] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[00:10:21] <banana_> isn't the dumb modifier sorta subjective
[00:10:46] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[00:10:51] <systemfault> Up to a certain point yes.
[00:10:56] <banana_> I think it means there's no dumb questions here.
[00:11:05] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:11:07] *** Joins: Jigsy (~Jigsy@user/jigsy)
[00:11:42] *** Joins: x86 (~x86@173-165-70-17-Illinois.hfc.comcastbusiness.net)
[00:12:03] <banana_> like a dog might be smart compared to another dog but stupid compared to a human
[00:12:18] <banana_> at the same time that human could regard that dog as smart
[00:12:22] <x86> so I've ruled out the system DNS cache (as I had anticipated), irssi and Safari and all other internet-faring apps are working fine... it's just Chrome
[00:12:31] <systemfault> banana_: Are you a dog? If so, I'll try to adjust.
[00:12:34] <KevinX> I think a dumb question includes multiple parts. The question itself, which is usually OK, but then surround context like the asker is being lazy, not putting effort, etc
[00:12:41] <x86> banana_: intellegence is certainly subjective
[00:12:53] <x86> KevinX: right
[00:13:26] <systemfault> I can easily think of one dumb question. Someone joining the channel and asking "What is JavaScript?"
[00:13:48] <KevinX> Depends how high you are
[00:13:54] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[00:14:19] <KevinX> what _IS_ JavaScript? Like literally, what is it?
[00:14:27] <KevinX> mind blown
[00:14:41] <systemfault> ones and zeroes interpreted by a unicorn
[00:15:03] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 252 seconds)
[00:15:07] <KevinX> x86 and only on the one machine?
[00:16:14] <systemfault> My brain also runs JavaScript to some extent
[00:16:38] <msfninja> JavaScript is not Java
[00:16:47] <x86> KevinX: correct, and I have 3 connected to the same wifi working fine
[00:16:52] <D4mned> eslint maximum line length is 100
[00:16:59] <systemfault> msfninja: Apparently, it's a Java Script? :P
[00:17:05] <D4mned> but i dont wanna break some of the lines
[00:17:12] <avu> Java's crypt
[00:17:16] <D4mned> it makes them harder for me personally to read
[00:17:21] <systemfault> D4mned: You can disable eslint for a lien
[00:17:43] <D4mned> well yeah i can but iam just wondering about what you guys think
[00:17:47] <KevinX> If they add static types to JS then probably you could have a Java transpiler
[00:17:48] *** Quits: Absolute0 (~rrakhamim@165.225.220.230) (Ping timeout: 252 seconds)
[00:18:11] <D4mned> some lines are easier to read when they are in one line even though they are long
[00:18:21] <KevinX> i would break the line
[00:18:29] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[00:18:31] <KevinX> rewrite the function if necessary
[00:19:27] <blueagain> I'd actually qualify a dumb question such that if you put it (literally or slightly paraphrased) into a search engine, the answer comes up first
[00:19:51] <msfninja> does that account for biased search engine results
[00:20:07] <blueagain> you mean locale-specific?
[00:20:21] *** Quits: eXistenZ (~biskit@bzq-109-67-64-151.red.bezeqint.net) (Quit: Leaving)
[00:20:22] <msfninja> biased for a particular user
[00:20:50] <msfninja> well, how google works
[00:20:59] <systemfault> Okay... then do it in pr0n mode
[00:21:03] <msfninja> bias based on everything
[00:21:33] <systemfault> My JavaScript compiler has no bias, just executes the code as mandated by the spec
[00:21:41] <systemfault> JS is love, JS is life.
[00:21:54] <blueagain> just saying that one is too lazy to first quickly run a search, it's probably a dumb question by definition
[00:22:06] <blueagain> if one*
[00:23:08] <msfninja> you probably don't have access to any search engine if you're in the DPRK, for instance, so that could be a factor to consider as well
[00:23:09] *** Joins: Absolute0 (~rrakhamim@165.225.220.230)
[00:23:31] <systemfault> But they could connect to IRC?
[00:23:43] <msfninja> probably not
[00:24:05] <msfninja> they would probably not have a computer to begin with
[00:25:51] <msfninja> well, if you define a dumb question as a question the answer to which you can find on the internet, that would potentially classify any question as dumb
[00:26:13] <systemfault> Not what blueagain was saying...
[00:26:22] <msfninja> the speed at which you can find an answer on the internet depends a lot on the person
[00:26:28] <x86> systemfault: "JS is love. JS is life." -- I'm ready hahaha
[00:26:41] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Quit: rewrit3)
[00:27:05] <systemfault> They said that if you wrote the question you were going to ask on IRC "As-is, clicked the first link and got an answer, it was probably a dumb question.
[00:27:24] <banana_> look worst case here you ask a dumb question someone might just ignore it, like my <datalist> question
[00:27:40] <systemfault> As far as I'm concerned, that person is not being good by wasting the time of the community
[00:27:48] *** Joins: AJTJ (~AJTJ@d205-234-49-159.yt.northwestel.net)
[00:28:03] <msfninja> you also don't know if the asker was lazy or not. maybe his biased search results didn't include the answer that you got as the first link
[00:28:04] <systemfault> banana_: I only do backend these days...
[00:28:08] <banana_> but this channel is pretty awesome because people here like answering questions
[00:28:18] <AJTJ> I'm not really sure what the "static" keyword does for class component properties or methods
[00:28:35] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:28:44] *** Quits: Absolute0 (~rrakhamim@165.225.220.230) (Ping timeout: 256 seconds)
[00:28:46] <systemfault> Makes them usable without an instance of the class
[00:28:47] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Quit: CiaoSen)
[00:29:12] <AJTJ> systemfault: so you can use them without calling new ClassName?
[00:29:18] <systemfault> Yes.
[00:29:26] <AJTJ> systemfault: why would you have that?
[00:29:46] <systemfault> In JS? I can't see any reason...
[00:29:56] <systemfault> Because JS allows free functions
[00:29:59] <KevinX> people also dont answer because they don't know, or arent super confident in their take
[00:30:12] <banana_> systemfault: lucky you. yeah corporate overlords knighted me a browser app dev
[00:30:35] <systemfault> But in a language like Java that doesn't support free functions or constants... static fields/methods are important.
[00:30:49] <AJTJ> not sure of the use of `static` since it seems like you'd always want an instance of a class
[00:31:04] <systemfault> Let me give you an example
[00:31:35] <banana_> AJTJ do you mean like actual class structures in JS, how do you use static methods?
[00:31:39] <systemfault> n> class Point { constructor(x, y) { this.x = x; this.y = y; } static zero = new Point(0, 0) } const myPoint = Point.zero; myPoint;
[00:31:40] <jellobot> (okay) Point { x: 0, y: 0 }
[00:32:06] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[00:32:14] <systemfault> I could always do... new Point(0, 0) but it's nicer to have it as a static field.
[00:32:21] <AJTJ> that's perfect
[00:32:28] <systemfault> In a OOP point of view at least..
[00:33:20] <AJTJ> it fits nicely into the OOP paradigm
[00:33:27] <systemfault> Static methods are often used as factories
[00:34:07] <AJTJ> systemfault: is that what a factory is? Basically a short bit of meta programming?
[00:34:08] <systemfault> class Point { constructor(x, y) { this.x = x; this.y = y; } static fromVector3(vec) { return new Point(vec.x, vec.y); } }
[00:34:25] <systemfault> No, just a way to create an object from something
[00:34:40] <AJTJ> a shortcut basically
[00:35:07] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:35:09] <systemfault> class Point { constructor(x, y) { this.x = x; this.y = y; } static fromString(str) { /* get x and y from string*/ return new Point(x, y) } }
[00:35:35] <systemfault> After you can just do: const myPoint = Point.fromString('Point(10, 20)');
[00:35:43] <AJTJ> an object for creating objects
[00:35:45] <AJTJ> very cool
[00:35:56] <systemfault> But again.. you could simply use free functions in JS...
[00:36:24] <AJTJ> just loose functions?
[00:36:25] <AJTJ> sure
[00:36:26] <systemfault> class Point { constructor(x, y) { this.x = x; this.y = y; } } function fromString(str) { /* get x and y from string*/ return new Point(x, y) }
[00:36:30] <systemfault> Yeah, free/loose
[00:36:55] <AJTJ> sure, but then again OOP can make things easier to keep track of
[00:37:01] <AJTJ> at scale
[00:37:13] <systemfault> I'd say it has to do with familiarity more than anything else.
[00:37:32] *** Joins: stenno (~stenno@user/stenno)
[00:37:36] <AJTJ> probably
[00:37:45] <AJTJ> I'm not particularly fussed
[00:37:57] <banana_> n>const Thing = function () {  this.thingy = 1; }; Thing.thisIsAStaticMethod = function () {  return `this: ${this}, is the function instance .toString'd not the class instance toString'd `;  }; const thingInstance = new Thing(); Thing.thisIsAStaticMethod()
[00:37:58] <jellobot> (okay) "this: function () {  this.thingy = 1; }, is the function instance .toString'd not the class instance toString'd "
[00:38:01] <AJTJ> it's easy to refactor that stuff if calling the whole object to get the static method is too much
[00:38:08] <banana_> that's basically the old way to have classes in JS
[00:38:12] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[00:38:35] <banana_> it's missing someone other features the es6 class structure gives you but basically that's the equivalent static method
[00:39:11] <AJTJ> so does the static keyword have any place outside of a class component?
[00:39:12] <banana_> like the old class example I gave is missing a little work to make it work exactly like es6 class structures
[00:39:21] <systemfault> AJTJ: Not in JS, no
[00:39:24] <banana_> you mean "class" in JS
[00:39:32] <banana_> ^
[00:39:51] <banana_> yeah it's a keyword I think brought in for the class keyword
[00:40:11] <banana_> I haven't seen it used anywhere else, but then again I'm not ljharb
[00:40:33] *** Joins: jazzy (~jaziz@user/jaziz)
[00:40:45] <systemfault> IIRC, static was one of those "reserved" keywords before ES6
[00:40:53] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[00:41:08] <systemfault> (Like a lot of Java terms)
[00:41:12] <banana_> like enum?
[00:41:46] <systemfault> I think so, not 100% sure
[00:41:55] <banana_> I'm pretty sure
[00:41:58] *** Quits: average_ (uid473595@id-473595.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:42:26] <banana_> then again I'm lazy
[00:42:33] <banana_> ...I'll work on it
[00:42:49] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:42:54] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[00:48:52] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[00:49:00] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[00:51:17] *** Quits: nwoob (~apple@152.57.193.24) (Ping timeout: 240 seconds)
[00:51:37] *** Quits: src (~src@user/src) (Quit: Leaving)
[00:56:12] *** Quits: x86 (~x86@173-165-70-17-Illinois.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[00:56:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:00:43] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:01:48] *** Joins: ekh (~textual@37.37.203.127)
[01:01:58] *** Quits: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[01:03:41] *** Joins: silverdust (~silverdus@user/silverdust)
[01:04:13] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[01:06:10] *** Joins: wallbroken (wallbroken@user/wallbroken)
[01:06:11] <wallbroken> hello
[01:06:13] <wallbroken> https://dpaste.org/9Bay#L27,29
[01:06:46] <wallbroken> these two highlighted lines are not working, in the sense that no produced effect
[01:06:51] <wallbroken> i followed this API
[01:06:52] <wallbroken> https://developers.google.com/apps-script/reference/calendar/calendar-event-series
[01:07:07] <wallbroken> could you help me in troubleshooting the problem please?
[01:10:37] *** Quits: pmercado (~pmercado@186.107.36.19) (Ping timeout: 240 seconds)
[01:12:15] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[01:13:13] <banana_> first make checkAddReminders to `const checkAddReminders = () => { /*code here*/}`
[01:13:54] <banana_> so someone reading wont have a complete panick attack that `this` might play a factor
[01:14:03] <wallbroken> well, the rest of the code perfectly works
[01:14:14] <banana_> well .apply(...) .call(...)
[01:14:17] <wallbroken> the problems are just in the lines 27 , 29
[01:14:38] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Quit: Leaving)
[01:15:17] <wallbroken> did i use the EventSeries class in the right way?
[01:15:54] <banana_> I would split that up into helper functions a bit
[01:17:25] <banana_> like for (var i = 0; i < objs.length; ++i) { part I'd do another .forEach there unless I'm not seeing a case for the for-loop
[01:18:02] <wallbroken> well, the you have Events and EventsSeries items
[01:18:20] <wallbroken> the difference is that EventsSeries are recurrent events
[01:18:38] <wallbroken> but to get EventsSeries items from calendars, you need an ID
[01:18:58] <wallbroken> but the API doesn't give any method to do that for EventSeries
[01:19:00] <banana_> also see youre using https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes
[01:19:15] <wallbroken> but it gives it for Events items
[01:20:09] <wallbroken> so, inside the iteration of events, i check if that event is recurrent, and if yes, i get its Id and i pull the eventSeries using that id
[01:20:13] <wallbroken> and that works
[01:20:41] <wallbroken> the problem is that "eventSeries.removeAllReminders();" is not working
[01:20:44] <wallbroken> very weird
[01:21:04] <wallbroken> not working means that the code is executed but is not removing the reminders
[01:22:15] *** Quits: LiftLeft2 (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[01:23:29] <banana_> for that for-loop actually I wonder if you could use a Set instance instead for each `objs` element add an entry to the Set for each event property  of each `objs` element
[01:24:21] <banana_> then you wouldnt need that for-loop, just superficially looking at your code so I might be off. just trying to help you clean up any unnecessary code.
[01:24:42] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[01:24:44] <banana_> But someone else chime in to answer the direct question
[01:25:44] *** Joins: MylesBorins (~MylesBori@217.50.237.35.bc.googleusercontent.com)
[01:26:39] *** Joins: masber (~masber@213.55.225.127)
[01:27:08] <chovy> ljharb: i see
[01:29:27] <nuclearg1> just following up one more time and will leave you folks alone.  I'm looking to build a module that can be shared between frontend and backend code bases. Part of the modules responsibility is making a 3rd party HTTP request to send analytics data. In the frontend I want to use the built in fetch to avoid any external dependencies and on the backend I don't care so much. Is there a strategy for
[01:29:29] <nuclearg1> this pattern that I can use so that the module doesn't bloat the frontend with an extra dependency? I was hoping to dynamically import the dependency only if the runtime is node.js, not browser.
[01:29:31] <nuclearg1> I'm thinking the best approach for me is to just create some sort of abstraction that the caller must implement. In this abstraction, the http request could be made. I just don't know how else i could avoid installing a third party dependency.
[01:30:00] *** Joins: Absolute0 (~rrakhamim@165.225.220.230)
[01:31:26] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Quit: Leaving)
[01:31:35] *** Joins: jazzy2 (~jaziz@user/jaziz)
[01:33:41] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:34:43] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 256 seconds)
[01:36:06] *** Joins: x86 (~x86@162-211-34-211.bltnilaa.metronetinc.net)
[01:36:28] *** Joins: LiftLeft2 (~LiftLeft@airstream-nelson-fiber-dhcp-007-17.dsl.airstreamcomm.net)
[01:36:55] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[01:37:00] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[01:38:51] <banana_> https://dpaste.org/Oe1W#L21,27,29 my attempt to explain what I meant, might be a syntax error if missed a curly or something, didnt test
[01:39:12] <banana_> wallbroken^
[01:39:34] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 256 seconds)
[01:40:07] <banana_> just fixed the new Set(...) invocation https://dpaste.org/Qj1F#L21,27,29
[01:40:54] <banana_> if it works it makes your function look a lot better
[01:41:32] <wallbroken> banana_: thank you for your effort, but I think now you are focusing on something different than my problem
[01:43:46] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:43:54] <ljharb> AJTJ: no, `static` only does anything inside a class body
[01:44:33] *** Joins: silverdust (~silverdus@user/silverdust)
[01:44:34] <banana_> :(, also your `excludedEvent = event.getId();` is confusing because `event` there is an element of `var events = CalendarApp.getCalendarById(calendarOwner).getEvents(today, future);` which looks like events that could possibly not be excluded. it looks like your excluded events are actually the property values of the object `var objs = JSON.parse(excludedList);`
[01:45:12] <banana_> well technically a instance value inside the element of `var events = CalendarApp.getCalendarById(calendarOwner).getEvents(today, future);`
[01:45:18] <banana_> but same idea
[01:45:22] <x86> is there a simple template case for Jest to simply pass a test if the component renders?
[01:45:39] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[01:45:41] <x86> (React component)
[01:47:31] *** Quits: Absolute0 (~rrakhamim@165.225.220.230) (Ping timeout: 256 seconds)
[01:48:13] <banana_> are you sure this is correct `var eventSeries = CalendarApp.getCalendarById(calendarOwner);`
[01:48:40] <banana_> not familiar with this API. is a Calendar object the same thing as an EventSeries object?
[01:50:03] <wallbroken> well
[01:50:27] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Client Quit)
[01:50:28] <banana_> couldnt see this making sense `calendar.isRecurringEvent()`
[01:50:28] <wallbroken> the idea is that you have a Calendar
[01:50:43] <wallbroken> each calendar is containing events and eventSeries
[01:50:52] <wallbroken> an eventSeries is a recurring event
[01:51:13] <wallbroken> banana_: i already said to you that all the other code is working
[01:51:15] <banana_> yeah but youre calling the static method "getCalendarById" and assigning that return value to a variable called "eventSeries"
[01:51:51] <banana_> you did yep, someone else can chime was just trying to help, have to make sense of what's going on
[01:52:31] <wallbroken> getCalendarById(id)	Calendar	Gets the calendar with the given ID.
[01:52:45] <wallbroken> it returns an object of "Calendar" class
[01:52:49] <banana_> so that method returns a calendar instance right
[01:52:52] <wallbroken> banana_: i linked the doc
[01:52:54] <banana_> not an "EventSeries" instance
[01:52:58] <wallbroken> have you opened it?
[01:53:39] *** Quits: masber (~masber@213.55.225.127) (Quit: Client closed)
[01:53:41] <banana_> sorry missed it reading now
[01:54:17] <wallbroken> yes, i called it eventSeries, but not completely pointless
[01:54:33] <banana_> to me if you want the event series object of the calendar youd call this https://developers.google.com/apps-script/reference/calendar/calendar#getEventSeriesById(String)
[01:54:42] <wallbroken> because then i reused it inside the code to get the EventSeries from calenda using the getId() function
[01:54:46] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[01:54:50] *** Joins: admin123 (~harrymore@ool-18b9adbf.dyn.optonline.net)
[01:55:01] *** Quits: riotz (riotz@user/riotz) (Ping timeout: 240 seconds)
[01:55:04] <wallbroken> infact i did that
[01:55:05] <banana_> but youd need to make sure you pass the event series id to that method
[01:55:08] <wallbroken> in fact*
[01:55:21] <wallbroken> i already did that
[01:55:44] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 272 seconds)
[01:56:12] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Ping timeout: 240 seconds)
[01:56:21] <banana_> oh shit nvm about last part got confused with your similar identifier names
[01:56:49] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:57:40] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:59:32] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[02:00:04] *** Quits: thekingofbandit (~thekingof@user/thekingofbandit) (Killed (NickServ (GHOST command used by thekingofbandit1!~thekingof@thunix.net)))
[02:00:15] *** Joins: shayr_ (shayr@ip62.ip-91-134-189.eu)
[02:00:16] *** Joins: mrdata_ (~mrdata@135-23-182-185.cpe.pppoe.ca)
[02:00:21] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[02:00:25] *** Joins: silverdu1t (~silverdus@user/silverdust)
[02:00:26] *** Joins: pulse_ (~pulse@user/pulse)
[02:00:33] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:00:34] *** Joins: gde35 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[02:00:36] *** Joins: velix (~velix@user/velix)
[02:00:38] *** Joins: thekingofbandit (~thekingof@user/thekingofbandit)
[02:00:43] *** Parts: velix (~velix@user/velix) (Leaving)
[02:00:50] *** Joins: AJTJ_ (~AJTJ@d205-234-49-159.yt.northwestel.net)
[02:01:04] *** Joins: Absolute0 (~rrakhamim@165.225.220.230)
[02:01:35] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[02:01:46] *** Joins: realies3 (~realies@user/realies)
[02:02:05] *** Joins: \mSg_mini (mSg@user/msg/x-0285936)
[02:02:21] *** Joins: lucerne8 (~lucerne@ip202.ip-51-178-215.eu)
[02:02:31] *** Joins: Bitflux (~byte@byteflux.net)
[02:02:32] *** Joins: stan_man_can (~stanley@d66-183-88-69.bchsia.telus.net)
[02:02:33] *** Joins: itsonlybinary_ (~iob@itsonlybinary.com)
[02:02:34] *** Joins: dskullz (~dskull@user/dskull)
[02:02:54] *** Joins: LtHummus_ (~lthummus@174-21-20-149.tukw.qwest.net)
[02:03:55] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[02:04:05] *** Joins: voltage (voltage@user/voltage)
[02:04:10] *** Joins: kcrk_ (~kcrk@user/kcrk)
[02:04:32] *** Joins: m_antis_ (~znc_admin@ool-44c09a21.dyn.optonline.net)
[02:04:55] *** Joins: Betal_ (~Betal@user/betal)
[02:04:56] *** Joins: chronon (~chronon@user/chronon)
[02:04:59] *** Joins: tazle_ (tazle@kapsi.fi)
[02:05:06] *** Joins: rdrg109_ (~rdrg109@user/rdrg109)
[02:05:15] *** Joins: g2anj_ (~v@58.228.230.4)
[02:05:16] *** Joins: doji4 (~doji@user/doji)
[02:05:23] *** Joins: hsv_ (~unknown@user/hsv)
[02:05:25] *** Joins: chovy_ (chovy@tilde.club)
[02:05:31] *** Joins: hendry1 (~hendry@210.23.22.2)
[02:05:46] *** Joins: Nitrousoxide_ (~msdos@user/nitrousoxide)
[02:07:35] *** Quits: Absolute0 (~rrakhamim@165.225.220.230) (Ping timeout: 256 seconds)
[02:09:44] *** Quits: silverdust (~silverdus@user/silverdust) (*.net *.split)
[02:09:44] *** Quits: LiftLeft2 (~LiftLeft@airstream-nelson-fiber-dhcp-007-17.dsl.airstreamcomm.net) (*.net *.split)
[02:09:44] *** Quits: c4017w__ (~c4017@209.52.68.8) (*.net *.split)
[02:09:44] *** Quits: AJTJ (~AJTJ@d205-234-49-159.yt.northwestel.net) (*.net *.split)
[02:09:44] *** Quits: pulse (~pulse@user/pulse) (*.net *.split)
[02:09:44] *** Quits: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net) (*.net *.split)
[02:09:44] *** Quits: bodiccea (~bodiccea@user/bodiccea) (*.net *.split)
[02:09:44] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[02:09:44] *** Quits: sheetjs (~sheetjs@user/sheetjs) (*.net *.split)
[02:09:44] *** Quits: Akiva (~Akiva@user/Akiva) (*.net *.split)
[02:09:44] *** Quits: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (*.net *.split)
[02:09:44] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[02:09:44] *** Quits: zebrag (~chris@user/zebrag) (*.net *.split)
[02:09:44] *** Quits: Betal (~Betal@user/betal) (*.net *.split)
[02:09:44] *** Quits: voltage_ (voltage@user/voltage) (*.net *.split)
[02:09:44] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (*.net *.split)
[02:09:44] *** Quits: mrdata (~mrdata@user/mrdata) (*.net *.split)
[02:09:44] *** Quits: junktext__ (~junktext@gateway/vpn/pia/junktext) (*.net *.split)
[02:09:44] *** Quits: hsv (~unknown@user/hsv) (*.net *.split)
[02:09:44] *** Quits: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net) (*.net *.split)
[02:09:44] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (*.net *.split)
[02:09:44] *** Quits: \mSg (mSg@user/msg/x-0285936) (*.net *.split)
[02:09:44] *** Quits: LtHummus (~lthummus@174-21-20-149.tukw.qwest.net) (*.net *.split)
[02:09:44] *** Quits: redcat (~dev@user/redcat) (*.net *.split)
[02:09:45] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (*.net *.split)
[02:09:45] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[02:09:45] *** Quits: kalen (~kalen@gateway/vpn/pia/kalen) (*.net *.split)
[02:09:45] *** Quits: tazle (~tazle@kapsi.fi) (*.net *.split)
[02:09:45] *** Quits: realies (~realies@user/realies) (*.net *.split)
[02:09:45] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[02:09:45] *** Quits: skylite (~skylite@46.107.44.214) (*.net *.split)
[02:09:45] *** Quits: nucleargrave (~nucleargr@user/nuclearg1) (*.net *.split)
[02:09:45] *** Quits: hendry (~hendry@210.23.22.2) (*.net *.split)
[02:09:45] *** Quits: defn (~n0b0dy@user/defn) (*.net *.split)
[02:09:45] *** Quits: doji (~doji@user/doji) (*.net *.split)
[02:09:45] *** Quits: Stanley (~stanley@d66-183-88-69.bchsia.telus.net) (*.net *.split)
[02:09:45] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[02:09:45] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[02:09:45] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[02:09:45] *** Quits: Pixi (~Pixi@user/pixi) (*.net *.split)
[02:09:45] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[02:09:45] *** Quits: albertlast (~nix@0exclusive.de) (*.net *.split)
[02:09:45] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[02:09:45] *** Quits: chronon_ (~chronon@user/chronon) (*.net *.split)
[02:09:45] *** Quits: Bombo (atom@user/bombo) (*.net *.split)
[02:09:45] *** Quits: Spitfire_ (~spitfire@user/Spitfire) (*.net *.split)
[02:09:45] *** Quits: dskull (~dskull@user/dskull) (*.net *.split)
[02:09:45] *** Quits: itsonlybinary (~iob@itsonlybinary.com) (*.net *.split)
[02:09:45] *** Quits: kuba-orlik (~kuba-orli@nyuno.kuba-orlik.name) (*.net *.split)
[02:09:45] *** Quits: ssiyad (~ssiyad@user/ssiyad) (*.net *.split)
[02:09:45] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[02:09:45] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[02:09:45] *** Quits: davlefou_ (~davlefou@5.183.213.64) (*.net *.split)
[02:09:45] *** Quits: skillbot (~skillbot@user/skillbot) (*.net *.split)
[02:09:45] *** Quits: chovy (chovy@tilde.club) (*.net *.split)
[02:09:45] *** Quits: kcrk (~kcrk@user/kcrk) (*.net *.split)
[02:09:45] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[02:09:45] *** Quits: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[02:09:45] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[02:09:45] *** Quits: petril (~petril@user/petril) (*.net *.split)
[02:09:45] *** Quits: shayr (shayr@ip62.ip-91-134-189.eu) (*.net *.split)
[02:09:45] *** Quits: hassoon (~hassoon@triton.blinkenshell.org) (*.net *.split)
[02:09:45] *** \mSg_mini is now known as \mSg
[02:09:45] *** itsonlybinary_ is now known as itsonlybinary
[02:09:46] *** realies3 is now known as realies
[02:09:46] *** doji4 is now known as doji
[02:09:46] *** dskullz is now known as dskull
[02:09:47] *** lucerne8 is now known as lucerne
[02:09:50] *** scoobydoob is now known as scoobydoo
[02:10:04] *** pulse_ is now known as pulse
[02:10:11] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (Ping timeout: 256 seconds)
[02:10:20] *** Joins: hassoon (hassoon@triton.blinkenshell.org)
[02:10:33] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[02:10:34] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[02:10:59] <banana_> wallbroken: sry if you hate me
[02:11:06] <banana_> tried cleaning up your function more https://dpaste.org/ST42#L21,24,27,29
[02:11:48] <banana_> oops meant a forEach in one of the lines https://dpaste.org/yop0#L21,24,27,29
[02:11:50] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:11:56] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[02:12:02] <wallbroken> I appreciate your improvements but that's not what I need, sorry
[02:12:16] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[02:13:05] <banana_> it's ok
[02:13:09] <banana_> to finish it off https://dpaste.org/2zcd#L21,24,27,29
[02:13:11] *** Quits: mrdata_ (~mrdata@135-23-182-185.cpe.pppoe.ca) (Changing host)
[02:13:11] *** Joins: mrdata_ (~mrdata@user/mrdata)
[02:13:53] *** Quits: c4017w_ (~c4017@209.52.68.8) (Remote host closed the connection)
[02:14:05] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[02:14:16] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:14:27] *** Joins: mintoyatsu (~mint@user/mintoyatsu)
[02:15:03] <banana_> youre silently failing your calls to addPopupReminder(...) btw
[02:15:26] *** Joins: nucleargrave (~nucleargr@user/nuclearg1)
[02:15:26] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[02:15:26] *** Joins: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[02:15:26] *** Joins: cheater (~Username@user/cheater)
[02:15:26] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[02:15:26] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[02:15:26] *** Joins: redcat (~dev@user/redcat)
[02:15:26] *** Joins: kalen (~kalen@gateway/vpn/pia/kalen)
[02:15:26] *** Joins: Praise (~Fat@user/praise)
[02:15:26] *** Joins: skylite (~skylite@46.107.44.214)
[02:15:26] *** Joins: defn (~n0b0dy@user/defn)
[02:15:26] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[02:15:26] *** Joins: gjvc (~gjvc@user/gjvc)
[02:15:26] *** Joins: Pixi (~Pixi@user/pixi)
[02:15:26] *** Joins: albertlast (~nix@0exclusive.de)
[02:15:26] *** Joins: Bombo (atom@user/bombo)
[02:15:26] *** Joins: Spitfire_ (~spitfire@user/Spitfire)
[02:15:26] *** Joins: kuba-orlik (~kuba-orli@nyuno.kuba-orlik.name)
[02:15:26] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[02:15:26] *** Joins: skillbot (~skillbot@user/skillbot)
[02:15:26] *** zirconium.libera.chat sets mode: +v skillbot
[02:15:56] *** Joins: Akiva (~Akiva@user/Akiva)
[02:15:58] <banana_> removeAllReminders(...) doesnt seem to throw an error
[02:16:03] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[02:16:07] *** Quits: cheater (~Username@user/cheater) (Max SendQ exceeded)
[02:16:19] *** Joins: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net)
[02:16:27] *** Joins: davlefou_ (~davlefou@5.183.213.64)
[02:16:45] *** Quits: Artea- (~Lufia@artea.com.pt) (Quit: ZNC 1.6.2 - http://znc.in)
[02:17:05] *** Joins: koolazer (~koo@user/koolazer)
[02:17:14] *** Joins: karabaja4 (~karabaja4@dh207-92-189.xnet.hr)
[02:17:15] <banana_> that's my next guesse is that addPopupReminder(...) for one of the calls is throwing an error, and since youre letting it silently fail you have no clue what happened
[02:17:22] *** Joins: quartz (~quartz@user/quartz)
[02:17:23] <banana_> just a guess I could be totally wrong though
[02:17:25] *** Joins: petril (~petril@user/petril)
[02:17:30] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[02:17:36] *** Joins: LiftLeft2 (~LiftLeft@airstream-nelson-fiber-dhcp-007-17.dsl.airstreamcomm.net)
[02:18:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[02:18:04] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:18:21] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:18:58] <banana_> more clean up https://dpaste.org/FVZb#L21,24,27,29
[02:19:52] *** Joins: cheater (~Username@user/cheater)
[02:20:17] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[02:24:12] <banana_> cleaned up some syntax issues https://dpaste.org/ixkG#L19,20,21,24,27,29
[02:25:49] <banana_> https://dpaste.org/KmsZ#L21,24,27,29 again (my bad)
[02:28:07] <Alexendoo> lol dpaste links always have random lines selected because it's far too easy to do so
[02:28:59] *** Joins: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[02:29:26] <banana_> anyone else want to, in a supporting way, say it's generally bad to have an empty .catch(() => {}) callback
[02:30:01] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:03] *** Quits: ekh (~textual@37.37.203.127) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:30:17] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[02:30:19] *** mrdata_ is now known as mrdata
[02:30:29] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:32:43] <Alexendoo> banana_: Same deal as an empty catch statement, usually it's a mistake to ignore errors. But on the occasion where it's intended you should stick a comment in saying why it's okay
[02:33:14] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:33:35] <banana_> wallbroken: sry that took a while, but might be worth checking into what I last suggested, if that's not it then I'm sure someone else can help you if you stick around long enough
[02:33:39] *** Quits: pizdets_ (~pizdets@183.182.115.74) (Ping timeout: 256 seconds)
[02:33:46] *** Joins: pizdets (~pizdets@183.182.114.152)
[02:34:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:35:00] <banana_> Alexendoo: yep thought so and thanks yeah I meant to ask about the catch statement specifically
[02:35:19] <banana_> but yeah the .catch(...) method of promises same idea
[02:35:20] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:36:08] *** Joins: riotz (riotz@is.only.here.for-some.fun)
[02:36:15] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:36:20] *** Joins: zebrag (~chris@user/zebrag)
[02:36:31] *** Quits: arthur_melo (~IRC@user/arthur-melo/x-6822691) ()
[02:36:32] *** riotz is now known as Guest5732
[02:37:24] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:38:17] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:39:31] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:40:58] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[02:41:07] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:42:18] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:43:17] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:44:24] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:44:25] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[02:45:26] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:46:34] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:47:15] *** Quits: admin123 (~harrymore@ool-18b9adbf.dyn.optonline.net) (Ping timeout: 256 seconds)
[02:47:41] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:48:06] *** Joins: admin123 (~harrymore@172.58.228.90)
[02:49:04] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:50:11] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:51:20] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:52:46] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:53:22] *** Quits: silverdu1t (~silverdus@user/silverdust) (Ping timeout: 272 seconds)
[02:53:58] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:55:04] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:56:18] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:56:50] *** Quits: dob1 (~dob1@user/dob1) (Quit: quit)
[02:57:51] *** Joins: dob1 (~dob1@user/dob1)
[03:02:15] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[03:03:58] *** Quits: nemesit (~nemesit@myriadvisuals.com) (Ping timeout: 250 seconds)
[03:05:17] *** Quits: quartz (~quartz@user/quartz) (Ping timeout: 240 seconds)
[03:14:48] *** Joins: silverdust (~silverdus@user/silverdust)
[03:15:49] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:19:02] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:19:26] *** Joins: l__q (~modinfo@user/modinfo)
[03:20:00] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 250 seconds)
[03:21:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:21:54] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:21:54] *** Joins: wroathe (~wroathe@user/wroathe)
[03:22:36] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[03:26:02] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[03:28:38] *** Joins: Junxter (~Junxter@121.237.63.222)
[03:28:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:608a:bc50:94ed:983e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:28:56] *** Joins: trevors (~trevors@user/trevors)
[03:30:02] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[03:34:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[03:36:19] *** Quits: x86 (~x86@162-211-34-211.bltnilaa.metronetinc.net) (Ping timeout: 256 seconds)
[03:36:35] *** Joins: kakashiA1 (~kakashi@105.154.2.98)
[03:37:03] <blueagain> coc-tsserver is pretty awesome
[03:39:59] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:e190:5acd:4e68:2323) (Remote host closed the connection)
[03:40:32] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:e190:5acd:4e68:2323)
[03:43:12] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[03:45:21] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:45:42] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:e190:5acd:4e68:2323) (Ping timeout: 252 seconds)
[03:46:23] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[03:46:55] <sheetjs> n> var x= [,,3,,]; x
[03:46:56] <jellobot> (okay) [ <2 empty items>, 3, <1 empty item> ]
[03:48:04] <sheetjs> hmm deno thinks that is assigning undefined to the array holes
[03:49:02] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:49:08] *** Joins: Guest31 (~Guest31@S01060c8ddbc3ab4d.vs.shawcable.net)
[03:55:00] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:55:12] *** Joins: quartz (~quartz@user/quartz)
[03:55:13] *** Joins: trevors (~trevors@user/trevors)
[03:55:21] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[03:58:22] <blueagain> sheetjs: you switched to deno?
[03:59:07] <ljharb> sheetjs: what do you mean "thinks"
[03:59:17] <ljharb> sheetjs: or are you just describing the way it's console logging it
[03:59:33] <Maxdamantus> > var x= [,,3,,]; x
[03:59:33] <Maxdamantus> [ <2 empty items>, 3, <1 empty item> ]
[03:59:40] <Maxdamantus> That's what I get when I try it in deno.
[03:59:40] *** Joins: silverdust (~silverdus@user/silverdust)
[03:59:48] <Maxdamantus> Looks the same.
[04:00:35] <Maxdamantus> > var x= [,undefined,3,,]; x
[04:00:36] <Maxdamantus> [ <1 empty item>, undefined, 3, <1 empty item> ]
[04:01:35] <ljharb> deno's just v8, so i assume it would be
[04:02:19] <sheetjs> https://gist.github.com/SheetJSDev/91bcca12569bd3982d9101efbcfc11e4
[04:02:32] <sheetjs> so what's confusing here is, ws["!rows"] is of type RowInfo[]
[04:03:18] *** Quits: admin123 (~harrymore@172.58.228.90) (Ping timeout: 252 seconds)
[04:03:34] <sheetjs> the error is TS2322 because it thinks the hole is an assignment
[04:03:34] <Maxdamantus> Oh, you mean TypeScript considers it to have `undefined` values in the holes?
[04:03:40] <sheetjs> yeah thats what it looks like
[04:03:56] <sheetjs> this can be bypassed with ws["!rows"] = []; ws["!rows"][1] = ...
[04:04:23] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 252 seconds)
[04:04:31] <Maxdamantus> Sounds sensible to me. If you want to allow undefined there, you might be able to denote it as optional using `?` in the type.
[04:04:48] <Maxdamantus> though dunno if that works in array-based tuple types.
[04:05:25] <Maxdamantus> TS mostly basically treats `undefined` and missing as the same thing afaik, which is also kind of how it works in JS itself.
[04:05:28] <sheetjs> the error message is "Type 'undefined' is not assignable to type 'RowInfo'" but it's not really an assignment
[04:05:34] <ljharb> you shouldn't have sparse arrays at all; it wouldn't surprise me if TS treated all arrays as dense
[04:05:51] <ljharb> sheetjs: and yes, a hole is of type "undefined"
[04:05:52] <quartz> Hello. When I click on the button, I don't want the text "Discard changes?" to show up below the button. I want tha ttext to show up in the dialogue box when the button is pressed. Can anyone help? https://jsfiddle.net/w1nvs7c5/
[04:05:55] <Maxdamantus> Doesn't matter "is assignable to" pretty much means "is a subtype of". It also applies when passing values to functions.
[04:06:18] <sheetjs> [undefined, 3] is different from [, 3]
[04:06:20] <ljharb> sheetjs: iow, `RowInfo[]` means every *index* must be of that type, not just every own index property
[04:06:26] <ljharb> sheetjs: it has the same type, though.
[04:06:41] <sheetjs> n> Object.keys([undefined, 3])
[04:06:42] <ljharb> sheetjs: and, `[, 3]` should never exist, so it shouldn't matter
[04:06:42] <jellobot> (okay) [ '0', '1' ]
[04:06:46] <sheetjs> n> Object.keys([, 3])
[04:06:47] <jellobot> (okay) [ '1' ]
[04:06:51] <ljharb> sheetjs: yes, i'm aware of the runtime distinctions
[04:06:58] <ljharb> sheetjs: but the conceptual type is the same
[04:07:09] <ljharb> this is one place i actually agree with TS not completely matching JS semantics
[04:07:17] <ljharb> sparse arrays are bad and if you use them you are bad and should feel bad
[04:07:43] <ljharb> but either way, the type of both of those arrays is `(undefined | RowInfo)[]`, because that's what you get if you `[0]` and `[1]` out of it
[04:08:15] <ljharb> arrays are contiguous Lists, it's just a category error to have holes in them
[04:08:27] <Decker> const arr = [,3] is more like  const arr=[1,3]; delete arr[0]; then you get <empty> instead of undefined
[04:09:11] <Maxdamantus> Decker: `delete` on arrays is another form of abuse.
[04:09:19] <Maxdamantus> arguably worse than using holes in the first place.
[04:09:25] <Decker> ya I find splice better
[04:09:37] <sheetjs> tsc accepts the delete tho
[04:09:48] <Maxdamantus> `splice` does something very different. and yes, `splice` is a sensible operation.
[04:09:51] <Decker> it's just what I found trying to emulate [1,,,3] that JS produces from a JSON interpreter
[04:10:08] <Decker> (for a)
[04:10:20] <sheetjs> and in practice it doesn't require an undefined check when accessing elements
[04:10:44] <ljharb> splice is gross, but better than deleting sure
[04:11:05] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[04:15:24] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[04:15:34] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[04:19:33] <AJTJ_> hm, I just wanna grab the first letter of every word
[04:19:36] <AJTJ_> let rgx = new RegExp(/\b[a-zA-Z]+/, 'gu');
[04:19:41] <AJTJ_> this doesn't seem to work
[04:19:43] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:19:51] <AJTJ_> with this
[04:19:52] <AJTJ_> let initials = Array.from(fullName.matchAll(rgx)) || [];
[04:20:29] <Maxdamantus> Why +?
[04:21:24] <EdFletcher> too much regex
[04:21:34] <EdFletcher> n> 'foo bar baz'.split(/\s+/).map(x => x.charAt(0))
[04:21:35] <jellobot> (okay) [ 'f', 'b', 'b' ]
[04:23:18] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[04:23:20] <sheetjs> AJTJ_: sample data?
[04:23:33] <sheetjs> n> "foo bar baz qux".match(/\b[a-zA-Z]/gu)
[04:23:34] <jellobot> (okay) [ 'f', 'b', 'b', 'q' ]
[04:23:51] <ProfSimm> Can I "peek' at an iterator's next value without getting it irreversibly/
[04:23:54] <ProfSimm> Or return it maybe
[04:23:57] <ProfSimm> Get it and return it
[04:24:02] <EdFletcher> the elusive "qux" makes an appearance!
[04:24:29] *** Quits: ahmed (~ahmed@user/ahmed) (Quit: Quitte)
[04:24:42] <sheetjs> ProfSimm: you cannot
[04:25:23] <sheetjs> you can make a wrapper for peeking ahead, but the original iterator will consume the values
[04:25:34] <AJTJ_> sheetjs: is this the same thing let rgx = new RegExp(/\b[a-zA-Z]/, 'gu');
[04:25:53] <sheetjs> n> new RegExp(/\b[a-zA-Z]/, 'gu');
[04:25:54] <jellobot> (okay) /\b[a-zA-Z]/gu
[04:26:16] <sheetjs> if you put a + it will capture all of the characters, but you said you wanted the first
[04:26:35] <AJTJ_> I want all the first characters of every word
[04:26:55] <sheetjs> n> "foo bar baz qux".replace(/\b[a-zA-Z]/gu, ($$) => $$.toUpperCase())
[04:26:56] <jellobot> (okay) 'Foo Bar Baz Qux'
[04:27:12] <Maxdamantus> + will continue matching past the first character.
[04:27:27] <AJTJ_> huh
[04:27:31] <AJTJ_> I just want the initials
[04:27:37] <Maxdamantus> Then don't use +
[04:27:41] <AJTJ_> thanks!
[04:27:42] <Maxdamantus> 13:50:29 < Maxdamantus> Why +?
[04:27:57] <sheetjs> n> "foo bar baz qux".replace(/\b[a-zA-Z]+/gu, ($$) => $$.toUpperCase())
[04:27:57] <jellobot> (okay) 'FOO BAR BAZ QUX'
[04:29:06] <ProfSimm> sheetjs: cool
[04:29:15] <sheetjs> "fo_o b_ar b_a_z _qux_".replace(/\b[a-zA-Z]+/gu, ($$) => $$.toUpperCase())
[04:29:22] <sheetjs> > "fo_o b_ar b_a_z _qux_".replace(/\b[a-zA-Z]+/gu, ($$) => $$.toUpperCase())
[04:29:23] <sheetjs> n> "fo_o b_ar b_a_z _qux_".replace(/\b[a-zA-Z]+/gu, ($$) => $$.toUpperCase())
[04:29:24] <jellobot> (okay) 'FO_o B_ar B_a_z _qux_'
[04:29:25] <sheetjs> there we go
[04:31:17] <AJTJ_> this doesn't seem to work
[04:31:21] <AJTJ_> I want an array of initials
[04:31:23] <AJTJ_> let rgx = new RegExp(/\b[a-zA-Z]/, 'gu');
[04:31:27] <AJTJ_> let initials = Array.from(fullName.matchAll(rgx)) || [];
[04:31:42] *** Quits: voltage (voltage@user/voltage) (Quit: Leaving)
[04:31:43] <AJTJ_> fullname being a string
[04:32:10] <AJTJ_> sheetjs: am I missing something?
[04:32:27] <Maxdamantus> AJTJ_: use `match` instead of `matchAll`
[04:32:30] <sheetjs> n> Array.from("foo bar baz qux".matchAll(/\b[a-zA-Z]/gu)||[])
[04:32:31] <jellobot> (okay) [ [ 'f', index: 0, input: 'foo bar baz qux', groups: undefined ], [ 'b', index: 4, input: 'foo bar baz qux', groups: undefined ], [ 'b', index: 8, input: 'foo bar baz qux', groups: undefined ], [ 'q', index: 12, input: 'foo bar baz qux', groups: undefined ] ]
[04:32:41] <Maxdamantus> AJTJ_: also, no need for `Array.from`.
[04:33:10] <sheetjs> matchAll has a few benefits
[04:33:17] *** Quits: kerat58 (~keeerat@user/tarek58) ()
[04:33:41] <sheetjs> str.match(/.../g) will give you the matches but no capture groups or indices
[04:34:13] <sheetjs> matchAll gives you that as an iterator.  the old-school technique was replace but that has its own performance issues
[04:34:25] *** Quits: kakashiA1 (~kakashi@105.154.2.98) (Ping timeout: 268 seconds)
[04:34:51] <AJTJ_> sheetjs: this is weird, it says it's giving me an array of length 2, but the array is empty....
[04:35:05] <sheetjs> what is fullname?
[04:35:13] <sheetjs> that way you can actually test it here
[04:35:40] <AJTJ_> 'wwww rrrrr'
[04:35:45] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[04:36:11] <AJTJ_> huh it does seem to work...
[04:36:25] <sheetjs> n> let fullName = 'wwww rrrrr'; let rgx = new RegExp(/\b[a-zA-Z]/, 'gu'); let initials = Array.from(fullName.matchAll(rgx)) || []; initials
[04:36:26] <jellobot> (okay) [ [ 'w', index: 0, input: 'wwww rrrrr', groups: undefined ], [ 'r', index: 5, input: 'wwww rrrrr', groups: undefined ] ]
[04:36:58] <ProfSimm> sheetjs: luckily it's a 20 line function with a stack inside :)
[04:42:23] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[04:43:50] *** Joins: trevors (~trevors@user/trevors)
[04:46:56] *** Quits: federico_it (~textual@151.51.80.129) (Quit: Textual IRC Client: www.textualapp.com)
[04:47:37] *** Joins: voltage_ (voltage@user/voltage)
[04:47:51] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 252 seconds)
[04:49:17] <sheetjs> is there some sort of proposal for "JS Macros" or constant folding?
[04:50:10] *** Quits: voltage_ (voltage@user/voltage) (Client Quit)
[04:55:33] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:e190:5acd:4e68:2323)
[04:56:38] *** Joins: vysn (~vysn@user/vysn)
[04:56:57] *** Joins: quartz (~quartz@user/quartz)
[04:56:58] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[04:57:08] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[04:59:00] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[04:59:23] *** Joins: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2)
[04:59:23] *** Quits: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2) (Changing host)
[04:59:23] *** Joins: average (~average@user/average)
[05:00:15] <sheetjs> some projects use the c preprocessor but that feels byzantine
[05:01:01] <Decker> JS
[05:01:14] <Decker> 's solution is just to make small functions instead...
[05:01:19] <quartz> Hello. I'm making this simple website that searches through a small database of chess players. If I search, I want the text displayed in a nice greyed out box as shown here: https://i.ibb.co/VmJJQ97/Screenshot-from-2022-03-11-20-29-52.png
[05:01:30] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:01:36] <Decker> but ya patching in cpp could work there's no conflict after stripping lines with # on them
[05:01:50] <sheetjs> the small function approach doesn't play nice with treeshaking when it comes to lookup tables
[05:01:52] <Maxdamantus> sheetjs: I doubt it, since standard JS doesn't have a compilation step.
[05:02:01] <quartz> The problem is, the text overflows from the box. I don't want the text to overflow from the box. Here is my JS Code: https://bpa.st/RQVA
[05:02:22] *** Quits: Junxter (~Junxter@121.237.63.222) (Quit: Leaving)
[05:02:31] <Maxdamantus> sheetjs: (at least regards to constant folding)
[05:02:55] <Decker> I'd think internally constant folding would be pretty natural...
[05:03:02] <quartz> Here is my CSS Code: https://bpa.st/BYOA  Notice how I do have overflow: hidden, but I don't understand why it's not working.
[05:03:07] <Decker> especially since 'const' addition
[05:03:50] *** Joins: kakashiA1 (~kakashi@105.154.2.98)
[05:03:51] <Maxdamantus> `const` doesn't really have anything to do with constant folding.
[05:04:38] <Decker> it's a hint that it's foldable
[05:05:07] <Maxdamantus> But it's not a hint, and you can always infer when a `let` variable could have been `const`.
[05:05:16] <sheetjs> `const` correctness just refers to reassignment of the variable
[05:05:50] *** Joins: Junxter (~Junxter@121.237.63.222)
[05:06:15] <sheetjs> C/C++ has two concepts of const around pointers
[05:06:57] <sheetjs> obj_t * const ptr is what JS uses
[05:07:23] *** Quits: Junxter (~Junxter@121.237.63.222) (Max SendQ exceeded)
[05:07:51] *** Joins: Junxter (~Junxter@121.237.63.222)
[05:07:53] <sheetjs> as opposed to obj_t const * ptr which would make ptr->x =1; invalid
[05:08:21] <Decker> Object.seal(ptr)
[05:08:32] <Decker> err freeze
[05:08:34] *** Joins: matsaman (~matsaman@user/matsaman)
[05:08:38] <Maxdamantus> sheetjs: no, the latter form makes `ptr = ptr;` invalid.
[05:08:50] <Maxdamantus> sheetjs: the former form makes `ptr->x = 1;` invalid
[05:09:06] *** Quits: kakashiA1 (~kakashi@105.154.2.98) (Ping timeout: 245 seconds)
[05:09:13] <Maxdamantus> usually the latter form would be written as `const obj_t *ptr;` rather than `obj_t const *ptr;`
[05:09:42] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[05:10:50] <sheetjs> are you sure?
[05:12:06] <blueagain> `char * const x` just means the pointer itself is immutable
[05:12:24] <Maxdamantus> Oh, sorry. I had it the other way round, nvm.
[05:12:25] <blueagain> `const char * x` means the pointed data can't be modified using x
[05:12:32] <sheetjs> https://ideone.com/dz0E4D it's valid to assign to properties of a type *const but not to a type const*
[05:14:16] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:6666:45c9:615b:ded8:9d14) (Remote host closed the connection)
[05:14:22] <blueagain> sheetjs: in that example, doing ptr1 = 0; is invalid, right?
[05:14:30] <sheetjs> correct
[05:14:45] <sheetjs> but ptr2 = 0 is valid
[05:15:00] <sheetjs> of course, if its obj_t const * const then neither are valid
[05:15:10] *** Joins: p-i- (~Ohmu@2403:6200:8978:6666:6854:4a24:c875:3886)
[05:15:24] <blueagain> that'd be a truly "readonly" variable
[05:15:45] <sheetjs> it might be valid to do a deep mutation
[05:16:46] <Decker> deep freeze :)
[05:17:17] <Decker> problem is - with object.freeze the 'const' gets applied after the code is compiled so it's still not really a constant that can be folded/optimzied
[05:17:52] *** Quits: torniq (~xjsxxx@172.103.177.52) (Quit: Leaving)
[05:20:12] *** Joins: friend (~friend@2601:c1:c000:e8::1002)
[05:20:25] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:21:29] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[05:22:47] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:23:31] <blueagain> naptime
[05:23:41] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[05:23:45] <friend> is there a better easing library for js than penner easing?
[05:23:47] *** Joins: crashrep (~crashrep@user/crashrep)
[05:24:19] *** Quits: Guest31 (~Guest31@S01060c8ddbc3ab4d.vs.shawcable.net) (Quit: Client closed)
[05:29:06] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:e190:5acd:4e68:2323) (Ping timeout: 252 seconds)
[05:30:54] <sheetjs> the whole const question came up because of some lookup tables
[05:31:16] <sheetjs> https://github.com/SheetJS/sheetjs/blob/master/bits/77_parsetab.js the strings are there mostly for the "developer experience"
[05:31:50] <sheetjs> its a lot easier to look an error message with an easy-to-search name like "BrtFmlaError" than the numeric constant
[05:32:44] <sheetjs> so ideally there'd be a way to reference the name in the code so that a transpilation step would replace the name with the number
[05:33:33] <sheetjs> the go-to approach is #define macros with the c preprocessor, but that feels like a step backwards
[05:37:21] *** Quits: nomic (~nomic@185.217.117.88) (Quit: Leaving)
[05:38:42] *** Quits: Bombo (atom@user/bombo) (Ping timeout: 256 seconds)
[05:39:48] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[05:39:58] <Decker> is there a site to explore JS compiled code?  is there a way to view the disassembly?
[05:40:13] *** Joins: kakashiA1 (~kakashi@105.154.2.98)
[05:40:13] <Decker> like maybe godbolt but for JS
[05:40:35] *** Joins: Bombo (atom@p2e58e9f1.dip0.t-ipconnect.de)
[05:40:35] *** Quits: Bombo (atom@p2e58e9f1.dip0.t-ipconnect.de) (Changing host)
[05:40:35] *** Joins: Bombo (atom@user/bombo)
[05:40:44] <sheetjs> prettier?
[05:41:12] *** Joins: blahboybaz (~blahboyba@c-67-161-96-51.hsd1.wa.comcast.net)
[05:41:34] <Decker> not transpiled - the actual final output from say V8 or Spidermonkey or..
[05:42:31] <blahboybaz> Well, I cooked someting up again but it seems really hackish to me and I wonder how this code could be improved? I really want to learn what I could have done better: https://onecompiler.com/javascript/3xvuk4vda
[05:42:42] *** Joins: wyclif (~wyclif@user/wyclif)
[05:42:45] <blahboybaz> If anyone is bored enough to look at it  :)
[05:43:35] <Decker> blahboybaz you don't really need the array; just a previous value
[05:43:45] <Decker> or previous2 I guess
[05:44:13] *** Quits: kakashiA1 (~kakashi@105.154.2.98) (Ping timeout: 240 seconds)
[05:47:00] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[05:47:20] <blahboybaz> ok let me stare at that for a min  :)
[05:48:30] <sickdyd> very noob question: I have a index: number parameter that can be any number from 0 to Inifity and I want it to evaluate to true even when 0, so that (!index) when index is 0 returns true. I forgot what's the cool way to do this rather than (index === undefined)
[05:48:37] <blahboybaz> Decker: How would that work? Seem like the body of the code would also get refactored to accomodate that?
[05:49:00] <Decker> blahboybaz a bit...
[05:49:00] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[05:49:20] *** Joins: x86 (~x86@162-211-34-211.bltnilaa.metronetinc.net)
[05:50:38] <Decker> blahboybaz       if(fib[x] % 2 === 1) {  why every other value?
[05:52:08] <blahboybaz> Decker: It isn't every other value its every odd value up until a defined ceiling (that the last odd fib number to be summed is less than num). Its the requirement I was handed
[05:52:34] <blahboybaz> Did I misunderstand you?
[05:54:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[05:55:24] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:55:24] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:55:24] *** Joins: wroathe (~wroathe@user/wroathe)
[05:55:50] <Decker> https://onecompiler.com/javascript/3xvukvphn blahboybaz ?
[05:55:53] <matsaman> sickdyd: +1?
[05:56:04] <blahboybaz> I mis-spoke.. it's that "that the last odd fib number to be summed is not greater than num"
[05:56:46] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[05:58:17] *** Joins: silverdust (~silverdus@user/silverdust)
[05:58:21] <blahboybaz> Decker: I'm looking at it but challenged to see what is going on.. hang on
[05:59:37] <blahboybaz> Decker: Why "a=b;" on line 30? Aren't both a and b already each 1 ?
[06:00:01] <Decker> at 1
[06:00:04] <Decker> but not when b=2
[06:00:10] <Decker> then a=2 b=3
[06:00:15] <sickdyd> matsaman: lol, good thinking
[06:00:28] <blahboybaz> ok
[06:01:18] *** Quits: prawnsalad (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk) (Read error: Connection reset by peer)
[06:01:28] *** Quits: D4mned (~D1mned@212.101.251.71) (Ping timeout: 272 seconds)
[06:01:49] *** Joins: bambanxx (~bambanx@2800:150:106:1061:419:cfa1:fa7a:98e3)
[06:02:03] <matsaman> sickdyd: or I mean, >= 0
[06:02:24] <blahboybaz> Decker: "((b=c)%2)===1" on line 31  <--  is that where b is being mutated? Specifically the (b=c) is assigning the value of c to b right in the conditional statement?
[06:02:25] *** Joins: prawnsalad (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk)
[06:03:00] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[06:03:42] <Decker> shrug* it was that or just have it on the line before... i figure this way the AST then just has the one reference of the value... rather than b=c; if( c < blah ) which is 2 references to C to a naive compiler
[06:04:02] <Decker> and is 2 references that an optimizer would have to substitute which is still more work than just having it bee 1 reference
[06:04:09] <blahboybaz> Buy why say b=c rather than just putting c there?  ie: ((c)%2)===1  <--  wouldn't that be the same?
[06:05:02] <blahboybaz> Don't know what "AST" is
[06:05:17] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 272 seconds)
[06:06:18] <Decker> abstract syntax tree - a phase between source and compiled code
[06:06:31] <Decker> well it still has to be assigned
[06:06:44] <Decker> so JUST that change, no that's not the same
[06:08:09] <blahboybaz> b=c so that a=b can increase on the line above it but not until the next pass
[06:08:49] <blahboybaz> Decker: First time I heard about that (AST) - intersting
[06:09:31] <Decker> right
[06:09:36] <Decker> it just walks the value down...
[06:09:53] <Decker> but C had to be done before a or b changed
[06:13:00] <blahboybaz> So the first execution of the else block is on odd fib of 3 which in this case is 3  (first 8 are 1, 1, 2, 3, 5 and 8). So first execution is on position 4 of the sequence?
[06:13:23] *** Joins: akissz (~akissz@200.68.186.36)
[06:13:33] <Decker> btw that if num should be before the while
[06:14:36] <Decker> I guess?  I honestly fiddled with it a bit... result+2 is now... I think because it ends up skipping the first a and b ?
[06:15:30] *** Joins: kakashiA1 (~kakashi@105.154.2.98)
[06:15:35] <blahboybaz> Decker: Yeah - no change to output: https://onecompiler.com/javascript/3xvume62q
[06:16:32] *** Joins: silverdust (~silverdus@user/silverdust)
[06:17:03] <blahboybaz> I think I see what's going on
[06:17:22] <blahboybaz> To me that's kinda advanced logic for what I would be able to think of
[06:17:28] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-0d13-db80-1316-2ed6.res6.spectrum.com)
[06:17:30] <blahboybaz> I appreciate you showing me that
[06:18:30] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[06:18:39] <Decker> blahboybaz it's a evolution of what you had... since you only used the last 2 entries, you only needed to save those
[06:19:09] <Decker> I could have used a fib[1-n]=fib[n] and flip flopped it.... n=1-n   makes N go 0 1 0 1 0 1
[06:19:13] <KevinX> One tip, pay attention to your spacing. Code clarity is key long term
[06:19:44] *** Joins: Guest99 (~textual@37.37.203.127)
[06:20:19] *** Quits: kakashiA1 (~kakashi@105.154.2.98) (Ping timeout: 256 seconds)
[06:20:24] <KevinX> `if( ((b=c)%2)===1 )` => `if ((b = c) % 2 === 1)`
[06:20:26] <Decker> blahboybaz another thing - there's a programming style that requires only one return... you could reverse the logic of the if and just return with result - but I see the answer is 1 not 2... so maybe that doesn't work as well
[06:20:50] <Decker> if( ( ( b=c ) % 2 ) === 1 )
[06:21:04] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:21:09] <blahboybaz> KevinX: You mean how I do something like..  if() {...}  or  while() [...} ?  Where there is a space between ) {  but not before (  ?
[06:21:16] <KevinX> yes
[06:21:39] <Decker> since if and while aren't really functions it does make sense to have if ( and while ( for (
[06:21:44] <KevinX> at a minimum be consistent
[06:21:46] <Decker> rather than f(x) g(x)
[06:21:53] <blahboybaz> KevinX: ok
[06:22:06] <KevinX> but better to follow what 99% of the world does, but with some exceptions if you are confident they add value
[06:22:50] <blahboybaz> I kinda get what's being shared
[06:23:08] <Decker> 99% of 50% of 80% of the world
[06:23:38] <KevinX> that's much higher than 99% of JS devs
[06:23:49] <KevinX> 80% of the world's human population?
[06:23:52] <KevinX> or something else?
[06:24:32] *** Quits: x86 (~x86@162-211-34-211.bltnilaa.metronetinc.net) (Quit: leaving)
[06:24:38] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[06:24:55] <Maxdamantus> 99% of 50% of 80% is less than 40%.
[06:24:57] <blahboybaz> I don't know a standard to go off of (for code style) so then I end up not knowing how to decide on spaceing between different code situations. For example: If I space before (  because I space after ) then to be consistent I would have to space before ( in a function call - not just in the definition
[06:25:16] *** Quits: cnsunyour (~sunyour@129.226.182.99) (Quit: WeeChat 3.1)
[06:25:37] <blahboybaz> btw is there a documented standard to learn?
[06:25:38] *** Joins: sunyour (~sunyour@129.226.182.99)
[06:25:48] <Maxdamantus> oh, you meant the last 80%
[06:25:50] <KevinX> just set up prettier or something to do it for you and learn passively like that
[06:25:52] *** Quits: sunyour (~sunyour@129.226.182.99) (Client Quit)
[06:25:56] <sheetjs> blahboybaz: if you're writing code for your own use, do what makes sense for you
[06:26:14] *** Joins: sunyour (~sunyour@129.226.182.99)
[06:26:22] <KevinX> bad advice for a beginner
[06:26:28] <blahboybaz> sheetjs: I'm happier to know I'm ddoing it as others would expect - if I knew what that was
[06:26:34] <KevinX> At least focus on consistency
[06:27:03] <blahboybaz> C and C++ have a couple documentaed standards available
[06:27:35] <blahboybaz> js they just tell you use lower camel for variable names then send you off to figure the rest out yourself?
[06:27:40] <sheetjs> C and C++ people can't even agree on `const int * const x` vs `int const * const x`
[06:27:58] <blahboybaz> lol
[06:28:01] <blahboybaz> yeah
[06:28:23] <Decker> int *x; int* c;
[06:28:55] <KevinX> JS people argue about case on file names and variables too
[06:29:24] <KevinX> But usually camel vs pascal case
[06:29:32] <blahboybaz> There's this: https://google.github.io/styleguide/jsguide.html  <--  but it seems huge (lot to learn and complicated)
[06:29:39] <Sven_vB> hi :)
[06:29:54] <blahboybaz> he Sven_vB
[06:30:06] <KevinX> hi Sven_vB
[06:30:26] <blahboybaz> Looks like mdn and w3schools also have a style guide
[06:30:30] <sheetjs> fun JS example
[06:30:39] <KevinX> blahboybaz Fibonacci is a classic recursion problem so write it again with recursion
[06:30:41] *** Quits: Guest99 (~textual@37.37.203.127) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:31:00] <Sven_vB> does modern JS have a builtin identity function or do I still need function identity(x) { return x; }?
[06:31:02] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[06:31:03] <KevinX> and block w3schools from your search results
[06:31:17] *** Joins: Guest80 (~Guest80@pool-96-253-74-73.rcmdva.fios.verizon.net)
[06:31:24] <sheetjs> in browser, `HTMLBRElement` vs `HTMLCanvasElement` / `XMLHttpRequest`
[06:32:38] <KevinX> Sven_vB no built in monads
[06:33:01] <sheetjs> either HTMLBRElement should be HTMLBrElement or XMLHttpRequest should be XMLHTTPRequest
[06:34:20] <KevinX> HTMLBRElement <--- gross
[06:34:40] <duckgoose> don't be hating
[06:34:46] <duckgoose> br is still valid html
[06:34:52] <sheetjs> https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement
[06:34:57] <sheetjs> the "gross" part is the casing
[06:34:59] <KevinX> the casing though
[06:35:07] <KevinX> yeah
[06:35:15] <duckgoose> oh ok
[06:35:19] <duckgoose> then I agree gross
[06:35:33] <sheetjs> HTMLHRElement
[06:35:40] <sheetjs> oh man HTMLIFrameElement
[06:35:42] <KevinX> br is gross too if in excess
[06:36:02] <blahboybaz> KevinX: I'll give it a shot (I think I thought that to being with - that it was a good problem for recursion - but I didn't got there with it)
[06:36:10] <KevinX> blahboybaz
[06:36:14] <sheetjs> the casing for HTML DoM elements are all over the place
[06:36:18] <KevinX> blahboybaz its easier than you might think
[06:36:46] <blahboybaz> KevinX: I kinda like recursion actually but for some reason it's intimidating
[06:36:49] <KevinX> recursion can be annoying to wrap your head around but fib is an easy one
[06:37:41] <KevinX> only one exit I think
[06:38:05] <Maxdamantus> What's an x m l http request?
[06:38:07] <KevinX> or only one path. cant remember the jargon
[06:38:11] <duckgoose> not having recursion is intimidating to me
[06:38:27] <blahboybaz> w3schools style guide (which I know you hate) shows function definitions not having a space before the opening paren - eg: function toCelsius(fahrenheit) - but they do have a space for everything else
[06:38:36] <sheetjs> the issue surrounds casing Maxdamantus
[06:38:38] <Decker> ya know; fetch, the hard way
[06:38:55] <duckgoose> well the thing about w3schools is
[06:38:57] <duckgoose> is sucks
[06:39:02] <duckgoose> t
[06:39:03] <blahboybaz> :)
[06:39:22] <Maxdamantus> sheetjs: I know, was just pointing out the weird interpretation that arises from things like "XML" in camel case.
[06:39:31] <duckgoose> MDN is much better source
[06:39:55] <blahboybaz> on to mdn then.. see how it compared
[06:39:58] <blahboybaz> compares
[06:40:00] <sheetjs> is the camelized version xMLHttpRequest or xmlHttpRequest ?
[06:40:20] <duckgoose> camcelCase
[06:40:26] <Maxdamantus> It should have been `XmlHttpRequest`, but too late.
[06:40:36] <KevinX> my issue with w3schools is they position themselves as maybe being affiliated with w3c
[06:40:50] <duckgoose> wait their not?
[06:40:54] <duckgoose> TIL
[06:41:21] <sheetjs> "my issue with java is they position themselves as maybe being affiliated with javascript"
[06:41:46] <KevinX> exactly, on both
[06:42:14] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 252 seconds)
[06:42:15] <KevinX> did w3c come after w3schools?
[06:42:24] <duckgoose> well
[06:42:42] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[06:42:51] <blahboybaz> mdn looks like its advocating what I was doing (no space before opening round bracket but having a space after a closing round bracket) - like - if() {...} and while() {...} and function myFunc() {...}
[06:43:07] <KevinX> w3c 1994 and w3schools 2001
[06:43:23] <KevinX> w3schools is a business
[06:43:46] <blahboybaz> I thought w3schools created the html standards
[06:43:54] <duckgoose> blahboybaz honestly seems like personal preference to me
[06:43:57] <KevinX> yeah, they lean into that confusion
[06:44:13] <sheetjs> "The choice of the JavaScript name has caused confusion, implying that it is directly related to Java. At the time, the dot-com boom had begun and Java was the hot new language, so Eich considered the JavaScript name a marketing ploy by Netscape."
[06:44:20] <duckgoose> well
[06:44:31] <duckgoose> if we werent heathens we would call it ECMAScript
[06:44:34] <KevinX> yeah JS has pretty crappy origins
[06:44:46] <sheetjs> so given that, w3schools is following the netscape tradition
[06:45:00] <KevinX> Eich is doing the Brave thing now which also has some shady origins too
[06:45:21] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[06:45:39] <duckgoose> I don't know if thats true though
[06:45:52] <duckgoose> that they named it javascript just as a marketing ploy
[06:46:09] <KevinX> yeah but that's kinda shady
[06:46:13] <duckgoose> IIRC java was originally intended to be a part of it in some way
[06:46:13] <blahboybaz> duckgoose: I hear ya - just want to know what others are doing  :)
[06:46:13] <sheetjs> wikipedia cites https://www.youtube.com/watch?v=XOmhtfTrRxc&t=2m5s
[06:46:14] <skillbot> YouTube Title: Brendan Eich - CEO of Brave
[06:46:14] <KevinX> not sure you could do that today
[06:46:19] <Decker> I like the simile 'java is to javascript as pain is to paint'
[06:46:33] <KevinX> nice
[06:46:56] <duckgoose> "The name JavaScript came from Netscape's support of Java applets within its browser."
[06:47:02] <sheetjs> the phrase eich uses in the video is "marketing scam"
[06:47:22] <KevinX> Brave started injecting crypto affiliate links into web pages which lost trust for me
[06:47:51] <KevinX> https://www.theverge.com/2020/6/8/21283769/brave-browser-affiliate-links-crypto-privacy-ceo-apology
[06:48:02] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:48:15] <KevinX> "sorry"
[06:48:53] <sheetjs> https://venturebeat.com/2018/12/31/mozilla-ad-on-firefoxs-new-tab-page-was-just-another-experiment/
[06:49:36] <KevinX> that looks bad too
[06:49:54] <Decker> brave fails to provide webgl; because they prefer to have a fingerprint of 'broken' than for the specific device, or a default that might work 80% of the time
[06:50:00] <KevinX> "Mozilla says it’s not an ad"
[06:50:09] <Decker> (maybe they've fixed it; I wouldn't bet)
[06:50:27] <Decker> or maybe that was iron?
[06:51:22] <KevinX> i'm trying to think it i would mind ads though in a browser, if they only showed on the start page
[06:51:40] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:52:05] <KevinX> to be honest, I wouldn't mind paying for a browser if it meant I was no longer the product
[06:52:37] <KevinX> it's much worse to corrupt the data i'm consuming
[06:56:13] <blahboybaz> Should function / method names be verbs and everything else be nouns?
[06:57:47] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:58:53] <sheetjs> there's a huge problem KevinX: how do you actually fund development given the current state of affairs?
[07:00:01] <sheetjs> chrome is the dominant browser and it is free.  accepting that a full blown browser is not a weekend project, it would take resources to build
[07:01:05] <KevinX> its a very hard problem. Even search is hard
[07:01:56] <KevinX> I tried neeva.com as a (paid) google search alt but if just fell short too many time
[07:02:03] <sheetjs> sheetjs is an instructive example.  In our general space, most of the open source projects relicensed because it proved too hard to keep up with Excel changes in an open source way
[07:02:48] *** Joins: w0ng (~w0ng@103.1.212.149)
[07:03:09] <sheetjs> the .NET library EPPlus was open source until a few years ago, when it switched to some commercial license
[07:03:09] <KevinX> I don't know a lot about this area though
[07:03:24] <KevinX> Have you tried raising money?
[07:03:49] <KevinX> Or selling?
[07:04:01] <sheetjs> if you want an honest answer, we've been around long enough to know what happens to projects that do raise money
[07:04:25] <KevinX> just sell to someone with good intentions then focus on building the next badass project
[07:04:55] <Guest80> Can someone explain to me signed cookies? I am trying to think of a response to this guy's comment: https://github.com/bmihelac/django-cookie-consent/issues/51
[07:04:57] <sheetjs> but therein lies the rub.  who actually would have good intentions and be willing to spend money
[07:05:36] <KevinX> how good do the intentions need to be, I guess
[07:05:55] <sheetjs> "keeping the project open source" is table stakes
[07:06:22] *** Joins: kakashiA1 (~kakashi@105.154.2.98)
[07:07:07] <KevinX> Why not offer a hosting solution? Actually, I don;t know what you offer now
[07:07:22] *** Quits: average (~average@user/average) (Read error: Connection reset by peer)
[07:07:43] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[07:07:45] <KevinX> An open source airtable alternative with optional paid cloud hosting
[07:08:04] *** Joins: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2)
[07:08:04] *** Quits: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2) (Changing host)
[07:08:04] *** Joins: average (~average@user/average)
[07:08:14] <sheetjs> more advanced tooling.  the open source software is primarily focused on data interchange (correctly reading and writing data)
[07:09:04] <KevinX> is airtable a competitor?
[07:09:17] <KevinX> we use airtable as our cms at work actually
[07:09:53] <sheetjs> ooh video time https://user-images.githubusercontent.com/6070939/157599532-e3978b11-c4be-4873-a2a3-e02e68ad0c3b.mp4
[07:10:02] <KevinX> and even as our database (unfortunately). They have a rate limit and recycle cursor keys every 5 minutes, making it a horrible database solution
[07:10:03] <sheetjs> an open source user asked about Nuxt/SSR
[07:10:19] <blahboybaz> The "e" in this code example is a reserved word? https://developer.mozilla.org/en-US/docs/MDN/Guidelines/Code_guidelines/JavaScript#error_handling
[07:10:22] <sheetjs> and in figuring out how to get it to work, we were able to get hot reloading working as well
[07:10:32] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[07:10:37] <sheetjs> so you can edit a file in numbers, save it, and the webpage will automatically refresh
[07:10:49] <KevinX> thats nice
[07:11:05] <sheetjs> blahboybaz: no, in the `catch(e)` part the `e` variable will be available in the block
[07:11:08] *** Quits: kakashiA1 (~kakashi@105.154.2.98) (Ping timeout: 272 seconds)
[07:11:50] <blahboybaz> sheetjs: Why doesn't this print "blah" then?  https://onecompiler.com/javascript/3xvur2wp2
[07:12:36] <sheetjs> the inner e masks the outer e
[07:13:11] <blahboybaz> sheetjs: changing it to console.log(e) doesn't change anything
[07:13:15] <sheetjs> try this
[07:13:31] <sheetjs> const e = "blah"; try { console.log(results); } catch(err) { console.log(e); }
[07:13:48] <KevinX> Guest80 is that your reply there? I wonder the benefit of a signed cookie in that context
[07:13:52] <friend> if I have a function someClass.toString=function() { return "element="+this.element==undefined?"fail":"success";} why does someClass.toString()  just return "success"?
[07:14:12] <Guest80> No I am the issue owner
[07:14:21] <sheetjs> friend: parsing
[07:14:29] <KevinX> so whats the benefit you're looking for?
[07:14:42] <blahboybaz> sheetjs: the "err" in catch(err) is a type?
[07:14:44] <sheetjs> it's parsed as ("element="+this.element==undefined)?"fail":"success"
[07:15:08] <blahboybaz> I'm sorry I always was confused about try/catch and it seems its no less confusing now - my bad
[07:15:09] <sheetjs> blahboybaz: its a variable name, that name will be present in the catch block
[07:15:35] <theskillwithin> akissz you need to register your nick
[07:15:39] *** Joins: silverdust (~silverdus@user/silverdust)
[07:16:15] <Guest80> so we have a cookie that tracks what other cookie groups the user accepted/declined. Sort of like how this works: https://pluckd.co/en/cookies/
[07:16:21] <KevinX> friend "element="+this.element will never =be undefined
[07:16:35] <blahboybaz> const e = "blah"; try { console.log(results); } catch(err) { console.log(e); }
[07:16:58] <Guest80> I am thinking of making that cookie_consent cookie (if you accept from the cookie bar) a signed cookie
[07:17:00] <blahboybaz> const e the variable name is e but catch(err) the variable name is err
[07:17:20] <blahboybaz> Then e is used inside the catch block
[07:17:49] <Guest80> I guess we don't want people to change anything about their cookie preferences? That would be the benefit?
[07:17:56] <friend> console.log(this.element==undefined) return false;
[07:18:00] <blahboybaz> is e overriding err where err would by a sytem error response?
[07:18:21] <KevinX> blahboybaz anything inside {} has its own scope. if you use the same var name it will override outer scope
[07:18:37] <friend> and console.log(this.badElement==undefined) returns true
[07:18:58] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:19:03] <KevinX> friend your code sample above is a string
[07:19:17] <KevinX> "element="
[07:19:24] <friend> That's the string part
[07:19:33] <friend> then the conditional that evaluates to a string'
[07:19:35] <KevinX> Add () then
[07:19:38] <blahboybaz> KevinX: So err in catch(err) is global but e in console.log(e) is local to catch(...) {}  specifically inside {}
[07:19:48] <akissz> Hi
[07:20:08] <akissz> O:3
[07:20:26] <KevinX> blahboybaz yes anything inside a function is scoped
[07:20:37] <KevinX> catch(nameThisAnything) {}
[07:20:56] <blahboybaz> why am I struggling with this. let me take a step back for a moment
[07:21:18] <KevinX> Guest80 Not sure I follow or can help really, but seems like reaching outside gdpr by having a global cookie?
[07:21:36] <theskillwithin> akissz I can see you now
[07:21:43] <theskillwithin> btw to hide your ip join #libera-cloak and say !cloakme
[07:21:49] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:21:55] <KevinX> try/catch isnt called a function though. Cant remember how you refer to that specifically. Let me check
[07:22:11] <Guest80> you mean the cookie_consent cookie that populates after accept/decline reaches outside gdpr?
[07:22:20] *** Quits: akissz (~akissz@200.68.186.36) (Changing host)
[07:22:20] *** Joins: akissz (~akissz@user/akissz)
[07:22:25] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 256 seconds)
[07:22:32] <theskillwithin> akissz boom =]
[07:22:50] <akissz> Haha
[07:22:55] <KevinX> yeah, but I also am not sure I understand fully what you're doing
[07:23:15] <KevinX> and of course, im not a gdpr lawyer :P
[07:23:15] <Guest80> ok let me explain
[07:23:41] <Guest80> so whenever you accept/decline you get that cookie stored in your browser of your preferences
[07:23:55] <blahboybaz> With  https://onecompiler.com/javascript/3xvur2wp2  <--  The e in catch(e) should be a function argument getting passed in, the e in console.error(e) should be accessing the e of catch(e) - like any other function - that just leaves the question of const e = "blah"  where in that code snippet there is no function call - unless catch(e) is a function call and not a function definition - is catch(e)
[07:23:56] <Guest80> depending on your preferences, you can view/not view parts of your site properly
[07:24:01] <blahboybaz> a function call then?
[07:24:20] *** Quits: friend (~friend@2601:c1:c000:e8::1002) (Changing host)
[07:24:21] *** Joins: friend (~friend@user/friend)
[07:24:21] <Guest80> right now it is a regular non-signed cookie
[07:24:31] <Guest80> to me, a signed cookie is more secure and prevents tampering
[07:24:57] *** Joins: src (~src@user/src)
[07:25:14] <KevinX> I think the maintainer is wondering why it matters
[07:25:28] <blahboybaz> afk
[07:25:29] <KevinX> what would be tampered with?
[07:25:42] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[07:25:45] <Guest80> yea that is what i need your help with explaining in response
[07:26:03] <Guest80> maybe the user who accepts/declines would manipulate the values of the cookie and view parts of the website?
[07:26:28] *** Quits: wyclif (~wyclif@user/wyclif) (Read error: Connection reset by peer)
[07:26:45] <KevinX> the consent cookie shouldn't be providing access to anything
[07:26:57] *** Quits: average (~average@user/average) (Ping timeout: 256 seconds)
[07:27:20] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:e190:5acd:4e68:2323)
[07:27:27] <Guest80> it does though kind of - like accepting recaptcha cookies in order to access a functional sign in form
[07:28:04] <KevinX> guess i should read the readme
[07:28:29] *** Joins: wyclif (~wyclif@user/wyclif)
[07:28:39] <Guest80> https://www.youtube.com/watch?time_continue=1&v=nSCdNCHQKUY&feature=emb_title
[07:28:54] <Guest80> This is a good video of a different library but it does the same thing practically
[07:28:55] <akissz> D:
[07:29:50] <KevinX> blahboybaz "unless catch(e) is a function call and not a function definition" if the `try` fails, it will invoke the `catch` and pass in the error object. You can name it whatever you want, but e, err, error are common
[07:31:26] *** Quits: blahboybaz (~blahboyba@c-67-161-96-51.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[07:31:48] *** Quits: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[07:32:44] <KevinX> Guest80 hmm so the cookie will store multiple access information. It seems like that's not how they expect it to be used? Maybe just set up an example to show them
[07:33:29] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[07:33:52] <Guest80> Yes when you accept a cookie, it loads certain javascripts for example
[07:34:26] *** nwulfe is now known as night_wulfe
[07:34:33] <KevinX> when I hear "consent" I think about optional things a user can choose to opt in to
[07:34:41] <KevinX> So ti wouldn't matter if they tampered the cookie
[07:34:55] <KevinX> What would they tamper it to? To opt in later?
[07:35:21] <Guest80> yes the user would choose accept/decline
[07:35:35] <Guest80> That is what I am thinking to opt in later or something like that
[07:35:42] *** Joins: silverdust (~silverdus@user/silverdust)
[07:35:42] <KevinX> yeah but if they decline today but tomorrow tamper the cookie to accept tomorrow, so what?
[07:35:59] <theskillwithin> wait did you just say run javascript on accepting a cookie?  some cookies javascript doesn't even have access to, so idk about that...
[07:36:09] <Guest80> Yea I guess you are right. But what if they made the cookie unsecure or non httponly?
[07:36:56] <KevinX> what would happen?
[07:37:29] <Guest80> yes stripe and recaptcha are javascript examples of third party codes i run that populates google and stripe cookies in the user's browser so i need their consent to run it or not
[07:37:45] <KevinX> theskillwithin I'm guessing on future page loads or something. Like if they opt out then don't load the analytics js
[07:37:57] <Guest80> exactly kevinx
[07:38:06] <Guest80> google analytics is another example
[07:38:11] <Guest80> do you want to be tracked or not
[07:38:45] <theskillwithin> if you don't want to be tracked, use something like Brave browser,  or theres probably chrome exxtensions like ghostery
[07:38:54] <KevinX> but if the user messes with their cookie, then that's them hurting themselves
[07:39:23] <KevinX> Or is this like a plugin for django where there's more exposure?
[07:39:54] <KevinX> I don't really know much about django or python in general
[07:39:58] <Guest80> brave browser you say? Check out digdeeper neocities link on browsers debunking it :p
[07:40:25] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:6666:3919:344e:a842:29ca)
[07:40:33] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 252 seconds)
[07:40:34] *** Joins: kakashiA1 (~kakashi@105.154.2.98)
[07:40:35] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[07:41:01] <KevinX> theskillwithin I mentioned about an hour ago Brave injecting binance affiliate links "by accident"
[07:41:02] *** Joins: Guest99 (~textual@37.37.203.127)
[07:41:38] *** Quits: Guest99 (~textual@37.37.203.127) (Client Quit)
[07:41:38] <Guest80> true kevinx. this cookie consent library is like a plugin to the rest of my django code if that is what you mean
[07:41:39] <Guest80> https://digdeeper.neocities.org/ghost/browsers.html#brave
[07:41:41] <KevinX> rather "by mistake"
[07:41:44] <theskillwithin> ya I haven't been following along, I just popped in cuz that running code on accepting cookies thing sounded odd to me
[07:42:18] <KevinX> yeah I don't think you can monitor something like a cookie being set in JS, can you?
[07:42:28] <KevinX> but the button click you could
[07:42:45] <Guest80> you can that django cookie consent library does it
[07:43:24] *** Quits: p-i- (~Ohmu@2403:6200:8978:6666:6854:4a24:c875:3886) (Ping timeout: 240 seconds)
[07:43:40] <KevinX> you could probably poll the cookies but I don't know if you could observe is. Maybe. i just havent tried
[07:43:46] <KevinX> it*
[07:44:24] <Guest80> yea i am no js expert but it does something fancy where it detects what cookies accepted/declined with js
[07:44:56] <KevinX> Well if it's adding the actual button then it could just be listening to the button click
[07:45:16] <Guest80> it may use pieces of django though idk
[07:45:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[07:45:19] *** Quits: mud (~mud@user/kadoban) (Remote host closed the connection)
[07:45:20] *** Quits: kakashiA1 (~kakashi@105.154.2.98) (Ping timeout: 272 seconds)
[07:46:05] <theskillwithin> ya I could see there being a backend part to it
[07:47:21] <Guest80> yea my appologies i think it uses some django and some js to do that part not 100% javascript for that part
[07:47:59] *** Joins: mud (~mud@user/kadoban)
[07:49:00] <theskillwithin> well could always just look at the code, but i don't think many people here would know how to read django
[07:49:17] <Guest80> no worries on the django part
[07:49:18] <KevinX> I think unless you're adding some sort of auth to the cookie, you don't need it to be signed
[07:49:36] <Guest80> I just want to know about the signed cookies and tell me what the benefits are
[07:49:43] <KevinX> And if this is all gdpr related, you probably shouldn't be putting auth in there
[07:49:58] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 250 seconds)
[07:50:14] <Guest80> you mean like enter a username/password in order for the cookie to become signed?
[07:51:59] *** Joins: Guest6711 (~blahboyba@c-67-161-96-6.hsd1.wa.comcast.net)
[07:52:01] <KevinX> Yeah like when you login, the app will put an auth cookie in your browser and it will match to the db
[07:52:19] <KevinX> That happens when someone logs in
[07:52:35] <KevinX> And you use it to grant access to parts of the application where they have authorization
[07:52:39] <Guest80> you mean a session cookie?
[07:53:19] <Guest80> or something separate a signed cookie that specifies a user who is logged in?
[07:53:41] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 245 seconds)
[07:54:21] <theskillwithin> this was probably mentioned already, but its worth noting that GDPR doesn't apply to all cookies,  just tracking cookies.  I think if the cookie is used only for your site alone then GDPR doesn't apply to it
[07:54:59] <Guest80> yes not all cookies is right
[07:55:26] <Guest80> not all cookies on your site. I think some may need approval if they are somewhat intrusive
[07:55:38] <Guest80> if they are yours i mean not third party
[07:55:47] *** Guest6711 is now known as blahboybaz
[07:56:03] <theskillwithin> google analytics might even have a setting where it can still run and it anonymizes data so that its GDPR complient.  don't quote me on that tho
[07:56:22] <blahboybaz> catch() is a strange function call then.. usually we call builtin functions with just funcName(args) and that's it. There are some (eg: replace) that take a callback function and provide / pass in args for you. But catch() takes what seems like function definition stuff inside it's {} brackets and that feels odd. It's hard to grasp what is going on there.
[07:57:01] <blahboybaz> not replace() but reduce() - sorry
[07:57:22] <Guest80> yes the do but matomoto is better
[07:57:27] <KevinX> Guest80 This is all about 1st party cookies, right? To be fair, I haven't had to think abotu this stuff in quite awhile
[07:57:51] <Guest80> first party and third party but mostly third party
[07:58:08] <KevinX> blahboybaz try/catch is unique but pretty simple
[07:58:20] <KevinX> no magic there
[07:59:46] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:e190:5acd:4e68:2323) (Ping timeout: 268 seconds)
[08:00:10] <KevinX> A catch signature is essentially a function signature so you can treat them the same
[08:00:10] <blahboybaz> hmm
[08:00:38] <KevinX> `function catch (error) { console.log(error) } `
[08:01:04] <KevinX> if the try fails, it will invoke (call) that
[08:01:40] <KevinX> there's also `finally`
[08:02:29] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:6666:3919:344e:a842:29ca) (Remote host closed the connection)
[08:02:42] <blahboybaz> I wonder if I can do that with other functions - all functions - where you have function funcDefinition(){...}  then  funcDefinition() {/* modify the function definition in its call just by appending {} brackets and stuff inside them */}
[08:03:00] <KevinX> Guest80 3rd party means you're setting cookies for other domains not on the domain the user is viewing, right?
[08:03:03] *** Joins: p-i- (~Ohmu@2403:6200:8978:6666:78a7:12ab:c91c:e77)
[08:03:24] <Guest80> yes
[08:03:27] <KevinX> You're not setting 3rd party, but you're using the first party cookie to stop 3rd party cookies from being set
[08:03:40] <Guest80> exactly
[08:03:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[08:03:54] <KevinX> blahboybaz no, try/catch/finally is special.
[08:04:12] <KevinX> Promises have a similar interface though
[08:04:23] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[08:04:53] <KevinX> Guest80 if you're not putting any sensitive data in there (which I can't see why you would), then you don't need it to be signed, right?
[08:05:11] <blahboybaz> KevinX: syntax error - so no
[08:05:32] <theskillwithin> I know they had good intentions, but its amazing how much more annoying it has made websites.  and really your just training users to click accept
[08:05:34] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:05:41] <blahboybaz> KevinX: it is that specialness I hope to grep (in the technical - this is what's happening under the hood - sense)
[08:05:43] <KevinX> theskillwithin yep
[08:06:02] <Guest80> yea i think you are right
[08:06:19] <KevinX> blahboybaz a lot of this stuff you can just pick up over time of using it. I've never put much thought into try/catch
[08:06:24] <Guest80> you are making sense
[08:07:40] <blahboybaz> KevinX: For some reason I seem to always need some kind of 'model' in my head to go off of - but then the model needs to be based on reality of what the actual connections are
[08:07:48] <KevinX> theskillwithin there was some instance where someone put a cookie consent overtop some malicious button and captured personal data. I'll find the story
[08:07:51] <blahboybaz> idk, I can't help it
[08:08:11] <KevinX> blahboybaz want to learn how promises work?
[08:08:42] <KevinX> start here; https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-constructor/
[08:08:47] <blahboybaz> KevinX: I have messed with them a bit before but not sure I really got it - just like with try/catch
[08:09:24] <duckgoose> you don't get try/catch?
[08:09:26] *** Quits: wyclif (~wyclif@user/wyclif) (Read error: Connection reset by peer)
[08:10:05] <Guest80> thanks for the help
[08:10:10] <KevinX> Zakas (humanwhocodes) started eslint and that promises series is great
[08:10:13] <blahboybaz> duckgoose: The breakdown in communication here is in what is meant by "get" - when I say "get" I mean something very specific to me and my understanding
[08:10:38] <blahboybaz> I can use try/catch and promises but I still lack the specific missing peice the fits the patter I understand
[08:10:44] <duckgoose> but do you need help understanding try/catch
[08:11:59] <blahboybaz> duckgoose: What I would like is to understand the concrete aspect of what makes try/catch syntax the way that it is. For example.. it is easy to understand the relationship between a function definition and a function call in terms of its syntax and what that syntax is doing. I would like to paralell that with try/catch
[08:12:36] *** Joins: crashrep (~crashrep@user/crashrep)
[08:12:48] *** Quits: Betal_ (~Betal@user/betal) (Quit: WeeChat 3.4)
[08:12:48] <KevinX> the verbiage alone explains it, "try executing this code, and if something breaks, catch it"
[08:13:31] <duckgoose> blahboybaz you get how if and else if work?
[08:13:53] <duckgoose> think of try/catch as an if, and the else is when there's an error
[08:14:05] <blahboybaz> yes but if else is not a fucntion call it is a definition (isn't it?)
[08:14:24] <blahboybaz> I'm trying to expose what it is I"m tyring to catch
[08:14:47] *** Quits: Guest80 (~Guest80@pool-96-253-74-73.rcmdva.fios.verizon.net) (Ping timeout: 256 seconds)
[08:15:33] *** Joins: average_ (uid473595@id-473595.hampstead.irccloud.com)
[08:15:38] *** Joins: audiobirb (~audio@user/audio)
[08:15:55] <blahboybaz> I thought a function call and a function definition have different syntax - a function definition includes {} brackets and is unique in that sense but a function call does not have {} brackets but ends with ();
[08:15:56] <duckgoose> so try{ code }catch(error){  //error is the information about what was caught }
[08:16:07] *** Joins: wyclif (~wyclif@user/wyclif)
[08:16:18] <blahboybaz> I get that - we're talking apples and oranges you and me  :)
[08:16:31] <duckgoose> ok
[08:16:32] *** Joins: src_ (~src@user/src)
[08:16:34] <blahboybaz> I know what it does I'm addressing the syntax of how it does it
[08:16:57] <duckgoose> I guess I don't understand what you mean trying to expose what you're trying to catch
[08:17:01] *** Quits: LtHummus_ (~lthummus@174-21-20-149.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:17:10] <blahboybaz> it was kind of a joke
[08:17:31] <blahboybaz> I'm explaining the context of my question elsehwere
[08:17:36] <blahboybaz> in other parts of this chat
[08:17:47] <blahboybaz> I thought a function call and a function definition have different syntax - a function definition includes {} brackets and is unique in that sense but a function call does not have {} brackets but ends with ();
[08:18:16] *** Joins: kerat58 (~keeerat@user/tarek58)
[08:18:18] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[08:18:26] <blahboybaz> and
[08:18:31] <blahboybaz> yes but if else is not a fucntion call it is a definition (isn't it?)
[08:18:46] <blahboybaz> from earlier
[08:19:04] <systemfault> Not sure what you people are talking about... but that confuses me as hell
[08:19:36] *** Quits: src (~src@user/src) (Ping timeout: 252 seconds)
[08:19:38] <duckgoose> if an if block is a conditional statement
[08:19:50] <duckgoose> you define a condition is watch the code inside it is executed
[08:21:17] *** Joins: silverdust (~silverdus@user/silverdust)
[08:21:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[08:22:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:22:35] *** Joins: wyclif (~wyclif@user/wyclif)
[08:23:55] <KevinX> lol
[08:24:12] <KevinX> try/catch is special, just remember that
[08:24:28] <systemfault> EVERYONE IS SPECIAL!
[08:24:35] <KevinX> the JS engine will see it and handle it delicately
[08:25:30] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:25:33] <KevinX> I think it's also a bit of a historical thing
[08:26:00] <KevinX> If it were made today maybe it would look like `try(() => {}).catch((e) => {})`
[08:26:08] <blahboybaz> Ok, this is how I understand the syntax of "control statements"...  you have the identifier (eg: if, else if, while, for) then the the condition surrounded by () parenthesis (eg: if(/* conditions */)) finally you have code block optionally without {} brackets surrounding it (eg: {/* do stuff here */}. What I am saying is that I undestand the control statement name and () brackets and any condition
[08:26:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[08:26:14] <blahboybaz> inside the brackets, not as a function call with an argument being passed in but as part of a function definition and a function definition (in whole) as distinctly different than a function call.    Maybe I am mistaken in this understanding.   If I am then that would mean that something like  if(x != 0) {...} the {} brackets and everything in them is part of a function call - not a function
[08:26:20] <blahboybaz> definition.
[08:26:23] <blahboybaz> See what  I mean?
[08:27:01] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 256 seconds)
[08:28:57] <KevinX> You define a function, then you call/invoke it later
[08:29:36] <EdFletcher> Are you talking about block scope maybe? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block
[08:29:43] *** Joins: kakashiA1 (~kakashi@105.154.2.98)
[08:29:58] <blahboybaz> I'm talking about syntax
[08:30:08] <blahboybaz> and its meaning
[08:30:17] <blahboybaz> that's what I'm describing above
[08:30:44] <blahboybaz> hang on if you guys are around in a few minutes
[08:30:44] <KevinX> yeah the syntax with try/catch is unique
[08:30:46] <EdFletcher> Well the brackets in a control statement block aren’t part of any function syntax, so it’s all very confusing what you think
[08:31:14] <KevinX> but try/catch is always the same
[08:31:26] <KevinX> The interpreter understands it
[08:31:47] <EdFletcher> I would hope so
[08:31:54] <KevinX> i wonder sometimes
[08:32:08] <EdFletcher> lol
[08:32:15] <KevinX> but it's usually my own code
[08:32:24] <KevinX> 100% of the time probably
[08:33:16] <KevinX> try/catch only really gets confusing if you start nesting them
[08:34:03] *** Quits: kakashiA1 (~kakashi@105.154.2.98) (Ping timeout: 256 seconds)
[08:34:16] *** Quits: bambanxx (~bambanx@2800:150:106:1061:419:cfa1:fa7a:98e3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[08:34:32] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[08:35:00] <KevinX> the syntax probably comes from Java, JavaScripts parent language
[08:35:17] *** Quits: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net) (Quit: because)
[08:35:53] <duckgoose> I think its from c++
[08:36:00] *** Quits: mdemo (~mdemo@user/mdemo22) (Quit: The Lounge - https://thelounge.github.io)
[08:36:17] <duckgoose> or, you mean why js chose it
[08:36:17] *** Joins: mdemo (~mdemo@user/mdemo22)
[08:36:18] <EdFletcher> Java is not JavaScript’s parent language
[08:36:28] <KevinX> ^ that was the joke
[08:36:46] <duckgoose> what is a "joke"
[08:36:52] <duckgoose> never heard of it
[08:37:15] <systemfault> Saying that Java had no influence on JavaScript would be lie though.
[08:37:34] <duckgoose> it didn't have much of one
[08:37:36] <duckgoose> thank GOD
[08:39:37] <KevinX> discussing the etymology of the try/catch block in JS is my perfect Friday night
[08:39:38] *** Joins: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2)
[08:39:38] *** Quits: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2) (Changing host)
[08:39:38] *** Joins: average (~average@user/average)
[08:39:42] <systemfault> Eich was told by Netscrap to Javaify JS at the last minute
[08:40:14] <duckgoose> then what was it before it was javafied
[08:40:14] <systemfault> It could have been a lot nicer without that IMHO
[08:40:29] <KevinX> systemfault he had a good interview on lex friedman talking about that
[08:40:49] <systemfault> duckgoose: LiveScript...
[08:40:53] <systemfault> And before that, "Mocha"
[08:40:54] <theskillwithin> https://youtu.be/krB0enBeSiE
[08:40:54] <skillbot> YouTube Title: Brendan Eich: JavaScript, Firefox, Mozilla, and Brave | Lex Fridman Podcast #160
[08:41:41] <duckgoose> I cant find any examples of ity
[08:41:48] <duckgoose> all I get is some trash made in 2011
[08:42:11] <systemfault> duckgoose: It's just part of the Netscape history, I don't think any public release of those were done
[08:42:19] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:42:20] <duckgoose> oh
[08:42:26] <duckgoose> so maybe it was WORSE!
[08:42:32] <systemfault> He completed the first version in ten days in order to accommodate the Navigator 2.0 Beta release schedule,[4][5] and was called Mocha, but renamed LiveScript in September 1995 and finally in a joint announcement with Sun Microsystem it was named JavaScript in December.
[08:42:34] <duckgoose> jk couldn't be worse
[08:43:13] <KevinX> imagine they named it ActionScript
[08:43:24] <systemfault> Would have been fine
[08:43:30] <systemfault> Better than JavaScript IMHO
[08:43:33] <theskillwithin> i learned flash way before I learned any js
[08:43:44] <systemfault> (Of course, Adobe would have taken another name...)
[08:43:49] <KevinX> branding matters way too much
[08:43:59] <theskillwithin> https://www.imdb.com/title/tt7768092/
[08:44:01] <KevinX> actionsript sounds cool though
[08:44:13] <duckgoose> it was not cool
[08:44:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[08:44:29] <KevinX> naming it JavaScript probably did help it
[08:44:39] <systemfault> Maybe that cool isn't the right word... but I believe that ActionScript is an improvement on JavaScript
[08:44:47] *** Quits: AJTJ_ (~AJTJ@d205-234-49-159.yt.northwestel.net) (Quit: Leaving...)
[08:44:47] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[08:44:53] <systemfault> Well, JavaScript was created as the amateur language.
[08:45:12] *** Joins: wyclif (~wyclif@user/wyclif)
[08:45:15] <systemfault> The cool kids were supposed to use Java to develop for the browser
[08:45:15] <systemfault> Funny how things turned out
[08:45:16] <duckgoose> I think think it would be fair to compare the two
[08:45:23] <KevinX> i skipped the whole Flash era
[08:45:27] *** Quits: austincheney (~austinche@104-189-235-24.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[08:45:35] <KevinX> Was too young to write java applets
[08:45:45] *** Joins: austincheney (~austinche@2600:1700:1220:76c8:f982:507a:283b:3df9)
[08:45:52] <KevinX> i was writing useless mIRC scripts
[08:46:00] <duckgoose> anything that used NPAPI was worse than flash by virtue of using NPAPI
[08:46:07] <duckgoose> worse than javascript *
[08:46:09] <systemfault> Same... but if you were cool, you had a .midi track playing on your website along with some picture using the lake.class applet.
[08:46:18] <systemfault> On geocities
[08:46:34] <theskillwithin> with a visitor counter
[08:46:38] <duckgoose> I never ran java applets
[08:46:42] <duckgoose> I never trusted them
[08:46:47] <KevinX> or angelfire
[08:47:01] <theskillwithin> the AOL dayz
[08:47:05] <duckgoose> I did use Silverlight for a time
[08:47:13] <duckgoose> then the good lord microsoft took it away
[08:47:15] <systemfault> (What I mean by lake.class... https://alligatr.co.uk/lake.js/)
[08:47:36] <KevinX> We had this site, which who knows why it's still up https://www.angelfire.com/linux/hackexe/
[08:47:56] <duckgoose> now I'll have to learn react.js for work but I really don't want to
[08:48:01] <duckgoose> it seems very ugly
[08:48:18] <duckgoose> intermingling javascript and dom code the way it does...
[08:48:59] *** Quits: b-rex (van@down.by.the.river.lol) (Read error: Connection reset by peer)
[08:49:12] *** Joins: b-rex (van@down.by.the.river.lol)
[08:49:20] *** Quits: jsatk__ (sid304796@id-304796.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[08:49:46] *** Quits: jwpapi (sid502614@id-502614.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[08:49:46] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (Ping timeout: 250 seconds)
[08:50:05] *** Quits: wallbroken (wallbroken@user/wallbroken) (Quit: Have a nice day)
[08:50:06] *** Quits: BSaboia (~bsaboia@2a05:f480:1400:b88:5400:3ff:fe51:575c) (Quit: ZNC - https://znc.in)
[08:50:06] *** Quits: nullroute (~nullroute@209.141.45.45) (Quit: bai)
[08:50:06] *** Quits: Guest5732 (riotz@is.only.here.for-some.fun) (Quit: fBNC - https://bnc4free.com)
[08:50:07] *** Quits: notchris (sid181145@id-181145.hampstead.irccloud.com) (Read error: Connection reset by peer)
[08:50:07] *** Quits: themaxdavitt_ (sid433050@id-433050.hampstead.irccloud.com) (Read error: Connection reset by peer)
[08:50:07] *** Quits: llinguini (sid257922@id-257922.hampstead.irccloud.com) (Read error: Connection reset by peer)
[08:50:07] *** Quits: average_ (uid473595@id-473595.hampstead.irccloud.com) (Read error: Connection reset by peer)
[08:50:08] *** Quits: _0x1d3 (sid43116@id-43116.tinside.irccloud.com) (Write error: Connection reset by peer)
[08:50:13] <KevinX> if you know JS well already i think it will be fast to learn react
[08:50:15] *** Joins: nullroute_ (~nullroute@209.141.45.45)
[08:50:16] *** Joins: jsatk__ (sid304796@id-304796.helmsley.irccloud.com)
[08:50:17] *** Joins: notchris (sid181145@id-181145.hampstead.irccloud.com)
[08:50:24] *** Joins: llinguini (sid257922@id-257922.hampstead.irccloud.com)
[08:50:26] *** Joins: BSaboia (~bsaboia@2a05:f480:1400:b88:5400:3ff:fe51:575c)
[08:50:28] *** Joins: average_ (uid473595@id-473595.hampstead.irccloud.com)
[08:50:31] *** Joins: jwpapi (sid502614@id-502614.uxbridge.irccloud.com)
[08:50:35] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[08:50:35] *** Joins: themaxdavitt_ (sid433050@id-433050.hampstead.irccloud.com)
[08:50:35] *** Joins: _0x1d3 (sid43116@id-43116.tinside.irccloud.com)
[08:50:36] <KevinX> Maybe 6 weeks
[08:51:00] *** Quits: mud (~mud@user/kadoban) (Remote host closed the connection)
[08:51:01] *** Joins: wallbroken (wallbroken@user/wallbroken)
[08:51:10] *** Quits: c4017w_ (~c4017@209.52.68.8) (Remote host closed the connection)
[08:51:12] *** Joins: riotz (riotz@is.only.here.for-some.fun)
[08:51:14] <systemfault> Silverlight was great... but like for a lot of MS product, they just came in too late in the game.
[08:51:14] <systemfault> They were late for the ZuneHD... late for a modern Windows Phone... late for Silverlight when flash was already omnipresent
[08:51:14] <systemfault> Still not as stupid as Mozilla with FirefoxOS
[08:51:25] *** Joins: mud (~mud@user/kadoban)
[08:51:31] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:51:35] <systemfault> I mean, the market was already dominated by Apple and Google... Microsoft spent billion pushing their Windows Phone 8 in an already saturated market... And Mozilla, like idiots... thought that it would be a good idea to compete against the big 3.
[08:51:36] *** riotz is now known as Guest716
[08:51:56] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 250 seconds)
[08:52:05] <systemfault> Oh god, I lagged for a good 2 minutes
[08:52:32] <KevinX> maybe more like 5
[08:52:33] <SR-71> lol
[08:53:19] <systemfault> Blame Canada....'s ISPs
[08:53:21] <ljharb> akissz: btw you need to auth with nickserv for non-ops to see what you say; see the last link in the topic
[08:53:44] <theskillwithin> ljharb I already got him
[08:53:44] *** Quits: blahboybaz (~blahboyba@c-67-161-96-6.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[08:54:26] *** Quits: goddard (~goddard@user/goddard) (Remote host closed the connection)
[08:54:27] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[08:54:36] <theskillwithin> ljharb he went to freenode and was like uhh i feel like no one can hear me in libera
[08:54:47] *** Joins: goddard (~goddard@user/goddard)
[08:55:07] <ljharb> ah k
[08:55:24] *** Joins: D4mned (~D1mned@212.101.251.71)
[08:55:38] <theskillwithin> systemfault https://youtu.be/bOR38552MJA ?
[08:55:38] <skillbot> YouTube Title: Blame Canada - South Park: Bigger Longer & Uncut (3/9) Movie CLIP (1999) HD
[08:55:50] <systemfault> Yeah, I was referring to that
[08:55:54] *** Joins: blahboybaz (~blahboyba@c-67-161-96-6.hsd1.wa.comcast.net)
[08:55:57] *** Quits: ColorShes (~yoann@1.618.talagrand.com) (Ping timeout: 240 seconds)
[08:55:59] <blahboybaz> My computer froze
[08:56:07] <systemfault> BUY ANOTHER ONE NOW!
[08:56:15] <blahboybaz> lol
[08:56:17] <systemfault> I mean... Welcome back!
[08:56:27] <blahboybaz> gee thanks :)
[08:59:43] <blahboybaz> I don't think there's any way to explain what I was talking about earlier using text so I made this small video. I tried to keep it short but I have to warn there is some pretty offensive language at on point (sorry didn't want to start over). If anyone wants to look at it, it is here: https://youtu.be/RrNxDRM-Pjg  <--  I know I probably could have done a better job of it but if you aren't going to
[08:59:44] <skillbot> YouTube Title: Explaining the way I understand parts of syntax and what they do..
[08:59:49] <blahboybaz> watch the whole thing before responding we would probably just end up in another mess of confusing chatting here about it. Just saying
[09:01:35] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:02:50] <EdFletcher> Brackets cannot be omitted in a function definition, even if it’s only one line.
[09:02:55] <systemfault> 1:10: You do need the curly braces when declaring a function using the "function" keyword  (The exception are arrow functions)
[09:03:00] <systemfault> Ah.. RIP
[09:03:03] <EdFletcher> Lol jinx
[09:03:07] <theskillwithin> EdFletcher arrow function
[09:03:37] <EdFletcher> theskillwithin: We’re referring to a specific claim made in the video
[09:04:05] <theskillwithin> i know, but you don't need brackets for that line if it was an arrow function.  that must be what he was talking about
[09:04:27] <EdFletcher> Anyway, that’s where I stopped watching. If you can’t even be bothered to get these details correct, why should we keep watching?
[09:05:19] <EdFletcher> theskillwithin: I’m not here to try an interpret what they meant to say. Fact is, they show specifically a function declaration and then proceed to say something clearly wrong about it.
[09:05:39] <wyclif> KevinX: Wow, Hack.exe. That was 20 years ago...
[09:05:57] <EdFletcher> “The best way to get an answer on the Internet is not to ask a question but to give the wrong answer”, after all.
[09:06:21] <KevinX> wyclif yeahhh back when I was 19 heh
[09:07:14] <theskillwithin> EdFletcher "
[09:07:22] <wyclif> What happened to Glitch?
[09:07:30] <theskillwithin> EdFletcher the We're your saying,  who is we?
[09:08:01] <ljharb> EdFletcher: NUH UH
[09:08:07] <KevinX> wyclif I don't know what happened to anyone. i tried searching a while back but it got lost to time
[09:08:14] <theskillwithin> EdFletcher if the we is including systemfault, look at what he said again.  he said (The exception are arrow functions)
[09:08:15] <systemfault> blahboybaz: There's nothing you can "normalize" in your head about the base syntax of the language... except maybe that curly pairs mark a "scope".
[09:08:42] <ljharb> nah there's a bunch of things
[09:08:47] <KevinX> wyclif were you there on dalnet??
[09:08:57] <ljharb> things parse left to right, top down; there's hoisting passes, there's ASI
[09:09:07] <wyclif> a LONG time ago!
[09:09:08] <systemfault> ljharb: Context matter, watch the video
[09:09:19] <KevinX> small world
[09:09:20] <systemfault> It's 10 minutes... a bit long even at 2x speed.
[09:09:21] <ljharb> lol k, but no not gonna watch some ideo
[09:09:25] <ljharb> maybe tomorrow
[09:09:39] <wyclif> KevinX I always associated your handle with BitchX, which is what I used at the time
[09:09:47] <KevinX> ha ha
[09:10:03] <wyclif> Well you know I'm a huge Mr. Rogers fan
[09:10:06] <systemfault> The coolkids eventually switched to IRSSI... then Weechat.
[09:10:33] <wyclif> "Mr. Rogers uses BitchX. Why don't you?"
[09:10:53] <systemfault> wyclif: Y UR NICK HAS NO MSG?!
[09:11:06] <systemfault> HAIYA..
[09:11:12] <wyclif> I just stayed on irssi
[09:11:34] <wyclif> Heh
[09:12:32] *** Quits: stagas (~stagas@2a02:587:c407:c824:76c3:7bfe:1403:55e) (Ping timeout: 268 seconds)
[09:12:45] <KevinX> Can't remember what I used
[09:12:46] <theskillwithin> blahboybaz ok well notice for your function,  you are saying  function myfunc()....   thats creating a function.   the if(x) .... thats a statement not a function
[09:12:55] <KevinX> invision or something
[09:13:10] <KevinX> But we had a bunch of custom team scripts
[09:13:32] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[09:13:33] <wyclif> Here's a question for y'all: a young padawan asked me today what the best way to learn JS is right now. He was asking about specific tutorials and moocs. I pointed him to MDN but he seemed to want something more in-depth. I told him to get a copy of Eloquent JavaScript after he's learned the basics. What should I be recommending in 2022?
[09:13:58] <KevinX> what do they want to do?
[09:14:09] *** Joins: banana__ (~banana_@2603-6000-b500-9ce3-cc99-165d-2cd4-5427.res6.spectrum.com)
[09:14:15] <blahboybaz> theskillwithin: systemfault: I hear
[09:14:23] <blahboybaz> systemfault: Well you can what something you write does because it is defined in either the interperter or compiler (depending on what language you are working in). In other words a compiler or interpreter defines what code does and what its syntax is and there are connections between those 3 things (syntax, behavior, and definition). However, most people don't study what the compiler or
[09:14:29] <blahboybaz> interpreter defines and how it operates but they start with the code itself (code first approach). This is when confusion arises about how code behave and its connection with syntax because you're relying on your ability to understand it, the testimony of others, and whether you can understand their testimony accurately.
[09:14:29] <KevinX> that's the best way. Find a project and build it, or find some tutorials that will help them build it
[09:15:16] <blahboybaz> I been writing code that works for a while. It isn't elegant or even that great but I can usually make something work eventually. Just what's at back of how I think of it - that's what I question
[09:15:56] <EdFletcher> No matter how many words you type or say, “if(x)” will never be a function definition. Sorry.
[09:16:10] <KevinX> when you learn a spoken language though you don't learn the "why" until after you already understand the "how"
[09:16:13] <wyclif> KevinX: They just wanna learn JS from the ground up
[09:16:21] <KevinX> I think it's the same in programming.
[09:16:39] <KevinX> Just blindly learn how to do it then start asking why
[09:16:43] <EdFletcher> Gotta get details spot on if you’re learning from the ground up, otherwise you build a foundation on lies
[09:16:50] <blahboybaz> When I was in university they taught us C and C++ and for those languages you could find books and tons of materail on the internet that went into great detail about how the compiler worked on the code. Js I don't see an equivalent
[09:17:12] <systemfault> blahboybaz: There's no point as a user of the language.
[09:17:43] <blahboybaz> So if you want to know that isn't ok?
[09:17:47] <KevinX> wyclif well i still think finding a project is a good way. even messing around with something like kaboom.js for a bit
[09:17:53] <KevinX> I'm not a teacher though
[09:18:32] <systemfault> blahboybaz: Are you at a point where you can write something more complicated than a loop and a hello world?
[09:18:43] <systemfault> blahboybaz: If not, maybe you should start with that?
[09:18:48] <KevinX> for me, I'm learning Rust right now by rebuilding terminal applications (like head, grep, cat, etc). That's up my alley
[09:18:52] <blahboybaz> When I read about the C compiler (many many years ago now) it made the language make sense - learning about that was like someone speaking plainly to me
[09:19:13] <blahboybaz> systemfault: I wrote a singly linked list in js
[09:19:41] <systemfault> Coolz...
[09:19:48] <KevinX> blahboybaz many experienced, capable JS devs don't have an idea how all that works
[09:19:56] <deltab> blahboybaz: what kind of things did it tell you about the compiler? parsing, code generation?
[09:20:08] <sickdyd> mmm can I do something like this? *:not(svg) { }
[09:20:15] <sickdyd> target all except svgs
[09:20:17] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:20:29] *** Joins: kakashiA1 (~kakashi@105.154.2.98)
[09:21:13] <sheetjs> C is less of a moving target so that sort of deep analysis makes sense
[09:21:20] <blahboybaz> I hear that but I think it's because they don't think in a way where their ability to use the language is prohibited by their understaning of a part of it - in other words there is something I need to know in order to work with it
[09:21:23] <KevinX> ill watch your video later though. listening to some osint ukraine discourse atm
[09:21:30] <blahboybaz> for sure
[09:21:32] <blahboybaz> np
[09:21:36] <sheetjs> C++ and JS are moving targets and the best practices change frequently
[09:21:40] <blahboybaz> It was just an offer
[09:21:55] <EdFletcher> JS is also orders of magnitude more complex to implement than C
[09:22:25] <blahboybaz> sheetjs: the C compiler is written in stone (stored in a repository) it defines the language and it does not change until a new version is released
[09:22:33] <EdFletcher> (which is natural as languages move up in abstraction levels)
[09:22:33] <blahboybaz> that is concrete that you can rely on
[09:22:45] <systemfault> blahboybaz: Same for JS.
[09:22:48] <EdFletcher> yup
[09:23:01] <systemfault> There's a standard for the language... that standard is updated once a year.
[09:23:03] <sheetjs> there's no single "C compiler".  GCC has its own extensions, Clang/LLVM has its own extensions, ICC has its own, etc etc
[09:23:04] <theskillwithin> if your trying to apply your knowledge in c to js, your gunna have a bad time
[09:23:13] *** Joins: silverdust (~silverdus@user/silverdust)
[09:23:15] <sheetjs> actually theskillwithin
[09:23:31] <sheetjs> for performance oriented design, the C-style still smokes idiomatic JS
[09:24:17] <blahboybaz> So what make me able to work well with a language is understanding that concrete aspect of it. This is what I call "under the hood". Knowing how the interpreter or compiler is working is the basis of my ability to know what each peice of syntax does and write code that works - point blank.
[09:24:22] <blahboybaz> Thing is...
[09:24:28] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[09:24:33] <KevinX> wyclif btw, before "hack.exe" we had xlcan for a couple years which came from the X in KevinX... we were kids. Big fans of the movie Hackers and Hackers 2 :)
[09:24:39] <EdFletcher> maybe JS just isn't for you, then
[09:24:50] <systemfault> sheetjs: Really depends on the case.. but sure, using mutations everywhere is faster.
[09:25:03] *** Quits: kakashiA1 (~kakashi@105.154.2.98) (Ping timeout: 252 seconds)
[09:25:05] <blahboybaz> it is possible for people (you and me) to discusss code in those terms and make it easier to learn and understand what the interpreter does - what it concretely defines for writing code
[09:25:23] <systemfault> KevinX: Hackers 2 was "Takedown" right? The Kevin Mitnick story?
[09:25:23] <sheetjs> nested loops, for example, are still faster than the array functions
[09:25:25] <blahboybaz> Its like syntactic sugar for learning
[09:25:42] <KevinX> systemfault yeah exactly
[09:26:03] <theskillwithin> sheetjs i think my statement still holds up despite whether what u said in response is true or not
[09:26:07] <blahboybaz> sheetjs: so you pick on (preferrabley the one you plan to use)
[09:26:07] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[09:26:32] <blahboybaz> on\one
[09:26:36] <systemfault> sheetjs: Again, it depends, Array functions that copies are inevitably going to be slower.
[09:26:58] <sheetjs> the existence of the callback makes array functions slower
[09:27:00] *** Quits: banana__ (~banana_@2603-6000-b500-9ce3-cc99-165d-2cd4-5427.res6.spectrum.com) (Changing host)
[09:27:00] *** Joins: banana__ (~banana_@user/banana/x-2944094)
[09:27:04] <systemfault> No, that's false.
[09:27:12] <systemfault> It depends on the case.. again.
[09:27:31] <systemfault> The concept of inlining function isn't new.
[09:27:48] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 252 seconds)
[09:27:59] <EdFletcher> blahboybaz: having those discussions relies on mutually-agreed-upon terminology, which is our initial point of contention: you aren't using terminology correctly, according to the definitions the rest of us have mutually agreed upon (colloquially) long ago.
[09:28:18] <systemfault> If you use Array#reduce with a mutable accumulator, it should be as fast as writing a loop
[09:28:24] *** Joins: kakashiA1 (~kakashi@105.154.2.98)
[09:28:26] <systemfault> (For doing the same task)
[09:29:25] <EdFletcher> now _this_ discussion is what you actually might want to know details of the interpreter implementation for!
[09:29:44] <EdFletcher> (not saying you don't systemfault, just making a comparison to the other topic of the moment)
[09:30:14] <systemfault> My assumptions have often been wrong about how V8 handle things... I learned the hard way.
[09:30:47] <deltab> blahboybaz: there are articles that go into great detail about how (specific) JS implementations work, for instance at v8.dev
[09:30:51] <systemfault> What's funny though... what I believe are the most performant patterns today... could be slower in a year from now
[09:31:00] <EdFletcher> systemfault: haha nice, the best kind of learning
[09:31:01] <blahboybaz> EdFletcher: I agree. I want to be corrected (to have an accurated understanding) but the context in which code makes sense to me is concrete technical context (like making connections between what specific chars in code do according to the interpreter that executes them). Three are many ways that people talk about code and for some one way makes more sense than the other. For me that's what makes
[09:31:07] <blahboybaz> sense. The rest of it seems to confuse me
[09:31:48] <EdFletcher> ok, good. but there were folks trying to correct you and instead of ingesting that advice you went and made a video...
[09:31:51] <deltab> systemfault: yeah, ponyfoo.com has some articles about that king of thing, deoptimization etc.
[09:32:16] <deltab> *that kind of thing
[09:32:31] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:32:41] <systemfault> deltab: I had fun playing with --trace and the weird %functions instrinsics in V8 to see what is optimized or not (or force optimization)
[09:33:07] *** Joins: han-solo (~han-solo@user/han-solo)
[09:33:37] <wyclif> systemfault: I thought the second book by Littman about Kevin Poulson was more interesting
[09:33:57] <systemfault> wyclif: I haven't read it :/
[09:33:57] <blahboybaz> deltab: Yes and I try to read those things (things like that) but I end up seeing all kinds of technical jargon in them that I don't understand. Because of that I end up feeling more frustrated (read "pissed") and overwhelmed - they are using things you don't understand to describe something you don't understand. This is the point I come here chatting but sometimese the context of how we are
[09:34:03] <blahboybaz> talking about code is not a context that really clicks with me. I'm trying to lean on you guys to kind of sugar up all the crap in those articles that I don't understand but to do so in the context that really works for me
[09:34:10] <sheetjs> https://jsperf.dev/ systemfault using Before Code `return () => { return Array.from({length:1000000}, (_,x) => x); }`
[09:34:12] <wyclif> systemfault: Check it out, it's worth a read
[09:34:13] <sheetjs> with tests
[09:34:15] <sheetjs> return (beforeResult) => { return beforeResult.reduce((acc,x) => acc+x, 0); }
[09:34:26] <sheetjs> return (beforeResult) => { let acc = 0; for(let i = 0, L = beforeResult.length; i < L; ++i) acc += beforeResult[i]; return acc; }
[09:34:43] <wyclif> Poulsen, unlike Mitnick, hated the spotlight
[09:34:55] <sheetjs> loop is ~5x faster than Array reduce in chrome 98
[09:34:57] <wyclif> Didn't want attention for what he did
[09:35:44] <wyclif> Although Poulsen is more legit than Mitnick now IMO. Poulsen became a legit tech journalist. Mitnick is still...Mitnick :\
[09:35:57] *** banana__ is now known as banana_
[09:36:10] <KevinX> https://www.amazon.com/Watchman-Twisted-Crimes-Serial-Poulsen/dp/0316528579
[09:36:17] <deltab> blahboybaz: yeah, I wouldn't recommend trying to understand JS by going that deep, there's just too much to it
[09:36:19] <wyclif> Yes, that's it
[09:36:33] <KevinX> Modern Mitnick is less of the legend
[09:37:15] <wyclif> Poulsen was way more "insider" than Mitnick. Official gov't clearance, worked for some big corporations, had access to stuff that Mitnick never did
[09:38:02] <KevinX> yeah but the beauty in mitnick was that he was a regular dude
[09:38:27] <KevinX> inspired us that we could also free information
[09:38:29] <KevinX> etc etc
[09:39:21] <blahboybaz> deltab: I appreciate what your doing - I really do.. but I wasn't asking (not about that) - I was telling - telling what makes sense to me. And that is based on experience. When I understand the answer to some question I have, when the answer just clicks and becomes simple and obviouse, it is always because I'm looking at it through that lense. I just can't get anyone to talk to me in that context
[09:39:27] <blahboybaz> here (rarely). They want to talk about code in other ways and then tell me I don't need to look at it the way I know makes sense to me
[09:39:28] <wyclif> Mitnick was and still is much more in the Asperger's spectrum...obsessive compulive disorder too
[09:39:41] <blahboybaz> Imagine how you would feel if that happened frequently to you
[09:39:58] <EdFletcher> god we had to do the security courses from Mitnick's new company at my last job and man has he lost the luster... so awful on camera that guy is
[09:41:14] *** Quits: kakashiA1 (~kakashi@105.154.2.98) (Ping timeout: 272 seconds)
[09:41:17] <deltab> blahboybaz: what do you think of https://exploringjs.com/impatient-js/toc.html ?
[09:41:35] <wyclif> Mitnick wants to be like the David Blaine of hacking...like a magician selling his "secrets"
[09:41:36] <KevinX> blahboybaz you might like this project: https://www.youtube.com/watch?v=byNwCHc_IIM
[09:41:37] <skillbot> YouTube Title: Browser hacking: Let's build a JavaScript engine for SerenityOS!
[09:42:10] <KevinX> Is mitnick still relevant even? I read his one book and it was ok
[09:42:13] <blahboybaz> I'll have to look at it some time soon
[09:42:15] <blahboybaz> I appreciate you guys so much for all your effort but sometimes I sure get frustrated trying to talk
[09:42:18] <EdFletcher> wyclif: LMAO that is a perfect way to put it
[09:42:19] <KevinX> I want to read the others
[09:42:20] <wyclif> I don't think so
[09:42:33] <wyclif> He has his consultant business selling "security"
[09:42:44] <EdFletcher> naw he's trying to remain relevant with this security startup, but it's - as noted - awful
[09:42:45] <wyclif> but it's really just awareness of social engineering attacks
[09:42:46] <deltab> blahboybaz: yeah, I can understand that
[09:42:51] <KevinX> hard to blame him I guess
[09:43:00] <EdFletcher> yeah of course not, gotta do something
[09:43:10] <EdFletcher> just maybe not get on camera 😆
[09:43:43] <blahboybaz> deltab: How funny, I see that page is bookmarked - I must have been there at some time in the past  :)
[09:44:22] <KevinX> blahboybaz Andreas from the video I shared is basically building an OS inspired by the 90s aesthetic. I haven't watched this video, but maybe it gives some under the hood stuff, if it's similiar to his other stuff
[09:44:30] <wyclif> Mitnick was at his most badass, IMO, when he was on the run from the Feds and dodging them repeatedly
[09:44:38] <wyclif> But that was a loooong time ago
[09:44:55] <KevinX> the movie is great though
[09:45:03] <KevinX> when he's on the date trying to show off
[09:45:07] <EdFletcher> a long time ago indeed, i had "free kevin" stickers on my desk... in high school 😆 (and i'm old)
[09:45:11] <KevinX> but ends up looking creepy
[09:45:14] <KevinX> I can relate
[09:45:44] <wyclif> Mitnick is a genuine nerd in a way that some of the other famous hackers were not
[09:45:59] <wyclif> Socially inept, didn't know how to talk to girls, etc
[09:46:18] <Neuromancer> i know this is a unrelated to JS but you guys might know, is it not possible to edit a gist with just a personal access token?
[09:46:41] <KevinX> i think it's possible
[09:47:07] <wyclif> Yeah the whole "Free Kevin" think back in the day was a real rallying point for the community
[09:47:08] *** Joins: kakashiA1 (~kakashi@105.154.178.148)
[09:47:42] <EdFletcher> it really was! for a young and impressionable, it was very neat to see such community cohesion
[09:47:44] <wyclif> Mitnick did hard time so he does have the street cred
[09:47:49] <EdFletcher> word
[09:48:04] <wyclif> He was in Federal prison, not some Club Med joint
[09:48:20] <KevinX> eye drop tattoo tho?
[09:48:48] <EdFletcher> https://www.youtube.com/watch?v=Z2-1wcJYrWA
[09:48:48] <skillbot> YouTube Title: Pound Me In The Ass Prison
[09:48:58] <EdFletcher> lol i didn't say it, skillbot did 😉
[09:49:03] *** Joins: maret (~maret@195.158.249.18)
[09:49:05] <wyclif> HAHAHAHA no, that's only if you kill for a gang-related hit, like if you're a member of the Crips or something
[09:49:09] *** Quits: maret (~maret@195.158.249.18) (Client Quit)
[09:49:20] <theskillwithin> EdFletcher skillbot just says the title of your video, so really u kinda did
[09:49:36] <wyclif> Yeah Michael Bolton has the correct attitude toward authority
[09:50:51] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[09:50:54] <theskillwithin> been a long time since iv heard someone mention mitnick.  even after he was out he could not touch a computer as well,  but I think he landed on his feet
[09:51:02] <wyclif> Office Space is such an underrated movie. Of course I'm a huge Mike Judge fan
[09:51:12] <buu> b> async function foo(){throw "got me"} try { foo() } catch(e) { console.log("Caught me an error!") }
[09:51:13] <jellobot> (fail) got me
[09:51:23] <buu> b> async function foo(){throw "got me"} try { await foo() } catch(e) { console.log("Caught me an error!") }
[09:51:24] <jellobot> (okay) Caught me an error!
[09:51:54] <buu> b> async function foo(){throw "got me"} try { foo().catch(e=>throw(e)); } catch(e) { console.log("Caught me an error!") }
[09:51:55] <jellobot> (fail) got me
[09:51:59] <buu> =[
[09:52:04] <EdFletcher> theskillwithin: hey man i wish i made Office Space, but alas
[09:52:13] <buu> I hate you promises
[09:52:16] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:53:05] <KevinX> i still prefer the first hacker movie. it encapsulated the hacker aesthetic and culture perfectly in my view
[09:53:23] <buu> 00:15 < wyclif> Socially inept, didn't know how to talk to girls, etc
[09:53:31] <buu> This is the guy most famous for promoting social engineering?
[09:53:47] <wyclif> If you go back and watch Office Space now, post-COVID, it's like "I can't believe hundreds of thousands of people in America put up with that cubicle bullshit for years"
[09:53:56] <buu> KevinX: It manages to be awesomely sincere, very quotable and have a bitchin' sound track
[09:54:01] <theskillwithin> EdFletcher no need to be defensive, its fine
[09:54:04] <buu> and an excuse to say bitchin
[09:54:07] <wyclif> buu: Not IRL
[09:54:13] <wyclif> On the phone was different
[09:54:19] <buu> mmmhmmm
[09:54:28] <KevinX> most people are more confident when playing a character
[09:54:42] <EdFletcher> theskillwithin: haha sorry yeah the tone didn't come off there (duh irc, i should know better), was just being cheeky
[09:54:44] <buu> Is there any way to capture a promise failing with a try other than await?
[09:54:55] <theskillwithin> <3
[09:55:39] <KevinX> with a try?
[09:56:15] <blahboybaz> KevinX: Right on. Thanks man
[09:56:18] <blahboybaz> :)
[09:56:26] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[09:56:30] <Neuromancer> KevinX: i really don't get how, i see examples using "Autorization: token ghp_XXXX" but i get 404
[09:56:51] <KevinX> have to scroll up to see what I said lol
[09:56:57] <systemfault> sheetjs: Interesting... what if you change the parameters, for example: https://jsfiddle.net/v87kszpr/2/
[09:56:59] <Neuromancer> sorry man haha
[09:57:50] <KevinX> Neuromancer I just remmeber there being some terminal app that managed it, so it must have used a token
[09:58:03] <Neuromancer> guess ill check the code of one of these
[09:58:52] <KevinX> https://cli.github.com/manual/gh_gist_edit
[09:59:01] <KevinX> use the official cli
[09:59:12] <buu> Gah
[09:59:53] <Neuromancer> yeah i wanted to avoid adding a whole thing for just an edit
[10:00:25] <KevinX> then just edit in the browser :P
[10:00:54] <KevinX> there must be an api though
[10:01:38] <KevinX> Neuromancer https://docs.github.com/en/rest/reference/gists#update-a-gist
[10:01:51] <Neuromancer> yep that's the one im trying to use
[10:02:15] <Neuromancer> i think you have to OAuth first though to use it, can't with just personal token
[10:02:43] <sheetjs> systemfault: make the length a constant.  the array reduce would access length once
[10:03:06] <sheetjs> e.g. const L = myArray.length just outside of the inner hotloop and make the check i < L
[10:03:56] <buu> That's not auto optimized?
[10:04:02] <KevinX> Neuromancer i think you can use basic auth
[10:04:19] <sheetjs> you can mutate in a loop, it might be optimized at a certain number of iterations
[10:04:30] <Neuromancer> just tried that 404..ill try again with clearer mind a bit later
[10:04:34] <Neuromancer> thanks KevinX
[10:04:40] <KevinX> https://docs.github.com/en/rest/overview/other-authentication-methods
[10:04:40] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 272 seconds)
[10:04:42] <KevinX> maybe?
[10:04:44] <sheetjs> n> var arr = [1,2,3]; for(var i = 0; i < arr.length; ++i) ++arr.length;
[10:04:50] <jellobot> (timeout)
[10:04:56] <sheetjs> "i" sadly never catches up
[10:05:33] <Neuromancer> that endpoint works
[10:05:41] <Neuromancer> with basic auth
[10:06:01] <KevinX> sheetjs story of my life
[10:06:52] <Neuromancer> i think they changed the scope of gists for personal tokens and the examples i see are outdated
[10:07:41] *** Quits: dsrt^ (~dsrt@50.232.121.75) (Remote host closed the connection)
[10:08:14] <sheetjs> interestingly, for more iterations and a smaller array, reduce is faster
[10:08:30] <sheetjs> so maybe it's actually optimizing out the reduce result after a certain number of iterations
[10:08:45] <sheetjs> try array length 100 and loop count 100000000
[10:09:49] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-e149-f31f-1120-01f3.res6.spectrum.com) (Ping timeout: 240 seconds)
[10:10:14] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-e149-f31f-1120-01f3.res6.spectrum.com)
[10:10:19] <systemfault> What sucks though... is that it may not be true next version of V8 :(
[10:10:53] <sheetjs> that's why the C-style is preferable
[10:11:05] <sheetjs> you rarely see regressions or wild swings in the performance
[10:11:26] <EdFletcher> systemfault: why’s that?
[10:11:55] <systemfault> Because they keep tweaking things I guess
[10:12:26] <sheetjs> https://github.com/petkaantonov/bluebird/wiki/Optimization-killers
[10:12:29] <EdFletcher> Oh thought you’d heard about some specific regression that was coming
[10:12:36] <systemfault> No, not at all
[10:12:40] <EdFletcher> But yeah, they do tweak V8 like crazy
[10:12:41] <sheetjs> "All this is wrong in TurboFan. (Node 8+) "    "Please do not take anything written here as performance advice, this is here for historical reasons."
[10:13:02] <sheetjs> actually, there was a huge regression around that time
[10:13:19] <sheetjs> https://github.com/nodejs/node/issues/18218
[10:14:12] <deltab> blahboybaz: okay, I've listened to the whole video and I think I understand what you mean. As it happens, there are actually languages in which a function call can be followed by a block, which is passed into the function as an extra argument, so it's possible to implement new control structures as functions. However JS isn't one of them: its control structures have ad-hoc syntax, introduced with a
[10:14:18] <deltab> keyword (if, while, for, try, etc.), not an identifier
[10:14:34] *** Joins: maret (~maret@195.158.249.19)
[10:14:46] <EdFletcher> sheetjs: Oof, the v8 bug is still open too, bummer https://bugs.chromium.org/p/v8/issues/detail?id=7528
[10:15:00] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[10:15:06] <sheetjs> just in general, browser optimization is the source of a number of woes
[10:15:10] <EdFletcher> “I'm not going to work on this anytime soon.” LOL
[10:16:14] <sheetjs> https://bugs.chromium.org/p/v8/issues/detail?id=6696 yeah there are a number of bugs
[10:17:27] <deltab> blahboybaz: the parser knows that "if(" isn't the start of a function call because "if" isn't an identifier, so it switches to its rules for parsing 'if' statements instead
[10:17:56] <sheetjs> https://bugs.chromium.org/p/v8/issues/detail?id=3175 from 2014
[10:18:52] <EdFletcher> sheetjs: Wow, that’s an oldie
[10:18:53] *** Quits: kakashiA1 (~kakashi@105.154.178.148) (Ping timeout: 256 seconds)
[10:19:40] <sheetjs> back to the point about optimizing for a specific version of v8
[10:19:43] <EdFletcher> “4 years later, the same issue persists.” This _comment_ is now 4 years old 🤣
[10:20:11] <sheetjs> the original worksheet design was trying to optimize for IE10, wherein large arrays would crash the browser but large objects did not
[10:20:32] <sheetjs> 10 years later V8 reigns and the keyed object approach is worse than the array of arrays
[10:20:33] <blahboybaz> deltab: I see thanks for clarifying that. Now just to be clear - that is what it looked to me like try/catch was doing.. the catch in try/catch looked like it was acting as a function call - the catche(...) part of it - followed by a block - the {...} part of it right after catch(...)
[10:21:18] <blahboybaz> catche(...)\catch(...)
[10:21:42] <blahboybaz> and that block somehow altering the function call
[10:21:54] <deltab> yeah, I can see that; but catch is a keyword
[10:22:05] <blahboybaz> like if
[10:22:09] <deltab> yep
[10:22:13] <blahboybaz> ok
[10:22:58] <blahboybaz> then the e in catch(e) is the same as the condition we put into an if statement? It is actually tested to determine whether to enter that block?
[10:23:08] <deltab> also, the try/catch syntax doesn't allow a function call there: it has to be 'catch' or 'finally'
[10:23:55] <deltab> no, for catch it's a variable name, which gets assigned the caught exception
[10:24:25] <blahboybaz> but the variable can not be global because of scope considerations
[10:24:34] *** Joins: silverdust (~silverdus@user/silverdust)
[10:26:14] *** Joins: LtHummus (~lthummus@97-126-97-69.tukw.qwest.net)
[10:26:30] <systemfault> You can even omit catch :)
[10:26:51] <systemfault> Or omit catch's argument
[10:26:51] <buu> https://eslint.org/docs/rules/array-callback-return
[10:27:00] *** Quits: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com) (Ping timeout: 240 seconds)
[10:27:05] <buu> What do you suppose is the problem with the last "incorrect" example
[10:27:22] <deltab> blahboybaz: https://exploringjs.com/impatient-js/ch_exception-handling.html#the-try-statement
[10:27:29] <blahboybaz> systemfault: In which case a canned error message will be printed
[10:27:46] <blahboybaz> from where and how nobody knows (its magic!)
[10:27:52] <systemfault> buu: It returns true or undefined where a predicate is required.
[10:27:56] <blahboybaz> deltab: Imna check that out
[10:28:13] <systemfault> buu: While "undefined" is indeed falsy... it's kind of sloppy.
[10:28:38] <buu> so it'd be fine with "return false;" there instead?
[10:28:43] <systemfault> Yup
[10:28:49] <buu> meh
[10:29:04] <buu> In perl 'return;' is the ultimate false
[10:29:05] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 256 seconds)
[10:29:43] <blahboybaz> deltab: so given the example at that link "error" - the variable in catch - is defined as what?
[10:30:07] <blahboybaz> A system error message? Whatever the guy writing the code wants it to be?
[10:31:08] <systemfault> Could be anything because anything can be thrown in JS
[10:31:09] <deltab> whatever value was thrown
[10:31:28] <systemfault> In a perfect world, only objects inheriting from Error should be thrown
[10:31:48] <deltab> n> try { throw 123; } catch (e) { console.log(e); }
[10:31:49] <jellobot> (okay) 123
[10:32:35] <buu> n> try { throw 123; }
[10:32:36] <jellobot> (fail) SyntaxError: Missing catch or finally after try
[10:32:39] <buu> =[
[10:32:51] <blahboybaz> deltab: I'm looking at that
[10:33:14] <blahboybaz> The variable in the catch statement is defined by something called "throw" ?
[10:33:24] <deltab> yes
[10:33:40] <systemfault> blahboybaz: You need to understand how exceptions work.
[10:33:41] <deltab> or rather, its value is provided by throw
[10:33:55] <systemfault> blahboybaz: Do you understand the concept of "call stack"?
[10:34:09] <blahboybaz> Error is a builting object?
[10:34:24] <blahboybaz> systemfault: not as well as I would like
[10:34:34] <blahboybaz> I relate it to hardware
[10:34:36] <deltab> which is often in another function: it's a way of passing a value from one place to another, regardless of what function calls are between them
[10:35:58] <blahboybaz> deltab: So, ultimately, there is more to this try/catch business than just try/catch or even finally
[10:36:22] <ox1eef> it can be used as a mechnacism for control flow, but afaik that is frowned upon.
[10:36:22] <deltab> e.g. a function call readConfig calls readFile, which calls openFile, but the file can't be opened so openFile throws an error
[10:36:26] <blahboybaz> In other words.. if I want to understand how to define my own error messages I have to start looking at more
[10:38:19] *** Joins: audiobirb (~audio@user/audio)
[10:38:22] <deltab> https://exploringjs.com/impatient-js/ch_exception-handling.html#motivation-throwing-and-catching-exceptions
[10:38:49] <systemfault> blahboybaz: function a() {b(); } function b() { c(); }  function c() { console.log('HI'); } a() When the console.log is executed the callstack is: c -> b -> a. Then after, "c" is removed from the stack... then "b"... and finally "a"
[10:39:04] <systemfault> Exceptions propagate through the call stack
[10:40:33] <systemfault> If I were to throw an exception in "c"... if there's no catch in that function then it's going to lookup for a "catch" in "b"... then if there's none in "b"... it will lookup for one in "a"... if "a" doesn't the since the callstack is empty, you'll get an error in your console
[10:40:46] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[10:41:50] <blahboybaz> systemfault: that example looks like currying
[10:42:19] <deltab> because of the arrows?
[10:42:32] <ox1eef> focus on the basics before you fly off to even more diffilcult concepts like currying :p
[10:42:35] <blahboybaz> idk why just made me think of it
[10:42:40] <blahboybaz> because of nesting I guess
[10:43:06] <blahboybaz> I had wished there were a simple answer..
[10:43:11] <blahboybaz> I can see I'll have to study on that whole subject (the whole thing) and the answer isn't limited to the parts I was limiting it to earlier. This is a pattern with me. I come, I expend all my energy trying to convey what's on my heart; then, exhausted, the materaial to answer it come - but by that time I'm beat.
[10:43:12] <systemfault> blahboybaz: You understand what a stack is? LIFO?
[10:43:28] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:6666:3919:344e:a842:29ca)
[10:43:45] <deltab> there are more concepts in programming than there are symbols in ASCII, so you'll see similar notation used for quite different things, unfortunately
[10:43:50] <systemfault> blahboybaz: Just write snippets... something similar to my a/b/c thing
[10:44:33] <blahboybaz> systemfault: LIFO  and  FIFO are concepts the stack is hardware but more specifically how the hardware executes stuff....
[10:44:55] <systemfault> The thing that is going to grind your gears... try/catch/finally works differently in async functions...
[10:44:56] <blahboybaz> the "stack" is tied to "little endian" and "big endian"
[10:44:59] <blahboybaz> in some way
[10:45:18] <blahboybaz> you don't let me answer and I cant understand your responses fast enough to keep up
[10:46:12] *** Quits: p-i- (~Ohmu@2403:6200:8978:6666:78a7:12ab:c91c:e77) (Ping timeout: 240 seconds)
[10:46:18] <ox1eef> the stack is like an array that grows when you enter a function call, and shrinks when you exit one.
[10:46:24] <friend> i have a draggable element that keeps missing the onmouseup event because the pointer is off the screen when mouseup occurs What's the best way to handle that? should I handle onmouseup on the document?
[10:46:25] <blahboybaz> I don't think I udnerstand these (several) concepts that have been brought up BUT I also don't think it is going to be possible to grasp it all tonight (that fast)
[10:46:41] <blahboybaz> ox1eef: yes
[10:47:01] <blahboybaz> ox1eef: like an accordian (sort of)
[10:47:26] <blahboybaz> OH!
[10:47:28] <ox1eef> well, whatever helps you conceptualize it. im not well versed in accordians to know if that makes sense or not.
[10:47:41] <blahboybaz> I think OH! maybe... hold on
[10:48:44] <ox1eef> https://developer.mozilla.org/en-US/docs/Glossary/Call_Stack
[10:48:52] <deltab> accordians expand and contract throughout their length, so not the best analogy
[10:49:01] <ox1eef> irc is good, but its never as good as a thoughtful article.
[10:49:11] <deltab> stacks grow just by having extra things added at the end
[10:49:40] <EdFletcher> like a stack of plates... you add a new one to the top, you can't get to the ones under it until you remove that one
[10:49:44] <blahboybaz> little endian and big endian correspond to lifo and fifo and which one is used is determined by the hardware (the type of the hardware) - memory I think?  And when we talk about a stack growing or shrinking we are talking about it either having items placed on teh stack or removed from it (which can happen either in lifo or fifo order - but not both - one or the other depending on the hardware).
[10:50:01] <EdFletcher> endianness has nothing to do with the stack data structure whatsoever
[10:50:40] <blahboybaz> Each item on the stack is being placed in a physical memory location
[10:51:29] <deltab> a stack is specifically LIFO
[10:52:07] <deltab> if it's FIFO it's a queue instead
[10:52:28] <blahboybaz> ahh, I remember that now (from way way back)
[10:52:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:53:58] <blahboybaz> I think I'll find a good article and/or a video on these subjects (the stack, error handling)
[10:54:19] <deltab> when A calls B, and B calls C, and C calls D, and D returns, it'll go back to C, and C will return to B, and B will return to A
[10:54:23] <blahboybaz> Discussing it here gives me a good framework to understand that when I see it tho
[10:55:04] <blahboybaz> deltab: Oh well I've known that but I don't think I connected it with the terminology
[10:55:36] <blahboybaz> The way I understand what you just said is in terms of "order of operations" - like in algebra
[10:55:56] <blahboybaz> they both describe the same thing in different ways of saying it
[10:56:01] <theskillwithin> i do FIFO for food in my fridge and pantry
[10:56:29] <blahboybaz> :)
[10:56:35] <blahboybaz> rotate stock
[10:56:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[10:57:08] <deltab> there are some calculators that use a stack: you write  1 2 +  to add 1 and 2
[10:57:50] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:57:56] <deltab> first 1 is pushed onto the stack, then 2 is pushed, then + pops both numbers and adds them and pushes the sum onto the stack
[10:58:05] <blahboybaz> I remember that syntax is in some programming languages (there's a name for it but I don't recall what it is)
[10:58:12] <sheetjs> RPN
[10:58:15] <sheetjs> reverse polish notation
[10:58:28] <blahboybaz> nice
[10:58:41] <blahboybaz> is that a Polish joke?
[10:58:44] <blahboybaz> :p
[10:58:48] <buu> LISP
[10:58:55] <blahboybaz> cudders and cars?
[10:59:04] <buu> blahboybaz: no, just invented by poles
[10:59:13] <buu> (+ 1 2 3)
[10:59:21] <buu> forward polish notation =p
[10:59:24] <blahboybaz> hope there aren't any poles around :)
[10:59:28] <sheetjs> https://en.wikipedia.org/wiki/Reverse_Polish_notation
[11:00:50] <blahboybaz> I gotta go you guys. It's been real nice tho. Can't believe you all care enough to talk to me this long
[11:00:51] <deltab> specifically Jan Łukasiewicz
[11:02:00] <sheetjs> Jan Łukasiewicz might be mildly upset because it's RPN rather than RŁN
[11:03:00] <deltab> blahboybaz: your reading assignment is chapter 7 :-)  https://exploringjs.com/impatient-js/ch_syntax.html
[11:04:52] <blahboybaz> ok
[11:04:52] *** Quits: D4mned (~D1mned@212.101.251.71) (Read error: Connection reset by peer)
[11:04:53] <blahboybaz> :)
[11:05:12] *** Joins: D4mned (~D1mned@212.101.251.251)
[11:05:46] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[11:10:10] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:14:25] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[11:15:03] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[11:16:00] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:16:23] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:e190:5acd:4e68:2323)
[11:22:40] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[11:23:43] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[11:24:26] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[11:29:47] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[11:30:54] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:35:28] *** Joins: cthulchu_ (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[11:35:57] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[11:37:23] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:38:47] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[11:38:51] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d9af:8eb3:1109:8cbb)
[11:50:03] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:e190:5acd:4e68:2323) (Remote host closed the connection)
[11:53:14] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:55:00] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:e190:5acd:4e68:2323)
[11:57:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[11:58:03] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[12:00:17] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:04:23] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 272 seconds)
[12:05:39] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[12:06:21] *** jazzy2 is now known as jazzy
[12:07:54] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:11:07] *** Joins: silverdust (~silverdus@user/silverdust)
[12:12:15] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[12:14:16] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:15:35] *** Joins: fiend (~friend@user/friend)
[12:15:53] *** Joins: rendar (~rendar@user/rendar)
[12:16:06] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 252 seconds)
[12:16:33] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:16:34] *** Quits: friend (~friend@user/friend) (Ping timeout: 260 seconds)
[12:18:37] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:19:24] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:e190:5acd:4e68:2323) (Ping timeout: 252 seconds)
[12:20:50] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[12:22:41] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:22:45] *** Joins: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at)
[12:23:37] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:e190:5acd:4e68:2323)
[12:24:19] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[12:26:04] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:29:18] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[12:30:13] <sheetjs> what is the ESM way to do a deep export like export { foo, bar: { baz, qux } }
[12:30:55] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[12:31:03] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:32:03] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Ping timeout: 256 seconds)
[12:35:34] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:36:41] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 272 seconds)
[12:36:59] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:39:11] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[12:39:32] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:41:07] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 272 seconds)
[12:41:26] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:46:48] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[12:50:37] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:53:38] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:57:19] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:59:08] *** Quits: zauberfisch (~Zauberfis@cm147-42.liwest.at) (Quit: No Ping reply in 180 seconds.)
[12:59:59] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 250 seconds)
[13:00:28] *** Joins: zauberfisch (~Zauberfis@cm147-42.liwest.at)
[13:00:36] *** Quits: jazzy (~jaziz@user/jaziz) (Quit: Beddie bye-bye)
[13:02:05] *** Joins: i0e (~is0ke3@user/is0ke3)
[13:03:57] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:05:03] *** Quits: cthulchu_ (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 252 seconds)
[13:06:04] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:06:49] *** Quits: maret (~maret@195.158.249.19) (Quit: maret)
[13:08:54] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[13:14:33] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[13:17:09] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[13:17:49] *** Joins: i0e (~is0ke3@user/is0ke3)
[13:22:51] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) (Remote host closed the connection)
[13:22:54] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[13:24:14] *** Joins: i0e (~is0ke3@user/is0ke3)
[13:24:39] *** Joins: Guest99 (~textual@37.37.203.127)
[13:25:51] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[13:26:00] <no_gravity> Good Morning! How do you delete a cookie these days?
[13:27:58] *** Quits: average_ (uid473595@id-473595.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:29:11] *** Guest99 is now known as ekh
[13:30:57] <theskillwithin> I like using https://www.npmjs.com/package/js-cookie
[13:31:29] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[13:31:33] <no_gravity> How does it do it?
[13:31:42] *** Joins: silverdust (~silverdus@user/silverdust)
[13:32:37] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[13:34:40] <theskillwithin> no_gravity I think they set the cookie to expire in like zero seconds
[13:35:27] <no_gravity> With the good old document.cookie = "myCookie;expires=..."?
[13:35:51] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[13:36:10] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:14ca:e3f3:4023:5c06)
[13:36:57] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 252 seconds)
[13:37:25] *** Quits: kmh (~kmh@2a00:6020:5004:6800:2936:7094:fde0:e329) (Quit: Leaving)
[13:37:37] *** Joins: i0e (~is0ke3@user/is0ke3)
[13:38:22] <theskillwithin> https://github.com/js-cookie/js-cookie/blob/main/src/api.mjs
[13:40:00] <no_gravity> I will just do this: document.cookie = "myCookie=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
[13:41:29] *** Joins: kmh (~kmh@2a00:6020:5004:6800:b72e:dd19:b3ad:9292)
[13:46:52] *** Joins: Adoi (~Adoi@user/adoi)
[13:49:39] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:a088:8a8f:b0d:82cf) (Quit: My iMac has gone to sleep. ZZZzzz…)
[13:50:41] *** Joins: silverdust (~silverdus@user/silverdust)
[13:51:59] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[13:52:17] *** Joins: Adoi (~Adoi@user/adoi)
[13:52:50] *** Parts: Adoi (~Adoi@user/adoi) ()
[13:53:01] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:53:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:55:50] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 272 seconds)
[13:57:44] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[13:58:22] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[14:00:07] <msfninja> that's how w3schools says to do it
[14:00:56] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[14:01:44] <msfninja> no_gravity: instead of typing out the entire date string, you can simply do `new Date(0).toUTCString()`
[14:01:57] <no_gravity> msfninja: Ok
[14:02:39] <msfninja> instead of 0 you can also technically supply any timestamp that is in the past
[14:03:05] *** Joins: iomari891 (~iomari891@197.210.76.39)
[14:04:27] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:14ca:e3f3:4023:5c06) (Ping timeout: 252 seconds)
[14:04:43] *** Joins: rendar (~Paxman@2001:b07:2ef:6e26:4d2e:da3d:79eb:bca3)
[14:04:43] *** Quits: rendar (~Paxman@2001:b07:2ef:6e26:4d2e:da3d:79eb:bca3) (Changing host)
[14:04:43] *** Joins: rendar (~Paxman@user/rendar)
[14:05:44] <dave0> "yesterday"
[14:05:46] *** Quits: rendar (~Paxman@user/rendar) (Client Quit)
[14:07:46] <no_gravity> "when jesus was born"
[14:08:12] <dave0> that's "christmas"
[14:11:14] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[14:12:09] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[14:15:51] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Remote host closed the connection)
[14:16:45] *** Quits: colordro1 (~erahhal@69.53.245.255) (Ping timeout: 272 seconds)
[14:18:39] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[14:18:48] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[14:21:29] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[14:25:11] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:27:01] *** Quits: karabaja4 (~karabaja4@dh207-92-189.xnet.hr) (Remote host closed the connection)
[14:27:51] *** Quits: ekh (~textual@37.37.203.127) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:28:15] *** Joins: monoxane (~monoxane@user/monoxane)
[14:29:48] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[14:31:32] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:32:53] *** Joins: trafficjam (~qubes@119-12-218-129.dynamic.ipstaraus.com)
[14:33:05] <trafficjam> hey guys
[14:33:42] <trafficjam> just wondering, is it considered bad practice to make several api requests for the same page request?
[14:34:39] <trafficjam> e.g. an SPA page has several different data sources (user profile, list of products, recently sold)
[14:36:36] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 245 seconds)
[14:38:29] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:14ca:e3f3:4023:5c06)
[14:42:12] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:d494:1d4b:6189:b90d)
[14:43:30] *** Quits: blahboybaz (~blahboyba@c-67-161-96-6.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[14:46:26] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:48:19] <paule32> hello
[14:48:38] <paule32> i use: "try finally end;" block
[14:48:57] <paule32> is the finally block executed after "each all" ?
[14:49:22] <msfninja> trafficjam: can you cache the content after the first request to the api?
[14:49:23] <paule32> so, when i have a EXIT around "try finally" ?
[14:50:30] <msfninja> trafficjam: the browser is technically supposed to cache content requested over a network itself
[14:52:53] *** Joins: stagas (~stagas@2a02:587:c4ab:42ec:83b0:e8d2:3e90:8e1f)
[14:54:28] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:57:12] <trafficjam> msfninja: i mean it's cache to some degree, although that's a different question
[14:57:17] <trafficjam> *cached
[14:57:45] <msfninja> if it's data like json data of a user profile, i would first check if that data is stored in localStorage, if not, make a request to the api, and then save that json in localStorage
[14:57:47] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[14:57:48] <msfninja> with html idk
[14:57:55] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[14:58:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[15:00:06] <msfninja> whether it's a bad practice depends largely on your server capabilities, i think
[15:00:13] <Maxdamantus> trafficjam: it should be fine. With http2 the three requests will likely be handled at the same time anyway.
[15:01:28] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[15:01:53] <Maxdamantus> (with HTTP/1.1, they'll also likely be handled at the same time, but that will involve three connections; with http2 these requests can all naturally be sent in one packet in the same connection)
[15:02:05] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:02:25] <trafficjam> ah good to know, thanks
[15:04:19] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[15:05:00] <stenno> paule32: are you talking about javascript?
[15:06:13] *** Quits: average (~average@user/average) (Quit: WeeChat 3.0)
[15:06:24] *** Joins: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2)
[15:06:24] *** Quits: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2) (Changing host)
[15:06:24] *** Joins: average (~average@user/average)
[15:08:40] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 272 seconds)
[15:09:10] *** Joins: kiras (~kiras@176.103.56.119.adsl.inet-telecom.org)
[15:13:39] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:16:03] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[15:19:17] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[15:21:57] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:27:31] <akissz> Hi, if anyone has a minute free, to answer a basic javascript question written by a programmer who does not use normal programming words/terms in my question methods, I posted a question on StackExchange (and people don't understand me there). View my question at:
[15:27:32] <akissz> https://wordpress.stackexchange.com/questions/403554/multiple-jquery-inputs-or-binds-in-customizer-control-javascripts
[15:27:37] *** Quits: kiras (~kiras@176.103.56.119.adsl.inet-telecom.org) (Changing host)
[15:27:37] *** Joins: kiras (~kiras@user/kiras)
[15:27:40] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[15:27:59] *** Quits: kiras (~kiras@user/kiras) (Quit: Leaving)
[15:28:15] *** Joins: kiras (~kiras@user/kiras)
[15:29:44] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:31:47] *** Joins: nomic (~nomic@185.217.117.88)
[15:32:38] *** Joins: wez (~wez@about/web/wez)
[15:32:56] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[15:33:39] *** Joins: jim (~jim@about/linux/staff/jim)
[15:33:51] <jim> wez, oh there you are
[15:34:18] <wez> :D
[15:34:27] <akissz> Hi
[15:34:33] <jim> hi
[15:35:21] <wez> so, as I was saying, https://github.com/nvm-sh/nvm is awesome him
[15:35:29] <jim> ok, (dont even know if it works this way) is there a repl for javascript?
[15:35:42] <wez> for nodejs stuff though, are you wanting toi do browser stuff too?
[15:36:07] <wez> for browser you can use brower developer console
[15:36:40] <jim> maybe... for sure, not thinking about any application of the tech yet
[15:37:20] <wez> Well they are slightly different :)
[15:37:51] *** Joins: VoidSync (~sync@user/voidsync)
[15:37:57] <jim> which kind does this channel support?
[15:38:12] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[15:38:36] *** Joins: silverdust (~silverdus@user/silverdust)
[15:39:17] <wez> Both I would say, probably get more browser questions here though as there is a dedicated node channel
[15:39:46] <wez> I will anser both here, as well as python and django questions :P
[15:39:51] <wez> answer*
[15:40:09] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[15:40:09] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[15:41:52] <jim> oh really... I got a django problem
[15:42:09] <jim> are you on #django too?
[15:42:17] <wez> I am :)
[15:43:05] *** Joins: lara99 (~lara99@93-36-163-139.ip61.fastwebnet.it)
[15:47:51] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 252 seconds)
[15:49:01] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (Ping timeout: 240 seconds)
[15:49:19] *** Joins: silverdust (~silverdus@user/silverdust)
[15:50:53] *** Joins: trevors (~trevors@user/trevors)
[15:52:15] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:53:41] *** Parts: trafficjam (~qubes@119-12-218-129.dynamic.ipstaraus.com) ()
[15:53:54] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:54:20] *** Joins: lamein (~lamein@user/lamein)
[15:54:27] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 252 seconds)
[15:54:47] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:56:38] *** Joins: kakashiA1 (~kakashi@105.154.178.148)
[15:56:41] *** Quits: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at) (Quit: Leaving)
[15:56:50] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[15:56:59] *** Joins: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at)
[15:57:03] *** Joins: gzd_ (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at)
[15:57:14] <lumberjack123> Hi all I have Electron app I am running with yarn but I would like to make an AppImage or deb out of it
[15:57:26] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[15:58:03] *** Quits: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at) (Remote host closed the connection)
[15:58:03] *** Quits: gzd_ (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at) (Remote host closed the connection)
[15:58:18] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[15:58:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[16:03:02] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:07:14] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) ()
[16:07:57] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[16:08:06] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:10:28] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:14ca:e3f3:4023:5c06) (Remote host closed the connection)
[16:10:52] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:14ca:e3f3:4023:5c06)
[16:19:57] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:21:31] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[16:22:05] *** Quits: sfields_ (~sfields@136.34.181.232) (Read error: Connection reset by peer)
[16:22:17] *** Joins: sfields_ (~sfields@2605:a601:adea:7a00:e8e5:6412:6fe7:4c90)
[16:24:36] *** Joins: trevors (~trevors@user/trevors)
[16:26:15] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:26:44] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[16:30:56] *** Joins: silverdust (~silverdus@user/silverdust)
[16:31:18] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[16:34:40] *** Joins: Maxattax97 (~max@rrcs-96-10-153-226.midsouth.biz.rr.com)
[16:36:04] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 272 seconds)
[16:36:51] *** Quits: Maxattax97 (~max@rrcs-96-10-153-226.midsouth.biz.rr.com) (Remote host closed the connection)
[16:37:11] <madprops> say i get the ip of a malicious user that used my node application that is reversed proxied with apache. What's the best way to blacklist that ip?
[16:37:40] <madprops> should it be at the node level, apache level, system level?
[16:37:55] *** Quits: VoidSync (~sync@user/voidsync) (Remote host closed the connection)
[16:39:35] *** Joins: optimant (optimant@user/optimant)
[16:40:29] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:41:46] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 272 seconds)
[16:45:09] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[16:45:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:46:52] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 250 seconds)
[16:53:37] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[16:54:00] <ox1eef> using iptables they wont even get to your server, so if thats an option, yes - system firewall.
[16:55:04] <ox1eef> but it's a bit like plugging holes in the titantic, there's so many ways around it, from VPNs to tor, that you would need a more inclusive strategy i think
[16:55:11] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:57:30] *** Joins: pulse (~pulse@user/pulse)
[16:58:52] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[16:59:51] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:00:17] *** Joins: silverdust (~silverdus@user/silverdust)
[17:01:43] *** Quits: fiend (~friend@user/friend) (Remote host closed the connection)
[17:05:00] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[17:05:04] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 250 seconds)
[17:07:03] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:14ca:e3f3:4023:5c06) (Ping timeout: 252 seconds)
[17:07:13] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:07:38] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[17:08:35] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:09:09] *** Quits: makara1 (~makara@196.214.171.83) (Ping timeout: 256 seconds)
[17:10:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:10:44] *** Joins: makara (~makara@196.214.171.83)
[17:12:01] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:14ca:e3f3:4023:5c06)
[17:12:22] *** Joins: Camilo (~hugh@host-92-0-13-2.as13285.net)
[17:13:38] <Camilo> is it better to make API routes for the data you wish to display on particular pages, or keep the API routes as close to the database tables as possible and untangle the required information on the front end?
[17:16:30] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:d494:1d4b:6189:b90d) (Quit: My iMac has gone to sleep. ZZZzzz…)
[17:20:19] *** Joins: silverdust (~silverdus@user/silverdust)
[17:21:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:23:25] *** Joins: arthur_melo (~IRC@user/arthur-melo/x-6822691)
[17:25:35] *** Quits: junktext_ (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 256 seconds)
[17:25:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:26:36] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[17:30:51] *** Joins: Guest99 (~textual@94.128.221.11)
[17:34:06] <D4mned> is there something wrong with that
[17:34:08] <D4mned> connectionsPool().map((promise) => {
[17:34:23] <D4mned> connectionsPool() returns an array
[17:34:37] <andi_> hello i'm new to front-end programming. i have a back-end written in rust and my web-framework is rocket. can somebody may be explain how i add a nice frontend to my backend? is it correct that i use node.js and then form the front-end as a seperate website e.g. an angular and then copy/paste the stuff build to my back-end server?
[17:34:44] <D4mned> it looks weird but is it wrong or going to bite me later on
[17:35:59] <D4mned> andi_ you build a backend that takes requests
[17:36:23] <D4mned> and sends back json files or whatever
[17:36:48] <D4mned> and then a frontend that sends requests and recieve jsons or whatever from the backend
[17:36:52] <D4mned> and display them
[17:37:07] <andi_> D4mned: so you mean that the JS is sending a "GET" to my server?
[17:37:20] <andi_> and the server sends a JSON as reply?
[17:37:37] <D4mned> yeah front end sends a GET request to your server
[17:37:52] <D4mned> and then it gets back a json and then it does stuff to it and display it
[17:38:20] <D4mned> yeah check out nodjs express library for backend
[17:38:33] <D4mned> and react or angular for the frontend
[17:39:00] <andi_> yeah my backend is fine, it's already sending jsons on requests
[17:39:18] <Camilo> did you say your backend uses rust?
[17:39:29] <andi_> my current problem is that the rust framework rocket needs templates .tera
[17:39:37] <andi_> Camilo: yeah my back end is rust
[17:40:23] <andi_> and now i don't know how i write my front-end and somehow integrate it with my templates right?
[17:41:03] <Camilo> I would say use templates, or a front end, not both.
[17:41:16] <D4mned> you use it as an api
[17:41:28] <D4mned> you fetch requests to it
[17:41:35] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:41:35] <D4mned> and recieve the jsons
[17:41:56] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[17:42:15] <andi_> ah okay, so i either use my rocket templates or on the other hand i write a angular front-end?
[17:42:37] <ox1eef> you could isolate the two completely, and have an independent frontend powered by the json in the backend,
[17:42:45] <Camilo> yeah pretty much. Then when angular needs data from the back end it makes api requests. It can do this dynamically and constantly in the background, making the page very dynamic
[17:42:49] <D4mned> yeah just make sure ur backend acts as an api
[17:43:45] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[17:43:51] <Camilo> But it depends on your needs. If your page doesn't need to be so dynamic and use lots of AJAX then you can just use the templates, might be easier for smaller projects.
[17:44:26] <andi_> my project right now is pretty much "fun". i've implemented a dijkstra for germany
[17:44:57] <andi_> and now i need some web front-end so that i can click 2 times to generate a route from my clicked markers etc
[17:45:27] <andi_> so it's not that big. but if i'm already learning the front-end, i can just learn it the proper way
[17:46:06] *** Quits: Guest99 (~textual@94.128.221.11) (Quit: Textual IRC Client: www.textualapp.com)
[17:46:28] <Camilo> that sounds cool. Yeah you can probably write something interactive in reactjs, it sends the marker data to the backend api and gets a response from the back end and displays the response
[17:48:05] <Camilo> btw you can use a service like netlify to host react projects for free and it links to your github account
[17:53:25] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:54:58] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[17:55:21] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[17:55:46] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:55:52] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:57:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[17:58:23] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[17:59:14] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[18:00:36] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (Remote host closed the connection)
[18:00:58] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 250 seconds)
[18:02:18] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[18:03:08] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:05:03] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[18:06:05] *** Joins: trevors (~trevors@user/trevors)
[18:08:13] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[18:10:55] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:13:06] <ox1eef> react is like an entire ecosystem that has to be learnt, and carriges the baggage of a build system. if you truly want to keep things simple, you can get by with vanilla JS.
[18:13:15] <ox1eef> carries*
[18:14:54] *** Joins: silverdust (~silverdus@user/silverdust)
[18:15:17] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[18:17:10] <andi_> but if i'll need a full cli i can also go full rust and use WASM
[18:17:19] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:17:34] <wez> ox1eef: DOM traversal?
[18:18:02] <ox1eef> i don't follow sorry, what do you mean exactly?
[18:19:10] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 250 seconds)
[18:19:25] <wez> Would manual DOM traversal be considered vanilla JS?  Although I wouldn't consider browser extensions / HTML5 as vanilla JS.
[18:19:37] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[18:20:44] <ox1eef> yeah, it could be a component of it. why can a browser extension not be vanilla JS?
[18:25:11] <ox1eef> "vanilla JS" usually means JS in its purest, or plainest form - without build tools, JSX, etc - so maybe we are working from different definitions.
[18:27:31] *** Joins: relms2 (~relms@user/relms)
[18:28:08] *** Quits: relms (~relms@user/relms) (Read error: Connection reset by peer)
[18:28:08] *** relms2 is now known as relms
[18:28:12] *** Joins: xtd8865 (~textual@195.213.224.118)
[18:30:27] <D4mned> how would check if a listener already exist
[18:30:30] <D4mned> in nodejs
[18:30:38] <D4mned> you*
[18:34:28] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:34:31] *** Joins: mikrosis (~mikrosis@dynamic-046-114-170-087.46.114.pool.telefonica.de)
[18:36:08] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[18:37:36] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:38:42] *** Joins: jetchisel (jetchisel@user/jetchisel)
[18:44:31] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 245 seconds)
[18:46:35] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[18:46:41] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:47:42] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[18:50:53] *** Joins: silverdust (~silverdus@user/silverdust)
[18:51:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[18:52:06] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 250 seconds)
[18:52:55] <wez> ox1eef: Because it's an extension
[18:53:19] *** Quits: lara99 (~lara99@93-36-163-139.ip61.fastwebnet.it) (Quit: Client closed)
[18:54:05] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:54:32] <mikrosis> hello
[18:54:36] <mikrosis> who knows about KnexJS? :)
[18:54:47] <ThePendulum> !ask
[18:54:47] <jellobot> ThePendulum, Don't ask to ask, nor if anyone is here or alive or uses something. Just ask your question. http://www.mikeash.com/getting_answers.html
[18:54:59] <mikrosis> oK
[18:55:15] <mikrosis> I want to use KnexJS/SQL to search for text in a column/field.
[18:55:36] <mikrosis> WHERE = would be too exact, I want to find occurrence of a text in the field
[18:55:53] <mikrosis> 'This is a test!' - I want to search for 'test' and find this record
[18:56:02] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 272 seconds)
[18:56:10] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:56:56] *** Quits: xtd8865 (~textual@195.213.224.118) (Quit: Textual IRC Client: www.textualapp.com)
[18:57:17] <ThePendulum> .where('myColumn', 'like', `%${query}%`)
[18:57:18] *** Quits: kakashiA1 (~kakashi@105.154.178.148) (Ping timeout: 272 seconds)
[18:57:45] <ThePendulum> seems like their doc page is down
[18:57:57] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[18:59:28] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[18:59:58] <ox1eef> wez: we are working from different definitions of "vanilla JS" then. :) i don't consider the environment but the tools used, and for vanilla there's usually none. there's nothing to stop you from building a react or vue browser extension, and there's where the distinction often is.
[19:00:24] <mikrosis> ThePendulum: Their domain seems to be expired and domain-squatted... Try http:// and you see a classical domain bought page...
[19:00:41] <mikrosis> I hope this hadn't happened and the domain is just disconnected/parked and still under the control of a KnexJS maintainer...
[19:00:43] <mikrosis> lol
[19:00:57] <mikrosis> ThePendulum: thanks! that syntax looks very familiar
[19:01:44] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[19:01:48] *** Joins: onosendi (~onosendi@user/onosendi)
[19:02:05] <ThePendulum> you can pass other WHERE `%${query}%` isn't knex in particular but just a template string to add %% around your query so it wildcards around the start and end of it, which is sql
[19:02:11] *** Joins: Tempesta (~Tempesta@user/tempesta)
[19:02:11] <mikrosis> http://knexjs.org/
[19:02:30] <mikrosis> ThePendulum: I use FeathersJS + KnexJS for a very small API
[19:02:44] <ThePendulum> yeah idk what happened there, bit of a brainfart if they let it expire lol
[19:03:05] <onosendi> Knex is awesome. After using a query builder I'd hate to have to go back to an ORM.
[19:03:24] <wez> ox1eef: react and vue isn't native JS though
[19:03:24] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-0d13-db80-1316-2ed6.res6.spectrum.com) (Ping timeout: 240 seconds)
[19:03:37] <wez> it's a framework on top of it
[19:03:49] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[19:04:10] <mikrosis> ThePendulum: http://knexjs.org/ do you also get a namecheap page?
[19:04:38] <onosendi> Someone already opened an issue, so hopefully that gets resolved soon: https://github.com/knex/knex/issues/5057
[19:04:49] <ThePendulum> mikrosis: yes
[19:05:31] <mikrosis> onosendi: yes
[19:05:45] <mikrosis> Just was scared and thought the project closed :)
[19:05:54] <mikrosis> It is opensource, yes yes, but still
[19:06:09] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:11:43] *** Joins: NinjaKirby (Izzy@gateway/vpn/protonvpn/ninjakirby)
[19:12:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:12:55] *** Joins: zebrag (~chris@user/zebrag)
[19:13:49] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.4)
[19:13:53] <NinjaKirby> Greetings, are the cost of array.filter() operations basically non-existant with arrays holding less than 10,000 objects? That is, in the context of a game which needs to recompute every 20ms.
[19:15:51] <ThePendulum> measure it
[19:16:09] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-0d13-db80-1316-2ed6.res6.spectrum.com)
[19:17:18] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:17:19] <wez> ThePendulum  https://www.youtube.com/watch?v=Rd1nkdMPxQY
[19:17:19] <skillbot> YouTube Title: Pendulum - Voodoo People (Remix) x Blood Sugar | Matt McGuire Drum Cover
[19:17:42] <wez> oops wrong channe
[19:17:43] <wez> l
[19:17:49] <NinjaKirby> ThePendulum: Now that you put it that way, not a bad suggestion, heh.
[19:18:35] *** Joins: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at)
[19:18:42] <ThePendulum> if it's significantly less than 10,000, probably if the condition is simple, if it's around 10,000 it might start to matter
[19:19:51] *** Joins: silverdust (~silverdus@user/silverdust)
[19:20:02] <msfninja> let start = new Date().valueOf(); new Array(10000).fill({}).filter(() => true); let delay = new Date().valueOf() - start; console.log(delay + 'ms');
[19:20:06] <msfninja> no clue if that will work
[19:20:14] <NinjaKirby> Your first answer was fair tbh, I have a performance.now() metric displaying in-game, I might as well just concatenate them all then filter them all back and see what the time says.
[19:20:28] <ThePendulum> you can use console.time('something'); // do something; // console.timeEnd('something');
[19:20:31] <ThePendulum> ah
[19:21:39] <NinjaKirby> Even if it's simple for a modern computer, doing that every 20ms still feels "icky", and it's probably that feeling which is preventing me from designing some of it better in the first place.
[19:23:43] <D4mned> is this a bad thing
[19:23:45] <D4mned> client.listeners("data").some((li) => li.toString() === UpdateScreen.toString())
[19:24:03] <D4mned> turning a function into a string and comparing it
[19:24:36] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[19:25:16] <ThePendulum> can't they be the exact same function reference? or ideally attach an ID of some sort
[19:26:15] <D4mned> my brain is jammed i cant think of any other way
[19:26:41] <D4mned> i want to see if this listener exists or not
[19:27:01] <D4mned> if it doesnt i want to add it if does then do nothing
[19:27:28] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[19:27:50] <D4mned> client.listeners("data") returns an array of functions
[19:28:16] *** Joins: filename (~kilitary@188.242.105.134)
[19:28:58] <D4mned> turning them into string works but i dont how bad this is
[19:31:00] <ThePendulum> but if you attached UpdateScreen, won't the listener be equal to it without stringifying?
[19:31:02] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[19:31:04] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:6666:3919:344e:a842:29ca) (Remote host closed the connection)
[19:31:41] <D4mned> no didnt work until i stringified it
[19:32:22] <D4mned> its bad huh
[19:32:25] <D4mned> lol
[19:32:40] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Quit: BinarySavior has dropped the mic)
[19:32:56] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[19:33:24] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[19:34:24] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Remote host closed the connection)
[19:34:26] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[19:34:31] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 245 seconds)
[19:35:18] <ThePendulum> it does set up some alarm bells although I can't exactly explain why atm either
[19:35:34] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:36:09] <ThePendulum> I think I would do something like [{ role: 'updateScreen', fn: () => {} }].some((listener) => listener.role === 'updateScreen')
[19:36:51] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[19:37:10] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[19:37:35] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[19:38:48] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[19:39:12] *** Quits: goddard (~goddard@user/goddard) (Remote host closed the connection)
[19:40:01] *** Joins: src (~src@user/src)
[19:40:03] <ThePendulum> wez: nice
[19:40:18] <ThePendulum> I think that's the only pendulum song I know
[19:40:30] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 252 seconds)
[19:41:16] *** Joins: goddard (~goddard@user/goddard)
[19:42:42] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[19:43:39] <wez> ThePendulum: :D  It's actually a prodigy song :)
[19:43:46] <wez> remixed by ThePendulum
[19:44:56] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:44:59] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:46:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:46:58] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[19:47:05] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[19:47:32] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 240 seconds)
[19:47:50] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[19:48:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:51:58] *** Joins: Betal (~Betal@user/betal)
[19:53:02] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[19:56:51] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:57:26] *** Quits: wand (~user@gateway/tor-sasl/wand) (Remote host closed the connection)
[19:57:43] *** Joins: wand (~user@gateway/tor-sasl/wand)
[19:57:56] *** Joins: dea_ (~dea@185.4.227.84)
[19:58:18] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[19:59:08] *** Joins: mams31[m] (~mams31mat@2001:470:69fc:105::1:d916)
[19:59:57] *** Joins: clf059 (~clf059@212.102.46.25)
[20:00:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:03:41] *** Joins: ferdna (~ferdna@user/ferdna)
[20:07:04] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[20:11:54] *** Quits: junktext_ (~junktext@gateway/vpn/pia/junktext) (Remote host closed the connection)
[20:12:02] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[20:12:02] *** Quits: NinjaKirby (Izzy@gateway/vpn/protonvpn/ninjakirby) (Ping timeout: 272 seconds)
[20:12:46] *** Joins: NinjaKirby (Izzy@gateway/vpn/protonvpn/ninjakirby)
[20:16:52] *** Quits: goddard (~goddard@user/goddard) (Remote host closed the connection)
[20:17:16] *** Joins: goddard (~goddard@user/goddard)
[20:18:02] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[20:20:31] *** Joins: i0e (~is0ke3@user/is0ke3)
[20:20:43] *** Joins: clf059_ (~clf059@2603:3023:a2b:a800:f097:5796:35c8:7bc7)
[20:21:48] *** Quits: clf059 (~clf059@212.102.46.25) (Ping timeout: 250 seconds)
[20:22:40] *** Joins: itotutona (~itotutona@243.103.6.93.rev.sfr.net)
[20:23:25] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:14ca:e3f3:4023:5c06) (Ping timeout: 240 seconds)
[20:24:05] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:25:13] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[20:25:48] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[20:26:21] *** Quits: itotutona (~itotutona@243.103.6.93.rev.sfr.net) (Client Quit)
[20:26:53] *** Joins: i0e (~is0ke3@user/is0ke3)
[20:29:39] *** Quits: D4mned (~D1mned@212.101.251.251) (Read error: Connection reset by peer)
[20:29:42] *** Joins: D3mned (~D1mned@212.101.251.251)
[20:30:25] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[20:30:46] *** filename is now known as leizes
[20:30:46] *** Joins: itotutona (~itotutona@243.103.6.93.rev.sfr.net)
[20:30:52] *** Quits: itotutona (~itotutona@243.103.6.93.rev.sfr.net) (Remote host closed the connection)
[20:31:05] *** Joins: wqe23 (~wqe23@2603-6010-fd40-014c-ac8c-aba1-3792-9bea.res6.spectrum.com)
[20:32:00] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Quit: BinarySavior has dropped the mic)
[20:32:49] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[20:32:53] *** Quits: D3mned (~D1mned@212.101.251.251) (Remote host closed the connection)
[20:33:12] *** Joins: D3mned (~D1mned@212.101.251.251)
[20:33:22] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:89f2:b149:3bdc:a6f)
[20:33:43] *** Joins: thiras (~thiras@user/thiras)
[20:34:25] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[20:35:18] *** clf059_ is now known as clf059
[20:35:44] *** Quits: clf059 (~clf059@2603:3023:a2b:a800:f097:5796:35c8:7bc7) (Quit: Textual IRC Client: www.textualapp.com)
[20:35:52] *** Joins: Guest80 (~Guest80@pool-96-253-74-73.rcmdva.fios.verizon.net)
[20:36:10] *** Joins: clf059 (~clf059@94.140.8.5)
[20:39:54] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[20:42:13] *** Quits: iomari891 (~iomari891@197.210.76.39) (Ping timeout: 256 seconds)
[20:42:29] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[20:43:54] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:89f2:b149:3bdc:a6f) (Quit: Textual IRC Client: www.textualapp.com)
[20:44:30] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[20:44:34] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[20:46:04] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 250 seconds)
[20:47:51] *** Quits: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at) (Quit: Leaving)
[20:48:20] *** Joins: i0e (~is0ke3@user/is0ke3)
[20:49:48] *** Joins: zebrag (~chris@user/zebrag)
[20:53:37] *** Joins: stenno (~stenno@user/stenno)
[20:54:36] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[20:54:41] *** Joins: iomari891 (~iomari891@197.210.77.126)
[20:54:56] *** Joins: han-solo (~han-solo@user/han-solo)
[20:56:43] *** Joins: i0e (~is0ke3@user/is0ke3)
[20:57:06] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:00:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[21:00:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[21:02:56] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Quit: BinarySavior has dropped the mic)
[21:03:48] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[21:04:05] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[21:06:32] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Remote host closed the connection)
[21:06:55] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[21:07:04] *** Joins: colordro1 (~erahhal@2603-8001-9600-7b60-0010-0100-0001-b071.res6.spectrum.com)
[21:07:28] *** Quits: bodiccea (~bodiccea@user/bodiccea) (*.net *.split)
[21:07:28] *** Quits: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (*.net *.split)
[21:07:28] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (*.net *.split)
[21:07:28] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (*.net *.split)
[21:07:28] *** Quits: redcat (~dev@user/redcat) (*.net *.split)
[21:07:28] *** Quits: kalen (~kalen@gateway/vpn/pia/kalen) (*.net *.split)
[21:07:28] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[21:07:28] *** Quits: skylite (~skylite@46.107.44.214) (*.net *.split)
[21:07:28] *** Quits: nucleargrave (~nucleargr@user/nuclearg1) (*.net *.split)
[21:07:28] *** Quits: defn (~n0b0dy@user/defn) (*.net *.split)
[21:07:28] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[21:07:28] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[21:07:28] *** Quits: Pixi (~Pixi@user/pixi) (*.net *.split)
[21:07:28] *** Quits: albertlast (~nix@0exclusive.de) (*.net *.split)
[21:07:28] *** Quits: Spitfire_ (~spitfire@user/Spitfire) (*.net *.split)
[21:07:28] *** Quits: kuba-orlik (~kuba-orli@nyuno.kuba-orlik.name) (*.net *.split)
[21:07:28] *** Quits: ssiyad (~ssiyad@user/ssiyad) (*.net *.split)
[21:07:28] *** Quits: skillbot (~skillbot@user/skillbot) (*.net *.split)
[21:08:21] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[21:08:25] *** Quits: clf059 (~clf059@94.140.8.5) (Quit: Textual IRC Client: www.textualapp.com)
[21:09:02] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[21:09:05] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:12:55] *** Joins: nucleargrave (~nucleargr@user/nuclearg1)
[21:12:55] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[21:12:55] *** Joins: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[21:12:55] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[21:12:55] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[21:12:55] *** Joins: redcat (~dev@user/redcat)
[21:12:55] *** Joins: kalen (~kalen@gateway/vpn/pia/kalen)
[21:12:55] *** Joins: Praise (~Fat@user/praise)
[21:12:55] *** Joins: skylite (~skylite@46.107.44.214)
[21:12:55] *** Joins: defn (~n0b0dy@user/defn)
[21:12:55] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[21:12:55] *** Joins: gjvc (~gjvc@user/gjvc)
[21:12:55] *** Joins: Pixi (~Pixi@user/pixi)
[21:12:55] *** Joins: albertlast (~nix@0exclusive.de)
[21:12:55] *** Joins: Spitfire_ (~spitfire@user/Spitfire)
[21:12:55] *** Joins: kuba-orlik (~kuba-orli@nyuno.kuba-orlik.name)
[21:12:55] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[21:12:55] *** Joins: skillbot (~skillbot@user/skillbot)
[21:12:55] *** zirconium.libera.chat sets mode: +v skillbot
[21:15:05] *** Quits: Guest80 (~Guest80@pool-96-253-74-73.rcmdva.fios.verizon.net) (Ping timeout: 256 seconds)
[21:18:40] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Quit: BinarySavior has dropped the mic)
[21:18:58] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[21:26:16] *** Parts: wallbroken (wallbroken@user/wallbroken) ()
[21:27:24] *** leizes is now known as filename
[21:29:35] *** Quits: deniska (~deniska@user/deniska) (Ping timeout: 256 seconds)
[21:34:53] *** Joins: jetchisel (jetchisel@user/jetchisel)
[21:38:08] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:38:15] *** Quits: filename (~kilitary@188.242.105.134) (Quit: --fast)
[21:39:47] *** Joins: filename (~kilitary@188.242.105.134)
[21:41:00] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[21:43:29] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:44:43] *** Quits: i0e (~is0ke3@user/is0ke3) (Client Quit)
[21:47:02] <ljharb> systemfault: ok i watched the video, and yeah lots of mental model problems there
[21:47:16] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[21:47:37] *** Joins: voltage_ (voltage@user/voltage)
[21:48:19] *** Joins: Rockwood (~Rocky@user/rocky)
[21:49:03] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Read error: Connection reset by peer)
[21:49:20] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[21:51:22] *** Joins: banana__ (~banana_@cpe-65-29-184-109.wi.res.rr.com)
[21:51:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[21:54:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[21:56:27] *** Quits: iomari891 (~iomari891@197.210.77.126) (Ping timeout: 256 seconds)
[21:57:12] *** Joins: iomari891 (~iomari891@197.210.53.194)
[21:57:41] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:00:41] *** Joins: onosendi (~onosendi@user/onosendi)
[22:01:19] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:01:24] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[22:01:26] <rick123> Care to share? anything interesting ?
[22:02:46] *** Joins: dsrt^ (~dsrt@50.232.121.75)
[22:03:48] *** Joins: cthulchu_ (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[22:03:58] *** Joins: crashrep (~crashrep@user/crashrep)
[22:04:04] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[22:04:13] *** Quits: src (~src@user/src) (Quit: Leaving)
[22:04:17] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[22:05:37] *** Quits: banana__ (~banana_@cpe-65-29-184-109.wi.res.rr.com) (Ping timeout: 240 seconds)
[22:06:15] *** Quits: kiras (~kiras@user/kiras) (Ping timeout: 252 seconds)
[22:06:17] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 240 seconds)
[22:08:19] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:10:53] *** Quits: filename (~kilitary@188.242.105.134) (Remote host closed the connection)
[22:14:05] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[22:16:01] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[22:16:05] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[22:16:07] *** Joins: p-i- (~Ohmu@2403:6200:8978:9086:1030:27f5:3084:25d2)
[22:18:38] *** Quits: iomari891 (~iomari891@197.210.53.194) (Quit: WeeChat 3.3)
[22:20:12] *** Quits: p-i- (~Ohmu@2403:6200:8978:9086:1030:27f5:3084:25d2) (Ping timeout: 240 seconds)
[22:21:14] *** Joins: trevors (~trevors@user/trevors)
[22:22:42] <ljharb> rick123: nah just somebody yesterday made a video about their understanding of js syntax, and it's missing a lot
[22:24:47] *** Quits: trevors (~trevors@user/trevors) (Client Quit)
[22:25:04] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[22:27:01] *** Joins: trevors (~trevors@user/trevors)
[22:29:53] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[22:33:43] *** Quits: kmh (~kmh@2a00:6020:5004:6800:b72e:dd19:b3ad:9292) (Quit: Leaving)
[22:36:06] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Read error: Connection reset by peer)
[22:37:26] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:38:33] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[22:40:29] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[22:43:24] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[22:47:11] *** Joins: Giovanni (~Giovanni@176.55.170.26)
[22:48:02] *** Joins: D4mned (~D1mned@212.101.251.251)
[22:49:26] *** Joins: kmh (~kmh@2a00:6020:5004:6800:7cf7:18f6:edcc:82b9)
[22:52:36] *** Quits: D3mned (~D1mned@212.101.251.251) (Ping timeout: 250 seconds)
[22:53:02] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[22:55:31] *** Joins: filename (~kilitary@kilitary.xyz)
[22:58:02] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:58:37] *** Quits: hendry1 (~hendry@210.23.22.2) (Ping timeout: 240 seconds)
[22:59:54] *** Joins: hendry1 (~hendry@210.23.22.2)
[23:01:46] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[23:01:57] *** Quits: epicout (~epicout@2a01:e0a:77:db70:978a:6e9:9495:cd9d) (Ping timeout: 256 seconds)
[23:05:05] *** Quits: D4mned (~D1mned@212.101.251.251) (Read error: Connection reset by peer)
[23:05:20] *** Joins: D4mned (~D1mned@212.101.253.28)
[23:06:41] <systemfault> ljharb: Yeah, glad you watched it so I know I'm not totally crazy ;)
[23:11:34] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[23:12:00] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[23:14:48] <ox1eef> totally crazy? guilty as charged.
[23:15:51] <systemfault> I̷̢̬͉̹̼͍͇͚͘ ̷͍̺͙͛̕Á̴̖͔͕̈̉͝M̷͗̚̕ͅ ̷̨̘͖̋̀͌͜Ȃ̶̤͙̉͛͑͂̍ ̴͚̱̭̫̤̙̫̓̒̑̽͜C̵̟̭̻̎͛̂̎̒͘R̷̳̟̪̣͍̬̾̐́̋A̴̱͇̦̫̙̗͌̊̏̂̓̊Ż̸̧̅̇͐̌̓͌͂Ý̴̫͎̞̩̿̋͝ ̸̻͍̮̣͚̩̂́̈́Ṕ̷̢̙͔̻̟̜͇̃́̃̐͘E̷̳̮͔̝̹̯̬̮̽͒̊̾̽̽͂͠Ŕ̸̡͙̝̍̊̀͌̏̈̚͜S̸̫̣͕̗̝̼̺̒O̷̥͇͉̗̫͖̭͉̅̌N̷̼͛!̵̢̦͔̝̞̞̤̪̿͐
[23:16:23] <systemfault> Sorry for people having bad terminals.
[23:16:55] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[23:20:55] *** Joins: trevors (~trevors@user/trevors)
[23:22:09] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[23:26:32] <msfninja> you are a crazy person
[23:30:01] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:32:27] *** Joins: pulse (~pulse@user/pulse)
[23:34:52] <stenno> n> const Ṕ̷̃́E̷̽͒̊Ŕ̸̍̚S̸̫̣̒O̷̥̅̌N̷̼͛ = 23; Ṕ̷̃́E̷̽͒̊Ŕ̸̍̚S̸̫̣̒O̷̥̅̌N̷̼͛
[23:34:53] <jellobot> (okay) 23
[23:35:17] <stenno> gotta love identifier character sets for js
[23:36:02] *** Joins: medium_cool (~medium_co@136.36.128.48)
[23:36:05] <duckgoose> no
[23:36:13] <duckgoose> you do not gotta love that
[23:36:29] <stenno> still more restrictive than ruby
[23:36:58] <Decker> that's more than 200 characters (220)  :/
[23:37:06] <stenno> n> const {PI:π} = Math; π
[23:37:06] <jellobot> (okay) 3.141592653589793
[23:38:02] <msfninja> on whose server is this jellobot running
[23:38:05] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[23:38:32] <stenno> ljharb knows
[23:38:41] <msfninja> can i crash it by supplying some very resource demanding code
[23:38:46] <stenno> try it
[23:38:50] <stenno> its battle tested
[23:39:00] <stenno> and if you find a way, submit a bug report
[23:39:01] <duckgoose> you gonna while loop it
[23:39:04] <stenno> no
[23:39:09] <stenno> that will just time out
[23:39:26] <stenno> n> while (true)
[23:39:26] <jellobot> (fail) SyntaxError: Unexpected end of input
[23:39:30] <stenno> n> while (true);
[23:39:36] <jellobot> (timeout)
[23:40:24] <stenno> i haven't seen someone maliciously crashing the bot
[23:40:31] <EdFletcher> iirc each invocation runs in an isolated container too, so the most you can succeed in doing is hurting an ephemeral container unless you have some container escape zero-day lying around
[23:40:52] <duckgoose> well
[23:41:01] <msfninja> n> new Array(Math.pow(2, 32) - 1).fill(new Array(Math.pow(2, 32) - 1).fill('foobarbaz)));
[23:41:02] <jellobot> (fail) SyntaxError: Invalid or unexpected token
[23:41:02] <duckgoose> things like that have happened in the past
[23:41:06] <stenno> yeah its the resident bot of a channel with a lot of people who like to break things
[23:41:14] <msfninja> whoops
[23:41:29] <stenno> like thousands of people
[23:41:34] <stenno> for like the last 10 years or so
[23:41:48] <stenno> its FOSS, feel free to source dive
[23:41:51] <stenno> there are no secrets
[23:41:59] <systemfault> LIAR! There's always a secret!
[23:42:02] <EdFletcher> https://github.com/brigand/jellobot
[23:42:08] <Maxdamantus> n> let s = "a"; for(;;) s = (s + s).split("").join("");
[23:42:10] <stenno> systemfault: shush, don't tell anyone!
[23:42:13] <duckgoose> n> document.location.href
[23:42:13] <systemfault> EdFletcher: That's not the latest fork though
[23:42:14] <jellobot> (timeout)
[23:42:14] <jellobot> (fail) ReferenceError: document is not defined
[23:42:19] <duckgoose> where is the dom
[23:42:24] <EdFletcher> systemfault: ah of course not 😢
[23:42:26] <stenno> duckgoose: in the browser
[23:42:37] <systemfault> RIP Brigand
[23:42:39] <stenno> duckgoose: this is a node REPL
[23:43:17] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[23:43:32] <duckgoose> n> const { exec } = require("child_process"); exec
[23:43:33] <jellobot> (okay) [Function: exec]
[23:43:44] *** Quits: cthulchu_ (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 250 seconds)
[23:43:56] <msfninja> n> throw new Error()
[23:43:57] <jellobot> (fail) Error:
[23:44:10] <stenno> anyway if you try it, i would like to add that you can query the bot in PM too
[23:44:33] <stenno> but i think its more efficient to just read the source
[23:45:40] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[23:46:48] <EdFletcher> n> require('child_process').spawnSync('cat', ['/etc/passwd']).stdout.toString()
[23:46:49] <jellobot> (okay) 'root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nolo …
[23:46:51] <EdFletcher> lulz
[23:47:06] <EdFletcher> 1337 hx40r
[23:47:06] <duckgoose> omg hacked
[23:47:09] <stenno> here is the maintained source https://github.com/ljharb/jellobot
[23:47:25] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[23:48:59] <EdFletcher> 👍 🙇‍♂️
[23:49:19] <stenno> n> require('child_process').spawnSync('which' ['mail']).stdout.toString()
[23:49:20] <jellobot> (fail) TypeError: The "file" argument must be of type string. Received undefined
[23:49:23] <stenno> ok
[23:49:43] <EdFletcher> forgot a comma between the two args
[23:49:53] <EdFletcher> n> require('child_process').spawnSync('which', ['mail']).stdout.toString()
[23:49:54] <jellobot> (okay) ''
[23:49:58] <EdFletcher> lol ok
[23:50:02] <Maxdamantus> n> require("child_process").exec("uname -a", (e, so, se) => { console.log({ e, so, se }); });
[23:50:03] <jellobot> (okay) <ref *1> ChildProcess { _events: [Object: null prototype] { close: [Function: exithandler], error: [Function: errorhandler] }, _eventsCount: 2, _maxListeners: undefined, _closesNeeded: 3, _closesGot: 0, connected: false, signalCode: null, exitCode: null, killed: false, spawnfile: '/bin/sh', _handle: Process { onexit: [Function (anonymous)], pid: 14, [Symbol(owner_symbol)]: [Circular *1] }, spawnargs: [ '/bin/sh', '-c', 'uname  …
[23:50:08] <EdFletcher> no mail for you!
[23:50:21] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[23:50:31] <stenno> wait what did i do wrong
[23:50:48] <stenno> oh i see
[23:50:50] <stenno> you said it
[23:50:50] <EdFletcher> stenno: just a comma between the args to spawnSync is all
[23:50:52] <stenno> yeah
[23:51:02] <EdFletcher> not really wrong, easy typo to make
[23:51:19] <Maxdamantus> n> require('child_process').spawnSync('uname', ['-a']).stdout.toString()
[23:51:20] <jellobot> (okay) 'Linux f858d83b910d 4.19.0-18-amd64 #1 SMP Debian 4.19.208-1 (2021-09-29) x86_64 GNU/Linux\n'
[23:51:23] <stenno> actually the error message is a bit strange
[23:51:58] <Maxdamantus> So you can probably permanently break the container on that version of Linux.
[23:52:09] <EdFletcher> n> require('child_process').spawnSync('cat', ['/proc/cpuinfo']).stdout.slice(0, 1024).toString()
[23:52:10] <jellobot> (okay) 'processor\t: 0\nvendor_id\t: AuthenticAMD\ncpu family\t: 23\nmodel\t\t: 1\nmodel name\t: AMD EPYC 7601 32-Core Processor\nstepping\t: 2\nmicrocode\t: 0x1000065\ncpu MHz\t\t: 2199.998\ncache size\t: 512 KB\nphysical id\t: 0\nsiblings\t: 1\ncore id\t\t: 0\ncpu cores\t: 1\napicid\t\t: 0\ninitial apicid\t: 0\nfpu\t\t: yes\nfpu_exception\t: yes\ncpuid level\t: 13\nwp\t\t: yes\nflags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep …
[23:52:20] <EdFletcher> noice, epyc!
[23:52:27] <Maxdamantus> unless it's using a VM rather than a container, which I think might be the case.
[23:52:44] <stenno> n> require('child_process').spawnSync('ed').stdout.toString()
[23:52:44] <jellobot> (fail) TypeError: Cannot read properties of null (reading 'toString')
[23:52:46] <EdFletcher> yeah it is, but it's pretending like its epyc 😉
[23:53:13] <stenno> n> require('child_process').spawnSync('nc').stdout.toString()
[23:53:14] <jellobot> (fail) TypeError: Cannot read properties of null (reading 'toString')
[23:53:17] <Maxdamantus> Oh wait, that's Linux 4, so maybe not.
[23:53:43] <duckgoose> n> require('child_process').spawnSync('rm', ['/run/run.js']).stdout.toString()
[23:53:44] <jellobot> (okay) ''
[23:53:50] <duckgoose> >_> <_<
[23:53:55] <EdFletcher> LOL
[23:54:01] <filename> +1
[23:54:20] <duckgoose> n> 1
[23:54:21] <jellobot> (okay) 1
[23:54:23] <duckgoose> fail
[23:54:25] <duckgoose> I give up \o/
[23:55:59] <stenno> n> RegExp.$_
[23:56:00] <jellobot> (okay) 'util/types'
[23:57:17] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Remote host closed the connection)
[23:58:35] *** Joins: c4017w__ (~c4017@209.52.68.8)
