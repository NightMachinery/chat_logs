[00:06:28] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Remote host closed the connection)
[00:07:33] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:08:39] *** Quits: Hayek (~xxx@rrcs-173-196-3-254.west.biz.rr.com) (Ping timeout: 256 seconds)
[00:16:35] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[00:16:58] <dmj`> almost started funding the wrong haskell foundation https://www.haskellfoundation.org/donate/
[00:17:21] *** Joins: vysn (~vysn@user/vysn)
[00:19:36] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:19:56] <Hecate> hahahahahaha
[00:21:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[00:21:50] <dmj`> saw "tribal affiliation" and was like "Is this related to the burning bridges proposal?"
[00:23:02] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[00:25:12] *** Joins: Shiranai (~Shiranai@190.237.13.79)
[00:25:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[00:25:57] *** Joins: pavonia (~user@user/siracusa)
[00:31:13] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[00:32:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:32:44] <Shiranai> Hello, I'm writing a function with signature `(Int, Bool) -> Command -> Just (Int, Bool)` for use in a foldM. I want Bool to be used as a flag for shortcircuiting the loop, I tried `myFunc (val, True)=Just (val, True)` but does not seem to shortcircuit as I expected
[00:33:26] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 252 seconds)
[00:33:31] <Shiranai> I meant `myFunc (val, True) _ = Just (val, True)`
[00:33:38] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[00:34:07] <Shiranai> how do shortcircuit correctly?
[00:34:07] <xerox> @src foldM
[00:34:07] <lambdabot> foldM _ a []     = return a
[00:34:07] <lambdabot> foldM f a (x:xs) = f a x >>= \fax -> foldM f fax xs
[00:34:21] <xerox> looks like f can't decide to shortcut
[00:34:22] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:35:01] <xerox> >>= is happening no matter what f uses of its arguments
[00:35:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[00:35:44] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[00:35:51] <Shiranai> hmmm thanks, any idea how to shortcut through other means?
[00:36:16] <xerox> @src foldr
[00:36:16] <lambdabot> foldr f z []     = z
[00:36:16] <lambdabot> foldr f z (x:xs) = f x (foldr f z xs)
[00:36:27] <xerox> this one can because f can ignore the rest of the fold, it's second argument
[00:36:43] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:37:06] <Shiranai> is there a monadic version though? I need to use Maybe
[00:38:02] <sshine> use Maybe where?
[00:39:28] <dmj`> why use Bool to short circuit when Maybe automatically short circuits
[00:39:29] <Shiranai> I'm parsing a list of commands so I need to use something like foldM and Maybe
[00:40:17] <Shiranai> because I want to rescue the other value in the pair (Int, Maybe)
[00:40:19] <EvanR> you can also use direct recursion to short circuit
[00:41:18] <Shiranai> (Int, Bool)* I meant
[00:41:19] <EvanR> I suspect there is a more elegant way for you to write it without the Bool flag in a pair
[00:41:27] <Shiranai> agree
[00:41:32] <xerox> what does the fold do?
[00:41:48] <Shiranai> I have no idea what it may be though
[00:42:14] <EvanR> what is the Just for
[00:42:20] <EvanR> I mean, Maybe
[00:42:37] <EvanR> that also can short circuit
[00:43:16] <c_wraith> You probably want Either instead of Maybe, in this case
[00:43:35] <c_wraith> Either Int Int short-circuits and actually returns the result. :)
[00:44:02] <xerox> ah nice the left interrupts >>= !
[00:44:13] <c_wraith> yes it does!
[00:45:04] <Shiranai> the fold parses a list of comments, most of the commands change the value of an Int, but the return command implies that there is no need for keep reading the rest of the commands, so that's why I thought of using (Int, Bool) as the accumulator
[00:45:06] <EvanR> then there's the awkward use of Either ErrorMsg () which is like reversed use of Maybe
[00:47:11] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[00:47:48] <dmj`> Shiranai: can you paste your code?
[00:47:51] <EvanR> when it comes to "complicated" monadic loops, I often write the loop logic as a new combinator and use that
[00:48:07] <EvanR> instead of trying to use a premade loop (from a package) or foldM
[00:48:17] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 240 seconds)
[00:48:28] <EvanR> Control.Monad.Loops has like 30 loops and often none of them fit
[00:48:48] <Shiranai> dmj` I probably shouldn't since it's some kind of assignment, that's why I'm being vague, sorry about that
[00:49:17] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[00:49:40] <Shiranai> yeah I think doing a custom loop is the way to go without refactoring a lot of a code, thanks!
[00:50:21] <EvanR> but c_wraith idea sounded likely
[00:51:09] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:51:42] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[00:51:54] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (haskell is cringe)
[00:53:57] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[00:55:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[00:55:47] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[00:55:49] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[00:55:57] <Franciman> hello, what's the difference between the native code generator of haskell
[00:56:01] <Franciman> and the llvm based one?
[00:56:10] <Franciman> and why is the llvm based one known to be better even if slower?
[00:56:17] <Franciman> what's the use of a native code generator of haskell?
[00:56:22] <Franciman> why would i need it?
[00:56:23] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[00:56:35] <Franciman> is it to have a sort of autarchy? 
[00:56:40] <Franciman> having a self contained system?
[00:56:49] <geekosaur> llvm is slower because we can't pass it information it needs to optimize and they have no interest in adding ghc-specific support that would be needed
[00:57:24] <geekosaur> you can get significantly better code natively
[00:57:36] <Franciman> yet i seem to understand it produce at least as good code as the native code generator
[00:57:41] <Franciman> that's what the docs report
[00:57:51] <Franciman> i suppose
[00:58:33] <geekosaur> ghc itself does, but llvm's optimizer defaults to doing as little as possible of its own optimization because it doesn't really understand the IR ghc generates
[00:59:00] <geekosaur> and never will because it's all CPSed and llvm won't add support for ghc's CPS transforms
[00:59:23] <Franciman> makes total sense to me
[00:59:58] <geekosaur> and ghc needs all the optimization help it can get because graph reduction is inherently less performant than direct code
[01:00:34] <Franciman> makes sense i see. Do you think LLVM backend can help soothe this problem, tho? https://gitlab.haskell.org/ghc/ghc/-/issues/20445
[01:01:01] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[01:01:03] <Franciman> that's why i was asking what's the need of a native backend when it's bugged
[01:01:09] <Franciman> but the fact that it supports special needs
[01:01:13] <Franciman> is more than better answer
[01:01:15] <Franciman> thanks geekosaur 
[01:01:43] <geekosaur> 9.0.2 should hopefully fix that one
[01:02:03] <geekosaur> it's not unusual that .1 point releases are buggy, that's why there are later releases
[01:02:36] <geekosaur> we actually went through the same thing with m1 llvm support, but the ".1" release was 8.10.5
[01:02:43] <geekosaur> wasn't stable until 8.10.7
[01:02:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[01:03:06] <geekosaur> so it's not like llvm is always better codegen-wise
[01:03:15] *** Joins: jonathanx (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se)
[01:04:50] <Franciman> i just quoted the docs
[01:05:16] <dmj`> If GHC went from STG to LLVM directly it'd probably be faster than the current approach of Cmm to LLVM. 
[01:06:30] <Franciman> dmj`: faster but maybe produce worse code
[01:06:56] <EvanR> clarification please, the LLVM backend is slower... meaning it takes longer to produce code, or the resulting code is slower
[01:07:17] <Franciman> takes longer to produce code
[01:08:01] <EvanR> and resulting code is about the same performance?
[01:09:06] <dmj`> Franciman: it actually took longer to produce ARM code before we got the native ARM backend, since LLVM was just being used as an additional translation layer to get to ARM by way of Cmm. 
[01:09:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[01:12:43] <geekosaur> the code is also generally less performant although this depends on the exact code
[01:12:57] <geekosaur> numeric operations are often as fast or faster
[01:13:24] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[01:18:00] <dmj`> geekosaur: do we have any benchmarks to compare STG -> LLVM vs. Cmm -> LLVM? I think that would be super interesting. 
[01:18:27] *** Quits: Shiranai (~Shiranai@190.237.13.79) (Quit: Connection closed)
[01:20:03] <geekosaur> no, there is currently no way for ghc to go directly stg -> llvm
[01:20:29] <geekosaur> and little interest in doing so since the llvm folks aren't interested either
[01:21:08] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:21:19] <geekosaur> you might wan tto talk to the folks in #ghc about it but this is my understanding of the situation
[01:21:33] <geekosaur> (I think you want moritz angermann)
[01:21:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se) (Remote host closed the connection)
[01:22:06] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (long live telescope)
[01:22:12] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[01:23:11] <geekosaur> llvm is currently something of a bastard child because doing anything significant over what ghc already does requires teaching llvm about ghc's cps-ed code
[01:23:57] <geekosaur> so almost all effort has gone into the native backends, with the exception of m1 support because it required such radical changes
[01:25:41] <geekosaur> (basically, apple decided to get rid of C-style type promotion, everything is its native size. which had to be reflected everywhere, so for example in 9.2.x Char# is 32 bits and Word8# is 8 bits)
[01:26:06] *** Joins: OscarZ_ (~oscarz@95.175.104.170)
[01:27:46] <dmj`> geekosaur: Interesting, I know compiling HOFs isn't feasible, which I imagine a CPS pass would create a lot of. GRIN can handle those (HOFs) through a defunctionalization pass. This could also be done in Core before you even get to STG / Cmm. I've wondered why GHC doesn't completely monomorphize up front, then CPS transform, defunctionalize, optimize, then codegen to LLVM. MLTon does this more or less. 
[01:28:20] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[01:28:23] <geekosaur> you'd have to ask them
[01:28:25] <dmj`> well, you'd have to lambda lift and closure convert before defunctionalizing too
[01:28:52] <dmj`> geekosaur:  I think its because you can't encode existentials when you monomorphize, but maybe I'm wrong
[01:29:26] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[01:29:27] <geekosaur> afaik existentials as such cease to exist as distinct entities past the typechecker
[01:30:05] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:ad26:5398:3e1f:d97d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:30:26] <monochrom> My understanding is that STG moves support for HOFs to the RTS and it is a very direct form of support, i.e., without encoding it by defunctionalization.
[01:32:42] <monochrom> For example if you look at generated Cmm code you can see it calling functions with names like "ap1_fast", which are functions provided by the RTS.
[01:33:15] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[01:33:17] *** Joins: Pickchea (~private@user/pickchea)
[01:33:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[01:34:14] <dmj`> monochrom: interesting, I know defunctionalization requires a whole program pass, so maybe GHC being incremental makes it a non-starter.
[01:34:20] *** Joins: jonathanx (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se)
[01:34:49] <monochrom> I would describe STG as thunk-passing style instead of continuation-passing style. :)
[01:34:51] <geekosaur> that was one of the changes grin had to make to ghc, yeh
[01:35:03] <monochrom> Or s/thunk/closure/ if you will.
[01:35:10] *** Quits: glguy (x@libera/staff/glguy) (Quit: Quit)
[01:35:23] *** Joins: glguy (x@libera/staff/glguy)
[01:35:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se) (Remote host closed the connection)
[01:35:43] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[01:35:58] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:36:14] <dmj`> geekosaur: hmm, yea the modpak files got merged iirc. I wonder if a ghc-plugin would have been more appropriate, or if that is even possible with the plugin architecture. 
[01:38:02] <dmj`> monochrom: One of the arguments I've heard against GHC going whole program optimizing is that cross module inlining is good enough.  I wonder how well this holds up in practice, because I'm pretty sure GHC will generate code that does a blind JMP to some function pointer address for all unknown calls, which are probably a lot I imagine. 
[01:39:20] <geekosaur> I find myself wondering of there are some other barriers to it
[01:39:30] <int-e> memory usage?
[01:40:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:40:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:40:03] *** Joins: wroathe (~wroathe@user/wroathe)
[01:40:15] <geekosaur> like, the inlinePerformIO hullabaloo suggests to me that ghc relies on *not* doing inlining in some cases to prevent lifting things that shouldn't be lifted
[01:40:48] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:41:02] <geekosaur> and of WPC exposes IO definitions for inlining then that barrier might be hard to maintain
[01:41:17] <geekosaur> *if WPC
[01:42:08] *** jackhill is now known as KM4MBG
[01:42:35] *** KM4MBG is now known as jackhill
[01:46:31] <dmj`> seems like Lennart has done it and thinks its ok https://twitter.com/Augustsson/status/1104924762499768320
[01:46:46] *** Parts: coot (~coot@89-64-85-93.dynamic.chello.pl) ()
[01:47:11] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[01:47:36] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[01:47:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[01:48:22] <EvanR> monochrom, you just changed from thunk to closure. I'm not sure which one is more vague (outside context of GHC guts)
[01:48:27] <geekosaur> the question I have there, as above, is whether *ghc* can do this or if it'd require significant rearchitecting to the point of writing a whole new compiler as lennart did
[01:51:32] *** Quits: xff0x (~xff0x@2001:1a81:525f:5800:1882:d375:707:2176) (Ping timeout: 240 seconds)
[01:51:57] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Ping timeout: 240 seconds)
[01:51:58] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c7271e73e4c690103e77be5f.dip0.t-ipconnect.de)
[01:51:58] *** Joins: acidjnk (~acidjnk@p200300d0c7271e73e4c690103e77be5f.dip0.t-ipconnect.de)
[01:52:08] <monochrom> EvanR, the good news and bad news is that STG finds that it can use closures for thunks (and a lot of other things) so "everything is a closure". In this context, "closure" is not vague.
[01:52:32] <EvanR> everything is a closure, great
[01:52:35] <EvanR> so it's like a box
[01:52:43] *** Joins: xff0x (~xff0x@2001:1a81:525f:5800:6161:847e:32a5:3ca7)
[01:54:32] <dmj`> geekosaur: that's a good question, I don't know. Not many optimizations happen in STG (afaik), GRIN is its supposed successor, yet it performs all the optimizations. So if GRIN is to be included in GHC why do the optimizations in Core at all? Unless there is a way to combine GRIN and Core. GRIN being first-order makes me lean no.
[01:55:19] <dmj`> If you keep the compiler frontend is it considered a rewrite ? :) 
[01:55:44] <geekosaur> you might ask the grin folks that question :)
[01:56:09] <geekosaur> I'd also be interested in finding out as above if they had any issues with IO escaping its boundaries
[01:56:38] <geekosaur> although I guess that part lives in the frontend, so probably no unless they didn;t do due diligence with the WPC part
[02:00:47] *** Joins: evocatus (~evocatus@62.182.77.224)
[02:01:01] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[02:01:24] *** Quits: evocatus (~evocatus@62.182.77.224) (Remote host closed the connection)
[02:03:55] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:05:44] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:09:15] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[02:09:30] <dmj`> geekosaur: sure, will see what I can find out about IO escaping boundaries
[02:14:26] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[02:16:08] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:ad26:5398:3e1f:d97d)
[02:17:17] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[02:18:17] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[02:21:37] *** Quits: shapr (~user@2601:7c0:c202:5190:1c89:9f27:44af:85b3) (Ping timeout: 240 seconds)
[02:22:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[02:22:08] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:22:36] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:23:02] *** Joins: cemg (~cemguresc@2001:a61:11ff:a001:9318:98d4:c6f5:3049)
[02:24:33] <geekosaur> I'm not absolutely certain that it's a problem, but like I said the inlinePerformIO thing seems strongly suggestive
[02:24:36] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[02:25:03] <geekosaur> just inlining unsafePerformIO wouldn't be expected to have that severe an effect on how ghc treats IO-using code
[02:26:36] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:26:55] *** Joins: OscarZ- (~oscarz@95.175.104.170)
[02:29:17] *** Quits: deadmarshal (~deadmarsh@95.38.112.110) (Ping timeout: 240 seconds)
[02:30:19] *** Quits: OscarZ_ (~oscarz@95.175.104.170) (Ping timeout: 256 seconds)
[02:32:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[02:35:53] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[02:37:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[02:37:41] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[02:37:49] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[02:38:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[02:39:39] <c_wraith> remember, inlinePerformIO breaks everything. :)
[02:42:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:89aa:29d4:1f39:3e9) (Ping timeout: 240 seconds)
[02:45:03] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[02:46:54] *** Quits: OscarZ- (~oscarz@95.175.104.170) (Quit: Leaving)
[02:47:07] *** Joins: cosimone (~user@93-47-228-11.ip115.fastwebnet.it)
[02:49:17] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:51:08] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[02:53:43] <EvanR> it breaks all my totally justified not justified uses of unsafePerformIO
[02:53:57] <EvanR> like globalllllllls!
[02:55:12] <hpc> this is why i always use unsafeCoerce instead
[02:55:45] <c_wraith> remember, if you try hard enough unsafeCoerce can be used as unsafePerformIO!
[02:56:38] <hpc> this is why agda is the best language, its intermediate haskell representation is nothing but unsafeCoerce
[02:57:03] *** Joins: dka (~code-is-a@193.70.33.83)
[02:58:05] *** Quits: zer0bitz (~zer0bitz@196.244.192.57) (Ping timeout: 256 seconds)
[03:00:45] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[03:00:51] *** Joins: AlexNoo_ (~AlexNoo@178.34.162.219)
[03:02:37] *** Quits: AlexZenon (~alzenon@94.233.240.16) (Ping timeout: 256 seconds)
[03:02:46] *** Quits: Alex_test (~al_test@94.233.240.16) (Ping timeout: 256 seconds)
[03:03:49] *** Quits: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[03:04:28] *** Quits: AlexNoo (~AlexNoo@94.233.240.16) (Ping timeout: 256 seconds)
[03:04:56] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[03:06:03] <[itchyjunk]> hmm
[03:06:28] *** Joins: AlexZenon (~alzenon@178.34.162.219)
[03:06:36] *** Joins: Alex_test (~al_test@178.34.162.219)
[03:06:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[03:07:16] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[03:07:18] <[itchyjunk]> so if my type has a data constructor of type
[03:07:23] <[itchyjunk]> err
[03:11:49] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:11:53] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:11:54] <[itchyjunk]> My type can have 2 types of data, either Nil or the other thing, right?
[03:11:54] <[itchyjunk]> https://bpa.st/W6RQ
[03:12:20] <[itchyjunk]> So in case it's Nil, i want the value to be 0. `mySum Nil = 0` makes sense?
[03:12:52] <EvanR> mySum Nil could not really be anything else!
[03:13:10] <EvanR> process of elimination oriented programming
[03:13:49] <[itchyjunk]> so then, if it's not Nil, the only other data type it could be is something of the form Cons a (ItchyList a), right?
[03:13:53] <sub0> you need parens around Cons x (ItchyList xs)
[03:13:58] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[03:14:04] <geekosaur> think about how the recursive case works. it bottoms out at Nil, so that has to be 0 otherwise your sum has some other value added to it
[03:14:05] <sub0> mySum (Cons x (ItchyList xs)) = x + mySum xs 
[03:14:09] <[itchyjunk]> ohh
[03:15:05] <sub0> and remove ItchyList, that is not a constructor
[03:15:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[03:15:30] <sub0> (neither is Cons for that matter. you named it Con)
[03:15:45] <[itchyjunk]> oops :(
[03:15:46] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[03:16:19] <sub0> after you fix all that, consider making it an instance of Foldable
[03:16:26] <sub0> then you could use regular sum, and length
[03:16:28] <sub0> :t sum
[03:16:29] <lambdabot> (Foldable t, Num a) => t a -> a
[03:16:30] *** Joins: flupe (~baboum@radon.sbi.re)
[03:16:31] <sub0> :t length
[03:16:32] <lambdabot> Foldable t => t a -> Int
[03:16:39] <geekosaur> writing those is part of the exercise iirc
[03:16:48] <[itchyjunk]> yes part of exercise 
[03:17:48] <[itchyjunk]> I can't figure out how to make a ItchyList to test my code. `ItchyList testList = blah`
[03:17:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[03:18:12] <flupe> on the doc about -XRebindableSyntax, it says for most construct GHC will now use whatever is in scope, *except* for the arrow notation, where you must "match the Prelude types very closely". What does this mean?
[03:18:14] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[03:18:19] <EvanR> constructors is literally how you make whatever
[03:18:25] *** Joins: sebau1995 (~sebau1995@138.117.21.68)
[03:18:30] <EvanR> use the constructors
[03:18:36] <geekosaur> an ItchyList is either Nil, or (Con someItem anItchyList)
[03:18:37] <flupe> I want to implement constrained arrows (much like contrained monads or whatever), but this seems to suggest I cannot
[03:18:46] <geekosaur> recurse as needed to build a list
[03:19:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[03:20:03] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[03:20:12] *** Joins: jonathanx (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se)
[03:21:19] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[03:21:42] <sub0> [itchyjunk], you have two constructors, Cons and Nil. look at the types, and use them to create a list
[03:21:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:22:19] <[itchyjunk]> I am trying to do something like myList = Cons 1 Nil to create a list with 1 item 
[03:22:34] <sub0> that should work
[03:22:44] *** Quits: Brumaire (~quassel@81-64-14-121.rev.numericable.fr) (Quit: ran away)
[03:23:18] <[itchyjunk]> It gives no error but I can check it like regular lists because i need to apparently implement my own `Show` command
[03:23:22] <[itchyjunk]> maybe print? hmm
[03:23:29] <[itchyjunk]> can't*
[03:23:38] <EvanR> do deriving Show
[03:23:50] <geekosaur> go back up to your definition and add `deriving Show` to the end
[03:24:19] <[itchyjunk]> oh neat!
[03:24:33] <[itchyjunk]> it all works /o\
[03:25:24] <lechner> Hi, knowing that Semver is controversial, what is everyone's favorite implementation on hackage, please?
[03:26:14] *** Quits: sebau1995 (~sebau1995@138.117.21.68) (Quit: Client closed)
[03:26:21] <sshine> lechner, what does an implementation of SemVer feature?
[03:27:56] <lechner> a type, presumably?
[03:28:08] <sshine> lechner, Data.Version in base has a partial ordering, so you can use it to express all semantic versions.
[03:28:17] <sshine> https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Version.html
[03:29:19] <lechner> that's what i thought. i had been using 'semver' but 'versions' is a lot more popular
[03:29:31] <lechner> oh wait
[03:29:37] <lechner> this is in base?
[03:29:49] <sshine> yes, the Data.Version module is in base.
[03:30:10] <lechner> sorry, got confused with Data.Versions
[03:31:50] <lechner> thanks!
[03:32:42] <sshine> I can see that both packages 'semver' and 'salve' address resolving version constraint expressions, like these: https://hackage.haskell.org/package/salve-1.0.11/docs/Salve.html -- I don't think that those constraint expressions are restricted to SemVer, but I guess that's another feature you'd wanna have in a semver library.
[03:32:53] *** Quits: max22- (~maxime@2a01cb088335980011bb54fd9cdf5176.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:33:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se) (Read error: Connection reset by peer)
[03:33:58] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[03:34:58] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[03:35:20] <sshine> I'm not sure why they all defer from using Data.Version as their representation. :)
[03:35:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Read error: Connection reset by peer)
[03:35:44] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[03:36:23] <sshine> (since some of them explicitly allow for expressing messy version schemes, too.)
[03:36:45] <lechner> Salve has a great summary of competing modules. thanks for that pointer!
[03:38:25] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:38:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[03:39:15] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[03:40:02] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:41:53] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[03:42:15] <[itchyjunk]> for my (+++) function, i can take existing list an add an element from the new list to it then apply (+++) to the remainder of the list
[03:42:16] <[itchyjunk]> https://bpa.st/SC3A
[03:42:23] <[itchyjunk]> This kinda made sense in my head
[03:42:38] <[itchyjunk]> Is that the right approach but wrong syntax?
[03:43:30] <[itchyjunk]> oh woops i see one error
[03:43:45] <geekosaur> note that Cons appends to the left, not the right
[03:44:01] <geekosaur> or said otherwise, prepends instead of appends
[03:44:12] <[itchyjunk]> (https://bpa.st/DR5A
[03:44:14] <[itchyjunk]> edited
[03:44:56] <[itchyjunk]> I compiles but with a warning about redundant pattern match but i guess i will worry about it in a second if this works
[03:45:35] <geekosaur> you need to move the `Nil Nil` case above the other two
[03:45:59] <[itchyjunk]> Oh hmm
[03:46:26] <geekosaur> otherwise one of those cases will match with `_` matching against Nil
[03:47:33] *** Joins: Hayek (~xxx@rrcs-173-196-3-254.west.biz.rr.com)
[03:48:56] <[itchyjunk]> hmm _ Nil and Nil _ matches so Nil Nil ends up being a subset of one of those matches so it's considered redundent?
[03:49:24] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[03:49:42] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[03:51:37] *** Quits: xff0x (~xff0x@2001:1a81:525f:5800:6161:847e:32a5:3ca7) (Ping timeout: 240 seconds)
[03:51:37] <sub0> yes, it will never be reached
[03:52:20] <[itchyjunk]> happy that the idea for (+++) (Cons y x) xy worked out! finally feels like i'm making some progress
[03:52:23] <EvanR> an example where order of definitions matters
[03:52:40] <sshine> you don't really need the 'Nil Nil = Nil' case, since 'x Nil' will be 'x', and 'Nil y' will be 'y', which are both general cases of 'Nil Nil = Nil' :)
[03:52:50] *** Joins: xff0x (~xff0x@2001:1a81:525f:5800:95c3:4d9e:7693:e3c)
[03:53:09] <[itchyjunk]> sshine, ah.. true
[03:53:20] *** Quits: esoca123 (uid534098@id-534098.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:53:42] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:ad26:5398:3e1f:d97d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:54:31] <sshine> > (Cons 1 (Cons 2 (Cons 3 Nil))) +++ (Cons 4 (Cons 5 (Cons 6 Nil)))
[03:54:32] <sshine> Cons 6 (Cons 5 (Cons 4 (Cons 1 (Cons 2 (Cons 3 Nil)))))
[03:54:32] <lambdabot>  error:
[03:54:32] <lambdabot>      • Data constructor not in scope: Cons :: t6 -> t0 -> a b c
[03:54:32] <lambdabot>      • Perhaps you meant one of these:
[03:55:00] <sshine> [itchyjunk], I'd probably have expected (Cons 1 (Cons 2 (Cons 3 (Cons 4 (Cons 5 (Cons 6 Nil))))))
[03:55:07] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[03:56:16] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[03:56:48] <geekosaur> I pointed out that problem a bit earlier
[03:56:58] <[itchyjunk]> hmmm
[03:57:02] <[itchyjunk]> its a feature for now :x
[03:57:06] <sshine> ;-)
[03:57:16] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:59:15] <sshine> [itchyjunk], (+++) (Cons x xs) ys = Cons x (xs +++ ys)
[03:59:39] <[itchyjunk]> yup that's what i just tried!
[04:00:08] <sshine> cool
[04:00:26] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:01:26] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[04:01:32] <[itchyjunk]> wait no, what did i do
[04:04:48] <sshine> [itchyjunk], could also be written: (+++) (Cons x xs) ys = Cons x ((+++) xs ys)
[04:06:05] <[itchyjunk]> i thought this would work but i am confused
[04:06:06] <[itchyjunk]> (+++) (Cons x xs) ys = (+++) xs (Cons x ys)  
[04:06:14] <[itchyjunk]> take each element of first list and add it to the second list
[04:07:35] <geekosaur> wrong order
[04:07:42] <sshine> [itchyjunk], if you run it by hand it'll make sense
[04:08:45] * [itchyjunk] clears dusts off hand
[04:08:50] <sshine> [itchyjunk], [1,2,3] ++ [4,5,6]  ~>  1:([2,3] ++ [4,5,6])  etc.
[04:08:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[04:09:07] <[itchyjunk]> sshine, ah right
[04:09:15] <sshine> [itchyjunk], the mixture of Cons and +++ might seem more confusing
[04:09:29] *** Quits: waleee (~waleee@h-98-128-229-110.na.cust.bahnhof.se) (Ping timeout: 256 seconds)
[04:09:37] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[04:09:51] <[itchyjunk]> so (+++) (Cons x xs) ys = Cons x ((+++) xs ys)
[04:10:44] <[itchyjunk]> okay, makes sense
[04:11:17] <[itchyjunk]> ah thats what you said above
[04:11:43] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:12:14] <sshine> but... Cons 1 (Cons 2 (Cons 3 Nil)) +++ Cons 4 (Cons 5 (Cons 6 Nil))  ~>  Cons 1 (Cons 2 (Cons 3 Nil) +++ Cons 4 (Cons 5 (Cons 6 Nil)))  ~>  Cons 1 (Cons 2 (Cons 3 Nil +++ Cons 4 (Cons 5 (Cons 6 Nil))))  ~>  Cons 1 (Cons 2 (Cons 3 (Nil +++ Cons 4 (Cons 5 (Cons 6 Nil)))))  ~>   at which point you're in one of the base cases with Nil on the left.
[04:12:31] <sshine> (this looks better with one rewrite per line)
[04:12:37] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[04:14:19] <sshine> [itchyjunk], btw, if you add {-# LANGUAGE DeriveFoldable #-}, you can add 'deriving (Show, Foldable)', after which a bunch of standard library list operators will work on your list.
[04:15:01] <sshine> e.g. > 2 `elem` Cons 1 (Cons 2 (Cons 3 Nil))
[04:15:01] <sshine> True
[04:15:09] <sshine> :t elem
[04:15:10] <lambdabot> (Foldable t, Eq a) => a -> t a -> Bool
[04:15:22] <[itchyjunk]> right i learned about the `deriving Show`. I assume it's similar to the concept of inheretence or implementing a interface or somesuch
[04:16:45] <sshine> or: > sum (Cons 1 (Cons 2 (Cons 3 Nil)))
[04:16:45] <sshine> 6
[04:18:52] <sshine> it's kind of like automatically implementing an interface, yes
[04:20:46] <sshine> I think one of the auto-generated traits/type-classes/interfaces you often see in a lot of languages are JSON serializers/de-serializers. so all you need is define a data-type, and many serialize/deserialize libraries can generically produce them based on type information on the data type's fields.
[04:21:08] <sshine> and in haskell you can derive a lot of other type classes, too
[04:21:30] <sshine> like Foldable and Functor :)
[04:23:24] <geekosaur> you should probably do the third part of the problem before doing that, though
[04:23:36] <sshine> what problem?
[04:23:43] <geekosaur> although you just gave yourself a big hint as to how to do it, by doing this wrong
[04:23:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[04:24:14] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[04:24:19] <geekosaur> http://www.cas.mcmaster.ca/~dalvescb/LH_Week05_Exercises.pdf
[04:24:45] <[itchyjunk]> hmm
[04:24:47] <geekosaur> they did part one earlier, this is part 2. part 3 is myReverse
[04:24:57] *** Quits: sm1 (~sm@plaintextaccounting/sm) (Quit: Reconnecting)
[04:25:02] <sshine> oh, right :P
[04:25:11] *** Joins: sm1 (~sm@plaintextaccounting/sm)
[04:25:12] <[itchyjunk]> yeah i am banging my head on the myReverse
[04:25:14] <sshine> +++ done wrong is myReverse done half right, I guess :P
[04:25:22] <geekosaur> yep
[04:25:37] <geekosaur> go back and look how your proposed solution to (+++) went wrong
[04:25:45] <geekosaur> then do the whole thing the same wrong way :)
[04:25:53] <[itchyjunk]> oh should i be using (+++)? ahh i was thinking about it without +++
[04:26:02] <geekosaur> no, you don't want (+++) here
[04:26:17] *** sm1 is now known as sm
[04:26:18] <geekosaur> but you reversed the first part of the list with the way you were mis-doing (+++)
[04:26:34] <geekosaur> so think about what you did and why it reversed it, and you have the answer
[04:26:42] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c7271e73e4c690103e77be5f.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:26:42] *** Quits: acidjnk (~acidjnk@p200300d0c7271e73e4c690103e77be5f.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:30:06] <geekosaur> and you may want to think about a helper function here
[04:31:20] <sshine> [itchyjunk], if you start with: myReverse (Cons x xs) = ..., and you know that the last element should be the first, then putting the last element in '...' is kinda hard, because it's at the far end of the linked list.
[04:33:26] <[itchyjunk]> i keeps comming and going from my head. it has something to do with creating a new list Nil and adding elements to it, first 1 then 2 then 3 etc so it would be 3 2 1 Nil or somesuch. but it keeps escaping me
[04:33:41] <geekosaur> you're on the right track
[04:33:47] <[itchyjunk]> hmmmmmm
[04:33:50] <geekosaur> again, go look at what you did *wrong* earlier
[04:34:59] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[04:34:59] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[04:34:59] *** finn_elija is now known as FinnElija
[04:35:12] <sshine> [itchyjunk], if you do: myReverse (Cons x xs) = let theEnd = Cons x Nil in ..., then you did add x to Nil where it belongs, but it isn't very recursive. i.e., when you make a call to 'myReverse xs' to reverse the tail, where do you put 'theEnd'?
[04:35:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[04:35:43] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[04:36:32] <sshine> [itchyjunk], surely you can't add x on the second iteration to Nil also; then you'll have a bunch of 'Cons <x/y/z> Nil' cells that aren't linked.
[04:39:05] <sshine> [itchyjunk], what if the function had the type myReverse' :: ItchyList a -> ItchyList a -> ItchyList a -> ItchyList a? so: myReverse' xs ys tmp; could you make use of a placeholder between recursions?
[04:39:16] <sshine> err
[04:39:19] <sshine> I'm tired
[04:39:31] <sshine> [itchyjunk], what if the function had the type myReverse' :: ItchyList a -> ItchyList a -> ItchyList a? so: myReverse' xs tmp; could you make use of a placeholder between recursions?
[04:40:39] <[itchyjunk]> oh a helper function that uses a temporary type to help reverse?
[04:40:47] <sshine> a temporary argument yes
[04:41:27] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-11.elisa-laajakaista.fi) (Quit: Leaving.)
[04:42:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[04:44:05] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:44:14] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:49:17] <[itchyjunk]> hmm i was hoping this would work
[04:49:17] <[itchyjunk]> https://bpa.st/D2LQ
[04:49:27] <[itchyjunk]> but seems like i have some logical error somewhere
[04:49:55] <[itchyjunk]> oh i see the bug
[04:50:21] <sshine> what's the bug?
[04:50:31] <[itchyjunk]> helper Nil _ = Nil
[04:50:42] <sub0> no
[04:50:43] <sshine> what's the problem there?
[04:50:47] <[itchyjunk]> so when the recursion turns my first list to Nil, it turns the whole thing into Nil
[04:50:57] <sshine> yeah, it reverses the entire list, then throws it out at the end. :D
[04:50:59] <sub0> yes (my mistake, I thought that was your solution, not bug)
[04:51:18] <[itchyjunk]> well sometimes my solution and bugs are equivalent
[04:51:44] <sshine> so it's true that the reverse of Nil is Nil.
[04:51:49] <[itchyjunk]> https://bpa.st/LJLQ
[04:51:53] <[itchyjunk]> This seems to work, right?
[04:52:20] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:52:20] <sshine> but your base case of 'helper Nil ys' is used for two things now: both for reversing the empty list, and for terminating the recursion on non-empty lists.
[04:52:39] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:52:51] <sshine> [itchyjunk], you don't actually need 'myHelper Nil = Nil'. this is a special case of helper.
[04:53:07] <glguy> [itchyjunk]: yes, that looks to have fixed it
[04:53:25] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:53:31] <[itchyjunk]> sshine, oh myReverse Nil = Nil is redundent because of how the helper behaves?
[04:53:48] <sub0> yes, it handles the Nil case
[04:53:51] <glguy> [itchyjunk]: you also have some redundancy in (+++)
[04:54:12] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Error))
[04:54:16] <[itchyjunk]> yeah having hard time seeing all the redundancy but hopefully it's something that becomes more obvious over time
[04:54:31] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[04:54:32] <sshine> [itchyjunk], myReverse Nil  ~>  helper Nil Nil  ~>  Nil  (with ys = Nil)
[04:54:37] *** Quits: Hayek (~xxx@rrcs-173-196-3-254.west.biz.rr.com) (Ping timeout: 240 seconds)
[04:54:37] <sub0> [itchyjunk], it is also common to make the helper function a local function named go, ie, myReverse xs = go xs []  where go ... 
[04:55:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[04:55:25] <glguy> though it's nice, especially while learning or debugging, to keep the definition at the top-level so you can experiment with it in ghci
[04:55:28] <[itchyjunk]> oh right, implicit recursion and local functions stuff is another thing i need to work on
[04:55:42] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[04:55:49] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[04:56:13] <sshine> [itchyjunk], https://bpa.st/SPXA
[04:56:24] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[04:56:45] <sshine> [itchyjunk], also, if you derive Foldable, 'myReverse = foldl (flip Cons) Nil' :D
[04:57:21] <[itchyjunk]> oh you can do a full fledged definition right there? didn't realize
[04:57:47] <sshine> [itchyjunk], yep, 'myReverse xs = ...' is just syntax sugar for 'myReverse = \xs -> ...'
[04:58:00] <glguy> [itchyjunk]: something that might surprise you is that the 'a's on line 16 and line 20 are different in that paste
[04:58:28] <glguy> the fact that it's a local definition doesn't make them more connected than if they were both top-level definitions
[04:58:33] <sshine> glguy, that statement sounds obviously true for the wrong reason :P
[04:58:38] <[itchyjunk]> hmmm
[04:59:01] <sub0> they are connected in the sense that local helper function can directly access myReverse's arguments
[04:59:01] <sshine> [itchyjunk], so if you change the ItchyList a -> ItchyList a
[04:59:23] <sshine> [itchyjunk], if you change the 'ItchyList a -> ItchyList a' into 'ItchyList b -> ItchyList b', then you can keep the 'a's around on line 20.
[04:59:59] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[05:00:03] <glguy> the fact that type variables are locally scoped to a type signature even in a nested context is just surprising to most people and can make for confusing error messages later
[05:00:22] <sshine> glguy, that's a good point.
[05:00:59] <sshine> [itchyjunk], I made a lazy choice of not renaming 'myReverse x = helper x Nil' into 'myReverse z = helper z Nil' to avoid shadowing variable names. the outer 'x' is not the same as the inner 'x'.
[05:04:03] <sshine> [itchyjunk], are you doing trees now?
[05:04:55] *** Joins: notzmv (~zmv@user/notzmv)
[05:05:03] <glguy> Is there a specific problemset?
[05:05:12] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[05:05:22] <[itchyjunk]> I haven't started on it. idk if i am ready for trees
[05:05:24] <sshine> 18:58:47 <[itchyjunk]> the full problem is here :http://www.cas.mcmaster.ca/~dalvescb/LH_Week05_Exercises.pdf
[05:05:36] <[itchyjunk]> i stumbled upon this googling `haskell zip exercise`
[05:05:36] <sshine> [itchyjunk], lists are just very right-biased trees.
[05:05:42] <[itchyjunk]> :D
[05:06:05] <[itchyjunk]> right, ive heard of that.. graphs are somethign i need to eventually learn but seems a bit intimidating
[05:06:11] <sshine> you've been doing trees all along 🤯
[05:07:23] <glguy> This binary tree problem kind of leaves it to you to decide what a binary tree is, I guess.
[05:08:01] <sshine> data UnaryTree a = Leaf | Branch a (UnaryTree a)
[05:08:56] <[itchyjunk]> thats almost identical to my list 
[05:09:09] <glguy> what's the difference?
[05:09:17] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[05:09:18] <[itchyjunk]> hmm
[05:09:38] <[itchyjunk]> thats identical to my list 
[05:10:14] <sshine> then lists must be unary trees, according to my definition.
[05:10:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[05:10:47] <EvanR> if you can inductively define a graph you can inductively define anything, like chuck norris
[05:10:49] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[05:11:06] <glguy> You wouldn't inductively define a car
[05:12:01] <sshine> data ChuckNorris = Chuck ChuckNorris | Norris -- how much Chuck would a ChuckNorris Chuck if a ChuckNorris could Chuck (Chuck (Chuck ...))
[05:12:23] * EvanR chucks Norris
[05:13:49] *** Quits: xff0x (~xff0x@2001:1a81:525f:5800:95c3:4d9e:7693:e3c) (Ping timeout: 240 seconds)
[05:14:45] <sshine> [itchyjunk], data ConcatList a = Nil | Single a | Concat (ConcatList a) (ConcatList a)
[05:15:03] *** Joins: xff0x (~xff0x@2001:1a81:525f:5800:a604:5a64:a22b:91db)
[05:15:11] <sshine> [itchyjunk], this is not a tree, because it says it's a list.
[05:15:50] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[05:16:23] *** Joins: burnsidesLlama (~burnsides@client-8-64.eduroam.oxuni.org.uk)
[05:16:24] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Remote host closed the connection)
[05:16:54] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[05:17:11] <EvanR> data ThisIsNotAType
[05:17:38] <EvanR> coincidentally, it is false (Void)
[05:18:46] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[05:18:52] <sshine> [itchyjunk], are you doing take/drop instead??
[05:19:13] <[itchyjunk]> no, not doing anything as of yet :D
[05:20:53] *** Quits: burnsidesLlama (~burnsides@client-8-64.eduroam.oxuni.org.uk) (Ping timeout: 256 seconds)
[05:21:30] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[05:21:39] *** Joins: Erutuon (~Erutuon@user/erutuon)
[05:25:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[05:26:41] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[05:27:48] <sshine> [itchyjunk], if you feel like tree exercises are too daunting, you can also do these list exercises: https://gist.github.com/sshine/1c909e27149dfd6081e99ef39cb3a7e1 :p
[05:28:37] *** Quits: polyphem (~rod@2a02:810d:640:776c:e450:3ca3:b389:687a) (Ping timeout: 240 seconds)
[05:29:17] <[itchyjunk]> hmm
[05:29:40] *** Joins: polyphem (~rod@2a02:810d:640:776c:e450:3ca3:b389:687a)
[05:31:37] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[05:35:57] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[05:38:04] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[05:41:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[05:42:15] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[05:44:54] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:45:35] *** Joins: califax- (~califax@user/califx)
[05:46:38] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[05:47:25] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 240 seconds)
[05:47:41] *** Joins: falafel (~falafel@2603-8000-d800-688c-557f-1601-d4ed-ac14.res6.spectrum.com)
[05:49:57] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 240 seconds)
[05:49:57] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:49:58] *** califax- is now known as califax
[05:56:51] *** Joins: falafel_ (~falafel@2603-8000-d800-688c-b16d-a5e8-00d0-69ce.res6.spectrum.com)
[05:59:57] *** Quits: falafel (~falafel@2603-8000-d800-688c-557f-1601-d4ed-ac14.res6.spectrum.com) (Ping timeout: 240 seconds)
[06:00:18] *** Joins: neurocyte09174 (~neurocyte@IP-094046083160.dynamic.medianet-world.de)
[06:00:18] *** Quits: neurocyte09174 (~neurocyte@IP-094046083160.dynamic.medianet-world.de) (Changing host)
[06:00:18] *** Joins: neurocyte09174 (~neurocyte@user/neurocyte)
[06:01:55] *** Quits: perro_ (~perro@072-191-245-069.res.spectrum.com) (Read error: Connection reset by peer)
[06:02:17] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:02:17] *** neurocyte09174 is now known as neurocyte0917
[06:03:23] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[06:03:54] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[06:03:57] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[06:04:12] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[06:04:13] *** Quits: xff0x (~xff0x@2001:1a81:525f:5800:a604:5a64:a22b:91db) (Ping timeout: 240 seconds)
[06:05:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:06:16] *** Joins: xff0x (~xff0x@2001:1a81:5298:9f00:76ce:451:456a:7f10)
[06:13:19] *** Joins: falafel__ (~falafel@2603-8000-d800-688c-b16d-a5e8-00d0-69ce.res6.spectrum.com)
[06:13:33] *** Quits: falafel_ (~falafel@2603-8000-d800-688c-b16d-a5e8-00d0-69ce.res6.spectrum.com) (Read error: Connection reset by peer)
[06:16:08] *** Joins: falafel_ (~falafel@2603-8000-d800-688c-80eb-78f2-5772-65fe.res6.spectrum.com)
[06:17:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:17:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:17:08] *** Joins: wroathe (~wroathe@user/wroathe)
[06:18:24] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[06:18:41] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se)
[06:19:37] *** Quits: falafel__ (~falafel@2603-8000-d800-688c-b16d-a5e8-00d0-69ce.res6.spectrum.com) (Ping timeout: 240 seconds)
[06:19:57] *** Joins: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e)
[06:20:19] <BrokenClutch> Man, I want to die. Is this shit too bad: https://gitlab.com/UnrelatedMicrowave/stm-test
[06:20:24] <BrokenClutch> Am I on the right way?
[06:20:54] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se) (Remote host closed the connection)
[06:21:18] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[06:22:24] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[06:22:45] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[06:23:28] <EvanR> that's one way to do it
[06:25:09] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[06:26:33] <BrokenClutch> This shit gave me a headache, gonna play vidjo gemes
[06:26:37] <EvanR> I would ask what you're really trying to do, but I know that you're actually trying to make a game invol&
[06:26:49] <EvanR> involving event handling, so 
[06:27:05] <EvanR> I got nothing
[06:27:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:28:09] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:28:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:28:09] *** Joins: wroathe (~wroathe@user/wroathe)
[06:29:19] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[06:36:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:37:50] <monochrom> For me it's video games (I mean as a player! not as a dev) and learning more math.
[06:38:13] <monochrom> Programming is too hard!  Playing AOE4 and learning math are easier.
[06:43:35] <[itchyjunk]> I'm learning some Halo Infinite currently.
[06:43:58] <[itchyjunk]> Their ranking system is totally busted though. Surprised multi 100 million games can't have a decent ranking system
[06:44:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:44:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:44:56] *** Joins: wroathe (~wroathe@user/wroathe)
[06:45:46] <EvanR> no money left after spending it on army of developers
[06:46:19] <[itchyjunk]> No idea what the spent it on. Has 5 maps, they released campaign seperately 
[06:46:20] <EvanR> have to get ranking system from the bargain bin
[06:46:33] <[itchyjunk]> They are paying streamers on twitch a lot of money and they are releasing non stop skins
[06:49:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:49:33] <EvanR> 🤑
[06:50:03] <EvanR> (hint ranking system not required for 🤑), anyway, back to haskell!!!!!!
[06:59:02] *** Quits: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net) (Quit: sirlensalot)
[06:59:38] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[07:03:54] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[07:04:12] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[07:04:46] *** Quits: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e) (Quit: Leaving.)
[07:04:53] *** Joins: deadmarshal (~deadmarsh@95.38.113.27)
[07:08:33] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 256 seconds)
[07:09:16] *** Quits: deadmarshal (~deadmarsh@95.38.113.27) (Ping timeout: 256 seconds)
[07:15:17] *** Quits: td_ (~td@94.134.91.64) (Ping timeout: 240 seconds)
[07:17:30] *** Joins: td_ (~td@94.134.91.205)
[07:18:57] *** Quits: falafel_ (~falafel@2603-8000-d800-688c-80eb-78f2-5772-65fe.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:22:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:22:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:22:32] *** Joins: wroathe (~wroathe@user/wroathe)
[07:31:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:32:35] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[07:33:11] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[07:39:02] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:39:02] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:39:02] *** Joins: wroathe (~wroathe@user/wroathe)
[07:42:19] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:43:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:44:17] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[07:44:49] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 256 seconds)
[07:44:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[07:47:11] <EvanR> newtype Foo = Foo (Vector Bar) deriving Foldable
[07:47:46] *** Joins: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net)
[07:48:51] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:49:04] <EvanR> err. newtype Foo a = Foo (Vector Int) deriving Foldable
[07:49:29] <EvanR> length (Foo (V.fromList [1,2,3,4])), is zero not 4...
[07:55:19] *** Joins: clownpi3c3 (~clownpi3c@94.50.183.196)
[07:58:24] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[07:58:50] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[08:05:09] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[08:06:37] *** Joins: vysn (~vysn@user/vysn)
[08:08:45] *** Joins: texasmynsted (~texasmyns@99.96.221.112)
[08:11:40] <texasmynsted> I am looking for a library or something like Gema, http://gema.sourceforge.net/new/Mundie/WhyILoveGema.html, for Haskell. A declarative language to assemble text. 
[08:11:50] <texasmynsted> I am not sure what to call this.
[08:12:25] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[08:15:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:15:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:15:20] *** Joins: wroathe (~wroathe@user/wroathe)
[08:20:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:22:48] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[08:22:49] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[08:23:03] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:24:40] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[08:26:25] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:27:52] *** Joins: shapr (~user@2601:7c0:c202:5190:7595:a4fe:20d3:7169)
[08:27:59] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:28:54] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[08:29:11] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se)
[08:33:40] *** Joins: pagnol (~user@014198154145.ctinets.com)
[08:35:46] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[08:36:08] <pagnol> There's a Rust crate called sqlx which provides a macro that validates SQL by sending it to a running dbms at compile time. Does anyone know if this has been done for Haskell somewhere?
[08:36:32] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[08:36:58] <pagnol> (it also adds type safety in addition to validating)
[08:38:40] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[08:42:51] <Inst> i hope you guys don't mind if I troll?
[08:43:01] <Inst> dialogedFileOpen :: IO (Maybe Handle)
[08:43:01] <Inst> dialogedFileOpen = sequence ( sequence (openFilePath >>= \iOremoved -> pure (iOremoved >>= \filePath -> pure (openFile filePath ReadMode))) >>= \mIOIOH -> pure (join mIOIOH))
[08:43:10] <Inst> which typechecks
[08:43:22] <Inst> dialogedFileOpenbradrnSanity :: IO (Maybe (IOMode -> IO Handle))
[08:43:22] <Inst> dialogedFileOpenbradrnSanity = (fmap (fmap openFile) openFilePath)
[08:43:39] <Inst> openFilePath is IO (Maybe String)
[08:43:53] <Inst> ReadMode is a data constructor of type IOMode
[08:46:29] <Inst> it's a troll, because this isn't any code of any importance, just me hacking through insane and improbable haskell situations that shouldn't occur with proper design patterns
[08:53:14] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:56:17] *** Joins: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e)
[08:58:03] *** Joins: simpleauthority (~simpleaut@user/simpleauthority)
[08:59:26] *** Quits: wrengr (~wrengr@150.12.83.34.bc.googleusercontent.com) (Ping timeout: 252 seconds)
[08:59:46] *** Joins: wrengr (~wrengr@150.12.83.34.bc.googleusercontent.com)
[09:00:09] <EvanR> as one does
[09:08:29] <Inst> okay
[09:08:31] <Inst> got a working version
[09:09:10] <Inst> dialogedFileOpen = join (fmap sequence ((fmap.fmap) (rapply ReadMode) ((fmap.fmap) openFile openFilePath)))
[09:09:28] <Inst> rapply y p = p y
[09:09:43] <Inst> do you know if there's an actual built-in / standard way for haskell to force function application to the left?
[09:10:49] <EvanR> there is a standardish operator to do function application backwards
[09:10:55] <Inst> oh
[09:10:56] <Inst> &
[09:10:57] <EvanR> but it's more idiomatic to do it the right way
[09:11:10] <Inst> are you sure monad transformers work on the IO type?
[09:11:12] <EvanR> =<< helps with that in monadic code
[09:12:04] <EvanR> <=< if you're ultimately pointless
[09:12:29] <EvanR> kleisli fish
[09:13:24] <EvanR> :k StateT Char IO Int
[09:13:25] <lambdabot> *
[09:13:33] <EvanR> @botsnack
[09:13:34] <lambdabot> :)
[09:13:47] <Inst> @botsnack
[09:13:47] <lambdabot> :)
[09:14:04] <Inst> is there any point to what I'm doing?
[09:14:12] <Inst> I feel like, I'm spending lots of energy and having fun
[09:14:28] <Inst> but the techniques i'm learning (badly coded Haskell, etc) aren't really useful, I'm told there's a dozen other methods
[09:14:33] <EvanR> if your energy budget is limited I recommend moving on the things that are even more fun 
[09:14:57] <Inst> well, i mean, trying to work with monad stacks without the benefit of monad transformers
[09:14:58] <EvanR> as useful and business friendly as file dialogs are
[09:15:04] <Inst> is there any moral benefit to such?
[09:15:37] <EvanR> no if you really do have a "monad stack" (uhg), then you should use transformers, or a consolidated free monad or something
[09:16:18] <EvanR> alternatively just use IO for top level I/O and do most things in pure code
[09:16:23] <Inst> it's more of a teaching exercise for me, though, because i'm learning how to work with the type system
[09:16:54] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se) (Remote host closed the connection)
[09:17:15] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[09:17:28] <EvanR> a given application may not need a "monad stack" at all
[09:17:55] <Inst> you know i have very patchwork knowledge
[09:18:09] <Inst> i have very little practice with >>= and do, and this is helping me understand them better
[09:18:19] <Inst> that's what i mean by teaching exercise, i.e, maybe was revolting against me
[09:18:38] <Inst> until i realized you needed to stuff pures with dissimilar stacked monads
[09:19:19] <Inst> it's just a fun educational game for teaching myself (and perhaps others) about types
[09:19:21] <EvanR> most of the cool stuff in haskell has nothing to do with monads
[09:20:17] *** Quits: xff0x (~xff0x@2001:1a81:5298:9f00:76ce:451:456a:7f10) (Ping timeout: 240 seconds)
[09:20:34] <Inst> i see
[09:21:35] *** Joins: xff0x (~xff0x@2001:1a81:5298:9f00:9050:d511:cdde:a154)
[09:28:10] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[09:28:57] *** Quits: shapr (~user@2601:7c0:c202:5190:7595:a4fe:20d3:7169) (Ping timeout: 240 seconds)
[09:31:13] *** Joins: deadmarshal (~deadmarsh@95.38.113.27)
[09:31:49] *** Parts: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7) ()
[09:32:36] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:35:44] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:42:37] *** Quits: xff0x (~xff0x@2001:1a81:5298:9f00:9050:d511:cdde:a154) (Ping timeout: 240 seconds)
[09:43:47] *** Joins: xff0x (~xff0x@2001:1a81:5298:9f00:e07:3bd9:947c:632e)
[09:45:01] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::45db) (Ping timeout: 240 seconds)
[09:45:23] *** Joins: mixfix41 (~homefame@user/mixfix41)
[09:46:54] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[09:47:18] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[09:52:06] <maerwald[m]> Monads aren't even that cool
[09:53:56] <Inst> sorry
[09:54:03] <Inst> went out to get some cigarettes
[09:54:26] <Inst> i'll try to explain my perspective
[09:54:39] <Inst> i started trying to learn haskell, took up a service-sector job to pay the bills around the same time, in october
[09:54:44] <Inst> i've since quit that job since early december
[09:54:59] <Inst> in learning haskell, it's been the language that clicked for me, to the extent that i don't understand why people claim it's so difficult
[09:56:17] *** Quits: pagnol (~user@014198154145.ctinets.com) (Ping timeout: 240 seconds)
[09:56:26] <Inst> one of the things i noticed with haskell is, well, the absence of the typical imperative programming canards, like loops (recursion's an analogue or a superset)
[09:57:44] <EvanR> good riddance, for the most part
[09:57:53] <Inst> i have a hypothesis that it's possible to teach IO, and I don't mean hello world IO, but rather, being able to drag data from files and write to files etc, interact with network files, and so on
[09:57:59] <Inst> I'm addicted to accumulators, though, EvanR
[09:58:15] <Square> can you define reusable "dependency-sets" in cabal? 
[09:58:15] <EvanR> that's a fold
[09:58:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[09:59:03] <Inst> you're sure it's just a fold?
[09:59:23] <Inst> i feel a bit guilty using accumulators, like, it feels too much like i'm simulating variables
[09:59:25] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[09:59:25] <EvanR> if you get into the weeds everything is a fold
[09:59:27] <Inst> per recursive loop
[10:00:01] <Inst> i have a friend who ran out of me after I insisted that she learn Haskell
[10:00:13] <Inst> as a first language, she went to pick up Python
[10:00:21] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:00:32] <Inst> I think it might be possible to, while the Pythonista kids are learning loops, teach Haskellers how to read / write / do effects
[10:00:42] <Inst> and that might end up being good for long-term retention
[10:01:00] <EvanR> that's sounds relatively more boring than loops in python
[10:01:04] <Inst> the obsession with monads is that I feel like being able to function in IO-land / do-land requires an understanding
[10:01:05] *** Joins: falafel_ (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[10:01:19] <Inst> EvanR: it's a matter of perspective, Haskell is very academic
[10:01:20] <EvanR> maybe a total wash at best
[10:01:24] <Inst> i see
[10:01:51] <Inst> being able to do practical things with haskell early, and use how to manipulate the data you draw it from file system access
[10:02:19] <Inst> at least in my hypothesis, might be usable as stakes to teach people why functional programming matters, etc
[10:02:39] <EvanR> I hear the `shelly' package is good for that kind of stuff
[10:02:48] <Inst> huh, interesting
[10:03:46] <Inst> EvanR: what do your students engage with?
[10:03:59] <EvanR> why functional programming matters, the title of an influential paper from 1990, and it's not talking about file system access xD
[10:04:03] <Inst> I know
[10:04:24] <Inst> but if you teach Haskell to non-programmers, as is my aim
[10:04:36] <Inst> they don't really care about correctness, ease of reasoning, etc
[10:05:01] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Remote host closed the connection)
[10:05:02] <Inst> they'd be more impressed by actually being able to do practical things
[10:05:19] <Inst> there's reports from people that "Haskell is the best imperative language" because of the concision of Haskell syntax
[10:05:25] <maerwald> Inst: Haskell is not about correctness
[10:05:48] *** Joins: Jing (~hedgehog@103.121.208.183)
[10:06:01] <Inst> https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf
[10:06:15] <EvanR> lets not dwell on "Haskell is the best imperative language", the value proposition of this statement is already off to a bad start
[10:06:24] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[10:07:26] <EvanR> who wants to be the best at something awful xD
[10:07:57] *** Quits: falafel_ (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 240 seconds)
[10:08:05] <EvanR> hotdog eating contests notwithstanding
[10:08:28] <Inst> i'm not a functional fundamentalist, i.e, because computers are ultimately turing machines, until SPJ pulls a couple of more rabbits out of his hat, functional programming will be more resource intensive and less performant than imperative programming
[10:08:51] <Inst> that means that imperative programming will always have a place, for applications where performance is paramount
[10:09:26] <EvanR> I'm not either, and I don't know if I agree with that
[10:10:16] <Inst> well i'm saying we might be able to get out of the imperative trap eventually, but as long as we're stuck here, imperative will exist, just as much as there's assembly programmers, C programmers, Rust programmers, etc
[10:10:22] <EvanR> high end hardware is already hard to write code for directly in a way to makes the most use
[10:10:38] <Inst> for the non-programmer, though
[10:10:50] <EvanR> people use C++, and it's imperative
[10:10:59] <Inst> i mean, i think functional programmers and imperative programmers tend toward different intelligence types
[10:10:59] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[10:11:08] <EvanR> I'm not sure if there's a causal reason for this anymore though
[10:11:16] <Inst> causal reason for what?
[10:11:59] <Inst> mentally keeping track of state is hard and requires strong working memories
[10:12:01] <EvanR> that C++ technology is where all the work went so you have a chance of utilizing your hardware's capability
[10:12:17] <EvanR> it's probably more inertia than anything
[10:12:25] <Inst> yeah, ecosystem effects
[10:12:44] <EvanR> On the GPU, an imperative programming language doesn't really get you much
[10:13:01] <maerwald> I think looking at functional vs imperative as correctness vs performance is totally wrong
[10:13:02] <Inst> i'm guessing it's because of the massive parallelism
[10:13:13] <Inst> maintainability, ease of composition, ease of design, etc
[10:13:23] <Inst> the only real advantage i think with imperative is performance
[10:13:33] <EvanR> GPU programmers are thinking in a different paradigm these days, and forced to code it through imperative languages
[10:13:36] <Inst> if we all had infinitely fast computers we'd all be on functional programming
[10:13:47] <maerwald> imperative languages are still the strongest in terms of tooling, support, etc. when it comes to formal verification
[10:14:33] <EvanR> Inst, you should learn some functional programming
[10:14:40] <EvanR> IMO lol
[10:14:40] <Inst> as in, what?
[10:15:10] <Inst> recursion, higher order functions, etc
[10:15:12] <EvanR> haskell is just the jumping off point, there is much to learn beyond haskell's version of FP
[10:15:22] <Inst> I know a bunch of people aggressively selling OCaml
[10:15:30] <Inst> I am in the market for SICP
[10:15:34] <EvanR> the industry is stuck in a valley, haskell is up on a hill, and then there's the rest of the world
[10:16:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:16:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:16:08] *** Joins: wroathe (~wroathe@user/wroathe)
[10:16:10] <Inst> SICP being the 1998 version, not the Javascript version
[10:16:12] <EvanR> haskell stuff really pushes you to learn that
[10:16:15] <Inst> can't believe MIT jumped off to Python?
[10:16:28] <maerwald> EvanR: and then there's people for whom the hill is not enough and they're building a ladder into the sky (most programmers will fall off that ladder)
[10:17:17] <EvanR> ivory tower of babel?
[10:17:25] <maerwald> dependent haskell
[10:17:27] <Inst> maerwald: are you talking Shen?
[10:17:32] <EvanR> lol shen
[10:17:39] *** Joins: coolnickname (uid531864@user/coolnickname)
[10:17:59] <maerwald> but if we're lucky, dependent haskell will be a success story similar to backpack
[10:18:19] <Inst> backpack?
[10:18:25] <maerwald> exactly
[10:18:29] <int-e> maerwald: hah
[10:18:48] <Inst> https://dl.acm.org/doi/10.1145/2535838.2535884
[10:18:53] *** Joins: nhatanh02 (~satori@123.24.172.30)
[10:19:23] <EvanR> maerwald, well, we're probably considering different kind of programmers
[10:19:30] <EvanR> different kinds
[10:20:13] <EvanR> I'm not expecting anyone who ended up as a programmer due to being bad analytically to start using dependent types
[10:21:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:21:28] <Inst> erm, do you mind if I ask a final question?
[10:21:31] <maerwald> EvanR: I'm worried about programmers who are good analytically
[10:21:45] <maerwald> writing code for their ego, not for users
[10:21:49] <EvanR> the ones pushing dependent types? xD
[10:22:29] <int-e> maerwald: user data is just protocol overhead
[10:23:51] <Inst> well, if you're willing to humor me
[10:23:56] <Inst> basically, in terms of style guidelines
[10:24:11] <Inst> i'm working with the notion that main should be as sparse as possible, i.e, a hub of hubs (or of hubs of hubs of hubs and so on)
[10:24:24] <Inst> IO-land functions should do no more than 5 things at a time
[10:24:32] *** Quits: Jing (~hedgehog@103.121.208.183) (Remote host closed the connection)
[10:24:47] <Inst> erm, IO-land functions should be divided into hub and spoke functions, the former of which are limited to 5 things at a time, and the latter 1-2 things
[10:25:02] <Inst> i'm not sure if that's a wise way to structure things, or are there other guidelines?
[10:25:12] <Inst> for pure functions, I have a problem where I write really long pipes
[10:25:12] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:dda7:7c4c:abf9:d2d)
[10:25:29] <EvanR> is that from structured programming or something
[10:25:32] <Inst> how long should a pipe be before I look into ways to truncate it?
[10:25:42] <Inst> I don't know structured programming, it's what I came up with off the top of my head
[10:25:55] <Inst> I ran off to functional programming because I didn't have the working memory to understand imperative programming code
[10:26:27] <EvanR> you'll get better at style after writing a lot of code and having people take it apart
[10:26:49] <Inst> i probably have a cognitive defect wherein long vertical lists make me sick, but transcontinental pipelines are fine
[10:26:50] <EvanR> as opposed to attempts to over prescribe style ahead of time
[10:27:09] <Inst> thanks
[10:27:16] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[10:27:54] *** Parts: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e) ()
[10:28:50] <Inst> what did you mean, btw, by the more interesting parts of haskell?
[10:28:54] <Inst> like the type system?
[10:30:24] <EvanR> maybe you can get an idea by doing some exercises or advent of code in haskell
[10:30:36] <Inst> i've done my share, I have a workstation computer
[10:30:48] <Inst> that should have been sent back to the shop
[10:30:59] <Inst> it's still waiting on me to finish the IO-land exercises in one textbook
[10:31:24] <Inst> then that book is finished, also working on exercises in Hutton's
[10:32:06] <Inst> Get Programming with Haskell apparently has some really nice projects, 42 of them
[10:32:15] <Inst> just picked it up
[10:32:27] <EvanR> ... maybe not
[10:32:42] <EvanR> move on to real projects
[10:33:21] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:42:37] *** Quits: xff0x (~xff0x@2001:1a81:5298:9f00:e07:3bd9:947c:632e) (Ping timeout: 240 seconds)
[10:43:14] *** Quits: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net) (Quit: sirlensalot)
[10:43:53] *** Joins: xff0x (~xff0x@2001:1a81:5298:9f00:c8df:ae8c:ee9b:1cca)
[11:00:36] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:00:47] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[11:05:00] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[11:09:53] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:10:53] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Ping timeout: 252 seconds)
[11:11:01] *** Quits: jinsun_ (~jinsun@user/jinsun) (Ping timeout: 240 seconds)
[11:12:33] *** Joins: jinsun_ (~jinsun@user/jinsun)
[11:17:44] *** Joins: johnw_ (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[11:18:00] *** Joins: ksqsf (~user@134.209.106.31)
[11:18:37] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Ping timeout: 240 seconds)
[11:18:53] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[11:19:01] *** Quits: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0) (Ping timeout: 240 seconds)
[11:19:44] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[11:19:51] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[11:23:49] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: Deide (~deide@user/deide) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) (Ping timeout: 240 seconds)
[11:24:13] *** Quits: johnw_ (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0) (Ping timeout: 240 seconds)
[11:24:13] *** Quits: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e) (Ping timeout: 240 seconds)
[11:26:16] *** Joins: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net)
[11:26:44] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[11:27:31] *** Quits: Alex_test (~al_test@178.34.162.219) (Ping timeout: 256 seconds)
[11:27:31] *** Quits: AlexZenon (~alzenon@178.34.162.219) (Ping timeout: 256 seconds)
[11:27:43] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[11:27:46] *** Joins: Alex_test (~al_test@178.34.162.219)
[11:27:47] *** Joins: AlexZenon (~alzenon@178.34.162.219)
[11:29:02] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:dda7:7c4c:abf9:d2d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:31:29] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[11:33:54] *** Joins: falafel (~falafel@2603-8000-d800-688c-54f8-65c3-409b-d4a1.res6.spectrum.com)
[11:37:14] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[11:37:19] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[11:37:57] *** Quits: falafel (~falafel@2603-8000-d800-688c-54f8-65c3-409b-d4a1.res6.spectrum.com) (Ping timeout: 240 seconds)
[11:38:18] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[11:38:43] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[11:39:01] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[11:39:50] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[11:39:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:40:18] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[11:40:45] *** Joins: califax (~califax@user/califx)
[11:41:16] *** Joins: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8)
[11:41:17] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::45db)
[11:41:58] *** Joins: Deide (~deide@user/deide)
[11:42:59] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[11:43:32] *** Quits: td_ (~td@94.134.91.205) (Ping timeout: 256 seconds)
[11:43:47] *** Joins: td_ (~td@94.134.91.205)
[11:47:41] *** Joins: pagnol (~user@014198154145.ctinets.com)
[11:49:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:49:19] *** Parts: pagnol (~user@014198154145.ctinets.com) ()
[11:51:31] *** Joins: spaceseller (~spacesell@31.147.205.13)
[11:53:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[11:55:04] *** Quits: spaceseller (~spacesell@31.147.205.13) (Client Quit)
[12:02:47] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[12:13:24] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[12:14:49] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[12:16:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:16:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:16:56] *** Joins: wroathe (~wroathe@user/wroathe)
[12:18:09] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:18:50] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[12:19:55] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[12:19:55] *** Joins: user0 (~aj@154.0.137.32)
[12:21:09] *** Joins: img (~img@user/img)
[12:21:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[12:24:20] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[12:30:57] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 240 seconds)
[12:35:10] *** Quits: phma (phma@2001:5b0:211c:3a48:e7cb:c702:2cb6:39c) (Read error: Connection reset by peer)
[12:35:31] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[12:36:10] *** Joins: phma (~phma@host-67-44-208-201.hnremote.net)
[12:36:47] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[12:37:31] *** Quits: clownpi3c3 (~clownpi3c@94.50.183.196) (Remote host closed the connection)
[12:40:10] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[12:40:55] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[12:47:36] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:36] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:39] *** allbery_b is now known as geekosaur
[12:48:22] *** Joins: Pickchea (~private@user/pickchea)
[12:48:44] *** Joins: acidjnk (~acidjnk@p200300d0c7271e73e09b8468fdbe4c29.dip0.t-ipconnect.de)
[12:48:44] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c7271e73e09b8468fdbe4c29.dip0.t-ipconnect.de)
[12:49:03] *** Parts: user0 (~aj@154.0.137.32) ()
[12:49:53] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:50:12] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[12:51:21] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:52:59] *** Quits: Pickchea (~private@user/pickchea) (Client Quit)
[12:56:29] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[13:01:00] *** Quits: cemg (~cemguresc@2001:a61:11ff:a001:9318:98d4:c6f5:3049) (Ping timeout: 268 seconds)
[13:01:18] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:01:54] *** Parts: ksqsf (~user@134.209.106.31) (ERC (IRC client for Emacs 27.2))
[13:04:21] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[13:10:18] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Remote host closed the connection)
[13:17:29] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[13:27:04] *** Joins: Garbanzo (~Garbanzo@2602:304:6eac:dc10::46)
[13:29:15] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[13:30:14] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[13:31:37] *** Quits: Garbanzo (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[13:33:40] *** Joins: aplainze1akind (~johndoe@captainludd.powered.by.lunarbnc.net)
[13:34:20] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:39:33] *** Joins: razetime (~quassel@49.207.213.63)
[13:41:15] <Square> what is the goto logging library 2022? katip? Hslogger?
[13:41:49] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-11.elisa-laajakaista.fi)
[13:42:46] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:8d38:5b59:3c2d:440)
[13:44:17] *** Quits: deadmarshal (~deadmarsh@95.38.113.27) (Ping timeout: 240 seconds)
[13:44:48] <[exa]> for extra 2022 vibes try unsafePerformLogging
[13:45:35] <[exa]> other than that depends on how complex your logs should be (syslog? multiple files? topics&severities?)
[13:47:13] <[exa]> btw `logging` isn't that bad either
[13:47:31] *** Joins: deadmarshal (~deadmarsh@95.38.113.27)
[13:49:16] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[13:49:41] *** Joins: ubert (~Thunderbi@p200300ecdf09944400397d9ba615ef71.dip0.t-ipconnect.de)
[13:51:50] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:54:58] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[13:56:08] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[13:56:09] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[13:56:57] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[14:04:17] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:05:12] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:05:35] *** Lord_of_Life_ is now known as Lord_of_Life
[14:05:42] *** AlexNoo_ is now known as AlexNoo
[14:08:53] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:10:38] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:c1f6:dbe8:b4c8:cd59)
[14:11:53] <maerwald[m]> Square: none
[14:12:02] <maerwald[m]> Hand roll it 
[14:12:08] <maerwald[m]> Logging isn't hard
[14:12:20] <Square> say that to the log4j folks
[14:12:25] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 256 seconds)
[14:14:19] <Square> Also logging is boring, so i prefer spending least amount of time on it. =D
[14:17:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:17:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:17:44] *** Joins: wroathe (~wroathe@user/wroathe)
[14:22:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:25:05] *** Joins: zer0bitz (~zer0bitz@196.244.192.61)
[14:25:43] *** Joins: zer0bitz_ (~zer0bitz@196.244.192.61)
[14:26:38] *** Joins: matrox (~bc8147f2@cerf.good1.com)
[14:29:25] *** Quits: zer0bitz (~zer0bitz@196.244.192.61) (Ping timeout: 256 seconds)
[14:33:06] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[14:36:34] *** Joins: jakalx (~jakalx@base.jakalx.net)
[14:43:26] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:47:35] *** Joins: antony (~The_viole@203.77.49.232)
[14:48:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:48:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:48:28] *** Joins: wroathe (~wroathe@user/wroathe)
[14:50:13] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[14:52:14] *** Quits: antony (~The_viole@203.77.49.232) (Client Quit)
[14:53:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:56:51] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[15:01:29] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[15:02:52] <matrox> hi. do you use c2hs to generate C bindings? does it work with stack? I used something similar several years ago, and it worked nicely, but then when I switched to stack it stopped working
[15:02:56] <matrox> https://hackage.haskell.org/package/c2hs
[15:03:54] <geekosaur> c2hs should work with stack but may be broken with newer versions of gcc and headers installed with or to work with it
[15:04:48] *** Joins: __monty__ (~toonn@user/toonn)
[15:05:51] <geekosaur> if you're seeing "The symbol <whatever> does not fit here" it's probably that
[15:07:09] <geekosaur> looks like the gcc one has been fixed upstream but I don't know if it's made a release yet
[15:09:16] <geekosaur> there are also a few new ones still open including one against clang/macos
[15:15:07] *** Joins: xkuru (~xkuru@user/xkuru)
[15:16:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:20:39] <matrox> geekosaur, so it is still broken, just in a different way? that's too bad. seems like tools c2hs can't help but be fragile
[15:21:36] <geekosaur> in this case, yes. it's not at all uncommon that vendors make changes to internal #include files that are not intended to be seen by users, but a tool like c2hs will see them and break
[15:22:13] <geekosaur> hsc2hs is insulated from that kind of change but is of course less capable
[15:22:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[15:22:46] <matrox> oh, I believe that is what I used several years ago, and then for some reason, it wouldn't work with stack. or I didn't know how to make it work
[15:23:07] <geekosaur> afaik stack should have no problem with it
[15:23:26] <geekosaur> would need to be declared as a build tool but cabal requires that too
[15:23:56] <geekosaur> it's just by its nature rather more fragile than alternatives
[15:24:31] <geekosaur> (come to think of it I thought the fpcomplete folks used it with inline-c, so I'd expect stack to work well with it)
[15:27:17] <geekosaur> mm, hackage claims not, guess I'm wrong
[15:27:32] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[15:27:49] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0::7e04) (Ping timeout: 240 seconds)
[15:38:34] <matrox> too bad. it is such a pain to write C bindings by hand, and error prone too (especially if, for example, struct size can vary). so I often end up writing code that uses C library extensively in C or C++, even though I'd prefer to write it in haskell
[15:46:36] *** Joins: machinedgod (~machinedg@24.105.81.50)
[15:50:02] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[15:54:02] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[15:56:41] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[15:58:23] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[16:00:46] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[16:13:32] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:20:37] *** Quits: acidjnk (~acidjnk@p200300d0c7271e73e09b8468fdbe4c29.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:20:37] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c7271e73e09b8468fdbe4c29.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:26:08] *** Joins: tfeb (~tfb@88.98.95.237)
[16:27:12] *** tfeb is now known as tfb
[16:30:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[16:30:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[16:30:07] *** Joins: wroathe (~wroathe@user/wroathe)
[16:30:45] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[16:33:51] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[16:34:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[16:38:38] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[16:39:10] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:43:02] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 240 seconds)
[16:46:25] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:c1f6:dbe8:b4c8:cd59) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:51:20] *** Joins: acidjnk (~acidjnk@p200300d0c7271e7348f13af2a2732e1a.dip0.t-ipconnect.de)
[16:51:20] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c7271e7348f13af2a2732e1a.dip0.t-ipconnect.de)
[16:51:57] *** Joins: Brumaire (~quassel@81-64-14-121.rev.numericable.fr)
[16:55:04] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[16:56:28] *** Joins: img (~img@user/img)
[16:56:32] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:3fb6:23a4:a917:27c7)
[16:59:35] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0::7e04)
[17:00:11] *** Joins: Hayek (~xxx@rrcs-173-196-3-254.west.biz.rr.com)
[17:02:57] *** Joins: max22- (~maxime@2a01cb08833598001efaefdacc745aec.ipv6.abo.wanadoo.fr)
[17:10:13] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:14:30] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[17:14:30] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[17:14:31] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[17:14:44] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[17:14:52] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[17:14:59] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[17:17:43] *** Quits: Brumaire (~quassel@81-64-14-121.rev.numericable.fr) (Quit: No Ping reply in 180 seconds.)
[17:18:07] *** Quits: choucavalier (~choucaval@peanutbuttervibes.com) (Changing host)
[17:18:07] *** Joins: choucavalier (~choucaval@user/choucavalier)
[17:19:02] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[17:19:07] *** Joins: Brumaire (~quassel@81-64-14-121.rev.numericable.fr)
[17:19:13] *** Quits: Brumaire (~quassel@81-64-14-121.rev.numericable.fr) (Client Quit)
[17:19:34] *** Joins: Brumaire (~quassel@81-64-14-121.rev.numericable.fr)
[17:21:00] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[17:23:58] *** Quits: choucavalier (~choucaval@user/choucavalier) (Quit: ZNC 1.8.2 - https://znc.in)
[17:24:15] *** Joins: tfeb (~tfb@88.98.95.237)
[17:24:17] *** Joins: choucavalier (~choucaval@peanutbuttervibes.com)
[17:25:32] *** Quits: max22- (~maxime@2a01cb08833598001efaefdacc745aec.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[17:26:05] *** tfeb is now known as tfb
[17:27:07] *** Quits: riatre (~quassel@2001:310:6000:f::5198:1) (Quit: http://quassel-irc.org)
[17:27:16] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[17:27:42] *** Joins: riatre (~quassel@2001:310:6000:f::5198:1)
[17:35:31] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[17:39:03] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[17:41:25] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[17:43:06] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[17:43:10] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[17:45:22] *** Joins: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net)
[17:48:36] *** Joins: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it)
[17:49:17] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[17:49:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[17:50:02] *** Quits: ubert (~Thunderbi@p200300ecdf09944400397d9ba615ef71.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:50:12] *** Quits: matrox (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[17:50:34] *** Joins: matrox (~bc8147f2@cerf.good1.com)
[17:51:05] *** Joins: oweasel (~frank1998@114-26-9-148.dynamic-ip.hinet.net)
[17:51:13] *** Quits: nek0 (~nek0@nek0.eu) (Quit: The Lounge - https://thelounge.chat)
[17:51:16] *** Quits: xsperry (~xs@user/xsperry) (Killed (NickServ (GHOST command used by aldkjsfasdf!~xs@cpe-188-129-71-242.dynamic.amis.hr)))
[17:51:23] *** Joins: xsperry (~xs@user/xsperry)
[17:52:22] *** Quits: oweasel (~frank1998@114-26-9-148.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:52:31] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[17:52:47] *** Joins: oweasel (~frank1998@114-26-9-148.dynamic-ip.hinet.net)
[17:52:58] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[17:53:48] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[17:54:10] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[17:56:06] *** Quits: oweasel (~frank1998@114-26-9-148.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:56:38] *** Joins: max22- (~maxime@2a01cb08833598001e8492dc42f658f2.ipv6.abo.wanadoo.fr)
[17:57:32] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[18:00:01] *** Quits: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Ping timeout: 250 seconds)
[18:00:17] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[18:01:11] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Read error: Connection reset by peer)
[18:01:53] *** Joins: gallup (~gallup@192-222-138-215.qc.cable.ebox.net)
[18:03:04] *** Joins: nek0 (~nek0@nek0.eu)
[18:06:52] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:07:17] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[18:08:11] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Read error: Connection reset by peer)
[18:08:17] *** Quits: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net) (Quit: sirlensalot)
[18:09:48] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:14:18] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[18:15:12] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Read error: Connection reset by peer)
[18:15:14] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[18:16:33] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[18:19:25] *** Quits: acidjnk (~acidjnk@p200300d0c7271e7348f13af2a2732e1a.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:19:25] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c7271e7348f13af2a2732e1a.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:21:06] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[18:21:18] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[18:23:12] <[itchyjunk]> wahaha
[18:23:13] <[itchyjunk]> https://bpa.st/LWBA
[18:23:28] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[18:24:12] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[18:24:50] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[18:24:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[18:25:17] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[18:26:34] <[exa]> [itchyjunk]: go  ==  (+) . (^2)
[18:26:45] *** gallup is now known as aouestbillie
[18:26:46] <int-e> dubious
[18:26:57] <[itchyjunk]> hmmmm i should really learn function composition
[18:27:05] <int-e> (should be a left fold :P)
[18:27:09] <[itchyjunk]> you're just saying compose + with ^2 right?
[18:27:21] <[exa]> [itchyjunk]: or send a @pl to lambdabot :D :D
[18:27:21] *** Joins: Everything (~Everythin@37.115.210.35)
[18:27:28] <geekosaur> function composition is one thing,, pointfree is … a readability tarpit
[18:27:50] <geekosaur> I'd say ignore that for now
[18:27:52] <int-e> also I'd use sum . map for this 99% of the time
[18:27:52] <[exa]> +1 for foldl' though
[18:27:54] <[itchyjunk]> ah great!
[18:28:07] <[itchyjunk]> it says don't use map
[18:28:23] <int-e> [itchyjunk]: Yeah I've seen that you're required to use foldr
[18:28:36] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[18:28:37] <int-e> So take it as a complaint about the problem not your code :P
[18:28:51] <[itchyjunk]> i used map to check the solution instead
[18:28:54] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[18:29:02] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[18:29:07] <[itchyjunk]> the foldr and foldl difference is eventually going to get me
[18:29:09] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:29:22] <[itchyjunk]> i had nicely forgotten about - operator and it not being associative
[18:29:26] <int-e> the same is true for wanting this to be a (strict, indeed) left fold
[18:30:18] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[18:32:19] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[18:39:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[18:40:06] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[18:40:09] <[itchyjunk]> call me crazy but it works :D
[18:40:10] <[itchyjunk]> https://bpa.st/B3QA
[18:40:12] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[18:41:05] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:41:06] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[18:41:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[18:41:13] <geekosaur> not how I'd do it
[18:41:57] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[18:42:03] <[itchyjunk]> you'ed use helper function instead of map?
[18:43:01] <[exa]> why the zero case?
[18:43:52] <[itchyjunk]> hmm
[18:44:22] *** Parts: o-90 (~o-90@gateway/tor-sasl/o-90) ()
[18:44:34] <[itchyjunk]> ah i guess map takes care of the empty list case so it would be redundent?
[18:44:51] <geekosaur> the fold does since it'd just return the 0
[18:45:07] <[itchyjunk]> ahh
[18:45:29] <geekosaur> > foldr f z []
[18:45:31] <lambdabot>  z
[18:46:53] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:48:32] *** Quits: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[18:49:03] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:51:20] <[itchyjunk]> https://bpa.st/PYMA
[18:51:30] <[itchyjunk]> I did the foldl differently using a helper
[18:51:54] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[18:52:12] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[18:52:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[18:52:22] <geekosaur> that's closer to how I'd do it. have they taught you about lambdas yet?
[18:52:54] <[itchyjunk]> no. this isn't for a class :x i am grabbing random google exercises
[18:53:10] <[itchyjunk]> but i know \x->x thingy from looking at random things
[18:54:00] <geekosaur> so in place of such a simple "go" I'd just ise \x y -> x + 1
[18:54:18] <geekosaur> pr replace the y with _ since I'm not using it
[18:55:13] <[itchyjunk]> oh neat!
[18:55:20] <bjs> or just (+ 1)
[18:56:13] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[18:56:16] <geekosaur> not quite since you need to discard the other one
[18:56:19] <bjs> [itchyjunk]: I'd write `\_ x -> x + 1` here
[18:56:43] <geekosaur> you can pointfree it with that and const, but meh
[18:56:54] <[itchyjunk]> hm what did pointfree mean?
[18:57:02] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[18:57:08] <bjs> [itchyjunk]: you can `const (+ 1)` or `\_ -> (+ 1)`
[18:57:11] <bjs> then you don't mention "x"
[18:57:26] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[18:58:07] <[itchyjunk]> /o\
[18:58:20] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[18:58:37] <bjs> some people call it a "pointless" style because they're funny people :)
[18:58:42] <geekosaur> that was also what we were discussing before with [08 14:56:34] <[exa]> [itchyjunk]: go  ==  (+) . (^2)
[18:59:05] <geekosaur> and I'm meh on it because of readability especially for beginners
[18:59:13] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[19:00:06] <[itchyjunk]> ahh
[19:00:24] <[itchyjunk]> i thought the point was referring to the . point
[19:00:42] <geekosaur> a point is a variable, essentiallyy
[19:00:51] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[19:01:36] <[itchyjunk]> ah
[19:02:01] <geekosaur> @pl \x y -> x + 1
[19:02:02] <lambdabot> const . (1 +)
[19:02:19] <geekosaur> I don't exactly recommend that
[19:03:15] <geekosaur> it's the sort of thing you come back 6 months later and wonder wtf you were drinking at the time
[19:03:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[19:03:45] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[19:03:47] <bjs> I quite like point-free things, it really emphasises the declarative nature of things
[19:04:20] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[19:04:50] * [exa] sees scrollback
[19:05:00] * [exa] . o O ( what have I opened )
[19:05:19] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[19:06:15] <lechner> it might be a littleclearer if point free did not involve dots!
[19:06:31] <geekosaur> maybe I spent too much time trying to wrap my head around APL way back when™ but I'm less than impressed with pointfree style
[19:06:49] <razetime> pointfree is nice in APL for describing short things.
[19:07:15] <razetime> the problem was when they decided the everything should be pointfree in J(and then later realizing why that was bad)
[19:07:30] <geekosaur> oh,  that attitude predated J
[19:07:47] <geekosaur> pretty much everything in APL was pointfree too
[19:08:04] <razetime> I don't think so?
[19:08:21] <geekosaur> maybe it was just the training materials I had on hand
[19:08:34] <razetime> From what I know, J got trains first, which was later added to Dyalog APL and others
[19:08:37] <geekosaur> they pointfree-d anything they could. granting that was less than in J
[19:09:17] <geekosaur> but they made a big deal of it
[19:09:47] <lechner> is "tacit" style a clearer term?     https://en.wikipedia.org/wiki/Tacit_programming
[19:10:12] <razetime> yes, tacit is the term used in general. In APL/J/K these are called trains.
[19:10:37] <lechner> that page also calls it "pointless", with an undertone
[19:11:13] <hpc> lambdabot's @pl command is a nod to "pointless" as well
[19:11:23] <lechner> i see
[19:11:28] <razetime> after about 10 symbols i usually just switch to a lambda.
[19:11:42] <razetime> (⊢∘≢≥∘⍋⊢∘⍳∘≢,⊣) is relatively readable once you know train rules.
[19:12:13] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[19:14:42] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[19:18:20] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[19:19:37] <lechner> naming things is one of the great privileges of language, and can make code easier to read, if less terse
[19:19:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:23:28] <lechner> Hi, when encoding JSON with aeson and saving it as a file, who converts it to UTF-8 please? When injecting JSON into a Hasql.TH statement via Pg's 'json_populate_recordset', will the data get encoded twice?
[19:24:10] *** Joins: sebau1995 (~sebau1995@138.117.21.68)
[19:24:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[19:24:30] *** Quits: sebau1995 (~sebau1995@138.117.21.68) (Client Quit)
[19:24:41] <geekosaur> the I/O layer does, see hSetEncoding
[19:25:01] <lechner> so it's late in the process
[19:25:02] <geekosaur> I couldn't tell you about what in Hasql does it
[19:25:08] <lechner> as it should be
[19:25:12] <geekosaur> yes
[19:26:32] <lechner> that mean aeson doesn't convert it, right?
[19:27:33] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:27:35] <lechner> or encode it, to be exact
[19:28:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:28:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:28:03] *** Joins: wroathe (~wroathe@user/wroathe)
[19:28:23] <geekosaur> that I don't know. although if aeson gives you a String it should not be encoded
[19:28:35] <geekosaur> if it's a Text then it may be (see text 2.0)
[19:28:46] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 256 seconds)
[19:29:09] <lechner> that's only internal though, isn't it?
[19:29:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[19:29:27] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[19:29:28] <Clint> the question is how you're saving it to a file
[19:29:28] <lechner> externally Text still represents code points?
[19:30:01] <geekosaur> I think they're sending it to a database. that *should* be a binary protocol
[19:30:01] <Clint> because it's the f.ex. String/Text->ByteString step that matters
[19:30:28] <lechner> actually, i am not saving it at all. i want to send it to Postgres, but in Perl it leads to double encoding
[19:30:29] <geekosaur> but I don't know where in that pipeline the conversion would happen, as Clint said
[19:30:38] <lechner> i am migrating all my code
[19:30:56] <lechner> you will be happy to hear!
[19:31:11] <lechner> i think haskell is fine
[19:31:20] <lechner> i love this language
[19:31:45] <geekosaur> anyway I would probaly not encode it until I discovered it caused problems, since there should already be a proper encoding layer in place
[19:32:09] <razetime> i just sarted haskell today with the book "Real World Haskell"
[19:32:14] <razetime> I like its approach so far
[19:32:20] <lechner> congrats!
[19:32:59] <lechner> in perl i turn off all I/O layers
[19:33:54] <lechner> but as usual haskell does the right thing (TM)
[19:34:08] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:34:16] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[19:34:44] <lechner> Clint: thanks!
[19:35:45] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:35:50] <geekosaur> if they're doing t right then encoding should be the last thing that happens before handing the SQL or data off to libpq
[19:35:53] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[19:36:02] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:36:33] *** Quits: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[19:38:34] <lechner> it can be confusing because UTF-8 is part of the JSON spec    https://datatracker.ietf.org/doc/html/rfc8259#section-8.1
[19:39:14] <lechner> but aeson will work well!
[19:39:14] *** Quits: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506) (Read error: Connection reset by peer)
[19:39:40] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[19:39:40] *** Quits: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506) (Read error: Connection reset by peer)
[19:39:48] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[19:40:10] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[19:40:42] <lechner> thank you all for building this fine language. i wish i hadk found it ten years earlier
[19:41:05] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[19:41:39] *** Quits: aouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[19:43:27] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:46:45] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 256 seconds)
[19:47:02] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[19:48:11] *** Joins: roboguy (~roboguy@user/roboguy)
[19:48:11] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[19:49:39] <lechner> wow, APL is symbolic    https://en.wikipedia.org/wiki/APL_syntax_and_symbols
[19:50:23] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:54:41] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[19:57:40] *** Joins: shapr (~user@98.54.1.142)
[20:00:18] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[20:00:18] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[20:00:22] *** allbery_b is now known as geekosaur
[20:02:09] <geekosaur> very symbolic. and used a lot of overprints
[20:02:11] <razetime> yes, APL has its roots in math notation so it uses symbols.
[20:02:27] <razetime> overprints?
[20:02:47] <geekosaur> type a symbol, backspace over it, type another symbol on top
[20:03:35] <geekosaur> think quote-quad for a common example
[20:04:05] <razetime> ⍞?
[20:04:14] *** Joins: stef204 (~stef204@user/stef204)
[20:04:15] <razetime> well, i just have keyboard layout for it
[20:04:28] <geekosaur> in unicode they gave them all distinct symbols because overprinting terminals are kinda rare these days
[20:04:38] <hpc> on typewriters you might write a 0 by writing O backspace /
[20:04:40] <geekosaur> but they started out on ttys
[20:05:04] <geekosaur> but originally you did quote-quad as quad backspace quote
[20:05:19] <geekosaur> and lamp was cap backspace circle
[20:05:34] <razetime> bash has ~/.inputrc which allows an overprinting like setup.
[20:05:59] <razetime> lamp is AltGr-, in the newer layouts
[20:07:14] <geekosaur> damn I had fun experimenting with that stuff. parents weren't so happy when they got slapped with a $600 CPU time bill though (I'd had no idea they did that)
[20:08:22] <razetime> wow, you must've been using the timesharing machines from the I.P. Sharp times
[20:08:42] <geekosaur> they had fancy APL terminals by the time I was playing with it
[20:08:52] <geekosaur> still did the overprinting thing
[20:09:15] <razetime> that's like.. >40 years ago?
[20:09:27] <geekosaur> this was 1981-82, I spent half days my senior HS year at CWRU
[20:09:53] <geekosaur> so yes, 40 years ago
[20:11:13] <razetime> very cool! Most people I encounter in the array community nowadays come up from older demo videos. 
[20:11:37] <razetime> it must've been something to try out apl in those times
[20:11:50] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[20:13:43] *** Joins: xlei (~akans@pool-108-54-97-84.nycmny.fios.verizon.net)
[20:14:24] <geekosaur> also played with SPITBOL (IBM SNOBOL compiler), SAIL (variant of ALGOL-60 from Stanford), SIMULA, and I think there were a few others but can't recall them now
[20:14:46] <geekosaur> took me a while to remember the name of SAIL, all I was recalling was that it was an ALGOL derivative
[20:17:52] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[20:19:01] <razetime> wonder how many of those still have implementations
[20:19:48] <geekosaur> dunno. this was all on a DECsystem 20/60, they pulled the plug on the last of those years ago
[20:19:52] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:20:10] <geekosaur> oh, a bit of BLISS-10. which led to my learning about how PDP10s worked
[20:21:17] <geekosaur> and explained why everything but SNOBOL was based on 6s instead of 8s
[20:22:16] <geekosaur> on the other hand that meant I understood the TENEX directive in FTP when I discovered that a few years later
[20:23:10] *** Quits: shapr (~user@98.54.1.142) (Ping timeout: 256 seconds)
[20:23:16] <razetime> i only recognize SNOBOL from there(and ALGOL, i guess)
[20:23:55] *** Quits: xlei (~akans@pool-108-54-97-84.nycmny.fios.verizon.net) (Quit: ZNC 1.9.x-git-167-81df4dec - https://znc.in)
[20:24:07] <geekosaur> SIMULA's still used, I think
[20:24:16] *** Joins: ouestbillie (~gallup@modemcable057.194-20-96.mc.videotron.ca)
[20:24:16] *** Joins: aouestbillie (~gallup@modemcable057.194-20-96.mc.videotron.ca)
[20:24:40] <geekosaur> simulation language generally considered to be the first object oriented language, using the actor model
[20:24:44] *** Joins: xlei (~akans@pool-108-54-97-84.nycmny.fios.verizon.net)
[20:25:39] <geekosaur> SNOBOL was replaced by Icon in much the same way APL was replaced by J then K
[20:27:33] *** Quits: edr (~edr@user/edr) (Ping timeout: 250 seconds)
[20:27:45] *** Joins: edr (~edr@enlo.co)
[20:27:45] *** Quits: edr (~edr@enlo.co) (Changing host)
[20:27:45] *** Joins: edr (~edr@user/edr)
[20:27:59] *** Quits: polux (~polux@51.15.169.172) (Ping timeout: 250 seconds)
[20:28:13] *** Joins: polux (~polux@51.15.169.172)
[20:28:23] <geekosaur> now I'm trying to imagine how different the programming world would be today if Unicon (Icon with a focus on Unix programming) had come along early enough to displace Perl
[20:28:43] <razetime> APL hasn't quite been replaced yet, but BQN seems like a worthy successor now
[20:28:51] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (Ping timeout: 250 seconds)
[20:29:06] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[20:29:16] <razetime> K is very different from the other two and my personal favourit
[20:29:17] *** Quits: n3t (~n3t@user/n3t) (Ping timeout: 250 seconds)
[20:30:22] *** Joins: n3t (n3t@s45.mydevil.net)
[20:31:20] *** Quits: kawpuh (~kawpuh@66.42.81.80) (Ping timeout: 252 seconds)
[20:31:30] *** Joins: kawpuh (~kawpuh@66.42.81.80)
[20:31:53] *** Quits: nerdypepper (~nerdypepp@user/nerdypepper) (Ping timeout: 250 seconds)
[20:32:41] *** Joins: nerdypepper (~nerdypepp@user/nerdypepper)
[20:32:56] *** Joins: nhatanh02 (~satori@123.24.172.30)
[20:33:41] *** Quits: c_wraith (~c_wraith@adjoint.us) (Ping timeout: 245 seconds)
[20:33:52] *** Joins: c_wraith (~c_wraith@adjoint.us)
[20:34:55] *** Quits: Philonous (~Philonous@user/philonous) (Ping timeout: 250 seconds)
[20:34:55] *** Quits: clever (~clever@99.192.114.98) (Ping timeout: 250 seconds)
[20:35:09] *** Joins: clever (~clever@99.192.114.98)
[20:35:21] *** Joins: Philonous (~Philonous@user/philonous)
[20:36:39] *** Quits: AWizzArd (~code@user/awizzard) (Ping timeout: 250 seconds)
[20:36:45] *** Joins: AWizzArd (~code@gehrels.uberspace.de)
[20:36:46] *** Quits: razetime (~quassel@49.207.213.63) (Ping timeout: 256 seconds)
[20:37:56] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (Ping timeout: 252 seconds)
[20:38:10] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[20:38:16] *** Quits: xerox (~edi@user/edi) (Ping timeout: 245 seconds)
[20:38:25] *** Joins: xerox (~edi@user/edi)
[20:40:04] <EvanR> A -> a, is Applicative. What are the requirements for A -> (B,a) to be Applicative... also what is this
[20:40:45] <[exa]> EvanR: Monoid B?
[20:41:01] <EvanR> that's why I was thinking, but didn't know if I was missing a more general thing
[20:41:06] <EvanR> s/why/what/
[20:41:06] *** Quits: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506) (Read error: Connection reset by peer)
[20:41:07] <monochrom> Usually we want B to be a monoid.  Then you have ReaderT A (Writer B).
[20:41:15] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:42:17] <EvanR> ok, mempty is "required" for pure
[20:43:25] <monochrom> For foo<*>bar, "use <> to combine the two B's" is more general than "always prefer the B from foo" and "always prefer the B from bar".
[20:43:41] *** Quits: fluxit (~fluxit@techsmix.net) (Ping timeout: 245 seconds)
[20:44:12] <monochrom> and is pivotal to associative laws of Applicative anyway.
[20:44:36] <EvanR> crazy how Monoid keeps cropping up
[20:44:53] *** Quits: elvishjerricco (sid237756@helmsley.irccloud.com) (Ping timeout: 250 seconds)
[20:45:02] *** Joins: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com)
[20:45:18] <EvanR> Applicative itself is a form of Monoid in some category, forgot the details
[20:45:44] *** Quits: tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (Remote host closed the connection)
[20:46:09] *** Joins: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[20:46:13] <geekosaur> "strong lax monoidal functor" (looked it up to double check)
[20:46:44] *** Joins: fluxit (~fluxit@techsmix.net)
[20:48:21] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Ping timeout: 250 seconds)
[20:48:46] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[20:51:49] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[20:53:27] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[20:54:10] <EvanR> if I have type f and type g which are both Applicative, is the composition f `O` g Applicative
[20:54:29] <[exa]> :k Compose
[20:54:30] <lambdabot> error:
[20:54:31] <lambdabot>     Not in scope: type constructor or class ‘Compose’
[20:54:34] <[exa]> ayay
[20:54:41] <geekosaur> % :k Compose
[20:54:42] <yahb> geekosaur: ; <interactive>:1:1: error: Not in scope: type constructor or class `Compose'
[20:54:52] <geekosaur> % import Data.Compose
[20:54:52] <yahb> geekosaur: ; <no location info>: error:; Could not find module `Data.Compose'; Perhaps you meant Data.Complex (from base-4.15.0.0)
[20:54:57] <EvanR> oof
[20:55:01] <[exa]> EvanR: basically https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Functor-Compose.html#t:Compose
[20:55:04] <geekosaur> % import Control.Category
[20:55:04] <yahb> geekosaur: 
[20:55:11] <geekosaur> oh
[20:55:14] <geekosaur> % :k Compose
[20:55:15] <yahb> geekosaur: ; <interactive>:1:1: error: Not in scope: type constructor or class `Compose'
[20:55:28] <EvanR> that's cool, that they compose
[20:55:45] <geekosaur> pretty sure they compose, but monads don't in general
[20:55:54] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[20:56:39] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:1c21:9777:b34f:a2a4)
[20:56:52] <EvanR> let see what else Compose can do
[20:56:53] *** Joins: neurocyte0917 (~neurocyte@IP-094046083160.dynamic.medianet-world.de)
[20:56:53] *** Quits: neurocyte0917 (~neurocyte@IP-094046083160.dynamic.medianet-world.de) (Changing host)
[20:56:53] *** Joins: neurocyte0917 (~neurocyte@user/neurocyte)
[20:57:51] *** Joins: Erutuon (~Erutuon@user/erutuon)
[20:57:58] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:8d38:5b59:3c2d:440) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:58:07] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:58:35] <EvanR> Functor, Foldable, Traversable, Semigroup, Monoid, 
[20:58:42] <[exa]> Alternative!
[20:59:00] <EvanR> somehow two Contravariants isn't contravariant?
[20:59:20] <[exa]> I'd guess that's a Functor
[20:59:31] *** Quits: a1paca (~a1paca@user/a1paca) (Ping timeout: 245 seconds)
[20:59:35] <EvanR> oh... and we can't get to the same instance two ways
[21:00:13] <[exa]> I'd say that the order is set by order of composing the types
[21:00:20] *** Joins: a1paca (~a1paca@user/a1paca)
[21:00:22] <[exa]> but that's a wild guess
[21:01:09] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[21:01:12] <EvanR> no..
[21:02:13] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[21:04:23] *** Quits: xlei (~akans@pool-108-54-97-84.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[21:09:17] <EvanR> Compose would be cool to have in lambdabot 
[21:10:53] <polyphem> % import Data.Functor.Compose
[21:10:53] <yahb> polyphem: 
[21:10:56] <geekosaur> @let import Data.Functor Compose
[21:10:56] <lambdabot>  Parse failed: Parse error: Compose
[21:11:02] <geekosaur> @let import Data.Functor.Compose
[21:11:03] <lambdabot>  Defined.
[21:11:07] <geekosaur> there ya go
[21:12:37] *** Joins: xlei (~akans@pool-71-190-222-100.nycmny.fios.verizon.net)
[21:16:59] *** Joins: raym (~raym@user/raym)
[21:17:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:17:58] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:1c21:9777:b34f:a2a4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:18:02] *** Quits: stef204 (~stef204@user/stef204) (Ping timeout: 268 seconds)
[21:22:23] *** Joins: stef204 (~stef204@user/stef204)
[21:22:58] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:29:58] *** Quits: haritz (~hrtz@user/haritz) (Read error: Connection reset by peer)
[21:32:42] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[21:33:43] <EvanR> > ((\x -> ("a",Sum x)) <> (\y -> ("b", Sum y))) 2
[21:33:45] <lambdabot>  ("ab",Sum {getSum = 4})
[21:33:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:34:18] <EvanR> :t Compose (\x -> ("a",Sum x)) <> Compose (\y -> ("b", Sum y))
[21:34:19] <lambdabot> Semigroup (Compose ((->) a) ((,) [Char]) (Sum a)) => Compose ((->) a) ((,) [Char]) (Sum a)
[21:35:24] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:1c21:9777:b34f:a2a4)
[21:35:25] <EvanR> > getCompose (Compose (\x -> ("a",Sum x)) <> Compose (\y -> ("b", Sum y))) 2
[21:35:26] <lambdabot>  error:
[21:35:26] <lambdabot>      • No instance for (Semigroup
[21:35:26] <lambdabot>                           (Compose ((->) Integer) ((,) [Char]) (Sum Integer)))
[21:35:30] <EvanR> :(
[21:36:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:36:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:36:40] *** Joins: wroathe (~wroathe@user/wroathe)
[21:37:48] *** Joins: haritz (~hrtz@2a02:8010:65b5:0:6009:6384:e3cb:2220)
[21:37:48] *** Quits: haritz (~hrtz@2a02:8010:65b5:0:6009:6384:e3cb:2220) (Changing host)
[21:37:48] *** Joins: haritz (~hrtz@user/haritz)
[21:38:04] <EvanR> > getCompose (Compose (\x -> ("a",Sum x)) <> Compose (\y -> ("b", Sum y))) (Sum 2)
[21:38:06] <lambdabot>  error:
[21:38:06] <lambdabot>      • No instance for (Semigroup
[21:38:06] <lambdabot>                           (Compose ((->) (Sum Integer)) ((,) [Char]) (Sum (Su...
[21:39:57] <EvanR> fixing that, it seems the problem is there's no instance specifically for (Sum Int -> (String, Sum Int))
[21:41:07] <xerox> @unmtl State (Sum Int) String
[21:41:07] <lambdabot> Sum Int -> (String, Sum Int)
[21:42:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:42:42] <EvanR> > getCompose (liftA2 (<>) (Compose (\x -> ("a",x))) (Compose (\y -> ("b",y)))) (Sum 2)
[21:42:43] <lambdabot>  ("ab",Sum {getSum = 4})
[21:43:39] <EvanR> if monoiding directly doesn't work, switch to applicative
[21:44:12] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:44:37] *** Quits: xlei (~akans@pool-71-190-222-100.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[21:44:53] *** Joins: xlei_ (~akans@pool-71-125-19-142.nycmny.fios.verizon.net)
[21:45:01] <EvanR> this is really cool, should save writing a lot of Applicative instances
[21:45:08] *** Joins: emad_ (~emad@156.214.64.147)
[21:45:40] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:e09f:2436:e1e3:cca8)
[21:46:21] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:47:23] *** Quits: emad_ (~emad@156.214.64.147) (Client Quit)
[21:47:25] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[21:47:46] *** Joins: emad (~emad@156.214.64.147)
[21:49:51] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:51:17] *** Quits: xlei_ (~akans@pool-71-125-19-142.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[21:52:40] *** Joins: xlei (~akans@pool-71-125-19-142.nycmny.fios.verizon.net)
[21:53:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:53:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:53:43] *** Joins: wroathe (~wroathe@user/wroathe)
[21:53:57] *** Quits: xlei (~akans@pool-71-125-19-142.nycmny.fios.verizon.net) (Client Quit)
[21:55:45] *** Joins: xlei (~akans@pool-71-125-19-142.nycmny.fios.verizon.net)
[21:58:05] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:1c21:9777:b34f:a2a4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:01:01] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:03:12] *** Joins: econo (uid147250@user/econo)
[22:04:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[22:06:15] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:06:16] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[22:09:50] *** Quits: juhp (~juhp@128.106.188.82) (Read error: Connection reset by peer)
[22:10:19] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[22:29:47] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:40:18] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[22:42:24] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[22:43:40] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[22:44:15] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:44:30] *** Joins: coolnickname (uid531864@user/coolnickname)
[22:45:47] *** Joins: jakalx (~jakalx@base.jakalx.net)
[22:47:06] *** Joins: user01 (~aj@154.0.137.32)
[22:49:37] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:e09f:2436:e1e3:cca8) (Ping timeout: 240 seconds)
[22:51:05] *** Joins: little_mac (~little_ma@c-24-127-188-93.hsd1.mi.comcast.net)
[22:51:38] *** Quits: deadmarshal (~deadmarsh@95.38.113.27) (Ping timeout: 256 seconds)
[22:56:39] *** Joins: zzz (~z@user/zero)
[22:59:07] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:59:10] *** Quits: zero (~z@user/zero) (Ping timeout: 268 seconds)
[22:59:10] *** zzz is now known as zero
[22:59:37] <ProfSimm> Let's imagine a hypothetical autocompletion feature where when you type a function you see a drop-down of all valid values on each argument. 
[23:00:09] <ProfSimm> So when you have a function that takes prime numbers as input, you see a dropdown of primes.
[23:00:17] <ProfSimm> I wonder how feasible this is 
[23:00:25] *** Parts: texasmynsted (~texasmyns@99.96.221.112) (WeeChat 3.3)
[23:00:53] <polyphem> ProfSimm: and a function that takes Integer ?
[23:01:20] <ProfSimm> polux: list of all integers. Well it'll be lazily computed as you scroll. And you can type it to jump around the list
[23:01:32] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[23:01:49] <ProfSimm> polux: gets a bit tricky if it takes a double.
[23:02:06] <ProfSimm> polux: that would need a box that scrolls in two directions. Mantissa and exponent.
[23:02:24] <ProfSimm> :D
[23:02:25] *** Joins: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it)
[23:03:40] <polyphem> ProfSimm: and a function that takes a complex number ?
[23:03:47] <ProfSimm> polux: I was thinking about this in the context of implementing a record as a function taking fieldname as input. And needing autocompletion on that argument therefore.
[23:04:01] <ProfSimm> polyphem: more dimensions
[23:04:08] <polyphem> hehe
[23:04:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[23:05:24] <polyphem> autocompletion is done vie prefix trees
[23:05:33] <polyphem> s/vie/via/
[23:05:45] *** Quits: matrox (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[23:08:03] <monochrom> So I type in fmap...
[23:09:43] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[23:10:25] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[23:14:47] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[23:15:19] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[23:17:25] *** Joins: Sgeo (~Sgeo@user/sgeo)
[23:28:11] <lechner> Hi, do I have to use hasql-transactions to have transactions with hasql?
[23:29:10] *** Quits: n3t (n3t@s45.mydevil.net) (Changing host)
[23:29:10] *** Joins: n3t (n3t@user/n3t)
[23:31:42] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[23:31:50] *** Joins: vglfr (~vglfr@88.155.96.35)
[23:34:02] <[itchyjunk]> https://bpa.st/SOHA
[23:34:08] *** Quits: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[23:34:46] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:37:38] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:55] <EvanR> I type in the first character of the source code for an MMO
[23:38:13] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[23:38:23] <EvanR> 🤑
[23:41:29] *** Quits: emad (~emad@156.214.64.147) (Quit: Leaving)
[23:41:30] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[23:41:52] *** Joins: emad (~emad@156.214.64.147)
[23:42:09] *** Joins: vglfr (~vglfr@88.155.96.35)
[23:42:34] *** Parts: user01 (~aj@154.0.137.32) ()
[23:42:57] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[23:52:26] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[23:53:06] <Inst> do you know where i can find a good tutorial on haskell type signatures?
[23:53:17] <Inst> like, i'm fed up with meeting crap like ~ and forall
[23:54:45] <[itchyjunk]> Hm, i have having a little brain dead movement. I have a function that takes 2 ints. but if the list doesn't have enough, it will only get one of the int. I am trying to figure out how to deal with this situation. go x _ = x isn't it :x
[23:56:55] <polyphem> patttern match on all cases : go [] = ... ; go (x:y:xs) ; go [x] = error ...
[23:57:18] <bjs> [itchyjunk]: is go the function that takes a list or the function that takes the 2 ints?
[23:58:46] <[itchyjunk]> https://bpa.st/ZPXQ
[23:58:49] <[itchyjunk]> takes 2 ints.
[23:58:52] *** Joins: zaquest (~notzaques@5.130.79.72)
[23:59:07] <[itchyjunk]> I am trying to understand why foldr1 didn't have the non exhaustive pattern issue but foldl1 does
[23:59:10] <[itchyjunk]> ;_;
[23:59:34] *** Joins: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de)
