[00:04:14] *** Quits: linjie (~linjie@58.247.210.251) (Ping timeout: 244 seconds)
[00:06:30] <BtbN> zscale is not ffmpeg itself though
[00:06:34] <BtbN> that's an external library
[00:06:46] *** Quits: Brocker (~NoBody@user/brocker) (Quit: ZNC 1.8.2 - https://znc.in)
[00:07:00] <BtbN> The a demuxer being able to read metadata that in some way has that info does in no way mean it's machine readable/understood by ffmpeg
[00:10:40] <Enverex> Ahh, I didn't realise zscale wasn't just internal.
[00:11:35] *** Quits: layerex (~layerex@213.87.138.122) (Quit: Client closed)
[00:12:58] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[00:15:47] *** Quits: pong (~loop@user/pong) (Quit: est-ce que "autosendcmd" fonctionne correctement ?!)
[00:15:57] *** Joins: arcatech (~arcatech@user/arcatech)
[00:16:37] *** Joins: pong (~loop@user/pong)
[00:18:03] *** Quits: blaze (~blaze@user/blaze) (Quit: WeeChat 3.0.1)
[00:18:08] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[00:18:22] *** Quits: pong (~loop@user/pong) (Client Quit)
[00:19:58] *** Joins: beaver (~loop@user/pong)
[00:21:39] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Read error: Connection reset by peer)
[00:29:33] *** Joins: jimby (~jimby@user/jpb)
[00:31:20] <jimby> hello - i have a .vob file with a video stream as follows:   Stream #0:1[0x1e0]: Video: mpeg2video (Main), yuv420p(tv, smpte170m, top first), 704x480 [SAR 10:11 DAR 4:3], Closed Captions, 29.97 fps, 29.97 tbr, 90k tbn, 59.94 tbc
[00:32:52] <jimby> when i convert to .mp4  the video looks skewed as in every other line is shifted left or right - maybe some kind of sync problem?
[00:33:54] <jimby> is there an option to get the output to be smoother?
[00:35:03] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[00:35:26] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[00:35:33] *** Quits: Blacker47 (~Blacker47@user/blacker47) (Quit: Life is short. Get a V.90 modem fast!)
[00:38:50] *** Joins: Brocker (~NoBody@161.97.162.23)
[00:38:50] *** Quits: Brocker (~NoBody@161.97.162.23) (Changing host)
[00:38:50] *** Joins: Brocker (~NoBody@user/brocker)
[00:47:12] *** Quits: beaver (~loop@user/pong) (Quit: last restart)
[00:54:50] *** Joins: beaver (~loop@user/pong)
[01:01:49] *** Quits: aquijoule_ (~richbridg@213-225-12-210.nat.highway.a1.net) (Quit: Leaving)
[01:02:04] *** Joins: aquijoule_ (~richbridg@213-225-12-210.nat.highway.a1.net)
[01:02:11] *** aquijoule_ is now known as richbridger
[01:06:01] *** Quits: Volgaar (~volgaar@104.66.13.93.rev.sfr.net) (Quit: WeeChat 3.2)
[01:06:08] *** Quits: richbridger (~richbridg@213-225-12-210.nat.highway.a1.net) (Remote host closed the connection)
[01:06:33] *** Quits: wyatt8740 (~wyatt8740@104.200.142.205) (Ping timeout: 256 seconds)
[01:07:29] *** Joins: richbridger (~richbridg@213-225-12-210.nat.highway.a1.net)
[01:07:30] *** Joins: wyatt8740 (~wyatt8740@149.164.111.64)
[01:12:54] *** Joins: Vonter (~Vonter@user/vonter)
[01:37:44] *** Joins: HarveyPwca (~HarveyPwc@2601:246:c180:a570:29df:3b00:ad0e:3a06)
[01:38:01] *** Quits: michaelni (~michael@213-47-68-29.cable.dynamic.surfer.at) (Ping timeout: 268 seconds)
[01:39:26] *** Joins: michaelni (~michael@213-47-68-29.cable.dynamic.surfer.at)
[01:41:41] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[01:41:57] *** Joins: mickey (~user@user/mickey)
[01:47:51] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 258 seconds)
[01:51:00] *** Quits: snikulov (~snikulov@109-252-86-189.nat.spd-mgts.ru) (Quit: Konversation terminated!)
[01:53:01] <jimby> ok, this seems to work well:  -filter:v bwdif=mode='send_frame':parity='auto':deint='all'
[01:58:17] *** Joins: jess (~jess@libera/staff/jess)
[02:00:13] *** Quits: beaver (~loop@user/pong) (Quit: i broken adv_windowlist)
[02:01:08] *** Joins: beaver (~loop@user/pong)
[02:03:09] *** Quits: dreamon (~dreamon@p54b140a6.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:03:10] *** Quits: Buster_ (~Buster@46.160.36.66) ()
[02:17:33] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[02:27:46] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Read error: Connection reset by peer)
[02:35:28] *** Quits: fkaa (~fkaa@81-226-20-99-no256.tbcn.telia.com) (Quit: Leaving)
[02:37:43] <shibboleth> i've asked part of this question in the past, but: is there any way to achieve "both" fragmented+empty_moov+delay_moov recording?
[02:38:44] *** Quits: beaver (~loop@user/pong) (Quit: upgrading the script adv_windowlist.pl version 0.6ca to 1.9.1)
[02:38:45] <shibboleth> fragmented while recording, then add the "map" upon closing the file to avoid unbuffered seek issues etc?
[02:38:55] <shibboleth> has it bene discussed, turned down, planned?
[02:40:34] *** Joins: beaver (~loop@user/pong)
[02:41:10] <BtbN> That'd just be the equivalent of remuxing to normal mp4 after the fact. Can easily do that with a simple shell script.
[02:41:51] <shibboleth> sure, but as single-shot
[02:42:27] <shibboleth> "both" fragmented+empty_moov+delay_moov isn't quite right
[02:42:36] <shibboleth> i'm thinking fragmented+faststart
[02:42:59] <shibboleth> frag whole recording, then add metadata when closing so you get the benfit of faststart
[02:43:02] <shibboleth> frag while
[02:43:39] <BtbN> It's impossible as single-shot
[02:43:48] <BtbN> It involves re-writing the whole file
[02:43:59] <BtbN> As does faststart
[02:44:52] <shibboleth> sure, but... hear me out:
[02:45:36] <shibboleth> say a change was made to ffmpeg that added such a feature. then later ffmpeg-based players would be able to handle it, but surely this could be done in a way that wouldn't break playback on non-ffmpeg-based players?
[02:45:55] <BtbN> It doesn't even make logical sense
[02:46:03] <BtbN> a file can't both be fragmented and non-fragmented
[02:46:06] <BtbN> it's a full remux
[02:46:24] <BtbN> The faststart "rewrite the whole file after the fact"-thing is already quite a hack
[02:46:36] <BtbN> And that's still fairly simple in comparison
[02:46:44] <shibboleth> yeah, only thing i really want is to be able to seek to non-buffered parts of the video
[02:46:58] <shibboleth> which you get with faststart
[02:47:21] <BtbN> You also get that without faststart
[02:47:27] <shibboleth> ok?
[02:47:33] <BtbN> faststart just makes... the start faster, as it avoids a seek to the back of the file
[02:48:22] <shibboleth> well, imagine you have a 4k camera recording some 12MB/sec, splitting recordings into 600s segments/files
[02:48:34] <shibboleth> now, imagine seeking to half-time on a metered connection
[02:48:36] <shibboleth> urgh
[02:49:01] <BtbN> I don't see how that relates to faststart
[02:49:04] <znf> I'm imagining not having a metered connection in the first place :)
[02:49:09] <znf> oh wait, I already don't :P
[02:49:11] <BtbN> faststart is not a thing with fragmented files
[02:49:18] <shibboleth> i get that
[02:49:22] <BtbN> Since there is no global index that could be moved anywhere
[02:49:29] <shibboleth> but with faststart i can seek to non-buffered
[02:49:37] <shibboleth> fragkey+emptymov not so much
[02:49:55] <BtbN> You are confusing things for some reason
[02:50:06] <shibboleth> znf, remote locations. expected fiber in 2099
[02:50:07] <BtbN> in a non fragmented file, faststart has absolutely nothing to do with seeking
[02:50:17] <BtbN> you can seek in a file with the index at the end just fine
[02:50:23] <BtbN> just needs a seek to the end to read it
[02:50:32] <znf> so, basically - you want to be able to load & seek files fast after they're done, but while they're writing, you would also want to be able to seek fast trough them
[02:50:34] <shibboleth> alright, only reason i mentioned faststart was that it does produce the wanted behavior. nvm faststart
[02:50:44] <BtbN> except it does not
[02:50:48] <BtbN> it has nothing to do with the behaviour
[02:51:19] <BtbN> What you're asking for still sounds to me like you want to run a second pass remux after the fragmented recording is done, to flat-file mp4
[02:52:55] <shibboleth> if i set movflag faststart i'm able to seek in the remote recordings to not-already-buffered parts. this may simply be a *biproduct" of setting faststart, but let's stop saying "faststart". is there an alternative, that would achieve the same result (the result being able to seek to non-buffered parts on the client)
[02:53:21] <shibboleth> dash+delaymoov does not work
[02:53:32] <BtbN> No, what you're asking for is directly contradictory to how fragmented mp4 works
[02:53:39] <BtbN> it being standalone fragments is the whole point
[02:54:13] <BtbN> A player might be able to seek in that mass of fragmented mp4 files with an accompanying HLS or DASH playlist
[02:54:58] <BtbN> But given how you explained this, I still don't see what the issue with a final remux to regular mp4 is
[02:55:25] *** Seattle is now known as Maple
[02:56:06] <AMM> What exactly are you doing shibboleth?
[02:56:20] <AMM> When are you trying to play back the file? With what?
[02:56:46] <AMM> When it's being written, when it has been written? With mpv, vlc, or streaming over HTTP?
[03:03:16] <shibboleth> it's been written with ffmpeg c api
[03:04:00] <shibboleth> accessed by means of firefox, serverside apache, clientside jsplayer
[03:33:31] *** Quits: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth) (Quit: shibboleth)
[03:45:47] *** Quits: iive (~iive@87.119.101.204.client.entry.bg) (Quit: They came for me...)
[03:46:49] *** Quits: pntaylor (~quassel@ppp121-45-196-59.cbr-trn-nor-bras38.tpg.internode.on.net) (Ping timeout: 246 seconds)
[03:47:12] *** Joins: pntaylor (~quassel@ppp121-45-196-59.cbr-trn-nor-bras38.tpg.internode.on.net)
[03:54:18] *** Quits: someuser (~user@41.239.1.177) (Ping timeout: 250 seconds)
[03:59:13] *** Joins: xarcus (640e3546@ircip1.mibbit.com)
[03:59:33] <xarcus> I can't figure out how to install presets.  'Am running Debian 11
[04:01:14] <xarcus> I need to install preset ipod640
[04:01:19] *** Joins: linjie (~linjie@58.247.210.251)
[04:04:39] *** Joins: noarb- (~noarb@user/noarb)
[04:05:24] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 268 seconds)
[04:06:22] *** Quits: linjie (~linjie@58.247.210.251) (Ping timeout: 272 seconds)
[04:08:58] *** MightyBOB is now known as LurkingBOB
[04:18:27] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[04:21:22] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Read error: Connection reset by peer)
[04:29:18] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[04:30:18] *** Quits: der_richter (~Akemi@p4fde4e56.dip0.t-ipconnect.de) (Quit: Leaving.)
[04:36:53] *** Quits: xarcus (640e3546@ircip1.mibbit.com) (Quit: https://mibbit.com Online IRC Client)
[04:36:53] *** Joins: s0beragee (~s0berage@135-23-213-77.cpe.pppoe.ca)
[04:38:40] *** Quits: s0berage (~s0berage@135-23-213-77.cpe.pppoe.ca) (Ping timeout: 252 seconds)
[04:44:54] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[04:49:58] <znf> "preset"?
[04:49:59] <znf> the fuck lol
[05:03:15] *** Quits: beaver (~loop@user/pong) (Remote host closed the connection)
[05:04:55] *** Quits: wyatt8740 (~wyatt8740@149.164.111.64) (Ping timeout: 265 seconds)
[05:04:58] *** Joins: wyatt8750 (~wyatt8740@104.200.142.205)
[05:08:27] *** Joins: beaver (~loop@user/pong)
[05:19:51] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[05:21:15] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Read error: Connection reset by peer)
[05:21:23] *** Quits: Enverex (~Enverex@213.31.254.161) (Quit: Connection closed)
[05:21:36] *** Quits: aeperezt (~Srain@190.141.20.36) (Remote host closed the connection)
[05:21:56] *** Joins: s0berage (~s0berage@135-23-213-77.cpe.pppoe.ca)
[05:23:40] *** Quits: s0beragee (~s0berage@135-23-213-77.cpe.pppoe.ca) (Ping timeout: 258 seconds)
[05:30:25] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:34:05] *** Quits: nitroxis (n@nxs.re) (Quit: nitroxis)
[05:34:44] *** Joins: vlm (~vlm@user/vlm)
[05:35:35] *** Joins: nitroxis (n@nxs.re)
[05:53:56] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[06:07:37] *** Joins: Guest38 (~Guest38@105.235.139.153)
[06:07:44] <Guest38> Hello
[06:08:21] <Guest38> I don't know if I'm posting this is the right place, sorry if not
[06:08:48] <Guest38> Can anyone help me with playing an online mpd source with ffmpeg
[06:09:08] *** Joins: linjie (~linjie@58.247.210.251)
[06:09:15] <Guest38> I keep getting Invalid data found when processing input
[06:09:29] <Guest38> When trying to play an mpd source
[06:09:43] <Guest38> i'm using ubuntu 16.04
[06:09:51] <Guest38> Any ideas why is this happening ?
[06:11:57] *** awoo is now known as Syrup
[06:14:02] *** Quits: linjie (~linjie@58.247.210.251) (Ping timeout: 265 seconds)
[06:16:16] *** Joins: linjie (~linjie@58.247.210.251)
[06:20:42] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[06:21:43] *** Joins: aquijoule_ (~richbridg@213-225-5-235.nat.highway.a1.net)
[06:24:40] *** Quits: richbridger (~richbridg@213-225-12-210.nat.highway.a1.net) (Ping timeout: 265 seconds)
[06:27:31] *** Quits: Media_Thor (~Listen@xplr-208-114-129-8.xplornet.com) ()
[06:29:16] *** Joins: Aaron (~Aaron@097-085-185-009.biz.spectrum.com)
[06:29:30] *** Quits: Guest38 (~Guest38@105.235.139.153) (Quit: Client closed)
[06:30:57] <Aaron> Hi! Does anyone happen to know where I can find any examples about creating a custom IO in FFMPEG source code using an std::istream ?
[06:32:17] <Aaron> Instead of opening a file, I've converted it to a stream and want to read those for creating the FormatContext instead
[06:51:39] <DeHackEd> you can provide your own "file" IO functions. see the avio_reading.c example
[06:55:25] <Aaron> Ahh okay nice, thanks
[06:59:38] *** Quits: linjie (~linjie@58.247.210.251) (Ping timeout: 244 seconds)
[07:03:20] <Aaron> DeHackEd just to make sure, you're saying I can essentially store an audio file into an std::istream data type, reference this example, and it would still read in the frames as if I were opening the regular filename correct?
[07:09:10] <DeHackEd> ffmpeg has its own API for I/O. it even provides an HTTP library and you can just specify "http://www.example.com/something.mp4" as a "filename" and it just works. you can provide your own functions to these APIs if you want to do soemthing custom
[07:10:47] <Aaron> Nice! Thank you !
[07:12:03] <Aaron> So essentially all I really need to focus on is creating the function the read and seek function I feel
[07:15:12] *** Joins: jos1 (~jos3@dyndsl-095-033-175-061.ewe-ip-backbone.de)
[07:17:31] *** Quits: jos2 (~jos3@dyndsl-091-248-048-126.ewe-ip-backbone.de) (Ping timeout: 246 seconds)
[07:20:02] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[07:22:28] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Read error: Connection reset by peer)
[07:30:32] *** Quits: Aaron (~Aaron@097-085-185-009.biz.spectrum.com) (Ping timeout: 250 seconds)
[07:31:36] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[07:43:05] *** Quits: SpeakerTomeat (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[07:43:25] *** Joins: SpeakerTomeat (~Speaker@user/speakertomeat)
[07:43:55] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[08:01:18] *** Quits: pntaylor (~quassel@ppp121-45-196-59.cbr-trn-nor-bras38.tpg.internode.on.net) (Ping timeout: 250 seconds)
[08:02:48] *** Joins: Aaron (~Aaron@097-085-185-009.biz.spectrum.com)
[08:03:13] *** Joins: pntaylor (~quassel@ppp121-45-196-59.cbr-trn-nor-bras38.tpg.internode.on.net)
[08:40:15] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[08:40:25] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[08:42:10] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Read error: Connection reset by peer)
[08:45:08] *** Joins: Vonter (~Vonter@user/vonter)
[08:50:40] *** Quits: Aaron (~Aaron@097-085-185-009.biz.spectrum.com) (Ping timeout: 258 seconds)
[08:51:51] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[08:52:45] *** Joins: poorboy (~poorboy@104.131.46.87)
[08:52:45] *** Quits: poorboy (~poorboy@104.131.46.87) (Excess Flood)
[08:52:59] *** Joins: poorboy (~poorboy@104.131.46.87)
[08:53:00] *** Quits: poorboy (~poorboy@104.131.46.87) (Excess Flood)
[08:53:13] *** Joins: poorboy (~poorboy@104.131.46.87)
[08:53:13] *** Quits: poorboy (~poorboy@104.131.46.87) (Excess Flood)
[08:53:26] *** Joins: poorboy (~poorboy@104.131.46.87)
[08:53:27] *** Quits: poorboy (~poorboy@104.131.46.87) (Excess Flood)
[08:55:10] *** Joins: poorboy (~poorboy@104.131.46.87)
[08:56:25] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Ping timeout: 258 seconds)
[08:57:00] *** Joins: linjie (~linjie@58.247.210.251)
[08:59:16] *** Parts: poorboy (~poorboy@104.131.46.87) ()
[09:19:52] *** Quits: linjie (~linjie@58.247.210.251) (Ping timeout: 272 seconds)
[10:02:33] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 272 seconds)
[10:22:23] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[10:24:47] *** Joins: Vonter (~Vonter@user/vonter)
[10:27:59] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[10:39:13] *** Quits: Asterisk (~asterisk@69.195.134.172) (Ping timeout: 244 seconds)
[10:46:28] *** Joins: Asterisk (~asterisk@69.195.134.172)
[10:54:14] *** Quits: Asterisk (~asterisk@69.195.134.172) (Ping timeout: 272 seconds)
[10:56:29] *** Joins: Asterisk (~asterisk@69.195.134.172)
[11:04:22] *** Quits: Asterisk (~asterisk@69.195.134.172) (Ping timeout: 272 seconds)
[11:05:30] *** Joins: Asterisk (~asterisk@69.195.134.172)
[11:13:27] *** Joins: Aaron (~Aaron@097-085-185-009.biz.spectrum.com)
[11:21:24] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[11:22:57] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Read error: Connection reset by peer)
[11:30:59] *** Joins: Volgaar (~volgaar@104.66.13.93.rev.sfr.net)
[11:35:39] *** Joins: Nact (~l@host-85-27-122-35.dynamic.voo.be)
[11:36:57] *** Joins: Flabb (~Flabb@89.169.84.117)
[12:08:49] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[12:20:03] *** Joins: Blacker47 (~Blacker47@user/blacker47)
[12:31:05] *** Quits: dmang (~dmang@047-032-148-170.res.spectrum.com) (Ping timeout: 258 seconds)
[12:32:18] *** Joins: dmang (~dmang@user/dmang)
[12:32:29] <Aaron> DeHackEd do you happen to know the API provides a cloud library? For example, say I wanted to upload a given file from Dropbox or Google Drive, is that possible?
[12:37:28] *** Quits: dmang (~dmang@user/dmang) (Ping timeout: 272 seconds)
[12:43:54] *** Joins: der_richter (~Akemi@p4fde4e56.dip0.t-ipconnect.de)
[12:45:00] *** Joins: dmang (~dmang@user/dmang)
[12:46:35] *** Joins: linjie (~linjie@58.247.210.251)
[12:51:20] *** Quits: linjie (~linjie@58.247.210.251) (Ping timeout: 265 seconds)
[13:02:02] *** Quits: Nact (~l@host-85-27-122-35.dynamic.voo.be) (Quit: Konversation terminated!)
[13:05:09] *** Joins: mib_2go1oi (2a3c553c@ircip1.mibbit.com)
[13:11:46] *** Quits: mib_2go1oi (2a3c553c@ircip1.mibbit.com) (Quit: https://mibbit.com Online IRC Client)
[13:13:06] *** Quits: Aaron (~Aaron@097-085-185-009.biz.spectrum.com) (Ping timeout: 252 seconds)
[13:23:44] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[13:25:22] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Read error: Connection reset by peer)
[13:30:03] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[13:32:43] *** Joins: Aaron (~Aaron@097-085-185-009.biz.spectrum.com)
[13:36:26] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[14:12:08] *** Quits: Aaron (~Aaron@097-085-185-009.biz.spectrum.com) (Ping timeout: 252 seconds)
[14:24:36] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[14:26:56] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Read error: Connection reset by peer)
[14:32:47] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[15:03:23] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 268 seconds)
[15:20:03] *** Quits: der_richter (~Akemi@p4fde4e56.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[15:20:15] *** Joins: der_richter (~Akemi@p4fde4e56.dip0.t-ipconnect.de)
[15:20:47] *** Joins: Vonter (~Vonter@user/vonter)
[15:26:47] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[15:27:56] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Read error: Connection reset by peer)
[15:28:28] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[15:29:49] *** Joins: blaze (~blaze@user/blaze)
[15:31:03] *** Joins: Vonter (~Vonter@user/vonter)
[15:33:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:42:39] *** Joins: linjie (~linjie@58.247.210.251)
[15:46:58] *** Quits: linjie (~linjie@58.247.210.251) (Ping timeout: 258 seconds)
[15:56:29] *** Joins: blaze1 (~blaze@user/blaze)
[15:56:56] *** Quits: blaze (~blaze@user/blaze) (Ping timeout: 265 seconds)
[16:13:19] *** Joins: flemingjp (~flemingjp@85.210.32.88)
[16:17:33] <flemingjp> https://video.stackexchange.com/a/21971
[16:17:33] <flemingjp> Is it possible to do this in one pass?
[16:28:32] <c_14> Could try ffmpeg -discard nokey -i <video> -bsf setts=PTS/30 out.mp4
[16:30:09] <c_14> note that -discard nokey only works because your gop and your frame-drop interval matches perfectly
[16:39:13] *** Joins: Fohsap (~Muimi@60.20.219.213)
[16:44:46] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[16:49:40] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Read error: Connection reset by peer)
[17:07:30] *** Quits: blaze1 (~blaze@user/blaze) (Ping timeout: 265 seconds)
[17:09:19] *** Quits: nd (~nd@user/nd) (Quit: bye)
[17:10:23] *** Joins: nd (~nd@user/nd)
[17:14:30] *** Joins: blaze1 (~blaze@user/blaze)
[17:22:48] *** blaze1 is now known as blaze
[17:23:28] *** Joins: tlacatlc6 (~tlacatlc6@097-101-132-062.res.spectrum.com)
[17:30:28] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[17:32:20] *** Quits: blaze (~blaze@user/blaze) (Quit: WeeChat 3.0.1)
[17:32:37] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Client Quit)
[17:33:19] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[17:35:15] *** Joins: x256 (~mh@dynamic-095-112-079-074.95.112.pool.telefonica.de)
[17:44:19] <x256> Hey. I'm processing live-streams I do not know the resolution of fps in advance. I can limit maximum resolution and framerate just fine, but if the video is smaller than expected, the configured target output bitrate is too high. Is there a way to change the targeted bitrate at runtime, or calculate it dynamically based on w/h variables?
[17:45:53] <furq> if you just want a maximum bitrate then crf and maxrate/bufsize
[17:50:13] <x256> I already do that, but vbr with no minimal bitrate and target and maximum bitrate both equal. The system has 'video profiles' the user can select. But if the user selects a 1080p60 profile, but only sends 720p30, then the target bitrate is way to high. Not a showstopper, but I'd like to set the bitrate based on resolution, and not loose the start of the stream for a separate ffprobe call.
[17:52:28] <BtbN> You will need external scripting for that kind of logic
[17:53:23] <BtbN> Most encoders don't have a minrate though
[17:53:36] <BtbN> so if you set a crf with maxrate, it'll automatically dip down if the resolution is low enough
[17:56:58] <x256> Hmm. The target is h264+aac as DASH. I do want to set a maximum bitrate to avoid extreme spikes that cause buffering. And I noticed that I have to set a target bitrate also, so the DASH manifest contains a value and the player can select the best from several streams (abr). Not setting minrate produces great results (saving a ton of bandwith for low complexity streams).
[17:57:31] <furq> minrate wouldn't make any difference there but x264 doesn't have it anyway
[17:58:38] <furq> and the bandwidth savings there will be pretty minimal unless the stream is so low complexity that x264 literally can't figure out how to allocate any more bits to it
[18:00:03] <x256> Yes, most content is a static images with a small webcam in the top left corner (teaching). Constant bitrate would be too wastefull. Constant quality with maximum bitrate and small buffer size seems to work smoothly.
[18:06:45] <x256> The tricky part is to select the correct maximum bitrate for the incoming stream, without knowing the resolution up front. Currently I force users to tell me with an RTMP url parameter. If they chooses the 720p30 profile, I limit resolution to that size with the scale-filter and set 2000k as -b and -maxrate. A 1080p60 stream gets 4500k maximum. They stay way below that most of the time anyway, but having a maximum is important
[18:06:45] <x256> or ABR would not really work anymore.
[18:07:36] <x256> The user-controlled profiles work for now. I was just hoping for an easy way to set the target bitrate after the probing phase, dynamically, somehow.
[18:09:36] <BtbN> I don't think anything ever cares about that
[18:09:45] <BtbN> Just don't upscale, and have a set bitrate for each quality level
[18:10:17] *** Joins: taliho (~taliho@c-73-149-98-40.hsd1.ma.comcast.net)
[18:10:26] <x256> Perhaps I'm overthinking this, yes.
[18:13:39] <furq> kind of annoying there's no way to just set the dash manifest bandwidth values yourself
[18:14:13] <furq> or use maxrate if it's set, although that's not part of AVCodecParameters
[18:15:28] *** Joins: Nact (~l@host-85-27-125-155.dynamic.voo.be)
[18:17:34] <x256> You can somewhat dodge this by setting -b and -maxrate, but not -minrate. In my tests, setting -b in constant quality mode makes no difference if -maxrate is also set.
[18:18:00] <x256> But the only reason I do that is to get a value in the dash manifest.
[18:19:27] <furq> right but if you want to save bandwidth it would be a lot better to use crf and maxrate
[18:19:47] <furq> but then there's no bandwidth value for the manifest
[18:22:55] <x256> With `-crf 23 -b 2000k -maxrate 2000k` I do get CRF mode, and still a value in the manifest. It's a bit unintuitive, but it works.
[18:23:12] <furq> that's just overriding crf with b though
[18:24:11] <x256> Not for libx264. -b is ignored in that case. It#s just used later by the dash muxer
[18:24:16] <furq> oh wait you're right
[18:24:20] <furq> weird
[18:24:24] <furq> i thought whichever came last took precedence
[18:24:35] <x256> Yes, took me a while to figure that out
[18:24:37] <furq> well i guess that'll work
[18:24:40] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[18:24:56] *** Quits: Flabb (~Flabb@89.169.84.117) (Remote host closed the connection)
[18:26:45] <x256> With a -bufsize approximately half the size of a segment, I get a really nice bandwidth profile, even for streams that switch between simple and complex scenes. The -maxrate is (almost) always kept and the minimum rate is really low during still image scenes. As low as 20k
[18:27:52] <furq> hopefully dash doesn't have any equivalent of the hls AVERAGE-BANDWIDTH stuff that would make that break on apple devices
[18:29:10] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Ping timeout: 252 seconds)
[18:30:14] *** Joins: someuser (~user@41.239.1.177)
[18:31:05] <x256> I'll need to increase the bufsize though, I think. I get a pulsing effect at segment/iframe borders. Quality visibly decreases after an iframe and improves slowly. I guess the second that contains the iframe gets downgraded because the iframe is so big.
[18:31:33] *** Joins: BaD_CrC (~BaD_CrC@d-208-90-141-173.md.cpe.atlanticbb.net)
[18:31:47] <furq> i don't think there's any reason to have it less than a full dash segment
[18:32:05] <furq> unless you're actually targeting cbr
[18:32:14] <x256> Playback stability depends heavily on the player implementation and its quirks. They all do that in JS nowadays. Native playback of HLS never really worked well in my experience.
[18:32:42] <furq> i've had reasonable luck with hls but i never had to deploy it at scale
[18:33:01] <BtbN> x256, minrate does literally nothing
[18:33:03] <furq> the ffmpeg dash stuff seems mature enough now that i'd just use that
[18:33:10] <BtbN> I don't think any encoder even touches that option
[18:33:19] <BtbN> At least none you would commonly use
[18:33:27] <furq> a few do
[18:33:31] <furq> none that browsers support do
[18:34:28] <x256> I have segment size and gop of 2 seconds (2*fps). If the buffer has the same size, I geht segments tahat are significantly larger than allowed at scene-borders that confused video.js. Perhaps Shaka is better. Smaller buffers help, but have a negative effect on overall quality. It's a trade-of.
[18:35:14] <x256> Switched from HSL to dash because dash works well with Shaka player and it's all JS anyway. No need for native support in the browser.
[18:35:42] <furq> two seconds is pretty short unless you're trying to get low latency
[18:35:49] <furq> or lowish
[18:36:06] <x256> I'm targeting a delay of 8-12 seconds max. It's live, not VoD.
[18:36:27] <furq> fair enough then
[18:36:35] <x256> The teacher wants to get feedback in chat.
[18:38:59] *** Joins: linjie (~linjie@58.247.210.251)
[18:39:44] <BtbN> Just use some Web-Conferencing software?
[18:39:55] <BtbN> Something home-cooked like that is unlikely to be able to compete with the likes of those
[18:41:33] <x256> A bit off-topic, but we do have a large BBB cluster. Some lectures have 300+ participants, though. There are also large conferences or public keynotes that can not easily be handled with web conferencing. Scaleable live-streaming is an additional offering for these scenarios.
[18:43:32] *** Quits: linjie (~linjie@58.247.210.251) (Ping timeout: 272 seconds)
[19:00:06] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[19:01:41] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:09:30] *** Quits: flemingjp (~flemingjp@85.210.32.88) (Ping timeout: 252 seconds)
[19:09:48] *** Joins: flemingjp (~flemingjp@213.205.196.220)
[19:21:46] *** Quits: flemingjp (~flemingjp@213.205.196.220) (Read error: Connection reset by peer)
[19:22:42] *** Joins: flemingjp (~flemingjp@85.210.32.88)
[19:25:08] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[19:27:04] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Read error: Connection reset by peer)
[19:44:32] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Quit: leaving)
[19:53:00] *** Quits: BaD_CrC (~BaD_CrC@d-208-90-141-173.md.cpe.atlanticbb.net) (Quit: Client closed)
[19:53:32] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[19:54:11] *** Quits: Nact (~l@host-85-27-125-155.dynamic.voo.be) (Quit: Konversation terminated!)
[19:56:40] *** Quits: Fohsap (~Muimi@60.20.219.213) (Read error: Connection reset by peer)
[19:57:38] *** Joins: s0beragee (~s0berage@135-23-213-77.cpe.pppoe.ca)
[19:58:53] *** Quits: s0beragee (~s0berage@135-23-213-77.cpe.pppoe.ca) (Read error: Connection reset by peer)
[20:00:12] *** Quits: s0berage (~s0berage@135-23-213-77.cpe.pppoe.ca) (Ping timeout: 250 seconds)
[20:27:25] *** Joins: Flabb (~Flabb@89.169.84.117)
[20:46:34] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:47:56] *** Joins: stevenliu (~stevenliu@ffmpeg/developer/stevenliu)
[20:50:07] *** Joins: arcatech (~arcatech@user/arcatech)
[20:52:10] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[20:53:42] *** Quits: flemingjp (~flemingjp@85.210.32.88) (Ping timeout: 265 seconds)
[20:54:37] *** Joins: flemingjp (~flemingjp@213.205.196.220)
[20:55:06] *** Quits: stevenliu (~stevenliu@ffmpeg/developer/stevenliu) (Read error: Connection reset by peer)
[21:02:05] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:52:32] *** Quits: Maple (~Maple@user/maple) (Read error: Connection reset by peer)
[21:55:39] <x256> Interesting, with libx264, -crf, -maxrate and a very small -bufsize (just 10% of -maxrate) I get a very visible pulsing effect, a quality drop after each (forced) i-frame. I guess that the i-frame eats up so much of the buffer that it throws off the estimates, forcing the -crv algorithm to drastically reduce quality to still meet -maxrate quotas.
[21:57:39] <furq> i'd expect the same thing to happen with -b
[22:03:23] <x256> I tested this with various buffer sizes and a video that has extreme jumps in it (still image, rapid movement, still image again). A buffer half the maximum segment size seems to be good (on second buffer, 2 seconds segment size). No visible pulsing, but a maximum 'overshoot' of 17%.
[22:04:12] <x256> With half-second buffers there was some hint of pulsing for complex still images. With 100ms buffers the pulsing was so string that the result was unusable :)
[22:10:00] *** Joins: Maple (~Maple@user/maple)
[22:15:24] *** Joins: jkwnki (~jkwnki@p4fedb926.dip0.t-ipconnect.de)
[22:19:04] *** Quits: Flabb (~Flabb@89.169.84.117) (Read error: Connection reset by peer)
[22:19:36] *** Joins: Flabb (~Flabb@89.169.84.117)
[22:22:34] *** Quits: beaver (~loop@user/pong) (Ping timeout: 244 seconds)
[22:25:45] *** Joins: Buster_ (~Buster@buster-net.ru)
[22:41:40] *** Quits: flemingjp (~flemingjp@213.205.196.220) (Read error: Connection reset by peer)
[22:42:19] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[22:42:46] *** Quits: gothicserpent (~gothicser@static-198-54-129-76.cust.tzulo.com) (Quit: Leaving)
[22:51:36] *** Joins: Aaron (~Aaron@097-085-185-009.biz.spectrum.com)
[22:58:58] *** Joins: beaver (~loop@user/pong)
[23:05:05] *** Joins: iive (~iive@87.119.101.204.client.entry.bg)
[23:07:06] <Aaron> Does anyone happen to know how I could open an audio file as a stream in C++? I am attempting to run an FFMPEG filter on the audio stream
[23:07:51] <BtbN> Define "open as a stream"
[23:08:09] <BtbN> FFmpeg comes with various examples on how to demux and decode audio files
[23:09:18] <Aaron> So rather than opening an audio file in C++ as a FILE with fopen(), I want to just store it in memory as just a stream of bytes
[23:10:18] <BtbN> Might have to write your own avio handlers for reading an encoded and muxed in-memory file
[23:12:05] <x256> Googling quickly leads to https://stackoverflow.com/questions/19785254/play-a-video-from-memorystream-using-ffmpeg
[23:14:03] <Aaron> https://www.codeproject.com/Tips/489450/Creating-Custom-FFmpeg-IO-Context I've been using this post as a reference for creating the custom IO Context, but here they used an IStream interface, my question is just how would I open say "C://User/input.wav as some stream type then?
[23:14:18] <DeHackEd> what was wrong with the example I showed you the other day?
[23:16:28] <x256> If there is an actual file, why would you want to read that into memory first, instead of just opening it and passing the file handle as usual?
[23:16:29] <Aaron> So in reference to what I've pretty much been doing all summer, I'm passing in information from C# to C++ and back. I want to avoid passing the filename, rather I would just want to open the file as some stream type in C++ and then pass the stream of bytes back to C#
[23:16:50] <Aaron> x256 that's what I'm trying to avoid
[23:17:20] <Aaron> I want to just read it in as memory as a stream of bytes, that's just what I'm confused on
[23:17:51] <BtbN> I also still don't know what you mean by "memory stream"
[23:18:07] <BtbN> What you describe sounds like just a regular buffer to me
[23:18:19] <x256> The word 'stream' implies that the file content is not in memory completely, only parts of it.
[23:19:27] <Aaron> My apologies for the confusion, then lets say I just want to open an audio file as a buffer and not as a FILE type, how would I do that?
[23:19:54] <BtbN> exactly the way multiple people described
[23:20:13] <BtbN> It's important that your input is seekable. A lot of formats heavily depend on that
[23:20:31] <BtbN> So you need to read the entire file into memory, and then emulate a file access API on it, and make it available as avio implementation
[23:20:43] <BtbN> Why you would want to do that if it's a plain old file to begin with is beyond me though
[23:22:41] <x256> I'd just go with temporary files and be done with it. If they are small, they are probably still in memory cachees when read by the second process. If they are large, you do not want to have them in-memory anyway.
[23:24:23] <Aaron> I think I understand now what to do. Thank you to the both of you BtbN x256
[23:27:25] <Aaron> I really just need to store the contents of the audio file in memory and make a function that is seek able for when using avio_alloc_context()
[23:28:27] <Aaron> And to store, it I can just create some buffer type and determine its size based on audio file
[23:30:03] <BtbN> But why?
[23:30:10] <BtbN> From what I understand, you have a plain file to begin with
[23:30:16] <BtbN> Just using that would be a lot less painful
[23:30:41] <Aaron> yes, but the thing is, I'm working on a project that will invoke importing audio files from cloud storage
[23:31:15] <BtbN> Then pass the http link?
[23:31:33] <Aaron> When I tried that it didn't work
[23:31:44] <DeHackEd> that's what I'm doing. you can absolutely do "ffmpeg -i http://...../file.mp4"
[23:32:24] <furq> depends on what you mean by cloud storage really
[23:33:04] <furq> not asking for more details just pointing out why that might not work
[23:33:25] <BtbN> Pretty much every "Cloud" is just HTTP Server
[23:33:28] <BtbN> +s
[23:33:50] <Aaron> https://drive.google.com/file/d/1sA7qSbFaRd-h5mmlrKCQ7ZOhrCvwS6MW/view
[23:33:55] <Aaron> So a file like this
[23:34:11] <furq> yeah but i assume the C# stuff is doing auth or even worse browser emulation stuff
[23:34:15] <Aaron> when I tried, avformat_open_input(&fmt_ctx, "https://drive.google.com/file/d/1sA7qSbFaRd-h5mmlrKCQ7ZOhrCvwS6MW/view", NULL, NULL)) < 0)
[23:34:25] <Aaron> It returned Could Not Open Input
[23:34:27] <furq> oh right
[23:34:27] <BtbN> You need a proper link to the file
[23:34:31] <furq> yeah that's not going to work that's html
[23:34:33] <BtbN> not some website where you then need to hit download
[23:35:06] <x256> That's not a sound file, that is a web page with a javascript based audio player that laods a sound file.
[23:35:10] <BtbN> You must be already solving that problem in your C++ code to download it yourself, so just pass the final link, instead of downloading it yourself
[23:35:29] <furq> open network panel press play
[23:35:33] <furq> that's the url you actually need
[23:35:45] <furq> presumably there's a programmatic way to get that
[23:38:22] <x256> The actual download link would look like this: https://drive.google.com/uc?export=download&id=1sA7qSbFaRd-h5mmlrKCQ7ZOhrCvwS6MW
[23:38:27] <x256> ffplay can play that just fine
[23:39:59] <furq> that's easy to generate and also looks like a real gdrive endpoint that google won't change on a whim
[23:40:02] <furq> so yeah do that
[23:40:14] <BtbN> You must be already doing that
[23:40:21] <BtbN> how else do you manage to download the file in C++
[23:40:29] <furq> he's downloading it in C# i think
[23:40:33] <BtbN> Yes, so?
[23:40:38] <furq> so probably through some gdrive api that hides all these details
[23:40:40] <BtbN> Still means the problem of getting the correct link was solved
[23:41:00] <x256> Probably using a library that allows downloading files from gdrive, but does not provide access to the download link directly.
[23:43:25] <Aaron> Yeah, that's why I'm just trying to convert it into a buffer
[23:44:11] <Aaron> And I was testing a normal file locally to see how to do it
[23:44:25] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Quit: nurupo.ga)
[23:44:28] <x256> The export link also only works if the file is public. For shared private files, using a library that knows how to autenticate against gdrive would be the only option I guess. I'd still go the temp-file route. That's more robust.
[23:44:33] <Aaron> I just did want to use FILE * file = fopen("audio.wav");
[23:44:58] <Aaron> But I understand what you're saying
[23:45:28] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[23:46:09] <furq> if it's always going to be short wav files i'd prefer to keep it all in memory
[23:46:09] *** Quits: Flabb (~Flabb@89.169.84.117) (Quit: Leaving)
[23:46:23] <furq> but obviously if you can skip passing it around at all then that's ideal
[23:51:42] <x256> On linux you cloud just create the file in /dev/shm, unlink it immediately, and pass the file pointer. The file would never touch a hard disk and as soon as the file pointer is closed or the process terminates, the file is gone. But Windows? No idea.
[23:52:00] <furq> he did say C#
[23:53:05] <Aaron> Yeah what I'm working on is pretty complex and I really do appreciate all of the help. It's pretty confusing to me as well but I'm confident I'll be able to get it working in the way that I vision
