[00:00:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:00:46] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[00:01:36] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[00:01:57] *** Quits: froggyc (~froggy@2.235.241.212) (Ping timeout: 240 seconds)
[00:02:10] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:02:15] *** Quits: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de) (Quit: Konversation terminated!)
[00:04:38] *** Joins: Viewday112 (~Viewday@user/viewday)
[00:04:55] <Alipha> john99: it's "polymorphism" btw
[00:05:27] <john99> ummm, in spanish we dont have y between
[00:05:38] <john99> but yeah, Polymorphism
[00:05:48] <john99> (and not ph)
[00:06:12] <john99> i wass to exciting for change the language XD
[00:06:30] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[00:06:31] *** Viewday112 is now known as Viewday11
[00:08:40] *** Joins: froggyc (~froggy@2.235.241.212)
[00:11:13] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:bcc0:c482:6957:eca1)
[00:14:36] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[00:16:09] *** Joins: badone (~badone@209.132.189.152)
[00:18:17] *** Quits: froggyc (~froggy@2.235.241.212) (Ping timeout: 240 seconds)
[00:20:01] *** Joins: froggyc (~froggy@2.235.241.212)
[00:22:17] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 240 seconds)
[00:22:22] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 256 seconds)
[00:24:00] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:25:12] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 256 seconds)
[00:28:45] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[00:29:00] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[00:29:47] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[00:30:28] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[00:32:47] *** Joins: Viewday113 (~Viewday@user/viewday)
[00:33:29] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:34:13] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:34:13] *** Viewday113 is now known as Viewday11
[00:34:17] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:45:20] *** Joins: jplejacq (~jplejacq@24.224.100.40)
[00:46:44] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[00:46:52] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[00:47:38] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[00:48:23] *** Joins: PJBoy (~PJBoy@host31-48-117-179.range31-48.btcentralplus.com)
[00:48:23] *** Quits: PJBoy (~PJBoy@host31-48-117-179.range31-48.btcentralplus.com) (Changing host)
[00:48:23] *** Joins: PJBoy (~PJBoy@user/pjboy)
[00:49:07] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[00:49:14] *** Joins: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[00:51:28] *** Joins: Tokamak (~Tokamak@172.58.188.12)
[01:05:13] *** Joins: Viewday115 (~Viewday@user/viewday)
[01:05:34] *** Joins: CaCode (~CaCode@user/cacode)
[01:07:08] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:07:09] *** Viewday115 is now known as Viewday11
[01:09:40] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[01:10:08] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[01:11:16] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:11:38] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[01:11:55] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:16:46] *** Joins: stonkey (~stonkey@user/stonkey)
[01:24:14] *** Quits: furrymcgee (~devuan@cgn-89-1-208-9.nc.de) (Quit: leaving)
[01:24:49] *** Quits: magla (~gelignite@55d4a813.access.ecotel.net) (Quit: Stay safe!)
[01:30:09] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:30:25] *** Joins: ldlework (~hexeme@user/hexeme)
[01:30:33] <ldlework> Why do I have to #include <vector> if I'm using namespace std?
[01:31:18] <Franciman> anybody trying modules?
[01:31:20] <PJBoy> you need to have something that declares the std namespace to begin with
[01:31:47] <PJBoy> like if I just wrote `using namespace pj;` out of nowhere, the compiler will tell me to go away
[01:32:16] <PJBoy> vector declares namespace std, as do all the other C++ headers
[01:32:25] <ldlework> why isn't it required for string?
[01:32:32] <Alipha> `using namespace std;` just means you can write `foo` instead of `std::foo`. it doesn't "load all of namespace std" or anything like that.
[01:33:59] <Alipha> if you're using std::string, you need `#include <string>`. sometimes headers include things from other headers. for instance, often #including <iostream> will also end up giving you std::string, BUT YOU CANNOT RELY ON THIS. having <iostream> define std::string is not guaranteed by the standard
[01:34:49] <ldlework> Ah ha, it's transiently included. I see. Thank you both.
[01:35:08] <Franciman> yes #include is hell sometimes :P
[01:35:22] <Franciman> we waited ~25 years to get modules in C++
[01:35:42] <PJBoy> hopefully `import std;` will get into C++23
[01:35:49] <Franciman> T.T
[01:36:02] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[01:36:23] <PJBoy> `import std.core;` et al are in MSVC at least
[01:36:28] *** Joins: Viewday114 (~Viewday@user/viewday)
[01:36:49] <Franciman> i wonder why modules were so hard
[01:36:58] <PJBoy> gcc could potentially allow `import <bits/stdc++.h>;` or whatever that header's called
[01:37:24] <ldlework> If transients are pulled in, couldn't you just make a little stdlib for your own project?
[01:37:32] <ldlework> A header that pulled in all the stuff you want everyhwere?
[01:37:39] <Franciman> sure
[01:37:43] * ldlework nods.
[01:37:46] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:499c:186d:f10d:6a24) (Ping timeout: 260 seconds)
[01:38:14] *** Joins: sh00p (~sh00p@2001:9b1:41e9:e800:dfc6:b074:1f6f:9b73)
[01:38:18] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:38:19] *** Viewday114 is now known as Viewday11
[01:38:41] <ldlework> I am trying to learn how to extend the mupen64 emulator, and for the last several days I have been doing so in C90 (new to C too), but in the like 2 hours since I realized I can extend it with C++, all I've been doing is deleting code lol.
[01:39:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:59] *** ChanServ sets mode: +v npaperbot
[01:40:02] <PJBoy> I love hearing that
[01:40:23] <PJBoy> both the fact that it's mupen64 and the fact that you're deleting code
[01:40:36] <PJBoy> nothing more satisfying that deleting code IMO
[01:40:40] <PJBoy> *than
[01:41:01] *** Quits: Tokamak (~Tokamak@172.58.188.12) (Read error: Connection reset by peer)
[01:41:30] *** Joins: Tokamak (~Tokamak@172.58.188.12)
[01:44:43] *** Quits: rgrinberg (~textual@2806:101e:1:83af:8095:9213:668b:97a8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:44:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 260 seconds)
[01:52:22] <ldlework> Is this an OK way to optionally read a file? https://gist.github.com/dustinlacewell/d2768f466e75ac48f167721789f1937e
[01:52:27] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f197:203e:92f7:a4c2)
[01:52:27] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f197:203e:92f7:a4c2) (Changing host)
[01:52:27] *** Joins: skapata (~Skapata@user/skapata)
[01:52:51] *** Quits: CaCode (~CaCode@user/cacode) (Remote host closed the connection)
[01:54:13] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:54:26] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[01:55:03] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[01:55:23] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[01:55:37] <PJBoy> that's ok, yeah
[01:57:07] <PJBoy> better than a lot of file reading code I've seen actually
[01:58:28] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:58:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 240 seconds)
[01:59:33] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 276 seconds)
[02:03:08] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:bcc0:c482:6957:eca1) (Ping timeout: 252 seconds)
[02:04:36] *** Joins: Viewday115 (~Viewday@user/viewday)
[02:06:06] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[02:06:07] *** Viewday115 is now known as Viewday11
[02:07:03] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:09:59] *** Quits: Tokamak (~Tokamak@172.58.188.12) (Ping timeout: 268 seconds)
[02:11:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[02:11:37] *** Joins: Tokamak (~Tokamak@172.58.188.12)
[02:12:18] *** Joins: rgrinberg (~textual@187.223.144.204)
[02:14:34] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 256 seconds)
[02:16:10] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 268 seconds)
[02:17:09] <Franciman> uhm is there a way to have the range for (i.e. for (auto &x : vec) ) use the reverse iterators?
[02:17:09] *** Joins: Tokamak_ (~Tokamak@166.205.152.67)
[02:17:58] *** Quits: Tokamak (~Tokamak@172.58.188.12) (Ping timeout: 256 seconds)
[02:18:48] *** Joins: Viewday114 (~Viewday@user/viewday)
[02:20:05] <kalven> not out of the box, but it's not too much work to write a little helper like for (auto &x : reverse(vec)) that hands out reverse iterators
[02:20:14] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[02:20:15] *** Viewday114 is now known as Viewday11
[02:20:28] <Franciman> thanks
[02:21:23] <Eelis> { string s = "bla"; for (char & c : s | views::reverse) cout << c; }
[02:21:23] <geordi> alb
[02:21:53] <kalven> Franciman: oh, if you're on c++20. forget what I said and look at what Eelis wrote
[02:22:00] <Franciman> :O
[02:22:05] <Franciman> awesome T.T
[02:22:08] <Franciman> ty
[02:22:30] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 256 seconds)
[02:23:42] *** Joins: rgrinberg (~textual@187.223.248.37)
[02:28:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[02:29:34] <Franciman> lol clangd can't parse the g++ ranges library
[02:29:37] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 240 seconds)
[02:30:55] <PJBoy> huh, this was easier to write than I thought
[02:31:01] <PJBoy> { string s = "bla"; string rev = make_from_range<string>(views::reverse(s)); SHOW(rev); } template<typename T> T make_from_range(auto range) { return make_from_tuple<T>(ranges::subrange(range)); }
[02:31:02] <geordi> rev = alb
[02:31:33] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:32:43] <Franciman> ranges are very cool
[02:33:46] *** Quits: pizdets_ (~pizdets@183.182.110.80) (Ping timeout: 260 seconds)
[02:34:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 268 seconds)
[02:34:07] *** Joins: pizdets (~pizdets@183.182.110.174)
[02:35:26] <Eelis> geordi, replace make_from_tuple<T>(ranges::subrange(range)) with T(begin(range), end(range))
[02:35:27] <geordi> rev = alb
[02:35:37] *** Joins: Viewday113 (~Viewday@user/viewday)
[02:35:48] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[02:36:05] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[02:36:27] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:36:37] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[02:36:55] <PJBoy> fair hahaha
[02:37:08] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[02:37:08] *** Viewday113 is now known as Viewday11
[02:41:16] *** Joins: rgrinberg (~textual@187.223.248.37)
[02:45:32] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[02:46:17] *** Joins: ferdna (~ferdna@user/ferdna)
[02:46:18] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 256 seconds)
[02:47:35] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[02:49:15] *** Joins: Viewday116 (~Viewday@user/viewday)
[02:49:50] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[02:50:06] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 260 seconds)
[02:50:47] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[02:50:48] *** Viewday116 is now known as Viewday11
[02:52:32] *** Quits: DWD (~daniel@user/dwd) (Ping timeout: 256 seconds)
[02:52:44] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[02:53:14] *** Joins: Colt (~Colt@user/colt)
[02:53:24] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[02:54:32] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:59:06] *** Joins: rgrinberg (~textual@187.223.144.204)
[02:59:24] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[02:59:50] *** Joins: Colt (~Colt@user/colt)
[03:07:59] *** Joins: cemguresci (~cemguresc@2001:a61:1181:6d01:e8fa:d8ff:5231:22a5)
[03:08:17] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 240 seconds)
[03:12:39] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:15:21] *** Quits: Tokamak_ (~Tokamak@166.205.152.67) (Ping timeout: 268 seconds)
[03:16:24] *** Quits: cemguresci (~cemguresc@2001:a61:1181:6d01:e8fa:d8ff:5231:22a5) (Quit: Leaving)
[03:18:49] *** Joins: Tokamak (~Tokamak@166.205.152.67)
[03:19:44] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[03:20:52] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[03:21:45] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[03:23:22] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Client Quit)
[03:24:02] *** Quits: Tokamak (~Tokamak@166.205.152.67) (Read error: Connection reset by peer)
[03:24:26] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[03:24:34] *** Joins: Tokamak (~Tokamak@166.205.152.67)
[03:27:57] *** Quits: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac) (Ping timeout: 240 seconds)
[03:29:28] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[03:30:07] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Remote host closed the connection)
[03:30:20] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[03:38:26] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[03:38:49] *** Joins: Viewday11 (~Viewday@user/viewday)
[03:40:08] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[03:45:35] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 268 seconds)
[03:47:48] *** peeps is now known as peeps[zen]
[03:52:17] *** Joins: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac)
[04:01:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:e0f7:dc28:dd0d:f0d5) (Ping timeout: 240 seconds)
[04:03:04] <manuels> does unordered_multimap<int,tuple<int,int>>::emplace make sense to be called with a forward_as_tuple?
[04:03:24] <manuels> i mean it _is_ a tuple
[04:03:37] *** Quits: Tokamak (~Tokamak@166.205.152.67) (Ping timeout: 240 seconds)
[04:03:49] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[04:04:28] <manuels> *of ints
[04:04:46] *** Joins: Viewday116 (~Viewday@user/viewday)
[04:04:56] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[04:05:10] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[04:05:10] *** Viewday116 is now known as Viewday11
[04:05:23] *** Joins: Tokamak (~Tokamak@172.58.188.110)
[04:05:27] <manuels> in this case it does not matter if I construct in place or pass rvals using forward_as_tuple, right?
[04:08:26] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[04:09:16] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:15:47] *** Quits: Tokamak (~Tokamak@172.58.188.110) (Ping timeout: 268 seconds)
[04:16:33] *** Joins: Tokamak_ (~Tokamak@166.205.152.1)
[04:25:19] *** Joins: Jantz (~IceChat95@118-93-131-79.dsl.dyn.ihug.co.nz)
[04:25:57] *** Quits: Jantz (~IceChat95@118-93-131-79.dsl.dyn.ihug.co.nz) (Excess Flood)
[04:26:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:28:40] <ldlework> I am trying to add a bit of C++ to a C project and basically losing my sanity
[04:33:51] *** Joins: Viewday118 (~Viewday@user/viewday)
[04:34:15] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[04:34:15] *** Viewday118 is now known as Viewday11
[04:34:37] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[04:36:08] *** Quits: sh00p (~sh00p@2001:9b1:41e9:e800:dfc6:b074:1f6f:9b73) (Ping timeout: 268 seconds)
[04:39:15] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:43:11] *** Joins: NEYi (~NEYi@109.251.216.38)
[04:44:33] *** Joins: Viewday112 (~Viewday@user/viewday)
[04:44:50] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[04:45:25] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[04:46:26] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[04:46:27] *** Viewday112 is now known as Viewday11
[04:49:42] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 268 seconds)
[04:51:14] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6da5:b4a4:e0e4:a76e)
[05:04:23] *** Quits: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac) (Quit: Leaving)
[05:09:19] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[05:09:38] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[05:18:54] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[05:23:44] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:28:40] *** Quits: shailangsa_ (~shailangs@host109-159-108-207.range109-159.btcentralplus.com) ()
[05:30:04] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:31:32] *** Joins: sh00p (~sh00p@2001:9b1:41e9:e800:dfc6:b074:1f6f:9b73)
[05:33:07] *** Joins: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[05:33:08] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[05:36:48] *** Joins: Viewday116 (~Viewday@user/viewday)
[05:38:34] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[05:38:35] *** Viewday116 is now known as Viewday11
[05:39:42] *** Quits: AmR (~AmREiSa@156.199.5.112) (Ping timeout: 256 seconds)
[05:39:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:59] *** ChanServ sets mode: +v npaperbot
[05:42:04] *** Joins: rajkosto (~rajkosto@178.220.166.14)
[05:42:06] *** Quits: rajkosto (~rajkosto@178.220.166.14) (Client Quit)
[05:42:33] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[05:42:46] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[05:43:18] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[05:43:42] *** Quits: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Ping timeout: 260 seconds)
[05:44:23] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[05:49:25] *** Quits: sh00p (~sh00p@2001:9b1:41e9:e800:dfc6:b074:1f6f:9b73) (Ping timeout: 240 seconds)
[05:52:09] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community https://indiedevs.net/)
[05:53:22] *** Joins: CaCode (~CaCode@user/cacode)
[05:54:57] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6da5:b4a4:e0e4:a76e) (Ping timeout: 240 seconds)
[05:55:06] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:57:06] *** Quits: calm-steam (~calm-stea@user/calm-steam) (Remote host closed the connection)
[05:57:17] *** Quits: jplejacq (~jplejacq@24.224.100.40) (Ping timeout: 240 seconds)
[05:57:25] *** Joins: calm-steam (~calm-stea@user/calm-steam)
[05:57:54] *** Joins: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs)
[05:59:25] *** Quits: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs) (Client Quit)
[05:59:35] *** Joins: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs)
[06:03:21] *** Quits: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs) (Client Quit)
[06:03:34] *** Joins: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs)
[06:04:14] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[06:04:57] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 268 seconds)
[06:05:32] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 240 seconds)
[06:06:52] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[06:08:23] *** Quits: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs) (Read error: Connection reset by peer)
[06:09:03] *** Quits: Pook (~Pook@2001:8a0:f996:1400:ec96:5741:29f5:3f05) (Quit: Leaving)
[06:09:07] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:10:15] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[06:10:53] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[06:11:45] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[06:15:39] *** Joins: CaCode_ (~CaCode@user/cacode)
[06:17:06] *** Joins: CaCode- (~CaCode@user/cacode)
[06:17:57] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[06:19:57] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[06:20:00] *** Joins: AmR (~AmREiSa@156.199.236.68)
[06:29:01] *** Joins: Viewday112 (~Viewday@user/viewday)
[06:30:42] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[06:30:43] *** Viewday112 is now known as Viewday11
[06:33:36] *** Joins: netpipe (~netpipe@user/netpipe)
[06:33:57] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[06:36:32] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[06:38:08] *** Joins: Rayke (rayke@user/rayke)
[06:38:31] *** Quits: Rayke (rayke@user/rayke) (Client Quit)
[06:38:56] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[06:39:57] *** Joins: Rayke (rayke@user/rayke)
[06:40:41] *** Quits: netpipe (~netpipe@user/netpipe) (Quit: Client closed)
[06:43:02] *** Quits: Rayke (rayke@user/rayke) (Client Quit)
[06:43:22] *** Joins: Rayke (rayke@user/rayke)
[06:56:14] *** Joins: msk (~msk@103.213.213.70)
[06:56:47] *** Joins: Viewday113 (~Viewday@user/viewday)
[06:58:09] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[06:58:10] *** Viewday113 is now known as Viewday11
[07:04:21] <Gamah> so do i use cmake, or is there something more common/modern?
[07:04:26] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:05:39] *** Joins: Viewday116 (~Viewday@user/viewday)
[07:05:43] *** Quits: msk (~msk@103.213.213.70) (Remote host closed the connection)
[07:07:32] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[07:07:33] *** Viewday116 is now known as Viewday11
[07:09:12] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[07:11:48] <hnOsmium0001[m]> cmake is the most common buildsystem out there, but modernness is a very hot debate topic
[07:12:22] <hnOsmium0001[m]> regardless of your opinion, learning cmake can never go wrong, because so many projects use cmake you are bound to need it at some point
[07:12:33] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[07:12:53] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[07:16:15] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:16:39] <Rayke> I now use cmake for everything. Linux and Windows win32 projects. For Windows it is much better than visual studio solution files.
[07:18:16] <Rayke> Plus it means I can use CLion or Visual Studio Code on every platform for my C++.
[07:18:41] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:31:24] *** Joins: Viewday116 (~Viewday@user/viewday)
[07:31:43] *** Quits: froggyc (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[07:32:50] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[07:32:50] *** Viewday116 is now known as Viewday11
[07:33:29] *** Joins: froggyc (~froggy@2.235.241.212)
[07:37:18] <ldlework> if utils.cpp and events.cpp both include sapi.hpp which defines ScriptMeta class, does it get defined twice?
[07:37:52] <ldlework> I'm getting a strange error
[07:37:54] <ldlework> a value of type "ScriptMeta *" cannot be used to initialize an entity of type "ScriptMeta *"
[07:40:18] <hnOsmium0001[m]> Idlework: it does, unless you have some kind of include guard or #pragma once
[07:43:27] <ldlework> thanks
[07:47:57] *** Quits: CaCode- (~CaCode@user/cacode) (Quit: Leaving)
[07:54:54] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a)
[08:04:01] *** Joins: Viewday112 (~Viewday@user/viewday)
[08:04:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[08:05:54] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[08:05:55] *** Viewday112 is now known as Viewday11
[08:09:01] *** Joins: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe)
[08:20:54] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[08:21:35] *** Joins: Viewday117 (~Viewday@user/viewday)
[08:23:05] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[08:23:05] *** Viewday117 is now known as Viewday11
[08:23:37] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[08:24:02] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:32:40] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[08:33:01] *** Joins: spithash (~spithash@user/spithash)
[08:33:07] *** Joins: Viewday112 (~Viewday@user/viewday)
[08:33:28] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[08:34:00] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[08:34:48] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[08:34:50] *** Viewday112 is now known as Viewday11
[08:39:49] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:42:59] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[08:46:30] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:49:24] *** Joins: analognoise (~analognoi@185.202.221.238)
[08:51:37] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[08:55:28] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[08:55:32] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:55:41] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[08:56:38] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:57:27] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Remote host closed the connection)
[08:57:40] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[08:59:51] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[09:03:24] *** Quits: analognoise (~analognoi@185.202.221.238) (Quit: Leaving)
[09:05:49] *** Joins: Viewday114 (~Viewday@user/viewday)
[09:07:40] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[09:07:41] *** Viewday114 is now known as Viewday11
[09:08:07] *** Joins: analognoise (~analognoi@185.202.221.238)
[09:11:42] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[09:11:50] *** Joins: rvalue (~rvalue@user/rvalue)
[09:11:52] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[09:14:54] <pflanze> How can I determine in a template whether a given type argument is a signed integer, as opposed to unsigned?
[09:15:13] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[09:15:24] <pflanze> Or, how can I get maxint and minint for the given integer type (which can be signed or unsigned).
[09:15:31] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[09:19:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:22:32] <kalven> pflanze: std::is_signed for the first, std::numeric_limits for the second
[09:23:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:24:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:25:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:26:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:27:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:28:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:28:53] *** Joins: Viewday118 (~Viewday@user/viewday)
[09:29:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:30:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:30:54] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[09:30:55] *** Viewday118 is now known as Viewday11
[09:31:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:32:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:33:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[09:34:03] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:34:33] *** Joins: frost (~frost@user/frost)
[09:35:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:36:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:37:15] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:38:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:38:23] <pflanze> Thanks!
[09:39:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:39:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:01] *** ChanServ sets mode: +v npaperbot
[09:40:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:41:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:42:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:43:19] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:43:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:44:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:45:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:46:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:47:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:48:30] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:49:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:50:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:51:27] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[09:51:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:52:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:53:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:54:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:55:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:56:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:57:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:58:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:59:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[10:00:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:00:54] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[10:01:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[10:02:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:03:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[10:04:14] *** Joins: Viewday119 (~Viewday@user/viewday)
[10:05:04] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:06:02] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[10:06:03] *** Viewday119 is now known as Viewday11
[10:07:30] <smallville7123> "16:36:00 betelgeuse9 has left IRC (K-Lined)" oof
[10:10:39] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:12:14] *** Quits: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com) (Ping timeout: 268 seconds)
[10:12:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[10:13:15] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:14:42] *** Joins: shailangsa_ (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[10:15:40] <smallville7123> "If the name of the macro being replaced is found during this scan of the replacement list (not including the rest of the source file’s preprocessing tokens), it is not replaced" does that mean, that if i do #define bar a bar \n #define a a bar \n     bar      then would the process be:       scan "bar" -> expand "bar" to "a bar" -> rescan "a bar" -> expand "a" to "a bar" and do not expand "bar" -> rescan "a
[10:15:40] <smallville7123> bar bar" -> do not expand "a" and do not expand "bar"
[10:15:51] <smallville7123> if i do #define bar a bar \n #define a a bar \n     bar      then would the process be:       scan "bar" -> expand "bar" to "a bar" -> rescan "a bar" -> expand "a" to "a bar" and do not expand "bar" -> rescan "a bar bar" -> do not expand "a" and do not expand "bar"
[10:17:56] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[10:19:53] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[10:20:14] *** Quits: Tokamak_ (~Tokamak@166.205.152.1) (Ping timeout: 268 seconds)
[10:22:26] *** Joins: chenqisu12 (~bhca7d@183.217.201.63)
[10:22:54] *** Joins: Tokamak (~Tokamak@166.205.152.1)
[10:22:57] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Ping timeout: 240 seconds)
[10:29:13] *** Joins: Tokamak_ (~Tokamak@172.58.188.90)
[10:31:27] <smallville7123> apparently so https://godbolt.org/z/EaTanzd61    and my preprocessor apparently also does the same o.o
[10:31:30] *** Joins: Viewday116 (~Viewday@user/viewday)
[10:31:32] *** Quits: Tokamak (~Tokamak@166.205.152.1) (Ping timeout: 256 seconds)
[10:32:28] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:32:33] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:33:14] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[10:33:15] *** Viewday116 is now known as Viewday11
[10:34:26] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[10:34:50] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[10:37:16] <kalven> if you're actually intent on re-implementing the preprocessor, at least check out the test suite from boost wave: https://github.com/boostorg/wave/tree/1d705de40ffd35a396a15691001b01c6d0074bc1/test/testwave/testfiles
[10:38:45] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:44:22] *** Joins: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net)
[10:45:23] <ac_slater> hey guys, I just realized std::string::data() is only non-const in C++17. What's a good way to access std::string's internal buffer in a non-const way in C++14? This is for a library shim between C and C++. I already reserve capacity and handle character width
[10:45:59] <Eelis> ac_slater: &s[0] unless the string is empty
[10:46:42] <ac_slater> ah nice
[10:46:45] <ac_slater> thanks Eelis
[10:47:19] <smallville7123> :)
[10:48:17] *** Quits: Tokamak_ (~Tokamak@172.58.188.90) (Ping timeout: 240 seconds)
[10:50:07] *** Joins: kashyaprushi_ (~kashyapru@49.36.103.177)
[10:50:17] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a) (Ping timeout: 240 seconds)
[10:50:36] <fiesh> in C++14, it should also be fine for empty strings?
[10:50:52] <Eelis> possibly, i don't know the wording
[10:51:02] <fiesh> hmm yeah since C++11
[10:54:47] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 268 seconds)
[10:55:33] *** Joins: Tokamak (~Tokamak@172.58.188.90)
[11:01:10] *** Joins: Viewday118 (~Viewday@user/viewday)
[11:03:16] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[11:03:17] *** Viewday118 is now known as Viewday11
[11:08:19] *** Joins: namo (~nomo@95.87.208.95)
[11:10:20] <smallville7123> welp my preprocessor does not like numbers
[11:10:48] <smallville7123> ac_slater: c_str() ?
[11:11:21] *** Quits: shailangsa_ (~shailangs@host109-159-108-207.range109-159.btcentralplus.com) ()
[11:11:30] <Eelis> << TYPE(""s.c_str()) // smallville7123: notice the const
[11:11:31] <geordi> prvalue const char*
[11:11:35] <smallville7123> ac_slater: const_cast<char*>(str.c_str());
[11:11:53] <Eelis> my solution doesn't require a cast, so it's better
[11:12:22] <smallville7123> needs if(str.empty()) tho
[11:12:30] <Eelis> no, read what fiesh wrote.
[11:12:51] <smallville7123> s[0] will segv/throw if s is empty, right?
[11:13:10] <Eelis> it used to, but not anymore, according to fiesh
[11:13:22] <smallville7123> ok
[11:15:48] *** Joins: rcoote (~rcoote@2a02:908:69a:58a0:f495:f600:84e1:3ace)
[11:15:49] *** Joins: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[11:17:47] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[11:18:12] *** Quits: Tokamak (~Tokamak@172.58.188.90) (Ping timeout: 268 seconds)
[11:19:14] *** Joins: rvalue (~rvalue@user/rvalue)
[11:19:26] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 268 seconds)
[11:19:29] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[11:20:42] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[11:25:56] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[11:26:36] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[11:28:14] *** Joins: Tokamak (~Tokamak@172.58.188.90)
[11:28:27] *** Joins: rendar (~rendar@user/rendar)
[11:28:59] *** Joins: Viewday113 (~Viewday@user/viewday)
[11:30:32] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[11:30:33] *** Viewday113 is now known as Viewday11
[11:33:41] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[11:35:35] *** Joins: malloy (~jimery@116.30.221.255)
[11:35:43] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[11:38:35] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[11:43:54] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:51:22] *** kashyaprushi_ is now known as kashyaprushi
[11:53:11] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[11:54:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[11:57:57] *** Quits: proller (~p@2a02:6b8:b081:8814::1:24) (Ping timeout: 240 seconds)
[11:59:50] *** Quits: skipper (~whatsupbo@user/scobydoo) (Quit: brb)
[12:00:57] *** Quits: kashyaprushi (~kashyapru@49.36.103.177) (Ping timeout: 240 seconds)
[12:01:54] *** Joins: Viewday113 (~Viewday@user/viewday)
[12:02:51] *** Joins: andreasbuhr (~quassel@p549db80f.dip0.t-ipconnect.de)
[12:03:20] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[12:03:29] *** Joins: |7| (~seachdamh@user/seachdamh)
[12:04:39] *** Joins: Viewday11 (~Viewday@user/viewday)
[12:06:45] *** Quits: Viewday113 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[12:12:59] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:21:28] *** Quits: chozorho (~chozorho@2601:146:300:c30::d1a0) (Quit: WeeChat 3.0)
[12:29:38] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a)
[12:29:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:30:12] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[12:33:04] *** Joins: Viewday110 (~Viewday@user/viewday)
[12:34:36] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[12:34:37] *** Viewday110 is now known as Viewday11
[12:36:42] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:44:44] *** Quits: meandrain (~meandrain@86.123.72.102) (Quit: Leaving...)
[12:52:40] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:56:14] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:02:13] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[13:06:15] <manuels> why is unordered_multimap::equalrange "Average case linear in the number of elements with the key key"
[13:06:58] <manuels> equal elements go into one bucket which is found in O(n) right?
[13:07:12] <manuels> err O(logn)
[13:07:25] <manuels> no wait O(1) sorry
[13:08:56] <manuels> and with equal elements i meant equal key 🤦‍♂️
[13:09:34] * manuels went getting ☕️
[13:10:18] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[13:11:14] *** Joins: meandrain (~meandrain@2a02:2f0e:f305:2800:2423:21f3:294b:e892)
[13:15:51] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[13:20:06] <cbreak> manuels: unordered maps are hash tables. In the case of collisions, complexity is linear in the number of elements with the same hash. And having the same key is a special case of that
[13:20:08] *** Quits: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:20:26] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:20:58] <manuels> Are elements guaranteed to have weak order? I mean can I just get an iterator using find and iterate and use the elements while checking the key instead of doing equal_range, which is O(|elements with same key|) anyway?
[13:21:37] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[13:21:49] <manuels> no thats not even weak order. Are elements of the same keys guaranteed to be in sequence?
[13:22:02] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:22:44] <manuels> consecutive is the word I was looking for.
[13:23:42] *** Joins: plastico (~plastico@neomutt/plastico)
[13:24:25] <manuels> stack overflow tells me that I get the iterater to the first item with key while the reference says nothing about that. https://en.cppreference.com/w/cpp/container/unordered_multimap/find
[13:29:18] *** Joins: Viewday110 (~Viewday@user/viewday)
[13:30:43] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:30:44] *** Viewday110 is now known as Viewday11
[13:31:17] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[13:33:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 240 seconds)
[13:36:44] <leduyquang753> "The first item with key" is nothing but an implementation detail.
[13:38:36] <Eelis> manuels: so the lesson you learn from this is  std > cppreference > SO
[13:39:29] <Eelis> and the corollary is: if a claim is made on SO, check it with cppreference or the std. and if you see a claim on cppreference, check it with the std
[13:39:37] *** Joins: Viewday117 (~Viewday@user/viewday)
[13:39:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:01] *** ChanServ sets mode: +v npaperbot
[13:40:06] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[13:40:17] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:40:17] *** Viewday117 is now known as Viewday11
[13:40:18] *** Joins: PJBoy (~PJBoy@host31-48-117-179.range31-48.btcentralplus.com)
[13:40:18] *** Quits: PJBoy (~PJBoy@host31-48-117-179.range31-48.btcentralplus.com) (Changing host)
[13:40:18] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:40:32] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:41:33] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:41:57] <Eelis> in this case, the standardese is http://eel.is/c++draft/tab:container.hash.req#row-50
[13:45:22] <Eelis> (what i said is a bit too simplistic, because there are also SO members whose reliability is higher than cppref. but they are the exception, not the norm)
[13:46:38] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:47:35] <manuels> i just wonder why the std does not give this guarantee. aint this the whole point of a an unordered multimap?
[13:49:00] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:39ca:8a68:8a0c:f08b)
[13:49:58] <zen_coder> Does anyone know how I can try out fmt with an online compiler? it tried to add the fmts header to wandbox, but I do not get any output at all
[14:01:06] <cbreak> manuels: if you want to find multiple entries, use equal_range.
[14:01:29] *** Joins: Viewday117 (~Viewday@user/viewday)
[14:01:43] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[14:02:27] <manuels> how can I iterate over the buckets (sets of multiple keys)?
[14:03:04] <manuels> should I rather use unordered_map<vector<thing>> ?
[14:03:28] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[14:03:29] *** Viewday117 is now known as Viewday11
[14:05:05] *** Parts: jplejacq (~jplejacq@24.224.90.176) ()
[14:05:05] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[14:05:13] <manuels> unordered_map<key, vector<value>>
[14:05:17] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 250 seconds)
[14:07:36] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[14:07:47] *** Quits: chenqisu12 (~bhca7d@183.217.201.63) (Ping timeout: 268 seconds)
[14:08:07] <PJBoy> what's wrong with unordered_multimap?
[14:08:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:08:50] <PJBoy> unordered_map<key, vector<value>>'s not a bad way to go regardless tbf
[14:09:13] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a) (Remote host closed the connection)
[14:09:30] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:09:43] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a)
[14:10:27] <cbreak> manuels: whether a vector of things in a map, or a multimap is better for you depends on usecase
[14:10:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:10:45] <cbreak> you can iterate over the multiple items from equal_range like over any iterator range
[14:11:00] <cbreak> with some std algorithm, or a bare loop
[14:11:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:12:37] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:12:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:13:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[14:14:05] <PJBoy> interesting that unordered_*map doesn't have lower_bound and upper_bound functions
[14:14:26] *** Joins: ko (~i.am@user/marlboro)
[14:14:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:14:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[14:15:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:16:03] <cbreak> PJBoy: because there are no lower and upper bounds?
[14:16:28] <PJBoy> well usually the two iterators returned by equal_range specify the lower and upper bounds
[14:16:52] <PJBoy> so there are lower and upper bounds using equal_range as the definition
[14:16:52] <cbreak> in unordered_x they can't
[14:16:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:17:01] <cbreak> since there's no order in which they can be lower or upper
[14:17:11] <PJBoy> well there's the order returned by equal_range
[14:17:18] <PJBoy> which is the iteration order
[14:17:33] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[14:17:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:19:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:19:24] <cbreak> yes, but that only applies to the range you're given
[14:19:33] <PJBoy> I agree that {lower,upper}_bound don't seem very useful on their own
[14:19:38] <cbreak> lower / upper bound is relative to the elements around the range
[14:19:43] <PJBoy> but I'm still a little surprised they're not there
[14:20:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:20:30] <cbreak> with lower_bound, you know the iterator you are given points to the first element that is not smaller than the query value, with upper_bound, you know you're looking at the first element that is larger
[14:20:55] <PJBoy> that's just a property you've made up
[14:20:56] <cbreak> this is I think not anything an unordered container can offer
[14:21:08] <PJBoy> I'd argue lower_bound is the result of equal_range().first
[14:21:09] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Read error: Connection reset by peer)
[14:21:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:21:14] <PJBoy> which is a much simpler definition
[14:21:25] <cbreak> https://en.cppreference.com/w/cpp/algorithm/lower_bound says https://en.cppreference.com/w/cpp/algorithm/lower_bound
[14:21:31] <cbreak> Returns an iterator pointing to the first element in the range [first, last) that is not less than (i.e. greater or equal to) value, or last if no such element is found.
[14:21:35] <PJBoy> those are different lower_bounds
[14:21:53] <PJBoy> std::remove sometimes deletes a file and sometimes shuffles elements in a range
[14:22:04] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[14:22:10] <cbreak> https://en.cppreference.com/w/cpp/container/map/lower_bound says 1) Returns an iterator pointing to the first element that is not less than (i.e. greater or equal to) key.
[14:22:15] <PJBoy> std::move sometimes does a cast and sometimes moves elements from a range
[14:22:18] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:22:23] *** Joins: nicko (~iClass@222.211.28.110)
[14:22:27] <PJBoy> list::remove does an erase operation
[14:22:34] <PJBoy> you can't generalise a function name in C++
[14:22:40] *** Quits: Pajus (~Pajus@user/pajus) (Quit: leaving)
[14:22:43] <cbreak> there's nothing in this that I have made up myself
[14:22:54] *** Joins: Pajus (~Pajus@user/pajus)
[14:23:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:23:22] <PJBoy> I could make up that upper_bound has the property that it returns iterators that satisfy the property you've made up about lower_bound and correspondingly upper_bound
[14:23:28] <PJBoy> but it wouldn't hold true for unordered_map
[14:23:36] <Franciman> ahahah
[14:23:42] <Franciman> C++ PJBoy edition
[14:23:44] <PJBoy> so it makes sense not to apply that logic to lower_bound or upper_bound for unordered_map either
[14:23:44] <Franciman> go for ti!
[14:23:55] <cbreak> sure, you could make up anything you want, but it wouldn't make any sense neccessarily
[14:23:58] <Franciman> PJBoy: what would be the use of your definition?
[14:24:02] <PJBoy> my point exactly
[14:24:08] <cbreak> that's why making shit up isn't something I do
[14:24:15] <PJBoy> no point trying to apply ordered semantics to unordered_map
[14:24:19] <cbreak> if you want to do it, your choice, but it's not useful
[14:24:24] <PJBoy> and indeed equal_range doesn't do this
[14:24:25] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:24:38] <Franciman> so how would you use it?
[14:24:43] <Franciman> or them
[14:24:44] <cbreak> it is a fact that lower and upper bound need order
[14:24:48] <cbreak> unordered_ can't give order
[14:24:51] <PJBoy> that's not a fact at all
[14:24:57] <cbreak> so they don't make any sense in them
[14:25:00] <PJBoy> why would lower bound and upper bound need order if equal range doesn't?
[14:25:01] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[14:25:09] <PJBoy> those three things are tightly related
[14:25:13] <cbreak> PJBoy: because lower and upper are words that require order
[14:25:16] <PJBoy> directly related I would argue
[14:25:16] <cbreak> but equal doesn't
[14:25:18] <Franciman> cbreak: it can, but it can also change at ech insert
[14:25:20] <Franciman> very unstable
[14:25:22] <cbreak> equal requires ==
[14:25:23] <Franciman> ahuhaauhhaha
[14:25:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:25:32] <PJBoy> equal doesn't require == in ordered sequences
[14:25:33] <cbreak> lower and upper require < (or some other ordering)
[14:25:40] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[14:25:45] <PJBoy> equal uses < in all other contexts than unordered_map
[14:25:52] <PJBoy> you're making false generalisations
[14:26:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:26:36] <Franciman> still it's a fact that the resulting order would potentially change at each insert
[14:26:59] <PJBoy> inserts invalidate iterators anyway
[14:27:06] <Franciman> indeed
[14:27:13] <cbreak> not in maps
[14:27:18] <cbreak> not in multimaps
[14:27:21] <Franciman> that's why I asked what would be a use for your lower/upper_bound
[14:27:23] <cbreak> not in unordered_maps
[14:27:29] <PJBoy> they do in unordered_maps
[14:27:30] <cbreak> and not in unordered_multimaps
[14:27:33] <PJBoy> any insert can cause a rehash
[14:27:36] <Franciman> cbreak: wait i thought so in unordered maps
[14:27:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:27:43] <cbreak> PJBoy: so?
[14:27:53] <PJBoy> don't rehashes invalidate all iterators?
[14:27:55] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:28:13] <PJBoy> >  rehashing occurs due to the insertion, all iterators are invalidated
[14:28:13] <cbreak> just reserve stuff beforehand
[14:28:34] <PJBoy> maps don't have reserve
[14:28:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:28:44] <PJBoy> you'd have to do some bucket related stuff
[14:28:49] <Franciman> cbreak: as we were arguing yesterday, the standard says so, so you can't expect a library to reliably not invalidate iterators
[14:29:08] <cbreak> PJBoy: https://en.cppreference.com/w/cpp/container/unordered_multimap/reserve
[14:29:11] <PJBoy> oh they do have reserve
[14:29:25] <manuels> so there is no way to iterate the buckets, i.e. the equal ranges in unordered_multimap, right?
[14:29:26] <PJBoy> neat
[14:29:38] <cbreak> Franciman: I can, because the standard says so
[14:29:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:29:51] <Franciman> ah ha cbreak
[14:29:54] <Franciman> you are right!
[14:29:58] <PJBoy> not sure if reserve would guarantee no rehash though
[14:30:04] <Franciman> iterators are invalidated only if rehasing happens
[14:30:24] <PJBoy> the rehash is done when the load of a bucket exceeds the max
[14:30:30] <PJBoy> but reserve doesn't affect the max load of a bucket
[14:30:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:30:47] <manuels> somehow unorderd_multimap seems dominated by unordered_map<key, whatevercontainer> to me
[14:30:48] <Franciman> nope
[14:30:58] <Franciman> it affects the ratio
[14:31:00] <PJBoy> it sets the number of buckets to accommodate several values, but it could still be at capacity afterwards
[14:31:09] <PJBoy> for one specific bucket
[14:31:13] <cbreak> PJBoy: reserve guarantees there are enough buckets free for the requested number of entries to not cause a rehash.
[14:31:22] <Franciman> +1 cbreak
[14:31:31] <PJBoy> where does it say that it doesn't cause a rehash?
[14:31:44] <cbreak> it will invalidate iterators when you call it, but it will prevent them from being invalidated afterwards until the requested limit
[14:31:49] <manuels> can you give any reasons to go for unorderd_multimap at all?
[14:31:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:32:05] <Franciman> manuels: i think it costs less memory and indirection
[14:32:11] <PJBoy> hm
[14:32:12] <Franciman> because data is stored contigously
[14:32:22] <PJBoy> data's not stored contiguously is it?
[14:32:34] <cbreak> manuels: I wouldn't use multimap unless all entries with the same key are equivalent
[14:32:35] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:32:45] <cbreak> and I wouldn't care which one I get
[14:32:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:33:22] <cbreak> PJBoy: in an std unordered_X?
[14:33:33] <PJBoy> yeah
[14:33:37] <cbreak> I don't think it is. The standard unfortunately requires some stupid bucket interface
[14:33:39] <manuels> thats true for my use case because i want them all cbreak
[14:34:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:34:19] <manuels> this is definitively some valid usecase. uo_mm should respect that i guess
[14:34:57] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Ping timeout: 240 seconds)
[14:35:01] <manuels> all items in all buckets (because you could argue use equal_range)
[14:35:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:35:28] <PJBoy> yeah even equal key elements in unordered_multimap seem to be stored by linked list
[14:36:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:36:13] <cbreak> I dislike std unordered containers. They're not efficient :/
[14:37:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:37:19] <Franciman> really cbreak ?
[14:37:36] <Franciman> c++ is bloat as hell, but I switched for them
[14:37:39] <Franciman> T.T
[14:37:44] <cbreak> well, they're relatively efficient
[14:37:47] <PJBoy> still trying to work out if reserve works out like you said
[14:37:50] <cbreak> but they're not as efficient as they could be
[14:37:57] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[14:38:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:38:13] <cbreak> PJBoy: well, if it doesn't work out as I said, it'd be stupid. Have you ever heard of anything stupid in c++?
[14:38:14] <PJBoy> is the idea that *every* bucket is given enough space for N insertions to not cause a rehash?
[14:38:28] <PJBoy> because that sounds like it might be completely excessive
[14:38:28] <Franciman> looooooooool
[14:38:32] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:e954:6a22:3202:5b23)
[14:38:41] <Franciman> c++ is the most reasonable language around
[14:38:54] <cbreak> PJBoy: load factor is an average metric, it doesn't care about the specific load in each bucket
[14:38:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[14:39:09] <PJBoy> oh, so it is
[14:39:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:39:25] <PJBoy> well then it definitely doesn't prevent rehash after N insertions, right?
[14:39:34] <cbreak> it does
[14:39:48] <PJBoy> oh buckets don't have a maximum load
[14:39:53] <PJBoy> ok ok ok
[14:40:00] <cbreak> indeed, just the container as a whole
[14:40:04] *** Joins: MajorBiscuit (~MajorBisc@c-001-001-037.client.tudelft.eduvpn.nl)
[14:40:08] <PJBoy> that was my error
[14:40:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:40:21] *** Joins: rajkosto (~rajkosto@93-86-13-189.dynamic.isp.telekom.rs)
[14:40:49] <Franciman> yet you weren't made fun of, for it
[14:40:55] <Franciman> meditate
[14:40:57] <Franciman> meditate
[14:41:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:42:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:42:53] <PJBoy> I notice that cppref says "every group of elements whose keys compare equivalent (compare equal with key_eq() as the comparator) forms a contiguous subrange in the iteration order"
[14:43:07] <PJBoy> noting the word contiguous
[14:43:12] <Franciman> meditate even harder
[14:43:17] <PJBoy> I wonder if that's to be interpreted non-technically
[14:43:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[14:44:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:44:54] *** Joins: RazielZ (~Raziel@user/raziel)
[14:45:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:46:36] <cbreak> PJBoy: well, the range is contiguous, the storage / memory isn't neccessarily
[14:46:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:46:52] <cbreak> (and I bet it isn't, since removal is not O(k))
[14:47:02] <PJBoy> yeah my thoughts too
[14:47:13] <PJBoy> the standard writes "In containers that support equivalent keys, elements with equivalent keys are adjacent to each other in the iteration order of the container"
[14:47:31] <PJBoy> which is probably better wording anyway
[14:47:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:47:50] <PJBoy> > Mutating operations on unordered containers shall preserve the relative order of elements within each equivalent-key group unless otherwise specified
[14:47:55] <PJBoy> that's a guarantee I didn't expect
[14:48:04] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:48:32] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 240 seconds)
[14:48:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:49:38] <cbreak> neat
[14:49:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:50:21] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[14:50:23] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[14:50:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:51:23] <Franciman> will c++50 have pattern matching?
[14:51:34] *** Joins: tmm88 (~tmm88@user/tmm88)
[14:51:44] *** Joins: furrymcgee (~devuan@cgn-89-1-208-9.nc.de)
[14:51:54] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:51:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:52:55] <cbreak> Franciman: it already has... in std::regex :D
[14:53:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:54:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:55:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:56:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:56:19] *** Joins: Enitin (~Enitin@82.102.22.84)
[14:56:37] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 240 seconds)
[14:57:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:57:54] <Franciman> lol
[14:58:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:58:53] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[14:59:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:00:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:01:13] <manuels> cbreak why do you consider unordered_* inefficient? i was told their purpose is nice complexities
[15:01:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:02:30] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:03:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:04:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:04:50] <jdavfsxd> because it has its amortized cost.
[15:05:21] *** Joins: Viewday118 (~Viewday@user/viewday)
[15:05:28] <jdavfsxd> (maybe that)
[15:05:36] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:05:52] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6aeb:18f5:2700:2624)
[15:06:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:06:55] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[15:06:55] *** Viewday118 is now known as Viewday11
[15:07:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:08:09] *** Joins: plantman (~plantman@2601:405:4680:1b0::f)
[15:08:21] *** Quits: montpol (montpol@fine.mouses.xyz) (Remote host closed the connection)
[15:08:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:09:12] *** Joins: montpol (montpol@fine.mouses.xyz)
[15:09:20] *** Joins: artie (~artie@pool-173-59-250-143.bltmmd.fios.verizon.net)
[15:09:34] <PJBoy> because it stores its equal elements in a linked list
[15:09:41] <PJBoy> and has a bucket interface
[15:09:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:10:12] <PJBoy> the better hash maps have fewer guarantees, and hence are allowed to store equal elements in a vector or some such
[15:10:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6aeb:18f5:2700:2624) (Ping timeout: 240 seconds)
[15:10:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:11:48] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:12:45] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:12:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:13:36] <cbreak> manuels: yeah, what PJBoy said. An unordered container using local (contiguous storage) "buckets" instead of actual linked buckets is more efficient
[15:14:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:14:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:15:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:16:56] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[15:17:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:18:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:19:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:20:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:21:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:22:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:22:55] *** Joins: netpipe (~netpipe@user/netpipe)
[15:23:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:23:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[15:24:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:24:30] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:25:31] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:26:35] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:27:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:27:50] *** Joins: sh00p (~sh00p@2001:9b1:41e9:e800:dfc6:b074:1f6f:9b73)
[15:28:42] *** Joins: Viewday118 (~Viewday@user/viewday)
[15:28:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:29:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[15:30:09] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[15:30:10] *** Joins: seninha (~seninha@user/seninha)
[15:30:10] *** Viewday118 is now known as Viewday11
[15:30:46] *** Joins: DWD (~daniel@host-78-149-70-69.as13285.net)
[15:30:46] *** Quits: DWD (~daniel@host-78-149-70-69.as13285.net) (Changing host)
[15:30:46] *** Joins: DWD (~daniel@user/dwd)
[15:30:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:31:03] *** Quits: DWD (~daniel@user/dwd) (Client Quit)
[15:31:16] *** Quits: plantman (~plantman@2601:405:4680:1b0::f) (Quit: Leaving)
[15:32:04] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:33:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:34:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:35:15] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:36:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:37:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:38:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:39:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:40:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:41:00] *** Joins: pulse (~pulse@user/pulse)
[15:41:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:42:02] *** Joins: NEYi (~NEYi@109.251.216.38)
[15:42:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:43:41] *** Joins: stonkey (~stonkey@user/stonkey)
[15:43:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:44:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:45:09] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[15:45:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:46:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:47:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:48:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:49:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:51:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:52:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:53:08] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:54:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:55:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:56:15] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:56:58] *** Joins: tewrdh^ (~tewrdh@64.253.22.77)
[15:57:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:58:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:58:56] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[15:59:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:00:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:01:20] *** Joins: Viewday112 (~Viewday@user/viewday)
[16:01:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:02:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:03:18] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[16:03:37] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[16:03:37] *** Viewday112 is now known as Viewday11
[16:03:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:04:29] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:04:48] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:05:05] *** Joins: teepee (~teepee@openscad/teepee)
[16:05:37] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:05:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:06:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:07:27] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:07:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:08:48] *** Quits: mib (~mib@cpc91222-cmbg18-2-0-cust108.5-4.cable.virginm.net) (Read error: Connection reset by peer)
[16:08:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:09:15] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[16:09:41] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3457:f613:6c02:3d9f)
[16:09:41] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3457:f613:6c02:3d9f) (Changing host)
[16:09:41] *** Joins: skapata (~Skapata@user/skapata)
[16:10:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:11:03] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:11:37] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 240 seconds)
[16:12:14] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:13:11] *** Joins: Burgundy (~yomon@79.115.213.171)
[16:13:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:13:59] *** Quits: nicko (~iClass@222.211.28.110) (Read error: Connection reset by peer)
[16:14:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:15:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:16:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:17:10] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a) (Quit: Leaving)
[16:17:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:18:46] *** Joins: namo (~nomo@95.87.208.95)
[16:18:47] *** Quits: artie (~artie@pool-173-59-250-143.bltmmd.fios.verizon.net) (Ping timeout: 256 seconds)
[16:18:49] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:19:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:21:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:22:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:22:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[16:23:04] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[16:23:17] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:24:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:25:14] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:26:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:27:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:28:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:29:05] *** Joins: seninha (~seninha@user/seninha)
[16:29:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:30:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:31:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:32:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:33:15] *** Joins: Viewday111 (~Viewday@user/viewday)
[16:33:53] <smallville7123> why is function parsing/expansion so complicated ;-;
[16:34:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:35:04] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:35:10] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[16:35:21] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[16:35:21] *** Viewday111 is now known as Viewday11
[16:35:29] *** Joins: Rayke (rayke@user/rayke)
[16:36:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:37:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:38:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:39:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:40:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:41:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:42:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:43:36] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:44:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:44:51] <netpipe> https://www.youtube.com/watch?v=gc3JXU3y8dg
[16:45:20] *** Joins: Viewday118 (~Viewday@user/viewday)
[16:45:29] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:45:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:46:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:47:31] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 268 seconds)
[16:47:31] *** Viewday118 is now known as Viewday11
[16:47:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:48:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:49:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:50:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[16:51:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:52:28] *** Quits: netpipe (~netpipe@user/netpipe) (Quit: Client closed)
[16:52:52] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: leaving)
[16:52:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:53:35] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Quit: Lost terminal)
[16:54:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:55:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:55:35] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:56:08] *** Joins: netpipe (~netpipe@user/netpipe)
[16:56:09] *** Joins: xiongxin (~Thunderbi@113.116.33.221)
[16:56:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:56:16] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:57:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:58:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:59:30] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:00:13] *** Joins: tmm88 (~tmm88@user/tmm88)
[17:00:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:01:39] *** Quits: rajkosto (~rajkosto@93-86-13-189.dynamic.isp.telekom.rs) (Ping timeout: 250 seconds)
[17:01:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:02:21] *** Quits: jiffe (~jiffe@mail.nsab.us) (Quit: WeeChat 2.9)
[17:02:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:03:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:04:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:05:00] *** Joins: Viewday112 (~Viewday@user/viewday)
[17:05:49] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:06:34] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[17:06:34] *** Viewday112 is now known as Viewday11
[17:06:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:07:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:09:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:10:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:11:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:12:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:13:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:14:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:15:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:16:30] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:17:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:18:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:19:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:20:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:21:17] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[17:21:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:22:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:23:20] *** Quits: xiongxin (~Thunderbi@113.116.33.221) (Remote host closed the connection)
[17:23:32] *** Joins: xiongxin1 (~Thunderbi@113.116.33.221)
[17:23:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:24:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:25:10] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[17:25:50] *** xiongxin1 is now known as xiongxin
[17:25:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:26:34] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[17:26:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:27:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:28:06] *** Joins: pulse (~pulse@user/pulse)
[17:28:42] *** Joins: Viewday114 (~Viewday@user/viewday)
[17:29:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:29:18] *** ChanServ sets mode: +o TinoDidriksen
[17:29:33] *** TinoDidriksen sets mode: +b *!*@94-225-47-8.access.telenet.be
[17:30:14] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[17:30:32] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[17:30:53] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[17:30:53] *** Viewday114 is now known as Viewday11
[17:36:47] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Quit: leaving)
[17:37:01] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[17:39:00] *** Joins: Enitin (~Enitin@82.102.22.84)
[17:39:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:01] *** ChanServ sets mode: +v npaperbot
[17:47:53] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[17:53:24] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[17:56:49] *** Joins: xardas (~xardas@149.233.51.127)
[17:57:31] *** Quits: netpipe (~netpipe@user/netpipe) (Quit: Client closed)
[17:57:34] *** Joins: NEYi (~NEYi@109.251.216.38)
[17:57:57] <xardas> I'm learning inheritance and i see to have missed something, I couldn't find it .
[17:57:58] <xardas> https://wandbox.org/permlink/AYSZsZgkurt4QfCc
[17:58:04] <xardas> seem*
[18:00:04] <PJBoy> can start by compiling and linking those extra source files https://wandbox.org/permlink/Tz0JRgdhlU6ilQ4p
[18:00:29] *** Joins: Pook (~Pook@2001:8a0:f996:1400:5482:cf6f:d76d:ddb5)
[18:01:22] *** Joins: Viewday117 (~Viewday@user/viewday)
[18:01:28] <xardas> Yes. My bad
[18:01:45] <xardas> I'm using an IDE for that. I didn't notice.
[18:02:22] *** Joins: Zwei88 (~Zwei@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[18:02:28] <xardas> But I still don't see why it's not compiling
[18:03:04] <Zwei88> WHoo, found you guys!  I leave for a year and everything's changed
[18:03:11] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:03:11] *** Viewday117 is now known as Viewday11
[18:03:56] <TinoDidriksen> Yeah, things certainly changed this year.
[18:03:56] <xardas> Welcome back !
[18:04:32] <xardas> cpp has such a big community.
[18:06:43] <PJBoy> xardas, next thing to fix is that error
[18:06:59] <PJBoy> your Daughter.h doesn't include a file that declares Mother
[18:08:49] <Zwei88> Yeah, I was still trying to connect to freenode and wondering where everyone went and how comes someone took my nickname. Nice to see familiar nicks in here :)  . Sorry, I'll keep it on topic, just relieved that there's still an IRC channel for C++.
[18:09:07] <PJBoy> xardas, https://wandbox.org/permlink/QBQfwOjLjs1TUhij has some fixes
[18:10:43] <cbreak> Zwei88: there are many
[18:10:44] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Read error: No route to host)
[18:10:57] <cbreak> #c++, #c++-general, #c++-basic, probably some more
[18:11:13] <xardas> PJBoy Tysm !!
[18:11:26] <PJBoy> :)
[18:11:55] <PJBoy> probably worth adding header guards to those headers
[18:12:06] <xardas> Looks like I only need to include the derived class in the main, and exclude the Parent class.
[18:12:15] <Zwei88> cbreak yeah, I was in them before. I'm more talking about this one and in general the ones in freenode. I thought it all died.
[18:12:41] <PJBoy> yeah, no need to include what you don't use
[18:12:43] <cbreak> freenode committed suicide
[18:12:56] <Zwei88> yeah, just found out today
[18:13:15] <xardas> Zwei88 I was also lurcking around in freenode and wondering where the hell did everyone go until guy referred me to this channel.
[18:13:57] <xardas> People didn't like the new owner of Freenode that's why they left.
[18:14:01] *** Joins: rajkosto (~rajkosto@93-86-90-106.dynamic.isp.telekom.rs)
[18:14:59] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[18:15:21] *** Joins: xkpe (xkpe@cpc115884-addl5-2-0-cust1413.6-3.cable.virginm.net)
[18:15:28] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:15:29] <cbreak> xardas: nah
[18:15:31] <xardas> PJBoy I still haven't learned about header guards. I come from Java actually and i'm hitting a 10 hours tutorial on youtube. I'll learn them afterwards
[18:15:41] <cbreak> people didn't like the new owner deleting channels and nick name registrations
[18:15:46] <PJBoy> !header guards
[18:15:47] <nolyc> PJBoy: Error: "header" is not a valid command.
[18:15:50] <PJBoy> !headerguards
[18:15:51] <nolyc> PJBoy: Error: "headerguards" is not a valid command.
[18:15:55] <PJBoy> whatever
[18:16:17] <PJBoy> you'll have no choice but to use them soon enough
[18:16:25] <leduyquang753> !give leduyquang753 headerguards
[18:16:26] <nolyc> leduyquang753: Error: "headerguards" is not a valid command.
[18:17:06] <cbreak> xardas: you might get away with using non-standard crap like #pragma once, but I strongly recommend not relying on that stuff
[18:17:21] <cbreak> it's non-standard, and who knows what it actually does...
[18:17:36] *** Quits: ko (~i.am@user/marlboro) (Read error: Connection reset by peer)
[18:17:55] <xardas> What do you mean ?
[18:17:57] <fiesh> #pragma once is supported by virtually every compiler
[18:18:19] <xardas> Thing is, I hate to use code that i don't understand.
[18:18:29] <xardas> I'll learn them afterwards.
[18:19:14] <xardas> I miss java :(
[18:19:35] <Zwei88> Then go do java
[18:19:49] <xardas> I wish.
[18:20:04] <xardas> I'm into competitive programming now
[18:20:08] <xardas> I need C++
[18:20:32] <Zwei88> Have you joined #algorithms? People there are into cp too.
[18:20:40] <PJBoy> ew
[18:20:51] <PJBoy> there was me thinking the days of cp on IRC were gone
[18:21:10] <Zwei88> :p
[18:21:29] <cbreak> xardas: as long as you don't do logging in java, you might be fine :D
[18:21:46] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:21:47] <xardas> Thanks for the referral. Zwei88
[18:22:24] <cbreak> fiesh: the problem with #pragma once is that it's not clear what it does.
[18:22:55] <cbreak> I've mentioned that some time ago, but the options are: deduplication by path identity (so a header used via foo/bar.hpp and bar.hpp would not be deduplicated)
[18:22:58] <fiesh> cbreak: with regard to symlinks, for example?
[18:23:13] <cbreak> deduplicating via file identity, so symlinks would screw things up
[18:23:28] <cbreak> or copies of the same header, which are not the same file, but have the same content
[18:23:38] <cbreak> it could deduplicate via file content identity (via hashes maybe?)
[18:23:39] <fiesh> I think only the first choice is sensible
[18:23:54] <cbreak> I think only the last choice will work reliably
[18:24:12] <fiesh> and the symlink issue is largely a non-issue since having symlinks in a code base like that seems like a bigger issue in itself than pragma once
[18:24:18] <cbreak> because it is common to include the same file with different paths, and that should be handled
[18:24:30] <fiesh> oh I meant second
[18:24:33] <fiesh> not first, first is nonsense
[18:24:42] <cbreak> indeed.
[18:24:44] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[18:25:03] <cbreak> but even the second isn't super reliable, if you have duplicate files
[18:25:12] <fiesh> file identity and symlink-screw-yourself largely seems to solve the issue completely to me
[18:25:26] <fiesh> again having duplicate files seems like an issue in itself
[18:25:30] <cbreak> it is.
[18:25:50] <fiesh> having unclear cases would be an issue if it arose with sane code bases -- and it doesn't to the best of my knowledge
[18:25:53] <cbreak> nevertheless, I've seen headers with plenty of #include_next hackery :(
[18:26:04] <cbreak> system headers
[18:26:16] <PJBoy> what the hell is #include_next?
[18:26:31] <cbreak> good question PJBoy :D
[18:26:50] <fiesh> the main main issue with includes that I have is the difficulty with disabling warnings for them
[18:27:11] <fiesh> commonly, -Isystem is abused, but that's a hack at best
[18:27:22] *** Quits: xiongxin (~Thunderbi@113.116.33.221) (Quit: xiongxin)
[18:27:37] <cbreak> -Isystem is for system headers only.
[18:27:51] <PJBoy> #include_next is used for monkey patching headers by the looks of it
[18:27:54] <fiesh> yeah but it works well for disabling warnings and is the only means ;)
[18:28:01] <cbreak> PJBoy: yes. It's a gnu thing I think.
[18:28:19] <cbreak> I've seen it in Mac OS X system headers that redirect to other similar ones
[18:28:29] <PJBoy> that's pretty gross
[18:28:42] <cbreak> like having a common malloc header
[18:28:54] <cbreak> and then an other malloc header for arm, and an other other for x86_64
[18:29:20] <cbreak> (if I remember correctly, they were all called malloc.h or so...)
[18:29:50] <cbreak> fiesh: I remember having issues with some project using -Isystem for non-system headers... don't remember any details though :(
[18:30:13] <cbreak> I think it was related to symbol visibility
[18:32:49] *** Joins: Viewday117 (~Viewday@user/viewday)
[18:34:14] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:34:55] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:34:55] *** Viewday117 is now known as Viewday11
[18:35:05] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:35:52] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:37:25] <fiesh> cbreak: yeah, it's really a hack :/
[18:39:17] <Franciman> oh modules our saviors
[18:39:23] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:39:25] <Franciman> come and rescue us
[18:41:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[18:45:00] *** Joins: Viewday111 (~Viewday@user/viewday)
[18:45:28] <xkpe> should this fail? is there a 'pretier'/less verbose way than the second alternative? https://wandbox.org/permlink/yqV0Z30Nwno9F6i5
[18:46:18] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Remote host closed the connection)
[18:46:49] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:46:49] *** Viewday111 is now known as Viewday11
[18:46:51] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:51:49] *** Quits: calm-steam (~calm-stea@user/calm-steam) (Quit: Leaving)
[18:53:05] <PJBoy> it should fail, yeah
[18:53:54] <PJBoy> you can get slightly less verbose with `T result{};`
[18:53:59] <PJBoy> but that's about as good as it gets
[18:58:25] *** Joins: calm-steam (~calm-stea@user/calm-steam)
[18:58:49] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[18:59:35] <smallville7123> when expanding a function-like macro body with the function params, are any macro's that HAVE been expanded during parameter expansion no longer available for further replacement?
[19:01:59] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[19:02:33] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[19:04:01] <smallville7123> for example #define x y 1\n #define y x 2 \n #define foo(x) x\n foo(x)"    ->    foo(x) -> prevent x from being expanded further -> foo(y 1) -> prevent y from being expanded further -> foo(x 2 1) -> replace x with 'x 2 1' -> x 2 1 -> x is not expanded further -> x 2 1
[19:05:04] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:05:11] *** Joins: Viewday115 (~Viewday@user/viewday)
[19:06:44] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:06:44] *** Viewday115 is now known as Viewday11
[19:09:27] <smallville7123> wait if thats the case then shouldnt also '#define foo(x) x y' result in 'x 2 1 y' instead of 'x 2 1 y 1 2' ?
[19:10:09] <smallville7123> eg https://godbolt.org/z/WzfxP3dvM
[19:11:01] <smallville7123> as y should not be expanded since it was already expanded, right?
[19:11:31] *** Joins: tmm88 (~tmm88@user/tmm88)
[19:15:29] <BurumaSerafuku> macros suck
[19:15:35] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:19:26] *** Quits: meicceli (meicceli@kapsi.fi) (Quit: WeeChat 3.3)
[19:19:35] *** Joins: meicceli (meicceli@kapsi.fi)
[19:24:46] <Alipha> cbreak: PJBoy: manuels: it seems insane that unordered_multimap::find doesn't guarantee returning the first element in the equal range. With how the unordered containers must be implemented, that's the only logical outcome.
[19:25:51] <cbreak> Alipha: it could return the last
[19:26:30] <cbreak> if it's implemented as a singly linked list, doing that might be cheaper... maybe.
[19:27:52] <PJBoy> yeah
[19:28:06] <PJBoy> I'd expect it to return either the lower or upper bound
[19:28:17] <PJBoy> but not necessarily either of them in particular
[19:28:45] *** Joins: Viewday116 (~Viewday@user/viewday)
[19:30:15] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:30:15] *** Viewday116 is now known as Viewday11
[19:30:43] <cbreak> I don't think there's a notion of lower / upper in an unordered_X.
[19:32:06] <PJBoy> there's the iterators returned by equal_range
[19:32:33] <PJBoy> and as we all know, equal_range is defined to return the lower and upper bounds in most cases
[19:32:55] <PJBoy> for some definition of lower and upper bound
[19:33:01] <xkpe> using decltype in constexpr fails to compile? https://wandbox.org/permlink/6VLisXNK08TUdxMa
[19:34:16] <PJBoy> range.front() fails to compile
[19:34:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[19:34:38] *** Quits: rcoote (~rcoote@2a02:908:69a:58a0:f495:f600:84e1:3ace) (Ping timeout: 268 seconds)
[19:34:41] *** RazielZ is now known as Raziel
[19:34:45] <PJBoy> I'm not sure what type it is, but it doesn't support .front()
[19:35:04] <xkpe> if I don't specify constexpr in line 16 it builds
[19:35:21] <PJBoy> doesn't support .front() if it's a const then
[19:36:03] <xkpe> what's the preferred way to get a the type of the data in a view?
[19:36:58] <PJBoy> std::ranges::range_value_t I would think
[19:36:58] <xkpe> also https://en.cppreference.com/w/cpp/ranges/view_interface/front is supposed to be constexpr?
[19:37:53] <PJBoy> do you have a view_interface?
[19:38:11] <PJBoy> I think so
[19:39:22] <PJBoy> man these error messages are hard to read
[19:39:28] <xkpe> it's the result of filter, it should be a filter_view I believe
[19:41:23] <PJBoy> ah front requires a forward_range
[19:43:12] <xkpe> still don't understand why the contexpr makes it fail
[19:44:33] <PJBoy> being const makes it not a forward range
[19:46:33] <PJBoy> `std::ranges::begin(odd_numbers);` doesn't work for some reason
[19:47:39] <PJBoy> I do notice that https://en.cppreference.com/w/cpp/ranges/filter_view#std::ranges::filter_view::begin only has a non-const overload
[19:48:05] <PJBoy> makes sense actually when you look at the implementation
[19:48:15] <xkpe> I get it now...
[19:48:23] <PJBoy> the view has to be able to modify itself to be iterated
[19:48:37] <xkpe> odd_numbers is const so it's useless as a view
[19:49:01] <PJBoy> well other views like iota_view are still useful
[19:50:02] <PJBoy> it's just that filter_view works as a stashing range
[19:50:27] <manuels> i am trying to get used to mutli return values. is tie the thing when I want tuple unboxing with implicit assingment ?
[19:50:37] <PJBoy> yeah
[19:52:01] <manuels> c++ 17 is pretty cool
[19:52:13] <PJBoy> { string s; double d; tie(s, d) = f(); cout << s << " = " << d; } tuple<string, double> f() { return {"5/2", 2.5}; }
[19:52:13] <geordi> 5/2 = 2.5
[19:52:18] <manuels> looking forward to coroutines
[19:52:30] <manuels> nice
[19:53:28] <manuels> what ecactly does forward_as_tuple for me? does it make sense to use it as return value?
[19:53:32] <PJBoy> xkpe, also I beg you to use -fdiagnostics-color as one of your wandbox flag :)
[19:54:03] <PJBoy> forward_as_tuple is an even more generic version of tie
[19:55:04] <xkpe> @PJBoy, if it's all inside another constexpr function it's fine, in hindsight it was a quirk ov shoving everything in the main function https://wandbox.org/permlink/o8Rh3Uc5PAEpxKo9
[19:55:44] <PJBoy> for example, tie doesn't work here
[19:55:48] <PJBoy> { tie(ostream_iterator<int>(cout), ostream_iterator<double>(cout)) = tie(42, 4.2); }
[19:55:48] <geordi> error: cannot bind non-const lvalue reference of type 'ostream_iterator<int>&' to an rvalue of type 'ostream_iterator<int>'
[19:55:52] <PJBoy> but
[19:55:56] <PJBoy> { forward_as_tuple(ostream_iterator<int>(cout), ostream_iterator<double>(cout)) = forward_as_tuple(42, 4.2); }
[19:55:56] <geordi> 424.2
[19:56:12] <PJBoy> tie requires lvalue references, forward_as_tuple allows rvalue arguments
[19:57:03] <PJBoy> xkpe, yup makes sense
[19:57:16] <PJBoy> I should have picked up on that too
[19:58:24] *** Joins: zeroes (~fitangu@88-112-72-100.elisa-laajakaista.fi)
[19:58:49] *** Quits: UsbSick (~UsbSick@2600:6c48:757f:e654:217f:9d34:6545:b1a6) (Read error: Connection reset by peer)
[19:59:24] <manuels> can I understand this generalized? should i always use forward_as_tuple?
[19:59:29] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:00:46] <PJBoy> probably best to always use the most constrained type that works
[20:00:56] <PJBoy> i.e. prefer tie
[20:01:05] <Raziel> std::pair<std::any, std::any> it is then
[20:01:14] <PJBoy> v_v
[20:01:33] *** Quits: letto (~letto@188.26.158.104) (Quit: Konversation terminated!)
[20:01:45] *** Quits: geeknix (~pi@2001:e68:5432:c000:3795:5c40:487:1d37) (Ping timeout: 268 seconds)
[20:02:25] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[20:03:05] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:03:43] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[20:06:37] *** Quits: rahl (~rahl@102.114.167.205) (Ping timeout: 240 seconds)
[20:08:54] *** Joins: rahl (~rahl@102.114.240.19)
[20:09:11] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:09:41] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:10:25] *** Quits: zeroes (~fitangu@88-112-72-100.elisa-laajakaista.fi) (Write error: Connection reset by peer)
[20:10:39] *** Joins: zeroes (~fitangu@88-112-72-100.elisa-laajakaista.fi)
[20:11:08] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:11:42] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:12:41] *** Quits: Perry (~perry@coffee-break.at) (Quit: ZNC - http://znc.in)
[20:13:26] *** Joins: Perry (~perry@coffee-break.at)
[20:13:36] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[20:13:41] <xkpe> putting iota and filter in the same statement also causes some oddity https://wandbox.org/permlink/EuEW6AdCNVmO1mZG
[20:14:32] <xkpe> ignore that
[20:14:51] *** Joins: geeknix (~pi@2001:e68:5432:307:f6b7:9845:4bce:2869)
[20:15:30] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[20:17:35] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[20:20:25] <Alipha> manuels: you should never use std::tuple or std::pair in your own code, unless you're doing generic template metaprogramming. If you need to return multiple values, create a struct/class so that you can name the struct/class and its members appropriately
[20:22:15] <Alipha> `struct person { std::string first_name; std::string last_name; };` is a lot more readable than `std::pair<std::string, std::string>`
[20:22:27] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[20:27:51] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[20:31:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[20:31:48] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[20:33:19] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:33:36] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[20:34:47] *** Joins: letto (~letto@188.26.158.104)
[20:35:44] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[20:37:33] *** Joins: magla (~gelignite@55d41339.access.ecotel.net)
[20:43:52] *** Joins: slidercrank (~slidercra@user/slidercrank)
[20:46:06] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[20:48:21] <fiesh> I feel like the very same argument would hold against std::array
[20:48:44] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:49:45] <kalven> but then you came to your senses
[20:50:10] <CarloWood> Xmas puzzle, how do you pass 'Foo' here, so the call to lambda return 42?
[20:50:12] <CarloWood> { auto lambda{[]<typename T>() -> int { return T::n; }}; cout << lambda(); } struct Foo { static constexpr int n = 42; };
[20:50:12] <geordi> error: no match for call to '(main(int, char**)::<lambda()>) ()'
[20:53:33] *** Joins: analognoise1 (~analognoi@ip98-176-154-48.sd.sd.cox.net)
[20:53:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[20:54:49] *** Joins: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de)
[20:54:56] *** Quits: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de) (Client Quit)
[20:57:53] *** Quits: analognoise (~analognoi@185.202.221.238) (Ping timeout: 268 seconds)
[20:58:25] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:58:40] *** Joins: analognoise (~analognoi@91.196.220.236)
[20:58:44] <Alipha> fiesh: individual elements of an array generally don't have different purposes. if you're reading in the lines of a file, for instance, then there's no special difference between line 3 and line 5, generally. now if some of the elements may have special purpose, like if the first line is a header line, then i'd make a named constant so i can do, e.g., `lines[HEADER_INDEX]`.
[20:59:30] <Alipha> you could perhaps separate out that first line into a separate variable, e.g., `struct file { std::string header_line; std::string data_lines[10]; };`
[20:59:31] <kalven> { auto lambda{[]<typename T>() -> int { return T::n; }}; cout << lambda.operator()<Foo>(); } struct Foo { static constexpr int n = 42; };
[20:59:32] <geordi> 42
[21:00:10] <Alipha> but in this case, being able to iterate over the whole array may be useful. whereas if you're using std::pair or std::tuple, you're probably not iterating (and you can't iterate with std::pair)
[21:02:15] *** Quits: analognoise1 (~analognoi@ip98-176-154-48.sd.sd.cox.net) (Ping timeout: 256 seconds)
[21:04:58] <CarloWood> kalven: very good!
[21:06:47] <kalven> merry christmas! 🎅
[21:06:54] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:2546:cc91:ef22:afaa)
[21:07:06] <CarloWood> you too ;)
[21:07:07] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[21:18:08] *** Joins: Betal (~Betal@user/betal)
[21:20:14] <fiesh> Alipha: I think your "purpose" argumentn makes sense.  I guess semantically it's meaningful to argue that a struct's members' order should be irrelevant, whereas for a tuple they must matter
[21:26:23] <PJBoy> I think the crux of the argument is that anything that can have a good name, should
[21:26:31] <PJBoy> order is unrelated IMO
[21:27:02] <PJBoy> especially given that code like `auto [first_name, second_name] = person()` is valid
[21:27:07] <PJBoy> and the order matters there
[21:28:03] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:29:35] <Alipha> well, i think fiesh's point is that you could have `struct person { std::string last_name; std::string first_name; };` instead and it doesn't really matter
[21:36:19] <PJBoy> yeah that was how I interpreted it too
[21:37:40] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[21:37:57] *** Quits: Tokamak (~Tokamak@172.58.188.90) (Ping timeout: 256 seconds)
[21:38:15] *** Joins: eoeek (~eoeek@178.49.152.42)
[21:38:17] *** Quits: robert_ (~hellspawn@47.203.169.95) (Ping timeout: 240 seconds)
[21:38:41] <fiesh> yes, whereas for a tuple, if the order of its elemnts doesn't matter, there seems to be something fishy about it
[21:39:02] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[21:39:12] *** Quits: MajorBiscuit (~MajorBisc@c-001-001-037.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:39:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:02] *** ChanServ sets mode: +v npaperbot
[21:41:31] *** Joins: Tokamak (~Tokamak@166.205.152.22)
[21:42:28] *** Joins: analognoise1 (~analognoi@2600:8801:8c26:9e00:9810:dcc2:3d73:bd7a)
[21:43:15] <Alipha> I mean, I'll still stand by my statement that you should only ever use a std::tuple for template metaprogramming. If you're not using `T...` inside the std::tuple, then you probably shouldn't use a std::tuple, but a named struct with named members
[21:45:57] <fiesh> well of course for template metaprogramming, there are cases where you'll want to define a std::tuple<Type0, Type1, Type2> as a container of types and not expand in it
[21:46:07] *** Quits: analognoise (~analognoi@91.196.220.236) (Ping timeout: 250 seconds)
[21:46:32] <fiesh> but then that's more as taking std::tuple to be a meta-vector of types and never instantiate the tuple anyhow
[21:47:20] <manuels> Alipha i see the point of readability, but unless we can use structured bindings with structs, tuple is quite handy
[21:47:34] *** Joins: analognoise (~analognoi@23.105.41.153)
[21:47:53] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[21:50:57] *** Quits: analognoise1 (~analognoi@2600:8801:8c26:9e00:9810:dcc2:3d73:bd7a) (Ping timeout: 240 seconds)
[21:51:29] <imMute> manuels: you can.
[21:52:03] <imMute> manuels: you have to define something (I think it's std::get<>())
[21:53:08] <cbreak> { auto [a, b] = foo(); } struct X { int a; float b; }; X foo() { return {3, 3.14}; }
[21:53:08] <geordi>  
[21:53:31] <cbreak> manuels: if I had chosen better names, it'd be way more readable than the nonsense in pair / tuple
[22:05:43] <Alipha> manuels: structured bindings work out of the box with structs, as cbreak showed
[22:06:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[22:07:14] <manuels> oh wow thats cool
[22:07:26] <manuels> is it solely the order that matters?
[22:07:59] <manuels> that extreeemely nice
[22:08:18] <cbreak> I never saw the appeal of this
[22:08:18] <manuels> why the heck have I provided backward compatibility for so long :D
[22:08:40] <fiesh> cbreak: I was just about to say I have never used this so far in all my code ;)
[22:09:26] <manuels> well i guess it dependa on what you are doing. but it saves a lot of simple assignent lines.
[22:09:28] <cbreak> auto customer = foo(); use(customer.name, customer.age); seems nicer than auto [customer_name, _1, _2, customer_age] = foo(); use(customer_name, customer_age)
[22:09:30] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:11:49] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:13:05] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:15:20] *** Joins: xkuru (~xkuru@user/xkuru)
[22:15:34] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:18:59] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:19:23] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:21:07] *** Quits: rajkosto (~rajkosto@93-86-90-106.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[22:24:55] *** Quits: rb (~augh@theguntretort.com) (Read error: Connection reset by peer)
[22:25:06] *** Joins: rwb (~augh@theguntretort.com)
[22:27:00] *** rwb is now known as rb
[22:28:19] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[22:38:55] <manuels> do "= default" move ctors simly move memberwise?
[22:40:23] <PJBoy> yup
[22:40:31] <cbreak> manuels: https://en.cppreference.com/w/cpp/language/move_constructor, yes.
[22:40:33] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[22:40:46] <cbreak> "For non-union class types (class and struct), the move constructor performs full member-wise move of the object's bases and non-static members..."
[22:43:56] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 252 seconds)
[22:51:02] *** Joins: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac)
[22:53:05] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:02:55] *** Joins: hooli (~hooli@216.131.88.147)
[23:02:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[23:04:31] *** Quits: hooli (~hooli@216.131.88.147) (Remote host closed the connection)
[23:04:52] *** Joins: hooli (~hooli@216.131.88.146)
[23:05:46] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 245 seconds)
[23:07:26] *** Joins: proller (~p@62.76.32.253)
[23:12:19] *** Quits: proller (~p@62.76.32.253) (Ping timeout: 268 seconds)
[23:24:28] *** Joins: proller (~p@2a02:6b8:b081:a428::1:25)
[23:27:42] *** Quits: darkstarx (~darkstard@50.39.115.145) (Quit: Leaving)
[23:33:55] *** Quits: furrymcgee (~devuan@cgn-89-1-208-9.nc.de) (Quit: leaving)
[23:38:39] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[23:39:07] *** Quits: eoeek (~eoeek@178.49.152.42) (Quit: Client closed)
[23:43:29] *** Joins: vicfred (~vicfred@user/vicfred)
[23:46:19] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[23:46:35] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[23:50:10] *** Quits: constxo (~brad@142.134.38.68) (Quit: WeeChat 2.8)
[23:51:09] *** Joins: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe)
[23:51:26] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[23:52:53] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[23:53:19] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[23:58:40] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[23:58:55] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
