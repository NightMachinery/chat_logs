[00:00:10] <Josh_2> But I want am/pm
[00:00:14] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-70A0-dynamic.midco.net)
[00:00:43] <lotuseater> then provide a simple convertion method
[00:01:04] <nij-> I can load maxima into a lisp repl, but it opens a maxima repl inside it :( Does anyone know how to interact with the maxima object it returns in the lisp repl?
[00:01:31] <lotuseater> so the critical point in my opinion is this 12am/pm thing. or 0am/pm?
[00:01:47] <lotuseater> nij-: you repeat yourself
[00:02:07] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[00:04:03] <nij-> lotuseater? You mean I've asked this before?
[00:04:31] <lotuseater> yes in exact the same way 2 or 3 days ago
[00:05:31] <nij-> I rephrased, and was seeking some more luck this time. Is repeating question not welcome here?
[00:06:12] <lotuseater> I didn't say that.
[00:07:51] <pjb> Josh_2: when I read TinTin destination Moon when I was a child I learned that using 12-hours could lead to catastrophic errors. I don't want to be as idiotic as the Dupont-Dupond (Thomson-Thompson). So ever since, I use 24 hours.
[00:07:53] <nij-> Ok.. just let me know if it's not ok. I'm sure some of my behavior are frown upon by someone. I'm willing to coordinate :)
[00:08:28] <pjb> nij-: maxima repl has a command to go back to a lisp repl.
[00:08:33] <lotuseater> same questions from (different) users happen all the time
[00:08:45] <pjb> nij-: and you have a way to call maxima functions from lisp (and lisp from maxima).
[00:09:05] <pjb> nij-: just check the doc; I've not used maxima for too long, I don't remember how.
[00:09:10] <lotuseater> oh nice, i thought in saying providing another main loop could be helpful
[00:09:45] <lotuseater> pjb: he wants to work on the objects maxima produces
[00:10:04] <nij-> pjb:No actually, it goes back to a lisp repl yes, but not my main lisp repl.
[00:10:15] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:10:33] <nij-> So in my workflow, I call sly/slynk, load in maxima, and open a maxima REPL in my lisp sly repl.
[00:10:48] <nij-> And from there, I can open yet another lisp repl (the 3rd repl so far).
[00:11:21] <nij-> But that's by no means my sly repl. The amount you can interact with it isn't as great as in SLY.
[00:11:49] <Bike> a while back there was a maxima fork to make it more embeddable rather than more of a standalone application. i don't know how well it worked out though. https://github.com/bld/embeddable-maxima
[00:12:00] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[00:12:01] *** Lord_of_Life_ is now known as Lord_of_Life
[00:12:14] <Bike> the original forker seems to have deleted their repo for some reason...
[00:12:56] <_death> gn
[00:12:58] <nij-> Oh! Tried that several days but didn't work.. hmmmmm but I forgot why. I can do that again.
[00:12:59] <lotuseater> or maybe having run maxima the way as slynk, sending messages to it for evaluation
[00:13:19] <pjb> nij-: then perhaps you'll need to check the code for maxima, and see if there's a way to initialize it without entering its repl.
[00:13:36] <pjb> nij-: it may be documented, but if not, use the source, Luke!
[00:14:29] * nij- ducks. Ok, I will try the source!
[00:14:34] <pjb> nij-: if you launch a swank server before launching maxima, it doesn't matter if it has its one repl, with swank you can create new repls, or evaluate expressions in threads.
[00:14:49] <pjb> s/its one/its own/
[00:15:37] <nij-> I don't see a way to use a swank server to talk to maxima either.. :(
[00:16:36] <nij-> By default, the maxima ("to_lisp") lisp repl does not have asdf either. Any idea how I load asdf in maxima's lisp repl?
[00:16:48] <lotuseater> https://xkcd.com/297/
[00:17:10] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 240 seconds)
[00:18:22] <nij-> Bike: thanks :) emb-maxima fails to load here and generate the error https://bpa.st/A6YQ (in case you're interested.. )
[00:18:48] <Bike> i have no idea what that means, sorry. i just remember hearing about embeddable maxima.
[00:18:59] <nij-> Bike: sure, still a lot of thanks too :)
[00:19:34] <nij-> By the way, for who is reading this log in the future, there's another reason why I think embeddable-maxima doesn't provide what I have above. It's a shallow reason though..:
[00:20:24] <nij-> In its official page, there's a "USAGE" procedure: (ql:quickload :embeddable-maxima) (cl-user::run) run_testsuite(); quit();.. you can see that after #'run, it starts to use maxima's syntax. I think that means #'run is bringing me into a maxima repl as well.
[00:21:13] <Bike> i would imagine so, yeah. i would hope that there are other ways to use it than calling (run). that's what i'd expect from being embeddable i guess
[00:23:46] <nij-> No worries. I think my last resort is indeed the source, as pjb suggested.
[00:33:24] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 250 seconds)
[00:51:17] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-70A0-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[01:01:19] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[01:06:04] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[01:08:38] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[01:18:23] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:23:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:27:37] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[01:27:56] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[01:30:16] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[01:31:10] *** Quits: pve (~pve@178-55-32-254.bb.dnainternet.fi) (Quit: leaving)
[01:31:28] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[01:36:29] <lisp123_> Anybody here an expert / semi-expert / interested party in pathfinding algorithms?
[01:37:14] <lisp123_> I have written something (a draft) that seems useful to me (in Common Lisp), but want to share for thoughts & to see if its different to a uniform cost search or any other established method - bit hard for me to follow
[01:41:47] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:42:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:46:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:46:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:46:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:47:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:48:55] <jasom> pjb: some of us need to support users as idiotic as Dupont-Dupond
[01:52:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[01:56:10] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[01:56:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:00:59] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:13:21] <anddam> semi-ot, can someone help me with Sly package not being able to connect to Slynk? https://termbin.com/wxp9
[02:16:15] *** Joins: akoana (~ah@user/akoana)
[02:21:23] <Josh_2> Why are you using clisp?
[02:21:37] <Josh_2> Might be worth just trying SBCL/CCL
[02:25:06] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[02:26:00] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:28:26] <kakuhen> im more interested in why clisp is in /bin o.O
[02:28:56] <kakuhen> sly works on my end with clisp, so I'm not sure what's going wrong with their setup
[02:29:37] <kakuhen> anddam: I'm assuming you're invoking M-x sly and choosing the binary?
[02:37:30] <anddam> kakuhen: /bin is likely due to Void's packaging choice
[02:37:57] <anddam> kakuhen: I am opening a file in lisp-mode and then calling sly
[02:38:25] <anddam> kakuhen: I have set the inferior lisp program to /bin/clisp
[02:38:29] <kakuhen> btw it may be better to move this discussion to #emacs
[02:38:43] <anddam> ok, I tried a couple times last few days
[02:59:02] *** Joins: selwyn (~selwyn@user/selwyn)
[03:01:05] *** Quits: frgo (~frgo@p200300deef0cee0055753606a3ff1096.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:01:33] *** Joins: frgo (~frgo@p200300deef0cee0055753606a3ff1096.dip0.t-ipconnect.de)
[03:20:01] <Josh_2> Can I make macros compile at runtime?
[03:20:50] <Bike> could you elaborate on what exactly you want?
[03:20:51] <Josh_2> I'm confused xD
[03:21:25] <Josh_2> Okay, so I have a top level macro for writing web pages, however each of those macros will rely on information that doesn't exist until the system starts and is running
[03:22:02] <Bike> You mean, how they expand depends on this information?
[03:22:04] <moon-child> what sort of informatiaon?
[03:22:09] <moon-child> they need this at expansion time?
[03:22:10] <Josh_2> Runtime information
[03:22:19] <Josh_2> well
[03:22:27] <Josh_2> uh
[03:22:37] *** Quits: gaqwas (~john@dynamic-095-115-015-217.95.115.pool.telefonica.de) (Ping timeout: 268 seconds)
[03:23:08] *** Joins: dnaeon (~dnaeon@user/dnaeon)
[03:23:16] <Josh_2> I have my entry function that starts up hunchentoot and also sets the value of my variable *server* to a custom acceptor, my macros for writing webpages relies on *server* being that instance of my custom acceptor
[03:24:22] <moon-child> why does the macro need that?  That seems like something that could be dealt with by the generated code
[03:24:43] <Josh_2> Because objects are put within that variable
[03:29:29] <Josh_2> https://github.com/K1D77A/cl-bloggy/blob/master/src/test-server.lisp you can see what is almost happening here, the difference between that and what I'm doing is that I have (new-..) and (add-image ..) along with (make-instance 'bloggy-acceptor ) all inside the function that is executed when the program is started after a save-lisp-and-die
[03:34:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[03:45:44] <Josh_2> Well I can always put them into a directory near where it is built and then run load
[03:47:06] *** Quits: random-nick (~random-ni@87.116.181.225) (Ping timeout: 250 seconds)
[03:48:42] <Josh_2> :angry:
[03:49:12] <Josh_2> Okay I figured it out :joy:
[03:49:34] <pjb> jasom: oh, if it's a customer's required, then no problem, whatever they ask. They're paying they'll be paying to repair their catastrophes ;-)
[03:55:01] <Josh_2> can I share information between compile time and run time? For example if I wanted to store a list of function names programmatically so that I could call them all at run time without having to manually write them down can I do that?
[03:55:46] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 250 seconds)
[03:55:57] <Josh_2> so I would compile, save-lisp-and-die, I'd have a macro that at compile time wrote a variety of function names into some variable, and then at runtime I can execute a function which would lookup all of the functions in that variable and execute them
[04:04:40] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[04:09:33] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[04:10:51] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:11:25] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[04:25:10] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:cb9:2d96:4da8:aca7) (Ping timeout: 240 seconds)
[04:31:18] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[04:31:19] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[04:31:32] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[04:40:02] *** Quits: dnaeon (~dnaeon@user/dnaeon) (Ping timeout: 245 seconds)
[04:49:13] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 248 seconds)
[04:51:13] *** Joins: aeth (~aeth@user/aeth)
[05:04:40] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[05:04:48] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[05:10:44] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 250 seconds)
[05:18:32] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 250 seconds)
[05:18:48] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[05:38:30] *** Joins: igemnace (~ian@user/igemnace)
[05:43:49] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[05:46:27] <mfiano> Is a separate asd file recommended for auxiliary systems such as unit tests, or placed in the same asd file. I know that asdf will warn you that secondary systems in the same file must be the name of the file with a / appended to it, but I was just wondering if anyone has any good reasons for putting secondary systems in the same file as opposed to a separate one.
[05:46:40] <mfiano> ? after first sentence :)
[05:48:47] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:02:00] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[06:02:23] *** Joins: Alfr (~Alfr@user/alfr)
[06:04:10] *** Parts: akoana (~ah@user/akoana) (Leaving)
[06:05:48] <pjb> Josh_2: it's possible.
[06:06:10] <pjb> mfiano: yes, I would recommend one asdf system per asd file, with the file name being the name of the system suffixed with .asd
[06:06:28] *** Joins: ahc (~ahc@121.98.229.241)
[06:06:41] <pjb> mfiano: by the way, there are warning issued now when you put multiple systems in a single asd file.
[06:07:13] <pjb> Josh_2: you would write a macro that would collect the function name, and expand to a form that would make them available at run-time.
[06:13:19] <pjb> Josh_2: https://termbin.com/7bh7
[06:15:31] <Josh_2> pjb: so with something like this I am able to use asdf make to save my lisp image, and then on resumption I could execute all the functions defined with your define-fun using call-funs?
[06:37:12] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Ping timeout: 245 seconds)
[06:38:01] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[06:38:59] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[06:39:46] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[06:55:47] <rdrg109> TIL StumpWM is a windows manager in Common Lisp
[06:56:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[06:59:06] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[07:16:46] *** Quits: prxq_ (~quassel@x4db5bc22.dyn.telefonica.de) (Ping timeout: 252 seconds)
[07:16:57] *** Joins: prxq (~quassel@x4db44d01.dyn.telefonica.de)
[07:31:20] <beach> Good morning everyone!
[07:36:04] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[07:39:11] *** Joins: notzmv (~zmv@user/notzmv)
[07:39:12] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[07:55:24] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[07:59:04] *** Quits: raeda (~raeda@72.49.219.33) (Quit: Leaving)
[08:08:19] *** Joins: semz (~none@user/semz)
[08:19:06] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[08:23:37] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 248 seconds)
[08:25:45] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 248 seconds)
[08:30:24] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[08:38:43] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 252 seconds)
[08:38:51] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:39:36] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 250 seconds)
[08:39:38] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[08:41:47] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[09:32:57] <lotuseater> Good morning to you again beach :)
[09:37:01] <beach> lotuseater: What does your nick refer to?  I mean, I know that lotus seeds are edible, and I have had some in the past.
[09:37:40] <lotuseater> I had this idea last year, cause I thought on a new nick name that fits to me too.
[09:37:58] <lotuseater> It refers to a radio speech by David Hilbert from 1930.
[09:38:21] <beach> Oh!
[09:38:46] <lotuseater> There he quotes Kronecker, who once compared the number theorists to the lotophagues from Greek mothology.
[09:39:10] <beach> Hmm.  I see.
[09:39:33] <lotuseater> And as I see myself partly in that field with my heart I thought this could be good. :)
[09:40:11] <lotuseater> The quote goes like "... and when they once ate a piece of it they never can let go from it."
[09:41:19] <beach> Yes, I understand.
[09:41:21] <lotuseater> It was one year before Gödel contracted Hilbert's vision of "We can prove or disprove everything."
[09:41:50] <lotuseater> From where your nick origins I got once when you told me. :) Funny word play.
[09:42:31] <lotuseater> But please don't ask me about algebraic number theory. ^^
[09:43:13] <beach> I won't.
[09:43:47] <lotuseater> But I'm sure it will happen over and over again that I ask dumb CL questions.
[09:43:49] <kakuhen> lotuseater: hey I have a question about Gal(Q) ;)
[09:44:19] <lotuseater> kakuhen: No, I don't know anything of this.
[09:45:26] <lotuseater> I'm interested in things like "Concrete Mathematics" by Don Knuth offers. Still much to learn. So sorry, I will quit now being offtopic. :)
[09:47:32] <kakuhen> im more interested in "mathematics," if that makes sense; unfortunately, it's hard to get computers to do symbolic computation, but maybe it's easier in common lisp? I'll find out eventually
[09:48:03] <kakuhen> Several weeks ago I rewrote a naive implementation of xorshiro256 in common lisp, with the end-goal being to be able to randomly generate floats with uniform distribution over R
[09:48:12] <kakuhen> Doing this because I can't trust RANDOM across implementations >.<
[09:48:19] <lotuseater> Mathematics is a very generic term.
[09:48:55] <lotuseater> kakuhen: Oh yes, I liked the capabilities for that from the beginning of my journey.
[09:52:57] <lotuseater> But when doing symbolic mathematics with the computer I learned or better realized how ambigous mathematical notation is in traditional notation, so it's important staying consistent to catch everything.
[09:53:08] *** Quits: etiago (~etiago@user/etiago) (Quit: ZNC 1.8.2 - https://znc.in)
[09:54:45] <lotuseater> or how unclear algorithms in math books or papers with pseudo code can be specified
[09:55:45] <kakuhen> eh, I've never understood complaints about mathematical notation, but that's an issue to be discussed elsewhere, not here.
[09:56:16] <kakuhen> anyway, I'm trying to find a good paste site so I can share my RNG code and have some people here criticize how i write lisp
[09:56:41] <kakuhen> the usual site I use destroys the indentation, unfortunately.
[09:57:08] <lotuseater> https://plaster.tymoon.eu/edit#
[09:57:33] <kakuhen> https://paste.debian.net/1208407/
[09:57:34] <kakuhen> oh, too late w
[09:57:51] *** Joins: etiago (~etiago@user/etiago)
[10:02:55] <lotuseater> ah you use iterate. i heard it's good for when one wants extensibility
[10:03:27] <kakuhen> there's a funny reason I first starting using iterate
[10:03:55] <kakuhen> the way one of my friends used LOOP made me never want to do anything with it, because the syntax annoyed me greatly
[10:04:01] <lotuseater> I could try sometime writing a Mersenne Twister.
[10:04:10] <kakuhen> so I decided to try importing iterate into this software, and I really liked it, and so did he
[10:04:27] <kakuhen> then in the future I asked "should we really be mixing loop and iterate all over the place? or stick with just one?"
[10:04:33] <kakuhen> we went with the latter option
[10:04:42] <lotuseater> great if it fits your needs. i saw in the gitlab repo it's literally one file
[10:05:03] <kakuhen> eventually I replaced all LOOP code with ITERATE; and the convention in this software is, quite literally, "Don't loop, iterate!" (the title of the paper it was introduced in!)
[10:05:49] <lotuseater> I remember one of the first talks by beach I saw was the one about LOOP from 2014.
[10:06:35] <lotuseater> In PAIP there's a chapter on how to implement parts of LOOP. so it's for you to decide how to build the DSL syntax
[10:10:15] <lotuseater> in XOSHIRO256+ you could define a closure for doing this (mod ... mask)
[10:10:31] <beach> Ah, yes, one of my first SICL-related papers.
[10:10:54] <lotuseater> or maybe also define local symbol-macros like state[1] for (aref state 1)
[10:11:36] <beach> 2016 it seems.
[10:11:56] <lotuseater> Oh okay I just tried to remember.
[10:12:14] <beach> http://metamodular.com/SICL/
[10:12:35] <lotuseater> right, the ELS talk on YT has timestamp May 30, 2016
[10:13:14] <lotuseater> kakuhen: and the trick I learned 2 weeks ago, when setf-ing on symbol-macros a SETQ is enough, it's a special rule
[10:13:19] <beach> kakuhen: You should have three semicolons on top-level comments.
[10:13:50] <lotuseater> Some of the SICL papers I downloaded but not yet read all.
[10:13:56] <beach> clhs 2.4.4.2
[10:13:56] <specbot> Notes about Style for Semicolon: http://www.lispworks.com/reference/HyperSpec/Body/02_ddb.htm
[10:14:46] <beach> kakuhen: And line 22 violates the rule that is stated on page 13 of the LUV slides by Norvig and Pitman.
[10:14:57] *** Joins: [deleted] (~livoreno@user/notzmv)
[10:15:23] <beach> kakuhen: Same thing with line 25.
[10:15:24] <lotuseater> I should look that up myself again.
[10:16:07] <lotuseater> beach: You know that by heart, right? ^^
[10:16:26] <beach> The page number?  Of course.
[10:17:35] <lotuseater> but I'm not sure how to reconstruct that piece
[10:17:59] <lotuseater> or (assert (and nums ...)) ?
[10:18:09] <lotuseater> ah no
[10:19:27] <beach> You mean how to make it conform to the LUV slides?
[10:19:32] <lotuseater> yes
[10:19:41] <beach> (unless (null nums) ... to start with.
[10:20:07] <lotuseater> ah so the intention gets clear, right?
[10:20:13] <beach> Yes.
[10:20:32] <beach> And (if (null nums) (iter ...) nums)
[10:20:35] <lotuseater> Like you once advised me with (zerop x) vs (= x 0)
[10:21:06] <beach> That's a different rule though.  It's the one that says to use the most specific construct that will have the desired effect.
[10:21:09] <lotuseater> Okay I'll remember that when I run into that myself next time or see it at some point of my code.
[10:21:32] <beach> ... as in (1+ ...) rather than (+ ... 1)
[10:21:42] <lotuseater> right
[10:22:55] <lotuseater> (+ 0 (* 1 (expt (sqrt (1+ (1- x))) 2)))
[10:23:20] <beach> Heh.
[10:23:40] <beach> Could be the expansion of a macro call.
[10:23:59] <lotuseater> right, so then compiler macros could help out
[10:24:23] <beach> No need.  The compiler is smart enough to simplify that form.
[10:24:42] <lotuseater> Okay, I trust it. :)
[10:25:11] <lotuseater> I mean the compiler, I trust you of course with no doubt.
[10:25:38] <beach> kakuhen: And I would break the documentation string for MAKE-RNG-STATE into 2 or more lines.
[10:25:41] *** Quits: elderK (uid205007@id-205007.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[10:26:52] <lotuseater> kakuhen: and you could use #+ for also supporting 32bit :)
[10:27:31] <lotuseater> So how was this rule of thumb, about up to length 100 lines?
[10:29:04] <beach> I try not to go above 80, but it's a soft limit.  It depends on how many pixels you have on your screen(s) and how many documents you can comfortably display side by side.
[10:29:47] <lotuseater> Or having a wide screen monitor.
[10:31:31] <lotuseater> But all in all the code looks good.
[10:42:55] <kakuhen> beach lotuseater: thanks for the feedback! I'm currently reading it as I type this
[10:43:07] <kakuhen> regarding character limits, I was told to apply it for code but not necessarily for docstrings
[10:43:09] <kakuhen> is this a good practice?
[10:43:19] <kakuhen> (fwiw, this is the convention I apply in the code I posted)
[10:43:53] <lotuseater> no that should go for docstrings the same
[10:44:46] <lotuseater> you could use #.(format nil "...~NEWLINE...~NEWLINE...")
[10:46:34] <kakuhen> oh good idea; I should learn how to do that
[10:49:15] *** Quits: frgo (~frgo@p200300deef0cee0055753606a3ff1096.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:06:49] *** Joins: livoreno (~livoreno@user/notzmv)
[11:08:52] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[11:09:32] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[11:19:21] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[11:19:23] *** Joins: gaqwas (~john@dynamic-095-117-050-142.95.117.pool.telefonica.de)
[11:31:00] *** Joins: selwyn (~selwyn@user/selwyn)
[11:31:03] *** Joins: notzmv (~zmv@user/notzmv)
[11:34:21] *** Joins: pve (~pve@176-93-41-183.bb.dnainternet.fi)
[11:47:40] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 268 seconds)
[12:00:44] *** Joins: asarch (~asarch@2806:10ae:7:defb:50b9:3c23:df0a:b244)
[12:01:38] *** Joins: dnaeon (~dnaeon@46.10.222.189)
[12:01:38] *** Quits: dnaeon (~dnaeon@46.10.222.189) (Changing host)
[12:01:38] *** Joins: dnaeon (~dnaeon@user/dnaeon)
[12:03:16] *** Quits: asarch (~asarch@2806:10ae:7:defb:50b9:3c23:df0a:b244) (Client Quit)
[12:09:06] *** Joins: frgo (~frgo@dynamic-046-114-144-120.46.114.pool.telefonica.de)
[12:10:11] *** Quits: dnaeon (~dnaeon@user/dnaeon) (Quit: EOF)
[12:17:39] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:cb9:2d96:4da8:aca7)
[12:30:01] *** Joins: shka (~herr@109.231.62.239)
[12:34:03] *** Quits: frgo (~frgo@dynamic-046-114-144-120.46.114.pool.telefonica.de) (Remote host closed the connection)
[12:34:38] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[12:36:05] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:00] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:44:43] *** Joins: domovod_ (~domovod@176.196.122.197)
[12:47:52] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[13:04:14] *** Joins: rain3 (~rain3___@79.115.250.43)
[13:08:36] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:15:22] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[13:25:49] *** Quits: pve (~pve@176-93-41-183.bb.dnainternet.fi) (Ping timeout: 252 seconds)
[13:37:46] <lisp123> CL Command Line TooL: https://www.reddit.com/r/lisp/comments/p8gk71/clingon_commandline_options_parser_system_for/
[13:37:56] <lisp123> May be useful to some of you
[13:39:14] *** Joins: frgo (~frgo@dynamic-046-114-144-120.46.114.pool.telefonica.de)
[13:43:10] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[13:44:33] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[13:48:35] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:50:29] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[13:57:45] *** Quits: frgo (~frgo@dynamic-046-114-144-120.46.114.pool.telefonica.de) (Remote host closed the connection)
[13:58:56] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[14:03:34] <pjb> lisp123: so we already had 3 CLON libraries doing the same (using the same fucking name!). Now they add other libraries to do the same with smartass names…
[14:04:45] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[14:05:12] <kakuhen> At least it isn't "unit testing framework no. ω" ;)
[14:11:50] *** Joins: makomo (~makomo@user/makomo)
[14:13:59] <pjb> kakuhen: :-)
[14:16:25] *** Quits: domovod_ (~domovod@176.196.122.197) (Quit: WeeChat 3.2)
[14:17:44] <lisp123> pjb: Heh, I didn't know that
[14:21:05] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:21:22] *** Joins: amb007 (~a_bakic@178-221-182-70.dynamic.isp.telekom.rs)
[14:27:10] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[14:27:53] *** Quits: amb007 (~a_bakic@178-221-182-70.dynamic.isp.telekom.rs) (Ping timeout: 248 seconds)
[14:28:56] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[14:29:36] <pjb> lisp123: when we still had cll, you could read up the backlock, and get the whole history of CL… But nowadays, it's more difficult. You have a multitude of sources to check, irc, web sites, who knows where…
[14:30:13] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[14:40:23] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:40:23] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:40:41] <lisp123> pjb: Yeah I wish we had a functional CLL instead of all these sources
[14:40:49] <lisp123> But we live in the world we live in
[14:41:14] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[14:45:20] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:45:34] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:45:49] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[14:51:16] *** Joins: selwyn (~selwyn@user/selwyn)
[14:52:08] *** Joins: frgo (~frgo@185.66.193.56)
[14:54:26] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 250 seconds)
[14:55:34] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[14:58:48] *** Joins: lisp123_ (~lisp123@45.86.202.23)
[15:01:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[15:04:48] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:06:32] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[15:07:28] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[15:10:50] *** Quits: frgo (~frgo@185.66.193.56) (Remote host closed the connection)
[15:11:12] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-70A0-dynamic.midco.net)
[15:12:10] <nij-> Is there a way to write a macro to abstract line 131~150 in https://github.com/sharplispers/clawk/blob/master/clawk.lisp#L131 ? I encountered similar problem a few days ago.
[15:12:24] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[15:12:45] <nij-> So the final goal will produce those 20 lines by (loop for i from 1 to 20 do (goal i))
[15:13:07] <nij-> Even better, from 130~221 we can do similar things.
[15:13:47] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[15:14:56] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[15:15:49] <nij-> Or maybe it's not.. the tricky part is to snatch a character with the number.
[15:15:52] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[15:16:02] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[15:25:04] *** Joins: frgo (~frgo@2a03:2260:3016:1306:f13b:baa8:9d39:88bd)
[15:27:03] *** Joins: random-nick (~random-ni@87.116.176.45)
[15:29:10] *** Quits: frgo (~frgo@2a03:2260:3016:1306:f13b:baa8:9d39:88bd) (Ping timeout: 240 seconds)
[15:33:42] <lisp123_> I assume this is not possible, but is there a way to specialise a generic method on a -list- of a particular object? (I assume no, so I would need to specialise on list and then check for the object-type)
[15:44:24] <beach> nij-: You may have to use EVAL.
[15:44:56] <beach> lisp123_: Correct.
[15:46:12] <lisp123_> beach: Thanks!
[15:56:05] <jeosol> good morning everyone
[15:56:14] <beach> Hello jeosol.
[15:56:18] <jeosol> beach: hope you are well
[15:56:29] <beach> Very well thank you.  You too?
[15:57:28] <jeosol> Yes, doing ok. Still making my foray going over algorithms again - just finished graph and graph processing algorithms and its application in software module packaging, compilation
[15:57:44] <jeosol> This is something I am interested in to speed up my compilation but I have to come to it much later on
[15:57:47] <beach> Wow, ambitious.
[15:58:00] <jeosol> Oh no, I didn't mean I am implementing that --- no no
[15:58:11] <jeosol> I am not a compiler person at all, my goal is in the application side
[15:58:17] <jeosol> of things
[15:58:18] <beach> Even just reading up on it.
[15:58:25] <jeosol> Oh I see what you mean
[15:58:50] <jeosol> I was trying to get better deeper understanding of these graph algorithms and eventually pick a related CL one
[15:58:58] <jeosol> to work with and extend if possible
[15:59:23] <beach> Sounds good.
[16:00:27] <jeosol> I did a section on symbol tables search algorithms (trees, BSTs, red-black BST's, and hashing). I wanted to ask the type of methology to resolve collisions that you use in SICL or used in CL: linear probing or separate chaining that uses linked lists in the array indices
[16:00:32] <nij-> beach, gotcha :) lemme try
[16:00:33] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-70A0-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[16:00:35] <jeosol> I assume the latter since its more space efficient
[16:01:14] <jeosol> beach: symbol tables above is not the same as in CL parlance, but much like key-value symbol tables for search
[16:02:10] <beach> jeosol: In hash tables?  I think hayley implemented several versions, and they are all in the SICL repository.
[16:02:28] <hayley> A hash table? SICL has both linear probing and linked list buckets.
[16:02:49] <beach> That's what I thought.  Thank you.
[16:03:12] <hayley> The former (with a SIMD-within-a-register partial hash search trick) is a bit faster.
[16:03:45] <jeosol> hayley: thanks for that. There are benefits with the linear probing one so good to have both
[16:04:01] <jeosol> very interesting
[16:04:13] <hayley> And I believe the former is more space efficient too, as linked list buckets "waste" space to CDRs, and the partial hashes let us drive up the load factor somewhat.
[16:04:33] <beach> jeosol: For search trees, you may want to look into splay trees.  They are simpler to implement than red-black trees, and they are self-caching.
[16:05:43] <jeosol> beach: and self balancing too to keep the height reasonable ~ h ~ log(n)
[16:06:09] <jeosol> I guess it's trying to get some guarantee on growth rates.
[16:06:15] <beach> Right.
[16:06:20] <jeosol> beach: thanks, I will take a look at splay trees
[16:06:48] <beach> I use splay trees for the lines of a standard Cluffer buffer.  It's a perfect fit.
[16:07:29] <beach> Editors tend to exhibit spatial locality, and splay trees can keep several regions close to the root.
[16:08:27] <jeosol> beach, haylay: It may be too much work at this time, did you do some benchmark - not sure it's necessary at this time, but I believe the codes are optimized as much as possible
[16:08:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:09:03] <hayley> I should have a graph of hash table performance somewhere...
[16:09:13] <jeosol> beach: that's better is many regions are not too far from root. Will take a look at cluffer
[16:09:14] <beach> jeosol: For hash tables?  Not me!  hayley is in charge.
[16:09:35] <jeosol> beach: ok noted
[16:09:59] <hayley> https://applied-langua.ge/~hayley/sicl-hash-tables.png Note all are swamped by SBCL generic function overhead - I wrote them in a SICL style.
[16:09:59] <jeosol> better if many regions ...
[16:11:19] <jeosol> hayley: thanks for the link. I guess bucket hashtable is the one that uses the linked-list when indices collide
[16:11:19] <hayley> With real SIMD: https://raw.githubusercontent.com/no-defun-allowed/simd-sicl-hash-table/master/performance.png
[16:11:45] <hayley> I don't have a graph with DEFSTRUCT on SBCL, but from memory you can mentally subtract 50ns or so.
[16:12:25] <jeosol> hayley: very nice work. thanks for the graphs
[16:14:03] <hayley> Sure.
[16:14:59] <jeosol> haylay: so I am clear, what is "list hashtable" in the graphs
[16:15:22] <jeosol> as in the underlying data structure used for the implementation?
[16:16:00] <hayley> It is a "hash table" implemented using an alist, yes.
[16:17:20] <hayley> The names correspond to class names in SICL. And, yes, the bucket hash table is the one that uses linked lists.
[16:26:12] <mfiano> beach: You may want to look into partial splay trees, which are often a better choice.
[16:26:42] <beach> mfiano: Never heard of them.  I'll check it out.  Thanks.
[16:26:57] <mfiano> Let me find the paper
[16:28:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[16:30:00] <mfiano> beach: I _think_ this was the one I read: https://eapache.github.io/assets/Huus2014_SplayTrees.pdf
[16:30:17] <beach> Thank you!
[16:34:41] <beach> Looks like *the* paper to read for a summary of improvements to the original design.
[16:35:38] <jeosol> haylay: thanks for clarifying that
[16:36:20] <mfiano> Yeah I'm just noticing that. I don't know if this was the paper I read now...
[16:36:27] <mfiano> But still probably decent to read
[16:36:34] <beach> Yeah.
[16:36:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:36:49] <beach> I'll search for partial splay trees myself.
[16:38:48] <hayley> The paper mentions "partway" splaying, which I guess could be read as "partial" if one reads too quickly. But if mfiano says he couldn't find what he was thinking of, I suppose that is not the case.
[16:40:36] <mfiano> The paper references https://doi.org/10.1080/02522667.1992.10699094
[16:40:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[16:40:46] <mfiano> the original partial splaying scheme introduction
[16:40:50] <mfiano> THat could be it
[16:42:02] <mfiano> Yes that was it
[16:42:23] <beach> Perfect!
[16:44:51] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:51:00] <mfiano> mfiano couldn't find what he was looking for because his eyes are barely open yet
[16:51:41] <beach> mfiano: Aren't you supposed to be off on vacation?
[16:52:10] <mfiano> We have a tropical storm with thunderstorms all weekend, so we are doing something else today only, while staying home
[16:52:44] <beach> Oh, wow.  The same one that hit Haiti?
[16:52:50] <mfiano> Yes
[16:52:55] <beach> I see.
[16:55:13] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[17:07:58] *** Joins: frgo (~frgo@p200300deef0cee0078c22167175f77d8.dip0.t-ipconnect.de)
[17:08:05] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[17:12:14] *** Quits: frgo (~frgo@p200300deef0cee0078c22167175f77d8.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:12:23] *** Joins: notzmv (~zmv@user/notzmv)
[17:15:16] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:15:40] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:16:25] <pjb> beach: actually nij- should write a reader macro for $ to read $42 and $NF, not generate a ton of symbol-macros. What if the regexp has one more group?
[17:17:31] <beach> Makes sense.  I didn't look very deep into the problem to be solved.
[17:19:37] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:23:30] *** Quits: santiagopim (~user@90.166.59.254) (Ping timeout: 250 seconds)
[17:42:36] *** Joins: Bike (~Bike@71.69.170.70)
[17:42:36] *** ChanServ sets mode: +o Bike
[17:50:58] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[17:51:12] *** Joins: Bike (~Bike@71.69.170.70)
[17:51:13] *** ChanServ sets mode: +o Bike
[17:53:30] *** Quits: lonjil (~quassel@user/lonjil) (Quit: Quit.)
[17:55:25] *** Joins: lonjil (~quassel@user/lonjil)
[18:00:16] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[18:01:11] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[18:08:30] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[18:10:13] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Ping timeout: 244 seconds)
[18:11:04] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[18:15:33] *** Joins: frgo (~frgo@p548a3042.dip0.t-ipconnect.de)
[18:15:36] *** Quits: frgo (~frgo@p548a3042.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:16:06] *** Joins: frgo (~frgo@p200300deef0cee00f9da5bd7fd0d5e32.dip0.t-ipconnect.de)
[18:17:19] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:20:46] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:21:32] *** Quits: frgo (~frgo@p200300deef0cee00f9da5bd7fd0d5e32.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:21:42] *** Joins: frgo (~frgo@p200300deef0cee00f9da5bd7fd0d5e32.dip0.t-ipconnect.de)
[18:30:31] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[18:30:40] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[18:31:09] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[18:50:46] *** Quits: frgo (~frgo@p200300deef0cee00f9da5bd7fd0d5e32.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:50:55] *** Joins: frgo (~frgo@p200300deef0cee00f9da5bd7fd0d5e32.dip0.t-ipconnect.de)
[18:51:29] *** Joins: frgo_ (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de)
[18:53:04] *** Quits: frgo_ (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:53:05] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[18:53:14] *** Joins: frgo_ (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de)
[18:53:33] *** Joins: amb007 (~a_bakic@178-221-45-159.dynamic.isp.telekom.rs)
[18:54:06] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[18:55:22] *** Quits: frgo (~frgo@p200300deef0cee00f9da5bd7fd0d5e32.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[18:55:28] *** Quits: frgo_ (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:55:36] *** Joins: frgo (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de)
[18:59:04] *** Joins: shka (~herr@109.231.62.239)
[19:06:16] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[19:14:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:17:54] *** Quits: lisp123_ (~lisp123@45.86.202.23) (Ping timeout: 250 seconds)
[19:20:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[19:24:09] *** Quits: Skyfire (~pyon@user/pyon) (Remote host closed the connection)
[19:24:27] *** Joins: Skyfire (~pyon@user/pyon)
[19:40:37] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[19:42:21] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[19:43:13] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[19:54:29] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[20:00:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[20:03:45] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[20:18:40] *** Quits: amb007 (~a_bakic@178-221-45-159.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[20:19:05] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[20:39:39] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[20:43:03] *** Joins: raeda (~raeda@72.49.219.33)
[20:49:44] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[20:49:55] *** Joins: amb007 (~a_bakic@87.116.163.221)
[20:59:58] *** Joins: skami (~user@bras-base-strepq0102w-grc-14-76-69-161-248.dsl.bell.ca)
[21:03:23] <skami> Hello ! I'm trying to have a slynk repl that has access to the context I'm running it in. For instance by doing something like, https://pastebin.com/2eVBedr2, id like to be able to access 'var' and 'i'
[21:07:55] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:14:51] *** Joins: Bike (~Bike@71.69.170.70)
[21:14:51] *** ChanServ sets mode: +o Bike
[21:15:52] <pjb> skami: there's no standard way to get access to that lexical context.  If some implementation gives you access to it, then you can use its specific API.  Otherwise, you will have to implement your own analyser (or use eg. that of sicl), to build the information and data structures you need in the editor.
[21:16:42] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:18:31] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[21:20:41] *** Quits: Fade (fade@outrider.deepsky.com) (Ping timeout: 252 seconds)
[21:20:53] <pjb> skami: note that "getting access to var and i" is something that is lexically determined. You cannot get access to them outside of the form. When your cursoris just before (loop, you would have access only to var, not to i.
[21:21:38] *** Joins: Fade (fade@outrider.deepsky.com)
[21:22:30] <pjb> skami: also, note the syntax of loop is: loop [name-clause] {variable-clause}* {main-clause}* => result* ; and initially is a main-clause while for is a variable-clause. So 1- you should move initially after for, and 2- you have lexical access to i in the initially form.
[21:23:35] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:23:48] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:24:10] <pjb> skami: but this can only be determined after macroexpanding the macros! You could hard code it form CL macros and CL special operators, and also it might be difficult to rely on the implementation-provided macros since their expansions can be "suprising", but for user defined macros, you'll have to expand them.
[21:24:36] <pjb> skami: this means that you will need to be able to evaluate user code (those eval-when :compile-toplevel functions defined by the user to be used in the macro bodies…
[21:24:45] <pjb> skami: again, you could get some help from sicl.
[21:25:05] <pjb> skami: what I'm saying is that you need to implement basically your own compiler.
[21:25:42] <Josh_2> When using nginx as a reverse proxy have any of you had unexpected behaviour with urls? Seems that nginx is decoding !! at the end of my urls, urls that I have encoded with do-urlencode
[21:25:49] <pjb> skami: note that you are allowed to use macroexpand "in the editor", even if the user macros have side effects and are not idempotent: it's the job of the user to write their macros so that doesn't pose any problem.
[21:28:08] <pjb> skami: but this also mean that you could get errors and other problems, that you should protect yourself against. perhaps you could have a look at clpm and how they use separate processes to avoid that kind of problem (in the case of clpm, to avoid problems with different versions for dependencies).
[21:29:47] <pjb> skami: ie. you might want to fork your own CL implementation to perform the loading, compiling, macroexpansion, and environment extraction, instead of doing it the user image where he's working.  On the other hand, this poses the problem of the *features* (if it's a different CL implementation), and of the set of libraries loaded that may be needed (in a specific version) by the user macros.
[21:30:23] <pjb> skami: again, perhaps sicl could help, with the work beach did on 1st class environments.
[21:32:32] <pjb> skami: of course, you can also try to do a half-assed job using heuristics…
[21:33:26] <pjb> skami: for example, you could just check whether there's a symbol var in some surrounding sexp, in some special place (ie a binding position).
[21:34:11] <pjb> skami: even if that's not the meaning of the code, or if some macro could hide or give a different meaning.  It'd work only have the time as any half-assed job that respect itself should do.
[21:38:20] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[21:39:38] <skami> pjb: Thanks a lot ! sicl's environments look very interesting.
[21:39:59] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Ping timeout: 244 seconds)
[21:43:30] <skami> Some hack where I use macros to catch the lexical bindings i'm interested in and rebind them in the repl might be a quick way to do that
[21:48:31] *** Quits: amb007 (~a_bakic@87.116.163.221) (Ping timeout: 252 seconds)
[21:48:44] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[21:53:52] *** Quits: ^[ (~user@user//x-8473491) (Quit: ^[)
[22:00:39] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[22:03:07] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[22:03:41] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[22:08:21] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[22:16:04] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[22:17:19] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[22:30:00] *** Joins: cosimone` (~user@93-34-132-136.ip49.fastwebnet.it)
[22:30:53] *** Quits: cosimone` (~user@93-34-132-136.ip49.fastwebnet.it) (Remote host closed the connection)
[22:31:10] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[22:31:12] *** Joins: cosimone` (~user@93-34-132-136.ip49.fastwebnet.it)
[22:32:02] *** Quits: cosimone` (~user@93-34-132-136.ip49.fastwebnet.it) (Remote host closed the connection)
[22:32:24] *** Joins: cosimone (~user@93-34-132-136.ip49.fastwebnet.it)
[22:44:52] *** Joins: attila_lendvai (~alendvai@1f2e58b8.dsl.pool.telekom.hu)
[23:02:39] *** Joins: z147 (~z147@gateway/tor-sasl/z147)
[23:09:48] *** Quits: attila_lendvai (~alendvai@1f2e58b8.dsl.pool.telekom.hu) (Quit: Leaving)
[23:12:10] *** Quits: cosimone (~user@93-34-132-136.ip49.fastwebnet.it) (Ping timeout: 268 seconds)
[23:19:35] <lisp123> I am trying to add some useful logging for recursive functions (doing it myself, no logging libraries, I don't they really add much)
[23:20:04] <lisp123> For now, I am just using (progn (logging expression) (main expression))  --> Is there really any better way?
[23:21:13] <lisp123> I couldn't find a way to keep the logging in a separate function, since it needs access to the lexical variables
[23:22:56] * edgar-rft goes into the woods for logging some trees
[23:23:14] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:24:01] <lisp123> If there is a bug in a forest and no one is around to see it, does it a program crash?
[23:25:57] <edgar-rft> I've heard there live many bugs in the forests :-)
[23:27:23] <edgar-rft> but it's right, many of them hide under the bark, so they cannot be seen
[23:27:45] <lisp123> it's a bugs life
[23:28:08] <edgar-rft> maybe we should ask bugs bunny
[23:28:52] <lotuseater> wonderful pixar film
[23:29:01] <lisp123> Amazing
[23:29:24] <lisp123> I saw it in '3D' at Disney World, technology was amazing back then (this would have been 2002)
[23:29:57] <lotuseater> oh wow
[23:31:18] <jcowan> pjb: In such a compiler image, you could replace *features* with the one for the target environment.
[23:34:57] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Remote host closed the connection)
[23:37:02] *** Quits: rain3 (~rain3___@79.115.250.43) (Ping timeout: 250 seconds)
[23:37:16] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[23:57:18] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:57:55] <pjb> jcowan: but what if a function is called, or a symbol interned according to those wrong features?
[23:58:36] <jcowan> CL compilers aren't exactly built to do cross-compilation.
[23:58:41] <jcowan> ecl excepted
[23:58:53] <pjb> and sicl.
