[00:00:44] *** Quits: mro (~mro@port-92-195-157-116.dynamic.as20676.net) (Remote host closed the connection)
[00:01:14] *** Joins: mro (~mro@port-92-195-157-116.dynamic.as20676.net)
[00:11:42] *** Quits: chrisz (j8rp8bb5lp@55d45522.access.ecotel.net) (Remote host closed the connection)
[00:48:57] *** Quits: bartholin (~bartholin@158.110.70.210) (Quit: Leaving)
[00:57:04] *** Quits: mro (~mro@port-92-195-157-116.dynamic.as20676.net) (Quit: Leaving...)
[01:09:27] *** Joins: rond_ (~rond_@100.42.200.146.dyn.plus.net)
[01:13:33] *** Quits: rond_ (~rond_@100.42.200.146.dyn.plus.net) (Client Quit)
[01:24:23] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 250 seconds)
[01:26:48] *** Joins: chrisz (l7jnrrlt2i@55d4c8f4.access.ecotel.net)
[01:53:35] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:12:14] *** Joins: rgrinberg (~textual@187.223.23.238)
[02:46:13] <hackinghorn> I want to try/with but I'm not sure what the exception will be thrown, what do I write in "with .."?
[02:47:51] <d_bot> <NULL> Although dangerous, you can catch all exceptions with `try expr with e -> ...` (you can also replace e by _ or any pattern which matches everything, this is a regular pattern-matching on the type exception after all)
[03:08:22] *** Quits: rgrinberg (~textual@187.223.23.238) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[03:25:10] <hackinghorn> hi
[03:25:20] <hackinghorn> so can I the message of this exception e?
[03:26:18] <d_bot> <NULL> You can consider exception values as regular values, of an (extensible) sum type
[03:27:10] <d_bot> <NULL> So just like you need to write printers for your defined sum types, you need to write a printer for your exceptions (and also for those of the Stdlib because no printer was written for them)
[03:27:18] <hackinghorn> oh I found Exn.to_string, ok
[03:27:27] <d_bot> <NULL> Wait
[03:28:17] <hackinghorn> thankss
[03:31:40] <d_bot> <NULL> This one cheats to some extent, it looks at the underlying object representation of the exception, which happens to contain its name. This won't work for the arguments of the exceptions
[03:32:54] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 260 seconds)
[03:36:44] <hackinghorn> ahh I see
[03:51:56] *** Joins: rgrinberg (~textual@187.223.23.238)
[04:15:47] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi) (Quit: Leaving.)
[04:45:02] <d_bot> <idnes> https://github.com/ocaml/ocaml/blob/trunk/README.win32.adoc
[04:45:10] <d_bot> <idnes> here theres the speed of the bytecode interpreter listed
[04:45:19] <d_bot> <idnes> when is it applicable? i mean, at what stage
[04:45:38] <d_bot> <idnes> is the bytecode interpreter present in each execution? or just during some compilation?
[04:51:01] <d_bot> <idnes> ahhh nvm, now i understand
[04:53:22] <d_bot> <idnes> so source is compiled to bytecode, which then can be either compiled to native or used directly in the vm
[05:04:17] *** Quits: rgrinberg (~textual@187.223.23.238) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[05:29:36] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[05:36:23] <d_bot> <darrenldl> @NULL didnt quite expect why3 to not be in dune
[05:37:10] <d_bot> <NULL> I guess it just didn't make the transition
[05:37:11] <d_bot> <darrenldl> mclovin: interesting, seems like a nice christmas exercise maybe hmmmm
[05:43:29] *** Joins: berberman_ (~berberman@user/berberman)
[05:44:32] *** Quits: berberman (~berberman@user/berberman) (Ping timeout: 240 seconds)
[05:52:26] *** Quits: chrisz (l7jnrrlt2i@55d4c8f4.access.ecotel.net) (Ping timeout: 245 seconds)
[05:54:31] *** Joins: chrisz (sy6hubxsvn@55d4ac5c.access.ecotel.net)
[06:38:32] *** Joins: spip (~bobo@37.164.114.84)
[06:38:44] *** Quits: Guest5247 (~bobo@37.166.183.111) (Ping timeout: 256 seconds)
[06:38:56] *** spip is now known as Guest9141
[06:55:48] *** Joins: mbuf (~Shakthi@122.164.195.237)
[07:05:48] <d_bot> <minimario> what are some small project ideas that can be done in like a day (ofc that are particularly ocaml-friendly)
[07:05:52] <d_bot> <minimario> feeling a desire to hack some ocaml but don't have immediate ideas on what to hack hehe
[07:06:38] <d_bot> <minimario> like a mini ray tracer for example (except i did a bit of that a while back)
[07:09:22] <companion_cube> a mini type checker?
[07:10:29] <d_bot> <minimario> haha yeah that type of thing, except i was asked to do that for an assignment in a uni class xd
[07:15:24] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[08:20:10] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[08:20:10] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[08:20:26] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[08:24:12] *** Joins: rgrinberg (~textual@187.223.23.238)
[08:27:19] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[08:33:01] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[08:33:26] *** Joins: sagax (~sagax_nb@user/sagax)
[08:44:49] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[09:09:38] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[10:05:00] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 256 seconds)
[10:12:57] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[11:08:53] *** Joins: kaph (~kaph@151.35.8.156)
[11:20:10] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[11:25:19] *** Quits: kaph (~kaph@151.35.8.156) (Remote host closed the connection)
[11:25:54] *** Joins: nv1234 (~nv1234@2a01cb0586446c0001788ad019289f52.ipv6.abo.wanadoo.fr)
[11:26:34] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[11:27:02] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[11:28:06] *** Joins: salkin (~salkin@138.251.92.62.static.cust.telenor.com)
[11:32:22] *** Quits: nv1234 (~nv1234@2a01cb0586446c0001788ad019289f52.ipv6.abo.wanadoo.fr) (Quit: Client closed)
[11:45:27] *** Joins: jlrnick (~josephler@42.118.113.78.rev.sfr.net)
[11:54:56] *** Quits: jlrnick (~josephler@42.118.113.78.rev.sfr.net) (Ping timeout: 256 seconds)
[12:30:10] *** Quits: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb) (Quit: You have been kicked for being idle)
[12:34:36] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[12:36:11] *** Joins: mro (~mro@2002:5cc3:b655:0:75d8:1190:feb5:a8ef)
[12:49:00] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[12:55:43] *** Quits: mro (~mro@2002:5cc3:b655:0:75d8:1190:feb5:a8ef) (Remote host closed the connection)
[12:59:48] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[12:59:54] *** Quits: rgrinberg (~textual@187.223.23.238) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[13:00:04] *** Joins: bartholin (~bartholin@158.110.70.210)
[13:02:45] *** Joins: jlrnick (~josephler@42.118.113.78.rev.sfr.net)
[13:08:29] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[13:09:46] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[13:13:24] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[13:15:51] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[13:17:40] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[13:20:37] *** Quits: jlrnick (~josephler@42.118.113.78.rev.sfr.net) (Remote host closed the connection)
[13:21:23] *** Joins: jlrnick (~josephler@42.118.113.78.rev.sfr.net)
[13:22:23] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[13:25:30] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[13:25:47] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi)
[13:31:27] *** Quits: jlrnick (~josephler@42.118.113.78.rev.sfr.net) (Remote host closed the connection)
[13:35:59] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[13:46:38] *** Joins: jlrnick (~josephler@42.118.113.78.rev.sfr.net)
[13:47:13] *** Joins: rgrinberg (~textual@2806:101e:1:83af:8095:9213:668b:97a8)
[13:50:59] *** Joins: kakadu (~kakadu@195.19.236.234)
[13:52:52] *** Quits: jlrnick (~josephler@42.118.113.78.rev.sfr.net) (Remote host closed the connection)
[14:07:32] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[14:08:11] *** Quits: rgrinberg (~textual@2806:101e:1:83af:8095:9213:668b:97a8) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[14:15:32] *** Joins: mro (~mro@2002:5cc3:b655:0:75d8:1190:feb5:a8ef)
[14:24:04] <d_bot> <Et7f3> Reimplement a ocaml module ? Like list
[14:27:19] <d_bot> <Et7f3> Probably already done in uni. So a mini dune.
[14:33:16] *** Joins: Anarchos (~Anarchos@lfbn-ren-1-82-241.w83-205.abo.wanadoo.fr)
[15:00:26] *** Joins: mro_ (~mro@port-92-195-182-85.dynamic.as20676.net)
[15:02:33] *** Quits: mro_ (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[15:04:02] *** Quits: mro (~mro@2002:5cc3:b655:0:75d8:1190:feb5:a8ef) (Ping timeout: 260 seconds)
[15:08:16] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[15:11:20] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[15:13:24] *** Joins: kaph (~kaph@151.37.203.0)
[15:24:32] *** Quits: kaph (~kaph@151.37.203.0) (Read error: Connection reset by peer)
[15:24:50] *** Joins: kaph (~kaph@151.37.203.0)
[15:24:56] <d_bot> <jos√©> \üê´
[15:29:37] *** Quits: kaph (~kaph@151.37.203.0) (Read error: Connection reset by peer)
[15:29:50] *** Joins: kaph (~kaph@151.37.203.0)
[15:35:56] *** Quits: kaph (~kaph@151.37.203.0) (Ping timeout: 256 seconds)
[15:40:12] *** Joins: kaph (~kaph@151.37.203.0)
[15:48:13] *** Joins: jlrnick (~josephler@42.118.113.78.rev.sfr.net)
[16:05:39] *** Quits: kaph (~kaph@151.37.203.0) (Ping timeout: 268 seconds)
[16:06:10] *** Joins: kaph (~kaph@151.37.203.0)
[16:09:12] *** Quits: kaph (~kaph@151.37.203.0) (Read error: Connection reset by peer)
[16:09:28] *** Joins: kaph (~kaph@151.37.203.0)
[16:17:35] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[16:18:37] *** Quits: jlrnick (~josephler@42.118.113.78.rev.sfr.net) (Ping timeout: 240 seconds)
[16:18:59] <d_bot> <let Butanium = raise Not_found;;> If you didn't already do it reimplementing the list is a good training
[16:19:00] *** Quits: kaph (~kaph@151.37.203.0) (Ping timeout: 256 seconds)
[16:19:09] <d_bot> <let Butanium = raise Not_found;;> You can also try to implement heap
[16:19:15] <d_bot> <let Butanium = raise Not_found;;> Then heapsoft
[16:26:47] <d_bot> <VPhantom> If someone familiar with `Bigarray` sees this: how are they freed? If I create an initial one, then extract a sub (say, to hand off to some async I/O function) and immediately let my initial full-size one fall out of scope. I assume that the original fixed memory area will remain intact until the sub also falls out of scope, somehow, and _then_ it will be freed when the GC collects the sub?
[16:28:05] <d_bot> <VPhantom> I perused the implementation but it's my first venture on the C side of the runtime and I can't see how that's managed.
[16:41:56] <d_bot> <KW78> In think it is on the GC side with finalizers and I assume Ref Counting
[16:44:18] *** Joins: kaph (~kaph@151.47.131.129)
[16:49:35] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[17:01:38] <d_bot> <VPhantom> I see. Since Bigarrays aren't records (I think?) but rather something from the C side, to me all bets were off as to how the ref counting was managed. I just wanted to make sure that it is safe to let the original, full-size instance fall out of scope after handing off a smaller "window" to something else.
[17:01:40] <d_bot> <KW78> see `caml_ba_update_proxy` in https://github.com/ocaml/ocaml/blob/35af4cddfd31129391f904167236270a004037f8/runtime/bigarray.c#L1021-L1062
[17:02:40] <d_bot> <VPhantom> Yeah that's the function I was looking at, but with the macros and conventions I'm totally unaware of, I don't understand much of it.
[17:03:42] <d_bot> <VPhantom> It's especially unclear to me how the allocated sub retains a pointer to the original allocated area.
[17:03:45] <d_bot> <KW78> the finalizer frees https://github.com/ocaml/ocaml/blob/35af4cddfd31129391f904167236270a004037f8/runtime/bigarray.c#L146-L157 when the refcount goes to 0
[17:04:03] <d_bot> <KW78> by the proxy.
[17:04:26] <d_bot> <VPhantom> Ah update proxy near the end of the sub function, i see.
[17:04:56] <d_bot> <KW78> Proxy on Heap -> GCed -> finalizer if refcout = 0 -> free
[17:05:37] <d_bot> <KW78> Now I just looked at the code I am not a specialist (but I have some notion of how the GC works)
[17:06:16] <d_bot> <VPhantom> Sounds good to me. It's the proxy business I had failed to notice. üòâ
[17:07:28] <d_bot> <VPhantom> It's funny, I never did this with other languages but with OCaml I can dive right into the source code to get most of the answers I'm looking for, and not feel too lost.
[17:07:45] <d_bot> <KW78> me too !
[17:07:47] <d_bot> <VPhantom> Either I'm older and wiser‚Ä¶ or OCaml is well-written. üòõ
[17:10:06] <d_bot> <KW78> Well, you still need to understand how a GCed language works and the underlining C runtime. So you are definelty wiser
[17:11:17] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[17:15:47] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[17:18:48] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:38:17] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 240 seconds)
[17:42:04] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[17:42:21] *** Joins: omr (~omr@user/omr)
[17:43:58] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[17:59:49] *** Quits: omr (~omr@user/omr) (Quit: WeeChat 3.3)
[18:10:43] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[18:12:51] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[18:19:15] *** Joins: Haudegen (~quassel@91.114.49.10)
[18:31:49] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[18:32:18] *** Joins: zebrag (~chris@user/zebrag)
[18:32:26] * qwr has impression, that ocaml implementors tend to merge new things after these are really well thought out
[18:35:38] <qwr> most popular OO languages in comparison are a bit like gobbled together by madmans, and haskell has enourmous amount of research extensions used in practice
[18:36:51] *** Joins: jlrnick (~josephler@42.118.113.78.rev.sfr.net)
[18:37:35] <qwr> of course sometimes this has delayed things considerably, like the multicore coming next year
[18:38:00] *** Joins: spip (~bobo@37.166.180.80)
[18:38:17] *** Quits: Guest9141 (~bobo@37.164.114.84) (Ping timeout: 240 seconds)
[18:38:24] *** spip is now known as Guest4969
[18:39:55] <d_bot> <VPhantom> Yes I like OCaml's approach there. Slow, deliberate changes and keeping a very close eye on possible performance regressions.
[18:40:51] <d_bot> <VPhantom> I wish the Stdlib did a bit more, but it's already quite nice to work with. (I was a bit too quick to jump to Base/Core when I got started, having learned initially from _Real World OCaml_.)
[19:00:52] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[19:14:47] <sadiq> christmas present https://github.com/ocaml/ocaml/pull/10831
[19:17:49] <d_bot> <darrenldl> oh wow!
[19:18:08] <companion_cube> üíÉ
[19:21:14] <sadiq> companion_cube, can't believe you beat me everyone to the HN submission though.
[19:21:24] <sadiq> me _and_ everyone
[19:21:26] <companion_cube> :D
[19:21:32] <companion_cube> I received the email and voil√†
[19:22:02] <sadiq> heh
[19:22:08] <sadiq> I try to get in early and offer to answer questions.
[19:22:31] <sadiq> it avoids the entire conversation being about reference counting.
[19:22:42] <companion_cube> :DDDD
[19:22:48] <companion_cube> "u no arc???"
[19:22:54] <companion_cube> "y no arc" sorry
[19:23:13] <sadiq> there's only so many times you can have that conversation.
[19:33:53] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[19:36:34] <d_bot> <zakkor> oh shit!!!
[19:37:59] <d_bot> <cemerick> a 4,000-commit PR üòÆ
[19:38:06] <companion_cube> ez pz
[19:38:52] <d_bot> <VPhantom> Glorious!
[19:40:22] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[19:41:38] <companion_cube> sadiq: farming that sweet, sweet karma in your place
[19:46:45] <sadiq> 88
[19:49:06] <sadiq> sorry, irssi window switching failure
[19:49:12] <sadiq> companion_cube, -_-
[19:49:18] <sadiq> I guess I did farm enough from all the monthlies.
[19:49:39] *** Quits: salkin (~salkin@138.251.92.62.static.cust.telenor.com) (Quit: salkin)
[19:51:46] <companion_cube> :D
[19:52:56] <d_bot> <MrTyco> Hey guys is it a function as "incr" in Ocaml which decrement
[19:53:01] <companion_cube> decr
[19:59:26] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:06:32] <d_bot> <minimario> do i need to do something to get "((Obj.magic (Obj.repr Apple)) : int) ;;" to work in my utop
[20:06:41] <d_bot> <minimario> rn it just says "unbound value: int"
[20:10:40] <d_bot> <NULL> This expression works fine in my utop
[20:11:38] <d_bot> <NULL> Why do you need to go through `Obj.repr` here ? Shouldn't `Obj.magic` work from `Apple` fine ?
[20:12:14] <d_bot> <minimario> idk i'm just following real world ocaml lol
[20:12:46] <d_bot> <minimario> hmm do i need to upgrade my version of ocaml or something
[20:12:55] <d_bot> <minimario> i'm on utop 2.9 w/ ocaml 4.11.2
[20:14:54] <d_bot> <octachron> No, that code should work on any version of OCaml.
[20:15:07] <d_bot> <minimario> oh yeah i realized my mistake
[20:15:10] <d_bot> <minimario> i typed :: instead of :
[20:15:11] <d_bot> <minimario> heh
[20:16:54] <d_bot> <NULL> Also, why do they teach about `Obj` in Real World OCaml ?
[20:17:02] <d_bot> <minimario> https://dev.realworldocaml.org/runtime-memory-layout.html#why-do-ocaml-types-disappear-at-runtime
[20:17:29] <d_bot> <minimario> to show how objects are represented in memory and stuff
[20:17:41] <d_bot> <minimario> it's a cool chapter üòÑ
[20:20:46] <companion_cube> just don't use Obj in practice
[20:21:43] <d_bot> <undu> never seen it used on production
[20:22:17] <d_bot> <NULL> The only two places I've seen it used are menhir and CCVec
[20:23:48] <d_bot> <minimario> where's the source code to obj
[20:24:11] <d_bot> <NULL> I imagine it's pretty much all C functions
[20:24:33] <d_bot> <minimario> https://github.com/yzhs/ocamlllvm/blob/master/src/stdlib/obj.ml
[20:24:34] <d_bot> <minimario> heh
[20:25:00] <d_bot> <minimario> hmm what's the % mean
[20:25:09] <d_bot> <minimario> "%obj_is_int" vs "caml_obj_is_block"
[20:27:06] <d_bot> <octachron> `%` is used for compiler primitives
[20:28:15] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[20:29:49] <companion_cube> @NULL: yeah I had to use it a tiny bit, and I hate that
[20:31:22] <d_bot> <NULL> And Fran√ßois Pottier is also looking for a way to make menhir type-safe and remove the need of Obj, so that amounts to 0 people that are okay with using it
[20:33:54] <companion_cube> probably a good call with the upcoming flambda2
[20:34:40] <mro> multicore is on hackernews: https://news.ycombinator.com/item?id=29638152
[20:34:48] <companion_cube> :-¬∞
[20:35:49] <d_bot> <NULL> Though for menhir it was mostly discussion because he didn't have much time to spend on it IIRC
[20:35:57] <d_bot> <minimario> why does menhir need obj
[20:37:30] <d_bot> <NULL> Production rules aren't completely typed, with the fact that arguments are constructed in a weird order and you need to store them still
[20:37:52] <d_bot> <NULL> I don't know well enough, but that's what I understand
[20:43:41] *** Quits: kaph (~kaph@151.47.131.129) (Ping timeout: 245 seconds)
[20:46:14] <d_bot> <octachron> The next version of Menhir doesn't use `Obj` anymore (due to a generous use of GADTs to track the type of the stack and a new IR for optimizations).
[20:48:01] <companion_cube> that's really nice
[20:48:12] <companion_cube> is that why type inference is becoming mandatory?
[20:48:13] <d_bot> <NULL> So I remembered wrong, it is already being written. Also, for the uses of `Obj`, there's also Coq code extraction because Coq's type system is stronger than OCaml's
[20:48:42] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Remote host closed the connection)
[20:48:48] <d_bot> <minimario> stronger in what sense?
[20:48:56] *** Quits: bartholin (~bartholin@158.110.70.210) (Quit: Leaving)
[20:48:59] <companion_cube> incredibly more expressive
[20:49:17] <d_bot> <minimario> like dependent types?
[20:49:38] <companion_cube> yep
[20:49:40] <d_bot> <NULL> Those and inductive types and much more
[20:50:40] <d_bot> <minimario> what exactly are inductive types
[20:51:15] <d_bot> <NULL> Intuitively, dependent sum types
[20:51:30] <d_bot> <NULL> More formally, I'm going to learn this in January
[20:51:48] <d_bot> <minimario> have an easy example in mind? üôÇ
[20:52:47] *** Quits: mbuf (~Shakthi@122.164.195.237) (Quit: Leaving)
[20:52:50] <d_bot> <NULL> ```coq
[20:52:50] <d_bot> <NULL> Inductive eq (A : Type) (x : A) : A -> Prop :=  eq_refl : x = x
[20:52:52] <d_bot> <NULL> ``` Coq's equality type
[20:53:13] <d_bot> <minimario> is this not just a dependent type
[20:53:41] <d_bot> <NULL> You're explicitly giving the constructors (here, eq_refl)
[20:53:58] <d_bot> <minimario> oops i don't read coq syntax
[20:54:11] <d_bot> <minimario> A->Prop is the return type?
[20:54:19] <d_bot> <NULL> (IRC users, are single line code blocks fine or does it print the \`\`\`coq header and all ?)
[20:56:19] <d_bot> <NULL> This is close to OCaml's `type (_, _) eq = Eqrefl: ('a, 'a) eq` but here you define an equality type for values and not just types
[20:59:19] *** Quits: Anarchos (~Anarchos@lfbn-ren-1-82-241.w83-205.abo.wanadoo.fr) (Quit: Vision[]: i've been blurred!)
[21:00:01] <d_bot> <NULL> `eq A x y` is a Prop and `eq_refl A x` is an inhabitant of `eq A x x` (yes `A -> Prop` is the return type)
[21:00:50] <d_bot> <Et7f3> the base is 4000 commit behind but in fact it is 240 commits
[21:00:55] <d_bot> <NULL> and `=` is infix for `eq` where the first argument `A` is left for the type checker to be inferred
[21:01:10] <d_bot> <Et7f3> +many merge commit so in fact it is less if we rebase properly
[21:02:30] *** Quits: kakadu (~kakadu@195.19.236.234) (Quit: Konversation terminated!)
[21:28:34] <d_bot> <VPhantom> FYI that's a very old fork of OCaml. The active repo is at <https://github.com/ocaml/ocaml>. I refer to it often when I want to know how something is implemented in more detail.
[22:09:14] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[22:10:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:16:33] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:45:07] *** Joins: rgrinberg (~textual@2806:101e:1:83af:8095:9213:668b:97a8)
[23:16:36] *** Joins: mro (~mro@port-92-195-182-85.dynamic.as20676.net)
[23:19:54] <d_bot> <cemerick> oh, fair enough, I was just impressed with the top-line number
[23:20:18] <d_bot> <cemerick> obligatory ü§¶ re: the HN discourse
[23:21:01] *** Quits: mro (~mro@port-92-195-182-85.dynamic.as20676.net) (Ping timeout: 268 seconds)
[23:23:28] <d_bot> <VPhantom> It went sideways? The parts I saw were alright. ü§î
[23:25:12] <d_bot> <cemerick> bulk of it seems to be spats about OCaml's merit vis a vis haskell and F#
[23:25:26] <d_bot> <VPhantom> Oh, yeah.
[23:27:39] <d_bot> <VPhantom> But I think it's natural to try to parallel with what people might be more familiar with (Rust, Go, Haskell, F#, etc.)
[23:30:01] <d_bot> <VPhantom> Personally for the work I do, the merge won't change anything yet. When EIO will come out of development, and when we might get hands-off concurrency like Go's goroutines, that's when I'll take notice and change how I do things. (Or maybe that's already what "domain pools" are under the hood?)
[23:32:03] <companion_cube> that's a point in the discussion: whether domainslib and eio will cooperate well?
[23:35:30] <d_bot> <VPhantom> (By "hands-off" I mean that in Go's goroutines like with Lwt's in-process promises, you create one and let it be scheduled. Go spreads them over several cores as it sees fit, vs right now as I understand it, developers need to decide what runs in which domain.)
[23:36:50] <companion_cube> hmm not necessarily, I think domainslib gives you a thread pool
[23:36:57] <companion_cube> well, a domains pool, and "tasks" on top of it
[23:39:15] <d_bot> <VPhantom> It'll be interesting to see how Lwt will integrate that. From the looks of their issues list they seem to have more work than manpower already. üòï
[23:39:32] <companion_cube> I'm a bit worried about eio personally
[23:39:35] <companion_cube> I'd rather they work on lwt
[23:40:06] <d_bot> <VPhantom> I thought EIO was the prototype for what would eventually be added to Stdlib?
[23:40:09] <companion_cube> as is we're going to have eio, lwt, async, and the standard IOs
[23:40:19] <d_bot> <VPhantom> Oh‚Ä¶
[23:40:32] <companion_cube> I'm not aware of that, and a big library like that is never easy to merge into the stdlib
[23:40:39] <companion_cube> unless there's a RFC I missed
[23:40:45] <d_bot> <VPhantom> I was hoping to maybe be able to "shed" Lwt as a dependency when OCaml "5.1" would arrive.
[23:41:34] *** Quits: jlrnick (~josephler@42.118.113.78.rev.sfr.net) (Remote host closed the connection)
[23:41:41] <d_bot> <VPhantom> No I must've misread the monthly update where I saw that. You're certainly right.
[23:42:16] <companion_cube> but what about all the existing code that provides Lwt interfaces?
[23:42:32] <d_bot> <VPhantom> I mistakenly thought that EIO was part of the Multicore effort and that it was merely scheduled for merging later than what's being merged now.
[23:43:36] <d_bot> <VPhantom> Well, there's also Async code. I think that if the Stdlib came up with something great thanks to Multicore, it would be worth migrating to it over time.
[23:44:09] <companion_cube> it's part of the multicore project, not of the main PR
[23:44:31] <companion_cube> well my hope is that lwt and async could finally agree on a common "future" representation that takes advantage of multicore
[23:44:38] <companion_cube> like a common effect basically
[23:44:39] <d_bot> <VPhantom> Okay so that must be why I thought it was on its way to the Stdlib then. üòâ
[23:44:44] <companion_cube> (and each provide their own handler)
[23:44:54] <companion_cube> "my hope" as an outsider, I should say.
[23:45:47] <d_bot> <VPhantom> Given the small size of the community, the more we can agree on and the less we can implement redundantly, the better. (Like, right now there's at least 4 "bigstring" libraries I'm aware of for example.)
[23:46:19] <companion_cube> the bigstring libraries should be compatible, if they all rely on the same bigarray type
[23:46:28] <companion_cube> (it's the case for bigstring and bigstringaf at least)
[23:46:38] <d_bot> <VPhantom> (‚Ä¶while there's no `bytes` support in `ocaml-protoc` and no JSON support in `ocaml-protoc-plugin`. I wish I had more time to contribute all the missing pieces I keep discovering.)
[23:46:54] <d_bot> <VPhantom> True, they are.
[23:57:01] *** Joins: jlrnick (~josephler@42.118.113.78.rev.sfr.net)
