[00:00:04] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[00:06:35] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 240 seconds)
[00:08:52] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:19:28] *** Joins: akoana (~ah@user/akoana)
[00:22:24] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[00:23:29] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[00:36:40] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[00:42:58] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:47:56] *** Quits: wacki (~wacki@87.122.90.248) (Quit: Leaving.)
[00:50:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[00:52:20] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[01:00:54] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:a81a:aef8:4653:fe6c) (Ping timeout: 250 seconds)
[01:02:04] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e14b:875c:3570:34de)
[01:03:15] *** Joins: hashfunc750 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[01:07:18] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Disconnected: Replaced by new connection)
[01:08:18] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[01:08:20] <hashfunc750> i want to debug ... compile-file ... in slime, but i'm not quite sure how to go about it. in the repl, i tried wrapping a call to it like so: ... (progn (break) (compile-file "~file.lisp")) ... that got me in the debugger, but stepping or nexting would immediately finish the execution. not what i want. so i went to the file that compile-file is defined in and tried compiling the function with max debug settings, but that doesn'
[01:08:20] <hashfunc750> because the package is locked? now I'm at a loss
[01:09:35] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[01:11:21] <phoe> hashfunc750: how do you want to debug it?
[01:11:37] <phoe> if anything, you can (eval-when (:compile-toplevel) (break)) but I have no idea how that helps you
[01:12:32] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[01:13:12] <hashfunc750> phoe: how do i want to debug it? i want to step through it. i want to watch the flow of execution. i want to see what is going on.
[01:16:58] *** Joins: yewscion (~yewscion@2604:ca00:15a:8ae8::260:298f)
[01:17:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[01:18:32] <hashfunc750> phoe: i see what you meant. sorry. yeah ... (eval-when (:compile-toplevel) (break)) ... doesn't do the trick
[01:23:42] <phoe> compile-file simply goes through every form and compiles it, and then produces a fasl file
[01:23:52] <phoe> if you want to debug that, debug the individual forms
[01:25:58] *** Joins: dirtcastle (~dirtcastl@2409:4072:e8a:af5c:e8c8:73ff:feac:29ac)
[01:26:00] *** Quits: dirtcastle (~dirtcastl@2409:4072:e8a:af5c:e8c8:73ff:feac:29ac) (Client Quit)
[01:30:02] <hashfunc750> phoe: i want to debug the actual compilation process
[01:32:23] <hashfunc750> i want to debug the function `compile-file`
[01:32:43] <hashfunc750> and all of its subforms thereof
[01:33:03] <phoe> this is diving into implementation-specific details
[01:33:11] <hashfunc750> that is ok with me
[01:33:12] <phoe> debugging the compiler itself is generally complex stuff
[01:33:40] <hashfunc750> unless there's a standard way of extracting what the reader is reading
[01:33:43] <_death> if compile-file and the functions it uses are compiled with debug information, you can (step (compile-file "..."))
[01:34:14] <hashfunc750> _death: yeah i tried to compile `compile-file` with debug information, but i get the error that the package is locked
[01:34:29] <_death> well, there is a restart to unlock the package
[01:34:35] <phoe> wait, you tried to replace cl:compile-file with something else?
[01:35:12] <hashfunc750> _death: tried that and still got errors
[01:35:27] <hashfunc750> phoe: that right there is an idea
[01:35:38] <hashfunc750> phoe: not sure what to replace with tho
[01:35:45] <phoe> no, I mean, it's generally undefined behavior
[01:35:56] <_death> "got errors" is not very descriptive
[01:36:07] <hashfunc750> _death: i know. i'll try it again rn
[01:36:10] <hashfunc750> _death: brb
[01:40:12] *** Quits: yewscion (~yewscion@2604:ca00:15a:8ae8::260:298f) (Ping timeout: 240 seconds)
[01:40:30] <hashfunc750> _death: that works! i guess i never tried the "unlock" option...
[01:40:33] <_death> btw there's a :trace-file argument to sbcl compile-file that may be helpful
[01:41:58] <hashfunc750> _death: i tried that yesterday, but i didn't get anything useful from it; unless i was using that wrong as well
[01:42:24] <_death> see the docstring for details
[01:43:54] *** Quits: hashfunc750 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[01:55:56] <_death> you may also want to check out :sb-show feature.. probably #sbcl can help you further
[01:57:29] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[02:02:50] *** Quits: \f (~form_feed@user/f/x-7101985) (Killed (NickServ (GHOST command used by form_feed!4c1975b719@user/f/x-7101985)))
[02:03:07] *** Joins: form_fee- (~form_feed@nixon.einval.eu)
[02:18:01] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Disconnected: Received SIGTERM)
[02:20:50] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[02:21:09] *** Joins: \f (4c1975b719@user/f/x-7101985)
[02:21:27] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[02:42:34] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:42:59] *** Quits: pve (~pve@37-136-35-73.rev.dnainternet.fi) (Quit: leaving)
[02:43:38] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:50:20] *** Quits: kevingal (~quassel@176.61.88.240) (Remote host closed the connection)
[02:54:24] *** Joins: lisp123 (~lisp123@120.154.103.52)
[02:59:19] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[03:18:00] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 272 seconds)
[03:33:37] *** Joins: Volt_ (~Volt_@c-73-145-161-51.hsd1.mi.comcast.net)
[03:34:19] *** Joins: rgherdt_ (~rgherdt@port-92-193-217-5.dynamic.as20676.net)
[03:37:00] *** Quits: rgherdt (~rgherdt@port-92-193-217-5.dynamic.as20676.net) (Ping timeout: 272 seconds)
[03:37:51] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 245 seconds)
[03:55:03] *** Joins: lisp123 (~lisp123@120.154.103.52)
[03:57:16] *** Quits: amb007 (~a_bakic@5.149.174.181) (Ping timeout: 272 seconds)
[03:59:48] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 272 seconds)
[04:21:21] *** Joins: hashfunc1fa5 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[04:22:13] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:22:37] <hashfunc1fa5> is there a built-in function and/or strategy to determine if a symbol is built-in?
[04:23:23] <hashfunc1fa5> "built-in" meaning (in my case) that it's built into SBCL
[04:24:11] <hashfunc1fa5> and/or if it's a standard function defined in the CL specification
[04:24:51] <hashfunc1fa5> sorry, ***and/or if it's a standard symbol defined in the CL specification
[04:25:48] <phoe> hashfunc1fa5: check if SYMBOL-PACKAGE is EQ to (FIND-PACKAGE :CL)
[04:27:13] <hashfunc1fa5> phoe: ok, i'll give that a try. thanks phoe
[04:35:42] *** Joins: pjb (~pjb@user/pjb)
[04:36:12] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 240 seconds)
[04:41:58] <hashfunc1fa5> what does the "%" mean in some lisp function names?
[04:42:11] <hashfunc1fa5> e.g., "%map-cdb"
[04:42:17] <hashfunc1fa5> "(defun %map-cdb (function cdb)"
[04:44:01] <White_Flame> means it's an internal function
[04:48:18] <hashfunc1fa5> White_Flame: ok thanks
[05:04:08] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:12:58] <char[m]> scymtym: for with-current-source-form, is there a reason it only works inside macros?
[05:26:22] *** Joins: lisp123 (~lisp123@120.154.103.52)
[05:27:47] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:27:48] *** Joins: Oladon (~olad@98.43.81.226)
[05:30:37] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[05:46:30] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:54:42] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[06:00:17] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 240 seconds)
[06:04:55] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:06:17] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[06:10:41] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[06:20:02] *** Joins: Gamja17 (~Gamja17@cpe-74-137-85-1.kya.res.rr.com)
[06:20:20] *** Joins: Posterdati (~posterdat@host-87-20-238-140.retail.telecomitalia.it)
[06:24:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[06:29:06] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:31:21] *** Joins: Common-Lisp (~o@2600:1700:94c0:69a0::44)
[06:31:30] *** Quits: Gamja17 (~Gamja17@cpe-74-137-85-1.kya.res.rr.com) (Remote host closed the connection)
[06:33:27] *** Joins: Gamja17 (~Gamja17@cpe-74-137-85-1.kya.res.rr.com)
[06:34:20] *** Quits: Common-Lisp (~o@2600:1700:94c0:69a0::44) (Client Quit)
[06:34:49] *** Joins: Common-Lisp (~o@2600:1700:94c0:69a0::44)
[06:39:38] *** Joins: Lord_Nightmare (znc@user/lord-nightmare/x-3657113)
[06:42:10] *** Quits: Common-Lisp (~o@2600:1700:94c0:69a0::44) (Quit: Leaving)
[06:57:22] *** Joins: Bike (~Bike@71.69.170.70)
[06:58:11] <Bike> char[m]: what would it mean outside of the compiler?
[07:00:04] <dbotton> when looking at a backtrace is here a key or some command to say what line in what file?
[07:00:09] <dbotton> there
[07:00:28] <Bike> in sldb, "v" should take you to the source of the frame
[07:00:59] <char[m]> Bike: I'm thinking for static analysis. linting and such. It would run at compile time, but not necesaarily part of a macro. so i would run it like this (lint '(this is my program))
[07:01:23] <dbotton> thanks
[07:02:23] <Bike> char[m]: if something other than implementation is reporting source problems, it would have to coordinate with t-w-c-s-f in its own way; t-w-c-s-f is just a portability library, as two implementations provide a hook into their compiler so that it can report more specifically
[07:03:58] <Bike> i don't entirely understand what other than a macroexpander would need it, though
[07:07:45] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[07:11:14] <char[m]> I guess, my question is why this does not work if you put it in a scratch buffer (let ((l '(my code))) (twcsf (l) (warn "warn")))
[07:12:54] <Bike> because then the warning is signaled at runtime, not by the compiler
[07:13:08] <Bike> most conditions do not have source information associated with them
[07:14:33] *** Joins: lisp123 (~lisp123@120.154.103.52)
[07:14:46] <Bike> the compiler may have a mechanism that intercepts conditions signaled from macro expanders and associates source information with them. twcsf provides a hook into that mechanism specifically.
[07:16:08] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 272 seconds)
[07:16:42] <char[m]> I see. Thank you bike
[07:17:29] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:17:40] <Bike> (that said, the lisp implementation probably also tracks source information relating to frames in a runtime backtrace; that's what the sldb "v" uses)
[07:18:46] <Bike> so for a linter program, you'd need your linter to implement with-current-source-form, and then provide a macro definition for trivial-wscf to hook it in, and then probably also teach your IDE how to interpret the source information. implementing with-current-source-form entails an interception mechanism. i can show you how i did it in cleavir if
[07:18:47] <Bike> you like.
[07:19:00] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[07:25:31] *** Quits: Gamja17 (~Gamja17@cpe-74-137-85-1.kya.res.rr.com) (Remote host closed the connection)
[07:26:03] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[07:26:53] <char[m]> I might take you up on that later. I'll see if I can figure it out first. This all might be overkill since I plan to run the linter at compile time anyway.
[07:28:13] *** Joins: Gamja17 (~Gamja17@cpe-74-137-85-1.kya.res.rr.com)
[07:30:12] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[07:30:23] *** Quits: Gamja17 (~Gamja17@cpe-74-137-85-1.kya.res.rr.com) (Remote host closed the connection)
[07:30:36] <beach> Good morning everyone!
[07:34:12] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[07:44:51] <jmes> Good morning :)
[07:53:42] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[07:54:15] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 240 seconds)
[07:58:01] *** Joins: semz_ (~semz@user/semz)
[08:00:58] *** Quits: semz (~semz@user/semz) (Ping timeout: 260 seconds)
[08:10:05] *** Joins: lisp123 (~lisp123@120.154.103.52)
[08:20:34] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[08:21:37] *** Joins: Oladon (~olad@98.43.81.226)
[08:22:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:26:23] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:33:15] *** Joins: s-liao6 (~s-liao@101.86.96.21)
[08:34:47] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:36:11] *** Joins: lisp123 (~lisp123@120.154.103.52)
[08:41:19] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[09:08:38] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:11:37] *** Quits: s-liao6 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:18:37] *** Quits: hashfunc1fa5 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[09:22:00] *** Joins: dirtcastle (~dirtcastl@103.43.203.228)
[09:23:39] *** Joins: lisp123 (~lisp123@120.154.103.52)
[09:27:24] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:28:26] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[09:28:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:32:34] *** Quits: lisp123 (~lisp123@120.154.103.52) (Quit: Leaving...)
[09:33:09] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[09:37:14] *** Joins: lisp123 (~lisp123@120.154.103.52)
[09:48:12] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[09:53:09] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[09:58:24] *** Joins: lisp123 (~lisp123@120.154.103.52)
[10:20:10] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[10:25:28] *** Quits: Josh_2 (~user@197.185.100.162) (Remote host closed the connection)
[10:25:42] *** Joins: amb007 (~a_bakic@5.149.174.181)
[10:27:31] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[10:42:47] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:44:55] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[10:46:21] *** Joins: lisp123 (~lisp123@120.154.103.52)
[11:16:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[11:27:14] *** Joins: rotateq (~user@p200300e787279e0062e42ec032d1bffb.dip0.t-ipconnect.de)
[11:34:12] *** Joins: eugercek (~user@user/eugercek)
[11:40:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[11:48:22] *** Joins: nature (~nature@45.32.235.173)
[11:52:51] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 256 seconds)
[12:05:23] <gin> Like '(...) is a shortcut for (quote (...)), what is ,(...) a shortcut of?
[12:05:39] <gin> oops. wrong question
[12:05:54] <gin> Like '(...) is a shortcut for (quote (...)), what is `(...) a shortcut of?
[12:06:26] <beach> The standard mentions this.
[12:07:00] <beach> It is not standardized, but they recommend following the Scheme tradition.  Let me see if I can find it.
[12:07:21] <beach> ... and it is not a "shortcut".  It is a "reader macro".
[12:08:12] <beach> clhs 2.4.6.1
[12:08:19] <specbot> Notes about Backquote: http://www.lispworks.com/reference/HyperSpec/Body/02_dfa.htm
[12:08:45] <gin> oh I read clhs 2.4.6 already. I don't think I communicated my question right.
[12:09:42] <gin> I mean, we can write either '(...) or (quote (...)) without reader macro. But for `(...) there does not seem to be an alternative without reader macro.
[12:10:05] <beach> Read 2.4.6.1 please
[12:11:05] <beach> "Since the exact manner in which the Lisp reader will parse an expression involving the backquote reader macro is not specified, an implementation is free to choose any representation that preserves the semantics described."
[12:11:43] <beach> "Implementors who have no particular reason to make one choice or another might wish to refer to IEEE Standard for the Scheme Programming Language, which identifies a popular choice of representation for such expressions that might provide useful to be useful compatibility for some user communities."
[12:12:18] <gin> okay, thank you. my next question is. say I am making a toy Lisp: is it necessary to implement '()? Even without `() it would still be a Lisp, right? because users can write (quote (...))
[12:12:40] <beach> I believe Scheme defines `x to expand to (backquote x), for ,x to expand to (unquote x) and for ,@x to expand to (unquote-splicing x).
[12:12:55] <_death> the alternative is to write the expansion, e.g., `(foo ,bar) can be written as (list 'foo bar)
[12:13:27] <gin> there does not seem to be (backquote ...) in CL. let me try in scheme and see if (backquote ...) works.
[12:13:32] <beach> gin: There is no widely agreed-upon definition of "Lisp", so you can do whatever you want and you can call it "a Lisp" or something else.
[12:14:04] <beach> gin: What part of "implementation specific" is not clear?
[12:14:30] <beach> gin: It may be backquote in some implementations and something else in others.
[12:14:59] <gin> beach: "Implementation specific" is now clear. and I understand that a specific CL implementation is free to implement it however it wants.
[12:15:09] <beach> gin: And, as _death pointed out, you can't replace ` by (quote...).
[12:15:33] <beach> gin: Good, so "there does not seem to be (backquote ...) in CL." doesn't make sense.
[12:16:07] <gin> why not? is it not a fact that there is no "backquote" special operator in CL?
[12:16:21] <gin> ah! I see it.
[12:16:29] <gin> I should say there is no "backquote" special operator in SBCL.
[12:16:31] <beach> You are right.
[12:16:53] <beach> Either way, there is no such symbol in the standard.
[12:17:09] <gin> yes, making sense now.
[12:17:12] <_death> (write (read-from-string "`(foo)") :pretty nil)
[12:17:21] <beach> So it has to live in a package other than the CL package either way.
[12:17:33] <beach> s/it/the symbol chosen by the implementation/
[12:18:05] <gin> oh, so it is SB-INT:QUASIQUOTE in SBCL. Thanks _death. that resolved the mystery for me.
[12:18:45] <_death> may want to check out the cltl2 appendix for backquote
[12:20:04] <beach> gin: What is your reason for writing a toy Lisp implementation?  And why do you care whether it is "a Lisp" or not?
[12:20:45] <gin> beach: just for learning. but don't want to cheat during learning. want to implement whatever looks like essential features.
[12:21:04] <beach> So you plan to implement CLOS?
[12:21:13] <gin> Am I correct in assuming that ' and ` do not offer any new semantic features in Lisp? They only offer syntactic convenience?
[12:21:46] <rotateq> _death: I was about to give the same hint to them :)
[12:22:28] <gin> beach: probably not. but I was conflicted regarding whether ' and ` are worth implementing. my toy lisp has no reader macro facility yet. so I was thinking if by implementing ' and `, I might learn how to have reader macros in my implementation.
[12:23:03] <rotateq> gin: Especially the ` saves you from writing very nested LIST forms that could be hard to reason about quickly.
[12:23:43] <rotateq> gin: And what are your #\( and #\) then if not readmacros? :)
[12:23:49] <beach> gin: I consider CLOS an essential feature.  And rotateq is right that writing macros without the backquote reader macro is pure hell.
[12:24:08] <beach> rotateq: Good point.
[12:24:35] <gin> okay, I will tackle this problem. Long way to go for me and lots of learning to do.
[12:26:08] <rotateq> Oh and for me still too. It never ends.
[12:31:23] <beach> Question about PARSE-MACRO from CLtL2: What role does the &OPTIONAL parameter ENV play in this function?
[12:32:55] <gin> thanks beach, _death, rotateq for all the help
[12:33:17] <beach> Sure.
[12:34:53] <rotateq> You're welcome, gin. From the point in time when I started to get the idea of readmacros I also see it in other languages that way too, for example the #\" for reading in string objects.
[12:36:18] <rotateq> beach: I have an idea for your question, but I'm too afraid that my answer wouldn't be accurate enough.
[12:37:02] <beach> Give it to me anyway.
[12:38:52] <rotateq> The &OPTIONAL parameter ENV takes potentially another environment. For example you work on first class global environments, so this could be used to have a way other semantic effect by parsing the same form.
[12:40:26] <beach> OK.
[12:41:04] <rotateq> Please correct me or if you would like tell us why you asked that. :)
[12:42:21] <beach> I asked because we wrote "PARSE-MACRO and ENCLOSE are part of the environment chapter in CLtL2, but they are outside the scope of this paper" in our ELS submission, and a referee is asking "why are they outside the scope?".
[12:43:06] <rotateq> Oh okay. ELS is not far away anymore.
[12:43:29] <beach> I was going to write "That's a silly question; PARSE-MACRO doesn't access the compile-time environment in any way whatsoever", but I may be wrong about that.
[12:43:53] <beach> Final paper versions are due march 7.
[12:46:39] <beach> And I was going to write "That's a silly question: ENCLOSE is a run-time thing", but that is not true.  It is used to create macro functions for MACROLET I think, given that the LAMBDA-EXPRESSION argument is allowed to access only the compile-time part of the environment.
[12:52:56] <rotateq> I don't really have strong knowledge of environments yet. I try to get how LOAD-TIME-VALUE works at the moment.
[12:54:53] <beach> The implementation of PARSE-MACRO in SBCL has (DECLARE (IGNORE ENV)) in it.
[12:58:39] <beach> CCL passes the ENV argument to PARSE-BODY that then ignores it.
[12:59:42] *** Joins: kevingal (~quassel@176.61.88.240)
[13:00:32] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[13:00:42] <rotateq> beach: So giving it another first class global environment wouldn't have any effect when I understand correctly.
[13:00:44] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:02:13] <beach> Not that I can see.  It just turns a macro body into a lambda expression.
[13:03:42] <rotateq> Okay.
[13:10:24] *** Quits: amb007 (~a_bakic@5.149.174.181) (Remote host closed the connection)
[13:10:39] *** Joins: amb007 (~a_bakic@5.149.174.181)
[13:10:50] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[13:17:54] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:27:25] *** Joins: notzmv (~zmv@user/notzmv)
[13:29:35] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[13:31:31] *** Joins: sepanko (~sepanko@user/sepanko)
[13:34:17] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[13:54:35] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[13:56:17] *** Joins: lisp123 (~lisp123@120.154.103.52)
[14:04:21] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[14:13:27] *** rgherdt_ is now known as rgherdt
[14:17:12] *** Joins: treflip (~user@user/treflip)
[14:17:44] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[14:18:23] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[14:20:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:32:25] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:32:29] *** Quits: amb007 (~a_bakic@5.149.174.181) (Read error: Connection reset by peer)
[14:32:51] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:33:11] *** Joins: amb007 (~a_bakic@43.196.23.93.rev.sfr.net)
[14:35:32] *** Quits: amb007 (~a_bakic@43.196.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:36:03] *** Joins: amb007 (~a_bakic@43.196.23.93.rev.sfr.net)
[14:43:35] *** Parts: dmgk (~dmgk@user/dmgk) ()
[15:03:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:05:00] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[15:05:33] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:07:52] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:38:24] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[15:40:35] <bollu> is there a tutorial implementation of common lisp, that's geared for understanding how one would implementing things like conditions?
[15:40:46] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:43:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[15:45:29] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[15:50:19] <rotateq> bollu: There's this newer book by phoe_ "The Common Lisp Condition System" from 2020. Do you really mean _implementing_ or first learning to _use_ it?
[15:51:44] <rotateq> Or maybe you mean defining new condition type with DEFINE-CONDITION.
[15:52:27] <bollu> rotateq both, I guess :) I've seen toy examples of the condition system, and I'd be interested to know how it's implemented
[15:52:43] <phoe> bollu: then my book will work well
[15:53:00] <bollu> phoe oh, neat! you wrote the book :)
[15:56:16] <phoe> bollu: well, yes, such things happen sometimes
[15:56:49] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[15:56:49] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[15:56:49] *** Joins: tane (~tane@user/tane)
[16:00:16] <beach> The condition system is surprisingly simple, and it is hard to understand why pretty much every programming language (except Multics PL/I) has made exception systems that are both less useful and harder to implement.
[16:00:54] <phoe> the condition system is not even necessary
[16:01:02] <beach> Exactly.
[16:01:08] <rotateq> Maybe they like to throw and not signal things.
[16:01:25] <phoe> if you have dynamic variables, if you have a way to have non-local jumps with unwinding, if you have closures, then you don't need a condition system
[16:01:31] <phoe> since you can build one yourself
[16:01:38] <beach> Indeed.
[16:01:44] <phoe> see https://github.com/phoe/cafe-latte
[16:02:00] <rotateq> phoe: Or full continuations. :)
[16:02:11] <phoe> rotateq: yes
[16:02:23] <phoe> but notably continuations aren't strictly required
[16:02:48] <rotateq> hui in Java ∘.○
[16:02:50] <jackdaniel>  /if you have a way to have non-local jumps with unwinding/ <-- that's the non trivial part
[16:03:01] <jackdaniel> cleverly buried between dynamic variables and closures that are a given
[16:03:24] <rotateq> jackdaniel: The trick is saying "left as an exercise for the reader".
[16:03:56] <phoe> jackdaniel: other languages tend to have it - e.g. try/finally in java
[16:04:51] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[16:05:19] <jackdaniel> I'm not saying that they don't, I'm saying that this part is the non-trivial thing. also java is a language that has quite a few under the hood (despite its yucky look)
[16:05:28] <phoe> yes
[16:05:33] <jackdaniel> s/a few/a few things/
[16:05:35] <phoe> it's not trivial to have that in the slightest - that's why you have whole separate libraries to achieve that in languages that don't support it out of the box, e.g. libunwind in the C world
[16:10:58] <bollu> phoe can you elaborate on what it means to have "non-local jumps with unwinding"? I don't know what that means
[16:11:29] <phoe> bollu: in CL terms, block/return-from, tagbody/go, catch/throw
[16:11:53] <phoe> in non-CL terms, that you can change the way the program is executing and jump backwards to some predefined place on the call stack and continue execution from there
[16:12:12] <beach> bollu: setjmp()/longjmp() in C.
[16:12:15] <jackdaniel> are you sure that block/return-from and tagobyd/go qualify?
[16:12:42] <phoe> jackdaniel: well, they can be non-local and they trigger unwinding, so I think so, yes
[16:12:45] <beach> jackdaniel: Yes, they can do non-local jumps.
[16:12:53] <pl> C++ exceptions, wherever they came from and how they poisoned the well further, are ultimately very simplistic in supposed implementation and don't provide for closures etc.
[16:12:58] <rotateq> I would first have thought of UNWIND-PROTECT too.
[16:13:15] <phoe> when you combine GO or RETURN-FROM with closures then they become non-local
[16:13:23] <jackdaniel> I see
[16:13:32] <pl> it's funny that Windows provides better (not Common-Lisp level, but closer) exceptions systemwide than most languages in use on the platform
[16:13:35] <bollu> phoe it must be some unwinding to some location *in the call stack* ?
[16:14:11] <phoe> bollu: the details are usually hidden from the user, but imagine that your code has something like (CATCH 'FOO ...)
[16:14:31] <phoe> and then, something in these ..., no matter how many function calls away, issues a (THROW 'FOO)
[16:15:19] <phoe> and, after properly unwinding the stack via UNWIND-PROTECT cleanup forms, execution continues from the CATCH form
[16:15:53] <bollu> phoe isn't that like call/cc then?
[16:16:39] <phoe> kinda sorta, but you don't strictly need call/cc to have that sort of thing
[16:20:07] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:21:40] *** Quits: kevingal (~quassel@176.61.88.240) (Remote host closed the connection)
[16:45:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:08:49] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[17:10:58] *** Joins: kevingal (~quassel@176.61.88.240)
[17:20:40] <rotateq> phoe: I read now again in the "Metacircular Semantics for Common Lisp Special Forms" paper from 1992 by Henry Baker. On page 4 it has a footnote which states "Of the three, we strongly recommend that catch/throw be considered the most primitive mechanism, because basing tagbody/go and block/return-from on catch/throw makes absolutely clear the fact that Common Lisp does not and can not have Scheme-like first-class co
[17:21:32] <rotateq> Would have been nice giving at this point even a simple explanation why.
[17:27:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:28:44] <phoe> rotateq: catch/throw is the absolutely most generic mechanism
[17:28:48] <phoe> and the hardest to optimize
[17:29:43] <phoe> you can implement RETURN-FROM and GO easily in terms of THROW and a dynamic variable, as seen in Baker
[17:46:30] *** Joins: yewscion (~yewscion@ec2-34-234-185-163.compute-1.amazonaws.com)
[17:49:20] *** Joins: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net)
[17:51:33] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 256 seconds)
[18:06:35] *** Joins: Common-Lisp (~o@2600:1700:94c0:69a0::44)
[18:06:39] *** Joins: c (~o@2600:1700:94c0:69a0::44)
[18:06:48] *** Common-Lisp is now known as Guest755
[18:06:48] *** c is now known as Common-Lisp
[18:06:54] *** Quits: Guest755 (~o@2600:1700:94c0:69a0::44) (Remote host closed the connection)
[18:17:14] *** Quits: Common-Lisp (~o@2600:1700:94c0:69a0::44) (Quit: Leaving)
[18:17:17] *** Quits: tane (~tane@user/tane) (Ping timeout: 240 seconds)
[18:19:53] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[18:20:09] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 256 seconds)
[18:20:22] *** Joins: psf (~pi@206.55.172.18)
[18:22:48] *** Joins: Common-Lisp (~o@2600:1700:94c0:69a0::44)
[18:39:44] *** Joins: Oladon (~olad@98.43.81.226)
[18:53:26] *** Quits: Common-Lisp (~o@2600:1700:94c0:69a0::44) (Quit: Leaving)
[18:54:05] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[18:54:05] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[18:54:05] *** Joins: tane (~tane@user/tane)
[18:59:24] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 240 seconds)
[19:01:34] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[19:24:27] <rotateq> phoe: Yes it's a wonderful paper and shows how much knowledge and cerebral fat can be in just 10 pages. :)
[19:30:03] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:31:17] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[19:35:24] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[19:40:50] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[19:42:37] *** Joins: shka (~herr@109.231.3.55)
[19:42:40] *** Joins: razetime (~quassel@117.254.34.170)
[19:44:19] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[19:57:39] *** Joins: Common-Lisp (~o@2600:1700:94c0:69a0::44)
[19:58:29] *** Joins: jealousmonk (~user@user/jealousmonk)
[20:00:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:01:17] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:17:47] *** Quits: Common-Lisp (~o@2600:1700:94c0:69a0::44) (Quit: Leaving)
[20:18:33] *** Quits: dirtcastle (~dirtcastl@103.43.203.228) (Remote host closed the connection)
[20:24:33] *** Joins: ym (~ym@95.106.33.191)
[20:25:48] *** Quits: amb007 (~a_bakic@43.196.23.93.rev.sfr.net) (Ping timeout: 240 seconds)
[20:28:12] *** Joins: amb007 (~a_bakic@165.149.22.93.rev.sfr.net)
[20:35:25] *** Quits: razetime (~quassel@117.254.34.170) (Ping timeout: 250 seconds)
[20:36:50] <mfiano> rotateq: It seems you are using an IRC client that doesn't split long messages. Your long message above was cut short.
[20:38:34] *** Quits: kevingal (~quassel@176.61.88.240) (Ping timeout: 272 seconds)
[20:47:27] *** Joins: kevingal (~quassel@176.61.88.240)
[20:54:42] *** Joins: igemnace (~ian@user/igemnace)
[20:55:23] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 268 seconds)
[20:56:24] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:00:07] *** Joins: dirtcastle (~dirtcastl@2409:4072:98a:fdb8:785f:76ff:fe86:2ab5)
[21:04:05] <rotateq> mfiano: Oh that's too bad. :/ I use erc normally.
[21:04:58] <rotateq> Which is the last word that was sent through?
[21:06:44] <mfiano> "first-class co"
[21:08:29] <rotateq> ah then just '... first-class continuations."'
[21:18:17] *** Quits: dirtcastle (~dirtcastl@2409:4072:98a:fdb8:785f:76ff:fe86:2ab5) (Ping timeout: 240 seconds)
[21:28:35] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[21:28:57] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Quit: Leaving)
[21:32:04] <dbotton> When "overriding" a method in a child class, to call its parent implementation do I just "cast" the obj to the parent time and call or is there an official way? (sorry all the language is wrong for lisp I know, but not sure how to express it or likely have my answer)
[21:36:42] <_death> you can call-next-method, or use an :after method, depending on your use case
[21:40:31] *** Joins: dirtcastle (~dirtcastl@2409:4072:98a:fdb8:84f8:aff:feee:d7cb)
[21:45:54] <dbotton> appreciated
[21:48:53] <_death> sometimes picking a different method combination altogether may make sense.. but the run-of-the-mill functionality that's similar to the one found in other languages is call-next-method
[21:49:23] *** Quits: amb007 (~a_bakic@165.149.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[21:56:36] *** Quits: dirtcastle (~dirtcastl@2409:4072:98a:fdb8:84f8:aff:feee:d7cb) (Ping timeout: 240 seconds)
[22:12:28] *** Joins: lisp123 (~lisp123@120.154.103.52)
[22:20:45] *** Quits: Volt_ (~Volt_@c-73-145-161-51.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[22:24:56] *** Joins: palter (sid27521@id-27521.helmsley.irccloud.com)
[22:27:18] *** Joins: Volt_ (~Volt_@c-73-145-161-51.hsd1.mi.comcast.net)
[22:27:49] *** Quits: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[22:30:50] *** Quits: kevingal (~quassel@176.61.88.240) (Remote host closed the connection)
[22:39:03] *** Joins: MetaYan (~MetaYan@c-1555235c.07-84-7462671.bbcust.telenor.se)
[22:40:52] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[22:42:11] *** Joins: tane (~tane@user/tane)
[22:48:22] *** Joins: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net)
[22:53:40] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[22:55:23] <dbotton> that worked out well, my first multiple inheritance in Lisp :)  (a database table control + drop down list box) works amazing.
[22:55:52] <dbotton> thanks for the help
[22:56:31] *** Joins: Oladon (~olad@98.43.81.226)
[22:59:07] <dbotton> Can't wait to make a demo of it all soon. Drag and drop a few controls and a whole database driven multi table website in minutes.
[23:00:24] <_death> sounds cool
[23:09:32] *** Joins: dirtcastle (~dirtcastl@2409:4072:98a:fdb8:b494:72ff:fe8e:5213)
[23:11:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:11:28] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:14:31] *** Joins: amb007 (~a_bakic@127.246.204.77.rev.sfr.net)
[23:19:25] *** Joins: cjb (~cjb@user/cjb)
[23:20:13] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:20:58] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[23:22:57] *** Quits: dirtcastle (~dirtcastl@2409:4072:98a:fdb8:b494:72ff:fe8e:5213) (Ping timeout: 240 seconds)
[23:23:30] *** Joins: rogersm (~rogersm@90.166.180.250)
[23:40:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 240 seconds)
[23:50:21] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
