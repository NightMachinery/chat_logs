[00:00:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[00:00:11] <nedbat> no_gravity: right, I know. I'm wondering if you considered existing web frameworks instead of writing your own.
[00:00:20] <neilthereildeil> bjs: what does that have to do with dispatching? wouldnt we still have inefficiency?
[00:00:25] <no_gravity> nedbat: Totally. I will probably start hiring for a Django project soon.
[00:00:39] <bjs> neilthereildeil: what kind of inefficiency?
[00:00:47] <nedbat> no_gravity: ok, maybe I misunderstood what you were building.
[00:00:53] <LeoTal> habnabit_: Testing "called with such-and-such argument"; if I'm being pedantic I could also test "called exactly once" though that wouldn't be super valuable.
[00:01:25] *** Gustavo6046_ is now known as Gustavo6046
[00:01:30] <nedbat> LeoTal: another approach is to pass a function in the test that you will know is called because its work is included in the results of the main function.
[00:01:31] <no_gravity> nedbat: My Python "framework" so far is more a collection of modules for various purposes. Usually thin layers on top of built in modules.
[00:01:38] <neilthereildeil> bjs: im saying if we batch, we would at some point have like 999 processes waiting while the last 1 process finished its task. only after that 1 process finishes its task, would i batch 1000 more items
[00:01:42] <neilthereildeil> thats wasteful
[00:01:51] <neilthereildeil> ...unless im not understanding your suggestion
[00:01:57] <bjs> neilthereildeil: no no,  apply_async *does not create new processes*. If you have a pool of 4 processes then you have 4 processes and only 4 processes.
[00:02:03] <nedbat> LeoTal: then you don't need to patch, or have a spy, or whatever.
[00:02:07] <habnabit_> neilthereildeil, how did you get that impression of the number of processes spawned?
[00:02:13] <bjs> neilthereildeil: if you call apply_async 10,000,000 times you still only have 4 proceses, you just have a queue with a lot of items in it.
[00:02:18] <neilthereildeil> bjs: plase explain your batching idea in more detail
[00:02:23] <LeoTal> nedbat: In my case it's a logger
[00:02:26] *** Joins: jamea97 (~jamea77@200.68.140.59)
[00:02:49] <nedbat> LeoTal: i see, so it doesn't pass something back
[00:02:53] <bjs> neilthereildeil: well, call apply_async() 10,000 times and wait for all the results, and repeat until you're done
[00:02:54] <LeoTal> Right
[00:03:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:03:04] <bjs> neilthereildeil: (or rather, probably just call .map() with an input of size 10,000)
[00:03:09] <nedbat> no_gravity: i'd be curious to see how this original global question came about. what that module looks like.
[00:03:38] *** Quits: robyndrake (~robyndrak@user/robyndrake) (Quit: WeeChat 3.2)
[00:04:10] <neilthereildeil> bjs: the issue with that idea is that each of the 10,000 items takes memory. if the rate of incoming working is higher than the rate of work being done, ill eventually run out of memory.
[00:04:16] <LeoTal> Ahhh, `Mock` in unittest.mock does exactly what I want, thank you!
[00:04:25] <neilthereildeil> incoming work items*
[00:04:32] <bjs> neilthereildeil: why would it run out of memory? it only does 10,000 at a time
[00:04:43] *** Joins: segfaultz (~segfaultz@2604:8540:fcc0:2000::d9bc)
[00:04:50] <no_gravity> nedbat: The framework provides one global database connection to the "main" database of the application. Via a "db" module. And the db module upon "connect" takes an argument "auto_commit". That is the module wide variable that is set via db.connect(auto_commit=True).
[00:04:59] *** Parts: segfaultz (~segfaultz@2604:8540:fcc0:2000::d9bc) ()
[00:05:09] *** Joins: segfaultz (~segfaultz@2604:8540:fcc0:2000::d9bc)
[00:05:13] <bjs> neilthereildeil: you make a Pool, give it 10,000 things to do and wait for it to finish, then give it the next 10,000 things to do, and so on
[00:05:24] <habnabit_> neilthereildeil, sounds like you need some backpressure on the incoming items
[00:05:28] <habnabit_> neilthereildeil, how are they coming in?
[00:05:33] <neilthereildeil> bjs: when i enqueue 10,001, and every item beyond that, it will take more and more memory
[00:05:42] <neilthereildeil> i am reading them from mySQL
[00:05:51] <bjs> neilthereildeil: why would you enqueue 10,001 items if you're only enquing 10,000 items at once?
[00:06:00] <habnabit_> neilthereildeil, ok, so don't read as many if you have jobs to process still?
[00:06:13] <habnabit_> neilthereildeil, you're creating the problem for yourself
[00:06:17] <bjs> neilthereildeil: you send 10,000 things off, then you wait for it to finish, then read+send the next 10,000 things
[00:06:22] <neilthereildeil> yea i think i might be making this more complex
[00:06:45] <bjs> neilthereildeil: or really you might just find that .imap(the_func,  some_generator_that_reads_from_database)  just works
[00:06:47] *** Quits: jamea97 (~jamea77@200.68.140.59) (Ping timeout: 252 seconds)
[00:07:08] <neilthereildeil> bjs: where are you setting 10,000?
[00:07:18] *** Quits: gildarts (16abab341f@user/gildarts) (Remote host closed the connection)
[00:07:19] <bjs> neilthereildeil: what do you mean "setting" ?
[00:07:20] <neilthereildeil> how are you enforcing that limit?
[00:07:22] <bjs> I just made up that number
[00:07:24] <neilthereildeil> in your idea?
[00:07:40] <bjs> neilthereildeil: `for i in range(10_000): poo.apply_async(...)`  for the most basic most fundamental way
[00:07:42] *** Quits: therealjumbo (~zignegoj@mail.hedonline.com) (Ping timeout: 258 seconds)
[00:07:49] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-f3-42b3-24b0-e633.fixed6.kpn.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:07:56] <bjs> but probably like i said,  .map() of a thing with 10,000 elements or simply just an .imap() might be even better.
[00:08:02] <neilthereildeil> ok, and then ur saying to block until workQueue.empty()?
[00:08:51] <neilthereildeil> bjs: whats your waiting mechanism in that loop?
[00:08:53] <bjs> neilthereildeil: what's workQueue?  no, just wait for the 10,000 things to be finished
[00:09:10] <neilthereildeil> how would you wait for it to "finish"? what function would you call?
[00:09:11] *** Joins: gildarts (16abab341f@user/gildarts)
[00:09:13] <bjs> neilthereildeil: well .map() and .imap() do it for you, that's why i've been pushing you to them *so very strongly*
[00:09:22] <bjs> neilthereildeil: otherwise apply_async gives you all you need to know when the task is finished
[00:09:25] *** Quits: RickDeckard (~RickDecka@pool-100-12-189-215.nycmny.fios.verizon.net) (Quit: Leaving...)
[00:09:43] <neilthereildeil> i currrently wrote it with apply_asyn, so lets use that example so we dont introduce too many variables into the discussion
[00:09:57] <bjs> neilthereildeil: apply_async is the most fiddly and most complicated
[00:10:02] *** Joins: attackthemoon (~attackthe@2600:6c40:1d00:560c:b88c:e5f4:7441:6282)
[00:10:17] <habnabit_> bjs, i think a part of this question is "what about when all but one job finishes and a worker has more capacity but is stuck waiting for the full batch"
[00:10:31] <neilthereildeil> habnabit_: exactly.
[00:10:34] <habnabit_> bjs, and i'm not sure how you'd solve that with apply_async _or_ imap
[00:10:45] <neilthereildeil> thats my question. what habnabit_ said
[00:10:47] <bjs> no I thought neilthereildeil was worried that the queue would have _more_ than 10,000 items in it
[00:10:53] <bjs> and so use lots of memory
[00:11:01] <neilthereildeil> im worried about over and under utilization
[00:11:09] <neilthereildeil> but lets focus on what habnabit_ just said
[00:11:10] <habnabit_> bjs, it sounds like that was part of the concern but it's also what i said
[00:11:15] <habnabit_> so ok
[00:11:17] <neilthereildeil> how would i avoid that underutilization problem?
[00:11:37] <bjs> neilthereildeil: the under utilization is barely worth worrying about, there is a tiny period of time at the end of each batch when the last 2-3 tasks are being finished where one process idles for a bit
[00:11:47] *** Joins: Barones (~Barones@2804:48dc:8500:0:e0ca:58a6:dc63:dc0b)
[00:11:50] <neilthereildeil> i have 184 processes
[00:11:55] <neilthereildeil> it matters at this scale
[00:11:56] <bjs> I think that's very hard to avoid without re-writing Pool (I think even imap doesn't do much)
[00:12:08] <bjs> neilthereildeil: how long does each task take to finish?
[00:12:11] *** Joins: robyndrake (~robyndrak@user/robyndrake)
[00:12:13] <neilthereildeil> a few minutes
[00:12:17] <neilthereildeil> ok, so thats ONE problem
[00:12:22] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[00:12:27] <neilthereildeil> now the SECOND problem is the one you mentioned
[00:12:34] <bjs> so then you have a few minutes where you're using <184 processes at once
[00:12:42] <neilthereildeil> yes. thats bad.
[00:12:44] <bjs> but probably .imap helps even there
[00:12:45] <neilthereildeil> for performance
[00:13:41] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-f3-42b3-24b0-e633.fixed6.kpn.net)
[00:13:57] <neilthereildeil> and if i avoid this underutilization scenario by avoiding that loop you wrote, and i just call apply_async, and immediately look for another DB task, i could exhaust memory because if i am calling apply_async on many many DB tasks faster than the worker processes can get the work done, i will run out of memory
[00:14:10] *** Quits: y1n (~y1n@84-115-64-162.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[00:14:12] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[00:14:41] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 272 seconds)
[00:15:07] <bjs> neilthereildeil: well you can just adjust the loop slightly and instead of waiting for *all* of them to finish, just wait for like half of them to finish then add some more
[00:15:22] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-f3-42b3-24b0-e633.fixed6.kpn.net) (Client Quit)
[00:15:23] <neilthereildeil> but than that becomes a heuristic "tuning" problem
[00:15:28] *** Joins: therealjumbo (~zignegoj@mail.hedonline.com)
[00:15:30] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[00:15:39] <neilthereildeil> so i came up with a solution but its a little more complex.
[00:16:12] *** Joins: wyclif (~wyclif@user/wyclif)
[00:16:40] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Remote host closed the connection)
[00:17:04] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[00:17:22] <bjs> neilthereildeil: yes this will always be a heuristic tuning problem, but the approach I just gave works fine and you can just adjust it up or down
[00:17:28] <bjs> the longer running your tasks the smaller the queue
[00:17:50] <bjs> the more processes the bigger the queue.  The longer it takes to produce a new task the longer the queue
[00:17:59] <neilthereildeil> from the parent process, create a pool of 184 workers and initialize multiprocessing.queue. in a loop, every time i read something from the DB, put(block=True) it into multiprocessing.queue and call apply_async. from the child process, the first thing i do is call multiprocessing.queue.get(block=True) and then process the workitem
[00:19:00] <neilthereildeil> habnabit_: see ^
[00:19:30] <bjs> habnabit_: I don't get why you so want this extra communication,  the size of the queue is entirely visible to the process reading from the database
[00:19:33] <bjs> oops
[00:19:34] *** Joins: toverna (~uni@128-70-241-172.broadband.corbina.ru)
[00:19:38] <bjs> neilthereildeil: I don't get why you so want this extra communication,  the size of the queue is entirely visible to the process reading from the database
[00:19:40] *** Quits: therealjumbo (~zignegoj@mail.hedonline.com) (Ping timeout: 246 seconds)
[00:20:07] <bjs> neilthereildeil: it's putting stuff into the Pool and getting results (maybe async ones) out. It can just check how many are done, and decide whether to put more in
[00:20:24] <neilthereildeil> due to concurrency, the qSize() return value is not reliable. if i do > 184 jobs at a time, ill run out of memory
[00:20:48] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 252 seconds)
[00:20:55] <neilthereildeil> this is my solution to sustain but not exceed full capacity when under load
[00:21:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[00:21:11] <bjs> Why are you worried about concurrency there's only 1 producer here reading the database, it really should just *know* how many tasks are out there and how many have been finished and all that
[00:21:28] *** Joins: srhm (~ascii@user/srhm)
[00:21:34] <bjs> because it's 100% in control of all of that. It produces each task, it sends the task to the pool and it's what has the handle the Pool gives back to say when it's done
[00:21:36] *** Quits: toverna (~uni@128-70-241-172.broadband.corbina.ru) (Client Quit)
[00:22:07] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-f3-42b3-24b0-e633.fixed6.kpn.net)
[00:22:19] *** Quits: meph (~mepholic@flux.hxx.in) (Quit: Bye forever!)
[00:22:21] <neilthereildeil> the semaphore issue ive been hunting for a few weeks might be caused by one of the chil processes abnormally terminating and not releasing the seamphore or telling the parent its don
[00:22:24] *** Joins: therealjumbo (~zignegoj@mail.hedonline.com)
[00:22:29] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-f3-42b3-24b0-e633.fixed6.kpn.net) (Client Quit)
[00:22:39] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 258 seconds)
[00:22:46] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-f3-42b3-24b0-e633.fixed6.kpn.net)
[00:22:52] <neilthereildeil> for resilience, i dont want to track child processes. if a process fails, it fails.
[00:22:54] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 272 seconds)
[00:23:14] *** Joins: cheater (~Username@user/cheater)
[00:23:23] <neilthereildeil> if something stupid happens with the python runtime like wasting too much memory, its just 1 task out of thousands
[00:23:40] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[00:23:41] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[00:23:53] <neilthereildeil> can you think of a better solution or a problem with my soltuion?
[00:24:12] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:24:53] *** Quits: anas (~anas@196.235.5.143) (Quit: WeeChat 3.3-dev)
[00:25:07] <bjs> neilthereildeil: I'm still not sure why you are against my solution? It doesn't require any extra tracking of details, and only uses what the parent process has available locally
[00:25:10] *** Joins: anas (~anas@196.235.5.143)
[00:25:42] <jabberwock> neilthereildeil: a shared object among the children that the parent can read. the children should "ping"-write to the object every X amount of time. the parent can poll the numbers and take further action if a particular task/child hasn't done this
[00:25:45] <neilthereildeil> the batching idea will make 183 processes wait for 1 process to finish
[00:25:46] <jabberwock> I also didn't read bjs solution
[00:25:58] <bjs> if *so* many of the children die that you start to get a backlog of never-going-to-finish tasks then my approach might start to have problems. But probably you'll have other problems first
[00:25:59] *** Joins: tspng (~tspng@2a02:168:a1a1:1:838:3a2e:c2be:c148)
[00:26:01] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[00:26:19] <bjs> neilthereildeil: no, you can tune it like we said.  You don't have to wait for *all* the processes to finish, you can wait for any number of them to finish
[00:26:36] <bjs> jabberwock: that won't work though, because you can't have a shared object like that.
[00:26:47] <jabberwock> well.. it could be a socket or file etc
[00:27:01] *** Quits: therealjumbo (~zignegoj@mail.hedonline.com) (Ping timeout: 246 seconds)
[00:27:03] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[00:27:11] <jabberwock> "shared place" is better
[00:27:34] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[00:27:36] *** Joins: therealjumbo (~zignegoj@mail.hedonline.com)
[00:27:47] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[00:27:47] <neilthereildeil> the batching idea will make 183 processes wait for 1 process to finish->underutilization. if we remove the loop and go on calling apply_async we will eventually run out of memory because apply_async does not block when all child processes are busy. rather it takes a little bit of memory in a queue and returns immediately. this will fail if the rate
[00:27:48] <neilthereildeil> of apply_async calss is faster than the rate that the work gets done->memory exhaustion
[00:28:01] <bjs> neilthereildeil: no it does not have to do that, like I said you don't have to wait for the entire batch to finish
[00:28:04] *** Quits: anas (~anas@196.235.5.143) (Client Quit)
[00:28:09] <bjs> you can tune it to do what you want
[00:28:20] *** Joins: anas (~anas@196.235.5.143)
[00:28:25] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 246 seconds)
[00:28:41] <neilthereildeil> right, but tuning becomes messy. what if theres a burst of requests?
[00:28:42] <bjs> maybe you really do just want to re-write Pool just so you can keep the queues full if unreliable children are a big concern;  since the children can die at any time any kind of synchronization between child <-> parent is going to fail
[00:28:51] <neilthereildeil> what if im running on faster or slower hardware?
[00:28:55] <bjs> neilthereildeil: a "burst of requests"?  YOU are the ones making the requests
[00:29:03] <neilthereildeil> no, its an external webservice
[00:29:07] <neilthereildeil> making requests
[00:29:10] <neilthereildeil> i cannot contro lthat
[00:29:13] <neilthereildeil> control_that
[00:29:23] <bjs> neilthereildeil: then you have a queue on the other side, there is no magical way to match the two
[00:29:32] <jabberwock> Use AWS SQS
[00:29:33] *** Joins: toverna (~uni@128-70-241-172.broadband.corbina.ru)
[00:29:40] *** Joins: MikZyth (~MikZyth@188.65.242.77)
[00:29:52] <neilthereildeil> im running onPrem, not AWS
[00:29:56] <jabberwock> that will do this stuff for you
[00:30:05] *** Joins: reedrichards (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[00:30:17] <jabberwock> AWS has on premise solutions
[00:30:31] <neilthereildeil> jabberwock: im using a multiprocessing.queue. the parent writes (blocking) to the queue and the children read (blocking) from the queue
[00:30:42] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:30:44] <neilthereildeil> jabberwock: do u see any issue with my solution?
[00:30:54] <neilthereildeil> its not using any 3rd party libs etc
[00:31:00] <jabberwock> Yes... read and write locks
[00:31:16] <neilthereildeil> from the parent process, create a pool of 184 workers and initialize multiprocessing.queue. in a loop, every time i read something from the DB, put(block=True) it into multiprocessing.queue and call apply_async. from the child process, the first thing i do is call multiprocessing.queue.get(block=True) and then process the workitem
[00:31:28] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 258 seconds)
[00:31:28] *** reedrichards is now known as MrFantastik
[00:31:46] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 240 seconds)
[00:31:48] *** Quits: anas (~anas@196.235.5.143) (Client Quit)
[00:31:49] <jabberwock> Does the DB have things to handle this?
[00:32:02] <jabberwock> rather than relying on your processes to enforce DB-level behavior
[00:32:03] *** Joins: anas (~anas@196.235.5.143)
[00:32:05] <neilthereildeil> no, the logic has to be in my application
[00:32:13] <jabberwock> then I'd go back to the design board personally
[00:32:16] <neilthereildeil> no, im not enforcing DB level behavior
[00:32:34] <jabberwock> It seems that what you described is compensating for something a DB is supposed to do
[00:32:40] <jabberwock> or I"m not grasping it
[00:32:52] <neilthereildeil> https://pastebin.com/dPg3SHPU
[00:32:58] <neilthereildeil> heres my soution
[00:33:02] *** Joins: wyclif (~wyclif@user/wyclif)
[00:33:48] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[00:34:11] *** Quits: therealjumbo (~zignegoj@mail.hedonline.com) (Ping timeout: 256 seconds)
[00:34:24] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[00:34:38] <bjs> neilthereildeil: btw creating this many processes sounds incredibly inefficient
[00:34:48] *** Joins: noctavian_ (~noctavian@gateway/tor-sasl/noctavian)
[00:34:53] <bjs> especially if you really only have 3 cores :)
[00:35:00] <neilthereildeil> i have 56 cores :)
[00:35:04] <bjs> oh okay
[00:35:19] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[00:35:50] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[00:36:45] <neilthereildeil> would it make sense to put "for counter in range(numProcesses):        process_pool.apply_async(childProcess)" at line 21?
[00:36:58] <neilthereildeil> in the application, it will execute 184 instead of 3 times
[00:37:16] <neilthereildeil> this way it will have 184 child multiprocesses blocked at line 13 waiting for work
[00:37:54] *** Quits: magla (~gelignite@55d42021.access.ecotel.net) (Quit: Stay safe!)
[00:37:58] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:38:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:39:28] *** Joins: pnoud (~pnoud@user/pnoud)
[00:40:29] *** Quits: noctavian_ (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[00:42:42] *** Joins: therealjumbo (~zignegoj@mail.hedonline.com)
[00:43:10] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 252 seconds)
[00:44:42] *** Quits: neilthereildeil (~neilthere@70.21.11.5) (Quit: Client closed)
[00:44:44] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[00:45:09] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[00:45:24] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[00:46:50] <bjs> neilthereildevil: I'm still not sure why you're doing something so complicated, my approach is very simple:https://bpa.st/6QGQ
[00:46:53] <bjs> oh
[00:46:54] <bjs> they left
[00:47:09] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Textual IRC Client: www.textualapp.com)
[00:47:20] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[00:47:27] *** Quits: henistein (~henistein@2001:8a0:c1b3:6b01:3cd5:c779:a093:a73a) (Quit: Client closed)
[00:48:47] *** Quits: JanC (~janc@user/janc) (Read error: Connection reset by peer)
[00:49:01] *** Joins: JanC (~janc@user/janc)
[00:49:42] *** Quits: djhankb (~djhankb@208.113.164.68) (Quit: Ping timeout (120 seconds))
[00:50:12] *** Joins: djhankb (~djhankb@208.113.164.68)
[00:50:20] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[00:51:03] *** Joins: wyclif (~wyclif@user/wyclif)
[00:52:30] *** Quits: toverna (~uni@128-70-241-172.broadband.corbina.ru) (Quit: Konversation terminated!)
[00:53:56] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[00:55:17] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[00:55:24] <SpeakerToMeat> Hello istas
[00:55:38] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[00:55:38] *** Joins: resmo (~resmo@2a00:d420:9:8a00:7166:a9ce:4689:c07)
[00:56:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:56:34] <SpeakerToMeat> Question, any idea what's the problem here? trying to "python3 -m pip install PyQt5>=5.9" http://paste.debian.net/1203719/
[00:56:50] *** Quits: tspng (~tspng@2a02:168:a1a1:1:838:3a2e:c2be:c148) (Remote host closed the connection)
[00:59:11] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[01:00:18] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[01:00:37] *** Quits: greedom (~greedom@2001:16b8:2e96:cb00:e220:eb05:8fa6:53ea) (Remote host closed the connection)
[01:00:49] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[01:00:58] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[01:01:38] <mefistofeles> SpeakerToMeat: don't really know, I'd try deleting the cached package and try again?
[01:02:43] <SpeakerToMeat> mefistofeles, I tried with --no-cache-dir same thing
[01:02:47] *** Joins: luna-is-here (~quassel@ip-95-223-58-221.hsi16.unitymediagroup.de)
[01:03:01] *** Joins: cs (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[01:03:17] <mefistofeles> SpeakerToMeat: I guess it is not exactly the same, it should've downloaded the tar.gz again, right?
[01:03:43] <SnoopJ> SpeakerToMeat, you might try running the install with the verbosity turned up (-v, multiple increases possible up to -vvv)
[01:03:54] <mefistofeles> moar v needed!
[01:04:15] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[01:04:44] <SnoopJ> All we can really tell you from the error report is what it already says: that setup.py doesn't exist for some reason.
[01:05:12] <SnoopJ> doesn't appear to be a bug in that release, I can install it with pip 21.1.3
[01:05:20] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[01:05:46] <SnoopJ> (silly question: have you checked if the disk is full?)
[01:05:57] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[01:06:17] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 265 seconds)
[01:06:37] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[01:06:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:07:14] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[01:09:00] *** Joins: wyclif (~wyclif@user/wyclif)
[01:11:08] *** Quits: gggkmp (~gggkmp@114.245.111.21) (Ping timeout: 252 seconds)
[01:11:19] *** Joins: gggkmp (~gggkmp@60.10.23.164)
[01:13:08] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[01:13:23] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[01:13:33] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[01:14:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[01:14:15] *** Quits: cs (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:14:29] <SpeakerToMeat> mefistofeles, yeah downloaded again
[01:14:37] <SpeakerToMeat> SnoopJ, good idea maybe
[01:14:50] <SpeakerToMeat> SnoopJ, that's not what the error seems to say....
[01:14:55] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[01:15:13] <SnoopJ> SpeakerToMeat, oh? how do you interpret the FileNotFoundError?
[01:15:17] <SpeakerToMeat> SnoopJ, Oh yes you're rioght
[01:15:25] *** Joins: akinode (~akinode@2a02:908:13d4:b2c0:2ce3:d846:6d19:dc58)
[01:15:40] <SpeakerToMeat> Yeah I remembered the error line came from setup.py not tokenize.py
[01:15:44] <SpeakerToMeat> missremembered
[01:15:46] *** Quits: KevinX (~KevinX@94.140.11.16) (Ping timeout: 240 seconds)
[01:15:59] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: No route to host)
[01:16:01] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 246 seconds)
[01:16:16] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[01:16:25] <akinode> hi, i activated my virtual environment via virtualenv on powershell and am suddenly unable to open python without windows asking me which program I would like to use. using python outside of the virtual environment works, is there a reason for this?
[01:16:44] *** Joins: cheater (~Username@user/cheater)
[01:17:09] *** Joins: hardwire (sid415742@id-415742.highgate.irccloud.com)
[01:17:14] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[01:17:29] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[01:18:12] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[01:18:21] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Read error: Connection reset by peer)
[01:18:42] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[01:18:50] *** Joins: Auron (Auron956@user/auron)
[01:18:59] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[01:20:54] <hardwire> heyo.  I need to create a python interface file for a class that is not available as an in path module. `./node_modules/serverless/lib/plugins/aws/invokeLocal/runtimeWrappers/invoke.py` for the FakeLambdaContext class and somehow incorporate that in to my application which is then run BY this module for.. well.. OCD sake.
[01:20:54] <hardwire> Right now I am creating a type as `AnyLambdaContext = Union[LambdaContext, Any]` in order to get around this funk when using realtime type checking via typeguard.
[01:20:54] <hardwire> Anybody run into this sort of scenario?  I'm not horribly familiar with how I could relate a .pyi file to this completely unpathed python code that is executing tests.
[01:21:02] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[01:22:05] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[01:22:18] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[01:23:33] *** Joins: wyclif (~wyclif@user/wyclif)
[01:23:47] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[01:25:36] *** Joins: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net)
[01:26:22] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[01:27:36] *** Joins: tspng (~tspng@2a02:168:a1a1:1:3de0:d441:7ab:1ee8)
[01:29:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[01:30:17] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[01:30:27] *** Joins: vsantana (~Thunderbi@fttx-177136148192.usr.predialnet.com.br)
[01:30:42] *** Quits: vsantana (~Thunderbi@fttx-177136148192.usr.predialnet.com.br) (Quit: vsantana)
[01:31:49] *** Quits: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr) (Quit: Client closed)
[01:32:02] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Ping timeout: 252 seconds)
[01:32:20] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[01:33:07] *** Quits: redgloboli (~redglobol@user/redgloboli) (Ping timeout: 256 seconds)
[01:33:31] *** Joins: clawh (~clawh@185.244.214.60)
[01:33:41] *** Quits: clawh_ (~clawh@185.244.214.60) (Remote host closed the connection)
[01:33:50] *** Quits: anas (~anas@196.235.5.143) (Ping timeout: 272 seconds)
[01:33:53] <ApostleInTriumph> Hi. I've a pandas dataframe and a dict now. The keys of the dict must correspond to a column. and the values of the dict must belong to a new column, but in the same row where the keys match. How do I go about?
[01:34:20] *** Joins: redgloboli (~redglobol@user/redgloboli)
[01:34:23] <Widdershins> hardwire: it sounds like you should probably use mocks instead
[01:34:37] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[01:34:50] <ApostleInTriumph> The catch here is, the keys of dict are only "subset" of string in the column. not exact match.
[01:35:11] <SnoopJ> ApostleInTriumph, did you have any luck coming up with sample data to show us?
[01:35:14] <Widdershins> ApostleInTriumph: you described a situation but haven't described anything you actually want to do
[01:35:35] <ApostleInTriumph> SnoopJ: yes, actually jinsun's solution should've worked
[01:35:37] <hardwire> Widdershins: oh no this isn't a test.
[01:35:37] *** Joins: anas (~anas@196.235.5.143)
[01:35:56] <ApostleInTriumph> but the problem here is columns aren't exact match and that's why it didn't work
[01:36:26] <Widdershins> hardwire: you described code running tests that wants to have an interface stub or something
[01:37:42] *** Quits: gggkmp (~gggkmp@60.10.23.164) (Ping timeout: 268 seconds)
[01:37:45] <hardwire> no tests mentioned.  Just trying to get IDE oriented typing working as well as cover the use of typeguard.typechecked decoration on a lambda handler function when run locally via the fake lambda environment.
[01:38:04] <ApostleInTriumph> SnoopJ: https://ibb.co/rxdsTfD here is the dataframe, and the dict's keys https://ibb.co/Xb8N0KV
[01:39:07] <Widdershins> hardwire: sounds like it's harming a lot more than it helps to have hard type checks there
[01:39:10] *** Joins: cman (~Cody@2603:9000:d104:8465:7db2:1203:6422:9d08)
[01:39:30] <hardwire> It's a pain.. but we have standards to deal with.
[01:39:35] <SnoopJ> ApostleInTriumph, the keys of that dict do not correspond to any of the columns shown in the screenshot. Is that the case for all the columns?
[01:39:42] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[01:39:46] <Widdershins> standards are meant to make your life easier
[01:40:00] <ApostleInTriumph> SnoopJ: no. i think it's the way I showed you that was wrong
[01:40:01] <hardwire> micro/macro
[01:40:10] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 246 seconds)
[01:40:13] <ApostleInTriumph> that wasn't representative of all the keys/columns
[01:40:27] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[01:40:45] <Widdershins> https://i.imgur.com/CDDkrGw.jpg
[01:40:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[01:41:14] <Widdershins> you have code that is trying to assert properties of unknowable, inaccessible other code
[01:41:17] *** Joins: wyclif (~wyclif@user/wyclif)
[01:41:21] <ApostleInTriumph> they match, but not all of them. the ones that don't match, dict keys are subset of the string in the dataframe
[01:41:41] *** Quits: cman (~Cody@2603:9000:d104:8465:7db2:1203:6422:9d08) (Client Quit)
[01:41:41] <Widdershins> either the project structure is bad or you need to just have some developer trust here
[01:41:58] *** Joins: cman (~Cody@2603:9000:d104:8465:7db2:1203:6422:9d08)
[01:42:24] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[01:43:41] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 252 seconds)
[01:44:10] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[01:44:20] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:44:50] *** Quits: cman (~Cody@2603:9000:d104:8465:7db2:1203:6422:9d08) (Client Quit)
[01:45:43] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Ping timeout: 268 seconds)
[01:46:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[01:46:35] *** Joins: cman (~Cody@2603:9000:d104:8465:7db2:1203:6422:9d08)
[01:47:21] *** Quits: rhax (~yannick@user/rhax) (Quit: Leaving)
[01:48:31] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[01:48:43] *** Joins: wyclif (~wyclif@user/wyclif)
[01:49:18] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[01:49:32] *** Quits: boxelephant (~boxelepha@209.143.87.130) (Ping timeout: 252 seconds)
[01:49:41] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[01:49:43] *** Quits: Barones (~Barones@2804:48dc:8500:0:e0ca:58a6:dc63:dc0b) (Remote host closed the connection)
[01:49:44] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 252 seconds)
[01:49:51] *** Joins: jinsun (~quassel@user/jinsun)
[01:49:57] *** Joins: Barones (~Barones@2804:48dc:8500:0:e0ca:58a6:dc63:dc0b)
[01:50:14] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[01:50:21] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:51:12] *** Quits: yetitwo (~tannersti@c-76-25-59-209.hsd1.co.comcast.net) (Ping timeout: 258 seconds)
[01:51:50] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[01:51:56] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 252 seconds)
[01:52:58] *** Joins: hposca (~hposca@node-1w7jr9phoke2ud7ur43vu6vbd.ipv6.telus.net)
[01:53:03] *** Quits: Abrax (~Abrax@user/abrax) (Read error: Connection reset by peer)
[01:53:56] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[01:55:06] *** Joins: Dan39 (~dan@user/dan39)
[01:55:25] *** Joins: i0e (~is0ke3@user/is0ke3)
[01:55:39] *** Quits: Meteorhead (~Meteorhea@lfbn-idf1-1-703-113.w86-245.abo.wanadoo.fr) (Quit: Client closed)
[01:55:40] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Quit: leaving)
[01:56:14] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[01:56:29] *** Joins: Celeo (~Celeo@user/celeo)
[01:56:40] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[01:56:50] <ApostleInTriumph> SnoopJ: i've gotten rid of dataframe, here's the df as tuple https://bpa.st/K74A and here are the dict keys, https://bpa.st/A2BA
[01:57:33] <ApostleInTriumph> as you can see, they're not exactly matching. can you please suggest an easier way than looping through each/either of them to combine them?
[01:59:22] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 240 seconds)
[02:00:26] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:01:14] *** entuland_ is now known as entuland
[02:01:53] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[02:04:24] *** Quits: ntdll (~ntdll@user/ntdll) (Quit: WeeChat 2.8)
[02:04:49] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[02:05:00] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[02:05:07] *** Quits: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr) (Remote host closed the connection)
[02:06:10] *** Quits: envex (~envex@cpe-173-91-189-33.neo.res.rr.com) ()
[02:06:47] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[02:06:55] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[02:08:14] *** Quits: segfaultz (~segfaultz@2604:8540:fcc0:2000::d9bc) (Quit: Client closed)
[02:08:40] *** Joins: brickfat (~brickfat@user/brickfat)
[02:09:52] *** Quits: ano (~weechat@user/ano) (Ping timeout: 244 seconds)
[02:10:02] *** Quits: cruzr (~cruzr@69.30.246.164) (Read error: Connection reset by peer)
[02:10:41] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[02:11:00] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[02:11:05] *** Joins: ano (~weechat@user/ano)
[02:11:46] *** Joins: cruzr (~cruzr@69.30.246.164)
[02:11:48] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[02:12:48] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[02:12:58] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[02:13:34] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[02:14:14] *** Joins: lmmx (~louis@host-80-47-117-118.as13285.net)
[02:14:52] <lmmx> does anyone have a good concise definition of the generator/iterator distinction?
[02:15:05] <lmmx> online answers aren't v satisfying
[02:15:44] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[02:16:24] <SnoopJ> lmmx, an iterator is an object you can call next() on; a generator (iterator) a special kind of iterator, frequently produced by generator functions (often just called generators; the terminology can be confusing)
[02:16:27] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[02:16:34] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[02:17:40] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:17:48] <lmmx> SnoopJ mhm, I have written these functions but still couldn't put my finger on the precise definitions... alas
[02:18:09] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[02:18:14] <lmmx> I read "a generator returns a lazy iterator" which maybe is the key bit
[02:18:28] <lmmx> anyway not important, just a 'fun' Q (:
[02:18:33] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:18:44] <SnoopJ> it's not really about laziness, it's mostly just how the iterator was produced
[02:19:40] <SnoopJ> generator iterators define .send(), .throw(), and .close() in addition to __next__(). Of those, .send() is the most magical, because it lets you do two way communication: `incoming_data = yield outgoing_data` inside a generator function
[02:19:46] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 240 seconds)
[02:20:03] <SnoopJ> but this is definitely close to being trivia :)
[02:20:26] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[02:20:42] *** Joins: furrykef (~furrykef@ip68-229-199-137.ok.ok.cox.net)
[02:20:48] <lmmx> ya feels that way lol
[02:21:15] <lmmx> mhm yeah I've used the magical send
[02:21:55] *** Joins: Kre10s (~maximilia@ip5f5acc99.dynamic.kabel-deutschland.de)
[02:22:02] <SnoopJ> a generator iterator is 'just' a special kind of iterator with these extra properties, in the same sense that a square is a particular sort of rectangle
[02:22:11] <lmmx> I have a hunch that everything becoming typed will actually help clarify this distinction in practice
[02:22:13] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:22:13] <SnoopJ> and generator functions produce those objects
[02:22:27] <lmmx> since there's a greater chance of actually naming them when using them
[02:22:31] <SnoopJ> (the iterator is the thing that actually does the iterating, it holds definite state)
[02:22:44] <lmmx> mm
[02:23:00] <lmmx> hmmkay I got it
[02:23:06] *** Parts: furrykef (~furrykef@ip68-229-199-137.ok.ok.cox.net) (Leaving)
[02:23:09] <Kre10s> Is there a known bug involving : in filenames on windows+python2.7 ? I am unable to create a file like so: open('foo/bar:baz.x.y', 'wb').write('HI')
[02:23:22] *** Joins: Sophon96 (~brandon@user/sophon96)
[02:23:40] <SnoopJ> Kre10s, ':' is not valid in a filename on Windows
[02:23:51] <grym> Kre10s: it's prohibited.https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
[02:23:56] <jinsun> lmmx: yes, I learnt that generators can return and throw when I tried to annotate a generator function
[02:23:57] <grym> so it's not a bug, anyway
[02:24:01] <Kre10s> SnoopJ: oh bother :(
[02:24:14] <lmmx> jinsun :)
[02:24:53] <chance> lmmx, SnoopJ: also, iterables may or may not have to be constructed before a comprehension can operate on them. a generator containing a comprehension does *not* need to be constructed before it can be used.
[02:24:57] <Sophon96> Hi, how could I statically compile python? Is this page (still) valid: https://wiki.python.org/moin/BuildStatically?
[02:25:03] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[02:25:16] <SnoopJ> chance, well, iterables are a third class of object entirely (they are things you can call iter() on)
[02:25:27] *** Joins: meph (~mepholic@flux.hxx.in)
[02:25:43] <chance> this means that any() and all(<big_list_comprehension>) are not savings, but any/all(<big_generator_comprehension>) is a savings, is the main point
[02:25:47] *** Quits: meph (~mepholic@flux.hxx.in) (Client Quit)
[02:25:48] <lmmx> I'm still waiting to type annotate my first generator that actually uses the 2nd and 3rd entries in the triple...
[02:25:54] <chance> it seems like a little thing, but then it becomes a huge thing one day
[02:26:22] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[02:26:28] *** Quits: ferz (~ferz@146-241-215-252.dyn.eolo.it) (Ping timeout: 258 seconds)
[02:26:33] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[02:26:41] <lmmx> Sophon96 ha David Beazley was just discussing this today https://twitter.com/dabeaz/status/1412678370756804611
[02:26:43] <SnoopJ> every iterator is also an iterable, calling iter() on them should return themselves
[02:27:00] <chance> SnoopJ: i see now what you mean, and, yeah, that's what i was getting at. 'iterable' is a generic term. 'generator' is a slightly less generic term, and you can rely on it in ^ particular way
[02:27:03] <SnoopJ> (which is _definitely_ trivia)
[02:27:08] *** Joins: meph (~mepholic@flux.hxx.in)
[02:27:18] <SnoopJ> chance, neither of them is generic in the Python language docs
[02:27:24] <grym> lmmx: if you're running a busted openssl, i don't know what to tell you
[02:27:25] <chance> 'generic' in the colloquial sense
[02:27:26] *** Joins: c10l (~c10l@89.34.167.207)
[02:27:28] <grym> except like, don't.
[02:27:33] <lmmx> lololol
[02:27:33] <SnoopJ> ah
[02:27:34] <chance> ambiguous. unspecific. broad.
[02:27:46] *** Quits: argento (~argent0@168-227-97-29.ptr.westnet.com.ar) (Ping timeout: 246 seconds)
[02:28:02] <Kre10s> grym: If it is prohibited why do I not get an error?
[02:28:09] <grym> Kre10s: beats me
[02:28:09] <SnoopJ> from least constrained to most constrained: iterable > iterator > generator
[02:28:12] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[02:28:31] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[02:28:44] <SnoopJ> erm, I should say "generator iterator" there to avoid confusion with generator functions and generator comprehensions (blegh)
[02:28:47] <Kre10s> It silently creates a file like foo/bar with a strange extention :(
[02:28:52] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[02:29:00] <Kre10s> one more reason to dislike the windows file system I guess
[02:29:04] <lmmx> SnoopJ I feel like I've opened a can of worms x)
[02:29:08] <lmmx> my bad
[02:29:14] <chance> SnoopJ: like i said, little thing, until one day it's a huge thing =P
[02:29:17] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[02:29:18] <SnoopJ> lmmx, no worries, like I said this is legitimately confusing
[02:29:34] *** Quits: p-i- (~Ohmu@node-1139.pool-118-173.dynamic.totinternet.net) (Ping timeout: 272 seconds)
[02:29:44] <lmmx> mhmmm. it is nice to get these trivial things down solidly so you don't misspeak in docs etc
[02:29:52] <jinsun> Kre10s: do you have wsl? it complains in pure windows when you have colons
[02:29:58] <lmmx> anywayz back 2 code
[02:30:14] <SnoopJ> https://docs.python.org/3/library/stdtypes.html#typeiter explains the stuff behind iterable/iterator, and generator-iterator stuff lives here: https://docs.python.org/3/reference/expressions.html#generator-iterator-methods
[02:30:27] *** Joins: yetitwo (~tannersti@c-76-25-57-28.hsd1.co.comcast.net)
[02:30:45] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:31:04] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[02:31:08] <Sophon96> lmmx: Oh, I haven't tried compiling it yet, and I'm running Arch Linux, so there shouldn't be any issues with outdated dependencies. I just wanted to know if those steps were still up to date for building Python statically.
[02:31:20] *** Quits: palasso (~palasso@user/palasso) (Read error: Connection reset by peer)
[02:31:50] *** Joins: zebrag (~chris@user/zebrag)
[02:32:23] <lmmx> Sophon I'm afraid I've never tried, I'm a conda man :-) but maybe someone in that thread might point you to some recent links (a lot of people got involved)
[02:32:40] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 246 seconds)
[02:32:40] <lmmx> oh thanks SnoopJ, bit of bedtime reading
[02:33:11] <SnoopJ> is it a bad idea to use `zipimport` directly for loading a .zip that's been pointed to in configuration? I don't feel very good about modifying sys.path for the import I want to do
[02:33:34] <Kre10s> jinsun: I used to have it but ran into other compatability problems. windows is just a pain when you are used to bash.
[02:33:37] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[02:33:59] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[02:34:00] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 272 seconds)
[02:34:01] <hodapp> wow, conda just took ~17 minutes to tell me why it couldn't install 'graphviz'
[02:35:28] *** Joins: Nalt (~Nalt|||@cpe-173-174-25-173.stx.res.rr.com)
[02:35:40] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[02:35:57] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[02:36:10] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 246 seconds)
[02:36:53] *** Joins: cheater (~Username@user/cheater)
[02:37:08] <jinsun> Kre10s: so if you run python from wsl then only you should see that behavior of silently converting colons to something else, if you run a windows build you should just get some kind of OSError, I'm getting FileNotFound
[02:37:14] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[02:37:23] <sco1> It's not silently converting anything
[02:37:32] <sco1> See: https://www.forensicfocus.com/articles/dissecting-ntfs-hidden-streams/
[02:38:08] *** Quits: yetitwo (~tannersti@c-76-25-57-28.hsd1.co.comcast.net) (Ping timeout: 252 seconds)
[02:38:37] *** Quits: forthewin (~forthewin@cpe-76-90-174-71.socal.res.rr.com) (Ping timeout: 246 seconds)
[02:38:57] *** Quits: anas (~anas@196.235.5.143) (Quit: WeeChat 3.3-dev)
[02:39:07] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[02:39:13] *** Joins: anas (~anas@196.235.5.143)
[02:39:39] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[02:39:47] *** Joins: forthewin (~forthewin@cpe-76-90-174-71.socal.res.rr.com)
[02:40:18] *** Joins: pnoud (~pnoud@user/pnoud)
[02:40:34] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 240 seconds)
[02:40:53] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 252 seconds)
[02:41:06] *** Joins: ice9 (~ice9@user/ice9)
[02:41:10] *** Joins: ferz (~ferz@146-241-199-234.dyn.eolo.it)
[02:41:51] <Kre10s> Thanks guys. I learned something today. something horrible... but i learned something
[02:42:11] *** Joins: gggkmp (~gggkmp@221.219.68.57)
[02:42:31] *** Quits: Kre10s (~maximilia@ip5f5acc99.dynamic.kabel-deutschland.de) (Quit: Lost terminal)
[02:42:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[02:43:06] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 252 seconds)
[02:43:40] <LeoTal> So, I have a list of (int,int) tuples, and I frequently need to determine how many times a value is in that list. Right now I'm doing it the stupid way (list.count) but I'm running into performance problems. I'm thinking of using a multiset but I'm unclear on how they perform. What's the right tool for that job?
[02:43:49] *** Quits: Sophon96 (~brandon@user/sophon96) (Quit: Leaving)
[02:44:07] <SnoopJ> LeoTal, collections.Counter, perhaps?
[02:44:13] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 246 seconds)
[02:44:23] *** Quits: Akuli (~Akuli@82-203-163-2.bb.dnainternet.fi) (Quit: Leaving)
[02:44:29] <AhmedAmerican> I'm calling the following SOAP API http://drawyan.hopto.org:83/RSAarcher/ws/search.asmx?op=SearchRecordsByReport but for some reason the xml response include HTML escape chars. https://bpa.st/6MDA like `&gt;`
[02:44:38] <BrenBarn> I do hope conda gets faster at some point
[02:44:43] <BrenBarn> it's kind of crazy how long it can take
[02:44:53] <LeoTal> Ooo, counters are interesting
[02:44:58] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[02:45:27] <SnoopJ> they have ammortized O(1) lookup and update vs. O(N) for a list here
[02:45:28] *** Quits: forthewin (~forthewin@cpe-76-90-174-71.socal.res.rr.com) (Read error: Connection reset by peer)
[02:45:33] <AhmedAmerican> how to get clean XML in this case?
[02:45:44] *** Joins: forthewin (~forthewin@cpe-76-90-174-71.socal.res.rr.com)
[02:46:30] *** Joins: azazello (~azazello@109.75.158.195)
[02:46:40] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[02:46:52] *** Quits: forthewin (~forthewin@cpe-76-90-174-71.socal.res.rr.com) (Read error: Connection reset by peer)
[02:47:11] *** Quits: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[02:47:53] *** Joins: forthewin (~forthewin@cpe-76-90-174-71.socal.res.rr.com)
[02:48:09] <SnoopJ> AhmedAmerican, what does "clean" mean to you? '>' is syntactically important in XML, it's usually serialized exactly this way to avoid confusion with its meaning for tags.
[02:49:11] <AhmedAmerican> SnoopJ: so in case of such response https://bpa.st/6MDA i can parse it with no errors?
[02:49:38] <AhmedAmerican> as the documentation showing response without those chars `&gt;&lt;`
[02:50:22] <SnoopJ> AhmedAmerican, this is a valid XML document, yes
[02:51:53] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[02:52:01] *** Joins: argento (~argent0@168-227-97-29.ptr.westnet.com.ar)
[02:52:28] *** Joins: yetitwo (~tannersti@c-76-25-57-28.hsd1.co.comcast.net)
[02:52:37] *** Quits: forthewin (~forthewin@cpe-76-90-174-71.socal.res.rr.com) (Ping timeout: 246 seconds)
[02:53:57] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[02:54:27] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 258 seconds)
[02:54:54] *** Quits: argento (~argent0@168-227-97-29.ptr.westnet.com.ar) (Client Quit)
[02:55:11] *** Quits: alcume (~alcume@35.16.60.213.dynamic.reverse-mundo-r.com) (Quit: You... don't have the Net Terminal Gene.)
[02:55:11] <jinsun> hodapp: BrenBarn: there is mamba that aims to be faster alternative to conda, I'm trying it nowadays https://github.com/mamba-org/mamba
[02:55:49] <BrenBarn> yeah I've looked at that
[02:55:53] <BrenBarn> it does seem cool
[02:56:10] *** Quits: anas (~anas@196.235.5.143) (Ping timeout: 240 seconds)
[02:56:34] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 240 seconds)
[02:56:48] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 272 seconds)
[02:57:20] *** Joins: jinsun_ (~quassel@user/jinsun)
[02:57:55] *** Joins: qlixed (~qlixed@152.170.36.244)
[02:58:25] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:59:15] <BrenBarn> it does make me a bit nervous somehow though because you have to use conda to install mamba and part of me worries they'll somehow get into a tangle
[02:59:30] <LeoTal> Aww, I switched to a counter and it's barely faster (on a big benchmark, 150 ms instead of 160)
[03:00:07] *** Quits: tspng (~tspng@2a02:168:a1a1:1:3de0:d441:7ab:1ee8) (Quit: Leaving, bye!)
[03:00:11] *** Quits: Celeo (~Celeo@user/celeo) (Read error: Connection reset by peer)
[03:00:55] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:01:19] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 265 seconds)
[03:01:21] *** Quits: bambams__ (~bambams@S0106a84e3f66f543.su.shawcable.net) (Ping timeout: 258 seconds)
[03:01:53] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-813e-39b4-ec58-a40f.res6.spectrum.com) (Read error: Connection reset by peer)
[03:02:01] <SnoopJ> LeoTal, I guess the linear scan isn't the slow part. Have you measured your program to see where the slowness is?
[03:02:10] <LeoTal> Profiling it right now
[03:02:15] <SnoopJ> (assuming ~150 ms qualifies as slow)
[03:02:45] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:02:53] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[03:02:53] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 252 seconds)
[03:03:05] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::4ec1) (Quit: Konversation terminated!)
[03:03:24] <KirkMcDonald> LeoTal: How many elements are in this list?
[03:04:32] *** Joins: wyclif (~wyclif@user/wyclif)
[03:04:42] *** Quits: _joes_ (~joes@santoroj.plus.com) (Ping timeout: 265 seconds)
[03:04:52] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[03:05:04] *** Quits: meph (~mepholic@flux.hxx.in) (Quit: Bye forever!)
[03:06:01] *** Joins: meph (~mepholic@flux.hxx.in)
[03:07:16] *** Quits: iauc (~iauc@ti0061a400-1478.bb.online.no) (Quit: Client closed)
[03:07:23] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[03:07:42] *** Joins: darksun (~darksun@user/darksun)
[03:08:14] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[03:09:13] *** Quits: catdog (~quassel@birdperson.tuxzone.org) (Quit: No Ping reply in 120 seconds.)
[03:09:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:09:37] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[03:09:59] *** Joins: ano (~weechat@user/ano)
[03:10:34] *** Quits: ano (~weechat@user/ano) (Client Quit)
[03:11:07] *** Joins: catdog (~quassel@2001:470:50f7:cdcd::cd1)
[03:11:21] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[03:11:55] *** Quits: yetitwo (~tannersti@c-76-25-57-28.hsd1.co.comcast.net) (Quit: WeeChat 3.2)
[03:12:05] *** Quits: y04nn (~y04nn@91.193.4.106) (Ping timeout: 258 seconds)
[03:12:41] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 252 seconds)
[03:14:34] *** Quits: Nalt (~Nalt|||@cpe-173-174-25-173.stx.res.rr.com) (Ping timeout: 240 seconds)
[03:14:35] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[03:15:38] *** Joins: y04nn (~y04nn@91.193.4.106)
[03:16:26] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[03:16:52] *** Quits: qlixed (~qlixed@152.170.36.244) (Quit: That's all folks!!)
[03:16:53] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[03:17:37] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:18:51] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 252 seconds)
[03:19:10] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[03:19:32] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[03:20:19] <AhmedAmerican> how to access the tag here https://bpa.st/X2EA
[03:21:09] <AhmedAmerican> i tried .get('SearchRecordsByReportResult') but returning empty list []
[03:21:55] *** Quits: attackthemoon (~attackthe@2600:6c40:1d00:560c:b88c:e5f4:7441:6282) (Ping timeout: 256 seconds)
[03:22:08] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[03:22:51] <LeoTal> Ah yeah it turns out not to be all that much - I expected up to millions but in fact it's more like thousands, makes sense that it's not the blocker. Apparently what's slow is 1) string formatting for logs (huh!), 2) enums, and 3) function calls (I guess I should inline more stuff)
[03:23:42] *** Joins: wyclif (~wyclif@user/wyclif)
[03:24:03] <chance> AhmedAmerican in this particular case, if you can rely on that kind of output, it doesn't look like there are any other tags inside the one you want. you should be able to slice the string between "SearchRecordsByReportResult" and "</"
[03:24:22] <chance> when serendipity feeds you BS, take advantage!
[03:24:25] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[03:24:30] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[03:24:49] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[03:25:01] *** Joins: darksun (~darksun@user/darksun)
[03:26:26] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[03:27:20] *** Quits: SteveP (~steve@2600:1700:2980:9b00:656a:8778:b1d6:8602) (Quit: This computer has gone to sleep)
[03:27:22] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 240 seconds)
[03:27:26] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:27:32] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[03:28:22] <AhmedAmerican> @chance you meant to extract what between `SearchRecordsByReportResult`  tag?
[03:28:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[03:29:10] <AhmedAmerican> `<SearchRecordsByReportResult>` data`</SearchRecordsByReportResult>` and later to load the data into XML ?
[03:29:13] <chance> yeah, if you're looking for the contents of the innermost tag, you can just extract what's between the tag and the next close tag. lazy, but fairly effective
[03:29:26] <AhmedAmerican> got it
[03:29:40] <SnoopJ> AhmedAmerican, this will do the trick (you need to include the XML namespace of the parent tag): `needle = root.findall('.//{http://archer-tech.com/webservices/}SearchRecordsByReportResult')`
[03:29:49] *** Joins: cdown (~cdown@89.32.122.5)
[03:30:25] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 246 seconds)
[03:30:36] <SnoopJ> if that's the only namespace under which that tag would appear, you can shorten it to: `needle = root.findall('{*}SearchRecordsByReportResult')`
[03:30:44] *** Joins: ano (~weechat@user/ano)
[03:31:30] *** Quits: y04nn (~y04nn@91.193.4.106) (Remote host closed the connection)
[03:31:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:31:39] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[03:33:46] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[03:34:20] *** Quits: chance (~chance@user/chance) (Quit: Client closed)
[03:34:52] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[03:35:22] *** Joins: TakinOver (~TakinOver@47.150.206.35)
[03:37:01] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[03:37:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:38:41] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[03:38:57] *** Parts: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) ()
[03:39:29] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[03:41:22] *** Joins: wyclif (~wyclif@user/wyclif)
[03:41:38] *** Quits: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b) (Quit: WeeChat 3.2)
[03:41:56] <AhmedAmerican> SnoopJ: https://bpa.st/EOIA is returning None
[03:43:15] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[03:43:39] *** Quits: cedric (~cedric@2a01:cb11:867:c200:6538:f15d:1eee:41bd) (Quit: Konversation terminated!)
[03:43:44] *** Joins: darksun (~darksun@user/darksun)
[03:44:06] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[03:44:07] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 268 seconds)
[03:44:29] *** Quits: Nact (~l@host-85-27-121-155.dynamic.voo.be) (Quit: Konversation terminated!)
[03:44:32] <AhmedAmerican> i don't understand the logic here. is it an XML contain XML too ?. I'm well familiar with BS4, is XML parser is supposed to access that tag and then i need to use `ET.fromstring` one more time ?
[03:46:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:46:31] *** Joins: Snyp (~rksht@49.207.193.48)
[03:46:53] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 252 seconds)
[03:49:03] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 268 seconds)
[03:49:14] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[03:52:23] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[03:52:55] <rud0lf> is there a way to exit running script gracefully with thread that sleep()'s?
[03:53:11] <rud0lf> ctrl+c does it, but i'd like exit(0) equivalent
[03:53:47] <nedbat> rud0lf: you can make the thread a daemon thread, then it won't prevent the process from exiting.
[03:53:56] <rud0lf> so far i did sleep(0.1) in a loop (wait_time * 10) and break on "terminate = True"
[03:53:57] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[03:54:06] <rud0lf> nedbat: i want the opposite
[03:54:11] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[03:54:14] <rud0lf> ah sorry, misread you
[03:54:26] <rud0lf> thank you, i shall try it
[03:55:08] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[03:55:16] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 244 seconds)
[03:55:42] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[03:55:46] <dale> Note that a daemon thread may not get a chance to clean up, if that matters to you.  See warning in the docs for the threading module.
[03:56:04] <rud0lf> dale: thanks
[03:57:20] <dale> Speaking of threads, here's a fun one: I have a thread running basically while True: try: do_stuff() except: logging.exception("...").  In a test, if I make do_stuff a mock that raises an exception, every logging.exception call is including its own stack trace (~3 frames) plus *every successive stack trace from the same loop in the same thread*.
[03:58:12] <dale> I cannot fathom how this happens, nor create a nice minimal standalone test case, so I guess I'm going to crawl into the digestive tract of the logging module today.
[03:58:45] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:58:56] <rud0lf> maybe it wants to log the exception, and attempt logging causes exception, recursively
[03:59:01] <dale> Actually, first I should read the stack to see if it's really growing somehow.
[03:59:06] <rud0lf> no that wouldn't be the case, i just re-read myself
[03:59:23] *** Joins: wyclif (~wyclif@user/wyclif)
[03:59:35] <dale> rud0lf: logging itself raising an error did occur to me.  I didn't spot anything like that, but like me sort|uniq the lines (as there are a lot of them).
[03:59:47] *** Joins: tims (~tims@220.240.106.233)
[04:01:15] <dale> Yeah, no obvious logging errors.
[04:01:53] <habnabit_> dale, sounds like a problem with the mock
[04:02:00] <habnabit_> dale, did you try making a real object instead of a mock?
[04:02:27] <dale> habnabit_: Oh I bet you anything you just solved it.
[04:02:39] <habnabit_> dale, mocks suck
[04:02:44] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 252 seconds)
[04:02:48] <dale> habnabit_: The mock is raising the same exception every time and I bet logging reads the stack trace off the exception.
[04:03:17] <dale> And... I don't know quite how that stack trace is accumulated but I bet that's it.  I bet if I instead use a side_effect with raise, I'll be set.
[04:03:38] <dale> habnabit_: I don't know why I keep using mocks, I can never remember how to use them properly and I always seem to hit their limits nearly instantly.
[04:04:07] <habnabit_> dale, what if i asked you nicely to stop
[04:04:28] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[04:04:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[04:05:24] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[04:05:31] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[04:06:01] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:06:32] <dale> habnabit_: I'm going to start putting comments in work code, "I started to use a mock here, but then I remembered that habnabit asked me nicely to stop, so instead let's just whip up some normal objects here."
[04:06:47] <habnabit_> dale, yay
[04:06:56] <habnabit_> dale, have you already read about verified fakes
[04:07:05] <dale> (You think I'm joking, just wait until someone googles the name and ends up here.)
[04:07:06] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 272 seconds)
[04:07:42] <dale> habnabit_: I have not.
[04:08:15] <habnabit_> dale, https://pythonspeed.com/articles/verified-fakes/
[04:08:58] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[04:09:56] *** Joins: Jigsy (~Jigsy@user/jigsy)
[04:09:59] <dale> habnabit_: Will read, thanks and thank you for the hint, problem solved.
[04:11:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[04:12:39] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 258 seconds)
[04:13:49] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Ping timeout: 265 seconds)
[04:14:14] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[04:17:48] *** Joins: wyclif (~wyclif@user/wyclif)
[04:18:03] *** Joins: B33F_133F (~b33f1337@host.b33f1337.com)
[04:20:24] *** Quits: lmmx (~louis@host-80-47-117-118.as13285.net) (Ping timeout: 272 seconds)
[04:20:36] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[04:21:40] *** Joins: darksun (~darksun@user/darksun)
[04:22:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[04:26:44] *** Quits: MikZyth (~MikZyth@188.65.242.77) (Ping timeout: 272 seconds)
[04:27:09] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[04:27:13] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 258 seconds)
[04:29:37] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[04:29:41] *** Quits: gggkmp (~gggkmp@221.219.68.57) (Ping timeout: 252 seconds)
[04:31:37] *** Joins: streety (~streety@li761-24.members.linode.com)
[04:32:58] *** Quits: akinode (~akinode@2a02:908:13d4:b2c0:2ce3:d846:6d19:dc58) (Ping timeout: 246 seconds)
[04:33:05] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 252 seconds)
[04:33:50] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[04:34:32] *** Joins: wyclif (~wyclif@user/wyclif)
[04:35:23] *** Joins: bigRoo (~user@131.236.54.84)
[04:36:17] <dale> habnabit_: OK, nice, as it happens I'm kind of doing something like this already, just didn't know that name.
[04:36:45] <dale> In this particularly case I was in the "limits of verified fakes" section, testing errors where AWS SNS goes down or is unreachable or something.
[04:38:28] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:39:22] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 240 seconds)
[04:39:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[04:39:48] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[04:40:11] <dale> Here's a simple reproduction of the behavior I was seeing: https://bpa.st/TMWA
[04:41:00] <dale> I guess that's conceptually similar to nested try/except just executing "raise" over and over, since I'm constantly re-raising the same exception?
[04:41:07] *** Joins: pnoud (~pnoud@user/pnoud)
[04:41:24] <habnabit_> dale, reraising the same exception object is indeed very silly
[04:41:25] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[04:41:52] <dale> Python 2 did not exhibit this behavior, presumably because it lacked all the fun new stuff that was added to BaseException in Python >= 3.
[04:41:53] <habnabit_> dale, it will confuse many things; not just logging
[04:42:07] <dale> habnabit_: TIL
[04:42:31] <habnabit_> dale, python 2 had this behavior too but the difference is how the traceback is accessed
[04:42:46] <dale> I think I was imagining that the exception handling code in CPython wouldn't just accumulate the stack frames like that, I figured a try that wasn't enclosed by any other try would somehow reset the stack.
[04:42:55] <habnabit_> dale, py2's exception and tb were kept separate and out of band; py3 merges them together more
[04:43:19] <dale> habnabit_: How could I observe it in Python 2?
[04:43:26] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 252 seconds)
[04:43:57] <habnabit_> dale, sometimes you want to stop something from raising and raise it somewhere else later
[04:44:45] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[04:45:18] <BrenBarn> hmmm, that does seem a bit weird to me
[04:45:32] <BrenBarn> what exactly are the extra frames that are accumulating there?
[04:45:41] *** Joins: MikZyth (~MikZyth@188.65.242.201)
[04:45:49] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[04:46:01] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[04:46:12] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 265 seconds)
[04:46:16] <BrenBarn> is the idea that every time you raise the current line is added to the exception object without checking to see if that frame was already in there?
[04:46:21] *** Joins: ionface_ (~ionface@user/ionface)
[04:46:44] *** Quits: eyepeetee (~aa@096-032-003-075.res.spectrum.com) (Ping timeout: 252 seconds)
[04:46:45] <dale> habnabit_: Yeah, in Python 2 I would have used the three arg form of raise if I really needed that outside of the try block where the exception occurred, I guess.
[04:46:56] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[04:47:28] <dale> BrenBarn: Hm, interesting question, easy enough to test.
[04:48:08] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[04:48:53] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[04:49:42] <dale> https://bpa.st/U2RQ shows two frames in the traceback, which does not reflect the stack at the second raise.
[04:50:10] <BrenBarn> yeah that seems wrong
[04:50:12] <dale> Is this really defined behavior, or just stupid enough that no one cares to make it work in the way I'd expect?
[04:50:27] <BrenBarn> like the traceback should reflect the call stack at the time the exception was raised, right?
[04:50:33] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 265 seconds)
[04:50:41] <dale> BrenBarn: IMHO yes
[04:50:46] *** Joins: trufas (~trufas@177.240.218.218)
[04:50:51] <habnabit_> dale, https://bpa.st/VRNA
[04:50:52] *** Joins: wyclif (~wyclif@user/wyclif)
[04:50:53] <Yhg1s> it's really defined behaviour. It's like using the old three-arg form of raise.
[04:52:14] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:52:14] *** Quits: hposca (~hposca@node-1w7jr9phoke2ud7ur43vu6vbd.ipv6.telus.net) (Ping timeout: 252 seconds)
[04:52:48] *** Joins: euouae (~euouae@user/euouae)
[04:53:37] <dale> habnabit_: OK, so Python 2 doesn't exhibit the "accumulating traceback" behavior of Python 3 here, right?
[04:53:52] <Yhg1s> dale: it does if you used the three-arg form of raise.
[04:54:44] <euouae> Hello how can I have a package that installs some scripts? I want to install a main program (foo.py) but also some data under the system data directory
[04:55:07] <nedbat> euouae: what kind of data? Why in that directory?
[04:55:12] <habnabit_> euouae, put all your package data inside the package
[04:55:25] <habnabit_> euouae, then it won't get lost
[04:55:56] <euouae> nedbat: foo.py is supposed to work with .py plugins. The user-made ones will be under ~/.local (or equivalent for other OSes) but what about the pre-installed ones?
[04:56:12] <euouae> Yeah I guess one way is to include them as modules like I think habnabit_ suggests
[04:56:16] <nedbat> euouae: shouldn't they be installed like other python code?
[04:56:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[04:56:38] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[04:56:54] <dale> Yhg1s: How do you mean?  I tried https://bpa.st/BHHQ but it still only prints one stack frame each time (presumably the same frame since it has the same traceback).
[04:56:56] <euouae> If I do it the way of modules, the plugin-loading interface would be non-uniform
[04:56:58] <Yhg1s> dale: https://bpa.st/R4TQ
[04:57:04] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:57:30] <habnabit_> euouae, what would be non-uniform about it
[04:58:10] *** Joins: mud (~mud@user/kadoban)
[04:58:29] <euouae> habnabit_: instead of looking at two directories, one would just 'import x'
[04:58:36] <euouae> I guess that is not too big a deal
[04:58:40] <dale> Yhg1s: Sure, that makes some sense, but if you put the f2 bit in a loop, it doesn't accumulate stack frames as in my example.
[04:59:27] <euouae> I guess I have to use importlib though right? For the user-made ones
[04:59:32] <habnabit_> euouae, there's cases you don't import?
[05:00:10] <BrenBarn> it's still not totally clear to me that that exception behavior is really defined
[05:00:14] <BrenBarn> I mean it's implied by the docs but not really stated
[05:00:32] <BrenBarn> > A traceback object is normally created automatically when an exception is raised and attached to it as the __traceback__ attribute, which is writable. You can create an exception and set your own traceback in one step using the with_traceback() exception method (which returns the same exception instance, with its traceback set to its argument)
[05:00:35] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 268 seconds)
[05:00:36] <euouae> I expect the user to add their scripts to the directory, so from one execution to another of my program, there may be changes
[05:00:48] <Yhg1s> dale: https://bpa.st/6IZQ
[05:01:14] <BrenBarn> I don't quite see how you get from that to "if you raise an exception object that already has a traceback, a new line will be added to the traceback for the raise itself"
[05:01:46] <BrenBarn> it seems like it should either just use the traceback that's already there, or create a new one, but not pile them up
[05:01:49] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[05:01:59] <euouae> BrenBarn: there is a word there 'normally' so presumably not all cases are covered in that text you quoted
[05:02:20] *** Joins: sydbarret (~anton@static-186-121-195-24.acelerate.net)
[05:02:23] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[05:02:23] <BrenBarn> yes, but where is the full definition of the behavior?
[05:02:33] <habnabit_> BrenBarn, remember how tracebacks are created: it isn't a snapshot of the stack at the moment of the raise, but every frame that's passed through when an exception is active
[05:02:35] <dale> I'm going to guess "C" :)
[05:02:46] <Yhg1s> BrenBarn: sure, it's under-specified. I'm not sure if it's actually written down. I don't even remember if it's mentioned in the PEP. I'm pretty sure it's intentional, though..
[05:02:47] <BrenBarn> again, where is that defined?
[05:02:47] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 252 seconds)
[05:02:59] <BrenBarn> if it's not documented it's not defined behavior :-)
[05:03:03] <Yhg1s> BrenBarn: a lot of Python is under-specified.
[05:03:14] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[05:03:22] <BrenBarn> that's certainly true and is one of my biggest beefs with Python, although overall I love it
[05:03:28] <Yhg1s> BrenBarn: Python doesn't have the concept of 'undefined behaviour', and for a lot of things, the implementation is the definitino.
[05:03:39] <BrenBarn> that's not "defined behavior" though
[05:03:46] <Yhg1s> BrenBarn: it is to Python :)
[05:03:56] <habnabit_> BrenBarn, so the idea of "use the tracebaack that's already there" is nonsense; that's _what's happening_: the active traceback gets a frame appended to it every time you unwind a frame
[05:04:07] <dale> I wonder if this isn't actually the implementation details of BaseException.with_traceback leaking out.
[05:04:08] <Yhg1s> BrenBarn: but there are enough people that want a more formal definition, like Brett Cannon. It's just a matter of putting the effort in.
[05:04:17] <BrenBarn> I understand that, I'm just asking if that is defined behavior
[05:04:24] <BrenBarn> not implemented.  defined.
[05:04:32] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:04:33] <Yhg1s> BrenBarn: there's no difference in Python.
[05:04:36] <dale> habnabit_: That's interesting.
[05:04:38] <BrenBarn> there absolutely is
[05:04:40] *** Joins: northernsage (~northerns@187.107.158.146)
[05:04:47] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[05:04:47] <habnabit_> BrenBarn, it seemed like you were saying you didn't understand the causality here, so i explained
[05:04:52] <Yhg1s> BrenBarn: it's defined *by the implementation*.
[05:04:53] *** Quits: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3) (Quit: Konversation terminated!)
[05:04:54] <BrenBarn> like for instance there are many features of builtin types having to do with their time complexity for certain operations that are implementation details and could change across versions or other implementations of Python
[05:04:57] *** Quits: northernsage (~northerns@187.107.158.146) (Client Quit)
[05:05:10] <BrenBarn> and for a while there was the deal where dicts were ordered but that wasn't defined behavior
[05:05:14] <Yhg1s> BrenBarn: yes, the fact that it's current behaviour doesn't mean it's not subject to change.
[05:05:15] <BrenBarn> CPython doesn't define Python
[05:05:20] <habnabit_> BrenBarn, 'for a while'? no, not really
[05:05:23] <Yhg1s> BrenBarn: CPython does define Python, yes.
[05:05:31] <euouae> Yeah i think the point is CPython is one Python
[05:05:40] <BrenBarn> no, it doesn't
[05:05:50] <dale> I mean, I think we're all in vigorous agreement that Python is not a well-defined language outside of the main implementation.
[05:05:58] <habnabit_> BrenBarn, there was only one release with ordered dicts without it being defined behavior
[05:06:01] <dale> Something like that.
[05:06:04] <habnabit_> BrenBarn, not 'for a while'
[05:06:16] <Yhg1s> habnabit_: it was a whole year and a half, though.
[05:06:17] <BrenBarn> that's still a while
[05:06:29] <habnabit_> Yhg1s, is that a while?
[05:06:36] <Yhg1s> habnabit_: it is to a lot of people, yes.
[05:06:43] <habnabit_> some distros went from 3.5 to 3.7 without 3.6 at all
[05:06:48] <Yhg1s> habnabit_: of course, BrenBarn didn't *define* 'a while', soo....
[05:07:12] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[05:07:50] <euouae> habnabit_: so I should have a plugins/ directory for my "system-wide" plugins?
[05:07:56] <euouae> in my package?
[05:08:12] <habnabit_> euouae, sure; why not
[05:08:17] <euouae> Alright
[05:08:26] *** Joins: wyclif (~wyclif@user/wyclif)
[05:08:57] *** Quits: Snyp (~rksht@49.207.193.48) (Quit: WeeChat 3.2)
[05:09:08] <nedbat> BrenBarn: what does define Python?
[05:09:31] <BrenBarn> the documentation
[05:09:41] <nedbat> BrenBarn: ... which describes CPython, right?
[05:09:53] <nedbat> BrenBarn: and where the docs and the implementation differ, the implementation tends to win.
[05:10:10] <BrenBarn> that's my beef, yes
[05:10:11] <Yhg1s> BrenBarn: it's a nice idea, but no actaully true.
[05:10:25] <grym> rather a lot of the world works this way
[05:10:30] <grym> even parts you wouldn't expect
[05:10:50] <BrenBarn> you're essentially making the same argument for the world as you're making for Python
[05:11:06] <nedbat> BrenBarn: we're just explaining how the python world operates
[05:11:13] <BrenBarn> anyway all I'm saying here is that this is an opportunity to make the documentation (which for me means "the definition") clearer about what behavior is supposed to happen
[05:11:17] <euouae> It's just a different approach BrenBarn. You can have a closed spec, or an open spec.
[05:11:28] <nedbat> BrenBarn: clarifying the docs is always a good idea
[05:11:37] <Yhg1s> BrenBarn: we're not lacking those opportunities, just people to take them and update the documentation :)
[05:11:42] *** Joins: cjb (~cjb@user/cjb)
[05:11:51] *** Joins: wingsorc__ (~wingsorc@user/wingsorc)
[05:11:51] *** Quits: wingsorc__ (~wingsorc@user/wingsorc) (Client Quit)
[05:11:57] <BrenBarn> again, I'm not disputing this is how things work, my point is that "how things work" is exactly what "defined behavior" isn't
[05:12:03] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Remote host closed the connection)
[05:12:06] <Yhg1s> BrenBarn: *to you*.
[05:12:11] <BrenBarn> defined behavior is how things are supposed to work, not how they actually work
[05:12:19] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[05:12:23] <grym> UB is "nasal demons" territory, and python doesn't have that
[05:12:24] *** Quits: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net) (Quit: Konversation terminated!)
[05:12:28] <euouae> You're quibbling over who defines what
[05:12:31] <grym> it just has "well, read the source and then you'll know"
[05:12:53] <BrenBarn> what I'm saying (and I think you agree with) is that there is a lot of Python behavior that isn't defined, in the sense that the docs don't actually say what is supposed to happen, there's just the implicit expectation based on the implementation
[05:12:55] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[05:13:06] <SnoopJ> yep, that's the state of things
[05:13:11] <Yhg1s> BrenBarn: it *is* defined, just not *in English*.
[05:13:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[05:13:35] <BrenBarn> I guess if I call it "undocumented behavior" you'd accept that terminology?
[05:13:36] <grym> BrenBarn: that's _unspecified_ behavior.  python has a bunch of it
[05:13:41] <Yhg1s> BrenBarn: sure.
[05:13:50] <BrenBarn> sure, okay, or unspecified
[05:13:56] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[05:14:04] <nedbat> BrenBarn: this seems really pedantic at this point
[05:14:17] <BrenBarn> yes, we got off on a side track
[05:14:38] *** Joins: Pny (pny1312@user/pny)
[05:14:42] <BrenBarn> my question was really just whether that exception behavior was whatever you want to call it: defined, intended, specified, documented, etc.
[05:14:43] <dale> habnabit_: I like your explanation for how tb_next is just pointed at the next frame down as you unwind the stack.
[05:14:49] <BrenBarn> versus just "the way it actually happens"
[05:14:58] *** Joins: derelict (~derelict@user/derelict)
[05:15:03] <nedbat> BrenBarn: perhaps what you mean to ask is, "can I count on this behavior"
[05:15:14] <Yhg1s> BrenBarn: it's more like "the way it actually happens and how much code relies on the behaviour".
[05:15:22] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[05:15:22] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:15:46] <dale> habnabit_: I guess one nice effect of how this works is that with_traceback doesn't really have to be special at all, just set __traceback__, raise your exception, and successive frames will get added like you want.
[05:15:50] <BrenBarn> it's more like "should we change the docs or change the behavior" (which I agree depends on how much code relies on the behavior)
[05:16:05] <dale> habnabit_: In contrast to what I expected, that raise would always just nuke any existing traceback.
[05:16:11] <nedbat> BrenBarn: we should fix the docs if they are unclear
[05:16:18] * SnoopJ would prefer "unspecified"
[05:16:27] <Yhg1s> nedbat: or, consider whether this detail is something that merits documentation.
[05:16:41] <nedbat> Yhg1s: i missed what detail this was about! :)
[05:16:59] <BrenBarn> it's about whether re-raising the same exception object will add to vs. replace the traceback that was already attached
[05:17:07] <dale> nedbat: Re-raising the same exception instance in a loop in Python 3 will cause the traceback to just keep accmulating frames.
[05:17:17] <Yhg1s> nedbat: how re-raising an exception object adds to the existing traceback on the exception object.
[05:17:24] <euouae> how can a variable be marked unused?
[05:17:32] <BrenBarn> what do you mean by "unused"?
[05:17:38] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[05:17:43] <euouae> I don't intend to use it in the function
[05:17:43] <Yhg1s> euouae: Python doesn't care. linters may care, and they have their own mechanisms for it.
[05:17:48] <nedbat> what do you mean my marked?
[05:17:50] <euouae> Got it
[05:18:02] *** Quits: pizdets (~pizdets@183.182.111.24) (Ping timeout: 272 seconds)
[05:18:23] <euouae> nedbat: in C++ you can have the [[maybe_unused]] attribute
[05:18:38] <nedbat> euouae: are you using a linter
[05:18:49] <dale> Yhg1s: I guess my takeaway is that, in Python 3, raise is really like doing "raise ex.__class__, ex, ex.__traceback__" in Python 2.
[05:18:54] *** Joins: pizdets (~pizdets@183.182.115.100)
[05:18:58] <Yhg1s> dale: yes, that's literally what I said.
[05:19:04] <euouae> nedbat: I think I'm using cylance
[05:19:46] <dale> Yhg1s: Sorry, it wasn't clear to me that you meant it was using the instance's __traceback__ attribute.
[05:20:00] <Yhg1s> dale: that's the only traceback there is, in Python 3 :)
[05:20:51] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:21:31] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[05:22:38] <dale> Yhg1s: You can still get at the traceback with sys.exc_info()[-1], right?
[05:23:00] <dale> Oh, sys.last_traceback is still here too.
[05:23:16] <Yhg1s> dale: yes, it's the same traceback.
[05:23:19] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[05:27:18] <Yhg1s> (well, except sys.last_traceback, which is the last traceback from some random thread)
[05:27:18] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[05:27:18] *** Joins: darksun (~darksun@user/darksun)
[05:27:18] <nedbat> Yhg1s: fwiw, this does seem like a reasonable behavior to mention in the docs
[05:27:18] *** Joins: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net)
[05:27:18] *** Quits: towel (~towel@user/towel) (Ping timeout: 256 seconds)
[05:27:18] *** Joins: wyclif (~wyclif@user/wyclif)
[05:27:46] *** Joins: towel (~towel@user/towel)
[05:27:50] *** Quits: euouae (~euouae@user/euouae) (Quit: euouae)
[05:27:55] *** Quits: srhm (~ascii@user/srhm) (Remote host closed the connection)
[05:27:59] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[05:28:34] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 240 seconds)
[05:29:52] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Remote host closed the connection)
[05:30:11] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 265 seconds)
[05:30:13] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[05:30:15] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[05:30:22] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[05:31:34] <dale> Above and beyond anything else, maybe unittest.mock should warn that, while you can set side_effect to an exception, you might end up with this accumulating traceback behavior that you don't expect.
[05:31:36] <AhmedAmerican> within XML, how to access by id ?
[05:33:16] *** Quits: DX099 (~dx099@2a01:e0a:347:f1c1:86ea:6621:2f22:ed3d) (Ping timeout: 246 seconds)
[05:33:19] <dale> AhmedAmerican: You mean access an element by its id attribute?  If you parse with xml.etree you can use something like tree.find("//*[@id='foo']") I believe.
[05:33:48] <AhmedAmerican> dale: thank you.
[05:34:11] *** Joins: vlm (~vlm@user/vlm)
[05:34:41] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 252 seconds)
[05:35:45] <SnoopJ> AhmedAmerican, have you read the documentation for the xml module? It answers many of these questions.
[05:36:32] <AhmedAmerican> SnoopJ: https://docs.python.org/3/library/xml.etree.elementtree.html#parsing-xml i didn't find out the `id` part
[05:37:49] <AhmedAmerican> SnoopJ: seems it's about that https://docs.python.org/3/library/xml.etree.elementtree.html#supported-xpath-syntax
[05:37:56] <SnoopJ> AhmedAmerican, yes, 'id' is an attribute
[05:38:06] <SnoopJ> (it has no special meaning in XML)
[05:39:00] *** vinleod is now known as vdamewood
[05:42:22] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[05:42:30] *** Joins: wyclif (~wyclif@user/wyclif)
[05:42:39] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:42:44] *** Quits: ionface_ (~ionface@user/ionface) (Ping timeout: 272 seconds)
[05:43:01] *** Joins: ionface (~ionface@user/ionface)
[05:43:50] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[05:44:50] *** Joins: clawh_ (~clawh@185.244.214.60)
[05:45:40] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (Ping timeout: 252 seconds)
[05:46:05] <SpeakerToMeat> Hey all.
[05:46:14] *** Quits: clawh (~clawh@185.244.214.60) (Ping timeout: 252 seconds)
[05:46:32] <SpeakerToMeat> Sorry to ask this. But. Could someone help me understand why pip's search hasn't been migrated to newer, functioning methods?
[05:46:46] *** Joins: pete443_ (~pete@user/pete443)
[05:47:22] *** Quits: pete443 (~pete@user/pete443) (Ping timeout: 240 seconds)
[05:47:58] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[05:47:58] *** Joins: mud (~mud@user/kadoban)
[05:48:03] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[05:48:20] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[05:48:50] <SnoopJ> SpeakerToMeat, the decision to permanently retire the old mechanism was relatively recent. Not really sure if there's been discussion of a new way to do it, or resources to pursue same.
[05:49:37] <SpeakerToMeat> Nod. From the saga I kinda understoon there was a newer more robust (server side) mechanism in place. So I probably misread that
[05:49:41] <akk> It seems puzzling that we can search from a browser but not from the commandline. Do commandline searches really take any more resources?
[05:49:59] <SpeakerToMeat> Of course implementing that on the client side will take some work
[05:50:07] <SpeakerToMeat> Even if there was one
[05:50:26] * akk keeps thinking about writing a little pipsearch script that does an https request for searching
[05:52:06] <SpeakerToMeat> akk, from what I gather, the http based search is not being actively exploited/misshandled like the xml-rpc one was
[05:52:21] <circuitbone> dym searx ? akk
[05:54:01] <grym> akk: https://pypi.org/project/pip-search/ ?
[05:54:17] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[05:54:30] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[05:54:35] <akk> circuitbone: Sorry, I don't understand "dym searx"
[05:55:02] <circuitbone> Did you mean the software called `searx` for your question.
[05:55:05] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:55:06] <akk> grym: Cool, I should have figured someone else would already have invented that wheel.
[05:56:01] <akk> circuitbone: No, I've never heard of it, does it do what pip-search does?
[05:56:05] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[05:56:16] <circuitbone> np
[05:57:21] <BrenBarn> I do find it odd that the HTML search still works
[05:57:26] *** Joins: bambams__ (~bambams@S0106a84e3f66f543.su.shawcable.net)
[05:57:36] <BrenBarn> it seems like they could just patch in a thing that makes a call to that same API
[05:58:28] <BrenBarn> it's also surprising that an entity as important and widely used as pip/pypi used a search mechanism that was so fragile in the first place
[05:58:32] <akk> yeah, exactly
[05:58:53] <BrenBarn> it's like if McDonald's said we're shutting down because too many people were coming in to buy burgers
[05:59:14] <nedbat> BrenBarn: sometimes things that are built by volunteers become widely used
[05:59:33] <BrenBarn> pretty common in open source :-)
[05:59:38] <nedbat> indeed
[05:59:54] <nedbat> one might be surprised by the surprise in that case :)
[06:00:02] <BrenBarn> but "built by volunteers" doesn't automatically mean "fragile and unable to handle the load that comes from being widely used"
[06:00:25] <BrenBarn> I mean maybe what's surprising is that pip was so widely used but hadn't encountered this type of problem before
[06:00:38] <BrenBarn> just luckyt?
[06:00:43] <nedbat> BrenBarn: i guess so
[06:01:04] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[06:01:07] *** Joins: JavaBean (~JavaBean@user/javabean)
[06:01:22] *** Quits: bambams__ (~bambams@S0106a84e3f66f543.su.shawcable.net) (Ping timeout: 240 seconds)
[06:03:29] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.0.1)
[06:04:26] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[06:05:22] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[06:05:28] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 265 seconds)
[06:05:28] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[06:07:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:10:32] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:11:27] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:12:34] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 240 seconds)
[06:12:50] <SpeakerToMeat> BrenBarn, it's not only pip that can be/is the source of problem
[06:13:23] <SpeakerToMeat> BrenBarn, https://www.theregister.com/2021/05/25/pypi_search_error/
[06:13:30] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[06:14:12] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:14:27] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:15:11] <SpeakerToMeat> The main problem with these things, wether they come from malicious intent, or missconfiguration, is that sometimes it's nigh impossible to differentiate legit from abuse traffic
[06:15:17] *** Joins: tlaxkit (~hexchat@170.253.37.3)
[06:15:30] <nedbat> BrenBarn: from that article, it seems that the API endpoint was really easy to overuse, but http serving is not prone to those kinds of mistakes
[06:15:31] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:16:01] <SpeakerToMeat> And in the case of exponential legit use growth, specially unexpected one, is that donation based resources (be them man hours, hardware, or services) are hard to scale
[06:16:23] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:17:36] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:18:08] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 252 seconds)
[06:18:13] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[06:18:16] <SpeakerToMeat> Sorry to bring a contetious topic here :)
[06:18:29] * SpeakerToMeat refrains from dropping the joke he wanted to, to avoid trolling the channel
[06:18:35] <akk> I wonder if adding something like a user-agent field would help. Not if it's a deliberate DOS, of course, but if someone's just written a bad program that makes too many requests, it might help.
[06:18:43] *** Joins: mud (~mud@user/kadoban)
[06:18:49] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:20:02] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:20:26] <SpeakerToMeat> akk, that'd be a very thin layer of extra help. Would help only as long as the overused program/library is not pip.
[06:21:06] *** Quits: tlaxkit (~hexchat@170.253.37.3) (Quit: Leaving)
[06:21:12] <akk> Yes, if the problem is just too many pip users typing in search terms, the only thing that would help is more hardware and net bandwidth.
[06:21:15] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:21:46] <akk> But if everybody just switches to http, it would have the same problem, wouldn't it?
[06:22:03] <akk> Reading that Register article made it sound like it's more likely a misconfigured program somewhere.
[06:22:09] *** Joins: darksun (~darksun@user/darksun)
[06:22:28] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:23:41] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:23:46] <nedbat> akk:that's my understanding from the article: mistakes in automated lookups, which are not written to use http
[06:24:10] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[06:24:36] *** Joins: finsternis (~X@23.226.237.192)
[06:24:54] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:25:15] *** Joins: audiocat (~audio@2603-8081-1800-6a65-0864-cd51-1ae6-323f.res6.spectrum.com)
[06:25:17] *** Joins: jetchisel (jetchisel@user/jetchisel)
[06:25:52] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[06:25:59] *** Parts: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) ()
[06:26:07] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:27:14] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[06:27:20] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:27:42] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[06:27:56] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 252 seconds)
[06:28:33] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:29:46] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:30:59] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:32:12] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:33:25] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:33:45] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[06:34:38] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:34:40] *** Quits: LuKaRo (~LuKaRo@p57b15697.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[06:35:35] *** Quits: robyndrake (~robyndrak@user/robyndrake) (Quit: WeeChat 3.2)
[06:35:51] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:36:59] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 244 seconds)
[06:37:04] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:37:05] *** Joins: Abrax (~Abrax@user/abrax)
[06:37:15] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[06:37:22] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 240 seconds)
[06:37:33] *** Quits: luna-is-here (~quassel@ip-95-223-58-221.hsi16.unitymediagroup.de) (Ping timeout: 258 seconds)
[06:37:51] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[06:37:56] *** Joins: LuKaRo_ (~LuKaRo@p200300dfa714f109fff23dec5b74458c.dip0.t-ipconnect.de)
[06:38:17] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:38:29] *** Joins: sn1tch3r_ (sn1tch3r@gateway/vpn/nordvpn/sn1tch3r)
[06:39:04] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 246 seconds)
[06:39:30] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:40:43] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:41:00] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Ping timeout: 258 seconds)
[06:41:02] *** Joins: de-facto (~de-facto@user/de-facto)
[06:41:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[06:41:56] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:41:57] *** Joins: pnoud (~pnoud@user/pnoud)
[06:42:08] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[06:42:10] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[06:42:53] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[06:43:09] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:43:10] *** Quits: Elzington (~Elzington@static-198-54-128-100.cust.tzulo.com) (Ping timeout: 265 seconds)
[06:44:22] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:44:40] *** Joins: gggkmp (~gggkmp@221.219.68.57)
[06:45:26] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[06:45:35] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:45:38] *** Joins: aquijoule__ (~richbridg@213-225-7-126.nat.highway.a1.net)
[06:46:04] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 272 seconds)
[06:46:11] *** Joins: akaWolf (~akaWolf@akawolf.org)
[06:46:48] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:47:08] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[06:47:38] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[06:47:49] *** Quits: aquijoule_ (~richbridg@213-225-13-36.nat.highway.a1.net) (Ping timeout: 246 seconds)
[06:48:01] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:49:14] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:49:19] *** Quits: akk (~akk@174-28-112-132.albq.qwest.net) (Quit: +++)
[06:50:27] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:50:29] *** Joins: SteveP (~steve@2600:1700:2980:9b00:acb2:8b84:551f:efb9)
[06:50:45] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[06:51:40] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:52:12] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[06:52:53] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:53:57] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:53:57] *** FinnElija is now known as Guest7214
[06:53:57] *** Quits: Guest7214 (~finn_elij@user/finn-elija/x-0085643) (Killed (sodium.libera.chat (Nickname regained by services)))
[06:53:58] *** finn_elija is now known as FinnElija
[06:54:06] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:54:17] *** Joins: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net)
[06:55:19] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:55:36] *** Joins: twobitsprite (~twobitspr@107.13.51.62)
[06:55:54] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[06:56:32] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[06:57:45] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[06:58:48] *** Quits: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[06:58:58] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[07:00:11] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[07:01:24] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[07:02:03] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[07:02:12] *** Joins: kadobanana (~mud@user/kadoban)
[07:02:23] *** Quits: mud (~mud@user/kadoban) (Read error: Connection reset by peer)
[07:02:37] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[07:03:50] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[07:04:01] <habnabit_> dale, it's a very subtle characteristic of tracebacks that doesn't come up often
[07:04:10] *** Joins: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net)
[07:05:03] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[07:06:16] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[07:07:29] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[07:08:18] *** Joins: Croves (~Croves@2804:14c:578b:9102:d14b:203:315c:7152)
[07:08:23] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[07:09:55] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[07:10:33] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[07:11:08] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[07:11:55] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[07:12:01] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[07:12:40] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 246 seconds)
[07:13:01] *** Joins: gggpkm (~gggpkm@221.219.70.176)
[07:13:13] *** Joins: gggkmp_ (~gggkmp@221.219.68.57)
[07:13:35] *** Quits: gggkmp (~gggkmp@221.219.68.57) (Ping timeout: 252 seconds)
[07:14:25] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 246 seconds)
[07:14:48] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[07:17:29] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 268 seconds)
[07:18:31] *** gggkmp_ is now known as gggkmp
[07:18:49] *** Joins: robyndrake (~robyndrak@user/robyndrake)
[07:19:04] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[07:19:44] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 252 seconds)
[07:20:02] *** Quits: Tempesta (Tempesta@user/tempesta) (Quit: See ya!)
[07:20:13] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[07:20:33] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[07:20:40] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[07:21:06] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[07:21:20] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[07:22:24] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 258 seconds)
[07:24:02] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[07:24:38] *** Quits: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: Konversation terminated!)
[07:25:16] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 246 seconds)
[07:25:28] *** Quits: LeoTal (~LeoTal@86.170.86.79.rev.sfr.net) (Quit: Leaving.)
[07:26:21] *** Quits: audiocat (~audio@2603-8081-1800-6a65-0864-cd51-1ae6-323f.res6.spectrum.com) (Ping timeout: 252 seconds)
[07:26:55] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[07:29:54] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[07:34:50] *** Joins: Celeo (~Celeo@user/celeo)
[07:35:03] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 258 seconds)
[07:35:04] *** Quits: gggpkm (~gggpkm@221.219.70.176) (Ping timeout: 246 seconds)
[07:35:26] *** Joins: Tempesta (Tempesta@user/tempesta)
[07:36:55] *** Quits: neltraus (~neltraus@supernova.neltraus.de) (Quit: ZNC 1.8.2 - https://znc.in)
[07:37:44] *** Joins: neltraus (~neltraus@supernova.neltraus.de)
[07:37:54] *** Joins: maxtim (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net)
[07:38:39] *** Quits: NeoCore (~neocore@45.152.181.180) (Quit: Leaving)
[07:41:16] *** Quits: sn1tch3r_ (sn1tch3r@gateway/vpn/nordvpn/sn1tch3r) (Quit: Leaving)
[07:42:11] *** Quits: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[07:43:23] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[07:44:31] *** Joins: Crassus (~Crassus@user/crassus)
[07:45:42] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[07:46:10] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[07:46:55] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[07:48:42] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:49:37] <maxtim> given the example: https://bpa.st/6XEQ I'm having trouble assigning unique print commands to each button. The buttons get created as expected, but all of them have the last command that get iterated
[07:54:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[07:54:51] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:55:07] *** Quits: gggkmp (~gggkmp@221.219.68.57) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:57:14] *** Joins: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net)
[07:58:08] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[07:58:18] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[07:58:49] *** Joins: cheater (~Username@user/cheater)
[07:59:19] *** Joins: darksun (~darksun@user/darksun)
[07:59:55] *** Quits: doko (~doko@business-90-187-95-41.pool2.vodafone-ip.de) (Ping timeout: 246 seconds)
[08:00:13] *** Joins: audiocat (~audio@2603-8081-1800-6a65-662a-417a-58d5-f091.res6.spectrum.com)
[08:00:24] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[08:01:12] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[08:01:59] <Repiphany> maxtim: You should look up two_[x]['command'] outside of your lambda functions in 16 and 18
[08:02:26] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[08:02:33] <Repiphany> otherwise every time the lambda is called it uses the last value of x after the loop is finished
[08:03:20] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[08:03:48] <maxtim> I actually found the solution on stackoverflow. The solution is to `lambda x=x: print(two_[x]['command'])`. https://stackoverflow.com/questions/10865116/tkinter-creating-buttons-in-for-loop-passing-command-arguments
[08:04:00] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[08:04:34] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 240 seconds)
[08:04:41] <Repiphany> Same general idea though
[08:05:23] <Repiphany> Closure so you're using each x from inside the loop
[08:06:34] *** Quits: Croves (~Croves@2804:14c:578b:9102:d14b:203:315c:7152) (Quit: Client closed)
[08:06:57] *** Quits: SteveP (~steve@2600:1700:2980:9b00:acb2:8b84:551f:efb9) (Quit: This computer has gone to sleep)
[08:08:44] <sydbarret> anybody has used signals in scrapy?
[08:11:13] <BrenBarn> Nice to see my answers from almost 10 years ago are still useful :-)
[08:12:03] <BrenBarn> there are other ways to do it too but that's usually the simplest one
[08:13:32] *** Joins: Wulf (~Wulf@user/wulf)
[08:13:53] <maxtim> lol wow
[08:14:11] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[08:14:13] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[08:14:19] <maxtim> never expect to actually talk to anyone that answers on stack exchange
[08:16:09] *** Quits: kmh (~kmh@p200300df5f2f120075f9d28b18545808.dip0.t-ipconnect.de) (Quit: Leaving)
[08:19:06] *** Joins: Fiji (~Fiji@user/fiji)
[08:19:08] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 258 seconds)
[08:19:21] *** Joins: rajkosto (~rajkosto@178-222-121-123.dynamic.isp.telekom.rs)
[08:19:31] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 246 seconds)
[08:19:48] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 272 seconds)
[08:21:55] <maxtim> BrenBarn, any tips on getting self.bind() to work correctly? in my for loop, I'm trying to `self.bind(f'<{x}>', ...)` but that isn't working....
[08:21:59] *** Joins: ExTRaTeRrEsTRe (~extra@177.228.178.247)
[08:22:41] *** Joins: Warped (~Warped@user/warped)
[08:23:08] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[08:25:35] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:27:26] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[08:27:58] <BrenBarn> I don't know that much about tkinter really
[08:28:02] <BrenBarn> I mean what is the error you're getting?
[08:29:53] <maxtim> KeyError: <KeyPress event state=Mod2 keysym=F1 keycode=67 x=767 y=-338>
[08:30:24] <maxtim> but if I: `self.bind(f'<{two_["F1"]}>', print('from outside'))` it functions properly....
[08:30:30] *** Quits: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com) (Quit: ZNC - https://znc.in)
[08:31:34] <maxtim> My guess is that self.bind(f'<{x}>' <-- isn't formatted properly
[08:31:46] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:31:46] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[08:32:21] <maxtim> So I've tried a few different f-strings: f'\"<{x}>\"'
[08:32:45] <maxtim> and then swapping single quotes and double quotes
[08:33:17] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[08:33:19] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:33:53] *** Joins: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com)
[08:34:41] *** Joins: Deep6 (~Deep6@fixed-187-190-189-105.totalplay.net)
[08:35:35] <BrenBarn> Try putting the f-string outside the bind call and printing it or something to see if it's what you think it is
[08:35:42] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[08:36:01] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:16] <maxtim> yep, exactly what I did.... It's what I expect
[08:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:54] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[08:37:16] <BrenBarn> what is that `print('from outside')` supposed to be doing?
[08:37:56] <maxtim> bind F1 to print('from outside') ... from outside the loop
[08:38:05] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: No route to host)
[08:38:09] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[08:38:12] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:38:15] <BrenBarn> I don't think that's doing what you think it is
[08:38:20] <maxtim> Which, as I'm learning is not functioning properly.
[08:38:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:38:48] <maxtim> It's just straight printing... so I think I may have something else incorrect
[08:38:49] <BrenBarn> if you call `bind("whatever", print('from outside'))` it's doing the print before it does the bind, and binding to the return value of the print, which is None
[08:39:30] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[08:41:21] *** Quits: Wulf (~Wulf@user/wulf) (Read error: Connection reset by peer)
[08:41:55] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[08:42:03] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[08:42:11] *** Joins: nac (~nac@user/nac)
[08:42:40] *** Quits: sudomannn (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Quit: Leaving)
[08:42:46] *** Joins: pnoud (~pnoud@user/pnoud)
[08:42:51] *** Joins: Wulf (~Wulf@user/wulf)
[08:42:58] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 246 seconds)
[08:43:04] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:8922:75:3a92:e0b2) (Quit: Leaving)
[08:43:48] *** Quits: nac (~nac@user/nac) (Client Quit)
[08:43:58] *** Joins: nac4 (~nac@user/nac)
[08:44:05] *** Quits: nac4 (~nac@user/nac) (Client Quit)
[08:44:29] *** Joins: nac4 (~nac@user/nac)
[08:45:49] *** Quits: nac4 (~nac@user/nac) (Client Quit)
[08:46:12] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[08:46:12] *** Joins: nac4 (~nac@user/nac)
[08:46:30] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[08:46:34] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[08:47:31] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[08:48:54] *** Quits: nac4 (~nac@user/nac) (Client Quit)
[08:49:58] *** Joins: nac4 (~nac@user/nac)
[08:50:46] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 265 seconds)
[08:50:56] *** nac4 is now known as nac
[08:51:43] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:52:41] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[08:54:41] *** Quits: great_taste (~great_tas@190.32.235.15) (Quit: Client closed)
[08:54:53] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[08:56:12] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[08:56:31] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[08:56:39] <rud0lf> are `sleep(WAIT_TIME)` gonna roughly work as `for i in range(WAIT_TIME * 10): sleep(0.1)` ? in terms of delay time
[08:56:59] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[08:57:59] <Wulf> rud0lf: if WAIT_TIME is an int, yes
[08:58:25] *** Joins: rickygee (~ricky@236-53-74-65.gci.net)
[08:59:21] *** Joins: great_taste (~great_tas@190.32.235.15)
[09:04:34] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 240 seconds)
[09:05:53] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[09:05:54] *** Parts: rickygee (~ricky@236-53-74-65.gci.net) ()
[09:06:00] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[09:06:36] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[09:08:16] *** Joins: palasso (~palasso@user/palasso)
[09:09:25] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:09:30] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[09:09:37] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[09:09:47] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:10:12] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[09:10:16] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 246 seconds)
[09:10:38] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:11:51] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:12:02] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[09:12:19] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[09:12:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[09:13:04] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:13:10] *** Joins: txtsd (~txtsd@user/txtsd)
[09:13:43] <rud0lf> thank you
[09:14:09] <rud0lf> i try to make the thread more responsive to "if terminated: break" (the main loop)
[09:14:17] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:15:02] *** Joins: rickygee (~ricky@236-53-74-65.gci.net)
[09:15:13] *** Joins: a6a45081-2b83 (~aditya@106.214.66.197)
[09:15:25] <Wulf> rud0lf: what's the thread's purpose?
[09:15:30] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:16:31] <Wulf> sleeping? Perhaps you shouldn't use a thread for that.
[09:16:43] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:17:50] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 265 seconds)
[09:17:56] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:19:09] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:20:02] *** Joins: kmh (~kmh@p200300df5f2f12002c82c639a9d34e57.dip0.t-ipconnect.de)
[09:20:22] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:21:35] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:22:15] *** Quits: ExTRaTeRrEsTRe (~extra@177.228.178.247) ()
[09:22:48] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:23:30] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[09:24:01] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:25:14] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:25:15] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790::29)
[09:26:27] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:27:34] <robyndrake> Uhm, Hello, Please, anyone know of a website on how to set headers with response to get around a 403 error, when using the browser I do not get a 403 error
[09:27:40] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:27:44] <robyndrake> or is headers the right thing I need to set?
[09:28:07] <Wulf> robyndrake: Hello. Common causes are wrong user agent or referer.
[09:28:25] <robyndrake> ok I need to find out how to set the user agent
[09:28:53] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:29:01] <Wulf> requests.get("https:/x/y", headers={"User-Agent": "robyndrake/1.0"})
[09:29:12] <robyndrake> thank you
[09:29:30] *** Joins: stranac (~stranac@195.29.239.126)
[09:30:06] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:30:16] *** Joins: pnoud (~pnoud@user/pnoud)
[09:31:18] *** Joins: gggkmp (~gggkmp@221.219.68.57)
[09:31:19] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:32:32] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:33:45] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:34:22] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:34:31] *** Joins: zbr1 (~zbr@h.sbarnea.com)
[09:34:58] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:35:58] *** Quits: zbr (~zbr@h.sbarnea.com) (Ping timeout: 246 seconds)
[09:35:58] *** zbr1 is now known as zbr
[09:36:02] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[09:36:11] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:37:24] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:38:29] *** Joins: cation21 (cation@user/cation)
[09:38:37] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:39:42] *** Quits: cation (cation@user/cation) (Ping timeout: 250 seconds)
[09:39:50] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:41:03] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:42:01] *** cation21 is now known as cation
[09:42:16] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:43:29] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:44:08] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[09:44:42] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:44:54] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[09:45:15] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:45:55] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:46:32] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 258 seconds)
[09:47:08] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:47:08] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[09:47:45] <cvmn> how to write this in a better way?  https://gist.github.com/26e68c3f79115a247879a61d7bd6ceac
[09:47:59] *** Quits: sydbarret (~anton@static-186-121-195-24.acelerate.net) (Quit: Going offline, see ya! (www.adiirc.com))
[09:48:21] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:48:24] *** Quits: Wu (~wu@254.red-83-52-60.dynamicip.rima-tde.net) (Ping timeout: 252 seconds)
[09:48:44] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[09:49:00] *** Quits: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com) (Ping timeout: 252 seconds)
[09:49:34] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:49:57] *** Joins: Wu (~wu@254.red-83-52-60.dynamicip.rima-tde.net)
[09:50:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[09:50:29] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[09:50:35] <cvmn> is it better this way?  https://gist.github.com/37c20da142a857edcc6d8628ac74955a
[09:50:45] <cvmn> is there a totally different approach that's better than all?
[09:50:47] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:51:02] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[09:52:00] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:52:04] *** Quits: gggkmp (~gggkmp@221.219.68.57) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:52:43] <grawity> yeah it's probably what I'd use, although if the question is purely about formatting then https://bpa.st/Y47A looks more like python
[09:53:13] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:53:28] *** Joins: parzival (~parzival@user/parzival)
[09:53:29] <grawity> is 'OUT' also a log level?
[09:53:43] <robyndrake> found a better way to gather the FBI data I want, api.data.gov
[09:54:01] <cvmn> grawity: out is stuff the client will print using sys.stdout.write(...).  i.e. raw print of no specific type.
[09:54:13] <cvmn> should i call it 'raw' instead of out?
[09:54:26] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:54:38] <grawity> it's probably fine
[09:54:40] *** Joins: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com)
[09:54:54] <grawity> I guess it's like how powershell has stdout, stderr, stdwarn, stddebug, etc
[09:55:39] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:55:55] <cvmn> does powershell have multiple stdin too?
[09:56:18] <cvmn> i think it should be generalised to multiple stdins and stdouts.
[09:56:57] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[09:57:13] <grawity> it doesn't, and I don't think that would make much sense
[09:57:14] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[09:57:25] <grawity> or at least there would be no point to the 'std' part of it
[09:57:29] *** Quits: Deep6 (~Deep6@fixed-187-190-189-105.totalplay.net) (Ping timeout: 252 seconds)
[09:57:30] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[09:58:05] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[09:58:32] <cvmn> imo it does.  because some secure applications expect multiple stdins.  e.g. password and private data, and output is encrypted private data.  currently the approach is to have a single stdin, then define a format to separate password from data, by doing things like ``1st line is password, then it's data until EOF''.  this is too complex in my view, as it requires a format.
[09:59:03] *** Joins: Deep6 (~Deep6@208.127.69.222)
[09:59:15] <cvmn> e.g. scrypt cannot handle both password and private data from stdin.  what it does is, once you choose to feed scrypt password via stdin, then the private data must come from a file.
[09:59:16] <grawity> no, they expect multiple *inputs*
[09:59:18] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[09:59:20] <grawity> not "stdins"
[09:59:22] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[09:59:28] <cvmn> inputs of which kind?
[09:59:39] <grawity> if they have different names and purposes, they're just "ins", no longer "stdins"
[09:59:57] <cvmn> yeah.  is this already supported?
[10:00:02] <grawity> well, you can do it on Unix already
[10:00:03] <cvmn> e.g. multiple ins?
[10:00:09] <cvmn> how?
[10:00:10] <grawity> you can pass as many file descriptors to a program as you want
[10:00:14] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 252 seconds)
[10:00:19] <grawity> e.g. GnuPG takes a --passphrase-fd=
[10:00:22] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[10:00:23] <grawity> so do many other similar programs
[10:00:31] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:00:46] <cvmn> how does this work?  e.g. where does the file live?
[10:00:49] *** Joins: darksun (~darksun@user/darksun)
[10:00:55] *** Joins: wyclif (~wyclif@user/wyclif)
[10:01:13] <grawity> it doesn't need to be a "file" nor live anywhere in particular
[10:01:22] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 246 seconds)
[10:01:28] <grawity> like when you do `echo this | ./something`, there's no file for the program's stdin
[10:01:36] <grawity> the file descriptor points to a pipe
[10:01:44] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:01:49] <cvmn> do these multiple ins integrate like that via shell?
[10:02:03] <grawity> it's harder, but yes
[10:02:05] <ApostleInTriumph> Hi. I've two dicts. some of their keys match but the others in the latter are a subset of the former. How do I merge them? (match+subset)
[10:02:14] <cvmn> grawity: got an example?
[10:02:36] <grawity> ApostleInTriumph: not entirely sure about what result you want, example?
[10:02:57] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:03:06] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[10:04:03] <ApostleInTriumph> {'A' : 1, 'B' : 2, 'ABCD' : 3} , {'A' : 13, 'B' : 20, 'ABC' : 30} -> {'A' : [1,13], 'B' : [2, 20], 'ABC' : [3, 30]}
[10:04:10] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:04:31] <cvmn> grawity: my wish right now for the multiple ins is as follows:  `echo foo |1| echo bar |2| echo baz |3| myapp`.  where |n| means: ``feeds the nth input of myapp''.
[10:04:38] *** Joins: WarpedAI (~Warped@user/warped)
[10:04:42] <grawity> cvmn: gpg --symmetric --pinentry-mode=loopback --passphrase-fd=3 <<<"Hello!" 3<<<"a password"
[10:04:54] <grawity> cvmn: gpg --symmetric --pinentry-mode=loopback --passphrase-fd=3 < input.txt 3< password.txt
[10:05:12] <cvmn> oh.  that's not too different than my wish?
[10:05:13] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[10:05:23] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:05:34] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790::29) (Quit: WeeChat 3.0.1)
[10:05:37] <grawity> cvmn: for complex pipelines it gets slightly cumbersome, you need to use the <(command) operator that gives you a *named* pipe for some program's stdout
[10:05:48] <grawity> cvmn: though, often if you have <() and >() you don't even need to work with fd's
[10:05:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[10:05:58] *** Joins: wyclif_ (~wyclif@user/wyclif)
[10:06:17] <grawity> cvmn: e.g. (made-up options) gpg --symmetric --passphrase-file=<(echo "This is my password") input.txt
[10:06:36] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:06:45] <grawity> the program receives a filename like /dev/fd/3 and can read echo's output from it
[10:06:50] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 272 seconds)
[10:07:15] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[10:07:29] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 252 seconds)
[10:07:43] <grawity> cvmn: I'm not sure offhand how one would do that in Python, though, I guess it would be e.g. pass_fds= in subproces.Popen
[10:07:49] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:08:23] <grawity> ApostleInTriumph: so you want to merge individual values to lists? I don't think there's any standard operator for that
[10:08:37] <ApostleInTriumph> grawity yes
[10:08:43] <cvmn> grawity: how secure is  ``--passphrase-file=<(echo "This is m...'' against mitm?  e.g. some other script reading that named pipe in the middle before gpg?
[10:08:57] <ApostleInTriumph> grawity but  it's not straightforward as the keys don't exactly match
[10:09:02] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:09:38] <grawity> ApostleInTriumph: hmm then you'll need to define exactly how they should match
[10:10:15] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:10:19] <grawity> i.e. how is 'ABCD' <=> 'ABC' supposed to be determined?...
[10:11:02] <grawity> cvmn: that's not "mitm"
[10:11:28] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:11:30] <cvmn> what is it?
[10:11:39] <grawity> just data interception
[10:11:58] <grawity> cvmn: but data from pipes can only be read once, so if some other process found the correct fd (e.g. by scanning the shell's open fd's) and managed to read it before gnupg could, then gnupg itself wouldn't be able to read the password and wouldn't work
[10:12:18] <cvmn> yes.  a mitm with a bonous dos.
[10:12:41] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:12:56] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[10:13:05] *** Quits: great_taste (~great_tas@190.32.235.15) (Quit: Client closed)
[10:13:15] <cvmn> dos-ing pitm  (DoSing person-in-the-middle).
[10:13:16] *** Quits: Deep6 (~Deep6@208.127.69.222) (Ping timeout: 246 seconds)
[10:13:27] <grawity> do you worry about that sort of thing when you run `echo foo | gpg`?
[10:13:43] <ApostleInTriumph> grawity "in" operator would be good enough
[10:13:54] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:13:56] <cvmn> grawity: no.  i think `echo foo | gpg` is not vulnerable to dos-ing mitm.  is my thought wrong?
[10:13:57] <grawity> ApostleInTriumph: 'A' would match 'ABCD' though
[10:14:24] <grawity> cvmn: then why do you think <(foo) is any different
[10:14:29] <ApostleInTriumph> grawity you're right, but that won't happen as keys are large enough
[10:14:42] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[10:14:48] <cvmn> grawity: i thought <(foo) creates a named pipe of a classical sense without much shell magic, such that other apps may use it.
[10:14:51] <ApostleInTriumph> somehow, I guess probably processing bytes wrongly that these strings have 'b' both appended and prepended
[10:15:07] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:15:19] *** Joins: Deep6 (~Deep6@fixed-187-191-36-13.totalplay.net)
[10:16:00] <grawity> ApostleInTriumph: hmm feels like I want to see a real example
[10:16:20] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:16:26] <grawity> like, how is the data actually produced that it results in needing to do this kind of merge
[10:16:40] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[10:16:50] <ApostleInTriumph> grawity target : https://bpa.st/A2BA source : https://bpa.st/K74A
[10:17:11] <ApostleInTriumph> consider that I've removed the 'wss.'
[10:17:19] <ApostleInTriumph> the paste is a few hours old
[10:17:31] <grawity> from both?
[10:17:33] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:17:56] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:18:02] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[10:18:10] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 246 seconds)
[10:18:19] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[10:18:34] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Quit: Bye)
[10:18:46] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:19:59] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:21:12] <grawity> so I'm guessing you're talking about keys like 198a3e82b102529c4904d89e9169817b vs 198a3e82b102529c4904d89e9169817
[10:21:12] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:21:37] <grawity> really the 'b' seems fairly normal there, it's the other one that is an odd-length
[10:21:53] <ApostleInTriumph> grawity exactly
[10:22:11] <ApostleInTriumph> i just fixed it based on his answer : https://stackoverflow.com/a/4843172
[10:22:25] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:22:27] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[10:22:38] <ApostleInTriumph> but I wonder why are there appending and prepending 'b'
[10:22:51] <ApostleInTriumph> grawity is it due to string->byte conversion?
[10:23:08] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[10:23:13] <grawity> not sure I understand what you're talking about
[10:23:36] <grawity> it seems like it's the opposite though
[10:23:38] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:23:48] <grawity> i.e. something in your code is wrongly *discarding* 'b' where it should be
[10:24:15] <grawity> based on len('198a3e82b102529c4904d89e9169817') being 31
[10:24:22] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:24:28] *** Quits: LiftLeft (~LiftLeft@154.21.28.219) (Ping timeout: 246 seconds)
[10:24:32] <grawity> how's that string->byte conversion being done?
[10:24:51] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:25:10] *** Joins: anas (~anas@196.235.5.143)
[10:26:04] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:27:08] <ApostleInTriumph> grawity these are from a dataset that I've downloaded, so I've no idea how it's done
[10:27:17] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:27:26] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:27:32] <ApostleInTriumph> basically, those columns - 'wss.' must match some file names locally
[10:27:45] *** Joins: Obo (~roberto@94.191.137.122.mobile.tre.se)
[10:27:57] <ApostleInTriumph> grawity in case you're curious about the dataset : http://shapenet.cs.stanford.edu/shapenet/obj-zip/ShapeNetSem.v0/README.txt
[10:28:10] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[10:28:23] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[10:28:30] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:29:43] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:30:32] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[10:30:32] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[10:30:38] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[10:30:47] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[10:30:56] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:30:57] *** Joins: i0e (~is0ke3@user/is0ke3)
[10:31:00] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[10:31:07] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 246 seconds)
[10:31:24] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[10:32:19] *** Joins: Pseudocrat (~pseudo@user/pseudocrat)
[10:32:32] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[10:32:35] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[10:33:27] <grawity> hmm I guess something like https://paste.rs/UZw then
[10:34:20] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[10:35:19] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79)
[10:35:19] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::6e79) (Remote host closed the connection)
[10:35:26] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[10:39:18] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[10:40:24] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 272 seconds)
[10:41:40] *** Quits: Obo (~roberto@94.191.137.122.mobile.tre.se) (Ping timeout: 272 seconds)
[10:41:49] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[10:42:23] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[10:42:25] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[10:43:04] *** Joins: Obo (~roberto@122.red-83-38-248.dynamicip.rima-tde.net)
[10:43:13] <ApostleInTriumph> grawity thanks!
[10:44:13] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:47:05] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:47:05] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 252 seconds)
[10:47:09] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:47:41] *** Joins: seednode (~seednode@user/seednode)
[10:49:22] *** Joins: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr)
[10:49:53] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[10:51:55] *** Joins: candyman (~candyman@user/candyman)
[10:54:10] *** Joins: upsala (~zcb@185.213.155.160)
[10:57:28] *** Quits: gyim (~user@86FF5A5B.dsl.pool.telekom.hu) (Ping timeout: 258 seconds)
[10:58:56] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 244 seconds)
[10:58:58] *** Joins: rendar (~rendar@user/rendar)
[10:59:17] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[11:00:14] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:00:28] *** Joins: Tas-sos (~Tas-sos@78-152-69.adsl.cyta.gr)
[11:00:42] *** Joins: de-facto (~de-facto@user/de-facto)
[11:02:37] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 246 seconds)
[11:03:14] *** Quits: candyman (~candyman@user/candyman) (Ping timeout: 272 seconds)
[11:03:59] *** Joins: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa)
[11:05:15] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:05:44] *** Joins: gusto (~Augustus@109.255.100.54)
[11:06:02] *** Quits: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr) (Quit: Client closed)
[11:07:59] *** Joins: VaniaPy (~VaniaPy@46.12.210.52.dsl.dyn.forthnet.gr)
[11:09:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:11:40] *** Joins: unyu (~pyon@user/pyon)
[11:11:40] *** unyu is now known as isekaijin
[11:15:37] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[11:16:07] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:17:14] *** Quits: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa) (Ping timeout: 252 seconds)
[11:17:32] *** Joins: pycode (~pycode@2001:b07:5d28:551:c78b:bddf:d04e:46cf)
[11:22:23] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[11:24:53] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[11:25:14] *** Quits: bigRoo (~user@131.236.54.84) (Remote host closed the connection)
[11:26:11] *** Quits: a6a45081-2b83 (~aditya@106.214.66.197) (Remote host closed the connection)
[11:26:13] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[11:27:15] *** Joins: Auron (~Auron956@user/auron)
[11:27:22] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 265 seconds)
[11:28:31] *** Quits: anas (~anas@196.235.5.143) (Ping timeout: 246 seconds)
[11:28:33] *** Joins: gggkmp (~gggkmp@221.219.68.57)
[11:29:26] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[11:32:22] *** Quits: litharge (litharge@libera/bot/litharge) (Quit: restarting)
[11:33:15] *** Joins: litharge (litharge@libera/bot/litharge)
[11:33:20] *** ChanServ sets mode: +o litharge
[11:33:23] *** Joins: candyman (~candyman@user/candyman)
[11:35:17] *** Joins: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa)
[11:36:29] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 268 seconds)
[11:39:43] *** Quits: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa) (Ping timeout: 246 seconds)
[11:39:56] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[11:42:26] *** Joins: DX099 (~dx099@2a01:e0a:347:f1c1:9179:a6ce:9f64:aeb7)
[11:42:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[11:43:22] *** Joins: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa)
[11:43:35] *** Quits: redgloboli (~redglobol@user/redgloboli) (Quit: ended)
[11:45:29] *** Quits: gggkmp (~gggkmp@221.219.68.57) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:45:38] *** Joins: redgloboli_ (~redglobol@user/redgloboli)
[11:47:08] *** redgloboli_ is now known as redgloboli
[11:48:07] *** Quits: kmh (~kmh@p200300df5f2f12002c82c639a9d34e57.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[11:48:08] *** Quits: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa) (Ping timeout: 252 seconds)
[11:48:59] *** Joins: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa)
[11:49:10] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 246 seconds)
[11:51:34] *** Joins: Adoi (~Adoi@user/adoi)
[11:51:46] *** Joins: manti7 (~manti7@176.10.104.94)
[11:51:47] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[11:55:49] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[11:57:08] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:58:37] *** Joins: kai6 (~kai@x50d24799.cust.hiper.dk)
[11:59:02] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 252 seconds)
[12:00:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:00:40] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[12:01:13] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[12:01:28] *** Quits: Doffi (~doffi@91.132.197.188) (Ping timeout: 258 seconds)
[12:03:07] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[12:03:08] *** Joins: darksun (~darksun@user/darksun)
[12:03:25] *** Joins: mickey (~user@user/mickey)
[12:05:02] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[12:06:42] *** Joins: Warped (~Warped@user/warped)
[12:08:11] *** Quits: complexnumber (~brett@202.168.43.51) (Remote host closed the connection)
[12:08:48] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 258 seconds)
[12:09:32] *** Quits: wyclif_ (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[12:09:32] *** Quits: WarpedAI (~Warped@user/warped) (Ping timeout: 258 seconds)
[12:10:30] *** Joins: gstaniak (~gstaniak@212.187.221.34)
[12:10:32] *** Joins: Meteorhead (~Meteorhea@static-qvn-qvs-164225.business.bouyguestelecom.com)
[12:11:08] *** Quits: kai6 (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 252 seconds)
[12:11:31] *** Joins: kai6 (~kai@x50d24799.cust.hiper.dk)
[12:13:47] <gstaniak> What would be a general idea for comparing a large(ish) variable number of objects like configparser instances? For simple string values I could do sth like "if len(set(list_of_strings)) > 1" to check if there are discrepancies. What algorithm would you recommend to compare a list of configparser objects?
[12:14:12] *** Quits: candyman (~candyman@user/candyman) (Remote host closed the connection)
[12:15:27] *** Quits: parzival (~parzival@user/parzival) (Ping timeout: 272 seconds)
[12:17:37] <The-Compiler> gstaniak: compare how?
[12:17:49] *** Joins: candyman (~candyman@user/candyman)
[12:18:07] *** Parts: rickygee (~ricky@236-53-74-65.gci.net) ()
[12:18:30] *** Quits: brabrax_ (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[12:19:02] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[12:19:27] <BrenBarn> if you want to see if they have the same key/value pairs I guess you could just parse them into dicts and compare those
[12:19:59] <BrenBarn> but you have to think about if there are default values or equivalent values, etc.
[12:20:06] *** Quits: Omega037 (~Omega037@047-024-168-024.res.spectrum.com) ()
[12:21:00] *** Joins: brabrax (~brabrax@user/brabrax)
[12:21:28] *** Joins: complexnumber (~brett@202.168.43.51)
[12:23:39] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 256 seconds)
[12:24:40] *** Joins: chele (~chele@user/chele)
[12:24:45] <AhmedAmerican> is it possible to append JSON dict into a JSON file under async `trio` for example ?
[12:27:36] <gstaniak> The-Compiler: compare for equality. Equivalent configs (regardless of order, whitespace etc) give configparser objects that compare as equal (config_a == config_b -> True). I need to compare a number of them and catch differences.
[12:28:54] <gstaniak> BrenBarn: I tried that, but from dict(config_a) it seems I'm only getting the top-level keys, leaf options are missing.
[12:29:07] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 258 seconds)
[12:29:10] *** Joins: nyah (~nyah@90.221.186.180)
[12:30:17] *** Joins: pnoud (~pnoud@user/pnoud)
[12:30:17] *** Joins: darksun (~darksun@user/darksun)
[12:34:10] *** Quits: Obo (~roberto@122.red-83-38-248.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[12:35:01] *** Quits: candyman (~candyman@user/candyman) (Remote host closed the connection)
[12:35:20] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[12:36:20] *** Joins: Obo (~roberto@94.191.137.180.mobile.tre.se)
[12:36:26] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:36:42] *** Joins: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b)
[12:36:59] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 252 seconds)
[12:37:00] *** Joins: candyman (~candyman@user/candyman)
[12:37:46] *** Quits: gstaniak (~gstaniak@212.187.221.34) (Ping timeout: 240 seconds)
[12:38:34] <BrenBarn> well, you might have to do a bit more work to get the dict format you want
[12:38:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:52] *** Quits: candyman (~candyman@user/candyman) (Remote host closed the connection)
[12:40:50] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[12:40:58] *** Joins: gstaniak (~gstaniak@212.187.221.34)
[12:41:25] *** Joins: wyclif (~wyclif@user/wyclif)
[12:41:53] <gstaniak> Why does Libera log me out so quickly? I get disconnected after a few minutes. Never saw this on Freenode.
[12:42:23] *** Joins: anas (~anas@196.235.5.143)
[12:42:25] *** Joins: gareppa (~gareppa@user/gareppa)
[12:42:31] <The-Compiler> gstaniak: you might want to ask in #libera, but no issues here (and for many other people as far as I know)
[12:42:58] <gstaniak> The-Compiler, BrenBarn: might have missed your replies, got disconnected
[12:43:26] <cvmn> is it normal/common/good to say `a, b = None, None`?
[12:43:30] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[12:43:39] <cvmn> any better/cleaner/more-beautiful way?
[12:44:09] <Repiphany> `a = b = None` looks cleaner to me
[12:44:13] <BrenBarn> for None you could do `a = b = None`
[12:44:18] <Repiphany> Can't do with mutable things though
[12:44:20] <BrenBarn> but be careful doing that for mutable values
[12:44:23] <cvmn> Repiphany: since when do we have this neatness?
[12:44:31] <BrenBarn> e.g., `a = b = []` may lead to surprising results
[12:44:53] <cvmn> because they're all the same list in heap?
[12:45:29] <cvmn> btw, since when do we have this feature?  a=b=None?
[12:45:43] *** Joins: raxor2k (~raxor2k@158.39.193.136)
[12:45:56] <Repiphany> Been around since python 2 days
[12:46:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[12:46:26] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 252 seconds)
[12:46:51] <bluss> cvmn: yes, assigning the same list object to both a, b probably only confusing
[12:46:58] <cvmn> and what about  a == b == None?  also python 2's days?
[12:47:57] <The-Compiler> gstaniak: I suppose you could do something like this to get standard Python datastructures:   {sect: cp.items(sect) for sect in cp.sections()}
[12:48:44] <The-Compiler> gstaniak: and depending how sophisticated your diffing is, https://zepworks.com/deepdiff/current/index.html might be helpful
[12:48:56] <cvmn> any cleaner way to do this?   `if args.command == CMD_MOD and {args.t, args.u, password, datab64s, args.n} == {None}:`
[12:49:18] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:49:24] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:51:54] <DX099> Hi all
[12:52:16] <DX099> I'm having troube installing a package from Private PIP repo
[12:52:26] <DX099> I receive "The input file name 'psycopg2_binary-2.9.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl' contains an invalid platform part: 'manylinux_2_17_x86_64'" error
[12:52:50] <DX099> however my local libc is 2.28 and my Python version is 3.8.x
[12:53:09] <DX099> and of course, this is a Linux environment
[12:53:25] <DX099> *64 bits Linux environment
[12:53:53] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[12:54:51] *** Quits: Obo (~roberto@94.191.137.180.mobile.tre.se) (Ping timeout: 265 seconds)
[12:55:18] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[12:56:07] <gstaniak> The-Compiler: thanks! That's a good pointer
[12:56:39] *** Joins: Obo (~roberto@122.red-83-38-248.dynamicip.rima-tde.net)
[12:57:13] *** Joins: wyclif (~wyclif@user/wyclif)
[12:57:20] *** Joins: slav0nic (slav0nic@python.su)
[12:57:42] <Gurkenglas> There's a python in /bin/python3.9 and one in /usr/bin/python3.9. How do I get rid of the first?
[12:57:56] <Gurkenglas> or maybe make it point to the second
[12:58:30] *** Joins: Naan (~Naan@user/naan)
[12:59:36] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[13:00:31] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[13:00:57] *** Joins: twobitsprite (~twobitspr@107.13.51.62)
[13:01:10] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-813e-39b4-ec58-a40f.res6.spectrum.com)
[13:02:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[13:03:22] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[13:03:56] *** Quits: audiocat (~audio@2603-8081-1800-6a65-662a-417a-58d5-f091.res6.spectrum.com) (Ping timeout: 252 seconds)
[13:05:11] <graingert> AhmedAmerican: you can use trio.Path or anyio.Path
[13:05:45] *** Quits: Adoi (~Adoi@user/adoi) (Remote host closed the connection)
[13:05:48] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:05:50] <rud0lf> if my threading.Thread subclass has "sleep(5); do_small_thing()" in run(), do i need to reinstantiate it when it finishes or is my_thread.start() enough to run it again?
[13:05:59] <AhmedAmerican> @graingert that's will allow me to append to list within JSON dict into file ?
[13:07:07] <graingert> AhmedAmerican: Right, well you might be better off using sqlite or JSON lines
[13:07:30] <The-Compiler> DX099: make sure your pip is up to date
[13:07:53] <graingert> rud0lf: Pretty sure they're one shot
[13:07:58] <The-Compiler> Gurkenglas: probably /bin is a symlink to /usr/bin or vice-versa,  ls -ld /bin /usr/bin   will probably tell you more
[13:08:37] *** Quits: Pseudocrat (~pseudo@user/pseudocrat) (Ping timeout: 272 seconds)
[13:09:13] <rud0lf> graingert: verified, "RuntimeError: threads can only be started once" on second .start()
[13:09:14] *** Quits: gstaniak (~gstaniak@212.187.221.34) (Ping timeout: 272 seconds)
[13:09:54] *** Joins: Pseudocrat (~pseudo@user/pseudocrat)
[13:10:26] <graingert> rud0lf: Yep, best to use a ThreadPoolExecutor
[13:10:35] <graingert> Or anyio.to_thread.run_sync
[13:11:11] *** Joins: R24 (~R24@103.201.150.219)
[13:12:23] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[13:13:12] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[13:13:20] *** Joins: zaquest (~notzaques@5.128.210.178)
[13:13:30] *** Quits: R24 (~R24@103.201.150.219) (Client Quit)
[13:14:21] *** Joins: wyclif (~wyclif@user/wyclif)
[13:14:35] *** Joins: gstaniak (~gstaniak@212.187.221.38)
[13:15:25] *** Joins: just-me (~just-me@5.47.239.216)
[13:16:02] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[13:16:13] *** Joins: candyman (~candyman@user/candyman)
[13:16:29] *** Joins: dav1d0 (~dav1d@80-109-93-56.cable.dynamic.surfer.at)
[13:16:44] <just-me> Guys help me out here! So I wrote this: https://bin.byreqz.de/?e1aa2e508597f327#953zh7CCxXB1aTx8d1bYYqcQ6mSL255qCRfHz19TTGxX
[13:17:04] <just-me> But even after typing X or O it keeps asking the same question, how can I fix this?
[13:17:28] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[13:17:41] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[13:18:08] <just-me> It's going to be a two player tic-tac-toe game for context
[13:18:33] <baltazar> just-me: you're not storing the value returned from inuput() anywhere
[13:18:55] *** Joins: Avaris_ (~Avaris@avar.is)
[13:19:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[13:20:02] *** Joins: sri19 (~Srain@240-205-21-31.ftth.glasoperator.nl)
[13:20:13] <just-me> Thank you
[13:20:46] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 272 seconds)
[13:20:46] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[13:20:46] *** Quits: Avaris (~Avaris@avar.is) (Ping timeout: 272 seconds)
[13:20:46] *** Quits: dav1d (~dav1d@80-109-93-56.cable.dynamic.surfer.at) (Ping timeout: 272 seconds)
[13:20:46] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 272 seconds)
[13:20:46] *** dav1d0 is now known as dav1d
[13:20:46] *** Avaris_ is now known as Avaris
[13:21:35] <baltazar> also, your loop condition actually compares the *function* `input` with 'X' and 'O'
[13:21:41] *** Quits: candyman (~candyman@user/candyman) (Quit: No Ping reply in 180 seconds.)
[13:21:56] <just-me> Honestly I have no clue what I am doing
[13:23:05] *** Joins: candyman (~candyman@user/candyman)
[13:23:06] <baltazar> just-me: you might want to read the tutorial linked in the topic: https://j.mp/PyTut
[13:24:00] <DX099> @The-Compiler, it's already up-to-date
[13:24:10] <DX099> 21.1.3
[13:25:18] <just-me> Thank you baltazar
[13:26:26] *** Quits: just-me (~just-me@5.47.239.216) (Quit: Leaving)
[13:26:49] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 246 seconds)
[13:26:58] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:27:10] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 246 seconds)
[13:30:53] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[13:32:34] *** Joins: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3)
[13:32:48] *** Joins: wyclif (~wyclif@user/wyclif)
[13:33:11] *** Quits: gstaniak (~gstaniak@212.187.221.38) (Ping timeout: 252 seconds)
[13:33:54] *** Quits: redgloboli (~redglobol@user/redgloboli) (Ping timeout: 252 seconds)
[13:34:00] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 265 seconds)
[13:34:28] *** Joins: redgloboli (~redglobol@user/redgloboli)
[13:34:37] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[13:35:52] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[13:36:31] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[13:37:16] *** Joins: ice9 (~ice9@user/ice9)
[13:37:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[13:38:10] *** Quits: candyman (~candyman@user/candyman) (Remote host closed the connection)
[13:39:03] *** Joins: ioe (~is0ke3@user/is0ke3)
[13:39:40] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[13:40:03] *** Joins: candyman (~candyman@user/candyman)
[13:40:07] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 246 seconds)
[13:41:55] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[13:42:18] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[13:42:30] *** Quits: maxtim (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net) (Read error: Connection reset by peer)
[13:44:00] *** Quits: candyman (~candyman@user/candyman) (Remote host closed the connection)
[13:44:06] *** Joins: gstaniak (~gstaniak@212.187.221.34)
[13:44:10] *** Quits: ioe (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[13:44:49] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[13:45:17] *** Joins: candyman (~candyman@user/candyman)
[13:45:23] *** Joins: jazzy (~jaziz@2600:380:8653:59ba:edff:946b:89ad:7dd5)
[13:46:39] *** Joins: Crassus (~Crassus@user/crassus)
[13:47:22] *** Joins: wedwards (~wedwards@rtr0.17.31.bogert.cyberfusion.cloud)
[13:47:48] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[13:49:41] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 252 seconds)
[13:50:27] *** Joins: wyclif (~wyclif@user/wyclif)
[13:55:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[13:57:53] *** Quits: m0nkey_ (~quassel@user/m0nkey/x-3352227) (Quit: No Ping reply in 180 seconds.)
[13:59:39] *** Joins: m0nkey_ (~quassel@user/m0nkey/x-3352227)
[13:59:58] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[14:01:01] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[14:02:53] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 252 seconds)
[14:03:04] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[14:03:40] *** Joins: wyclif (~wyclif@user/wyclif)
[14:04:37] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 246 seconds)
[14:05:36] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 272 seconds)
[14:05:39] *** Joins: palasso (~palasso@user/palasso)
[14:07:14] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[14:07:21] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[14:08:15] *** Joins: thiras (~thiras@user/thiras)
[14:09:03] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::4ec1)
[14:09:24] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[14:09:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[14:10:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[14:10:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:12:17] <cvmn> python is so close to the english language, i just realised that i made an error `if x is not in set`.  i didn't notice it, until i ran the code and got told by cpython.
[14:12:30] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[14:13:19] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:14:44] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[14:15:33] *** Joins: frost (~frost@59.71.241.179)
[14:16:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[14:16:15] *** Joins: brabrax (~brabrax@user/brabrax)
[14:16:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:17:48] <raxor2k> Is there an easy median filter example out here ?
[14:17:53] *** Joins: venmx (~albasawa@host31-53-197-249.range31-53.btcentralplus.com)
[14:19:32] *** Quits: {HD} (~{HD}@102.165.16.41) (Ping timeout: 272 seconds)
[14:20:30] *** Joins: wyclif (~wyclif@user/wyclif)
[14:20:34] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:21:22] *** Quits: Deep6 (~Deep6@fixed-187-191-36-13.totalplay.net) (Ping timeout: 240 seconds)
[14:21:47] *** Joins: entuland (~entuland@user/entuland)
[14:22:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[14:22:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:23:25] *** Joins: Deep6 (~Deep6@fixed-187-191-36-13.totalplay.net)
[14:24:49] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[14:26:06] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[14:27:10] *** Joins: brabrax (~brabrax@user/brabrax)
[14:28:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[14:29:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:30:23] *** Quits: Obo (~roberto@122.red-83-38-248.dynamicip.rima-tde.net) (Ping timeout: 268 seconds)
[14:30:36] *** Joins: DillonB07 (~DillonB07@cpc123410-leic20-2-0-cust892.8-1.cable.virginm.net)
[14:31:07] *** Joins: pnoud (~pnoud@user/pnoud)
[14:31:42] <DillonB07> Hallo! I'm getting a really weird error that I haven't got before, and can't make any sense of. Please can someone help me debug it? - https://bpa.st/XLYQ
[14:32:02] *** Joins: Obo (~roberto@94.191.137.180.mobile.tre.se)
[14:32:54] *** Joins: gggkmp_ (~gggkmp@221.219.70.176)
[14:34:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[14:35:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:35:22] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[14:36:21] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[14:36:24] *** neolem is now known as neolem_
[14:36:28] *** Joins: wbn (~eli@i220-99-152-148.s41.a013.ap.plala.or.jp)
[14:37:16] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 272 seconds)
[14:37:56] *** neolem_ is now known as neolem
[14:38:39] <wbn> good evening
[14:38:54] <wbn> i'm looking for a nice algorithm that can build a dict of nested dicts
[14:39:00] <wbn> i've sketched out what i'm looking for: https://bpa.st/7W4A
[14:39:31] *** Joins: darksun (~darksun@user/darksun)
[14:40:01] *** Joins: y1n (~y1n@84-115-65-210.wifi.dynamic.surfer.at)
[14:40:22] <wbn> ^ I have `a` defined in config, and I'm parsing `b` from user input, which is why I'm keeping them separated like that.
[14:40:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[14:41:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:42:06] *** Quits: gstaniak (~gstaniak@212.187.221.34) (Ping timeout: 252 seconds)
[14:42:35] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[14:42:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[14:44:36] <rindolf> wbn: hi
[14:45:10] <rindolf> wbn: use recursion
[14:45:39] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[14:45:44] <wbn> oh yeah, that sounds applicable here
[14:45:58] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[14:46:17] <wbn> originally i wanted to do like a `foldr` on it (maybe reverse and then `reduce`)
[14:46:35] <wbn> but the case where i have to handle the last item was making my head hurt, that's partly why i moved it out of the list
[14:46:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[14:47:03] <baltazar> wbn: this seems to work: http://ix.io/3shT
[14:47:08] *** Joins: darklambda (~whateverg@111.65.56.40)
[14:47:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:47:20] <rindolf> wbn: note that there is  a recursion limit
[14:47:21] *** Quits: Naan (~Naan@user/naan) (Remote host closed the connection)
[14:47:55] *** Joins: Naan (~Naan@user/naan)
[14:48:13] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[14:48:54] <wbn> baltazar: wow that's concise, thank you
[14:49:01] <wbn> rindolf: oh, gotcha
[14:49:31] <rindolf> baltazar++
[14:49:39] <Repiphany> Alternatively, https://bpa.st/F6HA
[14:51:01] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[14:52:02] *** Joins: brabrax (~brabrax@user/brabrax)
[14:52:03] <rindolf> writing tests would be advantageous though: https://github.com/shlomif/what-you-should-know-about-automated-testing
[14:52:04] <baltazar> wbn: here's a solution that doesn't use recursion: http://ix.io/3shU
[14:52:34] <DillonB07> I'm getting a really weird error that I haven't got before, and can't make any sense of. Please can someone help me debug it? - https://bpa.st/XLYQ
[14:53:06] <wbn> Repiphany: that syntax on line 2 i'd never seen before, but it makes sense to me
[14:54:25] <wbn> baltazar: yeah, building it from the right-hand-side is what i wanted, but my approaches seemed to start with the dict at the root of it, and led nowhere
[14:54:45] <wbn> rindolf: it's going into a larger script and i'll write test cases for it
[14:55:02] <rindolf> wbn: great
[14:55:39] <rindolf> wbn: you can extract some modules too
[14:56:20] *** Joins: wyclif (~wyclif@user/wyclif)
[14:57:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[14:58:24] *** Quits: candyman (~candyman@user/candyman) (Read error: Connection reset by peer)
[14:58:35] *** Quits: sebastianos (~sebastian@user/sebastianos) (Read error: Connection reset by peer)
[14:59:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:00:13] <baltazar> DillonB07: this doesn't look like a python error at all, it seems to be from some c++ library or your python interpreter itself
[15:00:31] *** Joins: dez (uid92154@user/dez)
[15:00:32] <rindolf> DillonB07: oh dear, py+tcltk+macOS - terror
[15:00:49] <Yhg1s> It's an error from the graphics interface with the OS, used by Tkinter.
[15:00:51] <DillonB07> That comes from running into my tail on a pygame snake game
[15:01:05] *** Joins: candyman (~candyman@user/candyman)
[15:01:05] <DillonB07> Yhg1s: Is there a solution you know of?
[15:01:25] <Yhg1s> Something in the Tkinter code is doing something that the MacOS graphics library doesn't agree with, and doesn't agree with in such a way that the only thing it thinks it can do is terminate the program.
[15:01:45] <DillonB07> oh
[15:01:48] <DillonB07> that's not ideal
[15:01:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[15:02:10] <rindolf> Yhg1s: heh, funny and true
[15:02:13] *** Joins: Naan` (~Naan@user/naan)
[15:02:15] <Yhg1s> It appears to be to do with creating a new Tkinter App, with specific options.
[15:02:27] <DillonB07> the only tkinter code is a message box
[15:02:43] *** Joins: sebastianos (~sebastian@user/sebastianos)
[15:03:29] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[15:03:44] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[15:04:30] <rindolf> https://blog.codinghorror.com/learn-to-read-the-source-luke/ - one reason i dislike proprietary deps
[15:04:53] *** Joins: brabrax (~brabrax@user/brabrax)
[15:05:22] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 240 seconds)
[15:05:29] <Yhg1s> DillonB07: from the traceback I would guess it's tkinter.Tk() that's triggering the error.
[15:05:47] <DillonB07> Don't think there is a solution for that then
[15:06:02] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[15:06:33] <Yhg1s> oh, there's more info in the actual error message, "-[SDLApplication macMinorVersion]: unrecognized selector sent to instance 0x7fbdd031f380"
[15:07:29] <DillonB07> ...
[15:07:31] <Yhg1s> so it is perhaps a mismatch between Python, libraries Python uses, and your MacOS version.
[15:07:38] <DillonB07> right...
[15:07:56] <DillonB07> this is the first time in over 2 years that I've got this error
[15:08:18] <Yhg1s> DillonB07: are you running your code from IDLE?
[15:08:19] *** Quits: gggkmp_ (~gggkmp@221.219.70.176) (Ping timeout: 246 seconds)
[15:08:27] <DillonB07> PyCharm CE
[15:08:29] <Yhg1s> https://stackoverflow.com/questions/32078005/using-python-and-tkinter-to-make-a-simple-gui-i-get-unrecognized-selector-sent seems to be relevant.
[15:08:39] <Yhg1s> DillonB07: and if you run it from outside PyCharm?
[15:08:45] <DillonB07> Trying that now
[15:09:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[15:09:59] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[15:10:20] <DillonB07> Similar(probably same) error: https://bpa.st/XM4A
[15:10:46] <DillonB07> I ran that from Terminal
[15:10:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:11:28] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[15:13:45] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:15:23] *** Quits: y1n (~y1n@84-115-65-210.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[15:15:54] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[15:16:31] <DillonB07> Yhg1s: However, in IDLE it also quits the program but doesn't give me an error...
[15:16:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[15:16:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:16:53] *** Quits: rajkosto (~rajkosto@178-222-121-123.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[15:17:03] <Yhg1s> DillonB07: are you using MacOS 10.6 or later? Did you check https://www.python.org/download/mac/tcltk/, from that SO link I pasted?
[15:17:29] <DillonB07> Oh, I missed that link. And I'm on 10.15.7(Catalina)
[15:17:52] <DillonB07> and open that last link
[15:17:57] <Yhg1s> although it says it shouldn't be necessary if you're using the python.org installer for MacOS, for 3.9.
[15:17:58] <DillonB07> File Not Found
[15:18:07] <Yhg1s> DillonB07: did you paste the comma as well?
[15:18:08] *** Quits: wbn (~eli@i220-99-152-148.s41.a013.ap.plala.or.jp) (Ping timeout: 252 seconds)
[15:18:12] <DillonB07> oops
[15:18:32] <DillonB07> and I did use the python.org installer
[15:18:39] <DillonB07> but my current environment is conda
[15:19:05] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Quit: leaving)
[15:19:22] <Yhg1s> are you sure you're not using a conda install of python then?
[15:19:22] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[15:20:08] <DillonB07> In Pycharm I was using Conda, but in Terminal I was using the python.org installed version
[15:20:26] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:2042:a71:4322:6233)
[15:20:29] *** Joins: brabrax (~brabrax@user/brabrax)
[15:21:45] *** Joins: wyclif (~wyclif@user/wyclif)
[15:21:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[15:21:59] <Yhg1s> DillonB07: oh, you said you had a snake game, but also only use tkinter for a message box... are you mixing GUI libraries?
[15:21:59] *** Quits: pycode (~pycode@2001:b07:5d28:551:c78b:bddf:d04e:46cf) (Ping timeout: 252 seconds)
[15:22:10] <DillonB07> pygame + Tkinter
[15:22:17] <DillonB07> Would it helped if I bpasted my code?
[15:22:38] <Yhg1s> Always. But in this case, I think it's safe to say this is "don't do that" territory. You're mixing GUI libraries (pygame's and Tkinter), and that's confusing the OS.
[15:22:38] *** Quits: Auron (~Auron956@user/auron) (Ping timeout: 252 seconds)
[15:22:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:22:58] <Yhg1s> you can perhaps make pygame use Tkinter (I don't know), but you'd be better off using pygame to create the message box.
[15:23:04] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7)
[15:23:10] <DillonB07> Not sure if that's possible
[15:23:22] <DillonB07> but i did it like this because I was watching a tutorial to learn pygame
[15:23:36] <DillonB07> https://bpa.st/XHLA
[15:23:43] <baltazar> (imho, tkinter alone is "don't do that" territory)
[15:24:10] *** Quits: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa) (Ping timeout: 240 seconds)
[15:24:55] <Yhg1s> DillonB07: you would create the message box as a sprite, really.
[15:25:04] <Yhg1s> I don't remember if pygame has a premade class for this
[15:25:28] *** Joins: Deneb (~johnch@58.111.189.80.dyn.plus.net)
[15:25:34] <DillonB07> But the point is that it would show up ontop as a seperate window
[15:25:43] <DillonB07> i'll look at the pygame docs though
[15:26:41] *** Joins: y1n (~y1n@84-115-65-210.wifi.dynamic.surfer.at)
[15:26:45] <baltazar> DillonB07: does it work if you only show the message box, without starting pygame? it might just be the case that somehow tkinter is borked
[15:26:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[15:27:31] <DillonB07> it does work without pygame
[15:28:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[15:28:36] <baltazar> hmm
[15:28:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:29:03] *** Quits: sri19 (~Srain@240-205-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[15:29:56] <DillonB07> and it seems to work on Linux
[15:29:57] *** Joins: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa)
[15:30:01] <DillonB07> I uploaded to Replit
[15:30:22] *** Parts: BlessJah (~BlessJah@user/blessjah) ()
[15:31:06] <Yhg1s> I'm not sure why it matters whether it works on Linux. The problem is you're mixing GUI toolkits. Maybe it works on Linux now, but mixing GUI toolkits is not a good idea, not really supported, and could break at any time. In this particular case, on MacOS, you have two things asking conflicting things of the OS.
[15:31:45] <Yhg1s> the same might happen on Linux when pygame or tkinter (or Tcl/Tk) change.
[15:33:16] *** Joins: VBreton (~Guest1@82-65-166-34.subs.proxad.net)
[15:33:20] <DillonB07> Testing it on Replit confirmed that it was a macOS issue and not a code issue
[15:33:30] <DillonB07> though that is what you predicted, it was good to be sure
[15:33:34] <Yhg1s> You aren't listening. It *is* a code issue, it's just not *apparent* except on MacOS.
[15:33:45] <Yhg1s> Do not mix GUI libraries.
[15:34:13] *** Quits: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa) (Ping timeout: 246 seconds)
[15:34:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[15:34:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:34:44] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[15:35:27] *** Joins: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa)
[15:37:04] *** Joins: zeden (~zeden@user/zeden)
[15:37:35] *** Joins: {HD} (~{HD}@191.96.185.62)
[15:37:41] *** Quits: abn (sid376310@id-376310.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[15:37:48] *** Joins: wyclif (~wyclif@user/wyclif)
[15:37:50] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[15:38:03] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[15:38:56] <Gurkenglas> "ls -ld /bin /usr/bin" "lrwxrwxrwx 1 root root     7 Feb 20 00:48 /bin -> usr/bin" "drwxr-xr-x 2 root root 36864 Jul  1 18:33 /usr/bin" and yet having jupyter's sys.executable be /bin/python3.9 instead of /usr/bin/python3.9 apparently makes it unable to import a library i installed using /usr/bin/python3.9 -m pip install. How should I approach this?
[15:39:08] <Feuermagier> Hi. I'm attempting to automate an exploit in C that will require me to send specific chars to a C program. How can I interface with another program through python properly?
[15:39:18] <Yhg1s> Gurkenglas: run /usr/bin/python instead.
[15:39:25] <Yhg1s> oh, you installed in /bin
[15:39:38] <Yhg1s> Gurkenglas: I'm confused. What are you tryign to do?
[15:39:46] *** Quits: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa) (Ping timeout: 240 seconds)
[15:39:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[15:39:54] <Yhg1s> Feuermagier: the subprocess module.
[15:40:25] <Gurkenglas> Yhg1s, how do I turn /usr/bin/python and /bin/python into one thing so I don't have to worry about there being two?
[15:40:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:40:34] <Yhg1s> Gurkenglas: remove /bin/python.
[15:40:45] <Gurkenglas> using rm -rf? mightnt some OS stuff depend on that?
[15:41:01] <Yhg1s> Gurkenglas: I'm saying "don't make /bin a symlink to /usr/bin"
[15:41:14] <Gurkenglas> i didnt do it wsl seems to do this by default
[15:41:34] <Yhg1s> Gurkenglas: the path to the python executable matters to Python, because it uses it to find its standard library, which in turn is used to find third-party modules.
[15:42:17] <Yhg1s> Gurkenglas: perhaps we shoudl take a step back. What is the actual problem you're trying to solve? What are you importing in jupyter that's failing?
[15:42:28] <Gurkenglas> import altair as alt
[15:42:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[15:42:53] <Yhg1s> Gurkenglas: and what is sys.path in jupyter, and what does '/usr/bin/python3.9 -c "import altair; print(altair)"' output?
[15:43:42] *** Quits: y1n (~y1n@84-115-65-210.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[15:44:01] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7) (Quit: Client closed)
[15:44:11] *** Joins: y1n (~y1n@84-115-65-210.wifi.dynamic.surfer.at)
[15:44:13] <Gurkenglas> ['/home/gurkenglas/gpt', '/home/gurkenglas/.vscode-server/extensions/ms-toolsai.jupyter-2021.6.999662501/pythonFiles', '/home/gurkenglas/.vscode-server/extensions/ms-toolsai.jupyter-2021.6.999662501/pythonFiles/lib/python', '/usr/lib/python39.zip', '/usr/lib/python3.9', '/usr/lib/python3.9/lib-dynload', '', '/home/gurkenglas/.local/lib/python3.9/site-packages', '/usr/local/lib/python3.9/dist-packages',
[15:44:14] <Gurkenglas> '/usr/lib/python3/dist-packages', '/home/gurkenglas/.local/lib/python3.9/site-packages/IPython/extensions', '/home/gurkenglas/.ipython'], /usr/bin/python3.9 -c "import altair; print(altair)
[15:44:20] <Yhg1s> Gurkenglas: please use a pastebin.
[15:44:27] <Gurkenglas> wrong paste at the end: ModuleNotFoundError
[15:44:40] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[15:44:49] <Yhg1s> Gurkenglas: okay! so the problem isn't that jupyter behave differently from /usr/bin/python3.9.
[15:44:56] <Yhg1s> Gurkenglas: why do you think altair should be importable?
[15:45:02] <Gurkenglas> i thought that was short enough, aight.
[15:45:26] <Yhg1s> Gurkenglas: it's not about length, it's about being able to read it, and refer back to it.
[15:45:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[15:46:04] <Gurkenglas> because i ran python3 -m pip install altair - you're right, I should have run python3.9 instead. Is there a safe way to find out whether my OS depends on python3?
[15:46:25] *** Joins: kmh_ (~kmh@p200300df5f198e006147b5ce666b84fa.dip0.t-ipconnect.de)
[15:46:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:46:56] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 272 seconds)
[15:47:46] <DillonB07> Gurkenglas: Not sure if this is relevant, but you can modify your .zrprofile to add an alias so when you run "python" it runs "python3.9"
[15:48:05] *** Quits: clawh_ (~clawh@185.244.214.60) (Remote host closed the connection)
[15:48:06] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[15:48:15] <Gurkenglas> will that affect other software that calls python?
[15:48:25] <DillonB07> Possibly
[15:48:28] <DillonB07> depends how it works
[15:48:36] <DillonB07> if it calls the actual version you have installed, then no
[15:48:46] <Yhg1s> Gurkenglas: what does 'which python3' say?
[15:48:49] <DillonB07> if it calls the "python" command then yes
[15:49:01] <Gurkenglas> Yhg1s, /usr/bin/python3
[15:49:07] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:49:10] <Gurkenglas> eh i suppose i should just call sudo apt-get remove python and if it breaks something reinstall the OS
[15:49:29] <Yhg1s> Gurkenglas: if it breaks something, it will tell you.
[15:49:40] <Yhg1s> But don't bother removing it. Just run python3.9 if you want 3.9. Or, even better, work in virtualenvs.
[15:49:42] *** Joins: nomic2 (~nomic@host86-146-217-198.range86-146.btcentralplus.com)
[15:50:02] *** Joins: driib5 (~driib@185.195.233.163)
[15:51:01] <Gurkenglas> eh i keep running into issues on accidentally using the wrong python over the weeks. adding an extra alternative python to use per project sounds like itll make that worse.
[15:51:03] *** Quits: driib (~driib@185.195.233.163) (Read error: Connection reset by peer)
[15:51:03] *** driib5 is now known as driib
[15:51:13] *** Joins: gggkmp (~gggkmp@221.219.70.176)
[15:51:27] *** Joins: Julian (~tos9@python/site-packages/Julian)
[15:51:39] <DillonB07> If you use Conda, you can specify the correct python for each project
[15:51:53] *** Joins: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa)
[15:51:58] <Yhg1s> Gurkenglas: there are plenty of tools to make it not worse, like telling jupyter to handle it for you.
[15:52:00] <DillonB07> and it'll auto install and run it
[15:52:01] <dreamer> pyenv++
[15:52:03] <dreamer> conda--
[15:52:11] <Yhg1s> dreamer: quite different tools, there.
[15:52:17] <Gurkenglas> why not just have one python
[15:52:20] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:2042:a71:4322:6233) (Ping timeout: 252 seconds)
[15:52:37] <Yhg1s> Gurkenglas: that's fine, but your OS is using /usr/bin/python3, so you can't remove it.
[15:52:38] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[15:52:48] <Gurkenglas> ah.
[15:52:55] <Yhg1s> Gurkenglas: and you can't have conflicting dependencies, or conflicting version requirements, for any of the things.
[15:53:01] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[15:53:08] <Yhg1s> Gurkenglas: so, really, using a virtualenv is a much better idea anyway.
[15:53:14] <Gurkenglas> what causes deflicting dependencies?
[15:53:17] <Gurkenglas> *con
[15:53:33] <Yhg1s> Gurkenglas: things you want to install, or use, that have different dependencies.
[15:53:37] <dreamer> Yhg1s: sure, but imo (ana)conda gets too many things wrong and tries to mess with the overal system too much
[15:53:55] <dreamer> I can recommend people enough to not use it and just use a virtualenv
[15:53:56] <Yhg1s> dreamer: and yet pyenv and conda are completely different tools. pyenv does not replace conda at all.
[15:53:59] <Gurkenglas> Yhg1s, yeah but what causes not being able to install all of them? modules being called the same?
[15:54:04] <Yhg1s> dreamer: also, virtualenv and pyenv, not the same thing.
[15:54:06] <dreamer> pyenv + pyenv-virtualenv should be enough
[15:54:08] <Gurkenglas> ill remember to introduce a venv once a project errors because of "conflicting dependencies", right?
[15:54:15] <Yhg1s> Gurkenglas: I'm not sure what part of 'conflicting dependencies' is not clear.
[15:54:17] <dreamer> Yhg1s: sure, pyenv to manage python versions, pyenv-virtualenv to manage virtual envs
[15:54:25] <dreamer> conda to ignore
[15:54:32] <Gurkenglas> Yhg1s, dependencies look like "have this", not like "dont have this" so why not just have a union of the things
[15:54:44] <Yhg1s> Gurkenglas: no, dependencies look like "this version of that, that version of this".
[15:54:51] <Gurkenglas> why not have both versions
[15:54:59] <Yhg1s> Gurkenglas: because they can't live side-by-side.
[15:54:59] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[15:55:09] <Yhg1s> Gurkenglas: when you do 'import foo', Python can only import one 'foo'.
[15:55:25] <Yhg1s> (it's not just about import, and not just about Python, though.)
[15:55:32] <DillonB07> dreamer: What do you have against conda?
[15:55:39] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[15:55:42] <Gurkenglas> but if the requirements say which version it needs then shouldnt it know to import that one?
[15:55:53] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[15:55:58] <Yhg1s> Gurkenglas: yes, sure. *That's what virtualenvs do*.
[15:56:01] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:56:12] <Yhg1s> Gurkenglas: you create a virtualenv with a requirements.txt, and it installs the right versions.
[15:56:37] <dreamer> DillonB07: I don't see a single reason why anyone should ever want to use it :)
[15:56:46] <DillonB07> I use it
[15:56:55] <Yhg1s> dreamer: the usual reason is "it's very difficult to compile a lot of C++ libraries correctly by hand"
[15:56:55] *** Joins: gggpkm (~gggpkm@60.10.23.164)
[15:57:03] <dreamer> DillonB07: and I've seen it mess up systems too much (although maybe that was anaconda, I dunno. been avoiding it ever since. i don't want some tool do automagic in my userspace)
[15:57:06] <gggpkm> python and js ,which is older age
[15:57:13] <Yhg1s> gggpkm: Python.
[15:57:25] <DillonB07> I just use it for venvs and installing the python version i want to use
[15:57:28] *** Quits: zamba (~marius@5.226.162.54) (Ping timeout: 272 seconds)
[15:57:47] <Gurkenglas> would venvs be necessary if import statements specified the version?
[15:57:50] <nedbat> gggpkm: wikipedia says JS first appeared 1995; Python appeared 1991.
[15:58:06] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[15:58:06] *** Joins: frost (~frost@59.71.241.179)
[15:58:56] <Yhg1s> Gurkenglas: it's difficult to say without seeing excactly how that would work. What if you don't specify the version? What if you have optional dependencies, which might conflict? What if you can work with many different versions of a library, how do you specify that? What if you specify an older version of a package in your import statement, does it work with a newer one?
[15:58:59] *** Joins: Nact (~l@host-85-27-124-83.dynamic.voo.be)
[15:59:11] *** Joins: wyclif (~wyclif@user/wyclif)
[15:59:15] <Yhg1s> Gurkenglas: these are very hard problems, and virtualenv is an easy solution that all the tooling supports.
[16:00:35] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[16:00:51] *** Joins: SteveP (~steve@76-216-123-158.lightspeed.tukrga.sbcglobal.net)
[16:01:07] <DillonB07> Gurkenglas: Literall just run "python3.9 -m venv ./venv" and then "source venv/bin/activate"
[16:01:18] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[16:01:20] *** Joins: AnotherTwinkle (~AnotherTw@37.111.205.150)
[16:01:25] <AnotherTwinkle> Hello!
[16:01:31] *** Quits: gggkmp (~gggkmp@221.219.70.176) (Ping timeout: 246 seconds)
[16:01:38] <DillonB07> Hi
[16:01:51] <AnotherTwinkle> It really feels surreal to use irc
[16:01:58] <nedbat> AnotherTwinkle: why surreal?
[16:02:09] <AnotherTwinkle> Because it's my first time trying it out
[16:02:21] <nedbat> AnotherTwinkle: welcome to the past/future! :)
[16:02:29] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[16:02:44] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[16:03:06] <AnotherTwinkle> Thank you! I usually use discord, which is inspired by this very chat system.
[16:03:32] <DillonB07> A benefit of discord is that you can see past messages
[16:03:43] <AnotherTwinkle> You can revoke that permission too
[16:03:55] <DillonB07> true
[16:04:07] <DillonB07> but it is a feature i want on IRC
[16:04:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[16:04:27] <AnotherTwinkle> You can configure discord to work as a pseduo-irc system
[16:04:31] <AnotherTwinkle> with compact mode and all
[16:04:43] <DillonB07> urgh compact
[16:05:02] <AnotherTwinkle> It's a pain, I know
[16:05:25] <nedbat> discord is hugely customizable.  The Python discord is a booming place if you haven't seen it.
[16:05:36] <AnotherTwinkle> I have seen pythondiscord
[16:05:44] <AnotherTwinkle> but I prefer to stay active in discord.py
[16:05:55] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:06:04] <DillonB07> not sure if I'm on pythondiscord
[16:06:10] <DillonB07> but i'm definitely on discord.py
[16:06:47] <AnotherTwinkle> Actually I am planning to make an irc client
[16:06:58] <AnotherTwinkle> it's always cool to er- make things your own way
[16:07:05] <DillonB07> Definitely
[16:07:15] <DillonB07> What platform would it be for?
[16:07:25] <AnotherTwinkle> command line
[16:07:28] <AnotherTwinkle> python, you see
[16:07:39] <DillonB07> Nice!
[16:07:42] <AnotherTwinkle> a barebones irc client, more like
[16:07:48] <AnotherTwinkle> Thanks!
[16:07:49] *** nomic2 is now known as nomic
[16:08:00] <DillonB07> Actually, that's a good idea. I might create a personal one as well
[16:08:11] *** Quits: SteveP (~steve@76-216-123-158.lightspeed.tukrga.sbcglobal.net) (Quit: This computer has gone to sleep)
[16:08:17] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[16:08:22] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[16:08:53] <AnotherTwinkle> Well for that I'll have to read through this rather old documentation
[16:09:22] *** Quits: gggpkm (~gggpkm@60.10.23.164) (Read error: Connection reset by peer)
[16:09:28] <AnotherTwinkle> and check if there's some library which has done the very abstracts already
[16:09:33] <AnotherTwinkle> can you ping people here?
[16:09:35] <DillonB07> https://pypi.org/project/irc/ might work
[16:09:36] <DillonB07> and yes
[16:09:45] <DillonB07> just type their name
[16:09:54] <AnotherTwinkle> I thought you had to use @
[16:09:59] *** Joins: rany (~rany@user/rany)
[16:10:03] *** Joins: abn (sid376310@id-376310.tinside.irccloud.com)
[16:10:05] <DillonB07> not on IRC
[16:10:14] <DillonB07> AnotherTwinkle: This pinged you
[16:10:24] <AnotherTwinkle> Cool.
[16:10:28] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[16:10:49] <AnotherTwinkle> I feel like I'm in the geek undergroud :P
[16:11:11] <DillonB07> ;)
[16:11:24] <AnotherTwinkle> This might help you- https://datatracker.ietf.org/doc/html/rfc1459#
[16:11:31] <AnotherTwinkle> and thanks for the lib
[16:11:42] <DillonB07> np
[16:12:19] <DillonB07> and ty
[16:12:21] <Yhg1s> AnotherTwinkle: FYI, that RFC is extremely out of date.
[16:12:27] <Yhg1s> (as mentioned at the top)
[16:12:45] <DillonB07> 1993 lol
[16:12:49] <AnotherTwinkle> Oh damn
[16:12:53] <DillonB07> that is old
[16:12:54] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[16:13:33] <DillonB07> https://stackoverflow.com/questions/4147457/irc-client-in-python
[16:14:10] <AnotherTwinkle> https://datatracker.ietf.org/doc/html/rfc2813 - this looks like the last complete version
[16:14:36] *** Quits: Obo (~roberto@94.191.137.180.mobile.tre.se) (Read error: Connection reset by peer)
[16:15:19] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[16:16:07] <DillonB07> I found something called Urk.... - You might want to take inspiration from it: https://github.com/madewokherd/urk
[16:16:20] <DillonB07> though its from 2016
[16:16:36] *** Joins: SteveP (~steve@76-216-123-158.lightspeed.tukrga.sbcglobal.net)
[16:16:42] <AnotherTwinkle> yeah python 2
[16:16:45] <AnotherTwinkle> looks good tho
[16:16:58] <squirrel> you might consider using a language other than python for user interfaces
[16:17:12] <DillonB07> maybe a web client
[16:17:20] <DillonB07> uses python for the code and some html to make it look nice
[16:17:30] <DillonB07> of course, you'll need a little js to run the python
[16:17:39] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[16:17:44] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[16:18:04] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[16:18:04] <DillonB07> squirrel: tkinter does exist. mighe be possible with that
[16:18:18] *** Joins: clawh (~clawh@185.244.214.60)
[16:18:40] *** Quits: AnotherTwinkle (~AnotherTw@37.111.205.150) (Read error: Connection reset by peer)
[16:19:00] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[16:19:33] *** Quits: candyman (~candyman@user/candyman) (Remote host closed the connection)
[16:20:05] <squirrel> this is more to do with the fact that you will probably want real threads with UI
[16:20:21] *** Joins: Obo (~roberto@122.red-83-38-248.dynamicip.rima-tde.net)
[16:20:41] *** Quits: SteveP (~steve@76-216-123-158.lightspeed.tukrga.sbcglobal.net) (Client Quit)
[16:21:07] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[16:21:11] <Yhg1s> Good news! Python's threads are real threads, and GUIs is one of the few places where they actually make sense (because in general, GUI libraries rely on them).
[16:22:10] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 246 seconds)
[16:22:39] *** Joins: AnotherTwinkle (~AnotherTw@37.111.248.231)
[16:22:52] <AnotherTwinkle> Sorry for that, my internet went down
[16:23:18] *** Quits: clawh (~clawh@185.244.214.60) (Ping timeout: 252 seconds)
[16:23:20] *** Joins: clawh_ (~clawh@185.244.214.60)
[16:23:33] <AnotherTwinkle> how do direct messages work here
[16:23:41] <AnotherTwinkle> a seperate channel?
[16:23:51] <Yhg1s> AnotherTwinkle: it depends on your client where they show up.
[16:24:59] <DillonB07> For KVIrc I just double click a user
[16:25:05] <AnotherTwinkle> What's the default way, assuming that the client was not specially configured for direct messages?
[16:25:10] *** Joins: candyman (~candyman@user/candyman)
[16:25:19] <AnotherTwinkle> Or does the client *have* to implement it
[16:25:22] <DillonB07> ./msg
[16:25:24] <DillonB07> I guess
[16:25:27] <Yhg1s> AnotherTwinkle: there isn't a 'default way'. It's a type of message sent by the server to the client. The client has to decide what to do with it.
[16:25:41] <AnotherTwinkle> Makes sense then.
[16:26:54] <AnotherTwinkle> Is there a bot here?
[16:27:03] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: Textual IRC Client: www.textualapp.com)
[16:27:08] <DillonB07> what sort of bot?
[16:27:12] <Yhg1s> AnotherTwinkle: not really.
[16:27:31] <AnotherTwinkle> I thought irc bots were a thing
[16:27:35] <DillonB07> Yhg1s: litharge
[16:27:41] <Yhg1s> DillonB07: yes, hence 'not really'.
[16:27:43] <nedbat> AnotherTwinkle: they are, just not so much here.
[16:27:59] *** Quits: Obo (~roberto@122.red-83-38-248.dynamicip.rima-tde.net) (Ping timeout: 252 seconds)
[16:28:09] <AnotherTwinkle> Oh I see...
[16:29:18] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:29:24] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 268 seconds)
[16:29:39] *** Joins: PdimH (~pdimh@user/pdimh)
[16:30:44] *** Joins: kostkon (~androirc@ob21aa.static.otenet.gr)
[16:31:20] *** Joins: mrwick (~mrwick@user/mrwick)
[16:31:56] *** Joins: pnoud (~pnoud@user/pnoud)
[16:32:01] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[16:32:14] *** Joins: wyclif (~wyclif@user/wyclif)
[16:32:46] *** Joins: r2d2 (~r2d2@user/r2d2)
[16:34:19] <DillonB07> What does litharge actually do?
[16:34:36] <Yhg1s> DillonB07: it provides some services to the ops.
[16:34:40] <DillonB07> i see
[16:35:57] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:23] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:40] *** Quits: isekaijin (~pyon@user/pyon) (Quit: WeeChat 3.2)
[16:36:46] *** Joins: gggkmp_ (~gggkmp@221.219.77.87)
[16:36:53] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[16:37:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[16:38:14] <cvmn> can argparse specify that an int must be positive?
[16:38:37] *** Joins: ano (~weechat@user/ano)
[16:38:38] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 265 seconds)
[16:39:51] *** Quits: someguy123 (~someguy@user/someguy123) (Read error: Connection reset by peer)
[16:39:52] <DX099> anyone got any clue regarding a  "The input file name 'psycopg2_binary-2.9.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl' contains an invalid platform part: 'manylinux_2_17_x86_64'" error? my PIP is up to date, on Linux 64bit system with glibc > 2.17
[16:39:52] *** DillonB07 is now known as int
[16:40:13] <DX099> I fail to understand what's going on
[16:40:22] *** Joins: someguy123 (~someguy@user/someguy123)
[16:41:02] <int> DX099: Could be that the .whl file isn't supported by your OS
[16:41:05] <int> I had that issue once
[16:41:09] *** int is now known as DillonB07
[16:41:20] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::f245)
[16:41:24] <Julian> DillonB07:
[16:41:34] <DillonB07> ?
[16:42:14] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[16:42:24] <Julian> sorry, mistab
[16:43:02] <Julian> DX099: what version of pip is this then?
[16:43:12] <tgamblin> sorry all about the logging spam, looks like something in my setup is malfunctioning
[16:43:36] <DillonB07> Err tgamblin there isn't any logging spam
[16:43:51] <DillonB07> Maybe just on your client ;)
[16:43:54] *** Quits: VaniaPy (~VaniaPy@46.12.210.52.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[16:43:56] *** Quits: y1n (~y1n@84-115-65-210.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[16:44:11] <tgamblin> DillonB07: Ah, okay, probably. My backup nick got banned in another channel last night because of it, so wasn't sure where it happened
[16:44:24] *** Joins: y1n (~y1n@84-115-65-210.wifi.dynamic.surfer.at)
[16:45:05] *** Quits: ionface (~ionface@user/ionface) (Read error: Connection reset by peer)
[16:45:07] <AnotherTwinkle> there's login spam on my end too
[16:46:02] <Yhg1s> AnotherTwinkle: it's a busy channel. There's always people joining and leaving.
[16:46:02] <DillonB07> That's just normal people joining and leaving right?
[16:46:14] *** Quits: palasso (~palasso@user/palasso) (Ping timeout: 252 seconds)
[16:46:21] <AnotherTwinkle> What d'you mean by login spam then
[16:46:21] <Yhg1s> AnotherTwinkle: you may be able to configure your client to not show it.
[16:46:35] <Yhg1s> AnotherTwinkle: presumably tgamblin meant them leaving and joining repeatedly.
[16:46:41] *** Joins: ionface (~ionface@user/ionface)
[16:46:47] *** Joins: palasso (~palasso@user/palasso)
[16:46:47] <AnotherTwinkle> oh
[16:46:49] *** Quits: therealjumbo (~zignegoj@mail.hedonline.com) (Read error: Connection reset by peer)
[16:46:58] *** Joins: therealjumbo (~zignegoj@mail.hedonline.com)
[16:47:16] <DX099> @Julian I'm  on PIP 21.1.3
[16:47:45] <tgamblin> Yhg1s: Correct
[16:49:01] <DX099> @DillonB07, perhaps but how do I solve that problem? I thought the many linux stuff was designed precisely to avoid these problem. I have too many libraries this happens with to them all under NO_BINARY
[16:49:40] *** Joins: katperson (~katperson@vmi600023.contaboserver.net)
[16:49:42] *** Joins: wyclif (~wyclif@user/wyclif)
[16:49:45] <DillonB07> Depends where you downloaded it from. There are specific .whl files that only work on a specific OS
[16:49:46] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[16:50:23] <DX099> the OS part here says "manylinux" though?
[16:50:36] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f955-62.dhcp.inet.fi)
[16:50:37] <DX099> and it was fetched from PIP upstream
[16:50:59] *** Joins: foobaz212 (~foobaz212@2.49.11.81)
[16:51:40] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[16:51:43] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[16:52:34] <Julian> DX099: Wait so you've manually downloaded a whl file? Why aren't you just installing it normally?
[16:52:38] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[16:53:34] *** Quits: gggkmp_ (~gggkmp@221.219.77.87) (Ping timeout: 258 seconds)
[16:53:59] *** Joins: haroon (~haroon@gw.wmd.de)
[16:54:31] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 256 seconds)
[16:55:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[16:55:55] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (Remote host closed the connection)
[16:56:13] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 256 seconds)
[16:56:20] *** Joins: Falc (~Falc@2a02:2788:1008:562:8c64:afde:4dee:9d6a)
[16:56:52] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[16:57:01] *** Quits: SoF (~skius@user/skius) (Quit: Ping timeout (120 seconds))
[16:57:02] *** Joins: thekingofbandit (thekingofb@user/thekingofbandit)
[16:57:30] *** Joins: SoF (~skius@user/skius)
[16:58:25] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[16:58:38] <haroon> Hello I'm not really familiar with python, but I would like to use this command to generated some salted hashes for my passwords. Can someone educate me on how this works/what it exactly does and how I can give it a file with multiple passwords. Thanks. python -c "from passlib.hash import sha256_crypt; import getpass;
[16:58:39] <haroon> print(sha256_crypt.using(rounds=5000).hash(getpass.getpass()))" python -c "from passlib.hash import sha256_crypt; import getpass; print(sha256_crypt.using(rounds=5000).hash(getpass.getpass()))"
[16:58:55] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f955-62.dhcp.inet.fi) (Quit: WeeChat 3.0.1)
[16:59:14] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 252 seconds)
[16:59:28] *** Joins: brabrax (~brabrax@user/brabrax)
[16:59:51] *** Joins: cdown_ (~cdown@89.32.122.5)
[17:00:24] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.2)
[17:01:28] <Falc> Does anyone perchance know of a tool that allows you to easily manage package requirements for a project (ie. has some nice command-line options + persistence) that does not go as far as pipenv or poetry in insisting it needs to create a wholly separate venv?
[17:02:10] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 240 seconds)
[17:02:23] <Falc> haroon: first of all, as it says in the topic, "Don't paste, use https://bpa.st/+python"
[17:02:25] <raxor2k> im trying  to simply as possible emulate the code from C, but im getting this IndexError "list index out of range".. any help please? https://bpa.st/ZETQ
[17:02:37] <Falc> haroon: because right now your code is just unreadable
[17:02:50] <Julian> Falc: it depends what you mean by "manage"
[17:02:54] <Julian> but possibly pip-tools is what you want
[17:03:30] <Yhg1s> raxor2k: 'int readings[numReadings];' in C defines an array of integers of a specific size. 'readings = [numReadings]' in Python defiens a list of length 1, containing the int. It's not the same thing.
[17:03:32] <grawity> raxor2k: [x] doesn't declare a list of size [x], it declares a list of size 1 with the only element being x
[17:03:45] <grawity> raxor2k: it's like if you did "int readings[1] = { numReadings };" in C
[17:04:13] <Yhg1s> (your C code is also using uninitialised memory, which is not possible with Python lists.)
[17:04:23] <grawity> raxor2k: what you probably want is, I have no idea about how numpy does it, but [0]*numReadings would work for a regular list...
[17:04:24] <Falc> Julian: I was looking at it, but not really. I want the ease of doing "poetry add <package>" which installs the package and saves it in the persistence file.
[17:06:05] <raxor2k> grawity : so: "readings : list = [0]*numReadings ?"
[17:06:37] <Julian> Falc: There isn't a widely used tool that works that way.
[17:06:57] *** Quits: AnotherTwinkle (~AnotherTw@37.111.248.231) (Remote host closed the connection)
[17:07:09] <Julian> (I'm not sure personally that I ever really liked that part of npm -- I don't really mind adding a line of text to a file, and then after that running `pip-tools -U` is enough to regenerate the lockfile)
[17:07:36] <Julian> But possibly a less widely used packaging tool has that functionality if you're keen on it.
[17:07:51] *** Joins: wyclif (~wyclif@user/wyclif)
[17:08:40] <grawity> raxor2k: yeah - gives you a 0-initialized list with numReadings elements
[17:08:43] *** Joins: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com)
[17:08:56] <Falc> Julian: Well, I mean, if it doesn't exist I'll write it myself. It's just having to handle edge cases that's going to be a bother
[17:09:27] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[17:10:06] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Read error: Connection reset by peer)
[17:10:11] <Julian> Falc: it'd appear pdm can do that: https://github.com/pdm-project/pdm#quickstart
[17:10:16] <raxor2k> grawity: so this then? https://bpa.st/TFGA
[17:10:28] <raxor2k> doesnt seem correct..
[17:11:38] <raxor2k> oh sorry my bad
[17:11:50] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[17:11:51] <grawity> is median filtering the same thing as "rolling average"
[17:12:06] <raxor2k> grawity: yes
[17:12:30] *** Joins: SteveP (~steve@76-216-123-158.lightspeed.tukrga.sbcglobal.net)
[17:12:31] *** Quits: foobaz212 (~foobaz212@2.49.11.81) (Quit: Client closed)
[17:12:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[17:12:52] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[17:13:38] <Falc> Julian: thanks, that seems promising (as does Pyflow which I found mentioned on the PDM page)
[17:14:02] *** Joins: cre (~x@p5b2ca3d4.dip0.t-ipconnect.de)
[17:14:29] *** Quits: DillonB07 (~DillonB07@cpc123410-leic20-2-0-cust892.8-1.cable.virginm.net) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:14:44] *** Joins: skapata (~Skapata@user/skapata)
[17:14:52] *** Quits: dulanic (~dulanic@47.187.147.69) (Quit: The Lounge - https://thelounge.chat)
[17:14:58] *** Quits: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa) (Ping timeout: 240 seconds)
[17:15:10] *** Joins: dulanic (~dulanic@47.187.147.69)
[17:15:42] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[17:18:40] <grawity> raxor2k: in that case looks ok, but *adding* the sum of all readings to self.total looks wrong
[17:18:57] <gggkmp_> if one programming language treat function as the first citizen ,could it be called functional programming language ?
[17:19:20] *** gggkmp_ is now known as gggkmp
[17:19:55] <grawity> and, doesn't seem right that self.average is only recalculated every 5th reading...
[17:19:58] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:20:04] <grawity> (I don't know math stuff, though.)
[17:21:31] *** Joins: gareppa (~gareppa@user/gareppa)
[17:22:01] <bjs> gggkmp: if you want,  the names are not so useful in practice because is Python a "functional" language?
[17:22:25] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:22:36] *** Quits: r2d2 (~r2d2@user/r2d2) (Quit: bye)
[17:22:46] <grawity> raxor2k: what does 'self.dist' do by the way?
[17:22:53] <gggkmp> bjs not make sense
[17:23:03] <gggkmp> :)
[17:23:03] <bjs> gggkmp: what doesn't make sense
[17:23:18] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[17:23:25] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 246 seconds)
[17:24:03] <gggkmp> why function should be the first citizen
[17:24:29] <bjs> gggkmp: do you mean "first class citizen"?  that phrase just means you can pass functions around as arguments to other functions or store functions in variables
[17:24:33] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[17:24:50] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[17:24:52] <gggkmp> this is not a problem ,
[17:25:06] <bjs> gggkmp: that's just what that phrase means.
[17:25:11] <AhmedAmerican> I've been struggling with my code for few hours yet. line# 74 & 75 https://bpa.st/72CA#1L74 , am not sure what's going on here, the scenario is, am calling an API where i scrape list of categories, i check each category items, if it's one page, so i scrape it direct. and if it's more than one page so i loop over the pages. i do have one send/receive channel. everything works fine if i just don't use `if total > 60: part` :(
[17:25:23] *** Joins: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa)
[17:25:30] <gggkmp> bjs the phrease is not make sense :)
[17:25:46] *** Joins: wyclif (~wyclif@user/wyclif)
[17:26:06] <gggkmp> a variable can also pass as argument
[17:26:27] <bjs> gggkmp: yes exactly, that's what the phrase means. It's saying functions aren't special
[17:26:43] <bjs> gggkmp: you can say `some_func(some_other_func)`  or `a_variable = some_function`
[17:27:17] <gggkmp> what does this relate with first citizen :)
[17:27:20] <bjs> in some languages you are not allowed to do that,  in those languages functions are special,  functions are not "first-class" citizens in the language.  It's a terrible phrase but sadly it's what people say
[17:27:35] <bjs> gggkmp: it's not "first citizen" it's "first-class citizen"
[17:27:37] *** Joins: rememberYou (~someone@user/rememberyou)
[17:27:47] <bjs> as in, not second-class, not of a lower status
[17:28:26] <hodapp> and it's often more useful to refer to whether a function is a value that can be passed around or stored
[17:29:37] <grawity> raxor2k: anyway, something like this I guess https://bpa.st/MYXA
[17:30:14] *** Quits: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa) (Ping timeout: 252 seconds)
[17:30:15] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[17:30:19] <gggkmp_> bjs I guess, that means the class constructors is functions
[17:30:32] <bjs> gggkmp_: no, it just means that functions themselves are values
[17:30:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[17:30:46] *** Quits: phlixi (~phlixi@ppp-46-244-173-22.dynamic.mnet-online.de) (Ping timeout: 246 seconds)
[17:30:48] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 272 seconds)
[17:30:54] <bjs> gggkmp_: like how 42 is a value, it's an int, but it's just a value. You can put 42 in a variable. You can pass 42 to a function. a function can return 42.
[17:30:58] *** Joins: phlixi_ (~phlixi@ppp-46-244-161-94.dynamic.mnet-online.de)
[17:30:58] *** Quits: shabius (~shabius@45.15.19.196) (Remote host closed the connection)
[17:31:23] *** Joins: shabius (~shabius@2a0e:1c80:2:1021::1002)
[17:31:41] <bjs> gggkmp_: in Python `sum` is a function. You can `sum([1,2,3])`. But sum is itself just a value. You can put `sum` in a variable. You can pass `sum` to a another function, you can return `sum` from a function.
[17:32:04] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[17:32:05] <gggkmp_> I know this is just a name bind
[17:32:20] *** gggkmp_ is now known as gggkmp
[17:32:39] <hodapp> not really, there is an actual value being bound to that name
[17:32:46] <hodapp> and it doesn't need a name (see: lambdas)
[17:32:51] <bjs> gggkmp_: but the point is that the value the name "sum" is binding is a function. Python doesn't really care that the value happens to be a function,  that's the point
[17:32:56] <bjs> functions are values like any else.
[17:33:57] <bjs> gggkmp: you can go `my_brand_new_func = (lambda x: x+1)` then `def call_a_func(f): print(f(42))` then `call_a_func(my_brand_new_func)` and it will print 43.  Here I make a new function (using `lambda`, Python also has `def` to make new function values). I put it in a variable. I pass it to a function. etc
[17:34:42] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 244 seconds)
[17:35:18] <gggkmp> so python is also one functional programming language
[17:35:33] *** Joins: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa)
[17:35:52] <hodapp> 'functional' doesn't have a strict definition, but simply having functions as values isn't really enough to call a language functional
[17:36:05] *** Joins: skapata (~Skapata@user/skapata)
[17:36:17] <gggkmp> ah
[17:37:24] <hodapp> e.g. even C lets you treat functions as values by way of function pointers, but (for instance) it doesn't have anything resembling closures the way Python does
[17:38:51] <bjs> gggkmp: depends on your definition,  that's why I said the name probably doesn't help you so much
[17:38:58] <bjs> gggkmp: lots of modern languages are "functional" in that they have functions
[17:39:20] <gggkmp> bjs ok thanks
[17:39:22] <bjs> but people don't think Python or Java when you say functional programming language to them. They think of Scheme or Lisp or maybe some ML derivitive
[17:40:08] *** Quits: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa) (Ping timeout: 252 seconds)
[17:40:50] <gggkmp> bjs what is the age  should one stop his programming career
[17:41:08] <bjs> gggkmp: depends on who you are
[17:41:34] <bjs> There are certainly people who are programmers up until the day they die
[17:42:26] *** Joins: timkofu (~timkofu@user/timkofu)
[17:42:34] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[17:43:08] <grawity> I don't understand ML-style languages, so I mostly associate "functional programming" with the ability to do filter() and map() conveniently
[17:43:19] *** Joins: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa)
[17:43:22] *** Quits: y1n (~y1n@84-115-65-210.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[17:43:30] *** Joins: twobitsprite (~twobitspr@107.13.51.62)
[17:43:34] <grawity> so that rules out python >_>
[17:44:00] *** Joins: y1n (~y1n@84-115-65-210.wifi.dynamic.surfer.at)
[17:44:02] <raxor2k> grawity: the little issue i have now is that when i add a new number after 5 elements, the first index is pushed out, how can i pushe the last one out instead? https://bpa.st/P6EA
[17:44:02] <hodapp> ML-style languages definitely are stricter about it and make the type system a pretty heavy part
[17:44:06] <gggkmp> bjs :  so easily   get  tired   after 35 years old
[17:44:58] *** Quits: shabius (~shabius@2a0e:1c80:2:1021::1002) (Remote host closed the connection)
[17:45:05] *** Joins: wyclif (~wyclif@user/wyclif)
[17:45:07] *** Quits: ferz (~ferz@146-241-199-234.dyn.eolo.it) (Ping timeout: 246 seconds)
[17:45:14] <bjs> raxor2k: sounds like you want a ring buffer
[17:45:23] *** Joins: shabius (~shabius@2a0e:1c80:2:1021::1002)
[17:45:27] <grawity> raxor2k: that seems normal to me, as I understand you want to push out the *oldest* index out, and the list does have them oldest-first
[17:45:44] *** Quits: SteveP (~steve@76-216-123-158.lightspeed.tukrga.sbcglobal.net) (Quit: This computer has gone to sleep)
[17:45:48] <xaltsc> Hey, is there a standard folder when distributing Python code where I should put the extras (like examples, default files, etc.) ?
[17:45:53] <bjs> yeah that seems reasonable to me too
[17:46:29] <grawity> [I mean, you could self.readings.append() and self.readings.pop(0), or even use an actual collections.deque instead of a list... but the current handling of 'index' looks okay.]
[17:47:28] *** Quits: shabius (~shabius@2a0e:1c80:2:1021::1002) (Remote host closed the connection)
[17:47:34] <raxor2k> grawity: as you see here, i add the number "6", but this number is pushed to the first index, which is wrong, i want it to be pushed to the last one: https://bpa.st/3RQA
[17:47:40] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:47:59] *** Joins: naan (~Naan@user/naan)
[17:48:17] *** Joins: ray (~ray@user/re)
[17:48:35] <grawity> why is that wrong
[17:49:25] *** Joins: VaniaPy (~VaniaPy@46.12.210.52.dsl.dyn.forthnet.gr)
[17:49:27] *** Joins: pycurious (~Adium@user/pycurious)
[17:49:40] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 246 seconds)
[17:49:45] <grawity> you still have {2 3 4 5 6}, regardless of what order they're in
[17:49:54] <raxor2k> grawity: so youre  telling me that going from this: "[1, 2, 3, 4, 5]"    to  this : "[6, 2, 3, 4, 5]" is correct ?
[17:50:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[17:50:30] <grawity> do you want [2, 3, 4, 5, 6]?
[17:51:04] *** Quits: anas (~anas@196.235.5.143) (Ping timeout: 246 seconds)
[17:51:16] <grawity> both will give you the same result anyway
[17:51:38] *** Joins: NeoCore (~neocore@217.138.207.156)
[17:51:45] *** Quits: jazzy (~jaziz@2600:380:8653:59ba:edff:946b:89ad:7dd5) (Ping timeout: 256 seconds)
[17:52:01] <raxor2k> grawity: ye youre right
[17:52:13] <grawity> specifically, it's what the C code did
[17:52:35] <grawity> if you add one more item you'll have [6, 7, 3, 4, 5] and so on
[17:53:14] <raxor2k> grawity: ok thats fine, but the average numbers doesnt update itself?
[17:53:25] <grawity> because you've put it under the `if` and it shouldn't be
[17:53:34] <grawity> something like this https://bpa.st/MYXA
[17:53:49] *** Quits: PdimH (~pdimh@user/pdimh) (Quit: May we meet again)
[17:54:45] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.2)
[17:55:20] <raxor2k> grawity: thank you president
[17:55:20] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[17:55:24] <raxor2k> i was dumb¨
[17:56:05] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 252 seconds)
[17:56:50] *** Joins: pycode (~pycode@2001:b07:5d28:551:6ec3:a669:57be:8f6e)
[17:56:59] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[17:57:38] *** Quits: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa) (Ping timeout: 252 seconds)
[17:59:11] *** Joins: akk (~akk@174-28-112-132.albq.qwest.net)
[17:59:17] *** Joins: ray (~ray@user/re)
[17:59:21] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 265 seconds)
[17:59:23] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[17:59:46] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:59:47] <ThiefMaster> python_requires set to ~=3.9 will allow 3.9, 3.10, etc., just no 4.0, right?
[18:00:19] <ATAD> If you're looking to add things to the beginning of a "list", you should really use collections.deque for that; it has the appendleft() and popleft() methods, and its more efficient for that kind of thing
[18:00:27] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[18:01:00] <grawity> sounds like appendright/popleft in this case (a circular buffer)
[18:01:08] *** Joins: ferz (~ferz@146-241-211-60.dyn.eolo.it)
[18:01:20] <ATAD> deque is a linked list, I think it's "circular" too
[18:01:35] <ATAD> it has methods like "rotate()" too
[18:02:10] *** Joins: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa)
[18:02:12] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[18:02:22] <ATAD> like I said, if you're wanting to add or remove things from the beginning of a "list", deque is the most efficient way to do that
[18:03:12] *** Joins: wyclif (~wyclif@user/wyclif)
[18:04:14] <ATAD> even adding or removing things from the middle of a deque is pretty efficient too; not as efficient as from the "ends", but still, moreso than compared to a list
[18:04:49] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[18:05:05] <grawity> how does it compare to just overwriting list indices though? e.g. items[idx % num] = value
[18:05:23] *** Joins: srhm (~ascii@user/srhm)
[18:06:05] <ATAD> well, I would think that would be O(N) to overwrite the entire list again. Appending things to either end of a deque should be O(1)
[18:06:21] <grawity> hmm, why would it overwrite the entire list for this
[18:06:49] <ATAD> iterating over a whole list is overwriting it, isn't it?
[18:06:54] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[18:06:56] <ATAD> maybe I'm not understanding what you mean
[18:06:58] <grawity> there's no iteration
[18:07:04] <ATAD> oh I see
[18:07:04] <grawity> just changing a single item
[18:07:14] <ATAD> then yes, that's fast
[18:07:27] <ATAD> for a regular list, replacing a single index with a different value is O(1)
[18:07:28] <grawity> more C-like and less understandable than deque, sure
[18:08:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[18:08:31] *** Joins: phlixi (~phlixi@tmo-082-160.customers.d1-online.com)
[18:08:58] *** Quits: phlixi_ (~phlixi@ppp-46-244-161-94.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[18:09:00] <ATAD> it's when you start inserting things into the beginning or middle of a list that you run into efficiency problems, because those operations on a list have to "move" every subsequent value "over" by 1 space/slot
[18:09:02] *** Quits: raxor2k (~raxor2k@158.39.193.136) ()
[18:09:27] *** Quits: timkofu (~timkofu@user/timkofu) (Quit: leaving)
[18:09:35] <grawity> same goes for pop(0) moving stuff over, I assume?
[18:09:37] *** Joins: Pandadub (~Barones@2804:7f3:8986:9284:4fb0:e185:8c88:990e)
[18:09:42] <domhnall> hm, somebody was paying attention in CS
[18:09:44] *** Joins: timkofu (~timkofu@user/timkofu)
[18:09:59] <ATAD> yep, pop(0) has it move stuff...but a deque doesn't have that issue, because it's a linked list
[18:10:34] <domhnall> linked list implemented with a que... vs a stack
[18:10:37] <ATAD> so list.pop(0) is the same as deque.popleft(), but deque.popleft() doesn't have to move anything, so it's O(1) and more efficient
[18:10:43] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[18:10:58] *** Joins: Doffi (~doffi@91.132.197.188)
[18:11:11] *** Joins: sn1tch3r_ (~sn1tch3r@185.153.176.212)
[18:12:05] *** Quits: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[18:12:44] <bjs> grawity: overwriting the list indices works good if you have a fixed size list, but you have to manage the things yourself
[18:12:51] <ATAD> so really, it depends on what you want to do...lists are more efficient at replacing a single index with a different value, deques are more efficient at appending or popping items at both "ends"; with a trade-off being that single-index value replacements there are slower (but still "decent", probably)
[18:12:56] *** Joins: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[18:12:59] <bjs> deque is a doubly-linked list so you don't have fast access to the "middle"
[18:13:09] <ATAD> right
[18:13:15] <bjs> well actually deque is a little more efficient than that, but only a little
[18:13:41] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Ping timeout: 252 seconds)
[18:14:14] *** Quits: timkofu (~timkofu@user/timkofu) (Ping timeout: 268 seconds)
[18:15:11] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.2)
[18:15:38] *** Joins: ray (~ray@user/re)
[18:17:22] *** Quits: Doffi (~doffi@91.132.197.188) (Ping timeout: 240 seconds)
[18:17:32] *** Joins: LiftLeft (~LiftLeft@154.21.114.118)
[18:17:58] *** Joins: Doffi (~doffi@91.132.197.188)
[18:18:33] *** Quits: phlixi (~phlixi@tmo-082-160.customers.d1-online.com) (Ping timeout: 268 seconds)
[18:18:39] *** Joins: phlixi_ (~phlixi@ppp-46-244-161-245.dynamic.mnet-online.de)
[18:20:24] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[18:21:01] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 268 seconds)
[18:21:07] *** Joins: wyclif (~wyclif@user/wyclif)
[18:21:43] <Exa> Hi, I'm looking for an alternative for cprofile that would let me save the entire recursive call tree of the body of a function and the execution time of everything called.  cprofile seems to regroup things and the codebase I need to profile use a lot of functions called everywhere or there are decorators hiding the real functions called.  Do you know such profiler?  Thanks.
[18:22:02] *** Joins: PdimH (~pdimh@user/pdimh)
[18:22:59] *** Quits: JavaBean (~JavaBean@user/javabean) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[18:23:01] <Falc> What is the importlib.import_module() equivalent of doing "from . import timeweb"? I'm struggling to wrap my head around what I'm expected to put as package...
[18:23:59] <SnoopJ> Falc, I've been messing around with something similar (using zipimport), you might try __name__
[18:24:05] *** Quits: nomic (~nomic@host86-146-217-198.range86-146.btcentralplus.com) (Quit: Leaving)
[18:25:14] *** Quits: sn1tch3r_ (~sn1tch3r@185.153.176.212) (Ping timeout: 252 seconds)
[18:25:39] *** Joins: bambams__ (~bambams@S0106a84e3f66f543.su.shawcable.net)
[18:26:01] *** Joins: brickfat (~brickfat@user/brickfat)
[18:26:06] *** Quits: kmh_ (~kmh@p200300df5f198e006147b5ce666b84fa.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:26:10] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 240 seconds)
[18:26:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[18:27:15] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[18:28:19] <mrtnt> I have a following grep-like code in my script: https://paste.debian.net/plainh/ea8f28cb To my surprise, re.search does not throw an exception if the "file" is a binary file. Does it work in a way that internally my 'abcd' string is decoded to binary and then this binary list of ones and zeros is searched from the binary file?
[18:28:32] *** Joins: qlixed (~qlixed@181.44.129.13)
[18:30:16] *** Joins: argento (~argent0@168-227-97-29.ptr.westnet.com.ar)
[18:30:41] <Falc> mrtnt: The term "binary file" does not usually mean it's ones and zeroes
[18:31:25] <SnoopJ> speaking of messing around with zipimport: I'm loading a module from a .zip at runtime, puzzling over what kind of interface I want. Right now I basically do `zi = zipimporter("/path/to/some.zip"); m = zi.load_module("module_name_from_config"; data = m.make_data()`. A particular name in the module is all I really *need* right now, but I'm wondering if there's a more structured way that is worth
[18:31:27] <SnoopJ> pursuing (e.g. an upstream base class, a Protocol, or maybe pluggy?)
[18:31:36] *** naan is now known as Naan
[18:32:40] <Falc> mrtnt: every file is stored, in essence, as ones and zeroes. Now, "text" files simply mean that a "text" reader should read the first 8 bits and interpret them according to a given table, resulting in a letter
[18:32:47] *** Joins: pnoud (~pnoud@user/pnoud)
[18:33:17] <Falc> mrtnt: the expectation being that after getting all the letters, a usable "text" appears
[18:33:31] *** Quits: MemoriaVetusta (~MemoriaVe@156.146.63.22) (Remote host closed the connection)
[18:33:33] *** Joins: de-facto (~de-facto@user/de-facto)
[18:33:56] *** Quits: y1n (~y1n@84-115-65-210.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[18:34:02] *** Quits: kai6 (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 252 seconds)
[18:34:05] <SnoopJ> The idea is that these modules (which define and instantiate PyTorch classes for use upstream) are hot-swappable, and we can add new functionality to this product without bumping its version or altering the container, so I've been avoiding the obvious "use an installable package" route for that reason.
[18:34:28] <Falc> mrtnt: now a "binary" file is not stored in any different way, it's just that it is understood that if you were to interpret them as text, you'd get nonsense
[18:34:46] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 272 seconds)
[18:35:15] <Exa> mrtnt: everything is always stored as binary, it's just that this binary data is parsed in someway that a function expects a certain "type" and works with it
[18:35:18] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[18:35:18] <Falc> mrtnt: but you can absolutely open them as text and grep on the resulting nonsense...
[18:35:20] <SnoopJ> mrtnt, that open() decodes the file, the resulting file object (`f`) contains text.
[18:35:22] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[18:36:19] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[18:37:37] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[18:37:46] *** Joins: wyclif (~wyclif@user/wyclif)
[18:37:46] <The-Compiler> Falc: that's not entirely correct - for many common encodings (ASCII, UTF-8, UTF-16), there are lots of bytes (or combinations of bytes) which aren't valid
[18:38:00] <The-Compiler> well, probably UTF-32 too
[18:38:33] <Falc> The-Compiler: I wasn't about to complicate things more than needed
[18:39:25] <SnoopJ> "that file object is in text mode" will suffice
[18:40:41] <Falc> SnoopJ: There was clearly a misunderstanding there about what a "binary file" actually is, so I do not believe that would have sufficed
[18:41:03] <SnoopJ> Falc, apparently
[18:41:09] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[18:41:24] *** Joins: SteveP (~steve@99-98-103-29.lightspeed.tukrga.sbcglobal.net)
[18:41:25] *** Quits: phlixi_ (~phlixi@ppp-46-244-161-245.dynamic.mnet-online.de) (Remote host closed the connection)
[18:41:36] <Falc> SnoopJ: now if only we got some feedback...
[18:42:13] *** Joins: brabrax (~brabrax@user/brabrax)
[18:42:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[18:43:11] <Falc> (On an unrelated note, allow me to vent: damn you chicken-and)egg problems!)
[18:45:07] <mrtnt> ok, thanks for explaining this! However, if the open() decodes the file, then why doesn't open() throw an exception or error if the file is a binary garbage generated with "dd if=/dev/urandom of=binaryfile count=1"?
[18:45:32] *** Quits: Deep6 (~Deep6@fixed-187-191-36-13.totalplay.net) (Ping timeout: 272 seconds)
[18:45:41] *** Quits: gusto (~Augustus@109.255.100.54) (Ping timeout: 268 seconds)
[18:46:45] *** Quits: Pandadub (~Barones@2804:7f3:8986:9284:4fb0:e185:8c88:990e) (Read error: Connection reset by peer)
[18:47:34] *** Joins: kai6 (~kai@x50d24799.cust.hiper.dk)
[18:48:05] *** Quits: Deneb (~johnch@58.111.189.80.dyn.plus.net) (Quit: Leaving)
[18:48:43] *** Joins: Obo (~roberto@122.red-83-38-248.dynamicip.rima-tde.net)
[18:49:24] <Falc> mrtnt: because the amount of bytes that would actually break a decoder is very small?
[18:50:52] *** Joins: crawler (~crawler@user/crawler)
[18:51:23] <mrtnt> The reason I'm asking is that in the beginning I thought that I have to put the "re.search()" into try/except block like this: https://paste.debian.net/plainh/c2c43f16 However, the re.search() seems to process binary files just fine and looks like https://paste.debian.net/plainh/ea8f28cb is enough.
[18:52:07] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[18:53:45] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[18:54:21] <SnoopJ> mrtnt, because there are no invalid bytes in the latin-1 encoding
[18:54:53] <SnoopJ> every byte from 0x00 to 0xFF is mapped to a character
[18:54:53] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:55:10] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[18:56:14] *** Joins: wyclif (~wyclif@user/wyclif)
[18:56:21] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[18:57:40] *** Joins: anas (~anas@197.2.60.124)
[18:58:09] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Ping timeout: 258 seconds)
[18:58:44] <Falc> mrtnt: it's not re that is processing the binary file, it's the open() that turns your file into a text. And re was designed to find *any* text in *any* text. So re.seach() in and of itself will never raise an exception, as long as it receives text.
[18:59:17] <mrtnt> SnoopJ, Falc: got it, thanks!
[18:59:20] <SnoopJ> clarification: `re` is capable of working on bytes objects too
[19:00:01] <SnoopJ> the relevant constraint is that the type of your pattern and the type of your data must match (i.e. str patterns for str data, bytes patterns for bytes data)
[19:00:16] *** Quits: Nact (~l@host-85-27-124-83.dynamic.voo.be) (Quit: Konversation terminated!)
[19:00:16] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:00:32] <SnoopJ> (but you *usually* want text)
[19:01:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:01:22] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[19:01:24] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[19:03:16] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[19:03:54] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[19:03:54] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[19:06:55] *** Quits: KindOne (~KindOne@user/kindone) (Quit: K-Lined™)
[19:07:06] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Remote host closed the connection)
[19:07:17] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[19:07:49] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[19:09:14] *** Quits: Doffi (~doffi@91.132.197.188) (Ping timeout: 252 seconds)
[19:10:57] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[19:12:02] *** Joins: rsx (~dummy@ppp-188-174-136-181.dynamic.mnet-online.de)
[19:12:26] *** Joins: wyclif (~wyclif@user/wyclif)
[19:13:13] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:13:46] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[19:15:06] *** Quits: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa) (Ping timeout: 240 seconds)
[19:16:18] *** Quits: kostkon (~androirc@ob21aa.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[19:16:21] *** Joins: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa)
[19:16:55] <ferz> I've a APScheduler. I would like to dump its jobs into a file when I need to stop the process and then to restore from that file when I restart the process.
[19:16:55] <ferz> Is there anyone that had this experience serializing and deserializing APScheduler jobs?
[19:17:31] *** Joins: KindOne (kindone@user/kindone)
[19:17:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[19:19:18] *** Joins: derelict (~derelict@user/derelict)
[19:19:42] <dude-x> you're not using sqlite?
[19:19:57] *** Joins: montxero (95a78142@ircip1.mibbit.com)
[19:20:17] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[19:20:20] <montxero> How can I use re.sub to substitute only part of the match. E.g.  re.sub(r'[A-Za-z0-9]([^A-Za-z0-9])[A-Za-z0-9]', ' This$#is') gives "Thi s'.  I want 'This is'.
[19:20:24] *** Joins: Doffi (~doffi@91.132.197.188)
[19:21:12] <The-Compiler> SnoopJ: Hm, I'm confused about Python's behavior here actually, because 0x80 to 0x9F are unassigned in latin1, no?
[19:21:52] *** Quits: crawler (~crawler@user/crawler) (Ping timeout: 252 seconds)
[19:22:12] *** Joins: crawler (~crawler@user/crawler)
[19:22:14] *** Quits: crawler (~crawler@user/crawler) (Excess Flood)
[19:22:33] *** Joins: crawler (~crawler@user/crawler)
[19:22:35] *** Quits: crawler (~crawler@user/crawler) (Excess Flood)
[19:22:40] <The-Compiler> montxero: I don't understand your example (this would give a TypeError), but you probably want a lookahead assertion
[19:22:54] *** Joins: crawler (~crawler@user/crawler)
[19:22:56] *** Quits: crawler (~crawler@user/crawler) (Excess Flood)
[19:23:03] *** Quits: KindOne (kindone@user/kindone) (Quit: K-Lined™)
[19:23:14] *** Joins: crawler (~crawler@user/crawler)
[19:23:16] *** Quits: crawler (~crawler@user/crawler) (Excess Flood)
[19:23:21] <SnoopJ> The-Compiler, they're assigned as the C1 controls, but they aren't printable, is my understanding
[19:23:25] *** Joins: magla (~gelignite@55d41815.access.ecotel.net)
[19:23:53] <The-Compiler> montxero: or you could pass a function to re.sub which gets the match object, and then use that to build the full replacement string
[19:24:08] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[19:25:19] *** Quits: SteveP (~steve@99-98-103-29.lightspeed.tukrga.sbcglobal.net) (Quit: This computer has gone to sleep)
[19:26:50] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 252 seconds)
[19:27:03] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:27:41] <SnoopJ> The-Compiler, oh, hm, I see what you mean actually. You're right, ISO 8859-1 does *not* assign anything.
[19:27:47] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[19:28:21] *** Joins: srhm (~ascii@user/srhm)
[19:28:37] <SnoopJ> but they're still valid I guess
[19:28:39] *** Joins: wyclif (~wyclif@user/wyclif)
[19:28:44] <montxero> @The-Compiler please see this paste: https://bpa.st/NENQ
[19:29:23] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[19:30:19] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[19:31:13] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[19:31:20] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[19:32:44] <ferz> dude-x: No, actually it stores jobs in RAM only.
[19:33:23] *** Joins: waynew (~wayne@user/waynew)
[19:33:25] *** Quits: Tas-sos (~Tas-sos@78-152-69.adsl.cyta.gr) (Ping timeout: 258 seconds)
[19:33:30] <The-Compiler> montxero: use lookahead/lookbehind assertions in your pattern then
[19:33:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:34:11] <The-Compiler> montxero: search for (? on https://docs.python.org/3/library/re.html to see the docs for them
[19:34:16] <montxero> It seems like I am missing something fundamental. re.findall returns a list of the patterns I want to substitute
[19:34:35] *** mikebald_ is now known as mikebald
[19:34:41] *** Joins: Akuli (~Akuli@82-203-162-138.bb.dnainternet.fi)
[19:34:58] <montxero> @The-Compiler I thought that was for non-greedy matches..
[19:35:21] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.2)
[19:35:53] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[19:36:02] *** Joins: ray (~ray@user/re)
[19:36:18] *** Joins: srhm (~ascii@user/srhm)
[19:37:35] <The-Compiler> montxero: re.findall only gives you the result of the group: "If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group. Empty matches are included in the result."
[19:38:28] *** Joins: gggkmp_ (~gggkmp@60.10.23.164)
[19:38:58] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 240 seconds)
[19:39:02] <The-Compiler> montxero: but with lookahead/lookbehind, you can use   (?<=[A-Za-z0-9])([^A-Za-z0-9]+)(?=[A-Za-z0-9])   so that your pattern matches only when they're there, but doesn't make them part of the match
[19:40:08] <The-Compiler> montxero: or actually, you could just re-add the prefix/suffix as part of your replacement with backreferences:   re.sub(r'([A-Za-z0-9])([^A-Za-z0-9]+)([A-Za-z0-9])', r'\1 \3', s)
[19:40:39] <The-Compiler> montxero: could even drop the middle group:    re.sub(r'([A-Za-z0-9])[^A-Za-z0-9]+([A-Za-z0-9])', r'\1 \2', s)
[19:41:53] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Remote host closed the connection)
[19:42:10] <montxero> This means, my understanding must be wrong on a very fundamental level.  I assumed the parenthesis delimit where the match starts and ends.
[19:42:13] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:42:54] *** niko is now known as o
[19:44:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[19:44:54] *** Joins: wyclif (~wyclif@user/wyclif)
[19:45:31] <montxero> @The-Compiler can you please explain ` re.sub(r'([A-Za-z0-9])[^A-Za-z0-9]+([A-Za-z0-9])', r'\1 \2', s)`
[19:46:17] *** Joins: KindOne (kindone@user/kindone)
[19:46:34] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 240 seconds)
[19:46:37] <montxero> Ahhh
[19:46:40] <montxero> I get it now
[19:47:31] <montxero> [^A-Za-z0-9]+ is not in parens so it is not matched (as in group) right?
[19:47:36] *** Quits: ferz (~ferz@146-241-211-60.dyn.eolo.it) (Ping timeout: 272 seconds)
[19:47:44] <supakeen> It's matched, but not captured.
[19:47:44] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:47:50] <montxero> Ahhh
[19:48:04] <supakeen> The parentheses indicate capture groups.
[19:48:09] <montxero> So groups are captured.
[19:48:17] <montxero> Thanks @supakeen
[19:48:38] <montxero> you and @The-Compiler just cleared a bug in my understanding.
[19:48:45] *** Quits: Obo (~roberto@122.red-83-38-248.dynamicip.rima-tde.net) (Quit: WeeChat 2.8)
[19:49:45] <The-Compiler> I had no idea re.findall was doing something different when there was a group in the pattern, though
[19:49:55] <The-Compiler> so, TIL for me too!
[19:49:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:50:54] *** Joins: Obo (~roberto@122.red-83-38-248.dynamicip.rima-tde.net)
[19:50:57] <supakeen> Regexes be weird :)
[19:52:00] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Client Quit)
[19:52:21] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[19:53:47] <SnoopJ> `re` moves in mysterious (myste-`re`-ous?) ways
[19:53:59] <grym> "regular", yes.  that's the word...
[19:54:12] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[19:54:31] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[19:54:45] *** Joins: gggkmp (~gggkmp@125.33.90.215)
[19:55:58] *** Quits: anas (~anas@197.2.60.124) (Ping timeout: 252 seconds)
[19:56:01] *** Joins: ferz (~ferz@146-241-129-188.dyn.eolo.it)
[19:56:14] *** Joins: node1 (~node1@user/node1)
[19:56:36] *** Quits: gggkmp_ (~gggkmp@60.10.23.164) (Ping timeout: 268 seconds)
[19:57:04] *** Quits: tims (~tims@220.240.106.233) (Ping timeout: 246 seconds)
[19:58:34] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[19:59:00] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 272 seconds)
[19:59:11] *** Quits: gggkmp (~gggkmp@125.33.90.215) (Ping timeout: 252 seconds)
[19:59:38] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 272 seconds)
[19:59:42] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:00:56] *** Quits: KindOne (kindone@user/kindone) (Ping timeout: 252 seconds)
[20:01:52] *** Joins: KindOne (kindone@user/kindone)
[20:02:59] *** Quits: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net) (Remote host closed the connection)
[20:03:13] *** Joins: wyclif (~wyclif@user/wyclif)
[20:03:18] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[20:03:26] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[20:05:45] *** Joins: y1n (~y1n@84-115-64-125.wifi.dynamic.surfer.at)
[20:05:46] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 240 seconds)
[20:06:12] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:07:10] *** Quits: slavfox (~slavfox@93.158.232.111) (Quit: ZNC 1.8.2 - https://znc.in)
[20:07:41] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[20:08:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[20:08:30] *** Joins: slavfox (~slavfox@93.158.232.111)
[20:09:24] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[20:12:03] <nedbat> and people say #python never accomplishes anything...!  https://github.com/python/cpython/pull/26849
[20:12:49] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Quit: Leaving)
[20:13:22] <bjs> nedbat: congrats
[20:13:26] *** Joins: anas (~anas@102.156.134.91)
[20:13:35] <nedbat> yup yup, i'm a pretty proud papa :)
[20:13:54] <SnoopJ> it's official! 🎉
[20:14:04] <nedbat> it's officially "official"!
[20:15:02] *** Joins: fluffyballoon (~fluffybal@199.204.58.62)
[20:15:56] *** Joins: Deep6 (~Deep6@189.146.239.170)
[20:16:05] *** Joins: rhax (~yannick@user/rhax)
[20:16:43] *** Quits: VBreton (~Guest1@82-65-166-34.subs.proxad.net) (Quit: Client closed)
[20:16:56] <InPhase> nedbat: lol.
[20:17:03] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:2042:a71:4322:6233)
[20:17:35] *** Quits: KindOne (kindone@user/kindone) (Ping timeout: 255 seconds)
[20:18:08] <InPhase> Now we can claim nedbat wrote the official documentation.
[20:18:25] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[20:18:46] *** Quits: pycode (~pycode@2001:b07:5d28:551:6ec3:a669:57be:8f6e) (Ping timeout: 246 seconds)
[20:18:54] *** Joins: iomari891 (~iomari891@105.112.138.38)
[20:20:02] *** Quits: anas (~anas@102.156.134.91) (Ping timeout: 268 seconds)
[20:21:05] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[20:21:49] *** Joins: wyclif (~wyclif@user/wyclif)
[20:22:10] *** Quits: node1 (~node1@user/node1) (Ping timeout: 240 seconds)
[20:22:19] *** Joins: jetchisel (jetchisel@user/jetchisel)
[20:22:58] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 240 seconds)
[20:23:03] *** Joins: node1 (~node1@user/node1)
[20:24:38] <nedbat> for people seeing this pull request for the first time: this was done to stop an endless debate here about whether the Python docs were "official".
[20:24:54] *** Joins: KindOne (~KindOne@user/kindone)
[20:25:35] *** Quits: magla (~gelignite@55d41815.access.ecotel.net) (Quit: Stay safe!)
[20:25:59] *** Quits: KindOne (~KindOne@user/kindone) (Remote host closed the connection)
[20:26:07] <SnoopJ> I don't know if it's "official" business of the documentation workgroup, but in light of it I think it's a fine indication of "every contribution, even small ones, can be valuable"
[20:26:27] <The-Compiler> nedbat, #python's official making-docs-official person!
[20:27:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[20:27:04] <SnoopJ> hmm, the workgroup's RTD doesn't link to the actual repo anywhere :P
[20:27:15] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[20:27:40] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:28:32] *** Joins: dvx (~dvx@185.63.97.64)
[20:31:09] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[20:31:47] <jinsun_> now I must ask my work to upgrade to 3.9 so we can use the official docs, :D
[20:32:25] *** Joins: gusto (~Augustus@109.255.100.54)
[20:32:50] <nedbat> the system works! :)
[20:33:04] *** Quits: Obo (~roberto@122.red-83-38-248.dynamicip.rima-tde.net) (Quit: WeeChat 2.8)
[20:33:38] *** Joins: pnoud (~pnoud@user/pnoud)
[20:35:08] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[20:35:38] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[20:36:22] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[20:36:29] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 255 seconds)
[20:36:50] *** Joins: cedric (~cedric@2a01:cb11:867:c200:e767:9574:ddd:f7f4)
[20:36:56] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 255 seconds)
[20:38:47] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[20:39:49] *** Joins: wyclif (~wyclif@user/wyclif)
[20:40:33] *** Joins: Pandadub (~Barones@2804:48dc:8500:0:e0ca:58a6:dc63:dc0b)
[20:40:38] *** Quits: Barones (~Barones@2804:48dc:8500:0:e0ca:58a6:dc63:dc0b) (Quit: Leaving)
[20:40:50] *** Pandadub is now known as Barones
[20:40:58] *** Joins: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net)
[20:41:07] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[20:41:18] *** Quits: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net) (Client Quit)
[20:41:41] *** Joins: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net)
[20:41:51] *** Joins: LuxuryMode (uid91005@id-91005.charlton.irccloud.com)
[20:41:54] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[20:42:10] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 252 seconds)
[20:42:37] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[20:43:36] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Remote host closed the connection)
[20:44:12] *** Joins: gggkmp (~gggkmp@221.219.70.176)
[20:44:36] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 272 seconds)
[20:45:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[20:45:19] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 268 seconds)
[20:45:19] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[20:46:24] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:46:27] *** Quits: Meteorhead (~Meteorhea@static-qvn-qvs-164225.business.bouyguestelecom.com) (Quit: Client closed)
[20:46:28] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:46:52] *** Joins: sandman13 (sandman13@user/sandman13)
[20:47:44] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 255 seconds)
[20:47:55] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:48:00] <sandman13> What am I doing wrong here? https://bpa.st/26NA
[20:48:39] <Yhg1s> sandman13: why do you think you're doing something wrong?
[20:49:07] <sandman13> I see only "Send:" line but "Received:" is not seen Yhg1s
[20:49:15] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[20:49:27] *** Quits: VaniaPy (~VaniaPy@46.12.210.52.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[20:49:37] *** Quits: complexnumber (~brett@202.168.43.51) (Ping timeout: 256 seconds)
[20:49:54] <sandman13> I checked on server end, it reports it has sent the data.
[20:50:02] <Yhg1s> sandman13: reader.read() reads until the file is closed. Is the server closing the file?
[20:50:03] *** Joins: ice9 (~ice9@user/ice9)
[20:50:54] *** Joins: weedmic (~weedmic@109-186-197-174.bb.netvision.net.il)
[20:52:41] <sandman13> Yhg1s: Hmm. I never knew that.
[20:52:53] *** Quits: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3) (Quit: Konversation terminated!)
[20:52:54] *** Quits: thesemic1lons (~thesemico@user/thesemicolons) (Quit: leaving)
[20:53:00] <sandman13> I am new to async stuff
[20:53:09] <Yhg1s> sandman13: https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader.read
[20:53:31] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[20:53:48] *** Joins: anas (~anas@196.235.5.143)
[20:54:24] *** Joins: cuz (~user@38.140.58.234)
[20:54:40] <sandman13> Yhg1s: I read that but didn't see the term "closing". Thanks for the link though :)
[20:56:10] *** Quits: weedmic (~weedmic@109-186-197-174.bb.netvision.net.il) (Quit: Konversation terminated!)
[20:56:28] *** Quits: y1n (~y1n@84-115-64-125.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[20:56:33] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[20:56:55] *** Quits: gggkmp (~gggkmp@221.219.70.176) (Ping timeout: 246 seconds)
[20:57:11] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 255 seconds)
[20:57:27] <sandman13> Hmm. Python server seems to work fine and I see desired output. Python Unix server: https://bpa.st/N4QQ but for some reason Go Unix server is acting up.
[20:57:44] <sandman13> Thanks for the help Yhg1s :)
[20:58:01] *** Quits: cuz (~user@38.140.58.234) (Remote host closed the connection)
[20:58:17] *** Joins: wyclif (~wyclif@user/wyclif)
[20:58:22] *** Quits: driib (~driib@185.195.233.163) (Quit: The Lounge - https://thelounge.chat)
[20:58:28] *** Joins: cuz (~user@38.140.58.234)
[21:00:43] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[21:01:20] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[21:01:41] *** Joins: cheater (~Username@user/cheater)
[21:01:54] *** Quits: weibullguy (~weibullgu@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54) (Ping timeout: 240 seconds)
[21:03:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[21:03:30] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 265 seconds)
[21:03:39] *** Joins: KindOne (kindone@user/kindone)
[21:05:58] *** Quits: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[21:06:07] *** Joins: phlixi (~phlixi@ppp-46-244-162-78.dynamic.mnet-online.de)
[21:06:24] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 265 seconds)
[21:07:26] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[21:09:18] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[21:09:36] *** Parts: yolo (~xxiao@159.89.184.51) ()
[21:10:19] *** Joins: hugoposca (~hposca@node-1w7jr9phoke2swvj0j3acea4z.ipv6.telus.net)
[21:10:29] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[21:10:42] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[21:11:05] *** Joins: wyclif (~wyclif@user/wyclif)
[21:14:04] *** Quits: pneff (~pneff@2a02:168:fedc:0:3503:d210:89e5:6aa) (Ping timeout: 246 seconds)
[21:14:37] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 265 seconds)
[21:16:45] *** Joins: Julian (~tos9@python/site-packages/Julian)
[21:16:57] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[21:17:15] *** Joins: Naan (~Naan@user/naan)
[21:17:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[21:18:12] *** Joins: pneff (~pneff@2a02:168:fedc:0:943c:621a:caa8:81e)
[21:18:16] *** Quits: argento (~argent0@168-227-97-29.ptr.westnet.com.ar) (Ping timeout: 246 seconds)
[21:18:17] *** Joins: Paul (~Paul@user/paul)
[21:19:19] *** Joins: Croves (~Croves@2804:14c:578b:9102:b1c6:fb69:47f1:6720)
[21:19:23] *** Quits: node1 (~node1@user/node1) (Read error: Connection reset by peer)
[21:20:24] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:20:44] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:21:46] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[21:21:49] *** Parts: sandman13 (sandman13@user/sandman13) (#rekt)
[21:21:59] <ThiefMaster> how likely is it that during a `python -m venv --upgrade` between two big python releases (e.g. 3.9 to 3.10) would break things? i think i'd need to manually rename the lib/pythonX.Y directory to preserve site-packages, and i'm not sure how likely it is to break things when doing that...
[21:22:28] *** Quits: pneff (~pneff@2a02:168:fedc:0:943c:621a:caa8:81e) (Ping timeout: 246 seconds)
[21:22:39] <grym> ThiefMaster: venvs can't be upgraded to other interpreters
[21:22:43] <grym> delete, and recreate
[21:23:13] *** Joins: koka1ne (~koka1ne@gateway/tor-sasl/koka1ne)
[21:23:30] *** Quits: Falc (~Falc@2a02:2788:1008:562:8c64:afde:4dee:9d6a) (Ping timeout: 240 seconds)
[21:23:34] <ThiefMaster> ok, so "minor" version changes are considered "other interpreters"
[21:23:41] <grym> yes
[21:25:29] *** Joins: Julian (~tos9@python/site-packages/Julian)
[21:26:07] *** Quits: Julian (~tos9@python/site-packages/Julian) (Client Quit)
[21:26:15] *** Quits: GvP (~GvP@ip70-162-85-176.ph.ph.cox.net) (Quit: Going offline, see ya!)
[21:26:33] *** Parts: Croves (~Croves@2804:14c:578b:9102:b1c6:fb69:47f1:6720) ()
[21:27:12] <shan> hai
[21:27:38] <shan> what's the best way to initialise a git repo in python
[21:27:41] *** Joins: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[21:27:46] *** Quits: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[21:27:49] <shan> the Python equivalent of `git init`
[21:28:04] <grym> subprocess.run(['git' 'init'])
[21:28:14] <KirkMcDonald> Gonna want a comma there.
[21:28:18] <grym> er, yes
[21:28:20] <shan> grym: hmmmmm
[21:28:21] <grym> gitinit :(
[21:28:22] <shan> thanks
[21:28:46] *** Joins: wyclif (~wyclif@user/wyclif)
[21:30:08] <theseb> newbie locking question....Imagine you tried to implement a locking mechanism so that only one process had write permission on a file.....How avoid race conditions for that?....e.g. Imagine 10 processes simultaneously check to see the file is not locked....then they will ALL grab write permission at the same time! How avoid that?
[21:30:09] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[21:31:09] <deniska> theseb: not familiar with file locking, but I'd assume there should be a way to check and grab write permissions in the single call?
[21:31:11] *** Quits: haroon (~haroon@gw.wmd.de) (Quit: Client closed)
[21:32:34] <ATAD> theseb: Depending on what you're doing, maybe an "easier to ask forgiveness than permission" (EFAP) approach. Something like do a try: (open file/lock file) except OSError: (give error that file is "in use")
[21:32:46] <theseb> deniska: it is a general question about how to keep different processes from stepping on each other...i was just using files as an example
[21:33:21] <theseb> deniska: what do you mean by "the single call"?  In my hypothetical you have 10 processes
[21:34:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:34:48] <theseb> ATAD: yes but every time I imagine the situation in my head I can imagine race conditions somewhere....Seems having multiple processes touch any single object is fraught with danger
[21:36:03] *** Joins: neilthereildeil (~neilthere@204.115.183.4)
[21:36:03] <theseb> ATAD: actually with files your example may be ok because I think the OS doesn't allow multiple processes to open file?
[21:36:22] <ATAD> it depends on the OS, and the type of lock, if I recall correctly
[21:36:31] <theseb> ATAD: the specific situation on Google Cloud Storage doesn't have those Linux kernel protections
[21:36:36] *** Quits: koka1ne (~koka1ne@gateway/tor-sasl/koka1ne) (Quit: koka1ne)
[21:36:59] <ATAD> Windows is generally more "fussy" than Linux about files being "in use"
[21:37:24] <theseb> ATAD: Google Cloud Storage has buckets of folders and files...I want to do some kind of custom locking python code but the linux kernel won't be there to protect me
[21:37:29] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[21:38:39] <ATAD> aye, I think your python code could potentially set a flag indicating [ locked = True ], then [ try: (if locked: raise(MyCustomException) ) ]
[21:38:45] <ATAD> something like that
[21:39:07] <deniska> theseb: generally you need some cooperation from the platform to do locking
[21:39:12] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[21:39:28] <ATAD> maybe don't need the try: now that I think about it...
[21:39:29] *** Quits: Deep6 (~Deep6@189.146.239.170) (Ping timeout: 255 seconds)
[21:39:34] <deniska> or some external consensus mechanism
[21:39:58] <theseb> ATAD, deniska: wait...i found a google page that had the standard "open, write, close" commands... https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/read-write-to-cloud-storage
[21:40:11] <theseb> so looks like google will help out...whew
[21:40:11] <ATAD> o good
[21:40:12] *** Joins: furrykef (~furrykef@ip68-229-199-137.ok.ok.cox.net)
[21:40:27] *** Quits: PdimH (~pdimh@user/pdimh) (Quit: May we meet again)
[21:40:45] *** Joins: pnoud (~pnoud@user/pnoud)
[21:40:55] *** Joins: tstirrat (~tstirrat@2601:280:105:8dc8:39ca:7f37:1203:5155)
[21:40:58] *** Quits: tstirrat (~tstirrat@2601:280:105:8dc8:39ca:7f37:1203:5155) (Client Quit)
[21:41:16] <theseb> ATAD: i never appreciated open and close but now i do....i also understand your comment now that you need cooperation from the platform to make locking happen....good to know!
[21:41:25] <theseb> ATAD, deniska : thanks for your help
[21:41:30] <ATAD> you're welcome!
[21:41:40] *** Quits: rsx (~dummy@ppp-188-174-136-181.dynamic.mnet-online.de) (Quit: rsx)
[21:42:27] <furrykef> Is there a way to do a multiple find-and-replace in one go? Let's say I want to do s/þ/ð/g, s/ā/a/g, s/an/on/g
[21:42:45] <ATAD> maybe string.translate()?
[21:43:15] <ATAD> then provide a dict-like object to say which things should be replaced with which other things
[21:43:28] <oprypin> furrykef, you need to search for 'þ|ā|an' and then dict in its callback^
[21:43:30] <furrykef> That was my first thought, but it only seems to handle the case where the replacements are one character
[21:43:40] <oprypin> right
[21:43:42] <ATAD> ah right
[21:44:09] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[21:44:27] <oprypin> '|'.join(map(re.escape, keys))   may be a relevant code snippet
[21:45:19] *** Joins: wyclif (~wyclif@user/wyclif)
[21:45:45] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[21:46:23] <catern> are there any very lightweight and performant, but not fully safe, Python sandboxing techniques? specifically I'd just like to be able to import a module/load a file/run a function and have a little certainty that it doesn't import any modules
[21:46:59] <catern> basically, I'd usually enforce this with code review, but I'd like to do a little bit more, and enforce it weakly at runtime too (but I know it can be circumvented)
[21:47:05] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:47:40] <furrykef> Maybe I should use translate for one-character replacements and then just manually .replace the longer ones
[21:47:55] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[21:47:59] *** Parts: pragma- (~chaos@user/pragmatic-chaos) (Bye!)
[21:50:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[21:50:54] <KirkMcDonald> catern: Replace the builtin __import__ with something that raises an exception.
[21:51:34] *** Joins: weedmic (~weedmic@109-186-197-174.bb.netvision.net.il)
[21:52:36] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:52:44] *** Quits: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com) (Remote host closed the connection)
[21:52:59] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 255 seconds)
[21:53:00] *** Quits: candyman (~candyman@user/candyman) (Ping timeout: 272 seconds)
[21:53:38] *** Joins: zeden (~zeden@user/zeden)
[21:55:22] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[21:56:50] *** Joins: pnoud (~pnoud@user/pnoud)
[21:58:15] <catern> KirkMcDonald: makes sense, and then use eval myself? seems easy enough! do you know of any library that does that? just to avoid implementing it myself
[21:58:34] <KirkMcDonald> catern: Nope.
[22:01:40] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[22:02:41] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[22:02:50] *** Joins: Elzington (~Elzington@static-198-54-128-46.cust.tzulo.com)
[22:03:02] *** Joins: wyclif (~wyclif@user/wyclif)
[22:03:37] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[22:04:27] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[22:06:29] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 255 seconds)
[22:08:00] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:2042:a71:4322:6233) (Quit: Leaving)
[22:08:19] <dba> Hi, I am trying to save string with double quotes in a dataframe but it is saved simple string. This is how I try to save it '"'+string+'"' but after saving in the df it is only string . any advise
[22:08:56] *** Joins: jtanner (sid194399@id-194399.brockwell.irccloud.com)
[22:09:14] *** Quits: weedmic (~weedmic@109-186-197-174.bb.netvision.net.il) (Quit: Konversation terminated!)
[22:09:25] <ChrisWarrick> dba: show your code
[22:11:47] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:12:09] <dba> ChrisWarrick, https://bpa.st/F64Q
[22:12:56] <ChrisWarrick> dba: that’s not the full code, and not enough to run the code
[22:13:07] <ChrisWarrick> dba: is what you really want to have quoted cells in your output CSV file?
[22:13:57] <dba> ChrisWarrick, Yes I want to have quoted cells in my CSV file
[22:14:24] <ChrisWarrick> dba: okay, then don’t do it manually, let pandas do it for you
[22:14:32] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:5056:66c0:d6e:186f)
[22:14:50] *** Joins: han-` (sid293063@id-293063.brockwell.irccloud.com)
[22:14:52] <ChrisWarrick> dba: pass quoting=csv.QUOTE_ALL   to df.to_csv
[22:16:48] *** Joins: twainwek (~user@144.211.196.35.bc.googleusercontent.com)
[22:17:03] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[22:17:12] *** Quits: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[22:17:13] *** Quits: rsheftel5 (~rsheftel@pool-108-53-162-225.nwrknj.fios.verizon.net) (Quit: Ping timeout (120 seconds))
[22:17:33] <twainwek> how can i find the line in a file that contains 'foo' and 'bar' anywhere in the line
[22:18:20] <dba> ChrisWarrick, from what I saw in the docs https://docs.python.org/3/library/csv.html quoting= is used when reading but I want to save all cell quoted
[22:18:27] *** Parts: furrykef (~furrykef@ip68-229-199-137.ok.ok.cox.net) (Leaving)
[22:18:37] <ssbr> twainwek: which part of this is giving you trouble so far?
[22:18:42] <ChrisWarrick> dba: it’s valid for writing too
[22:18:56] *** Quits: akk (~akk@174-28-112-132.albq.qwest.net) (Quit: +++)
[22:18:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:19:18] <twainwek> ssbr: the AND condition with arbitrary number of characters in between the words and their ordering
[22:19:36] <ChrisWarrick> twainwek: how would you search for a line that contains 'foo' anywhere in the line?
[22:20:01] <twainwek> re.search(r'\.*foo\.*, string)
[22:20:02] <SnoopJ> catern, you can use an audit hook if you're worried about *new* imports, but otherwise you want what KirkMcDonald said. Example: https://bpa.st/OPBA
[22:20:08] <DX099> anyone got any clue regarding a  "The input file name 'psycopg2_binary-2.9.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl' contains an invalid platform part: 'manylinux_2_17_x86_64'" error? my PIP is up to date, on Linux 64bit system with glibc > 2.17
[22:20:20] <twainwek> or rather .*
[22:20:23] <twainwek> no need to escape it
[22:20:29] <DX099> the package is lying on a private repo, who fetched it from upstream
[22:20:34] <ChrisWarrick> DX099: pip --version
[22:20:44] <DX099> and pip is ofc update
[22:20:46] <ChrisWarrick> twainwek: I wouldn’t do it with regex
[22:21:02] <ChrisWarrick> DX099: pip --version?
[22:21:15] <DX099> pip 21.1.3 from /root/.local/share/virtualenvs/-x-v5uFv0/lib/python3.7/site-packages/pip (python 3.7)
[22:21:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[22:21:44] <Gurkenglas> twainwek, ^(?.*foo).*bar.*
[22:22:42] <Gurkenglas> uh, ? should be ?=. https://regex101.com/r/gCG0qu/1
[22:22:55] <catern> SnoopJ: oh, that's really cool! ah, but too bad that the audit hook only works for new imports...
[22:23:14] <ssbr> twainwek: yeah, Python regexps don't really have an "and" per se -- the closest is what Gurkenglas showed, which uses a zero width assertion as an and
[22:23:28] <habnabit_> Gurkenglas, you can set it to 'python regex' flavor
[22:23:40] <ssbr> twainwek: another option is to use | to alternate the two possibilities: either it's foo followed by bar, or the other way around.
[22:23:49] <Gurkenglas> https://regex101.com/r/gCG0qu/2 then :)
[22:23:51] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:24:02] <ChrisWarrick> twainwek: for line in file: if 'foo' in line and 'bar' in line: print(line)
[22:24:06] <habnabit_> good god this is a bad use of regex
[22:24:32] <Gurkenglas> ssbr, mentioning the free variables foo and bar twice in the answer is ugly tho
[22:24:39] <SnoopJ> catern, it is, yea. I'm not really sure why the audit hook doesn't apply in that case, it might not be intentional...
[22:25:19] <ssbr> Gurkenglas: this is true, and more importantly, it's hyper fragile -- e.g. what I suggested might not do the right thing if it were "foo" and "oof" (should "foof" count?)
[22:25:35] <ssbr> last suggestion would be what ChrisWarrick said. :)
[22:25:42] <ssbr> I like that best
[22:27:09] <Gurkenglas> set(re.findall(".*foo.*", string)) & set(re.findall(".*bar.*", string))
[22:27:46] <habnabit_> Gurkenglas, terrible
[22:28:11] *** Quits: waynew (~wayne@user/waynew) (Quit: WeeChat 2.9)
[22:29:00] *** Joins: Auron (~Auron956@user/auron)
[22:29:28] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[22:30:27] <Gurkenglas> bind(file).Each().Filter(re.compile(".*foo.*").match).Filter(re.compile(".*bar.*").match).get()
[22:31:19] <ssbr> am I in the wrong channel
[22:31:33] <Gurkenglas> import Haskell
[22:31:36] <ssbr> that looks like jquery (not a good thing)
[22:32:17] <dba> ChrisWarrick, I tried this but didnt work df.to_csv('sample.csv', header=False, mode='a',quotechar='"',quoting=csv.QUOTE_ALL) the output is  a csv file without double quoted cells
[22:32:26] *** Quits: ray (~ray@user/re) (Ping timeout: 265 seconds)
[22:33:19] *** Joins: ray (~ray@user/re)
[22:33:37] <ChrisWarrick> dba: works for me
[22:33:42] <ChrisWarrick> dba: are you looking at the correct file?
[22:34:16] <ChrisWarrick> dba: are you sure you aren’t looking at the top of the file (which wouldn’t change — you’re in append mode)?
[22:34:59] *** Joins: wyclif (~wyclif@user/wyclif)
[22:35:44] *** Joins: weibullguy (~weibullgu@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54)
[22:36:32] <dba> ChrisWarrick, Yes I am looking at the correct file. When I open it in MS excel I see only string without double quote but when I open it with text editor I see only one column get double quoted
[22:36:44] *** Joins: cuz (~user@38.140.58.234)
[22:37:19] *** Parts: neilthereildeil (~neilthere@204.115.183.4) ()
[22:37:20] <ChrisWarrick> dba: well, it works for me even for the simplest df, and quotes are parsed out by excel, because this is how csv files work
[22:37:41] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[22:37:53] <catern> SnoopJ: did you just go to check whether the audit hook could be used for this and discover that? :)
[22:39:15] <SnoopJ> catern, yep, but it occurred to me to check if it would work for stuff already cached in sys.modules
[22:40:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[22:40:28] *** Quits: phlixi (~phlixi@ppp-46-244-162-78.dynamic.mnet-online.de) (Remote host closed the connection)
[22:40:46] *** Quits: anas (~anas@196.235.5.143) (Quit: WeeChat 3.3-dev)
[22:40:54] *** Joins: jamiejackson (~jamiejack@207.172.87.34)
[22:41:14] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[22:41:53] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 256 seconds)
[22:42:10] <DX099> ChrisWarrick: no other clue besides PIP version?
[22:42:37] <ChrisWarrick> DX099: I’d look into how pip/python determines glibc compatibility
[22:43:03] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[22:43:11] <jamiejackson> hi folks, i need help undertsanding pytest fixtures for a particular implementation. i'm using a mocking framework for s3: https://github.com/spulec/moto#example-on-pytest-usage ...
[22:43:28] <DX099> supposedly you look at "cpxxx" for min python version and "2_17" for MAJ MIN libc version$
[22:43:35] <DX099> my OS fits both case
[22:43:39] <jamiejackson> would those fixture defs go into the file being tested or the test file itself?
[22:43:57] <DX099> Python 3.8 & libc 2.28
[22:44:20] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Ping timeout: 268 seconds)
[22:45:38] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 255 seconds)
[22:45:48] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:70ea:eb3b:d5a4:82bf) (Quit: Textual IRC Client: www.textualapp.com)
[22:46:13] <DX099> I'm looking  https://www.python.org/dev/peps/pep-0513/#id49
[22:46:17] <ChrisWarrick> DX099: your pip version says 3.7?
[22:46:46] <DX099> ah yes, this Venv in particular wanted 3.7
[22:47:00] <DX099> but the wheel is supposedly 3.6 >= compatible
[22:47:17] *** Joins: Betal (~Beta@user/betal)
[22:47:27] <DX099> it says so when it fails "(requires-python:>=3.6)"
[22:47:36] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:48:51] <nedbat> catern: i'm curious why you want to ensure the imported file doesn't import anything else?
[22:49:22] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[22:50:54] *** Joins: dolor_avis (~dolor_avi@user-5-173-14-171.play-internet.pl)
[22:50:58] *** Joins: brabrax_ (~brabrax@user/brabrax)
[22:51:24] *** Joins: wyclif (~wyclif@user/wyclif)
[22:51:25] *** Joins: jtck_ (~jtck@222.164.13.173)
[22:51:46] <weibullguy> jamiejackson: in the test file or conf.py.  here's some info about pytest fixtures --> https://docs.pytest.org/en/latest/how-to/fixtures.html
[22:52:02] <catern> nedbat: for files/functions which build configurations, I want to discourage using, e.g., an HTTP client download config from a database - or importing part of the config from another file - the config should be built in the file
[22:52:27] <nedbat> catern: my production config imports a common.py
[22:52:45] *** Joins: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com)
[22:52:53] <catern> nedbat: and how do you ensure that common.py doesn't contain requests.get("http://example.com/config.txt")?
[22:53:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:53:22] *** Quits: jtck (~jtck@222.164.13.173) (Ping timeout: 240 seconds)
[22:53:33] *** Joins: exilepilot (~exile8338@host86-164-249-163.range86-164.btcentralplus.com)
[22:53:40] <catern> nedbat: I'm guessing you're about to say "good style" or "code review", which, see my original question :)
[22:53:43] <jamiejackson> thanks, weibullguy. i had that stuff in the test file but this library still seems to be using credentials from my system. i'm either doing something wrong or there's a problem with the mocking library (moto)
[22:53:46] *** Joins: greedom (~greedom@2001:16b8:2eab:8c00:fb86:b59c:1ac7:62c9)
[22:54:12] *** Quits: rendar (~rendar@user/rendar) ()
[22:54:13] <nedbat> catern: i understand the tradeoffs.  It seems overly strict to say that a config can't make any imports.
[22:54:58] <catern> nedbat: why would it need to? if it wants to share some common code - I can pass that as an argument :) which gives much more control
[22:55:04] <catern> some common config*
[22:55:22] <weibullguy> jamiejackson: if you're anything like me, it's most likely you doing something wrong. ;)
[22:55:29] <nedbat> catern: i guess i don't understand how your configs are built.  Maybe you just want to use YAML instead of .py for config.
[22:55:45] <jamiejackson> yup, weibullguy
[22:55:48] <catern> nedbat: ew, no, YAML sucks. I like functions and variables, thank you very much
[22:56:07] <nedbat> catern: so you want a little power, but not a lot of power?
[22:56:20] <bjs> who doesn't want to have a little bit of power every now and again
[22:56:28] <catern> nedbat: yep, and I can achieve that with Python easily, with a little sandboxing (as a treat)
[22:56:32] <KirkMcDonald> catern: Have you considered jsonnet?
[22:56:47] <catern> (python can have a little power, as a treat)
[22:56:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[22:57:31] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:57:52] <catern> KirkMcDonald: yes, and dhall, and other such things. Python is perfectly good for this, why would I use anything else? I just need a little sandboxing to assist enforcing good coding style (not making random web requests etc)
[22:57:54] *** Joins: cuz (~user@38.140.58.234)
[22:58:45] <catern> it could be enforced entirely with "I will simply not write bad code" but a little bit of mechanical enforcement will help without burdening me with switching to an entirely different language for configs
[22:58:58] *** Quits: user3456 (user3456@user/user3456) (Ping timeout: 240 seconds)
[23:00:58] *** Quits: dvx (~dvx@185.63.97.64) (Quit: dvx)
[23:01:15] <nedbat> catern: the little bit of power I've wanted (imports) is what you are prohibiting, and the thing you want (functions), I'm not sure i've used in configs, except the functions I've imported.
[23:01:38] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[23:01:38] *** Quits: LuxuryMode (uid91005@id-91005.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[23:01:52] <catern> nedbat: put a "def make_config(common: Config) -> Config:" in each config file that wants to use the common config
[23:02:22] <nedbat> catern: carry on, it's fine. don't mind me.
[23:02:35] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:03:08] <catern> well, I'm just saying, that's how you can get back the little power of importing common config - by turning it into a function.
[23:03:16] <ChrisWarrick> catern: I would also suggest not limiting the power of Python, and using less technical ways to enforce simple configurations
[23:03:17] <catern> calling that function is basically a parameterized import
[23:03:54] *** Quits: montxero (95a78142@ircip1.mibbit.com) (Quit: https://mibbit.com Online IRC Client)
[23:04:23] <catern> ChrisWarrick: like what? code review? I agree, but when I can automate code review, that's nice
[23:05:40] <ChrisWarrick> catern: automated code review == a linter
[23:06:26] *** Joins: y1n (~y1n@84-115-65-213.wifi.dynamic.surfer.at)
[23:06:47] *** Joins: thiras (~thiras@user/thiras)
[23:07:06] <catern> eh, yeah, maybe you're right, maybe a linter is better
[23:07:25] *** Joins: audiocat (~audio@2603-8081-1800-6a65-032f-072b-bf09-a39b.res6.spectrum.com)
[23:07:44] *** Joins: wyclif (~wyclif@user/wyclif)
[23:08:27] *** Quits: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (Quit: Ping timeout (120 seconds))
[23:09:24] <SnoopJ> catern, to me, configuration is best done as explicitly-not-code. It's really hard to "plug holes" to make running-code-as-config sandboxed in this sense, because "import, but don't run code" is kind of a self-contradiction.
[23:09:33] *** Joins: digilink (~digilink@user/digilink)
[23:09:58] <catern> SnoopJ: there's no need to not run code - running code is fine - it's just a matter of removing ambient authority
[23:10:16] <catern> on the broader topic of config as code I wrote http://catern.com/config.html
[23:10:25] *** Joins: Narrat (~omnius@p200300df5f11252206ea56fffe2e7cdc.dip0.t-ipconnect.de)
[23:10:41] <SnoopJ> catern, my point is that it's very hard to distinguish $this kind of code from $that
[23:11:05] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[23:11:37] <SnoopJ> Lack of this kind of granular control is one of the main reasons I have that preference
[23:12:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[23:12:39] <DX099> I ran the code at "https://www.python.org/dev/peps/pep-0513/#platform-detection-for-installers" from within my platform python env
[23:12:59] <DX099> and for glibc 2 17 like in the wheel name, it returns True
[23:13:46] <DX099> if I put the requirement parameters at 2.30, as I'm on 2.28, it fails with False
[23:14:39] *** Joins: LuxuryMode (uid91005@id-91005.charlton.irccloud.com)
[23:14:55] <ice9> I implemented this example https://flask.palletsprojects.com/en/2.0.x/patterns/jquery/ but when i click the link, it does nothing, any idea?
[23:15:14] *** Joins: Ivyy (~Ivyy@2001:a62:41d:fa01:d1fb:2875:a96:4962)
[23:16:38] *** Quits: dolor_avis (~dolor_avi@user-5-173-14-171.play-internet.pl) (Quit: dolor_avis)
[23:16:55] *** Joins: TheWild (~Thunderbi@apn-95-41-74-188.dynamic.gprs.plus.pl)
[23:16:59] <TheWild> hello
[23:17:18] <catern> SnoopJ: I'm not sure what you mean by distinguish code - you meam distinguish code which is impure and making HTTP requests, from code which is pure and doesn't do that?
[23:17:22] <ChrisWarrick> ice9: jquery isn’t something you would use in 2021
[23:17:30] <ice9> ChrisWarrick, what else then?
[23:17:36] <SnoopJ> catern, I mean code that does [thing that isn't okay] vs. code that doesn't
[23:17:42] <ChrisWarrick> ice9: plain javascript can do everything jquery could have with saner syntax
[23:17:53] <TheWild> folks, do we have something like <class 're.Pattern'>.sub(callback, string) ?
[23:17:55] <ChrisWarrick> ice9: anyway… open the console in your browser, are there any errors?
[23:18:21] <ice9> ChrisWarrick, there is no errors at all, so the best way to implement ajax call is by plain javascript?
[23:18:23] <catern> SnoopJ: well... if you're in a file that has no imports and is just making a dictionary... seems easy?
[23:18:27] <ChrisWarrick> ice9: yes
[23:18:33] <TheWild> https://www.php.net/manual/en/function.preg-replace-callback.php
[23:18:52] <ChrisWarrick> TheWild: the docs can answer this question
[23:18:58] <ChrisWarrick> ice9: refresh and look into the console again?
[23:19:10] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[23:19:21] <SnoopJ> catern, if you say so
[23:19:30] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:19:44] <catern> ¯\_(ツ)_/¯
[23:19:50] *** Quits: ATAD (~ATAD@user/atad) (Ping timeout: 252 seconds)
[23:19:53] *** Joins: dibber (~dibber@c-73-14-187-235.hsd1.co.comcast.net)
[23:20:07] <BrenBarn> yeah using code as config I think can lead to problems
[23:20:21] <ice9> ChrisWarrick, why jquery is bad nowadays?
[23:20:29] *** Joins: ATAD (~ATAD@user/atad)
[23:20:39] <BrenBarn> one thing is if you're letting third parties (like users of your lib) write that code-as-config, they have so much freedom they could do something you didn't think of but aren't prepared to support
[23:20:43] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 268 seconds)
[23:20:46] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[23:20:49] <TheWild> ChrisWarrick: there is a difference between "there's no such thing and I have to write it myself" and "oh, there is, I just didn't read carefully". Actually I can't find it.
[23:21:02] *** Joins: digilink (~digilink@user/digilink)
[23:21:04] <ChrisWarrick> ice9: (1) it’s completely unnecessary, modern JS can do all that stuff with much nicer syntax  (2) there are tons of weird behaviors in jquery
[23:21:17] *** Quits: ATAD (~ATAD@user/atad) (Remote host closed the connection)
[23:21:31] <ChrisWarrick> TheWild: "Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl. If the pattern isn’t found, string is returned unchanged. repl can be a string or a function; […]."
[23:21:50] *** Joins: p-i- (~Ohmu@node-ozo.pool-125-24.dynamic.totinternet.net)
[23:22:17] <BrenBarn> TheWild: https://docs.python.org/3/library/re.html#re.Pattern.sub
[23:22:32] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[23:23:08] <catern> BrenBarn: if you're not prepared to support it, don't expose it in your interface
[23:23:33] <SnoopJ> catern, it's hard to do that when the "interface" is "arbitrary code"
[23:24:00] <SnoopJ> especially in a language like Python
[23:24:03] *** Quits: greedom (~greedom@2001:16b8:2eab:8c00:fb86:b59c:1ac7:62c9) (Remote host closed the connection)
[23:24:13] <catern> SnoopJ: huh? I don't understand: the interface is a Python interface, a set of functions and classes exported by your module
[23:24:25] <TheWild> BrenBarn: thanks;
[23:24:25] <TheWild> why I couldn't find it is clear, I landed here: https://docs.python.org/3/howto/regex.html
[23:24:28] <SnoopJ> catern, importing a module runs arbitrary code, full stop
[23:24:38] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[23:24:51] *** Joins: argento (~argent0@168-227-97-34.ptr.westnet.com.ar)
[23:24:51] *** Joins: greedom (~greedom@2001:16b8:2eab:8c00:fb86:b59c:1ac7:62c9)
[23:25:01] *** jmcantre1 is now known as jmcantrell
[23:25:10] <TheWild> however, I have yet to track down why it didn't work when I tried to give it function anyway
[23:25:17] <catern> SnoopJ: oh, we're talking about different kinds of interface. BrenBarn was talking about how users of a library confogure that library
[23:25:23] *** Joins: wyclif (~wyclif@user/wyclif)
[23:25:53] <SnoopJ> catern, well, code-as-config can't really enforce any kind of interface
[23:26:18] <catern> SnoopJ: if I'm a user of your library, you can prevent me from doing a thing (with your library) by not exporting that function from
[23:26:32] <SnoopJ> catern, for wishful values of "prevent," sure
[23:26:41] <catern> your library (modulo the fact that you can do anything in Python)
[23:26:44] <ChrisWarrick> catern: python has no notion of exporting functions
[23:26:47] <SnoopJ> yea, that's kind of a big modulus
[23:27:03] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:27:42] <catern> I mean, if your library takes JSOn to configure it, that doesn't enforce the intercace any more strongly
[23:27:46] <TheWild> clear, I should read error messages with better care :/
[23:27:53] <catern> i can still do whatever i want with your library
[23:28:42] <BrenBarn> catern: but that's exactly what I mean, if you're not prepared to support "anything" then don't let people write "anything", which is what they can do with a code config file
[23:28:58] <SnoopJ> catern, what is the equivalent of calling requests.get() (your example before) in JSON?
[23:29:12] *** Quits: TheWild (~Thunderbi@apn-95-41-74-188.dynamic.gprs.plus.pl) (Quit: TheWild)
[23:29:34] *** jmcantrell is now known as Guest1325
[23:29:35] *** Quits: Guest1325 (~weechat@user/jmcantrell) (Killed (sodium.libera.chat (Nickname regained by services)))
[23:29:35] *** __jmcantrell__ is now known as jmcantrell
[23:29:51] <ChrisWarrick> the equivalent is writing a fancy fuse filesystem that makes a http request when reading config.json
[23:30:51] *** Joins: ephemer0l (~ephemer0l@organizedmagnetism.com)
[23:31:27] <BrenBarn> I'm fine with saying the "interface" is what's documented, that's not the issue.  the problem is that making an HTTP request with some other lib has nothing to do with *your* library's "interface"
[23:31:28] <catern> SnoopJ: the equivalent is that I import yourmodule._internal and start messing around with your internal functions, which is the same thing I would have to do to get around a code-as-config interface
[23:31:29] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:31:36] <SnoopJ> catern, that does not answer my question
[23:32:13] <catern> SnoopJ: it absolutely does? I think we're talking about different things. I'm writing program A, using library B. I want to configure library B. is that what you're talking about, or are you talking about something different?
[23:32:26] *** Joins: magla (~gelignite@55d41815.access.ecotel.net)
[23:32:58] *** Quits: LuKaRo_ (~LuKaRo@p200300dfa714f109fff23dec5b74458c.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[23:33:18] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:33:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:33:27] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Killed (calcium.libera.chat (Nickname regained by services)))
[23:33:27] *** __jmcantrell__ is now known as jmcantrell
[23:33:52] <SnoopJ> catern, you claimed that a library taking JSON does not enforce an interface any more strongly than running arbitrary code.
[23:33:59] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:33:59] *** jmcantrell is now known as Guest218
[23:33:59] *** __jmcantrell__ is now known as jmcantrell
[23:34:07] *** Joins: ttys000 (~ttys000@user/ttys000)
[23:34:28] <BrenBarn> but wasn't your initial problem that you don't want people to import requests and use it to grab their config over HTTP?  that's what you can't prevent, because "import requests" is outside the scope of your own library's interface
[23:34:40] <SnoopJ> If we understand my interface as "I don't want the configuration process to make any requests," I'm not understanding how user-produced JSON is going to create a request.
[23:35:19] <SnoopJ> But if they hand me arbitrary code, they can do that and pretty much anything else that arbitrary code can do.
[23:35:30] <catern> SnoopJ: there's two entities involved here: (the writer of) program A, and (the implementer of) library B
[23:35:35] <BrenBarn> or, if you look at the other way, if all that matters is that they pass valid data to some kind of do_config function provided by your lib, then it doesn't really matter whether they build that data themselves or grab it over HTTP
[23:35:55] <catern> BrenBarn: yes, exactly!
[23:36:15] <BrenBarn> so. . . you do or don't care if they grab their config over HTTP?
[23:36:33] <catern> BrenBarn: well, just the point about a do_config function that just takes valid data. that's equivalent to the library loading JSON.
[23:36:45] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 268 seconds)
[23:36:46] <catern> BrenBarn: as a library writer, *I can't control* what the user does. that's my point
[23:36:49] <SnoopJ> catern, I don't think we're making any headway here, or at least you don't seem very interested in my attempts at clarifying my understanding.
[23:37:01] *** Joins: LuKaRo (~LuKaRo@p200300dfa714f1881c4e96891ae58782.dip0.t-ipconnect.de)
[23:37:09] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:3c73:1ee4:f38f:e0fb)
[23:37:10] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[23:37:32] <SnoopJ> If you as a library author accept configuration from the user, you absolutely have control over what that configuration does if it's not-code
[23:37:34] <catern> BrenBarn: even if I'm loading their config from JSON, if I'm a library writer, I can't stop them from doing all kinds of wacky other things to "configure" things, ultimately up to and including messing with my internals
[23:37:49] <SnoopJ> If the user hands you arbitrary code as configuration, you are executing that user's arbitrary code
[23:37:50] <catern> SnoopJ: "data" is the term you're looking for :)
[23:38:17] *** Quits: Guest218 (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[23:38:18] <SnoopJ> catern, having difficulty reading that remark as anything but condescension, so I think it's time for me to take my leave
[23:38:38] <catern> it wasn't meant to be condescension, sorry
[23:38:54] <catern> but yes, I don't think we're making any headway - thanks for your original answer/looking into audit
[23:39:15] <BrenBarn> I guess I don't understand what you were hoping to make headway toward
[23:39:54] <catern> BrenBarn: well you said something about libraries being configured and I wasn't clear on what you were thinking the advantage was
[23:40:56] <catern> BrenBarn: with the conversation so far, maybe you can restate what you think the advantage of configuring with JSON is for libraries?
[23:41:09] <catern> in the context of the conversation so far, I mean
[23:41:37] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[23:42:02] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 252 seconds)
[23:42:33] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:3c73:1ee4:f38f:e0fb) (Quit: Textual IRC Client: www.textualapp.com)
[23:42:38] *** Joins: noobly (~user@50.38.126.25)
[23:43:49] *** Parts: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) ()
[23:45:13] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[23:45:14] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.2)
[23:45:18] *** Joins: wyclif (~wyclif@user/wyclif)
[23:46:43] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[23:47:14] <BrenBarn> the advantage is it keeps the configuration simple and prevents config files from developing dependencies on other things or doing bad stuff that arbitrary code can do (like deleting files, eating up all your memory, etc.)
[23:48:15] <catern> but again: I'm the user of your library, I'm the one creating this config in the first place, so if I want to do any of that... I already can, right?
[23:49:03] <catern> (this would be different if it wasn't a library - if it was a standalone application, for example, or a service or something)
[23:50:10] *** Joins: shoobie (~shoobie@user/shoobie)
[23:50:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[23:53:44] *** Joins: parzival (~parzival@user/parzival)
[23:54:56] *** Quits: jamiejackson (~jamiejack@207.172.87.34) (Quit: Connection closed)
[23:55:14] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 272 seconds)
[23:57:40] *** Joins: pnoud (~pnoud@user/pnoud)
[23:57:59] *** jinsun_ is now known as jinsun
[23:58:18] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[23:58:49] *** Joins: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[23:59:49] *** Quits: shoobie (~shoobie@user/shoobie) (Quit: .)
