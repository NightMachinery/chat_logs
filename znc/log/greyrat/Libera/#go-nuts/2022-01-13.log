[00:00:00] <b0nn> maxstacksize
[00:00:50] <Nigthknight> b0nn: https://pastebin.com/Eu4gxCfG it cannot find a statement. But with only a dummy test it does create the breakpoint
[00:01:32] <b0nn> heh, I was just complaining about something similar on twitter yesterday :)
[00:02:03] <b0nn> you know that you can set breakpoints relative to the start of a function?
[00:02:30] <b0nn> eg. b main.main:2 is the second line in the main function in the main package
[00:03:47] <b0nn> What's that line in your source code, is it a statement, comment, whitespace?
[00:05:58] <Nigthknight> no I did not knew. It is the beginning of a function
[00:06:49] <b0nn> When a test compiles it (sometimes) injects stuff into the AST, that /may/ be screwing with your delve (and is a bug IMO)
[00:08:57] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com)
[00:09:22] *** Joins: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea)
[00:09:40] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[00:10:34] <Nigthknight> Ah thank you! So I just tried to use the relative syntax you mentioned and now it just said 'location not "gol.NewGame:1" not found
[00:10:44] *** Parts: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea) ()
[00:13:04] <b0nn> and gol is the package name that NewGame is in?
[00:13:16] <tar_xvf> can i make a snarky comment
[00:13:19] <Nigthknight> Yes it is
[00:13:35] <b0nn> It almost sounds like delve cannot see that file - is it being compiled
[00:13:56] <tar_xvf> i like that ProhtMeyhet in the github issue about unsigned slice length pasted the Doug Gwyn quote, for a language that fails if you have an unused variable.
[00:16:08] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:16:09] <b0nn> Nigthknight: if you put a break point in your main, and step through, you do pass through that file, right?
[00:17:02] *** Quits: orthoplex64 (~crm@70.120.0.94) (Remote host closed the connection)
[00:17:08] *** Joins: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com)
[00:17:26] *** Joins: orthoplex64 (~crm@70.120.0.94)
[00:18:25] *** Joins: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea)
[00:19:14] <Nigthknight> The funny thing about that is, that if I remove all test except for one just calling this function I can set a breakpoint also with relative syntax o.O
[00:19:54] <b0nn> hmm, really hard to debug without seeing the code
[00:20:03] <Nigthknight> I currently do not have a main. I'm only working with 'go test' atm
[00:20:44] <b0nn> delve test -test.run TestFoo
[00:21:01] <pyzozord> what did I just do, it looks like I started reading the code from the memory https://imgur.com/a/yIVOnO1
[00:21:15] <b0nn> The funny thing, up until a day or two ago I hadn't used delve in a year
[00:21:43] <pyzozord> oh nevermind, it always outputs that fail and that code
[00:22:04] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[00:22:56] *** Joins: Atque (~Atque@user/atque)
[00:23:46] <pyzozord> is there a way to make go doc list all standard packages
[00:24:03] *** buu_ is now known as buu
[00:26:56] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:27:28] <pyzozord> also is there a way to run go with variables that are unused, just for test, it's annoying I need to keep the code clean even for fast checks
[00:27:48] <b0nn> I comment them
[00:28:08] <b0nn> vim-commentary means it's a matter of going to the line and hitting the hotkey
[00:28:57] <b0nn> If go build allowed things for "just a debug build" - you /know/ that means that that code will end up in prod
[00:29:23] <tar_xvf> b0nn: i was about to say that. a go unsafe build would be nice for testing but im sure they have their reasons for not letting unused variables get into prod
[00:29:38] <j416> pyzozord: _ = yourvariable
[00:29:59] <b0nn> Although, I am a proponent of the idea that Go, like Rust, and gnu compilers, has "levels' of optimisation that you can ask for at build time
[00:30:48] <b0nn> Go build project --passes 6
[00:31:31] <pyzozord> I'm trying to use a named return to return a map
[00:31:34] <pyzozord> how can I do that?
[00:32:39] <pyzozord> meaning this but working https://go.dev/play/p/SO8pWCVwf0J
[00:32:48] <pyzozord> I get now panic: assignment to entry in nil map
[00:32:55] <tar_xvf> https://go.dev/play/p/K80Yl-0TtMM
[00:32:57] <tar_xvf> try this pyzozord
[00:33:04] <b0nn> maps need to be initialised
[00:33:11] <tar_xvf> yep, b0nn
[00:33:23] *** Parts: cvemys (~cvemys@user/cvemys) ()
[00:33:31] <pyzozord> yes that works, but I was trying to avoid using make, and seeing how maps interact with named returns
[00:33:36] <tar_xvf> and you can leave out the name of the variable of the return, if you like
[00:34:03] <tar_xvf> i think you need to include make
[00:34:08] <pyzozord> I see so the answer is "they don't interact"
[00:34:33] <b0nn> no
[00:34:51] <b0nn> if you were to do a var foo map[string]int you'd get the same error
[00:35:05] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Quit: Either rebooting or something broke.)
[00:35:11] <b0nn> It's the nil default value
[00:35:22] <pyzozord> I get it
[00:35:49] <pyzozord> I have now this, but isn't there a better way to avoid writing the same type twice? https://go.dev/play/p/Wkbw0tdYSNL
[00:36:04] <tar_xvf> i just realized you could do this: func stuff() (v []int) { v = append(v, 2); return }
[00:36:17] <foobaz> pyzozord: you could declare a custom type
[00:36:22] <b0nn> tar_xvf: that's append being funky though
[00:36:29] *** Quits: dr0n (~nabromov@92.40.255.113.threembb.co.uk) (Ping timeout: 256 seconds)
[00:36:30] <tar_xvf> b0nn: yeah lol
[00:37:21] <pyzozord> is named returned used a lot in practice?
[00:37:33] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[00:37:44] <b0nn> There's a comment about it on the code review comments page I think
[00:37:47] <tar_xvf> yes if you don't name the variable you will be returning in the function declaration
[00:38:00] <b0nn> generally speaking, it makes code confusing unless the function is only a few lines long
[00:38:11] <pyzozord> yeah
[00:38:29] <pyzozord> and if function is just few lines long one might as well type in the name of the variable being return at return time
[00:38:29] <b0nn> mind you, so do globals (and pointers!)
[00:38:54] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:39:01] <tar_xvf> pyzozord: true
[00:39:02] <pyzozord> kind of feels like that's dead weight in the syntax
[00:39:11] <b0nn> pyzozord: I mean, that's a style thing - I myself have toyed with naked returns, but largely don't bother with them now
[00:39:22] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[00:39:28] <tar_xvf> idk, unmnamed return is not something i would have thought of when designing go, but it's there ig
[00:40:06] <b0nn> this is fun: func Foo(i, j int) (x,y,z int, err error) {}
[00:41:41] <Nigthknight> I may have an explanation for my issue. Could it be that I can only create a bp somewhere the current TestFunc can reach?
[00:41:44] *** Ekho- is now known as Ekho
[00:42:09] <b0nn> https://go.dev/play/p/dxLqadCbpaY
[00:42:31] <Nigthknight> I removed all tests except one and then I can create a bp but not everywhere
[00:42:35] <b0nn> Nigthknight: it's possible, but not something I would have expected
[00:43:30] <b0nn> my naked return play shows how quickly they can get funky
[00:45:42] *** Quits: zim (~zim@dynamic-089-012-185-100.89.12.pool.telefonica.de) (Ping timeout: 256 seconds)
[00:45:53] <b0nn> thankfully you cannot duplicate var names  func Foo(i, j int) (i, y, j int, err error){ return} dies in a compile time fire like it should
[00:46:15] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[00:46:29] *** Joins: mickey8 (~user@user/mickey)
[00:47:05] <Nigthknight> b0nn: I'm almost certain now. Thank your for your support!
[00:47:43] <b0nn> heh - np, I learned something from your issue
[00:48:51] <b0nn> I wonder if it's a combo of what pyzozord  was asking about - that is the test builder drops all the unused code
[00:48:53] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[00:51:45] *** Joins: hanzo (uid532183@user/hanzo)
[00:51:49] *** Quits: purpleid1a (~james@user/purpleidea) (Ping timeout: 240 seconds)
[00:59:34] *** Quits: analogsalad (~analogsal@user/analogsalad) (Quit: bye)
[01:01:17] <Nigthknight> Yeah, maybe. Have a good night/nice day
[01:01:53] *** Parts: Nigthknight (~Nigthknig@user/nigthknight) ()
[01:03:55] <pyzozord> working on https://go.dev/tour/moretypes/26, came up with this https://go.dev/play/p/WSYcXC40Uw8, is there any way to make it more elegant, get rid of that tmp?
[01:04:25] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[01:04:49] *** Joins: mickey8 (~user@user/mickey)
[01:04:57] <pyzozord> i tried defer return i, but that sadly didn't work
[01:05:23] *** Quits: cim (~cim@205.185.117.110) (Ping timeout: 256 seconds)
[01:05:32] *** Joins: dr0n (~nabromov@92.40.255.113.threembb.co.uk)
[01:06:44] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Quit: Either rebooting or something broke.)
[01:07:00] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[01:07:57] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:08:17] <b0nn> just return i :P https://go.dev/play/p/RfTRpPl55TM
[01:08:18] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Client Quit)
[01:08:34] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[01:09:15] <pyzozord> that way you miss the first number in the sequence
[01:09:40] <b0nn> you can print it before the function starts
[01:10:19] <pyzozord> has to be returned
[01:11:39] <b0nn> I eman, it's not pretty https://go.dev/play/p/ACtZDp__Zcq
[01:11:45] <b0nn> mean*
[01:12:02] *** Quits: bkicher_ (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689) (Ping timeout: 240 seconds)
[01:13:26] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com)
[01:16:06] <pyzozord> that's just cheating :P
[01:17:05] <pyzozord> go tour does not mention pointers at all? That's so strange
[01:17:32] <b0nn> huh https://go.dev/tour/moretypes/1
[01:17:44] <pyzozord> oh sorry it does
[01:17:47] <pyzozord> i already forgot
[01:18:11] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:18:30] <b0nn> WRT cheating - that's what I love about being a programmer - I make the rules (unfortunately the universe has a sense of humour and enjoys making me regret making some of those rules though)
[01:19:16] <j416> pyzozord: about defer, it needs a function call, so you can do: https://go.dev/play/p/3ZM-Ryg-9Nv
[01:19:34] <pyzozord> ooh, not bad
[01:19:56] <pyzozord> I wish I could just do expression without funciton call
[01:20:18] <Kaivo> b0nn: We are the gods of our own little software. And sometimes we cause hurricanes and wildfires.
[01:20:30] <b0nn> lol
[01:21:02] <j416> pyzozord: spoiler https://go.dev/play/p/tQ-taxNIl1x
[01:21:03] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:21:18] <pyzozord> oh not bad either
[01:21:40] <pyzozord> but that's hmm... trading space for time
[01:21:59] <pyzozord> i prefered less time more space, just syntax was a bit ugly
[01:22:15] <pyzozord> *less time more space [used]
[01:23:16] *** sh1bum1 is now known as shibumi
[01:23:50] <j416> pyzozord: https://go.dev/play/p/jVUdLMr676k
[01:24:01] <b0nn> hmm - wouldn't you prefer a memoization solution then?
[01:26:31] *** Joins: roshanavand_ (~roshanava@p200300d47f01a3003c64921933d38027.dip0.t-ipconnect.de)
[01:27:54] <b0nn> This si someone elses code (I took all the timing and naieve code out https://go.dev/play/p/fpLtfm_3Aqt
[01:28:08] <b0nn> from https://blog.john-pfeiffer.com/dynamic-programming-and-memoization-and-the-compute-versus-storage-tradeoff/
[01:29:06] <foobaz> it is after all one of the two hard problems in computer science
[01:29:54] <j416> fizzbuzz, fibonacci, and off-by-three
[01:30:17] <b0nn> 1) naming things, 2) caching, 17) Debugging Asynchronous code,  3) off by one errors,
[01:30:35] <b0nn> That list keeps growing every time I see it
[01:32:44] *** Joins: bluedust (~bluedust@59.89.219.209)
[01:34:43] *** Quits: soxhlet (~soxhlet@81.171.29.137) (Quit: <---)
[01:41:31] *** Joins: roshanavand__ (~roshanava@185.213.155.160)
[01:44:00] *** Quits: roshanavand_ (~roshanava@p200300d47f01a3003c64921933d38027.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[01:45:18] <pyzozord> b0nn if you study it carefully the ij solution is the same concept just much more elegant implemention, it uses the same fundamental principles of Dynamic Programming, but instead of linear space it uses constant space by only keeping track of the last two values in the list, it's also much simpler  code
[01:46:22] <pyzozord> The memoization one is top down dynamic programming with recursion, the iterative solution is bottom up dynamic programming
[01:46:58] <pyzozord> There might be even a closed form solution for fibs but I'm not good with numbers
[01:51:05] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5596:1e3f:6f49:8869)
[01:51:46] *** Joins: rcernin_ (~rcernin@101.189.141.138)
[01:52:51] *** Joins: cim (~cim@205.185.117.110)
[01:55:50] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5596:1e3f:6f49:8869) (Ping timeout: 268 seconds)
[01:57:06] *** Quits: fikran_ (~fikran@user/fikran) (Ping timeout: 256 seconds)
[01:58:47] *** Joins: fikran_ (~fikran@user/fikran)
[01:59:14] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: The Lounge - https://thelounge.chat)
[02:00:04] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:01:07] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[02:01:15] *** Quits: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it) (Quit: Leaving)
[02:02:01] *** Joins: walterwhip (~www@user/walterwhip)
[02:03:51] <fikran_> is there an equivalent of a "deep copy" in golang?
[02:03:53] <fikran_> for a map.
[02:04:28] <b0nn> no
[02:04:34] <b0nn> you have to write it yourself
[02:05:22] <j416> pyzozord: https://go.dev/play/p/8YFYTbyAXSM :D
[02:06:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[02:06:26] *** Joins: thatcher (~thatcher@91.110.109.236)
[02:07:15] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[02:07:49] <j416> but it breaks with (maybe) rounding error after on 144 (says 143)
[02:07:58] <j416> s/after //
[02:14:55] *** Joins: Tach (~Tach@user/tach)
[02:15:01] *** Joins: vt (~vt@osa.vbc.su)
[02:20:21] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Quit: mikoto-chan)
[02:20:29] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[02:20:48] *** Joins: spectern[m] (~specternm@2001:470:69fc:105::1:6842)
[02:22:01] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[02:25:35] *** Quits: The_Loko (~The_Loko@79.116.24.80) (Quit: Leaving)
[02:30:16] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:30:43] *** Quits: rcernin_ (~rcernin@101.189.141.138) (Quit: WeeChat 3.3)
[02:31:15] *** Joins: rcernin (~rcernin@101.189.141.138)
[02:32:50] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[02:32:59] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[02:33:22] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[02:35:22] *** Joins: Tach_ (~Tach@89.205.227.226)
[02:35:33] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[02:38:28] *** Quits: Tach (~Tach@user/tach) (Ping timeout: 256 seconds)
[02:38:40] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[02:40:39] *** Joins: leonarth (~leonarth@user/leonarth)
[02:41:37] *** Joins: Maxattax97 (~max@2603:300f:b9f:2000::b278)
[02:42:45] *** Quits: Tach_ (~Tach@89.205.227.226) (Quit: Tach_)
[02:43:59] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[02:46:13] *** Quits: grumb2 (~grumb@rint.osaka) (Quit: The Lounge - https://thelounge.chat)
[02:46:17] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: Textual IRC Client: www.textualapp.com)
[02:48:10] *** Joins: grumb2 (~grumb@rint.osaka)
[02:50:29] *** Joins: vladoski (~foo@2001:b07:add:d406:6153:a55b:8d72:81e6)
[02:53:03] <vladoski> hi, I don't know anything about go and it's ecosystem. I just need to use a module that i've downloaded via go get -u. I've seen that go downloads it in $home/go and that's okay for me. Since I need this executable in my PATH, do you thing that's a good call putting $home/go in my path?
[02:53:39] <b0nn> If you have an executable, why not move that to your $PATH
[02:53:46] *** Quits: roshanavand__ (~roshanava@185.213.155.160) (Ping timeout: 256 seconds)
[02:53:46] *** Quits: siXy (~jfindley@centos/ops/sixy) (Ping timeout: 256 seconds)
[02:54:08] <b0nn> I mean, you can add lots to your $PATH if you want, but if this is a once off...
[02:56:02] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[02:56:04] <vladoski> b0nn in this case if I move it from $home/go, can I still update it with go get -u?
[02:56:39] *** Quits: Maxattax97 (~max@2603:300f:b9f:2000::b278) (Quit: WeeChat 3.3)
[02:57:03] <b0nn> nah, if you move it you'll be managing it
[02:57:22] <b0nn> also go get will put it in $GOPATH/bin
[02:57:30] <b0nn> when it compiles
[02:57:31] <fizzie> Or $GOBIN, if that's set.
[02:57:59] <b0nn> actually, $GOBIN is easier - pop that into your $PATH
[02:58:03] <b0nn> assuming it's set
[02:59:12] <fizzie> If you already have a per-user "my own binaries" directory, a reasonable action is to point GOBIN there. Of course not the only way to do things.
[02:59:51] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[03:00:07] <vladoski> b0nn I don't have $GOPATH set
[03:00:46] <vladoski> i don't mind having my go binaries in $home/go/bin
[03:00:55] <vladoski> so I should just set $GOBIN to that?
[03:01:12] <fizzie> If you're okay with that, it's already the default.
[03:01:36] <fizzie> The place it'll put binaries is $GOBIN if that's set; if not, then $GOPATH/bin if GOPATH is set; and finally ~/go/bin if neither is set.
[03:02:00] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Ping timeout: 250 seconds)
[03:02:02] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com)
[03:02:03] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com) (Client Quit)
[03:02:14] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[03:03:31] <vladoski> okay that makes sense
[03:03:33] <vladoski> thanks guys
[03:04:23] *** Joins: lilgopher (~textual@2601:241:8000:38f0:e042:e545:8e69:b5be)
[03:08:00] <lilgopher> I'm thinking how I will be able to convince my coworkers of starting to use interfaces to be able to inject dependencies. Our golang backend codebase has over 100,000 lines of code and we still are not using even one interface, and therefore we cannot really do integration testing(and the amount of unit testing we can do is very limited). I believe the pattern we are using is ok, just a domain layer, a couple of storage
[03:08:00] <lilgopher>  layers and microservices. My main worry when I try to expose them to interfaces is that they are going to think it is crazy having to define an interface for the database with all those function signatures and add a function signature every time they add a function. I'm looking if there is any tools that automate this process easily
[03:09:43] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[03:10:47] <lilgopher> I cant believe I have to even worry about introducing this without pushback xD
[03:13:21] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[03:13:49] <b0nn> I'm in a codebase that's coupled to AWS - and I am being told to migrate it to GCP - I *wish* that the original author(s) understood SOLID
[03:14:32] <b0nn> the Dependency Reversal interfaces brings to the table is gold
[03:14:33] <lilgopher> btw b0nn you introduced me to this concept like one year ago, THANK YOU xD
[03:14:50] <b0nn> heh, np :)
[03:15:51] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:18:08] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[03:19:43] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com)
[03:20:43] <fikran_> Is there a way to detect memory corruption issues?
[03:21:04] <fikran_> I am 99% certain I have some sort of memory issue around a map in concurrency, despite a mutex to protect it
[03:21:13] <b0nn>  what makes you think that you have memory corruption issues?
[03:21:50] <b0nn> If you are getting a nil pointer problem, that's because the map was never initialised
[03:21:50] <fizzie> The race detector is always worth a spin, at least.
[03:21:51] <fikran_> because seemingly accessing this map makes a random error happen that...I don't even know where/why it happens
[03:21:59] <fikran_> the map isn't empty.
[03:22:08] <fikran_> I tried to Marshal() a map
[03:22:28] <fikran_> and it comes back with this error: unsupported type: func(*http.Request) (*url.URL, error)
[03:22:44] <fizzie> Someone's put a function in your map.
[03:22:44] <fikran_> but why? I didn't send a func(*http.Request)
[03:22:52] <fikran_> no, i didn't send a function
[03:23:04] <fikran_> its a map.
[03:23:17] <fikran_> bytes, err := json.Marshal(runninginstances)
[03:23:21] <fikran_> runninginstances is a map for certain.
[03:23:21] <fizzie> Yes, but what is it a map of?
[03:23:31] <b0nn> face{}
[03:23:38] <b0nn> interface{}*
[03:23:40] <fikran_> var runninginstances map[string]shared.RunningInstance
[03:23:52] <fizzie> And what's a `shared.RunningInstance`?
[03:23:57] <fikran_> let me share code...
[03:24:14] <fizzie> You'd get that same error if anywhere in the map there's a value that has a function type. Even indirectly.
[03:24:26] <fikran_> https://gitlab.com/khanzf/fedilogue/-/blob/master/shared/headers.go#L53
[03:24:36] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:24:47] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:24:52] <destroycomputers> fikran_, did you try to ignore the http.Client field as I suggested last time?
[03:25:02] <fizzie> fikran_: `http.Client` isn't something you can marshal.
[03:25:31] <fikran_> ohhh! destroycomputers
[03:25:38] <fikran_> did I miss that suggestion?
[03:25:46] <fikran_> embarrassed...
[03:25:58] <destroycomputers> We discussed it last time, I've even pointed out you the line where you should add the json:"-" tag
[03:26:56] <fikran_> alright, as not to waste anyone's time let me check the logs. I'm sorry.
[03:26:59] <fikran_> chat logs.
[03:27:15] <destroycomputers> fikran_, no worries
[03:30:01] <fikran_> I see the documentation now.
[03:30:41] <fikran_> pretty sure my code sucks
[03:30:44] *** fikran_ is now known as fikran
[03:33:05] *** Quits: vladoski (~foo@2001:b07:add:d406:6153:a55b:8d72:81e6) (Quit: Textual IRC Client: www.textualapp.com)
[03:34:35] *** Joins: bluedust_ (~bluedust@185.195.232.135)
[03:36:41] *** Quits: anandn (~anandn@2601:600:a27f:d92d:6c3b:dc86:41f9:d3cb) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:37:41] *** Joins: Tach_ (~Tach@89.205.227.226)
[03:37:58] *** Quits: bluedust (~bluedust@59.89.219.209) (Ping timeout: 250 seconds)
[03:38:13] <b0nn>  can assure you that my code does, indeed, sucketh m0ar
[03:38:36] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[03:39:24] *** Quits: Tach_ (~Tach@89.205.227.226) (Client Quit)
[03:40:50] *** Joins: Tach (~Tach@user/tach)
[03:40:59] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:41:57] *** Joins: nitrix (~nitrix@user/nitrix)
[03:42:03] * tar_xvf code sucks the most because he is too used to C
[03:42:10] *** Joins: Tach_ (~Tach@89.205.227.226)
[03:46:28] *** Quits: Tach (~Tach@user/tach) (Ping timeout: 256 seconds)
[03:48:40] *** Quits: hoppity (~hoppity@user/hoppity) (Remote host closed the connection)
[03:51:03] *** Joins: Torr (~Torr@user/torr)
[03:52:39] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[03:53:58] *** Joins: nitrix (~nitrix@user/nitrix)
[03:58:28] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:58:54] *** Joins: anandn (~anandn@98.232.3.180)
[04:00:34] *** Quits: Tach_ (~Tach@89.205.227.226) (Quit: Tach_)
[04:01:03] *** Joins: Tach (~Tach@user/tach)
[04:01:38] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[04:03:38] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[04:06:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[04:08:08] *** Joins: fikran (~fikran@user/fikran)
[04:10:14] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[04:16:53] *** Joins: walterwhip (~www@user/walterwhip)
[04:18:03] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[04:18:52] *** Joins: walterwhip (~www@user/walterwhip)
[04:18:57] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[04:19:34] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[04:20:22] *** Joins: walterwhip (~www@user/walterwhip)
[04:23:15] *** Joins: Guest15 (~Guest15@2601:285:302:7b90:9f2:9732:80ff:913f)
[04:24:10] *** Parts: Guest15 (~Guest15@2601:285:302:7b90:9f2:9732:80ff:913f) ()
[04:26:03] *** Quits: Tach (~Tach@user/tach) (Quit: Tach)
[04:30:15] <fikran> I installed pprof but I'm concerned that it only finds memory leaks when you have a LOT of memory leaking
[04:30:22] <fikran> I also find it a little hard to use...
[04:35:10] *** Joins: zim (~zim@dynamic-089-012-185-100.89.12.pool.telefonica.de)
[04:36:45] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[04:39:11] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:40:28] *** Quits: zim (~zim@dynamic-089-012-185-100.89.12.pool.telefonica.de) (Quit: Leaving)
[04:44:42] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 250 seconds)
[04:45:25] *** Joins: rd (~rd@pool-108-54-98-204.nycmny.fios.verizon.net)
[04:45:59] *** Quits: rd (~rd@pool-108-54-98-204.nycmny.fios.verizon.net) (Client Quit)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:23] *** Joins: arinov (~arinov@213.194.126.155)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:50:21] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com)
[04:51:25] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[04:51:31] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:01:03] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[05:01:27] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[05:01:48] *** Quits: anandn (~anandn@98.232.3.180) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:08:50] *** Joins: popey (~popey@ubuntu/member/popey)
[05:10:17] <seebs> pprof doesn't so much find or not-find memory leaks, as just tells you how much memory you're allocating and where. whether those are leaks or large data structures is really up to you.
[05:12:25] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Ping timeout: 250 seconds)
[05:13:00] *** Joins: anandn (~anandn@2601:600:a27f:d92d:e83d:324a:8daa:9f9f)
[05:14:34] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[05:17:26] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[05:19:46] <fikran> seebs: yeah thats my concern. wondering if an IDE can predict leaks...
[05:20:19] <seebs> so the good news and the bad news are the same:
[05:20:36] <seebs> you literally can't have a "memory leak" in a garbage-collected language, by definition -- every memory that is still allocated is reachable. :P
[05:20:46] <fikran> oh yeah :)
[05:21:27] <seebs> so the usual failure mode is to be keeping references you don't actually plan to use again, and i think some static analysis tools can sometimes spot this, but it's hard. usually the strategy is to just run the thing for a while and see which slots in a heap-in-use chart are still growing and which are staying the same.
[05:24:45] <fizzie> The `-diff_base` option can be particularly useful. As in, run for a while, capture a profile, run for a second while, capture another profile, and compare. Grouping by location of allocation can also help pinpoint which things are being permanently retained.
[05:27:11] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[05:27:29] *** Quits: anandn (~anandn@2601:600:a27f:d92d:e83d:324a:8daa:9f9f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:30:47] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[05:30:59] *** Joins: mickey8 (~user@user/mickey)
[05:33:57] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:41:34] *** Joins: califax- (~califax@user/califx)
[05:42:46] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[05:44:32] *** Quits: bluedust_ (~bluedust@185.195.232.135) (Remote host closed the connection)
[05:44:48] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:44:49] *** califax- is now known as califax
[05:56:30] *** Joins: neurocyte091705 (~neurocyte@IP-045010062077.dynamic.medianet-world.de)
[05:56:30] *** Quits: neurocyte091705 (~neurocyte@IP-045010062077.dynamic.medianet-world.de) (Changing host)
[05:56:31] *** Joins: neurocyte091705 (~neurocyte@user/neurocyte)
[05:58:48] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:58:48] *** neurocyte091705 is now known as neurocyte09170
[06:01:54] *** Joins: moog_ (~moog@107.77.244.71)
[06:02:02] *** Joins: notevil (~notevil@user/notevil)
[06:02:15] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[06:02:45] <seebs> i once had a lovely problem in which i was tracking resources getting allocated and freed, and i appeared to have a memory leak, which was impossible because i had a list of every object of that type i had ever allocated and could verify that they were all freed
[06:04:01] *** Quits: moog (~moog@107.77.244.71) (Ping timeout: 256 seconds)
[06:07:02] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 250 seconds)
[06:08:15] *** Joins: bluedust (~bluedust@185.195.232.135)
[06:11:28] * b0nn is dying to find out if it was the list keeping things allocated
[06:12:17] <b0nn> s/list/list that was
[06:13:15] *** Joins: siXy (~jfindley@centos/ops/sixy)
[06:15:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:17:29] *** Joins: fikran (~fikran@user/fikran)
[06:23:42] *** Joins: anandn (~anandn@98.232.3.180)
[06:25:19] *** Quits: anandn (~anandn@98.232.3.180) (Client Quit)
[06:28:48] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[06:34:05] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:36:37] *** Joins: darkapex_ (~darkapex@user/darkapex)
[06:37:25] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com)
[06:38:01] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[06:39:42] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[06:39:42] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[06:40:09] *** Joins: anandn (~anandn@2601:600:a27f:d92d:e83d:324a:8daa:9f9f)
[06:41:30] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[06:43:23] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[06:43:39] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:54:19] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[06:58:59] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[06:59:17] <seebs> b0nn: yes, yes it was.
[06:59:32] <seebs> because, in order to detect double-frees (and report them), i kept a map with the items seen so far as keys
[07:00:03] <seebs> this is actually the best use case i've yet had for a weak-keyed map, where the keys won't count as references if they are the *only* reference to a thing, and can thus be freed and removed from the map.
[07:01:08] <b0nn> :)
[07:02:52] <b0nn> I've often wondered (and I read somewhere but cannot recall the answer) why a reference counter isn't built into the GC, instead of a mark & sweep run
[07:03:03] <b0nn> I mean, effectively, that'
[07:03:37] <b0nn> sthat's what Rust is doing, right, as soon as the allocated object's final reference is dropped then it's given the heave-ho
[07:04:23] <b0nn> I have a copy of the GC book referenced in the Go GC code, but have never read it
[07:04:45] *** Quits: anandn (~anandn@2601:600:a27f:d92d:e83d:324a:8daa:9f9f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:12:12] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[07:13:51] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[07:16:13] *** Quits: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea) (Quit: KonaArctic)
[07:30:05] *** Quits: mooff (mooff@awful.cooking) (Remote host closed the connection)
[07:31:08] *** Joins: souvik (~souvik@103.59.73.33)
[07:31:28] <fizzie> The usual explanation is, (a) pure reference-counting GCs have problems with cyclic data structures, and (b) while updating the reference counts might *sound* super-cheap, it's actually not, since it has to happen every time the reference situation changes, while a GC cycle is only needed every now and then.
[07:31:34] <fizzie> And generational GCs take care of the "short-lived objects get reclaimed quickly" property equally well.
[07:31:40] <fizzie> (I've no idea of Go's GC's details, those were just general comments.)
[07:32:08] *** Joins: mooff (mooff@awful.cooking)
[07:33:22] <fizzie> Guessing in Go's case it's actually the escape analysis and stack allocation that deals with short-lived temporaries though.
[07:35:15] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[07:35:24] *** Quits: souvik (~souvik@103.59.73.33) (Ping timeout: 256 seconds)
[07:36:10] *** Joins: souvik (~souvik@80.179.69.241.cable.012.net.il)
[07:36:23] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:39:22] *** Quits: moog_ (~moog@107.77.244.71) (Ping timeout: 256 seconds)
[07:42:15] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[07:50:01] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[07:51:34] <b0nn> Sounds right :)
[07:51:55] <b0nn> git st
[07:54:08] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[07:54:31] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[07:57:18] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:02:50] *** Joins: purpleidea (~james@user/purpleidea)
[08:03:11] *** Joins: anandn (~anandn@98.232.3.180)
[08:03:51] <KirkMcDonald> Python is the most significant example of a reference-counted GC that comes to mind.
[08:04:09] *** Quits: anandn (~anandn@98.232.3.180) (Client Quit)
[08:04:10] <KirkMcDonald> And it *also* has a mark & sweep GC for detecting and collecting cycles.
[08:06:11] <KirkMcDonald> The reference counting is the cause of both good performance (it's really very cheap in the context of the Python interpreter) and bad (the GIL).
[08:06:38] *** Joins: anandn (~anandn@2601:600:a27f:d92d:a176:1395:81f9:b649)
[08:07:14] <KirkMcDonald> You wouldn't want (for example) Go's GC to use reference counting, because the counts have to be synchronized.
[08:08:32] *** Quits: anandn (~anandn@2601:600:a27f:d92d:a176:1395:81f9:b649) (Client Quit)
[08:08:45] *** Quits: bluedust (~bluedust@185.195.232.135) (Remote host closed the connection)
[08:17:37] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[08:20:31] *** Joins: anandn (~anandn@2601:600:a27f:d92d:a908:fe4a:67d7:11cf)
[08:21:24] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:25:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[08:25:44] *** Quits: LiENUX (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:25:56] *** Joins: LiENUS (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net)
[08:26:50] *** Joins: fikran (~fikran@user/fikran)
[08:28:57] *** Joins: walterwhip (~www@user/walterwhip)
[08:35:00] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[08:39:02] *** Joins: bluedust (~bluedust@185.195.232.135)
[08:51:08] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[08:53:24] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:56:21] *** Joins: Leon__ (~Leon@249.sub-174-198-197.myvzw.com)
[08:58:23] <okt> When trying to build a go application I'm met with a fatal error where a system header is not found, passing CGO_CFLAGS="-I/usr/local/include" gets me to a linker error. Is there another flag I should be using as well to try to coerce this into building?
[08:59:25] *** Quits: Guest1499 (~Leon@249.sub-174-198-197.myvzw.com) (Ping timeout: 240 seconds)
[09:02:03] <foobaz> instead of using environment variables, you can put the necessary compiler flags in the source code file by using cgo directives
[09:02:48] <foobaz> and instead of specifying CFLAGS directly, you can specify a pkg-config file
[09:03:07] <foobaz> that way it will work on distributions that install the headers and libraries in a different place
[09:03:22] <foobaz> there is some good documentation on these things here: https://pkg.go.dev/cmd/cgo
[09:03:29] <okt> Hmm, I see.
[09:03:35] <okt> Yes, that is the page I am reading, :)
[09:04:05] <foobaz> are you using bsd? /usr/local/include is a common header path on bsd
[09:04:10] <okt> Application is Gomuks, not sure if you are familiar.
[09:04:15] <okt> Yes, OpenBSD
[09:04:27] <foobaz> nice, i use freebsd myself for servers
[09:05:10] <foobaz> so this is not your own application? you're trying to compile code someone else wrote?
[09:05:30] <foobaz> if so, it's probably not worthwhile to fix the source code as i suggested, i assumed you were the developer
[09:05:38] <okt> Yeah I am trying to patch a few things I'd like in there over the package distributed.
[09:05:53] <foobaz> how about just using the CGO_LDFLAGS environment variable
[09:05:55] <okt> yeah that was the reason i was considering the ENV
[09:06:02] <okt> :)
[09:06:34] <foobaz> and file a bug with the developer telling him to use a "cgo pkg-config" directive
[09:06:49] <foobaz> i bet he hard-coded the linux include path or something
[09:07:51] <okt> Usually the case
[09:11:20] <foobaz> actually i'm not seeing any hard-coded include paths in here
[09:11:32] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[09:11:33] <okt> I think it's in matrix
[09:12:49] *** Joins: fef (~thedawn@user/thedawn)
[09:13:13] <foobaz> i guess /usr/local/include is not in the default path gcc looks in, so no hard-coded paths works the same way as the wrong hard-coded path
[09:14:25] <okt> when in doubt... check the open issues. :doh:
[09:14:37] <okt> https://github.com/tulir/gomuks/issues/292 worked perfectly.
[09:16:26] <foobaz> i see that olm installs a .pc file
[09:16:35] <foobaz> so using a cgo pkg-config directive would indeed fix this
[09:16:54] <foobaz> but, that's for the gomuks developer to do, not you
[09:17:05] <okt> I'll read up and possibly send a PR
[09:17:18] <foobaz> this is exactly the type of problem pkg-config was designed to fix
[09:17:30] <foobaz> and the olm developer kindly provided the necessary .pc file
[09:18:12] <okt> I certainly have /usr/local/lib/pkgconfig/olm.pc
[09:18:45] <foobaz> take a look inside, it has the CFLAGS and LDFLAGS to use
[09:19:09] <okt> Oh brilliant
[09:19:11] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[09:19:54] <foobaz> the way it's supposed to work is, the .pc file can specify /usr/local on bsd and /usr on linux, you tell go to use the .pc file, and everything just works
[09:20:22] <foobaz> but if you don't tell go about the .pc file, and you don't tell gcc to look in /usr/local by default, nothing knows where to find the library
[09:22:13] <okt> makes sense
[09:28:44] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 256 seconds)
[09:33:00] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:33:09] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[09:35:10] *** Quits: nitrix (~nitrix@user/nitrix) (Read error: Connection reset by peer)
[09:37:09] *** Joins: leonthemisfit (~Leon@249.sub-174-198-197.myvzw.com)
[09:37:09] *** Quits: leonthemisfit (~Leon@249.sub-174-198-197.myvzw.com) (Changing host)
[09:37:09] *** Joins: leonthemisfit (~Leon@user/leonthemisfit)
[09:37:44] *** Joins: nitrix (~nitrix@user/nitrix)
[09:39:30] *** Quits: Leon__ (~Leon@249.sub-174-198-197.myvzw.com) (Ping timeout: 256 seconds)
[09:41:36] <_mikey> is anyone here familiar with avl trees?
[09:42:18] <foobaz> i've done some work with red/black trees, they aren't much different
[09:44:07] <_mikey> after an insert you recurse up the tree and do the balance factor to see which node is unbalanced, then you sort. now from which node do i start to update the balance factor? do i just go up from the nodes i sorted?
[09:44:31] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[09:44:45] <_mikey> to update the nodes i sorted.
[09:45:21] *** Joins: deonild (~deonild@c-24-12-215-71.hsd1.il.comcast.net)
[09:47:21] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[09:47:37] <seebs> i believe just go up. basically, adding things can't change any of the nodes that you aren't a child of, initially, so those are the ones you have to look at.
[09:47:56] <seebs> also in close to full generality you should almost certainly never use avl trees or red/black trees on modern hardware.
[09:48:16] *** Joins: walterwhip (~www@user/walterwhip)
[09:48:17] <_mikey> really? why wouldn't you use them?
[09:48:17] <seebs> btree/b+tree are much, much, more compatible with systems that use caches and have much slower memory
[09:48:39] <seebs> basically, figure it takes at *least* 20x as long to jump to a new page as it does to continue looking at nearby things.
[09:48:39] *** Joins: bluedust_ (~bluedust@59.89.219.209)
[09:49:02] <seebs> so the classic data structures that are chasing a pointer at every step are painfully slow on modern hardware, basically.
[09:49:02] <_mikey> i'm just trying a bunch of algorithms to teach myself things.
[09:49:25] <seebs> that's fair, and it's a good thing to do! i just figure you should be aware that there are often reasons not to actually use them in "real" systems.
[09:51:17] <_mikey> thanks for the heads up. i'll try a b+tree next!
[09:51:30] *** Quits: bluedust (~bluedust@185.195.232.135) (Ping timeout: 250 seconds)
[09:53:06] *** Quits: walterwhip (~www@user/walterwhip) (Ping timeout: 256 seconds)
[09:54:37] <_mikey> actually, thanks for the "pointer"... (pun)
[09:56:17] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[09:56:28] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[10:02:46] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 250 seconds)
[10:03:34] *** Joins: rcernin (~rcernin@101.189.141.138)
[10:04:25] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[10:06:05] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Read error: Connection reset by peer)
[10:09:31] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[10:21:27] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Quit: mikoto-chan)
[10:34:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[10:36:11] *** Joins: fikran (~fikran@user/fikran)
[10:37:07] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[10:37:22] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[10:37:49] *** Quits: losinggeneration (~quassel@64.225.54.254) (Ping timeout: 240 seconds)
[10:37:57] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[10:37:57] *** Joins: losinggeneration (~quassel@64.225.54.254)
[10:38:48] *** Joins: justIrresolute (~justache@user/justache)
[10:42:23] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[10:51:01] *** Joins: mikoto-chan (~mikoto-ch@194.157.37.35)
[10:55:04] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[10:57:08] *** Quits: noonien (~noonien@user/noonien) (Ping timeout: 256 seconds)
[10:57:31] *** Joins: noonien (~noonien@user/noonien)
[10:58:35] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[10:59:32] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 250 seconds)
[11:04:02] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:06:36] *** Quits: deonild (~deonild@c-24-12-215-71.hsd1.il.comcast.net) (Quit: Leaving)
[11:12:08] *** Joins: mrig (~mrig@user/mrig)
[11:14:03] *** Quits: fgau_ (~fgau@mail.berliner-termindienst.de) (Quit: leaving)
[11:14:28] *** Joins: fgau (~fgau@mail.berliner-termindienst.de)
[11:14:28] *** Joins: rendar (~rendar@user/rendar)
[11:16:00] *** Joins: ahammer (~ahammer@157.122.68.247)
[11:17:37] *** Joins: kai2 (~kai@x50d24799.cust.hiper.dk)
[11:19:39] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 256 seconds)
[11:19:39] *** kai2 is now known as kai
[11:22:44] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:23:28] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[11:25:58] *** packet_lozenge_ is now known as packet_lozenge
[11:26:57] *** Joins: bluedust (~bluedust@103.161.144.94)
[11:29:00] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 250 seconds)
[11:30:00] *** Quits: bluedust_ (~bluedust@59.89.219.209) (Ping timeout: 256 seconds)
[11:30:17] *** Quits: anandn (~anandn@2601:600:a27f:d92d:a908:fe4a:67d7:11cf) (Ping timeout: 240 seconds)
[11:30:43] *** Joins: absc (~absc@81.31.144.28)
[11:31:31] *** Joins: bkicher_ (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689)
[11:48:00] *** Quits: ahammer (~ahammer@157.122.68.247) (Quit: Leaving)
[11:48:02] *** Quits: bkicher_ (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689) (Quit: Leaving)
[11:49:09] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:53:16] *** Quits: mikoto-chan (~mikoto-ch@194.157.37.35) (Ping timeout: 250 seconds)
[11:54:51] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71)
[11:54:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[11:56:23] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[11:57:52] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[11:57:53] <b0nn> hrm I found this series helpful when I wrote red blacks and B+ in GO https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/lecture-videos/lecture-6-avl-trees-avl-sort/
[11:58:25] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:59:43] *** Joins: Xjs (~jannis@user/xjs)
[11:59:46] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71) (Ping timeout: 250 seconds)
[12:00:32] *** Quits: Echoz_ (~chris@user/echoz) (Quit: WeeChat 3.3)
[12:03:44] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[12:04:03] *** Joins: walterwhip (~www@user/walterwhip)
[12:04:28] *** Joins: Echoz (~chris@user/echoz)
[12:05:06] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:05:59] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[12:07:14] *** Joins: walterwhip (~www@user/walterwhip)
[12:09:41] *** Joins: effprime (~effprime@user/effprime)
[12:10:13] *** Quits: effprime_ (~effprime@user/effprime) (Ping timeout: 240 seconds)
[12:25:24] *** Joins: absc_ (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it)
[12:27:49] *** Quits: absc (~absc@81.31.144.28) (Ping timeout: 256 seconds)
[12:37:43] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[12:40:56] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[12:43:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[12:44:11] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[12:45:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:45:32] *** Joins: fikran (~fikran@user/fikran)
[12:49:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[12:57:35] *** Joins: Tach (~Tach@user/tach)
[13:02:17] *** Joins: menace (~someone@ppp-93-104-175-249.dynamic.mnet-online.de)
[13:02:22] *** Joins: mrig_ (~mrig@lfbn-mar-1-390-157.w90-73.abo.wanadoo.fr)
[13:02:30] *** Quits: menace (~someone@ppp-93-104-175-249.dynamic.mnet-online.de) (Changing host)
[13:02:30] *** Joins: menace (~someone@user/menace)
[13:02:34] *** menace is now known as Deknos
[13:04:07] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[13:04:15] *** Quits: mrig_ (~mrig@lfbn-mar-1-390-157.w90-73.abo.wanadoo.fr) (Changing host)
[13:04:15] *** Joins: mrig_ (~mrig@user/mrig)
[13:04:15] *** mrig is now known as Guest6504
[13:04:15] *** Quits: Guest6504 (~mrig@user/mrig) (Killed (strontium.libera.chat (Nickname regained by services)))
[13:04:15] *** mrig_ is now known as mrig
[13:05:54] *** Joins: mnx|aw (~nabromov@92.40.255.113.threembb.co.uk)
[13:09:11] *** Quits: dr0n (~nabromov@92.40.255.113.threembb.co.uk) (Ping timeout: 256 seconds)
[13:10:06] *** Joins: bkircher (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689)
[13:16:23] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[13:22:13] *** Quits: Ergo^ (~ergo@91.238.59.144) (Ping timeout: 256 seconds)
[13:22:32] *** Quits: tumdum_ (uid783@id-783.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[13:23:19] *** Joins: jla (~jordi@64.225.79.195)
[13:26:11] *** Quits: mrig (~mrig@user/mrig) (Read error: Connection reset by peer)
[13:26:24] *** Joins: mrig (~mrig@user/mrig)
[13:32:06] *** Quits: jla (~jordi@64.225.79.195) (Remote host closed the connection)
[13:33:51] *** Quits: mollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Quit: Leaving)
[13:37:27] *** Joins: jla (~jordi@64.225.79.195)
[13:39:36] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-3d8b-1f80-ab8f-9df3.ip6.gigabit.dk)
[13:42:34] *** Parts: marahin (~marahin@3lab/marahin) (Leaving)
[13:43:17] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71)
[13:46:15] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--366.oracle-ocna.com)
[13:47:37] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71) (Ping timeout: 240 seconds)
[13:49:08] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[13:56:01] *** Joins: walterwhip (~www@user/walterwhip)
[14:11:07] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[14:20:09] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[14:21:05] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[14:30:35] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[14:32:22] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--366.oracle-ocna.com) (Read error: Connection reset by peer)
[14:35:23] *** Joins: allana (~user@2001:4641:6aed:0:4ad:2c51:49e9:2b4a)
[14:36:28] *** Joins: dntreou (~yakiza@102.69.128.34)
[14:43:34] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 250 seconds)
[14:44:57] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:50:05] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[14:52:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[14:54:53] *** Joins: fikran (~fikran@user/fikran)
[14:59:57] *** Quits: dntreou (~yakiza@102.69.128.34) (Ping timeout: 240 seconds)
[15:03:21] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--213.oracle-ocna.com)
[15:05:25] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[15:07:50] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--213.oracle-ocna.com) (Ping timeout: 250 seconds)
[15:09:56] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[15:12:01] *** Quits: absc_ (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it) (Quit: Leaving)
[15:12:19] *** Joins: absc (~absc@81.31.144.28)
[15:17:30] *** Joins: absc_ (~absc@81.31.144.28)
[15:19:01] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--3c1.oracle-ocna.com)
[15:20:05] *** Quits: absc (~absc@81.31.144.28) (Ping timeout: 256 seconds)
[15:24:23] *** Joins: alrs (alrs@tilde.team)
[15:31:18] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71)
[15:34:48] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[15:35:15] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--3c1.oracle-ocna.com) (Read error: Connection reset by peer)
[15:36:00] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71) (Ping timeout: 250 seconds)
[15:40:17] *** Joins: dntreou (~yakiza@102.69.128.34)
[15:41:21] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[15:58:43] *** Joins: mrig (~mrig@user/mrig)
[15:59:58] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[16:12:11] *** Joins: analogsalad (~analogsal@user/analogsalad)
[16:15:01] *** Joins: fjb (~fjb@2804:378:9085:6200:1fec:696e:9e8e:7c9b)
[16:19:41] *** Joins: endre (end.re@end.re)
[16:25:20] *** Quits: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[16:25:35] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[16:27:16] <braxas> https://github.com/coopnorge/go-masker-lib
[16:29:37] *** Quits: dntreou (~yakiza@102.69.128.34) (Ping timeout: 256 seconds)
[16:31:36] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--38e.oracle-ocna.com)
[16:34:37] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[16:41:31] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Ping timeout: 256 seconds)
[16:48:29] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[16:50:29] *** Quits: absc_ (~absc@81.31.144.28) (Quit: Leaving)
[16:50:51] *** Joins: absc (~absc@81.31.144.28)
[16:57:13] *** Joins: ols (~ols@nixers/ols)
[16:59:37] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--38e.oracle-ocna.com) (Ping timeout: 240 seconds)
[17:01:03] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[17:01:18] *** Joins: mickey8 (~user@user/mickey)
[17:02:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[17:03:56] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[17:04:14] *** Joins: fikran (~fikran@user/fikran)
[17:06:39] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:19:33] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71)
[17:19:39] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[17:23:56] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:24:23] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71) (Ping timeout: 252 seconds)
[17:25:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[17:32:13] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[17:32:23] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[17:40:17] *** Quits: blinux2 (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[17:53:40] *** Joins: b1ackzer0 (~b1ackzer0@j168056.upc-j.chello.nl)
[17:58:33] *** Quits: b1ackzer0 (~b1ackzer0@j168056.upc-j.chello.nl) (Quit: leaving)
[17:59:45] *** Joins: fjb_ (~fjb@2804:378:9191:6c00:59a1:962b:4bb8:7507)
[18:00:41] *** Quits: fjb (~fjb@2804:378:9085:6200:1fec:696e:9e8e:7c9b) (Ping timeout: 252 seconds)
[18:00:41] *** fjb_ is now known as fjb
[18:00:51] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[18:00:58] <bookworm> do you really need a library for that?
[18:01:33] <bookworm> I mean godspeed to you but that's approaching npm levels and is probably not worth the cost of tracking the dependency
[18:03:21] *** Joins: b1ackzer0 (~b1ackzer0@j168056.upc-j.chello.nl)
[18:03:39] *** Parts: b1ackzer0 (~b1ackzer0@j168056.upc-j.chello.nl) ()
[18:06:15] *** Joins: b1ackzer0 (~b1ackzer0@j168056.upc-j.chello.nl)
[18:06:24] <b1ackzer0> hello all
[18:06:52] *** Joins: fling (~fling@user/fling)
[18:08:26] <b1ackzer0> anyone working though "The Power of Go: Tools
[18:09:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[18:12:10] *** Joins: moog (~moog@107.126.53.167)
[18:12:35] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[18:17:27] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[18:20:54] *** Quits: bkircher (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689) (Quit: Leaving)
[18:21:09] *** Quits: allana (~user@2001:4641:6aed:0:4ad:2c51:49e9:2b4a) (Remote host closed the connection)
[18:24:57] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[18:36:43] *** Quits: fling (~fling@user/fling) (Ping timeout: 256 seconds)
[18:42:40] <LiENUS> so im on an arm mac and i need to do https://go.dev/doc/manage-install to get an older version
[18:42:49] <LiENUS> but theres no binary of the version i want for darwin/arm64
[18:43:05] <LiENUS> how do i either A) tell those instructions to use the amd64 version under rosetta 2 or b) compile it from source?
[18:44:06] <siXy> Source install instructions are here: https://go.dev/doc/install/source
[18:44:21] <siXy> I've not used a mac in a long while, and no idea how to do a)
[18:45:34] <LiENUS> is there a spot on that page you can point me to to install it ala the manage-install one where 1.14.15 will be callable as go1.14.15 and my 1.17 install will stay the main
[18:49:52] <siXy> You can use GOROOT_BOOTSTRAP=/some/path ./make.bash to install it some other place then put a shell alias to make go1.foo to point at that one
[18:49:52] *** Joins: Ergo^ (~ergo@91.238.59.144)
[18:50:16] <LiENUS> that sounds close enough for me
[18:50:34] <siXy> Note, however, that there's a non-trivial chance this might end up being quite hard - old versions have not been tested against darwin/arm64 as it didn't exist at the time
[18:50:45] <siXy> There's no guarentee this will actually work
[18:51:02] <siXy> If it's just a one-off test I'd use a VM or something.
[18:51:13] *** Joins: chripell (~chripell@147.80.76.34.bc.googleusercontent.com)
[18:51:25] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[18:51:40] <LiENUS> i need to run testing against 1.14 pretty regularly
[18:53:02] <LiENUS> if i have to i'll use amd64 binaries under rosetta 2 with the same basic idea but i'm going to try for native first if i can
[18:54:40] *** Quits: avemestr (~avemestr@2a01:4f8:121:228f::2) (Quit: WeeChat 2.8)
[18:55:25] *** Quits: orthoplex64 (~crm@70.120.0.94) (Remote host closed the connection)
[18:55:49] *** Joins: orthoplex64 (~crm@70.120.0.94)
[18:56:28] *** Joins: beholders_eye (~weechat@2804:1b3:70c3:b7ed:30e8:be9d:7823:beb6)
[18:58:27] *** Joins: avemestr (~avemestr@2a01:4f8:121:228f::2)
[18:59:01] <LiENUS> didnt build of course, time to try binaries
[19:00:06] <LiENUS> im guessing then my best bet is to make a shell script for go1.foo that does `GOROOT=/some/path /some/path/bin/go`
[19:01:39] <siXy> I don't think you need GOROOT. I think go14=/some/path/bin/go will be enough
[19:01:46] <siXy> TIAS, though
[19:01:51] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:02:03] <siXy> go14 env will tell you if it's working
[19:02:03] *** Joins: mickey8 (~user@user/mickey)
[19:03:07] <LiENUS> ok it got it
[19:03:17] <LiENUS> should i seperate out my gopath though so 1.14 has its own gopath?
[19:03:37] <siXy> don't see why you would
[19:07:30] *** Quits: analogsalad (~analogsal@user/analogsalad) (Quit: bye)
[19:07:38] <LiENUS> all seems to be working didnt need to set GOROOT alias was enough
[19:07:48] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71)
[19:09:01] *** Quits: khyr0n_ (~khyr0n@2806:2f0:9141:835f:f234:49cd:2a30:272f) (Quit: Leaving)
[19:09:14] *** Joins: khyr0n (~khyr0n@2806:2f0:9141:835f:f234:49cd:2a30:272f)
[19:10:41] *** Quits: ztx1 (~ztx@user/ztx) (Quit: ztx1)
[19:11:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:12:14] *** Joins: internut (~internut@2601:280:4e00:7b70:d26:7bab:bfad:af92)
[19:12:40] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71) (Ping timeout: 250 seconds)
[19:12:44] *** Joins: jla (~jordi@64.225.79.195)
[19:13:35] *** Joins: fikran (~fikran@user/fikran)
[19:16:39] *** Joins: darkapex (~darkapex@user/darkapex)
[19:17:21] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[19:27:38] <LiENUS> so whats the reason that regexp.Split is more like strings.SplitN, is it just performance related?
[19:31:31] *** Joins: fef (~thedawn@user/thedawn)
[19:31:32] *** Quits: souvik (~souvik@80.179.69.241.cable.012.net.il) (Read error: Connection reset by peer)
[19:32:05] <siXy> LiENUS: Probably tradeoff between function bloat and complexity. You can get an unbounded split with n < 0
[19:32:32] <siXy> strings package is smaller and more commonly used, so there's better justification for split vs splitN there
[19:33:51] *** Joins: souvik (~souvik@103.59.73.33)
[19:35:27] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[19:35:47] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[19:40:01] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[19:40:11] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 256 seconds)
[19:40:24] *** Joins: whaley (~whaley@2603-6080-a301-33d1-f8a1-ed97-c5a3-dfc6.res6.spectrum.com)
[19:41:04] *** Joins: wre^ (~wre@wsip-98-188-246-242.mc.at.cox.net)
[19:44:09] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[19:44:31] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[19:47:35] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:8d5b:699f:1bf:4a88) (Remote host closed the connection)
[19:47:57] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:444d:404c:c947:f9bc)
[19:49:39] *** Joins: Techcable (~Techcable@168.235.93.147)
[19:52:21] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[19:54:40] *** Joins: yangby (~secret@115.199.105.217)
[19:56:47] *** Quits: yangby (~secret@115.199.105.217) (Client Quit)
[19:57:11] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[19:58:28] *** Joins: yangby (~secret@115.199.105.217)
[20:00:05] *** Quits: yangby (~secret@115.199.105.217) (Client Quit)
[20:01:14] *** Quits: b1ackzer0 (~b1ackzer0@j168056.upc-j.chello.nl) (Remote host closed the connection)
[20:04:33] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[20:14:16] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[20:19:54] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[20:19:57] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 240 seconds)
[20:22:10] *** Joins: jespada (~jespada@87.74.36.188)
[20:23:17] *** Quits: wre^ (~wre@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 240 seconds)
[20:27:54] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[20:28:07] *** Joins: mickey8 (~user@user/mickey)
[20:28:08] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[20:29:06] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 260 seconds)
[20:30:15] *** Joins: mrig (~mrig@user/mrig)
[20:30:22] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[20:30:35] *** Quits: bluedust (~bluedust@103.161.144.94) (Remote host closed the connection)
[20:30:59] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[20:31:06] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 250 seconds)
[20:31:22] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[20:31:36] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[20:33:57] *** Quits: whaley (~whaley@2603-6080-a301-33d1-f8a1-ed97-c5a3-dfc6.res6.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[20:35:43] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[20:35:44] *** Joins: cobber (~protorom@213.240.182.77)
[20:38:56] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[20:38:57] *** Joins: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com)
[20:44:25] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[20:46:50] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Remote host closed the connection)
[20:55:58] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71)
[21:00:46] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71) (Ping timeout: 245 seconds)
[21:00:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[21:14:50] *** Joins: fling (~fling@user/fling)
[21:19:58] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Quit: Ping timeout (120 seconds))
[21:21:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:22:03] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:22:56] *** Joins: fikran (~fikran@user/fikran)
[21:27:00] *** Joins: bkircher (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689)
[21:27:49] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:28:32] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[21:29:20] *** Joins: marlinc (~marlinc@user/marlinc)
[21:30:39] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[21:31:09] *** Joins: henry40408 (~henry4040@175.181.155.165)
[21:33:20] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:35:43] *** Quits: marlinc (~marlinc@user/marlinc) (Read error: Connection reset by peer)
[21:38:11] *** Joins: sabry (~sabry@197.37.4.159)
[21:38:51] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[21:39:26] *** Joins: marlinc (~marlinc@user/marlinc)
[21:39:34] *** Quits: marlinc (~marlinc@user/marlinc) (Read error: Connection reset by peer)
[21:39:57] *** Joins: marlinc (~marlinc@user/marlinc)
[21:40:42] *** Quits: marlinc (~marlinc@user/marlinc) (Read error: Connection reset by peer)
[21:43:52] *** Joins: blinux2 (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[21:44:20] *** Joins: marlinc (~marlinc@user/marlinc)
[21:51:59] <dostoyevsky2> Is there an alternative to open'ing a file and the grepping for a string in the error message?  To know if a certain error happened and handle it accordingly?
[21:55:57] *** Joins: sabry84 (~sabry@197.37.4.159)
[21:56:34] *** Quits: sabry84 (~sabry@197.37.4.159) (Client Quit)
[21:56:55] <fogobogo> debugger probably
[21:59:25] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[22:08:38] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Quit: Leaving)
[22:09:11] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[22:10:32] *** Quits: casastorta (~casastort@neo1.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:12:34] *** Joins: casastorta (~casastort@neo2.krivokuca.net)
[22:16:25] *** Joins: krux02 (~krux02@p508228fb.dip0.t-ipconnect.de)
[22:16:41] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:17:19] <krux02> is this the channel to lament how nuts the layout string for `time` is?
[22:17:28] <krux02> I hate it.
[22:17:52] <siXy> krux02: You can, but we've all been through the rant a lot of times already ;)
[22:18:01] <siXy> It is totally crazy though, especially for non-americans.
[22:18:51] <krux02> yea I am not american
[22:19:36] <pyzozord> what is the purpose of .Error on the error interface
[22:20:00] <pyzozord> why would anyone want to error.Error() and what does it do?
[22:20:29] *** Quits: casastorta (~casastort@neo2.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:20:44] <krux02> it returns a string (afaik)
[22:21:07] <pyzozord> what would be the most common usecase of this?
[22:21:38] <siXy> pyzozord: error is an interface, with error.Error() returning a string, because this means you can replace the standard error with your own implementation that satisfies that interface if you want.
[22:22:06] <pyzozord> does any code ever calls .Error()?
[22:22:20] *** Joins: casastorta (~casastort@neo3.krivokuca.net)
[22:22:39] <siXy> Sure. fmt.Println() for example.
[22:23:26] <pyzozord> doesn't Println call .String()?
[22:23:48] <siXy> error doesn't have a .String() method, so no.
[22:23:58] <pyzozord> ooh
[22:24:24] <pyzozord> so it's like .String() but for errors, and it's intentionally different so that you can tell what impelemnts error interface and what doesn't
[22:24:29] <krux02> if time would at least provide a reasonable time format string by default.
[22:24:42] <krux02> I always have to craft one.
[22:24:52] <krux02> const TimeFormat =  "2006-01-02 15:04 MST"
[22:25:06] <krux02> not tested yet, but that would be reasonable
[22:25:39] <krux02> or better
[22:25:59] <siXy> pyzozord: Yeah, that's right
[22:26:07] *** sshow_ is now known as sshow
[22:26:08] <krux02> or better yet, something like "YYYY-MM-DD ..." would have made sense
[22:26:11] <krux02> but nope
[22:27:26] <pyzozord> but why do that
[22:27:36] <siXy> Rob Pike got a lot of things right, but noone's perfect. This is one that he got wrong. You get used to it eventually, though.
[22:27:40] <pyzozord> why not just implement .String() for errors
[22:28:21] <ikke> You _can_ do that
[22:28:30] <siXy> pyzozord: Because being able to distinguish between an error and an arbitrary stringer is useful.
[22:29:02] <siXy> Detecting when something is an error, as opposed to some valid output, is something software engineers sometimes want to do ;)
[22:29:10] <pyzozord> but should you distinguish them by interface?
[22:29:15] <pyzozord> interface in go is not type
[22:29:27] <pyzozord> you can have different types with the same interface .String()
[22:29:34] <pyzozord> and still can tell them apart, right?
[22:29:58] <pyzozord> shouldn't*
[22:30:06] <siXy> pyzozord: An interface IS a type. They are listed under Types in the spec. They are a special kind of type, but a type nevertheless.
[22:31:05] <pyzozord> oh i see, it must use interface because type is concrete, that would mean you cannot create your own error types
[22:31:35] <pyzozord> ok so it's kind of abusing it's own systems to tell errors from non-errors and allow custom errors at the same type
[22:31:39] <pyzozord> *type=time
[22:31:43] <fizzie> I would imagine one reason why the `error` type has its own special "marker" method is, it makes sure you don't accidentally implement `error` and/or return things that aren't errors from methods that were expected to return errors.
[22:32:15] *** Quits: casastorta (~casastort@neo3.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:32:23] <fizzie> A lot of types implement fmt.Stringer, and not all of them really make any sense as an error value.
[22:32:28] <pyzozord> that's the thing, I am afraid I would implementet .Error() on object without intention of it being an error type
[22:32:44] <pyzozord> or you know some other interface with some other market method that I am not aware of
[22:33:13] <ikke> pyzozord: just 'Error() string'?
[22:33:45] *** Joins: casastorta (~casastort@neo2.krivokuca.net)
[22:33:56] <pyzozord> I mean say I have a logger interface that that has Log() Warn() Error()
[22:34:10] <pyzozord> I just accidentally implemented error interface
[22:34:12] <fizzie> Would it _really_ have `Error()` with no parameters?
[22:34:20] <fizzie> Returning a `string`.
[22:34:36] <pyzozord> sure it's edge case but it's just example
[22:34:49] <fizzie> Anyway, I don't think it's _that_ dangerous if it happens. But it's kind of an unavoidable consequence of the whole "interface implementation is implicit" thing.
[22:35:24] <pyzozord> or missing some more explicit type inheritance
[22:35:36] <pyzozord> or rather polymorphism
[22:35:47] <siXy> I can't think off-hand of any convincing real-world cases where something would have an `Error() string` method which wasn't returning an error, unless you're deliberately obfustacating your code for some reason.
[22:36:46] <pyzozord> the language uses 'implicit interface implementation' as de facto polimorphism which can be accidental because of the implicity. Can change either implicity or lack of polymorphism in the first place I think
[22:37:59] <pyzozord> Error() is just example, what I am really worried about is that I need to fully know entire standard library and all third party libraries I use to not accidentally run into this situation
[22:38:14] <ikke> pyzozord: or else?
[22:38:39] <pyzozord> or else my logger might be interpreted as error
[22:38:51] <ikke> What would accidentally interpret your logger as an error?
[22:39:14] <siXy> No you don't. Things don't magically happen because you have an `Error() string` method on your struct. Go is a language with very little hidden magic, so you don't need to worry about these things in practice.
[22:39:54] <pyzozord> not necessairly go itself, but some of my code that checks if the argument it received is an error
[22:40:30] <siXy> So you're worried about code that you write interacting badly with other code that you write? I mean... I guess I kind of see your point, but I think the solution is fairly clear?
[22:40:37] <pyzozord> yes
[22:40:56] *** Quits: lazyreader (~lazyreade@user/lazyreader) (Read error: Connection reset by peer)
[22:41:00] <pyzozord> not really, at least not for complex projects or many third party libraries
[22:41:02] <siXy> If you're worried about code that you write interacting badly with other code you write, change one of the two bits of code to not do that.
[22:41:34] <pyzozord> point being I don't know about the problem until it happens in production
[22:41:47] <siXy> That's why we have these things called tests.
[22:42:25] *** Joins: lazyreader (~lazyreade@user/lazyreader)
[22:42:51] <pyzozord> I'm not sure what's going on but this language seems to me now kind of badly designed or slopply
[22:43:04] <pyzozord> and that's trange because I value Rob Pike and Ken Thompson very highly
[22:43:20] <pyzozord> as well as great engineers at google
[22:43:27] <pyzozord> so I don't understand why I have these doubts
[22:43:49] <pyzozord> can't really remember if I had them when learning other languages, but I don't think so
[22:43:51] <siXy> It's probably worth pointing out that people don't tend to pay a lot of attention to that sort of comment from someone who is just beginning to learn the language.
[22:44:15] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71)
[22:44:36] <pyzozord> yeah no I don't expect Rob Pike to change the language because I have doubts :P I was more hoping for more experienced go devs to remove my doubts
[22:46:15] <pyzozord> but so far this seems very shakey, there is dead weight in the syntax like named returns, it's supposed to be fast but you can't control or really even know the memory, and types can absolutely accidentally tangle together
[22:46:46] <pyzozord> I am very suprisied and don't really understand my own reaction. I do want to love go
[22:46:59] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:47:01] <siXy> Your doubts essentially boil down to that you're worried you might write some really fragile code based on method inspection, and then write non-sensical structs that have methods that make no sense, and that the combination of these might break the former bit of code. The solution to this is to not do that.
[22:48:01] <pyzozord> siXy: in practice it's a team of developers, maybe hundreds, with varying levels of experience and familiarity with go, and each others code
[22:48:08] <siXy> In other words - you're worrying WAY WAY too much about small implementation details, are struggling to grasp the explanations fully, and making a huge deal out of something that I've never ever seen anyone actually run into trouble with.
[22:49:11] <pyzozord> btw which explentations I struggle grasping?
[22:49:31] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71) (Ping timeout: 250 seconds)
[22:49:40] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[22:50:16] <siXy> All of it? This is a really simple thing that never causes the problems you seem to be expecting. It shouldn't justify these pages and pages of explanation.
[22:50:59] <pyzozord> I don't think I struggle with explanation, I think I got it right away, the explantion is "it's a detail don't worry about it"
[22:51:19] <pyzozord> but that's not very encouraging to be completely honest
[22:51:33] <siXy> To write code that had any of these issues your code would have to be so extremely terrible that it should never get past code review, but even if it did - your tests would catch it. If you have any.
[22:52:45] <pyzozord> maybe I was too hyped up about the language and now I'm expecting too much of it
[22:52:57] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:53:15] <pyzozord> it seems like go's type system is stronger than C's but not that much stronger
[22:53:23] <siXy> No language will save you from the requirement to not write silly things in it, if you want to achieve useful results.
[22:53:41] <pyzozord> I expected go to have a very strong type system but it seems it aims more for a "balanced" type system
[22:54:31] <pyzozord> this one is just a bit scary because I can accidentally tangle together two completely unrelated pieces of code
[22:54:38] *** Joins: dr0n (~nabromov@92.40.255.113.threembb.co.uk)
[22:55:20] <pyzozord> and be completely unaware of it. It seems kind of unsafe, especially with a language that kind of gives the sense of security
[22:55:32] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Ping timeout: 256 seconds)
[22:55:50] *** Quits: mnx|aw (~nabromov@92.40.255.113.threembb.co.uk) (Ping timeout: 250 seconds)
[22:56:36] <mrig> The implicit nature of go are what makes it so easy to refactor, which is a massive plus, likely the reason for the interfaces being designed this way.
[22:57:25] <pyzozord> that's true it is a big plus for refactoring
[22:58:49] *** Joins: Nigthknight (~Nigthknig@user/nigthknight)
[22:59:05] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[22:59:08] <shiroyasha> FTR you're unlikely to implement a method `func (foo *Foo) Error() string` unless it's a getter. So if you have a method that most would interpret as "get an error and returns it a string", I'd argue that it matches the semantics of the `error` interface.
[22:59:52] <mrig> Also if you return your type as an error, none of the other things on that type are accessible, only the Error() method would be.
[23:00:15] *** Quits: Dieterbe (~Dieterbe@user/dieterbe) (Quit: leaving)
[23:00:26] *** Joins: Dieterbe (~Dieterbe@user/dieterbe)
[23:00:33] <shiroyasha> And if you're that worried about that, you can always use your own error interface (e.g `type MyError error`) and use that in the methods you're worried about misusing.
[23:00:57] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[23:02:27] *** Joins: cobber_ (~protorom@213.240.182.77)
[23:03:05] *** Quits: Dieterbe (~Dieterbe@user/dieterbe) (Client Quit)
[23:03:14] *** Joins: Dieterbe (~Dieterbe@user/dieterbe)
[23:03:15] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[23:03:27] *** Quits: cobber (~protorom@213.240.182.77) (Ping timeout: 256 seconds)
[23:03:27] *** cobber_ is now known as cobber
[23:03:33] *** Joins: xse (~xse@user/xse)
[23:03:48] <shiroyasha> Eh, actually that last message might not make sense.
[23:04:08] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[23:04:25] *** Joins: xse (~xse@user/xse)
[23:04:48] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[23:06:42] <pyzozord> what happens when my my type implements two interfaces with a method that has the same name?
[23:09:01] *** Quits: alwyn (~alwyn@user/alwyn) (Ping timeout: 250 seconds)
[23:09:13] <fizzie> To implement an interface, you have to have the same signature, not just the name.
[23:09:53] <fizzie> And since there's no overloading, if the two interfaces have methods with the same name but different signatures, a type can't implement more than at most one of them at a time.
[23:10:05] *** Joins: jla (~jordi@64.225.79.195)
[23:11:16] <fizzie> If both interfaces have methods with the same name and signature, then nothing special happens. Your type just... implements both of them. (Assuming it has all the other methods of those interfaces, I mean.)
[23:11:38] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[23:13:50] <mrig> It is common practice to nest interfaces too.
[23:15:46] <pyzozord> ok thanks
[23:15:54] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:16:27] *** Joins: mickey8 (~user@user/mickey)
[23:17:25] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[23:18:14] <pyzozord> in this example in line 19 why is & required?
[23:18:19] <pyzozord> https://go.dev/tour/methods/19
[23:19:19] <shiroyasha> https://go.dev/tour/methods/4
[23:19:39] *** Joins: isflavior (~isflavior@2001:8a0:5dd8:4100:d52:f084:8ba4:5b68)
[23:19:59] *** Quits: mickey8 (~user@user/mickey) (Client Quit)
[23:20:10] *** Joins: mickey8 (~user@user/mickey)
[23:20:15] <pyzozord> run() return type is error not *error
[23:21:00] *** Joins: lechner (~lechner@debian/lechner)
[23:22:38] <pyzozord> oh i see pointer to interface as return type is not legal?
[23:26:26] <mrig> it is because the Error() method is on a reference, if you remove the & and the * from the method, it will work.
[23:30:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[23:30:14] <b0nn> Just, for the record, you don't have pointers to interfaces, because they're not "real", instead you have pointer types implement them
[23:30:17] <pyzozord> ah i see
[23:30:53] *** Quits: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[23:30:53] *** Quits: amodo (~derf@naeon.org) (Remote host closed the connection)
[23:31:47] <fizzie> Of course you _can_ have pointers to interfaces, you just usually don't.
[23:32:02] <pyzozord> if I remove * from the Error methods receiver it works, but does it still conform to error interface?
[23:32:16] *** Joins: fikran (~fikran@user/fikran)
[23:32:29] <fizzie> If you remove the * on line 13, then it's both the type `MyError` *and* `*MyError` that implement the `error` interface.
[23:32:54] <fizzie> (Because methods with a non-pointer receiver are included in the method sets of both type `T` and `*T`. But not the other way around.)
[23:33:06] <pyzozord> aha!
[23:33:18] <pyzozord> i thought it was exactly invert of what you just said
[23:34:19] <b0nn> pointer instances of a type have all the methods of that type - value types only have the value methods
[23:34:39] <fizzie> I would rather say that `T` and `*T` are two different types with their own method sets.
[23:36:22] <b0nn> hmm - *T gets all of Ts methods, T doesn't get all of *Ts methods
[23:36:34] <b0nn> *T is the superset
[23:36:58] <fizzie> Oh, and just to muddle the situation a bit more, if `t` is an addressable value of type `T`, and the pointer type `*T` has a method `Foo()`, then the method *call* `t.Foo()` is still legal, even though the type `T` doesn't have the method.
[23:37:11] <fizzie> It's just treated as a syntactic shorthand for `(&t).Foo()`.
[23:37:17] <pyzozord> I think it's because t.Foo() hets promoted to (*t).Foo() when t was a pointer automatically
[23:37:29] <fizzie> No, it's different.
[23:37:49] <fizzie> If it was just a syntactic shorthand, it wouldn't affect which types implement which interfaces.
[23:37:50] <b0nn> lol, but the rules of go are simple dammit!
[23:38:15] <pyzozord> doesnt seem that way to me :P
[23:38:45] <mrig> It is quite logical really, if a Method on a pointer alters a member of the type then it does not need to return a value where as the same method on an actual instance of a type will do nothing unless it returns itself.
[23:38:53] <b0nn> sorry, I was thinking of the individual that came in the other day trying to assess if they could learn enough to pass reddit's interview
[23:41:02] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[23:41:02] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[23:41:03] *** Joins: tane (~tane@user/tane)
[23:42:20] <pyzozord> in this example I see that Error() is has reciver that is a value not a pointer https://go.dev/play/p/yrRZeZOZzJP
[23:42:24] <fizzie> As for *why* calling a method declared with a pointer receiver on a non-pointer value is just a syntactic shorthand, while a method declared with a non-pointer receiver is part of the method set of the pointer type, I imagine that's related to how you can *always* do `(*p).Foo()` for a pointer `p`, you can only do `(&v).Foo()` for a value `v` if the value is addressable.
[23:42:26] <pyzozord> even though run() returns a pointer
[23:42:27] *** Joins: arinov (~arinov@213.194.126.155)
[23:42:30] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:42:58] <fizzie> Yeah, that example works because `*MyError`'s method set has the method too.
[23:43:25] <pyzozord> this is more interesting: https://go.dev/play/p/0pTqCzRbUJM
[23:43:48] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[23:43:58] <pyzozord> so it's like kind of generics?
[23:44:15] <pyzozord> I would assume what happens is that (*err).Error() is being called inside Printf
[23:44:36] <pyzozord> or rather err.Error() which compiler later expands to (*err).Error()
[23:46:02] *** Quits: sabry (~sabry@197.37.4.159) (Quit: Client closed)
[23:46:49] <pyzozord> this one is interesting too it thinks I am redeclaring https://go.dev/play/p/Vm4xIEPSIpb
[23:47:16] <pyzozord> I'm confused by the last one
[23:47:38] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:47:52] <fizzie> Well, like we discussed, the first method is already in the method sets of both `MyError` *and* `*MyError`.
[23:48:01] *** Joins: mickey8 (~user@user/mickey)
[23:48:04] <fizzie> So you don't get to have a _different_ method with the same name on just `*MyError`.
[23:48:42] <b0nn> pyzozord: you are being mean to the compiler, it's confused on which MyError it should be calling
[23:49:01] <pyzozord> so it duplicates the same methods for both MyError and *MyError?
[23:49:22] <fizzie> I don't know if I'd say "duplicates" exactly, but the same method is in the method sets of both types.
[23:49:39] <pyzozord> so pointer on receiver does not count to method signature?
[23:49:46] <b0nn> because the pointer reciever's methods are a superset of the pointer receiver mthods *and* the value receiver's methods
[23:49:53] <pyzozord> but it does change what the method can do to the receiver
[23:51:07] <fizzie> And just to illustrate that the other way around it's just a syntactic shorthand: https://go.dev/play/p/ij8QHyw63Z6 -- line 18 is an error because `MyError` does not implement the error interface (the method is only in the method set of `*MyError`), but line 29 is _not_ an error, it just gets internally rewritten to `(&v).MyError`.
[23:52:09] <pyzozord> wow this is so confusing
[23:53:18] <pyzozord> so (*v).Method() and (&v).Method() rewrites are very naive and superficial
[23:54:46] <pyzozord> oh no i'm wrong, line 18 just complains because line 17 return type error interface does not match
[23:55:03] <b0nn> Does this help? https://go.dev/play/p/QlODzGGZeKW
[23:56:17] <pyzozord> ValChange() never gets called?
[23:56:47] <b0nn> The f inside Valchange is a value, so it changes it, just you can never see the change
[23:57:04] <pyzozord> right
[23:57:09] <b0nn> if you fmt.Print it inside valchange you will see
[23:57:22] <pyzozord> I understand that part
