[00:01:22] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:40a:9f91:8f3e:4f02) (Remote host closed the connection)
[00:01:46] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:f571:277c:e0b0:82b9)
[00:01:49] *** Joins: jassob (~jassob@h-98-128-167-112.NA.cust.bahnhof.se)
[00:05:51] *** Quits: glguy (x@libera/staff/glguy) (Quit: Quit)
[00:06:06] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[00:06:24] *** Joins: glguy (x@libera/staff/glguy)
[00:06:31] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[00:09:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:11:24] *** Joins: acidjnk (~acidjnk@p200300d0c72635825cb0fefbc648f0e4.dip0.t-ipconnect.de)
[00:12:15] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:14:54] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[00:16:38] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:17:11] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:e9:abf1:b887:13fa) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:17:32] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:e9:abf1:b887:13fa)
[00:19:22] <maerwald> and seccomp-notify looks complicated
[00:19:37] <maerwald> https://brauner.github.io/2020/07/23/seccomp-notify.html
[00:21:13] *** Quits: tabemann (~tabemann@2600:1700:7990:24e0:25bd:a66c:dc78:d416) (Remote host closed the connection)
[00:21:25] *** Joins: tabemann (~tabemann@2600:1700:7990:24e0:c9ce:7077:ec0c:a794)
[00:24:05] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[00:26:16] *** Joins: acidjnk_new (~acidjnk@p200300d0c7404a39d4d6bc989f421ded.dip0.t-ipconnect.de)
[00:26:36] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:28:51] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[00:29:52] *** Joins: brettgilio (~brettgili@x-node.gq)
[00:30:03] *** Quits: acidjnk (~acidjnk@p200300d0c72635825cb0fefbc648f0e4.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:36:12] *** Joins: xsebek (~xsebek@176.74.150.21)
[00:38:36] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[00:38:46] *** Quits: jassob (~jassob@h-98-128-167-112.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[00:40:22] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:40:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:41:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[00:42:16] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 244 seconds)
[00:44:51] *** Quits: mei3 (~mei@user/mei) (Ping timeout: 244 seconds)
[00:46:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[00:46:14] *** Joins: hendursaga (~weechat@user/hendursaga)
[00:51:24] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[00:51:24] *** Joins: Guest278 (~Guest27@2601:281:d480:2ce0::93bd)
[00:52:53] *** Joins: cjb (~cjbayliss@user/cjb)
[00:53:49] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[00:58:04] *** Quits: cjb (~cjbayliss@user/cjb) ()
[00:59:10] *** Joins: Pickchea (~private@user/pickchea)
[00:59:30] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:00:33] *** Joins: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net)
[01:00:51] *** Joins: EvanR (~evan@2600:1700:ba69:10:7dba:d155:3b0e:7b4c)
[01:01:03] *** Joins: cjb (~cjbayliss@user/cjb)
[01:01:15] *** Quits: EvanR (~evan@2600:1700:ba69:10:7dba:d155:3b0e:7b4c) (Changing host)
[01:01:15] *** Joins: EvanR (~evan@user/evanr)
[01:01:21] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[01:01:21] *** Joins: pavonia (~user@user/siracusa)
[01:01:39] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[01:01:53] *** Quits: fendor_ (~fendor@77.119.198.57.wireless.dyn.drei.com) (Remote host closed the connection)
[01:03:58] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:07:46] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[01:13:32] <maerwald> gentauro: https://gitlab.haskell.org/maerwald/stack/-/jobs/849559/artifacts/browse/.local/bin/ here's an M1 HLS binary
[01:15:56] *** Joins: zebrag (~chris@user/zebrag)
[01:16:12] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[01:20:15] *** Joins: zebrag (~chris@user/zebrag)
[01:22:53] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[01:23:58] *** Joins: Guest99 (~Guest99@pool-100-8-45-127.nwrknj.fios.verizon.net)
[01:27:41] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[01:30:05] *** Quits: emf (~emf@163.114.132.5) (Ping timeout: 256 seconds)
[01:30:50] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Quit: Lost terminal)
[01:31:46] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[01:31:55] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[01:32:14] *** Joins: emf (~emf@2620:10d:c090:400::5:d546)
[01:35:14] *** Joins: zebrag (~chris@user/zebrag)
[01:37:33] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[01:37:35] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Ping timeout: 264 seconds)
[01:40:13] <hololeap> what's a good way to implement a binary tree with a static shape and O(1) lookups and updates, given a "path" e.g. [GoLeft, GoRight, GoLeft, ...]
[01:40:41] <hololeap> well, the shape is determined at runtime but doesn't change after that
[01:41:42] <geekosaur> can that even be O(1)? wouldn't it still be O(log N) even given a path to walk instead of needing to search?
[01:42:46] <hololeap> well, if the shape is known then you could give each node a unique key and then put it all into a vector. that was one option I was exploring
[01:45:07] <hololeap> another thing I considered was to wrap each node in a TVar and then have a separate lookup table via a (Map Path (TVar (Node a)) or something
[01:47:49] <hololeap> what I am aiming for is making the thing a Representable with O(1) lookups/updates so I can plug it into Control.Comonad.Representable.Store
[01:48:13] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Remote host closed the connection)
[01:48:29] <hololeap> it's for this programming challenge: https://www.hackerrank.com/challenges/the-tree-of-life
[01:48:45] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[01:48:46] <geekosaur> then you're just hiding the big-O in the Map, I think
[01:49:19] <geekosaur> this all sounds to me like trying to be too clever without actually solving the big-O problem
[01:49:24] <hpc> yeah, you can only get O(1) with a fixed-size data structure
[01:49:42] <hpc> like particular types of hash table, or arrays
[01:52:27] <hololeap> I've implemented the standard GoL with vector-sized and Representable. this is a bit different because of the binary-tree shape of the thing, and also hackerrank doesn't have a ton of libraries available so things like finite-typelits are out
[01:53:26] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[01:56:15] <hololeap> but, yeah I could be painting myself into a corner here with my assumptions about how it needs to be done
[01:58:02] <hololeap> since the whole tree has to be traversed to updated the alive/dead status of each cell, perhaps just a regular tree traversal is good enough
[01:59:11] <hpc> yeah, log factors are smaller than you probably are thinking they are
[01:59:12] *** Joins: jassob (~jassob@h-98-128-167-112.NA.cust.bahnhof.se)
[01:59:52] <hololeap> I'm just a bit worried about the corner cases when they have huge trees and 1000 life cycles
[02:00:29] <hpc> they would have to be truly huge
[02:00:35] <Guest278> log scales really well with large numbers
[02:00:42] <hpc> if you have a tree of 1000 noddes that takes 1 second
[02:00:49] <hpc> to make it take 2 seconds needs 10000 nodes
[02:00:54] <hpc> 3 seconds, 100000 nodes
[02:00:56] <hololeap> that's true
[02:01:15] <hpc> (plus or minus memory bandwidth, cpu cache, etc)
[02:01:18] <Guest278> it's why stuff like git-bisect can cut through literally thousands of commits so easily
[02:02:04] *** Quits: Guest99 (~Guest99@pool-100-8-45-127.nwrknj.fios.verizon.net) (Quit: Client closed)
[02:02:18] *** Joins: Guest99 (~Guest99@pool-100-8-45-127.nwrknj.fios.verizon.net)
[02:04:12] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:04:45] <Guest278> plus looking at the problem it's a CA update? in which case you're traversing the whole tree anyway and you'd ideally have every neighbor available
[02:04:54] *** Quits: max22- (~maxime@2a01cb08833598005dc77d164ebe8446.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:05:03] <EvanR> exponential growth, reach any level soon. log growth take as long as you need, you won't run out of levels
[02:06:34] *** Joins: machinedgod (~machinedg@24.105.81.50)
[02:07:06] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[02:07:27] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[02:08:47] <hpc> there's a joke about those sorts of big-Os
[02:09:02] <hpc> there's an algorithm with a big-O of the inverse ackermann function, and people say it's O(4)
[02:09:24] <hpc> because there's no way you're ever getting an input big enough to beyond that
[02:09:39] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:10:41] <dolio> There's also log*, which is like 5 or 6.
[02:11:10] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 260 seconds)
[02:15:16] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Quit: Leaving)
[02:16:28] *** Joins: lagash (lagash@lagash.freeirc.org)
[02:17:05] *** Quits: timCF (~timCF@m91-129-97-132.cust.tele2.ee) (Quit: leaving)
[02:19:12] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[02:22:07] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[02:23:31] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:24:09] <hololeap> when is it a good idea to properly fill out the other-extensions field in a .cabal file?
[02:24:52] <hpc> probably never? i like seeing them at the top of every source file so i know what i am getting into
[02:25:23] <hpc> imagine if cabal files had an other-imports field
[02:25:34] <geekosaur> other-extensions is just documentation. it may be helpful to review what extensions you're using anywhere, but I'm not sure that's a serious use case
[02:25:49] <hololeap> ok
[02:26:18] <geekosaur> it might be helpful for hackage to more easily figure out compiler version compatibility, but I'm not sure it uses it for that
[02:26:34] <hpc> oh, i was thinking default-extensions
[02:26:56] <geekosaur> yeh, I figured
[02:26:58] <hololeap> geekosaur: that's what I thought it might be for, but that isn't really relevant to my use-case ATM
[02:27:25] <hpc> apparently other-extensions is useful though
[02:28:00] <hpc> the docs say cabal knows what ghc versions can use what extensions
[02:28:25] <zzz> what's a good example of the tardis monad usefulness?
[02:29:22] *** Quits: xsebek (~xsebek@176.74.150.21) (Ping timeout: 260 seconds)
[02:29:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[02:30:59] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[02:31:17] *** Joins: xsebek (~xsebek@176.74.150.21)
[02:32:47] <hololeap> is this functional dependency redundant here? class Sing k (t :: k) | k -> t
[02:33:36] <dolio> Doesn't seem like it.
[02:33:42] <geekosaur> no, because (t :: k) does not say that t is fully specified by k
[02:33:52] <hpc> instance Sing Int 0; instance Sing Int 1; ...
[02:34:07] <hpc> t -> k is probably redundant though
[02:35:03] <hololeap> ok, thanks
[02:36:25] <hpc> hmm, or maybe it's not redundant?
[02:36:31] *** Quits: xsebek (~xsebek@176.74.150.21) (Quit: WeeChat 3.2)
[02:36:45] <hpc> instance Sing (Maybe Int) Nothing; instance Sing (Maybe Bool) Nothing; ...
[02:37:09] <hololeap> maybe I was wanting t -> k
[02:37:23] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:38:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:38:42] *** Quits: Guest278 (~Guest27@2601:281:d480:2ce0::93bd) (Ping timeout: 256 seconds)
[02:39:08] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[02:39:29] <hololeap> instance KnownNat t => Sing Nat t where type instance (SingVal t) = Natural
[02:40:02] *** Joins: Guest27 (~Guest27@2601:281:d480:2ce0::93bd)
[02:40:10] <hololeap> the reason for including the kind is to avoid instances with the same head
[02:41:55] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[02:43:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[02:43:41] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 244 seconds)
[02:45:07] <jackdk> zzz: https://chrisdone.com/posts/twitter-problem-loeb/ , maybe?
[02:46:58] *** Joins: SeungheonOh (~Thunderbi@2600:1700:5168:1400:c87a:f4eb:18f0:66cf)
[02:47:05] *** Quits: SeungheonOh (~Thunderbi@2600:1700:5168:1400:c87a:f4eb:18f0:66cf) (Client Quit)
[02:47:47] <awpr> if the class is poly-kinded, the kind is part of the instance head regardless of whether it's a visible parameter
[02:48:26] <awpr> see https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Type-Ord.html#t:Compare which has instances dispatched on the kind
[02:50:57] <zzz> jackdk: thanks!
[02:51:39] <geekosaur> of course cdone observes at the bottom of the page that he gave up on waiting for the tardis monad version to finish
[02:52:49] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:53:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:57:46] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[03:01:10] *** Joins: Nolrai2 (~Nolrai2@c-76-27-202-218.hsd1.or.comcast.net)
[03:02:14] <Nolrai2> So its been a couple years, what are the pros+cons of using tasty vs. hspec?
[03:03:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:03:05] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:03:05] *** Joins: wroathe (~wroathe@user/wroathe)
[03:07:03] <Axman6> you can use hspec from tasty no?
[03:07:22] <Axman6> tasts brings together a bunch of other test frameworks but isn't really a test framework itself
[03:08:05] <Nolrai2> Ah.
[03:08:40] <Axman6> tasty*
[03:12:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[03:12:29] *** Quits: artemis (~artemis@user/artemis) (Ping timeout: 252 seconds)
[03:12:46] <AWizzArd> https://hackage.haskell.org/package/fin   why can the constructor of Z just use ('S n) while the S constructor must use 'Nat.S  ?
[03:13:22] *** Joins: artemis (~artemis@user/artemis)
[03:13:47] <Axman6> it's just docs, so probably a typo
[03:13:47] <AWizzArd> Why not both times 'S or 'Nat.S ?
[03:14:17] <AWizzArd> Axman6: good idea – https://hackage.haskell.org/package/fin-0.2/docs/src/Data.Fin.html#Fin
[03:15:12] <hpc> i am more curious why Z :: Fin ('S n) and not Z :: Fin n
[03:15:23] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[03:15:37] <Axman6> because it needs to nor be Z :: Fin 'Z
[03:15:46] <Axman6> not*
[03:15:50] <hpc> yeah, just realized
[03:15:56] <hpc> it's the set of 0 elements
[03:16:17] <hpc> {0} is the set of 1 element
[03:17:17] <Axman6> not sure I follow... but I look at is as an index into a sized vector that can never point to somewhere outside the vector
[03:18:12] <hpc> ah, i was looking at it as Fin n = the first n natural numbers
[03:18:13] <EvanR> Fin 0 has no inhabitants
[03:18:13] <Axman6> so it's impossible to index into a zero sized vector; index :: Vec n a -> Fin n -> a means we can never pass in Nil to index
[03:19:33] <Axman6> there are three values of type Fin 3 that correspond to the three S's
[03:19:34] <EvanR> Fin 4 is supposed to be 0 through 3
[03:19:56] <Axman6> so I guess  Fin n is numbers mod n... I hadn't thought about it that way before
[03:20:14] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[03:21:14] <hpc> or thinking of it as a set of a given size - Fin 0 = {}, Fin 1 = {0}, Fin 2 = {0, 1}, etc
[03:21:42] <hpc> (but with the actual "what the set contains" information removed)
[03:21:45] <EvanR> Z : Fin (S n) is another way of saying zero is not the successor of any number
[03:22:54] *** Quits: Guest27 (~Guest27@2601:281:d480:2ce0::93bd) (Ping timeout: 256 seconds)
[03:22:58] <EvanR> er, Z isn't a fin number with index zero, nvm
[03:23:02] *** Quits: artemis (~artemis@user/artemis) (Quit: artemis)
[03:23:43] <hpc> there's other stuff where the base case is fully polymorphic, that's probably how i got mixed up
[03:23:46] <awpr> https://hackage.haskell.org/package/fin-int uses all three of "indices of a vector of length n", "finite set of known cardinality", and "naturals less than n"
[03:24:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:24:20] <awpr> IMO the "integers mod n" interpretation would lead to a different set of arithmetic operators, and probably also adding a Num instance
[03:24:37] <hpc> maybe it should have one :D
[03:24:41] <EvanR> indeed
[03:24:41] <awpr> ..., so it should be a different type
[03:24:47] <awpr> shouldn't have one.
[03:25:02] <awpr> all of its methods would be partial
[03:25:03] <EvanR> it's valid to do modular arithmetic on Fin numbers
[03:25:25] <hpc> by that reasoning, Word shouldn't have a Num instance
[03:25:31] <awpr> it is valid, but it's bug-prone to have that as the Num instance of a type that isn't primarily meant to be used that way
[03:25:34] <hpc> because it's just the naturals mod 2**64
[03:25:42] <EvanR> oh Num... right
[03:25:51] <EvanR> Num is just invalid in general xD
[03:25:52] <awpr> "naturals mod n" should have a Num instance
[03:26:11] <awpr> but "naturals mod n" should be a different type from "indices of a vector of length n"
[03:26:32] <hpc> i don't see the difference
[03:26:34] <EvanR> I'm not sure this is warranted
[03:26:48] *** Quits: yaroot (~yaroot@6.3.30.125.dy.iij4u.or.jp) (Quit: The Lounge - https://thelounge.chat)
[03:26:56] <EvanR> extra steps to mod by whatever when doing crazy vector buffer tricks, for no reason
[03:27:18] <awpr> if I'm doing index arithmetic, I definitely don't want to have `mod` implicitly happening on indices if I write `+`
[03:27:34] *** Joins: yaroot (~yaroot@6.3.30.125.dy.iij4u.or.jp)
[03:28:03] <EvanR> what way would you rather have addition work for Fin
[03:28:16] <awpr> in a way that's visible and intentional at the call site
[03:28:27] <monochrom> If you do mod n, you get a circular buffer. But then you also get to argue that circular buffer should have a different type from vector.
[03:28:36] <EvanR> wait answer the question lol
[03:28:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 244 seconds)
[03:28:43] *** Quits: Nolrai2 (~Nolrai2@c-76-27-202-218.hsd1.or.comcast.net) (Quit: Client closed)
[03:28:54] <awpr> direct answer is that there should be no undistinguished `+` for indices
[03:28:54] <EvanR> should it crash or what
[03:29:01] <EvanR> so no addition
[03:29:04] <hpc> you could argue "circular buffer" is just a set of function definitions that use vectors
[03:29:50] <EvanR> also, vectors can be large enough that I would like Fin of a big index be implemented by Word
[03:29:53] <awpr> no addition unless it specifies explicitly what should happen with out-of-range results
[03:29:55] <hpc> for example, we have many definitions of Queue, but few of Stack
[03:30:00] <hpc> because [] has that api already
[03:30:03] <EvanR> making the distinction even less
[03:30:23] <awpr> these vectors are implemented by `SmallArray#`, which takes `Int` indices
[03:30:43] <EvanR> Int, whatever
[03:30:48] <awpr> it is `Int`
[03:33:47] <EvanR> the good news is your vectors index cannot represent locations outside the vector, the bad news is you can't do operations on it anymore xD
[03:34:03] <awpr> I don't follow.  I've done plenty of operations on them.
[03:34:05] <EvanR> without at least some theorem proving
[03:34:21] <awpr> yeah, the type level arithmetic can be annoying
[03:34:38] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[03:34:51] <EvanR> and the amount of such operations in e.g. DSP code is... great
[03:36:02] <awpr> which operations?  proof obligations mostly tend to come from splitting, concatenating, reshaping vectors
[03:36:23] <awpr> I would've expected stuff in DSP to be mostly mapping and convolving types of things
[03:36:50] <EvanR> +1, -1
[03:37:04] <EvanR> divide my 2
[03:37:08] <EvanR> by
[03:37:10] <hpc> there's a lot of operations in DSP that operate on small slices of the stream
[03:38:18] <EvanR> at the level of slice, map, convolution then you don't even have the index
[03:38:23] <EvanR> it's an implementation detail
[03:38:43] <awpr> right, that's why those sorts of operations don't require proving things about indices
[03:38:58] *** Joins: Guest27 (~Guest27@2601:281:d480:2ce0::93bd)
[03:39:09] <EvanR> with not indices the point is moot!
[03:39:24] <awpr> great!
[03:39:43] <EvanR> if I work with billiard balls I need not concern myself with the subatomic particles... maybe
[03:40:34] <awpr> we're discussing whether writing DSP code with length-indexed vectors would involve an unbearable amount of proof obligation, right?
[03:41:14] <hololeap> could I get some help with these errors? http://sprunge.us/Dg0EMD
[03:41:25] <hololeap> the code is at the top, the errors are commented out underneath
[03:42:17] <hololeap> I know there is a lot to unpack
[03:43:38] <hololeap> but what can I do to assure the compiler that since ('Node lt k rt) is an instance of KnownTree, lt and rt are as well?
[03:43:52] *** Quits: Guest27 (~Guest27@2601:281:d480:2ce0::93bd) (Ping timeout: 256 seconds)
[03:45:52] <awpr> these sorts of things tend to be easier when written with a type like `SingTree t -> Path t -> Index (TreeSize t)`
[03:46:01] <EvanR> awpr, er my original joke involved no longer being able to do operations on the indexes themselves
[03:46:09] <EvanR> not whole vectors
[03:46:19] <awpr> since then you can just pattern-match the singleton and pass in the left and right subtrees as needed
[03:46:51] <awpr> EvanR: ok, popping the stack back to that: all the operations you want are available; it's just that none of them have the name `(+)`
[03:47:00] <hololeap> awpr: how is that different from what I'm doing?
[03:47:48] <awpr> hololeap: putting that as a constraint means you have less control and less visibility into how the recursive call gets its type information
[03:48:44] <hololeap> `go` is the recursive call, not pathToIndex
[03:49:07] <hololeap> go :: forall t'. (KnownTreeR t', KnownTree t') => Int -> SingTree t' -> Path t' -> Int
[03:49:36] <awpr> it has KnownTree constraints, though, which aren't solved just by having `SingTree` in scope
[03:50:40] <hololeap> oh, ha, getting rid of those constraints did get rid of the erros
[03:50:44] <hololeap> *erros
[03:50:48] <hololeap> *ERRORS
[03:50:52] <geekosaur> heh
[03:51:57] <hololeap> that was a bit ironic heh
[03:53:09] <hololeap> working with heavy type-level stuff is confusing where sometimes you want to add constraints everywhere, and sometimes you need to omit them
[03:53:33] *** Quits: acidjnk_new (~acidjnk@p200300d0c7404a39d4d6bc989f421ded.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:54:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[03:54:42] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:54:51] <hololeap> I'm still getting used to it
[03:56:00] *** Lord_of_Life_ is now known as Lord_of_Life
[03:56:16] <hololeap> awpr++
[03:56:26] *** Quits: ystael (~ystael@user/ystael) (Quit: Lost terminal)
[04:00:54] <hololeap> so my big confusion was that I have `KnownTree lt` and `KnownTree rt` constraints on my `KnownTree ('Node lt '(ls,rs) rt)` instance definition
[04:02:07] <hololeap> so why couldn't it deduce that if I have (KnownTree t) and it knows that t = ('Node lt '(ls,rs) rt) from my pattern match, that there it satifies the KnownTree constraint on both lt and rt?
[04:04:41] <awpr> oh
[04:05:14] <hololeap> I even tried writing a KnownTreeR type family to help out
[04:05:38] <awpr> looks like because KnownTreeR only implies KnownTree of its subtrees once you can prove which constructor they are
[04:06:35] <awpr> maybe something like `type KnownTreeR t = (KnownTree t, KnownTreeRTF t)` and `type family KnownTreeRTF t where ... = (KnownTreeR lt, ...)` 
[04:06:48] <hololeap> there aren't any subtrees if the constructor is Leaf
[04:07:10] <awpr> but the error is in a context where the constructor is not Leaf?
[04:07:34] <awpr> what that constraint gives you is that `KnownTreeR lt`
[04:07:37] <hololeap> that's true
[04:07:54] <awpr> without knowing recursively what `lt` is, that can't be expanded to discover it implies `KnownTree lt`
[04:08:22] <awpr> so the thing I wrote is meant to hoist that `KnownTree` up one level out of that
[04:08:49] <hololeap> what about the KnownTree constraints for lt and rt on the KnownTree instance for 'Node?
[04:09:14] <awpr> instance contexts are not made available by having that instance in scope; only class contexts are
[04:09:30] <hololeap> oh
[04:09:44] <hololeap> that explains a lot
[04:11:21] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[04:13:05] *** Joins: Guest70 (~Guest70@75.76.54.207)
[04:16:23] *** Quits: Guest70 (~Guest70@75.76.54.207) (Client Quit)
[04:20:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[04:21:11] *** Joins: Typedfern (~Typedfern@171.red-83-51-60.dynamicip.rima-tde.net)
[04:32:06] *** Joins: notzmv (~zmv@user/notzmv)
[04:46:56] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[04:56:26] *** Joins: ssssssyd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net)
[05:00:57] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[05:01:07] <remexre> is there some way to get the (==) function `deriving Eq` would generate, _without_ defining an Eq instance for the type
[05:03:02] *** Joins: emanuel_ (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[05:03:08] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Read error: Connection reset by peer)
[05:03:17] <monochrom> https://hackage.haskell.org/package/generic-deriving contains something equivalent.
[05:03:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[05:05:56] *** Quits: wolfshappen_ (~waff@irc.furworks.de) (Quit: later)
[05:06:28] <remexre> ah, so I just want GEq from there? thanks!
[05:06:40] <c_wraith> well, you probably want https://hackage.haskell.org/package/generic-deriving-1.14.1/docs/Generics-Deriving-Eq.html#v:geqdefault
[05:09:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:09:58] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[05:16:26] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[05:20:10] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:20:10] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:20:10] *** Joins: wroathe (~wroathe@user/wroathe)
[05:24:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[05:29:50] *** Quits: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[05:30:21] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[05:37:35] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[05:38:37] <remexre> hm, looks like that isn't working because stuff from containers doesn't have instances (and I don't see a way in the docs to make it use Eq for those types)
[05:41:05] *** Joins: darkstardev13 (~darkstard@50.39.114.152)
[05:42:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[05:43:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:43:56] *** Quits: darkstarx (~darkstard@gateway/vpn/pia/darkstardevx) (Ping timeout: 268 seconds)
[05:44:36] <remexre> I suppose I'll just define those as orphan instances that forward to the real ones :P
[05:44:41] *** Joins: emf_ (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[05:44:43] *** Quits: emf (~emf@2620:10d:c090:400::5:d546) (Read error: Connection reset by peer)
[05:47:27] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:47:35] <awpr> it's probably easier to write your own Generic Eq instance tbh
[05:47:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[05:48:10] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[05:48:10] <awpr> those ones are intentionally written against separate classes for educational purposes 
[05:48:38] <awpr> this looks better too: https://hackage.haskell.org/package/generic-data-0.9.2.1/docs/Generic-Data.html#v:geq
[05:49:38] <remexre> I couldn't get that to build, strangely; generic-lens (one of its test deps?) fails...
[05:50:54] *** Parts: pony (sid524992@smol/hors) ()
[05:51:23] <awpr> hmm, maybe GHC 9.2?
[05:51:37] <awpr> in any case, rolling your own is probably 10-15 lines of code
[05:51:45] <remexre> yeah
[05:52:34] <awpr> another option: rename to `MyType'`, derive `Eq` for that, and make the exported type `newtype MyType = MyType MyType'` without forwarding the instance
[05:53:19] <remexre> oh, yeah, and I can just PatternSynonyms the constructors; might do that instead actually
[05:57:40] *** Joins: Guest27 (~Guest27@2601:281:d480:2ce0::93bd)
[05:58:44] *** Quits: Guest99 (~Guest99@pool-100-8-45-127.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[06:09:23] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 264 seconds)
[06:09:50] *** Quits: bbhoss (sid18216@id-18216.tinside.irccloud.com) (Ping timeout: 268 seconds)
[06:09:51] *** Quits: taktoa[c] (sid282096@id-282096.tinside.irccloud.com) (Ping timeout: 268 seconds)
[06:09:51] *** Quits: agander_m (sid407952@2a03:5180:f::6:3990) (Ping timeout: 268 seconds)
[06:09:59] *** Quits: SanchayanMaity (sid478177@2a03:5180:f:4::7:4be1) (Ping timeout: 264 seconds)
[06:09:59] *** Quits: NiKaN (sid385034@2a03:5180:f:1::5:e00a) (Ping timeout: 264 seconds)
[06:10:27] *** Quits: econo (uid147250@user/econo) (Ping timeout: 268 seconds)
[06:10:27] *** Quits: alanz (sid110616@2a03:5180:f:5::1:b018) (Ping timeout: 268 seconds)
[06:10:27] *** Quits: edmundnoble (sid229620@2a03:5180:f:1::3:80f4) (Ping timeout: 268 seconds)
[06:10:27] *** Quits: ephemient (uid407513@2a03:5180:f:2::6:37d9) (Ping timeout: 268 seconds)
[06:10:27] *** Quits: truckasaurus (sid457088@id-457088.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: scav (sid309693@id-309693.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: aarchi (sid486183@2a03:5180:f:5::7:6b27) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: mcfilib (sid302703@user/mcfilib) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: gonz___ (sid304396@2a03:5180:f:2::4:a50c) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: servytor (uid525486@2a03:5180:f:4::8:4ae) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: aristid (sid1599@id-1599.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[06:10:35] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[06:10:35] *** Quits: rubin55 (sid175221@2a03:5180:f:4::2:ac75) (Ping timeout: 264 seconds)
[06:10:35] *** Quits: cbarrett (sid192934@2a03:5180:f:1::2:f1a6) (Ping timeout: 264 seconds)
[06:10:35] *** Quits: S11001001 (sid42510@id-42510.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:10:35] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 264 seconds)
[06:10:35] *** Quits: lightandlight (sid135476@id-135476.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[06:11:04] *** Quits: tritlo (sid58727@user/tritlo) (Ping timeout: 268 seconds)
[06:11:04] *** Quits: b20n (sid115913@2a03:5180:f:5::1:c4c9) (Ping timeout: 268 seconds)
[06:11:04] *** Quits: tnks (sid412124@2a03:5180:f:1::6:49dc) (Ping timeout: 268 seconds)
[06:11:04] *** Quits: christiaanb (sid84827@id-84827.lymington.irccloud.com) (Ping timeout: 268 seconds)
[06:11:04] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 268 seconds)
[06:11:05] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[06:11:05] *** Quits: hamishmack (sid389057@2a03:5180:f:4::5:efc1) (Ping timeout: 268 seconds)
[06:11:05] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (Ping timeout: 268 seconds)
[06:11:05] *** Quits: vito (sid1962@user/vito) (Ping timeout: 268 seconds)
[06:11:11] *** Quits: carter (sid14827@id-14827.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[06:11:11] *** Quits: hongminhee (sid295@id-295.tinside.irccloud.com) (Ping timeout: 264 seconds)
[06:11:21] *** Joins: hubvu (sid495858@user/hubvu)
[06:11:35] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[06:11:41] *** Quits: integral (sid296274@user/integral) (Ping timeout: 268 seconds)
[06:11:41] *** Quits: nrr_ (sid20938@id-20938.lymington.irccloud.com) (Ping timeout: 268 seconds)
[06:11:42] *** Quits: stevenxl (sid133530@2a03:5180:f:5::2:99a) (Ping timeout: 268 seconds)
[06:11:42] *** Quits: idnar (sid12240@debian/mithrandi) (Ping timeout: 268 seconds)
[06:11:42] *** Quits: Pent (sid313808@2a03:5180:f:2::4:c9d0) (Ping timeout: 268 seconds)
[06:11:42] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (Ping timeout: 268 seconds)
[06:11:47] *** Quits: Firedancer (sid336191@2a03:5180:f:4::5:213f) (Ping timeout: 264 seconds)
[06:11:47] *** Quits: pepeiborra (sid443799@2a03:5180:f:3::6:c597) (Ping timeout: 264 seconds)
[06:11:47] *** Quits: kaychaks__ (sid236345@2a03:5180:f:1::3:9b39) (Ping timeout: 264 seconds)
[06:11:47] *** Quits: systemfault (sid267009@2a03:5180:f:5::4:1301) (Ping timeout: 264 seconds)
[06:11:47] *** Quits: rtpg (sid443069@2a03:5180:f:3::6:c2bd) (Ping timeout: 264 seconds)
[06:11:51] *** Joins: wolfshappen (~waff@irc.furworks.de)
[06:11:59] *** Joins: taktoa[c] (sid282096@tinside.irccloud.com)
[06:12:01] *** Joins: hongminhee (sid295@tinside.irccloud.com)
[06:12:13] *** Joins: mcfilib (sid302703@user/mcfilib)
[06:12:13] *** Joins: econo (uid147250@user/econo)
[06:12:15] *** Joins: bjs (sid190364@user/bjs)
[06:12:16] *** Joins: lightandlight (sid135476@helmsley.irccloud.com)
[06:12:17] *** Joins: systemfault (sid267009@uxbridge.irccloud.com)
[06:12:18] *** Joins: kaychaks__ (sid236345@helmsley.irccloud.com)
[06:12:18] *** Joins: pepeiborra (sid443799@ilkley.irccloud.com)
[06:12:18] *** Quits: sa1 (sid7690@id-7690.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:12:18] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (Ping timeout: 268 seconds)
[06:12:18] *** Quits: parseval (sid239098@id-239098.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[06:12:19] *** Quits: pjlsergeant (sid143467@2a03:5180:f:4::2:306b) (Ping timeout: 268 seconds)
[06:12:19] *** Quits: jakesyl_ (sid56879@2a03:5180:f:4::de2f) (Ping timeout: 268 seconds)
[06:12:19] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 268 seconds)
[06:12:19] *** Quits: ysh (sid6017@id-6017.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:12:21] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[06:12:22] *** Joins: sa1_ (sid7690@ilkley.irccloud.com)
[06:12:22] *** Joins: rtpg (sid443069@ilkley.irccloud.com)
[06:12:24] *** Joins: S11001001 (sid42510@ilkley.irccloud.com)
[06:12:26] *** Joins: ysh (sid6017@ilkley.irccloud.com)
[06:12:36] *** Joins: NemesisD (sid24071@lymington.irccloud.com)
[06:12:40] *** Joins: ephemient (uid407513@lymington.irccloud.com)
[06:12:42] *** Joins: christiaanb (sid84827@lymington.irccloud.com)
[06:12:45] *** Joins: integral (sid296274@user/integral)
[06:12:46] *** Joins: pjlsergeant (sid143467@hampstead.irccloud.com)
[06:12:47] *** Joins: servytor (uid525486@hampstead.irccloud.com)
[06:12:51] *** Joins: hamishmack (sid389057@hampstead.irccloud.com)
[06:12:52] *** Joins: ehamberg (sid18208@hampstead.irccloud.com)
[06:12:52] *** Joins: nrr_ (sid20938@lymington.irccloud.com)
[06:13:01] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[06:13:10] *** Joins: jakesyl_ (sid56879@hampstead.irccloud.com)
[06:13:16] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[06:13:18] *** Joins: tritlo (sid58727@user/tritlo)
[06:13:18] *** Quits: xff0x (~xff0x@2001:1a81:52ec:e600:16f0:b06d:ec81:fca7) (Ping timeout: 260 seconds)
[06:13:20] *** Joins: rubin55 (sid175221@hampstead.irccloud.com)
[06:13:21] *** Joins: SanchayanMaity (sid478177@hampstead.irccloud.com)
[06:13:22] *** Joins: Firedancer (sid336191@hampstead.irccloud.com)
[06:13:26] *** Joins: edmundnoble (sid229620@helmsley.irccloud.com)
[06:13:26] *** Joins: tnks (sid412124@helmsley.irccloud.com)
[06:13:26] *** Joins: truckasaurus (sid457088@helmsley.irccloud.com)
[06:13:28] *** Joins: scav (sid309693@helmsley.irccloud.com)
[06:13:29] *** Joins: vito (sid1962@user/vito)
[06:13:36] *** Joins: b20n (sid115913@uxbridge.irccloud.com)
[06:13:39] *** Joins: aarchi (sid486183@uxbridge.irccloud.com)
[06:13:43] *** Joins: stevenxl (sid133530@uxbridge.irccloud.com)
[06:13:46] *** Joins: carter (sid14827@helmsley.irccloud.com)
[06:13:57] *** Joins: gonz___ (sid304396@lymington.irccloud.com)
[06:13:58] *** Joins: idnar (sid12240@debian/mithrandi)
[06:14:01] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[06:14:06] *** Joins: JSharp (sid4580@lymington.irccloud.com)
[06:14:33] *** Joins: sa (sid1055@tinside.irccloud.com)
[06:14:38] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[06:14:46] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[06:14:58] *** Joins: cbarrett (sid192934@helmsley.irccloud.com)
[06:15:02] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Client Quit)
[06:15:06] *** Joins: xff0x (~xff0x@2001:1a81:532b:d400:5d59:4d8a:f670:7fef)
[06:15:11] *** Joins: aristid (sid1599@uxbridge.irccloud.com)
[06:15:26] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[06:15:35] *** Joins: dsal (sid13060@lymington.irccloud.com)
[06:15:35] *** Joins: hendi (sid489601@lymington.irccloud.com)
[06:15:36] *** Joins: Pent (sid313808@lymington.irccloud.com)
[06:15:41] *** Quits: mmhat (~mmh@55d4aeaa.access.ecotel.net) (Ping timeout: 256 seconds)
[06:15:47] *** Joins: bbhoss (sid18216@tinside.irccloud.com)
[06:16:16] <remexre> hm, pattern synonyms also fail without view patterns...
[06:16:23] *** Joins: Guest|88 (~Guest|88@bras-base-toroon0628w-grc-55-174-95-82-110.dsl.bell.ca)
[06:16:38] *** Joins: parseval (sid239098@helmsley.irccloud.com)
[06:16:47] *** Quits: Guest|88 (~Guest|88@bras-base-toroon0628w-grc-55-174-95-82-110.dsl.bell.ca) (Client Quit)
[06:19:42] *** Quits: Guest27 (~Guest27@2601:281:d480:2ce0::93bd) (Ping timeout: 256 seconds)
[06:20:09] *** Quits: SethTisue__ (sid14912@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:20:09] *** Quits: pepeiborra (sid443799@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:20:13] *** Quits: angerman (sid209936@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:20:21] *** Quits: caasih (sid13241@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:20:28] *** Quits: ProofTechnique (sid79547@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:20:28] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Write error: Connection reset by peer)
[06:20:38] *** Quits: tapas (sid467876@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:20:47] *** Quits: gmc (sid58314@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[06:20:47] *** Quits: mrianbloom (sid350277@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[06:20:50] *** Quits: rune (sid21167@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:20:54] *** Quits: supersven (sid501114@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:20:55] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 260 seconds)
[06:20:58] *** Quits: rtpg (sid443069@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:21:02] *** Quits: jonrh (sid5185@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:21:04] *** Quits: ysh (sid6017@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:21:06] *** Quits: bw (sid2730@user/betawaffle) (Read error: Connection reset by peer)
[06:21:06] *** Quits: S11001001 (sid42510@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:21:06] *** Quits: sa1_ (sid7690@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:21:07] *** Quits: cln (sid336875@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:26:15] *** Joins: beka (~beka@104.193.170.240)
[06:26:53] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 244 seconds)
[06:28:15] *** Joins: obviyus (sid415299@user/obviyus)
[06:29:53] *** Joins: mmhat (~mmh@55d4bfe6.access.ecotel.net)
[06:34:39] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[06:34:39] *** Joins: ysh (sid6017@id-6017.ilkley.irccloud.com)
[06:34:42] *** Joins: mrianbloom (sid350277@id-350277.ilkley.irccloud.com)
[06:34:45] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:35:02] *** Joins: pepeiborra (sid443799@id-443799.ilkley.irccloud.com)
[06:35:02] *** Joins: S11001001 (sid42510@id-42510.ilkley.irccloud.com)
[06:35:06] *** Joins: caasih (sid13241@id-13241.ilkley.irccloud.com)
[06:35:09] *** Joins: angerman (sid209936@id-209936.ilkley.irccloud.com)
[06:35:20] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[06:35:37] <remexre> oh just realized I need alpha-equivalence anyway
[06:35:41] *** Joins: SethTisue__ (sid14912@id-14912.ilkley.irccloud.com)
[06:35:50] <remexre> so nothing deriving-shaped will prolly help
[06:35:53] *** Joins: tapas (sid467876@id-467876.ilkley.irccloud.com)
[06:36:13] *** Joins: gmc (sid58314@id-58314.ilkley.irccloud.com)
[06:36:17] *** Joins: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com)
[06:36:19] *** Joins: jonrh (sid5185@id-5185.ilkley.irccloud.com)
[06:36:24] *** Joins: sa1_ (sid7690@id-7690.ilkley.irccloud.com)
[06:36:42] *** Joins: rune (sid21167@id-21167.ilkley.irccloud.com)
[06:37:17] *** Joins: bw (sid2730@user/betawaffle)
[06:37:25] *** Joins: rtpg (sid443069@id-443069.ilkley.irccloud.com)
[06:37:36] *** Joins: cln (sid336875@id-336875.ilkley.irccloud.com)
[06:38:45] *** Joins: hook54321 (sid149355@user/hook54321)
[06:40:41] *** Quits: mmhat (~mmh@55d4bfe6.access.ecotel.net) (Quit: WeeChat 3.3)
[06:44:11] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[06:44:59] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Client Quit)
[06:47:02] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:47:27] *** Quits: cln (sid336875@id-336875.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:47:28] *** Quits: ysh (sid6017@id-6017.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:47:28] *** Quits: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:47:28] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:47:28] *** Quits: S11001001 (sid42510@id-42510.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:47:47] *** Quits: caasih (sid13241@id-13241.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:48:04] *** Quits: SethTisue__ (sid14912@id-14912.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:48:04] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 268 seconds)
[06:48:05] *** Quits: rtpg (sid443069@id-443069.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:48:05] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 268 seconds)
[06:48:05] *** Quits: supersven (sid501114@id-501114.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:48:05] *** Quits: angerman (sid209936@id-209936.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:48:23] *** Quits: sa1_ (sid7690@id-7690.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:48:41] *** Quits: gmc (sid58314@id-58314.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:48:42] *** Quits: jonrh (sid5185@id-5185.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:48:59] *** Quits: rune (sid21167@id-21167.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:49:18] *** Quits: tapas (sid467876@id-467876.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:49:19] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 268 seconds)
[06:49:35] *** Quits: mrianbloom (sid350277@id-350277.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:49:44] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[06:49:47] *** Joins: SethTisue__ (sid14912@ilkley.irccloud.com)
[06:49:48] *** Joins: rune (sid21167@ilkley.irccloud.com)
[06:49:49] *** Joins: ysh (sid6017@ilkley.irccloud.com)
[06:49:50] *** Joins: caasih (sid13241@ilkley.irccloud.com)
[06:49:52] *** Joins: tapas (sid467876@ilkley.irccloud.com)
[06:49:53] *** Joins: pepeiborra (sid443799@ilkley.irccloud.com)
[06:50:57] *** Joins: jonrh (sid5185@ilkley.irccloud.com)
[06:50:58] *** Joins: sa1_ (sid7690@ilkley.irccloud.com)
[06:51:02] *** Joins: mrianbloom (sid350277@ilkley.irccloud.com)
[06:51:02] *** Joins: rtpg (sid443069@ilkley.irccloud.com)
[06:51:04] *** Joins: cln (sid336875@ilkley.irccloud.com)
[06:51:06] *** Joins: angerman (sid209936@ilkley.irccloud.com)
[06:52:37] *** Joins: ProofTechnique (sid79547@ilkley.irccloud.com)
[06:52:38] *** Joins: gmc (sid58314@ilkley.irccloud.com)
[06:52:43] *** Joins: S11001001 (sid42510@ilkley.irccloud.com)
[06:52:43] *** Joins: supersven (sid501114@ilkley.irccloud.com)
[06:52:45] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[06:52:49] *** Joins: bw (sid2730@user/betawaffle)
[06:55:14] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[06:55:17] *** Joins: mbuf (~Shakthi@182.77.100.170)
[06:56:21] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Read error: Connection reset by peer)
[06:56:42] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[06:57:07] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[06:59:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[07:04:53] *** Joins: hook54321 (sid149355@user/hook54321)
[07:07:30] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:07:30] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:07:30] *** finn_elija is now known as FinnElija
[07:29:47] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[07:30:07] *** Quits: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0) (Quit: I seem to have stopped.)
[07:30:48] *** Joins: yauhsien_ (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[07:30:48] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:31:13] *** Joins: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0)
[07:31:59] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Ping timeout: 244 seconds)
[07:31:59] *** Quits: angerman (sid209936@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[07:31:59] *** Quits: pepeiborra (sid443799@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[07:31:59] *** Quits: ysh (sid6017@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[07:31:59] *** Quits: rune (sid21167@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[07:31:59] *** Quits: SethTisue__ (sid14912@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[07:31:59] *** Quits: idnar (sid12240@debian/mithrandi) (Ping timeout: 244 seconds)
[07:31:59] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (Ping timeout: 244 seconds)
[07:31:59] *** Quits: lightandlight (sid135476@helmsley.irccloud.com) (Ping timeout: 244 seconds)
[07:32:11] *** Quits: enemeth79 (sid309041@lymington.irccloud.com) (Ping timeout: 245 seconds)
[07:32:11] *** Quits: conjunctive (sid433686@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[07:32:11] *** Quits: PotatoGim (sid99505@lymington.irccloud.com) (Ping timeout: 245 seconds)
[07:32:11] *** Quits: cln (sid336875@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[07:32:11] *** Quits: sa1_ (sid7690@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[07:32:11] *** Quits: vito (sid1962@user/vito) (Ping timeout: 256 seconds)
[07:32:11] *** Quits: ephemient (uid407513@lymington.irccloud.com) (Ping timeout: 256 seconds)
[07:32:11] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[07:32:11] *** Quits: kaychaks__ (sid236345@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[07:32:14] *** Quits: JSharp (sid4580@lymington.irccloud.com) (Ping timeout: 260 seconds)
[07:32:14] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 260 seconds)
[07:32:14] *** Quits: awpr (uid446117@lymington.irccloud.com) (Ping timeout: 260 seconds)
[07:32:14] *** Quits: glowcoil (sid3405@tinside.irccloud.com) (Ping timeout: 260 seconds)
[07:32:14] *** Quits: joel135 (sid136450@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[07:32:24] *** Quits: grfn (sid449115@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[07:32:28] *** Quits: caasih (sid13241@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[07:32:28] *** Quits: whez (sid470288@lymington.irccloud.com) (Ping timeout: 268 seconds)
[07:32:30] *** Quits: S11001001 (sid42510@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[07:32:30] *** Quits: supersven (sid501114@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[07:32:30] *** Quits: b20n (sid115913@uxbridge.irccloud.com) (Ping timeout: 244 seconds)
[07:32:30] *** Quits: edmundnoble (sid229620@helmsley.irccloud.com) (Ping timeout: 244 seconds)
[07:32:30] *** Quits: hamishmack (sid389057@hampstead.irccloud.com) (Ping timeout: 244 seconds)
[07:32:36] *** Quits: degraafk (sid71464@lymington.irccloud.com) (Ping timeout: 245 seconds)
[07:32:36] *** Quits: saolsen (sid26430@lymington.irccloud.com) (Ping timeout: 245 seconds)
[07:32:40] *** Quits: philpax_ (sid516926@lymington.irccloud.com) (Ping timeout: 260 seconds)
[07:32:40] *** Quits: sclv (sid39734@haskell/developer/sclv) (Ping timeout: 260 seconds)
[07:32:40] *** Quits: SrPx (sid108780@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[07:32:42] *** Quits: sa (sid1055@tinside.irccloud.com) (Ping timeout: 260 seconds)
[07:32:42] *** Quits: ehamberg (sid18208@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[07:32:42] *** Quits: econo (uid147250@user/econo) (Ping timeout: 260 seconds)
[07:32:42] *** Quits: dpratt_ (sid193493@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[07:32:42] *** Quits: elvishjerricco (sid237756@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[07:32:45] *** Quits: hendi (sid489601@lymington.irccloud.com) (Ping timeout: 256 seconds)
[07:32:45] *** Quits: SanchayanMaity (sid478177@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[07:32:45] *** Quits: christiaanb (sid84827@lymington.irccloud.com) (Ping timeout: 256 seconds)
[07:32:45] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[07:32:45] *** Quits: systemfault (sid267009@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[07:32:45] *** Quits: alinab (sid468903@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[07:32:47] *** Quits: typetetris (sid275937@tinside.irccloud.com) (Ping timeout: 268 seconds)
[07:32:47] *** Joins: pepeiborra (sid443799@ilkley.irccloud.com)
[07:32:49] *** Joins: rune (sid21167@id-21167.ilkley.irccloud.com)
[07:32:51] *** Joins: vito (sid1962@user/vito)
[07:32:52] *** Joins: angerman (sid209936@ilkley.irccloud.com)
[07:32:54] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:32:56] *** Joins: SethTisue__ (sid14912@ilkley.irccloud.com)
[07:32:56] *** Joins: enemeth79 (sid309041@id-309041.lymington.irccloud.com)
[07:33:01] *** Quits: mrianbloom (sid350277@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[07:33:01] *** Quits: tapas (sid467876@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[07:33:01] *** Quits: pjlsergeant (sid143467@hampstead.irccloud.com) (Ping timeout: 244 seconds)
[07:33:01] *** Quits: NemesisD (sid24071@lymington.irccloud.com) (Ping timeout: 244 seconds)
[07:33:01] *** Quits: hongminhee (sid295@tinside.irccloud.com) (Ping timeout: 244 seconds)
[07:33:01] *** Quits: T_S_ (sid501726@uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[07:33:01] *** Quits: davetapley (sid666@uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[07:33:01] *** Quits: jmct_ (sid160793@tinside.irccloud.com) (Ping timeout: 245 seconds)
[07:33:01] *** Quits: acertain (sid470584@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[07:33:01] *** Quits: kaizen (sid501599@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[07:33:01] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (Ping timeout: 245 seconds)
[07:33:05] *** Quits: ProofTechnique (sid79547@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[07:33:05] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 268 seconds)
[07:33:05] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 268 seconds)
[07:33:10] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[07:33:10] *** Quits: truckasaurus (sid457088@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[07:33:10] *** Quits: etrepum (sid763@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[07:33:19] *** Quits: Pent (sid313808@lymington.irccloud.com) (Ping timeout: 256 seconds)
[07:33:19] *** Quits: agander_m (sid407952@tinside.irccloud.com) (Ping timeout: 256 seconds)
[07:33:19] *** Quits: Firedancer (sid336191@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[07:33:19] *** Quits: servytor (uid525486@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[07:33:19] *** Quits: taktoa[c] (sid282096@tinside.irccloud.com) (Ping timeout: 256 seconds)
[07:33:19] *** Quits: jackdk (sid373013@cssa/jackdk) (Ping timeout: 256 seconds)
[07:33:19] *** Quits: meinside (uid24933@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[07:33:20] *** Joins: cln (sid336875@id-336875.ilkley.irccloud.com)
[07:33:23] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 264 seconds)
[07:33:26] *** Quits: iphy (sid67735@lymington.irccloud.com) (Ping timeout: 245 seconds)
[07:33:26] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[07:33:32] *** Quits: parseval (sid239098@helmsley.irccloud.com) (Ping timeout: 244 seconds)
[07:33:32] *** Quits: aarchi (sid486183@uxbridge.irccloud.com) (Ping timeout: 244 seconds)
[07:33:35] *** Joins: ysh (sid6017@id-6017.ilkley.irccloud.com)
[07:33:37] *** Joins: idnar (sid12240@debian/mithrandi)
[07:33:38] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 260 seconds)
[07:33:38] *** Quits: astra` (sid289983@user/amish) (Ping timeout: 260 seconds)
[07:33:38] *** Joins: lightandlight (sid135476@2a03:5180:f:1::2:1134)
[07:33:46] *** Quits: beka (~beka@104.193.170.240) (Read error: Connection reset by peer)
[07:33:51] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[07:33:51] *** Joins: rubin55 (sid175221@2a03:5180:f:4::2:ac75)
[07:33:53] *** Quits: gmc (sid58314@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[07:33:53] *** Quits: dsal (sid13060@lymington.irccloud.com) (Ping timeout: 256 seconds)
[07:33:53] *** Quits: cbarrett (sid192934@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[07:33:53] *** Quits: scav (sid309693@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[07:33:53] *** Quits: tnks (sid412124@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[07:33:53] *** Quits: integral (sid296274@user/integral) (Ping timeout: 256 seconds)
[07:33:54] *** Joins: NemesisD (sid24071@2a03:5180:f:2::5e07)
[07:33:57] *** Joins: typetetris (sid275937@2a03:5180:f::4:35e1)
[07:33:58] *** Joins: hamishmack (sid389057@2a03:5180:f:4::5:efc1)
[07:33:59] *** Joins: sclv (sid39734@haskell/developer/sclv)
[07:33:59] *** Joins: edmundnoble (sid229620@2a03:5180:f:1::3:80f4)
[07:34:02] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[07:34:02] *** Joins: b20n (sid115913@2a03:5180:f:5::1:c4c9)
[07:34:02] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[07:34:02] *** Joins: glowcoil (sid3405@id-3405.tinside.irccloud.com)
[07:34:03] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[07:34:04] *** Joins: tapas (sid467876@2a03:5180:f:3::7:23a4)
[07:34:05] *** Joins: elvishjerricco (sid237756@2a03:5180:f:1::3:a0bc)
[07:34:05] *** Joins: econo (uid147250@user/econo)
[07:34:06] *** Quits: stevenxl (sid133530@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[07:34:06] *** Quits: nrr_ (sid20938@lymington.irccloud.com) (Ping timeout: 260 seconds)
[07:34:06] *** Quits: mcfilib (sid302703@user/mcfilib) (Ping timeout: 260 seconds)
[07:34:06] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[07:34:07] *** Joins: bjs (sid190364@user/bjs)
[07:34:07] *** Joins: mrianbloom (sid350277@2a03:5180:f:3::5:5845)
[07:34:08] *** Joins: parseval (sid239098@2a03:5180:f:1::3:a5fa)
[07:34:11] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[07:34:11] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[07:34:12] *** Joins: astra` (sid289983@user/amish)
[07:34:13] *** Joins: S11001001 (sid42510@2a03:5180:f:3::a60e)
[07:34:13] *** Joins: hongminhee (sid295@id-295.tinside.irccloud.com)
[07:34:16] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[07:34:16] *** Joins: ehamberg (sid18208@id-18208.hampstead.irccloud.com)
[07:34:19] *** Joins: kaizen (sid501599@id-501599.helmsley.irccloud.com)
[07:34:21] *** Joins: truckasaurus (sid457088@id-457088.helmsley.irccloud.com)
[07:34:21] *** Joins: stevenxl (sid133530@id-133530.uxbridge.irccloud.com)
[07:34:23] *** Joins: joel135 (sid136450@2a03:5180:f:4::2:1502)
[07:34:25] *** Joins: etrepum (sid763@id-763.uxbridge.irccloud.com)
[07:34:25] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[07:34:26] *** Joins: degraafk (sid71464@id-71464.lymington.irccloud.com)
[07:34:27] *** Joins: caasih (sid13241@id-13241.ilkley.irccloud.com)
[07:34:27] *** Joins: acertain (sid470584@id-470584.hampstead.irccloud.com)
[07:34:28] *** Joins: servytor (uid525486@id-525486.hampstead.irccloud.com)
[07:34:28] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[07:34:29] *** Joins: Firedancer (sid336191@id-336191.hampstead.irccloud.com)
[07:34:32] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[07:34:32] *** Joins: systemfault (sid267009@id-267009.uxbridge.irccloud.com)
[07:34:33] *** Joins: nrr_ (sid20938@id-20938.lymington.irccloud.com)
[07:34:35] *** Joins: alinab (sid468903@id-468903.helmsley.irccloud.com)
[07:34:35] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[07:34:36] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[07:34:36] *** Joins: ephemient (uid407513@id-407513.lymington.irccloud.com)
[07:34:36] *** Joins: gmc (sid58314@id-58314.ilkley.irccloud.com)
[07:34:36] *** Joins: jmct_ (sid160793@2a03:5180:f::2:7419)
[07:34:37] *** Joins: whez (sid470288@id-470288.lymington.irccloud.com)
[07:34:39] *** Joins: bw (sid2730@user/betawaffle)
[07:34:39] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[07:34:39] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[07:34:40] *** Joins: sa1_ (sid7690@id-7690.ilkley.irccloud.com)
[07:34:40] *** Joins: kaychaks__ (sid236345@id-236345.helmsley.irccloud.com)
[07:34:41] *** Joins: jackdk (sid373013@cssa/jackdk)
[07:34:41] *** Joins: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com)
[07:34:41] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[07:34:42] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[07:34:43] *** Joins: integral (sid296274@user/integral)
[07:34:43] *** Joins: iphy (sid67735@id-67735.lymington.irccloud.com)
[07:34:43] *** Joins: davetapley (sid666@id-666.uxbridge.irccloud.com)
[07:34:45] *** Joins: saolsen (sid26430@id-26430.lymington.irccloud.com)
[07:34:45] *** Joins: tnks (sid412124@id-412124.helmsley.irccloud.com)
[07:34:45] *** Joins: scav (sid309693@id-309693.helmsley.irccloud.com)
[07:34:46] *** Joins: taktoa[c] (sid282096@id-282096.tinside.irccloud.com)
[07:34:46] *** Joins: dpratt_ (sid193493@id-193493.helmsley.irccloud.com)
[07:34:46] *** Joins: mcfilib (sid302703@user/mcfilib)
[07:34:46] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[07:34:47] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[07:34:48] *** Joins: christiaanb (sid84827@id-84827.lymington.irccloud.com)
[07:34:49] *** Joins: T_S_ (sid501726@id-501726.uxbridge.irccloud.com)
[07:35:02] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[07:35:16] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[07:35:48] *** Joins: philpax_ (sid516926@id-516926.lymington.irccloud.com)
[07:35:49] *** Joins: hook54321 (sid149355@user/hook54321)
[07:36:04] *** Joins: hubvu (sid495858@user/hubvu)
[07:41:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:41:28] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:44:02] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[07:45:09] *** Quits: emf_ (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[07:47:23] *** Joins: grfn (sid449115@id-449115.helmsley.irccloud.com)
[07:49:45] *** Quits: yauhsien_ (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[08:13:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[08:15:27] *** Quits: cjb (~cjbayliss@user/cjb) ()
[08:27:18] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Ping timeout: 260 seconds)
[08:27:32] *** Joins: Evenless (~Evenless@107.181.155.110)
[08:28:37] *** Quits: EvanR (~evan@user/evanr) (Quit: WeeChat 3.3)
[08:30:39] *** Quits: ddb (~ddb@ipv6two.tilde.club) (Quit: WeeChat 3.3)
[08:32:39] <Inst> when you give up @[exa] on trying to get nativefiledialog to work and decide to learn C just to reimplement the thing for a FFI
[08:43:09] *** Joins: keep_learning (~keep_lear@103.12.191.19)
[08:45:27] *** Joins: deadmarshal (~deadmarsh@95.38.230.72)
[08:47:44] *** Quits: keep_learning (~keep_lear@103.12.191.19) (Quit: Leaving)
[08:49:02] *** Joins: keep_learning (~keep_lear@103.12.191.19)
[08:49:06] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:51:54] *** Joins: vicfred (~vicfred@user/vicfred)
[08:54:14] <keep_learning> Hi everyone, I am trying to install GHC on Apple M1, but getting this error: ➜  ~ stack ghci
[08:54:14] <keep_learning> I don't know how to install GHC for (OSX,AArch64), please install manually
[08:54:54] <keep_learning> Any idea about installing it on Apple M1? 
[09:00:03] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[09:05:58] *** Joins: michael1 (~michael@2600:1700:7c02:3180::14)
[09:06:14] *** Quits: michael1 (~michael@2600:1700:7c02:3180::14) (Client Quit)
[09:07:11] *** Quits: xff0x (~xff0x@2001:1a81:532b:d400:5d59:4d8a:f670:7fef) (Ping timeout: 245 seconds)
[09:08:18] *** Joins: xff0x (~xff0x@2001:1a81:532b:d400:367d:ebe:3403:82f3)
[09:12:23] *** Joins: x6C697370 (~michael@2600:1700:7c02:3180::14)
[09:13:56] <dsal> I'm running it out of nix.
[09:17:02] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[09:20:04] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:23:41] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:25:15] *** Quits: APic (apic@apic.name) (Ping timeout: 260 seconds)
[09:25:33] *** Joins: APic (~apic@apic.name)
[09:29:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:29:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:29:27] *** Joins: wroathe (~wroathe@user/wroathe)
[09:34:59] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (*.net *.split)
[09:34:59] *** Quits: xerox (~edi@user/edi) (*.net *.split)
[09:34:59] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (*.net *.split)
[09:34:59] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (*.net *.split)
[09:34:59] *** Quits: mstruebing (~maex@2001:41d0:8:93c7::1) (*.net *.split)
[09:34:59] *** Quits: bwe (~bwe@2a01:4f8:1c1c:4878::2) (*.net *.split)
[09:34:59] *** Quits: codedmart (codedmart@2600:3c01::f03c:92ff:fefe:8511) (*.net *.split)
[09:34:59] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[09:34:59] *** Quits: Aleksejs (~Aleksejs@haskell.lv) (*.net *.split)
[09:34:59] *** Quits: jakalx (~jakalx@base.jakalx.net) (*.net *.split)
[09:34:59] *** Quits: dispater (~dispater@user/brprice) (*.net *.split)
[09:34:59] *** Quits: Putonlalla (~sapekiis@it-cyan.it.jyu.fi) (*.net *.split)
[09:34:59] *** Quits: mikko (~mikko@2a02:7b40:d418:6a61::1) (*.net *.split)
[09:34:59] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[09:34:59] *** Quits: bah (~bah@l1.tel) (*.net *.split)
[09:35:07] *** Joins: bwe (~bwe@2a01:4f8:1c1c:4878::2)
[09:35:07] *** Joins: xerox (~edi@user/edi)
[09:35:12] *** Joins: Aleksejs (~Aleksejs@haskell.lv)
[09:35:13] *** Joins: bah (~bah@l1.tel)
[09:35:14] *** Joins: reda (~reda@user/reda)
[09:35:15] *** Joins: codedmart (codedmart@2600:3c01::f03c:92ff:fefe:8511)
[09:35:16] *** Joins: mstruebing (~maex@2001:41d0:8:93c7::1)
[09:35:20] *** Joins: Putonlalla (~sapekiis@it-cyan.it.jyu.fi)
[09:35:23] *** Joins: mikko (~mikko@2a02:7b40:d418:6a61::1)
[09:35:26] *** Joins: dispater (~dispater@user/brprice)
[09:35:32] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[09:35:44] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[09:35:52] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[09:35:58] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:36:14] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[09:38:54] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[09:41:47] *** Joins: hololeap_ (~hololeap@user/hololeap)
[09:42:53] *** Quits: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a) (*.net *.split)
[09:42:53] *** Quits: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da) (*.net *.split)
[09:42:53] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (*.net *.split)
[09:42:53] *** Quits: stoicswe[m] (~deadlette@2001:470:69fc:105::d277) (*.net *.split)
[09:42:53] *** Quits: Tavi[m] (~factoidde@2001:470:69fc:105::1:819) (*.net *.split)
[09:42:53] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (*.net *.split)
[09:42:53] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (*.net *.split)
[09:42:53] *** Quits: Deide (~deide@user/deide) (*.net *.split)
[09:42:53] *** Quits: zfnmxt (~zfnmxtzfn@user/zfnmxt) (*.net *.split)
[09:42:53] *** Quits: Tisoxin (~ikosit@user/ikosit) (*.net *.split)
[09:42:53] *** Quits: drlkf (~drlkf@2001:41d0:a:62bb::1) (*.net *.split)
[09:42:53] *** Quits: shane (~shane@ana.rch.ist) (*.net *.split)
[09:42:53] *** Quits: duckonomy (~duckonomy@177.ip-144-217-84.net) (*.net *.split)
[09:42:54] *** Quits: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca) (*.net *.split)
[09:42:54] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[09:42:54] *** Quits: alp (~alp@user/alp) (*.net *.split)
[09:42:54] *** Quits: guibou (~guibou@mail.fmap.fr) (*.net *.split)
[09:42:54] *** Quits: marienz (~marienz@libera/staff/marienz) (*.net *.split)
[09:42:54] *** Quits: ajb_ (~ajb@cupid.whatbox.ca) (*.net *.split)
[09:42:54] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[09:42:54] *** Quits: spoonm (spoonm@inaba.spoonm.org) (*.net *.split)
[09:42:54] *** Quits: Clint (~Clint@user/clint) (*.net *.split)
[09:42:54] *** Quits: dragestil (~znc@user/dragestil) (*.net *.split)
[09:42:54] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[09:42:54] *** Quits: edr (~edr@user/edr) (*.net *.split)
[09:42:54] *** Quits: kosmikus (~kosmikus@nullzig.kosmikus.org) (*.net *.split)
[09:42:54] *** Quits: np (~nerdypepp@user/nerdypepper) (*.net *.split)
[09:42:54] *** Quits: Philonous_ (~Philonous@user/philonous) (*.net *.split)
[09:42:54] *** Quits: skn (~znc@sec.nimmagadda.net) (*.net *.split)
[09:42:54] *** Quits: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg) (*.net *.split)
[09:42:54] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[09:42:54] *** Quits: dy (~dy@user/dy) (*.net *.split)
[09:42:54] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[09:42:54] *** Quits: statusfailed (~statusfai@statusfailed.com) (*.net *.split)
[09:42:54] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[09:43:00] *** Joins: shachaf (~shachaf@user/shachaf)
[09:43:02] *** Joins: ajb (~ajb@cupid.whatbox.ca)
[09:43:03] *** Joins: PigDude (~PigDude@159.203.16.199)
[09:43:03] *** Joins: Clint (~Clint@user/clint)
[09:43:04] *** Joins: shane (~shane@ana.rch.ist)
[09:43:05] *** Joins: kosmikus (~kosmikus@nullzig.kosmikus.org)
[09:43:05] *** Joins: statusfailed (~statusfai@statusfailed.com)
[09:43:05] *** Joins: marienz (~marienz@libera/staff/marienz)
[09:43:06] *** Joins: edr (~edr@enlo.co)
[09:43:06] *** Joins: spoonm (spoonm@inaba.spoonm.org)
[09:43:07] *** Joins: chronon (~chronon@user/chronon)
[09:43:07] *** Joins: loonycyborg (~loonycybo@chantal.wesnoth.org)
[09:43:08] *** Quits: loonycyborg (~loonycybo@chantal.wesnoth.org) (Changing host)
[09:43:08] *** Joins: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg)
[09:43:10] *** Joins: drlkf (~drlkf@2001:41d0:a:62bb::1)
[09:43:14] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[09:43:17] *** Quits: edr (~edr@enlo.co) (Changing host)
[09:43:17] *** Joins: edr (~edr@user/edr)
[09:43:39] *** Joins: dragestil (~znc@user/dragestil)
[09:43:39] *** Joins: skn (~znc@sec.nimmagadda.net)
[09:43:44] *** Joins: duckonomy (~duckonomy@177.ip-144-217-84.net)
[09:43:46] *** Joins: Philonous (~Philonous@user/philonous)
[09:43:47] *** Joins: dy (~dy@user/dy)
[09:43:49] *** Joins: hexeme (~hexeme@user/hexeme)
[09:43:50] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[09:43:51] *** Joins: nerdypepper (~nerdypepp@user/nerdypepper)
[09:44:08] *** Joins: guibou (~guibou@mail.fmap.fr)
[09:44:37] *** Joins: aleator (~aleator@37-136-225-173.rev.dnainternet.fi)
[09:44:38] *** Joins: alp (~alp@mail.fmap.fr)
[09:44:54] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[09:45:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:45:30] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[09:45:53] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[09:46:33] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[09:46:53] *** Joins: Deide (~deide@user/deide)
[09:47:21] *** Joins: Tisoxin (~ikosit@user/ikosit)
[09:48:01] *** Quits: deadmarshal (~deadmarsh@95.38.230.72) (Ping timeout: 245 seconds)
[09:48:50] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[09:49:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 244 seconds)
[09:49:58] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[09:50:01] *** Joins: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a)
[09:50:40] <jneira[m]> <keep_learning> "Any idea about installing it..." <- you could use ghcup to install it
[09:51:01] *** Quits: APic (~apic@apic.name) (Ping timeout: 256 seconds)
[09:51:01] *** Joins: vysn (~vysn@user/vysn)
[09:51:13] *** Joins: APic (apic@apic.name)
[09:51:21] *** Joins: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da)
[09:51:46] *** Quits: xff0x (~xff0x@2001:1a81:532b:d400:367d:ebe:3403:82f3) (Ping timeout: 245 seconds)
[09:52:14] <jneira[m]> and then change stack config to tell it use that ghc
[09:52:44] *** Joins: xff0x (~xff0x@2001:1a81:532b:d400:67c6:a1f5:dcda:511e)
[09:52:55] <jneira[m]> I think you could use brew as well
[09:55:09] *** Joins: Tavi[m] (~factoidde@2001:470:69fc:105::1:819)
[09:55:13] *** Joins: deadmarshal (~deadmarsh@95.38.230.72)
[09:56:08] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 244 seconds)
[09:56:35] *** Joins: stoicswe[m] (~deadlette@2001:470:69fc:105::d277)
[09:57:00] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[09:59:48] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[10:03:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:03:37] <keep_learning> jneira[m], Thanks for the brew suggestion. 
[10:04:24] *** Quits: APic (apic@apic.name) (Ping timeout: 244 seconds)
[10:06:04] <keep_learning> My next question is assuming that I install GHC using 'brew install ghc', how can I point the stack to get it when I am running 'stack ghci'? 
[10:07:36] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 245 seconds)
[10:10:17] <dsal> I don't think "brew install" is super high up in the list of recommended methods, but there's a flag for using your system ghc.
[10:10:17] <jneira[m]> the usual way is tell stack to use the "system" ghc (the ghc on PATH) with `system-ghc: true` in the project `stack.yaml` or in the global config `$STACK_ROOT/config.yml` (with `install-ghc: false` as stack is not able to download a suited one for now)
[10:10:24] <jneira[m]> https://docs.haskellstack.org/en/stable/yaml_configuration/#system-ghc
[10:10:34] <jneira[m]> https://docs.haskellstack.org/en/stable/yaml_configuration/#install-ghc
[10:10:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:10:58] <dsal> Assuming you have a project already, the project should define the ghc that's being used.  It's a bit weird to use stack and not let it pick a compiler.
[10:11:12] <dsal> But it integrates reasonably well with nix, so I just let nix do all that.
[10:12:31] *** Joins: andreabedini (~andreabed@2404:9400:4:0:216:3eff:fee2:321f)
[10:14:16] *** Quits: andreabedini (~andreabed@2404:9400:4:0:216:3eff:fee2:321f) (Client Quit)
[10:16:24] *** Joins: xkuru (~xkuru@user/xkuru)
[10:19:18] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[10:19:44] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[10:20:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:20:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:20:20] *** Joins: wroathe (~wroathe@user/wroathe)
[10:21:15] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:21:56] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:24:30] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:24:33] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 244 seconds)
[10:24:33] *** Quits: deadmarshal (~deadmarsh@95.38.230.72) (Ping timeout: 244 seconds)
[10:25:04] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 244 seconds)
[10:25:04] *** Joins: deadmarshal (~deadmarsh@95.38.230.72)
[10:25:16] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[10:26:02] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[10:29:45] <kronicmage> hey folks, i'm trying to implement modular exponentiation via repeated squaring, using recursion-schemes
[10:30:03] <kronicmage> the best i can come up with so far is a hylomorphism to/from ListF: https://paste.tomsmeding.com/iGsteAqV
[10:30:25] <kronicmage> but it feels a lot bigger than the naive recursion implementation
[10:30:39] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:30:41] <kronicmage> is there any recursion-scheme or base functor i can use that can implement the evenness check more directly than what I have here?
[10:32:32] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[10:36:16] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:37:28] *** Quits: Evenless (~Evenless@107.181.155.110) (Remote host closed the connection)
[10:39:29] *** Joins: neurocyte0132889 (~neurocyte@212.232.86.238)
[10:39:29] *** Quits: neurocyte0132889 (~neurocyte@212.232.86.238) (Changing host)
[10:39:29] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[10:39:39] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[10:43:46] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[10:44:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[10:44:42] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 244 seconds)
[10:56:32] *** Quits: deadmarshal (~deadmarsh@95.38.230.72) (Ping timeout: 240 seconds)
[10:57:22] <kronicmage> one small thing I can do is pass in just `exp` instead of `(val, exp)`, and alter `toBinaryRep` accordingly
[10:58:08] <kronicmage> but that doesn't fundamentally get me any closer to what I'm looking for
[11:04:42] *** Joins: rkrishnan (~user@122.167.19.65)
[11:08:45] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[11:11:53] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 250 seconds)
[11:14:38] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[11:16:21] *** Quits: xff0x (~xff0x@2001:1a81:532b:d400:67c6:a1f5:dcda:511e) (Ping timeout: 245 seconds)
[11:16:53] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:c461:9db1:2779:896d)
[11:18:31] *** Joins: xff0x (~xff0x@2001:1a81:5343:8e00:7766:f7a:daa3:b76a)
[11:22:17] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[11:26:11] *** Quits: aleator (~aleator@37-136-225-173.rev.dnainternet.fi) (Quit: leaving)
[11:26:27] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[11:26:58] *** Joins: shidima (~shidima@46.44.183.25)
[11:27:30] *** Quits: sus (zero@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[11:28:00] *** Joins: sus (zero@user/zeromomentum)
[11:28:01] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:29:09] *** Quits: finsternis (~X@23.226.237.192) (Remote host closed the connection)
[11:30:39] *** Joins: cfricke (~cfricke@user/cfricke)
[11:39:29] *** Quits: o (~niko@libera/staff/niko) (Quit: i will be back)
[11:39:43] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[11:39:57] *** Joins: o (~niko@libera/staff/niko)
[11:40:29] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[11:44:05] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[11:44:34] *** Joins: fendor (~fendor@77.119.198.57.wireless.dyn.drei.com)
[11:45:06] *** Quits: edwtjo (~edwtjo@user/edwtjo) (Ping timeout: 245 seconds)
[11:46:23] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[11:46:43] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:47:22] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:48:35] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:48:51] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[11:49:25] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:50:33] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[11:50:35] *** Quits: ssssssyd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net) (Ping timeout: 256 seconds)
[11:53:11] *** Joins: michalz (~michalz@185.246.204.61)
[11:55:13] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[11:58:12] *** Joins: dschrempf (~dominik@62.240.134.151)
[12:00:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:09:02] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:10:59] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 244 seconds)
[12:11:35] *** Joins: APic (apic@apic.name)
[12:12:59] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[12:18:22] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:20:35] *** Quits: fendor (~fendor@77.119.198.57.wireless.dyn.drei.com) (Remote host closed the connection)
[12:20:48] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[12:20:48] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[12:20:48] *** Joins: wroathe (~wroathe@user/wroathe)
[12:21:36] *** Joins: chele (~chele@user/chele)
[12:24:19] *** Joins: nineonine (~nineonine@2604:3d08:7780:cd00:94f7:1c4f:2fa7:9763)
[12:25:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[12:26:56] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[12:29:56] *** Joins: acidjnk_new (~acidjnk@p200300d0c7404a3915a2950adbd6cce8.dip0.t-ipconnect.de)
[12:30:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:31:11] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 250 seconds)
[12:35:31] *** Joins: deadmarshal (~deadmarsh@95.38.230.72)
[12:43:36] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[12:46:49] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:46:53] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[12:47:43] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:43] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:46] *** allbery_b is now known as geekosaur
[12:48:05] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[12:51:17] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 244 seconds)
[12:57:11] *** Quits: x6C697370 (~michael@2600:1700:7c02:3180::14) (Ping timeout: 245 seconds)
[12:57:37] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[12:58:08] *** Joins: edwtjo (~edwtjo@h-109-228-137-133.a213.priv.bahnhof.se)
[12:58:08] *** Quits: edwtjo (~edwtjo@h-109-228-137-133.a213.priv.bahnhof.se) (Changing host)
[12:58:08] *** Joins: edwtjo (~edwtjo@user/edwtjo)
[13:01:07] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[13:02:37] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[13:04:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[13:08:03] *** Quits: emanuel_ (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[13:10:40] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[13:14:39] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[13:18:17] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[13:26:03] *** Joins: wonko (~wjc@user/wonko)
[13:27:27] *** Quits: deadmarshal (~deadmarsh@95.38.230.72) (Ping timeout: 244 seconds)
[13:28:02] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:28:14] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[13:30:51] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:30:53] *** Quits: nineonine (~nineonine@2604:3d08:7780:cd00:94f7:1c4f:2fa7:9763) (Remote host closed the connection)
[13:31:57] *** Quits: keep_learning (~keep_lear@103.12.191.19) (Quit: Leaving)
[13:32:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[13:36:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:36:26] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[13:40:00] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 268 seconds)
[13:40:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[13:45:30] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[13:46:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:48:23] *** Quits: hololeap_ (~hololeap@user/hololeap) (Remote host closed the connection)
[13:49:51] *** Joins: hololeap_ (~hololeap@user/hololeap)
[13:50:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[13:51:21] *** Quits: dschrempf (~dominik@62.240.134.151) (Ping timeout: 250 seconds)
[13:52:36] *** Joins: mei3 (~mei@user/mei)
[13:52:44] *** Joins: notzmv (~zmv@user/notzmv)
[13:55:17] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[14:07:35] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:08:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:09:25] *** Joins: dschrempf (~dominik@62.240.134.151)
[14:12:18] *** Joins: Pickchea (~private@user/pickchea)
[14:13:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[14:14:38] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[14:15:44] *** Joins: retro_ (~retro@2e41e9c8.skybroadband.com)
[14:18:39] *** Quits: dschrempf (~dominik@62.240.134.151) (Ping timeout: 250 seconds)
[14:19:28] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[14:20:06] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 260 seconds)
[14:20:11] *** Joins: infinity0_ (~infinity0@occupy.ecodis.net)
[14:20:14] *** infinity0_ is now known as infinity0
[14:24:32] *** Quits: mei3 (~mei@user/mei) (Ping timeout: 240 seconds)
[14:27:17] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[14:36:39] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[14:36:45] *** Joins: thewakalix (~thewakali@secure-162.caltech.edu)
[14:38:04] <thewakalix> test
[14:39:26] <thewakalix> EOF
[14:39:34] <thewakalix> EOF
[14:40:03] *** Joins: dschrempf (~dominik@62.240.134.151)
[14:40:44] <thewakalix> whoops sorry, it needed << rather than <<<
[14:40:44] <thewakalix> ugh why isn't it streaming
[14:40:55] *** Quits: thewakalix (~thewakali@secure-162.caltech.edu) (Remote host closed the connection)
[14:41:02] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[14:44:32] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 240 seconds)
[14:45:07] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[14:45:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:50:45] *** o is now known as niko
[14:52:01] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[14:56:19] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[14:57:17] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[14:57:32] *** Quits: xff0x (~xff0x@2001:1a81:5343:8e00:7766:f7a:daa3:b76a) (Ping timeout: 240 seconds)
[14:58:43] *** Joins: xff0x (~xff0x@2001:1a81:5343:8e00:5493:6b48:2cf2:a878)
[14:59:23] *** Joins: Lycurgus (~juan@98.4.112.204)
[14:59:26] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Client Quit)
[15:00:39] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[15:01:54] *** Joins: Topsi (~Tobias@dyndsl-095-033-090-230.ewe-ip-backbone.de)
[15:05:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:07:59] *** Joins: vysn (~vysn@user/vysn)
[15:11:03] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:11:17] *** Joins: OndejSkup[m] (~mimivxmat@2001:470:69fc:105::c300)
[15:19:18] *** Quits: Unhammer (~Unhammer@user/unhammer) (Ping timeout: 268 seconds)
[15:20:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:20:20] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Quit: Leaving)
[15:20:39] *** Joins: max22- (~maxime@2a01cb08833598006622aac214a9d042.ipv6.abo.wanadoo.fr)
[15:22:37] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[15:23:00] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:25:50] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[15:26:39] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[15:29:01] *** Quits: hololeap_ (~hololeap@user/hololeap) (Remote host closed the connection)
[15:29:24] *** Quits: dschrempf (~dominik@62.240.134.151) (Quit: WeeChat 3.3)
[15:29:25] *** Joins: deadmarshal (~deadmarsh@95.38.230.72)
[15:30:25] *** Joins: hololeap_ (~hololeap@user/hololeap)
[15:30:26] *** Joins: Cajun (~Cajun@user/cajun)
[15:32:26] *** Joins: Unhammer (~Unhammer@user/unhammer)
[15:33:31] *** Quits: deadmarshal (~deadmarsh@95.38.230.72) (Ping timeout: 244 seconds)
[15:40:50] *** Joins: Guest87 (~Guest87@2a01:c22:b1bd:1f00:c404:2649:f4ca:6f49)
[15:45:45] *** Quits: rkrishnan (~user@122.167.19.65) (Ping timeout: 250 seconds)
[15:55:01] *** Quits: hiruji (~hiruji@user/hiruji) (Quit: ZNC 1.8.2 - https://znc.in)
[15:55:27] *** Joins: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5)
[15:55:33] *** Joins: hiruji (~hiruji@user/hiruji)
[15:55:33] *** Quits: hiruji (~hiruji@user/hiruji) (Remote host closed the connection)
[15:55:50] *** Joins: hiruji (~hiruji@user/hiruji)
[15:56:15] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 244 seconds)
[15:57:02] <arahael> Hmm, just used box-drawing characters in a string in haskell...  And it totally messed it up, I had to explicitly use text, then explicitly encode it to UTF-8.
[15:57:19] <arahael> Wondering how it was just somehow converting it to bytestring without encoding it.
[15:58:06] <arahael> I mean, the file is UTF-8.  The string is therefore UTF-8 in the syntax. But somehow, when spitting it out to bytestring, it was broken.
[15:58:13] *** Joins: kadir (~kadir@78.178.105.36)
[15:58:27] <maerwald> arahael: haskell String is not UTF-8
[15:58:34] <maerwald> how did you convert, what did you do?
[15:59:53] <arahael> I didn't really convert, I had overloaded strings, so I think "my strings" were already bytestrings.
[16:00:02] <maerwald> yeah, overloaded strings is broken
[16:00:07] <maerwald> the bytestring instance
[16:00:13] <arahael> That sucks.
[16:00:37] <maerwald> https://github.com/haskell/bytestring/issues/140
[16:00:49] <arahael> Thanks :)
[16:00:56] <maerwald> String is a list of unicode codepoints
[16:00:56] <arahael> It's definitely surprising.
[16:01:06] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[16:01:11] <maerwald> fromString truncates every codepoint to fit into Word8
[16:01:33] <arahael> Why is it doing that!?
[16:02:00] <maerwald> what would be the alternative?
[16:02:01] <arahael> Shouldn't it either assume the same encoding the file is in - or else result in some sort of compilation error if it's chopping bits off?
[16:02:11] <maerwald> fromString doesn't know about your file
[16:02:20] <arahael> Then it should be a compilation error.
[16:02:23] <maerwald> it's a function from String to ByteString 
[16:02:35] <maerwald> there's no parameter specifying encoding
[16:02:47] <maerwald> arahael: that would need a GHC patch
[16:02:56] <arahael> Non-trivial, I assume.
[16:03:12] <maerwald> https://gitlab.haskell.org/ghc/ghc/-/merge_requests/3290
[16:03:59] *** Quits: Moyst_ (~moyst@user/moyst) (Ping timeout: 264 seconds)
[16:04:20] <maerwald> the only sensible option is to remove the instance for ByteString
[16:04:26] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[16:04:44] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:05:03] *** Joins: Vajb (~Vajb@2001:999:66:281c:27a0:1549:39e5:8b1a)
[16:05:06] *** Quits: Megant (megant@user/megant) (Ping timeout: 260 seconds)
[16:05:15] <arahael> Well, I'd be OK with that, too, come to think of it.
[16:05:25] <maerwald> that will break a lot of code though... 
[16:05:27] <arahael> It's easy enough to convert it, bytestring is....  special, anyway.
[16:05:45] <maerwald> and haskell ecosystem doesn't care too much about correctness, IME
[16:06:09] <arahael> It's...  Interesting.
[16:06:36] <arahael> A bit of a wart, then.
[16:06:45] <maerwald> not the only one
[16:06:58] <arahael> Heh, well, that doesn't surprise me. :)
[16:07:46] <arahael> Anyway, I'm just going to go via Text.  I like Text.
[16:08:12] <arahael> And I shoudl sleep. Nearly midnight here.  And I'm loaded with port. :)
[16:08:29] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[16:08:53] *** Joins: pop3 (~pop3@user/pop3)
[16:10:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:11:05] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 268 seconds)
[16:13:32] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:19:58] *** Quits: Guest87 (~Guest87@2a01:c22:b1bd:1f00:c404:2649:f4ca:6f49) (Quit: Client closed)
[16:24:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[16:27:33] *** Joins: Megant (megant@user/megant)
[16:29:02] *** hololeap_ is now known as hololeap
[16:29:16] *** Joins: Pickchea (~private@user/pickchea)
[16:30:42] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[16:32:41] *** Joins: Moyst_ (~moyst@user/moyst)
[16:33:05] *** Parts: kadir (~kadir@78.178.105.36) (WeeChat 3.3)
[16:34:23] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[16:34:47] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[16:35:02] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[16:40:45] *** Joins: cigsender (~cigsender@74.124.58.162)
[16:52:05] *** Joins: deadmarshal (~deadmarsh@95.38.230.72)
[16:52:56] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[16:56:11] *** Quits: deadmarshal (~deadmarsh@95.38.230.72) (Ping timeout: 244 seconds)
[16:56:49] *** Quits: shidima (~shidima@46.44.183.25) (Ping timeout: 250 seconds)
[17:01:10] *** Quits: Vajb (~Vajb@2001:999:66:281c:27a0:1549:39e5:8b1a) (Read error: Connection reset by peer)
[17:01:39] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[17:01:49] *** Joins: deadmarshal (~deadmarsh@95.38.230.72)
[17:02:08] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:05:52] *** Quits: deadmarshal (~deadmarsh@95.38.230.72) (Client Quit)
[17:06:18] <zzz> arahael: beautiful drink
[17:06:19] *** Joins: deadmarshal (~deadmarsh@95.38.230.72)
[17:06:56] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[17:11:21] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[17:11:33] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[17:12:52] *** Joins: ystael (~ystael@user/ystael)
[17:18:32] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[17:18:51] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[17:23:48] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:31:31] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[17:32:27] *** Joins: xkuru (~xkuru@user/xkuru)
[17:35:58] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 244 seconds)
[17:36:15] <zzz> is there anything like https://gcc.godbolt.org/ for haskell?
[17:37:10] <maerwald> https://haskell.godbolt.org/ ?
[17:37:31] *** Quits: deadmarshal (~deadmarsh@95.38.230.72) (Ping timeout: 244 seconds)
[17:37:35] <maerwald> you didn't try hard :p
[17:37:50] <zzz> ha
[17:37:53] <zzz> how silly of me
[17:43:26] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[17:45:11] *** Joins: hololeap (~hololeap@user/hololeap)
[17:51:01] *** Joins: Rhodsir (~Rhodsir@144-124-99-115.pip.aber.ac.uk)
[17:51:14] <Rhodsir> Is anyone available to help with a very basic issue?
[17:51:29] <dminuoso> Hi Rhodsir, dont ask to ask, just ask about your problem. :)
[17:52:11] <Rhodsir> I have a type synonym which includes a list, I would like to filter through and check if the list contains a certain string and return ones which dont
[17:55:29] <dminuoso> Rhodsir: You can send what you have here in this channel
[17:55:32] <dminuoso> Use
[17:55:33] <dminuoso> @where paste
[17:55:34] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[17:55:59] <Rhodsir> https://paste.tomsmeding.com/6sjf4g0e
[17:56:26] <Rhodsir> I know why I get an error, I'm just not sure how to change it
[17:56:31] <Rhodsir> sorry if it's very basic
[17:57:05] <dminuoso> Rhodsir: Okay. Why do you think you get an error?
[17:57:16] <dminuoso> Also, include the full error for completions sake
[17:57:24] <Rhodsir> because I'm comparing a string and expecting a bool
[17:57:51] <dminuoso> Where do you think you have a comparison there?
[17:58:05] <Rhodsir> you should be able to see the error in the paste
[17:58:17] <dminuoso> There's no error in the paste visible to me
[17:58:19] <kuribas> Rhodsir: I suppose you want mapMaybe
[17:58:24] <Rhodsir> well not a direct comparison, but the filter is trying to return a bool from a string
[17:58:25] <kuribas> :t mapMaybe
[17:58:26] <lambdabot> (a -> Maybe b) -> [a] -> [b]
[17:58:43] <dminuoso> kuribas: It's not always helpful to spoonfeed?
[17:58:53] <dminuoso> Rhodsir: Okay, so lets have a look at filter
[17:58:54] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[17:58:55] <dminuoso> % :t filter
[17:58:56] <yahb> dminuoso: (a -> Bool) -> [a] -> [a]
[17:59:03] <dminuoso> Rhodsir: ^- do you see the type fignature of filter?
[17:59:13] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[17:59:17] <Rhodsir> Yes
[17:59:27] <Rhodsir> Map gives another type error btw
[17:59:30] <dminuoso> See how it expects the first argument to it to be of type `a -> Bool`?
[17:59:40] <Rhodsir> yes
[17:59:48] <dminuoso> What do you think is the type of hasEggs?
[17:59:59] <Rhodsir> bool?
[18:00:10] <Rhodsir> string*
[18:00:36] <dminuoso> Let's define it and see
[18:00:43] <dminuoso> % hasEggs (_, _, x) = x
[18:00:44] <yahb> dminuoso: 
[18:00:46] <dminuoso> % :t hasEggs
[18:00:46] <yahb> dminuoso: (a, b, c) -> c
[18:00:49] <dminuoso> Rhodsir: ^- see?
[18:00:59] *** Joins: mark__ (~a@p200300ef973db1424086f0a6a24fc4dd.dip0.t-ipconnect.de)
[18:01:02] <dminuoso> This function takes a three-tuple, and merely returns the third element of the three-tuple.
[18:01:07] <kuribas> dminuoso: is showing him a standard library function spoonfeeding?
[18:01:49] <Rhodsir> yes. I also want to execute code based on what the third element of the tuple returns
[18:02:08] <dminuoso> Rhodsir: For this to work, your three tuple would have to have Bools in its third position.
[18:02:15] <dminuoso> For example:
[18:02:56] <dminuoso> % let hasEggs (_, _, x) = x in filter hasEggs [(1, 'a', False), (2, 'b', True), (3, 'c', False), (4, 'd', True)] -- Rhodsir 
[18:02:56] <yahb> dminuoso: [(2,'b',True),(4,'d',True)]
[18:03:18] <dminuoso> Note, that this will filter all elements (three-tuples) of the list, whose third component is True.
[18:03:33] <Rhodsir> I see. how would I get it to sort through only the third element?
[18:03:45] <dminuoso> Hold on, now you want to sort?
[18:03:48] *** Joins: benin (~benin@183.82.26.68)
[18:03:55] <mark__> ":sprint" is broken in my ghci. Has anyone run into this problem and knows how to fix it? Example: x = Just 2; :sprint x gives me "x = _" so that's ok. Then I do "seq x ()" or "print x" but ":sprint x" still returns "x = _".
[18:04:00] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:04:10] <Rhodsir> I simply want to get the third element, check if it matches a string and return any that don't
[18:04:15] <Rhodsir> sorry if that was unclear before
[18:04:43] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:04:43] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:04:43] *** Joins: wroathe (~wroathe@user/wroathe)
[18:04:58] *** Joins: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk)
[18:05:27] <dminuoso> Rhodsir: You probably meant to use == rather than =
[18:05:39] <dminuoso> Or rather
[18:05:58] <dminuoso> % hasEggs (_, _, c) = c == "John" 
[18:05:58] <yahb> dminuoso: 
[18:06:03] <dminuoso> % :t hasEggs
[18:06:04] <yahb> dminuoso: (a, b, String) -> Bool
[18:06:13] <Rhodsir> wait thats all I had to do?
[18:07:17] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:07:18] <Rhodsir> I'm still getting errors with both map and filter
[18:07:18] <dminuoso> mark__: Welcome to MMR :)
[18:07:37] <Rhodsir> Couldn't match type `[Char]' with `Char'
[18:07:52] <Rhodsir> it doesnt like cs
[18:08:26] <mark__> dminuoso: MMR?
[18:08:38] <dminuoso> % x = Just 2
[18:08:38] <yahb> dminuoso: 
[18:08:41] <dminuoso> % :t x
[18:08:41] <yahb> dminuoso: Num a => Maybe a
[18:08:47] <dminuoso> mark__: ^- note how this is polymorphic?
[18:08:55] <mark__> dminuoso: yes
[18:08:58] <dminuoso> Sorry, this isnt exactly monomorphism restriction. Rather the opposite.
[18:09:12] <dminuoso> mark__: As long as this is polymorphic, memoization cant kick in
[18:09:14] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:09:29] <mark__> so (Just (2 ::Int) should fix it?
[18:09:32] <dminuoso> Yes
[18:09:42] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[18:09:43] <dminuoso> % x = Just (2 ::Int)
[18:09:43] <yahb> dminuoso: 
[18:09:44] <dminuoso> % :sprint x
[18:09:45] <yahb> dminuoso: x = Just 2
[18:09:54] <dminuoso> See:
[18:10:00] <dminuoso> % xs = [1..]
[18:10:00] <yahb> dminuoso: 
[18:10:02] <dminuoso> % :sprint xs
[18:10:02] <yahb> dminuoso: xs = _
[18:10:05] <dminuoso> % take 1
[18:10:06] <yahb> dminuoso: ; <interactive>:31:1: error:; * No instance for (Show ([a0] -> [a0])) arising from a use of `print'; (maybe you haven't applied a function to enough arguments?); * In a stmt of an interactive GHCi command: print it
[18:10:07] <dminuoso> % take 1 xs
[18:10:07] <yahb> dminuoso: [1]
[18:10:09] <dminuoso> % :sprint xs
[18:10:10] <yahb> dminuoso: xs = _
[18:10:15] <dminuoso> % xs = [1..] :: [Int]
[18:10:15] <yahb> dminuoso: 
[18:10:18] <dminuoso> % :sprint xs
[18:10:18] <yahb> dminuoso: xs = _
[18:10:20] <dminuoso> % take 1 xs
[18:10:20] <yahb> dminuoso: [1]
[18:10:22] <dminuoso> % :sprint xs
[18:10:22] <yahb> dminuoso: xs = 1 : _
[18:10:25] *** Joins: pop3 (~pop3@user/pop3)
[18:10:54] <mark__> dminuoso: It works! Thank you!!!
[18:11:03] <dminuoso> mark__: this is precisely why we have monomorphism restriction, so you get sharing where you naively expect it to
[18:11:46] <geekosaur> but it's turned off by default in ghci
[18:11:46] <mark__> dminuoso: I thought it was because of performance but this is also a good reason.
[18:11:50] <dminuoso> In GHCi its just turned off by default
[18:11:51] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[18:11:52] <geekosaur> both
[18:12:12] *** Joins: alzgh (~alzgh@user/alzgh)
[18:12:19] <dminuoso> mark__: alternatively you can simply use: :set -XMonomorphismRestriction
[18:12:29] <dminuoso> mark__: And your GHCi will automatically monomorphize 
[18:12:47] <mark__> dminuoso: was just looking for that
[18:13:01] <dminuoso> mark__: Well, sharing *yields* performance. If you dont have to recompute something, this is faster.
[18:13:20] <dminuoso> At the slight cost of increased memory residency of course
[18:14:00] * zzz ignores memory cost
[18:14:21] <dminuoso> zzz: high memory residency will increase GC latency, so there's that... :)
[18:14:32] <Rhodsir> dminuoso: Could you tell me why this won't work: https://paste.tomsmeding.com/JhWTUjNq
[18:14:33] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[18:14:53] <dminuoso> Rhodsir: How is `Cakes` defined?
[18:14:59] <Rhodsir> mb lemme get that
[18:15:18] <Rhodsir> fixed
[18:15:31] <dminuoso> Mmm, if you edit that, I think it changes the URL
[18:15:39] <dminuoso> Because Im not seeing any update. 
[18:15:53] <Rhodsir> https://paste.tomsmeding.com/fYSWArVg
[18:15:55] *** Joins: img (~img@user/img)
[18:16:37] <dminuoso> Rhodsir: So first, you probably meant to use `filter` rather than `map`
[18:16:46] <Rhodsir> yes
[18:16:56] <dminuoso> Secondly, your `Allergens` is not a String, but a list of Strings
[18:17:19] <dminuoso> But, `hasEggs (_, _, a) = a == "eggs"` just tests whether the third element *is* a string eggs
[18:17:27] <Rhodsir> yes, but I only care about "eggs"
[18:17:40] <dminuoso> Yeah, but you're trying to compare a list of strings with a string
[18:17:52] <dminuoso> Do you perhaps mean to say "the list of allergens must include eggs"?
[18:18:12] <dminuoso> Or do you mean to say "must be exactly only eggs"?
[18:18:15] <Rhodsir> hasEggs (_, _, a) = a == [("eggs"), ("Eggs")]
[18:18:25] <zzz> @type elem
[18:18:26] <lambdabot> (Foldable t, Eq a) => a -> t a -> Bool
[18:18:47] <Rhodsir> I want to return all cakes without eggs
[18:18:59] <dminuoso> I see, and eggs could be spelled either with an upper or lower case?
[18:19:16] *** Quits: img (~img@user/img) (Client Quit)
[18:19:25] <Rhodsir> well lower is what it will be but I thought It had to be a list to compare
[18:19:42] <dminuoso> % notElem "egg" ["milk", "wheat", "salt"]
[18:19:42] <yahb> dminuoso: True
[18:19:52] <dminuoso> % notElem "egg" ["milk", "wheat", "salt", "egg"]
[18:19:52] <yahb> dminuoso: False
[18:20:27] <dminuoso> Rhodsir: You can use `notElem` to test whether a given element (like "eggs" is present in say a list)
[18:20:36] <Rhodsir> where would I put that?
[18:20:38] *** Joins: img (~img@user/img)
[18:20:45] <Rhodsir> instead of == "eggs2?
[18:21:52] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Read error: No route to host)
[18:24:03] <dminuoso> Rhodsir: Start by putting a type signature to hasEggs perhaps
[18:24:10] <dminuoso> This might help you guide here
[18:24:20] <Rhodsir> omg it wokrs
[18:24:28] <Rhodsir> wait
[18:24:32] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Ping timeout: 240 seconds)
[18:25:51] <Rhodsir> could  you explain what the list after "egg" is for?
[18:26:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 244 seconds)
[18:26:12] <dminuoso> 15:50:27   dminuoso | Rhodsir: You can use `notElem` to test whether a given element (like "eggs" is present in say a list)
[18:26:42] <dminuoso> Conversely, `elem` tests whether some value is an element in say a list.
[18:26:55] <dminuoso> % elem 3 [1,2,3,4,5]
[18:26:55] <yahb> dminuoso: True
[18:26:57] <dminuoso> % elem 10 [1,2,3,4,5]
[18:26:58] <yahb> dminuoso: False
[18:27:03] <dminuoso> % notElem 3 [1,2,3,4,5]
[18:27:04] <yahb> dminuoso: False
[18:27:06] <dminuoso> % notElem 10 [1,2,3,4,5]
[18:27:06] <yahb> dminuoso: True
[18:28:08] <Rhodsir> do you mean like this? noEggs :: Cakes -> Cakes noEggs cs = notElem "eggs" cs
[18:28:45] <Rhodsir> because that gives me an error
[18:29:46] *** Joins: boxscape_ (~boxscape_@134.171.69.87)
[18:30:33] *** Joins: jkaye (~jkaye@2601:281:8300:7530:bdf2:2ee7:b4ba:f8c3)
[18:30:51] *** Quits: max22- (~maxime@2a01cb08833598006622aac214a9d042.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[18:31:15] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[18:34:08] *** Moyst_ is now known as Moyst
[18:34:52] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[18:35:08] *** Joins: Axman6 (~Axman6@user/axman6)
[18:35:34] *** Quits: Rhodsir (~Rhodsir@144-124-99-115.pip.aber.ac.uk) (Remote host closed the connection)
[18:35:53] *** Joins: Rhodsir (~Rhodsir@144-124-99-115.pip.aber.ac.uk)
[18:36:01] <Rhodsir> Hello?
[18:36:56] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 244 seconds)
[18:37:10] <boxscape_> hi
[18:37:26] <geekosaur> dminuoso was helping them but seems to have vanished
[18:37:33] <boxscape_> ah
[18:37:56] <geekosaur> Rhodsir, I see at least three things wrong with what you showed
[18:38:23] <geekosaur> one of them is you have forgotten to pattern match to extract the allergens part
[18:38:39] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 250 seconds)
[18:39:13] <geekosaur> one of them is you are mapping over Cakes earlier, so presumably it is no longer Cakes but a singular cake
[18:39:27] <geekosaur> hm, actually if you pattern match the third problem goes away too
[18:39:35] <cigsender> qgcm
[18:39:46] <cigsender> s/.*//
[18:40:09] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[18:40:19] *** Quits: mark__ (~a@p200300ef973db1424086f0a6a24fc4dd.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:41:43] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[18:42:06] *** Joins: mark__ (~a@p200300ef973db1484086f0a6a24fc4dd.dip0.t-ipconnect.de)
[18:42:31] <Rhodsir> I'm so confused
[18:42:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:42:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:42:47] *** Joins: wroathe (~wroathe@user/wroathe)
[18:43:04] *** Joins: img (~img@user/img)
[18:43:48] <Rhodsir> geekosaur? you're my last hope
[18:44:55] *** Joins: Zu169 (~Zu169@144-124-136-14.pip.aber.ac.uk)
[18:45:00] <geekosaur> you were shown pattern matching earlier. `noEggs (_, _, cs) = notElem "eggs" cs`
[18:45:06] <Rhodsir> yes
[18:45:12] <Rhodsir> that returns an error
[18:45:26] <Zu169> Hi I'm really struggling with my code could anyone help me
[18:45:44] <geekosaur> but this still leaves you that your type says Cakes -> Cakes, whereas you are looking at a single cake and producing a Bool
[18:46:02] <Rhodsir> So what do you suggest I change?
[18:47:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:47:55] <geekosaur> hm, actually I missed your earlier update, so noEggs takes a Cakes. you still want to use your helper, or perhaps use a boolean combinator 
[18:48:24] <geekosaur> (bleh, did everyone else go away?)
[18:48:49] <Rhodsir> I'm not sure, but Im struggling here
[18:49:30] <geekosaur> show me the full code you have now, since I missed part of your conversation with dminuoso
[18:49:34] <geekosaur> @where paste
[18:49:34] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[18:49:41] <kronicmage> bumping my question from yesterday: i've implemented modular exponentiation via repeated squaring using a hylomorphism from recursion-schemes, but i don't think it's that much more readable than the naive recursive implementation: https://paste.tomsmeding.com/ec7PsCqr
[18:49:52] <kronicmage> does anyone have any ideas to do this better?
[18:50:11] <Rhodsir> https://paste.tomsmeding.com/vreQUeai
[18:50:25] <Zu169> How do i search a list of strings for a specific string
[18:51:04] <geekosaur> :t elem
[18:51:05] <lambdabot> (Foldable t, Eq a) => a -> t a -> Bool
[18:51:36] <Zu169> but i need to create a function that does it i can't do it in the command prompt
[18:52:18] <kronicmage> @src elem
[18:52:18] <lambdabot> elem x = any (== x)
[18:52:40] <geekosaur> kronicmage, this sounds like homework, feeding them the answer is bad form at best
[18:52:53] <kronicmage> ah true my bad
[18:53:26] <Rhodsir> I already have notElem, its just the syntax that's making me struggle. I'm used to other languages
[18:53:33] <mjrosenb> the lens docs for Cons don't appear to have an example of how to append to an embedded list, just top level list.
[18:53:41] <geekosaur> Rhodsir, that code is just a bit confused. hasEggs is no longer doing anything, but has one of the key parts you're missing
[18:54:09] <mjrosenb> I suspect they don't want me to do foo & bar . baz %~ (h<|)
[18:54:28] <Zu169> https://paste.tomsmeding.com/DVDXdDNV
[18:54:40] <Zu169> that is my whole code ^^
[18:55:07] <Rhodsir> @geekosaur: https://paste.tomsmeding.com/C4RrM2gD
[18:55:07] <lambdabot> Unknown command, try @list
[18:55:19] <kronicmage> Rhodsir, Zu169, do you have the same assignment or something? lol
[18:55:42] <Zu169> uhh yes
[18:55:52] <geekosaur> Rhodsir, that won't work either because you're using a pattern as an expression
[18:55:57] <Zu169> we both can't do functonal programming tho :(((
[18:57:46] <Rhodsir> could you elaborate?
[18:58:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:58:32] <geekosaur> you put the (_, _, a) in the wrong place. plus there's no "a", and you're not using "cs"
[18:58:38] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 244 seconds)
[18:58:40] <kronicmage> Rhodsir, what's the type of `notElem`, and what's the type of the bracketed expr on line 4?
[18:58:40] <janus> is there a reason it is `any (== x)` not `any (x ==)`. related to floating point?
[18:59:53] <geekosaur> janus, I can't think of anything specifically related to floating point, just convention
[18:59:57] <kronicmage> Zu169 and Rhodsir, do you guys have haskell-language-server? it's nice to have good editor support to tell you exactly what type of thing should go in a particular spot
[18:59:58] <c_wraith> even for floating point, (==) should be symmetric.
[19:00:21] <kronicmage> e.g. if you write `notElem "eggs" _`, and then hover over `_`, hls will tell you what type you need to fill in that hole with
[19:00:40] <Rhodsir> we're both using npp
[19:00:41] <kronicmage> plain ghc will tell you this too, but i find the editor support to be nicer and lead to faster workflow
[19:00:57] <Rhodsir> its really bad for debugging
[19:01:03] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[19:01:08] <Rhodsir> atleast python tells me clearly when I'm being stupid
[19:01:23] <Rhodsir> still better than idle i guess
[19:01:29] <janus> @src notElem
[19:01:29] <lambdabot> notElem x = all (/= x)
[19:01:35] <kronicmage> haskell should too, no? are you guys compiling your code yourselves at all or are you just repeatedly submitting to a grading server? Rhodsir
[19:01:59] <shapr> I prefer to think of Haskell as gently admonishing me, otherwise I'd get sad.
[19:02:06] <Rhodsir> compiling through cmd
[19:02:25] <geekosaur> this makes me think of the old joke about unix, it's user friendly it's just particular about its friends
[19:02:36] <kronicmage> at least ghc tells you when you're being stupid before your stupidity can be run lol
[19:02:57] <kronicmage> s/run/ran
[19:04:47] <Rhodsir> I have 30 mins to answer 3 questions, this seems impossible
[19:05:05] <kronicmage> ah the classic university experience...
[19:05:12] <shapr> leaving things till the last minute?
[19:05:13] <Zu169> yes exactly
[19:05:27] <Zu169> no one warned me that uni would be about this
[19:05:29] <geekosaur> also that last bit of code looks more like prolog than haskell for some reason :)
[19:06:04] <Rhodsir> I didnt expect me to suck at it this much shapr
[19:06:05] <shapr> When I went back to uni to finally finish a degree, I started the homework as soon as I knew about it. I got really good grades!
[19:06:30] <shapr> Rhodsir: imperative to functional is a big jump in thinking
[19:06:38] <shapr> also a big jump in power once you make it
[19:06:50] <Rhodsir> We have a list of the sizes of the cakes that are on the stall. The price of a cake depends on its size. If the diameter is at least 6 inches the cake is priced at 3.00 pounds, and if it is smaller, then the cake is priced at 1.50 pounds. Using recursion, write a function to find out how much money we could make if we sold them all. target :: [Size] -> Money
[19:06:56] <Rhodsir> any ideas guys?
[19:07:09] <shapr> Rhodsir: how would you do that in languages you know?
[19:07:58] <shapr> If you can come up with a solution in a familiar language, you could then change that into a recursive solution?
[19:08:10] <Rhodsir> because what I have is nothing. in python I would check if the diameter is greater than or equal to six and set money to 3, if it's less than I would set money to 1.5. and I'd loop it through the list of cakes
[19:08:19] <kronicmage> Rhodsir, if you can implement it in python with only comprensions, pure functions, `map`, `filter`, and `reduce`, then you can do it in haskell
[19:08:29] <Zu169> i know exactly how i'd do it in c or vb but haskell is too hard
[19:08:30] <kronicmage> try doing it in python first, without mutation or stateful stuff
[19:08:31] <shapr> yeah, python got its list comprehensions from Haskell
[19:08:53] <kronicmage> it's not the language thats the problem, you need to think in the functional paradigm
[19:09:09] <Rhodsir> thats my problem. It's so different to python 
[19:09:11] <shapr> but the general solution is not to leave things to the last minute (not that I'm good at that!)
[19:09:37] <Rhodsir> I started at 9am this morning but then they changed our timetable to add a 3 hour practical for a different module
[19:09:42] <Rhodsir> I wouldve been fine otherwise
[19:09:55] <shapr> Rhodsir: when was this originally assigned?
[19:10:10] * shapr shrugs
[19:10:16] <shapr> negative feedback is valuable
[19:10:18] <Rhodsir> this morning
[19:10:30] <kronicmage> damn that's a fast assignment cycle
[19:10:32] <Rhodsir> due at 4
[19:10:35] <shapr> that is surprising
[19:10:36] <Rhodsir> its brutal
[19:10:47] <geekosaur> that depends on when "this morning" was. like it's still "this morning" for me
[19:10:54] <Rhodsir> 9am uk time
[19:11:03] <geekosaur> 9am was an hour and 40 minutes ago
[19:11:04] <shapr> first time I've heard of a uni that wants you to learn Haskell in a few hours.
[19:11:31] <Rhodsir> its just assessing what we have learnt in the last few lectures
[19:11:39] <Rhodsir> which clearly wasnt very much
[19:11:58] <Zu169> we've have lessons for 5 weeks but it's the kind of thing where they show us the easiest example and then expect us to do the hardest questons alone
[19:12:07] <kronicmage> w/ learning stuff like functional programming or haskell, you can't get by with just lectures -- exercises are pretty much mandatory
[19:12:18] <kronicmage> you need to learn by doing rather than watching
[19:12:33] <shapr> yeah, that's for sure
[19:12:47] <shapr> I tried to learn Agda by watching, did not work.
[19:13:02] *** Quits: xff0x (~xff0x@2001:1a81:5343:8e00:5493:6b48:2cf2:a878) (Ping timeout: 240 seconds)
[19:13:57] *** Joins: xff0x (~xff0x@2001:1a81:5343:8e00:3d14:89a2:444a:e78d)
[19:13:58] <kronicmage> also for next time, get yourself a proper editor eh -- working in npp will slow you down. vscode has good support i hear, or you can grab hls and use vim/emacs
[19:14:17] <kronicmage> npp still doesn't have good language server support lol
[19:14:17] <shapr> yeah, hls might give you TOO much help even
[19:14:31] <Zu169> im using notepad ++
[19:14:37] <kronicmage> wingman can probably do half the assignments for you :'D
[19:14:41] <Zu169> and the windows powershell
[19:15:06] <Rhodsir> hls?
[19:15:10] <shapr> haskell-language-server
[19:15:18] <Rhodsir> do you have a link?
[19:15:23] <Rhodsir> for setup
[19:15:24] <kronicmage> https://github.com/haskell/haskell-language-server
[19:15:43] <kronicmage> vscode will download it for you if you get the haskell extension
[19:16:04] <kronicmage> notepad++ doesn't have good language server support though, so you can't use hls with it
[19:16:52] <kronicmage> also -- has your university not covered developing in linux? I'm not sure if things have improved but the last I remember working with haskell on windows back in ~2017 I remember it being quite a pain
[19:17:19] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 268 seconds)
[19:17:26] <geekosaur> there's been a decent amount of work put into improving the windows experience
[19:18:00] <geekosaur> although as yet things still depend on mingw which is a bit unfortunate
[19:18:04] <Zu169> is there a discord server like this?
[19:21:14] *** Quits: Zu169 (~Zu169@144-124-136-14.pip.aber.ac.uk) (Remote host closed the connection)
[19:23:23] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:25:13] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:25:28] *** Joins: neutral (~user@user/neutral)
[19:25:53] *** Parts: neutral (~user@user/neutral) (ERC (IRC client for Emacs 27.2))
[19:27:45] *** Quits: k` (~user@152.1.137.158) (Remote host closed the connection)
[19:30:59] <Rhodsir> I submitted the worst code of my life, praying for 50 %
[19:31:09] <janus> ghost of Zu169: there is one called "Haskell intersected with Queer Angst": https://discord.com/channels/502892968475230219/503741815992745984 but it is a bit different since it has "0) Simon Peyton-Jowones is an uwu gamer catgirl anyone who questions it will be banned." as a rule
[19:31:23] <shapr> haha
[19:31:27] <kronicmage> lmao
[19:31:28] <Rhodsir> I'll let her know, thanks for the link
[19:31:43] <shapr> Rhodsir: if you want to learn Haskell, we can help!
[19:31:54] <Rhodsir> I really need to learn haskell at this point lmao
[19:31:55] <shapr> Haskell has some very powerful magic
[19:32:02] <janus> Rhodsir: dunno if the link works if you're not on the server but i am not discord pro, dunno how to get those invite links
[19:32:04] <kronicmage> Rhodsir, now that you've submitted you can slow down and learn properly :D
[19:32:08] <shapr> yeah!
[19:32:24] <kronicmage> start with getting your editor in shape! grab vscode and the haskell plugin
[19:32:28] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[19:32:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[19:32:32] <kronicmage> huge huge difference in productivity
[19:32:33] <shapr> Rhodsir: I wrote a duplicate file finder recently, it's really tiny: https://github.com/shapr/takedouble/blob/main/src/Takedouble.hs
[19:32:51] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:33:36] <Rhodsir> damn, that is tiny. Honestly it reminds me of when I learnt python. I found it difficult and pointless at first but then I quit and came back to it 2 years later lmoa
[19:33:53] <Rhodsir> I'm definitely going to get an editor 
[19:34:02] <shapr> if you want wizardly power, Haskell is one of the good approaches
[19:34:19] <kronicmage> it's really amazing the kind of wizard stuff you can do with haskell once you get into it
[19:34:32] <kronicmage> it really changes your viewpoint on things outside of haskell too
[19:34:59] <kronicmage> there's always more to learn
[19:35:01] <Rhodsir> our lecturer is a mad lad she uses npp. Also regarding the other question about linux dev for haskell - we do have a linux module but it's extremely basic, just terminal stuff atm and I don't think they'd make people switch to linux or remote to a linux pc just to do haskell
[19:35:02] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[19:35:20] *** Joins: desantra (~skykanin@user/skykanin)
[19:35:43] <Rhodsir> Janus could you send an invite link as opposed to a channel link?
[19:37:09] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 250 seconds)
[19:40:39] <shapr> I like this expression "mad lad", I shall adopt it.
[19:41:17] <janus> Rhodsir: try this one https://mobile.twitter.com/bkmlep/status/1456313831949365248
[19:48:31] *** Quits: Rhodsir (~Rhodsir@144-124-99-115.pip.aber.ac.uk) (Remote host closed the connection)
[19:49:25] *** Joins: Guest27 (~Guest27@2601:281:d480:2ce0::93bd)
[19:49:48] *** Joins: max22- (~maxime@2a01cb088335980083dcab2b0434f3bd.ipv6.abo.wanadoo.fr)
[19:56:29] *** Joins: ubert (~Thunderbi@p200300ecdf4fca48e6b318fffe838f33.dip0.t-ipconnect.de)
[19:57:04] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:58:12] *** Joins: frosch03 (~user@2a02:c98:1003:8000:4c83:eab1:da59:6f0d)
[19:58:53] *** Joins: pbrisbin (~patrick@pool-173-49-152-45.phlapa.fios.verizon.net)
[19:59:26] <monochrom> Using Windows for programming is mad in the first place.
[19:59:48] <Franciman> sometimes you have to :<
[20:00:36] <monochrom> But when I'm on Windows occasionally, I like notepad++ the most.
[20:00:54] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[20:01:55] <Vq> GNU Emacs is my little island of sanity when on Windows.
[20:02:18] <monochrom> I don't mean to say that it's better than vscode. I just haven't learned vscode. If you're starting anew, go for vscode. :)
[20:02:19] <Vq> magit doesn't work very well but that's a small price to pay.
[20:02:27] <geekosaur> I didn't like emacs on windows, I make too much use of things that just don't work well there. and it feels out of place
[20:03:41] <geekosaur> rather than trying to recreate a unix experience on windows I try to fit into its experience, it's just less frustrating that way. too many things acquire odd sharp edges otherwise
[20:03:43] <Vq> It works well enough for me.  Features that use external programs can be a bit wonky but TRAMP works fairly well actually.
[20:04:42] <Vq> When I'm on Windows I'm just in survival mode and will cling to anything *NIX-like.
[20:10:46] <Guest27> What's the difference between Control.Monad.Trans.MonadTrans and Control.Monad.Trans.Class.MonadTrans?
[20:12:18] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[20:12:52] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[20:13:13] <geekosaur> the .Class one is a generic foundation; the other is the mtl-specific implementation based on functional dependencies (there's another implementation around based on type families)
[20:13:21] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[20:13:25] *** Joins: deadmarshal (~deadmarsh@95.38.230.72)
[20:14:18] <Guest27> geekosaur thanks, what are some good resources for the differences between these implementations?
[20:15:56] *** Joins: zebrag (~chris@user/zebrag)
[20:16:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:17:01] *** Joins: asdfa (~asdfa@2a02:c98:1003:8000:4c83:eab1:da59:6f0d)
[20:17:01] *** Quits: boxscape_ (~boxscape_@134.171.69.87) (Ping timeout: 250 seconds)
[20:17:32] *** Quits: deadmarshal (~deadmarsh@95.38.230.72) (Ping timeout: 240 seconds)
[20:17:43] *** Joins: mei3 (~mei@user/mei)
[20:18:41] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:c461:9db1:2779:896d) (Quit: WeeChat 2.8)
[20:20:10] *** Quits: asdfa (~asdfa@2a02:c98:1003:8000:4c83:eab1:da59:6f0d) (Remote host closed the connection)
[20:21:05] <geekosaur> mostly historical. the original mtl was based on fundeps because type families didn't exist yet. when type families were introduced, there was a period of experimentation with both fundep- and tyfam-based versions of mtl, then it was decided that for backward compatibility mtl2 would continue to use fundeps
[20:21:16] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[20:21:43] <geekosaur> for many uses, however, type families are easier and more "haskellish" (fundeps are prolog-like and something of an odd fit with haskell)
[20:24:31] *** Joins: mmhat (~mmh@55d4bfe6.access.ecotel.net)
[20:25:34] <zwro[m]> i still haven't ventured into type families. what should i know about them?
[20:27:01] <monochrom> If you see "Foo Int", without looking up Foo, you now don't know whether Foo is a parametric polymorphic type or a type family.
[20:27:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:27:47] <monochrom> In case Foo is a type family, "Foo Int" may very well just mean Bool, "Foo Double" may very well just mean Char.
[20:28:50] *** Joins: werner100 (~werner100@2601:2c2:400:4440:20ee:6cac:e614:d007)
[20:28:59] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[20:31:10] <geekosaur> both are type functions, just with different behavior. as monochrom says, this does complicate understanding random code a bit
[20:31:42] <geekosaur> flip side, using a type family assicated with a typeclass ("associated type") often makes the typeclass easier to implement and understand
[20:32:10] <geekosaur> so you lose in some areas and gain in others
[20:32:35] <geekosaur> *associated with
[20:35:13] *** Quits: frosch03 (~user@2a02:c98:1003:8000:4c83:eab1:da59:6f0d) (Remote host closed the connection)
[20:37:50] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 244 seconds)
[20:40:57] *** Joins: __monty__ (~toonn@user/toonn)
[20:43:16] *** Quits: werner100 (~werner100@2601:2c2:400:4440:20ee:6cac:e614:d007) (Quit: Ping timeout (120 seconds))
[20:48:59] *** Quits: mbuf (~Shakthi@182.77.100.170) (Quit: Leaving)
[20:52:23] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[20:52:54] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[20:55:22] *** Quits: jkaye (~jkaye@2601:281:8300:7530:bdf2:2ee7:b4ba:f8c3) (Ping timeout: 268 seconds)
[20:59:11] *** Joins: emf (~emf@2620:10d:c090:400::5:fa16)
[20:59:51] *** Joins: thyriaen (~thyriaen@dynamic-077-013-084-082.77.13.pool.telefonica.de)
[21:06:25] *** Quits: xff0x (~xff0x@2001:1a81:5343:8e00:3d14:89a2:444a:e78d) (Ping timeout: 250 seconds)
[21:07:02] *** Quits: acidjnk_new (~acidjnk@p200300d0c7404a3915a2950adbd6cce8.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:07:12] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:540:e191:ad14:68ac)
[21:09:49] *** zzz is now known as yin
[21:12:10] *** Joins: deadmarshal (~deadmarsh@95.38.230.72)
[21:12:43] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:15:32] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[21:15:52] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[21:16:02] *** Joins: v01d4lph4 (~v01d4lph4@122.177.85.95)
[21:16:02] *** Quits: v01d4lph4 (~v01d4lph4@122.177.85.95) (Changing host)
[21:16:02] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[21:16:56] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:540:e191:ad14:68ac) (Remote host closed the connection)
[21:17:22] *** Joins: xff0x (~xff0x@2001:1a81:5343:8e00:3d14:89a2:444a:e78d)
[21:17:35] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[21:19:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[21:19:48] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[21:20:12] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 244 seconds)
[21:20:42] *** Quits: Guest27 (~Guest27@2601:281:d480:2ce0::93bd) (Ping timeout: 256 seconds)
[21:23:29] *** Joins: MoC (~moc@user/moc)
[21:25:07] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[21:28:02] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[21:28:11] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:540:e191:ad14:68ac)
[21:28:45] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[21:29:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:29:32] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[21:30:30] *** Joins: Guest27 (~Guest27@2601:281:d480:2ce0::93bd)
[21:31:39] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[21:39:59] *** Quits: zaquest (~notzaques@5.128.210.178) (Ping timeout: 264 seconds)
[21:45:30] *** Joins: tabemann_ (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[21:45:51] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[21:46:01] *** hexeme is now known as ldlework
[21:47:15] *** Joins: img (~img@user/img)
[21:47:16] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[21:47:36] *** Quits: tabemann (~tabemann@2600:1700:7990:24e0:c9ce:7077:ec0c:a794) (Ping timeout: 245 seconds)
[21:48:01] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 250 seconds)
[21:48:36] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:50:05] *** Quits: thyriaen (~thyriaen@dynamic-077-013-084-082.77.13.pool.telefonica.de) (Quit: Leaving)
[21:51:47] *** Joins: x6C697370 (~michael@2600:1700:7c02:3180::44)
[21:51:56] *** Joins: Pickchea (~private@user/pickchea)
[21:52:15] <dsal> Today's installment of wat is arguing that deeply nesting case statements in a test where Left or Nothing fails when building out prerequisites is more readable than just having a tiny helper that fails the test on prereq failure  (e.g., `thing <- errLeft getThing`).  This both greatly reduces the lines and indentation of the code under test, but it's "less readable."
[21:52:36] <dsal> Also, apparently `either` is a dangerous function and is banned.
[21:52:44] <geekosaur> o.O
[21:52:58] <Rembane_> That sounds like a fun exercise but maddening in a work context. 
[21:53:09] <geekosaur> sounds like someone should be banned from writing or reviewing haskell code
[21:53:27] <dsal> The argument is roughly that good testing code looks different from good application code.
[21:53:53] <dsal> I can agree with that and still think that deeply nested code is bad.
[21:53:58] <dsal> Like, isn't this why we have `do`?
[21:57:15] <int-e> > do Nothing
[21:57:17] <lambdabot>  Nothing
[21:57:45] <janus> i have seen business logic that hardly uses monad transformers
[21:58:19] <janus> but if the code with a case tree is effectful, and you want to make it look imperative, one way is to use ExceptT
[21:58:47] <janus> but then you need lifts, and you need to make combinators that make the "failing" branches of the case statements into ExceptT values
[21:59:05] <janus> it has its price but i still preferred it with ExceptT
[21:59:06] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[21:59:07] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[21:59:37] *** Joins: tinhatcat (~manjaro-g@2620:103:a000:2201:8e4c:af6a:e11c:11a1)
[21:59:38] <janus> but OTOH one could argue that it seems weird to introduce lift/except/throwError and all those combinators when it worked just fine as a case tree...
[22:00:04] <dsal> I think I tried ExceptT and it wasn't easier than just adding a helper that threw the exception directly since that's what was happening in every `Left` and `Nothing`.
[22:00:21] *** Quits: tinhatcat (~manjaro-g@2620:103:a000:2201:8e4c:af6a:e11c:11a1) (Client Quit)
[22:00:26] *** Joins: hololeap (~hololeap@user/hololeap)
[22:00:53] <janus> where do exceptions come into the picture? imho exceptT is completely orthogonal to that, though related
[22:01:17] <dsal> The code is basically `getThingOneOrFailTest >>= \thing1 -> getThingTwoOrFailTest >>= \thing2 -> doActualTest thing1 thing2`
[22:01:46] <dsal> Every `Left` was    `expectationFailure "I couldn't get a thing"`
[22:01:55] <dsal> Which throws an exception causing the test to fail.
[22:02:10] <maerwald> that looks like a use case for pattern matching via MonadFail
[22:02:13] *** Joins: econo (uid147250@user/econo)
[22:02:16] <int-e> I'd probably agree with preferring a `case` over `either` when the Either value represents an error or successful result.
[22:02:24] <geekosaur> *exceptions are not flow control*
[22:02:30] <janus> ok well i think the use of exceptions is the bigger problem in that case :P i don't like them
[22:02:38] <int-e> But calling deeply nested conditionals of any kind readable is insane.
[22:02:44] <maerwald> (Just foo) <- getThing
[22:03:04] <dsal> That's disallowed because it makes bad error messages on test failure.
[22:03:19] <dsal> So like make a helper that does the same thing, but makes a good error message.  Problem solved.
[22:03:32] <dsal> But no, marching off to the right is easier to read.
[22:03:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[22:03:45] <geekosaur> java think
[22:03:55] <janus> yes, if there is only one failure, ExceptT is worse than MaybeT because MaybeT allows MonadFail
[22:03:58] <int-e> . o O ( waterfall model )
[22:04:18] <janus> i just assume you want effects, otherwise this debate is too boring ;)
[22:05:37] <dsal> The whole thing is "Somebody wrote a test that needs to get three things to run it."  The actual test is something like        f thing1 thing2 thing3 `shouldbe`something
[22:06:11] <int-e> Yeah there's Control.Monad.Error if you want MonadFail. Except that the module is deprecated. Which is... meh.
[22:06:13] <dsal> Just you have to scroll down and to the right to find that because of all the eithers and maybes you encountered while building out prereqs.
[22:07:12] <maerwald> move to another company
[22:07:32] <maerwald> I don't like being trolled at workplace like that
[22:07:34] <dsal> haha.  The thought arises.
[22:07:58] <janus> int-e: what's the advantage of Error over MaybeT?
[22:08:23] <int-e> janus: it preserves error messages from pattern failures and you can inject your own more sensible ones if you like
[22:09:18] <janus> but it also makes stuff like line numbers leak into application output :P dunno if i like that
[22:09:29] <int-e> There's a historic accident behind all this. The Monad instance for Either used to look like that of ErrorT e Id, eith an Error e constraint.
[22:09:59] <int-e> That was changed at some point (silently breaking some code I wrote...). Control.Monad.Error was the replacement for that.
[22:10:02] *** Joins: thyriaen (~thyriaen@dynamic-077-013-084-082.77.13.pool.telefonica.de)
[22:10:31] <int-e> eith -> with
[22:10:37] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (Ping timeout: 268 seconds)
[22:10:38] <maerwald> yeah, MonadFail in ExceptT runs in the inner monad
[22:10:53] <maerwald> which most of the time is IO and then you get an IO exception
[22:11:25] <int-e> Which is also useful. Which is kind of my gripe... both ErrorT and ExceptT have useful implementations of `fail`
[22:11:46] <int-e> But they differ, so how can the former is deprecated in favor of the latter?
[22:12:15] <int-e> But then again I don't use ErrorT in new code.
[22:13:13] <janus> i think the fact that line numbers leak into application output is suspicious
[22:13:34] <janus> i never needed the feature, seems sufficient to me if fail had not arguments
[22:13:47] <janus> but maybe i am just coloured by being "new" and always having had stuff like ExceptT available
[22:14:14] <janus> s/not/no/
[22:15:29] <janus> this reminds me of how the tz library is pretty popular even though it is alpha and the tz database changes all the time. another source of impurity ;)
[22:16:08] <maerwald> purity /= correctness
[22:16:59] * Rembane_ shakes fist at timezones 
[22:19:12] <janus> maerwald: what would you call what happens with the tz library? you launch ghci one day and ask for an offset, you get an answer (not in IO). next day, you run the same code (still not in IO) and get a different answer with an upgraded library. incorrect doesn't seem like it fits? or is it just incorrect that the library doesn't require IO?
[22:20:09] <maerwald> "with an upgraded library"
[22:20:12] <geekosaur> before you complain about tz, consider System.Info: same code, different machien, different output
[22:20:17] * [exa] suggests TimeT
[22:20:27] <geekosaur> *machine
[22:20:55] <maerwald> janus: if you upgrade a library and expect the same behavior, then I dunno
[22:21:05] <janus> maerwald: actually i dunno how the library works. does it read the system tz database ? then the answer could change even though you don't bump the library
[22:21:06] <maerwald> we could argue about PVP here, but 
[22:21:18] <maerwald> "Including time zone information in Haskell binaries in a platform-independent way"
[22:22:21] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[22:22:26] <maerwald> I have no idea what this thing does
[22:24:04] <monochrom> Actually I wonder whether a ton of conditional compilations count as "same code". :)
[22:24:12] *** Joins: jkaye (~jkaye@2601:281:8300:7530:2b36:18db:1545:7097)
[22:24:35] <janus> geekosaur, monochrom: good points. my rant is over :P
[22:24:47] *** Quits: deadmarshal (~deadmarsh@95.38.230.72) (Ping timeout: 244 seconds)
[22:24:53] <zwro[m]> you should wrap this conversation in a monad to keep the rest safe
[22:24:55] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[22:25:26] *** Quits: thyriaen (~thyriaen@dynamic-077-013-084-082.77.13.pool.telefonica.de) (Quit: Leaving)
[22:25:38] <geekosaur> monochrom, the point is I don't see the conditionals, and I don't expect them in pure code
[22:25:50] *** Joins: pop3 (~pop3@user/pop3)
[22:25:57] <geekosaur> IO, sure, go nuts. but it claims to be pure
[22:26:03] <maerwald> zwro[m]: like IO?
[22:26:12] <monochrom> Now, GHC.Conc's numCapabilities::Int would be a better example!
[22:26:54] <monochrom> It is not in IO.  And it depends on what you say to +RTS -N.  Different runs give different answers.  Should it be in IO?
[22:27:08] <geekosaur> yes
[22:27:23] <geekosaur> especially given setNumCapabilities
[22:27:46] <monochrom> That part is covered by getNumCapabilities :: IO Int
[22:28:25] <maerwald> `numCapabilities` doesn't change
[22:29:43] <maerwald> it's similar to `arch`
[22:29:48] <maerwald> from System.Info
[22:30:40] <int-e> It's fine, it's part of the hypothetical interpreter that's responsible for running  main :: IO ()
[22:31:19] <int-e> (which justifies scoping purity over the lifetime of a program, since the next program invocation will get a different instance of the (impure) interpreter)
[22:31:21] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[22:32:27] <geekosaur> mm, that raises the question of how hypothetical that interpreter is given that stg could be viewed as ghc's version of said interpreter
[22:33:05] <dsal> `arch` changes on my machine based on how I compiled it.  :P
[22:33:26] <int-e> But in that implementation you also have highly impure primitives that consume a virtual state token.
[22:34:02] <int-e> (and recreate it)
[22:35:37] *** Joins: riv (river@tilde.team/user/river)
[22:35:41] <riv> hi
[22:35:48] * shapr hugs riv
[22:35:50] <shapr> nice to see you here!
[22:35:53] <geekosaur> œ
[22:36:07] *** Quits: max22- (~maxime@2a01cb088335980083dcab2b0434f3bd.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[22:36:10] <riv> how would you generate all possible examples of assigning n distinct students into k classes, with no class empty?
[22:36:14] <int-e> Anyway, it's a grey area... having a module that exports  foo :: Int  and having different outputs for  main = print foo  between runs feels surprising.
[22:36:17] <shapr> riv: may I interest you in some finely crafted lambdas?
[22:36:22] <riv> :D
[22:37:15] <shapr> riv: is that like a filtered powerset?
[22:37:18] <riv> i was starting  students = take n ['A'..] ; classes = take k [1..] and an assignment could be like [('A',3), ('B', 5), ...]
[22:38:13] <Guest27> riv seems like a special case of stars and bars
[22:39:07] <int-e> This is surjective function territory. Stirling numbers of the second kind are involved if you want to count them.
[22:39:30] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Changing host)
[22:39:30] *** Joins: zfnmxt (~zfnmxtzfn@user/zfnmxt)
[22:39:31] <riv> ahh
[22:39:37] <int-e> riv: Honestly my first question would be whether I could possibly avoid that unless I know that n and k are small.
[22:40:12] <riv> surjective functions is a simpler way to describe this than the students thing
[22:40:27] <int-e> Also, when there are 5 students and 5 classes, do you really want 120 assignments?
[22:40:35] *** Quits: emf (~emf@2620:10d:c090:400::5:fa16) (Ping timeout: 264 seconds)
[22:41:22] <int-e> And Guest27 is right if you can avoid distinguishing between the students.
[22:42:29] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[22:43:47] *** Joins: emf (~emf@2620:10d:c091:480::1:6062)
[22:52:23] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:52:30] *** Quits: Guest27 (~Guest27@2601:281:d480:2ce0::93bd) (Ping timeout: 256 seconds)
[22:56:27] *** Joins: JoelMcCracken[m] (~joelmccra@2001:470:69fc:105::8405)
[22:56:35] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:57:34] *** Joins: hiruji (~hiruji@user/hiruji)
[22:57:36] *** Joins: Guest9216 (~Guest92@178-78-205-86.customers.ownit.se)
[22:59:22] *** Joins: cosimone (~user@93-34-133-23.ip49.fastwebnet.it)
[23:02:13] *** Quits: Guest9216 (~Guest92@178-78-205-86.customers.ownit.se) (Client Quit)
[23:02:48] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[23:06:56] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[23:07:54] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[23:10:46] *** Joins: max22- (~maxime@2a01cb08833598002528ec70f3e7e36f.ipv6.abo.wanadoo.fr)
[23:14:15] *** Joins: AndreasK_ (sid320732@uxbridge.irccloud.com)
[23:14:34] <shapr> riv: what interesting thing are you doing?
[23:17:03] <riv> just generating and counting some combinatorics stuff
[23:18:00] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[23:18:21] *** Joins: alzgh (~alzgh@user/alzgh)
[23:20:30] *** Joins: Guest27 (~Guest27@2601:281:d480:2ce0::93bd)
[23:21:42] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[23:22:03] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[23:23:51] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[23:26:24] *** Quits: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk) (Remote host closed the connection)
[23:35:26] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 260 seconds)
[23:37:24] *** Joins: juhp (~juhp@128.106.188.220)
[23:40:38] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:41:19] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:44:56] *** Joins: Lycurgus (~juan@98.4.112.204)
[23:45:50] *** Quits: mei3 (~mei@user/mei) (Quit: mei3)
[23:47:23] *** Joins: mei3 (~mei@user/mei)
[23:48:30] *** Quits: alx741 (~alx741@181.196.69.19) (Ping timeout: 260 seconds)
[23:49:55] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[23:50:40] *** Joins: euandreh (~euandreh@2804:14c:65c9:5161:2115:7c1d:3a3c:1b92)
[23:54:33] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[23:55:42] *** Quits: euandreh (~euandreh@2804:14c:65c9:5161:2115:7c1d:3a3c:1b92) (Quit: WeeChat 3.3)
[23:57:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk)
[23:58:02] *** Quits: ubert (~Thunderbi@p200300ecdf4fca48e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:58:25] *** Joins: ubert (~Thunderbi@p200300ecdf4fca48e6b318fffe838f33.dip0.t-ipconnect.de)
[23:58:30] *** Papa_ is now known as papa
[23:59:28] <[exa]> so anyway -- what are the best design choices for representing SSA-style data in haskells now?
