[00:16:46] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b006:43b8:dc61:7cc0:46dd:a959) (Ping timeout: 245 seconds)
[00:21:26] *** Joins: klovett_ (~klovett@mobile-166-137-178-168.mycingular.net)
[00:23:51] *** Quits: klovett (~klovett@mobile-166-137-178-168.mycingular.net) (Ping timeout: 256 seconds)
[00:26:55] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 250 seconds)
[00:28:36] *** Joins: X-Scale` (~ARM@46.50.4.208)
[00:29:08] *** X-Scale` is now known as X-Scale
[00:45:11] *** Joins: eatonphil (~eatonphil@pool-108-29-35-48.nycmny.fios.verizon.net)
[00:53:18] *** Quits: torbjornsd (~torbjorns@213.158.42.177) (Quit: Leaving)
[00:54:54] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b008:1248:481b:1f8f:edc9:ed83)
[01:22:39] *** Quits: lampilelo (~user@user/lampilelo) (Quit: ERC (IRC client for Emacs 27.2))
[01:29:16] *** Joins: klovett (~klovett@mobile-166-137-178-168.mycingular.net)
[01:31:17] *** Quits: klovett_ (~klovett@mobile-166-137-178-168.mycingular.net) (Ping timeout: 256 seconds)
[01:43:39] *** Quits: Zipheir (~wcm@98.4.178.27) (Quit: Eadem mutata resurgo.)
[02:04:25] *** Quits: eatonphil (~eatonphil@pool-108-29-35-48.nycmny.fios.verizon.net) (Quit: Connection closed)
[02:10:42] *** Joins: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net)
[02:21:07] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:22:41] *** Joins: klovett_ (~klovett@166.205.90.177)
[02:24:54] *** Quits: klovett (~klovett@mobile-166-137-178-168.mycingular.net) (Ping timeout: 260 seconds)
[02:25:30] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[03:13:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4c46:1cbc:d9c:20c5)
[03:23:34] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[03:24:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:29:21] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 250 seconds)
[03:35:57] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[03:36:50] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[03:37:56] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:48:56] *** Joins: Zipheir (~wcm@98.4.178.27)
[03:52:24] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4c46:1cbc:d9c:20c5) (Quit: Leaving)
[03:52:31] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[03:57:02] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e097:ace:b6b8:a6c1)
[04:03:36] *** Joins: Inline (~Inline@2a02:908:1252:7a80:684d:f603:e70f:1873)
[04:34:48] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[04:58:44] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e097:ace:b6b8:a6c1) (Remote host closed the connection)
[04:59:01] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e097:ace:b6b8:a6c1)
[05:08:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:684d:f603:e70f:1873) (Remote host closed the connection)
[05:08:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80:e2fc:b8df:77ad:8f5b)
[05:11:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:e2fc:b8df:77ad:8f5b) (Remote host closed the connection)
[05:15:18] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Read error: Connection reset by peer)
[05:15:59] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e097:ace:b6b8:a6c1) (Ping timeout: 264 seconds)
[05:17:24] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[05:18:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:21:14] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[05:24:29] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:25:11] *** Joins: badkins (~badkins@136.56.92.199)
[05:26:23] *** Joins: notzmv (~zmv@user/notzmv)
[05:29:51] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[05:41:50] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[05:46:05] *** Joins: s-liao (~s-liao@101.86.103.113)
[05:48:50] *** Quits: klovett_ (~klovett@166.205.90.177) (Quit: ZZZzzzâ€¦)
[05:56:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:58:37] *** Joins: klovett (~klovett@166.205.90.177)
[06:24:07] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b008:1248:481b:1f8f:edc9:ed83) (Quit: Leaving)
[06:24:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80:5f55:fe64:938c:3d98)
[06:37:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[06:38:11] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Ping timeout (120 seconds))
[06:42:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:42:35] *** Joins: s-liao (~s-liao@101.86.103.113)
[07:12:20] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[07:34:52] *** Joins: badkins (~badkins@136.56.92.199)
[07:39:27] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[07:41:51] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[07:45:54] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[07:46:54] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 260 seconds)
[08:28:55] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[09:03:08] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:16:26] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:18:59] *** Quits: Inline (~Inline@2a02:908:1252:7a80:5f55:fe64:938c:3d98) (Ping timeout: 264 seconds)
[09:35:06] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 245 seconds)
[09:49:58] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:41b0:6e8:d3fa:5cea)
[09:49:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:41b0:6e8:d3fa:5cea) (Changing host)
[09:49:58] *** Joins: skapata (~Skapata@user/skapata)
[09:52:07] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[10:20:38] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[10:33:42] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[10:39:02] *** Joins: badkins (~badkins@136.56.92.199)
[10:43:26] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 245 seconds)
[10:51:32] *** Quits: abralek (~user@j74182.upc-j.chello.nl) (Ping timeout: 240 seconds)
[10:52:31] *** Joins: s-liao (~s-liao@101.86.101.64)
[10:52:42] *** Joins: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[11:02:10] *** Parts: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi) (Leaving)
[11:06:30] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[11:11:46] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 260 seconds)
[11:40:42] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 260 seconds)
[11:42:50] *** Joins: mononote (~mononote@user/mononote)
[11:45:17] *** Joins: s-liao (~s-liao@101.86.101.64)
[11:48:37] *** Joins: deltab (~deltab@user/deltab)
[11:48:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:52:52] *** Joins: Everything (~Everythin@37.115.210.35)
[12:06:19] *** lampilelo_ is now known as lampilelo
[12:09:25] *** Joins: oxum (~oxum@122.172.47.114)
[12:11:35] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:14:11] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 264 seconds)
[12:24:04] *** Joins: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[12:44:30] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 256 seconds)
[12:47:39] *** Joins: ullbeking (sid5364@user/ullbeking)
[12:55:16] *** Quits: ullbeking (sid5364@user/ullbeking) (Max SendQ exceeded)
[12:57:47] *** Joins: ullbeking (sid5364@user/ullbeking)
[13:00:04] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e097:ace:b6b8:a6c1)
[13:04:14] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:20:34] *** Joins: oxum (~oxum@122.172.47.114)
[13:21:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[13:25:35] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 264 seconds)
[13:29:21] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e097:ace:b6b8:a6c1) (Remote host closed the connection)
[13:55:56] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[14:03:23] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 264 seconds)
[14:07:42] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[14:13:36] *** Joins: s-liao (~s-liao@101.86.101.64)
[14:16:51] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 256 seconds)
[14:26:22] *** Joins: s-liao21 (~s-liao@101.86.101.64)
[14:27:48] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[14:46:01] *** Joins: civodul (~user@guix/contributor/civodul)
[14:51:50] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f999:7dbf:ab48:5803)
[15:26:23] *** Joins: retropikzel_ (~retropikz@83-245-249-67-nat-p.elisa-mobile.fi)
[15:29:11] *** Quits: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi) (Ping timeout: 264 seconds)
[15:35:10] *** Joins: oxum (~oxum@122.172.47.114)
[15:36:36] *** Joins: Inline (~Inline@2a02:908:1252:7a80:32fe:5fac:ae8e:a22b)
[15:37:55] *** Quits: s-liao21 (~s-liao@101.86.101.64) (Quit: Client closed)
[15:40:06] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 260 seconds)
[15:46:52] *** Joins: s-liao (~s-liao@101.86.101.64)
[15:53:03] *** Quits: retropikzel_ (~retropikz@83-245-249-67-nat-p.elisa-mobile.fi) (Remote host closed the connection)
[15:53:22] *** Joins: retropikzel_ (~retropikz@83-245-249-67-nat-p.elisa-mobile.fi)
[16:05:08] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[16:15:03] *** Joins: retropikzel (~retropikz@83-245-249-67-nat-p.elisa-mobile.fi)
[16:15:49] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[16:17:11] *** Quits: retropikzel_ (~retropikz@83-245-249-67-nat-p.elisa-mobile.fi) (Ping timeout: 264 seconds)
[16:18:36] *** Quits: retropikzel (~retropikz@83-245-249-67-nat-p.elisa-mobile.fi) (Remote host closed the connection)
[16:19:08] *** Joins: retropikzel (~retropikz@83-245-249-67-nat-p.elisa-mobile.fi)
[16:30:59] *** Quits: retropikzel (~retropikz@83-245-249-67-nat-p.elisa-mobile.fi) (Ping timeout: 264 seconds)
[16:32:32] *** Joins: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[16:34:48] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[16:36:29] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[16:39:15] <amazigh> I tried to improve the comparator; that is too slow, without unit tests, it is too difficult for me.
[16:39:27] <amazigh> There is an infinite loop, I can't figure where it is.
[16:39:42] <amazigh> I tried biwascheme, without success.
[16:41:33] <amazigh> I will try to use my own compiler, that was started a few month back.
[16:44:45] *** Joins: seninha (~seninha@user/seninha)
[16:45:01] *** Quits: oneofvalts (~oneofvalt@2001:19f0:6c01:2d9c:5400:2ff:fea2:a386) (Quit: Ã§al paranÄ±, al da gel, sen d'oyna!)
[16:45:15] *** Joins: oneofvalts (~oneofvalt@2001:19f0:6c01:2d9c:5400:2ff:fea2:a386)
[16:48:19] <amazigh> to do that I need to find the code..
[17:04:33] *** Joins: s-liao (~s-liao@101.86.101.64)
[17:18:49] *** Joins: vats (~vats@103.158.91.90)
[17:37:24] *** Joins: badkins (~badkins@136.56.92.199)
[17:49:53] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[17:50:13] *** Joins: madage (~madage@user/madage)
[17:51:09] *** Quits: Inline (~Inline@2a02:908:1252:7a80:32fe:5fac:ae8e:a22b) (Quit: Leaving)
[17:53:42] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[18:13:26] *** Joins: Inline (~Inline@2a02:908:1252:7a80:22ee:92f9:2a07:2e7)
[18:44:47] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[19:04:55] *** Quits: malaclyps (~mala@user/malaclyps) (Quit: ZNC 1.6.1 - http://znc.in)
[19:05:26] *** Joins: mala (~mala@user/malaclyps)
[19:07:19] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[19:07:32] *** Joins: madage (~madage@user/madage)
[19:13:06] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[19:15:50] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[19:16:04] *** Joins: madage (~madage@user/madage)
[19:29:37] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[19:30:08] *** Joins: badkins (~badkins@136.56.92.199)
[19:34:45] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[19:39:43] *** Quits: vats (~vats@103.158.91.90) (Ping timeout: 268 seconds)
[19:43:13] *** Joins: badkins (~badkins@136.56.92.199)
[19:48:26] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 245 seconds)
[20:13:36] *** Joins: torbjornsd (~torbjorns@213.158.42.177)
[20:17:42] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:60e3:f790:778c:1e41)
[20:17:42] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:60e3:f790:778c:1e41) (Changing host)
[20:17:43] *** Joins: skapata (~Skapata@user/skapata)
[20:18:21] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[20:18:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:60e3:f790:778c:1e41)
[20:18:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:60e3:f790:778c:1e41) (Changing host)
[20:18:46] *** Joins: skapata (~Skapata@user/skapata)
[20:21:39] <amazigh> I found some code at https://git.sr.ht/~amirouche/ruse/tree/wasm2
[20:21:59] <sham1> It's a ruse!
[20:23:25] <amazigh> yes. The latest code is in scratch.scm; it is not clean at all!
[20:23:48] <ecraven> is it possible to statically link in libchibi, to get a static executable?
[20:24:19] <amazigh> it seems I will do 4th rewrite
[20:29:10] <Zipheir> It looks like a strong start.
[20:30:07] <Zipheir> amazigh: How are you representing closures?
[20:30:11] *** Joins: klovett (~klovett@166.205.90.177)
[20:33:53] <amazigh> it depends the target, with scheme, it is a vector such as: #(code #(free-variables ...)) where code is lambda without free-variables;
[20:35:11] <amazigh> sorry, in the code is #(free-variables code) where free-variables is a vector, see
[20:35:12] <amazigh> https://git.sr.ht/~amirouche/ruse/tree/wasm2/item/scratch.scm#L199-206
[20:36:44] <Zipheir> That's straightforward.
[20:46:15] <amazigh> Given a procedure (lambda (a b c) ...) with free variables x, y, z. The following closure should be created #(#(x y z) (lambda (cl a b c) ...)
[20:46:39] <amazigh> where x, y, z are the know values in the caller
[20:48:18] <Zipheir> Yes, that's the "flat" strategy, IIUC.
[20:48:21] <amazigh> Once the closure `cl` is created in the caller, to execute it, caller side (proc a b c), is replace with (define cl (make-closure ...)) (closure-call cl a b c)
[20:49:37] <amazigh> Then inside the `code` of `cl`, the lambda looks like (lambda (cl a b c) (define x (closure-ref cl x-index)) (define y (closure-ref cl y-index))... where x-index, y-index are known at compile time, hence they are integer pointing to x, y inside closure free variables.
[20:49:55] <Zipheir> Yes.
[20:51:14] <amazigh> I did not implement any algorithm to reduce the number of free variables, except the procedure uncover-free, apparantly they are ways to reduce or eliminate useless free variables; but I am under the impression that is what uncover-free does..
[20:51:52] <amazigh> uncover-free will traverse the s-expr bottom-up, and gather all variables, and remove those that are bound with e.g. let;
[20:52:18] <amazigh> IIRC when uncover-free runs the compiler already removed every other binding form
[20:53:51] <amazigh> The big problem of my algorithm in the compiler is best demonstrate with an example, say, there is procedure (lambda (a b) (set-box! a 42) (set-box b 1337))
[20:54:17] <amazigh> that will be translate into at least three lambda after cps-trampoline transformation each lambda has a single statement
[20:54:30] <amazigh> s/statment/expression/
[20:56:31] <amazigh> even if there is no call/cc and there is no dependency between both set-box! expression
[20:57:55] <amazigh> I hope it is possible to reduce the number of lambda after cps with a symbolic evaluation.
[20:58:11] <Zipheir> Do you need some kind of static analysis for that?
[20:58:25] <amazigh> I guess.
[20:58:38] <amazigh> I mean, how would you do otherwise?
[20:58:44] <Zipheir> Maybe it's time to dust off Olin's dissertation.
[20:58:55] <sham1> That's one basic block :) So you should be able to use some static analysis to determine that
[21:00:59] <amazigh> the expression (set-box! a b 42) becomes ((lambda (k) (k (primitive-call set-box! a b 42)) k-1) then we can see also that k-1, hence the argument k is useless, because what set-box! returns is undefined.
[21:02:22] <amazigh> it becomes the above at one step the compilation; I can't figure without testing what the code does after.
[21:02:29] <Zipheir> But what if you have (let ((k (set-box! a 42))) ...) ?  You can't remove k in that case, even if it's unspecified.
[21:03:04] <amazigh> that is big problem!
[21:03:43] <Zipheir> Unspecified values are always a problem in Scheme...
[21:04:32] <sham1> Well one probably wouldn't be using the k in that, so assuming that, you could move it out of the let binding
[21:04:42] <amazigh> Since I plan to allow to interleave definitions with expression, (lambda (b) (define a b) (set-box! a 42) (define c a) c) becomes (lambda (b) (letrec* ((a b) (ignore-0 (set-box! a 42) (c a)) c) and eventually letrec* becomes let with boxes
[21:05:10] <amazigh> ref: the letrec* paper by dybvig
[21:05:39] <amazigh> sham1: I am wondering whether instead of optimizing letrec*, I can do that in single pass, with static analysis
[21:06:16] <amazigh> ref: https://legacy.cs.indiana.edu/~dyb/pubs/letrec-reloaded.pdfg
[21:06:22] <sham1> Well since mixing definitions with expressions is technically out-of-spec, this you need to think yourself
[21:07:10] <sham1> Also that link is broken. Even after removing that superfluous g at the end
[21:07:29] <amazigh> https://legacy.cs.indiana.edu/~dyb/pubs/letrec-reloaded.pdf
[21:07:30] <amazigh> ?
[21:07:40] <amazigh> it is not borken on my side.
[21:08:09] <sham1> Hm, Firefox on my phone was saying that the address was not found
[21:08:13] <sham1> The second one works
[21:08:41] <amazigh> I did not implement letrec-reloaded.pdf solution, but the paper mention a simpler approach (that I understand now)
[21:09:58] <sham1> I've also been looking at this paper, but I've had some trouble understanding it
[21:12:19] <amazigh> fwiw, when I started I was clueless about how to implement call/cc, it took me at least two weeks to *hack* my way to make-coroutine-generator
[21:12:54] <amazigh> I mean, sometime having the nose in front of the code helps to figure it out
[21:19:25] <Zipheir> 8-|
[21:20:57] <Zipheir> Maybe it's worth making sense of the formal semantics before writing a Scheme.
[21:21:59] <Zipheir> siraben's Haskellization of the R5RS semantics (can't find the link atm) showed that Clinger's definition of call/cc works "out of the box", IIRC.
[21:30:53] <amazigh> Let me know where is Clinger's R5RS semantics?
[21:31:22] <Zipheir> Reproduced in r7rs.pdf p. 65--68.
[21:32:36] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 245 seconds)
[21:32:45] <Zipheir> Some kind of guide to those semantics would be nice.  The R6RS (operational) semantics have a lot more commentary.
[21:34:30] <Zipheir> I've been thinking that MNW's monster control SRFI (226) should have semantics, but I can't yet volunteer to write them.
[21:35:07] <Zipheir> ("control SRFI which is a monster", not "control-of-monsters SRFI")
[21:35:43] <dpk> have you suggested that on the mailing list?
[21:35:57] <dpk> iâ€™m sure M N-W himself would add them if requested
[21:36:28] <Zipheir> Not yet, because I'm worried the response to be "go ahead and write them, then".
[21:36:34] <Zipheir> s/to/will/
[21:36:39] <Zipheir> It's a lot of work.
[21:37:01] <Zipheir> dpk: OK, thanks for the suggestion.
[21:38:07] <Zipheir> A question which I'd like to try to resolve at some point is whether the R6RS and R7RS formal semantics agree.
[21:38:41] <Zipheir> The answer may well be that it's a matter of comparing apples and oranges.
[21:42:26] <dpk> it may well be impossible to formally prove
[21:42:43] <Zipheir> Yeah.
[21:47:41] <Zipheir> The R6RS semantics come from https://users.cs.northwestern.edu/~robby/pubs/papers/jfp2008-mf.pdf ; the authors of that paper do not say how close the two are, but they do point out that their semantics for eqv? are consistent and the R5 semantics are not.
[21:51:49] *** Joins: vats (~vats@103.158.91.90)
[22:29:59] <dTal> I find the response to R6RS in the scheme community very disappointing. Crabs in a bucket.
[22:30:31] <dTal> "You can't make things easier for users! It's hard to implement! My toy scheme won't be standards compliant! Wahh!"
[22:35:23] <sham1> It's true that one could still be standards compliant, you'd just have to comply to R5RS or something. But it's also true that R6RS is kinda big
[22:36:18] <sham1> I mean, it's not as big as, say, Common Lisp Hyperspec, but it's still large when compared to especially R5RS. But that's also the case even with R7RS-small
[22:36:48] <dTal> It boils down to a philosophical argument over whether Scheme should be easy to write implementations for vs easy to use
[22:37:29] <dTal> I don't really see the point of a language that's easy to write implementations for but hard to use, so to me the choice is clear.
[22:38:27] <dTal> ...although now I write that out, I guess C was sort of designed with that philosophy. Easy to write compilers for.
[22:39:30] <sham1> And easily ported to various architectures. Scheme is similar ofc because the semantics are rather small and the amount of stuff needed to implement for example in the standard library is... not much
[22:40:37] <Zipheir> dTal: I believe it was the combination of many new and required features and the apparent "my way or the highway" social conditions of its creation that led to its unpopularity.
[22:42:54] <sham1> Although some of the parts of the R6RS standard library are somewhat barebones. For example the filesystem library (rnrs files (6)) only has stuff for seeing if a file exists and for deleting a file
[22:43:11] <Zipheir> There's not much else that's possible, portably.
[22:44:32] *** Joins: johnjay (~pi@192.142.100.50)
[22:44:43] <sham1> Perhaps, although I don't know how much one would do with a filesystem on a platform without the ability to iterate over the files of a directory, for example
[22:45:24] <dTal> what's a "directory"? my OS doesn't have those :p
[22:45:58] <Zipheir> I guess the choice is to provide next to nothing or to assume POSIX.
[22:46:14] <sham1> Well either POSIX or WinAPI
[22:46:35] <sham1> But I do see your point even though I do somewhat disagree with it
[22:46:42] <mdhughes> Aside from original CP/M or other 8-bit OS's, most do have directories, and many or most POSIX features.
[22:47:35] <Oxyd> Plus other languages have standard libraries that contain more filesystem-related operations than that. So the claim that it's not possible sounds dubious to me.
[22:47:37] <mdhughes> I think it's fine to specify POSIX and let the impl explode on impossible features.
[22:47:47] <dTal> even my TI-89 calculator has directories - albeit only 1 level deep
[22:48:04] <sham1> Yeah. The only one that doesn't is C and of course C has, again, access to POSIX and WinAPI respectively
[22:48:15] <dTal> mdhughes: I would rather say "some pragmtically common set of features" than "POSIX" per se
[22:48:19] <sham1> And on systems where you don't, well, you probably don't do much of that stuff anyway
[22:50:50] <sham1> I don't know if R7RS-large is going to have anything beyond that anyway, although I don't know the progress of the various editions where one would vote for those kinds of various things to be included
[22:51:03] <Zipheir> Oxyd: I suppose it's down to how many assumptions you make.  Go, e.g., provides quite a bit in its portable fs library https://pkg.go.dev/io/fs
[22:51:25] <Zipheir> And, also, how much OS stuff you believe belongs in a language spec.
[22:51:53] <sham1> Besides, nothing's saying that one couldn't make some of the features optional and put them behind features
[22:51:55] <Zipheir> It's entirely consistent to say "none of it" beyond read and write procedures.
[22:52:39] <Zipheir> sham1: R6 editors don't believe in the concept of "optional feature". :-)
[22:53:16] *** Joins: badkins (~badkins@136.56.92.199)
[22:53:21] <Oxyd> Consistent, perhaps, but not very useful.
[22:53:39] <Zipheir> Usefulness depends on the use.
[22:53:41] <sham1> Zipheir: but what about the R7 ones
[22:54:22] <sham1> It's like, we have cond-expand for a reason
[22:54:57] <Zipheir> Yes.
[22:55:12] <Zipheir> Funny, for some reason I thought R6 had cond-expand.
[22:57:50] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[23:00:51] *** Quits: klovett (~klovett@166.205.90.177) (Quit: ZZZzzzâ€¦)
[23:08:29] <sham1> There doesn't even seem to be any kind of a specifically filesystem SRFI out there. The closest that we have is 170 which is POSIX stuff, although it seems to be portable basically wholesale to Windows as well
[23:09:39] <Zipheir> Yeah, and the various implementations provide very different filesystem interfaces.
[23:10:04] *** Quits: f8l (~f8l@37.228.213.3) (Quit: changing locale)
[23:10:59] *** Joins: f8l (~f8l@37.228.213.3)
[23:24:12] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:29:55] *** Quits: vats (~vats@103.158.91.90) (Ping timeout: 256 seconds)
[23:38:39] *** Joins: badkins (~badkins@136.56.92.199)
[23:39:35] *** Joins: mononote (~mononote@user/mononote)
[23:43:18] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
