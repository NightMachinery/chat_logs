[00:09:10] <FromDiscord> <carmysilna> If I have a type `Rule[A]` and I want a `const` `seq[Rule[_]]` where I can have different types of `Rule`s in the `seq`, but the Rule object has internal generics that need to be consistent with each other
[00:12:46] <FromDiscord> <carmysilna> in other words, is there a way to do `Rule[forall A. A]` in a Haskell-like syntax?
[00:12:56] <FromDiscord> <Elegantbeef> Is it an arbitrary variation of theses Rules?
[00:15:04] <FromDiscord> <Elegantbeef> The way to do this in nim is to manually box all variations in an object variant, which for arbitrary values is quite tedious
[00:15:19] *** Joins: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com)
[00:16:20] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 258 seconds)
[00:18:31] <FromDiscord> <carmysilna> sent a code paste, see https://play.nim-lang.org/#ix=3uqD
[00:23:04] <FromDiscord> <Elegantbeef> Yea like i said a variant would work here, be it a safe one or an unsafe one(done lazily using an int and a macro table to do the unpacking where needed) https://play.nim-lang.org/#ix=3uqE
[00:30:29] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[00:48:52] <FromDiscord> <carmysilna> yeah, that might work, thaanks
[00:48:55] <FromDiscord> <carmysilna> (edit) "thaanks" => "thanks"
[00:52:53] <FromDiscord> <planetis> noob question, does the object construction syntax sets all the omitted fields to default values?
[00:53:29] <FromDiscord> <haxscramper> it sets values to zero-init memory
[00:53:37] <FromDiscord> <haxscramper> which is a default value
[00:57:24] <FromDiscord> <planetis> ok ty
[01:20:27] *** Joins: vicfred (~vicfred@user/vicfred)
[01:26:28] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[01:26:51] *** Joins: max22- (~maxime@2a01cb08833598000bc268c034a0874c.ipv6.abo.wanadoo.fr)
[01:36:01] <FromDiscord> <planetis> makes sense thats were the double zeromem is coming from
[01:36:02] <FromDiscord> <planetis> regardless this is the safest and in release its optimized away
[01:37:08] <FromDiscord> <planetis> (at least for clang)
[01:45:54] *** Quits: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733) (Quit: bye)
[01:47:38] *** Joins: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733)
[01:51:22] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 245 seconds)
[03:32:02] *** Quits: max22- (~maxime@2a01cb08833598000bc268c034a0874c.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[04:26:42] *** Joins: vicfred_ (~vicfred@user/vicfred)
[04:29:09] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 250 seconds)
[04:39:03] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[04:43:44] *** Joins: thunder (~thunder@user/thunder)
[04:50:16] *** Quits: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733) (Quit: bye)
[04:56:33] *** Joins: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733)
[04:57:39] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[05:12:46] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[05:20:45] *** Quits: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733) (Quit: bye)
[05:22:36] *** Joins: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733)
[05:22:44] *** Quits: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733) (Remote host closed the connection)
[05:24:36] *** Joins: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733)
[06:20:32] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:33:55] <FromDiscord> <jfmonty2> How do I set the size of an UncheckedArray? I'm looking to implement a stack-allocated sequence-ish type of a fixed size, and since I'm checking the bounds myself I want to use an UncheckedArray so that I'm not doing unnecessary work. But I can't find much information on how to actually use UncheckedArrays.
[06:35:54] <FromDiscord> <Elegantbeef> uncheckedarrays do not store size, you store that elsewhere
[06:38:58] <FromDiscord> <jfmonty2> ok, so how do I actually access its elements?
[06:44:32] <FromDiscord> <Elegantbeef> Super lazy showcase of how to make your own seq https://play.nim-lang.org/#ix=3urE
[06:45:28] <FromDiscord> <Elegantbeef> Of course this is heap allocated cause stack allocation is scary ðŸ˜›
[06:46:43] <FromDiscord> <carmysilna> wouldn't a fairly easy optimization be using something like SmallVec in Rust, where it uses a small stack-allocated array for short vecs and an actual heap-allocated vec when it grows past that?
[06:47:44] <FromDiscord> <Elegantbeef> Well you can do a bunch of optimizations, but you also could just use a larger array/seq than you need at the start and be mostly fine
[06:48:10] <FromDiscord> <Elegantbeef> Like for instance is there really any reason to not just use an distinct array
[06:50:50] <FromDiscord> <Elegantbeef> I take it back distinct array doesnt work \:D
[06:52:01] <FromDiscord> <jfmonty2> so `create(T, size)` seems to be the magic that I was missing here
[06:52:08] <FromDiscord> <Elegantbeef> Well that's heap allocated
[06:52:15] <FromDiscord> <jfmonty2> right, I was about to ask about that
[06:52:41] <FromDiscord> <jfmonty2> do I need to use `alloca` or something? Is that stack-allocated?
[06:53:48] <FromDiscord> <Elegantbeef> I dont know, generally it's not advised to stack alloc manually afaik
[06:55:21] <FromDiscord> <jfmonty2> ok I've found this, which seems to be doing exactly what I'm looking for: https://github.com/bpr/vla/blob/master/src/vla.nim
[06:57:10] <FromDiscord> <Elegantbeef> Yea looks like it's what you want
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:34] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:48:11] <FromDiscord> <Rika> In reply to @Elegantbeef "I dont know, generally": Can you even manually allocate stack memory after entering a proc
[08:51:54] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:51:59] <FromDiscord> <Elegantbeef> https://www.man7.org/linux/man-pages/man3/alloca.3.html yea but it can cause UB
[08:53:57] <FromDiscord> <Rika> So donâ€™t use it
[08:54:13] <FromDiscord> <Rika> Well I guess it has to be used if youâ€™re making a language from scratch
[09:09:20] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[09:18:33] *** Joins: thunder (~thunder@user/thunder)
[09:49:34] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[09:50:56] *** Joins: jkl (~jkl@user/jkl)
[10:46:20] *** Joins: max22- (~maxime@2a01cb088335980067867ceecddbc8d7.ipv6.abo.wanadoo.fr)
[11:09:44] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[11:20:29] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[11:20:51] *** Joins: thunder (~thunder@user/thunder)
[13:12:52] <FromDiscord> <arnetheduck> In reply to @Elegantbeef "https://www.man7.org/linux/man-pages/man3/alloca.3.": I like reviewing code that uses `alloca` - it's so easy to find security issues ðŸ™‚
[13:29:20] <FromDiscord> <Elegantbeef> the implication being dont use alloca?
[13:29:43] *** Quits: max22- (~maxime@2a01cb088335980067867ceecddbc8d7.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[13:29:56] <FromDiscord> <Rika> Donâ€™t use it if you have only a bit of an idea of what youâ€™re doing
[13:30:01] *** Joins: max22- (~maxime@2a01cb0883359800c1e9404904af1833.ipv6.abo.wanadoo.fr)
[13:30:19] <FromDiscord> <Rika> Has as many guns thatâ€™ll shoot you as malloc
[13:30:23] <FromDiscord> <Elegantbeef> Ah so i'll never be allowed to use it
[13:46:53] <FromDiscord> <arnetheduck> In reply to @Rika "Has as many guns": the funniest ones are the ones where the compiler miscompiles (in optimizations) it and causes the bugs, because not even compiler developers are in the "know what they're doing" category of people
[13:47:30] <FromDiscord> <Rika> Ah yeah this is the inline issue right?
[13:47:52] <FromDiscord> <arnetheduck> yeah, inline-in-a-loop
[13:47:55] <FromDiscord> <Rika> Where a compiler inlines a function with alloca into a for loop and causes an overflow
[13:49:11] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3ut2
[13:50:15] <FromDiscord> <Rika> What
[13:50:28] <FromDiscord> <Rika> Thatâ€™s evil
[13:53:57] <FromDiscord> <mlokis> interesting thing is that using struct to hold stack is less efficient then using multiple variables as struct cannot be promoted to register. When i run clang with -O3 it gets rid of structures whenever it can.
[13:54:43] *** Quits: max22- (~maxime@2a01cb0883359800c1e9404904af1833.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[13:55:02] *** Joins: max22- (~maxime@2a01cb0883359800dd5dbe3975ae50e8.ipv6.abo.wanadoo.fr)
[13:55:20] <FromDiscord> <mlokis> and instead of using stack for mutable variables it uses phi nodes
[13:56:13] <FromDiscord> <mlokis> stack is cheap but i guess not that cheap as you still have to load from it
[13:56:57] <FromDiscord> <Elegantbeef> So in summary stack is scary
[13:58:14] <FromDiscord> <mlokis> well llvm has specialized optimization passes that focus on getting rid of stack allocations and use
[13:59:47] <FromDiscord> <mlokis> the c calling convention still allocates stack because for some reason thats a convention
[14:01:17] <FromDiscord> <mlokis> sent a code paste, see https://play.nim-lang.org/#ix=3ut4
[14:03:31] <FromDiscord> <generic linux user> tested now,it doesnt happen on nim
[14:03:52] <FromDiscord> <mlokis> what does not happen?
[14:04:54] <FromDiscord> <mlokis> the stack overflow or infinite recursion? nim compiles to c which uses c calling convention (yes)
[14:06:20] <FromDiscord> <generic linux user> it exits doing nothing
[14:06:34] <FromDiscord> <generic linux user> return code 0
[14:06:48] <FromDiscord> <generic linux user> let me try cpp
[14:06:50] <FromDiscord> <mlokis> gues it optimized the call away
[14:07:02] <FromDiscord> <mlokis> thats agressive
[14:07:24] <FromDiscord> <generic linux user> same in cpp
[14:08:18] <FromDiscord> <mlokis> sent a code paste, see https://paste.rs/Oyd
[14:08:24] <FromDiscord> <generic linux user> sent a code paste, see https://paste.rs/1uX
[14:08:25] <FromDiscord> <generic linux user> why main = main()
[14:08:39] <FromDiscord> <generic linux user> wait
[14:08:45] <FromDiscord> <generic linux user> ðŸ—¿.
[14:08:46] <FromDiscord> <mlokis> you did not call it
[14:08:51] <FromDiscord> <mlokis> YOU
[14:09:03] <FromDiscord> <generic linux user> sorry
[14:09:17] <FromDiscord> <generic linux user> yes it is doing something
[14:09:25] <FromDiscord> <generic linux user> 100% cpu
[14:09:34] <FromDiscord> <mlokis> interesting
[14:09:38] <FromDiscord> <generic linux user> infinite recursion probably
[14:10:07] <FromDiscord> <generic linux user> when you compile using c++ it doesnt happen
[14:10:26] <FromDiscord> <generic linux user> thats cool, now there is a reason for c++ backend
[14:10:55] <FromDiscord> <mlokis> c++ is better for multiple reasons
[14:11:10] <FromDiscord> <mlokis> it has better error handling
[14:11:15] <FromDiscord> <mlokis> c has none
[14:14:04] <FromDiscord> <generic linux user> what
[14:14:11] <FromDiscord> <generic linux user> a bit faster to compile you know
[14:14:21] <FromDiscord> <generic linux user> a biit
[14:14:55] <FromDiscord> <mlokis> i cant believe how wrong the cpp went with syntax
[14:15:06] <FromDiscord> <generic linux user> yes
[14:15:16] <FromDiscord> <mlokis> literally unparsable
[14:16:36] <FromDiscord> <mlokis> syntax should be in balance between efficiency and expressiveness, cpp has none of that.
[14:17:22] <FromDiscord> <generic linux user> is it ggettimg offtopic tho
[14:17:48] <FromDiscord> <mlokis> sent a code paste, see https://play.nim-lang.org/#ix=3ut8
[14:18:16] <FromDiscord> <mlokis> lets shut then
[14:19:28] <FromDiscord> <generic linux user> i wouldnt want to
[14:19:36] <FromDiscord> <generic linux user> its so fun to make fun of cpp
[14:41:45] <FromDiscord> <Rika> In reply to @mlokis "thats why in rust": Doesnâ€™t Nim technically have the same issue
[14:46:35] <FromDiscord> <demotomohiro> myproc[3](args) vs myarray[4](argsForProcTypes)
[14:56:42] <FromDiscord> <exelotl> Is there a way to make a field of an object not have any overflow checking?
[14:57:34] <FromDiscord> <exelotl> I have a Point16 type and I want it to be ok for it to overflow
[14:58:06] <FromDiscord> <exelotl> (edit) "it" => "the x and y fields"
[15:48:02] <FromDiscord> <demotomohiro> iirc, unsigned int types are not overflow checked.
[15:52:05] *** Quits: max22- (~maxime@2a01cb0883359800dd5dbe3975ae50e8.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[15:53:59] <arkanoid> would you suggest unitest or testament?
[15:59:03] <FromDiscord> <Rika> One is simpler the other is more flexible
[16:11:57] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[16:16:57] <FromDiscord> <bolino> Hi! Is there an elegant way to transform a table keys into a sequence of string? I can do it in a loop, but I guess there must be a better way in Nim, right? Thanks!
[16:17:28] <FromDiscord> <bolino> (edit) 04removed "a table" | "into" => "to create" | "string?" => "strings from table keys?"
[16:18:01] <FromDiscord> <enthus1ast> maybe "toSeq(yourTable.keys)
[16:18:18] <FromDiscord> <enthus1ast> toSeq is from the sequtils module
[16:20:54] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3uts
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:34] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:38:05] <FromDiscord> <bolino> Aaah thanks. Works like a charm
[17:16:59] <arkanoid> I'm calling a template that generates ad exported proc in a unittest, but I'm getting Error: 'export' is only allowed at top level
[17:25:01] <arkanoid> nevermind, solved
[17:38:14] *** Joins: arkurious (~arkurious@user/arkurious)
[17:50:49] *** Joins: rockcavera (~rc@192.12.112.221)
[17:50:49] *** Quits: rockcavera (~rc@192.12.112.221) (Changing host)
[17:50:49] *** Joins: rockcavera (~rc@user/rockcavera)
[17:57:15] *** Joins: pjzz (~pjz@place.org)
[17:57:16] <arkanoid> is it possible to do proc [T]() = case T: ... ?
[17:57:37] *** Joins: federico3_ (~quassel@debian/federico)
[17:57:42] <FromDiscord> <Rika> What? What would that mean
[17:58:02] <arkanoid> use case for handling different types T
[17:58:02] *** Joins: redj_ (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca)
[17:58:05] <FromDiscord> <haxscramper> `when T is int`
[17:58:10] <FromDiscord> <haxscramper> or I have a typecase macro
[17:58:24] <FromDiscord> <haxscramper> that allows to do `typecase T: of int ...`
[17:58:40] <FromDiscord> <Rika> Oh did the bridge clobber the text you sent again
[17:59:28] <FromDiscord> <haxscramper> https://play.nim-lang.org/#ix=2Vj2
[17:59:50] <arkanoid> yeah that's actually what I was looking for. But I prefer not to introduce a macro just for that
[18:00:32] <FromDiscord> <haxscramper> it is a syntax sugar over `when T is int`
[18:00:42] <FromDiscord> <haxscramper> `when T is int or T is array`
[18:04:09] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (*.net *.split)
[18:04:09] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[18:04:09] *** Quits: pjz (~pjz@place.org) (*.net *.split)
[18:04:09] *** Quits: federico3 (~quassel@debian/federico) (*.net *.split)
[18:05:04] *** Quits: redj_ (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[18:05:39] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca)
[18:09:05] *** Joins: nisstyre (~wes@user/nisstyre)
[18:20:37] <arkanoid> what's the most idiomatic way to do partial function application in nim?
[18:23:17] <FromDiscord> <haxscramper> probably hack carrying with closures
[18:23:30] <FromDiscord> <haxscramper> there is is no "idiomatic" way
[18:24:44] <arkanoid> mmm, you mean like the python way?
[18:25:01] <arkanoid> partial(myproc, arg0, arg1, arg2, ...)
[18:25:13] <arkanoid> returning a closure
[18:25:49] <FromDiscord> <haxscramper> yes
[18:25:54] <arkanoid> k
[18:26:10] <arkanoid> lets see if I end up with a sufficient generic solution
[18:46:38] <arkanoid> I'm trying to improve the debug output of my async based server. If the exception happens inside the async, I'm getting very little help from the stacktrace and I'm interested in knowing if this is the expected behaviour or there's something wrong with my code
[19:00:22] <arkanoid> hm, I was writing a simple test to expose the problem, but my machine returns a different output than play.nim-lang https://play.nim-lang.org/#ix=3uu6
[19:04:20] <arkanoid> I've found the issue, it's gc arc
[19:05:00] <arkanoid> if you use gc arc you get very bad async stacktraces, if you use default one you get much more data to debug
[19:07:08] <FromDiscord> <@bracketmaster-5a708063d73408ce4> It seems nimterop doesn't really do C++ at the moment?
[19:07:54] <FromDiscord> <haxscramper> It does, partially. But there is no solution that really does C++ right now
[19:08:11] <FromDiscord> <haxscramper> I'm working on it, but it is far from complete
[19:09:12] <arkanoid> also ORC gives same bad stacktraces
[19:09:42] <arkanoid> is ARC/ORC not to be used with async? I though it was fixed since ARC introduction in 2019
[19:19:02] <arkanoid> not sure if this is a bug or a feature request
[19:19:58] <FromDiscord> <haxscramper> You can ask on forum about async stacktraces
[19:20:28] <FromDiscord> <haxscramper> Since there is usually not that much people around here that might provide concrete detailed answer about async
[19:20:46] <FromDiscord> <haxscramper> dom, maybe someone else
[19:25:01] <arkanoid> good idea
[19:32:20] <fn> <11ForumUpdaterBot99> New thread by Giaco: Stacktrace when using async with arc/orc is not helpful, see https://forum.nim-lang.org/t/8285
[19:32:39] <FromDiscord> <Rika> it still takes a moment for me to realise that arkanoid is giaco
[19:33:47] <FromDiscord> <dankrad> Thanks, I'm going to play a round with your approach. You helped me a lot!
[19:34:23] *** Joins: max22- (~maxime@2a01cb08833598009121869d838f5dd0.ipv6.abo.wanadoo.fr)
[19:38:37] <arkanoid> Rika, yeah we do have split personality disorders
[20:14:27] <FromDiscord> <carmysilna> Is there a nim GitHub Actions file I could copy off of? Ideally I would build release versions and then use another action off of marketplace to upload to releases
[20:28:22] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:36:25] <FromDiscord> <@bracketmaster-5a708063d73408ce4> @haxscramper\:matrix.org - can I have nim read an entire file and dumptree?
[20:37:02] <FromDiscord> <haxscramper> std/macros.parseStmt on the readFile content
[20:47:26] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[21:00:44] *** Joins: thunder (~thunder@user/thunder)
[21:11:23] <FromDiscord> <@bracketmaster-5a708063d73408ce4> gives me\: rror\: request to generate code for .compileTime proc\: parseStmt
[21:11:27] <FromDiscord> <@bracketmaster-5a708063d73408ce4> sent a long message, see http://ix.io/3uv4
[21:13:52] <FromDiscord> <@bracketmaster-5a708063d73408ce4> haxscramper, do you have a code snippet with dumptree and parsestmt?
[21:15:16] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3uv5
[21:15:29] <FromDiscord> <haxscramper> `parseStmt()` is a compile-time proc, you can't use it in macros
[21:15:38] <FromDiscord> <haxscramper> Otherwise you can use compiler API
[21:19:49] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:20:17] <FromDiscord> <@bracketmaster-5a708063d73408ce4> have you tried npeg?
[21:20:17] <FromDiscord> <@bracketmaster-5a708063d73408ce4> https://github.com/zevv/npeg
[21:20:18] <fn> <12R2D299> 4GitHub: 7"PEGs for Nim, another take"
[21:20:29] <FromDiscord> <@bracketmaster-5a708063d73408ce4> It seems to allow for defining grammars in nim
[21:57:22] *** Quits: max22- (~maxime@2a01cb08833598009121869d838f5dd0.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[22:01:52] *** Joins: max22- (~maxime@2a01cb08833598001401e7863aba1c0f.ipv6.abo.wanadoo.fr)
[22:09:33] *** Quits: max22- (~maxime@2a01cb08833598001401e7863aba1c0f.ipv6.abo.wanadoo.fr) (Ping timeout: 276 seconds)
[22:10:14] <FromDiscord> <dankrad> I think this question is needless, but I would like still ask. Is it possible to get the nnkSym from a nnkIdent? I guess not, because the name lookup isn't done. Is that right?â†µI would like to check if the attribute type (in tree as nnkIdent) is of type nnkObjectTy.
[22:12:36] <FromDiscord> <dankrad> sent a code paste, see https://play.nim-lang.org/#ix=3uvo
[22:13:50] <FromDiscord> <mlokis> sent a code paste, see https://play.nim-lang.org/#ix=3uvp
[22:15:06] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[22:16:13] *** Joins: flynn (~mcbloch@user/flynn)
[22:17:57] *** Joins: vicfred (~vicfred@user/vicfred)
[22:21:25] <nixfreak_nim[m]> So I took a look a pixie and wondering if pixie and opengl could be a good start to creating component GUI's, like a slider, buttons, and so on 
[22:22:47] <nixfreak_nim[m]> I know fidgit is being worked on for a second version but what is everyone's opinion on a LCL (Lazarus Component Library) for Nim ? 
[22:54:22] <nixfreak_nim[m]>  * So I took a look at pixie and wondering if pixie and opengl could be a good to create a component library sort of like the LCL(lazarus component library) without the IDE of course. 
[22:56:20] <nixfreak_nim[m]> https://lazarus-ccr.sourceforge.io/docs/lcl/
[22:58:26] <FromDiscord> <haxscramper> [dankrad](https://matrix.to/#/@dankrad:matrix.code0.xyz)\:  Correct, you can't get Sym from Ident, it is just not possible. You need to operate op `typed` ast in order to get `Resolution` to be a symbol.
[23:00:58] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3uvC
[23:01:02] <FromDiscord> <codic> or well, a postcondition
[23:09:47] <FromDiscord> <leorize> no, `of` branches have to evaluate constant values
[23:11:51] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3uvE
[23:12:23] <FromDiscord> <codic> but I have to move the f to it's own line
[23:12:28] <FromDiscord> <codic> (edit) "f" => "if"
[23:12:31] <FromDiscord> <codic> which makes it very messy
[23:13:26] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3uvG
[23:13:57] <FromDiscord> <leorize> move that single condition into an `if` of its own
[23:16:44] <FromDiscord> <codic> that adds too much indentation
[23:16:46] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3uvH
[23:16:50] <FromDiscord> <codic> or do you mean use if for the whole thing?
[23:17:23] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3uvI
[23:17:38] <FromDiscord> <leorize> yea, unfortunately that's the only way
[23:18:25] <FromDiscord> <leorize> sent a code paste, see https://paste.rs/Q9W
[23:20:36] <FromDiscord> <codic> it's weird you can't break outo f a case
[23:20:39] <FromDiscord> <codic> (edit) "outo f" => "out of"
[23:27:29] <FromDiscord> <RattleyCooper> How can I pass a procedure definition to a macro without it always showing up as a void type?
[23:28:02] <FromDiscord> <RattleyCooper> I want to create a statament list of procedures and then use the procedure name to map the procedures to a table.
[23:28:22] <FromDiscord> <RattleyCooper> sent a code paste, see https://play.nim-lang.org/#ix=3uvL
[23:28:44] <FromDiscord> <RattleyCooper> `type mismatch: got <Table[system.string, proc (r: Rpc, data: string, conn: Connection, sock: Reactor){.closure.}], string, void>`
[23:30:02] <FromDiscord> <RattleyCooper> sent a code paste, see https://play.nim-lang.org/#ix=3uvM
[23:31:14] <FromDiscord> <RattleyCooper> Issue is when I try to add the procedure to the table in the `quote do`
[23:48:40] <FromDiscord> <TechnoRazor> In reply to @codic "which makes it very": I don't have a ton of experience with Nim myself, but isn't this the sort of thing you could use a template or macro to make cleaner?
