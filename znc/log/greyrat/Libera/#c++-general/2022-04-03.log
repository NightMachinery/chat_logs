[00:00:01] *** _filename is now known as filename
[00:03:26] *** greater_taste is now known as marginal_taste
[00:03:42] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[00:04:10] *** marginal_taste is now known as acceptable_taste
[00:05:11] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:05:27] *** Quits: filename (~kilitary@188.242.105.134) (Remote host closed the connection)
[00:15:51] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[00:18:19] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:21:00] *** Joins: meator (~meator@user/meator)
[00:21:45] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:22:05] *** Joins: magla (~gelignite@55d4c6cf.access.ecotel.net)
[00:23:01] *** Quits: meator (~meator@user/meator) (Client Quit)
[00:23:15] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:23:26] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[00:25:03] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:26:36] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[00:28:27] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[00:30:25] *** acceptable_taste is now known as great_taste
[00:34:43] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[00:37:33] *** Quits: vnf (~vnf@85.174.194.51) (Quit: Leaving)
[00:37:38] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[00:37:56] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[00:40:30] *** Joins: filename (~kilitary@static.246.201.46.78.clients.your-server.de)
[00:43:31] *** Joins: RazielZ (~Raziel@user/raziel)
[00:43:56] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[00:44:29] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[00:45:35] *** Joins: RazielXYZ (~Raziel@user/raziel)
[00:46:33] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 256 seconds)
[00:48:37] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 240 seconds)
[00:48:49] *** Quits: RazielZ (~Raziel@user/raziel) (Ping timeout: 256 seconds)
[00:49:27] *** Joins: Raziel (~Raziel@user/raziel)
[00:51:39] *** Quits: RazielXYZ (~Raziel@user/raziel) (Ping timeout: 256 seconds)
[00:54:27] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[00:58:06] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c5af:bbac:c966:6cab)
[01:02:42] <lucie22> https://youtu.be/_A4e72MDlsA
[01:09:21] *** Quits: robod34 (Username@79.115.134.214) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:09:31] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c5af:bbac:c966:6cab) (Ping timeout: 260 seconds)
[01:23:20] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:25:08] *** Joins: geli (~gelignite@55d49bbc.access.ecotel.net)
[01:26:41] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[01:27:14] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[01:27:41] *** Quits: magla (~gelignite@55d4c6cf.access.ecotel.net) (Ping timeout: 246 seconds)
[01:31:01] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Ping timeout (120 seconds))
[01:31:52] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 260 seconds)
[01:33:12] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[01:43:28] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[01:47:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:52:06] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:53:04] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[02:08:27] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[02:15:47] *** Quits: Inline (~Inline@p4fedb8e0.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[02:16:39] *** Quits: filename (~kilitary@static.246.201.46.78.clients.your-server.de) (Ping timeout: 256 seconds)
[02:16:48] *** Joins: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de)
[02:24:34] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:8ccd:8ba0:340:4246)
[02:26:49] *** Joins: seninha (~seninha@user/seninha)
[02:27:53] *** Joins: vnf (~vnf@188.162.140.42)
[02:30:55] *** Quits: jsbach (~jsbach@2a01:c22:ac02:c800:b759:52a1:6b80:928b) (Ping timeout: 250 seconds)
[02:32:36] *** Quits: vnf (~vnf@188.162.140.42) (Ping timeout: 260 seconds)
[02:33:16] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[02:33:49] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[02:38:31] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 256 seconds)
[02:42:37] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[02:43:52] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[02:44:12] *** Quits: lucie22 (~lucie22@host-109-88-209-116.dynamic.voo.be) (Quit: Connection closed)
[02:44:25] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[02:44:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:45:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:45:02] *** ChanServ sets mode: +v npaperbot
[02:48:34] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:e14b:b35c:9d30:4a6c) (Read error: Connection reset by peer)
[02:48:53] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 260 seconds)
[02:49:33] *** Joins: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de)
[02:52:06] *** Joins: Roughy (~mdaw45ns@user/roughy)
[03:02:53] *** Quits: calcul0n (~calcul0n@2a01:e0a:150:6030:7d85:9901:c4f9:1225) (Ping timeout: 260 seconds)
[03:06:58] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[03:11:38] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 260 seconds)
[03:12:26] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[03:14:18] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[03:15:43] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[03:16:50] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[03:17:40] <cahoots> hi, is there any clang flag for c/c++ that will zero-initialize variables that are otherwise not? e.g. "int a;" would effectively become "int a = 0;"
[03:18:04] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[03:19:20] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 246 seconds)
[03:22:38] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 260 seconds)
[03:24:57] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[03:40:57] <ville> cahoots: no, but you can get it to catch quite a few of those for you...
[03:41:01] <ville> !give cahoots -Wall
[03:41:02] <nolyc> cahoots: -Wall is is only -Wsome; it leaves out many warnings. To really get a lot of warnings, you should use '-Wall -Wextra -Wpedantic -Wconversion -std=c++17 -O2'
[03:41:31] <Friithian> it annoys me that -Wall isn't all
[03:41:55] <ville> and even more may be caught by use of sanitizers and valgrind
[03:45:25] *** Quits: Shell (~shell@user/shell) (Quit: ZNC 1.8.2 - https://znc.in)
[03:47:51] *** Joins: Shell (~shell@user/shell)
[03:56:16] <cahoots> there's -Weverything
[03:56:21] <cahoots> ville, ty
[03:56:39] <cahoots> why does O2 cause more warnings
[03:56:56] <ville> some deadcode analysis require it
[03:57:26] <cahoots> nice
[03:57:42] <ville> ...it could be that even -O1 will do, but there are cases that won't be caught if you don't pass anything
[03:58:45] *** Quits: cq-work (~cq-work@user/cq-work) (Remote host closed the connection)
[03:59:18] *** Joins: cq-work (~cq-work@user/cq-work)
[03:59:51] *** Quits: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:00:15] *** Quits: cq-work (~cq-work@user/cq-work) (Remote host closed the connection)
[04:01:27] *** Joins: cq-work (~cq-work@user/cq-work)
[04:01:28] <cahoots> i'm an Oz man myself
[04:03:08] <ville> anyhoo it's only a handful of cases where it matters
[04:04:49] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[04:05:30] <ville> !give cahoots -fsanitize
[04:05:31] <nolyc> cahoots: clang: https://clang.llvm.org/docs/ ctrl-f "sanitize" and g++: https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html#index-fsanitize_003daddress
[04:10:38] *** Joins: Roughy (~mdaw45ns@user/roughy)
[04:17:01] <ville> now that amd introduced their tagged pointer instruction wonder if we'll get address sanitizer on x86
[04:17:16] <ville> err hwaddress
[04:18:18] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[04:25:02] *** Quits: AmR (~AmREiSa@156.207.152.245) (Quit: Konversation terminated!)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:26:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:28:59] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 246 seconds)
[04:30:23] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 260 seconds)
[04:31:36] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[04:33:57] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[04:55:00] *** Quits: geli (~gelignite@55d49bbc.access.ecotel.net) (Quit: Stay safe!)
[04:56:46] *** Joins: v4mp (~v4mp@user/v4mp)
[05:10:03] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[05:11:52] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:25:44] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:28:02] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:d23a:34d9:153e:df73) (Quit: Konversation terminated!)
[05:44:10] <hackinghorn> I sometimes see instead of if (v==0), people write if (!v), and , instead of if (v!=0), is if (v), is it good practice or it confuses others?
[05:49:59] *** Joins: Inline__ (~Inline@p4fedb8e0.dip0.t-ipconnect.de)
[05:52:14] *** Quits: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:54:35] *** Joins: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:04:52] <pulse> no, i like !v
[06:06:03] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[06:06:05] <Friithian> if it's a bool that has a good name, (v) (!v) are all fine, but if not, eeeeeh nah
[06:07:03] <RandomReader> depends on the people and what they're used to .. different languages have different meanings behind the expressions, so sometimes that drives team conventions
[06:07:37] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[06:08:45] <RandomReader> personally I'm pretty fluid depending on the surrounding codebase, greenfield I will usually condense it to a boolean in some form, but that is usually paired with other naming and type behavior so it makes obvious sense
[06:08:56] <RandomReader> (well, obvious to me at least)
[06:10:04] <RandomReader> to me, expressions like (p != nullptr) are just noisy, I'd rather not spend time reading that
[06:10:41] <RandomReader> but like I said, depends on the surrounding patterns, so
[06:12:55] *** Joins: ymwm (~yingmanwu@240e:37a:40ee:f500:d006:b58d:f3a1:2ef2)
[06:13:36] <Raziel> yeah, for pointers and bools I think that's fine, for arithmetic types it's a bit loose
[06:13:56] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[06:14:43] <Friithian> when you have if (isTurnedOn) it works fine, but if (score) doesn't so much
[06:15:39] <Raziel> yup
[06:16:08] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[06:17:40] *** Joins: PJBoy (~PJBoy@user/pjboy)
[06:18:15] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[06:18:57] *** Joins: Inline (~Inline@p2e5790e6.dip0.t-ipconnect.de)
[06:21:27] *** Quits: Inline__ (~Inline@p4fedb8e0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:24:51] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 256 seconds)
[06:33:55] *** Joins: filename (~kilitary@188.242.105.134)
[06:34:04] *** Joins: Snyp (~Snyp@49.207.197.152)
[06:38:18] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[06:40:03] *** Joins: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr)
[06:43:04] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[06:44:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:45:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:45:01] *** ChanServ sets mode: +v npaperbot
[06:52:01] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[06:52:05] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[06:54:06] *** Quits: emerent (~quassel@p200300cd5743c3e5ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[06:54:34] *** Joins: emerent (~quassel@p200300cd5743c321ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:56:20] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 246 seconds)
[07:03:22] *** Joins: adeliktas2 (~adeliktas@i59F4D7EF.versanet.de)
[07:04:32] *** Quits: pulse (~pulse@user/pulse) (Quit: { indiedevs.net })
[07:05:33] *** Quits: adeliktas (~adeliktas@i59F521DF.versanet.de) (Ping timeout: 260 seconds)
[07:05:33] *** adeliktas2 is now known as adeliktas
[07:06:37] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[07:09:38] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 246 seconds)
[07:11:02] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 246 seconds)
[07:17:08] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542)
[07:18:31] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[07:24:14] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[07:29:30] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:32:06] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[07:37:02] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[07:37:51] *** Quits: ymwm (~yingmanwu@240e:37a:40ee:f500:d006:b58d:f3a1:2ef2) (Remote host closed the connection)
[07:38:04] *** Joins: ymwm (~yingmanwu@240e:37a:40e5:1400:b1c4:b55c:61e4:2b2d)
[07:48:26] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[07:49:52] *** Quits: tabakhase (tabakhase@user/tabakhase) (Quit: ZNC - http://znc.in)
[07:50:50] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 272 seconds)
[07:52:10] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[07:54:38] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[07:55:40] *** Joins: tabakhase (tabakhase@user/tabakhase)
[07:55:56] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[08:00:23] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[08:00:53] <johnny> i always prefer to code such that you can exit early if possible
[08:01:10] <johnny> so i guess i more often write if (!v)
[08:01:27] <johnny> although i guess that's just related to the particular problem domains
[08:07:51] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[08:16:47] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:5158:9cdb:4fad:bf8)
[08:16:47] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:5158:9cdb:4fad:bf8) (Changing host)
[08:16:47] *** Joins: skapate (~Skapata@user/skapata)
[08:16:59] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[08:29:10] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[08:33:17] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 246 seconds)
[08:36:01] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[08:46:10] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[08:47:59] *** Quits: proller (~p@2a02:6b8:b081:a412::1:1e) (Ping timeout: 256 seconds)
[08:51:29] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 246 seconds)
[08:54:34] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d407:f433:c42a:27bd)
[08:54:34] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d407:f433:c42a:27bd) (Changing host)
[08:54:34] *** Joins: skapata (~Skapata@user/skapata)
[08:55:24] *** Quits: skapate (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[09:06:53] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[09:19:22] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[09:24:21] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Changing host)
[09:24:21] *** Joins: hnOsmium0001[m] (~hnosmium0@user/hnOsmium0001)
[09:31:11] *** Joins: PJBoy (~PJBoy@user/pjboy)
[09:33:44] <smallville7123_> does C++ have a concept of an interface
[09:34:17] <smallville7123_> or is that implemented via multiple class inheritence
[09:34:48] <smallville7123_> eg class X : ILIST {}
[09:35:29] *** Joins: NiD27 (~nid27@49.205.149.220)
[09:37:28] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[09:38:24] <hnOsmium0001[m]> smallville7123_: not directly, and conventionally an interface is considered to be a class that has 1. a virtual destructor 2. only pure virtual member functions
[09:42:53] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:45:11] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[09:52:00] *** Joins: calcul0n (~calcul0n@2a01:e0a:150:6030:7d85:9901:c4f9:1225)
[09:52:23] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:8ccd:8ba0:340:4246) (Ping timeout: 260 seconds)
[09:57:10] <smallville7123_> is a base class allowed to have a private constructor
[10:01:41] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[10:02:01] <InPhase> smallville7123_: Yes, but not "only" a private constructor.  At least one will need to be public or protected.
[10:03:00] <InPhase> That is, if you actually want to construct a derived class.
[10:14:00] <smallville7123_> InPhase: ok :)
[10:23:07] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[10:23:32] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 246 seconds)
[10:30:35] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:8ccd:8ba0:340:4246)
[10:35:16] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[10:37:05] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[10:37:48] *** Quits: ymwm (~yingmanwu@240e:37a:40e5:1400:b1c4:b55c:61e4:2b2d) (Ping timeout: 240 seconds)
[10:39:47] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[10:44:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:45:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:45:00] *** ChanServ sets mode: +v npaperbot
[10:48:28] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:52:25] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[11:01:32] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[11:06:28] <ville> InPhase: need is a bit strong there. friend and whatnot
[11:07:32] *** Quits: ville (~ville@user/ville) (Quit: ville)
[11:09:05] *** Joins: ville (~ville@user/ville)
[11:11:03] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:8ccd:8ba0:340:4246) (Ping timeout: 260 seconds)
[11:15:49] *** Joins: meator (~meator@user/meator)
[11:18:35] <johnny> i've still not used friend classes
[11:18:57] <johnny> oh wait.. i did to implement a part for some other thing i was using
[11:19:17] <johnny> so more like i haven't done it for stuff that i made by myself
[11:27:24] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:8ccd:8ba0:340:4246)
[11:39:55] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:701a:9260:82ec:f4bf)
[11:41:20] *** Quits: Snyp (~Snyp@49.207.197.152) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:42:02] *** Joins: Snyp (~Snyp@49.207.197.152)
[11:43:50] *** Quits: v4mp (~v4mp@user/v4mp) ()
[11:50:56] <ville> you can save your self the trouble and stop using access specifiers
[11:56:45] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[11:56:47] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[11:59:33] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[12:03:17] *** Quits: meator (~meator@user/meator) (Ping timeout: 246 seconds)
[12:04:08] *** Joins: Xe4roX (~Xe4roX@31-10-149-112.cgn.dynamic.upc.ch)
[12:04:27] *** Joins: ville (~ville@user/ville)
[12:08:13] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:8ccd:8ba0:340:4246) (Ping timeout: 240 seconds)
[12:09:01] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[12:09:35] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:10:38] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:8ccd:8ba0:340:4246)
[12:13:35] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[12:13:41] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[12:17:33] *** Joins: paul424 (~tom@ip-5-172-235-219.multi.internet.cyfrowypolsat.pl)
[12:18:52] *** Joins: robod34 (Username@79.115.134.214)
[12:33:51] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[12:34:46] *** Quits: NiD27 (~nid27@49.205.149.220) (Remote host closed the connection)
[12:41:00] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[13:10:02] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542) (Ping timeout: 252 seconds)
[13:10:05] *** Joins: jsbach (~jsbach@2a01:c22:a9f6:7600:7dd:385c:8a8f:e58b)
[13:10:34] *** Joins: ymwm (~yingmanwu@240e:37a:40e5:1400:b1c4:b55c:61e4:2b2d)
[13:11:30] *** Joins: joji (~jojo@86.4.72.180)
[13:12:34] *** Quits: Snyp (~Snyp@49.207.197.152) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:13:58] <smallville7123_> what does 0x1p54 mean?
[13:14:07] <smallville7123_> https://elixir.bootlin.com/musl/v1.1.9/source/src/math/cbrt.c#L58
[13:15:24] <bpalmer> hexadecimal floating point literal.
[13:15:45] <bpalmer> See https://en.cppreference.com/w/cpp/language/floating_literal
[13:16:41] <smallville7123_> how do i enter that in C#
[13:17:45] *** Joins: Snyp (~Snyp@49.207.197.152)
[13:18:31] <TinoDidriksen> Ask the C# channel.
[13:20:52] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:22:42] *** Quits: Snyp (~Snyp@49.207.197.152) (Ping timeout: 272 seconds)
[13:24:25] *** Joins: kaph_ (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[13:27:03] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[13:28:10] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[13:28:18] *** Joins: kaph__ (~kaph@151.47.143.243)
[13:28:20] *** Quits: joji (~jojo@86.4.72.180) (Ping timeout: 246 seconds)
[13:31:07] *** Joins: joji (~jojo@86.4.72.180)
[13:31:08] *** Quits: kaph_ (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Ping timeout: 246 seconds)
[13:32:00] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[13:44:46] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[13:45:42] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[13:47:07] *** Joins: Guest62 (~Guest62@78.84.18.138)
[13:47:26] *** Joins: jokoon (~eio@2a01:e0a:542:e160:90c0:bb6d:6f5:f8a4)
[13:54:57] *** Joins: lucie22 (~lucie22@host-109-88-209-116.dynamic.voo.be)
[13:55:17] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[13:55:49] *** Quits: kaph__ (~kaph@151.47.143.243) (Read error: Connection reset by peer)
[13:57:16] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[13:57:17] *** Joins: kaph__ (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[13:59:18] *** Joins: jokoon2 (~eio@2a01:e0a:542:e160:d454:3069:cbea:472a)
[14:02:05] *** Quits: jokoon (~eio@2a01:e0a:542:e160:90c0:bb6d:6f5:f8a4) (Ping timeout: 250 seconds)
[14:07:42] *** Joins: plastico (~plastico@neomutt/plastico)
[14:07:46] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[14:07:57] *** Quits: Guest62 (~Guest62@78.84.18.138) (Quit: Connection closed)
[14:09:03] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[14:09:06] <antto> who even uses C#
[14:09:11] <antto> !C#
[14:09:12] <nolyc> C# is the note one semi-tone above C
[14:09:28] <antto> okay, i do
[14:10:26] <bpalmer> quick work beating a confession out of antto, antto
[14:10:42] <smallville7123_> welp imma just hope that it is correct
[14:10:49] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[14:11:01] *** Joins: meator (~meator@user/meator)
[14:11:11] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[14:12:33] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:18:39] *** Quits: kaph__ (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[14:22:03] <smallville7123_> if i want to convert 0xff000000 to int do i need to reinterpret cast?
[14:22:16] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[14:22:23] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[14:23:47] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[14:23:58] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[14:27:18] <Raziel> smallville7123_, what int do you think that is going to be, in decimal?
[14:27:26] <Raziel> or, what int do you expect?
[14:27:54] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Remote host closed the connection)
[14:28:14] <Raziel> { int n = 0xff00000000; cout << n; }
[14:28:15] <geordi> warning: overflow in conversion from 'long int' to 'int' changes value from '1095216660480' to '0'
[14:28:21] <Raziel> uhhuh
[14:28:32] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[14:28:35] <Raziel> { uint32_t n = 0xff00000000; cout << n; }
[14:28:35] <geordi> warning: unsigned conversion from 'long int' to 'uint32_t' {aka 'unsigned int'} changes value from '1095216660480' to '0'
[14:28:50] <Raziel> wait did I put in extra bytes
[14:28:52] <Raziel> yes, I sure did
[14:29:02] <Raziel> { uint32_t n = 0xff000000; cout << n; }
[14:29:03] <geordi> 4278190080
[14:29:05] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:8ccd:8ba0:340:4246) (Quit: Quit)
[14:29:08] <Raziel> { int n = 0xff000000; cout << n; }
[14:29:09] <geordi> -16777216
[14:31:56] *** gentooclimax is now known as climax
[14:37:46] *** Quits: jokoon2 (~eio@2a01:e0a:542:e160:d454:3069:cbea:472a) (Quit: Leaving)
[14:42:31] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[14:44:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:45:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:45:00] *** ChanServ sets mode: +v npaperbot
[14:46:37] *** Joins: kaph_ (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[14:47:03] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[14:47:47] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Ping timeout: 246 seconds)
[14:48:56] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[14:52:31] *** climax is now known as gentooclimax
[14:55:08] *** Quits: kaph_ (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Ping timeout: 246 seconds)
[15:02:08] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[15:05:17] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[15:07:34] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[15:13:15] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 260 seconds)
[15:13:20] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[15:15:26] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[15:15:40] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[15:17:52] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[15:18:25] *** Joins: kenantu (~kenanmara@user/kenanmarasli)
[15:30:42] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[15:32:44] *** Joins: toulene (~toulene@user/toulene)
[15:33:53] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[15:34:08] <smallville7123_> Raziel: :)
[15:36:24] *** Joins: toulene (~toulene@user/toulene)
[15:39:36] <Raziel> smallville7123_, but yeah, no, you don't have to cast, you just have to know what you're trying to get/do
[15:41:48] *** Joins: proller (~p@80.240.216.69)
[15:43:03] *** Quits: paul424 (~tom@ip-5-172-235-219.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:47:15] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[15:52:35] *** Joins: FergusL (~freenode4@user/fergusl)
[15:53:59] <FergusL> Hello. Slightly side topic but using pybind11 how do I properly bind a C++ namespace variable to a module object using .attr() or another call? I've opened an issue about it here https://github.com/RosettaCommons/binder/issues/193#issuecomment-1086749655
[15:54:36] <FergusL> Sorry for crossposting from #python but I'd gladly find a place on IRC where I can find some help directly
[15:55:00] <FergusL> and have already made a few tries asking about that on the python channel hehe
[15:59:32] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:59:51] *** Joins: hvitol (~jon@218-145-17-89.fiber.hringdu.is)
[16:03:04] *** Quits: Inline (~Inline@p2e5790e6.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:06:52] <smallville7123_> how about this then? https://gist.github.com/mgood7123/ff65c9fe8552e4a82ff7dadea6d630a0
[16:07:10] <smallville7123_> would this be equivilant to the original C file https://elixir.bootlin.com/musl/v1.1.9/source/src/math/cbrt.c
[16:07:20] <smallville7123_> if converted to C++
[16:08:27] <smallville7123_> assuming sizeof double == sizeof ulong == sizeof long
[16:08:38] <smallville7123_> and sizeof uint == sizeof float
[16:10:56] <smallville7123_> and sizeof float == sizeof uint == sizeof int         *
[16:12:16] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[16:12:49] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[16:13:18] *** gentooclimax is now known as climax
[16:14:40] *** climax is now known as gentooclimax
[16:16:06] <TinoDidriksen> That should fail to compile because those reinterpret_cast are invalid.
[16:17:03] <TinoDidriksen> You need to go via address-of, cast to other T*, deref.
[16:17:35] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 252 seconds)
[16:17:58] <TinoDidriksen> { double x{1.3}; uint64_t y = reinterpret_cast<uint64_t>(x); cout << y; } // error
[16:17:59] <geordi> error: invalid cast from type 'double' to type 'uint64_t' {aka 'long unsigned int'}
[16:18:11] <TinoDidriksen> geordi, -w { double x{1.3}; uint64_t y = *reinterpret_cast<uint64_t*>(&x); cout << y; }
[16:18:12] <geordi> 4608533498688228557
[16:18:58] <xkoncek> whoever thought that being able to overload unary operator& was a good idea?
[16:19:08] <TinoDidriksen> But asides from that, all the math is the same.
[16:19:29] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 246 seconds)
[16:20:13] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[16:22:47] *** Quits: joji (~jojo@86.4.72.180) (Ping timeout: 260 seconds)
[16:25:05] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[16:28:37] *** Joins: PJBoy (~PJBoy@user/pjboy)
[16:29:00] <smallville7123_> what does this mean?         #if FLT_EVAL_METHOD > 1U && LDBL_MANT_DIG == 64
[16:29:06] <smallville7123_> in https://elixir.bootlin.com/musl/v1.1.9/source/src/math/hypot.c
[16:31:04] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[16:31:18] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[16:31:22] <TinoDidriksen> You can just Google those constants.
[16:31:51] *** Joins: Guest6951 (~Guest69@ip68-105-113-105.sd.sd.cox.net)
[16:32:09] <smallville7123_> ok
[16:32:46] <smallville7123_> " The following expression yields 1.0 (even though mathematically it should not) due to the limited number of mantissa digit"        oof
[16:33:16] *** Joins: proller (~p@2a02:6b8:b081:18::1:32)
[16:33:20] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 272 seconds)
[16:36:59] <smallville7123_> https://en.cppreference.com/w/c/types/limits/FLT_EVAL_METHOD  im not sure how i should understand this
[16:37:24] *** Joins: Raziel (~Raziel@user/raziel)
[16:38:20] <Shell> that's C
[16:38:27] <Shell> https://en.cppreference.com/w/cpp/types/climits/FLT_EVAL_METHOD is C++ :p
[16:38:45] <smallville7123_> still mostly the same tho :P
[16:39:56] *** Joins: Inline (~Inline@p200300cd473cee00b1553510cacfa527.dip0.t-ipconnect.de)
[16:48:11] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 246 seconds)
[16:48:51] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:48:59] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[16:50:15] *** Joins: metabulation (~wootehfoo@user/wootehfoot)
[16:50:26] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 272 seconds)
[16:50:28] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[16:50:44] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[16:51:28] *** Quits: kleiner (uid540109@id-540109.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:53:44] *** Joins: seifeslimene (~seifeslim@102.156.121.226)
[16:54:03] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[16:57:40] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[16:57:51] <lucie22> https://youtu.be/EeVN4yd4-5o
[16:58:12] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[16:58:35] *** Joins: chris64 (~chris@user/chris64)
[16:58:45] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[16:59:07] *** Joins: Snyp (~Snyp@49.207.197.152)
[17:03:23] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 260 seconds)
[17:03:27] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[17:03:31] *** Quits: Snyp (~Snyp@49.207.197.152) (Client Quit)
[17:04:33] *** Joins: Snyp (~Snyp@49.207.197.152)
[17:07:33] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[17:08:15] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[17:09:24] *** ChanServ sets mode: +o ville
[17:09:37] *** ville sets mode: +b *!*@host-109-88-209-116.dynamic.voo.be
[17:09:41] *** lucie22 was kicked by ville (lucie22)
[17:09:46] *** ville sets mode: -o ville
[17:10:51] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[17:13:24] <smallville7123_> "This is the number of base-FLT_RADIX digits in the floating point mantissa for the float data type" what exactly does this mean?
[17:16:12] <ville> what are you quoting?
[17:16:22] <cbreak> smallville7123_: presumably, the size of the mantissa
[17:16:54] <smallville7123_> what would that be assuming IEEE 754
[17:17:12] <smallville7123_> ville: https://www.gnu.org/software/libc/manual/html_node/Floating-Point-Parameters.html
[17:20:41] *** gentooclimax is now known as climax
[17:21:03] <ville> it is the number of digit places in the significand (mantissa) part of the representation
[17:21:34] <smallville7123_> would this be it?
[17:21:36] <smallville7123_> Type 	Exponent length 	Mantissa length
[17:21:38] <smallville7123_> float 	8 bits 	23 bits
[17:21:39] <smallville7123_> double 	11 bits 	52 bits
[17:23:18] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[17:24:22] <smallville7123_> would this be important or does it not matter?
[17:24:24] <smallville7123_> "The mantissa is stored as a binary fraction greater than or equal to 1 and less than 2. For types float and double, there is an implied leading 1 in the mantissa in the most-significant bit position, so the mantissas are actually 24 and 53 bits long, respectively, even though the most-significant bit is never stored in memory."
[17:25:06] <smallville7123_> like, does C and C++ do this as well?
[17:25:19] *** Quits: climax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[17:25:40] *** Joins: climax (~gentoocli@81-64-65-213.rev.numericable.fr)
[17:27:59] <smallville7123_> additionally is this also important?
[17:28:02] <smallville7123_> "Instead of the storage method just described, the floating-point package can store binary floating-point numbers as denormalized numbers. "Denormalized numbers" are nonzero floating-point numbers with reserved exponent values in which the most-significant bit of the mantissa is 0"
[17:31:06] <ville> c++ does not specify the floating point format used. it sets some minimum requirements but it doesn't explicitly specify the format
[17:31:18] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:31:47] <ville> ieee 754 would have FLT_MANT_DGT as 24
[17:33:11] <ville> err DIG
[17:34:50] <smallville7123_> and the other stuff ?
[17:35:31] <ville> the number of bits used by the ieee754 binary32 represetnation is one less than FLT_MANT_DIG because the leading it is implicitly encoded in the biased exponent
[17:35:48] <ville> err leading bit
[17:37:18] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[17:37:26] <ville> whether it's important or not depends. you don't have to know how a car works to drive around in a car, but if it breaks down then you it becomes important to know how it works
[17:37:51] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[17:38:19] <smallville7123_> C# specifies float as
[17:38:21] <smallville7123_> Floating-point numbers use the IEEE (Institute of Electrical and Electronics Engineers) format. Single-precision values with float type have 4 bytes, consisting of a sign bit, an 8-bit excess-127 binary exponent, and a 23-bit mantissa. The mantissa represents a number between 1.0 and 2.0. Since the high-order bit of the mantissa is always 1, it is not stored in the number.
[17:38:27] *** Quits: Snyp (~Snyp@49.207.197.152) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:38:31] <smallville7123_> and double as
[17:38:39] <Shell> smallville7123_: how about you explain what you're trying to do
[17:38:41] <ville> why are you telling us about c#?
[17:38:43] <smallville7123_> Double precision values with double type have 8 bytes. The format is similar to the float format except that it has an 11-bit excess-1023 exponent and a 52-bit mantissa, plus the implied high-order 1 bit.
[17:39:31] <Shell> ville: they're doing /something/ involving comparing floating-point handling in C++, C# and Java, but it's unclear what and it's resulted in tons of questions in these channels over the past couple of days.
[17:39:40] <smallville7123_> ville: cus im tryint to figure out how to correctly port this C code to C#
[17:39:51] <smallville7123_> https://elixir.bootlin.com/musl/v1.1.9/source/src/math/hypot.c and https://elixir.bootlin.com/musl/v1.1.9/source/src/math/hypotl.c
[17:40:07] <Shell> C isn't even C++
[17:40:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[17:41:05] <smallville7123_> ( hypotf.c does not contain any ifdef in it so i dont need to worry about getting it exactly correct)
[17:43:43] <Shell> smallville7123_: if the exact precision of floating point operations is important to your code, you're using floats wrong, no matter the language, frankly. for a variety of reasons, some to do with how computers work and some to do with history, the assumption of any code using floating point values is there's an error bar. you can compile the same code with two different compilers, or for two
[17:43:44] <Shell> different CPUs, and the result may be different. write your code, see if it's close enough.
[17:43:49] *** Quits: seifeslimene (~seifeslim@102.156.121.226) (Quit: Client closed)
[17:43:59] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 260 seconds)
[17:44:01] *** Joins: joji (~jojo@86.4.72.180)
[17:44:24] <smallville7123_> so far i have the following:
[17:44:25] <smallville7123_> C# FLT_EVAL_METHOD is -1 : the default precision is not known
[17:44:27] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[17:44:30] <Shell> "produces exactly the same bit-for-bit output" is unlikely to happen.
[17:44:33] <smallville7123_> C# FLT_RADIX is 2
[17:44:52] <smallville7123_> C# FLT_MANT_DIG is 24 and C# DBL_MANT_DIG is 53
[17:45:04] <ville> even at runtime you can get different results from the same function between 2 calls
[17:45:40] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[17:45:44] *** Joins: seifeslimene (~seifeslim@102.156.121.226)
[17:46:09] <ville> the floating point environment is runtime configurable and so anything you do inbetween the two calls can reconfigure it to something that changes your results
[17:46:13] *** Quits: seifeslimene (~seifeslim@102.156.121.226) (Write error: Broken pipe)
[17:47:06] <smallville7123_> still, i need to make sure the correct defines are selected
[17:47:26] <ville> most notably in the olden days this would happen with directx. you'd test your math in some separate testprogram that didn't load directx and all went well, and then in your main program you'd load directx and get "bugs"
[17:48:16] <smallville7123_> for example, in https://elixir.bootlin.com/musl/v1.1.9/source/src/math/hypotl.c
[17:49:15] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:50:33] *** Quits: Guest6951 (~Guest69@ip68-105-113-105.sd.sd.cox.net) (Quit: Connection closed)
[17:53:55] *** Quits: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[17:58:53] *** Joins: chris64 (~chris@user/chris64)
[18:02:11] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[18:05:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:05:18] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 260 seconds)
[18:14:32] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[18:15:48] *** Joins: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:20:36] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e)
[18:28:43] <smallville7123_> "#if FLT_EVAL_METHOD > 1U && LDBL_MANT_DIG == 64" would be false is EVAL_METHOD is -1, right?
[18:30:04] *** Joins: stefanos82 (~stefanos8@31-14-125.netrun.cytanet.com.cy)
[18:41:12] <PJBoy> probably not?
[18:42:34] <PJBoy> geordi -w << (-1 > 1U)
[18:42:34] <geordi> true
[18:44:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:45:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:45:01] *** ChanServ sets mode: +v npaperbot
[18:46:05] <smallville7123_> oh
[18:47:43] <smallville7123_> can a union contain an enum
[18:53:08] *** Quits: ymwm (~yingmanwu@240e:37a:40e5:1400:b1c4:b55c:61e4:2b2d) (Ping timeout: 260 seconds)
[18:53:48] *** Joins: ymwm (~yingmanwu@240e:37a:40e5:1400:b1c4:b55c:61e4:2b2d)
[18:59:59] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e) (Ping timeout: 256 seconds)
[19:05:19] *** Quits: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[19:05:58] *** Quits: joji (~jojo@86.4.72.180) (Ping timeout: 272 seconds)
[19:13:19] *** Quits: stefanos82 (~stefanos8@31-14-125.netrun.cytanet.com.cy) (Quit: Leaving)
[19:16:04] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[19:16:37] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[19:17:46] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[19:17:47] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 256 seconds)
[19:17:59] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[19:20:21] *** Joins: xkuru (~xkuru@user/xkuru)
[19:20:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:23:01] *** Quits: chris64 (~chris@user/chris64) (Ping timeout: 240 seconds)
[19:24:44] *** Joins: callq (~callq@157.41.180.224)
[19:24:56] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[19:29:43] *** Joins: RoKenn (~RoKenn@2001:a61:35f0:c501:acbc:8446:4566:9d5d)
[19:29:43] *** Quits: RoKenn (~RoKenn@2001:a61:35f0:c501:acbc:8446:4566:9d5d) (Changing host)
[19:29:43] *** Joins: RoKenn (~RoKenn@user/rokenn)
[19:34:32] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[19:34:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:38:23] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[19:38:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:39:45] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:829c:c5ed:b007:1abf)
[19:40:21] *** Joins: paul424 (~tom@ip-5-172-234-229.multi.internet.cyfrowypolsat.pl)
[19:40:40] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[19:42:47] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[19:44:31] *** Joins: magla (~gelignite@55d411d7.access.ecotel.net)
[19:51:49] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[19:52:06] *** Quits: magla (~gelignite@55d411d7.access.ecotel.net) (Quit: Stay safe!)
[19:54:51] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[19:55:28] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:56:19] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:56:42] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[20:05:06] *** Joins: meator (~meator@user/meator)
[20:05:07] *** Joins: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it)
[20:05:31] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[20:07:10] <LordKalma> !rq
[20:07:10] <nolyc> LordKalma: <PJBoy> man idk what clang smokes, but if I ever become a compiler, I want it
[20:07:36] *** Parts: meator (~meator@user/meator) ()
[20:11:12] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 272 seconds)
[20:12:06] *** Joins: joji (~jojo@86.4.72.180)
[20:16:33] <LordKalma> Just noticed that _mm256_load_ps (load AVX with 8 floats aligned) has the exact same latency and throughput than _mm256_loadu_ps (u for unaligned)
[20:16:37] <LordKalma> x86 doesn't give a fuck
[20:18:08] *** Quits: callq (~callq@157.41.180.224) (Quit: callq)
[20:18:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:20:44] *** Quits: metabulation (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[20:22:20] <ville> you think that the underflow/overflow checks would make unsigned slower?
[20:22:38] <ville> well "checks"
[20:23:28] <ville> err nevermind. misread unaligned as unsigned
[20:23:36] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:25:44] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[20:25:47] *** Joins: callq (~callq@2409:4062:216:8478:cc3f:7905:ee57:fa0f)
[20:26:05] *** Joins: RoKenn (~RoKenn@2001:a61:35f0:c501:acbc:8446:4566:9d5d)
[20:26:05] *** Quits: RoKenn (~RoKenn@2001:a61:35f0:c501:acbc:8446:4566:9d5d) (Changing host)
[20:26:05] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:48:23] *** Quits: filename (~kilitary@188.242.105.134) (Read error: Connection reset by peer)
[20:50:25] *** Joins: filename (~kilitary@188.242.105.134)
[20:51:10] *** Quits: callq (~callq@2409:4062:216:8478:cc3f:7905:ee57:fa0f) (Quit: callq)
[21:04:33] *** Quits: filename (~kilitary@188.242.105.134) (Remote host closed the connection)
[21:05:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[21:06:44] *** Joins: markong (~kvirc@213.146.188.203)
[21:08:43] *** Joins: magla (~gelignite@55d411d7.access.ecotel.net)
[21:17:42] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[21:23:48] *** Quits: ymwm (~yingmanwu@240e:37a:40e5:1400:b1c4:b55c:61e4:2b2d) (Ping timeout: 240 seconds)
[21:24:54] *** Joins: vnf (~vnf@85.174.194.51)
[21:25:51] *** Quits: vnf (~vnf@85.174.194.51) (Read error: Connection reset by peer)
[21:26:07] *** Joins: vnf (~vnf@85.174.194.51)
[21:26:45] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[21:27:59] *** Joins: Snyp (~Snyp@49.207.197.152)
[21:31:08] *** Quits: paul424 (~tom@ip-5-172-234-229.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[21:36:56] *** Joins: ymwm (~yingmanwu@240e:37a:40e5:1400:b1c4:b55c:61e4:2b2d)
[21:39:52] *** Quits: joji (~jojo@86.4.72.180) (Ping timeout: 272 seconds)
[21:44:18] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 272 seconds)
[21:45:54] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[21:46:26] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[21:46:45] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:49:06] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[21:50:46] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 245 seconds)
[21:50:56] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 246 seconds)
[21:55:48] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[22:02:41] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[22:02:59] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[22:04:02] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:10:16] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[22:10:33] *** Joins: filename (~kilitary@188.242.105.134)
[22:12:00] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[22:12:44] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[22:16:07] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[22:16:28] *** Joins: RoKenn (~RoKenn@2001:a61:35f0:c501:acbc:8446:4566:9d5d)
[22:16:29] *** Quits: RoKenn (~RoKenn@2001:a61:35f0:c501:acbc:8446:4566:9d5d) (Changing host)
[22:16:29] *** Joins: RoKenn (~RoKenn@user/rokenn)
[22:19:41] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 256 seconds)
[22:21:39] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[22:28:57] *** Joins: kaph (~kaph@151.47.165.211)
[22:31:58] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[22:33:40] *** Joins: paul424 (~tom@ip-5-172-239-254.multi.internet.cyfrowypolsat.pl)
[22:34:11] *** Quits: DrMax (~DrMax@node-1w7jra94757g1k807zjj0a1do.ipv6.telus.net) (Ping timeout: 256 seconds)
[22:36:35] <hnOsmium0001[m]> I can't tell if this is an april fools joke or not https://github.com/PetrFlajsingr/pf_imgui
[22:36:52] <hnOsmium0001[m]> why in the world would one want to wrap dear imgui with some kind of retained mode wrapper?
[22:37:10] <hnOsmium0001[m]> and get the worst of both worlds, verbose setup code and high resource consumption
[22:37:33] *** Quits: kaph (~kaph@151.47.165.211) (Read error: Connection reset by peer)
[22:38:46] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[22:38:56] *** Joins: kaph (~kaph@151.47.165.211)
[22:39:10] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[22:39:47] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[22:40:43] *** Quits: Snyp (~Snyp@49.207.197.152) (Quit: Textual IRC Client: www.textualapp.com)
[22:41:49] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:43:15] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd)
[22:44:31] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[22:44:52] <ville> which property you propose comes from which?
[22:44:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:45:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:45:01] *** ChanServ sets mode: +v npaperbot
[22:45:29] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[22:45:42] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[22:47:30] *** Joins: DrMax (~DrMax@node-1w7jra94757g0uifw4n8b3efv.ipv6.telus.net)
[22:48:57] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[22:49:08] *** Quits: ymwm (~yingmanwu@240e:37a:40e5:1400:b1c4:b55c:61e4:2b2d) (Remote host closed the connection)
[22:49:24] *** Joins: ymwm (~yingmanwu@240e:37a:40e5:1400:b1c4:b55c:61e4:2b2d)
[22:57:12] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[23:12:10] *** Quits: foul_owl (~kerry@23.82.193.88) (Ping timeout: 260 seconds)
[23:13:09] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[23:13:53] *** Quits: ymwm (~yingmanwu@240e:37a:40e5:1400:b1c4:b55c:61e4:2b2d) (Ping timeout: 260 seconds)
[23:15:30] *** Quits: climax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 272 seconds)
[23:17:23] *** Joins: ymwm (~yingmanwu@240e:37a:40e5:1400:b1c4:b55c:61e4:2b2d)
[23:17:56] *** Quits: kaph (~kaph@151.47.165.211) (Read error: Connection reset by peer)
[23:18:07] *** Joins: foul_owl (~kerry@23.82.193.88)
[23:22:51] *** Quits: ymwm (~yingmanwu@240e:37a:40e5:1400:b1c4:b55c:61e4:2b2d) (Remote host closed the connection)
[23:23:33] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[23:24:13] *** Joins: kaph (~kaph@151.35.76.11)
[23:24:45] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[23:27:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:29:57] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[23:31:49] *** Joins: kaph (~kaph@151.35.76.11)
[23:40:05] <xkoncek> why did c++ containers introduce the idea of "deep const" when it isn't applied to C pointers?
[23:40:37] <xkoncek> const pointer vs const vector
[23:41:03] <ville> this gets cv qualified
[23:41:04] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[23:41:37] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[23:41:45] *** Quits: vnf (~vnf@85.174.194.51) (Quit: Leaving)
[23:42:54] <xkoncek> they should have rather copy the way it is done with pointers so that you could cast a vector of T to a vector of const T (cast a reference to it)
[23:43:22] <xkoncek> *make the language rules so that it would be possible^
[23:43:32] <ville> oh you mean why std::vector<int const> is different from std::vector<int>?
[23:44:10] <xkoncek> not primarily, this would be a way to achieve the same behaviour tho
[23:44:17] <ville> rather than why std::vector<int> const xs; xs[0] = -1;?
[23:44:44] <ville> i am not sure what const you refer to
[23:44:45] <xkoncek> i am complaining about how you cannot modify the elements of containers accessed thru const reference of a vector
[23:45:03] <ville> right. you can't know if it's const object tobegin with
[23:45:06] <xkoncek> you know: const T& operator[] const
[23:45:14] <ville> so ok the latter const then
[23:45:35] <xkoncek> i guess we have to look at how C arrays work with const
[23:46:01] <xkoncek> they are decayed to pointers anyway in C
[23:46:07] <ville> std::vector<int, readonly_allocator> const xs = {0, 1, 2}; xs[0] = -1;
[23:47:20] <xkoncek> so, i was thinking about const again and i thought that the only useful implication of that "deep constness" is thread safety
[23:47:52] <xkoncek> except not because you can still do write operations with const pointers to non-const objects
[23:48:01] <ville> certainly you'd then have to forbid sbo: std::string const x = "short";
[23:48:23] <ville> what do you mean by "const pointer" exactly?
[23:48:36] <xkoncek> std::vector<int*>
[23:48:40] <ville> int const* p or: int* const p; or
[23:49:26] *** Joins: climax (~gentoocli@81-64-65-213.rev.numericable.fr)
[23:49:28] <xkoncek> if you pass a const reference to that vector somewhere you can still very easily modify values of the pointed-to ints
[23:49:53] <ville> sure
[23:49:54] <xkoncek> so i see this as an inconsistency
[23:50:06] <ville> why? the ints aren't in the vector
[23:50:11] <xkoncek> (not talking about "mutable" keyword)
[23:50:26] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 260 seconds)
[23:50:49] <xkoncek> any container is very similar to a pointer in nature
[23:51:05] <xkoncek> but constness behaves differently
[23:51:10] <ville> umm
[23:51:21] <ville> i dont get what you're on abot
[23:51:24] <xkoncek> const vector implies nonmodifiable elements
[23:51:30] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[23:51:41] <xkoncek> const pointer does not imply nonmodifiable pointed-to object
[23:52:18] <xkoncek> then: pointer to T is convertible to pointer to const T
[23:52:24] <xkoncek> containers are not
[23:52:48] <xkoncek> containers are deep const, pointers are shallow const
[23:53:08] <xkoncek> see my point?
[23:53:11] <ville> no
[23:53:11] <xkoncek> inconsistency
[23:53:39] <ville> std::vector<int> is conertible to std::vector<int const> and std::vector<int> const
[23:53:48] <ville> convertible
[23:54:06] <xkoncek> "convertible" as in, you can create a new object
[23:54:23] <ville> pointers are new objects just the same
[23:54:46] <ville> you go from int* to int const* or int *const you made a new object
[23:55:32] <xkoncek> {vector<int> asd; static_cast<vector<const int>&>(asd);}
[23:55:32] <geordi> error: static assertion failed: vector must have a non-const, non-volatile value_type
[23:55:47] <xkoncek> {vector<int> asd; static_cast<const vector<const int>&>(asd);}
[23:55:47] <geordi> Same error.
[23:56:10] <ville> oh right vector wants movesomething something. so forget the vetor<int const> one
[23:57:15] *** Quits: climax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[23:57:49] <xkoncek> i see, it is weird
[23:58:08] <xkoncek> and i don't know if it could be "more consistent" with C
[23:59:29] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[23:59:51] <xkoncek> vector is a complex object that manages the lifetimes of its elements, pointers are just pointers
[23:59:55] <ville> thought the requirements were supposed to be operation-based these days on the operations you actually invoke?
[23:59:56] *** Quits: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it) (Remote host closed the connection)
