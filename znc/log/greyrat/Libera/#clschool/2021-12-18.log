[00:15:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:20:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[00:42:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[00:43:43] *** Quits: rotateq (~user@185.66.193.48) (Ping timeout: 256 seconds)
[01:26:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 260 seconds)
[01:26:51] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:50:01] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:00:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:26:32] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::103e) (Remote host closed the connection)
[03:17:44] *** Joins: Jing (~hedgehog@2604:a840:3::103e)
[04:01:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:58:46] *** Quits: paule32 (~paule32@user/paule32) (Read error: Connection reset by peer)
[05:05:04] *** Joins: Oladon (~olad@98.43.81.226)
[05:07:30] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[05:32:25] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[05:32:40] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[05:34:59] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 256 seconds)
[05:35:32] <kagevf> pjb: are (deftype list () `(or null cons)) and (deftype list () `(listp)) equivalent?
[05:36:05] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Client Quit)
[05:36:20] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[05:40:41] <pjb> kagevf: depends on whether (listp) is defined as a type equivalent to (or null cons).
[05:41:00] <pjb> kagevf: note the use of SATISFIES in my other example.
[05:46:34] <kagevf> pjb: ok, so in order to use (deftype list () `(listp)), we would need to define (deftype listp () `(or null cons)) ... would that work?
[05:46:59] <kagevf> *define previously, before (deftype list)
[05:51:37] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[05:55:19] <pjb> kagevf: assuming listp is CL:LISTP, (deftype list () `(listp)) is not conforming.
[05:55:40] <pjb> kagevf: because you are not allowed to define CL:LISTP as a type. (the implementation may already have done that).
[05:56:23] <pjb> kagevf: otherwise, if you have a type predicate, such as listp, you can define the type with (deftype list () `(satisfies listp))
[05:57:19] <pjb> But of course, since the clhs specifies listp in function of the type list, you would still have a recursive here.
[05:58:50] <pjb> (deftype kagevg-lisp:listp () `(or null cons))  (deftype kagevg-lisp:list () `(kagevg-lisp:listp))  ; would work. But it would be strange to name a type LISTP, since this looks rather like a predicate.
[06:28:28] *** Quits: Oladon (~olad@98.43.81.226) (Read error: Connection reset by peer)
[06:54:56] *** Quits: sts-q (~sts-q@212.53.219.231) (Ping timeout: 245 seconds)
[07:08:46] <rotateq> and when taking the first chapter in the feynman lectures apart which shows what is the most important sentence if all other knowledge would be gone, for us it could be "Everything that is not a CONS is an ATOM." :)
[07:09:12] <rotateq> but you can roast me on that, it's more metaphorically again
[07:11:05] *** Joins: sts-q (~sts-q@91.200.108.187)
[07:28:03] <kagevf> pjb: I see, that makes sense ... thank you for the explanation
[07:31:07] <beach> Good morning everyone! 
[07:43:59] <rotateq> Hope you slept well, beach.
[07:46:58] <beach> Yes, thank you.
[07:47:03] <beach> You too, I hope.
[07:47:37] *** Quits: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[08:36:57] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[08:39:34] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[08:52:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:48:46] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[09:58:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:40:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:59:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:59:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Read error: Connection reset by peer)
[12:10:51] *** Quits: Jing (~hedgehog@2604:a840:3::103e) (Remote host closed the connection)
[12:11:28] *** Joins: Jing (~hedgehog@125.105.142.62)
[12:13:41] *** Joins: paule32 (~paule32@user/paule32)
[12:27:01] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[12:30:42] *** Joins: shka (~herr@109.231.0.226)
[12:31:51] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Client Quit)
[12:32:10] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[12:38:28] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[12:56:11] *** Joins: Jing_ (~hedgehog@2604:a840:3::103e)
[12:57:32] *** Quits: Jing (~hedgehog@125.105.142.62) (Read error: Connection reset by peer)
[13:12:17] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[13:54:41] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[13:58:58] *** Joins: makomo (~makomo@user/makomo)
[14:03:33] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[14:47:43] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[15:45:58] *** Joins: rito_ (~rito_gh@45.112.243.172)
[16:09:06] *** Joins: treflip (~user@user/treflip)
[16:16:55] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 250 seconds)
[16:31:53] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:31:58] *** Joins: random-nick (~random-ni@87.116.167.125)
[17:15:40] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[18:07:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:08:55] <lisp123> It says on the CLiki Page: "with-foo" -> create a dynamic context with a foo. If I want to write with-food, would it be something like this? (defmacro with-foo (&body body) (let ((*foo* 'something)) (declare (special *foo*)) ,@body))
[18:09:33] <lisp123> Or does it mean simply (defmacro with-foo (&body body) (declare (special *foo*)) ,@body))
[18:09:56] <lisp123> (sorry for the minor mistakes, but just typing it fast to give the point of these examples)
[18:11:27] <beach> It usually means that the macro takes the name of a lexical variable.
[18:12:19] <beach> And it usually means that something is destroyed upon exit, so there is usually an UNWIND-PROTECT in there.
[18:13:00] <beach> Look at WITH-OUTPUT-TO-STRING for instance.
[18:13:13] <beach> A stream is created and closed upon exit.
[18:14:23] <lisp123> beach: Got it, thanks. That example helps
[18:15:31] <beach> Pleasure. 
[18:25:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:46:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:57:30] <pjb> lisp123: what cliki page/
[18:57:31] <pjb> ?
[18:57:51] <lisp123> pjb: https://www.cliki.net/naming+conventions
[19:00:00] <pjb> The notion of dynamic context is not necessarily implemented with a dynamic binding.  It can often be, but it could be implemented otherwise.
[19:00:42] <pjb> lisp123: dynamic = time ie. execution time ; lexical = space ie. the program source.
[19:01:34] <pjb> lisp123: so you just could have: (defmacro with-foo (&body body) `(unwind-protect (progn (acquire-foo) ,@body) (release-foo)))
[19:03:15] <lisp123> pjb: Thanks, when you put it that way, its not too hard to write. What did you mean by "it could be implemented otherwise."? The only other alternative I sometimes use is having a leixcal scope for a variable but then put only macros within that scope so that they have access to those variables
[19:03:18] <pjb> lisp123: a macro such as with-open-file or with-output-to-string, will indeed take a variable name.  The macro doesn't assume whether that variable name has been declared special or not.  So it will establish a binding that can be dynamic or lexical.  This is not this aspect that is qualified in the cliki page..  But the fact that for the time during which the macro executes, there is a file that is open, and the stream bound to that variable.
[19:03:43] <pjb> lisp123: otherwise = for example unwind-protect as in my example.
[19:04:36] <lisp123> pjb: Got it, thanks
[19:04:46] <pjb> lisp123: again, with-foo = we have a foo available dynamically = from the start time of the execution of the macro to then end time of the execution of the macro, there will be some foo available.
[19:05:12] <pjb> lisp123: notably: this foo will be available even in functions called from the body (functions that are outside of the lexical scope).
[19:07:30] <lisp123> Would that not require the variable to be declared special?
[19:07:48] <pjb> Not at all.
[19:08:20] <lisp123> ah I got it -> because the body is within the scope of the macro yes?
[19:08:21] <pjb> Notably, the foo in question could be outside of the current process. It could be a ressource on a server.
[19:09:14] <pjb> lisp123: the body will be within some lexical scope defined by the macro, indeed, but foremost, it will be used during the execution of the macro (within its dynamic scope).
[19:09:50] <pjb> For example, the macro could be: (defmacro with-foo (&body body) `(call-with-foo (lambda (the-foo) ,@body)))
[19:10:03] <pjb> in that case, the body won't be in the lexical scope of the call-with-foo function.
[19:10:58] <lisp123> That makes sense. So let's say it was a resource on the server, outside of the current process, -> would it not not need to be named to be used?
[19:12:33] <lisp123> So in the ,@body, how would one reference the server I guess
[19:12:41] <lisp123> In your last example
[19:13:37] <pjb> of course, if it's needed, the macro will take more parameters, possibly variable names to let the body reference the resource.
[19:14:00] <pjb> but if the resource is sufficiently unique, it could be implicit.  There could be an API to access it.
[19:14:35] <lisp123> Got it! That makes sense. Thanks for clearing that up re 'with-foo' macros and around acquiring / releasing resources
[19:15:25] <pjb> For example: (with-daylight (print 'hello)) --> (progn (when (< (compute-sunset) (get-universal-time)) (sleep (- (compute-sunrise) (get-universal-time)))) (print 'hello))
[19:15:58] <pjb> global resource, implicitely accessed, and purely dynamic (temporal).
[19:16:04] <pjb> Run codes only during daylight…
[19:16:53] <lisp123> Nice! Thanks, makes perfect sense. I really never thought of dynamic context like that, but it is definitely a very useful technique when put that way
[19:25:04] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:43:52] *** Joins: lisp123_ (~lisp123@45.86.202.12)
[19:47:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[20:05:37] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:34:54] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[20:52:13] *** Quits: lisp123_ (~lisp123@45.86.202.12) (Remote host closed the connection)
[20:53:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[20:53:46] *** Joins: random-nick (~random-ni@87.116.181.93)
[21:53:37] *** Joins: lisp123 (~lisp123@45.86.202.12)
[21:57:57] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 240 seconds)
[22:12:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:29:09] *** Quits: treflip (~user@user/treflip) (Quit: good night ✨)
[22:41:11] *** Joins: Josh_2 (~user@37.25.47.130)
[22:53:55] *** Joins: lisp123 (~lisp123@45.86.202.12)
[22:59:10] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 260 seconds)
[23:06:48] *** Quits: rito_ (~rito_gh@45.112.243.172) (Quit: Leaving)
[23:08:28] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[23:44:09] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[23:55:28] *** Joins: lisp123 (~lisp123@45.86.202.12)
[23:59:57] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 240 seconds)
