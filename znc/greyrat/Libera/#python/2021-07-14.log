[00:00:09] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[00:00:25] *** Quits: orbatos[m] (~orbatos@user/orbatos) (Write error: Connection reset by peer)
[00:00:25] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Read error: Connection reset by peer)
[00:00:25] *** Quits: bgardner[m] (~bgardner@2001:470:69fc:105::8a8) (Write error: Connection reset by peer)
[00:00:26] *** Quits: binarymutt[m] (~binarymut@user/binarymutt) (Read error: Connection reset by peer)
[00:00:26] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (Read error: Connection reset by peer)
[00:00:26] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Read error: Connection reset by peer)
[00:00:26] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Read error: Connection reset by peer)
[00:00:26] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Read error: Connection reset by peer)
[00:00:26] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Read error: Connection reset by peer)
[00:00:27] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Read error: Connection reset by peer)
[00:00:28] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (Read error: Connection reset by peer)
[00:00:28] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (Read error: Connection reset by peer)
[00:00:28] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (Read error: Connection reset by peer)
[00:00:28] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Read error: Connection reset by peer)
[00:00:28] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Read error: Connection reset by peer)
[00:00:28] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Read error: Connection reset by peer)
[00:00:29] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (Read error: Connection reset by peer)
[00:00:29] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (Write error: Connection reset by peer)
[00:00:29] *** Quits: jwon (~jwon@user/jwon) (Read error: Connection reset by peer)
[00:00:29] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (Write error: Connection reset by peer)
[00:00:30] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Write error: Connection reset by peer)
[00:00:30] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (Read error: Connection reset by peer)
[00:00:32] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[00:00:35] <ChrisWarrick> better than the spammy "+1" or "me too" comments
[00:00:57] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[00:01:30] <SnoopJ> yea, I can see the case for +1 I suppose
[00:01:42] <SpeakerToMeat> Hello all. Typer question for anyone using it... if I have a single typer.Option with short code "-a" only and int type, can I add a different Option with short coder "-A" ? or will this cause a conflict with the first one?
[00:01:47] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 245 seconds)
[00:01:56] <grym> SpeakerToMeat: that should be fine
[00:01:56] <SnoopJ> and once the door is open a crack, people are just gonna want it all? strange questions
[00:02:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[00:02:06] <NeilRG> ChrisWarrick, yup, and the hooray for thanks
[00:02:09] *** Quits: POGtastic (~mike@2601:1c0:6000:fe1:2b6f:5c59:94f6:fb2f) (Quit: WeeChat 3.0.1)
[00:02:15] <grym>  :tada:
[00:02:40] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 258 seconds)
[00:03:08] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:03:55] *** Joins: Narrat (~omnius@p200300df5f0b10aa06ea56fffe2e7cdc.dip0.t-ipconnect.de)
[00:04:05] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[00:04:28] *** Joins: waynew (~wayne@user/waynew)
[00:04:54] *** Quits: gmcastil (~gmcastil@50-206-38-118-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[00:06:09] *** Joins: Guest6174 (~mogad0n@user/mogad0n)
[00:08:01] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[00:08:40] <desophos> hi, i'm struggling with changing the behavior of JSONEncoder. i'm reading some floats from a text file and i want to preserve their exact formatting/precision when i dump them to JSON. i'm using the float_string class shown here: https://gist.github.com/odony/5269a695545902e7e23e761e20a9ec8c. however, if it inherits from float, JSONEncoder seems to convert it to float, mangling its precision. if it doesn't inherit float, then i
[00:08:40] <desophos> can pass `default=repr` to JSONEncoder to get the exact representation, but i don't know how to get JSONEncoder to dump it as a JSON number (without "") instead of a string (with ""). how can i accomplish this? thanks for your time!
[00:10:47] <raek> jamiejackson: one thing you can do is to add the table name to a marker (@pytest.mark.my_marker("table_name")) and then let the fixture look up the marker arguments for my_marker
[00:10:52] *** Joins: raxor2k (~raxor2k@78.158.254.246)
[00:10:56] <raxor2k> bjs: be prepared for later
[00:11:00] <desophos> oops, i meant pass `default=repr` to json.dump
[00:11:02] <raxor2k> I have some questions
[00:11:22] <raek> jamiejackson: I've struggeled with similar problems and I don't know a perfect solution
[00:11:53] *** Quits: aw1 (~aw1@203.171.246.77) (Remote host closed the connection)
[00:11:57] <raek> (the delete_table fixture needs to have a dependency on the "request" fixture to look up the marker arg)
[00:12:17] <ChrisWarrick> raxor2k: that sounds a bit rude, don’t forget people in IRC are volunteers
[00:13:49] *** Joins: nbao (~nbao@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[00:13:59] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:14:36] *** Quits: stoneware (~stoneware@user/stoneware) (Ping timeout: 272 seconds)
[00:15:07] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 265 seconds)
[00:15:21] <SnoopJ> PyTorch apparently annotates torch.nn.Module's __getattr__() with a return-type of `Union[Tensor, Module]`, but I'm stashing values incompatible with that annotation. Is `bar = net.foo()  # type:ignore` my best bet here?
[00:15:40] <SnoopJ> (the common error is `"Tensor" not callable`)
[00:16:00] *** Joins: Kvothe (~weechat@user/elodin)
[00:16:55] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[00:17:37] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 245 seconds)
[00:18:00] <raxor2k> Chriswarrick: what does the term volunteers mean
[00:18:18] *** Joins: Pickchea (~private@user/pickchea)
[00:18:28] <ChrisWarrick> raxor2k: https://en.wiktionary.org/wiki/volunteer
[00:18:37] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[00:19:15] <grym> irc is an avocation for most/all people here
[00:19:16] <SnoopJ> raxor2k, "not paid"
[00:22:10] *** Joins: nyah (~nyah@90.221.186.180)
[00:22:56] <nubonix_> anyone able to help me with a rpyc sslauthentication?
[00:23:21] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[00:23:52] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[00:24:01] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[00:26:32] *** Leonarbro_ is now known as Leonarbro
[00:27:14] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[00:28:22] *** Joins: ircuser70 (~ircuser@190.236.211.35)
[00:28:32] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c:146a:5c4b:109:2ce4)
[00:28:34] *** Quits: ras_manny (~ras_manny@196.24.136.255) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:28:34] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[00:30:08] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[00:30:18] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 276 seconds)
[00:30:57] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 245 seconds)
[00:31:08] *** Joins: pnoud (~pnoud@user/pnoud)
[00:32:50] *** Quits: rendar (~rendar@user/rendar) ()
[00:35:38] *** Quits: raxor2k (~raxor2k@78.158.254.246) ()
[00:35:40] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[00:36:07] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[00:36:10] *** Quits: julia (~quassel@user/julia) (Ping timeout: 240 seconds)
[00:38:47] *** Parts: furrykef (~furrykef@ip68-229-199-137.ok.ok.cox.net) (Leaving)
[00:39:52] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:40:50] *** Quits: cman (~Cody@2603-9000-d104-8465-cda2-46d8-8c3a-d97d.inf6.spectrum.com) (Ping timeout: 255 seconds)
[00:41:27] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[00:42:22] *** Joins: cman (~Cody@2603-9000-d104-8465-61fd-e911-4f58-6219.inf6.spectrum.com)
[00:45:08] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[00:45:24] *** Joins: OPK (~OPK@user/opk)
[00:47:18] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[00:49:07] *** Quits: Guddu (~Guddu@171.79.58.196) (Quit: Leaving)
[00:52:16] *** Joins: greedom (~greedom@mue-88-130-54-088.dsl.tropolys.de)
[00:53:52] *** Quits: y1n (~y1n@84-115-65-72.wifi.dynamic.surfer.at) (Ping timeout: 245 seconds)
[00:54:16] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:54:29] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[00:54:32] *** Joins: dre (~dre@2001:8003:c932:c301:b299:b352:c4c4:74a1)
[00:54:34] <nedbat> anyone know what FIPS this issue is referring to?  https://github.com/nedbat/coveragepy/issues/1189
[00:54:42] *** Quits: greedom (~greedom@mue-88-130-54-088.dsl.tropolys.de) (Remote host closed the connection)
[00:54:45] *** Joins: y1n (~y1n@84-115-65-72.wifi.dynamic.surfer.at)
[00:57:02] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 272 seconds)
[00:57:03] *** Joins: kor1 (~kor1@user/kor1)
[00:57:06] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2f4b) (Quit: Konversation terminated!)
[00:57:47] <jabberwock> MD5 isn't FIPS compliant, so I would expect that across the board
[00:58:09] *** Joins: todda7 (~torstein@2a02:587:3260:9800:5001:8f86:3f65:c60a)
[00:58:39] *** Quits: magla (~gelignite@55d4dbb8.access.ecotel.net) (Ping timeout: 255 seconds)
[00:58:45] <nedbat> jabberwock: but what is it that prevents it? What does it mean to enable FIPS?
[00:59:09] <programmerq> FIPS is the federal crypto standard. basically it's a blessed set of algorithms that the us government wants to be used.
[00:59:36] <jabberwock> nedbat: A common device that uses FIPS is a yubikey
[00:59:39] <programmerq> so fips compliant just means not using any non-approved algorithms. I've worked for two companies where we've had to publish separate fips compliant binaries of our product.
[00:59:42] *** Quits: grantini (~kluskam@037008230115.dynamic-3-poz-k-1-2-0.vectranet.pl) (Ping timeout: 245 seconds)
[01:00:02] <nedbat> programmerq: i know of FIPS as a standard. I don't know of it as something that can be enabled, and then stop the stdlib from working.
[01:00:02] <jabberwock> programmerq: ugh
[01:00:19] <jabberwock> nedbat: I think "enabled" is a bit of a misnomer for something more generic
[01:00:33] <nedbat> jabberwock: well, something is clearly in the code there
[01:00:53] <jabberwock> I take it as "we're FIPS compliant. Now we can't use MD5"
[01:01:05] *** Quits: p-i- (~Ohmu@node-i5m.pool-118-173.dynamic.totinternet.net) (Remote host closed the connection)
[01:01:30] <jabberwock> This is the "easy for me to say thing": MD5 is EOL in terms of privacy. It shouldn't be used for sensitive data
[01:01:30] <nedbat> jabberwock: but you see the stack trace in that issue?
[01:01:49] <jabberwock> Ohh "unknown reasons"?
[01:01:54] <jabberwock> That's crappy
[01:02:08] <nedbat> jabberwock: i can easily change it (and it's not being used for privacy anyway), but I'm curious about the mechanism there.
[01:02:21] <graingert> jabberwock: Right afaik it means stuff tries to run md5 in the hardware accelerated no sidechannel mode, can't find it in openssl because you disabled it and then runs a version written in whatever scripting language you're using
[01:02:39] <jabberwock> that I don't know. I'm dirty so I'd start recursively grepping for "unknown reasons" in those libraries
[01:02:56] *** Joins: p-i- (~Ohmu@node-i5m.pool-118-173.dynamic.totinternet.net)
[01:02:59] <jabberwock> graingert: that makes sense
[01:03:07] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[01:03:51] *** Joins: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth)
[01:04:14] <jabberwock> s/dirty/simple
[01:05:01] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[01:05:46] <grym> rg --type all
[01:05:57] <jabberwock> what is this new tech that grym speaks of? :eyes:
[01:06:23] <jabberwock> ooo nice!
[01:06:25] <jabberwock> \o/
[01:06:29] <jabberwock> https://www.mankier.com/1/rg
[01:06:41] <grym> ripgrep's sliiiick
[01:07:03] <jabberwock> dude what RSS do you follow? I want to keep up :D
[01:07:12] <grym> the bad orange one
[01:07:16] *** Quits: p-i- (~Ohmu@node-i5m.pool-118-173.dynamic.totinternet.net) (Ping timeout: 246 seconds)
[01:07:29] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[01:08:52] <grym> namely http://news.ycombinator.com/rss
[01:08:58] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[01:09:09] <grym> but in truth i pick up a lot of this from irc
[01:09:18] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 276 seconds)
[01:09:21] <jabberwock> Oh! okay. That's actually enabled in one of my slack workspaces. I left it for a long time because topics became bitter assults
[01:09:26] <jabberwock> </off-topic> soz
[01:09:27] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[01:10:54] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[01:11:07] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:11:28] *** Joins: oriba (~oriba@dynamic-089-014-006-047.89.14.pool.telefonica.de)
[01:11:28] *** Joins: jetchisel (jetchisel@user/jetchisel)
[01:11:33] *** Quits: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com) (Quit: Lost terminal)
[01:12:38] <nedbat> jabberwock: https://twitter.com/jacobian/status/1414993283286249484 </off-topic> soz not soz
[01:12:46] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.2)
[01:12:47] <jabberwock> lol ty <3
[01:13:27] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 245 seconds)
[01:14:01] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[01:14:08] <jabberwock> exa wont' work for me unless I alias it to `ls` because it's not qwerty friendly to me
[01:14:28] <jabberwock> super cool though. I am going to do just that
[01:15:16] <grym> i like that rg is up front about the fact that it is not a grep replacement
[01:15:31] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:15:35] *** Joins: tsaka__ (~torstein@athedsl-4491135.home.otenet.gr)
[01:15:53] *** Quits: todda7 (~torstein@2a02:587:3260:9800:5001:8f86:3f65:c60a) (Ping timeout: 268 seconds)
[01:16:07] <raek> hmmm. would it be accurate to say that the python community has separate sets of tools for specifying dependencies for libraries and scripts/applications? I'm thinking of setup.{py,cfg} from setuptools (or other backend) for libraries and requirements.txt/Pipfile for apps...
[01:16:22] <grym> no, the line is hopelessly blurred
[01:16:40] <raek> I'm a bit confused. in other languages I've worked in, the same tool would be used for both...
[01:16:42] <habnabit_> raek, not really. many apps are distributed as the former. especially django apps
[01:16:58] <habnabit_> raek, pipfile is specific to one tool that isn't very popular
[01:17:02] <grym> you haven't even mentioned the tool yet :D
[01:17:06] <habnabit_> raek, (and also isn't specific to applications)
[01:17:13] *** Joins: pycurious (~Adium@user/pycurious)
[01:17:18] *** Quits: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com) (Ping timeout: 272 seconds)
[01:17:28] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[01:18:09] <jabberwock> so close to "rake" :thinking:
[01:19:17] <nedbat> From the hashlib docs: "Note that ‘md5’ is in this list despite some upstream vendors offering an odd “FIPS compliant” Python build that excludes it."
[01:19:18] *** Joins: xkuru (~xkuru@user/xkuru)
[01:19:36] <raek> hmm. maybe I should backtrack a bit. I'm trying to answer the question "where do I specify the dependencies?" for myself.
[01:19:51] <habnabit_> raek, are you writing an application?
[01:20:06] <jabberwock> in 'requirements.txt' if you're using pip, then you can pip3 install -r requirements.txt
[01:20:11] <raek> right now I'm just trying to understand how these tools interact
[01:20:21] <grym> ultimately, pip consumes them
[01:20:25] <grym> and does stuff
[01:20:25] <habnabit_> raek, just write a setup.cfg and you're good
[01:20:35] <habnabit_> raek, or use poetry if you want
[01:20:41] <raek> habnabit_: but yes. I'm writing something that no other code will depend on
[01:20:44] <grym> i tend to either use pyproject.toml or mad-lad just hardcode stuff into setup.py
[01:20:46] <jabberwock> well so much for not confusing
[01:20:56] *** Quits: Zer0xFF (michael@matrix.michaelsasser.org) (Remote host closed the connection)
[01:21:12] <raek> so Pipenv and poetry seem to be similar, but Pipenv doesn't build distribution packages at all?
[01:21:20] <grym> pipenv is more or less obsolete
[01:21:24] <grym> (as well)
[01:21:35] <raek> wow. things are moving fast.
[01:21:43] <habnabit_> pipenv was barely used in the first place
[01:21:44] <habnabit_> overhyped
[01:21:48] <grym> and breaking!
[01:21:52] <grym> yaaay
[01:22:10] <jabberwock> github.com/nvbn/thefuck  \o/
[01:22:39] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[01:22:40] <raek> so, I write some code that will use cffi, will have unit tests (via pytest), type checking and flake8 checks. I will not (likely) make a distribution package, but that could be nice in the future maybe
[01:22:41] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[01:22:44] *** Quits: waynew (~wayne@user/waynew) (Quit: WeeChat 2.9)
[01:22:45] *** Joins: Zer0xFF (michael@matrix.michaelsasser.org)
[01:22:55] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[01:22:55] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[01:22:55] *** Joins: bgardner[m] (~bgardner@2001:470:69fc:105::8a8)
[01:22:55] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[01:22:56] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[01:22:56] <habnabit_> raek, sounds easy to do with poetry
[01:23:10] *** Joins: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27)
[01:23:10] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[01:23:10] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[01:23:10] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[01:23:24] *** Joins: jwon (~jwon@user/jwon)
[01:23:31] <raek> is running the cffi code generator someting I would do from poetry?
[01:23:38] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[01:23:38] *** Joins: penguinbrian (~penguinbr@2001:470:69fc:105::33d2)
[01:23:50] <raek> I know that there is some integration between setuptools and cffi
[01:23:52] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[01:23:58] <habnabit_> raek, i thiiink cffi has support via poetry or setup.cfg at this point but i'd have to dig into it
[01:24:06] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[01:24:20] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[01:24:20] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[01:24:34] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[01:24:34] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[01:24:35] *** Joins: orbatos[m] (~orbatos@user/orbatos)
[01:24:49] *** Joins: binarymutt[m] (~binarymut@user/binarymutt)
[01:25:15] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[01:25:45] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 268 seconds)
[01:26:02] <habnabit_> raek, or ask #pypy; they'd know for sure
[01:26:05] *** Joins: tannerstirrat (~tannersti@c-76-25-59-209.hsd1.co.comcast.net)
[01:26:38] <tannerstirrat> is there an easy idiom for "pull this thing out of a dictionary, unless it doesn't exist, in which case set the value in the dictionary to this value and return the value?"
[01:26:45] <tannerstirrat> i'm thinking of something like `get_or_create` as a dict method
[01:26:48] <habnabit_> tannerstirrat, dict:setdefault
[01:26:54] <habnabit_> tannerstirrat, it's a confusing name
[01:27:25] <tannerstirrat> iiinteresting
[01:27:40] *** Quits: con3 (~con3@41.71.18.105) (Ping timeout: 272 seconds)
[01:27:48] *** Joins: northernsage (northernsa@gateway/vpn/protonvpn/northernsage)
[01:27:53] <habnabit_> tannerstirrat, or collections.defaultdict maybe
[01:28:01] *** Quits: xkuru (~xkuru@user/xkuru) (Quit: Unvirtualizing)
[01:28:16] <tannerstirrat> habnabit_: nah, setdefault seems to be what i'm after
[01:28:25] <tannerstirrat> the idea is that i want to use this dictionary as a cache
[01:28:40] <tannerstirrat> and i wanted a neat way to say "pull out of the cache, else do the calculation and return it but also set it in the cache"
[01:29:42] *** Joins: furrykef (~furrykef@ip68-229-199-137.ok.ok.cox.net)
[01:29:54] <nedbat> tannerstirrat: setdefault seems to combine two steps that you need to keep separate though?
[01:30:20] <tannerstirrat> nedbat: how so?
[01:30:50] <nedbat> tannerstirrat: you want to check, and then later maybe set it.  setdefault does both at once, but you don't want to calculate the value to set too early
[01:30:58] <tannerstirrat> lambda key: cache.setdefault(key, do_calculation(key))
[01:30:59] <Repiphany> Seems like you might be looking for function memoization also
[01:31:30] <tannerstirrat> nedbat: is that undocumented behavior?
[01:31:33] <tannerstirrat> https://docs.python.org/3/library/stdtypes.html#dict.setdefault
[01:31:49] <nubonix_> yo graingert, so im tinkering with the auth in starlette, but im not really sure what im doing wrong with `@requires('authenticated')`, i can send a response to the root directory and get a hello, myusername, but its telling me `Not Found` when i add an identical function, except with the requires auth decorator, any ideas?
[01:31:51] <tannerstirrat> Rephiphany: yes, but my boss likes caches on objects more than function memoization :P
[01:31:58] <tannerstirrat> also are there other memoization primitives than lru_cache?
[01:32:07] <graingert> nubonix_: uhh
[01:32:13] <nedbat> tannerstirrat: you will always call do_calculation before setdefault can check if the key already exists
[01:32:18] <nubonix_> graingert: show code?
[01:32:20] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[01:32:28] <tannerstirrat> nedbat: crap. right. because it's not thunked.
[01:32:30] <graingert> nubonix_: definitely try the encode/community gitter
[01:32:38] <tannerstirrat> thank you for calling that out
[01:33:09] <nubonix_> graingert can you send me that link again?
[01:33:45] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 255 seconds)
[01:33:48] <furrykef> OK, I've got a minimal nginx config that connects to a "Hello, world!" flask app and something very strange is going on. It looks like the HTTP requests are somehow getting corrupted en route to the flask app.
[01:34:04] *** Quits: northernsage (northernsa@gateway/vpn/protonvpn/northernsage) (Remote host closed the connection)
[01:34:10] <habnabit_> furrykef, what's sending the request?
[01:34:30] <nubonix_> graingert found it
[01:34:37] <furrykef> flask reports, "127.0.0.1 - - [14/Jul/2021 01:02:15] code 400, message Bad request syntax ('\x00þ\x02\x00\x0c\x00QUERY_STRING\x00\x00\x0e\x00"  etc. etc. -- a very long string with a bunch of nulls and strange characters.
[01:35:05] <habnabit_> furrykef, looks like you're mixing fastcgi and regular cgi
[01:35:15] <habnabit_> furrykef, or similar
[01:35:22] <furrykef> hmmm
[01:35:33] <habnabit_> furrykef, how are you running the flask server, and how are you connecting to it with nginx?
[01:36:21] <furrykef> I was running it with "flask" but it looks like I need to run it with "uwsgi"
[01:37:27] <tannerstirrat> ah, functools.cache
[01:37:49] <raek> when creating a distribution package with poetry, which dependency versions are put into the package? the "vague" ones or the exact ones from poetry.lock?
[01:38:19] *** Joins: rajkosto (~rajkosto@178.220.209.103)
[01:38:21] <habnabit_> raek, what command do you mean you're running to create such a package?
[01:38:21] <grym> neither
[01:38:36] <tannerstirrat> if i functools.cache an object method, is the cache associated with the instance or with the class?
[01:38:46] *** Joins: djapo (~archangel@user/djapo)
[01:39:04] <grym> raek: or at least, poetry build ... just makes a wheel of your package, doesn't do anything about its dependencies
[01:39:44] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[01:41:07] <raek> grym: but isn't the list of dependencies (and their versions) included in the wheel?
[01:41:07] *** Joins: tazle (tazle@kapsi.fi)
[01:41:39] <raek> hmm, this exaplains it: https://python-poetry.org/docs/libraries/#lock-file
[01:41:45] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[01:41:49] <raek> "For your library, you may commit the poetry.lock file if you want to. This can help your team to always test against the same dependency versions. However, this lock file will not have any effect on other projects that depend on it. It only has an effect on the main project."
[01:41:49] *** Quits: wyclif (~wyclif@user/wyclif) (Quit: leaving)
[01:42:23] *** Quits: LuxuryMode (uid91005@id-91005.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[01:42:24] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 268 seconds)
[01:42:29] <raek> habnabit_: "poetry build" I think
[01:42:50] <grym> raek: it doesn't seem to
[01:43:07] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[01:43:51] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[01:44:53] <bilb_ono> can someone look at my script which is supposed to replace non-unicode characters? https://bpa.st/EWAA . I am basically trying to “sanitize” the json object, specifically that ‘CustomerExtensions’ attribute by encoding things to utf-8 and then decoding again
[01:45:17] <bilb_ono> right now, every string comes out the same like they are unchanged ( line10)
[01:45:59] *** Joins: Naan (~naan@user/naan)
[01:46:04] *** Joins: CodePoint (~BitShift@2607:fb90:25d5:5803:6252:57d8:e6d4:6041)
[01:46:19] <bilb_ono> I think I am misunderstanding how to remove these non-utf-8 characters, or messing up the copy? do I need deepcopy here? Or misunderstanding what the != would do on line 9. Would it return True if the non-utf-8 characters were removed?
[01:47:18] *** Joins: dba (uid502594@id-502594.stonehaven.irccloud.com)
[01:47:34] *** Quits: rememberYou (~someone@user/rememberyou) (Remote host closed the connection)
[01:48:01] <raek> grym: when I build a wheel using setuptools the wheel has "Requires-Dist:" lines that point out dependencies (possibly with a version specifier too). I wondered if the lock file went into these lines or not (the docs say they don't).
[01:48:01] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[01:48:30] <jdmark> guys what are the best python learning resources for beginners to programming?
[01:48:39] <Byteflux> bilb_ono: looks like you're encoding item['Value'] to UTF-8 beforehand
[01:48:40] <grym> jdmark: /topic has some recs
[01:49:06] <nubonix_> graingert lols, major facepalm as usual, thanks :)
[01:49:09] <jdmark> thanks, ill read it now
[01:49:14] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 255 seconds)
[01:49:27] <habnabit_> bilb_ono, you're encoding with utf-8 and decoding with utf-8. what non-utf-8 characters are you imagining here?
[01:49:28] <grym> jdmark: "automate the boring stuff ..." and "think python" are good starter texts
[01:49:54] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[01:49:55] <Byteflux> bilb_ono: I would guess that bytes(..., 'utf-8') would produce a UnicodeEncodeError if there was anything malformed in the input
[01:50:07] <habnabit_> bilb_ono, \u00c5 is U+C5 which has a utf-8 encoding
[01:50:18] <raek> are other build backends than poetry worth looking into? I've seen flit, bento so far...
[01:51:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:51:55] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[01:51:56] <habnabit_> bilb_ono, if you already have a 'str' object and not a 'bytes' object, it only contains unicode values which can be represented in utf-8
[01:52:10] <SnoopJ> raek, flit seems pretty well-liked. You can expect build tools to really blossom in the wake of PEP 517/518
[01:52:13] <graingert> habnabit_: false
[01:52:21] <habnabit_> graingert, please don't talk about surrogateescape
[01:52:27] <graingert> habnabit_: FALSE
[01:52:32] <habnabit_> graingert, go away
[01:53:14] <graingert> I don't
[01:53:15] <raek> SnoopJ: how recent is this PEP 517/518 thing?
[01:53:32] <raek> (I guess I could also check the dates in the PEPs in my browser tabs)
[01:53:55] <graingert> https://usercontent.irccloud-cdn.com/file/S1NavZ04/false.jpg
[01:53:57] <SnoopJ> raek, last couple of years, so "pretty recent" by the ruler of Python packaging
[01:54:07] *** Quits: y1n (~y1n@84-115-65-72.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[01:54:27] <SnoopJ> graingert, I'll bite: how can I build a str that is not a sequence of Unicode codepoints?
[01:54:54] *** Quits: CodePoint (~BitShift@2607:fb90:25d5:5803:6252:57d8:e6d4:6041) (Ping timeout: 255 seconds)
[01:55:00] <graingert> habnabit_: I was actually thinking of surrogatepass
[01:55:05] *** Joins: y1n (~y1n@84-115-65-72.wifi.dynamic.surfer.at)
[01:55:56] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[01:56:34] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 272 seconds)
[01:57:10] <graingert> SnoopJ: best not to worry about it
[01:57:21] <SnoopJ> graingert, I'd prefer an answer to my question
[01:57:42] <zware> One wonders why you bring it up so adamantly if it's not to be worried about...
[01:57:45] <bilb_ono> habnabit_: the string Im trying to detect looks like \u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8. are you saing that that is utf-8? specifically U+C5 ?
[01:57:50] <SnoopJ> AFAICT surrogates do not in any way falsify what they said
[01:58:06] <SnoopJ> but maybe I have something to learn about Unicode today
[01:58:07] <habnabit_> bilb_ono, it isn't literally utf-8, no. i think you have some terminology confused
[01:58:09] <bilb_ono> it is a string object
[01:58:23] <bilb_ono> yeah I feel like I do
[01:58:32] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[01:58:43] <habnabit_> bilb_ono, what is the problem with \u00c5 ?
[01:59:13] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[01:59:58] *** Quits: Barones (~Barones@2804:48dc:8500:0:f0a6:a913:47d6:9e16) (Remote host closed the connection)
[02:00:04] <zware> bilb_ono: Are you looking for `json.dumps(_, ensure_ascii=False)`?
[02:00:12] *** Joins: Barones (~Barones@2804:48dc:8500:0:c80a:6de1:3e80:91c7)
[02:00:23] <bilb_ono> habnabit_: I am tring to insert values from an api into a postgres database. when I try and load theses it gives this https://bpa.st/MOGA
[02:00:49] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 246 seconds)
[02:01:00] <habnabit_> bilb_ono, ok, so you're inserting it incorrectly
[02:01:08] <bilb_ono> then when I look at the raw json that I am trying to insert it has stuff like [{"Value": "\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00d2\ . And I think these are non-unicode characters. like from another language
[02:01:10] <habnabit_> bilb_ono, show us the code that generates this error and the traceback
[02:01:22] <habnabit_> bilb_ono, \u explicitly means it _IS_ a unicode character
[02:01:32] <habnabit_> bilb_ono, your problem is your inserts. not anything else
[02:01:37] <bilb_ono> https://bpa.st/W5YA
[02:01:57] <zware> bilb_ono: That's specifically complaining about the null byte, \u0000.  Just `"your string".replace('\u0000', 'SOMETHING YOU CAN IGNORE LATER')`
[02:02:06] <SnoopJ> and moreover, (to my knowledge) you can't have a str that contains not-Unicode, because Python's strings are sequences of codepoints
[02:02:08] *** Quits: Barones (~Barones@2804:48dc:8500:0:c80a:6de1:3e80:91c7) (Client Quit)
[02:02:43] <habnabit_> bilb_ono, ok you are several levels confused about this!
[02:02:46] <bilb_ono> the insertion is done by a “target” which is a data pipeline tool.  https://github.com/transferwise/pipelinewise-target-postgres
[02:03:14] <habnabit_> bilb_ono, you need to test for: '\0' in item['Value']
[02:03:33] <habnabit_> bilb_ono, maybe you can replace it with the empty string; maybe something needs it
[02:03:41] <habnabit_> bilb_ono, but that will tell you which rows are failing
[02:03:51] *** Parts: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) ()
[02:03:54] *** Joins: dustiestgolf (~anotherus@153.90.200.238)
[02:04:02] <bilb_ono> I can replace it with empty string. I dont need the val, I just dont wnat it to error out
[02:04:30] <Byteflux> perhaps \0 has some special meaning in your API so up to you how to handle it, just needs to not be there
[02:04:38] <zware> `item['Value'] = item['Value'].replace('\0', '')`, then
[02:05:17] <habnabit_> the \0 might be signaling to ignore everything after it
[02:05:21] <bilb_ono> ok yep it is detectable (‘\0’)
[02:05:32] <habnabit_> or it's a byte sequence that was incorrectly loaded as text
[02:05:53] <dustiestgolf> Hello! I am trying to create a package to put up on pypi I am currently testing with the test server. For some reason I cannot get the package_data files in my MANIFEST.in to be included in my package. They are included in the source distribution but not the wheel. Any help greatly appreciated.
[02:06:10] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 256 seconds)
[02:06:14] <dustiestgolf> here is a link to my project: https://github.com/alexrkaufman/pytla
[02:07:12] *** Quits: audiocat (~audio@2603-8081-1800-00ad-0f94-2547-14ef-ab6d.res6.spectrum.com) (Ping timeout: 245 seconds)
[02:08:53] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:4481:3282:6da6:9a8e) (Quit: Textual IRC Client: www.textualapp.com)
[02:09:36] <bilb_ono> hmm replacing \0 still seems to include things like \x08\x01 https://bpa.st/ICDA
[02:10:05] <zware> bilb_ono: Yes, but Postgres won't complain about those
[02:10:21] <graingert> SnoopJ: Try os.urandom(16).encode("utf8")
[02:10:26] <zware> (Probably, haven't actually checked :))
[02:10:51] *** Joins: audiocat (~audio@2603-8081-1800-00ad-22dd-cec0-26c4-09c5.res6.spectrum.com)
[02:10:51] <bilb_ono> zware: with the new replace function it still gives this error: https://bpa.st/7SHQ
[02:10:57] <SnoopJ> graingert, presumably you mean decode(), and even then: this doesn't produce a str.
[02:11:18] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:11:25] <zware> bilb_ono: It's still the same error, so you still have a null byte in there somewhere
[02:11:29] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[02:11:34] <graingert> SnoopJ: that was an intentional error try with os.urandom(16).decode("utf8")
[02:11:54] <SnoopJ> 17:40 <SnoopJ> graingert, ... and even then: this doesn't produce a str.
[02:12:15] <graingert> Alright alright you can hold the chalk if you want
[02:12:17] <SnoopJ> what they said was to my knowledge correct: if it's a str, it contains codepoints
[02:12:26] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[02:12:35] <SnoopJ> getting to that point may be tricky, but you can be sure of this once you're there so far as I know
[02:13:12] <graingert> Now try
[02:13:12] <graingert> os.urandom(16).decode("utf8", "surrogateescape")
[02:13:27] <SnoopJ> graingert, do you contend that the result of this is not a sequence of codepoints?
[02:13:44] *** Joins: emika (~emika@5.181.235.116)
[02:13:51] <graingert> I've got no idea what it contains
[02:13:55] <zware> graingert: A str is literally a sequence of codepoints, it has no binary representation or encoding until you encode it to get bytes.  Displaying a str in the repl or otherwise implicitly encodes the str to your console's encoding
[02:14:05] *** Joins: raxor2k (~raxor2k@204.109-247-146.customer.lyse.net)
[02:15:11] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[02:15:16] <graingert> Surrogate pairs:
[02:15:17] <graingert> > They are the combination of two characters, containing a single code point.
[02:15:35] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Remote host closed the connection)
[02:15:43] <SnoopJ> in other words: the resulting object is still a sequence of code points
[02:15:44] <graingert> A str is a wrapper around some utf8 surrogateescape decoded bytes
[02:16:05] <SnoopJ> graingert, surrogate pairs are representable in Unicode, no?
[02:16:20] <graingert> Right but surrogate escaped bytes are not
[02:16:21] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[02:16:29] <SnoopJ> I don't know what a "surrogate escaped byte" is
[02:16:44] <zware> graingert: Surrogates are a utf-8 encoding thing, not a str thing
[02:17:02] <SpeakerToMeat> What is a codepoint
[02:17:30] <furrykef> WOO! I got my server running! Thanks for the help, guys :3
[02:17:51] <zware> SpeakerToMeat: Essentially the Unicode Consortium's name for a character, represented as an integer
[02:17:56] <SnoopJ> SpeakerToMeat, it's a euphemism for an integer. Unicode defines what they mean.
[02:18:14] <SnoopJ> SpeakerToMeat, if this is all alien-sounding, there's a great gentle intro to the subject here: https://nedbatchelder.com/text/unipain.html
[02:18:36] <raxor2k> bjs: are you here
[02:18:39] <SpeakerToMeat> zware, signed or unsigned? of a specified bit length?
[02:18:47] <SpeakerToMeat> Just wondering, out of curiosity and wanting to learn
[02:19:01] <SpeakerToMeat> And is the endianess specified in the specs or left to the architecture?
[02:19:05] <zware> SpeakerToMeat: Positive, human numbers :)
[02:19:06] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[02:19:08] <SnoopJ> SpeakerToMeat, unsigned
[02:19:18] <SpeakerToMeat> thanks
[02:20:16] <SnoopJ> if you are comfortable with ASCII being a mapping (an "encoding") between the numbers 0-128 and characters, it's the same idea, but way bigger and with more nuance (like these surrogate pair thingies)
[02:20:20] *** Joins: ssbr_ (~ssbr@python/site-packages/ssbr)
[02:21:05] <SnoopJ> (and the notion of a "character" gets fuzzy really fast)
[02:21:06] <graingert> zware: No surrogateescape is a builtins.str thing
[02:21:25] <SpeakerToMeat> I'll read what you shared, for example knowing unicode works with modifiers (like accents) I wonder if those are independant codepoints
[02:21:58] <SnoopJ> graingert, it's error-handling behavior that turns those bytes into something representable by Unicode. As I recall, you claimed this made the statement about str containing Unicode-compatible data false. I'm just wondering how/why.
[02:22:04] <zware> graingert: surrogateescape is a "this blob of bytes is supposed to be a string so treat it as one whether it makes sense in this encoding or not" thing :).  What you get after the decode is still a str, which is a sequence of codepoints
[02:22:21] <graingert> No!
[02:22:38] <graingert> A codepoint is represented by one surrogate pair
[02:22:57] <SnoopJ> a codepoint can be represented a lot of different ways
[02:23:08] <SnoopJ> and it doesn't really matter how once you're in str-land?
[02:23:18] <graingert> Surrogateescape misuses surrogates by using unpaired surrogates to represent an actual literal byte
[02:23:35] <graingert> It does when you try to print it
[02:24:00] <SnoopJ> does this "misuse" as you've called it mean that it isn't Unicode
[02:24:05] <graingert> Correct
[02:24:07] <SnoopJ> why?
[02:24:15] <graingert> It's a str and not a Unicode
[02:24:26] <SnoopJ> graingert, what is "a Unicode"
[02:24:50] <graingert> Like a py2 __builtin__.unicode
[02:25:17] <graingert> Which was also slightly broken under surrogates
[02:25:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[02:26:15] <SnoopJ> so you're saying that Python 3 can't represent Unicode at all because this type no longer exists, or...?
[02:26:48] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c:146a:5c4b:109:2ce4) (Ping timeout: 268 seconds)
[02:27:01] *** Quits: tannerstirrat (~tannersti@c-76-25-59-209.hsd1.co.comcast.net) (Quit: WeeChat 3.2)
[02:27:12] <SpeakerToMeat> Doesn't unicode have a plethora of encodings?
[02:27:40] <SnoopJ> SpeakerToMeat, there are several, yep. Different ways to point to one of those code points, basically.
[02:28:58] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[02:29:29] <graingert> SnoopJ: well sort of
[02:29:33] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 255 seconds)
[02:29:40] <SnoopJ> graingert, that's kind of unspecific, can you say more?
[02:29:42] <graingert> SnoopJ: python's str type represents bytes
[02:29:53] <SnoopJ> graingert, if it does, then the documentation is very very wrong.
[02:29:54] <zware> graingert: It really doesn't :)
[02:30:18] * SpeakerToMeat reads unicode wiki
[02:30:32] <SpeakerToMeat> Wait, the unicode codepoint space is 21 bits long?
[02:30:32] <SnoopJ> SpeakerToMeat, I really can't recommend the earlier link strongly enough, it's very good :)
[02:31:19] <SpeakerToMeat> SnoopJ, yeah I started the video
[02:31:34] *** Joins: qlixed (~qlixed@152.170.36.244)
[02:31:35] *** Joins: vimart (~vimart@85.255.237.185)
[02:31:48] <graingert> zware: ok so what does u'B\udce5A\x0c\udcb9A\udccdjp\udce2\x0f\udcabG\udc9f\udca7s' mean?
[02:31:58] *** Joins: pnoud (~pnoud@user/pnoud)
[02:32:11] <SnoopJ> it means a sequence of codepoints as you've given them
[02:32:15] <zware> graingert: It means you have a jumble of garbage that somebody really wanted to treat as text for some reason.  They're going to have problems :)
[02:32:25] <zware> graingert: But it's still a sequence of unicode codepoints
[02:32:41] <graingert> zware: which code points specifically?
[02:32:44] *** Quits: Akuli (~Akuli@87-94-111-176.bb.dnainternet.fi) (Quit: Leaving)
[02:32:58] <SnoopJ> yea, there's no guarantee that just because it's so-representable it has some obvious semantics; with surrogates you can argue exactly the opposite: they aren't *allowed* to be characters
[02:33:29] <SnoopJ> but the original statement that was claimed to be false had nothing to do with "characters"
[02:33:55] *** Joins: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net)
[02:33:58] <zware> graingert: 66, 56549, 65, 12, 56505, 65, 56525, 106, 112, 56546, 15, 56491, 71, 56479, 56487, and 115
[02:34:25] <SnoopJ> I guess if the objection was about the utf-8 part of the statement I could understand, but it's like wading through muck so far to find out what, if anything, is meant.
[02:35:06] *** Joins: nirix (uid48447@id-48447.tinside.irccloud.com)
[02:35:17] <zware> graingert: (`[ord(c) for c in jumble]`)
[02:35:42] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c:146a:5c4b:109:2ce4)
[02:35:46] <furrykef> Hey, uh, I ran my uwsgi backend in the shell and ctrl+c isn't getting me out of it. What do?
[02:35:49] *** Quits: ircuser70 (~ircuser@190.236.211.35) (Ping timeout: 246 seconds)
[02:35:54] <furrykef> (I want to kill it)
[02:36:02] <graingert> zware: ok so what does this mean:
[02:36:02] <graingert> > Surrogate characters are typically referred to as surrogate pairs. They are the combination of two characters, containing a single code point.
[02:36:09] <furrykef> n/m, it worked, it just took a while to actually kill it
[02:36:28] <graingert> furrykef: ctrl+c is considered a "soft cancel"
[02:36:31] <zware> graingert: Where's that from, for context?
[02:36:33] <graingert> by many things
[02:36:34] <SnoopJ> furrykef, yea, it can take some time for the process to shut down
[02:36:39] <graingert> zware: internet
[02:36:46] <zware> graingert: Helpful :)
[02:36:51] <furrykef> Thanks
[02:37:12] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[02:37:15] <SpeakerToMeat> IDK, considering we're truly going into a darmok at tenagra situation, I think gifs should be incorporated into unicode
[02:37:20] <SnoopJ> graingert, one thing it means: the author is being very sloppy about what a "character" is
[02:37:21] <graingert> zware: it's a tree book iOS Internationalization: The Complete GuideiOS Internationalization: The Complete Guide
[02:37:39] <graingert> SnoopJ: don't get me started on what characters are
[02:37:56] <SnoopJ> graingert, believe me, it's all I can handle to get you to explain what you're on about here.
[02:38:14] <SnoopJ> I believe the terminology that author was reaching for is "code unit"
[02:38:36] <zware> Have to agree that it looks like an overloading of "character"
[02:38:37] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[02:38:57] <SnoopJ> SpeakerToMeat, the Consortium has semi-officially said they'd put Klingon in if Paramount agreed not to sue them over it :)
[02:38:57] <zware> So I really have no idea what they actually meant there
[02:39:13] <SnoopJ> whatever it is they might have meant, it doesn't make the above string not-a-sequence-of-codepoints
[02:39:16] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[02:39:24] <SpeakerToMeat> Ain't characters atomic representations of a indivisible part in a communication system?
[02:39:48] <SpeakerToMeat> SnoopJ, not the same, and I do think well defined made up languages deserve a space in the code
[02:40:05] <SpeakerToMeat> klingon, tengwar, etc
[02:40:07] <SnoopJ> SpeakerToMeat, calling them atomic gets at a big part of the problem: is ç absolutely distinct from c? It's convenient to represent it as 'c' composed with the diacritical mark
[02:40:20] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[02:40:38] <zware> And some encodings do
[02:40:59] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Read error: Connection reset by peer)
[02:41:14] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[02:41:20] *** Joins: Elzington_ (~Elzington@static-198-54-128-62.cust.tzulo.com)
[02:41:45] <SpeakerToMeat> SnoopJ, only if the diacritical mark is reused like grave and accute accents are for example, but what happens when the graphical representation is complex to determine from components? because under that logic chinese and japanese kanji could be represented as conglomerates of radicals marks. but the graphical reproduction from it would be hell or impossible to code
[02:41:53] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Client Quit)
[02:42:01] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[02:42:33] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[02:42:57] <graingert> SnoopJ: zware: I'm assuming you mean grapheme when you say character
[02:42:59] *** Joins: heco (~redrum@user/redrum88)
[02:43:01] *** Joins: northernsage (northernsa@gateway/vpn/protonvpn/northernsage)
[02:43:22] <SnoopJ> graingert, characters are neither here nor there in the definition of str
[02:43:24] <SpeakerToMeat> After all, 木 and 森 might use the same elements, but they represent different characters
[02:43:35] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c:146a:5c4b:109:2ce4) (Quit: Leaving)
[02:43:37] <SnoopJ> SpeakerToMeat, it's even worse than that, e.g. 猫 vs 貓
[02:43:48] <graingert> nedbat: have you fixed os.fsencode and os.decode in coveragepy yet?
[02:43:48] <SpeakerToMeat> CAT
[02:43:50] <SpeakerToMeat> sorry
[02:43:52] *** Quits: Elzington (~Elzington@static-198-54-128-76.cust.tzulo.com) (Ping timeout: 245 seconds)
[02:44:05] <graingert> SnoopJ: what about rubies?
[02:44:35] <SnoopJ> graingert, what about them?
[02:44:37] <SpeakerToMeat> SnoopJ, In fact a couple days ago I was wondering if it wouldn't be possible to split kanjis into components for encoding, the number of arragements and "deformations" of radicals seem to be finite
[02:45:09] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[02:45:33] <SnoopJ> SpeakerToMeat, I don't know about the history of attempts at doing this, but I know it's not how Unicode does it.
[02:45:41] <SnoopJ> Text is...complicated.
[02:46:14] <SpeakerToMeat> It is
[02:46:46] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[02:46:49] *** Joins: ircuser32 (~ircuser@190.236.211.35)
[02:47:19] <zware> graingert: I've carefully been avoiding the term "character", because I'm not entirely sure what it means, because it's rather overloaded :)
[02:47:28] <Repiphany> Han unification in unicode is awful for CJK
[02:48:01] <SpeakerToMeat> zware, heavily contextual
[02:48:24] <Repiphany> Splitting kanji/hanzi into combinable components would be a nightmare for font creators
[02:49:21] *** Joins: entuland (~entuland@user/entuland)
[02:50:15] *** Quits: northernsage (northernsa@gateway/vpn/protonvpn/northernsage) (Ping timeout: 255 seconds)
[02:50:28] * zware has to disappear now.
[02:51:05] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[02:51:27] *** Joins: thiras (~thiras@user/thiras)
[02:52:02] <SpeakerToMeat> SnoopJ, thanks, this has been edifying so far. I mainly needed the idea of code points
[02:52:19] <SpeakerToMeat> Maybe someday I'll reach the point of getting what surrogate pairs ar
[02:52:55] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:53:51] *** Quits: y1n (~y1n@84-115-65-72.wifi.dynamic.surfer.at) (Ping timeout: 255 seconds)
[02:54:15] *** Joins: y1n (~y1n@84-115-65-72.wifi.dynamic.surfer.at)
[02:55:56] *** Joins: northernsage (northernsa@gateway/vpn/protonvpn/northernsage)
[02:56:09] <nedbat> graingert: i must not have, since i'm not sure what you are talking about
[02:56:19] <SnoopJ> SpeakerToMeat, the really short version: there's a range of reserved codepoints, and since they are *forbidden* from representing characters, you can imbue a pair of them with special meaning.
[02:56:31] <maxtim> I've recently started playing around with PyQt5 and the ability to import a CSS stylesheet is a game changer. But I'm wondering, I have a file that the system generates filled with hex numbers. How can I import that to the sylesheet?
[02:57:16] <maxtim> s/hex numbers/hux colors
[02:57:31] *** jarthur_ is now known as jarthur
[02:57:44] *** Quits: northernsage (northernsa@gateway/vpn/protonvpn/northernsage) (Remote host closed the connection)
[02:58:20] <nedbat> hux?
[02:58:26] <nedbat> hex :)
[02:58:27] <maxtim> with tkinter, i read the file and return a list. i can can call them like colors[0], colors[x] etc
[02:58:40] <maxtim> nedbat, lol i wasn't going to correct a correction
[02:58:41] *** Joins: northernsage (~northerns@2804:14d:5284:35f::1000)
[02:58:47] <SnoopJ> like that feller from Space Conflicts
[02:58:56] <maxtim> lmao
[02:59:10] <SnoopJ> maxtim, what's this file like?
[02:59:22] *** Quits: codificat (~pep@66.red-79-154-168.dynamicip.rima-tde.net) (Quit: leaving)
[02:59:22] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:59:29] <maxtim> #fff\n#ff3\n....
[03:00:32] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 272 seconds)
[03:00:33] <SnoopJ> maxtim, well, you could open() the file and then read one line at a time. I'm not sure how that would interface with the rest of your PyQt5, but presumably it's flexible enough that you could inject the data you parsed out of it.
[03:00:33] <maxtim> SnoopJ, I have a function I use for tkinter. I'll post it
[03:02:06] *** Joins: jazzy (~jaziz@2600:380:c114:2d85:8093:7182:dd7:1044)
[03:02:18] <maxtim> https://bpa.st/I2CQ
[03:02:52] <maxtim> I missed from pathlib import Path
[03:03:28] *** Quits: northernsage (~northerns@2804:14d:5284:35f::1000) (Ping timeout: 246 seconds)
[03:04:10] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 246 seconds)
[03:04:12] *** Quits: rq (~rq@user/rq) (Quit: Client closed)
[03:04:57] <maxtim> but with qt, the css is a separate file and i self.setStyleSheet(open('mycss.css').read())
[03:05:40] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[03:06:09] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Remote host closed the connection)
[03:07:07] <vimart> can't get on with lambda.  lambda x : random.choice([0,1]) > <function <lambda> at 0x7fd315565ca0>
[03:07:51] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:08:18] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:08:41] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[03:09:04] <Repiphany> Can't get on what
[03:09:05] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:09:27] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[03:09:38] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[03:09:52] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:10:01] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[03:10:14] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[03:10:40] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:10:52] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[03:11:02] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[03:11:27] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:11:51] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[03:12:01] <maxtim> >>> print(lambda x: random.choice([0, 1])) <function <lambda> at 0x7fa0ae5e2400> >>> print(random.choice([0, 1])) 1
[03:12:36] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 244 seconds)
[03:12:48] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 272 seconds)
[03:14:03] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:15:11] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[03:15:20] *** Joins: de-facto (~de-facto@user/de-facto)
[03:15:26] *** Quits: redgloboli (~redglobol@user/redgloboli) (Read error: Connection reset by peer)
[03:15:52] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[03:16:34] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[03:16:35] *** Quits: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth) (Quit: shibboleth)
[03:16:36] *** Joins: de-facto (~de-facto@user/de-facto)
[03:16:38] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[03:17:19] <Yhg1s> vimart: lambda returns a function. It's just like 'def'. If you want to call that function, you need to do so, just like with 'def'.
[03:17:25] *** Joins: redgloboli (~redglobol@user/redgloboli)
[03:19:16] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 256 seconds)
[03:19:32] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[03:19:49] *** Quits: Narrat (~omnius@p200300df5f0b10aa06ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[03:20:11] *** Joins: schumaml1 (~schumaml@dslb-188-104-187-013.188.104.pools.vodafone-ip.de)
[03:21:26] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 272 seconds)
[03:21:42] *** Quits: schumaml (~schumaml@dslb-178-002-189-095.178.002.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[03:21:45] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[03:22:13] *** Quits: niv (~niv@limbo.cypherpunks.io) (Quit: Powered by LunarBNC: https://LunarBNC.net)
[03:22:39] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[03:25:10] *** Joins: Trieste (T@user/pilgrim)
[03:25:18] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:26:02] <raxor2k> Ok.. So i have a "problem" in my websocket server. When data is arrived from either "sensor.py" or a actual arduino sensor, data is arrived in realtime(5ms) which can be seen in the browser. But when data is being processed/forwarded to one of the user clients, there is a bit delay when data is arrived from sensor VS "sensor.py" . My theory is that it has do something to do with how the json
[03:26:02] <raxor2k> is sent from the arduino sensor: https://bpa.st/P6IQ
[03:26:14] <raxor2k> now i need the magic power of BJS
[03:27:50] <nedbat> vimart: can we help?
[03:28:12] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[03:31:33] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[03:32:14] <bjs> raxor2k: so, you receive some message and then forward it on and you're saying the time it takes for the message to reach the server is less than the time it takes for it to go to the server and then be forwarded to the clients?
[03:32:21] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 258 seconds)
[03:33:07] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 258 seconds)
[03:33:44] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[03:33:57] <raxor2k> bjs: what i am saying is: if data from "sensor.py" is 1ms, than the same data is forwarded to a user client in 1ms time. But when data is arrived to the serevr from sensor in 1ms time, it still takes some seconds to forward that data to client
[03:34:08] <bjs> raxor2k: your code is very suspect, you do return_exceptions=True in one place but don't ever even read the result of the gather;  and your broadcast function's for loop looks... equally suspect
[03:34:38] <raxor2k> bjs: so you think there could be a exception somewhere
[03:34:38] <raxor2k> ?
[03:34:53] <bjs> raxor2k: I have no idea, and thanks to your code, neither do you
[03:35:20] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c:b510:a429:9a65:bf36)
[03:36:19] *** Joins: schumaml2 (~schumaml@ipservice-092-211-202-077.092.211.pools.vodafone-ip.de)
[03:36:42] <raxor2k> bjs: but you see that i have a try catch block inside the "process_data_to_userobjects" functin ?
[03:36:56] *** Joins: dangrenier83 (~dangrenie@user/dangrenier83)
[03:37:14] <bjs> raxor2k: so? I'm looking at the gather(), it has return_exceptions=True but then you never look at the return value
[03:37:20] *** Joins: derelict (~derelict@user/derelict)
[03:37:24] *** Quits: qlixed (~qlixed@152.170.36.244) (Quit: That's all folks!!)
[03:37:25] *** Joins: khanred (~khanred@user/khanred)
[03:37:25] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c:b510:a429:9a65:bf36) (Client Quit)
[03:37:41] <raxor2k> bjs: so i should remove that ?
[03:37:46] <bjs> *if* something went wrong, you'd never know
[03:38:15] <bjs> raxor2k: well I'm just saying, if something goes wrong you're suppressing and hiding it there, so you won't even know. and then you come here because something is going wrong
[03:38:31] <bjs> There is _literally no way_ to know if an exception is happening here or what is going on because of that.
[03:38:34] *** Quits: schumaml1 (~schumaml@dslb-188-104-187-013.188.104.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[03:39:23] <raxor2k> bjs: ok fair enough. But that still doesnt explain me how data is forwarded to a user client at the same rate as how the data is sent to the websocket server from "sensor.py" VS the data sent from arduino sensor. And again: data from both of them are arrived at same rate to the server. I can see that in the browser
[03:39:27] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[03:39:39] <raxor2k> that tells me it has something to do with the json object sent from the arduino
[03:39:55] <bjs> raxor2k: how do you know it doesn't explain it? You have *no idea* what's actually happening when your code runs because an exception could be happening at any point anywhere and you wouldn't know about it what it caused
[03:41:18] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 272 seconds)
[03:41:37] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 246 seconds)
[03:42:27] <raxor2k> bjs: ok, so the function should look like this: https://bpa.st/TWUQ ?
[03:43:14] <raxor2k> damn.. i wish i had the sensor close here to test it
[03:43:20] <bjs> raxor2k: I'm not making any statement on what it *should* be like,  maybe you really did _want_ to just suppress all exceptions.  All I'm saying is because you have done that you cannot see the exceptions.
[03:43:36] <bjs> For all you know your broadcast method is just broken and sometimes doesn't work and you'd have no way of knowing.
[03:43:41] <Gustavo6046> how do you guys do these
[03:43:48] <Gustavo6046> square bracket things in pip, like when you make a pip package
[03:43:58] <Gustavo6046> there might be some argument in setuptools but idk about poetry
[03:44:04] <Gustavo6046> you guys doing those, i guess they're called features
[03:44:10] <Gustavo6046> frickin wizardry, my jaw is on the floor
[03:44:22] <raxor2k> bjs: ok. But you agree this is strange, right ?
[03:44:43] <bjs> raxor2k: I cannot tell you if it's strange,  your code might just be totally broken and you've turned off all the errors and warnings so you wouldn't even know
[03:45:13] <raxor2k> no its not
[03:45:16] <raxor2k> its not broken
[03:45:31] <bjs> raxor2k: you *cannot say that* because you've turned off all the exceptions. If it did go wrong you wouldn't see.
[03:46:34] <raxor2k> bjs: ok but im saying this last time: I can turn on the sensor, and i can move it up and down while looking at the arduni IDE terminal + the websocket-page in browser, and i can see data coming in R E A L  T I M E
[03:46:42] <raxor2k> meaning there is no delay from sensor to server
[03:46:49] *** Quits: dangrenier83 (~dangrenie@user/dangrenier83) (Quit: Leaving)
[03:47:05] <bjs> raxor2k: it doesn't matter,  maybe it's only going wrong in the case where the weird thing happens.  The point *you dont know*. You can't know.
[03:47:26] <raxor2k> one guy at the #arduino channel thinks the processing from the arduino is slow, i told him the same thing, the data arrives in  R E A L   T I M E
[03:47:34] *** Joins: dangrenier83 (~dangrenie@user/dangrenier83)
[03:48:25] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[03:49:15] <bjs> raxor2k: Like seriously,  you're just hiding the exceptions.  It's such a simple thing to fix so you'd at least be able to see what's going on.  It cannot be a coincidence that the one function you're doing this to happens to be the one that has the weird behaviour you're seeing?  Maybe it *is* a coincidence, but the point is,  you'd never know so long as you're doing this.
[03:51:01] *** Joins: binchickin (~binchicki@165.22.169.69)
[03:51:10] <Gustavo6046> I have a file that imports an optional dependency
[03:51:23] <Gustavo6046> I want it to print a warning and run nothing beyond the import attempt if it can't find it
[03:51:28] <raxor2k> bjs: ok
[03:51:29] <Gustavo6046> How do I do that without wrapping the whole file in a humongous if?
[03:51:33] <bjs> Gustavo6046: you can catch the ImportError
[03:51:39] <Gustavo6046> I do that
[03:51:51] <bjs> Gustavo6046: okay, so what's the problem?
[03:51:54] <Gustavo6046> I can't 'return' from a module now though.
[03:51:57] <zware> Catch it in the file that imports the one that imports the optional :)
[03:51:58] <bjs> Gustavo6046: you can sys.exit
[03:52:02] <Gustavo6046> Ohh.
[03:52:10] <Gustavo6046> bjs: well yeah, but I mean
[03:52:15] <bjs> Gustavo6046: but what
[03:52:16] <Gustavo6046> hmph. Honestly I dunno if I'm doing this the right way.
[03:52:33] <bjs> Gustavo6046: isn't catch ImportError, print message and sys.exit doing *exactly* what you just said you wanted to do :)
[03:53:10] <raxor2k> bjs: so you dont think this is strange ?
[03:53:28] <bjs> raxor2k: Like I said, I cannot tell you if it's strange because for all I know there's lots of random exceptions happening all over the place and the code is totally broken
[03:53:40] <bjs> which would make some delays not strange at all
[03:54:22] *** Quits: y1n (~y1n@84-115-65-72.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[03:54:35] <bjs> raxor2k: Maybe the broadcast is broken,  maybe the json the sensor gives is weird and breaks something,  maybe something else explodes; who knows?  you definitely don't.
[03:55:07] *** Joins: y1n (~y1n@84-115-65-160.wifi.dynamic.surfer.at)
[03:55:10] <raxor2k> bjs: where you said it, "maybe the json the sensor gives is weird and breaks something"
[03:55:24] <bjs> raxor2k: what
[03:55:27] <raxor2k> which brings me to the next question: what is the difference between these two json objects? : https://bpa.st/SCEQ
[03:55:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:55:58] *** Quits: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) (Ping timeout: 246 seconds)
[03:56:08] <raxor2k> sorry, here is the link : https://bpa.st/QTJA
[03:56:33] <raxor2k> is there any difference in which the json objects are sent to the websocket server from "sensor.py" and the arduino sensor ?
[03:56:38] *** Joins: rajkohaxor (~rajkosto@178-221-117-77.dynamic.isp.telekom.rs)
[03:56:46] *** Quits: c4017w (~c4017@209.52.68.8) (Killed (NickServ (GHOST command used by c4017w_)))
[03:57:09] *** c4017w_ is now known as c4017w
[03:57:14] <bjs> raxor2k: you cannot tell from the code, not to mention the fact that the code contains variables that you don't give a value to.  Why not just print them out and compare?
[03:57:18] *** Quits: rajkosto (~rajkosto@178.220.209.103) (Ping timeout: 255 seconds)
[03:59:16] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2f4b)
[03:59:25] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2f4b) (Client Quit)
[04:01:37] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[04:03:41] *** Joins: i0e (~is0ke3@user/is0ke3)
[04:03:52] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 272 seconds)
[04:04:23] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[04:04:33] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[04:04:33] *** Quits: schumaml2 (~schumaml@ipservice-092-211-202-077.092.211.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[04:05:11] *** Joins: schumaml2 (~schumaml@dslb-092-074-004-211.092.074.pools.vodafone-ip.de)
[04:06:38] <bilb_ono> habnabit_: can you help me understand whats going on here? https://bpa.st/C4EQ
[04:07:19] <bilb_ono> is this specifically replacing that second to last \u000 ? And then somehow formatting these u things?
[04:08:05] *** Joins: ulif (~nick@user/ulif)
[04:08:11] <bilb_ono> because \u000 is a “null byte” which is not allowed for posgres. all those other characters are allowed..
[04:09:44] <bilb_ono> but then also when I replace this, and json.dump the dictionary to a file, it becomes the \u format again. not like ÉÊ. I assume this is because json cannot accept these new characters and converts it back into “u” format. I also need to figure out what this u format is called
[04:11:24] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 256 seconds)
[04:12:01] <nedbat> bilb_ono: when you look at the json, it will look like \u, but that's just how the bytes are represented in json
[04:12:20] *** Joins: zebrag (~chris@user/zebrag)
[04:12:44] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 272 seconds)
[04:13:00] <bilb_ono> nedbat: is there a way to print it out in u format in the python shell?
[04:13:18] *** Quits: oriba (~oriba@dynamic-089-014-006-047.89.14.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:13:57] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-c486-c910-77b8-ae5c.res6.spectrum.com) (Ping timeout: 255 seconds)
[04:14:17] <nedbat> bilb_ono: how about:  print(a.replace("\0",''))
[04:14:35] *** Quits: jess (~jess@libera/staff/jess) ()
[04:15:02] <bilb_ono> nedbat: that still seems to have the new format
[04:15:05] <bilb_ono> https://bpa.st/SGUA
[04:15:26] <nedbat> bilb_ono: what's wrong with line 3?
[04:15:37] *** Quits: rajkohaxor (~rajkosto@178-221-117-77.dynamic.isp.telekom.rs) (Quit: Leaving)
[04:15:52] <bilb_ono> nedbat: I want it to look like "\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00ff\u00da\u0000\b\u0001"
[04:15:53] *** Joins: rajkosto (~rajkosto@178-221-117-77.dynamic.isp.telekom.rs)
[04:15:58] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-98c6-7609-8b2e-86cc.res6.spectrum.com)
[04:16:09] <bilb_ono> so that I can tell what Im replacing
[04:16:09] <nedbat> bilb_ono: why do you want it to look that way? what's the final goal?
[04:16:29] <nedbat> bilb_ono: it won't have \u00 in it, because you replaced those bytes
[04:16:49] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[04:16:50] <bilb_ono> I believe .replace(‘\0’,’’) will remove the u\0000 at almost the very end but I want to make sure
[04:17:17] <nedbat> bilb_ono: you printed the result of that replace.  it has no \u00 in it.
[04:17:36] <bilb_ono> the goal is to insert this string into postgres. Right now its failing because it has a non-valid escaping character. I believe this is the \u0000 which Im trying to remove
[04:17:56] <nedbat> bilb_ono: this is a utf16 string. you should convert it to the format you want
[04:18:19] <nedbat> maybe it's utf16? hard to say
[04:18:22] <bilb_ono> nedbat: so ÅÆÇÈÉÊÒÓÔÕÖ×ØÙÚáâãäåæçèéêñòóôõö÷øùúÿÚ is the equivalend of c5c6c7c8c9ca… etc?
[04:19:13] *** Quits: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b) (Quit: WeeChat 3.2)
[04:20:17] <nedbat> bilb_ono: i think removing the zero bytes is not the right way to fix the data.  Where did the string come from?
[04:20:24] *** A_Dragon is now known as drg
[04:20:35] <bilb_ono> its a drivers lisence number
[04:20:50] <nedbat> that doesn't look like a number to me.
[04:21:04] *** drg is now known as A_Dragon
[04:21:04] <bilb_ono> i dont know much about the source system (how it gets input) I was wondering if its another language or something
[04:21:36] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 255 seconds)
[04:21:40] *** Quits: dre (~dre@2001:8003:c932:c301:b299:b352:c4c4:74a1) (Quit: Leaving)
[04:22:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:22:10] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 256 seconds)
[04:22:43] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-95db-0d7b-489b-5e3b.res6.spectrum.com) (Read error: Connection reset by peer)
[04:22:59] *** Joins: cjb (~cjb@user/cjb)
[04:23:37] *** Joins: cs (~ovnicraft@179.49.44.28)
[04:23:46] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[04:24:32] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:24:45] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Ping timeout: 255 seconds)
[04:25:19] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[04:28:13] *** Joins: Wulf4 (~Wulf@user/wulf)
[04:28:15] <akk> If I download youtube-dl (using wget or curl as described on http://ytdl-org.github.io/youtube-dl/download.html), I get something that file describes as "a /usr/bin/env python script executable (binary data)"
[04:28:31] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[04:28:38] *** Parts: furrykef (~furrykef@ip68-229-199-137.ok.ok.cox.net) (Leaving)
[04:28:50] <BtbN> sounds like about what I'd expect
[04:28:59] <mefistofeles> indeed
[04:29:02] <akk> It starts with #!/usr/bin/env python but then the next line is PK followed by a lot of, well, binary data, as described.
[04:29:18] <BtbN> Yeah, also sounds correct
[04:29:18] <akk> What is this and how is it python? Is it compiled python or something?
[04:29:46] <BtbN> probably the bytecode and/or compressed
[04:29:47] <phy1729> PK sounds like .zip
[04:30:13] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[04:31:57] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[04:32:06] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 276 seconds)
[04:32:06] *** Wulf4 is now known as Wulf
[04:32:11] <Yhg1s> akk: Python knows how to run things from zip files, so, yeah.
[04:32:20] <akk> What should I google for to understand this zipped binary format? I'm not having much luck.
[04:32:32] <Yhg1s> akk: https://docs.python.org/3/library/zipapp.html
[04:32:33] *** Quits: cs (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:32:49] *** Joins: pnoud (~pnoud@user/pnoud)
[04:33:04] *** Joins: cdown (~cdown@89.32.122.5)
[04:33:15] <akk> Thanks, Yhg1s, will read.
[04:33:22] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[04:34:10] *** Joins: p-i- (~Ohmu@node-rfq.pool-118-173.dynamic.totinternet.net)
[04:34:39] *** Quits: KindOne (kindone@user/kindone) (Quit: K-Lined™)
[04:35:14] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[04:35:33] *** Quits: cdown_ (~cdown@163.114.131.1) (Ping timeout: 255 seconds)
[04:36:23] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:37:48] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[04:37:49] *** Quits: melba_ (~melba@user/melba) (Read error: Connection reset by peer)
[04:38:42] *** Quits: p-i- (~Ohmu@node-rfq.pool-118-173.dynamic.totinternet.net) (Ping timeout: 255 seconds)
[04:40:21] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[04:40:37] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[04:42:00] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:42:31] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[04:42:59] *** Joins: punsoca (~punsoca@76-216-148-100.lightspeed.sntcca.sbcglobal.net)
[04:43:10] <punsoca> hi all
[04:43:20] <nedbat> punsoca: hey
[04:43:26] <punsoca> is this the official python IRC for Libera?
[04:43:30] <nedbat> yes
[04:43:30] <mefistofeles> yes
[04:43:31] <Gustavo6046> so I have a library that's kind of a bot framework for IRC and Discord
[04:43:35] <Gustavo6046> (XMPP support is planned for the near future)
[04:43:44] <nedbat> punsoca: it's the official python irc for everywhere
[04:43:45] <Gustavo6046> So it has like backend modules that contact those protocols
[04:43:47] <punsoca> thank you nedbat mefistofeles
[04:43:49] <Gustavo6046> And modules that allow creating bots
[04:44:25] <punsoca> hey guys, I have a seemingly simple question re python -  but its driving me nuts
[04:44:41] <Gustavo6046> a) How can I have a bot work from a different process? Like, say I have a Triarc bot running, but I want to connect some commands to it in realtime (like a Reactor pattenr) by running another process. What kind of RPC is generally used here?
[04:45:15] <Gustavo6046> b) Those are two additions I plan – XMPP support, and RPC modularity. Both can go very wrong before they are finished. Do I make separate Git branches for them? If so, how do I go about that?
[04:45:28] <Gustavo6046> c) How do I test something so network-oriented like this?
[04:45:42] <mefistofeles> punsoca: you can just ask
[04:46:01] <Gustavo6046> Ping me if any questions are answered
[04:46:32] <punsoca> so I am working on a flash tutorial and it has two python programs, "__init__.py" and "models.py".  both programs reside in the SAME folder.  My __init__.py has "import models" but when I run it  it says "ModuleNotFoundError: No module named 'models' "  gaaaaaahhhh
[04:46:48] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[04:46:50] <punsoca> I'm running from vagrant vm.
[04:47:21] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[04:47:32] <nedbat> punsoca: are you sure there are no typos? and that they are really in the same folder
[04:47:40] <punsoca> I am using vscode and I already noticed that the "import module" line inside __init__.py was highlighted
[04:47:53] <Yhg1s> punsoca: you need 'from . import module' in your __init__.py
[04:48:00] <punsoca> nedbat: yes, but let me type again
[04:48:03] <Yhg1s> eh, 'models'
[04:48:23] <punsoca> oh let me try that
[04:49:38] <punsoca> oh I AM SORRY-  I should say "from models import  functionX, functionY
[04:49:56] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[04:50:30] <punsoca> the "from . import models" seems to work, but I need "from models import FunctionX, FunctionY" - AND that is giving me error
[04:50:47] <Repiphany> from .models import FunctionX, FunctionY
[04:50:59] <Yhg1s> punsoca: 'from .models import ...'
[04:51:04] <punsoca> thanks let me try that
[04:51:25] <punsoca> it doesn't work
[04:51:44] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[04:51:50] <punsoca> I'm working on vscode and its showing a squiggly line under models
[04:52:15] <punsoca> "from .models import x, y". with a squiggly showing under models :(
[04:52:32] <Yhg1s> punsoca: and if you run it?
[04:52:39] *** Joins: nac3 (~nac@user/nac)
[04:52:52] *** Quits: DX099 (~dx099@2a01:e0a:347:f1c1:ad49:5bf5:11e:5a6d) (Ping timeout: 272 seconds)
[04:53:18] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[04:53:33] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 255 seconds)
[04:53:38] *** Joins: jesse-s (sid98646@id-98646.stonehaven.irccloud.com)
[04:53:55] *** Quits: y1n (~y1n@84-115-65-160.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[04:54:02] <punsoca> Yhg1s: oh it ran.... with a different error
[04:54:09] <punsoca> thank you, let me investigate that one
[04:54:18] *** Joins: y1n (~y1n@84-115-65-178.wifi.dynamic.surfer.at)
[04:56:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[04:56:31] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 246 seconds)
[04:56:36] *** Joins: Lando-HoloNet (~LandoC@user/lando-spacepimp)
[04:56:42] *** Quits: ssbr_ (~ssbr@python/site-packages/ssbr) (Ping timeout: 255 seconds)
[04:59:05] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[04:59:10] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:59:47] *** Joins: KindOne (kindone@user/kindone)
[05:00:23] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[05:01:11] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[05:01:28] *** Joins: schumaml3 (~schumaml@dslb-178-007-201-255.178.007.pools.vodafone-ip.de)
[05:01:46] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 246 seconds)
[05:02:07] *** Quits: Lando-HoloNet (~LandoC@user/lando-spacepimp) (Ping timeout: 246 seconds)
[05:02:16] *** Quits: rajkosto (~rajkosto@178-221-117-77.dynamic.isp.telekom.rs) (Quit: Leaving)
[05:02:33] *** Quits: schumaml2 (~schumaml@dslb-092-074-004-211.092.074.pools.vodafone-ip.de) (Ping timeout: 255 seconds)
[05:03:10] <punsoca> thank you so much guys - my flask is running now
[05:03:13] <punsoca> damn period
[05:03:37] <punsoca> I mean  it requires a period before models in 'from .models import x, y'
[05:04:45] *** Joins: veegee_ (~veegee@188.241.82.9)
[05:05:16] *** Quits: y1n (~y1n@84-115-65-178.wifi.dynamic.surfer.at) (Ping timeout: 246 seconds)
[05:06:09] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 255 seconds)
[05:08:04] <punsoca> Yhg1s: thank you, that "from .model" worked!
[05:08:20] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[05:08:21] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[05:08:24] *** Joins: veegee__ (~veegee@102.165.25.85)
[05:08:43] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[05:08:55] *** Joins: p-i- (~Ohmu@node-rfq.pool-118-173.dynamic.totinternet.net)
[05:09:09] *** Quits: veegee (~veegee@172.98.71.46) (Ping timeout: 276 seconds)
[05:11:13] *** Joins: veegee (~veegee@95.181.237.13)
[05:11:38] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 272 seconds)
[05:11:38] *** Quits: veegee_ (~veegee@188.241.82.9) (Ping timeout: 258 seconds)
[05:13:20] *** Quits: nac3 (~nac@user/nac) (Ping timeout: 265 seconds)
[05:13:26] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Remote host closed the connection)
[05:14:42] *** Quits: veegee__ (~veegee@102.165.25.85) (Ping timeout: 258 seconds)
[05:15:07] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Remote host closed the connection)
[05:16:20] *** Quits: dbristow (~dbristow@user/dbristow) (Quit: Leaving)
[05:17:29] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[05:17:49] *** Quits: slavfox (~slavfox@93.158.232.111) (Quit: ZNC 1.8.2 - https://znc.in)
[05:19:08] *** Quits: punsoca (~punsoca@76-216-148-100.lightspeed.sntcca.sbcglobal.net) (Quit: Client closed)
[05:20:10] *** Joins: slavfox (~slavfox@93.158.232.111)
[05:20:39] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[05:21:01] *** Quits: veegee (~veegee@95.181.237.13) (Ping timeout: 246 seconds)
[05:23:13] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[05:23:29] *** Joins: iNeedKoffee (~ubuntu@public.sa-edbd-dsto-liva1.aarnet.net.au)
[05:23:36] *** Joins: dbristow (~dbristow@user/dbristow)
[05:23:56] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[05:25:01] *** Joins: CodePoint (~BitShift@2600:1700:3070:3790::29)
[05:26:58] *** Quits: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net) (Ping timeout: 246 seconds)
[05:27:44] <sybariten> hey hey
[05:27:45] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 255 seconds)
[05:28:16] <sybariten> I'm guessing there is something not-so-okay with a line like this?      if valid_password(anotherPassword) == True:
[05:28:22] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 246 seconds)
[05:28:25] <sybariten> Cause it causes my linting to hickup
[05:28:35] <philipp64|work> I have the following line in a flask python app:
[05:28:37] <philipp64|work> @app.route('/<string:s>/<string:t>/requestEnrollment', methods = ['GET'])
[05:29:25] <philipp64|work> but when “s” and “t” are long I get a failure in Apache about “[Wed Jul 14 00:46:24.496652 2021] [core:error] [pid 21126] (36)File name too long: [client 45.33.216.244:62560] AH00036: access to …”
[05:29:31] <vimart> nedbat: I expected it to print radndom value from given list.
[05:29:39] <philipp64|work> how do people work around this?
[05:29:49] <nedbat> vimart: i'm forgetting what we were talking about
[05:30:18] <nedbat> sybariten: no need for "== True".  use ` if valid_password(anotherPassword): `
[05:30:21] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:31] <sybariten> nedbat: oh
[05:30:35] <sybariten> thanks
[05:31:26] <vimart> nedbat: w = lambda x: random.choice([1,0])
[05:31:42] <nedbat> vimart: why is it in a lambda?
[05:32:02] <nedbat> vimart: this will give you a random value:  w = random.choice([1,0])
[05:32:06] <vimart> >>> w >> <function <lambda> at 0x7f1e7a9f2e50>
[05:32:22] *** Joins: BlessJah (~BlessJah@user/blessjah)
[05:32:40] *** Quits: trace987 (~trace@ip5b4297b5.dynamic.kabel-deutschland.de) (Quit: Leaving)
[05:32:42] *** Quits: CodePoint (~BitShift@2600:1700:3070:3790::29) (Quit: Never gonna give you up, never gonna let you down...)
[05:32:42] *** Quits: ba (~ba@cpc93788-hari17-2-0-cust405.20-2.cable.virginm.net) (Ping timeout: 255 seconds)
[05:32:47] <vimart> nedbat: because I learn lambda :-)
[05:33:02] *** Joins: trace987 (~trace@ip5b4297b5.dynamic.kabel-deutschland.de)
[05:33:23] <Repiphany> lambdas are functions
[05:33:29] <Repiphany> w(1)
[05:33:29] <nedbat> vimart: a key thing to learn about anything is when to not use them.
[05:33:43] <vimart> Repiphany: anonymous functions precisely
[05:33:50] <Repiphany> You don't even use the argument x
[05:34:03] *** Joins: wyclif (~wyclif@user/wyclif)
[05:34:28] *** Joins: vlm (~vlm@user/vlm)
[05:34:37] <sybariten> Further on i also have some problem with this function. Something about the combination of elif and return  https://bpa.st/YKWA
[05:35:06] <sybariten> Anybody see what i did wrong there?
[05:35:20] <Repiphany> if inputValue is neither str nor int, your function is returning None
[05:35:34] <vimart> Repiphany: tried as well but similar effect
[05:35:44] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[05:36:05] <vimart> Repiphany: that's one of the attempts
[05:37:26] <Repiphany> vimart: https://bpa.st/IXTQ
[05:37:38] <Repiphany> but there's no reason for using lambda in the first place
[05:38:33] <sybariten> Repiphany: hmmm thats true. I'm not sure my coding exercise demanded a case like that though. However, i'm not sure that this is what the linting is complaining about? Maybe. Heres what it said
[05:39:03] <sybariten> functions.py:17:4: R1705: Unnecessary "elif" after "return" (no-else-return)
[05:39:26] <Repiphany> It wants you to handle the else case explicitly
[05:39:59] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[05:40:01] <Repiphany> the return None is implicit but it has no idea of knowing if that's intended behaviour
[05:40:07] *** Joins: pete443 (~pete@user/pete443)
[05:40:23] <Repiphany> maybe you want to throw an error on not int or str
[05:40:53] <vimart> Repiphany: I don't care it's or not, it's not something I'm going to use. I just do something to kill time lol. https://pastebin.com/rC7UNDtC
[05:41:30] *** Quits: pete443_ (~pete@user/pete443) (Ping timeout: 256 seconds)
[05:41:35] <Repiphany> Functions need to be called with ()
[05:41:53] <Repiphany> You're naming an anonymous function and not even calling it
[05:42:45] <Repiphany> `>>> t` is just returning repr(t)
[05:42:58] <Repiphany> if you want to actually run the function, `>>> t()`
[05:43:12] *** Joins: Celeo (~Celeo@user/celeo)
[05:44:24] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Read error: Connection reset by peer)
[05:44:55] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[05:45:11] *** Quits: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3) (Quit: Konversation terminated!)
[05:46:32] *** Joins: Dev0n (~Dev0n@user/dev0n)
[05:47:01] <vimart> Repiphany: got the thing thx
[05:48:46] <vimart> t = lambda x: random.choice(x) > t([0,1])
[05:49:33] <nedbat> vimart: nice
[05:49:56] <nedbat> vimart: now, hopefully this doesn't confuse things, but you could also:  t = random.choice
[05:50:59] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[05:51:14] <vimart> nedbat: I was curious about lambda, not how to use random or whatever ;-)
[05:51:47] *** Joins: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu)
[05:51:53] *** Joins: DocMors (~DocMors@web.crypticity.net)
[05:52:06] <nedbat> vimart: my point is about making and using functions as objects. wherever you could use lambda, you might be able to also avoid them by using existing functions directly.
[05:53:20] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[05:53:36] *** Joins: Jacktar_ (~whiteshad@gateway/tor-sasl/jacktar)
[05:53:43] <AhmedAmerican_> pandas can't read excel file in chunks anymore?
[05:54:07] *** Quits: nirix (uid48447@id-48447.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[05:54:19] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Ping timeout: 244 seconds)
[05:54:20] *** Jacktar_ is now known as jacktar
[05:54:47] <mefistofeles> AhmedAmerican_: I don't reacall it ever doing that
[05:54:47] <AhmedAmerican_> seems so https://github.com/pandas-dev/pandas/issues/17094
[05:54:56] <mefistofeles> oh
[05:55:00] <mefistofeles> interesting
[05:55:47] <sybariten> Repiphany: thanks, but I'm sorry, what does it mean to handle the else case explicitly?  I'm suggesting an "if" now, if an inputvalue is a string....  then send said string into a function, and return the result. Then i have an elsif which is for if the inputvalue is an integer instead... which sends the inputvalue to another function.
[05:56:30] <sybariten> Repiphany: it's not pretty, i agree ....  but is it also technically wrong?
[05:56:35] <Repiphany> What should happen if `decider([1,7,3,6])` gets run
[05:56:40] <vimart> finally I got solution to what I wanted: t= lambda x: print(x) > t('Hello World')
[05:56:50] <sybariten> Repiphany: a list you mean
[05:57:04] <Repiphany> Yes
[05:57:24] <Repiphany> Write explicitly what should happen if both of your if-elif cases are False
[05:57:58] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[05:58:05] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 255 seconds)
[05:58:16] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[05:58:50] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[05:58:53] <sybariten> Repiphany: No, i agree, i have not taken precautions for that. The exercise was a bit sparsely describeed, i would say....  https://pastebin.com/xnz406YW
[05:59:20] <Repiphany> I don't care what happens, I'm just saying why the linter probably cares and what to do to avoid it
[06:00:01] <AhmedAmerican_> `t= lambda x: print(x) ` --> it's just `print(x)` ! nothing new
[06:00:11] <AhmedAmerican_> vimart: ^
[06:00:37] <sybariten> Repiphany: yup.... so would if/elif/else help? And can i in that case do nothing for else?
[06:00:44] <vimart> nedbat: I get the point thx. My point was only why it doesn't print. Another thing is what is going on with  lambda withoug parameter.
[06:01:05] <Repiphany> Just `return None` if you don't care what happens
[06:01:34] <sybariten> else return None ?
[06:01:54] <Repiphany> Sure
[06:03:56] *** Quits: p-i- (~Ohmu@node-rfq.pool-118-173.dynamic.totinternet.net) (Remote host closed the connection)
[06:05:01] <sybariten> thanks that got rid of one error (one of two that was left) ... but i still have one now. "Unnecessary "elif" after "return" (no-else-return)" . Thats for a block that looks like this  https://bpa.st/KTDQ
[06:06:33] *** Joins: brabrax- (~brabrax@user/brabrax)
[06:06:38] <Repiphany> Is that supposed to be the same block of code
[06:07:36] <sybariten> hmmmm no slightly altered now? With the else line
[06:07:39] *** Quits: vimart (~vimart@85.255.237.185) (Quit: WeeChat 2.8)
[06:07:48] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 255 seconds)
[06:07:48] *** brabrax- is now known as brabrax
[06:08:14] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 272 seconds)
[06:08:48] <Repiphany> I mean is that the block of code that has the linting error
[06:08:52] *** Quits: hposca (~hposca@node-1w7jr9phoke2td1e507xtdn5o.ipv6.telus.net) (Ping timeout: 245 seconds)
[06:09:17] *** Joins: milosz_ (~milosz@user/milosz)
[06:10:01] <sybariten> Repiphany: should be, yes... let me double check
[06:10:04] <[itchyjunk]> Tutorial says `for` loop is for iterating over sequence. If i am using a numpy array, should i still think of it as a sequence i iterate over with a for?
[06:10:20] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[06:10:20] <[itchyjunk]> I have a 5x5 matrix and i want to set all the boundry value to 0
[06:10:53] <sybariten> Repiphany: it is, yes
[06:10:55] <Repiphany> [itchyjunk]: look at numpy.ndenumerate
[06:10:57] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 255 seconds)
[06:11:00] <[itchyjunk]> [0,0] to [0,x] , [0,0] to [x,0], [0,x] to [x,x]
[06:11:05] <[itchyjunk]> oh okay, ty
[06:11:57] <raxor2k> what is the difference in asyncio return_exceptions = True and asyncio return_exceptions = False ?
[06:12:00] <raxor2k> does it matter?
[06:12:06] <[itchyjunk]> oh you still do use `for` loops interesting
[06:13:04] *** Quits: milosz__ (~milosz@user/milosz) (Ping timeout: 272 seconds)
[06:13:10] <Repiphany> Using vectorized functions is preferred in general to looping over the array if possible
[06:13:46] <[itchyjunk]> hmmm i don't think i understand :<
[06:14:53] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 258 seconds)
[06:14:54] <Repiphany> `b = 2*a` instead of `for i, v in np.ndenumerate(a): b[i] = 2*v`
[06:16:03] <grym> you've got vectors; use 'em!
[06:16:21] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 255 seconds)
[06:16:42] <[itchyjunk]> oh i see. b can take vector as input and spits a vector as output (i think called vector valued vector function) ?
[06:16:49] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Ping timeout: 268 seconds)
[06:17:02] <[itchyjunk]> basically, i am taking a nxn array and setting all the boundry to 0 so this gives me a flat game of life board
[06:17:05] <grym> [itchyjunk]: and numpy does it *fast*
[06:17:08] <[itchyjunk]> otherwise, i end up with a torus
[06:17:31] <[itchyjunk]> hmm, not sure how good i am at casting the problem in terms of vector functions though
[06:18:56] <[itchyjunk]> for np.ndenumerate, i get index,value. is the index a list tuples? if i can say something like if index starts with 0 or ends with `column_number` set that value to 0
[06:19:09] <Repiphany> [itchyjunk]: https://bpa.st/U6SQ with broadcasting
[06:19:18] <Repiphany> er, not broadcasting
[06:19:42] <[itchyjunk]> damn..
[06:19:43] <Repiphany> slicing
[06:20:18] <[itchyjunk]> i need to refresh on slicing. i didn't realize it worked directly with this new data structure
[06:22:08] *** Quits: nbao (~nbao@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Quit: WeeChat 3.2)
[06:24:15] <[itchyjunk]> a[:,0] seems to be returning the first row. so a[x:y] would say start at x and end at y. so here a[:,0] is saying start at any and end at 0 so i get the first column. but i don't get why it's ,0 and not 0
[06:24:24] <[itchyjunk]> first column not row*
[06:24:30] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[06:26:30] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[06:27:47] <[itchyjunk]> hmm maybe slice can take in tuples as index so a[(x,y):(x',y')] says start at index x,y upto x',y' so ,y' says for any x' having y' as second index?
[06:29:02] <Repiphany> https://numpy.org/doc/stable/reference/arrays.indexing.html
[06:29:11] <[itchyjunk]> ah :s thanks
[06:29:44] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[06:29:51] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[06:30:07] *** Quits: akk (~akk@97-123-109-214.albq.qwest.net) (Quit: +++)
[06:30:38] *** Joins: zeden (~zeden@user/zeden)
[06:30:45] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 255 seconds)
[06:31:05] <Repiphany> a[0,:] is actually equivalent to a[0] but it highlighted the symmetry better
[06:32:04] *** Quits: ircuser32 (~ircuser@190.236.211.35) (Ping timeout: 246 seconds)
[06:32:20] *** Joins: ST47 (~ST47@user/st47)
[06:32:44] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[06:33:38] *** Joins: pnoud (~pnoud@user/pnoud)
[06:33:51] <[itchyjunk]> hm
[06:35:12] *** Quits: schumaml3 (~schumaml@dslb-178-007-201-255.178.007.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[06:36:27] *** Joins: djapo (~archangel@user/djapo)
[06:38:51] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[06:39:40] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 272 seconds)
[06:39:52] <[itchyjunk]> hm, for any given `index` (x,y), i would like to check the value of (x+1,y), (x-1,y), (x,y-1), (x,y+1) , (x+1,y+1) ,(x-1,y-1)
[06:40:35] <[itchyjunk]> I guess given `index`, do i just refrence to index[a,b] to refrence them?
[06:40:39] <[itchyjunk]> hmm i can just test this
[06:41:25] *** Quits: raxor2k (~raxor2k@204.109-247-146.customer.lyse.net) ()
[06:43:53] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[06:48:47] *** Quits: d00gy (~tonberry@2601:401:c400:8b30:ba27:ebff:fee2:f93c) (Quit: WeeChat 3.0)
[06:49:08] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:49:08] *** FinnElija is now known as Guest2571
[06:49:08] *** Quits: Guest2571 (~finn_elij@user/finn-elija/x-0085643) (Killed (sodium.libera.chat (Nickname regained by services)))
[06:49:08] *** finn_elija is now known as FinnElija
[06:49:14] *** Joins: schumaml3 (~schumaml@dslb-178-007-194-182.178.007.pools.vodafone-ip.de)
[06:52:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:54:23] *** Quits: KindOne (kindone@user/kindone) (Excess Flood)
[06:54:40] *** Joins: KindOne (kindone@user/kindone)
[06:56:06] *** Joins: defn (~n0b0dy@user/defn)
[06:56:08] *** Quits: schumaml3 (~schumaml@dslb-178-007-194-182.178.007.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[06:57:41] <[itchyjunk]> What is the difference between using a bunch of if statements vs using if elif else statements?
[06:58:55] *** Jin^eLD is now known as Jin|away
[06:58:58] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 258 seconds)
[06:59:01] <mefistofeles> [itchyjunk]: I guess the former doesn't exclude many of them being simultaneously true/aplicable
[06:59:06] <mefistofeles> whereas the elif does
[06:59:09] <InPhase> [itchyjunk]: Correctness or incorrectness sometimes.
[06:59:55] <[itchyjunk]> hmm, i guess i want later then. since game of life has specific things to do for each condition
[07:00:04] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[07:00:57] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 245 seconds)
[07:01:44] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Quit: Bye Bye)
[07:01:48] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 255 seconds)
[07:02:12] *** Joins: jacktar (~whiteshad@gateway/tor-sasl/jacktar)
[07:02:15] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:03:23] <[itchyjunk]> :<
[07:06:11] <[itchyjunk]> argh, index out of bounds error
[07:06:38] <[itchyjunk]> stupid thing needs to check for neighbors only if it's not the boundry ones
[07:07:04] *** Quits: KindOne (kindone@user/kindone) (Remote host closed the connection)
[07:07:38] <mefistofeles> [itchyjunk]: you might want periodic boundary conditions for game of life, fwiw
[07:07:57] <[itchyjunk]> hmm what does pediodic boundry condition mean?
[07:08:10] <desophos> hi, i'm struggling with changing the behavior of JSONEncoder. i'm reading some floats from a text file and i want to preserve their exact formatting/precision when i dump them to JSON. i'm using the float_string class shown here: https://gist.github.com/odony/5269a695545902e7e23e761e20a9ec8c. however, if it inherits from float, JSONEncoder seems to convert it to float, mangling its precision. if it doesn't inherit float, then i
[07:08:10] <desophos> can pass `default=repr` to json.dump to get the exact representation, but i don't know how to get JSONEncoder to dump it as a JSON number (without "") instead of a string (with ""). how can i accomplish this? thanks for your time!
[07:08:45] *** Joins: kmh_ (~kmh@p200300df5f08b90090b8c32c2ae74bf4.dip0.t-ipconnect.de)
[07:09:04] *** Joins: smqra (~rooba@208.110.85.44)
[07:09:10] <mefistofeles> [itchyjunk]: https://en.wikipedia.org/wiki/Periodic_boundary_conditions
[07:09:19] *** Quits: defn (~n0b0dy@user/defn) (Quit: ZNC 1.8.2 - https://znc.in)
[07:09:48] *** Joins: defn (~n0b0dy@user/defn)
[07:11:33] <desophos> (i know `default=repr` isn't ideal because it also works on other types that aren't float_string. it's temporary)
[07:13:18] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[07:13:54] *** Joins: fflam (~mdt@pool-96-253-99-54.rcmdva.fios.verizon.net)
[07:14:37] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:15:04] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[07:15:27] <[itchyjunk]> omg
[07:15:30] <[itchyjunk]> i think it works
[07:15:36] <[itchyjunk]> but i can't tell
[07:15:46] <[itchyjunk]> I am at least 7% sure it does
[07:15:59] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[07:16:08] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[07:17:51] *** Joins: tg (~tg@rockylinux/infra/tg)
[07:17:51] *** Quits: decimuscorvinus_ (~jimmy@136.37.105.112) (Read error: Connection reset by peer)
[07:19:48] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[07:20:04] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[07:23:02] *** Joins: KindOne (kindone@user/kindone)
[07:25:52] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[07:26:17] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:26:49] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[07:27:00] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[07:28:40] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[07:29:31] <[itchyjunk]> it's running up it's not following the rules like it needs to. Need debugging help :<
[07:29:33] <[itchyjunk]> https://bpa.st/YI6A
[07:29:54] <[itchyjunk]> when it has 3 alive neighbors, it's not getting updated to 1
[07:30:31] <[itchyjunk]> my code does have a `if value == 0 and sum == 3:` condition
[07:31:27] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[07:32:51] *** Quits: jazzy (~jaziz@2600:380:c114:2d85:8093:7182:dd7:1044) (Ping timeout: 255 seconds)
[07:33:02] <mefistofeles> [itchyjunk]: where are you changing sum value other than line 15 (sum = 0) ?
[07:33:12] <mefistofeles> oh, line 13 hmm
[07:33:30] <[itchyjunk]> ohhh i am not resetting the variable is my issue?
[07:33:42] <[itchyjunk]> that might be it
[07:33:47] <[itchyjunk]> its infinitely increasing
[07:34:12] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-98c6-7609-8b2e-86cc.res6.spectrum.com) (Ping timeout: 255 seconds)
[07:34:50] <mefistofeles> I don't think so
[07:35:29] <mefistofeles> [itchyjunk]: but for starters you can get some print statement after line 19 to see if it's actually entering that conditional
[07:36:27] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 255 seconds)
[07:39:03] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[07:39:09] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[07:40:30] <CrtxReavr> desophos, store them as strings then. . . or decimals maybe?
[07:45:41] <desophos> CrtxReavr, do you mean in the JSON? the issue then is that json.load interprets them as strings. do i need to just check all strings from json.load to see if they contain floats? if that's the most straightforward solution, then i can do that, but i was hoping there was a way to store them as floats in the JSON. the python representation is taken care of, it's just the JSON serialization and deserialization that's the problem
[07:45:53] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:46:58] <desophos> i could also store type metadata in the JSON for every string, but that's cumbersome
[07:47:54] *** Quits: swistak (~swistak@185.21.216.141) (Ping timeout: 252 seconds)
[07:48:11] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[07:49:00] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (Ping timeout: 252 seconds)
[07:49:14] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[07:49:24] <desophos> the ideal solution would be to tell the encoder "don't put quotes around this string", but i looked at the source of JSONEncoder and it seems like it's hardcoded to put quotes around strings and not around other types
[07:49:43] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[07:53:19] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[07:54:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:55:22] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 246 seconds)
[07:57:09] *** Joins: nmoura (~nmoura@177.192.16.58)
[07:57:54] *** Joins: zeden (~zeden@user/zeden)
[07:57:56] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[07:58:00] *** Quits: nmoura (~nmoura@177.192.16.58) (Client Quit)
[07:58:48] *** Joins: Lvl4Sword (sid483043@user/lvl4sword)
[07:59:12] <desophos> also, it's hardcoded to use float.__repr__, even for float subclasses: https://github.com/python/cpython/blob/fe73509c5ba3844b45a2253967522531ab80c849/Lib/json/encoder.py#L224
[07:59:31] *** Joins: nmoura (~nmoura@177.192.16.58)
[07:59:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[08:00:34] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:00:47] <desophos> if it called repr instead of float.__repr__, everything would be fine
[08:01:06] <desophos> (for my specific problem)
[08:01:34] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 250 seconds)
[08:02:08] <desophos> also, floatstr isn't even a method on the class, it's defined inside iterencode. i wish i could override floatstr
[08:03:14] *** Quits: nmoura (~nmoura@177.192.16.58) (Client Quit)
[08:06:09] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 255 seconds)
[08:07:42] <desophos> there's a comment that says "Subclasses of int/float may override __repr__, but we still want to encode them as integers/floats in JSON." however, it still calls float.__repr__, which would seem to ignore subclasses' overridden __repr__? i don't understand the reasoning here
[08:08:28] *** Joins: nmoura (~nmoura@177.192.16.58)
[08:08:33] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[08:08:44] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:09:29] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:09:58] *** Joins: djapo (~archangel@user/djapo)
[08:12:07] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[08:13:35] *** Joins: cheater1__ (~Username@user/cheater)
[08:13:45] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 276 seconds)
[08:13:51] *** cheater1__ is now known as cheater
[08:18:02] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:18:29] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[08:18:45] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:19:30] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-1918-031e-f5de-f9d5.res6.spectrum.com)
[08:20:33] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[08:21:07] *** Joins: salparadise (~salparadi@129.146.17.140)
[08:22:42] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[08:22:48] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 255 seconds)
[08:23:14] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 250 seconds)
[08:23:18] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:25:14] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[08:26:12] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:26:43] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-1918-031e-f5de-f9d5.res6.spectrum.com) (Quit: jarthur)
[08:27:33] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Remote host closed the connection)
[08:30:30] *** Quits: tsaka__ (~torstein@athedsl-4491135.home.otenet.gr) (Quit: Konversation terminated!)
[08:32:21] <desophos> ok, i can't actually just write the floats to JSON as strings because i also have strings in the input data that look like floats, so i need to maintain that distinction
[08:34:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[08:34:29] *** Joins: pnoud (~pnoud@user/pnoud)
[08:35:13] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[08:35:31] <desophos> i guess i am just going to store the type info
[08:35:37] <desophos> (in the JSON)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:37:47] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-1918-031e-f5de-f9d5.res6.spectrum.com)
[08:37:54] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 240 seconds)
[08:40:05] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[08:40:24] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[08:40:28] *** Joins: CombatVet (~c4@user/combatvet)
[08:40:38] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 272 seconds)
[08:40:47] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:42:40] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:43:10] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[08:46:38] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-1918-031e-f5de-f9d5.res6.spectrum.com) (Quit: jarthur)
[08:47:02] *** Joins: tijuco (~tijuco@user/tijuco)
[08:47:30] *** Joins: wyclif (~wyclif@user/wyclif)
[08:47:30] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[08:48:28] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:49:04] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[08:49:58] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 246 seconds)
[08:51:47] *** Quits: isekaijin (~pyon@user/pyon) (Ping timeout: 255 seconds)
[08:52:08] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[08:52:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[08:53:54] *** Joins: stoneware (~stoneware@user/stoneware)
[08:54:05] *** Joins: isekaijin (~pyon@user/pyon)
[08:55:14] *** Joins: pnoud (~pnoud@user/pnoud)
[08:55:45] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Remote host closed the connection)
[08:55:47] *** Joins: tims (~tims@193-82-234-90.tpgi.com.au)
[08:57:59] *** Joins: wyclif (~wyclif@user/wyclif)
[09:01:02] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:03:37] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:03:50] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[09:04:18] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[09:04:56] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 272 seconds)
[09:07:52] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 272 seconds)
[09:09:55] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 246 seconds)
[09:10:25] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:10:53] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[09:11:59] *** Joins: djapo (~archangel@user/djapo)
[09:16:31] *** Quits: tijuco (~tijuco@user/tijuco) (Quit: Leaving)
[09:18:37] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:19:30] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[09:21:25] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[09:21:34] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 258 seconds)
[09:21:36] *** Quits: stoneware (~stoneware@user/stoneware) (Quit: I'll be back soon)
[09:21:36] *** Joins: sebastianos (~sebastian@user/sebastianos)
[09:21:48] *** Joins: japh (~scp1@user/japh)
[09:22:22] <japh> https://github.com/ppannuto/python-titlecase "itlecase also provides a command line utility titlecase" - I can't find it anywhere, neither installed on my system or in the source repo? oO
[09:22:48] <Widdershins> japh: did you install it in a virtualenv
[09:23:00] <japh> I think so
[09:23:07] <japh> in ~
[09:23:13] *** Joins: traetes (~traetes@185.123.143.219)
[09:23:20] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[09:23:23] <japh> but I checked the location with pip3 show titlecase
[09:23:36] <japh> and the script isn't there, neither in the repo
[09:23:56] *** Quits: traetes (~traetes@185.123.143.219) (Client Quit)
[09:23:59] <Widdershins> japh: https://github.com/ppannuto/python-titlecase/blob/367d918e6cdc7b38f961d3a0ba066b6768ac2fc5/setup.cfg#L49
[09:24:15] <Widdershins> it should be in the virtualenv/bin/titlecase
[09:24:27] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 255 seconds)
[09:24:41] <Widdershins> setuptools should probably install a wrapper script
[09:24:50] *** Joins: stoneware (~stoneware@user/stoneware)
[09:24:52] <japh> hm
[09:25:20] <Widdershins> not sure where those scripts go when you install it in the system python
[09:25:36] <Widdershins> if it comes to that
[09:26:00] <japh> /home/scp1/.local/lib/python3.9/site-packages/titlecase
[09:26:05] <japh> there's just the init and tests there
[09:26:31] <Widdershins> it doesn't go in that folder
[09:26:36] <Widdershins> it goes in the bin folder
[09:26:43] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[09:26:49] <japh> oh dear
[09:26:52] <japh> there it is!
[09:27:06] <japh> ~/.local/bin/titlecase
[09:27:11] <japh> thank you
[09:27:14] <Widdershins> that's the one
[09:27:24] *** Quits: stoneware (~stoneware@user/stoneware) (Client Quit)
[09:27:32] <Widdershins> if you cat that you'll see it's a setuptools wrapper script that calls the function
[09:28:50] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[09:28:51] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[09:29:11] *** Joins: stranac (~stranac@195.29.239.126)
[09:29:25] <japh> interesting. learning more by the minute. I'm a perl programmer that slowly tries to learn python and its ecosystem
[09:30:18] *** Quits: sebastianos (~sebastian@user/sebastianos) (Quit: ZNC 1.8.2 - https://znc.in)
[09:33:42] <japh> it's a really great module, titlecase
[09:34:04] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 246 seconds)
[09:34:41] *** Joins: cheater (~Username@user/cheater)
[09:35:28] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c:500a:f04e:5614:56a9)
[09:36:33] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[09:36:37] *** Quits: kor1 (~kor1@user/kor1) (Quit: Leaving.)
[09:37:02] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[09:37:19] *** Joins: kor1 (~kor1@user/kor1)
[09:37:19] *** Joins: stoneware (~stoneware@user/stoneware)
[09:38:03] *** Joins: Blankspace (~abcd@user/blankspace)
[09:41:12] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[09:42:43] *** Quits: kor1 (~kor1@user/kor1) (Quit: Leaving.)
[09:44:31] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:44:37] *** Quits: PiRATA (~weechat@user/pirata) (Quit: PiRATA)
[09:44:45] *** Quits: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com) (Remote host closed the connection)
[09:47:06] *** Joins: Dwoffi (~doffi@91.132.197.188)
[09:47:21] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 276 seconds)
[09:47:31] *** Joins: sebastianos (~sebastian@user/sebastianos)
[09:48:35] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:49:42] *** Quits: Doffi (~doffi@91.132.197.188) (Ping timeout: 256 seconds)
[09:52:19] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:55:15] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[09:55:18] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:55:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:58:38] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:00:47] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[10:02:03] *** Quits: Omega037 (~Omega037@047-024-168-024.res.spectrum.com) ()
[10:03:15] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[10:05:14] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:09:15] *** Joins: y1n (~y1n@84-115-65-119.wifi.dynamic.surfer.at)
[10:09:27] *** Quits: yates (~user@096-036-098-109.biz.spectrum.com) (Ping timeout: 255 seconds)
[10:09:49] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:11:42] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 255 seconds)
[10:12:17] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:12:35] *** Joins: Pickchea (~private@user/pickchea)
[10:13:44] *** Joins: rajkosto (~rajkosto@178-221-117-77.dynamic.isp.telekom.rs)
[10:14:22] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[10:15:38] *** Quits: Fluxx (~Fluxx@user/fluxx) (Remote host closed the connection)
[10:16:03] *** Joins: Fluxx (~Fluxx@user/fluxx)
[10:17:20] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[10:18:13] *** Quits: xsperry (~as@user/xsperry) ()
[10:21:13] *** Quits: emika (~emika@5.181.235.116) (Ping timeout: 265 seconds)
[10:21:14] *** Quits: sebastianos (~sebastian@user/sebastianos) (Quit: ZNC 1.8.2 - https://znc.in)
[10:22:50] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:23:27] *** Joins: sebastianos (~sebastian@user/sebastianos)
[10:23:34] *** Joins: majors (~majors@user/majors)
[10:23:44] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[10:24:36] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:25:57] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Quit: Lost terminal)
[10:27:23] *** Quits: majors (~majors@user/majors) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[10:27:42] *** Joins: majors (~majors@user/majors)
[10:28:20] *** Parts: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) ()
[10:29:05] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[10:29:48] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[10:29:55] *** Joins: dvx (~dvx@185.63.97.64)
[10:30:54] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[10:32:00] <AhmedAmerican_> within `pandas`, it's possible to iterate over `DataFrame` as a generator ?
[10:33:33] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:34:01] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[10:37:05] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Quit: Leaving)
[10:38:56] <jinsun> AhmedAmerican_: DataFrame.items or DataFrame.iterrows ?
[10:40:07] *** Joins: emika (~emika@5.181.235.116)
[10:41:11] <AhmedAmerican_> iterrows
[10:41:17] *** Joins: cedric (~cedric@2a01:cb11:867:c200:a358:e568:3dc8:d124)
[10:43:50] <jinsun> well both of them are actual methods available on DataFrames and both give you a generator
[10:43:52] *** Joins: pycode (~pycode@2001:b07:5d28:551:d32a:34dd:f8ef:945c)
[10:46:09] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:47] *** Joins: seednode (~seednode@user/seednode)
[10:48:14] <nubonix_> anyone able to help me with rpyc ssl auth?
[10:48:22] *** nubonix_ is now known as nubonix
[10:52:04] <AhmedAmerican_> jinsun: you meant iterating over them directly is count as generator ? or i need to use `iter(df.iterrows())`
[10:53:55] *** Joins: gggpkm (~gggpkm@117.61.17.58)
[10:55:40] <jinsun> AhmedAmerican_: df.iterrows() already gives a generator, you can call iter on that if you want but it will just return itself, and you can directly loop over it too `for row in df.iterrows(): ...`
[10:56:23] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:57:07] <AhmedAmerican_> jinsun: Thank you. Just checked the type and noticed it's a generator already.
[10:57:10] *** Quits: gggpkm (~gggpkm@117.61.17.58) (Read error: Connection reset by peer)
[10:58:04] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[10:58:15] *** Joins: gusto (~Augustus@109.255.100.54)
[10:58:53] *** Joins: chele (~chele@user/chele)
[10:59:24] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[11:01:31] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[11:02:30] *** Joins: manti7 (~manti7@176.10.104.94)
[11:03:25] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[11:03:27] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 245 seconds)
[11:05:04] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 258 seconds)
[11:05:26] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[11:05:26] *** Joins: Julian (~tos9@python/site-packages/Julian)
[11:07:11] *** Joins: vassen (~vassen@188.170.194.102)
[11:09:06] *** Quits: Vision (~Vision@024-178-231-009.res.spectrum.com) (Read error: Connection reset by peer)
[11:10:08] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[11:10:50] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[11:12:43] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[11:12:56] *** Quits: y1n (~y1n@84-115-65-119.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[11:14:33] *** Joins: rendar (~rendar@user/rendar)
[11:16:57] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:17:28] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:18:05] *** Joins: y1n (~y1n@84-115-65-32.wifi.dynamic.surfer.at)
[11:19:18] *** Joins: jinsun (~quassel@user/jinsun)
[11:21:07] *** Joins: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il)
[11:22:35] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:22:42] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[11:22:54] *** Joins: pnoud (~pnoud@user/pnoud)
[11:23:24] *** Joins: palasso (~palasso@user/palasso)
[11:23:31] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:31:02] *** Joins: emika1 (~emika@5.181.235.116)
[11:32:15] *** Joins: masber (~masber@vpn-24.cscs.ch)
[11:32:42] *** Quits: emika (~emika@5.181.235.116) (Ping timeout: 255 seconds)
[11:32:42] *** emika1 is now known as emika
[11:34:44] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[11:38:14] *** Joins: hjmcnew (sid86092@id-86092.tinside.irccloud.com)
[11:40:02] *** Quits: gutt_ (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net) (Read error: Connection reset by peer)
[11:42:12] *** Quits: trace987 (~trace@ip5b4297b5.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[11:47:26] *** Joins: scp1 (~scp1@user/japh)
[11:50:11] *** Quits: japh (~scp1@user/japh) (Ping timeout: 252 seconds)
[11:50:57] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 245 seconds)
[11:51:36] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 255 seconds)
[11:51:38] *** Joins: akaWolf (~akaWolf@akawolf.org)
[11:53:10] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[11:53:45] *** Joins: mchlumsky7 (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[11:53:56] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Read error: Connection reset by peer)
[11:53:56] *** mchlumsky7 is now known as mchlumsky
[11:53:59] *** Quits: scp1 (~scp1@user/japh) (Read error: Connection reset by peer)
[11:54:20] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[11:55:51] <Gustavo6046> :(
[11:58:25] *** Joins: upsala (~zcb@185.213.155.160)
[11:58:51] *** Quits: upsala (~zcb@185.213.155.160) (Client Quit)
[11:59:29] *** Joins: upsala (~zcb@185.213.155.160)
[11:59:38] *** Quits: Tempesta (Tempesta@user/tempesta) (Read error: Connection reset by peer)
[11:59:48] *** Joins: NeoCore (~neocore@217.138.207.156)
[12:00:21] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[12:00:39] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[12:01:03] *** Quits: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net) (Ping timeout: 255 seconds)
[12:02:51] *** Quits: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il) (Quit: Konversation terminated!)
[12:04:00] *** Joins: Tempesta (Tempesta@user/tempesta)
[12:05:03] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:05:04] *** Joins: AquaL1te_ (~AquaL1te@user/aqual1te)
[12:05:04] *** Quits: AquaL1te_ (~AquaL1te@user/aqual1te) (Client Quit)
[12:05:53] *** Joins: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net)
[12:06:18] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[12:06:44] *** Quits: b_jonas (~x@catv-176-63-12-145.catv.broadband.hu) (Quit: leaving)
[12:11:46] *** Quits: vassen (~vassen@188.170.194.102) (Ping timeout: 258 seconds)
[12:12:55] *** Quits: y1n (~y1n@84-115-65-32.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[12:13:09] *** Joins: y1n (~y1n@84-115-65-32.wifi.dynamic.surfer.at)
[12:14:33] *** Quits: audiocat (~audio@2603-8081-1800-00ad-22dd-cec0-26c4-09c5.res6.spectrum.com) (Ping timeout: 255 seconds)
[12:15:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:17:29] *** Joins: ssbr_ (~ssbr@python/site-packages/ssbr)
[12:18:26] *** Joins: d3vyL (d3vyL@host-95-250-37-25.retail.telecomitalia.it)
[12:20:02] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:22:57] *** Joins: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il)
[12:26:07] <ferz> How can I upgrade SQLAlchemy package from 1.3 to 1.4.x in a virtual env?
[12:28:00] *** Joins: nattiestnate (~nate@36.70.197.105)
[12:30:33] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 258 seconds)
[12:31:24] <dav1d>  ferz, pip install -U?
[12:32:06] *** Quits: stranac (~stranac@195.29.239.126) (Ping timeout: 255 seconds)
[12:34:24] *** Quits: nubonix (uid492751@id-492751.charlton.irccloud.com) ()
[12:34:51] *** Joins: nubonix (uid492751@id-492751.charlton.irccloud.com)
[12:35:50] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[12:36:15] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:28] *** Joins: djapo (~archangel@user/djapo)
[12:38:52] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:29] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 255 seconds)
[12:40:39] *** Quits: TheRAt (~TheRAt@user/therat) (Quit: :))
[12:40:43] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[12:42:05] *** Joins: jazzy (~jaziz@2600:380:8451:9914:745f:c6b0:8b18:af60)
[12:43:56] *** Quits: Blankspace (~abcd@user/blankspace) (Remote host closed the connection)
[12:43:59] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[12:44:51] *** Joins: stranac (~stranac@195.29.239.126)
[12:46:04] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[12:46:41] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:cd80:9697:e922:dc30)
[12:52:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[12:53:33] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[12:54:20] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 255 seconds)
[12:55:20] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[12:55:51] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[12:55:58] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:55:59] *** Joins: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3)
[12:56:38] *** Joins: daxx (uid508412@user/daxx)
[12:56:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[12:57:09] *** Joins: rpkilby (~rpkilby@2600:100f:b12e:fb8:44a2:31a8:b3c6:8b76)
[12:57:11] *** Lord_of_Life_ is now known as Lord_of_Life
[13:00:30] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[13:02:01] *** Joins: bluesmonk (uid318026@id-318026.brockwell.irccloud.com)
[13:02:17] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:04:30] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[13:04:58] *** Joins: wyclif (~wyclif@user/wyclif)
[13:05:02] *** Quits: desophos (~desophos@2601:249:1680:a570:489c:f364:abf0:5de7) (Quit: Leaving)
[13:05:05] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:05:32] *** Joins: Naan (~Naan@user/naan)
[13:07:01] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Client Quit)
[13:07:18] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[13:07:34] *** Joins: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de)
[13:07:48] <nubonix> hey graingert, have a starlette q. so im trying to use a self signed cert, but i havent found any documentation on this, and google is extremely sparse
[13:08:21] <graingert> nubonix: imho it's best to use nginx to terminate TLS
[13:08:41] *** Joins: minip (minip@user/minip)
[13:09:04] <nubonix> graingert ?
[13:10:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[13:12:49] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Ping timeout: 246 seconds)
[13:12:52] <graingert> nubonix: ?
[13:13:25] *** Quits: y1n (~y1n@84-115-65-32.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[13:13:34] <graingert> nubonix: Also are you sure you want to use selfsigned? Like it's really easy to use certbot to get a real one
[13:13:53] *** Quits: nattiestnate (~nate@36.70.197.105) (Quit: WeeChat 3.2)
[13:14:20] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[13:14:27] <ferz> dav1d: thank you
[13:14:44] *** Joins: y1n (~y1n@84-115-64-173.wifi.dynamic.surfer.at)
[13:15:19] <nubonix> graingert: certbot or self, doesnt matter atm, just trying to impliment
[13:16:32] <graingert> nubonix: https://www.uvicorn.org/deployment/#running-with-https
[13:16:58] <nubonix> graingert another q about auth, so i noticed in the docs i can connect using basic http auth [using the starlette server example], but from what i remember its not very safe, so this is my reason for running with https
[13:17:28] <graingert> nubonix: Https is great
[13:17:39] <nubonix> oh okay interesting, should have figured out that uvicorn was responsible
[13:17:52] <nubonix> graingert so https + basic auth is ok?
[13:17:56] <graingert> I always set the secure flag on my cookies
[13:18:22] <graingert> basic Auth is fine, but it means you have to do a hashlib operation every request
[13:18:50] <nubonix> ah, makes sense, to force https when authing, so the username/pass doesnt get shown via a mitm
[13:19:00] <nubonix> im assuming the cookie does this
[13:19:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[13:19:15] <graingert> So it's actually much better to have a login endpoint where you swap a username and password for an HttpOnly Secure SameSite: lax cookie
[13:19:17] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 245 seconds)
[13:19:33] <graingert> nubonix: you just always use https
[13:19:39] <nubonix> mk
[13:19:54] <nubonix> is there a tut for the swapping the user/pass for that kind of cookie?
[13:20:01] <nubonix> that you know of off hand
[13:21:24] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[13:21:42] <graingert> nubonix: I've not actually seen one
[13:21:42] <nubonix> graingert of right, i understand what you mean by the hashlib approach
[13:21:42] <nubonix> so i hash the password with w/ algo sha1 or something, save the sha1 in the database, and compare the users input password (hash it) and then compare to the database, for that user/name
[13:21:43] *** Joins: wyclif (~wyclif@user/wyclif)
[13:21:56] <graingert> nubonix: use hashlib for password storage
[13:22:03] <nubonix> think ill probably stick to the hashlib approach for now
[13:22:14] <nubonix> just cause i have a rough idea on how to do it
[13:22:34] <graingert> nubonix: https://passlib.readthedocs.io/en/stable/narr/quickstart.html?highlight=choose#choosing-a-hash
[13:22:41] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 258 seconds)
[13:22:47] <nubonix> graingert: wdym by that [use hashlib for password storage], your talking about saving the hashed password instead of the password yeah?
[13:23:04] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[13:23:13] <nubonix> that way i only have to hash the password once on comparing to the db
[13:23:16] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[13:23:20] <graingert> nubonix: right but don't mess about with using sha1 or whatever yourself
[13:23:26] *** Quits: rajkosto (~rajkosto@178-221-117-77.dynamic.isp.telekom.rs) (Ping timeout: 265 seconds)
[13:23:27] *** Joins: vassen (~vassen@178.176.218.123)
[13:23:44] <nubonix> nono, just like a hashlib.sha1('mypassword') = asidf9uai9f3jfmasifmas3f0-a3wkf23r
[13:23:51] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:23:51] <graingert> Yeah don't do that
[13:24:04] <nubonix> ?
[13:24:11] *** Joins: zaquest (~notzaques@5.128.210.178)
[13:24:16] <nubonix> lemme try again, sec
[13:24:41] <nubonix> password = 'mypassword'
[13:24:41] <nubonix> hashed_password = hashlib.sha1(password)
[13:24:44] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[13:24:45] *** Quits: rpkilby (~rpkilby@2600:100f:b12e:fb8:44a2:31a8:b3c6:8b76) (Ping timeout: 255 seconds)
[13:24:45] <nubonix> so dont do this?
[13:25:20] <FunkyBob> at the very least it should be salted
[13:25:25] <graingert> nubonix: I really recommend using Django it does all this for you, and it's important to get it right
[13:25:25] <nubonix> okay
[13:25:30] <graingert>  CryptContext is what you need nubonix
[13:25:42] *** Joins: palasso (~palasso@user/palasso)
[13:26:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[13:27:26] <nubonix> alright, so something like this: https://bpa.st/LENQ
[13:27:26] <graingert>  nubonix something like this ctx = CryptContext(schemes=["argon2"])
[13:27:45] <graingert> Right but you don't want des_crypt
[13:28:13] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (Ping timeout: 268 seconds)
[13:28:13] <nubonix> my question about why not to store the pass_hash wasnt because of how easy it would be to break, was just wondering about the storage itself
[13:28:16] <graingert> Tbh it's bloody irisponsible of them to have it in their docs like that
[13:28:20] <nubonix> as ik sha1 is really crackable
[13:28:29] <nubonix> def dont be storing in md5 :D
[13:28:52] <nubonix> ight, ill use argon2
[13:29:07] <nubonix> sha256 i think would also be fine, but icr
[13:29:34] <graingert> You need to use multiple rounds of salted sha256
[13:29:50] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:29:51] <nubonix> or just use argon2?
[13:29:55] <graingert> Also sha256 needs waaay more rounds to be secure these days because of mining hardware
[13:29:58] *** Quits: masber (~masber@vpn-24.cscs.ch) (Ping timeout: 246 seconds)
[13:30:01] <nubonix> ah
[13:30:10] <FunkyBob> i think django is up to 12,000 iterations these days...
[13:30:12] <graingert> > or just use argon2?
[13:30:12] <graingert> Yep
[13:30:27] <nubonix> i see why u recommend not hashing everytime
[13:30:36] <graingert> FunkyBob: It should be set to a percentage of hashpower at time of release
[13:30:50] <nubonix> but its all good, im not hashing the pass for every time a url is called so
[13:31:03] <FunkyBob> graingert: yeah, it's raised periodically to account for increses in CPU/GPU power
[13:31:21] <graingert> So currently there's 160m TH/s
[13:31:37] <FunkyBob> oh, sorry... 260,000 now when using PBKDF2
[13:31:52] <nubonix> wut r u guys talking bout
[13:32:00] <nubonix> 160m terhashes of what
[13:32:34] <nubonix> graingert anyways, really appreciate the help :) as always!
[13:32:36] *** Quits: vassen (~vassen@178.176.218.123) (Ping timeout: 272 seconds)
[13:32:46] <nubonix> u2 FunkyBob
[13:34:01] <fluter> hi, i'm moving code from py2 to 3
[13:34:18] <fluter> is there any tool that can automatic converts absolute imports to relative imports
[13:34:34] <fluter> all the imports of local modules now suddently fails
[13:35:28] <graingert> fluter: modernize
[13:35:40] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[13:36:33] <rannnn8888> what the problem sometimes i get this error i try add .decode("utf-8") https://dpaste.org/4RTq
[13:37:54] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[13:39:08] *** Joins: k0fein (~esmeralda@user/k0fein)
[13:39:12] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 256 seconds)
[13:39:19] <supakeen> The response isn't JSON.
[13:40:09] *** Joins: wyclif (~wyclif@user/wyclif)
[13:42:02] <AhmedAmerican_> within trio, can i pause all spawned tasks from nursery if an condition happens ? https://bpa.st/VPOA
[13:42:03] *** milosz_ is now known as milosz
[13:42:09] <nubonix> graingert, so to use certbot with starlette, i should probably run a docker container with certbot, and ninjx to run the cert on the domain?
[13:43:04] *** Joins: p-i- (~Ohmu@node-rfq.pool-118-173.dynamic.totinternet.net)
[13:43:36] <fluter> graingert: i have already applied futurize on the code to fix some syntax change,
[13:43:47] <fluter> is it ok to apply modernize again on the result of futurize?
[13:44:03] <graingert> fluter: Highly recommend not using futurize
[13:44:21] <graingert> It's old produces code that pyupgrade doesn't understand
[13:44:22] <fluter> graingert: why? someone here recommended to use futurize :S
[13:44:32] <fluter> hmm ok
[13:45:00] *** Joins: phx (~phoemix@marvin.harmless.hu)
[13:45:04] *** Joins: Julian (~tos9@python/site-packages/Julian)
[13:45:18] *** Quits: jthistle (~jthistle@user/jthistle) (Quit: BNC died... goodbye!)
[13:45:40] *** Quits: n000g (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[13:45:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[13:47:04] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[13:48:23] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:48:47] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[13:48:59] *** Joins: masber (~masber@178.197.221.182)
[13:49:08] *** Joins: CombatVet (~c4@user/combatvet)
[13:51:38] <nubonix> flutter graingert is most likely more knowledgeable
[13:52:13] <nubonix> graingert also, watching a vid on flask / certbot, so think im good
[13:53:01] <graingert> I'm a modernize a maintainer so somewhat biased
[13:55:03] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[13:56:18] *** Joins: pnoud (~pnoud@user/pnoud)
[13:57:40] <Luyin> good morning!
[13:57:40] *** Joins: Pickchea (~private@user/pickchea)
[13:57:52] <nubonix> your biases r good
[13:58:00] *** Joins: wyclif (~wyclif@user/wyclif)
[13:59:20] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.2)
[13:59:50] <nubonix> so, ive got a flask server on my second computer that im running, and im trying to connect with curl [b/c its easy] but i keep getting `curl failed to verify the legitimacy of the server and therefore could not` and im providing the client.crt, the ca.crt and the client.key to curl, and was wondering if someone could help
[14:00:32] <nubonix> curl_command = `curl --cacert nbm_ca.crt --cert nbm_client.crt --key nbm_client.key https://10.0.0.144:1337`
[14:01:34] *** Joins: mrec (~markus@user/mrec)
[14:01:53] <nubonix> flask server is uber basic = print hello world on connection / entry to 10.0.0.144:1337/
[14:02:20] *** Joins: ras_manny (~ras_manny@196.24.136.255)
[14:02:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 245 seconds)
[14:02:48] <rannnn8888> deal with proxy fail ? https://dpaste.org/QeKx
[14:02:54] <nubonix> `curl 10.0.0.144 -k` as a sanity check, passes [-k ignores the validity of the certs]
[14:03:00] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[14:03:16] <nubonix> `10.0.0.44:1337/` *
[14:04:07] <nubonix> `https://10.0.0.144:1337/` * ug
[14:04:17] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 245 seconds)
[14:04:28] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[14:05:11] <AhmedAmerican_> rannnn8888: why you change proxy on each requests! i would change it once my request fail!
[14:05:22] *** Quits: Guest6174 (~mogad0n@user/mogad0n) (Quit: Guest6174)
[14:05:37] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[14:05:43] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:06:05] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2f4b)
[14:06:09] <AhmedAmerican_> make sure your proxies itself works! and check if it's request `verify=False` or not.
[14:06:10] *** Quits: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[14:06:23] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:06:31] *** Joins: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[14:07:08] <rannnn8888> AhmedAmerican_ i want all each request from other proxy, and if the proxy not work change to other proxy
[14:07:50] <nubonix> alright, please ignore my above question. if i use `verify=False` with requests, this means that the connection is still using https/ssl, its just ignoring the fact that im using a self signed cert?
[14:08:14] *** Quits: mcglk (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[14:09:34] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[14:09:37] <rannnn8888> AhmedAmerican_ now its look if the requests fail its stop the script and dont try other proxy
[14:10:47] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[14:12:40] *** Quits: masber (~masber@178.197.221.182) (Ping timeout: 246 seconds)
[14:12:54] *** Quits: y1n (~y1n@84-115-64-173.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[14:13:03] *** Joins: y1n (~y1n@84-115-64-238.wifi.dynamic.surfer.at)
[14:13:15] *** Joins: schumaml3 (~schumaml@dslb-094-216-171-151.094.216.pools.vodafone-ip.de)
[14:14:50] *** Joins: wyclif (~wyclif@user/wyclif)
[14:15:17] <rannnn8888> nubonix maybe ?
[14:17:10] <AhmedAmerican_> rannnn8888: https://bpa.st/6VCA
[14:17:17] <Luyin> graingert: I have to say, the initial setup with pyproject.toml was a bit of a hassle, but now I'm pretty happy about it. Only I wish they had picked a name that wasn't that stupid to type :D
[14:18:44] <rannnn8888> AhmedAmerican_ but i use multi https://dpaste.org/HXZk
[14:18:44] <AhmedAmerican_> rannnn8888:  in case if you will apply the same under `concurrent.futures` or `asyncio`. all you need to do is just calling next of proxies before sending to the worker. on the other side you can except the failed request and retry it with new proxy
[14:19:26] *** Joins: senatoreg (~senatoreg@net-2-34-56-133.cust.vodafonedsl.it)
[14:19:28] <rannnn8888> AhmedAmerican i try before concurrent.futures but i want try run my script from seesion maybe its be more faster
[14:19:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[14:19:55] <rannnn8888> AhmedAmerican_ and in concurrent.futures i cant use session no ?
[14:20:15] <fluter> is PyXML a deprecated module?
[14:20:21] <rannnn8888> i scrape same site and not diffrent urls
[14:21:11] <AhmedAmerican_> rannnn8888: on which answer you need ?  in trio/asyncio/concurrent.futures ?
[14:21:23] <rannnn8888> i want save the tcp CoNECCTIoN
[14:22:03] <rannnn8888> AhmedAmerican_ what u think its the faster to same site ? i try concurrent.futures its fast by try make this faster
[14:22:11] *** Quits: y1n (~y1n@84-115-64-238.wifi.dynamic.surfer.at) (Read error: Connection reset by peer)
[14:22:40] <AhmedAmerican_> rannnn8888: `trio` will be the best. async is more gentle than threads.
[14:22:50] <AhmedAmerican_> hold on, i will share a quick answer
[14:22:52] *** Joins: y1n (~y1n@84-115-64-238.wifi.dynamic.surfer.at)
[14:22:59] *** Quits: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il) (Quit: Konversation terminated!)
[14:23:25] <rannnn8888> AhmedAmerican_ k i not use trio before and i can use multitherds here ? and proxy ?
[14:23:29] *** Joins: wyclif (~wyclif@user/wyclif)
[14:24:07] *** Joins: thiras (~thiras@user/thiras)
[14:24:11] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[14:24:12] <AhmedAmerican_> rannnn8888: you can use `concurrent.futures` or `asyncio` if you not familiar with `trio`
[14:24:27] *** Joins: entuland (~entuland@user/entuland)
[14:25:00] *** Joins: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il)
[14:25:14] <rannnn8888> AhmedAmerican_ yep i said i try concurrent.futures, and asyncio i stil cheack, but i try I try to get the fastest results
[14:25:45] <rannnn8888> I mean every second is important to me
[14:26:12] <AhmedAmerican_> rannnn8888: well, i highly recommend `trio` and `httpx` in this case
[14:26:36] *** grawity is now known as grawit_
[14:26:36] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[14:27:03] *** Quits: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il) (Client Quit)
[14:27:22] *** grawit_ is now known as grawity
[14:27:36] <rannnn8888> AhmedAmerican_ maybe u have link to exam[le i can see how its look ?
[14:28:17] <rannnn8888> AhmedAmerican_ https://dpaste.org/8cpf
[14:28:45] *** Joins: c10l (~c10l@89.34.167.207)
[14:29:36] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Quit: Client closed)
[14:29:53] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[14:29:53] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[14:30:09] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[14:31:44] <AhmedAmerican_> rannnn8888: https://bpa.st/IVMA
[14:34:07] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:34:19] *** Quits: ras_manny (~ras_manny@196.24.136.255) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:35:04] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Ping timeout: 246 seconds)
[14:35:51] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[14:36:08] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[14:38:13] *** Joins: codificat (~pep@66.red-79-154-168.dynamicip.rima-tde.net)
[14:38:45] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[14:39:12] *** Joins: nirix (uid48447@id-48447.tinside.irccloud.com)
[14:39:27] <rannnn8888> AhmedAmerican_ thxx i try its now to add proxy in httpx i outher way ? https://dpaste.org/NQ7J
[14:39:35] *** Quits: reset (~reset@user/reset) (Quit: reset)
[14:40:44] <AhmedAmerican_> ```proxies = {
[14:40:44] <AhmedAmerican_>     "all://": "http://localhost:8030",
[14:40:44] <AhmedAmerican_> }```
[14:41:47] <AhmedAmerican_> rannnn8888: https://www.python-httpx.org/advanced/#http-proxying
[14:44:08] *** Joins: DX099 (~dx099@2a01:e0a:347:f1c1:dccb:dceb:5778:8995)
[14:45:00] *** Joins: ethoxy (~root@echelon.lucif3r.ru)
[14:46:45] <rannnn8888> AhmedAmerican_ https://dpaste.org/BiLw
[14:46:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[14:48:23] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[14:48:37] <AhmedAmerican_> rannnn8888: that's not logical for me to use the same session with different proxies! you actually need a unique client for each worker.
[14:48:42] <AhmedAmerican_> hold on let me edit the code.
[14:49:40] <rannnn8888> AhmedAmerican_ my api limit to 100 requests in min and i requests 1000
[14:50:13] <rannnn8888> this the reson i  send every request from other proxy
[14:51:26] <rannnn8888> maybe can send all the request from same proxy but if its fail then change proxy
[14:53:20] *** Quits: y1n (~y1n@84-115-64-238.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[14:54:01] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:54:38] <rannnn8888> AhmedAmerican_ https://dpaste.org/zgsE fast example i think
[14:55:07] <rannnn8888> and add a loop to the to try
[14:55:08] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Remote host closed the connection)
[14:55:25] <AhmedAmerican_> i think that i shared `all://` but you not follow
[14:55:27] <AhmedAmerican_> anyway https://bpa.st/E3IA
[14:56:36] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[14:56:47] *** Quits: pycode (~pycode@2001:b07:5d28:551:d32a:34dd:f8ef:945c) (Ping timeout: 245 seconds)
[14:57:38] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 255 seconds)
[14:57:53] *** Joins: palasso (~palasso@user/palasso)
[14:58:49] *** Joins: ammernico (~shark@pd95da482.dip0.t-ipconnect.de)
[14:59:14] <rannnn8888> AhmedAmerican_ need look like this yep ? proxies = cycle(['xx-x:x@209.127.xx.x:xxxx','xx-x:x@2.x.xx.20:xxxx'])
[14:59:48] <rannnn8888> ValueError: Proxy keys should use proper URL forms rather than plain scheme strings. Instead of "all", use "all://"
[15:00:17] <AhmedAmerican_> is that proxy with auth ?
[15:01:12] *** Joins: ras_manny (~ras_manny@196.24.136.255)
[15:01:35] <rannnn8888> yep username:pass@ip:port
[15:01:38] <AhmedAmerican_> ```
[15:01:38] <AhmedAmerican_> proxies = {
[15:01:38] <AhmedAmerican_>     "http://": "http://username:password@ip:port",
[15:01:38] <AhmedAmerican_>     # ...
[15:01:38] <AhmedAmerican_> }
[15:01:39] <AhmedAmerican_> ```
[15:02:09] <AhmedAmerican_> ^ https://www.python-httpx.org/advanced/#authentication <--- follow the docs
[15:02:11] *** Joins: node1 (~node1@user/node1)
[15:03:44] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[15:03:47] <AhmedAmerican_> replace the key `http` with `all://`
[15:03:57] <AhmedAmerican_> so it's will route both `http` and `https` requests
[15:04:12] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Quit: Client closed)
[15:04:29] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[15:09:01] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Ping timeout: 246 seconds)
[15:09:26] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:10:16] *** suffer is now known as strungout
[15:13:11] *** Joins: haroon (~haroon@gw.wmd.de)
[15:13:17] *** Joins: petaflot (~root@lutolf.vserver.nimag.net)
[15:13:28] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:14:44] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:15:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:16:20] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[15:16:22] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 245 seconds)
[15:17:01] <petaflot> hello! I'm fiddling with async stuff, and I just realized I cannot use asyncio.ensure_future() with a function that yields stuff. my question is : since I use ensure_future only in a context where it returns True|False|None is there a way to call my async generator in a non-async function when I _know_ it will return only a single value?
[15:17:18] <rannnn8888> AhmedAmerican_ yep i make this , but its stranger, i try if the proxy fail use other proxy but its look like stack url_list its list of end point https://dpaste.org/LRvk
[15:17:27] <petaflot> ^where it returns^where my generator returns
[15:18:12] *** Joins: ice9 (~ice9@user/ice9)
[15:18:42] <rannnn8888> AhmedAmerican_ its start return the json but after 5-6 sec stack
[15:19:18] <AhmedAmerican_> Change timeout to 5 seconds! Your proxy is dead
[15:20:10] <Yhg1s> petaflot: I'm confused. asyncio.ensure_future() doesn't return true/false/none, it schedules a task and returns it.
[15:20:48] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[15:20:50] <wib_jonas> can you help me a bit because I'm going mad about these date modules. I'm trying to use python 3.9.0 native on windows 10, and get formatted timestamps of the current time. first I tried `import datetime as datetime_mod, zoneinfo; print(datetime_mod.datetime.now().strftime("%Y-%m-%dT%H%M%S%z"),
[15:20:50] <wib_jonas> datetime_mod.datetime.utcnow().strftime("%Y-%m-%dT%H%M%S%z"))` which gives the correct broken times, but the UTC offset is missing in both cases. then I tried
[15:20:59] <petaflot> Yhg1s: that's the point.. when my generator returns once of True|False|None I _know_ what the return value should be
[15:21:16] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Ping timeout: 246 seconds)
[15:21:28] <Yhg1s> petaflot: I don't understand how that relates *at all* to yield or ensure_future, sorry.
[15:21:28] <wib_jonas> `import time as time_mod; print(time_mod.strftime("%Y-%m-%dT%H:%M:%S%z", time_mod.localtime()), time_mod.strftime("%Y-%m-%dT%H%M%S%z", time_mod.gmtime()))` where the first one gives the correct output, but the second gives a +0100 offset and the corresponding local time for that, which is clearly wrong.
[15:21:29] <petaflot> so I can use ensure_future because the return value can be discarded
[15:21:36] <Yhg1s> petaflot: it would help if you could show the code.
[15:21:39] <wib_jonas> What am I doing wrong and what should I be doing instead?
[15:22:10] <graingert> petaflot: yes you can use https://www.irccloud.com/pastebin/inNeOYyE/afirst.py
[15:22:23] <rannnn8888> AhmedAmerican_ i change but its look like after sometime its stop return the get and not get the data print, only its stil print the "print(mainurl + val)" https://dpaste.org/Ctpr
[15:23:24] <rannnn8888> AhmedAmerican_ sec i forgot write the break
[15:23:29] <Yhg1s> wib_jonas: time.gmtime() won't give you a timetuple with the current time, no. it gives you a timetuple with the current time in GMT. (Timetuples don't have timezones.)
[15:23:36] <Yhg1s> wib_jonas: I'm not sure what you're trying to do.
[15:23:44] <petaflot> graingert: digging into contextlib.. thanks
[15:23:57] <AhmedAmerican_> rannnn8888: why you are looping from the worker function ? Within the main function the loop is done !
[15:24:16] *** Quits: pyfisch (~pyfisch@ip-95-223-230-181.hsi16.unitymediagroup.de) (Quit: The Lounge - https://thelounge.chat)
[15:24:21] <graingert> petaflot: it's p new https://docs.python.org/3.10/library/contextlib.html#contextlib.aclosing
[15:24:24] <wib_jonas> Yhg1s: I'm trying to print a formatted local time, as in 2021-07-14T12:50:44+0200 , and a formatted UTC time, as in 2021-07-14T10:50:44+0000, but for the current time as the program is running
[15:24:31] <graingert> but you can get a backport in contextlib2.aclosing
[15:24:41] *** Joins: hanetzer (~hanetzer@user/hanetzer)
[15:25:40] *** kmikita_ is now known as kmikita
[15:26:24] <graingert> then you can use `result = await afirst(async_gen_fn, arg, kwarg=kwarg))`
[15:26:31] <graingert> then you can use `result = await afirst(async_gen_fn, arg, kwarg=kwarg)` *
[15:26:33] <hanetzer> hullo. given https://github.com/96boards/burn-boot/blob/master/hisi-idt.py , could someone assist me in getting it to work with py3.9? already swapped tostring for tobytes and removed the ord, now its erroring at line 141; TypeError: can't concat str to bytes.
[15:27:01] <wib_jonas> Yhg1s: oh! so the struct_time structure that time_mod.gmtime() returns me dosen't contain the timezone offset, which is why %z is lying?
[15:27:10] <hanetzer> I'm not much of a pythonist myself, but this tool is pretty close to required for working with a board I have.
[15:27:11] <graingert> hanetzer: try running it through modernize?
[15:27:19] <hanetzer> not aware of that.
[15:27:28] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:27:32] <wib_jonas> Yhg1s: in that case, can I perhaps use the datetime module to get a time structure with the timezone offset filled in correctly?
[15:27:36] *** Joins: drogas (~drogas@jump2.jet.uk)
[15:27:41] <graingert> hanetzer: https://github.com/96boards/burn-boot/blob/master/hisi-idt.py#L141 doesn't seem to have any code there
[15:27:46] <graingert> hanetzer: could you push what you have?
[15:27:51] <Yhg1s> wib_jonas: it's not lying, it's empty, because there is no timezone info. The same is true for the datetime objects you're formatting. You need to attach a tzinfo object to them.
[15:27:58] <Yhg1s> wib_jonas: don't bother with the time module, certainly.
[15:27:58] <rannnn8888> AhmedAmerican_ main function but i want if the proxy dont work hi change proxy, and not miss the url https://dpaste.org/CdPX
[15:28:03] <hanetzer> graingert: blerg. one moment while I fork it :)
[15:28:12] <Yhg1s> wib_jonas: https://docs.python.org/3/library/zoneinfo.html may be what you're looking for.
[15:28:22] <wib_jonas> Yhg1s: ok, let's forget the time module then, but how do I use the datetime module?
[15:28:26] <Yhg1s> (and also the isoformat() method)
[15:28:30] <AhmedAmerican_> Then you’ve to change the proxy from the except
[15:28:34] *** Quits: emerent (~quassel@p54a3ed3c.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:30:17] <wib_jonas> Yhg1s: I have looked at the zoneinfo module, but it's not clear to me how I ask it to give me the local timezone, as guessed from the environment or other OS magic.
[15:30:39] <hanetzer> graingert: https://github.com/hanetzer/burn-boot/tree/multichip-modernize
[15:30:53] <wib_jonas> and why datetime.utcnow() doesn't just fill in the timezone, when it knows it must be utc
[15:31:01] *** Joins: Payam (~Payam@138.106.57.132)
[15:31:13] <Yhg1s> wib_jonas: because the datetime module predates zoneinfo by very many years.
[15:31:35] *** Joins: emerent (~quassel@p200300cd5721e68cba27ebfffed28a59.dip0.t-ipconnect.de)
[15:31:47] <wib_jonas> Yhg1s: sure, but it doesn't need the zoneinfo for a UTC zone. still, even if they don't automatically do this, I would like to know how to use these modules.
[15:31:51] <rannnn8888> AhmedAmerican_ and its but its not mise the urls its fail proxy ??
[15:32:01] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[15:32:02] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Read error: Connection reset by peer)
[15:32:10] *** Quits: ssbr_ (~ssbr@python/site-packages/ssbr) (Ping timeout: 268 seconds)
[15:32:28] <rannnn8888> AhmedAmerican_ and its not miss the urls its fail proxy ??
[15:32:44] *** Joins: pyfisch (~pyfisch@ip-37-201-119-209.hsi13.unitymediagroup.de)
[15:33:02] <AhmedAmerican_> RIP English nowadays
[15:33:14] <wib_jonas> the datetime module even has a datetime.utc class
[15:33:30] <Yhg1s> wib_jonas: datetime.datetime.now(tz=zoneinfo.ZoneInfo('GMT')), datetime.datetime.now().astimezone()
[15:34:03] <Yhg1s> wib_jonas: attaching a timezone to the datetime changes the behaviour, so datetime.datetime.utcnow() can't just attach a tzinfo object to it.
[15:34:07] <graingert> hanetzer:  https://github.com/hanetzer/burn-boot/blob/3fdfe02081b51e9b304707fa085f3d579d47302d/hisi-idt.py#L114 ?
[15:35:02] <hanetzer> graingert: don't ask me man. chinese system on a chip which i've stupidly decided to pick up again for RE and fossification purposes.
[15:35:19] <graingert> show your traceback?
[15:35:36] <wib_jonas> Yhg1s: astimezone. ok, I'll try that.
[15:36:32] <Yhg1s> wib_jonas: datetime.datetime.astimezone is the easy way to get the local timezone added to a datetime object (and it doesn't use zoneinfo, so it works on earlier Python versions too).
[15:36:38] <hanetzer> graingert: sure. one moment.
[15:36:50] *** Joins: varaindemian (~varaindem@86.124.78.162)
[15:36:50] <drogas> wsl question
[15:36:53] <Yhg1s> wib_jonas: if you prefer to use zoneinfo, you can also use zoneinfo.ZoneInfo(time.tzname[0])
[15:37:14] <wib_jonas> Yhg1s: I don't insist on zoneinfo here
[15:37:33] <rannnn8888> AhmedAmerican_https://dpaste.org/Xspv
[15:37:36] <hanetzer> graingert: https://paste.centos.org/view/653097b8
[15:37:51] <drogas> folder is structured like \like\this whereas linux uses /
[15:37:51] <graingert> ah 141 I missremembered
[15:37:51] <wib_jonas> can I use datetime.datetime.now(tz = datetime.timezone.utc) for the UTC time instead?
[15:37:53] <rannnn8888> AhmedAmerican_ https://dpaste.org/Xspv *
[15:38:03] <graingert> https://github.com/hanetzer/burn-boot/blob/3fdfe02081b51e9b304707fa085f3d579d47302d/hisi-idt.py#L141
[15:38:30] <drogas> `[Errno 2] No such file or directory: 'C:\\Temp\\S\\SPR008\\dwall/spr0/dfdf.text'`
[15:38:31] <Yhg1s> wib_jonas: oh, sure.
[15:38:39] *** Quits: DX099 (~dx099@2a01:e0a:347:f1c1:dccb:dceb:5778:8995) (Quit: Konversation terminated!)
[15:38:43] <drogas> so when I run the python code I get that
[15:38:50] <drogas> you see the first few slashes are correct
[15:39:00] <drogas> but it changes to / linux style near the end
[15:39:02] <Yhg1s> drogas: that's not a problem. Everything that handles paths on Windows can use \ and /.
[15:39:06] <drogas> I am using PathLib
[15:39:14] <Repiphany> drogas: If you want to access the windows filesystem, it's at /mnt/c/...
[15:39:18] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 255 seconds)
[15:39:23] <graingert> hanetzer: I think you want to use `six.int2byte` instead of chr
[15:39:31] <Yhg1s> drogas: oh, WSL. In WSL you need to use UNIX paths, not Windows.
[15:39:34] <hanetzer> graingert: yeah. that's the issue. I'm not much of a pythonist and just want to get up and running again :)
[15:39:40] <Repiphany> /mnt/c/Temp/S/...
[15:39:47] <graingert> hanetzer: https://six.readthedocs.io/#six.int2byte
[15:39:57] <hanetzer> graingert: assuming I'll need an `import six` towards the top?
[15:40:12] <graingert> hanetzer: eg `from six import int2byte as chr` would be the hacky way to do it
[15:40:21] <hanetzer> heh.
[15:40:29] *** Quits: ras_manny (~ras_manny@196.24.136.255) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:40:36] <wib_jonas> Yhg1s: thank you, this will work
[15:40:43] <graingert> and if it worked you'd go through and do a find and replace afterwards
[15:41:12] <drogas> the file is on a windows partition tho Yhg1s
[15:41:19] <drogas> I tried using / but still get the same error
[15:41:19] <Yhg1s> drogas: that doesn't matter.
[15:41:20] <graingert> hanetzer: you'll probably need six.byte2int for the reverse too
[15:41:28] <Yhg1s> drogas: are you using the correct path?
[15:41:31] *** Joins: Julian (~tos9@python/site-packages/Julian)
[15:41:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[15:42:16] *** Joins: senatore1 (~senatoreg@net-5-95-186-109.cust.vodafonedsl.it)
[15:42:49] <drogas> Yes this is the path on windows: C:\Temp\S\SPR008\dwall\spr0\dfdf.text and I have written it the same except / in the code
[15:42:51] <wib_jonas> as for isoformat, that's useful as a shortcut, I'll try to remember it, but I want to be able to use a different format later
[15:42:56] <Yhg1s> drogas: okay, so *no*.
[15:42:56] *** Quits: senatoreg (~senatoreg@net-2-34-56-133.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[15:43:06] <Yhg1s> drogas: 'C:' is not a thing that works in Linux. It's Windows only.
[15:43:19] <Yhg1s> drogas: as Repiphany said, you need '/mnt/c/Temp/S/...'
[15:43:24] <drogas> ah I need to do mnt
[15:43:25] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[15:43:25] <drogas> okay
[15:43:27] <drogas> let me ttry that
[15:43:58] <drogas> silly me that was it
[15:44:03] <drogas> thanks Yhg1s
[15:44:07] <drogas> and Repiphany
[15:45:48] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:47:43] <AhmedAmerican_> rannnn8888: you’ve to use while loop ! Except to change the proxy
[15:48:44] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[15:49:24] <Payam> what is `shell` comman in subprocesses? is it for windows machines ?
[15:49:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:49:58] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[15:49:59] <Yhg1s> Payam: do you mean the 'shell' argument to subprocess.run and the other functions in the subprocess module?
[15:50:15] <GinFuyou> Hello! I want to switch from pipenv to poetry, but pipenv does have a one neat feature I liked - it loads .env files on activation, which is quite convenient for me
[15:50:21] <Payam> yes the shell in the subprocess.run. Is it for passing the whole argument as one string?
[15:50:30] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:50:41] <GinFuyou> Should I use direnv now or there are other options?
[15:50:44] *** Joins: sgn (~sgn@user/sgn)
[15:50:54] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:50:55] <Yhg1s> Payam: https://nedbatchelder.com/text/shell-maybe.html
[15:51:47] *** Quits: minip (minip@user/minip) (Remote host closed the connection)
[15:51:56] *** Joins: guy (~guy@IGLD-84-228-87-161.inter.net.il)
[15:52:00] <guy> hello
[15:52:14] *** Quits: guy (~guy@IGLD-84-228-87-161.inter.net.il) (Client Quit)
[15:52:33] *** zdleaf is now known as zinc
[15:52:37] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[15:53:10] <petaflot> since, so far, an async generator cannot both yield stuff and return something, wouldn't it make sense to allow structures like "for" to simply not iterate instead of raising an exception when the object is not iterable? eg. `for i in None: do_something()` would be perfectly valid, only it wouldn't call so_something() not even once
[15:53:38] <Yhg1s> petaflot: no, that would be hiding bugs in a bad way.
[15:53:46] <Yhg1s> (not to mention break things that currently rely on those exceptions getting raised.)
[15:53:51] *** Joins: CombatVet (~c4@user/combatvet)
[15:54:04] *** Quits: gitly (~gitly@148.252.132.166) (Ping timeout: 256 seconds)
[15:54:50] *** Joins: wyclif (~wyclif@user/wyclif)
[15:56:19] <petaflot> Yhg1s: if a bug is suspected, I suppose it would be better to add a couple of `if myVar is not iterable: raise Exception()`. as for backwards compatibility, it has to be broken from time to time (python3 did break a few things, but AFAIK people have understood it was for the better)
[15:56:22] *** Joins: Pickchea (~private@user/pickchea)
[15:56:30] *** Joins: gitly (~gitly@85.255.233.176)
[15:56:39] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[15:57:11] *** Joins: emika4 (~emika@5.181.235.116)
[15:57:33] <Yhg1s> petaflot: it's so rare to *intentionally* want to iterate over something non-iterable and treat it as an empty container, that it's much, much better to handle that case in your code. Like 'if myVar is not iterable: myVar = []' or whatever.
[15:58:01] <Yhg1s> petaflot: I'm not sure why you think it would be a good idea to silently let that case pass (nor, for that matter, how it relates to async generators)
[15:58:41] *** Quits: emika (~emika@5.181.235.116) (Ping timeout: 268 seconds)
[15:58:41] *** emika4 is now known as emika
[16:00:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[16:00:05] *** Joins: pnoud (~pnoud@user/pnoud)
[16:01:32] *** Joins: ras_manny (~ras_manny@196.24.136.255)
[16:02:08] *** Joins: james_white (~guy@IGLD-84-228-87-161.inter.net.il)
[16:02:08] <petaflot> it relates to async generators because have a non-async function return an iterable or a non-iterable. async functions, as soon as they contain "yield" are treated as generators and can only `return` (without a value) even if no value has been yielded previously. in fact, a function usually returns "None" when no return value is specified but using "return None" in an async generator is SyntaxError!
[16:02:47] <Yhg1s> petaflot: sure, you can't return a value from an async generator. I'm not sure why that matters.
[16:03:16] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[16:03:20] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 272 seconds)
[16:03:41] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 258 seconds)
[16:03:45] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[16:04:12] *** Quits: james_white (~guy@IGLD-84-228-87-161.inter.net.il) (Quit: leaving)
[16:04:14] <petaflot> what is the conclusion? async generators return "start_of_iterable", then yield its content, and finally "end_of_iterable". IMHO it should be possible to get a function to act as both an async generator and a coroutine
[16:04:33] *** Joins: domhnall_ (~developer@user/domhnall/x-2887755)
[16:05:08] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:05:21] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[16:06:05] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Quit: Client closed)
[16:06:21] <Yhg1s> petaflot: are you talking about a specific async generator you wrote? Because I have no idea what you mean by async generators returning 'start_of_iterable' or 'end_of_iterable'. However, 'it should be possible to get a function to act both as generator and a regular function' is just unrealistic. You can't do that. It's not something that's possible with regular generators, and it's not possible with async
[16:06:22] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[16:06:27] <Yhg1s> generators.
[16:06:31] *** Joins: Roey (~Roey@user/Roey)
[16:06:32] <Yhg1s> petaflot: what you *can* do is have a regular function that potentially calls the generator.
[16:07:47] *** Joins: computeiro (~Wender@189.37.64.59)
[16:08:24] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 272 seconds)
[16:08:26] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[16:10:37] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Ping timeout: 246 seconds)
[16:11:21] *** Quits: nicxz (~nicxz@user/nicxz) (Remote host closed the connection)
[16:11:36] *** Quits: clawh (~clawh@78.10.204.236) (Remote host closed the connection)
[16:11:46] *** Joins: nicxz (~nicxz@user/nicxz)
[16:12:28] *** Joins: wyclif (~wyclif@user/wyclif)
[16:13:03] <petaflot> Yhg1s: alright. that's somehow how I was doing it, but wrong obviously
[16:13:28] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 272 seconds)
[16:13:58] <petaflot> I believe I saw my mistake
[16:15:02] <petaflot> it now makes more sense why coroutines have to be explicitly awaited
[16:16:21] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[16:16:32] *** Joins: pycurious (~Adium@user/pycurious)
[16:17:04] *** Joins: magla (~gelignite@55d46309.access.ecotel.net)
[16:17:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[16:19:27] *** Joins: cdown_ (~cdown@163.114.131.1)
[16:19:53] *** Joins: wyclif (~wyclif@user/wyclif)
[16:21:14] *** Quits: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net) (Ping timeout: 252 seconds)
[16:21:58] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 252 seconds)
[16:23:01] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:f82a:fdf6:2baf:d583)
[16:23:56] *** Joins: y1n (~y1n@84-115-65-165.wifi.dynamic.surfer.at)
[16:25:09] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[16:26:01] *** Joins: pycode (~pycode@2001:b07:5d28:551:5008:4a07:d41f:882d)
[16:26:13] *** Joins: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net)
[16:26:22] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[16:28:53] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[16:29:41] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[16:30:08] *** Quits: schumaml3 (~schumaml@dslb-094-216-171-151.094.216.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[16:32:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[16:35:10] *** Joins: schumaml3 (~schumaml@dslb-188-104-173-087.188.104.pools.vodafone-ip.de)
[16:35:50] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:16] *** Joins: nmoura (~nmoura@177.192.16.58)
[16:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:42] <apollo13> hi there, I am reading the docs for Py_SetProgramName and am wondering if I can set it to a full path or whether it has to be the name alone
[16:37:07] <apollo13> also what is "static storage" -- malloc/new would do?
[16:38:40] *** Joins: user_3u2 (~guy@IGLD-84-228-87-161.inter.net.il)
[16:38:41] <Yhg1s> apollo13: you can set it to a full path, yes (and probably should). You should understand that Python uses it to find its standard library, though. As for static storage, yes, you can heap-allocate it, but you won't be allowed to free it (even after Py_Finalize)
[16:38:58] <apollo13> Yhg1s: oh why not after Py_Finalize?
[16:39:04] <Yhg1s> apollo13: because it's still in use.
[16:39:27] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[16:39:32] <apollo13> Yhg1s: and yes I am aware that it affects the std lib, I am embedding python and I either have the option to set it to the correct python via SetPrograName or rely on $PATH to do the correct thing
[16:39:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:39:52] <apollo13> but since I am only using it for embedding that python is not in the $PATH, so SetProgramName it is
[16:40:38] <apollo13> Yhg1s: mhm so given that Py_DecodeLocale returns a heap-allocated string I am fine?
[16:40:42] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 272 seconds)
[16:40:47] <apollo13> (independent of what I passed into PY_DecodeLocale)
[16:41:07] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 265 seconds)
[16:41:08] <Yhg1s> apollo13: well, if you're embedding Python, what you should really do is include the standard library for the Python you're embedding with your application, and call Py_SetPythonHome.
[16:41:45] <Yhg1s> apollo13: as long as you don't change the contents of it, and don't free it before the end of the program, sure.
[16:41:55] <apollo13> Yhg1s: ok, that is what I tried to achieve with setProgramName, will look into Py_SetPythonHome instead
[16:42:02] *** Quits: user_3u2 (~guy@IGLD-84-228-87-161.inter.net.il) (Quit: leaving)
[16:42:12] *** Quits: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[16:42:38] *** Joins: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[16:43:28] *** Joins: phonemic (~phonemic@104-60-219-66.lightspeed.nsvltn.sbcglobal.net)
[16:43:59] *** Joins: gnux (~notadevel@user/gnux)
[16:44:01] <petaflot> question: does `asyncio.ensure_future(
[16:44:04] <petaflot> oops
[16:44:17] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[16:44:39] <petaflot> question: does `for i in myDict: ...` implictly call `for i in myDict.keys(): ...`?
[16:44:56] <Yhg1s> petaflot: no, but iterating over a dict does the same thing as iterating over dict.keys().
[16:45:08] *** Joins: CombatVet (~c4@user/combatvet)
[16:45:18] *** Joins: zeden (~zeden@user/zeden)
[16:45:18] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:45:28] <petaflot> so is it possible to `yield key:value`?
[16:45:34] <grawity> you can yield anything at all
[16:45:39] <grawity> in your example those are the same only because the dict class implements them to do the same thing
[16:45:42] <Yhg1s> petaflot: are you asking how to iterate over key/value tuples?
[16:46:06] <deniska> petaflot: `key: value` pair isn't a thing on its own, but you can `yield key, value` tuples
[16:46:11] <grawity> it could very well have an __iter__() [uhh I think it's __iter__()?] that gives out (key, value) tuples
[16:46:24] *** Quits: hanetzer (~hanetzer@user/hanetzer) (Ping timeout: 272 seconds)
[16:47:35] <petaflot> Yhg1s: no my question is can I `yield key:value` but the intepreter says this is SyntaxError. so how to achieve the same result?
[16:47:45] <graingert> petaflot: `yield key, value`
[16:47:58] <petaflot> graingert: thank you
[16:48:07] <graingert> or you can use `yield from myDict.items()`
[16:48:58] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:49:14] <petaflot> so I guess it's also possible to `yield key, some_async_generator`?
[16:49:25] <Yhg1s> petaflot: you can yield anything, including tuples, yes.
[16:49:32] <Yhg1s> and (key, some_async_generator) is a tuple.
[16:49:40] *** Joins: darksun (~darksun@user/darksun)
[16:49:41] <petaflot> :-D
[16:52:12] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 245 seconds)
[16:52:37] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 246 seconds)
[16:53:57] <graingert> petaflot: yielding an async generator is somewhat unusual
[16:54:19] <graingert> It's often done in a @asynccontextmanager though
[16:55:23] *** Joins: Pickchea (~private@user/pickchea)
[16:56:40] <petaflot> will sth like `async for value in async_generator: break` "kill" the async generator upstream? or is an @asynccontextmanager required?
[16:57:21] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[16:57:46] <Yhg1s> petaflot: no, it will consume one item from the generator, and that's it.
[16:57:48] *** Joins: kostkon_ (~androirc@ob21aa.static.otenet.gr)
[16:57:55] <Yhg1s> (unless there is no one item in the generator, in which case it will be closed.)
[16:58:08] <bjs> if there are more, you could then repeat that loop to consume the next
[16:58:25] <bjs> like with normal generators (or iterators in general)
[16:58:30] <Yhg1s> Even if there aren't more, Python won't know, and so won't close the generator, until you try to consume the next one.
[16:58:40] <petaflot> and where does the rest of the data go? in this contextm data can also mean the memory space used by the running function.
[16:59:00] <Yhg1s> petaflot: the rest of the data is waiting for something to consume it, or to close the generator.
[16:59:05] <petaflot> bjs: how do I repeat the loop without calling the async generator function again?
[16:59:11] <bjs> petaflot: generators don't store the data, they execute some code to produce the data. The `async_generator` object itself stores the code
[16:59:28] <bjs> petaflot: your code didn't call anything, I assumed you had done `async_generator = some_async_gen_func()`
[16:59:38] <petaflot> bjs: yes
[17:00:05] <petaflot> so how to close this async generator?
[17:01:10] <Yhg1s> petaflot: async_generator.aclose()
[17:01:36] <Yhg1s> (it is, of course, a coroutine)
[17:01:43] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Ping timeout: 246 seconds)
[17:01:55] <petaflot> ok. so I "lied" to bjs, meaning I didn't do `async_generator = some_async_gen_func()` but instead `for i in some_async_gen_func(): ...`
[17:02:04] <Yhg1s> petaflot: so don't do that then.
[17:02:11] <petaflot> yup
[17:02:25] <Yhg1s> Or, alternatively, do do that, and let Python close the generator when it sees it's no longer in use (which may be later than you expect)
[17:03:22] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:03:34] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:04:07] *** Joins: akaWolf (~akaWolf@akawolf.org)
[17:04:19] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[17:04:26] <bjs> does that work for async generators?
[17:04:31] <bjs> You need an event loop to await the close
[17:04:48] <Yhg1s> 'async for' should be awaiting on the aclose.
[17:05:31] <bjs> Yhg1s: that can't be right either because you can go `g = async_gen(); async for x in g: break;  async for x in g: break` and the generator isn't closed on the second loop
[17:06:25] <Yhg1s> yeah, I didn't mean the aclose, I meant the regular iteration running into the end of the generator.
[17:06:33] <Yhg1s> regular async iteration that is.
[17:07:30] <Yhg1s> aclose is a coroutine because it needs to raise an exception in the generator function, so that it can execute any cleanup code, which needs to be async because it's an async generator. If regular async iteration ends, all that cleanup has already happened, so you don't have to wait an extra time.
[17:08:29] <Yhg1s> And yeah, I did add "if you aren't actually breaking out of the loop, doing what you're doing should be fine." but my IRC client crapped out and didn't send that part.
[17:08:49] *** Quits: phonemic (~phonemic@104-60-219-66.lightspeed.nsvltn.sbcglobal.net) (Quit: WeeChat 3.2)
[17:09:11] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[17:09:33] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Read error: Connection reset by peer)
[17:11:10] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:f82a:fdf6:2baf:d583) (Ping timeout: 246 seconds)
[17:11:53] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[17:11:57] *** Joins: kushal (~hopless@dgplug/kushal)
[17:12:23] *** Quits: gravy (~gravy@123-243-232-67.tpgi.com.au) (Quit: Leaving)
[17:12:36] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[17:12:40] <bjs> Ah
[17:12:47] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c:500a:f04e:5614:56a9) (Remote host closed the connection)
[17:13:01] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Killed (NickServ (GHOST command used by wib_jonas74)))
[17:13:26] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[17:13:40] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c:9925:18b1:79f7:f242)
[17:15:32] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:f82a:fdf6:2baf:d583)
[17:16:09] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:16:22] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[17:16:38] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[17:16:44] *** Joins: nmoura (~nmoura@177.192.16.58)
[17:18:26] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:19:56] *** Quits: kushal (~hopless@dgplug/kushal) (Remote host closed the connection)
[17:20:01] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[17:22:37] *** Joins: schumaml4 (~schumaml@dslb-092-074-000-078.092.074.pools.vodafone-ip.de)
[17:23:52] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[17:24:47] *** Quits: schumaml3 (~schumaml@dslb-188-104-173-087.188.104.pools.vodafone-ip.de) (Ping timeout: 255 seconds)
[17:26:12] *** Quits: kmh_ (~kmh@p200300df5f08b90090b8c32c2ae74bf4.dip0.t-ipconnect.de) (Quit: Leaving)
[17:26:43] *** Quits: gnux (~notadevel@user/gnux) (Quit: Leaving)
[17:26:52] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 268 seconds)
[17:27:37] *** Quits: y1n (~y1n@84-115-65-165.wifi.dynamic.surfer.at) (Ping timeout: 245 seconds)
[17:28:09] <petaflot> earlier I was given this: https://www.irccloud.com/pastebin/inNeOYyE/afirst.py ; I cannot import aclose (found close() but I get AttributeError: __aenter__) nor anext() or next()
[17:28:30] *** Joins: y1n (~y1n@84-115-65-183.wifi.dynamic.surfer.at)
[17:31:32] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[17:31:49] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Ping timeout: 246 seconds)
[17:33:28] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[17:34:17] <petaflot> ^aclose^aclosing
[17:35:08] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[17:35:31] *** Joins: jetchisel (jetchisel@user/jetchisel)
[17:35:32] *** Joins: rsx (~dummy@ppp-188-174-140-73.dynamic.mnet-online.de)
[17:35:54] *** Joins: Liblx (~Alex@2a02:810c:280:59c:4960:d906:b2df:18)
[17:36:58] <Liblx> Hello, I have candlestick data OHLC for the days and need them for the week, why are the Mondays and weeks always shifted when I play around with right and left. What's missing here:
[17:37:00] <Liblx> df.resample('W-MON', closed='right', label='right').agg(ohlc_dict)
[17:38:17] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[17:39:52] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Ping timeout: 246 seconds)
[17:40:11] <Yhg1s> petaflot: what do you mean by 'I cannot import aclose'? What are you importing where? What are you running? What is the actual tradeback you get?
[17:40:15] *** Joins: skapata (~Skapata@user/skapata)
[17:41:31] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[17:41:31] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[17:43:29] *** Quits: magla (~gelignite@55d46309.access.ecotel.net) (Quit: Stay safe!)
[17:44:57] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[17:45:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:45:53] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[17:46:00] <petaflot> Yhg1s: I mean (starting from https://www.irccloud.com/pastebin/inNeOYyE/afirst.py) that I cannot `import contextlib.aclosing` ; anext is not defined anywhere
[17:46:08] *** Parts: senatore1 (~senatoreg@net-5-95-186-109.cust.vodafonedsl.it) ()
[17:46:52] <petaflot> AttributeError: module 'contextlib' has no attribute 'aclosing'
[17:47:04] <petaflot> import syntax was lousy
[17:47:17] <bjs> petaflot: I don't think contextlib has an aclosing function?
[17:47:46] <petaflot> I don't think either. but graingert seems to ;-)
[17:48:39] <graingert> petaflot: I told you that you needed it from contextlib2
[17:49:00] <petaflot> graingert: sorry you didn't :-s
[17:49:03] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:49:06] <graingert> yes I did
[17:49:17] <petaflot> or it was on the chanel and I missed it, then my bad
[17:49:17] <graingert> petaflot: it's p new https://docs.python.org/3.10/library/contextlib.html#contextlib.aclosing
[17:49:31] <graingert> but you can get a backport in contextlib2.aclosing
[17:50:40] <Yhg1s> petaflot: you wouldn't be able to do 'import contextlib.aclosing' anyway, since contextlib is not a package.
[17:50:46] *** Quits: EGH (~EGH@185.25.195.104) (Quit: ZNC - https://znc.in)
[17:51:04] *** Joins: EGH (~EGH@185.25.195.104)
[17:51:15] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[17:51:42] <petaflot> yeah I wrote I used lousy syntax
[17:51:59] *** Quits: Elzington_ (~Elzington@static-198-54-128-62.cust.tzulo.com) (Quit: Leaving)
[17:52:06] <petaflot> and I just realized I overlooked an important fact upstream
[17:52:09] *** Quits: schumaml4 (~schumaml@dslb-092-074-000-078.092.074.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[17:52:45] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[17:53:23] <petaflot> .. after laughing a little because the doc graingert pointed me to uses "thing" as an argument
[17:54:03] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:54:09] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:54:29] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:54:31] *** Joins: Elzington (~Elzington@static-198-54-128-62.cust.tzulo.com)
[17:54:41] *** Joins: schumaml4 (~schumaml@dslb-088-067-051-146.088.067.pools.vodafone-ip.de)
[17:55:04] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Ping timeout: 244 seconds)
[17:56:09] * petaflot hammering "context" over and over again in my head
[17:56:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Client Quit)
[17:56:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:00:55] *** Joins: pnoud (~pnoud@user/pnoud)
[18:02:40] *** Joins: nrg (~NRG@user/nrg)
[18:03:17] <ferz> I'm writting a PID file with process ID number when the program starts, I would like to check if the process is still active when the program is started again.  Is there something usefull to do this check on BSD and Linux?
[18:03:21] *** Jin|away is now known as Jin^eLD
[18:03:26] *** Quits: domhnall_ (~developer@user/domhnall/x-2887755) (Quit: leaving)
[18:03:42] *** Joins: Naan` (~Naan@user/naan)
[18:03:45] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[18:05:43] *** Quits: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net) (Ping timeout: 268 seconds)
[18:06:00] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[18:07:12] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 245 seconds)
[18:07:32] <SnoopJ> ferz, psutil is a pretty helpful (and portable) library
[18:07:42] <wib_jonas> ferz: you should also lock that file (or some other file) with one of the up to four file locking protocols that the kernel provides you, then check if it's locked when you want to test for that
[18:08:19] <wib_jonas> this is useful because the file lock is normally removed when your process dies
[18:09:50] *** Joins: schumaml (~schumaml@dslb-178-002-179-194.178.002.pools.vodafone-ip.de)
[18:09:50] <wib_jonas> ferz: I recommend https://docs.python.org/3/library/fcntl.html?highlight=flock#fcntl.flock
[18:11:16] <grawity> out of those, flock() is portable and works well, fcntl(F_OFD_*) is also sensible but very new, and the non-OFD fcntl is kinda wonky
[18:11:18] <grawity> afaik
[18:11:30] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[18:11:54] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 272 seconds)
[18:11:58] *** Quits: schumaml4 (~schumaml@dslb-088-067-051-146.088.067.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[18:12:09] <wib_jonas> note that flock and lockf are usually separate interfaces with locks that don't care about each other; fcntl F_SETFL may be separate or the same as flock depending on the OS, fcntl F_OFD_SETLK is separate, and they behave slightly differently regarding multiple file descriptions to the same file or to inheriting file descriptions to subprocesses
[18:12:40] <SnoopJ> file locking sounds like a lot more dependence on each platform, but this may be less of a problem if Linux + BSD are the principal targets
[18:12:42] <wib_jonas> F_OFD_SETLK is too new so I don't recommend it unless you're sure you're going to run your program on a machine with all new software
[18:13:03] *** Joins: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch)
[18:13:05] <dustiestgolf> Hello! I am trying to create a package to put up on pypi. I need to include some extra data files though. I have been able to include them in the source tarball but I cannot seem to get them to be included in the wheel. This is my project: https://github.com/alexrkaufman/pytla
[18:13:12] <dustiestgolf> Thanks in advance!
[18:13:25] *** Quits: ammernico (~shark@pd95da482.dip0.t-ipconnect.de) (Quit: WeeChat 2.8)
[18:13:27] <wib_jonas> SnoopJ: the basics aren't really dependence, most platforms have the first three methods, it's just their detailed behavior that depends on the platforms a bit. for most uses the differences don't matter.
[18:14:05] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:14:07] <SnoopJ> wib_jonas, I'm hearing "it doesn't depend on platform" and "it does depend on platform" simultaneously in that message.
[18:14:20] <SnoopJ> It's something worth their consideration, at least
[18:14:55] <wib_jonas> SnoopJ: basically if you're trying to mix multiple types of locks, which is usually a bad idea, then it will depend on the platform
[18:14:58] *** Joins: ammernico (~chat@pd95da482.dip0.t-ipconnect.de)
[18:15:16] <wib_jonas> so just don't mix them, stick to one of the three interfaces
[18:15:56] *** Quits: resmo (~resmo@2a00:d420:9:8a00:26f9:c7db:610f:cdad) (Ping timeout: 272 seconds)
[18:16:22] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-b842-d119-7737-43fd.res6.spectrum.com)
[18:16:29] *** Joins: d00gy (~tonberry@2601:401:c400:8b30:ba27:ebff:fee2:f93c)
[18:16:49] <SnoopJ> wib_jonas, what is gained in this over "is the PID in that file still running?" Avoiding the case where the PID was re-assigned by the OS?
[18:17:06] <wib_jonas> SnoopJ: exactly
[18:17:20] <wib_jonas> also it's easier to make more portable
[18:17:36] <wib_jonas> trying to track down if a process is alive by pid will run into more system dependence
[18:18:25] <wib_jonas> and is usually best done only for debugging, not for serious purposes. the file locks are designed for this kind of thing.
[18:19:18] <wib_jonas> writing the PID and/or a start time into the file is still a nice thing to do to help you (or your users) debugging of course
[18:19:21] <SnoopJ> psutil is absolutely up to the task of "is process $PID still running?" across all of the platforms it lists
[18:20:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[18:20:11] <wib_jonas> perhaps, and so are any of the first three types of file locks. ignore F_OFD_SETLK, that one is system-dependent.
[18:20:25] *** Quits: haroon (~haroon@gw.wmd.de) (Quit: Client closed)
[18:20:33] *** Joins: akk (~akk@97-123-109-214.albq.qwest.net)
[18:20:45] <SnoopJ> all of these options are
[18:22:37] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[18:23:20] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 252 seconds)
[18:24:53] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[18:26:13] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[18:26:18] *** Joins: Guest4522 (~Guest45@82-65-166-34.subs.proxad.net)
[18:27:49] *** Quits: y1n (~y1n@84-115-65-183.wifi.dynamic.surfer.at) (Ping timeout: 246 seconds)
[18:28:19] *** Joins: y1n (~y1n@84-115-64-225.wifi.dynamic.surfer.at)
[18:28:41] *** Guest4522 is now known as VBreton
[18:29:27] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[18:29:58] *** Joins: Paul (~Paul@user/paul)
[18:30:23] * petaflot just realized, in order to do things right, that I need massive parallel processing. since python just uses one core (unless specific measures are taken), I suppose there is no such thing in python?
[18:30:29] *** Quits: jazzy (~jaziz@2600:380:8451:9914:745f:c6b0:8b18:af60) (Ping timeout: 255 seconds)
[18:30:29] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 255 seconds)
[18:30:33] *** Joins: nmoura (~nmoura@177.192.16.58)
[18:30:43] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 244 seconds)
[18:30:43] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Ping timeout: 244 seconds)
[18:30:47] <SnoopJ> petaflot, there are good bindings to OpenMPI, for instance
[18:30:49] <petaflot> like a lib for using GPUs...
[18:30:54] *** Quits: Dwoffi (~doffi@91.132.197.188) (Ping timeout: 272 seconds)
[18:31:06] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[18:31:08] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[18:31:43] <petaflot> SnoopJ: thanks for the tip! gives me something to chew on
[18:31:50] *** Joins: nyah (~nyah@90.221.186.180)
[18:31:54] <SnoopJ> there's pycuda for CUDA devices (but Nvidia are coming out with a more official glue layer Sometime). numba is capable of GPU acceleration as well. Not sure about OpenCL but I'd be surprised if there wasn't something.
[18:32:10] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 256 seconds)
[18:32:21] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[18:33:43] *** Joins: twobitsprite (~twobitspr@66.115.154.132)
[18:33:46] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Ping timeout: 246 seconds)
[18:34:16] *** Joins: pycurious (~Adium@user/pycurious)
[18:34:45] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[18:35:00] <SnoopJ> and for embarrassingly parallel problems, there's GNU parallel 😈
[18:35:22] <petaflot> SnoopJ: I recently replaced my nvidia gpu with a radeon card, becasue nvidia was such a pain on open source platforms. so I'd rather have something more generic
[18:35:40] <grym> petaflot: generic is not really a thing that exists in the world of GPU compute
[18:35:46] <SnoopJ> well, there's OpenCL, but...
[18:35:57] <grym> but noone cares, yeah :/
[18:36:51] <petaflot> meeh. reminds me I drafted some new hybrid CPU architecture (I was taught microcontrollers and ASM, mostly)
[18:36:56] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[18:37:43] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[18:38:17] <petaflot> main differences is that it's a hybrid parallel/serial architecture and has this feature for "recycling" its own entropy
[18:38:18] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[18:38:42] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[18:38:48] <p-i-> I'm using a lib from .ipynb in VSCode. `foo.download(...)` reports "RuntimeError: This event loop is already running". So presumably the .ipynb runtime is using asyncio, (and I can SEE that foo.download is using it).
[18:39:26] <p-i-> There's also an `async def async_download` method side by side with `def download`.
[18:39:41] <p-i-> So I thought I'd try `await foo.async_download` instead.
[18:39:48] <p-i-> But this reports 'not found'.
[18:39:55] <p-i-> Somehow Python can't see it.
[18:40:13] <p-i-> Which is a headscratcher for me. It's right there!
[18:41:05] *** Joins: ice9 (~ice9@user/ice9)
[18:41:07] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[18:41:27] *** Joins: mickey (~user@user/mickey)
[18:41:50] <p-i-> `def download` just does `asyncio.get_event_loop().run_until_complete(download_async(...))`
[18:42:02] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[18:43:35] *** Joins: ice9 (~ice9@user/ice9)
[18:43:57] *** Quits: khanred (~khanred@user/khanred) (Quit: Leaving)
[18:44:25] *** Quits: Blackpajamas (~Blackpaja@167.167.46.2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:47:18] *** Joins: Pickchea (~private@user/pickchea)
[18:47:56] *** Joins: Doffi (~doffi@91.132.197.188)
[18:48:57] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[18:49:27] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:49:57] *** Quits: Blackpajamas (~Blackpaja@167.167.46.2) (Client Quit)
[18:50:40] <ferz> SnoopJ & wib_jonas: thank you
[18:50:41] <wovixo> Hey all, Python newbie here so forgive my ignorance. I've heard a few people bash Numpy, but I'm not clear what the criticism is - can someone enlighten me?
[18:51:02] <SnoopJ> p-i-, IPython uses an event loop of its own, yep
[18:51:25] <wib_jonas> wovixo: dunno, I mostly like numpy. there are a few rough edges, but no too serious problem. I'd recommend it for your numeric needs.
[18:51:34] <SnoopJ> wovixo, it would help to know what kind of bashing you've heard. It's an extremely well-liked library in the (mostly scientific) circles I've discussed it in.
[18:52:17] <SnoopJ> And defers to the underlying BLAS/LAPACK when it can
[18:52:24] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[18:52:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[18:52:54] <wib_jonas> SnoopJ: if you want specific bashing, I want a fricking right identity function that behaves like the other ufunc routines, with their axis handling and conversion.
[18:53:23] <nedbat> wovixo: specifics of the criticism would make it easier to counter. numpy seems like the rock foundation that a lot of Python work is based on.
[18:53:25] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[18:53:30] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 258 seconds)
[18:53:39] <SnoopJ> wib_jonas, what do you mean by "right identity function?"
[18:53:41] <wovixo> I think the general criticism is poor performance.
[18:53:47] <nedbat> wib_jonas: that seems like something that could be added, is there an issue about it?
[18:54:03] <wib_jonas> SnoopJ: a function that takes two numbers x, y and returns y
[18:54:03] <SnoopJ> wovixo, compared with what?
[18:54:19] <nedbat> wovixo: some people might say "python is slow," without realizing that numpy is mostly running C and Fortran code, and is one of the ways to make Python go fast.
[18:54:22] <wib_jonas> nedbat: yes, it could totally be added to a future version. or even to the current version, since I last looked a year ago.
[18:54:33] <nedbat> wib_jonas: is there a feature request for it?
[18:54:37] *** Joins: sgn (~sgn@user/sgn)
[18:54:41] <wib_jonas> nedbat: I don't know
[18:55:07] *** Joins: wyclif (~wyclif@user/wyclif)
[18:55:14] <wib_jonas> I think I'd have to dive deep into its implementation to figure out how to implement one
[18:55:14] <mefistofeles> https://twitter.com/juanluisback/status/1415222517577535488
[18:55:44] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:5ca4:fa04:b487:ba6e)
[18:55:51] <SnoopJ> wib_jonas, why do you want a ufunc for this instead of `def rid(a, b): return a` (perhaps combined with np.broadcast_to() or whatever re: axes)
[18:56:29] <nedbat> wovixo: again, if you can link us to the discussion, we can help sift through the details
[18:56:45] <grym> mefistofeles: whoopsies
[18:57:04] <wib_jonas> SnoopJ: (apart from that that's a left identity, which doesn't matter here) that won't automatically behave like one of those ufuncs. and it will have to invoke a python function for each element or something if I implement it like that, I think.
[18:57:13] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Client Quit)
[18:57:29] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[18:57:43] <SnoopJ> oh, you want the right element
[18:57:59] *** Joins: schumaml1 (~schumaml@dslb-178-010-032-109.178.010.pools.vodafone-ip.de)
[18:58:29] <SnoopJ> wib_jonas, you would have to invoke a python function each time if you tried to write a function that gets called for every pair of elements inside the vectorized loop, but this is a dreadful way to do it, especially when all you really need here is a broadcast
[18:59:34] <wib_jonas> SnoopJ: yes, that's why it would be nicer if it was implemented as a built-in operation in numpy for all the common types, like most of the arithmetic and comparisions, but to implement it like that I'd have to dive into the internals and I'm not ready for that
[18:59:49] <SnoopJ> wib_jonas, I think what you want is `def rid(a, b): return np.broadcast_to(b, a.shape)`
[19:00:11] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 255 seconds)
[19:00:14] <SnoopJ> or something close, not exactly sure what the task is wrt axes
[19:00:21] <nedbat> wib_jonas: you don't have to implement it. Write an issue asking for it, and see what the answer is
[19:00:32] <SnoopJ> yea, if you can make a case for it, it's an easy enough ufunc to write
[19:00:40] *** Quits: schumaml (~schumaml@dslb-178-002-179-194.178.002.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[19:00:47] <grym> mefistofeles: and alpine rears its head again, i'm guessing?
[19:00:49] <SnoopJ> and it's a friendly community in my experience :)
[19:01:48] *** Quits: Doffi (~doffi@91.132.197.188) (Ping timeout: 255 seconds)
[19:02:15] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:02:36] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[19:03:22] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[19:04:14] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 255 seconds)
[19:04:47] <wib_jonas> SnoopJ: no, the second argument of broadcast_to is the shape of the result, not the shape of the other argument. the built-in ufuncs also have these fancy out= and dtype= optional arguments for additional choices.
[19:04:58] <hodapp> ew, why is autograd now part of JAX...
[19:05:17] <SnoopJ> hodapp, hasn't that always been true of JAX?
[19:05:50] <mefistofeles> grym: sorry, I didn't get that :P
[19:06:00] <hodapp> I meant more that autograd isn't developed anymore as a standalone thing
[19:06:02] <SnoopJ> wib_jonas, yea, if you want *all* the stuff of a ufunc, you do need to write a ufunc.
[19:06:04] <hodapp> though at least it's still 'maintained'
[19:06:10] *** Joins: Warped (~Warped@user/warped)
[19:06:19] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Ping timeout: 246 seconds)
[19:06:24] <wib_jonas> nedbat: I'm not sure, I'm trying to search for whether there's a bug ticket, it's not trivial because "identity" comes up in at least three other senses: the identity element of a binary function used for reduce on an empty axis, something about hasing, and an identity matrix
[19:06:27] <grym> mefistofeles: alpine, because of musl, usually forces source builds for scientific packages; which is where this cyclic dependency was found
[19:06:50] <SnoopJ> identity does seem like a keyword that would likely throw more false positives here
[19:06:53] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[19:06:56] *** __jmcantrell__ is now known as jmcantrell
[19:06:56] <mefistofeles> grym: oh right right
[19:07:20] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[19:07:49] <wib_jonas> SnoopJ: yes. nor can we really use "id" because python has long since taken that as the name of an unrelated builtin function, sadly.
[19:08:27] * deniska uses `id` without shame
[19:08:27] *** Joins: Doffi (~doffi@91.132.197.188)
[19:08:28] <SnoopJ> wib_jonas, re: the output shape, maybe broadcast_arrays(a, b) is what's needed
[19:09:01] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[19:09:06] *** Joins: derelict (~derelict@user/derelict)
[19:09:19] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[19:09:36] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[19:09:36] <wib_jonas> SnoopJ: broadcast_arrays. interesting, thanks, I didn't know about taht function.
[19:09:54] <SnoopJ> most of the impl machinery is accessible, if you know what you're looking for :)
[19:10:05] <wib_jonas> SnoopJ: I know, it's even documented.
[19:10:15] <SnoopJ> mercifully so
[19:10:31] <SnoopJ> numpy sets a standard for docs across the board imo
[19:10:49] <grym> deniska: but, do you use id iid across code?
[19:10:50] <SnoopJ> especially with the numpydoc style :D
[19:11:17] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:12:38] *** Joins: ambv (~ambv@c138-59.icpnet.pl)
[19:12:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:12:41] <nedbat> id should definitely not have been in the builtins.  sys.id() would have been plenty.
[19:13:00] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:13:19] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[19:13:37] <wib_jonas> nedbat: I don't particularly mind it being a builtin, I just don't much like its name.
[19:13:41] *** Joins: nmoura (~nmoura@177.192.16.58)
[19:13:47] <SnoopJ> if we're getting rid of things, `is` comes first here imho
[19:13:53] <petaflot> I remember writing some piece of code years ago (I'm not even sure I still have a copy) that displayed this peculiar behaviour that dict items would have a predictible id() ; has anyone encountered this before? if yes, any clue or reference?
[19:13:55] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:13:55] <nedbat> wib_jonas: it's almost never used, so why is it in builtins?
[19:14:04] <wib_jonas> SnoopJ: we're not getting rid of things.
[19:14:07] <SnoopJ> wib_jonas, indeed we are not.
[19:14:13] <SnoopJ> at least `id` can be renamed
[19:14:13] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[19:14:36] <nedbat> petaflot: that may be true for some specific version of python, but is subject to all sorts of invisible forces
[19:14:52] *** Quits: akk (~akk@97-123-109-214.albq.qwest.net) (Quit: +++)
[19:15:03] <SnoopJ> petaflot, in CPython the id() is basically an address in memory, it's possible your program had a very consistent layout from one run to another
[19:16:01] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[19:16:17] <petaflot> in short and to try and make it clearer, the id() of the data was somehow a (hash?) function of the address of the key that data (sub-dict) was stored in. mayb have been python 2.7
[19:16:36] <nedbat> petaflot: in CPython, the id is just the memory address
[19:17:01] <nedbat> petaflot: and how objects get allocated can follow predictable patterns
[19:17:09] <SnoopJ> yea, pymalloc is pretty deterministic AFAIK
[19:17:19] <petaflot> SnoopJ: if I'm not mistaken I would have different processes (not running cpython) have the same ID for the same data) ; so it seems that somehow I was sharing memory between two or more seemingly unrelated processes
[19:17:31] <SnoopJ> petaflot, it's an address in virtual memory
[19:17:36] *** Joins: AutomatedTester (uid395371@selenium/developer/AutomatedTester)
[19:17:51] <SnoopJ> (each copy of the program gets its own memory space, and the OS handles mapping that to physical memory)
[19:18:07] <petaflot> so "virtual memory" in that case is individual to each process?
[19:18:09] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:18:16] <SnoopJ> yea
[19:18:53] <SnoopJ> there's more than a little nuance to that, shared virtual memory is a thing, but "each process gets its own" is the mental picture you want to have
[19:19:09] *** Joins: zodd (~zodd@84-106-62-193.cable.dynamic.v4.ziggo.nl)
[19:19:23] <SnoopJ> relying on id() for anything except "is $this object the exact same object as $that one?" is basically wrong.
[19:19:32] *** Quits: kostkon_ (~androirc@ob21aa.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[19:19:34] <SnoopJ> which is why nedbat argues it should probably not be a builtin
[19:19:39] <nedbat> +1
[19:19:46] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[19:19:52] <nedbat> it's on the same level of utility and surprise as sys.getsizeof
[19:20:21] <petaflot> hmm. got it. my porblem here is that I want to fill dicts such as my_dict = {key0: {key1: {key2: []}}} but it's likely I don't know the keys in the right order
[19:20:24] <SnoopJ> that is, "low" and "high" respectively :)
[19:20:41] <nedbat> SnoopJ: yes, thanks for the clarity :)
[19:21:02] <nedbat> petaflot: can you say more about that? What do you mean by the order of the keys?
[19:21:02] *** Joins: blueberry (~izzy@user/izzy)
[19:21:18] <petaflot> afaik it was a strange side-effect I encountered putting loops inside loops
[19:22:11] <petaflot> I pull items from a database. depending on the order users request them I sture them in memory, and in order to avoid duplicated I need to re-order them
[19:22:13] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[19:22:21] <petaflot> ^sture^store
[19:22:23] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[19:23:11] *** Quits: Blackpajamas (~Blackpaja@167.167.46.2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:23:39] *** Joins: bdeshi_ (~bdeshi@bdeshi.space)
[19:23:53] <petaflot> correction: my_dict = {key0: {key1: {key2: ()}}} (inner element is ummutable)
[19:24:03] *** Joins: schumaml2 (~schumaml@dslb-092-074-001-012.092.074.pools.vodafone-ip.de)
[19:24:08] *** Quits: nirix (uid48447@id-48447.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[19:24:13] *** Joins: timkofu (~timkofu@user/timkofu)
[19:24:44] <SnoopJ> petaflot, this 3-level dict is associated with 3 requests, or one request with 3 keys contained in it?
[19:25:04] *** Quits: blueberry (~izzy@user/izzy) (Client Quit)
[19:25:25] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[19:25:30] *** Quits: bdeshi (~bdeshi@45.86.163.209) (Quit: bouncer disconnect)
[19:25:53] *** Quits: y1n (~y1n@84-115-64-225.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[19:25:57] <AutomatedTester> Hey folks, I was wondering if anyone was aware of why in https://github.com/SeleniumHQ/selenium/blob/trunk/py/selenium/webdriver/remote/webdriver.py#L123-L146 I would get a `TypeError: unhashable type: 'dict'` when using python 3.7 but this works with python 3.9? The line that hits the error is L133. Thanks in advance
[19:25:59] *** Quits: nrg (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[19:26:16] *** Quits: schumaml1 (~schumaml@dslb-178-010-032-109.178.010.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[19:26:49] *** Joins: dhellmann_ (~dhellmann@097-081-099-073.res.spectrum.com)
[19:27:46] <petaflot> SnoopJ: due to performance issues and the amount of data involved, it's associated with 3 different requests
[19:28:47] *** Quits: bdeshi_ (~bdeshi@bdeshi.space) (Quit: quit)
[19:29:15] <petaflot> I'm considering using temporary dicts to store the data until I have the full "chain" so I can merge it in the "master" dict, but this doesn't feel so clean
[19:30:05] <SnoopJ> petaflot, I'm just trying to get a sense for how the dict comes into existence, since how it's created seems to be at the heart of your sorta-question. I'm sure it's clear to you, but we don't have the benefit of that context. A mock-up example would help clarify it a lot.
[19:30:12] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (Ping timeout: 268 seconds)
[19:31:30] <petaflot> your sense is correct. it's my paradigm for emulating any database schema into a single table. I'm note ready to share the full details yet.
[19:32:05] <bjs> AutomatedTester: it looks like it's adding stuff to a set, a bunch of dict's item() pairs.  Probably one of the dicts had a value which was another dict and so the line failed
[19:32:07] <petaflot> not publicly anyway
[19:32:38] <bjs> AutomatedTester: I cannot see why the *Python* version would make a difference.
[19:33:31] *** Quits: Blackpajamas (~Blackpaja@167.167.46.2) (Read error: Connection reset by peer)
[19:33:31] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Remote host closed the connection)
[19:33:47] <AutomatedTester> bjs: I can't see why a python version would matter either... and I asked in #python-dev and no one could think of anything obvious either...
[19:34:01] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[19:34:22] <AutomatedTester> bjs: from what I can see, part of the problem is if there an empty dict or list as a value, that makes things go a little awry
[19:34:33] <bjs> AutomatedTester: I mean,  it's more likely you're just doing something slightly different in the two cases, or that you have a different version of the library perhaps?
[19:34:43] *** Quits: dhellmann_ (~dhellmann@097-081-099-073.res.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[19:34:51] *** Joins: zeden (~zeden@user/zeden)
[19:34:58] <bjs> It's hard to tell because "here is a line in the middle of a random library and it sometimes doesn't work" isn't something that's really possible to debug without more info.
[19:35:01] *** Quits: tims (~tims@193-82-234-90.tpgi.com.au) (Ping timeout: 246 seconds)
[19:35:20] <AutomatedTester> bjs: same test, same libraries, just python version is different
[19:35:45] *** Joins: jdmark (~jdmark@67.8.137.130)
[19:35:46] <wib_jonas> AutomatedTester: dunno, https://docs.python.org/3/library/stdtypes.html?highlight=items#dict-views says only that "For set-like views, all of the operations defined for the abstract base class collections.abc.Set are available (for example, ==, <, or ^)." which means that the & operation should at least succeed, but it doesn't tell what kind of
[19:35:47] <wib_jonas> type it should return
[19:36:09] <bjs> It doesn't matter what type it returns
[19:36:13] <petaflot> if I add items to a dict, I suppose the addess of the dict doesn't change, right?
[19:36:43] <bjs> petaflot: the address of?  Python doesn't expose "address of" really. But in terms of implementation, no.
[19:36:56] <petaflot> bjs: I mean id()
[19:37:01] <AutomatedTester> bjs: https://github.com/SeleniumHQ/selenium/blob/trunk/py/test/unit/selenium/webdriver/remote/new_session_tests.py#L76-L125 is the test.
[19:37:06] <SnoopJ> petaflot, it could
[19:37:11] <bjs> petaflot: id is "identity of" really, so even if the address did change then id() would not.
[19:37:16] <petaflot> :'(
[19:37:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:37:34] <SnoopJ> the Python language admits no concept of memory, it is by definition an implementation detail
[19:37:36] <petaflot> SnoopJ: can you tell me more on under what circumstances this id() might change?
[19:37:46] <bjs> petaflot: the id() won't change
[19:37:53] <wib_jonas> hmm wait, that shouldn't matter because update takes an iterable that it should just iterate through
[19:37:55] <petaflot> oh thatz's nice
[19:37:58] *** Joins: y1n (~y1n@84-115-65-123.wifi.dynamic.surfer.at)
[19:38:03] <wib_jonas> it's the types of the items in that iterable that matter
[19:38:04] <SnoopJ> petaflot, the implementation is perfectly free to do this whenever it feels like it. As bjs says, if it's the same object, id() should *not* change. They aren't the same concept.
[19:38:28] *** Joins: cheater1__ (~Username@user/cheater)
[19:38:33] <bjs> petaflot: why are you using id?
[19:38:40] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[19:38:45] *** cheater1__ is now known as cheater
[19:39:52] <petaflot> bjs: that's just an idea I got because of that strange behaviour I noticed "last" time. what I really want is to fill a dict "starting from the bottom" (or top, depending on how you see it)
[19:39:57] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Remote host closed the connection)
[19:40:07] *** Quits: zeden (~zeden@user/zeden) (Ping timeout: 245 seconds)
[19:40:11] <SnoopJ> petaflot, depending on id() is generally a good sign that something has gone very wrong in design of a program.
[19:40:18] <bjs> petaflot: I'm not sure how id() helps you
[19:40:51] <wib_jonas> AutomatedTester: where do the individual "option" elements of options come from? because this sounds it's trying to hash those
[19:40:58] <petaflot> bjs: id() helped me then to make sure I didn't have any redundancy in memory, to make sure I would not store the same "thing" at two different places
[19:41:08] <bjs> petaflot: can't you use `is` ?
[19:41:11] <bjs> `if o1 is o2`
[19:41:15] <SnoopJ> petaflot, id() being related to memory is trivia that is basically exclusive to CPython
[19:41:23] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Quit: Client closed)
[19:41:31] <SnoopJ> definitely NOT something you should design around
[19:41:37] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[19:41:53] *** Joins: Karel (~Karel@232.56.198.178.dynamic.wline.res.cust.swisscom.ch)
[19:42:20] *** Parts: Karel (~Karel@232.56.198.178.dynamic.wline.res.cust.swisscom.ch) (Leaving)
[19:42:52] <wib_jonas> or... maybe not, I don't understand that code enough
[19:42:55] <SnoopJ> and if you store the same object in two places, you're usually just paying for the cost of a pointer anyway. `d1 = {"foo": my_object}; d2 = {"bar": my_object}` doesn't make a copy of `my_object`, there's no 'waste'
[19:43:30] <AutomatedTester> wib_jonas: https://github.com/SeleniumHQ/selenium/blob/trunk/py/selenium/webdriver/common/options.py#L99-L100 we take an internal dict of settings. I am trying to see which are the same between `options` and what are different and then put them into a new structure to pass on
[19:44:01] *** Joins: Vision (~Vision@024-178-231-009.res.spectrum.com)
[19:44:36] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[19:45:01] <wib_jonas> AutomatedTester: you should probably try to isolate the problem to as small a self-contained testcase as you can, and during that you might find the difference
[19:45:25] <wib_jonas> but I assume you're already trying that
[19:45:40] <AutomatedTester> I have tried that... and the test case here is tiny already
[19:45:44] <AutomatedTester> I will go smaller
[19:46:01] <AutomatedTester> the thing that is confusing me is why this works in some python versions and not in others
[19:46:11] <wib_jonas> it might be tiny, I just don't understand what code is involved to generate those options when you test
[19:47:08] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[19:47:40] <AutomatedTester> wib_jonas: in my test link above, it uses Firefox options. We take that object and then call https://github.com/SeleniumHQ/selenium/blob/trunk/py/selenium/webdriver/common/options.py#L99-L100
[19:47:52] <bjs> AutomatedTester: probably the two versions of Python have slightly different versions of the library installed,  or the library is using something in the stdlib that slightly changed,  or maybe the library just does something different based on the Python version at some point
[19:48:02] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[19:48:04] <AutomatedTester> sorry, https://github.com/SeleniumHQ/selenium/blob/trunk/py/selenium/webdriver/firefox/options.py#L167-L196
[19:48:07] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[19:48:22] *** Quits: Blackpajamas (~Blackpaja@167.167.46.2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:48:34] <AutomatedTester> bjs: it's something in stdlib... 99% sure thats the difference
[19:48:35] <wib_jonas> ah, thank you, that looks better
[19:48:53] <bjs> although I can't think what in the stdlib changed to return dicts instead of something that was previously hashable, that sounds like a breaking change that is unlikely to have happened between 3.7 -> 3.9
[19:48:59] <wib_jonas> anyway, yes, you should probably try to reduce it to a standalone testcase that only has the code that you need
[19:49:01] <petaflot> can I get the id() of the runnign function ?
[19:49:13] <AutomatedTester> wib_jonas: of you s/firefox/chrome you can see the chrome version
[19:49:31] <bjs> petaflot: "the running function" ?
[19:49:58] <petaflot> bjs: the id of the *instance* of the function
[19:49:59] <AutomatedTester> bjs: this is why I am so confused, I didn't think anything like that would break but you folks have been helpful
[19:50:06] <bjs> petaflot: why do you have multiple instances of a function?
[19:50:09] <AutomatedTester> thanks wib_jonas
[19:50:15] <wib_jonas> AutomatedTester: wait a moment, is it possible that in the version where this works, the argument of the update is an empty iterable, which is why it doesn't try to hash anything, even though the type would be wrong?
[19:50:21] <SnoopJ> petaflot, you can call id() on any object. It's rare that you want to.
[19:50:25] <wib_jonas> perhaps you should try to test that
[19:50:44] <petaflot> because I can have more instances of a function running at the same time (in part due to async) ; I need to identify each instance uniquely
[19:50:46] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Ping timeout: 246 seconds)
[19:50:52] <bjs> petaflot: instances?
[19:50:54] <AutomatedTester> wib_jonas: I can try have a look
[19:51:16] <bjs> petaflot: you are talking as if each call creates a new actual function object but of course it does not
[19:51:17] <SnoopJ> petaflot, that sounds like its the responsibility of whatever async framework you're using
[19:51:23] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[19:51:36] *** Joins: menace (~someone@user/menace)
[19:51:50] <bjs> petaflot: oh an async def (?), you don't want the id of the function but of the coroutine it returns in that case. Which is very different.
[19:51:55] <AutomatedTester> wib_jonas: the update doesn't error, it's `opts[min_index].items() & opts[i + 1].items()` because if I do that in the debugger it throws the same error
[19:52:03] <bjs> petaflot: and also you want to be *really* careful with id()s of transient objects.
[19:52:23] <bjs> petaflot: try:  print(id(object()), id(object()))
[19:52:37] <bjs> petaflot: lots of people will report the above print will output the same id twice, even though the two objects are clearly not the same.
[19:53:10] <petaflot> ouch
[19:53:14] <bjs> petaflot: ouch?
[19:53:27] <petaflot> yeah. same id with different objects
[19:53:29] <SnoopJ> ouch indeed; this is why using id() really at all is just a recipe for pain
[19:53:31] <bjs> petaflot: Yes.
[19:53:42] <Nothing4You> how would i implement an (async) lock on a string? e.g. i have an api where i generate responses that involve a bit of work and i'd like to avoid running the same query twice in parallel. if i can block the second query from running before the first one completes it can access the cached result.
[19:53:44] *** Joins: mav`rik (~unknown@ec2-54-171-126-99.eu-west-1.compute.amazonaws.com)
[19:53:45] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:53:59] <bjs> Nothing4You: are you using asyncio?
[19:54:02] <Nothing4You> yes
[19:54:05] <petaflot> maybe I'm just trying too hard, and that local scope might just be the answer
[19:54:09] <bjs> Nothing4You: there's asyncio.Lock
[19:54:11] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[19:54:13] <wib_jonas> AutomatedTester: hmm
[19:54:29] <SnoopJ> petaflot, it's hard to tell what the problem is, to be perfectly honest. I would recommend having a good think about it and bringing us a complete problem statement.
[19:54:35] <Nothing4You> bjs: i don't see how i would use that with locks on keys
[19:54:37] <zware> petaflot: For reference, I cannot recall a single usage of `id` in real code in over 5 years
[19:54:44] <bjs> Nothing4You: have a Lock per key?
[19:54:51] *** Joins: mike18 (~geri@216.200.232.252)
[19:54:57] <mav`rik> Hi all, using poetry, is there a way to specifically tell it a pyproject.toml file to use (or project directory) without specifically cd-ing into said dir? Something equivalent to `POETRY_PROJECT=/some/path poetry run scriptname`?
[19:55:00] <Nothing4You> i guess i could use dict of locks and then a lock for accessing the dict
[19:55:02] <Nothing4You> that might do it
[19:55:11] <mike18> hi how can i get the type of exception and a trace here? https://ideone.com/QeObuD
[19:55:45] <bjs> mike18: type(e) is the type, and the `traceback` module lets you get information from the traceback
[19:56:03] <SnoopJ> mav`rik, `env -C/some/path poetry run scriptname` perhaps?
[19:56:12] <SnoopJ> I don't think poetry lets you do it the way you're thinking
[19:56:28] <mike18> @bjs logging.error("Unhandled exception received: %s", exc_info=(exc_type, exc_value, exc_traceback)) ?
[19:56:31] <mav`rik> SnoopJ: Yeah, it's beginning to feel that way, but I was ever-hopeful :)
[19:56:35] <petaflot> zware: as I mentionned I was just using id() as a means to (visually) check for consistency. I might have been missing the obvious
[19:56:44] *** Joins: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi)
[19:56:52] *** Joins: gspbirel56 (~gspbirel5@c-98-236-15-183.hsd1.pa.comcast.net)
[19:56:56] *** Joins: nrg (~NRG@user/nrg)
[19:57:25] <bjs> mike18: yeah error() and friends all take an exc_info argument you can pass like that too
[19:57:28] <zware> petaflot: Ah, ok.  I jumped in without reading the entire scrollback :)
[19:57:30] <Nothing4You> my main concern is that i'd like to clean up locks once they're no longer in use
[19:57:32] <AutomatedTester> wib_jonas: I can reproduce it now
[19:57:35] <bjs> if you just wanted to log the exception
[19:57:41] <mav`rik> mike18: since you're doing this from within the except block you could get those from sys (sys.exc_info())
[19:57:44] *** Joins: KevinX (~KevinX@2.56.190.208)
[19:57:49] *** Joins: Blankspace (~abcd@user/blankspace)
[19:57:49] <mike18> bjs: but is syntax ok what i show? logging.error("Unhandled exception received: %s", exc_info=(exc_type, exc_value, exc_traceback))
[19:57:50] <AutomatedTester> wib_jonas: if the value is another dict it throws the error
[19:57:51] <bjs> Nothing4You: what counts as "no longer in use"?  you can just remove the key from the dict once you don't need it anymore
[19:58:13] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:58:32] <bjs> mike18: I don't think the %s is correct with exc_info;  I'm sure the documentation explains how to use exc_info argument
[19:58:36] <mike18> ok
[19:58:41] <SnoopJ> mav`rik, poetry is pretty heavy on "our way or the highway" :(
[19:59:18] <Nothing4You> bjs: if i remove the lock after using it and i still have a reference to it then i just remove the ref in the dict
[19:59:27] *** Joins: bdeshi (~bdeshi@bdeshi.space)
[19:59:31] <bjs> Nothing4You: why would you still have a reference to it?
[19:59:32] <wib_jonas> mike18: or just replace the "%s" with "%r" and you'll probably see the type and all other relevant info in the debug-formatted representation of the exception
[19:59:33] <mav`rik> SnoopJ: Yeah, it's a bit of an awkward situation as someone is trying to use if from a crontab, and thats... well, it used to be a simpler setup but this is the way of things right now
[19:59:36] *** Joins: irrgit (~irrgit@192.241.175.183)
[19:59:48] <zware> Nothing4You: What about just a dict of string to task?  Then whenever you need the result from the string, it's just `await d[s]`, which will return the result if the task is already done
[20:00:02] <mav`rik> SnoopJ: My /usr/bin/env (coreutils) doesn't have `-C`, is that a new thing?
[20:00:12] *** Quits: y1n (~y1n@84-115-65-123.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[20:00:33] <mike18> @wib_jonas @bjs changed it to: https://ideone.com/PWH9UJ good?
[20:00:33] <grym> mav`rik: `$(poetry env info -p) q
[20:00:37] <Nothing4You> bjs: i have 2 tasks, both acquire the lock, once the first task is done it would remove the ref from the dict but the second task still has the reference as it's now using it
[20:00:38] <grym> mav`rik: `$(poetry env info -p)`, er
[20:00:39] <SnoopJ> mav`rik, I don't think so?
[20:00:39] <bjs> Nothing4You: `<maybe create and add lock to dict> async with locks[key]: <do the algorithm for key>`
[20:00:41] <AutomatedTester> wib_jonas: `{"a": 1, "b":2}.items() & {"c":2, "a":{"bar": "food"}}.items()` does the error
[20:01:00] *** Joins: y1n (~y1n@212095005022.public.telering.at)
[20:01:07] <AutomatedTester> in python 3.9 it gives an empty set (expected) and 3.7 it errors
[20:01:12] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[20:01:18] <SnoopJ> grym, I think they want to invoke poetry from not-the-project-dir
[20:01:45] *** Joins: pnoud (~pnoud@user/pnoud)
[20:02:10] <grym> ah, not quite the same as "run this poetry managed project from cron"
[20:02:24] *** Joins: dbristow_ (~dbristow@user/dbristow)
[20:02:35] <wib_jonas> AutomatedTester: that sounds like one of those cases where it might want or might not want to hash the pair ("a", {"bar": "food"}) to compute the intersection of those items sets, depending on its impelementation, and so could be right to succeed or fail I guess
[20:02:41] <bjs> Nothing4You: okay well that doesn't sound safe because if another task came along after you deleted it there it'd go wrong
[20:02:45] <wib_jonas> AutomatedTester: but that is a nice self-contained test case
[20:02:51] *** Quits: dbristow (~dbristow@user/dbristow) (Read error: Connection reset by peer)
[20:03:15] <mav`rik> grym: if there's a clean way of setting up global environments for this particular project that could probably work too, but the "run from cron" bit would be nice if I didn't have to do `cd /some/project/path && poetry run scriptname`
[20:03:37] <SnoopJ> mav`rik, if your shell has pushd/popd: `pushd /some/path; poetry run scriptname; popd` maybe
[20:03:42] <Nothing4You> bjs: exactly, basically i'd want the lock deleted once it no longer is in use, as in not locked and nobody waiting for a lock
[20:04:30] <Nothing4You> this might be doable with zware's suggestion with just a lock on the dict and having the task remove itself from the dict once finished
[20:04:34] <SnoopJ> or maybe it should be using some &&/|| magic in case one of those commands fails? I'd be tempted to make a brand new shell if I was worried about the edge cases heh
[20:04:39] <wib_jonas> AutomatedTester: maybe one of the versions has a specialized implementation for the items & operation that avoids that? I don't really know, but neither behavior seems clearly wrong
[20:04:43] <mav`rik> SnoopJ: sure, just as ugly though, to my eyes at least :(
[20:04:50] <bjs> Nothing4You: I'm not sure why you need a lock on the dict at all
[20:05:07] <AutomatedTester> wib_jonas: I agree with you
[20:05:11] <Nothing4You> to avoid time of check vs time of use creating multiple tasks
[20:05:12] <SnoopJ> mav`rik, poetry in motion, as it were
[20:05:16] <grym> mav`rik: if you just want to run `some/poetry/python -m module` in a crontab, you can always avoid the activation or cd completely by calling the venv's full path.  in my crontab i have stuff like `/home/grym/Projects/foo/venv/bin/foo-entry-point --option bar`
[20:05:17] <bjs> Nothing4You: but dictionaries aren't async
[20:05:19] <AutomatedTester> I have asked in #python-dev for clarification
[20:05:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[20:05:29] <grym> mav`rik: (where foo is a poetry-managed project)
[20:05:33] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[20:05:43] *** Joins: wyclif (~wyclif@user/wyclif)
[20:05:49] <Nothing4You> good point
[20:05:50] *** Quits: gspbirel56 (~gspbirel5@c-98-236-15-183.hsd1.pa.comcast.net) (Quit: Client closed)
[20:05:51] <mike18> @wib_jonas check: https://ideone.com/uXYBkK ... %r doesnt work btw... good to show all the infos like that?
[20:05:52] <zware> Nothing4You: If you do `d[s] = asyncio.create_task(do_the_thing(s))`, there is no such problem.  This isn't threading :)
[20:06:02] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:06:13] *** Joins: gspbirel56 (~gspbirel5@c-98-236-15-183.hsd1.pa.comcast.net)
[20:06:17] *** Quits: gspbirel56 (~gspbirel5@c-98-236-15-183.hsd1.pa.comcast.net) (Write error: Connection reset by peer)
[20:06:22] <Nothing4You> yeah i forgot that non-async stuff runs in order :D
[20:06:22] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:06:31] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[20:06:46] <Nothing4You> thanks
[20:07:34] <zware> (Also, not sure why you need the task to remove itself.  If you want to constrain the size of the task cache, just check the size before you add a new one and if it's too big pop one that's already done)
[20:07:38] <mav`rik> grym: yeah, the `scripts` part of pyproject.toml for whatever reason doesn't seem to have resulted in entrypoints alike filesystem entries.
[20:07:39] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[20:07:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:07:52] <wib_jonas> mike18: I have no idea how logger's formatter works really.
[20:08:08] <mike18> but you saw the output?
[20:08:10] <mike18> looks good?
[20:09:40] <wib_jonas> mike18: I've no idea, I'm not the one who you're making these messages for. also be very careful with catching all exceptions without restriction and not rethrowing ever, because that's usually a very bad idea and will just result in mysterious bugs with your data in weird states.
[20:09:42] *** Joins: bambams (~bambams@user/bambams)
[20:09:50] <Nothing4You> zware: keeping memory footprint small and i have redis cache for longer term storage
[20:09:53] *** Joins: Gerula (~Gerula@user/gerula)
[20:10:10] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[20:10:21] <wib_jonas> mike18: python usually prints a nice traceback when it gets an unhandled exception by default, so such handlers are often unnecessary
[20:10:24] <SnoopJ> a good rule of thumb: only catch exceptions you can do something about
[20:10:43] *** Quits: y1n (~y1n@212095005022.public.telering.at) (Ping timeout: 246 seconds)
[20:10:47] *** Quits: NeoCore (~neocore@217.138.207.156) (Quit: Leaving)
[20:10:57] *** Joins: y1n (~y1n@84-115-64-243.wifi.dynamic.surfer.at)
[20:11:29] <wib_jonas> yes, what SnoopJ says
[20:11:31] <zware> Nothing4You: Ah, so you're checking redis first, then processing if you need to (and storing the result in redis as part of that processing)?  That makes sense :)
[20:11:42] <grym> mav`rik: once you `poetry install`, they appear in the venv/bin/ as normal
[20:11:44] <Nothing4You> yeah
[20:12:07] <grym> mav`rik: (and finding where that venv is is what poetry env info -p is for)
[20:12:22] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[20:12:29] <SnoopJ> grym, if you can use `poetry` for any of this, the problem basically doesn't exist, because you're already in the directory
[20:12:38] *** Joins: DXR (~lyrical@46.246.236.246.dsl.dyn.forthnet.gr)
[20:12:46] <SnoopJ> (or you got information out of it prior, and you're using that)
[20:12:50] <grym> you could also just hard code it, yeah
[20:12:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:13:11] <bjs> mike18: do you not like the output?  I'm not sure what it is you're after
[20:13:21] <mike18> its all good
[20:13:50] <mike18> just want to get all the infos after an exception is thrown
[20:14:16] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.2)
[20:15:06] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:15:10] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:15:28] <wib_jonas> mike18: the normal exception handler prints all the infos, and has the decency to abort afterwards.
[20:15:55] <SnoopJ> it is sometimes useful to catch Exception, emit a log message, and then re-raise
[20:16:17] <mav`rik> grym: Thank you. Looks like the `--no-root` arg was passed to `poetry install`... *sigh*
[20:17:15] <wib_jonas> mike18: the normal exception handler prints all the infos, and has the decency to abort afterwards. if you want to modify how or where that info is printed, you can try to modify sys.excepthook .
[20:17:24] *** Joins: Deneb (~johnch@58.111.189.80.dyn.plus.net)
[20:17:32] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:18:27] *** Quits: mike18 (~geri@216.200.232.252) (Ping timeout: 245 seconds)
[20:19:49] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[20:20:03] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[20:23:10] *** Quits: Blackpajamas (~Blackpaja@167.167.46.2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:23:31] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:23:32] *** Joins: emika1 (~emika@5.181.235.116)
[20:23:58] *** Quits: emika (~emika@5.181.235.116) (Ping timeout: 258 seconds)
[20:23:58] *** emika1 is now known as emika
[20:24:23] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[20:24:43] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Ping timeout: 246 seconds)
[20:25:38] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Quit: WeeChat 2.8)
[20:25:50] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[20:27:46] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[20:31:22] *** Joins: mcglk (~mcglk@131.191.49.120)
[20:32:46] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[20:33:05] *** Joins: dakudos (~dakudos@2607:fb90:6c32:84e0:c917:7bb6:e5d0:86e4)
[20:33:28] *** Quits: Blankspace (~abcd@user/blankspace) (Ping timeout: 246 seconds)
[20:35:08] *** Joins: kor1 (~kor1@user/kor1)
[20:38:06] *** Joins: cheater1__ (~Username@user/cheater)
[20:38:12] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[20:38:12] *** cheater1__ is now known as cheater
[20:38:17] *** Quits: dakudos (~dakudos@2607:fb90:6c32:84e0:c917:7bb6:e5d0:86e4) (Ping timeout: 255 seconds)
[20:38:19] *** Joins: clawh (~clawh@78.10.204.208)
[20:40:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:41:19] *** Joins: hposca (~hposca@node-1w7jr9phoke2sektanidvb94u.ipv6.telus.net)
[20:42:27] *** Quits: timkofu (~timkofu@user/timkofu) (Quit: Lost terminal)
[20:42:41] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[20:42:45] *** Joins: zeden (~zeden@user/zeden)
[20:42:46] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:44:08] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 255 seconds)
[20:44:12] *** Joins: qlixed (~qlixed@host7.181-9-190.telecom.net.ar)
[20:44:57] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:45:15] *** Joins: bambams_ (~bambams@user/bambams)
[20:46:09] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[20:47:23] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:47:26] *** Parts: dingir_ (~dingir@user/dingir/x-9303082) (Leaving)
[20:47:43] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[20:48:07] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 258 seconds)
[20:48:31] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[20:48:38] *** Joins: cheater (~Username@user/cheater)
[20:48:52] *** Quits: bambams (~bambams@user/bambams) (Ping timeout: 246 seconds)
[20:50:57] *** Quits: pycode (~pycode@2001:b07:5d28:551:5008:4a07:d41f:882d) (Ping timeout: 245 seconds)
[20:51:34] *** Joins: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net)
[20:51:38] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[20:51:50] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Quit: Leaving)
[20:52:36] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[20:53:29] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 258 seconds)
[20:55:48] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[20:58:28] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:5ca4:fa04:b487:ba6e) (Quit: Textual IRC Client: www.textualapp.com)
[20:58:30] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[20:58:39] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Ping timeout: 268 seconds)
[20:59:18] *** Joins: d3sync (~d3sync@62.1.243.19.dsl.dyn.forthnet.gr)
[21:00:54] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Quit: Client closed)
[21:01:10] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[21:02:20] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[21:03:05] *** Joins: joe1 (~joe@user/kenwoodfox)
[21:03:46] *** Quits: sebastianos (~sebastian@user/sebastianos) (Read error: Connection reset by peer)
[21:04:07] <joe1> Im not very familer with hypercorn, asgi stuff. and im getting a connection refused error thats leaving me a little stumped
[21:04:26] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[21:05:05] *** Joins: yaalon (~yaalon@189.202.79.66.cable.dyn.cableonline.com.mx)
[21:05:12] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[21:05:52] <joe1> Hold on the traceback is too long XD
[21:06:06] <joe1> its a lot to handle
[21:06:11] *** joe1 is now known as silverfox
[21:06:18] *** Joins: yaalon_ (~yaalon@201.171.90.143.dsl.dyn.telnor.net)
[21:06:23] *** Quits: rsx (~dummy@ppp-188-174-140-73.dynamic.mnet-online.de) (Quit: rsx)
[21:06:39] <silverfox> Got it~ https://bpa.st/V56Q
[21:07:09] <silverfox> It seems to connect locally just fine, but once i get it behind our building's reverse proxy it seems to freak out
[21:07:16] <silverfox> but it does work with a direct connection
[21:07:34] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[21:07:41] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-05da-3b5d-73ee-9c90.res6.spectrum.com)
[21:08:30] *** Joins: Gaming4JC (~user@user/gaming4jc)
[21:08:37] *** silverfox is now known as SilverFox
[21:08:49] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Ping timeout: 246 seconds)
[21:09:26] *** Quits: yaalon (~yaalon@189.202.79.66.cable.dyn.cableonline.com.mx) (Ping timeout: 252 seconds)
[21:09:39] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[21:09:42] *** Joins: kenwoodfox (~quassel@user/kenwoodfox)
[21:10:45] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[21:11:11] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:11:51] *** Quits: y1n (~y1n@84-115-64-243.wifi.dynamic.surfer.at) (Ping timeout: 255 seconds)
[21:12:03] *** Joins: y1n (~y1n@84-115-64-243.wifi.dynamic.surfer.at)
[21:12:16] <SilverFox> Maybe this has something to do with it? DEBUG:urllib3.connectionpool:Starting new HTTP connection (16): localhost:34473
[21:12:22] <SilverFox> why is it trying to connect to localhost?
[21:12:51] *** Joins: MemoriaVetusta (~MemoriaVe@95.181.232.11)
[21:13:09] *** Joins: sazawal (~sazawal@182.68.81.25)
[21:13:28] *** Joins: cheater1__ (~Username@user/cheater)
[21:13:39] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 255 seconds)
[21:13:40] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[21:13:45] *** cheater1__ is now known as cheater
[21:14:23] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[21:15:00] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[21:15:24] <dale> Perhaps PyYAML's documentation page should *start* with safe_load rather than load.
[21:15:59] <grym> dale: i have some memory of safe_load being deprecated because now you have to ask for the rude version and load is safe_load
[21:16:14] <grym> either that or i'll be disappointed twice!
[21:16:57] <SilverFox> Blah~~ this traceback is REAL messy and none of it seems to point to my code!
[21:17:08] <SilverFox> I may just be dumb but i hate when that happens in python
[21:17:30] <SilverFox> i feel like i see it a lot :/ all of these things the error is rising through are very detached from my own code and idk what to check!
[21:17:53] <SnoopJ> SilverFox, you might like to try this new(ish) library that addresses exactly these problems: https://github.com/aroberge/friendly
[21:18:20] <SilverFox> SnoopJ: Ill give it a go :3 i do want to figure out my issue and idk if this traceback is really helping me
[21:19:00] <SnoopJ> SilverFox, tracebacks are very dense in information, so they can be hard to read. Friendly does not discard any of that output, but it spaces it out and tries to contextualize it.
[21:19:10] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:19:24] <SilverFox> SnoopJ: ill give it a go, i just cant see why its failing..
[21:19:35] <SilverFox> SnoopJ: it gets the message! but the bot dosent respond :c
[21:19:44] <SnoopJ> SilverFox, if you want help from this channel with an error report, you should share the complete error report.
[21:19:44] *** Quits: chele (~chele@user/chele) (Read error: Connection reset by peer)
[21:19:58] <dale> grym: That kind of rings a bell but this doesn't look like it to me: https://github.com/yaml/pyyaml/blob/master/lib3/yaml/loader.py#L51
[21:19:59] <SilverFox> SnoopJ: Wdym? Isent that what i did already?
[21:20:05] *** Joins: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth)
[21:20:10] <grym> dale: yeah, i think i'm just disappointed twice
[21:20:11] <dale> grym: (I wonder if I'm remembering ConfigParser doing something like that.)
[21:20:25] <grym> no, i don't think so..
[21:20:28] <dale> Python 2 had SafeConfigParser
[21:20:37] <SilverFox> Its only a few messages up, heres the link again:
[21:20:39] <dude-x> my coworker is writing a CLI tool in python. how can you handle stdin (piping in a file) with click
[21:20:39] <SilverFox> https://bpa.st/V56Q
[21:21:41] <ammar2> dude-x: if you're using a `click.File` as the argument, you can just pass `-` for it to take input from stdin
[21:21:56] <ammar2> dude-x: e.g `tool | ./myscript.py --file -`
[21:22:39] <SilverFox> SnoopJ: Is that formatting ok?
[21:24:47] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[21:25:08] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[21:25:15] <dude-x> is there a way to check sys.stdin without blocking
[21:25:32] *** Quits: emerent (~quassel@p200300cd5721e68cba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[21:25:43] <dude-x> like if there's stuff in sys.stdin being piped, do somehting else, go on
[21:25:55] *** bambams_ is now known as bambams
[21:26:16] *** Joins: emerent (~quassel@p200300cd5721e6a7ba27ebfffed28a59.dip0.t-ipconnect.de)
[21:26:44] <SnoopJ> SilverFox, well, it looks like the connection can't be established at all, the remote is refusing it. That tells me it's reaching the remote, but the remote is saying "no" to the connection request. Are you sure you're using the right port? Especially since it looks like you're running the client inside Docker, and Docker networks can be tricky at times.
[21:26:55] <Sheilong> Numpy just gave a inverse for a matrix that is singular.
[21:27:12] <ammar2> dude-x: you can select() to see if there's input available or if you're switching modes between whether the user is on a terminal or piping stuff in, generally you use `isatty`
[21:27:39] <SnoopJ> Sheilong, from numpy.linalg.inv() ?
[21:27:42] <SilverFox> SnoopJ: Yes its in docker, yes i only gave it a single port to use so im not super sure why it would try and use another one? I can send over my docker-compose but that might be better suited for #docker
[21:27:45] <Sheilong> SnoopJ: Yes.
[21:27:59] <SnoopJ> Sheilong, sounds like it might be a numerical stability problem.
[21:28:18] <ammar2> dude-x: `sys.stdin.isatty()` specifically
[21:28:24] *** Quits: bambams (~bambams@user/bambams) (Quit: Rrrrrrrrregards)
[21:28:31] <Sheilong> SnoopJ: here is the output https://imgur.com/a/R7xW4Jq
[21:28:58] *** Joins: bambams (~bambams@user/bambams)
[21:29:03] <SnoopJ> SilverFox, the network inside of Docker is virtual: a request on a port inside the network may use some other port outside the container.
[21:29:03] <Sheilong> a matrix with very small negative numbers.
[21:29:21] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Remote host closed the connection)
[21:29:39] <SnoopJ> SilverFox, and that could definitely cause what you're seeing here: the remote saying "nope, no connection here" because you're knocking on the wrong port. That's just a guess, but it's something to check.
[21:30:23] <SilverFox> SnoopJ: Ah, i see. Ok, is there a nice way to test that and see if thats the issue? in my compose.yml ive mapped 3978 to 3978 and exposed 3978
[21:30:53] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[21:30:59] <p-i-> Somehow `for foo in allfoo` then `f.write(foo) ; f.write('\n')` is writing foo but not the newline.
[21:32:40] <grym> Sheilong: what's the condition of that matrix, i wonder
[21:32:50] <SnoopJ> SilverFox, probably a whole bunch of ways, #docker could help you chase down that possibility
[21:33:17] <Sheilong> grym: having 0,1,2,-3 in some order in every row.
[21:33:43] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[21:33:59] <SilverFox> SnoopJ: Ok, before i hop over any idea why that url is not complete?
[21:34:01] <SnoopJ> SilverFox, there's also a way to increase the verbosity of urllib3, although I don't recall the exact spelling. That might give you some more diagnostic information on the ConnectionError
[21:34:02] <grym> Sheilong: i mean np.linalg.cond
[21:34:07] <SilverFox> Max retries exceeded with url: /v3/conversations/4c96e5e0-e4c5-11eb-b...
[21:34:12] <grym> Sheilong: (it's real high, ~e16)
[21:34:14] <SilverFox> SnoopJ: Oh ok, i can try that
[21:34:20] <SnoopJ> SilverFox, I don't know what you mean by "not complete"
[21:34:21] *** Joins: FastZ (~FastZ@pool-72-83-101-219.washdc.east.verizon.net)
[21:34:37] <SilverFox> SnoopJ: the url dosent have anything before the leading / like https:// or wss:// or anything
[21:34:37] <bambams> p-i-: The obvious and obnoxious question would be why are you using ; instead of a newline?
[21:35:31] <jabberwock> <3 bambams for being self deprecating and wise
[21:35:32] <hexology> if you wanted to build a quick and dirty ORM in 2021, would it be silly to build it on top of attrs, attrs and just map attrs attributes to database columns/fields?
[21:35:42] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[21:36:15] *** Quits: FastZ (~FastZ@pool-72-83-101-219.washdc.east.verizon.net) (Client Quit)
[21:36:16] <jabberwock> hexology: nothing is silly if you're learning something. With that said, there are many solutions out there.. such as sqlalchemy
[21:36:28] *** Joins: todda7 (~torstein@static-qvn-qvu-160026.business.bouyguestelecom.com)
[21:36:47] <hexology> jabberwock: the real use case is that this would be an "ODM" for mongodb, and the existing libraries are distasteful for one reason or another
[21:37:07] <hexology> currently my org has a hand-rolled ODM and the internals are fine. but the API is too dynamic and difficult/impossible to type annotate
[21:37:51] *** Joins: sebastianos (~sebastian@user/sebastianos)
[21:37:55] <jabberwock> It seems your question is old: https://stackoverflow.com/questions/18827379/nosql-database-independent-orm-odm-for-python
[21:37:59] <hexology> basically the list of fields is a list of strings, and __init__ does `for fieldname in self.fields: setattr(self, fieldname, kwargs.get(fieldname)`
[21:38:09] <jabberwock> To be transparent, I'm not familiar with ODM and NoSQL
[21:38:14] <SnoopJ> SilverFox, that does seem kind of suspicious. I can't tell you why it's like that, though. Maybe you've forgotten to put the hostname in where the Request is being built.
[21:38:25] *** Joins: Betal (~Beta@user/betal)
[21:38:33] <SilverFox> SnoopJ: I only put the bind url in one spot, also linked in that pastebin above
[21:38:33] <jabberwock> hexology: Based on the first few results it seems you're ahead of the game
[21:38:41] <SnoopJ> SilverFox, I can't tell you the answer you want.
[21:38:41] <SilverFox> SnoopJ: I wish the traceback went all the way down to something i wrote
[21:38:45] <SnoopJ> SilverFox, it does
[21:38:46] *** Quits: ice9 (~ice9@user/ice9) (Quit: Leaving)
[21:38:46] <SilverFox> SnoopJ: Yeah :/
[21:38:49] <grym> Sheilong: sympy correctly tells me that the determinant of that matrix is 0, but numpy doesn't, so i'm chalking this up to floating point precision
[21:38:51] <SnoopJ> in several places, no less
[21:38:56] *** Joins: ice9 (~ice9@user/ice9)
[21:39:01] <SilverFox> SnoopJ: Like where?
[21:39:09] <hexology> jabberwock that's fine. assume the internals are fine and it all works, i'm just thinking about tidier ways to implement a django-style declarative API without reinventing the wheel, either writing all your own descriptors or "scraping" specially-annotated attributes and generating an __init__ method like attrs does
[21:39:12] <jabberwock> hexology: I place I might research would be AWS DynamoDB because I know the folks there are on top of that type of thing
[21:39:29] *** Joins: mokulus (~mokulus@user/mokulus)
[21:39:34] *** Quits: Syrup (uid10029@user/maple) (Quit: Connection closed for inactivity)
[21:39:35] <hexology> the fact that it's an ORM or ODM is kind of immaterial, i probably shouldn't have mentioned it
[21:39:42] <SnoopJ> SilverFox, L237 of the traceback for instance is coming from BoardBot.py
[21:39:52] <jabberwock> Well.. I would think ODM would be less complex, but that's ignorance
[21:40:01] *** Joins: omegatron (~some@p5484990d.dip0.t-ipconnect.de)
[21:40:18] <hexology> less than an ORM? yes, for sure
[21:40:19] <jabberwock> vis-a-vis ActionRecord and all of its quirky relationships
[21:40:35] <SnoopJ> SilverFox, the way to interpret that is that the await you do on Line 87 of BoardBot.py is the local-to-the-code-you-shared origin of the error
[21:40:40] <grym> Sheilong: you can check the rank before you invert, perhaps?
[21:40:52] <SnoopJ> the stuff above that is starlette etc.
[21:41:01] <SnoopJ> above in scope, not in the traceback
[21:41:25] <hexology> jabberwock it's easier because: 1) there's only one mongodb and only one pymongo/motor, so you don't need to accommodate various dialects and not-quite-spec-compliant underlying libraries, and 2) mongodb queries are json, so you don't need something like the sqlalchemy "core" layer, the user just gives you a dict and that's good enough.
[21:41:27] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[21:41:34] <SilverFox> SnoopJ: Sorry, catching up one sec
[21:41:34] <Sheilong> grym: Yes. It gives the correct rank.
[21:42:00] <hexology> and building a high-level django/sqlalchemy-style "query" API is out of scope for us, fortunately
[21:42:10] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[21:42:15] <grym> Sheilong: i get a rank 3 for a 4x4 matrix
[21:42:15] <SilverFox> SnoopJ: ok, hm thats helpful i think
[21:42:20] <grym> Sheilong: which looks naughty to me
[21:42:34] <jabberwock> hexology: that makes sense. So the ORM stuff contains way too much overhead for what you're doing it seems
[21:42:41] <sazawal> Hi all. Does it happen sometimes that a dictionary put in a multiprocessing queue alters on get? I am sending a dict {"d1":dict1,"d2":dict2} in a loop, and receiving in another loop. It sometimes happens that d1 and d2 do not belong to the same loop iteration.
[21:42:53] *** Quits: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth) (Quit: shibboleth)
[21:43:02] <hexology> jabberwock at least one full-featured ORM/ODM exists for mongodb, but we don't like their design decisions :P
[21:43:54] <grym> Sheilong: so in the case where LU decomposition is having itself a whoopsie with an ill-conditioned matrix of floats, checking the rank first before inverting is probably what i'd do
[21:44:00] <grym> Sheilong: (or use sympy, which is slow)
[21:44:17] <SnoopJ> yea, that's an ill-conditioning problem, cond(A) is ~ 2e16
[21:44:28] <SnoopJ> or well, it _looks_ like it's ill-conditioning.
[21:44:34] <grym> SnoopJ: i think so too
[21:44:53] <grym> numpy thinks the determinant is 8e-15, heh
[21:44:56] <grym> not... quite.
[21:45:05] *** Joins: Pickchea (~private@user/pickchea)
[21:45:36] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[21:46:50] <Sheilong> grym: tensorflow gives the same result.
[21:47:10] <grym> Sheilong: ok
[21:47:15] <SnoopJ> Sheilong, right, because this isn't a "library problem," it's a numerical stability problem.
[21:47:15] *** Joins: clawh_ (~clawh@185.244.214.60)
[21:47:16] <grym> i'm not very surprised
[21:47:26] <grym> sympy doesn't because sympy doesn't use floats
[21:47:38] <Sheilong> SnoopJ: but shouldn't the lib deal with that?
[21:47:44] <SnoopJ> Sheilong, by what means?
[21:48:19] <SnoopJ> ye cannae change the laws of mathematics
[21:48:33] <grym> Sheilong: there are libraries that deal with it, but with some tradeoffs
[21:48:40] <SnoopJ> https://github.com/numpy/numpy/issues/2074
[21:49:07] <SnoopJ> although this does still happen with the int dtype
[21:49:28] <grym> i'd be pleased if you could tell inv() what method to use if you had to
[21:49:31] <grym> i don't think you can
[21:49:32] <SnoopJ> the determinant being small-but-not-quite-zero is a hint of this (it's not "wrong" about det())
[21:49:46] *** Quits: clawh (~clawh@78.10.204.208) (Ping timeout: 252 seconds)
[21:49:58] <grym> (and raise something like a HeyThisIsReallyIllConditionedWarning)
[21:50:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:50:37] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[21:50:40] <grym> i am curious about how numpy correctly determines that the matrix is rank deficient, but inverts it anyway
[21:50:44] <SnoopJ> well, it would be inappropriate for the library to draw that conclusion
[21:50:56] <SnoopJ> but maybe a warning
[21:50:57] *** Quits: yaalon_ (~yaalon@201.171.90.143.dsl.dyn.telnor.net) (Remote host closed the connection)
[21:51:04] <SnoopJ> "this *might* be ill-conditioned, have you checked?"
[21:51:22] <grym> yeah.  matlab does that.  "okay boss, here's your answer, but, um, you might wanna think twice"
[21:51:32] *** Joins: yaalon (~yaalon@201.171.90.143.dsl.dyn.telnor.net)
[21:51:40] <SnoopJ> statistically speaking they had to do something sane eventually
[21:52:16] <hexology> grym: maybe there's some kind of heuristic where it starts computing the inverse, realizes it's rank-deficient, then switches to psuedoinverse?
[21:52:21] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 255 seconds)
[21:52:32] *** Quits: yaalon (~yaalon@201.171.90.143.dsl.dyn.telnor.net) (Read error: Connection reset by peer)
[21:52:36] *** Joins: cheater (~Username@user/cheater)
[21:52:36] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[21:52:57] <SnoopJ> hexology, scipy.linalg.solve() attempts to be cautious, although I don't think it's switches to any pseudoinverse (it'd be kind of weird to just pick one from thin air)
[21:53:16] <SnoopJ> Moore-Penrose doesn't give a very satisfactory solution here, for instance
[21:54:38] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[21:55:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:55:40] *** Joins: tbcr (~tbcr@user/tbcr)
[21:55:48] <SnoopJ> hmm, scipy does warn: `<stdin>:1: LinAlgWarning: Ill-conditioned matrix (rcond=1.85037e-17): result may not be accurate.`
[21:55:52] *** Quits: mokulus (~mokulus@user/mokulus) (Quit: WeeChat 3.2)
[21:56:24] <p-i-> bambams: So as not to spam the channel with a multiline paste (or pastebin link)
[21:56:25] *** Joins: nmoura (~nmoura@177.192.16.58)
[21:57:09] <SnoopJ> p-i-, the thing you're write()-ing to is probably buffered, have you tried a flush() ?
[21:57:20] *** Quits: bluesmonk (uid318026@id-318026.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[21:57:31] *** Quits: nmoura (~nmoura@177.192.16.58) (Client Quit)
[21:59:38] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[22:00:03] *** Joins: cheater (~Username@user/cheater)
[22:00:07] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:f82a:fdf6:2baf:d583) (Ping timeout: 245 seconds)
[22:00:28] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:02:08] *** Quits: hays (rootvegeta@fsf/member/hays) (Quit: No Ping reply in 180 seconds.)
[22:02:35] *** Joins: pnoud (~pnoud@user/pnoud)
[22:02:43] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[22:03:03] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[22:03:16] *** Joins: hays (rootvegeta@fsf/member/hays)
[22:03:32] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:5ca4:fa04:b487:ba6e)
[22:03:44] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[22:04:27] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:05:55] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[22:06:19] *** Joins: Blankspace (~abcd@user/blankspace)
[22:06:30] *** Joins: UselessCourage (~UselessCo@gateway/tor-sasl/uselesscourage)
[22:07:30] *** Quits: qlixed (~qlixed@host7.181-9-190.telecom.net.ar) (Ping timeout: 272 seconds)
[22:07:36] <grym> SnoopJ: ahh!  i'm not very surprised that the matlabby bit wound up in scipy, either :)
[22:07:39] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[22:07:50] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[22:08:27] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 245 seconds)
[22:08:27] *** Quits: schumaml2 (~schumaml@dslb-092-074-001-012.092.074.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[22:08:37] *** Joins: schumaml2 (~schumaml@dslb-092-074-000-202.092.074.pools.vodafone-ip.de)
[22:10:05] *** Quits: Tempesta (Tempesta@user/tempesta) (Ping timeout: 245 seconds)
[22:10:49] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[22:11:26] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:11:44] *** Joins: Nanobot567 (~Nanobot56@2600:6c58:757f:e4b3:48ca:ff14:2f61:8991)
[22:11:46] *** Quits: y1n (~y1n@84-115-64-243.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[22:11:56] *** Quits: todda7 (~torstein@static-qvn-qvu-160026.business.bouyguestelecom.com) (Quit: Konversation terminated!)
[22:12:20] *** Joins: y1n (~y1n@84-115-65-107.wifi.dynamic.surfer.at)
[22:13:52] <sazawal> Hi all. Does it happen sometimes that a dictionary put in a multiprocessing queue alters on get? I am sending a dict {"d1":dict1,"d2":dict2} in a loop, and receiving in another loop. It sometimes happens that d1 and d2 do not belong to the same loop iteration.
[22:14:41] <yitz> sazawal: sharing code might help
[22:15:06] <yitz> In general, dictionaries do not change on their own. Something needs to alter them for them to be altered
[22:15:29] *** dbristow_ is now known as dbristow
[22:15:29] *** Joins: schumaml3 (~schumaml@dslb-178-007-194-007.178.007.pools.vodafone-ip.de)
[22:15:39] *** Quits: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) (Quit: Leaving.)
[22:16:16] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[22:16:50] *** Quits: schumaml2 (~schumaml@dslb-092-074-000-202.092.074.pools.vodafone-ip.de) (Ping timeout: 255 seconds)
[22:18:04] <sazawal> yitz, It is hard to share the code. Interesting thing is that it doesn't always happen and I don't know how to reproduce it. What I suspect is the speed at which I am reading the data from a file and putting in the queue has something to do with it. A higher speed of putting the data makes it alter somehow.
[22:18:54] <yitz> Without any inkling of what code you're running ... if a dict is modified, it is because something modified it
[22:19:15] <yitz> If you write X then read Y and they are different, either you didn't write what you thought you did or something changed it
[22:19:45] <yitz> Beyond that ... without looking at the code, there's no way for us to really know much more
[22:20:36] *** Joins: magla (~gelignite@55d46309.access.ecotel.net)
[22:21:32] <sazawal> yitz, Yes but I am printing the data just before sending and just after receiving. It is possible that one datapoint goes missing in some cases, but how come sending {"d1":dict1,"d2":dict2} and {"d1":dict3,"d2":dict4} one by one results in {"d1":dict1,"d2":dict4} on receiving?
[22:21:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:21:44] *** Joins: ross (sid305269@user/ross)
[22:21:46] <zware> sazawal: If you're reusing the same dict object within the write loop instead of creating a new one, it's possible that you're modifying it before reading it
[22:21:59] *** Joins: defn (~n0b0dy@user/defn)
[22:22:04] <sazawal> Yes I get it, I was looking if there is some similar issues with multiprocessing queue
[22:22:33] <ross> hi all! `pip install <whatever>` isn't working - there is no output to the console and nothing helps. would anyone be able to help me debug this?
[22:22:41] <ross> *nothing happens
[22:22:44] <zware> sazawal: Try `write(your_dict.copy())` instead of `write(your_dict)` and see if it reproduces
[22:23:31] <zware> ross: pip install -vvv <whatever>
[22:23:51] <ross> zware: no output there either
[22:24:14] <sazawal> zware, I see. I think you are right what could be the case.
[22:24:28] <zware> ross: pip --version, then.  Or `python -m pip` instead of `pip`
[22:25:44] <ross> --version returns `pip 20.0.2 from /usr/lib/python3/dist-packages/pip (python 3.8)`, prefixing `python3 -m` also has no output, and `python -m` complains that pip isn't installed (which shouldn;t be an issue as I don't use python2)
[22:25:59] *** Joins: mokulus (~mokulus@user/mokulus)
[22:26:24] <ross> (python3 -m pip --version has the same output as above)
[22:26:33] *** Quits: dvx (~dvx@185.63.97.64) (Ping timeout: 255 seconds)
[22:26:46] *** Quits: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi) (Quit: brylie)
[22:27:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:27:14] <zware> ross: Ah, looks like you're using a Debian/Ubuntu system python's pip.  Good luck :)
[22:27:24] <ross> LMAO fair enough
[22:27:37] <grym> ross: install python-venv, make a venv, use that
[22:27:45] <grym> a much saner way to live
[22:27:58] *** Joins: nmoura (~nmoura@177.192.16.58)
[22:28:05] <ross> grym: will that work for global/user level packages? am trying to install a system utility
[22:28:05] <CuriousErnestBro> chill out, it's just computers
[22:29:25] *** Joins: schumaml4 (~schumaml@dslb-188-104-188-163.188.104.pools.vodafone-ip.de)
[22:29:34] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:29:36] *** Quits: jpic (~jpic@82.142.18.222) (Remote host closed the connection)
[22:29:40] <grym> ross: it will, modulo permissions as usual
[22:30:19] <grym> ross: for installing user-level system utilities, the helper tool pipx (https://pypa.github.io/pipx/) is extremely handy
[22:30:26] <grym> but you don't need it
[22:31:10] *** Joins: Tempesta (Tempesta@user/tempesta)
[22:32:00] *** Quits: schumaml3 (~schumaml@dslb-178-007-194-007.178.007.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[22:32:00] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 258 seconds)
[22:32:15] <ross> grym: interesting, thanks for the link
[22:32:25] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:32:34] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[22:32:46] *** Quits: Blankspace (~abcd@user/blankspace) (Quit: why did you ban me)
[22:32:59] *** Joins: wyclif (~wyclif@user/wyclif)
[22:34:02] *** Joins: swistak (~swistak@185.21.216.141)
[22:34:05] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[22:37:14] <grym> ross: sure.  i use pipx a _lot_
[22:41:35] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 255 seconds)
[22:42:13] *** Joins: cheater (~Username@user/cheater)
[22:43:59] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[22:46:16] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Quit: leaving)
[22:46:16] <pycurious> anyone using scipy on mac/m1 here? I'm having issues installing.
[22:46:25] <pycurious> I dont use conda. So am trying pip.
[22:46:41] <grym> pycurious: and now you're building from source and finding a circular dependency in networkx? :)
[22:47:05] <pycurious> grym: pip3 install --no-binary :all: --no-use-pep517 scipy —> Trying that
[22:47:16] <grym> ( https://twitter.com/juanluisback/status/1415222517577535488  was this morning's scipy on mac excitement)
[22:47:20] <grym> h/t mefistofeles
[22:47:27] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[22:48:24] <pycurious> grym: Just installed pytrhan - before that command!
[22:48:30] <grym> pycurious: haha
[22:48:40] <pycurious> And when I came here the wheel was spinning - its still spinning ;-)
[22:48:43] *** Joins: veegee (~veegee@154.3.44.8)
[22:49:42] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[22:49:50] <grym> possibly you're just taking forever to build
[22:49:59] <grym> scipy does that sometimes
[22:50:05] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[22:52:05] <pycurious> grym: It installed! wow
[22:52:40] *** Quits: ras_manny (~ras_manny@196.24.136.255) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:54:01] *** Joins: veegee_ (~veegee@154.21.22.103)
[22:54:22] *** Joins: b_jonas (~x@catv-176-63-12-30.catv.broadband.hu)
[22:54:22] *** Joins: Akuli (~Akuli@213.216.211.133)
[22:55:21] <b_jonas> AutomatedTester: what happens if you swap the arguments of the & operator? it might reasonably make a set/dict from only one side
[22:56:15] *** Joins: veegee__ (~veegee@37.19.210.163)
[22:56:50] *** Joins: cheater1__ (~Username@user/cheater)
[22:56:54] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[22:56:56] *** cheater1__ is now known as cheater
[22:57:18] *** Quits: veegee (~veegee@154.3.44.8) (Ping timeout: 258 seconds)
[22:58:25] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[22:58:38] <grym> pycurious: now save that wheel :D
[22:59:09] <ross> grym: re pipx, realised that your advice wouldn't help me as I'm unable to install it
[22:59:28] <grym> ross: why not?
[22:59:36] *** Quits: veegee_ (~veegee@154.21.22.103) (Ping timeout: 258 seconds)
[22:59:38] <ross> because pip doesn't work
[22:59:46] <grym> ross: python3 -m pip
[22:59:49] <grym> does that work?
[22:59:51] <ross> no
[22:59:55] <grym> what happens
[22:59:58] <ross> no output
[23:00:02] *** Quits: Nanobot567 (~Nanobot56@2600:6c58:757f:e4b3:48ca:ff14:2f61:8991) (Ping timeout: 255 seconds)
[23:00:15] <grym> ross: have you ever combined sudo and pip before on this system
[23:00:29] <pycurious> grym: how do i do that? :)
[23:00:42] <grym> pycurious: it should be cached somewhere
[23:00:42] <ross> grym: I think I probably have at some point
[23:00:57] <grym> ross: you might have damaged your system pip, which will be somewhat tricky to fix
[23:01:04] <ross> hmmm. that's a shame
[23:01:07] *** veegee__ is now known as veegee
[23:01:15] <grym> yeah, it's not fun to cross those streams
[23:01:25] <ross> is there some nuclear way of force-resetting it?
[23:01:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[23:02:01] <grym> i think so, but i forget how
[23:02:27] <ross> I've `sudo apt install --reinstall python3 python3-pip` already
[23:03:11] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[23:03:14] *** Joins: ras_manny (~ras_manny@196.24.136.255)
[23:03:44] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[23:03:49] *** Joins: schumaml (~schumaml@dslb-188-104-169-159.188.104.pools.vodafone-ip.de)
[23:04:40] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:05:00] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[23:05:00] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[23:05:22] <zware> b_jonas: The change in behavior was found to be a side effect of the fix for https://bugs.python.org/issue38210
[23:05:36] *** Joins: jrjsmrtn (~jrjsmrtn@ip-193-121-123-176.dsl.scarlet.be)
[23:05:41] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Client Quit)
[23:06:07] *** Quits: schumaml4 (~schumaml@dslb-188-104-188-163.188.104.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[23:06:26] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[23:06:42] <pycurious> grym: scikit-learn also installed! Today is my day :)
[23:08:01] *** Quits: ST47 (~ST47@user/st47) (Changing host)
[23:08:01] *** Joins: ST47 (~ST47@wikimedia/st47)
[23:08:04] <SnoopJ> ross, what happens when you --reinstall ?
[23:08:19] <SnoopJ> and what's broken when you're trying to install pipx?
[23:09:33] <ross> SnoopJ: all commands of the 'pip install' variety had no console output
[23:10:00] <ross> I have just gone full nuclear and purged python3 and python3-pip from my system, and then reinstalled it, and that seems to have resolved the issue
[23:10:06] <ross> at what cost? I will find out later, I'm sure
[23:10:18] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[23:10:38] <ross> grym: I will make sure never to combine sudo and pip :)
[23:11:09] <SnoopJ> that sounds very strange, but yes, it's usually best to forget the system python/pip that comes with Debian-alikes altogether (or at least not sudo)
[23:12:06] *** Quits: y1n (~y1n@84-115-65-107.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[23:12:33] *** Joins: sectec84 (~Guest88@24.18.109.173)
[23:12:43] <sectec84> Hi, I am having a module not found error for omegaconf, which I installed successfully with pip. I am in a conda environment. When I run python and type 'import omegaconf', it is fine. When I run ipython or in jupyter notebook, I get module not found error. How to resolve?
[23:13:08] *** Joins: y1n (~y1n@84-115-65-107.wifi.dynamic.surfer.at)
[23:13:13] <sectec84> Why would python be able to use omegaconf module, but not ipython?
[23:13:41] <SnoopJ> sectec84, because ipython/jupyter isn't running from that environment. You can install it there and run it from there to see the same site (i.e. the same packages)
[23:14:08] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[23:14:38] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[23:14:50] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:15:04] <sectec84> snoopj. I did run it from within that environment though. I was inside activated conda environment. I ran screen. then in screen ran 'jupyter notebook'. I detached from screen. Did that break it somehow?
[23:15:13] <sectec84> is screen what broke it?
[23:15:15] <SnoopJ> sectec84, no
[23:15:43] <SnoopJ> sectec84, `jupyter` probably resolves to an installation of jupyter in some other interpreter.
[23:16:01] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[23:16:05] *** Quits: ras_manny (~ras_manny@196.24.136.255) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:16:29] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[23:16:58] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[23:17:38] <SnoopJ> you probably want to install it into your environment, and run it from there (the best way would be `python3 -m jupyter notebook ...` because you can be sure this is associated with the interpreter `python3` points to)
[23:17:59] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[23:18:01] *** Quits: KindOne (kindone@user/kindone) (Read error: Connection reset by peer)
[23:18:15] <b_jonas> zware: thanks
[23:18:25] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 265 seconds)
[23:19:09] *** Joins: bambams_ (~bambams@user/bambams)
[23:19:13] *** Joins: ras_manny (~ras_manny@196.24.136.255)
[23:19:22] <sectec84> SnoopJ. I have modified path so that the anaconda python/ipython are used by default. When I run 'which python' in the conda env it shows the anaconda python. Same when I run '!which python' in jupyter notebook
[23:19:22] *** Joins: greyltc (~greyltc@user/greyltc)
[23:20:04] <sectec84> it's not just jupyter - it seems to be ipython specific
[23:20:12] <zware> sectec84: What about `which jupyter`?
[23:20:21] <sectec84> because the problem occurs when I try to import omegaconf from ipython via shell
[23:20:39] <sectec84> zware /home/ubuntu/anaconda3/bin/jupyter
[23:20:41] <greyltc> stuff is a pandas data frame and `device.upper() == stuff.sort_string[5]` evaluates to be True
[23:21:02] <greyltc> but `device.upper() in stuff.sort_string` evaluates to be false. how is that possible?
[23:21:10] <SnoopJ> sectec84, do you understand what I am saying when I say that jupyter is running in a different site than the one you have installed your package into?
[23:21:28] <SnoopJ> jupyter/ipython (the distinction isn't super relevant here, Jupyter will be using an ipython kernel)
[23:22:09] <sectec84> SnoopJ, sorry - maybe I don't. I'm a noob when it comes to conda/venvs
[23:22:36] *** Quits: bambams (~bambams@user/bambams) (Ping timeout: 258 seconds)
[23:22:48] <sectec84> I am just using jupyter that came pre-installed with anaconda
[23:23:24] <SnoopJ> sectec84, the simple explanation: every Python interpreter comes with its own "site" where packages are installed. Those are *not* shared across interpreters, in general.
[23:24:17] <SnoopJ> you *can* configure Jupyter to use the 'other' site's interpreter as a kernel, but this is definitely power-user territory. It's a lot simpler to install Jupyter in the env where your package is and run that separate copy
[23:24:23] *** Joins: veegee_ (~veegee@154.21.28.246)
[23:24:58] <sectec84> snoopj - so basically, even though anaconda comes with jupyter pre-installed by default, I would activate my conda env, install another copy of jupyter there?
[23:25:03] *** Quits: SallyAhaj (~AallyAhaj@user/sallyahaj) (Ping timeout: 276 seconds)
[23:25:08] <sectec84> and then run that jupyter instead?\
[23:25:14] <SnoopJ> sectec84, yea, that's the simplest way out of the bind here.
[23:25:22] *** Joins: KindOne (kindone@user/kindone)
[23:25:25] <sectec84> ok - thanks - I'll try that.
[23:27:10] <SnoopJ> sectec84, the alternative/power-user way is described here in the IPython docs: https://ipython.readthedocs.io/en/stable/install/kernel_install.html#kernels-for-different-environments
[23:27:15] *** Joins: Barones (~Barones@2804:48dc:8500:0:b4cf:178f:569e:5f89)
[23:27:16] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[23:27:29] *** Quits: veegee (~veegee@37.19.210.163) (Ping timeout: 255 seconds)
[23:27:37] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 245 seconds)
[23:27:44] <sectec84> SnoopJ - will my jupyter config file in ~/.jupyter still work, or will the new conda jupyter version have it's own separate config files somewhere else?
[23:27:54] <SnoopJ> if you do that, you'll be able to use those packages from any notebook using the associated kernel (you're basically telling Jupyter "hey, use that *other* interpreter for this notebook, not yours")
[23:28:07] <SnoopJ> sectec84, I think it'll comfortably share that config
[23:28:10] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:28:19] <SnoopJ> but I'm not positive
[23:28:59] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[23:29:55] <sectec84> snoopj - oh hell yeah! installing the new jupyter copy fixed it, and the config does indeed work. tysm!
[23:30:45] <rud0lf> is there a simplified pythony way to show a window (preferably a bubble/notification-like borderless window) with a progress bar and some text?
[23:30:46] <SnoopJ> sectec84, does it make a little more sense now?
[23:31:03] <rud0lf> i wanna make one and i don't want to dive into all gtk/glide stuff
[23:31:06] <SnoopJ> rud0lf, do you want it to be cross-platform, or specific to one?
[23:31:13] <rud0lf> xfce4 only
[23:31:21] <rud0lf> i'm on xubuntu
[23:31:30] <rud0lf> it can be just bash command
[23:31:48] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2f4b) (Quit: Konversation terminated!)
[23:31:59] <grym> rud0lf: i'd look at tqdm first
[23:32:00] *** Joins: yogoyo (~yogoyo@user/yogoyo)
[23:32:00] <rud0lf> maybe something like ocd_cat, but more complex and with background
[23:32:09] <rud0lf> grym: thank you kindly, going there
[23:32:19] <SnoopJ> rud0lf, if it were a terminal application, you could use the `tqdm` library. For a GUI solution, there might be a way to get a notification pop-up with dbus
[23:32:32] <sectec84> SnoopJ - I think so lol ... I am still very much trying to wrap my head around the complexity of virtual environments and understanding how they relate to the base system ... but what I just did seems to makes sense to me, at least
[23:33:08] <SnoopJ> sectec84, to good approximation, they don't relate at all, except that one creates the other.
[23:33:09] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[23:33:09] <rud0lf> grym: i think it's for terminal, but i want it gui
[23:33:22] <rud0lf> SnoopJ: can you display progress bar in notification
[23:33:23] <rud0lf> ?
[23:33:47] <SnoopJ> rud0lf, I don't know off-hand
[23:33:50] <rud0lf> i guess i just read brief into to gtk
[23:33:59] <grym> rud0lf: ah, i see.  tkinter has a really simple one i think
[23:34:02] <rud0lf> but it's lot of hassle i assume to do just one simple thing
[23:34:04] <grym> but i don't really do much gui stuff
[23:34:08] <rud0lf> grym: nice
[23:34:20] <rud0lf> i mean about tkinter not the not doing gui stuff
[23:34:28] <grym> https://docs.python.org/3/library/tkinter.ttk.html#ttk-progressbar
[23:34:49] <grym> pretty it is not
[23:34:59] <grym> but, uh, maybe that doesn't terribly matter
[23:36:20] *** Joins: qlixed (~qlixed@181.44.129.13)
[23:36:40] <zware> grym: You mean the code to use it or the gui widget itself?  ttk isn't too ugly :)
[23:36:45] *** Quits: veegee_ (~veegee@154.21.28.246) (Ping timeout: 255 seconds)
[23:36:57] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[23:38:12] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[23:38:33] <no_gravity> When I have a function that is slow and I want to know which lines are the slowest, is there a quick way to find out?
[23:38:55] <hexology> no_gravity: https://pypi.org/project/line-profiler/
[23:39:04] <NeilRG> how can I check why poetry is not installing pandas 1.3.0 and instead installing 1.1.5?
[23:39:09] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[23:39:13] <NeilRG> is it because the Python version is unbounded?
[23:39:25] <SnoopJ> NeilRG, have you tried turning up its verbosity?
[23:39:31] <NeilRG> I have
[23:39:37] <NeilRG> I even did poetry show -t
[23:39:42] <no_gravity> hexology: So "pip install line-profiler"? And then what?
[23:39:44] <NeilRG> I'll try that again maybe I msised it
[23:39:50] *** Joins: ano (~weechat@user/ano)
[23:39:59] <SnoopJ> NeilRG, I can't imagine it's because of the Python version being unbounded. What version are you running?
[23:40:04] <NeilRG> 3.9
[23:40:11] <SnoopJ> not likely a cap on the pandas side, then.
[23:40:15] <NeilRG> my pyproject.toml is bouned at "^3.7"
[23:40:16] <SnoopJ> Stale lockfile maybe?
[23:40:18] <Gustavo6046> no pip install -e for Poetry projects?
[23:40:29] <NeilRG> could you remind me how to unstale the lockfile?
[23:40:30] <SnoopJ> Gustavo6046, nope
[23:40:46] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:40:46] <Gustavo6046> :(
[23:40:59] <NeilRG> SnoopJ, oh you got it, verbosity:
[23:41:01] <NeilRG>    1: fact: pandas (1.3.0) requires Python >=3.7.1
[23:41:01] <NeilRG>    1: derived: not pandas (==1.3.0)
[23:41:03] <Gustavo6046> At least it was a fast answer. I can appreciate that. :)
[23:41:03] *** Joins: cheater1__ (~Username@user/cheater)
[23:41:11] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[23:41:11] <NeilRG> So I just have to bound with 3.7.1, I guess
[23:41:14] <Gustavo6046> pip install -e answers
[23:41:16] * Gustavo6046 runs
[23:41:20] *** cheater1__ is now known as cheater
[23:41:21] *** Quits: Oddity (Oddity@user/oddity) (Remote host closed the connection)
[23:41:26] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 255 seconds)
[23:41:31] <SnoopJ> Gustavo6046, can't use it with pyproject.toml :(
[23:41:58] <Gustavo6046> :<
[23:42:06] <Gustavo6046> was it a PEP that got rejected or something?
[23:42:15] <SnoopJ> NeilRG, aha. To answer the earlier question, I think `poetry lock` does it, or maybe you want --no-update
[23:42:28] <NeilRG> SnoopJ, thanks
[23:42:45] <SnoopJ> Gustavo6046, no, just the opposite: https://www.python.org/dev/peps/pep-0660/ (hasn't been implemented, though)
[23:42:55] <Gustavo6046> Ahh.
[23:43:16] <SnoopJ> or well, it hasn't been put into pip, anyway; I didn't realize there was a prototype (!)
[23:43:29] <NeilRG> Gustavo6046, so it's coming.  I've been looking forward to it too.
[23:43:35] <Gustavo6046> :o
[23:43:46] <Gustavo6046> Oooooh
[23:43:56] <SnoopJ> yea this is I think the only thing that makes me hesitant about pyproject.toml at all (although even then, not much)
[23:44:10] *** Quits: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3) (Quit: Konversation terminated!)
[23:44:12] <SnoopJ> being able to configure a whole bunch of tools in one place is really nice :)
[23:45:13] <Gustavo6046> yeah!
[23:45:16] *** Joins: aslicedbanjo (~aslicedba@host86-150-115-39.range86-150.btcentralplus.com)
[23:45:20] <Gustavo6046> or like a dependency which is also a project of mine
[23:50:19] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[23:50:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:51:00] <no_gravity> BeatifulSoup is unbelievably slow. Is there another way to extract parts of html strings via CSS selectors?
[23:52:34] *** Joins: cheater1__ (~Username@user/cheater)
[23:52:38] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[23:52:41] *** cheater1__ is now known as cheater
[23:53:04] <SnoopJ> no_gravity, lxml has great XPath support, and it looks like it has some CSS selector support as well (TIL)
[23:53:29] <SnoopJ> apparently that component has been forked into the `cssselect` library for translating selectors to XPath
[23:53:32] *** Quits: ras_manny (~ras_manny@196.24.136.255) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:53:55] <no_gravity> SnoopJ: Hmm.. let me try it ...
[23:54:52] <no_gravity> SnoopJ: Still trying to find examples online ...
[23:55:01] <SnoopJ> no_gravity, https://lxml.de/cssselect.html
[23:55:19] <no_gravity> SnoopJ: Saw that but the examples seem to be only partial.
[23:55:26] <SnoopJ> no_gravity, in what sense?
[23:55:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[23:55:57] <no_gravity> SnoopJ: Well, nothing you could simply paste into online-python.com to see it in action.
[23:56:00] <SnoopJ> not much to say beyond "To use the selector, simply call it with a document or element object"
[23:56:54] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (Ping timeout: 276 seconds)
[23:56:59] <no_gravity> SnoopJ: I have no idea what that could mean.
[23:57:19] <SnoopJ> no_gravity, it means once you've created a CSSSelector object, you call it with the thing you want to apply the selector to.
[23:57:26] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:57:35] <SnoopJ> As shown in the example directly beneath that text
[23:57:40] <no_gravity> SnoopJ: So how do I create a CSSSelector object?
[23:57:44] *** Joins: kosh (~kosh@user/kosh)
[23:57:50] <SnoopJ> no_gravity, that is shown directly *above* that text
[23:58:18] <no_gravity> SnoopJ: You mean "from lxml.cssselect import CSSSelector; sel = CSSSelector('div.content')"?
[23:58:30] <SnoopJ> yes
[23:58:35] *** Joins: reset (~reset@user/reset)
[23:58:56] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[23:58:59] <no_gravity> ModuleNotFoundError: No module named 'lxml'
[23:59:19] <SnoopJ> https://lxml.de/installation.html
[23:59:30] <no_gravity> SnoopJ: Don't think I can do that on online-python.com
[23:59:50] *** Quits: VBreton (~Guest45@82-65-166-34.subs.proxad.net) (Quit: Client closed)
[23:59:53] <SnoopJ> no_gravity, maybe you'd like to use a site that does make lxml available, then. repl.it has access to ~all of PyPI
