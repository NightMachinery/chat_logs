[01:28:45] <puritylake[m]> enebo: having trouble getting sprintf working with the evironmnent variable, it doesn't seem to be using the sprintf it's supposed to be running
[01:29:21] <puritylake[m]> Basically I put a debug message in the c format method and it is never displayed
[01:30:17] <puritylake[m]> `SPRINTF=1 ./bin/jruby -e 'puts sprintf("%c", "c")'`
[11:37:50] <kares[m]> pushed jossl pre yday - will pbly push 0.11.0 later today
[11:37:50] <kares[m]> (includes the alt-chain certificate verification - basically a complete rewrite of that part there wasn't another way)
[16:22:34] <klobuczek[m]> I'm including a java interface and implementing all the methods. So far so good, everything has been working fine. Now they added a default method to the interface overloading one of the existing interface methods. Now when java calls the method with the original signature it goes directly to the default interface method ignoring my ruby method and failing due to the not matching signature. Can anything be done about it?
[16:32:10] <klobuczek[m]> I'm routinely intercepting method calls on java classes by prepending a ruby module to them with the methods I want to override, but prepending such a module to an interface with default implementation does not work.
[16:51:56] *** Joins: sagax (~sagax_nb@user/sagax)
[17:29:54] <enebo[m]> puritylake: I have a guard in SprintfParser.sprintf to only do some letters (see indexOf line around line 38)
[17:31:09] <enebo[m]> I mostly do print debugging as a practice but this work tends to be helpful with an actual debugger for tracing since it is much more unclear what is happening
[17:31:52] <puritylake[m]> enebo[m]: Would that include blocking System.out.println? Cause it is not actually printing. Maybe I’m building it incorrectly 
[17:32:18] <enebo[m]> if it is above that point it should print out
[17:32:36] <enebo[m]> it will return back to old code at that point if it is not in the list
[17:32:53] <puritylake[m]> Ok cool, thanks
[17:32:55] <enebo[m]> mvn with no args should be fine
[17:33:27] <puritylake[m]> I’m not at my machine currently but I’ll double check that when I’m back at it
[17:33:41] <enebo[m]> puritylake: ok
[21:02:34] <headius> yo
[21:50:52] <headius> enebo: I will try to get the M1 work done today and tomorrow, so we might be able to do a 9.3.2 next week before starting to prep RubyConf stuff
[21:51:03] <headius> I'm fixing the few little bugs filed against 9.3.1
[21:51:42] <enebo[m]> I got a perf PR for kpeg landed to only get a report of an off by one issue
[21:51:52] <enebo[m]> I fixed it but I don't know kpeg enough to write a test :)
[21:52:20] <headius> hah
[21:52:34] <headius> yeah me neither
[21:52:59] <headius> funny how you can do perf PRs without actually knowing much about the library
[21:53:17] <puritylake[m]> That worked btw enebo, I seem to have %c working
[21:53:26] <headius> woot
[21:53:33] <enebo[m]> puritylake: coolio
[21:53:38] <headius> man I hate objectspace
[21:53:50] <headius> I wish we could ditch our impl and finally find some way to use Java tooling
[21:54:01] <headius> flip a switch and just use JDI to walk heap objects
[21:54:32] <enebo[m]> puritylake: I will need to make some substnatial parser changes since I found a bunch of weird weird formatting rules.  I will fix up anything which breaks whenever I get to it
[21:54:45] <enebo[m]> The good news is it is really odd so you won't notice
[21:55:05] <puritylake[m]> Ah good to know
[21:55:16] <enebo[m]> mri26 -e 'printf("%5.0d", 0)'
[21:55:16] * puritylake[m] uploaded an image: (21KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/DPEhWeQmPlXrwLCRfuvvWAbb/formatc.png >
[21:55:19] <enebo[m]> look at that shit! :)
[21:55:34] <enebo[m]> It just returns 5 spaces
[21:56:11] <puritylake[m]> Well that looks painful lol I wonder why anyone would need that
[21:56:19] <headius> mrnoname and I were playing with some printf formatting like that the other day
[21:56:39] <enebo[m]> puritylake: cool.  PR whenever you want.
[21:56:42] <headius> simplest way to get awk to format an N wide block of spaces was something similar
[21:57:25] <puritylake[m]> Just gotta ask first, should width matter for %c I added it but I dunno if it is valid
[21:57:25] <enebo[m]> so you were looking at '%*5$.*1$2$d'?
[21:58:26] * puritylake[m] uploaded an image: (14KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/oLSoQxXzbHUwfZgLHkBtMYSD/width.png >
[21:58:27] <headius> we did "%5 s"
[21:58:28] <enebo[m]> puritylake: I see logic for width
[21:58:49] <headius> space-pad a string to 5 width
[21:58:57] <enebo[m]> yeah so space padded to 5 width for a string
[21:59:27] <enebo[m]> MY above example is width for 5 arg with precision from 1 and actual value from 2
[22:00:06] <enebo[m]> width from...I have never ever used numbered formatting with printf other than %*d
[22:00:44] <enebo[m]> puritylake: looks like you have that logic in there
[22:01:35] <enebo[m]> worst part of the example I gave above if you can swap all those index specifiers in any order
[22:01:50] <enebo[m]> .* can come before *
[22:02:07] <puritylake[m]> Might need to update the .gitignore, few files and folders might be slipping past but unsure `test/.classpath` `test/.project` and `Gemfile.lock`
[22:02:47] <puritylake[m]> OR should I clean before commiting?
[22:04:18] <enebo[m]> just add exactly the files you modified but in geneal cleaning is fine
[22:04:18] <enebo[m]> I am a bit messy so I always have something untracked
[22:04:19] <enebo[m]> but I like to explicitly commit so I don't accidentally commit extra stuff
[22:04:38] <puritylake[m]> Cool, not often had to work with a repo not of my own lol
[22:04:57] <enebo[m]> After this I recommend looking at p and s since the floating point stuff will be the biggest challenge
[22:05:37] <enebo[m]> puritylake: I have just accidentally committed too many files so I tend to always git status even after I explcitly commit files
[22:06:09] <enebo[m]> not that making a mistake is a big deal we will just remove the changes...the jots of revision control :)
[22:06:16] <enebo[m]> s/jots/joyd
[22:06:17] <headius> kares: I see a PR for the 1.1.1 cert verification, I guess you want to look into this after the current jossl release? 
[22:06:23] <enebo[m]> LOL
[22:06:39] <enebo[m]> afk for about 20 minutes
[22:07:35] <headius> kares: ok no I guess this PR is the fix and not merged... let me know how I can help
[22:07:39] <puritylake[m]> OH also regarding error handling for %c, and how should I handle the errors of a RubyString longer than 1 character, a negative number or a number out of range of unicode?
[22:08:13] <headius> enebo: I pushed PRs for two new issues reported against 9.3.1
[22:08:21] <headius> minor things so that's good
[22:08:38] <enebo[m]> great
[22:08:48] <puritylake[m]> I have some TODOs added in comments that just `return;` from format_c
[22:28:57] <puritylake[m]> Ok an issue I'm having with tests is Unicode
[22:29:22] <puritylake[m]> `Expected "\u0006" == "Ԇ"`
[22:34:58] <puritylake[m]> Odd now I am getting fails even without `SPRINTF=1`
[22:35:54] <puritylake[m]> That is for the specs
[22:36:15] <puritylake[m]> enebo: Not sure how to go about fixing that
[22:47:36] <puritylake[m]> The test seems wrong tbh, that unicode character code doesn't equal what it's expected
[22:49:21] <puritylake[m]> Ya cause my implementation returns a unicode character correctly
[22:55:27] <enebo[m]> puritylake: hmm
[22:56:02] <enebo[m]> so one problem with the approach is that we try and parse with new parser and then fall back to old way
[22:56:11] <enebo[m]> That can lead to errors during parsing
[22:57:32] <enebo[m]> puritylake: Also perhaps the result is backwards...perhaps the test expects the second value and you are returning the first one
[22:58:41] <enebo[m]> puritylake: you can open a PR with what you have and mark it draft or work in progress (I cannot remember the term github uses) and I can then look at it too
[22:59:53] <puritylake[m]> There is a single fail in mri tests too
[23:00:21] <enebo[m]> sounds close
[23:02:15] <puritylake[m]> I think the problem is it uses `%-1c` in the test, which seems to be converted into a negative width which me following from your code wrt the negative width being turned positive and right pad being set to true adding a single space after the 'a'
[23:03:11] <puritylake[m]> Unless there are different rules for %c
[23:03:37] <puritylake[m]> I'll make a PR regardless
[23:04:13] <enebo[m]> there is a flag_minus section which is for the right padding
[23:04:40] <enebo[m]> That should be t.rightPad in your new code
[23:07:51] <puritylake[m]> Well still throws the error so my intuition was wrong
[23:23:23] <puritylake[m]> So I assume I can't push directly to the repo?
[23:24:01] <enebo[m]> puritylake: did you fork jruby/jruby or just clone it?
[23:24:13] <puritylake[m]> Just cloned
[23:24:50] <enebo[m]> ok.  then fork our project and then commit to your fork of our repo and then github will give you a nice url for opening a pull request
[23:24:59] <enebo[m]> once you push a branch to your repo
[23:25:07] <puritylake[m]> Cool
[23:26:01] <enebo[m]> git workflow is a bit involved but having your own fork is useful for playing around too
[23:26:50] <puritylake[m]> I'm glad ya don't mind putting up with a newbie to the process lol
[23:29:31] <enebo[m]> puritylake: not at all.  I enjoy helping people get rolling on OSS contribution
[23:29:56] <enebo[m]> I think most people never make it past the first step of engaging so they think it is intimidating.
[23:30:57] <enebo[m]> This is a shame.  Not all OSS is fun but it is a nice way to learn a little, build up something for the CV, meet new people, feel like you accomplished something others will use.
[23:32:58] <puritylake[m]> Ya, my CV is rather lacking experience wise, I just have my degree, been finding it hard still to find work around where I live as I don't drive yet
[23:33:53] <enebo[m]> ah yeah well this won't hurt from the CV part but beyond just learning new stuff it is something to talk about at interviews too
[23:34:18] <enebo[m]> I can say there are not many people who have worked on an implementation of printf
[23:35:43] <headius> There are not many people who have contributed anything at all to OSS
[23:36:16] <enebo[m]> yeah I definitely see it as an interesting value add for a job hunt since it is uncommon
[23:36:39] <puritylake[m]> Might make up for the lack of experience
[23:37:42] <puritylake[m]> I plan to contribute to others eventually but gotta take it one at a time with these things
[23:37:54] <enebo[m]> It is experience.  Just generally uncompensated
[23:38:04] <enebo[m]> which is why it should also be enjoyable
[23:39:19] <puritylake[m]> True and I'm enjoying seeing how JRuby runs under the hood, it'll certainly help me in my endeavours to make my own language
[23:39:41] <enebo[m]> It won't hurt :)
[23:40:50] <enebo[m]> I was thinking I might try and output all flags/state in the old parser while running tests and then run with new parser and make sure all state matches
[23:41:41] <enebo[m]> which will be laborious but looking at some of the more weird format strings I can see aligning 100% will be helpful
[23:42:36] <enebo[m]> At this point I am seeing other things like %05.0d where the first 0 is either zero pad or it is part of the 5?  Confusing example
[23:43:11] <enebo[m]> It is written currently as zero padded with a width of 5
[23:46:06] <puritylake[m]> Made the pull request
[23:46:47] <puritylake[m]> I also didn't realise how esoteric printf really is
[23:49:27] <enebo[m]> yeah me either 
[23:49:39] <enebo[m]> No one uses most of the features of printf.
[23:50:12] <puritylake[m]> I wouldn't be surprised if hidden under thousands of lines of code, are some joke specifiers
[23:53:07] <headius> hah yeah I would at least bet there are some easter eggs in some printf impls
[23:53:10] <enebo[m]> puritylake: I see some issues 
[23:54:02] <enebo[m]> So one thing to note is that a character in printf is potentially a multi-byte character for example a unicode character
[23:54:15] <enebo[m]> byte[1] will only work for ASCII more or less
[23:54:46] <enebo[m]> mimicking the codePoint/codeLength code exactly will be the right way to go
[23:55:59] <puritylake[m]> Ok, cool, so `length()` will return 1 for these multibyte characters?
[23:57:26] <enebo[m]> yeah it you look at RubyString.strLength you will see if it is 7bit ascii we just use the length (which will be 1 like you expected) but if it is a more elaborate encoding like UTF-8 it may be multiple bytes long
[23:57:26] <puritylake[m]> Oh wait, if i do `bytes = rs.getBytes()` instance it'll just return all the bytes for a multibyte character, right?
[23:57:36] <puritylake[m]> s/instance/instead/
[23:57:51] <enebo[m]> So we are returning 1 character and 1 character can be multiple bytes
[23:59:22] <enebo[m]> this is another wrinkle in how we represent things in JRuby
[23:59:41] <enebo[m]> our bytes are stored in a ByteList but a ByteList may have many other bytes in it
[23:59:56] <enebo[m]> It might just be a subset of the backing bytes it has within it
