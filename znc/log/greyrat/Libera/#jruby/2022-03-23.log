[02:16:23] <byteit101[m]> ruby-maven-libs is at 3.3.9, should it be updated to a more recent version of maven?
[02:18:14] <headius> Yeah probably. We've been trying to take over ownership and maintenance of those projects for a while
[02:20:02] <byteit101[m]> do you need to threaten yourself? https://github.com/jruby/ruby-maven-libs
[02:20:34] <headius> We don't have the rights to push the artifacts anywhere I don't think
[02:20:47] <headius> Maven and rubygems
[02:20:53] <byteit101[m]> I've found that I can resolve newer artifacts just fine, but older artifacts have strange maven errors
[02:20:57] <byteit101[m]> Ah
[02:21:06] <byteit101[m]> so not sure if it's the old maven or what
[02:22:48] <byteit101[m]> does anyone know of any dead java/maven projects that died recently?
[02:42:21] <headius> I'm not sure... All of those may even related JV projects need big time updating though
[02:42:35] <headius> s/may/maven/, s/even//, s/JV/JVM/
[03:05:03] <byteit101[m]> I see ruby-maven was recently updated
[03:06:34] <byteit101[m]> Created https://rubygems.org/gems/maven-require
[03:07:28] <byteit101[m]> works with all versions specified, and allows "latest" for most recent gems. I suspect it may work for all gems if maven is updated, but not sure
[03:07:39] <byteit101[m]> *maven coordinates, not gems :--P
[03:10:56] <byteit101[m]> 2/4 things done for the blog post now
[13:30:09] *** Quits: AndyMaleh[m] (~andymaleh@2001:470:69fc:105::1:1a78) (Quit: You have been kicked for being idle)
[13:30:14] *** Quits: pboling[m] (~pbolingma@2001:470:69fc:105::1:c666) (Quit: You have been kicked for being idle)
[17:06:34] <headius> enebo: jcodings 1.0.56 finally released
[17:21:12] <headius> joni needs release also, on it
[17:24:11] <headius> hey lopex ahorek enebo and anyone else that wants to help... there's a backlog of issues in joni including one that claims we are much slower than calling out to onig via JNI and slower than some other port of onig (but mostly because they cache last result)... some PRs from 2015 that got missed and other issues
[17:24:25] <headius> anyone want to reevaluate issues and PRs that would be a great help
[17:24:30] <headius> I am releasing as-is today
[17:25:27] <headius> https://github.com/jruby/joni/issues
[17:39:13] <lopex[m]> I wonder if there's been major perf regression across versions
[17:39:34] <lopex[m]> I think it would help to check
[17:39:38] <headius> only major thing we've done in the past few years is interruption and we measured that as having only a small impact
[17:39:46] <headius> but we have not tracked perf over time
[17:40:01] <lopex[m]> they also claim java.util.regex is faster too
[17:40:10] <lopex[m]> but that's two moving targets
[17:40:18] <headius> yeah
[18:01:26] <headius> enebo: all merged and mostly green... couple jobs still using cached failure to find joni 2.1.42
[18:02:13] <enebo[m]> ok so we can spin this up.  I see two ripper bugs posted since yesterday.  I am just going to look at them quick in case they are super trivial
[18:02:43] <headius> ok
[18:52:23] <enebo[m]> https://github.com/jruby/jruby/issues/7153
[18:53:00] <enebo[m]> I fixed this but in looking at it I probably have more work to do later.  This seems reasonably safe since just assuming all identifiers get a null encoding is pretty wrong :)
[18:53:01] <headius> Ã–Ã¶Ã–
[18:53:42] <enebo[m]> I put a 7bit ident and it still will pass it as a utf-8 symbol so I guess this is an interesting difference in how ripper differs from parser
[18:53:53] <headius> Ok
[18:53:56] <enebo[m]> I am pretty sure a clean 7bit iident will be US-ASCII even if marked with difference coding
[18:55:36] <headius> ~Ã–~
[18:55:43] <enebo[m]> The second ripper issue is weirder.  It is adding an error element in the sexp but in looking at it this seems to only be because it thinks we are in a method definition (narrator: we are not)
[18:56:00] <enebo[m]> I would have no confidence in a 5 minute fix for that
[18:56:21] <headius> We can toss another release out next month with some additional fixes
[18:56:38] <enebo[m]> So I wanted to pass off a goal and see how you feel
[18:56:53] <headius> Especially if we can tidy up some of these Joni issues
[18:56:56] <enebo[m]> I would like to get maintenance releases on a strict schedule
[18:57:15] <enebo[m]> we put out a release once every two months on closest monday
[18:57:20] <headius> Sounds great
[18:57:24] <enebo[m]> security releases being an exception
[18:57:41] <enebo[m]> Then if we get into that groove people will just know when we plan on getting the next round of fixes
[18:58:19] <enebo[m]> For 9.4 or any early release dev cycle this will not be held to the same standard for first couple of point releases depending on how many issues come in
[18:58:36] <enebo[m]> But even in that case it can be our intention to have a 2 month release cycle
[18:59:03] <headius> 9.3 releases have been about two months between
[18:59:11] <headius> Give or take
[18:59:19] <enebo[m]> yeah I think it is close
[18:59:40] <headius> This one is just a few days over and January's 9.3.3 was a bit under
[18:59:53] <enebo[m]> but I think we may also have some more motivation to get items/issues finished sooner knowing we plan on releasing on a particular date
[18:59:54] <headius> But we knew there was a minor security issue and a regression so we did that soon after the holiday
[19:00:07] <headius> Yeah I'm on board
[19:00:08] <enebo[m]> ok cool
[19:02:35] <headius> 9.3.5 would be just after railsconf at two months
[19:02:42] <headius> So we can concentrate on getting 9.4 out
[19:02:47] <enebo[m]> yeah
[19:03:00] <enebo[m]> I am really really really hoping to have ripper done this week
[19:03:11] <enebo[m]> It nearly will compile only to not run
[20:00:17] <headius> ok I am back online
[20:00:21] <headius> going to look at release notes
[20:02:58] <headius> there's not a lot of big tickets here
[20:03:04] <headius> obviously the java field stuff
[20:36:58] <headius> enebo: https://gist.github.com/headius/3fdac194d7ffc6d057ebf73d69441712
[20:37:06] <headius> I think that's the important ones
[20:37:21] <headius> there's another dozen or so fixes for minor things that didn't seem to warrant notes
[20:37:59] <enebo[m]> sure looks good
[20:39:32] <byteit101[m]> ivar release note phrasing is very good
[20:39:48] <byteit101[m]> I may steal that phrasing for the blog post
[20:39:53] <byteit101[m]> oh right, blog post. enebo: did you think of any other less-contrived examples of using java libraries than the ones in the draft you had issues with?
[20:39:53] <headius> be my guest
[20:40:28] <headius> I don't know if anyone actually uses javabeans anymore but the bean inspector could be used to make an example
[20:40:29] <byteit101[m]> (or anyone else)
[20:40:35] <enebo[m]> byteit101: sorry I didn't but I also forgot to think about it
[20:40:38] <headius> or would that require get/set methods?
[20:40:53] <headius> I forget, it was like 25 years ago I did anything with javabeans
[20:40:56] <enebo[m]> This was just that you extends java.lang.Object as an example of concrete extension right?
[20:41:01] <byteit101[m]> bean inspector? get/set is fine, the json example has get/sets
[20:41:22] <byteit101[m]> yes
[20:41:25] <headius> any data binding libraries maybe?
[20:41:45] <byteit101[m]> I have jackson for JSON, spring for construction, and jackson for annotations
[20:41:55] <headius> that all seems good to me
[20:42:47] <headius> spring dependency injection into fields that are then used as ivars from Ruby?
[20:42:48] <byteit101[m]> *jackson for fields
[20:42:49] <byteit101[m]> no, spring is just for newInstance construction, but I like that idea
[20:42:53] <headius> that would be hot but dunno if it is straightforward
[20:43:24] <byteit101[m]> would need to introduce a classloader
[20:43:46] <enebo[m]> Maybe MyComponent < javax.swing.JComponent or something along those lines
[20:43:49] <headius> ah true
[20:44:22] <enebo[m]> It is merely meant to be illustrative.
[20:44:30] <headius> yeah if it is too complicated I would skip it
[20:44:46] <enebo[m]> java.lang.Object as an example just is a bit lacklustre since it gets that extension by default
[20:44:50] <headius> jaxb used to be a thing but dunno anymore
[20:44:58] <headius> probably would also need classloader wrestliinig
[20:45:19] <byteit101[m]> I can't see using swing stuff except for the construction example, Fields and annotations I don't know how to use it
[20:45:35] <headius> yeah don't think it would really use those
[20:45:38] <byteit101[m]> I did consider jaxb, but used jackson instead
[20:45:43] <headius> that's just fine
[20:45:58] <headius> my 90s Java brain is pulling out all the hits
[20:46:25] <enebo[m]> So the extension also needs to be relevant to having fields but when are fields important for any Java API?
[20:46:57] <enebo[m]> It is just a pretty uncommon public exposure
[20:46:58] <byteit101[m]> class HammerTime ... :-D
[20:47:08] <headius> AOP? ðŸ¤®
[20:47:21] <byteit101[m]> the only thing I could think of was jackson/JSON/other serialization libraries
[20:47:27] <enebo[m]> I would say if there is not a good extension example then just remove the j.l.Object from your examples because it looks strange
[20:47:40] <byteit101[m]> or initialization librariers like spring, etc
[20:47:49] <enebo[m]> no Java programmer would ever do it and I think they will think you need to or something after seeing it
[20:48:20] <byteit101[m]> Ah, but jackson without j.l.O causes an infinite loop exception as it tries to serialize the RubyObject fields that are cyclical
[20:48:38] <enebo[m]> Oh!
[20:48:46] <enebo[m]> Is that a bug?
[20:49:02] <byteit101[m]> No, jackson catches it and tells you the fields
[20:49:12] <headius> oh
[20:49:16] <headius> interesting
[20:49:23] <headius> metaClass should probably be transient
[20:49:33] <byteit101[m]> ^that;'s the one iirc
[20:49:47] <headius> that is an easy change
[20:49:58] <enebo[m]> Is that only an issue for jackson or is this a generic issue
[20:50:11] <byteit101[m]> anything that looks at all fields will encounter that
[20:50:21] <byteit101[m]> if it wants to do serialization
[20:50:31] <headius> Java serialization can handle cycles because it is not dumping a hierarchical format
[20:50:31] <enebo[m]> so any reflection
[20:50:44] <headius> so I theorize anyway
[20:50:48] <byteit101[m]> I looked at a few json libraries and realized it was just easier to use j.l.O to avoid excess fields
[20:51:12] <byteit101[m]> I bet yaml might work too, but that's not very java--y :-)
[20:54:12] <byteit101[m]> It's a very strange way to look at libraries asking: do you access fields? I wonder if there is any matrix of maven libraries and what java features they use
[21:00:34] <headius> it used to be done a lot more but modern libraries are more sanitary
[21:07:52] <headius> Tim Bray pointed out Android
[21:08:23] <headius> I wouldn't know how to set that up though... might be able to get some help from @donv
[21:08:48] <headius> "Spotless" code formatter mentioned but I don't see how that would work
[21:19:33] <enebo[m]> headius: I pushed all bits and maven seems to be visible
[21:19:46] <enebo[m]> I can push website as it is updated locally
[21:20:40] <headius> sweet
[21:20:56] <enebo[m]> I am going to push website then send out emails
[21:21:02] <enebo[m]> I will also do github release
[21:22:17] <headius> tweet's ready
[21:24:29] <enebo[m]> sites live emails going out
[21:24:41] <headius> looks good
[21:25:02] <headius> tweet's live
[21:25:13] <headius> https://twitter.com/jruby/status/1506675841480241160
[21:27:16] <headius> https://www.facebook.com/JRubyFans/posts/10166330008210578
[21:28:32] <headius> https://www.linkedin.com/feed/update/urn:li:activity:6912442331681996800?utm_source=linkedin_share&utm_medium=member_desktop_web
[21:28:42] <headius> awful link
[21:34:42] <enebo[m]> github release is out
[21:35:02] <headius> https://github.com/docker-library/official-images/pull/12106
[21:38:39] <headius> https://www.reddit.com/r/ruby/comments/tl1wf2/jruby_9340_released/
[21:38:54] <headius> markdown seems to work better now on reddit so I put the release page in the post
[21:55:44] <headius> https://github.com/rvm/rvm/pull/5195
[22:03:01] <headius> https://github.com/rbenv/ruby-build/pull/1952
[22:03:12] <headius> and https://github.com/postmodern/ruby-versions/pull/60
[22:03:48] <headius> I think that's everything
[22:04:11] <headius> bgoetz suggested Velocity... amazing if that is still in use
[22:04:24] <headius> byteit101: ^ as an example of reflective field access
[22:04:28] <headius> perhaps not so relevant these days
[22:07:50] <headius> enebo: two issues didn't get links in my notes for some reason: (#6831, #6963)
[22:08:21] <headius> I must have spaced it out
[22:09:42] <headius> fixed but it occurs to me we could use the same link list if you generated it like mine
[22:12:59] <headius> Hibernate suggested as another field example
[22:16:51] <byteit101[m]> Ah nice, I'll look at that twitter thread after work today
[22:23:16] <headius> https://twitter.com/headius/status/1506667938958520327
[22:29:59] <headius> hmm it would be interesting to make this work with rack: https://twitter.com/bazlur_rahman/status/1506691625862447113
[22:30:45] <headius> oh wat, it only does HEAD and GET?
[22:30:46] <headius> ok nevermind
[22:54:25] <headius> enebo: I see a bunch of low-hanging fruit in WIP specs
[22:54:55] <enebo[m]> yeah especially in the smaller items like Method#to_s/inspect
[22:55:04] <enebo[m]> It is mostly just adding some new missing output
[22:55:49] <enebo[m]> I have backed off on some of those just because people like k7chii was doing a few each weekend
[22:55:50] <headius> Encoding.list
[22:55:50] <headius> - includes CESU-8 encoding
[22:55:58] <headius> works with jcodings update thanks to ahorek 
[22:56:02] <enebo[m]> that is just jcodings being updates
[22:56:14] <enebo[m]> hopefully that is fixed with that jar updated
[22:56:20] <headius> TCPSocket#initialize spec hangs which is probably what gets killed on GHA
[22:56:33] <enebo[m]> There are a lot more encoding errors in MRI from lack of udpate
[22:56:46] <headius> TCPSocket#initialize with a running server connects to a server when passed connect_timeout argument
[22:56:46] <headius> Example took longer than the configured timeout of 120.0s
[22:56:52] <enebo[m]> some of those new keywords are a bit more work
[22:57:12] <enebo[m]> but all the timeouts feel like they may also touch io scheduler too at some level
[22:57:42] <headius> maybe
[22:57:55] <headius> one of these versions added some DNS timeout stuff to connections
[22:58:13] <headius> this may just be some timeout logic we are missing (if we can support it on JDK sockets at all)
[22:58:34] <enebo[m]> yeah and quite a bit of refactoring to push it down
[22:58:49] <enebo[m]> I did look briefly at tcpsocket timeout
[23:00:34] <headius> I will try to have a look at this so we can do a full run of WIP
[23:01:03] <headius> at least get it to fail rather than timeout and kill the run
[23:01:19] <enebo[m]> before WIP we were seeing full runs
[23:01:30] <enebo[m]> It would give results
[23:01:41] <enebo[m]> So perhaps not running everything but it was at least producing a summary
[23:01:54] <headius> not sure we included stdlib in that
[23:02:05] <enebo[m]> we definitely had some stdlib
[23:02:15] <enebo[m]> but not all of it but TCPSocket was in there for example
[23:02:19] <headius> oh hmm
[23:02:27] <headius> maybe this was tagged as hangs?
[23:03:01] <enebo[m]> Maybe?  It is definitely possible we are running more now or we just updated something which made things progress in the same spec file
[23:03:40] <headius> hmm I only see the wip tag
[23:03:45] <headius> wiplers
[23:04:27] <enebo[m]> I got a case of the wiplers
[23:06:02] <headius> 184)
[23:06:02] <headius> TCPSocket#initialize with a running server connects to a server when passed connect_timeout argument ERROR
[23:06:02] <headius> TypeError: no implicit conversion of Hash into String
[23:06:11] <headius> partial impl lets it run now but the timeout is not honored
[23:06:17] <headius> so it times out
[23:06:26] <headius> this is from the last run before wip
[23:06:54] <headius> post wip it now accepts the Hash but then does nothing with the timeout
[23:08:26] <headius> so we can re-break it or finish it I guess
[23:09:46] <enebo[m]> yeah
