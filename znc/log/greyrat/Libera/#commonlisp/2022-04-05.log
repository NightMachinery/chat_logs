[00:02:34] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[00:08:25] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:f1fc:41cc:1190:cfb8) (Ping timeout: 268 seconds)
[00:08:51] *** Joins: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba)
[00:09:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[00:10:30] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[00:18:55] *** Joins: rawley (~rawley@142.99.241.242)
[00:23:35] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:24:11] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[00:25:04] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 268 seconds)
[00:27:57] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[00:28:06] *** Quits: cage (~cage@dynamic-adsl-78-13-243-253.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:29:02] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[00:31:43] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[00:41:15] *** Quits: prokhor__ (~prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net) (Ping timeout: 256 seconds)
[00:47:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:47:56] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[00:50:24] *** Lord_of_Life_ is now known as Lord_of_Life
[00:58:12] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[01:03:22] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[01:03:43] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.5)
[01:16:40] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[01:17:48] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 260 seconds)
[01:18:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:28:11] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:29:47] *** Joins: dra (~dra@2a04:4540:6411:4e00:49a9:77da:7d7b:444b)
[01:30:31] *** Joins: Posterdati (~posterdat@user/Posterdati)
[01:33:05] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[01:34:43] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[01:35:34] <Demosthenex> ok, so i'm confused. i have a function that does something, i hit compile and it recompiles fine. but then i have a dispatch table with an entry referring to that function, why do i have to refresh the dispatch eevery time too?
[01:35:40] <Demosthenex> i thought calling it by name is enough
[01:36:35] <Bike> Demosthenex: do you have 'foo in the table, or #'foo?
[01:36:49] <Demosthenex> Bike: #'foo
[01:37:01] <Demosthenex> i thought that was preferred?
[01:37:37] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[01:38:11] <Bike> well, there you go. that will resolve immediately, so it will be the original definition
[01:39:06] <Demosthenex> ok, i'll trry a normal ', ty
[01:43:16] *** Quits: rawley (~rawley@142.99.241.242) (Remote host closed the connection)
[01:44:12] *** Quits: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba) (Read error: Connection reset by peer)
[01:44:28] *** Joins: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba)
[01:49:01] *** Quits: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba) (Ping timeout: 256 seconds)
[01:50:19] <mfiano> Demosthenex: Yeah there is a runtime lookup of the fedefinition with a quote, but sharpsign-quote refers to the function that exists right then and there.
[01:50:37] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:446a:e995:495d:c777)
[01:51:05] *** Joins: cjb (~cjbayliss@user/cjb)
[01:51:14] <mfiano> For some definition of runtime that is. As always, things get hairy when talking about compilation phases of CL.
[01:55:08] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:446a:e995:495d:c777) (Ping timeout: 260 seconds)
[01:55:40] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[01:57:33] <Demosthenex> np, i applied a best practice i didn't fully grok
[01:57:37] <Demosthenex> learned something new
[01:58:09] <Demosthenex> i just wrapped my project in postmodern with-transaction, and a few other error handle points so i could hotreload and retry, then was confused why it never happened ;]
[01:58:20] <mfiano> quote will always refer to a function in the global environment, which you can use to your advantage in cases like this, or when you need to disambiguate a local flet/labels function.
[02:02:00] <Demosthenex> it'll stick with me now that i've hit it ;]
[02:03:15] <mfiano> It's exciting when you discover something new about Lisp and gives you a stronger appreciation for how well it is designed.
[02:05:56] <jackdaniel> mfiano: did you use in cl-sdl2 an opengl context in a dedicated thread?
[02:06:01] <masinter> designed by committee
[02:07:43] <White_Flame> Demosthenex: technically that is an optimization practice, not necessarily "best" depending on situation
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:19:57] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:20:49] <random-nick> isn't "designed by committee" usually disparaging when it comes to programming related things?
[02:24:01] *** Quits: dra (~dra@2a04:4540:6411:4e00:49a9:77da:7d7b:444b) (Quit: Leaving)
[02:26:44] *** Quits: cjb (~cjbayliss@user/cjb) ()
[02:27:18] *** Joins: cjb (~cjb@user/cjb)
[02:33:18] *** Joins: jeko (~user@user/jeko)
[02:39:00] <_death> usually, but (i) the committee did a pretty good job (thanks masinter) and (ii) not all of CL was designed by a committee, much came from its predecessors..
[02:39:06] <Guest74> random-nick: it probably depends on who says it.
[02:39:29] *** Quits: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:39:35] *** Quits: yewscion (~yewscion@72-21-196-67.amazon.com) (Ping timeout: 246 seconds)
[02:40:19] <_death> in this case I'm guessing that the committee much simplified funcall/apply semantics, as maclisp was much gnarlier
[02:48:18] <mfiano> jackdaniel: I should do a writeup of my method sometime, but the short answer is no. I use one of Sly's builtin features to essentially run OpenGL in the REPL's thread, with a hack to make it seem non-blocking.
[02:49:56] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:67d2:d391:3f5:bf92) (Quit: WeeChat 3.4.1)
[02:50:25] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:f37c:486d:e6c4:36d4)
[02:51:30] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[02:54:25] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 248 seconds)
[02:56:07] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[02:56:41] <_death> for example you could funcall arrays, special functions, symbols, and functional objects (think funcallable instances) like streams.. looking at the chinual I also notice some format directives that have been simplified/dropped.. like ~:| which would clear the screen (if possible) or ~Q which had format call a function (kinda like ~/, but function didn't need to be named)
[02:59:40] <_death> ~X used to output spaces...
[03:16:17] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 248 seconds)
[03:34:53] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[03:35:30] *** Joins: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9)
[03:36:14] *** Quits: Catie (~user@user/catie) (Ping timeout: 268 seconds)
[03:36:44] *** Joins: aeth (~aeth@user/aeth)
[03:41:25] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[03:50:34] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[03:51:41] *** Joins: akoana (~ah@user/akoana)
[03:54:00] *** Joins: Catie (~user@user/catie)
[03:58:48] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 260 seconds)
[04:01:07] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 260 seconds)
[04:02:33] *** Joins: psf (~pi@206.55.172.18)
[04:34:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[04:34:50] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:38:07] *** Quits: jgkamat (~jay@user/jay) (Ping timeout: 256 seconds)
[04:38:14] *** Quits: dac (~dcx@user/dac) (Remote host closed the connection)
[04:38:34] *** Joins: dcx (~dcx@user/dac)
[04:38:41] *** Quits: hisacro (~OBSD@my.displ.nl) (Ping timeout: 256 seconds)
[04:39:16] *** Joins: hisacro (~OBSD@my.displ.nl)
[04:39:27] *** Quits: ebrasca (~user@librepanther.com) (Read error: Connection reset by peer)
[04:39:38] *** Joins: jgkamat (~jay@user/jay)
[04:39:55] *** Joins: ebrasca (~user@librepanther.com)
[04:42:39] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: phadthai (mmondor@user/phadthai) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Xach (~xach@user/xach) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: markasoftware (~quassel@107.161.26.124) (Ping timeout: 256 seconds)
[04:43:56] *** Joins: Xach (~xach@66-63-89-62.static.suscom-maine.net)
[04:43:57] *** Joins: derelict (~derelict@user/derelict)
[04:44:10] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[04:44:16] *** Joins: markasoftware (~quassel@107.161.26.124)
[04:44:21] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: flip214 (~marek@user/flip214) (Ping timeout: 256 seconds)
[04:45:44] *** Joins: flip214 (~marek@user/flip214)
[04:45:46] *** Joins: phadthai (~mmondor@user/phadthai)
[04:46:05] *** Joins: asarch (~asarch@2806:10ae:7:23bc:8bd1:89cf:5203:5f1b)
[04:47:08] *** Quits: beach (~user@2a01:cb19:150:3400:abfc:9bc5:6834:d598) (Ping timeout: 252 seconds)
[04:47:26] <asarch> From a query I get the value of :null, how could I test if the variable taco is not equal to :null?
[04:48:24] <adlai> using #'eq instead of #'equal
[04:49:05] <adlai> minion: tell asarch about #'rg:egal
[04:49:09] <minion> Sorry, I couldn't find anything in the database for ``'rgegal''.
[04:49:23] <adlai> "at least I fucking tried!"
[04:51:02] <adlai> wow, there are more people in #ccl than there were before freenode got nerfed.
[04:51:13] <adlai> is it still a complete ghost town?
[04:51:18] <asarch> Bingo! (let ((taco :null)) (if (not (eq taco :null)) "hay taco" "no hay taco"))
[04:51:28] <asarch> Most of them are currently sleeping
[04:51:31] <asarch> You know
[04:51:41] <adlai> no, I don't.
[04:52:09] <adlai> maybe one day I'll resume using IRC clients that log everything and issue /whois on every nick in a channel each time I join.
[04:52:30] <adlai> until then, one must compromise.
[04:53:01] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[04:53:22] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[04:56:13] *** Joins: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de)
[04:57:42] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[04:58:08] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[04:59:14] *** Parts: adlai (~adlai@80.244.243.194) (this part message wrote unintentionally nonblank)
[05:04:15] *** Joins: igemnace (~ian@user/igemnace)
[05:05:29] *** Quits: asarch (~asarch@2806:10ae:7:23bc:8bd1:89cf:5203:5f1b) (Quit: Leaving)
[05:12:44] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[05:13:00] *** Joins: jeko (~user@user/jeko)
[05:13:02] *** Joins: zacque (~zacque@1.32.90.32)
[05:15:33] *** Joins: lisp123 (~lisp123@143.238.171.43)
[05:17:10] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[05:17:34] *** Joins: jeko (~user@user/jeko)
[05:18:37] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[05:20:01] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 248 seconds)
[05:34:09] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:34:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 246 seconds)
[05:41:16] *** Quits: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:51:54] <contrapunctus> For someone mainly interested in using SQLite, would y'all recommend using CLSQL, Mito, CL-DBI, Datafly, or something else?
[05:54:56] <dbotton> cl-dbi uses cl-sqlite
[05:55:11] <dbotton> same for mito
[05:55:49] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:56:39] <dbotton> datafly same deal
[05:57:24] <dbotton> it is about what abstraction appeals to you
[05:59:21] <dbotton> <contrapunctus> if only looking for sqlite maybe just use cl-sqlite
[06:16:44] *** Joins: Inline__ (~Inline@p200300cd470f5c00eeead6c89d51972a.dip0.t-ipconnect.de)
[06:19:00] *** Quits: Inline (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:20:17] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 248 seconds)
[06:21:51] *** Joins: Bike (~Bike@71.69.170.70)
[06:23:27] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:31:39] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[06:33:50] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[06:35:39] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:37:02] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.5)
[06:39:23] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (Ping timeout: 256 seconds)
[06:40:31] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[06:41:05] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[06:41:39] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 256 seconds)
[06:41:52] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[06:42:19] <contrapunctus> Right, I forgot to mention cl-sqlite.
[06:42:58] *** Joins: aeth (~aeth@user/aeth)
[06:54:48] *** Quits: trumae (~trumae@2804:18:86e:cd79:1:0:4570:9f01) (Remote host closed the connection)
[07:02:12] *** Joins: igemnace (~ian@user/igemnace)
[07:03:47] *** Joins: lisp123 (~lisp123@143.238.171.43)
[07:08:02] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 246 seconds)
[07:12:54] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:46] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:18:01] *** Joins: occ (~occ@user/occ)
[07:31:38] *** Joins: beach (~user@2a01:cb19:150:3400:dbaa:8fb4:3b24:79a1)
[07:31:39] *** Joins: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9)
[07:32:07] <beach> Good morning everyone!
[07:33:30] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 272 seconds)
[07:34:05] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[07:41:03] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[07:45:01] *** Joins: semz_ (~semz@user/semz)
[07:47:51] *** Quits: semz (~semz@user/semz) (Ping timeout: 260 seconds)
[07:48:41] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[07:49:07] *** Quits: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:51:08] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:f37c:486d:e6c4:36d4) (Ping timeout: 260 seconds)
[07:51:42] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:7b2e:dcb2:6878:c267)
[07:54:34] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[07:55:08] *** Joins: igemnace (~ian@user/igemnace)
[08:00:02] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[08:00:23] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[08:01:24] *** Quits: occ (~occ@user/occ) (Ping timeout: 268 seconds)
[08:05:45] *** Joins: occ (~occ@user/occ)
[08:06:48] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[08:22:46] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:25:19] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[08:29:32] *** Joins: s-liao (~s-liao@101.86.164.158)
[08:31:40] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[08:32:07] <jackdaniel> minion: I see, thanks!
[08:32:08] <minion> please stop playing with me... i am not a toy
[08:32:24] <jackdaniel> mfiano: * ^
[08:44:59] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 246 seconds)
[08:47:35] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[08:47:58] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[08:49:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:50:15] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:50:47] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[08:52:07] *** Joins: lisp123 (~lisp123@143.238.171.43)
[08:54:32] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[08:54:46] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:56:05] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[08:56:55] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 260 seconds)
[09:00:46] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[09:01:21] *** Joins: s-liao (~s-liao@101.86.164.158)
[09:03:53] *** Quits: occ (~occ@user/occ) (Ping timeout: 246 seconds)
[09:13:13] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[09:31:41] *** Joins: Inline (~Inline@p4fedbc1e.dip0.t-ipconnect.de)
[09:34:13] *** Quits: Inline__ (~Inline@p200300cd470f5c00eeead6c89d51972a.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:35:07] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:36:14] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[09:51:39] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[09:55:28] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[09:58:16] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[10:22:08] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:26:56] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[10:27:28] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[10:38:32] *** semz_ is now known as semz
[10:40:19] *** Joins: lisp123 (~lisp123@143.238.171.43)
[10:42:52] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:43:26] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[10:45:26] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 268 seconds)
[10:50:15] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:50:41] *** Quits: frgo (~frgo@p548a3b78.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[10:51:41] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 246 seconds)
[10:52:02] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:03:32] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[11:03:44] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[11:15:08] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[11:16:08] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[11:18:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:20:06] *** Joins: prokhor__ (~prokhor@2a02:1368:6400:f200:f472:c2ad:5b87:3335)
[11:26:49] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Read error: Connection reset by peer)
[11:27:59] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:31:02] *** Joins: pillton (~user@203-219-55-195.tpgi.com.au)
[11:35:54] *** Joins: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9)
[11:44:25] *** Joins: shka (~herr@109.231.3.55)
[11:48:58] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 260 seconds)
[11:55:05] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:55:39] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[11:58:36] *** Joins: MajorBiscuit (~MajorBisc@c-001-028-054.client.tudelft.eduvpn.nl)
[12:06:37] *** Quits: MajorBiscuit (~MajorBisc@c-001-028-054.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[12:10:47] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 246 seconds)
[12:16:43] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:17:31] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[12:20:24] *** Joins: epony (epony@user/epony)
[12:21:56] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[12:28:29] *** Joins: lisp123 (~lisp123@143.238.171.43)
[12:33:21] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 268 seconds)
[12:46:38] *** Quits: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9) (Ping timeout: 260 seconds)
[12:50:06] *** Joins: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net)
[12:51:50] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[12:58:14] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Remote host closed the connection)
[12:58:52] *** Joins: lawt (~lawt@2601:200:8200:6870:dea6:32ff:fea1:adf9)
[13:00:09] *** Quits: ecraven (ecraven@user/nex) (Quit: quit)
[13:00:39] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[13:00:53] <zacque> Hi, can I modify the argument values in SLIME debugger?
[13:00:57] *** Joins: ecraven (ecraven@user/nex)
[13:01:14] <zacque> I tried `(setf <argument> <new-value>)` but it doesn't work
[13:03:08] <zacque> Oh, seems like it does work, but I couldn't restart from the frame with the new-value
[13:04:01] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 248 seconds)
[13:04:34] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:07:07] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[13:17:38] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 260 seconds)
[13:17:49] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 250 seconds)
[13:22:55] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[13:23:26] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:25:06] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:25:39] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[13:35:23] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:36:26] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[13:45:38] *** Joins: kevingal (~quassel@149.157.108.66)
[13:49:38] *** Joins: prokhor_ (~prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net)
[13:50:12] *** Joins: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net)
[13:50:19] *** Quits: kevingal (~quassel@149.157.108.66) (Ping timeout: 250 seconds)
[13:50:26] *** Joins: kevingal (~quassel@2001:770:c0:401:d0e1:d64:6cd9:bd2a)
[13:50:55] <dickbar__> minion: Tell me about yourself.
[13:50:56] <minion> dickbar__: what's up?
[13:51:23] <dickbar__> minion: I'm oke.
[13:51:23] <minion> please stop playing with me... i am not a toy
[13:52:01] *** Quits: prokhor__ (~prokhor@2a02:1368:6400:f200:f472:c2ad:5b87:3335) (Ping timeout: 248 seconds)
[13:52:27] <dickbar__> minion: neither am i.
[13:52:27] <minion> would you want to be
[13:52:44] <dickbar__> minion: no!
[13:52:44] <minion> why not?
[13:53:05] <beach> dickbar__: Please do these conversations using /msg.
[13:53:38] <dickbar__> oke:-)
[13:54:01] <beach> dickbar__: Minion is mostly useful for showing other participants important information that would otherwise have to be looked up and retyped.
[13:56:04] <dickbar__> Beach: I understand. I was looking for how much Eliza like minion is.
[13:56:27] <beach> Not much.
[13:59:18] *** Joins: lisp123 (~lisp123@143.238.171.43)
[13:59:41] *** Quits: lisp123 (~lisp123@143.238.171.43) (Read error: Connection reset by peer)
[14:00:35] *** Quits: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net) ()
[14:04:58] <rotateq> beach: I watched the rest of an interview film with Joseph Weizenbaum (cause Eliza was mentioned) some days ago, very interesting personality. Iirc he wrote it in MACLisp like Terry Winograd did with SHRDLU.
[14:05:48] <beach> I see.
[14:12:10] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:13:38] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[14:18:11] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[14:25:48] *** Quits: opcode (~opcode@2604:5800:0:1f::2) (Ping timeout: 240 seconds)
[14:26:36] *** Joins: treflip (~user@user/treflip)
[14:27:05] *** Joins: opcode (~opcode@user/opcode)
[14:30:05] <prokhor_> rotateq: could you pls give a link to that interview?
[14:44:08] <rotateq> prokhor_: No sorry, it is a DVD Film someone borrowed me (from 2006) and in German.
[14:45:34] <prokhor_> ah... I am Swiss btw, so i understand German..
[14:49:41] *** Quits: sterni (~lukas@user/sterni) (Quit: WeeChat 3.3)
[14:49:52] *** Joins: sterni (~lukas@user/sterni)
[14:51:01] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[14:55:29] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 248 seconds)
[14:57:27] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:57:28] *** Joins: frgo (~frgo@p548a3b78.dip0.t-ipconnect.de)
[15:01:35] *** Quits: frgo (~frgo@p548a3b78.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[15:05:14] <prokhor_> beach: what is your opinion on Mezzano btw? (besides not being what you intend wth closos)
[15:06:48] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:08:28] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 260 seconds)
[15:17:25] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[15:19:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:22:12] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[15:23:20] *** Parts: treflip (~user@user/treflip) (ERC (IRC client for Emacs 27.2))
[15:26:28] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[15:27:32] *** Joins: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9)
[15:28:05] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:37:23] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[15:41:05] *** Quits: pillton (~user@203-219-55-195.tpgi.com.au) (Remote host closed the connection)
[15:44:02] *** Joins: s-liao (~s-liao@101.86.164.158)
[15:50:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 248 seconds)
[15:51:19] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:55:45] <beach> prokhor_: It looks like a fine system.  I haven't used it myself, but it is certainly impressive work.
[15:58:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:02:09] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 248 seconds)
[16:04:13] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:09:16] *** Joins: jeko (~user@user/jeko)
[16:10:54] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[16:13:09] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[16:16:16] <hayley> lisp123, beach: Following a prior discussion, I found this paper "CoCo: Sound and Adaptive Replacement of Java Collections" which describes a technique for trying to pick the best implementation of abstract data types: <https://web.cs.ucla.edu/~harryxu/papers/xu-ecoop13.pdf>
[16:18:55] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:25:25] *** Quits: Posterdati (~posterdat@user/Posterdati) (Read error: Connection reset by peer)
[16:27:39] <beach> hayley: Interesting!
[16:30:43] *** Joins: Posterdati (~posterdat@user/Posterdati)
[16:31:53] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 246 seconds)
[16:32:28] *** Quits: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net) (Ping timeout: 260 seconds)
[16:33:24] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:33:56] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[16:34:23] *** Quits: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[16:34:57] *** Joins: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr)
[16:34:57] *** Joins: Psybur (~Psybur@2600:1003:b138:112:6968:67e7:2717:bba0)
[16:37:53] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 248 seconds)
[16:38:42] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:51:25] <hayley> Today I decided to work on an assignment for the C++ class at university (though I don't take the class, I just heard enough questions about the assignment to warrant taking a look). The final part, which people were working on, was path finding in a maze.
[16:52:19] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[16:52:57] <hayley> It took something like 100 lines of Common Lisp to parse the input file, perform pathfinding, and produce some visualisations using CLIM (which I used for debugging). And it was thousands of times faster than C++ code, since I had used a better algorithm than what was specified for the assignment.
[16:54:10] *** Joins: aeth (~aeth@user/aeth)
[16:54:50] <hayley> I have two observations. First, it's funny that students are taught C++ because it is a "fast" language, but they are taught to solve problems with bad data structures and algorithms. Second, my code seemed impressive to the other students until I provided some of that code, where they did the...usual reaction to reading Lisp code.
[16:57:18] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Read error: Connection reset by peer)
[16:57:29] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:00:01] *** Joins: lisp123 (~lisp123@143.238.171.43)
[17:01:47] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[17:02:30] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:08:36] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:08:49] <rotateq> hayley: They didn't say "It's unreadable."?
[17:09:09] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[17:10:19] <jackdaniel> they said: I've read last 30% of the file and it was all ')'
[17:11:08] <hayley> Both.
[17:11:11] <_death> lots of irritating si pluses
[17:13:34] <hayley> It was more like seven close parens, but still. Everything's great until they see the code.
[17:15:23] <Shinmera> Sorry for cross-posting from twitter, but thought this anecdote might be interesting for the denizens here too https://twitter.com/Shinmera/status/1510983971819163658
[17:18:11] <hayley> It's like that episode of The Simpsons where Bart does ballet. Everything is good until he takes off the mask, and his identity is revealed. How odd.
[17:20:04] <empwilli> Shinmera: sounds interesting :) have you considered crossposting to the fediverse? i'd love to follow but twitter :/
[17:20:33] <Shinmera> I have a mastodon account but don't really post there, nor does anyone really follow me there.
[17:20:41] <Shinmera> So no, have not.
[17:20:58] <empwilli> so at least some interest would be there :)
[17:22:30] *** Quits: lisp123 (~lisp123@143.238.171.43) (Quit: Leaving...)
[17:22:30] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 272 seconds)
[17:24:21] <Shinmera> I'm not going to start cross-posting myself, sorry. But feel free to do it if you feel like it.
[17:26:40] <empwilli> k thank :)
[17:26:43] <empwilli> *thanks
[17:26:46] *** Joins: razetime (~quassel@117.254.35.74)
[17:26:57] <beach> hayley: Your first observation is similar to what goes on in industry.  People choose C++ because the compiler is known to generate fast code, but then because of lack of automatic memory management, they blow it by using smart pointers, object copying, or reference counters.
[17:27:25] *** Quits: hisacro (~OBSD@my.displ.nl) (Ping timeout: 256 seconds)
[17:28:35] <hayley> Yes, there is also the requirement that basically every object is deep copied somewhere.
[17:29:01] <beach> In the assignment?  Oh wow!
[17:29:26] <flip214> hayley: to ensure "functional programming", perhaps?
[17:29:43] <hayley> A friend also noted that there were pointers where they were not necessary at all, other than to make students suffer with manual memory management. I think "new int" even comes up somewhere.
[17:30:37] <hayley> flip214: The algorithms used (in the assignment requirements, and my code too) were entirely imperative. I started working on a port to Standard ML, but decided that the code was too imperative.
[17:31:18] <empwilli> be careful not to confuse *language X is bad* with *the task of the assignment is to make so. comfortable with new concepts*; pedagogic tasks must not necessarily be super sensible and the more trivial albeit less optimal algorithm might be more suitable to demonstrate how things work
[17:32:14] <hayley> Apparently the teacher has very...interesting ideas on clean code, including banning multiple return statements, switch-case, breaking out of loops, etc. I don't think they would begin with good techniques, by using functional programming.
[17:32:32] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[17:33:36] <hayley> @empwilli: Sure. But (as I might have said in prior years of study) these choices of algorithms and data structures make problems far harder than they need to be. To an extent, I find that the best data structures make code simpler.
[17:33:40] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:34:57] <empwilli> can't judge w/o seeing the assignment; but to be honest if it were for a aoc assignment or sth. similar I would likely rely to depth first search via stack or similar
[17:35:10] <empwilli> and then my datastructure is implicit :)
[17:35:51] <hayley> But this behaviour strikes me as odd. They hear that I made a program in one afternoon, and it runs thousands of times faster (I'm not kidding), but then lose it when they see some parentheses.
[17:36:53] <_death> show them lisp-to-dylan output instead ;)
[17:37:14] <hayley> empwilli: It is a breadth first search of sorts. The algorithm was specified in the assignment, and it manages to be slow and difficult to write simultaneously.
[17:37:51] <empwilli> hey that's not easy to achieve!
[17:37:52] <flip214> hayley: when you just learn your first language, anything different looks fearsome.  only when they have more experience (and found out that different syntaxes/styles/conventions make sense!), they'll become more open.
[17:38:32] <beach> This psychological phenomenon is well documented.
[17:39:59] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[17:40:10] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:41:17] <hayley> There is a "traversal" algorithm which is like Dijkstra's algorithm, I guess. There are "open" and "closed" sets, represented as adjustable vector. However, the open set never has elements removed, and both lists require a sequential search to find membership. It's terribly slow and convoluted. And the algorithm produces another such "set" represented as a vector.
[17:42:11] *** Joins: Bike (~Bike@71.69.170.70)
[17:42:22] <empwilli> ugh
[17:42:29] <hayley> There is a much more natural data structure for the closed set, and returned value, namely a two-dimensional array, with the same dimensions as the maze to solve. It's plain weird.
[17:43:49] <hayley> But, anyway, everything goes well until someone sees the damn parentheses. It's very unfortunate.
[17:45:47] <_death> a 2d array would make sense if it's dense, but it's probably not..
[17:46:24] <hayley> It's pretty dense, and space is not an issue for this size of maze.
[17:46:29] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[17:47:04] <_death> another option is to make it intrusive, so that each cell in the maze stores the flag
[17:47:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:48:41] <hayley> With regards to the syntax, still, I wonder how manual memory management and some weird overloading (like << to print) is considered "normal", but prefix notation is not. I am sure the former has caused many more defects than the latter.
[17:51:14] <empwilli> i'd argue that manual memory management is not the status quo in modern c++
[17:52:16] <hayley> Sure. Though the students have only been taught pointers.
[17:52:22] <empwilli> and it's likely not the prefix notion for lisp; yes you can program imperatively but at least for me (as a beginner) it feels significantly harder than in _any_ imperative programming language i've encountered so far
[17:53:15] <empwilli> what level of students are they?
[17:53:28] <hayley> All the complaints I got were due to prefix notation.
[17:53:44] <hayley> All second year in a Bachelor degree.
[17:54:13] <empwilli> ok then its really odd :D
[17:54:38] <empwilli> (however I learned prolog in my first year so maybe I was used to "odd" languages :D)
[17:56:01] <_death> if you see foo[i], complain that it's not i[foo]
[17:56:23] <hayley> Maybe, more generally, the students aren't taught how to avoid failure. They have to write out the loop, rather than calling memcpy. They cannot use assert() (or similar) to test preconditions. But that is more off-topic. I just don't get how their perception turns to shit that quickly.
[17:57:12] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:57:44] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[17:59:38] * hayley uploaded an image: (16KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/RaLjdYiUGHJGINTwodMuLxrk/screenshot_2022-04-05_18-03-41.png >
[18:00:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:00:46] <hayley> Here is a little visualisation I made in CLIM, too. Someone asked how much stopping traversal early would help, when the goal in the maze was found. It would help about that much.
[18:01:32] <_death> in fact, you can complain that they don't write in Bourne style
[18:01:33] <_death> https://research.swtch.com/shmacro
[18:02:25] <jdz> hayley: Have you asked them how is an ordinary function call not a prefix notation?  Like how is (foo x y z) really different from foo(x, y, z)?
[18:03:40] <jdz> I'd really know the answer.
[18:03:44] <jdz> *like to
[18:04:19] <hayley> _death: Using the C preprocessor for anything other than #include is an immediate fail, as with any other style violation.
[18:04:46] <hayley> jdz: If I had to guess, that control structures get {}, and operators get precedence rules instead.
[18:06:02] <jdz> Right.  And have is memorizing precedence rules good again?  A rhetorical question.
[18:08:01] *** Joins: hisacro (~OBSD@my.displ.nl)
[18:08:26] <hayley> Right.
[18:09:56] <_death> well, what about #include <iso646.h>
[18:11:07] <hayley> I'll also add that memory management is the biggest cause of bugs in this course (of course). And someone told them about how to use valgrind and -fsanitize, to avoid the cases where programs with bugs just so happen to work. But it's definitely the parentheses that are a problem here.
[18:11:29] <hayley> (That someone was not the lecturer, too, of course.)
[18:16:53] <beach> hayley: Is this going in the direction where you are going to suggest a syntax for Lisp without parentheses in order to persuade your class mates to use Lisp?  It is not going to work; it has been tries multiple times.
[18:18:31] <hayley> I am aware, and I am not going to do that.
[18:18:49] <beach> Whew!
[18:19:08] <hayley> I'm just curious about how syntax appears to be a larger problem than everything else.
[18:19:48] <beach> hayley: Look at it this way... the class mates with a sufficiently closed mindset to reject a factor 1000 performance improvement because of parentheses are probably not the ones you would want to use Common Lisp in the first place.
[18:19:55] <_death> it's the surface, they can't see anything beneath it
[18:20:11] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 260 seconds)
[18:20:26] <beach> Exactly, and they have no desire to.
[18:20:54] <hayley> That is true.
[18:21:00] <_death> it can take time to understand that programming languages are more than syntax
[18:21:15] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:21:34] <hayley> I would think learning Java and then C++ would go some way to that, still.
[18:21:38] *** Joins: VincentVega (~user@212.97.4.213)
[18:22:53] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[18:22:56] <empwilli> beach: it's not the performance improvement that comes with the different language, though
[18:24:06] <hayley> Right, the performance difference was due to different algorithms and data structures. But I only had code written in Common Lisp.
[18:24:12] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Quit: ERC (IRC client for Emacs 26.3))
[18:24:14] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[18:24:23] <empwilli> of course :)
[18:25:32] *** Quits: kevingal (~quassel@2001:770:c0:401:d0e1:d64:6cd9:bd2a) (Ping timeout: 252 seconds)
[18:26:18] *** Quits: Inline (~Inline@p4fedbc1e.dip0.t-ipconnect.de) (Quit: Leaving)
[18:26:42] *** Quits: Psybur (~Psybur@2600:1003:b138:112:6968:67e7:2717:bba0) (Ping timeout: 268 seconds)
[18:27:39] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[18:27:45] *** Joins: Inline (~Inline@p200300cd470f5c00eeead6c89d51972a.dip0.t-ipconnect.de)
[18:27:58] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:28:10] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[18:29:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Read error: Connection reset by peer)
[18:30:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[18:41:39] <jackdaniel> hayley: very cool visualisation
[18:43:37] <jackdaniel> I agree with empwilli - when the purpose of an assignemnt to implement linked lists is to get confused and finally understand how pointer works then using #'cons, #'find and #'remove kind of misses the point (still it must be very impressive for the assignee)
[18:43:53] <jackdaniel> s/works then/works, then/
[18:44:34] <VincentVega> Shinmera: re twitter: the mental burden of adopting CLOS is less than ever with https://github.com/marcoheisig/fast-generic-functions
[18:45:23] <VincentVega> although where CLOS is obvious to use, it's usually pretty hard to avoid anyway
[18:46:24] <VincentVega> What's the function BTW?
[18:46:50] <VincentVega> Kind of leaving people hanging in the air right there.
[18:47:26] <jackdaniel> let me make a guess: "handle-event"!
[18:47:58] <VincentVega> sounds like a good guess to me, yeah
[18:47:59] <Shinmera> VincentVega: trial:handle
[18:48:14] <Shinmera> there's also trial:render, similarly used.
[18:48:38] <VincentVega> I see, cool
[18:49:33] <jackdaniel> I've got it 50% right; time to write some common
[18:50:26] *** Joins: frgo (~frgo@p548a3b78.dip0.t-ipconnect.de)
[18:51:31] <VincentVega> I sometimes yearn for a function called do-it.
[18:51:45] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[18:52:20] <Xach> TICK
[18:52:23] <jackdaniel> that's often my thunk
[18:52:55] <jackdaniel> (flet ((do-it () …)) (if (bah) (do-it) (some-weird-context () (do-it)))
[18:53:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 246 seconds)
[18:53:19] <Shinmera> Xach: that's the name of the most frequent event type at least :)
[18:53:35] *** Joins: Bike_ (~Glossina@71.69.170.70)
[18:54:13] *** Joins: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9)
[18:54:24] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[18:54:29] *** Bike_ is now known as Bike
[18:55:48] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:57:08] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[18:59:29] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[19:00:22] *** Quits: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[19:00:26] <VincentVega> jackdaniel: but I like HANDLE too. The sheer decisiveness of it. It's resolution, the confidence. If I had to choose a function to defy gods, that's what I would name it.
[19:02:20] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[19:08:03] *** Joins: kevingal (~quassel@2001:770:c0:401:bda5:bfea:7901:88e6)
[19:09:23] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[19:10:07] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:12:43] *** Quits: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:13:56] *** Joins: Devon (~devon@pool-108-28-150-45.washdc.fios.verizon.net)
[19:20:37] *** Joins: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9)
[19:38:33] *** Quits: jeko (~user@user/jeko) (Ping timeout: 260 seconds)
[19:47:01] *** Joins: dra (~dra@2a04:4540:640d:4500:e9b9:a87f:9f3a:35a0)
[19:47:23] *** Quits: razetime (~quassel@117.254.35.74) (Ping timeout: 250 seconds)
[19:49:21] *** Joins: jeko (~user@user/jeko)
[19:50:13] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 260 seconds)
[19:50:54] *** Joins: Psybur (~Psybur@2600:1003:b138:112:20c5:efb4:887:de9a)
[19:53:14] <Nilby> Hmm... android runs genera, but does genera run android?
[19:54:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:54:16] *** Quits: jeko (~user@user/jeko) (Ping timeout: 268 seconds)
[19:57:18] *** Joins: razetime (~quassel@117.254.35.210)
[20:04:05] *** Quits: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:04:57] *** Joins: jeosol (~jeosol@user/jeosol)
[20:07:31] *** Joins: jeko (~user@user/jeko)
[20:08:21] *** Joins: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9)
[20:10:58] *** Joins: tfb (~tfb@88.98.95.237)
[20:24:07] <dbotton> Is there a value to genera outside of historical curiosity today?
[20:24:37] <dbotton> (and of course value of reading any code)
[20:25:46] <dbotton> Like does it have a permissive license to make its code worth spending time on?
[20:29:53] <prokhor_> not atm, that's why it's bitrotting
[20:30:37] <prokhor_> but its beatiful & innovative code for sure IMHO
[20:31:34] <dbotton> I am sure, but it seems its greatest value was being part of the instigating of opensource
[20:32:16] <dbotton> but I may be misunderstanding some of its history and legal posturing
[20:32:38] <jackdaniel> afaik there is an ongoing effort to opensource it
[20:32:56] <tfb> dbotton: I don't think so.  It was fun to use and for a while it was worth using to write code for stock hardware lisps, but I think those days are gone.
[20:33:40] <tfb> by which I mean 'gone for me': may differ for others of course.
[20:33:44] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[20:33:59] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:34:37] <tfb> I think the interlisp-D environment is far more interesting in many ways as a 'there could have been another world' experience
[20:39:46] *** Joins: cage (~cage@dynamic-adsl-78-13-243-253.clienti.tiscali.it)
[20:43:46] <Guest74> hayley: parentheses resemble snakes and therefore strike fear in the average person.  The most they can handle is usually two side by side.  Anything more and you need to insert newlines. Preferably at offsets so when you scroll down the page it appears the snake is slithering off to the side.
[20:44:17] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[20:44:26] *** Joins: treflip (~user@user/treflip)
[20:44:27] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Quit: hhdave)
[20:45:25] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[20:45:50] <dbotton> Is there a simple way to make a handler-case optional? For example I want to in production handle all conditions but during dev to not do so?
[20:46:04] *** Quits: yewscion (~yewscion@72-21-196-67.amazon.com) (Ping timeout: 268 seconds)
[20:47:19] *** Quits: Psybur (~Psybur@2600:1003:b138:112:20c5:efb4:887:de9a) (Read error: Connection reset by peer)
[20:47:29] <tfb> A macro built on handler-bind is likely the answer.
[20:47:38] *** Joins: Psybur (~Psybur@2600:1003:b138:112:20c5:efb4:887:de9a)
[20:47:51] <Bike> you could do something like (deftype production-condition () (if *production* 't 'nil)) and then have your handler on (and my-error production-condition)?
[20:47:55] <dbotton> I was looking for something "standard"
[20:48:02] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:48:53] <dbotton> Most languages/compilers have a "switch"
[20:49:23] <Bike> do they? news to me
[20:49:27] <Bike> you could also use *break-on-signals*
[20:49:44] <Bike> set it to 'error or something while developing, and then as soon as ERROR is called it will drop into the debugger
[20:49:59] <Bike> clhs *break-on-signals*
[20:49:59] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/v_break_.htm
[20:50:14] <dbotton> that may do it
[20:50:24] <Bike> note that this means absolutely no handlers will be called unless you continue from the break
[20:51:03] <dbotton> May be too much
[20:51:06] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[20:51:52] <Bike> if you want some handlers to happen and others to not happen, you're asking for more than some global on off switch, no?
[20:52:37] <dbotton> The idea is more like asserts that trigger only during dev
[20:53:08] <dbotton> The issue with conditions as they are not all about exceptions
[20:53:25] <dbotton> So I guess in theory I am looking to break on error conditions
[20:53:30] <dbotton> and not on others
[20:54:36] <Bike> on, yes, i mean that's how break-on-signals work
[20:54:38] <Bike> s
[20:54:49] <Bike> i meant that handlers for errors will not happen, but other handlers will
[20:55:06] <Bike> the type you specify in *break-on-signals* is the type that invokes the break when signaled, while other conditions propagate normally
[20:55:59] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[20:59:16] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[20:59:55] <dbotton> will give a try, I also guess I could just call error while handling the condition to start the debugger.
[21:00:18] <Bike> you can invoke the debugger directly with
[21:00:20] <Bike> clhs invoke-debugger
[21:00:21] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_invoke.htm
[21:00:50] <Nilby> dbotton: something like wrapping in #-development and recompiling is most like what you're probably thinking about from ada compilers. Of course you can make a macro for it
[21:02:06] <dbotton> something like that
[21:04:09] <dbotton> I will likely just invoke the debugger based on a flag *development*, that seems easiest
[21:06:12] <tfb> dbotton: there is almost never any purpose in invoking the debugger unless you're doing it using handler-bind (or *break-on-signals* or letting error do it for you etc), because in handler-case the stack is already unwound
[21:06:22] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Quit: triffid)
[21:16:54] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 268 seconds)
[21:17:40] <dbotton> ok, if that is case I may need to create a macro using handler case when in production only
[21:24:34] <tfb> It's very easy to write something like assert/dev which checks a variable and does an assert (and hence signals an error if the assertion fails) if it's in some condition and just (say) logs a warning if it's not
[21:31:26] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[21:36:36] *** Quits: razetime (~quassel@117.254.35.210) (Ping timeout: 240 seconds)
[21:36:45] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[21:41:54] <contrapunctus> Is there an existing way to define `foo` as an alias to function `bar` in such a way that tools like eldoc display the lambda list for `bar` , and without copying the lambda list manually?
[21:44:47] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[21:46:12] <contrapunctus> hm, this looks relevant https://stackoverflow.com/questions/24252539/defining-aliases-to-standard-common-lisp-functions
[21:47:03] <contrapunctus> Hey, that works! 😀️
[21:49:01] *** Joins: treflip (~user@user/treflip)
[22:20:31] *** Quits: kevingal (~quassel@2001:770:c0:401:bda5:bfea:7901:88e6) (Ping timeout: 260 seconds)
[22:36:33] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[22:38:08] *** Joins: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de)
[22:38:09] *** Quits: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de) (Changing host)
[22:38:09] *** Joins: tane (~tane@user/tane)
[22:38:27] *** Joins: Xplorator (~Xplorator@176.166.206.65)
[22:40:44] *** Quits: Psybur (~Psybur@2600:1003:b138:112:20c5:efb4:887:de9a) (Ping timeout: 252 seconds)
[22:40:59] *** Joins: Psybur (~Psybur@75.145.205.201)
[22:45:31] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[22:47:35] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[22:52:52] *** Joins: aartaka (~aartaka@141.136.76.28)
[22:53:04] *** Quits: aartaka (~aartaka@141.136.76.28) (Read error: Connection reset by peer)
[22:53:25] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:04:07] *** Joins: tfeb (~tfb@88.98.95.237)
[23:07:50] *** Joins: infra_red[m] (~infraredm@2001:470:69fc:105::849)
[23:08:15] *** Joins: morganw (~user@80.225.24.132)
[23:12:36] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[23:15:11] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:20:17] *** Joins: simendsjo (~user@84.211.91.241)
