[00:10:11] *** Quits: letto (~letto@188.26.158.104) (Quit: Konversation terminated!)
[00:11:20] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:12:06] *** Joins: letto (~letto@188.26.158.104)
[00:14:13] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[00:18:31] <rpav> bah Qt doesn't seem to have "optional submenus"
[00:26:50] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:30:04] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[00:30:24] *** Joins: Tokamak (~Tokamak@172.58.191.87)
[00:34:19] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:41:51] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:44:10] *** rwb is now known as rb
[00:44:36] <xkoncek> yo, Anderson tree (AA tree) is really simple to implement
[00:45:24] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:48:02] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[00:50:13] <rpav> yeah and only occasionally slightly worse than RB tree
[00:50:51] <rpav> bah i can't find a good example of optional submenus on anything anymore
[00:50:52] <rb> nothing can be better than a rb tree
[00:51:14] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[00:51:15] <rpav> heh
[00:52:15] <xkoncek> it is useful when you want some fancy data structure which maintains mutliple metadata
[00:52:39] <xkoncek> altho i still havent implementer erase procedure
[00:53:58] <Plazma> RBtree's can be a bit interesting to implement and remember all of the rules
[00:54:25] <rpav> i always found them to be an annoying pita, but AA trees felt a lot simpler
[00:54:49] <rpav> i think they weren't that much simpler, just like "better mental model," but it's been awhile
[00:55:09] <Plazma> rbtrees have a lot of cases, and when you insert or delete , have additional cases
[00:55:21] <Plazma> also you can either do bottom-up or top-down
[00:55:34] <Plazma> though i think bottom-up is more common since you can do it recursively vs iteratively
[00:56:59] <Plazma> i should have did some btrees earlier this year, too since i don't know them terribly well
[00:57:08] <xkoncek> "The maintenance algorithms for a red–black tree need to consider seven different shapes" ... AA tree only two
[00:57:45] <Plazma> lot of potential rotations, re-coloring, pushing "blackness" downward, etc
[00:58:17] <xkoncek> so basically i use a vector with objects being always pushed / popped at the end, the tree is only indices on top of that vector inside the nodes
[00:58:43] <rpav> yeah though can an RB tree be simplified slightly into that?
[00:59:03] <xkoncek> of course, but still have to implement those complex procedures
[01:03:13] *** Joins: proller (~p@2a02:6b8:b081:8812::1:33)
[01:03:27] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[01:05:01] *** Joins: johnny (~johnny@user/johnny)
[01:16:14] *** Joins: markong (~kvirc@213.146.188.203)
[01:16:33] *** Joins: zyzzyxdonta (~zyzzyxdon@2a02:3036:7:5279:ff4:1db4:c08b:ca7d)
[01:17:00] *** Quits: zyzzyxdonta (~zyzzyxdon@2a02:3036:7:5279:ff4:1db4:c08b:ca7d) (Client Quit)
[01:20:38] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[01:22:29] *** Joins: pulse (~pulse@user/pulse)
[01:23:55] <RandomReader> huh, I don't think I've come across AA trees before, neat
[01:29:12] *** Joins: AmR (~AmREiSa@156.207.199.106)
[01:29:21] <rpav> RandomReader: they're in the "Introduction to Algorithms" (Cormen) book, which probably everyone in the last 30 years has a copy of somewhere
[01:32:29] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:33:03] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Read error: Connection reset by peer)
[01:33:45] <RandomReader> I'm somewhat nontraditional, my path has been mostly practical -> theoretical and on my own .. so e.g. coming across tree implementations in code, browsing around wikipedia for trees in general, searching for ways of solving X problem which might lead to a bunch of research papers on things with trees among them
[01:34:08] <RandomReader> material focused just on topic, e.g. algorithms in general, hasn't been a thing for me
[01:35:39] <rpav> ah well, i mean probably the only reason most people do is they're like "let's implement a tree .. RB tree looks hard, what's this other thing"
[01:36:41] <rpav> AA definitely seem underrated ;/ i think they're slightly worse than RB but not enough it matters a lot?
[01:37:07] <RandomReader> yeah I've certainly come across RB and AVL, I imagine the only reason I haven't seen AA before is just due to not going through guided intro material
[01:37:39] <rpav> i'm not sure you'd have seen them there, i don't recall anything ever mentioned until i was going through stuff myself
[01:37:47] <johnny> you and me both in regards to practical experience over theoretical
[01:37:56] <rb> i still need to sit down and implement an RB tree just to see how it works
[01:39:31] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:38] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:38] *** ChanServ sets mode: +v npaperbot
[01:45:46] <RandomReader> sometimes not having the theoretical is a downside .. big-O notation used to drive me nuts (it's too abstract/theoretical!) until someone finally pointed out that it's just a communication tool and so I should take a beat to learn that language
[01:46:14] <RandomReader> would have made absorbing some of those research papers a little easier if I had done that sooner
[01:47:04] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:49:08] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:50:30] <johnny> indeed
[01:53:26] *** Quits: c4017w_ (~c4017@209.52.68.8) (Quit: Leaving)
[01:56:29] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8)
[01:58:00] <xkoncek> RB has the unique propertyy that at most one rotation happens per insert/delete operation
[01:58:45] <xkoncek> and i think, loosely speaking that RB trees are the least balanced (on theoretical bounds) while still being balanced tree
[02:12:29] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[02:16:13] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[02:22:04] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[02:25:01] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:27:18] *** Joins: c4017w (~c4017@209.52.68.8)
[02:31:22] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:33:25] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:35:55] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[02:41:26] <paule32> hello
[02:43:31] <paule32> how can i create a linked list hiarachy in the form, that when i have a given number (id), and it is changed, the structure should be go back to higher level value, and add list elements to the strzuctur like:
[02:43:35] <paule32> -- root
[02:43:43] <paule32> -- node1
[02:43:48] <paule32> -- node2
[02:43:53] <paule32> --- node21
[02:43:58] <paule32> -- node3
[02:44:19] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[02:44:42] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:46:46] *** BucetaRosa is now known as BurumaSerafuku
[02:48:27] <BurumaSerafuku> nice assignment
[02:48:45] <BurumaSerafuku> a lot of words to describe a tree
[02:50:49] <paule32> i using borland product
[02:50:54] <paule32> TTreeView
[02:51:02] <paule32> can you help
[02:53:58] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:57:02] <BurumaSerafuku> please put the complete description of the assignment in a paste site
[02:57:18] <KombuchaKip> kalven & RandomReader: I think I managed to find it. Some DSP related data was being stored in millions of shared_ptrs which were supposed to be ephemeral for only a second or two before being discarded. But some code was adding to the reference count which didn't destruct until the application shut down. The way I found it was I made the application really bloated with client requests over night. Next morning I sent the process a S
[02:57:18] <KombuchaKip> IGINT to initiate exit. I noticed it took about an hour to do this, which is absurd. I attached via gdb and saw stupid shit being destructed which shouldn't have even existed then. I *think* this was the problem, but there could be other space leaks.
[02:57:48] <BurumaSerafuku> ew shared_ptrs
[02:58:52] <KombuchaKip> BurumaSerafuku: Sometimes I think it's easier to not use them and duplicate some objects on the stack. The danger of the shared_ptr is that if the reference count is accidentally held > 0, then valgrind and all the other memory leak detection tools will never find it.
[02:59:29] <BurumaSerafuku> shared_ptrs are often abused and misunderstood
[03:00:06] <BurumaSerafuku> lazy designers easily resort to them, and then... no one knows anymore who owns what
[03:01:21] * KombuchaKip nods
[03:02:25] <kalven> BurumaSerafuku: can you stop changing nicks again? thanks
[03:02:59] *** Quits: Tokamak (~Tokamak@172.58.191.87) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:03:20] <paule32> BurumaSerafuku: https://dpaste.com/FXGYDQLBX
[03:03:27] <paule32> this is the actual code
[03:03:42] <paule32> like you can see, i put all child windows into a list
[03:03:50] <paule32> but i would like a treeview
[03:14:05] *** Joins: ferdna (~ferdna@user/ferdna)
[03:17:11] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[03:18:36] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-74e9-183f-a719-d99e.inf6.spectrum.com)
[03:18:49] <RandomReader> KombuchaKip - ah, so the thread-related cleanup association was just coincidence of timing? makes sense why that kept changing on you
[03:19:53] *** Joins: johnny (~johnny@user/johnny)
[03:21:22] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:74e9:183f:a719:d99e) (Ping timeout: 260 seconds)
[03:21:39] <KombuchaKip> RandomReader: I think so. One thing I am certain of is memory consumption now is only 58 % what it was before, but more testing needed.
[03:25:21] <KombuchaKip> New question. I am using g++-11 (11.1.0). I am trying to compile some code containing a class of type foo. The foo class contains an attribute with alignas(64) specifier for some AVX / cache line benefits. There was also another attribute declared after it which had no explicit alignment, but due to some algorithm refactoring, I removed it. The code works fine, but g++ is now giving me a "note" (not a warning or error) that "the ABI
[03:25:21] <KombuchaKip>  for passing parameters with 64-byte alignment has changed" on a std::reduce() line which uses objects of type foo. Should I be worried, suppress this note, or change some code? https://github.com/gcc-mirror/gcc/blob/master/gcc/config/i386/i386.c#L3574
[03:32:07] *** Quits: gelignite (~gelignite@55d41c14.access.ecotel.net) (Quit: Stay safe!)
[03:32:53] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[03:36:03] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[03:36:26] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[03:45:21] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:48:37] *** Joins: jkaye (~jkaye@2601:281:8300:7530:e7c5:c36d:91ad:b90f)
[03:52:47] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[04:09:04] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:12:47] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:13:51] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[04:15:39] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[04:17:02] *** Quits: proller (~p@2a02:6b8:b081:8812::1:33) (Ping timeout: 240 seconds)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:29:56] *** Joins: proller (~p@80.240.216.69)
[04:35:41] *** Joins: BigDru (~BigDru@cpeac202e794c73-cmac202e794c70.cpe.net.fido.ca)
[04:36:17] <BigDru> Hi I'm lookin for a library that will help me create a jpg image of specific size and rasterize some text on that image.. any recommendations?
[04:37:25] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9067:6b49:7f00:dbc9) (Ping timeout: 240 seconds)
[04:38:11] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:38:28] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a88a:8fbe:65f1:ffcb)
[04:54:15] *** Quits: adeliktas (~adeliktas@2001:16b8:22fb:2900:ff0b:f7a9:2da3:70c4) (Quit: Client closed)
[04:54:36] *** Joins: adeliktas (~adeliktas@2001:16b8:22fb:2900:ff0b:f7a9:2da3:70c4)
[04:58:03] <Alipha> KombuchaKip: how many times did I say shared_ptr was probably the problem? :-p
[04:59:22] <KombuchaKip> Alipha: lol, indeed. Well, to be fair, it wasn't the problem. *I* was the problem in accidentally leaving a reference around. So all these control blocks and their shared_ptrs were squatting long after I thought they checked out.
[05:00:11] <KombuchaKip> Alipha: But there does appear to be a smaller space leak still which I think is related to the WorkQueueManager. Some memory does appear to be cleaned up after the consumer threads exit. I'd like to investigate further.
[05:00:51] <KombuchaKip> BigDru: Try libmagick++-dev
[05:03:51] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[05:04:16] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:04:17] <KombuchaKip> Alipha: Valgrind and the other related tools need some help with shared_ptr because smart pointers can still do dumb things.
[05:05:49] <BigDru> Thanks I'll give it a look
[05:08:05] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:12:39] <Alipha> KombuchaKip: and no, don't worry about the ABI warning, unless you're passing that foo object to a library that may be compiled with a different version of gcc. I generally just use -Wno-abi
[05:12:58] * KombuchaKip nods
[05:15:46] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8) (Quit: Quit)
[05:16:10] <KombuchaKip> Alipha: The only workaround I can think of is to replace each consumer thread after its done execution the user's std::function. But that kind of defeats the whole purpose of having a thread pool in the first place.
[05:18:25] <Alipha> KombuchaKip: should you try it to even see if that's the problem?
[05:19:49] <KombuchaKip> Alipha: There's definitely space lingering after a consumer thread finished executing the function and it has gone out of scope.
[05:32:05] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[05:37:20] <BurumaSerafuku> consume or die
[05:37:36] <KombuchaKip> Alipha: Is there a way to set a breakpoint on delete / free, but only if hit within the current thread context?
[05:37:55] * BurumaSerafuku is proud of never having to use valgrind :)
[05:38:59] <KombuchaKip> Alipha: Looks like you can. https://sourceware.org/gdb/onlinedocs/gdb/Thread_002dSpecific-Breakpoints.html
[05:39:31] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:38] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:38] *** ChanServ sets mode: +v npaperbot
[05:55:48] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:55:49] *** Joins: Guest64873 (~bot@172-220-180-248.res.spectrum.com)
[05:56:01] *** Parts: Guest64873 (~bot@172-220-180-248.res.spectrum.com) ()
[06:00:43] <KombuchaKip> RandomReader: The memory is being cleaned up some time before the consumer thread can call free / delete on anything. This is so weird.
[06:03:02] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[06:04:11] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 252 seconds)
[06:05:22] *** Joins: ferdna (~ferdna@user/ferdna)
[06:07:39] <KombuchaKip> RandomReader: Actually possibly not.
[06:10:03] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-b584-44f5-72b6-6bbf.inf6.spectrum.com)
[06:13:23] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-74e9-183f-a719-d99e.inf6.spectrum.com) (Ping timeout: 250 seconds)
[06:22:03] <Alipha> KombuchaKip: I'm slightly tempted to write a drop-in shared_ptr replacement that could detect circular dependencies
[06:22:32] <KombuchaKip> Alipha: I think more helpful would be to patch valgrind, ThreadSanitizer, etc.
[06:22:42] <hnOsmium0001[m]> This hits hard. Especailly when dealing with mountains of duck typed template types...
[06:22:42] <hnOsmium0001[m]> https://devblogs.microsoft.com/oldnewthing/20211208-00/?p=106012#comment-138662
[06:22:42] <hnOsmium0001[m]> > C++ is actually a weakly typed functional scripting language with an EDSL for generating native machine code.
[06:24:17] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[06:25:56] <smallville7123> ok im starting to get somewhere :)       GLSL preprocessor function expansion:1:6: macro "foo" requires 2 arguments, but only 1 given
[06:25:57] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[06:26:38] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 260 seconds)
[06:26:46] *** scoobydoob is now known as scoobydoo
[06:27:38] *** Joins: EdFletcher (~PKD@user/edfletcher)
[06:30:30] *** Quits: EdFletcher (~PKD@user/edfletcher) (Client Quit)
[06:30:46] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[06:31:53] *** Joins: EdFletcher (~PKD@user/edfletcher)
[06:34:59] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (Ping timeout: 252 seconds)
[06:36:11] *** Joins: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt)
[06:37:06] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf)
[06:39:11] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:39:32] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-b584-44f5-72b6-6bbf.inf6.spectrum.com) (Ping timeout: 240 seconds)
[06:40:02] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:43:32] *** Joins: adeliktas13 (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514)
[06:45:24] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[06:47:09] *** Quits: adeliktas (~adeliktas@2001:16b8:22fb:2900:ff0b:f7a9:2da3:70c4) (Ping timeout: 256 seconds)
[06:56:59] *** Quits: jkaye (~jkaye@2601:281:8300:7530:e7c5:c36d:91ad:b90f) (Ping timeout: 252 seconds)
[06:59:17] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf)
[07:01:29] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf) (Ping timeout: 250 seconds)
[07:02:10] *** vinleod is now known as vdamewood
[07:04:36] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf)
[07:05:47] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf) (Ping timeout: 252 seconds)
[07:17:02] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (Ping timeout: 260 seconds)
[07:39:28] <smallville7123> function arguments for a macro are parsed differently than function arguments for a C function, right?  eg      printf "#define foo(bar) bar()\nfoo()\nfoo(bar)\nfoo(int main)" | gcc -E -
[07:40:30] <smallville7123> also is foo() expanded because no arguments counts as an empty argument ?
[08:02:25] *** Quits: darkstarx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[08:02:32] *** Joins: aniketgm (~Aniket@49.36.111.159)
[08:07:18] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[08:08:31] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[08:08:33] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[08:08:51] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 252 seconds)
[08:08:58] *** scoobydoob is now known as scoobydoo
[08:08:59] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[08:11:49] *** Joins: Burgundy (~yomon@79.115.213.171)
[08:12:49] <smallville7123> my head hurts ;-;
[08:13:22] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[08:18:26] *** Joins: frost (~frost@user/frost)
[08:18:37] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 250 seconds)
[08:23:35] *** Joins: johnny (~johnny@user/johnny)
[08:27:05] *** Quits: ravan (~ravan@user/ravan) (Read error: No route to host)
[08:31:17] *** Quits: cbreak_ (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[08:32:09] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[08:39:23] *** Joins: ravan (~ravan@user/ravan)
[08:50:29] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[08:52:46] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[08:53:36] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[08:54:03] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[08:57:09] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:58:23] *** Quits: BigDru (~BigDru@cpeac202e794c73-cmac202e794c70.cpe.net.fido.ca) (Quit: Leaving)
[09:02:53] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[09:03:16] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:04:25] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[09:19:31] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[09:20:26] *** Joins: mli (~mli@user/mli)
[09:22:19] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[09:28:17] *** Quits: mli (~mli@user/mli) (Quit: Leaving)
[09:33:33] <kalven> smallville7123: are you implementing the c macro system?
[09:39:32] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:39] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:39] *** ChanServ sets mode: +v npaperbot
[09:58:57] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[09:59:08] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:59:55] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[10:00:21] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[10:09:23] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[10:09:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:11:21] *** Joins: nicko (~iClass@222.211.30.64)
[10:29:55] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:39:13] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:55:16] *** Quits: Itaru (~Itaru@ro2.flokinet.is) (Remote host closed the connection)
[10:55:55] *** Joins: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs)
[10:59:09] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[10:59:53] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[10:59:58] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: Lost terminal)
[11:00:02] *** Quits: nicko (~iClass@222.211.30.64) (Quit: Konversation terminated!)
[11:01:59] *** Quits: aniketgm (~Aniket@49.36.111.159) (Read error: No route to host)
[11:04:17] *** Joins: EdFletcher (~PKD@user/edfletcher)
[11:05:07] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[11:05:59] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[11:06:46] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[11:11:24] *** Quits: malloy (~jimery@116.30.222.36) (Read error: Connection reset by peer)
[11:11:35] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[11:17:15] *** Joins: limubs (~limubs@cgn-89-0-53-192.nc.de)
[11:17:16] *** Joins: malloy (~jimery@116.30.221.255)
[11:18:22] *** Joins: aniketgm (~Aniket@49.36.111.159)
[11:20:25] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 250 seconds)
[11:20:48] *** Joins: cq-work (~Z_Lund@user/cq-work)
[11:21:06] *** Quits: aniketgm (~Aniket@49.36.111.159) (Client Quit)
[11:27:05] *** Quits: nshire (~nshire@user/nshire) (Quit: Leaving)
[11:32:39] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[11:33:05] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a88a:8fbe:65f1:ffcb) (Ping timeout: 252 seconds)
[11:37:57] *** Quits: shad0w (~shad0w@user/xshadow) (Ping timeout: 256 seconds)
[11:39:19] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[11:40:34] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:40:41] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[11:41:21] *** Joins: nshire (~nshire@user/nshire)
[11:43:18] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b4e0:3e21:5ab4:62c2)
[11:43:18] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b4e0:3e21:5ab4:62c2) (Changing host)
[11:43:18] *** Joins: skapata (~Skapata@user/skapata)
[11:43:32] *** adeliktas13 is now known as adeliktas
[12:00:23] *** Joins: shad0w (~shad0w@user/xshadow)
[12:03:07] <xkoncek> does goto somewhere outside of a for loop execute its third statement?
[12:04:11] <xkoncek> {int i = 0; for (; true; ++i) {goto label;} label:; cout << i;}
[12:04:12] <geordi> 0
[12:04:41] <TinoDidriksen> Would be weird if it did.
[12:05:31] <xkoncek> Java did one thing right: named loops
[12:07:52] <TinoDidriksen> Or "break N"
[12:08:57] <TinoDidriksen> geordi --version
[12:08:58] <geordi> GCC 12.0.0 20211202 (experimental)
[12:12:57] <fiesh> Alipha: how would you do that without reflection?
[12:15:32] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 268 seconds)
[12:19:35] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:21:07] *** Quits: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs) (Ping timeout: 252 seconds)
[12:24:49] *** Joins: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs)
[12:26:12] *** Joins: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt)
[12:27:37] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[12:28:22] *** Joins: seninha (~seninha@user/seninha)
[12:30:57] *** Joins: andreasbuhr (~quassel@p549db4c8.dip0.t-ipconnect.de)
[12:31:09] *** Quits: andreasbuhr (~quassel@p549db4c8.dip0.t-ipconnect.de) (Client Quit)
[12:31:45] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[12:31:59] *** Joins: robod34 (Username@79.113.195.239)
[12:32:11] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184)
[12:32:14] <Ronalds_Mazitis_> https://github.com/eezstreet/OpenD2
[12:32:20] <Ronalds_Mazitis_> I am compiling this for linux
[12:32:28] <Ronalds_Mazitis_> fatal error: Windows.h: No such file or directory
[12:32:38] <Ronalds_Mazitis_> why would they do this
[12:32:55] *** Quits: pa (~pah@user/pah) (Ping timeout: 256 seconds)
[12:33:31] *** Joins: Simplar (~Simplar@188.163.93.76)
[12:33:41] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[12:34:03] <RandomReader> ask them?
[12:34:30] <TinoDidriksen> Sure you're following the instructions?
[12:36:48] *** Joins: pah (~pah@user/pah)
[12:37:16] <Ronalds_Mazitis_> yeah
[12:38:07] <Haohmaru> oh boy, diablo 2
[12:38:17] <Haohmaru> <mouse_clicking_intensifies.wav>
[12:38:37] <Ronalds_Mazitis_> :D
[12:40:00] <TinoDidriksen> Ronalds_Mazitis_, file a bug for https://github.com/eezstreet/OpenD2/blob/master/Engine/Bitmap.cpp#L2
[12:40:28] <TinoDidriksen> Clearly the authors don't test that it builds on Linux.
[12:45:38] <Ronalds_Mazitis_> ok
[12:48:02] <Ronalds_Mazitis_> https://github.com/eezstreet/OpenD2/issues/45
[12:50:26] <Haohmaru> what are they even using from crapdows.h in that file?
[12:50:34] <CoderCharmander> It doesn't even look like it needs that header, at least not there
[12:51:18] <Haohmaru> and maybe same question for stdio.h
[12:51:35] *** Quits: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[12:54:15] <ville> The windows header is "windows.h" anyway, not "Windows.h", but windows not being too picky with capital letters. there's a chance it may have meant their own Window.hpp
[12:59:16] <TinoDidriksen> geordi --version
[12:59:18] <geordi> GCC 12.0.0 20211215 (experimental)
[13:04:37] <TinoDidriksen> That is quite an anemic bug report. You need to mention what's wrong with that line.
[13:05:04] <Ronalds_Mazitis_> it's in the title
[13:05:04] <CoderCharmander> I think someone else already submitter
[13:05:09] <CoderCharmander> *d
[13:05:12] <CoderCharmander> a report
[13:05:39] <CoderCharmander> https://github.com/eezstreet/OpenD2/issues/44#issuecomment-825802233
[13:06:21] <Ronalds_Mazitis_> yeah
[13:11:18] *** Joins: plastico (~plastico@neomutt/plastico)
[13:16:16] *** Joins: aniketgm (~Aniket@49.36.109.129)
[13:20:02] <LordKalma> what's up?
[13:20:16] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:20:40] <LordKalma> hahaha that eezstreet/OpenD2/issues/45 is NOT how you write a bug report
[13:20:45] *** pah is now known as pa
[13:21:35] <Ronalds_Mazitis_> well shit
[13:21:39] <Ronalds_Mazitis_> my bad
[13:22:40] <LordKalma> You have to: 1) describe the bug, 2) describe your environment, 3) describe what you did that triggered the error, 4) What you expected to happen, 5) what you already figured out about the error
[13:23:06] <TinoDidriksen> Or if you're really flexing, fix it an open a PR.
[13:23:16] <LordKalma> and in this case it doesn't apply, because we're talking about building the library
[13:23:30] <LordKalma> but when you report a usage bug, always ship a reproducing package
[13:23:40] <LordKalma> humble brag: https://github.com/quasarframework/quasar/issues/11636
[13:23:50] <LordKalma> a good issue imho, followed by PR :p
[13:24:35] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 268 seconds)
[13:25:40] <LordKalma> https://bugreports.qt.io/projects/QTCREATORBUG/issues/QTCREATORBUG-25847
[13:25:53] <LordKalma> in this one I only gave them the reproducing project in the comments, my bad
[13:26:00] <LordKalma> but after that they fixed in it 24h
[13:26:12] <LordKalma> which is light speed in Qt terms haha
[13:26:20] <Ronalds_Mazitis_> I am already downloading windows 10 iso , so I could try compiling on windows
[13:27:01] <Ronalds_Mazitis_> my note was good enough, wasting no time lmao, doing this for people who will use windows anyway
[13:27:32] *** Joins: slavfox (~slavfox@93.158.232.111)
[13:28:19] <LordKalma> you don't waste your time, expecting library devs to waste theirs?
[13:28:25] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[13:28:26] <LordKalma> that's not how anything works
[13:28:30] <LordKalma> disrespectful, even
[13:30:34] *** Joins: andreasbuhr (~quassel@p549db4c8.dip0.t-ipconnect.de)
[13:31:31] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:32:24] <PJBoy> yo it's my boy
[13:34:15] <riksteri> ville: about the windows.h capitalisation, has that been changed at some point in Windows? I get compiler warnings "does not match filename on disk" if I don't capitalise the w. But it's been years since I updated my SDKs and tools.
[13:34:49] <PJBoy> AFAIK it's always been Windows.h
[13:34:51] <LordKalma> !fact
[13:34:52] <nolyc> LordKalma: Types describe objects, references, or functions.
[13:35:03] <Ronalds_Mazitis_> baby sit developers who wasted time right
[13:35:27] <LordKalma> oh shut up, fucking disrepect for open source devs
[13:35:32] <LordKalma> they are not your fucking slaves
[13:35:45] <LordKalma> help them help you or pay them.
[13:36:01] <Ronalds_Mazitis_> dude I don't believe in this virtual bullshit
[13:36:03] <Ronalds_Mazitis_> ever
[13:36:12] <ville> riksteri: apparenlty it varies with whatever you installed and what point in time
[13:36:29] <aniketgm> !calm down
[13:36:30] <nolyc> aniketgm: Error: "calm" is not a valid command.
[13:36:30] <TinoDidriksen> How is "virtual" relevant here?
[13:36:43] <Ronalds_Mazitis_> sitting on my ass because whole world can't make it up to me
[13:36:47] <Ronalds_Mazitis_> is stupid
[13:37:29] <TinoDidriksen> You could just fix the code.
[13:38:18] <Ronalds_Mazitis_> or I could download and compile on windows, and give the files to people that will need windows version anyway
[13:38:50] <ville> riksteri: but it seems indeed Windows.h would be the recent spelling. my information on this is out-of-date by decade or two
[13:38:59] *** Joins: BluesBoy (~bboy@user/bluesboy)
[13:39:32] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:39] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[13:39:41] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:41] *** ChanServ sets mode: +v npaperbot
[13:39:50] <LordKalma> windows.h is the source of too many bugs
[13:39:57] <ville> PJBoy: if you go back far enough you can even find WINDOWS.H
[13:40:05] <LordKalma> libraries that leak it into public headers, libraries that don't spell it right
[13:40:47] <PJBoy> oh true, shout outs to 8.3 loud filenames
[13:41:21] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Remote host closed the connection)
[13:41:31] <LordKalma> today is vscode update day
[13:42:26] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:42:42] <LordKalma> two security updates... fascinating
[13:43:02] <ville> they realized they had copy pasted log4j's code
[13:43:20] <LordKalma> I'm out of the loop on that log4j thing
[13:43:31] <LordKalma> how does a logging library enable security exploits?
[13:44:31] <Ronalds_Mazitis_> I remember java apps on old erricsons being able to hack bluetooth like nothing
[13:44:46] <Ronalds_Mazitis_> we could literaly do anything with any nearby phone
[13:44:50] <Ronalds_Mazitis_> without even asking
[13:44:53] <Ronalds_Mazitis_> if they had it
[13:45:12] <Ronalds_Mazitis_> shut it down, take files, send files, start calling
[13:45:20] <ville> they accepted strings from the outside and ran an interpreter on them, one of the actions the interpreter was to contact an URL in such input string
[13:45:23] <TinoDidriksen> Log4j parsed strings to be logged, and loaded and executed remote code if a specific string was sent.
[13:45:23] <Ronalds_Mazitis_> no wonder 2021 it's still security
[13:45:49] <LordKalma> wow... smart
[13:45:51] <PJBoy> someone ran doom with that exploit already
[13:45:57] <PJBoy> because nerds
[13:46:14] <LordKalma> that reminds me when i saw a defcon talk about getting a *car* in debug mode with the FM RDS
[13:46:17] <LordKalma> fucking RDS
[13:46:30] <PJBoy> https://twitter.com/gegy1000/status/1469714451716882434 <-- doom
[13:46:31] <LordKalma> who the hell codes RDS in a way it can talk to the car?!
[13:47:18] <PJBoy> Richard Darth Stallman?
[13:47:23] <ville> LordKalma: saves time, don't have to go sticking wires into a debug port
[13:47:41] <LordKalma> PJBoy, radio data system
[13:47:47] <LordKalma> it's the thing that shows the station name
[13:47:54] <LordKalma> those 8 chars on the radio display
[13:47:57] <PJBoy> ahh
[13:48:01] <LordKalma> but the system is much more complicated than that
[13:48:12] <LordKalma> it has two (A and B) "free" messages
[13:48:19] <LordKalma> Usually the song name on more advanced radios
[13:48:35] <LordKalma> station PID, alternative freqs, traffic information flag
[13:48:37] <LordKalma> and loads more
[13:48:47] <ville> of course it is. it has to be "future proof". everybody knows that's just good design...
[13:49:02] <LordKalma> and apparently they managed to put a car in debug mode and control it via RDS
[13:49:20] <LordKalma> https://rdsspy.com/
[13:49:31] <LordKalma> I've used this piece of software quite a bit that's why I know RDS quite well
[13:50:09] <LordKalma> once, thanks to very rare propagation phenomena I listened to a german FM station from my house. Quite fun
[13:51:50] <LordKalma> ville, nah, it does pretty much what you'd expect
[14:00:31] *** Quits: aniketgm (~Aniket@49.36.109.129) (Read error: Connection reset by peer)
[14:14:47] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:24:39] <ville> yes 2 free form messages isn't that bad
[14:25:12] <ville> howevery why 2 and not just 1 if it is free form
[14:25:25] *** Joins: chris64 (~chris@user/chris64)
[14:25:56] *** Quits: chris64 (~chris@user/chris64) (Client Quit)
[14:28:53] <ville> anyone have the tl;dr on the new hdmi 2.1 story? one version of it seems like product can claim 2.1 but not implement anything that distingushes it from 2.0?
[14:29:14] <ville> distinguishes
[14:36:02] <PJBoy> unhelpful answer: still not as good as DVI
[14:38:14] *** Joins: aniketgm (~Aniket@49.36.109.129)
[14:41:39] <fiesh> yeah hdmi is the crap version of displayport
[14:45:23] <Haohmaru> maybe the real update is really only just in the DRM
[14:45:38] <Haohmaru> (that's the important bit)
[14:45:50] <PJBoy> maybe the real treasure is the digital rights we managed on the way?
[14:47:15] <Haohmaru> did we?
[14:47:15] <LordKalma> ville, it's a very low baud rate system
[14:47:23] <LordKalma> you can basically tx the B message while you're displaying A
[14:47:28] <LordKalma> and then tell the system to swtich
[14:47:30] <LordKalma> *switch
[14:49:01] <ville> that's just matter of buffering then until a message received is complete. seems silly that double buffering is baked into the spec
[14:49:19] <LordKalma> because the system is very low baud rate and has to send the various crap the protocol includes you can literally have to wait like 3 seconds to get the 8 chars of the radio station
[14:49:36] <LordKalma> the system also doesn't exactly have the notion of complete, since it's broadcasting
[14:49:45] <LordKalma> you sometimes get the second half of a message
[14:52:50] <LordKalma> the protocol works by periodically changing what it is transmitting
[14:53:07] <LordKalma> and "important" things like the station 8-char identifier is repeated much more often
[14:53:25] <LordKalma> making a full message for either the A or B slots sometimes takes over 30 seconds
[14:53:53] <LordKalma> and sometimes stations transmit both and then switch them periodically, like one with the radio's motto, the other one with the current song
[14:54:02] <LordKalma> it's not necessarily a double buffer
[14:54:27] <PJBoy> should switch to HDMI for that spec
[14:55:27] <PJBoy> hackers won't be able to steal cars with it, 'cause it'll turn out they're using a broken HDMI cable
[14:55:30] <PJBoy> every, single, time
[14:56:42] <LordKalma> is it only my impression, or is the HDMI standard a meme at this point?
[14:57:06] *** Joins: pulse (~pulse@user/pulse)
[14:58:59] <PJBoy> is there a better website than https://zed0.co.uk/clang-format-configurator/ for what it does?
[14:59:07] <PJBoy> or perhaps some kind of offline tool
[14:59:22] <LordKalma> qt creator does have a previewer
[14:59:40] <LordKalma> but for some reason doesn't have BasedOnStyle: Microsoft
[14:59:50] <PJBoy> as an aside: whoever wrote that site is a dickhead for making it 50% light 50% dark
[15:00:21] <LordKalma> that seems to be a bootstrap website made in 30 minutes
[15:00:25] <PJBoy> hm, not quite willing to get qt creator for that
[15:00:29] <PJBoy> yeah probably
[15:00:37] <LordKalma> with whatever editor component they found
[15:00:39] * PJBoy looks at github link
[15:01:09] <PJBoy> correct
[15:01:33] <PJBoy> it has google analytics too
[15:02:11] <LordKalma> wow not even a node project
[15:02:17] <LordKalma> literally just index.html haha
[15:02:29] <PJBoy> it lists node.js as a dependency
[15:02:40] <PJBoy> for the server side
[15:03:00] <LordKalma> maybe becayse that configurator.js
[15:03:08] *** Joins: RazielZ (~Raziel@user/raziel)
[15:04:07] <LordKalma> a node.js project without a package.json is evil af
[15:04:24] <PJBoy> dang Microsoft is a pretty good preset
[15:04:33] <LordKalma> why do you think I use it=
[15:04:51] <PJBoy> I naturally assume no one has the same taste as me
[15:04:55] <LordKalma> doo notice line 30 though
[15:05:00] <LordKalma> it's something MS style does
[15:05:05] <LordKalma>                                    const std::map<std::string, int32_t> &LongNameForParameter4)
[15:05:11] <LordKalma> multiple inits per line
[15:05:13] <PJBoy> the & token?
[15:05:18] <PJBoy> oh
[15:05:23] <PJBoy> what do you mean?
[15:05:38] <PJBoy> oh you mean line 28 has multiple parameters?
[15:05:39] <LordKalma> nevermind, the example doesn't show it, lemme grab a code of mine
[15:05:50] <PJBoy> 'cause that's not my ideal either usually
[15:05:50] <LordKalma> a sec
[15:06:51] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 252 seconds)
[15:07:03] <LordKalma> https://bpa.st/MPTA5USBMP5XYBQOYTWTGGCOOA
[15:07:04] <LordKalma> this
[15:07:10] <LordKalma> line 9 for example
[15:07:16] <LordKalma> it uses multiple inits in the same line
[15:07:30] <PJBoy> mm
[15:07:44] <LordKalma> I didn't change it
[15:07:46] <PJBoy> this is where I get a little iffy about formatters
[15:07:51] <LordKalma> but it's not to every one's likings
[15:08:02] <PJBoy> 'cause I think sometimes it makes sense to put multiple inits on a line, if the variables are semantically related
[15:08:13] <PJBoy> like,say, x and y positions
[15:08:28] <PJBoy> but a formatter could never know that
[15:09:01] <PJBoy> wow using a magic number
[15:09:19] <PJBoy> and using NOLINT instead of just writing the const
[15:09:21] <PJBoy> tsk tsk
[15:09:27] <LordKalma> ahhahah
[15:09:54] <PJBoy> clang-tidy needs to be sassier like that
[15:10:06] <LordKalma> especially since the next 3 variables literally do have an init variable
[15:10:52] <PJBoy> does that class inherit from `enabled_shared_from_this`?
[15:11:01] <PJBoy> oh wait nvm
[15:11:33] *** Joins: markong (~kvirc@213.146.188.203)
[15:11:34] <PJBoy> I saw `new` and `this` in the same expression, and my brain short circuited
[15:13:07] <LordKalma> you embody the meme of "fgive them 10 lines and they find 33 issues. give them 1000 lines and it "looks good""
[15:13:18] <PJBoy> ahahahahaha
[15:13:25] <PJBoy> fuck
[15:13:29] <PJBoy> you got me
[15:13:42] <PJBoy> I've never seen that meme though, but I feel it
[15:14:23] <LordKalma> https://www.reddit.com/r/ProgrammerHumor/comments/m1e2sh/what_about_5000/
[15:14:33] <PJBoy> oh yeah I uh
[15:14:40] <PJBoy> unsubed from that subreddit a while back
[15:19:02] <PJBoy> bah, clang-format has nothing to enforce name case conventions
[15:19:12] <LordKalma> tidy does
[15:19:15] <PJBoy> or member name prefices
[15:19:23] <LordKalma> yeah, it's tidy for that
[15:19:30] * PJBoy double checks
[15:19:49] <LordKalma> https://github.com/ruilvo/aether_dsp/blob/master/.clang-tidy#L5
[15:20:12] <PJBoy> ahah
[15:20:17] <PJBoy> awesome
[15:20:23] <LordKalma> we literally discussed this yesterday
[15:20:30] <LordKalma> and how it did have some dumb names I didn't understand
[15:20:35] <PJBoy> yesterday was a long day
[15:21:01] <LordKalma> vscode has a "editor.codeActionsOnSave": {"source.fixAll": true} setting
[15:21:09] <LordKalma> I wonder if running tidy could be added as a code action
[15:21:26] <PJBoy> there's so many optios ;_;
[15:21:51] <LordKalma> I mean with the --fix argument
[15:22:04] <PJBoy> yeah I know what ya mean
[15:22:08] <LordKalma> https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html#options
[15:22:16] <PJBoy> I wouldn't ever ever run --fix like that though
[15:22:23] <LordKalma> yeah, I'm afraid of it
[15:22:48] <LordKalma> and as I said yesterday, for some read .MemberSuffix works but .ClassMemberSuffix didn't
[15:22:50] <LordKalma> so whatever
[15:22:56] <LordKalma> but yeah, tidy can indeed check casing
[15:23:15] <PJBoy> I still find that weird
[15:23:17] <PJBoy> like
[15:23:18] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[15:23:46] <PJBoy> there needs to be a clang-tidy readability-identifier-naming page a la that clang-format configurator page
[15:24:18] <LordKalma> hahaha indeed
[15:24:22] <LordKalma> there you go
[15:24:28] <LordKalma> xmas vacation project for you
[15:24:34] <PJBoy> as if I needed one
[15:24:57] <PJBoy> I'd be sorely tempted if I didn't hate webdev so much
[15:25:19] <LordKalma> I actually been "enjoying" using quasar
[15:25:29] <LordKalma> the only problem is the fact that I'm outdated every 3 hours
[15:25:42] <PJBoy> even the mere mention of a web framework makes my skin crawl
[15:25:48] <LordKalma> https://github.com/ruilvo/radioamadorismo-website/tree/master/frontend
[15:26:39] <LordKalma> mobile friendly, even: https://i.gyazo.com/bc24368319d06b7f322639e0673446f5.mp4
[15:26:53] <xkoncek> i really wish equal_range return value would be changed from a pair to std::ranges::subrange<...>
[15:27:04] <PJBoy> does it support swipe to open though?
[15:27:13] <xkoncek> which would allow to iterate over it
[15:27:17] <PJBoy> that thing you'd think would be pretty easy, but actually is damn near impossible
[15:27:26] <LordKalma> yes
[15:27:55] <PJBoy> MDN tells me that touch events should be emulated by mouse events
[15:27:57] <LordKalma> https://quasar.dev/layout/drawer#qdrawer-api
[15:28:01] <PJBoy> but it's just not true at all
[15:28:07] <LordKalma> no-swipe-open
[15:28:07] <LordKalma> : Boolean Disables the default behavior where drawer can be swiped into view; Useful for iOS platforms where it might interfere with Safari's 'swipe to go to previous/next page' feature
[15:28:19] <PJBoy> that's good
[15:28:20] <LordKalma> so it even does it by default on that framework :p
[15:28:39] <LordKalma> that framework is quite a bit opinionated and i took a while to put it as I want to
[15:28:45] <LordKalma> but it's being enjoyable to use it after that
[15:29:17] <PJBoy> I'm happy for you
[15:29:20] <PJBoy> but I'm still revolted
[15:29:32] <LordKalma> if you have docker tyou can try my repo
[15:29:41] <PJBoy> also > qdrawer
[15:29:42] <LordKalma> heck tyou only even need node to try the frontend
[15:29:46] <PJBoy> is this a Qt subframework?
[15:29:50] <LordKalma> hahah no
[15:30:01] <LordKalma> I think the dude might not have been aware the Q prefix was taken :p
[15:30:54] <LordKalma> anyway, if you have node, you can just `npm install; npm run dev;` on the frontend dir
[15:31:08] <PJBoy> I'm good
[15:31:10] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[15:31:25] <PJBoy> xkoncek, it does
[15:32:37] <PJBoy> << TYPE<decltype(x)>; vector v{1, 2, 3, 4}; auto x = ranges::equal_range(v, 2);
[15:32:37] <geordi> ranges::subrange<_Safe_iterator<vector<int>::iterator, vector<int>, random_access_iterator_tag>, _Safe_iterator<vector<int>::iterator, vector<int>, random_access_iterator_tag>, ranges::subrange_kind::sized>
[15:34:27] <PJBoy> { for (int x : ranges::equal_range(v, 1, {}, [](int x) { return x / 2; })) cout << x, ""; } vector v{1, 2, 3, 4};
[15:34:28] <geordi> 2, 3,
[15:37:51] *** Joins: DSpider (~DSpider@82.79.237.57)
[15:45:00] <PJBoy> you know
[15:45:09] <PJBoy> our codebase really just doesn't deserve clang format
[15:45:31] <PJBoy> the clang-tidy identifier naming is really the only thing we need
[15:54:47] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[16:01:11] <johnny> although.. i don't see why they didn't use Qt as the prefix for Qt tho in the first place
[16:02:11] *** Joins: proller (~p@2a02:6b8:0:40c:f1f4:6b00:d66c:9396)
[16:05:37] <r-g> geordi: ‮⁦// ⁩⁦<< "test";
[16:05:37] <geordi> Success
[16:05:51] <r-g> geordi: -c void Аdd() {} void Add() {}
[16:05:51] <geordi> Success
[16:06:24] <PJBoy> #geordi and all that
[16:06:26] <Haohmaru> shh, no crapmojis
[16:06:28] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 265 seconds)
[16:13:57] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[16:15:25] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[16:20:35] <PJBoy> I think clang-tidy readability-identifier-naming ClassMethod/ClassMember refer strictly to public declarations
[16:22:32] <Haohmaru> are you still pimping up your IDE?
[16:22:56] <PJBoy> yeah
[16:23:09] <PJBoy> or whatever tool you'd use to run clang-tidy
[16:23:30] <urdh> i just love it when people introduce giant 9000-line commits containing (among other things) at least 20 unnamed std::scope_lock instances, conditionals that are literally `if('#')`, and a function returning std::shared_ptr<bool> for no discernible reason
[16:23:48] <urdh> good thing we're running SonarQube, because this code is just... wow
[16:24:19] <mort> that.. doesn't sound like a PR from a person who should be part of the project
[16:24:30] <PJBoy> if it's any consolation, it was probably split into several commits before being squashed
[16:25:01] <PJBoy> as is considered good practice by many
[16:25:45] <urdh> well yes; they squashed a 100+-commit branch
[16:25:59] <PJBoy> well there you go
[16:26:21] <fiesh> if('#')... ?!
[16:26:37] <mort> just do 'if (true)'
[16:26:47] <urdh> I very much disagree with that practice, because have fun bisecting/blaming/understanding those changes, but whatever
[16:26:48] <urdh> I
[16:27:12] <PJBoy> I disagree with it too
[16:27:25] <mort> I think PRs should *not* be squashed, but PRs should also not just be 1000 garbage commits
[16:27:39] <PJBoy> that too
[16:27:46] <LordKalma> the gerrit flow is better in that regard
[16:27:52] <urdh> fiesh: if (c == '\n') { ... } else if('#') { ... }
[16:28:03] <LordKalma> in the sense that you ammend commits and each commit is the unit of history
[16:28:05] <LordKalma> not PRs
[16:28:11] <mort> you should do whatever you want in your own branch, but then when you're done, re-work the commits so that each commit is a nice self-contained unit of work, then those commits should be merged without squashing
[16:28:20] <mort> problem is, git provides really fucking terrible tools for that
[16:28:25] <PJBoy> I like commit amends actually
[16:28:26] <LordKalma> yeah, that's called the gerrit flow :)
[16:28:48] <PJBoy> but don't they end up requiring force pushes or some shit?
[16:28:52] <mort> git really only makes it easy to split up a commit into per-file changes, and then squash multiple commits
[16:29:03] <mort> but if multiple changes are in one file, you can't easily make those changes multiple commits
[16:29:05] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:29:18] <mort> PJBoy: the idea is that you force push to your own branch, _then_ you submit a PR/MR
[16:29:24] <urdh> depends on what you think is easy
[16:29:32] <CoderCharmander> I use sublime merge or vs code for cherrypicking changes
[16:29:37] <urdh> --fixup & --autosquash works well enough most of the time tbh
[16:29:37] <PJBoy> mort, noted
[16:29:42] <mort> urdh: btw that looks like it was supposed to be `else if (ch == '#')`
[16:29:42] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[16:29:43] <LordKalma> with gerrit you push to a branch called to:dev or whatever
[16:29:44] <mort> so that's probably a bug
[16:29:52] <urdh> mort: you think?
[16:30:03] <mort> how many lines changed?
[16:30:09] <urdh> 9000
[16:30:14] <urdh> needless to say this code has exactly zero unit tests as well
[16:30:15] <mort> that's too big
[16:30:34] <mort> what does it even do
[16:30:35] <urdh> you're preaching to the choir here ;)
[16:30:37] <mort> rewrite the whole application?
[16:30:55] <urdh> a subsystem, but pretty much a full rewrite yes
[16:31:08] <urdh> luckily not the subsystem I'm working on
[16:31:18] <mort> is this person in some way responsible for the subsystem
[16:31:35] <oj> hey, do you guys know of a static analysis tool that will show me a graph of how different symbols depend on each other
[16:32:00] <oj> e.g. which structs have members whose type is some other struct
[16:32:03] <mort> maybe you can get away with a "it's not my problem" and then not worry about it and insulate yourself from blame when it inevitably catches fire and sinks the ship
[16:32:19] <PJBoy> oj, strongly doubt such a tool exists
[16:32:30] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Quit: Switching clients)
[16:32:32] <oj> really?
[16:32:49] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[16:32:51] <urdh> mort: depends on what you mean by "responsible", but let's just say I suspect they will be spending the rest of this year fixing this
[16:32:51] <PJBoy> yeah
[16:33:04] <mort> oj: such a tool sounds useful and I don't know of one, but one tiny nit: you're not actually talking about "symbols" here, because a struct and a struct member variable isn't a "symbol"
[16:33:09] *** Joins: apchar (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[16:33:11] <urdh> it's certainly not *my* problem at least
[16:33:15] <PJBoy> such a graph would generally be incomprehensible anyway
[16:33:18] *** Quits: apchar (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Remote host closed the connection)
[16:33:23] <oj> mort: but the type of the member is a symbol
[16:33:32] <mort> oj: a type isn't a symbol
[16:33:33] <PJBoy> I can't imagine it would scale past like 3 classes
[16:33:33] <LordKalma> https://www.qt.io/blog/the-qt-company-products-not-affected-by-cve-2021-44228-log4j-vulnerability
[16:33:37] <oj> no?
[16:33:52] <oj> well, nitpick accepted
[16:33:56] <mort> a symbol is like a global variable or a function, something in the actual binary
[16:34:10] <PJBoy> LordKalma, is that a Qt brag?
[16:34:17] <LordKalma> hahah yes
[16:34:21] <PJBoy> no one would expect a java bug to affect Qt
[16:34:23] <PJBoy> hahaha
[16:34:31] <urdh> oj: SourceTrail perhaps?
[16:34:39] <mort> basically a thing which ends up with a name in the object file generated by the compiler
[16:34:44] <oj> urdh: thanks I'll check it out
[16:35:36] <mort> LordKalma: that looks like an announcement that's designed for big corporate customers who just have a big checklist of every large dependency the security team is aware of where they have to go through and prove that none of them are affected by log4j because that's the process
[16:35:53] <oj> mort: yeah, that makes sense, don't really need type info at runtime I suppose (except for like vtables)
[16:36:10] <PJBoy> wtf, clang-tidy has a check that warns on using a protected data member
[16:36:24] <mort> oj: and things like the vtable for a class often ends up as a symbol btw
[16:36:45] <mort> I think
[16:36:47] <oj> mort: yeah, it's essentially an array of function pointers
[16:36:52] <oj> so makes sense it's a symbol
[16:37:20] <mort> plus you sometimes get "missing symbol: vtable for Foo" linker errors :p
[16:37:22] <PJBoy> would you count functions that act on the class due to ADL?
[16:37:33] <PJBoy> e.g. non-member operator<<
[16:37:40] <mort> PJBoy: count that as what
[16:37:48] <PJBoy> a symbol related to the class
[16:37:49] *** Joins: pulse (~pulse@user/pulse)
[16:37:54] <urdh> PJBoy: you really need to curate clang-tidy warnings, some of them are very opinionated
[16:37:57] <PJBoy> from which you could make a bunch of dependent classes
[16:38:07] <mort> the function's mangled name is a symbol
[16:38:12] <PJBoy> urdh, yeah I'm working my way through them
[16:45:25] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184) (Quit: Connection closed)
[16:45:56] <PJBoy> well there goes my ClassMemberCase theory
[16:46:06] <PJBoy> it's throwing warnings about my private data members too
[16:46:36] <urdh> yeah those settings are completely unintuitive :<
[16:46:48] <mort> what's it complaining about regarding private members?
[16:47:20] <PJBoy> oh no
[16:47:21] <PJBoy> nvm
[16:47:24] <PJBoy> I was right
[16:47:40] <PJBoy> it's just the warning about not using the correct prefix displays as "invalid case style"
[16:49:18] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[16:49:24] <xkoncek> is it better to write iterator rather than a visitor pattern to allow more flexibility (for example concurrency)?
[16:49:51] <PJBoy> nope, take it back again, ClassMemberPrefix doesn't affect public or private members
[16:50:01] <PJBoy> and MemberPrefix affects both
[16:50:29] <PJBoy> new theory is ClassMemberPrefix only affects static members
[16:51:08] <ville> xkoncek: i am not sure why visitor would necessarily prevent concurrency. not that i would use visitor.
[16:51:31] <PJBoy> this is kinda a shame actually, as I want aggregates to not require the m_ prefix, the m_ implies private data member in our code
[16:52:43] <xkoncek> not necessarily, but it looks like there would have to be multiple versions of that code and even then there are many implementations (openmp, executors, custom futures)
[16:54:08] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:54:36] <ville> if the "custom" is one written by you then i am not sure why visitor would necessarily prevent concurrency. it could just be means to find out the concrete type and dispatch to right "call" and those "calls" may run concurrently
[16:55:17] <urdh> PJBoy: it might be a class vs. struct thing? (or class vs union or something)
[16:55:30] <urdh> the documentation is unhelpfully vague as always :)
[16:55:38] <PJBoy> I'm pretty sure it's a static vs non=static thing at this point
[16:55:39] <mort> how are you even supposed to use clang-tidy
[16:55:56] <PJBoy> either by running it via command line or via IDE integration
[16:56:00] <mort> by default there are no checks, if you enable all checks it screams at you that you're not putting your functions in the __llvm_libc namespace
[16:56:18] <PJBoy> that's true
[16:56:20] <urdh> mort: spend approximately 264 hours configuring it first
[16:56:45] <mort> can't there just be a reasonable default which has a bunch of checks but doesn't literally force you to put your functions in namespace __llvm_libc
[16:57:05] <PJBoy> you can get fairly far with just the bugprong-* checks
[16:57:12] <PJBoy> bugprone-*
[16:58:03] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:58:05] <mort> ok bugprone-* is useless
[16:58:05] <urdh> bugprone-*,clang-*,modernize-*,readability-* is usually fine unless you have opinions
[16:58:06] <ville> xkoncek: sounds a bit like you're "future proofing" or "over generalizing". how likely is it that you would switch out whatever means you are using for concurrency in any given concrete context such as a real application you're developing?
[16:58:17] <mort> it doesn't let you take a 'float x; float y' because you may accidentally mix up x and y
[16:58:29] <mort> my code isn't better if I don't take an x and a y
[16:58:34] <urdh> and then cert-*,cppcoreguidelines-* if you follow those
[16:58:42] <PJBoy> oh, do you know which rule does that?
[16:58:52] <mort> bugprone-easily-swappable-parameters
[16:59:04] <PJBoy> right
[16:59:11] <urdh> just enabling everything gets you all the specialized llvm-*/abseil-*/whatever checks, and that's not very meaningful
[16:59:16] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:59:18] <mort> btw, you may want --header-filter='.*'?
[16:59:21] <PJBoy> I kinda respect it
[16:59:30] <PJBoy> but yeah eh
[16:59:58] <mort> you complained about it going through all your system headers just to tell you how many errors were suppressed
[17:00:02] <PJBoy> sensible defaults are not gonna be perfect of course
[17:00:03] <mort> I think --header-filter='.*' fixes that
[17:00:19] <xkoncek> ville this is that octree impl. and this is the one where i could find usefulness... i will try to make a fat iterator, doesn't seem to hard to have a forward it
[17:00:31] <PJBoy> well it certainly does go through all the system header, but maybe it's important that it does
[17:00:36] <PJBoy> idk
[17:00:43] <PJBoy> clang-tidy is fast enough for the time being
[17:00:45] <mort> nvm --header-filter='.*' doesn't work, it complains about system SDL headers
[17:00:57] <mort> and system libfmt
[17:00:59] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[17:02:12] <PJBoy> I take it clang-tidy readability-identifier-naming has no option to demand a name prefix *isn't* used
[17:04:23] <mort> I must be misunderstanding something, clang-tidy says 'Use -header-filter=.* to display errors from all non-system headers.' but when I add that option it displays error from all system headers
[17:06:54] <PJBoy> yeah I'm not sure what's up with that wording
[17:07:03] <PJBoy> the intention is definitely that it displays errors from system headers
[17:07:59] <mort> I don't understand why clang-tidy thinks trailing return types are better than the old return types
[17:08:06] <mort> C++ is a language where the type goes on the left
[17:08:25] <mort> trailing return types is just less consistent and more typing and longer lines?
[17:08:33] <PJBoy> clang-tidy doesn't think it's better, it just provides the option
[17:09:18] <LordKalma> modernize-use-trailing-return-types is the dumbest shit ever
[17:09:31] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8)
[17:09:44] <LordKalma> although I spoke to someone in #include<c++> that *always* used tailing return
[17:09:47] <mort> well
[17:10:11] <xkoncek> there are arguments for both
[17:10:12] <mort> using modernize-* and readability-* and such is clearly how you're supposed to use clang-tidy
[17:10:13] <rpav> yeah trailing returns are like .. eh not much perceived benefit
[17:10:23] <xkoncek> have you ever read a 5-line typedef?
[17:10:38] <PJBoy> trailing return types can be better
[17:10:44] <LordKalma> trailing returns are for when you are doing TMP and need decltype( something complicated
[17:10:46] <PJBoy> and non-trailing return types can never be better
[17:10:51] <PJBoy> so there is some justification for it
[17:11:01] <mort> why would you want a C-style array for a buffer btw
[17:11:02] <xkoncek> although i only use trailing return types for namespace deduction
[17:11:06] <PJBoy> kinda like builtin arrays vs std::array
[17:11:10] <mort> isn't `char buffer[4096]` perfectly good
[17:11:13] <xkoncek> especially useful when returning nested structs
[17:11:28] <mort> s/would/wouldn't/
[17:11:45] <ville> okay but the octree doesn't need to know anything about concurrency? you have the octree and then you have a thread pool. you stick your 8 top-level boxes as "tasks" as jobs for the pool. once you get results back you can insert the next 8 for whichever require it
[17:11:55] <xkoncek> std::array has builtin lexicographical operator <=>
[17:11:55] <rpav> xkoncek: if it's a typedef, it's already wrong? ;)
[17:12:17] <PJBoy> std::arrays don't decay etc
[17:12:19] <mort> why would you want operator<=> for a buffer
[17:12:33] <mort> you want it to decay, you're using it as a buffer and passing it to functions expecting a pointer and a size
[17:12:43] <xkoncek> ville yeah, but that visitor procedure is strictly serial
[17:12:45] <PJBoy> so you should provide arr.data() and arr.size()
[17:12:51] <mort> yeah but what's the advantage
[17:12:52] <PJBoy> otherwise you risk forgetting the size
[17:12:59] <mort> no?
[17:13:03] <PJBoy> with no drawbacks
[17:13:09] <mort> the size of the buffer is sizeof(buffer)
[17:13:13] <ville> xkoncek: what visitor
[17:13:18] <PJBoy> until the buffer decays into a pointer
[17:13:22] <PJBoy> and then you don't even get an error
[17:13:26] <xkoncek> ehh... it is complicated
[17:13:29] <PJBoy> I mean just look at the C API
[17:13:37] <PJBoy> we've learnt a lot from decaying arrays in the last 30 years
[17:13:47] <rpav> ville: that seems like a pretty silly strategy .. for one your straddlers are a problem, and for two unless you're almost always searching all the space, it will buy you little
[17:13:51] <mort> doSomething(buffer, sizeof(buffer)) is an extremely common pattern though
[17:13:53] <PJBoy> you and I probably wouldn't ever make these errors, but the advantage of std::array is clear
[17:13:54] <mort> and there's nothing wrong with it
[17:14:06] <LordKalma> there's *everything* wrong with it
[17:14:13] <LordKalma> that's why we have gls::span
[17:14:17] <LordKalma> *gsl::span
[17:14:23] <PJBoy> also yeah I would personally flag up sizeof(arr)
[17:14:27] <rpav> because like only one thread will ever be running anyway .. not to mention what you'd likely really like are multiple parallel searches
[17:14:28] <mort> yea I'm not using gsl
[17:14:33] <xkoncek> it is not excatly an octree but a multistage map of cubes of various sizes sorted lexicographically
[17:14:51] <PJBoy> std::size(arr) is better as it counts array elements rather than array byte size, and it errors on pointers that aren't arrays
[17:14:53] <xkoncek> point is, visitation is like a 3-stage filtering over a data structure
[17:15:02] <ville> rpav: straddlers are always a "problem" for a static partitioning scheme.
[17:15:05] <mort> sizeof counts elements
[17:15:16] <PJBoy> only if those elements have sizeof == 1
[17:15:18] <ville> rpav: no idea why you think single thread would be running
[17:15:19] <mort> no
[17:15:20] <xkoncek> so i want dynamic partitioning
[17:15:30] <mort> wait nvm I'm thinking about something else
[17:15:32] <PJBoy> << sizeof(arr); int arr[4];
[17:15:32] <geordi> 16
[17:15:34] <mort> yes
[17:15:41] <mort> but in the case of a buffer you want the size in bytes
[17:15:48] <PJBoy> so yeah, even experts get builtin arrays wrong
[17:15:51] <LordKalma> << sizeof(&*int[4])
[17:15:51] <geordi> error: expected primary-expression before 'int'
[17:15:58] <rpav> ville: you said one thread for each of the "8 top-level boxes"
[17:16:05] <LordKalma> << sizeof(&*a); int a[4];
[17:16:05] <PJBoy> builtin arrays have an unnecessary cognitive load
[17:16:06] <geordi> 8
[17:16:20] <mort> C++ arrays have an unnecessary cognitive load
[17:16:27] <PJBoy> how so?
[17:16:32] <mort> it's an unnecessary, less ergonomic standard library type for something that's already in the C++ language
[17:16:54] <PJBoy> sizeof is slightly less ergonomic than .size
[17:17:02] <urdh> let's just throw std::string out of the standard library as well while we're at it
[17:17:03] <PJBoy> and ergonomic != cognitive
[17:17:14] <LordKalma> std::array is definitely very different from buffer[4096]
[17:17:16] <mort> can you even do array<int> foo = {10, 20, 30} yet
[17:17:25] <urdh> after all, it's not perfect and we already have null-terminated char arrays
[17:17:35] <mort> I agree there are issues with C++ arrays
[17:17:40] <PJBoy> you can do `auto foo = to_array<int>({10, 20, 30});`
[17:17:52] <mort> but the solution there surely is to fix C++ arrays, not to introduce a second redundant kind of array called std::array
[17:17:53] <PJBoy> but partial CTAD seems to be completely off the table
[17:18:05] <LordKalma> {cout << typeof(a);} array a = {1,2,3,4};
[17:18:05] <geordi> error: 'typeof' was not declared in this scope; did you mean 'typedef'? (fix known)
[17:18:09] <PJBoy> the builtin arrays can never be fixed because of the decay
[17:18:19] <mort> `int foo[] = {10, 20, 30}` vs `auto foo = std::to_array<int>({10, 20, 30})`
[17:18:21] <mort> I know which I prefer
[17:18:38] <LordKalma> {cout << typeid(a);} array a = {1,2,3,4};
[17:18:38] <PJBoy> yeah but `array foo{10, 20, 30};` is better than all the above
[17:18:38] <geordi> array<int, 4ul>
[17:18:55] <LordKalma> array a = {1,2,3,4}; seems to work just fine
[17:19:04] <mort> alright, fair
[17:19:22] <PJBoy> I wouldn't dwell on the declaration part though
[17:19:25] <rpav> but no `auto a = array{1,2,3,4};`
[17:19:26] <ville> rpav: never said such thing. thread pool. i didn't specify how many threads the thread pool has or how it divies the jobs
[17:19:30] <PJBoy> you only declare an array once, it's the usage that's more important IMO
[17:19:46] <PJBoy> you can do `auto a = array{1, 2, 3, 4};`
[17:19:49] <LordKalma> like safe iterators? :D
[17:19:50] <ville> rpav: the conservative strategy there is to send in the first 8, then produce more tasks as those compelte
[17:19:51] <rpav> ville: "you stick your 8 top-level boxes as "tasks" as jobs for the pool"
[17:19:56] <LordKalma> a.begin() and a.end() :D
[17:20:00] <LordKalma> for-range loops? :D
[17:20:06] <ville> rpav: yes, and then those get consumed by the working thread(s)
[17:20:08] <mort> I just wish C++ didn't have 100 generations of ways to do everything
[17:20:15] <PJBoy> builtin arrays have begin/end non member functions and support for-range
[17:20:16] <LordKalma> go use Rust instead
[17:20:17] * LordKalma runs
[17:20:21] <rpav> the point is this is a terrible strategy for octree heh
[17:20:29] <rpav> and really searching for that kind of thing in general most likely
[17:20:32] <ville> rpav: but you can be more aggressive and produce tasks for the first N levels if you've lot of workers sitting idle
[17:20:43] <PJBoy> the tangible benefits of std::array are its value semantics; they can be copied/moved, compared, they don't decay
[17:20:45] <LordKalma> PJBoy, but at least std::array never decays into a pointer
[17:21:26] <PJBoy> I personally don't care to use std::array most of the time either
[17:21:29] <mort> well, I don't think there's anything wrong with arrays for buffers
[17:21:38] <PJBoy> but I will admit that std::array is objectively better on the whole
[17:21:39] *** Joins: jkaye (~jkaye@2601:281:8300:7530:323:f5e4:2678:9ded)
[17:22:13] <LordKalma> pfft, Qt6's QList is the best container
[17:22:39] <mort> is code better if you remove 0xff with #define ALL_BITS_SET_8B 0xff and then use ALL_BITS_SET_8B rather than 0xff
[17:22:45] <PJBoy> fuck people that write `auto main() -> int` though
[17:23:23] <PJBoy> mort, absolutely not
[17:23:36] <rpav> any attempt at C++ consistency is met with the only consistency in C++; that nothing is consistent
[17:23:45] <PJBoy> the magic numbers warning is flexible enough to allow numbers like that though
[17:23:59] <PJBoy> (if you configure it so)
[17:24:07] <LordKalma> magic numbers allows for example 0, 1, and 2 iirc out of the box
[17:24:08] <urdh> #define SIXTEEN 0x10
[17:24:29] <rpav> PJBoy: so you can't make _any_ array that deduces like `anarray a{1,2,3};` ?
[17:24:32] <PJBoy> I disabled it after it flagged up `x >> 8 & 0xFF`
[17:24:45] <LordKalma> I'm sure about allowing 0 and 1
[17:24:46] <PJBoy> rpav, eh?
[17:24:47] <rpav> given it will then instantiate with an int[3]
[17:25:04] <rpav> PJBoy: i mean, is the problem you can't in C++, or just std::array doesn't
[17:25:05] <mort> I think a lot of C++ ergonomics would be improved if you didn't have to write std:: literally everywhere
[17:25:10] <PJBoy> you can absolutely make an array that deduces like that
[17:25:13] <mort> int[] is so much nicer than std::array<int>
[17:25:13] <LordKalma> using std::vector;
[17:25:15] <LordKalma> ?
[17:25:16] <PJBoy> I'm not sure what you're trying to say
[17:25:23] <urdh> I mean to be fair having constexpr helper functions for common bit-fiddling things is not an awful idea
[17:25:33] <rpav> then make an array that behaves how you like?
[17:25:42] <urdh> certainly better than ALL_BITS_SET defines
[17:25:46] <PJBoy> I do make arrays that behave how I like
[17:26:08] <rpav> well it's not like most of std isn't useless trash you have to reimplement anyway so
[17:26:32] <PJBoy> the thing std::array can't emulate directly is `T arr[]{expr...};` where the type is specified, but not the size
[17:26:40] <PJBoy> and it has to use std::to_array for that purpose
[17:26:58] <PJBoy> but honestly the type doesn't often matter when initialising an array with values
[17:27:12] <LordKalma> meanwhile this is what the rust team is worring about: https://twitter.com/m_ou_se/status/1471077145258647554
[17:27:12] <urdh> rpav: is this the "stdlib doesn't cater to my specific needs, therefore it's universally shit" argument?
[17:27:37] <PJBoy> yo m-ou-se
[17:27:51] <mort> the problem with the idea of reimplementing anything in the stdlib is that it's becoming harder and harder to implement anything in C++
[17:28:07] <LordKalma> PJBoy, Mara's twitter is pretty funny
[17:28:19] <mort> you need a billion different identical overloads for everything for constants and all the operators, you need move ctors, copy ctors, move operator=s and copy operator=s, etc
[17:28:24] <ville> mort: at least now you an do auto xs = std::array{{0, 1, 2}};
[17:28:24] <mort> making a C++ type correctly is hard
[17:28:28] <PJBoy> yeah she seems cool
[17:29:33] <mort> that rust change seems bad to the point of just being incorrect, "Ferris" can absolutely be used as an identifier so don't write an error message which says "Ferris cannot be used as an identifier"
[17:29:55] <mort> "Identifiers cannot contain emoji" is much more accurate than "Ferris cannot be used as an identifier"
[17:30:59] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[17:31:00] <mort> well, maybe I'm too harsh on std::array, maybe I should consider using std::array rather than arrays even in C-like C++ code
[17:32:07] <mort> I find it curious that clang-tidy wants me to change a mutating function to const just because it happens to not change any members
[17:32:17] <ville> mort: also writing your own containers is not that much code. you only need 2 generic ones: dynamic array and a hash table. you've no solved 99.48% of situations
[17:32:24] <mort> should a file wrapper's write method be const just because it doesn't change the integer value of the file descriptor
[17:32:25] <ville> err now
[17:32:57] <mort> ville: yeah, but each one of those is just more annoying than it should be with all the repetition and repetition
[17:33:26] <ville> mort: one question you can ask is: does it change the equality/identity of an object?
[17:33:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[17:33:39] <mort> it does change the thing the object represents
[17:33:55] <mort> I don't know if "equality" of file wrapper objects makes sense
[17:34:07] <mort> you could argue they should compare the files' contents byte-wise
[17:34:16] <mort> in which case, yes, it changes equality
[17:34:26] <ville> not quite what i meant. how does your operator == behave: auto x = thing{}; auto y = x; x.f(); does the result of x == y depend on whether .f() was called
[17:34:43] <ville> right, but does your operator == or, < or whatever <=> it is today
[17:34:51] <urdh> mort: no heuristic is perfect, but I guess you could ask the libc++ folks to annotate their fwrite in some way to make clang-tidy see it modifies "through" the descriptor
[17:35:04] <rpav> urdh: not really, sortof more the inverse .. it's more that it doesn't try to at least hit the useful/easy things, even if it _doesn't_ hit my specific case .. it tries to be so overly general that it's rarely useful for anything
[17:35:26] *** Quits: robod34 (Username@79.113.195.239) (Remote host closed the connection)
[17:35:34] <ville> mort: stepanov's elements of programming should cover this?
[17:35:35] <rpav> it should be the go-to for like the "easy 80%"
[17:35:41] <mort> the file wrapper is just the clearest example, in this particular case clang-tidy thinks I should make a method const but that method changes the data in a GPU-side buffer using an opengl function
[17:36:02] <urdh> i dunno, i find many parts of the standard library useful
[17:36:06] <mort> it's basically a kind GPU-side buffer wrapper object
[17:36:30] <urdh> sure, it has some obvious blind spots and that's annoying, but that doesn't necessarily make the parts that do exist "useless trash"
[17:36:37] <ville> mort: does your operator ==, < or <=>, implementatiion reflect that?
[17:36:44] <mort> I don't think having an operator== makes much sense for such an object
[17:36:45] <rpav> vector is useful; string is mostly useful .. map is an easy throwaway, but beyond that i mean
[17:36:50] <mort> I currently don't have one
[17:36:57] *** Joins: robod34 (Username@79.113.195.239)
[17:37:09] <mort> operator== is generally meant to compare based on a value and not based on a reference, right?
[17:37:11] <rpav> type_traits are pretty useful for a lot of thigns, but that's _highly_ specialized, and also doesn't cover some easy stuff
[17:37:22] <mort> so operator== should somehow download the contents of the buffer into CPU memory and then compare buffers
[17:37:22] <urdh> rpav: <memory>, <utility>, <atomic>, <algorithm>, ...
[17:37:28] <rpav> iostreams are shit and everyone hates them
[17:37:50] <urdh> i agree, some parts are shit, and some parts are missing
[17:37:59] <ville> mort: read stepanov's elements of programming first few chapters. this sort of thing is covered there
[17:38:06] <urdh> but "the standard library is useless trash" is not a fair characterization
[17:38:16] <rpav> urdh: are mostly crap
[17:38:24] <mort> ville: sure, I might do that. But before I do: what do you think he would suggest, when your value is a wrapper around a GPU-side buffer?
[17:38:33] <rpav> like, there's hash for some things, that's nice
[17:38:40] <ville> mort: not saying you need to do what is says, just saying they do provide some reasonining about how they would like types to behave
[17:39:06] <rpav> tuple is probably the one shining star of usefulness, but that's pretty specialized since it's _not_ the basis for most things (where it _could_ be)
[17:39:10] <mort> yeah, I'm asking about your take on how it would suggest such a type should behave
[17:39:33] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:41] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:41] *** ChanServ sets mode: +v npaperbot
[17:40:25] <rpav> optional sucks, not because the implementation is bad, but because using it sucks and there is afaict no nice way to do so; variant is arguably useful except there always seems to be some reason not to; any is generally a mistake (and there's no std::any_ptr, which _would_ be useful); bitset is shit; to/from_chars is probably useful if anyone implemented them, but other easy solutions are available
[17:41:32] <mort> hmm what makes bitset shit?
[17:41:49] <mort> I use it every time I need a fixed size bitset
[17:42:03] <rpav> urdh: ok unique_ptr/shared_ptr are good, i keep forgetting those are memory and not utility, and i'll give you atomic since it seems to hit the low-level mechnaics and i don't know any better
[17:42:23] <rpav> but then you have allocators
[17:42:49] <mort> everything I've seen of std::bitset so far is basically, "yes, this is exactly how I would have implemented this if I had to"
[17:42:50] <ville> mort: i'd probably opt to just think about the texture id as the object. as long as you don't change the id the wrapper holds everything is const
[17:43:18] <mort> ville: hmm
[17:43:59] <mort> the closest analogy I can come up with regarding this is having a unique_ptr to something and modifying that something through the unique_ptr
[17:44:11] <mort> modified what's pointed to is obviously non-const
[17:44:27] <mort> but modifying through the pointer is probably const
[17:44:35] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:44:44] <mort> if you have a const unique_ptr<int>, does its operator* give you a mutable int&
[17:45:39] <mort> certainly an int *const's operator* will give you a mutable int&
[17:46:07] <urdh> rpav: meh, not perfect != useless shit
[17:46:16] <rpav> urdh: i said most, not all :p
[17:46:36] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 245 seconds)
[17:47:03] <mort> ville: so if we view the file descriptor as a kind of reference type, with reference equality rather than value equality, then it does make sense that modifying through that reference is considered const
[17:47:19] <mort> rpav: I'd love an explanation for what's bad about std::bitset
[17:47:29] <mort> or, as my IRC client wants me to say, std:🇮🇴
[17:47:40] <rpav> i mean, most of the containers, regex, iostreams, algorithms is a mixed bag .. a lot of stuff that'a arguably useful is painful as shit, e.g. chrono and random
[17:47:42] <urdh> even so
[17:48:37] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[17:48:45] <mort> std::unordered_map should probably be named std::hashmap and std::map should probably be named std::rbtree or something, but std::unordered_map is a perfectly decent hash map implementation
[17:48:54] <mort> it's not bleeding-edge, you could find faster ones out there, but it's not bad
[17:50:07] <ville> mort: there isn't a string literal/string_view ctor for std::bitset. that could be one addition
[17:50:40] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:50:42] <ville> or wait i guess the char const* one doesn't allocate?
[17:51:30] <mort> yeah looks like it
[17:51:48] <mort> so std::bitset<16>("0010110100111001") should work
[17:51:57] <mort> not constexpr tho sadly
[17:52:06] <mort> that should really be done at compile time
[17:52:13] <ville> well: http://www.eelis.net/c++draft/template.bitset#bitset.cons-8
[17:52:21] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[17:52:27] <ville> so looks like it can allocate at least
[17:53:04] <mort> huh
[17:53:26] <mort> if anything I'd expect the basic_string variant to be defined to be "as if" by calling the const char* variant
[17:53:35] <mort> with str.c_str() and str.size()
[17:54:31] <mort> but, eh
[17:54:38] <mort> knowing standards people they'd say that's a quality of implementation issue
[17:55:01] <mort> ignoring the fact that programmers would like to be able to know "constructing this bitset won't heap allocate and can't throw bad_alloc"
[17:55:48] <mort> see this is the kind of shit that makes C++ on microcontrollers untenable, if you don't have a heap and don't have a heap allocator you want to know that constructing a bitset won't allocate
[17:56:10] <mort> same with games, you want to know the bitset you're allocating for every kind of entity or whatever every frame doesn't allocate
[17:56:21] <ville> mort: c++ is fine, c++'s standard library may not be
[17:57:02] <mort> well C++ without its stdlib isn't worth that much, you can make slightly more expressive abstractions and you can slightly more easily accidentally blow your stack
[17:57:43] <ville> c++'s lots of fun with out the standard library... with the caveat you have the c standard library perhaps
[17:58:30] <ville> being able to do things like scope guards and other resource wrappers will simpligy things even if you write "sort of c"
[17:58:37] <ville> simplify
[17:58:38] <mort> fair
[17:59:29] <rpav> well doubtless you want a handful of the things .. but my point is more if they focused on the _day to day_ useful things, and make them _really_ nice to use, it'd be better than trying to cover the entire spectrum and ending up mostly crap
[18:00:03] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[18:00:15] <mort> rpav: if you have a specific reason to complain about bitset I want to hear it, if not then that's fine
[18:00:29] <mort> I won't argue against anything
[18:00:32] <PJBoy> main complaint with bitset is it isn't freestanding
[18:00:36] <PJBoy> because of its string ctors
[18:01:35] <urdh> will the freestanding papers fix that?
[18:01:49] <urdh> or do they just pull "complete" classes/headers?
[18:01:51] <urdh> i forget
[18:02:02] <PJBoy> I don't believe there's a fix for it
[18:02:18] <mort> the fix will probably be modules
[18:02:21] <mort> import std
[18:02:33] <mort> apparently that's faster than even including only the headers you need
[18:02:38] <mort> almost universally
[18:03:05] <ville> now c++'s choice of sticking placement new functions into a header you have to include is bit unfortunate. of course that's part of freestanding but you still have implementations in the wild that don't ship that header (avr-gcc), so technically you "can't" use placement new on that platform
[18:03:40] <ville> which is kind of unfortunate that you "can't" placement new on an embedded platform
[18:03:50] <mort> what does that mean
[18:03:57] <mort> surely placement new is part of the language and not part of the stdlib?
[18:03:58] <urdh> hm, doesn't seem to be in [p2407]
[18:03:58] <npaperbot> P2407R1: [Library Evolution] Freestanding Library: Partial Classes <https://wg21.link/p2407r1> (by Emil Meissner, Ben Craig) (2021-11-23) (Related: https://wg21.link/p2407r1/github)
[18:03:58] *** Joins: Terminus (~null@user/terminus)
[18:04:20] <mort> or do you mean that the constructors themselves are in headers so you can't placement new with a constructor from a header
[18:04:23] <ville> mort: you need the header new for placement new
[18:04:52] <mort> as in <new>?
[18:05:02] <mort> or the class's operator new
[18:05:05] <mort> I suppose that'd be it
[18:05:21] <ville> http://coliru.stacked-crooked.com/a/c1be74deddadf0c2
[18:05:28] <ville> comment out the include
[18:06:01] <mort> that's fucked
[18:06:19] <rpav> interesting, i haven't seen much about freestanding stuff
[18:06:31] <mort> is the <new> header just implicitly included by basically everything then so I've never noticed
[18:06:36] <rpav> bitset depends a lot on basic_string?!
[18:06:40] <rpav> eesh
[18:06:57] <ville> mort: probably if you include something from c++ standard library that allocates you get it
[18:07:04] <PJBoy> <ben.craig> std::bitset is not a good class right now.  And I don't think I've ever used it for real, so it's debatable if it is even worth my time
[18:07:26] <rpav> yeah i think that's evident to anyone who has the need for it and has tried to use it
[18:07:43] <mort> but
[18:07:51] <mort> why do you need a global operator new for placement new
[18:07:59] <PJBoy> there's no good reason
[18:08:02] <PJBoy> but I can give you a bad reason
[18:08:06] <mort> sure
[18:08:24] <rpav> i do wish they'd rethink a lot of stuff in terms of tuple though ;/
[18:08:39] <mort> tuple seems terrible from all I've heard
[18:09:29] <PJBoy> c++ doesn't define any function in an empty TU
[18:10:00] <PJBoy> and operator new is a function
[18:10:12] <rpav> that seems like a good !fact
[18:10:22] <rpav> (empty TU)
[18:10:23] <PJBoy> well it's not really factual
[18:10:33] <PJBoy> it's more handwavy and incorrect
[18:10:37] <ville> what if you squint your eyes?
[18:10:41] <mort> but why does placement new use operator new at all, I always thought it just called the ctor basically
[18:10:48] <PJBoy> yeah if you squint your eyes *really hard*
[18:10:49] *** Quits: aniketgm (~Aniket@49.36.109.129) (Read error: Connection reset by peer)
[18:10:59] <PJBoy> nah placement new can be overloaded
[18:11:04] <rpav> well does _the standard_ mandate functions be defined in an empty TU? that's different than "the compiler defines functions when generating a fully-linked binary, given an empty TU"
[18:11:05] <PJBoy> for specific classes even
[18:11:05] <mort> weird
[18:11:27] <PJBoy> well there are 4 `new` functions and 12 `delete` functions that are defined even without <new>
[18:11:40] <PJBoy> but you know
[18:11:48] <mort> I never understood the value of operator new in general btw
[18:12:00] <PJBoy> people like to overload it
[18:12:03] <mort> but why
[18:12:11] <PJBoy> to change how allocation is done
[18:12:17] <PJBoy> to log allocation info
[18:12:20] <mort> but that's what allocators are for
[18:12:33] <PJBoy> TC Malloc uses it to call std::terminate instead of throw on bad alloc
[18:12:48] <PJBoy> allocators are idk
[18:13:04] <mort> but tcmalloc doesn't require operator new to be overloaded, tcmalloc is deeper than that
[18:13:12] <PJBoy> there's other forms of memory allocation than allocator aware containers
[18:13:29] <PJBoy> but tcmalloc does overload operator new
[18:13:43] <mort> I just feel that how something is allocated is a property of the thing doing the allocation, not the thing being allocated
[18:13:45] <PJBoy> even if you only link it in as a library
[18:13:50] <LordKalma> dammn, I've become such a better programmer in the last year
[18:14:02] <LordKalma> I was writing some python code and I realized how much I've evolved
[18:14:19] <LordKalma> especially given the fact I'm re-writing some crap to support multiple instruments via multiple interfaces
[18:14:24] <LordKalma> instead of hardcoding everything
[18:14:27] <ville> LordKalma: you've only evolved once you stop doing that: writing python
[18:14:35] <PJBoy> I overloaded operator new once for memory allocation metrics
[18:14:38] <LordKalma> ville, it's nice to get some instruments going :p
[18:14:51] <mort> I like C
[18:15:00] <LordKalma> but yeah, it's been interesting to like, first do everything with inheritance, realize inheritance is shit, and do composition instead
[18:15:11] <mort> in C, you change the allocator... by loading a .so with a different malloc and free
[18:15:18] <mort> so simple
[18:15:27] <jessicara> or, some cursed macros
[18:15:32] <PJBoy> same in C++
[18:15:32] <rpav> LordKalma: yeah, write more, push for better, and you get better .. a few years back my code was 1000% crappier than today, and it probably has a long ways to go
[18:15:44] <LordKalma> in this case `def __init__(self, visa_impl: VisaImpl):` instead of `class M8194AVisa(VisaImpl):`
[18:15:45] <PJBoy> that's how valgrind and whatnot work
[18:15:45] <rpav> not to mention barely having a clue about a lot of math etc stuff
[18:15:45] <mort> but C doesn't have this "custom operator new" thing
[18:16:00] <PJBoy> yeah but C also doesn't have custom types
[18:16:04] <mort> it does?
[18:16:08] <LordKalma> it doesn't
[18:16:11] <mort> I make structs all the time
[18:16:12] <PJBoy> it has aggregates
[18:16:20] <jessicara> seems often there is the case want a different allocator in a different context too, so it just becomes something like prefix_malloc in very specific places
[18:16:22] <mort> and each struct is a different type
[18:16:23] <PJBoy> but nothing sophisticated
[18:16:26] <LordKalma> what distinguishes C++ is the type system :p
[18:16:26] <mort> that's true
[18:16:29] <rpav> does C really have _types_ in any useful sense, other than calling certain things "types"
[18:16:36] <LordKalma> no
[18:16:48] <PJBoy> I'm not gonna defend operator new too much more though
[18:16:54] <rpav> i mean, you can't really _do_ anything with them, other than use them as tags for certain-sized blobs of allocation
[18:16:55] <mort> if int and double aren't types then I don't know what the word type means
[18:16:56] <PJBoy> I'm not a fan of its interface
[18:17:05] <LordKalma> custom types :D
[18:17:30] <PJBoy> but those C++ types need initialisation
[18:17:34] <PJBoy> which malloc can't do
[18:17:53] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[18:17:55] <PJBoy> ...until C++20, for C compatible types
[18:18:15] <PJBoy> ...via the most bizarre wording you could possibly imagine
[18:18:16] <rpav> 🤔
[18:18:27] <rpav> that sounds a lot like "well we're making what was previously UB, defined, but not really changing anything"
[18:18:33] <PJBoy> you have to use malloc to specifically invoke UB
[18:18:34] <mort> I wish 'new Foo()' was just fancy syntax for 'x = malloc(sizeof(Foo)); new (x) Foo()'
[18:18:49] <PJBoy> and the implicit lifetime stuff will only kick in if UB occurs
[18:18:53] <ville> the whole: "if someting makes it non-UB then yeah that's what it does" thing is...
[18:18:56] *** Joins: magla (~gelignite@55d4970c.access.ecotel.net)
[18:19:01] <PJBoy> and it's specified to do "whatever it takes to make the code not UB"
[18:19:17] <rpav> heh
[18:19:33] <mort> btw
[18:19:40] <PJBoy> "if there are several ways to do this, it is unspecified which one is chosen"
[18:19:51] <mort> if I do `Foo *foo = (Foo *)malloc(sizeof(*foo)); new (foo) Foo()`
[18:19:55] <mort> have I invoked UB at any point
[18:20:05] <ville> after i saw that specification i sort of stopped caring about c++'s lifetime rules altogether.
[18:20:09] <PJBoy> that's all good, assuming Foo isn't over-aligned
[18:20:12] <mort> or will I if I use *foo
[18:20:37] <PJBoy> I'm less clear on if you can use foo instead of the pointer returned by placement new
[18:20:37] <mort> alright so malloc is good
[18:20:41] <rpav> it wouldn't be C-compatible then though would it?
[18:20:45] <rpav> or can C over-align stuff now
[18:20:47] <mort> yea, true
[18:20:51] <mort> I hate that btw
[18:20:57] <mort> why do I have to keep track of the pointer returned by placement new
[18:21:01] <PJBoy> C can over-align with aligned_alloc, right?
[18:21:02] <mort> I already have a perfectly good pointer
[18:21:15] <PJBoy> well I think in the case you presented, the pointer you already had is fine
[18:21:24] <PJBoy> but there are some cases where you need to use the one returned
[18:21:32] <mort> such as?
[18:21:36] <PJBoy> I think an example would be a class with const members
[18:21:41] <rpav> _allocating_ bytes with a specific alignment is a lot different than a type requiring over-alignment
[18:21:46] <PJBoy> again not 100% sure on this
[18:21:47] <mort> ah
[18:22:03] <PJBoy> but there's a concept of "transparently replaceable"
[18:22:15] <mort> there could also maybe be problems with inheritance somehow?
[18:22:24] <mort> though probably not here
[18:22:26] <PJBoy> you can also std::launder the original pointer instead in those cases
[18:22:32] <mort> I just know casting between different pointer types can do fucky stuff
[18:22:36] <ville> mort: it's the provenance thing
[18:23:04] <mort> I remember reading the word provenance here before but I don't remember what it actually does
[18:23:30] <ville> basically that in c and c++ languages pointers are not the same as hardware pointers
[18:23:35] <mort> :(
[18:23:48] <mort> but yea that makes sense intuitively because aliasing and __restrict__ and stuff
[18:23:51] <ville> a pointer is an address and generation pair
[18:24:09] <mort> well I say "intuitively"
[18:24:44] <ville> int *x = new int{}; new (x) new int{}; // x now has the wrong generation
[18:25:24] <mort> huh
[18:25:41] <mort> this feels very similar to generational datastructures in e.g games
[18:26:04] <ville> yeah, but the generation thing is just conceptual. nothing of course tracks it. except those pesky compiler writers
[18:26:07] <mort> where an entity reference is a pointer+generation pair and you can check if the entity disappeared by checking if that pointer still has that generation
[18:26:23] <mort> yeah I understand that
[18:26:40] <mort> hmm, I wonder tho
[18:26:44] <PJBoy> do you still have the reference to that provenance paper?
[18:27:11] <mort> pointers are 64-bit, MMUs and whatever only care about the 48 or whatever low bits, so you could actually encode generations in the pointer and add dynamic checks
[18:27:15] <mort> I wonder if something like ubsan does that
[18:27:24] <Alipha> fiesh: ugh, no, you're right. You can't track shared_ptr references without reflection. I was thinking of just the simple case of Foo having a shared_ptr to Bar and vice versa, where you could keep track of "this shared_ptr points to allocated memory that contains this other shared_ptr". But that falls apart if, say, Foo has a std::vector<shared_ptr<Bar>> instead. Hm, unless you also drop in replacements
[18:27:25] <Alipha> for all the std containers too..
[18:27:47] *** Quits: Rayke (rayke@user/rayke) (Ping timeout: 252 seconds)
[18:28:22] <ville> PJBoy: there are several
[18:28:33] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Ping timeout: 250 seconds)
[18:28:46] <ville> but perhaps this: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2676.pdf
[18:29:03] *** Joins: meator (~meator@user/meator)
[18:29:25] <PJBoy> jesus christ, it's even longer than I remember
[18:29:41] <PJBoy> but only the first 40 pages matter, right
[18:29:41] *** Joins: Rayke (~rayke@user/rayke)
[18:29:43] <PJBoy> thanks
[18:36:13] *** Joins: xkuru (~xkuru@user/xkuru)
[18:37:02] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 240 seconds)
[18:40:15] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:44:39] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[18:52:33] *** Joins: Simplar (~Simplar@188.163.93.76)
[18:58:00] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[19:12:05] *** Quits: BrandonArnold (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com) (Ping timeout: 250 seconds)
[19:14:06] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[19:19:57] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[19:20:15] *** Joins: meator (~meator@user/meator)
[19:20:18] *** Joins: BrandonArnold (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com)
[19:23:17] *** Joins: varioust (~tyler@72-46-48-28.lnk.ne.static.allophone.net)
[19:24:55] <LordKalma> !fact
[19:24:56] <nolyc> LordKalma: Keys with the same hash code appear in the same bucket.
[19:25:42] *** Quits: varioust (~tyler@72-46-48-28.lnk.ne.static.allophone.net) (Client Quit)
[19:27:12] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[19:28:46] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8) (Ping timeout: 260 seconds)
[19:30:04] *** Joins: minto_ (~mintograd@47.201.5.61)
[19:32:00] <rpav> i feel like there's an exploit there, but i don't know
[19:33:03] *** Quits: minto (~mintograd@47.201.5.61) (Ping timeout: 252 seconds)
[19:33:21] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:34:13] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[19:34:30] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[19:34:35] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf) (Remote host closed the connection)
[19:34:44] <PJBoy> that's a fundamental property of hash maps
[19:35:16] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf)
[19:36:03] <rpav> yeah but like, maybe you can get useful information by inserting a bunch of similarly-hashed keys and measuring when it rehashes
[19:36:48] <rpav> and since when you rehash you have more buckets and a different slice of the hash
[19:37:09] <rpav> probably would require a pretty targeted attack though
[19:41:56] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[19:42:24] *** Quits: cq-work (~Z_Lund@user/cq-work) (Quit: WeeChat 3.3)
[19:42:53] *** Joins: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[19:46:00] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[19:46:45] <urdh> hash flooding is a legitimate attack if you're storing user-provided keys in your map
[19:47:14] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[19:47:20] <urdh> usually more of a denial of service thing, but an exploit none the less
[19:47:52] <urdh> !fact
[19:47:53] <nolyc> urdh: The only use of an identifier label is as the target of a goto.
[19:48:12] <LordKalma> {} bananas: goto bananas;
[19:48:12] <geordi> error: 'bananas' does not name a type
[19:48:30] <PJBoy> statements need to be inside functions
[19:48:37] <urdh> { bananas: goto bananas; }
[19:48:47] <geordi> CPU time limit exceeded
[19:49:10] <PJBoy> one of the weirder C++ things for me is how labels need something after them
[19:49:16] <PJBoy> { bananas: }
[19:49:16] <geordi> error: expected primary-expression before '}' token
[19:49:29] <urdh> do other labels count?
[19:49:32] <LordKalma> so how do you go to end?
[19:49:39] <PJBoy> semicolon
[19:49:43] <urdh> { bananas: ananas: ; }
[19:49:43] <geordi> warning: label 'ananas' defined but not used
[19:50:11] <urdh> in retrospect, obviously they do
[19:50:16] <PJBoy> yeah haha
[19:51:51] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:56:44] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:06:57] <Haohmaru> did someone say "ananas" ;P~
[20:07:44] <PJBoy> ananas on pizza?
[20:08:03] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[20:08:20] <Haohmaru> no.
[20:08:39] <Haohmaru> don't you dare contaminate my pizza
[20:09:15] <PJBoy> ah you're more sane than I gave you credit for
[20:09:16] <rpav> pizza with a peanut-butter "sauce" and bananas 🤔
[20:09:39] <PJBoy> sounds like a hardcore pancake
[20:09:40] * Haohmaru informs the pizza-police
[20:09:52] *** Joins: aniketgm (~Aniket@49.36.109.129)
[20:10:06] <LordKalma> Not wanting to get Tino mad, I'll just say it's funny english is the only language that doesn't say ananas
[20:10:20] <Haohmaru> huh
[20:10:33] <Haohmaru> "pineapple" actually makes some sense
[20:11:01] <PJBoy> does it?
[20:11:10] <PJBoy> I always thought anana was much more appropriate
[20:11:20] <Haohmaru> it has the same diamond-ish shapes as a "pine"
[20:11:29] <Haohmaru> no idea what "anana" is
[20:11:45] <rpav> it's kinda annoying you can't copy a build tree from one branch to another checkout without having to fully rebuild with ninja
[20:11:50] <Haohmaru> it's called "ananas" in .bg but no idea where it comes from
[20:12:02] <rpav> i think it encodes the path somewhere in there
[20:12:38] <rpav> actually i guess if local -I change etc ;/
[20:12:56] *** Quits: aniketgm (~Aniket@49.36.109.129) (Client Quit)
[20:13:01] <PJBoy> nanas are just the original name for it
[20:13:23] <PJBoy> and then the European languages randomly added an a prefix
[20:13:44] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[20:13:52] *** Quits: Rayke (~rayke@user/rayke) (Quit: WeeChat 3.3)
[20:14:04] <LordKalma> well, do you know why Porto, my town Alma Mater, is called Oporto by you beefs?
[20:14:11] <PJBoy> in fact I can blame your Portuguese
[20:14:39] <PJBoy> you're apparently the first European language to have the ananas word
[20:15:10] <LordKalma> When someone is going to Porto they would say "Vou ò Porto" [I'm going to Porto, a contraction of the more correct "Vou ao Porto"]
[20:15:21] <LordKalma> And you beefs, listening that, thought of calling the town Oporto
[20:15:26] <PJBoy> hahahaha
[20:15:30] <LordKalma> and thus, even our airport code is OPO
[20:15:31] <PJBoy> I love that
[20:15:35] <PJBoy> ahahahaha
[20:15:43] <Haohmaru> LordKalma fix your language then ;P~
[20:15:44] * Haohmaru runs
[20:15:47] <PJBoy> my sincerest sympathies
[20:16:15] <Haohmaru> submit a bug rePorto
[20:16:21] <LordKalma> !grab Haohmaru
[20:16:21] <nolyc> LordKalma: The operation succeeded.
[20:17:43] <LordKalma> bue yeah, funny things language do
[20:18:11] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:19:12] <Haohmaru> i mean.. the body of the ananas looks to have same patterns as on a pine.. where does the "apple" come from - *shrug*
[20:20:46] <LordKalma> To be fair, the French call potatos earth apples
[20:20:51] <PJBoy> kinda reminds me of rust
[20:21:10] <PJBoy> and how their enums are used for unions / variants
[20:21:11] <LordKalma> Pomme de terre or something
[20:22:03] <Haohmaru> potatos, apples, onions / vegetarians
[20:22:08] <PJBoy> zero respect to rust for using `fn` as its function declaration keyword btw
[20:22:30] <Haohmaru> huh
[20:23:25] <PJBoy> arguably better than python's def
[20:23:27] <PJBoy> but still
[20:23:42] <LordKalma> trailing return type best return type confirmed
[20:23:44] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:23:52] <LordKalma> I guess it simplifies parsing and avoids most vexing parse
[20:24:07] <LordKalma> bue yeah, I don't get their enumeration overloading
[20:24:10] <PJBoy> I just wish it spelled out "function"
[20:24:38] <PJBoy> `fn` is something a C programmer comes up with to name their unix tool as cryptically as possible
[20:25:11] <PJBoy> it's a new language, it doesn't need to be limited to this kind of mentality
[20:25:33] <Haohmaru> in my code, "fn" is usually the name of a local-scope object intended to hold a filename of something
[20:25:34] <PJBoy> `fn` is much better suited to slideware function names
[20:25:36] <malinus> PJBoy: lol'd
[20:25:50] <PJBoy> :)
[20:26:37] <Haohmaru> PJBoy avoid rust
[20:26:38] <PJBoy> but yeah I agree with Haohmaru here
[20:26:45] <PJBoy> rust made me agree with Haohmaru on something
[20:27:42] <Haohmaru> you know when "the planets align", it's a sign that the ultimate truth has materialized
[20:28:00] <LordKalma> PJBoy, actualkly I can't find again that page where we discovered enumerated types for Rust
[20:28:38] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[20:29:16] <PJBoy> https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html
[20:30:30] <Haohmaru> i read that as "f*ckin route() {}"
[20:30:30] <PJBoy> beginning with the `V4(String)` example
[20:31:07] <LordKalma> hum, not exactly a c++ variant, but yeah, I guess
[20:31:13] <LordKalma> it's an enum member with data
[20:31:31] <LordKalma> more akin to a JS Object
[20:31:45] <PJBoy> it acts exactly like C++ variants doesn't it?
[20:32:23] <PJBoy> especially looking at that Message enum
[20:33:05] <PJBoy> and the impl Message` acts as the visitor function
[20:33:40] <PJBoy> then goes on to talk about how null references were a huge mistake and tells you how to write your own nullable data type
[20:34:20] *** Joins: biberu (~biberu@user/biberu)
[20:34:46] *** Quits: biberu (~biberu@user/biberu) (Remote host closed the connection)
[20:35:08] <LordKalma> Option<T> is in their stdlib
[20:35:52] <PJBoy> oh
[20:36:03] <PJBoy> ughghgh
[20:36:18] <PJBoy> they went for Option?
[20:36:22] <PJBoy> instead of Optional?
[20:36:36] *** Joins: Rayke (rayke@user/rayke)
[20:36:41] <PJBoy> those things mean completely different things
[20:36:43] <PJBoy> god damn it
[20:37:00] <LordKalma> "#This section explores a case study of Option, which is another enum defined by the standard library. "
[20:37:05] <Haohmaru> why do you care about rust tho?
[20:37:15] <PJBoy> because man
[20:37:31] <PJBoy> I'm curious
[20:37:42] <PJBoy> it's supposed to be good
[20:37:53] <PJBoy> there's so many flaws in C++ that can never be fixed
[20:38:22] <Haohmaru> rust will have flaws too, don't worry
[20:38:24] <PJBoy> but there's plenty of language features that only C++ has
[20:38:31] <PJBoy> and rust seemingly has many of them
[20:38:40] <PJBoy> so it has the potential to be much better than C++
[20:39:06] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[20:39:29] <LordKalma> well, Rust already had some drama with the mass resignation of the mods teams
[20:39:30] <PJBoy> but then they go and call variants enums and optionals options
[20:39:43] <PJBoy> and it's like, are you trying to be the next go-lang?
[20:40:00] <PJBoy> just doing stuff unconventionally to look different
[20:40:01] *** Joins: biberu (~biberu@user/biberu)
[20:40:09] <LordKalma> why do people like golang so much? never seen it anywhere I think
[20:40:12] <PJBoy> I'm interested in this drama
[20:40:19] <PJBoy> well golang was designed for parallelism
[20:40:20] <LordKalma> but apparently people love to write web backends with it
[20:40:24] <PJBoy> which is a pretty cool selling point
[20:40:27] <LordKalma> ah that's why
[20:40:37] <PJBoy> and google's cloud server stuff had first class support for it
[20:40:56] <LordKalma> PJBoy, https://thenewstack.io/rust-mod-team-resigns-in-protest-of-unaccountable-core-team/
[20:41:05] <PJBoy> thx
[20:41:07] <LordKalma> https://www.reddit.com/r/rust/comments/qzme1z/moderation_team_resignation/
[20:41:16] <PJBoy> thx x2
[20:41:21] <Haohmaru> what were they moderating exactly?
[20:41:32] <LordKalma> PJBoy, also, that Mara, from that tweet earlier today, being part of the core team, does have some tweets about it
[20:41:44] <LordKalma> Haohmaru, all their official social groups? discord and stuff?
[20:41:49] <PJBoy> I didn't realise she was part of the core team!
[20:41:51] <PJBoy> woah
[20:42:09] <manuels> can we change the text of the actoin added to QSystemTray dynamically?
[20:42:47] *** Joins: xkuru (~xkuru@user/xkuru)
[20:43:07] <LordKalma> "@rustlang
[20:43:07] <LordKalma>  Library team lead" right there on the tag
[20:43:08] * Haohmaru looks towards the cue-tea specialist
[20:43:22] <LordKalma> never used QSystem tray
[20:44:04] <Haohmaru> it's probably the same as a normal SystemTray, but with more Qs in front of things
[20:44:43] <LordKalma> manuels, what is that you're trying to do?
[20:44:45] <PJBoy> think the devs must have *smoked* a few Qs
[20:45:01] <LordKalma> PJBoy, actually, her whole twitter caption is some #include<c++> level stuff :p
[20:45:04] <RandomReader> this is sounding more like a -social conversation
[20:45:21] <RandomReader> but I'll note that Rust is older than you seem to be giving it credit for, so the idea of it copying either C++ or Go is a bit silly
[20:45:36] <RandomReader> it takes inspiration from some of the older languages C++ does
[20:45:48] <LordKalma> we need an intermediate channel that's not the -social cancer, but it's more laxed than -general hahaha
[20:46:06] <LordKalma> #C++-tech-talk
[20:46:21] <Haohmaru> LordKalma a non-const union of the two
[20:46:27] <PJBoy> oh it originates from 2010
[20:46:33] <PJBoy> that's considerably older than I thought
[20:47:03] <LordKalma> RandomReader, well, wee didn't say it was copying.
[20:47:10] <LordKalma> we're just comparing design decisions
[20:47:11] <PJBoy> it definitely takes inspiration from C++ though, no question
[20:47:21] <PJBoy> and C++ is taking inspiration from rust in return
[20:47:25] <Haohmaru> 2010 so it's a young boi
[20:47:57] <manuels> LordKalma e.g. put a stop-timer-action there the text should display the time, which hast to be updated regularly
[20:48:25] <LordKalma> action where? I don't get it
[20:49:02] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[20:50:18] *** Joins: Tokamak (~Tokamak@172.58.191.87)
[20:50:55] <malinus> The funniest thing is how rust thinks it can convert systems programmers. While C++ has been trying to do that with a backawards compatible language for 30 years with a pretty terrible conversion rate.
[20:51:10] <Haohmaru> { string s = "social ", g = "general"; string x; size_t i = 0; while (i < s.length()) { x += (s[i] + g[i])/2; ++i; } cout << "#C++-" << x; }
[20:51:11] <geordi> #C++-mjhgifF
[20:51:12] *** Joins: pulse (~pulse@user/pulse)
[20:51:20] <Haohmaru> this should be the new channel
[20:51:37] <PJBoy> ahahaha
[20:51:41] <PJBoy> that's an excellent point malinus
[20:51:42] <LordKalma> they do try to push rust-embedded a lot don't they?
[20:51:48] <PJBoy> and yet, look at the linux kernel
[20:51:50] <rpav> gotta find your niche
[20:51:59] <LordKalma> linux is adopting rust
[20:52:15] <LordKalma> so yeah, Linus and his hatred for C++ in low level has won
[20:52:21] <PJBoy> yeah, this random stuff is opening up to rust that never even gave C++ a chance
[20:52:33] *** Quits: andreasbuhr (~quassel@p549db4c8.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:52:37] <PJBoy> but to be fair, the borrow checker is a big deal
[20:52:48] <rpav> rust being "the other one but not C++" is a strong selling point to people who don't know C++ but hate it .. though to be fair, pre-11 they had a point, and 11 is pretty recent in linux history
[20:52:53] <PJBoy> all we have in C++ land is a shitload of tooling
[20:52:53] <malinus> rpav: hahaha yeah and I've been working in that industry for 5+ years, and let me tell you - rust is just webdevs larping embedded developers. They have never talked with a C programmer.
[20:53:13] <veverak> looooooool
[20:53:21] <rpav> malinus: not surprised
[20:53:27] <veverak> malinus: that "rust is just webdevs larping embedded developers" made me laugh hard just now :D
[20:53:49] <LordKalma> how hard can it be? said the JS programmer
[20:53:52] <RandomReader> Rust's static analysis combined with systems flexibility is a bit unique, and they proved it could work with real-world projects
[20:54:05] <RandomReader> the others I've seen that tried it never moved past research phase
[20:54:07] <rpav> it's hard to sell C++ though when it's like "well, C++ is pretty solid now, i mean, since 2017-18" ;/
[20:54:27] <LordKalma> true
[20:54:27] <PJBoy> you could even argue that rust and modern C++ are equally old
[20:54:33] <RandomReader> (various older languages are just not seen as flexible enough, e.g. Ada)
[20:54:49] <rpav> times have changed a lot too
[20:54:50] <LordKalma> Rust has a versioned language and faster cycles
[20:54:59] <PJBoy> and C++'s backwards compatibility with C is questioable
[20:55:20] <PJBoy> but god damn it
[20:55:25] <RandomReader> but the primary push for Rust seems to be based in the same thing a lot of other modern languages are: how to guard against mistakes by new people
[20:55:33] <PJBoy> I just want good names
[20:55:41] <RandomReader> (since the bulk of commercial development is always "new people")
[20:55:42] <Haohmaru> you get "fn"
[20:56:26] <malinus> RandomReader: most of the C old timers seem to make the same mistakes tbh (the ones that the compiler is supposed to take care of).
[20:56:45] <PJBoy> if you give me a language with explicit references, exceptions, RAII, and good names; I would never use another language ever again
[20:57:34] <Haohmaru> -std=gnu++-explicit-references
[20:57:35] <LordKalma> expect at the first moment you need a dependency
[20:57:45] <LordKalma> also, C#?
[20:57:48] <ville> PJBoy: you don't want exceptions. you think you do, but you don't
[20:58:01] <PJBoy> nah I really do want exceptions
[20:58:10] <PJBoy> there's no substitute
[20:58:22] <RandomReader> C# doesn't have RAII
[20:58:28] *** Joins: paul424 (~tom@ip-37-248-155-42.multi.internet.cyfrowypolsat.pl)
[20:58:31] <RandomReader> most languages don't .. I think even Rust is missing something there
[20:58:33] <PJBoy> C# has the weirdest reference semantics you can find
[20:58:42] <ville> PJBoy: why would you want substitute more horrible shit for the horrible shit you already ?
[20:58:57] <PJBoy> exceptions are the greatest form of error handling ever made
[20:59:05] <LordKalma> you just need a destructor to have RAII
[20:59:07] <PJBoy> that's why so many languages have them
[20:59:38] <PJBoy> C++ is the only language where people complain about exceptions
[20:59:41] <LordKalma> PJBoy, in C# everything is a referencee unless it's a value-type
[20:59:43] <ville> PJBoy: yes people make poor decissions all the time
[21:00:05] <PJBoy> the language should have exceptions anyway
[21:00:09] <PJBoy> you can make the choice to not use them
[21:00:13] <PJBoy> I can make the choice to use them
[21:00:16] <PJBoy> everybody wins
[21:00:18] <ville> exceptions are a complete non-starter
[21:00:19] <veverak> PJBoy: "exceptions are the greatest form of error handling ever made" that's false
[21:00:35] <PJBoy> well I can't account for the future
[21:00:46] <veverak> I can understand that they are good option sometimes, and that they people use them
[21:00:50] <PJBoy> but anything that requires me to manually forward an error is doing it wrong
[21:00:54] <ville> having exceptions, and then making that optional, you've now split the community into several subgroups with that decissions. not a good starting point
[21:00:58] <veverak> but "greatest form of error handling" is stretching it too hard
[21:01:17] <PJBoy> it's just an opinion of course
[21:01:32] <PJBoy> but I do think it's the best option in every scenario, conceptually
[21:01:49] <PJBoy> of course in C++ they cost a lot if they get thrown, so it's not always best to use them in C++
[21:01:58] <ville> that then results in brilliat design choices like say asio and filesystem error handling
[21:02:13] <PJBoy> can't stop programmers from splitting into subgroups
[21:02:13] <RandomReader> C++
[21:02:20] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 252 seconds)
[21:02:21] <veverak> PJBoy: I do not agree
[21:02:23] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 250 seconds)
[21:02:34] <ville> PJBoy: of course you can't, but providing them with more reasons to do so isn't a good starting point either
[21:02:40] <RandomReader> C++'s current exception model is not the only exception model, using it as a criticism for exceptions in general is silly
[21:02:45] <PJBoy> fair enough if you don't agree
[21:02:52] <rpav> RandomReader: yeah absolutely
[21:02:56] <veverak> it creates invisible flow in functiosn code which I consider suboptimal
[21:03:00] <veverak> (in C++!)
[21:03:17] <rpav> that gets straw-manned a lot
[21:03:25] <veverak> RandomReader: yeah, that is true
[21:03:28] <PJBoy> its invisible flow is a feature
[21:03:39] <PJBoy> although I'm not against checked exceptions
[21:03:51] <veverak> that depends on opinion
[21:04:05] <PJBoy> of course
[21:05:10] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[21:05:14] <ville> PJBoy: being invisible is another avenue that makes people write bad code: it hides you the fact that something can fail - which may be allocations - and so you end up with people writing code that has 16K distinct allocations
[21:05:27] <veverak> if I read code for function and I can't tell that it may raise an exception from the code (which happens in case some sub-call raises it), it's not good
[21:05:34] <PJBoy> that's abstractions in general
[21:05:40] <PJBoy> but we consider abstractions to be a good thing
[21:05:48] <veverak> "correctly used"
[21:06:02] <veverak> bad abstractions can be even worse than no abstractions
[21:06:06] <ville> PJBoy: yes some are ok some are not ok. c++ exceptins don't make the cut
[21:06:24] <PJBoy> what makes exceptions a bad abstraction?
[21:06:41] <PJBoy> vector<int> could well do 16k distinct allocations per second
[21:06:46] <PJBoy> what makes exceptions so much worse?
[21:07:21] <rpav> "someone can do a bad thing which leads to bad results, so this thing is bad" is not really valid
[21:07:33] <PJBoy> indeed
[21:07:47] <veverak> rpav: nope, but than there is the part "it happens more than it is worth" people usually want to talk about
[21:07:58] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f0bc:a1a7:555f:2527)
[21:08:02] <rpav> veverak: unfounded assumption
[21:08:02] <veverak> you can talk about "how hard it is to use correctly"
[21:08:03] <pulse> Google be like https://google.github.io/styleguide/cppguide.html#Exceptions
[21:08:21] <pulse> "More generally, exceptions make the control flow of programs difficult to evaluate by looking at code: functions may return in places you don't expect. This causes maintainability and debugging difficulties"
[21:08:27] <pulse> Seems legit
[21:08:29] <PJBoy> google's thing is they have legacy code that's not exception safe
[21:08:40] <PJBoy> but that they would use exceptions if that weren't the case
[21:08:40] <veverak> rpav: which one?
[21:09:05] <veverak> pulse: that's my problem with them exactly
[21:09:08] <rpav> their Con #1 is "we write bad C++, so exceptions are bad"
[21:09:11] <pulse> Exception safety is also a bitch
[21:09:16] <PJBoy> > Things would probably be different if we had to do it all over again from scratch.
[21:09:19] <PJBoy> and all that
[21:09:20] <pulse> It's stupid but exceptions are too useful to ignore
[21:09:40] <rpav> "For instance, if f() calls g() calls h(), and h throws an exception that f catches, g has to be careful or it may not clean up properly." <- if g() doesn't already, then you write exceptionally poor code
[21:10:00] <pulse> I find sometimes they complicate and sometimes they lessen complexity of code. It's a weird twofaced feature
[21:10:19] <rpav> also that's not really transitive analysis; g() knows what it calls
[21:10:34] <veverak> I don't mind exceptions in stuff like the json serialization/deserialization library I use or some more places, but i avoid them in critical parts of the code where I want any error handling explicit
[21:10:52] <PJBoy> try-catch is plenty explicit
[21:10:57] <rpav> this is literally "g is calling a function which throws, and knowingly does nothing, and is written generally unsafely, so exceptions are bad"
[21:11:00] <PJBoy> and it also separates error handling logic from business logic
[21:11:31] <pulse> veverak, I think I do the same without really thinking about it
[21:11:46] <rpav> i dunno a lot of these seem similar to excuses about unit testing .. "testing is hard and requires you write code differently, it's not really worth it"
[21:12:00] <PJBoy> heh
[21:12:02] <veverak> PJBoy: bud once you end up in situation where each function try-catches anything that may appear from subcalls, do you really want to use exceptions? :)
[21:12:18] <LordKalma> that's literally rust
[21:12:21] <rpav> google ought to be embarrassed by that list
[21:12:33] <PJBoy> veverak, well that's one of the reasons I like exceptions over manual error checking
[21:12:48] <rpav> manual error checking is terrible
[21:12:49] <PJBoy> if you did have to check every call, then yeah they're equivalent in nature and value
[21:13:02] <PJBoy> but exceptions offer you to not needs to do this
[21:13:19] <rpav> it's stupid and anyone who doesn't remember that should probably check their memory (or study history, damn kids)
[21:13:24] <PJBoy> the plot thickens with C++ and its cost of exceptions
[21:13:39] <PJBoy> but on a conceptual level, I think exceptions are >= manual error checking
[21:14:00] <PJBoy> where == is obtained from that example scenario
[21:14:15] <ville> i doubt anyone is advocating for c's version of error handling
[21:14:17] <rpav> it's all about _out of line_ error handling, such that you _can't_ miss errors happening
[21:14:30] <pulse> Eh, C error handling is in some (most?) cases more sane than C++
[21:14:43] <rpav> like C++'s model is obviously not perfect but it's not the only exception model, it _could_ be improved, and it's not _that_ bad as it standsd
[21:15:24] <veverak> yeah, I was not advocating for C :D
[21:15:25] <rpav> considering the costs are zero now, and you can idiomatically use it for critical errors only
[21:15:36] <veverak> I prefer monads for situations where I want the error handling to be explicit
[21:16:50] <veverak> yeah, there is proposal for std;:expected which provides certain alternative, but I did not studied it in detail yet
[21:16:52] <veverak> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0323r10.html
[21:18:48] <PJBoy> I stand by that std::expected is dumb
[21:19:13] <veverak> and for some code I've written for protocol serialization/deserialization even std::variant proved to be good option
[21:19:18] <PJBoy> if the error is unexpected, that's the most clear cut use-case for exceptions
[21:19:37] <PJBoy> if we were to speak objectively
[21:19:50] <BurumaSerafuku> exceptions ftw
[21:19:56] <PJBoy> the other names I've seen for this are all much better
[21:19:58] <BurumaSerafuku> but it depends on the design
[21:20:18] <BurumaSerafuku> just a matter of whether your code allows bailing out or if it needs locality
[21:23:16] <Haohmaru> !fact
[21:23:17] <nolyc> Haohmaru: Operations on Traits shall not throw exceptions.
[21:23:31] <veverak> loool, that timing :)
[21:23:32] <Haohmaru> how on topic ;P~
[21:23:55] <veverak> BurumaSerafuku: I like the wording of this "bailing out or if it needs locality"
[21:24:06] <veverak> or, I mean, this seems like proper mental model
[21:24:06] <PJBoy> ahahahaha
[21:28:29] *** Joins: Colt (~Colt@user/colt)
[21:29:12] *** Quits: paul424 (~tom@ip-37-248-155-42.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[21:29:22] <Haohmaru> !fact
[21:29:23] <nolyc> Haohmaru: A synonym for integral type is integer type.
[21:29:40] <PJBoy> bahahahaha
[21:29:50] <Haohmaru> integlar
[21:29:51] <PJBoy> wow thanks C++ standard
[21:30:37] <Haohmaru> shall we make a new channel that's somewhere inbetween the -general and -social?
[21:30:52] <Haohmaru> but i want geordi and nolyc in it
[21:31:18] <pulse> #C++-coffeebreak
[21:31:42] <Haohmaru> { string s = "social ", g = "general"; string x; size_t i = 0; while (i < s.length()) { x += (s[i] + g[i])/2; ++i; } cout << "#C++-" << x; } // this
[21:31:43] <geordi> #C++-mjhgifF
[21:31:52] <pulse> perfect
[21:31:59] <PJBoy> coffeebreak is actually a good one
[21:32:15] <Haohmaru> mine's mathematically correct (minus the rounding)
[21:32:43] <PJBoy> doesn't even account for rounding errors
[21:32:52] <Haohmaru> we can improve it
[21:33:02] * Haohmaru isn't the best at mathz
[21:33:44] <PJBoy> also I simply can't respect someone that uses a while loop instead of a for loop
[21:33:55] <Haohmaru> shadap
[21:34:46] <Haohmaru> i grew up with mIRC scripts, there's only "while" loops there, when i moved to C++ i didn't feel a need for "for" loops
[21:34:55] <Haohmaru> they looked more confusing to me
[21:35:41] <Haohmaru> let's agree on a channel name
[21:35:48] <pulse> Yes but can you make a while loop look like a crab: for(;;)
[21:36:03] <pulse> I already won the argument
[21:36:39] <Haohmaru> let's vote for the name then
[21:36:58] <Haohmaru> or toss a coin
[21:37:48] <rpav> toss a coin on the name
[21:37:54] <BurumaSerafuku> veverak: yeah! exceptions are too overlooked. it's just another alternative that fits some designs better
[21:38:11] <veverak> yup, nothing more, nothing less
[21:38:14] <BurumaSerafuku> although I would love to have Herb Sutter's value exceptions in the language, since we are still paying more then we should for them
[21:39:33] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:40] <kalven> paying how?
[21:39:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:42] *** ChanServ sets mode: +v npaperbot
[21:39:57] <rpav> what would the cost for value exceptions _possibly be_ over even manual error checking
[21:41:35] <BurumaSerafuku> kalven: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0709r4.pdf
[21:41:53] <BurumaSerafuku> §4.1: “C++” projects commonly ban exceptions, because today’s dynamic exception types violate the zerooverhead principle, and do not have statically boundable space and time costs. In particular, throw requires
[21:41:53] <BurumaSerafuku> dynamic allocation and catch of a type requires RTTI.
[21:42:06] <BurumaSerafuku> this is a good summary, but the paper goes more into good detail
[21:42:07] <rpav> err
[21:42:21] <rpav> BurumaSerafuku: i misread, "since" not "though"
[21:42:23] <BurumaSerafuku> we are paying too much
[21:42:42] <rpav> i thought you were saying we'd still be paying too much for value exceptions
[21:42:52] <rpav> which are basically an "if != 0 goto"
[21:42:52] <BurumaSerafuku> no. these are cheaper and cost decently
[21:42:55] <rpav> yea
[21:43:02] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Read error: Connection reset by peer)
[21:43:49] <BurumaSerafuku> this paper is very well written and it's pleading a good case. I wonder why I haven't seen more comments about it
[21:44:13] <rpav> regular exceptions are still useful .. anytime you have fatal "can't continue" errors you _need_ to be able to "continue another way," but value exceptions would be nice for regular return-value dispatch
[21:44:25] <BurumaSerafuku> yup
[21:44:42] <BurumaSerafuku> they are gotos with well defined values and endpoints ;P
[21:45:01] <BurumaSerafuku> kinda the way we used to do longjmp with C, but much much safer
[21:45:15] <great_taste> what is this `auto f = [] (auto &) {};` ? Is it a template?
[21:45:21] <veverak> lambda
[21:45:28] <rpav> not really .. longjmp is about as costly if not more than regular exceptions
[21:45:55] <BurumaSerafuku> maybe. I thought it would cost less or more depending on where we were landing
[21:46:04] <rpav> value exceptions are, unless incredibly silly, a return and local check + jump, no general stack unwinding
[21:46:05] <great_taste> the auto parameter though
[21:46:17] <veverak> which one?
[21:46:19] <PJBoy> generic lambda
[21:46:24] <PJBoy> @ great_taste
[21:46:26] <BurumaSerafuku> great_taste: it deduces the parameter type
[21:46:33] <BurumaSerafuku> it's a template lambda in disguise
[21:46:42] <BurumaSerafuku> we have this in normal functions too
[21:46:47] <great_taste> so an actual function will be defined when it gets invoked
[21:46:51] <veverak> yup
[21:47:05] <BurumaSerafuku> { echo("ahahaha"); } auto echo(auto param) { cout << param; }
[21:47:05] <geordi> ahahaha
[21:47:18] <BurumaSerafuku> auto everywhere ftw
[21:47:23] <great_taste> is that C++20?
[21:47:27] <PJBoy> can't use auto everywhere
[21:47:45] <PJBoy> generic lambdas are C++14
[21:47:55] <PJBoy> auto function templates are C++20
[21:48:26] <PJBoy> most notable drawback of trying to use auto for your function parameters is they can't be declared in a header and defined in a source file
[21:48:28] <great_taste> so a function with an auto param is equivalent to a template
[21:48:42] <PJBoy> it's literally a syntax for declaring a template
[21:49:00] <great_taste> PJBoy because it is a template and you can't do that with templates either
[21:49:11] <PJBoy> indeed
[21:49:50] <great_taste> { auto f = [](auto) {}; TYPEOF(f); }
[21:49:50] <geordi> error: 'TYPEOF' was not declared in this scope; did you mean 'TYPE'? (fix known)
[21:49:56] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[21:50:06] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:50:15] <PJBoy> { echo<const void*>("ahahaha"); } auto echo(auto param) { cout << param; }
[21:50:15] <geordi> 0x4d38eb
[21:50:22] <PJBoy> can even specify the template argument
[21:51:36] <PJBoy> << TYPE<decltype(f)>; auto f = [](auto) {};
[21:51:36] <geordi> <lambda(auto:54)>
[21:52:43] <great_taste> so a generic lambda is actually an "object"
[21:52:45] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 252 seconds)
[21:53:31] <PJBoy> lambdas in general are structs with an operator()
[21:53:42] <PJBoy> or objects thereof
[21:53:44] <veverak> (and lambdas without capture section are convertible to function pointer)
[21:53:56] <PJBoy> generic lambdas have a template operator()
[21:54:18] <PJBoy> but in either case, the struct itself is never a template
[21:54:30] <PJBoy> so these lambdas can be copied/moved about and whatnot
[21:54:37] <great_taste> is it an actual struct that is defined in the c++ runtime?
[21:54:53] <PJBoy> insofar as you can do all the struct things with it
[21:55:00] <PJBoy> you can use a lambda as a base class
[21:55:07] <PJBoy> do type traits on it
[21:55:13] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[21:55:28] <great_taste> please dont
[21:55:46] <PJBoy> << is_class_v<decltype(f)>; auto f = [](auto) {};
[21:55:46] <geordi> true
[21:55:49] *** Joins: teepee (~teepee@openscad/teepee)
[21:56:22] <PJBoy> notable use of deriving from lambdas is given by this example https://en.cppreference.com/w/cpp/utility/variant/visit
[22:01:28] <great_taste> baffling
[22:02:37] <kalven> boggles the mind
[22:06:57] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:09:50] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[22:10:42] <whupdup> Did anyone else you could do this? https://youtu.be/9-_TLTdLGtc?t=1473
[22:10:49] <whupdup> It's apparently been in the standard since C++11
[22:10:54] <whupdup> but it looks like some kind of spooky extension
[22:11:14] <kalven> the trailing && ?
[22:11:21] <whupdup> Yeah
[22:11:25] <whupdup> and trailing const&
[22:11:40] <whupdup> I feel like no one mentions it, I never see it anywhere, this is the first I'm hearing of it
[22:16:42] <hnOsmium0001[m]> search up "east vs west const" for what you call "trailing const&", it's been sort-of a holy war since the beginning of time
[22:17:02] <kalven> this is not about east vs west const
[22:17:36] <BurumaSerafuku> lol
[22:17:43] <kalven> it's about ref qualifiers
[22:17:48] <BurumaSerafuku> :)
[22:19:19] <hnOsmium0001[m]> welp I didn't watch the video lol
[22:19:37] <whupdup> the video only briefly mentions them
[22:20:49] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:22:39] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:22:57] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8)
[22:27:44] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[22:28:07] *** Joins: Simplar (~Simplar@188.163.93.76)
[22:32:57] *** Quits: r-g (~r-g@163.172.58.132) (Quit: r-g)
[22:34:30] <Alipha> rpav: if you're storing user input as keys in a hash, use the siphash hashing algorithm, which is still pretty fast and allows you to specify a key to prevent attackers from putting a bunch of objects in one bucket.
[22:36:30] *** Quits: proller (~p@2a02:6b8:0:40c:f1f4:6b00:d66c:9396) (Ping timeout: 268 seconds)
[22:39:49] <rpav> Alipha: interesting
[22:39:56] <rpav> seems like a bit of a longshot in any case
[22:43:36] <Alipha> rpav: https://www.securityweek.com/hash-table-collision-attacks-could-trigger-ddos-massive-scale
[22:44:10] <rpav> ah yeah that's a different kind of thing though and not super new
[22:44:48] <rpav> i mean more like, leaking hash keys
[22:47:58] *** Joins: meator (~meator@user/meator)
[22:49:00] <kalven> hash dos attacks.. so esoteric. right now we're dealing with logging RCE :P
[22:50:33] <Alipha> rpav: yeah, DoS attacks are the only kind of attacks I'm aware of against hash table hashing algorithms. But I suppose theoretically, you could use timing attacks to determine which bucket a sensitive key is in, which would reduce the key space you'd have to search, or something
[22:50:55] <rpav> yeah
[22:51:20] <PJBoy> side channel attacks have been done with less
[22:51:24] <Alipha> kalven: I can't believe that log4j evaluates ${} in the user input and not just the format string portion
[22:51:36] <PJBoy> jesus christ
[22:51:48] <rpav> Alipha: i can't believe it does that _and no one's noticed until late 2021_
[22:52:01] <PJBoy> right?
[22:52:31] <rpav> you'd think someone would have been like, browsing the feature list or release notes 20 years ago and been like "let's have some fun"
[22:53:03] <PJBoy> at least we get to write a CVE number for format string attack that isn't C/C++
[22:55:07] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 256 seconds)
[22:56:17] <kalven> Alipha: yeah.. it's insane..
[22:57:03] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[22:58:03] <rpav> and the major difference between "c/c++ format exploit" and this is, someone went out of their way to write code to explicitly do this, without apparently thinking better of it at some point
[22:58:45] <rpav> i mean unless i'm misunderstanding the mechanics involved, which may be as i haven't done java for real in .. a very long time
[22:59:47] <BurumaSerafuku> "log4j evaluates ${}" LOOOOOOL that really summarized the bug. so amateurs
[23:00:08] <rpav> yeah but "evaluates" isn't as simple as eval(str) in Java last i checked
[23:00:08] <BurumaSerafuku> "log4j evaluates ${} in the user input" better
[23:00:26] <BurumaSerafuku> still they've messed up big time
[23:04:35] *** Joins: paul424 (~tom@ip-37-248-155-42.multi.internet.cyfrowypolsat.pl)
[23:04:45] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 256 seconds)
[23:06:10] <kalven> the pièce de résistance is that log4j can be made to download java code from a remote server and execute it.. forget about some carefully crafted rop code exploit that only works on some architecture.. this exploit is fully portable \o/
[23:06:49] <BurumaSerafuku> lml
[23:07:39] <ville> evaluating a "${}" would be fine, the problem is that the things it can evaluate to, for example a URL controlled by the outside party
[23:08:19] <ville> say you would have to configure that there was a name => url mapping, and only the name could appear in "${}", you'd already be fine
[23:09:46] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[23:10:36] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[23:13:08] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Quit: Hello71)
[23:14:05] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[23:14:20] *** Joins: teepee (~teepee@openscad/teepee)
[23:16:45] <rpav> there's a huge leap between "expands variable names like ${FOO}" and "takes the contents of the expression, loads it from the internet, and proceeds to run code"
[23:16:48] *** Joins: EdFletcher (~PKD@user/edfletcher)
[23:17:00] <rpav> like i'm not sure how one gets anywhere down this road without thinking what a terrible idea it is
[23:17:31] <imMute> especially doing all that on user-supplied data.
[23:17:37] <imMute> did they learn nothing from SQL injection attacks?
[23:17:42] <rpav> yeah
[23:17:51] <ville> yes. to use nosql
[23:17:56] <rpav> haha
[23:18:05] <rpav> "sql is hard, let's not learn anythnig and use nosql"
[23:18:11] *** Quits: EdFletcher (~PKD@user/edfletcher) (Remote host closed the connection)
[23:18:28] <imMute> "oh shit, we need to link records together.  guess we gotta build some kind of linking mechanism and query language for it"
[23:19:31] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Quit: Leaving)
[23:19:51] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:21:19] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:21:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:23:18] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:24:18] *** Joins: EdFletcher (~PKD@user/edfletcher)
[23:28:34] <LordKalma> what's nosql even?
[23:28:52] <PJBoy> key-value pairs in the cloud
[23:29:35] *** Joins: proller (~p@80.240.216.69)
[23:30:10] *** Quits: Simplar (~Simplar@188.163.93.76) (Remote host closed the connection)
[23:30:29] *** Joins: Simplar (~Simplar@188.163.93.76)
[23:30:30] <PJBoy> it's not very sophisticated, but it scales well
[23:31:01] <imMute> s/in the cloud//
[23:31:26] <PJBoy> yes, the cloud is optional
[23:31:33] *** Quits: c4017w (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[23:31:57] <Alipha> Presumably they assumed the file path in ${} could only be a local .class file, but that's still an idiotic idea, just a tad less so
[23:32:10] <rpav> usually more structured document storage with some various rudimentary search attached
[23:32:23] <rpav> it _is_ handy to have such a thing, and SQL is pretty bad at hierarchy
[23:33:01] <rpav> like "select _just_ this data in this tree" is very inefficient with SQL, and pretty inefficient even with SQL extensions
[23:35:27] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[23:38:46] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[23:38:58] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[23:39:27] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 250 seconds)
[23:41:15] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[23:41:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:323:f5e4:2678:9ded) (Ping timeout: 252 seconds)
[23:41:22] <Alipha> There's some tricks that you can do, such as adding a depth column and a column representing the path to the node in the hierarchy. So you can have columns containing 3 and 'foo.bar.quux' and then `where node_path like 'foo.bar.%' and depth = 3` would grab quux and all of quux's siblings
[23:41:38] *** Quits: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514) (Quit: Ping timeout (120 seconds))
[23:44:33] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[23:44:43] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[23:45:37] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:46:04] *** Joins: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514)
[23:46:07] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[23:46:25] *** Joins: badone (~badone@209.132.189.152)
[23:46:45] *** Quits: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514) (Client Quit)
[23:48:07] <Alipha> I suppose still inefficient if node_path isn't a parameter passed in, but part of a join
[23:48:37] *** Joins: adeliktas67 (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514)
[23:48:57] *** adeliktas67 is now known as adeliktas
[23:49:34] *** Quits: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514) (Client Quit)
[23:49:55] *** Joins: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514)
[23:50:28] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 265 seconds)
[23:50:34] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[23:50:53] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:52:18] <rpav> hmm interesting .. you could probably build some interesting indexes of that without having to separately store it
[23:52:47] <rpav> not sure it covers all the cases but you can probably find some useful solution regardless if you must
[23:52:58] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Ping timeout (120 seconds))
[23:54:49] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 265 seconds)
[23:57:27] *** Joins: cq-work (~Z_Lund@user/cq-work)
[23:57:33] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[23:58:54] <kalven> https://github.com/rui314/mold/releases/tag/v1.0.0
[23:59:44] *** Joins: proller (~p@2a02:6b8:b081:8003::1:3)
[23:59:46] <rpav> "as I'm also the original creator of the current version of the LLVM lld linker" .. so why mold
